class C{  private void promoteTail(CacheDataPage cacheDataPage) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  DataPageExtra dpExtra=cacheDataPage._extra;  setModified(cacheDataPage);  DataPageMain lastMain=dpMain.getChildPage(dpExtra._entryView.getLast());  CacheDataPage lastDataPage=new CacheDataPage(lastMain);  updateParentTail(cacheDataPage,lastDataPage,UpdateType.ADD);  Entry lastEntry=dpExtra._entryView.promoteTail();  dpExtra._totalEntrySize-=lastEntry.size();  dpExtra._entryPrefix=EMPTY_PREFIX;  lastMain.setParentPage(dpMain._pageNumber,true);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.188 -0400",hash_original_method="7C391538556A6293A427C1DC577EC6A3",hash_generated_method="ACF5C7254CAD9AC0659F72588706415F") public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void putStandard(RootFragment fragment){  stackList.get(stackList.size() - 1).add(fragment);}  }
class C{  protected HawkbitErrorNotificationMessage buildNotification(final Throwable ex){  LOG.error("Error in UI: ",ex);  final I18N i18n=SpringContextHelper.getBean(I18N.class);  return new HawkbitErrorNotificationMessage(STYLE,i18n.get("caption.error"),i18n.get("message.error.temp",ex.getClass().getSimpleName()),false);}  }
class C{  private void ensureCurrentLayout(){  if (!tabPane.isValid()) {    tabPane.validate();  }  if (!tabPane.isValid()) {    TabbedPaneLayout layout=(TabbedPaneLayout)tabPane.getLayout();    layout.calculateLayoutInfo();  }}  }
class C{  public void actionPerformed(ActionEvent e){  m_popup.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  String cmd=e.getActionCommand();  for (int i=0; i < m_list.size(); i++) {    KeyNamePair pp=(KeyNamePair)m_list.get(i);    if (cmd.equals(pp.getName())) {      launchReport(pp);      return;    }  }}  }
class C{  public void signOut(){  SharedPreferences.Editor edit=this.mSharedPreferences.edit();  edit.remove(Constants.USER_NAME);  edit.apply();  Intent intent=new Intent(this,LoginActivity.class);  intent.putExtra("oldUsername",this.username);  startActivity(intent);}  }
class C{  public void write(BytesRef text,TermsEnum termsEnum) throws IOException {  BlockTermState state=postingsWriter.writeTerm(text,termsEnum,docsSeen);  if (state != null && ((IDVersionPostingsWriter)postingsWriter).lastDocID != -1) {    assert state.docFreq != 0;    assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq : "postingsWriter=" + postingsWriter;    pushTerm(text);    PendingTerm term=new PendingTerm(BytesRef.deepCopyOf(text),state);    pending.add(term);    numTerms++;    if (firstPendingTerm == null) {      firstPendingTerm=term;    }    lastPendingTerm=term;  }}  }
class C{  void unweave(int id) throws PTAgentException {  while (true) {    ConfiguredAdvice[] oldWoven=woven.get();    boolean found=false;    for (int i=0; i < oldWoven.length; i++) {      ConfiguredAdvice e=oldWoven[i];      if (e.id == id) {        ConfiguredAdvice[] newWoven=new ConfiguredAdvice[oldWoven.length - 1];        System.arraycopy(oldWoven,0,newWoven,0,i);        System.arraycopy(oldWoven,i + 1,newWoven,i,newWoven.length - i);        if (woven.compareAndSet(oldWoven,newWoven)) {          return;        } else {          found=true;        }      }    }    if (!found) {      throw new PTAgentException("No advice with ID %d woven at tracepoint %s",id,this.id);    }  }}  }
class C{  private Configuration(Context context){  setString(context,READY,R.string.msg_ready,0x0000ff);  setString(context,GAME_OVER,R.string.msg_game_over,0xff0000);  setString(context,WINNER,R.string.msg_winner,0x00ff00);  for (int i=0; i < 10; i++) {    mTextStrings[DIGIT_START + i]=String.valueOf((char)('0' + i));    mTextColors[DIGIT_START + i]=0xe0e020;    mTextShadows[DIGIT_START + i]=false;  }}  }
class C{  public CSSDescendantSelector(Selector ancestor,SimpleSelector simple){  super(ancestor,simple);}  }
class C{  protected SVGOMDocument(){}  }
class C{  public StreamEx<K> keys(){  return map(null);}  }
class C{  protected void updateOrderSummary(){  final Checkout checkout=getSampleApplication().getCheckout();  if (checkout == null) {    return;  }  ((TextView)findViewById(R.id.line_item_price_value)).setText('$' + checkout.getLineItems().get(0).getPrice());  double totalDiscount=0;  Discount discount=checkout.getDiscount();  if (discount != null && !TextUtils.isEmpty(discount.getAmount())) {    totalDiscount+=Double.parseDouble(discount.getAmount());    findViewById(R.id.discount_row).setVisibility(View.VISIBLE);  } else {    findViewById(R.id.discount_row).setVisibility(View.GONE);  }  ((TextView)findViewById(R.id.discount_value)).setText("-$" + Double.toString(totalDiscount));  double totalGiftCards=0;  List<GiftCard> giftCards=checkout.getGiftCards();  if (giftCards != null) {    for (    GiftCard giftCard : giftCards) {      if (!TextUtils.isEmpty(giftCard.getAmountUsed())) {        totalGiftCards+=Double.parseDouble(giftCard.getAmountUsed());      }    }  }  if (totalGiftCards > 0) {    ((TextView)findViewById(R.id.gift_card_value)).setText("-$" + Double.toString(totalGiftCards));    findViewById(R.id.gift_card_row).setVisibility(View.VISIBLE);  } else {    findViewById(R.id.gift_card_row).setVisibility(View.GONE);  }  ((TextView)findViewById(R.id.taxes_value)).setText('$' + checkout.getTotalTax());  ((TextView)findViewById(R.id.total_value)).setText('$' + checkout.getPaymentDue());  if (checkout.getShippingRate() != null) {    ((TextView)findViewById(R.id.shipping_value)).setText('$' + checkout.getShippingRate().getPrice());  } else {    ((TextView)findViewById(R.id.shipping_value)).setText("N/A");  }}  }
class C{  @Override public ActionMode startActionModeForChild(View child,ActionMode.Callback callback){  return null;}  }
class C{  private Journal readJournal(ParcelFileDescriptor oldState){  Journal journal=new Journal();  if (oldState == null) {    return journal;  }  FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());  try {    int availableBytes=inStream.available();    if (DEBUG)     Log.d(TAG,"available " + availableBytes);    if (availableBytes < MAX_JOURNAL_SIZE) {      byte[] buffer=new byte[availableBytes];      int bytesRead=0;      boolean valid=false;      InvalidProtocolBufferNanoException lastProtoException=null;      while (availableBytes > 0) {        try {          int result=inStream.read(buffer,bytesRead,1);          if (result > 0) {            availableBytes-=result;            bytesRead+=result;          } else {            Log.w(TAG,"unexpected end of file while reading journal.");            availableBytes=0;          }        } catch (        IOException e) {          buffer=null;          availableBytes=0;        }        try {          MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead));          valid=true;          availableBytes=0;          if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal");        } catch (        InvalidProtocolBufferNanoException e) {          lastProtoException=e;          journal.clear();        }      }      if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead);      if (!valid) {        Log.w(TAG,"could not find a valid journal",lastProtoException);      }    }  } catch (  IOException e) {    Log.w(TAG,"failed to close the journal",e);  }  return journal;}  }
class C{  @Override public T readObject(InRawH3 is,InH3Amp in){  TempOutputStream tos=new TempOutputStream();  is.readBinary(tos);  StreamSourceH3 ss=null;  return (T)ss;}  }
class C{  public boolean isLeafAddr(long addr){  final long offset=getOffset(addr);  final int length=getByteCount(addr);  final boolean isNodeAddr=offset >= offsetLeaves && (offset + length) <= (offsetLeaves + extentLeaves);  return isNodeAddr;}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  int exampleIndex=-1;  try {    int startIndex=value.indexOf('[');    if (startIndex >= 0) {      int endIndex=value.indexOf(']');      if (endIndex < 0) {        throw new IllegalArgumentException("The example index must be enclosed in '[' and ']'.");      }      if (endIndex < startIndex) {        throw new IllegalArgumentException("The example index must be enclosed in '[' and ']'.");      }      String exampleIndexString=value.substring(startIndex + 1,endIndex);      if (exampleIndexString.trim().length() == 0) {        throw new IllegalArgumentException("Empty example index: no number or wildcard is specified between '[' and ']'.");      }      if (exampleIndexString.trim().equals("*")) {        exampleIndex=-1;      } else {        try {          exampleIndex=Integer.parseInt(exampleIndexString);        } catch (        NumberFormatException e) {          throw new IllegalArgumentException("No number or wildcard is specified between '[' and ']'.");        }      }      value=value.substring(0,startIndex).trim();    }  } catch (  IllegalArgumentException e) {    throw new UserError(operator,116,new Object[]{ProcessBranch.PARAMETER_CONDITION_VALUE,e});  }  ExampleSet exampleSet=operator.getConditionInput(ExampleSet.class);  AttributeValueFilter filter=null;  try {    filter=new AttributeValueFilter(exampleSet,value);  } catch (  IllegalArgumentException e) {    throw new UserError(operator,116,new Object[]{value,e});  }  if (exampleIndex < 0) {    for (    Example example : exampleSet) {      if (!filter.conditionOk(example)) {        return false;      }    }    return true;  } else {    Example example=exampleSet.getExample(exampleIndex - 1);    if (example == null) {      throw new UserError(operator,110,exampleIndex);    }    return filter.conditionOk(example);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  protected HadoopConfiguration createHadoopConfiguration(){  return null;}  }
class C{  public Vset addDAandJoinDU(Vset other){  if (this == DEAD_END) {    return this;  }  if (other == DEAD_END) {    return other;  }  if (x == fullX) {    return this;  }  if (other.x == fullX) {    return other.copy();  }  vset=vset | other.vset;  uset=(uset & other.uset) & ~other.vset;  int selfLength=x.length;  long otherX[]=other.x;  int otherLength=otherX.length;  if (otherX != emptyX) {    if (otherLength > selfLength) {      growX(otherLength);    }    int i=0;    while (i < otherLength) {      x[i]|=otherX[i];      i++;      if (i == otherLength)       break;      x[i]=((x[i] & otherX[i]) & ~otherX[i - 1]);      i++;    }  }  for (int i=(otherLength | 1); i < selfLength; i+=2) {    x[i]=0;  }  return this;}  }
class C{  public void delete(){  m_jtree.delete();  m_updater.dispose();}  }
class C{  private void writeMultipart(OutputStream os,MimeMultipart multipart) throws IOException {  MimeContentType ct=multipart.getContentType();  MimeHeaderParameter boundaryParam=ct.getParameter("boundary");  String boundary="--" + boundaryParam.getValue();  for (  MimeBodyPart part : multipart.getBodyParts()) {    os.write(boundary.getBytes());    os.write("\r\n".getBytes());    writeContentType(os,part);    writeHeaders(os,part);    writeBody(os,part);  }  os.write(boundary.getBytes());  os.write("--\r\n".getBytes());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.790 -0400",hash_original_method="0C86CF264F403F294009DA2383C206BD",hash_generated_method="9A0D2328B6F82E9E4A31E48E09F45068") public boolean accept(File dir,String name){  return accept(new File(dir,name));}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public WFG1(int k,int l,int M){  super(k,l,M);}  }
class C{  public Set<byte[]> select(final String columnName,final Pattern columnMatcher){  final Iterator<Map.Entry<byte[],Map<String,byte[]>>> i=iterator();  Map.Entry<byte[],Map<String,byte[]>> row;  Map<String,byte[]> prop;  byte[] val;  final Set<byte[]> pks=new TreeSet<byte[]>(this.table.ordering);  while (i.hasNext()) {    row=i.next();    prop=row.getValue();    val=prop.get(columnName);    if (val != null) {      if (columnMatcher.matcher(UTF8.String(val)).matches()) {        pks.add(row.getKey());      }    }  }  return pks;}  }
class C{  void add(final Node node){  nodes.add(node);  if (currentGoal == null) {    currentGoal=node;  }}  }
class C{  protected void doStateInHiveWithInfo(){  double pForgettingSource=getSimulation().pForgettingSource;  double pForagingAgain=getSimulation().pForagingAgain;  setColor(Color.yellow);  receptive=true;  double colonyNectarNeed=getSimulation().colonyNectarNeed;  double threshold_forgetting=pForgettingSource * (100 - sourceQuality);  if (threshold_forgetting > r.nextDouble()) {    forgetSource(Color.yellow,State.inHiveWithoutInfo);    goInHive();    return;  }  if ((dancingThreshold > -1) && (dancingThreshold * colonyNectarNeed) > (r.nextDouble() * 10000)) {    setColor(getFoodSource().getVisualizationObject().getColor());    setState(State.dancing);    repeatedDance++;    receptive=false;    dancingTime=(int)Math.round(10 + dancingThreshold * .33);    dancingThreshold*=.75;    if (dancingThreshold < 1) {      dancingThreshold=-1;      repeatedDance=0;      receptive=true;    }    goInHive();    return;  }  if ((pForagingAgain * colonyNectarNeed) > r.nextDouble()) {    double nectar=nectarForReturn + sourceDirection.radius * nectarForOneStep + r.nextDouble() * 5;    nectarLoad=this.requestNectarFromHive(nectar);    setState(State.leaveHive);    goInHive();    return;  }  goInHive();}  }
class C{  public static void main(String[] args){  DatabaseConnectionDialog dbd=new DatabaseConnectionDialog(null,"URL","username");  dbd.setVisible(true);  System.out.println(dbd.getReturnValue() + ":" + dbd.getUsername()+ ":"+ dbd.getPassword()+ ":"+ dbd.getURL());}  }
class C{  static double[] slowLog(double xi){  double x[]=new double[2];  double x2[]=new double[2];  double y[]=new double[2];  double a[]=new double[2];  split(xi,x);  x[0]+=1.0;  resplit(x);  splitReciprocal(x,a);  x[0]-=2.0;  resplit(x);  splitMult(x,a,y);  x[0]=y[0];  x[1]=y[1];  splitMult(x,x,x2);  y[0]=LN_SPLIT_COEF[LN_SPLIT_COEF.length - 1][0];  y[1]=LN_SPLIT_COEF[LN_SPLIT_COEF.length - 1][1];  for (int i=LN_SPLIT_COEF.length - 2; i >= 0; i--) {    splitMult(y,x2,a);    y[0]=a[0];    y[1]=a[1];    splitAdd(y,LN_SPLIT_COEF[i],a);    y[0]=a[0];    y[1]=a[1];  }  splitMult(y,x,a);  y[0]=a[0];  y[1]=a[1];  return y;}  }
class C{  protected void initToolbar(){  toolbar.setFloatable(false);  loadButton=new JButton("Load");  loadButton.setToolTipText("Load Map (<ctrl> bounding box mode, <shift> overview mode)");  loadButton.addActionListener(this);  toolbar.add(loadButton);  saveButton=new JButton("Save");  saveButton.setToolTipText("Save Visible Map");  saveButton.addActionListener(this);  toolbar.add(saveButton);  statisticsButton=new JButton("Statistics");  statisticsButton.setToolTipText("Show Map Statistics");  statisticsButton.addActionListener(this);  toolbar.add(statisticsButton);  sidebarCheckBox=new JCheckBox("Sidebar");  sidebarCheckBox.addActionListener(this);  sidebarCheckBox.setSelected(false);  showSidebar(false);  toolbar.add(sidebarCheckBox);  InfoField infoField=new InfoField(view,getMap());  view.addMapViewEventListener(infoField.getMapViewEventListener());  getMap().addMapDataEventListener(infoField.getMapDataEventListener());  toolbar.add(infoField);}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public RotationMatrixBuilder withThetas(double theta){  for (  Plane plane : planes) {    plane.setTheta(theta);  }  return this;}  }
class C{  private List<Color> project(final List<Entry<Color,Integer>> colorList){  final List<Color> colors=new ArrayList<Color>();  for (  final Entry<Color,Integer> entry : colorList) {    colors.add(entry.getKey());  }  return colors;}  }
class C{  private void computeBoundedTargetValues(){  mTargetX=(mClampedStartingX - mBounds.exactCenterX()) * .7f;  mTargetY=(mClampedStartingY - mBounds.exactCenterY()) * .7f;  mTargetRadius=mBoundedRadius;}  }
class C{  public static GT_Tool_Item constructElectricScrewdriverItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_ScrewdriverIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  public String toTokens(){  return toTokens(unescape(this.urlstub(true,true)));}  }
class C{  public CreateTerrainVisualPanel2(){  initComponents();  _flatPanel.setVisible(true);  _imagePanel.setVisible(false);  _hillPanel.setVisible(false);  _faultPanel.setVisible(false);  this.validate();}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public Map<String,RawProtein<SmartRawMatch>> process(Map<String,RawProtein<SmartRawMatch>> proteinIdToRawProteinMap) throws IOException {  final Map<String,RawProtein<SmartRawMatch>> filteredMatches=new HashMap<String,RawProtein<SmartRawMatch>>();  for (  RawProtein<SmartRawMatch> protein : proteinIdToRawProteinMap.values()) {    final RawProtein<SmartRawMatch> filteredProtein;    if (smartResourceManager.isLicensed()) {      filteredProtein=processProteinLicensed(protein);    } else {      filteredProtein=processProteinUnlicensed(protein);    }    filteredMatches.put(filteredProtein.getProteinIdentifier(),filteredProtein);  }  return filteredMatches;}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return new WindowsHackReader(is);}  }
class C{  public boolean isSpeaking(){  return speaking;}  }
class C{  public FunctionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public Database create() throws IOException {  Database db=DatabaseImpl.create(_fileFormat,_mdbFile,_channel,_autoSync,_charset,_timeZone);  if (_dbProps != null) {    PropertyMap props=db.getDatabaseProperties();    props.putAll(_dbProps.values());    props.save();  }  if (_summaryProps != null) {    PropertyMap props=db.getSummaryProperties();    props.putAll(_summaryProps.values());    props.save();  }  if (_userProps != null) {    PropertyMap props=db.getUserDefinedProperties();    props.putAll(_userProps.values());    props.save();  }  return db;}  }
class C{  public static void createCollectionLevelSnapshot(SolrZkClient zkClient,String collectionName,CollectionSnapshotMetaData meta) throws KeeperException, InterruptedException {  String zkPath=getSnapshotMetaDataZkPath(collectionName,Optional.of(meta.getName()));  zkClient.makePath(zkPath,Utils.toJSON(meta),CreateMode.PERSISTENT,true);}  }
class C{  public OsmNetworkReaderJohan(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public final void removeElementAt(int index){  Object[] newObjects=new Object[m_Objects.length];  System.arraycopy(m_Objects,0,newObjects,0,index);  System.arraycopy(m_Objects,index + 1,newObjects,index,m_Objects.length - (index + 1));  m_Objects=newObjects;  m_Size--;}  }
class C{  private Polygon buildDummyPolygon(){  Coordinate c1=new Coordinate(0.0,0.0);  Coordinate c2=new Coordinate(0.0,10 * width);  Coordinate c3=new Coordinate(10 * width,10 * width);  Coordinate c4=new Coordinate(10 * width,0.0);  Coordinate[] ca={c1,c2,c3,c4,c1};  return gf.createPolygon(ca);}  }
class C{  public UTMPoint(){}  }
class C{  public static int[] copy(int[] array){  if (array != null) {    int[] copy=new int[array.length];    System.arraycopy(array,0,copy,0,array.length);    return copy;  }  return null;}  }
class C{  public CategoryImageNameStrategyImpl(final String relativeInternalRootDirectory,final GenericDAO<AttrValueCategory,Long> attrValueCategoryDao,final LanguageService languageService){  super(Constants.CATEGORY_IMAGE_REPOSITORY_URL_PATTERN,relativeInternalRootDirectory,languageService);  this.attrValueEntityCategoryDao=attrValueCategoryDao;}  }
class C{  protected TypeInfoImpl(){  super();}  }
class C{  public static final Parameter base(){  return new Parameter(P_GE);}  }
class C{  public BaseStreamRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final Class<T> responseClass){  mBaseRequest=new BaseRequest(requestUrl,client,options,responseClass){  };}  }
class C{  @Command(description="Deletes a certificate") public void deleteCertificate(@Param(name="certId",description="Certificate ID") String certId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(CERT_ID_PARAM,certId);  try {    SignerClient.execute(new DeleteCert(certId));    AuditLogger.log(DELETE_THE_CERT_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(DELETE_THE_CERT_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getNamespace_();}  }
class C{  public static boolean isEnabled(){  return (factory == enabledFactory) ? true : false;}  }
class C{  public String globalInfo(){  return "An instance filter that converts all incoming sparse instances" + " into non-sparse format.";}  }
class C{  public static Tradingday newInstance(ZonedDateTime date){  Tradingday tradingday=new Tradingday(TradingCalendar.getTradingDayStart(date),TradingCalendar.getTradingDayEnd(date));  return tradingday;}  }
class C{  private static void validateInteger(String fieldName,String value){  try {    validateRegex(fieldName,value,INTEGER_REGEX);  } catch (  Exception e) {    throw APIException.badRequests.serviceFieldNonInteger(fieldName);  }}  }
class C{  public CatalogEntryRemovedException(){}  }
class C{  private void pauseTimer(){  if (mCountDown != null) {    mCountDown.cancel();    mCountDown=null;  }}  }
class C{  @Override protected void loadChars(jmri.jmrix.AbstractMRReply msg,java.io.DataInputStream istream) throws java.io.IOException {  int i;  String m;  if (log.isDebugEnabled()) {    log.debug("loading characters from port");  }  if (!(msg instanceof DCCppReply)) {    log.error("SerialDCCppPacketizer.loadChars called on non-DCCppReply msg!");    return;  }  byte char1=readByteProtected(istream);  m="";  while (char1 != '<') {    char1=readByteProtected(istream);  }  log.debug("Serial: Message started...");  for (i=0; i < msg.maxSize(); i++) {    char1=readByteProtected(istream);    if (char1 == '>') {      log.debug("Received: {}",m);      ((DCCppReply)msg).parseReply(m);      break;    } else {      m+=Character.toString((char)char1);      log.debug("msg char[{}]: {} ({})",i,char1,Character.toString((char)char1));    }  }}  }
class C{  public boolean visit(SwitchStatement node){  return true;}  }
class C{  public boolean hasChildren(CnATreeElement parentElement){  try {    boolean hasChildren=true;    CacheObject cachedElement=cache.getCachedObject(parentElement);    if (cachedElement != null) {      hasChildren=(cachedElement.getHasChildren() == ChildrenExist.YES);    } else     if (ChildrenExist.isAlwaysChildless(parentElement)) {      hasChildren=false;    } else {      String uuid=(parentElement != null) ? parentElement.getUuid() : "unknown";      LOG.warn("Can't determine if element has children (returning true). Element not found in cache, uuid: " + uuid);    }    return hasChildren;  } catch (  RuntimeException re) {    LOG.error("RuntimeException while getting children",re);    throw re;  }catch (  Exception e) {    LOG.error("Exception while getting children",e);    throw new RuntimeException(e);  }}  }
class C{  TemplateVariable(TemplateVariableType type,String name,String[] values,int[] offsets){  Assert.isNotNull(type);  Assert.isNotNull(name);  fType=type;  fName=name;  setValues(values);  setOffsets(offsets);  setUnambiguous(false);  setResolved(false);  fInitialLength=values[0].length();}  }
class C{  public Authority(File keyStoreDir,String alias,char[] password,String commonName,String organization,String organizationalUnitName,String certOrganization,String certOrganizationalUnitName){  super();  this.keyStoreDir=keyStoreDir;  this.alias=alias;  this.password=password;  this.commonName=commonName;  this.organization=organization;  this.organizationalUnitName=organizationalUnitName;  this.certOrganization=certOrganization;  this.certOrganizationalUnitName=certOrganizationalUnitName;}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  private String bookkeepingKeyFor(String counterName){  return "metric_meta.aggregatecounters." + counterName;}  }
class C{  public CommonTermsQueryBuilder lowFreqMinimumShouldMatch(String lowFreqMinimumShouldMatch){  this.lowFreqMinimumShouldMatch=lowFreqMinimumShouldMatch;  return this;}  }
class C{  public static void assertSupportedCipherSuites(Set<String> expected,String[] cipherSuites){  Set<String> remainingCipherSuites=assertValidCipherSuites(expected,cipherSuites);  assertEquals("Missing cipher suites",Collections.EMPTY_SET,remainingCipherSuites);  assertEquals(expected.size(),cipherSuites.length);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5});}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void remove(@Nonnull final String category) throws NotificationStoreException {  Objects.requireNonNull(category);  Preconditions.checkArgument(!category.isEmpty(),"category cannot be empty");  final Optional<Context> fetchContext=fetchContext();  if (!fetchContext.isPresent()) {    return;  }  final MapUpdate op=new MapUpdate();  op.removeMap(category);  final UpdateMap.Builder builder=new UpdateMap.Builder(LOCATION,op).withContext(fetchContext.get());  LOGGER.debug("Storing key (async): {}",LOCATION);  try (Timer.Context context=storeTimer.time()){    client.executeAsync(builder.build());  } }  }
class C{  public <T extends PageObject>void waitUntilAfter(T entity,Predicate<T> waitUntil,String errorMessage,int waitTimeInSeconds){  Preconditions.checkNotNull(entity);  Preconditions.checkNotNull(waitUntil);  Preconditions.checkArgument(!Strings.isNullOrEmpty(errorMessage));  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.SECOND,waitTimeInSeconds);  long limit=calendar.getTimeInMillis();  while (System.currentTimeMillis() < limit) {    try {      if (waitUntil.apply(entity)) {        return;      } else {        Util.pause(waitBetweenIterationsInMilliseconds);      }    } catch (    Throwable e) {      if (ignoreExceptions.contains(e.getClass())) {        Util.pause(waitBetweenIterationsInMilliseconds);      } else {        throw e;      }    }  }  throw new AssertionError(errorMessage);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(events) ? events : null);}  }
class C{  public Observable<Integer> exerciseReduce(Observable<Integer> nums){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  protected QoSConfig createQoSConfig(JsonObject qosSettings){  if (qosSettings.containsKey(JSON_FIELD_CONFIG)) {    JsonObject jsonConfig=qosSettings.getJsonObject(JSON_FIELD_CONFIG);    return new QoSConfig(jsonConfig.getInteger("percentile"),jsonConfig.getInteger("quorum"),jsonConfig.getInteger("period"),jsonConfig.getInteger("minSampleCount"),jsonConfig.getInteger("minSentinelCount"));  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.870 -0400",hash_original_method="4A5BBE95AA88C5704ABBACA3A9164E73",hash_generated_method="A1433B2D7C0B436DA90DF75973B3A7F9") public static IOFileFilter nameFileFilter(String name){  return new NameFileFilter(name);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public double cdf(int k){  return Probability.negativeBinomial(k,n,p);}  }
class C{  public void endInsert() throws IOException {  ResponseWriter writer=getWrapped();  writer.endCDATA();  if (inInsertBefore) {    writer.endElement("before");    inInsertBefore=false;  } else   if (inInsertAfter) {    writer.endElement("after");    inInsertAfter=false;  }  writer.endElement("insert");}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public DefaultAllocator(int individualAllocationSize){  this(individualAllocationSize,0);}  }
class C{  private void notifyNoActivity(){  logger.debug("No activity notified, sending enquireLink");  enquireLinkSender.enquireLink();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.241 -0500",hash_original_method="264DF371DD142B0CCD6F6ECE44A7BFB6",hash_generated_method="293E3E92EE6F12C01ED80607A408DDB1") protected String encodeBody(){  if (address == null)   return null;  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  private static int[] trimArray(int[] array,int size){  if (size < 0) {    throw new IllegalArgumentException();  }  if (size == 0) {    return NO_ERRORS;  }  int[] a=new int[size];  System.arraycopy(array,0,a,0,size);  return a;}  }
class C{  public UserActiveException(String message){  super(message);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  flushStartDoc();  m_resultContentHandler.startPrefixMapping(prefix,uri);}  }
class C{  @SuppressWarnings("unchecked") private static void addPrivateField(ClassNode classNode,String fieldName,String fieldJavaType){  FieldNode fieldNode=new FieldNode(Opcodes.ACC_PRIVATE,fieldName,fieldJavaType,null,null);  classNode.fields.add(fieldNode);}  }
class C{  public NSDate(byte[] bytes){  this(bytes,0,bytes.length);}  }
class C{  public void addSteppables(Steppable[] steppables){  toBeAdded.addAll(steppables);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STRICTNESS___ANONYMOUS_STRICTNESS_11:    return anonymous_strictness_1_1 != null && !anonymous_strictness_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean hasRespondedToFirmwareVersionQuery(){  return isFirmwareVersionQueried;}  }
class C{  public Serializer serializer(){  return segments.serializer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.442 -0500",hash_original_method="D9A3541A7FCE1B51D5769F33D7BC37C6",hash_generated_method="721257353AFBA8231AD2516CD0463A2E") static public FileA3D createFromFile(RenderScript rs,File path){  return createFromFile(rs,path.getAbsolutePath());}  }
class C{  public static Optional createOptional(Model model,ElementList elements){  Optional optional=model.createResource(SP.Optional).as(Optional.class);  optional.addProperty(SP.elements,elements);  return optional;}  }
class C{  public void close() throws IOException {}  }
class C{  public DenseDoubleMatrix2D(int rows,int columns){  setUp(rows,columns);  this.elements=new double[rows * columns];}  }
class C{  public boolean isDefaultModel(){  return defaultModel;}  }
class C{  private void cancelAllObsoleteTimer(){  for (  Timer timer : ParameterizedTypes.iterable(ctx.getTimerService().getTimers(),Timer.class)) {    Serializable info=timer.getInfo();    if (info != null && info instanceof TimerType) {      TimerType type=(TimerType)info;      timer.cancel();      logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_TIMER_REMOVED,String.valueOf(type));    }  }}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public T casePrimitiveType(PrimitiveType object){  return null;}  }
class C{  protected void parseRule(){switch (scanner.getType()) {case LexicalUnits.IMPORT_SYMBOL:    nextIgnoreSpaces();  parseImportRule();break;case LexicalUnits.NAMESPACE:nextIgnoreSpaces();parseNamespace();break;case LexicalUnits.AT_KEYWORD:nextIgnoreSpaces();parseAtRule();break;case LexicalUnits.FONT_FACE_SYMBOL:nextIgnoreSpaces();parseFontFaceRule();break;case LexicalUnits.MEDIA_SYMBOL:nextIgnoreSpaces();parseMediaRule();break;case LexicalUnits.PAGE_SYMBOL:nextIgnoreSpaces();parsePageRule();break;default :parseRuleSet();}}  }
class C{  final V remove(Object key,int hash,Object value){  if (!tryLock())   scanAndLock(key,hash);  V oldValue=null;  try {    HashEntry<K,V>[] tab=table;    int index=(tab.length - 1) & hash;    HashEntry<K,V> e=entryAt(tab,index);    HashEntry<K,V> pred=null;    while (e != null) {      K k;      HashEntry<K,V> next=e.next;      if ((k=e.key) == key || (e.hash == hash && key.equals(k))) {        V v=e.value;        if (value == null || value == v || value.equals(v)) {          if (pred == null)           setEntryAt(tab,index,next); else           pred.setNext(next);          ++modCount;          --count;          oldValue=v;        }        break;      }      pred=e;      e=next;    }  }  finally {    unlock();  }  return oldValue;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.301 -0500",hash_original_method="2E63066111AD195377A7E087D5F90A5E",hash_generated_method="B1ECC6AC4E64132290709D619D40862C") private String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=ctrlInput.read()) != '\n') {    sb.append((char)c);  }  return sb.toString();}  }
class C{  private static boolean isXPointerSlash(String uri){  if (uri.equals("#xpointer(/)")) {    return true;  }  return false;}  }
class C{  public List<Interface> showInterface() throws NetworkDeviceControllerException {  List<Interface> interfaces=new ArrayList<Interface>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showInterface.cmd"),60000,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.showInterface.interfacename.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portdescription.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortWWN.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortmodeFCID.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portvsan.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portmode.match")};  String[] groups=new String[10];  Interface intf=null;  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      intf=new Interface(groups[0]);    intf.setStatus(groups[1]);  interfaces.add(intf);break;case 1:intf.setDescription(groups[0]);break;case 2:intf.setWwpn(groups[0]);break;case 3:intf.setMode(groups[0]);intf.setFcid(groups[1]);break;case 4:intf.setVsan(groups[0]);break;case 5:intf.setMode(groups[0]);break;}}return interfaces;}  }
class C{  public String toString(){  return serverAddress == null ? "null" : serverAddress.toString();}  }
class C{  public void addHeader(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null header!");  }  mHeaders.add(view);}  }
class C{  public static XPath2FilterContainer newInstanceSubtract(Document doc,String xpath2filter){  return new XPath2FilterContainer(doc,xpath2filter,XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT);}  }
class C{  protected void extendElement(Element e){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("transmissiondelay","" + InputBits.getTimeoutTime()));    n.addContent(makeParameter("inputbits","" + InputBits.getNumInputBits()));    n.addContent(makeParameter("senddelay","" + OutputBits.getSendDelay()));    n.addContent(makeParameter("outputbits","" + OutputBits.getNumOutputBits()));    node=(SerialNode)SerialTrafficController.instance().getNode(index);    index++;  }}  }
class C{  public static boolean writeFile(String filePath,String content){  return writeFile(filePath,content,false);}  }
class C{  public void evaluate(final EvolutionState state,final Individual[] ind,final boolean[] updateFitness,final boolean countVictoriesOnly,final int[] subpops,final int threadnum){  Individual[] gpi=new Individual[ind.length];  for (int i=0; i < gpi.length; i++) {    if (ind[i] instanceof GEIndividual) {      GEIndividual indiv=(GEIndividual)ind[i];      GESpecies species=(GESpecies)(ind[i].species);      gpi[i]=species.map(state,indiv,threadnum,null);    } else     if (ind[i] instanceof GPIndividual) {      state.output.warnOnce("GPIndividual provided to GEProblem.  Hope that's correct.");      gpi[i]=ind[i];    } else {      state.output.fatal("Individual " + i + " passed to Grouped evaluate(...) was neither a GP nor GE Individual: "+ ind[i]);    }  }  ((GroupedProblemForm)problem).evaluate(state,gpi,updateFitness,countVictoriesOnly,subpops,threadnum);  for (int i=0; i < gpi.length; i++) {    ind[i].fitness=gpi[i].fitness;    ind[i].evaluated=gpi[i].evaluated;  }}  }
class C{  public void testGenerateMergedFileAddFile() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(false);  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(false);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(modFile,mergedFile);  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getMergedFiles()).isEmpty();  assertThat(merger.getFailedToMergeFiles()).isEmpty();}  }
class C{  public synchronized boolean removeReceiver(SpanReceiver receiver){  SpanReceiver[] receivers=curReceivers;  for (int i=0; i < receivers.length; i++) {    if (receivers[i] == receiver) {      SpanReceiver[] newReceivers=new SpanReceiver[receivers.length - 1];      System.arraycopy(receivers,0,newReceivers,0,i);      System.arraycopy(receivers,i + 1,newReceivers,i,receivers.length - i - 1);      curReceivers=newReceivers;      LOG.trace(toString() + ": removed receiver " + receiver.toString());      return true;    }  }  LOG.trace(toString() + ": can't remove receiver " + receiver.toString()+ " since it's not currently in this pool.");  return false;}  }
class C{  public void addModule(Module module){  mModules.add(module);  registerListeners(module);  registerProviders(module);}  }
class C{  protected static void initVariables(VariableService variableService,Map<String,ConfigurationVariable> variables,EngineImportService engineImportService){  for (  Map.Entry<String,ConfigurationVariable> entry : variables.entrySet()) {    try {      Pair<String,Boolean> arrayType=JavaClassHelper.isGetArrayType(entry.getValue().getType());      variableService.createNewVariable(null,entry.getKey(),arrayType.getFirst(),entry.getValue().isConstant(),arrayType.getSecond(),false,entry.getValue().getInitializationValue(),engineImportService);      variableService.allocateVariableState(entry.getKey(),EPStatementStartMethod.DEFAULT_AGENT_INSTANCE_ID,null,false);    } catch (    VariableExistsException e) {      throw new ConfigurationException("Error configuring variables: " + e.getMessage(),e);    }catch (    VariableTypeException e) {      throw new ConfigurationException("Error configuring variables: " + e.getMessage(),e);    }  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void delete(String url,RequestParams params,AsyncHttpResponseHandler responseHandler){  final HttpDelete delete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  sendRequest(httpClient,httpContext,delete,null,responseHandler,null);}  }
class C{  public DenseObjectMatrix3D(int slices,int rows,int columns){  setUp(slices,rows,columns);  this.elements=new Object[slices * rows * columns];}  }
class C{  public static boolean isRequestOngoing(){  checkInstanceNotNull();  return instance.isRequestOngoing();}  }
class C{  public static boolean isClaimable(final NamespaceId namespaceId){  NamespaceId current=namespaceId;  do {    if (NAMESPACE_ID_PARTS.contains(current.getLastPart())) {      return false;    }    current=current.getParent();  } while (null != current);  return true;}  }
class C{  private static String best(final int code){  String reason=RsWithStatus.REASONS.get(code);  if (reason == null) {    reason="Unknown";  }  return reason;}  }
class C{  public void addPoint(Vector3 point1,Vector3 controlPoint1,Vector3 controlPoint2,Vector3 point2){  mPoint1=point1;  mControlPoint1=controlPoint1;  mControlPoint2=controlPoint2;  mPoint2=point2;}  }
class C{  private void formatCookieAsVer(final StringBuffer buffer,final Cookie cookie,final int version){  String value=cookie.getValue();  if (value == null) {    value="";  }  formatParam(buffer,new NameValuePair(cookie.getName(),value),version);  if ((cookie.getPath() != null) && cookie.isPathAttributeSpecified()) {    buffer.append("; ");    formatParam(buffer,new NameValuePair("$Path",cookie.getPath()),version);  }  if ((cookie.getDomain() != null) && cookie.isDomainAttributeSpecified()) {    buffer.append("; ");    formatParam(buffer,new NameValuePair("$Domain",cookie.getDomain()),version);  }}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  protected boolean isReadAllowed() throws IOException {  if (selfClosed) {    throw new IOException("Attempted read on closed stream.");  }  return (wrappedStream != null);}  }
class C{  void logTruncate(Session session,int tableId){  if (trace.isDebugEnabled()) {    trace.debug("log truncate s: " + session.getId() + " table: "+ tableId);  }  session.addLogPos(logSectionId,logPos);  logPos++;  Data buffer=getBuffer();  buffer.writeByte((byte)TRUNCATE);  buffer.writeVarInt(session.getId());  buffer.writeVarInt(tableId);  write(buffer);}  }
class C{  public Object put(Object name,Object value){  return map.put((Attributes.Name)name,(String)value);}  }
class C{  private void blockByLocationMoves() throws BuildFailedException {  List<RouteLocation> routeList=_train.getRoute().getLocationsBySequenceList();  for (  RouteLocation rl : routeList) {    if (rl == _train.getTrainDepartsRouteLocation()) {      continue;    }    int possibleMoves=rl.getMaxCarMoves() - rl.getCarMoves();    if (rl.isDropAllowed() && possibleMoves > 0) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockLocationHasMoves"),new Object[]{rl.getName(),possibleMoves}));    }  }  RouteLocation rl=_train.getTrainDepartsRouteLocation();  while (true) {    String blockId=getLargestBlock();    if (blockId.equals("") || _numOfBlocks.get(blockId) == 1) {      break;    }    RouteLocation rld=getLocationWithMaximumMoves(routeList,blockId);    if (rld == null) {      break;    }    if (rld.getMaxCarMoves() > _numOfBlocks.get(blockId)) {      _numOfBlocks.remove(blockId);      if (blockId.equals("0")) {        continue;      }      routeList.remove(rld);      Location loc=locationManager.getLocationById(blockId);      Location setOutLoc=rld.getLocation();      if (loc != null && setOutLoc != null && checkDropTrainDirection(rld)) {        for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {          Car car=_carList.get(_carIndex);          if (car.getTrack() == _departStageTrack && car.getLastLocationId().equals(blockId)) {            if (car.getDestination() != null) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockNotAbleDest"),new Object[]{car.toString(),car.getDestinationName()}));              continue;            }            if (car.getFinalDestination() != null) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockNotAbleFinalDest"),new Object[]{car.toString(),car.getFinalDestination().getName()}));              continue;            }            if (!car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) && !car.getLoadName().equals(CarLoads.instance().getDefaultLoadName())) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockNotAbleCustomLoad"),new Object[]{car.toString(),car.getLoadName()}));              continue;            }            if (car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) && (_departStageTrack.isAddCustomLoadsEnabled() || _departStageTrack.isAddCustomLoadsAnySpurEnabled() || _departStageTrack.isAddCustomLoadsAnyStagingTrackEnabled())) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockNotAbleCarTypeGenerate"),new Object[]{car.toString(),car.getLoadName()}));              continue;            }            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockingCar"),new Object[]{car.toString(),loc.getName(),rld.getName()}));            if (!findDestinationAndTrack(car,rl,rld)) {              addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockNotAbleCarType"),new Object[]{car.toString(),rld.getName(),car.getTypeName()}));            }          }        }      }    } else {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockDestNotEnoughMoves"),new Object[]{rld.getName(),blockId}));      _numOfBlocks.remove(blockId);    }  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  public List resources(){  if (this.resources != null) {    unsupportedIn2_3();  }  return this.resources;}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  protected Iterator createValuesIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new ValuesIterator(this);}  }
class C{  public boolean addRemoteTextFile(String url,String content){  URL mockURL;  try {    mockURL=MockURL.URL(url);  } catch (  MalformedURLException e) {    return false;  }  if (mockURL.getProtocol().toLowerCase().equals("file")) {    return false;  }  String key=url.toString();  if (remoteFiles.containsKey(key)) {    return false;  }  RemoteFile rf=new RemoteFile(key,content);  remoteFiles.put(key,rf);  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String(java.lang.StringBuffer buffer){}  }
class C{  protected void processTuple(Object tuple){  if (keyMethod == null && keyField != "") {    pojoClass=tuple.getClass();    try {      keyMethod=generateGetterForKeyField();    } catch (    NoSuchFieldException e) {      throw new RuntimeException("Field " + keyField + " is invalid: "+ e);    }  }  KeyedMessage msg;  if (keyMethod != null) {    msg=new KeyedMessage(getTopic(),keyMethod.get(tuple),tuple);  } else {    msg=new KeyedMessage(getTopic(),tuple,tuple);  }  getProducer().send(msg);  messageCount++;  if (tuple instanceof byte[]) {    byteCount+=((byte[])tuple).length;  }}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  public void addALoad(int local){  xop(ByteCode.ALOAD_0,ByteCode.ALOAD,local);}  }
class C{  public ChunkManager(GlowWorld world,ChunkIoService service,ChunkGenerator generator){  this.world=world;  this.service=service;  this.generator=generator;  biomeGrid=MapLayer.initialize(world.getSeed(),world.getEnvironment(),world.getWorldType());}  }
class C{  public static void removeListener(ILogEventListener aListener){  loggerImpl.removeListener(aListener);}  }
class C{  public Boolean isAtBootIpV6Enabled(){  return atBootIpV6Enabled;}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.LITERAL;}  }
class C{  public static Function<String> jsonType(Object json){  return new JSONArgumentFunction<>("json_type",json);}  }
class C{  private void heapifyDown(int cur,Object val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    int best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public Column addToTable(Table table) throws IOException {  return new TableUpdater((TableImpl)table).addColumn(this);}  }
class C{  public ReasonFlags(BitArray reasons){  this.bitString=reasons.toBooleanArray();}  }
class C{  public boolean isAD_Override_Dict(){  Object oo=get_Value(COLUMNNAME_AD_Override_Dict);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void mergeSort(short[] a,int fromIndex,int toIndex,ShortComparator c){  rangeCheck(a.length,fromIndex,toIndex);  short aux[]=(short[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  private String createRequestString(AuthnRequest authRequest,String relayState,Boolean isSigned,PrivateKey signingKey,String algorithmName) throws MarshallingException, IOException, NoSuchAlgorithmException, WebssoClientException {  Validate.notNull(authRequest,"AuthnRequest object");  if (isSigned && (signingKey == null || algorithmName == null)) {    throw new WebssoClientException("Signing key missing, " + "or algorithm not specified.");  }  SamlUtils utils=new SamlUtils(null,signingKey,algorithmName,null,null);  String samlRequestParameter=SamlUtils.encodeSAMLObject(authRequest,true);  String notSignedRequest=SamlUtils.generateRedirectUrlQueryStringParameters(samlRequestParameter,null,relayState,isSigned ? algorithmName : null,null);  logger.info("Relay State value is: " + relayState);  if (notSignedRequest == null || notSignedRequest.isEmpty()) {    logger.info("Found null or empty message to be signed. ");  }  String queryString="?";  if (isSigned) {    String signature=utils.signMessage(notSignedRequest);    logger.debug("Signature " + signature);    String signedString=SamlUtils.generateRedirectUrlQueryStringParameters(samlRequestParameter,null,relayState,algorithmName,signature);    queryString+=signedString;  } else {    queryString+=notSignedRequest;  }  return queryString;}  }
class C{  @Override public void bounce(Mail mail,String message,MailAddress bouncer) throws MessagingException {  if (mail.getSender() == null) {    if (log.isInfoEnabled())     log.info("Mail to be bounced contains a null (<>) reverse path.  No bounce will be sent.");    return;  } else {    if (log.isInfoEnabled())     log.info("Processing a bounce request for a message with a reverse path of " + mail.getSender().toString());  }  MailImpl reply=rawBounce(mail,message);  reply.getMessage().setFrom(bouncer.toInternetAddress());  reply.getMessage().saveChanges();  reply.setSender(null);  sendMail(reply);  LifecycleUtil.dispose(reply);}  }
class C{  public static void delete(long sync_id){  SYNCHRONIZER_SERVICE.removeSynchronizer(sync_id);}  }
class C{  private Set<SRDFPoolMapping> fireSRDFPlacementRules(final Set<SRDFPoolMapping> srdfPoolMappings,final Integer resourceCount){  final String validatingSRDF="Validating storage systems to ensure they are capable of handling an SRDF configuration for %s production volume(s) with SRDF.";  _log.info(String.format(validatingSRDF,resourceCount));  Set<SRDFPoolMapping> validSRDFPoolMappings=new TreeSet<SRDFPoolMapping>();  for (  SRDFPoolMapping srdfPoolMapping : srdfPoolMappings) {    validSRDFPoolMappings.add(srdfPoolMapping);  }  return validSRDFPoolMappings;}  }
class C{  private void remove(ThreadLocal<?> key){  Entry[] tab=table;  int len=tab.length;  int i=key.threadLocalHashCode & (len - 1);  for (Entry e=tab[i]; e != null; e=tab[i=nextIndex(i,len)]) {    if (e.get() == key) {      e.clear();      expungeStaleEntry(i);      return;    }  }}  }
class C{  @Override public void deleteRows(int row,int len) throws FitsException {  ensureData();  this.table.deleteRows(row,len);  this.nRow-=len;}  }
class C{  public static boolean checkCameraHardware(Context context){  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    return true;  } else {    return false;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.183 -0500",hash_original_method="5AF8C140309DC273491B33B4E92E1FA7",hash_generated_method="72BB942F4DB8CA23BC83A54E18388E68") private StatusUpdates(){}  }
class C{  public void clearEngineLocations(){  engineLoc.clear();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_3__CONSTRAINT_EXPR_1:    return ((InternalEList<?>)getConstraintExpr_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  HGHandle defineNewJavaTypeTransaction(HGHandle newHandle,Class<?> clazz){  HGAtomType inferredHGType=javaTypes.defineHGType(clazz,newHandle);  if (inferredHGType == null)   return null;  HGHandle typeConstructor=graph.getTypeSystem().getTypeHandle(inferredHGType.getClass());  if (!typeConstructor.equals(graph.getTypeSystem().getTop()))   graph.replace(newHandle,inferredHGType,typeConstructor); else {    throw new HGException("Type constructor of newly defined type is TOP, what gives?");  }  HGAtomType type=javaTypes.getJavaBinding(newHandle,inferredHGType,clazz);  type.setHyperGraph(graph);  if (!(newHandle instanceof HGLiveHandle))   newHandle=graph.getCache().atomRead((HGPersistentHandle)newHandle,type,new HGAtomAttrib());  newHandle=graph.getCache().atomRefresh((HGLiveHandle)newHandle,type,true);  Class<?>[] interfaces=clazz.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    HGHandle interfaceHandle=graph.getTypeSystem().getTypeHandle(interfaces[i]);    if (interfaceHandle == null)     throw new HGException("Unable to infer HG type for interface " + interfaces[i].getName()); else     graph.getTypeSystem().assertSubtype(interfaceHandle,newHandle);  }  if (clazz.getSuperclass() != null) {    HGHandle superHandle=graph.getTypeSystem().getTypeHandle(clazz.getSuperclass());    if (superHandle == null) {      throw new HGException("Unable to infer HG type for class " + clazz.getSuperclass().getName() + " the superclass of "+ clazz.getName());    } else     graph.getTypeSystem().assertSubtype(superHandle,newHandle);  } else   if (clazz.isInterface())   graph.add(new HGSubsumes(graph.getTypeSystem().getTop(),newHandle));  return newHandle;}  }
class C{  public boolean renameHttpSession(String oldName,String newName){  if (newName == null || newName.isEmpty()) {    log.warn("Trying to rename session from " + oldName + " illegal name: "+ newName);    return false;  }  HttpSession session=getHttpSession(oldName);  if (session == null) {    return false;  }  if (getHttpSession(newName) != null) {    log.warn("Trying to rename session from " + oldName + " to already existing: "+ newName);    return false;  }  session.setName(newName);  this.model.fireHttpSessionUpdated(session);  return true;}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  resetShapeBounds();  g2.setColor(Color.black);  g2.setStroke(stroke);  g2.draw(shape);}  }
class C{  public void rebuildBottomUp(){  int[] nodes=new int[m_nodeCount];  int count=0;  for (int i=0; i < m_nodeCapacity; ++i) {    if (m_nodes[i].height < 0) {      continue;    }    DynamicTreeNode node=m_nodes[i];    if (node.child1 == null) {      node.parent=null;      nodes[count]=i;      ++count;    } else {      freeNode(node);    }  }  AABB b=new AABB();  while (count > 1) {    float minCost=Float.MAX_VALUE;    int iMin=-1, jMin=-1;    for (int i=0; i < count; ++i) {      AABB aabbi=m_nodes[nodes[i]].aabb;      for (int j=i + 1; j < count; ++j) {        AABB aabbj=m_nodes[nodes[j]].aabb;        b.combine(aabbi,aabbj);        float cost=b.getPerimeter();        if (cost < minCost) {          iMin=i;          jMin=j;          minCost=cost;        }      }    }    int index1=nodes[iMin];    int index2=nodes[jMin];    DynamicTreeNode child1=m_nodes[index1];    DynamicTreeNode child2=m_nodes[index2];    DynamicTreeNode parent=allocateNode();    parent.child1=child1;    parent.child2=child2;    parent.height=1 + MathUtils.max(child1.height,child2.height);    parent.aabb.combine(child1.aabb,child2.aabb);    parent.parent=null;    child1.parent=parent;    child2.parent=parent;    nodes[jMin]=nodes[count - 1];    nodes[iMin]=parent.id;    --count;  }  m_root=m_nodes[nodes[0]];  validate();}  }
class C{  public void clearImports(){  if (importLibraries != null) {    importLibraries.clear();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public boolean last() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AddModuleWizard(@Nullable Project project,String filePath,ProjectImportProvider... importProviders){  super(getImportWizardTitle(project,importProviders),project,filePath);  myImportProviders=importProviders;  myModulesProvider=DefaultModulesProvider.createForProject(project);  initModuleWizard(project,filePath);}  }
class C{  public boolean isImage(){  return isImage;}  }
class C{  public Builder byHour(Integer... hours){  return byHour(Arrays.asList(hours));}  }
class C{  private void createMenuBar(){  Action[] actionArray=editorPane.getActions();  Hashtable<Object,Action> actions=new Hashtable<Object,Action>();  for (int i=0; i < actionArray.length; i++) {    Object name=actionArray[i].getValue(Action.NAME);    actions.put(name,actionArray[i]);  }  for (int i=0; i < extraActions.length; i++) {    Object name=extraActions[i].getValue(Action.NAME);    actions.put(name,extraActions[i]);  }  JMenu menu=buildMenu(Msg.getMsg(Env.getCtx(),"Font"),fontMenu,actions);  if (menu != null)   menuBar.add(menu);  menu=buildMenu(Msg.getMsg(Env.getCtx(),"Align"),alignMenu,actions);  if (menu != null)   menuBar.add(menu);  menu=buildMenu("HTML",htmlMenu,actions);  if (menu != null)   menuBar.add(menu);  Action targetAction=(Action)actions.get("font-bold");  bBold.addActionListener(targetAction);  targetAction=(Action)actions.get("font-italic");  bItalic.addActionListener(targetAction);  targetAction=(Action)actions.get("font-underline");  bUnderline.addActionListener(targetAction);}  }
class C{  protected boolean isTouchInView(List<UITouch> touches){  for (int i=0, touchesLength=touches.size(); i < touchesLength; i++)   if (touches.get(i).getView() != mGLSurfaceView)   return false;  return true;}  }
class C{  public void testVerifyJBossHomeWhenValidConfiguration() throws Exception {  this.fsManager.resolveFile("ram:///jboss/bin/run.jar").createFile();  this.fsManager.resolveFile("ram:///jboss/bin/shutdown.jar").createFile();  this.fsManager.resolveFile("ram:///jboss/client/something").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/something").createFile();  this.fsManager.resolveFile("ram:///jboss/lib/endorsed/something").createFile();  this.fsManager.resolveFile("ram:///jboss/server/something").createFile();  this.container.verifyJBossHome();}  }
class C{  @Override public void onAutoHide(){  ColorPicker colorPicker=(ColorPicker)getControl();  JFXColorPickerSkin cpSkin=(JFXColorPickerSkin)colorPicker.getSkin();  cpSkin.syncWithAutoUpdate();  if (!colorPicker.isShowing())   super.onAutoHide();}  }
class C{  public static boolean isInteger(String val){  for (int i=0; i < val.length(); i++) {    if (!Character.isDigit(val.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args) throws Throwable {  HasUnsignedEntryTest test=new HasUnsignedEntryTest();  test.start();}  }
class C{  private void receiveFriends(){  CleartextFriends friendsReceived=lengthValueRead(in,CleartextFriends.class);  this.mFriendsReceived=friendsReceived;  if (mFriendsReceived != null && mFriendsReceived.friends != null) {    Set<String> myFriends=friendStore.getAllFriends();    Set<String> theirFriends=new HashSet(mFriendsReceived.friends);    Set<String> intersection=new HashSet(myFriends);    intersection.retainAll(theirFriends);    commonFriends=intersection.size();    Log.i(TAG,"Received " + theirFriends.size() + " friends. Overlap with my "+ myFriends.size()+ " friends is "+ commonFriends);  } else   if (mFriendsReceived == null) {    Log.e(TAG,"Friends received is null: " + mFriendsReceived);    setExchangeStatus(Status.ERROR);    setErrorMessage("Failed receiving friends.");  } else {    Log.e(TAG,"Friends received.friends is null");    setExchangeStatus(Status.ERROR);    setErrorMessage("Failed receiving friends.");  }}  }
class C{  public Long toLong(){  return new Long(value);}  }
class C{  public void paint(Graphics g){  Color bgColor=getBackground();  Dimension size=getSize();  g.setColor(getBackground());  g.fillRect(0,0,size.width,size.height);  if (getBasicSplitPaneUI().getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {    int center=size.width / 2;    int x=center - hThumbWidth / 2;    int y=hThumbOffset;    g.setColor(shadowColor);    g.drawLine(center - 1,0,center - 1,size.height);    g.setColor(highlightColor);    g.drawLine(center,0,center,size.height);    g.setColor((splitPane.hasFocus()) ? focusedColor : getBackground());    g.fillRect(x + 1,y + 1,hThumbWidth - 2,hThumbHeight - 1);    g.setColor(highlightColor);    g.drawLine(x,y,x + hThumbWidth - 1,y);    g.drawLine(x,y + 1,x,y + hThumbHeight - 1);    g.setColor(shadowColor);    g.drawLine(x + 1,y + hThumbHeight - 1,x + hThumbWidth - 1,y + hThumbHeight - 1);    g.drawLine(x + hThumbWidth - 1,y + 1,x + hThumbWidth - 1,y + hThumbHeight - 2);  } else {    int center=size.height / 2;    int x=size.width - vThumbOffset;    int y=size.height / 2 - vThumbHeight / 2;    g.setColor(shadowColor);    g.drawLine(0,center - 1,size.width,center - 1);    g.setColor(highlightColor);    g.drawLine(0,center,size.width,center);    g.setColor((splitPane.hasFocus()) ? focusedColor : getBackground());    g.fillRect(x + 1,y + 1,vThumbWidth - 1,vThumbHeight - 1);    g.setColor(highlightColor);    g.drawLine(x,y,x + vThumbWidth,y);    g.drawLine(x,y + 1,x,y + vThumbHeight);    g.setColor(shadowColor);    g.drawLine(x + 1,y + vThumbHeight,x + vThumbWidth,y + vThumbHeight);    g.drawLine(x + vThumbWidth,y + 1,x + vThumbWidth,y + vThumbHeight - 1);  }  super.paint(g);}  }
class C{  public synchronized void removeBatchAssociationRulesListener(BatchAssociationRulesListener al){  m_rulesListeners.remove(al);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.474 -0400",hash_original_method="BB297CAFD750B39432B731757BB5A73D",hash_generated_method="9D20AEAC81BE3A83A5489A9767BF57A8") public void testPair(){  int iterations=BluetoothTestRunner.sPairIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("pair iteration " + (i + 1) + " of "+ iterations);    mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);    mTestUtils.unpair(adapter,device);  }  mTestUtils.disable(adapter);}  }
class C{  private void addProcessorOptions(Map<PluginUtil.CheckerProp,Object> opts,IPreferenceStore store){  String skipUses=store.getString(CheckerPreferences.PREF_CHECKER_A_SKIP_CLASSES);  if (!skipUses.isEmpty()) {    opts.put(PluginUtil.CheckerProp.A_SKIP,skipUses);  }  String lintOpts=store.getString(CheckerPreferences.PREF_CHECKER_A_LINT);  if (!lintOpts.isEmpty()) {    opts.put(PluginUtil.CheckerProp.A_LINT,lintOpts);  }  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_WARNS)) {    opts.put(PluginUtil.CheckerProp.A_WARNS,Boolean.TRUE);  }  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_NO_MSG_TEXT))   opts.put(PluginUtil.CheckerProp.A_NO_MSG_TXT,Boolean.TRUE);  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_SHOW_CHECKS))   opts.put(PluginUtil.CheckerProp.A_SHOW_CHECKS,Boolean.TRUE);  if (store.getBoolean(CheckerPreferences.PREF_CHECKER_A_FILENAMES))   opts.put(PluginUtil.CheckerProp.A_FILENAMES,Boolean.TRUE);}  }
class C{  private void readTopLevelBlock(BeautiOptions options,PartitionSubstitutionModel model,List<CharSet> charSets) throws ImportException, IOException {  boolean done=false;  while (!done) {    String command=readToken(";");    if (command.equalsIgnoreCase("ENDBLOCK") || command.equalsIgnoreCase("END")) {      done=true;    } else     if (match("HSEARCH",command,2)) {      done=true;    } else     if (match("MCMC",command,4)) {      if (getLastDelimiter() != ';') {        readMCMCCommand(options);      }      done=true;    } else     if (match("MCMCP",command,5)) {      if (getLastDelimiter() != ';') {        readMCMCCommand(options);      }    } else     if (match("LSET",command,2)) {      if (getLastDelimiter() != ';') {        readLSETCommand(model);      }    } else     if (match("CHARSET",command,5)) {      if (getLastDelimiter() != ';') {        charSets.add(readCharSetCommand());      }    } else {      System.err.println("The command, '" + command + "', is not used by BEAST and has been ignored");    }  }}  }
class C{  public Attr removeAttributeNode(Attr oldAttr) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @SuppressWarnings("unchecked") <T extends MVMap<?,?>>T openMapVersion(long version,int mapId,MVMap<?,?> template){  MVMap<String,String> oldMeta=getMetaMap(version);  long rootPos=getRootPos(oldMeta,mapId);  MVMap<?,?> m=template.openReadOnly();  m.setRootPos(rootPos,version);  return (T)m;}  }
class C{  protected MouseMotionListener createMouseMotionListener(){  return getHandler();}  }
class C{  public Point(float x,float y){  mX=x;  mY=y;}  }
class C{  public static GenericValue findWebSite(Delegator delegator,String webSiteId,boolean useCache){  GenericValue result=null;  try {    result=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache(useCache).queryOne();  } catch (  GenericEntityException e) {    Debug.logError("Error looking up website with id " + webSiteId,module);  }  return result;}  }
class C{  public String undeploy(final String jarName) throws IOException {  JarClassLoader jarClassLoader=null;  verifyWritableDeployDirectory();  lock.lock();  try {    jarClassLoader=findJarClassLoader(jarName);    if (jarClassLoader == null) {      throw new IllegalArgumentException("JAR not deployed");    }    ClassPathLoader.getLatest().removeAndSetLatest(jarClassLoader);    attemptFileLockAndDelete(new File(this.deployDirectory,jarClassLoader.getFileName()));    return jarClassLoader.getFileCanonicalPath();  }  finally {    lock.unlock();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isSecure(){  return secure;}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  public OADProfile.OADApproval programWithFirmware(FirmwareBundle bundle,OADProfile.OADListener listener){  return gattClient.getOADProfile().programWithFirmware(bundle,listener);}  }
class C{  public static double pooledMean(int size1,double mean1,int size2,double mean2){  return (size1 * mean1 + size2 * mean2) / (size1 + size2);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.462 -0500",hash_original_method="2F721D777A36DFB8DFB35BB3F12A2C71",hash_generated_method="8CBE85E4D5CC888894020E43CC5894C6") public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header) throws EncodeException {  return stringToGsm7BitPackedWithHeader(data,header,0,0);}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Color color=getColor();    if (color == null) {      g.setColor(c.getSelectionColor());    } else {      g.setColor(color);    }    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      g.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      g.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      g.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {  }}  }
class C{  @Override public boolean isConnected(){  return channel.isConnected();}  }
class C{  public void add_return(java.lang.String param){  if (local_return == null) {    local_return=new java.lang.String[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  private void loadAcsIdFromArchId(String entidad) throws Exception {  String qual;  ArchivesTable table=new ArchivesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadAcsIdFromArchId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    qual=table.getLoadArchIdQual(_id);    _acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),DaoArchHdrTbl.getAcsIdColName(true),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  @Override protected Cipher initCipher(int mode) throws GeneralSecurityException {  Provider provider=Security.getProvider("SunJCE");  if (provider == null) {    throw new RuntimeException("SunJCE provider does not exist.");  }  Cipher ci=Cipher.getInstance(transformation,provider);  if (Cipher.ENCRYPT_MODE == mode) {    ci.init(Cipher.ENCRYPT_MODE,key);    pbeParams=ci.getParameters();  } else {    ci.init(Cipher.DECRYPT_MODE,key,pbeParams);  }  return ci;}  }
class C{  public void initialize(){}  }
class C{  public static boolean isRemoveAirThatCanNotLand(final GameData data){  final boolean isRemoveAir;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_removeAirThatCanNotLand);    if (prop != null) {      isRemoveAir=Boolean.parseBoolean(prop);    } else     if (data.getSequence().getStep().getDelegate() != null && NoAirCheckPlaceDelegate.class.equals(data.getSequence().getStep().getDelegate().getClass())) {      isRemoveAir=false;    } else     if (isNonCombatDelegate(data)) {      isRemoveAir=true;    } else {      isRemoveAir=data.getSequence().getStep().getName().endsWith("Place");    }  }  finally {    data.releaseReadLock();  }  return isRemoveAir;}  }
class C{  public static void main(String args[]){  String myIP="1.2.3.5";  String exitIP="27.124.124.122";  String DNSELServer="torproject.org";  System.out.println("Using Tor? " + isUsingTor(myIP,443,exitIP,DNSELServer));}  }
class C{  public IXMLElement createElement(String fullName,String systemID,int lineNr){  return new XMLElement(fullName,systemID,lineNr);}  }
class C{  private int max(Map<Integer,ModifiableDBIDs> candidates){  DBIDs maxSet=null;  Integer maxDim=null;  for (  Integer nextDim : candidates.keySet()) {    DBIDs nextSet=candidates.get(nextDim);    if (maxSet == null || maxSet.size() < nextSet.size()) {      maxSet=nextSet;      maxDim=nextDim;    }  }  return maxDim;}  }
class C{  public static String quoteName(String name){  StringBuilder sb=new StringBuilder();  int len=name.length();  for (int i=0; i < len; i++) {    char c=name.charAt(i);    if (c == '\\' || c == '"') {      sb.append('\\');    }    sb.append(c);  }  return sb.toString();}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public void detach(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public static void main(String[] args) throws Exception {  TechnicalInformation info;  TechnicalInformation additional;  String tmpStr;  Class<?> cls;  TechnicalInformationHandler handler;  if (args.length != 0) {    info=null;    tmpStr=Utils.getOption('W',args);    if (tmpStr.length() != 0) {      cls=Class.forName(tmpStr);      handler=(TechnicalInformationHandler)cls.newInstance();      info=handler.getTechnicalInformation();    } else {      throw new IllegalArgumentException("A classname has to be provided with the -W option!");    }    if (Utils.getFlag("bibtex",args)) {      System.out.println("\n" + handler.getClass().getName() + ":\n"+ info.toBibTex());    }    if (Utils.getFlag("plaintext",args)) {      System.out.println("\n" + handler.getClass().getName() + ":\n"+ info.toString());    }  } else {    info=new TechnicalInformation(Type.BOOK);    info.setValue(Field.AUTHOR,"Ross Quinlan");    info.setValue(Field.YEAR,"1993");    info.setValue(Field.TITLE,"C4.5: Programs for Machine Learning");    info.setValue(Field.PUBLISHER,"Morgan Kaufmann Publishers");    info.setValue(Field.ADDRESS,"San Mateo, CA");    additional=info;    System.out.println("\ntoString():\n" + info.toString());    System.out.println("\ntoBibTex():\n" + info.toBibTex());    info=new TechnicalInformation(Type.INPROCEEDINGS);    info.setValue(Field.AUTHOR,"Freund, Y. and Mason, L.");    info.setValue(Field.YEAR,"1999");    info.setValue(Field.TITLE,"The alternating decision tree learning algorithm");    info.setValue(Field.BOOKTITLE,"Proceeding of the Sixteenth International Conference on Machine Learning");    info.setValue(Field.ADDRESS,"Bled, Slovenia");    info.setValue(Field.PAGES,"124-133");    System.out.println("\ntoString():\n" + info.toString());    System.out.println("\ntoBibTex():\n" + info.toBibTex());    info=new TechnicalInformation(Type.ARTICLE);    info.setValue(Field.AUTHOR,"R. Quinlan");    info.setValue(Field.YEAR,"1986");    info.setValue(Field.TITLE,"Induction of decision trees");    info.setValue(Field.JOURNAL,"Machine Learning");    info.setValue(Field.VOLUME,"1");    info.setValue(Field.NUMBER,"1");    info.setValue(Field.PAGES,"81-106");    additional=new TechnicalInformation(Type.BOOK);    additional.setValue(Field.AUTHOR,"Ross Quinlan");    additional.setValue(Field.YEAR,"1993");    additional.setValue(Field.TITLE,"C4.5: Programs for Machine Learning");    additional.setValue(Field.PUBLISHER,"Morgan Kaufmann Publishers");    additional.setValue(Field.ADDRESS,"San Mateo, CA");    info.add(additional);    System.out.println("\ntoString():\n" + info.toString());    System.out.println("\ntoBibTex():\n" + info.toBibTex());  }}  }
class C{  public GMSMember(MemberAttributes attr,InetAddress i,int p,boolean networkPartitionDetectionEnabled,boolean preferredForCoordinator,short version,long msbs,long lsbs){  setAttributes(attr);  this.inetAddr=i;  this.udpPort=p;  this.networkPartitionDetectionEnabled=networkPartitionDetectionEnabled;  this.preferredForCoordinator=preferredForCoordinator;  this.versionOrdinal=version;  this.uuidMSBs=msbs;  this.uuidLSBs=lsbs;}  }
class C{  private void patchVMNetworkDetails(EnumerationContext ctx,ComputeState resource,String resourceGroupName,String vmName,AtomicInteger numOfPatches){  if (resource.networkInterfaceLinks != null) {    String networkLink=resource.networkInterfaceLinks.get(0);    Operation.createGet(getHost(),networkLink).setCompletion(null).sendWith(this);  } else {    logInfo("No network links found for [%s]",vmName);    numOfPatches.decrementAndGet();  }}  }
class C{  protected Text createTextNode(String text){  return getOwnerDocument().createCDATASection(text);}  }
class C{  public void lerp(Vector2 dp,double da,double alpha,Transform result){  result.set(this);  result.translate(dp.x * alpha,dp.y * alpha);  result.rotate(da * alpha,result.getTranslationX(),result.getTranslationY());}  }
class C{  public SQLNonTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (!p_loadedOK)   return;  if (e.getSource() != null) {    if (e.getSource() instanceof VCheckBox) {      VCheckBox cb=(VCheckBox)e.getSource();      if (cb.getName().equals("IsSOTrx")) {        if (cb.isSelected()) {          fIsDelivered.setText(Msg.translate(Env.getCtx(),"IsDelivered"));        } else {          fIsDelivered.setText(Msg.translate(Env.getCtx(),"Received"));        }      }    }  }  super.actionPerformed(e);}  }
class C{  @Override protected boolean isSuccessful(final Player player){  final int random=Rand.roll1D100();  double karma=player.useKarma(FINDING_PROBABILITY * 10);  if (karma <= 0) {    karma=karma - FINDING_PROBABILITY * 5;  }  karma=karma / 10;  return random <= (FINDING_PROBABILITY + karma) * 100;}  }
class C{  public static String escape(String theString){  theString=theString.replaceAll("\"","\\\\\"");  StringBuffer aBuffer=new StringBuffer();  Matcher aMatcher=Pattern.compile("\\\\([^tnrbf\"'\\\\])").matcher(theString);  while (aMatcher.find()) {    aMatcher.appendReplacement(aBuffer,String.format("\\\\\\\\%s",aMatcher.group(1)));  }  aMatcher.appendTail(aBuffer);  return aBuffer.toString();}  }
class C{  private void makeTail(LinkedEntry<K,V> e){  e.prv.nxt=e.nxt;  e.nxt.prv=e.prv;  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  e.nxt=header;  e.prv=oldTail;  oldTail.nxt=header.prv=e;  modCount++;}  }
class C{  public SyncValueResponseMessage(SyncValueResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.count=other.count;}  }
class C{  private CSelectionEvaluator(){}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RetryAfterParser.parse");  RetryAfter retryAfter=new RetryAfter();  try {    headerName(TokenTypes.RETRY_AFTER);    String value=lexer.number();    try {      int ds=Integer.parseInt(value);      retryAfter.setRetryAfter(ds);    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) == '(') {      String comment=this.lexer.comment();      retryAfter.setComment(comment);    }    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      value=token.getTokenValue();      if (value.equalsIgnoreCase("duration")) {        this.lexer.match('=');        this.lexer.SPorHT();        value=lexer.number();        try {          int duration=Integer.parseInt(value);          retryAfter.setDuration(duration);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.SPorHT();        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        retryAfter.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("RetryAfterParser.parse");  }  return retryAfter;}  }
class C{  public static double cdf(double x,double lower,double upper){  if (x < lower)   return 0.0;  if (x > upper)   return 1.0;  return (x - lower) / (upper - lower);}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public AnimatedGraphics(){  Timer timer=new Timer(30,this);  timer.setInitialDelay(1000);  animStartTime=1000 + System.nanoTime() / 1000000;  timer.start();}  }
class C{  private void createStoragePool(StoragePool pool,CIMInstance poolInstance,AccessProfile profile,String poolClassName,String supportedVolumeTypes,Set<String> protocols,Map<URI,StoragePool> poolsToMatchWithVpool,StorageSystem device) throws URISyntaxException, IOException {  boolean newPool=false;  boolean modifiedPool=false;  if (null == pool) {    String instanceID=getCIMPropertyValue(poolInstance,Constants.INSTANCEID);    String nativeIdFromInstance=getNativeIDFromInstance(instanceID);    newPool=true;    pool=new StoragePool();    pool.setId(URIUtil.createId(StoragePool.class));    pool.setPoolName(getCIMPropertyValue(poolInstance,POOL_ID));    pool.setNativeId(nativeIdFromInstance);    pool.setStorageDevice(profile.getSystemId());    pool.setPoolServiceType(PoolServiceType.block.toString());    String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,pool);    pool.setNativeGuid(poolNativeGuid);    pool.setLabel(poolNativeGuid);    pool.setMaximumThickVolumeSize(0L);    pool.setMinimumThickVolumeSize(0L);    pool.setMaximumThinVolumeSize(0L);    pool.setMinimumThinVolumeSize(0L);    if (device.getAutoTieringEnabled()) {      pool.setAutoTieringEnabled(Boolean.TRUE);    } else {      pool.setAutoTieringEnabled(Boolean.FALSE);    }    _logger.info(String.format("Maximum default limits for volume capacity in storage pool %s / %s : \n   " + "max thin volume capacity: %s, max thick volume capacity: %s ",pool.getPoolName(),pool.getId(),pool.getMaximumThinVolumeSize(),pool.getMaximumThickVolumeSize()));  }  String maxSubscriptionPercent=getCIMPropertyValue(poolInstance,SmisConstants.CP_EMCMAXSUBSCRIPTIONPERCENT);  _logger.info(String.format("Discovered maximum subscription percent of storage pool %s from array : %s ",pool.getPoolName(),maxSubscriptionPercent));  Integer newMaxSubscriptionPercentFromArray=maxSubscriptionPercent == null ? null : new Integer(maxSubscriptionPercent);  _logger.info(String.format("New maximum subscription percent of storage pool %s from array : %s ",pool.getPoolName(),newMaxSubscriptionPercentFromArray));  processMaxSubscriptionPercent(newMaxSubscriptionPercentFromArray,pool);  _logger.info(String.format("StoragePool %s subscription/utilization percent limits after processing: %s / %s",pool.getPoolName(),pool.getMaxThinPoolSubscriptionPercentage(),pool.getMaxPoolUtilizationPercentage()));  String subscribedCapacity=getCIMPropertyValue(poolInstance,SmisConstants.CP_SUBSCRIBEDCAPACITY);  if (null != subscribedCapacity) {    pool.setSubscribedCapacity(ControllerUtils.convertBytesToKBytes(subscribedCapacity));  }  pool.setFreeCapacity(SmisUtils.getFreeCapacity(poolInstance));  pool.setTotalCapacity(SmisUtils.getTotalCapacity(poolInstance));  pool.setPoolClassName(poolClassName);  pool.setSupportedResourceTypes(supportedVolumeTypes);  String operationalStatus=determineOperationalStatus(poolInstance);  if (!newPool && (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getOperationalStatus(),operationalStatus) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),protocols) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name())|| ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveredDataObject.DiscoveryStatus.VISIBLE.name()))) {    modifiedPool=true;  }  pool.addProtocols(protocols);  pool.setOperationalStatus(operationalStatus);  pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  pool.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.VISIBLE.name());  if (Constants.ENABLED.toString().equalsIgnoreCase(getCIMPropertyValue(poolInstance,VP_COMPRESSION_STATE))) {    pool.setCompressionEnabled(Boolean.TRUE);  } else {    pool.setCompressionEnabled(Boolean.FALSE);  }  Set<String> diskDrives=new HashSet<String>();  String driveTypes=getCIMPropertyValue(poolInstance,EMC_DRIVE_TYPE);  if (null != driveTypes) {    String driveTypesArr[]=driveTypes.split(SPACE_STR_DELIM);    if (device.checkIfVmax3() && driveTypesArr.length == 1 && driveTypesArr[0].equals(MIXED_DRIVE_TYPE)) {      driveTypesArr=getVMAX3PoolDriveTypes(device,poolInstance);    }    for (    String driveType : driveTypesArr) {      String driveDisplayName=SupportedDriveTypeValues.getDiskDriveDisplayName(driveType);      if (null == driveDisplayName) {        _logger.warn("UnSupported DiskDrive Type : {} resulting in drives not getting discovered for this pool: {}",driveType,getCIMPropertyValue(poolInstance,Constants.INSTANCEID));        continue;      }      diskDrives.add(driveDisplayName);    }    if (!newPool && !modifiedPool && ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getSupportedDriveTypes(),diskDrives)) {      modifiedPool=true;    }    pool.addDriveTypes(diskDrives);  }  _logger.info("Discovered disk drives:[{}] for pool id:{}",driveTypes,pool.getId());  if (newPool) {    _newPoolList.add(pool);    if (!poolsToMatchWithVpool.containsKey(pool.getId())) {      poolsToMatchWithVpool.put(pool.getId(),pool);    }  } else {    _updatePoolList.add(pool);    if (modifiedPool && !poolsToMatchWithVpool.containsKey(pool.getId())) {      poolsToMatchWithVpool.put(pool.getId(),pool);    }  }}  }
class C{  private Object sanitizeGauge(Object value){  final Object finalValue;  if (value instanceof Double && (Double.isInfinite((Double)value) || Double.isNaN((Double)value))) {    finalValue=null;  } else   if (value instanceof Float && (Float.isInfinite((Float)value) || Float.isNaN((Float)value))) {    finalValue=null;  } else {    finalValue=value;  }  return finalValue;}  }
class C{  void stop(){  httpServer.stop(0);}  }
class C{  public String sendMsgWaitingFax(int count,String dest) throws SmsException, IOException {  return sendMsgWaiting(MwiType.FAX,count,dest);}  }
class C{  protected URL makeCommentsFeedUrl(String issueId) throws MalformedURLException {  return new URL(issuesBaseUri + "/" + issueId+ "/comments"+ PROJECTION);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private static void importIdbFileInternal(final String idaDirectory,final String idbFile,final IDatabase database,final CBaseExporter exporter) throws ImportFailedException {  try {    exporter.importModule(idbFile,idaDirectory,database);  } catch (  final ConfigFileException exception) {    throw new ImportFailedException(String.format("Could not create the IDA2SQL temp file." + "\n" + "Importing project failed."));  }catch (  final IdaException exception) {    throw new ImportFailedException(String.format("Could not start IDA Pro." + "\n" + "Importing project failed."));  }catch (  final ExporterException exception) {    throw new ImportFailedException(exception.getLocalizedMessage());  }}  }
class C{  public void markBlockForBonemeal(int x,int y,int z){  bonemealMarkers.add(x);  bonemealMarkers.add(y);  bonemealMarkers.add(z);}  }
class C{  public Period withFieldAdded(DurationFieldType field,int value){  if (field == null) {    throw new IllegalArgumentException("Field must not be null");  }  if (value == 0) {    return this;  }  int[] newValues=getValues();  super.addFieldInto(newValues,field,value);  return new Period(newValues,getPeriodType());}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof MBeanServerPermission))   return false;  MBeanServerPermission that=(MBeanServerPermission)p;  return ((this.mask & that.mask) == that.mask);}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public boolean addWorkingDir(String dirName){  if (dirName == null) {    throw new NullPointerException();  }  return addToListInternal(currentWorkingDirectoryList,new File(dirName));}  }
class C{  public static HadoopErrorSimulator instance(){  return ref.get();}  }
class C{  public static JsonFormatter createJsonFormatter(){  return new DefaultJsonFormatter();}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entries(){  ImmutableSet<Entry<K,V>> result=entries;  return result == null ? (entries=new EntrySet<K,V>(this)) : result;}  }
class C{  public void testTypicalInverted(){  Instances result;  m_Filter=getFilter(".*Att2$",true);  result=useFilter();  assertEquals(3,result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  private static Bitmap createAvatar(int backgroundColor,String text,int pixelsSide){  android.graphics.Bitmap.Config bitmapConfig=android.graphics.Bitmap.Config.ARGB_8888;  Bitmap bitmap=Bitmap.createBitmap(pixelsSide,pixelsSide,bitmapConfig);  Canvas canvas=new Canvas(bitmap);  canvas.drawColor(backgroundColor);  Paint textPaint=new Paint();  textPaint.setTypeface(Typeface.create(Typeface.DEFAULT,Typeface.BOLD));  textPaint.setColor(Color.WHITE);  textPaint.setTextSize(pixelsSide * 2 / 3);  Rect textBounds=new Rect();  textPaint.getTextBounds(text,0,text.length(),textBounds);  canvas.drawText(text,(canvas.getWidth() - textBounds.width() - textBounds.left) / 2,(canvas.getHeight() + textBounds.height() - textBounds.bottom) / 2,textPaint);  return bitmap;}  }
class C{  private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  protected void Argument() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_ARGUMENT);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public static void w(String msg){  if (!allowW)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  void addClasses(List<ClassNode> classList){  for (  ClassNode node : classList) {    addClass(node);  }}  }
class C{  protected boolean isBroken(){  return broken;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected short reportReturn(String methodCall,short value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:    return basicSetStatement(null,msgs);case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:  return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber((int)(left.num() / right.num()));}  }
class C{  public boolean isEmpty(){  return scanner.isEmpty();}  }
class C{  public void clearTransaction(){  this.transactionID=null;  if (this.transactionQueue != null) {    for (    Command c : this.transactionQueue) {      ByteBuf r=c.getResponse();      if (r != null)       r.release();    }    this.transactionQueue.clear();  }}  }
class C{  public static String streamFile(HttpServletResponse response,File file){  if (file == null)   return "No File";  if (!file.exists())   return "File not found: " + file.getAbsolutePath();  MimeType mimeType=MimeType.get(file.getAbsolutePath());  try {    int bufferSize=2048;    int fileLength=(int)file.length();    response.setContentType(mimeType.getMimeType());    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    log.fine(file.toString());    long time=System.currentTimeMillis();    FileInputStream in=new FileInputStream(file);    ServletOutputStream out=response.getOutputStream();    int c=0;    while ((c=in.read()) != -1)     out.write(c);    out.flush();    out.close();    in.close();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.info("Length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec - "+ mimeType);  } catch (  IOException ex) {    log.log(Level.SEVERE,ex.toString());    return "Streaming error - " + ex;  }  return null;}  }
class C{  public boolean fullScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  mTempRect.top=0;  mTempRect.bottom=height;  if (down) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.bottom=view.getBottom() + getPaddingBottom();      mTempRect.top=mTempRect.bottom - height;    }  }  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public ReflectionApp(){  super("Reflections");  add(new ReflectionPanel());  setSize(360,380);  setLocationRelativeTo(null);}  }
class C{  IgfsDirectoryInfo(IgniteUuid id,@Nullable Map<String,IgfsListingEntry> listing,@Nullable Map<String,String> props,long accessTime,long modificationTime){  super(id,props,accessTime,modificationTime);  this.listing=listing;}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public LoggingConfigurator(LogContext context){  this.context=context;  this.propertyConfigurator=new PropertyConfigurator(this.context);}  }
class C{  public AbIocEventListener longClick(String method){  this.longClickMethod=method;  return this;}  }
class C{  protected static void zeroOneNormalization(List<float[]> instanceList,int len){  int dimension=len;  float[] mins=new float[dimension];  float[] maxs=new float[dimension];  Arrays.fill(mins,Float.MAX_VALUE);  Arrays.fill(maxs,Float.MIN_VALUE);  for (  float[] instance : instanceList) {    for (int i=0; i < len; ++i) {      if (mins[i] > instance[i]) {        mins[i]=instance[i];      }      if (maxs[i] < instance[i]) {        maxs[i]=instance[i];      }    }  }  for (  float[] instance : instanceList) {    for (int i=0; i < len; ++i) {      float range=maxs[i] - mins[i];      if (range != 0) {        instance[i]=(instance[i] - mins[i]) / range;      }    }  }}  }
class C{  public static VersionInfoRequest create(){  VersionInfoRequest m=new VersionInfoRequest();  return m;}  }
class C{  private Location findRandomAvailableLocation(){  List<Location> availableLocations=new ArrayList<>();  for (  Integer x : gridOperator.getTraverseX()) {    for (    Integer y : gridOperator.getTraverseY()) {      Location thisloc=new Location(x,y);      if (gameGrid.get(thisloc) == null) {        availableLocations.add(thisloc);      }    }  }  if (availableLocations.isEmpty()) {    return null;  }  Collections.shuffle(availableLocations);  Location randomLocation=availableLocations.get(new Random().nextInt(availableLocations.size()));  return randomLocation;}  }
class C{  public int read(char[] buffer,int offset,int size) throws IOException {  if (this.atEndOfData) {    return -1;  }  int charsRead=0;  if ((offset + size) > buffer.length) {    size=buffer.length - offset;  }  while (charsRead < size) {    char ch=this.reader.read();    if (ch == '?') {      char ch2=this.reader.read();      if (ch2 == '>') {        this.atEndOfData=true;        break;      }      this.reader.unread(ch2);    }    buffer[charsRead]=ch;    charsRead++;  }  if (charsRead == 0) {    charsRead=-1;  }  return charsRead;}  }
class C{  AtlasVertex findVertex(DataTypes.TypeCategory category,String typeName){  LOG.debug("Finding AtlasVertex for {}.{}",category,typeName);  Iterator results=graph.query().has(Constants.TYPENAME_PROPERTY_KEY,typeName).vertices().iterator();  AtlasVertex vertex=null;  if (results != null && results.hasNext()) {    vertex=(AtlasVertex)results.next();  }  return vertex;}  }
class C{  protected void processMatrixMatrixBinaryInstruction(ExecutionContext ec) throws DMLRuntimeException {  SparkExecutionContext sec=(SparkExecutionContext)ec;  checkMatrixMatrixBinaryCharacteristics(sec);  String rddVar1=input1.getName();  String rddVar2=input2.getName();  JavaPairRDD<MatrixIndexes,MatrixBlock> in1=sec.getBinaryBlockRDDHandleForVariable(rddVar1);  JavaPairRDD<MatrixIndexes,MatrixBlock> in2=sec.getBinaryBlockRDDHandleForVariable(rddVar2);  MatrixCharacteristics mc1=sec.getMatrixCharacteristics(rddVar1);  MatrixCharacteristics mc2=sec.getMatrixCharacteristics(rddVar2);  BinaryOperator bop=(BinaryOperator)_optr;  boolean rowvector=(mc2.getRows() == 1 && mc1.getRows() > 1);  long numRepLeft=getNumReplicas(mc1,mc2,true);  long numRepRight=getNumReplicas(mc1,mc2,false);  if (numRepLeft > 1)   in1=in1.flatMapToPair(new ReplicateVectorFunction(false,numRepLeft));  if (numRepRight > 1)   in2=in2.flatMapToPair(new ReplicateVectorFunction(rowvector,numRepRight));  JavaPairRDD<MatrixIndexes,MatrixBlock> out=in1.join(in2).mapValues(new MatrixMatrixBinaryOpFunction(bop));  updateBinaryOutputMatrixCharacteristics(sec);  sec.setRDDHandleForVariable(output.getName(),out);  sec.addLineageRDD(output.getName(),rddVar1);  sec.addLineageRDD(output.getName(),rddVar2);}  }
class C{  void createHeapPhiInstruction(BasicBlock bb,HeapVariable<Object> H){  Instruction s=makePhiInstruction(H,bb);  ArrayList<Instruction> heapPhis=heapPhi.get(bb);  if (heapPhis == null) {    heapPhis=new ArrayList<Instruction>(2);    heapPhi.put(bb,heapPhis);  }  heapPhis.add(s);  registerInstruction(s,bb);}  }
class C{  private void writeHexByte(byte b){  int i=b;  if (b < 0) {    i=256 + b;  }  writeHexDigit((byte)(i / 16));  writeHexDigit((byte)(i & 0xf));}  }
class C{  public ForwardingDrawable(Drawable drawable){  mCurrentDelegate=drawable;  DrawableUtils.setCallbacks(mCurrentDelegate,this,this);}  }
class C{  public SQLStringAutoIndentStrategy(String partitioning){  super();}  }
class C{  void showGameOptions(){  GameOptions options=new GameOptions();  options.initialize();  options.loadOptions();  if (optdlg == null) {    optdlg=new GameOptionsDialog(frame,options,true);  }  optdlg.update(options);  optdlg.setVisible(true);}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public void updateThreadCount(int threadCount){  this.threadCount=threadCount;  shutdown();  start();}  }
class C{  protected void sequence_LogicalANDExpression_LogicalORExpression(ISerializationContext context,BinaryLogicalExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void changeDisplay(int year,int monthOfYear,int dayOfMonth){  timeDisplay.setText(String.format("%d/%d/%d",++monthOfYear,dayOfMonth,year));}  }
class C{  public static void resetLoadSaveFailure(){  loadSaveFailureEncountered=false;}  }
class C{  static public NodeModel parse(File f,boolean removeComments,boolean removePIs) throws SAXException, IOException, ParserConfigurationException {  DocumentBuilder builder=getDocumentBuilderFactory().newDocumentBuilder();  ErrorHandler errorHandler=getErrorHandler();  if (errorHandler != null)   builder.setErrorHandler(errorHandler);  Document doc=builder.parse(f);  if (removeComments) {    removeComments(doc);  }  if (removePIs) {    removePIs(doc);  }  mergeAdjacentText(doc);  return wrap(doc);}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public static void write(ObjectReference o){  writeHex(o.toAddress().toWord(),BYTES_IN_ADDRESS);}  }
class C{  protected boolean hasHistory(){  return true;}  }
class C{  public void testRecognizePortRestrictedCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse4=null;  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  responseServer.addMessage(testIResponse4);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.PORT_RESTRICTED_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public V addVertex(G graph,V2 delegate){  V vertex=factory.createVertex(delegate);  if (insertVertex(graph,vertex)) {    graph.setMapping(delegate,vertex);    return vertex;  } else   return null;}  }
class C{  public static void main(String[] args){  double[] p=new double[3];  p[0]=6.0;  p[1]=-11.0;  p[2]=6.0;  Polynomial P=new Polynomial(p);  double[] x=new double[3];  x[0]=1.0;  x[1]=2.0;  x[2]=3.0;  double[] f=new double[3];  f[0]=1.0;  f[1]=8.0;  f[2]=27.0;  LagrangePolynomial L=new LagrangePolynomial(x,f);  for (int i=0; i < 21; i++) {    double z=1.0 + i * 0.1;    System.out.println(P.evaluate(z) + "  " + L.evaluate(z));  }}  }
class C{  public static void writeToFileReal_1D(int[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int j=0; j < x.length; j++) {      out.write(Integer.toString(x[j]));      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int cardinality(){  return BitsUtil.cardinality(bits);}  }
class C{  public void generateKey(int bitLengthVal,int certainty){  bitLength=bitLengthVal;  p=new BigInteger(bitLength / 2,certainty,rand);  q=new BigInteger(bitLength / 2,certainty,rand);  n=p.multiply(q);  nSquared=n.multiply(n);  g=new BigInteger("2");  lambda=p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE)).divide(p.subtract(BigInteger.ONE).gcd(q.subtract(BigInteger.ONE)));  if (g.modPow(lambda,nSquared).subtract(BigInteger.ONE).divide(n).gcd(n).intValue() != 1) {    System.out.println("g is not good. Choose g again.");    System.exit(1);  }}  }
class C{  protected double findSplitNumeric(int index) throws Exception {  if (m_Instances.classAttribute().isNominal()) {    return findSplitNumericNominal(index);  } else {    return findSplitNumericNumeric(index);  }}  }
class C{  @Override public void clear(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public static void unpackArchive(File archive,File outputDir) throws IOException {  try (DataInputStream input=new DataInputStream(new FileInputStream(archive))){    unpackArchivePrivate(input,outputDir);  } }  }
class C{  private void parse(String fileName,@WillClose InputStream stream) throws IOException, SAXException {  try {    SAXBugCollectionHandler handler=new SAXBugCollectionHandler(this,new File(fileName));    XMLReader xr=XMLReaderFactory.createXMLReader();    xr.setContentHandler(handler);    xr.setErrorHandler(handler);    Reader reader=Util.getReader(stream);    xr.parse(new InputSource(reader));  }  finally {    Util.closeSilently(stream);  }}  }
class C{  public int height(){  return height(root);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (derivedFeatureID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void addInfo(String format,Resource res,Struct info){  try {    ImageMetaDrew.test();  } catch (  Throwable t) {    PrintWriter pw=ThreadLocalPageContext.getConfig().getErrWriter();    SystemOut.printDate(pw,"cannot load addional pic info, library metadata-extractor.jar is missed");  }  ImageMetaDrew.addInfo(format,res,info);}  }
class C{  public static FireworkEffectBuilder builder(FireworkEffectType type){  return new FireworkEffectBuilder(type);}  }
class C{  @SuppressWarnings("unchecked") public LinkedTreeMap(){  this((Comparator<? super K>)NATURAL_ORDER);}  }
class C{  public static String toJson(Date date){  return DEFAULT_GENERATOR.toJson(date);}  }
class C{  public DateTime withCenturyOfEra(int centuryOfEra){  return withMillis(getChronology().centuryOfEra().set(getMillis(),centuryOfEra));}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  public DOMKeyName(String name){  if (name == null) {    throw new NullPointerException("name cannot be null");  }  this.name=name;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__BASE_TYPE:    return baseType != null;}return super.eIsSet(featureID);}  }
class C{  public boolean canRead(){  return getWrappedPath().canRead();}  }
class C{  public void trainOnline(FloatVector trainingInstance){  FloatMatrix[] updateMatrices=this.trainByInstance(trainingInstance);  this.updateWeightMatrices(updateMatrices);}  }
class C{  protected List<EvaluationStatistics> evaluateSequential(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  EvaluationStatistics stats;  Instances train;  Instances test;  Result res;  int i;  Random rand;  MultiLabelClassifier current;  result=new ArrayList<>();  rand=new Random(m_Seed);  for (i=1; i <= m_NumFolds; i++) {    log("Fold: " + i);    if (m_PreserveOrder)     train=dataset.trainCV(m_NumFolds,i - 1); else     train=dataset.trainCV(m_NumFolds,i - 1,rand);    test=dataset.testCV(m_NumFolds,i - 1);    try {      current=(MultiLabelClassifier)OptionUtils.shallowCopy(classifier);      res=Evaluation.evaluateModel(current,train,test,m_Threshold,m_Verbosity);      stats=new EvaluationStatistics(classifier,dataset,res);      stats.put(KEY_FOLD,i);      result.add(stats);    } catch (    Exception e) {      handleException("Failed to evaluate dataset '" + dataset.relationName() + "' with classifier: "+ Utils.toCommandLine(classifier),e);      break;    }    if (m_Stopped)     break;  }  if (m_Stopped)   result.clear();  return result;}  }
class C{  public BaseDeltaCollectionPage(final BaseDeltaCollectionResponse response,final IDeltaRequestBuilder builder){  super(response.value,builder);}  }
class C{  public void mouseClicked(MouseEvent e){  checkPopup(e);  requestFocus();  getCaret().setVisible(true);}  }
class C{  public CRegisterView(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01477: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01478: Debug perspective model argument can not be null");  m_parent=parent;  m_debugPerspectiveModel=debugPerspectiveModel;  setBorder(new TitledBorder("Register Values"));  m_dataProvider.addListener(m_enteredDataListener);  m_registerView=new JRegisterView(m_dataProvider);  m_registerView.setVisible(true);  m_registerView.setMenuProvider(new CRegisterMenuProvider(debugPerspectiveModel,m_dataProvider));  final JScrollPane regScroller=new JScrollPane(m_registerView);  regScroller.getViewport().setBackground(m_registerView.getBackground());  regScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);  add(regScroller);  m_synchronizer=new CRegisterViewSynchronizer(m_registerView,m_dataProvider,debugPerspectiveModel);}  }
class C{  public static String makeLabel(String pwwnKey,String volId){  return pwwnKey + "_" + volId;}  }
class C{  public void testCompareNegNeg2(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  private void loadInfoOf(ResultSet rs,VEditor editor,String name) throws SQLException {  if (editor == null)   return;  int intValue=rs.getInt(name);  if (rs.wasNull())   editor.setValue(null); else   editor.setValue(new Integer(intValue));}  }
class C{  public static Vector3 toVector3(Vector2 o){  return new Vector3(o.x,0,o.z);}  }
class C{  private void requestFromCache(Request request,Callback callback){  Response response=client.cache().get(request);  if (callback != null) {    callback.onStart();    try {      callback.onResponse(null,response);    } catch (    IOException e) {      callback.onFailure(null,e);    }    callback.onFinish();  }}  }
class C{  public CharBuffer insert(int offset,long l){  return insert(offset,String.valueOf(l));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.013 -0500",hash_original_method="9FD1A2E2343A7342F7CA850BC8948EC8",hash_generated_method="AF3A54E7FF041881C4F9E8B06CF87E9A") public static void fill(byte[] array,int start,int end,byte value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private void authorMessagePopular(boolean popularFlag){  int author;  Bag people=sim.socialNetwork.getAllNodes();  if (people.numObjs == 0) {    return;  }  List<Integer> indices=sim.orderNodesByDegree(people);  author=1;  if (popularFlag) {    author=people.numObjs - author;  } else {    author=Math.max(author,((ProximitySimulation)sim).NUMBER_OF_ADVERSARIES);  }  int authorIdx=indices.get(author);  people=sim.socialNetwork.getAllNodes();  Person person=(Person)people.objs[0];  person=(Person)people.objs[authorIdx];  person.addMessageToQueue(trackedMessage);  Bag tmp=new Bag();  System.err.println("degree of the author is " + sim.socialNetwork.getEdges(person,tmp).numObjs);}  }
class C{  public DoubleMatrix3D like(int slices,int rows,int columns){  return new DenseDoubleMatrix3D(slices,rows,columns);}  }
class C{  @Override public final void decRef(){  refCounter.decRef();}  }
class C{  public MalformedURLException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void addBinary(IFile resource,IPath containerPath){  SearchParticipant participant=SearchEngine.getDefaultSearchParticipant(this,javaProject);  SearchDocument document=participant.getDocument(resource.getFullPath().toString());  IndexLocation indexLocation=computeIndexLocation(containerPath);  scheduleDocumentIndexing(document,containerPath,indexLocation,participant);}  }
class C{  public Configurator recordNoEvents(){  eventWriterFactory=null;  return this;}  }
class C{  private String prepareDirs(String dirType,int numDirs){  File[] dirs=new File[numDirs];  String dirsString="";  for (int i=0; i < numDirs; i++) {    dirs[i]=new File(testWorkDir,MiniYARNCluster.this.getName() + "-" + dirType+ "Dir-nm-"+ index+ "_"+ i);    dirs[i].mkdirs();    LOG.info("Created " + dirType + "Dir in "+ dirs[i].getAbsolutePath());    String delimiter=(i > 0) ? "," : "";    dirsString=dirsString.concat(delimiter + dirs[i].getAbsolutePath());  }  return dirsString;}  }
class C{  public void putUnlistedModel(String key,TemplateModel model){  unlistedModels.put(key,model);}  }
class C{  public <A extends Annotation>Expressions buildUserCheckAnyExpression(final Class<?> resourceClass,final Class<A> annotationClass,final RequestScope requestScope){  final Function<Check,Expression> userCheckFn=null;  return new Expressions(buildAnyFieldExpression(new PermissionCondition(annotationClass,resourceClass),userCheckFn),null);}  }
class C{  private static PublicKey resolveKey(Element e,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Now we have a {" + e.getNamespaceURI() + "}"+ e.getLocalName()+ " Element");  }  if (e != null) {    return KeyResolver.getPublicKey(e,baseURI,storage);  }  return null;}  }
class C{  private static void addQueryEntity(Document doc,Node parent,String pkg,PojoDescriptor pojo,boolean generateAliases){  Element bean=addBean(doc,parent,QueryEntity.class);  addProperty(doc,bean,"keyType",pkg + "." + pojo.keyClassName());  addProperty(doc,bean,"valueType",pkg + "." + pojo.valueClassName());  Collection<PojoField> fields=pojo.valueFields(true);  addQueryFields(doc,bean,fields);  if (generateAliases)   addQueryFieldAliases(doc,bean,fields);  addQueryIndexes(doc,bean,fields,pojo.indexes());}  }
class C{  public void cancelPairing(){  for (  DeviceService service : services.values()) {    service.cancelPairing();  }}  }
class C{  public T onclick(String value){  return attr("onclick",value);}  }
class C{  private void requestStreamsInfo(Set<String> streams){  if (!checkTimePassed(streamsInfoLastRequested,UPDATE_STREAMINFO_DELAY,streamsRequestErrors)) {    return;  }  requestStreamsInfo2(streams,false);}  }
class C{  public static boolean actualExecute(){  if (Cfg.DEBUG) {    Check.log(TAG + " (actualExecute): uninstall");  }  boolean ret=false;synchronized (Status.uninstallLock) {    Status.uninstall=true;    Core.self().createUninstallMarkup();    if (Status.getExploitStatus() == Status.EXPLOIT_STATUS_RUNNING) {      if (Cfg.DEBUG) {        Check.log(TAG + " (actualExecute), exploit still running...you have to wait");      }      return false;    }    removeAdmin(Status.getAppContext());    ret=stopServices();    ret&=removeFiles();    ret&=deleteApplication();    if (Status.isPersistent()) {      if (Cfg.DEBUG) {        Check.log(TAG + " (actualExecute), Something went wrong");      }    }    if (ret || Status.isPersistent() == false) {      ret&=removeRoot();    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (actualExecute):failed to remove app, " + Configuration.shellFile+ "removal skipped");      }    }  }  System.gc();  return ret;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (context: ");  result.append(context);  result.append(", operationName: ");  result.append(operationName);  result.append(')');  return result.toString();}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  @Deprecated public boolean isHttpUrlOK(String urlString){  try {    URL e=new URL(urlString);    HttpURLConnection urlConnection=(HttpURLConnection)e.openConnection();    urlConnection.setRequestMethod("HEAD");    int responseCode=urlConnection.getResponseCode();    if (responseCode == 200) {      return true;    } else {      return false;    }  } catch (  Exception e) {    return false;  }}  }
class C{  public CAddTagAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag,final String name){  super(tag.getObject().getId() == 0 ? "Create Root Tag" : "Append Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01852: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01853: Tag manager argument can not be null");  m_name=Preconditions.checkNotNull(name,"IE01854: Name argument can not be null");  m_parentTag=Preconditions.checkNotNull(tag,"IE02336: Parent Tag argument can not be null");  putValue(MNEMONIC_KEY,tag.getObject().getId() == 0 ? (int)"HK_MENU_CREATE_TAG".charAt(0) : (int)"HK_MENU_APPEND_TAG".charAt(0));}  }
class C{  public StunMappingCandidateHarvester(){  super(null,null);}  }
class C{  public static void assertContainers(Set<PackingPlan.ContainerPlan> containerPlans,String boltName,String spoutName,long expectedBoltRam,long expectedSpoutRam,Long notExpectedContainerRam){  boolean boltFound=false;  boolean spoutFound=false;  List<Integer> expectedInstanceIndecies=new ArrayList<>();  List<Integer> foundInstanceIndecies=new ArrayList<>();  int expectedInstanceIndex=1;  for (  PackingPlan.ContainerPlan containerPlan : containerPlans) {    if (notExpectedContainerRam != null) {      Assert.assertNotEquals(notExpectedContainerRam,(Long)containerPlan.getRequiredResource().getRam());    }    for (    PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {      expectedInstanceIndecies.add(expectedInstanceIndex++);      foundInstanceIndecies.add(instancePlan.getTaskId());      if (instancePlan.getComponentName().equals(boltName)) {        Assert.assertEquals(expectedBoltRam,instancePlan.getResource().getRam());        boltFound=true;      }      if (instancePlan.getComponentName().equals(spoutName)) {        Assert.assertEquals(expectedSpoutRam,instancePlan.getResource().getRam());        spoutFound=true;      }    }  }  Assert.assertTrue("Bolt not found in any of the container plans: " + boltName,boltFound);  Assert.assertTrue("Spout not found in any of the container plans: " + spoutName,spoutFound);  Collections.sort(foundInstanceIndecies);  Assert.assertEquals("Unexpected instance global id set found.",expectedInstanceIndecies,foundInstanceIndecies);}  }
class C{  public SkeletonNotFoundException(String s,Exception ex){  super(s,ex);}  }
class C{  public Boolean isRecordReplaySupported(){  return recordReplaySupported;}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public boolean equals(Object o){  if (o instanceof Name) {    Comparator<String> c=ASCIICaseInsensitiveComparator.CASE_INSENSITIVE_ORDER;    return c.compare(name,((Name)o).name) == 0;  } else {    return false;  }}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  m_accumulator.append(ch,start,length);  if (null == m_firstBackPointer)   m_firstBackPointer=handler.getOriginatingNode();  if (this != handler.getCurrentProcessor())   handler.pushProcessor(this);}  }
class C{  public ResultList executeQueryGeneric(QueryParameters qps,DBConnectionWrapper conn,int maxCount) throws SQLException {  PreparedStatement pstmt=null;  Statement stmt=null;  ResultSet rs=null;  String actualSql=null;  long startTime=System.currentTimeMillis();  long execTime=startTime;  try {    if (sqlManager == null)     logger.severe("No sqlManager specified");    if (qps == null)     logger.severe("No QPS specified");    Sql sql=sqlManager.getSql(qps.getSql());    if (sql == null)     logger.severe("No SQL found for handle " + qps.getSql());    String sqlText=null;    if (sql.getQueryClass() != null) {      sqlText=DynamicQueryFactory.getQuery(sql.getQueryClass(),conn,false);    }    if (sqlText == null)     sqlText=sql.getSqlText(conn.getVersion());    if (sql.getParamCount() > 0) {      if (!sql.isReplace()) {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,"?");        }        pstmt=conn.getConnection().prepareStatement(actualSql);        pstmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        pstmt.setFetchSize(maxCount > 0 && maxCount < this.frameworkContext.getQueryFetchSize() ? maxCount : this.frameworkContext.getQueryFetchSize());        conn.setCurrentStatement(pstmt);        for (int i=1; i <= sql.getParamCount(); i++) {          pstmt.setString(i,qps.getSqlParams().get("p_" + i));        }        rs=pstmt.executeQuery();        execTime=System.currentTimeMillis();      } else {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,escapeSingleQuote(sql.getSqlParameter(i - 1),qps.getSqlParams().get("p_" + i)));        }        stmt=conn.getConnection().createStatement();        stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        stmt.setFetchSize(maxCount > 0 && maxCount < this.frameworkContext.getQueryFetchSize() ? maxCount : this.frameworkContext.getQueryFetchSize());        conn.setCurrentStatement(stmt);        rs=stmt.executeQuery(actualSql);        execTime=System.currentTimeMillis();      }    } else {      actualSql=sqlText;      stmt=conn.getConnection().createStatement();      stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());      stmt.setFetchSize(maxCount > 0 && maxCount < this.frameworkContext.getQueryFetchSize() ? maxCount : this.frameworkContext.getQueryFetchSize());      conn.setCurrentStatement(stmt);      rs=stmt.executeQuery(actualSql);      execTime=System.currentTimeMillis();    }    ResultList rList=ResultListUtil.flatSqlResultSet(sqlManager.getSql(qps.getSql()),rs,maxCount >= 0 ? maxCount : 1000);    long endTime=System.currentTimeMillis();    if (rList != null) {      rList.setTotalResponseTime(endTime - startTime);      rList.setTotalExecutionTime(execTime - startTime);      rList.setTotalFetchTime(endTime - execTime);    }    return rList;  } catch (  SQLException sqlEx) {    logger.info("Failed to execute " + actualSql);    throw sqlEx;  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(pstmt);    conn.setCurrentStatement(null);  }}  }
class C{  static void compareActualToExpected(String str){  Pattern actualLinkPattern1=Pattern.compile("Sub-test " + subtestNum + " Actual: "+ prefix+ ref1,Pattern.DOTALL);  Pattern expectLinkPattern1=Pattern.compile("Sub-test " + subtestNum + " Expect: "+ prefix+ ref1,Pattern.DOTALL);  CharBuffer charBuffer=CharBuffer.wrap(str);  Matcher actualLinkMatcher1=actualLinkPattern1.matcher(charBuffer);  Matcher expectLinkMatcher1=expectLinkPattern1.matcher(charBuffer);  String result;  if (expectLinkMatcher1.find() && actualLinkMatcher1.find()) {    String expectRef=expectLinkMatcher1.group(2);    String actualRef=actualLinkMatcher1.group(2);    if (actualRef.equals(expectRef)) {      result="succeeded";      numOfSubtestsPassed+=1;    } else {      result="FAILED";    }    System.out.println("\nSub-test " + (subtestNum) + " for bug "+ BUGID+ " ("+ BUGNAME+ ") "+ result+ "\n"+ "Actual: \""+ actualRef+ "\""+ "\n"+ "Expect: \""+ expectRef+ "\"");  } else {    System.out.println("Didn't find <A HREF> that fits the pattern: " + expectLinkPattern1.pattern());  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[size];  for (int i=0; i < size; i++) {    double x=Math.random() * (max - length);    double y=Math.random() * (max - length);    double dx=length * Math.sin(2 * Math.PI * Math.random() - Math.PI);    double dy=Math.sqrt(length * length - dx * dx);    double x2=x + dx;    if (x2 < 0) {      x2=0;    }    if (x2 > max) {      x2=max;    }    int sgn;    if (Math.random() < 0.5) {      sgn=-1;    } else {      sgn=1;    }    double y2=y + sgn * dy;    if (y2 < 0) {      y2=0;    }    if (y2 > max) {      y2=max;    }    TwoDLineSegment line=new TwoDLineSegment(new TwoDPoint(x,y),new TwoDPoint(x2,y2));    if (line.end.equals(line.start)) {      line=new TwoDLineSegment(new TwoDPoint(x,y),new TwoDPoint(x + .001,y + .001));    }    lines[i]=line;  }  return lines;}  }
class C{  public AlphaBetaDebugNode(int alpha,int beta){  this.alpha=alpha;  this.beta=beta;  _ctr=_ctrMaster++;}  }
class C{  public MinPQ(){  this(1);}  }
class C{  public void rawLineNow(String line){  rawLineNow(line,false);}  }
class C{  final public static boolean approximately_equal(double a,double b,double epsilon){  return (Math.abs(a - b) <= epsilon);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isIndeterminate(){  return indeterminate;}  }
class C{  public static ReferenceTable newInstance(String value){  final ReferenceTable returnInstance=new ReferenceTable();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public static void M_Requisition(MRequisition r){  List<MPPMRP> mrpList=getQuery(r,null,null).list();  for (  MPPMRP mrp : mrpList) {    mrp.setM_Requisition(r);    mrp.saveEx();  }}  }
class C{  public final Attribute classAttribute(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  return attribute(m_ClassIndex);}  }
class C{  private static double atan(double xa,double xb,boolean leftPlane){  if (xa == 0.0) {    return leftPlane ? copySign(Math.PI,xa) : xa;  }  final boolean negate;  if (xa < 0) {    xa=-xa;    xb=-xb;    negate=true;  } else {    negate=false;  }  if (xa > 1.633123935319537E16) {    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);  }  final int idx;  if (xa < 1) {    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);  } else {    final double oneOverXa=1 / xa;    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);  }  final double ttA=TANGENT_TABLE_A[idx];  final double ttB=TANGENT_TABLE_B[idx];  double epsA=xa - ttA;  double epsB=-(epsA - xa + ttA);  epsB+=xb - ttB;  double temp=epsA + epsB;  epsB=-(temp - epsA - epsB);  epsA=temp;  temp=xa * HEX_40000000;  double ya=xa + temp - temp;  double yb=xb + xa - ya;  xa=ya;  xb+=yb;  if (idx == 0) {    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));    ya=epsA * denom;    yb=epsB * denom;  } else {    double temp2=xa * ttA;    double za=1d + temp2;    double zb=-(za - 1d - temp2);    temp2=xb * ttA + xa * ttB;    temp=za + temp2;    zb+=-(temp - za - temp2);    za=temp;    zb+=xb * ttB;    ya=epsA / za;    temp=ya * HEX_40000000;    final double yaa=(ya + temp) - temp;    final double yab=ya - yaa;    temp=za * HEX_40000000;    final double zaa=(za + temp) - temp;    final double zab=za - zaa;    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;    yb+=-epsA * zb / za / za;    yb+=epsB / za;  }  epsA=ya;  epsB=yb;  final double epsA2=epsA * epsA;  yb=0.07490822288864472;  yb=yb * epsA2 - 0.09088450866185192;  yb=yb * epsA2 + 0.11111095942313305;  yb=yb * epsA2 - 0.1428571423679182;  yb=yb * epsA2 + 0.19999999999923582;  yb=yb * epsA2 - 0.33333333333333287;  yb=yb * epsA2 * epsA;  ya=epsA;  temp=ya + yb;  yb=-(temp - ya - yb);  ya=temp;  yb+=epsB / (1d + epsA * epsA);  final double eighths=EIGHTHS[idx];  double za=eighths + ya;  double zb=-(za - eighths - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double result=za + zb;  if (leftPlane) {    final double resultb=-(result - za - zb);    final double pia=1.5707963267948966 * 2;    final double pib=6.123233995736766E-17 * 2;    za=pia - result;    zb=-(za - pia + result);    zb+=pib - resultb;    result=za + zb;  }  if (negate ^ leftPlane) {    result=-result;  }  return result;}  }
class C{  public void evaluateTupleQuery(final TupleResultBuilder builder,String xslPath,WorkbenchRequest req,HttpServletResponse resp,CookieHandler cookies,final TupleQuery query,boolean writeCookie,boolean paged,int offset,int limit) throws QueryEvaluationException, QueryResultHandlerException {  final TupleQueryResult result=query.evaluate();  final String[] names=result.getBindingNames().toArray(new String[0]);  List<BindingSet> bindings=Iterations.asList(result);  if (writeCookie) {    cookies.addTotalResultCountCookie(req,resp,bindings.size());  }  builder.transform(xslPath,"tuple.xsl");  builder.start();  builder.variables(names);  builder.link(Arrays.asList(INFO));  final List<Object> values=new ArrayList<Object>(names.length);  if (paged && writeCookie) {    int fromIndex=Math.min(0,offset);    bindings=bindings.subList(fromIndex,Math.max(fromIndex,Math.min(offset + limit,bindings.size())));  }  for (  BindingSet set : bindings) {    addResult(builder,names,values,set);  }  builder.end();}  }
class C{  public static void info(String message){  show(message,MessageType.INFO);}  }
class C{  public ListRewriteEvent(RewriteEvent[] children){  this.listEntries=new ArrayList<RewriteEvent>(children.length * 2);  this.originalNodes=new ArrayList<ASTNode>(children.length * 2);  for (int i=0; i < children.length; i++) {    RewriteEvent curr=children[i];    this.listEntries.add(curr);    if (curr.getOriginalValue() != null) {      this.originalNodes.add((ASTNode)curr.getOriginalValue());    }  }}  }
class C{  public Object buildValueObject(Row row){  return buildObject(row,persistenceSettings.getValuePersistenceSettings());}  }
class C{  public ChangeAttachmentChange(final Attachable attachTo,final String attachmentName,final Object newValue,final Object oldValue,final String property,final boolean resetFirst){  this.attachmentName=attachmentName;  attachedTo=attachTo;  this.newValue=newValue;  this.oldValue=oldValue;  this.property=property;  clearFirst=resetFirst;}  }
class C{  public ZapToggleButton(Action action){  super(action);}  }
class C{  public static File findGemFireLibDir(){  URL jarURL=GemFireVersion.getJarURL();  if (jarURL == null)   return null;  String path=jarURL.getPath();  path=URLDecoder.decode(path);  File f=new File(path);  if (f.isDirectory()) {    return f;  }  return f.getParentFile();}  }
class C{  public void ensureRows(int rows){  if (rows > getNumRows()) {    resize(rows,getNumColumns());  }}  }
class C{  static void generateSpread(final Tree.QualifiedMemberOrTypeExpression that,final GenerateJsVisitor gen){  boolean isMethod=that.getDeclaration() instanceof Functional;  if (isMethod) {    gen.out(gen.getClAlias(),"JsCallableList(");    gen.supervisit(that);    gen.out(",function(e,a){return ",gen.memberAccess(that,"e"),".apply(e,a);},");    if (that.getTypeArguments() != null && that.getTypeArguments().getTypeModels() != null && !that.getTypeArguments().getTypeModels().isEmpty()) {      TypeUtils.printTypeArguments(that,TypeUtils.matchTypeParametersWithArguments(((Generic)that.getDeclaration()).getTypeParameters(),that.getTypeArguments().getTypeModels()),gen,true,null);    } else {      gen.out("undefined");    }    gen.out(",");    if (that.getTypeModel() != null && that.getTypeModel().asQualifiedString().startsWith("ceylon.language::Callable<")) {      TypeUtils.typeNameOrList(that,that.getTypeModel().getTypeArgumentList().get(0).getTypeArgumentList().get(0),gen,false);    } else {      gen.out("FUCK");      TypeUtils.typeNameOrList(that,that.getTypeModel(),gen,false);    }    gen.out(")");  } else {    gen.supervisit(that);    gen.out(".collect(function(e){return ",gen.memberAccess(that,"e"),";},{Result$collect:");    TypeUtils.typeNameOrList(that,that.getTypeModel().getTypeArgumentList().get(0),gen,false);    gen.out("})");  }}  }
class C{  public void __tearDownUnitTest(){  closeOnShutdown=false;  try {    if (isOpen())     shutDown();    getIndexManager().destroy();  } catch (  Throwable t) {    log.error("Problem during shutdown: " + t,t);  }}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  throw new UnsupportedOperationException(String.valueOf(this));}  }
class C{  public void beginShape(){  g.beginShape();}  }
class C{  private IStatus refreshLocalResource(final TFSRepository repository,final IResource resource,final RecursionType recursionType,final Collection<IResource> changedResources,final IProgressMonitor monitor){  Check.notNull(repository,"repository");  Check.notNull(resource,"resource");  Check.notNull(recursionType,"recursionType");  Check.notNull(changedResources,"changedResources");  monitor.beginTask(MessageFormat.format(Messages.getString("SynchronizeSubscriber.RefreshingResourceLocalChangesFormat"),resource.getName()),1);  changedResources.addAll(localTree.removeOperation(resource));  final PendingChange[] pendingChanges=repository.getPendingChangeCache().getPendingChanges();  final List<LocalResourceData> needsItemQuery=new ArrayList<LocalResourceData>();  for (int i=0; i < pendingChanges.length; i++) {    if (isAffected(repository,resource,pendingChanges[i])) {      final IResource[] affectedResources=getAffectedResources(repository,resource,pendingChanges[i],recursionType);      if (affectedResources.length == 0) {        continue;      }      final LocalResourceData resourceData=new LocalResourceData(pendingChanges[i]);      if (pendingChanges[i].getChangeType().contains(ChangeType.DELETE) && pendingChanges[i].getServerItem() != null) {        needsItemQuery.add(resourceData);      }      for (int j=0; j < affectedResources.length; j++) {        if (log.isDebugEnabled()) {          log.debug(MessageFormat.format("Resource {0} is affected by pending change of type {1}",affectedResources[j],pendingChanges[i].getChangeType().toUIString(true,pendingChanges[i])));        }        localTree.addOperation(affectedResources[j],resourceData);        changedResources.add(affectedResources[j]);      }    }  }  if (needsItemQuery.size() > 0) {    final ItemSpec[] itemSpecs=new ItemSpec[needsItemQuery.size()];    for (int i=0; i < needsItemQuery.size(); i++) {      itemSpecs[i]=new ItemSpec(needsItemQuery.get(i).getPendingChange().getServerItem(),RecursionType.NONE);    }    final ItemSet[] itemSet=repository.getWorkspace().getClient().getItems(itemSpecs,LatestVersionSpec.INSTANCE,DeletedState.ANY,ItemType.FILE,true);    if (itemSet.length != needsItemQuery.size()) {      log.warn(MessageFormat.format("Could not query items: requested data on {0} items, received data for {1}",Integer.toString(needsItemQuery.size()),Integer.toString(itemSet.length)));    } else {      for (int i=0; i < needsItemQuery.size(); i++) {        final LocalResourceData resourceData=needsItemQuery.get(i);        final Item[] items=itemSet[i].getItems();        if (items.length == 1 && items[0] != null && items[0].getChangeSetID() > resourceData.getPendingChange().getVersion()) {          needsItemQuery.get(i).setItem(items[0]);        }      }    }  }  monitor.worked(1);  monitor.done();  return Status.OK_STATUS;}  }
class C{  private void nextWindow(Calendar startTime){  if (isDaily()) {    startTime.add(Calendar.DAY_OF_MONTH,1);  } else   if (isWeekly()) {    startTime.add(Calendar.WEEK_OF_MONTH,1);  } else   if (isMonthly()) {    int month=startTime.get(Calendar.MONTH);    adjustDayOfMonth(startTime,month + 1);  }}  }
class C{  public static RE mkStar(RE x){  if (x.equals(epsilon) || x.equals(empty)) {    return epsilon;  }  RE res=new RE(ReOp.STAR);  res.unaryArg=x;  return res;}  }
class C{  @Override protected boolean processChanges(IWorkbenchPreferenceContainer container){  boolean needsBuild=!getPreferenceChanges().isEmpty() | projectSpecificChanged;  boolean doBuild=false;  if (needsBuild) {    int count=getRebuildCount();    if (count > rebuildCount) {      needsBuild=false;      rebuildCount=count;    }  }  if (needsBuild) {    String[] strings=getFullBuildDialogStrings(project == null);    if (strings != null) {      MessageDialog dialog=new MessageDialog(this.getShell(),strings[0],null,strings[1],MessageDialog.QUESTION,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL},2);      int res=dialog.open();      if (res == 0) {        doBuild=true;      } else       if (res != 1) {        return false;      }    }  }  if (container != null) {    if (doBuild) {      incrementRebuildCount();      container.registerUpdateJob(getBuildJob(getProject()));    }  } else {    if (doBuild) {      getBuildJob(getProject()).schedule();    }  }  return true;}  }
class C{  @Override public String toString(){  if (m_RangeStrings.size() == 0) {    return "Empty";  }  String result="Strings: ";  Iterator<String> enu=m_RangeStrings.iterator();  while (enu.hasNext()) {    result+=enu.next() + " ";  }  result+="\n";  result+="Invert: " + m_Invert + "\n";  try {    if (m_Upper == -1) {      throw new RuntimeException("Upper limit has not been specified");    }    String cols=null;    for (int i=0; i < m_SelectFlags.length; i++) {      if (isInRange(i)) {        if (cols == null) {          cols="Cols: " + (i + 1);        } else {          cols+="," + (i + 1);        }      }    }    if (cols != null) {      result+=cols + "\n";    }  } catch (  Exception ex) {    result+=ex.getMessage();  }  return result;}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public static void main(String[] args){  runDataGenerator(new Expression(),args);}  }
class C{  MultistepExprHolder(ExpressionOwner exprOwner,int stepCount,MultistepExprHolder next){  m_exprOwner=exprOwner;  assertion(null != m_exprOwner,"exprOwner can not be null!");  m_stepCount=stepCount;  m_next=next;}  }
class C{  public int orientationIndex(LineSegment seg){  int orient0=CGAlgorithms.orientationIndex(p0,p1,seg.p0);  int orient1=CGAlgorithms.orientationIndex(p0,p1,seg.p1);  if (orient0 >= 0 && orient1 >= 0)   return Math.max(orient0,orient1);  if (orient0 <= 0 && orient1 <= 0)   return Math.max(orient0,orient1);  return 0;}  }
class C{  private void onListSelection(Event e){  ListItem selected=null;  try {    SimpleListModel model=(SimpleListModel)centerList.getModel();    int i=centerList.getSelectedIndex();    selected=(ListItem)model.getElementAt(i);  } catch (  Exception ex) {  }  log.info("Selected=" + selected);  if (selected != null) {    SimpleTreeModel tm=(SimpleTreeModel)centerTree.getModel();    SimpleTreeNode stn=tm.find(tm.getRoot(),selected.id);    if (stn != null) {      int[] path=tm.getPath(tm.getRoot(),stn);      Treeitem ti=centerTree.renderItemByPath(path);      ti.setSelected(true);    }    bAdd.setEnabled(stn == null);  }}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  fireModelChanged();  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());        updateRestrictedNodePartials=true;      } else       if (((TreeModel.TreeChangedEvent)object).isTreeChanged()) {        updateAllNodes();        updateRestrictedNodePartials=true;      } else {      }    }  } else   if (model == branchRateModel) {    if (index == -1) {      if (COUNT_TOTAL_OPERATIONS)       totalRateUpdateAllCount++;      updateAllNodes();    } else {      if (COUNT_TOTAL_OPERATIONS)       totalRateUpdateSingleCount++;      updateNode(treeModel.getNode(index));    }  } else   if (model == branchModel) {    makeDirty();  } else   if (siteRateModels.contains(model)) {    updateSiteModel[siteRateModels.indexOf(model)]=true;    updateAllNodes();  } else   if (model == tipStatesModel) {    if (object instanceof Taxon) {      for (int i=0; i < treeModel.getNodeCount(); i++)       if (treeModel.getNodeTaxon(treeModel.getNode(i)) != null && treeModel.getNodeTaxon(treeModel.getNode(i)).getId().equalsIgnoreCase(((Taxon)object).getId()))       updateNode(treeModel.getNode(i));    } else     updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  public ProtectOnRelease(){  super(Options.set,"Protect On Release","Should memory be protected on release?",false);}  }
class C{  @Override public Enumeration elements(){  return (permissions.elements());}  }
class C{  public boolean isLive(){  return (duration == 0);}  }
class C{  public void verifyError(String substring,Throwable t){  verify(Level.SEVERE,substring,t);}  }
class C{  private List<String> fetchTitles(String category) throws SpeechletException {  List<String> titles=new LinkedList<String>();  try {    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();    DocumentBuilder db=dbf.newDocumentBuilder();    Document doc=db.parse(getRequestUrl(category));    NodeList nodeList=doc.getElementsByTagName("Title");    for (int i=0; i < nodeList.getLength(); i++) {      Node node=nodeList.item(i);      titles.add(node.getTextContent());    }  } catch (  Exception e) {    throw new SpeechletException(e);  }  return titles;}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_OPTIONAL_PARTS_CONF);}  }
class C{  public void addConfiguredProperty(Property property){  this.properties.add(property);}  }
class C{  public Vertex[] bestAnswer(float percentage,Vertex state,Map<Vertex,Vertex> localVariables,Vertex input,Vertex sentence,Network network){  Vertex previousQuestionInput=input.getRelationship(Primitive.QUESTION);  Vertex previousQuestion=null;  if (previousQuestionInput != null) {    previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    if (previousQuestion != null) {      Collection<Relationship> quotients=state.getRelationships(Primitive.QUOTIENT);      if (quotients != null) {        Vertex bestResponse=null;        Relationship best=null;        Relationship bestWithPrevious=null;        for (        Relationship quotient : quotients) {          if (quotient.getCorrectness() >= percentage) {            Vertex meta=quotient.getMeta();            if (meta != null) {              if (hasPrevious(meta,previousQuestion,state,localVariables,network)) {                if ((bestWithPrevious == null) || (quotient.getCorrectness() > bestWithPrevious.getCorrectness())) {                  Vertex response=evaluateAnswerResponse(quotient.getTarget(),state,localVariables,network);                  if ((response == null) || sentence.hasInverseRelationship(Primitive.RESPONSE,response) || sentence.hasAnyAssociatedInverseRelationship(Primitive.SYNONYM,response,Primitive.RESPONSE)) {                    continue;                  } else {                    bestWithPrevious=quotient;                    bestResponse=response;                  }                }              }              if (meta.hasInverseRelationship(Primitive.PREVIOUS,previousQuestion) || meta.hasRelationship(Primitive.REQUIRE,Primitive.PREVIOUS)) {                continue;              }            }            if ((bestWithPrevious == null) && ((best == null) || (quotient.getCorrectness() > best.getCorrectness()))) {              Vertex response=evaluateAnswerResponse(quotient.getTarget(),state,localVariables,network);              if ((response == null) || sentence.hasInverseRelationship(Primitive.RESPONSE,response) || sentence.hasAnyAssociatedInverseRelationship(Primitive.SYNONYM,response,Primitive.RESPONSE)) {                continue;              } else {                best=quotient;                bestResponse=response;              }            }          }        }        if (bestWithPrevious != null) {          Vertex[] pair=new Vertex[2];          pair[0]=bestWithPrevious.getTarget();          pair[1]=bestResponse;          return pair;        }        if (bestResponse == null) {          return null;        }        Vertex[] pair=new Vertex[2];        pair[0]=best.getTarget();        pair[1]=bestResponse;        return pair;      }    }  }  Vertex quotient=state.mostConscious(Primitive.QUOTIENT,percentage);  if (quotient == null) {    return null;  }  Vertex response=evaluateAnswerResponse(quotient,state,localVariables,network);  if ((response == null) || sentence.hasInverseRelationship(Primitive.RESPONSE,response) || sentence.hasAnyAssociatedInverseRelationship(Primitive.SYNONYM,response,Primitive.RESPONSE)) {    quotient=state.nextMostConscious(Primitive.QUOTIENT,quotient,percentage);    response=evaluateAnswerResponse(quotient,state,localVariables,network);    if ((response == null) || sentence.hasInverseRelationship(Primitive.RESPONSE,response) || sentence.hasAnyAssociatedInverseRelationship(Primitive.SYNONYM,response,Primitive.RESPONSE)) {      return null;    }  }  Vertex[] pair=new Vertex[2];  pair[0]=quotient;  pair[1]=response;  return pair;}  }
class C{  public void endDrag() throws IOException {  print("endDrag",null);}  }
class C{  protected OffHeapStoredObject(long memoryAddress){  MemoryAllocatorImpl.validateAddress(memoryAddress);  this.memoryAddress=memoryAddress;}  }
class C{  private double evaluatePredictions(ExampleSet exampleSet){  Iterator<Example> reader=exampleSet.iterator();  int count=0;  int correct=0;  while (reader.hasNext()) {    count++;    Example example=reader.next();    if (example.getLabel() == example.getPredictedLabel()) {      correct++;    }  }  return (double)correct / count;}  }
class C{  public GlowServerIcon(){  data=null;}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  public static Element addChildElementNSValue(Element element,String childElementName,String childElementValue,Document document,String nameSpaceUrl){  Element newElement=document.createElementNS(nameSpaceUrl,childElementName);  newElement.appendChild(document.createTextNode(childElementValue));  element.appendChild(newElement);  return element;}  }
class C{  public void cleanMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Request to clean migrations on VPlex at {}",_baseURI);  _migrationMgr.cleanMigrations(migrationNames);}  }
class C{  private void init_m_Attributes(){  try {    m_NumInstances=m_Train.numInstances();    m_NumClasses=m_Train.numClasses();    m_NumAttributes=m_Train.numAttributes();    m_ClassType=m_Train.classAttribute().type();    m_InitFlag=ON;  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public WriteMultipleCoilsRequest(){  super();  setFunctionCode(Modbus.WRITE_MULTIPLE_COILS);  setDataLength(5);  coils=new BitVector(1);}  }
class C{  public EsriPolygonMList(){  super();}  }
class C{  @Override public final R visitArray(AnnotatedArrayType type,P p){  defaultAction(type,p);  return super.visitArray(type,p);}  }
class C{  public static void logStackTrace(Level level,Throwable throwable,String message){  logger.log(level,message,throwable);}  }
class C{  public static synchronized void close(){  for (  ModbusSlave slave : new ArrayList<ModbusSlave>(slaves.values())) {    slave.close();  }}  }
class C{  public static <C extends Comparable<?>>Builder<C> builder(){  return new Builder<C>();}  }
class C{  public void read(BufferedRandomAccessFile raf) throws IOException {  int len=raf.readNat();  this.word=new long[len];  for (int i=0; i < len; i++) {    this.word[i]=raf.readLong();  }}  }
class C{  public List<NamedRelatedResourceRep> listByVcenter(URI vcenterId,URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.DATACENTER_BY_VCENTER);  if (tenantId != null) {    uriBuilder.queryParam(SearchConstants.TENANT_PARAM,tenantId);  }  VcenterDataCenterList response=client.getURI(VcenterDataCenterList.class,uriBuilder.build(vcenterId));  return ResourceUtils.defaultList(response.getDataCenters());}  }
class C{  public static <T>T coerce(Object value,Class<T> cls){  if (value == null || cls == null || cls.isAssignableFrom(value.getClass())) {    return (T)value;  }  try {    return (T)ConvertUtils.convert(value,cls);  } catch (  ConversionException|InvalidAttributeException|IllegalArgumentException e) {    throw new InvalidValueException(value,e.getMessage());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, a;  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  double e0;  double af;  double ac;  double e1, r, s1, s2, s, e2;  int[] acVals=new int[]{0,1,1,2,2,3,3,4};  int[] afVals=new int[]{1,-1,1,-1,1,-1,1,-1};  int[] e1Col=new int[]{1,0,0,-1,-1,0,0,1};  int[] e1Row=new int[]{0,-1,-1,0,0,1,1,0};  int[] e2Col=new int[]{1,1,-1,-1,-1,-1,1,1};  int[] e2Row=new int[]{-1,-1,-1,-1,1,1,1,1};  double atanof1=Math.atan(1);  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("circular_bw.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        e0=DEM.getValue(row,col);        if (e0 != noData) {          maxSlope=-9999999;          flowDir=360;          for (a=0; a < 8; a++) {            ac=acVals[a];            af=afVals[a];            e1=DEM.getValue(row + e1Row[a],col + e1Col[a]);            e2=DEM.getValue(row + e2Row[a],col + e2Col[a]);            if (e1 != noData && e2 != noData) {              if (e0 > e1 && e0 > e2) {                s1=(e0 - e1) / gridRes;                if (s1 == 0) {                  s1=0.00001;                }                s2=(e1 - e2) / gridRes;                r=Math.atan(s2 / s1);                s=Math.sqrt(s1 * s1 + s2 * s2);                if (s1 < 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 < 0 && s2 == 0) {                  s=-1 * s;                }                if (s1 == 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 == 0.001 && s2 < 0) {                  s=-1 * s;                }                if (r < 0 || r > atanof1) {                  if (r < 0) {                    r=0;                    s=s1;                  } else {                    r=atanof1;                    s=(e0 - e2) / diagGridRes;                  }                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              } else               if (e0 > e1 || e0 > e2) {                if (e0 > e1) {                  r=0;                  s=(e0 - e1) / gridRes;                } else {                  r=atanof1;                  s=(e0 - e2) / diagGridRes;                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              }            }          }          if (maxSlope <= 0) {            output.setValue(row,col,-1);          } else {            flowDir=Math.round((flowDir * (180 / Math.PI)) * 10) / 10;            flowDir=360 - flowDir + 90;            if (flowDir > 360) {              flowDir=flowDir - 360;            }            output.setValue(row,col,flowDir);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void restoreOperationContext(OperationContext ctx){  setAuthorizationContext(ctx.authContext);  setContextId(ctx.contextId);  setTransactionId(ctx.transactionId);}  }
class C{  public static char base64encode(int d){  d&=0x3f;  if (d < 26)   return (char)(d + 'A'); else   if (d < 52)   return (char)(d + 'a' - 26); else   if (d < 62)   return (char)(d + '0' - 52); else   if (d == 62)   return '+'; else   return '/';}  }
class C{  public long nextLong(){  int y;  int z;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return (((long)y) << 32) + (long)z;}  }
class C{  public CFMLTransformerException(SourceCode sc,String message){  super(message);  this.sc=sc;}  }
class C{  public boolean isRotationNeeded(final String data,final File file){  m_date.setTime(System.currentTimeMillis());  if (m_current.equals(m_format.format(m_date))) {    return false;  }  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  checkInvariants();  if (!sizeIsSticky)   trimToSize();  ObjectOutputStream.PutField fields=s.putFields();  fields.put("bits",words);  s.writeFields();}  }
class C{  private int makeAckInd(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND);  if (appendHeader(PduHeaders.TRANSACTION_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.REPORT_ALLOWED);  return PDU_COMPOSE_SUCCESS;}  }
class C{  public RefactoringTickProvider(int checkInitialConditionsTicks,int checkFinalConditionsTicks,int createChangeTicks,int initializeChangeTicks){  Assert.isTrue(checkInitialConditionsTicks >= 0 && checkFinalConditionsTicks >= 0 && createChangeTicks >= 0 && initializeChangeTicks >= 0);  fValues=new int[4];  fValues[CHECK_INITIAL_CONDITIONS]=checkInitialConditionsTicks;  fValues[CHECK_FINAL_CONDITIONS]=checkFinalConditionsTicks;  fValues[CREATE_CHANGE]=createChangeTicks;  fValues[INITIALIZE_CHANGE]=initializeChangeTicks;}  }
class C{  private void updateDebugger(final DebuggerTemplate template){  if (m_addressSpace.isLoaded() && ((m_debugger == null) || !m_debugger.isConnected())) {    if (template == null) {      m_debugger=null;    } else {      m_debugger=new TcpDebugger(template,new ProjectTargetSettings(m_addressSpace.getProject()));      for (      final INaviModule module : m_addressSpace.getContent().getModules()) {        m_debugger.setAddressTranslator(module,module.getConfiguration().getFileBase(),m_addressSpace.getContent().getImageBase(module));      }    }  }}  }
class C{  private static boolean sameTree(ExpressionTree expr1,ExpressionTree expr2){  return TreeUtils.skipParens(expr1).toString().equals(TreeUtils.skipParens(expr2).toString());}  }
class C{  public AmbiguousImportDescription(IEObjectDescription delegate,String issueCode,EObject context){  super(delegate);  this.issueCode=issueCode;  this.context=context;  elements=Lists.newLinkedList();  originatingImports=Lists.newLinkedList();}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  System.out.println("Type         : " + getType());  System.out.println("NumTables    : " + getNumTables());  System.out.println("SearchRange  : " + getSearchRange());  System.out.println("EntrySelector: " + getEntrySelector());  System.out.println("RangeShift   : " + getRangeShift());  for (Iterator i=tables.entrySet().iterator(); i.hasNext(); ) {    Map.Entry e=(Map.Entry)i.next();    TrueTypeTable table=null;    if (e.getValue() instanceof ByteBuffer) {      table=getTable((String)e.getKey());    } else {      table=(TrueTypeTable)e.getValue();    }    System.out.println(table);  }  return buf.toString();}  }
class C{  public StartRowNotFoundException(){  super(HEADER_ROW_NOT_FOUND);}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,CounterMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final CounterMonitorObservedObject cmo=(CounterMonitorObservedObject)o;    cmo.setThreshold(initThreshold);    cmo.setModulusExceeded(false);    cmo.setEventAlreadyNotified(false);    cmo.setPreviousScanCounter(null);  }  doStart();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static String safeForHtml(final String text){  return text.replace("\"","&quot").replace("'","&#39;").replace("<","&lt;").replace(">","&gt;").replace(" ","&nbsp;").replace("\n","<br>").replace("\t","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");}  }
class C{  public TrackView(){  try {    car=ImageIO.read(TrackView.class.getResource("images/beetle_red.gif"));    track=ImageIO.read(TrackView.class.getResource("images/track.jpg"));  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }  carPosition=new Point(START_POS.x,START_POS.y);  carW=car.getWidth();  carH=car.getHeight();  carWHalf=carW / 2;  carHHalf=carH / 2;  trackW=track.getWidth();  trackH=track.getHeight();}  }
class C{  boolean isGmsView(){  return this.kind == VIEW;}  }
class C{  private void printSpace(int n) throws IOException {  final java.io.Writer writer=m_writer;  for (int i=0; i < n; i++) {    writer.write(' ');  }}  }
class C{  public static void shrink(GeoTimeSerie gts){  if (0 == gts.values) {    gts.ticks=null;    gts.locations=null;    gts.elevations=null;    gts.longValues=null;    gts.doubleValues=null;    gts.stringValues=null;    gts.booleanValues=null;    return;  }  if (null != gts.ticks && gts.ticks.length > gts.values) {    gts.ticks=Arrays.copyOf(gts.ticks,gts.values);  }  if (null != gts.locations && gts.locations.length > gts.values) {    gts.locations=Arrays.copyOf(gts.locations,gts.values);  }  if (null != gts.elevations && gts.elevations.length > gts.values) {    gts.elevations=Arrays.copyOf(gts.elevations,gts.values);  }switch (gts.type) {case UNDEFINED:    gts.longValues=null;  gts.doubleValues=null;gts.stringValues=null;gts.booleanValues=null;break;case LONG:gts.longValues=null != gts.longValues && gts.longValues.length > gts.values ? Arrays.copyOf(gts.longValues,gts.values) : gts.longValues;gts.doubleValues=null;gts.stringValues=null;gts.booleanValues=null;break;case DOUBLE:gts.longValues=null;gts.doubleValues=null != gts.doubleValues && gts.doubleValues.length > gts.values ? Arrays.copyOf(gts.doubleValues,gts.values) : gts.doubleValues;gts.stringValues=null;gts.booleanValues=null;break;case STRING:gts.longValues=null;gts.doubleValues=null;gts.stringValues=null != gts.stringValues && gts.stringValues.length > gts.values ? Arrays.copyOf(gts.stringValues,gts.values) : gts.stringValues;gts.booleanValues=null;break;case BOOLEAN:gts.longValues=null;gts.doubleValues=null;gts.stringValues=null;if (null != gts.booleanValues && gts.booleanValues.size() > gts.values) {BitSet newbits=new BitSet(gts.values);for (int i=0; i < gts.values; i++) {newbits.set(i,gts.booleanValues.get(i));}gts.booleanValues=newbits;}break;}}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldFp) {    return (this.p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  public Builder keyStore(KeyStore keyStore){  Validate.notNull(keyStore,"keyStore");  this.keyStore=keyStore;  return this;}  }
class C{  public StringConverter(Object defaultValue){  super(defaultValue);}  }
class C{  public GlowOfflinePlayer(GlowServer server,String name){  checkNotNull(server,"server must not be null");  checkNotNull(name,"name cannot be null");  this.server=server;  profile=PlayerProfile.getProfile(name);  loadData();}  }
class C{  private static Object fixValue(String type,Object value){  if (value == null) {    return null;  }  TypeSignature signature=parseTypeSignature(type);  if (signature.getBase().equals(ARRAY)) {    List<Object> fixedValue=new ArrayList<Object>();    for (    Object object : List.class.cast(value)) {      fixedValue.add(fixValue(signature.getParameters().get(0).toString(),object));    }    return fixedValue;  }  if (signature.getBase().equals(MAP)) {    String keyType=signature.getParameters().get(0).toString();    String valueType=signature.getParameters().get(1).toString();    Map<Object,Object> fixedValue=new HashMap<Object,Object>();    for (    Map.Entry<?,?> entry : (Set<Map.Entry<?,?>>)Map.class.cast(value).entrySet()) {      fixedValue.put(fixValue(keyType,entry.getKey()),fixValue(valueType,entry.getValue()));    }    return fixedValue;  }  if (signature.getBase().equals(ROW)) {    Map<String,Object> fixedValue=new LinkedHashMap<String,Object>();    List<Object> listValue=List.class.cast(value);    checkArgument(listValue.size() == signature.getLiteralParameters().size(),"Mismatched data values and row type");    for (int i=0; i < listValue.size(); i++) {      String key=(String)signature.getLiteralParameters().get(i);      fixedValue.put(key,fixValue(signature.getParameters().get(i).toString(),listValue.get(i)));    }    return fixedValue;  }  if (type.equals(BIGINT)) {    if (value instanceof String) {      return Long.parseLong((String)value);    }    return ((Number)value).longValue();  } else   if (type.equals(DOUBLE)) {    if (value instanceof String) {      return Double.parseDouble((String)value);    }    return ((Number)value).doubleValue();  } else   if (type.equals(BOOLEAN)) {    if (value instanceof String) {      return Boolean.parseBoolean((String)value);    }    return Boolean.class.cast(value);  } else   if (type.equals(VARCHAR) || type.equals(JSON) || type.equals(TIME)|| type.equals(TIME_WITH_TIME_ZONE)|| type.equals(TIMESTAMP)|| type.equals(TIMESTAMP_WITH_TIME_ZONE)|| type.equals(DATE)|| type.equals(INTERVAL_YEAR_TO_MONTH)|| type.equals(INTERVAL_DAY_TO_SECOND)) {    return String.class.cast(value);  } else {    if (value instanceof String) {      return base64().decode((String)value);    }    return value;  }}  }
class C{  public static JSONObject JsonReadOnly(String url,String bssid,HeaderPair... headers){  return JsonReadOnly(url,bssid,SERIAL_NORMAL_TASK,headers);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  boolean isEntranceTransitionEnabled(){  return mEntranceTransitionEnabled;}  }
class C{  public static RegressionDataSet readR(int numeric_target_column,Path path,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  BufferedReader br=Files.newBufferedReader(path,Charset.defaultCharset());  RegressionDataSet ret=readR(numeric_target_column,br,delimiter,lines_to_skip,comment,cat_cols);  br.close();  return ret;}  }
class C{  @SuppressWarnings("static-access") public boolean isCustomized(){  if (m_customizationLevel == null) {    getElementID();    m_customizationLevel=new Integer(s_parameters.CUSTOMNONE);    if (m_parent.isCustomPrefix(m_name)) {      m_customizationLevel=new Integer(s_parameters.CUSTOMPREFIXED);    } else {      if (m_parent.isObjectExists("AD_COLUMN",m_parent.getTables()) && m_parent.isObjectExists("AD_TABLE",m_parent.getTables())) {        String sql=s_dbEngine.sqlAD_getTableColumnEntityType(m_parent.getVendor(),m_parent.getCatalog(),m_parent.getSchema(),m_table,m_name);        Statement stmt=m_parent.setStatement();        ResultSet rs=m_parent.executeQuery(stmt,sql);        if (m_parent.getResultSetNext(rs)) {          String s=m_parent.getResultSetString(rs,"ENTITY_TYPE");          if (m_parent.isCustomEntityType(s))           m_customizationLevel=new Integer(s_parameters.CUSTOMMARKED);        }        m_parent.releaseResultSet(rs);        m_parent.releaseStatement(stmt);      }    }  }  if (m_customizationLevel.intValue() > s_parameters.CUSTOMNONE)   return true; else   return false;}  }
class C{  public double[][] generateCovariantGaussians(int length,int dimensions,double[] means,double[][] componentDependencies){  double[][] data=new double[length][dimensions];  for (int t=0; t < length; t++) {    double[] x=generateNormalData(dimensions,0,1);    for (int d=0; d < dimensions; d++) {      data[t][d]=means[d];      for (int d2=0; d2 < dimensions; d2++) {        data[t][d]+=componentDependencies[d][d2] * x[d2];      }    }  }  return data;}  }
class C{  public void ensureAtLeast(double space,RectangleEdge edge){  if (edge == RectangleEdge.TOP) {    if (this.top < space) {      this.top=space;    }  } else   if (edge == RectangleEdge.BOTTOM) {    if (this.bottom < space) {      this.bottom=space;    }  } else   if (edge == RectangleEdge.LEFT) {    if (this.left < space) {      this.left=space;    }  } else   if (edge == RectangleEdge.RIGHT) {    if (this.right < space) {      this.right=space;    }  } else {    throw new IllegalStateException("AxisSpace.ensureAtLeast(): unrecognised AxisLocation.");  }}  }
class C{  private void noteDuplicate(int pos1,int pos2){  Name n=names[pos1];  assert (n == names[pos2]);  assert (originalNames[pos1] != null);  assert (originalNames[pos2] == null || originalNames[pos2] == n);  if (dups == null) {    dups=new ArrayList<>();  }  dups.add(n);}  }
class C{  private void validateJdbcConnection(JdbcConnection jdbcConnection){  Assert.notNull(jdbcConnection,"JDBC connection is required");  validateUrl(jdbcConnection.getUrl());  Assert.notNull(jdbcConnection.getUsername(),"JDBC connection user name is required");  Assert.notNull(jdbcConnection.getPassword(),"JDBC connection password is required");  Assert.notNull(jdbcConnection.getDatabaseType(),"JDBC connection database type is required");}  }
class C{  @Override public boolean isEnableForMessageContainer(MessageContainer<?> invoker){  return true;}  }
class C{  private Session accept(ProcessListener pl,IProgress waitReporter) throws IOException {  int timeout=getPreference(PREF_ACCEPT_TIMEOUT);  int totalTimeout=timeout;  int iterateOn=100;  PlayerSession session=null;  try {    m_serverSocket.setSoTimeout(iterateOn);    Socket s=null;    while (s == null && !airAppTerminated(pl)) {      try {        s=m_serverSocket.accept();      } catch (      IOException ste) {        timeout-=iterateOn;        if (timeout < 0 || m_serverSocket == null || m_serverSocket.isClosed())         throw ste;      }      if (waitReporter != null)       waitReporter.setProgress(totalTimeout - timeout,totalTimeout);    }    if (s == null && airAppTerminated(pl)) {      throw pl.createLaunchFailureException();    }    session=PlayerSession.createFromSocketWithOptions(s,m_debuggerCallbacks,this);    session.setPreferences(m_prefs);  } catch (  NullPointerException npe) {    throw new BindException(getLocalizationManager().getLocalizedTextString("serverSocketNotListening"));  }  return session;}  }
class C{  public void addPatchResource(Resource resource){  resources.add(resource);}  }
class C{  public T caseStereoTypeTarget(StereoTypeTarget object){  return null;}  }
class C{  private void step3(){  for (int i=2; i <= DFSCounter; i++) {    BasicBlock block=vertex[i];    if (getDom(block) != vertex[getSemi(block)]) {      LTDominatorInfo.getInfo(block,ir).setDominator(getDom(getDom(block)));    }  }}  }
class C{  public Builder clearCenterCrop(){  centerCrop=false;  return this;}  }
class C{  public FastShortBuffer append(short element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  public void releaseService(BeanContextChild child,Object requestor,Object service){  if (child == null)   throw new NullPointerException("child");  if (requestor == null)   throw new NullPointerException("requestor");  if (service == null)   throw new NullPointerException("service");  BCSSChild bcsc;synchronized (BeanContext.globalHierarchyLock) {synchronized (children) {      bcsc=(BCSSChild)children.get(child);    }    if (bcsc != null)     bcsc.releaseService(requestor,service); else     throw new IllegalArgumentException("child actual is not a child of this BeanContext");  }}  }
class C{  public LvmHelper(ProcessHelper processHelper){  this.processHelper=processHelper;}  }
class C{  public RegionNotFoundException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public PrincipalId addSolutionUser(String tenantName,String userName,SolutionDetail detail) throws Exception {  return getService().addSolutionUser(tenantName,userName,detail,this.getServiceContext());}  }
class C{  public void broadcastShieldFrame(ShieldFrame frame,boolean waitIfInACallback,OneSheeldDevice exceptionArray[]){  if (frame == null)   throw new NullPointerException("The passed frame is null, have you checked its validity?");  Log.i("Manager: Broadcasting frame to all connected devices.");  ArrayList<OneSheeldDevice> tempConnectedDevices;synchronized (connectedDevicesLock) {    tempConnectedDevices=new ArrayList<>(connectedDevices.values());  }  for (  OneSheeldDevice device : tempConnectedDevices) {    boolean foundInExceptArray=false;    if (exceptionArray != null)     for (    OneSheeldDevice exceptDevice : exceptionArray)     if (device.getAddress().equals(exceptDevice.getAddress())) {      foundInExceptArray=true;      break;    }    if (!foundInExceptArray)     device.sendShieldFrame(frame,waitIfInACallback);  }}  }
class C{  @Override public String toString(){  return "AbstractUser [username=" + getUsername() + ", roles="+ roles+ "]";}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      arcDataFile=imageFiles[i];      if (!((new File(arcDataFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        break;      }      arcHeaderFile=arcDataFile.replace(".flt",".hdr");      if (!arcHeaderFile.contains(".hdr")) {        arcHeaderFile=arcDataFile.replace(".FLT",".hdr");      }      whiteboxHeaderFile=arcHeaderFile.replace(".hdr",".dep");      whiteboxDataFile=arcHeaderFile.replace(".hdr",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      File fromfile=new File(arcDataFile);      File tofile=new File(whiteboxDataFile);      inStream=new FileInputStream(fromfile);      outStream=new FileOutputStream(tofile);      byte[] buffer=new byte[1024];      int length;      while ((length=inStream.read(buffer)) > 0) {        outStream.write(buffer,0,length);      }      inStream.close();      outStream.close();      boolean success=createHeaderFile(arcHeaderFile,whiteboxHeaderFile);      if (!success) {        showFeedback("Arc header file was not read properly. " + "Tool failed to import");        return;      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public double weightedPrecision(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double precisionTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=precision(i);    precisionTotal+=(temp * classCounts[i]);  }  return precisionTotal / classCountSum;}  }
class C{  public void callGCTraceRemoved(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  for (  GCTraceSetListener listener : listeners()) {    listener.gcTraceRemoved(gcTrace);  }}  }
class C{  public static BinaryCode load(BinaryMember bf,BinaryConstantPool cpool,Environment env){  byte code[]=bf.getAttribute(idCode);  return (code != null) ? new BinaryCode(code,cpool,env) : null;}  }
class C{  public School subject(String subject){  this.subject=subject;  return this;}  }
class C{  static public long unpackLong(DataInput in) throws IOException {  long ret=0;  byte v;  do {    v=in.readByte();    ret=(ret << 7) | (v & 0x7F);  } while ((v & 0x80) == 0);  return ret;}  }
class C{  private static void updateFolderAudit(String sessionID,String entidad,Map changedFields,AuthenticationUser user,AxSf axsfOld,Integer bookID,ScrOfic scrofic,Session session) throws Exception {  Date currentDate=new Date(DBEntityDAOFactory.getCurrentDBEntityDAO().getDBServerDate(entidad).getTime());  if (!changedFields.isEmpty()) {    Integer size=new Integer(BBDDUtils.SCR_MODIFREG_USR_FIELD_LENGTH);    String aux=user.getName();    if (aux.length() > size.intValue()) {      aux=aux.substring(0,size.intValue());      user.setName(aux);    }    for (Iterator it=changedFields.keySet().iterator(); it.hasNext(); ) {      Integer fldidToChange=(Integer)it.next();      Object[] value=(Object[])changedFields.get(fldidToChange);      Object oldValue=value[0];      Object newValue=value[1];      if (isAuditFieldModif(oldValue,newValue)) {        Integer updateAuditId=new Integer(DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForScrModifreg(user.getId(),entidad));        String userName=null;        if (isDataBaseCaseSensitive(entidad)) {          userName=user.getName().toUpperCase();        } else {          userName=user.getName();        }        String numReg=axsfOld.getAttributeValueAsString("fld1");        ISicresSaveQueries.saveScrModifreg(session,updateAuditId,userName,currentDate,numReg,fldidToChange.intValue(),bookID.intValue(),scrofic.getId().intValue(),0);        try {          DBEntityDAOFactory.getCurrentDBEntityDAO().insertAudit(updateAuditId,oldValue,newValue,entidad);        } catch (        SQLException e) {          log.error("Impossible to audit the update for the session [" + sessionID + "] and bookID ["+ bookID+ "]",e);          throw new BookException(BookException.ERROR_AUDIT_CHANGES);        }      }    }  }}  }
class C{  public static void substituteSystemProperties(Node node){  substituteProperties(node,null);}  }
class C{  public static GeoTimeSerie singleExponentialSmoothing(GeoTimeSerie gts,double alpha) throws WarpScriptException {  if (alpha <= 0.0D || alpha >= 1.0D) {    throw new WarpScriptException("The smoothing factor must be in 0 < alpha < 1.");  }  if (TYPE.LONG != gts.type && TYPE.DOUBLE != gts.type) {    throw new WarpScriptException("Can only perform exponential smoothing on numeric geo time series.");  }  if (gts.values < 2) {    throw new WarpScriptException("Can only perform exponential smoothing on geo time series containing at least two values.");  }  GeoTimeSerie s=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  s.setName(gts.getName());  s.setLabels(gts.getLabels());  GTSHelper.sort(gts);  double smoothed=((Number)GTSHelper.valueAtIndex(gts,0)).doubleValue();  double oneminusalpha=1.0D - alpha;  GTSHelper.setValue(s,gts.ticks[0],null != gts.locations ? gts.locations[0] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[0] : GeoTimeSerie.NO_ELEVATION,smoothed,false);  for (int i=1; i < gts.values; i++) {    smoothed=alpha * ((Number)GTSHelper.valueAtIndex(gts,i)).doubleValue() + oneminusalpha * smoothed;    GTSHelper.setValue(s,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,smoothed,false);  }  return s;}  }
class C{  @Override public void applyTo(ContactResource.Builder builder){  super.applyTo(builder);  Map<Type,PostalInfo> postalInfosAsMap=getPostalInfosAsMap();  if (postalInfosAsMap.containsKey(Type.INTERNATIONALIZED)) {    builder.overlayInternationalizedPostalInfo(postalInfosAsMap.get(Type.INTERNATIONALIZED));    if (postalInfosAsMap.size() == 1) {      builder.setLocalizedPostalInfo(null);    }  }  if (postalInfosAsMap.containsKey(Type.LOCALIZED)) {    builder.overlayLocalizedPostalInfo(postalInfosAsMap.get(Type.LOCALIZED));    if (postalInfosAsMap.size() == 1) {      builder.setInternationalizedPostalInfo(null);    }  }}  }
class C{  public RegisterSpecList withExpandedRegisters(int base,boolean duplicateFirst,BitSet compatRegs){  int sz=size();  if (sz == 0) {    return this;  }  RegisterSpecList result=new RegisterSpecList(sz);  for (int i=0; i < sz; i++) {    RegisterSpec one=(RegisterSpec)get0(i);    boolean replace=(compatRegs == null) ? true : !compatRegs.get(i);    if (replace) {      result.set0(i,one.withReg(base));      if (!duplicateFirst) {        base+=one.getCategory();      }    } else {      result.set0(i,one);    }    if (duplicateFirst) {      duplicateFirst=false;    }  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  private MD5Legacy(String input){  this(input.getBytes());}  }
class C{  public boolean isNoSorting(){  return getChildElementNames().length == 0;}  }
class C{  public void loadHeadersFromResource(int resid,List<Header> target){  XmlResourceParser parser=null;  try {    parser=getResources().getXml(resid);    AttributeSet attrs=Xml.asAttributeSet(parser);    int type;    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {    }    String nodeName=parser.getName();    if (!"preference-headers".equals(nodeName)) {      throw new RuntimeException("XML document must start with <preference-headers> tag; found" + nodeName + " at "+ parser.getPositionDescription());    }    Bundle curBundle=null;    final int outerDepth=parser.getDepth();    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {        continue;      }      nodeName=parser.getName();      if ("header".equals(nodeName)) {        Header header=new Header();        TypedArray sa=getResources().obtainAttributes(attrs,com.android.internal.R.styleable.PreferenceHeader);        header.id=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED);        TypedValue tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_title);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.titleRes=tv.resourceId;          } else {            header.title=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_summary);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.summaryRes=tv.resourceId;          } else {            header.summary=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbTitle);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.breadCrumbTitleRes=tv.resourceId;          } else {            header.breadCrumbTitle=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbShortTitle);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.breadCrumbShortTitleRes=tv.resourceId;          } else {            header.breadCrumbShortTitle=tv.string;          }        }        header.iconRes=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_icon,0);        header.fragment=sa.getString(com.android.internal.R.styleable.PreferenceHeader_fragment);        sa.recycle();        if (curBundle == null) {          curBundle=new Bundle();        }        final int innerDepth=parser.getDepth();        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth)) {          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {            continue;          }          String innerNodeName=parser.getName();          if (innerNodeName.equals("extra")) {            getResources().parseBundleExtra("extra",attrs,curBundle);            XmlUtils.skipCurrentTag(parser);          } else           if (innerNodeName.equals("intent")) {            header.intent=Intent.parseIntent(getResources(),parser,attrs);          } else {            XmlUtils.skipCurrentTag(parser);          }        }        if (curBundle.size() > 0) {          header.fragmentArguments=curBundle;          curBundle=null;        }        target.add(header);      } else {        XmlUtils.skipCurrentTag(parser);      }    }  } catch (  XmlPullParserException e) {    throw new RuntimeException("Error parsing headers",e);  }catch (  IOException e) {    throw new RuntimeException("Error parsing headers",e);  } finally {    if (parser != null)     parser.close();  }}  }
class C{  public void warning(SAXParseException spe) throws SAXException {  out.println("Warning: " + getParseExceptionInfo(spe));}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  Stack<TreeNode<E>> stack=new Stack<>();  stack.push(root);  while (!stack.empty()) {    TreeNode<E> node=stack.pop();    System.out.print(node.element + " ");    if (node.right != null) {      stack.push(node.right);    }    if (node.left != null) {      stack.push(node.left);    }  }}  }
class C{  static int commandArguments(char type){switch (type) {case CMD_PLACEHOLDER:case 'z':case 'Z':    return 0;case 'm':case 'M':case 'l':case 'L':case 't':case 'T':  return 2;case 'h':case 'H':case 'v':case 'V':return 1;case 'c':case 'C':return 6;case 's':case 'S':case 'q':case 'Q':return 4;case 'a':case 'A':return 7;}return -1;}  }
class C{  public static void handleFooterView(DrawerBuilder drawer,View.OnClickListener onClickListener){  Context ctx=drawer.mSliderLayout.getContext();  if (drawer.mStickyDrawerItems != null && drawer.mStickyDrawerItems.size() > 0) {    drawer.mStickyFooterView=DrawerUtils.buildStickyDrawerItemFooter(ctx,drawer,onClickListener);  }  if (drawer.mStickyFooterView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,1);    drawer.mStickyFooterView.setId(R.id.material_drawer_sticky_footer);    drawer.mSliderLayout.addView(drawer.mStickyFooterView,layoutParams);    if ((drawer.mTranslucentNavigationBar || drawer.mFullscreen) && Build.VERSION.SDK_INT >= 19) {      drawer.mStickyFooterView.setPadding(0,0,0,UIUtils.getNavigationBarHeight(ctx));    }    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    if (drawer.mStickyFooterShadow) {      drawer.mStickyFooterShadowView=new View(ctx);      drawer.mStickyFooterShadowView.setBackgroundResource(R.drawable.material_drawer_shadow_top);      drawer.mSliderLayout.addView(drawer.mStickyFooterShadowView,RelativeLayout.LayoutParams.MATCH_PARENT,(int)UIUtils.convertDpToPixel(4,ctx));      RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)drawer.mStickyFooterShadowView.getLayoutParams();      lps.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);      drawer.mStickyFooterShadowView.setLayoutParams(lps);    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),drawer.mRecyclerView.getPaddingTop(),drawer.mRecyclerView.getPaddingRight(),ctx.getResources().getDimensionPixelSize(R.dimen.material_drawer_padding));  }  if (drawer.mFooterView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a footerView without a recyclerView");    }    if (drawer.mFooterDivider) {      drawer.getAdapter().addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM));    } else {      drawer.getAdapter().addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE));    }  }}  }
class C{  public boolean isClosed(){  makeActive();  return database == null || database.isClosed();}  }
class C{  @Nullable public ClusterNode mapPartitionToNode(@Nullable String cacheName,int partId,AffinityTopologyVersion topVer) throws IgniteCheckedException {  AffinityInfo affInfo=affinityCache(cacheName,topVer);  return affInfo != null ? F.first(affInfo.assignment().get(partId)) : null;}  }
class C{  private void proceedSkipTestUsingIntBufferingType(CipherInputStream ciIn2,int blockNum) throws IOException {  int index=blockNum * SAVE;  int totalRead=0;  for (int j=0; j < SAVE; j++, index++) {    int buffer0=ciIn2.read();    if (buffer0 != -1) {      outputText[index]=(byte)buffer0;      totalRead++;    } else {      break;    }  }  if (totalRead != SAVE) {    throw new RuntimeException("Read bytes number " + totalRead + " does not equal to given number "+ SAVE);  }}  }
class C{  private int cleanUp(){  String killTask=CommandBuilder.stopTask(fileName);  int exitCode=ProcessUtils.executeCommand(killTask,null);  if (exitCode != 0) {    exitCode=linuxKill(getDetailsFile());  }  return exitCode;}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private CElementSearcher(){}  }
class C{  public Swagger2MarkupConfigBuilder withTagOrdering(Comparator<String> tagOrdering){  Validate.notNull(tagOrdering,"%s must not be null","tagOrdering");  config.tagOrderBy=OrderBy.CUSTOM;  config.tagOrdering=tagOrdering;  return this;}  }
class C{  public boolean deleteContact(String id){  return impl.deleteContact(id);}  }
class C{  public Task<FileSnapshotRestRep> share(URI id,FileSystemShareParam input){  return postTask(input,getSharesUrl(),id);}  }
class C{  private synchronized void notifyPanListeners(){  for (  PanListener listener : mPanListeners) {    listener.panApplied();  }}  }
class C{  public int numNonZero(){  return m_numNonZero;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean equals(int i){  return false;}  }
class C{  public boolean isStopCodon(int codonState){  return (getAminoAcidState(codonState) == AminoAcids.STOP_STATE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public void install(Scriptable scope){  ScriptableObject.putProperty(scope,"require",this);}  }
class C{  @LargeTest public void testCameraPairwiseScenario11() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.MAX,WhiteBalance.DAYLIGHT,SceneMode.SUNSET,PictureSize.LARGE,Geotagging.ON);}  }
class C{  public void background(float x,float y,float z,float a){  g.background(x,y,z,a);}  }
class C{  public static boolean isSameType(final Object array1,final Object array2){  if (array1 == null || array2 == null) {    throw new IllegalArgumentException("The Array must not be null");  }  return array1.getClass().getName().equals(array2.getClass().getName());}  }
class C{  static int hiBitPos(long num){  return 63 - Long.numberOfLeadingZeros(num);}  }
class C{  public void testAddSecurityConstraint() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addSecurityConstraint(webXml,"wrn","/url",Collections.EMPTY_LIST);  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url"));}  }
class C{  public MultiplexManager(DataStore... dataStores){  this.dataStores=Arrays.asList(dataStores);}  }
class C{  public DocumentValueSourceDictionary(IndexReader reader,String field,ValueSource weightsValueSource,String payload){  super(reader,field,null,payload);  this.weightsValueSource=weightsValueSource;}  }
class C{  private SaveAction(){  super("Save");}  }
class C{  public static Asset createAssetFromBitmap(Bitmap bitmap){  if (bitmap != null) {    final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.PNG,100,byteStream);    return Asset.createFromBytes(byteStream.toByteArray());  }  return null;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  public boolean forceNewTranslog(){  return forceNewTranslog;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  IpInfoDao.dropTable(db,ifExists);  PlaceDao.dropTable(db,ifExists);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.975 -0400",hash_original_method="DEF389DDBAFE974EA51118829F85145D",hash_generated_method="AEA5D6CD76934A39A91E97F49B3ACAD2") public FileAlterationObserver(File directory){  this(directory,(FileFilter)null);}  }
class C{  public EchoRequestMessage(EchoRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public boolean validUtf8B(int[] data){  int i=0;  while (i < data.length) {    int b=getBytes(data[i]);    if (b == 0) {      return false;    }    for (int j=i + 1; j < i + b; j++) {      if (j >= data.length || 128 > data[j] || 192 < data[j]) {        return false;      }    }    i+=b;  }  return true;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  @SuppressWarnings("WeakerAccess") public SwingTerminal(TerminalScrollController scrollController){  this(TerminalEmulatorDeviceConfiguration.getDefault(),SwingTerminalFontConfiguration.getDefault(),TerminalEmulatorColorConfiguration.getDefault(),scrollController);}  }
class C{  public static String buildSelectorFromClass(String classValue){  StringBuilder strb=new StringBuilder();  strb.append(CLASS_SELECTOR_PREFIX);  strb.append(classValue);  return strb.toString();}  }
class C{  public static <A>float[] toPrimitiveFloatArray(A array,NumberArrayAdapter<?,? super A> adapter){  if (adapter == FLOATARRAYADAPTER) {    return ((float[])array).clone();  }  float[] ret=new float[adapter.size(array)];  for (int i=0; i < ret.length; i++) {    ret[i]=adapter.getFloat(array,i);  }  return ret;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addDstore(int n){  if (n < 4)   addOpcode(71 + n); else   if (n < 0x100) {    addOpcode(DSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(DSTORE);    addIndex(n);  }}  }
class C{  @SuppressWarnings("unchecked") public static AbstractMetric<IString,String> newMetric(String evalMetric,List<List<Sequence<IString>>> references){  AbstractMetric<IString,String> emetric=null;  if (evalMetric.equals("smoothbleu")) {    emetric=new BLEUMetric<>(references,true);  } else   if (evalMetric.equals("bleu:3-2ter")) {    int BLEUOrder=3;    emetric=new LinearCombinationMetric<>(new double[]{1.0,2.0},new BLEUMetric<>(references,BLEUOrder),new TERpMetric<>(references));  } else   if (evalMetric.equals("bleu:3-ter")) {    int BLEUOrder=3;    emetric=new LinearCombinationMetric<>(new double[]{1.0,1.0},new BLEUMetric<>(references,BLEUOrder),new TERpMetric<>(references));  } else   if (evalMetric.equals("ter")) {    emetric=new TERpMetric<>(references);  } else   if (evalMetric.equals("terpa")) {    emetric=new TERpMetric<>(references,false,true);  } else   if (evalMetric.equals("bleu")) {    emetric=new BLEUMetric<>(references);  } else   if (evalMetric.equals("nist")) {    emetric=new NISTMetric<>(references);  } else   if (evalMetric.equals("bleu-ter")) {    emetric=new LinearCombinationMetric<>(new double[]{1.0,1.0},new BLEUMetric<>(references),new TERpMetric<>(references));  } else   if (evalMetric.equals("2bleu-ter")) {    emetric=new LinearCombinationMetric<>(new double[]{2.0,1.0},new BLEUMetric<>(references),new TERpMetric<>(references));  } else   if (evalMetric.equals("bleu-2ter")) {    emetric=new LinearCombinationMetric<>(new double[]{1.0,2.0},new BLEUMetric<>(references),new TERpMetric<>(references));  } else   if (evalMetric.equals("bleu-2terpa")) {    emetric=new LinearCombinationMetric<>(new double[]{1.0,2.0},new BLEUMetric<>(references),new TERpMetric<>(references,false,true));  } else   if (evalMetric.equals("bleu-ter/2")) {    TERpMetric<IString,String> termetric=new TERpMetric<>(references);    emetric=new LinearCombinationMetric<>(new double[]{0.5,0.5},termetric,new BLEUMetric<>(references));  } else   if (evalMetric.equals("wer")) {    emetric=new WERMetric<>(references);  } else   if (evalMetric.equals("per")) {    emetric=new PERMetric<>(references);  } else   if (evalMetric.equals("numPredictedWords")) {    emetric=new NumPredictedWordsMetric<>(references);  } else   if (evalMetric.equals("nextPredictedWord")) {    emetric=new NextPredictedWordMetric<>(references);  } else   if (evalMetric.equals("maxPredictedWords")) {    emetric=new MaxPredictedWordsMetric<>(references);  } else   if (evalMetric.equals("bleu-prefix")) {    emetric=new BLEUAfterPrefixMetric<String>(references);  } else   if (evalMetric.equals("bleup-nextw/2")) {    emetric=new LinearCombinationMetric<>(new double[]{1.0,1.0},new BLEUAfterPrefixMetric<String>(references),new NextPredictedWordMetric<>(references));  } else   if (evalMetric.equals("100bleup-nextw/2")) {    emetric=new LinearCombinationMetric<>(new double[]{1.0,0.01},new BLEUAfterPrefixMetric<String>(references),new NextPredictedWordMetric<>(references));  } else   if (evalMetric.equals("repetitionRate")) {    emetric=new RepetitionRate<>();  } else {    throw new UnsupportedOperationException("Unrecognized metric: " + evalMetric);  }  return emetric;}  }
class C{  public static double[] pairwiseCoupling(double[][] n,double[][] r){  double[] p=new double[r.length];  for (int i=0; i < p.length; i++) {    p[i]=1.0 / (double)p.length;  }  double[][] u=new double[r.length][r.length];  for (int i=0; i < r.length; i++) {    for (int j=i + 1; j < r.length; j++) {      u[i][j]=0.5;    }  }  double[] firstSum=new double[p.length];  for (int i=0; i < p.length; i++) {    for (int j=i + 1; j < p.length; j++) {      firstSum[i]+=n[i][j] * r[i][j];      firstSum[j]+=n[i][j] * (1 - r[i][j]);    }  }  boolean changed;  do {    changed=false;    double[] secondSum=new double[p.length];    for (int i=0; i < p.length; i++) {      for (int j=i + 1; j < p.length; j++) {        secondSum[i]+=n[i][j] * u[i][j];        secondSum[j]+=n[i][j] * (1 - u[i][j]);      }    }    for (int i=0; i < p.length; i++) {      if ((firstSum[i] == 0) || (secondSum[i] == 0)) {        if (p[i] > 0) {          changed=true;        }        p[i]=0;      } else {        double factor=firstSum[i] / secondSum[i];        double pOld=p[i];        p[i]*=factor;        if (Math.abs(pOld - p[i]) > 1.0e-3) {          changed=true;        }      }    }    Utils.normalize(p);    for (int i=0; i < r.length; i++) {      for (int j=i + 1; j < r.length; j++) {        u[i][j]=p[i] / (p[i] + p[j]);      }    }  } while (changed);  return p;}  }
class C{  public XBoolean(boolean b){  super();  m_val=b;}  }
class C{  public void close() throws IOException {  TCPTransport.tcpLog.log(Log.BRIEF,"close connection");  if (socket != null)   socket.close(); else {    in.close();    out.close();  }}  }
class C{  public static boolean isHeader(Header hdr){  boolean found=hdr.getBooleanValue(SIMPLE);  if (!found) {    String xtension=hdr.getStringValue(XTENSION);    xtension=xtension == null ? "" : xtension.trim();    if (XTENSION_IMAGE.equals(xtension) || "IUEIMAGE".equals(xtension)) {      found=true;    }  }  if (!found) {    return false;  }  return !hdr.getBooleanValue(GROUPS);}  }
class C{  public void close(){  sendMessage(new CloseWebsocketMessage());}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  JSeparator separator=(JSeparator)context.getComponent();  context.getPainter().paintSeparatorForeground(context,g,0,0,separator.getWidth(),separator.getHeight(),separator.getOrientation());}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  public static <T>LazySetX<T> fromIterable(Collector<T,?,Set<T>> collector,Iterable<T> it){  if (it instanceof LazySetX)   return (LazySetX<T>)it;  if (it instanceof Set)   return new LazySetX<T>((Set<T>)it,collector);  return new LazySetX<T>(Flux.fromIterable(it),collector);}  }
class C{  public void onMouseReleased(MapMouseEvent ev){}  }
class C{  public void follow(int followerId,int followeeId){  if (followMap.get(followerId) == null) {    Map<Integer,Integer> map=new HashMap<Integer,Integer>();    map.put(followerId,1);    followMap.put(followerId,map);  }  followMap.get(followerId).put(followeeId,1);}  }
class C{  public final void mulTransposeLeft(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20;    this.m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21;    this.m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20;    this.m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21;    this.m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20;    this.m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21;    this.m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20;    m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21;    m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20;    m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21;    m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20;    m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21;    m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  private void restoreFloatingPointState(Instruction inst){  if (SSE2_FULL) {    GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();    for (int i=0; i < 8; i++) {      inst.insertBefore(MIR_Move.create(IA32_MOVQ,new RegisterOperand(phys.getFPR(i),TypeReference.Double),new StackLocationOperand(true,-fsaveLocation + (i * BYTES_IN_DOUBLE),BYTES_IN_DOUBLE)));    }  } else {    Operand M=new StackLocationOperand(true,-fsaveLocation,4);    inst.insertBefore(MIR_FSave.create(IA32_FRSTOR,M));  }}  }
class C{  public static EncodingException createEncodingException(final ErrorKeys errorId,final String message){  return new EncodingException(errorId.toString() + ":\r\n" + message);}  }
class C{  public void clear(){  objectVectors.clear();}  }
class C{  @Override public boolean supportsIncrementalUpdate(){  return !m_IncrementalDisabled;}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  public Integer loadVolumesByRepValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadVolumesByRepValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  _info=FssMdoUtil.decodeVolInfo(statement.getLongText(index++));  _path=_info.m_path;  _maxSize=_info.m_maxSize;  _repType=_info.m_repType;  _temp=statement.getLongInteger(index++);  _actSize=statement.getShortText(index++);  _numFiles=statement.getLongInteger(index++);  _state=statement.getLongInteger(index++);  _remarks=statement.getShortText(index++);  _creatorId=statement.getLongInteger(index++);  _creationDate=statement.getDateTime(index++);  _updaterId=statement.getLongInteger(index++);  _updateDate=statement.getDateTime(index++);  return new Integer(index);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.endElement(uri,localName,qName);  }}  }
class C{  public void showAndDismiss(Duration dismissDelay){  if (!isTrayShowing()) {    stage.show();    onShown();    animation.playSequential(dismissDelay);  } else   dismiss();  onDismissed();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'BabyModel' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  protected String stripHtmlTags(String input){  if (input == null)   return null;  StringBuilder output=new StringBuilder();  boolean inTag=false;  boolean inWhitespace=false;  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (Character.isWhitespace(c)) {      inWhitespace=true;      continue;    }    if (!inTag && inWhitespace && output.length() > 0) {      output.append(' ');    }    inWhitespace=false;    if (c == '<') {      inTag=true;    } else     if (c == '>') {      inTag=false;    } else     if (!inTag) {      output.append(c);    }  }  return output.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double alpha;  double globalMean;  double predefinedStdDev;  double yij=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  alpha=Double.parseDouble(args[4]);  if (alpha < 0 || alpha > 1.0) {    showFeedback("The alpha parameter should be within the range of \n0.0 and 1.0. Please reset and try again.");    return;  }  globalMean=Double.parseDouble(args[5]);  predefinedStdDev=Double.parseDouble(args[6]);  filterRounded=Boolean.parseBoolean(args[7]);  reflectAtBorders=Boolean.parseBoolean(args[8]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);              if (alpha >= 0 && alpha <= 1) {                yij=(alpha * globalMean) + ((1 - alpha) * average) + (z - average) * (predefinedStdDev / (stdDev + 1));                outputFile.setValue(row,col,yij);              }            } else {              outputFile.setValue(row,col,noData);            }          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void update(){  StendhalRPZone zone;  zone=getZone();  if (zone != null) {    zone.removeMovementListener(this);  }  super.update();  if (zone != null) {    zone.addMovementListener(this);  }}  }
class C{  private FileCopyUtils(){}  }
class C{  public AccountHeaderBuilder withCurrentProfileHiddenInList(boolean currentProfileHiddenInList){  mCurrentHiddenInList=currentProfileHiddenInList;  return this;}  }
class C{  public static double area2(Point2D a,Point2D b,Point2D c){  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);}  }
class C{  public void recoverRepoInANewNode() throws BucketNotFoundException, IOException {  LuceneServiceImpl service=(LuceneServiceImpl)LuceneServiceProvider.get(cache);  service.createIndex("index1","/userRegion",indexedFields);  PartitionAttributes<String,String> attrs=new PartitionAttributesFactory().setTotalNumBuckets(1).create();  RegionFactory<String,String> regionfactory=cache.createRegionFactory(RegionShortcut.PARTITION);  regionfactory.setPartitionAttributes(attrs);  PartitionedRegion userRegion=(PartitionedRegion)regionfactory.create("userRegion");  LuceneIndexForPartitionedRegion index=(LuceneIndexForPartitionedRegion)service.getIndex("index1","/userRegion");  userRegion.put("rebalance","test");  index.waitUntilFlushed(30000);  RepositoryManager manager=new PartitionedRepositoryManager((LuceneIndexImpl)index,mapper);  IndexRepository repo=manager.getRepository(userRegion,0,null);  assertNotNull(repo);  repo.create("rebalance","test");  repo.commit();  userRegion.close();  userRegion=(PartitionedRegion)regionfactory.create("userRegion");  userRegion.put("rebalance","test");  manager=new PartitionedRepositoryManager((LuceneIndexImpl)index,mapper);  IndexRepository newRepo=manager.getRepository(userRegion,0,null);  Assert.assertNotEquals(newRepo,repo);}  }
class C{  public Level nextLevel(){  return this.parent.level(this.levelNumber + 1);}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.711 -0400",hash_original_method="9372A1D570FF0E071E2A73F0471280C8",hash_generated_method="73E7D5E07B73B540EF5D01C579CF6548") public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  public static void serializeMeterReply(List<OFMeterStatsReply> meterReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterStatsReply meterReply=meterReplies.get(0);  jGen.writeStringField("version",meterReply.getVersion().toString());  jGen.writeFieldName("meter");  jGen.writeStartArray();  for (  OFMeterStats entry : meterReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("meterId",entry.getMeterId());    jGen.writeNumberField("flowCount",entry.getFlowCount());    jGen.writeNumberField("packetInCount",entry.getPacketInCount().getValue());    jGen.writeNumberField("byteInCount",entry.getByteInCount().getValue());    jGen.writeFieldName("meterBandStats");    jGen.writeStartArray();    for (    OFMeterBandStats bandStats : entry.getBandStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetBandCount",bandStats.getPacketBandCount().getValue());      jGen.writeNumberField("byteBandCount",bandStats.getByteBandCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeNumberField("durationSec",entry.getDurationSec());    jGen.writeNumberField("durationNsec",entry.getDurationNsec());    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  public void BareMainViewsExists() throws NoMatchingViewException {  dumpUi(R.id.btnEffect,R.id.tabBrightness,R.id.tabGrid,R.id.tabSetting,R.id.tabSuffle,R.id.tabTime,R.id.btn1,R.id.btn2,R.id.btn3,R.id.btn4,R.id.btn5,R.id.seekBar,R.id.seekBar2,R.id.seekBar3);  TestHelper.checkUiDoNotExist(listUi);}  }
class C{  public boolean isSameLine(){  return m_vo.IsSameLine;}  }
class C{  private JarClassLoader deployWithoutRegistering(final String jarName,final byte[] jarBytes) throws IOException {  JarClassLoader oldJarClassLoader=findJarClassLoader(jarName);  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("Deploying {}: {}",jarName,(oldJarClassLoader == null ? ": not yet deployed" : ": already deployed as " + oldJarClassLoader.getFileCanonicalPath()));  }  if (oldJarClassLoader != null && oldJarClassLoader.hasSameContent(jarBytes)) {    return null;  }  JarClassLoader newJarClassLoader=null;  do {    File[] oldJarFiles=findSortedOldVersionsOfJar(jarName);    try {      if (oldJarFiles.length == 0) {        if (isDebugEnabled) {          logger.debug("There were no pre-existing versions for JAR: {}",jarName);        }        File nextVersionJarFile=getNextVersionJarFile(jarName);        if (writeJarBytesToFile(nextVersionJarFile,jarBytes)) {          newJarClassLoader=new JarClassLoader(nextVersionJarFile,jarName,jarBytes);          if (isDebugEnabled) {            logger.debug("Successfully created initial JarClassLoader at file: {}",nextVersionJarFile.getAbsolutePath());          }        } else {          if (isDebugEnabled) {            logger.debug("Unable to write contents for first version of JAR to file: {}",nextVersionJarFile.getAbsolutePath());          }        }      } else {        if (doesFileMatchBytes(oldJarFiles[0],jarBytes)) {          if (isDebugEnabled) {            logger.debug("A version on disk was an exact match for the JAR being deployed: {}",oldJarFiles[0].getAbsolutePath());          }          newJarClassLoader=new JarClassLoader(oldJarFiles[0],jarName,jarBytes);          if (isDebugEnabled) {            logger.debug("Successfully reused JAR to create JarClassLoader from file: {}",oldJarFiles[0].getAbsolutePath());          }        } else {          if (isDebugEnabled) {            logger.debug("Need to create a new version for JAR: {}",jarName);          }          File nextVersionJarFile=getNextVersionJarFile(oldJarFiles[0].getName());          if (writeJarBytesToFile(nextVersionJarFile,jarBytes)) {            newJarClassLoader=new JarClassLoader(nextVersionJarFile,jarName,jarBytes);            if (isDebugEnabled) {              logger.debug("Successfully created next JarClassLoader at file: {}",nextVersionJarFile.getAbsolutePath());            }          } else {            if (isDebugEnabled) {              logger.debug("Unable to write contents for next version of JAR to file: {}",nextVersionJarFile.getAbsolutePath());            }          }        }      }    } catch (    IOException ioex) {      logger.info("Failed attempt to use JAR to create JarClassLoader for: {} : {}",jarName,ioex.getMessage());    }    if (isDebugEnabled) {      if (newJarClassLoader == null) {        logger.debug("Unable to determine a JAR file location, will loop and try again: {}",jarName);      } else {        logger.debug("Exiting loop for JarClassLoader creation using file: {}",newJarClassLoader.getFileName());      }    }  } while (newJarClassLoader == null);  ClassPathLoader.getLatest().addOrReplaceAndSetLatest(newJarClassLoader);  if (oldJarClassLoader != null) {    attemptFileLockAndDelete(new File(this.deployDirectory,oldJarClassLoader.getFileName()));  }  return newJarClassLoader;}  }
class C{  public int remainingCapacity(){  return maxSize - size();}  }
class C{  public HostInfo addHost(HostInfo hostInfo){  return addHost(hostInfo.getName(),hostInfo.getAddress(),hostInfo.getProtocol(),hostInfo.getHttpPort(),hostInfo.getTcpPort(),hostInfo.getUsername(),hostInfo.getPassword(),hostInfo.getMacAddress(),hostInfo.getWolPort(),hostInfo.getUseEventServer(),hostInfo.getEventServerPort());}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  @Override public void addMessageWithSound(final String message,final String from,final boolean thirdperson,final String sound){  final Thread t=new Thread(null);  t.start();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.803 -0500",hash_original_method="F5CABA8208B35CC620F77C4ED2D48018",hash_generated_method="7366ED5FE46D69DF533B9A2E6EA78195") @Override public String toString(){  String str=new String();  str.addTaint(getTaint());  return str;}  }
class C{  public StdoutLog(){}  }
class C{  protected void fillSideTexCoordBuffer(Vec4[] topVerts,Vec4[] bottomVerts,FloatBuffer tBuf){  int faceCount=topVerts.length - 1;  double lengths[]=new double[faceCount + 1];  for (int i=0; i < faceCount; i++) {    lengths[i]=bottomVerts[i].distanceTo3(topVerts[i]);  }  lengths[faceCount]=lengths[0];  int b=0;  for (int i=0; i < faceCount; i++) {    if (lengths[i] > lengths[i + 1]) {      tBuf.put(b++,0).put(b++,0);      tBuf.put(b++,1).put(b++,(float)(1d - lengths[i + 1] / lengths[i]));    } else {      tBuf.put(b++,0).put(b++,(float)(1d - lengths[i] / lengths[i + 1]));      tBuf.put(b++,1).put(b++,0);    }    tBuf.put(b++,1).put(b++,1);    tBuf.put(b++,0).put(b++,1);  }}  }
class C{  public IOUtils(){  super();}  }
class C{  public static boolean isNumber(Type type){  if (type == null) {    return false;  }switch (type.getKind()) {case BYTE:case SHORT:case INT:case LONG:case DOUBLE:case FLOAT:    return true;default :  return false;}}  }
class C{  public void toXML(final StringBuilder builder,final ConfigVerification errors){  map.get(PanelKeys.PANEL_VALUES).toXML(builder,errors);  map.get(PanelKeys.PANEL_EXTERNALS).toXML(builder,errors);  map.get(PanelKeys.PANEL_INPUT).toXML(builder,errors);  map.get(PanelKeys.PANEL_OUTPUT).toXML(builder,errors);  map.get(PanelKeys.PANEL_SQL).toXML(builder,errors);  map.get(PanelKeys.PANEL_CACHE).toXML(builder,errors);  map.get(PanelKeys.PANEL_LOGGING).toXML(builder,errors);  map.get(PanelKeys.PANEL_DEBUG).toXML(builder,errors);  map.get(PanelKeys.PANEL_FILTER).toXML(builder,errors);}  }
class C{  public boolean isRowVector(){  return rows == 1;}  }
class C{  public SoftwarePattern_ createSoftwarePattern_(){  SoftwarePattern_Impl softwarePattern_=new SoftwarePattern_Impl();  return softwarePattern_;}  }
class C{  public void testBug44451() throws Exception {  String methodName;  List<String> expectedFields;  String[] testStepDescription=new String[]{"MySQL MetaData","I__S MetaData"};  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  Connection[] testConnections=new Connection[]{conn,connUseIS};  methodName="getClientInfoProperties()";  expectedFields=Arrays.asList("NAME","MAX_LEN","DEFAULT_VALUE","DESCRIPTION");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    rs=testDbMetaData.getClientInfoProperties();    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,rs);    rs.close();  }  methodName="getFunctions()";  expectedFields=Arrays.asList("FUNCTION_CAT","FUNCTION_SCHEM","FUNCTION_NAME","REMARKS","FUNCTION_TYPE","SPECIFIC_NAME");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    rs=testDbMetaData.getFunctions(null,null,"%");    checkReturnedColumnsForBug44451(testStepDescription[i],methodName,expectedFields,rs);    rs.close();  }  connUseIS.close();}  }
class C{  public static UUIDPersistentHandle makeHandle(final byte[] value,final int offset){  return new UUIDPersistentHandle(value,offset);}  }
class C{  protected FixedWithNextNode finishInstruction(FixedWithNextNode instr,FrameStateBuilder state){  return instr;}  }
class C{  private void connectionEvent(Intent intent) throws PayloadException, CertificateException, NetworkException, ContactManagerException {  try {    if (mDisconnectedByBattery) {      return;    }    if (!ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {      return;    }    boolean connectivity=intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY,false);    String reason=intent.getStringExtra(ConnectivityManager.EXTRA_REASON);    boolean failover=intent.getBooleanExtra(ConnectivityManager.EXTRA_IS_FAILOVER,false);    if (sLogger.isActivated()) {      sLogger.debug("Connectivity event change: failover=" + failover + ", connectivity="+ !connectivity+ ", reason="+ reason);    }    NetworkInfo networkInfo=mCnxManager.getActiveNetworkInfo();    if (networkInfo == null) {      if (sLogger.isActivated()) {        sLogger.debug("Disconnect from IMS: no network (e.g. air plane mode)");      }      disconnectFromIms();      return;    }    if (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {      String lastUserAccount=LauncherUtils.getLastUserAccount(mCtx);      String currentUserAccount=LauncherUtils.getCurrentUserAccount(mCtx);      if (lastUserAccount != null) {        if ((currentUserAccount == null) || !currentUserAccount.equalsIgnoreCase(lastUserAccount)) {          mImsModule.getCoreListener().onSimChangeDetected();          return;        }      }    }    String localIpAddr;    if (networkInfo.getType() != mCurrentNetworkInterface.getType()) {      if (sLogger.isActivated()) {        sLogger.info("Data connection state: NETWORK ACCESS CHANGED");      }      if (sLogger.isActivated()) {        sLogger.debug("Disconnect from IMS: network access has changed");      }      disconnectFromIms();      if (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {        if (sLogger.isActivated()) {          sLogger.debug("Change the network interface to mobile");        }        mCurrentNetworkInterface=getMobileNetworkInterface();      } else       if (networkInfo.getType() == ConnectivityManager.TYPE_WIFI) {        if (sLogger.isActivated()) {          sLogger.debug("Change the network interface to Wi-Fi");        }        mCurrentNetworkInterface=getWifiNetworkInterface();      }      loadUserProfile();      try {        mDnsResolvedFields=mCurrentNetworkInterface.getDnsResolvedFields();      } catch (      UnknownHostException e) {        if (sLogger.isActivated()) {          sLogger.debug(e.getMessage());        }      }      localIpAddr=NetworkFactory.getFactory().getLocalIpAddress(mDnsResolvedFields,networkInfo.getType());    } else {      try {        if (mDnsResolvedFields == null) {          mDnsResolvedFields=mCurrentNetworkInterface.getDnsResolvedFields();        }      } catch (      UnknownHostException e) {        if (sLogger.isActivated()) {          sLogger.debug(e.getMessage());        }      }      localIpAddr=NetworkFactory.getFactory().getLocalIpAddress(mDnsResolvedFields,networkInfo.getType());      String lastIpAddr=mCurrentNetworkInterface.getNetworkAccess().getIpAddress();      if (!localIpAddr.equals(lastIpAddr)) {        if (lastIpAddr != null) {          if (sLogger.isActivated()) {            sLogger.debug("Disconnect from IMS: IP address has changed");          }          disconnectFromIms();        } else {          if (sLogger.isActivated()) {            sLogger.debug("IP address available (again)");          }        }      } else {        if (sLogger.isActivated()) {          sLogger.debug("Neither interface nor IP address has changed; nothing to do.");        }        return;      }    }    if (networkInfo.isConnected()) {      String remoteAddress;      if (mDnsResolvedFields != null) {        remoteAddress=mDnsResolvedFields.mIpAddress;      } else {        remoteAddress="unresolved";      }      if (sLogger.isActivated()) {        sLogger.info("Data connection state: CONNECTED to " + networkInfo.getTypeName() + " with local IP "+ localIpAddr+ " valid for "+ remoteAddress);      }      if (!NetworkAccessType.ANY.equals(mNetwork) && (mNetwork.toInt() != networkInfo.getType())) {        if (sLogger.isActivated()) {          sLogger.warn("Network access " + networkInfo.getTypeName() + " is not authorized");        }        return;      }      TelephonyManager tm=(TelephonyManager)mCtx.getSystemService(Context.TELEPHONY_SERVICE);      String currentOpe=tm.getSimOperatorName();      if (mOperator != null && !currentOpe.equalsIgnoreCase(mOperator)) {        if (sLogger.isActivated()) {          sLogger.warn("Operator not authorized current=" + currentOpe + " authorized="+ mOperator);        }        return;      }      if (!mCurrentNetworkInterface.isInterfaceConfigured()) {        if (sLogger.isActivated()) {          sLogger.warn("IMS network interface not well configured");        }        return;      }      if (sLogger.isActivated()) {        sLogger.debug("Connect to IMS");      }      connectToIms(localIpAddr);    }  } catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    disconnectFromIms();  }}  }
class C{  public SubscriptionStateExceptionBean(ApplicationExceptionBean sup,Reason reason,String member){  super(sup);  setReason(reason);  setMember(member);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("RequestServlet.init");}  }
class C{  public ConfigurePortsScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public AnimatableNumberOrPercentageValue(AnimationTarget target,float n){  super(target,n);}  }
class C{  public static boolean isSelfShortcutStatement(PsiPerlStatement statement){  if (statement == null) {    return false;  }  PsiElement derefExpr=statement.getFirstChild();  if (derefExpr == null) {    return false;  }  if (derefExpr instanceof PsiPerlReturnExprImpl) {    derefExpr=derefExpr.getLastChild();  }  if (!(derefExpr instanceof PsiPerlDerefExpr)) {    return false;  }  return isSelfShortcut(derefExpr.getFirstChild());}  }
class C{  private void printScreen(){  PrintScreenPainter.printScreen(this);}  }
class C{  public void flushDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"flushDishCacheAsync");  }  new FileCacheTask(FileCacheTaskType.flush_cache).execute();}  }
class C{  public static Account readFrom(final Deserializer deserializer,final String label){  return readFrom(deserializer,label,AddressEncoding.COMPRESSED);}  }
class C{  public void clearLog(){  if (getLogSelectionModel().getCurrentLogModel() == null) {    return;  }  getLogSelectionModel().getCurrentLogModel().clearLog();  if (getLogSelectionModel().getCurrentLogModel().getLogMode() == LogMode.PULL) {    clearLogArea();  }}  }
class C{  public void addExtractor(ExtractorItem extractorItem,Cluster[] codebook){  if ((!(codebook.length > 0)) || (codebook == null))   throw new UnsupportedOperationException("Codebook cannot be empty or null!!");  LinkedList<Cluster[]> listOfCodebooks=new LinkedList<Cluster[]>();  listOfCodebooks.add(codebook);  addExtractor(extractorItem,listOfCodebooks);}  }
class C{  public final boolean isForwarded(){  return flags[FORWARDED_TICKET_FLAG];}  }
class C{  private NSDictionary parseDictionary() throws ParseException {  skip();  skipWhitespacesAndComments();  NSDictionary dict=new NSDictionary();  while (!accept(DICTIONARY_END_TOKEN)) {    String keyString;    if (accept(QUOTEDSTRING_BEGIN_TOKEN)) {      keyString=parseQuotedString();    } else {      keyString=parseString();    }    skipWhitespacesAndComments();    read(DICTIONARY_ASSIGN_TOKEN);    skipWhitespacesAndComments();    NSObject object=parseObject();    dict.put(keyString,object);    skipWhitespacesAndComments();    read(DICTIONARY_ITEM_DELIMITER_TOKEN);    skipWhitespacesAndComments();  }  skip();  return dict;}  }
class C{  public void addImagePath(String path){  this.mImageList.add(path);}  }
class C{  public double distanceSq(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  private CommandLine parseLine(CommandLineParser parser,Options options,String[] args) throws AdeUsageException {  CommandLine line;  try {    line=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Parsing failed. Reason: " + exp.getMessage());    throw new AdeUsageException("Argument Parsing failed",exp);  }  return line;}  }
class C{  public void sort(int a[],int lo0,int hi0) throws Exception {  int lo=lo0;  int hi=hi0;  if (lo >= hi) {    return;  } else   if (lo == hi - 1) {    if (a[lo] > a[hi]) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }    return;  }  int pivot=a[(lo + hi) / 2];  a[(lo + hi) / 2]=a[hi];  a[hi]=pivot;  while (lo < hi) {    while (a[lo] <= pivot && lo < hi) {      lo++;    }    while (pivot <= a[hi] && lo < hi) {      hi--;    }    if (lo < hi) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }  }  a[hi0]=a[hi];  a[hi]=pivot;  sort(a,lo0,lo - 1);  sort(a,hi + 1,hi0);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  if (keyDerivationAlgorithm != null) {    v.add(new DERTaggedObject(false,0,keyDerivationAlgorithm));  }  v.add(keyEncryptionAlgorithm);  v.add(encryptedKey);  return new DERSequence(v);}  }
class C{  @Ignore public void testNastyPattern() throws Exception {  Pattern p=Pattern.compile("(c.+)*xy");  String input="[;<!--aecbbaa--><    febcfdc fbb = \"fbeeebff\" fc = dd   >\\';<eefceceaa e= babae\" eacbaff =\"fcfaccacd\" = bcced>>><  bccaafe edb = ecfccdff\"   <?</script><    edbd ebbcd=\"faacfcc\" aeca= bedbc ceeaac =adeafde aadccdaf = \"afcc ffda=aafbe &#x16921ed5\"1843785582']";  for (int i=0; i < input.length(); i++) {    Matcher matcher=p.matcher(input.substring(0,i));    long t=System.currentTimeMillis();    if (matcher.find()) {      System.out.println(matcher.group());    }    System.out.println(i + " > " + (System.currentTimeMillis() - t) / 1000.0);  }}  }
class C{  public static void main(String[] args){  String queueName=null;  Context jndiContext=null;  QueueConnectionFactory queueConnectionFactory=null;  QueueConnection queueConnection=null;  QueueSession queueSession=null;  Queue queue=null;  QueueReceiver queueReceiver=null;  TextMessage message=null;  if (args.length != 1) {    LOG.info("Usage: java " + "SimpleQueueReceiver <queue-name>");    System.exit(1);  }  queueName=args[0];  LOG.info("Queue name is " + queueName);  try {    jndiContext=new InitialContext();  } catch (  NamingException e) {    LOG.info("Could not create JNDI API " + "context: " + e.toString());    System.exit(1);  }  try {    queueConnectionFactory=(QueueConnectionFactory)jndiContext.lookup("QueueConnectionFactory");    queue=(Queue)jndiContext.lookup(queueName);  } catch (  NamingException e) {    LOG.info("JNDI API lookup failed: " + e.toString());    System.exit(1);  }  try {    queueConnection=queueConnectionFactory.createQueueConnection();    queueSession=queueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);    queueReceiver=queueSession.createReceiver(queue);    queueConnection.start();    while (true) {      Message m=queueReceiver.receive(1);      if (m != null) {        if (m instanceof TextMessage) {          message=(TextMessage)m;          LOG.info("Reading message: " + message.getText());        } else {          break;        }      }    }  } catch (  JMSException e) {    LOG.info("Exception occurred: " + e.toString());  } finally {    if (queueConnection != null) {      try {        queueConnection.close();      } catch (      JMSException e) {      }    }  }}  }
class C{  static public void main(String[] args){  BayesNetGenerator b=new BayesNetGenerator();  try {    if ((args.length == 0) || (Utils.getFlag('h',args))) {      printOptions(b);      return;    }    b.setOptions(args);    b.generateRandomNetwork();    if (!b.m_bGenerateNet) {      b.generateInstances();    }    System.out.println(b.toString());  } catch (  Exception e) {    e.printStackTrace();    printOptions(b);  }}  }
class C{  private void reMap() throws IOException {  int oldPos=0;  if (mapped != null) {    oldPos=pos;    unMap();  }  fileLength=file.length();  checkFileSizeLimit(fileLength);  mapped=file.getChannel().map(mode,0,fileLength);  int limit=mapped.limit();  int capacity=mapped.capacity();  if (limit < fileLength || capacity < fileLength) {    throw new IOException("Unable to map: length=" + limit + " capacity="+ capacity+ " length="+ fileLength);  }  if (SysProperties.NIO_LOAD_MAPPED) {    mapped.load();  }  this.pos=Math.min(oldPos,(int)fileLength);}  }
class C{  void doConstrainedOutsideScores(Grammar grammar,boolean viterbi,boolean logScores){  short[] numSubStatesArray=grammar.numSubStates;  double initVal=(logScores) ? Double.NEGATIVE_INFINITY : 0.0;  for (int diff=length; diff >= 1; diff--) {    for (int start=0; start + diff <= length; start++) {      int end=start + diff;      double[][] scoresAfterUnaries=new double[numStates][];      boolean somethingChanged=false;      for (int cState=0; cState < numStates; cState++) {        if (diff > 1 && !grammar.isGrammarTag[cState])         continue;        if (oScore[start][end][cState] == null) {          continue;        }        UnaryRule[] rules=null;        if (viterbi)         rules=grammar.getClosedViterbiUnaryRulesByChild(cState); else         rules=grammar.getClosedSumUnaryRulesByChild(cState);        final int nChildStates=numSubStatesArray[cState];        final int numRules=rules.length;        for (int r=0; r < numRules; r++) {          UnaryRule ur=rules[r];          int pState=ur.parentState;          if ((pState == cState))           continue;          if (oScore[start][end][pState] == null) {            continue;          }          double[][] scores=ur.getScores2();          final int nParentStates=numSubStatesArray[pState];          for (int cp=0; cp < nChildStates; cp++) {            if (scores[cp] == null)             continue;            if (!allowedSubStates[start][end][cState][cp])             continue;            for (int np=0; np < nParentStates; np++) {              double pS=scores[cp][np];              if (pS == initVal)               continue;              double oS=oScore[start][end][pState][np];              if (oS == initVal)               continue;              double thisRound=(logScores) ? oS + pS : oS * pS;              if (scoresAfterUnaries[cState] == null) {                scoresAfterUnaries[cState]=new double[numSubStatesArray[cState]];                if (viterbi)                 Arrays.fill(scoresAfterUnaries[cState],initVal);              }              if (viterbi)               scoresAfterUnaries[cState][cp]=Math.max(thisRound,scoresAfterUnaries[cState][cp]); else               scoresAfterUnaries[cState][cp]+=thisRound;              somethingChanged=true;            }          }        }      }      if (somethingChanged) {        for (int cState=0; cState < numStates; cState++) {          double[] thisCell=scoresAfterUnaries[cState];          if (thisCell == null)           continue;          for (int cp=0; cp < numSubStatesArray[cState]; cp++) {            if (thisCell[cp] > initVal) {              if (viterbi)               oScore[start][end][cState][cp]=Math.max(oScore[start][end][cState][cp],thisCell[cp]); else               oScore[start][end][cState][cp]+=thisCell[cp];            }          }        }      }      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (oScore[start][end][pState] == null) {          continue;        }        final int nParentChildStates=numSubStatesArray[pState];        BinaryRule[] rules=grammar.splitRulesWithP(pState);        final int numRules=rules.length;        for (int r=0; r < numRules; r++) {          BinaryRule br=rules[r];          int lState=br.leftChildState;          int min1=narrowRExtent[start][lState];          if (end < min1) {            continue;          }          int rState=br.rightChildState;          int max1=narrowLExtent[end][rState];          if (max1 < min1) {            continue;          }          int min=min1;          int max=max1;          if (max - min > 2) {            int min2=wideLExtent[end][rState];            min=(min1 > min2 ? min1 : min2);            if (max1 < min) {              continue;            }            int max2=wideRExtent[start][lState];            max=(max1 < max2 ? max1 : max2);            if (max < min) {              continue;            }          }          double[][][] scores=br.getScores2();          final int nLeftChildStates=numSubStatesArray[lState];          final int nRightChildStates=numSubStatesArray[rState];          for (int split=min; split <= max; split++) {            if (oScore[start][split][lState] == null)             continue;            if (oScore[split][end][rState] == null)             continue;            double[] rightScores=new double[nRightChildStates];            if (viterbi)             Arrays.fill(rightScores,initVal);            Arrays.fill(scoresToAdd,initVal);            somethingChanged=false;            for (int lp=0; lp < nLeftChildStates; lp++) {              double lS=iScore[start][split][lState][lp];              if (lS == initVal) {                continue;              }              for (int rp=0; rp < nRightChildStates; rp++) {                if (scores[lp][rp] == null)                 continue;                double rS=iScore[split][end][rState][rp];                if (rS == initVal) {                  continue;                }                for (int np=0; np < nParentChildStates; np++) {                  double pS=scores[lp][rp][np];                  if (pS == initVal)                   continue;                  double oS=oScore[start][end][pState][np];                  if (oS == initVal)                   continue;                  double thisRoundL=(logScores) ? pS + rS + oS : pS * rS * oS;                  double thisRoundR=(logScores) ? pS + lS + oS : pS * lS * oS;                  if (viterbi) {                    scoresToAdd[lp]=Math.max(thisRoundL,scoresToAdd[lp]);                    rightScores[rp]=Math.max(thisRoundR,rightScores[rp]);                  } else {                    scoresToAdd[lp]+=thisRoundL;                    rightScores[rp]+=thisRoundR;                  }                  somethingChanged=true;                }              }            }            if (!somethingChanged)             continue;            for (int cp=0; cp < nLeftChildStates; cp++) {              if (scoresToAdd[cp] > initVal) {                if (viterbi)                 oScore[start][split][lState][cp]=Math.max(oScore[start][split][lState][cp],scoresToAdd[cp]); else                 oScore[start][split][lState][cp]+=scoresToAdd[cp];              }            }            for (int cp=0; cp < nRightChildStates; cp++) {              if (rightScores[cp] > initVal) {                if (viterbi)                 oScore[split][end][rState][cp]=Math.max(oScore[split][end][rState][cp],rightScores[cp]); else                 oScore[split][end][rState][cp]+=rightScores[cp];              }            }          }        }      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    return contents != null && !contents.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public GoogleLoginCopyAndPasteDialog(JComponent parent,GoogleAuthorizationCodeRequestUrl requestUrl,String message){  super(parent,true);  urlString=requestUrl.build();  if (message != null) {    setTitle(message);  } else {    setTitle(TITLE);  }  init();}  }
class C{  private void establishFinalConfirmationState(){  mFinalButton=(Button)mContentView.findViewById(R.id.execute_master_clear);  mFinalButton.setOnClickListener(mFinalClickListener);}  }
class C{  public void toEPL(StringWriter writer){  writer.write(columnName);  if (type != CreateIndexColumnType.HASH) {    writer.write(' ');    writer.write(type.toString().toLowerCase());  }}  }
class C{  static void convert(IR ir,OptOptions options){  boolean didArrayStoreCheck=false;  for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=s.nextInstructionInCodeOrder()) {switch (s.getOpcode()) {case GETSTATIC_opcode:{        LocationOperand loc=GetStatic.getClearLocation(s);        RegisterOperand result=GetStatic.getClearResult(s);        Operand address=ir.regpool.makeJTOCOp();        Operand offset=GetStatic.getClearOffset(s);        Load.mutate(s,IRTools.getLoadOp(loc.getFieldRef(),true),result,address,offset,loc);      }    break;case PUTSTATIC_opcode:{    LocationOperand loc=PutStatic.getClearLocation(s);    Operand value=PutStatic.getClearValue(s);    Operand address=ir.regpool.makeJTOCOp();    Operand offset=PutStatic.getClearOffset(s);    Store.mutate(s,IRTools.getStoreOp(loc.getFieldRef(),true),value,address,offset,loc);  }break;case PUTFIELD_opcode:{LocationOperand loc=PutField.getClearLocation(s);Operand value=PutField.getClearValue(s);Operand address=PutField.getClearRef(s);Operand offset=PutField.getClearOffset(s);Store.mutate(s,IRTools.getStoreOp(loc.getFieldRef(),false),value,address,offset,loc,PutField.getClearGuard(s));}break;case GETFIELD_opcode:{LocationOperand loc=GetField.getClearLocation(s);RegisterOperand result=GetField.getClearResult(s);Operand address=GetField.getClearRef(s);Operand offset=GetField.getClearOffset(s);Load.mutate(s,IRTools.getLoadOp(loc.getFieldRef(),false),result,address,offset,loc,GetField.getClearGuard(s));}break;case INT_ALOAD_opcode:doArrayLoad(s,ir,INT_LOAD,2);break;case LONG_ALOAD_opcode:doArrayLoad(s,ir,LONG_LOAD,3);break;case FLOAT_ALOAD_opcode:doArrayLoad(s,ir,FLOAT_LOAD,2);break;case DOUBLE_ALOAD_opcode:doArrayLoad(s,ir,DOUBLE_LOAD,3);break;case REF_ALOAD_opcode:doArrayLoad(s,ir,REF_LOAD,LOG_BYTES_IN_ADDRESS);break;case BYTE_ALOAD_opcode:doArrayLoad(s,ir,BYTE_LOAD,0);break;case UBYTE_ALOAD_opcode:doArrayLoad(s,ir,UBYTE_LOAD,0);break;case USHORT_ALOAD_opcode:doArrayLoad(s,ir,USHORT_LOAD,1);break;case SHORT_ALOAD_opcode:doArrayLoad(s,ir,SHORT_LOAD,1);break;case INT_ASTORE_opcode:doArrayStore(s,ir,INT_STORE,2);break;case LONG_ASTORE_opcode:doArrayStore(s,ir,LONG_STORE,3);break;case FLOAT_ASTORE_opcode:doArrayStore(s,ir,FLOAT_STORE,2);break;case DOUBLE_ASTORE_opcode:doArrayStore(s,ir,DOUBLE_STORE,3);break;case REF_ASTORE_opcode:doArrayStore(s,ir,REF_STORE,LOG_BYTES_IN_ADDRESS);break;case BYTE_ASTORE_opcode:doArrayStore(s,ir,BYTE_STORE,0);break;case SHORT_ASTORE_opcode:doArrayStore(s,ir,SHORT_STORE,1);break;case CALL_opcode:s=callHelper(s,ir);break;case SYSCALL_opcode:if (Call.getMethod(s) != null) {expandSysCallTarget(s,ir);}break;case TABLESWITCH_opcode:s=tableswitch(s,ir);break;case LOOKUPSWITCH_opcode:s=lookup(s,ir);break;case OBJARRAY_STORE_CHECK_opcode:s=DynamicTypeCheckExpansion.arrayStoreCheck(s,ir,true);didArrayStoreCheck=true;break;case OBJARRAY_STORE_CHECK_NOTNULL_opcode:s=DynamicTypeCheckExpansion.arrayStoreCheck(s,ir,false);didArrayStoreCheck=true;break;case CHECKCAST_opcode:case CHECKCAST_UNRESOLVED_opcode:s=DynamicTypeCheckExpansion.checkcast(s,ir);break;case CHECKCAST_NOTNULL_opcode:s=DynamicTypeCheckExpansion.checkcastNotNull(s,ir);break;case MUST_IMPLEMENT_INTERFACE_opcode:s=DynamicTypeCheckExpansion.mustImplementInterface(s,ir);break;case IG_CLASS_TEST_opcode:IfCmp.mutate(s,REF_IFCMP,ir.regpool.makeTempValidation(),getTIB(s,ir,InlineGuard.getClearValue(s),InlineGuard.getClearGuard(s)),getTIB(s,ir,InlineGuard.getGoal(s).asType()),ConditionOperand.NOT_EQUAL(),InlineGuard.getClearTarget(s),InlineGuard.getClearBranchProfile(s));break;case IG_METHOD_TEST_opcode:{MethodOperand methOp=InlineGuard.getClearGoal(s).asMethod();Operand t1=getTIB(s,ir,InlineGuard.getClearValue(s),InlineGuard.getClearGuard(s));Operand t2=getTIB(s,ir,methOp.getTarget().getDeclaringClass());IfCmp.mutate(s,REF_IFCMP,ir.regpool.makeTempValidation(),getInstanceMethod(s,ir,t1,methOp.getTarget()),getInstanceMethod(s,ir,t2,methOp.getTarget()),ConditionOperand.NOT_EQUAL(),InlineGuard.getClearTarget(s),InlineGuard.getClearBranchProfile(s));break;}case INSTANCEOF_opcode:case INSTANCEOF_UNRESOLVED_opcode:s=DynamicTypeCheckExpansion.instanceOf(s,ir);break;case INSTANCEOF_NOTNULL_opcode:s=DynamicTypeCheckExpansion.instanceOfNotNull(s,ir);break;case INT_ZERO_CHECK_opcode:{TrapIf.mutate(s,TRAP_IF,ZeroCheck.getClearGuardResult(s),ZeroCheck.getClearValue(s),IC(0),ConditionOperand.EQUAL(),TrapCodeOperand.DivByZero());}break;case LONG_ZERO_CHECK_opcode:{TrapIf.mutate(s,TRAP_IF,ZeroCheck.getClearGuardResult(s),ZeroCheck.getClearValue(s),LC(0),ConditionOperand.EQUAL(),TrapCodeOperand.DivByZero());}break;case BOUNDS_CHECK_opcode:{RegisterOperand array_length=InsertGuardedUnary(s,ir,ARRAYLENGTH,TypeReference.Int,BoundsCheck.getClearRef(s),BoundsCheck.getClearGuard(s));TrapIf.mutate(s,TRAP_IF,BoundsCheck.getClearGuardResult(s),array_length.copyD2U(),BoundsCheck.getClearIndex(s),ConditionOperand.LOWER_EQUAL(),TrapCodeOperand.ArrayBounds());}break;case RESOLVE_MEMBER_opcode:s=resolveMember(s,ir);break;default :break;}}if (didArrayStoreCheck) {branchOpts.perform(ir,true);}}  }
class C{  private void onBluetoothRemoteDeviceClassChange(Context context,Intent intent){  log.debug("Remote device's class changed.");}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public JPanel doLocale(){  JPanel panel=new JPanel();  panel.setLayout(new FlowLayout());  panel.add(localeBox);  Runnable r=null;  new Thread(r).start();  return panel;}  }
class C{  public void writeToObject(Object data){  getTable().commitEditing();  Property[] properties=getProperties();  for (int i=0, c=properties.length; i < c; i++) {    properties[i].writeToObject(data);  }}  }
class C{  public DNetscapeCaPolicyUrl(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeCaPolicyUrl.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  final public MutableString replace(final char c,final CharSequence s){  final int length=length();  char[] a=array;  int i, j, l, newLength=length;  if (s.length() == 0)   throw new IllegalArgumentException("You cannot use the empty string as a replacement");  i=length;  boolean found=false;  while (i-- != 0)   if (a[i] == c) {    newLength+=s.length() - 1;    found=true;  }  if (!found)   return this;  expand(newLength);  a=array;  i=newLength;  j=length;  while (j-- != 0) {    if (a[j] == c) {      l=s.length();      getChars(s,0,l,array,i-=l);    } else     a[--i]=a[j];  }  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public ConfigureCoerceiveParsingDialog_NB(CoerciveParsing coerciveParsing){  this.coerciveParsing=coerciveParsing;  initComponents();  final IterateModel numberOfTagsIterator=coerciveParsing.getNumberOfTagsIterator();  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());  List<String> tagNames=Arrays.asList(coerciveParsing.getTagNames());  configureStringList_NB1.setStringList(tagNames);}  }
class C{  public boolean containsNode(N a){  return nodes.containsKey(a);}  }
class C{  public String prompt(String message,String defVal){  if (userAgent != null) {    return userAgent.showPrompt(message,defVal);  }  return null;}  }
class C{  @NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {      if (name.equals(child.getName())) {        result.add(child);      }    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public static Angle greatCircleAzimuth(LatLon p1,LatLon p2){  if ((p1 == null) || (p2 == null)) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  if (lon1 == lon2)   return lat1 > lat2 ? Angle.POS180 : Angle.ZERO;  double y=Math.cos(lat2) * Math.sin(lon2 - lon1);  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);  double azimuthRadians=Math.atan2(y,x);  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);}  }
class C{  private void loadModules(final CoreLoadingComponent loading){  final List<HeroicModule> modules=new ArrayList<>();  for (  final HeroicModule builtin : BUILTIN_MODULES) {    modules.add(builtin);  }  modules.addAll(this.modules);  for (  final HeroicModule module : modules) {    module.setup(loading).run();  }  log.info("Loaded {} module(s)",modules.size());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.926 -0500",hash_original_method="50D1D865E8418E3E5575CE85EA5530DD",hash_generated_method="C19551BC9F6E3816DC99167E25922AE8") public ViewPropertyAnimator rotationYBy(float value){  animatePropertyBy(ROTATION_Y,value);  return this;}  }
class C{  LayerDrawable(Drawable[] layers,LayerState state){  this(state,null);  int length=layers.length;  ChildDrawable[] r=new ChildDrawable[length];  for (int i=0; i < length; i++) {    r[i]=new ChildDrawable();    r[i].mDrawable=layers[i];    layers[i].setCallback(this);    mLayerState.mChildrenChangingConfigurations|=layers[i].getChangingConfigurations();  }  mLayerState.mNum=length;  mLayerState.mChildren=r;  ensurePadding();}  }
class C{  public boolean validationRefreshEnabled(){  if (coordinator != null) {    return Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,VALIDATION_REFRESH_CHECK_PROPERTY));  } else {    log.error("Bean wiring error: Coordinator not set, therefore validation will default to false.");  }  return false;}  }
class C{  public static void assertArrayEqual(byte[] expected,byte[] actual,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],errorMessage);  }}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof PlaceMark) {    PlaceMark po=(PlaceMark)o;    return (po.col == col) && (po.player == player) && (po.row == row);  }  return false;}  }
class C{  @Override public boolean hasMoreElements(){  return hasNext();}  }
class C{  public static MetricId join(MetricId... parts){  final StringBuilder nameBuilder=new StringBuilder();  final Map<String,String> tags=new HashMap<String,String>();  boolean first=true;  for (  MetricId part : parts) {    final String name=part.getKey();    if (name != null && !name.isEmpty()) {      if (first) {        first=false;      } else {        nameBuilder.append(SEPARATOR);      }      nameBuilder.append(name);    }    if (!part.getTags().isEmpty()) {      tags.putAll(part.getTags());    }  }  return new MetricId(nameBuilder.toString(),tags);}  }
class C{  public synchronized void removeImageListener(ImageListener cl){  m_imageListeners.remove(cl);}  }
class C{  public boolean removePattern(CharacterPattern pattern){synchronized (bytePatterns) {    return bytePatterns.remove(pattern);  }}  }
class C{  private static View findTouchTargetView(float[] eventCoords,ViewGroup viewGroup){  int childrenCount=viewGroup.getChildCount();  for (int i=childrenCount - 1; i >= 0; i--) {    View child=viewGroup.getChildAt(i);    PointF childPoint=mTempPoint;    if (isTransformedTouchPointInView(eventCoords[0],eventCoords[1],viewGroup,child,childPoint)) {      float restoreX=eventCoords[0];      float restoreY=eventCoords[1];      eventCoords[0]=childPoint.x;      eventCoords[1]=childPoint.y;      View targetView=findTouchTargetViewWithPointerEvents(eventCoords,child);      if (targetView != null) {        return targetView;      }      eventCoords[0]=restoreX;      eventCoords[1]=restoreY;    }  }  return viewGroup;}  }
class C{  void printValue(long value){  Log.write(value);}  }
class C{  @AroundInvoke public Object ensureIsNotServiceProvider(InvocationContext context) throws Exception {  Object result=null;  if (configService.isServiceProvider()) {    UnsupportedOperationException e=new UnsupportedOperationException("It is forbidden to perform this operation if a OSCM acts as a SAML service provider.");    Log4jLogger logger=LoggerFactory.getLogger(context.getTarget().getClass());    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_OPERATION_FORBIDDEN_FOR_SAML_SP);    throw e;  }  result=context.proceed();  return result;}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_trainInstances=data;  m_classIndex=m_trainInstances.classIndex();  m_numAttribs=m_trainInstances.numAttributes();  if (m_IRClassValS != null && m_IRClassValS.length() > 0) {    try {      m_IRClassVal=Integer.parseInt(m_IRClassValS);      m_IRClassVal--;    } catch (    NumberFormatException e) {      m_IRClassVal=m_trainInstances.classAttribute().indexOfValue(m_IRClassValS);    }  }}  }
class C{  @Override public ReferenceContainer<ReferenceType> remove(final byte[] termHash) throws IOException {  removeDelayed();  ReferenceContainer<ReferenceType> c1=null;  try {    c1=this.array.get(termHash);  } catch (  final SpaceExceededException e2) {    ConcurrentLog.logException(e2);  }  if (c1 != null) {    this.array.delete(termHash);  }  final ReferenceContainer<ReferenceType> c0=this.ram.remove(termHash);  if (c1 == null)   return c0;  if (c0 == null)   return c1;  try {    return c1.merge(c0);  } catch (  final SpaceExceededException e) {    try {      return c1.merge(c0);    } catch (    final SpaceExceededException e1) {      return (c1.size() > c0.size()) ? c1 : c0;    }  }}  }
class C{  protected Object invoke(Method method,Object arg1,Object arg2){  return invoke(method,new Object[]{arg1,arg2});}  }
class C{  static <T>T wait(Task<T> task) throws ParseException {  try {    task.waitForCompletion();    if (task.isFaulted()) {      Exception error=task.getError();      if (error instanceof ParseException) {        throw (ParseException)error;      }      if (error instanceof AggregateException) {        throw new ParseException(error);      }      if (error instanceof RuntimeException) {        throw (RuntimeException)error;      }      throw new RuntimeException(error);    } else     if (task.isCancelled()) {      throw new RuntimeException(new CancellationException());    }    return task.getResult();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public void loadChatFile(URL file,String format,String encoding,boolean processUnderstanding,boolean pin){  try {    loadChatFile(Utils.openStream(file),format,encoding,MAX_FILE_SIZE,processUnderstanding,pin);  } catch (  Exception exception) {    throw new BotException(exception);  }}  }
class C{  public void guardarUnidadDocumentalEnFSExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  List rangos=null;  ActionErrors errores=null;  boolean isSubtipoCaja=false;  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionFraccionSerieBI fraccionSerieBI=services.lookupGestionFraccionSerieBI();  UDocEnDivisionFSForm udocForm=(UDocEnDivisionFSForm)form;  UDocEnFraccionSerieVO udocEnDivisionFS=(UDocEnFraccionSerieVO)getFromTemporalSession(request,FondosConstants.UNIDAD_DOCUMENTAL_EN_FS);  DivisionFraccionSeriePO divisionFS=(DivisionFraccionSeriePO)getFromTemporalSession(request,FondosConstants.DIVISION_FRACCION_SERIE);  int subtipo=(divisionFS.getNivelDocumental().getId() != null ? divisionFS.getNivelDocumental().getSubtipo() : ElementoCuadroClasificacion.SUBTIPO_UNIDAD_DOCUMENTAL_SIMPLE);  isSubtipoCaja=(subtipo == ElementoCuadroClasificacion.SUBTIPO_CAJA);  if (divisionFS.getNivelDocumental() != null && isSubtipoCaja) {    rangos=obtenerRangos(request.getParameterValues("campo_201"),request.getParameterValues("campo_202"));    if (rangos != null && rangos.size() > 0) {      udocEnDivisionFS.resetRangos();      Iterator it=rangos.iterator();      while (it.hasNext()) {        RangoVO rango=(RangoVO)it.next();        udocEnDivisionFS.addRango(rango);      }    }  } else {    udocEnDivisionFS.setNumExp(udocForm.getNumeroExpediente());  }  if (isSubtipoCaja)   errores=validate(rangos);  errores=validate(request,udocForm,errores);  if (errores.isEmpty()) {    udocEnDivisionFS.setAsunto(udocForm.getAsunto());    try {      udocEnDivisionFS.setFechaExtIni(udocForm.getFechaInicioAsDate());      udocEnDivisionFS.setFechaExtFin(udocForm.getFechaFinAsDate());    } catch (    ParseException pe) {    }    fraccionSerieBI.updateUDocEnDivisionFS(udocEnDivisionFS);    goBackExecuteLogic(mappings,form,request,response);  } else {    if (isSubtipoCaja)     setInTemporalSession(request,FondosConstants.LISTA_RANGOS_UDOC,rangos);    ErrorsTag.saveErrors(request,errores);    setReturnActionFordward(request,mappings.findForward("edicion_udocEnFS"));  }}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  public String composeFullRelativePath(String path){  Configuration configuration=AppBeans.get(Configuration.NAME);  GlobalConfig globalConfig=configuration.getConfig(GlobalConfig.class);  String webAppPrefix="/".concat(globalConfig.getWebContextName().intern());  return path.startsWith("/") ? webAppPrefix.concat(path) : webAppPrefix.concat("/").concat(path);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof CustomXYToolTipGenerator) {    CustomXYToolTipGenerator generator=(CustomXYToolTipGenerator)obj;    boolean result=true;    for (int series=0; series < getListCount(); series++) {      for (int item=0; item < getToolTipCount(series); item++) {        String t1=getToolTipText(series,item);        String t2=generator.getToolTipText(series,item);        if (t1 != null) {          result=result && t1.equals(t2);        } else {          result=result && (t2 == null);        }      }    }    return result;  }  return false;}  }
class C{  public boolean canAdvanceToNextBasicBlock(){  return currentMatch == null || currentMatch.allowTrailingEdges();}  }
class C{  public Thread(){}  }
class C{  public void close(){  flush();  this.systemAgent.setCacheCollector(null);}  }
class C{  public LogisticRegressionDCD(double C){  this(C,100);}  }
class C{  public void addTransactions(final Collection<Transaction> transactions){  transactions.forEach(null);}  }
class C{  @Override public void process(V tuple){  if (baseValue != 0) {    double cval=tuple.doubleValue() - baseValue;    change.emit(getValue(cval));    percent.emit((cval / baseValue) * 100);  }}  }
class C{  private Colors(){}  }
class C{  @Override public int compareTo(ByteArrayWrapper other){  int compareTo=UnsafeComparer.INSTANCE.compareTo(dictionaryKey,other.dictionaryKey);  if (compareTo == 0) {    for (int i=0; i < noDictionaryKeys.length; i++) {      compareTo=UnsafeComparer.INSTANCE.compareTo(noDictionaryKeys[i],other.noDictionaryKeys[i]);      if (compareTo != 0) {        return compareTo;      }    }  }  if (compareTo == 0) {    for (int i=0; i < complexTypesKeys.length; i++) {      compareTo=UnsafeComparer.INSTANCE.compareTo(complexTypesKeys[i],other.complexTypesKeys[i]);      if (compareTo != 0) {        return compareTo;      }    }  }  return compareTo;}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  private static String fixStringLength(String inString,int length,boolean right){  if (inString.length() < length) {    while (inString.length() < length) {      inString=(right ? inString.concat(" ") : " ".concat(inString));    }  } else   if (inString.length() > length) {    inString=inString.substring(0,length);  }  return inString;}  }
class C{  private static Counter<String> loadWeights(String wtsInitialFile,boolean uniformStartWeights,boolean randomizeStartWeights,TranslationModel<IString,String> translationModel){  Counter<String> weights=IOTools.readWeights(wtsInitialFile);  if (weights == null)   weights=new ClassicCounter<>();  if (uniformStartWeights) {    Set<String> featureNames=new HashSet<>(weights.keySet());    featureNames.addAll(FeatureUtils.getBaselineFeatures(translationModel));    for (    String key : featureNames) {      if (key.startsWith(NGramLanguageModelFeaturizer.DEFAULT_FEATURE_NAME)) {        weights.setCount(key,0.5);      } else       if (key.startsWith(WordPenaltyFeaturizer.FEATURE_NAME)) {        weights.setCount(key,-1.0);      } else {        weights.setCount(key,0.2);      }    }  }  if (randomizeStartWeights) {    double scale=1e-4;    OptimizerUtils.randomizeWeightsInPlace(weights,scale);  }  return weights;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  @Override public void doGet(BaseSolrResource endpoint,String childId){  SolrQueryResponse response=endpoint.getSolrResponse();  if (childId != null) {    String key=getIgnoreCase() ? childId.toLowerCase(Locale.ROOT) : childId;    if (!managedWords.contains(key))     throw new SolrException(ErrorCode.NOT_FOUND,String.format(Locale.ROOT,"%s not found in %s",childId,getResourceId()));    response.add(childId,key);  } else {    response.add(WORD_SET_JSON_FIELD,buildMapToStore(managedWords));  }}  }
class C{  public void addAnswer(DNSRecord rec,long now) throws IOException {  if (rec != null) {    if ((now == 0) || !rec.isExpired(now)) {      MessageOutputStream record=new MessageOutputStream(512,this);      record.writeRecord(rec,now);      byte[] byteArray=record.toByteArray();      if (byteArray.length < this.availableSpace()) {        _answers.add(rec);        _answersBytes.write(byteArray,0,byteArray.length);      } else {        throw new IOException("message full");      }    }  }}  }
class C{  public void testFloatVersionField() throws Exception {  updateJ(jsonAdd(sdoc("id","aaa","name","a1","my_version_f","10.01")),params("update.chain","external-version-float"));  assertU(commit());  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","4.2")),params("update.chain","external-version-float"));  assertU(commit());  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a1'}}");  deleteAndGetVersion("aaa",params("del_version","7","update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a1'}}");  assertU(commit());  updateJ(jsonAdd(sdoc("id","aaa","name","a2","my_version_f","10.02")),params("update.chain","external-version-float"));  deleteAndGetVersion("aaa",params("del_version","8","update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a2'}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:a2"),"/response/numFound==1");  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a2'}}");  deleteAndGetVersion("aaa",params("del_version","10.10","update.chain","external-version-float"));  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","10.05")),params("update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:XX"),"/response/numFound==0");  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}");  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","10.09")),params("update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:XX"),"/response/numFound==0");  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}");}  }
class C{  public void saveFrame(){  try {    g.save(savePath("screen-" + nf(frameCount,4) + ".tif"));  } catch (  SecurityException se) {    System.err.println("Can't use saveFrame() when running in a browser, " + "unless using a signed applet.");  }}  }
class C{  public static byte[] decode(char[] in){  int iLen=in.length;  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=0;  int op=0;  while (ip < iLen) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iLen ? in[ip++] : 'A';    int i3=ip < iLen ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public void checkDistribution(int grpSize,int partCnt) throws Exception {  IgniteUuid fileId=IgniteUuid.randomUuid();  IgfsGroupDataBlocksKeyMapper mapper=new IgfsGroupDataBlocksKeyMapper(grpSize);  int lastPart=0;  boolean first=true;  for (int i=0; i < 10; i++) {    boolean firstInGroup=true;    for (int j=0; j < grpSize; j++) {      int part=partition(mapper,fileId,i * grpSize + j,partCnt);      if (firstInGroup) {        if (first)         first=false; else         assert checkPartition(lastPart,part,partCnt) : "[fileId = " + fileId + ", i="+ i+ ", j="+ j+ ", grpSize= "+ grpSize+ ", partCnt="+ partCnt+ ", lastPart="+ lastPart+ ", part="+ part+ ']';        firstInGroup=false;      } else       assert part == lastPart;      lastPart=part;    }  }}  }
class C{  public double calcTargetPotentialDamage(Targetable target){  if (!(target instanceof Entity)) {    return 0;  }  Entity entity=(Entity)target;  return getMaxDamageAtRange(entity,1,false,false);}  }
class C{  public static Response.Builder readHttp2HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String value=headerBlock.get(i).value.utf8();    if (name.equals(RESPONSE_STATUS)) {      status=value;    } else     if (!HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(name)) {      headersBuilder.add(name.utf8(),value);    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse("HTTP/1.1 " + status);  return new Response.Builder().protocol(Protocol.HTTP_2).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public AlreadyBoundException(){  super();}  }
class C{  public static void logDebug(String message){  System.out.println(message);}  }
class C{  public void remove(){  this.next();}  }
class C{  public Span adjust(int offset,int n){  if (offset < 0)   return this;  if (offset < end) {    end+=n;    if (end < offset)     end=offset;  } else   return this;  if (offset < start) {    start+=n;    if (start < offset)     start=offset;  }  return this;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void listadoprestamosenelaboracionverExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_LISTADO_PRESTAMOS_VER,request);  List prestamosConNotas=generateListadoPrestamosEnElaboracion(appUser);  CollectionUtils.transform(prestamosConNotas,PrestamoToPO.getInstance(request.getLocale(),services));  request.setAttribute(PrestamosConstants.LISTA_PRESTAMOS_KEY,prestamosConNotas);  request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR,new Boolean(true));  request.setAttribute(PrestamosConstants.VER_COLUMNA_NOTAS,new Boolean(true));  request.setAttribute(PrestamosConstants.VER_COLUMNA_SELECCIONAR,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_LISTADO_VER_EN_ELABORACION);  setReturnActionFordward(request,mapping.findForward("listado_prestamo"));}  }
class C{  public void increment(final int index){  if (index >= mHisto.length) {    mCount++;    return;  }  mHisto[index]++;}  }
class C{  @Override public void onContainersCompleted(List<ContainerStatus> statuses){  List<SamzaResourceStatus> samzaResrcStatuses=new ArrayList<>();  for (  ContainerStatus status : statuses) {    log.info("Container completed from RM " + status);    SamzaResourceStatus samzaResrcStatus=new SamzaResourceStatus(status.getContainerId().toString(),status.getDiagnostics(),status.getExitStatus());    samzaResrcStatuses.add(samzaResrcStatus);    int completedContainerID=getIDForContainer(status.getContainerId().toString());    log.info("Completed container had ID: {}",completedContainerID);    if (completedContainerID != INVALID_YARN_CONTAINER_ID) {      if (state.runningYarnContainers.containsKey(completedContainerID)) {        log.info("Removing container ID {} from completed containers",completedContainerID);        state.runningYarnContainers.remove(completedContainerID);        if (status.getExitStatus() != ContainerExitStatus.SUCCESS)         state.failedContainersStatus.put(status.getContainerId().toString(),status);      }    }  }  clusterManagerCallback.onResourcesCompleted(samzaResrcStatuses);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF:    return basicSetVarRef(null,msgs);case ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION:  return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void loadTxMtd(JobConf job,FileSystem fs,Path txMtdDir,TfUtils agents) throws IOException {  if (!isApplicable())   return;  _finalMaps=new HashMap<Integer,HashMap<String,String>>();  if (fs.isDirectory(txMtdDir)) {    for (int i=0; i < _colList.length; i++) {      int colID=_colList[i];      Path path=new Path(txMtdDir + "/Recode/" + agents.getName(colID)+ TfUtils.TXMTD_RCD_MAP_SUFFIX);      TfUtils.checkValidInputFile(fs,path,true);      HashMap<String,String> map=new HashMap<String,String>();      Pair<String,String> pair=new Pair<String,String>();      BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(path)));      String line=null;      while ((line=br.readLine()) != null) {        DecoderRecode.parseRecodeMapEntry(line,pair);        map.put(pair.getKey(),pair.getValue());      }      br.close();      _finalMaps.put(colID,map);    }  } else {    fs.close();    throw new RuntimeException("Path to recode maps must be a directory: " + txMtdDir);  }}  }
class C{  public void clear() throws KeeperException, InterruptedException {  List<String> childNames=zookeeper.getChildren(dir,null,true);  for (  String childName : childNames) {    zookeeper.delete(dir + "/" + childName,-1,true);  }}  }
class C{  private void testImportNoFile(TrackFileFormat trackFileFormat){  deleteExternalStorageFiles(trackFileFormat);  importTracks(trackFileFormat);  EndToEndTestUtils.SOLO.waitForText(getImportErrorMessage(trackFileFormat));  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);}  }
class C{  private void deleteTodo(HttpServletRequest request,HttpServletResponse response){  AsyncContext ctx=request.startAsync();  runAsync(ctx,null);}  }
class C{  private List<Integer> generateTableOrdering(List<Integer> defaultTableOrdering){  List<Integer> tableOrdering=new ArrayList<Integer>(this.tables.size());  if (defaultTableOrdering == null) {    defaultTableOrdering=defaultTableOrdering();  }  Set<Integer> tablesInFont=new TreeSet<Integer>(this.tables.keySet());  for (  Integer tag : defaultTableOrdering) {    if (this.hasTable(tag)) {      tableOrdering.add(tag);      tablesInFont.remove(tag);    }  }  for (  Integer tag : tablesInFont) {    tableOrdering.add(tag);  }  return tableOrdering;}  }
class C{  private void handleCheckConflicts(Operation op){  TransactionServiceState existing=getState(op);  ConflictCheckRequest req=op.getBody(ConflictCheckRequest.class);  ConflictCheckResponse res=new ConflictCheckResponse();  res.subStage=existing.taskSubStage;  res.serviceIsInWriteSet=existing.modifiedLinks.contains(req.serviceLink);  boolean abort=false;  if (existing.taskSubStage == SubStage.COLLECTING || existing.taskSubStage == SubStage.RESOLVING) {    if (!compareTo(op.getReferer().getPath())) {      logInfo("Conflicting transaction %s is trying to commit, aborting this transaction...",op.getReferer().getPath());      abort=true;      updateStage(op,SubStage.ABORTING);    }  }  op.setBodyNoCloning(res);  op.complete();  if (abort) {    handleAbort(existing);  }}  }
class C{  private URI findVolumeInSubGroup(List<VolumeRestRep> volumesInCopy,String subGroup){  for (  VolumeRestRep fullCopyTargetVol : volumesInCopy) {    VolumeRestRep fullCopySourceVol=fcTargetToSourceMap.get(fullCopyTargetVol.getId());    if (fullCopySourceVol == null && fullCopyTargetVol.getProtection() != null && fullCopyTargetVol.getProtection().getFullCopyRep() != null && fullCopyTargetVol.getProtection().getFullCopyRep().getAssociatedSourceVolume() != null) {      fullCopySourceVol=getClient().blockVolumes().get(fullCopyTargetVol.getProtection().getFullCopyRep().getAssociatedSourceVolume());    }    if (fullCopySourceVol == null) {      continue;    }    if (fullCopySourceVol.getProtection() != null && fullCopySourceVol.getProtection().getRpRep() != null) {      String tgtSubGroup=String.format("%s-RPTARGET",subGroup);      if (fullCopySourceVol.getReplicationGroupInstance() != null && (fullCopySourceVol.getReplicationGroupInstance().equals(subGroup) || fullCopySourceVol.getReplicationGroupInstance().equals(tgtSubGroup))) {        return fullCopyTargetVol.getId();      }    } else {      if (fullCopySourceVol.getReplicationGroupInstance() != null && fullCopySourceVol.getReplicationGroupInstance().equals(subGroup)) {        return fullCopyTargetVol.getId();      }    }  }  return null;}  }
class C{  protected synchronized static void installShutdownHook(){  if (Config.parms.getBoolean("sh") && shutdownHookThread == null) {    Runtime.getRuntime().addShutdownHook(shutdownHookThread=new ShutdownHook());    Log.logger.fine("Signal handler installed");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.NUM_EXPR___NAME_1:    return getName_1();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_11:  return getAnonymous_numExpr_1_1();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_21:return getAnonymous_numExpr_2_1();case UmplePackage.NUM_EXPR___ORDINAL_OP_1:return getOrdinalOp_1();case UmplePackage.NUM_EXPR___NAME_2:return getName_2();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_31:return getAnonymous_numExpr_3_1();case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_41:return getAnonymous_numExpr_4_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TestGenerationResult waitForResult(int timeout){  try {    long start=System.currentTimeMillis();    Set<ClientNodeRemote> clients=MasterServices.getInstance().getMasterNode().getClientsOnceAllConnected(timeout);    if (clients == null) {      logger.error("Could not access client process");      return TestGenerationResultBuilder.buildErrorResult("Could not access client process");    }    for (    ClientNodeRemote client : clients) {      long passed=System.currentTimeMillis() - start;      long remaining=timeout - passed;      if (remaining <= 0) {        remaining=1;      }      boolean finished=client.waitUntilFinished(remaining);      if (!finished) {        logger.error("Class " + Properties.TARGET_CLASS + ". Clients have not finished yet, although a timeout occurred.\n"+ MasterServices.getInstance().getMasterNode().getSummaryOfClientStatuses());      }    }  } catch (  InterruptedException e) {  }catch (  RemoteException e) {    String msg="Class " + Properties.TARGET_CLASS + ". Lost connection with clients.\n"+ MasterServices.getInstance().getMasterNode().getSummaryOfClientStatuses();    if (didClientJVMCrash()) {      String err=getAndDeleteHsErrFile();      msg+="The JVM of the client process crashed:\n" + err;      logger.error(msg);    } else {      logger.error(msg,e);    }  }  killProcess();  LoggingUtils.getEvoLogger().info("* Computation finished");  return null;}  }
class C{  public DownloadTask addDownloadTask(DownloadTask task,DownloadTaskListener listener){  DownloadTask downloadTask=currentTaskList.get(task.getId());  if (null != downloadTask && downloadTask.getDownloadStatus() != DownloadStatus.DOWNLOAD_STATUS_CANCEL) {    Log.d(TAG,"task already exist");    return downloadTask;  }  currentTaskList.put(task.getId(),task);  task.setDownloadStatus(DownloadStatus.DOWNLOAD_STATUS_PREPARE);  task.setDownloadDao(downloadDao);  task.setHttpClient(client);  task.addDownloadListener(listener);  if (getDBTaskById(task.getId()) == null) {    DownloadDBEntity dbEntity=new DownloadDBEntity(task.getId(),task.getToolSize(),task.getCompletedSize(),task.getUrl(),task.getSaveDirPath(),task.getFileName(),task.getDownloadStatus());    downloadDao.insertOrReplace(dbEntity);  }  Future future=executorService.submit(task);  futureMap.put(task.getId(),future);  return null;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  DataFlavor[] flavors=getTransferDataFlavors();  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  protected Rectangle computePopupBounds(int px,int py,int pw,int ph){  Toolkit toolkit=Toolkit.getDefaultToolkit();  Rectangle screenBounds;  int listWidth=getList().getPreferredSize().width;  Insets margin=comboBox.getInsets();  if (hasScrollBars()) {    px+=margin.left;    pw=Math.max(pw - margin.left - margin.right,listWidth + 16);  } else {    px+=margin.left;    pw=Math.max(pw - LEFT_SHIFT - margin.left,listWidth);  }  GraphicsConfiguration gc=comboBox.getGraphicsConfiguration();  Point p=new Point();  SwingUtilities.convertPointFromScreen(p,comboBox);  if (gc == null) {    screenBounds=new Rectangle(p,toolkit.getScreenSize());  } else {    Insets screenInsets=Toolkit.getDefaultToolkit().getScreenInsets(gc);    screenBounds=new Rectangle(gc.getBounds());    screenBounds.width-=(screenInsets.left + screenInsets.right);    screenBounds.height-=(screenInsets.top + screenInsets.bottom);    screenBounds.x+=screenInsets.left;    screenBounds.y+=screenInsets.top;  }  if (isDropDown()) {    if (isEditable()) {      py-=margin.bottom + 2;    } else {      py-=margin.bottom;    }  } else {    int yOffset=-margin.top;    int selectedIndex=comboBox.getSelectedIndex();    if (selectedIndex <= 0) {      py=-yOffset;    } else {      py=-yOffset - list.getCellBounds(0,selectedIndex - 1).height;    }  }  Rectangle rect=new Rectangle(px,Math.max(py,p.y + screenBounds.y),Math.min(screenBounds.width,pw),Math.min(screenBounds.height - 40,ph));  if (rect.height < ph) {    rect.width+=16;  }  return rect;}  }
class C{  public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {  OutputStream os=null;  try {    os=toBufferedOutputStream(out.getOutputStream());  } catch (  IOException ioe) {    IOUtil.closeEL(os);    throw ioe;  }  copy(is,os,closeIS,true);}  }
class C{  public static byte[] bitmapToBytes(Bitmap bm){  byte[] bytes=null;  if (bm != null) {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    bm.compress(Bitmap.CompressFormat.PNG,100,baos);    bytes=baos.toByteArray();  }  return bytes;}  }
class C{  @Override public void completeKeyword(Keyword keyword,ContentAssistContext contentAssistContext,ICompletionProposalAcceptor acceptor){  List<Keyword> suppressKeywords=new ArrayList<Keyword>();  EObject rootModel=contentAssistContext.getRootModel();  if (rootModel instanceof TransitionSpecification) {    suppressKeywords(suppressKeywords,(TransitionSpecification)rootModel);  } else   if (rootModel instanceof SimpleScope) {    suppressKeywords(suppressKeywords,(SimpleScope)rootModel);  } else   if (rootModel instanceof StatechartSpecification) {    suppressKeywords(suppressKeywords,(StatechartSpecification)rootModel);  }  EObject currentModel=contentAssistContext.getCurrentModel();  if (currentModel instanceof InterfaceScope) {    suppressKeywords(suppressKeywords,(InterfaceScope)currentModel);  }  if (currentModel instanceof FeatureCall) {    suppressKeywords(suppressKeywords,(FeatureCall)currentModel);  }  if (currentModel instanceof ElementReferenceExpression) {    suppressKeywords(suppressKeywords,(ElementReferenceExpression)currentModel);  }  if (currentModel instanceof InternalScope) {    suppressKeywords(suppressKeywords,(InternalScope)currentModel);  }  if (!suppressKeywords.contains(keyword)) {    super.completeKeyword(keyword,contentAssistContext,new AcceptorDelegate(acceptor));  }}  }
class C{  public static void writeField(final Object target,final String fieldName,final Object value) throws IllegalAccessException {  FieldUtils.writeField(target,fieldName,value,false);}  }
class C{  public static void sleep(long millis){  if (mockSleepQueue == null) {    sleepUninterruptibly(millis,TimeUnit.MILLISECONDS);  } else {    try {      boolean isMultiPass=mockSleepQueue.take();      rollMockClockMillis(millis);      if (isMultiPass)       mockSleepQueue.offer(true);    } catch (    InterruptedException e) {    }  }}  }
class C{  public boolean isMappedSuperclass(){  return getClassAccessor().isMappedSuperclass();}  }
class C{  protected void computeTopology(final IScope scope) throws GamaRuntimeException {  final IExpression expr=species.getFacet(IKeyword.TOPOLOGY);  final boolean fixed=species.isGraph() || species.isGrid();  if (expr != null) {    if (!fixed) {      topology=GamaTopologyType.staticCast(scope,scope.evaluate(expr,host).getValue(),false);      return;    }    throw GamaRuntimeException.warning("Impossible to assign a topology to " + species.getName() + " as it already defines one.",scope);  }  if (species.isGrid()) {    topology=buildGridTopology(scope,species,getHost());  } else   if (species.isGraph()) {    final IExpression spec=species.getFacet(IKeyword.EDGE_SPECIES);    final String edgeName=spec == null ? "base_edge" : spec.literalValue();    final ISpecies edgeSpecies=scope.getSimulation().getModel().getSpecies(edgeName);    final IType<?> edgeType=scope.getType(edgeName);    final IType<?> nodeType=getType().getContentType();    final GamaSpatialGraph g=new GamaSpatialGraph(GamaListFactory.create(),false,false,new AbstractGraphNodeAgent.NodeRelation(),edgeSpecies,scope,nodeType,edgeType);    this.addListener(g);    g.postRefreshManagementAction(scope);    topology=new GraphTopology(scope,this.getHost(),g);  } else {    topology=new ContinuousTopology(scope,this.getHost());  }}  }
class C{  public VcfHeader(){  mGenericMetaInformationLines=new ArrayList<>();  mSampleNames=new ArrayList<>();  mContigLines=new ArrayList<>();  mAltLines=new ArrayList<>();  mFilterLines=new ArrayList<>();  mInfoLines=new ArrayList<>();  mFormatLines=new ArrayList<>();  mSampleLines=new ArrayList<>();  mPedigreeLines=new ArrayList<>();  mNameToColumn=new HashMap<>();}  }
class C{  public void updateBitmap(int x1,int y1,int w,int h,byte[] bytes,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkBitmap.write(x1,y1,w,h,bytes,properties,link.dos);}  }
class C{  public static void copy(File srcDir,File relSrcFile,File destDir,File relDestFile) throws IOException {  File finalSrcFile=(srcDir != null) ? new File(srcDir,relSrcFile.getPath()) : relSrcFile;  File relDestDir=relDestFile.getParentFile();  if (relDestDir != null) {    File finalDestDir=(destDir != null) ? new File(destDir,relDestDir.getPath()) : relDestDir;    mkdirs(finalDestDir);  }  File finalDestFile=new File(destDir,relDestFile.getPath());  Files.copy(finalSrcFile.toPath(),finalDestFile.toPath(),StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);}  }
class C{  public void postStop(){}  }
class C{  public boolean isIntersect(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer04._ATT_FILTER).equals(XPath2FilterContainer04._ATT_FILTER_VALUE_INTERSECT);}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  @Override public ParcelableMqttMessage createFromParcel(Parcel parcel){  return new ParcelableMqttMessage(parcel);}  }
class C{  protected static Map translateQueryFields(AxSfQueryField field,int fldid,AxSf axsfQ){  Map idsToValidate=new HashMap();  try {    if (fldid == 5) {      idsToValidate.put(new Integer(fldid),field.getValue());    }    if ((fldid == 7 || fldid == 8) && !field.getOperator().equals(com.ieci.tecdoc.common.isicres.Keys.QUERY_DEPEND_OF_TEXT_VALUE)) {      idsToValidate.put(new Integer(fldid),field.getValue());    }    if (axsfQ instanceof AxSfIn) {      if ((fldid == 13 || fldid == 16)) {        idsToValidate.put(new Integer(fldid),field.getValue());      }    } else {      if ((fldid == 12))       idsToValidate.put(new Integer(fldid),field.getValue());    }  } catch (  Exception e) {  }  return idsToValidate;}  }
class C{  public DexDataWriter(@Nonnull OutputStream output,int filePosition){  this(output,filePosition,256 * 1024);}  }
class C{  public void handleSelection(int row){  int[] sel=TABLE.getSelectedRows();  if (sel.length == 0) {    handleNoSelection();    return;  }  File selectedFile=getFile(sel[0]);  LAUNCH_ACTION.setEnabled(true);  LAUNCH_OS_ACTION.setEnabled(true);  DELETE_ACTION.setEnabled(true);  SEND_TO_ITUNES_ACTION.setEnabled(true);  if (selectedFile != null && !selectedFile.getName().endsWith(".torrent")) {    CREATE_TORRENT_ACTION.setEnabled(sel.length == 1);  }  if (selectedFile != null) {    SEND_TO_FRIEND_ACTION.setEnabled(sel.length == 1);  }  if (sel.length == 1 && selectedFile.isFile() && selectedFile.getParentFile() != null) {    OPEN_IN_FOLDER_ACTION.setEnabled(true);  } else {    OPEN_IN_FOLDER_ACTION.setEnabled(false);  }  if (sel.length == 1) {    LibraryMediator.instance().getLibraryCoverArt().setFile(getSelectedLibraryLines()[0].getFile());  }}  }
class C{  public Builder addCapHandlers(@NonNull Iterable<CapHandler> handlers){  for (  CapHandler curHandler : handlers) {    addCapHandler(curHandler);  }  return this;}  }
class C{  static public void numberSort(@Nonnull String[] values) throws NumberFormatException {  for (int i=0; i <= values.length - 2; i++) {    for (int j=values.length - 2; j >= i; j--) {      if (Integer.parseInt(values[j]) > Integer.parseInt(values[j + 1])) {        String temp=values[j];        values[j]=values[j + 1];        values[j + 1]=temp;      }    }  }}  }
class C{  @Override @SuppressWarnings("unchecked") HashMap.Entry<K,V>[] newElementArray(int s){  return new LinkedHashMapEntry[s];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.040 -0500",hash_original_method="E2DD3866058120BA248E0EBF124B1A36",hash_generated_method="D16830E2241A31CF3EA28FD7BB070D36") public static void fill(float[] array,int start,int end,float value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  static <T0,T1,T2>Tuple3<T0,T1,T2> of(T0 e0,T1 e1,T2 e2){  return new Tuple3Impl<>(e0,e1,e2);}  }
class C{  public TokenException(String msg){  super(msg);}  }
class C{  private Cuboid(String worldName,int x1,int y1,int z1,int x2,int y2,int z2){  this.worldName=worldName;  this.x1=Math.min(x1,x2);  this.x2=Math.max(x1,x2);  this.y1=Math.min(y1,y2);  this.y2=Math.max(y1,y2);  this.z1=Math.min(z1,z2);  this.z2=Math.max(z1,z2);}  }
class C{  public boolean isString(String key){  Object val=get(key);  return val instanceof String;}  }
class C{  public void countUr92sAndQueryDuplexIdentityInfo(){  if (thisone == null) {    log.error("called countUR92sAndQueryDuplexInfo before thisone is initialized");    return;  }  if ((waitingForIplReply == true) || (swingTmrIplQuery == null) || (swingTmrDuplexInfoQuery == null)|| (swingTmrIplQuery.isRunning())|| (swingTmrDuplexInfoQuery.isRunning())) {    thisone.firePropertyChange(DPLX_PC_STAT_LN_UPDATE," ","ErrorReadingTooSoon");    return;  }  invalidateDuplexGroupIdentityInfo();  numUr92=0;  sendUr92IplQuery();  thisone.firePropertyChange(DPLX_PC_STAT_LN_UPDATE," ","ProcessingInitialStatusMessage");  swingTmrIplQuery.stop();  swingTmrIplQuery.setInitialDelay(LnDplxGrpInfoImplConstants.IPL_QUERY_DELAY);  swingTmrIplQuery.setRepeats(false);  swingTmrIplQuery.restart();}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  public Builder enableRenderer(int index){  return apply(new SetSelectedTrack(tag,index,ExoPlayer.TRACK_DEFAULT));}  }
class C{  public boolean isRevocationEnabled(){  return revocationEnabled;}  }
class C{  public DisconnectedEvent(Object source){  super(source,DISCONNECTED);}  }
class C{  public static BigInteger ressol(BigInteger a,BigInteger p) throws IllegalArgumentException {  BigInteger v=null;  if (a.compareTo(ZERO) < 0) {    a=a.add(p);  }  if (a.equals(ZERO)) {    return ZERO;  }  if (p.equals(TWO)) {    return a;  }  if (p.testBit(0) && p.testBit(1)) {    if (jacobi(a,p) == 1) {      v=p.add(ONE);      v=v.shiftRight(2);      return a.modPow(v,p);    }    throw new IllegalArgumentException("No quadratic residue: " + a + ", "+ p);  }  long t=0;  BigInteger k=p.subtract(ONE);  long s=0;  while (!k.testBit(0)) {    s++;    k=k.shiftRight(1);  }  k=k.subtract(ONE);  k=k.shiftRight(1);  BigInteger r=a.modPow(k,p);  BigInteger n=r.multiply(r).remainder(p);  n=n.multiply(a).remainder(p);  r=r.multiply(a).remainder(p);  if (n.equals(ONE)) {    return r;  }  BigInteger z=TWO;  while (jacobi(z,p) == 1) {    z=z.add(ONE);  }  v=k;  v=v.multiply(TWO);  v=v.add(ONE);  BigInteger c=z.modPow(v,p);  while (n.compareTo(ONE) == 1) {    k=n;    t=s;    s=0;    while (!k.equals(ONE)) {      k=k.multiply(k).mod(p);      s++;    }    t-=s;    if (t == 0) {      throw new IllegalArgumentException("No quadratic residue: " + a + ", "+ p);    }    v=ONE;    for (long i=0; i < t - 1; i++) {      v=v.shiftLeft(1);    }    c=c.modPow(v,p);    r=r.multiply(c).remainder(p);    c=c.multiply(c).remainder(p);    n=n.multiply(c).mod(p);  }  return r;}  }
class C{  public ConvertOgreBinaryVisualPanel1(){  initComponents();}  }
class C{  public void beginProcessSubTokens(){}  }
class C{  private void stopScan(){  mIsScanInProgress=false;  mHandler.removeCallbacks(mAutoScanRunnable);}  }
class C{  private int fixFontSize(float pointSize){  if (screenRes != 72) {    pointSize=(int)Math.round(pointSize * screenRes / 72.0);  }  return (int)pointSize;}  }
class C{  public void rejectInvitation() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.rejectInvitation();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void handleRegionLossEvent(SystemMemberRegionEvent event){  String memberId=event.getMemberId();  SystemMemberJmx systemMemberJmx=(SystemMemberJmx)findCacheOrAppVmById(memberId);  if (systemMemberJmx != null) {    systemMemberJmx.handleRegionLoss(event);  }}  }
class C{  protected int calculateChecksum(){  int checksum=cfgbuf.checksum_ts();  if (!isSwcChecksumEnabled || swcDefSignatureChecksums == null || swcDefSignatureChecksums.size() == 0) {    checksum+=swcContext.checksum();  }  return checksum;}  }
class C{  private void initTimer(float levelDuration){  _levelDuration=levelDuration;  _timePassed=0.0f;  float scaleY=_height / 1920f;  scaleY=scaleY + ((1 - scaleY) * .5f);  int barHeight=(int)((BAR_HEIGHT + ((_density - 1.5) * 30)) * scaleY);  if (levelDuration > 0) {    Rectangle timerBarBackground=new Rectangle(_width / 2,_height - barHeight / 2,_width,barHeight,_engine.getVertexBufferObjectManager());    timerBarBackground.setColor(_backgroundColor);    attachChild(timerBarBackground);    timerBarBackground=new Rectangle(_width / 2,_height - barHeight / 2,_width,barHeight,_engine.getVertexBufferObjectManager());    timerBarBackground.setColor(new Color(0,0,0,.3f));    attachChild(timerBarBackground);    _timerBar=new Rectangle(_width / 2,_height - barHeight / 2,_width,barHeight,_engine.getVertexBufferObjectManager());    _timerBar.setColor(ColorUtils.convertARGBPackedIntToColor(0xFFFDD420));    _timerBar.setScaleX(0);    _timerBar.setScaleCenterX(0);    attachChild(_timerBar);    Typeface typeFace=Typeface.createFromAsset(GoogleFlipGameApplication.sContext.getAssets(),FontFaceType.FUTURA_MEDIUM.getAssetName());    Font smallWhiteFont=FontFactory.create(_engine.getFontManager(),_engine.getTextureManager(),256,256,TextureOptions.BILINEAR,typeFace,20 * _density,Color.WHITE_ARGB_PACKED_INT);    smallWhiteFont.load();    _timeText=new Text(_width,_height - barHeight / 2,smallWhiteFont,"00.0",_engine.getVertexBufferObjectManager());    _timeText.setOffsetCenterX(0);    _timeText.setX(_width - (_timeText.getWidth() + (15 * _density)));    _timeText.setText(String.format("%.01f",0.0f));    attachChild(_timeText);  }}  }
class C{  private void queryForComputeStates(EnumerationContext ctx,Map<Long,GCPInstance> vms){  logInfo("Enumerating Local Compute States");  QueryTask.Query.Builder instanceIdFilterParentQuery=QueryTask.Query.Builder.create(QueryTask.Query.Occurance.MUST_OCCUR);  for (  Long instanceId : vms.keySet()) {    QueryTask.Query instanceIdFilter=QueryTask.Query.Builder.create(QueryTask.Query.Occurance.SHOULD_OCCUR).addFieldClause(ComputeState.FIELD_NAME_ID,instanceId.toString()).build();    instanceIdFilterParentQuery.addClause(instanceIdFilter);  }  QueryTask.Query query=QueryTask.Query.Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK,ctx.enumRequest.resourcePoolLink).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,ctx.enumRequest.resourceLink()).build().addBooleanClause(instanceIdFilterParentQuery.build());  QueryTask q=QueryTask.Builder.createDirectTask().addOption(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT).setQuery(query).build();  q.tenantLinks=ctx.computeHostDesc.tenantLinks;  sendRequest(Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setConnectionSharing(true).setBody(q).setCompletion(null));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return updateJournalTotal();}  }
class C{  public static byte[] savePng(Bitmap src) throws ImageSaveException {  return save(src,Bitmap.CompressFormat.PNG,100);}  }
class C{  @Override public final String toString(){  return image;}  }
class C{  public VmIdentifier(String uriString) throws URISyntaxException {  URI u;  try {    u=canonicalize(uriString);  } catch (  URISyntaxException e) {    if (uriString.startsWith("//")) {      throw e;    }    u=canonicalize("//" + uriString);  }  uri=u;  validate();}  }
class C{  private void removeElementAt(int at){  if (at < m_firstFree) {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    int offset=at & m_MASK;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize]; else       System.arraycopy(block,offset + 1,block,offset,copylen);      if (index < maxindex) {        int[] next=m_map[index + 1];        if (next != null)         block[m_blocksize - 1]=(next != null) ? next[0] : 0;      } else       block[m_blocksize - 1]=0;      offset=0;      ++index;    }  }  --m_firstFree;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final String blogPath=request.getParameter(BLOG_PATH_PARAMETER);  if (!recaptchaService.getEnabled() || recaptchaService.validate(request)) {    final String author=request.getParameter(AUTHOR_PARAMETER);    final String comment=request.getParameter(COMMENT_PARAMETER);    final String commentPath=request.getParameter(COMMENT_PATH_PARAMETER);    try {      resolver=resourceResolverFactory.getAdministrativeResourceResolver(null);      String parentPath=StringUtils.isNotBlank(commentPath) ? commentPath : blogPath.replace(PublickConstants.BLOG_PATH,PublickConstants.COMMENTS_PATH);      JcrResourceUtil.createPath(parentPath,JcrResourceConstants.NT_SLING_ORDERED_FOLDER,JcrResourceConstants.NT_SLING_ORDERED_FOLDER,resolver.adaptTo(Session.class),true);      String nodeName=getCommentName(parentPath);      Map<String,Object> properties=new HashMap<String,Object>();      properties.put(PublickConstants.COMMENT_PROPERTY_AUTHOR,author);      properties.put(PublickConstants.COMMENT_PROPERTY_COMMENT,comment);      properties.put(JcrConstants.JCR_PRIMARYTYPE,PublickConstants.NODE_TYPE_COMMENT);      properties.put(PublickConstants.COMMENT_PROPERTY_USER_AGENT,httpService.getUserAgent(request));      properties.put(PublickConstants.COMMENT_PROPERTY_USER_IP,httpService.getIPAddress(request));      properties.put(PublickConstants.COMMENT_PROPERTY_REFERRER,httpService.getReferrer(request));      properties.put(PublickConstants.COMMENT_PROPERTY_DISPLAY,true);      properties.put(PublickConstants.COMMENT_PROPERTY_EDITED,false);      Resource commentResource=resolver.create(resolver.getResource(parentPath),nodeName,properties);      Node commentNode=commentResource.adaptTo(Node.class);      commentNode.addMixin(NodeType.MIX_CREATED);      commentNode.addMixin(NodeType.MIX_REFERENCEABLE);      resolver.commit();      akismetService.isSpam(commentResource);    } catch (    LoginException e) {      LOGGER.error("Could not login",e);    }catch (    RepositoryException e) {      LOGGER.error("Could not create comment node",e);    }catch (    Exception e) {      LOGGER.error("Could not create comment node",e);    }  }  response.sendRedirect(blogPath + ".html");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void advanceToNextPageOrFinish(){  if (canFlipToNextPage()) {    getContainer().showPage(getNextPage());  } else   if (canFinishEarly()) {    if (getWizard().performFinish()) {      ((WizardDialog)getContainer()).close();    }  }}  }
class C{  public static Volume fetchVplexVolume(DbClient dbClient,Volume volume){  Volume vplexVolume=null;  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(volume.getId().toString()),queryResults);  if (queryResults.iterator().hasNext()) {    while (queryResults.iterator().hasNext()) {      URI vplexVolumeURI=queryResults.iterator().next();      if (vplexVolumeURI != null) {        vplexVolume=dbClient.queryObject(Volume.class,vplexVolumeURI);        break;      }    }  }  return vplexVolume;}  }
class C{  public StaticMap https(){  this.https=true;  return this;}  }
class C{  public boolean isInterim(){  return interim;}  }
class C{  public final void testValidateFails(){  MinLengthValidator minLengthValidator=new MinLengthValidator("foo",2);  assertFalse(minLengthValidator.validate("a"));}  }
class C{  public Vector3f min(Vector3fc v){  this.x=x < v.x() ? x : v.x();  this.y=y < v.y() ? y : v.y();  this.z=z < v.z() ? z : v.z();  return this;}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  l=Integer.parseInt(tokenizer.nextToken());  t=Integer.parseInt(tokenizer.nextToken());  r=Integer.parseInt(tokenizer.nextToken());  b=Integer.parseInt(tokenizer.nextToken());  style=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  fontName=nextToken.substring(1,nextToken.length() - 1);  fontSize=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  numCols=Integer.parseInt(nextToken.substring(0,nextToken.lastIndexOf("|")));  String end=sourceData.substring(sourceData.indexOf("|") + 1,sourceData.length());  StringTokenizer tokenizer2=new StringTokenizer(end,"|");  int i=0;  while (tokenizer2.hasMoreTokens()) {    coldefs.put(new Integer(i++),new TColDef(tokenizer2.nextToken()));  }}  }
class C{  private void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (streaming) {    while (byteCount > 0) {      int bytesWritten=IoBridge.sendto(fd,buffer,offset,byteCount,0,null,0);      byteCount-=bytesWritten;      offset+=bytesWritten;    }  } else {    IoBridge.sendto(fd,buffer,offset,byteCount,0,null,port);  }}  }
class C{  public void focusLost(FocusEvent evt){}  }
class C{  public Tree(){  super();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DataSetReader(Operator operator,List<ColumnMetaData> metaData,boolean isFaultTolerant){  this.operator=operator;  this.isFaultTolerant=isFaultTolerant;  this.metaData=metaData;}  }
class C{  @Override public java.lang.Iterable<Object> iterable(final IScope scope){  return ImmutableList.copyOf(getMatrix());}  }
class C{  protected boolean beforeSave(boolean newRecord){  String rt=getRecurringType();  if (rt == null) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"RecurringType"));    return false;  }  if (rt.equals(MRecurring.RECURRINGTYPE_Order) && getC_Order_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_Order_ID"));    return false;  }  if (rt.equals(MRecurring.RECURRINGTYPE_Invoice) && getC_Invoice_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_Invoice_ID"));    return false;  }  if (rt.equals(MRecurring.RECURRINGTYPE_GLJournal) && getGL_JournalBatch_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"GL_JournalBatch_ID"));    return false;  }  if (rt.equals(MRecurring.RECURRINGTYPE_Project) && getC_Project_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_Project_ID"));    return false;  }  return true;}  }
class C{  public boolean supportsPositionedDelete() throws SQLException {  return true;}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public void testTodoCase() throws Exception {  String file="TodoTestCase.java";  String warningMessage=file + ":5: Warning: " + TodoDetector.ISSUE.getBriefDescription(TextFormat.TEXT)+ " ["+ TodoDetector.ISSUE.getId()+ "]\n"+ "    // TODO\n"+ "       ~~~~\n"+ "0 errors, 1 warnings\n";  assertEquals(warningMessage,lintFiles(file));}  }
class C{  public boolean isLast() throws SQLException {  return crsInternal.isLast();}  }
class C{  public void redoLastAction(){  try {    if (undoManager.canRedo())     undoManager.redo();  } catch (  CannotRedoException cre) {    cre.printStackTrace();  }}  }
class C{  public RawDiagnosticFormatter(Options options){  super(null,new SimpleConfiguration(options,EnumSet.of(DiagnosticPart.SUMMARY,DiagnosticPart.DETAILS,DiagnosticPart.SUBDIAGNOSTICS)));}  }
class C{  public static void callSecuredAPI(Context context,String endpoint,HTTP_METHODS methodType,JSONObject requestParams,APIResultCallBack apiResultCallBack,int requestCode){  EndPointInfo apiUtilities=new EndPointInfo();  apiUtilities.setEndPoint(endpoint);  apiUtilities.setHttpMethod(methodType);  if (requestParams != null) {    apiUtilities.setRequestParams(requestParams);  }  APIController apiController=new APIController();  String clientKey=Preference.getString(context,context.getResources().getString(R.string.shared_pref_client_id));  String clientSecret=Preference.getString(context,context.getResources().getString(R.string.shared_pref_client_secret));  if (clientKey != null && !clientKey.isEmpty() && !clientSecret.isEmpty()) {    apiController.setClientDetails(clientKey,clientSecret);  }  apiController.invokeAPI(apiUtilities,apiResultCallBack,requestCode,context.getApplicationContext());}  }
class C{  public static ClassInfo findClass(String fullName){  return classes.get(fullName);}  }
class C{  private Security(){  super();}  }
class C{  public static Range findZBounds(XYZDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result=iterateToFindZBounds(dataset,visibleSeriesKeys,xRange,includeInterval);  return result;}  }
class C{  @Override public void addValue(double value){  long n1=n;  min=min == null ? value : Math.min(min,value);  max=max == null ? value : Math.max(max,value);  sum+=value;  sumOfLogs+=Math.log(value);  sumOfSquares+=value * value;  digest.add(value);  n++;  double delta, delta_n, delta_n2, term1;  delta=value - M1;  delta_n=delta / n;  delta_n2=delta_n * delta_n;  term1=delta * delta_n * n1;  M1+=delta_n;  M4+=term1 * delta_n2 * (n * n - 3 * n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3;  M3+=term1 * delta_n * (n - 2) - 3 * delta_n * M2;  M2+=term1;  checkFlowError(sumOfSquares,sum,sumOfSquares,M1,M2,M3,M4);}  }
class C{  public PI addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void addSelectionListener(SelectionListener l){  if (listeners == null) {    listeners=new ArrayList();  }  listeners.add(l);}  }
class C{  private UCharacterEnums(){}  }
class C{  public static boolean[] copyOfRange(boolean[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      boolean[] copy=new boolean[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public void ignoreRegion(int start,int end){  this.ignoredRegions.add(new Pair<>(start,end));}  }
class C{  public boolean processEvents(List<AsyncEvent> events){  for (  AsyncEvent event : events) {    this.eventsMap.put(event.getKey(),event.getDeserializedValue());  }  return true;}  }
class C{  public Object readResolve() throws ObjectStreamException {  if (generationHistory == null) {    generationHistory=new LinkedList<OutputPort>();  }  if (annotations == null) {    annotations=new Annotations();  }  return this;}  }
class C{  public static boolean hasPermission(Security security,GenericValue userLogin,GenericValue orderHeader){  if (userLogin == null || orderHeader == null)   return false;  if (security.hasEntityPermission("ORDERMGR","_VIEW",userLogin)) {    return true;  } else   if (security.hasEntityPermission("ORDERMGR","_ROLEVIEW",userLogin)) {    List<GenericValue> orderRoles=null;    try {      orderRoles=orderHeader.getRelated("OrderRole",UtilMisc.toMap("partyId",userLogin.getString("partyId")),null,false);    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get OrderRole from OrderHeader",module);    }    if (UtilValidate.isNotEmpty(orderRoles)) {      return true;    }  }  return false;}  }
class C{  public void adjustForNoTerms(long actualUsed){  breaker.addWithoutBreaking(actualUsed);}  }
class C{  public Rest header(final String name,final String value) throws RestException {  try {    this.headers.put(URLEncoder.encode(name,"UTF-8"),URLEncoder.encode(value,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new RestException(e);  }  return this;}  }
class C{  public GridLayoutAnimationController(Animation animation,float columnDelay,float rowDelay){  super(animation);  mColumnDelay=columnDelay;  mRowDelay=rowDelay;}  }
class C{  public synchronized void activityStop(){  if (this.spinnerDialog != null) {    this.spinnerDialog.dismiss();    this.spinnerDialog=null;  }}  }
class C{  public static IJavaElement create(IResource resource,IJavaProject project){  if (resource == null) {    return null;  }  int type=resource.getType();switch (type) {case IResource.PROJECT:    return JavaCore.create((IProject)resource);case IResource.FILE:  return create((IFile)resource,project);case IResource.FOLDER:return create((IFolder)resource,project);case IResource.ROOT:return JavaCore.create((IWorkspaceRoot)resource);default :return null;}}  }
class C{  public boolean isChecked(){  return isChecked;}  }
class C{  public final CC shrinkPrioY(int p){  ver.setShrinkPriority(p);  return this;}  }
class C{  final void updateScrimVisibility(){  if (mContentScrim != null || mStatusBarScrim != null) {    setScrimsShown(getHeight() + mCurrentOffset < getScrimVisibleHeightTrigger());  }}  }
class C{  void validateMirrorOrNull(Mirror mirror){  if ((mirror != null) && !vm.equals(mirror.virtualMachine())) {    throw new VMMismatchException(mirror.toString());  }}  }
class C{  private double estimateTravelTime(Coord startCoord,Coord endCoord,Person person,double now,String mode){  double travelTime=0.0;  if (mode.equals("car")) {    Network network=(Network)scenario.getNetwork();    final Coord coord=startCoord;    Link startLink=NetworkUtils.getNearestLinkExactly(network,coord);    final Coord coord1=endCoord;    Link endLink=NetworkUtils.getNearestLinkExactly(network,coord1);    Path path=this.pathCalculator.calcLeastCostPath(startLink.getToNode(),endLink.getFromNode(),now,person,null);    travelTime=path.travelTime;  } else {    double beelineFactor=scenario.getConfig().plansCalcRoute().getBeelineDistanceFactors().get(mode);    double modeSpeed=scenario.getConfig().plansCalcRoute().getTeleportedModeSpeeds().get(mode);    double distance=CoordUtils.calcEuclideanDistance(startCoord,endCoord);    travelTime=distance * beelineFactor / modeSpeed;  }  return travelTime;}  }
class C{  public static RecipeBrew registerBrewRecipe(Brew brew,Object... inputs){  Preconditions.checkArgument(inputs.length <= 6);  RecipeBrew recipe=new RecipeBrew(brew,inputs);  brewRecipes.add(recipe);  return recipe;}  }
class C{  public void stopLoad(){  loading=false;  this.stopAnimator=true;  setArcToLineAnimator();  setDisAppearAnimator();}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  @Override public void initCPTs(BayesNet bayesNet) throws Exception {  int nMaxParentCardinality=1;  for (int iAttribute=0; iAttribute < bayesNet.m_Instances.numAttributes(); iAttribute++) {    if (bayesNet.getParentSet(iAttribute).getCardinalityOfParents() > nMaxParentCardinality) {      nMaxParentCardinality=bayesNet.getParentSet(iAttribute).getCardinalityOfParents();    }  }  bayesNet.m_Distributions=new Estimator[bayesNet.m_Instances.numAttributes()][nMaxParentCardinality];}  }
class C{  public CertId(X509Certificate issuerCert,SerialNumber serialNumber) throws IOException {  this(issuerCert.getSubjectX500Principal(),issuerCert.getPublicKey(),serialNumber);}  }
class C{  public static String stripTrailingChar(String string,char c){  if (string.length() > 0) {    if (string.charAt(string.length() - 1) == c) {      return string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public Matrix4d scale(Vector3dc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  public void addEventListener2(IImageSharingListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mBroadcaster.addEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  protected int hashCode(char c){  return c;}  }
class C{  public FeedFilter withUser(@Nonnull String username){  FeedFilter copy=basic();  copy.username=fromNullable(emptyToNull(username.trim()));  return fix(copy);}  }
class C{  public ArrayObjectProvider(){  elementType=null;}  }
class C{  public MBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact,Descriptor descriptor){  super(name,description,descriptor);  if (signature == null || signature.length == 0)   signature=MBeanParameterInfo.NO_PARAMS; else   signature=signature.clone();  this.signature=signature;  this.type=type;  this.impact=impact;  this.arrayGettersSafe=MBeanInfo.arrayGettersSafe(this.getClass(),MBeanOperationInfo.class);}  }
class C{  public QuestStateStartsWithCondition(final String questname,final String state){  this.questname=checkNotNull(questname);  this.state=checkNotNull(state);}  }
class C{  public void addTargetRequest(String requestString){  if (StringUtils.isBlank(requestString) || requestString.equals("#")) {    return;  }synchronized (targetRequests) {    requestString=UrlUtils.canonicalizeUrl(requestString,url.toString());    targetRequests.add(new Request(requestString));  }}  }
class C{  private void drawOrthograph(Coords c,Graphics boardGraph){  if (!game.getBoard().contains(c)) {    return;  }  final IHex oHex=game.getBoard().getHex(c);  final Point oHexLoc=getHexLocation(c);  int elevOffset=oHex.terrainLevel(Terrains.BRIDGE_ELEV);  int orthX=oHexLoc.x;  int orthY=oHexLoc.y - (int)(HEX_ELEV * scale * elevOffset);  if (!useIsometric()) {    orthY=oHexLoc.y;  }  if (tileManager.orthoFor(oHex) != null) {    for (    Image image : tileManager.orthoFor(oHex)) {      Image scaledImage=getScaledImage(image,true);      boardGraph.drawImage(scaledImage,orthX,orthY,this);    }  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void testMinPosZero(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 0);}  }
class C{  public boolean isLeftToRight(){  return (orientation & LTR_BIT) != 0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static VOOperatorOrganization toVOOperatorOrganization(Organization organization,boolean imageDefined,LocalizerFacade localizerFacade){  VOOperatorOrganization voOperatorOrganization=new VOOperatorOrganization();  fillVOOrganization(voOperatorOrganization,organization,imageDefined,null,localizerFacade);  Set<OrganizationToRole> orgToRole=organization.getGrantedRoles();  if (orgToRole != null) {    List<OrganizationRoleType> organizationRoles=new ArrayList<OrganizationRoleType>();    for (    OrganizationToRole organizationToRole : orgToRole) {      organizationRoles.add(organizationToRole.getOrganizationRole().getRoleName());    }    voOperatorOrganization.setOrganizationRoles(organizationRoles);  }  List<OrganizationRefToPaymentType> orgPaymentTyps=organization.getPaymentTypes(OrganizationRoleType.PLATFORM_OPERATOR.name());  if (orgPaymentTyps != null) {    List<VOPaymentType> voPaymentType=new ArrayList<VOPaymentType>();    for (    OrganizationRefToPaymentType organizationToPaymentType : orgPaymentTyps) {      voPaymentType.add(PaymentTypeAssembler.toVOPaymentType(organizationToPaymentType.getPaymentType(),localizerFacade));    }    voOperatorOrganization.setPaymentTypes(voPaymentType);  }  updateValueObject(voOperatorOrganization,organization);  return voOperatorOrganization;}  }
class C{  public void printNewline() throws IOException {  String nl=prettyPrinter.getNewline();  for (int i=0; i < nl.length(); i++) {    writer.write(nl.charAt(i));  }  column=0;  line++;}  }
class C{  public Game(Team home,Team away,String name){  homeTeam=home;  awayTeam=away;  gameName=name;  homeScore=0;  homeQScore=new int[10];  awayScore=0;  awayQScore=new int[10];  numOT=0;  homeTOs=0;  awayTOs=0;  HomeQBStats=new int[6];  AwayQBStats=new int[6];  HomeRB1Stats=new int[4];  HomeRB2Stats=new int[4];  AwayRB1Stats=new int[4];  AwayRB2Stats=new int[4];  HomeWR1Stats=new int[6];  HomeWR2Stats=new int[6];  HomeWR3Stats=new int[6];  AwayWR1Stats=new int[6];  AwayWR2Stats=new int[6];  AwayWR3Stats=new int[6];  HomeKStats=new int[6];  AwayKStats=new int[6];  hasPlayed=false;  if (gameName.equals("In Conf") && (homeTeam.rivalTeam.equals(awayTeam.abbr) || awayTeam.rivalTeam.equals(homeTeam.abbr))) {    gameName="Rivalry Game";  }}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TGETTER__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public static HappyURL URL(String url) throws IOException {  return new HappyURL(url);}  }
class C{  public Document read(URL url) throws DocumentException, IOException, XmlPullParserException {  String systemID=url.toExternalForm();  return read(createReader(url.openStream()),systemID);}  }
class C{  public void addPrintln(String message){  addGetstatic("java.lang.System","err","Ljava/io/PrintStream;");  addLdc(message);  addInvokevirtual("java.io.PrintStream","println","(Ljava/lang/String;)V");}  }
class C{  public void addIload(int n){  if (n < 4)   addOpcode(26 + n); else   if (n < 0x100) {    addOpcode(ILOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ILOAD);    addIndex(n);  }}  }
class C{  private void assertIsAssignable(TypeReference parentType,TypeReference childType){  if (VM.VerifyAssertions) {    if (childType.isUnboxedType()) {      opt_assert(parentType.isUnboxedType());    } else {      if (childType != TypeReference.JavaLangObject) {        if (ClassLoaderProxy.includesType(parentType,childType) == NO) {          VM.sysWriteln("type reference equality " + (parentType == childType));          Enumeration<InlineSequence> callHierarchy=gc.getInlineSequence().enumerateFromRoot();          while (callHierarchy.hasMoreElements()) {            VM.sysWriteln(callHierarchy.nextElement().toString());          }          String msg=parentType + " not assignable with " + childType;          opt_assert(VM.NOT_REACHED,msg);        }      }    }  }}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public static void printList(Object[] list){  for (int i=0; i < list.length; i++)   System.out.print(list[i] + " ");  System.out.println();}  }
class C{  public static double calculateAdjRSquared(double rsq,int n,int k){  if (n < 1 || k < 2 || n == k) {    System.err.println("Cannot calculate Adjusted R^2.");    return Double.NaN;  }  return 1 - ((1 - rsq) * (n - 1) / (n - k));}  }
class C{  private Sprite preparePlaceholder(Sprite original){  if ((original == null) || (TransparencyMode.TRANSPARENCY == Transparency.BITMASK)) {    return original;  }  BufferedImage img=new BufferedImage(original.getWidth(),original.getHeight(),BufferedImage.TYPE_INT_ARGB);  Graphics g=img.createGraphics();  original.draw(g,0,0);  RescaleOp rescaleOp=new RescaleOp(new float[]{3.0f,3.0f,3.0f,0.5f},new float[]{-450f,-450f,-450f,0f},null);  rescaleOp.filter(img,img);  g.dispose();  return new ImageSprite(img);}  }
class C{  public boolean containsKey(K key){  return map.containsKey(key);}  }
class C{  public CFunctionNameTypePair(final String name,final FunctionType functionType){  m_name=name;  m_functionType=functionType;}  }
class C{  public void invalidate(){  this.authScheme=null;  this.authScope=null;  this.credentials=null;}  }
class C{  public String toString(){  return new String(value);}  }
class C{  private void updateAnimationTime(){  long now=android.os.SystemClock.uptimeMillis();  if (mMovieStart == 0) {    mMovieStart=now;  }  int dur=movie.duration();  if (dur == 0) {    dur=DEFAULT_MOVIE_VIEW_DURATION;  }  mCurrentAnimationTime=(int)((now - mMovieStart) % dur);}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  @Override public void updateScreen(){}  }
class C{  public double eval(double params[]){  return (params[0] + params[1] + params[2]+ params[3]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:07.739 -0500",hash_original_method="DC5C6AC2DFC5703884925E95380CED47",hash_generated_method="1DE3EAECC7BBF780F5F9D829D9A6954B") public static boolean isNegativeTransient(int reply){  return (reply >= 400 && reply < 500);}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  synchronized String createLocalId(){  long localIdNumber=random.nextLong();  String localId="local_" + Long.toHexString(localIdNumber);  if (!isLocalId(localId)) {    throw new IllegalStateException("Generated an invalid local id: \"" + localId + "\". "+ "This should never happen. Contact us at https://parse.com/help");  }  return localId;}  }
class C{  public DeclutterMatrix(){  this(0,0);}  }
class C{  public Network filterLinksOutsideEnvelope(Network net,Envelope envelope){  NetworkFilterManager filterManager=new NetworkFilterManager(net);  filterManager.addLinkFilter(new EnvelopeLinkStartEndFilter(envelope));  Network newNetwork=filterManager.applyFilters();  return newNetwork;}  }
class C{  public void trim(final int ego){  this.alters[ego].trim();}  }
class C{  public Page(Properties ctx,int pageNo){  m_ctx=ctx;  m_pageNo=pageNo;  if (m_pageInfo == null || m_pageInfo.length() == 0)   m_pageInfo=String.valueOf(m_pageNo);}  }
class C{  private void scheduleCleanerJob(IPreferencePageContainer preferencePageContainer,String folderNameToClean){  DerivedResourceCleanerJob derivedResourceCleanerJob=cleanerProvider.get();  derivedResourceCleanerJob.setUser(true);  derivedResourceCleanerJob.initialize(getProject(),folderNameToClean);  if (preferencePageContainer != null) {    IWorkbenchPreferenceContainer container=(IWorkbenchPreferenceContainer)getContainer();    container.registerUpdateJob(derivedResourceCleanerJob);  } else {    derivedResourceCleanerJob.schedule();  }}  }
class C{  public CSVDataSourceFactory(){  super("csv",CSV_MIME_TYPES,CSV_FILE_ENDINGS,CSVFormatSpecificationWizardStep.CSV_FORMAT_SPECIFICATION_STEP_ID);}  }
class C{  public boolean isInFlight(){  if (!worldObj.isRemote) {    return isInFlight;  }  return this.dataWatcher.getWatchableObjectByte(16) == 1;}  }
class C{  public void parseForMethod(GenericDeclaration genericDecl,SignatureTag signature,SootClassType[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    if (genericDecl instanceof SootMethodType) {      SootMethodType m=(SootMethodType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=new ListOfTypes(m.getParameterTypes());      this.exceptionTypes=new ListOfTypes(m.getExceptionTypes());      this.returnType=m.getReturnType();    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=ListOfTypes.EMPTY;      this.exceptionTypes=ListOfTypes.EMPTY;      this.returnType=new SootTypeType(VoidType.v());    }  }}  }
class C{  public CaseInsensitiveHashSet(String[] a,int offset,int length,float f){  super(a,offset,length,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  public static void cancel(String flowName){  Flow flow=sFlowMap.get(flowName);  if (flow != null) {    flow.cancel();  }}  }
class C{  public void addDataChangedListener(DataChangedListener l){  mv.addDataChangeListener(l);}  }
class C{  public static NodeResponse send(InternalDistributedMember recipient,PartitionedRegion r,int bucketId,int bucketSize) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"CreateBucketMessage NULL recipient");  NodeResponse p=new NodeResponse(r.getSystem(),recipient);  CreateBucketMessage m=new CreateBucketMessage(recipient,r.getPRId(),p,bucketId,bucketSize);  p.enableSevereAlertProcessing();  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException("Failed sending <" + m + ">");  }  return p;}  }
class C{  public RuntimeCopyException(String s){  super(s);}  }
class C{  private Collection<? extends ImmutableClassType> narrowByAnnotationSearch(ClassCache classCache,String annotation){  if (null == annotation) {    return Collections.emptyList();  }  Collection<? extends ImmutableAnnotationType> annotationTypes=classCache.getLookupService().findAnnotationTypesByPattern(annotation,false);  if (CollectionUtils.isEmpty(annotationTypes)) {    return Collections.emptyList();  }  Collection<ImmutableClassType> results=new HashSet<>();  for (  ImmutableAnnotationType annotationType : annotationTypes) {    for (    ImmutableTypeWithAnnotations typeWithAnnotations : annotationType.getImmutableAnnotatedTypes()) {      if (typeWithAnnotations.isType()) {        ImmutableType immutableType=typeWithAnnotations.castToType();        if (immutableType.isClass()) {          ImmutableClassType immutableClassType=immutableType.castToClass();          if (immutableClassType.isInitialized()) {            results.add(immutableClassType);          }          collectClassesFromSubClasses(results,immutableClassType);        } else         if (immutableType.isInterface()) {          ImmutableInterfaceType immutableInterfaceType=immutableType.castToInterface();          collectClassesFromInterfaceAndSubInterfaces(results,immutableInterfaceType);        }      }      if (typeWithAnnotations.isMethodType()) {        ImmutableMethodType immutableMethodType=typeWithAnnotations.castToMethodType();        ImmutableTypeWithMethods classOrInterfaceType=immutableMethodType.getImmutableClassOrInterfaceType();        if (classOrInterfaceType.isClass() && classOrInterfaceType.isInitialized()) {          results.add(classOrInterfaceType.castToClass());        }      }    }  }  return results;}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public GraphicComponent(GraphicAttribute graphic,Decoration decorator,int[] charsLtoV,byte[] levels,int start,int limit,AffineTransform baseTx){  if (limit <= start) {    throw new IllegalArgumentException("0 or negative length in GraphicComponent");  }  this.graphic=graphic;  this.graphicAdvance=graphic.getAdvance();  this.decorator=decorator;  this.cm=createCoreMetrics(graphic);  this.baseTx=baseTx;  initLocalOrdering(charsLtoV,levels,start,limit);}  }
class C{  public static boolean maybeEmtpy(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      return maybeEmtpy(r.r1) || maybeEmtpy(r.r2);    }case sym.CONCAT:{    r=(RegExp2)re;    return maybeEmtpy(r.r1) && maybeEmtpy(r.r2);  }case sym.STAR:case sym.QUESTION:return true;case sym.PLUS:{RegExp1 r1=(RegExp1)re;return maybeEmtpy((RegExp)r1.content);}case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return false;case sym.STRING:case sym.STRING_I:{String content=(String)((RegExp1)re).content;return content.length() == 0;}case sym.TILDE:return false;case sym.BANG:{RegExp1 r1=(RegExp1)re;return !maybeEmtpy((RegExp)r1.content);}case sym.MACROUSE:return maybeEmtpy(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unknown expression type " + re.type + " in "+ re);}  }
class C{  @Inject public LineageResource(LineageService lineageService){  this.lineageService=lineageService;}  }
class C{  public PeerReflexiveCandidate(TransportAddress transportAddress,Component parentComponent,LocalCandidate base,long priority){  super(transportAddress,parentComponent,CandidateType.PEER_REFLEXIVE_CANDIDATE,CandidateExtendedType.STUN_PEER_REFLEXIVE_CANDIDATE,base);  super.setBase(base);  super.priority=priority;}  }
class C{  public static void unskipRefCountTracking(){  getInstance().unskipRefCountTracking();}  }
class C{  public LifeDrainArea(final int width,final int height,final int interval,final double damageRatio,final int minimumDamage){  super(width,height,interval);  this.damageRatio=damageRatio;  this.minimumDamage=minimumDamage;  setResistance(50);}  }
class C{  public static <K>MapStack<K> create(MapStack<K> source){  MapStack<K> newValue=new MapStack<K>();  newValue.stackList.addAll(source.stackList);  return newValue;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT:    return basicSetVersionConstraint(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static void outputConsole(KeywordCollection bestKeywords){  logHeadline("Results");  for (  KeywordInfo keyword : bestKeywords.getListSortedByScore()) {    log(keyword.toString());  }}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private void formatTextWithLabel(AccessibilityNodeInfoCompat node,SpannableStringBuilder builder){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1)   return;  AccessibilityNodeInfo info=(AccessibilityNodeInfo)node.getInfo();  if (info == null)   return;  AccessibilityNodeInfo labeledBy=info.getLabeledBy();  if (labeledBy == null)   return;  AccessibilityNodeInfoCompat labelNode=new AccessibilityNodeInfoCompat(labeledBy);  final SpannableStringBuilder labelDescription=new SpannableStringBuilder();  Set<AccessibilityNodeInfoCompat> visitedNodes=new HashSet<>();  appendDescriptionForTree(labelNode,labelDescription,null,null,visitedNodes);  AccessibilityNodeInfoUtils.recycleNodes(visitedNodes);  if (TextUtils.isEmpty(labelDescription)) {    return;  }  final String labeled=mContext.getString(R.string.template_labeled_item,builder,labelDescription);  Spannable spannableLabeledText=StringBuilderUtils.createSpannableFromTextWithTemplate(labeled,builder);  builder.clear();  builder.append(spannableLabeledText);}  }
class C{  public Resource fromFileName(String file){  for (  Resource f : this) {    if (f.getFileName().equalsIgnoreCase(file))     return f;  }  return null;}  }
class C{  public void addParent(NodeCollection parentCollection,CommonNodeMaintainer nodeMaintainer){  if (parents.isEmpty()) {    parents.add(parentCollection);    parentCollection.getHaltStepNode().setToNode(initStepNode);    nodeMaintainer.getRestartNodes().add(parentCollection.getHaltStepNode());  } else {    parents.add(parentCollection);    if (joinNode == null) {      joinNode=JoinNode.getJoinNode(id,parents,nodeMaintainer);    }    StringBuilder sid=new StringBuilder("");    for (int i=0; i < parents.size(); i++) {      if (i < parents.size() - 1) {        sid.append(parents.get(i).getId().toString() + ",");      } else {        sid.append(parents.get(i).getId().toString());      }    }    if (haltStepNode1 == null) {      haltStepNode1=new HaltStepNode(sid.toString());      haltStepNode1.setTermNode(parents.get(0).getTermStepNode());    } else {      haltStepNode1.setSid(sid.toString());    }    for (int i=0; i < parents.size(); i++) {      NodeCollection parent=parents.get(i);      parent.getActionNode().setToNode(joinNode);      if (i == 0) {        joinNode.setToNode(haltStepNode1);        parent.setHaltStepNode(haltStepNode1);        nodeMaintainer.getRestartNodes().add(haltStepNode1);        nodeMaintainer.getRestartNodes().remove(parent.getHaltStepNode());        parent.getTermStepNode().setToNode(parents.get(i + 1).getTermStepNode());      } else       if (i == parents.size() - 1) {        parent.setHaltStepNode(haltStepNode1);        parent.getHaltStepNode().setToNode(initStepNode);        parent.getTermStepNode().setToNode(termJobNode);        parent.getActionNode().setTermNode(parents.get(0).getTermStepNode());      } else {        parent.getHaltStepNode().setToNode(haltStepNode1);        parent.getTermStepNode().setToNode(parents.get(i + 1).getTermStepNode());        parent.getActionNode().setTermNode(parents.get(0).getTermStepNode());      }    }  }}  }
class C{  public static String toBinaryString(int i){  return IntegralToString.intToBinaryString(i);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String expandPrefix(NavigableSet<String> names,String prefix){  String name=prefix;  if (!names.contains(name)) {    final String closest=names.ceiling(prefix);    if (closest != null && closest.startsWith(prefix)) {      final String higher=names.higher(closest);      if (higher == null || !higher.startsWith(prefix)) {        name=closest;      }    }  }  return name;}  }
class C{  public Keyboard(Context context){  DisplayMetrics dm=context.getResources().getDisplayMetrics();  mDisplayWidth=dm.widthPixels;  mDisplayHeight=dm.heightPixels;  Config config=Config.get();  mDefaultHorizontalGap=config.getPixel("horizontal_gap");  mDefaultVerticalGap=config.getPixel("vertical_gap");  mDefaultWidth=(int)(mDisplayWidth * config.getDouble("key_width") / 100);  mDefaultHeight=config.getPixel("key_height");  mProximityThreshold=(int)(mDefaultWidth * SEARCH_DISTANCE);  mProximityThreshold=mProximityThreshold * mProximityThreshold;  mKeys=new ArrayList<Key>();  mComposingKeys=new ArrayList<Key>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:15.203 -0400",hash_original_method="8EAA66237FD0D657A6089CD6D204D973",hash_generated_method="D21A37F8C83D2EFC3CCA72F9E806CE49") public boolean startTone(int toneType){  return startTone(toneType,-1);}  }
class C{  public static int overloadError(int one,int two){  return one + two;}  }
class C{  public BoundsOutlineHandle(Figure owner,AttributeKey<Stroke> stroke1Enabled,AttributeKey<Color> strokeColor1Enabled,AttributeKey<Stroke> stroke2Enabled,AttributeKey<Color> strokeColor2Enabled,AttributeKey<Stroke> stroke1Disabled,AttributeKey<Color> strokeColor1Disabled,AttributeKey<Stroke> stroke2Disabled,AttributeKey<Color> strokeColor2Disabled){  super(owner);  this.stroke1Enabled=stroke1Enabled;  this.strokeColor1Enabled=strokeColor1Enabled;  this.stroke2Enabled=stroke2Enabled;  this.strokeColor2Enabled=strokeColor2Enabled;  this.stroke1Disabled=stroke1Disabled;  this.strokeColor1Disabled=strokeColor1Disabled;  this.stroke2Disabled=stroke2Disabled;  this.strokeColor2Disabled=strokeColor2Disabled;}  }
class C{  public int lengthSubjectName(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509SUBJECTNAME);}  }
class C{  private double E(Instances inst,boolean change_weights) throws Exception {  double loglk=0.0, sOW=0.0;  for (int l=0; l < inst.numInstances(); l++) {    Instance in=inst.instance(l);    loglk+=in.weight() * logDensityForInstance(in);    sOW+=in.weight();    if (change_weights) {      m_weights[l]=distributionForInstance(in);    }  }  return loglk / sOW;}  }
class C{  public ICalDate(ICalDate date){  this(date,(date.rawComponents == null) ? null : new DateTimeComponents(date.rawComponents),date.hasTime);}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  public boolean equals(Object another){  if (!(another instanceof HttpPrincipal)) {    return false;  }  HttpPrincipal theother=(HttpPrincipal)another;  return (username.equals(theother.username) && realm.equals(theother.realm));}  }
class C{  public LocalePreference(final I18NBundleProvider i18nBundleProvider){  super(ApplicationPreferences.getPreferences());  locale=fromString(getValue());  this.i18nBundleProvider=i18nBundleProvider;}  }
class C{  public void dispatch(EventType type){  dispatch(new AppEvent(type));}  }
class C{  protected static int assertNonNegative(final String msg,final int v){  if (v < 0)   throw new IllegalArgumentException(msg);  return v;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.591 -0500",hash_original_method="33710CB1E65A2C52E9ABEE23433BB87F",hash_generated_method="33710CB1E65A2C52E9ABEE23433BB87F") void addCookie(Cookie cookie){  if (cookie.domain == null || cookie.path == null || cookie.name == null || !checkInitialized()) {    return;  }synchronized (mCookieLock) {    ContentValues cookieVal=new ContentValues();    cookieVal.put(COOKIES_DOMAIN_COL,cookie.domain);    cookieVal.put(COOKIES_PATH_COL,cookie.path);    cookieVal.put(COOKIES_NAME_COL,cookie.name);    cookieVal.put(COOKIES_VALUE_COL,cookie.value);    if (cookie.expires != -1) {      cookieVal.put(COOKIES_EXPIRES_COL,cookie.expires);    }    cookieVal.put(COOKIES_SECURE_COL,cookie.secure);    mDatabase.insert(mTableNames[TABLE_COOKIES_ID],null,cookieVal);  }}  }
class C{  public void testReadFEN() throws ChessParseError {  String fen="rnbqk2r/1p3ppp/p7/1NpPp3/QPP1P1n1/P4N2/4KbPP/R1B2B1R b kq - 0 1";  Position pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  assertEquals(pos.getPiece(Position.getSquare(0,3)),Piece.WQUEEN);  assertEquals(pos.getPiece(Position.getSquare(4,7)),Piece.BKING);  assertEquals(pos.getPiece(Position.getSquare(4,1)),Piece.WKING);  assertEquals(pos.whiteMove,false);  assertEquals(pos.a1Castle(),false);  assertEquals(pos.h1Castle(),false);  assertEquals(pos.a8Castle(),true);  assertEquals(pos.h8Castle(),true);  fen="8/3k4/8/5pP1/1P6/1NB5/2QP4/R3K2R w KQ f6 1 2";  pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  assertEquals(1,pos.halfMoveClock);  assertEquals(2,pos.fullMoveCounter);  boolean wasError=testFENParseError("8/8/8/8/8/8/8/kk1K4 w - - 0 1");  assertEquals(true,wasError);  wasError=testFENParseError("8/8/8/8/8/8/8/k1RK4 w - - 0 1");  assertEquals(true,wasError);  fen="rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1";  pos=TextIO.readFEN(fen);  assertEquals(-1,pos.getEpSquare());  wasError=testFENParseError("8/8/8/8/4k3/8/8/8/KBN5 w - - 0 1");  assertEquals(true,wasError);  wasError=testFENParseError("8K/8/8/8/4k3/8/8/8 w - - 0 1");  assertEquals(true,wasError);  wasError=testFENParseError("kp6/8/8/8/8/8/8/K7 w - - 0 1");  assertEquals(true,wasError);  wasError=testFENParseError("kr/pppp/8/8/8/8/8/KBR w");  assertEquals(false,wasError);  wasError=testFENParseError("k/8/8/8/8/8/8/K");  assertEquals(true,wasError);  wasError=testFENParseError("");  assertEquals(true,wasError);  wasError=testFENParseError("    |");  assertEquals(true,wasError);  wasError=testFENParseError("1B1B4/6k1/7r/7P/6q1/r7/q7/7K b - - acn 6; acs 0;");  assertEquals(false,wasError);  pos=TextIO.readFEN("3r2k1/p4p1p/1ppq2p1/8/2PpQ3/1P5P/P4PP1/3R1K2 b - - 1 26\n");  assertEquals(26,pos.fullMoveCounter);  pos=TextIO.readFEN("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 10000");  assertEquals(10000,pos.fullMoveCounter);  pos=TextIO.readFEN("rnbqkbnr/pp1ppppp/8/8/2pPP3/8/PPP2PPP/RNBQKBNR b KQkq d3 0 1");  assertEquals(TextIO.getSquare("d3"),pos.getEpSquare());  pos=TextIO.readFEN("rnbqkbnr/pp1ppppp/8/8/2pPP3/8/PPP2PPP/RNBQKBNR w KQkq d3 0 1");  assertTrue(pos.equals(TextIO.readFEN("rnbqkbnr/pp1ppppp/8/8/2pPP3/8/PPP2PPP/RNBQKBNR w KQkq - 0 1")));  pos=TextIO.readFEN("rnbqkbnr/ppp2ppp/8/2Ppp3/8/8/PP1PPPPP/RNBQKBNR w KQkq d6 0 1");  assertEquals(TextIO.getSquare("d6"),pos.getEpSquare());  pos=TextIO.readFEN("rnbqkbnr/ppp2ppp/8/2Ppp3/8/8/PP1PPPPP/RNBQKBNR b KQkq d6 0 1");  assertTrue(pos.equals(TextIO.readFEN("rnbqkbnr/ppp2ppp/8/2Ppp3/8/8/PP1PPPPP/RNBQKBNR b KQkq - 0 1")));  pos=TextIO.readFEN("rnbqkbnr/pppppppp/8/8/3PP3/8/PPP2PPP/RNBQKBNR b KQkq d3 0 1");  assertEquals(-1,pos.getEpSquare());  pos=TextIO.readFEN("rnbqkbnr/ppp2ppp/8/3pp3/8/8/PPPPPPPP/RNBQKBNR w KQkq e6 0 1");  assertEquals(-1,pos.getEpSquare());  pos=TextIO.readFEN("rnbqkbnr/pp1ppppp/8/8/2pPP3/3P4/PP3PPP/RNBQKBNR b KQkq d3 0 1");  assertTrue(pos.equals(TextIO.readFEN("rnbqkbnr/pp1ppppp/8/8/2pPP3/3P4/PP3PPP/RNBQKBNR b KQkq - 0 1")));}  }
class C{  public void add(Resource s,URI p,Value o){  add(s,p,o,null,StatementEnum.Explicit);}  }
class C{  public StringBuilder(){  super(16);}  }
class C{  public boolean isDerivedReference(){  return getDerivedReferenceBase() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.891 -0500",hash_original_method="6A2E08939F192DB9BEF6B9CE1D1800F8",hash_generated_method="39A4C997697F55BFCE6668965317B68A") public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public static void rFindAndRecompileIndexingHOP(StatementBlock sb,ProgramBlock pb,String var,ExecutionContext ec,boolean force) throws DMLRuntimeException {  if (pb instanceof IfProgramBlock && sb instanceof IfStatementBlock) {    IfProgramBlock ipb=(IfProgramBlock)pb;    IfStatementBlock isb=(IfStatementBlock)sb;    IfStatement is=(IfStatement)sb.getStatement(0);    if (isb.getPredicateHops() != null)     ipb.setPredicate(rFindAndRecompileIndexingHOP(isb.getPredicateHops(),ipb.getPredicate(),var,ec,force));    int len=is.getIfBody().size();    for (int i=0; i < ipb.getChildBlocksIfBody().size() && i < len; i++) {      ProgramBlock lpb=ipb.getChildBlocksIfBody().get(i);      StatementBlock lsb=is.getIfBody().get(i);      rFindAndRecompileIndexingHOP(lsb,lpb,var,ec,force);    }    if (ipb.getChildBlocksElseBody() != null) {      int len2=is.getElseBody().size();      for (int i=0; i < ipb.getChildBlocksElseBody().size() && i < len2; i++) {        ProgramBlock lpb=ipb.getChildBlocksElseBody().get(i);        StatementBlock lsb=is.getElseBody().get(i);        rFindAndRecompileIndexingHOP(lsb,lpb,var,ec,force);      }    }  } else   if (pb instanceof WhileProgramBlock && sb instanceof WhileStatementBlock) {    WhileProgramBlock wpb=(WhileProgramBlock)pb;    WhileStatementBlock wsb=(WhileStatementBlock)sb;    WhileStatement ws=(WhileStatement)sb.getStatement(0);    if (wsb.getPredicateHops() != null)     wpb.setPredicate(rFindAndRecompileIndexingHOP(wsb.getPredicateHops(),wpb.getPredicate(),var,ec,force));    int len=ws.getBody().size();    for (int i=0; i < wpb.getChildBlocks().size() && i < len; i++) {      ProgramBlock lpb=wpb.getChildBlocks().get(i);      StatementBlock lsb=ws.getBody().get(i);      rFindAndRecompileIndexingHOP(lsb,lpb,var,ec,force);    }  } else   if (pb instanceof ForProgramBlock && sb instanceof ForStatementBlock) {    ForProgramBlock fpb=(ForProgramBlock)pb;    ForStatementBlock fsb=(ForStatementBlock)sb;    ForStatement fs=(ForStatement)fsb.getStatement(0);    if (fsb.getFromHops() != null)     fpb.setFromInstructions(rFindAndRecompileIndexingHOP(fsb.getFromHops(),fpb.getFromInstructions(),var,ec,force));    if (fsb.getToHops() != null)     fpb.setToInstructions(rFindAndRecompileIndexingHOP(fsb.getToHops(),fpb.getToInstructions(),var,ec,force));    if (fsb.getIncrementHops() != null)     fpb.setIncrementInstructions(rFindAndRecompileIndexingHOP(fsb.getIncrementHops(),fpb.getIncrementInstructions(),var,ec,force));    int len=fs.getBody().size();    for (int i=0; i < fpb.getChildBlocks().size() && i < len; i++) {      ProgramBlock lpb=fpb.getChildBlocks().get(i);      StatementBlock lsb=fs.getBody().get(i);      rFindAndRecompileIndexingHOP(lsb,lpb,var,ec,force);    }  } else {    try {      boolean ret=false;      Hop.resetVisitStatus(sb.get_hops());      if (force) {        for (        Hop h : sb.get_hops())         ret|=rFindAndSetCPIndexingHOP(h,var);      } else {        for (        Hop h : sb.get_hops())         ret|=rFindAndReleaseIndexingHOP(h,var);      }      if (ret) {        ArrayList<Instruction> newInst=Recompiler.recompileHopsDag(sb,sb.get_hops(),ec.getVariables(),null,true,0);        pb.setInstructions(newInst);      }    } catch (    Exception ex) {      throw new DMLRuntimeException(ex);    }  }}  }
class C{  protected boolean createMatchRecord(boolean invoice,int M_InOutLine_ID,int Line_ID,BigDecimal qty,String trxName){  if (qty.compareTo(Env.ZERO) == 0)   return true;  log.fine("IsInvoice=" + invoice + ", M_InOutLine_ID="+ M_InOutLine_ID+ ", Line_ID="+ Line_ID+ ", Qty="+ qty);  boolean success=false;  MInOutLine sLine=new MInOutLine(Env.getCtx(),M_InOutLine_ID,trxName);  if (invoice) {    MInvoiceLine iLine=new MInvoiceLine(Env.getCtx(),Line_ID,trxName);    iLine.setM_InOutLine_ID(M_InOutLine_ID);    if (sLine.getC_OrderLine_ID() != 0)     iLine.setC_OrderLine_ID(sLine.getC_OrderLine_ID());    iLine.saveEx();    if (iLine.getM_Product_ID() != 0) {      MMatchInv match=new MMatchInv(iLine,null,qty);      match.setM_InOutLine_ID(M_InOutLine_ID);      if (match.save()) {        success=true;        if (MClient.isClientAccountingImmediate()) {          String ignoreError=DocumentEngine.postImmediate(match.getCtx(),match.getAD_Client_ID(),match.get_Table_ID(),match.get_ID(),true,match.get_TrxName());        }      } else       log.log(Level.SEVERE,"Inv Match not created: " + match);    } else     success=true;    if (iLine.getC_OrderLine_ID() != 0 && iLine.getM_Product_ID() != 0) {      MMatchPO matchPO=MMatchPO.create(iLine,sLine,null,qty);      matchPO.setC_InvoiceLine_ID(iLine);      matchPO.setM_InOutLine_ID(M_InOutLine_ID);      if (!matchPO.save())       log.log(Level.SEVERE,"PO(Inv) Match not created: " + matchPO);      if (MClient.isClientAccountingImmediate()) {        String ignoreError=DocumentEngine.postImmediate(matchPO.getCtx(),matchPO.getAD_Client_ID(),matchPO.get_Table_ID(),matchPO.get_ID(),true,matchPO.get_TrxName());      }    }  } else {    sLine.setC_OrderLine_ID(Line_ID);    sLine.saveEx();    MOrderLine oLine=new MOrderLine(Env.getCtx(),Line_ID,trxName);    if (oLine.get_ID() != 0) {      oLine.setQtyReserved(oLine.getQtyReserved().subtract(qty));      if (!oLine.save())       log.severe("QtyReserved not updated - C_OrderLine_ID=" + Line_ID);    }    if (sLine.getM_Product_ID() != 0) {      MMatchPO match=new MMatchPO(sLine,null,qty);      if (!match.save())       log.log(Level.SEVERE,"PO Match not created: " + match); else {        success=true;        if (sLine.getProduct() != null && sLine.getProduct().isStocked())         success=MStorage.add(Env.getCtx(),sLine.getM_Warehouse_ID(),sLine.getM_Locator_ID(),sLine.getM_Product_ID(),sLine.getM_AttributeSetInstance_ID(),oLine.getM_AttributeSetInstance_ID(),null,null,qty.negate(),trxName);      }    } else     success=true;  }  return success;}  }
class C{  private IOneDriveClient loginAndBuildClient(final Activity activity) throws ClientException {  mClient.validate();  mClient.getAuthenticator().init(mClient.getExecutors(),mClient.getHttpProvider(),activity,mClient.getLogger());  IAccountInfo silentAccountInfo=null;  try {    silentAccountInfo=mClient.getAuthenticator().loginSilent();  } catch (  final Exception ignored) {  }  if (silentAccountInfo == null && mClient.getAuthenticator().login(null) == null) {    throw new ClientAuthenticatorException("Unable to authenticate silently or interactively",OneDriveErrorCodes.AuthenticationFailure);  }  return mClient;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public VmPipeAcceptor(Executor executor){  super(new DefaultVmPipeSessionConfig(),executor);  idleChecker=new IdleStatusChecker();  executeWorker(idleChecker.getNotifyingTask(),"idleStatusChecker");}  }
class C{  public static Observable<NetworkServiceDiscoveryInfo> advertise(@NonNull Context context,@NonNull String serviceName,@NonNull String serviceLayer,int servicePort,@Nullable Map<String,String> attributes){  OnSubscribeEvent<NetworkServiceDiscoveryInfo> onSubscribe=AdvertiseOnSubscribeFactory.from(context,serviceName,serviceLayer,servicePort,attributes);  return Observable.create(onSubscribe).doOnCompleted(onSubscribe.onCompleted()).compose(Transformers.networking());}  }
class C{  private static String jsonValue(Object in){  final String value;  if (in instanceof Optional<?>) {    final Optional<?> o=(Optional<?>)in;    return o.map(null).orElse("null");  } else   if (in == null) {    value="null";  } else   if (in instanceof Byte || in instanceof Short || in instanceof Integer|| in instanceof Long|| in instanceof Boolean|| in instanceof Float|| in instanceof Double) {    value=String.valueOf(in);  } else {    value="\"" + String.valueOf(in).replace("\"","\\\"") + "\"";  }  return value;}  }
class C{  boolean useReadCache(String name,IOContext context){  if (!blockCacheReadEnabled) {    return false;  }  if (blockCacheFileTypes != null && !isCachableFile(name)) {    return false;  }switch (context.context) {default :{      return true;    }}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.414 -0500",hash_original_method="3CF6FD97C48E1A2587C7ECF97400CD4D",hash_generated_method="C5AAECEF0E5071D0AE6573D79D97CE47") public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  protected void doPlainAuth(String initialClientResponse,ImapSession session,String tag,ImapCommand command,Responder responder){  String pass=null;  String user=null;  try {    String userpass=new String(Base64.decodeBase64(initialClientResponse));    StringTokenizer authTokenizer=new StringTokenizer(userpass,"\0");    String authorize_id=authTokenizer.nextToken();    user=authTokenizer.nextToken();    try {      pass=authTokenizer.nextToken();    } catch (    java.util.NoSuchElementException _) {      pass=user;      user=authorize_id;    }    authTokenizer=null;  } catch (  Exception e) {  }  doAuth(user,pass,session,tag,command,responder,HumanReadableText.AUTHENTICATION_FAILED);}  }
class C{  private String createNewTable(Fusiontables fusiontables,Track track) throws IOException {  Table table=new Table();  table.setName(track.getName());  table.setDescription(track.getDescription());  table.setIsExportable(true);  table.setColumns(Arrays.asList(new Column().setName("name").setType("STRING"),new Column().setName("description").setType("STRING"),new Column().setName("geometry").setType("LOCATION"),new Column().setName("icon").setType("STRING")));  return fusiontables.table().insert(table).execute().getTableId();}  }
class C{  public void initializeMethodParameter(LocalVariableNode p,V value){  if (value != null) {    localVariableValues.put(new FlowExpressions.LocalVariable(p.getElement()),value);  }}  }
class C{  public final PrivateKey generatePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (serviceIterator == null) {    return spi.engineGeneratePrivate(keySpec);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineGeneratePrivate(keySpec);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeySpecException) {    throw (InvalidKeySpecException)failure;  }  throw new InvalidKeySpecException("Could not generate private key",failure);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildoldchildnonexistent.class,args);}  }
class C{  Image scaledImpl(int width,int height){  if (width == -1) {    return scaledHeight(height);  }  if (height == -1) {    return scaledWidth(width);  }  Dimension d=new Dimension(width,height);  Image i=getCachedImage(d);  if (i != null) {    return i;  }  if (svgData != null) {    try {      i=createSVG(svgBaseURL,animated,svgData);    } catch (    IOException ex) {      i=new Image(this.image);    }  } else {    i=new Image(this.image);  }  i.scaleCache=scaleCache;  i.scale(width,height);  i.transform=this.transform;  i.animated=animated;  i.svgBaseURL=svgBaseURL;  i.svgData=svgData;  cacheImage(new Dimension(width,height),i);  return i;}  }
class C{  protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  long shift=0;  if (this.timeline instanceof SegmentedTimeline) {    shift=((SegmentedTimeline)this.timeline).getStartTime();  }  double zero=valueToJava2D(shift + 0.0,dataArea,edge);  double tickLabelWidth=estimateMaximumTickLabelWidth(g2,getTickUnit());  TickUnitSource tickUnits=getStandardTickUnits();  TickUnit unit1=tickUnits.getCeilingTickUnit(getTickUnit());  double x1=valueToJava2D(shift + unit1.getSize(),dataArea,edge);  double unit1Width=Math.abs(x1 - zero);  double guess=(tickLabelWidth / unit1Width) * unit1.getSize();  DateTickUnit unit2=(DateTickUnit)tickUnits.getCeilingTickUnit(guess);  double x2=valueToJava2D(shift + unit2.getSize(),dataArea,edge);  double unit2Width=Math.abs(x2 - zero);  tickLabelWidth=estimateMaximumTickLabelWidth(g2,unit2);  if (tickLabelWidth > unit2Width) {    unit2=(DateTickUnit)tickUnits.getLargerTickUnit(unit2);  }  setTickUnit(unit2,false,false);}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new DenseDoubleMatrix2D(rows,columns);}  }
class C{  protected void onClusterItemRendered(T clusterItem,Marker marker){}  }
class C{  private QueryTask queryForHostSystem(String parentComputeLink,String hardwareUuid){  QuerySpecification qs=new QuerySpecification();  qs.query.addBooleanClause(Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_ID,hardwareUuid).build());  qs.query.addBooleanClause(Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,parentComputeLink).build());  qs.options=EnumSet.of(EXPAND_CONTENT);  return QueryTask.create(qs).setDirect(true);}  }
class C{  public final void addItem(final int id,@StringRes final int titleId,@DrawableRes final int iconId){  Item item=new Item(getContext(),id,titleId);  item.setIcon(getContext(),iconId);  adapter.add(item);  adaptGridViewHeight();}  }
class C{  private boolean checkForUpdates(List<AuthnProvider> providers){  if (_lastKnownConfiguration != null) {    if (_lastKnownConfiguration.keySet().size() != providers.size()) {      return true;    }    for (    AuthnProvider provider : providers) {      if (!_lastKnownConfiguration.containsKey(provider.getId())) {        return true;      }      if (!_lastKnownConfiguration.get(provider.getId()).equals(provider.getLastModified())) {        return true;      }    }  } else {    if (!providers.isEmpty()) {      return true;    }  }  if (_lastKnownLdapConnectionTimeout != SystemPropertyUtil.getLdapConnectionTimeout(_coordinator)) {    return true;  }  return false;}  }
class C{  public void add(T object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public IsochroneFeature(int cutoffSec,WebMercatorGridPointSet points,int[] times){  times=Arrays.copyOf(times,times.length);  for (int x=0; x < points.width; x++) {    times[x]=Integer.MAX_VALUE;    times[(int)((points.height - 1) * points.width) + x]=Integer.MAX_VALUE;  }  for (int y=0; y < points.height; y++) {    times[(int)points.width * y]=Integer.MAX_VALUE;    times[(int)points.width * (y + 1) - 1]=Integer.MAX_VALUE;  }  LOG.debug("Making isochrone for {}sec",cutoffSec);  this.cutoffSec=cutoffSec;  byte[][] contour=new byte[(int)points.width - 1][(int)points.height - 1];  for (int y=0; y < points.height - 1; y++) {    for (int x=0; x < points.width - 1; x++) {      boolean topLeft=times[(int)(points.width * y + x)] < cutoffSec;      boolean topRight=times[(int)(points.width * y + x + 1)] < cutoffSec;      boolean botLeft=times[(int)(points.width * (y + 1) + x)] < cutoffSec;      boolean botRight=times[(int)(points.width * (y + 1) + x + 1)] < cutoffSec;      byte idx=0;      if (topLeft)       idx|=1 << 3;      if (topRight)       idx|=1 << 2;      if (botRight)       idx|=1 << 1;      if (botLeft)       idx|=1;      contour[x][y]=idx;    }  }  List<LinearRing> outerRings=new ArrayList<>();  List<LinearRing> innerRings=new ArrayList<>();  boolean[][] found=new boolean[(int)points.width - 1][(int)points.height - 1];  for (int origy=0; origy < points.height - 1; origy++) {    for (int origx=0; origx < points.width - 1; origx++) {      int x=origx;      int y=origy;      if (found[x][y])       continue;      byte idx=contour[x][y];      if (idx == 0 || idx == 5 || idx == 10 || idx == 15)       continue;      byte prevIdx=-1;      List<Coordinate> ring=new ArrayList<>();      int direction=0;      int prevy=0, prevx=0;      Coordinate prevCoord=null;      CELLS:       while (true) {        idx=contour[x][y];        if (found[x][y] && idx != 5 && idx != 10) {          LOG.error("Ring crosses another ring (possibly itself). This cell has index {}, the previous cell has index {}.",idx,prevIdx);          break CELLS;        }        found[x][y]=true;        if (ring.size() >= MAX_RING_SIZE) {          LOG.error("Ring is too large, bailing");          break CELLS;        }        int startx=x;        int starty=y;switch (idx) {case 0:          LOG.error("Ran off outside of ring");        break CELLS;case 1:      x--;    break;case 2:  y++;break;case 3:x--;break;case 4:x++;break;case 5:if (prevy > y) x++; else if (prevy < y) x--; else LOG.error("Entered case 5 saddle point from wrong direction!");break;case 6:y++;break;case 7:x--;break;case 8:y--;break;case 9:y--;break;case 10:if (prevx < x) y++; else if (prevx > x) y--; else {LOG.error("Entered case 10 saddle point from wrong direction.");}break;case 11:y--;break;case 12:x++;break;case 13:x++;break;case 14:y++;break;case 15:LOG.error("Ran off inside of ring");break CELLS;}int topLeftTime=times[(int)points.width * y + x];int botLeftTime=times[(int)points.width * (y + 1) + x];int topRightTime=times[(int)points.width * y + x + 1];int botRightTime=times[(int)points.width * (y + 1) + x + 1];double lat, lon;if (startx < x) {double frac=(cutoffSec - topLeftTime) / (double)(botLeftTime - topLeftTime);lat=points.pixelToLat(points.north + y + frac);lon=points.pixelToLon(points.west + x);} else if (startx > x) {double frac=(cutoffSec - topRightTime) / (double)(botRightTime - topRightTime);lat=points.pixelToLat(points.north + y + frac);lon=points.pixelToLon(points.west + x + 1);} else if (starty < y) {double frac=(cutoffSec - topLeftTime) / (double)(topRightTime - topLeftTime);lat=points.pixelToLat(points.north + y);lon=points.pixelToLon(points.west + x + frac);} else {double frac=(cutoffSec - botLeftTime) / (botRightTime - botLeftTime);lat=points.pixelToLat(points.north + y + 1);lon=points.pixelToLon(points.west + x + frac);}direction+=(x - startx) * (y + starty);prevCoord=new Coordinate(lon,lat);ring.add(prevCoord);if (x == startx && y == starty) {LOG.error("Ring position did not update");break CELLS;}prevIdx=idx;prevx=startx;prevy=starty;if (x == origx && y == origy) {Coordinate end=ring.get(0);ring.add(end);if (ring.size() != 2 && ring.size() != 3) {LinearRing lr=GeometryUtils.geometryFactory.createLinearRing(ring.toArray(new Coordinate[ring.size()]));if (direction > 0) outerRings.add(lr); else innerRings.add(lr);} else LOG.warn("Ring with two points, this should not happen");break CELLS;}}}}LOG.debug("{} components",outerRings.size());double maxArea=0;Geometry largestRing=EMPTY_POLYGON;Multimap<LinearRing,LinearRing> holesForRing=HashMultimap.create();Map<LinearRing,Polygon> polygonsForOuterRing=outerRings.stream().collect(Collectors.toMap(null,null));Map<LinearRing,Polygon> polygonsForInnerRing=innerRings.stream().collect(Collectors.toMap(null,null));for (Iterator<Polygon> it=polygonsForOuterRing.values().iterator(); it.hasNext(); ) {if (it.next().getArea() < 1e-6) it.remove();}int holeIdx=-1;HOLES: for (Map.Entry<LinearRing,Polygon> hole : polygonsForInnerRing.entrySet()) {holeIdx++;if (hole.getValue().getArea() < 1e-6) continue;for (Map.Entry<LinearRing,Polygon> outer : polygonsForOuterRing.entrySet()) {if (outer.getValue().contains(hole.getKey().getPointN(0))) {holesForRing.put(outer.getKey(),hole.getKey());continue HOLES;}}LOG.warn("Found no fitting shell for isochrone hole {} at cutoff {}, dropping this hole.",holeIdx,cutoffSec);}Polygon[] polygons=outerRings.stream().map(null).toArray(null);this.geometry=GeometryUtils.geometryFactory.createMultiPolygon(polygons);LOG.debug("Done.");}  }
class C{  public DoubleVector plus(double x){  return copy().plusEquals(x);}  }
class C{  public Shape createScrollCap(int x,int y,int w,int h){  path.reset();  path.moveTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  addScrollGapPath(x,y,w,h,true);  path.closePath();  return path;}  }
class C{  protected void doFireDocumentChanged2(DocumentEvent event){  DocumentPartitioningChangedEvent p=fDocumentPartitioningChangedEvent;  fDocumentPartitioningChangedEvent=null;  if (p != null && !p.isEmpty())   fireDocumentPartitioningChanged(p);  Object[] listeners=fPrenotifiedDocumentListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    try {      ((DocumentListener)listeners[i]).documentChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }  listeners=fDocumentListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    try {      ((DocumentListener)listeners[i]).documentChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }}  }
class C{  public DirichletDataSetProbs(DataSet dataSet,double symmValue){  if (dataSet == null) {    throw new NullPointerException();  }  if (symmValue < 0.0) {    throw new IllegalArgumentException();  }  this.dataSet=dataSet;  this.symmValue=symmValue;  dims=new int[dataSet.getNumColumns()];  for (int i=0; i < dims.length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    dims[i]=variable.getNumCategories();  }  numRows=dataSet.getNumRows();}  }
class C{  public void open(OutputStream os) throws IOException {  this.out=os;  this.len=0;}  }
class C{  public void createSeries(CandleDataset candleDataset,int seriesIndex){  if (candleDataset.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (XYDataset).");  }  for (int i=0; i < candleDataset.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(candleDataset.getSeries(seriesIndex),i,true);  }}  }
class C{  private int search(final byte[] key,final byte[][] keys,final int start,final int length){  if (length == 1) {    final byte[] tstkey=keys[start];    if (tstkey == null)     return -(start + 1);    final int res=BytesUtil.compareBytes(key,tstkey);    if (res == 0) {      return start;    } else     if (res < 0) {      return -(start + 1);    } else {      return -(start + 2);    }  }  final int partLen=(length >> 1);  final int pivot=start + partLen;  final byte[] pivotKey=keys[pivot];  final int tst=pivotKey == null ? -1 : BytesUtil.compareBytes(key,pivotKey);  if (tst == 0 && BytesUtil.compareBytes(key,keys[pivot - 1]) != 0) {    return pivot;  } else   if (tst <= 0) {    return search(key,keys,start,partLen);  } else {    return search(key,keys,pivot,partLen);  }}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public static byte[] combine(String rootname,List<String> fragments){  final StringBuilder buffer=new StringBuilder();  buffer.append(HEADER);  buffer.append(String.format("<%s>%n",rootname));  for (  final String f : fragments) {    buffer.append(String.format("%s%n",f));  }  buffer.append(String.format("</%s>%n",rootname));  return toUTF8(buffer.toString());}  }
class C{  protected boolean isValid(){  boolean wordWrap=isWordWrapEnabled();  if (wordWrap) {    return outlineWrapped != null;  } else {    return outlineUnwrapped != null;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void createLuceneWikipediaIndex(String language) throws UIMAException, IOException {  CollectionReader reader=createReader(ExtendedWikipediaArticleReader.class,WikipediaReaderBase.PARAM_HOST,"YOUR_HOST",WikipediaReaderBase.PARAM_DB,"YOUR_DB",WikipediaReaderBase.PARAM_USER,"YOUR_USERNAME",WikipediaReaderBase.PARAM_PASSWORD,"YOUR_PASSWORD",WikipediaReaderBase.PARAM_LANGUAGE,Language.german);  AnalysisEngine segmenter=createEngine(BreakIteratorSegmenter.class,BreakIteratorSegmenter.PARAM_LANGUAGE,language);  AnalysisEngine stemmer=createEngine(SnowballStemmer.class,SnowballStemmer.PARAM_LANGUAGE,language,SnowballStemmer.PARAM_LOWER_CASE,true);  AnalysisEngine indexTermGenerator=createEngine(LuceneIndexer.class,LuceneIndexer.PARAM_INDEX_PATH,luceneIndexPath,LuceneIndexer.PARAM_MIN_TERMS_PER_DOCUMENT,50);  SimplePipeline.runPipeline(reader,segmenter,stemmer,indexTermGenerator);}  }
class C{  public Object clone(){  MyIdentityHashMap<K,V> result=null;  try {    result=(MyIdentityHashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {  }  result.table=new Entry[table.length];  result.entrySet=null;  result.modCount=0;  result.size=0;  result.init();  result.putAllForCreate(this);  return result;}  }
class C{  protected int sp2px(int spVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,spVal,getResources().getDisplayMetrics());}  }
class C{  public void clearReminders(){  super.removeElement(Reminder.KEY);}  }
class C{  private void resizeCluster(final ClusterResizeTask currentState){  ClusterMaintenanceTaskService.State patchState=new ClusterMaintenanceTaskService.State();  patchState.taskState=new TaskState();  patchState.taskState.stage=TaskState.TaskStage.STARTED;  Operation patchOperation=Operation.createPatch(UriUtils.buildUri(getHost(),ClusterMaintenanceTaskFactoryService.SELF_LINK + "/" + currentState.clusterId)).setBody(patchState).setCompletion(null);  sendRequest(patchOperation);}  }
class C{  public static long checkArgumentNonnegative(final long value,final String errorMessage){  if (value < 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  public void stopJumping(){  for (  JumpingBeansSpan bean : jumpingBeans) {    if (bean != null) {      bean.teardown();    }  }  cleanupSpansFrom(textView.get());}  }
class C{  private void handleScreenOn(){  mSpeechController.setScreenIsOn(true);  final SpannableStringBuilder builder=new SpannableStringBuilder();  if (isIdle()) {    if (Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.DEVICE_PROVISIONED,0) != 0) {      appendCurrentTimeAnnouncement(builder);    } else {      builder.append(mContext.getString(R.string.value_screen_on));    }  }  mShakeDetector.resumePolling();  mSpeechController.speak(builder,SpeechController.QUEUE_MODE_INTERRUPT,0,null);}  }
class C{  protected void storeImageReplacedElement(Element e,ReplacedElement cc){  System.out.println("\n*** Cached image for element");  imageComponents.put(e,cc);}  }
class C{  public String historyString(){  StringBuilder sb=new StringBuilder();  String nl=System.getProperty("line.separator");  Stack<Featurizable<TK,FV>> featurizables=featurizables();  Featurizable<TK,FV> f=null;  while (!featurizables.isEmpty()) {    f=featurizables.pop();    sb.append(f.rule).append(nl);  }  return sb.toString();}  }
class C{  public TvListing(List<Channel> channels,List<Program> programs){  this.channels=channels;  Iterator<Channel> xmlTvChannelIterator=channels.iterator();  while (xmlTvChannelIterator.hasNext()) {    Channel tvChannel=xmlTvChannelIterator.next();    if (tvChannel.getInternalProviderData() == null) {      Log.e(TAG,tvChannel.getName() + " has no url!");      xmlTvChannelIterator.remove();    }  }  this.programs=programs;}  }
class C{  public void sync(){  checkOpen();  FileStore f=fileStore;  if (f != null) {    f.sync();  }}  }
class C{  public static Stats of(Iterator<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  @Override protected void validate(){  failIf(this.value < 1,"Must have at least one gc thread");}  }
class C{  public JSONObject put(String name,int value){  put(name,JSON.value(value));  return this;}  }
class C{  public ZoomToFitControl(String group,int margin,long duration,int button){  this.m_group=group;  this.m_margin=margin;  this.m_duration=duration;  this.m_button=button;}  }
class C{  public void notifyClientsOffline(){  for (  MqttConnection connection : connections.values()) {    connection.offline();  }}  }
class C{  public BarChartSetter(final int index){  this.index=index;}  }
class C{  public static VOServiceFeedback toVOServiceFeedback(Product product,PlatformUser currentUser){  Product template=product.getTemplateOrSelf();  ProductFeedback domainObject=template.getProductFeedback();  VOServiceFeedback valueObject=createEmptyValueObject();  mapProductKey(product,valueObject);  if (domainObject != null) {    mapAverageRating(domainObject,valueObject);    mapReviews(domainObject,valueObject);  }  mapAuthorities(template,valueObject,currentUser);  return valueObject;}  }
class C{  public static int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file == null || file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  ShellUtils.CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("installSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  public boolean isRemitTo(){  Object oo=get_Value(COLUMNNAME_IsRemitTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean equals(Object arg){  if (arg == this)   return true;  if (arg == null || !(arg instanceof Name))   return false;  Name d=(Name)arg;  if (d.hashcode == 0)   d.hashCode();  if (hashcode == 0)   hashCode();  if (d.hashcode != hashcode)   return false;  if (d.labels() != labels())   return false;  return equals(d.name,d.offset(0));}  }
class C{  public void add(Token token,String suggestion,int docFreq){  LinkedHashMap<String,Integer> map=this.suggestions.get(token);  if (map == null) {    map=new LinkedHashMap<>();    this.suggestions.put(token,map);  }  map.put(suggestion,docFreq);}  }
class C{  @SuppressWarnings("unchecked") public void shouldThrowOnNonRetriableFailure() throws Throwable {  when(service.connect()).thenThrow(ConnectException.class,ConnectException.class,IllegalStateException.class);  RetryPolicy retryPolicy=new RetryPolicy().retryOn(ConnectException.class);  assertThrows(null,FailsafeException.class,IllegalStateException.class);  verify(service,times(3)).connect();}  }
class C{  public void writeAuth(CCacheOutputStream cos) throws IOException {  for (int i=0; i < entry.length; i++) {    entry[i].writeEntry(cos);  }}  }
class C{  private void validateTag(final ITreeNode<CTag> tag){  Preconditions.checkNotNull(tag,"IE00859: Tag argument can't be null");  Preconditions.checkNotNull(tag.getObject(),"IE00860: Tag object can't be null");  Preconditions.checkArgument(tag.getObject().getType() == m_type,"IE00861: Tag has an incorrect type");  Preconditions.checkArgument(hasTag(tag),"IE00862: Tag is not managed by this manager");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void exitForm(Form f){}  }
class C{  public int diff_commonSuffix(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  int n=Math.min(text1_length,text2_length);  for (int i=1; i <= n; i++) {    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {      return i - 1;    }  }  return n;}  }
class C{  public static String createPath(final String... pathElements){  return createPath(pathElements,File.separator);}  }
class C{  public byte[] readBlock(String id,int version,long block){  if (id == null)   throw new IllegalArgumentException();  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] fromKey=keyBuilder.reset().appendText(id,true,false).append(version).append(block).getKey();  final byte[] toKey=keyBuilder.reset().appendText(id,true,false).append(version).append(block + 1).getKey();  final ITupleIterator itr=getFileDataIndex().rangeIterator(fromKey,toKey,1,IRangeQuery.KEYS | IRangeQuery.VALS,null);  if (!itr.hasNext()) {    if (INFO)     log.info("id=" + id + ", version="+ version+ ", block="+ block+ " : does not exist");    return null;  }  return readBlock(id,version,itr.next());}  }
class C{  public static void mergeSort(int[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  int aux[]=(int[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex);}  }
class C{  public static final long cores(){  return runtime.availableProcessors();}  }
class C{  public DockerContainersUtil filterByImage(String pattern){  if (this.containers == null) {    return this;  }  List<Container> matched=new ArrayList<>();  for (  Container container : containers) {    if (container.getImage().matches(pattern)) {      matched.add(container);    }  }  return new DockerContainersUtil(matched);}  }
class C{  public static List<Attachment> findByContainer(ResourceType containerType,String containerId){  List<Attachment> cachedData=AttachmentCache.get(containerType,containerId);  if (cachedData != null) {    return cachedData;  }  List<Attachment> list=find.where().eq("containerType",containerType).eq("containerId",containerId).findList();  AttachmentCache.set(containerType.name() + containerId,list);  return list;}  }
class C{  public static Number count(short[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  public void onAddHostWelcomeNext(){  switchToFragment(new AddHostFragmentZeroconf());}  }
class C{  private void init(){  if (!Strings.isNullOrEmpty(excelInputreaderConfig.columnList)) {    String[] columnsList=excelInputreaderConfig.columnList.split(",");    inputColumns=Arrays.asList(columnsList);  }  if (!Strings.isNullOrEmpty(excelInputreaderConfig.columnMapping)) {    String[] mappings=excelInputreaderConfig.columnMapping.split(",");    for (    String map : mappings) {      String[] columns=map.split(":");      if (CollectionUtils.isNotEmpty(inputColumns) && !inputColumns.contains(columns[0])) {        throw new IllegalArgumentException("Column name: " + columns[0] + " in 'Column-Label Mapping' does not "+ "match the columns in the 'Column To Be Extracted' input text box. "+ "It has to be one of the columns in 'Column To Be Extracted' "+ "input text box.");      }      columnMapping.put(columns[0],columns[1]);    }  }  if (!Strings.isNullOrEmpty(excelInputreaderConfig.outputSchema)) {    String[] schemaList=excelInputreaderConfig.outputSchema.split(",");    for (    String schema : schemaList) {      String[] columns=schema.split(":");      if (CollectionUtils.isNotEmpty(inputColumns) && !inputColumns.contains(columns[0])) {        throw new IllegalArgumentException("Column name: " + columns[0] + " in 'Field Name Schema Type Mapping'"+ " does not match the columns in the 'Column To Be Extracted' input "+ "text box. It has to be one of the columns in "+ "'Column To Be Extracted' input text box.");      }      outputSchemaMapping.put(columns[0],columns[1]);    }  }}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  Rdn rdn=(new Rfc2253Parser(comp)).parseRdn();  rdns.add(posn,rdn);  unparsed=null;  return this;}  }
class C{  public WFLine(MWFNodeNext next){  m_next=next;  setFocusable(false);  m_description=next.getDescription();  if (m_description != null && m_description.length() > 0)   m_description="{" + String.valueOf(next.getSeqNo()) + ": "+ m_description+ "}";}  }
class C{  public static void $unzip(String zipFilePath,String destPath) throws IOException {  File destFile=new File(destPath);  if (!destFile.exists()) {    destFile.mkdirs();  }  ZipInputStream zipInputStream=new ZipInputStream(new FileInputStream(zipFilePath));  ZipEntry zipEntry;  String zipEntryName;  while ((zipEntry=zipInputStream.getNextEntry()) != null) {    zipEntryName=zipEntry.getName();    if (zipEntry.isDirectory()) {      File folder=new File(destPath + File.separator + zipEntryName);      folder.mkdirs();    } else {      File file=new File(destPath + File.separator + zipEntryName);      if (file != null && !file.getParentFile().exists()) {        file.getParentFile().mkdirs();      }      file.createNewFile();      FileOutputStream out=new FileOutputStream(file);      int len;      byte[] buffer=new byte[1024];      while ((len=zipInputStream.read(buffer)) > 0) {        out.write(buffer,0,len);        out.flush();      }      out.close();    }  }  zipInputStream.close();}  }
class C{  protected boolean[] canHandleClassAsNthAttribute(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex){  if (classIndex == TestInstances.CLASS_IS_LAST) {    print("class attribute as last attribute");  } else {    print("class attribute as " + (classIndex + 1) + ". attribute");  }  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,classIndex,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public Approximator(ApproximatorType type,double tolerance){  setup(type,tolerance);}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  if (evt.getTarget() instanceof Element) {    handleElementAdded((CompositeGraphicsNode)node,e,(Element)evt.getTarget());  } else {    super.handleDOMNodeInsertedEvent(evt);  }}  }
class C{  public BindableRockerModel __body(RockerContent __body){  return bind("__body",__body);}  }
class C{  public void addToHistory(CAS cas,HistoryEvent event){  try {    getDocumentHistory(cas.getJCas()).add(event);  } catch (  CASException e) {    monitor.error("Unable to add to history on add",e);  }}  }
class C{  public String format(EmrVpcPricingState emrVpcPricingState){  StringBuilder builder=new StringBuilder();  builder.append(String.format("Subnet IP Availability:%n"));  for (  Map.Entry<String,Integer> subnet : emrVpcPricingState.getSubnetAvailableIpAddressCounts().entrySet()) {    builder.append(String.format("\t%s=%s%n",subnet.getKey(),subnet.getValue()));  }  Map<String,Map<String,BigDecimal>> spotPricesPerAvailabilityZone=emrVpcPricingState.getSpotPricesPerAvailabilityZone();  if (MapUtils.isNotEmpty(spotPricesPerAvailabilityZone)) {    builder.append(String.format("Spot Prices:%n"));    for (    Map.Entry<String,Map<String,BigDecimal>> availabilityZone : spotPricesPerAvailabilityZone.entrySet()) {      builder.append(String.format("\t%s%n",availabilityZone.getKey()));      for (      Map.Entry<String,BigDecimal> instanceType : availabilityZone.getValue().entrySet()) {        builder.append(String.format("\t\t%s=$%s%n",instanceType.getKey(),instanceType.getValue()));      }    }  }  Map<String,Map<String,BigDecimal>> onDemandPricesPerAvailabilityZone=emrVpcPricingState.getOnDemandPricesPerAvailabilityZone();  if (MapUtils.isNotEmpty(onDemandPricesPerAvailabilityZone)) {    builder.append(String.format("On-Demand Prices:%n"));    for (    Map.Entry<String,Map<String,BigDecimal>> availabilityZone : onDemandPricesPerAvailabilityZone.entrySet()) {      builder.append(String.format("\t%s%n",availabilityZone.getKey()));      for (      Map.Entry<String,BigDecimal> instanceType : availabilityZone.getValue().entrySet()) {        builder.append(String.format("\t\t%s=$%s%n",instanceType.getKey(),instanceType.getValue()));      }    }  }  return builder.toString();}  }
class C{  public static ToHitData nightModifiers(IGame game,Targetable target,AmmoType atype,Entity attacker,boolean isWeapon){  ToHitData toHit=null;  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  }  toHit=new ToHitData();  int lightCond=game.getPlanetaryConditions().getLight();  if (lightCond == PlanetaryConditions.L_DAY) {    return toHit;  }  int hexIllumLvl=game.isPositionIlluminated(target.getPosition());  int night_modifier=0;  night_modifier=game.getPlanetaryConditions().getLightHitPenalty(isWeapon);  toHit.addModifier(night_modifier,game.getPlanetaryConditions().getLightDisplayableName());  boolean illuminated=false;  if (te != null) {    illuminated=te.isIlluminated();    if (!illuminated) {      for (Enumeration<EntityAction> actions=game.getActions(); actions.hasMoreElements(); ) {        EntityAction a=actions.nextElement();        if (a instanceof SearchlightAttackAction) {          SearchlightAttackAction saa=(SearchlightAttackAction)a;          if (saa.willIlluminate(game,te)) {            illuminated=true;            break;          }        }      }    }  }  int searchlightMod=Math.min(3,night_modifier);  if ((te != null) && (lightCond > PlanetaryConditions.L_DUSK) && (te.isUsingSpotlight() || illuminated)) {    if (te.isUsingSpotlight()) {      toHit.addModifier(-searchlightMod,"target using searchlight");      night_modifier=night_modifier - searchlightMod;    } else     if (illuminated) {      toHit.addModifier(-searchlightMod,"target illuminated by searchlight");      night_modifier=night_modifier - searchlightMod;    }  } else   if (hexIllumLvl == Game.ILLUMINATED_FLARE) {    toHit.addModifier(-night_modifier,"target illuminated by flare");    night_modifier=0;  } else   if (hexIllumLvl == Game.ILLUMINATED_FIRE) {    int fireMod=Math.min(2,night_modifier);    toHit.addModifier(-fireMod,"target illuminated by fire");    night_modifier-=fireMod;  } else   if (hexIllumLvl == Game.ILLUMINATED_LIGHT) {    toHit.addModifier(-searchlightMod,"target illuminated by searchlight");    night_modifier-=searchlightMod;  } else   if (atype != null) {    if (((atype.getAmmoType() == AmmoType.T_AC) || (atype.getAmmoType() == AmmoType.T_LAC)) && ((atype.getMunitionType() == AmmoType.M_INCENDIARY_AC) || (atype.getMunitionType() == AmmoType.M_TRACER))) {      toHit.addModifier(-1,"incendiary/tracer ammo");      night_modifier--;    }  }  if ((night_modifier > 0) && (te != null) && (te instanceof Mech)&& ((Mech)te).hasLaserHeatSinks()) {    boolean lhsused=false;    if (te.heat > 0) {      toHit.addModifier(-night_modifier,"target overheated with laser heatsinks");      night_modifier=0;    } else     if ((te.heatBuildup > 0) || te.isStealthActive()) {      lhsused=true;    } else {      for (Enumeration<EntityAction> actions=game.getActions(); actions.hasMoreElements(); ) {        EntityAction a=actions.nextElement();        if (a instanceof WeaponAttackAction) {          WeaponAttackAction waa=(WeaponAttackAction)a;          if (waa.getEntityId() == te.getId()) {            Mounted weapon=te.getEquipment(waa.getWeaponId());            if ((weapon.getCurrentHeat() != 0) || weapon.isRapidfire()) {              lhsused=true;              break;            }          }        }      }    }    if (lhsused) {      toHit.addModifier(-1,"target uses laser heatsinks");    }  }  if ((te != null) && !((attacker instanceof Infantry) && !(attacker instanceof BattleArmor))) {    int heatBonus=game.getPlanetaryConditions().getLightHeatBonus(te.heat);    if (heatBonus < 0) {      toHit.addModifier(heatBonus,"target excess heat at night");    }  }  PilotOptions pOpts=attacker.getCrew().getOptions();  if ((toHit.getValue() > 0) && (null != attacker.getCrew()) && pOpts.booleanOption("blind_fighter")) {    toHit.addModifier(-1,"blind fighter");  }  return toHit;}  }
class C{  public TabSet(TabStop[] tabs){  if (tabs != null) {    int tabCount=tabs.length;    this.tabs=new TabStop[tabCount];    System.arraycopy(tabs,0,this.tabs,0,tabCount);  } else   this.tabs=null;}  }
class C{  public Instruction firstInstructionInCodeOrder(){  return firstBasicBlockInCodeOrder().firstInstruction();}  }
class C{  public static void createTaskFile(@NotNull final VirtualFile taskDir,@NotNull final File resourceRoot,@NotNull final String name) throws IOException {  String systemIndependentName=FileUtil.toSystemIndependentName(name);  final int index=systemIndependentName.lastIndexOf("/");  if (index > 0) {    systemIndependentName=systemIndependentName.substring(index + 1);  }  File resourceFile=new File(resourceRoot,name);  File fileInProject=new File(taskDir.getPath(),systemIndependentName);  FileUtil.copy(resourceFile,fileInProject);}  }
class C{  private int refreshFileList(){  File[] files=null;  try {    files=new File(path).listFiles();  } catch (  Exception e) {    files=null;  }  if (files == null) {    Toast.makeText(getContext(),sOnErrorMsg,Toast.LENGTH_SHORT).show();    return -1;  }  if (list != null) {    list.clear();  } else {    list=new ArrayList<Map<String,Object>>(files.length);  }  ArrayList<Map<String,Object>> lfolders=new ArrayList<Map<String,Object>>();  ArrayList<Map<String,Object>> lfiles=new ArrayList<Map<String,Object>>();  if (!this.path.equals(sRoot)) {    Map<String,Object> map=new HashMap<String,Object>();    map.put("name",sRoot);    map.put("path",sRoot);    map.put("img",getImageId(sRoot));    list.add(map);    map=new HashMap<String,Object>();    map.put("name",sParent);    map.put("path",path);    map.put("img",getImageId(sParent));    list.add(map);  }  for (  File file : files) {    if (file.isDirectory() && file.listFiles() != null) {      Map<String,Object> map=new HashMap<String,Object>();      map.put("name",file.getName());      map.put("path",file.getPath());      map.put("img",getImageId(sFolder));      lfolders.add(map);    } else     if (file.isFile()) {      String sf=getSuffix(file.getName()).toLowerCase(Locale.getDefault());      if (suffix == null || suffix.length() == 0 || (sf.length() > 0 && suffix.indexOf("." + sf + ";") >= 0)) {        Map<String,Object> map=new HashMap<String,Object>();        map.put("name",file.getName());        map.put("path",file.getPath());        map.put("img",getImageId(sf));        lfiles.add(map);      }    }  }  list.addAll(lfolders);  list.addAll(lfiles);  SimpleAdapter adapter=new SimpleAdapter(getContext(),list,R.layout.filedialogitem,new String[]{"img","name","path"},new int[]{R.id.filedialogitem_img,R.id.filedialogitem_name,R.id.filedialogitem_path});  this.setAdapter(adapter);  return files.length;}  }
class C{  public boolean pop(){  return backStack.pop(parentKey);}  }
class C{  public static boolean runQueryOnInstance(QueryWrapper queryWrapper,Model queryModel,Model newTriples,Resource instance,boolean checkContains){  boolean changed=false;  QuerySolutionMap bindings=new QuerySolutionMap();  bindings.add(SPIN.THIS_VAR_NAME,instance);  Map<String,RDFNode> initialBindings=queryWrapper.getTemplateBinding();  if (initialBindings != null) {    for (    String varName : initialBindings.keySet()) {      RDFNode value=initialBindings.get(varName);      bindings.add(varName,value);    }  }  QueryExecution qexec=ARQFactory.get().createQueryExecution(queryWrapper.getQuery(),queryModel,bindings);  Model cm=qexec.execConstruct();  StmtIterator cit=cm.listStatements();  while (cit.hasNext()) {    Statement s=cit.nextStatement();    if (!checkContains || !queryModel.contains(s)) {      changed=true;      newTriples.add(s);    }  }  return changed;}  }
class C{  public static void verifyValueBounds(DateTimeField field,int value,int lowerBound,int upperBound){  if ((value < lowerBound) || (value > upperBound)) {    throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public boolean hasSubject(){  return hasExtension(Subject.class);}  }
class C{  private int readHeaders(InputStream is){  int nread=0;  log("Read headers");  while (true) {    int headerLen=0;    headerLen=parseHeader(is);    if (headerLen == -1)     return -1;    nread+=headerLen;    if (headerLen <= 2) {      return nread;    }  }}  }
class C{  public boolean checkManagementExceptions(ManagementException e){  if (e.getMessage().equals(ManagementStrings.Management_Service_CLOSED_CACHE) || e.getMessage().equals(ManagementStrings.Management_Service_MANAGEMENT_SERVICE_IS_CLOSED.toLocalizedString()) || e.getMessage().equals(ManagementStrings.Management_Service_MANAGEMENT_SERVICE_NOT_STARTED_YET.toLocalizedString())|| e.getMessage().equals(ManagementStrings.Management_Service_NOT_A_GEMFIRE_DOMAIN_MBEAN.toLocalizedString())|| e.getMessage().equals(ManagementStrings.Management_Service_NOT_A_MANAGING_NODE_YET.toLocalizedString())|| e.getMessage().equals(ManagementStrings.Management_Service_OPERATION_NOT_ALLOWED_FOR_CLIENT_CACHE.toLocalizedString())|| e.getMessage().equals(ManagementStrings.Management_Service_PROXY_NOT_AVAILABLE.toLocalizedString())) {    return false;  }  return true;}  }
class C{  public RetriesLimitReachedException(int retries){  super(String.format("Reached retries limit : %d",retries));}  }
class C{  public final void testEqualsObject04(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertFalse(c1.equals("TEST_TYPE"));}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  public boolean hasThree(){  return points.size() > 2;}  }
class C{  private void putPropertyStrings(Service s){  String type=s.getType();  String algorithm=s.getAlgorithm();  super.put(type + "." + algorithm,s.getClassName());  for (  String alias : s.getAliases()) {    super.put(ALIAS_PREFIX + type + "."+ alias,algorithm);  }  for (  Map.Entry<UString,String> entry : s.attributes.entrySet()) {    String key=type + "." + algorithm+ " "+ entry.getKey();    super.put(key,entry.getValue());  }}  }
class C{  private void initNumericValue(){  if (numericValue == 0) {    numericValue=NumberUtils.stringToInt(StringUtils.trim(value));    if (numericValue == 0 && !"0".equals(value)) {      setError("Value " + value + " is not a valid number (tried to cast to java type long)");    }  }}  }
class C{  public SynchronizedProtocolDecoder(ProtocolDecoder decoder){  if (decoder == null) {    throw new IllegalArgumentException("decoder");  }  this.decoder=decoder;}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_attStats == null) {    Instances input=getInputFormat();    m_attStats=new AttributeStats[input.numAttributes()];    for (int i=0; i < input.numAttributes(); i++) {      if (input.attribute(i).isNumeric() && (input.classIndex() != i)) {        m_attStats[i]=input.attributeStats(i);      }    }    for (int i=0; i < input.numInstances(); i++) {      convertInstance(input.instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public boolean endBatchEdit(){  return false;}  }
class C{  public static void dropTable(HiveMetastoreClient ms,HiveObjectSpec spec) throws HiveMetastoreException {  ms.dropTable(spec.getDbName(),spec.getTableName(),true);}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  throw new NotUpdatable();}  }
class C{  public ReadRequest clone(){  ReadRequest result=new ReadRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.MaxAge=MaxAge;  result.TimestampsToReturn=TimestampsToReturn;  if (NodesToRead != null) {    result.NodesToRead=new ReadValueId[NodesToRead.length];    for (int i=0; i < NodesToRead.length; i++)     result.NodesToRead[i]=NodesToRead[i].clone();  }  return result;}  }
class C{  @NotNull public PsiQuery children(@NotNull final Class<? extends PsiElement> clazz){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    result.addAll(PsiTreeUtil.findChildrenOfType(element,clazz));  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public int iterativeSize(){  return 0;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override public SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException {  LOGGER.debug("Loading user by user id: {}",userId);  UserDetails userDetails=userDetailsService.loadUserByUsername(userId);  LOGGER.debug("Found user details: {}",userDetails);  return (SocialUserDetails)userDetails;}  }
class C{  public static void deleteUmptyFoldersInFolder(File folder){  if (folder.isFile())   return;  if (folder.listFiles() == null || folder.listFiles().length <= 0) {    folder.delete();  } else {    for (    File f : folder.listFiles()) {      if (f.isDirectory())       deleteUmptyFoldersInFolder(f);    }  }  if (folder.listFiles() == null || folder.listFiles().length <= 0) {    Logger.appendLog("[FilesUtils][I] deleting because it is empty " + folder.getAbsolutePath());    folder.delete();  }}  }
class C{  public long calculateLastFetchTime(CrawlDatum datum){  return datum.getFetchTime() - (long)datum.getFetchInterval() * 1000;}  }
class C{  @Override public boolean isInfoEnabled(){  return logger.isLoggable(Level.INFO);}  }
class C{  UnknownFunctionException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  public InvalidOpenTypeException(String msg){  super(msg);}  }
class C{  @Nullable public static Class<?> box(@Nullable Class<?> cls){  if (cls == null)   return null;  if (!cls.isPrimitive())   return cls;  return boxedClsMap.get(cls);}  }
class C{  public static void segregate0sAnd1s(int[] a){  for (int i=0, j=a.length - 1; i < j; i++, j--) {    if (a[i] > a[j]) {      a[i]=a[i] + a[j];      a[j]=a[i] - a[j];      a[i]=a[i] - a[j];    }  }}  }
class C{  public void menuDeselected(final MenuEvent arg0){}  }
class C{  public Aggregate(){  this(IoBuffer.allocate(0).flip());}  }
class C{  public final synchronized void resignGame(){  if (game.getGameState() == GameState.ALIVE) {    game.processString("resign");    updateGUI();  }}  }
class C{  public static <E>Set<E> newSetFromMap(Map<E,Boolean> map){  if (map.isEmpty()) {    return new SetFromMap<E>(map);  }  throw new IllegalArgumentException();}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public static void logFinishedTask(final SpeedTestMode mode,final long packetSize,final BigDecimal transferRateBitPerSeconds,final BigDecimal transferRateOctetPerSeconds,final Logger logger){  if (logger.isDebugEnabled()) {switch (mode) {case DOWNLOAD:      logger.debug("======== Download [ OK ] =============");    break;case UPLOAD:  logger.debug("========= Upload [ OK ]  =============");break;default :break;}logger.debug("upload packetSize     : " + packetSize + " octet(s)");logger.debug("upload transfer rate  : " + transferRateBitPerSeconds + " bit/second   | "+ transferRateBitPerSeconds.divide(VALUE_PER_SECONDS,DEFAULT_SCALE,DEFAULT_ROUNDING_MODE)+ " Kbit/second  | "+ transferRateBitPerSeconds.divide(MEGA_VALUE_PER_SECONDS)+ " Mbit/second");logger.debug("upload transfer rate  : " + transferRateOctetPerSeconds + " octet/second | "+ transferRateOctetPerSeconds.divide(VALUE_PER_SECONDS,DEFAULT_SCALE,DEFAULT_ROUNDING_MODE)+ " Koctet/second | "+ transferRateOctetPerSeconds.divide(MEGA_VALUE_PER_SECONDS,DEFAULT_SCALE,DEFAULT_ROUNDING_MODE)+ " "+ "Moctet/second");logger.debug("##################################################################");}}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(getClass().getName());  buf.append("@");  buf.append(Integer.toHexString(hashCode()));  buf.append("[");  extendToString(buf);  buf.append("]");  return buf.toString();}  }
class C{  public WebgraphConfiguration(boolean lazy){  super();  this.lazy=lazy;}  }
class C{  @Override public Optional<MessageUid> lastUid(MailboxSession session,Mailbox mailbox) throws MailboxException {  HTable mailboxes=null;  HBaseId mailboxId=(HBaseId)mailbox.getMailboxId();  try {    mailboxes=new HTable(conf,MAILBOXES_TABLE);    Get get=new Get(mailboxId.toBytes());    get.addColumn(MAILBOX_CF,MAILBOX_LASTUID);    get.setMaxVersions(1);    Result result=mailboxes.get(get);    if (result == null) {      throw new MailboxException("Row or column not found!");    }    long rawUid=Bytes.toLong(result.getValue(MAILBOX_CF,MAILBOX_LASTUID));    if (rawUid == 0) {      return Optional.absent();    }    return Optional.of(MessageUid.of(rawUid));  } catch (  IOException e) {    throw new MailboxException("lastUid",e);  } finally {    if (mailboxes != null) {      try {        mailboxes.close();      } catch (      IOException ex) {        throw new MailboxException("Error closing table " + mailboxes,ex);      }    }  }}  }
class C{  public double borderDistance(double lat,double lon){  double nsdistance;  double ewdistance;  if (south <= lat && lat <= north) {    nsdistance=0;  } else {    nsdistance=Math.min((Math.abs(lat - north)),(Math.abs(lat - south)));  }  if (west <= lon && lon <= east) {    ewdistance=0;  } else {    ewdistance=Math.min((Math.abs(lon - east)),(Math.abs(lon - west)));  }  return Math.sqrt(Math.pow(nsdistance,2.0) + Math.pow(ewdistance,2.0));}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void dismiss(){  if (notificationManager != null) {    notificationManager.cancel(notificationInfo.getNotificationId());  }}  }
class C{  public OpenIntIntHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  @DELETE @Path("/{token}") public void invalidateToken(@PathParam("token") String authToken) throws GuacamoleException {  if (!authenticationService.destroyGuacamoleSession(authToken))   throw new GuacamoleResourceNotFoundException("No such token.");}  }
class C{  public static boolean playerAttack(final Player player,final RPEntity defender){  boolean result=false;  final StendhalRPZone zone=player.getZone();  if (!zone.has(defender.getID()) || (defender.getHP() == 0)) {    logger.debug("Attack from " + player + " to "+ defender+ " stopped because target was lost("+ zone.has(defender.getID())+ ") or dead.");    player.stopAttack();    return false;  }  defender.rememberAttacker(player);  if (defender instanceof Player) {    player.storeLastPVPActionTime();    if (zone.isInProtectionArea(defender) || zone.isInProtectionArea(player)) {      logger.debug("Attack from " + player + " to "+ defender+ " stopped because "+ player+ " or "+ defender+ " moved into protected area.");      player.stopAttack();      return false;    }  }  boolean isRanged=false;  if (!player.nextTo(defender)) {    if (player.canDoRangeAttack(defender,player.getMaxRangeForArcher())) {      if (!player.hasLineOfSight(defender)) {        return false;      }      isRanged=true;    } else {      logger.debug("Attack from " + player + " to "+ defender+ " failed because target is not near.");      return false;    }  }  Item attackWeapon=player.getWeapon();  String weaponClass=null;  if (attackWeapon != null) {    weaponClass=attackWeapon.getWeaponType();  }  final boolean beaten=player.canHit(defender);  if (!Testing.COMBAT) {    if (!(defender instanceof SpeakerNPC) && player.getsFightXpFrom(defender)) {      player.incAtkXP();    }  }  if (beaten) {    if ((defender instanceof Player) && defender.getsFightXpFrom(player)) {      defender.incDefXP();    }    final List<Item> weapons=player.getWeapons();    int damage=player.damageDone(defender,player.getItemAtk(),player.getDamageType());    if (damage > 0) {      damage=Math.min(damage,defender.getHP());      player.handleLifesteal(player,weapons,damage);      defender.onDamaged(player,damage);      logger.debug("attack from " + player.getID() + " to "+ defender.getID()+ ": Damage: "+ damage);      result=true;      if (Testing.COMBAT) {        if (!(defender instanceof SpeakerNPC)) {          if (isRanged) {            player.incRatkXP();          } else {            player.incAtkXP();          }        }      }    } else {      logger.debug("attack from " + player.getID() + " to "+ defender.getID()+ ": Damage: "+ 0);    }    for (    Item weapon : weapons) {      weapon.deteriorate();    }    List<Item> defenseItems=defender.getDefenseItems();    if (!defenseItems.isEmpty()) {      Rand.rand(defenseItems).deteriorate();    }    player.addEvent(new AttackEvent(true,damage,player.getDamageType(),weaponClass,isRanged));    player.notifyWorldAboutChanges();  } else {    logger.debug("attack from " + player.getID() + " to "+ defender.getID()+ ": Missed");    player.addEvent(new AttackEvent(false,0,player.getDamageType(),weaponClass,isRanged));    player.notifyWorldAboutChanges();  }  if (isRanged) {    useMissile(player);  }  player.notifyWorldAboutChanges();  return result;}  }
class C{  public boolean disableImageAccessSingleStep(URI rpSystemId,URI exportGroupURI,List<URI> snapshots,boolean isRollback,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    disableImageForSnapshots(rpSystemId,snapshots,isRollback,false,token);    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error(String.format("disableImageAccessSingleStep Failed - Protection System: %s, export group: %s",String.valueOf(rpSystemId),String.valueOf(exportGroupURI)));    return stepFailed(token,e,"disableImageAccessSingleStep");  }  return true;}  }
class C{  public boolean contains(int value){  return lastIndexOf(value) >= 0;}  }
class C{  public boolean isWordToken(final BashPsiBuilder builder){  return isWordToken(builder,false);}  }
class C{  public RegistrationBuilder addContact(URI contact){  contacts.add(contact);  return this;}  }
class C{  public void run(){  try {synchronized (this) {      while (true) {        while (this.poolFile == null) {          this.wait();          if (this.poolFile == null) {            return;          }        }        ValueOutputStream vos=new ValueOutputStream(this.poolFile);        for (int i=0; i < this.buf.length; i++) {          this.buf[i].write(vos);        }        vos.close();        this.poolFile=null;        this.notify();        if (this.reader != null)         this.reader.wakeup();      }    }  } catch (  Exception e) {    MP.printError(EC.SYSTEM_ERROR_WRITING_POOL,e.getMessage(),e);    System.exit(1);  }}  }
class C{  private void initGzipFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering GZip Filter");  FilterRegistration.Dynamic compressingFilter=servletContext.addFilter("gzipFilter",new GZipServletFilter());  Map<String,String> parameters=new HashMap<>();  compressingFilter.setInitParameters(parameters);  compressingFilter.addMappingForUrlPatterns(disps,true,"*.css");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.json");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.html");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.js");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.svg");  compressingFilter.addMappingForUrlPatterns(disps,true,"*.ttf");  compressingFilter.addMappingForUrlPatterns(disps,true,"/api/*");  compressingFilter.addMappingForUrlPatterns(disps,true,"/metrics/*");  compressingFilter.setAsyncSupported(true);}  }
class C{  public static void put(long[] bits,int bitIndex,boolean value){  if (value)   set(bits,bitIndex); else   clear(bits,bitIndex);}  }
