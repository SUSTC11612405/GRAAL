class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosTempleArea(zone);}  }
class C{  public static boolean isRunningWindows(){  return System.getProperty("os.name").startsWith("Windows");}  }
class C{  public void print(){  System.out.printf("%08X: ",m_address);  for (  final byte element : m_data) {    System.out.printf("%02X ",element);  }  System.out.println();}  }
class C{  public Matrix subAssign(final Matrix another){  QL.require(rows() == another.rows() && cols() == another.cols(),MATRIX_IS_INCOMPATIBLE);  if (this.addr.isContiguous() && another.addr.isContiguous()) {    for (int i=0; i < size(); i++) {      this.$[i]-=another.$[i];    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();    final Address.MatrixAddress.MatrixOffset aoff=another.addr.offset();    for (int row=0; row < rows(); row++) {      toff.setRow(row);      aoff.setRow(row);      for (int col=0; col < cols(); col++) {        this.$[toff.op()]-=another.$[aoff.op()];        addr++;        toff.nextCol();        aoff.nextCol();      }    }  }  return this;}  }
class C{  private int freeDeferrals(final AbstractJournal journal,final long fromTime,final long toTime){  final ITupleIterator<CommitRecordIndex.Entry> commitRecords;  final IIndex commitRecordIndex=journal.getReadOnlyCommitRecordIndex();  if (commitRecordIndex == null) {    return 0;  }  final IndexMetadata metadata=commitRecordIndex.getIndexMetadata();  final byte[] fromKey=metadata.getTupleSerializer().serializeKey(fromTime);  final byte[] toKey=metadata.getTupleSerializer().serializeKey(toTime);  commitRecords=commitRecordIndex.rangeIterator(fromKey,toKey);  int totalFreed=0;  int commitPointsRecycled=0;  while (commitRecords.hasNext()) {    final ITuple<CommitRecordIndex.Entry> tuple=commitRecords.next();    final CommitRecordIndex.Entry entry=tuple.getObject();    try {      final ICommitRecord record=CommitRecordSerializer.INSTANCE.deserialize(journal.read(entry.addr));      final long blockAddr=record.getRootAddr(AbstractJournal.DELETEBLOCK);      if (blockAddr != 0) {        totalFreed+=freeDeferrals(blockAddr,record.getTimestamp());      }      commitPointsRecycled++;    } catch (    RuntimeException re) {      throw new RuntimeException("Problem with entry at " + entry.addr,re);    }  }  final int commitPointsRemoved=journal.removeCommitRecordEntries(fromKey,toKey);  if (txLog.isInfoEnabled())   txLog.info("RECYCLED: fromTime=" + fromTime + ", toTime="+ toTime+ ", totalFreed="+ totalFreed+ ", commitPointsRecycled="+ commitPointsRecycled+ ", commitPointsRemoved="+ commitPointsRemoved);  if (commitPointsRecycled != commitPointsRemoved)   throw new AssertionError("commitPointsRecycled=" + commitPointsRecycled + " != commitPointsRemoved="+ commitPointsRemoved);  return totalFreed;}  }
class C{  public void close(){  SharedViewer.closeCalled=true;  currentCommands.executeCommand(Commands.EXIT,null);}  }
class C{  protected State(){}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMoreCode_();}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public PartitionAttributesFactory<K,V> addFixedPartitionAttributes(FixedPartitionAttributes fpa){synchronized (this.partitionAttributes) {    this.partitionAttributes.addFixedPartitionAttributes(fpa);    return this;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CustomPieURLGenerator urlGen=new CustomPieURLGenerator();  Map map;  Map newMap;  String key;  for (Iterator i=this.urls.iterator(); i.hasNext(); ) {    map=(Map)i.next();    newMap=new HashMap();    for (Iterator j=map.keySet().iterator(); j.hasNext(); ) {      key=(String)j.next();      newMap.put(key,map.get(key));    }    urlGen.addURLs(newMap);  }  return urlGen;}  }
class C{  protected void finish(Map<String,Object> result) throws InvalidJobException {  if (currentState != State.RUNNING) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.FINISHED;  if (Debug.verboseOn())   Debug.logVerbose("Async-Service finished.",module);}  }
class C{  public static void addInsets(@NotNull JComponent component,@NotNull Insets insets){  addInsets(component,insets.top,insets.left,insets.bottom,insets.right);}  }
class C{  @Override public synchronized void acceptTestSet(TestSetEvent e){  TextEvent nt=new TextEvent(e.getSource(),e.getTestSet().toString(),e.getTestSet().relationName());  acceptText(nt);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Seeker.getInstance().getUseDTVMajorMinorChans());}  }
class C{  public boolean isAssignableTo(GenericClass lhsType){  return isAssignable(lhsType.type,type);}  }
class C{  private synchronized boolean die(boolean action,boolean value){  if (action == SET) {    die=value;  }  return die;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int s=info.length;  byte[] srcInfo=info;  byte[] newInfo=new byte[s];  for (int i=0; i < s; ++i)   newInfo[i]=srcInfo[i];  return new AttributeInfo(newCp,getName(),newInfo);}  }
class C{  public static int findPreviousNonMarkNorOtherCharacter(String text,int column){  if (column - 1 < 0) {    return -1;  }  MatchResult match=RegExpUtils.findMatchBeforeIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column);  if (match == null) {    return -1;  } else {    return match.getIndex();  }}  }
class C{  protected void writeLiteral(Object literal){  super.writeLiteral(literal);  if (Date.class.isAssignableFrom(literal.getClass())) {    field=dateFormatter.print(((Date)literal).getTime());  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public QueryService addCriteria(String ldpath,Number value,Comparison comparison){  queryServiceDTO.getCriteria().add(new Criteria(ldpath,value,comparison));  return this;}  }
class C{  public void writeJarFromName(final String className,final File outputFile) throws IOException {  writeJarFromContent(className,"public class " + className + "{}",outputFile);}  }
class C{  public static int millisecondsPerTick(int tps){  return 1000 / tps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.500 -0400",hash_original_method="F5D6469F4576D324414C9087777D12E4",hash_generated_method="8A113769AAE311B1AB073825E0B8D45F") public ExtensionFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void check(){  LogService.getRoot().log(Level.INFO,"com.rapidminer.tools.documentation.OperatorDocBundle.checking_operator_documentation");  int missing=0;  int same=0;  int deprecation=0;  int different=0;  int empty=0;  for (  Map.Entry<String,OperatorDocumentation> entry : operatorKeyDescriptionMap.entrySet()) {    String key=entry.getKey();    OperatorDocumentation doc=entry.getValue();    if (key.startsWith("W-")) {      continue;    }    if (doc.getDocumentation().trim().isEmpty()) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.documentation.OperatorDocBundle.empty_documentation",key);      empty++;    }    OperatorDescription desc=OperatorService.getOperatorDescription(key);    if (desc == null) {      missing++;      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.documentation.OperatorDocBundle.documentation_for_nonexistent_operator",key);    }    String replacement=OperatorService.getReplacementForDeprecatedClass(key);    if (replacement != null) {      deprecation++;      String string;      OperatorDocumentation otherDoc=operatorKeyDescriptionMap.get(replacement);      if (otherDoc != null) {        if (otherDoc.getDocumentation().equals(doc.getDocumentation())) {          string=replacement + " has the same documentation entry.";          same++;        } else {          string=replacement + " has a different documentation entry.";          different++;        }      } else {        string=replacement + " has no documentation entry.";      }      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.documentation.OperatorDocBundle.documentation_for_deprecated_operator",new Object[]{key,replacement,string});    }  }  LogService.getRoot().log(Level.INFO,"com.rapidminer.tools.I18N.operator_doc_bundle_warning4",new Object[]{empty,missing,(deprecation),same,(deprecation - same - different)});}  }
class C{  public static <T,K,V>MutableMap<K,V> toMap(T[] objectArray,Function<? super T,? extends K> keyFunction,Function<? super T,? extends V> valueFunction){  MutableMap<K,V> map=UnifiedMap.newMap();  Procedure<T> procedure=new MapCollectProcedure<>(map,keyFunction,valueFunction);  ArrayIterate.forEach(objectArray,procedure);  return map;}  }
class C{  public Query like(String fieldName,Reader... readers) throws IOException {  Map<String,Map<String,Int>> perFieldTermFrequencies=new HashMap<>();  for (  Reader r : readers) {    addTermFrequencies(r,perFieldTermFrequencies,fieldName);  }  return createQuery(createQueue(perFieldTermFrequencies));}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if ((z1 + z2) > 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public char currentCharacter(){  return ch;}  }
class C{  public void endVisit(NumberLiteral node){}  }
class C{  public Vertex basicGetTarget(){  return target;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:26.568 -0500",hash_original_method="F85B53817DDA0DC627A3FD344338966A",hash_generated_method="E1AA38C47583B8A7FD0F5013C7785A12") public boolean hasNextLine(){  checkClosed();  matcher.usePattern(LINE_PATTERN);  matcher.region(findStartIndex,bufferLength);  boolean hasNextLine=false;  while (true) {    if (matcher.find()) {      if (inputExhausted || matcher.end() != bufferLength) {        matchSuccessful=true;        hasNextLine=true;        break;      }    } else {      if (inputExhausted) {        matchSuccessful=false;        break;      }    }    if (!inputExhausted) {      readMore();      resetMatcher();    }  }  return hasNextLine;}  }
class C{  public Params groupBy(String groupId){  this.groupId=groupId;  return this;}  }
class C{  public final static HeaderElement[] parseElements(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseElements(buffer,cursor);}  }
class C{  public DateTickUnit(int unit,int count,DateFormat formatter){  this(unit,count,unit,count,formatter);}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> sepBy(Parser<I,A> p,Parser<I,SEP> sep){  return or(sepBy1(p,sep),retn(IList.of()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.393 -0500",hash_original_method="9220AC3EDC51213CD50D1AE5DD6068EA",hash_generated_method="B2C3788E779EF96C95BB7720C0B4E432") public static void cursorIntToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getInt(index));  }}  }
class C{  public List<MediaSearchResult> searchMovie(String searchTerm,Movie movie,MediaScraper metadataScraper){  return searchMovie(searchTerm,movie,metadataScraper,movieSettings.getScraperLanguage());}  }
class C{  public NullAnyElementProperties(Element documentElement){  this.documentElement=documentElement;}  }
class C{  public void pO(String s) throws IOException {  pO();  p(s);}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries,Comparator<? super K> comparator){  return fromEntries(checkNotNull(comparator),false,entries);}  }
class C{  public void close(){  try {    file.close();  } catch (  IOException ignore) {  }}  }
class C{  protected ActionErrors validarInteresadoForm(HttpServletRequest request,InteresadoForm interesadoForm){  ActionErrors errors=new ActionErrors();  String documento=interesadoForm.getNumeroIdentificacion();  if (StringUtils.isEmpty(interesadoForm.getNombre())) {    errors.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NOMBREAPELLIDOS,request.getLocale())));  }  if (!StringUtils.isBlank(documento)) {    if (interesadoForm.getTipoIdentificacion() == Constants.TIPO_DOCUMENTO_CIF) {      if (!esFormatoCif(documento)) {        errors.add(Constants.ERROR_NUM_IDENTIFICACION_NO_VALIDO,new ActionError(Constants.ERROR_NUM_IDENTIFICACION_NO_VALIDO,Messages.getString(Constants.ETIQUETA_NUMIDENTIDAD,request.getLocale())));      } else {        if (!esCifValido(documento)) {          errors.add(Constants.ERROR_NIF_CIF_INCORRECTO,new ActionError(Constants.ERROR_NIF_CIF_INCORRECTO,getCifCorrecto(documento)));        }      }    } else     if (interesadoForm.getTipoIdentificacion() == Constants.TIPO_DOCUMENTO_NIF) {      String digitos=null;      String letra=null;      if (esNumeroNif(documento)) {        digitos=addCeros(documento,8);        letra=getLetraNif(digitos);        documento=digitos + letra;        interesadoForm.setNumeroIdentificacion(documento);      } else {        documento=documento.toUpperCase();        if (!esFormatoNif(documento)) {          errors.add(Constants.ERROR_NUM_IDENTIFICACION_NO_VALIDO,new ActionError(Constants.ERROR_NUM_IDENTIFICACION_NO_VALIDO,Messages.getString(Constants.ETIQUETA_NUMIDENTIDAD,request.getLocale())));        } else {          documento=addCeros(documento,9);          if (!esNifValido(documento)) {            errors.add(Constants.ERROR_NIF_CIF_INCORRECTO,new ActionError(Constants.ERROR_NIF_CIF_INCORRECTO,getNifCorrecto(documento)));          }        }      }      interesadoForm.setNumeroIdentificacion(documento);    }  }  return errors;}  }
class C{  public DefaultKeyedValues(){  this.keys=new ArrayList();  this.values=new ArrayList();  this.indexMap=new HashMap();}  }
class C{  public void findSubviewIn(int reactTag,float targetX,float targetY,Callback callback){  mOperationsQueue.enqueueFindTargetForTouch(reactTag,targetX,targetY,callback);}  }
class C{  public void moveStationToBody(ISpaceObject station,int dimId,int timeDelta){  if (station.getOrbitingPlanetId() != WARPDIMID && spaceStationOrbitMap.get(station.getOrbitingPlanetId()) != null) {    spaceStationOrbitMap.get(station.getOrbitingPlanetId()).remove(station);  }  if (spaceStationOrbitMap.get(WARPDIMID) == null)   spaceStationOrbitMap.put(WARPDIMID,new LinkedList<ISpaceObject>());  if (!spaceStationOrbitMap.get(WARPDIMID).contains(station))   spaceStationOrbitMap.get(WARPDIMID).add(station);  station.setOrbitingBody(WARPDIMID);  PacketHandler.sendToAll(new PacketStationUpdate(station,PacketStationUpdate.Type.ORBIT_UPDATE));  AdvancedRocketry.proxy.fireFogBurst(station);  ((DimensionProperties)station.getProperties()).setAtmosphereDensityDirect(0);  nextStationTransitionTick=(int)(Configuration.travelTimeMultiplier * timeDelta) + DimensionManager.getWorld(Configuration.spaceDimId).getTotalWorldTime();  station.beginTransition(nextStationTransitionTick);}  }
class C{  public boolean isInsertRecord(){  Object oo=get_Value(COLUMNNAME_IsInsertRecord);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static private WbXmlDocument createActiveSync(WbXmlDefinition def){  return new WbXmlDocument(WbXmlVersion.VERSION_1_3,def,IanaCharset.UTF_8,new WbXmlBody(new WbXmlElement("AirSync:Sync",new WbXmlElement("AirSync:Collections",new WbXmlElement("AirSync:Collection",new WbXmlElement[]{new WbXmlElement("AirSync:Class","Contacts"),new WbXmlElement("AirSync:SyncKey","2"),new WbXmlElement("AirSync:CollectionId","2"),new WbXmlElement("AirSync:Status","1"),new WbXmlElement("AirSync:Commands",new WbXmlElement("AirSync:Add",new WbXmlElement[]{new WbXmlElement("AirSync:ServerId","2:1"),new WbXmlElement("AirSync:ApplicationData",new WbXmlElement[]{new WbXmlElement("AirSyncBase:Body",new WbXmlElement[]{new WbXmlElement("AirSyncBase:Type","1"),new WbXmlElement("AirSyncBase:EstimatedDataSize","0"),new WbXmlElement("AirSyncBase:Truncated","1")}),new WbXmlElement("Contacts:FileAs","Funk, Don"),new WbXmlElement("Contacts:FirstName","Don"),new WbXmlElement("Contacts:LastName","Funk"),new WbXmlElement("AirSyncBase:NativeBodyType","1")})}))})))));}  }
class C{  public void removeEmote(){  if (currentEmote == null) {    return;  }  currentEmote.clear();  currentEmote=null;}  }
class C{  protected void doSpot(){  if ((ce() == null) || (target == null)) {    return;  }  if (ce().isINarcedWith(INarcPod.HAYWIRE)) {    String title=Messages.getString("FiringDisplay.CantSpotDialog.title");    String body=Messages.getString("FiringDisplay.CantSpotDialog.message");    clientgui.doAlertDialog(title,body);    return;  }  String title=Messages.getString("FiringDisplay.SpotForInderectDialog.title");  String body=Messages.getString("FiringDisplay.SpotForInderectDialog.message");  if (!clientgui.doYesNoDialog(title,body)) {    return;  }  attacks.addElement(new SpotAction(cen,target.getTargetId()));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean absValuesOnly=false;  boolean reflectAtBorders=true;  String direction="vertical";  double centreValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      String str=args[i].toLowerCase();      if (str.contains("v")) {        direction="vertical";      } else       if (str.contains("h")) {        direction="horizontal";      } else       if (str.contains("45")) {        direction="45";      } else       if (str.contains("135")) {        direction="135";      } else {        direction="vertical";      }    } else     if (i == 3) {      absValuesOnly=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("vertical")) {      weights=new double[]{-1,2,-1,-1,2,-1,-1,2,-1};    } else     if (direction.equals("horizontal")) {      weights=new double[]{-1,-1,-1,2,2,2,-1,-1,-1};    } else     if (direction.equals("135")) {      weights=new double[]{2,-1,-1,-1,2,-1,-1,-1,2};    } else {      weights=new double[]{-1,-1,2,-1,2,-1,2,-1,-1};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    if (absValuesOnly) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            if (sum < 0) {              sum=-sum;            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void append(BytesRefBuilder builder){  append(builder.get());}  }
class C{  public DoubleMatrix2D viewSlice(int slice){  checkSlice(slice);  int viewRows=this.rows;  int viewColumns=this.columns;  int viewRowZero=rowZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _sliceOffset(_sliceRank(slice));  int viewRowStride=this.rowStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.rowOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedSparseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public int findItemPosition(MenuItem item){  for (int i=0; i < mParams.numItems; i++) {    if (mItems[i] == item)     return i;  }  return -1;}  }
class C{  private void reopenWindow(Window window){  if (windowStateManager.shouldReopen(window)) {    if (window == liveStreamsDialog) {      openLiveStreamsDialog();    } else     if (window == highlightedMessages) {      openHighlightedMessages();    } else     if (window == ignoredMessages) {      openIgnoredMessages();    } else     if (window == channelInfoDialog) {      openChannelInfoDialog();    } else     if (window == addressbookDialog) {      openAddressbook(null);    } else     if (window == adminDialog) {      openChannelAdminDialog();    } else     if (window == emotesDialog) {      openEmotesDialog();    } else     if (window == followerDialog) {      openFollowerDialog();    } else     if (window == subscribersDialog) {      openSubscriberDialog();    } else     if (window == moderationLog) {      openModerationLog();    } else     if (window == streamChat) {      openStreamChat();    }  }}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Node copy(){  CompilerAsserts.neverPartOfCompilation("do not call Node.copy from compiled code");  try {    return (Node)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public String maxRangeTipText(){  return "The upper boundary for the range x is drawn from randomly.";}  }
class C{  public static void duplicate(File f){  String fn=f.getName();  boolean copied=false;  for (  MassStorageDevice device : USBMassStorage.connectedDevices) {    File crash=new File(device.toast_directory,"crash");    crash.mkdirs();    copied=true;    try {      Files.copy(f.toPath(),new File(crash,fn).toPath());    } catch (    IOException e) {    }  }  if (copied) {    f.delete();  }}  }
class C{  public PaymentAspect(final TaskExecutor taskExecutor,final ProductSkuService productService,final MailService mailService,final MailComposer mailComposer,final CustomerService customerService,final CustomerOrderPaymentService customerOrderPaymentService,final ShopService shopService,final ThemeService themeService,final PaymentModulesManager paymentModulesManager){  super(taskExecutor);  this.productSkuService=productService;  this.mailService=mailService;  this.mailComposer=mailComposer;  this.shopService=shopService;  this.customerService=customerService;  this.customerOrderPaymentService=customerOrderPaymentService;  this.themeService=themeService;  this.paymentModulesManager=paymentModulesManager;}  }
class C{  @Override public String toString(){  int len=length();  char[] buf=new char[len];  getChars(0,len,buf,0);  return new String(buf);}  }
class C{  public SynapseGroupInteractionBox(NetworkPanel net,SynapseGroup synapseGroup){  super(net);  this.synapseGroup=synapseGroup;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;  double x=intervalDataset.getXValue(series,item);  double yLow=intervalDataset.getStartYValue(series,item);  double yHigh=intervalDataset.getEndYValue(series,item);  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double xx=domainAxis.valueToJava2D(x,dataArea,xAxisLocation);  double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,yAxisLocation);  double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,yAxisLocation);  Paint p=getItemPaint(series,item);  Stroke s=getItemStroke(series,item);  Line2D line=null;  Shape shape=getItemShape(series,item);  Shape top=null;  Shape bottom=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(yyLow,xx,yyHigh,xx);    top=ShapeUtilities.createTranslatedShape(shape,yyHigh,xx);    bottom=ShapeUtilities.createTranslatedShape(shape,yyLow,xx);  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(xx,yyLow,xx,yyHigh);    top=ShapeUtilities.createTranslatedShape(shape,xx,yyHigh);    bottom=ShapeUtilities.createTranslatedShape(shape,xx,yyLow);  } else {    throw new IllegalStateException();  }  g2.setPaint(p);  g2.setStroke(s);  g2.draw(line);  g2.fill(top);  g2.fill(bottom);  if (isItemLabelVisible(series,item)) {    drawItemLabel(g2,orientation,dataset,series,item,xx,yyHigh,false);    drawAdditionalItemLabel(g2,orientation,dataset,series,item,xx,yyLow);  }  Shape hotspot=ShapeUtilities.createLineRegion(line,4.0f);  if (entities != null && hotspot.intersects(dataArea)) {    addEntity(entities,hotspot,dataset,series,item,xx,(yyHigh + yyLow) / 2);  }}  }
class C{  public static void initializeDefaultValues(IPreferenceStore store){  store.setDefault(PreferenceConstants.EDITOR_SHOW_SEGMENTS,false);  store.setDefault(PreferenceConstants.OPEN_TYPE_HIERARCHY,PreferenceConstants.OPEN_TYPE_HIERARCHY_IN_VIEW_PART);  store.setDefault(PreferenceConstants.DOUBLE_CLICK,PreferenceConstants.DOUBLE_CLICK_EXPANDS);  store.setDefault(PreferenceConstants.UPDATE_JAVA_VIEWS,PreferenceConstants.UPDATE_WHILE_EDITING);  store.setToDefault(PreferenceConstants.UPDATE_JAVA_VIEWS);  store.setDefault(PreferenceConstants.LINK_BROWSING_PROJECTS_TO_EDITOR,true);  store.setDefault(PreferenceConstants.LINK_BROWSING_PACKAGES_TO_EDITOR,true);  store.setDefault(PreferenceConstants.LINK_BROWSING_TYPES_TO_EDITOR,true);  store.setDefault(PreferenceConstants.LINK_BROWSING_MEMBERS_TO_EDITOR,true);  store.setDefault(PreferenceConstants.SEARCH_USE_REDUCED_MENU,true);  store.setDefault(PreferenceConstants.APPEARANCE_COMPRESS_PACKAGE_NAMES,false);  store.setDefault(PreferenceConstants.APPEARANCE_METHOD_RETURNTYPE,true);  store.setDefault(PreferenceConstants.APPEARANCE_METHOD_TYPEPARAMETERS,true);  store.setDefault(PreferenceConstants.APPEARANCE_CATEGORY,true);  store.setDefault(PreferenceConstants.SHOW_CU_CHILDREN,true);  store.setDefault(PreferenceConstants.BROWSING_STACK_VERTICALLY,false);  store.setDefault(PreferenceConstants.APPEARANCE_PKG_NAME_PATTERN_FOR_PKG_VIEW,"");  store.setDefault(PreferenceConstants.APPEARANCE_FOLD_PACKAGES_IN_PACKAGE_EXPLORER,true);  store.setDefault(PreferenceConstants.APPEARANCE_ABBREVIATE_PACKAGE_NAMES,false);  store.setDefault(PreferenceConstants.APPEARANCE_PKG_NAME_ABBREVIATION_PATTERN_FOR_PKG_VIEW,"");  store.setDefault(PreferenceConstants.ORGIMPORTS_IMPORTORDER,"java;javax;org;com");  store.setDefault(PreferenceConstants.ORGIMPORTS_ONDEMANDTHRESHOLD,99);  store.setDefault(PreferenceConstants.ORGIMPORTS_STATIC_ONDEMANDTHRESHOLD,99);  store.setDefault(PreferenceConstants.ORGIMPORTS_IGNORELOWERCASE,true);  store.setDefault(PreferenceConstants.TYPEFILTER_ENABLED,"");  store.setDefault(PreferenceConstants.TYPEFILTER_DISABLED,"");  store.setDefault(PreferenceConstants.REFACTOR_ERROR_PAGE_SEVERITY_THRESHOLD,PreferenceConstants.REFACTOR_WARNING_SEVERITY);  store.setDefault(PreferenceConstants.REFACTOR_SAVE_ALL_EDITORS,false);  store.setDefault(PreferenceConstants.REFACTOR_LIGHTWEIGHT,true);  store.setDefault(PreferenceConstants.TEMPLATES_USE_CODEFORMATTER,true);  if (store.getBoolean(PreferenceConstants.CODEGEN_USE_GETTERSETTER_PREFIX)) {    String prefix=store.getString(PreferenceConstants.CODEGEN_GETTERSETTER_PREFIX);    if (prefix.length() > 0) {      InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID).put(JavaCore.CODEASSIST_FIELD_PREFIXES,prefix);      store.setToDefault(PreferenceConstants.CODEGEN_USE_GETTERSETTER_PREFIX);      store.setToDefault(PreferenceConstants.CODEGEN_GETTERSETTER_PREFIX);    }  }  if (store.getBoolean(PreferenceConstants.CODEGEN_USE_GETTERSETTER_SUFFIX)) {    String suffix=store.getString(PreferenceConstants.CODEGEN_GETTERSETTER_SUFFIX);    if (suffix.length() > 0) {      InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID).put(JavaCore.CODEASSIST_FIELD_SUFFIXES,suffix);      store.setToDefault(PreferenceConstants.CODEGEN_USE_GETTERSETTER_SUFFIX);      store.setToDefault(PreferenceConstants.CODEGEN_GETTERSETTER_SUFFIX);    }  }  store.setDefault(PreferenceConstants.CODEGEN_KEYWORD_THIS,false);  store.setDefault(PreferenceConstants.CODEGEN_IS_FOR_GETTERS,true);  store.setDefault(PreferenceConstants.CODEGEN_EXCEPTION_VAR_NAME,"e");  store.setDefault(PreferenceConstants.CODEGEN_ADD_COMMENTS,false);  store.setDefault(PreferenceConstants.CODEGEN_USE_OVERRIDE_ANNOTATION,true);  store.setDefault(PreferenceConstants.APPEARANCE_MEMBER_SORT_ORDER,"T,SF,SI,SM,F,I,C,M");  store.setDefault(PreferenceConstants.APPEARANCE_VISIBILITY_SORT_ORDER,"B,V,R,D");  store.setDefault(PreferenceConstants.APPEARANCE_ENABLE_VISIBILITY_SORT_ORDER,false);  store.setDefault(PreferenceConstants.EDITOR_MATCHING_BRACKETS,true);  store.setDefault(PreferenceConstants.EDITOR_HIGHLIGHT_BRACKET_AT_CARET_LOCATION,false);  store.setDefault(PreferenceConstants.EDITOR_ENCLOSING_BRACKETS,false);  store.setDefault(PreferenceConstants.EDITOR_CORRECTION_INDICATION,true);  store.setDefault(PreferenceConstants.EDITOR_SYNC_OUTLINE_ON_CURSOR_MOVE,true);  store.setDefault(PreferenceConstants.EDITOR_EVALUTE_TEMPORARY_PROBLEMS,true);  store.setDefault(PreferenceConstants.EDITOR_TAB_WIDTH,4);  store.setDefault(PreferenceConstants.EDITOR_SPACES_FOR_TABS,false);  store.setDefault(PreferenceConstants.CODEASSIST_AUTOACTIVATION,true);  store.setDefault(PreferenceConstants.CODEASSIST_AUTOACTIVATION_DELAY,200);  store.setDefault(PreferenceConstants.CODEASSIST_AUTOINSERT,true);  store.setDefault(PreferenceConstants.CODEASSIST_AUTOACTIVATION_TRIGGERS_JAVA,".");  store.setDefault(PreferenceConstants.CODEASSIST_AUTOACTIVATION_TRIGGERS_JAVADOC,"@#");  store.setDefault(PreferenceConstants.CODEASSIST_SHOW_VISIBLE_PROPOSALS,true);  store.setDefault(PreferenceConstants.CODEASSIST_CASE_SENSITIVITY,false);  store.setDefault(PreferenceConstants.CODEASSIST_ADDIMPORT,true);  store.setDefault(PreferenceConstants.CODEASSIST_INSERT_COMPLETION,true);  store.setDefault(PreferenceConstants.CODEASSIST_FILL_ARGUMENT_NAMES,true);  store.setDefault(PreferenceConstants.CODEASSIST_GUESS_METHOD_ARGUMENTS,false);  store.setDefault(PreferenceConstants.CODEASSIST_PREFIX_COMPLETION,false);  store.setDefault(PreferenceConstants.CODEASSIST_EXCLUDED_CATEGORIES,"org.eclipse.jdt.ui.textProposalCategory\0org.eclipse.jdt.ui.javaTypeProposalCategory\0org.eclipse.jdt.ui" + ".javaNoTypeProposalCategory\0");  store.setDefault(PreferenceConstants.CODEASSIST_CATEGORY_ORDER,"org.eclipse.jdt.ui.spellingProposalCategory:65545\0org.eclipse.jdt.ui.javaTypeProposalCategory:65540\0org" + ".eclipse.jdt.ui.javaNoTypeProposalCategory:65539\0org.eclipse.jdt.ui.textProposalCategory:65541\0org.eclipse" + ".jdt"+ ".ui.javaAllProposalCategory:65542\0org.eclipse.jdt.ui.templateProposalCategory:2\0org.eclipse.jdt.ui"+ ".swtProposalCategory:3\0");  store.setDefault(PreferenceConstants.CODEASSIST_LRU_HISTORY,"");  store.setDefault(PreferenceConstants.CODEASSIST_SORTER,"org.eclipse.jdt.ui.RelevanceSorter");  store.setDefault(PreferenceConstants.CODEASSIST_FAVORITE_STATIC_MEMBERS,"");  store.setDefault(PreferenceConstants.EDITOR_SUB_WORD_NAVIGATION,true);  store.setDefault(PreferenceConstants.EDITOR_SMART_PASTE,true);  store.setDefault(PreferenceConstants.EDITOR_IMPORTS_ON_PASTE,true);  store.setDefault(PreferenceConstants.EDITOR_CLOSE_STRINGS,true);  store.setDefault(PreferenceConstants.EDITOR_CLOSE_BRACKETS,true);  store.setDefault(PreferenceConstants.EDITOR_CLOSE_BRACES,true);  store.setDefault(PreferenceConstants.EDITOR_CLOSE_JAVADOCS,true);  store.setDefault(PreferenceConstants.EDITOR_WRAP_STRINGS,true);  store.setDefault(PreferenceConstants.EDITOR_ESCAPE_STRINGS,false);  store.setDefault(PreferenceConstants.EDITOR_ADD_JAVADOC_TAGS,true);  store.setDefault(PreferenceConstants.EDITOR_FORMAT_JAVADOCS,false);  store.setDefault(PreferenceConstants.EDITOR_SMART_INDENT_AFTER_NEWLINE,true);  store.setDefault(PreferenceConstants.EDITOR_SMART_TAB,true);  store.setDefault(PreferenceConstants.EDITOR_SMART_BACKSPACE,true);  store.setDefault(PreferenceConstants.EDITOR_ANNOTATION_ROLL_OVER,false);  store.setDefault(EDITOR_SOURCE_HOVER_BACKGROUND_COLOR_SYSTEM_DEFAULT,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_STICKY_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_TYPE_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_METHOD_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_CONSTANT_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_FIELD_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_LOCAL_VARIABLE_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_EXCEPTION_OCCURRENCES,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_METHOD_EXIT_POINTS,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_BREAK_CONTINUE_TARGETS,true);  store.setDefault(PreferenceConstants.EDITOR_MARK_IMPLEMENTORS,true);  store.setDefault(PreferenceConstants.SPELLING_LOCALE,"en_US");  String isInitializedKey="spelling_locale_initialized";  store.setDefault(PreferenceConstants.SPELLING_IGNORE_DIGITS,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_MIXED,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_SENTENCE,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_UPPER,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_URLS,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_SINGLE_LETTERS,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_AMPERSAND_IN_PROPERTIES,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_NON_LETTERS,true);  store.setDefault(PreferenceConstants.SPELLING_IGNORE_JAVA_STRINGS,true);  store.setDefault(PreferenceConstants.SPELLING_USER_DICTIONARY,"");  store.setDefault(PreferenceConstants.SPELLING_USER_DICTIONARY_ENCODING,System.getProperty("file.encoding"));  store.setDefault(PreferenceConstants.SPELLING_PROPOSAL_THRESHOLD,20);  store.setDefault(PreferenceConstants.SPELLING_PROBLEMS_THRESHOLD,100);  store.setToDefault(PreferenceConstants.SPELLING_ENABLE_CONTENTASSIST);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_ENABLED,true);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_PROVIDER,"org.eclipse.jdt.ui.text.defaultFoldingProvider");  store.setDefault(PreferenceConstants.EDITOR_FOLDING_JAVADOC,false);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_INNERTYPES,false);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_METHODS,false);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_IMPORTS,true);  store.setDefault(PreferenceConstants.EDITOR_FOLDING_HEADERS,true);  store.setToDefault(EDITOR_LINE_NUMBER_RULER);  store.setToDefault(EDITOR_LINE_NUMBER_RULER_COLOR);  store.setToDefault(EDITOR_OVERVIEW_RULER);  store.setToDefault(PreferenceConstants.EDITOR_CURRENT_LINE);  store.setToDefault(PreferenceConstants.EDITOR_CURRENT_LINE_COLOR);  store.setToDefault(PreferenceConstants.EDITOR_PRINT_MARGIN);  store.setToDefault(PreferenceConstants.EDITOR_PRINT_MARGIN_COLUMN);  store.setToDefault(PreferenceConstants.EDITOR_PRINT_MARGIN_COLOR);  store.setToDefault(PreferenceConstants.EDITOR_DISABLE_OVERWRITE_MODE);  store.setToDefault(PreferenceConstants.EDITOR_SEMANTIC_HIGHLIGHTING_ENABLED);  store.setToDefault(PreferenceConstants.EDITOR_SHOW_TEXT_HOVER_AFFORDANCE);  CleanUpConstants.initDefaults(store);  store.setDefault(PREF_ANONYMOUS_EXPAND_WITH_CONSTRUCTORS,true);  store.setDefault(PREF_DEFAULT_EXPAND_WITH_CONSTRUCTORS_MEMBERS,"java.lang.Runnable.run;java.util.concurrent.Callable.call;org.eclipse.swt.widgets.Listener.handleEvent");}  }
class C{  public IChunkedOrderedIterator<E> iterator(){  overflow();synchronized (queue) {    if (queue.isEmpty()) {      return new EmptyChunkedIterator<E>(keyOrder);    }    assert chunkClass != null;    final Iterator<E[]> src=Arrays.asList((E[][])queue.toArray((E[][])java.lang.reflect.Array.newInstance(chunkClass,0))).iterator();    return new ListOfChunksIterator<E>(src,keyOrder);  }}  }
class C{  private void clearHistories(){  List<History> histories=((List<History>)viewer.getInput());  if (!histories.isEmpty()) {    histories.clear();    refreshView();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.626 -0500",hash_original_method="860D1012434BA4F5294622CC094A8203",hash_generated_method="B432C0392C87ECF9CB7377C3B98ECD77") public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  protected void paintBorderBackground(Graphics g){  Border b=getBorder();  if (b != null) {    b.paintBorderBackground(g,this);  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  @Override public void cancel(){  if (cancelable && !canceled) {    canceled=true;    firePropertyChange(CANCELED_PROPERTY,false,true);    if (doCancel != null)     doCancel.run();  }}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger zero=BigInteger.valueOf(0);  if (zero.compareTo(r) >= 0 || params.getQ().compareTo(r) <= 0) {    return false;  }  if (zero.compareTo(s) >= 0 || params.getQ().compareTo(s) <= 0) {    return false;  }  BigInteger w=s.modInverse(params.getQ());  BigInteger u1=m.multiply(w).mod(params.getQ());  BigInteger u2=r.multiply(w).mod(params.getQ());  u1=params.getG().modPow(u1,params.getP());  u2=((DSAPublicKeyParameters)key).getY().modPow(u2,params.getP());  BigInteger v=u1.multiply(u2).mod(params.getP()).mod(params.getQ());  return v.equals(r);}  }
class C{  @Override public boolean compareCount(int val1,int val2){  return val1 > val2;}  }
class C{  public boolean hasAddress(){  return super.hasAttribute(ADDRESS);}  }
class C{  final public CompilationUnit CompilationUnit() throws ParseException {  PackageDeclaration pakage=null;  List imports=null;  ImportDeclaration in=null;  List types=null;  TypeDeclaration tn=null;  int line=-1;  int column=0;  if (jj_2_1(2147483647)) {    pakage=PackageDeclaration();    line=pakage.getBeginLine();    column=pakage.getBeginColumn();  } else {    ;  }  label_1:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IMPORT:      ;    break;default :  jj_la1[0]=jj_gen;break label_1;}in=ImportDeclaration();if (line == -1) {line=in.getBeginLine();column=in.getBeginColumn();}imports=add(imports,in);}label_2: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case ABSTRACT:case CLASS:case ENUM:case FINAL:case INTERFACE:case NATIVE:case PRIVATE:case PROTECTED:case PUBLIC:case STATIC:case STRICTFP:case SYNCHRONIZED:case TRANSIENT:case VOLATILE:case SEMICOLON:case AT:;break;default :jj_la1[1]=jj_gen;break label_2;}tn=TypeDeclaration();if (line == -1) {line=tn.getBeginLine();column=tn.getBeginColumn();}types=add(types,tn);}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case 0:jj_consume_token(0);break;case 131:jj_consume_token(131);break;default :jj_la1[2]=jj_gen;jj_consume_token(-1);throw new ParseException();}{if (true) return new CompilationUnit(line == -1 ? 0 : line,column,token.endLine,token.endColumn,pakage,imports,types);}throw new Error("Missing return statement in function");}  }
class C{  public String item(int idx){  return cssEngine.getPropertyName(declaration.getIndex(idx));}  }
class C{  private boolean waitTimeExpired(long start){  return (System.currentTimeMillis() - start) > conf.basic.maxWaitTime;}  }
class C{  private void initRasterProgram(){  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  int uniformsResourceIndex=glGetProgramResourceIndex(rasterProgram,GL_UNIFORM_BLOCK,"Uniforms");  computeUboBinding=params.get(0);  props.put(0,GL_BUFFER_BINDING);  glGetProgramResourceiv(rasterProgram,GL_UNIFORM_BLOCK,uniformsResourceIndex,props,null,params);  rasterUboBinding=params.get(0);}  }
class C{  public static File showSaveFile(final Shell parent){  return showSaveFile(parent,null);}  }
class C{  @NotNull public static List<Pair<PsiElement,PsiElement>> findDefinitions(String name,Collection<? extends PsiReference> references,@Nullable Collection<? extends PsiElement> ignored){  List<Pair<PsiElement,PsiElement>> conflicts=new ArrayList<Pair<PsiElement,PsiElement>>();  REF_LOOP:   for (  PsiReference ref : references) {    ResolveProcessor processor=new ResolveProcessor(name);    PyResolveUtil.treeCrawlUp(processor,ref.getElement());    PsiElement result=processor.getResult();    if (result != null) {      List<PsiElement> definers=processor.getDefiners();      if (definers != null && definers.size() > 0) {        result=definers.get(0);      }      if (ignored != null)       for (      PsiElement ignorable : ignored) {        if (result == ignorable)         continue REF_LOOP;      }      conflicts.add(Pair.create(ref.getElement(),result));    }  }  return conflicts;}  }
class C{  private Automaton deletionsOf(String s){  List<Automaton> list=new ArrayList<>();  for (int i=0; i < s.length(); i++) {    Automaton a=Automata.makeString(s.substring(0,i));    a=Operations.concatenate(a,Automata.makeString(s.substring(i + 1)));    list.add(a);  }  Automaton a=Operations.union(list);  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  public void update(){  if (this.allow == override.getAllowedRaw() && this.deny == override.getDeniedRaw()) {    return;  }  String targetId=override.isRoleOverride() ? override.getRole().getId() : override.getUser().getId();  ((JDAImpl)override.getJDA()).getRequester().put(Requester.DISCORD_API_PREFIX + "channels/" + override.getChannel().getId()+ "/permissions/"+ targetId,new JSONObject().put("allow",allow).put("deny",deny).put("id",targetId).put("type",override.isRoleOverride() ? "role" : "member"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.298 -0500",hash_original_method="FBFEF7110940F0EF7EB32E6578ACD520",hash_generated_method="A050AFE5094C9C9796FE3C7FF3EBCFED") public void mergeObjects(GenericObjectList mergeList){  if (mergeList == null)   return;  Iterator it1=this.listIterator();  Iterator it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#internalEntityDecl: " + name + ", "+ value);  if (null != m_declHandler) {    m_declHandler.internalEntityDecl(name,value);  }}  }
class C{  private boolean checkToAvoid(IMovingAgent agent){  State state=getState();  int mask=0;  int value=0;  if (agent instanceof Obstacle)   value|=valueObstacle;  if (agent instanceof Bee)   value|=valueBee;  if (agent instanceof Hive)   value|=valueHive;  if (agent instanceof HiveEntrance)   value|=valueEntrance;  if (agent instanceof FoodSource)   value|=valueFoodSource;switch (state) {case foraging:case searching:    mask=valueObstacle | valueHive | valueEntrance;  break;case returnWithInfo:case returnWithInfoAndLoad:mask=valueObstacle | valueHive;break;case scouting:mask=valueObstacle | valueBee | valueHive| valueEntrance;break;case returnWithoutInfo:mask=valueObstacle | valueHive;break;case initialState:case leaveHive:case inHiveWithoutInfo:case inHiveWithInfo:case danceFollowing:case dancing:case unloadQueue:case dead:case terminated:System.err.println("checkToAvoid(): State " + state + " is not expected for testing to avoid.");return true;default :System.err.println("checkToAvoid(): State " + state + " is not implemented.");System.exit(-7);break;}return (value & mask) != 0;}  }
class C{  public boolean isShowLabels(){  return mShowLabels;}  }
class C{  public static View createPath(final Module module,final BasicBlock startBlock,final BasicBlock targetBlock,final Function startFunction,final Function targetFunction) throws CouldntLoadDataException, PartialLoadException {  Preconditions.checkNotNull(module,"Error: Module argument can't be null");  Preconditions.checkArgument(module.isLoaded(),"Error: Module is not loaded");  if ((startBlock == null) && (startFunction == null)) {    throw new IllegalArgumentException("Error: No valid start given");  }  if ((targetBlock == null) && (targetFunction == null)) {    throw new IllegalArgumentException("Error: No valid target given");  }  if ((startFunction != null) && !startFunction.isLoaded()) {    throw new IllegalArgumentException("Error: Start function is not loaded");  }  if ((targetFunction != null) && !targetFunction.isLoaded()) {    throw new IllegalArgumentException("Error: Target function is not loaded");  }  final Function realStartFunction=startFunction != null ? startFunction : startBlock.getParentFunction();  final Function realTargetFunction=targetFunction != null ? targetFunction : targetBlock.getParentFunction();  if (realStartFunction.getGraph().nodeCount() == 0) {    throw new IllegalArgumentException("Error: Functions with zero nodes can not be used for pathfinding");  }  final BasicBlock realStartBlock=startBlock != null ? startBlock : findEntryNode(realStartFunction);  final BasicBlock realTargetBlock=targetBlock != null ? targetBlock : findEntryNode(realTargetFunction);  final LinkedHashSet<FunctionBlock> passedFunctions=findPassedFunctions(module.getCallgraph(),realStartFunction,realTargetFunction);  final String endAddress=realTargetBlock != null ? realTargetBlock.getAddress().toHexString() : realTargetFunction.getAddress().toHexString();  final View view=module.createView("New Pathfinder View",String.format("%s -> %s",realStartBlock.getAddress().toHexString(),endAddress));  view.load();  final Map<BasicBlock,ViewNode> nodeMap=new HashMap<BasicBlock,ViewNode>();  final Map<Function,ViewNode> entryNodes=new HashMap<Function,ViewNode>();  final ArrayListMultimap<Function,ViewNode> exitNodes=ArrayListMultimap.create();  final Map<ViewNode,Function> functionMap=new HashMap<ViewNode,Function>();  createInitialBlocks(view,passedFunctions,nodeMap,functionMap);  createInitialEdges(view,passedFunctions,nodeMap);  findEntryExitNodes(passedFunctions,nodeMap,functionMap,entryNodes,exitNodes);  ViewNode startNode=nodeMap.get(realStartBlock);  ViewNode targetNode=realTargetBlock == null ? entryNodes.get(realTargetFunction) : nodeMap.get(realTargetBlock);  startNode.setColor(Color.GREEN);  targetNode.setColor(Color.YELLOW);  final NodePair splitResult=connectFunctions(view,startNode,targetNode,passedFunctions,entryNodes,exitNodes,functionMap);  startNode=splitResult.getFirst();  targetNode=splitResult.getSecond();  for (  final ViewEdge edge : targetNode.getOutgoingEdges()) {    view.deleteEdge(edge);  }  deleteNodesNotOnPath(view,startNode,targetNode);  if (startNode.getOutgoingEdges().isEmpty()) {    return null;  }  try {    view.save();  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);  }  return view;}  }
class C{  protected GridCacheUtils(){}  }
class C{  public static boolean canShow(){  return true;}  }
class C{  public void addChange(int listenerId,double value){  listenerIds[changeCount]=listenerId;  values[changeCount]=value;  changeCount++;}  }
class C{  public boolean executeDiskStoreTask(final Runnable runnable){  return executeDiskStoreTask(runnable,this.diskStoreTaskPool) != null;}  }
class C{  public String format(String key,Object[] params) throws MissingResourceException {{    if (formats == null)     formats=new Hashtable();  }  MessageFormat format=null;{    format=(MessageFormat)formats.get(key);    if (format == null) {      format=new MessageFormat(((ResourceBundle)object).getString(key));      format.setLocale(getBundle().getLocale());      formats.put(key,format);    }  }synchronized (format) {    return format.format(params);  }}  }
class C{  public static HighlightStyle styleForClass(String className){switch (className) {case "highlight-yellow":    return Yellow;case "highlight-green":  return Green;case "highlight-blue":return Blue;case "highlight-pink":return Pink;case "highlight-underline":return Underline;default :return Yellow;}}  }
class C{  public boolean isAppendTaskName(){  return appendTaskName;}  }
class C{  public MockUpnpService(){  this(false,new MockUpnpServiceConfiguration(false,false));}  }
class C{  public void deleteAsync(final String id,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(id,responseCallback);}  }
class C{  public boolean isTrackingTouch(){  return mTrackingTouch;}  }
class C{  synchronized void ignoreTextChanges(){  mIgnoreTextChanges=true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName());  sb.append(" file=").append(file.getName());  sb.append(" size=").append(size);  sb.append(" offset=").append(offset);  return sb.toString();}  }
class C{  public final void multScalar(MathVector u,double s){  for (int i=0; i < NDIM; i++) {    data[i]=u.data[i] * s;  }}  }
class C{  SegmentCheckParameters checkSegment(int checkSegment){  this.checkSegment=checkSegment;  return this;}  }
class C{  public static String[] partitionOptions(String[] options){  for (int i=0; i < options.length; i++) {    if (options[i].equals("--")) {      options[i++]="";      String[] result=new String[options.length - i];      for (int j=i; j < options.length; j++) {        result[j - i]=options[j];        options[j]="";      }      return result;    }  }  return new String[0];}  }
class C{  private void updateArchTbls(DbConnection dbConn) throws Exception {  String tableName;  ArchiveFldsImpl flds=new ArchiveFldsImpl();  ArchiveIdxsImpl idxs=new ArchiveIdxsImpl();  boolean crtMTxtTbl=false;  boolean crtMDateTbl=false;  boolean crtMDecTbl=false;  boolean crtMIntTbl=false;  if (_logger.isDebugEnabled())   _logger.debug("updateArchTbls");  getUpdFldsIdxsDef(flds,idxs);  try {    dropTxtMultTbl(dbConn);    dropIntMultTbl(dbConn);    dropDecMultTbl(dbConn);    dropDateMultTbl(dbConn);  } catch (  Exception e) {  }  tableName=DaoUtil.getRelFldsTblName(_tblPrefix);  try {    DbTableFns.dropTable(dbConn,tableName);    createRelFldsTable(dbConn,tableName,flds,idxs);    for (int i=0; i < flds.count(); i++) {      ArchiveFldImpl fldDef=(ArchiveFldImpl)flds.get(i);      if (fldDef.isMult()) {switch (fldDef.getType()) {case ArchiveFldType.SHORT_TEXT:          crtMTxtTbl=true;        break;case ArchiveFldType.DATE:case ArchiveFldType.DATE_TIME:case ArchiveFldType.TIME:      crtMDateTbl=true;    break;case ArchiveFldType.SHORT_DECIMAL:case ArchiveFldType.LONG_DECIMAL:  crtMDecTbl=true;break;case ArchiveFldType.SHORT_INTEGER:case ArchiveFldType.LONG_INTEGER:crtMIntTbl=true;break;}}}if (crtMTxtTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_TEXT);createMultTbl(dbConn,tableName,DbDataType.SHORT_TEXT);}if (crtMDateTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.DATE_TIME);createMultTbl(dbConn,tableName,DbDataType.DATE_TIME);}if (crtMDecTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_DECIMAL);createMultTbl(dbConn,tableName,DbDataType.SHORT_DECIMAL);}if (crtMIntTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_INTEGER);createMultTbl(dbConn,tableName,DbDataType.SHORT_INTEGER);}} catch (Exception e) {_logger.error(e);throw e;}}  }
class C{  public void testBigramsScoreEffect(){  assertTrue(sh.isDefaultCorrection("pa","page"));  assertTrue(sh.isDefaultNextCorrection("about","pa","part"));  assertTrue(sh.isDefaultCorrection("sa","said"));  assertTrue(sh.isDefaultNextCorrection("from","sa","same"));}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map){  Comparator<? super K> comparator=map.comparator();  if (comparator == null) {    comparator=(Comparator<? super K>)NATURAL_ORDER;  }  if (map instanceof ImmutableSortedMap) {    @SuppressWarnings("unchecked") ImmutableSortedMap<K,V> kvMap=(ImmutableSortedMap<K,V>)map;    if (!kvMap.isPartialView()) {      return kvMap;    }  }  return fromEntries(comparator,true,map.entrySet());}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void testReadFailoverAfterStopMultipleNodes() throws Exception {  final IgfsImpl igfs0=nodeDatas[0].igfsImpl;  clear(igfs0);  IgfsAbstractSelfTest.create(igfs0,paths(DIR,SUBDIR),null);  for (int f=0; f < files; f++) {    final byte[] data=createChunk(fileSize,f);    createFile(igfs0,filePath(f),true,-1,data);  }  for (int f=0; f < files; f++) {    IgfsPath path=filePath(f);    byte[] data=createChunk(fileSize,f);    checkExist(igfs0,path);    checkFileContent(igfs0,path,data);    for (int n=1; n < numIgfsNodes; n++) {      checkExist(nodeDatas[n].igfsImpl,path);      checkFileContent(nodeDatas[n].igfsImpl,path,data);    }  }  for (int n=1; n < numIgfsNodes; n++)   stopGrid(n);  for (int f=0; f < files; f++) {    IgfsPath path=filePath(f);    byte[] data=createChunk(fileSize,f);    checkExist(igfs0,path);    checkFileContent(igfs0,path,data);  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case SexecPackage.MAPPED_ELEMENT:    return createMappedElement();case SexecPackage.EXECUTION_FLOW:  return createExecutionFlow();case SexecPackage.EXECUTION_NODE:return createExecutionNode();case SexecPackage.EXECUTION_STATE:return createExecutionState();case SexecPackage.EXECUTION_SCOPE:return createExecutionScope();case SexecPackage.EXECUTION_REGION:return createExecutionRegion();case SexecPackage.EXECUTION_ENTRY:return createExecutionEntry();case SexecPackage.EXECUTION_EXIT:return createExecutionExit();case SexecPackage.EXECUTION_CHOICE:return createExecutionChoice();case SexecPackage.EXECUTION_SYNCHRONIZATION:return createExecutionSynchronization();case SexecPackage.REACTION:return createReaction();case SexecPackage.STATE_VECTOR:return createStateVector();case SexecPackage.TIME_EVENT:return createTimeEvent();case SexecPackage.SEQUENCE:return createSequence();case SexecPackage.CHECK:return createCheck();case SexecPackage.CHECK_REF:return createCheckRef();case SexecPackage.IF:return createIf();case SexecPackage.EXECUTION:return createExecution();case SexecPackage.ENTER_STATE:return createEnterState();case SexecPackage.EXIT_STATE:return createExitState();case SexecPackage.CALL:return createCall();case SexecPackage.SCHEDULE_TIME_EVENT:return createScheduleTimeEvent();case SexecPackage.UNSCHEDULE_TIME_EVENT:return createUnscheduleTimeEvent();case SexecPackage.STATE_SWITCH:return createStateSwitch();case SexecPackage.STATE_CASE:return createStateCase();case SexecPackage.SAVE_HISTORY:return createSaveHistory();case SexecPackage.HISTORY_ENTRY:return createHistoryEntry();case SexecPackage.TRACE_NODE_EXECUTED:return createTraceNodeExecuted();case SexecPackage.REACTION_FIRED:return createReactionFired();case SexecPackage.TRACE_REACTION_WILL_FIRE:return createTraceReactionWillFire();case SexecPackage.TRACE_STATE_ENTERED:return createTraceStateEntered();case SexecPackage.TRACE_STATE_EXITED:return createTraceStateExited();case SexecPackage.TRACE_BEGIN_RUN_CYCLE:return createTraceBeginRunCycle();case SexecPackage.TRACE_END_RUN_CYCLE:return createTraceEndRunCycle();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public boolean isMult(){  return m_isMult;}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  System.arraycopy(vector,0,result,0,size);  return result;}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  private boolean updateHeaderTax(){  if (isProcessed() && !is_ValueChanged(COLUMNNAME_Processed))   return true;  if (!updateInvoiceTax(false))   return false;  String sql="UPDATE C_Invoice i" + " SET TotalLines=" + "(SELECT COALESCE(SUM(LineNetAmt),0) FROM C_InvoiceLine il WHERE i.C_Invoice_ID=il.C_Invoice_ID) "+ "WHERE C_Invoice_ID=?";  int no=DB.executeUpdateEx(sql,new Object[]{getC_Invoice_ID()},get_TrxName());  if (no != 1)   log.warning("(1) #" + no);  if (isTaxIncluded())   sql="UPDATE C_Invoice i " + " SET GrandTotal=TotalLines " + "WHERE C_Invoice_ID=?"; else   sql="UPDATE C_Invoice i " + " SET GrandTotal=TotalLines+" + "(SELECT COALESCE(SUM(TaxAmt),0) FROM C_InvoiceTax it WHERE i.C_Invoice_ID=it.C_Invoice_ID) "+ "WHERE C_Invoice_ID=?";  no=DB.executeUpdateEx(sql,new Object[]{getC_Invoice_ID()},get_TrxName());  if (no != 1)   log.warning("(2) #" + no);  m_parent=null;  return no == 1;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public String encode(String decoded){  JsonObject object=new JsonObject(decoded);  String payloadString;  JsonObject payloadObject=object.getJsonObject("payloadObject");  if (payloadObject != null) {    payloadString=payloadObject.encode();  } else {    payloadString=object.getString("payloadString");  }  if (payloadString != null) {    object.put(PAYLOAD,payloadString.getBytes(Charset.forName(UTF_8)));    object.remove("payloadString");    object.remove("payloadObject");  }  int length=0;  if (object.containsKey(PAYLOAD)) {    length=object.getBinary(PAYLOAD).length;  }  JsonArray newHeaders=new JsonArray();  for (  Object headerObj : object.getJsonArray("headers")) {    JsonArray header=(JsonArray)headerObj;    String key=header.getString(0);    if (key.equalsIgnoreCase("content-length")) {      JsonArray contentLengthHeader=new JsonArray();      contentLengthHeader.add("Content-Length");      contentLengthHeader.add(Integer.toString(length));      newHeaders.add(contentLengthHeader);    } else {      newHeaders.add(header);    }  }  object.put("headers",newHeaders);  return object.toString();}  }
class C{  public NoSuchElementException(java.lang.String s){}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  @Override public String hget(final String key,final String field){  checkIsInMultiOrPipeline();  client.hget(key,field);  return client.getBulkReply();}  }
class C{  Type toType(Environment env,Context ctx){  ClassDefinition c=toResolvedType(env,ctx,false);  if (c != null) {    return c.getType();  }  return Type.tError;}  }
class C{  public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  public void redrawRegion(Rectangle2D region,double scaleX,double scaleY,Shape savedClip,AffineTransform savedTransform) throws PrinterException {  PSPrinterJob psPrinterJob=(PSPrinterJob)getPrinterJob();  Printable painter=getPrintable();  PageFormat pageFormat=getPageFormat();  int pageIndex=getPageIndex();  BufferedImage deepImage=new BufferedImage((int)region.getWidth(),(int)region.getHeight(),BufferedImage.TYPE_3BYTE_BGR);  Graphics2D g=deepImage.createGraphics();  ProxyGraphics2D proxy=new ProxyGraphics2D(g,psPrinterJob);  proxy.setColor(Color.white);  proxy.fillRect(0,0,deepImage.getWidth(),deepImage.getHeight());  proxy.clipRect(0,0,deepImage.getWidth(),deepImage.getHeight());  proxy.translate(-region.getX(),-region.getY());  float sourceResX=(float)(psPrinterJob.getXRes() / scaleX);  float sourceResY=(float)(psPrinterJob.getYRes() / scaleY);  proxy.scale(sourceResX / DEFAULT_USER_RES,sourceResY / DEFAULT_USER_RES);  proxy.translate(-psPrinterJob.getPhysicalPrintableX(pageFormat.getPaper()) / psPrinterJob.getXRes() * DEFAULT_USER_RES,-psPrinterJob.getPhysicalPrintableY(pageFormat.getPaper()) / psPrinterJob.getYRes() * DEFAULT_USER_RES);  proxy.transform(new AffineTransform(getPageFormat().getMatrix()));  proxy.setPaint(Color.black);  painter.print(proxy,pageFormat,pageIndex);  g.dispose();  psPrinterJob.setClip(savedTransform.createTransformedShape(savedClip));  Rectangle2D.Float scaledBounds=new Rectangle2D.Float((float)(region.getX() * scaleX),(float)(region.getY() * scaleY),(float)(region.getWidth() * scaleX),(float)(region.getHeight() * scaleY));  ByteComponentRaster tile=(ByteComponentRaster)deepImage.getRaster();  psPrinterJob.drawImageBGR(tile.getDataStorage(),scaledBounds.x,scaledBounds.y,scaledBounds.width,scaledBounds.height,0f,0f,deepImage.getWidth(),deepImage.getHeight(),deepImage.getWidth(),deepImage.getHeight());}  }
class C{  public static Funnel<Integer> integerFunnel(){  return IntegerFunnel.INSTANCE;}  }
class C{  private void addResponseHeaders(Record record,Response response) throws StageException {  if (conf.headerOutputLocation == HeaderOutputLocation.NONE) {    return;  }  Record.Header header=record.getHeader();  if (conf.headerOutputLocation == HeaderOutputLocation.FIELD) {    writeResponseHeaderToField(record,response);  } else   if (conf.headerOutputLocation == HeaderOutputLocation.HEADER) {    writeResponseHeaderToRecordHeader(response,header);  }}  }
class C{  protected boolean rangeCheckSpannedTupleIndex(final long entryIndex){  final long nentries=data.getSpannedTupleCount();  if (entryIndex < 0)   throw new IndexOutOfBoundsException("negative: " + entryIndex);  if (entryIndex >= nentries) {    throw new IndexOutOfBoundsException("too large: entryIndex=" + entryIndex + ", but nentries="+ nentries);  }  return true;}  }
class C{  public final void addExtension(final String extension){  if (filters == null) {    filters=new HashMap<>(1);  }  filters.put(extension.toLowerCase(Locale.getDefault()),this);  fullDescription=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected boolean isDebugEnabled(){  return getGfsh().getDebug();}  }
class C{  public static InternalLocator createLocator(int port,File logFile,File stateFile,InternalLogWriter logger,InternalLogWriter securityLogger,InetAddress bindAddress,String hostnameForClients,java.util.Properties distributedSystemProperties,boolean startDistributedSystem) throws IOException {synchronized (locatorLock) {    if (hasLocator()) {      throw new IllegalStateException("A locator can not be created because one already exists in this JVM.");    }    InternalLocator l=new InternalLocator(port,logFile,stateFile,logger,securityLogger,bindAddress,hostnameForClients,distributedSystemProperties,null,startDistributedSystem);    locator=l;    return l;  }}  }
class C{  @Override public int[] colWidths(){  int cols=columnCount();  int[] widths=new int[cols];  List<String> columnNames=columnNames();  for (int i=0; i < columnCount(); i++) {    widths[i]=columnNames.get(i).length();  }  for (int rowNum=0; rowNum < rowCount(); rowNum++) {    for (int colNum=0; colNum < cols; colNum++) {      String value=get(colNum,rowNum);      widths[colNum]=Math.max(widths[colNum],StringUtils.length(value));    }  }  return widths;}  }
class C{  public void removeUserStatusListener(UserStatusListener listener){synchronized (userStatusListeners) {    userStatusListeners.remove(listener);  }}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  throw DbException.getUnsupportedException("isWrapperFor");}  }
class C{  public static SourceFile[] toSourceFiles(File[] javaFiles){  return toSourceFiles(asList(javaFiles));}  }
class C{  protected void applyBackgroundColor(Color color,Control control){  applyBackgroundColor(color,control,getBackgroundColorExclusions());}  }
class C{  public static @NonNull MoveAnimation create(@Direction int direction,boolean enter,long duration){switch (direction) {case UP:case DOWN:    return new VerticalMoveAnimation(direction,enter,duration);case LEFT:case RIGHT:default :  return new HorizontalMoveAnimation(direction,enter,duration);}}  }
class C{  public AddSkuToWishListEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService,final CustomerService customerService,final CustomerWishListService customerWishListService,final ProductQuantityStrategy productQuantityStrategy){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.customerService=customerService;  this.customerWishListService=customerWishListService;  this.productQuantityStrategy=productQuantityStrategy;}  }
class C{  public Where<T,ID> or(){  ManyClause clause=new ManyClause(pop("OR"),ManyClause.OR_OPERATION);  push(clause);  addNeedsFuture(clause);  return this;}  }
class C{  @Field(16) public __VARIANT_NAME_3_union piVal(Pointer<Short> piVal){  this.io.setPointerField(this,16,piVal);  return this;}  }
class C{  public void testEncode(){  assertTrue("encode failed",Arrays.equals(realmAttribute.encode(),attributeBinValue));}  }
class C{  protected void sendDataToAllWatchers(IMessage message){  for (  EntityPlayerMP watcher : this.getWatchers()) {    TheBetweenlands.networkWrapper.sendTo(message,watcher);  }}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedataoffsetgreater.class,args);}  }
class C{  public MWMAreaType(Properties ctx,int WM_Area_Type_ID){  this(ctx,WM_Area_Type_ID,null);}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  return 0;}  }
class C{  private int checkSign(){  this.foundSign=false;  if (this.input[this.offset] == '+') {    this.foundSign=true;    this.offset++;    return 1;  } else   if (this.input[this.offset] == '-') {    this.foundSign=true;    this.offset++;    return -1;  }  return 1;}  }
class C{  public String order(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Order_ID=(Integer)value;  if (isCalloutActive() || C_Order_ID == null || C_Order_ID.intValue() == 0)   return "";  mTab.setValue("C_Invoice_ID",null);  mTab.setValue("C_Charge_ID",null);  mTab.setValue("IsPrepayment",Boolean.TRUE);  mTab.setValue("DiscountAmt",Env.ZERO);  mTab.setValue("WriteOffAmt",Env.ZERO);  mTab.setValue("IsOverUnderPayment",Boolean.FALSE);  mTab.setValue("OverUnderAmt",Env.ZERO);  Timestamp ts=(Timestamp)mTab.getValue("DateTrx");  if (ts == null)   ts=new Timestamp(System.currentTimeMillis());  String sql="SELECT COALESCE(Bill_BPartner_ID, C_BPartner_ID) as C_BPartner_ID " + ", C_Currency_ID " + ", GrandTotal "+ "FROM C_Order WHERE C_Order_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_Order_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("C_BPartner_ID",new Integer(rs.getInt(1)));      int C_Currency_ID=rs.getInt(2);      mTab.setValue("C_Currency_ID",new Integer(C_Currency_ID));      BigDecimal GrandTotal=rs.getBigDecimal(3);      if (GrandTotal == null)       GrandTotal=Env.ZERO;      mTab.setValue("PayAmt",GrandTotal);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);  }  return docType(ctx,WindowNo,mTab,mField,value);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public IconicsDrawableOld actionBarSize(){  return sizeDp(ANDROID_ACTIONBAR_ICON_SIZE_DP);}  }
class C{  void init(PageData page1,long pivot,PageData page2){  entryCount=1;  childPageIds=new int[]{page1.getPos(),page2.getPos()};  keys=new long[]{pivot};  length+=4 + Data.getVarLongLen(pivot);  check();}  }
class C{  public boolean isAllowedToInitiateGroupChat() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mApi.isAllowedToInitiateGroupChat();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public Vector3 sub(float value){  return this.set(this.x - value,this.y - value,this.z - value);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private static void _trustAllHttpsCertificates(){  SSLContext context;  if (_trustManagers == null) {    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};  }  try {    context=SSLContext.getInstance("SSL");    context.init(null,_trustManagers,new SecureRandom());  } catch (  GeneralSecurityException gse) {    throw new IllegalStateException(gse.getMessage());  }  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());}  }
class C{  public List<String> include(){  return include;}  }
class C{  public Comparator<Point2D> distanceToOrder(){  return new DistanceToOrder();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean evaluate(int nTuples,T tuple){  return (cntTuples > 0 && nTuples > 0 && nTuples % cntTuples == 0) || (tuplePredicate != null && tuplePredicate.test(tuple));}  }
class C{  public static Object waitForCompletion(Future<?>[] futures,ObjectObjectFunction aggr){  int size=futures.length;  Object[] results=new Object[size];  Object a=null;  try {    for (int j=0; j < size; j++) {      results[j]=(Integer)futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  private void removeTransformer(Thread t){  ThreadTransformer tt=null;synchronized (fAddedTransformers) {    int size=fAddedTransformers.size();    if (size > 0) {      int choose=(int)Math.floor(Math.random() * size);      tt=(ThreadTransformer)fAddedTransformers.remove(choose);    }  }  if (tt != null) {    getInstrumentation().removeTransformer(tt);  }}  }
class C{  @Description(summary="Print the system properties.") public void testSysProperties(){  System.out.println("environment settings:");  for (  Entry<Object,Object> e : new TreeMap<Object,Object>(System.getProperties()).entrySet()) {    System.out.println(e);  }}  }
class C{  public Node parse(Node chunk_struct,Integer trace){  if (trace == null)   trace=this._trace;  for (  int i : x.countTo(this._loop)) {    for (    RegexpChunkParser parser : this._stages) {      chunk_struct=parser.parse(chunk_struct,trace);    }  }  return chunk_struct;}  }
class C{  public void run(){  m_hasBeenReset=false;  try {    try {      transformNode(m_doc);    } catch (    Exception e) {      if (null != m_transformThread)       postExceptionFromThread(e); else       throw new RuntimeException(e.getMessage());    } finally {      if (m_inputContentHandler instanceof TransformerHandlerImpl) {        ((TransformerHandlerImpl)m_inputContentHandler).clearCoRoutine();      }    }  } catch (  Exception e) {    if (null != m_transformThread)     postExceptionFromThread(e); else     throw new RuntimeException(e.getMessage());  }}  }
class C{  void refreshModel(){  model=new ManageUdaDefinitionPage();  List<VOUdaDefinition> voUdaDefinitionsForCustomer=getCustomerUdaDefinitions();  List<UdaDefinitionRowModel> customerUdas=new ArrayList<UdaDefinitionRowModel>();  for (  VOUdaDefinition voUdaDef : voUdaDefinitionsForCustomer) {    customerUdas.add(UdaModelConverter.convertVoUdaDefinitionToRowModel(voUdaDef));  }  model.setCustomerUdas(customerUdas);  List<VOUdaDefinition> voUdaDefinitionForSubscription=getSubscriptionUdaDefinitions();  List<UdaDefinitionRowModel> subscriptionUdas=new ArrayList<UdaDefinitionRowModel>();  for (  VOUdaDefinition voUdaDef : voUdaDefinitionForSubscription) {    subscriptionUdas.add(UdaModelConverter.convertVoUdaDefinitionToRowModel(voUdaDef));  }  model.setSubscriptionUdas(subscriptionUdas);}  }
class C{  public void testCheckAuthenticationInfo() throws Exception {  AuthenticationInfo authInfo=new AuthenticationInfo();  boolean sreThrown=false;  try {    authInfo.setTruststoreLocation("");    authInfo.checkAndCleanAuthenticationInfo();  } catch (  ServerRuntimeException sre) {    assertNotNull(sre.getCause());    sreThrown=true;  }  assert (sreThrown);}  }
class C{  private void commonInit(){  this.setJMenuBar(m_APanel.getMenuBar());  this.setTitle(m_APanel.getTitle());  Image image=m_APanel.getImage();  if (image != null)   setIconImage(image);}  }
class C{  public static List<Intersection> intersectTriangles(final Line line,FloatBuffer vertices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  vertices.rewind();  while (vertices.limit() - vertices.position() >= 9) {    Intersection intersection=intersect(line,vertices.get(),vertices.get(),vertices.get(),vertices.get(),vertices.get(),vertices.get(),vertices.get(),vertices.get(),vertices.get());    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  protected static SampleModel fixSampleModel(CachableRed src,ColorModel cm,Rectangle bounds){  int defSz=AbstractTiledRed.getDefaultTileSize();  int tgX=defSz * (int)Math.floor(bounds.x / defSz);  int tgY=defSz * (int)Math.floor(bounds.y / defSz);  int tw=(bounds.x + bounds.width) - tgX;  int th=(bounds.y + bounds.height) - tgY;  SampleModel sm=src.getSampleModel();  int w=sm.getWidth();  if (w < defSz)   w=defSz;  if (w > tw)   w=tw;  int h=sm.getHeight();  if (h < defSz)   h=defSz;  if (h > th)   h=th;  if ((w <= 0) || (h <= 0)) {    w=1;    h=1;  }  return cm.createCompatibleSampleModel(w,h);}  }
class C{  public static boolean canAddPart(World world,BlockPos pos,IMultipart part){  IMultipartContainer container=getPartContainer(world,pos);  if (container == null) {    List<AxisAlignedBB> list=new ArrayList<AxisAlignedBB>();    part.addCollisionBoxes(new AxisAlignedBB(0,0,0,1,1,1),list,null);    for (    AxisAlignedBB bb : list)     if (!world.checkNoEntityCollision(bb.offset(pos.getX(),pos.getY(),pos.getZ())))     return false;    Collection<? extends IMultipart> parts=MultipartRegistry.convert(world,pos,true);    if (parts != null && !parts.isEmpty()) {      TileMultipartContainer tmp=new TileMultipartContainer();      for (      IMultipart p : parts)       tmp.getPartContainer().addPart(p,false,false,false,false,UUID.randomUUID());      return tmp.canAddPart(part);    }    return world.getBlockState(pos).getBlock().isReplaceable(world,pos);  }  return container.canAddPart(part);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.933 -0500",hash_original_method="DE8B58BD5456FA1A62F7BE53852C68CF",hash_generated_method="386F136ED6A5A7CD8DC4F735D9BC6E64") public boolean disconnectHeadsetInternal(BluetoothDevice device){  if (DBG)   log("disconnectHeadsetInternal");  if (mService != null && !isDisabled()) {    try {      return mService.disconnectHeadsetInternal(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public int size(){  final Segment<V>[] segments=this.segments;  long sum=0;  long check=0;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      sum+=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;    }    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        check+=segments[i].count;        if (mc[i] != segments[i].modCount) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segments.length; ++i)     segments[i].lock();    for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE; else   return (int)sum;}  }
class C{  public static boolean hasRepExt(final Path file){  return hasRepExt(file.getFileName().toString());}  }
class C{  boolean isHandshakeComplete(){  return handshakeComplete;}  }
class C{  public void addZoomListener(ZoomListener listener){}  }
class C{  private String[] readHosts(){  File fileDir=getFilesDir();  File persisted=new File(fileDir,"hosts.txt");  if (!persisted.exists()) {    return new String[0];  }  ArrayList<String> hosts=new ArrayList<String>();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(persisted));    String line=null;    line=br.readLine();    while (line != null) {      hosts.add(line);      line=br.readLine();    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (br != null) {        br.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }  return hosts.toArray(new String[hosts.size()]);}  }
class C{  MemberState completeAppend(){  appending--;  return this;}  }
class C{  public UriDeploymentScannerManager(String gridName,URI uri,File deployDir,long freq,FilenameFilter filter,GridUriDeploymentScannerListener lsnr,IgniteLogger log,UriDeploymentScanner scanner){  assert uri != null;  assert freq > 0;  assert deployDir != null;  assert filter != null;  assert log != null;  assert lsnr != null;  assert scanner != null;  this.gridName=gridName;  this.uri=uri;  this.deployDir=deployDir;  this.freq=freq;  this.filter=filter;  this.log=log.getLogger(getClass());  this.lsnr=lsnr;  this.scanner=scanner;}  }
class C{  public boolean isNfsMountCreationSupported(){  return nfsMountCreationSupported;}  }
class C{  public TriangulationProcess(){  this(TriangulationAlgorithm.DTSweep);}  }
class C{  private Intent startControlRecordingService(String action){  Intent intent=new Intent(context,ControlRecordingService.class);  intent.setAction(action);  startService(intent);  controlRecordingService=getService();  return intent;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalBarRenderer)) {    return false;  }  return super.equals(obj);}  }
class C{  public SimulatedAnnealingSearch(HeuristicFunction hf,Scheduler scheduler){  this(hf,scheduler,new NodeExpander());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.FILTER__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.FILTER__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.FILTER__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();case EipPackage.FILTER__EXPRESSION:return EXPRESSION_EDEFAULT == null ? expression != null : !EXPRESSION_EDEFAULT.equals(expression);}return super.eIsSet(featureID);}  }
class C{  public void removeDesignations(Object entity,String... uris) throws RepositoryException {  URI[] types=new URI[uris.length];  for (int i=0; i < uris.length; i++) {    types[i]=getValueFactory().createURI(uris[i]);  }  removeDesignations(entity,types);}  }
class C{  public static void pushParameter(int o){  parametersInteger.push(o);}  }
class C{  public CopyDescriptor(){  super(IJavaRefactorings.COPY);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deleteContacts(View v){  getOps().deleteContacts();}  }
class C{  public void loadFileAndCreate(String fileName){  try {    readXMLAndPersist(fileName,DbCliOperation.CREATE);    System.out.println(String.format("Load and create from file: %s successfully",fileName));    log.info("Load and create from file: {} successfully",fileName);  } catch (  Exception e) {    System.err.println("Caught Exception: " + e);    log.error("Caught Exception: ",e);  }}  }
class C{  public void updateEntriesOnSend(SPacketPlayerListItem packet){  for (  SPacketPlayerListItem.AddPlayerData data : packet.players) {    if (packet.action == SPacketPlayerListItem.Action.ADD_PLAYER) {      this.addEntry(data);    } else     if (packet.action == SPacketPlayerListItem.Action.REMOVE_PLAYER) {      this.removeEntry(data.getProfile().getId());    } else {      this.getEntry(data.getProfile().getId()).ifPresent(null);    }  }}  }
class C{  public void configure(){  SerialTrafficController tc=new SerialTrafficController();  tc.connectPort(this);  getSystemConnectionMemo().setTrafficController(tc);  getSystemConnectionMemo().configureManagers();}  }
class C{  private Name makeOperatorName(String name){  Name opName=names.fromString(name);  operatorNames.add(opName);  return opName;}  }
class C{  @Override public void onReady(CameraView cv){  if (cameras != null) {    open();  }}  }
class C{  @Override public void removeRedisAppKey(Application application){  String suffixCloudUnit=application.getSuffixCloudUnitIO();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String subNameSpace=concatSubNameSpace(application);    String frontend="frontend:" + subNameSpace + suffixCloudUnit;    jedis.del(frontend.toLowerCase());  } catch (  JedisConnectionException|UnsupportedEncodingException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public static ByteBuffer putVarInt(int val,ByteBuffer buf){  assert val >= 0;  while ((val & ~0x7f) != 0) {    buf.put((byte)((val & 0x7f) | 0x80));    val>>=7;  }  return buf.put((byte)val);}  }
class C{  private Text text(XMLEvent event){  return new Text(event);}  }
class C{  public static boolean endsWith(char s[],int len,char suffix[]){  final int suffixLen=suffix.length;  if (suffixLen > len)   return false;  for (int i=suffixLen - 1; i >= 0; i--)   if (s[len - (suffixLen - i)] != suffix[i])   return false;  return true;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","changqinglzufe");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void trackAsynchronously(FocusPoint focusPoint,InfoComponent infoComponent){  logMessage("JGoogleAnalytics: Tracking Asynchronously focusPoint=" + focusPoint.getEventName());  new TrackingThread(focusPoint,infoComponent).start();}  }
class C{  @Deprecated public static String replace(String str,String what,String with){  assert (what.length() > 0);  return str.replace(what,with);}  }
class C{  public Boolean isHeaderDigestInherited(){  return headerDigestInherited;}  }
class C{  public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){  delay();  if (verbose) {    System.out.print("READ " + table + " "+ key+ " [ ");    if (fields != null) {      for (      String f : fields) {        System.out.print(f + " ");      }    } else {      System.out.print("<all fields>");    }    System.out.println("]");  }  return 0;}  }
class C{  @RequestMapping(value="/posts",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<PostDTO> updatePost(@Valid @RequestBody PostDTO postDTO) throws URISyntaxException, JSONException {  log.debug("REST request to update Post : {}",postDTO.getId());  if (postDTO.getId() == null) {    return createPost(postDTO);  }  if (!(SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.ADMIN) || Objects.equals(postDTO.getUserId(),userService.getCurrentUserId()))) {    return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);  }  Post post=postMapper.postDTOToPost(postDTO);  Post result=postService.updatePost(post);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("post",postDTO.getId().toString())).body(postMapper.postToPostDTO(result));}  }
class C{  public TransactionMetaDataPair(final Transaction transaction,final TransactionMetaData metaData){  super("transaction","meta",transaction,metaData);}  }
class C{  @SuppressWarnings("unchecked") protected T1 send() throws ClientException {  return mBaseRequest.getClient().getHttpProvider().send(this,mResponseClass,null);}  }
class C{  public CNaviViewEdge(final int id,final INaviViewNode sourceNode,final INaviViewNode targetNode,final EdgeType type,final double sourceX,final double sourceY,final double targetX,final double targetY,final Color color,final boolean selected,final boolean visible,final ArrayList<IComment> localComment,final List<CBend> edgePaths,final SQLProvider provider){  super(id,sourceNode,targetNode,type,sourceX,sourceY,targetX,targetY,color,selected,visible,edgePaths);  m_provider=Preconditions.checkNotNull(provider,"IE00204: Provider argument can not be null");  CNaviViewNode.link(sourceNode,targetNode);  CommentManager.get(provider).addListener(m_internalCommentListener);  if ((localComment != null) && !localComment.isEmpty()) {    CommentManager.get(m_provider).initializeLocalEdgeComment(this,localComment);  }}  }
class C{  protected static boolean isValidType(int typeId){  return (typeId >= 0) && (typeId < TYPE_INDEX.length);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  @SuppressWarnings("unchecked") public IgniteInternalFuture<?> rebuildAllIndexes(){  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to get space size (grid is stopping).");  try {    GridCompoundFuture<?,?> fut=new GridCompoundFuture<Object,Object>();    for (    Map.Entry<TypeId,TypeDescriptor> e : types.entrySet())     fut.add((IgniteInternalFuture)rebuildIndexes(e.getKey().space,e.getValue()));    fut.markInitialized();    return fut;  }  finally {    busyLock.leaveBusy();  }}  }
class C{  public FastUtilIntIterator(int[] primitiveArray){  super(primitiveArray);}  }
class C{  @Override protected String aggregateName(){  if (!StringUtils.isEmpty(alias)) {    return alias;  }  return "AVG(" + column + ")";}  }
class C{  public ObjectFactory(){}  }
class C{  protected void shutdown() throws IOException {  zooKeeperServer.shutdown();  ZKDatabase zkDb=zooKeeperServer.getZKDatabase();  if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {    waitForServerDown(getZkHost() + ":" + getPort(),5000);  }  if (cnxnFactory != null) {    cnxnFactory.shutdown();    try {      cnxnFactory.join();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  if (zkDb != null) {    zkDb.close();  }}  }
class C{  private Product extractImages(DrbNode productNode,Product product){  if (ImageIO.getUseCache())   ImageIO.setUseCache(false);  if (!ImageFactory.isImage(productNode)) {    LOGGER.debug("No Image.");    return product;  }  RenderedImageList input_list=null;  RenderedImage input_image=null;  try {    input_list=ImageFactory.createImage(productNode);    input_image=RenderingFactory.createDefaultRendering(input_list);  } catch (  Exception e) {    LOGGER.debug("Cannot retrieve default rendering");    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Error occurs during rendered image reader",e);    }    if (input_list == null) {      return product;    }    input_image=input_list;  }  if (input_image == null) {    return product;  }  int quicklook_width=cfgManager.getProductConfiguration().getQuicklookConfiguration().getWidth();  int quicklook_height=cfgManager.getProductConfiguration().getQuicklookConfiguration().getHeight();  boolean quicklook_cutting=cfgManager.getProductConfiguration().getQuicklookConfiguration().isCutting();  LOGGER.info("Generating Quicklook " + quicklook_width + "x"+ quicklook_height+ " from "+ input_image.getWidth()+ "x"+ input_image.getHeight());  RenderedImage image=ProcessingUtils.resizeImage(input_image,quicklook_width,quicklook_height,10f,quicklook_cutting);  File image_directory=incomingManager.getNewIncomingPath();  AsyncFileLock afl=null;  try {    Path path=Paths.get(image_directory.getAbsolutePath(),".lock-writing");    afl=new AsyncFileLock(path);    afl.obtain(900000);  } catch (  IOException|InterruptedException|TimeoutException e) {    LOGGER.warn("Cannot lock incoming directory - continuing without (" + e.getMessage() + ")");  }  String identifier=product.getIdentifier();  File file=new File(image_directory,identifier + "-ql.jpg");  try {    if (ImageIO.write(image,"jpg",file)) {      product.setQuicklookPath(file.getPath());      product.setQuicklookSize(file.length());    }  } catch (  IOException e) {    LOGGER.error("Cannot save quicklook.",e);  }  int thumbnail_width=cfgManager.getProductConfiguration().getThumbnailConfiguration().getWidth();  int thumbnail_height=cfgManager.getProductConfiguration().getThumbnailConfiguration().getHeight();  boolean thumbnail_cutting=cfgManager.getProductConfiguration().getThumbnailConfiguration().isCutting();  LOGGER.info("Generating Thumbnail " + thumbnail_width + "x"+ thumbnail_height+ " from "+ input_image.getWidth()+ "x"+ input_image.getHeight()+ " image.");  image=ProcessingUtils.resizeImage(input_image,thumbnail_width,thumbnail_height,10f,thumbnail_cutting);  file=new File(image_directory,identifier + "-th.jpg");  try {    if (ImageIO.write(image,"jpg",file)) {      product.setThumbnailPath(file.getPath());      product.setThumbnailSize(file.length());    }  } catch (  IOException e) {    LOGGER.error("Cannot save thumbnail.",e);  }  SdiImageFactory.close(input_list);  if (afl != null) {    afl.close();  }  return product;}  }
class C{  public RxJava1ClientWebRequestBuilder header(String name,String... values){  this.delegate.header(name,values);  return this;}  }
class C{  public TraceOptions_ createTraceOptions_(){  TraceOptions_Impl traceOptions_=new TraceOptions_Impl();  return traceOptions_;}  }
class C{  private void searchWithTimeLimiter(final Query query,final ProcessedFilter filter,Collector collector) throws IOException {  if (queryCommand.getTimeAllowed() > 0) {    collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),queryCommand.getTimeAllowed());  }  TotalHitCountCollector hitCountCollector=new TotalHitCountCollector();  if (includeHitCount) {    collector=MultiCollector.wrap(collector,hitCountCollector);  }  Filter luceneFilter=filter.filter;  if (filter.postFilter != null) {    filter.postFilter.setLastDelegate(collector);    collector=filter.postFilter;  }  try {    searcher.search(query,luceneFilter,collector);  } catch (  TimeLimitingCollector.TimeExceededException x) {    partialResults=true;    logger.warn("Query: " + query + "; "+ x.getMessage());  }  if (includeHitCount) {    totalHitCount=hitCountCollector.getTotalHits();  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROMISIFY_EXPRESSION;}  }
class C{  public void createBurpCertificate(BurpCertificate burpCertificate){  setStatus("Creating certificate...");  try {    BurpCertificateBuilder burpCertificateBuilder=new BurpCertificateBuilder(certificateTab.getTxtSubject());    burpCertificateBuilder.setVersion(3);    burpCertificateBuilder.setSerial(certificateTab.getTxtSerialNumber());    burpCertificateBuilder.setSignatureAlgorithm(certificateTab.getTxtSignatureAlgorithm());    burpCertificateBuilder.setIssuer(certificateTab.getTxtIssuer());    burpCertificateBuilder.setNotBefore(certificateTab.getTxtNotBefore());    burpCertificateBuilder.setNotAfter(certificateTab.getTxtNotAfter());    burpCertificateBuilder.setKeySize(Integer.valueOf(certificateTab.getTxtKeySize()));    if (!certificateTab.getChckbxIgnoreBasicConstraints()) {      burpCertificateBuilder.setHasBasicConstraints(true);      burpCertificateBuilder.setIsCA(certificateTab.isCa());      if (certificateTab.isCa() && certificateTab.hasNoPathLimit()) {        burpCertificateBuilder.setHasNoPathLimit(true);      } else       if (certificateTab.isCa() && !certificateTab.hasNoPathLimit()) {        if (certificateTab.getTxtPathLimit() >= 0) {          burpCertificateBuilder.setPathLimit(certificateTab.getTxtPathLimit());        } else {          burpCertificateBuilder.setPathLimit(0);        }      }    }    if (certificateTab.getKeyUsage().size() > 0) {      burpCertificateBuilder.setKeyUsage(certificateTab.getKeyUsage());    }    if (certificateTab.getExtendedKeyUsage().size() > 0) {      burpCertificateBuilder.setExtendedKeyUsage(certificateTab.getExtendedKeyUsage());    }    if (certificateTab.getSubjectAlternativeNames().size() > 0) {      for (      String s : certificateTab.getSubjectAlternativeNames()) {        burpCertificateBuilder.addSubjectAlternativeName(s);      }    }    if (certificateTab.getIssuerAlternativeNames().size() > 0) {      for (      String s : certificateTab.getIssuerAlternativeNames()) {        burpCertificateBuilder.addIssuerAlternativeName(s);      }    }    if (certificateTab.isAutoSubjectKeyIdentifier()) {      burpCertificateBuilder.setSubjectKeyIdentifier(true);    } else     if (certificateTab.getSubjectKeyIdentifier().length() > 0) {      burpCertificateBuilder.setSubjectKeyIdentifier(certificateTab.getSubjectKeyIdentifier());    }    if (certificateTab.isAutoAuthorityKeyIdentifier()) {      burpCertificateBuilder.setAuthorityKeyIdentifier(true);    } else     if (certificateTab.getAuthorityKeyIdentifier().length() > 0) {      burpCertificateBuilder.setAuthorityKeyIdentifier(certificateTab.getAuthorityKeyIdentifier());    }    if (certificateTab.getChckbxCopyUnsupportedExtensions()) {      for (      BurpCertificateExtension extension : burpCertificate.getAllExtensions()) {        if (!ObjectIdentifier.extensionsIsSupported(extension.getOid())) {          burpCertificateBuilder.addExtension(extension);        }      }    }    BurpCertificate newCertificate;    newCertificate=burpCertificateBuilder.generateSelfSignedCertificate();    burpCertificateStore.addCertificate(newCertificate);    setStatus("New certificate created.");    setCertificateTree();  } catch (  CertificateEncodingException e) {    setStatus("Problem with certificate encoding. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  InvalidKeyException e) {    setStatus("Invalid Key. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    setStatus("Unsupported algorithm specified. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  SignatureException e) {    setStatus("Error creating signature. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  InvalidKeySpecException e) {    setStatus("Unsupported key specifications. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  IOException e) {    setStatus("I/O error (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  NoSuchProviderException|IllegalStateException e) {    setStatus("Error creating certificate. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  ParseException e) {    setStatus("Could not Parse Date. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  IllegalArgumentException e) {    setStatus("Error reading input form. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");    e.printStackTrace();  }}  }
class C{  private void validateNodeRecoveryStatus(){  RecoveryStatus status=queryNodeRecoveryStatus();  if (isTriggering(status)) {    log.warn("Have triggered node recovery already");    throw new IllegalStateException("Have triggered node recovery already");  }}  }
class C{  public void add(AverageTrueRangeItem dataItem,boolean notify){  if (!this.isEmpty()) {    AverageTrueRangeItem item0=(AverageTrueRangeItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  private String generateExceptionMessage(Throwable error){  String message=error.getMessage();  while (error.getCause() != null) {    if (error.getCause() instanceof SSLHandshakeException) {      message="The system is not configured to trust the security certificate provided by the Git server";      break;    } else     if (error.getCause() instanceof IOException) {      if (message != null && message.startsWith(FILE_NAME_TOO_LONG_ERROR_PREFIX)) {        try {          String repoPath=repository.getWorkTree().getCanonicalPath();          int startIndex=message.indexOf(repoPath);          int endIndex=message.indexOf(",");          if (startIndex > -1 && endIndex > -1) {            message=FILE_NAME_TOO_LONG_ERROR_PREFIX + " " + message.substring(startIndex + repoPath.length(),endIndex);          }          break;        } catch (        IOException e) {        }      }    }    error=error.getCause();  }  return message;}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }  buf=new byte[size];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void failoverCopy(RPCopyRequestParams copyToFailoverTo) throws RecoverPointException {  String bookmarkName=copyToFailoverTo.getBookmarkName();  Date apitTime=copyToFailoverTo.getApitTime();  if (bookmarkName != null) {    logger.info("Failover copy to bookmark : " + bookmarkName);  } else   if (apitTime != null) {    logger.info("Failover copy to APIT : " + apitTime.toString());  } else {    logger.info("Failover copy to most recent image");  }  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.enableCopyImage(functionalAPI,copyToFailoverTo,true);}  }
class C{  void registerDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener,DownloadStatusConfiguration downloadStatusConfiguration){  getDownloadTaskManager().registerDownloadStatusListener(onFileDownloadStatusListener,downloadStatusConfiguration);}  }
class C{  public StatPanel(final GameData data,final IUIContext uiContext2){  super(data);  m_uiContext=uiContext2;  m_dataModel=new StatTableModel();  m_techModel=new TechTableModel();  fillPlayerIcons();  initLayout();}  }
class C{  @Override public boolean accept(File f){  if (f != null) {    if (f.isDirectory()) {      return true;    }    String extension=getExtension(f);    if (extension != null && filters.get(getExtension(f)) != null) {      return true;    }    ;  }  return false;}  }
class C{  @DSComment("Perference UI, only change preference is spec") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.358 -0500",hash_original_method="1057BD246BBC96B40BF6B862055C5AB8",hash_generated_method="7DBC96472843914D224753BAD760B683") public boolean isChecked(){  return mChecked;}  }
class C{  public void reallocateMigratingInVms(){  for (  Vm vm : getVmsMigratingIn()) {    if (!getVmList().contains(vm)) {      getVmList().add(vm);    }    if (!getVmScheduler().getVmsMigratingIn().contains(vm.getUid())) {      getVmScheduler().getVmsMigratingIn().add(vm.getUid());    }    getRamProvisioner().allocateRamForVm(vm,vm.getCurrentRequestedRam());    getBwProvisioner().allocateBwForVm(vm,vm.getCurrentRequestedBw());    getVmScheduler().allocatePesForVm(vm,vm.getCurrentRequestedMips());    setStorage(getStorage() - vm.getSize());  }}  }
class C{  public LauncherSettingsPanel(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.432 -0400",hash_original_method="C2DBF2F05269C3235ED08EC2AAEDCD8A",hash_generated_method="82070A00A9CAC5312612B9A67E320357") public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super("The element " + elementName + " is not complete for the annotation "+ annotationType.getName());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.336 -0500",hash_original_method="B13C0C999B2C074C09328C18BB8361D9",hash_generated_method="99D5ADBFBB3091B574273ECDB20FDE01") @Override public boolean onCreate(){  if (mAuthority == null || mMode == 0) {    throw new IllegalArgumentException("Provider not configured");  }  int mWorkingDbVersion=DATABASE_VERSION + mMode;  mOpenHelper=new DatabaseHelper(getContext(),mWorkingDbVersion);  return true;}  }
class C{  public OMText(double lt,double ln,String stuff,int just){  this(lt,ln,stuff,DEFAULT_FONT,just);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? new Integer(0) : new Integer(s.getEpisodeNumber());}  }
class C{  public void startSession(){  Core.getInstance().getImService().addSession(this);  start();}  }
class C{  public static final int opposite(int position){  if (position == LEFT)   return RIGHT;  if (position == RIGHT)   return LEFT;  return position;}  }
class C{  public synchronized void removeProgressive(){  if (Cfg.DEBUG) {    Check.log(TAG + " Info: Removing Progressive");  }  final Context content=Status.getAppContext();  try {    content.deleteFile(PROG_FILENAME);  } catch (  Exception ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }  }}  }
class C{  public boolean isPrintInput(){  return printInput;}  }
class C{  public void addStateValueAsInteger(StateObject context,String name,int intValue){  if (context != null && !containsElement(context.elem)) {    String message=Logging.getMessage("RestorableSupport.InvalidStateObject");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (name == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  addStateValueAsString(context,name,Integer.toString(intValue));}  }
class C{  public void endActivityAndComputeNextState(double now){  throw new UnsupportedOperationException();}  }
class C{  private void processWorkList(IClassPath classPath,LinkedList<WorkListItem> workList,IClassPathBuilderProgress progress) throws InterruptedException, IOException, ResourceNotFoundException {  while (!workList.isEmpty()) {    WorkListItem item=workList.removeFirst();    if (item.getHowDiscovered() == ICodeBase.Discovered.SPECIFIED) {      progress.startArchive(item.toString());    }    if (DEBUG) {      System.out.println("Working: " + item.getCodeBaseLocator());    }    DiscoveredCodeBase discoveredCodeBase;    discoveredCodeBase=discoveredCodeBaseMap.get(item.getCodeBaseLocator().toString());    if (discoveredCodeBase != null) {      if (!discoveredCodeBase.getCodeBase().isApplicationCodeBase() && item.isAppCodeBase()) {        discoveredCodeBase.getCodeBase().setApplicationCodeBase(true);      }      continue;    }    if (item.getCodeBaseLocator() instanceof FilesystemCodeBaseLocator) {      FilesystemCodeBaseLocator l=(FilesystemCodeBaseLocator)item.getCodeBaseLocator();      if (l.getPathName().endsWith(".java")) {        if (DEBUG) {          System.err.println("Ignoring .java file \"" + l.getPathName() + "\" specified in classpath or auxclasspath");        }        continue;      }    }    try {      discoveredCodeBase=new DiscoveredCodeBase(item.getCodeBaseLocator().openCodeBase());      discoveredCodeBase.getCodeBase().setApplicationCodeBase(item.isAppCodeBase());      discoveredCodeBase.getCodeBase().setHowDiscovered(item.getHowDiscovered());      discoveredCodeBaseMap.put(item.getCodeBaseLocator().toString(),discoveredCodeBase);      discoveredCodeBaseList.addLast(discoveredCodeBase);      if (discoveredCodeBase.getCodeBase() instanceof IScannableCodeBase && (discoveredCodeBase.codeBase.isApplicationCodeBase() || item.getHowDiscovered() == ICodeBase.Discovered.SPECIFIED)) {        scanCodebase(classPath,workList,discoveredCodeBase);      }      scanJarManifestForClassPathEntries(workList,discoveredCodeBase.getCodeBase());    } catch (    IOException e) {      if (item.isAppCodeBase() || item.getHowDiscovered() == ICodeBase.Discovered.SPECIFIED) {        if (e instanceof FileNotFoundException) {          if (item.isAppCodeBase()) {            errorLogger.logError("File from project not found: " + item.getCodeBaseLocator(),e);          } else {            errorLogger.logError("File from auxiliary classpath not found: " + item.getCodeBaseLocator(),e);          }        } else {          errorLogger.logError("Cannot open codebase " + item.getCodeBaseLocator(),e);        }      }    }catch (    ResourceNotFoundException e) {      if (item.getHowDiscovered() == ICodeBase.Discovered.SPECIFIED) {        errorLogger.logError("Cannot open codebase " + item.getCodeBaseLocator(),e);      }    }    if (item.getHowDiscovered() == ICodeBase.Discovered.SPECIFIED) {      progress.finishArchive();    }  }}  }
class C{  public LanguageDialog(JFrame f){  super(f);  setModal(true);  setTitle(resources.getString("Dialog.title"));  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  getContentPane().add(panel);  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);  pack();}  }
class C{  public SayRequiredItemAction(final String questname,final String message){  this.questname=checkNotNull(questname);  this.message=checkNotNull(message);  this.index=-1;}  }
class C{  public double eval(double params[]){  return (Math.max(params[0],params[1]));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.391 -0500",hash_original_method="F7F8B7C8923C08ADEC94E7E7276E0E2F",hash_generated_method="CA50C82AAEBCCFC857040B17FF4D0BBA") void put(ThreadLocal<?> key,Object value){  cleanUp();  int firstTombstone=-1;  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == key.reference) {      table[index + 1]=value;      return;    }    if (k == null) {      if (firstTombstone == -1) {        table[index]=key.reference;        table[index + 1]=value;        size++;        return;      }      table[firstTombstone]=key.reference;      table[firstTombstone + 1]=value;      tombstones--;      size++;      return;    }    if (firstTombstone == -1 && k == TOMBSTONE) {      firstTombstone=index;    }  }}  }
class C{  public MyMap(String mapName){  init();  this.status=Constant.COMPLETE;  int index=mapName.indexOf("-gh");  if (index > 0) {    mapName=mapName.substring(0,index);  }  this.mapName=mapName;  generateContinentName(mapName);  File file=new File(Variable.getVariable().getMapsFolder().getAbsolutePath(),mapName + "-gh");  setUrl(file.getAbsolutePath());  setSize(dirSize(file) + "M");}  }
class C{  public synchronized Object peek(){  int len=size();  if (len == 0)   throw new EmptyStackException();  return elementAt(len - 1);}  }
class C{  @Override public A execute(PerceptStateReward<S> percept){  S sPrime=percept.state();  double rPrime=percept.reward();  if (isTerminal(sPrime)) {    Q.put(new Pair<S,A>(sPrime,noneAction),rPrime);  }  if (null != s) {    Pair<S,A> sa=new Pair<S,A>(s,a);    Nsa.incrementFor(sa);    Double Q_sa=Q.get(sa);    if (null == Q_sa) {      Q_sa=0.0;    }    Q.put(sa,Q_sa + alpha(Nsa,s,a) * (r + gamma * maxAPrime(sPrime) - Q_sa));  }  if (isTerminal(sPrime)) {    s=null;    a=null;    r=null;  } else {    s=sPrime;    a=argmaxAPrime(sPrime);    r=rPrime;  }  return a;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  Point[] yvals=new Point[length / 2];  for (int i=0; i < length; i+=2) {    Point p=new Point();    p.seriesIndex=i / 2;    p.yval=points.get(i + 1);    yvals[i / 2]=p;  }  for (int i=0; i < length; i+=2) {    float x=points.get(i);    float y=points.get(i + 1);    if (mType == Type.HEAPED && seriesIndex > 0) {      float lastY=mPreviousSeriesPoints.get(i + 1);      y=y + (lastY - yAxisValue);      points.set(i + 1,y);      drawBar(canvas,x,lastY,x,y,halfDiffX,seriesNr,seriesIndex,paint);    } else {      drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());  mPreviousSeriesPoints=points;}  }
class C{  public IntColumn(){  this(0,10,-1);}  }
class C{  public boolean hasChildren(Object element){  try {    IGefaehrdungsBaumElement elmt=(IGefaehrdungsBaumElement)element;    if (elmt.getGefaehrdungsBaumChildren() == null) {      return false;    } else {      return elmt.getGefaehrdungsBaumChildren().size() > 0;    }  } catch (  Exception e) {    LOG.error("Error in hasChildren()",e);    return false;  }}  }
class C{  public boolean hasSourceInfoKind(SootMethod method){  if (srcsMapping.containsKey(method))   return true;  if (API.v().isSystemMethod(method)) {    for (    SootMethod parent : SootUtils.getOverriddenMethodsFromSuperclasses(method)) {      if (srcsMapping.containsKey(parent))       return true;    }  }  return false;}  }
class C{  final public static String toString(final byte[] key,final int off,final int len){  if (key == null)   return NULL;  final StringBuilder sb=new StringBuilder(len * 4 + 2);  sb.append("[");  for (int i=off; i < off + len; i++) {    if (i > 0)     sb.append(", ");    sb.append(Integer.toString(key[i] & 0xff));  }  sb.append("]");  return sb.toString();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int[] colors){  this(points,thickness,colors,true);}  }
class C{  public EmrClusterDefinitionEntity createEmrClusterDefinitionEntity(NamespaceEntity namespaceEntity,String definitionName,String configurationXml){  EmrClusterDefinitionEntity emrClusterDefinitionEntity=new EmrClusterDefinitionEntity();  emrClusterDefinitionEntity.setNamespace(namespaceEntity);  emrClusterDefinitionEntity.setName(definitionName);  emrClusterDefinitionEntity.setConfiguration(configurationXml);  return emrClusterDefinitionDao.saveAndRefresh(emrClusterDefinitionEntity);}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  protected double predictFileTransferTime(List<String> requiredFiles){  double time=0.0;  for (  String fileName : requiredFiles) {    for (int i=0; i < getStorageList().size(); i++) {      Storage tempStorage=getStorageList().get(i);      File tempFile=tempStorage.getFile(fileName);      if (tempFile != null) {        time+=tempFile.getSize() / tempStorage.getMaxTransferRate();        break;      }    }  }  return time;}  }
class C{  public WrappedByteBuffer putBufferAt(int index,WrappedByteBuffer v){  int pos=_buf.position();  _buf.position(index);  _buf.put(v._buf);  _buf.position(pos);  return this;}  }
class C{  public void assertCleared(W window){  for (  StateNamespace untypedNamespace : stateInternals.getNamespacesInUse()) {    if (untypedNamespace instanceof WindowAndTriggerNamespace) {      @SuppressWarnings("unchecked") WindowAndTriggerNamespace<W> namespace=(WindowAndTriggerNamespace<W>)untypedNamespace;      if (namespace.getWindow().equals(window)) {        Set<?> tagsInUse=stateInternals.getTagsInUse(namespace);        assertTrue("Trigger has not cleared tags: " + tagsInUse,tagsInUse.isEmpty());      }    }  }}  }
class C{  public VCardReader(InputStream in,VCardVersion defaultVersion){  this(new InputStreamReader(in),defaultVersion);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public void skipWS(){  while (hasNext() && Character.isWhitespace(peek())) {    next();  }}  }
class C{  public Class loadClass(final String name,boolean lookupScriptFiles,boolean preferClassOverScript) throws ClassNotFoundException, CompilationFailedException {  return loadClass(name,lookupScriptFiles,preferClassOverScript,false);}  }
class C{  public static String validateAgainstXSD(final StreamSource streamSource){  try {    if (schema == null) {      schema=getSchema();    }    final Validator validator=schema.newValidator();    validator.validate(streamSource);    return StringUtils.EMPTY;  } catch (  Exception e) {    LOG.warn("Error during the XML schema validation!",e);    return e.getMessage();  }}  }
class C{  public static QueryExp or(QueryExp q1,QueryExp q2){  return new OrQueryExp(q1,q2);}  }
class C{  public static Logger log(){  return ToastBootstrap.toastLogger;}  }
class C{  @Override public boolean onCommand(CommandSender commandSender,Command command,String label,String[] args){  if (!(commandSender instanceof Player)) {    return false;  }  Player player=(Player)commandSender;  if (args.length == 1) {switch (args[0].toLowerCase()) {case "help":      Messages.USAGE_GAME.send(player);case "addspawn":    int spawn=editedFile.createListLocation(player,null,"Spawns");  Messages.CREATED_SPAWN.send(player,spawn);break;case "checkpoint":int checkpoint=editedFile.createListLocation(player,null,"Checkpoints");Messages.CREATED_CHECKPOINT.send(player,checkpoint);break;case "nukeroom":editedFile.getConfig().set("Nukeroom",editedFile.serializeLocation(player.getLocation()));editedFile.saveFile();Messages.CREATED_NUKEROOM.send(player);break;default :sendUnknownCommand(player);sendCorrection(player,args[0].toLowerCase(),new String[]{"addspawn","checkpoint","nukeroom"});}} else if (args.length == 2) {switch (args[0].toLowerCase()) {case "load":load(player,args[1]);break;default :sendUnknownCommand(player);sendCorrection(player,args[0].toLowerCase(),new String[]{"load"});}} else if (args.length == 3) {switch (args[0].toLowerCase()) {case "door":doorSubCommand(player,args);break;default :sendUnknownCommand(player);sendCorrection(player,args[0].toLowerCase(),new String[]{"door"});}} else if (args.length == 4) {switch (args[0].toLowerCase()) {case "door":doorSubCommand(player,args);break;default :sendUnknownCommand(player);sendCorrection(player,args[0].toLowerCase(),new String[]{"door"});}} else {sendUnknownCommand(player);}return false;}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (next >= length)     return -1;    return str.charAt(next++);  }}  }
class C{  public static void main(String... args){  SelfDestructor.startCountdown(60);  try {    Class.forName("org.h2.Driver");    String url=args[0], user=args[1], password=args[2];    String baseDir=args[3];    int accounts=Integer.parseInt(args[4]);    Random random=new Random();    Connection conn1=DriverManager.getConnection(url,user,password);    PreparedStatement prep1a=conn1.prepareStatement("INSERT INTO LOG(ACCOUNTID, AMOUNT) VALUES(?, ?)");    PreparedStatement prep1b=conn1.prepareStatement("UPDATE ACCOUNT SET SUM=SUM+? WHERE ID=?");    conn1.setAutoCommit(false);    long time=System.currentTimeMillis();    String d=null;    for (int i=0; ; i++) {      long t=System.currentTimeMillis();      if (t > time + 1000) {        ArrayList<String> list=FileLister.getDatabaseFiles(baseDir,"kill",true);        System.out.println("inserting... i:" + i + " d:"+ d+ " files:"+ list.size());        time=t;      }      if (i > 10000) {      }      int account=random.nextInt(accounts);      int value=random.nextInt(100);      prep1a.setInt(1,account);      prep1a.setInt(2,value);      prep1a.execute();      prep1b.setInt(1,value);      prep1b.setInt(2,account);      prep1b.execute();      conn1.commit();      if (random.nextInt(100) < 2) {        d="D" + random.nextInt(1000);        account=random.nextInt(accounts);        conn1.createStatement().execute("UPDATE TEST_A SET DATA='" + d + "' WHERE ID="+ account);        conn1.createStatement().execute("UPDATE TEST_B SET DATA='" + d + "' WHERE ID="+ account);      }    }  } catch (  Throwable e) {    TestBase.logError("error",e);  }}  }
class C{  public static OpenMap create(){  return new OpenMap(null);}  }
class C{  public void testDivideAndRemainderMathContextDOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=20;  int precision=15;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String res="0E-25";  int resScale=25;  String rem="3736186567876.876578956958765675671119238118911893939591735";  int remScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result[]=aNumber.divideAndRemainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result[0].toString());  assertEquals("incorrect quotient scale",resScale,result[0].scale());  assertEquals("incorrect remainder value",rem,result[1].toString());  assertEquals("incorrect remainder scale",remScale,result[1].scale());}  }
class C{  protected boolean engineVerify(byte[] sigBytes) throws SignatureException {  if (sigBytes == null) {    throw new NullPointerException("sigBytes == null");  }  return checkSignature(sigBytes,0,0);}  }
class C{  public void addSKI(byte[] skiBytes){  this.add(new XMLX509SKI(this.doc,skiBytes));}  }
class C{  public int length(){  return mInputView.length();}  }
class C{  private void adjustScrollPositionIfNecessary(JList list,int index,int direction){  if (direction == 0) {    return;  }  Rectangle cellBounds=list.getCellBounds(index,index);  Rectangle visRect=list.getVisibleRect();  if (cellBounds != null && !visRect.contains(cellBounds)) {    if (list.getLayoutOrientation() == JList.VERTICAL_WRAP && list.getVisibleRowCount() <= 0) {      if (list.getComponentOrientation().isLeftToRight()) {        if (direction > 0) {          int x=Math.max(0,cellBounds.x + cellBounds.width - visRect.width);          int startIndex=list.locationToIndex(new Point(x,cellBounds.y));          Rectangle startRect=list.getCellBounds(startIndex,startIndex);          if (startRect.x < x && startRect.x < cellBounds.x) {            startRect.x+=startRect.width;            startIndex=list.locationToIndex(startRect.getLocation());            startRect=list.getCellBounds(startIndex,startIndex);          }          cellBounds=startRect;        }        cellBounds.width=visRect.width;      } else {        if (direction > 0) {          int x=cellBounds.x + visRect.width;          int rightIndex=list.locationToIndex(new Point(x,cellBounds.y));          Rectangle rightRect=list.getCellBounds(rightIndex,rightIndex);          if (rightRect.x + rightRect.width > x && rightRect.x > cellBounds.x) {            rightRect.width=0;          }          cellBounds.x=Math.max(0,rightRect.x + rightRect.width - visRect.width);          cellBounds.width=visRect.width;        } else {          cellBounds.x+=Math.max(0,cellBounds.width - visRect.width);          cellBounds.width=Math.min(cellBounds.width,visRect.width);        }      }    } else {      if (direction > 0 && (cellBounds.y < visRect.y || cellBounds.y + cellBounds.height > visRect.y + visRect.height)) {        int y=Math.max(0,cellBounds.y + cellBounds.height - visRect.height);        int startIndex=list.locationToIndex(new Point(cellBounds.x,y));        Rectangle startRect=list.getCellBounds(startIndex,startIndex);        if (startRect.y < y && startRect.y < cellBounds.y) {          startRect.y+=startRect.height;          startIndex=list.locationToIndex(startRect.getLocation());          startRect=list.getCellBounds(startIndex,startIndex);        }        cellBounds=startRect;        cellBounds.height=visRect.height;      } else {        cellBounds.height=Math.min(cellBounds.height,visRect.height);      }    }    list.scrollRectToVisible(cellBounds);  }}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  return null;}  }
class C{  public boolean canExtractItem(@Nonnull IInventory inv,@Nullable ItemStack stack,int slot){  final ItemStack expected=inv.getStackInSlot(slot);  if (expected == null)   return false;  return checkSlotAndSize(inv,stack,slot);}  }
class C{  private <T>StringConverter<T> findAnnotationConverter(final Class<T> cls){  Method toString=findToStringMethod(cls);  if (toString == null) {    return null;  }  Constructor<T> con=findFromStringConstructor(cls);  Method fromString=findFromStringMethod(cls,con == null);  if (con == null && fromString == null) {    throw new IllegalStateException("Class annotated with @ToString but not with @FromString");  }  if (con != null && fromString != null) {    throw new IllegalStateException("Both method and constructor are annotated with @FromString");  }  if (con != null) {    return new MethodConstructorStringConverter<T>(cls,toString,con);  } else {    return new MethodsStringConverter<T>(cls,toString,fromString);  }}  }
class C{  @Override public Request<String> logs(ProjectReference projectReference,long taskId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("logs").path(String.valueOf(taskId)).request().accept(TEXT_PLAIN).buildGet();  return new SimpleRequest<>(request,String.class,getAuthenticationManager());}  }
class C{  public static Text valueOf(double d){  TextBuilder tb=new TextBuilder();  return tb.append(d).toText();}  }
class C{  public void checkKey(Object key) throws PartitionedRegionException {  if (!hasHash) {    return;  }  if (key == null) {    return;  }  int expected=key.hashCode();  if (expected == keyHash) {    return;  }  throw new PartitionedRegionException("Object hashCode inconsistent between cache peers. Here = " + expected + "; peer calculated = "+ keyHash);}  }
class C{  private static boolean equalsMayBeNullOrZeroLen(String s1,String s2){  int len1=(s1 == null) ? 0 : s1.length();  int len2=(s2 == null) ? 0 : s2.length();  return (len1 != len2) ? false : (len1 == 0) ? true : s1.equals(s2);}  }
class C{  void doOnce(){switch (mode.getSelectedIndex()) {default :    log.error("Did not expect selected mode " + mode.getSelectedIndex());  return;case 0:doReadingFromTimeFields();return;case 1:doMeasurementFromPositionFields();return;case 2:try {doLoadReadingFromFile();doReadingFromTimeFields();} catch (java.io.IOException e) {log.error("exception " + e);}return;case 3:try {doLoadMeasurementFromFile();} catch (java.io.IOException e) {log.error("exception " + e);}return;}}  }
class C{  public void clearOnForTestsOnly(Connection con,EventID eventId,Object callbackArg){  ClearOp.execute(con,this.pool,this.regionName,eventId,callbackArg);}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected int contains(double[] array,double val){  for (int i=0; i < array.length; i++)   if (array[i] == val)   return i;  return -1;}  }
class C{  @LargeTest public void testRsBench(){  if (mAct.mView.testIsFinished()) {    return;  } else {    fail("test didn't stop correctly");  }}  }
class C{  public static String arrayToString(float[] array,boolean breaks){  StringBuilder sb=new StringBuilder();  for (int x=0; x < array.length; x++) {    sb.append(x + ": " + array[x]);    if (breaks) {      sb.append("\n");    } else {      if (x % 8 == 7) {        sb.append("\n");      } else {        sb.append("\t");      }    }  }  return sb.toString();}  }
class C{  public synchronized void update(Graphics g){  if ((bufferg != null) && (graphics_on)) {    if (bgimage == null) {      bufferg.setColor(bgcolor);      bufferg.fillRect(0,0,width,height);    }    if (bgimage != null)     bufferg.drawImage(bgimage,0,0,this);    for (int i=0; i < simulated_objects.length; i++) {      if (simulated_objects[i] instanceof Simple) {        if (draw_trails) {          simulated_objects[i].drawTrail(bufferg,width,height,top,bottom,left,right);        }      }    }    for (int i=0; i < simulated_objects.length; i++) {      if (simulated_objects[i] instanceof Simple) {        if (draw_ids) {          simulated_objects[i].drawID(bufferg,width,height,top,bottom,left,right);        }        if (draw_robot_state) {          simulated_objects[i].drawState(bufferg,width,height,top,bottom,left,right);        }      }      if (draw_icons)       simulated_objects[i].drawIcon(bufferg,width,height,top,bottom,left,right); else       simulated_objects[i].draw(bufferg,width,height,top,bottom,left,right);      if (!(simulated_objects[i] instanceof Simple)) {        if (draw_object_state) {          simulated_objects[i].drawState(bufferg,width,height,top,bottom,left,right);        }      }    }    g.drawImage(buffer,0,0,this);  }  to_draw=false;}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  public static double logpdf(double val,double dof){  if (val <= 0 || val == Double.POSITIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  final double k=dof * .5;  return (dof - 1.0) * Math.log(val) + (1 - k) * MathUtil.LOG2 - GammaDistribution.logGamma(k) - val * val / 2.;}  }
class C{  public PointOctree(Vec3D o,float size){  this(null,o,size / 2);}  }
class C{  public AbstractPreferencePagePresenter(String title,ImageResource icon){  this(title,DEFAULT_CATEGORY,icon);}  }
class C{  public SimpleQueryStringBuilder(String text){  this.queryText=text;}  }
class C{  public ClassPath insertClassPath(ClassPath cp){  return source.insertClassPath(cp);}  }
class C{  public void runAsync(String localName,ModelService service,Map<String,? extends Object> params,GenericRequester requester,boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  if (Debug.timingOn()) {    UtilTimer.timerLog(localName + " / " + service.name,"ASync service started...",module);  }  if (Debug.verboseOn() || service.debug) {    Debug.logVerbose("[ServiceDispatcher.runAsync] : preparing service " + service.name + " ["+ service.location+ "/"+ service.invoke+ "] ("+ service.engineName+ ")",module);  }  Map<String,Object> context=new HashMap<String,Object>();  if (params != null) {    context.putAll(params);  }  Map<String,Object> result=new HashMap<String,Object>();  boolean isFailure=false;  boolean isError=false;  this.logService(localName,service,GenericEngine.ASYNC_MODE);  Locale locale=this.checkLocale(context);  DispatchContext ctx=localContext.get(localName);  GenericEngine engine=this.getGenericEngine(service.engineName);  Transaction parentTransaction=null;  boolean beganTrans=false;  try {    if (service.useTransaction) {      if (TransactionUtil.isTransactionInPlace()) {        if (service.requireNewTransaction) {          parentTransaction=TransactionUtil.suspend();          beganTrans=TransactionUtil.begin(service.transactionTimeout);        }      } else {        beganTrans=TransactionUtil.begin(service.transactionTimeout);      }      if (beganTrans && TransactionUtil.debugResources()) {        DebugXaResource dxa=new DebugXaResource(service.name);        try {          dxa.enlist();        } catch (        Exception e) {          Debug.logError(e,module);        }      }    }    try {      Map<String,List<ServiceEcaRule>> eventMap=ServiceEcaUtil.getServiceEventMap(service.name);      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"auth",ctx,context,result,isError,isFailure);      context=checkAuth(localName,context,service);      Object userLogin=context.get("userLogin");      if (service.auth && userLogin == null) {        throw new ServiceAuthException("User authorization is required for this service: " + service.name + service.debugInfo());      }      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);      isFailure=ModelService.RESPOND_FAIL.equals(result.get(ModelService.RESPONSE_MESSAGE));      isError=ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));      if (service.validate && !isError && !isFailure) {        try {          service.validate(context,ModelService.IN_PARAM,locale);        } catch (        ServiceValidationException e) {          Debug.logError(e,"Incoming service context (in runAsync: " + service.name + ") does not match expected requirements",module);          throw e;        }      }      if (!isError && !isFailure) {        if (requester != null) {          engine.runAsync(localName,service,context,requester,persist);        } else {          engine.runAsync(localName,service,context,persist);        }        engine.sendCallbacks(service,context,GenericEngine.ASYNC_MODE);      }      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service finished...",module);      }    } catch (    Throwable t) {      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service failed...",module);      }      String errMsg="Service [" + service.name + "] threw an unexpected exception/error";      Debug.logError(t,errMsg,module);      engine.sendCallbacks(service,context,t,GenericEngine.ASYNC_MODE);      try {        TransactionUtil.rollback(beganTrans,errMsg,t);      } catch (      GenericTransactionException te) {        Debug.logError(te,"Cannot rollback transaction",module);      }      if (t instanceof ServiceAuthException) {        throw (ServiceAuthException)t;      } else       if (t instanceof ServiceValidationException) {        throw (ServiceValidationException)t;      } else       if (t instanceof GenericServiceException) {        throw (GenericServiceException)t;      } else {        throw new GenericServiceException("Service [" + service.name + "] Failed"+ service.debugInfo(),t);      }    } finally {      try {        TransactionUtil.commit(beganTrans);      } catch (      GenericTransactionException e) {        Debug.logError(e,"Could not commit transaction",module);        throw new GenericServiceException("Commit transaction failed");      }    }  } catch (  GenericTransactionException se) {    Debug.logError(se,"Problems with the transaction",module);    throw new GenericServiceException("Problems with the transaction: " + se.getMessage() + "; See logs for more detail");  } finally {    if (parentTransaction != null) {      try {        TransactionUtil.resume(parentTransaction);      } catch (      GenericTransactionException ise) {        Debug.logError(ise,"Trouble resuming parent transaction",module);        throw new GenericServiceException("Resume transaction exception: " + ise.getMessage() + "; See logs for more detail");      }    }  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public void commitIngestedCG(IngestionRequestContext requestContext,UnManagedVolume unManagedVolume) throws Exception {  VolumeIngestionContext volumeContext=requestContext.getVolumeContext();  if (!volumeContext.getCGObjectsToCreateMap().isEmpty()) {    for (    Entry<String,BlockConsistencyGroup> cgEntry : volumeContext.getCGObjectsToCreateMap().entrySet()) {      BlockConsistencyGroup cg=cgEntry.getValue();      Collection<BlockObject> allCGBlockObjects=VolumeIngestionUtil.getAllBlockObjectsInCg(cg,requestContext);      Collection<String> nativeGuids=transform(allCGBlockObjects,fctnBlockObjectToNativeGuid());      _logger.info("Decorating CG {} with blockObjects {}",cgEntry.getKey(),nativeGuids);      rpCGDecorator.setDbClient(_dbClient);      rpCGDecorator.decorate(cg,unManagedVolume,allCGBlockObjects,requestContext);    }  }  persistConsistencyGroups(volumeContext.getCGObjectsToCreateMap().values());  if (!volumeContext.getUmCGObjectsToUpdate().isEmpty()) {    _logger.info("updating {} unmanagedConsistencyGroups in db.");    _dbClient.updateObject(volumeContext.getUmCGObjectsToUpdate());  }}  }
class C{  public static void addPRCRecipe(ItemStack inputSolid,FluidStack inputFluid,GasStack inputGas,ItemStack outputSolid,GasStack outputGas,double extraEnergy,int ticks){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPRCRecipe",ItemStack.class,FluidStack.class,GasStack.class,ItemStack.class,GasStack.class,Double.TYPE,Integer.TYPE);    m.invoke(null,inputSolid,inputFluid,inputGas,outputSolid,outputGas,extraEnergy,ticks);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  protected void createHosts(){  this.hosts=new ArrayList<DTNHost>();  for (int i=1; i <= nrofGroups; i++) {    List<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();    Settings s=new Settings(GROUP_NS + i);    s.setSecondaryNamespace(GROUP_NS);    String gid=s.getSetting(GROUP_ID_S);    int nrofHosts=s.getInt(NROF_HOSTS_S);    int nrofInterfaces=s.getInt(NROF_INTERF_S);    int appCount;    MovementModel mmProto=(MovementModel)s.createIntializedObject(MM_PACKAGE + s.getSetting(MOVEMENT_MODEL_S));    MessageRouter mRouterProto=(MessageRouter)s.createIntializedObject(ROUTING_PACKAGE + s.getSetting(ROUTER_S));    s.ensurePositiveValue(nrofHosts,NROF_HOSTS_S);    s.ensurePositiveValue(nrofInterfaces,NROF_INTERF_S);    for (int j=1; j <= nrofInterfaces; j++) {      String intName=s.getSetting(INTERFACENAME_S + j);      Settings intSettings=new Settings(intName);      NetworkInterface iface=(NetworkInterface)intSettings.createIntializedObject(INTTYPE_PACKAGE + intSettings.getSetting(INTTYPE_S));      iface.setClisteners(connectionListeners);      iface.setGroupSettings(s);      interfaces.add(iface);    }    if (s.contains(APPCOUNT_S)) {      appCount=s.getInt(APPCOUNT_S);    } else {      appCount=0;    }    for (int j=1; j <= appCount; j++) {      String appname=null;      Application protoApp=null;      try {        appname=s.getSetting(GAPPNAME_S + j);        Settings t=new Settings(appname);        protoApp=(Application)t.createIntializedObject(APP_PACKAGE + t.getSetting(APPTYPE_S));        protoApp.setAppListeners(this.appListeners);        mRouterProto.addApplication(protoApp);      } catch (      SettingsError se) {        System.err.println("Failed to setup an application: " + se);        System.err.println("Caught at " + se.getStackTrace()[0]);        System.exit(-1);      }    }    if (mmProto instanceof MapBasedMovement) {      this.simMap=((MapBasedMovement)mmProto).getMap();    }    for (int j=0; j < nrofHosts; j++) {      ModuleCommunicationBus comBus=new ModuleCommunicationBus();      DTNHost host=new DTNHost(this.messageListeners,this.movementListeners,gid,interfaces,comBus,mmProto,mRouterProto);      hosts.add(host);    }  }}  }
class C{  @VisibleForTesting protected State buildPatch(com.vmware.xenon.common.TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new com.vmware.xenon.common.TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  private static SolrDocument convert(MetricTimeSeries timeSeries,boolean withData,boolean asJson){  SolrDocument doc=new SolrDocument();  if (withData) {    byte[] data;    timeSeries.sort();    if (asJson) {      data=new JsonMetricTimeSeriesSerializer().toJson(timeSeries);      doc.setField(ChronixQueryParams.DATA_AS_JSON,new String(data,Charset.forName("UTF-8")));    } else {      data=ProtoBufMetricTimeSeriesSerializer.to(timeSeries.points().iterator());      data=Compression.compress(data);      doc.addField(Schema.DATA,data);    }  }  timeSeries.attributes().forEach(null);  doc.addField(MetricTSSchema.METRIC,timeSeries.getMetric());  doc.addField(Schema.START,timeSeries.getStart());  doc.addField(Schema.END,timeSeries.getEnd());  return doc;}  }
class C{  protected final static long subMod3(final long x,long y){  y=y ^ 0xFFFFFFFFFFFFFFFFL;  long mask=x;  mask|=((x | y) << 1) & y;  mask&=0x5555555555555555L << 1;  mask|=mask >>> 1;  return x + y - mask;}  }
class C{  public static boolean exists(HttpServletRequest request,String parameter){  if (request == null || parameter == null)   return false;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(MobileEnv.ENCODING);  } catch (  Exception e) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + MobileEnv.ENCODING,e);  }  return exists(request.getParameter(parameter));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.LABELLED_STATEMENT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.LABELLED_STATEMENT__STATEMENT:  return statement != null;}return super.eIsSet(featureID);}  }
class C{  OFChannelHandler(@Nonnull IOFSwitchManager switchManager,@Nonnull INewOFConnectionListener newConnectionListener,@Nonnull ChannelPipeline pipeline,@Nonnull IDebugCounterService debugCounters,@Nonnull Timer timer){  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(newConnectionListener,"connectionOpenedListener");  Preconditions.checkNotNull(pipeline,"pipeline");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkNotNull(debugCounters,"debugCounters");  this.pipeline=pipeline;  this.debugCounters=debugCounters;  this.newConnectionListener=newConnectionListener;  this.counters=switchManager.getCounters();  this.state=new InitState();  this.timer=timer;  log.debug("constructor on OFChannelHandler {}",String.format("%08x",System.identityHashCode(this)));}  }
class C{  protected Object loadSpecial(ResultSet rs,int index) throws SQLException {  return null;}  }
class C{  @Override public boolean isEmpty(){  return (m_Root.getChildCount() == 0);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord)   setIsValid(true);  if (isValid())   setErrorMsg(null);  return true;}  }
class C{  public ExpandableListConnector(ExpandableListAdapter expandableListAdapter){  mExpGroupMetadataList=new ArrayList<GroupMetadata>();  setExpandableListAdapter(expandableListAdapter);}  }
class C{  public RemoteSageFile(String hostname,File file) throws IOException {  this(hostname,file,null);}  }
class C{  public void renameAttributeAt(int columnIndex,String newName){  ((DataTableModel)getModel()).renameAttributeAt(columnIndex,newName);}  }
class C{  public CreateIndexRequest source(XContentBuilder source){  return source(source.bytes());}  }
class C{  public static void testPubKeyCreateNeg() throws AssertFailException {  byte[] sec=BaseEncoding.base16().lowerCase().decode("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF".toLowerCase());  byte[] resultArr=NativeSecp256k1.computePubkey(sec);  String pubkeyString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(pubkeyString,"","testPubKeyCreateNeg");}  }
class C{  private void clearPhotonMapTextures(){  if (caps.GL_ARB_clear_texture) {    for (int i=0; i < photonMapTextures.length; i++) {      TextureInfo info=photonMapTextures[i];      ARBClearTexture.glClearTexImage(info.openGlHandle,0,GL_RG,GL_HALF_FLOAT,clearTexBuffer);    }  } else {    for (int i=0; i < photonMapTextures.length; i++) {      TextureInfo info=photonMapTextures[i];      int texBuffer=glGenBuffers();      glBindBuffer(GL_PIXEL_UNPACK_BUFFER,texBuffer);      int size=2 * 2 * info.textureWidth* info.textureHeight;      glBufferData(GL_PIXEL_UNPACK_BUFFER,size,GL_STATIC_DRAW);      glClearBufferSubData(GL_PIXEL_UNPACK_BUFFER,GL_RG16F,0,size,GL_RG,GL_HALF_FLOAT,(ByteBuffer)null);      glBindTexture(GL_TEXTURE_CUBE_MAP,info.openGlHandle);      for (int f=0; f < 6; f++) {        glTexSubImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + f,0,0,0,info.textureWidth,info.textureHeight,GL_RG,GL_HALF_FLOAT,0L);      }      glBindTexture(GL_TEXTURE_CUBE_MAP,0);      glBindBuffer(GL_PIXEL_UNPACK_BUFFER,0);      glDeleteBuffers(texBuffer);    }  }}  }
class C{  public static long generateNonce(){  long nonce=RANDOM.nextLong();  sKnownNonces.add(nonce);  return nonce;}  }
class C{  private static File resolveFile(File toAdjust){  if (!toAdjust.isAbsolute()) {    String installArea=System.getProperties().getProperty(PROP_INSTALL_AREA);    if (installArea != null) {      if (installArea.startsWith(FILE_SCHEME))       toAdjust=new File(installArea.substring(5),toAdjust.getPath()); else       if (new File(installArea).exists())       toAdjust=new File(installArea,toAdjust.getPath());    }  }  return toAdjust;}  }
class C{  public static void main(String[] args){  int result;  PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out,UTF_8));  PrintWriter err=new PrintWriter(new OutputStreamWriter(System.err,UTF_8));  try {    Main formatter=new Main(out,err,System.in);    result=formatter.format(args);  } catch (  UsageException e) {    err.print(e.getMessage());    result=0;  } finally {    err.flush();    out.flush();  }  System.exit(result);}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  IonBoolLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  @SuppressWarnings("unchecked") public void createStandardMBean(String implementationClassName,boolean isMXBean,ObjectName name) throws Exception {  createStandardMBean(implementationClassName,null,isMXBean,name);}  }
class C{  public static void adjustTextSize(TextView textView,int desiredWidth){  if (desiredWidth <= 0) {    desiredWidth=textView.getMeasuredWidth();    if (desiredWidth <= 0) {      Log.w("Utils","adjustTextSize: Not doing anything (measured width invalid)");      return;    }  }  desiredWidth*=0.8f;  Paint paint=new Paint();  Rect bounds=new Rect();  paint.setTypeface(textView.getTypeface());  float textSize=textView.getTextSize() * 2.0f;  paint.setTextSize(textSize);  String text=textView.getText().toString();  paint.getTextBounds(text,0,text.length(),bounds);  while (bounds.width() > desiredWidth) {    textSize--;    paint.setTextSize(textSize);    paint.getTextBounds(text,0,text.length(),bounds);  }  textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,textSize);}  }
class C{  public void testSharedMode() throws Exception {  processTest(DeploymentMode.SHARED);}  }
class C{  public Matrix4x3d invertOrtho(){  return invertOrtho(this);}  }
class C{  public void writeMap(File file,OsmMap map,BoundingBox bb){  try {    FileOutputStream fs=new FileOutputStream(file);    OutputStreamWriter writer=new OutputStreamWriter(new BufferedOutputStream(fs),"UTF-8");    writeMap(writer,map,bb);  } catch (  FileNotFoundException fnfe) {    LOG.warning("File does not exist " + file);  }catch (  UnsupportedEncodingException fnfe) {    LOG.warning("UTF-8 encoding not supported, sorry.");  }}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  private void updateAlertLists(Cluster cluster){  severeAlertList=new ArrayList<String>();  errorAlertsList=new ArrayList<String>();  warningAlertsList=new ArrayList<String>();  Cluster.Alert[] alertsList=cluster.getAlertsList();  for (  Cluster.Alert alert : alertsList) {    if (alert.getSeverity() == Cluster.Alert.SEVERE) {      if (errorAlertsList.contains(alert.getMemberName())) {        errorAlertsList.remove(alert.getMemberName());      } else       if (warningAlertsList.contains(alert.getMemberName())) {        warningAlertsList.remove(alert.getMemberName());      }      if (!severeAlertList.contains(alert.getMemberName())) {        severeAlertList.add(alert.getMemberName());      }    } else     if (alert.getSeverity() == Cluster.Alert.ERROR) {      if (!severeAlertList.contains(alert.getMemberName())) {        if (warningAlertsList.contains(alert.getMemberName())) {          warningAlertsList.remove(alert.getMemberName());        }        if (!errorAlertsList.contains(alert.getMemberName())) {          errorAlertsList.add(alert.getMemberName());        }      }    } else     if (alert.getSeverity() == Cluster.Alert.WARNING) {      if (!severeAlertList.contains(alert.getMemberName())) {        if (!errorAlertsList.contains(alert.getMemberName())) {          if (!warningAlertsList.contains(alert.getMemberName())) {            warningAlertsList.add(alert.getMemberName());          }        }      }    }  }}  }
class C{  private void parseMimeEntry(String entry){  entry=entry.trim();  if (entry.isEmpty() || entry.charAt(0) == '#')   return;  entry=entry.replaceAll("\\s*#.*","");  int equalIdx=entry.indexOf('=');  if (equalIdx > 0) {    final String TYPEEQUAL="type=";    String typeRegex="\\b" + TYPEEQUAL + "(\"\\p{Graph}+?/\\p{Graph}+?\"|\\p{Graph}+/\\p{Graph}+\\b)";    Pattern typePattern=Pattern.compile(typeRegex);    Matcher typeMatcher=typePattern.matcher(entry);    if (typeMatcher.find()) {      String type=typeMatcher.group().substring(TYPEEQUAL.length());      if (type.charAt(0) == '"') {        type=type.substring(1,type.length() - 1);      }      final String EXTEQUAL="exts=";      String extRegex="\\b" + EXTEQUAL + "(\"[\\p{Graph}\\p{Blank}]+?\"|\\p{Graph}+\\b)";      Pattern extPattern=Pattern.compile(extRegex);      Matcher extMatcher=extPattern.matcher(entry);      if (extMatcher.find()) {        String exts=extMatcher.group().substring(EXTEQUAL.length());        if (exts.charAt(0) == '"') {          exts=exts.substring(1,exts.length() - 1);        }        String[] extList=exts.split("[\\p{Blank}\\p{Punct}]+");        for (        String ext : extList) {          putIfAbsent(ext,type);        }      }    }  } else {    String[] elements=entry.split("\\s+");    int i=1;    while (i < elements.length) {      putIfAbsent(elements[i++],elements[0]);    }  }}  }
class C{  public KafkaMessageListenerContainer(ConsumerFactory<K,V> consumerFactory,ContainerProperties containerProperties){  this(consumerFactory,containerProperties,(TopicPartitionInitialOffset[])null);}  }
class C{  @Override public void start(Xid xid,int flags) throws XAException {  if (isDebugEnabled()) {    debugCode("start(" + JdbcXid.toString(xid) + ", "+ quoteFlags(flags)+ ");");  }  if (flags == TMRESUME) {    return;  }  if (flags == TMJOIN) {    if (currentTransaction != null && !currentTransaction.equals(xid)) {      throw new XAException(XAException.XAER_RMERR);    }  } else   if (currentTransaction != null) {    throw new XAException(XAException.XAER_NOTA);  }  try {    physicalConn.setAutoCommit(false);  } catch (  SQLException e) {    throw convertException(e);  }  currentTransaction=xid;  prepared=false;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public KeyIdentifier(byte[] octetString){  this.octetString=octetString.clone();}  }
class C{  public RelationalExpression createRelationalExpression(){  RelationalExpressionImpl relationalExpression=new RelationalExpressionImpl();  return relationalExpression;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(REQUIRE)) {    require=-1;  } else   if (name.equalsIgnoreCase(INHIBIT)) {    inhibit=-1;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:PolicyConstraints.");  }  encodeThis();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:    return ((InternalEList<?>)getTypeArgs()).basicRemove(otherEnd,msgs);case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET:  return basicSetTarget(null,msgs);case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS:return ((InternalEList<?>)getArguments()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void updateCoords(final double x,final double y){  cx=x;  cy=y;  if (decode_pdf.getDisplayView() != Display.SINGLE_PAGE) {    if (JavaFXMouseSelector.activateMultipageHighlight && (decode_pdf.getDisplayView() == Display.FACING || decode_pdf.getDisplayView() == Display.CONTINUOUS || decode_pdf.getDisplayView() == Display.CONTINUOUS_FACING)) {      if ((decode_pdf.getDisplayView() == Display.FACING) && (decode_pdf.getPageNumber() < decode_pdf.getPageCount())) {        final int xOffset=decode_pdf.getPdfPageData().getCropBoxWidth(decode_pdf.getPageNumber());        if (cx >= xOffset) {          cx-=xOffset;        }      }    } else {      cx=0;      cy=0;    }  }  final int pagenumber=decode_pdf.getPageNumber();  final int crx=decode_pdf.getPdfPageData().getCropBoxX(pagenumber);  final int cry=decode_pdf.getPdfPageData().getCropBoxY(pagenumber);  final Bounds pdfBounds=decode_pdf.getBoundsInLocal();  if ((Values.isProcessing()) || (commonValues.getSelectedFile() == null)) {    currentGUI.setCoordText("  X: " + " Y: " + ' ' + ' ');  } else   if (cx >= 0 && cy >= 0 && cx <= pdfBounds.getMaxX() - currentGUI.getDropShadowDepth() && cy <= pdfBounds.getMaxY() - currentGUI.getDropShadowDepth()) {    currentGUI.setCoordText("  X: " + (cx + crx) + " Y: "+ (cy + cry)+ ' '+ ' '+ message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.369 -0500",hash_original_method="66D9912335771E2036ED62B64CF3BC86",hash_generated_method="268D0D68A247442B9D4A5C3F6F9FBAF9") public int executeUpdateDelete(){  mDatabase.addTaint(this.getTaint());  int ret=this.getTaintInt();  ret+=mDatabase.getTaintInt();  return ret;}  }
class C{  public void normalize(){  for (int i=0; i < 2; i++) {    if (!isNull(i)) {      int minDepth=depth[i][1];      if (depth[i][2] < minDepth)       minDepth=depth[i][2];      if (minDepth < 0)       minDepth=0;      for (int j=1; j < 3; j++) {        int newValue=0;        if (depth[i][j] > minDepth)         newValue=1;        depth[i][j]=newValue;      }    }  }}  }
class C{  @org.junit.Test public void testWhatIs(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("What is love?");  String response=waitForOutput(output);  checkResponse(response,"Strong affection.");  text.input("love is what");  response=waitForOutput(output);  checkResponse(response,"Strong affection.");  text.input("can you tell me about love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("tell me about love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("do you know what love is");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("do you know anything about love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("tell me something about love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("google love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("define love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("search love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("please tell me what love is");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("i want to know about love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("what do you think of love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("what does love mean");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  text.input("I would like to know love");  response=waitForOutput(output);  if (!response.equals("Strong affection.")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public BufferOverflowException(){}  }
class C{  List<Type> attribAnyTypes(List<JCExpression> trees,Env<AttrContext> env){  ListBuffer<Type> argtypes=new ListBuffer<Type>();  for (List<JCExpression> l=trees; l.nonEmpty(); l=l.tail)   argtypes.append(attribType(l.head,env));  return argtypes.toList();}  }
class C{  public static HTTPResponse post(URL url,String username,String password,long timeout,boolean redirect,String charset,String useragent,ProxyData proxy,lucee.commons.net.http.Header[] headers) throws IOException {  HttpPost post=new HttpPost(url.toExternalForm());  return _invoke(url,post,username,password,timeout,redirect,charset,useragent,proxy,headers,null);}  }
class C{  protected TXCommitMessage buildMessage(){  TXCommitMessage msg=new TXCommitMessage(this.proxy.getTxId(),this.proxy.getTxMgr().getDM(),this);  Iterator<Map.Entry<LocalRegion,TXRegionState>> it=this.regions.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<LocalRegion,TXRegionState> me=it.next();    LocalRegion r=me.getKey();    TXRegionState txrs=me.getValue();    txrs.buildMessage(r,msg);  }  return msg;}  }
class C{  private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){  Way osmWay=new Way();  StringJoiner stringJoiner=new StringJoiner(";");  for (  OSMEntity.Tag tag : iosmWay.tags) {    osmWay.addTag(tag.key,tag.value);    stringJoiner.add(tag.key + "=" + tag.value);  }  if (newTag != null && newValue != null) {    osmWay.addTag(newTag,newValue);    stringJoiner.add(newTag + "=" + newValue);  }  Set<EdgeStore.EdgeFlag> forwardFiltered;  Set<EdgeStore.EdgeFlag> backwardFiltered;  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);  forwardFiltered=filterFlags(roadPermission.forward);  backwardFiltered=filterFlags(roadPermission.backward);  String tags="Tags: " + stringJoiner.toString();  assertEquals(tags,forwardExpected,forwardFiltered);  assertEquals(tags,backwardExpected,backwardFiltered);  return roadPermission;}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount,int keyLength){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (keyLength <= 0) {    throw new IllegalArgumentException("keyLength <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=keyLength;}  }
class C{  public void addPeakThreadCount(int peakThreadCount){  this.totalPeakThreadCount+=peakThreadCount;}  }
class C{  public TitlePaneIconifyButtonWindowMinimizedState(){  super("WindowMinimized");}  }
class C{  public PricedProductRole copy(PricedParameter pp){  return copy(null,pp,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String rootName;  doc=(Document)load("hc_staff",false);  root=doc.getDocumentElement();  rootName=root.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",rootName);  } else {    assertEqualsAutoCase("element","docElemName","html",rootName);  }}  }
class C{  public DelegateFS(Configuration cfg) throws IOException, URISyntaxException {  super(LOCAL_FS_URI,new HadoopRawLocalFileSystem(),cfg,LOCAL_FS_URI.getScheme(),false);}  }
class C{  public boolean isLotMandatory(){  Object oo=get_Value(COLUMNNAME_IsLotMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void discoverOnAllPorts(){  log.info("Sending LLDP packets out of all the enabled ports");  for (  DatapathId sw : switchService.getAllSwitchDpids()) {    IOFSwitch iofSwitch=switchService.getSwitch(sw);    if (iofSwitch == null)     continue;    if (iofSwitch.getEnabledPorts() != null) {      for (      OFPortDesc ofp : iofSwitch.getEnabledPorts()) {        if (isLinkDiscoverySuppressed(sw,ofp.getPortNo())) {          continue;        }        sendDiscoveryMessage(sw,ofp.getPortNo(),true,false);        NodePortTuple npt=new NodePortTuple(sw,ofp.getPortNo());        addToMaintenanceQueue(npt);      }    }  }}  }
class C{  public void addFriend(String friend){  try {    getConnection().createFriendship(friend);  } catch (  TwitterException exception) {    log(exception);  }}  }
class C{  public String[] convertTypeNamesToSigs(char[][] typeNames){  if (typeNames == null)   return CharOperation.NO_STRINGS;  int n=typeNames.length;  if (n == 0)   return CharOperation.NO_STRINGS;  String[] typeSigs=new String[n];  for (int i=0; i < n; ++i) {    char[] typeSig=Signature.createCharArrayTypeSignature(typeNames[i],false);    StringBuffer simpleTypeSig=null;    int start=0;    int dot=-1;    int length=typeSig.length;    for (int j=0; j < length; j++) {switch (typeSig[j]) {case Signature.C_UNRESOLVED:        if (simpleTypeSig != null)         simpleTypeSig.append(typeSig,start,j - start);      start=j;    break;case Signature.C_DOT:  dot=j;break;case Signature.C_GENERIC_START:int matchingEnd=findMatchingGenericEnd(typeSig,j + 1);if (matchingEnd > 0 && matchingEnd + 1 < length && typeSig[matchingEnd + 1] == Signature.C_DOT) {if (simpleTypeSig == null) simpleTypeSig=new StringBuffer().append(typeSig,0,start);simpleTypeSig.append(Signature.C_UNRESOLVED);start=j=matchingEnd + 2;break;}case Signature.C_NAME_END:if (dot > start) {if (simpleTypeSig == null) simpleTypeSig=new StringBuffer().append(typeSig,0,start);simpleTypeSig.append(Signature.C_UNRESOLVED);simpleTypeSig.append(typeSig,dot + 1,j - dot - 1);start=j;}break;}}if (simpleTypeSig == null) {typeSigs[i]=new String(typeSig);} else {simpleTypeSig.append(typeSig,start,length - start);typeSigs[i]=simpleTypeSig.toString();}}return typeSigs;}  }
class C{  public void addSelectionRow(int row){  int[] rows={row};  addSelectionRows(rows);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  return null;}  }
class C{  void visit(TemplateElement element) throws IOException, TemplateException {  pushElement(element);  try {    TemplateElement[] templateElementsToVisit=element.accept(this);    if (templateElementsToVisit != null) {      for (      TemplateElement el : templateElementsToVisit) {        if (el == null) {          break;        }        visit(el);      }    }  } catch (  TemplateException te) {    handleTemplateException(te);  } finally {    popElement();  }}  }
class C{  @Override public OTPUserRecord readOtpUserConfiguration(UserIdentity userIdentity,String userGUID) throws PwmUnrecoverableException {  Configuration config=getPwmApplication().getConfig();  String ldapStorageAttribute=config.readSettingAsString(PwmSetting.OTP_SECRET_LDAP_ATTRIBUTE);  if (ldapStorageAttribute == null || ldapStorageAttribute.length() < 1) {    final String errorMsg="ldap storage attribute is not configured, unable to read OTP secret";    final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_INVALID_CONFIG,errorMsg);    throw new PwmUnrecoverableException(errorInformation);  }  OTPUserRecord otp=null;  try {    final ChaiUser theUser=pwmApplication.getProxiedChaiUser(userIdentity);    String value=theUser.readStringAttribute(ldapStorageAttribute);    if (config.readSettingAsBoolean(PwmSetting.OTP_SECRET_ENCRYPT)) {      value=decryptAttributeValue(value);    }    if (value != null) {      otp=decomposeOtpAttribute(value);    }  } catch (  ChaiOperationException e) {    final String errorMsg="unexpected LDAP error reading responses: " + e.getMessage();    final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);    throw new PwmUnrecoverableException(errorInformation);  }catch (  ChaiUnavailableException e) {    final String errorMsg="unexpected LDAP error reading responses: " + e.getMessage();    final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);    throw new PwmUnrecoverableException(errorInformation);  }catch (  PwmOperationalException e) {    final String errorMsg="unexpected error reading responses: " + e.getMessage();    final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);    throw new PwmUnrecoverableException(errorInformation);  }  return otp;}  }
class C{  private void onMouseOut(){  if (popupMenu != null) {    return;  }  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());}  }
class C{  public static <E>void serialize(List<E> list,OutputStream os,Class<E> jsonObjectClass) throws IOException {  mapperFor(jsonObjectClass).serialize(list,os);}  }
class C{  public static String phenotypeDescription(int phenotype){  if (phenotype == GENE_OUTPUT)   return "output";  if (phenotype == GENE_FUNCTION)   return "function";  return "function-argument";}  }
class C{  static File mapAlternativeName(File lib){  String name=lib.toString();  int index=name.lastIndexOf('.');  if (index < 0) {    return null;  }  return new File(name.substring(0,index) + ".jnilib");}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x,long length) throws SQLException {  updateClob(columnLabel,x,length);}  }
class C{  public byte[] encode(StunStack stunStack,byte[] content,int offset,int length){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  byte[] key=null;  char msgType=(char)(((content[0] & 0xFF) << 8) | (content[1] & 0xFF));  if (Message.isRequestType(msgType)) {    key=stunStack.getCredentialsManager().getRemoteKey(username,media);  } else   if (Message.isSuccessResponseType(msgType) || Message.isErrorResponseType(msgType)) {    key=stunStack.getCredentialsManager().getLocalKey(username);  }  this.hmacSha1Content=calculateHmacSha1(content,offset,length,key);  System.arraycopy(hmacSha1Content,0,binValue,4,getDataLength());  return binValue;}  }
class C{  ITypeBinding resolveTypeParameter(TypeParameter typeParameter){  return null;}  }
class C{  protected void doProcessRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String data=request.getParameter("request");  String signature=new MessageSigner("private-key.pem").sign(data);  response.setContentType("text/plain");  PrintWriter out=response.getWriter();  out.write(signature);  out.flush();  out.close();}  }
class C{  @Override protected void initIconFamiliesPanel(){  _iconFamilyPanel=new JPanel();  _iconFamilyPanel.setLayout(new BoxLayout(_iconFamilyPanel,BoxLayout.Y_AXIS));  HashMap<String,HashMap<String,HashMap<String,NamedIcon>>> families=ItemPalette.getLevel4FamilyMaps(_itemType);  if (families != null && families.size() > 0) {    JPanel familyPanel=makeFamilyButtons(families.keySet().iterator(),(_iconGroupsMap == null));    if (_iconGroupsMap == null) {      _iconGroupsMap=families.get(_family);    }    addFamilyPanels(familyPanel);    if (_iconGroupsMap == null) {      log.error("_iconGroupsMap is null in initIconFamiliesPanel");      _family=null;    } else {      addIcons2Panel(_iconGroupsMap);      makeDndIconPanel(_iconGroupsMap.get("ClearTrack"),"TurnoutStateClosed");    }  } else {    familiesMissing();  }  if (log.isDebugEnabled()) {    log.debug("initIconFamiliesPanel done");  }}  }
class C{  private void createCheckpoint(int stringId){  getDelegator().getUndo().createCheckpoint(Application.mainActivity.getResources().getString(stringId));}  }
class C{  public boolean isAtEnd(){  return _atEnd;}  }
class C{  private int updateIndexes(int alignment,int nbrOfBits,int capacity){  if (nbrOfBits > capacity) {    throw new java.lang.IllegalArgumentException("nbrOfBits: " + nbrOfBits + " exceeds capacity: "+ capacity);  }  if (_resetIndex) {    _bitIndex=0;  }  alignment=isPacked() ? 1 : alignment;  int offset=(_bitIndex / (alignment << 3)) * alignment;  int usedBits=_bitIndex - (offset << 3);  if ((capacity < usedBits + nbrOfBits) || ((nbrOfBits == 0) && (usedBits != 0))) {    offset+=alignment;    _bitIndex=(offset << 3) + nbrOfBits;  } else {    _bitIndex+=nbrOfBits;  }  if (_bitsUsed < _bitIndex) {    _bitsUsed=_bitIndex;  }  if (_alignment < alignment) {    _alignment=alignment;  }  return offset;}  }
class C{  public LatLon(Angle latitude,Angle longitude){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  void showConfigUi(AccessPoint selectedAccessPoint,boolean edit){  mScreenState=SCREEN_STATE_EDITING;  if (selectedAccessPoint != null && (selectedAccessPoint.security == AccessPoint.SECURITY_WEP || selectedAccessPoint.security == AccessPoint.SECURITY_PSK)) {    edit=true;  }  mWifiSettings.pauseWifiScan();  mWifiSettingsFragmentLayout.setVisibility(View.GONE);  mConnectingStatusLayout.setVisibility(View.GONE);  final ViewGroup parent=(ViewGroup)findViewById(R.id.wifi_config_ui);  parent.setVisibility(View.VISIBLE);  parent.removeAllViews();  mWifiConfig=new WifiConfigUiForSetupWizardXL(this,parent,selectedAccessPoint,edit);  if (selectedAccessPoint == null) {    showAddNetworkTitle();    mConnectButton.setVisibility(View.VISIBLE);    showDisconnectedProgressBar();    showEditingButtonState();  } else   if (selectedAccessPoint.security == AccessPoint.SECURITY_NONE) {    mNetworkName=selectedAccessPoint.getTitle().toString();    mConnectButton.performClick();  } else {    mNetworkName=selectedAccessPoint.getTitle().toString();    showEditingTitle();    showDisconnectedProgressBar();    showEditingButtonState();    if (selectedAccessPoint.security == AccessPoint.SECURITY_EAP) {      onEapNetworkSelected();    } else {      mConnectButton.setVisibility(View.VISIBLE);      mConnectButton.setText(R.string.wifi_connect);      mBackButton.setText(R.string.wifi_setup_cancel);    }  }}  }
class C{  protected TraceReactionWillFireImpl(){  super();}  }
class C{  protected <T extends Holiday>boolean isValid(T h,int year){  return isValidInYear(h,year) && isValidForCycle(h,year);}  }
class C{  public final void testClone() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr1=new PKIXCertPathValidatorResult(ta,TestUtils.getPolicyTree(),testPublicKey);  PKIXCertPathValidatorResult vr2=(PKIXCertPathValidatorResult)vr1.clone();  assertNotSame("notSame",vr1,vr2);  assertSame("trustAncor",vr1.getTrustAnchor(),vr2.getTrustAnchor());  assertSame("policyTree",vr1.getPolicyTree(),vr2.getPolicyTree());  assertSame("publicKey",vr1.getPublicKey(),vr2.getPublicKey());  byte[] encoding={0x01};  MyPKIXCertPathBuilderResult my=new MyPKIXCertPathBuilderResult(ta,TestUtils.getPolicyTree(),testPublicKey,encoding);  MyPKIXCertPathBuilderResult myClone=(MyPKIXCertPathBuilderResult)my.clone();  assertSame(my.getPolicyTree(),myClone.getPolicyTree());  assertSame(my.getPublicKey(),myClone.getPublicKey());  assertSame(my.getTrustAnchor(),myClone.getTrustAnchor());  assertSame(my.enc,myClone.enc);}  }
class C{  private static int fromSentenceOffset(int offset){  return (-1 * offset) - 1;}  }
class C{  public boolean addAll(int[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (add(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableLengthListValue toLengthList=(AnimatableLengthListValue)to;  AnimatableLengthListValue accLengthList=(AnimatableLengthListValue)accumulation;  boolean hasTo=to != null;  boolean hasAcc=accumulation != null;  boolean canInterpolate=!(hasTo && toLengthList.lengthTypes.length != lengthTypes.length) && !(hasAcc && accLengthList.lengthTypes.length != lengthTypes.length);  short[] baseLengthTypes;  float[] baseLengthValues;  if (!canInterpolate && hasTo && interpolation >= 0.5) {    baseLengthTypes=toLengthList.lengthTypes;    baseLengthValues=toLengthList.lengthValues;  } else {    baseLengthTypes=lengthTypes;    baseLengthValues=lengthValues;  }  int len=baseLengthTypes.length;  AnimatableLengthListValue res;  if (result == null) {    res=new AnimatableLengthListValue(target);    res.lengthTypes=new short[len];    res.lengthValues=new float[len];  } else {    res=(AnimatableLengthListValue)result;    if (res.lengthTypes == null || res.lengthTypes.length != len) {      res.lengthTypes=new short[len];      res.lengthValues=new float[len];    }  }  res.hasChanged=percentageInterpretation != res.percentageInterpretation;  res.percentageInterpretation=percentageInterpretation;  for (int i=0; i < len; i++) {    float toV=0, accV=0;    short newLengthType=baseLengthTypes[i];    float newLengthValue=baseLengthValues[i];    if (canInterpolate) {      if (hasTo && !AnimatableLengthValue.compatibleTypes(newLengthType,percentageInterpretation,toLengthList.lengthTypes[i],toLengthList.percentageInterpretation) || hasAcc && !AnimatableLengthValue.compatibleTypes(newLengthType,percentageInterpretation,accLengthList.lengthTypes[i],accLengthList.percentageInterpretation)) {        newLengthValue=target.svgToUserSpace(newLengthValue,newLengthType,percentageInterpretation);        newLengthType=SVGLength.SVG_LENGTHTYPE_NUMBER;        if (hasTo) {          toV=to.target.svgToUserSpace(toLengthList.lengthValues[i],toLengthList.lengthTypes[i],toLengthList.percentageInterpretation);        }        if (hasAcc) {          accV=accumulation.target.svgToUserSpace(accLengthList.lengthValues[i],accLengthList.lengthTypes[i],accLengthList.percentageInterpretation);        }      } else {        if (hasTo) {          toV=toLengthList.lengthValues[i];        }        if (hasAcc) {          accV=accLengthList.lengthValues[i];        }      }      newLengthValue+=interpolation * (toV - newLengthValue) + multiplier * accV;    }    if (!res.hasChanged) {      res.hasChanged=newLengthType != res.lengthTypes[i] || newLengthValue != res.lengthValues[i];    }    res.lengthTypes[i]=newLengthType;    res.lengthValues[i]=newLengthValue;  }  return res;}  }
class C{  private void addSuggestedBrandOwners(){  Activity activity=getActivity();  if (brandOwner == null || activity == null) {    return;  }  String[] allBrandOwners=allBrandOwnersLoaded ? ObjectCache.getBrandOwners(activity,client,true,false) : null;  BrandOwnerAdapter brandOwnerAdapter=new BrandOwnerAdapter(activity,R.layout.dropdown_brand_owner_item,suggestedBrandOwners,allBrandOwners);  brandOwner.setAdapter(brandOwnerAdapter);}  }
class C{  public void selectAll(){  selectAll(true);}  }
class C{  public ImageInfo inspectImage(String image) throws IOException {  return doInspectImage(image,dockerDaemonUri);}  }
class C{  public DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException {  BitMatrix matrix=image.getBlackMatrix();  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);  ResultPoint[] vertices=findVertices(matrix,tryHarder);  if (vertices == null) {    vertices=findVertices180(matrix,tryHarder);    if (vertices != null) {      correctCodeWordVertices(vertices,true);    }  } else {    correctCodeWordVertices(vertices,false);  }  if (vertices == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleWidth=computeModuleWidth(vertices);  if (moduleWidth < 1.0f) {    throw NotFoundException.getNotFoundInstance();  }  int dimension=computeDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  if (dimension < 1) {    throw NotFoundException.getNotFoundInstance();  }  int ydimension=computeYDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  ydimension=ydimension > dimension ? ydimension : dimension;  BitMatrix bits=sampleGrid(matrix,vertices[4],vertices[5],vertices[6],vertices[7],dimension,ydimension);  return new DetectorResult(bits,new ResultPoint[]{vertices[5],vertices[4],vertices[6],vertices[7]});}  }
class C{  public boolean isBinaryCoalescent(){  if (!intervalsKnown) {    calculateIntervals();  }  for (int i=0; i < intervalCount; i++) {    if (getCoalescentEvents(i) > 0) {      if (getCoalescentEvents(i) != 1)       return false;    }  }  return true;}  }
class C{  public void postVisit(TextEdit edit){}  }
class C{  @Override public Bitmap cloneBitmap(){  return Bitmap.createBitmap(mBitmap);}  }
class C{  private void onBluetoothBondStateChange(Context context,Intent intent){  Log.d(TAG,"Bond state change notification received.");}  }
class C{  public boolean containsUnknownElement(){  return this.lengthUnknownElement() > 0;}  }
class C{  public Matrix4x3d m21(double m21){  this.m21=m21;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  @Override public void flush() throws IOException {  OutputStream stream=getStream();  if (stream == null) {    return;  }synchronized (stream) {    stream.flush();  }}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void commit(boolean onSave){  final String comments=FormHelper.trimTrailingSpaces(commentsSource.getDocument().get());  getModel().setAttribute(MODEL_COMMENTS,comments);  String closedFormula=FormHelper.trimTrailingSpaces(this.specSource.getDocument().get());  getModel().setAttribute(MODEL_BEHAVIOR_CLOSED_SPECIFICATION,closedFormula);  String initFormula=FormHelper.trimTrailingSpaces(this.initFormulaSource.getDocument().get());  getModel().setAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT,initFormula);  String nextFormula=FormHelper.trimTrailingSpaces(this.nextFormulaSource.getDocument().get());  getModel().setAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT,nextFormula);  int specType;  if (this.closedFormulaRadio.getSelection()) {    specType=MODEL_BEHAVIOR_TYPE_SPEC_CLOSED;  } else   if (this.initNextFairnessRadio.getSelection()) {    specType=MODEL_BEHAVIOR_TYPE_SPEC_INIT_NEXT;  } else   if (this.noSpecRadio.getSelection()) {    specType=MODEL_BEHAVIOR_TYPE_NO_SPEC;  } else {    specType=MODEL_BEHAVIOR_TYPE_DEFAULT;  }  getModel().setAttribute(MODEL_BEHAVIOR_SPEC_TYPE,specType);  getModel().setAttribute(LAUNCH_NUMBER_OF_WORKERS,workers.getSelection());  int maxHeapSizeValue=TLCUIActivator.getDefault().getPreferenceStore().getInt(ITLCPreferenceConstants.I_TLC_MAXIMUM_HEAP_SIZE_DEFAULT);  maxHeapSizeValue=maxHeapSize.getSelection();  getModel().setAttribute(LAUNCH_MAX_HEAP_SIZE,maxHeapSizeValue);  boolean recover=this.checkpointButton.getSelection();  getModel().setAttribute(LAUNCH_RECOVER,recover);  boolean checkDeadlock=this.checkDeadlockButton.getSelection();  getModel().setAttribute(MODEL_CORRECTNESS_CHECK_DEADLOCK,checkDeadlock);  String distributed=this.distributedCombo.getItem(this.distributedCombo.getSelectionIndex());  getModel().setAttribute(LAUNCH_DISTRIBUTED,distributed);  String resultMailAddress=this.resultMailAddressText.getText();  getModel().setAttribute(LAUNCH_DISTRIBUTED_RESULT_MAIL_ADDRESS,resultMailAddress);  getModel().setAttribute(LAUNCH_DISTRIBUTED_FPSET_COUNT,distributedFPSetCountSpinner.getSelection());  getModel().setAttribute(LAUNCH_DISTRIBUTED_NODES_COUNT,distributedNodesCountSpinner.getSelection());  final String iface=this.networkInterfaceCombo.getItem(this.networkInterfaceCombo.getSelectionIndex());  getModel().setAttribute(LAUNCH_DISTRIBUTED_INTERFACE,iface);  List<String> serializedList=FormHelper.getSerializedInput(invariantsTable);  getModel().setAttribute(MODEL_CORRECTNESS_INVARIANTS,serializedList);  serializedList=FormHelper.getSerializedInput(propertiesTable);  getModel().setAttribute(MODEL_CORRECTNESS_PROPERTIES,serializedList);  List<String> constants=FormHelper.getSerializedInput(constantTable);  getModel().setAttribute(MODEL_PARAMETER_CONSTANTS,constants);  String variables=ModelHelper.createVariableList(SemanticHelper.getRootModuleNode());  getModel().setAttribute(MODEL_BEHAVIOR_VARS,variables);  super.commit(onSave);}  }
class C{  public void shutdown(){  mTts.shutdown();  mAudioPauser.resume();}  }
class C{  public static BarSize newInstance(Integer value){  final BarSize returnInstance=new BarSize();  if (value > 3600)   value=1;  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public void readFromFile(final boolean keepSelection){  try {    ComponentPtr[] selection=null;    Map<String,String> tabbedPaneSelectedTabs=null;    if (keepSelection) {      selection=SelectionState.getSelection(this);      tabbedPaneSelectedTabs=saveTabbedPaneSelectedTabs();    }    Locale oldLocale=null;    if (myRootContainer != null) {      oldLocale=myRootContainer.getStringDescriptorLocale();    }    final String text=myDocument.getText();    final ClassLoader classLoader=LoaderFactory.getInstance(getProject()).getLoader(myFile);    final LwRootContainer rootContainer=Utils.getRootContainer(text,new CompiledClassPropertiesProvider(classLoader));    final RadRootContainer container=XmlReader.createRoot(this,rootContainer,classLoader,oldLocale);    setRootContainer(container);    if (keepSelection) {      SelectionState.restoreSelection(this,selection);      restoreTabbedPaneSelectedTabs(tabbedPaneSelectedTabs);    }    myInvalid=false;    myCardLayout.show(myCardPanel,CARD_VALID);    refresh();  } catch (  Exception exc) {    Throwable original=exc;    while (original instanceof InvocationTargetException) {      original=original.getCause();    }    showInvalidCard(original);  }catch (  final LinkageError exc) {    showInvalidCard(exc);  }}  }
class C{  public void addTransform(String transformURI) throws TransformationException {  try {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Transforms.addTransform(" + transformURI + ")");    }    Transform transform=new Transform(this.doc,transformURI);    this.addTransform(transform);  } catch (  InvalidTransformException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  @Override public void startUp() throws HaskellException {  if (this.ghci != null) {    this.ghci.close();  }  this.ghci=evaluatorFactory(pickBackend());}  }
class C{  public Object parseValue(final String text){  for (int i=0; i < formats.length; i++) {    try {      final Format f=formats[i];      if (f instanceof DateFormat) {        return ((DateFormat)f).parse(text);      } else       if (f instanceof NumberFormat) {        return ((NumberFormat)f).parse(text);      } else       throw new AssertionError();    } catch (    NumberFormatException ex) {    }catch (    ParseException ex) {    }  }  return text;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public static double round(double number,int nDigits){  return (double)Math.round(number * Math.pow(10,nDigits)) / Math.pow(10,nDigits);}  }
class C{  protected RegisterPriority registerPriorityOfOutputOperand(LIRInstruction op){  if (op instanceof ValueMoveOp) {    ValueMoveOp move=(ValueMoveOp)op;    if (optimizeMethodArgument(move.getInput())) {      return RegisterPriority.None;    }  }  return RegisterPriority.MustHaveRegister;}  }
class C{  @Override public boolean shouldNotBeLogged(){  return true;}  }
class C{  public DefaultEntityViewInfo createPoiInfo(float minScale,float minNameScale,int printOrder,UColor nameColor,EntityIcon icon,boolean isWayIcon){  DefaultEntityViewInfo result=createDefaultInfo();  result.minVisibleScale=minScale;  result.minNameScale=minNameScale;  result.printOrder=printOrder;  result.nameColor=nameColor;  result.icon=icon;  result.isWayIcon=isWayIcon;  return result;}  }
class C{  public T caseS_Equations(S_Equations object){  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  if (cmbDocType.equals(e.getSource())) {    executeQuery();    return;  }  validate();}  }
class C{  public void testConstrDoubleNegInfinity(){  double a=Double.NEGATIVE_INFINITY;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public PlainInsn(Rop opcode,SourcePosition position,RegisterSpec result,RegisterSpecList sources){  super(opcode,position,result,sources);switch (opcode.getBranchingness()) {case Rop.BRANCH_SWITCH:case Rop.BRANCH_THROW:{      throw new IllegalArgumentException("bogus branchingness");    }}if (result != null && opcode.getBranchingness() != Rop.BRANCH_NONE) {  throw new IllegalArgumentException("can't mix branchingness with result");}}  }
class C{  public static void writeVarLong(ByteBuffer buff,long x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  @Override public void open(){synchronized (mLock) {    mDeviceState.requestOpen();  }}  }
class C{  @Override public WbXmlContent parse(WbXmlParser parser,byte[] data) throws IOException {  long v=0;  for (int i=0; i < data.length; i++) {    v=(v << 8) | (data[i] & 0xFF);  }  return new WbXmlContent(Long.toString(v));}  }
class C{  public static void removeVolumeListener(ActionListener al){  if (volumeListener != null) {    volumeListener.removeListener(al);    if (volumeListener.getListenerVector() == null || volumeListener.getListenerVector().size() == 0) {      volumeListener=null;    }  }}  }
class C{  public ASTNode createAST(){  ASTNode result=null;  try {    if (this.rawSource == null) {      throw new IllegalStateException("source not specified");    }    result=internalCreateAST();  }  finally {    initializeDefaults();  }  return result;}  }
class C{  public void clear(){  Arrays.fill(this.data,0);}  }
class C{  public CSVParser build(){  return new CSVParser(separator,quoteChar,escapeChar,strictQuotes,ignoreLeadingWhiteSpace,ignoreQuotations,nullFieldIndicator);}  }
class C{  protected boolean closeAllKeyStores(){  KeyStoreHistory[] histories=kseFrame.getKeyStoreHistories();  while (histories.length > 0) {    if (!closeKeyStore(histories[0])) {      break;    }    histories=kseFrame.getKeyStoreHistories();  }  return histories.length == 0;}  }
class C{  private UploadDocumentCommand(){}  }
class C{  public final boolean hasArray(){  return false;}  }
class C{  private boolean inExcludeList(Method method){  for (  String name : excludeList) {    if (getPropertyName(method).equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  @Transactional public Token generate(){  final Token token=generate(DEFAULT_ALLOWED_TOKEN_AGE_SECS,null,null);  return token;}  }
class C{  public static boolean invalidUserPassword(final String password){  return password.length() < MIN_PWD_LENGTH || password.length() > MAX_PWD_LENGTH;}  }
class C{  public TitlePaneWindowFocusedState(){  super("WindowFocused");}  }
class C{  public SWTStrokeCanvas(final Composite parent,final int style){  super(parent,style);  addPaintListener(null);}  }
class C{  @Override public double computeLeftNeighborContribution(int leftNodeDegree){  return 1.0;}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  public List<FacetResult> runDrillSideways() throws IOException {  index();  return drillSideways();}  }
class C{  public static String escapeTextWithSeparator(String item,char separator){  StringBuilder sb=new StringBuilder(item.length() * 2);  appendEscapedTextToBuilder(sb,item,separator);  return sb.toString();}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 2) {    System.out.println("Incorrect arguments!");    return;  }  HashMap<String,String> routeModeMap=new HashMap<String,String>();  BufferedReader reader=new BufferedReader(new FileReader(args[0] + "/routes.txt"));  String header=reader.readLine();  int rtCol=Arrays.asList(header.split(",")).indexOf("route_id");  int modCol=Arrays.asList(header.split(",")).indexOf("route_type");  String line;  while ((line=reader.readLine()) != null) {    String[] cells=line.split(",");    String routeId=cells[rtCol];    int mode=Integer.parseInt(cells[modCol]);    String newMode="";switch (mode) {case 0:      newMode="Streetcar";    break;case 1:  newMode="Subway";break;case 2:newMode="Train";break;case 3:newMode="Bus";break;default :System.err.println("Error: cannot find a match for mode " + mode);break;}routeModeMap.put(routeId,newMode);}HashMap<String,String> tripRouteMap=new HashMap<String,String>();reader=new BufferedReader(new FileReader(args[0] + "/trips.txt"));header=reader.readLine();int tpCol=Arrays.asList(header.split(",")).indexOf("trip_id");rtCol=Arrays.asList(header.split(",")).indexOf("route_id");while ((line=reader.readLine()) != null) {String[] cells=line.split(",");String tripId=cells[tpCol];String routeId=cells[rtCol];if (tripRouteMap.containsKey(tripId)) {System.err.println("Warning: Trip " + tripId + " found more than once! Skipping.");continue;}tripRouteMap.put(tripId,routeId);}reader.close();HashMap<String,ArrayList<String>> stopRoutesMap=new HashMap<String,ArrayList<String>>();reader=new BufferedReader(new FileReader(args[0] + "/stop_times.txt"));header=reader.readLine();tpCol=Arrays.asList(header.split(",")).indexOf("trip_id");int stpCol=Arrays.asList(header.split(",")).indexOf("stop_id");while ((line=reader.readLine()) != null) {String[] cells=line.split(",");String tripId=cells[tpCol];String stopId=cells[stpCol];if (stopRoutesMap.containsKey(stopId)) {ArrayList<String> a=stopRoutesMap.get(stopId);String routeId=tripRouteMap.get(tripId);if (!a.contains(routeId)) {a.add(routeId);stopRoutesMap.put(stopId,a);}} else {ArrayList<String> a=new ArrayList<String>();a.add(tripRouteMap.get(tripId));stopRoutesMap.put(stopId,a);}}reader.close();reader=new BufferedReader(new FileReader(args[0] + "/stops.txt"));header=reader.readLine();stpCol=Arrays.asList(header.split(",")).indexOf("stop_id");BufferedWriter writer=new BufferedWriter(new FileWriter(args[1] + "/newstops.txt"));writer.write(header + ",stop_modes");while ((line=reader.readLine()) != null) {List<String> cells=Arrays.asList(line.split(","));String id=cells.get(stpCol);HashSet<String> modesServed=new HashSet<String>();ArrayList<String> routes=stopRoutesMap.get(id);if (routes == null) {System.err.println("Could not find data for stop id " + id);continue;}for (String r : routes) {String x=routeModeMap.get(r);if (x == null) {System.err.println("Could not find mode data for route " + r);}modesServed.add(x);}writer.write("\n" + line);writer.write("," + modesServed.toString().replace(",",";"));}writer.close();writer=new BufferedWriter(new FileWriter(args[1] + "/stop_route_mapping.txt"));Iterator i=stopRoutesMap.entrySet().iterator();while (i.hasNext()) {Map.Entry e=(Map.Entry)i.next();writer.write("\n" + e.getKey() + ":"+ e.getValue().toString());i.remove();}writer.close();}  }
class C{  public RegionImpl(int offset,int length){  fOffset=offset;  fLength=length;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.118 -0500",hash_original_method="5A54C4D4DA42D98D57F22399AE362D5B",hash_generated_method="219E2E02AE15A517294992BEEEB98F5A") public StringBuffer insert(int index,int i){  addTaint(index);  addTaint(i);  return this;}  }
class C{  public static Dcs cs_add(Dcs A,Dcs B,double alpha,double beta){  int p, j, nz=0, anz;  int Cp[], Ci[], Bp[], m, n, bnz, w[];  double x[], Bx[], Cx[];  boolean values;  Dcs C;  if (!Dcs_util.CS_CSC(A) || !Dcs_util.CS_CSC(B))   return null;  if (A.m != B.m || A.n != B.n)   return null;  m=A.m;  anz=A.p[A.n];  n=B.n;  Bp=B.p;  Bx=B.x;  bnz=Bp[n];  w=new int[m];  values=(A.x != null) && (Bx != null);  x=values ? new double[m] : null;  C=Dcs_util.cs_spalloc(m,n,anz + bnz,values,false);  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (j=0; j < n; j++) {    Cp[j]=nz;    nz=Dcs_scatter.cs_scatter(A,j,alpha,w,x,j + 1,C,nz);    nz=Dcs_scatter.cs_scatter(B,j,beta,w,x,j + 1,C,nz);    if (values)     for (p=Cp[j]; p < nz; p++)     Cx[p]=x[Ci[p]];  }  Cp[n]=nz;  Dcs_util.cs_sprealloc(C,0);  return C;}  }
class C{  private void doDeleteBreakpoint(Breakpoint breakpoint){  BreakpointRenderer breakpointRenderer=getBreakpointRendererForFile(breakpoint.getPath());  if (breakpointRenderer != null) {    breakpointRenderer.removeBreakpointMark(breakpoint.getLineNumber());  }  String path=breakpoint.getPath();  List<Breakpoint> pathBreakpoints=breakpoints.get(path);  if (pathBreakpoints != null) {    pathBreakpoints.remove(breakpoint);    if (pathBreakpoints.isEmpty()) {      breakpoints.remove(breakpoint.getPath());    }  }  preserveBreakpoints();}  }
class C{  public void value(int value){  this.value=value;}  }
class C{  public void parse(Reader reader) throws SAXException, IOException {  parse(new InputSource(reader));}  }
class C{  public static String forceToString(Object o){  try {    return objectToString(o,true,MAX_ARRAY_ELEMENTS_TO_CONVERT);  } catch (  RuntimeException ex) {    return "Conversion to a string failed because " + ex;  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void close(){}  }
class C{  public Integer call() throws Exception {  Properties jProps=new Properties();  jProps.setProperty("URL",properties.getString(ReplicatorConf.RESOURCE_JDBC_URL));  jProps.setProperty("DBNAME",properties.getString(ReplicatorConf.METADATA_SCHEMA,ReplicatorConf.METADATA_SCHEMA_DEFAULT,true));  TungstenProperties.substituteSystemValues(jProps);  String url=jProps.getProperty("URL");  String tungstenUser=properties.getString(ReplicatorConf.GLOBAL_DB_USER);  String tungstenPw=properties.getString(ReplicatorConf.GLOBAL_DB_PASSWORD);  Database db=DatabaseFactory.createDatabase(url,tungstenUser,tungstenPw,true);  if (!db.supportsUserManagement()) {    logger.info("User management not supported for this database type; purge operation does nothing");    return 0;  }  logger.info("Initiating purge of user sessions: tungsten user=" + tungstenUser);  try {    db.connect();  } catch (  Exception e) {    logger.error("Failed to connect to database server: " + e.getMessage());    throw e;  }  int killed=0;  try {    List<Session> sessions=db.listSessions();    for (    Session session : sessions) {      String slogin=session.getLogin();      if (!slogin.equals(tungstenUser)) {        if (logger.isDebugEnabled()) {          logger.debug("Killing user session: " + session);        }        try {          db.kill(session);          killed++;        } catch (        SQLException e) {          String message="Unable to terminate session: " + session.toString() + " SQLException="+ e.getMessage();          logger.warn(message);          if (logger.isDebugEnabled())           logger.debug(message,e);        }      }    }  } catch (  ReplicatorException e) {    logger.error("Purge task failed: " + e.getMessage());    throw e;  }catch (  Exception e) {    logger.error("Purge task failed: " + e.getMessage());    throw e;  } finally {    logger.info("Number of user sessions purged: " + killed);    db.close();  }  return killed;}  }
class C{  static byte[] appendData(byte[] binary_data,final byte[] decoded_stream_data){  if (decoded_stream_data != null) {    final int current_length=binary_data.length + 1;    int processed_length=decoded_stream_data.length;    if (processed_length > 0) {      while (decoded_stream_data[processed_length - 1] == 0) {        processed_length--;      }      final byte[] temp=new byte[current_length];      System.arraycopy(binary_data,0,temp,0,current_length - 1);      temp[current_length - 1]=' ';      binary_data=new byte[current_length + processed_length];      System.arraycopy(temp,0,binary_data,0,current_length);      System.arraycopy(decoded_stream_data,0,binary_data,current_length,processed_length);    }  }  return binary_data;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public boolean continueExecuting(){  return !this.petPathfinder.noPath() && this.theMinion.getDistanceSqToEntity(theMinion.master) > (double)(this.maxDist * this.maxDist) && shouldFollowMaster();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYAreaRenderer clone=(XYAreaRenderer)super.clone();  clone.legendArea=ShapeUtilities.clone(this.legendArea);  return clone;}  }
class C{  private synchronized Path parseGlyph(byte[] cs,FlPoint advance,Matrix at){  Path gp=new Path();  FlPoint curpoint=new FlPoint();  sloc=0;  parse(cs,gp,curpoint,advance);  gp.transform(at);  return gp;}  }
class C{  private boolean parseFilterExpression(PsiBuilder builder){  PsiBuilder.Marker expr=builder.mark();  if (!parsePrimaryExpr(builder)) {    expr.drop();    return false;  }  while (XPathTokenTypes.LBRACKET == builder.getTokenType()) {    parsePredicate(builder);    expr.done(XPathElementTypes.FILTER_EXPRESSION);    expr=expr.precede();  }  expr.drop();  return true;}  }
class C{  protected synchronized void removeChunkAuthTag(long chunkIdx) throws FileEncryptionException {  if (chunkIdx < 0) {    throw new FileEncryptionException("Invalid auth tag parameter given!");  } else {    atagList.remove(chunkIdx);  }}  }
class C{  @RequestMapping(value="/table/categoryobjects",method=RequestMethod.POST) public String addCategoryObject(HttpServletRequest request,RedirectAttributes redirAttr){  Map<String,String[]> parameterMap=request.getParameterMap();  String[] fqdnArr=parameterMap.get("fqdn");  String[] tagArr=parameterMap.get("tags");  String fqdn=null;  String tags=null;  if (fqdnArr != null && fqdnArr.length > 0) {    fqdn=fqdnArr[0];  }  if (tagArr != null && tagArr.length > 0) {    tags=tagArr[0];  }  if (fqdn != null) {    tableEntityService.setCategoryObjects(fqdn,parameterMap);    tableEntityService.setTags(fqdn,tags);  }  redirAttr.addFlashAttribute("taxonomy",true);  return "redirect:" + request.getHeader("Referer") + "#taxonomyContent";}  }
class C{  @CanIgnoreReturnValue public Builder<C> addAll(RangeSet<C> ranges){  for (  Range<C> range : ranges.asRanges()) {    add(range);  }  return this;}  }
class C{  public static void evolve(BinaryVariable variable,double probability){  for (int i=0; i < variable.getNumberOfBits(); i++) {    if (PRNG.nextDouble() <= probability) {      variable.set(i,!variable.get(i));    }  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static String prettyTree(Expr expr){  if (expr instanceof Atom) {    return expr.toString();  } else {    return ((Expression)expr).prettyTree("",true);  }}  }
class C{  public boolean isDynamic(){  return dynamic;}  }
class C{  private IndexTreePath<E> choosePath(AbstractMTree<O,N,E,?> tree,E object,IndexTreePath<E> subtree){  N node=tree.getNode(subtree.getEntry());  if (node.isLeaf()) {    return subtree;  }  int bestIdx=0;  E bestEntry=node.getEntry(0);  double bestDistance=tree.distance(object.getRoutingObjectID(),bestEntry.getRoutingObjectID());  for (int i=1; i < node.getNumEntries(); i++) {    E entry=node.getEntry(i);    double distance=tree.distance(object.getRoutingObjectID(),entry.getRoutingObjectID());    if (distance < bestDistance) {      bestIdx=i;      bestEntry=entry;      bestDistance=distance;    }  }  return choosePath(tree,object,new IndexTreePath<>(subtree,bestEntry,bestIdx));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.981 -0500",hash_original_method="1DFD8968C3CA232EAF5E448E3048EE02",hash_generated_method="4218F1362D3FAC8D5423CCE43D04CC05") public void sendMessage(SIPMessage messageToSend) throws IOException {  try {    SIPRequest transactionRequest;    transactionRequest=(SIPRequest)messageToSend;    Via topVia=(Via)transactionRequest.getViaHeaders().getFirst();    try {      topVia.setBranch(getBranch());    } catch (    java.text.ParseException ex) {    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Sending Message " + messageToSend);      sipStack.getStackLogger().logDebug("TransactionState " + this.getState());    }    if (TransactionState.PROCEEDING == getState() || TransactionState.CALLING == getState()) {      if (transactionRequest.getMethod().equals(Request.ACK)) {        if (isReliable()) {          this.setState(TransactionState.TERMINATED);        } else {          this.setState(TransactionState.COMPLETED);        }        super.sendMessage(transactionRequest);        return;      }    }    try {      lastRequest=transactionRequest;      if (getState() == null) {        setOriginalRequest(transactionRequest);        if (transactionRequest.getMethod().equals(Request.INVITE)) {          this.setState(TransactionState.CALLING);        } else         if (transactionRequest.getMethod().equals(Request.ACK)) {          this.setState(TransactionState.TERMINATED);        } else {          this.setState(TransactionState.TRYING);        }        if (!isReliable()) {          enableRetransmissionTimer();        }        if (isInviteTransaction()) {          enableTimeoutTimer(TIMER_B);        } else {          enableTimeoutTimer(TIMER_F);        }      }      super.sendMessage(transactionRequest);    } catch (    IOException e) {      this.setState(TransactionState.TERMINATED);      throw e;    }  }  finally {    this.isMapped=true;    this.startTransactionTimer();  }}  }
class C{  void preValueChangeEvent(ASTNode node,SimplePropertyDescriptor property){}  }
class C{  public SVGOutputFormat(){}  }
class C{  public static String jvmArgs(MonitoredVm vm) throws MonitorException {  StringMonitor jvmArgs=(StringMonitor)vm.findByName("java.rt.vmArgs");  return (jvmArgs == null) ? "Unknown" : jvmArgs.stringValue();}  }
class C{  void iterator(){  return asSet().iterator();}  }
class C{  public void pause(){  if (D)   LOG.info("Pausing playback");synchronized (this) {    if (mPlayerHandler != null) {      mPlayerHandler.removeMessages(FADE_UP);    }    if (mIsSupposedToBePlaying && mPlayer != null) {      mPlayer.pause();      scheduleDelayedShutdown();      mIsSupposedToBePlaying=false;      if (mAnyActivityInForeground) {        updateRemoteControlClient(PLAYSTATE_STOPPED);      } else {        notifyChange(PLAYSTATE_CHANGED);      }    }  }}  }
class C{  public void save(String name) throws java.io.IOException {  if (name == null) {    throw new java.io.IOException("Null name during write");  }  OutputStream s=new java.io.BufferedOutputStream(new java.io.FileOutputStream(new java.io.File(name)));  int length=Header.HEADERSIZE * h0.numHeaders();  for (int i=1; i < h0.numHeaders(); i++) {    length+=headers[i].getRecordLength();  }  byte[] buffer=new byte[length];  for (int i=0; i < length; i++) {    buffer[i]=0;  }  int index=0;  index=h0.store(buffer,index);  if (index != Header.HEADERSIZE) {    log.error("Unexpected 1st header length: " + index);  }  int datastart=index * h0.numHeaders();  for (int i=1; i < h0.numHeaders(); i++) {    headers[i].updateStart(datastart);    datastart+=headers[i].getRecordLength();    index=headers[i].store(buffer,index);  }  for (int i=1; i < h0.numHeaders(); i++) {    int start=headers[i].getRecordStart();    int count=headers[i].getRecordLength();    byte[] content=headers[i].getByteArray();    if (count != content.length) {      log.error("header count " + count + " != content length "+ content.length);    }    for (int j=0; j < count; j++) {      buffer[start + j]=content[j];    }  }  s.write(buffer);  s.close();}  }
class C{  public String toString(){  return "move " + FreeCellNode.out(card) + " from column "+ nth+ " to freecell.";}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  @Override public void process(Number tuple){  values.add(tuple.doubleValue());}  }
class C{  public FloatMapperBuilder boost(Float boost){  this.boost=boost;  return this;}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.185 -0500",hash_original_method="0AEC913D07D4AD9724684A673FC6F8D3",hash_generated_method="E9609598A966F8817A66516FB39D7B13") static public Allocation createCubemapFromBitmap(RenderScript rs,Bitmap b){  return createCubemapFromBitmap(rs,b,MipmapControl.MIPMAP_NONE,USAGE_GRAPHICS_TEXTURE);}  }
class C{  public Object call(String jsFunc,JSObject self,Object[] params,boolean async,Callback callback){  String var=RETURN_VAR + "_call";  String js=var + "=(" + jsFunc+ ").call("+ self.toJSPointer();  int len=params.length;  for (int i=0; i < len; i++) {    Object param=params[i];    js+=", ";    if (param instanceof Integer || param instanceof Long || param instanceof Double|| param instanceof Float) {      js+=param.toString();    } else     if (param instanceof Boolean) {      js+=((Boolean)param).booleanValue() ? "true" : "false";    } else     if (param instanceof String) {      String escaped=StringUtil.replaceAll((String)param,"\\","\\\\");      escaped=StringUtil.replaceAll(escaped,"'","\\'");      js+="'" + escaped + "'";    } else     if (param instanceof JSObject) {      js+=((JSObject)param).toJSPointer();    } else     if (param instanceof JSFunction) {      JSObject temp=(JSObject)this.get("{}");      temp.set("callback",param);      js+=temp.toJSPointer() + ".callback";    } else {      js+="null";    }  }  js+=")";  try {    exec(var + "=undefined",async);  } catch (  Exception ex) {    Log.e(new RuntimeException("Failed to execute javascript " + var + "=undefined.  The error was "+ ex.getMessage()));    return null;  }  try {    exec(js,async);  } catch (  Exception ex) {    Log.e(new RuntimeException("Failed to execute javascript " + js + ".  The error was "+ ex.getMessage()));    return null;  }  try {    if (async) {      getAsync(var,callback);      return null;    } else {      return get(var);    }  } catch (  Exception ex) {    Log.e(new RuntimeException("Failed to get the javascript variable " + var + ".  The error was "+ ex.getMessage()));    return null;  }}  }
class C{  public FilterExprIteratorSimple(Expression expr){  super(null);  m_expr=expr;}  }
class C{  protected void displaySamples(Set<P> samples){  md.drawParticles(samples);}  }
class C{  public void initWeibo(String weiboAppId,String sinaRedirectUrl){  mWeiboAppId=weiboAppId;  this.mSinaRedirectUrl=sinaRedirectUrl;}  }
class C{  static public int unpackInt(DataInput is) throws IOException {  for (int offset=0, result=0; offset < 32; offset+=7) {    int b=is.readUnsignedByte();    result|=(b & 0x7F) << offset;    if ((b & 0x80) == 0) {      return result;    }  }  throw new Error("Malformed integer.");}  }
class C{  public boolean isEvaluatable(){  if (expression != null) {    return expression.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);  }  if (expressionList != null) {    for (    Expression e : expressionList) {      if (!e.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        return false;      }    }    return true;  }  return expressionQuery.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);}  }
class C{  public void characters(String s) throws org.xml.sax.SAXException {  if (m_inEntityRef && !m_expandDTDEntities)   return;  final int length=s.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  s.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  public VNXeCommandJob createCifsShareForSnap(String snapId,String shareName,String permission,String path,String fsId) throws VNXeException {  _logger.info("Creating CIFS snapshot share name: {} for path: {}",shareName,path);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  List<VNXeCifsServer> cifsServers=getCifsServers(fs.getNasServer().getId());  netBios=cifsServers.get(0).getNetbiosName();  CifsShareRequests req=new CifsShareRequests(_khClient);  CifsShareCreateForSnapParam param=new CifsShareCreateForSnapParam();  param.setPath(path);  VNXeBase snap=new VNXeBase();  snap.setId(snapId);  if (!VNXeUtils.isHigherVersion(getBasicSystemInfo().getSoftwareVersion(),VNXeConstants.VNXE_BASE_SOFT_VER)) {    param.setFilesystemSnap(snap);  } else {    param.setSnap(snap);  }  param.setName(shareName);  if (permission != null && !permission.isEmpty() && permission.equalsIgnoreCase(AccessEnum.READ.name())) {    param.setIsReadOnly(true);  } else {    param.setIsReadOnly(false);  }  return req.createShareForSnapshot(param);}  }
class C{  @Deprecated public void checkVersion(final String clientName,final short edamVersionMajor,final short edamVersionMinor,final OnClientCallback<Boolean> callback){  AsyncReflector.execute(mClient,callback,"checkVersion",clientName,edamVersionMajor,edamVersionMinor);}  }
class C{  private String commandRemove(String[] parameters){  if (parameters.length == 1) {    String name=parameters[0].trim();    if (remove(name) == null) {      return "Didn't remove '" + name + "' (entry not present).";    }    return "Removed '" + name + "'.";  } else   if (parameters.length == 2) {    String name=parameters[0].trim();    Set<String> categories=getCategoriesFromString(parameters[1].trim());    AddressbookEntry currentEntry=get(name);    AddressbookEntry result=remove(name,categories);    if (result == null) {      return "Didn't remove anything from '" + name + "' (entry not present).";    }    if (result.equalsFully(currentEntry)) {      return "Didn't remove anything from '" + name + "', categories are "+ categoriesToString(currentEntry.getCategories());    }    return "Removed categories " + categoriesToString(categories) + " from '"+ name+ "' (categories now "+ categoriesToString(result.getCategories())+ ").";  } else {    return "Remove: Invalid number of parameters.";  }}  }
class C{  public UpdateSketch build(){  UpdateSketch sketch=null;switch (bFam) {case ALPHA:{      if (bDstMem == null) {        sketch=HeapAlphaSketch.getInstance(bLgNomLongs,bSeed,bP,bRF);      } else {        throw new SketchesArgumentException("AlphaSketch cannot be made Direct to Memory.");      }      break;    }case QUICKSELECT:{    if (bDstMem == null) {      sketch=HeapQuickSelectSketch.getInstance(bLgNomLongs,bSeed,bP,bRF,false);    } else {      sketch=DirectQuickSelectSketch.getInstance(bLgNomLongs,bSeed,bP,bRF,bDstMem,false);    }    break;  }default :{  throw new SketchesArgumentException("Given Family cannot be built as a Theta Sketch: " + bFam.toString());}}return sketch;}  }
class C{  public void fine(String mesg){  log(Level.FINE,mesg,null);}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader,boolean accountHeaderSticky){  this.mAccountHeader=accountHeader;  this.mAccountHeaderSticky=accountHeaderSticky;  return this;}  }
class C{  public void sendLine(String line) throws IOException {  if (_acceptable) {    throw new IOException("You must call the accept() method of the DccChat request before you can use it.");  }  _writer.write(line + "\r\n");  _writer.flush();}  }
class C{  public IgniteThreadFactory(String gridName,String threadName){  this.gridName=gridName;  this.threadName=threadName;}  }
class C{  @Override public void validateConfiguration() throws ConfigurationException {  super.validateConfiguration();  log.info("Initialize GeoInternodeAuthenticator");  reloadBlacklist();  try {    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();    ObjectName name=new ObjectName(MBEAN_NAME);    mbs.registerMBean(this,name);  } catch (  Exception ex) {    log.error("Register MBean error ",ex);    throw new ConfigurationException("Initialize GeoInternodeAuthenticator error",ex);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("\tSkipped properties.\n" + "\t(default: capabilities,options)","ignored",1,"-ignored <comma-separated list of properties>"));  result.addElement(new Option("\tFull name of the class analysed.\n" + "\teg: weka.classifiers.rules.ZeroR\n" + "\t(default weka.classifiers.rules.ZeroR)","W",1,"-W"));  return result.elements();}  }
class C{  public SpringForce(){  this(DEFAULT_SPRING_COEFF,DEFAULT_SPRING_LENGTH);}  }
class C{  public boolean isConversationAbort(){  return isConversationAbort(esmClass);}  }
class C{  public static boolean validateComboBox(final JComboBox baseTypes){  return baseTypes.getSelectedItem() != null;}  }
class C{  public DiscoveryNode masterNode(){  return nodes.get(masterNodeId);}  }
class C{  public ContainerSchedulerTimeShared(List<? extends ContainerPe> pelist){  super(pelist);  setMipsMapRequested(new HashMap<String,List<Double>>());}  }
class C{  public CompositeColor(ColorSpace cspace,float components[],float alpha){  super(((int)(alpha * 255) << 24) | ColorUtil.toRGB(cspace,components),true);  boolean rangeError=false;  StringBuilder badComponentString=new StringBuilder();  int n=cspace.getNumComponents();  fvalue=new float[n];  for (int i=0; i < n; i++) {    if (components[i] < cspace.getMinValue(i) || components[i] > cspace.getMaxValue(i)) {      rangeError=true;      badComponentString.append("Component ");      badComponentString.append(i);      badComponentString.append(' ');    } else {      fvalue[i]=components[i];    }  }  if (alpha < 0.0 || alpha > 1.0) {    rangeError=true;    badComponentString.append("Alpha");  } else {    falpha=alpha;  }  if (rangeError) {    throw new IllegalArgumentException("Color parameter outside of expected range: " + badComponentString);  }  cs=cspace;}  }
class C{  public int lastIndexOf(Object elem){  if (elem == null) {    for (int i=size - 1; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=size - 1; i >= 0; i--)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public boolean isNetworkRoaming(int subscription){  return "true".equals(getTelephonyProperty(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING,subscription,null));}  }
class C{  public ContinuousVariable(String name){  super(name);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public TypedPosition(TypedRegion region){  super(region.getOffset(),region.getLength());  fType=region.getType();}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public HessianConnectionException(String message){  super(message);}  }
class C{  protected void merge(int size,double[] scratch,DBIDArrayIter ix,DBIDArrayIter iy,double[] bestd,int[] besti,PointerHierarchyRepresentationBuilder builder,double mindist,int x,int y){  ix.seek(x);  iy.seek(y);  if (LOG.isDebuggingFine()) {    LOG.debugFine("Merging: " + DBIDUtil.toString(ix) + " -> "+ DBIDUtil.toString(iy)+ " "+ mindist);  }  assert (y < x);  builder.add(ix,mindist,iy);  final int sizex=builder.getSize(ix), sizey=builder.getSize(iy);  builder.setSize(iy,sizex + sizey);  besti[x]=-1;  updateMatrix(size,scratch,iy,bestd,besti,builder,mindist,x,y,sizex,sizey);  if (besti[y] == x) {    findBest(size,scratch,bestd,besti,y);  }}  }
class C{  public TimeOfDay withMillisOfSecond(int millis){  int[] newValues=getValues();  newValues=getChronology().millisOfSecond().set(this,MILLIS_OF_SECOND,newValues,millis);  return new TimeOfDay(this,newValues);}  }
class C{  public TrieKeep(int bits){  super(bits);  this.froms=new int[this.capacity];  this.thrus=new int[this.capacity];  this.kims=new Kim[this.capacity];  this.root=new Node();}  }
class C{  public int size(){synchronized (children) {    return children.size();  }}  }
class C{  private void loadJettyConfiguration(@Nullable URL cfgUrl) throws IgniteCheckedException {  if (cfgUrl == null) {    HttpConfiguration httpCfg=new HttpConfiguration();    httpCfg.setSecureScheme("https");    httpCfg.setSecurePort(8443);    httpCfg.setSendServerVersion(true);    httpCfg.setSendDateHeader(true);    String srvPortStr=System.getProperty(IGNITE_JETTY_PORT,"8080");    int srvPort;    try {      srvPort=Integer.parseInt(srvPortStr);    } catch (    NumberFormatException ignore) {      throw new IgniteCheckedException("Failed to start Jetty server because IGNITE_JETTY_PORT system property " + "cannot be cast to integer: " + srvPortStr);    }    httpSrv=new Server(new QueuedThreadPool(200,20));    ServerConnector srvConn=new ServerConnector(httpSrv,new HttpConnectionFactory(httpCfg));    srvConn.setHost(System.getProperty(IGNITE_JETTY_HOST,"localhost"));    srvConn.setPort(srvPort);    srvConn.setIdleTimeout(30000L);    srvConn.setReuseAddress(true);    httpSrv.addConnector(srvConn);    httpSrv.setStopAtShutdown(false);  } else {    XmlConfiguration cfg;    try {      cfg=new XmlConfiguration(cfgUrl);    } catch (    FileNotFoundException e) {      throw new IgniteSpiException("Failed to find configuration file: " + cfgUrl,e);    }catch (    SAXException e) {      throw new IgniteSpiException("Failed to parse configuration file: " + cfgUrl,e);    }catch (    IOException e) {      throw new IgniteSpiException("Failed to load configuration file: " + cfgUrl,e);    }catch (    Exception e) {      throw new IgniteSpiException("Failed to start HTTP server with configuration file: " + cfgUrl,e);    }    try {      httpSrv=(Server)cfg.configure();    } catch (    Exception e) {      throw new IgniteCheckedException("Failed to start Jetty HTTP server.",e);    }  }  assert httpSrv != null;  httpSrv.setHandler(jettyHnd);  override(getJettyConnector());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.258 -0500",hash_original_method="F9C7B1CB3FEBF00FF413523F33E917A8",hash_generated_method="64DD3792DD478F9FB316DCB11420D619") public static boolean isJavaIdentifierPart(char c){  return isJavaIdentifierPart((int)c);}  }
class C{  private void updateDrawing(){  if (drawing != null) {    drawing.willChange();    drawing.fireUndoableEditHappened(CANVAS_FILL_COLOR.setUndoable(drawing,colorButton.getBackground()));    drawing.changed();  }}  }
class C{  public boolean hasAlbumAccessExt(){  return hasExtension(GphotoAccess.class);}  }
class C{  @Override public boolean isRegisterByteSizeObserverCheap(RawUnionValue union,Context context){  int index=getIndexForEncoding(union);  @SuppressWarnings("unchecked") Coder<Object> coder=(Coder<Object>)elementCoders.get(index);  return coder.isRegisterByteSizeObserverCheap(union.getValue(),context);}  }
class C{  public static void openError(String message,String title){  InformationDialog dialog=new InformationDialog(UIHelper.getShellProvider(),message);  dialog.setTitle(title);  dialog.setImage(UIHelper.getSWTImage(SWT.ICON_ERROR));  dialog.open();}  }
class C{  protected MuxingAttributeSet(){}  }
class C{  public ProcessClosedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_PROCESS_CLOSED);}  }
class C{  public int[] shuffle(){  int[] random=new int[init.length];  for (int i=0; i < random.length; i++) {    random[i]=i;  }  Random r=new Random();  for (int i=random.length - 1; i >= 0; i--) {    int t=r.nextInt(i + 1);    int swap=random[i];    random[i]=random[t];    random[t]=swap;  }  for (int i=0; i < random.length; i++) {    random[i]=init[random[i]];  }  return random;}  }
class C{  public InputBitStream(final byte[] a){  this(a,0,a.length);}  }
class C{  public RefactoringStatus validateNewElementName(String newName){  Assert.isNotNull(newName,"new name");  IContainer c=fResource.getParent();  if (c == null)   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.RenameResourceProcessor_error_no_parent);  if (!c.getFullPath().isValidSegment(newName))   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.RenameResourceProcessor_error_invalid_name);  if (c.findMember(newName) != null)   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.RenameResourceProcessor_error_resource_already_exists);  RefactoringStatus result=RefactoringStatus.create(c.getWorkspace().validateName(newName,fResource.getType()));  if (!result.hasFatalError())   result.merge(RefactoringStatus.create(c.getWorkspace().validatePath(createNewPath(newName),fResource.getType())));  return result;}  }
class C{  public static boolean isStringLiteral(GrLiteral literal){  if (literal instanceof GrString)   return true;  if (literal instanceof GrLiteralImpl) {    IElementType type=GrLiteralImpl.getLiteralType(literal);    return TokenSets.STRING_LITERAL_SET.contains(type);  }  return false;}  }
class C{  public static RunnerOptions fromConfig(){  return fromConfig(CeylonConfig.get());}  }
class C{  private float computeDelta(FloatMatrix m_i,FloatMatrix v_i,Iterable<FloatMatrixMessage> messages){  float f_mi=m_i.dot(v_i);  float first=0;  float second=0;  for (  FloatMatrixMessage msgJ : messages) {    if (isRelevant(msgJ)) {      FloatMatrix v_j=msgJ.getFactors();      first+=logf(dot_of_difference(m_i,v_j,v_i));      second+=logfd(dot_of_difference(m_i,v_j,v_i));    }  }  return logfd(f_mi) * first + logf(f_mi) * second;}  }
class C{  public void close() throws IOException {  flush();  super.close();  m_closed=true;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public Void call() throws Exception {  final long txid=jnl.newTx(ITx.UNISOLATED);  try {    final IIndex ndx=jnl.getIndex(indexName,txid);    for (int i=0; i < nops; i++) {switch (r.nextInt(4)) {case 0:        ndx.insert("key#" + r.nextInt(range),r.nextLong());      break;case 1:    ndx.remove("key#" + r.nextInt(range));  break;case 2:ndx.lookup("key#" + r.nextInt(range));break;case 3:ndx.rangeCount();break;case 4:{final Iterator<ITuple<?>> itr=ndx.rangeIterator();while (itr.hasNext()) {itr.next();}break;}default :throw new AssertionError("case not handled");}}} catch (Throwable t) {jnl.abort(txid);throw new RuntimeException(t);}jnl.commit(txid);return null;}  }
class C{  private static <T>void addCreateTableStatements(GeneratedTableMapper<T> tableInfo,List<String> statements,boolean ifNotExists) throws SQLException {  StringBuilder sb=new StringBuilder(256);  sb.append("CREATE TABLE ");  if (ifNotExists) {    sb.append("IF NOT EXISTS ");  }  appendEscapedEntityName(sb,tableInfo.getTableConfig().getTableName());  sb.append(" (");  List<String> additionalArgs=new ArrayList<String>();  List<String> statementsBefore=new ArrayList<String>();  List<String> statementsAfter=new ArrayList<String>();  boolean first=true;  for (  FieldType fieldType : tableInfo.getTableConfig().getFieldTypes()) {    if (first) {      first=false;    } else {      sb.append(", ");    }    appendColumnArg(sb,fieldType,additionalArgs);  }  addPrimaryKeySql(tableInfo.getTableConfig().getFieldTypes(),additionalArgs);  addUniqueComboSql(tableInfo.getTableConfig().getFieldTypes(),additionalArgs);  for (  String arg : additionalArgs) {    sb.append(", ").append(arg);  }  sb.append(") ");  statements.addAll(statementsBefore);  statements.add(sb.toString());  statements.addAll(statementsAfter);  addCreateIndexStatements(tableInfo,statements,ifNotExists,false);  addCreateIndexStatements(tableInfo,statements,ifNotExists,true);}  }
class C{  public boolean add(String key){  return checkAdd(key,true);}  }
class C{  public static FluxSource of(int backPressureAfter){  if (backPressureAfter < 1)   throw new IllegalArgumentException("Can't apply back pressure after less than 1 event");  return new FluxSource(backPressureAfter,true);}  }
class C{  public static void play(){  if (mediaPlayer != null && !isPlaying()) {    mediaPlayer.play();    timer.scheduleAtFixedRate(new TimeUpdater(),0,250);    mainController.updatePlayPauseIcon(true);  }}  }
class C{  public String cutoffTipText(){  return "set the category utility threshold by which to prune nodes";}  }
class C{  public void postStateChange(State<S,E> state,Message<E> message,Transition<S,E> transition,StateMachine<S,E> stateMachine){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    interceptor.postStateChange(state,message,transition,stateMachine);  }}  }
class C{  private void widgetDisposed(final DisposeEvent e){  unhookEvaluatorEvents();  evaluator=null;}  }
class C{  public static CheckBox createToggle(Image icon){  CheckBox cb=new CheckBox("",icon);  cb.setToggle(true);  return cb;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.231 -0500",hash_original_method="054E5AEB74111DBC68AB791919DED60A",hash_generated_method="92502B57C99C64E2794D9E013E4AE9B3") @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC2ParameterSpec)) {    return false;  }  RC2ParameterSpec ps=(RC2ParameterSpec)obj;  return (effectiveKeyBits == ps.effectiveKeyBits) && (Arrays.equals(iv,ps.iv));}  }
class C{  public Element makeStyleElement(Document document){  Element style=SVGUtil.makeStyleElement(document);  updateStyleElement(document,style);  return style;}  }
class C{  public SVGOMRadialGradientElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @SuppressWarnings("null") public Dcc4PcReply(Dcc4PcReply m){  this();  if (m == null) {    log.error("copy ctor of null message");    return;  }  _nDataChars=m._nDataChars;  if (m.isUnsolicited()) {    super.setUnsolicited();  }  for (int i=0; i < _nDataChars; i++) {    _dataChars[i]=m._dataChars[i];  }}  }
class C{  public LocalNotification(){}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.921 -0500",hash_original_method="23EF5170DA61C11337832D08CCCAA115",hash_generated_method="E55605A6E191EC711CE6EAA47E805880") void _processDont(int option) throws IOException {  if (debugoptions) {    System.err.println("RECEIVED DONT: " + TelnetOption.getOption(option));  }  if (__notifhand != null) {    __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DONT,option);  }  if (_willResponse[option] > 0) {    --_willResponse[option];    if (_willResponse[option] > 0 && _stateIsWont(option)) {      --_willResponse[option];    }  }  if (_willResponse[option] == 0 && _requestedWill(option)) {switch (option) {default :      break;  }  if ((_stateIsWill(option)) || (_requestedWill(option))) {    _sendWont(option);  }  _setWantWont(option);}_setWont(option);}  }
class C{  public static int testLoop2Snippet(int a,int b){  try {    return container.a;  }  finally {    for (int i=0; i < a; i++) {      if (b < 0) {        container.b=10;      } else {        container.c=15;      }    }  }}  }
class C{  @Override public UpdateResponse add(SolrInputDocument doc) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  return this.shards.server4write(doc).add(doc);}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  public static int defaultColor(){  return Colors.dark();}  }
class C{  public static void sleep(long millis){  if (mockSleepQueue == null) {    sleepUninterruptibly(millis,TimeUnit.MILLISECONDS);  } else {    try {      boolean isMultiPass=mockSleepQueue.take();      rollMockClockMillis(millis);      if (isMultiPass)       mockSleepQueue.offer(true);    } catch (    InterruptedException e) {    }  }}  }
class C{  private void updateTransitiveProbs(Map<Integer,MeetingProbabilitySet> p){  for (  Map.Entry<Integer,MeetingProbabilitySet> e : p.entrySet()) {    MeetingProbabilitySet myMps=this.allProbs.get(e.getKey());    if (myMps == null || e.getValue().getLastUpdateTime() > myMps.getLastUpdateTime()) {      this.allProbs.put(e.getKey(),e.getValue().replicate());    }  }}  }
class C{  public static <T>int createTablesIfNotExists(SQLiteDatabase connectionSource,Class... clazz) throws SQLException {  int count=0;  for (  Class aClass : clazz) {    count+=createTable(connectionSource,aClass,true);  }  return count;}  }
class C{  public static final int sign(float x){  return (x < 0f) ? -1 : 1;}  }
class C{  protected CacheConfiguration cacheConfiguration(){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  cacheCfg.setSwapEnabled(swapEnabled);  cacheCfg.setCacheMode(mode);  cacheCfg.setMemoryMode(memoryMode);  LruEvictionPolicy plc=null;  if (maxOnheapSize != Integer.MAX_VALUE) {    plc=new LruEvictionPolicy();    plc.setMaxSize(maxOnheapSize);  }  cacheCfg.setEvictionPolicy(plc);  cacheCfg.setAtomicityMode(atomicity);  cacheCfg.setOffHeapMaxMemory(offheapSize);  return cacheCfg;}  }
class C{  boolean isBalanced(){  return nestedOperations == preparedOperations;}  }
class C{  public static void initialWarning(String s,Parameter p1){  initialWarning(s,p1,null);}  }
class C{  public String name(){  String tag=this.config.tag(this.cluster);  if (tag.isEmpty()) {    tag=this.config.defaultTag();  }  if (tag.isEmpty()) {    throw new RuntimeException(String.format("No tags specified for '%s'",this.cluster));  }  return String.format("tag:%s",tag);}  }
class C{  public AppEngineArtifactDeploymentSource(@Nullable AppEngineEnvironment environment,@NotNull ArtifactPointer pointer){  super(pointer);  this.environment=environment;}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMCircle.regenerate()");  if (circle != null)   circle.regenerate(proj);  setGrabPoints(circle);  generate(proj);}  }
class C{  public void printEnumBody(List<JCTree> stats) throws IOException {  print("{");  println();  indent();  boolean first=true;  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    if (isEnumerator(l.head)) {      if (!first) {        print(",");        println();      }      align();      printStat(l.head);      first=false;    }  }  print(";");  println();  for (List<JCTree> l=stats; l.nonEmpty(); l=l.tail) {    if (!isEnumerator(l.head)) {      align();      printStat(l.head);      println();    }  }  undent();  align();  print("}");}  }
class C{  public boolean readDescriptor(String serviceUUID,String characteristicUUID,String descriptorUUID){  if (mBluetoothGatt == null) {    Log.w(TAG,"BluetoothGatt is null");    return false;  }  BluetoothGattService service=mBluetoothGatt.getService(UUID.fromString(serviceUUID));  BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(UUID.fromString(descriptorUUID));  return mBluetoothGatt.readDescriptor(descriptor);}  }
class C{  private boolean isPossibleToDequeueFileTransfer(Uri file,long size){  if (!FileUtils.isReadFromUriPossible(mCtx,file)) {    if (mLogger.isActivated()) {      mLogger.debug("Cannot dequeue file as file data can not be read from Uri ".concat(file.toString()));    }    return false;  }  if (mImService.isFileSizeExceeded(size)) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue file as there the maximum allowed size is exceeded by the file ").append(file).append(" size: ").append(size).toString());    }    return false;  }  return true;}  }
class C{  public String weekSummaryStr(){  int i=wins + losses - 1;  Game g=gameSchedule.get(i);  String gameSummary=gameWLSchedule.get(i) + " " + gameSummaryStr(g);  String rivalryGameStr="";  if (g.gameName.equals("Rivalry Game")) {    if (gameWLSchedule.get(i).equals("W"))     rivalryGameStr="Won against Rival!\n"; else     rivalryGameStr="Lost against Rival!\n";  }  return rivalryGameStr + name + " "+ gameSummary+ "\nNew poll rank: #"+ rankTeamPollScore+ " "+ abbr+ " ("+ wins+ "-"+ losses+ ")";}  }
class C{  public static void putValue1(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);    r1.put("key-1","value-1");  } catch (  Exception ex) {    ex.printStackTrace();    org.apache.geode.test.dunit.Assert.fail("failed while region.put()",ex);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @NotNull public static MockProject mockProject(@Nullable PicoContainer container){  Extensions.registerAreaClass("IDEA_PROJECT",null);  container=container != null ? container : new DefaultPicoContainer();  return new MockProject(container,getParentDisposableForCleanup());}  }
class C{  @Override public Attribute resolveToAttribute(String x,String y,ActionAST node){  LabelElementPair anyLabelDef=getAnyLabelDef(x);  if (anyLabelDef != null) {    if (anyLabelDef.type == LabelType.RULE_LABEL) {      return g.getRule(anyLabelDef.element.getText()).resolveRetvalOrProperty(y);    } else {      AttributeDict scope=getPredefinedScope(anyLabelDef.type);      if (scope == null) {        return null;      }      return scope.get(y);    }  }  return null;}  }
class C{  public Viewer(String host,int p){  server=host;  port=p;}  }
class C{  public void release(){synchronized (mModifyLock) {    mDownloadFileInfoMap.clear();    mDownloadFileChangeObserver.release();    if (mDownloadFileDbHelper != null) {      mDownloadFileDbHelper.close();    }  }}  }
class C{  private DialogBaseUnits computeGlobalDialogBaseUnits(){  LOGGER.config("Computing global dialog base units...");  Font dialogFont=getDefaultDialogFont();  FontMetrics metrics=createDefaultGlobalComponent().getFontMetrics(dialogFont);  DialogBaseUnits globalDialogBaseUnits=computeDialogBaseUnits(metrics);  return globalDialogBaseUnits;}  }
class C{  public LoginButton(Context context,AttributeSet attrs){  super(context,attrs,0,0,AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,DEFAULT_REQUEST_CODE);}  }
class C{  public static DynamicClassLoader create(ClassLoader parent,PathImpl path){  DynamicClassLoader loader=new DynamicClassLoader(parent);  LibraryLoader dirLoader=new LibraryLoader(loader,path);  dirLoader.init();  loader.init();  return loader;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public ServiceParameterException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void applyChainSwingBuffer(ModelRenderer... boxes){  float rotateAmount=0.01745329251F * ClientUtils.interpolate(this.prevYawVariation,this.yawVariation,LLibrary.PROXY.getPartialTicks()) / boxes.length;  for (  ModelRenderer box : boxes) {    box.rotateAngleY+=rotateAmount;  }}  }
class C{  public boolean isForce(){  return force;}  }
class C{  protected WalkingIterator createIteratorFromSteps(final WalkingIterator wi,int numSteps){  WalkingIterator newIter=new WalkingIterator(wi.getPrefixResolver());  try {    AxesWalker walker=(AxesWalker)wi.getFirstWalker().clone();    newIter.setFirstWalker(walker);    walker.setLocPathIterator(newIter);    for (int i=1; i < numSteps; i++) {      AxesWalker next=(AxesWalker)walker.getNextWalker().clone();      walker.setNextWalker(next);      next.setLocPathIterator(newIter);      walker=next;    }    walker.setNextWalker(null);  } catch (  CloneNotSupportedException cnse) {    throw new WrappedRuntimeException(cnse);  }  return newIter;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  private void initRecyclerView(){  AcceptedOfferBinder acceptedOfferBinder=dataAdapter.getOfferBinder();  recyclerView.setAdapter(dataAdapter);  recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));  RecyclerView.ItemAnimator animator=recyclerView.getItemAnimator();  animator.setAddDuration(200);  animator.setRemoveDuration(200);  myAppSubscription=presenter.addAppUsage(offerModel.getAppOfferStream());  presenter.removeOffer(acceptedOfferBinder.getRemoveOfferStream());  presenter.undoRemoveOffer(offerModel.getUndoOfferRemoveStream());}  }
class C{  private int measureHeight(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  mAscent=(int)mTextPaint.ascent();  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(-mAscent + mTextPaint.descent()) + mPaddingTop + mPaddingBottom;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void ReInit(CharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  @ObjectiveCName("endCallWithCallId:") public void endCall(long callId){  modules.getCallsModule().endCall(callId);}  }
class C{  public CovMatrixDifferenceWrapper(DataWrapper wrapper1,DataWrapper wrapper2,Parameters params){  if (wrapper1 == null || wrapper2 == null) {    throw new NullPointerException("The data must not be null");  }  DataModel model1=wrapper1.getSelectedDataModel();  DataModel model2=wrapper2.getSelectedDataModel();  if (!(model1 instanceof ICovarianceMatrix)) {    throw new IllegalArgumentException("Expecting covariance matrices.");  }  if (!(model2 instanceof ICovarianceMatrix)) {    throw new IllegalArgumentException("Expecting covariance matrices.");  }  TetradMatrix corr1=((ICovarianceMatrix)model1).getMatrix();  TetradMatrix corr2=((ICovarianceMatrix)model2).getMatrix();  TetradMatrix corr3=calcDifference(corr1,corr2);  ICovarianceMatrix covWrapper=new CovarianceMatrix(model1.getVariables(),corr3,((ICovarianceMatrix)model1).getSampleSize());  setDataModel(covWrapper);  setSourceGraph(wrapper1.getSourceGraph());  LogDataUtils.logDataModelList("Difference of matrices.",getDataModelList());}  }
class C{  public void firePostSelectionChanged(final SelectionChangedEvent event){  Object[] listeners=postListeners.getListeners();  fireEventChange(event,listeners);}  }
class C{  public void worked(int work){}  }
class C{  public static final double[] timesMinusTimes(final double[] v1,final double s1,final double[] v2,final double s2){  final double[] sub=new double[v1.length];  for (int i=0; i < v1.length; i++) {    sub[i]=v1[i] * s1 - v2[i] * s2;  }  return sub;}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(String.format("%s %s %s",this.getFilename(),this.getSentenceNumber(),this.getTerminal()));  if (this.getTaggerName() == null) {    buffer.append(String.format(" %s %s",this.getBaseForm(),this.getFrameSet()));  } else {    buffer.append(String.format(" %s %s.%s %s",this.getTaggerName(),this.getBaseForm(),this.getFrameSet(),this.getInflectionValue()));  }  for (  Proplabel label : getPropLabels()) {    buffer.append(' ');    buffer.append(label);  }  return buffer.toString();}  }
class C{  private static boolean shouldIncludeField(FieldDoc field,String accessType){  if (field.isStatic() || AnnotationUtils.hasAnnotation(field,KnownAnnotations.XMLTransient_Annotation) || AnnotationUtils.hasAnnotation(field,KnownAnnotations.XMLAttribute_Annotation)) {    return false;  }  if (accessType.equals("FIELD")) {    return !field.isStatic() && !field.isTransient();  } else   if (accessType.equals("PUBLIC_MEMBER")) {    return field.isPublic();  } else   if (accessType.equals("PROPERTY")) {    return false;  } else   if (accessType.equals("NONE")) {    return false;  }  return false;}  }
class C{  public static void purgeOutdatedGenerations(final ConfProxyProperties conf) throws IOException {  Path instanceDir=Paths.get(conf.getConfigurationTargetPath());  Files.createDirectories(instanceDir);  for (  String genTime : subDirectoryNames(instanceDir)) {    Date current=new Date();    Date old=new Date(Long.parseLong(genTime));    long diffSeconds=TimeUnit.MILLISECONDS.toSeconds((current.getTime() - old.getTime()));    long timeToKeep=Math.min(MAX_CONFIGURATION_LIFETIME_SECONDS,conf.getValidityIntervalSeconds());    if (diffSeconds > timeToKeep) {      Path oldPath=Paths.get(conf.getConfigurationTargetPath(),genTime);      FileUtils.deleteDirectory(oldPath.toFile());    } else {      Path valid=instanceDir.resolve(genTime);      log.debug("A valid generated configuration exists in '{}'",valid);    }  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.679 -0400",hash_original_method="994E9DF4336B3658B3591197F683F468",hash_generated_method="00985BC2762F24350F95CBBE864007B0") @Override public int read(char[] chr) throws IOException {  try {    beforeRead(chr != null ? chr.length : 0);    int n=in.read(chr);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public VNXeCommandResult modifyHostInitiator(HostInitiatorModifyParam param,String id){  _url=URL + id + MODIFY;  return postRequestSync(param);}  }
class C{  public static Job extractJob(final Bigquery bigquery,final String cloudStoragePath,final TableReference table) throws IOException {  JobConfigurationExtract extract=new JobConfigurationExtract().setSourceTable(table).setDestinationUri(cloudStoragePath);  return bigquery.jobs().insert(table.getProjectId(),new Job().setConfiguration(new JobConfiguration().setExtract(extract))).execute();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static int partition(Comparable ar[],int left,int right,int pivotIndex){  Comparable pivot=ar[pivotIndex];  swap(ar,right,pivotIndex);  int store=left;  for (int idx=left; idx < right; idx++) {    if (ar[idx].compareTo(pivot) <= 0) {      swap(ar,idx,store);      store++;    }  }  swap(ar,right,store);  return store;}  }
class C{  public short acceptNode(int n,XPathContext xctxt){  try {    xctxt.pushCurrentNode(n);    xctxt.pushIteratorRoot(m_context);    if (DEBUG) {      System.out.println("traverser: " + m_traverser);      System.out.print("node: " + n);      System.out.println(", " + m_cdtm.getNodeName(n));      System.out.println("pattern: " + m_pattern.toString());      m_pattern.debugWhatToShow(m_pattern.getWhatToShow());    }    XObject score=m_pattern.execute(xctxt);    if (DEBUG) {      System.out.println("score: " + score);      System.out.println("skip: " + (score == NodeTest.SCORE_NONE));    }    return (score == NodeTest.SCORE_NONE) ? DTMIterator.FILTER_SKIP : DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();    xctxt.popIteratorRoot();  }}  }
class C{  public CubicLineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  mFirstMultiplier=smoothness;  mSecondMultiplier=1 - mFirstMultiplier;}  }
class C{  @Nullable private static Boolean findPath(Instruction cur,int destination,LinkedHashSet<Integer> fragmentInsns,boolean wasOutside,HashMap<Instruction,Boolean> visited){  wasOutside=wasOutside || !fragmentInsns.contains(cur.num());  visited.put(cur,null);  Iterable<? extends Instruction> instructions=cur.allSuccessors();  boolean pathExists=false;  for (  Instruction i : instructions) {    if (i.num() == destination)     return wasOutside;    Boolean result;    if (visited.containsKey(i)) {      result=visited.get(i);    } else {      result=findPath(i,destination,fragmentInsns,wasOutside,visited);      visited.put(i,result);    }    if (result != null) {      if (result.booleanValue()) {        visited.put(cur,true);        return true;      }      pathExists=true;    }  }  if (pathExists) {    visited.put(cur,false);    return false;  } else {    visited.put(cur,null);    return null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addListener(T listener){  if (listener == null) {    throw new NullPointerException();  }  listeners.add(listener);}  }
class C{  public void push(final E element){  this.elements.add(element);  if (this.elements.size() > this.limit) {    this.elements.remove(0);  }}  }
class C{  private static String[] splitConsolidated(String s){  if ((s.length() % 2) != 0) {    throw new IllegalArgumentException("Differing size of northing and easting, unable to determine valid ref " + s);  }  int index=s.length() / 2;  return new String[]{s.substring(0,index),s.substring(index)};}  }
class C{  public static String[] parseEnumeration(String enumDefinition){  return parseListDefString("enum",enumDefinition);}  }
class C{  public TreeNode parseXMLDocument(String uri,InputSource is) throws JasperException {  return parseXMLDocument(uri,is,false);}  }
class C{  @Override public boolean add(IMessage message){  return add(message,false);}  }
class C{  @Override public void perform(IR ir){  this.ir=ir;  this.regAllocState=ir.MIRInfo.regAllocState;  ControlFlowGraph cfg=ir.cfg;  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  LinearScanState state=new LinearScanState();  ir.MIRInfo.linearScanState=state;  createTopAndReverseList(cfg);  assignDepthFirstNumbers(cfg);  initializeRegisters();  int lastBeginSeen=-1;  for (BasicBlock bb=listOfBlocks; bb != null; bb=(BasicBlock)bb.nextSorted) {    LiveInterval liveIntervals=ir.getLivenessInformation();    for (LiveIntervalElement live=liveIntervals.getFirstLiveIntervalElement(bb); live != null; live=live.getNext()) {      if (VM.VerifyAssertions) {        int begin=regAllocState.getDfnBegin(live,bb);        VM._assert(begin >= lastBeginSeen);        lastBeginSeen=begin;      }      if (live.getRegister().isPhysical() && !phys.isAllocatable(live.getRegister())) {        continue;      }      CompoundInterval resultingInterval=processLiveInterval(live,bb);      if (!bb.getInfrequent() && resultingInterval != null) {        resultingInterval.setFrequent();      }    }  }  if (LinearScan.VERBOSE_DEBUG) {    VM.sysWrite("**** start of interval dump " + ir.method + " ****\n");    VM.sysWrite(ir.MIRInfo.linearScanState.intervals.toString());    VM.sysWrite("**** end   of interval dump ****\n");  }}  }
class C{  protected OperationImpl(){  super();}  }
class C{  public BezierNodeHandle(BezierFigure owner,int index){  this(owner,index,owner);}  }
class C{  private void incrementVar(long i){  long oldVal=intVar.getConcreteValue();  long newVal;  if (i > 0) {    if (oldVal <= intVar.getMaxValue() - i) {      newVal=oldVal + i;    } else {      newVal=intVar.getMaxValue();    }  } else {    if (oldVal >= intVar.getMinValue() - i) {      newVal=oldVal + i;    } else {      newVal=intVar.getMinValue();    }  }  intVar.setConcreteValue(newVal);}  }
class C{  public DeviceAuthentication(){  ddb=new AmazonDynamoDBClient();  ddb.setRegion(RegionUtils.getRegion(Configuration.REGION));  try {    if (!doesTableExist(DEVICE_TABLE)) {      createDeviceTable();    }  } catch (  DataAccessException e) {    throw new RuntimeException("Failed to create device table.",e);  }}  }
class C{  public static DataSet makeContinuousData(List<Node> variables,TetradMatrix data){  return makeContinuousData(variables,data.toArray());}  }
class C{  @Override public void reset(){  m_structure=null;  m_filesByClass=null;  m_lastClassDir=0;  setRetrieval(NONE);}  }
class C{  @SuppressWarnings("unused") public String locationConstraint(){  return locationConstraint;}  }
class C{  boolean hasReset(){  return false;}  }
class C{  public static Bezier quadrant(float radius,float startDegree){  float dv=(float)((4f / 3f) * tan(PI / 8)) * radius;  Bezier bezier=new Bezier();  bezier.p1.set(radius,0);  bezier.p2.set(0,radius);  bezier.e1.set(bezier.p1.x,bezier.p1.y + dv);  bezier.e2.set(bezier.p2.x + dv,bezier.p2.y);  if (startDegree != 0)   bezier.rotate(0,0,startDegree);  return bezier;}  }
class C{  public void clearChoices(){}  }
class C{  public static int encodeLatitudeCeil(double latitude){  GeoUtils.checkLatitude(latitude);  if (latitude == 90.0D) {    latitude=Math.nextDown(latitude);  }  return (int)Math.ceil(latitude / LAT_DECODE);}  }
class C{  private ContentValues unpackFavorite(byte[] buffer,int dataSize) throws IOException {  Favorite favorite=unpackProto(new Favorite(),buffer,dataSize);  if (favorite.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {    favorite.screen+=mHotseatShift;  }  ContentValues values=new ContentValues();  values.put(LauncherSettings.Favorites._ID,favorite.id);  values.put(LauncherSettings.Favorites.SCREEN,favorite.screen);  values.put(LauncherSettings.Favorites.CONTAINER,favorite.container);  values.put(LauncherSettings.Favorites.CELLX,favorite.cellX);  values.put(LauncherSettings.Favorites.CELLY,favorite.cellY);  values.put(LauncherSettings.Favorites.SPANX,favorite.spanX);  values.put(LauncherSettings.Favorites.SPANY,favorite.spanY);  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {    values.put(LauncherSettings.Favorites.ICON_TYPE,favorite.iconType);    if (favorite.iconType == LauncherSettings.Favorites.ICON_TYPE_RESOURCE) {      values.put(LauncherSettings.Favorites.ICON_PACKAGE,favorite.iconPackage);      values.put(LauncherSettings.Favorites.ICON_RESOURCE,favorite.iconResource);    }    values.put(LauncherSettings.Favorites.ICON,favorite.icon);  }  if (!TextUtils.isEmpty(favorite.title)) {    values.put(LauncherSettings.Favorites.TITLE,favorite.title);  } else {    values.put(LauncherSettings.Favorites.TITLE,"");  }  if (!TextUtils.isEmpty(favorite.intent)) {    values.put(LauncherSettings.Favorites.INTENT,favorite.intent);  }  values.put(LauncherSettings.Favorites.ITEM_TYPE,favorite.itemType);  UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  long userSerialNumber=UserManagerCompat.getInstance(mContext).getSerialNumberForUser(myUserHandle);  values.put(LauncherSettings.Favorites.PROFILE_ID,userSerialNumber);  if (favorite.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {    if (!TextUtils.isEmpty(favorite.appWidgetProvider)) {      values.put(LauncherSettings.Favorites.APPWIDGET_PROVIDER,favorite.appWidgetProvider);    }    values.put(LauncherSettings.Favorites.APPWIDGET_ID,favorite.appWidgetId);    values.put(LauncherSettings.Favorites.RESTORED,LauncherAppWidgetInfo.FLAG_ID_NOT_VALID | LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY | LauncherAppWidgetInfo.FLAG_UI_NOT_READY);    restoreSuccessful=false;  } else {    restoreSuccessful=false;  }  return values;}  }
class C{  public static IClassFileReader createDefaultClassFileReader(IClassFile classfile,int decodingFlag){  IPackageFragmentRoot root=(IPackageFragmentRoot)classfile.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);  if (root != null) {    try {      if (root instanceof JarPackageFragmentRoot) {        String archiveName=null;        ZipFile jar=null;        try {          jar=((JarPackageFragmentRoot)root).getJar();          archiveName=jar.getName();        }  finally {          JavaModelManager.getJavaModelManager().closeZipFile(jar);        }        PackageFragment packageFragment=(PackageFragment)classfile.getParent();        String classFileName=classfile.getElementName();        String entryName=org.eclipse.jdt.internal.core.util.Util.concatWith(packageFragment.names,classFileName,'/');        return createDefaultClassFileReader(archiveName,entryName,decodingFlag);      } else {        InputStream in=null;        try {          in=((IFile)((JavaElement)classfile).resource()).getContents();          return createDefaultClassFileReader(in,decodingFlag);        }  finally {          if (in != null)           try {            in.close();          } catch (          IOException e) {          }        }      }    } catch (    CoreException e) {    }  }  return null;}  }
class C{  public CodeSourceFacade(final CodeSource codeSource){  this.location=codeSource.getLocation();  final Certificate[] certificates=codeSource.getCertificates();  if (null == certificates || 0 == certificates.length) {    LOGGER.warning(String.format("no certificate found for %s",codeSource));    this.firstCertificate=null;    return;  }  this.firstCertificate=(X509Certificate)certificates[0];}  }
class C{  @Override public boolean remove(Object o){  throw new UnsupportedOperationException();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_extns=this.getNamespace();  m_decl=getElemExtensionDecl(sroot,m_extns);  if (m_decl == null)   sroot.getExtensionNamespacesManager().registerExtension(m_extns);}  }
class C{  public AsciiToStringConverter(final AsciiImgCache characterCacher,final BestCharacterFitStrategy characterFitStrategy){  super(characterCacher,characterFitStrategy);}  }
class C{  public static boolean pauseSimulation(){  paused=true;  return paused;}  }
class C{  public static Object readDeclaredStaticField(final Class<?> cls,final String fieldName) throws IllegalAccessException {  return FieldUtils.readDeclaredStaticField(cls,fieldName,false);}  }
class C{  public MinimizeWindowAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public boolean isAssignableTo(Class cl){  return getName().equals(cl.getName());}  }
class C{  public java.sql.Connection connect(String url,Properties info) throws SQLException {  if (url == null) {    throw SQLError.createSQLException(Messages.getString("NonRegisteringDriver.1"),SQLError.SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE,null);  }  if (StringUtils.startsWithIgnoreCase(url,LOADBALANCE_URL_PREFIX)) {    return connectLoadBalanced(url,info);  } else   if (StringUtils.startsWithIgnoreCase(url,REPLICATION_URL_PREFIX)) {    return connectReplicationConnection(url,info);  }  Properties props=null;  if ((props=parseURL(url,info)) == null) {    return null;  }  if (!"1".equals(props.getProperty(NUM_HOSTS_PROPERTY_KEY))) {    return connectFailover(url,info);  }  try {    Connection newConn=com.mysql.jdbc.ConnectionImpl.getInstance(host(props),port(props),props,database(props),url);    return newConn;  } catch (  SQLException sqlEx) {    throw sqlEx;  }catch (  Exception ex) {    SQLException sqlEx=SQLError.createSQLException(Messages.getString("NonRegisteringDriver.17") + ex.toString() + Messages.getString("NonRegisteringDriver.18"),SQLError.SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE,null);    sqlEx.initCause(ex);    throw sqlEx;  }}  }
class C{  public void createSitemapIndexFile(String sitemapsDirectoryPath) throws MalformedURLException {  File targetDirectory=new File(sitemapsDirectoryPath);  File outFile=new File(sitemapsDirectoryPath + "/sitemap_index.xml");  SitemapIndexGenerator sig=new SitemapIndexGenerator("https://www.podcastpedia.org",outFile);  File[] files=targetDirectory.listFiles();  for (int i=0; i < files.length; i++) {    if (isNotSitemapIndexFile(files,i)) {      SitemapIndexUrl sitemapIndexUrl=new SitemapIndexUrl("https://www.podcastpedia.org/" + files[i].getName(),new Date(files[i].lastModified()));      sig.addUrl(sitemapIndexUrl);    }  }  sig.write();}  }
class C{  public void invalidate(){  super.invalidate();  if (getParent() != null) {    preferenceChanged(null,true,true);  }}  }
class C{  public long storeData(byte[] data) throws IOException {  assert data != null : "data must not be null";  long offset=nioFile.size();  ByteBuffer buf=ByteBuffer.allocate(data.length + 4);  buf.putInt(data.length);  buf.put(data);  buf.rewind();  nioFile.write(buf,offset);  return offset;}  }
class C{  public String optString(String key,String defaultValue){  Object o=opt(key);  return o != null ? o.toString() : defaultValue;}  }
class C{  private boolean createItem(VirtualFile dir,String name,boolean directory,final boolean recursive){  SvnVcs vcs=getVCS(dir);  if (vcs == null) {    return false;  }  final VcsShowConfirmationOption.Value value=vcs.getAddConfirmation().getValue();  if (VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY.equals(value))   return false;  if (isUndo(vcs) && SvnUtil.isAdminDirectory(dir,name)) {    return false;  }  File ioDir=getIOFile(dir);  boolean pendingAdd=isPendingAdd(vcs.getProject(),dir);  if (!SvnUtil.isSvnVersioned(vcs,ioDir) && !pendingAdd) {    return false;  }  final File targetFile=new File(ioDir,name);  Status status=getFileStatus(vcs,targetFile);  if (status == null || status.getContentsStatus() == StatusType.STATUS_NONE || status.getContentsStatus() == StatusType.STATUS_UNVERSIONED) {    myAddedFiles.putValue(vcs.getProject(),new AddedFileInfo(dir,name,null,recursive));    return false;  } else   if (status.is(StatusType.STATUS_MISSING)) {    return false;  } else   if (status.is(StatusType.STATUS_DELETED)) {    NodeKind kind=status.getKind();    if (directory && !kind.isDirectory() || !directory && !kind.isFile()) {      return false;    }    try {      if (isUndo(vcs)) {        createRevertAction(vcs,targetFile,false).execute();        return true;      }      myAddedFiles.putValue(vcs.getProject(),new AddedFileInfo(dir,name,null,recursive));      return false;    } catch (    VcsException e) {      SVNFileUtil.deleteAll(targetFile,true);      return false;    }  }  return false;}  }
class C{  @Override public void abuseWeakness(int index,Element encKey,Element payloadElement){  try {    int keyRefWeakIdx=index / m_MaxPosAttr;    index%=m_MaxPosAttr;switch (m_WrapMode) {case WRAP_ENC_ELEMENT:      handleWrapEncryptedElement(index,encKey,payloadElement);    break;case ENCKEY_WRAP_ENCDATA:  handleEncKeyWrapEncData(index,keyRefWeakIdx,encKey,payloadElement);break;case WRAP_ENCKEY_ENCDATA:handleWrapEncKeyEncData(index,keyRefWeakIdx,encKey,payloadElement);break;case WRAP_ENCKEY_WRAP_ENCDATA:handleWrapEncKeyWrapEncData(index,keyRefWeakIdx,encKey,payloadElement);break;}} catch (XPathExpressionException ex) {LOG.error(ex);}}  }
class C{  private AstNode memberExprTail(boolean allowCallSyntax,AstNode pn) throws IOException {  if (pn == null)   codeBug();  int pos=pn.getPosition();  int lineno;  tailLoop:   for (; ; ) {    int tt=peekToken();switch (tt) {case Token.DOT:case Token.DOTDOT:      lineno=ts.lineno;    pn=propertyAccess(tt,pn);  pn.setLineno(lineno);break;case Token.DOTQUERY:consumeToken();int opPos=ts.tokenBeg, rp=-1;lineno=ts.lineno;mustHaveXML();setRequiresActivation();AstNode filter=expr();int end=getNodeEnd(filter);if (mustMatchToken(Token.RP,"msg.no.paren")) {rp=ts.tokenBeg;end=ts.tokenEnd;}XmlDotQuery q=new XmlDotQuery(pos,end - pos);q.setLeft(pn);q.setRight(filter);q.setOperatorPosition(opPos);q.setRp(rp - pos);q.setLineno(lineno);pn=q;break;case Token.LB:consumeToken();int lb=ts.tokenBeg, rb=-1;lineno=ts.lineno;AstNode expr=expr();end=getNodeEnd(expr);if (mustMatchToken(Token.RB,"msg.no.bracket.index")) {rb=ts.tokenBeg;end=ts.tokenEnd;}ElementGet g=new ElementGet(pos,end - pos);g.setTarget(pn);g.setElement(expr);g.setParens(lb,rb);g.setLineno(lineno);pn=g;break;case Token.LP:if (!allowCallSyntax) {break tailLoop;}lineno=ts.lineno;consumeToken();checkCallRequiresActivation(pn);FunctionCall f=new FunctionCall(pos);f.setTarget(pn);f.setLineno(lineno);f.setLp(ts.tokenBeg - pos);List<AstNode> args=argumentList();if (args != null && args.size() > ARGC_LIMIT) reportError("msg.too.many.function.args");f.setArguments(args);f.setRp(ts.tokenBeg - pos);f.setLength(ts.tokenEnd - pos);pn=f;break;default :break tailLoop;}}return pn;}  }
class C{  protected void doFireDocumentChanged(DocumentEvent event){  DocumentPartitioningChangedEvent p=fDocumentPartitioningChangedEvent;  fDocumentPartitioningChangedEvent=null;  if (p != null && !p.isEmpty())   fireDocumentPartitioningChanged(p);  documentChangedForAll(event,fPrenotifiedDocumentListeners.getListeners());  documentChangedForAll(event,fDocumentListeners.getListeners());}  }
class C{  public final void write(final byte[] new_name){  final int size=new_name.length;  if (current_item + size >= max_size) {    checkSize(current_item + size);  }  for (  final byte aNew_name : new_name) {    items[current_item]=aNew_name;    current_item++;  }}  }
class C{  public boolean definesScaleGrid(){  return definesScaleGrid;}  }
class C{  private void createLogDir(){  File file;  boolean mkOk;  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    file=new File(LOG_PATH_SDCARD_DIR);    if (!file.isDirectory()) {      mkOk=file.mkdirs();      if (!mkOk) {        return;      }    }  }}  }
class C{  public void drawPolygon(int xPoints[],int yPoints[],int nPoints){  if (nPoints > 0) {    drawPolyline(xPoints,yPoints,nPoints);    drawLine(xPoints[nPoints - 1],yPoints[nPoints - 1],xPoints[0],yPoints[0]);  }}  }
class C{  public void mouseReleased(MouseEvent e){  if (Debug.debugging("mousemode")) {    Debug.output(getID() + "|NavMouseMode.mouseReleased()");  }  if (!mouseSupport.fireMapMouseReleased(e)) {    handleMouseReleased(e);  }}  }
class C{  private void checkMinimumDistance(Geometry g1,Geometry g2,double minDist){  DistanceOp distOp=new DistanceOp(g1,g2,minDist);  minDistanceFound=distOp.distance();  if (minDistanceFound < minDist) {    isValid=false;    Coordinate[] pts=distOp.nearestPoints();    errorLocation=distOp.nearestPoints()[1];    errorIndicator=g1.getFactory().createLineString(pts);    errMsg="Distance between buffer curve and input is too small " + "(" + minDistanceFound + " at "+ WKTWriter.toLineString(pts[0],pts[1])+ " )";  }}  }
class C{  @NonNull public static Bitmap toBitmap(@NonNull Drawable source,@NonNull DisplayMetrics metrics,float widthDp,float heightDp,float fallbackWidthDp,float fallbackHeightDp){  return toBitmapWithExactSize(source,metrics,toPx(metrics,widthDp),toPx(metrics,heightDp),toPx(metrics,fallbackWidthDp),toPx(metrics,fallbackHeightDp));}  }
class C{  private Payment fillPaymentPrototype(final CustomerOrder order,final Payment templatePayment,final String transactionOperation,final String transactionGatewayLabel){  Address shippingAddr=order.getShippingAddressDetails();  Address billingAddr=order.getBillingAddressDetails();  if (billingAddr != null) {    PaymentAddress addr=new PaymentAddressImpl();    BeanUtils.copyProperties(billingAddr,addr);    templatePayment.setBillingAddress(addr);  }  if (shippingAddr != null) {    PaymentAddress addr=new PaymentAddressImpl();    BeanUtils.copyProperties(shippingAddr,addr);    templatePayment.setShippingAddress(addr);  }  templatePayment.setBillingAddressString(order.getBillingAddress());  templatePayment.setShippingAddressString(order.getShippingAddress());  templatePayment.setBillingEmail(order.getEmail());  templatePayment.setOrderDate(order.getOrderTimestamp());  templatePayment.setOrderCurrency(order.getCurrency());  templatePayment.setOrderLocale(order.getLocale());  templatePayment.setOrderNumber(order.getOrdernum());  templatePayment.setTransactionOperation(transactionOperation);  templatePayment.setTransactionGatewayLabel(transactionGatewayLabel);  return templatePayment;}  }
class C{  @Override public void visitVertex(State state){  int stop=streetLayer.parentNetwork.transitLayer.stopForStreetVertex.get(state.vertex);  if (stop != NO_STOP_FOUND) {    if (state.durationSeconds < minTravelTimeSeconds) {      return;    }    if (!stops.containsKey(stop) || stops.get(stop) > state.getRoutingVariable(dominanceVariable)) {      stops.put(stop,state.getRoutingVariable(dominanceVariable));    }  }}  }
class C{  public Matrix4(){}  }
class C{  private Token<HtmlTokenType> parseToken(){  int start=p.getOffset();  int limit=p.getLimit();  if (start == limit) {    return null;  }  char[] buffer=p.getBuffer();  int end=start + 1;  HtmlTokenType type;  char ch=buffer[start];  if (inTag) {    if ('>' == ch) {      type=HtmlTokenType.TAGEND;      inTag=false;    } else     if ('/' == ch) {      if (end != limit && '>' == buffer[end]) {        type=HtmlTokenType.TAGEND;        inTag=false;        ++end;      } else {        type=HtmlTokenType.TEXT;      }    } else     if ('=' == ch) {      type=HtmlTokenType.TEXT;    } else     if ('"' == ch || '\'' == ch) {      if ("=".equals(lastNonIgnorable)) {        type=HtmlTokenType.QSTRING;        int delim=ch;        for (; end < limit; ++end) {          if (buffer[end] == delim) {            ++end;            break;          }        }      } else {        type=HtmlTokenType.TEXT;      }    } else     if (!Character.isWhitespace(ch)) {      type=HtmlTokenType.TEXT;      for (; end < limit; ++end) {        ch=buffer[end];        if (!"=".equals(lastNonIgnorable) && '/' == ch && end + 1 < limit && '>' == buffer[end + 1]) {          break;        } else         if ('>' == ch || '=' == ch || Character.isWhitespace(ch)) {          break;        } else         if ('"' == ch || '\'' == ch) {          if (end + 1 < limit) {            char ch2=buffer[end + 1];            if (ch2 >= 0 && Character.isWhitespace(ch2) || ch2 == '>' || ch2 == '/') {              ++end;              break;            }          }        }      }    } else {      type=HtmlTokenType.IGNORABLE;      while (end < limit && Character.isWhitespace(buffer[end])) {        ++end;      }    }  } else {    if (ch == '<') {      if (end == limit) {        type=HtmlTokenType.TEXT;      } else {        ch=buffer[end];        type=null;        State state=null;switch (ch) {case '/':          state=State.SLASH;        ++end;      break;case '!':    if (!this.inEscapeExemptBlock) {      state=State.BANG;    } else     if (HtmlTextEscapingMode.allowsEscapingTextSpan(escapeExemptTagName)) {      state=State.UNESCAPED_LT_BANG;    }  ++end;break;case '?':if (!this.inEscapeExemptBlock) {state=State.APP_DIRECTIVE;}++end;break;case '%':state=State.SERVER_CODE;++end;break;default :if (isIdentStart(ch) && !this.inEscapeExemptBlock) {state=State.TAGNAME;++end;} else if ('<' == ch) {type=HtmlTokenType.TEXT;} else {++end;}break;}if (null != state) {int ieDhCommentsBeginMarkersSeen=0;charloop: while (end < limit) {ch=buffer[end];switch (state) {case TAGNAME:if (Character.isWhitespace(ch) || '>' == ch || '/' == ch || '<' == ch) {if (this.inEscapeExemptBlock && '/' == buffer[start + 1] && textEscapingMode != HtmlTextEscapingMode.PLAIN_TEXT && name(start + 2,end).equals(escapeExemptTagName)) {this.inEscapeExemptBlock=false;this.escapeExemptTagName=null;this.textEscapingMode=null;}type=HtmlTokenType.TAGBEGIN;inTag=!this.inEscapeExemptBlock;state=State.DONE;break charloop;}break;case SLASH:if (Character.isLetter(ch)) {state=State.TAGNAME;} else {if ('<' == ch) {type=HtmlTokenType.TEXT;} else {++end;}break charloop;}break;case BANG:if ('[' == ch && asXml) {state=State.CDATA;} else if ('-' == ch) {state=State.BANG_DASH;} else if (!asXml && lookahead(buffer,end,limit,"[if ")) {state=State.IE_DR_COMMENT_BEGIN;} else if (!asXml && lookahead(buffer,end,limit,"[endif]>")) {state=State.IE_DR_COMMENT_END;} else {state=State.DIRECTIVE;}break;case CDATA:if (']' == ch) {state=State.CDATA_SQ_1;}break;case CDATA_SQ_1:if (']' == ch) {state=State.CDATA_SQ_2;} else {state=State.CDATA;}break;case CDATA_SQ_2:if ('>' == ch) {type=HtmlTokenType.CDATA;state=State.DONE;} else if (']' != ch) {state=State.CDATA;}break;case BANG_DASH:if ('-' == ch) {state=State.COMMENT;} else {state=State.DIRECTIVE;}break;case COMMENT:if ('-' == ch) {state=State.COMMENT_DASH;} else if (!asXml && lookahead(buffer,end,limit,"[if ")) {++ieDhCommentsBeginMarkersSeen;state=State.IE_DH_COMMENT_BEGIN;}break;case COMMENT_DASH:state=('-' == ch) ? State.COMMENT_DASH_DASH : State.COMMENT_DASH;break;case COMMENT_DASH_DASH:if ('>' == ch) {state=State.DONE;type=HtmlTokenType.COMMENT;} else if ('-' == ch) {state=State.COMMENT_DASH_DASH;} else {state=State.COMMENT_DASH;}break;case DIRECTIVE:if ('>' == ch) {type=HtmlTokenType.DIRECTIVE;state=State.DONE;}break;case IE_DH_COMMENT_BEGIN:if (!asXml) {if (lookahead(buffer,end,limit,"<!--[if ")) {++ieDhCommentsBeginMarkersSeen;} else if (lookahead(buffer,end,limit,"[endif]-->")) {--ieDhCommentsBeginMarkersSeen;}if (ieDhCommentsBeginMarkersSeen == 0) {state=State.IE_DH_COMMENT_END;}}break;case IE_DH_COMMENT_END:if ('>' == ch) {type=HtmlTokenType.COMMENT;state=State.DONE;}break;case IE_DR_COMMENT_BEGIN:if ('>' == ch) {type=HtmlTokenType.IE_DR_COMMENT_BEGIN;state=State.DONE;}break;case IE_DR_COMMENT_END:if ('>' == ch) {type=HtmlTokenType.IE_DR_COMMENT_END;state=State.DONE;}break;case APP_DIRECTIVE:if ('?' == ch) {state=State.APP_DIRECTIVE_QMARK;}break;case APP_DIRECTIVE_QMARK:if ('>' == ch) {type=HtmlTokenType.DIRECTIVE;state=State.DONE;} else if ('?' != ch) {state=State.APP_DIRECTIVE;}break;case SERVER_CODE:if ('%' == ch) {state=State.SERVER_CODE_PCT;}break;case SERVER_CODE_PCT:if ('>' == ch) {type=HtmlTokenType.SERVERCODE;state=State.DONE;} else if ('%' != ch) {state=State.SERVER_CODE;}break;case UNESCAPED_LT_BANG:if ('-' == ch) {state=State.UNESCAPED_LT_BANG_DASH;} else {type=HtmlTokenType.TEXT;state=State.DONE;}break;case UNESCAPED_LT_BANG_DASH:if ('-' == ch) {state=State.ESCAPING_TEXT_SPAN_DASH_DASH;} else {type=HtmlTokenType.TEXT;state=State.DONE;}break;case ESCAPING_TEXT_SPAN:if ('-' == ch) {state=State.ESCAPING_TEXT_SPAN_DASH;}break;case ESCAPING_TEXT_SPAN_DASH:if ('-' == ch) {state=State.ESCAPING_TEXT_SPAN_DASH_DASH;} else {state=State.ESCAPING_TEXT_SPAN;}break;case ESCAPING_TEXT_SPAN_DASH_DASH:if ('>' == ch) {type=HtmlTokenType.TEXT;state=State.DONE;} else if ('-' != ch) {state=State.ESCAPING_TEXT_SPAN;}break;case DONE:throw new SomethingWidgyHappenedError("Unexpectedly DONE while lexing HTML token stream");}++end;if (State.DONE == state) {break;}}if (end == limit) {switch (state) {case DONE:break;case CDATA:case CDATA_SQ_1:case CDATA_SQ_2:type=HtmlTokenType.CDATA;break;case COMMENT:case COMMENT_DASH:case COMMENT_DASH_DASH:type=HtmlTokenType.COMMENT;break;case IE_DR_COMMENT_BEGIN:type=HtmlTokenType.IE_DR_COMMENT_BEGIN;break;case IE_DR_COMMENT_END:type=HtmlTokenType.IE_DR_COMMENT_END;break;case DIRECTIVE:case APP_DIRECTIVE:case APP_DIRECTIVE_QMARK:type=HtmlTokenType.DIRECTIVE;break;case SERVER_CODE:case SERVER_CODE_PCT:type=HtmlTokenType.SERVERCODE;break;case TAGNAME:type=HtmlTokenType.TAGBEGIN;break;default :type=HtmlTokenType.TEXT;break;}}}}} else {type=null;}}if (null == type) {while (end < limit && '<' != buffer[end]) {++end;}type=HtmlTokenType.TEXT;}p.consumeTo(end);String text=p.toString(start,end);if (type != HtmlTokenType.IGNORABLE) {lastNonIgnorable=text;}return Token.instance(text,type,p.filePositionForOffsets(start,end));}  }
class C{  private static int[] intArray(double a,double b,double c,double d){  return new int[]{(int)a,(int)b,(int)c,(int)d};}  }
class C{  public static _LockLevel fromString(final String value) throws SOAPSerializationException {  return (_LockLevel)Enumeration.fromString(value,_LockLevel.VALUES_TO_INSTANCES);}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  private Node insert(Node x,Node head){  if (head == null) {    x.prev=x;    x.next=x;  } else {    head.prev.next=x;    x.next=head;    x.prev=head.prev;    head.prev=x;  }  return x;}  }
class C{  public BeanInstance(JComponent container,String beanName,int x,int y,Integer... tab){  m_x=x;  m_y=y;  try {    m_bean=Beans.instantiate(null,beanName);  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  addBean(container,tab);}  }
class C{  public CascadedTable(Table parent,Predicate rowFilter,ColumnProjection colFilter){  this(parent,rowFilter,colFilter,TableTuple.class);}  }
class C{  public static boolean testCircleTriangle(float centerX,float centerY,float radiusSquared,float v0X,float v0Y,float v1X,float v1Y,float v2X,float v2Y){  float c1x=centerX - v0X, c1y=centerY - v0Y;  float c1sqr=c1x * c1x + c1y * c1y - radiusSquared;  if (c1sqr <= 0.0f)   return true;  float c2x=centerX - v1X, c2y=centerY - v1Y;  float c2sqr=c2x * c2x + c2y * c2y - radiusSquared;  if (c2sqr <= 0.0f)   return true;  float c3x=centerX - v2X, c3y=centerY - v2Y;  float c3sqr=c3x * c3x + c3y * c3y - radiusSquared;  if (c3sqr <= 0.0f)   return true;  float e1x=v1X - v0X, e1y=v1Y - v0Y;  float e2x=v2X - v1X, e2y=v2Y - v1Y;  float e3x=v0X - v2X, e3y=v0Y - v2Y;  if (e1x * c1y - e1y * c1x >= 0.0f && e2x * c2y - e2y * c2x >= 0.0f && e3x * c3y - e3y * c3x >= 0.0f)   return true;  float k=c1x * e1x + c1y * e1y;  if (k >= 0.0f) {    float len=e1x * e1x + e1y * e1y;    if (k <= len) {      if (c1sqr * len <= k * k)       return true;    }  }  k=c2x * e2x + c2y * e2y;  if (k > 0.0f) {    float len=e2x * e2x + e2y * e2y;    if (k <= len) {      if (c2sqr * len <= k * k)       return true;    }  }  k=c3x * e3x + c3y * e3y;  if (k >= 0.0f) {    float len=e3x * e3x + e3y * e3y;    if (k < len) {      if (c3sqr * len <= k * k)       return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") private static boolean compareTyped(final Object typedVal,final int comparator,@SuppressWarnings("rawtypes") final Comparable attr){switch (comparator) {case APPROX:    if (typedVal instanceof Character) {      return compareString(String.valueOf(((Character)typedVal).toString()),comparator,((Character)attr).toString());    }case EQUALS:  return attr.compareTo(typedVal) == 0;case GREATER:return attr.compareTo(typedVal) >= 0;case LESS:return attr.compareTo(typedVal) <= 0;default :throw new IllegalStateException("Found illegal comparator.");}}  }
class C{  public String checksTurnedOffTipText(){  return "Turns time-consuming checks off - use with caution.";}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int textSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,textSize,0,-1,useSystemDefault);}  }
class C{  public DomainModelException(Throwable cause){  super(cause);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (checkStartStatus) {    drawPaint.setSelfColor(Color.WHITE);    markerPaint.setColor(Color.RED);    markAndDraw(canvas,startX - 15,startY - 15,startX + 15,startY + 15,markerPaint,drawPath,drawPaint.getSelfPainter());  } else   if (checkEndStatus) {    drawPaint.setSelfColor(Color.RED);    markAndDraw(canvas,endX - 15,endY - 15,endX + 15,endY + 15,markerPaint,drawPath,drawPaint.getSelfPainter());  } else {    measureAndDisplayDistance(startX,currentX,startY,currentY);    canvas.drawPath(drawPath,drawPaint.getSelfPainter());  }}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  DistinctCountAggregator distinctCountAggregator=(DistinctCountAggregator)aggregator;  readData();  distinctCountAggregator.readData();  if (distinctCountAggregator.valueSet != null) {    agg(distinctCountAggregator.valueSet,distinctCountAggregator.minValue);  }}  }
class C{  public boolean equals(GraphicsConfiguration config,int w,int h,Object[] args){  return config == this.config && w == this.w && h == this.h && Arrays.equals(args,this.args);}  }
class C{  public boolean isOutputShutdown(){  return isOutputShutdown;}  }
class C{  public void addListener(final IWindowManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  public GroupActivatingPanel(DatasetWithGroups dataset,Locker locker){  this.dataset=dataset;  this.locker=locker;  this.model=new Model();  initComponents();  table.setDefaultRenderer(String.class,new StringRenderer());  table.setDefaultRenderer(Boolean.class,new BooleanRenderer());  JTableHeader header=table.getTableHeader();  header.setReorderingAllowed(false);  GUIUtilities.setTableHeader(header);  table.setModel(model);}  }
class C{  public SeaGlassComboPopup(JComboBox combo){  super(combo);}  }
class C{  private void initializeFrame(){  frame=new JFrame(Messages.getString("ClientGUI.title"));  menuBar.setGame(client.getGame());  frame.setJMenuBar(menuBar);  Rectangle virtualBounds=getVirtualBounds();  if (GUIPreferences.getInstance().getWindowSizeHeight() != 0) {    int x=GUIPreferences.getInstance().getWindowPosX();    int y=GUIPreferences.getInstance().getWindowPosY();    int w=GUIPreferences.getInstance().getWindowSizeWidth();    int h=GUIPreferences.getInstance().getWindowSizeHeight();    if ((x < virtualBounds.getMinX()) || ((x + w) > virtualBounds.getMaxX())) {      x=0;    }    if ((y < virtualBounds.getMinY()) || ((y + h) > virtualBounds.getMaxY())) {      y=0;    }    if (w > virtualBounds.getWidth()) {      w=(int)virtualBounds.getWidth();    }    if (h > virtualBounds.getHeight()) {      h=(int)virtualBounds.getHeight();    }    frame.setLocation(x,y);    frame.setSize(w,h);  } else {    frame.setSize(800,600);  }  frame.setMinimumSize(new Dimension(640,480));  frame.setBackground(SystemColor.menu);  frame.setForeground(SystemColor.menuText);  List<Image> iconList=new ArrayList<Image>();  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_16X16).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_32X32).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_48X48).toString()));  iconList.add(frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_ICON_256X256).toString()));  frame.setIconImages(iconList);}  }
class C{  public DefaultTriggerItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  synchronized protected void xnTcpError(){  if (opened) {    ConnectionStatus.instance().setConnectionState(outName,ConnectionStatus.CONNECTION_DOWN);    opened=false;    if (log.isDebugEnabled()) {      log.debug("XnTcpError: TCP/IP communication dropped");    }  }}  }
class C{  public boolean m_hasSerializedObjectPolicy(){  return m_hasSerializedObjectPolicy;}  }
class C{  static void onDownloadStartNoStream(Activity activity,String url,String userAgent,String contentDisposition,String mimetype,String referer,String auth,boolean privateBrowsing,long contentLength){  contentDisposition=trimContentDisposition(contentDisposition);  String filename=URLUtil.guessFileName(url,contentDisposition,mimetype);  String status=Environment.getExternalStorageState();  if (!status.equals(Environment.MEDIA_MOUNTED)) {    int title;    String msg;    if (status.equals(Environment.MEDIA_SHARED)) {      msg=activity.getString(R.string.download_sdcard_busy_dlg_msg);      title=R.string.download_sdcard_busy_dlg_title;    } else {      msg=activity.getString(R.string.download_no_sdcard_dlg_msg,filename);      title=R.string.download_no_sdcard_dlg_title;    }    new AlertDialog.Builder(activity).setTitle(title).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(msg).setPositiveButton(R.string.ok,null).show();    return;  }  if (mimetype == null) {    new FetchUrlMimeType(activity,url,userAgent,referer,auth,privateBrowsing,filename).start();  } else {    if (DownloadDirRestriction.getInstance().downloadsAllowed()) {      startDownloadSettings(activity,url,userAgent,contentDisposition,mimetype,referer,auth,privateBrowsing,contentLength,filename);    } else {      Toast.makeText(activity,R.string.managed_by_your_administrator,Toast.LENGTH_SHORT).show();    }  }}  }
class C{  public AlchemyDataNews(){  super();}  }
class C{  public LocalVariableDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildKalavanHouseAreaChest(zone);}  }
class C{  public EmptyCollectionListException(String message){  super(message);}  }
class C{  public static void preloadIcon(Context context,ComponentName componentName,Bitmap icon,int dpi){  try {    PackageManager packageManager=context.getPackageManager();    packageManager.getActivityIcon(componentName);    return;  } catch (  PackageManager.NameNotFoundException e) {  }  final String key=componentName.flattenToString();  FileOutputStream resourceFile=null;  try {    resourceFile=context.openFileOutput(getResourceFilename(componentName),Context.MODE_PRIVATE);    ByteArrayOutputStream os=new ByteArrayOutputStream();    if (icon.compress(android.graphics.Bitmap.CompressFormat.PNG,75,os)) {      byte[] buffer=os.toByteArray();      resourceFile.write(buffer,0,buffer.length);    } else {      Log.w(TAG,"failed to encode cache for " + key);      return;    }  } catch (  FileNotFoundException e) {    Log.w(TAG,"failed to pre-load cache for " + key,e);  }catch (  IOException e) {    Log.w(TAG,"failed to pre-load cache for " + key,e);  } finally {    if (resourceFile != null) {      try {        resourceFile.close();      } catch (      IOException e) {        Log.d(TAG,"failed to save restored icon for: " + key,e);      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void write(int x,int r){  if (r == 32) {    write(x);    return;  }  if (r < 1 || r > 32)   throw new IllegalArgumentException("Illegal value for r = " + r);  if (x >= (1 << r))   throw new IllegalArgumentException("Illegal " + r + "-bit char = "+ x);  for (int i=0; i < r; i++) {    boolean bit=((x >>> (r - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  public RColumn(String colHeader,String colSQL,Class<?> colClass){  m_colHeader=colHeader;  m_colSQL=colSQL;  m_colClass=colClass;}  }
class C{  protected boolean isSupportedAnnotationClass(final Class<? extends Annotation> annoClass){  if (getLoadedAnnotationClasses().contains(annoClass)) {    return true;  } else {    AnnotationBuilder builder=new AnnotationBuilder(processingEnv,annoClass);    AnnotationMirror annoMirroResult=builder.build();    return (annoMirroResult != null);  }}  }
class C{  @Bean public EventHandler eventHandler(){  return new EventHandlerPlayOnLinuxImplementation();}  }
class C{  @Override public String toString(){  String pattern="start={0,number,#}&end={1,number,#}&m={2}{3}&ms=true&show_tsuids=true";  long start=Math.max(0,getStartTimestamp() - 1);  long end=Math.max(start,getEndTimestamp() + 1);  StringBuilder sb=new StringBuilder();  sb.append(getAggregator() == null ? "avg" : getAggregator().getDescription()).append(":");  if (getDownsampler() != null) {    sb.append(getDownsamplingPeriod()).append("ms").append("-").append(getDownsampler().getDescription()).append(":");  }  sb.append(getTSDBMetricName());  Map<String,String> tags=new HashMap<>(getTags());  try {    return MessageFormat.format(pattern,start,end,sb.toString(),toTagParameterArray(tags));  } catch (  UnsupportedEncodingException ex) {    throw new SystemException(ex);  }}  }
class C{  public boolean taskkill(boolean forceful) throws IOException, InterruptedException {  try {    new ProcessExecutor().commandSplit(String.format("taskkill%s%s /PID %d",includeChildren ? " /T" : "",forceful ? " /F" : "",pid)).redirectOutput(Slf4jStream.ofCaller().asDebug()).exitValueNormal().executeNoTimeout();    return true;  } catch (  InvalidExitValueException e) {    if (e.getExitValue() == EXIT_CODE_COULD_NOT_BE_TERMINATED) {      if (isAlive()) {        throw e;      }      return false;    }    if (e.getExitValue() == EXIT_CODE_NO_SUCH_PROCESS) {      return false;    }    throw e;  }}  }
class C{  private PIRSFHmmer2RawMatch doSubfamilyFiltering(final RawProtein<PIRSFHmmer2RawMatch> protein,final Map<String,PirsfDatRecord> pirsfDatRecordMap,final Map<String,String> subfamToSuperFamMap){  Double minEvalue=null;  PIRSFHmmer2RawMatch matchWithMinEvalue=null;  for (  PIRSFHmmer2RawMatch match : protein.getMatches()) {    String subfamModelId=match.getModelId();    if (subfamToSuperFamMap.containsKey(subfamModelId)) {      PirsfDatRecord pirsfDatRecord=pirsfDatRecordMap.get(subfamModelId);      if (pirsfDatRecord == null) {        LOGGER.warn("Model Id " + subfamModelId + " not found in the pirsf.dat file, raw match rejected: "+ match);        continue;      }      if (!checkMinScoreCriterion(match,pirsfDatRecord)) {        if (LOGGER.isInfoEnabled()) {          LOGGER.info("Removing PIRSF match with model Id " + subfamModelId + "...");        }        continue;      }      double eValue=match.getLocationEvalue();      if (minEvalue == null || eValue < minEvalue) {        minEvalue=eValue;        matchWithMinEvalue=match;      }    } else {      LOGGER.debug("Model Id " + subfamModelId + " isn't a subfamilies. Therefore discard this and iterate over the next match.");      continue;    }  }  return matchWithMinEvalue;}  }
class C{  public int read() throws IOException {  int ch1=is.read();  int ch2=is.read();  if (ch2 < 0)   return -1;  return (ch2 << 8) + ch1;}  }
class C{  public static void resetLast(){  Env.getCtx().remove(LAST_ERROR);  Env.getCtx().remove(LAST_EXCEPTION);  Env.getCtx().remove(LAST_WARNING);  Env.getCtx().remove(LAST_INFO);}  }
class C{  public void hideZoomRectangle(){  ChartViewerSkin skin=(ChartViewerSkin)getSkin();  skin.setZoomRectangleVisible(false);}  }
class C{  public void flexDownAService(int numInstancesToScaleDown,String serviceName){  LOGGER.info("About to flex down {} instances of {}",numInstancesToScaleDown,serviceName);  int numScaledDown=0;  if (numScaledDown < numInstancesToScaleDown) {    Collection<Protos.TaskID> pendingTasks=this.schedulerState.getPendingTaskIds(serviceName);    for (    Protos.TaskID taskId : pendingTasks) {      this.schedulerState.makeTaskKillable(taskId);      numScaledDown++;      if (numScaledDown >= numInstancesToScaleDown) {        break;      }    }  }  int numPendingTasksScaledDown=numScaledDown;  if (numScaledDown < numInstancesToScaleDown) {    Collection<Protos.TaskID> stagingTasks=this.schedulerState.getStagingTaskIds(serviceName);    for (    Protos.TaskID taskId : stagingTasks) {      this.schedulerState.makeTaskKillable(taskId);      numScaledDown++;      if (numScaledDown >= numInstancesToScaleDown) {        break;      }    }  }  int numStagingTasksScaledDown=numScaledDown - numPendingTasksScaledDown;  Set<NodeTask> activeTasks=this.schedulerState.getActiveTasksByType(serviceName);  if (numScaledDown < numInstancesToScaleDown) {    for (    NodeTask nodeTask : activeTasks) {      this.schedulerState.makeTaskKillable(nodeTask.getTaskStatus().getTaskId());      numScaledDown++;      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Marked NodeTask {} on host {} for kill.",nodeTask.getTaskStatus().getTaskId(),nodeTask.getHostname());      }      if (numScaledDown >= numInstancesToScaleDown) {        break;      }    }  }  LOGGER.info("Flexed down {} of {} instances including {} staging instances, and {} pending instances of {}",numScaledDown,numInstancesToScaleDown,numStagingTasksScaledDown,numPendingTasksScaledDown,serviceName);}  }
class C{  public void onMouseOut(){  if (pressed) {    return;  }  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItem());  } else {    element.setClassName(css.menuBarItemDisabled());  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int timeSeries[][][],int agentIndex1,int agentIndex2){  int timeSteps=timeSeries.length;  double[] localPredictive=new double[timeSteps];  if (timeSteps < k + (k - 1)) {    return localPredictive;  }  average=0;  max=0;  min=0;  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=timeSeries[p][agentIndex1][agentIndex2];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + p][agentIndex1][agentIndex2];  }  double logTerm=0.0;  for (int t=k; t < timeSteps - (k - 1); t++) {    nextVal-=maxShiftedValue[timeSeries[t - 1][agentIndex1][agentIndex2]];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + t][agentIndex1][agentIndex2];    logTerm=((double)jointCount[nextVal][prevVal]) / ((double)nextCount[nextVal] * (double)prevCount[prevVal]);    logTerm*=(double)observations;    localPredictive[t]=Math.log(logTerm) / log_base;    average+=localPredictive[t];    if (localPredictive[t] > max) {      max=localPredictive[t];    } else     if (localPredictive[t] < min) {      min=localPredictive[t];    }    prevVal-=maxShiftedValue[timeSeries[t - k][agentIndex1][agentIndex2]];    prevVal*=numDiscreteValues;    prevVal+=timeSeries[t][agentIndex1][agentIndex2];  }  average=average / (double)(timeSteps - k - (k - 1));  return localPredictive;}  }
class C{  public static void print(final JFrame parent,final ZyGraph graph){  final String[] area={"Print the visible part of the graph only","Print the whole graph"};  final OptionHandler printOptions=new OptionHandler("Print Options");  printOptions.addInt("Poster rows",1);  printOptions.addInt("Poster columns",1);  printOptions.addBool("Add poster coordinates",false);  printOptions.addEnum("Print Area",area,1);  final Graph2DPrinter gprinter=new Graph2DPrinter(graph.getView());  if (!printOptions.showEditor()) {    return;  }  gprinter.setPosterRows(printOptions.getInt("Poster rows"));  gprinter.setPosterColumns(printOptions.getInt("Poster columns"));  gprinter.setPrintPosterCoords(printOptions.getBool("Add poster coordinates"));  if (printOptions.get("Print Area").equals("Print the whole graph")) {    gprinter.setClipType(Graph2DPrinter.CLIP_GRAPH);  } else {    gprinter.setClipType(Graph2DPrinter.CLIP_VIEW);  }  final PrinterJob printJob=PrinterJob.getPrinterJob();  PageFormat pageFormat=printJob.defaultPage();  final PageFormat pageFormat2=printJob.pageDialog(pageFormat);  if (pageFormat2 == pageFormat) {    return;  }  pageFormat=pageFormat2;  printJob.setPrintable(gprinter,pageFormat);  if (printJob.printDialog()) {    try {      printJob.print();    } catch (    final PrinterException exception) {      final String innerMessage="E00119: " + "Graph could not be printed";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The graph '%s' could not be printed because there was a problem with the printer.",graph.getRawView().getName()),new String[]{"There was a problem with the printer."},new String[]{"The print operation could not be completed."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);    }  }}  }
class C{  public void onDataChange(T value){}  }
class C{  public boolean removeLeadingEmptyLines(){  boolean wasEmpty=false;  Line line=this.lines;  while (line != null && line.isEmpty) {    this.removeLine(line);    line=this.lines;    wasEmpty=true;  }  return wasEmpty;}  }
class C{  private static String serializeDocumentInt(Document doc) throws TransformerException, IOException {  ByteArrayOutputStream s=new ByteArrayOutputStream();  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.METHOD,"xml");  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  DOMSource source=new DOMSource(doc);  StreamResult outputTarget=new StreamResult(s);  transformer.transform(source,outputTarget);  return s.toString("UTF8");}  }
class C{  public void add(int data){  add(data,true);}  }
class C{  private static void highlightCodeNode(final INaviCodeNode cnode,final CSpecialInstruction instructionResult){  final INaviInstruction searchInstruction=instructionResult.getInstruction();  if (!CCodeNodeHelpers.containsAddress(cnode,searchInstruction.getAddress())) {    return;  }  for (  final INaviInstruction instruction : cnode.getInstructions()) {    if (searchInstruction == instruction) {      cnode.setInstructionColor(instruction,CHighlightLayers.SPECIAL_INSTRUCTION_LAYER,instructionResult.getType().getColor());    }  }}  }
class C{  @Override public boolean contains(Object o){  Object[] elements=array;  return indexOf(o,elements,0,elements.length) >= 0;}  }
class C{  public static CommMessage createResponse(CommMessage request,Value value){  return new CommMessage(request.id,request.operationName,"/",Value.createDeepCopy(value),null);}  }
class C{  public static void reverseDirectionDependentTags(OsmElement e,Map<String,String> dirTags,boolean reverseOneway){  if (e.getTags() == null) {    return;  }  Map<String,String> tags=new TreeMap<String,String>(e.getTags());  for (  String key : dirTags.keySet()) {    if (!key.equals("oneway") || reverseOneway) {      String value=tags.get(key).trim();      tags.remove(key);      if (key.equals("oneway")) {        tags.put(key,reverseOneway(value));        continue;      }      if (key.equals("direction")) {        tags.put(key,reverseDirection(value));        continue;      }      if (key.equals("incline")) {        tags.put(key,reverseIncline(value));        continue;      }      if (key.equals("turn:lanes") || key.equals("turn")) {        tags.put(key,reverseTurnLanes(value));        continue;      }      if (key.endsWith(":left")) {        tags.put(key.substring(0,key.length() - 5) + ":right",value);        continue;      }      if (key.endsWith(":right")) {        tags.put(key.substring(0,key.length() - 6) + ":left",value);        continue;      }      if (key.endsWith(":backward")) {        tags.put(key.substring(0,key.length() - 9) + ":forward",value);        continue;      }      if (key.endsWith(":forward")) {        tags.put(key.substring(0,key.length() - 8) + ":backward",value);        continue;      }      if (key.indexOf(":forward:") >= 0) {        tags.put(key.replace(":forward:",":backward:"),value);        continue;      }      if (key.indexOf(":backward:") >= 0) {        tags.put(key.replace(":backward:",":forward:"),value);        continue;      }      if (key.indexOf(":right:") >= 0) {        tags.put(key.replace(":right:",":left:"),value);        continue;      }      if (key.indexOf(":left:") >= 0) {        tags.put(key.replace(":left:",":right:"),value);        continue;      }      if (value.equals("right")) {        tags.put(key,"left");        continue;      }      if (value.equals("left")) {        tags.put(key,"right");        continue;      }      if (value.equals("forward")) {        tags.put(key,"backward");        continue;      }      if (value.equals("backward")) {        tags.put(key,"forward");        continue;      }      tags.put(key,value);    }  }  e.setTags(tags);}  }
class C{  public Vector floor(){  return new Vector(Math.floor(x),Math.floor(y),Math.floor(z));}  }
class C{  @Override public Object clone(){  HashMapPro<K,V> result=null;  try {    result=(HashMapPro<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {  }  result.table=new Entry[table.length];  result.entrySet=null;  result.modCount=0;  result.size=0;  result.init();  result.putAllForCreate(this);  return result;}  }
class C{  public DemoAppBarHandler(AppCompatActivity activity){  this.activity=activity;}  }
class C{  public void writeField(String name,boolean value) throws java.io.IOException {  writeField(name,new Boolean(value).toString());}  }
class C{  public boolean partial(){  return partial;}  }
class C{  public void save(){  if (!isTokenValid()) {    return;  }  try {    HashMap<String,String> map=new HashMap<String,String>();    if (items != null) {      for (      ConfigurationItem item : items.values()) {        if (item.isDirty()) {          String value=item.getValue();          if (value != null) {            value=value.trim();          }          map.put(item.getKey(),value);        }      }    }    platformService.storeControllerSettings(controllerAccess.getControllerId(),map,new PasswordAuthentication(username,password));    setInfoStatus(Messages.get(locale,"ui.config.status.saved"));  } catch (  Throwable e) {    LOGGER.error("Failed to save items",e);    setErrorStatus(e);  }  readConfiguration();  isSaved=true;  resetItems();  resetToken();}  }
class C{  private void initNamespaces(){  Stack stack;  MappingRecord nn;  nn=new MappingRecord(EMPTYSTRING,EMPTYSTRING,-1);  stack=createPrefixStack(EMPTYSTRING);  stack.push(nn);  nn=new MappingRecord(XML_PREFIX,"http://www.w3.org/XML/1998/namespace",-1);  stack=createPrefixStack(XML_PREFIX);  stack.push(nn);}  }
class C{  public static String convertBytesToVersionString(int[] components){  StringBuffer version=new StringBuffer();  for (int i=0; i < 4 && i < components.length; i++) {    if (i == 2)     version.append('.');    String digit=String.valueOf((char)components[i]);    if (i == 0 && "0".equals(digit))     continue;    version.append(digit);  }  return version.toString();}  }
class C{  public static StringBuilder navurlBase(final RequestHeader.FileType ext,final QueryParams theQuery,final String newModifier,boolean newModifierReplacesOld){  StringBuilder sb=new StringBuilder(120);  sb.append("/yacysearch.");  sb.append(ext.name().toLowerCase());  sb.append("?query=");  sb.append(theQuery.getQueryGoal().getQueryString(true));  if (newModifier == null) {    if (!theQuery.modifier.isEmpty())     sb.append("+" + theQuery.modifier.toString());  } else {    if (!newModifier.isEmpty()) {      if (!theQuery.modifier.isEmpty())       sb.append("+" + theQuery.modifier.toString());      if (newModifierReplacesOld) {        int nmpi=newModifier.indexOf(":");        if (nmpi > 0) {          String nmp=newModifier.substring(0,nmpi) + ":";          int i=sb.indexOf(nmp);          if (i > 0)           sb=new StringBuilder(sb.substring(0,i).trim());          if (sb.charAt(sb.length() - 1) == '+')           sb.setLength(sb.length() - 1);        }      }      try {        sb.append("+" + URLEncoder.encode(newModifier,StandardCharsets.UTF_8.name()));      } catch (      final UnsupportedEncodingException e) {        sb.append("+" + newModifier);      }    }  }  sb.append("&maximumRecords=");  sb.append(theQuery.itemsPerPage());  sb.append("&resource=");  sb.append((theQuery.isLocal()) ? "local" : "global");  sb.append("&verify=");  sb.append(theQuery.snippetCacheStrategy == null ? "false" : theQuery.snippetCacheStrategy.toName());  sb.append("&prefermaskfilter=");  sb.append(theQuery.prefer);  sb.append("&cat=href");  sb.append("&constraint=");  sb.append((theQuery.constraint == null) ? "" : theQuery.constraint.exportB64());  sb.append("&contentdom=");  sb.append(theQuery.contentdom.toString());  sb.append("&former=");  sb.append(theQuery.getQueryGoal().getQueryString(true));  return sb;}  }
class C{  private void validateBusinessObjectDefinitionTagKey(BusinessObjectDefinitionTagKey key){  Assert.notNull(key,"A business object definition tag key must be specified.");  businessObjectDefinitionHelper.validateBusinessObjectDefinitionKey(key.getBusinessObjectDefinitionKey());  tagHelper.validateTagKey(key.getTagKey());}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeWhiteSpaceInfo(this);}  }
class C{  static public Test suite(){  return ProxySuiteHelper.suiteWhenStandalone(TestSparqlUpdate.class,"test.*",new LinkedHashSet<BufferMode>(Arrays.asList(new BufferMode[]{BufferMode.Transient,BufferMode.DiskWORM,BufferMode.MemStore,BufferMode.DiskRW})),TestMode.quads);}  }
class C{  public static void dumpString(String str){  org.jikesrvm.VM.sysWriteln(str);}  }
class C{  public void testModerateDuration() throws Exception {  doTest(100);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VOCAB:    return isSetVocab();case LAYER_SIZE:  return isSetLayerSize();case VECTORS:return isSetVectors();}throw new IllegalStateException();}  }
class C{  public static File parse(String[] options,char option,File defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument01.class,args);}  }
class C{  public static boolean isSingleValue(int optionNumber){switch (optionNumber) {case CONTENT_FORMAT:case MAX_AGE:case PROXY_URI:case PROXY_SCHEME:case URI_HOST:case URI_PORT:case IF_NONE_MATCH:case OBSERVE:case ACCEPT:default :    return true;case ETAG:case IF_MATCH:case URI_PATH:case URI_QUERY:case LOCATION_PATH:case LOCATION_QUERY:  return false;}}  }
class C{  private static void computeNextCCWEdges(Node node,long label){  DirectedEdgeStar deStar=node.getOutEdges();  PolygonizeDirectedEdge firstOutDE=null;  PolygonizeDirectedEdge prevInDE=null;  List edges=deStar.getEdges();  for (int i=edges.size() - 1; i >= 0; i--) {    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)edges.get(i);    PolygonizeDirectedEdge sym=(PolygonizeDirectedEdge)de.getSym();    PolygonizeDirectedEdge outDE=null;    if (de.getLabel() == label)     outDE=de;    PolygonizeDirectedEdge inDE=null;    if (sym.getLabel() == label)     inDE=sym;    if (outDE == null && inDE == null)     continue;    if (inDE != null) {      prevInDE=inDE;    }    if (outDE != null) {      if (prevInDE != null) {        prevInDE.setNext(outDE);        prevInDE=null;      }      if (firstOutDE == null)       firstOutDE=outDE;    }  }  if (prevInDE != null) {    Assert.isTrue(firstOutDE != null);    prevInDE.setNext(firstOutDE);  }}  }
class C{  private static void addVarrayStorageSystem(String virtualArrayId,String id){  List<URI> storagePorts=Lists.newArrayList();  URI storageSystemId=uri(id);  List<StoragePortRestRep> ports=StoragePortUtils.getStoragePortsByStorageSystem(storageSystemId);  storagePorts.addAll(ResourceUtils.ids(ports));  if (!storagePorts.isEmpty()) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePorts(storagePorts,addVirtualArray(virtualArray));  }}  }
class C{  private String convertListOfForecastToString(JSONObject jsonObject,String language,String units,boolean addDate){  String responseToUser="";  for (int i=0; i < jsonObject.getJSONArray("list").length(); i++) {    JSONObject internalJSON=jsonObject.getJSONArray("list").getJSONObject(i);    responseToUser+=convertInternalInformationToString(internalJSON,language,units,addDate);  }  return responseToUser;}  }
class C{  private int processInBox() throws Exception {  Folder folder;  folder=m_store.getDefaultFolder();  if (folder == null)   throw new IllegalStateException("No default folder");  Folder inbox=folder.getFolder("INBOX");  if (!inbox.exists())   throw new IllegalStateException("No Inbox");  inbox.open(Folder.READ_WRITE);  log.fine("processInBox - " + inbox.getName() + "; Messages Total="+ inbox.getMessageCount()+ "; New="+ inbox.getNewMessageCount());  Folder requestFolder=folder.getFolder("CRequest");  if (!requestFolder.exists() && !requestFolder.create(Folder.HOLDS_MESSAGES))   throw new IllegalStateException("Cannot create Request Folder");  requestFolder.open(Folder.READ_WRITE);  Folder workflowFolder=folder.getFolder("CWorkflow");  if (!workflowFolder.exists() && !workflowFolder.create(Folder.HOLDS_MESSAGES))   throw new IllegalStateException("Cannot create Workflow Folder");  workflowFolder.open(Folder.READ_WRITE);  Folder errorFolder=folder.getFolder("AdempiereError");  if (!errorFolder.exists() && !errorFolder.create(Folder.HOLDS_MESSAGES))   throw new IllegalStateException("Cannot create Error Folder");  errorFolder.open(Folder.READ_WRITE);  Message[] messages=inbox.getMessages();  int noProcessed=0;  int noError=0;  for (int i=0; i < messages.length; i++) {    Message msg=messages[i];    int result=processMessage(msg);    if (result == REQUEST) {      msg.setFlag(Flags.Flag.SEEN,true);      msg.setFlag(Flags.Flag.ANSWERED,true);      requestFolder.appendMessages(new Message[]{msg});    } else     if (result == WORKFLOW) {      msg.setFlag(Flags.Flag.SEEN,true);      msg.setFlag(Flags.Flag.ANSWERED,true);      workflowFolder.appendMessages(new Message[]{msg});    } else     if (result == DELIVERY) {      msg.setFlag(Flags.Flag.SEEN,true);      msg.setFlag(Flags.Flag.ANSWERED,true);    } else {      errorFolder.appendMessages(new Message[]{msg});      noError++;    }    noProcessed++;  }  log.info("processInBox - Total=" + noProcessed + " - Errors="+ noError);  errorFolder.close(false);  requestFolder.close(false);  workflowFolder.close(false);  inbox.close(true);  return noProcessed;}  }
class C{  byte[] read(File file){  byte[] bytes=new byte[(int)file.length()];  DataInputStream in=null;  try {    in=new DataInputStream(new FileInputStream(file));    in.readFully(bytes);  } catch (  IOException e) {    error("Error reading file: " + e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        error("Error closing file: " + e);      }    }  }  return bytes;}  }
class C{  @Override public void onAction(){  if (!entity.isHidden()) {    onAction(ActionType.USE);  }}  }
class C{  static void nextIteration(Configuration conf){  conf.setInt(STEP_PROP,getCurrentIteration(conf) + 1);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public boolean execute(){  while (!checkPromptNeeded()) {    Object[] possibleValues;    if (action != null) {      possibleValues=new Object[]{Bundle.getMessage("ButtonContinue"),Bundle.getMessage("ButtonAbort"),action};    } else {      possibleValues=new Object[]{Bundle.getMessage("ButtonContinue"),Bundle.getMessage("ButtonAbort")};    }    int selectedValue=JOptionPane.showOptionDialog(component,warning,Bundle.getMessage("ShutDownWarningTitle"),JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,possibleValues,possibleValues[possibleValues.length - 1]);    if (selectedValue == 1) {      return false;    } else     if (selectedValue == 0) {      return true;    } else     if (selectedValue == 2) {      return doPrompt();    } else     if (selectedValue == -1) {      return doClose();    } else {      log.error("unexpected selection: " + selectedValue);      return true;    }  }  return true;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  boolean appended=false;  if (this.weeks != 0 || appended) {    appended=true;    s.append(this.weeks + " Wochen ");  }  if (this.days != 0 || appended) {    appended=true;    s.append(this.days + " Tage ");  }  if (this.hours != 0 || appended) {    appended=true;    s.append(this.hours + " Stunden ");  }  if (this.minutes != 0 || appended) {    appended=true;    s.append(this.minutes + " Minuten ");  }  if (this.seconds != 0 || appended) {    appended=true;    s.append(this.seconds + " Sekunden ");  }  if (this.milliseconds != 0 || appended) {    appended=true;    s.append(this.milliseconds + " Milisekunden");  }  return s.toString();}  }
class C{  public void testSortTwoFields() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("tievalue","tied",Field.Store.NO));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("tievalue","tied",Field.Store.NO));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Map<String,Type> mappings=new HashMap<>();  mappings.put("tievalue",Type.SORTED);  mappings.put("value",Type.SORTED);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),mappings);  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("tievalue",SortField.Type.STRING),new SortField("value",SortField.Type.STRING));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  void stopEditing(){  if (editedText != null) {    TextNode node=(TextNode)editedText.getParent();    editedText.getDocument().removeDocumentListener(docListener);    editedText.setEditing(false);    if (editedText.getDocument().getLength() == 0) {      networkPanel.getNetwork().deleteText(node.getTextObject());      editedText.removeFromParent();    } else {      try {        node.getTextObject().setText(editedText.getDocument().getText(0,editedText.getDocument().getLength()));      } catch (      BadLocationException e) {        e.printStackTrace();      }      node.update();    }    editor.setVisible(false);    canvas.repaint();    editedText=null;  }}  }
class C{  public static void start(final int i,final String config,final boolean clearDatabase,final boolean startActiveMQServer) throws Exception {  throw new IllegalStateException("Method to start a server is not implemented");}  }
class C{  @Ignore public void telClientTest(){  try {    TcpProviderPoc.getInstance().request();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override protected void cacheWriteBeforePut(EntryEventImpl event,Set netWriteRecipients,CacheWriter localWriter,boolean requireOldValue,Object expectedOldValue) throws CacheWriterException, TimeoutException {  if ((localWriter != null || (netWriteRecipients != null && !netWriteRecipients.isEmpty())) && !event.inhibitAllNotifications()) {    final boolean isNewKey=event.getOperation().isCreate();    final long start=getCachePerfStats().startCacheWriterCall();    try {      SearchLoadAndWriteProcessor processor=SearchLoadAndWriteProcessor.getProcessor();      processor.initialize(this,"preUpdate",null);      try {        if (!isNewKey) {          processor.doNetWrite(event,netWriteRecipients,localWriter,SearchLoadAndWriteProcessor.BEFOREUPDATE);        } else {          processor.doNetWrite(event,netWriteRecipients,localWriter,SearchLoadAndWriteProcessor.BEFORECREATE);        }      }  finally {        processor.release();      }    }  finally {      getCachePerfStats().endCacheWriterCall(start);    }  }  serverPut(event,requireOldValue,expectedOldValue);}  }
class C{  public void checkLoadScript(){}  }
class C{  public NameResolver(){  this("java.lang.Object");}  }
class C{  public boolean volumeCanBeExpanded(Volume volume){  if ((BlockFullCopyUtils.isVolumeFullCopy(volume,_dbClient)) || (BlockFullCopyUtils.isVolumeFullCopySource(volume,_dbClient))) {    BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(volume);    return fullCopyApiImpl.volumeCanBeExpanded(volume);  }  return true;}  }
class C{  String generateSignature(final String data,final OAuthToken token){  byte[] byteHMAC=null;  try {    final Mac mac=Mac.getInstance(HMAC_SHA1);    SecretKeySpec spec;    if (null == token) {      final String oauthSignature=HttpParameter.encode(consumerSecret) + "&";      spec=new SecretKeySpec(oauthSignature.getBytes(),HMAC_SHA1);    } else {      spec=token.getSecretKeySpec();      if (null == spec) {        final String oauthSignature=HttpParameter.encode(consumerSecret) + "&" + HttpParameter.encode(token.getTokenSecret());        spec=new SecretKeySpec(oauthSignature.getBytes(),HMAC_SHA1);        token.setSecretKeySpec(spec);      }    }    mac.init(spec);    byteHMAC=mac.doFinal(data.getBytes());  } catch (  final InvalidKeyException ike) {    logger.error("Failed initialize \"Message Authentication Code\" (MAC)",ike);    throw new AssertionError(ike);  }catch (  final NoSuchAlgorithmException nsae) {    logger.error("Failed to get HmacSHA1 \"Message Authentication Code\" (MAC)",nsae);    throw new AssertionError(nsae);  }  return BASE64Encoder.encode(byteHMAC);}  }
class C{  @DSModeled(DSC.SAFE) private void incrementCursors(){  mCursorLeft.moveToNext();  mCursorRight.moveToNext();}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public void writeBlockLight(ByteBuf output){  output.writeBytes(blockLight.getHandle());}  }
class C{  public BadPartitioningException(String message){  super(message);}  }
class C{  public double[] computeLocal(int states[][][],int sourceRowIndex,int sourceColumnIndex,int destRowIndex,int destColumnIndex){  initialise();  addObservations(states,sourceRowIndex,sourceColumnIndex,destRowIndex,destColumnIndex);  return computeLocalFromPreviousObservations(states,sourceRowIndex,sourceColumnIndex,destRowIndex,destColumnIndex);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  static int pageSize(){  if (pageSize == -1)   pageSize=unsafe.pageSize();  return pageSize;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.652 -0500",hash_original_method="E5E5510E122401D8059641DFB570004B",hash_generated_method="3DE78C565F73DA56CFFAB5CDE44EF625") protected void finalize(){  this.stopStack();}  }
class C{  public static boolean isEmpty(final char[] array){  return array == null || array.length == 0;}  }
class C{  protected void onClickBackView(int position){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onClickBackView(position);  }}  }
class C{  @SuppressWarnings("deprecation") @Override public void init(Context context,float startMidX,float startMidY){  Resources res=context.getResources();  init(res);  this.startMidX=startMidX;  this.startMidY=startMidY;  width=drawable.getIntrinsicWidth();  height=drawable.getIntrinsicHeight();  float centerX;  float centerY;  float scaleX;  float scaleY;  float angle;  if (firstLoad) {    centerX=startMidX;    centerY=startMidY;    float scaleFactor=(float)(Math.max(displayWidth,displayHeight) / (float)Math.max(width,height) * INITIAL_SCALE_FACTOR);    scaleX=scaleY=scaleFactor;    angle=0.0f;    firstLoad=false;  } else {    centerX=this.centerX;    centerY=this.centerY;    scaleX=this.scaleX;    scaleY=this.scaleY;    angle=this.angle;  }  setPos(centerX,centerY,scaleX,scaleY,angle);}  }
class C{  public final void consume() throws IOException {  Assertions.checkState(dataSourceStream != null);  consumeStream(dataSourceStream);}  }
class C{  protected ApproximationLine progressiveKnnDistanceApproximation(int k_max){  if (!isLeaf()) {    throw new UnsupportedOperationException("Progressive KNN-distance approximation " + "is only vailable in leaf nodes!");  }  int k_0=0;  double y_1=Double.POSITIVE_INFINITY;  double y_kmax=Double.POSITIVE_INFINITY;  for (int i=0; i < getNumEntries(); i++) {    MkCoPLeafEntry entry=(MkCoPLeafEntry)getEntry(i);    ApproximationLine approx=entry.getProgressiveKnnDistanceApproximation();    k_0=Math.max(approx.getK_0(),k_0);  }  for (int i=0; i < getNumEntries(); i++) {    MkCoPLeafEntry entry=(MkCoPLeafEntry)getEntry(i);    ApproximationLine approx=entry.getProgressiveKnnDistanceApproximation();    y_1=Math.min(approx.getValueAt(k_0),y_1);    y_kmax=Math.min(approx.getValueAt(k_max),y_kmax);  }  double m=(y_kmax - y_1) / (Math.log(k_max) - Math.log(k_0));  double t=y_1 - m * Math.log(k_0);  return new ApproximationLine(k_0,m,t);}  }
class C{  public static String findSmallestFile(JobConf job,String inputPath) throws FileNotFoundException, IOException {  String smallestFile=null;  Path p=new Path(inputPath);  FileSystem fs=p.getFileSystem(job);  if (!fs.isDirectory(p))   smallestFile=p.makeQualified(fs).toString(); else {    FileStatus[] stats=fs.listStatus(p,hiddenFileFilter);    if (stats.length == 0)     smallestFile=""; else {      smallestFile=stats[0].getPath().toString();      for (int j=1; j < stats.length; j++) {        String f=stats[j].getPath().toString();        if (f.compareTo(smallestFile) < 0)         smallestFile=f;      }    }  }  return smallestFile;}  }
class C{  private Set<NodePair> nonadjacencies(Graph graph){  Set<NodePair> nonadjacencies=new HashSet<>();  for (  Graph inputPag : input) {    for (    NodePair pair : allNodePairs(inputPag.getNodes())) {      if (!inputPag.isAdjacentTo(pair.getFirst(),pair.getSecond())) {        nonadjacencies.add(new NodePair(graph.getNode(pair.getFirst().getName()),graph.getNode(pair.getSecond().getName())));      }    }  }  return nonadjacencies;}  }
class C{  public int compareTo(NamedMediaType other){  return _name.compareTo(other._name);}  }
class C{  @ToString public String toString(){  List<DateTimeFieldType> fields=new ArrayList<DateTimeFieldType>();  fields.add(DateTimeFieldType.monthOfYear());  fields.add(DateTimeFieldType.dayOfMonth());  return ISODateTimeFormat.forFields(fields,true,true).print(this);}  }
class C{  protected boolean isTimeZone(Word w){  return w.form.equals("AST") || w.form.equals("CST") || w.form.equals("EST")|| w.form.equals("HST")|| w.form.equals("MST")|| w.form.equals("PST")|| w.form.equals("ADT")|| w.form.equals("CDT")|| w.form.equals("EDT")|| w.form.equals("HDT")|| w.form.equals("MDT")|| w.form.equals("PDT")|| w.form.equals("UTC")|| w.form.equals("UTC-11");}  }
class C{  public HttpSendOutputStream(OutputStream out,HttpSendSocket owner) throws IOException {  super(out);  this.owner=owner;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTB16");  translateAll(environment,instruction,"SXTB16",instructions);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowMediaPlayer.getAudioRenderFilter();}  }
class C{  public void report(List<Page> result){  sortAuthority(result);  System.out.println("AUTHORITY RANKINGS : ");  for (int i=0; i < result.size(); i++) {    Page currP=result.get(i);    System.out.printf(currP.getLocation() + ": " + "%.5f"+ '\n',currP.authority);  }  System.out.println();  sortHub(result);  System.out.println("HUB RANKINGS : ");  for (int i=0; i < result.size(); i++) {    Page currP=result.get(i);    System.out.printf(currP.getLocation() + ": " + "%.5f"+ '\n',currP.hub);  }  System.out.println();  System.out.println("Page with highest Authority score: " + getMaxAuthority(result).getLocation());  System.out.println("Page with highest Hub score: " + getMaxAuthority(result).getLocation());}  }
class C{  public In(){  scanner=new Scanner(new BufferedInputStream(System.in),CHARSET_NAME);  scanner.useLocale(LOCALE);}  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public Semaphore(){}  }
class C{  public void addData(String name,byte[] data,String mimeType){  args.put(name,data);  mimeTypes.put(name,mimeType);  if (!filenames.containsKey(name)) {    filenames.put(name,name);  }  filesizes.put(name,String.valueOf(data.length));}  }
class C{  public UF8(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  createPreferenceHierarchy();}  }
class C{  private void renderTaggedGraphNodeNode(final CTaggedGraphNodeNode node){  final INaviViewNode rawNode=node.getGraphNode().getRawNode();  if (rawNode.isTagged() && rawNode.isSelected()) {    setForeground(COLOR_TAGGED_SELECTED_ALL);  } else   if (rawNode.isTagged() && !rawNode.isVisible()) {    setForeground(COLOR_TAGGED_INVISIBLE);  }  setToolTipText(buildToolTip(node.getGraphNode()));}  }
class C{  public int addJSON(JSONObject j,Table table){  if (!mDb.belowMemThreshold()) {    Log.e(LOGTAG,"There is not enough space left on the device to store events, so data was discarded");    return DB_OUT_OF_MEMORY_ERROR;  }  final String tableName=table.getName();  Cursor c=null;  int count=DB_UPDATE_ERROR;synchronized (mDb) {    try {      final SQLiteDatabase db=mDb.getWritableDatabase();      final ContentValues cv=new ContentValues();      cv.put(KEY_DATA,j.toString());      cv.put(KEY_CREATED_AT,System.currentTimeMillis());      db.insert(tableName,null,cv);      c=db.rawQuery("SELECT COUNT(*) FROM " + tableName,null);      c.moveToFirst();      count=c.getInt(0);    } catch (    final SQLiteException e) {      Log.e(LOGTAG,"Could not add data to table " + tableName + ". Re-initializing database.",e);      if (c != null) {        c.close();        c=null;      }      initDB();    }catch (    final IllegalStateException e) {      Log.e(LOGTAG,"Could not add data to table " + tableName + ". Re-initializing database.",e);      if (c != null) {        c.close();        c=null;      }      initDB();    } finally {      if (c != null) {        c.close();      }      mDb.close();    }  }  return count;}  }
class C{  public void testEmptyCollections(){  assertThat((ImmutableSet<?>)emptyAggregationFor(field("immutableSet"))).isEqualTo(ImmutableSet.of());  assertThat((Set<?>)emptyAggregationFor(field("set"))).isEqualTo(ImmutableSet.of());  assertThat((Collection<?>)emptyAggregationFor(field("collection"))).isEqualTo(ImmutableSet.of());  assertThat((Iterable<?>)emptyAggregationFor(field("iterable"))).isEqualTo(ImmutableSet.of());  assertThat((ImmutableList<?>)emptyAggregationFor(field("immutableList"))).isEqualTo(ImmutableList.of());  assertThat((List<?>)emptyAggregationFor(field("list"))).isEqualTo(ImmutableList.of());  assertThat((ImmutableMap<?,?>)emptyAggregationFor(field("immutableMap"))).isEqualTo(ImmutableMap.of());  assertThat((Map<?,?>)emptyAggregationFor(field("map"))).isEqualTo(ImmutableMap.of());  assertThat((ImmutableMultimap<?,?>)emptyAggregationFor(field("immutableMultimap"))).isEqualTo(ImmutableMultimap.of());  assertThat((Multimap<?,?>)emptyAggregationFor(field("multimap"))).isEqualTo(ImmutableMultimap.of());  assertThat((ImmutableListMultimap<?,?>)emptyAggregationFor(field("immutableListMultimap"))).isEqualTo(ImmutableListMultimap.of());  assertThat((ListMultimap<?,?>)emptyAggregationFor(field("listMultimap"))).isEqualTo(ImmutableListMultimap.of());  assertThat((ImmutableSetMultimap<?,?>)emptyAggregationFor(field("immutableSetMultimap"))).isEqualTo(ImmutableSetMultimap.of());  assertThat((SetMultimap<?,?>)emptyAggregationFor(field("setMultimap"))).isEqualTo(ImmutableSetMultimap.of());  assertThat((ArrayList<?>)emptyAggregationFor(field("arrayList"))).isEqualTo(new ArrayList<>());  assertThat((LinkedList<?>)emptyAggregationFor(field("linkedList"))).isEqualTo(new LinkedList<>());  assertThat((HashSet<?>)emptyAggregationFor(field("hashSet"))).isEqualTo(new HashSet<>());  assertThat((TreeSet<?>)emptyAggregationFor(field("treeSet"))).isEqualTo(new TreeSet<>());  assertThat((HashMap<?,?>)emptyAggregationFor(field("hashMap"))).isEqualTo(new HashMap<>());  assertThat((TreeMap<?,?>)emptyAggregationFor(field("treeMap"))).isEqualTo(new TreeMap<>());}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="MimeType";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Extension",extension);  bdr.addSimpleElement("Type",mimeType);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public void updateModule(org.jboss.modules.Module module,DependencySpec dependencySpec) throws ModuleLoadException {  ModuleIdentifier mi=module.getIdentifier();  List<DependencySpec> deps=dependencies.get(mi);  if (deps == null)   return;  deps.add(dependencySpec);  setAndRelinkDependencies(module,deps);  refreshResourceLoaders(module);  relink(mi,new HashSet<ModuleIdentifier>());}  }
class C{  @Override public boolean isStocked(){  return super.isStocked() && isItem();}  }
class C{  public GemFireConnectionPoolManager(XADataSource connPool,ConfiguredDataSourceProperties configs,javax.sql.ConnectionEventListener listener) throws PoolException {  connPoolCache=new TranxPoolCacheImpl(connPool,listener,configs);}  }
class C{  public boolean canGrowHere(World world,int x,int y,int z){  if (BlockCheck.isRope(world.getBlock(x,y,z))) {    return canGrowOutwards(world,x,y,z);  }  return false;}  }
class C{  public void layoutContainer(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    boolean ltr=parent.getComponentOrientation().isLeftToRight();    if (ncomponents == 0) {      return;    }    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int totalGapsWidth=(ncols - 1) * hgap;    int widthWOInsets=parent.width - (insets.left + insets.right);    int widthOnComponent=(widthWOInsets - totalGapsWidth) / ncols;    int extraWidthAvailable=(widthWOInsets - (widthOnComponent * ncols + totalGapsWidth)) / 2;    int totalGapsHeight=(nrows - 1) * vgap;    int heightWOInsets=parent.height - (insets.top + insets.bottom);    int heightOnComponent=(heightWOInsets - totalGapsHeight) / nrows;    int extraHeightAvailable=(heightWOInsets - (heightOnComponent * nrows + totalGapsHeight)) / 2;    if (ltr) {      for (int c=0, x=insets.left + extraWidthAvailable; c < ncols; c++, x+=widthOnComponent + hgap) {        for (int r=0, y=insets.top + extraHeightAvailable; r < nrows; r++, y+=heightOnComponent + vgap) {          int i=r * ncols + c;          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,widthOnComponent,heightOnComponent);          }        }      }    } else {      for (int c=0, x=(parent.width - insets.right - widthOnComponent) - extraWidthAvailable; c < ncols; c++, x-=widthOnComponent + hgap) {        for (int r=0, y=insets.top + extraHeightAvailable; r < nrows; r++, y+=heightOnComponent + vgap) {          int i=r * ncols + c;          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,widthOnComponent,heightOnComponent);          }        }      }    }  }}  }
class C{  public static Drawable byteToDrawable(byte[] b){  return bitmapToDrawable(byteToBitmap(b));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.420 -0400",hash_original_method="63A1B9B4037D6BF474EA6B9864F43D94",hash_generated_method="8A13DD19DB7ACD966234278F3277EF5F") long freeSpaceUnix(String path,boolean kb,boolean posix,long timeout) throws IOException {  if (path.length() == 0) {    throw new IllegalArgumentException("Path must not be empty");  }  String flags="-";  if (kb) {    flags+="k";  }  if (posix) {    flags+="P";  }  String[] cmdAttribs=flags.length() > 1 ? new String[]{DF,flags,path} : new String[]{DF,path};  List<String> lines=performCommand(cmdAttribs,3,timeout);  if (lines.size() < 2) {    throw new IOException("Command line '" + DF + "' did not return info as expected "+ "for path '"+ path+ "'- response was "+ lines);  }  String line2=lines.get(1);  StringTokenizer tok=new StringTokenizer(line2," ");  if (tok.countTokens() < 4) {    if (tok.countTokens() == 1 && lines.size() >= 3) {      String line3=lines.get(2);      tok=new StringTokenizer(line3," ");    } else {      throw new IOException("Command line '" + DF + "' did not return data as expected "+ "for path '"+ path+ "'- check path is valid");    }  } else {    tok.nextToken();  }  tok.nextToken();  tok.nextToken();  String freeSpace=tok.nextToken();  return parseBytes(freeSpace,path);}  }
class C{  public HttpResourceModel(String path,Method method,Object handler,boolean isSubResourceLocator){  this.httpMethods=getHttpMethods(method);  this.path=path;  this.method=method;  this.handler=handler;  this.isSubResourceLocator=isSubResourceLocator;  this.paramInfoList=makeParamInfoList(method);  consumesMediaTypes=parseConsumesMediaTypes();  producesMediaTypes=parseProducesMediaTypes();}  }
class C{  public boolean isPublic(){  return isPublic;}  }
class C{  public DefaultExtendedState(Map<Object,Object> variables){  this.variables=variables;}  }
class C{  public long mirkin(){  return 2 * (pairconfuse[1] + pairconfuse[2]);}  }
class C{  public Period(int years,int months,int weeks,int days,int hours,int minutes,int seconds,int millis){  super(years,months,weeks,days,hours,minutes,seconds,millis,PeriodType.standard());}  }
class C{  void loadDebug(Prototype f) throws IOException {  f.source=loadString();  f.lineinfo=loadIntArray();  int n=loadInt();  f.locvars=n > 0 ? new LocVars[n] : NOLOCVARS;  for (int i=0; i < n; i++) {    LuaString varname=loadString();    int startpc=loadInt();    int endpc=loadInt();    f.locvars[i]=new LocVars(varname,startpc,endpc);  }  n=loadInt();  for (int i=0; i < n; i++)   f.upvalues[i].name=loadString();}  }
class C{  public AvedevProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public int lastIndexOf(long value){  return lastIndexOf(_pos,value);}  }
class C{  public void paint(Graphics g){  super.paint(g);  g.setColor(c);  ((Graphics2D)g).fill(g.getClip());}  }
class C{  private void drawMouseWorldAxis(){  Vector3 v=cursorWorldPosition;  if (!Float.isNaN(v.x + v.y + v.z)) {    shapeRenderer.begin();    shapeRenderer.line(v.x,v.y,v.z,v.x + 1,v.y,v.z,Color.RED,Color.RED);    shapeRenderer.line(v.x,v.y,v.z,v.x,v.y + 1,v.z,Color.GREEN,Color.GREEN);    shapeRenderer.line(v.x,v.y,v.z,v.x,v.y,v.z + 1,Color.BLUE,Color.BLUE);    shapeRenderer.end();  }}  }
class C{  private void generate(String id,RegionAttributes attrs) throws SAXException {  AttributesImpl atts=new AttributesImpl();  if (id != null) {    atts.addAttribute("","",ID,"",id);  }  if (attrs instanceof RegionAttributesCreation) {    String refId=((RegionAttributesCreation)attrs).getRefid();    if (refId != null) {      atts.addAttribute("","",REFID,"",refId);    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasScope())) {    String scopeString;    Scope scope=attrs.getScope();    if (scope.equals(Scope.LOCAL)) {      scopeString=LOCAL;    } else     if (scope.equals(Scope.DISTRIBUTED_NO_ACK)) {      scopeString=DISTRIBUTED_NO_ACK;    } else     if (scope.equals(Scope.DISTRIBUTED_ACK)) {      scopeString=DISTRIBUTED_ACK;    } else     if (scope.equals(Scope.GLOBAL)) {      scopeString=GLOBAL;    } else {      throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_SCOPE_0.toLocalizedString(scope));    }    final boolean isPartitionedRegion;    if (attrs instanceof RegionAttributesCreation) {      RegionAttributesCreation rac=(RegionAttributesCreation)attrs;      isPartitionedRegion=rac.getPartitionAttributes() != null || (rac.hasDataPolicy() && rac.getDataPolicy().withPartitioning());    } else {      isPartitionedRegion=attrs.getPartitionAttributes() != null || attrs.getDataPolicy().withPartitioning();    }    if (!isPartitionedRegion) {      if (generateDefaults() || !scope.equals(AbstractRegion.DEFAULT_SCOPE))       atts.addAttribute("","",SCOPE,"",scopeString);    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEarlyAck())) {    if (generateDefaults() || attrs.getEarlyAck())     atts.addAttribute("","",EARLY_ACK,"",String.valueOf(attrs.getEarlyAck()));  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasMulticastEnabled())) {    if (generateDefaults() || attrs.getMulticastEnabled())     atts.addAttribute("","",MULTICAST_ENABLED,"",String.valueOf(attrs.getMulticastEnabled()));  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasPublisher())) {    if (generateDefaults() || attrs.getPublisher())     atts.addAttribute("","",PUBLISHER,"",String.valueOf(attrs.getPublisher()));  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEnableAsyncConflation())) {    if (generateDefaults() || attrs.getEnableAsyncConflation())     atts.addAttribute("","",ENABLE_ASYNC_CONFLATION,"",String.valueOf(attrs.getEnableAsyncConflation()));  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEnableSubscriptionConflation())) {      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {        if (generateDefaults() || attrs.getEnableSubscriptionConflation())         atts.addAttribute("","",ENABLE_SUBSCRIPTION_CONFLATION,"",String.valueOf(attrs.getEnableSubscriptionConflation()));      } else {        if (generateDefaults() || attrs.getEnableSubscriptionConflation())         atts.addAttribute("","",ENABLE_BRIDGE_CONFLATION,"",String.valueOf(attrs.getEnableSubscriptionConflation()));      }    }    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasDataPolicy())) {      String dpString;      DataPolicy dp=attrs.getDataPolicy();      if (dp.isEmpty()) {        dpString=EMPTY_DP;      } else       if (dp.isNormal()) {        dpString=NORMAL_DP;      } else       if (dp.isPreloaded()) {        dpString=PRELOADED_DP;      } else       if (dp.isReplicate()) {        dpString=REPLICATE_DP;      } else       if (dp == DataPolicy.PERSISTENT_REPLICATE) {        dpString=PERSISTENT_REPLICATE_DP;      } else       if (dp == DataPolicy.PERSISTENT_PARTITION) {        dpString=PERSISTENT_PARTITION_DP;      } else       if (dp.isPartition()) {        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {          dpString=PARTITION_DP;        } else {          dpString=EMPTY_DP;        }      } else {        throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));      }      if (generateDefaults() || !dp.equals(DataPolicy.DEFAULT))       atts.addAttribute("","",DATA_POLICY,"",dpString);    }  } else {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEnableSubscriptionConflation())) {      if (generateDefaults() || attrs.getEnableSubscriptionConflation())       atts.addAttribute("","","enable-conflation","",String.valueOf(attrs.getEnableSubscriptionConflation()));    }    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasMirrorType())) {      String mirrorString;      MirrorType mirror=attrs.getMirrorType();      if (mirror.equals(MirrorType.NONE))       mirrorString=NONE; else       if (mirror.equals(MirrorType.KEYS))       mirrorString=KEYS; else       if (mirror.equals(MirrorType.KEYS_VALUES))       mirrorString=KEYS_VALUES; else       throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));      atts.addAttribute("","",MIRROR_TYPE,"",mirrorString);    }    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasPersistBackup())) {      atts.addAttribute("","",PERSIST_BACKUP,"",String.valueOf(attrs.getDataPolicy() == DataPolicy.PERSISTENT_REPLICATE));    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasInitialCapacity())) {    if (generateDefaults() || attrs.getInitialCapacity() != 16)     atts.addAttribute("","",INITIAL_CAPACITY,"",String.valueOf(attrs.getInitialCapacity()));  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasLoadFactor())) {    if (generateDefaults() || attrs.getLoadFactor() != 0.75f)     atts.addAttribute("","",LOAD_FACTOR,"",String.valueOf(attrs.getLoadFactor()));  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasConcurrencyLevel())) {    if (generateDefaults() || attrs.getConcurrencyLevel() != 16)     atts.addAttribute("","",CONCURRENCY_LEVEL,"",String.valueOf(attrs.getConcurrencyLevel()));  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasConcurrencyChecksEnabled())) {      if (generateDefaults() || attrs.getConcurrencyChecksEnabled() != true)       atts.addAttribute("","",CONCURRENCY_CHECKS_ENABLED,"",String.valueOf(attrs.getConcurrencyChecksEnabled()));    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasStatisticsEnabled())) {    if (generateDefaults() || attrs.getStatisticsEnabled())     atts.addAttribute("","",STATISTICS_ENABLED,"",String.valueOf(attrs.getStatisticsEnabled()));  }  if (!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasIgnoreJTA()) {    if (generateDefaults() || attrs.getIgnoreJTA())     atts.addAttribute("","",IGNORE_JTA,"",String.valueOf(attrs.getIgnoreJTA()));  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasIsLockGrantor())) {      if (generateDefaults() || attrs.isLockGrantor())       atts.addAttribute("","",IS_LOCK_GRANTOR,"",String.valueOf(attrs.isLockGrantor()));    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasPoolName())) {      String cpVal=attrs.getPoolName();      if (cpVal == null) {        cpVal="";      }      if (generateDefaults() || !cpVal.equals(""))       atts.addAttribute("","",POOL_NAME,"",cpVal);    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasDiskStoreName())) {      String dsVal=attrs.getDiskStoreName();      if (dsVal != null) {        atts.addAttribute("","",DISK_STORE_NAME,"",dsVal);      }    }    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasDiskSynchronous())) {      if (generateDefaults() || attrs.isDiskSynchronous() != AttributesFactory.DEFAULT_DISK_SYNCHRONOUS)       atts.addAttribute("","",DISK_SYNCHRONOUS,"",String.valueOf(attrs.isDiskSynchronous()));    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0)   if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasCloningEnabled())) {    if (generateDefaults() || attrs.getCloningEnabled())     atts.addAttribute("","",CLONING_ENABLED,"",String.valueOf(attrs.getCloningEnabled()));  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasGatewaySenderId())) {      Set<String> senderIds=new HashSet<String>(attrs.getGatewaySenderIds());      StringBuilder senderStringBuff=new StringBuilder();      if (senderIds != null && senderIds.size() != 0) {        for (        String senderId : senderIds) {          if (!(senderStringBuff.length() == 0)) {            senderStringBuff.append(",");          }          senderStringBuff.append(senderId);        }      }      if (generateDefaults() || senderStringBuff.length() > 0)       atts.addAttribute("","",GATEWAY_SENDER_IDS,"",senderStringBuff.toString());    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasAsyncEventListeners())) {      Set<String> asyncEventQueueIds=new HashSet<String>(attrs.getAsyncEventQueueIds());      StringBuilder asyncEventQueueStringBuff=new StringBuilder();      if (asyncEventQueueIds != null && asyncEventQueueIds.size() != 0) {        for (        String asyncEventQueueId : asyncEventQueueIds) {          if (!(asyncEventQueueStringBuff.length() == 0)) {            asyncEventQueueStringBuff.append(",");          }          asyncEventQueueStringBuff.append(asyncEventQueueId);        }      }      if (generateDefaults() || asyncEventQueueStringBuff.length() > 0)       atts.addAttribute("","",ASYNC_EVENT_QUEUE_IDS,"",asyncEventQueueStringBuff.toString());    }  }  if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasOffHeap())) {      if (generateDefaults() || attrs.getOffHeap()) {        atts.addAttribute("","",OFF_HEAP,"",String.valueOf(attrs.getOffHeap()));      }    }  }  handler.startElement("",REGION_ATTRIBUTES,REGION_ATTRIBUTES,atts);  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasKeyConstraint())) {    generate(attrs.getKeyConstraint(),KEY_CONSTRAINT);  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasValueConstraint())) {    generate(attrs.getValueConstraint(),VALUE_CONSTRAINT);  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasRegionTimeToLive())) {    if (generateDefaults() || !attrs.getRegionTimeToLive().equals(ExpirationAttributes.DEFAULT))     generate(REGION_TIME_TO_LIVE,attrs.getRegionTimeToLive(),null);  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasRegionIdleTimeout())) {    if (generateDefaults() || !attrs.getRegionIdleTimeout().equals(ExpirationAttributes.DEFAULT))     generate(REGION_IDLE_TIME,attrs.getRegionIdleTimeout(),null);  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEntryTimeToLive() || ((RegionAttributesCreation)attrs).hasCustomEntryTimeToLive())) {    if (generateDefaults() || !attrs.getEntryTimeToLive().equals(ExpirationAttributes.DEFAULT) || attrs.getCustomEntryTimeToLive() != null)     generate(ENTRY_TIME_TO_LIVE,attrs.getEntryTimeToLive(),attrs.getCustomEntryTimeToLive());  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEntryIdleTimeout() || ((RegionAttributesCreation)attrs).hasCustomEntryIdleTimeout())) {    if (generateDefaults() || !attrs.getEntryIdleTimeout().equals(ExpirationAttributes.DEFAULT) || attrs.getCustomEntryIdleTimeout() != null)     generate(ENTRY_IDLE_TIME,attrs.getEntryIdleTimeout(),attrs.getCustomEntryIdleTimeout());  }  if (attrs.getDiskStoreName() == null && (generateDefaults() || this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0)) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasDiskWriteAttributes())) {      generate(attrs.getDiskWriteAttributes());    }    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasDiskDirs())) {      File[] diskDirs=attrs.getDiskDirs();      int[] diskSizes=attrs.getDiskDirSizes();      if (diskDirs != null && diskDirs.length > 0) {        handler.startElement("",DISK_DIRS,DISK_DIRS,EMPTY);        for (int i=0; i < diskDirs.length; i++) {          AttributesImpl diskAtts=new AttributesImpl();          if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {            diskAtts.addAttribute("","",DIR_SIZE,"",String.valueOf(diskSizes[i]));          }          handler.startElement("",DISK_DIR,DISK_DIR,diskAtts);          File dir=diskDirs[i];          String name=generateDefaults() ? dir.getAbsolutePath() : dir.getPath();          handler.characters(name.toCharArray(),0,name.length());          handler.endElement("",DISK_DIR,DISK_DIR);        }        handler.endElement("",DISK_DIRS,DISK_DIRS);      }    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasPartitionAttributes())) {      PartitionAttributes p=attrs.getPartitionAttributes();      if (p != null) {        generate(p);      }    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {    MembershipAttributes p=attrs.getMembershipAttributes();    if (p != null && p.hasRequiredRoles()) {      generate(p);    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasSubscriptionAttributes())) {      SubscriptionAttributes sa=attrs.getSubscriptionAttributes();      if (sa != null) {        if (generateDefaults() || !sa.equals(new SubscriptionAttributes()))         generate(sa);      }    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasCacheLoader())) {    generate(CACHE_LOADER,attrs.getCacheLoader());  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasCacheWriter())) {    generate(CACHE_WRITER,attrs.getCacheWriter());  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasCacheListeners())) {    CacheListener[] listeners=attrs.getCacheListeners();    for (int i=0; i < listeners.length; i++) {      generate(CACHE_LISTENER,listeners[i]);    }  }  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {    if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasCompressor())) {      generate(COMPRESSOR,attrs.getCompressor());    }  }  if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs).hasEvictionAttributes())) {    generate(attrs.getEvictionAttributes());  }  handler.endElement("",REGION_ATTRIBUTES,REGION_ATTRIBUTES);}  }
class C{  public ScrollPanePainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  public void addCqListener(CqListener aListener){  if (true) {    throw new IllegalStateException(LocalizedStrings.CqAttributesMutatorImpl_NOT_YET_SUPPORTED.toLocalizedString());  }}  }
class C{  public BusinessObjectDataEntity createDatabaseEntitiesForInitiateRestoreTesting(BusinessObjectDataKey businessObjectDataKey){  return createDatabaseEntitiesForInitiateRestoreTesting(businessObjectDataKey,AbstractServiceTest.STORAGE_NAME_ORIGIN,AbstractServiceTest.S3_BUCKET_NAME_ORIGIN,StorageUnitStatusEntity.DISABLED,AbstractServiceTest.STORAGE_NAME_GLACIER,AbstractServiceTest.S3_BUCKET_NAME_GLACIER,StorageUnitStatusEntity.ENABLED,AbstractServiceTest.S3_BUCKET_NAME_ORIGIN + "/" + AbstractServiceTest.TEST_S3_KEY_PREFIX);}  }
class C{  public void addProgressListener(ActionListener<NetworkEvent> al){  if (progressListeners == null) {    progressListeners=new EventDispatcher();    progressListeners.setBlocking(false);  }  progressListeners.addListener(al);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (getArguments() != null) {    mEncodedEmail=getArguments().getString(Constants.KEY_ENCODED_EMAIL);  }}  }
class C{  public static boolean hasHeightAttribute(Shapefile shapefile){  Set<String> attrNames=shapefile.getAttributeNames();  if (attrNames == null)   return false;  for (  String name : attrNames) {    if (name.equalsIgnoreCase("height") || name.equalsIgnoreCase("hgt")) {      return true;    }  }  return false;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void deallocate(String key){  RawByteAllocator alloc=rawByteAllocatorCache.remove(key);  if (key == null) {    logger.warn("Attempt to deallocate unknown vector from cache: key=" + key);  } else {    alloc.buffers=null;    currentMemoryBytes-=alloc.memoryLength;    if (alloc.storageLength > 0) {      outputStreamCache.invalidate(key);      alloc.cacheFile.delete();      this.currentStorageBytes-=alloc.storageLength;    }  }}  }
class C{  public boolean isAborted(){  return isAborted.get();}  }
class C{  private static boolean isOsmElement(final String name){  return isNode(name) || isWay(name) || isRelation(name);}  }
class C{  private void initPath(){  StringBuilder builder=new StringBuilder(64), noLocaleBuilder=new StringBuilder(64);  appendBasePath(builder);  appendBasePath(noLocaleBuilder);  if (localePrefix != null) {    builder.append('/').append(localePrefix);  }  if (name != null) {    builder.append('/').append(name);    noLocaleBuilder.append('/').append(name);  }  if (version != null) {    builder.append('/').append(version.getVersion());    noLocaleBuilder.append('/').append(version.getVersion());  }  path=builder.toString();  nonLocalizedPath=noLocaleBuilder.toString();}  }
class C{  private static String indent(final int height){  return CoreBaseBOp.indent(height);}  }
class C{  public void handleEvent(Event evt){  evt=EventSupport.getUltimateOriginalEvent(evt);  listener.nodeInserted((Node)evt.getTarget());}  }
class C{  public void selectText(int startIndex,int endIndex){  JTextComponent.this.select(startIndex,endIndex);}  }
class C{  public void listenerPaint(Object source,Graphics g){  MapBean mapBean=source instanceof MapBean ? (MapBean)source : null;  if (azPanner != null) {    azPanner.render(g);  } else   if (mapBean != null) {    if (isPanning && lastMouseEvent != null && bufferedMapImage != null) {      Graphics2D gr2d=(Graphics2D)g.create();      Projection proj=mapBean.getRotatedProjection();      if (!leaveShadow) {        gr2d.setPaint(mapBean.getBckgrnd());        gr2d.fillRect(0,0,proj.getWidth(),proj.getHeight());      }      Point2D pnt0=proj.forward(mapBean.inverse(oX,oY,null));      int startX=(int)pnt0.getX();      int startY=(int)pnt0.getY();      Point2D pnt=mapBean.getNonRotatedLocation(lastMouseEvent);      int x=(int)pnt.getX();      int y=(int)pnt.getY();      gr2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,opaqueness));      paintedImage.setX(x - startX);      paintedImage.setY(y - startY);      paintedImage.setRotationAngle(-proj.getRotationAngle());      paintedImage.generate(proj);      paintedImage.render(gr2d);    } else {      mapBean.removePaintListener(this);    }  }}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  protected void addTemplateElementListeners(XBLOMTemplateElement template,ImportRecord ir){  XBLEventSupport es=(XBLEventSupport)template.initializeEventSupport();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",ir.templateMutationListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.templateMutationListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.templateMutationListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",ir.templateMutationListener,false);}  }
class C{  public static boolean isShowNumbersDefault(){  return showNumbersDefault;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  void sendAsync(DistributionMessage msg){  if (system != null) {    system.getDistributionManager().putOutgoing(msg);  }}  }
class C{  void launch(boolean playAudio){  int[] rows=TABLE.getSelectedRows();  if (rows.length == 0) {    return;  }  File selectedFile=DATA_MODEL.getFile(rows[0]);  if (OSUtils.isWindows()) {    if (selectedFile.isDirectory()) {      GUIMediator.launchExplorer(selectedFile);      return;    } else     if (!MediaPlayer.isPlayableFile(selectedFile)) {      String extension=FilenameUtils.getExtension(selectedFile.getName());      if (extension != null && extension.toLowerCase().equals("torrent")) {        GUIMediator.instance().openTorrentFile(selectedFile,true);      } else {        GUIMediator.launchFile(selectedFile);      }      return;    }  }  LaunchableProvider[] providers=new LaunchableProvider[rows.length];  boolean stopAudio=false;  for (int i=0; i < rows.length; i++) {    try {      MediaType mt=MediaType.getMediaTypeForExtension(FilenameUtils.getExtension(DATA_MODEL.getFile(rows[i]).getName()));      if (mt.equals(MediaType.getVideoMediaType())) {        stopAudio=true;      }    } catch (    Throwable e) {    }    providers[i]=new FileProvider(DATA_MODEL.getFile(rows[i]));  }  if (stopAudio || !playAudio) {    MediaPlayer.instance().stop();  }  if (playAudio) {    GUILauncher.launch(providers);    UXStats.instance().log(stopAudio ? UXAction.LIBRARY_VIDEO_PLAY : UXAction.LIBRARY_PLAY_AUDIO_FROM_FILE);  } else {    GUIMediator.launchFile(selectedFile);  }}  }
class C{  public static void assertLogAndExit(){  if (!checkAndLog()) {    System.exit(1);  }}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  private synchronized void stopCore() throws PayloadException, NetworkException, ContactManagerException {  if (Core.getInstance() == null) {    return;  }  if (sLogger.isActivated()) {    sLogger.debug("Stop RCS core service");  }  if (mContactApi != null) {    mContactApi.close();    mContactApi=null;  }  if (mCapabilityApi != null) {    mCapabilityApi.close();    mCapabilityApi=null;  }  if (mFtApi != null) {    mFtApi.close();    mFtApi=null;  }  if (mChatApi != null) {    mChatApi.close();    mChatApi=null;  }  if (mIshApi != null) {    mIshApi.close();    mIshApi=null;  }  if (mGshApi != null) {    mGshApi.close();    mGshApi=null;  }  if (mVshApi != null) {    mVshApi.close();    mVshApi=null;  }  if (mHistoryApi != null) {    mHistoryApi.close();    mHistoryApi=null;  }  if (mMmSessionApi != null) {    mMmSessionApi.close();    mMmSessionApi=null;  }  if (mUploadApi != null) {    mUploadApi.close();    mUploadApi=null;  }  Core.terminateCore();  if (mCpuManager != null) {    mCpuManager.close();    mCpuManager=null;  }  if (sLogger.isActivated()) {    sLogger.info("RCS core service stopped with success");  }}  }
class C{  static private int indexOfLastNetworkChar(String a){  int pIndex, wIndex;  int origLength;  int trimIndex;  origLength=a.length();  pIndex=a.indexOf(PAUSE);  wIndex=a.indexOf(WAIT);  trimIndex=minPositive(pIndex,wIndex);  if (trimIndex < 0) {    return origLength - 1;  } else {    return trimIndex - 1;  }}  }
class C{  public final boolean canHandle(byte[] stegoData){  try {    extractMsgFileName(stegoData,"DUMMY");  } catch (  OpenStegoException osEx) {    if (osEx.getErrorCode() != OpenStegoException.INVALID_PASSWORD) {      return false;    }  }  return true;}  }
class C{  public static Driver driver(URI uri,AuthToken authToken,Config config){  String scheme=uri.getScheme();  BoltServerAddress address=BoltServerAddress.from(uri);  ConnectionSettings connectionSettings=new ConnectionSettings(authToken == null ? AuthTokens.none() : authToken);  if (config == null) {    config=Config.defaultConfig();  }  SecurityPlan securityPlan;  try {    securityPlan=createSecurityPlan(address,config);  } catch (  GeneralSecurityException|IOException ex) {    throw new ClientException("Unable to establish SSL parameters",ex);  }  DriverContract driverContract=new DriverContract(config.retryLogic());  PoolSettings poolSettings=new PoolSettings(config.maxIdleConnectionPoolSize(),config.idleTimeBeforeConnectionTest());  ConnectionPool connectionPool=new SocketConnectionPool(connectionSettings,securityPlan,poolSettings,config.logging());switch (scheme.toLowerCase()) {case "bolt":    return new DirectDriver(address,driverContract,connectionPool,securityPlan,config.logging());case "bolt+routing":  return new RoutingDriver(config.routingSettings(),address,driverContract,connectionPool,securityPlan,Clock.SYSTEM,config.logging());default :throw new ClientException(format("Unsupported URI scheme: %s",scheme));}}  }
class C{  protected List<List<Solution>> associateToReferencePoint(Population population){  List<List<Solution>> result=new ArrayList<List<Solution>>();  for (int i=0; i < weights.size(); i++) {    result.add(new ArrayList<Solution>());  }  for (  Solution solution : population) {    double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);    double maxDistance=Double.NEGATIVE_INFINITY;    int maxIndex=-1;    for (int i=0; i < weights.size(); i++) {      double distance=cosine(weights.get(i),objectives);      if (distance > maxDistance) {        maxDistance=distance;        maxIndex=i;      }    }    if (maxIndex < 0) {      maxIndex=0;    }    result.get(maxIndex).add(solution);  }  return result;}  }
class C{  protected Boolean levelCheck(String l1,String l2){  int l1v=convertLevelValue(l1);  int l2v=convertLevelValue(l2);  return l1v <= l2v;}  }
class C{  public ConsistencyException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  protected void disconnect(SocketHandler s){  _connection_listener.disconnect(s);}  }
class C{  public MySQLOperationStringBuilder(int maxOutputLength){  this.maxOutputLength=maxOutputLength;}  }
class C{  public boolean isPositive(){  for (  final T key : m_values.keySet()) {    if (getInt(key) < 0) {      return false;    }  }  return true;}  }
class C{  public static void makeFiles(int n,File dir,String fileName,String ext) throws FileNotFoundException {  for (int j=1; j <= n; j++) {    File file=new File(dir,fileName + j + ext);    if (!file.exists()) {      try (PrintWriter output=new PrintWriter(file)){        for (int i=0; i < 100; i++) {          output.print(((int)(Math.random() * 500) + 1));          output.print(" ");        }      }     }  }}  }
class C{  protected void nextLine(String s){  if (s.startsWith("PRICOM Design DCC")) {    version.setText(s);    return;  }  Vector<DataListener> v;synchronized (this) {    v=new Vector<DataListener>(listeners);  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    DataListener client=v.elementAt(i);    client.asciiFormattedMessage(s);  }}  }
class C{  public static int[] randomPermutation(final int[] out,Random random){  for (int i=out.length - 1; i > 0; i--) {    int ri=random.nextInt(i + 1);    int tmp=out[ri];    out[ri]=out[i];    out[i]=tmp;  }  return out;}  }
class C{  static public long asHistoricalRead(final long commitTime){  if (commitTime < 0)   throw new IllegalArgumentException("commitTime: " + commitTime);  return commitTime;}  }
class C{  public static BoundingBox createBoundingBoxForCoordinates(final double lat,final double lon,final double radius,boolean checkSize) throws OsmException {  double horizontalRadiusDegree=convertMetersToGeoDistance(radius);  if (checkSize && horizontalRadiusDegree > BoundingBox.API_MAX_DEGREE_DIFFERENCE / 1E7D / 2D) {    horizontalRadiusDegree=BoundingBox.API_MAX_DEGREE_DIFFERENCE / 1E7D / 2D;  }  double mercatorLat=latToMercator(lat);  double verticalRadiusDegree=horizontalRadiusDegree;  double left=lon - horizontalRadiusDegree;  double right=lon + horizontalRadiusDegree;  double bottom=mercatorToLat(mercatorLat - verticalRadiusDegree);  double top=mercatorToLat(mercatorLat + verticalRadiusDegree);  if (left < -MAX_LON) {    left=-MAX_LON;    right=left + horizontalRadiusDegree * 2d;  }  if (right > MAX_LON) {    right=BoundingBox.MAX_LON_E7;    left=right - horizontalRadiusDegree * 2d;  }  if (bottom < -MAX_LAT) {    bottom=-MAX_LAT;    top=bottom + verticalRadiusDegree * 2d;  }  if (top > MAX_LAT) {    top=MAX_LAT;    bottom=top - verticalRadiusDegree * 2d;  }  return new BoundingBox(left,bottom,right,top);}  }
class C{  public void addComponentsLeft(Button button){  if (!buttonMap.containsKey(button.getId()))   buttonMap.put(button.getId(),button);  pnlBtnLeft.appendChild(button);}  }
class C{  public void remove(String key){  this.model.remove(key);}  }
class C{  public FtpDirEntry(String name){  this.name=name;}  }
class C{  public AbstractRaba(final byte[][] a){  this(0,a.length,a.length,a);}  }
class C{  public meteor(){  for (int i=0; i < 10; i++)   solution[i]=new Entry();}  }
class C{  public static void registerView(QKPreference preference,Object parent,LiveView view){synchronized (sViews) {    if (sViews.containsKey(preference.getKey())) {      WeakHashMap<Object,Set<LiveView>> parents=sViews.get(preference.getKey());      if (!parents.containsKey(parent)) {        parents.put(parent,new HashSet<>());      }      if (!parents.get(parent).contains(view)) {        parents.get(parent).add(view);      }    } else {      WeakHashMap<Object,Set<LiveView>> set=new WeakHashMap<>();      set.put(parent,new HashSet<>());      set.get(parent).add(view);      sViews.put(preference.getKey(),set);    }  }  view.refresh(preference.getKey());}  }
class C{  private BasicBlock EVAL(BasicBlock block){  if (DEBUG) {    System.out.println("  Evaling " + block);  }  if (getAncestor(block) == null) {    return getLabel(block);  } else {    compress(block);    if (getSemi(getLabel(getAncestor(block))) >= getSemi(getLabel(block))) {      return getLabel(block);    } else {      return getLabel(getAncestor(block));    }  }}  }
class C{  public Object createJavaObjectFromString(EDataType eDataType,String initialValue){  int indexOf=initialValue.indexOf(":");  String className=initialValue.substring(0,indexOf);  String value=initialValue.substring(indexOf + 1);  if (Boolean.class.getName().equals(className))   return Boolean.parseBoolean(value);  if (String.class.getName().equals(className))   return value;  if (Long.class.getName().equals(className))   return Long.parseLong(value);  if (Double.class.getName().equals(className))   return Double.parseDouble(value);  if (Integer.class.getName().equals(className))   return Integer.parseInt(value);  if (Any.class.getName().equals(className))   return new Any();  return super.createFromString(eDataType,initialValue);}  }
class C{  void listenForMessages() throws IOException {  DProtocolNotifierIF[] listeners=new DProtocolNotifierIF[0];  while (!m_stopRx) {    try {      DMessage msg=rxMessage();synchronized (m_listeners) {        listeners=m_listeners.values().toArray(listeners);      }      for (int i=0; i < listeners.length; ++i) {        DProtocolNotifierIF elem=listeners[i];        try {          elem.messageArrived(msg,this);        } catch (        Exception exc) {          System.err.println("Error in listener parsing incoming message :");          System.err.println(msg.inToString(16));          exc.printStackTrace();        }        msg.reset();      }      DMessageCache.free(msg);    } catch (    InterruptedIOException iio) {    }  }}  }
class C{  private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public boolean containsValue(int val){  byte[] states=_states;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public static int readUint16BE(byte[] bytes,int offset){  return ((bytes[offset] & 0xff) << 8) | (bytes[offset + 1] & 0xff);}  }
class C{  protected Value convert(Object o){  if (o instanceof Value) {    return (Value)o;  }  if (o instanceof String) {    String s=(String)o;    s=s.replaceFirst("^ontology:",Ontology.NAMESPACE);    s=s.replaceFirst("^wdata:",uris.entityData());    s=s.replaceFirst("^wd:",uris.entity());    s=s.replaceFirst("^wds:",uris.statement());    s=s.replaceFirst("^wdv:",uris.value());    s=s.replaceFirst("^wdref:",uris.reference());    for (    PropertyType p : PropertyType.values()) {      s=s.replaceFirst("^" + p.prefix() + ":",uris.property(p));    }    return new URIImpl(s);  }  if (o instanceof Integer) {    return new IntegerLiteralImpl(BigInteger.valueOf((int)o));  }  throw new RuntimeException("No idea how to convert " + o + " to a value.  Its a "+ o.getClass()+ ".");}  }
class C{  public RosterEntities(){}  }
class C{  public void stop(){  duration+=System.currentTimeMillis() - start;}  }
class C{  protected boolean isPrimarySubtype(AnnotatedTypeMirror subtype,AnnotatedTypeMirror supertype,boolean annosCanBeEmtpy){  final AnnotationMirror subtypeAnno=subtype.getAnnotationInHierarchy(currentTop);  final AnnotationMirror supertypeAnno=supertype.getAnnotationInHierarchy(currentTop);  return isAnnoSubtype(subtypeAnno,supertypeAnno,annosCanBeEmtpy);}  }
class C{  public void updateCounterTreatZeroAsMissing(Instance instance){  if (containedByTreatZeroAsMissing(instance)) {    m_counter++;  }}  }
class C{  void testAttachable(String id) throws AttachNotSupportedException {  MonitoredVm mvm=null;  try {    VmIdentifier vmid=new VmIdentifier(id);    MonitoredHost host=MonitoredHost.getMonitoredHost(vmid);    mvm=host.getMonitoredVm(vmid);    if (MonitoredVmUtil.isAttachable(mvm)) {      return;    }  } catch (  Throwable t) {    if (t instanceof ThreadDeath) {      ThreadDeath td=(ThreadDeath)t;      throw td;    }    return;  } finally {    if (mvm != null) {      mvm.detach();    }  }  throw new AttachNotSupportedException("The VM does not support the attach mechanism");}  }
class C{  @Override public void transitionState(RobotState state,RobotState oldState){  try {    JavaScript.eval("t_$.trans('" + state.state.toLowerCase() + "')");  } catch (  ScriptException e) {  }}  }
class C{  @Override public BlazeTransaction tx(){  throw new UnsupportedOperationException("Transactions not allowed on read-only view");}  }
class C{  public void warn(String message){  write(message,MSG_WARNING);}  }
class C{  public Packet(final long unique){  type=EvidenceType.NONE;  command=EvidenceBuilder.LOG_CREATE;  id=unique;  data=null;}  }
class C{  public void cleanupTechnicalProduct(TechnicalProduct technicalProduct) throws DeletionConstraintException {  final List<Product> templateProducts=technicalProduct.getProducts();  final List<Product> specificTemplateProducts=moveProductsOfType(templateProducts,ServiceType.CUSTOMER_TEMPLATE,ServiceType.PARTNER_TEMPLATE);  final List<Product> subscriptionProducts=moveProductsOfType(templateProducts,ServiceType.SUBSCRIPTION,ServiceType.PARTNER_SUBSCRIPTION,ServiceType.CUSTOMER_SUBSCRIPTION);  deleteProducts(technicalProduct,subscriptionProducts);  for (  Product specificTemplateProduct : specificTemplateProducts) {    deleteFromLandingPage(specificTemplateProduct);  }  deleteProducts(technicalProduct,specificTemplateProducts);  deleteProducts(technicalProduct,templateProducts);}  }
class C{  private static Set<String> readSetSmart(String permissionName,Map m,String key){  if (PermissionNameProvider.values.containsKey(permissionName) && !m.containsKey(key) && "collection".equals(key)) {    return PermissionNameProvider.Name.get(permissionName).collName;  }  Set<String> set=readValueAsSet(m,key);  if ("method".equals(key)) {    if (set != null) {      for (      String s : set)       if (!HTTP_METHODS.contains(s))       return null;    }    return set;  }  return set == null ? singleton(null) : set;}  }
class C{  public void putString(String numberString,Address address,int type){  numberString=numberString.toUpperCase();  if (type == BIN) {    if (!numberString.endsWith("B")) {      numberString+="B";    }  } else   if (type == HEX) {    if (!(numberString.startsWith("0X") || numberString.endsWith("H"))) {      numberString="0X" + numberString;    }  }  numberString=Parser.hex2dec(numberString);  if (!Op.matches(parser.getOperandType(numberString),Op.IMM)) {    System.out.println("DataSpace.putString: invalid OperandType!");    return;  }  putInteger(Long.parseLong(numberString),address);}  }
class C{  private void printColumn(Graphics2D g2D,int col,final int origX,final int origY,boolean leftVline,final int firstRow,final int nextPageRow,boolean isView){  int curX=origX;  int curY=origY;  float colWidth=((Float)m_columnWidths.get(col)).floatValue();  float netWidth=colWidth - (2 * H_GAP) - m_tFormat.getVLineStroke().floatValue();  if (leftVline)   netWidth-=m_tFormat.getVLineStroke().floatValue();  int rowHeight=m_headerHeight;  float netHeight=rowHeight - (4 * m_tFormat.getLineStroke().floatValue()) + (2 * V_GAP);  if (DEBUG_PRINT)   log.finer("#" + col + " - x="+ curX+ ", y="+ curY+ ", width="+ colWidth+ "/"+ netWidth+ ", HeaderHeight="+ rowHeight+ "/"+ netHeight);  String alignment=m_columnJustification[col];  if (leftVline) {    g2D.setPaint(m_tFormat.getVLine_Color());    g2D.setStroke(m_tFormat.getVLine_Stroke());    if (m_tFormat.isPaintBoundaryLines())     g2D.drawLine(origX,(int)(origY + m_tFormat.getLineStroke().floatValue()),origX,(int)(origY + rowHeight - (4 * m_tFormat.getLineStroke().floatValue())));    curX+=m_tFormat.getVLineStroke().floatValue();  }  if (m_tFormat.isPaintHeaderLines()) {    g2D.setPaint(m_tFormat.getHeaderLine_Color());    g2D.setStroke(m_tFormat.getHeader_Stroke());    g2D.drawLine(origX,origY,(int)(origX + colWidth - m_tFormat.getVLineStroke().floatValue()),origY);  }  curY+=(2 * m_tFormat.getLineStroke().floatValue());  Color bg=getBackground(HEADER_ROW,col);  if (!bg.equals(Color.white)) {    g2D.setPaint(bg);    g2D.fillRect(curX,(int)(curY - m_tFormat.getLineStroke().floatValue()),(int)(colWidth - m_tFormat.getVLineStroke().floatValue()),(int)(rowHeight - (4 * m_tFormat.getLineStroke().floatValue())));  }  int tempCurY=curY;  curX+=H_GAP;  curY+=V_GAP;  AttributedString aString=null;  AttributedCharacterIterator iter=null;  LineBreakMeasurer measurer=null;  float usedHeight=0;  String headerString=m_columnHeader[col].toString();  if (headerString.length() == 0)   headerString=" ";{    aString=new AttributedString(headerString);    aString.addAttribute(TextAttribute.FONT,getFont(HEADER_ROW,col));    aString.addAttribute(TextAttribute.FOREGROUND,getColor(HEADER_ROW,col));    boolean fastDraw=LayoutEngine.s_FASTDRAW;    if (fastDraw && !isView && !Util.is8Bit(headerString))     fastDraw=false;    iter=aString.getIterator();    measurer=new LineBreakMeasurer(iter,g2D.getFontRenderContext());    while (measurer.getPosition() < iter.getEndIndex()) {      TextLayout layout=measurer.nextLayout(netWidth + 2);      if (iter.getEndIndex() != measurer.getPosition())       fastDraw=false;      float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();      if (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_Block)) {        layout=layout.getJustifiedLayout(netWidth + 2);        fastDraw=false;      }      curY+=layout.getAscent();      float penX=curX;      if (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_Center))       penX+=(netWidth - layout.getAdvance()) / 2; else       if ((alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight) && layout.isLeftToRight()) || (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft) && !layout.isLeftToRight()))       penX+=netWidth - layout.getAdvance();      if (fastDraw) {        g2D.setFont(getFont(HEADER_ROW,col));        g2D.setColor(getColor(HEADER_ROW,col));        g2D.drawString(iter,penX,curY);      } else       layout.draw(g2D,penX,curY);      curY+=layout.getDescent() + layout.getLeading();      usedHeight+=layout.getAscent() + layout.getDescent();      if (!m_multiLineHeader)       break;    }  }  curX+=netWidth + H_GAP;  curY=tempCurY + (int)(rowHeight - (4 * m_tFormat.getLineStroke().floatValue()));  g2D.setPaint(m_tFormat.getVLine_Color());  g2D.setStroke(m_tFormat.getVLine_Stroke());  if (m_tFormat.isPaintVLines())   g2D.drawLine(curX,(int)(origY + m_tFormat.getLineStroke().floatValue()),curX,(int)(origY + rowHeight - (4 * m_tFormat.getLineStroke().floatValue())));  curX+=m_tFormat.getVLineStroke().floatValue();  if (m_tFormat.isPaintHeaderLines()) {    g2D.setPaint(m_tFormat.getHeaderLine_Color());    g2D.setStroke(m_tFormat.getHeader_Stroke());    g2D.drawLine(origX,curY,(int)(origX + colWidth - m_tFormat.getVLineStroke().floatValue()),curY);  }  curY+=(2 * m_tFormat.getLineStroke().floatValue());  for (int row=firstRow; row < nextPageRow; row++) {    rowHeight=((Float)m_rowHeights.get(row)).intValue();    netHeight=rowHeight - (2 * V_GAP) - m_tFormat.getLineStroke().floatValue();    int rowYstart=curY;    curX=origX;    if (leftVline) {      g2D.setPaint(m_tFormat.getVLine_Color());      g2D.setStroke(m_tFormat.getVLine_Stroke());      if (m_tFormat.isPaintBoundaryLines())       g2D.drawLine(curX,rowYstart,curX,(int)(rowYstart + rowHeight - m_tFormat.getLineStroke().floatValue()));      curX+=m_tFormat.getVLineStroke().floatValue();    }    bg=getBackground(row,col);    if (!bg.equals(Color.white)) {      g2D.setPaint(bg);      g2D.fillRect(curX,curY,(int)(colWidth - m_tFormat.getVLineStroke().floatValue()),(int)(rowHeight - m_tFormat.getLineStroke().floatValue()));    }    curX+=H_GAP;    curY+=V_GAP;    Object[] printItems=getPrintItems(row,col);    float penY=curY;    boolean suppress=false;    if (m_colSuppressRepeats[col] && row > 0 && row != firstRow) {      Object[] lastItems={};      lastItems=getPrintItems(row - 1,col);      if (Arrays.equals(lastItems,printItems))       suppress=true;    }    if (!suppress) {      for (int index=0; index < printItems.length; index++) {        if (printItems[index] == null)         ; else         if (printItems[index] instanceof ImageElement) {          Image imageToDraw=((ImageElement)printItems[index]).getImage();          if (imageToDraw != null) {            double scale=((ImageElement)printItems[index]).getScaleFactor();            if (scale != 1.0) {              AffineTransform transform=new AffineTransform();              transform.translate(curX,penY);              transform.scale(scale,scale);              g2D.drawImage(imageToDraw,transform,this);            } else {              g2D.drawImage(imageToDraw,curX,(int)penY,this);            }          }        } else         if (printItems[index] instanceof BarcodeElement) {          try {            Barcode barcode=((BarcodeElement)printItems[index]).getBarcode();            if (barcode != null) {              double scale=((BarcodeElement)printItems[index]).getScaleFactor();              if (scale != 1.0) {                int w=barcode.getWidth();                int h=barcode.getHeight();                BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);                Graphics2D temp=(Graphics2D)image.getGraphics();                barcode.draw(temp,0,0);                AffineTransform transform=new AffineTransform();                transform.translate(curX,penY);                transform.scale(scale,scale);                g2D.drawImage(image,transform,this);              } else {                barcode.draw(g2D,curX,(int)penY);              }            }          } catch (          OutputException e) {          }        } else         if (printItems[index] instanceof Boolean) {          int penX=curX + (int)((netWidth - LayoutEngine.IMAGE_SIZE.width) / 2);          if (((Boolean)printItems[index]).booleanValue())           g2D.drawImage(LayoutEngine.IMAGE_TRUE,penX,(int)penY,this); else           g2D.drawImage(LayoutEngine.IMAGE_FALSE,penX,(int)penY,this);          penY+=LayoutEngine.IMAGE_SIZE.height;        } else         if (printItems[index] instanceof HTMLRenderer) {          HTMLRenderer renderer=(HTMLRenderer)printItems[index];          Rectangle allocation=new Rectangle((int)colWidth,(int)netHeight);          g2D.translate(curX,penY);          renderer.paint(g2D,allocation);          g2D.translate(-curX,-penY);          penY+=allocation.getHeight();        } else {          String str=printItems[index].toString();          if (DEBUG_PRINT)           log.fine("row=" + row + ",col="+ col+ " - "+ str+ " 8Bit="+ Util.is8Bit(str));          if (str.length() > 0) {            usedHeight=0;            String[] lines=Pattern.compile("$",Pattern.MULTILINE).split(str);            for (int lineNo=0; lineNo < lines.length; lineNo++) {              aString=new AttributedString(lines[lineNo]);              aString.addAttribute(TextAttribute.FONT,getFont(row,col));              if (isView && printItems[index] instanceof NamePair) {                aString.addAttribute(TextAttribute.FOREGROUND,LINK_COLOR);                aString.addAttribute(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_LOW_ONE_PIXEL,0,str.length());              } else               aString.addAttribute(TextAttribute.FOREGROUND,getColor(row,col));              iter=aString.getIterator();              boolean fastDraw=LayoutEngine.s_FASTDRAW;              if (fastDraw && !isView && !Util.is8Bit(lines[lineNo]))               fastDraw=false;              measurer=new LineBreakMeasurer(iter,g2D.getFontRenderContext());              while (measurer.getPosition() < iter.getEndIndex()) {                TextLayout layout=measurer.nextLayout(netWidth + 2);                if (iter.getEndIndex() != measurer.getPosition())                 fastDraw=false;                float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();                if ((m_columnMaxHeight[col] <= 0 || (usedHeight + lineHeight) <= m_columnMaxHeight[col]) && (usedHeight + lineHeight) <= netHeight) {                  if (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_Block) && measurer.getPosition() < iter.getEndIndex()) {                    layout=layout.getJustifiedLayout(netWidth + 2);                    fastDraw=false;                  }                  penY+=layout.getAscent();                  float penX=curX;                  if (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_Center))                   penX+=(netWidth - layout.getAdvance()) / 2; else                   if ((alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight) && layout.isLeftToRight()) || (alignment.equals(MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft) && !layout.isLeftToRight()))                   penX+=netWidth - layout.getAdvance();                  if (fastDraw) {                    g2D.setFont(getFont(row,col));                    if (isView && printItems[index] instanceof NamePair) {                      g2D.setColor(LINK_COLOR);                    } else                     g2D.setColor(getColor(row,col));                    g2D.drawString(iter,penX,penY);                  } else                   layout.draw(g2D,penX,penY);                  if (DEBUG_PRINT)                   log.fine("row=" + row + ",col="+ col+ " - "+ str+ " - x="+ penX+ ",y="+ penY);                  penY+=layout.getDescent() + layout.getLeading();                  usedHeight+=lineHeight;                  if (m_columnMaxHeight[col] == -1)                   break;                }              }            }          }        }      }    }    curY+=netHeight + V_GAP;    curX+=netWidth + H_GAP;    g2D.setPaint(m_tFormat.getVLine_Color());    g2D.setStroke(m_tFormat.getVLine_Stroke());    if (m_tFormat.isPaintVLines())     g2D.drawLine(curX,rowYstart,curX,(int)(rowYstart + rowHeight - m_tFormat.getLineStroke().floatValue()));    curX+=m_tFormat.getVLineStroke().floatValue();    if (row == m_data.length - 1) {      if (m_tFormat.isPaintHeaderLines()) {        g2D.setPaint(m_tFormat.getHeaderLine_Color());        g2D.setStroke(m_tFormat.getHeader_Stroke());        g2D.drawLine(origX,curY,(int)(origX + colWidth - m_tFormat.getVLineStroke().floatValue()),curY);        curY+=(2 * m_tFormat.getLineStroke().floatValue());      } else {        curY+=m_tFormat.getLineStroke().floatValue();      }    } else {      boolean nextIsFunction=m_functionRows.contains(new Integer(row + 1));      if (nextIsFunction && m_functionRows.contains(new Integer(row)))       nextIsFunction=false;      if (nextIsFunction) {        g2D.setPaint(m_tFormat.getFunctFG_Color());        g2D.setStroke(m_tFormat.getHLine_Stroke());        g2D.drawLine(origX,curY,(int)(origX + colWidth - m_tFormat.getVLineStroke().floatValue()),curY);      } else       if (m_tFormat.isPaintHLines()) {        g2D.setPaint(m_tFormat.getHLine_Color());        g2D.setStroke(m_tFormat.getHLine_Stroke());        g2D.drawLine(origX,curY,(int)(origX + colWidth - m_tFormat.getVLineStroke().floatValue()),curY);      }      curY+=m_tFormat.getLineStroke().floatValue();    }  }}  }
class C{  public final void resume(TXStateProxy tx){  if (tx != null) {    TransactionId tid=getTransactionId();    if (tid != null) {      throw new java.lang.IllegalStateException(LocalizedStrings.TXManagerImpl_TRANSACTION_0_ALREADY_IN_PROGRESS.toLocalizedString(tid));    }    if (tx instanceof TXState) {      throw new java.lang.IllegalStateException("Found instance of TXState: " + tx);    }    setTXState(tx);    tx.resume();    SystemTimerTask task=this.expiryTasks.remove(tx.getTransactionId());    if (task != null) {      task.cancel();    }  }}  }
class C{  protected boolean updateForBufferDimensions(Projection proj){  int currentRotBufferWidth=rotBufferWidth;  int currentRotBufferHeight=rotBufferHeight;  Point2D center=proj.getCenter();  Point2D ul=proj.getUpperLeft();  Point2D lr=proj.getLowerRight();  Geo centerGeo=new Geo(center.getY(),center.getX());  Geo ulGeo=new Geo(ul.getY(),ul.getX());  Geo lrGeo=new Geo(lr.getY(),lr.getX());  double dist=Math.max(centerGeo.distance(ulGeo),centerGeo.distance(lrGeo));  Geo N=Geo.offset(centerGeo,dist,0);  Geo S=Geo.offset(centerGeo,dist,Math.PI);  Geo E=Geo.offset(centerGeo,dist,Math.PI / 2.0);  Geo W=Geo.offset(centerGeo,dist,-Math.PI / 2);  Point2D newUL=new Point2D.Double(W.getLongitude(),N.getLatitude());  Point2D newLR=new Point2D.Double(E.getLongitude(),S.getLatitude());  Point2D newULPix=proj.forward(newUL);  Point2D newLRPix=proj.forward(newLR);  int reqRotBufferHeight=(int)Math.abs(newLRPix.getY() - newULPix.getY());  int reqRotBufferWidth=(int)Math.abs(newLRPix.getX() - newULPix.getX());  boolean needNewHeightImage=reqRotBufferHeight > currentRotBufferHeight || reqRotBufferHeight < .9 * currentRotBufferHeight;  boolean needNewWidthImage=reqRotBufferWidth > currentRotBufferWidth || currentRotBufferWidth < .9 * currentRotBufferWidth;  boolean bufferImageResized=false;  if (needNewHeightImage || needNewWidthImage) {    this.rotImage=new BufferedImage(reqRotBufferWidth,reqRotBufferHeight,BufferedImage.TYPE_INT_ARGB);    rotBufferWidth=reqRotBufferWidth;    rotBufferHeight=reqRotBufferHeight;    bufferImageResized=true;  }  rotProjection=projectionFactory.makeProjection(proj.getClass(),center,proj.getScale(),rotBufferWidth,rotBufferHeight);  this.rotCenter=rotProjection.forward(center);  this.rotXOffset=(rotProjection.getWidth() - proj.getWidth()) / 2;  this.rotYOffset=(rotProjection.getHeight() - proj.getHeight()) / 2;  return bufferImageResized;}  }
class C{  public static void verifyProjectForVolumeToBeAddedToCG(Volume volume,BlockConsistencyGroup cg,DbClient dbClient){  URI cgProjectURI=cg.getProject().getURI();  URI volumeProjectURI=volume.getProject().getURI();  if (!volumeProjectURI.equals(cgProjectURI)) {    List<Project> projects=dbClient.queryObjectField(Project.class,"label",Arrays.asList(cgProjectURI,volumeProjectURI));    throw APIException.badRequests.consistencyGroupAddVolumeThatIsInDifferentProject(volume.getLabel(),projects.get(0).getLabel(),projects.get(1).getLabel());  }}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.289 -0500",hash_original_method="C166F3E0EFB403FB56F87B006221B9E6",hash_generated_method="334D55D4A583D5A671874A1A55AC2492") public static Element U8(RenderScript rs){  if (rs.mElement_U8 == null) {    rs.mElement_U8=createUser(rs,DataType.UNSIGNED_8);  }  return rs.mElement_U8;}  }
class C{  public VectorInstance subtract(VectorInstance other) throws Exception {  if (m_vectorFields.size() != other.getVectorFields().size()) {    throw new Exception("[VectorInstance.dotProduct] supplied vector instance does " + "not have the same number of vector fields as this vector instance!");  }  ArrayList<Object> diffVals=new ArrayList<Object>();  for (int i=0; i < m_vectorFields.size(); i++) {    double x=m_values.valueDouble(i);    double y=other.getValues().valueDouble(i);    double result=x - y;    diffVals.add(new Double(result));  }  Array newArray=Array.create(diffVals,null);  return new VectorInstance(newArray,m_vectorFields);}  }
class C{  public String toString(){  return bidiBase.toString();}  }
class C{  public void handleEvent(Event evt){  Element elt=(Element)evt.getCurrentTarget();  String script=elt.getAttributeNS(null,attribute);  if (script.length() == 0)   return;  DocumentLoader dl=bridgeContext.getDocumentLoader();  SVGDocument d=(SVGDocument)elt.getOwnerDocument();  int line=dl.getLineNumber(elt);  final String desc=Messages.formatMessage(EVENT_SCRIPT_DESCRIPTION,new Object[]{d.getURL(),attribute,new Integer(line)});  Element e=elt;  while (e != null && (!SVGConstants.SVG_NAMESPACE_URI.equals(e.getNamespaceURI()) || !SVGConstants.SVG_SVG_TAG.equals(e.getLocalName()))) {    e=SVGUtilities.getParentElement(e);  }  if (e == null)   return;  String lang=e.getAttributeNS(null,SVGConstants.SVG_CONTENT_SCRIPT_TYPE_ATTRIBUTE);  runEventHandler(script,evt,lang,desc);}  }
class C{  @SmallTest public void testPreconditions(){}  }
class C{  public void closeWrite() throws IOException {  close();}  }
class C{  private static String createTitle(final IGraphContainerWindow graphWindow){  int counter=0;  final StringBuffer ret=new StringBuffer();  boolean addSlash=false;  for (  final IGraphPanel window : graphWindow) {    if (addSlash) {      ret.append('/');    }    addSlash=true;    final INaviView view=window.getModel().getGraph().getRawView();    final String viewName=view.getName();    ret.append(viewName);    counter++;    if ((counter == 3) && (graphWindow.getOpenGraphCount() != 3)) {      ret.append("/...");      break;    }  }  return ret.toString();}  }
class C{  protected void postInitTableSchema(ClassDescriptor baseDescriptor){  postInitTableSchema(baseDescriptor,null,null);}  }
class C{  public <T extends EObject>T copyAlienElement(T someElement){  if (TranspilerUtils.isIntermediateModelElement(someElement)) {    throw new IllegalArgumentException("method #copyAlienElement() not intended for copying IM elements - use method #copy() instead!");  }  return preparationStep.copyForIM(state,someElement);}  }
class C{  public void startSpan(SpanBuilder spanBuilder,SpanContext context){  startSpan(spanBuilder,context,null);}  }
class C{  public static double euclideanNormSquared(double[] x1,double[] x2){  double distance=0.0;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    distance+=difference * difference;  }  return distance;}  }
class C{  public void registerRepeatingJob(Class<? extends Job> jobClass,int intervalInSeconds,JobDataMap data) throws SchedulerException {  JobDetail job=newJob(jobClass).withIdentity(jobClass.getSimpleName(),DEFAULT_JOB_GROUP).usingJobData(data).build();  Trigger trigger=newTrigger().withIdentity(jobClass.getSimpleName(),DEFAULT_JOB_GROUP).withSchedule(simpleSchedule().withIntervalInSeconds(intervalInSeconds).repeatForever()).startNow().build();  jobScheduler.scheduleJob(job,trigger);}  }
class C{  public void testGenerateMergedFileModDeleteConflict() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(true);  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(false);  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getFailedToMergeFiles()).isEmpty();  assertThat(merger.getMergedFiles()).isEmpty();}  }
class C{  private boolean onTap(float rawX,float rawY){  OcrGraphic graphic=mGraphicOverlay.getGraphicAtLocation(rawX,rawY);  TextBlock text=null;  if (graphic != null) {    text=graphic.getTextBlock();    if (text != null && text.getValue() != null) {      Intent data=new Intent();      data.putExtra(TextBlockObject,text.getValue());      setResult(CommonStatusCodes.SUCCESS,data);      finish();    } else {      Log.d(TAG,"text data is null");    }  } else {    Log.d(TAG,"no text detected");  }  return text != null;}  }
class C{  void insertOrUpdateChat(String message){  ContentValues values=new ContentValues(2);  values.put(Imps.Chats.LAST_MESSAGE_DATE,System.currentTimeMillis());  values.put(Imps.Chats.LAST_UNREAD_MESSAGE,message);  values.put(Imps.Chats.GROUP_CHAT,mIsGroupChat);  mContentResolver.insert(mChatURI,values);}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractElement ae=(AbstractElement)n;  if (attributes != null) {    NamedNodeMap map=attributes;    for (int i=map.getLength() - 1; i >= 0; i--) {      AbstractAttr aa=(AbstractAttr)map.item(i).cloneNode(true);      if (aa instanceof AbstractAttrNS) {        ae.setAttributeNodeNS(aa);      } else {        ae.setAttributeNode(aa);      }    }  }  return n;}  }
class C{  private static double invokeNativeProcess(String command) throws IOException {  Process process=new ProcessBuilder(Settings.parseCommand(command)).start();  RedirectStream.redirect(process.getErrorStream(),System.err);  BufferedReader reader=null;  String lastLine=null;  try {    reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line=null;    while ((line=reader.readLine()) != null) {      lastLine=line;    }  }  finally {    if (reader != null) {      reader.close();    }  }  String[] tokens=lastLine.split("\\s+");  return Double.parseDouble(tokens[tokens.length - 1]);}  }
class C{  public static Object read(InputStream stream) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] deSerializeArgsClasses=new Class[1];  Object[] deSerializeArgs=new Object[1];  java.lang.reflect.Method methodDeSerialize;  Object result;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  deSerializeArgsClasses[0]=InputStream.class;  deSerializeArgs[0]=stream;  methodDeSerialize=xstreamClass.getMethod("fromXML",deSerializeArgsClasses);  try {    result=methodDeSerialize.invoke(xstream,deSerializeArgs);  } catch (  Exception ex) {    ex.printStackTrace();    result=null;  }  return result;}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void onConnected(Bundle connectionHint){}  }
class C{  public final void yyclose(){  zzAtEOF=true;  zzEndRead=zzStartRead;}  }
class C{  private static Text print_ins_detail(Capstone.CsInsn ins,Capstone cs,AbstractABI abi,IStructure parent){  final StringBuilder comment=new StringBuilder();  final Address32 begin=new Address32(B.intToBytes(B.longToInt(ins.address),ByteOrder.BIG_ENDIAN));  final Range range=new Range(new byte[0],begin,Address32.NULL,parent,AbstractData.Type.TEXT_DECOMPILED,ByteOrder.BIG_ENDIAN);  comment.append(ins.mnemonic);  comment.append(" ");  comment.append(ins.opStr);  X86.OpInfo operands=(X86.OpInfo)ins.operands;  if (operands != null) {    comment.append("Prefix: ");    comment.append(B.bytesToHexString(operands.prefix));    comment.append("\n");    comment.append("Opcode:");    comment.append(B.bytesToHexString(operands.opcode));    comment.append("\n");    comment.append("rex: ");    comment.append(operands.rex);    comment.append("\n");    comment.append("addr_size: ");    comment.append(operands.addrSize);    comment.append("\n");    comment.append("modrm: ");    comment.append(operands.modrm);    comment.append("\n");    comment.append("disp: 0x%x");    comment.append(operands.disp);    comment.append("\n");    if ((cs.mode & Capstone.CS_MODE_16) == 0) {      comment.append("sib: ");      comment.append(operands.sib);      if (operands.sib != 0) {        comment.append("\tsib_base: ");        comment.append(ins.regName(operands.sibBase));        comment.append("\n");        comment.append("\tsib_index: ");        comment.append(ins.regName(operands.sibIndex));        comment.append("\n");        comment.append("\tsib_scale: ");        comment.append(operands.sibScale);        comment.append("\n");      }    }    if (operands.sseCC != 0) {      comment.append("sse_cc: ");      comment.append(operands.sseCC);      comment.append("\n");    }    if (operands.avxCC != 0) {      comment.append("avx_cc: ");      comment.append(operands.avxCC);      comment.append("\n");    }    if (operands.avxSae) {      comment.append("avx_sae: TRUE\n");    }    if (operands.avxRm != 0) {      comment.append("avx_rm: ");      comment.append(operands.avxRm);      comment.append("\n");    }    int count=ins.opCount(capstone.X86_const.X86_OP_IMM);    if (count > 0) {      comment.append("imm_count: ");      comment.append(count);      comment.append("\n");      for (int i=0; i < count; i++) {        int index=ins.opIndex(capstone.X86_const.X86_OP_IMM,i + 1);        comment.append("\timms");        comment.append(i);        comment.append("]: ");        comment.append(operands.op[index].value.imm);        comment.append("\n");      }    }    if (operands.op.length != 0) {      comment.append("op_count:");      comment.append(operands.op.length);      for (int c=0; c < operands.op.length; c++) {        X86.Operand i=(X86.Operand)operands.op[c];        String imm=String.valueOf(i.value.imm);        if (i.type == capstone.X86_const.X86_OP_REG) {          comment.append("\toperands[" + c + "].type: REG = ");          comment.append(ins.regName(i.value.reg));          comment.append("\n");        }        if (i.type == capstone.X86_const.X86_OP_IMM) {          comment.append("\toperands[" + c + "].type: IMM = ");          comment.append(i.value.imm);          comment.append("\n");        }        if (i.type == capstone.X86_const.X86_OP_FP) {          comment.append("\toperands[" + c + "].type: FP = ");          comment.append(i.value.fp);          comment.append("\n");        }        if (i.type == capstone.X86_const.X86_OP_MEM) {          comment.append("\toperands[" + c + "].type: MEM\n");          String segment=ins.regName(i.value.mem.segment);          String base=ins.regName(i.value.mem.base);          String index=ins.regName(i.value.mem.index);          if (segment != null) {            comment.append("\t\toperands[" + c + "].mem.segment: REG = ");            comment.append(segment);            comment.append("\n");          }          if (base != null) {            comment.append("\t\toperands[" + c + "].mem.base: REG = ");            comment.append(base);            comment.append("\n");          }          if (index != null) {            comment.append("\t\toperands[" + c + "].mem.index: REG = ");            comment.append(index);            comment.append("\n");          }          if (i.value.mem.scale != 1) {            comment.append("\t\toperands[" + c + "].mem.scale: ");            comment.append(i.value.mem.scale);            comment.append("\n");          }          if (i.value.mem.disp != 0) {            comment.append("\t\toperands[" + c + "].mem.disp: ");            comment.append(i.value.mem.disp);            comment.append("\n");          }        }        if (i.avx_bcast != capstone.X86_const.X86_AVX_BCAST_INVALID) {          comment.append("\toperands[" + c + "].avx_bcast: ");          comment.append(i.avx_bcast);          comment.append("\n");        }        if (i.avx_zero_opmask) {          comment.append("\toperands[" + c + "].avx_zero_opmask: TRUE\n");        }        comment.append("\toperands[" + c + "].size: ");        comment.append(i.size);        comment.append("\n");      }    }  }  return new Text(range,ins,comment.toString());}  }
class C{  public void addSynapse(final Synapse synapse){  synapse.initSpikeResponder();  synapseList.add(synapse);  synapse.setId(getSynapseIdGenerator().getId());  fireSynapseAdded(synapse);}  }
class C{  private void displayData(){  preview.setVisible(false);  bDelete.setEnabled(false);  bSave.setEnabled(false);  if (m_data != null) {    bSave.setEnabled(true);    bDelete.setEnabled(true);    try {      AMedia media=createMedia();      preview.setContent(media);      preview.setVisible(true);    } catch (    Exception e) {      log.log(Level.SEVERE,"Failed to preview content",e);    }  }}  }
class C{  @Override public String toString(){  return "" + getChar();}  }
class C{  public boolean equals(Object other){  if (!(other instanceof Coordinate)) {    return false;  }  return equals2D((Coordinate)other);}  }
class C{  public static void closeQuietly(Reader reader){  if (reader != null) {    try {      reader.close();    } catch (    Exception e) {    }  }}  }
class C{  public void clearInputs(){  unCache();  for (  TransactionInput input : inputs) {    input.setParent(null);  }  inputs.clear();  this.length=this.bitcoinSerialize().length;}  }
class C{  public static boolean isAbstract(int mod){  return (mod & ABSTRACT) != 0;}  }
class C{  public static boolean isPrimitiveWrapper(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return primitiveWrapperTypeMap.containsKey(clazz);}  }
class C{  private void flushWriteCache(){  if (writeCacheService != null) {    try {      writeCacheService.flush(false);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public void startServer() throws Exception {  getJettyServer().start();}  }
class C{  @Override public long skip(long n) throws IllegalArgumentException, IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  if (n < 0) {    throw new IllegalArgumentException("negative argument not supported");  }  if (n == 0 || lookaheadChar == END_OF_STREAM) {    return 0;  }  long skiped=0;  if (n > 1) {    skiped=super.skip(n - 1);  }  lookaheadChar=super.read();  lineCounter=Integer.MIN_VALUE;  return skiped + 1;}  }
class C{  Tile translateTile(Tile tile){  int id=tile.getId();  TileSet set=tile.getTileSet();  TileInfo info=mapping.getTile(set.getTilebmpFile(),id);  if (info != null) {    TileSet newSet=setByName.get(info.file);    tile=newSet.getTile(info.index);  }  return tile;}  }
class C{  protected void closeReceivers(boolean beingSick){synchronized (this.receivers) {    for (Iterator it=this.receivers.iterator(); it.hasNext(); ) {      Connection con=(Connection)it.next();      if (!beingSick || con.preserveOrder) {        closeCon(LocalizedStrings.ConnectionTable_CONNECTION_TABLE_BEING_DESTROYED.toLocalizedString(),con,beingSick);        it.remove();      }    }synchronized (connectingSockets) {      for (Iterator it=connectingSockets.entrySet().iterator(); it.hasNext(); ) {        Map.Entry entry=(Map.Entry)it.next();        try {          ((Socket)entry.getKey()).close();        } catch (        IOException e) {        }        it.remove();      }    }  }}  }
class C{  public SemRelWordPair_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_GoldValue=jcas.getRequiredFeatureDE(casType,"GoldValue","uima.cas.Double",featOkTst);  casFeatCode_GoldValue=(null == casFeat_GoldValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_GoldValue).getCode();}  }
class C{  public static List<byte[]> readBytesList(DataInput in) throws IOException {  int size=in.readInt();  if (size < 0)   return null;  List<byte[]> res=new ArrayList<>(size);  for (int i=0; i < size; i++)   res.add(readByteArray(in));  return res;}  }
class C{  public void testRandom() throws Exception {  int numCodePointsChecked=0;  for (int codepoint=DECIMAL_DIGIT_CODEPOINTS.nextSetBit(0); codepoint != DocIdSetIterator.NO_MORE_DOCS; codepoint=DECIMAL_DIGIT_CODEPOINTS.nextSetBit(codepoint + 1)) {    assert Character.isDigit(codepoint);    String prefix=TestUtil.randomSimpleString(random());    String suffix=TestUtil.randomSimpleString(random());    StringBuilder expected=new StringBuilder();    expected.append(prefix);    int value=Character.getNumericValue(codepoint);    assert value >= 0 && value <= 9;    expected.append(Integer.toString(value));    expected.append(suffix);    StringBuilder actual=new StringBuilder();    actual.append(prefix);    actual.appendCodePoint(codepoint);    actual.append(suffix);    checkOneTerm(keyword,actual.toString(),expected.toString());    numCodePointsChecked++;  }  assert DECIMAL_DIGIT_CODEPOINTS.cardinality() == numCodePointsChecked;}  }
class C{  public String bPartner(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_BPartner_ID=(Integer)value;  if (C_BPartner_ID == null || C_BPartner_ID.intValue() == 0)   return "";  String sql="SELECT p.AD_Language,p.C_PaymentTerm_ID," + " COALESCE(p.M_PriceList_ID,g.M_PriceList_ID) AS M_PriceList_ID, p.PaymentRule,p.POReference," + " p.SO_Description,p.IsDiscountPrinted,"+ " p.InvoiceRule,p.DeliveryRule,p.FreightCostRule,DeliveryViaRule,"+ " p.SO_CreditLimit, p.SO_CreditLimit-p.SO_CreditUsed AS CreditAvailable,"+ " lship.C_BPartner_Location_ID,c.AD_User_ID,"+ " COALESCE(p.PO_PriceList_ID,g.PO_PriceList_ID) AS PO_PriceList_ID, p.PaymentRulePO,p.PO_PaymentTerm_ID,"+ " lbill.C_BPartner_Location_ID AS Bill_Location_ID, p.SOCreditStatus, "+ " p.SalesRep_ID "+ "FROM C_BPartner p"+ " INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID)"+ " LEFT OUTER JOIN C_BPartner_Location lbill ON (p.C_BPartner_ID=lbill.C_BPartner_ID AND lbill.IsBillTo='Y' AND lbill.IsActive='Y')"+ " LEFT OUTER JOIN C_BPartner_Location lship ON (p.C_BPartner_ID=lship.C_BPartner_ID AND lship.IsShipTo='Y' AND lship.IsActive='Y')"+ " LEFT OUTER JOIN AD_User c ON (p.C_BPartner_ID=c.C_BPartner_ID) "+ "WHERE p.C_BPartner_ID=? AND p.IsActive='Y'";  boolean IsSOTrx="Y".equals(Env.getContext(ctx,WindowNo,"IsSOTrx"));  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_BPartner_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      Integer salesRep=rs.getInt("SalesRep_ID");      if (IsSOTrx && salesRep != 0) {        mTab.setValue("SalesRep_ID",salesRep);      }      Integer ii=new Integer(rs.getInt(IsSOTrx ? "M_PriceList_ID" : "PO_PriceList_ID"));      if (!rs.wasNull())       mTab.setValue("M_PriceList_ID",ii); else {        int i=Env.getContextAsInt(ctx,"#M_PriceList_ID");        if (i != 0)         mTab.setValue("M_PriceList_ID",new Integer(i));      }      mTab.setValue("Bill_BPartner_ID",C_BPartner_ID);      int bill_Location_ID=rs.getInt("Bill_Location_ID");      if (bill_Location_ID == 0)       mTab.setValue("Bill_Location_ID",null); else       mTab.setValue("Bill_Location_ID",new Integer(bill_Location_ID));      int shipTo_ID=rs.getInt("C_BPartner_Location_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String loc=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID");        if (loc.length() > 0)         shipTo_ID=Integer.parseInt(loc);      }      if (shipTo_ID == 0)       mTab.setValue("C_BPartner_Location_ID",null); else       mTab.setValue("C_BPartner_Location_ID",new Integer(shipTo_ID));      int contID=rs.getInt("AD_User_ID");      if (C_BPartner_ID.toString().equals(Env.getContext(ctx,WindowNo,Env.TAB_INFO,"C_BPartner_ID"))) {        String cont=Env.getContext(ctx,WindowNo,Env.TAB_INFO,"AD_User_ID");        if (cont.length() > 0)         contID=Integer.parseInt(cont);      }      if (contID == 0)       mTab.setValue("AD_User_ID",null); else {        mTab.setValue("AD_User_ID",new Integer(contID));        mTab.setValue("Bill_User_ID",new Integer(contID));      }      if (IsSOTrx) {        double CreditLimit=rs.getDouble("SO_CreditLimit");        String SOCreditStatus=rs.getString("SOCreditStatus");        if (CreditLimit != 0) {          double CreditAvailable=rs.getDouble("CreditAvailable");          if (!rs.wasNull() && CreditAvailable < 0)           mTab.fireDataStatusEEvent("CreditLimitOver",DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),false);        }      }      String s=rs.getString("POReference");      if (s != null && s.length() != 0)       mTab.setValue("POReference",s);      s=rs.getString("SO_Description");      if (s != null && s.trim().length() != 0)       mTab.setValue("Description",s);      s=rs.getString("IsDiscountPrinted");      if (s != null && s.length() != 0)       mTab.setValue("IsDiscountPrinted",s); else       mTab.setValue("IsDiscountPrinted","N");      String OrderType=Env.getContext(ctx,WindowNo,"OrderType");      mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_AfterDelivery);      mTab.setValue("DeliveryRule",X_C_Order.DELIVERYRULE_Availability);      mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_OnCredit);      if (OrderType.equals(MOrder.DocSubTypeSO_Prepay)) {        mTab.setValue("InvoiceRule",X_C_Order.INVOICERULE_Immediate);        mTab.setValue("DeliveryRule",X_C_Order.DELIVERYRULE_AfterReceipt);      } else       if (OrderType.equals(MOrder.DocSubTypeSO_POS))       mTab.setValue("PaymentRule",X_C_Order.PAYMENTRULE_Cash); else {        s=rs.getString(IsSOTrx ? "PaymentRule" : "PaymentRulePO");        if (s != null && s.length() != 0) {          if (s.equals("B"))           s="P";          if (IsSOTrx && (s.equals("S") || s.equals("U")))           s="P";          mTab.setValue("PaymentRule",s);        }        ii=new Integer(rs.getInt(IsSOTrx ? "C_PaymentTerm_ID" : "PO_PaymentTerm_ID"));        if (!rs.wasNull())         mTab.setValue("C_PaymentTerm_ID",ii);        s=rs.getString("InvoiceRule");        if (s != null && s.length() != 0)         mTab.setValue("InvoiceRule",s);        s=rs.getString("DeliveryRule");        if (s != null && s.length() != 0)         mTab.setValue("DeliveryRule",s);        s=rs.getString("FreightCostRule");        if (s != null && s.length() != 0)         mTab.setValue("FreightCostRule",s);        s=rs.getString("DeliveryViaRule");        if (s != null && s.length() != 0)         mTab.setValue("DeliveryViaRule",s);      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  public boolean isIncludeNullsLocation(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsLocation);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isCurrentBetween(char left,char right){  if (!isValidIndex())   return false;  return lcText[pos] >= left && lcText[pos] <= right;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof VOMarketplace)) {    return false;  }  VOMarketplace marketplace=(VOMarketplace)obj;  if (getMarketplaceId() != null) {    return getMarketplaceId().equals(marketplace.getMarketplaceId());  } else {    return false;  }}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  private boolean findLogoutPattern(String input){  return _pattern.matcher(input).find();}  }
class C{  public void testAddressInvalidHost() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("126.0.0.1"),false);}  }
class C{  public boolean isInlineSources(){  return inlineSources;}  }
class C{  protected String removeEscapedQuotes(String token){  return StringUtils.replaceAll(token,"''","");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public char[] array(){  return _array;}  }
class C{  public DrawerBuilder withDrawerWidthRes(@DimenRes int drawerWidthRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=mActivity.getResources().getDimensionPixelSize(drawerWidthRes);  return this;}  }
class C{  public h5 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void createListeningSocket() throws IOException {  mServerSocket=mBluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(SDP_NAME,mThisDeviceUUID);  Log.i(TAG,String.format("Listening (insecure RFCOMM) - name <%s>, UUID <%s>.",SDP_NAME,mThisDeviceUUID));}  }
class C{  protected boolean isShown(ResultNode node){  return currentRoot != null && currentRoot == node.getRoot();}  }
class C{  public boolean deleteAlias(String aliasName){  if (!aliasName.contains("'") && AliasDatabase.containsAlias(aliasName)) {    return AliasDatabase.deleteAlias(aliasName);  } else {    return false;  }}  }
class C{  public SVGTitleElementBridge(){}  }
class C{  public void initialize(Scheduler sched) throws SchedulerConfigException {  this.scheduler=sched;}  }
class C{  protected synchronized EPStatementDesc createStopped(StatementSpecRaw statementSpec,Annotation[] annotations,String expression,boolean isPattern,String statementName,boolean nameProvided,int statementId,Map<String,Object> optAdditionalContext,Object statementUserObject,EPIsolationUnitServices isolationUnitServices,boolean isFailed,EPStatementObjectModel optionalModel){  EPStatementDesc statementDesc;  EPStatementStartMethod startMethod;  if (annotations != null) {    for (    Annotation annotation : annotations) {      if (annotation instanceof Hint) {        statementSpec.setHasVariables(true);      }    }  }  ExprNodeSubselectDeclaredDotVisitor visitor;  try {    visitor=StatementSpecRawAnalyzer.walkSubselectAndDeclaredDotExpr(statementSpec);  } catch (  ExprValidationException ex) {    throw new EPStatementException(ex.getMessage(),expression);  }  Set<ExprTableAccessNode> tableAccessNodes=determineTableAccessNodes(statementSpec.getTableExpressions(),visitor);  new HashSet<ExprTableAccessNode>();  if (statementSpec.getTableExpressions() != null) {    tableAccessNodes.addAll(statementSpec.getTableExpressions());  }  if (visitor.getDeclaredExpressions() != null) {    ExprNodeTableAccessVisitor tableAccessVisitor=new ExprNodeTableAccessVisitor(tableAccessNodes);    for (    ExprDeclaredNode declared : visitor.getDeclaredExpressions()) {      declared.getBody().accept(tableAccessVisitor);    }  }  for (  ExprSubselectNode subselectNode : visitor.getSubselects()) {    if (subselectNode.getStatementSpecRaw().getTableExpressions() != null) {      tableAccessNodes.addAll(subselectNode.getStatementSpecRaw().getTableExpressions());    }  }  List<ExprSubselectNode> subselectNodes=visitor.getSubselects();  if (!visitor.getChainedExpressionsDot().isEmpty()) {    rewriteNamedWindowSubselect(visitor.getChainedExpressionsDot(),subselectNodes,services.getNamedWindowMgmtService());  }  validateScripts(expression,statementSpec.getScriptExpressions(),statementSpec.getExpressionDeclDesc());  StatementType statementType=StatementMetadataFactoryDefault.getStatementType(statementSpec,isPattern);  boolean stateless=determineStatelessSelect(statementType,statementSpec,!subselectNodes.isEmpty(),isPattern);  boolean writesToTables=StatementLifecycleSvcUtil.isWritesToTables(statementSpec,services.getTableService());  StatementContext statementContext=services.getStatementContextFactory().makeContext(statementId,statementName,expression,statementType,services,optAdditionalContext,false,annotations,isolationUnitServices,stateless,statementSpec,subselectNodes,writesToTables,statementUserObject);  StatementSpecCompiled compiledSpec;  try {    compiledSpec=compile(statementSpec,expression,statementContext,false,false,annotations,visitor.getSubselects(),visitor.getDeclaredExpressions(),tableAccessNodes,services);  } catch (  RuntimeException ex) {    handleRemove(statementId,statementName);    throw ex;  }  statementContext.setStatementSpecCompiled(compiledSpec);  if (statementSpec.getInsertIntoDesc() != null || statementSpec.getOnTriggerDesc() instanceof OnTriggerMergeDesc) {    String insertIntoStreamName;    if (statementSpec.getInsertIntoDesc() != null) {      insertIntoStreamName=statementSpec.getInsertIntoDesc().getEventTypeName();    } else {      insertIntoStreamName="merge";    }    String latchFactoryNameBack="insert_stream_B_" + insertIntoStreamName + "_"+ statementName;    String latchFactoryNameFront="insert_stream_F_" + insertIntoStreamName + "_"+ statementName;    long msecTimeout=services.getEngineSettingsService().getEngineSettings().getThreading().getInsertIntoDispatchTimeout();    ConfigurationEngineDefaults.Threading.Locking locking=services.getEngineSettingsService().getEngineSettings().getThreading().getInsertIntoDispatchLocking();    InsertIntoLatchFactory latchFactoryFront=new InsertIntoLatchFactory(latchFactoryNameFront,stateless,msecTimeout,locking,services.getTimeSource());    InsertIntoLatchFactory latchFactoryBack=new InsertIntoLatchFactory(latchFactoryNameBack,stateless,msecTimeout,locking,services.getTimeSource());    statementContext.getEpStatementHandle().setInsertIntoFrontLatchFactory(latchFactoryFront);    statementContext.getEpStatementHandle().setInsertIntoBackLatchFactory(latchFactoryBack);  }  boolean needDedup=false;  StatementSpecCompiledAnalyzerResult streamAnalysis=StatementSpecCompiledAnalyzer.analyzeFilters(compiledSpec);  FilterSpecCompiled[] filterSpecAll=streamAnalysis.getFilters().toArray(new FilterSpecCompiled[streamAnalysis.getFilters().size()]);  NamedWindowConsumerStreamSpec[] namedWindowConsumersAll=streamAnalysis.getNamedWindowConsumers().toArray(new NamedWindowConsumerStreamSpec[streamAnalysis.getNamedWindowConsumers().size()]);  compiledSpec.setFilterSpecsOverall(filterSpecAll);  compiledSpec.setNamedWindowConsumersAll(namedWindowConsumersAll);  for (  FilterSpecCompiled filter : filterSpecAll) {    if (filter.getParameters().length > 1) {      needDedup=true;    }    StatementLifecycleSvcUtil.assignFilterSpecIds(filter,filterSpecAll);    registerNonPropertyGetters(filter,statementName,services.getFilterNonPropertyRegisteryService());  }  MultiMatchHandler multiMatchHandler;  boolean isSubselectPreeval=services.getEngineSettingsService().getEngineSettings().getExpression().isSelfSubselectPreeval();  if (!needDedup) {    if (subselectNodes.isEmpty()) {      multiMatchHandler=services.getMultiMatchHandlerFactory().makeNoDedupNoSubq();    } else {      if (isSubselectPreeval) {        multiMatchHandler=services.getMultiMatchHandlerFactory().makeNoDedupSubselectPreval();      } else {        multiMatchHandler=services.getMultiMatchHandlerFactory().makeNoDedupSubselectPosteval();      }    }  } else {    if (subselectNodes.isEmpty()) {      multiMatchHandler=services.getMultiMatchHandlerFactory().makeDedupNoSubq();    } else {      multiMatchHandler=services.getMultiMatchHandlerFactory().makeDedupSubq(isSubselectPreeval);    }  }  statementContext.getEpStatementHandle().setMultiMatchHandler(multiMatchHandler);  boolean canSelfJoin=isPotentialSelfJoin(compiledSpec) || needDedup;  statementContext.getEpStatementHandle().setCanSelfJoin(canSelfJoin);  services.getStatementEventTypeRefService().addReferences(statementName,compiledSpec.getEventTypeReferences());  services.getStatementVariableRefService().addReferences(statementName,compiledSpec.getVariableReferences(),compiledSpec.getTableNodes());  StatementMetadata statementMetadata=services.getStatementMetadataFactory().create(new StatementMetadataFactoryContext(statementName,statementId,statementContext,statementSpec,expression,isPattern,optionalModel));  eventProcessingRWLock.acquireWriteLock();  try {    boolean preserveDispatchOrder=services.getEngineSettingsService().getEngineSettings().getThreading().isListenerDispatchPreserveOrder() && !stateless;    boolean isSpinLocks=services.getEngineSettingsService().getEngineSettings().getThreading().getListenerDispatchLocking() == ConfigurationEngineDefaults.Threading.Locking.SPIN;    long blockingTimeout=services.getEngineSettingsService().getEngineSettings().getThreading().getListenerDispatchTimeout();    long timeLastStateChange=services.getSchedulingService().getTime();    EPStatementSPI statement=services.getEpStatementFactory().make(statementSpec.getExpressionNoAnnotations(),isPattern,services.getDispatchService(),this,timeLastStateChange,preserveDispatchOrder,isSpinLocks,blockingTimeout,services.getTimeSource(),statementMetadata,statementUserObject,statementContext,isFailed,nameProvided);    statementContext.setStatement(statement);    boolean isInsertInto=statementSpec.getInsertIntoDesc() != null;    boolean isDistinct=statementSpec.getSelectClauseSpec().isDistinct();    boolean isForClause=statementSpec.getForClauseSpec() != null;    statementContext.getStatementResultService().setContext(statement,epServiceProvider,isInsertInto,isPattern,isDistinct,isForClause,statementContext.getEpStatementHandle().getMetricsHandle());    startMethod=EPStatementStartMethodFactory.makeStartMethod(compiledSpec);    statementDesc=new EPStatementDesc(statement,startMethod,statementContext);    stmtIdToDescMap.put(statementId,statementDesc);    stmtNameToStmtMap.put(statementName,statement);    stmtNameToIdMap.put(statementName,statementId);    dispatchStatementLifecycleEvent(new StatementLifecycleEvent(statement,StatementLifecycleEvent.LifecycleEventType.CREATE));  } catch (  RuntimeException ex) {    stmtIdToDescMap.remove(statementId);    stmtNameToIdMap.remove(statementName);    stmtNameToStmtMap.remove(statementName);    throw ex;  } finally {    eventProcessingRWLock.releaseWriteLock();  }  return statementDesc;}  }
class C{  public ElementRule(Class type,int min,int max){  this(type,null,null,min,max);}  }
class C{  private void createFirstOctant(Map<Integer,Point> circleIndexPoint,Map<Point,Integer> circlePointIndex){  int x=mRadius;  int y=0;  int decisionOver2=1 - x;  while (y <= x) {    createPoint(x + mX0,y + mY0,circleIndexPoint,circlePointIndex);    y++;    if (decisionOver2 <= 0) {      decisionOver2+=2 * y + 1;    } else {      x--;      decisionOver2+=2 * (y - x) + 1;    }  }}  }
class C{  private static void SetByteField(JNIEnvironment env,int objJREF,int fieldID,byte value){  if (traceJNI)   VM.sysWrite("JNI called: SetByteField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setByteValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private GenericEntry insertGmailFilter(GenericEntry filter) throws ServiceException, IOException {  return gmailFilterService.insert(domain,filter);}  }
class C{  private void sendEvent(EventHolder event,Connection connection){  PublishRequest request=PublishRequest.builder().withSession(id()).withEventIndex(event.eventIndex).withPreviousIndex(Math.max(event.previousIndex,completeIndex)).withEvents(event.events).build();  LOGGER.debug("{} - Sending {}",id,request);  connection.<PublishRequest,PublishResponse>send(request).whenComplete(null);}  }
class C{  private void reserveMetaData(Extent extent){  highWaterMark=0;  if (metaDataPagesPerRegion > 0) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(start.toWord().rshl(EmbeddedMetaData.LOG_BYTES_IN_REGION).lsh(EmbeddedMetaData.LOG_BYTES_IN_REGION).toAddress().EQ(start));    Extent size=extent.toWord().rshl(EmbeddedMetaData.LOG_BYTES_IN_REGION).lsh(EmbeddedMetaData.LOG_BYTES_IN_REGION).toExtent();    Address cursor=start.plus(size);    while (cursor.GT(start)) {      cursor=cursor.minus(EmbeddedMetaData.BYTES_IN_REGION);      int unit=cursor.diff(start).toWord().rshl(LOG_BYTES_IN_PAGE).toInt();      int tmp=freeList.alloc(metaDataPagesPerRegion,unit);      pagesCurrentlyOnFreeList-=metaDataPagesPerRegion;      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(tmp == unit);    }  }}  }
class C{  public void printStackTrace(){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(System.err,true));  } else {    super.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.612 -0500",hash_original_method="58C73D632C90677B10301C6C3F2EA3A6",hash_generated_method="33A3C006471E5CE5D2E5DA6D0C127D49") public SIPIfMatchParser(String etag){  super(etag);}  }
class C{  public BitwiseOpExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  @Override public void onGetUserIdResponse(final GetUserIdResponse getUserIdResponse){  Log.v(TAG,"onGetUserIdResponse recieved: Response -" + getUserIdResponse);  Log.v(TAG,"RequestId:" + getUserIdResponse.getRequestId());  Log.v(TAG,"IdRequestStatus:" + getUserIdResponse.getUserIdRequestStatus());  new GetUserIdAsyncTask().execute(getUserIdResponse);}  }
class C{  private static ImageIcon createImageIcon(String path){  java.net.URL imgURL=ChainBuilder.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  public MonetaryFormat optionalDecimals(int... groups){  List<Integer> decimalGroups=new ArrayList<Integer>(groups.length);  for (  int group : groups)   decimalGroups.add(group);  return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  public WifiInfo syncRequestConnectionInfo(){  return mWifiInfo;}  }
class C{  public boolean isCompatible(Element e){  if (this.equals(e)) {    return true;  }  return ((mSize == e.mSize) && (mType != DataType.NONE) && (mType == e.mType)&& (mVectorSize == e.mVectorSize));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public String missingMergeTipText(){  return "Distribute counts for missing values. Counts are distributed " + "across other values in proportion to their frequency. Otherwise, " + "missing is treated as a separate value.";}  }
class C{  public void idReference(String s) throws ParseException {}  }
class C{  public void purgeWorksheet(String spreadsheet,String worksheet) throws Exception {  WorksheetEntry worksheetEntry=getWorksheet(spreadsheet,worksheet);  CellFeed cellFeed=service.getFeed(worksheetEntry.getCellFeedUrl(),CellFeed.class);  List<CellEntry> cells=cellFeed.getEntries();  for (  CellEntry cell : cells) {    Link editLink=cell.getEditLink();    service.delete(new URL(editLink.getHref()));  }}  }
class C{  public Shape createSliderThumbDiscrete(final int x,final int y,final int w,final int h,final CornerSize size){  final double topArc=size.getRadius(w,h);  final double bottomArcH=size == CornerSize.INTERIOR ? 0 : 1;  final double bottomArcW=3;  path.reset();  path.moveTo(x,y + topArc);  path.quadTo(x,y,x + topArc,y);  path.lineTo(x + w - topArc,y);  path.quadTo(x + w,y,x + w,y + topArc);  path.lineTo(x + w,y + h / 2.0);  path.quadTo(x + w - bottomArcW,y + h - bottomArcH,x + w / 2.0,y + h);  path.quadTo(x + bottomArcW,y + h - bottomArcH,x,y + h / 2.0);  path.closePath();  return path;}  }
class C{  public Card(Card c){  if (c == null)   throw new IllegalArgumentException("Card constructor cannot be passed null argument.");  rank=c.getRank();  suit=c.getSuit();}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  @operator(value={"read","get"},category=IOperatorCategory.FILE,concept={IConcept.ATTRIBUTE,IConcept.FILE}) @doc(value="Reads an attribute of the agent. The attribute's name is specified by the operand.",masterDoc=true,examples={@example(var="agent_name",value="read ('name')",equals="reads the 'name' variable of agent then assigns the returned value to the 'agent_name' variable. ",test=false)}) public static Object opRead(final IScope scope,final String s) throws GamaRuntimeException {  final Map attributes=scope.peekReadAttributes();  if (attributes != null) {    return attributes.get(s);  }  return opRead(scope,scope.getAgent(),s);}  }
class C{  protected List<IResourceDescription> addToDiGraph(Digraph<IResourceDescription> g,IResourceDescription desc,Set<IResourceDescription> alreadyVisited){  List<IResourceDescription> result=new ArrayList<IResourceDescription>();  if (desc == null || !alreadyVisited.add(desc)) {    return result;  }  Iterable<IEObjectDescription> fModels=desc.getExportedObjectsByType(FrancaPackage.eINSTANCE.getFModel());  for (  IEObjectDescription ieObjectDescription : fModels) {    String stringOfUris=ieObjectDescription.getUserData(FrancaCoreEObjectDescriptions.USER_KEY_IMPORT_URIS);    if (stringOfUris != null) {      for (      String stringUri : stringOfUris.split(FrancaCoreEObjectDescriptions.SEPARATOR_CHAR)) {        URI createURI=URI.createURI(stringUri);        if (createURI.isPlatform()) {          IResourceDescription importedDescription=resourceDescriptions.getResourceDescription(createURI);          g.addEdge(desc,importedDescription);          result.add(importedDescription);        }      }    }  }  return result;}  }
class C{  public static void main(final String[] args) throws Exception {  final AbelanaGrpcServer server=new AbelanaGrpcServer();  server.start();}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  @Override public void cancel(){  this.state=State.CANCELLED;  if (request != null && !request.isAborted()) {    try {      request.abort();    } catch (    Throwable e) {    }  }  if (!this.isCancelled()) {    try {      this.cancel(true);    } catch (    Throwable e) {    }  }  client.getConnectionManager().shutdown();  if (callback != null) {    callback.onCancelled();  }}  }
class C{  private void navigateToDump(){  TreePath currentPath=tree.getSelectionPath();  tree.setSelectionPath(currentPath.getParentPath());  tree.scrollPathToVisible(currentPath.getParentPath());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.completePaint=SerialUtilities.readPaint(stream);  this.incompletePaint=SerialUtilities.readPaint(stream);}  }
class C{  void initParametersRolesForNotExistingParameter(){  for (  PricedParameterRow row : getParameters()) {    if (row.getPricedParameter().getKey() == 0) {      for (      PricedParameterRow roleRow : parametersRoles) {        if (roleRow.getParameterDefinition().getKey() == row.getParameterDefinition().getKey()) {          parametersRoles.remove(roleRow);          parametersRoles.add(row);          break;        }      }    }  }}  }
class C{  public static boolean isNumerical(Class type){  return Number.class.isAssignableFrom(type) || type.isPrimitive() && type != Boolean.TYPE && type != Character.TYPE && type != Void.TYPE;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  protected void argTraceSet(int i,String typeHelper,Object arg){  String tracedArg;  try {    tracedArg=rdbmsSpecifics.formatParameterObject(arg);  } catch (  Throwable t) {    log.debug("rdbmsSpecifics threw an exception while trying to format a " + "parameter object [" + arg + "] this is very bad!!! ("+ t.getMessage()+ ")");    tracedArg=arg == null ? "null" : arg.toString();  }  i--;synchronized (argTrace) {    while (i >= argTrace.size()) {      argTrace.add(argTrace.size(),null);    }    if (!showTypeHelp || typeHelper == null) {      argTrace.set(i,tracedArg);    } else {      argTrace.set(i,typeHelper + tracedArg);    }  }}  }
class C{  protected float clampScale(float inScale){  return Math.max(0.005f,Math.min(inScale,1.0f));}  }
class C{  @Override public void printStackTrace(PrintWriter writer){  super.printStackTrace(writer);  if (cause != null) {    writer.println("Caused by:");    cause.printStackTrace(writer);  }}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public String unprunedTipText(){  return "Whether pruning is performed.";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void calculateCutPoints(){  Instances copy=null;  m_CutPoints=new double[getInputFormat().numAttributes()][];  for (int i=getInputFormat().numAttributes() - 1; i >= 0; i--) {    if ((m_DiscretizeCols.isInRange(i)) && (getInputFormat().attribute(i).isNumeric())) {      if (copy == null) {        copy=new Instances(getInputFormat());      }      calculateCutPointsByMDL(i,copy);    }  }}  }
class C{  public static final byte[] unzipBestEffort(byte[] in,int sizeLimit){  try {    ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);    GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));    byte[] buf=new byte[BUF_SIZE];    int written=0;    while (true) {      try {        int size=inStream.read(buf);        if (size <= 0)         break;        if ((written + size) > sizeLimit) {          outStream.write(buf,0,sizeLimit - written);          break;        }        outStream.write(buf,0,size);        written+=size;      } catch (      Exception e) {        break;      }    }    try {      outStream.close();    } catch (    IOException e) {    }    return outStream.toByteArray();  } catch (  IOException e) {    return null;  }}  }
class C{  public void finaliseMotif(){  finalConnections=new int[nrMotifNodes][];  for (int i=0; i < nrMotifNodes; i++) {    ArrayList<Integer> a=initialConnections.get(i);    finalConnections[i]=new int[a.size()];    MotifLink[] finalLinks=new MotifLink[a.size()];    for (int j=0; j < a.size(); j++) {      finalConnections[i][j]=a.get(j);      finalLinks[j]=links[i][a.get(j)];    }    links[i]=finalLinks;  }  initialConnections=null;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void portWarn(Exception e){}  }
class C{  public final void testEqualsObject04(){  ECFieldF2m f1=new ECFieldF2m(2000,new int[]{981,2,1});  ECFieldF2m f2=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000));  assertTrue(f1.equals(f2) && f2.equals(f1));}  }
class C{  public ParseACL(){}  }
class C{  public void close() throws IOException {  if (!closed) {    if (usesDefaultInflater)     inf.end();    in.close();    closed=true;  }}  }
class C{  private void mapVolumes(StorageSystem storage,Map<URI,Integer> volumeMap,Collection<Initiator> initiators,TaskCompleter completer){  _log.info("mapVolumes: volumeMap: {}",volumeMap);  _log.info("mapVolumes: initiators: {}",initiators);  try {    for (    Map.Entry<URI,Integer> volMapEntry : volumeMap.entrySet()) {      URI objectUri=volMapEntry.getKey();      BlockObject object=Volume.fetchExportMaskBlockObject(_dbClient,objectUri);      String monitorAddress=storage.getSmisProviderIP();      String monitorUser=storage.getSmisUserName();      String monitorKey=storage.getSmisPassword();      RBDMappingOptions rbdOptions=new RBDMappingOptions(object);      for (      Initiator initiator : initiators) {        Host host=_dbClient.queryObject(Host.class,initiator.getHost());        if (initiator.getProtocol().equalsIgnoreCase(HostInterface.Protocol.RBD.name())) {          _log.info(String.format("mapVolume: host %s pool %s volume %s",host.getHostName(),rbdOptions.poolName,rbdOptions.volumeName));          LinuxSystemCLI linuxClient=getLinuxClient(host);          linuxClient.mapRBD(monitorAddress,monitorUser,monitorKey,rbdOptions.poolName,rbdOptions.volumeName,rbdOptions.snapshotName);        } else {          String msg=String.format("Unexpected initiator protocol %s, port %s, pool %s, volume %s",initiator.getProtocol(),initiator.getInitiatorPort(),rbdOptions.poolName,rbdOptions.volumeName);          ServiceCoded code=DeviceControllerErrors.ceph.operationFailed("mapVolumes",msg);          completer.error(_dbClient,code);          return;        }      }    }    completer.ready(_dbClient);  } catch (  Exception e) {    _log.error("Encountered an exception",e);    ServiceCoded code=DeviceControllerErrors.ceph.operationFailed("mapVolumes",e.getMessage());    completer.error(_dbClient,code);  }}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  @Override public boolean matches(ReferenceType refType){  if (classId.startsWith("*")) {    return refType.name().endsWith(stem);  } else   if (classId.endsWith("*")) {    return refType.name().startsWith(stem);  } else {    return refType.name().equals(classId);  }}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public final boolean isForbiddenByTiers(String var1,String var2){  for (  OrderedPair<Set<MyNode>> rule : forbiddenTierRules()) {    if (rule.getFirst().contains(getVar(var1))) {      if (rule.getSecond().contains(getVar(var2))) {        return true;      }    }  }  return false;}  }
class C{  public int countInstructions(){  int num=0;  for (Instruction instr=firstInstructionInCodeOrder(); instr != null; instr=instr.nextInstructionInCodeOrder(), num++) {  }  return num;}  }
class C{  public void require(T id){  requires.add(id);}  }
class C{  public void prune(){}  }
class C{  public ClassPath appendClassPath(ClassPath cp){  return source.appendClassPath(cp);}  }
class C{  public static boolean transientLastDdlTimesMatch(Table table1,Table table2){  if (table1 == null || table2 == null) {    return false;  }  return StringUtils.equals(table1.getParameters().get(HiveParameterKeys.TLDT),table2.getParameters().get(HiveParameterKeys.TLDT));}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultListener.postProcess(this);  if (m_debugOutput) {    if (m_ZipDest != null) {      m_ZipDest.finished();      m_ZipDest=null;    }  }}  }
class C{  public synchronized void remove(){  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();  weakMap.remove(contextClassLoader);}  }
class C{  private void openFile(final File file,final String bookmark){  try {    final boolean fileCanBeOpened=OpenFile.openUpFile(file.getCanonicalPath(),commonValues,searchFrame,currentGUI,decode_pdf,properties,thumbnails);    String bookmarkPage=null;    int page=-1;    if (decode_pdf.getOutlineAsXML() != null) {      final Node rootNode=decode_pdf.getOutlineAsXML().getFirstChild();      if (rootNode != null) {        bookmarkPage=currentGUI.getBookmark(bookmark);      }      if (bookmarkPage != null) {        page=Integer.parseInt(bookmarkPage);      }    }    if (bookmarkPage == null) {      bookmarkPage=decode_pdf.getIO().convertNameToRef(bookmark);      if (bookmarkPage != null) {        final PdfObject namedDest=new OutlineObject(bookmarkPage);        decode_pdf.getIO().readObject(namedDest);        if (fileCanBeOpened) {          OpenFile.processPage(commonValues,decode_pdf,currentGUI,thumbnails);        }        decode_pdf.getFormRenderer().getActionHandler().gotoDest(namedDest,ActionHandler.MOUSECLICKED,PdfDictionary.Dest);      }    }    if (bookmarkPage == null) {      throw new PdfException("Unknown bookmark " + bookmark);    }    if (page > -1) {      commonValues.setCurrentPage(page);      if (fileCanBeOpened) {        OpenFile.processPage(commonValues,decode_pdf,currentGUI,thumbnails);      }    }  } catch (  final Exception e) {    System.err.println("Exception " + e + " processing file");    e.printStackTrace();    Values.setProcessing(false);  }}  }
class C{  static TNBuilderConfig loadJson(File file){  try (FileInputStream jsonStream=new FileInputStream(file)){    TNBuilderConfig config=JsonUtilities.objectMapper.readValue(jsonStream,TNBuilderConfig.class);    config.fillPath(file.getParent());    LOG.info("Found and loaded JSON configuration file '{}'",file);    return config;  } catch (  FileNotFoundException ex) {    LOG.info("File '{}' is not present. Using default configuration.",file);    return TNBuilderConfig.defaultConfig();  }catch (  Exception ex) {    LOG.error("Error while parsing JSON config file '{}': {}",file,ex.getMessage());    System.exit(42);    return null;  }}  }
class C{  public static Container encloseRight(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.RIGHT),cmps);}  }
class C{  public static String createCustomTempDirectory(String customDirectory){  log.info("Creating a custom temp directory");  try {    Path tempDirectory=Files.createTempDirectory(customDirectory);    File tempFile=tempDirectory.toFile();    if (tempDirectoryList == null)     tempDirectoryList=new ArrayList<File>();    tempDirectoryList.add(tempFile);    createDirectory(tempFile.getCanonicalPath());    log.info("Finished creating custom temp directory " + tempFile.getCanonicalPath());    return tempFile.getCanonicalPath();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public InputStream readInputStream() throws IOException {  int tag=read();switch (tag) {case 'N':    return null;case BC_BINARY:case BC_BINARY_CHUNK:  _isLastChunk=tag == BC_BINARY;_chunkLength=(read() << 8) + read();break;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:_isLastChunk=true;_chunkLength=tag - 0x20;break;case 0x34:case 0x35:case 0x36:case 0x37:_isLastChunk=true;_chunkLength=(tag - 0x34) * 256 + read();break;default :throw expect("binary",tag);}return new ReadInputStream();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.879 -0500",hash_original_method="5ADD93B4871E994650D7A4687B03F29C",hash_generated_method="E9E9FE6807846298D52AD58540EE9F44") @DSComment("getter function") @DSSafe(DSCat.SAFE_OTHERS) public boolean isReply(){  return !isCommand();}  }
class C{  public String randomNegativeFloat(Object owhole,Object odecimal){  return "-" + randomPositiveFloat(owhole,odecimal);}  }
class C{  @Override public boolean canPause(){  return true;}  }
class C{  public void updateCommercialDelaySettings(boolean enabled,long length){  useCommercialDelay.setSelected(enabled);  commercialDelay.setSettingValue(length);}  }
class C{  @Override public void newRound(int roundNumber){  if (hasWorkingMisc(MiscType.F_ELECTRIC_DISCHARGE_ARMOR) && !edpCharged) {    for (    Mounted misc : getMisc()) {      if (misc.getType().hasFlag(MiscType.F_ELECTRIC_DISCHARGE_ARMOR) && misc.curMode().equals("charging")) {        if (edpChargeTurns == 6) {          setEDPCharged(true);          misc.setMode("not charging");          edpChargeTurns=0;        } else {          edpChargeTurns++;        }      }    }  }  setSecondaryFacing(getFacing());  grappledThisRound=false;  super.newRound(roundNumber);}  }
class C{  long reduce(long threshold,long next_threshold){  if (nchild != 0) {    for (int id=0; id < 8; id++) {      if (child[id] != null) {        next_threshold=child[id].reduce(threshold,next_threshold);      }    }  }  if (number_pixels <= threshold) {    pruneChild();  } else {    if (unique != 0) {      cube.colors++;    }    if (number_pixels < next_threshold) {      next_threshold=number_pixels;    }  }  return next_threshold;}  }
class C{  @Override public void disconnect() throws IOException {  clientCache.close();}  }
class C{  @Override public P readPage(int pageID){  try {    countRead();    return byteBufferToPage(this.file.getRecordBuffer(pageID));  } catch (  IOException e) {    throw new RuntimeException("IOException occurred during reading of page " + pageID,e);  }}  }
class C{  private void createIdentity(String number){  given().body("{ \"number\" : \"" + number + "\"}").header("x-delta","auto").put("/users/" + number + "/user/v1/identity");}  }
class C{  public static boolean deleteFile(File file){  boolean fileDeleted=false;  try {    if (file != null && file.exists()) {      fileDeleted=file.delete();    }  } catch (  Exception e) {    GlobalUtils.logThis(TAG,"deleteFile Exception",e);  }  return fileDeleted;}  }
class C{  public ECMAScriptSingleTestConfigProvider(String validatorListFileName,String... blacklistFileNames) throws IOException {  super(blacklistFileNames);  validators=readModifierFiles(validatorListFileName);}  }
class C{  public byte[] toByteArray(){  return Arrays.clone(bytes);}  }
class C{  public String resolvePredefinedMacros(String str,Operator operator) throws UndefinedParameterError {  if (str == null) {    return null;  }  StringBuffer result=new StringBuffer();  int totalStart=0;  int start=0;  while ((start=str.indexOf(Operator.MACRO_STRING_START,totalStart)) >= 0) {    result.append(str.substring(totalStart,start));    int end=str.indexOf(Operator.MACRO_STRING_END,start);    if (end == -1) {      return str;    }    if (end >= start) {      String command=str.substring(start + 2,end);      String unshiftedOperatorMacroResult=resolveUnshiftedOperatorMacros(command,operator);      if (unshiftedOperatorMacroResult != null) {        result.append(unshiftedOperatorMacroResult);      } else       if (command.startsWith(Operator.STRING_EXPANSION_MACRO_NUMBER_APPLIED_TIMES_SHIFTED + Operator.STRING_EXPANSION_MACRO_PARAMETER_START)) {        int openNumberIndex=command.indexOf(Operator.STRING_EXPANSION_MACRO_PARAMETER_START);        int closeNumberIndex=command.indexOf(Operator.STRING_EXPANSION_MACRO_PARAMETER_END,openNumberIndex);        if (closeNumberIndex < 0 || closeNumberIndex <= openNumberIndex + 1) {          throw new UndefinedMacroError(operator,"predefinedMacro_shiftedExecutionCounter_format","");        }        String numberString=command.substring(openNumberIndex + 1,closeNumberIndex);        int number;        try {          number=Integer.parseInt(numberString);        } catch (        NumberFormatException e) {          throw new UndefinedMacroError(operator,"946",numberString);        }        result.append(operator.getApplyCount() + number);      } else       if (Operator.STRING_EXPANSION_MACRO_TIME.equals(command)) {        resolveTimeMacro(result);      } else       if (command.startsWith(Operator.STRING_EXPANSION_MACRO_OPERATORVALUE + Operator.STRING_EXPANSION_MACRO_PARAMETER_START)) {        int openNumberIndex=command.indexOf(Operator.STRING_EXPANSION_MACRO_PARAMETER_START);        int closeNumberIndex=command.indexOf(Operator.STRING_EXPANSION_MACRO_PARAMETER_END,openNumberIndex);        if (closeNumberIndex < 0 || closeNumberIndex <= openNumberIndex + 1) {          throw new UndefinedMacroError(operator,"predefinedMacro_OperatorValue_format","");        }        String operatorValueString=command.substring(openNumberIndex + 1,closeNumberIndex);        String[] operatorValuePair=operatorValueString.split("\\.");        if (operatorValuePair.length != 2) {          throw new UndefinedMacroError(operator,"predefinedMacro_OperatorValue_format","");        }        Operator op=process.getOperator(operatorValuePair[0]);        if (op == null) {          throw new UndefinedMacroError(operator,"predefinedMacro_OperatorValue_wrongOperator",operatorValuePair[0]);        }        Value value=op.getValue(operatorValuePair[1]);        if (value == null) {          throw new UndefinedMacroError(operator,"predefinedMacro_OperatorValue_noValue",operatorValuePair[1]);        } else {          if (value.isNominal()) {            Object valueObject=value.getValue();            if (valueObject != null) {              result.append(valueObject.toString());            } else {              throw new UndefinedMacroError(operator,"predefinedMacro_OperatorValue_noValue",operatorValuePair[1]);            }          } else {            double doubleValue=((Double)value.getValue()).doubleValue();            if (!Double.isNaN(doubleValue)) {              result.append(Tools.formatIntegerIfPossible(doubleValue));            } else {              operator.logError("Value '" + operatorValuePair[1] + "' of the operator '"+ operatorValuePair[0]+ "' not found!");            }          }        }      } else       if (Operator.STRING_EXPANSION_MACRO_PERCENT_SIGN.equals(command)) {        result.append('%');      } else {        result.append(command);      }    } else {      end=start + 2;      result.append(Operator.MACRO_STRING_START);    }    totalStart=end + 1;  }  result.append(str.substring(totalStart));  return result.toString();}  }
class C{  public static void cancelAll(Context context){  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.cancelAll();}  }
class C{  protected boolean isGeometryClosed(){  geometryClosed=false;switch (renderType) {case RENDERTYPE_XY:case RENDERTYPE_OFFSET:    if (xs != null && xs.length > 2) {      geometryClosed=(xs[0] == xs[xs.length - 1] && ys[0] == ys[ys.length - 1]);    }  break;case RENDERTYPE_LATLON:if (rawllpts != null) {  int l=rawllpts.length;  if (l > 4) {    geometryClosed=(MoreMath.approximately_equal(rawllpts[0],rawllpts[l - 2]) && MoreMath.approximately_equal(rawllpts[1],rawllpts[l - 1]));  }}break;case RENDERTYPE_UNKNOWN:Debug.error("OMPoly.generate: invalid RenderType");break;}return geometryClosed;}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x) throws SQLException {  updateBinaryStream(columnIndex,x,-1);}  }
class C{  public boolean hasNetLoader(){  return this.hasNetLoader(getCacheDistributionAdvisor());}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:02.109 -0500",hash_original_method="EA8A569E03B996F70B23469E519E27CE",hash_generated_method="B221261CB6FC6B0F4A910B3CB2F86672") public String chooseEngineClientAlias(String[] keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  public String sqlADAction_updateTerminology(String vendorName,String catalogName,String schemaName,String targetTableName,String sourceTableName,String targetTranslationName,String sourceTranslationName,ArrayList<String> joinTableNames,ArrayList<String> linkConditions,ArrayList<String> extraTableNames,ArrayList<String> extraConditions,boolean hasCentrallyMaintained,ArrayList<String> updateColumns,ArrayList<String> updateValues,ArrayList<String> updateConditions){  return m_interfaces.get(getDBVendorID(vendorName)).sqlADAction_updateTerminology(catalogName,schemaName,targetTableName,sourceTableName,targetTranslationName,sourceTranslationName,joinTableNames,linkConditions,extraTableNames,extraConditions,hasCentrallyMaintained,updateColumns,updateValues,updateConditions);}  }
class C{  public static <A>CompletableFutureTValue<A> of(final AnyMValue<CompletableFuture<A>> monads){  return new CompletableFutureTValue<>(monads);}  }
class C{  public void straight(double x,double y){  double dx=x - pen.x;  double dy=y - pen.y;  if (convertToTwips) {    dx*=SwfConstants.TWIPS_PER_PIXEL;    dy*=SwfConstants.TWIPS_PER_PIXEL;  }  if (dx == 0 && dy == 0) {    return;  } else {    int intdx=(int)Math.rint(dx);    int intdy=(int)Math.rint(dy);    addLineSubdivideAware(intdx,intdy);    pen.x=x;    pen.y=y;    dxSumTwips+=intdx;    dySumTwips+=intdy;  }}  }
class C{  private void insertFloppy(VirtualFloppy floppy,String imagePath){  VirtualFloppyImageBackingInfo backingInfo=new VirtualFloppyImageBackingInfo();  backingInfo.setFileName(imagePath);  floppy.setBacking(backingInfo);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_DEFS__TYPES:    getTypes().clear();  getTypes().addAll((Collection<? extends Type>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static void readChallenge(Node challengeNode,long categoryId,long challengeId,List<Challenge> challengeList,List<Answer> answerList) throws UnexpectedElementException, ElementAmountException, InvalidAttributeException {  if (!challengeNode.getNodeName().equals("challenge")) {    throw new UnexpectedElementException(challengeNode.getNodeName());  }  NamedNodeMap attributes=challengeNode.getAttributes();  Node typeNode=attributes.getNamedItem("type");  Node questionNode=attributes.getNamedItem("question");  int type=Integer.parseInt(typeNode.getNodeValue());  String question=questionNode.getNodeValue();  if (type != ChallengeType.MULTIPLE_CHOICE && type != ChallengeType.SELF_TEST && type != ChallengeType.TEXT) {    throw new InvalidAttributeException("type","" + type);  }  challengeList.add(new Challenge(challengeId,type,question,categoryId));  Node childChallenge=challengeNode.getFirstChild();  int answerCount=0;  while (childChallenge != null) {    if (childChallenge.getNodeType() == Node.ELEMENT_NODE) {      readAnswer(childChallenge,challengeId,answerList);      answerCount++;    }    childChallenge=childChallenge.getNextSibling();  }  if (answerCount == 0)   throw new ElementAmountException("<answer>",">0","0"); else   if (type == ChallengeType.MULTIPLE_CHOICE && answerCount != 4)   throw new ElementAmountException("<answer>","4","" + answerCount);}  }
class C{  public void removeZoomListener(ZoomListener zoomListener){  zoomListeners.remove(zoomListener);}  }
class C{  public void updateIntent(Intent intent){  clear();  if (mContext == null || intent == null || !Intent.ACTION_VIEW.equals(intent.getAction())) {    return;  }  String chromePackageName=mContext.getPackageName();  if (TextUtils.equals(chromePackageName,intent.getPackage()) || TextUtils.equals(chromePackageName,IntentUtils.safeGetStringExtra(intent,Browser.EXTRA_APPLICATION_ID))) {    mIsInitialIntentHeadingToChrome=true;  }  mInitialIntent=new Intent(Intent.ACTION_VIEW);  mInitialIntent.setData(intent.getData());  if (intent.getCategories() != null) {    for (    String category : intent.getCategories()) {      mInitialIntent.addCategory(category);    }  }}  }
class C{  @Override public int hashCode(){  return isPresent ? value : 0;}  }
class C{  @Override public UpdateResponse deleteById(String id,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteById(id,commitWithinMs);  return ur;}  }
class C{  protected void paintScrollbarX(Graphics g){  float scrollW=getScrollDimension().getWidth();  float block=((float)getWidth()) / scrollW;  float offset;  if (getScrollX() + getWidth() == scrollW) {    offset=1 - block;  } else {    offset=(((float)getScrollX() + getWidth()) / scrollW) - block;  }  getUIManager().getLookAndFeel().drawHorizontalScroll(g,this,offset,block);}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    phrase.setText("" + Speech.DEFAULT_PHRASE);    threshold.setText("" + Speech.DEFAULT_THRESHOLD);  } else {    phrase.setText("" + speechEffector.getPhrase());    threshold.setText("" + speechEffector.getThreshold());  }}  }
class C{  public static int ENOENT(){  return Errno.ENOENT.intValue();}  }
class C{  public Builder deleteTimezone(){  deleteFields.add("timezone");  return this;}  }
class C{  public int failedShards(){  return shardCounts.failed;}  }
