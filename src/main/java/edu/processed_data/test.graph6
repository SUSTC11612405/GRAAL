class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);}  }
class C{  @NotNull public static String formatContinuation(@NotNull String message){  return String.format("+ %s",message);}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  if ((n & -n) == n) {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    return (int)((n * (long)(y >>> 1)) >> 31);  }  int bits, val;  do {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    bits=(y >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  public WallEditCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  @Override public void write(char[] chr,int st,int end){}  }
class C{  public HexDump(){  super();}  }
class C{  @Override public void configure(){  from(inputUri).unmarshal(dataTypeUnMarshal).to(String.format("canova://%s?inputMarshaller=%s&writableConverter=%s",inputFormat,canovaMarshaller,writableConverter)).process(processor).to(String.format("kafka:%s?topic=%s&zookeeperHost=%szookeeperPort=%d&serializerClass=%s&keySerializerClass=%s",kafkaBrokerList,topicName,zooKeeperHost,zooKeeperPort,StringEncoder.class.getName(),StringEncoder.class.getName()));}  }
class C{  private boolean isNumber(String string){  String s=string.trim();  if (s.length() < 1)   return false;  double value=0;  try {    value=Double.parseDouble(s);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  protected GroupsReorderLinkQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  x=in.readFloat();  y=in.readFloat();}  }
class C{  public static MetricColumn addNewMetricColumn(Schema schema,String name){  MetricColumn col=new MetricColumn(name);  schema.addColumn(col);  return col;}  }
class C{  private float x(TouchState s){  final float currToTan=(float)Math.sqrt((s.distance * s.distance) - (mScaledTouchSlop * mScaledTouchSlop));  return currToTan * (currToTan / s.distance);}  }
class C{  public int skipBytes(int bytes) throws IOException {  int skipped=(int)ins.skip(bytes);  position+=skipped;  return skipped;}  }
class C{  public void initGui(){  KeyBinding.unPressAllKeys();  this.field_146445_a=0;  this.buttonList.clear();  byte var1=-16;  boolean var2=true;  String[] chatcommands=mc.vrSettings.vrQuickCommands;  int w=0;  for (int i=0; i < chatcommands.length; i++) {    w=i > 5 ? 1 : 0;    String com=chatcommands[i];    this.buttonList.add(new GuiButton(200 + i,this.width / 2 - 125 + 127 * w,36 + (i - 6 * w) * 24,125,20,com.toString()));  }  this.buttonList.add(new GuiButton(102,this.width / 2 - 50,this.height - 30 + var1,100,20,"Cancel"));}  }
class C{  @Override protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedNonSymmGraphComparator();}  }
class C{  public void loadIdentity(){  m01=m02=m03=0.0f;  m10=m12=m13=0.0f;  m20=m21=m23=0.0f;  m30=m31=m32=0.0f;  m00=m11=m22=m33=1.0f;}  }
class C{  private void createCreditsCard(){  CreditsItem[] creditsCard=new CreditsItem[creditsTitle.length];  for (int i=0; i < creditsTitle.length; i++)   creditsCard[i]=new CreditsItem(creditsTitle[i],creditsDesc[i],credits[i]);  creditsRecycler.setLayoutManager(new LinearLayoutManager(context));  creditsRecycler.setAdapter(new CreditsAdapter(creditsCard,context));  creditsRecycler.setHasFixedSize(true);}  }
class C{  public static <E>Stream<LongSummaryStatistics> shiftingWindowSummarizingLong(Stream<E> stream,int rollingFactor,ToLongFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  LongStream longStream=stream.mapToLong(mapper);  return shiftingWindowSummarizingLong(longStream,rollingFactor);}  }
class C{  public boolean isUniqueContentOnly(){  return uniqueContentOnly;}  }
class C{  public int nodeSizeLimit(){  return nodeSizeLimit;}  }
class C{  public static boolean isFieldTypeSupported(String fieldType){  if ("boolean".equals(fieldType) || "java.lang.Boolean".equals(fieldType)) {    return true;  }  if ("float".equals(fieldType) || "java.lang.Float".equals(fieldType)) {    return true;  }  if ("double".equals(fieldType) || "java.lang.Double".equals(fieldType)) {    return true;  }  if ("int".equals(fieldType) || "java.lang.Integer".equals(fieldType)) {    return true;  }  if ("long".equals(fieldType) || "java.lang.Long".equals(fieldType)) {    return true;  }  if ("short".equals(fieldType) || "java.lang.Short".equals(fieldType)) {    return true;  }  if ("char".equals(fieldType) || "java.lang.Character".equals(fieldType)) {    return true;  }  if ("[B".equals(fieldType) || "[Ljava.lang.Byte;".equals(fieldType)) {    return true;  }  if ("java.lang.String".equals(fieldType) || "java.util.Date".equals(fieldType)) {    return true;  }  return false;}  }
class C{  public void createOrEditDevice(@NotNull Device device){  if (!initIfNecessary()) {    return;  }  ourDeviceManager.replaceUserDevice(device);  ourDeviceManager.saveUserDevices();}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public IdentityHashSet(){  delegate=new IdentityHashMap<E,E>();}  }
class C{  @Override public UserDetails mapUserFromContext(DirContextOperations dirContextOperations,String username,Collection<? extends GrantedAuthority> authorities){  logger.debug("Mapping user from context");  UserDetails userDetails=null;  try {    userDetails=userDetailsServiceImpl.loadUserByUsername(username);  } catch (  UsernameNotFoundException e) {    String givenName=dirContextOperations.getStringAttribute("givenname");    String surname=dirContextOperations.getStringAttribute("sn");    String commonName=dirContextOperations.getStringAttribute("cn");    userDetails=userDetailsServiceImpl.createBasicUser(username,givenName,surname,commonName);  }  return userDetails;}  }
class C{  protected void displayAddressOutput(){  try {    if (mAreaOutput != null)     mLocationAddress.setText(mAddressOutput);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  public static int toIntBits(int r,int g,int b,int a){  return (a << 24) | (b << 16) | (g << 8)| r;}  }
class C{  public AemInsertWindow insertComponent(Class<?> componentClass){  chooseComponent(componentClass,chooseTab(componentClass));  clickOkAndWait();  return this;}  }
class C{  public int bdd_nodes(){  return soot.PhaseOptions.getInt(options,"bdd-nodes");}  }
class C{  public RadialTreeLayout(String group){  super(group);  m_radiusInc=DEFAULT_RADIUS;  m_prevRoot=null;  m_theta1=0;  m_theta2=m_theta1 + MathLib.TWO_PI;}  }
class C{  public PollsGetVotersQuery(VkApiClient client,UserActor actor,int pollId,List<Integer> answerIds){  super(client,"polls.getVoters",Utils.buildParametrizedType(List.class,Voters.class));  accessToken(actor.getAccessToken());  pollId(pollId);  answerIds(answerIds);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public String toString(){  return name;}  }
class C{  public String authorizeConsumerRequestToken(String url) throws Exception {  WebTarget target=ClientBuilder.newClient().target(url);  Invocation.Builder builder=target.request();  builder.header("Accept","application/xml");  String base64Credentials=new String(Base64.encodeBytes("admin:admin".getBytes()));  builder.header("Authorization","Basic " + base64Credentials);  Response response=null;  try {    response=builder.get();    if (200 != response.getStatus()) {      throw new RuntimeException("No authorization request data is available");    }    String body=response.readEntity(String.class);    String consumerId=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:consumerId/text()");    String consumerName=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:consumerName/text()");    String requestScope=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:scopes/text()");    String requestPermission=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:permissions/text()");    String message="Authorize " + ("".equals(consumerName) ? consumerId : consumerName) + System.getProperty("line.separator")+ " to access "+ ("".equals(requestScope) ? "your resources" : requestScope)+ (requestPermission == null ? "" : (System.getProperty("line.separator") + " and grant the following permissions : \"" + requestPermission+ "\""))+ " (yes/no) ?";    String decision=JOptionPane.showInputDialog(message);    if (decision == null || !"yes".equalsIgnoreCase(decision)) {      decision="no";    }    String replyTo=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/@replyTo");    replyTo+="&xoauth_end_user_decision=" + decision.toLowerCase();    return confirmAuthorization(replyTo);  }  finally {    response.close();  }}  }
class C{  public boolean evaluateStep(final FieldODEStateInterpolator<T> interpolator) throws MathIllegalArgumentException, MathIllegalStateException {  forward=interpolator.isForward();  final FieldODEStateAndDerivative<T> s1=interpolator.getCurrentState();  final T t1=s1.getTime();  final T dt=t1.subtract(t0);  if (dt.abs().subtract(convergence).getReal() < 0) {    return false;  }  final int n=FastMath.max(1,(int)FastMath.ceil(FastMath.abs(dt.getReal()) / maxCheckInterval));  final T h=dt.divide(n);  T ta=t0;  T ga=g0;  for (int i=0; i < n; ++i) {    final T tb=(i == n - 1) ? t1 : t0.add(h.multiply(i + 1));    final T gb=handler.g(interpolator.getInterpolatedState(tb));    if (gb.getReal() == 0.0 || (g0Positive ^ (gb.getReal() > 0))) {      if (findRoot(interpolator,ta,ga,tb,gb)) {        return true;      }    } else {      ta=tb;      ga=gb;    }  }  pendingEvent=false;  pendingEventTime=null;  return false;}  }
class C{  public CM_LOGIN(ByteBuffer buf,LoginConnection client){  super(buf,client,0x0b);}  }
class C{  private void DrawPrimitive(DrawCuboid c,World w) throws Exception {  XMLBlockState blockType=new XMLBlockState(c.getType(),c.getColour(),c.getFace(),c.getVariant());  if (!blockType.isValid())   throw new Exception("Unrecogised item type: " + c.getType().value());  clearEntities(w,c.getX1(),c.getY1(),c.getZ1(),c.getX2(),c.getY2(),c.getZ2());  int x1=Math.min(c.getX1(),c.getX2());  int x2=Math.max(c.getX1(),c.getX2());  int y1=Math.min(c.getY1(),c.getY2());  int y2=Math.max(c.getY1(),c.getY2());  int z1=Math.min(c.getZ1(),c.getZ2());  int z2=Math.max(c.getZ1(),c.getZ2());  for (int x=x1; x <= x2; x++) {    for (int y=y1; y <= y2; y++) {      for (int z=z1; z <= z2; z++) {        BlockPos pos=new BlockPos(x,y,z);        setBlockState(w,pos,blockType);      }    }  }}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public Builder opacity(Number opacity){  this.opacity=opacity;  return this;}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    requestPasswordForShareViaLink(false);  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().setPasswordToShareViaLink(mFile,"");  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnPasswordInteractionListener);}  }
class C{  public ShortStringTranslator(String[] strings){  if (strings.length > Short.MAX_VALUE)   throw new IllegalArgumentException("Too many strings for a short-string translator");  list=new ArrayList<String>(Arrays.asList(strings));  map=new HashMap<String,Short>();  for (int i=0; i < strings.length; i++) {    map.put(strings[i],(short)i);  }}  }
class C{  public void write(IOutputWriter indexWriter) throws IOException {  for (  Object[] dataRecord : data) {switch ((Character)dataRecord[1]) {case 'i':      indexWriter.writeInt((Integer)dataRecord[2]);    break;case 'f':  indexWriter.writeFloat((Float)dataRecord[2]);break;case 'l':indexWriter.writeLong((Long)dataRecord[2]);break;case 'b':indexWriter.write((Byte)dataRecord[2]);break;case 'B':indexWriter.writeByteByteInt((ByteByteInt)dataRecord[2]);break;case 'c':indexWriter.writeChar((Character)dataRecord[2]);break;}}}  }
class C{  public Expression notEqual(Value v1,Value v2){  return new BinaryExpression(v1,v2,ExpressionType.NOT_EQUAL);}  }
class C{  public static boolean hasComplexDataType(DataType dataType){switch (dataType) {case ARRAY:case STRUCT:case MAP:    return true;default :  return false;}}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  public AppsGetCatalogQuery q(String value){  return unsafeParam("q",value);}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    if (isTranspose()) {      final String[] seriesIncludingDisabled=getChartData().getSeriesNamesIncludingDisabled();      final double[] percentFactor;      percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),seriesIncludingDisabled);      topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),seriesIncludingDisabled,percentFactor);      if (transposedHeightsAdditive && seriesIncludingDisabled.length > 0) {        topY/=(double)seriesIncludingDisabled.length;      }    } else     topY=101;  } else   if (scalingType == ChartViewer.ScalingType.LOG) {    drawYAxisLog(gc,size);    return;  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    drawYAxisSqrt(gc,size);    return;  } else   topY=1.1 * getMaxValue();  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  boolean doDraw=(size == null);  Rectangle bbox=null;  double yFactor=(y0 - y1) / topY;  int tickStep=0;  int minSpace=50;  for (int i=1; tickStep == 0; i*=10) {    if (i * yFactor >= minSpace)     tickStep=i; else     if (2.5 * i * yFactor >= minSpace)     tickStep=(int)(2.5 * i); else     if (5 * i * yFactor >= minSpace)     tickStep=5 * i;  }  for (int value=0; (value - 1) < topY; value+=tickStep) {    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;    String label=String.format("%,d",value);    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();    double yPos=y0 - value * yFactor;    int x=leftMargin - (int)(labelSize.getWidth() + 3);    int y=(int)(yPos + labelSize.getHeight() / 2.0);    if (doDraw) {      gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));      gc.drawString(label,x,y);      if (value == 0 || isShowVerticalGridLines()) {        gc.setColor(Color.LIGHT_GRAY);        gc.drawLine(x0,(int)Math.round(yPos),x1,(int)Math.round(yPos));      }    } else {      Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);      if (bbox == null)       bbox=rect; else       bbox.add(rect);    }  }  String axisLabel=getChartData().getCountsLabel() + (scalingType == ChartViewer.ScalingType.PERCENT ? " (%)" : "");  Dimension labelSize=Basic.getStringSize(gc,axisLabel,gc.getFont()).getSize();  int x=10;  int y=(y0 + y1) / 2 - labelSize.width;  if (doDraw) {    gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    drawString(gc,axisLabel,x,y,Math.PI / 2);  } else {    Rectangle rect=new Rectangle(x,y,labelSize.height,labelSize.width);    if (bbox == null)     bbox=rect; else     bbox.add(rect);  }  if (doDraw) {    gc.setColor(Color.BLACK);    gc.drawLine(x0,y0,x0,y1);    drawArrowHead(gc,new Point(x0,y0),new Point(x0,y1));  }  if (size != null)   size.setSize(bbox.width + 5,bbox.height);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  protected double adjust(double v){switch (m_scale) {case Constants.LOG_SCALE:    return Math.pow(10,v);case Constants.SQRT_SCALE:  return v * v;case Constants.LINEAR_SCALE:default :return v;}}  }
class C{  public void dispose(){  myFileStructure.dispose();}  }
class C{  private void attack(){  velocity.x=(int)(sx * 150);  velocity.y=(int)(sy * 150);  if (position.y < -loaf || position.y > Settings.nGameAsteroidSceneHeight + loaf || position.x < -loaf || position.x > Settings.nGameAsteroidSceneWidth + loaf) {    status=BEGINBACK;    return;  }  len--;  if (len >= 0)   return;  col++;  if (col < sPath.get_Directions().length) {    GetDir(col);    if (dir >= 6 && dir <= 10)     shoot_Missile(dir);  } else {    status=BEGINPOS;  }}  }
class C{  public String toString(){  int delta=endLine - startLine + 1;  String line=Policy.bind("SVNAnnotateBlock.lines");  if (delta == 1) {    line=Policy.bind("SVNAnnotateBlock.line");  }  return Policy.bind("SVNAnnotateBlock.userRevision",new Object[]{user,new Long(revision),String.valueOf(delta),line});}  }
class C{  public static void putArgumentsArray(Map<String,String> properties,String key,String[] array){  StringBuilder concat=new StringBuilder();  for (int i=0; i < array.length; i++) {    String value=array[i];    if (value != null && value.length() > 0) {      if (value.contains(" ")) {        if (value.startsWith("\"") && value.endsWith("\"")) {          if (value.substring(1,value.length() - 1).contains("\"")) {            throw new IllegalArgumentException("Argument " + value + " contains both a whitespace and a \" character.");          }        } else         if (value.startsWith("'") && value.endsWith("'")) {          if (value.substring(1,value.length() - 1).contains("'")) {            throw new IllegalArgumentException("Argument " + value + " contains both a whitespace and a ' character.");          }        } else         if (!value.contains("\"")) {          value="\"" + value + "\"";        } else         if (!value.contains("'")) {          value="'" + value + "'";        } else {          throw new IllegalArgumentException("Argument " + value + " contains both a whitespace and \" and '");        }      }      concat.append(value);      if (i < array.length - 1) {        concat.append(' ');      }    }  }  properties.put(key,concat.toString());}  }
class C{  public boolean hasFill(Symbolizer symbolizer){  boolean result=false;  if (symbolizer != null) {    SLDTreeLeafInterface obj=map.get(symbolizer.getClass());    if (obj != null) {      result=obj.hasFill(symbolizer);    }  }  return result;}  }
class C{  public final void info(final Object o){  log(Level.INFO,o);}  }
class C{  private static <T>T deref(Future<T> future) throws IOException, OncRpcException {  for (; ; ) {    try {      return future.get();    } catch (    InterruptedException ex) {      LOG.log(Level.WARNING,"interrupted while waiting for future",ex);    }catch (    ExecutionException|Monitor.MonitorException ex) {      Throwable cause=ex.getCause();      if (cause instanceof Error)       throw (Error)cause;      if (cause instanceof RuntimeException)       throw (RuntimeException)cause;      if (cause instanceof IOException)       throw (IOException)cause;      if (cause instanceof OncRpcException)       throw (OncRpcException)cause;      throw new IllegalStateException("unexpected exception type",ex);    }  }}  }
class C{  public void startNull(){}  }
class C{  private MultipartFile findByFileName(String filename,Map<String,MultipartFile> files){  if (files.containsKey(filename)) {    return files.get(filename);  }  for (  MultipartFile file : files.values()) {    if (filename.equals(file.getOriginalFilename())) {      return file;    }  }  return null;}  }
class C{  public void init$Children(){  children=new ASTNode[6];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);  setChild(new List(),5);}  }
class C{  public static boolean isDangerous(double d){  return Double.isInfinite(d) || Double.isNaN(d) || d == 0.0;}  }
class C{  public void fireEvent(final String instanceId,final String ref,final String type,final Map<String,Object> data,final Map<String,Object> domChanges){  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref) || TextUtils.isEmpty(type)|| mJSHandler == null) {    return;  }  if (!checkMainThread()) {    throw new WXRuntimeException("fireEvent must be called by main thread");  }  addJSTask(METHOD_FIRE_EVENT,instanceId,ref,type,data,domChanges);  sendMessage(instanceId,WXJSBridgeMsgType.CALL_JS_BATCH);}  }
class C{  public void repositoryAdded(ISVNRepositoryLocation repository){  for (  ISVNListener listener : repositoryListeners) {    listener.repositoryAdded(repository);  }}  }
class C{  public EdgeRenderer(int edgeType,int arrowType){  this();  setEdgeType(edgeType);  setArrowType(arrowType);}  }
class C{  public static boolean isLegal(boolean expression){  return isLegal(expression,"");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean isCheckedException(){  if (isCheckedException_computed) {    return isCheckedException_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  isCheckedException_value=isCheckedException_compute();  if (isFinal && num == state().boundariesCrossed)   isCheckedException_computed=true;  return isCheckedException_value;}  }
class C{  private void updateDrawingMatrix(){  if (mTempSrc.isEmpty() || mTempDst.isEmpty())   return;  if (mScaleFactor > 0) {    int srcWidth=(int)mTempSrc.width();    int srcHeight=(int)mTempSrc.height();    int dstWidth=(int)mTempDst.width();    int dstHeight=(int)mTempDst.height();    float scale;    if (srcWidth * dstHeight > dstWidth * srcHeight) {      scale=(float)dstHeight / (float)srcHeight;    } else {      scale=(float)dstWidth / (float)srcWidth;    }    mTextScale=1f + (scale - 1f) * mScaleFactor;  } else {    mTextScale=1f;  }}  }
class C{  private void calculateColors(int pointCount,FloatBuffer pointCloudBuffer){  float[] points=new float[pointCount * 3];  pointCloudBuffer.rewind();  pointCloudBuffer.get(points);  pointCloudBuffer.rewind();  int color;  int colorIndex;  float z;  for (int i=0; i < pointCount; i++) {    z=points[i * 3 + 2];    colorIndex=(int)Math.min(z / CLOUD_MAX_Z * mPalette.length,mPalette.length - 1);    colorIndex=Math.max(colorIndex,0);    color=mPalette[colorIndex];    mColorArray[i * 4]=Color.red(color) / 255f;    mColorArray[i * 4 + 1]=Color.green(color) / 255f;    mColorArray[i * 4 + 2]=Color.blue(color) / 255f;    mColorArray[i * 4 + 3]=Color.alpha(color) / 255f;  }}  }
class C{  @deprecated public void compact(){  compact(true);}  }
class C{  @Inject public StateResource(StateStore stateStore,PropertyDeserializer propertyDeserializer){  this.stateStore=stateStore;  this.propertyDeserializer=propertyDeserializer;}  }
class C{  public synchronized void commit(){synchronized (mutex) {    Map<Column,Set<Interval>> temp=workingIntervals;    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));    super.columns=new LinkedHashSet<>(temp.keySet());  }}  }
class C{  public PearsonsCorrelation(){  super();  correlationMatrix=null;  nObs=0;}  }
class C{  public void actionPerformed(ActionEvent ev){  PCoATab tab=getViewer().getPcoaTab();  PCoA PCoA=tab.getPCoA();  int numberOfPCs=PCoA.getNumberOfPositiveEigenValues();  String value=(tab.getFirstPC() + 1) + " x " + (tab.getSecondPC() + 1)+ " x "+ (tab.getThirdPC() + 1);  value=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter PCs (range 1-" + numberOfPCs + "):",value);  if (value != null) {    try {      String[] tokens=value.split("x");      int pc1=Integer.parseInt(tokens[0].trim());      int pc2=Integer.parseInt(tokens[1].trim());      int pc3=Integer.parseInt(tokens[2].trim());      execute("set pc1=" + pc1 + " pc2="+ pc2+ " pc3="+ pc3+ ";");    } catch (    Exception ex) {      NotificationsInSwing.showError(getViewer().getFrame(),"Expected 'pc1 x pc2 xpc3', got: " + value);    }  }}  }
class C{  public void checkUpdate(Activity activity,UpdateBuilder builder){  UpdateConfig.getConfig().context(activity);  DefaultCheckCB checkCB=new DefaultCheckCB(activity);  checkCB.setBuilder(builder);  UpdateWorker checkWorker=builder.getCheckWorker();  if (checkWorker.isRunning()) {    Log.e("Updater","Already have a update task running");    checkCB.onCheckError(-1,"Already have a update task running");    return;  }  checkWorker.setEntity(builder.getCheckEntity());  checkWorker.setParser(builder.getJsonParser());  checkWorker.setChecker(builder.getUpdateChecker());  checkWorker.setCheckCB(checkCB);  executor.check(builder.getCheckWorker());}  }
class C{  @RequestMapping(value="/rest/activiti/process-definitions",method=RequestMethod.GET,produces="application/json") public JsonNode listProcessDefinitions(HttpServletRequest request){  log.debug("REST request to get a list of process definitions");  JsonNode resultNode=null;  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  try {    resultNode=clientService.listProcesDefinitions(serverConfig,parameterMap,true);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }  return resultNode;}  }
class C{  @SafeVarargs public static <T>Set<T> Set(T... a){  if ((a == null) || (a.length == 0)) {    return Collections.emptySet();  }  Set<T> set=new HashSet<>(a.length);  Collections.addAll(set,a);  return Collections.unmodifiableSet(set);}  }
class C{  @Override public void close() throws IOException {  out.close();}  }
class C{  public void removeSymbolizer(Symbolizer symbolizerToDelete){  List<Symbolizer> symbolizerList=(List<Symbolizer>)this.symbolData.getRule().symbolizers();  int indexFound=-1;  int index=0;  for (  Symbolizer symbolizer : symbolizerList) {    if (symbolizer == symbolizerToDelete) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    symbolizerList.remove(indexFound);  }}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  @Override public int size(){  return values.size();}  }
class C{  public void createUnpartitionedStream(final String streamName) throws IOException {  namespace.createLog(streamName);}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public BoxDropImporter(String localizedFolderId){  this.localizedFolderId=localizedFolderId;}  }
class C{  @NonNull public static <E>Optional<E> empty(){  return new None<>();}  }
class C{  @Override public void onPatchDexOptFail(File patchFile,File dexFile,String optDirectory,String dexName,Throwable t,boolean isUpgradePatch){  TinkerLog.i(TAG,"patchReporter: dex opt fail path:%s, dexPath:%s, optDir:%s, dexName:%s, isUpgrade:%b",patchFile.getAbsolutePath(),dexFile.getPath(),optDirectory,dexName,isUpgradePatch);  TinkerLog.printErrStackTrace(TAG,t,"onPatchDexOptFail:");  Tinker.with(context).cleanPatchByVersion(patchFile);}  }
class C{  public static String[] readLines(String fileName){  List<String> lines=new ArrayList<String>();  if (reader == null)   createReader(fileName);  String line=null;  try {    while ((line=reader.readLine()) != null) {      if (line.trim().length() > 0) {        lines.add(line.trim());      }    }  } catch (  IOException e) {    e.printStackTrace();  }  closeReader();  return lines.toArray(new String[lines.size()]);}  }
class C{  protected void stopResetExpiredJobsThread(){  if (resetExpiredJobThread != null) {    try {      resetExpiredJobThread.join();    } catch (    InterruptedException e) {      log.warn("Interrupted while waiting for the reset expired jobs thread to terminate",e);    }    resetExpiredJobThread=null;  }}  }
class C{  public static boolean hasFCMToken(Context context){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());  return pref.getBoolean(SENT_TOKEN_TO_SERVER,false);}  }
class C{  public SpaceTypeDescriptorBuilder addFifoGroupingIndex(String fifoGroupingIndexPath){  if (fifoGroupingIndexPath == null)   throw new IllegalArgumentException("Argument cannot be null - 'fifoGroupingIndexPath'.");  validateNoCollectionPath(fifoGroupingIndexPath);  this._fifoGroupingIndexes.add(fifoGroupingIndexPath);  return this;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200893,skilltarget,skillcaster,skillname);}  }
class C{  public Builder attribution(String attribution){  this.attribution=attribution;  return this;}  }
class C{  protected List<ZWaveEvent> processCommandClassMessage(byte[] packetData){  return processCommandClassMessage(packetData,1);}  }
class C{  public void testCocomo26Lines(){  Cocomo2 sl=new Cocomo2();  double estimatedCost=sl.estimateCost(sl.estimateEffort(26),56000);  assertTrue(estimatedCost >= 560);  assertTrue(estimatedCost <= 600);  estimatedCost=sl.estimateCost(sl.estimateEffort(77873),56000);  assertTrue(estimatedCost >= 2600000);  assertTrue(estimatedCost <= 2650000);}  }
class C{  public void Draw(DrawingDecorator drawingNode,World world) throws Exception {  beginDrawing(world);  for (  JAXBElement<?> jaxbobj : drawingNode.getDrawObjectType()) {    Object obj=jaxbobj.getValue();    if (obj instanceof DrawBlock)     DrawPrimitive((DrawBlock)obj,world); else     if (obj instanceof DrawItem)     DrawPrimitive((DrawItem)obj,world); else     if (obj instanceof DrawCuboid)     DrawPrimitive((DrawCuboid)obj,world); else     if (obj instanceof DrawSphere)     DrawPrimitive((DrawSphere)obj,world); else     if (obj instanceof DrawLine)     DrawPrimitive((DrawLine)obj,world); else     if (obj instanceof DrawEntity)     DrawPrimitive((DrawEntity)obj,world); else     throw new Exception("Unsupported drawing primitive: " + obj.getClass().getName());  }  endDrawing(world);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  protected void updateOKStatus(){  if (fViewer != null) {    if (!scopeCheckingElement) {      if (!selectedResourcesScope.getSelection()) {        selectedResourcesScope.setSelection(true);        participantScope.setSelection(false);        workingSetScope.setSelection(false);        updateSelectedResourcesScope();      }    }    setPageComplete(areAnyElementsChecked() != null);  } else {    setPageComplete(false);  }}  }
class C{  private String computeOverrideMethodName(String name,String desc){  if (desc.startsWith(instanceToStaticDescPrefix) && !name.equals("init$body")) {    return METHOD_MANGLE_PREFIX + name;  }  return name;}  }
class C{  public double maxValue(){  Iterator iIter=asTreeMap().values().iterator();  Double dMax=Double.NEGATIVE_INFINITY;  while (iIter.hasNext()) {    Double dVal=(Double)iIter.next();    dMax=(dVal > dMax) ? dVal : dMax;  }  return dMax;}  }
class C{  public static boolean checkTypeDerivationOk(XSTypeDefinition derived,XSTypeDefinition base,short block){  if (derived == SchemaGrammar.fAnyType)   return derived == base;  if (derived == SchemaGrammar.fAnySimpleType) {    return (base == SchemaGrammar.fAnyType || base == SchemaGrammar.fAnySimpleType);  }  if (derived.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {    if (base.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {      if (base == SchemaGrammar.fAnyType)       base=SchemaGrammar.fAnySimpleType; else       return false;    }    return checkSimpleDerivation((XSSimpleType)derived,(XSSimpleType)base,block);  } else {    return checkComplexDerivation((XSComplexTypeDecl)derived,base,block);  }}  }
class C{  public BreakpointStmt newBreakpointStmt(){  return Jimple.v().newBreakpointStmt();}  }
class C{  public static ID newInstance(){  return new ID(randomUUID());}  }
class C{  private String extractValue(Document doc,String tagName) throws PIRException {  NodeList itemList=doc.getElementsByTagName(tagName);  if (itemList.getLength() != 1) {    throw new PIRException("itemList.getLength() = " + itemList.getLength() + " -- should be 1");  }  return itemList.item(0).getTextContent().trim();}  }
class C{  @Override public void onActionClick(View view,String actionType,Object model){  if (view == null)   return;  final Context context=view.getContext();  fireAction(context,view,actionType,model);}  }
class C{  public synchronized boolean removeFrom(int from){  if (from == 0) {    throw new RuntimeException("call to removeFrom with bad argument");  }  this.from&=~from;  return (this.from == 0);}  }
class C{  public static short readSwappedShort(byte[] data,int offset){  return (short)(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public void begin_Attack(int aKind){  if (isDead || (sKind == 5 && sNum == 0))   return;  a_Kind=aKind;  GetPath(a_Kind + 10);  status=ATTACK;}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  public boolean isXPath(){  return false;}  }
class C{  public synchronized void onSpaceConnect(SpaceConnectionEvent event){  try {    _activeSpaces.add(event.getId());    if (_currentSpaceState == StartupState.WAITING) {      notify();    } else {      changeState(StartupState.NOT_LAST);    }  } catch (  Exception e) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING," Error on space connect [" + _spaceName + "] state.",e);    }  }}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11};}  }
class C{  public double readDouble(){  return scanner.nextDouble();}  }
class C{  public boolean equivTo(Object other){  return (other instanceof ValueUnitPair) && ((ValueUnitPair)other).getValue().equivTo(this.getValue()) && ((ValueUnitPair)other).getUnit().equals(getUnit());}  }
class C{  public void recordSplashscreenIconType(int type){  assert !mCommitted;  assert type >= 0 && type < SPLASHSCREEN_ICON_TYPE_MAX;  mSplashScreenIconType=type;}  }
class C{  public int size(){  return fContextStack.size();}  }
class C{  private SLDDataInterface importLayer(JsonObject layer,SLDOutputFormatEnum outputFormat){  StyledLayerDescriptor sld=null;  String layerName=layer.get("name").getAsString();  double minScale=layer.get("minScale").getAsDouble();  double maxScale=layer.get("maxScale").getAsDouble();  int transparency=layer.get("transparency").getAsInt();  JsonElement renderElement=layer.get("renderer");  sld=getRenderer(layerName,minScale,maxScale,transparency,renderElement);  JsonElement labelRenderArrayElement=layer.get("labelRenderers");  if (labelRenderArrayElement != null) {    processLabelRenderer(sld,labelRenderArrayElement.getAsJsonArray(),transparency);  }  JsonElement fieldArray=layer.get("fields");  List<DataSourceFieldInterface> fieldList=processFields(layerName,fieldArray);  JsonElement dataSourcePropertiesElement=layer.get("dataSource");  DataSourcePropertiesInterface dataSourceProperties=processDataSource(layerName,dataSourcePropertiesElement);  String sldContents=SLDWriterFactory.createWriter(outputFormat).encodeSLD(sld);  StyleWrapper styleWrapper=new StyleWrapper(layerName,layerName);  SLDDataInterface sldData=new SLDData(styleWrapper,sldContents);  sldData.setDataSourceProperties(dataSourceProperties);  sldData.setFieldList(fieldList);  sldData.setReadOnly(true);  return sldData;}  }
class C{  public void dumpToLog(){  if (mDisabled)   return;  Log.d(mTag,mLabel + ": begin");  final long first=mSplits.get(0);  long now=first;  for (int i=1; i < mSplits.size(); i++) {    now=mSplits.get(i);    final String splitLabel=mSplitLabels.get(i);    final long prev=mSplits.get(i - 1);    Log.d(mTag,mLabel + ":      " + (now - prev)+ " ms, "+ splitLabel);  }  Log.d(mTag,mLabel + ": end, " + (now - first)+ " ms");}  }
class C{  public void finishTransition(){  if (mViewToHide != null) {    removeView(mViewToHide);  }  getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;  requestLayout();  mViewToHide=null;  mViewToShow=null;  mInfoBar.setControlsEnabled(true);}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  System.arraycopy(bytes,offset,outputData,curIndex,size);  curIndex+=size;  return true;}  }
class C{  @RequestMapping(value={"/metrics"},method=RequestMethod.GET) public String returnMetricsView(){  return "metrics";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_FAVOR(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1300585,value0,num1);}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public static double levelIdxToLevel(int levelIdx){  return levelIdx * 0.5 + 1;}  }
class C{  protected void updateWidgetEnablements(){  if (useUrlLabelButton.getSelection()) {    customLabelText.setEnabled(false);  } else {    customLabelText.setEnabled(true);  }  validateFields();}  }
class C{  public static <K>Expression<K> toDNF(Expression<K> root){  return toSop(root);}  }
class C{  @SuppressLint("NewApi") private Bitmap extractImage(){  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try {    outputStream.write(mGifHeader.bytes);    if (mGcExt != null) {      if ((mWidth != mImageBlock.getImageWidth() || mHeight != mImageBlock.getImageHeight()) && mGcExt.getTransparentColorFlag() == 0) {        mGcExt.setTransparentColorFlagTrue();      }      outputStream.write(mGcExt.bytes);    }    outputStream.write(mImageBlock.bytes);    outputStream.write((byte)0x3B);    outputStream.flush();    BitmapFactory.Options options=new BitmapFactory.Options();    options.inMutable=true;    options.inPreferredConfig=Bitmap.Config.RGB_565;    int inSampleSize=1;    while (mWidth / inSampleSize > targetWidth) {      inSampleSize++;    }    while (mHeight / inSampleSize > targetHeight) {      inSampleSize++;    }    if (inSampleSize <= 0) {      inSampleSize=1;    }    options.inSampleSize=inSampleSize;    Bitmap newBitmap=BitmapFactory.decodeStream(new BufferedInputStream(new ByteArrayInputStream(outputStream.toByteArray())),null,options);    if (newBitmap != null) {      if (mLastImage == null) {        return newBitmap;      } else {        Bitmap bitmap=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.RGB_565);        Canvas canvas=new Canvas(bitmap);        canvas.drawBitmap(mLastImage,0,0,null);        canvas.drawBitmap(newBitmap,0,0,null);        return bitmap;      }    } else {      if (mLastImage != null) {        return mLastImage;      }    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      outputStream.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public void readFrom(InputStream is) throws ParserConfigurationException, SAXException, IOException, TransformerException {  readFrom(is,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_HCOIN_01(String value0){  return new SM_SYSTEM_MESSAGE(1400761,value0);}  }
class C{  public NotificationsGetQuery startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  public void visitPhpSelfAssignmentExpression(SelfAssignmentExpression expression){  IElementType operation=expression.getOperationType();  PhpPsiElement value=expression.getValue();  if (null != value && null != expression.getVariable()) {    if (operation == PhpTokenTypes.opPLUS_ASGN) {      if (value.getText().equals("1") && !isArrayAccessOrString(expression.getVariable())) {        String strMessage=strProblemDescriptionIncrement.replace("%s%",expression.getVariable().getText());        holder.registerProblem(expression,strMessage,ProblemHighlightType.WEAK_WARNING);      }      return;    }    if (operation == PhpTokenTypes.opMINUS_ASGN) {      if (value.getText().equals("1") && !isArrayAccessOrString(expression.getVariable())) {        String strMessage=strProblemDescriptionDecrement.replace("%s%",expression.getVariable().getText());        holder.registerProblem(expression,strMessage,ProblemHighlightType.WEAK_WARNING);      }    }  }}  }
class C{  @SuppressWarnings("ConstantConditions") public static void drawSmallRectangleShadow(Graphics gc,int x,int y,int width,int height){  assert Shadow2BottomLeft != null;  assert Shadow2TopRight != null;  assert Shadow2BottomRight.getWidth(null) == SMALL_SHADOW_SIZE;  assert Shadow2BottomRight.getHeight(null) == SMALL_SHADOW_SIZE;  int blWidth=Shadow2BottomLeft.getWidth(null);  int trHeight=Shadow2TopRight.getHeight(null);  if (width < blWidth) {    return;  }  if (height < trHeight) {    return;  }  UIUtil.drawImage(gc,Shadow2BottomLeft,x,y + height,null);  UIUtil.drawImage(gc,Shadow2BottomRight,x + width,y + height,null);  UIUtil.drawImage(gc,Shadow2TopRight,x + width,y,null);  ImageUtils.drawDipImage(gc,Shadow2Bottom,x + Shadow2BottomLeft.getWidth(null),y + height,x + width,y + height + Shadow2Bottom.getHeight(null),0,0,Shadow2Bottom.getWidth(null),Shadow2Bottom.getHeight(null),null);  ImageUtils.drawDipImage(gc,Shadow2Right,x + width,y + Shadow2TopRight.getHeight(null),x + width + Shadow2Right.getWidth(null),y + height,0,0,Shadow2Right.getWidth(null),Shadow2Right.getHeight(null),null);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ClientMinPrincipalType && Constraint.equal(classes,((ClientMinPrincipalType)obj).classes));}  }
class C{  public static String fillZero(int length){  StringBuilder stringBuilder=new StringBuilder();  for (int i=0; i < length; i++) {    stringBuilder.append(ZERO);  }  return stringBuilder.toString();}  }
class C{  public SimpleStringProperty descriptionProperty(){  return this.descriptionProperty;}  }
class C{  public AllDimensionsLoadedHealthCheck(@NotNull DimensionDictionary dimensionDictionary){  this.dimensionDictionary=Objects.requireNonNull(dimensionDictionary,"A DimensionDictionary is required.");}  }
class C{  public static boolean isResourceReference(@NotNull PsiElement element){  return getResourceReferenceType(element) != ResourceReferenceType.NONE;}  }
class C{  public static void adaptTable(ConstraintTableLayout table){  int width=table.getWidth();  int height=table.getHeight();  ConstraintWidget.DimensionBehaviour horizontalBehaviour=table.getHorizontalDimensionBehaviour();  ConstraintWidget.DimensionBehaviour verticalBehaviour=table.getVerticalDimensionBehaviour();  table.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);  table.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);  table.layout();  table.layout();  table.setMinWidth(table.getWidth());  table.setMinHeight(table.getHeight());  table.computeGuidelinesPercentPositions();  table.setHorizontalDimensionBehaviour(horizontalBehaviour);  table.setVerticalDimensionBehaviour(verticalBehaviour);  table.setWidth(width < table.getMinWidth() ? table.getMinWidth() : width);  table.setHeight(height < table.getMinHeight() ? table.getMinHeight() : height);  table.layout();}  }
class C{  public boolean hasStatusText(){  return mStatusText != null;}  }
class C{  public static void banChar(int playerId,int dayCount,String reason){  DAOManager.getDAO(PlayerPunishmentsDAO.class).punishPlayer(playerId,PunishmentType.CHARBAN,calculateDuration(dayCount),reason);  Player player=World.getInstance().findPlayer(playerId);  if (player != null) {    player.getClientConnection().close(new SM_QUIT_RESPONSE(),false);  }}  }
class C{  public Well1024a(long seed){  super(K,seed);}  }
class C{  private void handleStaticFieldInits(soot.SootMethod sootMethod){  ArrayList<FieldDecl> staticFieldInits=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getStaticFieldInits();  if (staticFieldInits != null) {    Iterator<FieldDecl> staticFieldInitsIt=staticFieldInits.iterator();    while (staticFieldInitsIt.hasNext()) {      polyglot.ast.FieldDecl field=staticFieldInitsIt.next();      String fieldName=field.name();      polyglot.ast.Expr initExpr=field.init();      soot.SootClass currentClass=body.getMethod().getDeclaringClass();      soot.SootFieldRef sootField=soot.Scene.v().makeFieldRef(currentClass,fieldName,Util.getSootType(field.type().type()),field.flags().isStatic());      soot.jimple.FieldRef fieldRef=soot.jimple.Jimple.v().newStaticFieldRef(sootField);      soot.Value sootExpr;      if (initExpr instanceof polyglot.ast.ArrayInit) {        sootExpr=getArrayInitLocal((polyglot.ast.ArrayInit)initExpr,field.type().type());      } else {        sootExpr=base().createAggressiveExpr(initExpr,false,false);        if (sootExpr instanceof soot.jimple.ConditionExpr) {          sootExpr=handleCondBinExpr((soot.jimple.ConditionExpr)sootExpr);        }      }      soot.jimple.Stmt assign=soot.jimple.Jimple.v().newAssignStmt(fieldRef,sootExpr);      body.getUnits().add(assign);      Util.addLnPosTags(assign,initExpr.position());    }  }}  }
class C{  private void skipAhead(@NotNull DateTime skipAheadTo){  while (activeInterval != null && activeInterval.isBefore(skipAheadTo)) {    activeInterval=supply.hasNext() ? supply.next() : null;  }}  }
class C{  @Override public void delete() throws ConceptException {  ConceptImpl properType=getMindmapsGraph().getElementFactory().buildUnknownConcept(vertex);  properType.innerDelete();}  }
class C{  private static String roundToNumberOfDigits(double number,int maxDigits){  int multiplier=1, digits;  for (digits=maxDigits; digits > 0 && number > multiplier; digits--) {    multiplier*=10;  }  NumberFormat numberInstance=NumberFormat.getNumberInstance();  numberInstance.setGroupingUsed(false);  numberInstance.setRoundingMode(RoundingMode.HALF_UP);  numberInstance.setMaximumFractionDigits(digits);  return numberInstance.format(number);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  public VisualGraph(VisualTable nodes,VisualTable edges,Boolean directed,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  private double[][] orthogonalizeMatrix(double[][] m,double threshold) throws MathIllegalArgumentException {  double[] m0=m[0];  double[] m1=m[1];  double[] m2=m[2];  double x00=m0[0];  double x01=m0[1];  double x02=m0[2];  double x10=m1[0];  double x11=m1[1];  double x12=m1[2];  double x20=m2[0];  double x21=m2[1];  double x22=m2[2];  double fn=0;  double fn1;  double[][] o=new double[3][3];  double[] o0=o[0];  double[] o1=o[1];  double[] o2=o[2];  int i=0;  while (++i < 11) {    double mx00=m0[0] * x00 + m1[0] * x10 + m2[0] * x20;    double mx10=m0[1] * x00 + m1[1] * x10 + m2[1] * x20;    double mx20=m0[2] * x00 + m1[2] * x10 + m2[2] * x20;    double mx01=m0[0] * x01 + m1[0] * x11 + m2[0] * x21;    double mx11=m0[1] * x01 + m1[1] * x11 + m2[1] * x21;    double mx21=m0[2] * x01 + m1[2] * x11 + m2[2] * x21;    double mx02=m0[0] * x02 + m1[0] * x12 + m2[0] * x22;    double mx12=m0[1] * x02 + m1[1] * x12 + m2[1] * x22;    double mx22=m0[2] * x02 + m1[2] * x12 + m2[2] * x22;    o0[0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);    o0[1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);    o0[2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);    o1[0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);    o1[1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);    o1[2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);    o2[0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);    o2[1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);    o2[2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);    double corr00=o0[0] - m0[0];    double corr01=o0[1] - m0[1];    double corr02=o0[2] - m0[2];    double corr10=o1[0] - m1[0];    double corr11=o1[1] - m1[1];    double corr12=o1[2] - m1[2];    double corr20=o2[0] - m2[0];    double corr21=o2[1] - m2[1];    double corr22=o2[2] - m2[2];    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;    if (FastMath.abs(fn1 - fn) <= threshold) {      return o;    }    x00=o0[0];    x01=o0[1];    x02=o0[2];    x10=o1[0];    x11=o1[1];    x12=o1[2];    x20=o2[0];    x21=o2[1];    x22=o2[2];    fn=fn1;  }  throw new MathIllegalArgumentException(LocalizedGeometryFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,i - 1);}  }
class C{  private boolean updateEvolutionPaths(RealMatrix zmean,RealMatrix xold){  ps=ps.scalarMultiply(1 - cs).add(B.multiply(zmean).scalarMultiply(FastMath.sqrt(cs * (2 - cs) * mueff)));  normps=ps.getFrobeniusNorm();  final boolean hsig=normps / FastMath.sqrt(1 - FastMath.pow(1 - cs,2 * iterations)) / chiN < 1.4 + 2 / ((double)dimension + 1);  pc=pc.scalarMultiply(1 - cc);  if (hsig) {    pc=pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));  }  return hsig;}  }
class C{  public Map<String,File> dexClassIndex(){  return dexClassIndex;}  }
class C{  public static String toHex(ByteBuffer data){  StringBuilder result=new StringBuilder();  int counter=0;  int b;  while (data.hasRemaining()) {    if (counter % 16 == 0) {      result.append(String.format("%04X: ",counter));    }    b=data.get() & 0xff;    result.append(String.format("%02X ",b));    counter++;    if (counter % 16 == 0) {      result.append("  ");      toText(data,result,16);      result.append("\n");    }  }  int rest=counter % 16;  if (rest > 0) {    for (int i=0; i < 17 - rest; i++) {      result.append("   ");    }    toText(data,result,rest);  }  return result.toString();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  protected TextViewer createText(Composite parent){  return new TextViewer(parent,SWT.V_SCROLL | SWT.WRAP | SWT.MULTI| SWT.READ_ONLY);}  }
class C{  public SearchCollectionsImplementor(SearchModel model,SearchView view){  this.model=model;  this.view=view;}  }
class C{  public void extractDefaultFields(SimpleFeatureTypeBuilder b,StyledLayerDescriptor sld){  String sldContents=preprocessSLD(sld);  if ((sldContents != null) && (b != null)) {    try {      DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();      DocumentBuilder builder=factory.newDocumentBuilder();      InputSource is=new InputSource(new StringReader(sldContents));      Document doc=builder.parse(is);      Map<String,List<String>> namespacePrefixes=getNamespacePrefixes(doc);      extractSimpleAttributes(b,doc,namespacePrefixes,processedFieldList,geometryFieldList);      extractWKTAttributes(b,doc,namespacePrefixes,processedFieldList);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(ExtractAttributes.class,e);    }catch (    SAXException e) {      ConsoleManager.getInstance().exception(ExtractAttributes.class,e);    }catch (    ParserConfigurationException e) {      ConsoleManager.getInstance().exception(ExtractAttributes.class,e);    }  }}  }
class C{  public javax.ws.rs.core.Response buildErrorResponse(int statusCode,String reason,String description,DruidQuery<?> druidQuery){  return RequestHandlerUtils.makeErrorResponse(statusCode,reason,description,druidQuery,objectMappers.getMapper().writer());}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private static MetricValue number_to_metric_value_(Number elem){  if (elem == null)   return MetricValue.EMPTY;  final String num=elem.toString();  try {    return MetricValue.fromIntValue(Long.parseLong(num));  } catch (  NumberFormatException ex) {  }  try {    return MetricValue.fromDblValue(Double.parseDouble(num));  } catch (  NumberFormatException ex) {  }  return MetricValue.fromStrValue(num);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200673,num0,skillcaster,skillname);}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  private Collection<Var> migrateRow(SQLTable currentTable,ResultSet row) throws SQLException {  String tableType=currentTable.getEntityType();  Collection<String> primaryKeyValues=currentTable.getPrimaryKeyValues(row);  Var instance=var().isa(tableType).id(namer.primaryKey(tableType,primaryKeyValues));  Collection<Var> vars=migrateColumns(currentTable,row,instance);  vars.add(instance);  return vars;}  }
class C{  public synchronized void damageReport(){  m_clip.invalidate();}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public void average(String column) throws QueryPlanException {  this.averageColumnName=column;}  }
class C{  public void enableLabels(Collection<String> labels){  disabledLabels.removeAll(labels);}  }
class C{  public boolean mustAlias(SootField field1,SootField field2){  return field1 == field2;}  }
class C{  public boolean isSource(){  return this.sinkSource == SinkSource.Source || this.sinkSource == SinkSource.Both;}  }
class C{  AuditLogEntry readAuditLogEntry(Application.Name applicationName,ColumnList<String> columnList){  if (columnList == null) {    return null;  }  try {    Application.Name appName=GLOBAL_ENTRY_APPLICATION.equals(applicationName) ? null : applicationName;    Calendar time=null;    Date date;    if ((date=columnList.getDateValue("time",null)) != null) {      time=Calendar.getInstance();      time.setTime(date);    }    String username=columnList.getStringValue("user_username","");    String firstname=columnList.getStringValue("user_firstname","");    String lastname=columnList.getStringValue("user_lastname","");    String email=columnList.getStringValue("user_email","");    String userid=columnList.getStringValue("user_userid","");    UserInfo user=null;    if (!StringUtils.isBlank(username) || !StringUtils.isBlank(userid)) {      user=(username != null ? UserInfo.from(UserInfo.Username.valueOf(username)) : UserInfo.from(UserInfo.Username.valueOf(userid))).withFirstName(StringUtils.isBlank(firstname) ? null : firstname).withLastName(StringUtils.isBlank(lastname) ? null : lastname).withUserId(StringUtils.isBlank(userid) ? null : userid).withEmail(StringUtils.isBlank(email) ? null : email).build();    }    String actionStr=columnList.getStringValue("action",AuditLogAction.UNSPECIFIED_ACTION.name());    AuditLogAction action;    try {      action=AuditLogAction.valueOf(actionStr);    } catch (    IllegalArgumentException e) {      LOGGER.debug(String.format("Unknown action %s setting it to default.",actionStr),e);      action=AuditLogAction.UNSPECIFIED_ACTION;    }    Experiment.Label experimentLabel=columnList.getValue("experiment_label",ExperimentLabelSerializer.get(),null);    Experiment.ID experimentId=columnList.getValue("experiment_id",ExperimentIDSerializer.get(),null);    Bucket.Label bucketLabel=columnList.getValue("bucket_label",BucketLabelSerializer.get(),null);    String changedProperty=columnList.getStringValue("changed_property","");    changedProperty=StringUtils.isBlank(changedProperty) ? null : changedProperty;    String propertyBefore=columnList.getStringValue("property_before","");    propertyBefore=StringUtils.isBlank(propertyBefore) ? null : propertyBefore;    String propertyAfter=columnList.getStringValue("property_after","");    propertyAfter=StringUtils.isBlank(propertyAfter) ? null : propertyAfter;    return new AuditLogEntry(time,user,action,appName,experimentLabel,experimentId,bucketLabel,changedProperty,propertyBefore,propertyAfter);  } catch (  IllegalArgumentException e) {    LOGGER.warn("Can not read AuditLogEntry, data in auditlog column family might be corrupted for key '" + applicationName + "': ",e);  }  return null;}  }
class C{  public static void updateOnLogin(Account account){  AccountTime accountTime=account.getAccountTime();  if (accountTime == null) {    accountTime=new AccountTime();  }  int lastLoginDay=getDays(accountTime.getLastLoginTime().getTime());  int currentDay=getDays(System.currentTimeMillis());  if (lastLoginDay < currentDay) {    DAOManager.getDAO(AccountPlayTimeDAO.class).update(account.getId(),accountTime);    accountTime.setAccumulatedOnlineTime(0);    accountTime.setAccumulatedRestTime(0);  } else {    long restTime=System.currentTimeMillis() - accountTime.getLastLoginTime().getTime() - accountTime.getSessionDuration();    accountTime.setAccumulatedRestTime(accountTime.getAccumulatedRestTime() + restTime);  }  accountTime.setLastLoginTime(new Timestamp(System.currentTimeMillis()));  DAOManager.getDAO(AccountTimeDAO.class).updateAccountTime(account.getId(),accountTime);  account.setAccountTime(accountTime);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_BLOCK(String value0){  return new SM_SYSTEM_MESSAGE(1210000,value0);}  }
class C{  public void click(long time,float x,float y,boolean fromMouse,int buttons){  resetResizeTimeout(false);  if (mNewTabButton.click(x,y) && mModel != null) {    mTabCreator.launchNTP();    return;  }  final StripLayoutTab clickedTab=getTabAtPosition(x);  if (clickedTab == null || clickedTab.isDying())   return;  if (clickedTab.checkCloseHitTest(x,y) || (fromMouse && (buttons & MotionEvent.BUTTON_TERTIARY) != 0)) {    startAnimation(buildTabClosedAnimation(clickedTab),true);    clickedTab.setIsDying(true);    Tab nextTab=mModel.getNextTabIfClosed(clickedTab.getId());    if (nextTab != null)     tabSelected(time,nextTab.getId(),clickedTab.getId());    boolean lastTab=mStripTabs.length == 0 || mStripTabs[mStripTabs.length - 1].getId() == clickedTab.getId();    resizeTabStrip(!lastTab);  } else {    int newIndex=TabModelUtils.getTabIndexById(mModel,clickedTab.getId());    TabModelUtils.setIndex(mModel,newIndex);  }}  }
class C{  public void checktheCatchMeGameWin(){  boolean _isCheck=true;  for (int i=0; i < roomClients.size(); i++)   if (roomClients.get(i).getnCatchmePlayCount() != 0)   _isCheck=false;  if (_isCheck == true) {    int _x=pointCatchmeFirstStart.getX();    int _y=pointCatchmeFirstStart.getY();    int _tempX;    int _tempY;    while (true) {      boolean _isNext=false;      _tempX=_x;      _tempY=_y;      if (getCatchmeBoardStatues()[_x][_y].getItemset() == Settings.nCatchMeItemRight) {        for (int x=_x; x < Settings.nCatchMeBlockWidth; x++)         if (getCatchmeBoardStatues()[x][_y].getTagNumber() != Settings.ERRORCODE && x != _x) {          getCatchmeBoardStatues()[_x][_y].setTagNumber(Settings.ERRORCODE);          _x=x;          _isNext=true;          break;        }      } else       if (getCatchmeBoardStatues()[_x][_y].getItemset() == Settings.nCatchMeItemLeft) {        for (int x=_x; x >= 0; x--)         if (getCatchmeBoardStatues()[x][_y].getTagNumber() != Settings.ERRORCODE && x != _x) {          getCatchmeBoardStatues()[_x][_y].setTagNumber(Settings.ERRORCODE);          _x=x;          _isNext=true;          break;        }      } else       if (getCatchmeBoardStatues()[_x][_y].getItemset() == Settings.nCatchMeItemDown) {        for (int y=_y; y < Settings.nCatchMeBlockHeight; y++)         if (getCatchmeBoardStatues()[_x][y].getTagNumber() != Settings.ERRORCODE && y != _y) {          getCatchmeBoardStatues()[_x][_y].setTagNumber(Settings.ERRORCODE);          _y=y;          _isNext=true;          break;        }      } else       if (getCatchmeBoardStatues()[_x][_y].getItemset() == Settings.nCatchMeItemUp) {        for (int y=_y; y >= 0; y--)         if (getCatchmeBoardStatues()[_x][y].getTagNumber() != Settings.ERRORCODE && y != _y) {          getCatchmeBoardStatues()[_x][_y].setTagNumber(Settings.ERRORCODE);          _y=y;          _isNext=true;          break;        }      }      if (false == _isNext) {        sendMessageInTheRoomPeople(Settings._ANSWER_CATCHME_DRAW_PATH + "",_x + "",_y + "");        setTheClientScoreAboutCatchmeReverse(getCatchmeBoardStatues()[_x][_y].getTagNumber());        break;      } else {        if (_tempY != _y && _tempX != _x)         getCatchmeBoardStatues()[_tempX][_tempY].setTagNumber(Settings.ERRORCODE);        sendMessageInTheRoomPeople(Settings._ANSWER_CATCHME_DRAW_PATH + "",_tempX + "",_tempY + "");        delayMethod(500);      }    }  }}  }
class C{  public static void load(){  try {    Properties myProps=null;    try {      log.info("Loading: myls.properties");      myProps=PropertiesUtils.load("./config/myls.properties");    } catch (    Exception e) {      log.info("No override properties found");    }    String network="./config/network";    Properties[] props=PropertiesUtils.loadAllFromDirectory(network);    PropertiesUtils.overrideProperties(props,myProps);    log.info("Loading: " + network + "/network.properties");    ConfigurableProcessor.process(Config.class,props);    log.info("Loading: " + network + "/svstats.properties");    ConfigurableProcessor.process(SvStatsConfig.class,props);    log.info("Loading: " + network + "/commons.properties");    ConfigurableProcessor.process(CommonsConfig.class,props);    log.info("Loading: " + network + "/database.properties");    ConfigurableProcessor.process(DatabaseConfig.class,props);  } catch (  Exception e) {    log.error("Can't load loginserver configuration",e);    throw new Error("Can't load loginserver configuration",e);  }}  }
class C{  public Object findFeature(Item item){  if (INTERPRET_PATHS) {    return item.findFeature(path);  }  Item pitem=findItem(item);  Object results=null;  if (pitem != null) {    Utilities.debug("findFeature: Item [" + pitem + "], feature '"+ feature+ "'");    FeatureProcessor fp=pitem.getOwnerRelation().getUtterance().getVoice().getFeatureProcessor(feature);    if (fp != null) {      Utilities.debug("findFeature: There is a feature processor for '" + feature + "'");      try {        results=fp.process(pitem);      } catch (      ProcessException pe) {        pitem.getOwnerRelation().getUtterance().getVoice().error("trouble while processing " + fp);      }    } else {      results=pitem.getFeatures().getObject(feature);    }  }  results=(results == null) ? "0" : results;  Utilities.debug("findFeature: ...results = '" + results + "'");  return results;}  }
class C{  public FileInputStream openRead() throws FileNotFoundException {  if (mBackupName.exists()) {    mBaseName.delete();    mBackupName.renameTo(mBaseName);  }  return new FileInputStream(mBaseName);}  }
class C{  int elapsedMillis(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartMillis);}  }
class C{  public static List<Integer> createColors(int[] colors){  List<Integer> result=new ArrayList<>();  for (  int i : colors) {    result.add(i);  }  return result;}  }
class C{  public boolean method_context_counts(){  return soot.PhaseOptions.getBoolean(options,"method-context-counts");}  }
class C{  private void ensureMatcherCapacity(){  if (fMatchersCount == fMatchers.length) {    XPathMatcher[] array=new XPathMatcher[fMatchers.length * 2];    System.arraycopy(fMatchers,0,array,0,fMatchers.length);    fMatchers=array;  }}  }
class C{  private boolean readyToShow(){  return (getFile() != null && mAccount != null && mLayout == R.layout.file_details_fragment);}  }
class C{  public static String changeCase(String string){  if (string != null) {    LitePalAttr litePalAttr=LitePalAttr.getInstance();    String cases=litePalAttr.getCases();    if (Const.LitePal.CASES_KEEP.equals(cases)) {      return string;    } else     if (Const.LitePal.CASES_UPPER.equals(cases)) {      return string.toUpperCase(Locale.US);    }    return string.toLowerCase(Locale.US);  }  return null;}  }
class C{  private String makeSAM(String queryName,String refName,int referenceLength,float bitScore,float expect,int rawScore,float percentIdentity,int frame,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference){  if (alignedQuery.contains("."))   alignedQuery=alignedQuery.replaceAll("\\.","X");  final StringBuilder buffer=new StringBuilder();  buffer.append(queryName).append("\t");  buffer.append(0);  buffer.append("\t");  buffer.append(refName).append("\t");  buffer.append(referenceStart).append("\t");  buffer.append("255\t");  Utilities.appendCigar(alignedQuery,alignedReference,buffer);  buffer.append("\t");  buffer.append("*\t");  buffer.append("0\t");  buffer.append("0\t");  buffer.append(alignedQuery.replaceAll("-","")).append("\t");  buffer.append("*\t");  buffer.append(String.format("AS:i:%d\t",(int)Math.round(bitScore)));  buffer.append(String.format("NM:i:%d\t",Utilities.computeEditDistance(alignedQuery,alignedReference)));  buffer.append(String.format("ZL:i:%d\t",referenceLength));  buffer.append(String.format("ZR:i:%d\t",rawScore));  buffer.append(String.format("ZE:f:%g\t",expect));  buffer.append(String.format("ZI:i:%d\t",(int)Math.round(percentIdentity)));  buffer.append(String.format("ZF:i:%d\t",frame));  buffer.append(String.format("ZS:i:%s\t",queryStart));  Utilities.appendMDString(alignedQuery,alignedReference,buffer);  return buffer.toString();}  }
class C{  public GSByteArrayOutputStream(){  this(32);}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augmentations) throws XNIException {}  }
class C{  public void oneShot(){  confettiManager.setNumInitialCount(100).setEmissionDuration(0).animate();}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes){  super.startElement(element,attributes);  fElementDepth++;  if (isMatched()) {    fMatchedDepth=fElementDepth;    fFieldActivator.startValueScopeFor(fIdentityConstraint,fInitialDepth);    int count=fIdentityConstraint.getFieldCount();    for (int i=0; i < count; i++) {      Field field=fIdentityConstraint.getFieldAt(i);      XPathMatcher matcher=fFieldActivator.activateField(field,fInitialDepth);      matcher.startElement(element,attributes);    }  }}  }
class C{  public static void clearCommKey(AirMapFlight flight,final AirMapCallback<Void> listener){  String url=String.format(flightEndCommUrl,flight.getFlightId());  AirMap.getClient().post(url,new VoidCallback(listener));}  }
class C{  @DELETE @Path("{experimentID}") @Produces(APPLICATION_JSON) @ApiOperation(value="Delete an experiment",notes="Can only delete an experiment that is in DRAFT or TERMINATED state.  The default call is " + "safe to use, but other than that please only delete experiments which you have created.") @Timed public Response deleteExperiment(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);  Experiment updatedExperiment=from(experiment).withState(DELETED).build();  experiment=experiments.updateExperiment(experimentID,updatedExperiment,authorization.getUserInfo(userName));  assert experiment != null : "Error deleting experiment";  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  protected MessagesRemoveChatUserQuery userId(String value){  return unsafeParam("user_id",value);}  }
class C{  public static void removeSpaceProperties(String fullSpaceName){  m_UrlTable.remove(fullSpaceName);  m_spaceProperties.remove(fullSpaceName);}  }
class C{  public static String genSlaveFilename(String master_filename,String prefix_name,String ext_name) throws MyException {  String true_ext_name;  int dotIndex;  if (master_filename.length() < 28 + FDFS_FILE_EXT_NAME_MAX_LEN) {    throw new MyException("master filename \"" + master_filename + "\" is invalid");  }  dotIndex=master_filename.indexOf('.',master_filename.length() - (FDFS_FILE_EXT_NAME_MAX_LEN + 1));  if (ext_name != null) {    if (ext_name.length() == 0) {      true_ext_name="";    } else     if (ext_name.charAt(0) == '.') {      true_ext_name=ext_name;    } else {      true_ext_name="." + ext_name;    }  } else {    if (dotIndex < 0) {      true_ext_name="";    } else {      true_ext_name=master_filename.substring(dotIndex);    }  }  if (true_ext_name.length() == 0 && prefix_name.equals("-m")) {    throw new MyException("prefix_name \"" + prefix_name + "\" is invalid");  }  if (dotIndex < 0) {    return master_filename + prefix_name + true_ext_name;  } else {    return master_filename.substring(0,dotIndex) + prefix_name + true_ext_name;  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public TObjectLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public WinHttpProxyInfo(){  super();}  }
class C{  public void reset(){  mIsDying=false;}  }
class C{  public int[][] readImage() throws IOException {  int[][] dat=new int[getRows()][getCols()];  for (int i=0; i < getCols(); i++) {    for (int j=0; j < getRows(); j++) {      dat[i][j]=readUnsignedByte();    }  }  return dat;}  }
class C{  public void clear(){  for (int i=0; i < segments.length; ++i)   segments[i].clear();}  }
class C{  public NotesGetByIdQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public Town(int id,Race race){  this(id,1,0,race,new Timestamp(60000));  this.persistentState=PersistentState.NEW;}  }
class C{  private boolean batchTextToSpeech(String text){  boolean ok;  voice.startBatch();  ok=textToSpeech(text);  voice.endBatch();  return ok;}  }
class C{  public void addSource(final DOMImplementationSource s){  if (s == null) {    throw new NullPointerException();  }  if (!sources.contains(s)) {    sources.addElement(s);  }}  }
class C{  public ZWaveLanguageCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (mIsEnabled) {    return mGestureDetector.onTouchEvent(event);  }  return false;}  }
class C{  public static String pad(String str,int totalChars){  if (str == null)   str="null";  int slen=str.length();  StringBuilder sb=new StringBuilder(str);  for (int i=0; i < totalChars - slen; i++) {    sb.append(" ");  }  return sb.toString();}  }
class C{  public CharSequenceReader(CharSequence charSequence){  this.charSequence=charSequence != null ? charSequence : "";}  }
class C{  @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer(WebSocket conn,Draft draft,ClientHandshake request) throws InvalidDataException {  return new HandshakeImpl1Server();}  }
class C{  public SuffixFileFilter(String[] suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  private void showSelectedStyle(StyleWrapper styleWrapper){  populating=true;  CardLayout cardLayout=(CardLayout)styleCardPanel.getLayout();  cardLayout.show(styleCardPanel,STYLE_PANEL);  setButtonState(false);  DefaultMutableTreeNode node=null;  if (styleWrapper != null) {    for (int index=0; (index < rootNode.getChildCount()) && (node == null); index++) {      DefaultMutableTreeNode workspaceNode=(DefaultMutableTreeNode)rootNode.getChildAt(index);      if (workspaceNode.toString().compareTo(styleWrapper.getWorkspace()) == 0) {        for (int styleIndex=0; styleIndex < workspaceNode.getChildCount() && (node == null); styleIndex++) {          LayerStyleNode styleNode=(LayerStyleNode)workspaceNode.getChildAt(styleIndex);          if (styleNode.getStyleWrapper().compareTo(styleWrapper) == 0) {            node=styleNode;          }        }      }    }  }  if (node != null) {    TreeNode[] nodes=treeModel.getPathToRoot(node);    TreePath path=new TreePath(nodes);    geoserverStyleTree.setSelectionPath(path);    geoserverStyleTree.scrollPathToVisible(path);  }  populating=false;}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){}  }
class C{  public boolean moveUp(int firstRow,int lastRow){  lastRow=Math.min(lastRow,getNumberRows());  if (firstRow <= 0 || firstRow > lastRow)   return false; else {    List<Integer>[] array=new List[getNumberRows()];    for (int i=0; i < getNumberRows(); i++)     array[i]=getCompressedRow2Reads(i);    List<Integer> replaced=array[firstRow - 1];    System.arraycopy(array,firstRow,array,firstRow - 1,lastRow + 1 - firstRow);    array[lastRow]=replaced;    compressedRow2Reads.clear();    compressedRow2Reads.addAll(Arrays.asList(array));    return true;  }}  }
class C{  public static String escapeCharacters(String s){  if (s == null) {    throw new NullPointerException();  }  s=s.replace(".","{SEP}");  s=s.replace("/","{FSEP}");  s=s.replace("$","{DSEP}");  return s;}  }
class C{  public static ResponseProperties storeCalendar(InputStream is,Map<String,Object> context) throws IOException, ParserException, GenericEntityException, GenericServiceException {  CalendarBuilder builder=new CalendarBuilder();  Calendar calendar=null;  try {    calendar=builder.build(is);  }  finally {    if (is != null) {      is.close();    }  }  if (Debug.verboseOn()) {    Debug.logVerbose("Processing calendar:\r\n" + calendar,module);  }  String workEffortId=fromXProperty(calendar.getProperties(),workEffortIdXPropName);  if (workEffortId == null) {    workEffortId=(String)context.get("workEffortId");  }  if (!workEffortId.equals(context.get("workEffortId"))) {    Debug.logWarning("Spoof attempt: received calendar workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);    return ICalWorker.createForbiddenResponse(null);  }  Delegator delegator=(Delegator)context.get("delegator");  GenericValue publishProperties=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortId).queryOne();  if (!isCalendarPublished(publishProperties)) {    Debug.logInfo("WorkEffort calendar is not published: " + workEffortId,module);    return ICalWorker.createNotFoundResponse(null);  }  if (context.get("userLogin") == null) {    return ICalWorker.createNotAuthorizedResponse(null);  }  if (!hasPermission(workEffortId,"UPDATE",context)) {    return ICalWorker.createForbiddenResponse(null);  }  boolean hasCreatePermission=hasPermission(workEffortId,"CREATE",context);  List<GenericValue> workEfforts=getRelatedWorkEfforts(publishProperties,context);  Set<String> validWorkEfforts=FastSet.newInstance();  if (UtilValidate.isNotEmpty(workEfforts)) {    for (    GenericValue workEffort : workEfforts) {      validWorkEfforts.add(workEffort.getString("workEffortId"));    }  }  List<Component> components=UtilGenerics.checkList(calendar.getComponents(),Component.class);  ResponseProperties responseProps=null;  for (  Component component : components) {    if (Component.VEVENT.equals(component.getName()) || Component.VTODO.equals(component.getName())) {      workEffortId=fromXProperty(component.getProperties(),workEffortIdXPropName);      if (workEffortId == null) {        Property uid=component.getProperty(Uid.UID);        if (uid != null) {          GenericValue workEffort=EntityQuery.use(delegator).from("WorkEffort").where("universalId",uid.getValue()).queryFirst();          if (workEffort != null) {            workEffortId=workEffort.getString("workEffortId");          }        }      }      if (workEffortId != null) {        if (validWorkEfforts.contains(workEffortId)) {          replaceProperty(component.getProperties(),toXProperty(workEffortIdXPropName,workEffortId));          responseProps=storeWorkEffort(component,context);        } else {          Debug.logWarning("Spoof attempt: unrelated workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);          responseProps=ICalWorker.createForbiddenResponse(null);        }      } else       if (hasCreatePermission) {        responseProps=createWorkEffort(component,context);      }      if (responseProps != null) {        return responseProps;      }    }  }  Map<String,? extends Object> serviceMap=UtilMisc.toMap("workEffortId",context.get("workEffortId"),"icalData",calendar.toString());  GenericValue iCalData=publishProperties.getRelatedOne("WorkEffortIcalData",false);  Map<String,Object> serviceResult=null;  if (iCalData == null) {    serviceResult=invokeService("createWorkEffortICalData",serviceMap,context);  } else {    serviceResult=invokeService("updateWorkEffortICalData",serviceMap,context);  }  if (ServiceUtil.isError(serviceResult)) {    return ICalWorker.createPartialContentResponse(ServiceUtil.getErrorMessage(serviceResult));  }  return ICalWorker.createOkResponse(null);}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public int milliseconds(){  return this.milliseconds;}  }
class C{  public boolean isMasterController(){  return masterController;}  }
class C{  private boolean isChildService(Operation op){  String path=op.getUri().getPath();  return !path.equals(getParentPath(op));}  }
class C{  public WilcoxonSignedRankTest(final NaNStrategy nanStrategy,final TiesStrategy tiesStrategy){  naturalRanking=new NaturalRanking(nanStrategy,tiesStrategy);}  }
class C{  private ScanStatus resplitPartiallyCompleteTasks(ScanStatus status){  boolean anyUpdated=false;  int nextTaskId=-1;  for (  ScanRangeStatus complete : status.getCompleteScanRanges()) {    if (complete.getResplitRange().isPresent()) {      if (nextTaskId == -1) {        nextTaskId=getNextTaskId(status);      }      ScanRange resplitRange=complete.getResplitRange().get();      List<ScanRange> subRanges=resplit(complete.getPlacement(),resplitRange,status.getOptions().getRangeScanSplitSize());      List<ScanRangeStatus> resplitStatuses=Lists.newArrayListWithCapacity(subRanges.size());      for (      ScanRange subRange : subRanges) {        resplitStatuses.add(new ScanRangeStatus(nextTaskId++,complete.getPlacement(),subRange,complete.getBatchId(),complete.getBlockedByBatchId(),complete.getConcurrencyId()));      }      _scanStatusDAO.resplitScanRangeTask(status.getScanId(),complete.getTaskId(),resplitStatuses);      anyUpdated=true;    }  }  if (!anyUpdated) {    return status;  }  return _scanStatusDAO.getScanStatus(status.getScanId());}  }
class C{  public void mergeWith(DistributionDocument tpData,double fLearningRate){}  }
class C{  private void touchAutoNoopTimer(){  if (autoNoopTimer != null) {    nextAutoNoopTime=System.currentTimeMillis() + autoNoopTimeout;  }}  }
class C{  private Rotation composeInternal(final Rotation r){  return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),false);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  for (  Map.Entry<PlatformType,SSOHandler> entry : mMapSSOHandler.entrySet()) {    entry.getValue().onActivityResult(requestCode,resultCode,data);  }}  }
class C{  private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){  if (epsilon <= 0 || entries.size() < 3) {    return entries;  }  keep[0]=true;  keep[entries.size() - 1]=true;  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);  List<Entry> reducedEntries=new ArrayList<>();  for (int i=0; i < entries.size(); i++) {    if (keep[i]) {      Entry curEntry=entries.get(i);      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));    }  }  return reducedEntries;}  }
class C{  public static void toCartesianCoordinates(double[] r,double[] phi){  if (r.length != phi.length) {    throw new IllegalArgumentException("Arrays must be equal length");  }  for (int i=0; i < r.length; i++) {    double x=r[i] * Math.cos(phi[i]);    double y=r[i] * Math.sin(phi[i]);    r[i]=x;    phi[i]=y;  }}  }
class C{  public float[] generateTransformedValuesHorizontalBarChart(IBarDataSet data,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[data.getEntryCount() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=data.getEntryForIndex(j / 2);    int i=e.getXIndex();    float x=i + i * (setCount - 1) + dataSet + space * i + space / 2f;    float y=e.getVal();    valuePoints[j]=y * phaseY;    valuePoints[j + 1]=x;  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public boolean isSdCardAvailable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public TabUma(Tab tab,TabCreationState creationState,TabModel model){  mTab=tab;  mTabCreationState=creationState;  mTabModel=model;  mLastTabStateChangeMillis=System.currentTimeMillis();  if (mTabCreationState == TabCreationState.LIVE_IN_FOREGROUND || mTabCreationState == TabCreationState.FROZEN_ON_RESTORE) {    updateTabState(TAB_STATE_ACTIVE);  } else   if (mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND || mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {    updateTabState(TAB_STATE_INACTIVE);  }}  }
class C{  public SpaceTypeDescriptorBuilder idProperty(String idPropertyName){  return idProperty(idPropertyName,false);}  }
class C{  @Override protected double featureCost(Target target,Unit unit,String featureName,FeatureDefinition weights,WeightFunc[] weightFunctions){  if (!this.featureDefinition.hasFeature(featureName)) {    throw new IllegalArgumentException("this feature does not exists in feature definition");  }  FeatureVector targetFeatures=target.getFeatureVector();  assert targetFeatures != null : "Target " + target + " does not have pre-computed feature vector";  FeatureVector unitFeatures=featureVectors[unit.index];  int nBytes=targetFeatures.byteValuedDiscreteFeatures.length;  int nShorts=targetFeatures.shortValuedDiscreteFeatures.length;  int nFloats=targetFeatures.continuousFeatures.length;  assert nBytes == unitFeatures.byteValuedDiscreteFeatures.length;  assert nShorts == unitFeatures.shortValuedDiscreteFeatures.length;  assert nFloats == unitFeatures.continuousFeatures.length;  int featureIndex=this.featureDefinition.getFeatureIndex(featureName);  float[] weightVector=weights.getFeatureWeights();  double cost=0;  if (featureIndex < nBytes) {    if (weightsNonZero[featureIndex]) {      float weight=weightVector[featureIndex];      if (featureDefinition.hasSimilarityMatrix(featureIndex)) {        byte targetFeatValueIndex=targetFeatures.byteValuedDiscreteFeatures[featureIndex];        byte unitFeatValueIndex=unitFeatures.byteValuedDiscreteFeatures[featureIndex];        float similarity=featureDefinition.getSimilarity(featureIndex,unitFeatValueIndex,targetFeatValueIndex);        cost=similarity * weight;        if (debugShowCostGraph)         cumulWeightedCosts[featureIndex]+=similarity * weight;      } else       if (targetFeatures.byteValuedDiscreteFeatures[featureIndex] != unitFeatures.byteValuedDiscreteFeatures[featureIndex]) {        cost=weight;        if (debugShowCostGraph)         cumulWeightedCosts[featureIndex]+=weight;      }    }  } else   if (featureIndex < nShorts + nBytes) {    if (weightsNonZero[featureIndex]) {      float weight=weightVector[featureIndex];      if (targetFeatures.shortValuedDiscreteFeatures[featureIndex - nBytes] != unitFeatures.shortValuedDiscreteFeatures[featureIndex - nBytes]) {        cost=weight;        if (debugShowCostGraph)         cumulWeightedCosts[featureIndex]+=weight;      }    }  } else {    int nDiscrete=nBytes + nShorts;    if (weightsNonZero[featureIndex]) {      float weight=weightVector[featureIndex];      float a=targetFeatures.continuousFeatures[featureIndex - nDiscrete];      float b=unitFeatures.continuousFeatures[featureIndex - nDiscrete];      if (!(a != a)) {        double myCost;        if (!(b != b)) {          myCost=weightFunctions[featureIndex - nDiscrete].cost(a,b);        } else {          myCost=this.MEANING_RATING_RANGE;        }        cost=weight * myCost;        if (debugShowCostGraph) {          cumulWeightedCosts[featureIndex]+=weight * myCost;        }      }    }  }  return cost;}  }
class C{  @Override public boolean next(){  boolean hasmore2=ss2.next();  if (hasmore2 && ss2.getVal(fldName2).equals(joinVal))   return true;  boolean hasmore1=ss1.next();  if (hasmore1 && ss1.getVal(fldName1).equals(joinVal)) {    ss2.restorePosition();    return true;  }  while (hasmore1 && hasmore2) {    Constant v1=ss1.getVal(fldName1);    Constant v2=ss2.getVal(fldName2);    if (v1.compareTo(v2) < 0)     hasmore1=ss1.next(); else     if (v1.compareTo(v2) > 0)     hasmore2=ss2.next(); else {      ss2.savePosition();      joinVal=ss2.getVal(fldName2);      return true;    }  }  return false;}  }
class C{  String completedLedgerZNode(long firstTxId,long lastTxId,long logSegmentSeqNo){  return String.format("%s/%s",logMetadata.getLogSegmentsPath(),completedLedgerZNodeName(firstTxId,lastTxId,logSegmentSeqNo));}  }
class C{  public void startDocumentFragment(){  if (DEBUG_METHODS) {    System.out.println(toString() + "#startDocumentFragment(" + ")");  }  fMatchedString=null;  for (int i=0; i < fLocationPaths.length; i++) {    fStepIndexes[i].clear();    fCurrentStep[i]=0;    fNoMatchDepth[i]=0;    fMatched[i]=0;  }}  }
class C{  public void testCycleDateStartTimerEvent() throws Exception {  Clock previousClock=processEngineConfiguration.getClock();  Clock testClock=new DefaultClockImpl();  processEngineConfiguration.setClock(testClock);  Calendar calendar=Calendar.getInstance();  calendar.set(2025,Calendar.DECEMBER,10,0,0,0);  testClock.setCurrentTime(calendar.getTime());  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndTest.testCycleDateStartTimerEvent.bpmn20.xml").deploy();  assertEquals(1,repositoryService.createProcessDefinitionQuery().count());  List<Job> jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  Calendar dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,11,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  moveByMinutes(60 * 25);  waitForJobExecutorToProcessAllJobs(2000,200);  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(1,processInstances.size());  tasks=taskService.createTaskQuery().list();  assertEquals(1,tasks.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,12,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  moveByMinutes(60 * 25);  try {    waitForJobExecutorToProcessAllJobs(10000,200);  } catch (  Exception e) {    fail("Because the endDate is reached no other jobs created");  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(2,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  int timerFiredCount=0;  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {      timerFiredCount++;    }  }  int eventCreatedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_CREATED.equals(eventReceived.getType())) {      eventCreatedCount++;    }  }  int eventDeletedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_DELETED.equals(eventReceived.getType())) {      eventDeletedCount++;    }  }  assertEquals(2,timerFiredCount);  assertEquals(4,eventCreatedCount);  assertEquals(4,eventDeletedCount);  for (  ProcessInstance processInstance : processInstances) {    tasks=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).list();    Task task=tasks.get(0);    assertEquals("Task A",task.getName());    assertEquals(1,tasks.size());    taskService.complete(task.getId());  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  listener.clearEventsReceived();  processEngineConfiguration.setClock(previousClock);  repositoryService.deleteDeployment(repositoryService.createDeploymentQuery().singleResult().getId(),true);}  }
class C{  public void actionPerformed(ActionEvent ev){}  }
class C{  @Override public int available(){  long avail=size - position;  if (avail <= 0) {    return 0;  } else   if (avail > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)avail;  }}  }
class C{  private double nextAfter(final double t){  final double dir=forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;  return FastMath.nextAfter(t,dir);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  return null;}  }
class C{  public static AudioInputStream convertChannels(AudioInputStream in,int channels) throws IllegalArgumentException {  AudioInputStream converted;  AudioFormat sourceFormat, targetFormat;  if (in == null)   throw new IllegalArgumentException("the inputstream must not be null values");  if (channels < 1)   throw new IllegalArgumentException("the number of channels must be greater than one");  converted=in;  sourceFormat=in.getFormat();  targetFormat=new AudioFormat(sourceFormat.getSampleRate(),sourceFormat.getSampleSizeInBits(),channels,true,sourceFormat.isBigEndian());  if (sourceFormat.getChannels() != targetFormat.getChannels()) {    if (AudioSystem.isConversionSupported(targetFormat,sourceFormat))     converted=AudioSystem.getAudioInputStream(targetFormat,converted); else     throw new IllegalArgumentException("Conversion to specified number of channels not supported.");  }  return converted;}  }
class C{  private void initializeItem(TreeItem item){  if (item.getChecked() && !item.getGrayed()) {    updateChildrenItems((TreeItem)item);  }}  }
class C{  @VisibleForTesting void overrideDecidedStateForTesting(boolean decidedState){  mDidOverrideDecidedStateForTesting=true;  mDecidedStateForTesting=decidedState;}  }
class C{  public void error(int message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public static Zmat aib(Zpsdmat A,Zmat B) throws JampackException {  Zchol CHOL;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.CHOL == null)     A.CHOL=new Zchol(A);    CHOL=A.CHOL;  } else   CHOL=new Zchol(A);  return Solve.aib(CHOL.R,Solve.ahib(CHOL.R,B));}  }
class C{  public static void printThread(Class<?> clazz,String msg){  if (IS_DEBUG_OF_THREAD) {    Log.w(clazz.getSimpleName(),"### " + msg + " -> "+ " {name: "+ Thread.currentThread().getName()+ " , "+ "id:"+ Thread.currentThread().getId()+ "}");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_SUBMIT_MESSAGE(){  return new SM_SYSTEM_MESSAGE(1300923);}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public static void remove(String module,String name){  String node=Model.node();  Helper.delete(W.create("module",module).and("name",name).and("node",node),Jar.class);}  }
class C{  public static String loadFileSetToString(Set<String> ssFiles){  StringBuffer sbRes=new StringBuffer();  for (  String sCurFile : ssFiles) {    sbRes.append(loadFileToString(sCurFile)).append((char)0);  }  return sbRes.toString();}  }
class C{  private Object readResolve(){  return val ? YES : NO;}  }
class C{  public SystemWebViewEngine(Context context,CordovaPreferences preferences){  this(new SystemWebView(context),preferences);}  }
class C{  public void addLabelRenderer(EsriLabelRendererInterface labelRendererObj){  labelMap.put(labelRendererObj.getRendererClass(),labelRendererObj);}  }
class C{  public String optString(String key){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  return token.getStringValue(cbuf);}  }
class C{  private boolean hasPrefix(byte[] nal){  if (nal[0] == 0 && nal[1] == 0 && nal[2] == 0 && nal[3] == 0x01)   return true; else   return false;}  }
class C{  protected DurationImpl(boolean isPositive,BigInteger years,BigInteger months,BigInteger days,BigInteger hours,BigInteger minutes,BigDecimal seconds){  this.years=years;  this.months=months;  this.days=days;  this.hours=hours;  this.minutes=minutes;  this.seconds=seconds;  this.signum=calcSignum(isPositive);  if (years == null && months == null && days == null && hours == null && minutes == null && seconds == null) {    throw new IllegalArgumentException(DatatypeMessageFormatter.formatMessage(null,"AllFieldsNull",null));  }  testNonNegative(years,DatatypeConstants.YEARS);  testNonNegative(months,DatatypeConstants.MONTHS);  testNonNegative(days,DatatypeConstants.DAYS);  testNonNegative(hours,DatatypeConstants.HOURS);  testNonNegative(minutes,DatatypeConstants.MINUTES);  testNonNegative(seconds,DatatypeConstants.SECONDS);}  }
class C{  private DefaultMessageListenerContainer subscribe(final Process process,final int consumersMax){  DefaultMessageListenerContainer container=new DefaultMessageListenerContainer();  container.setConnectionFactory(updateConnectionFactory);  container.setDestination(new ActiveMQQueue(jmsUpdateQueueTrunk + "." + process.getName()));  container.setMessageListener(listener);  container.setConcurrentConsumers(consumersInitial);  container.setMaxConcurrentConsumers(consumersMax);  container.setSessionTransacted(sessionTransacted);  container.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);  container.setAutoStartup(false);  container.setPhase(ServerConstants.PHASE_START_LAST);  container.setMaxMessagesPerTask(maxMessages);  container.setReceiveTimeout(receiveTimeout);  container.setIdleTaskExecutionLimit(idleTaskExecutionLimit);  container.setBeanName(process.getName() + " update JMS container");  container.setTaskExecutor(threadPool);  container.setAcceptMessagesWhileStopping(false);  jmsContainers.put(process.getId(),container);  container.initialize();  return container;}  }
class C{  public static RuleTag buildCreateBasicRuleTag(Properties properties){  if (properties == null) {    properties=new Properties();  }  RuleTag ruleTag=RuleTag.create("RuleTag",Integer.class,"ruleExpression").build();  properties.setProperty("name","RuleTag");  properties.setProperty("description","<no description provided>");  properties.setProperty("mode",String.valueOf(TagMode.OPERATIONAL.ordinal()));  properties.setProperty("dataType",Integer.class.getName());  properties.setProperty("isLogged",String.valueOf(true));  properties.setProperty("ruleText","ruleExpression");  return ruleTag;}  }
class C{  private String toHex(byte[] data){  char[] chars=new char[data.length * 2];  for (int i=0; i < data.length; i++) {    chars[i * 2]=HEX_DIGITS[(data[i] >> 4) & 0xf];    chars[i * 2 + 1]=HEX_DIGITS[data[i] & 0xf];  }  return new String(chars);}  }
class C{  private void applyThirdPartyApiSettings(){  serviceBuilder.getControlBuilder().setEnvironment(ControlConfigUtil.PROD_SERVICE_CONTROL);  serviceBuilder.setConfigVersion(UInt32Value.newBuilder().setValue(TOOLS_CONFIG_VERSION_3).build());}  }
class C{  public String toString(cp_info constant_pool[]){  return convert();}  }
class C{  private void digitsSlashDigitsToWords(String tokenVal){  int index=tokenVal.indexOf('/');  String aaa=tokenVal.substring(0,index);  String bbb=tokenVal.substring(index + 1);  int a, b;  if (matches(digitsPattern,(String)tokenItem.findFeature("p.name")) && tokenItem.getPrevious() != null) {    wordRelation.addWord("and");  }  if (aaa.equals("1") && bbb.equals("2")) {    wordRelation.addWord("a");    wordRelation.addWord("half");  } else   if ((a=Integer.parseInt(aaa)) < (b=Integer.parseInt(bbb))) {    NumberExpander.expandNumber(aaa,wordRelation);    NumberExpander.expandOrdinal(bbb,wordRelation);    if (a > 1) {      wordRelation.addWord("'s");    }  } else {    NumberExpander.expandNumber(aaa,wordRelation);    wordRelation.addWord("slash");    NumberExpander.expandNumber(bbb,wordRelation);  }}  }
class C{  private static int evaluate(String[] s1,String[] s2,int id){  String[][] paddedStrings=padStrings(s1,s2);  int n=0;  for (int i=0; i < paddedStrings[0].length; i++) {    String w1=paddedStrings[0][i];    String w2=paddedStrings[1][i];    if (w1.equals(w2)) {      n++;    } else {      if (isLogged) {        if (w1.equals(PADDING_STRING_1) && (!w2.equals(PADDING_STRING_2))) {          logs.add(new UnmatchedToken(id,i,w2));        }        if (!w1.equals(PADDING_STRING_1) && (w2.equals(PADDING_STRING_2))) {          logs.add(new UnmatchedToken(id,i,w1));        }        if (!w1.equals(PADDING_STRING_1) && (!w2.equals(PADDING_STRING_2))) {          logs.add(new UnmatchedToken(id,i,w1 + "#" + w2));        }      }    }  }  return n;}  }
class C{  public OpenIntToDoubleHashMap(final double missingEntries){  this(DEFAULT_EXPECTED_SIZE,missingEntries);}  }
class C{  public int provideDumpInterval(){  return provideBlockThreshold();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200851,skillcaster,num0,skillname);}  }
class C{  public ReturnVoidStmt newReturnVoidStmt(){  return new JReturnVoidStmt();}  }
class C{  public EquipmentSenderFilterModule(final IFilterMessageSender filterMessageSender,final EquipmentLoggerFactory equipmentLoggerFactory){  this.filterMessageSender=filterMessageSender;  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  public Value sqrt(Value num){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public double quadraticMean(){  return NumericReduceUtils.quadraticMean.reduce(this);}  }
class C{  public static float scrollToScreen(float x,float warpSize){  if (x <= 0)   return 0;  if (x >= 2 * warpSize)   return x - warpSize;  x=(x - warpSize) / (2.0f * warpSize) + 0.5f;  return x * x * warpSize;}  }
class C{  public static boolean isBodyCenterEnabled(){  return bodyCenterEnabled;}  }
class C{  @Override public void rollback() throws RemoteException {  tx.rollback();  try {    tx=VanillaDb.txMgr().newTransaction(isolationLevel,readOnly);  } catch (  Exception e) {    throw new RemoteException("error creating transaction ",e);  }}  }
class C{  public Map<String,Object> calculateStartDate(int daysToShip,GenericValue routing,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin){  Map<String,Object> result=null;  Timestamp endDate=(Timestamp)requiredByDate.clone();  Timestamp startDate=endDate;  long timeToShip=daysToShip * 8 * 60* 60* 1000;  if (isBuilt) {    List<GenericValue> listRoutingTaskAssoc=null;    if (routing == null) {      try {        Map<String,Object> routingInMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"ignoreDefaultRouting","Y","userLogin",userLogin);        Map<String,Object> routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);        routing=(GenericValue)routingOutMap.get("routing");        listRoutingTaskAssoc=UtilGenerics.checkList(routingOutMap.get("tasks"));        if (routing == null) {          BOMTree tree=null;          List<BOMNode> components=FastList.newInstance();          try {            tree=new BOMTree(product.getString("productId"),"MANUF_COMPONENT",requiredByDate,BOMTree.EXPLOSION_SINGLE_LEVEL,delegator,dispatcher,userLogin);            tree.setRootQuantity(quantity);            tree.print(components,true);            if (components.size() > 0)             components.remove(0);          } catch (          Exception exc) {            Debug.logWarning(exc.getMessage(),module);            tree=null;          }          if (tree != null && tree.getRoot() != null && tree.getRoot().getProduct() != null) {            routingInMap=UtilMisc.toMap("productId",tree.getRoot().getProduct().getString("productId"),"userLogin",userLogin);            routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);            routing=(GenericValue)routingOutMap.get("routing");          }        }      } catch (      GenericServiceException gse) {        Debug.logWarning(gse.getMessage(),module);      }    }    if (routing != null) {      result=FastMap.newInstance();      if (listRoutingTaskAssoc == null) {        try {          Map<String,Object> routingTasksInMap=UtilMisc.<String,Object>toMap("workEffortId",routing.getString("workEffortId"),"userLogin",userLogin);          Map<String,Object> routingTasksOutMap=dispatcher.runSync("getRoutingTaskAssocs",routingTasksInMap);          listRoutingTaskAssoc=UtilGenerics.checkList(routingTasksOutMap.get("routingTaskAssocs"));        } catch (        GenericServiceException gse) {          Debug.logWarning(gse.getMessage(),module);        }      }    }    if (listRoutingTaskAssoc != null) {      for (int i=1; i <= listRoutingTaskAssoc.size(); i++) {        GenericValue routingTaskAssoc=listRoutingTaskAssoc.get(listRoutingTaskAssoc.size() - i);        if (EntityUtil.isValueActive(routingTaskAssoc,endDate)) {          GenericValue routingTask=null;          try {            routingTask=routingTaskAssoc.getRelatedOne("ToWorkEffort",true);          } catch (          GenericEntityException e) {            Debug.logError(e.getMessage(),module);          }          long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);          if (i == listRoutingTaskAssoc.size()) {            totalTime+=timeToShip;          }          startDate=TechDataServices.addBackward(TechDataServices.getTechDataCalendar(routingTask),endDate,totalTime);          result.put(routingTask.getString("workEffortId"),startDate);          endDate=startDate;        }      }    } else {      Debug.logError("No routing found for product = " + product.getString("productId"),module);    }  } else {    try {      GenericValue techDataCalendar=product.getDelegator().findOne("TechDataCalendar",UtilMisc.toMap("calendarId","SUPPLIER"),true);      startDate=TechDataServices.addBackward(techDataCalendar,endDate,timeToShip);    } catch (    GenericEntityException e) {      Debug.logError(e,"Error : reading SUPPLIER TechDataCalendar: " + e.getMessage(),module);    }  }  requirementStartDate=startDate;  return result;}  }
class C{  public void schedule(String poolName,String serviceName,String dataId,long startTime) throws JobManagerException {  schedule(null,poolName,serviceName,dataId,startTime,-1,0,1,0,-1);}  }
class C{  void copyFeature(String feature){  ViterbiPath path=findBestPath();  if (path == null) {    return;  }  for (; path != null; path=path.from) {    if (path.candidate != null && path.isPresent(feature)) {      path.candidate.item.getFeatures().setObject(feature,path.getFeature(feature));    }  }}  }
class C{  public static Double scaledZ(final double confidence_level){  if (confidence_level <= 0.0 || confidence_level >= 1.0) {    throw new IllegalArgumentException("Confidence level must be in the interval (0, 1).");  }  double significance_level=1.0 - confidence_level;  return normalInverse(1.0 - significance_level / DEFAULT_MAX_DECISIONS / 2.);}  }
class C{  private boolean belongsToPart(final Point<S> point,final Hyperplane<S> hyperplane,final Region<T> part){  @SuppressWarnings("unchecked") final Embedding<S,T> embedding=(Embedding<S,T>)hyperplane;  return part.checkPoint(embedding.toSubSpace(point)) != Location.OUTSIDE;}  }
class C{  @Override public void clear(){  backedSet.clear();}  }
class C{  public PollsEditQuery(VkApiClient client,UserActor actor,int ownerId,int pollId){  super(client,"polls.edit",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  pollId(pollId);}  }
class C{  private Encoding fromExternalToWrapperEncoding(org.apache.carbondata.format.Encoding encoderThrift){switch (encoderThrift) {case DICTIONARY:    return Encoding.DICTIONARY;case DELTA:  return Encoding.DELTA;case RLE:return Encoding.RLE;case INVERTED_INDEX:return Encoding.INVERTED_INDEX;case BIT_PACKED:return Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return Encoding.DIRECT_DICTIONARY;default :return Encoding.DICTIONARY;}}  }
class C{  private void populateTooltip(final Series<Number,Number> series,final Data<Number,Number> data){  final Date date=new Date();  date.setTime(data.getXValue().longValue());  final Tooltip tooltip=new Tooltip(seriesTypeName + " = " + series.getName()+ System.lineSeparator()+ seriesValueName+ " = "+ data.getYValue()+ " "+ seriesUnit+ System.lineSeparator()+ "Time = "+ TimeUtils.TIME_SDF.format(date));  Tooltip.install(data.getNode(),tooltip);}  }
class C{  public static void pickImage(Activity activity,int requestCode){  try {    activity.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(activity);  }}  }
class C{  public int hashCode(){  return this.hashCode;}  }
class C{  @Override public int hashCode(){  final int[] hashData=new int[6];  hashData[0]=Double.valueOf(expansionFactor).hashCode();  hashData[1]=Double.valueOf(contractionCriterion).hashCode();  hashData[2]=expansionMode.hashCode();  hashData[3]=Arrays.hashCode(internalArray);  hashData[4]=numElements;  hashData[5]=startIndex;  return Arrays.hashCode(hashData);}  }
class C{  private Map<String,String> parseQueryString(String queryString){  TreeMap<String,String> queryMap=new TreeMap<String,String>();  String[] queryPairs=queryString.split("&");  for (  String pair : queryPairs) {    int idx=pair.indexOf("=");    try {      queryMap.put(URLDecoder.decode(pair.substring(0,idx),"UTF-8"),URLDecoder.decode(pair.substring(idx + 1),"UTF-8"));    } catch (    UnsupportedEncodingException e) {      e.printStackTrace();    }  }  return queryMap;}  }
class C{  public static String createFreshVariable(Set<String> vars,String var){  String fresh=var;  while (vars.contains(fresh)) {    String valFree=fresh.replaceAll("[^0-9]","");    int value=valFree.equals("") ? 0 : Integer.parseInt(valFree);    fresh=fresh.replaceAll("\\d+","") + (++value);  }  return fresh;}  }
class C{  private static String digits(long val,int digits){  long hi=1L << (digits * 4);  return Long.toHexString(hi | (val & (hi - 1))).substring(1);}  }
class C{  @Override public ListenableFuture<LeaseGrantResponse> grant(long ttl){  LeaseGrantRequest leaseGrantRequest=LeaseGrantRequest.newBuilder().setTTL(ttl).build();  return this.leaseFutureStub.leaseGrant(leaseGrantRequest);}  }
class C{  static private double norm(double[] x){  int n=x.length;  double ss=0.0;  double xk;  for (  double aX : x) {    xk=aX;    ss+=xk * xk;  }  return ss;}  }
class C{  @Override protected void onPause(){  super.onPause();  LOG.d(TAG,"Paused the activity.");  if (this.appView != null) {    boolean keepRunning=this.keepRunning || this.cordovaInterface.activityResultCallback != null;    this.appView.handlePause(keepRunning);  }}  }
class C{  public void run(BlockExecutor blockExecutor){  try {    blockExecutor.invoke();  } catch (  Exception exception) {    handle(exception);  }}  }
class C{  private void stopEquipments(final Collection<Long> equipmentIds,final Timestamp timestamp,final String message){  Equipment currentEquipmentCopy;  for (  Long equipmentId : equipmentIds) {    try {      try {        currentEquipmentCopy=equipmentCache.getCopy(equipmentId);        equipmentFacade.stop(equipmentId,timestamp);        stopStateTag(currentEquipmentCopy.getStateTagId(),timestamp,message);        for (        Long subId : currentEquipmentCopy.getSubEquipmentIds()) {          try {            SubEquipment subEquipmentCopy=subEquipmentCache.getCopy(subId);            stopStateTag(subEquipmentCopy.getStateTagId(),timestamp,message);            subEquipmentFacade.stop(subId,timestamp);          } catch (          CacheElementNotFoundException ex) {            LOGGER.error("Subequipment could not be retrieved from cache - unable to update Subequipment state.",ex);          }        }      } catch (      CacheElementNotFoundException e) {        LOGGER.error("Equipment could not be retrieved from cache - unable to update Equipment state.",e);      }    } catch (    Exception e) {      LOGGER.error("Unable to acquire lock on Equipment/SubEquipment object",e);    }  }}  }
class C{  @Override public void addSLDOutputListener(SLDOutputInterface sldOutput){}  }
class C{  private void guestLogin(){  Intent intent=new Intent(this,MainActivity.class);  intent.putExtra("status",Status.GUEST_USER);  startActivity(intent);  finish();}  }
class C{  public FieldConfigString(FieldConfigCommonData commonData,String buttonText){  super(commonData);  this.buttonText=buttonText;}  }
class C{  private double[] computeSplineCoefficients(double[] beta){  final double[] a=new double[NUM_COEFF];  for (int i=0; i < NUM_COEFF; i++) {    double result=0;    final double[] row=AINV[i];    for (int j=0; j < NUM_COEFF; j++) {      result+=row[j] * beta[j];    }    a[i]=result;  }  return a;}  }
class C{  public int id(){  return id;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void populateResultListView(List<BookmarkMatch> ids){  if (ids.isEmpty()) {    setUIState(UIState.EMPTY);  } else {    setUIState(UIState.RESULT);    mResultList.setAdapter(new ResultListAdapter(ids,mDelegate));  }}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  public void transform(AffineTransform at){  clip[2]=clip[0];  clip[3]=clip[7];  clip[4]=clip[6];  clip[5]=clip[1];  at.transform(clip,0,clip,0,4);  double xmin=clip[0], ymin=clip[1];  double xmax=clip[6], ymax=clip[7];  for (int i=0; i < 7; i+=2) {    if (clip[i] < xmin)     xmin=clip[i];    if (clip[i] > xmax)     xmax=clip[i];    if (clip[i + 1] < ymin)     ymin=clip[i + 1];    if (clip[i + 1] > ymax)     ymax=clip[i + 1];  }  clip[0]=xmin;  clip[1]=ymin;  clip[6]=xmax;  clip[7]=ymax;}  }
class C{  public void appendClass(int classificationId,int srcClassId,int tarClassId){  int newSize=getSize(classificationId,srcClassId) + getSize(classificationId,tarClassId);  if (newSize > 0) {    UpdateItem firstItemSrc=getFirst(classificationId,srcClassId);    if (firstItemSrc == null) {      System.err.println("Warning: srcClassId=" + srcClassId + ", tarClassId="+ tarClassId+ " firstItemSrc=null");      return;    }    long readUid=firstItemSrc.getReadUId();    while (readUid != 0) {      UpdateItem item=readUid2UpdateItem.get(readUid);      item.setClassId(classificationId,tarClassId);      readUid=item.getNextInClassification(classificationId);    }    UpdateItem firstItemTar=getFirst(classificationId,tarClassId);    if (firstItemTar == null)     setFirst(classificationId,tarClassId,firstItemSrc);    UpdateItem lastItemTar=getLast(classificationId,tarClassId);    if (lastItemTar != null)     lastItemTar.setNextInClassifaction(classificationId,firstItemSrc.getReadUId());    UpdateItem lastItemSrc=getLast(classificationId,srcClassId);    setLast(classificationId,tarClassId,lastItemSrc);    setSize(classificationId,tarClassId,newSize);    removeClass(classificationId,srcClassId);    sortChain(classificationId,tarClassId);  }}  }
class C{  boolean onSplitWork(int bytesMoved){  if (_splitTargetRemaining <= 0) {    _splitTargetRemaining=_splitTargetSize - bytesMoved;    return true;  } else {    _splitTargetRemaining-=bytesMoved;    return false;  }}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public void moveToTargetObject(){  if (started.compareAndSet(false,true)) {    if (owner.getAi2().isLogging()) {      AI2Logger.moveinfo(owner,"MC: moveToTarget started");    }    destination=Destination.TARGET_OBJECT;    updateLastMove();    MoveTaskManager.getInstance().addCreature(owner);  }}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  contentManager.onRestoreInstanceState(savedInstanceState);}  }
class C{  public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){  super(client,"market.addToAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  albumIds(albumIds);}  }
class C{  @CheckForNull private static Template findTemplate(String nodeLabelString,List<Template> templates){  Template selectedTemplate=null;  for (  Template template : templates) {    String templateLabel=template.getLabel();    if (templateLabel != null && nodeLabelString.contains(templateLabel)) {      selectedTemplate=template;      break;    }  }  return selectedTemplate;}  }
class C{  protected AbstractTrap(SootClass exception,UnitBox beginUnitBox,UnitBox endUnitBox,UnitBox handlerUnitBox){  this.exception=exception;  this.beginUnitBox=beginUnitBox;  this.endUnitBox=endUnitBox;  this.handlerUnitBox=handlerUnitBox;  this.unitBoxes=Collections.unmodifiableList(Arrays.asList(beginUnitBox,endUnitBox,handlerUnitBox));}  }
class C{  public boolean isApplicable(){  ParametersDialog viewer=(ParametersDialog)getParent();  return viewer != null;}  }
class C{  public static void ensureWebpRegistered(){}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED);}  }
class C{  private void clearTorqueAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.clearTorque.warning"),body.getName()),Messages.getString("menu.context.body.clearTorque.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.clearAccumulatedTorque();        }      }    }  }}  }
class C{  public static SpaceURL parseURL(String spaceURLStr,Properties customProperties) throws MalformedURLException {  spaceURLStr=initialValidate(spaceURLStr);  int minToken=3;  String containerName=null;  String spaceName=null;  String unicastHost=null;  String protocol=null;  String schemaName=null;  String machineName="localhost";  int containerDotNotationIndex=spaceURLStr.indexOf("/./");  int spaceNameDotNotationIndex=containerDotNotationIndex + 3;  if (containerDotNotationIndex != -1)   minToken++;  if (containerDotNotationIndex == 0) {    protocol=SpaceURL.EMBEDDED_SPACE_PROTOCOL;    final String hostName=SystemInfo.singleton().network().getHostId();    try {      machineName=InetAddress.getByName(hostName).getHostName();    } catch (    UnknownHostException e) {      if (_logger.isLoggable(Level.FINEST))       _logger.log(Level.FINEST,e.toString(),e);    }    unicastHost=hostName + ":" + DEFAULT_RMID_PORT;    int endOfSpaceIndx=spaceURLStr.indexOf('?');    if (endOfSpaceIndx != -1) {      spaceName=spaceURLStr.substring(spaceNameDotNotationIndex,endOfSpaceIndx);      int indexOfPotential_container=spaceURLStr.indexOf("_container");      if (indexOfPotential_container != -1) {        spaceName=spaceURLStr.substring(indexOfPotential_container + 11,endOfSpaceIndx);      }    } else {      spaceName=spaceURLStr.substring(spaceNameDotNotationIndex);      int indexOfPotential_container=spaceURLStr.indexOf("_container");      if (indexOfPotential_container != -1) {        spaceName=spaceURLStr.substring(indexOfPotential_container + 11,spaceURLStr.length());      }    }    containerName=spaceName + "_container";    schemaName=SpaceURL.DEFAULT_SCHEMA_NAME;  } else {    StringTokenizer st=new StringTokenizer(spaceURLStr,"/");    int countTokens=st.countTokens();    if (countTokens < minToken)     throw new SpaceURLValidationException("Invalid space url - " + spaceURLStr);    protocol=st.nextToken();    if (!SpaceURL.AVAILABLE_PROTOCOLS.contains(protocol))     throw new SpaceURLValidationException("Invalid space url - Unknown protocol found in space url: " + spaceURLStr);    String host=st.nextToken();    if (host.equals(SpaceURL.ANY) || protocol.equalsIgnoreCase(SpaceURL.JINI_PROTOCOL))     unicastHost=host; else     unicastHost=getRMIDurl(host);    if (containerDotNotationIndex != -1) {      spaceName=st.nextToken("?");      if (spaceName.startsWith("/./")) {        spaceName=spaceName.substring(3);      } else       if (spaceName.startsWith("/")) {        spaceName=spaceName.substring(1);      }      containerName=spaceName + "_container";      schemaName=SpaceURL.DEFAULT_SCHEMA_NAME;      if (countTokens == minToken && containerName.equals(SpaceURL.ANY))       throw new SpaceURLValidationException("Invalid space url - " + spaceURLStr + " container name can not be equals to *");      if (containerName.equals(SpaceURL.ANY) && protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL))       throw new SpaceURLValidationException("Invalid space url - " + spaceURLStr + " URL can not be RMI protocol and container name equals to *");      if (protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL) && unicastHost.equals(SpaceURL.ANY))       unicastHost=getRMIDurl(containerName); else       if (protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL) && !unicastHost.equals(SpaceURL.ANY))       unicastHost=getRMIDurl(unicastHost);    } else {      containerName=st.nextToken();      if (countTokens == minToken && containerName.indexOf('?') != -1)       containerName=containerName.substring(0,containerName.indexOf('?'));      if (countTokens == minToken && containerName.equals(SpaceURL.ANY))       throw new SpaceURLValidationException("Invalid space url - " + spaceURLStr + " container name can not be equals to *");      if (containerName.equals(SpaceURL.ANY) && protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL))       throw new SpaceURLValidationException("Invalid space url - " + spaceURLStr + " URL can not be RMI protocol and container name equals to *");      if (protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL) && unicastHost.equals(SpaceURL.ANY))       unicastHost=getRMIDurl(containerName); else       if (protocol.equalsIgnoreCase(SpaceURL.RMI_PROTOCOL) && !unicastHost.equals(SpaceURL.ANY))       unicastHost=getRMIDurl(unicastHost);    }    if (st.hasMoreTokens() && containerDotNotationIndex == -1) {      spaceName=st.nextToken("?");      spaceName=(spaceName.startsWith("/") ? spaceName.substring(1) : spaceName);    }  }  SpaceURL spaceURL=new SpaceURL();  spaceURL.initialize(spaceURLStr);  if (protocol.equals(SpaceURL.EMBEDDED_SPACE_PROTOCOL))   spaceURL.setProperty(SpaceURL.MACHINE_HOSTNAME,machineName);  boolean ignoreValidation=Boolean.valueOf(spaceURL.getProperty(SpaceURL.IGNORE_VALIDATION));  try {    if (!ignoreValidation)     SpaceURLValidator.validate(spaceURL);  } catch (  SpaceURLValidationException e) {    throw e;  }catch (  Exception e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Space URL validation failed. Please check the error and fix the SpaceURL, since it might have serious implications on the initialized topology. ",e);    }  }  String propertiesFileName=spaceURL.getProperty(SpaceURL.PROPERTIES_FILE_NAME);  if (customProperties != null) {    String propFileName=customProperties.getProperty(SpaceUrlUtils.toCustomUrlProperty(SpaceURL.PROPERTIES_FILE_NAME));    if (!JSpaceUtilities.isEmpty(propFileName))     propertiesFileName=propFileName;    spaceURL.getCustomProperties().putAll(customProperties);  }  try {    customProperties=findAndSetCustomProperties(propertiesFileName,spaceURL);  } catch (  ConfigurationException ce) {    throw new MalformedURLException(ce.toString());  }catch (  Throwable e) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Could not set properties loaded from < " + propertiesFileName + " > custom properties file: "+ e.getMessage());    }  }  if (spaceURL.containsKey(SpaceURL.CLUSTER_SCHEMA) && !(spaceURL.containsKey(SpaceURL.SCHEMA_NAME))) {    schemaName=SpaceURL.DEFAULT_SCHEMA_NAME;    spaceURL.setProperty(SpaceURL.SCHEMA_NAME,schemaName);  }  if (!ignoreValidation)   SpaceURLValidator.validateClusterSchemaAttributes(spaceURL);  if (protocol.equalsIgnoreCase(SpaceURL.EMBEDDED_SPACE_PROTOCOL)) {    String clusterSchemaName=spaceURL.getProperty(SpaceURL.CLUSTER_SCHEMA);    if (clusterSchemaName != null) {      if (spaceURL.containsKey(SpaceURL.CLUSTER_MEMBER_ID)) {        String memberID=spaceURL.getProperty(SpaceURL.CLUSTER_MEMBER_ID);        containerName+=memberID;      }      String backupMemberID=spaceURL.getProperty(SpaceURL.CLUSTER_BACKUP_ID);      if (backupMemberID != null) {        containerName+='_' + backupMemberID;      }    }    if (unicastHost != null && unicastHost.indexOf(':') != -1) {      final String jndiEnabledXPath=customProperties.getProperty(XPathProperties.CONTAINER_JNDI_ENABLED);      if (JSpaceUtilities.isEmpty(jndiEnabledXPath) || jndiEnabledXPath.equalsIgnoreCase("true"))       customProperties.setProperty(XPathProperties.CONTAINER_JNDI_ENABLED,"true"); else       if (jndiEnabledXPath.equalsIgnoreCase("false"))       customProperties.setProperty(XPathProperties.CONTAINER_JNDI_ENABLED,"false");      final String jndiURL=customProperties.getProperty(XPathProperties.CONTAINER_JNDI_URL);      if (JSpaceUtilities.isEmpty(jndiURL)) {        if (System.getProperty(SystemProperties.LOOKUP_JNDI_URL) != null)         unicastHost=System.getProperty(SystemProperties.LOOKUP_JNDI_URL);        customProperties.setProperty(XPathProperties.CONTAINER_JNDI_URL,unicastHost);      } else {        customProperties.setProperty(XPathProperties.CONTAINER_JNDI_URL,jndiURL);      }    }  }  if (!protocol.equalsIgnoreCase(SpaceURL.JINI_PROTOCOL)) {    if (customProperties.getProperty(XPathProperties.CONTAINER_JNDI_URL) != null)     unicastHost=customProperties.getProperty(XPathProperties.CONTAINER_JNDI_URL); else     if (System.getProperty(SystemProperties.LOOKUP_JNDI_URL) != null)     unicastHost=System.getProperty(SystemProperties.LOOKUP_JNDI_URL);  }  initialize(spaceURL,protocol,containerName,spaceName,schemaName,unicastHost);  return spaceURL;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public static LinkedList<Pair<Number,Number>> computeMentenKinetics(Collection<Pair<Number,Number>> depthVsDifferences,Single<Integer> extrapolatedCount){  if (depthVsDifferences.size() == 0)   return new LinkedList<>();  Pair<Number,Number>[] array=(Pair<Number,Number>[])depthVsDifferences.toArray(new Pair[depthVsDifferences.size()]);  int minX=Integer.MAX_VALUE;  int maxX=Integer.MIN_VALUE;  int vMax=0;  for (  Pair<Number,Number> pair : array) {    minX=Math.min(minX,pair.get1().intValue());    maxX=Math.max(maxX,pair.get1().intValue());    vMax=Math.max(vMax,pair.get2().intValue());  }  Arrays.sort(array);  if (true) {    vMax=0;    double[] smoothedValues=new double[array.length];    double sum=0;    int count=0;    for (int i=0; i < array.length; i++) {      Pair<Number,Number> pair=array[i];      sum+=pair.getSecond().intValue();      if (count < 10)       count++; else       sum-=array[i - 10].getSecond().intValue();      if (i > 5)       smoothedValues[i - 5]=sum / count;    }    for (int i=0; i < Math.min(5,smoothedValues.length); i++) {      smoothedValues[i]=smoothedValues[Math.min(5,smoothedValues.length) - 1];    }    for (int i=0; i < array.length; i++) {      smoothedValues[i]=smoothedValues[Math.max(0,array.length - 6)];    }    for (int i=0; i < array.length; i++) {      Pair<Number,Number> pair=array[i];      array[i]=new Pair<Number,Number>(pair.get1(),smoothedValues[i]);      vMax=Math.max(vMax,(int)smoothedValues[i]);    }  }  int first=0;  while (first < array.length - 1 && array[first + 1].get2().intValue() < vMax / 2)   first++;  int kM=array[first].get1().intValue();  float stepX=Math.max(0.1f,(maxX - minX) / 100.0f);  System.err.println("vMax: " + vMax + " kM: "+ kM);  if (extrapolatedCount != null) {    int x=Math.max(100000,1000 * maxX);    extrapolatedCount.set(Math.max(1,(int)Math.round((vMax * x) / (double)(kM + x))));    System.err.println("Extrapolated count: " + extrapolatedCount.get());  }  LinkedList<Pair<Number,Number>> result=new LinkedList<>();  for (float x=minX; x <= maxX; x+=stepX) {    float y=(vMax * x) / (kM + x);    result.add(new Pair<Number,Number>(x,y));  }  return result;}  }
class C{  public float[] queryMarkerTransformation(int markerUID){  if (!initedNative)   return null;  return NativeInterface.arwQueryMarkerTransformation(markerUID);}  }
class C{  public static void showError(Object parentIgnored,String message){  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);}  }
class C{  @SuppressWarnings("unchecked") public T[] decode(byte[] bs,Class<T> clazz,int fieldsTotalSize) throws Exception {  if (bs.length % fieldsTotalSize != 0) {    throw new IOException("byte array length: " + bs.length + " is invalid!");  }  int count=bs.length / fieldsTotalSize;  int offset;  T[] results=(T[])Array.newInstance(clazz,count);  offset=0;  for (int i=0; i < results.length; i++) {    results[i]=clazz.newInstance();    results[i].setFields(bs,offset);    offset+=fieldsTotalSize;  }  return results;}  }
class C{  public Client(){}  }
class C{  public RealMatrixFormat(final String prefix,final String suffix,final String rowPrefix,final String rowSuffix,final String rowSeparator,final String columnSeparator,final NumberFormat format){  this.prefix=prefix;  this.suffix=suffix;  this.rowPrefix=rowPrefix;  this.rowSuffix=rowSuffix;  this.rowSeparator=rowSeparator;  this.columnSeparator=columnSeparator;  this.format=format;  this.format.setGroupingUsed(false);}  }
class C{  public WallEditQuery signed(Boolean value){  return unsafeParam("signed",value);}  }
class C{  public WeaponCursor queryWeapon(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_WEAPONS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new WeaponCursor(wrapJoinHelper(builderWeapon(),qh));}  }
class C{  protected String createAgentID(int iLen){  String sTemp=String.valueOf(new Date().getTime());  return sTemp.substring(sTemp.length() - iLen);}  }
class C{  public static boolean canTrade(Player player){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canTrade.ordinal()]) {    if (!restrictions.canTrade(player)) {      return false;    }  }  if (player.getLifeStats().isAlreadyDead()) {    return false;  }  return true;}  }
class C{  public VideoSearchQuery shorter(Integer value){  return unsafeParam("shorter",value);}  }
class C{  public WallPostQuery lat(Float value){  return unsafeParam("lat",value);}  }
class C{  public static boolean PM(long packedDateTime){  return PackedLocalTime.PM(time(packedDateTime));}  }
class C{  public boolean canFlip(){  return (!flipping && elapsedTime != 0f);}  }
class C{  public void start(){  mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201044,num0,skilltarget,skillname);}  }
class C{  public synchronized void close() throws JMSException {  if (m_closed) {    return;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSMessageProducerImpl.close(): " + toString());  }  m_session.removeProducer(this);  m_session=null;  m_closed=true;}  }
class C{  public static int indexOf(byte[] bytes,byte[] pattern){  if (bytes == null || pattern == null || bytes.length < pattern.length || pattern.length == 0) {    return -1;  }  int j=0;  int start=-1;  for (int i=0; i < bytes.length; i++) {    if (bytes[i] == pattern[j]) {      if (j == 0)       start=i;      j++;      if (j == pattern.length)       return start;    } else {      j=0;      start=-1;    }  }  return -1;}  }
class C{  @ObjectiveCName("removeEntry:index:") public List removeEntry(String entry,int index){  java.util.List entries=this.getEntries();  if (entries.get(index).equals(entry)) {    entries.remove(index);  }  this.updateList(entries);  return this;}  }
class C{  public Builder longMathOp(String columnName,MathOp mathOp,long scalar){  return transform(new LongMathOpTransform(columnName,mathOp,scalar));}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getFirstOfPairFlag()) {      return false;    }  } else {    if (!record.getFirstOfPairFlag()) {      return false;    }  }  return true;}  }
class C{  private static boolean inKingSectionLikeHash(String key,String value){  String hashValue=(String)kingSectionLikeHash.get(key);  if (hashValue != null) {    return (hashValue.equals(value));  } else {    return false;  }}  }
class C{  public Resource find(ResourceRef ref){  return find(ref.getType(),ref.getId());}  }
class C{  public boolean isSetAppkey(){  return this.appkey != null;}  }
class C{  public static void onReceiveRepairPatch(Context context,String patchLocation){  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,false);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public NewsfeedGetMentionsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static void main(String[] args) throws Exception {  FlagFieldRegistry registry=Flagz.parse(args);  EtcdFlagFieldUpdater updater=new EtcdFlagFieldUpdater(registry);  updater.init();  updater.watchForUpdates();  try {    while (true) {      System.out.println("test_etcd_int: " + someInt.get().toString());      System.out.println("test_etcd_map: " + someMap.get());      System.out.println();      Thread.sleep(3000);    }  }  finally {    updater.stop();  }}  }
class C{  public static ShoppingCart makeShoppingListCart(LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){  return makeShoppingListCart(null,dispatcher,shoppingList,locale);}  }
class C{  @Override public void start(){  impl.start();}  }
class C{  public AppsSendRequestQuery separate(Boolean value){  return unsafeParam("separate",value);}  }
class C{  public SimpleLedgerAllocator(String allocatePath,Versioned<byte[]> allocationData,QuorumConfigProvider quorumConfigProvider,ZooKeeperClient zkc,BookKeeperClient bkc){  this.zkc=zkc;  this.bkc=bkc;  this.allocatePath=allocatePath;  this.quorumConfigProvider=quorumConfigProvider;  initialize(allocationData);}  }
class C{  @Override public void optionSelected(ValueComboBoxData selectedData){  if (selectedData != null) {    String newValueObj=selectedData.getKey();    CardLayout cl=(CardLayout)(containingPanel.getLayout());    String name=selectedData.getPanelId().getName();    cl.show(containingPanel,name);    FieldConfigBase fieldConfig=fieldConfigMap.get(selectedData.getPanelId());    if (fieldConfig == null) {      ConsoleManager.getInstance().error(this,"Failed to find field config for panel id :" + selectedData.getPanelId());    } else {      fieldConfig.justSelected();      JPanel p=fieldConfig.getPanel();      Dimension preferredSize=null;      if (p.isPreferredSizeSet()) {        preferredSize=p.getPreferredSize();      } else {        preferredSize=new Dimension(BasePanel.FIELD_PANEL_WIDTH,BasePanel.WIDGET_HEIGHT);      }      containingPanel.setPreferredSize(preferredSize);      if (oldValueObj == null) {        oldValueObj=comboBox.getDefaultValue();      }      UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,newValueObj));      oldValueObj=new String(newValueObj);      valueUpdated();      if (symbolSelectedListener != null) {        logger.debug(String.format("Field %s selected %s",getFieldId(),selectedData.getKey()));        symbolSelectedListener.optionSelected(selectedData.getPanelId(),selectedData.getKey());      }    }  }}  }
class C{  public boolean class_method_var(){  return soot.PhaseOptions.getBoolean(options,"class-method-var");}  }
class C{  private Expression addExpression(ExpressionNode node){  Expression expression=node.getExpression();  if (expression instanceof LiteralExpressionImpl) {    return expression;  } else   if (expression instanceof AttributeExpressionImpl) {    return expression;  } else   if (expression instanceof FunctionExpressionImpl) {    FunctionExpressionImpl functionExpression=(FunctionExpressionImpl)expression;    List<Expression> parameterlist=new ArrayList<Expression>();    for (int childIndex=0; childIndex < node.getChildCount(); childIndex++) {      ExpressionNode childNode=(ExpressionNode)node.getChildAt(childIndex);      parameterlist.add(addExpression(childNode));    }    functionExpression.setParameters(parameterlist);    return functionExpression;  } else   if (expression instanceof MathExpressionImpl) {    MathExpressionImpl mathExpression=(MathExpressionImpl)expression;    ExpressionNode leftChildNode=(ExpressionNode)node.getChildAt(0);    mathExpression.setExpression1(addExpression(leftChildNode));    ExpressionNode rightChildNode=(ExpressionNode)node.getChildAt(1);    mathExpression.setExpression2(addExpression(rightChildNode));    return mathExpression;  }  return null;}  }
class C{  public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,menuItemId,title,description);}  }
class C{  public DoUntil doUntil(Conditional cond,Task task){  return new DoUntil(this.executor_,cond,task);}  }
class C{  private void handleTableSelectionEvent(ListSelectionEvent e){  int row=functionParameterTable.getSelectedRow();  int column=functionParameterTable.getSelectedColumn();  ProcessFunctionParameterValue value=functionParameterTableModel.getValue(row);  if (value != null) {    int count=functionParameterTableModel.getNoOfOccurences(value);    btnAdd.setEnabled(count < value.maxOccurences);    btnRemove.setEnabled((count > value.minOccurences) && (count > 1));  } else {    btnAdd.setEnabled(false);    btnRemove.setEnabled(false);  }  if (column == 3) {    String title=String.format("%s - %s : %s",value.name,Localisation.getString(RenderTransformationDialog.class,"RenderTransformationDialog.type"),value.dataType);    expressionPanel.configure(title,value.type,false);    expressionPanel.populate((Expression)value.value,value.enumValueList);    if (expressionPanel.showDialog()) {      Expression expression=expressionPanel.getExpression();      functionParameterTableModel.setValueAt(expression,row,column);    }  }}  }
class C{  public String words(Tuple2<Integer,Integer> segment){  StringBuilder sb=new StringBuilder();  for (int i=segment._1(); i < segment._2(); i++) {    sb.append(syllables[i]);    sb.append(' ');  }  return sb.toString().trim();}  }
class C{  private void internal_populateIntegerField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Integer value=Integer.valueOf(storedValue);    fieldConfigVisitor.populateIntegerField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public static boolean isDWord(Type type){  return type instanceof LongType || type instanceof DoubleType;}  }
class C{  public void unregisterEditor(RTEditText editor){  mEditors.remove(editor.getId());  editor.unregister();  updateToolbarVisibility();}  }
class C{  static String toTruncatedString(final byte[] bytes){  if (bytes == null || bytes.length == 0) {    return "";  }  try {    if (bytes.length > TRUNCATE_STRINGS_AT) {      return new String(bytes,0,TRUNCATE_STRINGS_AT) + "[... truncated. original size was " + bytes.length+ " bytes.]";    }    return new String(bytes);  } catch (  Exception e) {    return "IOUtil.toTruncatedString: " + e.getMessage();  }}  }
class C{  private boolean launchFirstRunExperience(){  final boolean isIntentActionMain=getIntent() != null && TextUtils.equals(getIntent().getAction(),Intent.ACTION_MAIN);  final Intent freIntent=FirstRunFlowSequencer.checkIfFirstRunIsNecessary(this,isIntentActionMain);  if (freIntent == null)   return false;  if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {    startActivityForResult(freIntent,FIRST_RUN_EXPERIENCE_REQUEST_CODE);  } else {    Intent newIntent=new Intent(getIntent());    newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    startActivity(newIntent);    finish();  }  return true;}  }
class C{  public static List<String> makeBestTrailElementsForTrail(HttpServletRequest request,Delegator delegator,String categoryId,String productId){  List<String> trail=CategoryWorker.getTrail(request);  List<String> trailElements=null;  if (categoryId != null) {    if (trail == null || trail.size() < 1) {      ;    } else {      ListIterator<String> li=trail.listIterator(trail.size());      while (li.hasPrevious()) {        String trailCatId=li.previous();        if (categoryId.equals(trailCatId)) {          trailElements=FastList.newInstance();          trailElements.add(categoryId);          break;        }      }      if (trailElements == null) {        li=trail.listIterator(trail.size());        while (li.hasPrevious()) {          String trailCatId=li.previous();          if (CategoryWorker.isCategoryChildOf(request,trailCatId,categoryId)) {            trailElements=FastList.newInstance();            trailElements.add(trailCatId);            trailElements.add(categoryId);            break;          }        }      }    }  } else {    if (trail == null || trail.size() < 1) {      ;    } else {      ListIterator<String> li=trail.listIterator(trail.size());      while (li.hasPrevious()) {        String trailCatId=li.previous();        if (CategoryWorker.isCategoryContainsProduct(request,trailCatId,productId)) {          trailElements=FastList.newInstance();          trailElements.add(trailCatId);          break;        }      }    }  }  return trailElements;}  }
class C{  public String taggerModelFileName(){switch (language) {case ENGLISH:    return "/export/dat/tag/en/cmm";case VIETNAMESE:  return "/export/dat/tag/vi/cmm";}return null;}  }
class C{  public String stem(String str){  if (str.length() > 0) {    char[] c=str.toCharArray();    for (int i=0; i < c.length; i++) {      if (!Character.isLetter(c[i]))       return "Invalid term";    }  } else {    return "No term entered";  }  str=step1a(str);  str=step1b(str);  str=step1c(str);  str=step2(str);  str=step3(str);  str=step4(str);  str=step5a(str);  str=step5b(str);  return str;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    put(key,value);  }  return this;}  }
class C{  public void isFilterNameUnique(String userName,String filterName,String projectName){  UserFilter existingFilter=userFilterRepository.findOneByName(userName,filterName,projectName);  BusinessRule.expect(existingFilter,Predicates.isNull()).verify(ErrorType.USER_FILTER_ALREADY_EXISTS,filterName,userName,projectName);}  }
class C{  public static Element addChildElement(Element element,String childElementName,Document document){  Element newElement=document.createElement(childElementName);  element.appendChild(newElement);  return newElement;}  }
class C{  private Expression addExpression(ExpressionNode node){  Expression expression=node.getExpression();  if (expression instanceof LiteralExpressionImpl) {    return expression;  } else   if (expression instanceof AttributeExpressionImpl) {    return expression;  } else   if (expression instanceof FunctionExpressionImpl) {    FunctionExpressionImpl functionExpression=(FunctionExpressionImpl)expression;    List<Expression> parameterlist=new ArrayList<Expression>();    for (int childIndex=0; childIndex < node.getChildCount(); childIndex++) {      ExpressionNode childNode=(ExpressionNode)node.getChildAt(childIndex);      parameterlist.add(addExpression(childNode));    }    functionExpression.setParameters(parameterlist);    return functionExpression;  } else   if (expression instanceof MathExpressionImpl) {    MathExpressionImpl mathExpression=(MathExpressionImpl)expression;    ExpressionNode leftChildNode=(ExpressionNode)node.getChildAt(0);    mathExpression.setExpression1(addExpression(leftChildNode));    ExpressionNode rightChildNode=(ExpressionNode)node.getChildAt(1);    mathExpression.setExpression2(addExpression(rightChildNode));    return mathExpression;  }  return null;}  }
class C{  public static Map<String,Object> updateElectronicText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateElectronicTextMethod(dctx,context);  return result;}  }
class C{  public DIPHardwareAddressImpl(final String pItemName,final String pFieldName) throws ConfigurationException {  this(pItemName,pFieldName,-1);}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public boolean isManufactured(boolean ignoreSupplierProducts){  List<GenericValue> supplierProducts=null;  try {    supplierProducts=product.getRelated("SupplierProduct",UtilMisc.toMap("supplierPrefOrderId","10_MAIN_SUPPL"),UtilMisc.toList("minimumOrderQuantity"),false);  } catch (  GenericEntityException gee) {    Debug.logError("Problem in BOMNode.isManufactured()",module);  }  supplierProducts=EntityUtil.filterByDate(supplierProducts,UtilDateTime.nowTimestamp(),"availableFromDate","availableThruDate",true);  return childrenNodes.size() > 0 && (ignoreSupplierProducts || UtilValidate.isEmpty(supplierProducts));}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  private static Stream<Method> extractMethods(Class clazz){  try {    Method[] methods=clazz.getMethods();    if (methods.length > 0) {      return Stream.of(methods);    }  } catch (  Exception|Error e) {    LOG.warn("Problems loading class at startup: {}",clazz,e);  }  return Stream.empty();}  }
class C{  public static void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  Object object;  StringBuilder sb=new StringBuilder();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public static double min(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return MIN.evaluate(values,begin,length);}  }
class C{  public VideoEditCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"video.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public static ProtoFile create(Model model,FileDescriptorProto proto,boolean isSource,ExtensionPool extensionPool){  return new ProtoFile(model,proto,isSource,extensionPool);}  }
class C{  private void addTask(Runnable r){  Thread tEval=new Thread(r);  tCur=tEval;  tEval.start();}  }
class C{  public ResourceEditionNode(ISVNRemoteResource resourceEdition,SVNRevision pegRevision){  this.resource=resourceEdition;  this.pegRevision=pegRevision;  if (pegRevision == null) {    pegRevision=SVNRevision.HEAD;  }  if (resource instanceof RemoteFolder) {    ((RemoteFolder)resource).setPegRevision(pegRevision);  } else   if (resource instanceof RemoteFile) {    ((RemoteFile)resource).setPegRevision(pegRevision);  }}  }
class C{  public MessagesGetHistoryAttachmentsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private void showTabMenu(StripLayoutTab anchorTab){  int tabIndex=TabModelUtils.getTabIndexById(mModel,anchorTab.getId());  TabModelUtils.setIndex(mModel,tabIndex);  View tabView=TabModelUtils.getCurrentTab(mModel).getView();  mTabMenu.setAnchorView(tabView);  int verticalOffset=-(tabView.getHeight() - (int)mContext.getResources().getDimension(R.dimen.tab_strip_height)) - ((MarginLayoutParams)tabView.getLayoutParams()).topMargin;  mTabMenu.setVerticalOffset(verticalOffset);  int horizontalOffset=Math.round((anchorTab.getDrawX() + anchorTab.getWidth()) * mContext.getResources().getDisplayMetrics().density) - mTabMenu.getWidth() - ((MarginLayoutParams)tabView.getLayoutParams()).leftMargin;  mTabMenu.setHorizontalOffset(horizontalOffset);  mTabMenu.show();}  }
class C{  public boolean canGetFloat(){  return canGet(float.class);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  NewExpr newNewExpr(RefType type){  return Jimple.v().newNewExpr(type);}  }
class C{  public static Object deserialization(String filePath){  ObjectInputStream in=null;  try {    in=new ObjectInputStream(new FileInputStream(filePath));    Object o=in.readObject();    in.close();    return o;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  ClassNotFoundException e) {    throw new RuntimeException("ClassNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(in);  }}  }
class C{  public NewsfeedGetQuery returnBanned(Boolean value){  return unsafeParam("return_banned",value);}  }
class C{  public TypeData(IServerTypeDesc serverTypeDesc,TypeData originalTypeData,TypeDataRecreationReasons reason){  if (!originalTypeData.supportsDynamicIndexing())   throw new UnsupportedOperationException();  _cacheManager=originalTypeData._cacheManager;  _nextInFifoOrder=originalTypeData._nextInFifoOrder;  m_NumRegularNotifyTemplatesStored=originalTypeData.m_NumRegularNotifyTemplatesStored;  _numDurableNotifyTemplatesStored=originalTypeData._numDurableNotifyTemplatesStored;  _supportsDynamicIndexing=true;  _typeDataFactory=originalTypeData._typeDataFactory;  _isLocalCache=originalTypeData._isLocalCache;  _isAutoGeneratedId=originalTypeData._isAutoGeneratedId;  _useConcurrentSl=originalTypeData._useConcurrentSl;  _className=originalTypeData._className;  _properties=serverTypeDesc.getTypeDesc().getProperties();  _fifoSupport=originalTypeData._fifoSupport;  _columnsOrdinalsByName=originalTypeData._columnsOrdinalsByName;  _entries=originalTypeData._entries;  _typeLock=originalTypeData._typeLock;  _hasInitialIndexes=originalTypeData._hasInitialIndexes;  _anyInitialExtendedIndex=originalTypeData._anyInitialExtendedIndex;  _isOffHeapClass=originalTypeData._isOffHeapClass;  boolean[] indexesRelatedFixedProperties=new boolean[originalTypeData._indexesRelatedFixedProperties.length];  System.arraycopy(originalTypeData._indexesRelatedFixedProperties,0,indexesRelatedFixedProperties,0,indexesRelatedFixedProperties.length);  HashSet<String> indexesRelatedDynamicProperties=new HashSet<String>(originalTypeData._indexesRelatedDynamicProperties);  _sequenceNumberGenerator=originalTypeData._sequenceNumberGenerator;  TypeDataIndex<?> sequenceNumberIndex=originalTypeData._sequenceNumberIndex;  if (reason == TypeDataRecreationReasons.DYNAMIC_INDEX_CREATION) {    final ArrayList<TypeDataIndex<?>> indexes=new ArrayList<TypeDataIndex<?>>();    final List<TypeDataIndex> compoundIndexes=new ArrayList<TypeDataIndex>(originalTypeData._compoundIndexes);    boolean anyNonFGCompoundIndex=originalTypeData._anyNonFGCompoundIndex;    int numOfExtendedIndexes=0;    _indexTable=originalTypeData._indexTable;    final HashMap<String,TypeDataIndex<?>> nonCustomIndexes=new HashMap<String,TypeDataIndex<?>>();    List<CompoundIndex> compoundIndexDefinitions=new ArrayList<CompoundIndex>(originalTypeData._compoundIndexDefinitions);    List<CompoundIndex> newCompounds=new ArrayList<CompoundIndex>();    _lastIndexCreationNumber=originalTypeData._lastIndexCreationNumber;    int numNewIndexes=0;    final Map<String,SpaceIndex> typeIndexes=serverTypeDesc.getTypeDesc().getIndexes();    for (int i=0; i < _properties.length; i++) {      PropertyInfo property=_properties[i];      _columnsOrdinalsByName.put(property.getName(),i);      SpaceIndex index=typeIndexes.get(property.getName());      if (index != null && index.getIndexType().isIndexed()) {        if (index.getIndexType() == SpaceIndexType.EXTENDED)         numOfExtendedIndexes++;        TypeDataIndex currIndex=_indexTable.get(property.getName());        boolean newIndex=currIndex == null;        if (newIndex) {          if (((ISpaceIndex)index).isUnique()) {            ISpaceIndex u=(ISpaceIndex)index;            if (_isLocalCache)             u.setUnique(false); else             throw new UnsupportedOperationException("dynamic unique indices not supported type=" + serverTypeDesc.getTypeName() + " index="+ u.getName());          }          numNewIndexes++;          if (!((ISpaceIndex)index).isMultiValuePerEntryIndex())           currIndex=_typeDataFactory.createTypeDataIndex(_typeDataFactory.getCcheManager(),getInternalIndex(index),i,_lastIndexCreationNumber + numNewIndexes,property.getType(),ISpaceIndex.FifoGroupsIndexTypes.NONE); else           currIndex=_typeDataFactory.createMultiValuePerEntryTypeDataIndex(_typeDataFactory.getCcheManager(),getInternalIndex(index),i,_lastIndexCreationNumber + numNewIndexes,((ISpaceIndex)index).getMultiValueIndexType());          if (hasSequenceNumber() && serverTypeDesc.getTypeDesc().getSequenceNumberFixedPropertyID() == i) {            sequenceNumberIndex=currIndex;          }          indexesRelatedFixedProperties[i]=true;        }        indexes.add(currIndex);        if (newIndex)         _indexTable.put(property.getName(),currIndex);        nonCustomIndexes.put(property.getName(),currIndex);      }    }    String idProperty=serverTypeDesc.getTypeDesc().getIdPropertyName();    _idPropertyIndex=idProperty != null ? _indexTable.get(idProperty) : null;    int indexPosition=_properties.length;    int numOfCustomIndexes=0;    if (typeIndexes != null) {      for (      TypeDataIndex index : originalTypeData._indexes) {        if (!index.isCustomIndex())         continue;        indexes.add(index);        indexPosition=index.getPos() + 1;        numOfCustomIndexes++;      }      for (      Entry<String,SpaceIndex> entry : typeIndexes.entrySet()) {        if (nonCustomIndexes.containsKey(entry.getKey()))         continue;        final SpaceIndex spaceIndex=entry.getValue();        if (!spaceIndex.getIndexType().isIndexed())         continue;        TypeDataIndex currIndex=_indexTable.get(spaceIndex.getName());        boolean newIndex=currIndex == null;        if (!newIndex)         continue;        if (((ISpaceIndex)spaceIndex).isUnique()) {          ISpaceIndex u=(ISpaceIndex)spaceIndex;          if (_isLocalCache)           u.setUnique(false); else           throw new UnsupportedOperationException("dynamic unique indices not supported type=" + serverTypeDesc.getTypeName() + " index="+ u.getName());        }        if (((ISpaceIndex)spaceIndex).isCompoundIndex()) {          newCompounds.add((CompoundIndex)spaceIndex);          continue;        }        numNewIndexes++;        if (!((ISpaceIndex)spaceIndex).isMultiValuePerEntryIndex())         currIndex=_typeDataFactory.createCustomTypeDataIndex(_typeDataFactory.getCcheManager(),getInternalIndex(spaceIndex),indexPosition++,_lastIndexCreationNumber + numNewIndexes,FifoGroupsIndexTypes.NONE); else         currIndex=_typeDataFactory.createCustomMultiValuePerEntryTypeDataIndex(_typeDataFactory.getCcheManager(),getInternalIndex(spaceIndex),indexPosition++,_lastIndexCreationNumber + numNewIndexes,((ISpaceIndex)spaceIndex).getMultiValueIndexType());        indexes.add(currIndex);        _indexTable.put(spaceIndex.getName(),currIndex);        numOfCustomIndexes++;        addIndexRelatedProperties(serverTypeDesc,spaceIndex,currIndex,true,indexesRelatedFixedProperties,indexesRelatedDynamicProperties);      }      for (      CompoundIndex ci : newCompounds) {        numNewIndexes++;        TypeDataIndex compound=TypeData.buildCompoundIndex(ci,_indexTable,serverTypeDesc,indexPosition++,ISpaceIndex.FifoGroupsIndexTypes.NONE,_lastIndexCreationNumber + numNewIndexes,_typeDataFactory);        indexes.add(compound);        anyNonFGCompoundIndex=true;        compoundIndexDefinitions.add(ci);        compoundIndexes.add(compound);        numOfCustomIndexes++;        if (compound.isExtendedIndex())         numOfExtendedIndexes++;        addCompundIndexRelatedProperties(serverTypeDesc,compound,true,indexesRelatedFixedProperties,indexesRelatedDynamicProperties);      }    }    _hasIndexes=_indexTable.size() != 0;    _numOfBackRefs=_indexTable.size() + numOfExtendedIndexes + 1;    _numOfCustomIndexes=numOfCustomIndexes;    TypeDataIndex<Object>[] temp_i=new TypeDataIndex[indexes.size()];    if (indexes.size() > 0)     temp_i=indexes.toArray(temp_i);    _indexes=temp_i;    if (numNewIndexes > 0)     _lastIndexPendingCreationNumber=_lastIndexCreationNumber + numNewIndexes; else     _lastIndexPendingCreationNumber=0;    _compoundIndexes=compoundIndexes;    _compoundIndexDefinitions=compoundIndexDefinitions;    _anyNonFGCompoundIndex=anyNonFGCompoundIndex;  } else   if (reason == TypeDataRecreationReasons.DYNAMIC_INDEX_CREATION_COMPLETION) {    _indexTable=originalTypeData._indexTable;    _idPropertyIndex=originalTypeData._idPropertyIndex;    _indexes=originalTypeData._indexes;    _hasIndexes=originalTypeData._hasIndexes;    _numOfBackRefs=originalTypeData._numOfBackRefs;    _numOfCustomIndexes=originalTypeData._numOfCustomIndexes;    if (originalTypeData._lastIndexPendingCreationNumber > 0)     _lastIndexCreationNumber=originalTypeData._lastIndexPendingCreationNumber; else     _lastIndexCreationNumber=originalTypeData._lastIndexCreationNumber;    _lastIndexPendingCreationNumber=0;    _compoundIndexDefinitions=originalTypeData._compoundIndexDefinitions;    _compoundIndexes=originalTypeData._compoundIndexes;    _anyNonFGCompoundIndex=originalTypeData._anyNonFGCompoundIndex;  } else   throw new UnsupportedOperationException();  _readTakeTemplates=originalTypeData._readTakeTemplates;  _notifyTemplates=originalTypeData._notifyTemplates;  _readTakeExtendedTemplates=originalTypeData._readTakeExtendedTemplates;  _notifyExtendedTemplates=originalTypeData._notifyExtendedTemplates;  _readTakeUidTemplates=originalTypeData._readTakeUidTemplates;  _notifyUidTemplates=originalTypeData._notifyUidTemplates;  _fifoGroupingIndex=originalTypeData._fifoGroupingIndex;  _allowFifoIndexScans=_fifoSupport | (_fifoGroupingIndex != null);  _uniqueIndexes=originalTypeData._uniqueIndexes;  _indexesRelatedFixedProperties=indexesRelatedFixedProperties;  _indexesRelatedDynamicProperties=indexesRelatedDynamicProperties;  _sequenceNumberIndex=sequenceNumberIndex;  queryExtensionIndexManagers=originalTypeData.queryExtensionIndexManagers;}  }
class C{  public static int copySign(int magnitude,int sign) throws MathRuntimeException {  if ((magnitude >= 0 && sign >= 0) || (magnitude < 0 && sign < 0)) {    return magnitude;  } else   if (sign >= 0 && magnitude == Integer.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);  } else {    return -magnitude;  }}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public static void convert(String inFileName,String outFileName) throws IOException {  ESTTrackReader etr=new ESTTrackReader(inFileName);  float[][] lprefc=convertData(etr.getFrames());  ESTTrackWriter etw=new ESTTrackWriter(etr.getTimes(),lprefc,"lprefc");  etw.doWriteAndClose(outFileName,etr.isBinary(),etr.isBigEndian());}  }
class C{  @Override public RolloverDescription rollover(final RollingFileManager manager) throws SecurityException {  if (maxIndex < 0) {    return null;  }  final long start=System.nanoTime();  final int fileIndex=purge(minIndex,maxIndex,manager);  if (fileIndex < 0) {    return null;  }  if (LOGGER.isTraceEnabled()) {    final double duration=(System.nanoTime() - start) / (1000.0 * 1000.0 * 1000.0);    LOGGER.trace("DefaultRolloverStrategy.purge() took {} seconds",duration);  }  final StringBuilder buf=new StringBuilder(255);  manager.getPatternProcessor().formatFileName(subst,buf,fileIndex);  final String currentFileName=manager.getFileName();  String renameTo=buf.toString();  final String compressedName=renameTo;  Action compressAction=null;  if (renameTo.endsWith(EXT_GZIP)) {    renameTo=renameTo.substring(0,renameTo.length() - EXT_GZIP.length());    compressAction=new GzCompressAction(new File(renameTo),new File(compressedName),true);  } else   if (renameTo.endsWith(EXT_ZIP)) {    renameTo=renameTo.substring(0,renameTo.length() - EXT_ZIP.length());    compressAction=new ZipCompressAction(new File(renameTo),new File(compressedName),true,compressionLevel);  }  final FileRenameAction renameAction=new FileRenameAction(new File(currentFileName),new File(renameTo),false);  return new RolloverDescriptionImpl(currentFileName,false,renameAction,compressAction);}  }
class C{  public static List<Complex> solve(double a,double b,double c){  List<Complex> result=new ArrayList<>();  if (a == 0) {    if (b != 0) {      result.add(new Complex(-c / b,0));    }  } else {    if (a < 0) {      a=-a;      b=-b;      c=-c;    }    double delta=b * b - 4 * a * c;    if (delta < 0) {      double deltaSqrt=Math.sqrt(-delta);      result.add(new Complex(-b / (2 * a),-deltaSqrt / (2 * a)));      result.add(new Complex(-b / (2 * a),deltaSqrt / (2 * a)));    } else     if (delta > 0) {      double deltaSqrt=Math.sqrt(delta);      result.add(new Complex((-b - deltaSqrt) / (2 * a),0));      result.add(new Complex((-b + deltaSqrt) / (2 * a),0));    } else {      result.add(new Complex(-b / (2 * a),0));    }  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_EX_ME(String value0){  return new SM_SYSTEM_MESSAGE(1390193,value0);}  }
class C{  private int readSurrogatesFromColumnBlock(BlocksChunkHolder blockChunkHolder,int index,DimColumnResolvedFilterInfo dimColumnEvaluatorInfo,int blockIndex){  if (dimColumnEvaluatorInfo.getDimension().isColumnar()) {    byte[] rawData=blockChunkHolder.getDimensionDataChunk()[blockIndex].getChunkData(index);    ByteBuffer byteBuffer=ByteBuffer.allocate(CarbonCommonConstants.INT_SIZE_IN_BYTE);    int dictionaryValue=CarbonUtil.getSurrogateKey(rawData,byteBuffer);    return dictionaryValue;  } else {    return readSurrogatesFromColumnGroupBlock(blockChunkHolder,index,dimColumnEvaluatorInfo,blockIndex);  }}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static final void drawRectangleFromCenter(GL2 gl,double cx,double cy,double w,double h,boolean points){  double w2=w * 0.5;  double h2=h * 0.5;  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(cx - w2,cy + h2);  gl.glVertex2d(cx + w2,cy + h2);  gl.glVertex2d(cx + w2,cy - h2);  gl.glVertex2d(cx - w2,cy - h2);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(cx - w2,cy + h2);    gl.glVertex2d(cx + w2,cy + h2);    gl.glVertex2d(cx + w2,cy - h2);    gl.glVertex2d(cx - w2,cy - h2);    gl.glEnd();  }}  }
class C{  public MaryConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static File findOrCreateDir(File parent,String dirName){  File directory=new File(parent,dirName);  if (!directory.exists()) {    directory.mkdirs();  }  return directory;}  }
class C{  public synchronized boolean addPeer(JsonRpcPeer peer){  if (mReceivingPeers.containsKey(peer)) {    return false;  }  DisconnectReceiver disconnectReceiver=new UnregisterOnDisconnect(peer);  peer.registerDisconnectReceiver(disconnectReceiver);  mReceivingPeers.put(peer,disconnectReceiver);  mReceivingPeersSnapshot=null;  if (mListener != null) {    mListener.onPeerRegistered(peer);  }  return true;}  }
class C{  protected GroupsEditManagerQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static int compileShader(@ShaderType final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compilationStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compilationStatus,0);    if (compilationStatus[0] == 0) {      Timber.e("Error compiling shader %s",GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  public void waitUntilCompletion() throws InterruptedException {  Iterator iIter=qThreads.iterator();  while (iIter.hasNext()) {    Thread tCur=(Thread)iIter.next();    if (tCur.isAlive())     tCur.join();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200960,skilltarget,value0,skillcaster,skillname);}  }
class C{  public void pathValuesToPixel(List<Path> paths){  for (int i=0; i < paths.size(); i++) {    pathValueToPixel(paths.get(i));  }}  }
class C{  protected void showModel(EpoxyModel<?> model){  showModel(model,true);}  }
class C{  public void removeFromTimeDeadband(final SourceDataTag currentTag){  if (this.equipmentLogger.isDebugEnabled()) {    this.equipmentLogger.debug(format("removeFromTimeDeadband - entering removeFromTimeDeadband(%d)..",currentTag.getId()));  }  SDTTimeDeadbandScheduler tagScheduler=this.sdtTimeDeadbandSchedulers.remove(currentTag.getId());  if (tagScheduler != null) {    this.equipmentLogger.debug("\tcancelling scheduler");    tagScheduler.cancel();    if (tagScheduler.isScheduledForSending()) {      this.equipmentLogger.debug("\tforcing scheduler to run its run() in order to send the flush buffered message (if any)");      tagScheduler.run();    }  }  if (this.equipmentLogger.isDebugEnabled()) {    this.equipmentLogger.debug(format("removeFromTimeDeadband - leaving removeFromTimeDeadband(%d)",currentTag.getId()));  }}  }
class C{  private void scheduleCacheUpdaterTask(final Long pId){  UPDATE_RECEIVED_FLAGS.put(pId,Boolean.TRUE);  if (!isCacheUpdaterRunning) {    try {      if (LOG.isTraceEnabled())       LOG.trace(pId + " scheduleCacheUpdaterTask() - Initialize new cache updater task");      timer.schedule(new CacheUpdaterTask(),BUFFER_TIMER_MILLIS,BUFFER_TIMER_MILLIS);      isCacheUpdaterRunning=true;    } catch (    IllegalStateException ise) {      LOG.error(pId + "scheduleCacheUpdaterTask() - Catched illegal state exception",ise);    }  }}  }
class C{  public OperationTest(final OperationId operationId){  this.operationId=operationId;  final List<PokemonModel> list=new ArrayList<>();  list.add(null);  pokemonList=new ObservableListWrapper<>(list);}  }
class C{  private void triggerExpiredEvent(){  if (_listener != null)   _listener.onExpired(this);}  }
class C{  public static boolean isEmpty(CharSequence str){  return (str == null || str.length() == 0);}  }
class C{  public static void skipFastAText(FileIterator it,boolean isFastA){  if (isFastA) {    while (it.hasNext() && it.peekNextByte() != '>') {      it.next();    }  } else {    if (it.hasNext()) {      it.next();    }    if (it.hasNext()) {      it.next();    }    if (it.hasNext()) {      it.next();    }  }}  }
class C{  protected void createVolume() throws Throwable {  sendContainerVolumeRequest(VolumeOperationType.CREATE);  verifyVolumeStateExists(volumeStateReference);  sendGetVolumeStateRequest();}  }
class C{  @Override public List<Map<String,String>> taskConfigs(int maxTasks){  ArrayList<Map<String,String>> configurations=new ArrayList<>();  for (int i=0; i < maxTasks; i++) {    configurations.add(fProperties);  }  return configurations;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public PagesParseWikiQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public DateColumn selectIf(IntPredicate predicate){  DateColumn column=emptyCopy();  IntIterator iterator=intIterator();  while (iterator.hasNext()) {    int next=iterator.nextInt();    if (predicate.test(next)) {      column.add(next);    }  }  return column;}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  public synchronized void start() throws Exception {  if (running) {    throw new IllegalStateException("Monitor is already running");  }  for (  FileAlterationObserver observer : observers) {    observer.initialize();  }  running=true;  if (threadFactory != null) {    thread=threadFactory.newThread(this);  } else {    thread=new Thread(this);  }  thread.start();}  }
class C{  @Override public void populateField(String value){  StyleBuilder styleBuilder=new StyleBuilder();  Font font=styleBuilder.createFont(defaultValue,DEFAULT_FONT_SIZE);  populateField(font);}  }
class C{  public void add(Character character){  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));}  }
class C{  public void initRandom(){  if (_random == null) {    try {      _random=SecureRandom.getInstance(SESSION_ID_RANDOM_ALGORITHM);    } catch (    NoSuchAlgorithmException e) {      try {        _random=SecureRandom.getInstance(SESSION_ID_RANDOM_ALGORITHM_ALT);        _weakRandom=false;      } catch (      NoSuchAlgorithmException e_alt) {        Log.getLog().warn("Could not generate SecureRandom for session-id randomness",e);        _random=new Random();        _weakRandom=true;      }    }  }  _random.setSeed(_random.nextLong() ^ System.currentTimeMillis() ^ hashCode()^ Runtime.getRuntime().freeMemory());}  }
class C{  public ResponsePacket sendPreparedStatement(String statement,Object[] values) throws SQLException {  RequestPacket packet=new RequestPacket();  packet.setModifiers(readModifiers);  packet.setType(RequestPacket.Type.PREPARED_WITH_VALUES);  packet.setStatement(statement);  packet.setPreparedValues(values);  return writeRequestPacket(packet);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_BANISHIED_FROM_GUILD_BY_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300246,value0);}  }
class C{  public int length(){  java.util.Iterator iIter=java.util.Arrays.asList(NGramGraphArray).iterator();  int iCnt=0;  while (iIter.hasNext())   iCnt+=((UniqueVertexGraph)iIter.next()).getEdgesCount();  return iCnt;}  }
class C{  public FeatureFlag forName(String name) throws BadApiRequestException {  FeatureFlag flag=NAMES_TO_VALUES.get(name.toUpperCase(Locale.ENGLISH));  return flag != null ? flag : Utils.<FeatureFlag>insteadThrowRuntime(new BadApiRequestException("Invalid feature flag: " + name));}  }
class C{  protected LeadsGetUsersQuery secret(String value){  return unsafeParam("secret",value);}  }
class C{  public ProcessingUnitContainer createContainer() throws CannotCreateContainerException {  addConfigLocation(getJettyPuResource());  if (getClusterInfo() != null) {    ClusterInfoParser.guessSchema(getClusterInfo());  }  ResourceApplicationContext applicationContext=initApplicationContext();  ClassLoader origClassLoader=Thread.currentThread().getContextClassLoader();  JettyHolder jettyHolder=null;  List<FreePortGenerator.PortHandle> portHandles=new ArrayList<FreePortGenerator.PortHandle>();  try {    try {      ClassLoaderHelper.setContextClassLoader(getJeeClassLoader(),true);    } catch (    Exception e) {    }    applicationContext.refresh();    jettyHolder=initJettyHolder(applicationContext,portHandles);    initJettyJmx(jettyHolder);    String[] filesToResolve=new String[]{"WEB-INF/web.xml","WEB-INF/jetty-web.xml","WEB-INF/jetty6-web.xml","WEB-INF/web-jetty.xml"};    for (    String fileToResolve : filesToResolve) {      try {        BeanLevelPropertiesUtils.resolvePlaceholders(getBeanLevelProperties(),new File(getDeployPath(),fileToResolve));      } catch (      IOException e) {        throw new CannotCreateContainerException("Failed to resolve properties on " + fileToResolve,e);      }    }  }  finally {    ClassLoaderHelper.setContextClassLoader(origClassLoader,true);  }  try {    setCurrentApplicationContext(applicationContext);    setCurrentBeanLevelProperties(getBeanLevelProperties());    setCurrentClusterInfo(getClusterInfo());    CommonClassLoader.getInstance().setDisableSmartGetUrl(true);    WebAppContext webAppContext=initWebAppContext(applicationContext);    HandlerContainer container=jettyHolder.getServer();    ContextHandlerCollection contextHandlerContainer=null;    Handler[] contexts=jettyHolder.getServer().getChildHandlersByClass(ContextHandlerCollection.class);    if (contexts != null && contexts.length > 0) {      contextHandlerContainer=(ContextHandlerCollection)contexts[0];    } else {      throw new IllegalStateException("No container");    }    contextHandlerContainer.addHandler(webAppContext);    if (container.isStarted() || container.isStarting()) {      origClassLoader=Thread.currentThread().getContextClassLoader();      try {        ClassLoaderHelper.setContextClassLoader(SharedServiceData.getJeeClassLoader("jetty"),true);        webAppContext.start();      } catch (      Exception e) {        throw new CannotCreateContainerException("Failed to start web app context",e);      } finally {        ClassLoaderHelper.setContextClassLoader(origClassLoader,true);      }    }    if (webAppContext.getUnavailableException() != null) {      throw new CannotCreateContainerException("Failed to start web app context",webAppContext.getUnavailableException());    }    if (webAppContext.isFailed()) {      throw new CannotCreateContainerException("Failed to start web app context (exception should be logged)");    }    JettyProcessingUnitContainer processingUnitContainer=new JettyProcessingUnitContainer(applicationContext,webAppContext,contextHandlerContainer,jettyHolder,portHandles);    logger.info("Deployed web application [" + processingUnitContainer.getJeeDetails().getDescription() + "]");    return processingUnitContainer;  } catch (  Exception e) {    try {      jettyHolder.stop();    } catch (    Exception e1) {      logger.debug("Failed to stop jetty after an error occured, ignoring",e);    }    if (e instanceof CannotCreateContainerException) {      throw ((CannotCreateContainerException)e);    }    throw new CannotCreateContainerException("Failed to start web application",e);  } finally {    setCurrentApplicationContext(null);    setCurrentBeanLevelProperties(null);    setCurrentClusterInfo(null);    CommonClassLoader.getInstance().setDisableSmartGetUrl(false);  }}  }
class C{  public Tagger(JavaSparkContext jsc){  this.jsc=jsc;}  }
class C{  public Vector2f normalize(){  float length=length();  if (length != 0) {    return divide(length);  }  return divide(1);}  }
class C{  public boolean nativeInitialised(){  return initedNative;}  }
class C{  public static void e(String msg){  if (LOG_ENABLE) {    Log.e(TAG,buildMsg(msg));  }}  }
class C{  private static void checkForUpgrades(@Nullable List<UpdatablePackage> completedChanges){  if (completedChanges == null) {    return;  }  int highestNewApiLevel=0;  for (  UpdatablePackage updated : completedChanges) {    TypeDetails details=updated.getRepresentative().getTypeDetails();    if (details instanceof DetailsTypes.PlatformDetailsType) {      int api=((DetailsTypes.PlatformDetailsType)details).getApiLevel();      if (api > highestNewApiLevel) {        highestNewApiLevel=api;      }    }  }  if (highestNewApiLevel > 0) {    PropertiesComponent.getInstance().setValue(WizardConstants.NEWLY_INSTALLED_API_KEY.name,highestNewApiLevel,-1);  }}  }
class C{  @Override public boolean isEmpty(){  if (dsc != null) {    return dsc.isEmpty();  } else {    return true;  }}  }
class C{  public void writeSizedPrefixedBytes(byte[] bytes) throws IOException {  writeSizedPrefixedBytes(bytes,0,bytes.length);}  }
class C{  private IProject[] checkout(IProject[] projects,Map<IProject,LoadInfo> infoMap,IProgressMonitor monitor) throws TeamException, MalformedURLException {  if (projects == null || projects.length == 0) {    return new IProject[0];  }  ISchedulingRule[] ruleArray=new ISchedulingRule[projects.length];  for (int i=0; i < projects.length; i++) {    ruleArray[i]=projects[i].getWorkspace().getRuleFactory().modifyRule(projects[i]);  }  ISchedulingRule rule=MultiRule.combine(ruleArray);  Job.getJobManager().beginRule(rule,monitor);  monitor.beginTask("",1000 * projects.length);  List<IProject> result=new ArrayList<IProject>();  try {    for (    IProject project : projects) {      if (monitor.isCanceled()) {        break;      }      LoadInfo info=infoMap.get(project);      if (info != null && info.checkout(new SubProgressMonitor(monitor,1000))) {        result.add(project);      }    }  }  finally {    Job.getJobManager().endRule(rule);    monitor.done();  }  return result.toArray(new IProject[result.size()]);}  }
class C{  public boolean add(Node n){  int num=n.getNumber();  if (!get(num)) {    set(num);    return true;  } else   return false;}  }
class C{  @Override protected void processLPC(LpCoeffs coeffs,double[] residual){  double gain=coeffs.getGain();  double[] frame=newResidualAudioFrames.getNextFrame();  assert frame.length == residual.length;  int excP=3;  LpCoeffs newCoeffs=LpcAnalyser.calcLPC(frame,excP);  double newResidualGain=newCoeffs.getGain();  double gainFactor=gain / newResidualGain;  Arrays.fill(residual,0);  for (int n=0; n < residual.length; n++) {    for (int i=0; i <= excP && i <= n; i++) {      residual[n]+=newCoeffs.getOneMinusA(i) * frame[n - i];    }    residual[n]*=gainFactor;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_ADD_BUDDY_REJECTED(String value0){  return new SM_SYSTEM_MESSAGE(1300886,value0);}  }
class C{  public byte[] toByteArray(){  byte[] result=new byte[count];  System.arraycopy(buf,0,result,0,count);  return result;}  }
class C{  public boolean exactMatchExists(String location){  Set<String> keys=repositories.keySet();  for (  String url : keys) {    if (url.equals(location)) {      return true;    }  }  return false;}  }
class C{  public Fraction multiply(final int i){  return new Fraction(numerator * i,denominator);}  }
class C{  public void onStart(){  mGoogleApiClient.connect();}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public boolean isReifiable(){  ASTNode$State state=state();  try {    if (isRawType())     return true;    for (int i=0; i < getNumArgument(); ++i) {      if (!getArgument(i).type().isWildcard())       return false;    }    return true;  }  finally {  }}  }
class C{  public boolean isValid(){  return (Math.abs(lat.lo()) <= S2.M_PI_2 && Math.abs(lat.hi()) <= S2.M_PI_2 && lng.isValid() && lat.isEmpty() == lng.isEmpty());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200930,skilltarget);}  }
class C{  public AddEntryTypeIndexesSpaceOperationResult(){}  }
class C{  @Override public long blocksAccessed(){  return Index.searchCost(ii.indexType(),schema().type(ii.fieldName()),tp.recordsOutput(),recordsOutput()) + recordsOutput();}  }
class C{  public AggregateEntriesSpaceOperationRequest(){}  }
class C{  public XtnInfo(ServerTransaction xtn){  m_Transaction=xtn;  setStatus(XtnStatus.UNINITIALIZED);  m_Readonly=true;  m_Active=true;  m_startTime=SystemTime.timeMillis();  _usage=1;  _lastUsageTime=m_startTime;  _onlyEmbeddedJoins=true;}  }
class C{  public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {  String sDataString=utils.loadFileToStringWithNewlines(sFilename);  setDataString(sDataString);}  }
class C{  protected int indexOfLocal(Value local){  int localIndex=origLocals.indexOf(local);  if (localIndex == -1) {    Local oldLocal=newLocalsToOldLocal.get(local);    localIndex=origLocals.indexOf(oldLocal);  }  return localIndex;}  }
class C{  public void onError(int taskId,String reason){  this.transfers.remove(taskId);  textLog.info("taskId:" + taskId + "; [Error. Transfer failed] "+ reason);}  }
class C{  public CursorIterator<T> iterate(final Txn<T> txn){  return iterate(txn,null,FORWARD);}  }
class C{  private static void verify(InvocationConstraint[] constraints,int min){  if (constraints.length < min) {    throw new IllegalArgumentException("cannot create constraint with " + (min == 1 ? "no" : ("less than " + min)) + " elements");  }  for (int i=constraints.length; --i >= 0; ) {    InvocationConstraint c=constraints[i];    if (c == null) {      throw new NullPointerException("elements cannot be null");    } else     if (c instanceof ConstraintAlternatives) {      throw new IllegalArgumentException("elements cannot be ConstraintAlternatives instances");    }  }}  }
class C{  public void addInitStmt(Stmt node){  List<Stmt> list=(parent == null || state == null) ? getInitStmtListNoTransform() : getInitStmtList();  list.addChild(node);}  }
class C{  @Override public Object[] readRow(Object[] data){  return data;}  }
class C{  private Bitmap overlayChildBadgeOnUserPicture(Bitmap userPicture,Bitmap badge){  Resources resources=getResources();  assert userPicture.getWidth() == resources.getDimensionPixelSize(R.dimen.user_picture_size);  int borderSize=resources.getDimensionPixelOffset(R.dimen.badge_border_size);  int badgeRadius=resources.getDimensionPixelOffset(R.dimen.badge_radius);  int badgedPictureWidth=resources.getDimensionPixelOffset(R.dimen.badged_user_picture_width);  int badgedPictureHeight=resources.getDimensionPixelOffset(R.dimen.badged_user_picture_height);  Bitmap badgedPicture=Bitmap.createBitmap(badgedPictureWidth,badgedPictureHeight,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(badgedPicture);  canvas.drawBitmap(userPicture,0,0,null);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  int badgeCenterX=badgedPictureWidth - badgeRadius;  int badgeCenterY=badgedPictureHeight - badgeRadius;  canvas.drawCircle(badgeCenterX,badgeCenterY,badgeRadius + borderSize,paint);  canvas.drawBitmap(badge,badgeCenterX - badgeRadius,badgeCenterY - badgeRadius,null);  return badgedPicture;}  }
class C{  public boolean isTrivial(){  return getA().size() == 1 || getB().size() == 1;}  }
class C{  public DataChangeSupport(){  changeSupport=new ChangeSupport();}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  @Override public Object decorate(ClassLoader loader,Field field){  if (field.isAnnotationPresent(Inject.class)) {    return null;  } else {    Object decoratedField=super.decorate(loader,field);    if (decoratedField instanceof WebElement) {      WebElement element=(WebElement)decoratedField;      Locatable locatable=(Locatable)decoratedField;      List<ConditionContext> fieldConditionContext=LoadableComponentsUtil.getConditionsFormField(field);      BobcatWebElementContext context=new BobcatWebElementContext(element,locatable,fieldConditionContext);      return bobcatWebElementFactory.create(context);    }    return decoratedField;  }}  }
class C{  public int size(){  return fDepth;}  }
class C{  public static String joinStrings(Collection<String> strings){  StringBuilder buf=new StringBuilder();  if (strings == null) {    throw new NullPointerException("Received null collection");  }  for (  String s : strings) {    buf.append(s);  }  return buf.toString();}  }
class C{  public Matrix translate(final float[] transformedPts){  Matrix save=new Matrix();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  return save;}  }
class C{  public boolean isWriteLockEnabled(){  return this.getBoolean(BKDL_WRITE_LOCK_ENABLED,BKDL_WRITE_LOCK_ENABLED_DEFAULT);}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds,Map<String,Object> properties){  this(type,divisionType,resolution,bytes,microseconds);  this.properties=new HashMap<String,Object>(properties);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  private void updateChildrenItems(TreeItem parent){  Item[] children=getChildren(parent);  boolean state=parent.getChecked();  for (int i=0; i < children.length; i++) {    TreeItem curr=(TreeItem)children[i];    if (curr.getData() != null && ((curr.getChecked() != state) || curr.getGrayed())) {      curr.setChecked(state);      curr.setGrayed(false);      updateChildrenItems(curr);    }  }}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  @Override public int hashCode(){  if (uri != null) {    return uri.hashCode() + ((localpart != null) ? localpart.hashCode() : 0);  }  return (rawname != null) ? rawname.hashCode() : 0;}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getScrollChildBottom();    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    final int firstTop=getScrollChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      tryOffsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int newFirstTop=getScrollChildTop();        fillUp(mFirstPosition - 1,newFirstTop - mDividerHeight);        adjustViewsUpOrDown();      }    }  }}  }
class C{  public void putGroupId(String sampleName,String id){  put(sampleName,HiddenAttribute.GroupId,id);}  }
class C{  public PagerManageImplementor(PagerManageModel model,PagerManageView view){  this.model=model;  this.view=view;}  }
class C{  private void addToMap(LocatorReg reg){  undiscoveredLocators.add(reg);  queueDiscoveryTask(reg);}  }
class C{  public static ItemStack toBukkitCopy(cn.nukkit.item.Item nukkit){  if (nukkit == null) {    return null;  }  PokkitMaterialData materialData=PokkitMaterialData.fromNukkit(nukkit.getId(),nukkit.getDamage());  Material material=materialData.getBukkitMaterial();  if (material == null) {    return null;  }  ItemStack bukkit=new ItemStack(material,nukkit.getCount(),materialData.getBukkitDamage());  CompoundTag extra=nukkit.getNamedTag();  if (extra != null) {    bukkit.setItemMeta(getItemFactory().getItemMeta(material,extra));  }  return bukkit;}  }
class C{  public boolean isAborted(){  return state == ABORTED || state == ABORTING;}  }
class C{  public static double sumOfMeanDifferences(double[] vector,double[] vector2){  double mean=sum(vector) / vector.length;  double mean2=sum(vector2) / vector2.length;  double ret=0;  for (int i=0; i < vector.length; i++) {    double vec1Diff=vector[i] - mean;    double vec2Diff=vector2[i] - mean2;    ret+=vec1Diff * vec2Diff;  }  return ret;}  }
class C{  public static int convertSpToPx(int spSize){  return Math.round((float)spSize / getDisplayDensity4Fonts());}  }
class C{  public SpaceDocument(){  this(_defaultTypeName,null);}  }
class C{  public NADClient(){  initialize();}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public Histogram histogram(){  return hist;}  }
class C{  private static void findSnapMargin(Collection<ConstraintWidget> widgets,ConstraintWidget widget,SnapCandidate candidate,boolean isVertical,ConstraintAnchor.Type sourceAnchor,ConstraintAnchor.Type targetAnchor,int margin,int slope){  if (widget instanceof Guideline) {    return;  }  ConstraintAnchor source=widget.getAnchor(sourceAnchor);  for (  ConstraintWidget w : widgets) {    if (w == widget) {      continue;    }    ConstraintAnchor target=w.getAnchor(targetAnchor);    if (target == null) {      continue;    }    ConstraintHandle sourceHandle=WidgetInteractionTargets.constraintHandle(source);    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(target);    if (sourceHandle == null || targetHandle == null) {      continue;    }    int anchorDistance=sourceHandle.getDrawX() - targetHandle.getDrawX() - margin;    if (isVertical) {      anchorDistance=sourceHandle.getDrawY() - targetHandle.getDrawY() - margin;    }    if (anchorDistance < 0) {      continue;    }    int minDistance=sourceHandle.getDistanceFrom(target.getOwner());    double distance=Math.sqrt(anchorDistance * anchorDistance + minDistance * minDistance);    if (target.getOwner() instanceof Guideline) {      distance=Math.sqrt(anchorDistance * anchorDistance);    }    if (anchorDistance < slope && distance <= candidate.distance && (ALLOWS_ALL_SNAP_MARGIN || distance < MAX_SNAP_MARGIN_DISTANCE)) {      if (candidate.target == null || (candidate.margin > margin || (candidate.target.getType() == ConstraintAnchor.Type.CENTER_X || candidate.target.getType() == ConstraintAnchor.Type.CENTER || candidate.target.getType() == ConstraintAnchor.Type.CENTER_Y))) {        candidate.distance=distance;        candidate.target=target;        candidate.source=source;        candidate.margin=margin;      }    }  }}  }
class C{  @Synchronized @SneakyThrows private void completeChallenge(Challenge challenge){  challenge.trigger();  challenge.update();  while (challenge.getStatus().equals(Status.PENDING)) {    challenge.update();    Thread.sleep(100);  }  if (challenge.getStatus().equals(Status.INVALID)) {    log.error("Challenge {} failed",challenge.getLocation());    throw new LetsencryptException("Failed due to invalid challenge");  }}  }
class C{  public boolean performOk(){  IPreferenceStore store=getPreferenceStore();  Preferences corePreferences=SVNProviderPlugin.getPlugin().getPluginPreferences();  store.setValue(ISVNUIConstants.PREF_FILETEXT_DECORATION,fileTextFormat.getText());  store.setValue(ISVNUIConstants.PREF_FOLDERTEXT_DECORATION,folderTextFormat.getText());  store.setValue(ISVNUIConstants.PREF_PROJECTTEXT_DECORATION,projectTextFormat.getText());  store.setValue(ISVNUIConstants.PREF_DATEFORMAT_DECORATION,dateFormatText.getText());  store.setValue(ISVNUIConstants.PREF_ADDED_FLAG,addedFlag.getText());  store.setValue(ISVNUIConstants.PREF_DIRTY_FLAG,dirtyFlag.getText());  store.setValue(ISVNUIConstants.PREF_EXTERNAL_FLAG,externalFlag.getText());  store.setValue(ISVNUIConstants.PREF_SHOW_DIRTY_DECORATION,imageShowDirty.getSelection());  store.setValue(ISVNUIConstants.PREF_SHOW_ADDED_DECORATION,imageShowAdded.getSelection());  store.setValue(ISVNUIConstants.PREF_SHOW_HASREMOTE_DECORATION,imageShowHasRemote.getSelection());  store.setValue(ISVNUIConstants.PREF_SHOW_NEWRESOURCE_DECORATION,imageShowNewResource.getSelection());  store.setValue(ISVNUIConstants.PREF_SHOW_EXTERNAL_DECORATION,imageShowExternal.getSelection());  corePreferences.setValue(ISVNCoreConstants.PREF_SHOW_READ_ONLY,imageShowReadOnly.getSelection());  store.setValue(ISVNUIConstants.PREF_CALCULATE_DIRTY,showDirty.getSelection());  store.setValue(ISVNUIConstants.PREF_USE_FONT_DECORATORS,enableFontDecorators.getSelection());  SVNProviderPlugin.getPlugin().getPluginPreferences().setValue(ISVNCoreConstants.PREF_RECURSIVE_STATUS_UPDATE,showDirty.getSelection());  SVNProviderPlugin.getPlugin().savePluginPreferences();  SVNLightweightDecorator.refresh();  SVNUIPlugin.getPlugin().savePluginPreferences();  return true;}  }
class C{  public static double parseDouble(char[] chars,int start,int length) throws NumberFormatException {  if (length == 0) {    throw new NumberFormatException("cannot parse empty string as double");  }  int end=start + length;  int i=start;  char c=chars[i];  if (c == 'N') {    if (match("NaN",chars,i,end)) {      return Double.NaN;    } else {      throw newNumberFormatException("cannot parse string as double",chars,start,length);    }  }  double sigNum;  if (c == '-') {    sigNum=-1D;    i++;    c=chars[i];  } else   if (c == '+') {    sigNum=1D;    i++;    c=chars[i];  } else {    sigNum=1D;  }  if (c == 'I') {    if (match("Infinity",chars,i,end)) {      return sigNum == -1 ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;    } else {      throw newNumberFormatException("cannot parse string as double",chars,start,length);    }  }  if ((c < '0' || c > '9') && c != '.') {    throw newNumberFormatException("leading digit or '.' required",chars,start,length);  }  long decimal=0;  int decimalPoint=-1;  while (true) {    int digit=c - '0';    if (digit >= 0 && digit < 10) {      long tmp=decimal * 10 + digit;      if (decimal > LONG_MAX_DIV10 || tmp < decimal) {        return Double.parseDouble(new String(chars,start,length));      }      decimal=tmp;    } else     if (c == '.' && decimalPoint == -1) {      decimalPoint=i;    } else {      break;    }    if (++i >= end) {      break;    }    c=chars[i];  }  int fractionLength=(decimalPoint >= 0) ? i - decimalPoint - 1 : 0;  int exp=0;  if (i < end) {    if (c == 'E' || c == 'e') {      c=chars[++i];      boolean isNegativeExp=(c == '-');      if ((isNegativeExp || (c == '+')) && (++i < end)) {        c=chars[i];      }      if ((c < '0') || (c > '9')) {        throw newNumberFormatException("invalid exponent",chars,start,length);      }      while (true) {        int digit=c - '0';        if ((digit >= 0) && (digit < 10)) {          int tmp=exp * 10 + digit;          if ((exp > INT_MAX_DIV10) || (tmp < exp)) {            return Double.parseDouble(new String(chars,start,length));          }          exp=tmp;        } else         break;        if (++i >= end) {          break;        }        c=chars[i];      }      if (isNegativeExp) {        exp=-exp;      }    } else {      throw newNumberFormatException("extra characters",chars,start,length);    }  }  return sigNum * toDoublePow10(decimal,exp - fractionLength);}  }
class C{  public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> posts){  super(client,"wall.getById",GetByIdExtendedResponse.class);  accessToken(actor.getAccessToken());  posts(posts);  extended(true);}  }
class C{  public static String timeFormat(long duration){  long value=duration;  value=value / 1000;  long seconds=value % 60;  value=value / 60;  long minutes=value % 60;  value=value / 60;  long hours=value % 24;  long days=value / 24;  String result="";  if (days > 0)   result=days + (days > 1 ? " days" : " day") + (hours > 0 ? ", " + hours + getHoursText(hours) : "")+ (minutes > 0 ? ", " + minutes + getMinutesText(minutes) : "")+ (seconds > 0 ? ", " + seconds + getSecondsText(seconds) : ""); else   if (hours > 0)   result=hours + getHoursText(hours) + (minutes > 0 ? ", " + minutes + getMinutesText(minutes) : "")+ (seconds > 0 ? ", " + seconds + getSecondsText(seconds) : ""); else   if (minutes > 0)   result=minutes + getMinutesText(minutes) + (seconds > 0 ? ", " + seconds + getSecondsText(seconds) : ""); else   if (seconds > 0)   result=seconds + getSecondsText(seconds); else   result="0";  return (result);}  }
class C{  public boolean textToSpeech(String text){  return voice.speak(text);}  }
class C{  private static byte readByte(boolean[] rawbits,int startIndex){  int n=rawbits.length - startIndex;  if (n >= 8) {    return (byte)readCode(rawbits,startIndex,8);  }  return (byte)(readCode(rawbits,startIndex,n) << (8 - n));}  }
class C{  PileupLocus(LocusInfo locus,char ref){  this.chrom=locus.getSequenceName();  this.pos=locus.getPosition();  this.ref=ref;  this.baseCount=new LinkedHashMap<Character,Integer>();  this.baseCount.put('A',0);  this.baseCount.put('C',0);  this.baseCount.put('G',0);  this.baseCount.put('T',0);  this.baseCount.put('N',0);  for (  RecordAndOffset recOff : locus.getRecordAndPositions()) {    if (((int)recOff.getBaseQuality()) > PileupLocus.MIN_BASE_QUAL) {      char base=Character.toUpperCase((char)recOff.getReadBase());      int count=this.baseCount.get(base) + 1;      this.baseCount.put(base,count);    }  }}  }
class C{  protected AbstractWell(final int k,final int seed){  this(k,new int[]{seed});}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String message(){  return message;}  }
class C{  public boolean hasLdapId(){  return ldapId != null && !ldapId.isEmpty();}  }
class C{  public FileWriterWithEncoding(String filename,String encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  private UInteger(int value){  this.value=value & MAX_VALUE;}  }
class C{  @Override protected void showCallbackNonExistentError(String error){  Activity activity=getActivity().get();  Tab tab=activity != null ? ((ChromeActivity)activity).getActivityTab() : null;  if (tab != null) {    String message=(error);    MessageInfoBar infobar=new MessageInfoBar(message);    infobar.setExpireOnNavigation(false);    tab.getInfoBarContainer().addInfoBar(infobar);  } else {    super.showCallbackNonExistentError(error);  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.HELLINGER);}  }
class C{  public RepositoryChanged updateGitRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String branch,boolean useCredentials){  boolean changed=false;  List<String> changedFiles=new ArrayList<>();  List<String> deletedFiles=new ArrayList<>();  Singleton.getLogger().info("Attempting to pull latest from " + repoRemoteLocation + " for "+ repoName);  try {    Repository localRepository=new FileRepository(new File(repoLocations + "/" + repoName+ "/.git"));    Ref head=localRepository.getRef("HEAD");    Git git=new Git(localRepository);    git.reset();    git.clean();    PullCommand pullCmd=git.pull();    if (useCredentials) {      pullCmd.setCredentialsProvider(new UsernamePasswordCredentialsProvider(repoUserName,repoPassword));    }    pullCmd.call();    Ref newHEAD=localRepository.getRef("HEAD");    if (!head.toString().equals(newHEAD.toString())) {      changed=true;      ObjectId oldHead=localRepository.resolve(head.getObjectId().getName() + "^{tree}");      ObjectId newHead=localRepository.resolve(newHEAD.getObjectId().getName() + "^{tree}");      ObjectReader reader=localRepository.newObjectReader();      CanonicalTreeParser oldTreeIter=new CanonicalTreeParser();      oldTreeIter.reset(reader,oldHead);      CanonicalTreeParser newTreeIter=new CanonicalTreeParser();      newTreeIter.reset(reader,newHead);      List<DiffEntry> entries=git.diff().setNewTree(newTreeIter).setOldTree(oldTreeIter).call();      for (      DiffEntry entry : entries) {        if ("DELETE".equals(entry.getChangeType().name())) {          deletedFiles.add(FilenameUtils.separatorsToUnix(entry.getOldPath()));        } else {          changedFiles.add(FilenameUtils.separatorsToUnix(entry.getNewPath()));        }      }    }  } catch (  IOException|GitAPIException|InvalidPathException ex) {    changed=false;    Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ " updateGitRepository for "+ repoName+ "\n with message: "+ ex.getMessage());  }  return new RepositoryChanged(changed,changedFiles,deletedFiles);}  }
class C{  public T remove(ServletRequest request,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  return aa.remove(request);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public GigaSpaceConfigurer(IJSpace space){  gigaSpaceFactoryBean=new GigaSpaceFactoryBean();  gigaSpaceFactoryBean.setSpace(space);}  }
class C{  @Override public Filter createFilter(){  return new IsLessThanOrEqualToExtended();}  }
class C{  @Override public boolean onPassphraseEntered(String passphrase){  if (!passphrase.isEmpty() && ProfileSyncService.get().setDecryptionPassphrase(passphrase)) {    finish();    return true;  }  return false;}  }
class C{  protected void advanceToNextPage(){  getPageDelegate().advanceToNextPage();}  }
class C{  public MarketGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  protected WallRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private static Font decodeFontElement(Document document,Node child){  String name=child.getTextContent();  NamedNodeMap attributes=child.getAttributes();  Node sizeNode=attributes.getNamedItem(FONT_SIZE);  Node styleNode=attributes.getNamedItem(FONT_STYLE);  int size=Integer.valueOf(sizeNode.getNodeValue()).intValue();  int style=Integer.valueOf(styleNode.getNodeValue()).intValue();  Font font=new Font(name,style,size);  return font;}  }
class C{  public static String decodePassword(final String value){  return ConversionUtils.base64ToString(value);}  }
class C{  public static boolean isValidName(String name){  return NameConfig.CHAR_NAME_PATTERN.matcher(name).matches();}  }
class C{  public Object findTemplatesByIndex(Context context,IServerTypeDesc typeDesc,IEntryHolder entry,MatchTarget matchTarget){  TypeData typeData=_typeDataMap.get(typeDesc);  if (typeData == null)   return null;  return findTemplatesByIndex(context,typeData,entry,matchTarget);}  }
class C{  public boolean isHidden(final String bySelector,int timeout){  return isConditionMet(not(visibilityOfElementLocated(By.cssSelector(bySelector))),timeout);}  }
class C{  public void pausePlaying(){  if (this.state == STATE.MEDIA_RUNNING && this.player != null) {    this.player.pause();    this.setState(STATE.MEDIA_PAUSED);  } else {    Log.d(LOG_TAG,"AudioPlayer Error: pausePlaying() called during invalid state: " + this.state.ordinal());    sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((spinner != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Double) {      Double newValue=(Double)undoRedoObject.getNewValue();      internalSetValue(newValue);    }  }}  }
class C{  private void internal_populateDoubleField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Double value=Double.valueOf(storedValue);    fieldConfigVisitor.populateDoubleField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public WallGetQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"wall.get",GetExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public SpaceCleanedException(String spaceName,String s){  super(spaceName,s);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_update_me);}  }
class C{  public static boolean compare(Object o1,Object o2){  if (o1 == null || o2 == null)   return o1 == o2;  if (!(o1 instanceof ReferentUuid))   return false;  if (!(o2 instanceof ReferentUuid))   return false;  return ((ReferentUuid)o1).getReferentUuid().equals(((ReferentUuid)o2).getReferentUuid());}  }
class C{  public boolean isApplicable(){  return getDoc().getNumberOfReads() > 0;}  }
class C{  public IpLogsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public double[] generatePolynomialValues(int numSamples,double a,double b){  return generatePolynomialValues(coeffs,numSamples,a,b);}  }
class C{  public static void reportStatus(int status){  RecordHistogram.recordEnumeratedHistogram("Search.IcingContextReportingStatus",status,STATUS_BOUNDARY);}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  public void rectValueToPixel(RectF r,float phaseY){  r.top*=phaseY;  r.bottom*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public boolean isInterface(){  checkLevel(HIERARCHY);  return Modifier.isInterface(this.getModifiers());}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public Builder useExpiredDataWhenNoLoaderAvailable(){  this.useExpiredDataIfLoaderNotAvailable=true;  return this;}  }
class C{  public Cleaner(String parentName,ReferenceQueue<V> queue,Map<K,ValueHolder<K,V>> entryInfos){  super(parentName + "$Cleaner");  _queue=queue;  _table=entryInfos;  setDaemon(true);}  }
class C{  public synchronized void remove(Lease lease) throws UnknownLeaseException {  Entry e=findEntry(lease);  if (!removeLeaseInRenew(e))   leases.remove(e);  calcActualRenews();  logger.log(Level.FINE,"Removed lease {0}",lease);}  }
class C{  public void assertion(AssertionError e){  fail();  logEntries.add(new AssertionFailedEntry(e));}  }
class C{  public static boolean isInstantRunCapableDeviceVersion(@NotNull AndroidVersion version){  return version.getApiLevel() >= 15;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public final boolean canSetDouble(String field){  return m_table.canSetDouble(field);}  }
class C{  private static boolean deleteResolveEBUSY(File file){  final File to=new File(file.getAbsolutePath() + System.currentTimeMillis());  file.renameTo(to);  return to.delete();}  }
class C{  public BasicProxyPreparer(boolean verify,MethodConstraints methodConstraints,Permission[] permissions){  this.verify=verify;  this.methodConstraintsSpecified=true;  this.methodConstraints=methodConstraints;  this.permissions=checkPermissions(permissions);}  }
class C{  public static JsonArray array(String... strings){  if (strings == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  String value : strings) {    array.add(value);  }  return array;}  }
class C{  public SootMethodRef makeMethodRef(SootClass declaringClass,String name,List<Type> parameterTypes,Type returnType,boolean isStatic){  return new SootMethodRefImpl(declaringClass,name,parameterTypes,returnType,isStatic);}  }
class C{  private void computeNJ(Taxa taxa,Distances dist,PhyloTree tree){  tree.clear();  try {    HashMap<String,Node> TaxaHashMap=new HashMap<>();    int nbNtax=dist.getNtax();    StringBuffer tax[]=new StringBuffer[nbNtax + 1];    for (int i=1; i <= nbNtax; i++) {      tax[i]=new StringBuffer();      tax[i].append(taxa.getLabel(i));      Node v=tree.newNode();      tree.setLabel(v,tax[i].toString());      TaxaHashMap.put(tax[i].toString(),v);    }    double h[][]=new double[nbNtax + 1][nbNtax + 1];    double b[]=new double[nbNtax + 1];    int i_min=0, j_min=0;    double temp, dist_e=0.0, dist_f=0.0;    StringBuffer tax_old_i;    StringBuffer tax_old_j;    Node v;    Edge e, f;    for (int i=0; i <= nbNtax; i++) {      h[0][i]=1.0;      h[i][0]=1.0;    }    for (int i=1; i <= nbNtax; i++) {      for (int j=1; j <= nbNtax; j++) {        if (i < j)         h[i][j]=dist.get(i,j); else         h[i][j]=dist.get(j,i);      }    }    for (int i=1; i <= nbNtax; i++) {      for (int j=1; j <= nbNtax; j++) {        b[i]+=h[i][j];      }    }    for (int actual=nbNtax; actual > 2; actual--) {      double d_min=Double.MAX_VALUE;      for (int i=1; i < nbNtax; i++) {        if (h[0][i] == 0.0)         continue;        for (int j=i + 1; j <= nbNtax; j++) {          if (h[0][j] == 0.0)           continue;          if (h[i][j] - ((b[i] + b[j]) / (actual - 2)) < d_min) {            d_min=h[i][j] - ((b[i] + b[j]) / (actual - 2));            i_min=i;            j_min=j;          }        }      }      dist_e=0.5 * (h[i_min][j_min] + b[i_min] / (actual - 2) - b[j_min] / (actual - 2));      dist_f=0.5 * (h[i_min][j_min] + b[j_min] / (actual - 2) - b[i_min] / (actual - 2));      h[j_min][0]=0.0;      h[0][j_min]=0.0;      tax_old_i=new StringBuffer(tax[i_min].toString());      tax_old_j=new StringBuffer(tax[j_min].toString());      tax[i_min].insert(0,"(");      tax[i_min].append(",");      tax[i_min].append(tax[j_min]);      tax[i_min].append(")");      tax[j_min].delete(0,tax[j_min].length());      b[i_min]=0.0;      b[j_min]=0.0;      for (int i=1; i <= nbNtax; i++) {        if (h[0][i] == 0.0)         continue;        temp=(h[i][i_min] + h[i][j_min] - dist_e - dist_f) / 2;        if (i != i_min) {          b[i]=b[i] - h[i][i_min] - h[i][j_min] + temp;        }        b[i_min]+=temp;        h[i][i_min]=temp;        b[j_min]=0.0;      }      for (int i=0; i <= nbNtax; i++) {        h[i_min][i]=h[i][i_min];        h[i][j_min]=0.0;        h[j_min][i]=0.0;      }      v=tree.newNode();      TaxaHashMap.put(tax[i_min].toString(),v);      e=tree.newEdge(TaxaHashMap.get(tax_old_i.toString()),v);      tree.setWeight(e,Math.max(dist_e,0.0));      f=tree.newEdge(TaxaHashMap.get(tax_old_j.toString()),v);      tree.setWeight(f,Math.max(dist_f,0.0));    }    for (int i=1; i <= nbNtax; i++) {      if (h[0][i] == 1.0) {        i_min=i;        i++;        for (; i <= nbNtax; i++) {          if (h[0][i] == 1.0) {            j_min=i;          }        }      }    }    tax_old_i=new StringBuffer(tax[i_min].toString());    tax_old_j=new StringBuffer(tax[j_min].toString());    tax[i_min].insert(0,"(");    tax[i_min].append(",");    tax[i_min].append(tax[j_min]);    tax[i_min].append(")");    tax[j_min].delete(0,tax[j_min].length());    e=tree.newEdge(TaxaHashMap.get(tax_old_i.toString()),TaxaHashMap.get(tax_old_j.toString()));    tree.setWeight(e,Math.max(h[i_min][j_min],0.0));  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  private void recordPushLog(String configName){  PushLog pushLog=new PushLog();  pushLog.setAppId(client.getAppId());  pushLog.setConfig(configName);  pushLog.setClient(IP4s.intToIp(client.getIp()) + ":" + client.getPid());  pushLog.setServer(serverHost.get());  pushLog.setCtime(new Date());  pushLogService.add(pushLog);}  }
class C{  public static Uuid read(InputStream in) throws IOException {  long bits0=readLong(in);  long bits1=readLong(in);  return create(bits0,bits1);}  }
class C{  public boolean needsHighlight(int index){  if (!valuesToHighlight())   return false;  for (int i=0; i < mIndicesToHighlight.length; i++)   if ((int)mIndicesToHighlight[i].getX() == index)   return true;  return false;}  }
class C{  public WatchedObject addResponseWatch(SocketChannel sock,ConnectionResource client){  return addWatch(new ResponseWatchedObject(this,sock,client));}  }
class C{  protected void addPointer(String tag,AXmlNode node){  if (!this.nodesWithTag.containsKey(tag))   this.nodesWithTag.put(tag,new ArrayList<AXmlNode>());  this.nodesWithTag.get(tag).add(node);}  }
class C{  public TypeVariable typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariable result=new TypeVariable(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  public Target(String name,Element maryxmlElement){  this.name=name;  this.maryxmlElement=maryxmlElement;}  }
class C{  protected void removeAt(int index){  _values[index]=(long)0;  super.removeAt(index);}  }
class C{  public void replaceWithUpdate(){  if (availableUpdate == null) {    return;  }  this.name=availableUpdate.name;  this.locale=availableUpdate.locale;  this.version=availableUpdate.version;  this.description=availableUpdate.description;  this.license=availableUpdate.license;  this.locations=availableUpdate.locations;  this.packageFilename=availableUpdate.packageFilename;  this.packageSize=availableUpdate.packageSize;  this.packageMD5=availableUpdate.packageMD5;  this.isSelected=availableUpdate.isSelected;  this.status=availableUpdate.status;  this.archiveFile=availableUpdate.archiveFile;  this.infoFile=availableUpdate.infoFile;  this.downloaded=availableUpdate.downloaded;  this.size=availableUpdate.size;  this.installedFilesNames=availableUpdate.installedFilesNames;  this.availableUpdate=null;  stateChanged();}  }
class C{  @Override public String resolveURI(String uri) throws IOException {  String resolved=super.resolveURI(uri);  if (resolved != null) {    return resolved;  }  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == RESOLVER) {      resolved=resolveExternalSystem(uri,e.getEntryArg(0));      if (resolved != null) {        return resolved;      }    } else     if (e.getEntryType() == URISUFFIX) {      String suffix=e.getEntryArg(0);      String result=e.getEntryArg(1);      if (suffix.length() <= uri.length() && uri.substring(uri.length() - suffix.length()).equals(suffix)) {        return result;      }    }  }  return resolveSubordinateCatalogs(Catalog.URI,null,null,uri);}  }
class C{  public NotesAddQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  public void emitWithGravity(View emiter,int gravity,int particlesPerSecond,int emitingTime){  configureEmiter(emiter,gravity);  startEmiting(particlesPerSecond,emitingTime);}  }
class C{  public final Observable<T> read(){  return Observable.defer(null);}  }
class C{  public static Map<String,Object> rebuildSolrIndex(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  HttpSolrClient client=null;  Map<String,Object> result;  GenericDelegator delegator=(GenericDelegator)dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=new Locale("de_DE");  Boolean onlyIfDirty=(Boolean)context.get("onlyIfDirty");  if (Boolean.TRUE.equals(onlyIfDirty)) {    String dataStatusId=SolrUtil.getSolrDataStatusId(delegator);    if ("SOLR_DATA_OK".equals(dataStatusId)) {      result=ServiceUtil.returnSuccess("SOLR data is already marked OK; not rebuilding");      result.put("numDocs",(int)0);      result.put("executed",Boolean.FALSE);      return result;    }  }  Boolean treatConnectErrorNonFatal=(Boolean)context.get("treatConnectErrorNonFatal");  int numDocs=0;  try {    if (UtilValidate.isNotEmpty(context.get("core")))     client=new HttpSolrClient(SolrUtil.solrUrl + "/" + context.get("core")); else     client=new HttpSolrClient(SolrUtil.solrFullUrl);    List<Map<String,Object>> solrDocs=FastList.newInstance();    List<GenericValue> products=delegator.findList("Product",null,null,null,null,true);    if (products != null) {      numDocs=products.size();    }    Debug.logInfo("Solr: Clearing solr index and rebuilding with " + numDocs + " found products",module);    Iterator<GenericValue> productIterator=products.iterator();    while (productIterator.hasNext()) {      GenericValue product=productIterator.next();      Map<String,Object> dispatchContext=ProductUtil.getProductContent(product,dctx,context);      solrDocs.add(dispatchContext);    }    client.deleteByQuery("*:*");    client.commit();    Map<String,Object> runResult=dispatcher.runSync("addListToSolrIndex",UtilMisc.toMap("fieldList",solrDocs,"userLogin",userLogin,"locale",locale,"treatConnectErrorNonFatal",treatConnectErrorNonFatal));    String runMsg=ServiceUtil.getErrorMessage(runResult);    if (UtilValidate.isEmpty(runMsg)) {      runMsg=null;    }    if (ServiceUtil.isError(runResult)) {      result=ServiceUtil.returnError(runMsg);    } else     if (ServiceUtil.isFailure(runResult)) {      result=ServiceUtil.returnFailure(runMsg);    } else {      final String statusMsg="Cleared solr index and reindexed " + numDocs + " documents";      result=ServiceUtil.returnSuccess(statusMsg);    }  } catch (  MalformedURLException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }catch (  SolrServerException e) {    if (e.getCause() != null && e.getCause() instanceof ConnectException) {      final String statusStr="Failure connecting to solr server to rebuild index; index not updated";      if (Boolean.TRUE.equals(treatConnectErrorNonFatal)) {        Debug.logWarning(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnFailure(statusStr);      } else {        Debug.logError(e,"Solr: " + statusStr,module);        result=ServiceUtil.returnError(statusStr);      }    } else {      Debug.logError(e,e.getMessage(),module);      result=ServiceUtil.returnError(e.toString());    }  }catch (  IOException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }catch (  ServiceAuthException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }catch (  ServiceValidationException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }catch (  GenericServiceException e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }  if (ServiceUtil.isSuccess(result)) {    SolrUtil.setSolrDataStatusId(delegator,"SOLR_DATA_OK");  }  result.put("numDocs",numDocs);  result.put("executed",Boolean.TRUE);  return result;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public Vector3D toSpace(Vector<Euclidean2D> vector){  return toSpace((Point<Euclidean2D>)vector);}  }
class C{  protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString(this.archive.getDisplayName().getUnformattedText(),8,6,4210752);  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected void fireEvent(HashSet<RegistryEntry> entries,Object event){  if (entries != null) {    for (    RegistryEntry registryEntry : entries) {      try {        if (registryEntry.method.getParameterTypes().length == 0) {          registryEntry.method.invoke(registryEntry.object);        } else {          registryEntry.method.invoke(registryEntry.object,event);        }      } catch (      InvocationTargetException e) {        logger.error("Target invocation method threw an exception. Bean: " + registryEntry.object + ", Method: "+ registryEntry.method,e);      }catch (      Exception e) {        logger.error("Failed to invoke target invocation method. Bean: " + registryEntry.object + ", Method: "+ registryEntry.method,e);      }    }  }}  }
class C{  public HashDataCache(DataCache<Pair<String,T>> cache){  this(cache,"SHA-512");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200640,skillcaster,skillname);}  }
class C{  public InverseHilbertMatrix(final int n){  this.n=n;}  }
class C{  @Nullable E tryReceive(){  int start=startIndex();  E e=scanAndMatch(start);  return (e == null) ? awaitMatch(start) : e;}  }
class C{  @SuppressWarnings("resource") public boolean connectServer(ServerInfo server){  Socket sock;  if (server.sock != null) {    return true;  }  try {    sock=new Socket();    sock.setReuseAddress(true);    sock.setSoTimeout(ClientGlobal.g_network_timeout);    sock.connect(server.address,ClientGlobal.g_network_timeout);    server.sock=sock;    return true;  } catch (  IOException ex) {    System.err.println("connect to server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " fail, error info: "+ ex.getMessage());    return false;  }}  }
class C{  public static List<String> delete(long uid){  List<String> list=new ArrayList<String>();  W q=W.create("uid",uid);  int s=0;  Beans<AuthToken> bs=load(q,s,10);  while (bs != null && bs.getList() != null && bs.getList().size() > 0) {    for (    AuthToken t : bs.getList()) {      String sid=t.getSid();      list.add(sid);    }    s+=bs.getList().size();    bs=load(q,s,10);  }  Helper.delete(W.create("uid",uid),AuthToken.class);  return list;}  }
class C{  private void prepareNextSentence(){  if (nextSentence != null) {    return;  }  if (i >= len) {    return;  }  while (i < len && !isSentenceStart(i)) {    i++;  }  if (i >= len) {    return;  }  int iSentenceStart=i;  while (i < len && !isSentenceEnd(i)) {    i++;  }  if (i >= len) {    return;  }  int iSentenceEnd=i;  nextSentence=new Sentence(features,iSentenceStart,iSentenceEnd);}  }
class C{  public Vec2d scale(double scalar){  this.x*=scalar;  this.y*=scalar;  return this;}  }
class C{  public DerivativeStructure(final int parameters,final int order,final double value) throws MathIllegalArgumentException {  this(parameters,order);  this.data[0]=value;}  }
class C{  @Autowired public EquipmentSenderInvalid(final EquipmentSenderFilterModule equipmentSenderFilterModule,final IProcessMessageSender processMessageSender,final EquipmentTimeDeadband equipmentTimeDeadband,final IDynamicTimeDeadbandFilterer dynamicTimeDeadbandFilterer,final EquipmentLoggerFactory equipmentLoggerFactory){  this.equipmentSenderFilterModule=equipmentSenderFilterModule;  this.processMessageSender=processMessageSender;  this.equipmentTimeDeadband=equipmentTimeDeadband;  this.dynamicTimeDeadbandFilterer=dynamicTimeDeadbandFilterer;  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());  this.dataTagValueFilter=new DataTagValueFilter(equipmentLoggerFactory);}  }
class C{  public static BigInteger pow(final BigInteger k,long e) throws MathIllegalArgumentException {  if (e < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);  }  BigInteger result=BigInteger.ONE;  BigInteger k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result=result.multiply(k2p);    }    k2p=k2p.multiply(k2p);    e>>=1;  }  return result;}  }
class C{  public static void o(int k,int w){  System.out.print("\n");  String num=Integer.toString(k);  while (num.length() < w)   num=" " + num;  System.out.print(num);  System.out.print("\n");}  }
class C{  public static void loadTestbed(){  if (!checkIfTestbedLoaded()) {    if (logger.isLoggable(Level.INFO))     logger.info("loading data");    CatalogMgr md=VanillaDb.catalogMgr();    StatMgr stat=VanillaDb.statMgr();    Transaction tx=VanillaDb.txMgr().newTransaction(Connection.TRANSACTION_SERIALIZABLE,false);    Schema sch=new Schema();    sch.addField("cid",INTEGER);    sch.addField("title",VARCHAR(20));    sch.addField("deptid",INTEGER);    md.createTable("course",sch,tx);    TableInfo ti=md.getTableInfo("course",tx);    RecordFile rf=ti.open(tx,true);    rf.beforeFirst();    while (rf.next())     rf.delete();    rf.close();    rf=ti.open(tx,true);    for (int id=0; id < courseMax; id++) {      rf.insert();      IntegerConstant cid=new IntegerConstant(id);      rf.setVal("cid",cid);      rf.setVal("title",new VarcharConstant("course" + id));      rf.setVal("deptid",new IntegerConstant(id % deptMax));    }    rf.close();    stat.getTableStatInfo(ti,tx);    sch=new Schema();    sch.addField("sid",INTEGER);    sch.addField("sname",VARCHAR(10));    sch.addField("majorid",INTEGER);    sch.addField("gradyear",INTEGER);    md.createTable("student",sch,tx);    ti=md.getTableInfo("student",tx);    rf=ti.open(tx,true);    rf.beforeFirst();    while (rf.next())     rf.delete();    rf.close();    rf=ti.open(tx,true);    for (int id=0; id < studentMax; id++) {      rf.insert();      IntegerConstant sid=new IntegerConstant(id);      rf.setVal("sid",sid);      rf.setVal("sname",new VarcharConstant("student" + id));      rf.setVal("majorid",new IntegerConstant(id % deptMax));      rf.setVal("gradyear",new IntegerConstant((id % 50) + 1960));    }    rf.close();    stat.getTableStatInfo(ti,tx);    sch=new Schema();    sch.addField("did",INTEGER);    sch.addField("dname",VARCHAR(8));    md.createTable("dept",sch,tx);    ti=md.getTableInfo("dept",tx);    rf=ti.open(tx,true);    rf.beforeFirst();    while (rf.next())     rf.delete();    rf.close();    rf=ti.open(tx,true);    for (int id=0; id < deptMax; id++) {      rf.insert();      IntegerConstant did=new IntegerConstant(id);      rf.setVal("did",did);      rf.setVal("dname",new VarcharConstant("dept" + id));    }    rf.close();    stat.getTableStatInfo(ti,tx);    sch=new Schema();    sch.addField("sectid",INTEGER);    sch.addField("prof",VARCHAR(8));    sch.addField("courseid",INTEGER);    sch.addField("yearoffered",INTEGER);    md.createTable("section",sch,tx);    ti=md.getTableInfo("section",tx);    rf=ti.open(tx,true);    rf.beforeFirst();    while (rf.next())     rf.delete();    rf.close();    rf=ti.open(tx,true);    for (int id=0; id < sectMax; id++) {      rf.insert();      IntegerConstant sectid=new IntegerConstant(id);      rf.setVal("sectid",sectid);      int profnum=id % 20;      rf.setVal("prof",new VarcharConstant("prof" + profnum));      rf.setVal("courseid",new IntegerConstant(id % courseMax));      rf.setVal("yearoffered",new IntegerConstant((id % 50) + 1960));    }    rf.close();    stat.getTableStatInfo(ti,tx);    sch=new Schema();    sch.addField("eid",INTEGER);    sch.addField("grade",VARCHAR(2));    sch.addField("studentid",INTEGER);    sch.addField("sectionid",INTEGER);    md.createTable("enroll",sch,tx);    ti=md.getTableInfo("enroll",tx);    rf=ti.open(tx,true);    rf.beforeFirst();    while (rf.next())     rf.delete();    rf.close();    rf=ti.open(tx,true);    String[] grades=new String[]{"A","B","C","D","F"};    for (int id=0; id < enrollMax; id++) {      rf.insert();      IntegerConstant eid=new IntegerConstant(id);      rf.setVal("eid",eid);      rf.setVal("grade",new VarcharConstant(grades[id % 5]));      rf.setVal("studentid",new IntegerConstant(id % studentMax));      rf.setVal("sectionid",new IntegerConstant(id % sectMax));    }    rf.close();    stat.getTableStatInfo(ti,tx);    tx.commit();    tx=VanillaDb.txMgr().newTransaction(Connection.TRANSACTION_SERIALIZABLE,false);    RecoveryMgr.recover(tx);    tx.commit();    setFlagAsLoaded();  }}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public LoggingContext(RequestLog logCtx){  this.logCtx=logCtx;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static MutableContextSet empty(){  return new MutableContextSet();}  }
class C{  public String resolveDocument() throws IOException {  catalogManager.debug.message(3,"resolveDocument");  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == DOCUMENT) {      return e.getEntryArg(0);    }  }  return resolveSubordinateCatalogs(DOCUMENT,null,null,null);}  }
class C{  public synchronized void load(JSONObject o) throws IOException {  try {    JSONObject fieldsState=(JSONObject)o.get("fields");    JSONObject top=new JSONObject();    top.put("fields",fieldsState);    Request r=new Request(null,null,top,RegisterFieldHandler.TYPE);    FinishRequest fr=((RegisterFieldHandler)globalState.getHandler("registerFields")).handle(this,r,null);    assert !Request.anythingLeft(top) : top;    fr.finish();    JSONObject settingsState=(JSONObject)o.get("settings");    r=new Request(null,null,settingsState,SettingsHandler.TYPE);    fr=((SettingsHandler)globalState.getHandler("settings")).handle(this,r,null);    fr.finish();    assert !Request.anythingLeft(settingsState) : settingsState.toString();    JSONObject liveSettingsState=(JSONObject)o.get("settings");    r=new Request(null,null,liveSettingsState,LiveSettingsHandler.TYPE);    fr=((LiveSettingsHandler)globalState.getHandler("liveSettings")).handle(this,r,null);    fr.finish();    assert !Request.anythingLeft(liveSettingsState) : liveSettingsState.toString();    suggesterSettings=(JSONObject)o.get("suggest");  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public static HouseObject<?> createNew(House house,int objectId,int objectTemplateId){  PlaceableHouseObject template=DataManager.HOUSING_OBJECT_DATA.getTemplateById(objectTemplateId);  if (template instanceof HousingChair) {    return new ChairObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingJukeBox) {    return new JukeBoxObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingMoveableItem) {    return new MoveableObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingNpc) {    return new NpcObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingPicture) {    return new PictureObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingPostbox) {    return new PostboxObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingStorage) {    return new StorageObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingUseableItem) {    return new UseableItemObject(house,objectId,template.getTemplateId());  } else   if (template instanceof HousingEmblem) {    return new EmblemObject(house,objectId,template.getTemplateId());  }  return new PassiveObject(house,objectId,template.getTemplateId());}  }
class C{  public JsonElement parse(String json) throws JsonSyntaxException {  return parse(new StringReader(json));}  }
class C{  @ObjectiveCName("add:action:name:timeout:") void add(Topic topic,Actions action,String name,int timeout){  this.add(topic,action,name,Event.ACK_TIMEOUT,this,timeout);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CANT_CAST(String value0){  return new SM_SYSTEM_MESSAGE(1300026,value0);}  }
class C{  public GroupsGetQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void addDatatransferProgressListener(OnDatatransferProgressListener listener,OCUpload ocUpload){  if (ocUpload == null || listener == null)   return;  String targetKey=buildRemoteName(ocUpload.getAccountName(),ocUpload.getRemotePath());  mBoundListeners.put(targetKey,listener);}  }
class C{  public void requestRemoveFailedNode(int nodeId){  enqueue(new RemoveFailedNodeMessageClass().doRequest(nodeId));}  }
class C{  public LogRecord(long txid,byte[] payload){  this.txid=txid;  this.payload=payload;  this.metadata=0;}  }
class C{  public void loadData(ProgressListener progressListener) throws CanceledException, IOException {  className="Total sample";  int totalReads=0;  int totalReadsUsed=0;  reference2ReadMatchPairs.clear();  Set<String> matchesSeenForGivenRead=new HashSet<>();  progressListener.setSubtask("Processing total dataset");  try (IReadBlockIterator it=doc.getMeganFile().getDataConnector().getAllReadsIterator(doc.getMinScore(),doc.getMaxExpected(),true,true)){    progressListener.setMaximum(it.getMaximumProgress());    progressListener.setProgress(0);    while (it.hasNext()) {      IReadBlock readBlock=it.next();      totalReads++;      boolean readUsed=false;      for (      IMatchBlock matchBlock : readBlock.getMatchBlocks()) {        if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {          String key=Basic.getFirstLine(matchBlock.getText());          if (!matchesSeenForGivenRead.contains(key)) {            matchesSeenForGivenRead.add(key);            List<Pair<IReadBlock,IMatchBlock>> pairs=reference2ReadMatchPairs.get(key);            if (pairs == null) {              pairs=new LinkedList<>();              reference2ReadMatchPairs.put(key,pairs);            }            pairs.add(new Pair<>(readBlock,matchBlock));            readUsed=true;          }        }      }      matchesSeenForGivenRead.clear();      progressListener.incrementProgress();      if (readUsed)       totalReadsUsed++;    }  }   System.err.println("Reads total: " + totalReads);  System.err.println("Reads used:  " + totalReadsUsed);  System.err.println("References:  " + reference2ReadMatchPairs.keySet().size());}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public boolean isExtended(){  return extended;}  }
class C{  private void degreesAndPersist(String resourceType){  if (!Sets.intersection(subtypes,CommonOLAP.analyticsElements).isEmpty()) {    throw new IllegalStateException(ErrorMessage.ILLEGAL_ARGUMENT_EXCEPTION.getMessage(this.getClass().toString()));  }  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  computer.compute(new DegreeAndPersistVertexProgram(keySpace,subtypes));}  }
class C{  protected void gameLoop(){  Graphics2D g=(Graphics2D)this.canvas.getBufferStrategy().getDrawGraphics();  AffineTransform yFlip=AffineTransform.getScaleInstance(1,-1);  AffineTransform move=AffineTransform.getTranslateInstance(400,-300);  g.transform(yFlip);  g.transform(move);  this.render(g);  g.dispose();  BufferStrategy strategy=this.canvas.getBufferStrategy();  if (!strategy.contentsLost()) {    strategy.show();  }  Toolkit.getDefaultToolkit().sync();  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  double elapsedTime=diff / NANO_TO_BASE;  this.world.update(elapsedTime);}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>endGeneralEntity: (" + name + ")");  }  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    setCharacterData(true);    if (fDocumentType != null) {      NamedNodeMap entities=fDocumentType.getEntities();      fCurrentEntityDecl=(EntityImpl)entities.getNamedItem(name);      if (fCurrentEntityDecl != null) {        if (fCurrentEntityDecl != null && fCurrentEntityDecl.getFirstChild() == null) {          fCurrentEntityDecl.setReadOnly(false,true);          Node child=fCurrentNode.getFirstChild();          while (child != null) {            Node copy=child.cloneNode(true);            fCurrentEntityDecl.appendChild(copy);            child=child.getNextSibling();          }          fCurrentEntityDecl.setReadOnly(true,true);        }        fCurrentEntityDecl=null;      }    }    fInEntityRef=false;    boolean removeEntityRef=false;    if (fCreateEntityRefNodes) {      if (fDocumentImpl != null) {        ((NodeImpl)fCurrentNode).setReadOnly(true,true);      }      if (fDOMFilter != null && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_ENTITY_REFERENCE) != 0) {        short code=fDOMFilter.acceptNode(fCurrentNode);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{            throw Abort.INSTANCE;          }case LSParserFilter.FILTER_REJECT:{          Node parent=fCurrentNode.getParentNode();          parent.removeChild(fCurrentNode);          fCurrentNode=parent;          return;        }case LSParserFilter.FILTER_SKIP:{        fFirstChunk=true;        removeEntityRef=true;        break;      }default :{      fCurrentNode=fCurrentNode.getParentNode();    }}} else {fCurrentNode=fCurrentNode.getParentNode();}}if (!fCreateEntityRefNodes || removeEntityRef) {NodeList children=fCurrentNode.getChildNodes();Node parent=fCurrentNode.getParentNode();int length=children.getLength();if (length > 0) {Node node=fCurrentNode.getPreviousSibling();Node child=children.item(0);if (node != null && node.getNodeType() == Node.TEXT_NODE && child.getNodeType() == Node.TEXT_NODE) {  ((Text)node).appendData(child.getNodeValue());  fCurrentNode.removeChild(child);} else {  node=parent.insertBefore(child,fCurrentNode);  handleBaseURI(node);}for (int i=1; i < length; i++) {  node=parent.insertBefore(children.item(0),fCurrentNode);  handleBaseURI(node);}}parent.removeChild(fCurrentNode);fCurrentNode=parent;}} else {if (fDocumentTypeIndex != -1) {int node=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);while (node != -1) {short nodeType=fDeferredDocumentImpl.getNodeType(node,false);if (nodeType == Node.ENTITY_NODE) {  String nodeName=fDeferredDocumentImpl.getNodeName(node,false);  if (nodeName.equals(name)) {    fDeferredEntityDecl=node;    break;  }}node=fDeferredDocumentImpl.getRealPrevSibling(node,false);}}if (fDeferredEntityDecl != -1 && fDeferredDocumentImpl.getLastChild(fDeferredEntityDecl,false) == -1) {int prevIndex=-1;int childIndex=fDeferredDocumentImpl.getLastChild(fCurrentNodeIndex,false);while (childIndex != -1) {int cloneIndex=fDeferredDocumentImpl.cloneNode(childIndex,true);fDeferredDocumentImpl.insertBefore(fDeferredEntityDecl,cloneIndex,prevIndex);prevIndex=cloneIndex;childIndex=fDeferredDocumentImpl.getRealPrevSibling(childIndex,false);}}if (fCreateEntityRefNodes) {fCurrentNodeIndex=fDeferredDocumentImpl.getParentNode(fCurrentNodeIndex,false);} else {int childIndex=fDeferredDocumentImpl.getLastChild(fCurrentNodeIndex,false);int parentIndex=fDeferredDocumentImpl.getParentNode(fCurrentNodeIndex,false);int prevIndex=fCurrentNodeIndex;int lastChild=childIndex;int sibling=-1;while (childIndex != -1) {handleBaseURI(childIndex);sibling=fDeferredDocumentImpl.getRealPrevSibling(childIndex,false);fDeferredDocumentImpl.insertBefore(parentIndex,childIndex,prevIndex);prevIndex=childIndex;childIndex=sibling;}if (lastChild != -1) fDeferredDocumentImpl.setAsLastChild(parentIndex,lastChild); else {sibling=fDeferredDocumentImpl.getRealPrevSibling(prevIndex,false);fDeferredDocumentImpl.setAsLastChild(parentIndex,sibling);}fCurrentNodeIndex=parentIndex;}fDeferredEntityDecl=-1;}}  }
class C{  @Override public void commit() throws MindmapsValidationException {  validateGraph();  Map<Schema.BaseType,Set<String>> modifiedConcepts=new HashMap<>();  Set<String> castings=getModifiedCastingIds();  Set<String> resources=getModifiedResourceIds();  if (castings.size() > 0)   modifiedConcepts.put(Schema.BaseType.CASTING,castings);  if (resources.size() > 0)   modifiedConcepts.put(Schema.BaseType.RESOURCE,resources);  LOG.debug("Graph is valid. Committing graph . . . ");  commitTx();  LOG.debug("Graph committed.");  getConceptLog().clearTransaction();  if (modifiedConcepts.size() > 0)   submitCommitLogs(modifiedConcepts);}  }
class C{  public synchronized void animateZoom(final Point2D p,double scale,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animateZoomAbs(pp,scale,duration);}  }
class C{  public byte[] generateMwk(){  KeyGenerator keyGen=null;  try {    keyGen=KeyGenerator.getInstance("DES");  } catch (  NoSuchAlgorithmException e) {    Debug.logError(e,module);  }  SecretKey des1=keyGen.generateKey();  SecretKey des2=keyGen.generateKey();  if (des1 != null && des2 != null) {    byte[] desByte1=des1.getEncoded();    byte[] desByte2=des2.getEncoded();    byte[] desByte3=des1.getEncoded();    try {      if (DESKeySpec.isWeak(des1.getEncoded(),0) || DESKeySpec.isWeak(des2.getEncoded(),0)) {        return generateMwk();      }    } catch (    Exception e) {      Debug.logError(e,module);    }    byte[] des3=copyBytes(desByte1,copyBytes(desByte2,desByte3,0),0);    return generateMwk(des3);  } else {    Debug.logInfo("Null DES keys returned",module);  }  return null;}  }
class C{  public boolean canFindAll(){  return true;}  }
class C{  public UpdateLeaseSpaceOperationRequest(){}  }
class C{  private Map<String,ArrayList<Integer>> beforeChange(){  if (this.listChangedListeners.isEmpty()) {    return null;  }  return this.getStructure();}  }
class C{  @Override public void beforeFirst(){  ss1.beforeFirst();  ss2.beforeFirst();}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  UnsupportedLookAndFeelException e) {    e.printStackTrace();  }  ExampleGraphics2D window=new ExampleGraphics2D();  window.setVisible(true);  window.start();}  }
class C{  private void handleAlreadyClosedException(AlreadyClosedException ace){  unexpectedExceptions.inc();  logger.error("Encountered unexpected exception when writing data into stream {} : ",name,ace);  fatalErrorHandler.notifyFatalError();}  }
class C{  public boolean findHighestTile(int x){  for (int y=CHUNK_SIZE - 1; y >= highestBlocks[x]; y--) {    if (blocks[x][y] != null && blocks[x][y] != BlockType.AIR) {      highestBlocks[x]=MathUtils.clamp(y + 1,0,Chunk.CHUNK_SIZE - 1);      return true;    }  }  return false;}  }
class C{  public ScaleImageTransform(Random random,float dx,float dy){  super(random);  this.dx=dx;  this.dy=dy;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public List<T> nearest(final double[] key,int n,final Checker<T> checker) throws KeySizeException, IllegalArgumentException {  if (n <= 0) {    return new LinkedList<T>();  }  final NearestNeighborList<KDNode<T>> nnl=getnbrs(key,n,checker);  n=nnl.getSize();  final Stack<T> nbrs=new Stack<T>();  for (int i=0; i < n; ++i) {    final KDNode<T> kd=nnl.removeHighest();    nbrs.push(kd.v);  }  return nbrs;}  }
class C{  public ArenaRewardCursor queryArenaRewardItem(long id){  return mHelper.queryArenaRewardItem(id);}  }
class C{  boolean writeClass(DataOutputStream dd){  try {    dd.writeInt((int)magic);    dd.writeShort(minor_version);    dd.writeShort(major_version);    dd.writeShort(constant_pool_count);    if (!writeConstantPool(dd))     return false;    dd.writeShort(access_flags);    dd.writeShort(this_class);    dd.writeShort(super_class);    dd.writeShort(interfaces_count);    if (interfaces_count > 0) {      int j;      for (j=0; j < interfaces_count; j++)       dd.writeShort(interfaces[j]);    }    dd.writeShort(fields_count);    writeFields(dd);    dd.writeShort(methods_count);    writeMethods(dd);    dd.writeShort(attributes_count);    if (attributes_count > 0) {      writeAttributes(dd,attributes_count,attributes);    }  } catch (  IOException e) {    G.v().out.println("IOException with " + fn + ": "+ e.getMessage());    return false;  }  return true;}  }
class C{  @Override public double[] nextVector(){  double[] random=new double[mean.length];  for (int i=0; i < random.length; ++i) {    random[i]=mean[i] + standardDeviation[i] * generator.nextNormalizedDouble();  }  return random;}  }
class C{  public static String makeUrlFull(HttpServletRequest request,HttpServletResponse response,String url){  return makeUrl(request,response,url,true,null,null);}  }
class C{  public static String uuid(){  return UUID.randomUUID().toString();}  }
class C{  @Override public boolean isPlaying(){  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  if (pmInterface != null) {    try {      return pmInterface.isPlaying(ServiceBackedMediaPlayer.this.sessionId);    } catch (    RemoteException e) {      e.printStackTrace();      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  return false;}  }
class C{  public void initGui(){  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));  VRSettings.VrOptions[] buttons=locomotionSettings;  addButtons(buttons,0);  GuiSmallButtonEx mode=new GuiSmallButtonEx(VRSettings.VrOptions.MOVE_MODE.returnEnumOrdinal(),this.width / 2 - 68,this.height / 6 + 102,VRSettings.VrOptions.MOVE_MODE,this.guivrSettings.getKeyBinding(VRSettings.VrOptions.MOVE_MODE));  mode.setEventHandler(this);  this.buttonList.add(mode);  if (mc.vrSettings.vrFreeMove)   addButtons(freeMoveSettings,134); else   addButtons(teleportSettings,134);}  }
class C{  public void add(String key,String value){  if (key == null) {    throw new NullPointerException("key");  }  if (value == null) {    throw new NullPointerException("value");  }synchronized (contexts) {    contexts.add(Maps.immutableEntry(key,value));  }}  }
class C{  @Override public void onAttach(Context context){  super.onAttach(context);  if (mTask != null) {    if (context instanceof ReceiveExternalFilesActivity) {      mTask.setListener((CopyAndUploadContentUrisTask.OnCopyTmpFilesTaskListener)context);    } else {      mTask.setListener(null);    }  }}  }
class C{  public Builder weight(Number weight){  this.weight=weight;  return this;}  }
class C{  public void zoom(float factorX,float factorY,Point center){  if (getChartDrawer().isXYLocked()) {    if (factorX == 1)     factorX=factorY; else     if (factorY == 1)     factorY=factorX;  }  if (getChartDrawer().getScrollBackReferenceRect() != null) {    if (center == null)     center=new Point((int)contentPanel.getBounds().getCenterX(),(int)contentPanel.getBounds().getCenterY());    getChartDrawer().setScrollBackWindowPoint(center);    getChartDrawer().setScrollBackReferencePoint(getChartDrawer().convertWindowToReference(center));  }  Dimension size=contentPanel.getSize();  int newWidth=Math.max(100,(Math.round(factorX * size.width)));  int newHeight=Math.max(100,(Math.round(factorY * size.height)));  size=new Dimension(newWidth,newHeight);  contentPanel.setSize(size);  contentPanel.setPreferredSize(size);  contentPanel.validate();  updateScrollPane();}  }
class C{  @Override public boolean hasFixedPropertiesArray(){  return false;}  }
class C{  public static String timeStampToString(Timestamp stamp,TimeZone tz,Locale locale){  return timeStampToString(stamp,null,tz,locale);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessInstanceEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  assertEquals(6,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.PROCESS_CREATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.PROCESS_STARTED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertTrue(event instanceof ActivitiProcessStartedEvent);  assertNull(((ActivitiProcessStartedEvent)event).getNestedProcessDefinitionId());  assertNull(((ActivitiProcessStartedEvent)event).getNestedProcessInstanceId());  listener.clearEventsReceived();  runtimeService.suspendProcessInstanceById(processInstance.getId());  runtimeService.activateProcessInstanceById(processInstance.getId());  assertEquals(4,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  listener.clearEventsReceived();  repositoryService.suspendProcessDefinitionById(processInstance.getProcessDefinitionId(),true,null);  repositoryService.activateProcessDefinitionById(processInstance.getProcessDefinitionId(),true,null);  assertEquals(4,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_SUSPENDED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_ACTIVATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNotEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  listener.clearEventsReceived();  runtimeService.updateBusinessKey(processInstance.getId(),"thekey");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  listener.clearEventsReceived();  runtimeService.deleteProcessInstance(processInstance.getId(),"Testing events");  List<ActivitiEvent> processCancelledEvents=listener.filterEvents(ActivitiEventType.PROCESS_CANCELLED);  assertEquals(1,processCancelledEvents.size());  ActivitiCancelledEvent cancelledEvent=(ActivitiCancelledEvent)processCancelledEvents.get(0);  assertEquals(ActivitiEventType.PROCESS_CANCELLED,cancelledEvent.getType());  assertEquals(processInstance.getId(),cancelledEvent.getProcessInstanceId());  assertEquals(processInstance.getId(),cancelledEvent.getExecutionId());  listener.clearEventsReceived();}  }
class C{  public BBoxExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  @Override public BKSyncLogWriter startLogSegmentNonPartitioned() throws IOException {  checkClosedOrInError("startLogSegmentNonPartitioned");  BKSyncLogWriter writer=new BKSyncLogWriter(conf,dynConf,this);  boolean success=false;  try {    writer.createAndCacheWriteHandler();    BKLogWriteHandler writeHandler=writer.getWriteHandler();    FutureUtils.result(writeHandler.lockHandler());    success=true;    return writer;  }  finally {    if (!success) {      writer.abort();    }  }}  }
class C{  @Override public boolean truncate(String fileName,long validDataEndOffset){  FileChannel source=null;  FileChannel destination=null;  boolean fileTruncatedSuccessfully=false;  String tempWriteFilePath=fileName + CarbonCommonConstants.TEMPWRITEFILEEXTENSION;  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  try {    CarbonFile tempFile=null;    if (FileFactory.isFileExist(tempWriteFilePath,fileType)) {      tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);      tempFile.delete();    }    FileFactory.createNewFile(tempWriteFilePath,fileType);    tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);    source=new FileInputStream(fileName).getChannel();    destination=new FileOutputStream(tempWriteFilePath).getChannel();    long read=destination.transferFrom(source,0,validDataEndOffset);    long totalBytesRead=read;    long remaining=validDataEndOffset - totalBytesRead;    while (remaining > 0) {      read=destination.transferFrom(source,totalBytesRead,remaining);      totalBytesRead=totalBytesRead + read;      remaining=remaining - totalBytesRead;    }    CarbonUtil.closeStreams(source,destination);    tempFile.renameForce(fileName);    fileTruncatedSuccessfully=true;  } catch (  IOException e) {    LOGGER.error("Exception occured while truncating the file " + e.getMessage());  } finally {    CarbonUtil.closeStreams(source,destination);  }  return fileTruncatedSuccessfully;}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  public int geom_runs(){  return soot.PhaseOptions.getInt(options,"geom-runs");}  }
class C{  public static String collectionToDelimitedString(Collection<String> coll,String delim,String prefix,String suffix){  if (coll == null) {    return "";  }  StringBuilder sb=new StringBuilder();  Iterator<String> it=coll.iterator();  int i=0;  while (it.hasNext()) {    if (i > 0) {      sb.append(delim);    }    sb.append(prefix).append(it.next()).append(suffix);    i++;  }  return sb.toString();}  }
class C{  public void refresh(){  getCurrentSubPolicy().refresh();}  }
class C{  public boolean isSpawned(){  return isSpawned;}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public PhotosRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"photos.restoreComment",BoolInt.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public void close(){synchronized (lock) {    if (closed) {      return;    }    if (cluster != null) {      HFactory.shutdownCluster(cluster);    }    closed=true;  }}  }
class C{  public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  public static void drawWidgetFrame(ViewTransform transform,Graphics2D g,ConstraintWidget widget,EnumSet<ANCHORS_DISPLAY> showAnchors,boolean showResizeHandles,boolean showSizeIndicator,boolean isSelected){  g.setStroke(SnapDraw.sNormalStroke);  int l=transform.getSwingX(widget.getDrawX());  int t=transform.getSwingY(widget.getDrawY());  int w=transform.getSwingDimension(widget.getDrawWidth());  int h=transform.getSwingDimension(widget.getDrawHeight());  int r=transform.getSwingX(widget.getDrawX() + widget.getDrawWidth());  int b=transform.getSwingY(widget.getDrawY() + widget.getDrawHeight());  int radius=ConnectionDraw.CONNECTION_ANCHOR_SIZE;  int radiusRect=ConnectionDraw.CONNECTION_RESIZE_SIZE;  int rectDimension=radiusRect * 2;  int midX=transform.getSwingX((int)(widget.getDrawX() + widget.getDrawWidth() / 2f));  int midY=transform.getSwingY((int)(widget.getDrawY() + widget.getDrawHeight() / 2f));  if (widget.getParent() instanceof ConstraintWidgetContainer) {    ConstraintWidgetContainer parent=(ConstraintWidgetContainer)widget.getParent();    if (widget instanceof Guideline) {      if (parent.isRootContainer()) {        drawRootGuideline(transform,g,parent,(Guideline)widget,isSelected);      }      return;    }  }  if (widget.getVisibility() == ConstraintWidget.INVISIBLE) {    g.setStroke(SnapDraw.sDashedStroke);  }  ConstraintAnchor leftAnchor=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor rightAnchor=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  ConstraintAnchor topAnchor=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor bottomAnchor=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  boolean leftAnchorIsConnected=leftAnchor.isConnected();  boolean rightAnchorIsConnected=rightAnchor.isConnected();  boolean topAnchorIsConnected=topAnchor.isConnected();  boolean bottomAnchorIsConnected=bottomAnchor.isConnected();  boolean baselineAnchorIsConnected=widget.getAnchor(ConstraintAnchor.Type.BASELINE).isConnected();  boolean centerAnchorIsConnected=(leftAnchorIsConnected && rightAnchorIsConnected && leftAnchor.getTarget() == rightAnchor.getTarget()) || (topAnchorIsConnected && bottomAnchorIsConnected && topAnchor.getTarget() == bottomAnchor.getTarget());  if (showResizeHandles) {    g.fillRect(l - radiusRect,t - radiusRect,rectDimension,rectDimension);    g.fillRect(r - radiusRect,t - radiusRect,rectDimension,rectDimension);    g.fillRect(l - radiusRect,b - radiusRect,rectDimension,rectDimension);    g.fillRect(r - radiusRect,b - radiusRect,rectDimension,rectDimension);    if (showSizeIndicator) {      ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(widget.getWidth()),l,r,t - 20);      ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(widget.getHeight()),l - 20,t,b);    }  }  boolean displayAllAnchors=showAnchors.contains(ANCHORS_DISPLAY.ALL);  boolean showLeftAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.LEFT) || showAnchors.contains(ANCHORS_DISPLAY.HORIZONTAL);  boolean showRightAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.RIGHT) || showAnchors.contains(ANCHORS_DISPLAY.HORIZONTAL);  boolean showTopAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.TOP) || showAnchors.contains(ANCHORS_DISPLAY.VERTICAL);  boolean showBottomAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.BOTTOM) || showAnchors.contains(ANCHORS_DISPLAY.VERTICAL);  boolean showCenterAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.CENTER);  boolean showBaselineAnchor=displayAllAnchors || showAnchors.contains(ANCHORS_DISPLAY.BASELINE);  if (!showAnchors.contains(ANCHORS_DISPLAY.NONE) && showAnchors.contains(ANCHORS_DISPLAY.CONNECTED)) {    showLeftAnchor|=leftAnchorIsConnected;    showRightAnchor|=rightAnchorIsConnected;    showTopAnchor|=topAnchorIsConnected;    showBottomAnchor|=bottomAnchorIsConnected;    showCenterAnchor|=centerAnchorIsConnected;    showBaselineAnchor|=baselineAnchorIsConnected;  }  if (showBaselineAnchor && !(widget instanceof ConstraintWidgetContainer) && widget.getBaselineDistance() > 0) {    int baselineY=transform.getSwingY(WidgetInteractionTargets.constraintHandle(widget.getAnchor(ConstraintAnchor.Type.BASELINE)).getDrawY());    g.drawLine(l,baselineY,r,baselineY);  }  boolean horizontalSpring=widget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.ANY;  boolean verticalSpring=widget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.ANY;  Graphics2D g2=(Graphics2D)g.create();  if (widget instanceof ConstraintWidgetContainer) {    g2.setStroke(SnapDraw.sLongDashedStroke);    if (widget instanceof ConstraintTableLayout) {      drawTableLayoutGuidelines(transform,g2,(ConstraintTableLayout)widget);    }  }  if (!widget.isRootContainer() && (horizontalSpring || verticalSpring)) {    int x=l;    int y=t;    Stroke previousStroke=g.getStroke();    if (baselineAnchorIsConnected) {      g2.setStroke(ConnectionDraw.sSpreadDashedStroke);    }    if (horizontalSpring) {      if (showTopAnchor) {        drawHorizontalZigZagLine(g2,l,midX - radius,t,ZIGZAG,0);        drawHorizontalZigZagLine(g2,midX + radius,r,t,ZIGZAG,0);      } else {        drawHorizontalZigZagLine(g2,l,r,t,ZIGZAG,0);      }      if (showBottomAnchor) {        drawHorizontalZigZagLine(g2,l,midX - radius,b,-ZIGZAG,0);        drawHorizontalZigZagLine(g2,midX + radius,r,b,-ZIGZAG,0);      } else {        drawHorizontalZigZagLine(g2,l,r,b,-ZIGZAG,0);      }    } else {      g2.drawLine(x,y,x + w,y);      g2.drawLine(x,y + h,x + w,y + h);    }    g2.setStroke(previousStroke);    if (verticalSpring) {      if (showLeftAnchor) {        drawVerticalZigZagLine(g2,l,t,midY - radius,ZIGZAG,0);        drawVerticalZigZagLine(g2,l,midY + radius,b,ZIGZAG,0);      } else {        drawVerticalZigZagLine(g2,l,t,b,ZIGZAG,0);      }      if (showRightAnchor) {        drawVerticalZigZagLine(g2,r,t,midY - radius,-ZIGZAG,0);        drawVerticalZigZagLine(g2,r,midY + radius,b,-ZIGZAG,0);      } else {        drawVerticalZigZagLine(g2,r,t,b,-ZIGZAG,0);      }    } else {      g2.drawLine(x,y,x,y + h);      g2.drawLine(x + w,y,x + w,y + h);    }  } else {    Stroke previousStroke=g.getStroke();    if (baselineAnchorIsConnected) {      g2.setStroke(ConnectionDraw.sSpreadDashedStroke);    }    if (showTopAnchor) {      g2.drawLine(l,t,midX - radius,t);      g2.drawLine(midX + radius,t,r,t);    } else {      g2.drawLine(l,t,r,t);    }    if (showBottomAnchor) {      g2.drawLine(l,b,midX - radius,b);      g2.drawLine(midX + radius,b,r,b);    } else {      g2.drawLine(l,b,r,b);    }    g2.setStroke(previousStroke);    if (showLeftAnchor) {      g2.drawLine(l,t,l,midY - radius);      g2.drawLine(l,midY + radius,l,b);    } else {      g2.drawLine(l,t,l,b);    }    if (showRightAnchor) {      g2.drawLine(r,t,r,midY - radius);      g2.drawLine(r,midY + radius,r,b);    } else {      g2.drawLine(r,t,r,b);    }  }  g2.dispose();  if (DEBUG) {    g.drawLine(l,t,r,b);    g.drawLine(l,b,r,t);  }  g.setStroke(SnapDraw.sNormalStroke);}  }
class C{  @Nullable private static String guessBinaryPath(){  ByteArrayOutputStream stdout=new ByteArrayOutputStream();  int retVal=ExternalTask.builder().args("which","bazel").stdout(stdout).build().run();  if (retVal != 0) {    return null;  }  return stdout.toString().trim();}  }
class C{  public int readInt(){  return (readShort() << 16) | (readShort() & 0xFFFF);}  }
class C{  private void onInbox(int resultCode,Intent data){  if (resultCode != Activity.RESULT_OK) {    if (data != null && data.hasExtra(Multiplayer.EXTRA_INVITATION)) {      Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);      onInvitationRemoved(invitation.getInvitationId());    }    if (future != null) {      future.happen();      future=null;    }    updateInvites();    return;  }  final RoomController c=controller;  if (c != null) {    throw new IllegalStateException("tried to create new game, but there was already another!");  }  Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);  joinRoom(invitation);  updateInvites();}  }
class C{  public void train(Set<String> sFileNames){  Iterator<String> iFile=sFileNames.iterator();  while (iFile.hasNext()) {    String sText=utils.loadFileToString(iFile.next());    train(sText);  }}  }
class C{  private Map<String,SpaceConfig> createSpaceSchemasMap(){  if (_allSpaceSchemasMap == null) {    final HashMap<String,SpaceConfig> allSpaceSchemasMap=new HashMap<String,SpaceConfig>();    try {      for (int i=0; i < ALL_SCHEMAS_ARRAY.length; i++) {        SchemaProperties schemaProperties=ResourceLoader.findSpaceSchema(ALL_SCHEMAS_ARRAY[i]);        InputStream predefinedSchemaIs=schemaProperties.getInputStream();        Properties props=JProperties.convertXML(predefinedSchemaIs);        SpaceConfig spaceConfig=null;        try {          spaceConfig=SpaceConfigFactory.createSpaceConfig(props,null,_containerName,true,schemaProperties.getFullPath());        } catch (        SpaceConfigurationException exc) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,"An exception occurred while loading space configuration for container: " + _containerName,exc);          }        }        if (spaceConfig != null)         allSpaceSchemasMap.put(spaceConfig.getSchemaName(),spaceConfig);      }      String schemasDirPath=SystemInfo.singleton().locations().config() + File.separator + SCHEMAS_FOLDER;      File schemasDir=new File(schemasDirPath);      String[] allSchemaFiles=schemasDir.list();      if (allSchemaFiles != null) {        int filesNum=allSchemaFiles.length;        for (int i=0; i < filesNum; i++) {          String fileName=allSchemaFiles[i];          if (fileName.endsWith(SPACE_SCHEMA_FILE_SUFFIX)) {            String schemaName=fileName.substring(0,fileName.indexOf(SPACE_SCHEMA_FILE_SUFFIX));            if (!allSpaceSchemasMap.containsKey(schemaName)) {              String schemaFilePath=schemasDirPath + File.separator + fileName;              String fullSpaceSchemaLocation="[" + SchemaProperties.getHostName() + "] "+ schemaFilePath;              File schemaFile=new File(schemaFilePath);              FileInputStream fis=new FileInputStream(schemaFile);              Properties props=JProperties.convertXML(fis,true,_customProperties);              SpaceConfig spaceConfig=null;              try {                spaceConfig=SpaceConfigFactory.createSpaceConfig(props,null,_containerName,true,fullSpaceSchemaLocation);              } catch (              SpaceConfigurationException exc) {                if (_logger.isLoggable(Level.SEVERE)) {                  _logger.log(Level.SEVERE,"An exception occurred while loading space configuration for container: " + _containerName,exc);                }              }              if (spaceConfig != null) {                spaceConfig.setSchemaName(schemaName);                allSpaceSchemasMap.put(schemaName,spaceConfig);              }            }          }        }      }    } catch (    Exception ex) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,ex.toString(),ex);      }    }    _allSpaceSchemasMap=allSpaceSchemasMap;  }  return _allSpaceSchemasMap;}  }
class C{  public SecurityConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public Builder addColumnsString(String... columnNames){  for (  String s : columnNames)   addColumnString(s);  return this;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  private int klattRule0(Element segment){  return getPropertyAsInteger("rule0.all");}  }
class C{  private void addHandler(Object handler){  if (handler == null)   return;  if (handler instanceof IVideoProducer)   addVideoProducer((IVideoProducer)handler); else   if (handler instanceof IAudioProducer)   addAudioProducer((IAudioProducer)handler); else   if (handler instanceof ICommandHandler)   addCommandHandler((ICommandHandler)handler); else   if (handler instanceof IObservationProducer)   addObservationProducer((IObservationProducer)handler); else   if (handler instanceof IRewardProducer)   addRewardProducer((IRewardProducer)handler); else   if (handler instanceof IWorldGenerator)   addWorldGenerator((IWorldGenerator)handler); else   if (handler instanceof IWorldDecorator)   addWorldDecorator((IWorldDecorator)handler); else   if (handler instanceof IWantToQuit)   addQuitProducer((IWantToQuit)handler); else   this.failedHandlers+=handler.getClass().getSimpleName() + " isn't of a recognised handler type.\n";}  }
class C{  private void fixMaxRepresentationIfNecessary(){  if (!"AquaComboBoxUI".equals(getUI().getClass().getSimpleName())) {    return;  }  JButton arrowButton=UIUtil.findComponentOfType(this,JButton.class);  if (arrowButton == null) {    return;  }  try {    for (    Field field : arrowButton.getClass().getDeclaredFields()) {      field.setAccessible(true);      if (field.getGenericType() == CellRendererPane.class) {        field.set(arrowButton,new DummyCellRendererPane());        break;      }    }  } catch (  Throwable ignore) {  }}  }
class C{  public NotesRestoreCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public Builder draggable(Boolean draggable){  this.draggable=draggable;  return this;}  }
class C{  @Override public List<WebElement> findElements(){  return scopeFactory.createLocator(scopeField).findElements().stream().flatMap(null).collect(toList());}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  @Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {  if (sourceIndex > vMLSAFeaturesReader.getNumberOfUnits() || targetIndex > vMLSAFeaturesReader.getNumberOfUnits()) {    throw new IllegalArgumentException("requesting unit should not be more than number of units");  }  if (sourceIndex < 0 || targetIndex < 0) {    throw new IllegalArgumentException("requesting unit index should not be less than zero");  }  boolean[] voiced=vMLSAFeaturesReader.getVoicedFrames(sourceIndex);  double[][] mgc=vMLSAFeaturesReader.getUnitMGCs(sourceIndex);  double[][] strengths=vMLSAFeaturesReader.getUnitStrengths(sourceIndex);  double[] lf0=null;  if (!this.imposePolynomialContour) {    lf0=MathUtils.arrayResize(vMLSAFeaturesReader.getUnitLF0(targetIndex),voiced.length);  } else {    double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);    double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);    if (targetF0coeffs == null || sourceF0coeffs == null) {      return reSynthesize(sourceIndex,aft);    }    if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {      return reSynthesize(sourceIndex,aft);    }    double[] f0Contour=Polynomial.generatePolynomialValues(targetF0coeffs,voiced.length,0,1);    lf0=new double[f0Contour.length];    for (int i=0; i < f0Contour.length; i++) {      lf0[i]=Math.log(f0Contour[i]);    }  }  return synthesizeUsingMLSAVocoder(mgc,strengths,lf0,voiced,aft);}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public void syncUser(String username) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator syncUser()",module);}  }
class C{  public void flushNew(){  oldSet.addAll(newSet,null);  newSet=G.v().newSetFactory.newSet(type,pag);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public TextFormatForTest registerAnyInstance(String typeUrl,Message defaultInstance){  anyConverterRegistry.put(typeUrl,defaultInstance);  return this;}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;    listener=new OnRequestUsersListener(c,page,refresh);    model.getService().searchUsers(model.getSearchQuery(),page,listener);  }}  }
class C{  static protected void registerNonXS(String name){  if (Token.nonxs == null)   Token.nonxs=new Hashtable();  Token.nonxs.put(name,name);}  }
class C{  static void parse(Map<Application.Name,List<List<String>>> body){  Date now=new Date();  DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXX");  String timestamp=df.format(now);  for (  List<List<String>> submissions : body.values()) {    for (    List<String> submission : submissions) {      if (submission.get(0) == null) {        submission.set(0,timestamp);      }    }  }}  }
class C{  public static void saveCredentialsToProperties(){  List<String> list=new LinkedList<>();  for (  String server : server2Credentials.keySet()) {    Pair<String,String> pair=server2Credentials.get(server);    String user=pair.get1();    String encodedPassword=Base64.encodeBase64String(pair.get2().getBytes());    list.add(server + "::" + user+ "::"+ encodedPassword);  }  ProgramProperties.put("MeganServerCredentials",list.toArray(new String[list.size()]));}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  private static final boolean hasWildcard(String s){  String test=s.replace("\\*","").replace("\\?","");  return (test.contains("*") || test.contains("?"));}  }
class C{  protected synchronized void startAuthenticationFlow() throws AuthenticationException {  logger.debug("Getting authenticated session");  logger.debug("Start by loading up the login form to get a valid unauthenticated session and CSRF token");  ResponseEntity<String> loginResponseEntity=restTemplateForAuthenticationFlow.getForEntity(authRestTemplate.getURIForResource(formLoginConfig.getLoginFormPath()),String.class);  latestCsrfToken=getCsrfTokenFromLoginHtml(loginResponseEntity.getBody());  latestSessionIdForLatestCsrfToken=getAuthenticationSessionIdFromCookieStore();  logger.debug("Update CSRF token for interceptor ({}) from login form",latestCsrfToken.getToken());  MultiValueMap<String,Object> loginPostParams=new LinkedMultiValueMap<>();  loginPostParams.add("username",credentialProvider.getUsername());  loginPostParams.add("password",credentialProvider.getPassword());  logger.debug("Post to login url to startAuthenticationFlow with user={}, pwd={}",credentialProvider.getUsername(),credentialProvider.getPassword());  ResponseEntity<String> postLoginResponseEntity=restTemplateForAuthenticationFlow.postForEntity(authRestTemplate.getURIForResource(formLoginConfig.getLoginFormPath()),loginPostParams,String.class);  URI locationURI=URI.create(postLoginResponseEntity.getHeaders().get("Location").get(0));  String expectedLocation="/" + formLoginConfig.getLoginRedirectPath();  if (postLoginResponseEntity.getStatusCode().equals(HttpStatus.FOUND) && expectedLocation.equals(locationURI.getPath())) {    latestCsrfToken=getCsrfTokenFromEndpoint(authRestTemplate.getURIForResource(formLoginConfig.getCsrfTokenPath()));    latestSessionIdForLatestCsrfToken=getAuthenticationSessionIdFromCookieStore();    logger.debug("Update CSRF token interceptor in AuthRestTempplate ({})",latestCsrfToken.getToken());  } else {    throw new SessionAuthenticationException("Authentication failed.  Post login status code = " + postLoginResponseEntity.getStatusCode() + ", location = ["+ locationURI.getPath()+ "], expected location = ["+ formLoginConfig.getLoginRedirectPath()+ "]");  }}  }
class C{  public void sendMessage(String message){  skype.sendGroupMessage(this,message);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  hasSurface=false;  inactivityTimer=new InactivityTimer(getActivity());}  }
class C{  public void add(String expr,ColorAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public void validate() throws ConfigurationException {  if (hardwareAddress == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Hardware address null. Command Tag not valid.");  }  hardwareAddress.validate();}  }
class C{  public boolean containsGrammar(XMLGrammarDescription desc){synchronized (fGrammars) {    int hash=hashCode(desc);    int index=(hash & 0x7FFFFFFF) % fGrammars.length;    for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {      if ((entry.hash == hash) && equals(entry.desc,desc)) {        return true;      }    }    return false;  }}  }
class C{  public void addToContinueList(String labelContinued,DavaFlowSet<T> set){  List<DavaFlowSet<T>> labelsContinueList=continueList.get(labelContinued);  if (labelsContinueList == null) {    labelsContinueList=new ArrayList<DavaFlowSet<T>>();    labelsContinueList.add(set);    continueList.put(labelContinued,labelsContinueList);  } else {    continueList.put(labelContinued,addIfNotDuplicate(labelsContinueList,set));  }}  }
class C{  public IdsQuery(Class<T> type,Object[] ids,Object routing){  this(type.getName(),ids,routing,null,QueryResultType.DEFAULT);}  }
class C{  public boolean isAskForUsername(){  return askForUsername;}  }
class C{  public FaveAddLinkQuery text(String value){  return unsafeParam("text",value);}  }
class C{  private ArrayList<Triplet<String,String,String>> computeTriangluation(SampleAttributeTable sampleAttributeTable,String attributeThatDefinesBiologicalSamples){  final ArrayList<Triplet<String,String,String>> triangles=new ArrayList<>();  for (int i=0; i < 50; i++) {    triangles.clear();    final Map<Object,LinkedList<String>> key2set=new HashMap<>();    final Map<Object,Integer> key2pairs=new HashMap<>();    for (    String sample : sampleAttributeTable.getSampleOrder()) {      final Object key=sampleAttributeTable.get(sample,attributeThatDefinesBiologicalSamples);      if (key == null)       throw new IllegalArgumentException("No value for sample=" + sample + " and attribute="+ attributeThatDefinesBiologicalSamples);      LinkedList<String> set=key2set.get(key);      if (set == null) {        set=new LinkedList<>();        key2set.put(key,set);        key2pairs.put(key,0);      }      set.add(sample);    }    for (    LinkedList<String> set : key2set.values()) {      if (set.size() < 2)       throw new IllegalArgumentException("Too few samples for attribute=" + attributeThatDefinesBiologicalSamples + ": "+ set.size());    }    final List<Object> allKeys=new LinkedList<>(key2set.keySet());    final List<Object> allKeysForDoubletOrMoreSets=new LinkedList<>(key2set.keySet());    final List<Object> allKeysForSingletonSets=new LinkedList<>();    final Random random=new Random();    while (allKeysForDoubletOrMoreSets.size() > 0 && (2 * allKeysForDoubletOrMoreSets.size() + allKeysForSingletonSets.size()) > 2) {      Object key1=allKeys.get(random.nextInt(allKeys.size()));      if (allKeysForSingletonSets.contains(key1)) {        final Object key2=allKeysForDoubletOrMoreSets.get(random.nextInt(allKeysForDoubletOrMoreSets.size()));        key2pairs.put(key2,key2pairs.get(key2) + 1);        final String sample1=key2set.get(key2).remove(random.nextInt(key2set.get(key2).size()));        final String sample2=key2set.get(key2).remove(random.nextInt(key2set.get(key2).size()));        final String sample3=key2set.get(key1).remove(0);        triangles.add(new Triplet<>(sample1,sample2,sample3));        allKeysForSingletonSets.remove(key1);        allKeys.remove(key1);        if (key2set.get(key2).size() < 2) {          allKeysForDoubletOrMoreSets.remove(key2);          if (key2set.get(key2).size() == 1)           allKeysForSingletonSets.add(key2); else           allKeys.remove(key2);        }      } else {        Object key2;        do {          key2=allKeys.get(random.nextInt(allKeys.size()));        } while (key2 == key1);        final boolean pair1=(allKeysForSingletonSets.contains(key2) || key2pairs.get(key1) < key2pairs.get(key2) || (key2pairs.get(key1).equals(key2pairs.get(key2)) && random.nextBoolean()));        if (!pair1) {          Object tmp=key1;          key1=key2;          key2=tmp;        }        final String sample1=key2set.get(key1).remove(random.nextInt(key2set.get(key1).size()));        final String sample2=key2set.get(key1).remove(random.nextInt(key2set.get(key1).size()));        final String sample3=key2set.get(key2).remove(random.nextInt(key2set.get(key2).size()));        triangles.add(new Triplet<>(sample1,sample2,sample3));        key2pairs.put(key1,key2pairs.get(key1) + 1);        if (key2set.get(key1).size() < 2) {          allKeysForDoubletOrMoreSets.remove(key1);          if (key2set.get(key1).size() == 1 && !allKeysForSingletonSets.contains(key1))           allKeysForSingletonSets.add(key1);          if (key2set.get(key1).size() == 0) {            allKeysForSingletonSets.remove(key1);            allKeys.remove(key1);          }        }        if (key2set.get(key2).size() < 2) {          allKeysForDoubletOrMoreSets.remove(key2);          if (key2set.get(key2).size() == 1 && !allKeysForSingletonSets.contains(key2))           allKeysForSingletonSets.add(key2);          if (key2set.get(key2).size() == 0) {            allKeysForSingletonSets.remove(key2);            allKeys.remove(key2);          }        }      }    }    if ((allKeysForDoubletOrMoreSets.size() == 0 || key2set.get(allKeysForDoubletOrMoreSets.get(0)).size() < 3) && allKeysForSingletonSets.size() < 3)     break;  }  return triangles;}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  private Object readResolve(){  return val ? YES : NO;}  }
class C{  private String readAllContent(BufferedReader r) throws IOException {  StringBuilder result=new StringBuilder();  String line;  while ((line=r.readLine()) != null) {    result.append(line).append("\n");  }  return result.toString();}  }
class C{  public String toolbarTitle(int index){switch (index) {case Constants.ID_DRAWER_PLACES:    return Constants.DRAWER_PLACES;case Constants.ID_DRAWER_NATURE:  return Constants.DRAWER_NATURE;case Constants.ID_DRAWER_HALL:return Constants.DRAWER_HALL;case Constants.ID_DRAWER_ABOUT:return Constants.DRAWER_ABOUT;case Constants.ID_DRAWER_SETTINGS:return Constants.DRAWER_SETTINGS;default :return Constants.DRAWER_WRONG;}}  }
class C{  private static void deleteCacheFile(final File cacheFile){  try {    if (cacheFile.delete()) {      LOG.warn(String.format(MSG_CACHE_FILE_IS_DAMAGED_AND_DELETED,cacheFile.getPath()));    } else {      LOG.warn(String.format(MSG_CACHE_FILE_IS_DAMAGED,cacheFile.getPath()));    }  } catch (  final Exception e) {    LOG.warn(String.format(MSG_CACHE_FILE_IS_DAMAGED,cacheFile.getPath()));  }}  }
class C{  protected final boolean removeInternal(Tuple t){  return (m_tuples.remove(t));}  }
class C{  @Override public void refresh1(boolean[] data){  if (mode == Constant.MODE_SHOW_DATA_OF_THIS_MONTH) {    calendar=Calendar.getInstance();    selectedYear=calendar.get(Calendar.YEAR);    selectedMonth=calendar.get(Calendar.MONTH) + 1;    calendar.set(Calendar.DAY_OF_MONTH,1);    for (int i=1; i <= daysOfCurrentMonth(); i++) {      if (i < data.length) {        this.data[i]=data[i];      } else {        this.data[i]=false;      }    }    initial();    invalidate();    if (onRefreshListener != null) {      onRefreshListener.onRefresh();    }  }}  }
class C{  public static Map<String,Object> findPartyById(DispatchContext ctx,Map<String,Object> context){  Delegator delegator=ctx.getDelegator();  String idToFind=(String)context.get("idToFind");  String partyIdentificationTypeId=(String)context.get("partyIdentificationTypeId");  String searchPartyFirstContext=(String)context.get("searchPartyFirst");  String searchAllIdContext=(String)context.get("searchAllId");  boolean searchPartyFirst=UtilValidate.isNotEmpty(searchPartyFirstContext) && "N".equals(searchPartyFirstContext) ? false : true;  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;  GenericValue party=null;  List<GenericValue> partiesFound=null;  try {    partiesFound=PartyWorker.findPartiesById(delegator,idToFind,partyIdentificationTypeId,searchPartyFirst,searchAllId);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isNotEmpty(partiesFound)) {    party=EntityUtil.getFirst(partiesFound);    partiesFound.remove(0);  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("party",party);  result.put("partiesFound",partiesFound);  return result;}  }
class C{  public void skip(int n) throws IOException {  dis.skip(n);}  }
class C{  @Override public final void sendAlive(){  ProcessConfiguration processConfiguration=getConfigurationController().getProcessConfiguration();  LOGGER.debug("sending AliveTag. tag id : " + processConfiguration.getAliveTagID());  long timestamp=System.currentTimeMillis();  try {    SourceDataTagValue aliveTagValue=new SourceDataTagValue(Long.valueOf(processConfiguration.getAliveTagID()),processConfiguration.getProcessName() + "::AliveTag",true,Long.valueOf(timestamp),new SourceDataTagQuality(),timestamp,9,false,null,3 * processConfiguration.getAliveInterval());    distributeValue(aliveTagValue);  } catch (  JMSException ex) {    LOGGER.error("sendAlive : JMSException caught :" + ex.getMessage());  }catch (  Throwable e) {    LOGGER.error("sendAlive : Unexpected Exception caught :",e);  }}  }
class C{  public void populate(FunctionName functionName,ProcessFunction existingProcessFunction){  this.selectedFunction.setBuiltInProcessFunction(functionName,existingProcessFunction);  valueList=this.selectedFunction.extractParameters();}  }
class C{  private void callTrains(int trackCode){  boolean directionFlipped=false;  for (int i=0; i < tracks.length; i++) {    if ((1 << i & trackCode) != 0) {      if (!directionFlipped) {        CGCWorld.getBF().createCar(trainAnchors[i],50,1.25f + (i * 1.7f),false,true);        CGCWorld.getBF().createCar(trainAnchors[i],55.5f,1.25f + (i * 1.7f),false,true);        CGCWorld.getBF().createCar(trainAnchors[i],61,1.25f + (i * 1.7f),false,true);      } else {        CGCWorld.getBF().createCar(trainAnchors[i],-30,1.25f + (i * 1.7f),false,false);        CGCWorld.getBF().createCar(trainAnchors[i],-35.5f,1.25f + (i * 1.7f),false,false);        CGCWorld.getBF().createCar(trainAnchors[i],-41,1.25f + (i * 1.7f),false,false);      }      directionFlipped=!directionFlipped;      CGCWorld.getBF().summonTrain(trainIndex);      trainIndex++;    }  }}  }
class C{  public XwavesLabelfileReader(String filename) throws IOException {  this(new FileReader(filename));}  }
class C{  protected void computeReachablePts(){  int i;  IVarAbstraction pn;  off_graph_edge p;  queue.clear();  for (i=0; i < n_var; ++i) {    pn=int2var.get(i);    if (pn.willUpdate == true)     queue.add(i);  }  while (!queue.isEmpty()) {    i=queue.getFirst();    queue.removeFirst();    p=varGraph.get(i);    while (p != null) {      pn=int2var.get(p.t);      if (pn.willUpdate == false) {        pn.willUpdate=true;        queue.add(p.t);      }      pn=p.base_var;      if (pn != null && pn.willUpdate == false) {        pn.willUpdate=true;        queue.add(pn.id);      }      p=p.next;    }  }}  }
class C{  public boolean isForceLabelsEnabled(){  return mForceLabels;}  }
class C{  @SuppressWarnings("unchecked") public List<Object> splitByLists(String text,boolean recurse){  List<Object> textList=new ArrayList<>();  String remainText=text;  msgHandler.logDebug("====================================\n" + "splitByLists\n" + "====================================");  while (true) {    Map<String,Object> listInfo=findParseBulletList(remainText,false);    if (listInfo == null) {      break;    }    int startIndex=(int)listInfo.get("startIndex");    int endIndex=(int)listInfo.get("endIndex");    if (startIndex > 0) {      textList.add(remainText.substring(0,startIndex));    }    if (recurse) {      List<Object> parsedItems=new ArrayList<>();      List<Object> itemTexts=(List<Object>)listInfo.get("items");      if (itemTexts != null && !itemTexts.isEmpty()) {        for (        Object itemEntry : itemTexts) {          String itemText=(String)itemEntry;          List<Object> parsedItemList=splitByStructuralElems(itemText);          parsedItems.add(parsedItemList);        }      }      listInfo.put("items",parsedItems);    }    textList.add(listInfo);    remainText=remainText.substring(endIndex);  }  if (!remainText.isEmpty()) {    textList.add(remainText);  }  msgHandler.logDebug("textList size: " + textList.size());  return textList;}  }
class C{  private boolean updateAnchorFromPendingData(RecyclerView.State state,AnchorInfo anchorInfo){  if (state.isPreLayout() || mPendingScrollPosition == NO_POSITION) {    return false;  }  if (mPendingScrollPosition < 0 || mPendingScrollPosition >= state.getItemCount()) {    mPendingScrollPosition=NO_POSITION;    mPendingScrollPositionOffset=INVALID_OFFSET;    if (DEBUG) {      Log.e(TAG,"ignoring invalid scroll position " + mPendingScrollPosition);    }    return false;  }  anchorInfo.mPosition=mPendingScrollPosition;  if (mPendingSavedState != null && mPendingSavedState.hasValidAnchor()) {    anchorInfo.mLayoutFromEnd=mPendingSavedState.mAnchorLayoutFromEnd;    if (anchorInfo.mLayoutFromEnd) {      anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingSavedState.mAnchorOffset;    } else {      anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingSavedState.mAnchorOffset;    }    return true;  }  if (mPendingScrollPositionOffset == INVALID_OFFSET) {    View child=findViewByPosition(mPendingScrollPosition);    if (child != null) {      final int childSize=mOrientationHelper.getDecoratedMeasurement(child);      if (childSize > mOrientationHelper.getTotalSpace()) {        anchorInfo.assignCoordinateFromPadding();        return true;      }      final int startGap=mOrientationHelper.getDecoratedStart(child) - mOrientationHelper.getStartAfterPadding();      if (startGap < 0) {        anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding();        anchorInfo.mLayoutFromEnd=false;        return true;      }      final int endGap=mOrientationHelper.getEndAfterPadding() - mOrientationHelper.getDecoratedEnd(child);      if (endGap < 0) {        anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding();        anchorInfo.mLayoutFromEnd=true;        return true;      }      anchorInfo.mCoordinate=anchorInfo.mLayoutFromEnd ? (mOrientationHelper.getDecoratedEnd(child) + mOrientationHelper.getTotalSpaceChange()) : mOrientationHelper.getDecoratedStart(child);    } else {      if (getChildCount() > 0) {        int pos=getPosition(getChildAt(0));        anchorInfo.mLayoutFromEnd=mPendingScrollPosition < pos == mShouldReverseLayout;      }      anchorInfo.assignCoordinateFromPadding();    }    return true;  }  anchorInfo.mLayoutFromEnd=mShouldReverseLayout;  if (mShouldReverseLayout) {    anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingScrollPositionOffset;  } else {    anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingScrollPositionOffset;  }  return true;}  }
class C{  public boolean selectOnMouseDown(MouseEvent mouseEvent,ChartSelection chartSelection){  return selectOnRubberBand(new Rectangle(mouseEvent.getX() - 1,mouseEvent.getY() - 1,2,2),mouseEvent,chartSelection);}  }
class C{  private void turnOffAllTracks(){  for (int i=0; i < this.tracks.length; i++) {    this.tracks[i].setLowAnim(TextureAnimationDrawer.trackSolid);  }}  }
class C{  public SAMValidationError(final Type type,final String message,final String readName,final long recordNumber){  this(type,message,readName);  this.recordNumber=recordNumber;}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public void addRuleIds(final Collection<Long> ruleIds){  this.ruleIds.addAll(ruleIds);}  }
class C{  public static double pow(final double x,final double y){  if (y == 0) {    return 1.0;  } else {    final long yBits=Double.doubleToRawLongBits(y);    final int yRawExp=(int)((yBits & MASK_DOUBLE_EXPONENT) >> 52);    final long yRawMantissa=yBits & MASK_DOUBLE_MANTISSA;    final long xBits=Double.doubleToRawLongBits(x);    final int xRawExp=(int)((xBits & MASK_DOUBLE_EXPONENT) >> 52);    final long xRawMantissa=xBits & MASK_DOUBLE_MANTISSA;    if (yRawExp > 1085) {      if ((yRawExp == 2047 && yRawMantissa != 0) || (xRawExp == 2047 && xRawMantissa != 0)) {        return Double.NaN;      } else       if (xRawExp == 1023 && xRawMantissa == 0) {        if (yRawExp == 2047) {          return Double.NaN;        } else {          return 1.0;        }      } else {        if ((y > 0) ^ (xRawExp < 1023)) {          return Double.POSITIVE_INFINITY;        } else {          return +0.0;        }      }    } else {      if (yRawExp >= 1023) {        final long yFullMantissa=IMPLICIT_HIGH_BIT | yRawMantissa;        if (yRawExp < 1075) {          final long integralMask=(-1L) << (1075 - yRawExp);          if ((yFullMantissa & integralMask) == yFullMantissa) {            final long l=yFullMantissa >> (1075 - yRawExp);            return FastMath.pow(x,(y < 0) ? -l : l);          }        } else {          final long l=yFullMantissa << (yRawExp - 1075);          return FastMath.pow(x,(y < 0) ? -l : l);        }      }      if (x == 0) {        return y < 0 ? Double.POSITIVE_INFINITY : +0.0;      } else       if (xRawExp == 2047) {        if (xRawMantissa == 0) {          return (y < 0) ? +0.0 : Double.POSITIVE_INFINITY;        } else {          return Double.NaN;        }      } else       if (x < 0) {        return Double.NaN;      } else {        final double tmp=y * HEX_40000000;        final double ya=(y + tmp) - tmp;        final double yb=y - ya;        final double lns[]=new double[2];        final double lores=log(x,lns);        if (Double.isInfinite(lores)) {          return lores;        }        double lna=lns[0];        double lnb=lns[1];        final double tmp1=lna * HEX_40000000;        final double tmp2=(lna + tmp1) - tmp1;        lnb+=lna - tmp2;        lna=tmp2;        final double aa=lna * ya;        final double ab=lna * yb + lnb * ya + lnb * yb;        lna=aa + ab;        lnb=-(lna - aa - ab);        double z=1.0 / 120.0;        z=z * lnb + (1.0 / 24.0);        z=z * lnb + (1.0 / 6.0);        z=z * lnb + 0.5;        z=z * lnb + 1.0;        z*=lnb;        final double result=exp(lna,z,null);        return result;      }    }  }}  }
class C{  public void queryAs(String tableName,String alias) throws DatabaseException {  assert (this.active);  if (Database.this.tableLookup.containsKey(alias) || this.tempTables.containsKey(alias) || this.aliasMaps.containsKey(alias)) {    throw new DatabaseException("Table name already exists");  }  checkAndGrabSharedLock(tableName);  if (Database.this.tableLookup.containsKey(tableName)) {    this.aliasMaps.put(alias,tableName);  } else   if (tempTables.containsKey(tableName)) {    this.aliasMaps.put(alias,tableName);  } else {    throw new DatabaseException("Table name not found");  }}  }
class C{  public void parse(byte[] matchesText,int offset){  bitScore=0;  expected=0;  percentIdentity=0;  int end=Utilities.nextNewLine(matchesText,offset);  offset=skipTabs(matchesText,offset,11);  String[] tokens=Utilities.split(matchesText,offset,end,(byte)'\t');  for (  String token : tokens) {    if (token.startsWith("AS:i:"))     bitScore=Integer.parseInt(token.substring(5)); else     if (token.startsWith("ZE:f:"))     expected=Float.parseFloat(token.substring(5)); else     if (token.startsWith("ZI:i:"))     percentIdentity=Float.parseFloat(token.substring(5));  }}  }
class C{  private static AsyncHttpClient initializeWebClient(int requestTimeout){  LOG.debug("Druid request timeout: {}ms",requestTimeout);  AsyncHttpClientConfig config=new DefaultAsyncHttpClientConfig.Builder().setRequestTimeout(requestTimeout).setConnectionTtl(requestTimeout).setPooledConnectionIdleTimeout(requestTimeout).build();  return new DefaultAsyncHttpClient(config);}  }
class C{  public void addGroup(GroupConfigInterface subGroup){  subGroupList.add(subGroup);}  }
class C{  public static Object stringToValue(String string){  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  try {    char initial=string.charAt(0);    if (initial == '-' || (initial >= '0' && initial <= '9')) {      Long value=new Long(string);      if (value.toString().equals(string)) {        return value;      }    }  } catch (  Exception ignore) {    try {      Double value=new Double(string);      if (value.toString().equals(string)) {        return value;      }    } catch (    Exception ignoreAlso) {    }  }  return string;}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  if (!fDeferNodeExpansion) {    if (fDocumentImpl != null) {      if (version != null)       fDocumentImpl.setXmlVersion(version);      fDocumentImpl.setXmlEncoding(encoding);      fDocumentImpl.setXmlStandalone("yes".equals(standalone));    }  } else {    if (version != null)     fDeferredDocumentImpl.setXmlVersion(version);    fDeferredDocumentImpl.setXmlEncoding(encoding);    fDeferredDocumentImpl.setXmlStandalone("yes".equals(standalone));  }}  }
class C{  private void processFileEditorChange(@Nullable final TextEditor newEditor){  if (myToolWindow == null) {    return;  }  if (myActiveEditor == newEditor) {    return;  }  myToolWindowUpdateQueue.cancelAllUpdates();  if (myActiveEditor != null) {    myActiveEditor.getEditor().getCaretModel().removeCaretListener(myCaretListener);    myActiveEditor.getEditor().getDocument().removeDocumentListener(myDocumentListener);    myActiveEditor=null;  }  boolean available=false;  if (newEditor != null && isApplicableEditor(newEditor)) {    myActiveEditor=newEditor;    CaretModel caretModel=myActiveEditor.getEditor().getCaretModel();    caretModel.addCaretListener(myCaretListener);    Document document=myActiveEditor.getEditor().getDocument();    document.addDocumentListener(myDocumentListener);    PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(document);    Configuration configuration=getBestConfiguration(psiFile);    if (configuration != null) {      if (myThemeEditorContext == null) {        myThemeEditorContext=new ThemeEditorContext(configuration);      } else {        myThemeEditorContext.setConfiguration(configuration);      }      if (getThemeAtEditorOffset(document,caretModel.getOffset()) != null) {        available=true;        updatePreview();      }    }  }  myToolWindow.setAvailable(available,null);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public void incrementSelectedFTSIndex(){  this.selectedFTSIndex++;}  }
class C{  public BoardGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void initModel(Activity a){  this.collectionsModel=new CollectionsObject(a);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  @Override public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  public static int incrementExact(final int n) throws MathRuntimeException {  if (n == Integer.MAX_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,n,1);  }  return n + 1;}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public S2Cap complement(){  double cHeight=isFull() ? -1 : 2 - Math.max(height,0.0);  return S2Cap.fromAxisHeight(S2Point.neg(axis),cHeight);}  }
class C{  DrawingData(Context context){  Resources res=context.getResources();  mPadding=res.getDimensionPixelOffset(R.dimen.ntp_list_item_padding);  mMinHeight=res.getDimensionPixelSize(R.dimen.ntp_list_item_min_height);  mFaviconSize=res.getDimensionPixelSize(R.dimen.default_favicon_size);  mFaviconContainerSize=res.getDimensionPixelSize(R.dimen.ntp_list_item_favicon_container_size);  mTextSize=res.getDimensionPixelSize(R.dimen.ntp_list_item_text_size);  mTextColor=ApiCompatibilityUtils.getColor(res,R.color.ntp_list_item_text);}  }
class C{  private static void drawSnapVerticalIndicator(ViewTransform transform,Graphics2D g,SnapCandidate candidate){  ConstraintAnchor source=candidate.source;  ConstraintAnchor target=candidate.target;  ConstraintHandle sourceHandle=WidgetInteractionTargets.constraintHandle(source);  ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(target);  int y=transform.getSwingY(candidate.y);  if (targetHandle != null) {    y=transform.getSwingY(targetHandle.getDrawY());  }  int x1=transform.getSwingX(source.getOwner().getDrawX());  int x2=transform.getSwingX(source.getOwner().getDrawX() + source.getOwner().getDrawWidth());  int x3=transform.getSwingX(target.getOwner().getDrawX());  int x4=transform.getSwingX(target.getOwner().getDrawX() + target.getOwner().getDrawWidth());  int minX=Math.min(x1,x3);  int maxX=Math.max(x2,x4);  if (candidate.margin != 0) {    int y2=transform.getSwingY(sourceHandle.getDrawY());    String textMargin="" + Math.abs(candidate.margin);    int xS=x2;    int xT=x4 + OVER_MARGIN / 2;    int mX=xS + OVER_MARGIN;    if (x1 < x3) {      xS=x1;      xT=x3 - OVER_MARGIN / 2;      mX=xS - OVER_MARGIN;    }    drawSnapVerticalMargin(transform,g,mX,y,y2,textMargin);    Graphics2D g2=(Graphics2D)g.create();    g2.setStroke(sDashedStroke);    g2.drawLine(xS,y,xT,y);    g2.dispose();  } else {    Graphics2D g2=(Graphics2D)g.create();    boolean insideIndicator=(source.getOwner().getParent() == candidate.target.getOwner()) || (candidate.target.getOwner() instanceof Guideline);    if (insideIndicator) {      g2.setStroke(sLongDashedStroke);      g2.drawLine(minX,y,maxX,y);    } else {      g2.setStroke(sDashedStroke);      g2.drawLine(minX - OVER,y,maxX + OVER,y);    }    g2.dispose();  }}  }
class C{  public boolean gotoPrevious(){  currentTaxonIterator=null;  currentTaxonId=null;  return isCurrentSet();}  }
class C{  private void initializationSteps(){  if (isLocal) {    setHost(LOCAL_HOST);    setPort(LOCAL_PORT);    localNode=launchLocalCluster();    log.debug("init() - Connecting to local ElasticSearch instance (inside same JVM) is enabled.");  } else {    log.debug("init() - Connecting to local ElasticSearch instance (inside same JVM) is disabled.");  }  client=createClient();}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public ContinousQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType){  super(type,sqlExpression,queryResultType);}  }
class C{  public static String formatPrice(Double price){  if (price == null)   return "";  return formatPrice(price.doubleValue());}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public void write(int ch) throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.write(ch);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300458,value0);}  }
class C{  @Override public long addAndGet(long increment){  throw new UnsupportedOperationException();}  }
class C{  protected Object create() throws ResourceUnavailableException {  PoolableThread thread=new PoolableThread(this);  thread.setDaemon(true);  thread.start();  try {    Thread.sleep(1);  } catch (  InterruptedException e) {    logger.log(Level.WARNING,"Creating a resource interrupted",e);  }  return (thread);}  }
class C{  private JarEntryInfo findJarNativeEntry(String sLib){  String sName=System.mapLibraryName(sLib);  for (  JarFileInfo jarFileInfo : lstJarFile) {    JarFile jarFile=jarFileInfo.jarFile;    Enumeration<JarEntry> en=jarFile.entries();    while (en.hasMoreElements()) {      JarEntry je=en.nextElement();      if (je.isDirectory()) {        continue;      }      String sEntry=je.getName();      String[] token=sEntry.split("/");      if (token.length > 0 && token[token.length - 1].equals(sName)) {        logInfo(LogArea.NATIVE,"Loading native library '%s' found as '%s' in JAR %s",sLib,sEntry,jarFileInfo.simpleName);        return new JarEntryInfo(jarFileInfo,je);      }    }  }  return null;}  }
class C{  private static String urlsToPath(URL[] urls){  if (urls == null) {    return null;  } else   if (urls.length == 0) {    return "";  } else   if (urls.length == 1) {    return urls[0].toExternalForm();  } else {    StringBuffer path=new StringBuffer(urls[0].toExternalForm());    for (int i=1; i < urls.length; i++) {      path.append(' ');      path.append(urls[i].toExternalForm());    }    return path.toString();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200614,skillcaster,skillname);}  }
class C{  public static String checkTrackingCodeCookies(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  java.sql.Timestamp nowStamp=UtilDateTime.nowTimestamp();  GenericValue visit=VisitHandler.getVisit(request.getSession());  if (visit != null) {    Cookie[] cookies=request.getCookies();    if (cookies != null && cookies.length > 0) {      for (int i=0; i < cookies.length; i++) {        if (cookies[i].getName().startsWith("TKCDT_")) {          String trackingCodeId=cookies[i].getValue();          GenericValue trackingCode;          try {            trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);            continue;          }          if (trackingCode == null) {            Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);            continue;          }          if (trackingCode.get("fromDate") != null && nowStamp.before(trackingCode.getTimestamp("fromDate"))) {            if (Debug.infoOn())             Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has not yet gone into effect, ignoring this trackingCodeId",module);            continue;          }          if (trackingCode.get("thruDate") != null && nowStamp.after(trackingCode.getTimestamp("thruDate"))) {            if (Debug.infoOn())             Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has expired, ignoring this trackingCodeId",module);            continue;          }          GenericValue trackingCodeVisit=delegator.makeValue("TrackingCodeVisit",UtilMisc.toMap("trackingCodeId",trackingCodeId,"visitId",visit.get("visitId"),"fromDate",nowStamp,"sourceEnumId","TKCDSRC_COOKIE"));          try {            trackingCodeVisit.create();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error while saving TrackingCodeVisit",module);          }        }      }    }  }  return "success";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_LEARNED_NEW_SKILL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300050,value0,value1);}  }
class C{  private void updateUserIdsLocked(){  int num=0;  for (int i=0; i < mUsers.size(); i++) {    if (!mUsers.valueAt(i).partial) {      num++;    }  }  final int[] newUsers=new int[num];  int n=0;  for (int i=0; i < mUsers.size(); i++) {    if (!mUsers.valueAt(i).partial) {      newUsers[n++]=mUsers.keyAt(i);    }  }  mUserIds=newUsers;}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2){  return addSpring(item1,item2,-1.f,-1.f);}  }
class C{  private void createUI(){  readConfigFile(null,this,"NamedLayer.xml");}  }
class C{  public static ByteBuffer createCAPTCHA(String word){  ByteBuffer byteBuffer=null;  BufferedImage bImg=createImage(word);  byteBuffer=DDSConverter.convertToDxt1NoTransparency(bImg);  return byteBuffer;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void removeFromUI(){}  }
class C{  public void dump(PrintWriter output,String title){  dump(output,0,title,false);}  }
class C{  public void initData(){  noteDb=new NoteDatabase(aty);  datas=noteDb.query();  if (datas != null) {    adapter=new NotebookAdapter(aty,datas);  } else {    getServerData();  }}  }
class C{  public BoundingBox(Vector3f c,float x,float y,float z){  this.center.set(c);  this.xExtent=x;  this.yExtent=y;  this.zExtent=z;}  }
class C{  @Override protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,positions[i * 2],fixedPosition - offset,mAxisLabelPaint);  }}  }
class C{  public String changeName(String path,String newName) throws RepositoryException {  String newPath=substringBeforeLast(path,SEPARATOR) + SEPARATOR + newName;  session.move(path,newPath);  session.save();  return newPath;}  }
class C{  public boolean with_classfield(){  return soot.PhaseOptions.getBoolean(options,"with-classfield");}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  int id=item.getItemId();  if (id == android.R.id.home) {    onBackPressed();    return true;  }  if (id == menuDoneId) {    if (selectedImages != null && selectedImages.size() > 0) {      for (int i=0; i < selectedImages.size(); i++) {        Image image=selectedImages.get(i);        File file=new File(image.getPath());        if (file == null || !file.exists()) {          selectedImages.remove(i);          i--;        }      }      Intent data=new Intent();      data.putParcelableArrayListExtra(ImagePickerActivity.INTENT_EXTRA_SELECTED_IMAGES,selectedImages);      setResult(RESULT_OK,data);      finish();    }    return true;  }  if (id == menuCameraId) {    captureImageWithPermission();    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public void tag(String tag,ArrayList names,ArrayList values,int nattr){  tag(tag,names,values,nattr,true);}  }
class C{  public static void toDotFile(String methodname,DirectedGraph graph,String graphname){  int sequence=0;  nodecount=0;  Hashtable nodeindex=new Hashtable(graph.size());  DotGraph canvas=new DotGraph(methodname);  if (!onepage) {    canvas.setPageSize(8.5,11.0);  }  canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_BOX);  canvas.setGraphLabel(graphname);  Iterator nodesIt=graph.iterator();{    while (nodesIt.hasNext()) {      Object node=nodesIt.next();      if (node instanceof List) {        String listName="list" + (new Integer(sequence++)).toString();        String nodeName=makeNodeName(getNodeOrder(nodeindex,listName));        listNodeName.put(node,listName);      }    }  }  nodesIt=graph.iterator();  while (nodesIt.hasNext()) {    Object node=nodesIt.next();    String nodeName=null;    if (node instanceof List) {      nodeName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(node)));    } else {      nodeName=makeNodeName(getNodeOrder(nodeindex,node));    }    Iterator succsIt=graph.getSuccsOf(node).iterator();    while (succsIt.hasNext()) {      Object s=succsIt.next();      String succName=null;      if (s instanceof List) {        succName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(s)));      } else {        Object succ=s;        succName=makeNodeName(getNodeOrder(nodeindex,succ));      }      canvas.drawEdge(nodeName,succName);    }  }  if (!isBrief) {    nodesIt=nodeindex.keySet().iterator();    while (nodesIt.hasNext()) {      Object node=nodesIt.next();      if (node != null) {        String nodename=makeNodeName(getNodeOrder(nodeindex,node));        DotGraphNode dotnode=canvas.getNode(nodename);        if (dotnode != null)         dotnode.setLabel(node.toString());      }    }  }  canvas.plot("pecg.dot");  listNodeName.clear();}  }
class C{  public static void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_UPGRADE_LEVEL(int num0){  return new SM_SYSTEM_MESSAGE(1400069,num0);}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){  this(keyStore,manager,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_IT_CAN_NOT_BE_DECOMPOSED(String value0){  return new SM_SYSTEM_MESSAGE(1300446,value0);}  }
class C{  public PhotosGetQuery photoIds(List<String> value){  return unsafeParam("photo_ids",value);}  }
class C{  public AccountBanUserQuery(VkApiClient client,UserActor actor,int userId){  super(client,"account.banUser",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public TextEditor deleteAll(String pattern){  return replaceAll(pattern,"");}  }
class C{  private boolean isSizeAvailableToLoadColumnDictionary(long requiredSize){  return lruCacheMemorySize >= (currentSize + requiredSize);}  }
class C{  protected MarketReorderItemsQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public static int max(final int a,final int b){  return (a <= b) ? b : a;}  }
class C{  public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;}  }
class C{  public static void drawValues(Graphics2D gc,LinkedList<DrawableValue> valuesList,boolean centerLabelWidth,boolean centerLabelHeight){  gc.setColor(Color.LIGHT_GRAY);  for (  DrawableValue value : valuesList) {    if (!value.isSelected())     value.draw(gc,centerLabelWidth,centerLabelHeight);  }  gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);  for (  DrawableValue value : valuesList) {    if (value.isSelected())     value.draw(gc,centerLabelWidth,centerLabelHeight);  }}  }
class C{  @SuppressLint("NewApi") private boolean checkIfMaximumBitmapExceed(Canvas canvas){  return mBitmapWidth > canvas.getMaximumBitmapWidth() || mBitmapHeight > canvas.getMaximumBitmapHeight();}  }
class C{  public AWSIotMessage(String topic,AWSIotQos qos,String payload){  this.topic=topic;  this.qos=qos;  setStringPayload(payload);}  }
class C{  public void openSnapshot(File file){  throw new UnsupportedOperationException("Open snapshot not supported");}  }
class C{  protected int indexOf(String buffer,int start,int end,char ch){  for (int i=start; i < end; i++) {    if (buffer.charAt(i) == ch) {      return i;    }  }  return -1;}  }
class C{  public NewsfeedDeleteListQuery deleteList(UserActor actor,int listId){  return new NewsfeedDeleteListQuery(getClient(),actor,listId);}  }
class C{  public static boolean isChildGroup(String group){  return group.indexOf(GROUP_DELIMITER) != -1;}  }
class C{  public AudioAddAlbumQuery addAlbum(UserActor actor,String title){  return new AudioAddAlbumQuery(getClient(),actor,title);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_A_TO_ME(int num0,String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1200669,num0,skillname,skillcaster);}  }
class C{  private synchronized void updateResults(){  if (mDatabaseUpdated) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  database.beginTransaction();  int oldestWeekWeCareAbout=mNumberOfWeeksSinceEpoch - NUM_WEEKS + 1;  database.delete(SongPlayCountColumns.NAME,SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX + " < " + oldestWeekWeCareAbout,null);  Cursor cursor=database.query(SongPlayCountColumns.NAME,new String[]{SongPlayCountColumns.ID},null,null,null,null,null);  if (cursor != null && cursor.moveToFirst()) {    do {      updateExistingRow(database,cursor.getLong(0),false);    } while (cursor.moveToNext());    cursor.close();    cursor=null;  }  mDatabaseUpdated=true;  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  public void addTask(String name,Class<? extends Task> taskclass,TaskTimer timer) throws SchedulerException, ParseException {  assert timer != null : "Cannot add scheduler task " + name + " as no timer is set";  JobDetail job=new JobDetail(name,Scheduler.DEFAULT_GROUP,taskclass);  scheduler.scheduleJob(job,timer.getTrigger());}  }
class C{  void onException(JMSException jE){  if (errorHandler != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("calling ExceptionListener.onException(): " + cnxKey);    }    errorHandler.onException(jE);  } else {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("ExceptionListener is not set for connection: " + cnxKey);    }  }}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.i(TAG,"onResume");  startPreview();}  }
class C{  private boolean isPrivateAndNonPrimitive(Field field){  return Modifier.isPrivate(field.getModifiers()) && !field.getType().isPrimitive();}  }
class C{  public void limit(double x1,double y1,double x2,double y2){  clip[0]=Math.max(clip[0],x1);  clip[1]=Math.max(clip[1],y1);  clip[6]=Math.min(clip[6],x2);  clip[7]=Math.min(clip[7],y2);}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public Boolean isValue(){  return value;}  }
class C{  public RevealBuilder withCurvedTranslation(){  this.mCurvedTranslation=true;  return this;}  }
class C{  public boolean chainSkillEnabled(String category,int time){  long useTime=0;  if (this.multiSkills.get(category) != null) {    useTime=this.multiSkills.get(category).getUseTime();  } else   if (chainSkill.getCategory().equals(category)) {    useTime=chainSkill.getUseTime();  }  if ((useTime + time) >= System.currentTimeMillis()) {    return true;  } else {    return false;  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public AlreadySpawnedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public AdsGetCampaignsQuery includeDeleted(Boolean value){  return unsafeParam("include_deleted",value);}  }
class C{  public Notifier(){  super("event-listener-notification");  setDaemon(true);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((dataType == null) ? 0 : dataType.hashCode());  result=prime * result + ((executionTime == null) ? 0 : executionTime.hashCode());  result=prime * result + ((host == null) ? 0 : host.hashCode());  result=prime * result + ((mode == null) ? 0 : mode.hashCode());  result=prime * result + ((name == null) ? 0 : name.hashCode());  result=prime * result + ((reportDescription == null) ? 0 : reportDescription.hashCode());  result=prime * result + ((reportStatus == null) ? 0 : reportStatus.hashCode());  result=prime * result + ((reportTime == null) ? 0 : reportTime.hashCode());  result=prime * result + ((tagId == null) ? 0 : tagId.hashCode());  result=prime * result + ((user == null) ? 0 : user.hashCode());  result=prime * result + ((value == null) ? 0 : value.hashCode());  return result;}  }
class C{  @Override @Timed public void assignUserToExports(Assignment assignment,Date date){  final String CQL;  CQL="insert into user_assignment_export " + "(experiment_id, user_id, context, created, day_hour, bucket_label, is_bucket_null) " + "values (?, ?, ?, ?, ?, ?, ?)";  try {    DateHour dateHour=new DateHour();    dateHour.setDateHour(date);    Date day_hour=dateHour.getDayHour();    PreparedCqlQuery<ExperimentsKeyspace.ExperimentIDDayHourComposite,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentExport()).withCql(CQL).asPreparedStatement().withByteBufferValue(assignment.getExperimentID().getRawID(),UUIDSerializer.get()).withByteBufferValue(assignment.getUserID(),UserIDSerializer.get()).withStringValue(assignment.getContext().getContext()).withByteBufferValue(date,DateSerializer.get()).withByteBufferValue(day_hour,DateSerializer.get());    if (assignment.getBucketLabel() != null) {      query.withByteBufferValue(assignment.getBucketLabel(),BucketLabelSerializer.get());      query.withBooleanValue(false);    } else {      query.withStringValue("NO_ASSIGNMENT");      query.withBooleanValue(true);    }    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not save user assignment in user_assignment_export \"" + assignment + "\"",e);  }}  }
class C{  public Book withDefaults(){  setBestSeller(false);  return this;}  }
class C{  public boolean isActive(){  if (getStatus() == XtnStatus.UNINITIALIZED || getStatus() == XtnStatus.BEGUN)   return true;  return false;}  }
class C{  @Override public void applyInline(double[] data,int off,int len){  Window w=Window.get(windowType,len);  w.applyInline(data,off,len);}  }
class C{  public static synchronized void deleteByFileLocationFilename(String fileLocationFilename) throws IOException {  Directory dir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.INDEXLOCATION,Values.DEFAULTINDEXLOCATION)));  Analyzer analyzer=new CodeAnalyzer();  IndexWriterConfig iwc=new IndexWriterConfig(analyzer);  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);  IndexWriter writer=new IndexWriter(dir,iwc);  try {    QueryParser parser=new QueryParser("contents",analyzer);    Query query=parser.parse("filelocationfilename:" + QueryParser.escape(fileLocationFilename));    writer.deleteDocuments(query);  } catch (  Exception ex) {    Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in CodeIndexer\n with message: "+ ex.getMessage());  } finally {    writer.close();  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static float[] evaluate(String automaticFileName,String correctFileName){  List<String> s1=Arrays.asList(UTF8FileIO.readLines(automaticFileName));  List<String> s2=Arrays.asList(UTF8FileIO.readLines(correctFileName));  return evaluate(s1,s2);}  }
class C{  public void moveTo(String folder){  File f1=new File(path(this.getFolder(),getId()));  File f2=new File(path(folder,getId()));  if (f2.exists()) {    f2.delete();  } else {    f2.getParentFile().mkdirs();  }  f1.renameTo(f2);  Helper.update(getId(),V.create("folder",folder),Entity.class);}  }
class C{  private ContextualSearchFieldTrial(){}  }
class C{  public Builder(){}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUN'";  db.execSQL(sql);}  }
class C{  public static void writeToFile(@NotNull JavaFile file,@NotNull Filer filer) throws IOException {  String fileName=file.packageName.isEmpty() ? file.typeSpec.name : file.packageName + '.' + file.typeSpec.name;  List<Element> originatingElements=file.typeSpec.originatingElements;  JavaFileObject filerSourceFile=filer.createSourceFile(fileName,originatingElements.toArray(new Element[originatingElements.size()]));  filerSourceFile.delete();  Writer writer=null;  try {    writer=filerSourceFile.openWriter();    file.writeTo(writer);  } catch (  Exception e) {    try {      filerSourceFile.delete();    } catch (    Exception ignored) {    }    throw e;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static void reloadTime(int time){  ThreadPoolManager.getInstance().purge();  instance=new GameTime(time);  clockStarted=false;  startClock();  log.info("Game time changed by admin and clock restarted...");}  }
class C{  public boolean equals(Object obj){  return ReferentUuids.compare(this,obj);}  }
class C{  public static void openComposeEmailActivity(Context context,String[] addresses,String subject){  Intent intent=new Intent(Intent.ACTION_SENDTO);  intent.setData(Uri.parse("mailto:"));  intent.putExtra(Intent.EXTRA_EMAIL,addresses);  intent.putExtra(Intent.EXTRA_SUBJECT,subject);  startIntentIfPossible(context,intent);}  }
class C{  public static void decorate(IDecoration decoration,IDecoratorComponent[][] format,Map bindings){  String[] prefixSuffix=decorate(format,bindings);  decoration.addPrefix(prefixSuffix[0]);  decoration.addSuffix(prefixSuffix[1]);}  }
class C{  private boolean isBetterThan(int a,int b){  if (bigIsGood) {    return a > b;  } else {    return a < b;  }}  }
class C{  private BSPTree<Euclidean1D> leafAfter(BSPTree<Euclidean1D> node){  node=childAfter(node);  while (node.getCut() != null) {    node=childBefore(node);  }  return node;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @NotNull public ImageOverlayBuilder toDiskAndLaunchViewer(@NotNull File file){  toDisk(file);  try {    Desktop.getDesktop().open(file);    Utils.waitFor(3,TimeUnit.SECONDS);  } catch (  IOException e) {    throw new CognitiveException("Could not open image",e);  }  return this;}  }
class C{  public void add(short[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public GroupsGetQueryWithExtended fields(List<GroupField> value){  return unsafeParam("fields",value);}  }
class C{  public Vector2f interpolate(Vector2f beginVec,Vector2f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;  return this;}  }
class C{  public void startAddingQueries() throws IOException {  totalNumberOfReads=0;  totalNumberOfMatches=0;  getFooterSectionRMA6().setStartReadsSection(readerWriter.getPosition());}  }
class C{  static public InputStream findContainerSchema(String schemaName,boolean createIfNotExists){  String schemaNameToBeUsed=schemaName;  InputStream schemaInputStream;  if (JSpaceUtilities.isEmpty(schemaName)) {    schemaNameToBeUsed=Constants.Schemas.DEFAULT_SCHEMA;  }  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ schemaNameToBeUsed+ Constants.Schemas.CONTAINER_SCHEMA_FILE_SUFFIX;  schemaInputStream=getResourceStream(schemaFilePath,null,createIfNotExists);  if (schemaInputStream != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Loaded the container schema < " + getResourceURL(schemaFilePath) + " > for the container configuration.");    }    return schemaInputStream;  } else   if (createIfNotExists || !createIfNotExists && getAllSpaceSchemas().contains(schemaName)) {    String defaultSchemaFileName=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ Constants.Schemas.DEFAULT_SCHEMA+ Constants.Schemas.CONTAINER_SCHEMA_FILE_SUFFIX;    schemaInputStream=getResourceStream(defaultSchemaFileName);    if (schemaInputStream != null) {      if (_logger.isLoggable(Level.CONFIG)) {        URL urlToLoad=getResourceURL(schemaFilePath);        if (urlToLoad != null) {          _logger.config("Could not find the container schema file at: " + urlToLoad + ".\nInstead, loaded the default container schema < "+ defaultSchemaFileName+ " > for the container configuration.");        } else {          _logger.config("Could not find the container schema: " + schemaFilePath + ".\nInstead, loaded the default container schema < "+ defaultSchemaFileName+ " > for the container configuration.");        }      }      return schemaInputStream;    } else {      if (_logger.isLoggable(Level.WARNING)) {        _logger.warning("The requested container schema file does not exist in the following path: " + defaultSchemaFileName);      }    }  }  return schemaInputStream;}  }
class C{  protected Instrument(Soundbank soundbank,Patch patch,String name,Class<?> dataClass){  super(soundbank,name,dataClass);  this.patch=patch;}  }
class C{  public Zmat(Zmat A){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=A.nrow;  ncol=A.ncol;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++)   for (int j=0; j < nc; j++) {    re[i][j]=A.re[i][j];    im[i][j]=A.im[i][j];  }}  }
class C{  public static boolean isSupportedArray(Object elem){  if (elem == null || !elem.getClass().isArray()) {    return false;  }  Class<?> ct=elem.getClass().getComponentType();  if (ct.isArray()) {    return false;  }  if (Array.getLength(elem) > 0 && (CompositeData.class.isAssignableFrom(ct) || TabularData.class.isAssignableFrom(ct))) {    return false;  }  return true;}  }
class C{  public TShortLongIterator(TShortLongHashMap map){  super(map);  this._map=map;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static String checkAttribute(String attributeValue,String defaultValue){  return attributeValue.isEmpty() ? defaultValue : attributeValue;}  }
class C{  public List<CustomerReview> readCustomerReview(String customerReview){  List<CustomerReview> customerreviews=new ArrayList<CustomerReview>();  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=new ByteArrayInputStream(customerReview.getBytes());    eventReader=inputFactory.createXMLEventReader(in);    CustomerReview custreview=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (ENTRY)) {          custreview=new CustomerReview();        }        if (event.asStartElement().getName().getLocalPart().equals(LAST_NAME)) {          event=eventReader.nextEvent();          custreview.setLastName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMER_REVIEW_ID)) {          event=eventReader.nextEvent();          custreview.setCustomerReviewId(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(RATING)) {          event=eventReader.nextEvent();          custreview.setRating(Integer.parseInt(getEvent(event)));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(FIRST_NAME)) {          event=eventReader.nextEvent();          custreview.setFirstName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(COMMENT)) {          event=eventReader.nextEvent();          custreview.setComment(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PRODUCT_ID)) {          event=eventReader.nextEvent();          custreview.setProductId(getEvent(event));          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (ENTRY)) {          customerreviews.add(custreview);        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }catch (    IOException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return customerreviews;}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public Object parse(final String value,final String javaName,final Class<?> clazz) throws NoSimpleValueParseException, NoSuchFieldException {  Field field=getField(clazz,javaName);  if (field == null) {    throw new NoSuchFieldException("Field: '" + javaName + "' not found "+ "in "+ clazz.getClass().getName());  }  return parse(value,field);}  }
class C{  public synchronized static DataSourceRepository sharedInstance(){  if (sharedInstance == null)   sharedInstance=new DataSourceRepository();  return sharedInstance;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set layout=" + AlignmentViewer.AlignmentLayout.ByContigs.toString() + ";zoom axis=both what=fit;");}  }
class C{  private boolean hasBacklog(){  final long cursor=ringBuffer.getCursor();  for (  final Sequence consumer : consumerRepository.getLastSequenceInChain(false)) {    if (cursor > consumer.get()) {      return true;    }  }  return false;}  }
class C{  @deprecated public String decomposition(){  if (this.decompBuf != null) {    return this.decompBuf;  }  return "";}  }
class C{  protected void addCommonComponent(XMLComponent component){  if (fCommonComponents.contains(component)) {    return;  }  fCommonComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public static String upperCaseFirstChar(String input){  String[] temp=input.split(" ");  for (int i=0; i < temp.length; i++) {    temp[i]=Character.toUpperCase(temp[i].charAt(0)) + temp[i].substring(1);  }  return join(temp," ");}  }
class C{  public ContextVarNode makeContextVarNode(LocalVarNode base,Context context){  ContextVarNode ret=base.context(context);  if (ret == null) {    ret=new ContextVarNode(this,base,context);    addNodeTag(ret,base.getMethod());  }  return ret;}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"vrnd");}  }
class C{  @Override public void saveObject(Serializable oObj,String sObjectName,String sObjectCategory){  super.saveObject(oObj,sObjectName,sObjectCategory);  if (existsObject(sObjectCategory,ListCategoryName)) {    ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);    nlist.add(sObjectName);    super.saveObject(nlist,sObjectCategory,ListCategoryName);  } else {    ArrayList<String> nlist=new ArrayList<String>();    nlist.add(sObjectName);    super.saveObject(nlist,sObjectCategory,ListCategoryName);  }}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  public static String formatItem(final ItemId item){  return WordUtils.capitalize(item.toString().toLowerCase().replaceAll("item_","").replaceAll(StringLiterals.UNDERSCORE,StringLiterals.SPACE));}  }
class C{  public Color mixColors(Color... colors){  Validate.noNullElements(colors,"Colors cannot be null");  int totalRed=this.getRed();  int totalGreen=this.getGreen();  int totalBlue=this.getBlue();  int totalMax=Math.max(Math.max(totalRed,totalGreen),totalBlue);  for (  Color color : colors) {    totalRed+=color.getRed();    totalGreen+=color.getGreen();    totalBlue+=color.getBlue();    totalMax+=Math.max(Math.max(color.getRed(),color.getGreen()),color.getBlue());  }  float averageRed=totalRed / (colors.length + 1);  float averageGreen=totalGreen / (colors.length + 1);  float averageBlue=totalBlue / (colors.length + 1);  float averageMax=totalMax / (colors.length + 1);  float maximumOfAverages=Math.max(Math.max(averageRed,averageGreen),averageBlue);  float gainFactor=averageMax / maximumOfAverages;  return Color.fromRGB((int)(averageRed * gainFactor),(int)(averageGreen * gainFactor),(int)(averageBlue * gainFactor));}  }
class C{  public void loadSystemCatalogs() throws IOException {  Vector catalogs=catalogManager.getCatalogFiles();  if (catalogs != null) {    for (int count=0; count < catalogs.size(); count++) {      catalogFiles.addElement(catalogs.elementAt(count));    }  }  if (catalogFiles.size() > 0) {    String catfile=(String)catalogFiles.lastElement();    catalogFiles.removeElement(catfile);    parseCatalog(catfile);  }}  }
class C{  public static boolean isCyberwareInstalled(@Nullable Entity targetEntity,ItemStack stack){  if (!hasCapability(targetEntity))   return false;  ICyberwareUserData cyberware=getCapability(targetEntity);  return cyberware.isCyberwareInstalled(stack);}  }
class C{  public void clear(){  this.bodies.clear();  this.joints.clear();  this.contactConstraints.clear();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void apply(ProgressListener progress) throws CanceledException {  progress.setSubtask("Computing graph layout");  progress.setMaximum(-1);  progress.setProgress(0);  Set<Edge> pathEdges=new HashSet<>();  if (paths != null) {    for (    Node[] path : paths) {      for (int i=0; i < path.length - 1; i++) {        Node v=path[i];        for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {          if (e.getTarget() == path[i + 1])           pathEdges.add(e);        }      }    }  }  final FruchtermanReingoldLayout fruchtermanReingoldLayout=new FruchtermanReingoldLayout(overlapGraph,null);  NodeArray<Point2D> coordinates=new NodeArray<>(overlapGraph);  fruchtermanReingoldLayout.apply(1000,coordinates);  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {    graphView.setLocation(v,coordinates.get(v));    graphView.setHeight(v,5);    graphView.setWidth(v,5);  }  for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {    graphView.setDirection(e,EdgeView.DIRECTED);    if (pathEdges.contains(e)) {      graphView.setLineWidth(e,2);      graphView.setLineWidth(e.getSource(),2);      graphView.setLineWidth(e.getTarget(),2);    }  }  JFrame frame=new JFrame("Assembly Graph");  graphView.setFrame(frame);  frame.setSize(graphView.getSize());  frame.setLocation(100,100);  frame.addKeyListener(graphView.getGraphViewListener());  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(graphView.getScrollPane(),BorderLayout.CENTER);  frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  CommandManager commandManager=new CommandManager(dir,graphView,new String[]{"megan.commands"});  commandManager.addCommands(this,Collections.singletonList((ICommand)(new SelectFromPreviousWindowCommand())),true);  MenuConfiguration menuConfig=GUIConfiguration.getMenuConfiguration();  MenuBar menuBar=new jloda.gui.MenuBar(menuConfig,commandManager);  frame.setJMenuBar(menuBar);  Rectangle2D bbox=graphView.getBBox();  graphView.trans.setCoordinateRect(bbox);  frame.setVisible(true);  graphView.getScrollPane().revalidate();  graphView.centerGraph();  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public LeadsGetStatsQuery secret(String value){  return unsafeParam("secret",value);}  }
class C{  private void printHelp(){  HelpFormatter formatter=new HelpFormatter();  formatter.setWidth(140);  formatter.printHelp("DistributedTestDriver",cliOptions);}  }
class C{  public ZoomToFitControl(String group,int button){  this.m_group=group;  this.m_button=button;}  }
class C{  private MetadataExportParams filterMetadataOptions(){  MetadataExportParams params=new MetadataExportParams();  params.addQuery(Query.from(schemaService.getSchema(DataElement.class)));  params.addQuery(Query.from(schemaService.getSchema(DataSet.class)));  params.addQuery(Query.from(schemaService.getSchema(DataElementCategoryOptionCombo.class)));  return params;}  }
class C{  public void unregister(Object provider){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getProvider().equals(provider)) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  private void addEntry(){  filterModel.addNewEntry();  extentModel.populate(null);  removeFTCButton.setEnabled(false);  addExtentButton.setEnabled(false);  removeExtentButton.setEnabled(false);}  }
class C{  public static int removeLastRowsTable(JTable table){  if (table.getRowCount() == 0) {    return 0;  }  DefaultTableModel model=(DefaultTableModel)table.getModel();  int count=0;  while (true) {    boolean remove=true;    for (int i=0; i < table.getColumnCount(); i++) {      String data=getStringValueTable(table,table.getRowCount() - 1,i);      if (!data.equals("")) {        remove=false;        break;      }    }    if (remove) {      count++;      model.removeRow(model.getRowCount() - 1);    } else {      break;    }  }  return count;}  }
class C{  public ConfettiManager enableFadeOut(Interpolator fadeOutInterpolator){  this.fadeOutInterpolator=fadeOutInterpolator;  return this;}  }
class C{  private int simpleGroupPath_index(dictionary_delta dict_delta,SimpleGroupPath group){  final BiMap<SimpleGroupPath,Integer> dict=from_.getGroupDict().inverse();  final Integer resolved=dict.get(group);  if (resolved != null)   return resolved;  final int allocated=allocate_index_(dict);  dict.put(group,allocated);  path_dictionary_delta gdd=new path_dictionary_delta();  gdd.id=allocated;  gdd.value=new_path_(group.getPath());  dict_delta.gdd=Stream.concat(Arrays.stream(dict_delta.gdd),Stream.of(gdd)).toArray(null);  LOG.log(Level.FINE,"dict_delta.gdd: {0} items (added {1})",new Object[]{dict_delta.gdd.length,group});  return allocated;}  }
class C{  public void updateView(String what){  this.uptodate=false;  if (what.equals(IDirector.ALL)) {    if (ignoreNextUpdateAll)     ignoreNextUpdateAll=false; else     groupsPanel.syncDocumentToPanel();  }  statusBar.setText2(String.format("Samples=%d Groups=%d",groupsPanel.getNumberOfSamples(),groupsPanel.getNumberOfGroups()));  commandManager.updateEnableState();  this.setTitle();  this.uptodate=true;}  }
class C{  @BeforeClass public void createResponseSpecification(){  RestAssured.baseURI="http://localhost:9876";}  }
class C{  @Override public void handleNotification(Notification notification,Object handback){  LocalGossipMember deadMember=(LocalGossipMember)notification.getUserData();  GossipService.LOGGER.debug("Dead member detected: " + deadMember);  members.put(deadMember,GossipState.DOWN);  if (listener != null) {    listener.gossipEvent(deadMember,GossipState.DOWN);  }}  }
class C{  public StatisticsNotAvailable(String s){  super(s);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showTriPlot=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.getPcoaTab().setShowTriPlot(show);  try {    viewer.updateView(IDirector.ENABLE_STATE);  } catch (  Exception ex) {    Basic.caught(ex);  }}  }
class C{  public static SinkRecord spoofSinkRecord(String topic){  return spoofSinkRecord(topic,"sink task test row");}  }
class C{  public static Map<String,Object> clearCacheLine(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Boolean distributeBool=(Boolean)context.get("distribute");  boolean distribute=false;  if (distributeBool != null)   distribute=distributeBool.booleanValue();  if (context.containsKey("value")) {    GenericValue value=(GenericValue)context.get("value");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by value service call; entityName: " + value.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by value service call; value: " + value,module);    delegator.clearCacheLine(value,distribute);  } else   if (context.containsKey("dummyPK")) {    GenericEntity dummyPK=(GenericEntity)context.get("dummyPK");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by dummyPK service call; entityName: " + dummyPK.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by dummyPK service call; dummyPK: " + dummyPK,module);    delegator.clearCacheLineFlexible(dummyPK,distribute);  } else   if (context.containsKey("primaryKey")) {    GenericPK primaryKey=(GenericPK)context.get("primaryKey");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by primaryKey service call; entityName: " + primaryKey.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by primaryKey service call; primaryKey: " + primaryKey,module);    delegator.clearCacheLine(primaryKey,distribute);  } else   if (context.containsKey("condition")) {    String entityName=(String)context.get("entityName");    EntityCondition condition=(EntityCondition)context.get("condition");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by condition service call; entityName: " + entityName,module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by condition service call; condition: " + condition,module);    delegator.clearCacheLineByCondition(entityName,condition,distribute);  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public Builder clickable(Boolean clickable){  this.clickable=clickable;  return this;}  }
class C{  private String resolveSystemId(String systemId,String baseURI){  try {    return XMLEntityManager.expandSystemId(systemId,baseURI,false);  } catch (  URI.MalformedURIException ex) {    return systemId;  }}  }
class C{  public Response<?> response(){  return response;}  }
class C{  private boolean canAddTask(){  return tCur == null;}  }
class C{  public DynamicClassLoader(URL[] urls){  super(urls);  classPath=new java.util.HashSet(urls.length);  for (int i=0; i < urls.length; i++) {    classPath.add(urls[i]);  }}  }
class C{  public final boolean canSetBoolean(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetBoolean());}  }
class C{  @Override public void onResponse(GankData response){  getContentText.setText(response.toString());}  }
class C{  private void prepareNoDictionaryMapping(List<CarbonDimension> dims,GraphConfigurationInfo graphConfig){  List<Boolean> noDictionaryMapping=new ArrayList<Boolean>();  for (  CarbonDimension dimension : dims) {    if (dimension.getNumberOfChild() > 0) {      break;    }    if (!dimension.getEncoder().contains(Encoding.DICTIONARY)) {      noDictionaryMapping.add(true);    } else {      noDictionaryMapping.add(false);    }  }  graphConfig.setIsNoDictionaryDimMapping(noDictionaryMapping.toArray(new Boolean[noDictionaryMapping.size()]));}  }
class C{  public boolean shouldAllowNavigation(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowNavigation(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://") || url.startsWith("about:blank");}  }
class C{  @NotNull public static String attrOrDefault(@NotNull Attributes attributes,@NotNull String name,@NotNull String defaultValue){  String value=attributes.getValue(name);  return (value != null) ? value : defaultValue;}  }
class C{  public void msgNotFound(){  JOptionPane.showMessageDialog(null,"Search String " + pattern + " not found","Find",JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public static void flagDocumentAsCorrected(Element element){  Document doc=element.getOwnerDocument();  if (doc != null) {    doc.setUserData("autoCorrected","true",null);  }}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public Dfp newInstance(final double x){  return new Dfp(getField(),x);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public static final boolean isConvertible(final Object value,final String className){  return (cast(value,className) != null);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  FailOverPolicy.FailOverPolicyDescription copy=(FailOverPolicy.FailOverPolicyDescription)is.readObject();  is.close();  os.close();  assertEquals("k1",copy.m_BackupMemberNames.get("a1").iterator().next());}  }
class C{  private static String byteArrayToString(byte[] bytes){  StringBuilder builder=new StringBuilder("[");  for (int i=0; i < bytes.length; i++) {    if (i > 0) {      builder.append(", ");    }    builder.append(byteToString(bytes[i]));  }  return builder.append(']').toString();}  }
class C{  public void stop(){  for (  final StoppableTask task : backgroundTasks) {    task.stop();  }}  }
class C{  private String makeSetterMethodName(Field field){  String setterMethodName;  String setterMethodPrefix="set";  if (isPrimitiveBooleanType(field) && field.getName().matches("^is[A-Z]{1}.*$")) {    setterMethodName=setterMethodPrefix + field.getName().substring(2);  } else   if (field.getName().matches("^[a-z]{1}[A-Z]{1}.*")) {    setterMethodName=setterMethodPrefix + field.getName();  } else {    setterMethodName=setterMethodPrefix + BaseUtility.capitalize(field.getName());  }  return setterMethodName;}  }
class C{  public void event(String action,String param,long duration){  currentTest.get().event(action,param,duration);}  }
class C{  public String makeStringValueSQ(String value){  value=StringUtils.replace(value,"\\","\\\\");  value=StringUtils.replace(value,"${","$\\{");  value=StringUtils.replace(value,"'","\\'");  return value;}  }
class C{  public FuzzyKMeansClusterer(final int k,final double fuzziness) throws MathIllegalArgumentException {  this(k,fuzziness,-1,new EuclideanDistance());}  }
class C{  private void transfer(Entry[] src,Entry[] dest){  for (int j=0; j < src.length; ++j) {    Entry e=src[j];    src[j]=null;    while (e != null) {      Entry next=e.next;      Object key=e.get();      if (key == null || (timeToLive > 0 && ((TimedEntry)e).isExpired(timeToLive))) {        e.next=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    ExpirationDatePickerDialogFragment dialog=ExpirationDatePickerDialogFragment.newInstance(mFile,-1);    dialog.show(getActivity().getSupportFragmentManager(),ExpirationDatePickerDialogFragment.DATE_PICKER_DIALOG);  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().setExpirationDateToShareViaLink(mFile,-1);  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnExpirationDateInteractionListener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_CHANGE_FORCE_NUMBER_ME(int num0){  return new SM_SYSTEM_MESSAGE(1400589,num0);}  }
class C{  public static void cleanPatch(Context context){  Tinker.with(context).cleanPatch();}  }
class C{  public HTMLSerializer(Writer writer,OutputFormat format){  this(false,format != null ? format : new OutputFormat(Method.HTML,"ISO-8859-1",false));  setOutputCharStream(writer);}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(getChildCount() - 1,-1,true);  return child == null ? NO_POSITION : getPosition(child);}  }
class C{  public static short convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return (short)ColumnType.SHORT_INT.getMissingValue();  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Short.parseShort(matcher.replaceAll(""));}  }
class C{  public AdsGetAdsTargetingQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getAdsTargeting",Utils.buildParametrizedType(List.class,TargSettings.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  public void printContext(PrintStream out){  out.println(getMessage());  out.print(context);}  }
class C{  public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {  AssetManager manager=context.getAssets();  final InputStream is=manager.open(assetsFilename);  copyFile(file,is,mode);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static final void toString(StringBuffer output,float[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  public MessagesGetLongPollHistoryQuery maxMsgId(Integer value){  return unsafeParam("max_msg_id",value);}  }
class C{  int onDelete(Class<?> modelClass,long id){  analyzeAssociations(modelClass);  int rowsAffected=deleteCascade(modelClass,id);  rowsAffected+=mDatabase.delete(getTableName(modelClass),"id = " + id,null);  getForeignKeyTableToDelete().clear();  return rowsAffected;}  }
class C{  private final static void clearReferencesJdbc(ClassLoader classLoader){  InputStream is=classLoader.getResourceAsStream("com/gigaspaces/internal/utils/JdbcLeakPrevention.class");  byte[] classBytes=new byte[2048];  int offset=0;  try {    int read=is.read(classBytes,offset,classBytes.length - offset);    while (read > -1) {      offset+=read;      if (offset == classBytes.length) {        byte[] tmp=new byte[classBytes.length * 2];        System.arraycopy(classBytes,0,tmp,0,classBytes.length);        classBytes=tmp;      }      read=is.read(classBytes,offset,classBytes.length - offset);    }    Method defineClassMethod=ClassLoader.class.getDeclaredMethod("defineClass",String.class,byte[].class,int.class,int.class);    defineClassMethod.setAccessible(true);    Class<?> lpClass=(Class<?>)defineClassMethod.invoke(classLoader,"com.gigaspaces.internal.utils.JdbcLeakPrevention",classBytes,0,offset);    Object obj=lpClass.newInstance();    @SuppressWarnings("unchecked") List<String> driverNames=(List<String>)obj.getClass().getMethod("clearJdbcDriverRegistrations").invoke(obj);    for (    String name : driverNames) {      if (logger.isLoggable(Level.FINE))       logger.fine("A class loader registered the JDBC driver [" + name + "] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.");    }  } catch (  Exception e) {    if (logger.isLoggable(Level.FINE))     logger.log(Level.FINE,"JDBC driver de-registration failed",e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public static <K,V>Type<Entry<K,V>> entryType(Type<? extends Map<K,V>> mapType){  Type<?> type=TypeFactory.valueOf(Entry.class,mapType.getActualTypeArguments());  return (Type<Entry<K,V>>)type;}  }
class C{  private boolean isAttributeComboBoxPopulated(){  return !populatingAttributeComboBox;}  }
class C{  public static BigDecimal findProductMrpQoh(String mrpId,GenericValue product,String facilityId,LocalDispatcher dispatcher,Delegator delegator){  return findProductMrpQoh(mrpId,product.getString("productId"),facilityId,dispatcher,delegator);}  }
class C{  public static void openFile(File file,Context context){  try {    Intent intent=new Intent();    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.setAction(Intent.ACTION_VIEW);    String type=MIMEType.getMIMEType(file);    intent.setDataAndType(Uri.fromFile(file),type);    context.startActivity(intent);  } catch (  ActivityNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public Vector2f(Vector2f vector2f){  this.x=vector2f.x;  this.y=vector2f.y;}  }
class C{  public FloatDataType(byte[] buf){  if (buf.length != this.getSize()) {    throw new DataTypeException("Wrong size buffer for float");  }  this.f=ByteBuffer.wrap(buf).getFloat();}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("copyImage;");  ClusterViewer viewer=getViewer();  JPanel panel=viewer.getPanel();  JScrollPane scrollPane=viewer.getSelectedScrollPane();  TransferableGraphic tg=new TransferableGraphic(panel,scrollPane);  Toolkit.getDefaultToolkit().getSystemClipboard().setContents(tg,tg);}  }
class C{  private void validateOrderByAttribute(String attributeName){  if ((!nameToAggregateAttributeMap.containsKey(attributeName)) && (!nameToGroupByAttributeMap.containsKey(attributeName))) {    throw new MithraBusinessException("Aggregate list cannot be order by  attribute with name: " + attributeName + ".\n"+ "An AggregateList can only be ordered by an attribute which is either a AggregateAttribute or a GroupByAttribute");  }}  }
class C{  protected final void endNamespaceMapping() throws SAXException {  int count=fNamespaceContext.getDeclaredPrefixCount();  if (count > 0) {    for (int i=0; i < count; i++) {      fContentHandler.endPrefixMapping(fNamespaceContext.getDeclaredPrefixAt(i));    }  }}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public T remove(final int location){  final T removedObject=this.data.remove(location);  this.notifyItemRemoved(location);  this.notifyItemRangeChanged(location,this.data.size());  return removedObject;}  }
class C{  @Override public void verifyOrCreateReport(String reportId){  checkNotNull(reportId,"reportId");  String tableName=getTableName(reportId);  if (_dataStore.getTableExists(tableName)) {    return;  }  try {    _dataStore.createTable(tableName,new TableOptionsBuilder().setPlacement(_systemTablePlacement).build(),ImmutableMap.<String,String>of(),new AuditBuilder().setComment("create table").build());  } catch (  TableExistsException e) {  }}  }
class C{  private void toWagonFormat(IntArrayLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {  StringBuilder sb=new StringBuilder();  int data[]=node.getIntData();  sb.append("(((");  for (int i=0; i < data.length; i++) {    sb.append("(" + data[i] + " 0)");    if (i + 1 != data.length) {      sb.append(" ");    }  }  sb.append(") 0))" + extension);  if (out != null) {    writeStringToOutput(sb.toString(),out);  } else {  }  if (pw != null) {    pw.println(sb.toString());  }}  }
class C{  void updateFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.updateFinish();}  }
class C{  protected boolean preCastCheck(){  Conditions skillConditions=skillTemplate.getStartconditions();  return skillConditions != null ? skillConditions.validate(this) : true;}  }
class C{  public WildcardFilter(String wildcard){  if (wildcard == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.wildcards=new String[]{wildcard};}  }
class C{  public static boolean isContiguousStateCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  return ((ContiguousUSStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));}  }
class C{  protected Bindings createBindings(VariableScope variableScope){  return scriptBindingsFactory.createBindings(variableScope);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MASTER_HE_DECLINE_YOUR_OFFER(String value0){  return new SM_SYSTEM_MESSAGE(1300332,value0);}  }
class C{  private void start(){  if (start != 0) {    LOG.warn("Tried to start timer that is already running: {}",name);    return;  }  start=System.nanoTime();}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  private static Object compressMaxMin(DataType changedDataType,double[] value,double maxValue){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)(maxValue - a);    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)(maxValue - a);i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)(maxValue - a);i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)(maxValue - a);i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)(maxValue - a);i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {defaultResult[i]=(double)(maxValue - a);i++;}return defaultResult;}}  }
class C{  private void bossUseSkill(int skillId){  AI2Actions.useSkill(this,skillId);}  }
class C{  private LookupResult findBrokerServiceUrl(ServiceUnitId suName,boolean authoritative,boolean readOnly) throws PulsarServerException {  if (LOG.isDebugEnabled()) {    LOG.debug("findBrokerServiceUrl: {} - read-only: {}",suName,readOnly);  }  try {    NamespaceEphemeralData ownerInfo=checkNotNull(ownershipCache.getOwner(suName));    if (ownerInfo.isDisabled()) {      throw new IllegalStateException(String.format("ServiceUnit %s is tentatively out-of-service.",suName));    }    if (LOG.isDebugEnabled()) {      LOG.debug("SU {} already owned by {} ",suName,ownerInfo.toString());    }    return new LookupResult(ownerInfo);  } catch (  NoNodeException nne) {    LOG.debug("NoNodeException ",nne);  }catch (  NullPointerException npe) {    LOG.debug("NullPointerException ",npe);  }catch (  IllegalStateException ise) {    LOG.warn("ServiceUnit {} is tentatively out-of-service.",suName);    throw ise;  }catch (  Exception e) {    LOG.error("Failed to get ownership info from ZooKeeper cache for ServiceUnit {}",suName);    throw new PulsarServerException(e);  }  if (readOnly) {    throw new IllegalStateException(String.format("Can't find owner of ServiceUnit: %s",suName));  }  String candidateBroker=null;  try {    candidateBroker=checkHeartbeatNamespace(suName);    if (candidateBroker == null) {      String broker=getSLAMonitorBrokerName(suName);      if (broker != null && isBrokerActive(broker)) {        candidateBroker=broker;      }    }    if (candidateBroker == null) {      if (!this.loadManager.isCentralized() || pulsar.getLeaderElectionService().isLeader()) {        candidateBroker=getLeastLoadedFromLoadManager(suName);      } else {        if (authoritative) {          candidateBroker=pulsar.getWebServiceAddress();        } else {          candidateBroker=pulsar.getLeaderElectionService().getCurrentLeader().getServiceUrl();        }      }    }  } catch (  IllegalStateException ise) {    throw ise;  }catch (  Exception oe) {    LOG.warn(String.format("Cannot find candidate broker for ServiceUnit %s in findBrokerServiceUrl:[%s]",suName,oe.getMessage()),oe);  }  checkNotNull(candidateBroker);  try {    if (pulsar.getWebServiceAddress().equals(candidateBroker)) {      NamespaceEphemeralData ownerInfo=checkNotNull(ownershipCache.getOrSetOwner(suName));      if (ownerInfo.isDisabled()) {        LOG.warn("ServiceUnit {} is tentatively out-of-service",suName);        throw new IllegalStateException(String.format("ServiceUnit %s is tentatively out-of-service",suName));      }      pulsar.loadNamespaceDestinations(suName);      return new LookupResult(ownerInfo);    } else {      if (LOG.isDebugEnabled()) {        LOG.debug("My BrokerServiceUrl{}, WebServiceAddress[{}] : other instance owns the namespace, owner " + "address={} suName={}",pulsar.getBrokerServiceUrl(),pulsar.getWebServiceAddress(),candidateBroker,suName);      }      return new LookupResult(new URI(candidateBroker));    }  } catch (  IllegalStateException ise) {    throw ise;  }catch (  Exception e2) {    LOG.warn(String.format("Failed to acquire the ServiceUnit %s in findBrokerServiceUrl:[%s]",suName,e2.getMessage()),e2);    throw new PulsarServerException(e2);  }}  }
class C{  public boolean processRequest(String message){  JsonRootNode root=JSONUtility.jsonFromString(message);  if (root == null || !verifyMessage(root)) {    getLogger().warning("Invalid messaged received " + message);    return false;  }  getLogger().fine("Receive " + message);  IpcMessageType type=IpcMessageType.identify(root.getStringValue("type"));  long id=Long.parseLong(root.getNumberValue("id"));  JsonNode content=root.getNode("content");  try {    messageProcesssors.get(type).process(type.getValue(),id,content);    return true;  } catch (  InterruptedException e) {    getLogger().log(Level.WARNING,"Interrupted while processing message",e);    return false;  }}  }
class C{  @Override public ASElementDeclaration createASElementDeclaration(String namespaceURI,String name) throws DOMException {  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  public void cancelAnimation(){  if (ps != null) {    ps.cancel();    isPlaying=false;  }}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathNotNull(String path){  return path(path,isNotNull());}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  protected void validateDestinationOwnership(DestinationName fqdn,boolean authoritative){  NamespaceService nsService=pulsar().getNamespaceService();  try {    URL webUrl=nsService.getWebServiceUrl(fqdn,authoritative,false);    if (webUrl == null) {      log.info("Unable to get web service url");      throw new RestException(Status.PRECONDITION_FAILED,"Failed to find ownership for destination:" + fqdn);    }    if (!nsService.isServiceUnitOwned(fqdn)) {      boolean newAuthoritative=this.isLeaderBroker();      URI redirect=UriBuilder.fromUri(uri.getRequestUri()).host(webUrl.getHost()).port(webUrl.getPort()).replaceQueryParam("authoritative",newAuthoritative).build();      log.debug("Redirecting the rest call to {}",redirect);      throw new WebApplicationException(Response.temporaryRedirect(redirect).build());    }  } catch (  IllegalArgumentException iae) {    log.debug(String.format("Failed to find owner for destination:%s",fqdn),iae);    throw new RestException(Status.PRECONDITION_FAILED,"Can't find owner for destination " + fqdn);  }catch (  IllegalStateException ise) {    log.debug(String.format("Failed to find owner for destination:%s",fqdn),ise);    throw new RestException(Status.PRECONDITION_FAILED,"Can't find owner for destination " + fqdn);  }catch (  WebApplicationException wae) {    throw wae;  }catch (  Exception oe) {    log.debug(String.format("Failed to find owner for destination:%s",fqdn),oe);    throw new RestException(oe);  }}  }
class C{  public void collapseToDefault(){  getCollapsedIds().clear();  getCollapsedIds().add(2759);  getCollapsedIds().add(2157);  getCollapsedIds().add(2);  getCollapsedIds().add(28384);  getCollapsedIds().add(12908);  getCollapsedIds().add(12884);  getCollapsedIds().add(10239);}  }
class C{  public static void updateInt(VisualItem item,String field,int val){  item.setInt(getStartField(field),item.getInt(field));  item.setInt(field,val);  item.setInt(getEndField(field),val);}  }
class C{  public CachedPattern(String regexp){  this.regexp=regexp;}  }
class C{  private void testRotate(){  JniBitmapHolder holder=new JniBitmapHolder();  holder.storeBitmap(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));  holder.rotateBitmap180();  ImageView icon=new ImageView(this);  icon.setImageBitmap(holder.getBitmapAndFree());  Toast toast=new Toast(this);  toast.setView(icon);  toast.setDuration(Toast.LENGTH_LONG);  toast.show();}  }
class C{  public static void reset(){  if (getMocks() != null) {    getMocks().clear();  }}  }
class C{  public FileMgr(String dbName){  dbDirectory=new File(DB_FILES_DIR,dbName);  logDirectory=new File(LOG_FILES_DIR,dbName);  isNew=!dbDirectory.exists();  if (isNew && !dbDirectory.equals(logDirectory)) {    if (logDirectory.exists()) {      deleteLogFiles();    } else     if (!logDirectory.mkdir())     throw new RuntimeException("cannot create log file for" + dbName);  }  if (!isNew && !logDirectory.exists())   throw new RuntimeException("log file for the existed " + dbName + " is missing");  if (isNew && (!dbDirectory.mkdir()))   throw new RuntimeException("cannot create " + dbName);  for (  String filename : dbDirectory.list())   if (filename.startsWith(TMP_FILE_NAME_PREFIX))   new File(dbDirectory,filename).delete();  if (logger.isLoggable(Level.INFO))   logger.info("block size " + Page.BLOCK_SIZE);  for (int i=0; i < anchors.length; ++i)   anchors[i]=new Object();}  }
class C{  private RegularExpressionConverter(){}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_InvokeDynamic_info cu=(CONSTANT_InvokeDynamic_info)cp;  i=constant_pool[bootstrap_method_index].compareTo(constant_pool,cp_constant_pool[cu.bootstrap_method_index],cp_constant_pool);  if (i != 0)   return i;  i=constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);  return i;}  }
class C{  public Bindings add(String property,JToggleButton c,boolean defaultValue){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,defaultValue));}  }
class C{  public void timeCheck() throws TimeoutException {  if (startTime > 0 && System.nanoTime() > timeout) {    throw new TimeoutException();  }}  }
class C{  public SumTask(Class<R> reduceType,Task<T> task,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(task,filter);  this.reducer=new SumReducer<T,R>(reduceType);}  }
class C{  public GSXAQueueConnectionImpl(GSXAConnectionFactoryImpl factory) throws JMSException {  super(factory);}  }
class C{  protected void initAttrs(AttributeSet attrs,int defStyle){  TypedArray a=getContext().getTheme().obtainStyledAttributes(attrs,R.styleable.ChangeLogListView,defStyle,defStyle);  try {    mRowLayoutId=a.getResourceId(R.styleable.ChangeLogListView_rowLayoutId,mRowLayoutId);    mRowHeaderLayoutId=a.getResourceId(R.styleable.ChangeLogListView_rowHeaderLayoutId,mRowHeaderLayoutId);    mChangeLogFileResourceId=a.getResourceId(R.styleable.ChangeLogListView_changeLogFileResourceId,mChangeLogFileResourceId);    mChangeLogFileResourceUrl=a.getString(R.styleable.ChangeLogListView_changeLogFileResourceUrl);  }  finally {    a.recycle();  }}  }
class C{  public boolean with_rectarray(){  return soot.PhaseOptions.getBoolean(options,"with-rectarray");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200700,skillcaster,num0,skillname);}  }
class C{  private void findClusterAndLaunchBulk(){  Thread clusterFinder=new Thread(null,"C2MON-ES-Module-Cluster-Health-Check");  log.info("init() - Trying to connect to Elasticsearch cluster {} on host={}, port={}",cluster,host,port);  clusterFinder.start();}  }
class C{  @deprecated public CompactByteArray(){  this((byte)0);}  }
class C{  public ZWaveCRC16EncapsulationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void postRequest(@NonNull Context context,String url,JSONObject body,ApiListener apiListener){  request(context,Request.Method.POST,url,body,apiListener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CRAFT_INFO_UPGRADE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1330064,value0,value1);}  }
class C{  private void removeEntry(){  filterModel.removeEntries(filterTable.getSelectionModel().getMinSelectionIndex(),filterTable.getSelectionModel().getMaxSelectionIndex());  extentModel.populate(null);  removeFTCButton.setEnabled(false);  addExtentButton.setEnabled(false);  removeExtentButton.setEnabled(false);}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  protected boolean recurse(){  return _lookingFor > 0;}  }
class C{  @DataProvider public Object[][] badExperimentsDELETE(){  Experiment experiment=new Experiment();  return new Object[][]{new Object[]{new Experiment(experiment.setId("ca9c56b0-f219-40da-98fa-d01d27c97ae5")),"Experiment \"ca9c56b0-f219-40da-98fa-d01d27c97ae5\" not found",HttpStatus.SC_NOT_FOUND},new Object[]{new Experiment(experiment.setId("foobar")),"com.intuit.wasabi.experimentobjects.exceptions.InvalidIdentifierException: Invalid experiment identifier \"foobar\"",HttpStatus.SC_INTERNAL_SERVER_ERROR},new Object[]{new Experiment(experiment.setId("")),"The server was unable to process the request",HttpStatus.SC_INTERNAL_SERVER_ERROR}};}  }
class C{  public void replaceStyle(Style newStyle){  List<Style> styleList=null;  if (this.symbolData.getStyledLayer() instanceof NamedLayerImpl) {    NamedLayerImpl namedLayer=(NamedLayerImpl)this.symbolData.getStyledLayer();    styleList=namedLayer.styles();  } else   if (this.symbolData.getStyledLayer() instanceof UserLayerImpl) {    UserLayerImpl userLayer=(UserLayerImpl)this.symbolData.getStyledLayer();    styleList=userLayer.userStyles();  }  if (styleList != null) {    int indexFound=-1;    int index=0;    for (    Style style : styleList) {      if (style == this.symbolData.getStyle()) {        indexFound=index;        break;      } else {        index++;      }    }    if (indexFound > -1) {      styleList.remove(indexFound);      styleList.add(indexFound,newStyle);      setStyle(newStyle);    }  }}  }
class C{  public void writeFloat(float value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeFloat(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public NewsfeedGetQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public void testDueDateSortingWithNulls(){  Date now=processEngineConfiguration.getClock().getCurrentTime();  createTask("task0",new Date(now.getTime() + (4L * 7L * 24L* 60L* 60L* 1000L)));  createTask("task1",new Date(now.getTime() + (2 * 24L * 60L* 60L* 1000L)));  createTask("task2",new Date(now.getTime() + (7L * 24L * 60L* 60L* 1000L)));  createTask("task3",new Date(now.getTime() + (24L * 60L * 60L* 1000L)));  createTask("task4",null);  createTask("task5",null);  assertEquals(6,taskService.createTaskQuery().count());  List<Task> tasks=taskService.createTaskQuery().orderByDueDateNullsLast().asc().list();  for (int i=0; i < 4; i++) {    assertNotNull(tasks.get(i).getDueDate());  }  assertEquals("task3",tasks.get(0).getName());  assertEquals("task1",tasks.get(1).getName());  assertEquals("task2",tasks.get(2).getName());  assertEquals("task0",tasks.get(3).getName());  assertNull(tasks.get(4).getDueDate());  assertNull(tasks.get(5).getDueDate());  tasks=taskService.createTaskQuery().orderByDueDateNullsLast().desc().list();  for (int i=0; i < 4; i++) {    assertNotNull(tasks.get(i).getDueDate());  }  assertEquals("task0",tasks.get(0).getName());  assertEquals("task2",tasks.get(1).getName());  assertEquals("task1",tasks.get(2).getName());  assertEquals("task3",tasks.get(3).getName());  assertNull(tasks.get(4).getDueDate());  assertNull(tasks.get(5).getDueDate());  tasks=taskService.createTaskQuery().orderByDueDateNullsFirst().asc().list();  assertNull(tasks.get(0).getDueDate());  assertNull(tasks.get(1).getDueDate());  assertEquals("task3",tasks.get(2).getName());  assertEquals("task1",tasks.get(3).getName());  assertEquals("task2",tasks.get(4).getName());  assertEquals("task0",tasks.get(5).getName());  tasks=taskService.createTaskQuery().orderByDueDateNullsFirst().desc().list();  assertNull(tasks.get(0).getDueDate());  assertNull(tasks.get(1).getDueDate());  assertEquals("task0",tasks.get(2).getName());  assertEquals("task2",tasks.get(3).getName());  assertEquals("task1",tasks.get(4).getName());  assertEquals("task3",tasks.get(5).getName());  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {    List<HistoricTaskInstance> historicTasks=historyService.createHistoricTaskInstanceQuery().orderByDueDateNullsLast().asc().list();    for (int i=0; i < 4; i++) {      assertNotNull(historicTasks.get(i).getDueDate());    }    assertEquals("task3",historicTasks.get(0).getName());    assertEquals("task1",historicTasks.get(1).getName());    assertEquals("task2",historicTasks.get(2).getName());    assertEquals("task0",historicTasks.get(3).getName());    assertNull(historicTasks.get(4).getDueDate());    assertNull(historicTasks.get(5).getDueDate());    historicTasks=historyService.createHistoricTaskInstanceQuery().orderByDueDateNullsLast().desc().list();    for (int i=0; i < 4; i++) {      assertNotNull(historicTasks.get(i).getDueDate());    }    assertEquals("task0",historicTasks.get(0).getName());    assertEquals("task2",historicTasks.get(1).getName());    assertEquals("task1",historicTasks.get(2).getName());    assertEquals("task3",historicTasks.get(3).getName());    assertNull(historicTasks.get(4).getDueDate());    assertNull(historicTasks.get(5).getDueDate());    historicTasks=historyService.createHistoricTaskInstanceQuery().orderByDueDateNullsFirst().asc().list();    assertNull(historicTasks.get(0).getDueDate());    assertNull(historicTasks.get(1).getDueDate());    assertEquals("task3",historicTasks.get(2).getName());    assertEquals("task1",historicTasks.get(3).getName());    assertEquals("task2",historicTasks.get(4).getName());    assertEquals("task0",historicTasks.get(5).getName());    historicTasks=historyService.createHistoricTaskInstanceQuery().orderByDueDateNullsFirst().desc().list();    assertNull(historicTasks.get(0).getDueDate());    assertNull(historicTasks.get(1).getDueDate());    assertEquals("task0",historicTasks.get(2).getName());    assertEquals("task2",historicTasks.get(3).getName());    assertEquals("task1",historicTasks.get(4).getName());    assertEquals("task3",historicTasks.get(5).getName());  }}  }
class C{  public Created(ActivationGroupID gid,ActivationID aid,Object proxy){  this.gid=gid;  this.aid=aid;  this.proxy=proxy;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200815,skillcaster,skillname);}  }
class C{  private void giveUpAudioFocus(){  if (mAudioFocus == AudioFocus.FOCUS && mAudioManager != null && AudioManager.AUDIOFOCUS_REQUEST_GRANTED == mAudioManager.abandonAudioFocus(this)) {    mAudioFocus=AudioFocus.NO_FOCUS;  }}  }
class C{  public static Zmat ahib(Zmat A,Zmat B) throws JampackException {  Zludpp LU;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.LU == null)     A.LU=new Zludpp(A);    LU=A.LU;  } else   LU=new Zludpp(A);  return Pivot.rowi(Solve.ahib(LU.L,Solve.ahib(LU.U,B)),LU.pvt);}  }
class C{  protected AbstractFormat(){  this(getDefaultNumberFormat());}  }
class C{  private boolean isGeometry(DataTypeEnum typeOfData,ComplexDataCombinationsType dataType){  int count=0;  for (  Object obj : dataType.getFormat()) {    if (obj instanceof ComplexDataDescriptionType) {      ComplexDataDescriptionType format=(ComplexDataDescriptionType)obj;switch (typeOfData) {case E_VECTOR:        if (vectorGeometryTypeList.contains(format.getMimeType())) {          count++;        }      break;case E_RASTER:    if (rasterGeometryTypeList.contains(format.getMimeType())) {      count++;    }  break;default :break;}}}return (count > 3);}  }
class C{  public void minimizePalette(){  if (myToolWindow != null) {    try {      LightToolWindow.class.getDeclaredMethod("minimize").invoke(myToolWindow);    } catch (    Exception ignore) {    }  }}  }
class C{  public PhotosGetAlbumsQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  public static int[] concat(int[]... args){  int totalLength=0;  for (  int[] arg : args) {    totalLength+=arg.length;  }  int[] res=new int[totalLength];  int i=0;  for (  int[] arg : args) {    for (    int element : arg) {      res[i]=element;      i++;    }  }  return res;}  }
class C{  public PhotosGetAllCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  default String primaryKey(String type,Collection<String> values){  return String.format(PRIMARY_KEY,type) + values.stream().collect(Collectors.joining());}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  if (cancelled != null) {    return cancelled;  }  Object retVal=gigaSpace.take(remotingEntry,0);  cancelled=retVal != null;  return cancelled;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public GSSimpleMessageImpl() throws JMSException {  super();}  }
class C{  public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){  ArrayList<ConstraintWidget> found=new ArrayList<>();  Rectangle area=new Rectangle(x,y,width,height);  for (  ConstraintWidget widget : container.getChildren()) {    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);    if (!decorator.isVisible()) {      continue;    }    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());    if (area.intersects(bounds)) {      found.add(widget);    }  }  return found;}  }
class C{  public void accountAuthenticationResponse(int accountId,String accountName,boolean result,AccountTime accountTime,byte accessLevel,byte membership,long toll){  AionConnection client=loginRequests.remove(accountId);  if (client == null) {    return;  }  Account account=AccountService.getAccount(accountId,accountName,accountTime,accessLevel,membership,toll);  if (!validateAccount(account)) {    log.info("Illegal account auth detected: " + accountId);    client.close(new SM_L2AUTH_LOGIN_CHECK(false,accountName),true);    return;  }  if (result) {    client.setAccount(account);    client.setState(AionConnection.State.AUTHED);    loggedInAccounts.put(accountId,client);    log.info("Account authed: " + accountId + " = "+ accountName);    client.sendPacket(new SM_L2AUTH_LOGIN_CHECK(true,accountName));  } else {    log.info("Account not authed: " + accountId);    client.close(new SM_L2AUTH_LOGIN_CHECK(false,accountName),true);  }}  }
class C{  public boolean dump_html(){  return soot.PhaseOptions.getBoolean(options,"dump-html");}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static JSpaceAttributes convertXML(String uri,boolean isConvertToSystemProperty) throws SAXException, ParserConfigurationException, IOException {  Document doc=XmlUtils.getDocumentBuilder().parse(uri);  Element root=doc.getDocumentElement();  JSpaceAttributes prop=new JSpaceAttributes();  convertXMLtoProperty(root,prop,isConvertToSystemProperty);  return prop;}  }
class C{  public static void distributeKinah(Player player,long amount){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    alliance.onEvent(new TeamKinahDistributionEvent<PlayerAlliance>(alliance,player,amount));  }}  }
class C{  public String localName(){  return theLocalName;}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] newbuf=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  double d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Double_info cu=(CONSTANT_Double_info)cp;  d=convert() - cu.convert();  return ((d > 0.0) ? 1 : ((d < 0.0) ? -1 : 0));}  }
class C{  public int compareTo(Object o){  Split split=(Split)o;  BitSet P=getFirstPart();  BitSet Q=split.getFirstPart();  int a=P.nextSetBit(0);  int b=Q.nextSetBit(0);  while (a > -1 && b > -1) {    if (a < b)     return -1; else     if (a > b)     return 1;    a=P.nextSetBit(a + 1);    b=Q.nextSetBit(b + 1);  }  if (a < b)   return -1; else   if (a > b)   return 1;  P=getSecondPart();  Q=split.getSecondPart();  a=P.nextSetBit(0);  b=Q.nextSetBit(0);  while (a > -1 && b > -1) {    if (a < b)     return -1; else     if (a > b)     return 1;    a=P.nextSetBit(a + 1);    b=Q.nextSetBit(b + 1);  }  if (a < b)   return -1; else   if (a > b)   return 1; else   return 0;}  }
class C{  public void verifyIsDisplayed(){  conditions.verify(visibilityOf(toolbar));}  }
class C{  public DatabaseGetRegionsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public List<LocalTime> top(int n){  List<LocalTime> top=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalTime.asLocalTime(values[i]));  }  return top;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HIS_PARTY_ENTERED_ALLIANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400014,value0);}  }
class C{  private void handleFileDataValueDelete(TrackedEntityDataValue dataValue){  FileResource fileResource=fetchFileResource(dataValue);  if (fileResource == null) {    return;  }  fileResourceService.deleteFileResource(fileResource.getUid());}  }
class C{  private void clean(){  Reference ref=fReferenceQueue.poll();  while (ref != null) {    Entry entry=((SoftGrammarReference)ref).entry;    if (entry != null) {      removeEntry(entry);    }    ref=fReferenceQueue.poll();  }}  }
class C{  public void gossipPerNodeData(GossipDataMessage message){  gossipManager.gossipPerNodeData(message);}  }
class C{  public JValueSlider(String title,float min,float max,float value){  this(title,new Float(min),new Float(max),new Float(value));}  }
class C{  public void chooseDayNightMode(@AppCompatDelegate.NightMode int mode){  checkInit();  mPreferences.edit().putInt(PREFERENCE_DAYNIGHT_KEY,mode).apply();}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"vfront");}  }
class C{  public static void e(String tag,String s,Object... args){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,String.format(s,args));}  }
class C{  public FloatBuffer toFloatBuffer(){  return toFloatBuffer(false);}  }
class C{  public Set<FlowGraphEdge> buildEdgeSet(DirectedGraph<Block> dg){  HashSet<FlowGraphEdge> edges=new HashSet<FlowGraphEdge>();  Iterator<Block> blockIt=dg.iterator();  while (blockIt.hasNext()) {    Block s=blockIt.next();    List<Block> preds=graph.getPredsOf(s);    List<Block> succs=graph.getSuccsOf(s);    if (preds.size() == 0) {      edges.add(new FlowGraphEdge(s,s));    }    if (succs.size() == 0) {      edges.add(new FlowGraphEdge(s,s));    } else {      Iterator succIt=succs.iterator();      while (succIt.hasNext()) {        edges.add(new FlowGraphEdge(s,succIt.next()));      }    }  }  return edges;}  }
class C{  public static void writeXmlDocument(OutputStream os,Node node,String encoding,boolean includeXmlDeclaration,boolean enablePrettyPrint) throws ClassCastException, ClassNotFoundException, InstantiationException, IllegalAccessException {  DOMImplementationLS impl=getDomLsImplementation();  LSOutput out=createLSOutput(impl,os,encoding);  LSSerializer writer=createLSSerializer(impl,includeXmlDeclaration,enablePrettyPrint);  writer.write(node,out);}  }
