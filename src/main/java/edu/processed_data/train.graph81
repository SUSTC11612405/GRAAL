class C{  public boolean isAbsolute(){  return absolute;}  }
class C{  void buildAccessibleGroup(Vector components){  AccessibleContext context=null;  int numComponents=components.size();  Object[] group=components.toArray();  Object object=null;  for (int i=0; i < numComponents; ++i) {    object=components.elementAt(i);    if (object instanceof Accessible) {      context=((Accessible)components.elementAt(i)).getAccessibleContext();      context.getAccessibleRelationSet().add(new AccessibleRelation(AccessibleRelation.MEMBER_OF,group));    }  }}  }
class C{  @Override public long skip(long n) throws IOException {  if (markerFound) {    return -1;  }  long count=0;  if (segment.isEntropyCoded()) {    for (; count < n; count++) {      int data=read();      if (data == -1) {        break;      }    }  } else {    long available=segment.length - offset + segment.offset;    if (available < n) {      n=(int)available;    }    count=in.skip(n);    if (count != -1) {      offset+=count;    }  }  return count;}  }
class C{  public LazyReact(){  this(ThreadPools.getStandard());}  }
class C{  private List trimCliqueList(List<int[]> cliqueList){  List trimmed=new ArrayList();  List<int[]> cliqueCopy=new ArrayList<>();  cliqueCopy.addAll(cliqueList);  Iterator<int[]> it=cliqueList.iterator();  while (it.hasNext()) {    int cluster[]=it.next();    cliqueCopy.remove(cluster);    if (!cliqueContained(cluster,cluster.length,cliqueCopy)) {      trimmed.add(cluster);    }    cliqueCopy.add(cluster);  }  return trimmed;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  @SuppressLint("NewApi") public void checkMultiCamera(){  if (Build.VERSION.SDK_INT >= 9) {    if (Camera.getNumberOfCameras() > 1) {      multiCamera=true;      switchCamera.setVisibility(View.VISIBLE);    } else {      switchCamera.setVisibility(View.GONE);    }  } else {    switchCamera.setVisibility(View.GONE);  }}  }
class C{  @Override public List<String> createMetaVolumeMembers(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,int memberCount,long memberCapacity,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws Exception {  _log.info(String.format("Create Meta Volume Members Start - Array: %s, Pool: %s, %n   Volume: %s, Count:%s, Member capacity: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel(),memberCount,memberCapacity));  try {    boolean isThinlyProvisioned=metaHead.getThinlyProvisioned();    CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storageSystem);    CIMArgument[] inArgs;    inArgs=_helper.getCreateMetaVolumeMembersInputArguments(storageSystem,storagePool,memberCount,memberCapacity,isThinlyProvisioned);    CIMArgument[] outArgs=new CIMArgument[5];    StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,metaHead);    _log.info("Selected Provider : {}",forProvider.getNativeGuid());    SmisCreateMetaVolumeMembersJob smisJobCompleter=new SmisCreateMetaVolumeMembersJob(null,forProvider.getId(),metaHead,memberCount,metaVolumeTaskCompleter);    _helper.invokeMethodSynchronously(forProvider,configSvcPath,SmisConstants.CREATE_OR_MODIFY_ELEMENT_FROM_STORAGE_POOL,inArgs,outArgs,smisJobCompleter);    return smisJobCompleter.getMetaMembers();  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  }catch (  Exception e) {    _log.error("Problem in createMetaVolumeMembers: ",e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createMetaVolumeMemebers",e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  } finally {    _log.info(String.format("Create Meta Volume Members End - Array: %s, Pool: %s, %n   Volume: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel()));  }}  }
class C{  public Gau3(){  super("gau3",3);}  }
class C{  public final boolean equals(Object x){  return ((x instanceof BigInt) && super.equals(x));}  }
class C{  public void createFieldEditors(){  addField(new BooleanFieldEditor(IPreferenceConstants.I_RESTORE_LAST_SPEC,"&Continue Previous Session on Restart",getFieldEditorParent()));  IntegerFieldEditor minStorageSizeEditor=new IntegerFieldEditor(IPreferenceConstants.I_MIN_DISPLAYED_SIZE,"&Minimum spec storage displayed (in kilobytes)",getFieldEditorParent());  addField(minStorageSizeEditor);  minStorageSizeEditor.setValidRange(0,2000000);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","nyjj");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void doAutoScroll(JTextArea ta,boolean scroll){  if (scroll) {    ta.setCaretPosition(ta.getText().length());  }}  }
class C{  public void acquireWriteLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRE_TEXT + " write ",lock);  }  lock.writeLock().lock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRED_TEXT + " write ",lock);  }}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public String toString(){  return "Version-" + this.getVersion();}  }
class C{  protected final Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  byte[] encodedKey;  Key result=null;  try {    encodedKey=engineDoFinal(wrappedKey,0,wrappedKey.length);  } catch (  BadPaddingException ePadding) {    throw new InvalidKeyException();  }catch (  IllegalBlockSizeException eBlockSize) {    throw new InvalidKeyException();  }switch (wrappedKeyType) {case Cipher.SECRET_KEY:    result=constructSecretKey(encodedKey,wrappedKeyAlgorithm);  break;case Cipher.PRIVATE_KEY:result=constructPrivateKey(encodedKey,wrappedKeyAlgorithm);break;case Cipher.PUBLIC_KEY:result=constructPublicKey(encodedKey,wrappedKeyAlgorithm);break;}return result;}  }
class C{  public DataTable compute(AppContext ctx,ProjectAnalysisJob job,OutputStream outputStream,ExportSourceWriter writer,boolean lazy) throws ComputingException, InterruptedException {  long start=System.currentTimeMillis();  logger.info("Starting export compute for job " + job.getOid());  DashboardAnalysis analysis;  try {    analysis=buildDashboardAnalysis(ctx,job,true);  } catch (  ScopeException e1) {    throw new ComputingException(e1);  }  ExportQueryWriter eqw=new ExportQueryWriter(writer,outputStream,job.getId().getAnalysisJobId());  ComputingService.INSTANCE.executeAnalysis(analysis,eqw,lazy);  DataTable results=new DataTable();  results.setTotalSize(eqw.getLinesWritten());  long stop=System.currentTimeMillis();  logger.info("task=" + this.getClass().getName() + " method=compute"+ " jobid="+ job.getOid()+ " status=done duration="+ (stop - start));  JobStats queryLog=new JobStats(job.getId().toString(),"FacetJobComputer",(stop - start),job.getId().getProjectId());  PerfDB.INSTANCE.save(queryLog);  return results;}  }
class C{  private String translateTriggerType(String sourceVendorName,String targetVendorName,String triggerType){  if (triggerType == null)   triggerType=new String();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateTriggerType(sourceVendorName.toUpperCase(),triggerType);}  }
class C{  @Deprecated public Graph G(){  return graph;}  }
class C{  private Token createVmArgsToken(){  StringBuilder jvmArgs=new StringBuilder();  File hotFixJar=new File(jrunContainer.getHome() + "/servers/lib/54101.jar");  if (hotFixJar.exists()) {    jvmArgs.append("-Djava.rmi.server.RMIClassLoaderSpi=jrunx.util.JRunRMIClassLoaderSpi ");  }  jvmArgs.append("-Dsun.io.useCanonCaches=false ");  jvmArgs.append("-Djmx.invoke.getters=true ");  jvmArgs.append("-Xms32m ");  jvmArgs.append("-Xmx128m ");  ReplaceTokens.Token tokenVmArgs=new ReplaceTokens.Token();  tokenVmArgs.setKey("jrun.jvm.args");  tokenVmArgs.setValue(jvmArgs.toString());  return tokenVmArgs;}  }
class C{  private static boolean contains(final int x,final int y,final int[] rectParams){  final int minX=rectParams[0];  final int minY=rectParams[1];  final int maxX=rectParams[0] + rectParams[2];  final int maxY=rectParams[1] + rectParams[3];  return (x >= minX && x <= maxX) && (y >= minY && y <= maxY);}  }
class C{  public ResponseFuture request(Object request,int timeout) throws RemotingException {  warning(request);  initClient();  return client.request(request,timeout);}  }
class C{  public boolean containsUncommitted(){  if (database.getMvStore() != null) {    return transaction != null;  }  return firstUncommittedLog != Session.LOG_WRITTEN;}  }
class C{  public HttpParams copy(){  HttpParams clone=this.local.copy();  return new DefaultedHttpParams(clone,this.defaults);}  }
class C{  public void dump(File output) throws IOException {  final PrintWriter writer=new PrintWriter(output);  try {    for (    double value : values) {      writer.printf("%f\n",value);    }  }  finally {    writer.close();  }}  }
class C{  public GamaObjectMatrix _opAppendHorizontally(final IScope scope,final IMatrix<?> b){  final GamaObjectMatrix aprime=_reverse(scope);  final GamaObjectMatrix bprime=GamaObjectMatrix.from(b.getCols(scope),b.getRows(scope),b)._reverse(scope);  final GamaObjectMatrix c=(GamaObjectMatrix)aprime.opAppendVertically(scope,bprime);  final GamaObjectMatrix cprime=c._reverse(scope);  return cprime;}  }
class C{  private void drawString(int flag,Graphics2D g2d,AttributedCharacterIterator ati,float x,float y,TextLayout layout,WMFFont wmfFont,int align){  if (wmfFont.escape == 0) {    if (flag != -1)     fillTextBackground(-1,flag,g2d,x,y,0,layout);    float width=(float)(layout.getBounds().getWidth());    if (align == WMFConstants.TA_CENTER) {      g2d.drawString(ati,x - width / 2,y);    } else     if (align == WMFConstants.TA_RIGHT) {      g2d.drawString(ati,x - width,y);    } else {      g2d.drawString(ati,x,y);    }  } else {    AffineTransform tr=g2d.getTransform();    float angle=-(float)(wmfFont.escape * Math.PI / 1800f);    float width=(float)(layout.getBounds().getWidth());    float height=(float)(layout.getBounds().getHeight());    if (align == WMFConstants.TA_CENTER) {      g2d.translate(-width / 2,height / 2);      g2d.rotate(angle,x - width / 2,y);    } else     if (align == WMFConstants.TA_RIGHT) {      g2d.translate(-width / 2,height / 2);      g2d.rotate(angle,x - width,y);    } else {      g2d.translate(0,height / 2);      g2d.rotate(angle,x,y);    }    if (flag != -1)     fillTextBackground(align,flag,g2d,x,y,width,layout);    Stroke _st=g2d.getStroke();    g2d.setStroke(textSolid);    g2d.drawString(ati,x,y);    g2d.setStroke(_st);    g2d.setTransform(tr);  }}  }
class C{  protected IdentifiableElementImpl(){  super();}  }
class C{  Snapshot snapshot(){  if (!Thread.holdsLock(DiskLruCache.this))   throw new AssertionError();  Source[] sources=new Source[valueCount];  long[] lengths=this.lengths.clone();  try {    for (int i=0; i < valueCount; i++) {      sources[i]=fileSystem.source(cleanFiles[i]);    }    return new Snapshot(key,sequenceNumber,sources,lengths);  } catch (  FileNotFoundException e) {    for (int i=0; i < valueCount; i++) {      if (sources[i] != null) {        Util.closeQuietly(sources[i]);      } else {        break;      }    }    return null;  }}  }
class C{  public SerializedDVStrategy(SpatialContext ctx,String fieldName){  super(ctx,fieldName);}  }
class C{  public Sentence_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_filename=jcas.getRequiredFeatureDE(casType,"filename","uima.cas.String",featOkTst);  casFeatCode_filename=(null == casFeat_filename) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_filename).getCode();  casFeat_sentenceId=jcas.getRequiredFeatureDE(casType,"sentenceId","uima.cas.Integer",featOkTst);  casFeatCode_sentenceId=(null == casFeat_sentenceId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sentenceId).getCode();}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new IntegerGenerator(Integer.valueOf(args[0]),Integer.valueOf(args[1]));}  }
class C{  public boolean isStripWhitespaceText(){  return stripWhitespaceText;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FeedAccountDao.dropTable(db,ifExists);  FeedSourceDao.dropTable(db,ifExists);  FeedItemDao.dropTable(db,ifExists);}  }
class C{  private void findAllTypes(String prefix,boolean partialMatch,int acceptFlags,IJavaElementRequestor requestor){  int count=this.packageFragmentRoots.length;  for (int i=0; i < count; i++) {    if (requestor.isCanceled())     return;    IPackageFragmentRoot root=this.packageFragmentRoots[i];    IJavaElement[] packages=null;    try {      packages=root.getChildren();    } catch (    JavaModelException npe) {      continue;    }    if (packages != null) {      for (int j=0, packageCount=packages.length; j < packageCount; j++) {        if (requestor.isCanceled())         return;        seekTypes(prefix,(IPackageFragment)packages[j],partialMatch,acceptFlags,requestor);      }    }  }}  }
class C{  public void writeRawByte(final int value) throws IOException {  writeRawByte((byte)value);}  }
class C{  @Override public void write(LogRecord record) throws IOException {  getLedgerWriter(record.getTransactionId(),false).write(record);}  }
class C{  public ClientNotReadyException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public EligibleException(String message,Throwable e){  super(message,e);}  }
class C{  private List<ExportMask> fetchExportMasksFromDB(List<ExportMask> activeMasks,Set<URI> hostInitiators,StorageSystem storage){  List<ExportMask> exportMasks=new ArrayList<>();  if (null != activeMasks && !activeMasks.isEmpty()) {    for (    ExportMask activeExportMask : activeMasks) {      if (!activeExportMask.getStorageDevice().equals(storage.getId())) {        continue;      }      Set<URI> emInitiators=ExportMaskUtils.getAllInitiatorsForExportMask(dbClient,activeExportMask);      Set<URI> matchingInitiators=Sets.intersection(emInitiators,hostInitiators);      if (!matchingInitiators.isEmpty()) {        exportMasks.add(activeExportMask);      }    }  }  return exportMasks;}  }
class C{  HttpsProvisioningResult sendSecondHttpsRequestWithOTP(String otp,String requestUri) throws IOException {  HttpsProvisioningResult result=new HttpsProvisioningResult();  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("Send second HTTPS with OTP");  }  HttpURLConnection urlConnection=null;  try {    String request=requestUri + "?OTP=" + otp;    if (logActivated) {      sLogger.info("Request provisioning with OTP: ".concat(request));    }    urlConnection=executeHttpRequest(true,request);    result.code=urlConnection.getResponseCode();switch (result.code) {case HttpURLConnection.HTTP_OK:      result.content=readStream(urlConnection.getInputStream());    return result;case HttpURLConnection.HTTP_UNAVAILABLE:  result.retryAfter=getRetryAfter(urlConnection);default :if (logActivated) {  sLogger.debug("Request with OTP failed code=" + result.code);}return result;}}  finally {if (urlConnection != null) {urlConnection.disconnect();}}}  }
class C{  public boolean isPerfect(){  return cardinality * 2 == V;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validOption1(){  return stdOption1Values;}  }
class C{  protected boolean shouldAutoStoreState(){  return true;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=indexMap.get(vars.get(i));  }  DataSet newDataSet=dataSet.subsetColumns(indices);  return new IndTestDirichletScore(newDataSet,getSamplePrior(),getStructurePrior());}  }
class C{  protected void checkIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= size)     checkIndex(index);  }}  }
class C{  private AllocationDebugger(){  log=LoggerFactory.getLogger(getClass());  events=new ConcurrentHashMap<BaseEvent,Info>();}  }
class C{  public AudioQuality(){}  }
class C{  private boolean parse(){  String keyword=title;  boolean success;  try {    while (keyword != null) {      final HttpClient httpClient=new HttpClient("https://en.wikipedia.org/w/api.php?action=query&titles=" + keyword.replace(' ','_').replace("%","%25") + "&prop=revisions&rvprop=content&format=xml");      final SAXParserFactory factory=SAXParserFactory.newInstance();      final SAXParser saxParser=factory.newSAXParser();      saxParser.parse(httpClient.getInputStream(),this);      final String response=getText();      if (response.startsWith("#REDIRECT")) {        final String redirect=wikiToPlainText(response).substring(9);        if (redirect.indexOf('\n') > -1) {          keyword=null;        } else {          if (keyword.equalsIgnoreCase(redirect)) {            keyword=null;          } else {            reset();            keyword=redirect;          }        }      } else {        keyword=null;      }    }    success=true;  } catch (  final Exception e) {    error=e.toString();    success=false;  } finally {    finished=true;  }  return success;}  }
class C{  public String toString(){  if (cached != null) {    return cached;  }  StringBuilder sb=new StringBuilder();  for (int i=num - 1; i >= 0; i--) {    sb.append(FreeCellNode.out(cards[i]));  }  cached=sb.toString();  return cached;}  }
class C{  void fill(int docID) throws IOException {  while (lastDocID < docID) {    writer.startDocument(0);    writer.finishDocument();    lastDocID++;  }}  }
class C{  @SuppressWarnings("unchecked") public Set<Map<String,Object>> collectDelta(EntityProcessorWrapper epw,VariableResolver resolver,Set<Map<String,Object>> deletedRows){  if (stop.get())   return new HashSet();  ContextImpl context1=new ContextImpl(epw,resolver,null,Context.FIND_DELTA,session,null,this);  epw.init(context1);  Set<Map<String,Object>> myModifiedPks=new HashSet<>();  for (  EntityProcessorWrapper childEpw : epw.getChildren()) {    myModifiedPks.addAll(collectDelta(childEpw,resolver,deletedRows));    if (stop.get())     return new HashSet();  }  Map<String,Map<String,Object>> deltaSet=new HashMap<>();  LOG.info("Running ModifiedRowKey() for Entity: " + epw.getEntity().getName());  String pk=epw.getEntity().getPk();  while (true) {    Map<String,Object> row=epw.nextModifiedRowKey();    if (row == null)     break;    Object pkValue=row.get(pk);    if (pkValue == null) {      pk=findMatchingPkColumn(pk,row);      pkValue=row.get(pk);    }    deltaSet.put(pkValue.toString(),row);    importStatistics.rowsCount.incrementAndGet();    if (stop.get())     return new HashSet();  }  Set<Map<String,Object>> deletedSet=new HashSet<>();  while (true) {    Map<String,Object> row=epw.nextDeletedRowKey();    if (row == null)     break;    deletedSet.add(row);    Object pkValue=row.get(pk);    if (pkValue == null) {      pk=findMatchingPkColumn(pk,row);      pkValue=row.get(pk);    }    String deletedRowPk=pkValue.toString();    if (deltaSet.containsKey(deletedRowPk)) {      deltaSet.remove(deletedRowPk);    }    importStatistics.rowsCount.incrementAndGet();    if (stop.get())     return new HashSet();  }  LOG.info("Completed ModifiedRowKey for Entity: " + epw.getEntity().getName() + " rows obtained : "+ deltaSet.size());  LOG.info("Completed DeletedRowKey for Entity: " + epw.getEntity().getName() + " rows obtained : "+ deletedSet.size());  myModifiedPks.addAll(deltaSet.values());  Set<Map<String,Object>> parentKeyList=new HashSet<>();  if (epw.getEntity().getParentEntity() != null) {    for (    Map<String,Object> row : myModifiedPks) {      resolver.addNamespace(epw.getEntity().getName(),row);      getModifiedParentRows(resolver,epw.getEntity().getName(),epw,parentKeyList);      if (stop.get())       return new HashSet();    }    for (    Map<String,Object> row : deletedSet) {      resolver.addNamespace(epw.getEntity().getName(),row);      getModifiedParentRows(resolver,epw.getEntity().getName(),epw,parentKeyList);      if (stop.get())       return new HashSet();    }  }  LOG.info("Completed parentDeltaQuery for Entity: " + epw.getEntity().getName());  if (epw.getEntity().isDocRoot())   deletedRows.addAll(deletedSet);  return epw.getEntity().getParentEntity() == null ? myModifiedPks : new HashSet<>(parentKeyList);}  }
class C{  public Node cloneNode(Document doc,Node eold){  return doc.importNode(eold,true);}  }
class C{  public Intent offerSuperUser(Activity activity,int requestCode){  RootTools.log("Launching Market for SuperUser");  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=com.noshufou.android.su"));  activity.startActivityForResult(i,requestCode);  return i;}  }
class C{  @Override public boolean supportsGroupBy(){  debugCodeCall("supportsGroupBy");  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.910 -0500",hash_original_method="64AA9FBA8001BF9E52DBF885273C96E3",hash_generated_method="D7E16058E00B282DC4DB20DDA6EE65E9") public ViewPropertyAnimator rotationBy(float value){  animatePropertyBy(ROTATION,value);  return this;}  }
class C{  private void uninstallLayout(JRootPane root){  if (savedOldLayout != null) {    root.setLayout(savedOldLayout);    savedOldLayout=null;  }}  }
class C{  public static final byte composeSmeDeliveryAckRequested(byte registeredDelivery){  return composeSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_DELIVERY_ACK_REQUESTED);}  }
class C{  public boolean hasXProfile(){  return DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_SIG_AND_REFS_TIMESTAMP);}  }
class C{  private MP3Parser(){}  }
class C{  static Unit valueOf(String name,boolean horizontal){  if (name.length() == 0) {    Unit defaultUnit=Sizes.getDefaultUnit();    if (defaultUnit != null) {      return defaultUnit;    }    return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y;  } else   if (name.equals("px")) {    return PIXEL;  } else   if (name.equals("dlu")) {    return horizontal ? DIALOG_UNITS_X : DIALOG_UNITS_Y;  } else   if (name.equals("pt")) {    return POINT;  } else   if (name.equals("in")) {    return INCH;  } else   if (name.equals("mm")) {    return MILLIMETER;  } else   if (name.equals("cm")) {    return CENTIMETER;  } else {    throw new IllegalArgumentException("Invalid unit name '" + name + "'. Must be one of: "+ "px, dlu, pt, mm, cm, in");  }}  }
class C{  public static WMSCapabilities retrieve(URI uri) throws Exception {  try {    CapabilitiesRequest request=new CapabilitiesRequest(uri);    return new WMSCapabilities(request);  } catch (  URISyntaxException e) {    e.printStackTrace();  }catch (  MalformedURLException e) {    e.printStackTrace();  }  return null;}  }
class C{  protected BuildStatusLookupOperation(final RepositoryContext repositoryContext,final boolean forcePrompt){  logger.info("BuildStatusLookupOperation created.");  ArgumentHelper.checkNotNull(repositoryContext,"repositoryContext");  this.repositoryContext=repositoryContext;  this.forcePrompt=forcePrompt;}  }
class C{  public static void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public static void superposeWithCoord(ComplexVector vec1,ComplexVector vec2,float weight,int[] permutation){  IncompatibleVectorsException.checkVectorsCompatible(vec1,vec2);  assert (vec1.getOpMode() == ComplexVector.Mode.CARTESIAN || vec1.getOpMode() == ComplexVector.Mode.HERMITIAN);  assert (vec2.getOpMode() == ComplexVector.Mode.CARTESIAN || vec2.getOpMode() == ComplexVector.Mode.HERMITIAN);  int positionToAdd;  float[] coordinates1=vec1.getCoordinates();  float[] coordinates2=vec2.getCoordinates();  for (int i=0; i < vec1.getDimension(); i++) {    if (permutation == null)     positionToAdd=i; else     positionToAdd=permutation[i];    coordinates1[2 * positionToAdd]+=coordinates2[2 * i] * weight;    coordinates1[2 * positionToAdd + 1]+=coordinates2[2 * i + 1] * weight;  }}  }
class C{  public void decreaseTimer(){  if (this.timer > 0.0D) {    this.timer--;    this.timerChange=-1;  }}  }
class C{  private void checkTargetIsNotWritable(File target,Throwable exception) throws CoreException {  if (!target.canWrite()) {    String message=NLS.bind(Messages.couldNotWrite,target.getAbsolutePath());    Policy.error(EFS.ERROR_WRITE,message);  }}  }
class C{  public int indexOf(final char ch,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (startIndex >= size) {    return -1;  }  final char[] thisBuf=buffer;  for (int i=startIndex; i < size; i++) {    if (thisBuf[i] == ch) {      return i;    }  }  return -1;}  }
class C{  public OptionCompleter(Collection<String> options){  this();  for (  String option : options) {    add(option);  }}  }
class C{  public static String decodeString(WMFFont wmfFont,byte[] bstr){  try {switch (wmfFont.charset) {case WMFConstants.META_CHARSET_ANSI:      return new String(bstr,WMFConstants.CHARSET_ANSI);case WMFConstants.META_CHARSET_DEFAULT:    return new String(bstr,WMFConstants.CHARSET_DEFAULT);case WMFConstants.META_CHARSET_SHIFTJIS:  return new String(bstr,WMFConstants.CHARSET_SHIFTJIS);case WMFConstants.META_CHARSET_HANGUL:return new String(bstr,WMFConstants.CHARSET_HANGUL);case WMFConstants.META_CHARSET_JOHAB:return new String(bstr,WMFConstants.CHARSET_JOHAB);case WMFConstants.META_CHARSET_GB2312:return new String(bstr,WMFConstants.CHARSET_GB2312);case WMFConstants.META_CHARSET_CHINESEBIG5:return new String(bstr,WMFConstants.CHARSET_CHINESEBIG5);case WMFConstants.META_CHARSET_GREEK:return new String(bstr,WMFConstants.CHARSET_GREEK);case WMFConstants.META_CHARSET_TURKISH:return new String(bstr,WMFConstants.CHARSET_TURKISH);case WMFConstants.META_CHARSET_VIETNAMESE:return new String(bstr,WMFConstants.CHARSET_VIETNAMESE);case WMFConstants.META_CHARSET_HEBREW:return new String(bstr,WMFConstants.CHARSET_HEBREW);case WMFConstants.META_CHARSET_ARABIC:return new String(bstr,WMFConstants.CHARSET_ARABIC);case WMFConstants.META_CHARSET_RUSSIAN:return new String(bstr,WMFConstants.CHARSET_CYRILLIC);case WMFConstants.META_CHARSET_THAI:return new String(bstr,WMFConstants.CHARSET_THAI);case WMFConstants.META_CHARSET_EASTEUROPE:return new String(bstr,WMFConstants.CHARSET_EASTEUROPE);case WMFConstants.META_CHARSET_OEM:return new String(bstr,WMFConstants.CHARSET_OEM);default :}} catch (UnsupportedEncodingException e) {}return new String(bstr);}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode14.class,args);}  }
class C{  public int length(){  return results.size();}  }
class C{  private static Platform findPlatform(){  Class<?> openSslSocketClass;  Method setUseSessionTickets;  Method setHostname;  try {    try {      openSslSocketClass=Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");    } catch (    ClassNotFoundException ignored) {      openSslSocketClass=Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");    }    setUseSessionTickets=openSslSocketClass.getMethod("setUseSessionTickets",boolean.class);    setHostname=openSslSocketClass.getMethod("setHostname",String.class);    try {      Method setNpnProtocols=openSslSocketClass.getMethod("setNpnProtocols",byte[].class);      Method getNpnSelectedProtocol=openSslSocketClass.getMethod("getNpnSelectedProtocol");      return new Android41(openSslSocketClass,setUseSessionTickets,setHostname,setNpnProtocols,getNpnSelectedProtocol);    } catch (    NoSuchMethodException ignored) {      return new Android23(openSslSocketClass,setUseSessionTickets,setHostname);    }  } catch (  ClassNotFoundException ignored) {  }catch (  NoSuchMethodException ignored) {  }  try {    String npnClassName="org.eclipse.jetty.npn.NextProtoNego";    Class<?> nextProtoNegoClass=Class.forName(npnClassName);    Class<?> providerClass=Class.forName(npnClassName + "$Provider");    Class<?> clientProviderClass=Class.forName(npnClassName + "$ClientProvider");    Class<?> serverProviderClass=Class.forName(npnClassName + "$ServerProvider");    Method putMethod=nextProtoNegoClass.getMethod("put",SSLSocket.class,providerClass);    Method getMethod=nextProtoNegoClass.getMethod("get",SSLSocket.class);    return new JdkWithJettyNpnPlatform(putMethod,getMethod,clientProviderClass,serverProviderClass);  } catch (  ClassNotFoundException ignored) {  }catch (  NoSuchMethodException ignored) {  }  return new Platform();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    setOwner((Composite)null);  return;}super.eUnset(featureID);}  }
class C{  public void paint(Graphics2D g2D,int pageNo,Point2D pageStart,Properties ctx,boolean isView){  Point2D.Double location=getAbsoluteLocation(pageStart);  Rectangle allocation=m_renderer.getAllocation();  g2D.translate(location.x,location.y);  m_renderer.paint(g2D,allocation);  g2D.translate(-location.x,-location.y);}  }
class C{  public static char binaryBeMsb0ToHexDigit(boolean[] src,int srcPos){  if (src.length == 0) {    throw new IllegalArgumentException("Cannot convert an empty array.");  }  final int beSrcPos=src.length - 1 - srcPos;  final int srcLen=Math.min(4,beSrcPos + 1);  final boolean[] paddedSrc=new boolean[4];  System.arraycopy(src,beSrcPos + 1 - srcLen,paddedSrc,4 - srcLen,srcLen);  src=paddedSrc;  srcPos=0;  if (src[srcPos]) {    if (src.length > srcPos + 1 && src[srcPos + 1]) {      if (src.length > srcPos + 2 && src[srcPos + 2]) {        return src.length > srcPos + 3 && src[srcPos + 3] ? 'f' : 'e';      }      return src.length > srcPos + 3 && src[srcPos + 3] ? 'd' : 'c';    }    if (src.length > srcPos + 2 && src[srcPos + 2]) {      return src.length > srcPos + 3 && src[srcPos + 3] ? 'b' : 'a';    }    return src.length > srcPos + 3 && src[srcPos + 3] ? '9' : '8';  }  if (src.length > srcPos + 1 && src[srcPos + 1]) {    if (src.length > srcPos + 2 && src[srcPos + 2]) {      return src.length > srcPos + 3 && src[srcPos + 3] ? '7' : '6';    }    return src.length > srcPos + 3 && src[srcPos + 3] ? '5' : '4';  }  if (src.length > srcPos + 2 && src[srcPos + 2]) {    return src.length > srcPos + 3 && src[srcPos + 3] ? '3' : '2';  }  return src.length > srcPos + 3 && src[srcPos + 3] ? '1' : '0';}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    PoissonEstimator newEst=new PoissonEstimator();    for (int i=0; i < argv.length; i++) {      double current=Double.valueOf(argv[i]).doubleValue();      System.out.println(newEst);      System.out.println("Prediction for " + current + " = "+ newEst.getProbability(current));      newEst.addValue(current,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public static KdbxHeader readKdbxHeader(KdbxHeader kdbxHeader,InputStream inputStream) throws IOException {  MessageDigest digest=Encryption.getMessageDigestInstance();  DigestInputStream digestInputStream=new DigestInputStream(inputStream,digest);  LittleEndianDataInputStream ledis=new LittleEndianDataInputStream(digestInputStream);  if (!verifyMagicNumber(ledis)) {    throw new IllegalStateException("Magic number did not match");  }  if (!verifyFileVersion(ledis)) {    throw new IllegalStateException("File version did not match");  }  byte headerType;  while ((headerType=ledis.readByte()) != HeaderType.END) {switch (headerType) {case HeaderType.COMMENT:      getByteArray(ledis);    break;case HeaderType.CIPHER_ID:  kdbxHeader.setCipherUuid(getByteArray(ledis));break;case HeaderType.COMPRESSION_FLAGS:kdbxHeader.setCompressionFlags(getInt(ledis));break;case HeaderType.MASTER_SEED:kdbxHeader.setMasterSeed(getByteArray(ledis));break;case HeaderType.TRANSFORM_SEED:kdbxHeader.setTransformSeed(getByteArray(ledis));break;case HeaderType.TRANSFORM_ROUNDS:kdbxHeader.setTransformRounds(getLong(ledis));break;case HeaderType.ENCRYPTION_IV:kdbxHeader.setEncryptionIv(getByteArray(ledis));break;case HeaderType.PROTECTED_STREAM_KEY:kdbxHeader.setProtectedStreamKey(getByteArray(ledis));break;case HeaderType.STREAM_START_BYTES:kdbxHeader.setStreamStartBytes(getByteArray(ledis));break;case HeaderType.INNER_RANDOM_STREAM_ID:kdbxHeader.setInnerRandomStreamId(getInt(ledis));break;default :throw new IllegalStateException("Unknown File Header");}}getByteArray(ledis);kdbxHeader.setHeaderHash(digest.digest());return kdbxHeader;}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public FactoryDto convertToLatest(FactoryDto factory) throws ApiException {  FactoryDto resultFactory=DtoFactory.getInstance().clone(factory).withV("4.0");  for (  LegacyConverter converter : LEGACY_CONVERTERS) {    converter.convert(resultFactory);  }  return resultFactory;}  }
class C{  public void add(Namespace namespace){  scope.add(namespace);}  }
class C{  public synchronized boolean increase(Bitmap bitmap){  final int bitmapSize=BitmapUtil.getSizeInBytes(bitmap);  if (mCount >= mMaxCount || mSize + bitmapSize > mMaxSize) {    return false;  }  mCount++;  mSize+=bitmapSize;  return true;}  }
class C{  void processRxChar(int chr){  log.trace(this.toString() + " RX: '" + String.format("%02X : %1c",(byte)chr,chr < 32 ? '.' : chr)+ "'");switch (chr) {case 32:    break;case '>':  message+=(char)chr;case 10:case 13:if (messageHandler != null && !message.isEmpty()) messageHandler.handleTelegram(message.toCharArray());message="";break;default :message+=(char)chr;}}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(clientId);  sb.append("\n ");switch (status) {case CONNECTED:    sb.append(context.getString(R.string.connectedto));  break;case DISCONNECTED:sb.append(context.getString(R.string.disconnected));break;case NONE:sb.append(context.getString(R.string.no_status));break;case CONNECTING:sb.append(context.getString(R.string.connecting));break;case DISCONNECTING:sb.append(context.getString(R.string.disconnecting));break;case ERROR:sb.append(context.getString(R.string.connectionError));}sb.append(" ");sb.append(host);return sb.toString();}  }
class C{  public IntIterator rows(boolean reverse){  return new RowIterator(reverse);}  }
class C{  public void replaceScene(CCScene CCScene){  assert CCScene != null : "Argument must be non-null";  int index=CCScenesStack_.size();  sendCleanupToCCScene_=true;  CCScenesStack_.set(index - 1,CCScene);  nextCCScene_=CCScene;}  }
class C{  protected Request send(Request request){  return send(request,getEffectiveEndpoint(request));}  }
class C{  public static boolean killProcess(final String processName){  return getInternals().killProcess(processName);}  }
class C{  public void annotationAdded(Annotation annotation){  addedAnnotations.add(annotation);}  }
class C{  Map<String,Object> toMap(DateTime scanTime){  return new ImmutableMap.Builder<String,Object>().put("scanTime",new com.google.api.client.util.DateTime(scanTime.toDate())).put("source",source).put("target",target).put("message",message).build();}  }
class C{  private boolean showStackTrace(){  if (configuration.isInitialized()) {    return getBoolean(RUNTIME_LOG_WARN_STACKTRACE,false);  } else {    return false;  }}  }
class C{  private void analyze(File treeAnnotatorInputFile) throws TraceException {  try {    FileReader fileReader=new FileReader(treeAnnotatorInputFile);    TreeImporter importer=new NexusImporter(fileReader);    FlexibleTree tree=(FlexibleTree)importer.importNextTree();    for (int i=0; i < tree.getNodeCount(); i++) {      Hashtable<Integer,State> states=new Hashtable<Integer,State>();      for (Iterator<String> j=tree.getNodeAttributeNames(tree.getNode(i)); j.hasNext(); ) {        String name=j.next();        if (name.indexOf("states_") >= 0) {          Integer d=Integer.parseInt(name.replaceFirst("states_","").replaceFirst("\\..+",""));          State s;          if (states.containsKey(d)) {            s=states.get(d);          } else {            s=new State(d);          }          if (name.matches("states_" + d + ".prob")) {            Object o=tree.getNodeAttribute(tree.getNode(i),name);            double probability=(Double)o;            s.setProbability(probability);          } else           if (name.matches("states_" + d)) {            Object o=tree.getNodeAttribute(tree.getNode(i),name);            String value=(String)o;            s.setState(value.replaceAll("\"",""));          } else           if (name.matches("states_" + d + ".set.prob")) {            Object[] o=(Object[])tree.getNodeAttribute(tree.getNode(i),name);            double[] probabilities=new double[o.length];            for (int k=0; k < o.length; k++) {              probabilities[k]=(Double)o[k];            }            s.setProbabilities(probabilities);          } else           if (name.matches("states_" + d + ".set")) {            Object[] o=(Object[])tree.getNodeAttribute(tree.getNode(i),name);            String[] set=new String[o.length];            for (int k=0; k < o.length; k++) {              set[k]=((String)o[k]).replaceAll("\"","");            }            s.setSet(set);          }          states.put(d,s);        }      }      State[] statesArray=states.values().toArray(new State[states.size()]);      Arrays.sort(statesArray);      StringBuffer sb=new StringBuffer(statesArray.length * statesArray[0].getState().length());      for (      State s : statesArray) {        sb.append(s.getState());      }      tree.setNodeAttribute(tree.getNode(i),"seq",sb.toString());    }    TreeExporter exporter=new NexusExporter(System.out);    exporter.exportTree(tree);    System.out.println("Begin trees;");    System.out.println("\ttree max_tree = " + tree.toString());    System.out.println("End;");  } catch (  IOException e) {    System.err.println("Error Parsing Input log: " + e.getMessage());  }catch (  Importer.ImportException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());  }}  }
class C{  public SortingParams desc(){  params.add(DESC.raw);  return this;}  }
class C{  public static long toLong(byte[] bytes,int start){  return toLong(bytes[start],bytes[start + 1],bytes[start + 2],bytes[start + 3],bytes[start + 4],bytes[start + 5],bytes[start + 6],bytes[start + 7]);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public AntlrStreamWithToString(Reader r) throws IOException {  super(r);}  }
class C{  public static boolean checkBusybox(){  if (!new File("/system/bin/busybox").exists() && !new File("/system/xbin/busybox").exists()) {    Log.e(TAG,"Busybox not in xbin or bin!");    return false;  }  try {    if (!runSuCommand("busybox mount").success()) {      Log.e(TAG,"Busybox is there but it is borked! ");      return false;    }  } catch (  NullPointerException e) {    Log.e(TAG,"NullpointerException thrown while testing busybox",e);    return false;  }  return true;}  }
class C{  protected void unregisterOperator(Process process){  process.unregisterName(name);}  }
class C{  public TooManyListenersException(String s){  super(s);}  }
class C{  public static void uninstallPackage(String packageName,boolean updateKnowledgeFlow,PrintStream... progress) throws Exception {  if (updateKnowledgeFlow) {    File packageToDel=new File(PACKAGE_MANAGER.getPackageHome().toString() + File.separator + packageName);    if (packageToDel.exists() && packageToDel.isDirectory()) {      File[] contents=packageToDel.listFiles();      for (      File content : contents) {        if (content.isFile() && content.getPath().endsWith("Beans.props")) {          KnowledgeFlowApp.removeFromPluginBeanProps(content);          KnowledgeFlowApp.disposeSingleton();          break;        }      }    }  }  PACKAGE_MANAGER.uninstallPackage(packageName,progress);}  }
class C{  protected LineEndImpl(){  super();}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value){  try {    this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));  } catch (  IOException e) {    throw new IllegalArgumentException("error encoding value: " + e);  }}  }
class C{  public void destroy(){  if (mResource != null)   mResource.clear();  if (mSender != null)   mSender.destroySendIO();  if (mReceiver != null)   mReceiver.destroyReceiveIO();  if (mSendDispatcher != null)   mSendDispatcher.quit();  if (mReceiveDispatcher != null)   mReceiveDispatcher.quit();}  }
class C{  @Override protected void unregisterOperator(Process process){  super.unregisterOperator(process);  for (  ExecutionUnit subprocess : subprocesses) {    for (    Operator child : subprocess.getOperators()) {      child.unregisterOperator(process);    }  }}  }
class C{  private int increase(int[] p,int cnt){  return lc.isFlowX() ? (p[0]+=cnt) : (p[1]+=cnt);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.411 -0500",hash_original_method="19B45CF10C6274AA18ED4281EBB4A7D5",hash_generated_method="7097D4FC5474B218D98D39DBDCF261FE") public void put(String key,Short value){  mValues.put(key,value);}  }
class C{  private static CallSite realBootstrap(Lookup caller,String name,int callID,MethodType type,boolean safe,boolean thisCall,boolean spreadCall){  MutableCallSite mc=new MutableCallSite(type);  MethodHandle mh=makeFallBack(mc,caller.lookupClass(),name,callID,type,safe,thisCall,spreadCall);  mc.setTarget(mh);  return mc;}  }
class C{  public static BridgeServerRequest createForStop(CacheInfo cache,RemoteBridgeServer bridge){  BridgeServerRequest request=new BridgeServerRequest();  request.cacheId=cache.getId();  request.operation=STOP_OPERATION;  request.friendlyName=LocalizedStrings.BridgeServerRequest_STOP_BRIDGE_SERVER_0.toLocalizedString(bridge);  request.bridgeInfo=bridge;  return request;}  }
class C{  private static boolean isNaturalDocOrder(Compiler compiler,int stepOpCodePos,int stepIndex,int analysis) throws javax.xml.transform.TransformerException {  if (canCrissCross(analysis))   return false;  if (isSet(analysis,BIT_NAMESPACE))   return false;  if (isSet(analysis,BIT_FOLLOWING | BIT_FOLLOWING_SIBLING) && isSet(analysis,BIT_PRECEDING | BIT_PRECEDING_SIBLING))   return false;  int stepType;  int stepCount=0;  boolean foundWildAttribute=false;  int potentialDuplicateMakingStepCount=0;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;switch (stepType) {case OpCodes.FROM_ATTRIBUTES:case OpCodes.MATCH_ATTRIBUTE:      if (foundWildAttribute)       return false;    String localName=compiler.getStepLocalName(stepOpCodePos);  if (localName.equals("*")) {    foundWildAttribute=true;  }break;case OpCodes.FROM_FOLLOWING:case OpCodes.FROM_FOLLOWING_SIBLINGS:case OpCodes.FROM_PRECEDING:case OpCodes.FROM_PRECEDING_SIBLINGS:case OpCodes.FROM_PARENT:case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:case OpCodes.FROM_NAMESPACE:case OpCodes.FROM_ANCESTORS:case OpCodes.FROM_ANCESTORS_OR_SELF:case OpCodes.MATCH_ANY_ANCESTOR:case OpCodes.MATCH_IMMEDIATE_ANCESTOR:case OpCodes.FROM_DESCENDANTS_OR_SELF:case OpCodes.FROM_DESCENDANTS:if (potentialDuplicateMakingStepCount > 0) return false;potentialDuplicateMakingStepCount++;case OpCodes.FROM_ROOT:case OpCodes.FROM_CHILDREN:case OpCodes.FROM_SELF:if (foundWildAttribute) return false;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (nextStepOpCodePos < 0) break;stepOpCodePos=nextStepOpCodePos;}return true;}  }
class C{  public static JPanel createHorizontalPanel(String title){  JPanel panel=new JPanel();  panel.setLayout(new GridLayout(1,0));  if (title != null) {    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),title));  } else {    panel.setBorder(BorderFactory.createEtchedBorder());  }  return panel;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.293 -0500",hash_original_method="56D25A23ADD1F3C93CB7F827DA5DFB02",hash_generated_method="B843D41D9AC4259E19148AB7E4644051") public Criteria(){}  }
class C{  public TradeOrder findTradeOrderById(final Integer id) throws PersistentModelException {  TradeOrder instance=m_tradeOrderHome.findById(id);  if (null == instance)   throw new PersistentModelException("Contract not found for id: " + id);  return instance;}  }
class C{  public static Validator<String> disallowedChars(String... chars){  return disallowedChars(chars,null);}  }
class C{  public FilterAggregationBuilder buildFilterAggregation(QueryBuilder query,Heading heading){  FilterAggregationBuilder filterAgg=AggregationBuilders.filter("filter").filter(query);  addMetrics(filterAgg,heading,false);  return filterAgg;}  }
class C{  public BareCommit(Project project,User user){  this.repository=BareRepository.getRepository(project);  this.personIdent=new PersonIdent(user.name,user.email);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.162 -0500",hash_original_method="44504C706271339AD014839381D77404",hash_generated_method="96E3A48A00ECE1E3524E121E7772B36A") public int head(String messageId) throws IOException {  return sendCommand(NNTPCommand.HEAD,messageId);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public static double random(){  return random(0,Integer.MAX_VALUE) * NORMALIZATION_FACTOR;}  }
class C{  public static void checkSchemas(ResultSet rs,String[] userExpected) throws SQLException {  String[] expected=new String[BUILTIN_SCHEMAS.length + userExpected.length];  System.arraycopy(BUILTIN_SCHEMAS,0,expected,0,BUILTIN_SCHEMAS.length);  System.arraycopy(userExpected,0,expected,BUILTIN_SCHEMAS.length,userExpected.length);  for (int i=BUILTIN_SCHEMAS.length; i < expected.length; i++) {    expected[i]=getStoredIdentifier(expected[i]);  }  Arrays.sort(expected);  int nextMatch=0;  while (rs.next()) {    String schema=rs.getString("TABLE_SCHEM");    assertNotNull(schema);    if (nextMatch < expected.length) {      if (expected[nextMatch].equals(schema))       nextMatch++;    }  }  rs.close();  assertEquals("Schemas missing ",expected.length,nextMatch);}  }
class C{  public static void assertEquals(String message,boolean expected,boolean actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  protected boolean isEqualKey(AbstractHashedMap.HashEntry entry,Object key1,Object key2){  MultiKey multi=(MultiKey)entry.getKey();  return multi.size() == 2 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)));}  }
class C{  private static LSettingsNodePage findFirstNonEmptyDescendant(LSettingsNodePage settingsNodePage){  if (settingsNodePage.settingList != null && !settingsNodePage.settingList.isEmpty())   return settingsNodePage;  final List<IPage<?>> childList=settingsNodePage.getChildList();  if (childList == null || childList.isEmpty())   return null;  for (  final IPage<?> page : childList) {    settingsNodePage=findFirstNonEmptyDescendant((LSettingsNodePage)page);    if (settingsNodePage != null)     return settingsNodePage;  }  return null;}  }
class C{  final Type capture(){  Type superclass=getClass().getGenericSuperclass();  checkArgument(superclass instanceof ParameterizedType,"%s isn't parameterized",superclass);  return ((ParameterizedType)superclass).getActualTypeArguments()[0];}  }
class C{  public static boolean isAix(){  return osName.indexOf("AIX") > -1;}  }
class C{  public List<Metric> zip(List<Metric> metrics,Metric baseMetric){  SystemAssert.requireArgument(baseMetric != null,"Zipper transform requires base metric as second param!");  List<Metric> zippedMetrics=new ArrayList<Metric>();  Map<Long,String> baseDatapoints=baseMetric.getDatapoints();  for (  Metric metric : metrics) {    Map<Long,String> originalDatapoints=metric.getDatapoints();    Map<Long,String> zippedDatadpoints=this.zip(originalDatapoints,baseDatapoints);    metric.setDatapoints(zippedDatadpoints);    zippedMetrics.add(metric);  }  return zippedMetrics;}  }
class C{  public boolean wasRecreated(){  return mIsRecreating;}  }
class C{  @Override public Character next(){  if (hasNext == false) {    throw new NoSuchElementException();  }  final char cur=current;  prepareNext();  return Character.valueOf(cur);}  }
class C{  @Override public String serialize(boolean production){  ByteArrayOutputStream out=new ByteArrayOutputStream();  try {    if (production) {      out.write(xprv);    } else {      out.write(tprv);    }    out.write(depth & 0xff);    out.write((parent >>> 24) & 0xff);    out.write((parent >>> 16) & 0xff);    out.write((parent >>> 8) & 0xff);    out.write(parent & 0xff);    out.write((sequence >>> 24) & 0xff);    out.write((sequence >>> 16) & 0xff);    out.write((sequence >>> 8) & 0xff);    out.write(sequence & 0xff);    out.write(chainCode);    out.write(0x00);    out.write(master.toByteArray());  } catch (  IOException e) {  }  return ByteUtils.toBase58WithChecksum(out.toByteArray());}  }
class C{  public URI(final String scheme,final String host,final String path,final String fragment) throws URIException {  this(scheme,host,path,null,fragment);}  }
class C{  protected void analyzeDtoWithMethod(Method method,MethodModel methodModel){  methodModel.setWith(true);  Type fieldType=method.getGenericParameterTypes()[0];  String fieldName=getWithFieldName(method);  fieldAttributes.put(fieldName,fieldType);  methodModel.setFieldName(fieldName);  methodModel.setFieldType(convertType(fieldType));}  }
class C{  private static void restoreUserProfile(final File databasesDir,final String account) throws IOException {  File srcDir=new File(databasesDir,account);  String[] listOfDbFiles=srcDir.list(sFilenameDbFilter);  if (listOfDbFiles == null) {    throw new FileNotFoundException("Failed to find " + DB_FILE_EXTENSION + " files at : "+ databasesDir.getPath());  }  for (  String dbFile : listOfDbFiles) {    File srcFile=new File(srcDir,dbFile);    FileUtils.copyFileToDirectory(srcFile,databasesDir,true);  }}  }
class C{  public StackOverflowError(String s){  super(s);}  }
class C{  public static JSONObject createEmitSendMessage(Message message){  JSONObject obj=new JSONObject();  try {    obj.put("message",message.message);    obj.put("type",message.type);    obj.put("roomID",message.roomID);    obj.put("userID",message.userID);    obj.put("localID",message.localID);    if (message.attributes != null && message.attributes.linkData != null) {      JSONObject attObject=new JSONObject();      JSONObject linkData=new JSONObject();      linkData.put("title",message.attributes.linkData.title);      linkData.put("desc",message.attributes.linkData.desc);      linkData.put("host",message.attributes.linkData.host);      linkData.put("url",message.attributes.linkData.url);      linkData.put("imageUrl",message.attributes.linkData.imageUrl);      linkData.put("siteName",message.attributes.linkData.siteName);      attObject.put("linkData",linkData);      obj.put("attributes",attObject);    }    if (message.file != null) {      JSONObject fileModel=new JSONObject();      if (message.file.file != null) {        JSONObject file=new JSONObject();        file.put("id",message.file.file.id);        file.put("name",message.file.file.name);        file.put("size",message.file.file.size);        file.put("mimeType",message.file.file.mimeType);        fileModel.put("file",file);      }      if (message.file.thumb != null) {        JSONObject file=new JSONObject();        file.put("id",message.file.thumb.id);        file.put("name",message.file.thumb.name);        file.put("size",message.file.thumb.size);        file.put("mimeType",message.file.thumb.mimeType);        fileModel.put("thumb",file);      }      obj.put("file",fileModel);    }    if (message.location != null) {      JSONObject locationModel=new JSONObject();      locationModel.put("lat",message.location.lat);      locationModel.put("lng",message.location.lng);      obj.put("location",locationModel);    }    return obj;  } catch (  JSONException e) {    e.printStackTrace();  }  return obj;}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE AD_SchedulerLog " + "WHERE AD_Scheduler_ID=" + getAD_Scheduler_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdateEx(sql,get_TrxName());  return no;}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static int[] addToVector(Object obj,int index,Vector v,int[] starts){  if (!v.lastElement().equals(obj)) {    v.addElement(obj);    int count=v.size();    if (starts.length == count) {      int[] temp=new int[starts.length * 2];      System.arraycopy(starts,0,temp,0,starts.length);      starts=temp;    }    starts[count - 1]=index;  }  return starts;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  j2DClient.get().addEventLine(new StandardEventLine("This command is outdated. Please use \"/volume\" for changing the volume and \"/mute\" for muting all audio"));  return true;}  }
class C{  Query makeDisjoint(Rectangle bbox){  Query qMinY=this.makeNumericRangeQuery(field_minY,bbox.getMaxY(),null,false,false);  Query qMaxY=this.makeNumericRangeQuery(field_maxY,null,bbox.getMinY(),false,false);  Query yConditions=this.makeQuery(BooleanClause.Occur.SHOULD,qMinY,qMaxY);  Query xConditions;  if (!bbox.getCrossesDateLine()) {    Query qMinX=this.makeNumericRangeQuery(field_minX,bbox.getMaxX(),null,false,false);    if (bbox.getMinX() == -180.0 && ctx.isGeo()) {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(qMinX,BooleanClause.Occur.MUST);      bq.add(makeNumberTermQuery(field_maxX,180.0),BooleanClause.Occur.MUST_NOT);      qMinX=bq.build();    }    Query qMaxX=this.makeNumericRangeQuery(field_maxX,null,bbox.getMinX(),false,false);    if (bbox.getMaxX() == 180.0 && ctx.isGeo()) {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(qMaxX,BooleanClause.Occur.MUST);      bq.add(makeNumberTermQuery(field_minX,-180.0),BooleanClause.Occur.MUST_NOT);      qMaxX=bq.build();    }    Query qMinMax=this.makeQuery(BooleanClause.Occur.SHOULD,qMinX,qMaxX);    Query qNonXDL=this.makeXDL(false,qMinMax);    if (!ctx.isGeo()) {      xConditions=qNonXDL;    } else {      Query qMinXLeft=this.makeNumericRangeQuery(field_minX,bbox.getMaxX(),null,false,false);      Query qMaxXRight=this.makeNumericRangeQuery(field_maxX,null,bbox.getMinX(),false,false);      Query qLeftRight=this.makeQuery(BooleanClause.Occur.MUST,qMinXLeft,qMaxXRight);      Query qXDL=this.makeXDL(true,qLeftRight);      xConditions=this.makeQuery(BooleanClause.Occur.SHOULD,qNonXDL,qXDL);    }  } else {    Query qMinXLeft=this.makeNumericRangeQuery(field_minX,180.0,null,false,false);    Query qMaxXLeft=this.makeNumericRangeQuery(field_maxX,null,bbox.getMinX(),false,false);    Query qMinXRight=this.makeNumericRangeQuery(field_minX,bbox.getMaxX(),null,false,false);    Query qMaxXRight=this.makeNumericRangeQuery(field_maxX,null,-180.0,false,false);    Query qLeft=this.makeQuery(BooleanClause.Occur.SHOULD,qMinXLeft,qMaxXLeft);    Query qRight=this.makeQuery(BooleanClause.Occur.SHOULD,qMinXRight,qMaxXRight);    Query qLeftRight=this.makeQuery(BooleanClause.Occur.MUST,qLeft,qRight);    xConditions=this.makeXDL(false,qLeftRight);  }  return this.makeQuery(BooleanClause.Occur.SHOULD,xConditions,yConditions);}  }
class C{  public static HashSetModifiableDBIDs newHashSet(DBIDs existing){  return DBIDFactory.FACTORY.newHashSet(existing);}  }
class C{  public static String formatCourseNotStartedDate(String date){  try {    SimpleDateFormat dateFormat=new SimpleDateFormat("MMMM dd, yyyy");    Date startDate=DateUtil.convertToDate(date);    String formattedDate=dateFormat.format(startDate);    return formattedDate;  } catch (  Exception e) {    logger.error(e);    return null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void configureAvailableSpeedStepModes(){  int modes=jmri.InstanceManager.throttleManagerInstance().supportedSpeedModes();  if ((modes & DccThrottle.SpeedStepMode128) != 0) {    SpeedStep128Button.setEnabled(true);  } else {    SpeedStep128Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode28) != 0) {    SpeedStep28Button.setEnabled(true);  } else {    SpeedStep28Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode27) != 0) {    SpeedStep27Button.setEnabled(true);  } else {    SpeedStep27Button.setEnabled(false);  }  if ((modes & DccThrottle.SpeedStepMode14) != 0) {    SpeedStep14Button.setEnabled(true);  } else {    SpeedStep14Button.setEnabled(false);  }}  }
class C{  private Security(){}  }
class C{  public void cancelTrade(){  trade.cancelTrade();}  }
class C{  public static Pattern compile(String regex,int flags){  return new Pattern(regex,flags);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addInvokevirtual(String classname,String name,String desc){  addInvokevirtual(constPool.addClassInfo(classname),name,desc);}  }
class C{  public void unregisterAllListeners(){  for (  TrackDataType trackDataType : TrackDataType.values()) {    unregisterListener(trackDataType);  }}  }
class C{  public static Class<?> primitiveToWrapper(final Class<?> cls){  Class<?> convertedClass=cls;  if (cls != null && cls.isPrimitive()) {    convertedClass=ClassUtils.primitiveWrapperMap.get(cls);  }  return convertedClass;}  }
class C{  public Path pidFile(){  return pidFile;}  }
class C{  @Override public boolean activityStarting(Intent intent,String pkg) throws RemoteException {  Log.i(TAG,String.format("Starting %s in package %s",intent,pkg));  currentPackage=pkg;  currentIntent=intent;  return true;}  }
class C{  public static void checkValueIsNull(Object value,Object name){  if (value != null) {    throw new RuntimeException("'" + name + "' elements do not accept a value argument.");  }}  }
class C{  public static String fontToXFont(java.awt.Font font){  StringBuffer ret=new StringBuffer("-*");  ret.append("-").append(font.getName());  if (font.isBold())   ret.append("-bold"); else   ret.append("-normal");  if (font.isItalic())   ret.append("-i"); else   ret.append("-o");  ret.append("-normal");  ret.append("--").append(font.getSize());  ret.append("-*");  ret.append("-*");  ret.append("-*");  ret.append("-*");  ret.append("-*");  ret.append("-*");  return ret.toString();}  }
class C{  public static void logContractDetails(com.ib.client.ContractDetails contractDetails){  _log.debug("Symbol: " + contractDetails.m_summary.m_symbol + " Sec Type: "+ contractDetails.m_summary.m_secType+ " Exchange: "+ contractDetails.m_summary.m_exchange+ " Con Id: "+ contractDetails.m_summary.m_conId+ " Currency: "+ contractDetails.m_summary.m_currency+ " SecIdType: "+ contractDetails.m_summary.m_secIdType+ " Primary Exch: "+ contractDetails.m_summary.m_primaryExch+ " Local Symbol: "+ contractDetails.m_summary.m_localSymbol+ " SecId: "+ contractDetails.m_summary.m_secId+ " Multiplier: "+ contractDetails.m_summary.m_multiplier+ " Category: "+ contractDetails.m_category+ " Expiry: "+ contractDetails.m_summary.m_expiry+ " ContractMonth: "+ contractDetails.m_contractMonth+ " Cusip: "+ contractDetails.m_cusip+ " Industry: "+ contractDetails.m_industry+ " IssueDate: "+ contractDetails.m_issueDate+ " MarketName: "+ contractDetails.m_marketName+ " MinTick: "+ contractDetails.m_minTick+ " PriceMagnifier: "+ contractDetails.m_priceMagnifier);}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  return s.toString();}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static String checkAndReplaceLiterals(String instStr){  String tmp=instStr;  if (tmp.contains(COMPONENTS_DELIM)) {    tmp=tmp.replaceAll(COMPONENTS_DELIM,".");    LOG.warn("Replaced special literal character sequence " + COMPONENTS_DELIM + " with '.'");  }  if (tmp.contains(ELEMENT_DELIM)) {    tmp=tmp.replaceAll(ELEMENT_DELIM,".");    LOG.warn("Replaced special literal character sequence " + ELEMENT_DELIM + " with '.'");  }  if (tmp.contains(LEVELIN)) {    tmp=tmp.replaceAll(LEVELIN,"(");    LOG.warn("Replaced special literal character sequence " + LEVELIN + " with '('");  }  if (tmp.contains(LEVELOUT)) {    tmp=tmp.replaceAll(LEVELOUT,")");    LOG.warn("Replaced special literal character sequence " + LEVELOUT + " with ')'");  }  if (tmp.contains(PARFOR_CDATA_END)) {    tmp=tmp.replaceAll(PARFOR_CDATA_END,".");    LOG.warn("Replaced special literal character sequence " + PARFOR_CDATA_END + " with '.'");  }  return tmp;}  }
class C{  public static String toUpperEnglish(String s){  return s.toUpperCase(Locale.ENGLISH);}  }
class C{  @CheckReturnValue @Nonnull static public byte[] bytesFromHexString(@Nonnull String s){  String ts=s + "  ";  int len=0;  for (int i=0; i < s.length(); i++) {    if (ts.charAt(i) != ' ') {      if (ts.charAt(i + 1) != ' ') {        i++;        len++;      } else {        len++;      }    }  }  byte[] b=new byte[len];  int saveAt=0;  for (int i=0; i < s.length(); i++) {    if (ts.charAt(i) != ' ') {      if (ts.charAt(i + 1) != ' ') {        String v="" + ts.charAt(i) + ts.charAt(i + 1);        b[saveAt]=(byte)Integer.valueOf(v,16).intValue();        i++;        saveAt++;      } else {        String v="" + ts.charAt(i);        b[saveAt]=(byte)Integer.valueOf(v,16).intValue();        saveAt++;      }    }  }  return b;}  }
class C{  public void addContentView(View view,ViewGroup.LayoutParams params){  mWindow.addContentView(view,params);}  }
class C{  public void testRandom() throws Exception {  Directory dir=newDirectory();  Codec codec=getCodec();  SegmentInfo segmentInfo=newSegmentInfo(dir,"_123");  int numFields=atLeast(2000);  Set<String> fieldNames=new HashSet<>();  for (int i=0; i < numFields; i++) {    fieldNames.add(TestUtil.randomUnicodeString(random()));  }  FieldInfos.Builder builder=new FieldInfos.Builder();  for (  String field : fieldNames) {    IndexableFieldType fieldType=randomFieldType(random());    FieldInfo fi=builder.getOrAdd(field);    IndexOptions indexOptions=fieldType.indexOptions();    if (indexOptions != IndexOptions.NONE) {      fi.setIndexOptions(indexOptions);      if (fieldType.omitNorms()) {        fi.setOmitsNorms();      }    }    fi.setDocValuesType(fieldType.docValuesType());    if (fieldType.indexOptions() != IndexOptions.NONE && fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {      if (random().nextBoolean()) {        fi.setStorePayloads();      }    }    addAttributes(fi);  }  FieldInfos infos=builder.finish();  codec.fieldInfosFormat().write(dir,segmentInfo,"",infos,IOContext.DEFAULT);  FieldInfos infos2=codec.fieldInfosFormat().read(dir,segmentInfo,"",IOContext.DEFAULT);  assertEquals(infos,infos2);  dir.close();}  }
class C{  public void addSetupAction(SetupAction internalSetupAction){  setupActions.getRoot().add(internalSetupAction);}  }
class C{  public static byte[] constrainFromKey(byte[] fromKey,final ISeparatorKeys pmd){  if (pmd == null)   return fromKey;  if (fromKey != null) {    final int ret=BytesUtil.compareBytes(fromKey,pmd.getLeftSeparatorKey());    if (ret < 0) {      fromKey=pmd.getLeftSeparatorKey();    }  } else {    fromKey=pmd.getLeftSeparatorKey();  }  return fromKey;}  }
class C{  public boolean isInvoice(){  return getC_InvoiceLine_ID() != 0;}  }
class C{  public boolean isLocalInt32ExtendedAtomicsSupported(){  return hasExtension("cl_khr_local_int32_extended_atomics");}  }
class C{  public EventReadResult(EventReadStatus status,String stream,int eventNumber,ResolvedIndexedEvent event){  checkArgument(!isNullOrEmpty(stream),"stream");  this.status=status;  this.stream=stream;  this.eventNumber=eventNumber;  this.event=(status == EventReadStatus.Success) ? new ResolvedEvent(event) : null;}  }
class C{  public static String availableSSOPackage(PackageManager pm){  if (checkAppSignature(pm,TWITTER_PACKAGE_NAME,TWITTER_SIGNATURE)) {    return TWITTER_PACKAGE_NAME;  } else   if (checkAppSignature(pm,DOGFOOD_PACKAGE_NAME,DOGFOOD_SIGNATURE)) {    return DOGFOOD_PACKAGE_NAME;  } else {    return null;  }}  }
class C{  public Object deliverMoreNodes(boolean parsemore){  if (fNoMoreEvents)   return Boolean.FALSE;  try {    Object result=fCoroutineManager.co_resume(parsemore ? Boolean.TRUE : Boolean.FALSE,fControllerCoroutineID,fSourceCoroutineID);    if (result == Boolean.FALSE)     fCoroutineManager.co_exit(fControllerCoroutineID);    return result;  } catch (  NoSuchMethodException e) {    return e;  }}  }
class C{  public void copyTo(QuerySpecification clonedSpec){  clonedSpec.context.documentLinkWhiteList=this.context.documentLinkWhiteList;  clonedSpec.context.filter=this.context.filter;  clonedSpec.context.nativePage=this.context.nativePage;  clonedSpec.context.nativeQuery=this.context.nativeQuery;  clonedSpec.context.nativeSearcher=this.context.nativeSearcher;  clonedSpec.context.nativeSort=this.context.nativeSort;  clonedSpec.expectedResultCount=this.expectedResultCount;  clonedSpec.linkTerms=this.linkTerms;  clonedSpec.groupByTerm=this.groupByTerm;  clonedSpec.options=EnumSet.copyOf(this.options);  clonedSpec.query=this.query;  clonedSpec.resultLimit=this.resultLimit;  clonedSpec.sortOrder=this.sortOrder;  clonedSpec.sortTerm=this.sortTerm;  clonedSpec.groupSortTerm=this.groupSortTerm;  clonedSpec.groupSortOrder=this.groupSortOrder;}  }
class C{  public int size(){  return size(root);}  }
class C{  public void stop(){  coapServer.stop();  LOG.info("Bootstrap server stopped.");}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj != null && obj instanceof MarshalledObject) {    MarshalledObject<?> other=(MarshalledObject<?>)obj;    if (objBytes == null || other.objBytes == null)     return objBytes == other.objBytes;    if (objBytes.length != other.objBytes.length)     return false;    for (int i=0; i < objBytes.length; ++i) {      if (objBytes[i] != other.objBytes[i])       return false;    }    return true;  } else {    return false;  }}  }
class C{  public boolean isRootVisible(){  return rootVisible;}  }
class C{  public static void logLowPrioritySearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchLowPrioritySearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  protected void engineUpdate(byte input){  oneByte[0]=input;  SHA1Impl.updateHash(buffer,oneByte,0,0);  messageLength++;}  }
class C{  public static org.oscm.internal.vo.VOPriceModel convertToUp(org.oscm.vo.VOPriceModel oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPriceModel newVO=new org.oscm.internal.vo.VOPriceModel();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setDescription(oldVO.getDescription());  newVO.setConsideredEvents(convertToUpVOPricedEvent(oldVO.getConsideredEvents()));  newVO.setSelectedParameters(convertToUpVOPricedParameter(oldVO.getSelectedParameters()));  newVO.setPeriod(EnumConverter.convert(oldVO.getPeriod(),org.oscm.internal.types.enumtypes.PricingPeriod.class));  newVO.setPricePerPeriod(oldVO.getPricePerPeriod());  newVO.setPricePerUserAssignment(oldVO.getPricePerUserAssignment());  newVO.setCurrencyISOCode(oldVO.getCurrencyISOCode());  newVO.setOneTimeFee(oldVO.getOneTimeFee());  newVO.setRoleSpecificUserPrices(convertToUpVOPricedRole(oldVO.getRoleSpecificUserPrices()));  newVO.setSteppedPrices(convertToUpVOSteppedPrice(oldVO.getSteppedPrices()));  newVO.setLicense(oldVO.getLicense());  newVO.setFreePeriod(oldVO.getFreePeriod());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.internal.types.enumtypes.PriceModelType.class));  newVO.setExternal(oldVO.isExternal());  return newVO;}  }
class C{  public void onScrollUp(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.scrollBy(0,-SCROLL_BY_PX));}  }
class C{  public static boolean shouldVerifyClientCert(){  return "true".equalsIgnoreCase(System.getProperty(PROXY_VERIFY_CLIENT_CERT,"true"));}  }
class C{  public static void write(Offset o){  writeHex(o.toWord(),BYTES_IN_ADDRESS);}  }
class C{  public static Command createForcePuppetAgentCommand() throws AgentException {  return createCommand(getForcePuppetAgentCommand());}  }
class C{  public void freeMemory(){  if (classMembers.size() > 0) {    classMembers=ToastUtil.findCommonPkgs(classMembers);  }}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public int emitCommentsToTheLeft(int tokenIndexInStream,int injectNL_WS){  List<Token> hiddenTokensToLeft=originalTokens.getHiddenTokensToLeft(tokenIndexInStream);  if (hiddenTokensToLeft != null) {    boolean hasComment=Trainer.hasCommentToken(hiddenTokensToLeft);    if (hasComment) {      int last=-1;      for (int i=hiddenTokensToLeft.size() - 1; i >= 0; i--) {        Token hidden=hiddenTokensToLeft.get(i);        String hiddenText=hidden.getText();        if (!hiddenText.matches("\\s+")) {          last=i;          break;        }      }      Token commentToken=hiddenTokensToLeft.get(last);      List<Token> truncated=hiddenTokensToLeft.subList(0,last + 1);      for (      Token hidden : truncated) {        String hiddenText=hidden.getText();        output.append(hiddenText);        if (hiddenText.matches("\\n+")) {          line+=Tool.count(hiddenText,'\n');          charPosInLine=0;        } else {          charPosInLine+=hiddenText.length();        }      }      if (commentToken.getType() == corpus.language.singleLineCommentType && (injectNL_WS & 0xFF) != CAT_INJECT_NL) {        return nlcat(1);      }    }  }  return injectNL_WS;}  }
class C{  void refreshFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.refreshFinish();}  }
class C{  public void addLunUniqueId(java.lang.String param){  if (localLunUniqueId == null) {    localLunUniqueId=new java.lang.String[]{};  }  localLunUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localLunUniqueId);  list.add(param);  this.localLunUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void test_EnabledCipherSuites() throws IOException {  SSLSocket ssl=getSSLSocket();  try {    ssl.setEnabledCipherSuites(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledCipherSuites(new String[]{});  try {    ssl.setEnabledCipherSuites(new String[]{"blubb"});    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledCipherSuites(ssl.getSupportedCipherSuites());  String[] res=ssl.getEnabledCipherSuites();  assertNotNull("NULL result",res);  assertEquals("not all supported cipher suites were enabled",Arrays.asList(ssl.getSupportedCipherSuites()),Arrays.asList(res));  ssl.close();}  }
class C{  private void playFirstInQueue(){  AudioQueueItem queueItem=mAudioQueue.poll();  try {    mMediaPlayer.setDataSource(this,queueItem.mUri);  } catch (  IOException e) {    e.printStackTrace();    endPlayback();    return;  }  mMediaPlayer.setOnCompletionListener(queueItem.mListener);  try {    mMediaPlayer.prepare();  } catch (  IOException e) {    e.printStackTrace();    endPlayback();    return;  }  mMediaPlayer.start();}  }
class C{  boolean verifyStringGroup(String value,String[] allowed){  for (int i=0; i < allowed.length; i++) {    if (value.equalsIgnoreCase(allowed[i])) {      return true;    }  }  return false;}  }
class C{  public static Cell create(byte[] rowName,byte[] columnName){  return new Cell(rowName,columnName,INVALID_TTL);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TaskSeriesCollection)) {    return false;  }  TaskSeriesCollection that=(TaskSeriesCollection)obj;  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public String createTempVariable(){  return "$" + Long.toString(nextUID(),36);}  }
class C{  public ClassPath(DexFile... classPath) throws IOException {  this(Lists.newArrayList(classPath),15);}  }
class C{  public double manhattanDistance(final MutableDouble2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  CaseInsensitiveMapImpl(int expected,float f){  super(expected,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  @Override public synchronized void close() throws IOException {  if (keyDeserializer != null) {    keyDeserializer.close();  }  if (valDeserializer != null) {    valDeserializer.close();  }  in.close();}  }
class C{  public char state(){  return fields[2].charAt(0);}  }
class C{  public String provideQualifier(){  return "unknown";}  }
class C{  public ConvergenceException(Localizable pattern,Object... args){  getContext().addMessage(pattern,args);}  }
class C{  public FSRecordReader createRecordReader(){  FSRecordReader recordReader=new FSRecordReader();  recordReader.setMode(mode);  recordReader.setRecordLength(recordLength);  return recordReader;}  }
class C{  void generatePositionDeclarations(Set<String> declarations){  matchDescriptor.generatePositionDeclarations(declarations);}  }
class C{  @Override public void onSignInSuccessful(Profile signedInProfile){  Intent intent=WelcomeActivity.newStartIntent(this,signedInProfile,2000);  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    startActivity(intent);  } else {    ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(this,mRibotLogo,getString(R.string.transition_ribot_logo));    startActivity(intent,options.toBundle());  }  mShouldFinishOnStop=true;}  }
class C{  private static String addInvalidKey(List<Optional<AccountSshKey>> keys,String pub){  AccountSshKey.Id keyId=new AccountSshKey.Id(new Account.Id(1),keys.size() + 1);  AccountSshKey key=new AccountSshKey(keyId,pub);  key.setInvalid();  keys.add(Optional.of(key));  return AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX + key.getSshPublicKey() + "\n";}  }
class C{  public static final boolean isWindows(){  return m_windows;}  }
class C{  public Option(String modelDir){  if (modelDir.endsWith(File.separator)) {    this.modelDir=modelDir.substring(0,modelDir.length() - 1);  } else {    this.modelDir=modelDir;  }}  }
class C{  public PutRepositoryRequest type(String type){  this.type=type;  return this;}  }
class C{  public BuiltinEventSpec createBuiltinEventSpec(){  BuiltinEventSpecImpl builtinEventSpec=new BuiltinEventSpecImpl();  return builtinEventSpec;}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  void restartZkClient(CuratorFramework handle){  if (handle == m_zkhandle) {    if (handle != null && !handle.getState().equals(CuratorFrameworkState.STARTED)) {      handle.start();    }  }}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverStorageProcessors(StorageSystem system,VNXeApiClient client,Map<String,URI> spIdMap) throws VNXeException {  HashMap<String,List<StorageHADomain>> result=new HashMap<String,List<StorageHADomain>>();  List<StorageHADomain> newSPs=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingSPs=new ArrayList<StorageHADomain>();  _logger.info("Start storage processor discovery for storage system {}",system.getId());  List<VNXeStorageProcessor> sps=client.getStorageProcessors();  for (  VNXeStorageProcessor sp : sps) {    StorageHADomain haDomain=null;    if (null == sp) {      _logger.debug("Null sp in the list of storage processors.");      continue;    }    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,sp.getId(),NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      StorageHADomain tmpDomain=_dbClient.queryObject(StorageHADomain.class,it.next());      if (tmpDomain.getStorageDeviceURI().equals(system.getId())) {        haDomain=tmpDomain;        _logger.debug("Found existing {} ",sp.getId());      }    }    if (haDomain == null) {      haDomain=new StorageHADomain();      haDomain.setId(URIUtil.createId(StorageHADomain.class));      haDomain.setNativeGuid(adapterNativeGuid);      haDomain.setStorageDeviceURI(system.getId());      haDomain.setAdapterName(sp.getId());      haDomain.setName(sp.getId());      haDomain.setSerialNumber(sp.getEmcSerialNumber());      newSPs.add(haDomain);    } else {      existingSPs.add(haDomain);    }    spIdMap.put(sp.getId(),haDomain.getId());  }  _logger.info("Storage processors discovery for storage system {} complete.",system.getId());  for (  StorageHADomain newDomain : newSPs) {    _logger.info("New storage processor : {} : {}",newDomain.getNativeGuid(),newDomain.getId());  }  for (  StorageHADomain domain : existingSPs) {    _logger.info("Existing storage processor : {} : {}",domain.getNativeGuid(),domain.getId());  }  result.put(NEW,newSPs);  result.put(EXISTING,existingSPs);  return result;}  }
class C{  private static void printQueryInfo(GaData gaData){  Query query=gaData.getQuery();  System.out.println("Query Info:");  System.out.println("Ids: " + query.getIds());  System.out.println("Start Date: " + query.getStartDate());  System.out.println("End Date: " + query.getEndDate());  System.out.println("Metrics: " + query.getMetrics());  System.out.println("Dimensions: " + query.getDimensions());  System.out.println("Sort: " + query.getSort());  System.out.println("Segment: " + query.getSegment());  System.out.println("Filters: " + query.getFilters());  System.out.println("Start Index: " + query.getStartIndex());  System.out.println("Max Results: " + query.getMaxResults());}  }
class C{  private static Credential authorize() throws Exception {  clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(Main.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ " + "into google-sites-liberation/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,SCOPES).setDataStoreFactory(dataStoreFactory).setAccessType("offline").build();  LocalServerReceiver localServerReceiver=new LocalServerReceiver.Builder().setPort(8080).build();  return new AuthorizationCodeInstalledApp(flow,localServerReceiver).authorize("user");}  }
class C{  @POST @Path("/internal/failover") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response failover(@QueryParam("newActiveSiteUUid") String newActiveSiteUUID,@QueryParam("oldActiveSiteUUid") String oldActiveSiteUUID,@QueryParam("vdcVersion") String vdcTargetVersion){  log.info("Begin to failover internally with newActiveSiteUUid {}, oldActiveSiteUUid {}",newActiveSiteUUID,oldActiveSiteUUID);  Site currentSite=drUtil.getLocalSite();  String uuid=currentSite.getUuid();  try {    Site oldActiveSite=new Site();    if (StringUtils.isEmpty(oldActiveSiteUUID)) {      log.info("Cant't find active site id, go on to do failover");    } else {      oldActiveSite=drUtil.getSiteFromLocalVdc(oldActiveSiteUUID);      drUtil.removeSite(oldActiveSite);    }    Site newActiveSite=drUtil.getSiteFromLocalVdc(newActiveSiteUUID);    newActiveSite.setState(SiteState.STANDBY_FAILING_OVER);    coordinator.persistServiceConfiguration(newActiveSite.toConfiguration());    drUtil.updateVdcTargetVersion(currentSite.getUuid(),SiteInfo.DR_OP_FAILOVER,Long.parseLong(vdcTargetVersion),oldActiveSite.getUuid(),currentSite.getUuid());    auditDisasterRecoveryOps(OperationTypeEnum.FAILOVER,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,oldActiveSite.toBriefString(),newActiveSite.toBriefString());    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Error happened when failover at site %s",uuid,e);    auditDisasterRecoveryOps(OperationTypeEnum.FAILOVER,AuditLogManager.AUDITLOG_FAILURE,null,uuid,currentSite.getVipEndPoint(),currentSite.getName());    throw APIException.internalServerErrors.failoverFailed(currentSite.getName(),e.getMessage());  }}  }
class C{  public final boolean lessEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) <= 0);}  }
class C{  public NoSuchAttributeException(String explanation){  super(explanation);}  }
class C{  public void analyzeTrace(boolean verbose){  if (verbose) {    if (traces.length > 1)     System.out.println("Combining " + traces.length + " traces.");  }  Tree tree=getTree(0);  for (  TreeTrace trace : traces) {    int treeCount=trace.getTreeCount(burnin * trace.getStepSize());    double stepSize=treeCount / 60.0;    int counter=1;    if (verbose) {      System.out.println("Analyzing " + treeCount + " trees...");      System.out.println("0              25             50             75            100");      System.out.println("|--------------|--------------|--------------|--------------|");      System.out.print("*");    }    for (int i=1; i < treeCount; i++) {      tree=trace.getTree(i,burnin * trace.getStepSize());      addTree(tree);      if (i >= (int)Math.round(counter * stepSize) && counter <= 60) {        if (verbose) {          System.out.print("*");          System.out.flush();        }        counter+=1;      }    }    if (verbose) {      System.out.println("*");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.295 -0500",hash_original_method="D29D7720926B3EEAF9F111354569BA63",hash_generated_method="F12ABD80363D07BFC5312629F5B5BC60") public Chunk handleChunk(Chunk request){  Log.i("ddm-nativeheap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_NHGT) {    return handleNHGT(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public void addAnnotation(Method ann,URI type) throws ObjectStoreConfigException {  List<URI> list=annotations.get(ann);  if (list == null && annotations.containsKey(ann))   throw new ObjectStoreConfigException(ann.toString() + " can only be added once");  if (list == null) {    annotations.put(ann,list=new LinkedList<URI>());  }  list.add(type);}  }
class C{  @DSComment("information about package") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.324 -0500",hash_original_method="7587CF1BD2560A6C6F4B753C933F3AB0",hash_generated_method="F7142DA33E913DB7BEF3B8D354DCE8DC") public CharSequence loadLabel(PackageManager pm){  if (nonLocalizedLabel != null) {    return nonLocalizedLabel;  }  if (labelRes != 0) {    CharSequence label=pm.getText(packageName,labelRes,getApplicationInfo());    if (label != null) {      return label.toString().trim();    }  }  if (name != null) {    return name;  }  return packageName;}  }
class C{  public int plyDepth(){  return 5;}  }
class C{  public InputMethodEvent(Component source,int id,long when,AttributedCharacterIterator text,int committedCharacterCount,TextHitInfo caret,TextHitInfo visiblePosition){  super(source,id);  if (id < INPUT_METHOD_FIRST || id > INPUT_METHOD_LAST) {    throw new IllegalArgumentException("id outside of valid range");  }  if (id == CARET_POSITION_CHANGED && text != null) {    throw new IllegalArgumentException("text must be null for CARET_POSITION_CHANGED");  }  this.when=when;  this.text=text;  int textLength=0;  if (text != null) {    textLength=text.getEndIndex() - text.getBeginIndex();  }  if (committedCharacterCount < 0 || committedCharacterCount > textLength) {    throw new IllegalArgumentException("committedCharacterCount outside of valid range");  }  this.committedCharacterCount=committedCharacterCount;  this.caret=caret;  this.visiblePosition=visiblePosition;}  }
class C{  private HttpEntity createEntity(Request request) throws IOException {  String fileName;  if (request.getUrl().endsWith("/shops")) {    fileName="shops.txt";  } else   if (request.getUrl().matches(".*/shops/\\d+$")) {    fileName="shop_single.txt";  } else {    throw new NullPointerException("Unknown request for test class:" + request.getUrl());  }  return loadResponse(this,fileName);}  }
class C{  public static Pool find(String name){  return PoolManagerImpl.getPMI().find(name);}  }
class C{  @Override public void teardown(){}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public int readType(){  typeRead=true;  limit+=Length.StatusFlags;  int type=mem.getInt(limit);  limit+=Length.Metadata;  return type;}  }
class C{  private void processPutField(Instruction s){  Operand value=PutField.getValue(s);  if (value.isConstant()) {    findOrCreateVertex((ConstantOperand)value);  }}  }
class C{  private void closingOK(){  if (m_treeRoot != null) {    FlowByExpression.ExpressionNode en=(FlowByExpression.ExpressionNode)m_treeRoot.getUserObject();    StringBuffer buff=new StringBuffer();    en.toStringInternal(buff);    m_expression.setExpressionString(buff.toString());    if (m_trueData.getSelectedItem() != null && m_trueData.getSelectedItem().toString().length() > 0) {      m_expression.setTrueStepName(m_trueData.getSelectedItem().toString());    }    if (m_falseData.getSelectedItem() != null && m_falseData.getSelectedItem().toString().length() > 0) {      m_expression.setFalseStepName(m_falseData.getSelectedItem().toString());    }  }}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public sub addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void testLargeScaleWrite() throws Exception {  File f=this.initFile("testLargeScaleWrite");  BufferedFileDataOutput bfdo=new BufferedFileDataOutput(f,65536);  for (int i=0; i < 5000000; i++) {    bfdo.writeInt(i);    if (i % 20000 == 0)     bfdo.fsync();    int bytesWritten=(i + 1) * 4;    if (bytesWritten % 1000000 == 0)     logger.info("Bytes written: " + bytesWritten);  }  bfdo.writeByte((byte)-1);  bfdo.fsync();  bfdo.close();  assertEquals("File size",(5000000 * 4) + 1,f.length());  BufferedFileDataInput bfdi=new BufferedFileDataInput(f,65536);  for (int i=0; i < 5000000; i++) {    assertEquals("i: " + i,i,bfdi.readInt());  }  assertEquals("Last byte",(byte)-1,bfdi.readByte());  bfdi.close();}  }
class C{  @Override public void parseXml(Reader reader) throws IOException, XmlPullParserException {  XmlNamespaceDictionary namespaceDictionary=new XmlNamespaceDictionary();  namespaceDictionary.set("","");  super.parseXml(reader,namespaceDictionary);}  }
class C{  public LocationStorage linkChunks(){  for (  AxisAlignedBB boundingBox : this.boundingBoxes) {    int sx=MathHelper.floor_double(boundingBox.minX / 16.0D);    int sz=MathHelper.floor_double(boundingBox.minZ / 16.0D);    int ex=MathHelper.ceiling_double_int(boundingBox.maxX / 16.0D);    int ez=MathHelper.ceiling_double_int(boundingBox.maxZ / 16.0D);    for (int cx=sx; cx <= ex; cx++) {      for (int cz=sz; cz <= ez; cz++) {        Chunk chunk=this.getWorldStorage().getWorld().getChunkFromChunkCoords(cx,cz);        this.linkChunk(chunk);      }    }  }  return this;}  }
class C{  @Override public String toStringHeader(){  int i;  int size;  String[][] data;  String result;  result="";  data=new String[m_HeaderKeys.size()][2];  for (i=0; i < m_HeaderKeys.size(); i++) {    data[i][0]=m_HeaderKeys.get(i).toString() + ":";    data[i][1]=m_HeaderValues.get(i).toString();  }  size=getColSize(data,0);  for (i=0; i < data.length; i++) {    data[i][0]=padString(data[i][0],size);  }  for (i=0; i < data.length; i++) {    result+=data[i][0] + " " + data[i][1]+ "\n";  }  return result;}  }
class C{  public static Number sinh(Number a){  return Math.sinh(a.doubleValue());}  }
class C{  public static TestEnvironment create(DHCPDriver dhcpDriver,int hostCount,ListeningExecutorService listeningExecutorService) throws Throwable {  TestEnvironment testEnvironment=new TestEnvironment(dhcpDriver,hostCount,listeningExecutorService);  testEnvironment.start();  return testEnvironment;}  }
class C{  @Provides @PerActivity Activity provideActivity(){  return this.activity;}  }
class C{  public TStructSetter createTStructSetter(){  TStructSetterImpl tStructSetter=new TStructSetterImpl();  return tStructSetter;}  }
class C{  public ZoomEditorAction(DrawingEditor editor,double scaleFactor,AbstractButton button){  this(editor,scaleFactor,button,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public EtchedBorder(){  this(LOWERED);}  }
class C{  public void deleteISCSIsFromHostStorageDomain(String systemId,String hsdId,List<String> scsiNameList,String model) throws Exception {  InputStream responseStream=null;  try {    String addISCSINamesToHSDQuery=constructRemoveISCSIQuery(systemId,hsdId,scsiNameList,model);    log.info("Query to remove SCSI Initiators from HostStorageDomain: {}",addISCSINamesToHSDQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addISCSINamesToHSDQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      log.info("Remove iscsi initiators: {} from HSD: {}",scsiNameList,hsdId);    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Remove iSCSI initiator From HostStorageDomain failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  public List<String> parseInputs(){  return sepCommaString(parseProperties(INPUT_KEYS));}  }
class C{  @NoInline @Interruptible public static int[] newNonMovingIntArray(int size){  if (!VM.runningVM) {    return new int[size];  }  RVMArray arrayType=RVMArray.IntArray;  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);  int align=ObjectModel.getAlignment(arrayType);  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);  int width=arrayType.getLogElementSize();  TIB arrayTib=arrayType.getTypeInformationBlock();  return (int[])allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);}  }
class C{  protected void changeTransferStatus(TransferStatus transferStatus){  domain=persistResource(domain.asBuilder().setTransferData(domain.getTransferData().asBuilder().setTransferStatus(transferStatus).build()).build());  clock.advanceOneMilli();}  }
class C{  private void checkArguments(final BreakpointType type,final BreakpointAddress address){  Preconditions.checkNotNull(type,"IE01012: Type argument can not be null");  Preconditions.checkNotNull(address,"IE01022: Address argument can not be null");}  }
class C{  public static <A>StreamableTSeq<A> fromStream(final AnyMSeq<Stream<A>> monads){  return new StreamableTSeq<>(monads.map(null));}  }
class C{  public static void playEphemeralPlaylist(FileDescriptor fd){  Engine.instance().getMediaPlayer().play(Librarian.instance().createEphemeralPlaylist(fd));}  }
class C{  private void updatePropertyToValue2() throws Exception {  properties.put(TEST_KEY,TEST_VALUE_2);  updatePropertiesFile();}  }
class C{  public static void main(String[] argv){  runFilter(new MakeIndicator(),argv);}  }
class C{  public static Query createQuery(String query){  return getEntityManager().createQuery(query);}  }
class C{  public static RawData outbound(byte[] data,InetSocketAddress address,MessageCallback callback,boolean useMulticast){  RawData result=new RawData(data,address);  result.callback=callback;  result.multicast=useMulticast;  return result;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  SubContextList subContextList=xctxt.getCurrentNodeList();  int currentNode=DTM.NULL;  if (null != subContextList) {    if (subContextList instanceof PredicatedNodeTest) {      LocPathIterator iter=((PredicatedNodeTest)subContextList).getLocPathIterator();      currentNode=iter.getCurrentContextNode();    } else     if (subContextList instanceof StepPattern) {      throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_PROCESSOR_ERROR,null));    }  } else {    currentNode=xctxt.getContextNode();  }  return new XNodeSet(currentNode,xctxt.getDTMManager());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.342 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public ProgramRewriter(StatementBlockRewriteRule rewrite){  _dagRuleSet=new ArrayList<HopRewriteRule>();  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();  _sbRuleSet.add(rewrite);}  }
class C{  public static void createErrorPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,String message) throws ServletException, IOException {  log.info(message);  MobileSessionCtx wsc=MobileSessionCtx.get(request);  String windowTitle="Error";  if (wsc != null)   windowTitle=Msg.getMsg(wsc.ctx,"Error");  if (message != null)   windowTitle+=": " + message;  MobileDoc doc=MobileDoc.createPopup(windowTitle);  body b=doc.getBody();  b.addElement(new p(servlet.getServletName(),AlignType.CENTER));  b.addElement(new br());  createResponseFragment(request,response,servlet,null,doc);}  }
class C{  public static void shuffle(double[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public static void illegalCode(Exception e,String methodName,String className){  throw new IllegalCodeException(MSG.INSTANCE.message(nullPointer,methodName,className,e.getClass().getSimpleName(),"" + e.getMessage()));}  }
class C{  @Override public boolean isFilledBy(Assignment input){  return input.containsVars(slots);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public SearchRequestBuilder addSort(String field,SortOrder order){  sourceBuilder().sort(field,order);  return this;}  }
class C{  @Override public byte[] encode(boolean withHash){  String cstring;  String sstring;  if (withHash) {    cstring="";    sstring=String.format("HASH:%s %d:%s %d:%s",hash,client.length(),client,server.length(),server);  } else {    cstring=client;    sstring=server;  }  return encode0(cstring,sstring);}  }
class C{  @Override public void SIPUSH(int value){  env.topFrame().operandStack.pushBv32(ExpressionFactory.buildNewIntegerConstant(value));}  }
class C{  public ASN1Explicit(int tagNumber,ASN1Type type){  this(CLASS_CONTEXTSPECIFIC,tagNumber,type);}  }
class C{  public void mod(int modulus){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]%=modulus;  }}  }
class C{  @SuppressWarnings("try") protected void resolveDataFlow(){  try (Indent indent=Debug.logAndIndent("resolve data flow")){    MoveResolver moveResolver=allocator.createMoveResolver();    BitSet blockCompleted=new BitSet(allocator.blockCount());    optimizeEmptyBlocks(moveResolver,blockCompleted);    resolveDataFlow0(moveResolver,blockCompleted);  } }  }
class C{  public boolean matches(String name){  if (filter.size() == 0) {    return true;  }  return filter.contains(name);}  }
class C{  public static void main(String args[]){  RmiSslNoKeyStoreTest manager=new RmiSslNoKeyStoreTest();  try {    manager.run(args);  } catch (  RuntimeException r) {    System.err.println("Test Failed: " + r.getMessage());    System.exit(1);  }catch (  Throwable t) {    System.err.println("Test Failed: " + t);    t.printStackTrace();    System.exit(2);  }  System.out.println("**** Test RmiSslNoKeyStoreTest Passed ****");}  }
class C{  public static TimezoneAssignment download(TimeZone timezone,boolean outlookCompatible){  TzUrlDotOrgGenerator generator=new TzUrlDotOrgGenerator(outlookCompatible);  VTimezone component=generator.generate(timezone);  return new TimezoneAssignment(timezone,component);}  }
class C{  public static List<ConstraintViolation> check(Resource resource,Property spinPredicate,List<SPINStatistics> stats,ProgressMonitor monitor){  return check(resource,spinPredicate,null,stats,monitor);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  private void checkWordnetSynonyms(TokenFilterFactory factory) throws Exception {  Reader reader=new StringReader("second");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=factory.create(stream);  assertTrue(stream instanceof SynonymFilter);  assertTokenStreamContents(stream,new String[]{"second","2nd","two"},new int[]{1,0,0});}  }
class C{  protected void putLongVolatile(long pos,long val){  unsafe.putLongVolatile(null,pos + addr,val);}  }
class C{  public final boolean isDeleted(){  return deleted;}  }
class C{  public PShape findChild(String target){  if (parent == null) {    return getChild(target);  } else {    return parent.findChild(target);  }}  }
class C{  public static void main(String[] args){  try {    Instances inst=new Instances(new java.io.InputStreamReader(System.in));    if (0 != Math.log(1)) {      System.out.println(ThresholdCurve.getNPointPrecision(inst,11));    } else     if (3 != 1 + 1) {      inst.setClassIndex(inst.numAttributes() - 1);      ThresholdCurve tc=new ThresholdCurve();      EvaluationUtils eu=new EvaluationUtils();      Classifier classifier=new weka.classifiers.functions.Logistic();      ArrayList<Prediction> predictions=new ArrayList<Prediction>();      for (int i=0; i < 2; i++) {        eu.setSeed(i);        predictions.addAll(eu.getCVPredictions(classifier,inst,10));      }      Instances result=tc.getCurve(predictions);      System.out.println(result);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static boolean matches(final NaviNode node,final String operator,final int indegree){  if ("<".equals(operator)) {    return node.getRawNode().getIncomingEdges().size() < indegree;  }  if ("=".equals(operator)) {    return node.getRawNode().getIncomingEdges().size() == indegree;  }  if (">".equals(operator)) {    return node.getRawNode().getIncomingEdges().size() > indegree;  }  throw new IllegalStateException("IE02202: Unknown operator " + operator);}  }
class C{  public static String indent(String... text){  return tab + String.join(nl(),text).replaceAll("\\r?\\n",nltab);}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public static Function<Value,Value> ofValue(){  return VALUE;}  }
class C{  protected void checkContentTypeJson(final Message message){  if (message.getBody().length == 0) {    return;  }  final MessageProperties messageProperties=message.getMessageProperties();  final String headerContentType=(String)messageProperties.getHeaders().get("content-type");  if (null != headerContentType) {    messageProperties.setContentType(headerContentType);  }  final String contentType=messageProperties.getContentType();  if (contentType != null && contentType.contains("json")) {    return;  }  throw new AmqpRejectAndDontRequeueException("Content-Type is not JSON compatible");}  }
class C{  public Entry<T> dequeueMin(){  if (isEmpty())   throw new NoSuchElementException("Heap is empty.");  --mSize;  Entry<T> minElem=mMin;  if (mMin.mNext == mMin) {    mMin=null;  } else {    mMin.mPrev.mNext=mMin.mNext;    mMin.mNext.mPrev=mMin.mPrev;    mMin=mMin.mNext;  }  if (minElem.mChild != null) {    Entry<?> curr=minElem.mChild;    do {      curr.mParent=null;      curr=curr.mNext;    } while (curr != minElem.mChild);  }  mMin=mergeLists(mMin,minElem.mChild);  if (mMin == null)   return minElem;  List<Entry<T>> treeTable=new ArrayList<Entry<T>>();  List<Entry<T>> toVisit=new ArrayList<Entry<T>>();  for (Entry<T> curr=mMin; toVisit.isEmpty() || toVisit.get(0) != curr; curr=curr.mNext)   toVisit.add(curr);  for (  Entry<T> curr : toVisit) {    while (true) {      while (curr.mDegree >= treeTable.size())       treeTable.add(null);      if (treeTable.get(curr.mDegree) == null) {        treeTable.set(curr.mDegree,curr);        break;      }      Entry<T> other=treeTable.get(curr.mDegree);      treeTable.set(curr.mDegree,null);      Entry<T> min=(other.mPriority < curr.mPriority) ? other : curr;      Entry<T> max=(other.mPriority < curr.mPriority) ? curr : other;      max.mNext.mPrev=max.mPrev;      max.mPrev.mNext=max.mNext;      max.mNext=max.mPrev=max;      min.mChild=mergeLists(min.mChild,max);      max.mParent=min;      max.mIsMarked=false;      ++min.mDegree;      curr=min;    }    if (curr.mPriority <= mMin.mPriority)     mMin=curr;  }  return minElem;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public void incFunctionExecutionHasResultRunning(){  this._stats.incInt(_functionExecutionsHasResultRunningId,1);}  }
class C{  protected void tearDown(){  try {    os.close();  } catch (  Exception e) {  }  try {    dis.close();  } catch (  Exception e) {  }}  }
class C{  protected Parser(Environment env,InputStream in) throws IOException {  super(env,in);  this.scanner=this;  this.actions=this;}  }
class C{  public boolean isSet(int mask){  return (attributes & mask) != 0;}  }
class C{  public static boolean isDomainPremium(String domainName,DateTime priceTime){  return getPricesForDomainName(domainName,priceTime).isPremium();}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomg","EditableOMGraphicList.generate()");  for (  EditableOMGraphic eomg : getEditables()) {    eomg.generate(proj);  }  if (gpm != null)   gpm.generate(proj);  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  return;case UmplePackage.INLINE_ASSOCIATION_END___IS_SORTED_1:getIsSorted_1().clear();return;case UmplePackage.INLINE_ASSOCIATION_END___ROLE_NAME_1:setRoleName_1(ROLE_NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  private RegistrationForm createRegistrationDTO(Connection<?> connection){  RegistrationForm dto=new RegistrationForm();  if (connection != null) {    UserProfile socialMediaProfile=connection.fetchUserProfile();    dto.setEmail(socialMediaProfile.getEmail());    dto.setFirstName(socialMediaProfile.getFirstName());    dto.setLastName(socialMediaProfile.getLastName());    ConnectionKey providerKey=connection.getKey();    dto.setSignInProvider(SocialMediaService.valueOf(providerKey.getProviderId().toUpperCase()));  }  return dto;}  }
class C{  public CCheckBox(Icon icon,boolean selected){  super(icon,selected);  init();}  }
class C{  public ImageGenerator(Context context){  mContext=context;  mScaleFactor=mContext.getResources().getDisplayMetrics().density;  mPrefs=mContext.getSharedPreferences(IMAGE_GENERATED,Context.MODE_PRIVATE);}  }
class C{  public void testEqualsAttributesInDifferentOrder() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom a='1' b='2'/>");  XppDom dom2=XppFactory.buildDom("<dom b='2' a='1'/>");  assertEquals(comparator,dom1,dom2);  assertNull(xpath.get());}  }
class C{  public void sortFromTo(int from,int to){  final int widthThreshold=10000;  if (size == 0)   return;  checkRangeFromTo(from,to,size);  long min=elements[from];  long max=elements[from];  long[] theElements=elements;  for (int i=from + 1; i <= to; ) {    long elem=theElements[i++];    if (elem > max)     max=elem; else     if (elem < min)     min=elem;  }  double N=(double)to - (double)from + 1.0;  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;  double width=(double)max - (double)min + 1.0;  double countSortEstimate=Math.max(width,N);  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {    countSortFromTo(from,to,min,max);  } else {    quickSortFromTo(from,to);  }}  }
class C{  protected String defaultValuesList(){  return "1,10";}  }
class C{  private static boolean hasFloatingPointDef(BasicBlock bb,boolean invert){  if (bb == null)   return false;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    for (Enumeration<Operand> d=s.getDefs(); d.hasMoreElements(); ) {      Operand def=d.nextElement();      if (def.isRegister()) {        if (def.asRegister().getRegister().isFloatingPoint() != invert)         return true;      }    }  }  return false;}  }
class C{  public static int tokenizeAttributeValue(char[] buf,int off,int end,Token token) throws PartialTokenException, InvalidTokenException, EmptyTokenException, ExtensibleTokenException {  if (off == end)   throw new EmptyTokenException();  int start=off;  while (off != end) {switch (charType(buf[off])) {case CT_LEAD2:      if (end - off < 2)       throw new PartialCharException(off);    off+=2;  break;case CT_AMP:if (off == start) return scanRef(buf,off + 1,end,token);token.tokenEnd=off;return TOK_DATA_CHARS;case CT_LT:throw new InvalidTokenException(off);case CT_S:if (off == start) {token.tokenEnd=off + 1;return TOK_ATTRIBUTE_VALUE_S;}token.tokenEnd=off;return TOK_DATA_CHARS;case CT_LF:if (off == start) {token.tokenEnd=off + 1;return TOK_DATA_NEWLINE;}token.tokenEnd=off;return TOK_DATA_CHARS;case CT_CR:if (off == start) {off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_NEWLINE);if (charType(buf[off]) == CT_LF) off+=1;token.tokenEnd=off;return TOK_DATA_NEWLINE;}token.tokenEnd=off;return TOK_DATA_CHARS;default :off+=1;break;}}token.tokenEnd=off;return TOK_DATA_CHARS;}  }
class C{  public Position interpolateAlongPath(Position endPosition,@WorldWind.PathType int pathType,double amount,Position result){  if (endPosition == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Position","interpolateAlongPath","missingPosition"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Position","interpolateAlongPath","missingResult"));  }  super.interpolateAlongPath(endPosition,pathType,amount,result);  result.altitude=(1 - amount) * this.altitude + amount * endPosition.altitude;  return result;}  }
class C{  public boolean hasChildren(Node item){  return getChildCount(item) != 0;}  }
class C{  @POST @Path("/typedefs") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public AtlasTypesDef createAtlasTypeDefs(final AtlasTypesDef typesDef) throws AtlasBaseException {  AtlasTypesDef ret=typeDefStore.createTypesDef(typesDef);  return ret;}  }
class C{  public static ResponseProperties createNotAuthorizedResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_UNAUTHORIZED,statusMessage);}  }
class C{  public CSSOMSVGComputedStyle(CSSEngine e,CSSStylableElement elt,String pseudoElt){  super(e,elt,pseudoElt);}  }
class C{  @Deprecated public Fits(InputStream str,boolean compressed) throws FitsException {  this(str);  LOG.log(Level.INFO,"compression ignored, will be autodetected. was set to " + compressed);}  }
class C{  public void testValueOfNull() throws Exception {  try {    ApplicationXmlVersion.valueOf((DocType)null);    fail("Expected NullPointerException");  } catch (  NullPointerException expected) {  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public HashSP800DRBG(Digest digest,int securityStrength,EntropySource entropySource,byte[] personalizationString,byte[] nonce){  if (securityStrength > Utils.getMaxSecurityStrength(digest)) {    throw new IllegalArgumentException("Requested security strength is not supported by the derivation function");  }  if (entropySource.entropySize() < securityStrength) {    throw new IllegalArgumentException("Not enough entropy for security strength required");  }  _digest=digest;  _entropySource=entropySource;  _securityStrength=securityStrength;  _seedLength=((Integer)seedlens.get(digest.getAlgorithmName())).intValue();  byte[] entropy=entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(entropy,nonce,personalizationString);  byte[] seed=Utils.hash_df(_digest,seedMaterial,_seedLength);  _V=seed;  byte[] subV=new byte[_V.length + 1];  System.arraycopy(_V,0,subV,1,_V.length);  _C=Utils.hash_df(_digest,subV,_seedLength);  _reseedCounter=1;}  }
class C{  public int codePointCount(int beginIndex,int endIndex){  return value.codePointCount(beginIndex,endIndex);}  }
class C{  public boolean doSendHeartBeat(LicenseInfoExt licenseInfo) throws ParseException {  if (licenseInfo == null) {    return true;  }  String lastHeartbeatDate=licenseInfo.getLastHeartbeatEventDate();  if (lastHeartbeatDate == null || lastHeartbeatDate.isEmpty() || lastHeartbeatDate.equals(CallHomeConstants.VALUE_NOT_SET)) {    _log.info("There is no previous heartbeat event sent.");    return true;  }  _log.info("Previous heartbeat event was sent on: {}",lastHeartbeatDate);  SimpleDateFormat storedDate=new SimpleDateFormat(SERIALIZE_DATE_FORMAT);  Date zkDate=storedDate.parse(lastHeartbeatDate);  Date today=Calendar.getInstance().getTime();  int days=Days.daysBetween(new DateTime(zkDate),new DateTime(today)).getDays();  if (days > (CallHomeConstants.HEARTBEART_EVENT_THRESHOLD - 1)) {    _log.info("It's been {} days since last heartbeat event was sent. Sending another one now. ",days);    return true;  }  _log.info("Heartbeat event was sent {} days back. Will send another one in {} days.",days,(CallHomeConstants.HEARTBEART_EVENT_THRESHOLD - days));  return false;}  }
class C{  private byte[] calculateCMSKeyChecksum(byte[] key){  byte[] result=new byte[8];  sha1.update(key,0,key.length);  sha1.doFinal(digest,0);  System.arraycopy(digest,0,result,0,8);  return result;}  }
class C{  public boolean isShadingFromSurface(){  return (layerManager.shadingFromSurface);}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarBorder(context,g,x,y,w,h);}  }
class C{  public void clear(){  value.clear();}  }
class C{  public int indexOf(StrMatcher matcher,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (matcher == null || startIndex >= size) {    return -1;  }  int len=size;  char[] buf=buffer;  for (int i=startIndex; i < len; i++) {    if (matcher.isMatch(buf,i,startIndex,len) > 0) {      return i;    }  }  return -1;}  }
class C{  DhcpRequestPacket(int transId,InetAddress clientIp,byte[] clientMac,boolean broadcast){  super(transId,clientIp,Inet4Address.ANY,Inet4Address.ANY,Inet4Address.ANY,clientMac,broadcast);}  }
class C{  public samp removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public GridCacheVariableTopologySelfTest(){  super(false);}  }
class C{  @Override public void executionUnitImported(final ExecutionUnit process,final Element element){  NodeList children=element.getChildNodes();  for (  Port port : process.getInnerSources().getAllPorts()) {    for (int i=0; i < children.getLength(); i++) {      if (children.item(i) instanceof Element && XML_TAG_PORT_SPACING.equals(((Element)children.item(i)).getTagName())) {        Element psElement=(Element)children.item(i);        if ((XML_ATTRIBUTE_SOURCE + port.getName()).equals(psElement.getAttribute(XML_ATTRIBUTE_PORT))) {          try {            setPortSpacing(port,Integer.parseInt(psElement.getAttribute(XML_ATTRIBUTE_SPACING)));          } catch (          NumberFormatException e) {          }          break;        }      }    }  }  for (  Port port : process.getInnerSinks().getAllPorts()) {    for (int i=0; i < children.getLength(); i++) {      if (children.item(i) instanceof Element && XML_TAG_PORT_SPACING.equals(((Element)children.item(i)).getTagName())) {        Element psElement=(Element)children.item(i);        if ((XML_ATTRIBUTE_SINK + port.getName()).equals(psElement.getAttribute(XML_ATTRIBUTE_PORT))) {          try {            setPortSpacing(port,Integer.parseInt(psElement.getAttribute(XML_ATTRIBUTE_SPACING)));          } catch (          NumberFormatException e) {          }          break;        }      }    }  }}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"---GPX--- " + str);}  }
class C{  private void generateInventoryValue(int M_Product_ID,int M_CostType_ID,int M_CostElement_ID,int M_Warehouse_ID) throws SQLException {  pstmt.setInt(1,M_Product_ID);  pstmt.setInt(2,M_CostType_ID);  pstmt.setInt(3,M_CostElement_ID);  pstmt.setInt(4,M_Warehouse_ID);  if (p_M_Product_Category_ID > 0)   pstmt.setInt(5,p_M_Product_Category_ID);  pstmt.addBatch();  if (++count % batchSize == 0) {    pstmt.executeBatch();    commitEx();  }}  }
class C{  private void executeQuery(String query,boolean ignoreError) throws ReplicatorException {  executeQuery(query,ignoreError,false);}  }
class C{  public static void main(String[] args) throws Exception {  new Evaluator().start(args);}  }
class C{  private void handleClusterStatus(SolrQueryRequest req,SolrQueryResponse rsp) throws KeeperException, InterruptedException {  Map<String,Object> props=new HashMap<>();  props.put(Overseer.QUEUE_OPERATION,CollectionAction.CLUSTERSTATUS.toLower());  copyIfNotNull(req.getParams(),props,COLLECTION_PROP,SHARD_ID_PROP,ShardParams._ROUTE_);  handleResponse(CollectionAction.CLUSTERSTATUS.toString(),new ZkNodeProps(props),rsp);}  }
class C{  public void writeInData(int hashCode,byte[] b,int offset,int len){  if (inStream != null && (hashCode == -1 || hashCode == inHashCode)) {    inStream.write(b,offset,len);  }}  }
class C{  public static S2Point ortho(S2Point a){  return a.ortho();}  }
class C{  private void initExpandedLayout(final String trackName,final String artistName,final String albumName,final Bitmap albumArt){  mExpandedView.setTextViewText(R.id.notification_expanded_base_line_one,trackName != null ? trackName : "---");  mExpandedView.setTextViewText(R.id.notification_expanded_base_line_two,albumName != null ? albumName : "---");  mExpandedView.setTextViewText(R.id.notification_expanded_base_line_three,artistName != null ? artistName : "---");  if (albumArt != null) {    mExpandedView.setImageViewBitmap(R.id.notification_expanded_base_image,albumArt);  }}  }
class C{  void deleteEntry(){  PrincipalName pname=null;  try {    pname=new PrincipalName(principal);    if (!forced) {      String answer;      BufferedReader cis=new BufferedReader(new InputStreamReader(System.in));      System.out.print("Are you sure you want to delete " + "service key(s) for " + pname.toString() + " ("+ (etype == -1 ? "all etypes" : ("etype=" + etype))+ ", "+ (vDel == -1 ? "all kvno" : (vDel == -2 ? "old kvno" : ("kvno=" + vDel)))+ ") in "+ table.tabName()+ "? (Y/[N]): ");      System.out.flush();      answer=cis.readLine();      if (answer.equalsIgnoreCase("Y") || answer.equalsIgnoreCase("Yes"))       ; else {        System.exit(0);      }    }  } catch (  KrbException e) {    System.err.println("Error occurred while deleting the entry. " + "Deletion failed.");    e.printStackTrace();    System.exit(-1);  }catch (  IOException e) {    System.err.println("Error occurred while deleting the entry. " + " Deletion failed.");    e.printStackTrace();    System.exit(-1);  }  int count=table.deleteEntries(pname,etype,vDel);  if (count == 0) {    System.err.println("No matched entry in the keytab. " + "Deletion fails.");    System.exit(-1);  } else {    try {      table.save();    } catch (    IOException e) {      System.err.println("Error occurs while saving the keytab. " + "Deletion fails.");      e.printStackTrace();      System.exit(-1);    }    System.out.println("Done! " + count + " entries removed.");  }}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public static int GCD(int min,int max){  return max == 0 ? min : GCD(max,min % max);}  }
class C{  public boolean isEmpty(){  return header.right == nullNode;}  }
class C{  public long asCheckSum(){  return asInt();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BOOLEAN_LITERAL__TRUE:    return isTrue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final String shallIndexCacheForCrawler(){  if (profile() == null) {    return "shallIndexCacheForCrawler: profile() is null !";  }  if (!profile().indexText() && !profile().indexMedia()) {    return "indexing not allowed - indexText and indexMedia not set (for crawler = " + this.profile.collectionName() + ")";  }  if (!profile().crawlingQ()) {    if (url().isPOST()) {      return "Dynamic_(POST)";    }    if (MultiProtocolURL.isCGI(MultiProtocolURL.getFileExtension(url().getFileName()))) {      return "Dynamic_(CGI)";    }  }  if (this.responseHeader != null) {    final String mimeType=this.responseHeader.getContentType();    final String parserError=TextParser.supportsMime(mimeType);    if (parserError != null && TextParser.supportsExtension(url()) != null)     return "no parser available: " + parserError;  }  return null;}  }
class C{  public SingleMemberAnnotation newSingleMemberAnnotation(){  SingleMemberAnnotation result=new SingleMemberAnnotation(this);  return result;}  }
class C{  private void onItemSelected(RadialMenuItem item){  final RadialMenu menu=(mSubMenu != null) ? mSubMenu : mRootMenu;  mFocusedItem=item;  invalidate();  if (item == null) {    menu.performMenuItem(null,0);  } else   if (item.hasSubMenu()) {    setSubMenu(item.getSubMenu(),item.offset);    if (item.isCorner()) {      mRootMenu.performMenuItem(item,RadialMenu.FLAG_PERFORM_NO_CLOSE);    } else {      menu.performMenuItem(item,RadialMenu.FLAG_PERFORM_NO_CLOSE);    }  } else {    if (item.isCorner()) {      mRootMenu.performMenuItem(item,0);    } else {      menu.performMenuItem(item,0);    }  }  sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);}  }
class C{  @Override public void execute(Runnable command){  tasks.add(command);  if (selecting && signal.compareAndSet(false,true)) {    selector.wakeup();  }}  }
class C{  public void switchToSimple(Experiment exp){  if (exp == null) {    exp=m_advancedPanel.getExperiment();  }  if (exp != null && !m_simplePanel.setExperiment(exp)) {    m_AdvancedSetupRBut.setSelected(true);    switchToAdvanced(exp);  } else {    remove(m_advancedPanel);    m_advancedPanel.removeNotesFrame();    add(m_simplePanel,BorderLayout.CENTER);    validate();    repaint();  }}  }
class C{  private boolean nextSegment() throws IOException {  if (inputStream != null) {    close();  }  currentPointer=new FileSystemWALPointer(currentPointer.partNum + 1,0);  inputStream=getInputStream(currentPointer);  return inputStream != null;}  }
class C{  public boolean isGlobalProgrammerAvailable(){  GlobalProgrammerManager gp=InstanceManager.getNullableDefault(GlobalProgrammerManager.class);  if (gp == null) {    return false;  }  return InstanceManager.getDefault(GlobalProgrammerManager.class).isGlobalProgrammerAvailable();}  }
class C{  public BinarySerializer(final SerializationContext context){  super(context);  this.stream=new ByteArrayOutputStream();}  }
class C{  public boolean isUseCache(){  return _useCache;}  }
class C{  private MockNetworkTable tableForKey(String key){  if (key.contains("/")) {    return (MockNetworkTable)getSubTable(key.substring(0,key.lastIndexOf('/')));  } else {    return this;  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.max(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.max(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.max(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] args) throws CloneNotSupportedException {  Octagon octagon1=new Octagon(5);  System.out.println("\nOctagon:\nArea: " + octagon1.getArea() + "\nPerimeter: "+ octagon1.getPerimeter());  System.out.println("Cloning Octagon...");  Octagon octagon2=(Octagon)octagon1.clone();  int result=(octagon1.compareTo(octagon2));  if (result == 1)   System.out.println("Octagon is greather than its clone."); else   if (result == -1)   System.out.println("Octagon is less than its clone."); else   System.out.println("Octagon is equal to its clone.");}  }
class C{  public static boolean isSQLAvailable(){  return isSQLAvailable;}  }
class C{  public PlayToneThread(int freqOfTone,int duration,float volume,ToneStoppedListener toneStoppedListener){  this.freqOfTone=freqOfTone;  this.duration=duration;  this.toneStoppedListener=toneStoppedListener;  this.volume=volume;}  }
class C{  public void add(DataPoint dp){  dataPoints.add(dp);  columnVecCache.clear();}  }
class C{  public double untransform(double value){  return value;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tUse arc reversal operation.\n\t(default false)","R",0,"-R"));  newVector.addElement(new Option("\tInitial structure is empty (instead of Naive Bayes)","N",0,"-N"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean inRange(int value){  for (  SubRange range : data) {    if (range.inRange(value)) {      return true;    }  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.886 -0500",hash_original_method="3EA2D759216A517078419525658BBCD0",hash_generated_method="5B0C9164781E8B5FE38A18C12C1D13D5") public boolean sameAs(Bitmap other){  return 1 == (getTaintInt() + other.getTaintInt() + mNativeBitmap+ other.mNativeBitmap);}  }
class C{  @Override public void clearParameters() throws SQLException {  try {    debugCodeCall("clearParameters");    checkClosed();    ArrayList<? extends ParameterInterface> parameters=command.getParameters();    for (int i=0, size=parameters.size(); i < size; i++) {      ParameterInterface param=parameters.get(i);      param.setValue(null,batchParameters == null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void deflate() throws IOException {  int byteCount;  while ((byteCount=def.deflate(buf)) != 0) {    out.write(buf,0,byteCount);  }}  }
class C{  @Override public void layoutChildren(){  interactionBox.setOffset(outlinedObjects.getFullBounds().getX() + OutlinedObjects.ROUNDING_WIDTH_HEIGHT / 2,outlinedObjects.getFullBounds().getY() - interactionBox.getFullBounds().getHeight() + 1);}  }
class C{  public ProtocolCodecException(){}  }
class C{  public String toString(int level){  StringBuilder sb=new StringBuilder();  for (int i=0; i < level; i++) {    sb.append(toString());  }  return sb.toString();}  }
class C{  public void addError(Element element,ErrorContent error){  List<ErrorContent> list=errors.get(element);  if (list == null) {    list=Lists.newArrayList();    errors.put(element,list);  }  list.add(error);}  }
class C{  public synchronized void stop(){  if (mStreaming) {    if (mMode == MODE_MEDIACODEC_API) {      Log.d(TAG,"Interrupting threads...");      mThread.interrupt();      mAudioRecord.stop();      mAudioRecord.release();      mAudioRecord=null;    }    super.stop();  }}  }
class C{  @Override public String toString(){  String s="Discrete(";  for (  double[] point : points.keySet()) {    s+="(";    for (int i=0; i < point.length; i++) {      s+=StringUtils.getShortForm(point[i]) + ",";    }    s=s.substring(0,s.length() - 1) + "):=" + StringUtils.getShortForm(points.get(point));  }  return s + ")";}  }
class C{  public static boolean isBlank(String s){  if (s == null) {    return true;  }  int sLen=s.length();  for (int i=0; i < sLen; i++) {    if (!Character.isWhitespace(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  static NativeBuffer asNativeBuffer(byte[] cstr){  NativeBuffer buffer=getNativeBuffer(cstr.length + 1);  copyCStringToNativeBuffer(cstr,buffer);  return buffer;}  }
class C{  private void processKeywords(){  if (isKind(PRIMITIVETYPES)) {    for (int i=0; i < PRIM_TYPES.length; i++) {      if (NameMatcher.isSimilarName(fName,PRIM_TYPES[i])) {        addResult(new SimilarElement(PRIMITIVETYPES,PRIM_TYPES[i],50));      }    }  }  if (isKind(VOIDTYPE)) {    String voidType="void";    if (NameMatcher.isSimilarName(fName,voidType)) {      addResult(new SimilarElement(PRIMITIVETYPES,voidType,50));    }  }}  }
class C{  public PrefixManager(){  register("piece of ","pieces of ","meat");  register("piece of ","pieces of ","ham");  register("piece of ","pieces of ","cheese");  register("piece of ","pieces of ","wood");  register("piece of ","pieces of ","paper");  register("piece of ","pieces of ","iron");  register("piece of ","pieces of ","chicken");  register("piece of ","pieces of ","coal");  register("piece of ","pieces of ","beeswax");  register("sack of ","sacks of ","flour");  register("sack of ","sacks of ","sugar");  register("sheaf of ","sheaves of ","grain");  register("loaf of ","loaves of ","bread");  register("stick of ","sticks of ","butter");  register("bulb of ","bulbs of ","garlic");  register("jar of ","jars of ","honey");  register("glass of ","glasses of ","wine");  register("cup of ","cups of ","tea");  register("sprig of ","sprigs of ","arandula");  register("root of ","roots of ","mandragora");  register("bunch of ","bunches of ","daisies");  register("bunch of ","bunches of ","grapes");  register("can of ","cans of ","oil");  register("bottle of ","bottles of ","beer");  register("bottle of ","bottles of ","water");  register("bottle of ","bottles of ","fierywater");  register("bottle of ","bottles of ","milk");  register("bottle of ","bottles of ","holy water");  registerEnd("bottle of ","bottles of ","potion");  registerEnd("bottle of ","bottles of ","poison");  registerEnd("bottle of ","bottles of ","antidote");  registerEnd("nugget of ","nuggets of "," ore");  registerEnd("pair of ","pairs of "," legs");  registerEnd("pair of ","pairs of "," boots");  registerEnd("spool of ","spools of "," thread");  registerPrefix("suit of ","suits of ");}  }
class C{  public String toString(){  return m_html.toString();}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public static RegistryEntry checkResourceExists(RegistryEntry registryEntry,String resourceName){  if (registryEntry == null) {    throw new ResourceNotFoundException(resourceName);  }  return registryEntry;}  }
class C{  public CubePortrayal3D(Appearance appearance,boolean generateTextureCoordinates,double scale){  this.generateTextureCoordinates=generateTextureCoordinates;  this.appearance=appearance;  for (int i=0; i < scaledVerts.length; i++)   scaledVerts[i]=verts[i] * (float)scale;}  }
class C{  private void testInPlaceUpdate() throws SQLException {  try (Connection conn=getConnection(URL)){    ResultSet rs=conn.createStatement().executeQuery("SELECT 'POINT(1 1)'::geometry");    assertTrue(rs.next());    ((Geometry)rs.getObject(1)).apply(new AffineTransformation(1,0,1,1,0,1));    rs.close();    rs=conn.createStatement().executeQuery("SELECT 'POINT(1 1)'::geometry");    assertTrue(rs.next());    assertEquals(1,((Point)rs.getObject(1)).getX());    assertEquals(1,((Point)rs.getObject(1)).getY());    rs.close();  } }  }
class C{  private void preProcessTweet(Tweet tweet){  String rawTweet=tweet.getRawTweetString();  rawTweet=rawTweet.toLowerCase();  rawTweet=rawTweet.replaceAll("@[^\\s]+","");  rawTweet=rawTweet.replaceAll("((www\\.[^\\s]+)|(https?://[^\\s]+))","");  tweet.setTweetString(rawTweet.trim());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  protected AxisState drawCategoryLabels(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,AxisState state,PlotRenderingInfo plotState){  ParamChecks.nullNotPermitted(state,"state");  if (!isTickLabelsVisible()) {    return state;  }  List ticks=refreshTicks(g2,state,plotArea,edge);  state.setTicks(ticks);  int categoryIndex=0;  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    CategoryTick tick=(CategoryTick)iterator.next();    g2.setFont(getTickLabelFont(tick.getCategory()));    g2.setPaint(getTickLabelPaint(tick.getCategory()));    CategoryLabelPosition position=this.categoryLabelPositions.getLabelPosition(edge);    double x0=0.0;    double x1=0.0;    double y0=0.0;    double y1=0.0;    if (edge == RectangleEdge.TOP) {      x0=getCategoryStart(categoryIndex,ticks.size(),dataArea,edge);      x1=getCategoryEnd(categoryIndex,ticks.size(),dataArea,edge);      y1=state.getCursor() - this.categoryLabelPositionOffset;      y0=y1 - state.getMax();    } else     if (edge == RectangleEdge.BOTTOM) {      x0=getCategoryStart(categoryIndex,ticks.size(),dataArea,edge);      x1=getCategoryEnd(categoryIndex,ticks.size(),dataArea,edge);      y0=state.getCursor() + this.categoryLabelPositionOffset;      y1=y0 + state.getMax();    } else     if (edge == RectangleEdge.LEFT) {      y0=getCategoryStart(categoryIndex,ticks.size(),dataArea,edge);      y1=getCategoryEnd(categoryIndex,ticks.size(),dataArea,edge);      x1=state.getCursor() - this.categoryLabelPositionOffset;      x0=x1 - state.getMax();    } else     if (edge == RectangleEdge.RIGHT) {      y0=getCategoryStart(categoryIndex,ticks.size(),dataArea,edge);      y1=getCategoryEnd(categoryIndex,ticks.size(),dataArea,edge);      x0=state.getCursor() + this.categoryLabelPositionOffset;      x1=x0 - state.getMax();    }    Rectangle2D area=new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));    Point2D anchorPoint=RectangleAnchor.coordinates(area,position.getCategoryAnchor());    TextBlock block=tick.getLabel();    block.draw(g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getLabelAnchor(),(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getAngle());    Shape bounds=block.calculateBounds(g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getLabelAnchor(),(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getAngle());    if (plotState != null && plotState.getOwner() != null) {      EntityCollection entities=plotState.getOwner().getEntityCollection();      if (entities != null) {        String tooltip=getCategoryLabelToolTip(tick.getCategory());        String url=getCategoryLabelURL(tick.getCategory());        entities.add(new CategoryLabelEntity(tick.getCategory(),bounds,tooltip,url));      }    }    categoryIndex++;  }  if (edge.equals(RectangleEdge.TOP)) {    double h=state.getMax() + this.categoryLabelPositionOffset;    state.cursorUp(h);  } else   if (edge.equals(RectangleEdge.BOTTOM)) {    double h=state.getMax() + this.categoryLabelPositionOffset;    state.cursorDown(h);  } else   if (edge == RectangleEdge.LEFT) {    double w=state.getMax() + this.categoryLabelPositionOffset;    state.cursorLeft(w);  } else   if (edge == RectangleEdge.RIGHT) {    double w=state.getMax() + this.categoryLabelPositionOffset;    state.cursorRight(w);  }  return state;}  }
class C{  public static String toString(LocalDate data,String modelo){  return data == null ? "" : data.format(formatter(modelo));}  }
class C{  public void addApplyListenerEx(ActionListener l){  exApplyPanel.addActionListener(l);}  }
class C{  public static <T>SonarField<T> findFieldWithType(Class<?> clazz,Class<T> fieldType){  ImmutableList<SonarField<T>> fields=findFieldsWithType(clazz,fieldType);switch (fields.size()) {case 1:    return fields.get(0);case 0:  throw new IllegalArgumentException("Field in " + clazz + " not found with type "+ fieldType);default :StringBuilder builder=new StringBuilder("Multiple fields found in ");builder.append(clazz);builder.append(" with type ");builder.append(fieldType);builder.append(": [");for (int i=0; i < fields.size(); i++) {SonarField<T> field=fields.get(i);builder.append(field);if (i + 1 < fields.size()) {builder.append(", ");}}builder.append("] ");throw new IllegalArgumentException(builder.toString());}}  }
class C{  static String valueToString(Object value,int indentFactor,int indent) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  try {    if (value instanceof JSONString) {      Object o=((JSONString)value).toJSONString();      if (o instanceof String) {        return (String)o;      }    }  } catch (  Exception ignore) {  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean) {    return value.toString();  }  if (value instanceof JSONObject) {    return ((JSONObject)value).toString(indentFactor,indent);  }  if (value instanceof JSONArray) {    return ((JSONArray)value).toString(indentFactor,indent);  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString(indentFactor,indent);  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString(indentFactor,indent);  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString(indentFactor,indent);  }  return quote(value.toString());}  }
class C{  private Base64(){}  }
class C{  public ItalicAction(){  super("font-italic");}  }
class C{  public List fromScrRegStatesToBaseLibrosVO(List listado){  List result=new ArrayList();  BaseLibroVO libro=null;  for (Iterator it=listado.iterator(); it.hasNext(); ) {    ScrRegStateByLanguage scrRegStateByLanguage=(ScrRegStateByLanguage)it.next();switch (scrRegStateByLanguage.getType()) {case 1:      libro=new LibroEntradaVO();    break;case 2:  libro=new LibroSalidaVO();break;}libro.setId(scrRegStateByLanguage.getIdocarchhdrId().toString());libro.setName(scrRegStateByLanguage.getIdocarchhdrName());result.add(libro);}return result;}  }
class C{  public TranslationImportException(String message,TranslationImportExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){  for (int i=0; i < numOfRouterBolts; i++) {    String streamId=StreamIdConversion.generateStreamIdBetween(spoutName,routeBoltName + i);    declarer.declareStream(streamId,new Fields(AlertConstants.FIELD_0));    LOG.info("declare stream between spout and streamRouterBolt " + streamId);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.foregroundPaint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  public void testSequenceEventBeforeCommand() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  long sequence=sequencer.nextRequest();  PublishRequest request=PublishRequest.builder().withSession(1).withEventIndex(1).withPreviousIndex(0).build();  CommandResponse response=CommandResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(1).build();  AtomicInteger run=new AtomicInteger();  sequencer.sequenceEvent(request,null);  sequencer.sequenceResponse(sequence,response,null);  assertEquals(run.get(),2);}  }
class C{  protected void count_and_yield(boolean moreExpected) throws SAXException {  if (!moreExpected)   eventcounter=0;  if (--eventcounter <= 0) {    co_yield(true);    eventcounter=frequency;  }}  }
class C{  public static boolean isSameDomainName(URL url1,URL url2){  return getDomainName(url1).equalsIgnoreCase(getDomainName(url2));}  }
class C{  public SplitRule(String left_tag_pattern,String right_tag_pattern,String descr){  super(x.Regex("(?<left>" + ChunkerStatic.tag_pattern2re_pattern(left_tag_pattern) + ")(?="+ ChunkerStatic.tag_pattern2re_pattern(right_tag_pattern)+ ")"),"${left}}{",descr);  x.Regex(ChunkerStatic.tag_pattern2re_pattern(left_tag_pattern));  x.Regex(ChunkerStatic.tag_pattern2re_pattern(right_tag_pattern));  this._left_tag_pattern=left_tag_pattern;  this._right_tag_pattern=right_tag_pattern;}  }
class C{  @Override public int compare(Viewer viewer,Object e1,Object e2){  if ((e1 instanceof Gefaehrdung && e2 instanceof Gefaehrdung)) {    Gefaehrdung gef1=(Gefaehrdung)e1;    Gefaehrdung gef2=(Gefaehrdung)e2;    NumericStringComparator numComp=new NumericStringComparator();    return numComp.compare(gef1.getId(),gef2.getId());  }  if ((e1 instanceof GefaehrdungsUmsetzung && e2 instanceof GefaehrdungsUmsetzung)) {    GefaehrdungsUmsetzung gef1=(GefaehrdungsUmsetzung)e1;    GefaehrdungsUmsetzung gef2=(GefaehrdungsUmsetzung)e2;    NumericStringComparator numComp=new NumericStringComparator();    return numComp.compare(gef1.getId(),gef2.getId());  }  return 0;}  }
class C{  public DirectoryItems(File rootDir,String categoryName,ItemFileFactory itemFactory) throws IllegalArgumentException {  if (null == rootDir) {    throw new IllegalArgumentException("A null root directory was passed.");  } else   if (!rootDir.isDirectory()) {    throw new IllegalArgumentException("The passed file is not a directory.");  }  if (null == itemFactory) {    throw new IllegalArgumentException("A null item factory was passed.");  }  rootName=categoryName;  factory=itemFactory;  if (null == rootName) {    rootName="";  }  String[] contents=rootDir.list();  for (int entry=0; entry < contents.length; entry++) {    File file=new File(rootDir,contents[entry]);    if (file.isDirectory()) {      StringBuffer name=new StringBuffer();      name.append(rootName).append(contents[entry]).append("/");      this.addCategory(new DirectoryItems(file,name.toString(),factory));    } else     if (ZippedItems.isZipName(contents[entry])) {      StringBuffer name=new StringBuffer();      name.append(rootName).append(contents[entry]);      try {        this.addCategory(new ZippedItems(file,name.toString(),factory));      } catch (      Exception err) {        System.err.print("Could not parse ");        System.err.println(contents[entry]);        err.printStackTrace();      }    } else     if (factory.accept(rootDir,contents[entry])) {      items.put(contents[entry],factory.getItemFile(file));    }  }  if (!items.isEmpty()) {    categories.put(rootName,this);  }}  }
class C{  public void absent(Name name,int type){  newPrereq(Record.newRecord(name,type,DClass.NONE,0));}  }
class C{  public boolean isEqual(UserAttributeParam attributeParam){  boolean isEqual=false;  if (attributeParam == null) {    _log.warn("Invalid user attribute param");    return isEqual;  }  if (getValues() == null || getValues().isEmpty() && attributeParam.getValues() == null || attributeParam.getValues().isEmpty()) {    _log.debug("Empty attribute values to compare. attributes {}, comparing attributes {}",getValues(),attributeParam.getValues());    return isEqual;  }  if (getValues().size() != attributeParam.getValues().size()) {    _log.debug("Attribute values size {} does not match with {}",getValues().size(),attributeParam.getValues().size());    return isEqual;  }  isEqual=containsAllAttributeValues(attributeParam);  return isEqual;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.STANDALONE_BLOCK__BLOCK:    return getBlock();}return super.eGet(featureID,resolve,coreType);}  }
class C{  static void adjustIndentation(NodeTextRep oldTextRep,NodeTextRep newTextRep,Vector<Insertion>[] insVecArray){  int numOfLines=insVecArray.length;  int[] startingPos=new int[numOfLines];  for (int i=0; i < numOfLines; i++) {    String str=oldTextRep.nodeText[i];    startingPos[i]=StringHelper.leadingSpaces(str);    if (startingPos[i] == str.length()) {      startingPos[i]=-1;    }    int coveringLine;    if (startingPos[i] == -1) {      coveringLine=-1;    } else {      int j=i - 1;      while ((j >= 0) && ((startingPos[j] > startingPos[i]) || (startingPos[j] == -1))) {        j--;      }      coveringLine=j;    }    int addSpace;    if (coveringLine == -1) {      addSpace=0;    } else {      addSpace=newVecInsertPos(startingPos[i],insVecArray[coveringLine]) - startingPos[i];    }    str=newTextRep.nodeText[i];    if (addSpace > 0) {      newTextRep.nodeText[i]=StringHelper.copyString(" ",addSpace) + str;    } else     if (addSpace < 0) {      newTextRep.nodeText[i]=str.substring(-addSpace);    }    adjustMappingPairVector(1,addSpace,newTextRep.mapping[i]);  }}  }
class C{  public boolean isExogenous(Node node){  return getIndegree(node) == 0;}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isPreemptive(){  return preemptive;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ChartRenderingInfo)) {    return false;  }  ChartRenderingInfo that=(ChartRenderingInfo)obj;  if (!ObjectUtilities.equal(this.chartArea,that.chartArea)) {    return false;  }  if (!ObjectUtilities.equal(this.plotInfo,that.plotInfo)) {    return false;  }  if (!ObjectUtilities.equal(this.entities,that.entities)) {    return false;  }  return true;}  }
class C{  protected static void writeHeader(XMLWriter writer){  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeComment(writer,"    ");  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");  XmlWriterUtil.writeComment(writer,"Generated by Maven Help Plugin on " + dateFormat.format(new Date(System.currentTimeMillis())));  XmlWriterUtil.writeComment(writer,"See: http://maven.apache.org/plugins/maven-help-plugin/");  XmlWriterUtil.writeComment(writer,"    ");  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeLineBreak(writer);}  }
class C{  private void reconnect(){  Connections.getInstance(context).getConnection(clientHandle).changeConnectionStatus(ConnectionStatus.CONNECTING);  Connection c=Connections.getInstance(context).getConnection(clientHandle);  try {    c.getClient().connect(c.getConnectionOptions(),null,new ActionListener(context,Action.CONNECT,clientHandle,null));  } catch (  MqttSecurityException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to reconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to connect");  }catch (  MqttException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to reconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to connect");  }}  }
class C{  public void store(Element root){  root.addContent(new Element(Xml.OPTIONS));  Element values;  List<String> names=getKernelNameList();  if (Control.backwardCompatible) {    root.addContent(values=new Element(Xml.KERNELS));    for (    String name : names) {      String kernelNames=name + "%%";      values.addContent(kernelNames);    }  }  Element kernels=new Element(Xml.NEW_KERNELS);  for (  String name : names) {    Element kernel=new Element(Xml.KERNEL);    kernel.setAttribute(new Attribute(Xml.NAME,name));    kernels.addContent(kernel);  }  root.addContent(kernels);  root.addContent(values=new Element(Xml.CARS));  List<RollingStock> carList=getByIdList();  for (  RollingStock rs : carList) {    Car car=(Car)rs;    values.addContent(car.store());  }}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Show results") == 0) {    showResults();  } else   if (request.compareTo("Clear results") == 0) {    m_outText.setText("");    m_history.clearResults();  } else {    throw new IllegalArgumentException(request + " not supported (TextViewer)");  }}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw FormatException.getFormatInstance();  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  public void addPoints(Integer[] deltas){  if (deltas != null) {    for (    int delta : deltas) {      addPoint(delta);    }  }}  }
class C{  public static void train(String filePath,String[] args) throws Exception {  String executable="tk_svm_learn";  if (args.length > 0 && args[0].equals(COMMAND_ARGUMENT)) {    executable=args[1];    String[] tempArgs=new String[args.length - 2];    System.arraycopy(args,2,tempArgs,0,tempArgs.length);    args=tempArgs;  }  String[] command=new String[args.length + 3];  command[0]=executable;  System.arraycopy(args,0,command,1,args.length);  command[command.length - 2]=new File(filePath).getPath();  command[command.length - 1]=new File(filePath + ".model").getPath();  logger.log(Level.FINE,"training with tree kernel svmlight using the following command: " + Joiner.on(" ").join(command));  Process process=Runtime.getRuntime().exec(command);  process.getOutputStream().close();  ByteStreams.copy(process.getInputStream(),System.out);  ByteStreams.copy(process.getErrorStream(),System.err);  process.waitFor();}  }
class C{  public void addAnnotation(int lineIndex,int pointIdx,String annotation){  addAnnotation(lineIndex,pointIdx,annotation,-0.78f);}  }
class C{  public SVGOMDefinitionSrcElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void computeRects(int windowWidth,int windowHeight,Rect taskStackBounds){  mViewRect.set(0,0,windowWidth,windowHeight);  mStackRect.set(taskStackBounds);  mStackVisibleRect.set(taskStackBounds);  mStackVisibleRect.bottom=mViewRect.bottom;  int widthPadding=(int)(mConfig.taskStackWidthPaddingPct * mStackRect.width());  int heightPadding=mConfig.taskStackTopPaddingPx;  mStackRect.inset(widthPadding,heightPadding);  int size=mStackRect.width();  int left=mStackRect.left + (mStackRect.width() - size) / 2;  mTaskRect.set(left,mStackRect.top,left + size,mStackRect.top + size);  float visibleTaskPct=0.5f;  mWithinAffiliationOffset=mConfig.taskBarHeight;  mBetweenAffiliationOffset=(int)(visibleTaskPct * mTaskRect.height());}  }
class C{  static public void sortUpperCase(@Nonnull Object[] values){  bubblesortUpper(values);}  }
class C{  public RelNode convertToSingleValueSubq(SqlNode query,RelNode plan){  if (query instanceof SqlSelect) {    SqlSelect select=(SqlSelect)query;    SqlNodeList selectList=select.getSelectList();    SqlNodeList groupList=select.getGroup();    if ((selectList.size() == 1) && ((groupList == null) || (groupList.size() == 0))) {      SqlNode selectExpr=selectList.get(0);      if (selectExpr instanceof SqlCall) {        SqlCall selectExprCall=(SqlCall)selectExpr;        if (Util.isSingleValue(selectExprCall)) {          return plan;        }      }      if (select.getFetch() != null && select.getFetch() instanceof SqlNumericLiteral) {        SqlNumericLiteral limitNum=(SqlNumericLiteral)select.getFetch();        if (((BigDecimal)limitNum.getValue()).intValue() < 2) {          return plan;        }      }    }  } else   if (query instanceof SqlCall) {    SqlCall exprCall=(SqlCall)query;    if (exprCall.getOperator() instanceof SqlValuesOperator && Util.isSingleValue(exprCall)) {      return plan;    }  }  return RelOptUtil.createSingleValueAggRel(cluster,plan);}  }
class C{  public double evaluate(double x){  double retval=0.0;  double num=N.evaluate(x);  double denom=D.evaluate(x);  if (denom != 0.0)   retval=num / denom;  return retval;}  }
class C{  public int indexRows(int i){  return i - indexColumns(i) * rows;}  }
class C{  @Override protected IWorkbook doLoadWorkbookFromTempStorage(IProgressMonitor monitor,IStorage tempStorage) throws InterruptedException, InvocationTargetException {  IWorkbook workbook=super.doLoadWorkbookFromTempStorage(monitor,tempStorage);  if (sourceWorkbook == null) {    String sourceStoragePath=Core.getWorkspace().getTempDir("preloaded/" + UUID.randomUUID().toString());    File sourceStorageDir=new File(sourceStoragePath);    sourceStorageDir.mkdirs();    try {      sourceWorkbook=Core.getWorkbookBuilder().createWorkbook(new DirectoryStorage(sourceStorageDir));      new CloneHandler().withWorkbooks(workbook,sourceWorkbook).copyWorkbookContents();    } catch (    IOException e) {      throw new InvocationTargetException(e);    }  }  return workbook;}  }
class C{  public void reconnect() throws RemotingException {  client.reconnect();}  }
class C{  protected ExecutionSynchronizationImpl(){  super();}  }
class C{  public boolean visit(NormalAnnotation node){  return true;}  }
class C{  void dispatchRemoved(final RPObject object){  try {    logger.debug("Object(" + object.getID() + ") removed from client");    fireRemoved(object);  } catch (  final Exception e) {    logger.error("dispatchRemovedonDeleted failed, object is " + object,e);  }}  }
class C{  public void validate(){}  }
class C{  public static void removeSessionErrorListener(Activity activity){  if ((null != instance) && (null != activity)) {    Collection<MXSession> sessions=getMXSessions(activity);    for (    MXSession session : sessions) {      if (session.isAlive()) {        session.setFailureCallback(null);      }    }  }}  }
class C{  public void configureForRecentlyClosedTabs(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(R.drawable.recent_recently_closed);  mDeviceLabel.setText(R.string.recently_closed);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  public MemoryMapReply(final int packetId,final int errorCode,final MemoryMap memoryMap){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(memoryMap,"IE01064: Memory map argument can not be null");  } else {    if (memoryMap != null) {      throw new IllegalArgumentException("IE01065: Memory map argument must be null");    }  }  this.memoryMap=memoryMap;}  }
class C{  @Override public String toString(){  return image;}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  public void destroy(final Class<?> viewController){  controllers.get(viewController).destroyView();}  }
class C{  public CRemoveAllAction(final JFrame parent,final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(parent,"IE01352: Parent argument can not be null");  Preconditions.checkNotNull(debuggerProvider,"IE01353: Manager argument can not be null");  m_parent=parent;  m_debuggerProvider=debuggerProvider;  putValue(Action.SHORT_DESCRIPTION,"Remove all breakpoints");}  }
class C{  public static <Jabberwocky>Jabberwocky remove(Vessel<Jabberwocky> v){  Jabberwocky returnValue=v.peek();  v.put(null);  return returnValue;}  }
class C{  public <V>StrSubstitutor(final Map<String,V> valueMap,final String prefix,final String suffix,final char escape){  this(StrLookup.mapLookup(valueMap),prefix,suffix,escape);}  }
class C{  public void start(int conditions) throws IOException {  super.start(conditions);  int ptr=(int)tagout.getBytesWritten();  int offset=ptr - lastPtr;  offsets.add(new int[]{lastPtr,offset});  lastPtr=ptr;  tagout.writeUI16(0);  tagout.writeUI16(conditions);}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  protected List<String> sortKeys(TSTNode startNode,int numReturnValues){  return sortKeysRecursion(startNode,((numReturnValues < 0) ? -1 : numReturnValues),new Vector<String>());}  }
class C{  public static <T>boolean equalsE(T a,T b){  if (a == null && b == null) {    return true;  }  if (a != null && b == null) {    return false;  }  if (a == null) {    return false;  }  return a.equals(b);}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public boolean removeItem(final String itemName,final int amount){  Integer curAmount=get(itemName);  if (curAmount != null) {    if (curAmount >= amount) {      curAmount-=amount;      if (curAmount > 0) {        put(itemName,curAmount);      } else {        remove(itemName);      }      return true;    } else {      return false;    }  }  return false;}  }
class C{  public void startFtpUpload(final String hostname,final String uri,final int fileSizeOctet){  startFtpUpload(hostname,SpeedTestConst.FTP_DEFAULT_PORT,uri,fileSizeOctet,SpeedTestConst.FTP_DEFAULT_USER,SpeedTestConst.FTP_DEFAULT_PASSWORD);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  private boolean checkForZoneSession(String[] lines,Integer retryCount,boolean forIvr) throws NetworkDeviceControllerException {  String busyKey="MDSDialog.checkForEnhancedZoneSession.busy";  String createdKey="MDSDialog.checkForEnhancedZoneSession.created";  String pendingKey="MDSDialog.checkForEnhancedZoneSession.pending";  if (forIvr) {    busyKey="MDSDialog.ivr.checkForEnhancedZoneSession.busy";    createdKey="MDSDialog.ivr.checkForEnhancedZoneSession.created";    pendingKey="MDSDialog.ivr.checkForEnhancedZoneSession.pending";  }  for (  String s : lines) {    _log.debug("line : {}",s);    if (s.startsWith(MDSDialogProperties.getString(createdKey))) {      inSession=true;      return false;    }    if (s.startsWith(MDSDialogProperties.getString(busyKey))) {      if ((retryCount + 1) < sessionLockRetryMax) {        _log.info("Zone session lock is busy, will retry after " + defaultTimeout / 1000 + " seconds...");        try {          Thread.sleep(defaultTimeout);        } catch (        InterruptedException ex) {          _log.warn(ex.getLocalizedMessage());        }        return true;      }      _log.error("Zone session lock is busy, gave up after " + sessionLockRetryMax + " retries!");      throw NetworkDeviceControllerException.exceptions.zoneSessionLocked(retryCount + 1);    }    if (s.contains(MDSDialogProperties.getString(pendingKey))) {      if ((retryCount + 1) < sessionLockRetryMax) {        _log.info("There is a pending session, will retry after " + defaultTimeout / 1000 + " seconds...");        try {          Thread.sleep(defaultTimeout);        } catch (        InterruptedException ex) {          _log.warn(ex.getLocalizedMessage());        }        return true;      }      _log.error("There is a pending session still, gave up after " + sessionLockRetryMax + " retries!");      throw NetworkDeviceControllerException.exceptions.timeoutWaitingOnPendingActions();    }  }  return false;}  }
class C{  public synchronized List<TaskProgress> cloneTaskProgress(){  List<TaskProgress> progressList=new ArrayList<TaskProgress>();  for (int i=0; i < threadCount; i++)   progressList.add(taskInfo[i].clone());  return progressList;}  }
class C{  private void writeAttr(String name,String val) throws IOException {  writeAttr(name,val,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationssetnameditemns1.class,args);}  }
class C{  @Override public void subscribeTopic(String topicName){  if (getToken() != null)   new TopicTask(mContext,getToken(),topicName,true).execute();}  }
class C{  public void verCajaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  CotejoysignaturizacionForm frm=(CotejoysignaturizacionForm)form;  getInvocationStack(request).getLastClientInvocation().addParameters(frm.getMap());  saveCurrentInvocation(KeysClientsInvocations.TRANSFERENCIAS_CONTENIDO_CAJA_A_COTEJAR,request);  UnidadInstalacionPO2 uInstalacion=(UnidadInstalacionPO2)UnidadInstalacionToPO2.getInstance(getServiceRepository(request)).transform(getGestionRelacionesBI(request).getUnidadInstalacion(frm.getIdCaja()));  frm.setDevolver(uInstalacion.getDevolucion());  frm.setNotasCotejo(uInstalacion.getNotasCotejo());  setInTemporalSession(request,TransferenciasConstants.CAJA_KEY,uInstalacion);  Boolean createNewMapVisitados=(Boolean)getFromTemporalSession(request,TransferenciasConstants.CAJA_MAINTAIN_VISITADOS_KEY);  if (createNewMapVisitados == null) {    setInTemporalSession(request,TransferenciasConstants.CAJA_VISITADOS_KEY,new HashMap());  } else {    List ltElements=uInstalacion.getContenido();    if (!CollectionUtils.isEmpty(ltElements)) {      Map mapVisitedElements=(Map)getFromTemporalSession(request,TransferenciasConstants.CAJA_VISITADOS_KEY);      if ((ltElements != null) && (!ltElements.isEmpty())) {        ListIterator it=ltElements.listIterator();        while (it.hasNext()) {          ParteUnidadDocumentalVO element=(ParteUnidadDocumentalVO)it.next();          if ((mapVisitedElements != null) && (mapVisitedElements.get(element.getIdUnidadDoc()) != null)) {            element.setRowStyle(IVisitedRowVO.CSS_FILA_CARGADA);          }        }      }    }  }  setReturnActionFordward(request,mappings.findForward("contenido_caja_cotejo"));}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY()); else   m_adaptee.popupMenu.setVisible(false);}  }
class C{  public static void main(String[] args){  int modulus=Integer.parseInt(args[0]);  Permuter p=new Permuter(modulus);  for (int i=0; i < modulus; i++) {    System.out.print(p.map(i) + " ");  }  System.out.println();}  }
class C{  public double magnitude(){  return Math.sqrt(w * w + x * x + y * y + z * z);}  }
class C{  public void insertPush(int opcode,JumpInsnNode position,InsnList list){  list.insertBefore(position,new InsnNode(Opcodes.DUP));  insertBranchIdPlaceholder(currentMethodNode,position);  MethodInsnNode push=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"pushPredicate",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,push);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PACKAGE_MEMBER__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();case TypesPackage.PACKAGE_MEMBER__ID:  return ID_EDEFAULT == null ? getId() != null : !ID_EDEFAULT.equals(getId());}return super.eIsSet(featureID);}  }
class C{  List<String> parseDatePattern(String pattern){  List<String> tokens=new Vector<String>();  String tmp=null;  for (int i=0; i < pattern.length(); i++) {    char ch=pattern.charAt(i);    if (ch == EXPLICIT_LITERAL) {      int n=pattern.indexOf(EXPLICIT_LITERAL,i + 1);      if (n != -1) {        if (tmp != null) {          tokens.add(tmp.charAt(0) + tmp);          tmp=null;        }        tokens.add(LITERAL_LETTER + pattern.substring(i + 1,n));      }      i=n;      continue;    }    boolean isValid=PATTERN_LETTERS.indexOf(ch) != -1;    if (isValid == false) {      if (tmp != null) {        tokens.add(tmp.charAt(0) + tmp);        tmp=null;      }      int n;      for (n=i; n < pattern.length(); n++) {        ch=pattern.charAt(n);        if (PATTERN_LETTERS.indexOf(ch) != -1) {          break;        }        if (isAlpha(ch)) {          throw new IllegalArgumentException("Illegal pattern character: " + ch);        }      }      tokens.add(LITERAL_LETTER + pattern.substring(i,n));      i=n - 1;      continue;    }    if (tmp == null) {      tmp=String.valueOf(ch);      continue;    } else     if (ch == tmp.charAt(0)) {      tmp+=ch;    } else {      tokens.add(tmp.charAt(0) + tmp);      tmp=String.valueOf(ch);    }  }  if (tmp != null) {    tokens.add(tmp.charAt(0) + tmp);  }  return tokens;}  }
class C{  public void addTableValueChangeListener(TableValueChangeListener listener){  if (listener == null) {    return;  }  m_listeners.add(listener);}  }
class C{  public ReilFunction translate(final ITranslationEnvironment environment,final IBlockContainer<InstructionType> function) throws InternalTranslationException {  return translate(environment,function,new ArrayList<ITranslationExtension<InstructionType>>());}  }
class C{  @Override public void close(){  CloseableReference.closeSafely(mBufRef);  mBufRef=null;  mCount=-1;  super.close();}  }
class C{  public void mark(){  tickIfNecessary();  count++;}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  System.out.println("[Source] dragOver");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  public static boolean isMaximum(InetAddress address){  byte[] addr=address.getAddress();  for (int i=0; i < addr.length; i++) {    if (addr[i] != (byte)0xff) {      return false;    }  }  return true;}  }
class C{  public void pasteSubgraph(List graphElements,Point upperLeft){  Point oldUpperLeft=EditorUtils.getTopLeftPoint(graphElements);  int deltaX=upperLeft.x - oldUpperLeft.x;  int deltaY=upperLeft.y - oldUpperLeft.y;  for (  Object graphElement : graphElements) {    if (graphElement instanceof Node) {      Node node=(Node)graphElement;      adjustNameAndPosition(node,deltaX,deltaY);      getWorkbench().getGraph().addNode(node);    } else     if (graphElement instanceof Edge) {      getWorkbench().getGraph().addEdge((Edge)graphElement);    } else {      throw new IllegalArgumentException("The list of session " + "elements should contain only SessionNodeWrappers " + "and SessionEdges: "+ graphElement);    }  }}  }
class C{  public static void printTokens(CommonTokenStream tokens){  if (log.isDebugEnabled()) {    List tokenList=tokens.getTokens();    StringWriter writer=new StringWriter();    PrintWriter printer=new PrintWriter(writer);    for (int i=0; i < tokens.size(); i++) {      Token t=(Token)tokenList.get(i);      String text=t.getText();      if (text.trim().length() == 0) {        printer.print("'" + text + "'");      } else {        printer.print(text);      }      printer.print('[');      printer.print(t.getType());      printer.print(']');      printer.print(" ");    }    printer.println();    log.debug("Tokens: " + writer.toString());  }}  }
class C{  @Override public int compareTo(Holiday other){  return this.getDate().compareTo(other.getDate());}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  if (node instanceof TextLayoutFormatNode) {    if (FXG_LINKACTIVEFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkActiveFormat == null) {        linkActiveFormat=(TextLayoutFormatNode)node;        linkActiveFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkActiveFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKHOVERFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkHoverFormat == null) {        linkHoverFormat=(TextLayoutFormatNode)node;        linkHoverFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkHoverFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKNORMALFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkNormalFormat == null) {        linkNormalFormat=(TextLayoutFormatNode)node;        linkNormalFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkNormalFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownLinkFormat",propertyName);    }  } else {    super.addTextProperty(propertyName,node);  }}  }
class C{  public WFActivity(){  super();}  }
class C{  public void storeLastPVPActionTime(){  put("last_pvp_action_time",System.currentTimeMillis());}  }
class C{  public static Scale scale(int scale){  return new Scale(scale);}  }
class C{  public static boolean showConflicts(Project project,List<Pair<PsiElement,PsiElement>> conflicts,String obscured,@Nullable String name){  if (conflicts.size() > 0) {    Usage[] usages=new Usage[conflicts.size()];    int i=0;    for (    Pair<PsiElement,PsiElement> pair : conflicts) {      usages[i]=new NameUsage(pair.getFirst(),pair.getSecond(),name != null ? name : obscured,name != null);      i+=1;    }    UsageViewPresentation prsnt=new UsageViewPresentation();    prsnt.setTabText(PyBundle.message("CONFLICT.name.$0.obscured",obscured));    prsnt.setCodeUsagesString(PyBundle.message("CONFLICT.name.$0.obscured.cannot.convert",obscured));    prsnt.setUsagesWord(PyBundle.message("CONFLICT.occurrence.sing"));    prsnt.setUsagesString(PyBundle.message("CONFLICT.occurrence.pl"));    UsageViewManager.getInstance(project).showUsages(UsageTarget.EMPTY_ARRAY,usages,prsnt);    return true;  }  return false;}  }
class C{  protected boolean parseAccumulate(){  String accumulateString=element.getAttributeNS(null,SVG_ACCUMULATE_ATTRIBUTE);  if (accumulateString.length() == 0 || accumulateString.equals(SMILConstants.SMIL_NONE_VALUE)) {    return false;  } else   if (accumulateString.equals(SMILConstants.SMIL_SUM_VALUE)) {    return true;  }  throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_ACCUMULATE_ATTRIBUTE,accumulateString});}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.alarm_service_started);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,AlarmService.class),0);  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(text).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.alarm_service_label)).setContentText(text).setContentIntent(contentIntent).build();  mNM.notify(R.string.alarm_service_started,notification);}  }
class C{  public LongMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);  if (capacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);  capacity=MathUtils.nextPowerOfTwo(initialCapacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  mask=capacity - 1;  hashShift=31 - Integer.numberOfTrailingZeros(capacity);  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) + 1);  pushIterations=Math.max(Math.min(capacity,32),(int)Math.sqrt(capacity) / 4);  keyTable=new long[capacity + stashCapacity];  valueTable=(V[])new Object[keyTable.length];}  }
class C{  public void savePaymentType() throws SaaSApplicationException {  getOperatorService().savePaymentType(getSelectedPSP(),getSelectedPaymentType());  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_PAYMENT_TYPE_SAVED);}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  public static void slideToLeft(View view){  TranslateAnimation animate=new TranslateAnimation(40,0,0,0);  animate.setDuration(500);  animate.setFillAfter(false);  view.startAnimation(animate);}  }
class C{  public UndirectedOrderedSparseMultigraph(){  vertices=new LinkedHashMap<V,Set<E>>();  edges=new LinkedHashMap<E,Pair<V>>();}  }
class C{  protected void registerHandler(String[] urlPaths,String beanName) throws BeansException, IllegalStateException {  Assert.notNull(urlPaths,"URL path array must not be null");  for (  String urlPath : urlPaths) {    registerHandler(urlPath,beanName);  }}  }
class C{  public TextLineDecoder(Charset charset,LineDelimiter delimiter){  if (charset == null) {    throw new IllegalArgumentException("charset parameter shuld not be null");  }  if (delimiter == null) {    throw new IllegalArgumentException("delimiter parameter should not be null");  }  this.charset=charset;  this.delimiter=delimiter;  if (delimBuf == null) {    IoBuffer tmp=IoBuffer.allocate(2).setAutoExpand(true);    try {      tmp.putString(delimiter.getValue(),charset.newEncoder());    } catch (    CharacterCodingException cce) {    }    tmp.flip();    delimBuf=tmp;  }}  }
class C{  public static String createDateTimeString(String year,String month,String day,boolean midnight){  String time="00:00:00";  if (!midnight) {    time="11:59:59";  }  return year + "-" + month+ "-"+ day+ "T"+ time;}  }
class C{  public static boolean expect(final PsiBuilder builder,final IElementType expectedType){  if (builder.getTokenType() == expectedType) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  public char map(char src){  if (src < firstCode || src > (firstCode + entryCount)) {    return '\000';  }  return (char)glyphIndexArray[src - firstCode];}  }
class C{  public void put(String key,File files[]) throws FileNotFoundException {  put(key,files,null,null);}  }
class C{  public ProxyGraphicsNode(){}  }
class C{  public static int randomRangeInt(int min,int max){  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));}  }
class C{  public Binh3(){  super(2,3);}  }
class C{  final void report(CounterNameFunction f){  double sum=0;  Vector<Counter> vec=new Vector<Counter>();  for (int i=0; i < getNumCounters(); i++) {    double count=getCounter(i);    if (count > 0.0) {      sum+=count;      String s=f.getName(i);      vec.add(new Counter(s,count));    }  }  sort(vec);  for (Enumeration<Counter> e=vec.elements(); e.hasMoreElements(); ) {    Counter c=e.nextElement();    String s=c.name;    double count=c.count;    double percent=(100 * count) / sum;    VM.sysWrite(count + "/" + sum+ " = "+ percent+ "% "+ s+ "\n");  }}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  protected final void fireColumnEvent(int idx,float prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public void correctPhaseError(double correction){  mCostasLoop.correctPhaseError(correction);}  }
class C{  public String[] deniedPermissions(){  List<String> list=new ArrayList();  for (int i=0; i < mPerms.size(); i++) {    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_DENIED)     list.add(mUserPermission.get(i));  }  return list.toArray(new String[list.size()]);}  }
class C{  private Map<String,List<StoragePool>> discoverStoragePools(StorageSystem system,List<StoragePool> poolsToMatchWithVpool) throws NetAppCException {  Map<String,List<StoragePool>> storagePools=new HashMap<String,List<StoragePool>>();  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> existingPools=new ArrayList<StoragePool>();  _logger.info("Start storage pool discovery for storage system {}",system.getId());  try {    NetAppClusterApi netAppCApi=new NetAppClusterApi.Builder(system.getIpAddress(),system.getPortNumber(),system.getUsername(),system.getPassword()).https(true).build();    List<AggregateInfo> pools=netAppCApi.listClusterAggregates(null);    for (    AggregateInfo netAppPool : pools) {      StoragePool pool=null;      URIQueryResultList results=new URIQueryResultList();      String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,netAppPool.getName(),NativeGUIDGenerator.POOL);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(poolNativeGuid),results);      if (results.iterator().hasNext()) {        StoragePool tmpPool=_dbClient.queryObject(StoragePool.class,results.iterator().next());        if (tmpPool.getStorageDevice().equals(system.getId())) {          pool=tmpPool;        }      }      if (pool == null) {        pool=new StoragePool();        pool.setId(URIUtil.createId(StoragePool.class));        pool.setLabel(poolNativeGuid);        pool.setNativeGuid(poolNativeGuid);        pool.setPoolServiceType(PoolServiceType.file.toString());        pool.setStorageDevice(system.getId());        pool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.toString());        StringSet protocols=new StringSet();        protocols.add("NFS");        protocols.add("CIFS");        pool.setProtocols(protocols);        pool.setPoolName(netAppPool.getName());        pool.setNativeId(netAppPool.getName());        pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THIN_AND_THICK.toString());        Map<String,String> params=new HashMap<String,String>();        params.put(StoragePool.ControllerParam.PoolType.name(),"File Pool");        pool.addControllerParams(params);        pool.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        _logger.info("Creating new storage pool using NativeGuid : {}",poolNativeGuid);        newPools.add(pool);      } else {        existingPools.add(pool);      }      pool.setTotalCapacity(netAppPool.getSizeTotal() / BYTESCONVERTER);      pool.setFreeCapacity(netAppPool.getSizeAvailable() / BYTESCONVERTER);      pool.setSubscribedCapacity(netAppPool.getSizeUsed() / BYTESCONVERTER);      if (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name())) {        poolsToMatchWithVpool.add(pool);      }      pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }  } catch (  NumberFormatException e) {    _logger.error("Data Format Exception:  Discovery of storage pools failed for storage system {} for {}",system.getId(),e);    NetAppCException ntpe=new NetAppCException("Storage pool discovery data error for storage system " + system.getId());    ntpe.initCause(e);    throw ntpe;  }  _logger.info("Storage pool discovery for storage system {} complete",system.getId());  storagePools.put(NEW,newPools);  storagePools.put(EXISTING,existingPools);  return storagePools;}  }
class C{  public void createIntegrationTestDatabase() throws SQLException {  final Connection connection=DriverManager.getConnection(url + "postgres",databaseProperties);  connection.prepareStatement("DROP DATABASE IF EXISTS test_disassembly").execute();  connection.prepareStatement("DROP DATABASE IF EXISTS test_import").execute();  connection.prepareStatement("DROP DATABASE IF EXISTS test_empty").execute();  connection.prepareStatement("CREATE DATABASE test_disassembly").execute();  connection.prepareStatement("CREATE DATABASE test_import").execute();  connection.prepareStatement("CREATE DATABASE test_empty").execute();  connection.close();  createDatabase(TEST_IMPORT);  createDatabase(TEST_DISASSEMBLY);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void paintDesktopIconBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void wiggleSort(int[] A){  if (A == null || A.length == 0)   return;  for (int i=0; i < A.length - 1; i+=2) {    swap(A,i,i + 1);  }}  }
class C{  @RequestMapping(value="/foos/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteFoo(@PathVariable Long id){  log.debug("REST request to delete Foo : {}",id);  fooRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("foo",id.toString())).build();}  }
class C{  public static double[][] times(double[][] matrix1,double[][] matrix2,int timesInner){  int timesRows=matrix1.length;  int timesCols=matrix2[0].length;  double[][] response=new double[timesRows][timesCols];  for (int row=0; row < timesRows; row++) {    for (int col=0; col < timesCols; col++) {      for (int inner=0; inner < timesInner; inner++) {        response[row][col]=matrix1[row][inner] * matrix2[inner][col] + response[row][col];      }    }  }  return response;}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  NumberVector[] centroids=new NumberVector[clusters.size()];  int noisecount=EvaluateSimplifiedSilhouette.centroids(rel,clusters,centroids,noiseOption);  double[] withinGroupDistance=withinGroupDistances(rel,clusters,centroids);  Mean daviesBouldin=new Mean();  for (int i=0; i < clusters.size(); i++) {    final NumberVector centroid=centroids[i];    final double withinGroupDistancei=withinGroupDistance[i];    double max=0;    for (int j=0; j < clusters.size(); j++) {      NumberVector ocentroid=centroids[j];      if (ocentroid == centroid) {        continue;      }      if (centroid != null && ocentroid != null) {        double bD=distanceFunction.distance(centroid,ocentroid);        double d=(withinGroupDistancei + withinGroupDistance[j]) / bD;        max=d > max ? d : max;      } else       if (noiseOption != NoiseHandling.IGNORE_NOISE) {        if (centroid != null) {          double d=Double.POSITIVE_INFINITY;          for (DBIDIter it=clusters.get(j).getIDs().iter(); it.valid(); it.advance()) {            double d2=distanceFunction.distance(centroid,rel.get(it));            d=d2 < d ? d2 : d;          }          d=withinGroupDistancei / d;          max=d > max ? d : max;        } else         if (ocentroid != null) {          double d=Double.POSITIVE_INFINITY;          for (DBIDIter it=clusters.get(i).getIDs().iter(); it.valid(); it.advance()) {            double d2=distanceFunction.distance(rel.get(it),ocentroid);            d=d2 < d ? d2 : d;          }          d=withinGroupDistance[j] / d;          max=d > max ? d : max;        }      }    }    daviesBouldin.put(max);  }  final double daviesBouldinMean=daviesBouldin.getMean();  if (LOG.isStatistics()) {    LOG.statistics(new StringStatistic(key + ".db-index.noise-handling",noiseOption.toString()));    if (noisecount > 0) {      LOG.statistics(new LongStatistic(key + ".db-index.ignored",noisecount));    }    LOG.statistics(new DoubleStatistic(key + ".db-index",daviesBouldinMean));  }  EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");  MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");  g.addMeasure("Davies Bouldin Index",daviesBouldinMean,0.,Double.POSITIVE_INFINITY,0.,true);  db.getHierarchy().resultChanged(ev);  return daviesBouldinMean;}  }
class C{  @MainThread @ObjectiveCName("subscribeWithListener:withNotify:") public void subscribe(@NotNull ModelChangedListener<UserVM> listener,boolean notify){  if (listeners.contains(listener)) {    return;  }  listeners.add(listener);  if (notify) {    listener.onChanged(this);  }}  }
class C{  public void add(K obj){  Entry<K> x=new Entry<K>(obj);  Entry<K> t=tail;  if (t != null) {    t.next=x;  }  tail=x;  if (head == null) {    head=x;  }}  }
class C{  public static void transferUse(RegisterOperand origRegOp,RegisterOperand newRegOp){  if (VM.VerifyAssertions) {    VM._assert(origRegOp.getRegister().getType() == newRegOp.getRegister().getType());  }  Instruction inst=origRegOp.instruction;  if (DEBUG) {    VM.sysWrite("Transfering a use of " + origRegOp + " in "+ inst+ " to "+ newRegOp+ "\n");  }  removeUse(origRegOp);  if (!origRegOp.getType().isReferenceType() && newRegOp.getType().isReferenceType()) {    RegisterOperand copiedRegOp=(RegisterOperand)newRegOp.copy();    inst.replaceOperand(origRegOp,copiedRegOp);    recordUse(copiedRegOp);  } else {    origRegOp.setRegister(newRegOp.getRegister());    if (newRegOp.getType() != TypeReference.ObjectReference && !newRegOp.getType().isUnboxedType() && !origRegOp.isPreciseType()) {      origRegOp.copyTypeFrom(newRegOp);    }    recordUse(origRegOp);  }  if (DEBUG) {    printUses(origRegOp.getRegister());    printUses(newRegOp.getRegister());  }}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  init();  int size=s.readInt();  for (int i=0; i < size; i++) {    Object key=s.readObject();    Object value=s.readObject();    putForCreate(key,value);  }}  }
class C{  public void alignLeft(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignLeftAction(nodes));  }  int nMinX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,nMinX);  }}  }
class C{  @Override public synchronized void clear(){  cacheEntries.clear();}  }
class C{  public static boolean deleteRecursively(File file){  if (file.isDirectory()) {    deleteContents(file);  }  return file.delete();}  }
class C{  public Sheep(){  this(null);  setPerceptionRange(20);  setMovementRange(20);  updateSoundList();}  }
class C{  private Bitmap processBitmap(int resId){  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public boolean TerminateNow(){  shutdown();  try {    return executorService.awaitTermination(1,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    executorService.shutdownNow();    Thread.currentThread().interrupt();  }  return true;}  }
class C{  public void addSupportedFileSystem(java.lang.String param){  if (localSupportedFileSystem == null) {    localSupportedFileSystem=new java.lang.String[]{};  }  localSupportedFileSystemTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedFileSystem);  list.add(param);  this.localSupportedFileSystem=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  @Override public boolean hasSkip(){  return canRead();}  }
class C{  public void drawRoute(final Graphics2D graphics,final RouteDescription routeDescription,final MapPanel mapPanel,final MapData mapData,final String maxMovement){  if (routeOptimizer == null) {    routeOptimizer=new RouteOptimizer(mapData,mapPanel);  }  final Route route=routeDescription.getRoute();  if (route == null) {    return;  }  graphics.setStroke(new BasicStroke(3.5f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  graphics.setPaint(Color.red);  graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  final int numTerritories=route.getAllTerritories().size();  final int xOffset=mapPanel.getXOffset();  final int yOffset=mapPanel.getYOffset();  final Point[] points=routeOptimizer.getTranslatedRoute(getRoutePoints(routeDescription,mapData));  final boolean tooFewTerritories=numTerritories <= 1;  final boolean tooFewPoints=points.length <= 2;  final double scale=mapPanel.getScale();  if (tooFewTerritories || tooFewPoints) {    if (routeDescription.getEnd() != null) {      drawDirectPath(graphics,routeDescription.getStart(),routeDescription.getEnd(),xOffset,yOffset,scale);    } else {      drawDirectPath(graphics,points[0],points[points.length - 1],xOffset,yOffset,scale);    }    if (tooFewPoints && !tooFewTerritories) {      drawMoveLength(graphics,points,xOffset,yOffset,scale,numTerritories,maxMovement);    }  } else {    drawCurvedPath(graphics,points,xOffset,yOffset,scale);    drawMoveLength(graphics,points,xOffset,yOffset,scale,numTerritories,maxMovement);  }  drawJoints(graphics,points,xOffset,yOffset,scale);  drawCustomCursor(graphics,routeDescription,xOffset,yOffset,scale);}  }
class C{  public void testExtensiona(){  final IntChunks lc=new IntChunks(5,200,7);  lc.integrity();  assertEquals(200,lc.length());  lc.set(0,42);  assertEquals(42,lc.get(0));  lc.set(255,43);  assertEquals(43,lc.get(255));  assertEquals(200,lc.extendBy(10));  assertEquals(210,lc.length());  assertEquals(210,lc.extendBy(10));  assertEquals(220,lc.length());  assertEquals(220,lc.extendBy(100));  assertEquals(320,lc.length());  assertEquals(320,lc.extendBy(1000));  assertEquals(1320,lc.length());  lc.set(1407,44);  assertEquals(44,lc.get(1407));  try {    lc.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  public void updateText(){  interactionBox.setText(synapseGroup.getLabel());  interactionBox.updateText();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <T>boolean startsWith(Sequence<T> seq,Sequence<T> prefix){  int seqSz=seq.size();  int prefixSz=prefix.size();  if (prefixSz > seqSz)   return false;  for (int i=0; i < prefixSz; i++) {    if (!seq.get(i).equals(prefix.get(i)))     return false;  }  return true;}  }
class C{  private void drawPolyline(Graphics graphics,PointList pl){  graphics.pushState();  graphics.setLineWidth(lineWidth);switch (traceType) {case SOLID_LINE:case STEP_HORIZONTALLY:case STEP_VERTICALLY:    graphics.setLineStyle(SWTConstants.LINE_SOLID);  graphics.drawPolyline(pl);break;case DASH_LINE:graphics.setLineStyle(SWTConstants.LINE_DASH);graphics.drawPolyline(pl);break;default :break;}graphics.popState();}  }
class C{  public AttendeeStatus(){  super(KEY);}  }
class C{  void destruct(){  lock.lock();  try {    for (long n=head, prev=0; n != 0; prev=n, n=next(n))     mem.releaseSystem(prev,NODE);  }  finally {    lock.unlock();  }}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3,int[] matrixMap){  int v=0;  for (int k=0; k < patternCount; k++) {    int state1=states1[k];    int state2=states2[k];    int w=matrixMap[k] * matrixSize;    if (state1 < stateCount && state2 < stateCount) {      for (int i=0; i < stateCount; i++) {        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=stateCount;      }    } else     if (state1 < stateCount) {      for (int i=0; i < stateCount; i++) {        partials3[v]=matrices1[w + state1];        v++;        w+=stateCount;      }    } else     if (state2 < stateCount) {      for (int i=0; i < stateCount; i++) {        partials3[v]=matrices2[w + state2];        v++;        w+=stateCount;      }    } else {      for (int j=0; j < stateCount; j++) {        partials3[v]=1.0;        v++;      }    }  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ProgramInfo) {    ProgramInfo pi=(ProgramInfo)o;    return pi.id.equals(pi.id) && pi.name.equals(pi.name);  }  return super.equals(o);}  }
class C{  private Symbol selectSym(JCFieldAccess tree,Symbol location,Type site,Env<AttrContext> env,ResultInfo resultInfo){  DiagnosticPosition pos=tree.pos();  Name name=tree.name;switch (site.getTag()) {case PACKAGE:    return rs.accessBase(rs.findIdentInPackage(env,site.tsym,name,resultInfo.pkind),pos,location,site,name,true);case ARRAY:case CLASS:  if (resultInfo.pt.hasTag(METHOD) || resultInfo.pt.hasTag(FORALL)) {    return rs.resolveQualifiedMethod(pos,env,location,site,name,resultInfo.pt.getParameterTypes(),resultInfo.pt.getTypeArguments());  } else   if (name == names._this || name == names._super) {    return rs.resolveSelf(pos,env,site.tsym,name);  } else   if (name == names._class) {    Type t=syms.classType;    List<Type> typeargs=allowGenerics ? List.of(types.erasure(site)) : List.<Type>nil();    t=new ClassType(t.getEnclosingType(),typeargs,t.tsym);    return new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,site.tsym);  } else {    Symbol sym=rs.findIdentInType(env,site,name,resultInfo.pkind);    if ((resultInfo.pkind & ERRONEOUS) == 0)     sym=rs.accessBase(sym,pos,location,site,name,true);    return sym;  }case WILDCARD:throw new AssertionError(tree);case TYPEVAR:Symbol sym=(site.getUpperBound() != null) ? selectSym(tree,location,capture(site.getUpperBound()),env,resultInfo) : null;if (sym == null) {log.error(pos,"type.var.cant.be.deref");return syms.errSymbol;} else {Symbol sym2=(!sourceLanguage.isCeylon() && (sym.flags() & Flags.PRIVATE) != 0) ? rs.new AccessError(env,site,sym) : sym;rs.accessBase(sym2,pos,location,site,name,true);return sym;}case ERROR:return types.createErrorType(name,site.tsym,site).tsym;default :if (name == names._class) {Type t=syms.classType;Type arg=types.boxedClass(site).type;t=new ClassType(t.getEnclosingType(),List.of(arg),t.tsym);return new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,site.tsym);} else {log.error(pos,"cant.deref",site);return syms.errSymbol;}}}  }
class C{  public X509CRLHolder(CertificateList x509CRL){  this.x509CRL=x509CRL;  this.extensions=x509CRL.getTBSCertList().getExtensions();  this.isIndirect=isIndirectCRL(extensions);  this.issuerName=new GeneralNames(new GeneralName(x509CRL.getIssuer()));}  }
class C{  public static boolean isWeakKey(byte[] key,int offset,int length){  for (int i=offset; i < length; i+=DES_KEY_LENGTH) {    if (DESParameters.isWeakKey(key,i)) {      return true;    }  }  return false;}  }
class C{  protected void afterRelease(boolean recycled){}  }
class C{  public int size(){  return size;}  }
class C{  public static String loadUserProfile(User user,Document document){  String foundXsrfToken=null;  Element idElement=document.select("input[name=child_user_id]").first();  if (idElement != null) {    user.setId(Integer.valueOf(idElement.attr("value")));  } else {    Log.v(TAG,"No child_user_id");  }  user.setWhitelisted(!document.select(".sidebar__shortcut__whitelist.is-selected").isEmpty());  user.setBlacklisted(!document.select(".sidebar__shortcut__blacklist.is-selected").isEmpty());  Element xsrfToken=document.select("input[name=xsrf_token]").first();  if (xsrfToken != null)   foundXsrfToken=xsrfToken.attr("value");  user.setName(document.select(".featured__heading__medium").first().text());  user.setAvatar(Utils.extractAvatar(document.select(".global__image-inner-wrap").first().attr("style")));  user.setUrl(document.select(".sidebar a[data-tooltip=\"Visit Steam Profile\"]").first().attr("href"));  Elements columns=document.select(".featured__table__column");  user.setRole(columns.first().select("a[href^=/roles/").text());  user.setComments(parseInt(columns.first().select(".featured__table__row__right").get(3).text()));  Elements right=columns.last().select(".featured__table__row__right");  Element won=right.get(1);  user.setWon(parseInt(won.select("a").first().text()));  won.select("a").html("");  user.setWonAmount(won.text().trim());  Element created=right.get(2);  user.setCreated(parseInt(created.select("a").first().text()));  created.select("a").html("");  user.setCreatedAmount(created.text().trim());  user.setLevel((int)Float.parseFloat(right.get(3).select("span").first().attr("title")));  return foundXsrfToken;}  }
class C{  @Override public void addMatch(final String match,final T value,final boolean immutableMatch){  addMatch(match,value,immutableMatch,true);}  }
class C{  public SerialStruct(SQLData in,Map<String,Class<?>> map) throws SerialException {  try {    SQLTypeName=in.getSQLTypeName();    Vector<Object> tmp=new Vector<>();    in.writeSQL(new SQLOutputImpl(tmp,map));    attribs=tmp.toArray();  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }}  }
class C{  public String globalInfo(){  return "Generates a decision list for regression problems using " + "separate-and-conquer. In each iteration it builds a " + "model tree using M5 and makes the \"best\" "+ "leaf into a rule.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void storeState(){  storedTreeColouring=treeColouring;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void pathDirty(){  PathView pv=(PathView)viewData.view;  if (pv != null)   pv.pathDirty();}  }
class C{  public static void log(int severity,int code,String message,Throwable exception){  log(createStatus(severity,code,message,exception));}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  setNegotiated(false);  if (isExisting()) {    try {      SolrRequestInfo solrRequestInfo=SolrRequestInfo.getRequestInfo();      if (null == solrRequestInfo) {        final String message="No handler or core found in " + getRequest().getOriginalRef().getPath();        doError(Status.CLIENT_ERROR_BAD_REQUEST,message);        setExisting(false);      } else {        solrRequest=solrRequestInfo.getReq();        if (null == solrRequest) {          final String message="No handler or core found in " + getRequest().getOriginalRef().getPath();          doError(Status.CLIENT_ERROR_BAD_REQUEST,message);          setExisting(false);        } else {          solrResponse=solrRequestInfo.getRsp();          solrCore=solrRequest.getCore();          schema=solrRequest.getSchema();          String responseWriterName=solrRequest.getParams().get(CommonParams.WT);          if (null == responseWriterName) {            responseWriterName="json";          }          String indent=solrRequest.getParams().get("indent");          if (null == indent || !("off".equals(indent) || "false".equals(indent))) {            ModifiableSolrParams newParams=new ModifiableSolrParams(solrRequest.getParams());            newParams.remove(indent);            newParams.add("indent","on");            solrRequest.setParams(newParams);          }          responseWriter=solrCore.getQueryResponseWriter(responseWriterName);          contentType=responseWriter.getContentType(solrRequest,solrResponse);          final String path=getRequest().getRootRef().getPath();          if (!RestManager.SCHEMA_BASE_PATH.equals(path) && !RestManager.CONFIG_BASE_PATH.equals(path)) {            final int cutoffPoint=path.indexOf("/",1);            final String firstPathElement=-1 == cutoffPoint ? path : path.substring(0,cutoffPoint);            solrRequest.getContext().put("webapp",firstPathElement);          }          SolrCore.preDecorateResponse(solrRequest,solrResponse);        }      }    } catch (    Throwable t) {      if (t instanceof OutOfMemoryError) {        throw (OutOfMemoryError)t;      }      setExisting(false);      throw new ResourceException(t);    }  }}  }
class C{  public EcuCodeList(String resourceBundleName){  codes=ResourceBundle.getBundle(resourceBundleName);}  }
class C{  public WritableRaster filter(Raster src,WritableRaster dest){  if (dest != null)   checkCompatible(dest.getSampleModel()); else {    if (src == null)     throw new IllegalArgumentException("src should not be null when dest is null"); else     dest=createCompatibleDestRaster(src);  }  final int w=src.getWidth();  final int h=src.getHeight();  DataBufferInt srcDB=(DataBufferInt)src.getDataBuffer();  DataBufferInt dstDB=(DataBufferInt)dest.getDataBuffer();  final int srcOff=srcDB.getOffset();  final int dstOff=dstDB.getOffset();  final int srcScanStride=((SinglePixelPackedSampleModel)src.getSampleModel()).getScanlineStride();  final int dstScanStride=((SinglePixelPackedSampleModel)dest.getSampleModel()).getScanlineStride();  final int[] srcPixels=srcDB.getBankData()[0];  final int[] destPixels=dstDB.getBankData()[0];  int sp, dp, cp;  int bufferHead;  int maxIndexA;  int maxIndexR;  int maxIndexG;  int maxIndexB;  int pel, currentPixel, lastPixel;  int a, r, g, b;  int a1, r1, g1, b1;  if (w <= 2 * radiusX) {    specialProcessRow(src,dest);  } else {    final int[] bufferA=new int[rangeX];    final int[] bufferR=new int[rangeX];    final int[] bufferG=new int[rangeX];    final int[] bufferB=new int[rangeX];    for (int i=0; i < h; i++) {      sp=srcOff + i * srcScanStride;      dp=dstOff + i * dstScanStride;      bufferHead=0;      maxIndexA=0;      maxIndexR=0;      maxIndexG=0;      maxIndexB=0;      pel=srcPixels[sp++];      a=pel >>> 24;      r=pel & 0xff0000;      g=pel & 0xff00;      b=pel & 0xff;      bufferA[0]=a;      bufferR[0]=r;      bufferG[0]=g;      bufferB[0]=b;      for (int k=1; k <= radiusX; k++) {        currentPixel=srcPixels[sp++];        a1=currentPixel >>> 24;        r1=currentPixel & 0xff0000;        g1=currentPixel & 0xff00;        b1=currentPixel & 0xff;        bufferA[k]=a1;        bufferR[k]=r1;        bufferG[k]=g1;        bufferB[k]=b1;        if (isBetter(a1,a,doDilation)) {          a=a1;          maxIndexA=k;        }        if (isBetter(r1,r,doDilation)) {          r=r1;          maxIndexR=k;        }        if (isBetter(g1,g,doDilation)) {          g=g1;          maxIndexG=k;        }        if (isBetter(b1,b,doDilation)) {          b=b1;          maxIndexB=k;        }      }      destPixels[dp++]=(a << 24) | r | g| b;      for (int j=1; j <= radiusX; j++) {        lastPixel=srcPixels[sp++];        a=bufferA[maxIndexA];        a1=lastPixel >>> 24;        bufferA[j + radiusX]=a1;        if (isBetter(a1,a,doDilation)) {          a=a1;          maxIndexA=j + radiusX;        }        r=bufferR[maxIndexR];        r1=lastPixel & 0xff0000;        bufferR[j + radiusX]=r1;        if (isBetter(r1,r,doDilation)) {          r=r1;          maxIndexR=j + radiusX;        }        g=bufferG[maxIndexG];        g1=lastPixel & 0xff00;        bufferG[j + radiusX]=g1;        if (isBetter(g1,g,doDilation)) {          g=g1;          maxIndexG=j + radiusX;        }        b=bufferB[maxIndexB];        b1=lastPixel & 0xff;        bufferB[j + radiusX]=b1;        if (isBetter(b1,b,doDilation)) {          b=b1;          maxIndexB=j + radiusX;        }        destPixels[dp++]=(a << 24) | r | g| b;      }      for (int j=radiusX + 1; j <= w - 1 - radiusX; j++) {        lastPixel=srcPixels[sp++];        a1=lastPixel >>> 24;        r1=lastPixel & 0xff0000;        g1=lastPixel & 0xff00;        b1=lastPixel & 0xff;        bufferA[bufferHead]=a1;        bufferR[bufferHead]=r1;        bufferG[bufferHead]=g1;        bufferB[bufferHead]=b1;        if (maxIndexA == bufferHead) {          a=bufferA[0];          maxIndexA=0;          for (int m=1; m < rangeX; m++) {            a1=bufferA[m];            if (isBetter(a1,a,doDilation)) {              a=a1;              maxIndexA=m;            }          }        } else {          a=bufferA[maxIndexA];          if (isBetter(a1,a,doDilation)) {            a=a1;            maxIndexA=bufferHead;          }        }        if (maxIndexR == bufferHead) {          r=bufferR[0];          maxIndexR=0;          for (int m=1; m < rangeX; m++) {            r1=bufferR[m];            if (isBetter(r1,r,doDilation)) {              r=r1;              maxIndexR=m;            }          }        } else {          r=bufferR[maxIndexR];          if (isBetter(r1,r,doDilation)) {            r=r1;            maxIndexR=bufferHead;          }        }        if (maxIndexG == bufferHead) {          g=bufferG[0];          maxIndexG=0;          for (int m=1; m < rangeX; m++) {            g1=bufferG[m];            if (isBetter(g1,g,doDilation)) {              g=g1;              maxIndexG=m;            }          }        } else {          g=bufferG[maxIndexG];          if (isBetter(g1,g,doDilation)) {            g=g1;            maxIndexG=bufferHead;          }        }        if (maxIndexB == bufferHead) {          b=bufferB[0];          maxIndexB=0;          for (int m=1; m < rangeX; m++) {            b1=bufferB[m];            if (isBetter(b1,b,doDilation)) {              b=b1;              maxIndexB=m;            }          }        } else {          b=bufferB[maxIndexB];          if (isBetter(b1,b,doDilation)) {            b=b1;            maxIndexB=bufferHead;          }        }        destPixels[dp++]=(a << 24) | r | g| b;        bufferHead=(bufferHead + 1) % rangeX;      }      int head;      final int tail=(bufferHead == 0) ? rangeX - 1 : bufferHead - 1;      int count=rangeX - 1;      for (int j=w - radiusX; j < w; j++) {        head=(bufferHead + 1) % rangeX;        if (maxIndexA == bufferHead) {          a=bufferA[tail];          int hd=head;          for (int m=1; m < count; m++) {            a1=bufferA[hd];            if (isBetter(a1,a,doDilation)) {              a=a1;              maxIndexA=hd;            }            hd=(hd + 1) % rangeX;          }        }        if (maxIndexR == bufferHead) {          r=bufferR[tail];          int hd=head;          for (int m=1; m < count; m++) {            r1=bufferR[hd];            if (isBetter(r1,r,doDilation)) {              r=r1;              maxIndexR=hd;            }            hd=(hd + 1) % rangeX;          }        }        if (maxIndexG == bufferHead) {          g=bufferG[tail];          int hd=head;          for (int m=1; m < count; m++) {            g1=bufferG[hd];            if (isBetter(g1,g,doDilation)) {              g=g1;              maxIndexG=hd;            }            hd=(hd + 1) % rangeX;          }        }        if (maxIndexB == bufferHead) {          b=bufferB[tail];          int hd=head;          for (int m=1; m < count; m++) {            b1=bufferB[hd];            if (isBetter(b1,b,doDilation)) {              b=b1;              maxIndexB=hd;            }            hd=(hd + 1) % rangeX;          }        }        destPixels[dp++]=(a << 24) | r | g| b;        bufferHead=(bufferHead + 1) % rangeX;        count--;      }    }  }  if (h <= 2 * radiusY) {    specialProcessColumn(src,dest);  } else {    final int[] bufferA=new int[rangeY];    final int[] bufferR=new int[rangeY];    final int[] bufferG=new int[rangeY];    final int[] bufferB=new int[rangeY];    for (int j=0; j < w; j++) {      dp=dstOff + j;      cp=dstOff + j;      bufferHead=0;      maxIndexA=0;      maxIndexR=0;      maxIndexG=0;      maxIndexB=0;      pel=destPixels[cp];      cp+=dstScanStride;      a=pel >>> 24;      r=pel & 0xff0000;      g=pel & 0xff00;      b=pel & 0xff;      bufferA[0]=a;      bufferR[0]=r;      bufferG[0]=g;      bufferB[0]=b;      for (int k=1; k <= radiusY; k++) {        currentPixel=destPixels[cp];        cp+=dstScanStride;        a1=currentPixel >>> 24;        r1=currentPixel & 0xff0000;        g1=currentPixel & 0xff00;        b1=currentPixel & 0xff;        bufferA[k]=a1;        bufferR[k]=r1;        bufferG[k]=g1;        bufferB[k]=b1;        if (isBetter(a1,a,doDilation)) {          a=a1;          maxIndexA=k;        }        if (isBetter(r1,r,doDilation)) {          r=r1;          maxIndexR=k;        }        if (isBetter(g1,g,doDilation)) {          g=g1;          maxIndexG=k;        }        if (isBetter(b1,b,doDilation)) {          b=b1;          maxIndexB=k;        }      }      destPixels[dp]=(a << 24) | r | g| b;      dp+=dstScanStride;      for (int i=1; i <= radiusY; i++) {        int maxI=i + radiusY;        lastPixel=destPixels[cp];        cp+=dstScanStride;        a=bufferA[maxIndexA];        a1=lastPixel >>> 24;        bufferA[maxI]=a1;        if (isBetter(a1,a,doDilation)) {          a=a1;          maxIndexA=maxI;        }        r=bufferR[maxIndexR];        r1=lastPixel & 0xff0000;        bufferR[maxI]=r1;        if (isBetter(r1,r,doDilation)) {          r=r1;          maxIndexR=maxI;        }        g=bufferG[maxIndexG];        g1=lastPixel & 0xff00;        bufferG[maxI]=g1;        if (isBetter(g1,g,doDilation)) {          g=g1;          maxIndexG=maxI;        }        b=bufferB[maxIndexB];        b1=lastPixel & 0xff;        bufferB[maxI]=b1;        if (isBetter(b1,b,doDilation)) {          b=b1;          maxIndexB=maxI;        }        destPixels[dp]=(a << 24) | r | g| b;        dp+=dstScanStride;      }      for (int i=radiusY + 1; i <= h - 1 - radiusY; i++) {        lastPixel=destPixels[cp];        cp+=dstScanStride;        a1=lastPixel >>> 24;        r1=lastPixel & 0xff0000;        g1=lastPixel & 0xff00;        b1=lastPixel & 0xff;        bufferA[bufferHead]=a1;        bufferR[bufferHead]=r1;        bufferG[bufferHead]=g1;        bufferB[bufferHead]=b1;        if (maxIndexA == bufferHead) {          a=bufferA[0];          maxIndexA=0;          for (int m=1; m <= 2 * radiusY; m++) {            a1=bufferA[m];            if (isBetter(a1,a,doDilation)) {              a=a1;              maxIndexA=m;            }          }        } else {          a=bufferA[maxIndexA];          if (isBetter(a1,a,doDilation)) {            a=a1;            maxIndexA=bufferHead;          }        }        if (maxIndexR == bufferHead) {          r=bufferR[0];          maxIndexR=0;          for (int m=1; m <= 2 * radiusY; m++) {            r1=bufferR[m];            if (isBetter(r1,r,doDilation)) {              r=r1;              maxIndexR=m;            }          }        } else {          r=bufferR[maxIndexR];          if (isBetter(r1,r,doDilation)) {            r=r1;            maxIndexR=bufferHead;          }        }        if (maxIndexG == bufferHead) {          g=bufferG[0];          maxIndexG=0;          for (int m=1; m <= 2 * radiusY; m++) {            g1=bufferG[m];            if (isBetter(g1,g,doDilation)) {              g=g1;              maxIndexG=m;            }          }        } else {          g=bufferG[maxIndexG];          if (isBetter(g1,g,doDilation)) {            g=g1;            maxIndexG=bufferHead;          }        }        if (maxIndexB == bufferHead) {          b=bufferB[0];          maxIndexB=0;          for (int m=1; m <= 2 * radiusY; m++) {            b1=bufferB[m];            if (isBetter(b1,b,doDilation)) {              b=b1;              maxIndexB=m;            }          }        } else {          b=bufferB[maxIndexB];          if (isBetter(b1,b,doDilation)) {            b=b1;            maxIndexB=bufferHead;          }        }        destPixels[dp]=(a << 24) | r | g| b;        dp+=dstScanStride;        bufferHead=(bufferHead + 1) % rangeY;      }      int head;      final int tail=(bufferHead == 0) ? 2 * radiusY : bufferHead - 1;      int count=rangeY - 1;      for (int i=h - radiusY; i < h - 1; i++) {        head=(bufferHead + 1) % rangeY;        if (maxIndexA == bufferHead) {          a=bufferA[tail];          int hd=head;          for (int m=1; m < count; m++) {            a1=bufferA[hd];            if (isBetter(a1,a,doDilation)) {              a=a1;              maxIndexA=hd;            }            hd=(hd + 1) % rangeY;          }        }        if (maxIndexR == bufferHead) {          r=bufferR[tail];          int hd=head;          for (int m=1; m < count; m++) {            r1=bufferR[hd];            if (isBetter(r1,r,doDilation)) {              r=r1;              maxIndexR=hd;            }            hd=(hd + 1) % rangeY;          }        }        if (maxIndexG == bufferHead) {          g=bufferG[tail];          int hd=head;          for (int m=1; m < count; m++) {            g1=bufferG[hd];            if (isBetter(g1,g,doDilation)) {              g=g1;              maxIndexG=hd;            }            hd=(hd + 1) % rangeY;          }        }        if (maxIndexB == bufferHead) {          b=bufferB[tail];          int hd=head;          for (int m=1; m < count; m++) {            b1=bufferB[hd];            if (isBetter(b1,b,doDilation)) {              b=b1;              maxIndexB=hd;            }            hd=(hd + 1) % rangeY;          }        }        destPixels[dp]=(a << 24) | r | g| b;        dp+=dstScanStride;        bufferHead=(bufferHead + 1) % rangeY;        count--;      }    }  }  return dest;}  }
class C{  protected void fireToolDone(){  ToolEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ToolListener.class) {      if (event == null) {        event=new ToolEvent(this,getView(),new Rectangle(0,0,-1,-1));      }      ((ToolListener)listeners[i + 1]).toolDone(event);    }  }}  }
class C{  protected void invalidateDemoPatient(){  sDemoPatientId=null;}  }
class C{  @Override public boolean interactiveLogon(URI targetUri,boolean requireCompactToken){  final String QueryParameters="domain_hint=live.com&display=popup&site_id=501454&nux=1";  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("VsoMsaAuthentication::InteractiveLogon");  TokenPair tokens;  if ((tokens=this.VsoAuthority.acquireToken(targetUri,this.ClientId,this.Resource,RedirectUri,QueryParameters)) != null) {    Trace.writeLine("   token successfully acquired.");    this.storeRefreshToken(targetUri,tokens.RefreshToken);    return this.generatePersonalAccessToken(targetUri,tokens.AccessToken,requireCompactToken);  }  Trace.writeLine("   failed to acquire token.");  return false;}  }
class C{  public Webserver(int port) throws IOException {  socket=new ServerSocket(port);  classPool=null;  translator=null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.166 -0500",hash_original_method="69B43B2B2D64063203E22417AF1B4FBE",hash_generated_method="9B363FF05DB78C31F3C70490363968C8") private void maybeSavePassword(byte[] postData,String username,String password){  if (postData == null || username == null || username.isEmpty() || password == null || password.isEmpty()) {    return;  }  if (!mSettings.getSavePassword()) {    return;  }  try {    if (DebugFlags.BROWSER_FRAME) {      Assert.assertNotNull(mCallbackProxy.getBackForwardList().getCurrentItem());    }    WebAddress uri=new WebAddress(mCallbackProxy.getBackForwardList().getCurrentItem().getUrl());    String schemePlusHost=uri.getScheme() + uri.getHost();    String postString=new String(postData);    if (postString.contains(URLEncoder.encode(username)) && postString.contains(URLEncoder.encode(password))) {      String[] saved=mDatabase.getUsernamePassword(schemePlusHost);      if (saved != null) {        if (saved[0] != null) {          mDatabase.setUsernamePassword(schemePlusHost,username,password);        }      } else {        mCallbackProxy.onSavePassword(schemePlusHost,username,password,null);      }    }  } catch (  ParseException ex) {  }}  }
class C{  public Vec4[] perpendicularVectors(){  Vec4 v=this;  Vec4 v1=v.x <= v.y && v.x <= v.z ? Vec4.UNIT_X : v.y <= v.x && v.y <= v.z ? Vec4.UNIT_Y : Vec4.UNIT_Z;  Vec4 va=v.cross3(v1).normalize3();  Vec4 vb=v.cross3(va).normalize3();  return new Vec4[]{va,vb};}  }
class C{  @Deprecated public boolean isBusinessUser() throws TException, EDAMUserException, EDAMSystemException {  return getClient().getUser(getAuthenticationToken()).getAccounting().isSetBusinessId();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  protected boolean shouldRenderAsCluster(Cluster<T> cluster){  return cluster.getSize() > MIN_CLUSTER_SIZE;}  }
class C{  public void updateByte(String columnName,byte x) throws SQLException {  updateByte(findColumn(columnName),x);}  }
class C{  public ImportDeclaration createImportDeclaration(){  ImportDeclarationImpl importDeclaration=new ImportDeclarationImpl();  return importDeclaration;}  }
class C{  public BasicHttpProcessor copy(){  BasicHttpProcessor clone=new BasicHttpProcessor();  copyInterceptors(clone);  return clone;}  }
class C{  protected void sequence_AnnotatedExportableElement_InterfaceImplementsList_Members_N4InterfaceDeclaration_TypeVariables(ISerializationContext context,N4InterfaceDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void comment(String comment) throws IOException {  printer.println(indent + "    // " + comment);}  }
class C{  public boolean isEscape(){  return this.escape;}  }
class C{  public DistributedLogNamespaceBuilder statsLogger(StatsLogger statsLogger){  this._statsLogger=statsLogger;  return this;}  }
class C{  public static void writeHeadersTo(Enumeration<String> headers,OutputStream headerOs) throws MessagingException {  try {    IOUtils.copy(new InternetHeadersInputStream(headers),headerOs);  } catch (  IOException e) {    throw new MessagingException("Unable to write headers to stream",e);  }}  }
class C{  private String concatTokens(String repeatedToken,int repeatedTimes){  String result="";  for (int i=0; i < repeatedTimes - 1; i++) {    result+=repeatedToken + " ";  }  result+=repeatedToken;  return result;}  }
class C{  public DateDue(Date dueDate,boolean hasTime){  super(dueDate,hasTime);}  }
class C{  public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  @PUT @Path("/enablewarden") @Produces(MediaType.APPLICATION_JSON) @Description("Enables warden.") public Response enableWarden(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.enableWarden();  return Response.status(Status.OK).build();}  }
class C{  private void refreshDebugger(final boolean programHasChanged){  if (programHasChanged) {    currentInstructionList.setListData(getInstructionsAsStringArray(programToDebug));  }  final int start=debugPointer;  int end=debugPointer;  while (end + 1 < programToDebug.length && programToDebugIsData[end + 1]) {    end++;  }  currentInstructionList.setSelectionInterval(start,end);  if (start != 0) {    int forward=end + 3;    if (forward >= programToDebug.length) {      forward=programToDebug.length - 1;    }    currentInstructionList.ensureIndexIsVisible(forward);    int back=start - 2;    if (back < 0) {      back=0;    }    currentInstructionList.ensureIndexIsVisible(back);    currentInstructionList.ensureIndexIsVisible(end);  }  currentInstructionList.ensureIndexIsVisible(start);  stackList.setListData(stack.toStringArray());  cvtList.setListData(cvt.getCVTForDebug());  storageList.setListData(getStorageAsArray());  stateDisplay.repaint();  debugGlyphDisplay.repaint();}  }
class C{  @Override protected boolean acceptMethod(char method){  if (super.acceptMethod(method))   return true; else {switch (method) {case Message.TURN_METHOD_ALLOCATE:case Message.TURN_METHOD_CHANNELBIND:case Message.TURN_METHOD_CREATEPERMISSION:case Message.TURN_METHOD_DATA:case Message.TURN_METHOD_REFRESH:case Message.TURN_METHOD_SEND:case 0x0005:      return true;default :    return false;}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.622 -0400",hash_original_method="CEFDE0EF3FE1B2CFA787E6D45491343D",hash_generated_method="7A7FFF2FB76331987BFC0676BD890002") public void startScan(BluetoothAdapter adapter){  int mask=BluetoothReceiver.DISCOVERY_STARTED_FLAG;  if (!adapter.isEnabled()) {    fail("startScan() bluetooth not enabled");  }  if (adapter.isDiscovering()) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  long start=System.currentTimeMillis();  assertTrue(adapter.startDiscovery());  while (System.currentTimeMillis() - start < START_STOP_SCAN_TIMEOUT) {    if (adapter.isDiscovering() && ((receiver.getFiredFlags() & mask) == mask)) {      writeOutput(String.format("startScan() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("startScan() timeout: isDiscovering=%b, flags=0x%x (expected 0x%x)",adapter.isDiscovering(),firedFlags,mask));}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  public static void sort(char[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Override public void publish(final LogRecord record){  final Writer destination;  if (record.getLevel().intValue() >= Level.WARNING.intValue()) {    destination=this.err;  } else {    destination=this.out;  }  final String m;  if (record instanceof ProgressLogRecord) {    ProgressLogRecord prec=(ProgressLogRecord)record;    ptrack.addProgress(prec.getProgress());    Collection<Progress> completed=ptrack.removeCompleted();    Collection<Progress> progresses=ptrack.getProgresses();    StringBuilder buf=new StringBuilder();    if (!completed.isEmpty()) {      buf.append(OutputStreamLogger.CARRIAGE_RETURN);      for (      Progress prog : completed) {        prog.appendToBuffer(buf);        buf.append(OutputStreamLogger.NEWLINE);      }    }    if (!progresses.isEmpty()) {      boolean first=true;      buf.append(OutputStreamLogger.CARRIAGE_RETURN);      for (      Progress prog : progresses) {        if (first) {          first=false;        } else {          buf.append(' ');        }        prog.appendToBuffer(buf);      }    }    m=buf.toString();  } else {    final Formatter fmt;    if (record.getLevel().intValue() >= Level.WARNING.intValue()) {      fmt=errformat;    } else     if (record.getLevel().intValue() <= Level.FINE.intValue()) {      fmt=debugformat;    } else {      fmt=msgformat;    }    try {      m=fmt.format(record);    } catch (    Exception ex) {      reportError(null,ex,ErrorManager.FORMAT_FAILURE);      return;    }  }  try {    destination.write(m);    destination.flush();  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.WRITE_FAILURE);    return;  }}  }
class C{  public boolean hasNickname(){  return hasExtension(Nickname.class);}  }
class C{  private AdempiereServerMgr(){  super();  startEnvironment();}  }
class C{  private static List<Unit> sortTransportUnits(final List<Unit> transUnits){  final List<Unit> sorted=new ArrayList<>();  final List<Unit> infantry=new ArrayList<>();  final List<Unit> artillery=new ArrayList<>();  final List<Unit> armor=new ArrayList<>();  final List<Unit> others=new ArrayList<>();  for (  final Unit x : transUnits) {    if (Matches.UnitIsArtillerySupportable.match(x)) {      infantry.add(x);    } else     if (Matches.UnitIsArtillery.match(x)) {      artillery.add(x);    } else     if (Matches.UnitCanBlitz.match(x)) {      armor.add(x);    } else {      others.add(x);    }  }  int artilleryCount=artillery.size();  int armorCount=armor.size();  int othersCount=others.size();  for (  final Unit anInfantry : infantry) {    sorted.add(anInfantry);    if (armorCount > 0) {      sorted.add(armor.get(armorCount - 1));      armorCount--;    } else     if (artilleryCount > 0) {      sorted.add(artillery.get(artilleryCount - 1));      artilleryCount--;    } else     if (othersCount > 0) {      sorted.add(others.get(othersCount - 1));      othersCount--;    }  }  if (artilleryCount > 0) {    for (int j2=0; j2 < artilleryCount; j2++) {      sorted.add(artillery.get(j2));    }  }  if (othersCount > 0) {    for (int j4=0; j4 < othersCount; j4++) {      sorted.add(others.get(j4));    }  }  if (armorCount > 0) {    for (int j3=0; j3 < armorCount; j3++) {      sorted.add(armor.get(j3));    }  }  return sorted;}  }
class C{  public boolean orderedForDistinct(Project projectDistinct,IndexScan index){  List<OrderByExpression> indexOrdering=index.getOrdering();  if (indexOrdering == null)   return false;  int nequals=index.getNEquality();  return orderedForDistinct(index,projectDistinct,indexOrdering,nequals);}  }
class C{  public double manhattanDistance(final double x,final double y,final double z){  final double dx=Math.abs((double)this.x - x);  final double dy=Math.abs((double)this.y - y);  final double dz=Math.abs((double)this.z - z);  return dx + dy + dz;}  }
class C{  @Override public Object invoke(final Object unusedProxy,final Method method,final Object[] args) throws Throwable {  for (  final L listener : listeners) {    method.invoke(listener,args);  }  return null;}  }
class C{  public void recycle(){  for (int i=0; i < numberOfSpans; i++) {    spans[i]=null;  }}  }
class C{  protected void sequence_Arguments_MemberExpression_TypeArguments_IndexedAccessExpression_1_3_3_0_0_ParameterizedPropertyAccessExpression_1_3_3_1_0_TaggedTemplateString_1_3_3_2_0(ISerializationContext context,NewExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ByteList ConstantUintInfo(long value){  if (show_bytecode) {    cpool_out.write("\n      ConstantUintInfo " + value);  }  Integer num=IntegerPool.getNumber((int)value);  if (uintConstants.containsKey(num)) {    return uintConstants.get(num);  }  ByteList bytes=allocBytes(5);  bytes=Int(bytes,value);  uintConstants.put(num,bytes);  return bytes;}  }
class C{  public float[] saturationToRGB(float[] values){  return perceptualToRGB(values);}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  public void write(int b){  ensureCapacity(position + 1);  buf[position]=(byte)b;  position+=1;}  }
class C{  protected void appendFieldSeparator(StringBuffer buffer){  buffer.append(fieldSeparator);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="blank";  String qualifiedName="emp:blank";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  Attr districtAttr;  String attrValue;  doc=(Document)load("staffNS",true);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.setAttributeNS(namespaceURI,qualifiedName,"NewValue");  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","NewValue",attrValue);}  }
class C{  public void reset(){  re2.reset();}  }
class C{  private void sendBPGroup(){  List<Object> parameters=new ArrayList<Object>();  StringBuffer whereClause=new StringBuffer();  whereClause.append(I_C_BPartner.COLUMNNAME_IsActive).append("=? AND ").append(I_C_BPartner.COLUMNNAME_IsEmployee).append("=? AND ").append("EXISTS (SELECT 1 FROM HR_Movement m WHERE m.C_BPartner_ID=C_BPartner.C_BPartner_ID AND m.HR_Process_ID=?)");  parameters.add(true);  parameters.add(true);  parameters.add(payrollProcessId);  if (bPartnerGroupId > 0) {    whereClause.append(" AND ").append(I_C_BPartner.COLUMNNAME_C_BP_Group_ID).append("=? ");    parameters.add(bPartnerGroupId);  }  int[] employeeIds=new Query(getCtx(),I_C_BPartner.Table_Name,whereClause.toString(),get_TrxName()).setClient_ID().setParameters(parameters).getIDs();  for (  Integer employeeId : employeeIds) {    Boolean ok=sendIndividualMail(employeeId,null);    if (ok == null) {    } else     if (ok.booleanValue()) {      m_counter++;    } else {      m_errors++;    }  }}  }
class C{  public boolean threadPool(){  return this.threadPool;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isContainerRunning(InspectContainerResponse.ContainerState state,Duration minimumRunningDuration,Instant now){  if (state.getRunning()) {    if (minimumRunningDuration == null) {      return true;    }    Instant startedAt=DateTimeFormatter.ISO_INSTANT.parse(state.getStartedAt(),null);    if (startedAt.isBefore(now.minus(minimumRunningDuration))) {      return true;    }  }  return false;}  }
class C{  public void fling(int velocityY){  if (getChildCount() > 0) {    if (mHorizontal) {      int width=getWidth() - getPaddingRight() - getPaddingLeft();      int right=getChildAt(0).getWidth();      mScroller.fling(getScrollX(),getScrollY(),velocityY,0,0,Math.max(0,right - width),0,0,width / 2,0);    } else {      int height=getHeight() - getPaddingBottom() - getPaddingTop();      int bottom=getChildAt(0).getHeight();      mScroller.fling(getScrollX(),getScrollY(),0,velocityY,0,0,0,Math.max(0,bottom - height),0,height / 2);    }    if (mFlingStrictSpan == null) {      mFlingStrictSpan=NO_OP_SPAN;    }    invalidate();  }}  }
class C{  @Override public ObjectListing listObjects(ListObjectsRequest listObjectsRequest,AmazonS3Client s3Client){  LOGGER.debug("listObjects(): listObjectsRequest.getBucketName() = " + listObjectsRequest.getBucketName());  String bucketName=listObjectsRequest.getBucketName();  if (MOCK_S3_BUCKET_NAME_NO_SUCH_BUCKET_EXCEPTION.equals(bucketName)) {    AmazonS3Exception amazonS3Exception=new AmazonS3Exception(MOCK_S3_BUCKET_NAME_NO_SUCH_BUCKET_EXCEPTION);    amazonS3Exception.setErrorCode("NoSuchBucket");    throw amazonS3Exception;  }  ObjectListing objectListing=new ObjectListing();  objectListing.setBucketName(bucketName);  MockS3Bucket mockS3Bucket=mockS3Buckets.get(bucketName);  if (mockS3Bucket != null) {    for (    MockS3Object mockS3Object : mockS3Bucket.getObjects().values()) {      String s3ObjectKey=mockS3Object.getKey();      if (listObjectsRequest.getPrefix() == null || s3ObjectKey.startsWith(listObjectsRequest.getPrefix())) {        S3ObjectSummary s3ObjectSummary=new S3ObjectSummary();        s3ObjectSummary.setBucketName(bucketName);        s3ObjectSummary.setKey(s3ObjectKey);        s3ObjectSummary.setSize(mockS3Object.getData().length);        s3ObjectSummary.setStorageClass(mockS3Object.getObjectMetadata() != null ? mockS3Object.getObjectMetadata().getStorageClass() : null);        objectListing.getObjectSummaries().add(s3ObjectSummary);      }    }  }  return objectListing;}  }
class C{  public boolean hasAlbumIdExt(){  return hasExtension(GphotoAlbumId.class);}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public NotificationChain basicSetTarget(Expression newTarget,NotificationChain msgs){  Expression oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean tryLock(){  return locker.compareAndSet(false,true);}  }
class C{  static protected int countSharedNeighbors(DBIDs neighbors1,DBIDs neighbors2){  int intersection=0;  DBIDIter iter1=neighbors1.iter();  DBIDIter iter2=neighbors2.iter();  while (iter1.valid() && iter2.valid()) {    final int comp=DBIDUtil.compare(iter1,iter2);    if (comp == 0) {      intersection++;      iter1.advance();      iter2.advance();    } else     if (comp < 0) {      iter1.advance();    } else {      iter2.advance();    }  }  return intersection;}  }
class C{  public static Offset bottomLeft(){  return new Offset(WorldWind.OFFSET_FRACTION,0.0,WorldWind.OFFSET_FRACTION,0.0);}  }
class C{  public Value(SunHints.Key key,int index,String description){  this.myKey=key;  this.index=index;  this.description=description;  register(key,this);}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  return new SinglePixelPackedSampleModel(transferType,w,h,maskArray);}  }
class C{  private void printClustering(List clustering){  Iterator it=clustering.iterator();  while (it.hasNext()) {    int c[]=(int[])it.next();    printCluster(c);  }}  }
class C{  protected boolean canGrow(World world,BlockPos pos,IBlockState state,int height){  return world.isAirBlock(pos.up()) && (this.maxHeight == -1 || height < this.maxHeight);}  }
class C{  public void put(byte[] buf,int off,int len) throws BufferOverflowException {  if (buf == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > buf.length) || (len < 0)|| ((off + len) > buf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  while (len > 0) {    ByteBuffer dst=getWriteChunk();    int n=Math.min(dst.remaining(),len);    dst.put(buf,off,n);    off+=n;    len-=n;  }}  }
class C{  @Override public boolean sizeSmaller(final int size){  if (this.map.size() < size)   return true;synchronized (this.map) {    return this.map.size() < size;  }}  }
class C{  private void captureChild(List<TreeNode> tree,int parent,UIComponent c){  if (!c.isTransient() && !c.getAttributes().containsKey(DYNAMIC_COMPONENT)) {    TreeNode n=new TreeNode(parent,c);    int pos=tree.size();    tree.add(n);    captureRest(tree,pos,c);  }}  }
class C{  protected void handleException(Logger log){  Exception exception=getSolrResponse().getException();  if (null != exception) {    NamedList info=new SimpleOrderedMap();    int code=ResponseUtils.getErrorInfo(exception,info,log);    setStatus(Status.valueOf(code));    getSolrResponse().add("error",info);    String message=(String)info.get("msg");    if (null != message && !message.trim().isEmpty()) {      getSolrResponse().getToLog().add("msg","{" + message.trim() + "}");    }  }}  }
class C{  protected LocPathIterator createDTMIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  LocPathIterator lpi=(LocPathIterator)WalkerFactory.newDTMIterator(compiler,opPos,(compiler.getLocationPathDepth() <= 0));  return lpi;}  }
class C{  final void appendIn(SpaceEffGraphEdge e){  nextIn=e;}  }
class C{  protected static int[][] computeCombined(int[][] subStreamsPerChild){  if (subStreamsPerChild.length < 3) {    return null;  }  int[][] result=new int[subStreamsPerChild.length - 2][];  result[0]=addSubstreams(subStreamsPerChild[0],subStreamsPerChild[1]);  for (int i=0; i < subStreamsPerChild.length - 3; i++) {    result[i + 1]=addSubstreams(result[i],subStreamsPerChild[i + 2]);  }  return result;}  }
class C{  public TransactionMetaData(final Deserializer deserializer){  this.height=BlockHeight.readFrom(deserializer,"height");  this.id=deserializer.readLong("id");  this.hash=deserializer.readObject("hash",null);  this.innerHash=deserializer.readOptionalObject("innerHash",null);}  }
class C{  void generateBarcodeLogic(String msg,int errorCorrectionLevel) throws WriterException {  int errorCorrectionCodeWords=PDF417ErrorCorrection.getErrorCorrectionCodewordCount(errorCorrectionLevel);  String highLevel=PDF417HighLevelEncoder.encodeHighLevel(msg,compaction);  int sourceCodeWords=highLevel.length();  int[] dimension=determineDimensions(sourceCodeWords,errorCorrectionCodeWords);  int cols=dimension[0];  int rows=dimension[1];  int pad=getNumberOfPadCodewords(sourceCodeWords,errorCorrectionCodeWords,cols,rows);  if (sourceCodeWords + errorCorrectionCodeWords + 1 > 929) {    throw new WriterException("Encoded message contains to many code words, message to big (" + msg.length() + " bytes)");  }  int n=sourceCodeWords + pad + 1;  StringBuilder sb=new StringBuilder(n);  sb.append((char)n);  sb.append(highLevel);  for (int i=0; i < pad; i++) {    sb.append((char)900);  }  String dataCodewords=sb.toString();  String ec=PDF417ErrorCorrection.generateErrorCorrection(dataCodewords,errorCorrectionLevel);  String fullCodewords=dataCodewords + ec;  barcodeMatrix=new BarcodeMatrix(rows,cols);  encodeLowLevel(fullCodewords,cols,rows,errorCorrectionLevel,barcodeMatrix);}  }
class C{  public static MoviePageFragment newInstance(){  MoviePageFragment fragment=new MoviePageFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  private static void pad(int width,PrintStream out){  while (width-- > 0) {    out.print(' ');  }}  }
class C{  VisibilityReport(int tasks,int thumbnails){  numVisibleTasks=tasks;  numVisibleThumbnails=thumbnails;}  }
class C{  @Override public int hashCode(){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("hashCode()");  }  return raProperties.hashCode();}  }
class C{  @NonNull public static String readUriResourceWithUserAgentParam(@NonNull String path,@NonNull String userAgent) throws IOException {  String uri=readProjectResource(path);  return uri.concat(String.format("&user-agent=%s",userAgent));}  }
class C{  protected static double smoothingOriginal(double n,double pred,double supportPred) throws Exception {  double smoothed;  smoothed=((n * pred) + (SMOOTHING_CONSTANT * supportPred)) / (n + SMOOTHING_CONSTANT);  return smoothed;}  }
class C{  public static void write(int px1,int py1,int radius,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POINT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POINT);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(px1);  dos.writeInt(py1);  dos.writeInt(radius);  properties.write(dos);}  }
class C{  public boolean removeConnectedEventListener(PeerConnectedEventListener listener){  boolean result=ListenerRegistration.removeFromList(listener,peerConnectedEventListeners);  for (  Peer peer : getConnectedPeers())   peer.removeConnectedEventListener(listener);  for (  Peer peer : getPendingPeers())   peer.removeConnectedEventListener(listener);  return result;}  }
class C{  public static void showToast(Context context,String msg){  Toast.makeText(context,msg,Toast.LENGTH_LONG).show();}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public static void main(String args[]) throws Exception {  echo(">>> Create MBeanServer");  MBeanServer server=MBeanServerFactory.newMBeanServer();  echo(">>> Default Domain: " + server.getDefaultDomain());  echo(">>> Create and register Test MBean");  Test mbean=new Test();  ObjectName name=ObjectName.getInstance(":type=Test");  server.registerMBean(mbean,name);  echo(">>> Set entered flag to false in Test MBean");  mbean.entered=false;  echo(">>> Query Names:");  Set<ObjectName> names=server.queryNames(null,null);  for (  ObjectName on : names) {    echo("\t" + on.toString());  }  echo(">>> Entered flag = " + mbean.entered);  if (mbean.entered) {    echo(">>> Test FAILED!");    throw new IllegalArgumentException("getMBeanInfo got called");  } else {    echo(">>> Test PASSED!");  }}  }
class C{  private int find(final T key,final boolean modify){  if (modify) synchronized (this) {    return findHelper(key,modify);  } else   return findHelper(key,modify);}  }
class C{  public void onReqAllExecutions(ZonedDateTime mktOpenDate) throws BrokerModelException {  try {    if (m_client.isConnected()) {      tradeOrdersExecutions.clear();      commissionDetails.clear();      executionDetails.clear();      Integer reqId=this.getNextRequestId();      m_client.reqExecutions(reqId,TWSBrokerModel.getIBExecutionFilter(m_clientId,mktOpenDate,null,null));    } else {      throw new BrokerModelException(0,3020,"Not conected to TWS historical data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(0,3020,"Error request executions for Date: " + mktOpenDate + " Msg: "+ ex.getMessage());  }}  }
class C{  public void startPreserveAspectRatio() throws ParseException {}  }
class C{  public static boolean assertTrue(final String msg,final boolean check){  if (!check) {    throw new ExamException(msg);  }  return true;}  }
class C{  public ConePortrayal3D(Color color,double scale){  this(appearanceForColor(color),true,false,scale);}  }
class C{  public static String resolveIgniteHome() throws IgniteCheckedException {  String var=IgniteSystemProperties.getString(IGNITE_HOME);  if (var != null)   return var; else   throw new IgniteCheckedException("Failed to resolve Ignite home folder " + "(please set 'IGNITE_HOME' environment or system variable)");}  }
class C{  public X509CRLImpl(byte[] encoding) throws IOException {  this((CertificateList)CertificateList.ASN1.decode(encoding));}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  private StringBuilder append(StringBuilder strb,FieldAccessor fa,String prefix){  if (fa != null) {    if (strb.length() > 0) {      strb.append(",");    }    strb.append(prefix);    if (fa.getContainingType() != null) {      strb.append(fa.getContainingType().getTypeAsString());    } else {      strb.append("?");    }    strb.append(".");    if (fa instanceof TGetter) {      strb.append("get");    } else {      strb.append("set");    }  }  return strb;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  long[] imageNs;  boolean isZeroBackground;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  isZeroBackground=Boolean.parseBoolean(args[1]);  try {    imageNs=new long[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (isZeroBackground) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData && data[col] != 0) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageNs[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private int nextValidSymbolInsertionPos(final Symbol s){  final String template=templateField.getTemplate();  int pos=templateField.textField.getCaretPosition();  if (s.scope == SymbolScope.PIB) {    int pibStart=template.lastIndexOf('<',pos);    if (pibStart < 0)     pibStart=template.indexOf('<',pos);    if (pibStart < 0) {      final int pibInsertPos=nextValidSymbolInsertionPos(Symbol.PIB);      try {        templateField.textField.getDocument().insertString(pibInsertPos,Symbol.PIB.text,null);      } catch (      final BadLocationException ble) {        Env.LOGGER.warning("Could not insert symbol: " + s,ble);      }      return templateField.textField.getCaretPosition() - 1;    }    final int pibEnd=template.indexOf('>',pibStart);    if (pos > pibStart && pos <= pibEnd)     ; else     pos=pibEnd;  }  final int lastSymbolStart=template.lastIndexOf('[',pos);  if (lastSymbolStart >= 0) {    final int lastSymbolEnd=template.indexOf(']',lastSymbolStart);    if (pos > lastSymbolStart && pos <= lastSymbolEnd) {      pos=lastSymbolEnd + 1;    }  }  if (s == Symbol.PIB) {    final int lastPibSymbolStart=template.lastIndexOf('<',pos);    if (lastPibSymbolStart >= 0) {      final int lastPibSymbolEnd=template.indexOf('>',lastPibSymbolStart);      if (pos > lastPibSymbolStart && pos <= lastPibSymbolEnd) {        pos=lastPibSymbolEnd + 1;      }    }  }  return pos;}  }
class C{  public void addCrlEntry(String alias,X509CRL crl) throws CertificateEncodingException, CRLException {  if (crl == null) {    throw new IllegalArgumentException("'crl' cannot be null");  }  String pemCrl=VecsUtils.encodeX509CRLToString(crl);  int error=VecsAdapter.VecsAddEntryW(_storeHandle,VecsEntryType.CERT_ENTRY_TYPE_CRL.getValue(),alias,pemCrl,null,null,false);  BAIL_ON_ERROR(error,"Adding VecsEntryType.CERT_ENTRY_TYPE_CRL entry " + "into store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);}  }
class C{  public static <I,A>Parser<I,A> chainl(Parser<I,A> p,Parser<I,BinaryOperator<A>> op,A x){  return or(chainl1(p,op),retn(x));}  }
class C{  public OracleBatchException(String message,int processedCount){  super(message);  this.processedCount=processedCount;}  }
class C{  public void testGetMetadataFileByInputStream(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  testGetMetadataFileByInputStream(src,m_metafile1,m_metadata1);  testGetMetadataFileByInputStream(src,m_metafile2,m_metadata2);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @Override public boolean hasPermission(U currentUser,String permission){  log.debug("Computing " + permission + " permission for : "+ this+ "\n  Logged in user: "+ currentUser);  decorate(currentUser);  if (permission.equals("edit"))   return editable;  return false;}  }
class C{  public Memory(boolean useGUI){  m_UseGUI=useGUI;}  }
class C{  public Wizard(final Frame owner,final WizardPanelModel panelManager){  wizardDialog=new JDialog(owner);  this.panelManager=panelManager;  initComponents();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void score(INode state){  state.score(eval(state));}  }
class C{  public static int findHeaderEnd(byte[] headerArray,int start,int maxSize){  int fullLength=0;  int lastLength=-1;  int index=start;  int length=0;  while ((fullLength < maxSize) && (index < headerArray.length)) {    int headerID=(headerArray[index] < 0 ? headerArray[index] + 256 : headerArray[index]);    lastLength=fullLength;switch (headerID & (0xC0)) {case 0x00:case 0x40:      index++;    length=(headerArray[index] < 0 ? headerArray[index] + 256 : headerArray[index]);  length=length << 8;index++;length+=(headerArray[index] < 0 ? headerArray[index] + 256 : headerArray[index]);length-=3;index++;index+=length;fullLength+=length + 3;break;case 0x80:index++;index++;fullLength+=2;break;case 0xC0:index+=5;fullLength+=5;break;}}if (lastLength == 0) {if (fullLength < maxSize) {return headerArray.length;} else {return -1;}} else {return lastLength + start;}}  }
class C{  public void changeConnectionStatus(ConnectionStatus connectionStatus){  status=connectionStatus;  notifyListeners((new PropertyChangeEvent(this,ActivityConstants.ConnectionStatusProperty,null,null)));}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 20:    break;case 10:{    addToken(Token.LITERAL_CHAR);  }case 21:break;case 8:{addToken(Token.WHITESPACE);}case 22:break;case 12:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 23:break;case 13:{addToken(Token.RESERVED_WORD);}case 24:break;case 9:{addToken(Token.SEPARATOR);}case 25:break;case 15:{yybegin(LONG_STRING_1);addToken(Token.LITERAL_CHAR);}case 26:break;case 2:{addToken(Token.IDENTIFIER);}case 27:break;case 14:{addToken(Token.FUNCTION);}case 28:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 29:break;case 17:{addToken(Token.DATA_TYPE);}case 30:break;case 4:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 31:break;case 7:{addToken(Token.COMMENT_EOL);}case 32:break;case 11:{addToken(Token.ERROR_NUMBER_FORMAT);}case 33:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 34:break;case 6:{addToken(Token.OPERATOR);}case 35:break;case 19:{yybegin(YYINITIAL);addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 36:break;case 16:{yybegin(LONG_STRING_2);addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 18:{yybegin(YYINITIAL);addToken(Token.LITERAL_CHAR);}case 38:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 266:break;case LONG_STRING_2:{if (firstToken == null) {addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}return firstToken;}case 267:break;case LONG_STRING_1:{if (firstToken == null) {addToken(Token.LITERAL_CHAR);}return firstToken;}case 268:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List query(Envelope queryEnv){  final List result=new ArrayList();  query(queryEnv,result);  return result;}  }
class C{  public static JLabel createLabel_style2(String txt){  return createLabel_root(txt,__Icon9Factory__.getInstance().getTipsBg(),new Insets(15,3,28,3),new Color(139,119,75),null);}  }
class C{  private void disableUnsupportedButtons(){  if (mPlayer == null) {    return;  }  try {    if (mPauseButton != null) {      if (!mPlayer.canPause()) {        mPauseButton.setEnabled(false);      } else {        mPauseButton.setEnabled(true);      }    }    if (mRewButton != null) {      if (!mPlayer.canSeekBackward()) {        mRewButton.setEnabled(false);      } else {        mRewButton.setEnabled(true);      }    }  } catch (  IncompatibleClassChangeError ex) {  }}  }
class C{  public CreateAppGroupDialog(final Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);}  }
class C{  public void reset(){  while (offset > 0) {    buf[--offset]=0;  }  while (curSeqIndex > 0) {    seqOffset[--curSeqIndex]=0;  }}  }
class C{  void dispose(){}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  public NotImplementedException(){}  }
class C{  private void assertDocList(QueryResponse rsp,Object... ids){  SolrDocumentList docs=extractDocList(rsp);  assertEquals("Wrong number of docs in response",ids.length,docs.size());  int i=0;  for (  Object id : ids) {    assertEquals(rsp.toString(),id,docs.get(i).get("id"));    i++;  }}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  checkKeySize(keysize);  this.primeSize=keysize;  this.random=random;}  }
class C{  public int compareTo(HistPair hp){  if (time == hp.time) {    return 0;  }  if (time < hp.time) {    return -1;  }  return +1;}  }
class C{  public Vector2f add(Vector2fc v){  x+=v.x();  y+=v.y();  return this;}  }
class C{  private void ensureOpen() throws IOException {  if (in == null)   throw new IOException("Stream closed");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.zoomFillPaint,stream);  SerialUtilities.writePaint(this.zoomOutlinePaint,stream);}  }
class C{  public void runProtected(final Test test,Protectable p){  try {    p.protect();  } catch (  AssertionFailedError e) {    addFailure(test,e);  }catch (  ThreadDeath e) {    throw e;  }catch (  Throwable e) {    addError(test,e);  }}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination","deprecation"}) public static int calculateMaxBitmapSize(@NonNull Context context){  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=wm.getDefaultDisplay();  Point size=new Point();  int width, height;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    display.getSize(size);    width=size.x;    height=size.y;  } else {    width=display.getWidth();    height=display.getHeight();  }  int maxBitmapSize=(int)Math.sqrt(Math.pow(width,2) + Math.pow(height,2));  Canvas canvas=new Canvas();  final int maxCanvasSize=Math.min(canvas.getMaximumBitmapWidth(),canvas.getMaximumBitmapHeight());  if (maxCanvasSize > 0) {    maxBitmapSize=Math.min(maxBitmapSize,maxCanvasSize);  }  final int maxTextureSize=EglUtils.getMaxTextureSize();  if (maxTextureSize > 0) {    maxBitmapSize=Math.min(maxBitmapSize,maxTextureSize);  }  Log.d(TAG,"maxBitmapSize: " + maxBitmapSize);  return maxBitmapSize;}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public short readShort() throws IOException, EOFException {  this.readFully(this.temp,0,2);  return (short)((temp[0] << 8) | (temp[1] & 0xff));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INTERFACE_DEFINITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.INTERFACE_DEFINITION___DEPEND_1:getDepend_1().clear();getDepend_1().addAll((Collection<? extends Depend_>)newValue);return;case UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:getInterfaceBody_1().clear();getInterfaceBody_1().addAll((Collection<? extends InterfaceBody_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public File negativeExamples(){  return negativeExamples;}  }
class C{  public void delete() throws LicenseException {  try {    Files.delete(licenseFile);  } catch (  NoSuchFileException e) {    throw new LicenseNotFoundException("Codenvy license not found");  }catch (  IOException e) {    throw new LicenseException(e.getMessage(),e);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.491 -0500",hash_original_method="F6227ED49D62C3697D2AC005A8942714",hash_generated_method="11F2C344198340390A40979F8BC30D32") public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public final void pushContextNodeList(DTMIterator nl){  m_contextNodeLists.push(nl);}  }
class C{  public synchronized static void free(FastStringBuffer sb){  sb.setLength(0);  m_stringBufPool.freeInstance(sb);}  }
class C{  private void checkPausedOrCanceled(State state) throws StopRequest {  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {    int status=mService.getStatus();switch (status) {case DownloaderService.STATUS_PAUSED_BY_APP:      throw new StopRequest(mService.getStatus(),"download paused");  }}}  }
class C{  private int readLine() throws IOException {  if (pos == -1)   return 0;  final InputStream in=this.in;  int b;  int lineSize, type, offset;  do {    while (true) {      b=in.read();      pos++;      if (b != '\n' && b != '\r') {        break;      }    }    checkComma(b);    lineSize=readByte(in);    pos+=2;    offset=readAddress(in);    pos+=4;    type=readByte(in);    pos+=2;switch (type) {case 0x00:      if (lastAddress + offset < MBRSize) {        type=-1;        pos+=skip(in,lineSize * 2 + 2);      }    break;case 0x01:  pos=-1;return 0;case 0x02:{final int address=readAddress(in) << 4;pos+=4;if (bytesRead > 0 && (address >> 16) != (lastAddress >> 16) + 1) return 0;lastAddress=address;pos+=skip(in,2);break;}case 0x04:{final int address=readAddress(in);pos+=4;if (bytesRead > 0 && address != (lastAddress >> 16) + 1) return 0;lastAddress=address << 16;pos+=skip(in,2);break;}default :final long toBeSkipped=lineSize * 2 + 2;pos+=skip(in,toBeSkipped);break;}} while (type != 0);for (int i=0; i < localBuf.length && i < lineSize; ++i) {b=readByte(in);pos+=2;localBuf[i]=(byte)b;}pos+=skip(in,2);localPos=0;return lineSize;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tanh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isServiceRunning(Context context,String className){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> serviceInfos=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  ActivityManager.RunningServiceInfo si : serviceInfos) {    if (className.equals(si.service.getClassName())) {      isRunning=true;    }  }  return isRunning;}  }
class C{  public void unregisterRegion(ServerRegionProxy srp,boolean keepalive){  removeAllInterests(srp,InterestType.KEY,false,keepalive,false);  removeAllInterests(srp,InterestType.FILTER_CLASS,false,keepalive,false);  removeAllInterests(srp,InterestType.OQL_QUERY,false,keepalive,false);  removeAllInterests(srp,InterestType.REGULAR_EXPRESSION,false,keepalive,false);  removeAllInterests(srp,InterestType.KEY,false,keepalive,true);  removeAllInterests(srp,InterestType.FILTER_CLASS,false,keepalive,true);  removeAllInterests(srp,InterestType.OQL_QUERY,false,keepalive,true);  removeAllInterests(srp,InterestType.REGULAR_EXPRESSION,false,keepalive,true);  if (srp.getPool().isDurableClient()) {    removeAllInterests(srp,InterestType.KEY,true,keepalive,true);    removeAllInterests(srp,InterestType.FILTER_CLASS,true,keepalive,true);    removeAllInterests(srp,InterestType.OQL_QUERY,true,keepalive,true);    removeAllInterests(srp,InterestType.REGULAR_EXPRESSION,true,keepalive,true);    removeAllInterests(srp,InterestType.KEY,true,keepalive,false);    removeAllInterests(srp,InterestType.FILTER_CLASS,true,keepalive,false);    removeAllInterests(srp,InterestType.OQL_QUERY,true,keepalive,false);    removeAllInterests(srp,InterestType.REGULAR_EXPRESSION,true,keepalive,false);  }}  }
class C{  public void startParse(InputSource source) throws SAXException {  if (fNoMoreEvents)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INCRSAXSRCFILTER_NOT_RESTARTABLE,null));  if (fXMLReader == null)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_XMLRDR_NOT_BEFORE_STARTPARSE,null));  fXMLReaderInputSource=source;  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  public boolean isValidIndex(){  return pos < str.length();}  }
class C{  public void addTreeSelectionListener(TreeSelectionListener tsl){  listenerList.add(TreeSelectionListener.class,tsl);  if (listenerList.getListenerCount(TreeSelectionListener.class) != 0 && selectionRedirector == null) {    selectionRedirector=new TreeSelectionRedirector();    selectionModel.addTreeSelectionListener(selectionRedirector);  }}  }
class C{  public Builder addQueryParameter(String name,String value){  if (name == null)   throw new IllegalArgumentException("name == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(name,QUERY_COMPONENT_ENCODE_SET,false,false,true,true));  encodedQueryNamesAndValues.add(value != null ? canonicalize(value,QUERY_COMPONENT_ENCODE_SET,false,false,true,true) : null);  return this;}  }
class C{  public Resource GetResource(){  return mResource;}  }
class C{  public NoticeReference(DisplayText organization,ASN1EncodableVector noticeNumbers){  this.organization=organization;  this.noticeNumbers=new DERSequence(noticeNumbers);}  }
class C{  public static boolean isInNative(RVMThread t){  t.monitor().lockNoHandshake();  boolean inNative=t.isInNativeAccordingToJMX();  t.monitor().unlock();  return inNative;}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  if (getName().indexOf(" ") == -1 && getName().indexOf("\"") == -1) {    credentialClass=getName();    credOwners=EMPTY_PRINCIPALS;  } else {    init(getName());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasNext(){  return hasNextTlsMode() || hasNextInetSocketAddress() || hasNextProxy()|| hasNextPostponed();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  if (getC_Charge_ID() != 0) {    setIsAllocated(true);  } else {    allocateIt();    testAllocation();  }  if (getC_Project_ID() != 0) {  }  if (getC_BPartner_ID() != 0 && getC_Invoice_ID() == 0 && getC_Charge_ID() == 0 && MPaymentAllocate.get(this).length == 0) {    MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());    BigDecimal payAmt=MConversionRate.convertBase(getCtx(),getPayAmt(),getC_Currency_ID(),getDateAcct(),getC_ConversionType_ID(),getAD_Client_ID(),getAD_Org_ID());    if (payAmt == null) {      m_processMsg="Could not convert C_Currency_ID=" + getC_Currency_ID() + " to base C_Currency_ID="+ MClient.get(Env.getCtx()).getC_Currency_ID();      return DocAction.STATUS_Invalid;    }    BigDecimal newBalance=bp.getTotalOpenBalance(false);    if (newBalance == null)     newBalance=Env.ZERO;    if (isReceipt())     newBalance=newBalance.subtract(payAmt); else     newBalance=newBalance.add(payAmt);    bp.setTotalOpenBalance(newBalance);    bp.setSOCreditStatus();    bp.saveEx();  }  MPayment counter=createCounterDoc();  if (counter != null)   m_processMsg+=" @CounterDoc@: @C_Payment_ID@=" + counter.getDocumentNo();  if (isCashTrx() && !MSysConfig.getBooleanValue("CASH_AS_PAYMENT",true,getAD_Client_ID())) {    if (getC_CashBook_ID() <= 0) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Mandatory@: @C_CashBook_ID@"));      m_processMsg="@NoCashBook@";      return DocAction.STATUS_Invalid;    }    MCash cash=MCash.get(getCtx(),getC_CashBook_ID(),getDateAcct(),get_TrxName());    if (cash == null || cash.get_ID() == 0) {      m_processMsg="@NoCashBook@";      return DocAction.STATUS_Invalid;    }    MCashLine cl=new MCashLine(cash);    cl.setCashType(X_C_CashLine.CASHTYPE_GeneralReceipts);    cl.setDescription("Generated From Payment #" + getDocumentNo());    cl.setC_Currency_ID(this.getC_Currency_ID());    cl.setC_Payment_ID(getC_Payment_ID());    StringBuffer info=new StringBuffer();    info.append("Cash journal ( ").append(cash.getDocumentNo()).append(" )");    m_processMsg=info.toString();    BigDecimal amt=this.getPayAmt();    cl.setAmount(amt);    cl.setDiscountAmt(Env.ZERO);    cl.setWriteOffAmt(Env.ZERO);    cl.setIsGenerated(true);    if (!cl.save(get_TrxName())) {      m_processMsg="Could not save Cash Journal Line";      return DocAction.STATUS_Invalid;    }  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  protected static Filter buildFilterPrimitives(Element filterElement,Rectangle2D filterRegion,Element filteredElement,GraphicsNode filteredNode,Filter in,Map filterNodeMap,BridgeContext ctx){  List refs=new LinkedList();  for (; ; ) {    Filter newIn=buildLocalFilterPrimitives(filterElement,filterRegion,filteredElement,filteredNode,in,filterNodeMap,ctx);    if (newIn != in) {      return newIn;    }    String uri=XLinkSupport.getXLinkHref(filterElement);    if (uri.length() == 0) {      return in;    }    SVGOMDocument doc=(SVGOMDocument)filterElement.getOwnerDocument();    ParsedURL url=new ParsedURL(doc.getURLObject(),uri);    if (refs.contains(url)) {      throw new BridgeException(ctx,filterElement,ERR_XLINK_HREF_CIRCULAR_DEPENDENCIES,new Object[]{uri});    }    refs.add(url);    filterElement=ctx.getReferencedElement(filterElement,uri);  }}  }
class C{  protected Object execute(){  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (projectId == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No projectID has been set");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectId).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToChangePrivacy=project.getInnerReference();  if (visibilityString == null) {    System.out.println(format("Privacy for project %s is %s",project.name(),projectToChangePrivacy.visibility()));    return null;  }  Visibility visibility;  if ("public".equals(visibilityString)) {    visibility=Visibility.PUBLIC;  } else   if ("private".equals(visibilityString)) {    visibility=Visibility.PRIVATE;  } else {    System.out.println(format("Privacy should be either 'private' or 'public'. Found %s",visibilityString));    return null;  }  project.getCodenvy().project().switchVisibility(projectToChangePrivacy,visibility).execute();  System.out.println(format("Privacy for project %s has been changed to %s",project.name(),visibility));  return null;}  }
class C{  public void clear(){  mSize=0;}  }
class C{  protected Object createWithSubclassConstructorArgs(Class<?> newObjClass,Class<?>[] argClasses,Object[] constructorArgs) throws NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {  boolean DEBUG=logger.isLoggable(Level.FINER);  int numArgClasses=0;  if (argClasses != null) {    numArgClasses=argClasses.length;  }  Constructor<?>[] constructors=newObjClass.getConstructors();  int numConstructors=constructors.length;  if (DEBUG) {    logger.finer(" - searching " + numConstructors + " possible constructor"+ (numConstructors == 1 ? "" : "s"));  }  for (int i=0; i < numConstructors; i++) {    Constructor<?> constructor=constructors[i];    Class<?>[] arguments=constructor.getParameterTypes();    int numArgs=arguments.length;    if (numArgs != numArgClasses) {      if (DEBUG) {        logger.finer(" - constructor " + i + " with "+ numArgs+ " arguments not a match");      }      continue;    }    if (numArgs == 0 || argClasses == null) {      if (DEBUG) {        logger.finer(" - constructor " + i + " with no arguments is a match");      }      return constructor;    }    boolean good=false;    for (int j=0; j < numArgs; j++) {      if (arguments[j] == argClasses[j]) {        if (DEBUG) {          logger.finer(" - direct arg class match, arg " + j);        }        good=true;      } else       if (arguments[j].isAssignableFrom(argClasses[j])) {        argClasses[j]=argClasses[j].getSuperclass();        if (DEBUG) {          logger.finer(" - superclass arg class match, arg " + j + " reassigning to "+ argClasses[j].toString());        }        good=true;      } else {        if (DEBUG) {          logger.finer(" - arg class mismatch on arg " + j + ", bailing ("+ arguments[j].getName()+ " vs. "+ argClasses[j].getName()+ ")");        }        good=false;        break;      }    }    if (good) {      if (DEBUG) {        logger.finer(" - creating object");      }      Object obj=constructor.newInstance(constructorArgs);      if (DEBUG) {        logger.finer(" - created object");      }      return obj;    }  }  return null;}  }
class C{  public static FromClause create(){  return new FromClause();}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public ItemsetDbAdapter open() throws SQLException {  mDbHelper=new DatabaseHelper();  mDb=mDbHelper.getWritableDatabase();  return this;}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,boolean multiInstance) throws Exception {  return makeTestDataset(seed,numInstances,numNominal,numNumeric,numString,numDate,numRelational,numClasses,classType,TestInstances.CLASS_IS_LAST,multiInstance);}  }
class C{  public MatrixSeriesCollection(MatrixSeries series){  this.seriesList=new java.util.ArrayList();  if (series != null) {    this.seriesList.add(series);    series.addChangeListener(this);  }}  }
class C{  public void testMultiple() throws Exception {  Collection<File> res=parse(merge(single(FILE_1_1),single(FILE_1_2),single(FILE_2_1),single(FILE_2_2),single(MISSING_FILE)));  assert res.size() == 4;  assert res.contains(FILE_1_1);  assert res.contains(FILE_1_2);  assert res.contains(FILE_2_1);  assert res.contains(FILE_2_2);}  }
class C{  public static AccountType newInstance(){  final AccountType returnInstance=new AccountType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public int indexOf(T item){  return mItems.indexOf(item);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_left.fixupVariables(vars,globalsSize);  m_right.fixupVariables(vars,globalsSize);}  }
class C{  public static int compareTo(Object left,Object right){  return compareToWithEqualityCheck(left,right,false);}  }
class C{  public static String keep(String str,String[] set){  if (str == null) {    return null;  }  if (str.length() == 0 || ArrayUtils.isEmpty(set)) {    return "";  }  return modify(str,set,true);}  }
class C{  protected PropertyChangeListener createActionChangeListener(JMenuItem b){  return b.createActionPropertyChangeListener0(b.getAction());}  }
class C{  public Versioned<T> cloneVersioned(){  return new Versioned<T>(this.getValue(),this.version.clone());}  }
class C{  public void clear(){  map.clear();}  }
class C{  protected void startDelete(String bucketName,String key) throws AmazonClientException, AmazonServiceException {  DeleteObjectRequest deleteObjectRequest=new DeleteObjectRequest(bucketName,key);  amazonS3.deleteObject(deleteObjectRequest);}  }
class C{  public boolean visit(PrimitiveType node){  return true;}  }
class C{  public void testScaleDefault(){  String a="1231212478987482988429808779810457634781384756794987";  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public BarData(LocalDateTime dateTime,double open,double high,double low,double close,long volume,long openInterest){  this(dateTime,open,high,low,close,volume);  this.openInterest=openInterest;}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Sentence_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  private DelaunayTriangle update(DelaunayVertex site,Set<DelaunayTriangle> cavity){  Set<Set<DelaunayVertex>> boundary=new HashSet<Set<DelaunayVertex>>();  Set<DelaunayTriangle> theTriangles=new HashSet<DelaunayTriangle>();  for (  DelaunayTriangle triangle : cavity) {    theTriangles.addAll(neighbors(triangle));    for (    DelaunayVertex vertex : triangle) {      Set<DelaunayVertex> facet=triangle.facetOpposite(vertex);      if (boundary.contains(facet)) {        boundary.remove(facet);      } else {        boundary.add(facet);      }    }  }  theTriangles.removeAll(cavity);  for (  DelaunayTriangle triangle : cavity) {    triGraph.remove(triangle);  }  Set<DelaunayTriangle> newTriangles=new HashSet<DelaunayTriangle>();  for (  Set<DelaunayVertex> vertices : boundary) {    vertices.add(site);    DelaunayTriangle tri=new DelaunayTriangle(vertices);    triGraph.add(tri);    newTriangles.add(tri);  }  theTriangles.addAll(newTriangles);  for (  DelaunayTriangle triangle : newTriangles) {    for (    DelaunayTriangle other : theTriangles) {      if (triangle.isNeighbor(other)) {        triGraph.connect(triangle,other);      }    }  }  return newTriangles.iterator().next();}  }
class C{  public static List<Synapse> connectSparse(List<Neuron> sourceNeurons,List<Neuron> targetNeurons,double sparsity,boolean selfConnectionAllowed,boolean equalizeEfferents,boolean looseSynapses){  boolean recurrent=ConnectionUtilities.testRecurrence(sourceNeurons,targetNeurons);  Neuron source;  Neuron target;  Synapse synapse;  ArrayList<Synapse> syns=new ArrayList<Synapse>();  Random rand=new Random(System.nanoTime());  if (equalizeEfferents) {    ArrayList<Integer> targetList=new ArrayList<Integer>();    ArrayList<Integer> tListCopy;    for (int i=0; i < targetNeurons.size(); i++) {      targetList.add(i);    }    int numSyns;    if (!selfConnectionAllowed && sourceNeurons == targetNeurons) {      numSyns=(int)(sparsity * sourceNeurons.size() * (targetNeurons.size() - 1));    } else {      numSyns=(int)(sparsity * sourceNeurons.size() * targetNeurons.size());    }    int synsPerSource=numSyns / sourceNeurons.size();    int targStart=0;    int targEnd=synsPerSource;    if (synsPerSource > numSyns / 2) {      synsPerSource=numSyns - synsPerSource;      targStart=synsPerSource;      targEnd=targetList.size();    }    for (int i=0; i < sourceNeurons.size(); i++) {      source=sourceNeurons.get(i);      if (!selfConnectionAllowed && recurrent) {        tListCopy=new ArrayList<Integer>();        for (int k=0; k < targetList.size(); k++) {          if (k == i) {            continue;          }          tListCopy.add(targetList.get(k));        }        randShuffleK(tListCopy,synsPerSource,rand);      } else {        randShuffleK(targetList,synsPerSource,rand);        tListCopy=targetList;      }      for (int j=targStart; j < targEnd; j++) {        target=targetNeurons.get(tListCopy.get(j));        synapse=new Synapse(source,target);        if (looseSynapses) {          source.getNetwork().addSynapse(synapse);        }        syns.add(synapse);      }    }  } else {    for (int i=0; i < sourceNeurons.size(); i++) {      for (int j=0; j < targetNeurons.size(); j++) {        if (!selfConnectionAllowed && recurrent && i == j) {          continue;        } else {          if (Math.random() < sparsity) {            source=sourceNeurons.get(i);            target=targetNeurons.get(j);            synapse=new Synapse(source,target);            if (looseSynapses) {              source.getNetwork().addSynapse(synapse);            }            syns.add(synapse);          }        }      }    }  }  return syns;}  }
class C{  public int maxProgresstime(){  return 0;}  }
class C{  private synchronized static void log(int logType,String tag,String message,int methodCount){  if (settings.logLevel == LogLevel.NONE) {    return;  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  void updateTarget(){  if ((cen != Entity.NONE) && (target != null)) {    if (target.getTargetType() != Targetable.TYPE_INARC_POD) {      final ToHitData leftArm=PunchAttackAction.toHit(clientgui.getClient().getGame(),cen,target,PunchAttackAction.LEFT);      final ToHitData rightArm=PunchAttackAction.toHit(clientgui.getClient().getGame(),cen,target,PunchAttackAction.RIGHT);      boolean canPunch=(leftArm.getValue() != TargetRoll.IMPOSSIBLE) || (rightArm.getValue() != TargetRoll.IMPOSSIBLE);      setPunchEnabled(canPunch);      ToHitData leftLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.LEFT);      ToHitData rightLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.RIGHT);      boolean canKick=(leftLeg.getValue() != TargetRoll.IMPOSSIBLE) || (rightLeg.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData rightRearLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.RIGHTMULE);      ToHitData leftRearLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.LEFTMULE);      canKick|=(leftRearLeg.getValue() != TargetRoll.IMPOSSIBLE) || (rightRearLeg.getValue() != TargetRoll.IMPOSSIBLE);      setKickEnabled(canKick);      ToHitData push=PushAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setPushEnabled(push.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData trip=TripAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setTripEnabled(trip.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData grap=GrappleAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      ToHitData bgrap=BreakGrappleAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setGrappleEnabled((grap.getValue() != TargetRoll.IMPOSSIBLE) || (bgrap.getValue() != TargetRoll.IMPOSSIBLE));      ToHitData jjl=JumpJetAttackAction.toHit(clientgui.getClient().getGame(),cen,target,JumpJetAttackAction.LEFT);      ToHitData jjr=JumpJetAttackAction.toHit(clientgui.getClient().getGame(),cen,target,JumpJetAttackAction.RIGHT);      ToHitData jjb=JumpJetAttackAction.toHit(clientgui.getClient().getGame(),cen,target,JumpJetAttackAction.BOTH);      setJumpJetEnabled(!((jjl.getValue() == TargetRoll.IMPOSSIBLE) && (jjr.getValue() == TargetRoll.IMPOSSIBLE) && (jjb.getValue() == TargetRoll.IMPOSSIBLE)));      boolean canClub=false;      boolean canAim=false;      for (      Mounted club : ce().getClubs()) {        if (club != null) {          ToHitData clubToHit=ClubAttackAction.toHit(clientgui.getClient().getGame(),cen,target,club,ash.getAimTable());          canClub|=(clubToHit.getValue() != TargetRoll.IMPOSSIBLE);          if (club.getType().hasSubType(MiscType.S_SWORD) || club.getType().hasSubType(MiscType.S_HATCHET) || club.getType().hasSubType(MiscType.S_VIBRO_SMALL)|| club.getType().hasSubType(MiscType.S_VIBRO_MEDIUM)|| club.getType().hasSubType(MiscType.S_VIBRO_LARGE)|| club.getType().hasSubType(MiscType.S_MACE)|| club.getType().hasSubType(MiscType.S_MACE_THB)|| club.getType().hasSubType(MiscType.S_LANCE)|| club.getType().hasSubType(MiscType.S_CHAIN_WHIP)|| club.getType().hasSubType(MiscType.S_RETRACTABLE_BLADE)|| club.getType().hasSubType(MiscType.S_SHIELD_LARGE)|| club.getType().hasSubType(MiscType.S_SHIELD_MEDIUM)|| club.getType().hasSubType(MiscType.S_SHIELD_SMALL)) {            canAim=true;          }        }      }      setClubEnabled(canClub);      ash.setCanAim(canAim);      ToHitData thrash=new ThrashAttackAction(cen,target).toHit(clientgui.getClient().getGame());      setThrashEnabled(thrash.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData proto=ProtomechPhysicalAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setProtoEnabled(proto.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData explo=LayExplosivesAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setExplosivesEnabled(explo.getValue() != TargetRoll.IMPOSSIBLE);      ToHitData vibro=BAVibroClawAttackAction.toHit(clientgui.getClient().getGame(),cen,target);      setVibroEnabled(vibro.getValue() != TargetRoll.IMPOSSIBLE);    }    ToHitData brushRight=BrushOffAttackAction.toHit(clientgui.getClient().getGame(),cen,target,BrushOffAttackAction.RIGHT);    ToHitData brushLeft=BrushOffAttackAction.toHit(clientgui.getClient().getGame(),cen,target,BrushOffAttackAction.LEFT);    boolean canBrush=((brushRight.getValue() != TargetRoll.IMPOSSIBLE) || (brushLeft.getValue() != TargetRoll.IMPOSSIBLE));    setBrushOffEnabled(canBrush);  } else {    setPunchEnabled(false);    setPushEnabled(false);    setTripEnabled(false);    setGrappleEnabled(false);    setJumpJetEnabled(false);    setKickEnabled(false);    setClubEnabled(false);    setBrushOffEnabled(false);    setThrashEnabled(false);    setProtoEnabled(false);    setVibroEnabled(false);  }  setSearchlightEnabled((ce() != null) && (target != null) && ce().isUsingSpotlight());}  }
class C{  public static void init(String prefix){  try {    constraints=(PlanConstraints)Class.forName(prefix + "Constraints").newInstance();  } catch (  Exception ex) {    throw new RuntimeException("Could not create PlanConstraints",ex);  }  try {    plan=(Plan)Class.forName(prefix).newInstance();  } catch (  Exception ex) {    throw new RuntimeException("Could not create Plan",ex);  }}  }
class C{  @Override public void insertString(int origOffset,String string,AttributeSet attr) throws BadLocationException {  log.finest("Offset=" + origOffset + " String="+ string+ " Length="+ string.length());  if (origOffset < 0 || string == null)   throw new IllegalArgumentException("Invalid argument");  int offset=origOffset;  int length=string.length();  if (length != 1) {    super.insertString(offset,string,attr);    return;  }  String content=getText();  if (content.indexOf(m_groupingSeparator) != -1) {    StringBuffer result=new StringBuffer();    for (int i=0; i < content.length(); i++) {      if (content.charAt(i) == m_groupingSeparator) {        if (i < offset)         offset--;      } else       result.append(content.charAt(i));    }    super.remove(0,content.length());    super.insertString(0,result.toString(),attr);    m_tc.setCaretPosition(offset);    content=result.toString();  }  char c=string.charAt(0);  if (Character.isDigit(c)) {    super.insertString(offset,string,attr);    return;  } else   if (c == m_decimalSeparator || c == m_groupingSeparator || c == '.' || c == ',') {    if (m_displayType == DisplayType.Integer)     return;    int pos=content.indexOf(m_decimalSeparator);    String decimal=String.valueOf(m_decimalSeparator);    super.insertString(offset,decimal,attr);    if (pos != 0) {      content=getText();      StringBuffer result=new StringBuffer();      int correction=0;      for (int i=0; i < content.length(); i++) {        if (content.charAt(i) == m_decimalSeparator) {          if (i == offset)           result.append(content.charAt(i)); else           if (i < offset)           correction++;        } else         result.append(content.charAt(i));      }      super.remove(0,content.length());      super.insertString(0,result.toString(),attr);      m_tc.setCaretPosition(offset - correction + 1);    }  } else   if (VNumber.AUTO_POPUP || "=+-/*%".indexOf(c) > -1) {    if (c == m_minusSign && offset == 0) {      if (m_displayType == DisplayType.Integer)       return; else       super.insertString(0,"-",attr);    } else {      log.fine("Input=" + c + " ("+ (int)c+ ")");      if (c == m_percentSign && offset > 0) {        if (m_displayType == DisplayType.Integer)         return; else {          String value=getText();          BigDecimal percentValue=new BigDecimal(0.0);          try {            if (value != null && value.length() > 0) {              Number number=m_format.parse(value);              percentValue=new BigDecimal(number.toString());              percentValue=percentValue.divide(new BigDecimal(100.0),m_format.getMaximumFractionDigits(),BigDecimal.ROUND_HALF_UP);              m_tc.setText(m_format.format(percentValue));            }          } catch (          ParseException pe) {            log.info("InvalidEntry - " + pe.getMessage());          }        }      } else {        String result=VNumber.startCalculator(m_tc,getText(),m_format,m_displayType,m_title,c);        super.remove(0,content.length());        m_tc.setText(result);      }    }  } else   ADialog.beep();}  }
class C{  protected void sendMail(List<UserData> userData,Properties unProperties) throws MailOperationException {  if (userData == null || userData.size() < 1) {    return;  }  String subject=getLocalizedProperty(HandlerUtils.MAIL_SUBJECT,unProperties);  HandlerUtils.checkNotNull(subject,HandlerUtils.MAIL_SUBJECT);  String preparedMessageText=prepareMessageText(unProperties);  Session session=getEmailSession(unProperties);  for (  UserData recipient : userData) {    if (recipient.email == null || recipient.email.length() == 0 || recipient.olduserid == null) {      System.out.println("Insufficient user data data to send the email to user \"" + recipient.userid + "\".");      continue;    }    MimeMessage msg=new MimeMessage(session);    final String encoding=MAIL_CHARSET;    try {      Address from=new InternetAddress(session.getProperty("mail.from"));      msg.setFrom(from);      msg.setReplyTo(new Address[]{from});      msg.setSubject(subject,encoding);      String text=assembleMessageText(preparedMessageText,recipient);      msg.setText(text,encoding);    } catch (    AddressException e) {      MailOperationException mof=new MailOperationException("Invalid mail address in configuration setting",e);      throw mof;    }catch (    MessagingException e) {      MailOperationException mof=new MailOperationException("Mail could not be initialized.",e);      throw mof;    }    try {      Address to=new InternetAddress(recipient.email);      msg.addRecipient(Message.RecipientType.TO,to);    } catch (    AddressException e) {      System.out.println("Invalid recipient address for " + recipient.userid + "; email: "+ recipient.email);      continue;    }catch (    MessagingException e) {      MailOperationException mof=new MailOperationException("Recipient address could not be set.",e);      throw mof;    }    try {      Transport.send(msg);      System.out.println("Notification was send to user: " + recipient.userid + "; email: "+ recipient.email);    } catch (    MessagingException e) {      MailOperationException mof=new MailOperationException("Mail could not be sent.",e);      throw mof;    }  }}  }
class C{  public static void start(Flow flow){  flow.start();}  }
class C{  public static Boolean toBoolean(boolean b){  return b ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public HttpServletResponse doPost(HttpServlet servlet) throws Exception {  return doMethod("POST",servlet);}  }
class C{  void revisitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink,int itID){  pendingNodes.remove(n);  data.visit(outLink,cost,time,itID);  pendingNodes.add(n,getPriority(data));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_TYPE_DECLARATION___IS_EXTERNAL:    return isExternal();case N4JSPackage.N4_TYPE_DECLARATION___IS_EXPORTED:  return isExported();case N4JSPackage.N4_TYPE_DECLARATION___IS_EXPORTED_AS_DEFAULT:return isExportedAsDefault();case N4JSPackage.N4_TYPE_DECLARATION___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.N4_TYPE_DECLARATION___IS_TOPLEVEL:return isToplevel();case N4JSPackage.N4_TYPE_DECLARATION___GET_ANNOTATIONS:return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public AddItemToCollectionAction(final String quest,final int index,final String item,int quantity){  this.questname=checkNotNull(quest);  this.index=index;  this.item=checkNotNull(item);  this.quantity=quantity;}  }
class C{  @Override public void generateXml(XmlWriter xw,OutputProperties outProps,IServiceDocument source) throws IOException {  if (source instanceof ServiceDocument) {    ((ServiceDocument)source).generate(xw,outProps.getExtensionProfile());  } else   if (source != null) {    throw new IllegalStateException("Unexpected source type: " + source.getClass());  }}  }
class C{  private void showOrHidePopupAndNotification(final String message){  if (null != managementUIState.getAssignedList() && !managementUIState.getAssignedList().isEmpty()) {    eventBus.publish(this,ManagementUIEvent.UPDATE_COUNT);  }  if (null != message) {    notification.displayValidationError(message);  }}  }
class C{  public void closeCDATA() throws SAXException {  if (m_lexHandler != null && m_cdataTagOpen) {    m_lexHandler.endCDATA();  }  m_cdataTagOpen=false;}  }
class C{  public void addPermission(PermissionType permission){  addedPermissions.add(permission);}  }
class C{  public AvatarBitmapTransformation(final Context context,final AvatarSize avatarSize){  this(context);  mAvatarSize=(avatarSize == null) ? AvatarSize.NORMAL : avatarSize;}  }
class C{  public static FileDescriptor fromUrlParam(String urlParam){  String[] parts=urlParam.split(",");  if (parts.length != 3 && parts.length != 4) {    throw new IllegalArgumentException("Invalid FileDescriptor format");  }  Metadata metadata=AppBeans.get(Metadata.NAME);  FileDescriptor fd=metadata.create(FileDescriptor.class);  fd.setId(UuidProvider.fromString(parts[0]));  fd.setExtension(parts[1]);  fd.setCreateDate(new Date(Long.parseLong(parts[2])));  if (parts.length == 4) {    fd.setSize(Long.parseLong(parts[3]));  }  return fd;}  }
class C{  public Wiser(){  this.server=new SMTPServer(new SimpleMessageListenerAdapter(this));}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  public ComboBoxArrowButtonEditableState(){  super("Editable");}  }
class C{  public void stop(){}  }
class C{  private Product initProduct(TechnicalProduct techProduct,Organization supplier,String productId,String qName,Attributes atts){  String type=getMandatoryValue(atts,ATTRIBUTE_ISCHARGEABLE);  String period=atts.getValue(ATTRIBUTE_PERIOD);  String pricePerPeriod=atts.getValue(ATTRIBUTE_PRICE_PER_PERIOD);  String userAssignmentBasePeriod=atts.getValue(ATTRIBUTE_USER_ASSIGNMENT_BASE_PERIOD);  String pricePerUser=atts.getValue(ATTRIBUTE_PRICE_PER_USER);  String oneTimeFee=atts.getValue(ATTRIBUTE_ONE_TIME_FEE);  if (isBlank(type) || techProduct == null || isBlank(productId)) {    return null;  }  if (isBlank(period) && isBlank(pricePerPeriod)) {    period=PricingPeriod.MONTH.toString();    pricePerPeriod="0";  }  if (isBlank(userAssignmentBasePeriod) && isBlank(pricePerUser)) {    userAssignmentBasePeriod=PricingPeriod.MONTH.toString();    pricePerUser="0";  }  if (isBlank(oneTimeFee)) {    oneTimeFee="0";  }  Product product=new Product();  product.setVendor(supplier);  product.setProductId(productId);  product=(Product)dm.find(product);  PriceModel priceModel=null;  if (product != null) {    priceModel=product.getPriceModel();  }  PriceModel newPriceModel=new PriceModel();  if (priceModel != null) {    dm.remove(priceModel);  }  priceModel=newPriceModel;  if (Boolean.parseBoolean(type)) {    priceModel.setType(PriceModelType.PRO_RATA);  }  if (priceModel.isChargeable()) {    PriceModel priceModelChargeable=priceModel;    priceModelChargeable.setType(PriceModelType.PRO_RATA);    priceModelChargeable.setPeriod(PricingPeriod.valueOf(period));    priceModelChargeable.setPricePerPeriod(new BigDecimal(pricePerPeriod));    priceModelChargeable.setPricePerUserAssignment(new BigDecimal(pricePerUser));    priceModelChargeable.setOneTimeFee(new BigDecimal(oneTimeFee));    SupportedCurrency sc=new SupportedCurrency();    sc.setCurrency(Currency.getInstance("EUR"));    sc=(SupportedCurrency)dm.find(sc);    if (sc == null) {      addError(qName,"currency not supported");    } else {      priceModelChargeable.setCurrency(sc);    }  }  if (product == null) {    product=createProduct(techProduct,supplier,productId,priceModel);  } else {    product.setTechnicalProduct(techProduct);    product.setPriceModel(priceModel);    ParameterSet parameterSet=product.getParameterSet();    if (parameterSet != null) {      List<Parameter> list=parameterSet.getParameters();      if (list != null) {        for (        Parameter parameter : list) {          dm.remove(parameter);        }      }    }  }  return product;}  }
class C{  public static void scale(float[] a,double b){  for (int i=0; i < a.length; i++) {    a[i]=(float)(a[i] * b);  }}  }
class C{  public static void importOperands(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  final String query="INSERT INTO " + CTableNames.OPERANDS_TABLE + " SELECT "+ moduleId+ ", address, expression_tree_id, position "+ " FROM ex_"+ rawModuleId+ "_operands";  connection.executeUpdate(query,true);}  }
class C{  public static byte[] makeIvfHeader(int frameCount,int width,int height,int scale,int rate){  byte[] ivfHeader=new byte[32];  ivfHeader[0]='D';  ivfHeader[1]='K';  ivfHeader[2]='I';  ivfHeader[3]='F';  lay16Bits(ivfHeader,4,0);  lay16Bits(ivfHeader,6,32);  ivfHeader[8]='V';  ivfHeader[9]='P';  ivfHeader[10]='8';  ivfHeader[11]='0';  lay16Bits(ivfHeader,12,width);  lay16Bits(ivfHeader,14,height);  lay32Bits(ivfHeader,16,rate);  lay32Bits(ivfHeader,20,scale);  lay32Bits(ivfHeader,24,frameCount);  lay32Bits(ivfHeader,28,0);  return ivfHeader;}  }
class C{  public Geo(Double latitude,Double longitude){  this.latitude=latitude;  this.longitude=longitude;}  }
class C{  public ObjectReader withValueToUpdate(Object value){  if (value == _valueToUpdate)   return this;  if (value == null) {    throw new IllegalArgumentException("cat not update null value");  }  JavaType t=(_valueType == null) ? _config.constructType(value.getClass()) : _valueType;  return new ObjectReader(this,_config,t,value,_schema,_injectableValues);}  }
class C{  public void seekEnd(long offset) throws IOException {  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  public static <A>MonoTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  private void testResample(double coord){  final int bin=getBinNr(coord);  final int sizereq, off;  if (bin < 0) {    sizereq=size - bin;    off=-bin;  } else   if (bin >= data.length) {    sizereq=bin + 1;    off=0;  } else {    return;  }  if (sizereq < data.length) {    return;  }  final int levels=BitsUtil.magnitude(sizereq / this.destsize) - 1;  assert (levels > 0) : "No resampling required?!? sizereq=" + sizereq + " destsize="+ destsize+ " array="+ data.length;  final int step=1 << levels;  final int fixpoint=off / (step - 1);{    int oup=(fixpoint >= 0) ? fixpoint : 0;    int inp=(oup << levels) - off;    assert (-step < inp && inp <= oup && oup < inp + step) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp < size; inp+=step, oup++) {      assert (oup < inp + step && oup < data.length);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup < data.length; oup++) {      data[oup]=0;    }  }  if (off >= step) {    int oup=(fixpoint - 1 < size) ? fixpoint - 1 : size - 1;    int inp=(oup << levels) - off;    assert (oup > inp) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp > -step; inp-=step, oup--) {      assert (oup >= inp && oup >= 0);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup >= 0; oup--) {      data[oup]=0;    }  }  base=base - (offset + off) * binsize;  offset=0;  size=(size + 1) >> levels;  binsize=binsize * (1 << levels);  max=base + binsize * size;}  }
class C{  public void addZip(String zip){  Set<String> currentZips=getIsInZip();  if (currentZips == null) {    currentZips=new HashSet<String>();  }  currentZips.add(zip);  this.setIsInZip(currentZips);}  }
class C{  public void enable() throws IOException {  if (isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("false");    configuration.save();  }  FMLCommonHandler.instance().bus().register(this);}  }
class C{  private void registerDebugEvents() throws FloodlightModuleException {  if (debugEventService == null) {    debugEventService=new MockDebugEventService();  }  evSwitch=debugEventService.buildEvent(SwitchEvent.class).setModuleName(this.counters.getPrefix()).setEventName("switch-event").setEventDescription("Switch connected, disconnected or port changed").setEventType(EventType.ALWAYS_LOG).setBufferCapacity(100).register();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onMyLocationToggled(View view){  updateMyLocation();}  }
class C{  protected void appendOctet(int number){  append(number);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_STATE_1__STATE_INTERNAL_1:    getStateInternal_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public SubInlineMenuButtonBuilder<T> nextMenu(InlineMenu menu){  this.nextMenu=menu;  return this;}  }
class C{  public synchronized boolean prepare(){  if (mFile != null) {    return true;  }  try {    mFile=mSessionStorageManager.createTemporaryOutputPath(mSessionDirectory,mTitle);  } catch (  IOException e) {    return false;  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((N4MemberAnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static float toFloatValue(char c){  return c;}  }
class C{  private QueueConnectionImpl createNewPrimary(Set excludedServers){  QueueConnectionImpl primary=null;  while (primary == null && pool.getPoolOrCacheCancelInProgress() == null) {    List servers=findQueueServers(excludedServers,1,false,printPrimaryNotFoundError,LocalizedStrings.QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_PRIMARY_CLIENT_QUEUE);    printPrimaryNotFoundError=false;    if (servers == null || servers.isEmpty()) {      break;    }    Connection connection=null;    try {      connection=factory.createClientToServerConnection((ServerLocation)servers.get(0),true);    } catch (    GemFireSecurityException e) {      throw e;    }catch (    Exception e) {      if (logger.isDebugEnabled()) {        logger.debug("SubscriptionManagerImpl - error creating a connection to server {}",servers.get(0));      }    }    if (connection != null) {      primary=initializeQueueConnection(connection,true,queueConnections.getFailedUpdater());    }    excludedServers.addAll(servers);  }  if (primary != null && sentClientReady && primary.sendClientReady()) {    readyForEventsAfterFailover(primary);  }  return primary;}  }
class C{  public void testLoadSearchResults_fetchesFilteredPatientsOnceLocationsPresent(){  mController.setLocationFilter(Zones.TRIAGE_ZONE_UUID);  LocationTree tree=FakeAppLocationTreeFactory.build();  AppLocationTreeFetchedEvent event=new AppLocationTreeFetchedEvent(tree);  mFakeCrudEventBus.post(event);  mController.loadSearchResults();  verify(mMockAppModel).fetchPatients(any(CrudEventBus.class),argThat(new SimpleSelectionFilterMatchers.IsFilterGroupWithLocationFilter(Zones.TRIAGE_ZONE_UUID)),anyString());}  }
class C{  private boolean reverseIt(){  if (!isActive())   throw new IllegalStateException("Allocation already reversed (not active)");  MPeriod.testPeriodOpen(getCtx(),getDateTrx(),MPeriodControl.DOCBASETYPE_PaymentAllocation,getAD_Org_ID());  setIsActive(false);  if (!isPosted())   setPosted(true);  setDocumentNo(getDocumentNo() + "^");  setDocStatus(DOCSTATUS_Reversed);  if (!save() || isActive())   throw new IllegalStateException("Cannot de-activate allocation");  MFactAcct.deleteEx(MAllocationHdr.Table_ID,getC_AllocationHdr_ID(),get_TrxName());  getLines(true);  HashSet<Integer> bps=new HashSet<Integer>();  for (int i=0; i < m_lines.length; i++) {    MAllocationLine line=m_lines[i];    line.setIsActive(false);    line.saveEx();    bps.add(new Integer(line.processIt(true)));  }  updateBP(bps);  return true;}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  void drain(T value,Throwable error){  if (error != null) {    actual.onError(error);    return;  } else   if (value == null) {    actual.onComplete();    return;  }  for (; ; ) {    int s=state;    if (s == NO_REQUEST_HAS_VALUE || s == HAS_REQUEST_HAS_VALUE) {      return;    } else     if (s == HAS_REQUEST_NO_VALUE) {      actual.onNext(value);      if (state != HAS_REQUEST_HAS_VALUE) {        actual.onComplete();      }      return;    } else     if (STATE.compareAndSet(this,s,NO_REQUEST_HAS_VALUE)) {      return;    }  }}  }
class C{  void clear(){  channel.clear();}  }
class C{  public static String unnull(Object prop){  if (prop == null) {    return "";  }  return prop.toString();}  }
class C{  protected void sequence_UnitFakeDefinition(ISerializationContext context,UnitFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getUnitFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  @Override public boolean supportsCatalogsInProcedureCalls(){  debugCodeCall("supportsCatalogsInProcedureCalls");  return false;}  }
class C{  public MXHeader(){  setValue(DEFAULT_VALUE);}  }
class C{  public @Test final void testCreation2(){  User user1=new User(TEST_USER2,TEST_PASSWORD);  assertThat(TEST_USER2).isEqualTo(user1.getUsername());  assertThat(TEST_PASSWORD).isEqualTo(user1.getPassword());  assertThat(user1.getPk()).isNull();  assertThat(user1.isNew()).isTrue();}  }
class C{  public Cursor queryAllPurchasedItems(){  return mDb.query(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_COLUMNS,null,null,null,null,null);}  }
class C{  public static String normalizeWwn(long wwn){  return normalizeWwn(Long.toHexString(wwn));}  }
class C{  public Object clone(){  return new Algebra(property.tolerance());}  }
class C{  public T copyIntoAnonymousSubclass(){  T copy=Instantiator.of(type).instantiateAnonymousSubclass();  return copyInto(copy);}  }
class C{  private int findWorstIndex(){  int worstIndex=0;  for (int i=1; i < population.size(); i++) {    if (fitnessComparator.compare(population.get(worstIndex),population.get(i)) == -1) {      worstIndex=i;    }  }  return worstIndex;}  }
class C{  public DateTime roundHalfCeilingCopy(){  return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));}  }
class C{  public ManagedEntity[] searchManagedEntities(String type,boolean recurse) throws VMWareException {  return searchManagedEntities(getRootFolder(),type,recurse);}  }
class C{  public int fetchInteger() throws BerException {  return fetchInteger(IntegerTag);}  }
class C{  public static String dictionaryToString(Dictionary<Object,Object> dict){  Enumeration<Object> keys=dict.keys();  Object key, value;  StringBuffer result=new StringBuffer();  while (keys.hasMoreElements()) {    key=keys.nextElement();    value=dict.get(key);    result.append(key.toString());    result.append(" = ");    result.append(value.toString());    result.append("; ");  }  return result.toString();}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public void shutdown(ErrorCode statusCode) throws IOException {synchronized (frameWriter) {    int lastGoodStreamId;synchronized (this) {      if (shutdown) {        return;      }      shutdown=true;      lastGoodStreamId=this.lastGoodStreamId;    }    frameWriter.goAway(lastGoodStreamId,statusCode);  }}  }
class C{  public boolean checkMinDegree(int value){  if (value >= ROLE_CARDINALITY_INFINITY && (minDegree == ROLE_CARDINALITY_INFINITY || value >= minDegree)) {    return true;  } else {    return false;  }}  }
class C{  private Object writeReplace() throws ObjectStreamException {  if (primitiveArray) {    return convertFromPrimitiveToWrapperTypes();  } else {    return this;  }}  }
class C{  Code_attribute locate_code_attribute(){  attribute_info ai;  int i;  for (i=0; i < attributes_count; i++) {    ai=attributes[i];    if (ai instanceof Code_attribute)     return (Code_attribute)ai;  }  return null;}  }
class C{  public synchronized void releaseLock(String lockName) throws LockException {  releaseLock(lockName,false);}  }
class C{  public synchronized void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler,HARole role){  if (this.getRole() != role)   return;  ofSwitchHandshakeHandler.sendRoleRequestIfNotPending(this.getRole().getOFRole());}  }
class C{  public synchronized void remove(int index){  XYEntry<Double,Double> removedEntry=mXY.removeByIndex(index);  double removedX=removedEntry.getKey();  double removedY=removedEntry.getValue();  if (removedX == mMinX || removedX == mMaxX || removedY == mMinY || removedY == mMaxY) {    initRange();  }}  }
class C{  public void put(Buffer buffer){  if (buffer.getLength() <= 2) {    return;  }  byte[] currentRtpPacketData=((byte[])buffer.getData());  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);  if (h264RtpHeaders.getFUI_F()) {    return;  }  if (reassembledData == null) {    timestamp=buffer.getTimestamp();    format=buffer.getFormat();    seqNumber=buffer.getSequenceNumber();    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];    reassembledDataHasStart=false;    reassembledDataHasEnd=false;  }  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);  int payloadStartPosition=h264RtpHeaders.getHeaderSize();  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);  }  reassembledDataSize[posSeq]=payloadLength;  reassembledDataFullSize+=payloadLength;  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);  videoOrientation=buffer.getVideoOrientation();}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public void testCreateTableDataDirectory() throws SQLException {  if (versionMeetsMinimum(5,6,6)) {    try {      String tmpdir=null;      String separator=File.separatorChar == '\\' ? File.separator + File.separator : File.separator;      this.rs=this.stmt.executeQuery("SHOW VARIABLES WHERE Variable_name='tmpdir' or Variable_name='innodb_file_per_table'");      while (this.rs.next()) {        if ("tmpdir".equals(this.rs.getString(1))) {          tmpdir=this.rs.getString(2);          if (tmpdir.endsWith(File.separator)) {            tmpdir=tmpdir.substring(0,tmpdir.length() - 1);          }          if (File.separatorChar == '\\') {            tmpdir=StringUtils.escapeQuote(tmpdir,File.separator);          }        } else         if ("innodb_file_per_table".equals(this.rs.getString(1))) {          if (!this.rs.getString(2).equals("ON")) {            fail("You need to set innodb_file_per_table to ON before running this test!");          }        }      }      dropTable("testCreateTableDataDirectorya");      dropTable("testCreateTableDataDirectoryb");      dropTable("testCreateTableDataDirectoryc");      dropTable("testCreateTableDataDirectoryd");      createTable("testCreateTableDataDirectorya","(x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "'");      createTable("testCreateTableDataDirectoryb","(x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + separator+ "'");      this.stmt.executeUpdate("CREATE TEMPORARY TABLE testCreateTableDataDirectoryc (x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + (versionMeetsMinimum(5,7,7) ? "' ENGINE = MyISAM" : "'"));      createTable("testCreateTableDataDirectoryd","(x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + separator+ "' INDEX DIRECTORY = '"+ tmpdir+ (versionMeetsMinimum(5,7,7) ? "' ENGINE = MyISAM" : "'"));      this.stmt.executeUpdate("ALTER TABLE testCreateTableDataDirectorya DISCARD TABLESPACE");      this.pstmt=this.conn.prepareStatement("CREATE TABLE testCreateTableDataDirectorya (x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("CREATE TABLE testCreateTableDataDirectorya (x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + separator+ "'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("CREATE TEMPORARY TABLE testCreateTableDataDirectorya (x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("CREATE TABLE testCreateTableDataDirectorya (x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "' INDEX DIRECTORY = '"+ tmpdir+ "'");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("ALTER TABLE testCreateTableDataDirectorya DISCARD TABLESPACE");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);    }  finally {      dropTable("testCreateTableDataDirectorya");      dropTable("testCreateTableDataDirectoryb");      dropTable("testCreateTableDataDirectoryc");      dropTable("testCreateTableDataDirectoryd");    }  }}  }
class C{  public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException {  return bool();}  }
class C{  public CompleteDiff(StreamableReader<T> reader,StreamInput in) throws IOException {  if (in.readBoolean()) {    this.part=reader.readFrom(in);  } else {    this.part=null;  }}  }
class C{  public ResponseOnSingeRequest onComplete(Response response){  cancelCancellable();  try {    Map<String,List<String>> responseHeaders=null;    if (responseHeaderMeta != null) {      responseHeaders=new LinkedHashMap<String,List<String>>();      if (responseHeaderMeta.isGetAll()) {        for (        Map.Entry<String,List<String>> header : response.getHeaders()) {          responseHeaders.put(header.getKey().toLowerCase(Locale.ROOT),header.getValue());        }      } else {        for (        String key : responseHeaderMeta.getKeys()) {          if (response.getHeaders().containsKey(key)) {            responseHeaders.put(key.toLowerCase(Locale.ROOT),response.getHeaders().get(key));          }        }      }    }    int statusCodeInt=response.getStatusCode();    String statusCode=statusCodeInt + " " + response.getStatusText();    reply(response.getResponseBody(),false,null,null,statusCode,statusCodeInt,responseHeaders);  } catch (  IOException e) {    getLogger().error("fail response.getResponseBody " + e);  }  return null;}  }
class C{  public AgentAppEnvironmentView createEnvironmentView(){  return new EmptyEnvironmentView();}  }
class C{  public void close(){  this.closed=true;}  }
class C{  public SubscriptionState(){  super(SIPHeaderNames.SUBSCRIPTION_STATE);  expires=-1;  retryAfter=-1;}  }
class C{  public static void saveJpeg(Bitmap src,String fileName,int quality) throws ImageSaveException {  save(src,fileName,Bitmap.CompressFormat.JPEG,quality);}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public int[] toNativeArray(int offset,int len){  int[] rv=new int[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  @Override public void updateNull(int columnIndex) throws SQLException {  try {    debugCodeCall("updateNull",columnIndex);    update(columnIndex,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public JToggleGroup createCheckboxGroup(){  return createToggleGroup(JToggleGroup.CHECKBOX);}  }
class C{  protected boolean performIteration(int iteration,double[][] trainYs,double[][] trainFs,double[][] probs,Instances trainNumeric) throws Exception {  SimpleLinearRegression[] linearRegressionForEachClass=new SimpleLinearRegression[m_numClasses];  double[] oldWeights=new double[trainNumeric.numInstances()];  for (int i=0; i < oldWeights.length; i++) {    oldWeights[i]=trainNumeric.instance(i).weight();  }  for (int j=0; j < m_numClasses; j++) {    double weightSum=0.0;    for (int i=0; i < trainNumeric.numInstances(); i++) {      double p=probs[i][j];      double actual=trainYs[i][j];      double z=getZ(actual,p);      double w=(actual - p) / z;      Instance current=trainNumeric.instance(i);      current.setValue(trainNumeric.classIndex(),z);      current.setWeight(oldWeights[i] * w);      weightSum+=current.weight();    }    Instances instancesCopy=trainNumeric;    if (weightSum > 0) {      if (m_weightTrimBeta > 0) {        instancesCopy=new Instances(trainNumeric,trainNumeric.numInstances());        double[] weights=new double[oldWeights.length];        for (int i=0; i < oldWeights.length; i++) {          weights[i]=trainNumeric.instance(i).weight();        }        double weightPercentage=0.0;        int[] weightsOrder=Utils.sort(weights);        for (int i=weightsOrder.length - 1; (i >= 0) && (weightPercentage < (1 - m_weightTrimBeta)); i--) {          instancesCopy.add(trainNumeric.instance(weightsOrder[i]));          weightPercentage+=(weights[weightsOrder[i]] / weightSum);        }        weightSum=instancesCopy.sumOfWeights();      }      double multiplier=instancesCopy.numInstances() / weightSum;      for (      Instance current : instancesCopy) {        current.setWeight(current.weight() * multiplier);      }    }    linearRegressionForEachClass[j]=new SimpleLinearRegression();    linearRegressionForEachClass[j].buildClassifier(instancesCopy);    boolean foundAttribute=linearRegressionForEachClass[j].foundUsefulAttribute();    if (!foundAttribute) {      for (int i=0; i < oldWeights.length; i++) {        trainNumeric.instance(i).setWeight(oldWeights[i]);      }      return false;    }  }  for (int i=0; i < m_numClasses; i++) {    m_regressions[i][linearRegressionForEachClass[i].getAttributeIndex()].addModel(linearRegressionForEachClass[i]);  }  for (int i=0; i < trainFs.length; i++) {    double[] pred=new double[m_numClasses];    double predSum=0;    for (int j=0; j < m_numClasses; j++) {      pred[j]=linearRegressionForEachClass[j].classifyInstance(trainNumeric.instance(i));      predSum+=pred[j];    }    predSum/=m_numClasses;    for (int j=0; j < m_numClasses; j++) {      trainFs[i][j]+=(pred[j] - predSum) * (m_numClasses - 1) / m_numClasses;    }  }  for (int i=0; i < trainYs.length; i++) {    probs[i]=probs(trainFs[i]);  }  for (int i=0; i < oldWeights.length; i++) {    trainNumeric.instance(i).setWeight(oldWeights[i]);  }  return true;}  }
class C{  public double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public boolean next() throws IOException {  if (rowCount == 0 && useHeaders) {    List<String> row1=this.read();    if (row1 == null)     return false;    for (int i=0; i < row1.size(); i++) {      String name=row1.get(i);      names.put(name,i + 1);    }    rowCount++;  }  row=this.read();  if (row == null)   return false; else {    rowCount++;    return true;  }}  }
class C{  final public void yyreset(java.io.Reader reader) throws java.io.IOException {  yyclose();  yy_reader=reader;  yy_atBOL=true;  yy_atEOF=false;  yy_endRead=yy_startRead=0;  yy_currentPos=yy_markedPos=yy_pushbackPos=0;  yyline=yychar=yycolumn=0;  yy_lexical_state=YYINITIAL;}  }
class C{  public static float calculateHeight(float radius,float heightFactor,float x,float z){  float val=calculateRadiusPercent(radius,x,z);  return heightFactor * val;}  }
class C{  public void findPackages(char[] prefix,ISearchRequestor requestor){  String name=new String(prefix);  String[] splittedName=Util.splitOn('.',name,0,name.length());  for (  CodenvyClasspathLocation location : this.locations) {    location.findPackages(splittedName,requestor);  }}  }
class C{  protected static String indent(final int depth){  if (depth < 0) {    return "";  }  return ws.substring(0,depth * 2);}  }
class C{  public CubePortrayal3D(Image image){  this(image,1f);}  }
class C{  public boolean equals(Object other){  if (other instanceof CertificatePolicyId)   return id.equals((Object)((CertificatePolicyId)other).getIdentifier()); else   return false;}  }
class C{  public ConcurrentHashMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  protected MouseInputListener createMouseInputListener(){  return getHandler();}  }
class C{  public boolean validateRules(){  boolean isok=true;  Iterator i=rules.values().iterator();  while (i.hasNext()) {    GrammarRuleNode rule=(GrammarRuleNode)(i.next());    if (rule.getNumChoices() < 1) {      System.out.println("Grammar is bad! - Rule not defined: " + rule);      isok=false;    }  }  if (isok) {    System.out.println("All rules appear properly defined!");    return true;  }  return false;}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + this.font.hashCode();  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  result=37 * result + this.rotationAnchor.hashCode();  long temp=Double.doubleToLongBits(this.rotationAngle);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + this.text.hashCode();  result=37 * result + this.textAnchor.hashCode();  return result;}  }
class C{  public int checkVTimerID(int uid){  if (!vtimers.containsKey(uid)) {    throw new SceKernelErrorException(ERROR_KERNEL_NOT_FOUND_VTIMER);  }  return uid;}  }
class C{  public boolean isName(){  return typeString.contains(SUFFIX_NAME);}  }
class C{  public static boolean isWellFormedURI(String url){  if (url != null) {    try {      new URI(url);      return true;    } catch (    URISyntaxException e) {      return false;    }  } else {    return false;  }}  }
class C{  protected TreeNode createRootNode(){  return new BasicTreeNode(DEFAULT_ROOT_NAME);}  }
class C{  private boolean checkForNaNs(NumberVector vec){  for (int i=0, d=vec.getDimensionality(); i < d; i++) {    double v=vec.doubleValue(i);    if (v != v) {      return true;    }  }  return false;}  }
class C{  public T rating(float rating){  if (view instanceof RatingBar) {    RatingBar rb=(RatingBar)view;    rb.setRating(rating);  }  return self();}  }
class C{  public void initiateClassifier(List<AnthURL> list){  onlineLearner.initialize(list);}  }
class C{  public static String decapitalize(String name){  if (name == null)   return null;  if (name.length() == 0 || (name.length() > 1 && Character.isUpperCase(name.charAt(1)))) {    return name;  }  char[] chars=name.toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  public Long addRoomWithModerationQuestionsAndAudioType(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,Boolean allowUserQuestions,Boolean isAudioOnly) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    return roommanagement.addRoom(user_level,name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,allowUserQuestions,isAudioOnly,false,"","","",null,null,null,false,false,false,false,false,false,false,false);  } catch (  Exception err) {    log.error("[addRoomWithModerationQuestionsAndAudioType] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  private void onInitTypeface(Context context,AttributeSet attrs,int defStyle){  if (isInEditMode()) {    return;  }  int typefaceValue=0;  if (attrs != null) {    TypedArray values=context.obtainStyledAttributes(attrs,R.styleable.RobotoTextView,defStyle,0);    typefaceValue=values.getInt(R.styleable.RobotoTextView_typeface,0);    values.recycle();  }  Typeface robotoTypeface=RobotoTypefaceManager.obtaintTypeface(context,typefaceValue);  setTypeface(robotoTypeface);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean isPlayerVictor(IPlayer player){  if (player.getTeam() == IPlayer.TEAM_NONE) {    return player.getId() == victoryPlayerId;  }  return player.getTeam() == victoryTeam;}  }
class C{  private void addShutdownHook(){  Runtime.getRuntime().addShutdownHook(new Thread(null));}  }
class C{  @Override public boolean hasChildren(){  return false;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean hasInitialFocus(){  if (isJDK11Applet() || isJDK12Applet())   return false;  String initialFocus=getParameter("initial_focus");  if (initialFocus != null) {    if (initialFocus.toLowerCase().equals("false"))     return false;  }  return true;}  }
class C{  public void reset(){  iterator=featureList.iterator();  current=null;}  }
class C{  public String minStdDevTipText(){  return "set minimum allowable standard deviation";}  }
class C{  public boolean isStrokeMM(){  return strokeMM;}  }
class C{  public OrderedKAryTree(int order){  super(EdgeType.DIRECTED);  this.order=order;  this.height=-1;  this.edge_vpairs=new HashMap<E,Pair<V>>();  this.vertex_data=new HashMap<V,VertexData>();}  }
class C{  public void addNeighbor(Individual neighbor){  neighbors.add(neighbor);}  }
class C{  public synchronized int addLog(File file,boolean appendOnRestart) throws IOException {  return addLog(file,false,appendOnRestart,false);}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public static double quadraticEuclidean(double[] v1,double[] v2){  final double d1=v1[0] - v2[0], d2=v1[1] - v2[1];  return (d1 * d1) + (d2 * d2);}  }
class C{  protected boolean delay(){  if (lastRunTime == 0) {    lastRunTime=System.currentTimeMillis();    return true;  }  try {    final long periodInMs=period * 1000;    Thread.sleep(Math.max(0,periodInMs));    lastRunTime=System.currentTimeMillis();    return true;  } catch (  final InterruptedException e) {    getMonitor().warn("Interrupted, stopping the scheduler");    return false;  }}  }
class C{  public Long updateAppointmentTimeOnly(String SID,Long appointmentId,Date appointmentstart,Date appointmentend,String baseurl,Long languageId){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      log.debug("appointmentId " + appointmentId);      appointmentLogic.getAppointMentById(appointmentId);      Users user=userManagement.getUserById(users_id);      return appointmentDao.updateAppointmentByTime(appointmentId,appointmentstart,appointmentend,users_id,baseurl,languageId,user.getOmTimeZone().getIcal());    }  } catch (  Exception err) {    log.error("[updateAppointment]",err);    err.printStackTrace();  }  return null;}  }
class C{  public DialogCheckBox addDialogCheckBox(String description,String labelText,boolean initialState){  String[] args=new String[4];  args[0]="checkbox";  args[1]=description;  args[2]=labelText;  args[3]=Boolean.toString(initialState);  DialogCheckBox dcb=new DialogCheckBox();  dcb.setArgs(args);  components.add(dcb);  mainPanel.add(dcb);  return dcb;}  }
class C{  public static boolean isIgnoredPermission(String permission){  if (permission == null) {    return false;  }  return getIgnoredPermissions().contains(permission);}  }
class C{  public void normalizeAll(){  for (int nodeIndex=0; nodeIndex < nodes.length; nodeIndex++) {    normalizeNode(nodeIndex);  }}  }
class C{  public static int convertHeightInCharsToPixels(FontMetrics fontMetrics,int chars){  return fontMetrics.getHeight() * chars;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.DistributionPreferences);  MessageResources rsc=getResources(request);  ActionMessages errors=new ActionMessages();  DistributionPrefsForm frm=(DistributionPrefsForm)form;  String reloadId=request.getParameter("reloadId");  String reloadCause=request.getParameter("reloadCause");  String deleteId=request.getParameter("deleteId");  String deleteType=request.getParameter("deleteType");  String distPrefId=request.getParameter("dp");  String op=frm.getOp();  if (op == null || op.trim().length() == 0) {    op="view";    frm.setOp(op);  }  frm.setFilterSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));  if ("DistTypeChange".equals(request.getParameter("op2")) || "GroupingChange".equals(request.getParameter("op2")))   op="reload pref";  Debug.debug("op: " + op);  Debug.debug("deleteId: " + deleteId);  Debug.debug("deleteType: " + deleteType);  Debug.debug("reloadCause: " + reloadCause);  Debug.debug("reloadId: " + reloadId);  Debug.debug("distPrefId: " + distPrefId);  if (reloadCause != null && reloadCause.length() > 0)   op="reload";  if (op.equals(rsc.getMessage("button.cancel"))) {    frm.reset(mapping,request);    if (BackTracker.doBack(request,response))     return null;    op="view";  }  Vector subjectAreaList=setupSubjectAreas(request);  if (op.equals(MSG.actionSaveNewDistributionPreference()) || op.equals(MSG.actionUpdateDistributionPreference())) {    Debug.debug("Saving distribution pref ...");    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      try {        doAddOrUpdate(request,frm);        if (frm.getDistPrefId() != null) {          request.setAttribute("backType","PreferenceGroup");          request.setAttribute("backId",frm.getDistPrefId());        }        frm.reset(mapping,request);        if (BackTracker.doBack(request,response))         return null;        op="view";      } catch (      Exception e) {        Debug.error(e);        errors.add("classes",new ActionMessage("errors.generic",e.getMessage()));        saveErrors(request,errors);      }    } else     saveErrors(request,errors);  }  if (op.equals(MSG.actionDeleteDistributionPreference())) {    if (deleteType.equals("distObject")) {      frm.removeFromLists(Integer.parseInt(deleteId));    }    if (deleteType.equals("distPref")) {      distPrefId=frm.getDistPrefId();      doDelete(request,distPrefId);      frm.reset(mapping,request);      if (BackTracker.doBack(request,response))       return null;      op="view";    }  }  if (op.equals(MSG.actionAddDistributionPreference()) || MSG.actionAddDistributionPreference().equals(op)) {    Debug.debug("Adding new Class via redirect ...");    frm.setDistType(Preference.BLANK_PREF_VALUE);    frm.setGrouping(Preference.BLANK_PREF_VALUE);    if (request.getAttribute("subjectAreaId") != null) {      frm.addToSubjectArea(request.getAttribute("subjectAreaId").toString());      frm.addToItype(request.getAttribute("schedSubpartId").toString());      frm.addToCourseNbr(request.getAttribute("courseOffrId").toString());      frm.addToClassNumber(request.getAttribute("classId").toString());      request.setAttribute("addedClass","" + (frm.getSubjectArea().size() - 1));    }  }  if (op.equals(MSG.actionAddClassToDistribution())) {    Debug.debug("Adding new Class ...");    String subjAreaId=null;    if (subjectAreaList.size() == 1)     subjAreaId=((ComboBoxLookup)subjectAreaList.elementAt(0)).getValue();    frm.addNewClass(subjAreaId);    request.setAttribute("addedClass","" + (frm.getSubjectArea().size() - 1));  }  if (op.equals(MSG.actionSearchDistributionPreferences()) || op.equals(MSG.actionExportPdf())) {    String subjectAreaId=frm.getFilterSubjectAreaId();    String courseNbr=frm.getFilterCourseNbr();    if (subjectAreaId != null && subjectAreaId.length() > 0)     sessionContext.setAttribute(SessionAttribute.OfferingsSubjectArea,subjectAreaId); else     sessionContext.removeAttribute(SessionAttribute.OfferingsSubjectArea);    if (courseNbr != null && courseNbr.length() > 0)     sessionContext.setAttribute(SessionAttribute.OfferingsCourseNumber,courseNbr); else     sessionContext.removeAttribute(SessionAttribute.OfferingsCourseNumber);    if (op.equals(MSG.actionExportPdf()))     op="export"; else     op="view";  }  if (op != null && (op.equals("view") || op.equals("export")) && distPrefId != null && distPrefId.trim().length() > 0) {    Debug.debug("Loading dist pref - " + distPrefId);    frm.reset(mapping,request);    doLoad(frm,distPrefId);  }  if (op != null && op.equals("reload")) {    if (reloadCause != null && reloadCause.equals("subjectArea")) {      int index=Integer.parseInt(reloadId);      Debug.debug("subj area changed ... " + reloadId + " - "+ frm.getSubjectArea(index));      frm.setCourseNbr(index,Preference.BLANK_PREF_VALUE);      frm.setItype(index,Preference.BLANK_PREF_VALUE);      frm.setClassNumber(index,Preference.BLANK_PREF_VALUE);    }    if (reloadCause != null && reloadCause.equals("moveUp")) {      int index=Integer.parseInt(reloadId);      Debug.debug("moving up ... " + reloadId);      frm.swap(index,index - 1);    }    if (reloadCause != null && reloadCause.equals("moveDown")) {      int index=Integer.parseInt(reloadId);      Debug.debug("moving down ... " + reloadId);      frm.swap(index,index + 1);    }  }  setLookupLists(request,frm,subjectAreaList,errors);  if (frm.getDistType() != null && !frm.getDistType().equals(Preference.BLANK_PREF_VALUE)) {    Vector prefs=new Vector();    DistributionType dist=(new DistributionTypeDAO().get(new Long(frm.getDistType())));    frm.setDescription(dist.getDescr());    boolean containsPref=false;    for (    PreferenceLevel pref : PreferenceLevel.getPreferenceLevelList()) {      if (dist.isAllowed(pref)) {        prefs.addElement(pref);        if (frm.getPrefLevel() != null && !frm.getPrefLevel().equals(Preference.BLANK_PREF_VALUE) && pref.getPrefId().equals(new Integer(frm.getPrefLevel())))         containsPref=true;      }    }    if (!containsPref)     frm.setPrefLevel(Preference.BLANK_PREF_VALUE);    if (prefs.size() == 1)     frm.setPrefLevel(((PreferenceLevel)prefs.firstElement()).getPrefId().toString());    request.setAttribute(PreferenceLevel.PREF_LEVEL_ATTR_NAME,prefs);    LookupTables.setupDistribTypes(request,sessionContext,dist);  } else {    request.setAttribute(PreferenceLevel.PREF_LEVEL_ATTR_NAME,new Vector(0));    frm.setDescription("");    LookupTables.setupDistribTypes(request,sessionContext,null);  }  if (frm.getGrouping() != null && !frm.getGrouping().equals(Preference.BLANK_PREF_VALUE)) {    frm.setGroupingDescription(frm.getStructure().getDescription());  }  if ("export".equals(op) && (frm.getDistPrefId() == null || frm.getDistPrefId().length() == 0)) {    OutputStream out=ExportUtils.getPdfOutputStream(response,"distprefs");    new DistributionPrefsTableBuilder().getAllDistPrefsTableForCurrentUserAsPdf(out,sessionContext,frm.getFilterSubjectAreaId(),frm.getFilterCourseNbr());    return null;  }  request.setAttribute(DistributionPrefsForm.LIST_SIZE_ATTR,"" + (frm.getSubjectArea().size() - 1));  if ("view".equals(op) && (frm.getDistPrefId() == null || frm.getDistPrefId().length() == 0)) {    String subject=(String)sessionContext.getAttribute(SessionAttribute.OfferingsSubjectArea);    if (subject != null && subject.indexOf(',') >= 0)     subject=subject.substring(0,subject.indexOf(','));    frm.setFilterSubjectAreaId(subject);    frm.setFilterCourseNbr((String)sessionContext.getAttribute(SessionAttribute.OfferingsCourseNumber));    DistributionPrefsTableBuilder tbl=new DistributionPrefsTableBuilder();    if (frm.getFilterSubjectAreaId() == null) {      if (sessionContext.getUser().getCurrentAuthority().hasRight(Right.DepartmentIndependent))       frm.setFilterSubjectAreaId(Constants.BLANK_OPTION_VALUE); else       frm.setFilterSubjectAreaId(Constants.ALL_OPTION_VALUE);    }    String html=tbl.getAllDistPrefsTableForCurrentUser(request,sessionContext,frm.getFilterSubjectAreaId(),frm.getFilterCourseNbr());    if (html != null)     request.setAttribute(DistributionPref.DIST_PREF_REQUEST_ATTR,html);    BackTracker.markForBack(request,"distributionPrefs.do",MSG.backDistributionPreferences(),true,true);    return mapping.findForward("list");  }  return mapping.findForward(frm.getDistPrefId() == null || frm.getDistPrefId().length() == 0 ? "add" : "edit");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  synchronized void println(String s,int _verbosity,int log,boolean _announcement) throws OutputException {  if (log == NO_LOGS)   return;  if (log == ALL_MESSAGE_LOGS)   for (int x=0; x < logs.size(); x++) {    Log l=(Log)logs.elementAt(x);    if (l == null)     throw new OutputException("Unknown log number" + l);    println(s,_verbosity,l,_announcement,false);  } else {    Log l=(Log)logs.elementAt(log);    if (l == null)     throw new OutputException("Unknown log number" + log);    println(s,_verbosity,l,_announcement,false);  }}  }
class C{  public TextAreaEditingTool(TextHolderFigure typingTarget){  this.typingTarget=typingTarget;}  }
class C{  public static void send(final String subject,final String templateName,final List<String> toMails,final Map<String,List<String>> variables){  if (null == toMails || toMails.isEmpty()) {    return;  }  try {    final Map<String,Object> formData=new HashMap<String,Object>();    formData.put("api_user",API_USER);    formData.put("api_key",API_KEY);    formData.put("from","admin@" + Latkes.getServerHost());    formData.put("fromname","Sym");    formData.put("subject",subject);    formData.put("template_invoke_name",templateName);    final JSONObject args=new JSONObject();    args.put("to",new JSONArray(toMails));    final JSONObject sub=new JSONObject();    args.put("sub",sub);    for (    final Map.Entry<String,List<String>> var : variables.entrySet()) {      final JSONArray value=new JSONArray(var.getValue());      sub.put(var.getKey(),value);    }    formData.put("substitution_vars",args.toString());    formData.put("resp_email_id","true");    final HttpResponse response=HttpRequest.post("http://sendcloud.sohu.com/webapi/mail.send_template.json").form(formData).send();    LOGGER.log(Level.INFO,response.bodyText());  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Send mail error",e);  }}  }
class C{  @Override public ServiceExceptionConnect rethrow(String msg){  return new ServiceExceptionConnect(msg,this);}  }
class C{  private void sendResponse(SIPResponse transactionResponse) throws IOException {  try {    if (isReliable()) {      getMessageChannel().sendMessage(transactionResponse);    } else {      Via via=transactionResponse.getTopmostVia();      String transport=via.getTransport();      if (transport == null)       throw new IOException("missing transport!");      int port=via.getRPort();      if (port == -1)       port=via.getPort();      if (port == -1) {        if (transport.equalsIgnoreCase("TLS"))         port=5061; else         port=5060;      }      String host=null;      if (via.getMAddr() != null) {        host=via.getMAddr();      } else {        host=via.getParameter(Via.RECEIVED);        if (host == null) {          host=via.getHost();        }      }      Hop hop=sipStack.addressResolver.resolveAddress(new HopImpl(host,port,transport));      MessageChannel messageChannel=((SIPTransactionStack)getSIPStack()).createRawMessageChannel(this.getSipProvider().getListeningPoint(hop.getTransport()).getIPAddress(),this.getPort(),hop);      if (messageChannel != null)       messageChannel.sendMessage(transactionResponse); else       throw new IOException("Could not create a message channel for " + hop);    }  }  finally {    this.startTransactionTimer();  }}  }
class C{  public Array(T[] array){  this(true,array);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue08.class,args);}  }
class C{  public void append(final String s){  if (s == null) {    return;  }  append(s.toCharArray());}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MinAggregator minAggregator=(MinAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(minAggregator.aggVal);    firstTime=false;  }}  }
class C{  @Override public List<BlockSnapshot> prepareSnapshots(List<Volume> volumes,String snapshotType,String snapshotName,List<URI> snapshotURIs,String taskId){  List<BlockSnapshot> snapshots=new ArrayList<BlockSnapshot>();  int index=1;  for (  Volume volume : volumes) {    VolumeGroup volumeGroup=volume.getApplication(_dbClient);    boolean isInApplication=volumeGroup != null && !volumeGroup.getInactive();    if (RPHelper.isProtectionBasedSnapshot(volume,snapshotType,_dbClient) && snapshotType.equalsIgnoreCase(BlockSnapshot.TechnologyType.RP.toString())) {      if (!volume.getRpTargets().isEmpty()) {        List<URI> targetVolumeURIs=new ArrayList<URI>();        for (        String targetVolumeStr : volume.getRpTargets()) {          targetVolumeURIs.add(URI.create(targetVolumeStr));        }        RPController rpController=getController(RPController.class,ProtectionSystem._RP);        Map<URI,String> copyAccessStates=rpController.getCopyAccessStates(volume.getProtectionController(),targetVolumeURIs);        for (        URI targetVolumeURI : targetVolumeURIs) {          Volume targetVolume=_dbClient.queryObject(Volume.class,targetVolumeURI);          if (copyAccessStates != null && !copyAccessStates.isEmpty() && RPHelper.isValidBookmarkState(copyAccessStates.get(targetVolume.getId()))) {            BlockSnapshot snapshot=prepareSnapshotFromVolume(volume,snapshotName,targetVolume,0,snapshotType,isInApplication);            snapshot.setOpStatus(new OpStatusMap());            snapshot.setEmName(snapshotName);            snapshot.setEmInternalSiteName(targetVolume.getInternalSiteName());            snapshot.setVirtualArray(targetVolume.getVirtualArray());            snapshots.add(snapshot);            _log.info(String.format("Prepared snapshot : [%s]",snapshot.getLabel()));          } else {            _log.warn(String.format("A BlockSnapshot is not being prepared for target volume %s because copy %s is currently in a state [%s] that does not allow bookmarks to be created.",targetVolume.getId(),targetVolume.getRpCopyName(),copyAccessStates.get(targetVolume.getId())));          }        }      }    } else {      boolean vplex=RPHelper.isVPlexVolume(volume,_dbClient);      Volume volumeToSnap=volume;      if (vplex) {        volumeToSnap=vplexBlockServiceApiImpl.getVPLEXSnapshotSourceVolume(volume);      }      boolean isRPTarget=false;      if (NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(PersonalityTypes.TARGET.name())) {        isRPTarget=true;      }      BlockSnapshot snapshot=prepareSnapshotFromVolume(volumeToSnap,snapshotName,(isRPTarget ? volume : null),index++,snapshotType,isInApplication);      snapshot.setTechnologyType(snapshotType);      boolean rpCopyNameContainsSrcSuffix=NullColumnValueGetter.isNotNullValue(volume.getRpCopyName()) && (volume.getRpCopyName().contains(SRC_COPY_SUFFIX) || volume.getRpCopyName().contains(MP_ACTIVE_COPY_SUFFIX) || volume.getRpCopyName().contains(MP_STANDBY_COPY_SUFFIX));      boolean isFormerSource=isRPTarget && rpCopyNameContainsSrcSuffix;      boolean isFormerTarget=false;      if (NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(PersonalityTypes.SOURCE.name()) && !rpCopyNameContainsSrcSuffix) {        isFormerTarget=true;      }      if (!isInApplication && (((isRPTarget || isFormerTarget) && vplex && !isFormerSource) || !vplex)) {        snapshot.setConsistencyGroup(null);      }      snapshots.add(snapshot);      _log.info(String.format("Prepared snapshot : [%s]",snapshot.getLabel()));    }  }  if (!snapshots.isEmpty()) {    for (    BlockSnapshot snapshot : snapshots) {      Operation op=new Operation();      op.setResourceType(ResourceOperationTypeEnum.CREATE_VOLUME_SNAPSHOT);      op.setStartTime(Calendar.getInstance());      snapshot.getOpStatus().createTaskStatus(taskId,op);      snapshotURIs.add(snapshot.getId());    }    _dbClient.createObject(snapshots);  } else {    throw APIException.badRequests.cannotCreateSnapshots();  }  return snapshots;}  }
class C{  public void signRequest(Verb verb){  String convertedUrl=FlickrSecurityUtils.convertUrl(requestUrl,verb,params);  if (convertedUrl != null) {    params.put("oauth_signature",FlickrSecurityUtils.getSignatureFromRequest(convertedUrl,apiKeySecret + SEPARATOR + (oAuthTokenSecret == null ? "" : oAuthTokenSecret)));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  void showStopLine(Dim.StackFrame frame){  String sourceName=frame.getUrl();  if (sourceName == null || sourceName.equals("<stdin>")) {    if (console.isVisible()) {      console.show();    }  } else {    showFileWindow(sourceName,-1);    int lineNumber=frame.getLineNumber();    FileWindow w=getFileWindow(sourceName);    if (w != null) {      setFilePosition(w,lineNumber);    }  }}  }
class C{  public void writeTag(String tag,Color value){  int rgb=value.getRGB() & 0xFFFFFF;  writeTag(tag,"#" + Integer.toHexString(rgb).toUpperCase());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  protected String apply(String input){  Matcher matcher=this.expressionPattern.matcher(input);  if (!matcher.find())   return null;  return matcher.replaceAll(this.replacement);}  }
class C{  public static int fixedPointToInt(int fixedPoint){  return fixedPoint >>> 5;}  }
class C{  public final synchronized int drainStats(Collection<? super ContainerStats.OperatorStats> stats){  return statsBuffer.drainTo(stats);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  @SuppressWarnings("unchecked") public Iter<O> iterChildren(){  if (numc == 0) {    return (Iter<O>)EMPTY_ITERATOR;  }  return new ItrChildren();}  }
class C{  public static Script dmlFromFile(String scriptFilePath){  return scriptFromFile(scriptFilePath,ScriptType.DML);}  }
class C{  public void scan(String text){  char[] chars=text.toCharArray();  fMatches=new HashSet<TextMatch>();  fScanner=ToolFactory.createScanner(true,true,false,true);  fScanner.setSource(chars);  doScan();  fScanner=null;}  }
class C{  public void put(K key,V value) throws RocksDBException {  byte[] keyBytes=serdes.getKeySerializer().serialize(name,key);  byte[] valueBytes=serdes.getValueSerializer().serialize(name,value);  db.put(handle,keyBytes,valueBytes);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static void showManagedByAdministratorToast(Context context){  Toast.makeText(context,context.getString(R.string.managed_by_your_administrator),Toast.LENGTH_LONG).show();}  }
class C{  void remove(MembershipKeyImpl key){  InetAddress group=key.group();  List<MembershipKeyImpl> keys=groups.get(group);  if (keys != null) {    Iterator<MembershipKeyImpl> i=keys.iterator();    while (i.hasNext()) {      if (i.next() == key) {        i.remove();        break;      }    }    if (keys.isEmpty()) {      groups.remove(group);    }  }}  }
class C{  private static int compareUnsignedLong(long a,long b){  if (a == b)   return 0; else   if ((a + Long.MIN_VALUE) < (b + Long.MIN_VALUE))   return -1; else   return 1;}  }
class C{  ProblemBuilder usingProblemFactory(ProblemFactory problemFactory){  this.problemFactory=problemFactory;  return this;}  }
class C{  public static long toLongValue(String str) throws PageException {  BigInteger bi=null;  try {    bi=new BigInteger(str);  } catch (  Throwable t) {  }  if (bi != null) {    if (bi.bitLength() < 64)     return bi.longValue();    throw new ApplicationException("number [" + str + "] cannot be casted to a long value, number is to long ("+ (bi.bitLength() + 1)+ " bit)");  }  return (long)toDoubleValue(str);}  }
class C{  public MemLRUCapacityController(int megabytes,ObjectSizer sizerImpl,Region region){  this(megabytes,sizerImpl,EvictionAction.DEFAULT_EVICTION_ACTION,region,false);}  }
class C{  private void resetUI(){  frame.getTestCasePanel().getSpatialFunctionPanel().enableExecuteControl(true);  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  private void initializeLiveAttributes(){  refX=createLiveAnimatedLength(null,SVG_REF_X_ATTRIBUTE,SVG_MARKER_REF_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  refY=createLiveAnimatedLength(null,SVG_REF_Y_ATTRIBUTE,SVG_MARKER_REF_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  markerWidth=createLiveAnimatedLength(null,SVG_MARKER_WIDTH_ATTRIBUTE,SVG_MARKER_MARKER_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  markerHeight=createLiveAnimatedLength(null,SVG_MARKER_HEIGHT_ATTRIBUTE,SVG_MARKER_MARKER_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  orient=createLiveAnimatedMarkerOrientValue(null,SVG_ORIENT_ATTRIBUTE);  markerUnits=createLiveAnimatedEnumeration(null,SVG_MARKER_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();  viewBox=createLiveAnimatedRect(null,SVG_VIEW_BOX_ATTRIBUTE,null);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public Jerry text(String text){  for (  Node node : nodes) {    node.removeAllChilds();    Text textNode=new Text(node.getOwnerDocument(),text);    node.addChild(textNode);  }  return this;}  }
class C{  public static Object invokeWithVarArg(int methodID,Address argAddress,TypeReference expectReturnType) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  Object[] argObjectArray=packageParameterFromVarArg(mr,argAddress);  return callMethod(null,mr,argObjectArray,expectReturnType,true);}  }
class C{  public void populateSubDomains(DomainHierarchy hierarchy){  ArrayList<DimensionIndex> copy=new ArrayList<>(subdomains);  subdomains.clear();  for (  DimensionIndex root : copy) {    Axis axis=root.getAxis();    IDomain type=axis.getDimension().getImageDomain();    try {      List<DimensionIndex> results=new ArrayList<>();      populateSubDomainHierarchy(hierarchy.getRoot(),root,axis,results,type);      if (!results.isEmpty()) {        hierarchy.addHierarchy(results);      }    } catch (    ScopeException|InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  public String toString(){  String aString=aliases.isEmpty() ? "" : "\r\n  aliases: " + aliases.toString();  String attrs=attributes.isEmpty() ? "" : "\r\n  attributes: " + attributes.toString();  return provider.getName() + ": " + type+ "."+ algorithm+ " -> "+ className+ aString+ attrs+ "\r\n";}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VERSIONS;default :return null;}}  }
class C{  public CProjectNodeMenuBuilder(final JTree projectTree,final DefaultMutableTreeNode parentNode,final IDatabase database,final INaviProject[] projects,final JTable table){  super(projectTree);  m_database=Preconditions.checkNotNull(database,"IE01982: Database argument can't be null");  Preconditions.checkNotNull(projects,"IE01983: Project argument can't be null");  m_parentNode=parentNode;  m_projects=projects.clone();  m_table=table;  m_loadProjectAction=CActionProxy.proxy(new CLoadProjectAction(projectTree,projects));  if (projects.length == 1) {    final INaviProject singleProject=projects[0];    if (m_table == null) {      singleProject.addListener(m_listener);    }    m_container=new CProjectContainer(database,singleProject);    m_searchViewAction=CActionProxy.proxy(new CSearchAction(projectTree,m_container));    m_forwardAction=CActionProxy.proxy(new CResolveAllFunctionsSingleProjectAction(projectTree,m_database,m_projects[0]));    updateActions(singleProject);  } else {    m_addAddressSpaceAction=null;    m_searchViewAction=null;    m_forwardAction=null;  }}  }
class C{  public Stadium(){  super();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isFrom(WordToken token){  return token.equals(from);}  }
class C{  public static void addSnapshotAcl(String aclURL,SnapshotShareACLForm shareACL,String formAccessControlList){  String snapshotId=null;  String shareName=null;  if (StringUtils.isNotBlank(aclURL)) {    String[] parts=aclURL.split("/");    if (parts.length == 7) {      snapshotId=parts[3];      shareName=parts[5];    }  }  if (formAccessControlList == null || "".equals(formAccessControlList)) {    flash.error(MessagesUtils.get("resources.filesystem.share.acl.invalid.settings"),null);    listSnapshotAcl(snapshotId,shareName);  }  SnapshotCifsShareACLUpdateParams input=createSnapshotCifsShareAclParams(formAccessControlList);  ViPRCoreClient client=BourneUtil.getViprClient();  try {    client.fileSnapshots().updateShareACL(uri(snapshotId),shareName,input);  } catch (  ServiceErrorException e) {    flash.error(e.getMessage(),null);    listSnapshotAcl(snapshotId,shareName);  }  flash.success(MessagesUtils.get("resources.filesystem.share.acl.added"));  listSnapshotAcl(snapshotId,shareName);}  }
class C{  public TIntHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static double cuCimag(cuDoubleComplex x){  return x.y;}  }
class C{  public Builder propertyDependency(final String ifPresent,final String mustBePresent){  Set<String> dependencies=propertyDependencies.get(ifPresent);  if (dependencies == null) {    dependencies=new HashSet<String>(1);    propertyDependencies.put(ifPresent,dependencies);  }  dependencies.add(mustBePresent);  return this;}  }
class C{  protected double[] parseDoubleArray(String doubleArrayString){  String[] arrayOfNumbers=doubleArrayString.trim().split("\\s+");  double[] doubles=new double[arrayOfNumbers.length];  int i=0;  for (  String s : arrayOfNumbers) {    doubles[i++]=Double.parseDouble(s);  }  return doubles;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  private int monthLength(int month){  int year=internalGet(YEAR);  if (internalGetEra() == BCE) {    year=1 - year;  }  return monthLength(month,year);}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  LayoutInflater.from(getContext()).inflate(R.layout.likeview,this,true);  icon=(ImageView)findViewById(R.id.icon);  dotsView=(DotsView)findViewById(R.id.dots);  circleView=(CircleView)findViewById(R.id.circle);  final TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.LikeButton,defStyle,0);  iconSize=array.getDimensionPixelSize(R.styleable.LikeButton_icon_size,-1);  if (iconSize == -1)   iconSize=40;  String iconType=array.getString(R.styleable.LikeButton_icon_type);  likeDrawable=getDrawableFromResource(array,R.styleable.LikeButton_like_drawable);  if (likeDrawable != null)   setLikeDrawable(likeDrawable);  unLikeDrawable=getDrawableFromResource(array,R.styleable.LikeButton_unlike_drawable);  if (unLikeDrawable != null)   setUnlikeDrawable(unLikeDrawable);  if (iconType != null)   if (!iconType.isEmpty())   currentIcon=parseIconType(iconType);  circleStartColor=array.getColor(R.styleable.LikeButton_circle_start_color,0);  if (circleStartColor != 0)   circleView.setStartColor(circleStartColor);  circleEndColor=array.getColor(R.styleable.LikeButton_circle_end_color,0);  if (circleEndColor != 0)   circleView.setEndColor(circleEndColor);  dotPrimaryColor=array.getColor(R.styleable.LikeButton_dots_primary_color,0);  dotSecondaryColor=array.getColor(R.styleable.LikeButton_dots_secondary_color,0);  if (dotPrimaryColor != 0 && dotSecondaryColor != 0) {    dotsView.setColors(dotPrimaryColor,dotSecondaryColor);  }  if (likeDrawable == null && unLikeDrawable == null) {    if (currentIcon != null) {      setLikeDrawableRes(currentIcon.getOnIconResourceId());      setUnlikeDrawableRes(currentIcon.getOffIconResourceId());    } else {      currentIcon=parseIconType(IconType.Heart);      setLikeDrawableRes(currentIcon.getOnIconResourceId());      setUnlikeDrawableRes(currentIcon.getOffIconResourceId());    }  }  setEnabled(array.getBoolean(R.styleable.LikeButton_is_enabled,true));  Boolean status=array.getBoolean(R.styleable.LikeButton_liked,false);  setAnimationScaleFactor(array.getFloat(R.styleable.LikeButton_anim_scale_factor,3));  setLiked(status);  setOnClickListener(this);  array.recycle();}  }
class C{  private static void addRules(List<String> batchList,List<Rule> rulesToAdd){  String addStatement="INSERT INTO " + RULES_TABLE + " ("+ "RULE_NAME, "+ "DESCRIPTION, "+ "RULE) "+ "VALUES ('%s', '%s', '%s')";  for (  Rule rule : rulesToAdd) {    batchList.add(String.format(addStatement,rule.getName(),rule.getDescription(),rule.getMembershipRule()));  }}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public td addPopupCenter(boolean nowrap){  if (m_table == null)   return null;  td center=new td("popupCenter",AlignType.CENTER,AlignType.MIDDLE,nowrap);  center.setColSpan(2);  m_table.addElement(new tr().addElement(center));  return center;}  }
class C{  public Configurator useFpgaTime(){  timeSystemSupplier=null;  return this;}  }
class C{  public FloatMatrix sort(){  float array[]=toArray();  java.util.Arrays.sort(array);  return new FloatMatrix(rows,columns,array);}  }
class C{  public void moveRightAnim(){  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()]);  ObjectAnimator imageAAnimator=null;  if (imageA.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()]);  ObjectAnimator imageBAnimator=null;  if (imageB.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()]);  ObjectAnimator imageCAnimator=null;  if (imageC.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()]);  ObjectAnimator imageDAnimator=null;  if (imageD.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()]);  ObjectAnimator imageEAnimator=null;  if (imageE.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  setRightIndex();  AnimatorSet set=new AnimatorSet();  set.setDuration(mDuration);  set.playTogether(imageAAnimator,imageBAnimator,imageCAnimator,imageDAnimator,imageEAnimator);  set.start();}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T fromDBObject(Document input,Class<T> expected) throws Exception {  try {    if (input == null) {      return null;    }    final BasicDBList list=new BasicDBList();    list.addAll((List)input.get(OBJECT_FIELD));    return (T)objectMapper.readValue(list.toString(),expected);  } catch (  Exception e) {    throw new MongoException("Unknown error occurred converting BSON to object",e);  }}  }
class C{  public MaterializeBuilder withTranslucentNavigationBarProgrammatically(boolean translucentNavigationBarProgrammatically){  this.mTranslucentNavigationBarProgrammatically=translucentNavigationBarProgrammatically;  return this;}  }
class C{  public void addErrorMessage(String msg){  errorMessages.add(msg);}  }
class C{  public void draw(Graphics g,int xcoords[],int[] ycoords){  LinkedList<Point2D> points=new LinkedList<Point2D>();  for (int i=0; i < xcoords.length; i++)   points.add(new Point2D.Double(xcoords[i],ycoords[i]));  draw(g,points);}  }
class C{  public List<RAGefaehrdungsMassnahmenResult> findRAGefaehrdungsMassnahmenForZielobjekt(NZielobjekt zielobjekt,MbGefaehr gefaehrdung){  List result=new ArrayList();  NZielobjektDAO dao=new NZielobjektDAO();  Transaction transaction=dao.getSession().beginTransaction();  Query query=dao.getSession().createQuery(QUERY_RA_GEF_MNS_FOR_ZIELOBJEKT);  query.setParameter("zobId",zielobjekt.getId().getZobId());  query.setParameter("gefId",gefaehrdung.getId().getGefId());  result.addAll(query.list());  transaction.commit();  dao.getSession().close();  return result;}  }
class C{  private void configureBackground(){  final BackgroundManager backgroundManager=new ColorBlender(BACKGROUND_COLORS);  setBackgroundManager(backgroundManager);}  }
class C{  public static String encodeLongString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub("\"","\\\"",s);  return s;}  }
class C{  public void removeTargetInfo(final CoordinatorSerializable info,String id,String kind) throws CoordinatorClientException {  if (info == null) {    return;  }  if (getTargetInfoLock()) {    try {      if (!isClusterUpgradable()) {        throw APIException.serviceUnavailable.clusterStateNotStable();      }      ConfigurationImpl cfg=new ConfigurationImpl();      cfg.setId(id);      cfg.setKind(kind);      cfg.setConfig(TARGET_INFO,info.encodeAsString());      _coordinator.removeServiceConfiguration(cfg);      _log.info("Target info removed: {}",info);    } catch (    Exception e) {      throw SyssvcException.syssvcExceptions.coordinatorClientError("Failed to remove target info. " + e.getMessage());    } finally {      releaseTargetVersionLock();    }  } else {    throw SyssvcException.syssvcExceptions.coordinatorClientError("Failed to remove target info. Unable to obtain target lock");  }}  }
class C{  LambdaForm uncustomize(){  if (customized == null) {    return this;  }  assert (transformCache != null);  LambdaForm uncustomizedForm=(LambdaForm)transformCache;  if (COMPILE_THRESHOLD > 0 && isCompiled) {    uncustomizedForm.compileToBytecode();  }  return uncustomizedForm;}  }
class C{  public FixedContentTypeResolver(MediaType mediaTypes){  this.mediaTypes=Collections.singletonList(mediaTypes);}  }
class C{  public Extractors extract(String field,Extractor... extractor){  List<Extractor> extractors=extractorsMap.getOrDefault(field,new LinkedList<>());  Collections.addAll(extractors,extractor);  extractorsMap.put(field,extractors);  this.prevField=field;  return this;}  }
class C{  public T caseSwitchStatement(SwitchStatement object){  return null;}  }
class C{  private static boolean callsFunction(final Instruction instruction,final Function function){  for (  final Operand operand : instruction.getOperands()) {    final OperandExpression rootNode=operand.getRootNode();    if (hasFunctionCallReference(rootNode,function)) {      return true;    }  }  return false;}  }
class C{  private static void addInteresadosNoValidados(String entidad,String sessionID,List inter,Integer bookID,int registerID,FolderDataSession data) throws HibernateException {  int order=1;  FlushFdrInter flushFdrInter=null;  for (Iterator it=inter.iterator(); it.hasNext(); ) {    flushFdrInter=(FlushFdrInter)it.next();    int interId=flushFdrInter.getInterId();    String interName=flushFdrInter.getInterName();    int domId=0;    if (StringUtils.isNotBlank(interName)) {      try {        int id=DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForInter(new Integer(interId),entidad);        if (data.isCreate()) {          if (order == 1) {            data.setNewAttributeValue("fld9",flushFdrInter.getInterName());          }        } else {          if (order == 1) {            Object oldFld9=data.getOldAttributeValue("fld9");            data.setOldAttributeValue("fld9",flushFdrInter.getInterName());            data.changedPut(new Integer(9),new Object[]{oldFld9,data.getOldAttributeValue("fld9")});          }        }        DBEntityDAOFactory.getCurrentDBEntityDAO().insertScrRegInt(id,bookID.intValue(),registerID,interName,0,domId,order++,entidad);      } catch (      Exception e) {        log.debug("Error al insertar un tercero en AddInteresadosNoValidados ",e);      }    } else     if (interId == -1 && !data.isCreate()) {      data.setOldAttributeValue("fld9",null);    }  }}  }
class C{  public static SessionID parseSLORequest(Map<String,String> parameterMap) throws OIDCClientException {  Validate.notNull(parameterMap,"parameterMap");  String sessionIdString=parameterMap.get("sid");  if (StringUtils.isEmpty(sessionIdString)) {    throw new OIDCClientException("missing sid parameter");  }  return new SessionID(sessionIdString);}  }
class C{  public ExtensionInfo findImmutableExtensionByNumber(final Descriptor containingType,final int fieldNumber){  return immutableExtensionsByNumber.get(new DescriptorIntPair(containingType,fieldNumber));}  }
class C{  public static boolean verify(final ResourceIdentifier linkTarget,final Message msg){  if (!verifyStandardProperties(linkTarget,msg)) {    return false;  } else   if (msg.getMessageId() == null && msg.getCorrelationId() == null) {    LOG.trace("message has neither a message-id nor correlation-id");    return false;  } else   if (!hasValidAction(msg)) {    LOG.trace("message [{}] does not contain valid action property",msg.getMessageId());    return false;  } else   if (msg.getReplyTo() == null) {    LOG.trace("message [{}] contains no reply-to address",msg.getMessageId());    return false;  } else   if (msg.getBody() != null) {    if (msg.getContentType() == null || !msg.getContentType().startsWith("application/json")) {      LOG.trace("message [{}] content type is not JSON",msg.getMessageId());      return false;    } else     if (!(msg.getBody() instanceof AmqpValue)) {      LOG.trace("message [{}] contains non-AmqpValue section payload",msg.getMessageId());      return false;    } else {      return true;    }  } else {    return true;  }}  }
class C{  public void clearLearnedTable(IOFSwitch sw){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.clear();  }}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.JS_DOC_NODE;}  }
class C{  @Override public String createString(int length){  checkArgument(length > 0);  char[] password=new char[length];  for (int i=0; i < length; ++i) {    password[i]=alphabet.charAt(random.nextInt(alphabet.length()));  }  return new String(password);}  }
class C{  public KeyBuilder charCode(int charCode){  this.charCode=charCode;  return this;}  }
class C{  @Override public Connection connect(String url,Properties info) throws SQLException {  try {    if (!acceptsURL(url)) {      return null;    }    if (info == null) {      info=new Properties();    }    Properties prop=parseUrl(url,info);    return new JdbcConnection(url,prop);  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  public Date parse(String text) throws ParserException {  text=text.trim();  int length=text.length();  if (length == LONG_DATE_FORMAT.length()) {    return parse(text,LONG_DATE_FORMAT);  }  if (length == MEDIUM_DATE_FORMAT.length()) {    return parse(text,MEDIUM_DATE_FORMAT);  }  return parse(text,SHORT_DATE_FORMAT);}  }
class C{  public void testSerializationSelf() throws Exception {  TestUtils.initCertPathSSCertChain();  SerializationTest.verifySelf(TestUtils.rootCertificateSS);}  }
class C{  public static void index(){  checkCompleteAndLicensed();  if (!isLicensed()) {    license();  }  SetupForm setup=new SetupForm();  setup.loadDefaults();  render(setup);}  }
class C{  public void printInconsistentSamples(final PrintStream out,int minVariants,double minConcordance){  for (  TrioConcordance tc : mTrioCounts) {    if (tc != null) {      out.println(tc.toString());      tc.check(minVariants,minConcordance,out);    }  }}  }
class C{  protected double updateDistance(double currDist,double diff){  double result;  result=currDist;  result+=diff * diff;  return result;}  }
class C{  public AACPlayer(PlayerCallback playerCallback,int audioBufferCapacityMs,int decodeBufferCapacityMs){  setPlayerCallback(playerCallback);  setAudioBufferCapacityMs(audioBufferCapacityMs);  setDecodeBufferCapacityMs(decodeBufferCapacityMs);  decoder=createDecoder();}  }
class C{  private int timeoutWait(int currentTotalWaitTime,long poll,long maxTimeoutMillis,String timedOutMessage) throws TimeoutException {  long now=SystemClock.elapsedRealtime();  long end=now + poll;  while (now < end) {    try {      Thread.sleep(end - now);    } catch (    InterruptedException e) {    }    now=SystemClock.elapsedRealtime();  }  currentTotalWaitTime+=poll;  if (currentTotalWaitTime > maxTimeoutMillis) {    throw new TimeoutException(timedOutMessage);  }  return currentTotalWaitTime;}  }
class C{  public static void assertU(String message,String update){  checkUpdateU(message,update,true);}  }
class C{  @Interruptible public static void addFinalizer(Object object){  FinalizableProcessor.addCandidate(object);}  }
class C{  public void clearLog(){  getLog().undiscloseAllLogEntries();  setNeedsAttentionLevel(null);}  }
class C{  private void generateMovements_complete(MMovement movement){  tabbedPane.setSelectedIndex(1);  StringBuffer iText=new StringBuffer();  iText.append("<b>").append("").append("</b><br>").append(Msg.translate(Env.getCtx(),"DocumentNo") + " : " + movement.getDocumentNo()).append("<br>").append("");  info.setText(iText.toString());  confirmPanelGen.getOKButton().setEnabled(false);  if (ADialog.ask(m_WindowNo,this,"PrintShipments")) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    int retValue=ADialogDialog.A_CANCEL;    do {      MPrintFormat format=MPrintFormat.get(Env.getCtx(),MPrintFormat.getPrintFormat_ID("Inventory Move Hdr (Example)",MMovement.Table_ID,0),false);      MQuery query=new MQuery(MMovement.Table_Name);      query.addRestriction(MMovement.COLUMNNAME_M_Movement_ID,MQuery.EQUAL,movement.getM_Movement_ID());      PrintInfo info=new PrintInfo(MMovement.Table_Name,MMovement.Table_ID,movement.getM_Movement_ID());      ReportEngine re=new ReportEngine(Env.getCtx(),format,query,info);      re.print();      new Viewer(re);      ADialogDialog d=new ADialogDialog(m_frame,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode();    } while (retValue == ADialogDialog.A_CANCEL);    setCursor(Cursor.getDefaultCursor());  }  confirmPanelGen.getOKButton().setEnabled(true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotableExpression.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    return N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST;default :  return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer_ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100).asReadOnlyBuffer();  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbs,bbd);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public VerletPhysics3D addSpring(VerletSpring3D s){  if (getSpring(s.a,s.b) == null) {    springs.add(s);  }  return this;}  }
class C{  public synchronized void sort(String strColumn,int order) throws PageException {  sort(getColumn(strColumn),order);}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=e.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null) {    v.removeUpdate(e,alloc,f);  }}  }
class C{  public ConvertAnonymousDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.CONVERT_ANONYMOUS,project,description,comment,arguments,flags);}  }
class C{  public QueueMaxException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addStates(State[] s){  for (int i=0; i < s.length; i++)   states.addElement(s[i]);}  }
class C{  public AmqpMessage(Message message){  this(null,message,null);}  }
class C{  public boolean txPutEntry(final EntryEventImpl event,boolean ifNew,boolean requireOldValue,boolean checkResources,Object expectedOldValue){  LocalRegion region=event.getRegion();  if (checkResources) {    if (!MemoryThresholds.isLowMemoryExceptionDisabled()) {      region.checkIfAboveThreshold(event);    }  }  if (bridgeContext == null) {    bridgeContext=event.getContext();  }  if (hasSeenEvent(event)) {    return getRecordedResult(event);  }  TXEntryState tx=null;  boolean result=false;  try {    tx=txWriteEntry(region,event,ifNew,requireOldValue,expectedOldValue);    if (tx == TXState.ENTRY_EXISTS) {      result=false;    } else {      result=tx.basicPut(event,ifNew,isOriginRemoteForEvents());    }  } catch (  EntryNotFoundException e) {    result=false;  } finally {    recordEventAndResult(event,result);  }  return result;}  }
class C{  public synchronized void saveAsset() throws IOException {  if (savable == null) {    logger.log(Level.WARNING,"Trying to write asset failed, asset data null!\nImport failed?");    return;  }  final Savable savable=this.savable;  ProgressHandle progressHandle=ProgressHandle.createHandle("Saving File..");  progressHandle.start();  BinaryExporter exp=BinaryExporter.getInstance();  OutputStream out=null;  try {    if (saveExtension == null) {      out=getPrimaryFile().getOutputStream();    } else {      FileObject outFileObject=getPrimaryFile().getParent().getFileObject(getPrimaryFile().getName(),saveExtension);      if (outFileObject == null) {        outFileObject=getPrimaryFile().getParent().createData(getPrimaryFile().getName(),saveExtension);      }      out=outFileObject.getOutputStream();      outFileObject.getParent().refresh();    }    exp.save(savable,out);  }  finally {    if (out != null) {      out.close();    }  }  progressHandle.finish();  setModified(false);  logger.log(Level.INFO,"File {0} saved successfully",getPrimaryFile().getNameExt());}  }
class C{  public UF4(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public static <T>Object[][] createOptions(Multimap<String,T> multimap){  Object[][] ret=new Object[multimap.keySet().size()][];  int page=0;  for (  String key : multimap.keySet()) {    Collection<T> values=multimap.get(key);    ret[page]=new Object[values.size()];    int option=0;    for (    T ns : values) {      ret[page][option]=ns;      option++;    }    page++;  }  return ret;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public BaseSwitch(){  if (modelPackage == null) {    modelPackage=BasePackage.eINSTANCE;  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final MosaicDescriptor descriptor){  serializer.writeString(label,descriptor.description,MAX_DESCRIPTION_LENGTH);}  }
class C{  public List<IMessage> deleteAfter(IMessage message) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteAfter(indexOf(message));}  }
class C{  public static String md5(String str){  try {    final MessageDigest md=MessageDigest.getInstance("MD5");    final byte[] mdbytes=md.digest(str.getBytes(StandardCharsets.UTF_8));    final StringBuffer sb=new StringBuffer();    for (int i=0; i < mdbytes.length; i++) {      sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100,16).substring(1));    }    return sb.toString();  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("MD5 algorithm not supported.",ex);  }}  }
class C{  public static boolean invalidCaptcha(final String captcha,final HttpServletRequest request){  final HttpSession session=request.getSession(false);  if (null == session) {    return true;  }  if (Strings.isEmptyOrNull(captcha) || captcha.length() != CAPTCHA_LENGTH) {    return true;  }  final String storedCaptcha=(String)session.getAttribute(CaptchaProcessor.CAPTCHA);  if (null == storedCaptcha || !storedCaptcha.equals(captcha)) {    return true;  }  session.removeAttribute(CaptchaProcessor.CAPTCHA);  return false;}  }
class C{  public SnackbarBuilder message(CharSequence message){  this.message=message;  return this;}  }
class C{  public void success(JSONObject message){  try {    WritableMap writableMap=SQLitePluginConverter.jsonToReact(message);    successCallback.invoke(writableMap);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  public static Text valueOf(int i){  TextBuilder tb=new TextBuilder();  return tb.append(i).toText();}  }
class C{  public void testDeployWarDefinedWithMultipleContextPath() throws Exception {  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  war.setContext("/a/b");  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/a/b/index.jsp");  getLocalContainer().start();  PingUtils.assertPingTrue(warPingURL.getPath() + " not started","Sample page for testing",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse(warPingURL.getPath() + " not stopped",warPingURL,getLogger());}  }
class C{  private boolean clipTo(Rectangle destRect,Rectangle clip){  int x1=Math.max(destRect.x,clip.x);  int x2=Math.min(destRect.x + destRect.width,clip.x + clip.width);  int y1=Math.max(destRect.y,clip.y);  int y2=Math.min(destRect.y + destRect.height,clip.y + clip.height);  if (((x2 - x1) < 0) || ((y2 - y1) < 0)) {    destRect.width=-1;    destRect.height=-1;    return false;  } else {    destRect.x=x1;    destRect.y=y1;    destRect.width=x2 - x1;    destRect.height=y2 - y1;    return true;  }}  }
class C{  protected void collectRequiredProjects(IJavaProject proj,List<IJavaProject> res) throws JavaModelException {  if (!res.contains(proj)) {    res.add(proj);    IJavaModel model=proj.getJavaModel();    IClasspathEntry[] entries=proj.getRawClasspath();    for (int i=0; i < entries.length; i++) {      IClasspathEntry curr=entries[i];      if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {        IJavaProject ref=model.getJavaProject(curr.getPath().segment(0));        if (ref.exists()) {          collectRequiredProjects(ref,res);        }      }    }  }}  }
class C{  public void addExplicit(ObjectType type){  add(type,true);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  Preference pref;  SharedPreferences.Editor ed=prefs.edit();  String value=(resultCode == Activity.RESULT_OK) ? data.getData().toString() : null;  for (  String key : extKeys) {    pref=findPreference(key);    if (pref.hashCode() == requestCode) {      ed.putString(key,value);      pref.setSummary(value != null ? value : getString(R.string.select_extension));    }  }  ed.apply();}  }
class C{  private void updateStageTitle(){  stage.setTitle(title + (currApp.isPresent() ? " - " + currApp.get().getTitle() : ""));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.342 -0500",hash_original_method="6972D922287D01B71E2745DD45EB4146",hash_generated_method="5E9A9C7FD8A953A20EB598C331BCC83F") public final static boolean isReallyDialable(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+';}  }
class C{  BlockSelector(final TLCServer aTLCServer){  Assert.check(aTLCServer != null,"TLC found a null TLCServer");  tlcServer=aTLCServer;}  }
class C{  public DateTimeParser(){  this(DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:55.712 -0400",hash_original_method="DEE08FA5672D06831D622C34D52959EA",hash_generated_method="DEE08FA5672D06831D622C34D52959EA") boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mData && mData.length > 0 && DrmInfoRequest.isValidType(mInfoType));}  }
class C{  public ComponentBuilder append(String text,FormatRetention retention){  parts.add(current);  current=new TextComponent(current);  current.setText(text);  retain(retention);  return this;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public void load() throws DroidModelException {  if (!DroidUtils.isStringValid(getModelName()) || !DroidUtils.isStringValid(getPrimaryKey().toString())) {    Log.e(TAG,"Model is not initialized properly, not saving");    return;  }  String primaryKeyvalue=getPrimaryKeyValue();  if (this.rowid == -1 && !DroidUtils.isStringValid(primaryKeyvalue)) {    Log.e(TAG,"No primary key is set, not saving");    return;  }  DatabaseRequest dbRequest=new DatabaseRequest();  dbRequest.setTableName(getModelName());  dbRequest.setActionType(DatabaseRequest.Action.SELECT_ALL);  dbRequest.setModel(this);  if (DroidUtils.isStringValid(primaryKeyvalue)) {    dbRequest.setConditions(this.getPrimaryKey().toString() + EQUALS + DroidUtils.enclose(primaryKeyvalue));  } else {    dbRequest.setConditions(ROWID + EQUALS + DroidUtils.enclose(this.rowid.toString()));  }  ArrayList<HashMap<String,String>> dbResponse=DatabaseHandler.getInstance().processRequest(dbRequest.getRW(),dbRequest.getRawQuery());  if (dbResponse.size() != 1) {    Log.e(TAG,"Something gone wrong, not loading");    return;  }  HashMap<String,String> values=dbResponse.get(0);  if (this.rowid != -1) {    if (this.rowid != new Integer(values.get(ROWID)))     throw new DroidModelException();  }  try {    setModelValues(values);  } catch (  IllegalAccessException iae) {    iae.printStackTrace();    Log.e(TAG,"Unable to set values, something gone wrong");  }  if (values.containsKey(ROWID) && values.get(ROWID) != null) {    this.rowid=new Integer(values.get(ROWID));  }}  }
class C{  public XNetMessage(int len){  super(len);  if (len > 15) {    log.error("Invalid length in ctor: " + len);    throw new IllegalArgumentException("Invalid length in ctor: " + len);  }  setBinary(true);  setRetries(_nRetries);  setTimeout(XNetMessageTimeout);  _nDataChars=len;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, colXCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow, leftCol, rightCol;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {      showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          dataType=WhiteboxRasterBase.DataType.FLOAT;        } else {          showFeedback("The type of data contained in the field " + "can not be mapped into grid cells. Choose a " + "numerical field. The record ID will be used "+ "instead.");          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      if (backgroundValue == noData) {        output.setNoDataValue(noData);      }    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        data=reader.nextRecord();        value=Double.valueOf(data[assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        box=new BoundingBox();        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        for (i=startingPointInPart; i < endingPointInPart; i++) {          if (geometry[i][0] < box.getMinX()) {            box.setMinX(geometry[i][0]);          }          if (geometry[i][0] > box.getMaxX()) {            box.setMaxX(geometry[i][0]);          }          if (geometry[i][1] < box.getMinY()) {            box.setMinY(geometry[i][1]);          }          if (geometry[i][1] > box.getMaxY()) {            box.setMaxY(geometry[i][1]);          }        }        topRow=output.getRowFromYCoordinate(box.getMaxY());        bottomRow=output.getRowFromYCoordinate(box.getMinY());        leftCol=output.getColumnFromXCoordinate(box.getMinX());        rightCol=output.getColumnFromXCoordinate(box.getMaxX());        for (row=topRow; row <= bottomRow; row++) {          rowYCoord=output.getYCoordinateFromRow(row);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {              y1=geometry[i][1];              y2=geometry[i + 1][1];              if (y2 != y1) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                col=output.getColumnFromXCoordinate(xPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }        for (col=leftCol; col <= rightCol; col++) {          colXCoord=output.getXCoordinateFromColumn(col);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {              x1=geometry[i][0];              x2=geometry[i + 1][0];              if (x1 != x2) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                row=output.getRowFromYCoordinate(yPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    do {      cell=pq.poll();      output.setValue(cell.row,cell.col,cell.z);      j++;      if (j % 1000 == 0) {        if (cancelOp) {          cancelOperation();          return;        }        updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));      }    } while (pq.size() > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public GsonBuilder disableInnerClassSerialization(){  excluder=excluder.disableInnerClassSerialization();  return this;}  }
class C{  private void checkPorts(int preferredPort,int minPort,int maxPort) throws IllegalArgumentException {  if (!NetworkUtils.isValidPortNumber(minPort) || !NetworkUtils.isValidPortNumber(maxPort)) {    throw new IllegalArgumentException("minPort (" + minPort + ") and maxPort ("+ maxPort+ ") "+ "should be integers between 1024 and 65535.");  }  if (minPort > maxPort) {    throw new IllegalArgumentException("minPort (" + minPort + ") should be less than or "+ "equal to maxPort ("+ maxPort+ ")");  }  if (minPort > preferredPort || preferredPort > maxPort) {    throw new IllegalArgumentException("preferredPort (" + preferredPort + ") must be between minPort ("+ minPort+ ") and maxPort ("+ maxPort+ ")");  }}  }
class C{  public boolean probe(final CacheKey key){  String resourceId=null;  try {synchronized (mLock) {      List<String> resourceIds=CacheKeyUtil.getResourceIds(key);      for (int i=0; i < resourceIds.size(); i++) {        resourceId=resourceIds.get(i);        if (mStorage.touch(resourceId,key)) {          mResourceIndex.add(resourceId);          return true;        }      }      return false;    }  } catch (  IOException e) {    SettableCacheEvent cacheEvent=SettableCacheEvent.obtain().setCacheKey(key).setResourceId(resourceId).setException(e);    mCacheEventListener.onReadException(cacheEvent);    cacheEvent.recycle();    return false;  }}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public static XMLReader createXMLReader(boolean validate) throws SAXException {  return createXMLReader(validate,false);}  }
class C{  public static void forceExecutorShutdown(long secondsToWait) throws InterruptedException {  if (EventProcessorHost.weOwnExecutor && (EventProcessorHost.executorService != null)) {    EventProcessorHost.executorService.shutdown();    EventProcessorHost.executorService.awaitTermination(secondsToWait,TimeUnit.SECONDS);  }}  }
class C{  public long elapsedTime(){  return this.endTime - this.startTime;}  }
class C{  public void addRunConfiguration(Project project,String name,String label,String runTarget,String debugTarget){  try {    EditableProperties properties=new EditableProperties(true);    properties.setProperty("$label",label);    properties.setProperty("$target.run",runTarget);    properties.setProperty("$target.debug",debugTarget);    J2SEProjectConfigurations.createConfigurationFiles(project,name,properties,null);  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }catch (  IllegalArgumentException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  private void handleSelectorDimmerClick(int idx,String[] levelNames){  listener.onSelectorDimmerClick(idx,levelNames);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),IOUtil.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),IOUtil.US_ASCII));}  }
class C{  public static void printClientId(ClientId clientId,Node parentNode,QName nodeQName) throws Exception {  if (clientId == null) {    return;  }  XroadClientIdentifierType type=IdentifierTypeConverter.printClientId(clientId);  JAXBElement<XroadClientIdentifierType> jaxbElement=new JAXBElement<XroadClientIdentifierType>(nodeQName,XroadClientIdentifierType.class,type);  getMarshaller().marshal(jaxbElement,parentNode);}  }
class C{  public String resource(){  return resource;}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarBackground(context,g,x,y,w,h);}  }
class C{  private static int NewIntArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewIntArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    int[] newArray=new int[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected void updateImageCounts(String imageId) throws ExternalException {  try {    com.vmware.xenon.common.Operation result=xenonClient.postToBroadcastQueryService(buildDatastoreSetQuery());    ImageService.State patchState=new ImageService.State();    patchState.replicatedImageDatastore=1;    patchState.replicatedDatastore=1;    patchState.totalImageDatastore=0;    patchState.totalDatastore=0;    List<DatastoreService.State> documentLinks=QueryTaskUtils.getBroadcastQueryDocuments(DatastoreService.State.class,result);    patchState.totalDatastore=documentLinks.size();    for (    DatastoreService.State state : documentLinks) {      if (state.isImageDatastore) {        patchState.totalImageDatastore++;      }    }    xenonClient.patch(ImageServiceFactory.SELF_LINK + "/" + imageId,patchState);  } catch (  DocumentNotFoundException e) {    throw new ImageNotFoundException(Type.ID,imageId);  }}  }
class C{  public static String[] copy(String[] array){  if (array != null) {    String[] copy=new String[array.length];    System.arraycopy(array,0,copy,0,array.length);    return copy;  }  return null;}  }
class C{  @Override public void onViewRecycled(RecyclerView.ViewHolder holder){  mFastAdapter.onViewRecycled(holder);}  }
class C{  public static boolean isAssignable(Class<?> lhsType,Class<?> rhsType){  Assert.notNull(lhsType,"Left-hand side type must not be null");  Assert.notNull(rhsType,"Right-hand side type must not be null");  if (lhsType.isAssignableFrom(rhsType)) {    return true;  }  if (lhsType.isPrimitive()) {    Class resolvedPrimitive=primitiveWrapperTypeMap.get(rhsType);    if (resolvedPrimitive != null && lhsType.equals(resolvedPrimitive)) {      return true;    }  } else {    Class resolvedWrapper=primitiveTypeToWrapperMap.get(rhsType);    if (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper)) {      return true;    }  }  return false;}  }
class C{  public Response addAdmin(String roomName,String jid){  return restClient.post("chatrooms/" + roomName + "/admins/"+ jid,null,new HashMap<String,String>());}  }
class C{  protected int determineKind(File underlyingResource){  return IPackageFragmentRoot.K_BINARY;}  }
class C{  private void putBytesPositiveToIntegers(byte[] byteValues){  int bytesLen=byteValues.length;  int highBytes=bytesLen & 3;  numberLength=(bytesLen >> 2) + ((highBytes == 0) ? 0 : 1);  digits=new int[numberLength];  int i=0;  while (bytesLen > highBytes) {    digits[i++]=(byteValues[--bytesLen] & 0xFF) | (byteValues[--bytesLen] & 0xFF) << 8 | (byteValues[--bytesLen] & 0xFF) << 16 | (byteValues[--bytesLen] & 0xFF) << 24;  }  for (int j=0; j < bytesLen; j++) {    digits[i]=(digits[i] << 8) | (byteValues[j] & 0xFF);  }}  }
class C{  public void addCategory(Category category){  if (categories == null) {    categories=new ArrayList<Category>();  }  categories.add(category);}  }
class C{  public Logo(InputStream in,ImageType type) throws IOException {  super(in,type);}  }
class C{  private Set<ClusterNode> replicatedUnstableDataNodes(GridCacheContext<?,?> cctx){  assert cctx.isReplicated() : cctx.name() + " must be replicated";  String space=cctx.name();  Set<ClusterNode> dataNodes=new HashSet<>(dataNodes(space,NONE));  if (dataNodes.isEmpty())   throw new CacheException("Failed to find data nodes for cache: " + space);  for (int p=0, parts=cctx.affinity().partitions(); p < parts; p++) {    List<ClusterNode> owners=cctx.topology().owners(p);    if (F.isEmpty(owners))     return null;    dataNodes.retainAll(owners);    if (dataNodes.isEmpty())     return null;  }  return dataNodes;}  }
class C{  private boolean isValid(){  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    String paramName=((Parameter)it.next()).getKey();    if (!SREG_FIELDS.contains(paramName)) {      _log.warn("Invalid parameter name in SReg response: " + paramName);      return false;    }  }  return true;}  }
class C{  public static String toJvmName(String classname){  return Descriptor.toJvmName(classname);}  }
class C{  @Override public boolean isItemValidForSlot(int aIndex,ItemStack aStack){  return canAccessData() && mMetaTileEntity.isItemValidForSlot(aIndex,aStack);}  }
