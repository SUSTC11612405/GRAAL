class C{  public void drawPalette(int[] colors,int selectedColor){  drawPalette(colors,selectedColor,null);}  }
class C{  public static void assertEquals(String message,Attribute expected,Attribute actual,boolean compareDefaultValues){  Assert.assertEquals(message + " (attribute name)",expected.getName(),actual.getName());  Assert.assertEquals(message + " (attribute type of attribute '" + expected.getName()+ "': expected '"+ Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(expected.getValueType())+ "' but was '"+ Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(actual.getValueType())+ "')",expected.getValueType(),actual.getValueType());  Assert.assertEquals(message + " (attribute block type of attribute '" + expected.getName()+ ": expected '"+ Ontology.ATTRIBUTE_BLOCK_TYPE.mapIndex(expected.getBlockType())+ "' but was '"+ Ontology.ATTRIBUTE_BLOCK_TYPE.mapIndex(actual.getBlockType())+ "')",expected.getBlockType(),actual.getBlockType());  if (compareDefaultValues) {    assertEquals(message + " (default value of attribute '" + expected.getName()+ ")",expected.getDefault(),actual.getDefault(),DELTA);  }  if (expected.isNominal()) {    assertEqualsIgnoreOrder(message + " (nominal mapping of attribute '" + expected.getName()+ ")",expected.getMapping(),actual.getMapping());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Object prompt(Context cx,Scriptable thisObj,Object[] args,Function funObj){  WindowWrapper ww=(WindowWrapper)thisObj;  Window window=ww.window;  Object result;switch (args.length) {case 0:    result="";  break;case 1:String message=(String)Context.jsToJava(args[0],String.class);result=window.prompt(message);break;default :message=(String)Context.jsToJava(args[0],String.class);String defVal=(String)Context.jsToJava(args[1],String.class);result=window.prompt(message,defVal);break;}if (result == null) {return null;}return Context.toObject(result,thisObj);}  }
class C{  public static String crossValidateModel(String clustererString,Instances data,int numFolds,String[] options,Random random) throws Exception {  Clusterer clusterer=null;  String[] savedOptions=null;  double CvAv=0.0;  StringBuffer CvString=new StringBuffer();  if (options != null) {    savedOptions=new String[options.length];  }  data=new Instances(data);  try {    clusterer=(Clusterer)Class.forName(clustererString).newInstance();  } catch (  Exception e) {    throw new Exception("Can't find class with name " + clustererString + '.');  }  if (!(clusterer instanceof DensityBasedClusterer)) {    throw new Exception(clustererString + " must be a distrinbution " + "clusterer.");  }  if (options != null) {    System.arraycopy(options,0,savedOptions,0,options.length);  }  if (clusterer instanceof OptionHandler) {    try {      ((OptionHandler)clusterer).setOptions(savedOptions);      Utils.checkForRemainingOptions(savedOptions);    } catch (    Exception e) {      throw new Exception("Can't parse given options in " + "cross-validation!");    }  }  CvAv=crossValidateModel((DensityBasedClusterer)clusterer,data,numFolds,random);  CvString.append("\n" + numFolds + " fold CV Log Likelihood: "+ Utils.doubleToString(CvAv,6,4)+ "\n");  return CvString.toString();}  }
class C{  public static LRIcon my(final String name){  return new LRIcon(my_(name));}  }
class C{  public boolean addAuthIndex(String userName,String indexName){  if (userName == null || userName.equals("") || indexName == null || indexName.equals("")) {    return false;  }  userName=userName.toLowerCase();  indexName=indexName.toLowerCase();  if (userName.equals("root")) {    return false;  }  UserData user=getUser(userName);  if (user == null) {    return false;  }  Set<String> indexFilters=user.getIndexFilters();  String[] indexNames=indexName.split(",");  for (  String index : indexNames) {    index=index.trim();    if (index == null || index.equals("")) {      continue;    }    if (index.charAt(0) != '/') {      index="/" + index;    }    if (index.equals("/*")) {      continue;    }    indexFilters.add(index);  }  user.setFilters(indexFilters);  return putUser(user);}  }
class C{  private Provider createFromSimpleObject(SimpleObject simpleObject){  checkRequiredFields(simpleObject,REQUIRED_FIELDS);  String fullName=simpleObject.get(GIVEN_NAME) + " " + simpleObject.get(FAMILY_NAME);  Person person=new Person();  PersonName personName=new PersonName();  personName.setGivenName((String)simpleObject.get(GIVEN_NAME));  personName.setFamilyName((String)simpleObject.get(FAMILY_NAME));  person.addName(personName);  person.setGender(UNKNOWN);  personService.savePerson(person);  User user=new User();  user.setPerson(person);  user.setName(fullName);  user.setUsername((String)simpleObject.get(USER_NAME));  userService.saveUser(user,(String)simpleObject.get(PASSWORD));  Provider provider=new Provider();  provider.setPerson(person);  provider.setName(fullName);  providerService.saveProvider(provider);  log.info("Created user " + fullName);  return provider;}  }
class C{  public static void decideChangeZone(final Entity entity,final int x,final int y){  final StendhalRPZone origin=entity.getZone();  final int entity_x=x + origin.getX();  final int entity_y=y + origin.getY();  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZoneAt(origin.getLevel(),entity_x,entity_y,entity);  if (zone != null) {    final int nx=entity_x - zone.getX();    final int ny=entity_y - zone.getY();    if (logger.isDebugEnabled()) {      logger.debug("Placing " + entity.getTitle() + " at "+ zone.getName()+ "["+ nx+ ","+ ny+ "]");    }    if (!placeat(zone,entity,nx,ny)) {      logger.warn("Could not place " + entity.getTitle() + " at "+ zone.getName()+ "["+ nx+ ","+ ny+ "]");    }  } else {    logger.warn("Unable to choose a new zone for entity: " + entity.getTitle() + " at ("+ entity_x+ ","+ entity_y+ ") source was "+ origin.getName()+ " at ("+ x+ ", "+ y+ ")");  }}  }
class C{  public void stopDeceleration(){  mDecelerationAngularVelocity=0.f;}  }
class C{  private static void refreshViews(String key){synchronized (sViews) {    if (sViews.get(key) != null) {      for (      Set<LiveView> views : sViews.get(key).values()) {        for (        LiveView view : views) {          view.refresh(key);        }      }    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") public void sendPacket(byte[] packet,int repeats){  if (repeats != 1) {    log.warn("Only single transmissions currently available");  }  int[] msgAsInt=MakePacket.createStream(packet);  if (msgAsInt[0] == 0) {    log.error("Failed to convert packet to transmitable form: " + java.util.Arrays.toString(packet));    return;  }  byte[] msg=new byte[msgAsInt[0]];  for (int i=0; i < msg.length; i++) {    msg[i]=(byte)(msgAsInt[i + 1] & 0xFF);  }  try {    if (ostream != null) {      if (log.isDebugEnabled()) {        String f="write message: ";        for (int i=0; i < msg.length; i++) {          f=f + Integer.toHexString(0xFF & msg[i]) + " ";        }        log.debug(f);      }      ostream.write(msg);    } else {      log.warn("sendMessage: no connection established");    }  } catch (  Exception e) {    log.warn("sendMessage: Exception: " + e.toString());  }}  }
class C{  public static void addFiles(final Project findBugsProject,File clzDir,final Pattern pat){  if (clzDir.isDirectory()) {    clzDir.listFiles(new FileCollector(pat,findBugsProject));  }}  }
class C{  @Override public Uri[] createBeamUris(NfcEvent nfcEvent){  Log.i(TAG,"Beam event in progress; createBeamUris() called.");  Uri photoUri=Uri.parse(CONTENT_BASE_URI + FILENAME);  Log.i(TAG,"Sending URI: " + photoUri);  return new Uri[]{photoUri};}  }
class C{  public Object parse(Map params,URL url){  return parseURL(url,params);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Entry processor example started.");    try (IgniteCache<Integer,Integer> cache=ignite.getOrCreateCache(CACHE_NAME)){      populateEntriesWithInvoke(cache);      incrementEntriesWithInvokeAll(cache);    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  @Override public String toString(){  return String.format("BreakpointManager (Managing %d Breakpoints)",breakpointManager.getNumberOfBreakpoints(BreakpointType.REGULAR));}  }
class C{  public SCW(){  this(0.5,Mode.SCWI,true);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public SimpleFragmentIntent<F> putExtras(SimpleFragmentIntent<?> src){  if (src.extras != null) {    if (extras == null) {      extras=new Bundle(src.extras);    } else {      extras.putAll(src.extras);    }  }  return this;}  }
class C{  public String doubleMetaphone(String value,boolean alternate){  value=cleanInput(value);  if (value == null) {    return null;  }  boolean slavoGermanic=isSlavoGermanic(value);  int index=isSilentStart(value) ? 1 : 0;  DoubleMetaphoneResult result=new DoubleMetaphoneResult(this.getMaxCodeLen());  while (!result.isComplete() && index <= value.length() - 1) {switch (value.charAt(index)) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':      index=handleAEIOUY(result,index);    break;case 'B':  result.append('P');index=charAt(value,index + 1) == 'B' ? index + 2 : index + 1;break;case '\u00C7':result.append('S');index++;break;case 'C':index=handleC(value,result,index);break;case 'D':index=handleD(value,result,index);break;case 'F':result.append('F');index=charAt(value,index + 1) == 'F' ? index + 2 : index + 1;break;case 'G':index=handleG(value,result,index,slavoGermanic);break;case 'H':index=handleH(value,result,index);break;case 'J':index=handleJ(value,result,index,slavoGermanic);break;case 'K':result.append('K');index=charAt(value,index + 1) == 'K' ? index + 2 : index + 1;break;case 'L':index=handleL(value,result,index);break;case 'M':result.append('M');index=conditionM0(value,index) ? index + 2 : index + 1;break;case 'N':result.append('N');index=charAt(value,index + 1) == 'N' ? index + 2 : index + 1;break;case '\u00D1':result.append('N');index++;break;case 'P':index=handleP(value,result,index);break;case 'Q':result.append('K');index=charAt(value,index + 1) == 'Q' ? index + 2 : index + 1;break;case 'R':index=handleR(value,result,index,slavoGermanic);break;case 'S':index=handleS(value,result,index,slavoGermanic);break;case 'T':index=handleT(value,result,index);break;case 'V':result.append('F');index=charAt(value,index + 1) == 'V' ? index + 2 : index + 1;break;case 'W':index=handleW(value,result,index);break;case 'X':index=handleX(value,result,index);break;case 'Z':index=handleZ(value,result,index,slavoGermanic);break;default :index++;break;}}return alternate ? result.getAlternate() : result.getPrimary();}  }
class C{  public UnitVarianceTransform(){}  }
class C{  public String metaLocation(){  return metaLocation;}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public static long generateZeroMask(final int lsb,final int width,final OperandSize size){  Preconditions.checkNotNull(size,"Size argument can not be null");  Preconditions.checkPositionIndex(lsb,size.getBitSize() - 1);  Preconditions.checkArgument(width >= 1);  Preconditions.checkPositionIndex((lsb + width) - 1,size.getBitSize());  long mask=getAllBitsMask(size);  final long msb=(lsb + width) - 1;  final long xorBit=1;  for (long i=lsb; i <= msb; i++) {    mask=(mask ^ (xorBit << i));  }  return mask & getAllBitsMask(size);}  }
class C{  @Override public void startHandshake() throws IOException {  if (appDataIS == null) {    throw new IOException("Socket is not connected.");  }  if (socket_was_closed) {    throw new IOException("Socket has already been closed.");  }  if (!handshake_started) {    handshake_started=true;    if (sslParameters.getUseClientMode()) {      if (logger != null) {        logger.println("SSLSocketImpl: CLIENT");      }      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      if (logger != null) {        logger.println("SSLSocketImpl: SERVER");      }      handshakeProtocol=new ServerHandshakeImpl(this);    }    alertProtocol=new AlertProtocol();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,new SSLStreamedInput(input),appDataIS.dataPoint);  }  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake");  }  handshakeProtocol.start();  doHandshake();  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake: END");  }}  }
class C{  protected boolean scrollLineEnd(TextView widget,Spannable buffer){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    widget.scrollTo(maxScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static LatLon greatCircleEndPosition(LatLon p,double greatCircleAzimuthRadians,double pathLengthRadians){  if (p == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return greatCircleEndPosition(p,Angle.fromRadians(greatCircleAzimuthRadians),Angle.fromRadians(pathLengthRadians));}  }
class C{  public void deleteAppWidgetId(int appWidgetId){synchronized (mViews) {    mViews.remove(appWidgetId);    try {      sService.deleteAppWidgetId(appWidgetId,mContext.getUserId());    } catch (    RemoteException e) {      throw new RuntimeException("system server dead?",e);    }  }}  }
class C{  public T caseFunctionDeclaration(FunctionDeclaration object){  return null;}  }
class C{  public static <T>T switchNode(final INaviViewNode node,final INodeTypeCallback<T> callback){  Preconditions.checkNotNull(node,"IE00121: Node argument can not be null");  Preconditions.checkNotNull(callback,"IE00970: Callback argument can not be null");  if (node instanceof INaviCodeNode) {    return callback.handle((INaviCodeNode)node);  } else   if (node instanceof INaviFunctionNode) {    return callback.handle((INaviFunctionNode)node);  } else   if (node instanceof INaviGroupNode) {    return callback.handle((INaviGroupNode)node);  } else   if (node instanceof INaviTextNode) {    return callback.handle((INaviTextNode)node);  } else {    throw new IllegalStateException("IE00021: Unknown node type " + node.getClass());  }}  }
class C{  protected void fireContentsChanged(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.CONTENTS_CHANGED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).contentsChanged(e);    }  }}  }
class C{  public PurchasableEntity(Class<? extends Entity> clazz,long cost,ItemStack render,boolean lead){  this.product=render;  this.eClass=clazz;  this.cost=cost;  this.lead=lead;  this.resource=clazz.getSimpleName().toLowerCase(Locale.ENGLISH);}  }
class C{  public E element(){  return getFirst();}  }
class C{  private boolean shouldUseShortName(Generator gen,Type type){  requireNonNull(gen);  requireNonNull(type);  final DependencyManager mgr=gen.getDependencyMgr();  if (mgr.isIgnored(type.getName())) {    return true;  }  if (mgr.isLoaded(type.getName())) {    return true;  }  final Optional<String> current=mgr.getCurrentPackage();  return current.isPresent() && type.getName().startsWith(current.get());}  }
class C{  void deleteFiles(){  boolean needsDestroy=this.deleted.compareAndSet(false,true);  if (needsDestroy) {    this.getOplogSet().removeOverflow(this);    deleteFile();  }}  }
class C{  public static Set<Sequence> defaultSeeds(){  List<Object> seeds=new ArrayList<>(primitiveSeeds);  return SeedSequences.objectsToSeeds(seeds);}  }
class C{  final public SyntaxTreeNode Theorem() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Theorem");  expecting="THEOREM, PROPOSITION";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case THEOREM:    t=jj_consume_token(THEOREM);  break;case PROPOSITION:t=jj_consume_token(PROPOSITION);break;default :jj_la1[54]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, Assume-Prove or Expression";if (jj_2_23(2)) {tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();if (jj_2_24(3)) {if (getToken(1).kind == ASSUME || getToken(1).kind == BOXASSUME) {} else {jj_consume_token(-1);throw new ParseException();}tn=AssumeProve();} else if (jj_2_25(1)) {tn=Expression();} else {jj_consume_token(-1);throw new ParseException();}addHeir(tn);if (beginsProof(getToken(1))) {tn=Proof();addHeir(tn);} else {;}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Theorem,sn);}throw new Error("Missing return statement in function");}  }
class C{  public double kincaid(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofSyllables=this.syllableCounter.countSyllables(words);  return kincaid(words.size(),nrofSyllables,nrofSentences);}  }
class C{  public AnnotationMirror division(AnnotatedTypeMirror lht,AnnotatedTypeMirror rht){  if (UnitsRelationsTools.hasNoUnits(lht)) {    if (UnitsRelationsTools.hasSpecificUnit(rht,millisecond)) {      return kilohertz;    } else     if (UnitsRelationsTools.hasSpecificUnit(rht,second)) {      return hertz;    }  }  return null;}  }
class C{  public void deleteAttribute(boolean multiple){  if (!isPanelSelected()) {    return;  }  if (multiple) {    getCurrentPanel().deleteAttributes();  } else {    getCurrentPanel().deleteAttribute();  }}  }
class C{  public Weeks plus(int weeks){  if (weeks == 0) {    return this;  }  return Weeks.weeks(FieldUtils.safeAdd(getValue(),weeks));}  }
class C{  protected AbstractDescendantSelector(Selector ancestor,SimpleSelector simple){  ancestorSelector=ancestor;  simpleSelector=simple;}  }
class C{  public static void plotResults(DataSequence orig,DataSequence predicted,ArrayList<Anomaly> anomalyList,Properties config){  GUIUtils gui=new GUIUtils("EGADS GUI",orig,predicted,anomalyList,config);  gui.pack();  gui.setVisible(true);  JFrame frame=new JFrame("EGADS GUI");  JOptionPane.showMessageDialog(frame,"Click OK to continue");  gui.setVisible(false);}  }
class C{  protected void adjustForLength(int length){  int size=this.getLattice().size() - 2;  if (size > length) {    LOG.warn("sentence {} too long {}, truncating to length {}",id(),size,length);    String[] tokens=source.split("\\s+");    source=tokens[0];    for (int i=1; i < length; i++)     source+=" " + tokens[i];    sourceLattice=null;    if (target != null) {      target="";    }  }}  }
class C{  public boolean matches(String domain){  if (pattern != null) {    return pattern.matcher(domain).matches();  }  return this.domain.equals(domain);}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public void connect(NetworkInterface anotherInterface){  if (isScanning() && anotherInterface.getHost().isRadioActive() && isWithinRange(anotherInterface)&& !isConnected(anotherInterface)&& (this != anotherInterface)) {    int conSpeed=anotherInterface.getTransmitSpeed(this);    if (conSpeed > this.transmitSpeed) {      conSpeed=this.transmitSpeed;    }    Connection con=new CBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface,conSpeed);    connect(con,anotherInterface);  }}  }
class C{  public <T>boolean unset(ConfigurationKey<T> key){  if (key == null) {    throw new IllegalArgumentException("key must not be null!");  }  return this.configMap.remove(key) != null;}  }
class C{  public void removeAttackReqeust(){  if (originalSoapAction != null && attackRequest != null) {    attackRequest.getOperation().setAction(originalSoapAction);    originalSoapAction=null;  }  if (attackRequest != null) {    attackRequest.getOperation().removeRequest(attackRequest);    attackRequest=null;  }}  }
class C{  private static boolean isServerProblem(Object error){  return (error instanceof ServerError) || (error instanceof AuthFailureError);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.612 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  Vertex target=output.mostConscious(Primitive.TARGET);  String replyTo=target.mostConscious(Primitive.WORD).getData().toString();  if ((replyTo.toLowerCase().indexOf("noreply") != -1) || (replyTo.toLowerCase().indexOf("donotreply") != -1)) {    return;  }  String text=null;  Vertex response=output.getRelationship(Primitive.INPUT);  Vertex input=output.mostConscious(Primitive.QUESTION);  Vertex question=input.getRelationship(Primitive.INPUT);  if ((question != null) && response.instanceOf(Primitive.PARAGRAPH) && question.instanceOf(Primitive.PARAGRAPH)) {    StringWriter writer=new StringWriter();    List<Vertex> sentences=response.orderedRelations(Primitive.SENTENCE);    List<Vertex> questions=question.orderedRelations(Primitive.SENTENCE);    int index=0;    for (    Vertex sentence : sentences) {      Vertex questionSentence=null;      while (((index < questions.size()) && (questionSentence == null || !questionSentence.instanceOf(Primitive.QUESTION)))) {        questionSentence=questions.get(index);        index++;      }      if (questionSentence != null) {        writer.write("\n");        String questionText=questionSentence.printString();        if (questionText.contains("\n")) {          TextStream stream=new TextStream(questionText);          while (!stream.atEnd()) {            writer.write("> ");            writer.write(stream.nextLine());          }        } else {          writer.write("> ");          writer.write(questionText);        }        writer.write("\n");      }      writer.write(sentence.printString());      writer.write("\n");    }    text=writer.toString();  } else {    text=printInput(output);  }  StringWriter writer=new StringWriter();  writer.write(text);  writer.write("\n");  writer.write("\n");  writer.write(getSignature());  if (input != null) {    String replyText=printInput(input);    writer.write("\n");    writer.write("\n");    TextStream stream=new TextStream(replyText);    int max=0;    while (!stream.atEnd() && (max < 64)) {      String line=stream.nextLine();      writer.write(">");      if ((line.length() > 0) && (line.charAt(0) != '>')) {        writer.write(" ");      }      writer.write(line);    }    text=writer.toString();  }  String subject=output.mostConscious(output.getNetwork().createVertex(Primitive.TOPIC)).getData().toString();  if (!subject.startsWith("RE:") && !subject.startsWith("Re:")) {    subject="RE: " + subject;  }  sendEmail(text,subject,replyTo);}  }
class C{  public void text(String str,float x1,float y1,float x2,float y2){  if (textFont == null) {    defaultFontOrDeath("text");  }  float hradius, vradius;switch (rectMode) {case CORNER:    x2+=x1;  y2+=y1;break;case RADIUS:hradius=x2;vradius=y2;x2=x1 + hradius;y2=y1 + vradius;x1-=hradius;y1-=vradius;break;case CENTER:hradius=x2 / 2.0f;vradius=y2 / 2.0f;x2=x1 + hradius;y2=y1 + vradius;x1-=hradius;y1-=vradius;}if (x2 < x1) {float temp=x1;x1=x2;x2=temp;}if (y2 < y1) {float temp=y1;y1=y2;y2=temp;}float boxWidth=x2 - x1;float spaceWidth=textWidth(' ');if (textBreakStart == null) {textBreakStart=new int[20];textBreakStop=new int[20];}textBreakCount=0;int length=str.length();if (length + 1 > textBuffer.length) {textBuffer=new char[length + 1];}str.getChars(0,length,textBuffer,0);textBuffer[length++]='\n';int sentenceStart=0;for (int i=0; i < length; i++) {if (textBuffer[i] == '\n') {boolean legit=textSentence(textBuffer,sentenceStart,i,boxWidth,spaceWidth);if (!legit) break;sentenceStart=i + 1;}}float lineX=x1;if (textAlign == CENTER) {lineX=lineX + boxWidth / 2f;} else if (textAlign == RIGHT) {lineX=x2;}float boxHeight=y2 - y1;float topAndBottom=textAscent() + textDescent();int lineFitCount=1 + PApplet.floor((boxHeight - topAndBottom) / textLeading);int lineCount=Math.min(textBreakCount,lineFitCount);if (textAlignY == CENTER) {float lineHigh=textAscent() + textLeading * (lineCount - 1);float y=y1 + textAscent() + (boxHeight - lineHigh) / 2;for (int i=0; i < lineCount; i++) {textLineAlignImpl(textBuffer,textBreakStart[i],textBreakStop[i],lineX,y);y+=textLeading;}} else if (textAlignY == BOTTOM) {float y=y2 - textDescent() - textLeading * (lineCount - 1);for (int i=0; i < lineCount; i++) {textLineAlignImpl(textBuffer,textBreakStart[i],textBreakStop[i],lineX,y);y+=textLeading;}} else {float y=y1 + textAscent();for (int i=0; i < lineCount; i++) {textLineAlignImpl(textBuffer,textBreakStart[i],textBreakStop[i],lineX,y);y+=textLeading;}}}  }
class C{  public void withVoidTransaction(@NotNull Propagation propagation,@NotNull Isolation isolation,@NotNull VoidTransactionCallback callback){  withTransaction(propagation,isolation,fromVoidCallback(callback));}  }
class C{  public void addFocusListener(FocusListener l){}  }
class C{  public static LikeExpression notLike(String propertyName,String value){  return new LikeExpression(getPropExpr(propertyName),new ConstantExpression(value),true);}  }
class C{  static MediaType createApplicationType(String subtype){  return create(APPLICATION_TYPE,subtype);}  }
class C{  public boolean checkForDangerousProps(){  final Map<String,String> dangerousProps=new HashMap<String,String>();  dangerousProps.put("ro.debuggable","1");  dangerousProps.put("ro.secure","0");  boolean result=false;  String[] lines=propsReader();  for (  String line : lines) {    for (    String key : dangerousProps.keySet()) {      if (line.contains(key)) {        String badValue=dangerousProps.get(key);        badValue="[" + badValue + "]";        if (line.contains(badValue)) {          QLog.v(key + " = " + badValue+ " detected!");          result=true;        }      }    }  }  return result;}  }
class C{  public static String toString(Reader input) throws IOException {  StringWriter sw=new StringWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public void reset(){  npoints=0;  bounds=null;  path=new GeneralPath();  closedPath=null;}  }
class C{  public Mul4(){  super("mul4",4);}  }
class C{  public static final Geo[] hull(Geo[] geos){  return hull(geos,0);}  }
class C{  public void addValue(final double value){  if (dataSetSize == dataSet.length) {    final int newLength=(int)(GROWTH_RATE * dataSetSize);    final double[] newDataSet=new double[newLength];    java.lang.System.arraycopy(dataSet,0,newDataSet,0,dataSetSize);    dataSet=newDataSet;  }  dataSet[dataSetSize]=value;  updateStatsWithNewValue(value);  ++dataSetSize;}  }
class C{  private int appendHeader(int field){switch (field) {case PduHeaders.MMS_VERSION:    appendOctet(field);  int version=mPduHeader.getOctet(field);if (0 == version) {  appendShortInteger(PduHeaders.CURRENT_MMS_VERSION);} else {  appendShortInteger(version);}break;case PduHeaders.MESSAGE_ID:case PduHeaders.TRANSACTION_ID:byte[] textString=mPduHeader.getTextString(field);if (null == textString) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendTextString(textString);break;case PduHeaders.TO:case PduHeaders.BCC:case PduHeaders.CC:EncodedStringValue[] addr=mPduHeader.getEncodedStringValues(field);if (null == addr) {return PDU_COMPOSE_FIELD_NOT_SET;}EncodedStringValue temp;for (int i=0; i < addr.length; i++) {temp=appendAddressType(addr[i]);if (temp == null) {return PDU_COMPOSE_CONTENT_ERROR;}appendOctet(field);appendEncodedString(temp);}break;case PduHeaders.FROM:appendOctet(field);EncodedStringValue from=mPduHeader.getEncodedStringValue(field);if ((from == null) || TextUtils.isEmpty(from.getString()) || new String(from.getTextString()).equals(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR)) {append(1);append(PduHeaders.FROM_INSERT_ADDRESS_TOKEN);} else {mStack.newbuf();PositionMarker fstart=mStack.mark();append(PduHeaders.FROM_ADDRESS_PRESENT_TOKEN);temp=appendAddressType(from);if (temp == null) {return PDU_COMPOSE_CONTENT_ERROR;}appendEncodedString(temp);int flen=fstart.getLength();mStack.pop();appendValueLength(flen);mStack.copy();}break;case PduHeaders.READ_STATUS:case PduHeaders.STATUS:case PduHeaders.REPORT_ALLOWED:case PduHeaders.PRIORITY:case PduHeaders.DELIVERY_REPORT:case PduHeaders.READ_REPORT:int octet=mPduHeader.getOctet(field);if (0 == octet) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendOctet(octet);break;case PduHeaders.DATE:long date=mPduHeader.getLongInteger(field);if (-1 == date) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendDateValue(date);break;case PduHeaders.SUBJECT:EncodedStringValue enString=mPduHeader.getEncodedStringValue(field);if (null == enString) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);appendEncodedString(enString);break;case PduHeaders.MESSAGE_CLASS:byte[] messageClass=mPduHeader.getTextString(field);if (null == messageClass) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_AUTO);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_PERSONAL);} else if (Arrays.equals(messageClass,PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes())) {appendOctet(PduHeaders.MESSAGE_CLASS_INFORMATIONAL);} else {appendTextString(messageClass);}break;case PduHeaders.EXPIRY:long expiry=mPduHeader.getLongInteger(field);if (-1 == expiry) {return PDU_COMPOSE_FIELD_NOT_SET;}appendOctet(field);mStack.newbuf();PositionMarker expiryStart=mStack.mark();append(PduHeaders.VALUE_RELATIVE_TOKEN);appendLongInteger(expiry);int expiryLength=expiryStart.getLength();mStack.pop();appendValueLength(expiryLength);mStack.copy();break;default :return PDU_COMPOSE_FIELD_NOT_SUPPORTED;}return PDU_COMPOSE_SUCCESS;}  }
class C{  public static String convertParametrizedType(Type type,ParameterizedType parameterizedType,Type rawType){  if (List.class.equals(rawType)) {    return "Array<" + convertType(parameterizedType.getActualTypeArguments()[0]) + ">";  } else   if (Map.class.equals(rawType)) {    return "Map<" + convertType(parameterizedType.getActualTypeArguments()[0]) + ","+ convertType(parameterizedType.getActualTypeArguments()[1])+ ">";  } else {    throw new IllegalArgumentException("Invalid type" + type);  }}  }
class C{  public void execute(MethodInfo method,int pos,CodeIterator iter,Frame frame,Subroutine subroutine) throws BadBytecode {  this.lastPos=pos;  int opcode=iter.byteAt(pos);switch (opcode) {case NOP:    break;case ACONST_NULL:  frame.push(Type.UNINIT);break;case ICONST_M1:case ICONST_0:case ICONST_1:case ICONST_2:case ICONST_3:case ICONST_4:case ICONST_5:frame.push(Type.INTEGER);break;case LCONST_0:case LCONST_1:frame.push(Type.LONG);frame.push(Type.TOP);break;case FCONST_0:case FCONST_1:case FCONST_2:frame.push(Type.FLOAT);break;case DCONST_0:case DCONST_1:frame.push(Type.DOUBLE);frame.push(Type.TOP);break;case BIPUSH:case SIPUSH:frame.push(Type.INTEGER);break;case LDC:evalLDC(iter.byteAt(pos + 1),frame);break;case LDC_W:case LDC2_W:evalLDC(iter.u16bitAt(pos + 1),frame);break;case ILOAD:evalLoad(Type.INTEGER,iter.byteAt(pos + 1),frame,subroutine);break;case LLOAD:evalLoad(Type.LONG,iter.byteAt(pos + 1),frame,subroutine);break;case FLOAD:evalLoad(Type.FLOAT,iter.byteAt(pos + 1),frame,subroutine);break;case DLOAD:evalLoad(Type.DOUBLE,iter.byteAt(pos + 1),frame,subroutine);break;case ALOAD:evalLoad(Type.OBJECT,iter.byteAt(pos + 1),frame,subroutine);break;case ILOAD_0:case ILOAD_1:case ILOAD_2:case ILOAD_3:evalLoad(Type.INTEGER,opcode - ILOAD_0,frame,subroutine);break;case LLOAD_0:case LLOAD_1:case LLOAD_2:case LLOAD_3:evalLoad(Type.LONG,opcode - LLOAD_0,frame,subroutine);break;case FLOAD_0:case FLOAD_1:case FLOAD_2:case FLOAD_3:evalLoad(Type.FLOAT,opcode - FLOAD_0,frame,subroutine);break;case DLOAD_0:case DLOAD_1:case DLOAD_2:case DLOAD_3:evalLoad(Type.DOUBLE,opcode - DLOAD_0,frame,subroutine);break;case ALOAD_0:case ALOAD_1:case ALOAD_2:case ALOAD_3:evalLoad(Type.OBJECT,opcode - ALOAD_0,frame,subroutine);break;case IALOAD:evalArrayLoad(Type.INTEGER,frame);break;case LALOAD:evalArrayLoad(Type.LONG,frame);break;case FALOAD:evalArrayLoad(Type.FLOAT,frame);break;case DALOAD:evalArrayLoad(Type.DOUBLE,frame);break;case AALOAD:evalArrayLoad(Type.OBJECT,frame);break;case BALOAD:case CALOAD:case SALOAD:evalArrayLoad(Type.INTEGER,frame);break;case ISTORE:evalStore(Type.INTEGER,iter.byteAt(pos + 1),frame,subroutine);break;case LSTORE:evalStore(Type.LONG,iter.byteAt(pos + 1),frame,subroutine);break;case FSTORE:evalStore(Type.FLOAT,iter.byteAt(pos + 1),frame,subroutine);break;case DSTORE:evalStore(Type.DOUBLE,iter.byteAt(pos + 1),frame,subroutine);break;case ASTORE:evalStore(Type.OBJECT,iter.byteAt(pos + 1),frame,subroutine);break;case ISTORE_0:case ISTORE_1:case ISTORE_2:case ISTORE_3:evalStore(Type.INTEGER,opcode - ISTORE_0,frame,subroutine);break;case LSTORE_0:case LSTORE_1:case LSTORE_2:case LSTORE_3:evalStore(Type.LONG,opcode - LSTORE_0,frame,subroutine);break;case FSTORE_0:case FSTORE_1:case FSTORE_2:case FSTORE_3:evalStore(Type.FLOAT,opcode - FSTORE_0,frame,subroutine);break;case DSTORE_0:case DSTORE_1:case DSTORE_2:case DSTORE_3:evalStore(Type.DOUBLE,opcode - DSTORE_0,frame,subroutine);break;case ASTORE_0:case ASTORE_1:case ASTORE_2:case ASTORE_3:evalStore(Type.OBJECT,opcode - ASTORE_0,frame,subroutine);break;case IASTORE:evalArrayStore(Type.INTEGER,frame);break;case LASTORE:evalArrayStore(Type.LONG,frame);break;case FASTORE:evalArrayStore(Type.FLOAT,frame);break;case DASTORE:evalArrayStore(Type.DOUBLE,frame);break;case AASTORE:evalArrayStore(Type.OBJECT,frame);break;case BASTORE:case CASTORE:case SASTORE:evalArrayStore(Type.INTEGER,frame);break;case POP:if (frame.pop() == Type.TOP) throw new BadBytecode("POP can not be used with a category 2 value, pos = " + pos);break;case POP2:frame.pop();frame.pop();break;case DUP:{Type type=frame.peek();if (type == Type.TOP) throw new BadBytecode("DUP can not be used with a category 2 value, pos = " + pos);frame.push(frame.peek());break;}case DUP_X1:case DUP_X2:{Type type=frame.peek();if (type == Type.TOP) throw new BadBytecode("DUP can not be used with a category 2 value, pos = " + pos);int end=frame.getTopIndex();int insert=end - (opcode - DUP_X1) - 1;frame.push(type);while (end > insert) {frame.setStack(end,frame.getStack(end - 1));end--;}frame.setStack(insert,type);break;}case DUP2:frame.push(frame.getStack(frame.getTopIndex() - 1));frame.push(frame.getStack(frame.getTopIndex() - 1));break;case DUP2_X1:case DUP2_X2:{int end=frame.getTopIndex();int insert=end - (opcode - DUP2_X1) - 1;Type type1=frame.getStack(frame.getTopIndex() - 1);Type type2=frame.peek();frame.push(type1);frame.push(type2);while (end > insert) {frame.setStack(end,frame.getStack(end - 2));end--;}frame.setStack(insert,type2);frame.setStack(insert - 1,type1);break;}case SWAP:{Type type1=frame.pop();Type type2=frame.pop();if (type1.getSize() == 2 || type2.getSize() == 2) throw new BadBytecode("Swap can not be used with category 2 values, pos = " + pos);frame.push(type1);frame.push(type2);break;}case IADD:evalBinaryMath(Type.INTEGER,frame);break;case LADD:evalBinaryMath(Type.LONG,frame);break;case FADD:evalBinaryMath(Type.FLOAT,frame);break;case DADD:evalBinaryMath(Type.DOUBLE,frame);break;case ISUB:evalBinaryMath(Type.INTEGER,frame);break;case LSUB:evalBinaryMath(Type.LONG,frame);break;case FSUB:evalBinaryMath(Type.FLOAT,frame);break;case DSUB:evalBinaryMath(Type.DOUBLE,frame);break;case IMUL:evalBinaryMath(Type.INTEGER,frame);break;case LMUL:evalBinaryMath(Type.LONG,frame);break;case FMUL:evalBinaryMath(Type.FLOAT,frame);break;case DMUL:evalBinaryMath(Type.DOUBLE,frame);break;case IDIV:evalBinaryMath(Type.INTEGER,frame);break;case LDIV:evalBinaryMath(Type.LONG,frame);break;case FDIV:evalBinaryMath(Type.FLOAT,frame);break;case DDIV:evalBinaryMath(Type.DOUBLE,frame);break;case IREM:evalBinaryMath(Type.INTEGER,frame);break;case LREM:evalBinaryMath(Type.LONG,frame);break;case FREM:evalBinaryMath(Type.FLOAT,frame);break;case DREM:evalBinaryMath(Type.DOUBLE,frame);break;case INEG:verifyAssignable(Type.INTEGER,simplePeek(frame));break;case LNEG:verifyAssignable(Type.LONG,simplePeek(frame));break;case FNEG:verifyAssignable(Type.FLOAT,simplePeek(frame));break;case DNEG:verifyAssignable(Type.DOUBLE,simplePeek(frame));break;case ISHL:evalShift(Type.INTEGER,frame);break;case LSHL:evalShift(Type.LONG,frame);break;case ISHR:evalShift(Type.INTEGER,frame);break;case LSHR:evalShift(Type.LONG,frame);break;case IUSHR:evalShift(Type.INTEGER,frame);break;case LUSHR:evalShift(Type.LONG,frame);break;case IAND:evalBinaryMath(Type.INTEGER,frame);break;case LAND:evalBinaryMath(Type.LONG,frame);break;case IOR:evalBinaryMath(Type.INTEGER,frame);break;case LOR:evalBinaryMath(Type.LONG,frame);break;case IXOR:evalBinaryMath(Type.INTEGER,frame);break;case LXOR:evalBinaryMath(Type.LONG,frame);break;case IINC:{int index=iter.byteAt(pos + 1);verifyAssignable(Type.INTEGER,frame.getLocal(index));access(index,Type.INTEGER,subroutine);break;}case I2L:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.LONG,frame);break;case I2F:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.FLOAT,frame);break;case I2D:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case L2I:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.INTEGER,frame);break;case L2F:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.FLOAT,frame);break;case L2D:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case F2I:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.INTEGER,frame);break;case F2L:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.LONG,frame);break;case F2D:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case D2I:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.INTEGER,frame);break;case D2L:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.LONG,frame);break;case D2F:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.FLOAT,frame);break;case I2B:case I2C:case I2S:verifyAssignable(Type.INTEGER,frame.peek());break;case LCMP:verifyAssignable(Type.LONG,simplePop(frame));verifyAssignable(Type.LONG,simplePop(frame));frame.push(Type.INTEGER);break;case FCMPL:case FCMPG:verifyAssignable(Type.FLOAT,simplePop(frame));verifyAssignable(Type.FLOAT,simplePop(frame));frame.push(Type.INTEGER);break;case DCMPL:case DCMPG:verifyAssignable(Type.DOUBLE,simplePop(frame));verifyAssignable(Type.DOUBLE,simplePop(frame));frame.push(Type.INTEGER);break;case IFEQ:case IFNE:case IFLT:case IFGE:case IFGT:case IFLE:verifyAssignable(Type.INTEGER,simplePop(frame));break;case IF_ICMPEQ:case IF_ICMPNE:case IF_ICMPLT:case IF_ICMPGE:case IF_ICMPGT:case IF_ICMPLE:verifyAssignable(Type.INTEGER,simplePop(frame));verifyAssignable(Type.INTEGER,simplePop(frame));break;case IF_ACMPEQ:case IF_ACMPNE:verifyAssignable(Type.OBJECT,simplePop(frame));verifyAssignable(Type.OBJECT,simplePop(frame));break;case GOTO:break;case JSR:frame.push(Type.RETURN_ADDRESS);break;case RET:verifyAssignable(Type.RETURN_ADDRESS,frame.getLocal(iter.byteAt(pos + 1)));break;case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:verifyAssignable(Type.INTEGER,simplePop(frame));break;case LRETURN:verifyAssignable(Type.LONG,simplePop(frame));break;case FRETURN:verifyAssignable(Type.FLOAT,simplePop(frame));break;case DRETURN:verifyAssignable(Type.DOUBLE,simplePop(frame));break;case ARETURN:try {CtClass returnType=Descriptor.getReturnType(method.getDescriptor(),classPool);verifyAssignable(Type.get(returnType),simplePop(frame));} catch (NotFoundException e) {throw new RuntimeException(e);}break;case RETURN:break;case GETSTATIC:evalGetField(opcode,iter.u16bitAt(pos + 1),frame);break;case PUTSTATIC:evalPutField(opcode,iter.u16bitAt(pos + 1),frame);break;case GETFIELD:evalGetField(opcode,iter.u16bitAt(pos + 1),frame);break;case PUTFIELD:evalPutField(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEVIRTUAL:case INVOKESPECIAL:case INVOKESTATIC:evalInvokeMethod(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEINTERFACE:evalInvokeIntfMethod(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEDYNAMIC:evalInvokeDynamic(opcode,iter.u16bitAt(pos + 1),frame);break;case NEW:frame.push(resolveClassInfo(constPool.getClassInfo(iter.u16bitAt(pos + 1))));break;case NEWARRAY:evalNewArray(pos,iter,frame);break;case ANEWARRAY:evalNewObjectArray(pos,iter,frame);break;case ARRAYLENGTH:{Type array=simplePop(frame);if (!array.isArray() && array != Type.UNINIT) throw new BadBytecode("Array length passed a non-array [pos = " + pos + "]: "+ array);frame.push(Type.INTEGER);break;}case ATHROW:verifyAssignable(THROWABLE_TYPE,simplePop(frame));break;case CHECKCAST:verifyAssignable(Type.OBJECT,simplePop(frame));frame.push(typeFromDesc(constPool.getClassInfoByDescriptor(iter.u16bitAt(pos + 1))));break;case INSTANCEOF:verifyAssignable(Type.OBJECT,simplePop(frame));frame.push(Type.INTEGER);break;case MONITORENTER:case MONITOREXIT:verifyAssignable(Type.OBJECT,simplePop(frame));break;case WIDE:evalWide(pos,iter,frame,subroutine);break;case MULTIANEWARRAY:evalNewObjectArray(pos,iter,frame);break;case IFNULL:case IFNONNULL:verifyAssignable(Type.OBJECT,simplePop(frame));break;case GOTO_W:break;case JSR_W:frame.push(Type.RETURN_ADDRESS);break;}}  }
class C{  public void cancelPairing(){  for (  DeviceService service : services.values()) {    service.cancelPairing();  }}  }
class C{  public void addBehavior(String behavior){  if (null == this.behaviors) {    this.behaviors=new ArrayList<String>(5);  }  this.behaviors.add(behavior);}  }
class C{  public Position(){  lineNumber=1;  columnNumber=0;}  }
class C{  private RefreshNotificationType(String type,String msg){  this.type=type;  this.msg=msg;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Quick.sort(a);  show(a);  assert isSorted(a);  StdRandom.shuffle(a);  StdOut.println();  for (int i=0; i < a.length; i++) {    String ith=(String)Quick.select(a,i);    StdOut.println(ith);  }}  }
class C{  private static boolean isSorted(Comparable[] a){  for (int i=1; i < a.length; i++)   if (less(a[i],a[i - 1]))   return false;  return true;}  }
class C{  protected SVGGraphicsElement(){}  }
class C{  @Override public void updateBlob(String columnLabel,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void java_lang_System_arraycopy(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable srcElm=helper.arrayElementOf(params[0]);  ReferenceVariable dstElm=helper.arrayElementOf(params[2]);  ReferenceVariable tmpVar=helper.tempLocalVariable(method);  helper.assign(tmpVar,srcElm);  helper.assign(dstElm,tmpVar);}  }
class C{  protected void updateFallState(double par1,boolean par3){  final int i=MathHelper.floor_double(this.posX);  final int j=MathHelper.floor_double(this.posY);  final int k=MathHelper.floor_double(this.posZ);  if (par3) {    if (this.fallDistance > 3.0F) {      this.fall(this.fallDistance);      if (!this.worldObj.isRemote && !this.isDead) {        this.setDead();        int l;        for (l=0; l < 3; ++l) {          this.func_145778_a(GrowthCraftBamboo.blocks.bambooBlock.getItem(),1,0.0F);        }        for (l=0; l < 2; ++l) {          this.func_145778_a(GrowthCraftBamboo.items.bamboo.getItem(),1,0.0F);        }      }      this.fallDistance=0.0F;    }  } else   if (this.worldObj.getBlock(i,j - 1,k).getMaterial() != Material.water && par1 < 0.0D) {    this.fallDistance=(float)((double)this.fallDistance - par1);  }}  }
class C{  public boolean isPDF(){  return m_name.toLowerCase().endsWith(".pdf");}  }
class C{  protected TargetImpl(){  super();}  }
class C{  private void saveAccount(){  AccountsSource accountsSource=new AccountsSource(getApplicationContext());  accountsSource.wOpen();  try {    if (isEditing) {      account.setUrlShaarli(this.urlShaarli);      account.setUsername(this.username);      account.setPassword(this.password);      account.setBasicAuthUsername(this.basicAuthUsername);      account.setBasicAuthPassword(this.basicAuthPassword);      account.setShortName(this.shortName);      account.setValidateCert(this.isValidateCert);      accountsSource.editAccount(account);    } else {      this.account=accountsSource.createAccount(this.urlShaarli,this.username,this.password,this.basicAuthUsername,this.basicAuthPassword,this.shortName,this.isValidateCert);    }  } catch (  Exception e) {    Log.e("ENCRYPTION ERROR",e.getMessage());  } finally {    accountsSource.close();  }  if (this.isDefaultAccount) {    SharedPreferences prefs=getSharedPreferences(getString(R.string.params),MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    editor.putLong(getString(R.string.p_default_account),this.account.getId());    editor.apply();  }}  }
class C{  public void spaceVertical(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new spaceVerticalAction(nodes));  }  int nMinY=-1;  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,(int)(nMinY + iNode * (nMaxY - nMinY) / (nodes.size() - 1.0)));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  CaptureDeviceInput conn=getCapDevInput(stack);  if (conn != null)   conn.setSaturation(v);  return null;}  }
class C{  public void testAttributeWithMissing(){  ((MergeManyValues)m_Filter).setAttributeIndex("5");  ((MergeManyValues)m_Filter).setMergeValueRange("1,2");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  int mergedIndex=-1;  for (int i=0; i < result.numInstances(); i++) {    if (m_Instances.instance(i).isMissing(4)) {      assertTrue("Missing in input should give missing in result",result.instance(i).isMissing(4));    } else     if ((m_Instances.instance(i).value(4) == 0) || (m_Instances.instance(i).value(4) == 1)) {      if (mergedIndex == -1) {        mergedIndex=(int)result.instance(i).value(4);      } else {        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(4));      }    }  }}  }
class C{  public static void debug(Logger log,String msg,IoBuffer buf){}  }
class C{  public static SimpleName[] findByNode(ASTNode root,SimpleName name){  IBinding binding=name.resolveBinding();  if (binding != null) {    return findByBinding(root,binding);  }  SimpleName[] names=findByProblems(root,name);  if (names != null) {    return names;  }  int parentKind=name.getParent().getNodeType();  if (parentKind == ASTNode.LABELED_STATEMENT || parentKind == ASTNode.BREAK_STATEMENT || parentKind == ASTNode.CONTINUE_STATEMENT) {    ArrayList<SimpleName> res=new ArrayList<SimpleName>();    LabelFinder nodeFinder=new LabelFinder(name,res);    root.accept(nodeFinder);    return res.toArray(new SimpleName[res.size()]);  }  return new SimpleName[]{name};}  }
class C{  public static <T>LazyPSetX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public static boolean isPropertyArray(String name){  return name.trim().endsWith("[]");}  }
class C{  public void test_webapp_structure_favicon() throws Exception {  doGET(m_serviceURL + "/html/favicon.ico");}  }
class C{  public T caseRegularExpressionBody(RegularExpressionBody object){  return null;}  }
class C{  public QuartzSchedulerResources(){}  }
class C{  public static Attribute createAttribute(Attribute attribute,String functionName){  Attribute result=(Attribute)attribute.clone();  if (functionName == null) {    result.setName(attribute.getName());  } else {    result.setName(functionName + "(" + attribute.getName()+ ")");    result.setConstruction(functionName + "(" + attribute.getName()+ ")");  }  return result;}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(){  return new ConcurrentHashMap<K,V>();}  }
class C{  public CModuleUpdater(final ZyGraph graph){  m_graph=graph;}  }
class C{  public Matrix4 scale(float scaleX,float scaleY,float scaleZ){  tmp[M00]=scaleX;  tmp[M01]=0;  tmp[M02]=0;  tmp[M03]=0;  tmp[M10]=0;  tmp[M11]=scaleY;  tmp[M12]=0;  tmp[M13]=0;  tmp[M20]=0;  tmp[M21]=0;  tmp[M22]=scaleZ;  tmp[M23]=0;  tmp[M30]=0;  tmp[M31]=0;  tmp[M32]=0;  tmp[M33]=1;  mul(val,tmp);  return this;}  }
class C{  public CreateRequest(String path,LwM2mObjectInstance instance){  this(null,new LwM2mPath(path),instance.getId(),instance.getResources().values().toArray((new LwM2mResource[instance.getResources().size()])));}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  private double classifyInstance(Instance example) throws Exception {  boolean passedAllTests=true;  for (Enumeration<Test> e=new WekaEnumeration<Test>(m_RuleList); passedAllTests && e.hasMoreElements(); ) {    Test test=e.nextElement();    passedAllTests=test.passesTest(example);  }  if (passedAllTests) {    return m_ClassValue;  } else {    return -1.0;  }}  }
class C{  public void sample(String input,String output,int numPosts) throws IOException {  Random random=new Random();  JsonUtil J=new JsonUtil();  Map<String,List<String>> userposts=new Hashtable<String,List<String>>();  RecordReader reader=new RecordReader(input);  while (reader.next()) {    Post p=J.fromJson(reader.value(),Post.class);    String userid=p.getUserId();    List<String> posts=userposts.get(userid);    if (posts == null) {      posts=new ArrayList<String>();      userposts.put(userid,posts);    }    posts.add(reader.value());    if (reader.numRead() % 1000 == 0) {      LOG.info("read: " + reader.numRead());    }  }  LOG.info("total " + reader.numRead() + " posts and "+ userposts.size()+ "users");  reader.close();  RecordWriter writer=new RecordWriter(output);  int total=0;  for (  Entry<String,List<String>> e : userposts.entrySet()) {    List<String> posts=e.getValue();    int n=0;    while (n < numPosts && posts.size() > 0) {      writer.add(posts.remove(random.nextInt(posts.size())));      n++;    }    total+=n;  }  LOG.info("write " + total + " posts.");  writer.close();}  }
class C{  @Category(FlakyTest.class) @Test public void testMultipleManagersInSameProcess() throws Exception {  MembershipManager m1=null, m2=null;  Locator l=null;  int mcastPort=AvailablePortHelper.getRandomAvailableUDPPort();  try {    int port=AvailablePortHelper.getRandomAvailableTCPPort();    InetAddress localHost=SocketCreator.getLocalHost();    l=InternalLocator.startLocator(port,new File(""),null,null,null,localHost,false,new Properties(),true,false,null,false);    Properties nonDefault=new Properties();    nonDefault.put(DISABLE_TCP,"true");    nonDefault.put(MCAST_PORT,String.valueOf(mcastPort));    nonDefault.put(LOG_FILE,"");    nonDefault.put(LOG_LEVEL,"fine");    nonDefault.put(GROUPS,"red, blue");    nonDefault.put(MEMBER_TIMEOUT,"2000");    nonDefault.put(LOCATORS,localHost.getHostName() + '[' + port+ ']');    DistributionConfigImpl config=new DistributionConfigImpl(nonDefault);    RemoteTransportConfig transport=new RemoteTransportConfig(config,DistributionManager.NORMAL_DM_TYPE);    try {      System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY,"true");      DistributedMembershipListener listener1=mock(DistributedMembershipListener.class);      DMStats stats1=mock(DMStats.class);      System.out.println("creating 1st membership manager");      m1=MemberFactory.newMembershipManager(listener1,config,transport,stats1);      m1.startEventProcessing();    }  finally {      System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);    }    DistributedMembershipListener listener2=mock(DistributedMembershipListener.class);    DMStats stats2=mock(DMStats.class);    System.out.println("creating 2nd membership manager");    m2=MemberFactory.newMembershipManager(listener2,config,transport,stats2);    m2.startEventProcessing();    System.out.println("waiting for views to stabilize");    JoinLeave jl1=((GMSMembershipManager)m1).getServices().getJoinLeave();    JoinLeave jl2=((GMSMembershipManager)m2).getServices().getJoinLeave();    long giveUp=System.currentTimeMillis() + 15000;    for (; ; ) {      try {        assertTrue("view = " + jl2.getView(),jl2.getView().size() == 2);        assertTrue("view = " + jl1.getView(),jl1.getView().size() == 2);        assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));        assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());        break;      } catch (      AssertionError e) {        if (System.currentTimeMillis() > giveUp) {          throw e;        }      }    }    System.out.println("testing multicast availability");    assertTrue(m1.testMulticast());    System.out.println("multicasting SerialAckedMessage from m1 to m2");    SerialAckedMessage msg=new SerialAckedMessage();    msg.setRecipient(m2.getLocalMember());    msg.setMulticast(true);    m1.send(new InternalDistributedMember[]{m2.getLocalMember()},msg,null);    giveUp=System.currentTimeMillis() + 5000;    boolean verified=false;    Throwable problem=null;    while (giveUp > System.currentTimeMillis()) {      try {        verify(listener2).messageReceived(isA(SerialAckedMessage.class));        verified=true;        break;      } catch (      Error e) {        problem=e;        Thread.sleep(500);      }    }    if (!verified) {      if (problem != null) {        problem.printStackTrace();      }      fail("Expected a multicast message to be received");    }    Thread.sleep(4000l);    m2.shutdown();    assertTrue(!m2.isConnected());    assertTrue(m1.getView().size() == 1);  }  finally {    if (m2 != null) {      m2.shutdown();    }    if (m1 != null) {      m1.shutdown();    }    if (l != null) {      l.stop();    }  }}  }
class C{  protected double variance(double[][] s,double[] sS,double[] sumOfWeights){  double var=0;  for (int i=0; i < s.length; i++) {    if (sumOfWeights[i] > 0) {      var+=sS[i] - ((s[i][0] * s[i][0]) / (double)sumOfWeights[i]);    }  }  return var;}  }
class C{  public static void requireWrapper(Writer writer,Module mod) throws IOException {  writer.write("var $$req$ = require; require = (typeof $$ceylon$require == 'undefined') ? $$req$ : function() { return $$ceylon$require('" + JsCompiler.scriptPath(mod) + "', $$req$, Array.prototype.slice.call(arguments)); }\n");}  }
class C{  public void onDataChange(String key,T value){}  }
class C{  public void insert(Collection geoms){  for (Iterator i=geoms.iterator(); i.hasNext(); ) {    Geometry geom=(Geometry)i.next();    index.insert(geom.getEnvelopeInternal(),PreparedGeometryFactory.prepare(geom));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element addrNode;  Attr addrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  addrNode=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",addrNode);  addrAttr=addrNode.getAttributeNode("emp:domestic");{    boolean success=false;    try {      addrAttr.setPrefix("xmlns");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public StockQuoteService(){  stockQuotes.put("IBM",new Stock("IBM","International Business Machines",149.62,150.78,149.18));  stockQuotes.put("GOOG",new Stock("GOOG","Alphabet Inc.",652.30,657.81,643.15));  stockQuotes.put("AMZN",new Stock("AMZN","Amazon.com",548.90,553.20,543.10));}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(bytes[0]);  buffer.setAtIndexAndInc(bytes[1]);  buffer.setAtIndexAndInc(bytes[2]);  buffer.setAtIndexAndInc(bytes[3]);  super.loadByteArray(buffer);}  }
class C{  public void testClearBitPositiveInside4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=50;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean handleMobileCellScroll(final Rect r){  final int offset=computeVerticalScrollOffset();  final int height=getHeight();  final int extent=computeVerticalScrollExtent();  final int range=computeVerticalScrollRange();  final int hoverViewTop=r.top;  final int hoverHeight=r.height();  if (hoverViewTop <= 0 && offset > 0) {    smoothScrollBy(-mSmoothScrollAmountAtEdge,0);    return true;  }  if (hoverViewTop + hoverHeight >= height && offset + extent < range) {    smoothScrollBy(mSmoothScrollAmountAtEdge,0);    return true;  }  return false;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public void test_read$CII() throws IOException {  char[] c=new char[11];  cr=new CharArrayReader(hw);  cr.read(c,1,10);  assertTrue("Test 1: Read returned incorrect chars.",new String(c,1,10).equals(new String(hw,0,10)));  try {    cr.read(null,1,0);    fail("Test 2: NullPointerException expected.");  } catch (  NullPointerException e) {  }  try {    cr.read(c,-1,1);    fail("Test 3: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    cr.read(c,1,-1);    fail("Test 4: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    cr.read(c,1,c.length);    fail("Test 5: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  cr.close();  try {    cr.read(c,1,1);    fail("Test 6: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  protected KMLAbstractFeature(String namespaceURI){  super(namespaceURI);}  }
class C{  public UnivalArray(RRDFile file,int size) throws IOException {  sizeoflong=file.getBits();  buffer=ByteBuffer.allocate(size * 8);  if (file.isBigEndian())   buffer.order(ByteOrder.BIG_ENDIAN); else   buffer.order(ByteOrder.LITTLE_ENDIAN);  file.align();  file.read(buffer);}  }
class C{  public boolean isPrimitivesDefaultedForNullValue(){  return primitivesDefaultedForNullValue;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  Element elem=getElement();  AttributeSet attributes=elem.getAttributes();  URL oldPage=src;  String srcAtt=(String)attributes.getAttribute(HTML.Attribute.SRC);  URL base=((HTMLDocument)elem.getDocument()).getBase();  try {    if (!createdComponent) {      return;    }    Object postData=movePostData(htmlPane,null);    src=new URL(base,srcAtt);    if (oldPage.equals(src) && (src.getRef() == null) && (postData == null)) {      return;    }    htmlPane.setPage(src);    Document newDoc=htmlPane.getDocument();    if (newDoc instanceof HTMLDocument) {      ((HTMLDocument)newDoc).setFrameDocumentState(true);    }  } catch (  MalformedURLException e1) {  }catch (  IOException e2) {  }}  }
class C{  public static boolean is32BitUuid(ParcelUuid parcelUuid){  UUID uuid=parcelUuid.getUuid();  if (uuid.getLeastSignificantBits() != BASE_UUID.getUuid().getLeastSignificantBits()) {    return false;  }  if (is16BitUuid(parcelUuid)) {    return false;  }  return ((uuid.getMostSignificantBits() & 0xFFFFFFFFL) == 0x1000L);}  }
class C{  @Deprecated protected void loadData3(final LoadStats totals,final Object source,final String baseURL,final RDFFormat rdfFormat,final String defaultGraph,final boolean endOfBatch) throws IOException {  final MyLoadStats tmp=newLoadStats();  loadData4_ParserErrors_Trapped(tmp,source,null,baseURL,rdfFormat,defaultGraph,endOfBatch);  totals.add(tmp);}  }
class C{  public Executor removeProperty(String key){  properties.remove(key);  return this;}  }
class C{  public <T>Book write(String key,T value){  if (value == null) {    throw new PaperDbException("Paper doesn't support writing null root values");  } else {    mStorage.insert(key,value);  }  return this;}  }
class C{  public DelegateTree(Supplier<DirectedGraph<V,E>> graphFactory){  super(graphFactory.get());  this.vertex_depths=new HashMap<V,Integer>();}  }
class C{  @SuppressWarnings("unused") private static String workflowToString(int workflow){  String result;  if ((workflow & extraSources) >= 1) {    result="extraSources";  } else   if ((workflow & adjustQNames) >= 1) {    result="adjustQNames";  } else   if ((workflow & resolveImportStatements) >= 1) {    result="resolveImportStatements";  } else   if ((workflow & generate) >= 1) {    result="generate";  } else   if ((workflow & resolveType) >= 1) {    result="resolveType";  } else   if ((workflow & analyze4) >= 1) {    result="analyze4";  } else   if ((workflow & analyze3) >= 1) {    result="analyze3";  } else   if ((workflow & analyze2) >= 1) {    result="analyze2";  } else   if ((workflow & analyze1) >= 1) {    result="analyze1";  } else   if ((workflow & parse2) >= 1) {    result="parse2";  } else   if ((workflow & parse1) >= 1) {    result="parse1";  } else   if ((workflow & preprocess) >= 1) {    result="preprocess";  } else {    result="before preprocessed";  }  return result;}  }
class C{  public void removeDataSource(){  Integer lastSeriesIndex=dataset.getSeriesCount() - 1;  if (lastSeriesIndex >= 0) {    this.fireDataSourceRemoved(lastSeriesIndex);    dataset.removeSeries(lastSeriesIndex);  }}  }
class C{  public void reportNewTestUnuseful(){  nrOfSolutionWithNoImprovement++;}  }
class C{  @NotNull @Override public Iterator<E> iterator(){  Object[] elements=array;  if (elements.length == 0)   return EmptyIterator.getInstance();  return new COWIterator(elements,0);}  }
class C{  public void mouseExited(MouseEvent e){  if (!isDragging) {    setThumbRollover(false);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && getPrintName() != null && getPrintName().length() > 0) {    String sql="UPDATE AD_PrintFormatItem_Trl trl " + "SET PrintName = (SELECT e.PrintName " + "FROM AD_Element_Trl e, AD_Column c "+ "WHERE e.AD_Language=trl.AD_Language"+ " AND e.AD_Element_ID=c.AD_Element_ID"+ " AND c.AD_Column_ID=" + getAD_Column_ID() + ") "+ "WHERE AD_PrintFormatItem_ID = "+ get_ID()+ " AND EXISTS (SELECT * "+ "FROM AD_Element_Trl e, AD_Column c "+ "WHERE e.AD_Language=trl.AD_Language"+ " AND e.AD_Element_ID=c.AD_Element_ID"+ " AND c.AD_Column_ID="+ getAD_Column_ID()+ " AND trl.AD_PrintFormatItem_ID = "+ get_ID()+ ")"+ " AND EXISTS (SELECT * FROM AD_Client "+ "WHERE AD_Client_ID=trl.AD_Client_ID AND IsMultiLingualDocument='Y')";    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("translations updated #" + no);  }  return success;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.FAULT__PROPERTIES:    getProperties().clear();  getProperties().addAll((Collection<? extends Property>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void onNavigationEvent(int navigationEvent,Bundle extras){}  }
class C{  public String rangesTipText(){  return "The attribute ranges to be used; 'inv(...)' denotes an inverted range.";}  }
class C{  public static void rotationX(View v,float fromX,float toX,int duration){  rotationX(v,fromX,toX,duration,null);}  }
class C{  public static void writeVehicles(Vehicles vehicles,String filePath){  log.info("Writing vehicles to file " + filePath);  new VehicleWriterV1(vehicles).writeFile(filePath);}  }
class C{  public int hashCode(){  return m_key;}  }
class C{  protected TimeStampType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public int writeSize(){  return (triesSize() * TRY_ITEM_WRITE_SIZE) + +encodedHandlers.length;}  }
class C{  private void endCurrentTrack(){  if (!isRecording()) {    Log.d(TAG,"Ignore endCurrentTrack. Not recording.");    return;  }  long trackId=recordingTrackId;  boolean paused=recordingTrackPaused;  updateRecordingState(PreferencesUtils.RECORDING_TRACK_ID_DEFAULT,true);  Track track=myTracksProviderUtils.getTrack(trackId);  if (track != null) {    if (!paused) {      insertLocation(track,lastLocation,getLastValidTrackPointInCurrentSegment(trackId));      updateRecordingTrack(track,myTracksProviderUtils.getLastTrackPointId(trackId),false);    }    String trackName=TrackNameUtils.getTrackName(this,trackId,track.getTripStatistics().getStartTime(),myTracksProviderUtils.getFirstValidTrackPoint(trackId));    if (trackName != null && !trackName.equals(track.getName())) {      track.setName(trackName);      myTracksProviderUtils.updateTrack(track);    }    if (track.getCategory().equals(PreferencesUtils.DEFAULT_ACTIVITY_DEFAULT)) {      int activityRecognitionType=PreferencesUtils.getInt(this,R.string.activity_recognition_type_key,PreferencesUtils.ACTIVITY_RECOGNITION_TYPE_DEFAULT);      if (activityRecognitionType != PreferencesUtils.ACTIVITY_RECOGNITION_TYPE_DEFAULT) {        String iconValue=null;switch (activityRecognitionType) {case DetectedActivity.IN_VEHICLE:          iconValue=TrackIconUtils.DRIVE;        break;case DetectedActivity.ON_BICYCLE:      iconValue=TrackIconUtils.BIKE;    break;case DetectedActivity.ON_FOOT:  iconValue=TrackIconUtils.WALK;break;default :break;}if (iconValue != null) {track.setIcon(iconValue);track.setCategory(getString(TrackIconUtils.getIconActivityType(iconValue)));myTracksProviderUtils.updateTrack(track);CalorieUtils.updateTrackCalorie(context,track);}}}}endRecording(true,trackId);}  }
class C{  public static boolean isVisible(Projection sourceMapProjection,Point2D llp){  boolean ret=false;  if (sourceMapProjection != null) {    if (sourceMapProjection.isPlotable(llp)) {      Point2D p=sourceMapProjection.forward(llp);      double x=p.getX();      double y=p.getY();      if (x >= 0 && x <= sourceMapProjection.getWidth() && y >= 0 && y <= sourceMapProjection.getWidth()) {        ret=true;      }    }  }  return ret;}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  private Observable<BluetoothGatt> disconnect(BluetoothGatt bluetoothGatt){  return rxBleGattCallback.getOnConnectionStateChange().doOnSubscribe(null).timeout(TIMEOUT_DISCONNECT,TimeUnit.SECONDS,just(RxBleConnection.RxBleConnectionState.DISCONNECTED)).filter(null).take(1).map(null);}  }
class C{  public void testStartStop() throws Exception {  for (int i=0; i < 3; i++) {    System.out.println(String.format("Creating service, host=%s, port=%d, serviceName=%s",host,port,serviceName));    JmxManager jmx=new JmxManager(host,port,serviceName);    System.out.println(String.format("Starting service, host=%s, port=%d, serviceName=%s",host,port,serviceName));    jmx.start();    jmx.stop();  }}  }
class C{  protected Long[] boundingBoxOfZones(String path2ZonesFile){  Set<SimpleFeature> features=new HashSet<SimpleFeature>();  features.addAll(ShapeFileReader.getAllFeatures(path2ZonesFile));  Long[] boundings=new Long[4];  boolean first=true;  for (  SimpleFeature feature : features) {    Geometry geometry=(Geometry)feature.getDefaultGeometry();    Envelope boundingBox=geometry.getEnvelopeInternal();    if (first) {      boundings[0]=(long)boundingBox.getMinX();      boundings[1]=(long)boundingBox.getMaxX();      boundings[2]=(long)boundingBox.getMinY();      boundings[3]=(long)boundingBox.getMaxY();      first=false;    } else {      if (boundings[0] > (long)boundingBox.getMinX())       boundings[0]=(long)boundingBox.getMinX();      if (boundings[1] < (long)boundingBox.getMaxX())       boundings[1]=(long)boundingBox.getMaxX();      if (boundings[2] > (long)boundingBox.getMinY())       boundings[2]=(long)boundingBox.getMinY();      if (boundings[3] < (long)boundingBox.getMaxY())       boundings[3]=(long)boundingBox.getMaxY();    }  }  return boundings;}  }
class C{  @Override public Collection<String> values(){  final THashSet<String> values=new THashSet<>();  for (int i=1; i < contents.length; i+=2) {    values.add(contents[i]);  }  return values;}  }
class C{  @Override public void resize(int width,int height){  super.resize(width,height);  camera.resize(width,height);  needsRender.set(true);}  }
class C{  public UnsupportedQueryLanguageException(Throwable cause){  super(cause);}  }
class C{  public static int quantile(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,int begin,int end,double quant){  final int length=end - begin;  assert (length > 0) : "Quantile on empty set?";  final double dleft=begin + (length - 1) * quant;  final int ileft=(int)Math.floor(dleft);  quickSelect(data,comparator,begin,end,ileft);  return ileft;}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public JustificationIterator(final IIndexManager indexManager,final IIndex ndx,int capacity){  if (indexManager == null)   throw new IllegalArgumentException();  if (ndx == null)   throw new IllegalArgumentException();  if (capacity < 0)   throw new IllegalArgumentException();  boolean async=true;  final long rangeCount=ndx.rangeCount();  if (capacity == 0) {    if (capacity > MAXIMUM_CAPACITY || rangeCount > MAXIMUM_CAPACITY) {      capacity=MAXIMUM_CAPACITY;    } else {      capacity=(int)rangeCount;    }  } else {    if (capacity > rangeCount) {      capacity=(int)rangeCount;      async=false;    }  }  if (rangeCount < 100) {    async=false;  }  if (capacity == 0) {    capacity=1;  }  this.capacity=capacity;  this.src=ndx.rangeIterator(null,null,0,IRangeQuery.KEYS,null);  this.buffer=new ArrayBlockingQueue<Justification>(capacity);  if (async) {    ft=new FutureTask<Object>(new Reader());    indexManager.getExecutorService().submit(ft);  } else {    ft=null;    fillBuffer();  }}  }
class C{  public <T>com.twitter.util.Future<T> apply(Function0<T> function){  return chooseFuturePool().apply(function);}  }
class C{  static void initNetwork(MatsimConfigType matsim4urbansimConfigPart1,Config config){  log.info("Setting NetworkConfigGroup to config...");  config.network().setInputFile(matsim4urbansimConfigPart1.getNetwork().getInputFile());  log.info("...done!");}  }
class C{  public static int nextRandomInt(int min,int max){  return (int)(nextRandomFloat() * (max - min + 1)) + min;}  }
class C{  public String toString(){  return name;}  }
class C{  private void addHandler(GenericExceptionHandler handler){  if (!genericHandlers.contains(handler))   genericHandlers.add(handler);}  }
class C{  public static boolean writeFile(File file,InputStream is,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=is.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException",e);  }catch (  IOException e) {    throw new RuntimeException("IOException",e);  } finally {    IOUtils.close(o);    IOUtils.close(is);  }}  }
class C{  public void write(String filename){  logger.info("write carrier plans");  try {    openFile(filename);    writeXmlHead();    startCarriers(this.writer);    for (    Carrier carrier : carriers) {      startCarrier(carrier,this.writer);      writeVehiclesAndTheirTypes(carrier,this.writer);      writeShipments(carrier,this.writer);      writeServices(carrier,this.writer);      writePlans(carrier,this.writer);      endCarrier(this.writer);    }    endCarriers(this.writer);    close();    logger.info("done");  } catch (  IOException e) {    e.printStackTrace();    logger.error(e);    System.exit(1);  }}  }
class C{  public NTRUEncryptionKeyGenerationParameters(int N,int q,int df,int dm0,int db,int c,int minCallsR,int minCallsMask,boolean hashSeed,byte[] oid,boolean sparse,boolean fastFp,Digest hashAlg){  super(new SecureRandom(),db);  this.N=N;  this.q=q;  this.df=df;  this.db=db;  this.dm0=dm0;  this.c=c;  this.minCallsR=minCallsR;  this.minCallsMask=minCallsMask;  this.hashSeed=hashSeed;  this.oid=oid;  this.sparse=sparse;  this.fastFp=fastFp;  this.polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE;  this.hashAlg=hashAlg;  init();}  }
class C{  protected void revalidate(){}  }
class C{  public Script toScript(){  Script s=new Script();  s.setComments(comments);  s.setCreated(created);  s.setCreator(creator);  s.setId(id != null ? id : 0);  s.setModified(modified);  s.setName(name);  s.setProductName(productName);  s.setRuntime(runtime);  s.setScriptSteps(steps);  return s;}  }
class C{  public byte build(){  byte flags=0;  flags=PreambleFlags.setAllFlags(flags,isSparseMode,isUnionMode,isEmpty,isEightBytePadding,isBigEndian,isReadOnly,isSharedPreambleMode);  return flags;}  }
class C{  private void updateNextButton(){  m_nextButton.setEnabled((m_currentTutorial != null) && (m_currentTutorial.getStepCounter() != m_currentTutorial.getStepCount()) && m_currentTutorial.getCurrentStep().canNext());}  }
class C{  public Shape rhumbLineShape(){  GeneralPath path=null;  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {    LatLonPoint ll1=new LatLonPoint.Double(llpts[0],llpts[1],true);    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);    boolean firstCoords=true;    for (int i=2; i < llpts.length - 1; i+=2) {      LatLonPoint ll2=new LatLonPoint.Double(llpts[i],llpts[i + 1],true);      if (firstCoords) {        moveTo(path,ll1);        firstCoords=false;      } else {        lineTo(path,ll1);      }      double radDist=RhumbCalculator.getDistanceBetweenPoints(ll1,ll2);      double angle=RhumbCalculator.getAzimuthBetweenPoints(ll1,ll2);      double segDistIncrease=radDist / ProjMath.degToRad(ProjMath.radToDeg(radDist) * segsPerDeg);      double segDist=segDistIncrease;      while (segDist < radDist) {        LatLonPoint llp=RhumbCalculator.calculatePointOnRhumbLine(ll1,angle,segDist);        lineTo(path,llp);        segDist+=segDistIncrease;      }      ll1=ll2;    }    lineTo(path,ll1);  }  return path;}  }
class C{  public ResponseAddressAttribute(){  super(RESPONSE_ADDRESS);}  }
class C{  public static int roundUpToPowerOfTwo(int i){  i--;  i|=i >>> 1;  i|=i >>> 2;  i|=i >>> 4;  i|=i >>> 8;  i|=i >>> 16;  return i + 1;}  }
class C{  public long runChain(long length,boolean disableCoerce){  likelihood.makeDirty();  currentScore=evaluate(likelihood,prior);  long currentState=currentLength;  final Model currentModel=likelihood.getModel();  if (currentState == 0) {    initialScore=currentScore;    bestScore=currentScore;    fireBestModel(currentState,currentModel);  }  if (currentScore == Double.NEGATIVE_INFINITY) {    if (prior != null) {      double logPrior=prior.getLogPrior(likelihood.getModel());      if (logPrior == Double.NEGATIVE_INFINITY) {        throw new IllegalArgumentException("The initial model is invalid because one of the priors has zero probability.");      }    }    String message="The initial likelihood is zero";    if (likelihood instanceof CompoundLikelihood) {      message+=": " + ((CompoundLikelihood)likelihood).getDiagnosis();    } else     if (likelihood instanceof PathLikelihood) {      message+=": " + ((CompoundLikelihood)((PathLikelihood)likelihood).getSourceLikelihood()).getDiagnosis();      message+=": " + ((CompoundLikelihood)((PathLikelihood)likelihood).getDestinationLikelihood()).getDiagnosis();    } else {      message+=".";    }    throw new IllegalArgumentException(message);  } else   if (currentScore == Double.POSITIVE_INFINITY || Double.isNaN(currentScore)) {    String message="A likelihood returned with a numerical error";    if (likelihood instanceof CompoundLikelihood) {      message+=": " + ((CompoundLikelihood)likelihood).getDiagnosis();    } else {      message+=".";    }    throw new IllegalArgumentException(message);  }  pleaseStop=false;  isStopped=false;  double[] logr={0.0};  boolean usingFullEvaluation=true;  if (fullEvaluationCount == 0)   usingFullEvaluation=false;  boolean fullEvaluationError=false;  while (!pleaseStop && (currentState < (currentLength + length))) {    String diagnosticStart="";    fireCurrentModel(currentState,currentModel);    if (pleaseStop) {      isStopped=true;      break;    }    final int op=schedule.getNextOperatorIndex();    final MCMCOperator mcmcOperator=schedule.getOperator(op);    double oldScore=currentScore;    if (usingFullEvaluation) {      diagnosticStart=likelihood instanceof CompoundLikelihood ? ((CompoundLikelihood)likelihood).getDiagnosis() : "";    }    if (currentModel != null) {      currentModel.storeModelState();    }    boolean operatorSucceeded=true;    double hastingsRatio=1.0;    boolean accept=false;    logr[0]=-Double.MAX_VALUE;    try {      if (DEBUG) {        System.out.println("\n&& Operator: " + mcmcOperator.getOperatorName());      }      if (mcmcOperator instanceof GeneralOperator) {        hastingsRatio=((GeneralOperator)mcmcOperator).operate(prior,likelihood);      } else {        hastingsRatio=mcmcOperator.operate();      }    } catch (    OperatorFailedException e) {      operatorSucceeded=false;    }    double score=Double.NaN;    double deviation=Double.NaN;    if (operatorSucceeded) {      if (DEBUG) {        System.out.println("** Evaluate");      }      long elapsedTime=0;      if (PROFILE) {        elapsedTime=System.currentTimeMillis();      }      score=evaluate(likelihood,prior);      if (PROFILE) {        long duration=System.currentTimeMillis() - elapsedTime;        if (DEBUG) {          System.out.println("Time: " + duration);        }        mcmcOperator.addEvaluationTime(duration);      }      String diagnosticOperator="";      if (usingFullEvaluation) {        diagnosticOperator=likelihood instanceof CompoundLikelihood ? ((CompoundLikelihood)likelihood).getDiagnosis() : "";      }      if (score == Double.NEGATIVE_INFINITY && mcmcOperator instanceof GibbsOperator) {        if (!(mcmcOperator instanceof GibbsIndependentNormalDistributionOperator) && !(mcmcOperator instanceof GibbsIndependentGammaOperator) && !(mcmcOperator instanceof GibbsIndependentCoalescentOperator)&& !(mcmcOperator instanceof GibbsIndependentJointNormalGammaOperator)) {          Logger.getLogger("error").severe("State " + currentState + ": A Gibbs operator, "+ mcmcOperator.getOperatorName()+ ", returned a state with zero likelihood.");        }      }      if (score == Double.POSITIVE_INFINITY || Double.isNaN(score)) {        if (likelihood instanceof CompoundLikelihood) {          Logger.getLogger("error").severe("State " + currentState + ": A likelihood returned with a numerical error:\n"+ ((CompoundLikelihood)likelihood).getDiagnosis());        } else {          Logger.getLogger("error").severe("State " + currentState + ": A likelihood returned with a numerical error.");        }        score=Double.NEGATIVE_INFINITY;      }      if (usingFullEvaluation) {        likelihood.makeDirty();        final double testScore=evaluate(likelihood,prior);        final String d2=likelihood instanceof CompoundLikelihood ? ((CompoundLikelihood)likelihood).getDiagnosis() : "";        if (Math.abs(testScore - score) > evaluationTestThreshold) {          Logger.getLogger("error").severe("State " + currentState + ": State was not correctly calculated after an operator move.\n"+ "Likelihood evaluation: "+ score+ "\nFull Likelihood evaluation: "+ testScore+ "\n"+ "Operator: "+ mcmcOperator+ " "+ mcmcOperator.getOperatorName()+ (diagnosticOperator.length() > 0 ? "\n\nDetails\nBefore: " + diagnosticOperator + "\nAfter: "+ d2 : "")+ "\n\n");          fullEvaluationError=true;        }      }      if (score > bestScore) {        bestScore=score;        fireBestModel(currentState,currentModel);      }      accept=mcmcOperator instanceof GibbsOperator || acceptor.accept(oldScore,score,hastingsRatio,logr);      deviation=score - oldScore;    }    if (accept) {      if (DEBUG) {        System.out.println("** Move accepted: new score = " + score + ", old score = "+ oldScore);      }      mcmcOperator.accept(deviation);      currentModel.acceptModelState();      currentScore=score;    } else {      if (DEBUG) {        System.out.println("** Move rejected: new score = " + score + ", old score = "+ oldScore);      }      mcmcOperator.reject();      currentModel.restoreModelState();      if (usingFullEvaluation) {        likelihood.makeDirty();        final double testScore=evaluate(likelihood,prior);        final String d2=likelihood instanceof CompoundLikelihood ? ((CompoundLikelihood)likelihood).getDiagnosis() : "";        if (Math.abs(testScore - oldScore) > evaluationTestThreshold) {          final Logger logger=Logger.getLogger("error");          logger.severe("State " + currentState + ": State was not correctly restored after reject step.\n"+ "Likelihood before: "+ oldScore+ " Likelihood after: "+ testScore+ "\n"+ "Operator: "+ mcmcOperator+ " "+ mcmcOperator.getOperatorName()+ (diagnosticStart.length() > 0 ? "\n\nDetails\nBefore: " + diagnosticStart + "\nAfter: "+ d2 : "")+ "\n\n");          fullEvaluationError=true;        }      }    }    if (!disableCoerce && mcmcOperator instanceof CoercableMCMCOperator) {      coerceAcceptanceProbability((CoercableMCMCOperator)mcmcOperator,logr[0]);    }    if (usingFullEvaluation) {      if (schedule.getMinimumAcceptAndRejectCount() >= minOperatorCountForFullEvaluation && currentState >= fullEvaluationCount) {        usingFullEvaluation=false;        if (fullEvaluationError) {          throw new RuntimeException("One or more evaluation errors occurred during the test phase of this\n" + "run. These errors imply critical errors which may produce incorrect\n" + "results.");        }      }    }    fireEndCurrentIteration(currentState);    currentState+=1;  }  currentLength=currentState;  return currentLength;}  }
class C{  public static String buildFullRequestUrl(String scheme,String serverName,int serverPort,String requestURI,String queryString){  scheme=scheme.toLowerCase();  StringBuilder url=new StringBuilder();  url.append(scheme).append("://").append(serverName);  if ("http".equals(scheme)) {    if (serverPort != 80) {      url.append(":").append(serverPort);    }  } else   if ("https".equals(scheme)) {    if (serverPort != 443) {      url.append(":").append(serverPort);    }  }  url.append(requestURI);  if (queryString != null) {    url.append("?").append(queryString);  }  return url.toString();}  }
class C{  @Override public void flush() throws IOException {  if (debug > 1) {    System.out.println("flush() @ CompressionResponseStream");  }  if (closed) {    throw new IOException("Cannot flush a closed output stream");  }  if (gzipstream != null) {    gzipstream.flush();  }}  }
class C{  public BubbleXYItemLabelGenerator(){  this(DEFAULT_FORMAT_STRING,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  public static GankFragment newInstance(int year,int month,int day){  GankFragment fragment=new GankFragment();  Bundle args=new Bundle();  args.putInt(ARG_YEAR,year);  args.putInt(ARG_MONTH,month);  args.putInt(ARG_DAY,day);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean forEachEntry(TIntIntProcedure procedure){  byte[] states=_states;  int[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  LineToTokenArrayList oper=new LineToTokenArrayList();  ArrayListTestSink tokenSink=new ArrayListTestSink();  ArrayListTestSink stokenSink=new ArrayListTestSink();  oper.setSplitBy(";");  oper.setSplitTokenBy(",");  oper.tokens.setSink(tokenSink);  oper.splittokens.setSink(stokenSink);  oper.beginWindow(0);  String input1="a,2,3;b,1,2;c,4,5,6";  String input2="d";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",4,tokenSink.map.size());  Assert.assertEquals("number emitted tuples",4,stokenSink.map.size());  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("a,2,3"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("b,1,2"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("c,4,5,6"));  Assert.assertEquals("number emitted tuples",numTuples,tokenSink.getCount("d"));  HashMap<Object,Object> smap=stokenSink.map;  for (  Map.Entry<Object,Object> e : smap.entrySet()) {    HashMap<String,ArrayList<String>> item=(HashMap<String,ArrayList<String>>)e.getKey();    for (    Map.Entry<String,ArrayList<String>> l : item.entrySet()) {      String key=l.getKey();      ArrayList<String> list=l.getValue();      if (key.equals("a")) {        Assert.assertEquals("number emitted values for \"a\"",2,list.size());        Assert.assertEquals("first value for \"a\"","2",list.get(0));        Assert.assertEquals("second value for \"a\"","3",list.get(1));      } else       if (key.equals("b")) {        Assert.assertEquals("number emitted values for \"b\"",2,list.size());        Assert.assertEquals("first value for \"b\"","1",list.get(0));        Assert.assertEquals("second value for \"b\"","2",list.get(1));      } else       if (key.equals("c")) {        Assert.assertEquals("number emitted values for \"c\"",3,list.size());        Assert.assertEquals("first value for \"c\"","4",list.get(0));        Assert.assertEquals("second value for \"c\"","5",list.get(1));        Assert.assertEquals("second value for \"c\"","6",list.get(2));      } else       if (key.equals("d")) {        Assert.assertEquals("number emitted values for \"d\"",0,list.size());      }    }  }}  }
class C{  public boolean isMarkMaxMessageSizeExceededSeen(){  return fieldMarkMaxMessageSizeExceededSeen;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PRIMITIVE_TYPE;}  }
class C{  public void closeEntry() throws IOException {  checkClosed();  if (currentEntry == null) {    return;  }  if (currentEntry instanceof java.util.jar.JarEntry) {    Attributes temp=((JarEntry)currentEntry).getAttributes();    if (temp != null && temp.containsKey("hidden")) {      return;    }  }  Exception failure=null;  try {    Streams.skipAll(this);  } catch (  Exception e) {    failure=e;  }  int inB, out;  if (currentEntry.compressionMethod == ZipEntry.DEFLATED) {    inB=inf.getTotalIn();    out=inf.getTotalOut();  } else {    inB=inRead;    out=inRead;  }  int diff=entryIn - inB;  if (diff != 0) {    ((PushbackInputStream)in).unread(buf,len - diff,diff);  }  try {    readAndVerifyDataDescriptor(inB,out);  } catch (  Exception e) {    if (failure == null) {      failure=e;    }  }  inf.reset();  lastRead=inRead=entryIn=len=0;  crc.reset();  currentEntry=null;  if (failure != null) {    if (failure instanceof IOException) {      throw (IOException)failure;    } else     if (failure instanceof RuntimeException) {      throw (RuntimeException)failure;    }    AssertionError error=new AssertionError();    error.initCause(failure);    throw error;  }}  }
class C{  public void showHideStatusBar(){  Container contentPane=frame.getContentPane();  boolean statusBarShown=false;  for (int i=0; i < contentPane.getComponentCount(); i++) {    if (contentPane.getComponent(i).equals(jlStatusBar)) {      statusBarShown=true;      break;    }  }  if (statusBarShown) {    frame.getContentPane().remove(jlStatusBar);    applicationSettings.setShowStatusBar(false);  } else {    frame.getContentPane().add(jlStatusBar,BorderLayout.SOUTH);    applicationSettings.setShowStatusBar(true);  }}  }
class C{  public static AssociationSessionType create(String sessType,String assocType,boolean compatibility) throws AssociationException {  AssociationSessionType result;  if (!compatibility && "no-encryption".equals(sessType) && Association.TYPE_HMAC_SHA1.equals(assocType))   result=NO_ENCRYPTION_SHA1MAC; else   if (!compatibility && "no-encryption".equals(sessType) && Association.TYPE_HMAC_SHA256.equals(assocType))   result=NO_ENCRYPTION_SHA256MAC; else   if (compatibility && ("".equals(sessType) || sessType == null) && (Association.TYPE_HMAC_SHA1.equals(assocType) || assocType == null)) {    result=NO_ENCRYPTION_COMPAT_SHA1MAC;  } else   if (!compatibility && "DH-SHA1".equals(sessType) && Association.TYPE_HMAC_SHA1.equals(assocType))   result=DH_SHA1; else   if (compatibility && ("DH-SHA1".equals(sessType) || sessType == null))   result=DH_COMPAT_SHA1; else   if (!compatibility && "DH-SHA256".equals(sessType) && Association.TYPE_HMAC_SHA256.equals(assocType))   result=DH_SHA256; else   throw new AssociationException("Unsupported session / association type: " + sessType + " : "+ assocType+ ", compatibility: "+ compatibility);  if (DEBUG)   _log.debug("Session:Association Type: " + result);  return result;}  }
class C{  public NodeMetadataLeftIndexedReaderAccessibleInfo(LongToInternalIntBiMap leftNodesToIndexBiMap,LongToInternalIntBiMap rightNodesToIndexBiMap,EdgePool leftNodeEdgePool,List<IntToIntArrayMap> rightNodesToMetadataMap){  super(leftNodesToIndexBiMap,rightNodesToIndexBiMap,leftNodeEdgePool);  this.rightNodesToMetadataMap=rightNodesToMetadataMap;}  }
class C{  private void readObject(){}  }
class C{  public static double min(double a,double b){  return (a <= b) ? a : b;}  }
class C{  default B append8bit(@NotNull CharSequence cs,int start,int end) throws IllegalArgumentException, BufferOverflowException, BufferUnderflowException, IndexOutOfBoundsException {  if (cs instanceof BytesStore) {    return write((BytesStore)cs,(long)start,end);  }  for (int i=start; i < end; i++) {    char c=cs.charAt(i);    if (c > 255)     c='?';    writeByte((byte)c);  }  return (B)this;}  }
class C{  public void stopMonitoringQueryThread(Thread queryThread,Query query){  QueryExecutionTimeoutException testException=null;  DefaultQuery q=(DefaultQuery)query;  boolean[] queryCompleted=q.getQueryCompletedForMonitoring();synchronized (queryCompleted) {    queryExecutionStatus.get().getAndSet(Boolean.FALSE);    if (GemFireCacheImpl.getInstance() != null && GemFireCacheImpl.getInstance().TEST_MAX_QUERY_EXECUTION_TIME > 0) {      long maxTimeSet=GemFireCacheImpl.getInstance().TEST_MAX_QUERY_EXECUTION_TIME;      QueryThreadTask queryTask=(QueryThreadTask)queryThreads.peek();      long currentTime=System.currentTimeMillis();      if (queryTask != null) {        if ((currentTime - queryTask.StartTime) > maxTimeSet) {          testException=new QueryExecutionTimeoutException("The QueryMonitor thread may be sleeping longer than" + " the set sleep time. This will happen as the sleep is based on OS thread scheduling," + " verify the time spent by the executor thread.");        }      }    }    q.setQueryCompletedForMonitoring(true);    queryThreads.remove(new QueryThreadTask(queryThread,null,null));  }  if (logger.isDebugEnabled()) {    logger.debug("Removed thread from QueryMonitor. QueryMonitor size is:{}, Thread ID is: {}  thread is : {}",queryThreads.size(),queryThread.getId(),queryThread);  }  if (testException != null) {    throw testException;  }}  }
class C{  public static File[] filesOverModDate(File[] files,Interval retention){  ArrayList<File> overFiles=new ArrayList<File>();  long now=System.currentTimeMillis();  for (  File file : files) {    long modDate=file.lastModified();    if (modDate > 0 && retention.overInterval(modDate,now))     overFiles.add(file);  }  File[] fileArray=new File[overFiles.size()];  return overFiles.toArray(fileArray);}  }
class C{  public static LatLon limitEyePositionLocation(Angle latitude,Angle longitude,ViewPropertyLimits viewLimits){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Sector limits=viewLimits.getEyeLocationLimits();  Angle newLatitude=latitude;  Angle newLongitude=longitude;  if (latitude.compareTo(limits.getMinLatitude()) < 0) {    newLatitude=limits.getMinLatitude();  } else   if (latitude.compareTo(limits.getMaxLatitude()) > 0) {    newLatitude=limits.getMaxLatitude();  }  if (longitude.compareTo(limits.getMinLongitude()) < 0) {    newLongitude=limits.getMinLongitude();  } else   if (longitude.compareTo(limits.getMaxLongitude()) > 0) {    newLongitude=limits.getMaxLongitude();  }  return new LatLon(newLatitude,newLongitude);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public String fixLastIdentityValues(Table table){  return null;}  }
class C{  protected static File extractFileArg(final String argumentName,final File alternative,final List<String> args){  final String filePath=extractArg(argumentName,null,args);  if (filePath == null) {    return alternative;  } else {    return new File(filePath);  }}  }
class C{  private CaseMapper(){}  }
class C{  private boolean isWhitespace(int position){  if (_len >= 0 && position >= _len) {    return false;  }  return Character.isWhitespace(_working[position]);}  }
class C{  void imtqlb(int n,double d[],double e[],double bnd[],int offset){  double[] dn=new double[n];  System.arraycopy(d,offset,dn,0,n);  double[] en=new double[n];  System.arraycopy(e,offset,en,0,n);  double[] bndn=new double[n];  System.arraycopy(bnd,offset,bndn,0,n);  imtqlb(n,dn,en,bndn);  System.arraycopy(dn,0,d,offset,n);  System.arraycopy(en,0,e,offset,n);  System.arraycopy(bndn,0,bnd,offset,n);}  }
class C{  @Deprecated public MultiConfirmDialog(String i18nKey,int mode,Object... i18nArgs){  this(ApplicationFrame.getApplicationFrame(),i18nKey,mode,i18nArgs);}  }
class C{  public Writer writeTo(Writer writer){  Binding binding;  if (map == null)   binding=new Binding(); else   binding=new Binding(map);  Script scriptObject=InvokerHelper.createScript(script.getClass(),binding);  PrintWriter pw=new PrintWriter(writer);  scriptObject.setProperty("out",pw);  scriptObject.run();  pw.flush();  return writer;}  }
class C{  private Spannable highlightUrls(Spannable text){  if (text == null) {    return null;  }  final Matcher matcher=PATTERN_URLS.matcher(text);  while (matcher.find()) {    final int start=matcher.start(1);    final int end=matcher.end(1);    text.setSpan(new ForegroundColorSpan(mUrlHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  }  return text;}  }
class C{  public void addHistoryCall(HistoryCall historyCall,CallContact linkedTo){  calls.put(historyCall.call_start,historyCall);  if (historyCall.isIncoming()) {    ++incoming_sum;  } else {    ++outgoing_sum;  }  if (historyCall.isMissed())   missed_sum++;  if (contact.isUnknown() && !linkedTo.isUnknown())   setContact(linkedTo);}  }
class C{  @Override public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (content != null) {    content.generateAtom(w,"content");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:31.781 -0500",hash_original_method="1D88AF12F47BE66D32BA577915055CD5",hash_generated_method="9890FA3634057FE61E5F0620C66A19E9") public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public void testGetAbsolutePathFromExplicit(){  String path=this.fileHandler.getAbsolutePath(System.getProperty("user.home"));  assertEquals(path,System.getProperty("user.home"));}  }
class C{  public static void f(String msg,Object... args){  if (!allowWtf)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public OMText(double lt,double ln,String stuff,Font font,int just){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  lat=lt;  lon=ln;  setData(stuff);  f=font;  justify=just;}  }
class C{  public boolean hasGenre(){  return hasExtension(Genre.class);}  }
class C{  public Factory(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SynchronizedWeakCacheStringConverter(final int lengthLimit){  this(Collections.synchronizedMap(new WeakCache<String,String>()),lengthLimit);}  }
class C{  @Override public String toString(){  return "Kernel estimator with bandwidth " + m_Width + " and total weight "+ m_SumOfWeights+ " based on\n"+ m_TM.toString();}  }
class C{  public static void storeLocation(Context context,LatLng location){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude));  editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude));  editor.apply();}  }
class C{  @Override public synchronized boolean put(final Entry row) throws IOException, SpaceExceededException {  Index index=getIndex();  if (index == null)   return false;  try {    boolean b=index.put(row);    if (this.sizecache >= 0 && b)     this.sizecache++;    return b;  } catch (  IOException e) {    throw e;  } finally {    index.close();  }}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  @Override public void process(JCas jcas) throws AnalysisEngineProcessException {  CAS cas=jcas.getCas();  modelProvider.configure(cas);  mappingProvider.configure(cas);  DependencyParser dp=modelProvider.getResource();  if (!exists(jcas,Sentence.class) || !exists(jcas,Token.class)) {    return;  }  try {    String tempfile=generateTempInputFile(jcas);    dp.options.testfile=tempfile;  } catch (  IOException e) {    throw new AnalysisEngineProcessException(e);  }  List<DependencyInstance> parsedInstances;  try {    parsedInstances=dp.getParses();  } catch (  IOException e) {    throw new AnalysisEngineProcessException(e);  }  List<Sentence> sentences=new ArrayList<Sentence>(select(jcas,Sentence.class));  for (int instanceIndex=0; instanceIndex < parsedInstances.size(); instanceIndex++) {    DependencyInstance instance=parsedInstances.get(instanceIndex);    Sentence sentence=sentences.get(instanceIndex);    List<Token> tokens=new ArrayList<Token>(selectCovered(jcas,Token.class,sentence));    for (int formsIndex=0; formsIndex < instance.forms.length; formsIndex++) {      Token token=tokens.get(formsIndex);      int head=instance.heads[formsIndex];      Type depRel=mappingProvider.getTagType(instance.deprels[formsIndex]);      if (head > 0) {        Dependency dep=(Dependency)cas.createFS(depRel);        dep.setDependencyType(instance.deprels[formsIndex]);        dep.setFlavor(DependencyFlavor.BASIC);        dep.setDependent(token);        dep.setGovernor(tokens.get(head - 1));        dep.setBegin(dep.getDependent().getBegin());        dep.setEnd(dep.getDependent().getEnd());        dep.addToIndexes();      } else {        Dependency dep=new ROOT(jcas);        dep.setDependencyType(instance.deprels[formsIndex]);        dep.setFlavor(DependencyFlavor.BASIC);        dep.setDependent(token);        dep.setGovernor(token);        dep.setBegin(dep.getDependent().getBegin());        dep.setEnd(dep.getDependent().getEnd());        dep.addToIndexes();      }    }  }}  }
class C{  public void write(BufferedWriter writer) throws Exception {  Enumeration<String> enm;  writer.write("# generated " + new Date());  writer.newLine();  enm=elements();  while (enm.hasMoreElements()) {    writer.write(enm.nextElement().toString());    writer.newLine();  }  writer.flush();  writer.close();}  }
class C{  public void saveCurrentProject(){  saveProject(currentProject);}  }
class C{  public void remove(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.remove(object);    } else {      mObjects.remove(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  private boolean isCapabilityRefreshRequired(long timestampOfLastResponse,RcsSettings rcsSettings){  long now=System.currentTimeMillis();  if (now < timestampOfLastResponse) {    return true;  }  return (now > (timestampOfLastResponse + rcsSettings.getCapabilityExpiryTimeout()));}  }
class C{  public void asTimestamp(MutableDateTime t){  if (length != 17 && length != 21)   throw new FIXValueFormatException("Not a timestamp");  int year=getDigits(4,offset + 0);  int monthOfYear=getDigits(2,offset + 4);  int dayOfMonth=getDigits(2,offset + 6);  int hourOfDay=getDigits(2,offset + 9);  int minuteOfHour=getDigits(2,offset + 12);  int secondOfMinute=getDigits(2,offset + 15);  int millisOfSecond=length == 21 ? getDigits(3,offset + 18) : 0;  t.setDateTime(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);}  }
class C{  public void doGenerate(IProgressMonitor monitor) throws IOException {  if (!targetFolder.getLocation().toFile().exists()) {    targetFolder.getLocation().toFile().mkdirs();  }  monitor.subTask("Loading...");  com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes gen0=new com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes(modelURI,targetFolder.getLocation().toFile(),arguments);  monitor.worked(1);  String generationID=org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID("com.github.lbroudoux.dsl.eip.gen.camel","com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes",modelURI.toString(),targetFolder.getFullPath().toString(),new ArrayList<String>());  gen0.setGenerationID(generationID);  gen0.doGenerate(BasicMonitor.toMonitor(monitor));}  }
class C{  static int convertToPixels(float value,String unit,boolean isHor,float ref,ContainerWrapper parent,ComponentWrapper comp){  UnitValue uv=(isHor ? HOR_DEFS : VER_DEFS).get(unit);  return uv != null ? MathUtil.round(value * uv.getPixels(ref,parent,comp)) : UnitConverter.UNABLE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.022 -0500",hash_original_method="FA1F5320A185260C8447F83652566D78",hash_generated_method="FA121AF2BD9F319D567304C1AD79CBE4") public static String readFileAsString(String path) throws IOException {  return readFileAsBytes(path).toString(Charsets.UTF_8);}  }
class C{  public RpcAuditEvent(String sessionId,CurrentUser who,String what,long when,Multimap<String,?> params,String httpMethod,Object input,int status,Object result){  super(sessionId,who,what,when,params,httpMethod,input,status,result);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TYPE;case 2:  return DATA;default :return null;}}  }
class C{  public static List<Map.Entry<List<String>,List<double[]>>> sort(Map<List<String>,List<Double>> mapForSort,Map<List<String>,List<double[]>> valueMap,List<SortOption> sortOptions,int topN){  processIndex(sortOptions);  List<Map.Entry<List<String>,List<double[]>>> result=new ArrayList<Map.Entry<List<String>,List<double[]>>>();  SortedSet<Map.Entry<List<String>,List<Double>>> sortedSet=sortByValue(mapForSort,sortOptions);  for (  Map.Entry<List<String>,List<Double>> entry : sortedSet) {    List<String> key=entry.getKey();    List<double[]> value=valueMap.get(key);    if (value != null) {      Map.Entry<List<String>,List<double[]>> newEntry=new ImmutableEntry<List<String>,List<double[]>>(key,value);      result.add(newEntry);      if (topN > 0 && result.size() >= topN) {        break;      }    }  }  return result;}  }
class C{  public PcapByteOutputStream(ByteArrayOutputStream baos){  this.baos=baos;  list=new ArrayList<Byte>();  createGlobalHeader();}  }
class C{  private boolean matchesMobile4g(NetworkIdentity ident){  ensureSubtypeAvailable();  if (ident.mType == TYPE_WIMAX) {    return true;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case 3:      return true;  }}return false;}  }
class C{  public List<Object> syncAndReturnAll(){  List<Object> formatted=new ArrayList<Object>();  for (  Client client : clients) {    formatted.add(generateResponse(client.getOne()).get());  }  return formatted;}  }
class C{  public DExportCertificates(JFrame parent,String entryAlias,boolean chain){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  this.chain=chain;  initComponents();}  }
class C{  private void onStopTrackingTouch(){  mIsDragging=false;}  }
class C{  public VariableModel(){}  }
class C{  public SmoothPagedView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  mUsePagingTouchSlop=false;  mDeferScrollUpdate=mScrollMode != X_LARGE_MODE;}  }
class C{  private boolean equalsFragments(ByteString other){  int thisOffset=0;  Iterator<LiteralByteString> thisIter=new PieceIterator(this);  LiteralByteString thisString=thisIter.next();  int thatOffset=0;  Iterator<LiteralByteString> thatIter=new PieceIterator(other);  LiteralByteString thatString=thatIter.next();  int pos=0;  while (true) {    int thisRemaining=thisString.size() - thisOffset;    int thatRemaining=thatString.size() - thatOffset;    int bytesToCompare=Math.min(thisRemaining,thatRemaining);    boolean stillEqual=(thisOffset == 0) ? thisString.equalsRange(thatString,thatOffset,bytesToCompare) : thatString.equalsRange(thisString,thisOffset,bytesToCompare);    if (!stillEqual) {      return false;    }    pos+=bytesToCompare;    if (pos >= totalLength) {      if (pos == totalLength) {        return true;      }      throw new IllegalStateException();    }    if (bytesToCompare == thisRemaining) {      thisOffset=0;      thisString=thisIter.next();    } else {      thisOffset+=bytesToCompare;    }    if (bytesToCompare == thatRemaining) {      thatOffset=0;      thatString=thatIter.next();    } else {      thatOffset+=bytesToCompare;    }  }}  }
class C{  public TipOfTheDay addTip(final String tip){  this.tips.add(tip);  return this;}  }
class C{  @MethodDesc(description="Confirm service liveness",usage="isAlive") public boolean isAlive(){  return true;}  }
class C{  public static Integer toRef(int i){  return Integer.valueOf(i);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7,K k8,V v8){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5,k6,v6,k7,v7,k8,v8);}  }
class C{  private void collapseExpanded(final TreePath newPath){  if (!m_stayExpandedPaths.isEmpty()) {    TreePath root=newPath;    while (root.getPathCount() > 1) {      root=root.getParentPath();    }    final Enumeration<TreePath> expandedDescendants=m_tree.getExpandedDescendants(root);    final TreePath selectedPath=m_tree.getSelectionPath();    final Stack<TreePath> collapsePaths=new Stack<>();    while (expandedDescendants.hasMoreElements()) {      final TreePath currentDescendant=expandedDescendants.nextElement();      if (!currentDescendant.isDescendant(newPath) && (selectedPath == null || !currentDescendant.isDescendant(selectedPath))) {        collapsePaths.add(currentDescendant);      }    }    if (!collapsePaths.isEmpty()) {      for (      final TreePath currentPath : collapsePaths) {        m_tree.collapsePath(currentPath);      }      m_stayExpandedPaths.removeAll(collapsePaths);    }  }}  }
class C{  public static boolean cs_lsolve(Scs L,float[] x){  int p, j, n, Lp[], Li[];  float Lx[];  if (!Scs_util.CS_CSC(L) || x == null)   return (false);  n=L.n;  Lp=L.p;  Li=L.i;  Lx=L.x;  for (j=0; j < n; j++) {    x[j]/=Lx[Lp[j]];    for (p=Lp[j] + 1; p < Lp[j + 1]; p++) {      x[Li[p]]-=Lx[p] * x[j];    }  }  return true;}  }
class C{  public static Coordinate[] linkIdList2Coordinates(Network network,List<Id<Link>> linkIdList){  List<Coordinate> coordList=new ArrayList<>();  for (  Id<Link> linkId : linkIdList) {    if (network.getLinks().containsKey(linkId)) {      coordList.add(MGC.coord2Coordinate(network.getLinks().get(linkId).getFromNode().getCoord()));    } else {      throw new IllegalArgumentException("Link " + linkId + " not found in network");    }  }  coordList.add(MGC.coord2Coordinate(network.getLinks().get(linkIdList.get(linkIdList.size() - 1)).getToNode().getCoord()));  Coordinate[] coordinates=new Coordinate[coordList.size()];  return coordList.toArray(coordinates);}  }
class C{  public IdentityBuilder increment(int increment){  if (increment < 0 || increment % 2 == 0) {    throw new IllegalArgumentException(L.l("'{0}' is an invalid sequence increment",increment));  }  _sequenceIncrement=increment;  return this;}  }
class C{  public static int binarySearchFromTo(int[] list,int key,int from,int to){  int midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  private static List<String> fetchEngineConfigs(Draft2Job context,String language){  if (context == null) {    return null;  }  List<String> result=new ArrayList<>();  List<Draft2ExpressionEngineRequirement> requirements=context.getApp().getExpressionEngineRequirements();  if (requirements != null) {    for (    Draft2ExpressionEngineRequirement requirement : requirements) {      List<String> engineConfiguration=requirement.getEngineConfigs(language);      if (engineConfiguration != null) {        result.addAll(engineConfiguration);      }    }  }  return result;}  }
class C{  public void checkPermission(Object object,NamespacePermissionEnum[] permissions){  List<AccessDeniedException> accessDeniedExceptions=new ArrayList<>();  checkPermission(object,permissions,accessDeniedExceptions);  if (!accessDeniedExceptions.isEmpty()) {    throw getAccessDeniedException(accessDeniedExceptions);  }}  }
class C{  @RequestMapping(value="",method={RequestMethod.POST}) @ResponseBody public StreamingRequest saveStreamingConfig(@RequestBody StreamingRequest streamingRequest){  String project=streamingRequest.getProject();  TableDesc tableDesc=deserializeTableDesc(streamingRequest);  StreamingConfig streamingConfig=deserializeSchemalDesc(streamingRequest);  KafkaConfig kafkaConfig=deserializeKafkaSchemalDesc(streamingRequest);  boolean saveStreamingSuccess=false, saveKafkaSuccess=false;  try {    tableDesc.setUuid(UUID.randomUUID().toString());    MetadataManager metaMgr=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());    metaMgr.saveSourceTable(tableDesc);    cubeMgmtService.syncTableToProject(new String[]{tableDesc.getIdentity()},project);  } catch (  IOException e) {    throw new BadRequestException("Failed to add streaming table.");  }  streamingConfig.setName(tableDesc.getIdentity());  kafkaConfig.setName(tableDesc.getIdentity());  try {    if (StringUtils.isEmpty(streamingConfig.getName())) {      logger.info("StreamingConfig should not be empty.");      throw new BadRequestException("StremingConfig name should not be empty.");    }    try {      streamingConfig.setUuid(UUID.randomUUID().toString());      streamingService.createStreamingConfig(streamingConfig);      saveStreamingSuccess=true;    } catch (    IOException e) {      logger.error("Failed to save StreamingConfig:" + e.getLocalizedMessage(),e);      throw new InternalErrorException("Failed to save StreamingConfig: " + e.getLocalizedMessage());    }    try {      kafkaConfig.setUuid(UUID.randomUUID().toString());      kafkaConfigService.createKafkaConfig(kafkaConfig);      saveKafkaSuccess=true;    } catch (    IOException e) {      try {        streamingService.dropStreamingConfig(streamingConfig);      } catch (      IOException e1) {        throw new InternalErrorException("StreamingConfig is created, but failed to create KafkaConfig: " + e.getLocalizedMessage());      }      logger.error("Failed to save KafkaConfig:" + e.getLocalizedMessage(),e);      throw new InternalErrorException("Failed to save KafkaConfig: " + e.getLocalizedMessage());    }  }  finally {    if (saveKafkaSuccess == false || saveStreamingSuccess == false) {      if (saveStreamingSuccess == true) {        StreamingConfig sConfig=streamingService.getStreamingManager().getStreamingConfig(streamingConfig.getName());        try {          streamingService.dropStreamingConfig(sConfig);        } catch (        IOException e) {          throw new InternalErrorException("Action failed and failed to rollback the created streaming config: " + e.getLocalizedMessage());        }      }      if (saveKafkaSuccess == true) {        try {          KafkaConfig kConfig=kafkaConfigService.getKafkaConfig(kafkaConfig.getName());          kafkaConfigService.dropKafkaConfig(kConfig);        } catch (        IOException e) {          throw new InternalErrorException("Action failed and failed to rollback the created kafka config: " + e.getLocalizedMessage());        }      }    }  }  streamingRequest.setSuccessful(true);  return streamingRequest;}  }
class C{  public static <T>T max(Iterator<T> self,Comparator<T> comparator){  return max((Iterable<T>)toList(self),comparator);}  }
class C{  private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  IcsListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(mContext.getString(R.string.abs__activitychooserview_choose_application));  }}  }
class C{  public static int methodModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| SYNCHRONIZED| NATIVE| STRICT;}  }
class C{  static public Formatter intFormatter(){  return intFormatter;}  }
class C{  protected static void postProcessFlood(IHex[] hexSet,int modifier){  int n;  IHex field;  ITerrainFactory f=Terrains.getTerrainFactory();  for (n=0; n < hexSet.length; n++) {    field=hexSet[n];    int elev=field.getLevel() - modifier;    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));    } else     if (elev < 0) {      if (elev < -4) {        elev=-4;      }      field.removeAllTerrains();      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));      field.setLevel(modifier);    }  }}  }
class C{  public void checkExcluded(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkExcludedEmail(excludedSubtreesEmail,extractNameAsString(name));  break;case 2:checkExcludedDNS(excludedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkExcludedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkExcludedURI(excludedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkExcludedIP(excludedSubtreesIP,ip);}}  }
class C{  public PresentationData(){}  }
class C{  @Restrictions({@Restrict({"SYSTEM_ADMIN","SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SYSTEM_ADMIN","RESTRICTED_SECURITY_ADMIN"})}) public static void validatePasswords(SetupForm setup){  setup.validatePasswords();  if (Validation.hasErrors()) {    renderJSON(ValidationResponse.collectErrors());  } else {    renderJSON(ValidationResponse.valid());  }}  }
class C{  public double splitCritValue(Distribution train,Distribution test,Distribution defC){  return 0;}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public void deregister(TrainSchedule schedule){  if (schedule == null) {    return;  }  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.remove(schedule.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.OPERATION__NAME:    setName((String)newValue);  return;case FunctionblockPackage.OPERATION__PARAMS:getParams().clear();getParams().addAll((Collection<? extends Param>)newValue);return;case FunctionblockPackage.OPERATION__RETURN_TYPE:setReturnType((ReturnType)newValue);return;case FunctionblockPackage.OPERATION__DESCRIPTION:setDescription((String)newValue);return;case FunctionblockPackage.OPERATION__BREAKABLE:setBreakable((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected Expression variable(int opPos) throws TransformerException {  Variable var=new Variable();  opPos=getFirstChildPos(opPos);  int nsPos=getOp(opPos);  java.lang.String namespace=(OpCodes.EMPTY == nsPos) ? null : (java.lang.String)getTokenQueue().elementAt(nsPos);  java.lang.String localname=(java.lang.String)getTokenQueue().elementAt(getOp(opPos + 1));  QName qname=new QName(namespace,localname);  var.setQName(qname);  return var;}  }
class C{  @Override public Enumeration listOptions(){  Vector newVector=new Vector();  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tChange threshold to select activated neurons (no-winner-takes-all)\n","THR",0,"-THR"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  newVector.addElement(new Option("\tFast ARAM.\n","F",0,"-F"));  newVector.addElement(new Option("\tthreaded ARAM.\n","TF",0,"-TF"));  newVector.addElement(new Option("\tVotersr\n\t ","V",5,"-V <value>"));  newVector.addElement(new Option("\t Save neurons activity ARAM.\n","NA",0,"-NA"));  newVector.addElement(new Option("\t Save neurons activity in network ARAM.\n","Rt",0,"-Rt"));  return newVector.elements();}  }
class C{  public void run(){  try {    while (!kill) {      doQuery();      Thread.sleep((int)(Math.random() * 3000d));    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FieldFormat ver[");  buffer.append(ver);  buffer.append("] numflds [");  buffer.append(numflds);  buffer.append("] flddef [");  Integer key=null;  for (Iterator it=flddefs.keySet().iterator(); it.hasNext(); ) {    key=(Integer)it.next();    buffer.append("\n\t");    buffer.append(key);    buffer.append(" ");    buffer.append(flddefs.get(key));  }  buffer.append("\n]");  return buffer.toString();}  }
class C{  protected void paintLayers(Graphics g){synchronized (getTreeLock()) {    int i=getComponentCount() - 1;    if (i < 0) {      return;    }    for (; i >= 0; i--) {      Component comp=getComponent(i);      final boolean isLayer=comp instanceof Layer;      if (isLayer && comp.isVisible()) {        comp.paint(g);      }    }  }}  }
class C{  private CreateVolumeParams populateVolumeParams(URI volumeId,URI storageSystemId,URI neighborhoodId,String internalSiteName,boolean production,String rpCopyName,String wwn,int maxNumberOfSnapShots){  CreateVolumeParams volumeParams=new CreateVolumeParams();  volumeParams.setVirtualArray(neighborhoodId);  volumeParams.setProduction(production);  volumeParams.setInternalSiteName(internalSiteName);  volumeParams.setStorageSystem(storageSystemId);  volumeParams.setVolumeURI(volumeId);  volumeParams.setRpCopyName(rpCopyName);  volumeParams.setWwn(wwn);  volumeParams.setMaxNumberOfSnapShots(maxNumberOfSnapShots);  return volumeParams;}  }
class C{  private void closeInternal(boolean selfInitiated) throws IOException {  if ((debug != null) && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", called closeInternal(" + selfInitiated+ ")");  }  int state=getConnectionState();  boolean closeSocketCalled=false;  Throwable cachedThrowable=null;  try {switch (state) {case cs_START:      closeSocket(selfInitiated);    break;case cs_ERROR:  closeSocket();break;case cs_CLOSED:case cs_APP_CLOSED:break;default :synchronized (this) {if (((state=getConnectionState()) == cs_CLOSED) || (state == cs_ERROR) || (state == cs_APP_CLOSED)) {return;}if (state != cs_SENT_CLOSE) {try {  warning(Alerts.alert_close_notify);  connectionState=cs_SENT_CLOSE;} catch (Throwable th) {  connectionState=cs_ERROR;  cachedThrowable=th;  closeSocketCalled=true;  closeSocket(selfInitiated);}}}if (state == cs_SENT_CLOSE) {if (debug != null && Debug.isOn("ssl")) {System.out.println(Thread.currentThread().getName() + ", close invoked again; state = " + getConnectionState());}if (selfInitiated == false) {return;}synchronized (this) {while (connectionState < cs_CLOSED) {try {  this.wait();} catch (InterruptedException e) {}}}if ((debug != null) && Debug.isOn("ssl")) {System.out.println(Thread.currentThread().getName() + ", after primary close; state = " + getConnectionState());}return;}if (!closeSocketCalled) {closeSocketCalled=true;closeSocket(selfInitiated);}break;}}  finally {synchronized (this) {connectionState=(connectionState == cs_APP_CLOSED) ? cs_APP_CLOSED : cs_CLOSED;this.notifyAll();}if (closeSocketCalled) {disposeCiphers();}if (cachedThrowable != null) {if (cachedThrowable instanceof Error) throw (Error)cachedThrowable;if (cachedThrowable instanceof RuntimeException) throw (RuntimeException)cachedThrowable;}}}  }
class C{  public RandomBallCover(List<V> vecs,DistanceMetric dm,ExecutorService execServ){  this.dm=dm;  this.size=vecs.size();  this.allVecs=new ArrayList<V>(vecs);  if (execServ instanceof FakeExecutor)   this.distCache=dm.getAccelerationCache(allVecs); else   this.distCache=dm.getAccelerationCache(allVecs,execServ);  IntList allIndices=new IntList(vecs.size());  ListUtils.addRange(allIndices,0,size,1);  try {    setUp(allIndices,execServ);  } catch (  InterruptedException ex) {    try {      setUp(allIndices,new FakeExecutor());    } catch (    InterruptedException ex1) {    }  }}  }
class C{  @Override public void remove(ShockStatus status,StatusList statusList){  statusList.removeInternal(status);  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  Status nextStatus=statusList.getFirstStatusByClass(ShockStatus.class);  if (nextStatus != null) {    TurnNotifier.get().notifyInSeconds(60,new StatusRemover(statusList,nextStatus));  } else {    entity.sendPrivateText(NotificationType.SCENE_SETTING,"You are no longer shocked.");    entity.remove("status_" + status.getName());  }}  }
class C{  protected HashAttributeSet(Attribute attribute,Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;  add(attribute);}  }
class C{  public boolean hasEventStatus(){  return super.hasElement(EventStatus.KEY);}  }
class C{  final public void IntegerRange() throws ParseException {  ASTIntegerRange jjtn000=new ASTIntegerRange(this,JJTINTEGERRANGE);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    jj_consume_token(LBRACKET);switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:      jj_consume_token(WHITESPACE);    break;default :  jj_la1[12]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:case LCURLY:Reference();break;case NUMBER_LITERAL:NumberLiteral();break;default :jj_la1[13]=jj_gen;jj_consume_token(-1);throw new ParseException();}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[14]=jj_gen;;}jj_consume_token(DOUBLEDOT);switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[15]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:case LCURLY:Reference();break;case NUMBER_LITERAL:NumberLiteral();break;default :jj_la1[16]=jj_gen;jj_consume_token(-1);throw new ParseException();}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[17]=jj_gen;;}jj_consume_token(RBRACKET);} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}}  }
class C{  private boolean outputIsError(String output){  if (output == null)   return false;  boolean error=false;  for (int i=0; i < ERROR_OUTPUTS.length; i++) {    error=output.indexOf(ERROR_OUTPUTS[i]) > -1;    if (error)     return error;  }  return error;}  }
class C{  private SpeechletResponse handleNoSlotDialogRequest(final Intent intent,final Session session){  if (session.getAttributes().containsKey(SESSION_CITY)) {    String speechOutput="Please try again saying a day of the week, for example, Saturday";    return newAskResponse(speechOutput,speechOutput);  } else {    return handleSupportedCitiesRequest(intent,session);  }}  }
class C{  private void resetBounds(){switch (this.mode) {case HALF_ANCHORED:    Rectangle temp=new Rectangle(this.mouseTrackPoint.x,this.mouseTrackPoint.y,0,0);  setBounds(getNode1().getBounds().union(temp.getBounds()));this.relativeMouseTrackPoint=new Point(this.mouseTrackPoint);getRelativeMouseTrackPoint().translate(-getLocation().x,-getLocation().y);break;case ANCHORED_UNSELECTED:case ANCHORED_SELECTED:Rectangle r1=node1.getBounds();Rectangle r2=node2.getBounds();Point c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));Point c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));double angle=Math.atan2(c1.y - c2.y,c1.x - c2.x);angle+=Math.PI / 2;Point d=new Point((int)(offset * Math.cos(angle)),(int)(offset * Math.sin(angle)));r1.translate(d.x,d.y);r2.translate(d.x,d.y);setBounds(r1.getBounds().union(r2.getBounds()));break;default :throw new IllegalStateException();}}  }
class C{  public StoredHtmlSrc(String elementType,String srcLocation){  this.setElementType(elementType);  URL url=getClass().getClassLoader().getResource(srcLocation);  if (url == null) {    log.warning("failed to load html-src: " + srcLocation);    return;  }  InputStreamReader ins;  try {    ins=new InputStreamReader(url.openStream());    BufferedReader bufferedReader=new BufferedReader(ins);    String cssLine;    String result="";    while ((cssLine=bufferedReader.readLine()) != null)     result+=cssLine;    this.setTagText(result);  } catch (  IOException e1) {    log.warning("failed to load html-src: " + srcLocation);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.274 -0500",hash_original_method="AE07D7138DB6945AA08789E90E80B92B",hash_generated_method="1B289DA79CEA990160878E347151CD53") public void reload(boolean allowStale){  addTaint(allowStale);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  issuerDomain.encode(tmp);  subjectDomain.encode(tmp);  out.write(DerValue.tag_Sequence,tmp);}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public void loadConceptData(String locale){synchronized (sLoadingLock) {    if (!locale.equals(sLoadedLocale)) {      sConceptNames=new HashMap<>();      try (Cursor c=mContentResolver.query(ConceptNames.CONTENT_URI,new String[]{ConceptNames.CONCEPT_UUID,ConceptNames.NAME},ConceptNames.LOCALE + " = ?",new String[]{locale},null)){        while (c.moveToNext()) {          sConceptNames.put(c.getString(0),c.getString(1));        }      }       sConceptTypes=new HashMap<>();      try (Cursor c=mContentResolver.query(Concepts.CONTENT_URI,new String[]{Concepts.UUID,Concepts.CONCEPT_TYPE},null,null,null)){        while (c.moveToNext()) {          try {            sConceptTypes.put(c.getString(0),ConceptType.valueOf(c.getString(1)));          } catch (          IllegalArgumentException e) {          }        }      }       sConceptTypes.put(ConceptUuids.ADMISSION_DATE_UUID,ConceptType.DATE);      sLoadedLocale=locale;    }  }}  }
class C{  public GenericListModel(final Collection<? extends E> consumers){  if (consumers instanceof List) {    this.list=(List<? extends E>)consumers;  } else {    this.list=new ArrayList<E>(consumers);  }}  }
class C{  private static boolean doDeleteDir(File file,boolean recurse){  if (file != null && file.exists()) {    if (file.isFile() || !recurse) {      return file.delete();    }    String[] fnames=file.list();    File child=null;    for (int i=0; i < fnames.length; i++) {      child=new File(file,fnames[i]);      if (!doDeleteDir(child,recurse)) {        return false;      }    }    return file.delete();  }  return true;}  }
class C{  private void pad(long pos) throws IOException {  long currIndex=cacheStart + cache.size() - 1;  long lastIndex=pos / BUFFER_LENGTH;  long numNewBuffers=lastIndex - currIndex;  for (long i=0; i < numNewBuffers; i++) {    try {      cache.add(new byte[BUFFER_LENGTH]);    } catch (    OutOfMemoryError e) {      throw new IOException("No memory left for cache!");    }  }}  }
class C{  private void connect(final String existingSessionID){  final Map<String,Object> data=new HashMap<String,Object>();  data.put(Protocol.Field.MESSAGE,Protocol.Message.CONNECT);  data.put(Protocol.Field.VERSION,mDdpVersion);  data.put(Protocol.Field.SUPPORT,SUPPORTED_DDP_VERSIONS);  if (existingSessionID != null) {    data.put(Protocol.Field.SESSION,existingSessionID);  }  send("",data);}  }
class C{  @Override protected void drawCompositeImage(int width,int height){  Display display=Display.getDefault();  Image image=new Image(display,ARROW_SIZE,ARROW_SIZE * 2);  GC gc=new GC(image);  Color triangle=createColor(SWT.COLOR_LIST_FOREGROUND,SWT.COLOR_LIST_BACKGROUND,20,display);  Color aliasing=createColor(SWT.COLOR_LIST_FOREGROUND,SWT.COLOR_LIST_BACKGROUND,30,display);  gc.setBackground(triangle);  if (fLTR) {    gc.fillPolygon(new int[]{mirror(0),0,mirror(ARROW_SIZE),ARROW_SIZE,mirror(0),ARROW_SIZE * 2});  } else {    gc.fillPolygon(new int[]{ARROW_SIZE,0,0,ARROW_SIZE,ARROW_SIZE,ARROW_SIZE * 2});  }  gc.setForeground(aliasing);  gc.drawLine(mirror(0),1,mirror(ARROW_SIZE - 1),ARROW_SIZE);  gc.drawLine(mirror(ARROW_SIZE - 1),ARROW_SIZE,mirror(0),(ARROW_SIZE * 2) - 1);  gc.dispose();  triangle.dispose();  aliasing.dispose();  ImageData imageData=image.getImageData();  for (int y=1; y < ARROW_SIZE; y++) {    for (int x=0; x < y; x++) {      imageData.setAlpha(mirror(x),y,255);    }  }  for (int y=0; y < ARROW_SIZE; y++) {    for (int x=0; x <= y; x++) {      imageData.setAlpha(mirror(x),(ARROW_SIZE * 2) - y - 1,255);    }  }  int offset=0;  if (!fLTR) {    offset=-1;  }  drawImage(imageData,((width / 2) - (ARROW_SIZE / 2)) + offset,(height / 2) - ARROW_SIZE - 1);  image.dispose();}  }
class C{  public int currentBuffer(int target){  if (target == GLES20.GL_ARRAY_BUFFER) {    return this.arrayBufferId;  } else   if (target == GLES20.GL_ELEMENT_ARRAY_BUFFER) {    return this.elementArrayBufferId;  } else {    return 0;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Qty=").append(Qty).append(",Cost=").append(Cost);  return sb.toString();}  }
class C{  protected void createHttpClient(boolean recreateClientWhenExists,ConfigData configData) throws Exception {  if (_client != null) {    if (recreateClientWhenExists)     try {      _client.stop();    } catch (    Exception exc) {    } else     return;  }  SslContextFactory factory=new SslContextFactory(false);  if (_sslProtocols != null)   factory.setIncludeProtocols(_sslProtocols);  String isSslTrustAll=configData.getProperty("ssl.trustall");  boolean sslTrustAll="true".equalsIgnoreCase(isSslTrustAll);  factory.setTrustAll(sslTrustAll);  HttpClient client=new HttpClient(factory);  client.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);  client.setMaxRedirects(_maxRedirects);  if (_maxRedirects > 0)   client.registerListener("com.htmlspeed.server.RedirectListener");  String param=configData.getProperty("max.threads");  if (param == null)   client.setThreadPool(new QueuedThreadPool(2000)); else   client.setThreadPool(new QueuedThreadPool(Integer.parseInt(param)));  ((QueuedThreadPool)client.getThreadPool()).setName(SERVLET_NAME);  param=configData.getProperty("max.connections");  if (param == null)   client.setMaxConnectionsPerAddress(2000); else   client.setMaxConnectionsPerAddress(Integer.parseInt(param));  param=configData.getProperty("timeout");  if (param != null)   client.setTimeout(Long.parseLong(param)); else   client.setTimeout(30000);  param=configData.getProperty("idle.timeout");  if (param != null)   client.setIdleTimeout(Long.parseLong(param)); else   client.setIdleTimeout(300000);  param=configData.getProperty("connect.timeout");  if (param != null)   client.setConnectTimeout(Integer.parseInt(param)); else   client.setConnectTimeout(75000);  param=configData.getProperty("request.header.size");  if (param != null)   client.setRequestHeaderSize(Integer.parseInt(param));  param=configData.getProperty("request.buffer.size");  if (param != null)   client.setRequestBufferSize(Integer.parseInt(param));  param=configData.getProperty("response.header.size");  if (param != null)   client.setResponseHeaderSize(Integer.parseInt(param));  param=configData.getProperty("response.buffer.size");  if (param != null)   client.setResponseBufferSize(Integer.parseInt(param));  client.start();  _client=client;}  }
class C{  private int readWithQuotes(char[] chars,int start,int len,StrBuilder workArea,List tokens,int quoteStart,int quoteLen){  workArea.clear();  int pos=start;  boolean quoting=(quoteLen > 0);  int trimStart=0;  while (pos < len) {    if (quoting) {      if (isQuote(chars,pos,len,quoteStart,quoteLen)) {        if (isQuote(chars,pos + quoteLen,len,quoteStart,quoteLen)) {          workArea.append(chars,pos,quoteLen);          pos+=(quoteLen * 2);          trimStart=workArea.size();          continue;        }        quoting=false;        pos+=quoteLen;        continue;      }      workArea.append(chars[pos++]);      trimStart=workArea.size();    } else {      int delimLen=getDelimiterMatcher().isMatch(chars,pos,start,len);      if (delimLen > 0) {        addToken(tokens,workArea.substring(0,trimStart));        return pos + delimLen;      }      if (quoteLen > 0) {        if (isQuote(chars,pos,len,quoteStart,quoteLen)) {          quoting=true;          pos+=quoteLen;          continue;        }      }      int ignoredLen=getIgnoredMatcher().isMatch(chars,pos,start,len);      if (ignoredLen > 0) {        pos+=ignoredLen;        continue;      }      int trimmedLen=getTrimmerMatcher().isMatch(chars,pos,start,len);      if (trimmedLen > 0) {        workArea.append(chars,pos,trimmedLen);        pos+=trimmedLen;        continue;      }      workArea.append(chars[pos++]);      trimStart=workArea.size();    }  }  addToken(tokens,workArea.substring(0,trimStart));  return -1;}  }
class C{  public static Individuum nullIndividuum(int dim){  short[] gene=new short[dim];  Arrays.fill(gene,DONT_CARE);  return new Individuum(0.0,gene);}  }
class C{  public ZoneRulesBuilder addRuleToWindow(int year,int month,int dayOfMonthIndicator,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefinition,int savingAmountSecs){  return addRuleToWindow(year,year,month,dayOfMonthIndicator,-1,time,timeEndOfDay,timeDefinition,savingAmountSecs);}  }
class C{  @Override public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseQuotedIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return true;  }  return false;}  }
class C{  @Override protected void doGet(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  Resource resource=request.getResourceResolver().getResource(ASSET_LIST_COMPONENT_PATH);  request.getRequestDispatcher(resource).include(request,response);}  }
class C{  public Vector4i negate(){  x=-x;  y=-y;  z=-z;  w=-w;  return this;}  }
class C{  public boolean isLibraryClass(){  return Scene.v().getLibraryClasses().contains(this);}  }
class C{  private boolean maybeSeekForCues(PositionHolder seekPosition,long currentPosition){  if (seekForCues) {    seekPositionAfterBuildingCues=currentPosition;    seekPosition.position=cuesContentPosition;    seekForCues=false;    return true;  }  if (sentSeekMap && seekPositionAfterBuildingCues != UNKNOWN) {    seekPosition.position=seekPositionAfterBuildingCues;    seekPositionAfterBuildingCues=UNKNOWN;    return true;  }  return false;}  }
class C{  public IOException(Throwable cause){  super(cause == null ? null : cause.toString(),cause);}  }
class C{  public static boolean checkConnected(ConnectivityManager cm){  return checkConnected(cm,Controller.getInstance().onlyUseWifi(),false);}  }
class C{  public void addCondition(final ValueExpr condition){  final ValueExpr newCondition=condition.clone();  if (this.condition == null) {    setCondition(newCondition);  } else {    setCondition(new And(this.condition,newCondition));  }  this.condition.visit(visitor);  if (trivialCondition(this.condition)) {    this.condition=null;  }}  }
class C{  private BusinessObjectDataStatus createNotAvailableBusinessObjectDataStatus(StorageUnitEntity storageUnitEntity,Set<BusinessObjectDataEntity> archivedBusinessObjectDataEntities){  BusinessObjectDataEntity businessObjectDataEntity=storageUnitEntity.getBusinessObjectData();  BusinessObjectDataStatus businessObjectDataStatus=new BusinessObjectDataStatus();  businessObjectDataStatus.setBusinessObjectFormatVersion(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion());  businessObjectDataStatus.setPartitionValue(businessObjectDataEntity.getPartitionValue());  businessObjectDataStatus.setSubPartitionValues(businessObjectDataHelper.getSubPartitionValues(businessObjectDataEntity));  businessObjectDataStatus.setBusinessObjectDataVersion(businessObjectDataEntity.getVersion());  if (storageUnitEntity.getStatus().getAvailable()) {    businessObjectDataStatus.setReason(businessObjectDataEntity.getStatus().getCode());  } else   if (archivedBusinessObjectDataEntities.contains(storageUnitEntity.getBusinessObjectData())) {    businessObjectDataStatus.setReason(BusinessObjectDataServiceImpl.REASON_ARCHIVED);  } else {    businessObjectDataStatus.setReason(BusinessObjectDataServiceImpl.REASON_NO_ENABLED_STORAGE_UNIT);  }  return businessObjectDataStatus;}  }
class C{  @Override public final String leftSide(Instances data){  return data.attribute(m_attIndex).name();}  }
class C{  public void allowLoops(final boolean allowLoops){  this.allowLoops=allowLoops;}  }
class C{  public RecentFilesHandlerWithCommandline(String propsFile,String propPrefix,int maxCount,M menu){  super(propsFile,propPrefix,maxCount,menu);}  }
class C{  public void addAll(Collection<? extends T> collection){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.addAll(collection);    } else {      mObjects.addAll(collection);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public SoundInfo(Sound sound,float volume,float pitch){  this.sound=sound;  this.volume=volume;  this.pitch=pitch;}  }
class C{  @Override public String toString(){  return name + ": " + value;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  private String removeNonce(String topologyId){  return topologyId.substring(0,topologyId.substring(0,topologyId.lastIndexOf("-")).lastIndexOf("-"));}  }
class C{  public static void swapPivot(double[][] source,int diag,double[][] s,double[][] t){  int swapRow=diag;  int swapCol=diag;  double maxValue=Math.abs(source[diag][diag]);  int rows=source.length;  int cols=source[0].length;  double abs=0;  double[] r=null;  for (int row=diag; row < rows; row++) {    r=source[row];    for (int col=diag; col < cols; col++) {      abs=Math.abs(r[col]);      if (abs > maxValue) {        maxValue=abs;        swapRow=row;        swapCol=col;      }    }  }  if (swapRow != diag) {    swapRows(source,swapRow,diag);    swapRows(t,swapRow,diag);  }  if (swapCol != diag) {    swapCols(source,swapCol,diag);    swapCols(s,swapCol,diag);  }}  }
class C{  public boolean isBoolean(){  return value instanceof Boolean;}  }
class C{  public MutableInt(final int value){  super();  this.value=value;}  }
class C{  @Override public DiscussionObject copy(){  return new DiscussionObject(this);}  }
class C{  public Composer bottomHitCallback(@NonNull AnimCallBack animCallBack){  mBottomHitCallback=animCallBack;  return this;}  }
class C{  private void initializeCssOnErrorSet(){  if (cssOnErrorSet == null) {    cssOnErrorSet=new ArrayList<>();  }  cssOnErrorSet.clear();}  }
class C{  private StringBuilder generateReportOutputStream(final ReportMailingJob reportMailingJob,final ReportMailingJobEmailAttachmentFileFormat emailAttachmentFileFormat,final MultivaluedMap<String,String> reportParams,final String reportName,final StringBuilder errorLog){  try {    final String reportType=this.readReportingService.getReportType(reportName);    final ReportingProcessService reportingProcessService=this.reportingProcessServiceProvider.findReportingProcessService(reportType);    if (reportingProcessService != null) {      final Response processReport=reportingProcessService.processRequest(reportName,reportParams);      final Object reponseObject=(processReport != null) ? processReport.getEntity() : null;      if (reponseObject != null && reponseObject.getClass().equals(ByteArrayOutputStream.class)) {        final ByteArrayOutputStream byteArrayOutputStream=ByteArrayOutputStream.class.cast(reponseObject);        final String fileLocation=FileSystemContentRepository.FINERACT_BASE_DIR + File.separator + "";        final String fileNameWithoutExtension=fileLocation + File.separator + reportName;        if (!new File(fileLocation).isDirectory()) {          new File(fileLocation).mkdirs();        }        if ((byteArrayOutputStream == null) || byteArrayOutputStream.size() == 0) {          errorLog.append("Report processing failed, empty output stream created");        } else         if ((errorLog != null && errorLog.length() == 0) && (byteArrayOutputStream.size() > 0)) {          final String fileName=fileNameWithoutExtension + "." + emailAttachmentFileFormat.getValue();          this.sendReportFileToEmailRecipients(reportMailingJob,fileName,byteArrayOutputStream,errorLog);        }      } else {        errorLog.append("Response object entity is not equal to ByteArrayOutputStream ---------- ");      }    } else {      errorLog.append("ReportingProcessService object is null ---------- ");    }  } catch (  Exception e) {    errorLog.append("The ReportMailingJobWritePlatformServiceImpl.generateReportOutputStream method threw an Exception: " + e + " ---------- ");  }  return errorLog;}  }
class C{  public int destroyParticlesInShape(Shape shape,Transform xf,boolean callDestructionListener){  assert (isLocked() == false);  if (isLocked()) {    return 0;  }  return m_particleSystem.destroyParticlesInShape(shape,xf,callDestructionListener);}  }
class C{  @Override public boolean removeFromWorld(){  System.getProperties().remove("stendhal.minetown");  for (  LoadableContent loadableContent : content) {    loadableContent.removeFromWorld();  }  return true;}  }
class C{  public void reportFailedAttempt(){  if (DEBUG)   Log.d(TAG,"reportFailedAttempt()");  mHandler.sendEmptyMessage(MSG_REPORT_FAILED_ATTEMPT);}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Candle) {    Candle candle=(Candle)objectToCompare;    if (this.getTradingday().equals(candle.getTradingday())) {      if (this.getContract().equals(candle.getContract())) {        if (this.getStartPeriod().equals(candle.getStartPeriod())) {          if (this.getEndPeriod().equals(candle.getEndPeriod())) {            if (this.getHigh().equals(candle.getHigh())) {              if (this.getLow().equals(candle.getLow())) {                if (this.getOpen().equals(candle.getOpen())) {                  if (this.getClose().equals(candle.getClose())) {                    return true;                  }                }              }            }          }        }      }    }  }  return false;}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  @Override protected DistributionSetMetadata createMetadata(final DistributionSet entity,final String key,final String value){  final DistributionSetMetadata dsMetaData=distributionSetManagement.createDistributionSetMetadata(entityFactory.generateDistributionSetMetadata(entity,key,value));  setSelectedEntity(dsMetaData.getDistributionSet());  return dsMetaData;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STM");  translateAll(environment,instruction,"STM",instructions);}  }
class C{  private void restorePanelState(SparseArray<Parcelable> icicles){  PanelFeatureState st;  int curFeatureId;  for (int i=icicles.size() - 1; i >= 0; i--) {    curFeatureId=icicles.keyAt(i);    st=getPanelState(curFeatureId,false);    if (st == null) {      continue;    }    st.onRestoreInstanceState(icicles.get(curFeatureId));    invalidatePanelMenu(curFeatureId);  }}  }
class C{  public ScaleAndIndex index(int index){  return new ScaleAndIndex(scale,index);}  }
class C{  public VostroItem(RegularTimePeriod period,BigDecimal vostro){  super(period,new Vostro(vostro));}  }
class C{  public void unsetMatchColumn(String[] columnIdxes) throws SQLException {  for (int j=0; j < columnIdxes.length; j++) {    if (!columnIdxes[j].equals(strMatchColumns.get(j))) {      throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.matchcols").toString());    }  }  for (int i=0; i < columnIdxes.length; i++) {    strMatchColumns.set(i,null);  }}  }
class C{  public static String cot(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function cot : " + params.length);  return "cot(" + params[0] + ")";}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL___EXPORTED_NAME:    return exportedName();}return super.eInvoke(operationID,arguments);}  }
class C{  @Deprecated public IOObject[] apply() throws OperatorException {  throw new UnsupportedOperationException("apply() is deprecated. Implement doWork().");}  }
class C{  public Camera(Cameras camera){  makeCamera(camera.getID());}  }
class C{  public static boolean isKnownAsDefinition(BytecodeInstruction instruction){  return registeredDefs.containsKey(instruction);}  }
class C{  public void checkClientTrusted(X509Certificate[] cert,String authType) throws CertificateException {}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  protected String[] explode(String arrayAsString){  arrayAsString=arrayAsString.trim();  if (arrayAsString.startsWith("(") && arrayAsString.endsWith(")")) {    arrayAsString=arrayAsString.substring(1,arrayAsString.length() - 1);  }  List v=StringUtil.tokenizeString(arrayAsString,',');  String a[]=new String[v.size()];  for (int i=0; i < v.size(); i++) {    a[i]=stripQuotes(v.get(i).toString().trim());  }  return a;}  }
class C{  private Map<String,Integer> collectAllIdentifiersFromDatabase(){  Map<String,Integer> mapFromDB=new HashMap<String,Integer>();  try {    mapFromDB=DAORegister.get().get(AchievementDAO.class).loadIdentifierIdPairs();  } catch (  SQLException e) {    logger.error("Error while loading Identifier to id map for achievements.",e);  }  return mapFromDB;}  }
class C{  @KnownFailure("If no schema is associated: returns empty string where actually null be returned?. Ticket 98") public void test_getTablesLjava_lang_StringLjava_lang_StringLjava_lang_String$Ljava_lang_String() throws SQLException {  String[] tablesName={VIEW_NAME,DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  String[] tablesType={"TABLE","VIEW"};  Arrays.sort(tablesName);  Arrays.sort(tablesType);  ResultSet rs=meta.getTables(null,null,null,null);  while (rs.next()) {    assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);    assertNull("Wrong table schema: " + rs.getString("TABLE_SCHEM"),rs.getString("TABLE_SCHEM"));    assertTrue("Wrong table type",Arrays.binarySearch(tablesType,rs.getString("TABLE_TYPE")) > -1);    assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  }  rs.close();  rs=meta.getTables(conn.getCatalog(),null,null,new String[]{"SYSTEM TABLE","LOCAL TEMPORARY"});  assertFalse("Some tables exist",rs.next());  rs.close();  rs=meta.getTables(conn.getCatalog(),null,null,new String[]{"VIEW","LOCAL TEMPORARY"});  assertTrue("No tables exist",rs.next());  assertEquals("Wrong table name",VIEW_NAME,rs.getString("TABLE_NAME"));  assertNull("Wrong table schema: " + rs.getString("TABLE_SCHEM"),rs.getString("TABLE_SCHEM"));  assertEquals("Wrong table type","VIEW",rs.getString("TABLE_TYPE"));  assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  assertFalse("Wrong size of result set",rs.next());  assertFalse("Some tables exist",rs.next());  rs.close();  rs=meta.getTables(null,null,"%",null);  while (rs.next()) {    assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);    assertNull("Wrong table schema ",rs.getString("TABLE_SCHEM"));    assertTrue("Wrong table type",Arrays.binarySearch(tablesType,rs.getString("TABLE_TYPE")) > -1);    assertEquals("Wrong parameter REMARKS","",rs.getString("REMARKS"));  }  rs.close();  conn.close();  try {    meta.getTables(null,null,null,null);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public String canonicalPath(String path) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(path,charsetName);  if (debug != null) {    debug.println("Sending SSH_FXP_REALPATH...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_REALPATH,req_id,tw.getBytes());  byte[] resp=receiveMessage(34000);  if (debug != null) {    debug.println("Got REPLY.");    debug.flush();  }  TypesReader tr=new TypesReader(resp);  int t=tr.readByte();  int rep_id=tr.readUINT32();  if (rep_id != req_id)   throw new IOException("The server sent an invalid id field.");  if (t == Packet.SSH_FXP_NAME) {    int count=tr.readUINT32();    if (count != 1)     throw new IOException("The server sent an invalid SSH_FXP_NAME packet.");    return tr.readString(charsetName);  }  if (t != Packet.SSH_FXP_STATUS)   throw new IOException("The SFTP server sent an unexpected packet type (" + t + ")");  int errorCode=tr.readUINT32();  throw new SFTPException(tr.readString(),errorCode);}  }
class C{  public ContainerVmPeProvisionerSimple(double availableMips){  super(availableMips);  setPeTable(new HashMap<String,ArrayList<Double>>());}  }
class C{  private static void createAndShowGUI(JPanel jtop){  JFrame frame=new JFrame("JTop");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  JComponent contentPane=(JComponent)frame.getContentPane();  contentPane.add(jtop,BorderLayout.CENTER);  contentPane.setOpaque(true);  contentPane.setBorder(new EmptyBorder(12,12,12,12));  frame.setContentPane(contentPane);  frame.pack();  frame.setVisible(true);}  }
class C{  @Override protected IMember resolveMember() throws JavaModelException {  char[] signature=fProposal.getSignature();  String typeName=SignatureUtil.stripSignatureToFQN(String.valueOf(signature));  return fJavaProject.findType(typeName);}  }
class C{  public RedirectRequiredException(int sc,String location){  super("Redirect Required");  setHttpErrorCodeOverride(sc);  getHttpHeaders().put(LOCATION,Collections.singletonList(location));}  }
class C{  public ConnectionResult connect(Transaction transaction,ConnectMode mode){  if (!transaction.getHash().equals(outpoint.getHash()))   return ConnectionResult.NO_SUCH_TX;  checkElementIndex((int)outpoint.getIndex(),transaction.getOutputs().size(),"Corrupt transaction");  TransactionOutput out=transaction.getOutput((int)outpoint.getIndex());  if (!out.isAvailableForSpending()) {    if (out.parentTransaction.equals(outpoint.fromTx)) {      return ConnectionResult.SUCCESS;    } else     if (mode == ConnectMode.DISCONNECT_ON_CONFLICT) {      out.markAsUnspent();    } else     if (mode == ConnectMode.ABORT_ON_CONFLICT) {      outpoint.fromTx=checkNotNull(out.parentTransaction);      return TransactionInput.ConnectionResult.ALREADY_SPENT;    }  }  connect(out);  return TransactionInput.ConnectionResult.SUCCESS;}  }
class C{  public int readUI16() throws IOException {  synchBits();  int ui16=in.read();  if (ui16 < 0) {    throw new IOException("Unexpected end of input");  }  int val=in.read();  if (val < 0) {    throw new IOException("Unexpected end of input");  }  ui16+=val << 8;  bytesRead+=2;  return ui16;}  }
class C{  public Capabilities build(){  return new Capabilities(this);}  }
class C{  boolean isRightGrantedRecursive(Table table,int rightMask){  Right right;  if (grantedRights != null) {    if (table != null) {      right=grantedRights.get(table.getSchema());      if (right != null) {        if ((right.getRightMask() & rightMask) == rightMask) {          return true;        }      }    }    right=grantedRights.get(table);    if (right != null) {      if ((right.getRightMask() & rightMask) == rightMask) {        return true;      }    }  }  if (grantedRoles != null) {    for (    RightOwner role : grantedRoles.keySet()) {      if (role.isRightGrantedRecursive(table,rightMask)) {        return true;      }    }  }  return false;}  }
class C{  private void loadDBCharSize(){  s_logger.log(Level.FINE,"loadDBCharSize",getDirection());  String sql=null;  m_charDevisor=1;  int vc2Size=1;  int nvc2Size=1;  sql=s_dbEngine.sqlMetadata_openCharSetTest(getVendor(),getCatalog(),getSchema());  if (sql != null && sql.length() > 0) {    try {      Statement stmt=setStatement();      executeUpdate(stmt,sql,false,true);      DatabaseMetaData md=m_connection.getMetaData();      ResultSet rs=md.getColumns(null,null,"CHARSETTEST",null);      while (getResultSetNext(rs)) {        String c=getResultSetString(rs,"COLUMN_NAME");        int i=getResultSetInt(rs,"COLUMN_SIZE");        if (c.equalsIgnoreCase("VC2"))         vc2Size=i; else         nvc2Size=i;      }      releaseResultSet(rs);      releaseStatement(stmt);    } catch (    SQLException e) {      s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"loadDBCharSizeError",new Object[]{getDirection(),e.getMessage()});    }  }  sql=s_dbEngine.sqlMetadata_closeCharSetTest(getVendor(),getCatalog(),getSchema());  if (sql != null && sql.length() > 0) {    Statement stmt=setStatement();    executeUpdate(stmt,sql,false,true);    releaseStatement(stmt);  }  if (vc2Size != 0)   m_charDevisor=nvc2Size / vc2Size;  s_logger.log(Level.FINE,"dbCharSizeLoaded",Integer.toString(m_charDevisor));  s_logger.flush();}  }
class C{  protected Change createUndoChange(Change[] childUndos){  return new CompositeChange(getName(),childUndos);}  }
class C{  public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (verbose) {    log("Creating/getting cached template...");  }  Template template;  long getMillis;  String name;  File file=getScriptUriAsFile(request);  if (file != null) {    name=file.getName();    if (!file.exists()) {      response.sendError(HttpServletResponse.SC_NOT_FOUND);      return;    }    if (!file.canRead()) {      response.sendError(HttpServletResponse.SC_FORBIDDEN,"Can not read \"" + name + "\"!");      return;    }    getMillis=System.currentTimeMillis();    template=getTemplate(file);    getMillis=System.currentTimeMillis() - getMillis;  } else {    name=getScriptUri(request);    URL url=servletContext.getResource(name);    getMillis=System.currentTimeMillis();    template=getTemplate(url);    getMillis=System.currentTimeMillis() - getMillis;  }  ServletBinding binding=new ServletBinding(request,response,servletContext);  setVariables(binding);  response.setContentType(CONTENT_TYPE_TEXT_HTML + "; charset=" + encoding);  response.setStatus(HttpServletResponse.SC_OK);  Writer out=(Writer)binding.getVariable("out");  if (out == null) {    out=response.getWriter();  }  if (verbose) {    log("Making template \"" + name + "\"...");  }  long makeMillis=System.currentTimeMillis();  template.make(binding.getVariables()).writeTo(out);  makeMillis=System.currentTimeMillis() - makeMillis;  if (generateBy) {    StringBuilder sb=new StringBuilder(100);    sb.append("\n<!-- Generated by Groovy TemplateServlet [create/get=");    sb.append(Long.toString(getMillis));    sb.append(" ms, make=");    sb.append(Long.toString(makeMillis));    sb.append(" ms] -->\n");    out.write(sb.toString());  }  response.flushBuffer();  if (verbose) {    log("Template \"" + name + "\" request responded. [create/get="+ getMillis+ " ms, make="+ makeMillis+ " ms]");  }}  }
class C{  public ExtentTest info(Throwable t){  log(Status.INFO,t);  return this;}  }
class C{  public static RefreshMemberSnapshotResponse create(DistributionManager dm,InternalDistributedMember recipient){  RefreshMemberSnapshotResponse m=new RefreshMemberSnapshotResponse();  m.setRecipient(recipient);  try {    DistributedSystem sys=dm.getSystem();    GemFireCacheImpl c=(GemFireCacheImpl)CacheFactory.getInstance(sys);    m.snapshot=new GemFireMemberStatus(c);  } catch (  Exception ex) {    m.snapshot=null;  }  return m;}  }
class C{  public <T extends GphotoEntry>T insert(GphotoEntry<?> parent,T entry) throws IOException, ServiceException {  String feedUrl=getLinkByRel(parent.getLinks(),Link.Rel.FEED);  return service.insert(new URL(feedUrl),entry);}  }
class C{  @Override public String brpoplpush(String source,String destination,int timeout){  client.brpoplpush(source,destination,timeout);  client.setTimeoutInfinite();  try {    return client.getBulkReply();  }  finally {    client.rollbackTimeout();  }}  }
class C{  public boolean pointOutside(final double x,final double y,final double z){  return (x * x + y * y) * inverseAb * inverseAb + z * z * inverseC* inverseC - 1.0 > Vector.MINIMUM_RESOLUTION;}  }
class C{  public String[] jplot(double[] x,double[] y,double[]... args){  if (args.length % 2 != 0) {    throw new IllegalArgumentException("There should be even number of " + "input arrays! It is: " + args.length);  }  int noOfSeries=args.length / 2 + 1;  String[] seriesKeys=new String[noOfSeries];  seriesKeys[0]=jplot(x,y,"y","")[0];  int keyIndex=1;  String colors[]={"y","c","m","k","r","g","b"};  for (int i=0; i < args.length; i+=2) {    double xa[]=args[i];    double ya[]=args[i + 1];    seriesKeys[keyIndex++]=addPlot(xa,ya,colors[i % colors.length],"");  }  return seriesKeys;}  }
class C{  public void createStory(RoutingContext context){  context.response().setChunked(true);  context.response().write("<!DOCTYPE html>" + "<html lang=\"en\">" + "<head>"+ "    <title>Index</title>"+ "    <link rel=\"stylesheet\" href=\"/components/bootstrap/dist/css/bootstrap.min.css\">"+ "    <link rel=\"stylesheet\" href=\"http://bootswatch.com/paper/bootstrap.min.css\"/>"+ "</head>"+ "<body>"+ "<div class=\"jumbotron\">"+ "<div class=\"container\">"+ "<h2>Try Refresh ... </h2>");  if (!flag) {    context.response().write("<p>This is a simple result that tells the story</p>");  } else {    context.response().write("<p>This is another story</p>");  }  context.response().end("<a class=\"btn btn-primary\" href=\"/\" role=\"button\">Go Back</a>" + "</div></div>" + "<script src=\"/components/jquery/dist/jquery.min.js\"></script>"+ "<script src=\"/components/bootstrap/dist/js/bootstrap.min.js\"></script>"+ "</body>"+ "</html>");  flag=!flag;}  }
class C{  public void removeListener(Listener<TunerConfigurationEvent> listener){  mConfigurationChangeListeners.remove(listener);}  }
class C{  @HLEFunction(nid=0x8ABADD51,version=150) public int sceNetApctlAddHandler(TPointer handler,int handlerArg){  int uid=SceUidManager.getNewUid(uidPurpose);  ApctlHandler apctlHandler=new ApctlHandler(uid,handler.getAddress(),handlerArg);  apctlHandlers.put(uid,apctlHandler);  return uid;}  }
class C{  public BasicElevationModelBulkDownloader(BasicElevationModel elevationModel,Sector sector,double resolution,FileStore fileStore,BulkRetrievalListener listener){  super(elevationModel,sector,resolution,fileStore,listener);  this.elevationModel=elevationModel;  this.level=computeLevelForResolution(sector,resolution);}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.182 -0500",hash_original_method="029397BC692B989F9FCA48D48FDB9479",hash_generated_method="D01052788D1D7136B5EB7BB540B7EA01") public void sendStringSync(String text){  if (text == null) {    return;  }  KeyCharacterMap keyCharacterMap=KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);  KeyEvent[] events=keyCharacterMap.getEvents(text.toCharArray());  if (events != null) {    for (int i=0; i < events.length; i++) {      sendKeySync(events[i]);    }  }}  }
class C{  @Override public String toString(){  try {    if (type == INDIRECT) {      StringBuffer str=new StringBuffer();      str.append("Indirect to #" + ((PDFXref)value).getID() + (((PDFXref)value).getCompressed() ? " comp" : ""));      try {        PDFObject obj=cachedDereference();        str.append("\n" + (obj == null ? "<ref>" : obj.toString()));      } catch (      Throwable t) {        str.append(t.toString());      }      return str.toString();    } else     if (type == BOOLEAN) {      return "Boolean: " + (getBooleanValue() ? "true" : "false");    } else     if (type == NUMBER) {      return "Number: " + getDoubleValue();    } else     if (type == STRING) {      return "String: " + getStringValue();    } else     if (type == NAME) {      return "Name: /" + getStringValue();    } else     if (type == ARRAY) {      return "Array, length=" + ((PDFObject[])value).length;    } else     if (type == DICTIONARY) {      StringBuffer sb=new StringBuffer();      PDFObject obj=getDictRef("Type");      if (obj != null) {        sb.append(obj.getStringValue());        obj=getDictRef("Subtype");        if (obj == null) {          obj=getDictRef("S");        }        if (obj != null) {          sb.append("/" + obj.getStringValue());        }      } else {        sb.append("Untyped");      }      sb.append(" dictionary. Keys:");      HashMap hm=(HashMap)value;      Iterator it=hm.entrySet().iterator();      Map.Entry entry;      while (it.hasNext()) {        entry=(Map.Entry)it.next();        sb.append("\n   " + entry.getKey() + "  "+ entry.getValue());      }      return sb.toString();    } else     if (type == STREAM) {      byte[] st=getStream();      if (st == null) {        return "Broken stream";      }      return "Stream: [[" + new String(st,0,st.length > 30 ? 30 : st.length) + "]]";    } else     if (type == NULL) {      return "Null";    } else     if (type == KEYWORD) {      return "Keyword: " + getStringValue();    } else {      return "Whoops!  big error!  Unknown type";    }  } catch (  IOException ioe) {    return "Caught an error: " + ioe;  }}  }
class C{  private void initDHKeys(DistributionConfig config) throws Exception {  dhSKAlgo=config.getSecurityUDPDHAlgo();  if ((dhSKAlgo != null && dhSKAlgo.length() > 0)) {    KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DH");    DHParameterSpec dhSpec=new DHParameterSpec(dhP,dhG,dhL);    keyGen.initialize(dhSpec);    KeyPair keypair=keyGen.generateKeyPair();    dhPrivateKey=keypair.getPrivate();    dhPublicKey=keypair.getPublic();  }}  }
class C{  public void transition(CopycatServer.State state){  checkThread();  if (this.state != null && state == this.state.type()) {    return;  }  LOGGER.info("{} - Transitioning to {}",cluster.member().address(),state);  try {    this.state.close().get();  } catch (  InterruptedException|ExecutionException e) {    throw new IllegalStateException("failed to close Raft state",e);  }  try {    this.state=createState(state);    this.state.open().get();  } catch (  InterruptedException|ExecutionException e) {    throw new IllegalStateException("failed to initialize Raft state",e);  }  stateChangeListeners.forEach(null);}  }
class C{  public void alter(Instance instance,Transform matrix,AlphaTransform cxform,int ratio){  Placement placement=new Placement(instance,matrix,cxform,null,ratio,-1,frameNumber,true,false,null);  placements.add(placement);}  }
class C{  public static <K,V>SynchronizedBagMultimap<K,V> of(MutableBagMultimap<K,V> multimap){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedBagMultimap for null");  }  return new SynchronizedBagMultimap<>(multimap);}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=DTM.NULL;  m_map[m_firstFree + 1]=DTM.NULL;}  }
class C{  public MultiplePathsFromGCRootsRecord[] nextLevel(){  int new_level=level + 1;  HashMapIntObject<MultiplePathsFromGCRootsRecord> nextLevelRecords=new HashMapIntObject<MultiplePathsFromGCRootsRecord>();  for (  int[] path : paths) {    if (path != null && (path.length - new_level - 1 >= 0)) {      MultiplePathsFromGCRootsRecord record=nextLevelRecords.get(path[path.length - new_level - 1]);      if (record == null) {        record=new MultiplePathsFromGCRootsRecord(path[path.length - new_level - 1],new_level,snapshot);        nextLevelRecords.put(path[path.length - new_level - 1],record);      }      record.addPath(path);    }  }  return nextLevelRecords.getAllValues(new MultiplePathsFromGCRootsRecord[0]);}  }
class C{  public boolean adjacent(int direction){  return (direction == QuadTreeNode.NORTH || direction == QuadTreeNode.EAST);}  }
class C{  public DerValue(byte[] buf,int offset,int len) throws IOException {  data=init(true,new ByteArrayInputStream(buf,offset,len));}  }
class C{  public void stop() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  stop(null);}  }
class C{  public void update(int val){  byte[] b=new byte[4];  b[0]=(byte)((val >>> 24) & 0xff);  b[1]=(byte)((val >>> 16) & 0xff);  b[2]=(byte)((val >>> 8) & 0xff);  b[3]=(byte)(val & 0xff);  update(b);}  }
class C{  public boolean intersectsPolygon(Polygon2D poly){  List<Line2D> edgesB=poly.getEdges();  for (  Line2D ea : getEdges()) {    if (intersectsLine(ea,edgesB)) {      return true;    }  }  return false;}  }
class C{  public static BigDecimal open(int p_C_Invoice_ID,int p_C_InvoicePaySchedule_ID) throws SQLException {  int C_Currency_ID=0;  int C_ConversionType_ID=0;  BigDecimal GrandTotal=null;  BigDecimal MultiplierAP=null;  BigDecimal MultiplierCM=null;  String sql="SELECT MAX(C_Currency_ID),MAX(C_ConversionType_ID)," + " SUM(GrandTotal), MAX(MultiplierAP), MAX(Multiplier) " + "FROM	C_Invoice_v "+ "WHERE C_Invoice_ID=?";  if (p_C_InvoicePaySchedule_ID != 0)   sql+=" AND C_InvoicePaySchedule_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Invoice_ID);  if (p_C_InvoicePaySchedule_ID != 0)   pstmt.setInt(2,p_C_InvoicePaySchedule_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    C_Currency_ID=rs.getInt(1);    C_ConversionType_ID=rs.getInt(2);    GrandTotal=rs.getBigDecimal(3);    MultiplierAP=rs.getBigDecimal(4);    MultiplierCM=rs.getBigDecimal(5);  }  rs.close();  pstmt.close();  if (GrandTotal == null)   return null;  BigDecimal paidAmt=allocatedAmt(p_C_Invoice_ID,C_Currency_ID,C_ConversionType_ID,MultiplierAP);  BigDecimal TotalOpenAmt=GrandTotal.subtract(paidAmt);  if (p_C_InvoicePaySchedule_ID > 0) {    TotalOpenAmt=GrandTotal;    BigDecimal remainingAmt=paidAmt;    sql="SELECT C_InvoicePaySchedule_ID, DueAmt " + "FROM C_InvoicePaySchedule " + "WHERE C_Invoice_ID=?"+ " AND IsValid='Y' "+ "ORDER BY DueDate";    pstmt=Adempiere.prepareStatement(sql);    pstmt.setInt(1,p_C_Invoice_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      int C_InvoicePaySchedule_ID=rs.getInt(1);      BigDecimal DueAmt=rs.getBigDecimal(2);      if (C_InvoicePaySchedule_ID == p_C_InvoicePaySchedule_ID) {        if (DueAmt.signum() > 0) {          if (DueAmt.compareTo(remainingAmt) < 0)           TotalOpenAmt=Adempiere.ZERO; else           TotalOpenAmt=DueAmt.multiply(MultiplierCM).subtract(remainingAmt);        } else {          if (DueAmt.compareTo(remainingAmt) > 0)           TotalOpenAmt=Adempiere.ZERO; else           TotalOpenAmt=DueAmt.multiply(MultiplierCM).add(remainingAmt);        }      } else {        if (DueAmt.signum() > 0) {          remainingAmt=remainingAmt.subtract(DueAmt);          if (remainingAmt.signum() < 0)           remainingAmt=Adempiere.ZERO;        } else {          remainingAmt=remainingAmt.add(DueAmt);          if (remainingAmt.signum() < 0)           remainingAmt=Adempiere.ZERO;        }      }    }    rs.close();    pstmt.close();  }  TotalOpenAmt=Currency.round(TotalOpenAmt,C_Currency_ID,null);  if (paidAmt.signum() != 0) {    double open=TotalOpenAmt.doubleValue();    if (open >= -0.01 && open <= 0.01)     TotalOpenAmt=Adempiere.ZERO;  }  return TotalOpenAmt;}  }
class C{  private final void sendMessageToConnection(OFMessage m){  connection.messageReceived(m);}  }
class C{  public static GF2Matrix createCanonicalCheckMatrix(GF2mField field,PolynomialGF2mSmallM gp){  int m=field.getDegree();  int n=1 << m;  int t=gp.getDegree();  int[][] hArray=new int[t][n];  int[][] yz=new int[t][n];  for (int j=0; j < n; j++) {    yz[0][j]=field.inverse(gp.evaluateAt(j));  }  for (int i=1; i < t; i++) {    for (int j=0; j < n; j++) {      yz[i][j]=field.mult(yz[i - 1][j],j);    }  }  for (int i=0; i < t; i++) {    for (int j=0; j < n; j++) {      for (int k=0; k <= i; k++) {        hArray[i][j]=field.add(hArray[i][j],field.mult(yz[k][j],gp.getCoefficient(t + k - i)));      }    }  }  int[][] result=new int[t * m][(n + 31) >>> 5];  for (int j=0; j < n; j++) {    int q=j >>> 5;    int r=1 << (j & 0x1f);    for (int i=0; i < t; i++) {      int e=hArray[i][j];      for (int u=0; u < m; u++) {        int b=(e >>> u) & 1;        if (b != 0) {          int ind=(i + 1) * m - u - 1;          result[ind][q]^=r;        }      }    }  }  return new GF2Matrix(n,result);}  }
class C{  public final int compareTo(E o){  Enum<?> other=(Enum<?>)o;  Enum<E> self=this;  if (self.getClass() != other.getClass() && self.getDeclaringClass() != other.getDeclaringClass())   throw new ClassCastException();  return self.ordinal - other.ordinal;}  }
class C{  public void testSignumZero(){  String a="0";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",0,aNumber.signum());}  }
class C{  public void keyRelease(int keyCode){  TestUtils.keyRelease(keyCode);}  }
class C{  private SubstInNode processSubst(TreeNode treeNode,TreeNode[] substNodes,SymbolTable instancerST,Context instanceeCtxt,ModuleNode instanceeModule,ModuleNode mn) throws AbortException {  TreeNode[] children;  Vector decls=instanceeCtxt.getByClass(OpDeclNode.class);  SubstInNode substIn=new SubstInNode(treeNode,instancerST,decls,mn,instanceeModule);  for (int i=3; i < substNodes.length; i+=2) {    TreeNode sc[]=substNodes[i].heirs();    ExprOrOpArgNode substRHS=generateSubst(instanceeCtxt,sc[0],sc[2],mn);    substIn.addExplicitSubstitute(instanceeCtxt,sc[0].getUS(),sc[2],substRHS);  }  substIn.matchAll(decls);  return substIn;}  }
class C{  public Matrix4f translationRotateScaleInvert(float tx,float ty,float tz,float qx,float qy,float qz,float qw,float sx,float sy,float sz){  float nqx=-qx, nqy=-qy, nqz=-qz;  float dqx=nqx + nqx;  float dqy=nqy + nqy;  float dqz=nqz + nqz;  float q00=dqx * nqx;  float q11=dqy * nqy;  float q22=dqz * nqz;  float q01=dqx * nqy;  float q02=dqx * nqz;  float q03=dqx * qw;  float q12=dqy * nqz;  float q13=dqy * qw;  float q23=dqz * qw;  float isx=1 / sx, isy=1 / sy, isz=1 / sz;  this._m00(isx * (1.0f - q11 - q22));  this._m01(isy * (q01 + q23));  this._m02(isz * (q02 - q13));  this._m03(0.0f);  this._m10(isx * (q01 - q23));  this._m11(isy * (1.0f - q22 - q00));  this._m12(isz * (q12 + q03));  this._m13(0.0f);  this._m20(isx * (q02 + q13));  this._m21(isy * (q12 - q03));  this._m22(isz * (1.0f - q11 - q00));  this._m23(0.0f);  this._m30(-m00 * tx - m10 * ty - m20 * tz);  this._m31(-m01 * tx - m11 * ty - m21 * tz);  this._m32(-m02 * tx - m12 * ty - m22 * tz);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void considerPathXRegions(GeoPath path,Collection regions){  for (GeoPath.SegmentIterator pit=path.segmentIterator(); pit.hasNext(); ) {    GeoSegment seg=pit.nextSegment();    Iterator rit;    if (regions instanceof ExtentIndex) {      rit=((ExtentIndex)regions).iterator(seg);    } else {      rit=regions.iterator();    }    while (rit.hasNext()) {      GeoExtent extent=(GeoExtent)rit.next();      if (filter.preConsider(path,extent)) {        if (extent instanceof GeoRegion) {          GeoRegion region=(GeoRegion)extent;          if (considerSegmentXRegion(seg,region)) {            collector.collect(seg,region);          }        } else         if (extent instanceof GeoPath) {          GeoPath p=(GeoPath)extent;          if (isSegmentNearPoly(seg,p.getPoints(),filter.getHRange()) != null) {            collector.collect(seg,p);          }        } else {          BoundingCircle bc=extent.getBoundingCircle();          if (isSegmentNearRadialRegion(seg,bc.getCenter(),bc.getRadius(),filter.getHRange())) {            collector.collect(seg,extent);          }        }      }    }  }}  }
class C{  public static boolean checkDuplicatesWithinK(int[] arr,int k){  if (arr == null || arr.length == 0 || arr.length < k)   return false;  Set<Integer> set=new HashSet<Integer>();  for (int i=0; i < arr.length; i++) {    if (set.contains(arr[i]))     return true;    set.add(arr[i]);    if (i >= k)     set.remove(arr[i - k]);  }  return false;}  }
class C{  public EsriPolylineZList(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.712 -0500",hash_original_method="DA5270F6FAC446A7F1E0A4F7A45712B2",hash_generated_method="CC45C819AC99492B223D0D8A3E72BB57") public boolean isFlipping(){  return mStarted;}  }
class C{  public static byte[] append(byte buffer[],byte newElement){  byte[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public boolean optBoolean(String key){  return optBoolean(key,false);}  }
class C{  @Override public void lights(){  enableLighting();  lightCount=0;  int colorModeSaved=colorMode;  colorMode=RGB;  lightFalloff(1,0,0);  lightSpecular(0,0,0);  ambientLight(colorModeX * 0.5f,colorModeY * 0.5f,colorModeZ * 0.5f);  directionalLight(colorModeX * 0.5f,colorModeY * 0.5f,colorModeZ * 0.5f,0,0,-1);  colorMode=colorModeSaved;}  }
class C{  public static boolean doubleEqual(double a,double b,double precision){  return java.lang.Math.abs(a - b) <= precision;}  }
class C{  public void write(byte[] src,int offset,int length) throws EOFException {  long limit=allocate();  long commitPos=limit;  limit+=Length.StatusFlags;  mem.putInt(limit,length);  limit+=Length.Metadata;  mem.setBytes(limit,src,offset,length);  commit(commitPos);}  }
class C{  public void testPutDate(){  byte[] expectedResult={16,0,0,1,(byte)0xD8,(byte)0x07,3,10,(byte)0xE8,(byte)0x03,1,1,(byte)0x0F,(byte)0x27,12,31,(byte)0xAC,(byte)0x01,5,21};  GregorianCalendar cNowOurDays=new GregorianCalendar(2008,2,10);  GregorianCalendar cLowRange=new GregorianCalendar(1000,0,1);  GregorianCalendar cHighRange=new GregorianCalendar(9999,11,31);  GregorianCalendar cBeforeChrist=new GregorianCalendar(-427,4,21);  MySQLPacket array=new MySQLPacket(32,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putDate(new Date(cNowOurDays.getTimeInMillis()));    array.putDate(new Date(cLowRange.getTimeInMillis()));    array.putDate(new Date(cHighRange.getTimeInMillis()));    array.putDate(new Date(cBeforeChrist.getTimeInMillis()));    array.write(output);    System.out.println("exp:" + Utils.byteArrayToHexString(expectedResult));    System.out.println("act:" + Utils.byteArrayToHexString(output.toByteArray()));    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public Analyzer includeInvertedGenerationalDistance(){  includeInvertedGenerationalDistance=true;  return this;}  }
class C{  public void close(){  exiting=true;  if (currentThread != null) {    currentThread.interrupt();  }  if (channel.isConnected()) {    try {      channel.close();    } catch (    Exception ex) {    }  }}  }
class C{  public boolean isBeforeNow(){  return isBefore(DateTimeUtils.currentTimeMillis());}  }
class C{  public boolean containsAll(Collection c){  Iterator i=c.iterator();  while (i.hasNext()) {    if (!contains(i.next())) {      return false;    }  }  return true;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public void removeCategory(String category){  if (mCategories != null) {    mCategories.remove(category);    if (mCategories.size() == 0) {      mCategories=null;    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return OrientedPackage.Literals.PORT;}  }
class C{  void onCancelPermissionRequest(){  rationaleAccepted.set(false);  updatePermissionsAsDenied(pendingPermissions);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EXTERNAL_DEFINITION___INTERFACE_1:    return interface_1 != INTERFACE_1_EDEFAULT;case UmplePackage.EXTERNAL_DEFINITION___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.EXTERNAL_DEFINITION___CLASS_CONTENT_1:return classContent_1 != null && !classContent_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public _BuildControllerUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  public void doRender(Entity p_76986_1_,double p_76986_2_,double p_76986_4_,double p_76986_6_,float p_76986_8_,float p_76986_9_){  this.doRender((EntityBullet)p_76986_1_,p_76986_2_,p_76986_4_,p_76986_6_,p_76986_8_,p_76986_9_);}  }
class C{  protected void updateOKButtonAction(){  okButton.setEnabled(!textField.getText().equals(""));}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  try {    dropTargetContext=(DropTargetContext)f.get("dropTargetContext",null);  } catch (  IllegalArgumentException e) {  }  if (dropTargetContext == null) {    dropTargetContext=createDropTargetContext();  }  component=(Component)f.get("component",null);  actions=f.get("actions",DnDConstants.ACTION_COPY_OR_MOVE);  active=f.get("active",true);  try {    dtListener=(DropTargetListener)f.get("dtListener",null);  } catch (  IllegalArgumentException e) {    dtListener=(DropTargetListener)s.readObject();  }}  }
class C{  public void testField(){  checkPublicKey cPK=new checkPublicKey();  assertEquals("Incorrect serialVersionUID",cPK.getSerVerUID(),7187392471159151072L);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","yykj");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public SubscriptionMigrationException(String message,SubscriptionMigrationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public <T>T giveRed(TypeTag tag){  return this.<T>giveTuple(tag).getRed();}  }
class C{  public SignatureManifest(String rnd,List<MessagePart> hashes){  this.rnd=rnd;  for (  MessagePart hash : hashes) {    addReference(hash);  }}  }
class C{  public DebuggerTemplate(final com.google.security.zynamics.binnavi.debug.debugger.DebuggerTemplate template){  m_template=template;  m_template.addListener(m_internalListener);}  }
class C{  public LogicalRelationExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void selectAndReveal(int newOffset,int newLength){  Assert.isTrue(newOffset >= 0);  Assert.isTrue(newLength >= 0);  ITextEditor editor=getTextEditor();  if (editor instanceof TypeScriptEditor) {    ISourceViewer viewer=((TypeScriptEditor)editor).getViewer();    if (viewer != null)     viewer.setSelectedRange(newOffset,newLength);  } else   getTextEditor().selectAndReveal(newOffset,newLength);}  }
class C{  @Override public void recycle(){  impl.recycle();}  }
class C{  public void resize(final int width,final int height){  stage.getViewport().update(width,height);}  }
class C{  public static double dnorm(double x,double mean,double sd){  if (sd <= 0.0)   throw new IllegalArgumentException("standard deviation <= 0.0");  return dnorm((x - mean) / sd);}  }
class C{  public static Data create(int capacity){  return new Data(new byte[capacity]);}  }
class C{  public boolean removeConstraint(ParticleConstraint3D c){  return constraints.remove(c);}  }
class C{  private void initResourceBundle(final UIDefaults table){  table.setDefaultLocale(Locale.getDefault());  table.addResourceBundle(PKG_PREFIX + "resources.aqua");  try {    final ResourceBundle aquaProperties=ResourceBundle.getBundle(PKG_PREFIX + "resources.aqua");    final Enumeration<String> propertyKeys=aquaProperties.getKeys();    while (propertyKeys.hasMoreElements()) {      final String key=propertyKeys.nextElement();      table.put(key,aquaProperties.getString(key));    }  } catch (  final Exception e) {  }}  }
class C{  public MoveStep(MovePath path,MoveStepType type,int mineToLay){  this(path,type);  this.mineToLay=mineToLay;}  }
class C{  public void close(){  this.continueProcessing.set(false);  try {    if (socket != null) {      socket.close();    }  } catch (  Exception e) {  }  try {    this.stats.close();  } catch (  Exception e) {  }  try {    if (cacheHelper != null) {      cacheHelper.close();    }  } catch (  Exception e) {  }  releaseCommBuffer();}  }
class C{  @Override public boolean supportsSubqueriesInComparisons(){  debugCodeCall("supportsSubqueriesInComparisons");  return true;}  }
class C{  protected void processKeyEvent(KeyEvent evt){  MenuSelectionManager.defaultManager().processKeyEvent(evt);  if (evt.isConsumed())   return;  super.processKeyEvent(evt);}  }
class C{  public SqlCodeNodeProvider(final ResultSet resultSet){  m_resultSet=resultSet;}  }
class C{  private void updateMessageIndacators(){  int supplierCount=this.messageSuppliers.size();  int labelsCount=this.messageLabels.size();  if (supplierCount != labelsCount) {    resizeTo(supplierCount,this.messageLabels);  }  Object[] suppliers=this.messageSuppliers.toArray();  Object[] labels=this.messageLabels.toArray();  for (int i=0; i < suppliers.length; i++) {    Supplier<String> supplier=(Supplier<String>)suppliers[i];    JLabel label=(JLabel)labels[i];    String msg=supplier.get();    if (Objects.isNull(msg) || msg.isEmpty()) {      this.messageSuppliers.remove(supplier);      label.setText("");    } else {      label.setText(msg);    }  }}  }
class C{  public void testCase11(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String tree2Words(Tree t){  StringBuilder buffer=new StringBuilder();  List<Tree> leaves=t.getLeaves();  for (  Tree leaf : leaves) {    String word=((CoreLabel)leaf.label()).get(CoreAnnotations.ValueAnnotation.class);    String trailingWhitespaces=((CoreLabel)leaf.label()).get(CoreAnnotations.AfterAnnotation.class);    if (trailingWhitespaces == null) {      trailingWhitespaces=" ";    }    buffer.append(word).append(trailingWhitespaces);  }  return buffer.toString();}  }
class C{  public static void checkDocIds(String mes,int[] results,ScoreDoc[] hits){  Assert.assertEquals(mes + " nr of hits",hits.length,results.length);  for (int i=0; i < results.length; i++) {    Assert.assertEquals(mes + " doc nrs for hit " + i,results[i],hits[i].doc);  }}  }
class C{  public static NameMatcher<JobKey> jobNameContains(String compareTo){  return NameMatcher.nameContains(compareTo);}  }
class C{  public static void typeface(Activity activity,TypefaceCollection typefaceCollection){  typeface(activity.findViewById(android.R.id.content),typefaceCollection);}  }
class C{  Injector(final Map<Class<?>,Object> map){  notNull(map);  this.map=map;}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public static void invoke(Interpreter env,CallStack callstack,String dir){  File file;  String path;  try {    path=env.pathToFile(dir).getAbsolutePath();    file=env.pathToFile(dir);  } catch (  IOException e) {    env.println("error reading path: " + e);    return;  }  if (!file.exists() || !file.canRead()) {    env.println("Can't read " + file);    return;  }  if (!file.isDirectory()) {    env.println("'" + dir + "' is not a directory");  }  String[] files=file.list();  files=StringUtil.bubbleSort(files);  for (int i=0; i < files.length; i++) {    File f=new File(path + File.separator + files[i]);    StringBuffer sb=new StringBuffer();    sb.append(f.canRead() ? "r" : "-");    sb.append(f.canWrite() ? "w" : "-");    sb.append("_");    sb.append(" ");    Date d=new Date(f.lastModified());    GregorianCalendar c=new GregorianCalendar();    c.setTime(d);    int day=c.get(Calendar.DAY_OF_MONTH);    sb.append(months[c.get(Calendar.MONTH)] + " " + day);    if (day < 10)     sb.append(" ");    sb.append(" ");    int fieldlen=8;    StringBuffer len=new StringBuffer();    for (int j=0; j < fieldlen; j++)     len.append(" ");    len.insert(0,f.length());    len.setLength(fieldlen);    int si=len.toString().indexOf(" ");    if (si != -1) {      String pad=len.toString().substring(si);      len.setLength(si);      len.insert(0,pad);    }    sb.append(len.toString());    sb.append(" " + f.getName());    if (f.isDirectory())     sb.append("/");    env.println(sb.toString());  }}  }
class C{  @Deprecated public static void assertNotEquals(double notExpected,double actual,double delta){  try {    Verify.assertNotEquals("double",notExpected,actual,delta);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  private void blockIfBusy(IncomingMessageEnvelope envelope){synchronized (latch) {    while (!shutdownNow && throwable == null) {      for (      AsyncTaskWorker worker : taskWorkers.values()) {        if (worker.state.isReady()) {          return;        }      }      try {        log.trace("Block loop thread");        latch.wait();      } catch (      InterruptedException e) {        throw new SamzaException("Run loop is interrupted",e);      }    }  }}  }
class C{  public BERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public static double NHfitness(boolean useTrainingData,GEPIndividual ind){  double NH=NHrawFitness(useTrainingData,ind,0);  return (NH);}  }
class C{  public static GeoTimeSerie compact(GeoTimeSerie gts,boolean preserveRanges){  GeoTimeSerie clone=gts.clone();  GTSHelper.sort(clone);  if (2 >= clone.values) {    return clone;  }  int idx=0;  int offset=0;  int compactIdx=1;  while (idx < clone.values - 1) {    while (idx + 1 + offset < clone.values - 1 && locationAtIndex(clone,idx + 1 + offset) == locationAtIndex(clone,idx) && elevationAtIndex(clone,idx + 1 + offset) == elevationAtIndex(clone,idx) && valueAtIndex(clone,idx + 1 + offset).equals(valueAtIndex(clone,idx))) {      offset++;    }    if (preserveRanges && offset > 0) {      clone.ticks[compactIdx]=clone.ticks[idx + offset];      if (null != clone.locations) {        clone.locations[compactIdx]=clone.locations[idx + offset];      }      if (null != clone.elevations) {        clone.elevations[compactIdx]=clone.elevations[idx + offset];      }switch (clone.type) {case LONG:        clone.longValues[compactIdx]=clone.longValues[idx + offset];      break;case DOUBLE:    clone.doubleValues[compactIdx]=clone.doubleValues[idx + offset];  break;case BOOLEAN:clone.booleanValues.set(compactIdx,clone.booleanValues.get(idx + offset));break;case STRING:clone.stringValues[compactIdx]=clone.stringValues[idx + offset];break;}compactIdx++;}clone.ticks[compactIdx]=clone.ticks[idx + offset + 1];if (null != clone.locations) {clone.locations[compactIdx]=clone.locations[idx + offset + 1];}if (null != clone.elevations) {clone.elevations[compactIdx]=clone.elevations[idx + offset + 1];}switch (clone.type) {case LONG:clone.longValues[compactIdx]=clone.longValues[idx + offset + 1];break;case DOUBLE:clone.doubleValues[compactIdx]=clone.doubleValues[idx + offset + 1];break;case BOOLEAN:clone.booleanValues.set(compactIdx,clone.booleanValues.get(idx + offset + 1));break;case STRING:clone.stringValues[compactIdx]=clone.stringValues[idx + offset + 1];break;}idx=idx + offset + 1;compactIdx++;offset=0;}if (offset > 0) {clone.ticks[clone.values - offset - 1]=clone.ticks[clone.values - 1];if (null != clone.locations) {clone.locations[clone.values - offset - 1]=clone.locations[clone.values - 1];}if (null != clone.elevations) {clone.elevations[clone.values - offset - 1]=clone.elevations[clone.values - 1];}switch (clone.type) {case LONG:clone.longValues[clone.values - offset - 1]=clone.longValues[clone.values - 1];break;case DOUBLE:clone.doubleValues[clone.values - offset - 1]=clone.doubleValues[clone.values - 1];break;case BOOLEAN:clone.booleanValues.set(clone.values - offset - 1,clone.booleanValues.get(clone.values - 1));break;case STRING:clone.stringValues[clone.values - offset - 1]=clone.stringValues[clone.values - 1];break;}}clone.values=compactIdx;GTSHelper.shrink(clone);return clone;}  }
class C{  public boolean isContinuousFocusEnabled(){  return continuousFocusEnabled;}  }
class C{  public CurrencyValue convertTo(ExchangeRateProvider exchangeRates,String targetCurrencyCode){  return new CurrencyValue(convertAmount(exchangeRates,this.getCurrencyCode(),this.getAmount(),targetCurrencyCode),targetCurrencyCode);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Integer maxAlternatives(){  return maxAlternatives;}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,DEFAULT_IGNORE_QUOTATIONS);}  }
class C{  public byte[] toByteArray(){  int len=(mPos >>> 3) + ((mPos & 0x07) > 0 ? 1 : 0);  byte[] newBuf=new byte[len];  System.arraycopy(mBuf,0,newBuf,0,len);  return newBuf;}  }
class C{  public void add(DiscordRecord discord){  this.discords.insertSorted(discord);}  }
class C{  private synchronized void reopen(String msg,long targetPos,long length) throws IOException {  if (wrappedStream != null) {    closeStream("reopen(" + msg + ")",contentRangeFinish);  }  contentRangeFinish=getReadLimit(readStrategy,targetPos,length,contentLength,readahead);  LOG.trace("reopen({}) for {} range[{}-{}], length={}," + " streamPosition={}, nextReadPosition={}",uri,msg,targetPos,contentRangeFinish,length,pos,nextReadPos);  try {    wrappedStream=SwiftAPIDirect.getObject(new Path(uri),mJossAccount,targetPos,contentRangeFinish,scm);    contentRangeStart=targetPos;    if (wrappedStream == null) {      throw new IOException("Null IO stream from reopen of (" + msg + ") "+ uri);    }  } catch (  ClientException e) {    LOG.error(e.getMessage());    throw new IOException("Reopen at position " + targetPos + uri);  }  pos=targetPos;}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  HTML.Tag t=(HTML.Tag)attr.getAttribute(StyleConstants.NameAttribute);  JComponent c=null;  Object model=attr.getAttribute(StyleConstants.ModelAttribute);  removeStaleListenerForModel(model);  if (t == HTML.Tag.INPUT) {    c=createInputComponent(attr,model);  } else   if (t == HTML.Tag.SELECT) {    if (model instanceof OptionListModel) {      JList list=new JList((ListModel)model);      int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,1);      list.setVisibleRowCount(size);      list.setSelectionModel((ListSelectionModel)model);      c=new JScrollPane(list);    } else {      c=new JComboBox((ComboBoxModel)model);      maxIsPreferred=3;    }  } else   if (t == HTML.Tag.TEXTAREA) {    JTextArea area=new JTextArea((Document)model);    int rows=HTML.getIntegerAttributeValue(attr,HTML.Attribute.ROWS,1);    area.setRows(rows);    int cols=HTML.getIntegerAttributeValue(attr,HTML.Attribute.COLS,20);    maxIsPreferred=3;    area.setColumns(cols);    c=new JScrollPane(area,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  }  if (c != null) {    c.setAlignmentY(1.0f);  }  return c;}  }
class C{  public static Path createDirectory(final Path parent){  File file;  try {    file=Files.createTempDirectory(parent,null).toFile();  } catch (  IOException e) {    throw new RuntimeException(e);  }  if (!file.exists()) {    throw new RuntimeException("Error while trying to create folder at " + parent + ".");  }  file.deleteOnExit();  return file.toPath();}  }
class C{  public void add(TagLibTag libTag,Tag tag,FunctionLib[] flibs,SourceCode cfml){  tags.add(new TagData(libTag,tag,flibs,cfml));}  }
class C{  protected void processDoneCallback(){}  }
class C{  public boolean contains(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  return fastContains(p);}  }
class C{  public DefaultExtendedState(){  this.variables=new ObservableMap<Object,Object>(new ConcurrentHashMap<Object,Object>(),new LocalMapChangeListener());}  }
class C{  private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public JobConf jobConf(){  return jobCtx.getJobConf();}  }
class C{  public MainScorerImpl(int analysisGroup,Map<String,ScoringSchemaType> scorerSchemas,FramingFlowType framingFlow,String finalMessageAnomalyScorer,String flowName,String finalIntervalAnomalyScorer,int trainFrameFactor) throws AdeException {  m_scorerSchemas=scorerSchemas;  m_framingFlow=framingFlow;  m_finalIntervalAnomalyScorer=finalIntervalAnomalyScorer;  m_finalMessageAnomalyScorer=finalMessageAnomalyScorer;  m_trainedScorersMap=new TreeMap<String,IScorer<?,IAnalyzedInterval>>();  m_scorersByOrder=new Vector<String>();  m_omitFromAnalysis=new TreeSet<String>();  m_currentIterationScorerIds=new TreeSet<String>();  m_modelMetaData=new ModelMetaDataImpl(analysisGroup);  m_currentIterationScorers=new TreeMap<String,Map<String,IScorer<?,IAnalyzedInterval>>>();  m_flowName=flowName;  m_intervalDispenser=new IntervalDispenser();  m_trainFrameFactor=trainFrameFactor;  if (trainFrameFactor != 1) {    final IntervalShiftAccumulator frameAccumulator=new IntervalShiftAccumulator(m_framingFlow,false,m_trainFrameFactor,false);    frameAccumulator.addTarget(m_intervalDispenser);    m_target=frameAccumulator;  } else {    m_target=m_intervalDispenser;  }}  }
class C{  public RunNetworkAction(final NetworkPanel networkPanel){  super();  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Play.png"));  putValue(SHORT_DESCRIPTION,"Iterate network update algorithm");}  }
class C{  public static int wasSqlEsception(){  return sqlException;}  }
class C{  public MJPEGGenerator(File aviFile,int width,int height,double framerate,int numFrames) throws Exception {  this.aviFile=aviFile;  this.width=width;  this.height=height;  this.framerate=framerate;  this.numFrames=numFrames;  aviOutput=new FileOutputStream(aviFile);  aviChannel=aviOutput.getChannel();  RIFFHeader rh=new RIFFHeader();  aviOutput.write(rh.toBytes());  aviOutput.write(new AVIMainHeader().toBytes());  aviOutput.write(new AVIStreamList().toBytes());  aviOutput.write(new AVIStreamHeader().toBytes());  aviOutput.write(new AVIStreamFormat().toBytes());  aviOutput.write(new AVIJunk().toBytes());  aviMovieOffset=aviChannel.position();  aviOutput.write(new AVIMovieList().toBytes());  indexlist=new AVIIndexList();}  }
class C{  public static X509Certificate readX509Certificate(URL url) throws IOException, CertificateException {  URLConnection connection=url.openConnection();  InputStream is=connection.getInputStream();  try {    CertificateFactory servercf=CertificateFactory.getInstance("X.509");    return (X509Certificate)servercf.generateCertificate(is);  }  finally {    is.close();  }}  }
class C{  public FolderTokenFdrLink findByName(String name) throws Exception {  int idx;  FolderTokenFdrLink link=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  link=get(idx);  return link;}  }
class C{  public boolean isCreateReservation(){  String s=getCommitmentType();  if (s == null)   return false;  return COMMITMENTTYPE_POCommitmentReservation.equals(s) || COMMITMENTTYPE_POSOCommitmentReservation.equals(s);}  }
class C{  public ServerSpace(org.mmtk.vm.gcspy.ServerInterpreter serverInterpreter,String serverName,String driverName,String title,String blockInfo,int tileNum,String unused,boolean mainSpace){  if (VM.BuildWithGCSpy) {    spaceId=serverInterpreter.addSpace(this);    driver=sysCall.gcspyMainServerAddDriver(serverInterpreter.getServerAddress());    Address serverNameAddr=GCspy.util.getBytes(serverName);    Address driverNameAddr=GCspy.util.getBytes(driverName);    Address titleAddr=GCspy.util.getBytes(title);    Address blockInfoAddr=GCspy.util.getBytes(blockInfo);    Address unusedAddr=GCspy.util.getBytes((unused == null) ? DEFAULT_UNUSED_STRING : unused);    if (DEBUG)     Log.writeln("--   Setting up driver");    sysCall.gcspyDriverInit(driver,-1,serverNameAddr,driverNameAddr,titleAddr,blockInfoAddr,tileNum,unusedAddr,mainSpace ? 1 : 0);  }}  }
class C{  public void withVoidTransaction(@NotNull Isolation isolation,@NotNull VoidTransactionCallback callback){  withVoidTransaction(Propagation.REQUIRED,isolation,callback);}  }
class C{  public static final double[] fromBitString(String s){  char a[]=s.toCharArray();  double d[]=new double[a.length];  for (int i=0; i < a.length; i++) {    d[i]=(double)char2int(a[i]);  }  return d;}  }
class C{  public static double[][] selectColumns(double matrix[][],int columns[]){  double[][] data=new double[matrix.length][columns.length];  for (int r=0; r < matrix.length; r++) {    for (int cIndex=0; cIndex < columns.length; cIndex++) {      data[r][cIndex]=matrix[r][columns[cIndex]];    }  }  return data;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnlastitem.class,args);}  }
class C{  public static String removeTrailingZeros(final String str){  String result=str;  if (str != null && str.length() != 0) {    int endIndex=str.length();    while (endIndex > 1) {      final char ch=str.charAt(endIndex - 1);      if (ch != '0') {        break;      }      endIndex--;    }    if (endIndex < str.length()) {      result=str.substring(0,endIndex);    }  }  return result;}  }
class C{  private void validateBillingResult(BillingResult billingResult,String currency,BigDecimal amount) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {  System.out.println(billingResult.getResultXML());  Document doc=XMLConverter.convertToDocument(billingResult.getResultXML(),false);  assertEquals(currency,XMLConverter.getNodeTextContentByXPath(doc,"/BillingDetails/OverallCosts/@currency"));  if (amount != null) {    checkEquals(amount.toPlainString(),XMLConverter.getNodeTextContentByXPath(doc,"/BillingDetails/OverallCosts/@grossAmount"),2);  }}  }
class C{  public void testAddPageUploadAudit(){  System.out.println("addPageUploadAudit");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);  AuditServiceThread auditServiceThread=createMockAuditServiceThread(instance);  AuditServiceThreadFactory auditServiceThreadFactory=createMockAuditServiceThreadFactory(auditCommand,auditServiceThread);  instance.setAuditServiceThreadFactory(auditServiceThreadFactory);  instance.addPageUploadAudit(auditCommand);  try {    Thread.sleep(500);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  EasyMock.verify(auditServiceThreadFactory);  EasyMock.verify(auditServiceThread);}  }
class C{  public void dpln(String text){  if (m_verboseOn) {    System.out.println(text);  }}  }
class C{  public Entity createEntity(){  EntityImpl entity=new EntityImpl();  return entity;}  }
class C{  public boolean isRTPRTSPTCP(){  return rtprtsptcp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.637 -0500",hash_original_method="8888AACA46E7314FC33FB1B59D843324",hash_generated_method="64A07152E1DD1B44B78BA36B11FFD423") public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  public final void testSetErrorColor(){  int errorColor=Color.RED;  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.setErrorColor(errorColor);  assertEquals(errorColor,abstractValidateableView.getErrorColor());}  }
class C{  public char last(){  if (start == end) {    return DONE;  }  offset=end - 1;  return string.charAt(offset);}  }
class C{  public void remove(Object object){  int index=findIndex(object);  if (index != -1) {    count--;    for (int i=index; i < count; i++) {      objects[i]=objects[i + 1];      methods[i]=methods[i + 1];    }    objects[count]=null;    methods[count]=null;  }}  }
class C{  public boolean isDiscountUptoLimitPrice(){  Object oo=get_Value(COLUMNNAME_IsDiscountUptoLimitPrice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_TYPE:      return TypesPackage.TSETTER___GET_MEMBER_TYPE;case TypesPackage.TMEMBER___IS_READABLE:    return TypesPackage.TSETTER___IS_READABLE;case TypesPackage.TMEMBER___IS_WRITEABLE:  return TypesPackage.TSETTER___IS_WRITEABLE;case TypesPackage.TMEMBER___GET_MEMBER_AS_STRING:return TypesPackage.TSETTER___GET_MEMBER_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case TypesPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:return TypesPackage.TSETTER___GET_DECLARED_TYPE_REF;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public final boolean removeElement(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=null;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  editor.reset(aTarget);  aTarget.addChildren(getPage(),FeedbackPanel.class);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == listOfSourceDocuements.size() - 1) {    aTarget.appendJavaScript("alert('This is the last document!')");    return;  }  bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex + 1).getName());  bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex + 1));  try {    repository.upgradeCasAndSave(bModel.getDocument(),Mode.AUTOMATION,bModel.getUser().getUsername());    loadDocumentAction(aTarget);    setCurationSegmentBeginEnd();    update(aTarget);  } catch (  UIMAException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  ClassNotFoundException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  IOException e) {    error(ExceptionUtils.getRootCause(e));  }catch (  BratAnnotationException e) {    aTarget.addChildren(getPage(),FeedbackPanel.class);    error(e.getMessage());  }  finish.setModelObject(bModel);  aTarget.add(finish.setOutputMarkupId(true));  aTarget.add(numberOfPages);  aTarget.add(documentNamePanel);  annotator.bratRenderLater(aTarget);}  }
class C{  BufferedImage makeBufferedImage(Image img,Color bgColor,int type,int sx1,int sy1,int sx2,int sy2){  final int width=sx2 - sx1;  final int height=sy2 - sy1;  final BufferedImage bimg=new BufferedImage(width,height,type);  final SunGraphics2D g2d=(SunGraphics2D)bimg.createGraphics();  g2d.setComposite(AlphaComposite.Src);  bimg.setAccelerationPriority(0);  if (bgColor != null) {    g2d.setColor(bgColor);    g2d.fillRect(0,0,width,height);    g2d.setComposite(AlphaComposite.SrcOver);  }  g2d.copyImage(img,0,0,sx1,sy1,width,height,null,null);  g2d.dispose();  return bimg;}  }
class C{  public ValueGrid2DPortrayal3D(String valueName,double transparency){  this.valueName=valueName;  sim.util.gui.SimpleColorMap cm=new sim.util.gui.SimpleColorMap();  cm.setLevels(0.0,1.0,java.awt.Color.blue,java.awt.Color.red);  defaultPortrayal=new TilePortrayal(cm);  this.transparency=transparency;  mPolyAttributes.setCapability(PolygonAttributes.ALLOW_CULL_FACE_WRITE);  mPolyAttributes.setCapability(PolygonAttributes.ALLOW_MODE_WRITE);  mPolyAttributes.clearCapabilityIsFrequent(PolygonAttributes.ALLOW_CULL_FACE_WRITE);  mPolyAttributes.clearCapabilityIsFrequent(PolygonAttributes.ALLOW_MODE_WRITE);}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public boolean leftClickOff(OMGraphic omg,MouseEvent me){  if (DEBUG) {    Debug.output("leftClickOff(" + omg.getClass().getName() + ") at "+ me.getX()+ ", "+ me.getY());  }  deselect(omg);  return false;}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  private void selectCasualties(final DiceRoll dice,final Collection<Unit> allFriendlyUnits,final Collection<Unit> validTargetedUnitsForThisRoll,final Collection<Unit> defendingAA,final Collection<Unit> allEnemyUnits,final Territory territory,final String currentTypeAA){  final CasualtyDetails casualties=BattleCalculator.getAACasualties(false,validTargetedUnitsForThisRoll,allFriendlyUnits,defendingAA,allEnemyUnits,dice,m_bridge,territory.getOwner(),m_player,null,territory,TerritoryEffectHelper.getEffects(territory),false,new ArrayList<>());  getRemotePlayer().reportMessage(casualties.size() + " " + currentTypeAA+ " hits in "+ territory.getName(),casualties.size() + " " + currentTypeAA+ " hits in "+ territory.getName());  BattleDelegate.markDamaged(new ArrayList<>(casualties.getDamaged()),m_bridge,true);  m_bridge.getHistoryWriter().addChildToEvent(MyFormatter.unitsToTextNoOwner(casualties.getKilled()) + " lost in " + territory.getName(),new ArrayList<>(casualties.getKilled()));  allFriendlyUnits.removeAll(casualties.getKilled());  if (m_casualties == null) {    m_casualties=new ArrayList<>(casualties.getKilled());  } else {    m_casualties.addAll(casualties.getKilled());  }}  }
class C{  public ItemStack toItemStack() throws Exception {  return toItemStack(1);}  }
class C{  public boolean isNotificationAddressAvailable(){  if (sRoster != null) {    for (    String notifiedAddress : sSettings.getNotifiedAddresses().getAll()) {      Presence presence=sRoster.getPresence(notifiedAddress);      if (presence.isAvailable()) {        return true;      }    }    return false;  }  return true;}  }
class C{  public void calculateTwilight(long time,double latiude,double longitude){  final float daysSince2000=(float)(time - UTC_2000) / DateUtils.DAY_IN_MILLIS;  final float meanAnomaly=6.240059968f + daysSince2000 * 0.01720197f;  final float trueAnomaly=meanAnomaly + C1 * FloatMath.sin(meanAnomaly) + C2 * FloatMath.sin(2 * meanAnomaly) + C3 * FloatMath.sin(3 * meanAnomaly);  final float solarLng=trueAnomaly + 1.796593063f + (float)Math.PI;  final double arcLongitude=-longitude / 360;  float n=Math.round(daysSince2000 - J0 - arcLongitude);  double solarTransitJ2000=n + J0 + arcLongitude+ 0.0053f * FloatMath.sin(meanAnomaly) + -0.0069f * FloatMath.sin(2 * solarLng);  double solarDec=Math.asin(FloatMath.sin(solarLng) * FloatMath.sin(OBLIQUITY));  final double latRad=latiude * DEGREES_TO_RADIANS;  double cosHourAngle=(FloatMath.sin(ALTIDUTE_CORRECTION_CIVIL_TWILIGHT) - Math.sin(latRad) * Math.sin(solarDec)) / (Math.cos(latRad) * Math.cos(solarDec));  if (cosHourAngle >= 1) {    mState=NIGHT;    mSunset=-1;    mSunrise=-1;    return;  } else   if (cosHourAngle <= -1) {    mState=DAY;    mSunset=-1;    mSunrise=-1;    return;  }  float hourAngle=(float)(Math.acos(cosHourAngle) / (2 * Math.PI));  mSunset=Math.round((solarTransitJ2000 + hourAngle) * DateUtils.DAY_IN_MILLIS) + UTC_2000;  mSunrise=Math.round((solarTransitJ2000 - hourAngle) * DateUtils.DAY_IN_MILLIS) + UTC_2000;  if (mSunrise < time && mSunset > time) {    mState=DAY;  } else {    mState=NIGHT;  }}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  protected static Config topologyConfigs(String topologyBinaryFile,String topologyDefnFile,TopologyAPI.Topology topology){  String basename=FileUtils.getBaseName(topologyBinaryFile);  String pkgType;  if (FileUtils.isOriginalPackagePex(basename)) {    pkgType="pex";  } else   if (FileUtils.isOriginalPackageJar(basename)) {    pkgType="jar";  } else {    pkgType="tar";  }  Config config=Config.newBuilder().put(Keys.topologyId(),topology.getId()).put(Keys.topologyName(),topology.getName()).put(Keys.topologyDefinitionFile(),topologyDefnFile).put(Keys.topologyBinaryFile(),topologyBinaryFile).put(Keys.topologyPackageType(),pkgType).build();  return config;}  }
class C{  private String add(String sourceString,String success){  if (sourceString == null) {    return null;  }  return sourceString + success;}  }
class C{  public void shutdown(){  gossipServiceRunning.set(false);  gossipThreadExecutor.shutdown();  if (passiveGossipThread != null) {    passiveGossipThread.shutdown();  }  if (activeGossipThread != null) {    activeGossipThread.shutdown();  }  try {    boolean result=gossipThreadExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS);    if (!result) {      LOGGER.error("executor shutdown timed out");    }  } catch (  InterruptedException e) {    LOGGER.error(e);  }}  }
class C{  public static final ArrayList readThisListXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  ArrayList list=new ArrayList();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      list.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return list;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public void testCentralEndpointHeuristicFailure() throws ParseException {  checkIntersection("LINESTRING (163.81867067 -211.31840378, 165.9174252 -214.1665075)","LINESTRING (2.84139601 -57.95412726, 469.59990601 -502.63851732)",1,"POINT (163.81867067 -211.31840378)",0);}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<T> postorder(){  if (root == null) {    return empty();  }  return new ValueExtractor<T>(new PostorderTraversal(root));}  }
class C{  public OverlayMapPanel(PropertyHandler propertyHandler,boolean delayCreation){  super(propertyHandler,delayCreation);}  }
class C{  public Skein512(){  super();}  }
class C{  private int[] packTimes(){  int[] times=new int[2];  times[0]=startTime;  times[1]=endTime;  return times;}  }
class C{  public void prepareToPullUpShade(int shadeColorId,int iconId,CameraAppUI.AnimationFinishedListener listener){  prepareShadeAnimation(PULL_UP_SHADE,shadeColorId,iconId,listener);}  }
class C{  public static void main(String[] args){  if (args.length != 3) {    printUsage();    System.exit(1);  }  boolean label=(args[0].toLowerCase().trim().equals("-lbl"));  try {    String inputWhat=args[1].toLowerCase().trim();    if (inputWhat.equals("-inputfile")) {      BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(args[2]),"UTF-8"));      BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(args[2] + ".tagged"),"UTF-8"));      String text="", line="";      while ((line=in.readLine()) != null) {        text+="\n" + line;      }      text=text.trim();      text=text.replaceAll("([\t\n\r ])+","$1");      text=text.replaceAll("[\\[\\]]","");      text=text.replaceAll("<[^<>]*>","");      List MarkList=new ArrayList();      ArrayList recordList=(ArrayList)doFeatureGen(new HashMap(),text,MarkList,label);      for (int i=0; i < recordList.size(); ++i) {        out.write(recordList.get(i).toString());        out.write("\n");      }      in.close();      out.close();    } else     if (inputWhat.equals("-inputdir")) {      BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(args[2] + ".tagged"),"UTF-8"));      File inputDir=new File(args[2]);      File[] childrent=inputDir.listFiles();      for (int i=0; i < childrent.length; ++i) {        BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(childrent[i]),"UTF-8"));        String text="", line="";        while ((line=in.readLine()) != null) {          text+="\n" + line;        }        text=text.trim();        text=text.replaceAll("([\t\n\r ])+","$1");        text=text.replaceAll("[\\[\\]{}]","");        text=text.replaceAll("<[^<>]*>","");        List MarkList=new ArrayList();        ArrayList recordList=(ArrayList)doFeatureGen(new HashMap(),text,MarkList,label);        for (int j=0; j < recordList.size(); ++j) {          out.write(recordList.get(j).toString());          out.write("\n");        }        in.close();      }      out.close();    } else     printUsage();  } catch (  Exception e) {    System.out.println("In feature generator main : " + e.getMessage());    return;  }}  }
class C{  public StringBuilder reverse(){  reverse0();  return this;}  }
class C{  public static GetConfigResponse checkGetConfigResponse(GetConfigResponse getConfigResponse) throws RpcException {  logger.info("Checking {}",getConfigResponse);switch (getConfigResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(getConfigResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",getConfigResponse.getResult()));}return getConfigResponse;}  }
class C{  synchronized void validate(X509Certificate c) throws CertificateException {  Cert cert=certMap.get(c);  if (cert == null) {    cert=new Cert(c);    certMap.put(c,cert);  }  StatusCode code=validator.validateCertificate(cert);  boolean valid=code == null || code.isGood();  if (valid) {    acceptedCertificates.add(cert);  } else {    throw new CertificateException("Certificate is not valid");  }  X500Principal issuer=c.getIssuerX500Principal();  X500Principal subject=c.getSubjectX500Principal();  if (!subject.equals(issuer) && valid) {    acceptedIssuers.add(cert);    acceptedIssuersArray=null;  }}  }
class C{  public void updatePosicionEnCaja(final String udoc,final String uinstalacion,final int posicion){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(UDOC_FIELD,udoc)).append(" AND ").append(DBUtils.generateEQTokenField(UINSTALACION_RELACION_FIELD,uinstalacion));  Map colToUpdate=Collections.singletonMap(POS_UDOC_FIELD,String.valueOf(posicion));  updateFields(qual.toString(),colToUpdate,TABLE_NAME);}  }
class C{  protected void traceMemory(){  trace("mem=" + getMemoryUsed());}  }
class C{  public static Character[] toObject(final char[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;  }  final Character[] result=new Character[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Character(array[i]);  }  return result;}  }
class C{  public synchronized Configuration loadConfiguration(){  if (buffer.position(12).readByte() == 1) {    return new Configuration(buffer.readLong(),buffer.readLong(),buffer.readLong(),serializer.readObject(buffer));  }  return null;}  }
class C{  public Duration dividedBy(long divisor){  if (divisor == 0) {    throw new ArithmeticException("Cannot divide by zero");  }  if (divisor == 1) {    return this;  }  return create(toSeconds().divide(BigDecimal.valueOf(divisor),RoundingMode.DOWN));}  }
class C{  public static double cdf(double val,int v){  double x=v / (val * val + v);  return 1 - (0.5 * BetaDistribution.regularizedIncBeta(x,v * .5,0.5));}  }
class C{  public int size(){  return size;}  }
class C{  public Info_Column(String colHeader,String colSQL,Class<?> colClass,boolean readOnly){  super(colHeader,colSQL,colClass,readOnly,false,null);}  }
class C{  public boolean isFillPoints(){  return mFillPoints;}  }
class C{  public static boolean equals(Object a,Object b){  return a == null ? b == null : a.equals(b);}  }
class C{  public ApplicationDescription clone(){  ApplicationDescription result=new ApplicationDescription();  result.ApplicationUri=ApplicationUri;  result.ProductUri=ProductUri;  result.ApplicationName=ApplicationName;  result.ApplicationType=ApplicationType;  result.GatewayServerUri=GatewayServerUri;  result.DiscoveryProfileUri=DiscoveryProfileUri;  result.DiscoveryUrls=DiscoveryUrls == null ? null : DiscoveryUrls.clone();  return result;}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  IgfsFileAffinityRange(IgfsFileAffinityRange other,int status){  startOff=other.startOff;  endOff=other.endOff;  affKey=other.affKey;  this.status=status;}  }
class C{  public boolean mergeCSSFrom(CSSClassManager other) throws CSSNamingConflict {  for (  CSSClass clss : other.getClasses()) {    this.addClass(clss);  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.108 -0500",hash_original_method="CC8D5ED8CB2C3C80437353ABAD2DF566",hash_generated_method="1A35D553520A52DA0CAD178CDB8F9B9B") private static String formatElapsedTime(StringBuilder recycle,String format,long minutes,long seconds){  if (FAST_FORMAT_MMSS.equals(format)) {    StringBuilder sb=recycle;    if (sb == null) {      sb=new StringBuilder(8);    } else {      sb.setLength(0);    }    if (minutes < 10) {      sb.append(TIME_PADDING);    } else {      sb.append(toDigitChar(minutes / 10));    }    sb.append(toDigitChar(minutes % 10));    sb.append(TIME_SEPARATOR);    if (seconds < 10) {      sb.append(TIME_PADDING);    } else {      sb.append(toDigitChar(seconds / 10));    }    sb.append(toDigitChar(seconds % 10));    return sb.toString();  } else {    return String.format(format,minutes,seconds);  }}  }
class C{  public void testIsBase64Encoded(){  System.out.println("isBase64Encoded");  String data="VGhpcyBpcyBhIHRlc3Qgc3RyaW5nIHdpdGggc3BlY2lhbCBjaGFycyBsaWtlIHRoczogL0BeJiooKCl7fXs6Ow==";  boolean result=Encoding.isBase64Encoded(data);  assertTrue(result);  String data1="This is a test string with special chars like ths: /@^&*((){}{:;";  boolean result1=Encoding.isBase64Encoded(data1);  assertFalse(result1);  String data2="This%20is%20a%20test%20string%20with%20special%20chars%20like%20ths%3A%20%2f@%5E%26%2a%28%28%29%7B%7D%7B%3A%3B";  boolean result2=Encoding.isBase64Encoded(data2);  assertFalse(result2);}  }
class C{  protected void Number() throws javax.xml.transform.TransformerException {  if (null != m_token) {    double num;    try {      if ((m_token.indexOf('e') > -1) || (m_token.indexOf('E') > -1))       throw new NumberFormatException();      num=Double.valueOf(m_token).doubleValue();    } catch (    NumberFormatException nfe) {      num=0.0;      error(XPATHErrorResources.ER_COULDNOT_BE_FORMATTED_TO_NUMBER,new Object[]{m_token});    }    m_ops.m_tokenQueue.setElementAt(new XNumber(num),m_queueMark - 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  public static void main(final String[] args){  BufferedReader reader=IOUtils.getBufferedReader(args[0]);  List<Integer> sizes=getSizeInfo(reader);  ChartUtil chart=getHistogram(sizes);  chart.saveAsPng(args[1] + "/cliques_distribution.png",800,600);}  }
class C{  public static void main(String argv[]){  Main converter=new Main();  System.exit(converter.convert(argv) ? 0 : 1);}  }
class C{  public void createOverlay(DrawingView view){  createOverlay(view,null);}  }
class C{  public static void rollback(){  if ((getEntityManager().getTransaction() != null) && getEntityManager().getTransaction().isActive()) {    getEntityManager().getTransaction().rollback();  }}  }
class C{  public void endIteration(SelectResults results){}  }
class C{  public static boolean areBasic(Class<?> dClass,Class<?> sClass){  return isBasic(dClass) && isBasic(sClass);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.065 -0500",hash_original_method="863150B34251535222F20C0EAB163E01",hash_generated_method="C6707C99228A8487FEA6AB57A4EE8C5B") public int model(){  return theModel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void testNextDouble(){  double f=ThreadLocalRandom.current().nextDouble();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public ArrayIntBig(){  pages=new ArrayList<int[]>();  length=0;}  }
class C{  public FormatInteger(final int in){  this(in,false);}  }
class C{  public EventSetDescriptor(String eventSetName,Class<?> listenerType,Method listenerMethods[],Method addListenerMethod,Method removeListenerMethod) throws IntrospectionException {  this(eventSetName,listenerType,listenerMethods,addListenerMethod,removeListenerMethod,null);}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses a hill climbing algorithm " + "restricted by an order on the variables.\n\n" + "For more information see:\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Works with nominal variables and no missing values only.";}  }
class C{  public void messageEvent(String selection){  m_notifier.notifyEvent(new MessageEvent(selection),new Vector<Object>());}  }
class C{  public static long bytes2LedgerId(byte[] data){  return Long.valueOf(new String(data,UTF_8));}  }
class C{  private CompletableFuture<Long> apply(InitializeEntry entry){  long timestamp=executor.timestamp(entry.getTimestamp());  for (  ServerSessionContext session : executor.context().sessions().sessions.values()) {    session.setTimestamp(timestamp);  }  log.release(entry.getIndex());  return Futures.completedFutureAsync(entry.getIndex(),ThreadContext.currentContextOrThrow().executor());}  }
class C{  public String uploadFile(Part filePart,final String bucketName) throws IOException {  DateTimeFormatter dtf=DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");  DateTime dt=DateTime.now(DateTimeZone.UTC);  String dtString=dt.toString(dtf);  final String fileName=filePart.getSubmittedFileName() + dtString;  BlobInfo blobInfo=storage.create(BlobInfo.builder(bucketName,fileName).acl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(),Role.READER)))).build(),filePart.getInputStream());  return blobInfo.mediaLink();}  }
class C{  public List<RegSpillListElement> createDU(LiveSet set){  if (DEBUG) {    System.out.println("creating a RegList for " + set);  }  List<RegSpillListElement> regList=new LinkedListRVM<RegSpillListElement>();  LiveSetEnumerator lsEnum=set.enumerator();  while (lsEnum.hasMoreElements()) {    RegisterOperand regOp=lsEnum.nextElement();    if (regOp.getType().isReferenceType() && !regOp.getRegister().isPhysical()) {      RegSpillListElement elem=new RegSpillListElement(regOp.getRegister());      regList.add(elem);    }  }  return regList;}  }
class C{  public String bucketName(){  return bucketName;}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  public double normalDistanceSquared(final double x,final double y,final double z){  double t=dotProduct(x,y,z);  double deltaX=this.x * t - x;  double deltaY=this.y * t - y;  double deltaZ=this.z * t - z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  public void pause(){  animation.pause();}  }
class C{  public boolean isDeleteDurableQueue(){  return deleteDurableQueue;}  }
class C{  public String toSourceCode(ObjectMatrix1D matrix){  Formatter copy=(Formatter)this.clone();  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  String lead="{";  String trail="};";  return lead + copy.toString(matrix) + trail;}  }
class C{  public DataBufferByte(int size,int numBanks){  super(STABLE,TYPE_BYTE,size,numBanks);  bankdata=new byte[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new byte[size];  }  data=bankdata[0];}  }
class C{  public static String extractDoctypeDeclaration(String html){  int doctypeBeginTagPtr=html.indexOf("<!DOCTYPE");  if (doctypeBeginTagPtr == -1) {    doctypeBeginTagPtr=html.indexOf("<!doctype");    if (doctypeBeginTagPtr == -1) {      return "";    }  }  int doctypeEndTagPtr=html.indexOf('>',doctypeBeginTagPtr);  String doctype=html.substring(doctypeBeginTagPtr,doctypeEndTagPtr + 1).trim().replace(CARRIAGE_RETURN_CHAR_1,EMPTY_CHAR).replace(CARRIAGE_RETURN_CHAR_2,EMPTY_CHAR);  Pattern pattern=Pattern.compile("\\s+");  Matcher matcher=pattern.matcher(doctype);  doctype=matcher.replaceAll(" ");  return doctype;}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entrySet(){  return super.entrySet();}  }
class C{  public Solution(int numberOfVariables,int numberOfObjectives){  this(numberOfVariables,numberOfObjectives,0);}  }
class C{  public void testMultipleFilteredEvents() throws Exception {  TungstenProperties config=helper.createDoubleQueueWithFilter(10,10,0,3,false);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  Pipeline pipeline=prepareAndStartPipeline(config,runtime);  InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");  this.insertEvents(input,0,5);  verifyProcessedSeqno(pipeline,4);  InMemoryQueueStore output=(InMemoryQueueStore)pipeline.getStore("q2");  long seqno=-1;  ReplDBMSFilteredEvent filteredEvent=null;  while (seqno < 4) {    ReplDBMSEvent event=output.poll();    seqno=event.getSeqno();    assertNotNull("Expected to read non-null event (last seqno=" + seqno + ")",event);    if (event instanceof ReplDBMSFilteredEvent)     filteredEvent=(ReplDBMSFilteredEvent)event;  }  assertNotNull("Expect to find a filtered event",filteredEvent);  assertEquals("Filter start",0,filteredEvent.getSeqno());  assertEquals("Filter end",2,filteredEvent.getSeqnoEnd());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public void stopRepeating(KeyCommandBind kcb){  if (!repeatingTasks.containsKey(kcb)) {    return;  }  repeatingTasks.get(kcb).cancel();  repeatingTasks.remove(kcb);}  }
class C{  public void writeOffset(long offset) throws IOException {  dataOutputStream.writeLong(offset);}  }
class C{  private void processAnsiCommand_S(){}  }
class C{  public static IStructuredDocumentRegion findStructuredDocumentRegion(Set<String> types,Set<String> abortTypes,IStructuredDocumentRegion searchStartRegion,boolean searchForward){  IStructuredDocumentRegion region=searchForward ? searchStartRegion.getNext() : searchStartRegion.getPrevious();  while (region != null) {    ITextRegionList textRegions=region.getRegions();    for (int i=0; i < textRegions.size(); i++) {      String curType=textRegions.get(i).getType();      if (abortTypes != null && abortTypes.contains(curType)) {        return null;      } else       if (types.contains(curType)) {        return region;      }    }    region=searchForward ? region.getNext() : region.getPrevious();  }  return null;}  }
class C{  public static boolean equals(byte[] hashA,byte[] hashB){  if (hashA == hashB)   return true; else   if (hashA == null || hashB == null)   return false;  int len=hashA.length;  if (len != hashB.length)   return false;  for (int i=len - 1; i >= 0; i--) {    if (hashA[i] != hashB[i])     return false;  }  return true;}  }
class C{  protected ParameterizedPropertyAccessExpressionImpl(){  super();}  }
class C{  public void writeTo(StreamOutput out) throws IOException {  out.writeString(name);  out.writeString(type);  Settings.writeSettingsToStream(settings,out);}  }
class C{  public static Map<String,Object> userLogin(DispatchContext ctx,Map<String,?> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  Delegator delegator=ctx.getDelegator();  if (!AuthHelper.authenticatorsLoaded()) {    AuthHelper.loadAuthenticators(dispatcher);  }  if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.enable",delegator))) {    if (!LdapAuthenticationServices.userLogin(ctx,context)) {      String errMsg=UtilProperties.getMessage(resource,"loginservices.ldap_authentication_failed",locale);      if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.fail.login",delegator))) {        return ServiceUtil.returnError(errMsg);      } else {        Debug.logInfo(errMsg,module);      }    }  }  Map<String,Object> result=new LinkedHashMap<String,Object>();  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  boolean isServiceAuth=context.get("isServiceAuth") != null && ((Boolean)context.get("isServiceAuth")).booleanValue();  String username=(String)context.get("login.username");  if (username == null)   username=(String)context.get("username");  String password=(String)context.get("login.password");  if (password == null)   password=(String)context.get("password");  String visitId=(String)context.get("visitId");  String errMsg="";  if (username == null || username.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"loginservices.username_missing",locale);  } else   if (password == null || password.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"loginservices.password_missing",locale);  } else {    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator))) {      username=username.toLowerCase();    }    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {      password=password.toLowerCase();    }    boolean repeat=true;    int passNumber=0;    while (repeat) {      repeat=false;      passNumber++;      GenericValue userLogin=null;      try {        userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",username).cache(isServiceAuth).queryOne();      } catch (      GenericEntityException e) {        Debug.logWarning(e,"",module);      }      if (userLogin == null) {        try {          AuthHelper.syncUser(username);        } catch (        AuthenticatorException e) {          Debug.logWarning(e,module);        }        try {          userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",username).cache(isServiceAuth).queryOne();        } catch (        GenericEntityException e) {          Debug.logWarning(e,"",module);        }      }      if (userLogin != null) {        String ldmStr=EntityUtilProperties.getPropertyValue("security.properties","login.disable.minutes",delegator);        long loginDisableMinutes=30;        try {          loginDisableMinutes=Long.parseLong(ldmStr);        } catch (        Exception e) {          loginDisableMinutes=30;          Debug.logWarning("Could not parse login.disable.minutes from security.properties, using default of 30",module);        }        Timestamp disabledDateTime=userLogin.getTimestamp("disabledDateTime");        Timestamp reEnableTime=null;        if (loginDisableMinutes > 0 && disabledDateTime != null) {          reEnableTime=new Timestamp(disabledDateTime.getTime() + loginDisableMinutes * 60000);        }        boolean doStore=true;        userLogin=GenericValue.create(userLogin);        boolean isSystem=(isServiceAuth && userLogin.get("isSystem") != null) ? "Y".equalsIgnoreCase(userLogin.getString("isSystem")) : false;        boolean hasLoggedOut=userLogin.get("hasLoggedOut") != null ? "Y".equalsIgnoreCase(userLogin.getString("hasLoggedOut")) : false;        if (UtilValidate.isEmpty(userLogin.getString("enabled")) || "Y".equals(userLogin.getString("enabled")) || (reEnableTime != null && reEnableTime.before(UtilDateTime.nowTimestamp()))|| (isSystem)) {          String successfulLogin;          if (!isSystem) {            userLogin.set("enabled","Y");          }          boolean authFatalError=false;          boolean externalAuth=false;          try {            externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);          } catch (          AuthenticatorException e) {            Debug.logWarning(e,module);            authFatalError=true;          }          if ((!authFatalError && externalAuth) || checkPassword(userLogin.getString("currentPassword"),useEncryption,password)) {            Debug.logVerbose("[LoginServices.userLogin] : Password Matched",module);            if (hasLoggedOut) {              userLogin.set("hasLoggedOut","N");            }            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");            if (currentFailedLogins != null && currentFailedLogins.longValue() > 0) {              userLogin.set("successiveFailedLogins",Long.valueOf(0));            } else             if (!hasLoggedOut) {              doStore=false;            }            successfulLogin="Y";            if (!isServiceAuth) {              Map<?,?> userLoginSessionMap=LoginWorker.getUserLoginSession(userLogin);              if (userLoginSessionMap != null) {                result.put("userLoginSession",userLoginSessionMap);              }            }            result.put("userLogin",userLogin);            result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);          } else {            if (!authFatalError && isServiceAuth && passNumber <= 1) {              delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));              repeat=true;              continue;            }            Debug.logInfo("[LoginServices.userLogin] : Password Incorrect",module);            errMsg=UtilProperties.getMessage(resource,"loginservices.password_incorrect",locale);            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");            if (currentFailedLogins == null) {              currentFailedLogins=Long.valueOf(1);            } else {              currentFailedLogins=Long.valueOf(currentFailedLogins.longValue() + 1);            }            userLogin.set("successiveFailedLogins",currentFailedLogins);            String mflStr=EntityUtilProperties.getPropertyValue("security.properties","max.failed.logins",delegator);            long maxFailedLogins=3;            try {              maxFailedLogins=Long.parseLong(mflStr);            } catch (            Exception e) {              maxFailedLogins=3;              Debug.logWarning("Could not parse max.failed.logins from security.properties, using default of 3",module);            }            if (maxFailedLogins > 0 && currentFailedLogins.longValue() >= maxFailedLogins) {              userLogin.set("enabled","N");              userLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());            }            successfulLogin="N";          }          Transaction parentTx=null;          boolean beganTransaction=false;          try {            try {              parentTx=TransactionUtil.suspend();            } catch (            GenericTransactionException e) {              Debug.logError(e,"Could not suspend transaction: " + e.getMessage(),module);            }            try {              beganTransaction=TransactionUtil.begin();              if (doStore) {                userLogin.store();              }              if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history",delegator))) {                boolean createHistory=true;                if (isServiceAuth && !"true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.on.service.auth",delegator))) {                  createHistory=false;                }                if (createHistory) {                  Map<String,Object> ulhCreateMap=UtilMisc.toMap("userLoginId",username,"visitId",visitId,"fromDate",UtilDateTime.nowTimestamp(),"successfulLogin",successfulLogin);                  ModelEntity modelUserLogin=userLogin.getModelEntity();                  if (modelUserLogin.isField("partyId")) {                    ulhCreateMap.put("partyId",userLogin.get("partyId"));                  }                  if ("N".equals(successfulLogin) && !"false".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.incorrect.password",delegator))) {                    ulhCreateMap.put("passwordUsed",password);                  }                  delegator.create("UserLoginHistory",ulhCreateMap);                }              }            } catch (            GenericEntityException e) {              String geeErrMsg="Error saving UserLoginHistory";              if (doStore) {                geeErrMsg+=" and updating login status to reset hasLoggedOut, unsuccessful login count, etc.";              }              geeErrMsg+=": " + e.toString();              try {                TransactionUtil.rollback(beganTransaction,geeErrMsg,e);              } catch (              GenericTransactionException e2) {                Debug.logError(e2,"Could not rollback nested transaction: " + e2.getMessage(),module);              }              if (doStore) {                return ServiceUtil.returnError(geeErrMsg);              }            } finally {              try {                TransactionUtil.commit(beganTransaction);              } catch (              GenericTransactionException e) {                Debug.logError(e,"Could not commit nested transaction: " + e.getMessage(),module);              }            }          }  finally {            if (parentTx != null) {              try {                TransactionUtil.resume(parentTx);                Debug.logVerbose("Resumed the parent transaction.",module);              } catch (              GenericTransactionException e) {                Debug.logError(e,"Could not resume parent nested transaction: " + e.getMessage(),module);              }            }          }        } else {          if (isServiceAuth && passNumber <= 1) {            delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));            repeat=true;            continue;          }          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("username",username);          errMsg=UtilProperties.getMessage(resource,"loginservices.account_for_user_login_id_disabled",messageMap,locale);          if (disabledDateTime != null) {            messageMap=UtilMisc.<String,Object>toMap("disabledDateTime",disabledDateTime);            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.since_datetime",messageMap,locale);          } else {            errMsg+=".";          }          if (loginDisableMinutes > 0 && reEnableTime != null) {            messageMap=UtilMisc.<String,Object>toMap("reEnableTime",reEnableTime);            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.will_be_reenabled",messageMap,locale);          } else {            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.not_scheduled_to_be_reenabled",locale);          }        }      } else {        boolean externalAuth=false;        try {          externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);        } catch (        AuthenticatorException e) {          errMsg=e.getMessage();          Debug.logError(e,"External Authenticator had fatal exception : " + e.getMessage(),module);        }        if (externalAuth) {          userLogin=delegator.makeValue("UserLogin");          userLogin.set("userLoginId",username);          userLogin.set("enabled","Y");          userLogin.set("hasLoggedOut","N");          result.put("userLogin",userLogin);          result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);        } else {          errMsg=UtilProperties.getMessage(resource,"loginservices.user_not_found",locale);          Debug.logInfo("[LoginServices.userLogin] Invalid User : '" + username + "'; "+ errMsg,module);        }      }    }  }  if (errMsg.length() > 0) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  public void writeBinary(ByteBuffer bin) throws TException {  int length=bin.limit() - bin.position();  writeBinary(bin.array(),bin.position() + bin.arrayOffset(),length);}  }
class C{  @Override public int compareTo(Value arg0){  if (arg0 instanceof ArrayVal) {    double[] otherVector=((ArrayVal)arg0).getArray();    if (array.length != otherVector.length) {      return array.length - otherVector.length;    } else {      for (int i=0; i < array.length; i++) {        double val1=array[i];        double val2=otherVector[i];        if (Math.abs(val1 - val2) > 0.0001) {          return (new Double(val1).compareTo(new Double(val2)));        }      }      return 0;    }  }  return hashCode() - arg0.hashCode();}  }
class C{  public Set<Account.Id> findAll(ReviewDb db,String nameOrEmail) throws OrmException {  Matcher m=Pattern.compile("^.* \\(([1-9][0-9]*)\\)$").matcher(nameOrEmail);  if (m.matches()) {    Account.Id id=Account.Id.parse(m.group(1));    if (exists(db,id)) {      return Collections.singleton(id);    }    return Collections.emptySet();  }  if (nameOrEmail.matches("^[1-9][0-9]*$")) {    Account.Id id=Account.Id.parse(nameOrEmail);    if (exists(db,id)) {      return Collections.singleton(id);    }    return Collections.emptySet();  }  if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {    AccountState who=byId.getByUsername(nameOrEmail);    if (who != null) {      return Collections.singleton(who.getAccount().getId());    }  }  return findAllByNameOrEmail(db,nameOrEmail);}  }
class C{  public String toString(){  if (m_namespace != null && m_namespace.length() > 0)   return "{" + m_namespace + "}"+ m_extensionName; else   return m_extensionName;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Dimension toViewCoordinates(Dimension size){  return new Dimension(size);}  }
class C{  public static String trim(CharSequence s){  if (s == null) {    return null;  }  Matcher m=sTrimPattern.matcher(s);  return m.replaceAll("$1");}  }
class C{  public static byte[] toMACAddress(String macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  private void validateTestDataOffsetDTTypes(String tableName,int expectedRowCount) throws Exception {  Connection testConn=getConnectionWithProps("autoDeserialize=true");  Statement testStmt=testConn.createStatement();  this.rs=testStmt.executeQuery("SELECT * FROM " + tableName);  int rowCount=0;  while (rs.next()) {    String row="Row " + rs.getInt(1);    assertEquals(++rowCount,rs.getInt(1));    assertEquals(row,testOffsetTime,this.rs.getObject(2,OffsetTime.class));    assertEquals(row,testOffsetTime,this.rs.getObject(3,OffsetTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject(4,OffsetDateTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject(5,OffsetDateTime.class));    assertEquals(row,rowCount,this.rs.getInt("id"));    assertEquals(row,testOffsetTime,this.rs.getObject("ot1",OffsetTime.class));    assertEquals(row,testOffsetTime,this.rs.getObject("ot2",OffsetTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject("odt1",OffsetDateTime.class));    assertEquals(row,testOffsetDateTime,this.rs.getObject("odt2",OffsetDateTime.class));  }  assertEquals(expectedRowCount,rowCount);  testConn.close();}  }
class C{  private static Boolean loginUser(FinanceService service,String userID,String userPassword){  try {    service.setUserCredentials(userID,userPassword);  } catch (  AuthenticationException e) {    System.err.println("Invalid Credentials!");    e.printStackTrace();    return false;  }  return true;}  }
class C{  public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  public long lastIndex(){  assertSegmentOpen();  return !isEmpty() ? offsetIndex.lastOffset() + descriptor.index() + skip : descriptor.index() - 1;}  }
class C{  void recalcDimensions(){  final int wOld=fWidth;  final int hOld=fHeight;  calcDimensions();  if (wOld != fWidth || hOld != fHeight) {    fComponent.invalidate();  }}  }
class C{  public DividerBuilder erase(){  return with(Divider.ERASER);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.INTERSECTION_TYPE_EXPRESSION;}  }
class C{  public static int replaceAll(RTextArea textArea,String toFind,String replaceWith,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  int count=0;  textArea.beginAtomicEdit();  try {    if (regex) {      if (replaceWith == null) {        replaceWith="";      }      int oldOffs=textArea.getCaretPosition();      textArea.setCaretPosition(0);      int flags=Pattern.MULTILINE;      flags|=matchCase ? 0 : Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;      Pattern p=Pattern.compile(toFind,flags);      while (SearchEngine.find(textArea,toFind,true,matchCase,wholeWord,true)) {        Matcher m=p.matcher(textArea.getSelectedText());        String replacement=getReplacementText(m,replaceWith);        textArea.replaceSelection(replacement);        count++;      }      if (count == 0) {        textArea.setCaretPosition(oldOffs);      }    } else {      textArea.setCaretPosition(0);      while (SearchEngine.find(textArea,toFind,true,matchCase,wholeWord,false)) {        textArea.replaceSelection(replaceWith);        count++;      }    }  }  finally {    textArea.endAtomicEdit();  }  return count;}  }
class C{  public static long staticNextLongFromTo(long from,long to){synchronized (shared) {    return shared.nextLongFromTo(from,to);  }}  }
class C{  public FilterQuery locations(final double[][] locations){  this.locations=locations;  return this;}  }
class C{  public static int computeTexturePixelFormat(int internalFormat){switch (internalFormat) {case GL2.GL_ALPHA:case GL2.GL_ALPHA4:case GL2.GL_ALPHA8:case GL2.GL_ALPHA12:case GL2.GL_ALPHA16:case GL2.GL_COMPRESSED_ALPHA:    return GL2.GL_ALPHA;case GL2.GL_COMPRESSED_LUMINANCE:case GL2.GL_LUMINANCE:case GL2.GL_LUMINANCE4:case GL2.GL_LUMINANCE8:case GL2.GL_LUMINANCE12:case GL2.GL_LUMINANCE16:case GL2.GL_SLUMINANCE:case GL2.GL_SLUMINANCE8:  return GL2.GL_LUMINANCE;case GL2.GL_COMPRESSED_LUMINANCE_ALPHA:case GL2.GL_LUMINANCE_ALPHA:case GL2.GL_LUMINANCE4_ALPHA4:case GL2.GL_LUMINANCE6_ALPHA2:case GL2.GL_LUMINANCE8_ALPHA8:case GL2.GL_LUMINANCE12_ALPHA4:case GL2.GL_LUMINANCE12_ALPHA12:case GL2.GL_LUMINANCE16_ALPHA16:case GL2.GL_SLUMINANCE_ALPHA:case GL2.GL_SLUMINANCE8_ALPHA8:return GL2.GL_LUMINANCE_ALPHA;case GL2.GL_COMPRESSED_INTENSITY:case GL2.GL_DEPTH_COMPONENT:case GL2.GL_DEPTH_COMPONENT16:case GL2.GL_DEPTH_COMPONENT24:case GL2.GL_DEPTH_COMPONENT32:case GL2.GL_INTENSITY:case GL2.GL_INTENSITY4:case GL2.GL_INTENSITY8:case GL2.GL_INTENSITY12:case GL2.GL_INTENSITY16:return GL2.GL_RED;case GL2.GL_COMPRESSED_RGB:case GL2.GL_R3_G3_B2:case GL2.GL_RGB:case GL2.GL_RGB4:case GL2.GL_RGB5:case GL2.GL_RGB8:case GL2.GL_RGB10:case GL2.GL_RGB12:case GL2.GL_RGB16:case GL2.GL_SRGB:case GL2.GL_SRGB8:return GL2.GL_RGB;case GL2.GL_COMPRESSED_RGBA:case GL2.GL_RGBA:case GL2.GL_RGBA2:case GL2.GL_RGBA4:case GL2.GL_RGB5_A1:case GL2.GL_RGBA8:case GL2.GL_RGB10_A2:case GL2.GL_RGBA12:case GL2.GL_RGBA16:case GL2.GL_SRGB_ALPHA:case GL2.GL_SRGB8_ALPHA8:return GL2.GL_RGBA;default :return 0;}}  }
class C{  @Override protected void init(){  this.environmentEventRegistry.init();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysTrue(){  return (Predicate<T>)TRUE;}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  @NotNull public Pair<List<Commit>,Integer> addCommits(@NotNull List<? extends Commit> savedLog,@NotNull Collection<CommitId> previousRefs,@NotNull List<? extends Commit> firstBlock,@NotNull Collection<CommitId> newRefs){  Pair<Integer,Set<Commit>> newCommitsAndSavedGreenIndex=getNewCommitsAndSavedGreenIndex(savedLog,previousRefs,firstBlock,newRefs);  Pair<Integer,Set<CommitId>> redCommitsAndSavedRedIndex=getRedCommitsAndSavedRedIndex(savedLog,previousRefs,firstBlock,newRefs);  Set<CommitId> removeCommits=redCommitsAndSavedRedIndex.second;  Set<Commit> allNewsCommits=newCommitsAndSavedGreenIndex.second;  int unsafeBlockSize=Math.max(redCommitsAndSavedRedIndex.first,newCommitsAndSavedGreenIndex.first);  List<Commit> unsafePartSavedLog=new ArrayList<Commit>();  for (  Commit commit : savedLog.subList(0,unsafeBlockSize)) {    if (!removeCommits.contains(commit.getId())) {      unsafePartSavedLog.add(commit);    }  }  unsafePartSavedLog=new NewCommitIntegrator<CommitId,Commit>(unsafePartSavedLog,allNewsCommits).getResultList();  return Pair.create(ContainerUtil.concat(unsafePartSavedLog,savedLog.subList(unsafeBlockSize,savedLog.size())),unsafePartSavedLog.size() - unsafeBlockSize);}  }
class C{  protected boolean isIdatKind(String id){  return false;}  }
class C{  public static String readFromFile(final InputStream path) throws IOException {  InputStreamReader fr=null;  BufferedReader br=null;  StringBuilder stringBuilder=new StringBuilder();  try {    fr=new InputStreamReader(path);    br=new BufferedReader(fr);    String line;    while ((line=br.readLine()) != null) {      stringBuilder.append(line).append("\n");    }  }  finally {    if (br != null) {      try {        br.close();      } catch (      IOException e) {        e.printStackTrace();      }    }    if (fr != null) {      try {        fr.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return stringBuilder.toString();}  }
class C{  public boolean isHasNoBody(){  return hasNoBody;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredCovariantConstructor: ");  result.append(declaredCovariantConstructor);  result.append(')');  return result.toString();}  }
class C{  @SuppressLint("NewApi") private void onSelectionCleared(){  mOnContactSelectedListener.onSelectionCleared();  getListView().clearChoices();}  }
class C{  @Override public boolean supportsOpenCursorsAcrossRollback(){  debugCodeCall("supportsOpenCursorsAcrossRollback");  return false;}  }
class C{  @Override protected IMember resolveMember() throws JavaModelException {  char[] declarationSignature=fProposal.getDeclarationSignature();  String typeName=SignatureUtil.stripSignatureToFQN(String.valueOf(declarationSignature));  IType type=fJavaProject.findType(typeName);  if (type != null) {    String name=String.valueOf(fProposal.getName());    String[] parameters=Signature.getParameterTypes(String.valueOf(SignatureUtil.fix83600(fProposal.getSignature())));    for (int i=0; i < parameters.length; i++) {      parameters[i]=SignatureUtil.getLowerBound(parameters[i]);    }    boolean isConstructor=fProposal.isConstructor();    return findMethod(name,parameters,isConstructor,type);  }  return null;}  }
class C{  String inprogressZNode(long ledgerId,long firstTxId,long logSegmentSeqNo){  return logMetadata.getLogSegmentsPath() + "/" + inprogressZNodeName(ledgerId,firstTxId,logSegmentSeqNo);}  }
class C{  private static void s_uavar(SparseBlock a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  int count=(ru - rl) * n - (int)a.size(rl,ru);  cbuff.w=count;  if (a.isContiguous()) {    var(a.values(rl),a.pos(rl),(int)a.size(rl,ru),cbuff,cm);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       var(a.values(i),a.pos(i),a.size(i),cbuff,cm);    }  }  c[0]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);  c[1]=cbuff.mean._sum;  c[2]=cbuff.w;  c[3]=cbuff.m2._correction;  c[4]=cbuff.mean._correction;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder(32);switch (this.eventType) {case TYPE_EXECUTE:    buf.append("EXECUTE");  break;case TYPE_FETCH:buf.append("FETCH");break;case TYPE_OBJECT_CREATION:buf.append("CONSTRUCT");break;case TYPE_PREPARE:buf.append("PREPARE");break;case TYPE_QUERY:buf.append("QUERY");break;case TYPE_WARN:buf.append("WARN");break;case TYPE_SLOW_QUERY:buf.append("SLOW QUERY");break;default :buf.append("UNKNOWN");}buf.append(" created: ");buf.append(new Date(this.eventCreationTime));buf.append(" duration: ");buf.append(this.eventDuration);buf.append(" connection: ");buf.append(this.connectionId);buf.append(" statement: ");buf.append(this.statementId);buf.append(" resultset: ");buf.append(this.resultSetId);if (this.message != null) {buf.append(" message: ");buf.append(this.message);}if (this.eventCreationPointDesc != null) {buf.append("\n\nEvent Created at:\n");buf.append(this.eventCreationPointDesc);}return buf.toString();}  }
class C{  private void updateMenuIcon(){  Icon frameIcon=frame.getFrameIcon();  SynthContext context=getContext(this);  if (frameIcon != null) {    Dimension maxSize=(Dimension)context.getStyle().get(context,"InternalFrameTitlePane.maxFrameIconSize");    int maxWidth=16;    int maxHeight=16;    if (maxSize != null) {      maxWidth=maxSize.width;      maxHeight=maxSize.height;    }    if ((frameIcon.getIconWidth() > maxWidth || frameIcon.getIconHeight() > maxHeight) && (frameIcon instanceof ImageIcon)) {      frameIcon=new ImageIcon(((ImageIcon)frameIcon).getImage().getScaledInstance(maxWidth,maxHeight,Image.SCALE_SMOOTH));    }  }  context.dispose();  menuButton.setIcon(frameIcon);}  }
class C{  public SeveralAttachments(){  requestFileName="attachments.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  responseFile="attachm.answer";}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:38.504 -0500",hash_original_method="509B8D432808DFEEDB9A2530ACB4E595",hash_generated_method="C716B16F4C7B37D4606F4D39D268B8A6") String checkString(String s,int base){  if (s == null) {    throw new NullPointerException();  }  int charCount=s.length();  int i=0;  if (charCount > 0) {    char ch=s.charAt(0);    if (ch == '+') {      s=s.substring(1);      --charCount;    } else     if (ch == '-') {      ++i;    }  }  if (charCount - i == 0) {    throw invalidBigInteger(s);  }  boolean nonAscii=false;  for (; i < charCount; ++i) {    char ch=s.charAt(i);    if (Character.digit(ch,base) == -1) {      throw invalidBigInteger(s);    }    if (ch > 128) {      nonAscii=true;    }  }  return nonAscii ? toAscii(s,base) : s;}  }
class C{  @Override public boolean revokeLock(){  File lockDir=getLockDir();  File lockedFile=new File(lockDir,LOCK_FILE_NAME);  File infoFile=new File(lockDir,INFO_FILE_NAME);  lockedFile.delete();  infoFile.delete();  return lockDir.delete();}  }
class C{  public boolean retainAll(AbstractBooleanList other){  if (!(other instanceof BooleanArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  boolean[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    BooleanArrayList sortedList=(BooleanArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public static void loggerInit(Level level,boolean isRedirectStdOutErr,String format) throws IOException {  setLoggingFormat(format);  Logger rootLogger=Logger.getLogger("");  for (  Handler handler : rootLogger.getHandlers()) {    handler.setLevel(level);  }  rootLogger.setLevel(level);  if (isRedirectStdOutErr) {    for (    Handler handler : rootLogger.getHandlers()) {      if (handler instanceof ConsoleHandler) {        rootLogger.removeHandler(handler);      }    }    Logger logger;    LoggingOutputStream los;    logger=Logger.getLogger("stdout");    los=new LoggingOutputStream(logger,StdOutErrLevel.STDOUT);    System.setOut(new PrintStream(los,true));    logger=Logger.getLogger("stderr");    los=new LoggingOutputStream(logger,StdOutErrLevel.STDERR);    System.setErr(new PrintStream(los,true));  }}  }
class C{  public ObjectStreamField(String name,Class<?> cl,boolean unshared){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);  this.unshared=unshared;}  }
class C{  public ImageImportDescriptor(BinaryInputBuffer in) throws java.io.IOException {  OriginalFirstThunk=in.readDWORD();  TimeDateStamp=in.readDWORD();  ForwarderChain=in.readDWORD();  Name=in.readDWORD();  FirstThunk=in.readDWORD();}  }
class C{  protected DefaultDirectedGraph<V,E> computeReverseJGraph(){  DefaultDirectedGraph<V,E> r=new DefaultDirectedGraph<V,E>(edgeClass);  for (  V v : vertexSet())   if (!r.addVertex(v))   throw new IllegalStateException("internal error while adding vertices");  for (  E e : edgeSet()) {    V src=getEdgeSource(e);    V target=getEdgeTarget(e);    if (r.addEdge(target,src) == null)     throw new IllegalStateException("internal error while adding reverse edges");  }  return r;}  }
class C{  public Dimension minimumLayoutSize(Container target){synchronized (target.getTreeLock()) {    boolean useBaseline=getAlignOnBaseline();    Dimension dim=new Dimension(0,0);    int nmembers=target.getComponentCount();    int maxAscent=0;    int maxDescent=0;    boolean firstVisibleComponent=true;    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.visible) {        Dimension d=m.getMinimumSize();        dim.height=Math.max(dim.height,d.height);        if (firstVisibleComponent) {          firstVisibleComponent=false;        } else {          dim.width+=hgap;        }        dim.width+=d.width;        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            maxAscent=Math.max(maxAscent,baseline);            maxDescent=Math.max(maxDescent,dim.height - baseline);          }        }      }    }    if (useBaseline) {      dim.height=Math.max(maxAscent + maxDescent,dim.height);    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right + hgap * 2;    dim.height+=insets.top + insets.bottom + vgap * 2;    return dim;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.REAL_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    double[] array=new double[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Double.parseDouble(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public T caseExpressionAnnotationList(ExpressionAnnotationList object){  return null;}  }
class C{  @Deprecated public final String readLine() throws IOException {  char buf[]=lineBuffer;  if (buf == null) {    buf=lineBuffer=new char[128];  }  int room=buf.length;  int offset=0;  int c;  loop:   while (true) {switch (c=in.read()) {case -1:case '\n':      break loop;case '\r':    int c2=in.read();  if ((c2 != '\n') && (c2 != -1)) {    if (!(in instanceof PushbackInputStream)) {      this.in=new PushbackInputStream(in);    }    ((PushbackInputStream)in).unread(c2);  }break loop;default :if (--room < 0) {buf=new char[offset + 128];room=buf.length - offset - 1;System.arraycopy(lineBuffer,0,buf,0,offset);lineBuffer=buf;}buf[offset++]=(char)c;break;}}if ((c == -1) && (offset == 0)) {return null;}return String.copyValueOf(buf,0,offset);}  }
class C{  public HttpStatus deleteUser(String username){  logger.info("GitlabService : deleteUser " + username);  if (gitlabToken == null || gitlabToken.trim().length() == 0) {    logger.warn("Cannot use this feature because no token for GitLab");    return HttpStatus.NOT_IMPLEMENTED;  }  if (gitlabAPI == null || gitlabAPI.trim().length() == 0) {    logger.warn("Cannot use this feature because no URL given for GitLab API");    return HttpStatus.NOT_IMPLEMENTED;  }  try {    GitlabAPI api=GitlabAPI.connect(gitlabAPI,gitlabToken,TokenType.PRIVATE_TOKEN,AuthMethod.URL_PARAMETER);    List<GitlabUser> users=api.getUsers();    for (    GitlabUser user : users) {      if (user.getUsername().equals(username)) {        api.deleteUser(user.getId());        return HttpStatus.OK;      }    }    return HttpStatus.NOT_FOUND;  } catch (  Exception e) {    logger.error(username,e);    return HttpStatus.BAD_REQUEST;  }}  }
class C{  public boolean hasAnyPositionInfo(){  return hasAnyPositionInfo;}  }
class C{  @Override protected void installDefaults(){  LayoutManager layout=spinner.getLayout();  if (layout == null || layout instanceof UIResource) {    spinner.setLayout(createLayout());  }  updateStyle(spinner);}  }
class C{  public void allowMultiple(){  this.allowMultiple=true;}  }
class C{  protected ClassDefinition parseClassBody(IdentifierToken nm,int mod,int ctx,String doc,Vector ext,Vector impl,long p) throws SyntaxError, IOException {  IdentifierToken sup=null;  if ((mod & M_INTERFACE) != 0) {    if (impl.size() > 0) {      env.error(((IdentifierToken)impl.elementAt(0)).getWhere(),"intf.impl.intf");    }    impl=ext;  } else {    if (ext.size() > 0) {      if (ext.size() > 1) {        env.error(((IdentifierToken)ext.elementAt(1)).getWhere(),"multiple.inherit");      }      sup=(IdentifierToken)ext.elementAt(0);    }  }  ClassDefinition oldClass=curClass;  IdentifierToken implids[]=new IdentifierToken[impl.size()];  impl.copyInto(implids);  ClassDefinition newClass=actions.beginClass(p,doc,mod,nm,sup,implids);  expect(LBRACE);  while ((token != EOF) && (token != RBRACE)) {    try {      curClass=newClass;      parseField();    } catch (    SyntaxError e) {      recoverField(newClass);    } finally {      curClass=oldClass;    }  }  expect(RBRACE);  actions.endClass(scanner.prevPos,newClass);  return newClass;}  }
class C{  public void addBitmapToCache(final String data,final Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }  addBitmapToMemCache(data,bitmap);  if (mDiskCache != null) {    final String key=hashKeyForDisk(data);    OutputStream out=null;    try {      final DiskLruCache.Snapshot snapshot=mDiskCache.get(key);      if (snapshot == null) {        final DiskLruCache.Editor editor=mDiskCache.edit(key);        if (editor != null) {          out=editor.newOutputStream(DISK_CACHE_INDEX);          bitmap.compress(COMPRESS_FORMAT,COMPRESS_QUALITY,out);          editor.commit();          out.close();          flush();        }      } else {        snapshot.getInputStream(DISK_CACHE_INDEX).close();      }    } catch (    final IOException e) {      Log.e(TAG,"addBitmapToCache - " + e);    } finally {      try {        if (out != null) {          out.close();          out=null;        }      } catch (      final IOException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }catch (      final IllegalStateException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }    }  }}  }
class C{  public HGHandle add(Object atom,HGHandle type,int flags){  return add(graph.add(atom,type,flags));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.448 -0500",hash_original_method="4DF3A9A601EFF55EEB4CCC4D0E1A4382",hash_generated_method="13E408CCF65C1FF11D071DDA160B148B") public void putInMergeTable(SIPServerTransaction sipTransaction,SIPRequest sipRequest){  String mergeKey=sipRequest.getMergeId();  if (mergeKey != null) {    this.mergeTable.put(mergeKey,sipTransaction);  }}  }
class C{  public static OMLine read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMLine line=null;  float lat_1=0.0f;  float lon_1=0.0f;  float lat_2=0.0f;  float lon_2=0.0f;  int x1=0;  int y1=0;  int x2=0;  int y2=0;  int nsegs=-1;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    int lineType=dis.readByte();  lat_1=dis.readFloat();lon_1=dis.readFloat();lat_2=dis.readFloat();lon_2=dis.readFloat();nsegs=dis.readInt();line=new OMLine(lat_1,lon_1,lat_2,lon_2,lineType,nsegs);break;case RENDERTYPE_XY:x1=dis.readInt();y1=dis.readInt();x2=dis.readInt();y2=dis.readInt();line=new OMLine(x1,y1,x2,y2);break;case RENDERTYPE_OFFSET:lat_1=dis.readFloat();lon_1=dis.readFloat();x1=dis.readInt();y1=dis.readInt();x2=dis.readInt();y2=dis.readInt();line=new OMLine(lat_1,lon_1,x1,y1,x2,y2);break;default :}if (line != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,line,propertiesBuffer);}return line;}  }
class C{  private static void createKeyStore() throws KeyStoreException, IOException {  if (sKeyStore != null) {    return;  }  try {    sKeyStore=KeyStore.getInstance(getKeystoreType());synchronized (KeyStoreManager.class) {      sKeyStore.load(null,KEYSTORE_PASSWORD.toCharArray());    }    saveKeyStoreToFile(sKeyStore);  } catch (  NoSuchAlgorithmException e) {    throw new KeyStoreException("Unable to create key store!",e);  }catch (  CertificateException e) {    throw new KeyStoreException("Unable to create key store!",e);  }}  }
class C{  public void removeListener(final LoginListener listener){  listeners.remove(listener);}  }
class C{  public ToStringBuilder append(final boolean[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots/{sid}/resynchronize") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep resynchronizeConsistencyGroupSnapshot(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapshotId){  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final BlockSnapshot snapshot=(BlockSnapshot)queryResource(snapshotId);  verifySnapshotIsForConsistencyGroup(snapshot,consistencyGroup);  if (BlockConsistencyGroupUtils.getLocalSystemsInCG(consistencyGroup,_dbClient).isEmpty()) {    _log.error("{} Group Snapshot operations not supported when there is no backend CG",consistencyGroup.getId());    throw APIException.badRequests.cannotCreateSnapshotOfVplexCG();  }  StorageSystem storage=_permissionsHelper.getObjectById(snapshot.getStorageController(),StorageSystem.class);  if (Type.openstack.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason(String.format("Snapshot resynchronization is not possible on third-party storage systems"));  }  if (Type.ibmxiv.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason("Snapshot resynchronization is not supported on IBM XIV storage systems");  }  if (Type.vnxblock.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason("Snapshot resynchronization is not supported on VNX storage systems");  }  if (storage.checkIfVmax3()) {    throw APIException.methodNotAllowed.notSupportedWithReason("Snapshot resynchronization is not supported on VMAX3 storage systems");  }  final Volume snapshotParentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  blockServiceApiImpl.validateResynchronizeSnapshot(snapshot,snapshotParentVolume);  final String taskId=UUID.randomUUID().toString();  final Operation op=_dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),taskId,ResourceOperationTypeEnum.RESYNCHRONIZE_CONSISTENCY_GROUP_SNAPSHOT);  blockServiceApiImpl.resynchronizeSnapshot(snapshot,snapshotParentVolume,taskId);  auditBlockConsistencyGroup(OperationTypeEnum.RESTORE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,snapshotId.toString(),consistencyGroupId.toString(),snapshot.getStorageController().toString());  return toTask(snapshot,taskId,op);}  }
class C{  public DeafServer() throws IOException {  InetSocketAddress addr=new InetSocketAddress(0);  server=HttpServer.create(addr,0);  HttpHandler handler=new DeafHandler();  server.createContext("/",handler);  server.setExecutor(Executors.newCachedThreadPool());  server.start();}  }
class C{  private void _serializeDateTime(DateTime dateTime,StringBuilder sb) throws ConverterException {  try {    sb.append(goIn());    sb.append("createDateTime(");    sb.append(DateFormat.call(null,dateTime,"yyyy,m,d"));    sb.append(',');    sb.append(TimeFormat.call(null,dateTime,"H,m,s,l,\"z\""));    sb.append(')');  } catch (  PageException e) {    throw toConverterException(e);  }}  }
class C{  public void add(String key,Serializable value){  List<Serializable> entries=data.get(key);  if (entries == null) {    entries=new ArrayList<Serializable>();    data.put(key,entries);  }  entries.add(value);}  }
class C{  public static VertexStructure[] construct(int numVertices){  VertexStructure struct[]=new VertexStructure[numVertices];  for (int i=0; i < numVertices; i++) {    struct[i]=new VertexStructure();  }  return struct;}  }
class C{  @POST public Response createOrder(Order order){  String id=orderService.createOrder(order);  return Response.ok(id).build();}  }
class C{  public static boolean compare(final Long me,final Long you){  if (me == you) {    return true;  }  if (me == null) {    return false;  }  return me.equals(you);}  }
class C{  private static void generateSuper(ClassFileWriter cfw,String genName,String superName,String methodName,String methodSignature,Class<?>[] parms,Class<?> returnType){  cfw.startMethod("super$" + methodName,methodSignature,ClassFileWriter.ACC_PUBLIC);  cfw.add(ByteCode.ALOAD,0);  int paramOffset=1;  for (int i=0; i < parms.length; i++) {    paramOffset+=generatePushParam(cfw,paramOffset,parms[i]);  }  cfw.addInvoke(ByteCode.INVOKESPECIAL,superName,methodName,methodSignature);  Class<?> retType=returnType;  if (!retType.equals(Void.TYPE)) {    generatePopResult(cfw,retType);  } else {    cfw.add(ByteCode.RETURN);  }  cfw.stopMethod((short)(paramOffset + 1));}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] keyInfoData) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(keyInfoData)));}  }
class C{  protected final void readHeaderFile(){  DataInputStream in=null;  BufferedReader br=null;  boolean byteOrderRead=false;  String delimiter="\t";  try {    FileInputStream fstream=new FileInputStream(this.headerFile);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    if (this.headerFile != null) {      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split(delimiter);        if (str.length == 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length == 1) {            delimiter=";";            str=line.split(delimiter);          }        }        int dataCol=str.length - 1;        if (str[0].toLowerCase().contains("min:") && (!str[0].toLowerCase().contains("display"))) {          this.minimumValue=Float.parseFloat(str[dataCol]);        } else         if (str[0].toLowerCase().contains("max:") && (!str[0].toLowerCase().contains("display"))) {          this.maximumValue=Float.parseFloat(str[dataCol]);        } else         if (str[0].toLowerCase().contains("north")) {          this.north=Double.parseDouble(str[dataCol]);        } else         if (str[0].toLowerCase().contains("south")) {          this.south=Double.parseDouble(str[dataCol]);        } else         if (str[0].toLowerCase().contains("west")) {          this.west=Double.parseDouble(str[dataCol]);        } else         if (str[0].toLowerCase().contains("east")) {          this.east=Double.parseDouble(str[dataCol]);        } else         if (str[0].toLowerCase().contains("cols")) {          this.numberColumns=Integer.parseInt(str[dataCol]);        } else         if (str[0].toLowerCase().contains("rows")) {          this.numberRows=Integer.parseInt(str[dataCol]);        } else         if (str[0].toLowerCase().contains("stacks")) {          this.numberStacks=Integer.parseInt(str[dataCol]);        } else         if (str[0].toLowerCase().contains("data type") || (str[0].toLowerCase().contains("data") && str[1].toLowerCase().contains("type") && str.length > 2)) {          if (str[dataCol].toLowerCase().contains("double")) {            this.setDataType(DataType.DOUBLE);          } else           if (str[dataCol].toLowerCase().contains("float")) {            this.setDataType(DataType.FLOAT);          } else           if (str[dataCol].toLowerCase().contains("integer")) {            this.setDataType(DataType.INTEGER);          } else           if (str[dataCol].toLowerCase().contains("byte")) {            this.setDataType(DataType.BYTE);          }        } else         if (str[0].toLowerCase().contains("data scale")) {          if (str[dataCol].toLowerCase().contains("continuous")) {            this.setDataScale(DataScale.CONTINUOUS);          } else           if (str[dataCol].toLowerCase().contains("categorical")) {            this.setDataScale(DataScale.CATEGORICAL);          } else           if (str[dataCol].toLowerCase().contains("bool")) {            this.setDataScale(DataScale.BOOLEAN);          } else           if (str[dataCol].toLowerCase().contains("rgb")) {            this.setDataScale(DataScale.RGB);          }        } else         if (str[0].toLowerCase().contains("z units")) {          this.setZUnits(str[dataCol]);        } else         if (str[0].toLowerCase().contains("xy units")) {          this.setXYUnits(str[dataCol]);        } else         if (str[0].toLowerCase().contains("projection")) {          this.projection=str[dataCol];        } else         if (str[0].toLowerCase().contains("display min")) {          this.displayMinimum=Float.parseFloat(str[dataCol]);        } else         if (str[0].toLowerCase().contains("display max")) {          this.displayMaximum=Float.parseFloat(str[dataCol]);        } else         if (str[0].toLowerCase().contains("preferred palette")) {          this.preferredPalette=str[dataCol].replace(".plt",".pal");        } else         if (str[0].toLowerCase().contains("byte order")) {          this.setByteOrder(str[dataCol]);          byteOrderRead=true;        } else         if (str[0].toLowerCase().contains("nodata")) {          this.noDataValue=Float.parseFloat(str[dataCol]);          if (Double.isNaN(this.noDataValue)) {            this.noDataValue=-32768.0;          }        } else         if (str[0].toLowerCase().contains("metadata entry")) {          if (str.length > 1) {            this.addMetadataEntry(str[dataCol]);          }        } else         if (str[0].toLowerCase().contains("palette nonlinearity")) {          this.nonlinearity=Double.parseDouble(str[dataCol]);        }      }      if (this.displayMinimum == Float.POSITIVE_INFINITY) {        this.displayMinimum=this.minimumValue;      }      if (this.displayMaximum == Float.NEGATIVE_INFINITY) {        this.displayMaximum=this.maximumValue;      }      in.close();      br.close();      if (!byteOrderRead) {        this.byteOrder=ByteOrder.LITTLE_ENDIAN;      }    }  } catch (  java.io.IOException e) {    System.err.println("Error: " + e.getMessage());  }catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }  }}  }
class C{  public MyPBKDF2SecretKey(String passPhrase,String algo,byte[] salt1,int iterationCount,int keySize) throws InvalidKeySpecException, NoSuchAlgorithmException {  algorithm=algo;  salt=salt1;  itereationCount=iterationCount;  pass=passPhrase;  PBEKeySpec spec=new PBEKeySpec(passPhrase.toCharArray(),salt,iterationCount,keySize);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algo);  SecretKey realKey=keyFactory.generateSecret(spec);  keyLength=realKey.getEncoded().length;  key=new byte[keyLength];  System.arraycopy(realKey.getEncoded(),0,key,0,keyLength);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.VARIABLE_REF;}  }
class C{  private static String toHttp2Path(URI uri){  final StringBuilder pathBuilder=new StringBuilder(length(uri.getRawPath()) + length(uri.getRawQuery()) + length(uri.getRawFragment())+ 2);  if (!isNullOrEmpty(uri.getRawPath())) {    pathBuilder.append(uri.getRawPath());  }  if (!isNullOrEmpty(uri.getRawQuery())) {    pathBuilder.append('?');    pathBuilder.append(uri.getRawQuery());  }  if (!isNullOrEmpty(uri.getRawFragment())) {    pathBuilder.append('#');    pathBuilder.append(uri.getRawFragment());  }  return pathBuilder.toString();}  }
class C{  public static S2Point trueCentroid(S2Point a,S2Point b,S2Point c){  double sina=S2Point.crossProd(b,c).norm();  double sinb=S2Point.crossProd(c,a).norm();  double sinc=S2Point.crossProd(a,b).norm();  double ra=(sina == 0) ? 1 : (Math.asin(sina) / sina);  double rb=(sinb == 0) ? 1 : (Math.asin(sinb) / sinb);  double rc=(sinc == 0) ? 1 : (Math.asin(sinc) / sinc);  S2Point x=new S2Point(a.x,b.x,c.x);  S2Point y=new S2Point(a.y,b.y,c.y);  S2Point z=new S2Point(a.z,b.z,c.z);  S2Point r=new S2Point(ra,rb,rc);  return new S2Point(0.5 * S2Point.crossProd(y,z).dotProd(r),0.5 * S2Point.crossProd(z,x).dotProd(r),0.5 * S2Point.crossProd(x,y).dotProd(r));}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  public RaftParameters withRpcFailureBackoff(int rpcFailureBackoff){  this.rpcFailureBackoff=rpcFailureBackoff;  return this;}  }
class C{  public static Module forObject(Object object){  if (object instanceof ProviderMethodsModule) {    return Modules.EMPTY_MODULE;  }  return new ProviderMethodsModule(object);}  }
class C{  @Override public void onRefreshFromStart(){  if (remote) {    loadFromRemote();  } else {    loadFromLocal(QueryDirectionEnum.QUERY_OLD);  }}  }
class C{  public Date parseMathLenient(Date now,String val,SolrQueryRequest req){  String math=null;  final DateMathParser p=new DateMathParser();  if (null != now)   p.setNow(now);  if (val.startsWith(NOW)) {    math=val.substring(NOW.length());  } else {    final int zz=val.indexOf(Z);    if (0 < zz) {      math=val.substring(zz + 1);      try {        p.setNow(parseDateLenient(val.substring(0,zz + 1),req));      } catch (      ParseException e) {        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date in Date Math String:'" + val + '\'',e);      }    } else {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date String:'" + val + '\'');    }  }  if (null == math || math.equals("")) {    return p.getNow();  }  try {    return p.parseMath(math);  } catch (  ParseException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date Math String:'" + val + '\'',e);  }}  }
class C{  public static boolean isValidDisplacement(IGame game,int entityId,Coords src,Coords dest){  final Entity entity=game.getEntity(entityId);  final IHex srcHex=game.getBoard().getHex(src);  final IHex destHex=game.getBoard().getHex(dest);  final ArrayList<Coords> intervening=Coords.intervening(src,dest);  final int direction=src.direction(dest);  if (entity == null) {    throw new IllegalArgumentException("Entity invalid.");  }  if (entity instanceof Dropship) {    return false;  }  if (!game.getBoard().contains(dest)) {    if (game.getOptions().booleanOption("push_off_board")) {      return true;    }    return false;  }  if (entity.isLocationProhibited(dest) && !((entity instanceof Tank) && destHex.containsTerrain(Terrains.WATER) && ((entity.movementMode == EntityMovementMode.TRACKED) || (entity.movementMode == EntityMovementMode.WHEELED)))) {    return false;  }  for (  Coords c : intervening) {    if (!game.getBoard().contains(c)) {      continue;    }    final IHex hex=game.getBoard().getHex(c);    int change=entity.elevationOccupied(hex) - entity.elevationOccupied(srcHex);    if (change > entity.getMaxElevationChange()) {      return false;    }  }  Entity inTheWay=Compute.stackingViolation(game,entityId,dest);  if (inTheWay != null) {    return Compute.isValidDisplacement(game,inTheWay.getId(),inTheWay.getPosition(),direction);  }  return true;}  }
class C{  public void primitivePaint(Graphics2D g2d){  if (shapePainter != null) {    shapePainter.paint(g2d);  }}  }
class C{  private void updateSelectedPerspective(final SpyPerspective selectedPerspective){switch (selectedPerspective) {case BASIC:    basicPerspective.setSelected(true);  break;case DETAILED:detailedPerspective.setSelected(true);break;case SPY:spyPerspective.setSelected(true);break;case SUPER_SPY:superSpyPerspective.setSelected(true);break;default :defaultPerspective.setSelected(true);break;}eventBus.publish(new NewPerspectiveSelectedEvent(selectedPerspective));}  }
class C{  public static final Intent newShareFileIntent(Context context,long trackId,String filePath,TrackFileFormat trackFileFormat){  Track track=MyTracksProviderUtils.Factory.get(context).getTrack(trackId);  String trackDescription=track == null ? "" : new DescriptionGeneratorImpl(context).generateTrackDescription(track,null,null,false);  return new Intent(Intent.ACTION_SEND).putExtra(Intent.EXTRA_STREAM,Uri.fromFile(new File(filePath))).putExtra(Intent.EXTRA_SUBJECT,context.getString(R.string.share_track_subject)).putExtra(Intent.EXTRA_TEXT,context.getString(R.string.share_track_share_file_body,trackDescription)).putExtra(context.getString(R.string.track_id_broadcast_extra),trackId).setType(trackFileFormat.getMimeType());}  }
class C{  @Override public DimensionColumnDataChunk readDimensionChunk(FileHolder fileReader,int blockIndex){  byte[] dataPage=null;  int[] invertedIndexes=null;  int[] invertedIndexesReverse=null;  int[] rlePage=null;  dataPage=COMPRESSOR.unCompress(fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getDataPageOffset(),dimensionColumnChunk.get(blockIndex).getDataPageLength()));  if (CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.INVERTED_INDEX)) {    invertedIndexes=CarbonUtil.getUnCompressColumnIndex(dimensionColumnChunk.get(blockIndex).getRowIdPageLength(),fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getRowIdPageOffset(),dimensionColumnChunk.get(blockIndex).getRowIdPageLength()),numberComressor);    invertedIndexesReverse=getInvertedReverseIndex(invertedIndexes);  }  if (CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.RLE)) {    rlePage=numberComressor.unCompress(fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getRlePageOffset(),dimensionColumnChunk.get(blockIndex).getRlePageLength()));    dataPage=UnBlockIndexer.uncompressData(dataPage,rlePage,eachColumnValueSize[blockIndex]);    rlePage=null;  }  DimensionChunkAttributes chunkAttributes=new DimensionChunkAttributes();  chunkAttributes.setEachRowSize(eachColumnValueSize[blockIndex]);  chunkAttributes.setInvertedIndexes(invertedIndexes);  chunkAttributes.setInvertedIndexesReverse(invertedIndexesReverse);  DimensionColumnDataChunk columnDataChunk=null;  if (dimensionColumnChunk.get(blockIndex).isRowMajor()) {    columnDataChunk=new ColumnGroupDimensionDataChunk(dataPage,chunkAttributes);  } else   if (!CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.DICTIONARY)) {    columnDataChunk=new VariableLengthDimensionDataChunk(getNoDictionaryDataChunk(dataPage),chunkAttributes);    chunkAttributes.setNoDictionary(true);  } else {    columnDataChunk=new FixedLengthDimensionDataChunk(dataPage,chunkAttributes);  }  return columnDataChunk;}  }
class C{  public int size(){  return size;}  }
class C{  @NotNull @Deprecated @ObjectiveCName("requestStartAnonymousAuthWithUserName:") public Command<AuthState> requestStartAnonymousAuth(String userName){  return modules.getAuthModule().requestStartAnonymousAuth(userName);}  }
class C{  private void addPathElementToListAsVirtualFile(String pathElement,ArrayList<VirtualFile> list,ConfigurationValue cv) throws ConfigurationException {  try {    VirtualFile vf=getVirtualFile(pathElement,cv);    list.add(vf);  } catch (  ConfigurationException e) {    if (cv == null) {      throw new ConfigurationException.CannotOpen(pathElement,null,null,-1);    } else {      throw new ConfigurationException.CannotOpen(pathElement,cv.getVar(),cv.getSource(),cv.getLine());    }  }}  }
class C{  public Iterable<T> findByIds(List<URI> ids,boolean activeOnly) throws DataAccessException {  return client.findByIds(clazz,ids,activeOnly);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  private static List<Byte> flatten(final ConditionNode root,final Map<ConditionNode,Integer> nodeIds){  final List<Byte> flattenedTree=new ArrayList<Byte>();  addAll(flattenedTree,getType(root));  final List<Byte> payload=getPayload(root);  addAll(flattenedTree,ByteHelpers.toBigEndianDword(payload.size()));  flattenedTree.addAll(payload);  addAll(flattenedTree,ByteHelpers.toBigEndianDword(root.getChildren().size()));  for (  final ConditionNode child : root.getChildren()) {    addAll(flattenedTree,ByteHelpers.toBigEndianDword(nodeIds.get(child)));  }  for (  final ConditionNode child : root.getChildren()) {    flattenedTree.addAll(flatten(child,nodeIds));  }  return flattenedTree;}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(URI.create(url).normalize());  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  protected boolean isDefaultRemoteAddress(){  return fieldDefaultRemoteAddress;}  }
class C{  Goal(String goal){  this.goal=goal;}  }
class C{  public boolean isCreateDurableQueue(){  return createDurableQueue;}  }
class C{  public void close() throws IOException {  clientSocket.close();  clientSocket=null;  clientInput=null;  clientOutput=null;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(footprint);  sb.append(" ");  sb.append(alg);  sb.append(" ");  sb.append(digestid);  if (digest != null) {    sb.append(" ");    sb.append(base16.toString(digest));  }  return sb.toString();}  }
class C{  public Boolean kickUser(String SID_Admin,Long room_id){  try {    Boolean salida=false;    salida=userManagement.kickUserByStreamId(SID_Admin,room_id);    if (salida == null)     salida=false;    return salida;  } catch (  Exception err) {    log.error("[kickUser]",err);  }  return null;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public void validate(ElemTemplateElement elem,StylesheetHandler handler) throws SAXException {  String msg="";  while (elem != null) {    if (elem instanceof ElemExsltFuncResult && elem.getNextSiblingElem() != null && !(elem.getNextSiblingElem() instanceof ElemFallback)) {      msg="func:result has an illegal following sibling (only xsl:fallback allowed)";      handler.error(msg,new SAXException(msg));    }    if ((elem instanceof ElemApplyImport || elem instanceof ElemApplyTemplates || elem instanceof ElemAttribute|| elem instanceof ElemCallTemplate|| elem instanceof ElemComment|| elem instanceof ElemCopy|| elem instanceof ElemCopyOf|| elem instanceof ElemElement|| elem instanceof ElemLiteralResult|| elem instanceof ElemNumber|| elem instanceof ElemPI|| elem instanceof ElemText|| elem instanceof ElemTextLiteral|| elem instanceof ElemValueOf) && !(ancestorIsOk(elem))) {      msg="misplaced literal result in a func:function container.";      handler.error(msg,new SAXException(msg));    }    ElemTemplateElement nextElem=elem.getFirstChildElem();    while (nextElem == null) {      nextElem=elem.getNextSiblingElem();      if (nextElem == null)       elem=elem.getParentElem();      if (elem == null || elem instanceof ElemExsltFunction)       return;    }    elem=nextElem;  }}  }
class C{  @SuppressWarnings("deprecation") public static void init(Context context){  if (context == null) {    mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();    mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();    Log.e("MPChartLib-Utils","Utils.init(...) PROVIDED CONTEXT OBJECT IS NULL");  } else {    ViewConfiguration viewConfiguration=ViewConfiguration.get(context);    mMinimumFlingVelocity=viewConfiguration.getScaledMinimumFlingVelocity();    mMaximumFlingVelocity=viewConfiguration.getScaledMaximumFlingVelocity();    Resources res=context.getResources();    mMetrics=res.getDisplayMetrics();  }}  }
class C{  private final void noise2(final double[] noise,double vec0,double vec1){  int b0, b1;  final int i, j;  final double rx0, rx1, ry0, ry1, sx, sy;  vec0+=PerlinN;  b0=((int)vec0) & BM;  i=latticeSelector[b0];  j=latticeSelector[b0 + 1];  rx0=vec0 - (int)vec0;  rx1=rx0 - 1.0;  sx=s_curve(rx0);  vec1+=PerlinN;  b0=(int)vec1;  b1=((j + b0) & BM) << 3;  b0=((i + b0) & BM) << 3;  ry0=vec1 - (int)vec1;  ry1=ry0 - 1.0;  sy=s_curve(ry0);switch (channels.length) {case 4:    noise[3]=lerp(sy,lerp(sx,rx0 * gradient[b0 + 6] + ry0 * gradient[b0 + 7],rx1 * gradient[b1 + 6] + ry0 * gradient[b1 + 7]),lerp(sx,rx0 * gradient[b0 + 8 + 6] + ry1 * gradient[b0 + 8 + 7],rx1 * gradient[b1 + 8 + 6] + ry1 * gradient[b1 + 8 + 7]));case 3:  noise[2]=lerp(sy,lerp(sx,rx0 * gradient[b0 + 4] + ry0 * gradient[b0 + 5],rx1 * gradient[b1 + 4] + ry0 * gradient[b1 + 5]),lerp(sx,rx0 * gradient[b0 + 8 + 4] + ry1 * gradient[b0 + 8 + 5],rx1 * gradient[b1 + 8 + 4] + ry1 * gradient[b1 + 8 + 5]));case 2:noise[1]=lerp(sy,lerp(sx,rx0 * gradient[b0 + 2] + ry0 * gradient[b0 + 3],rx1 * gradient[b1 + 2] + ry0 * gradient[b1 + 3]),lerp(sx,rx0 * gradient[b0 + 8 + 2] + ry1 * gradient[b0 + 8 + 3],rx1 * gradient[b1 + 8 + 2] + ry1 * gradient[b1 + 8 + 3]));case 1:noise[0]=lerp(sy,lerp(sx,rx0 * gradient[b0 + 0] + ry0 * gradient[b0 + 1],rx1 * gradient[b1 + 0] + ry0 * gradient[b1 + 1]),lerp(sx,rx0 * gradient[b0 + 8 + 0] + ry1 * gradient[b0 + 8 + 1],rx1 * gradient[b1 + 8 + 0] + ry1 * gradient[b1 + 8 + 1]));}}  }
class C{  public String toString(){  return "\nName: " + name + "\nAddress: "+ address+ "\nPhone number: "+ phone+ "\nEmail address: "+ email;}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,Store certificates,Store attrCerts,Store crls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certSet=null;  ASN1Set crlSet=null;  if (certificates != null || attrCerts != null) {    List certs=new ArrayList();    if (certificates != null) {      certs.addAll(CMSUtils.getCertificatesFromStore(certificates));    }    if (attrCerts != null) {      certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrCerts));    }    ASN1Set set=CMSUtils.createBerSetFromList(certs);    if (set.size() != 0) {      certSet=set;    }  }  if (crls != null) {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(crls));    if (set.size() != 0) {      crlSet=set;    }  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certSet,crlSet,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ReactiveElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__LOCAL_REACTIONS:      return SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS;default :    return -1;}}if (baseClass == ScopedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__SCOPES:  return SGraphPackage.SCOPED_ELEMENT__SCOPES;case SGraphPackage.STATECHART__NAMESPACE:return SGraphPackage.SCOPED_ELEMENT__NAMESPACE;default :return -1;}}if (baseClass == CompositeElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__REGIONS:return SGraphPackage.COMPOSITE_ELEMENT__REGIONS;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__NAME:return BasePackage.NAMED_ELEMENT__NAME;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__DOCUMENTATION:return BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION;default :return -1;}}if (baseClass == DomainElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATECHART__DOMAIN_ID:return BasePackage.DOMAIN_ELEMENT__DOMAIN_ID;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {  super.bcsPreDeserializationHook(ois);synchronized (services) {    serializable=ois.readInt();    for (int i=0; i < serializable; i++) {      Object serviceClass=ois.readObject();      Object bcssProvider=ois.readObject();      services.put((Class<?>)serviceClass,(BCSSServiceProvider)bcssProvider);    }  }}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public int compareTo(MySQLEventId eventId){  long indexDiff=this.fileIndex - eventId.getFileIndex();  if (indexDiff != 0)   return (indexDiff > 0) ? 1 : -1;  long offsetDiff=this.offset - eventId.getOffset();  if (offsetDiff < 0)   return -1; else   if (offsetDiff == 0)   return 0; else   return 1;}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public boolean isMultiParty(){  return mMultiParty;}  }
class C{  private void checkFailureRate(float currentFailureRate){  if (currentFailureRate >= failureRateThreshold) {    stateMachine.transitionToOpenState(CircuitBreaker.StateTransition.CLOSED_TO_OPEN,circuitBreakerMetrics);  }}  }
class C{  public MotionBlurOp(float distance,float angle,float rotation,float zoom){  this.distance=distance;  this.angle=angle;  this.rotation=rotation;  this.zoom=zoom;}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing line: from " + pointToString(x1,y1)+ " to "+ pointToString(x2,y2));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawLine(x1,y1,x2,y2);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawLine(x1,y1,x2,y2);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawLine(x1,y1,x2,y2);}  }
class C{  private void internalSend(String uuid,String message,RequestCallback callback) throws WebSocketException {  checkWebSocketConnectionState();  if (callback != null) {    requestCallbackMap.put(uuid,callback);  }  send(message);}  }
class C{  public void dispose(){  if (isDisposed()) {    return;  }  setDisposed(true);  if (!menu) {    super.dispose();  }}  }
class C{  @Override public boolean supportsNonNullableColumns(){  debugCodeCall("supportsNonNullableColumns");  return true;}  }
class C{  public MultiAdaptersCreator map(@NonNull Class objectClass,@NonNull Class<? extends BindableLayout> viewClass){  mapper.add(objectClass,viewClass);  return this;}  }
class C{  public WriteBuffer position(int newPosition){  buff.position(newPosition);  return this;}  }
class C{  public ServerHelloDone(){}  }
class C{  public void addExtension(final String description,final String extension){  exts.put(extension,description);}  }
class C{  public static @NonNull CubeAnimation create(@Direction int direction,boolean enter,long duration){switch (direction) {case UP:case DOWN:    return new VerticalCubeAnimation(direction,enter,duration);case LEFT:case RIGHT:default :  return new HorizontalCubeAnimation(direction,enter,duration);}}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  @SuppressWarnings("unchecked") public static <E>List<E> of(){  return (List<E>)ImmutableCollections.List0.EMPTY_LIST;}  }
class C{  public void load(Context context,int svgResource){  if (mSvg != null)   return;  try {    mSvg=SVG.getFromResource(context,svgResource);    mSvg.setDocumentPreserveAspectRatio(PreserveAspectRatio.UNSCALED);  } catch (  SVGParseException e) {    Log.e(LOG_TAG,"Could not load specified SVG resource",e);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.SERVICE_REF__NAME:    return getName();case EipPackage.SERVICE_REF__REFERENCE:  return getReference();case EipPackage.SERVICE_REF__OPERATIONS:return getOperations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void remove(int index){  Component comp=getComponent(index);  if (comp == leftComponent) {    leftComponent=null;  } else   if (comp == rightComponent) {    rightComponent=null;  }  super.remove(index);  revalidate();  repaint();}  }
class C{  public void initParam(ScannerParam param){  int targets=param.getTargetParamsInjectable();  this.getChkInjectableQueryString().setSelected((targets & ScannerParam.TARGET_QUERYSTRING) != 0);  this.getChkInjectableUrlPath().setSelected((targets & ScannerParam.TARGET_URLPATH) != 0);  this.getChkInjectablePostData().setSelected((targets & ScannerParam.TARGET_POSTDATA) != 0);  this.getChkInjectableHeaders().setSelected((targets & ScannerParam.TARGET_HTTPHEADERS) != 0);  this.getChkInjectableHeadersAllRequests().setSelected(param.isScanHeadersAllRequests());  this.getChkInjectableHeadersAllRequests().setEnabled(getChkInjectableHeaders().isSelected());  this.getChkInjectableCookie().setSelected((targets & ScannerParam.TARGET_COOKIE) != 0);  int rpcEnabled=param.getTargetParamsEnabledRPC();  this.getChkRPCMultipart().setSelected((rpcEnabled & ScannerParam.RPC_MULTIPART) != 0);  this.getChkRPCXML().setSelected((rpcEnabled & ScannerParam.RPC_XML) != 0);  this.getChkRPCJSON().setSelected((rpcEnabled & ScannerParam.RPC_JSON) != 0);  this.getChkRPCGWT().setSelected((rpcEnabled & ScannerParam.RPC_GWT) != 0);  this.getChkRPCoData().setSelected((rpcEnabled & ScannerParam.RPC_ODATA) != 0);  this.getChkRPCDWR().setSelected((rpcEnabled & ScannerParam.RPC_DWR) != 0);  this.getChkRPCCustom().setSelected((rpcEnabled & ScannerParam.RPC_CUSTOM) != 0);  ExtensionScript extension=(ExtensionScript)Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.NAME);  this.getChkRPCCustom().setEnabled((extension != null));  this.getExcludedParameterModel().setTokens(param.getExcludedParamList());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1__INDEX_1:    setIndex_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.153 -0500",hash_original_method="4111120C74906E4EF74CC0B96E5C85EA",hash_generated_method="5CE4857D25FF91B9771ACE3CA8E56D49") public boolean isObbMounted(String filename){  if (filename == null) {    throw new IllegalArgumentException("filename cannot be null");  }  try {    return mMountService.isObbMounted(filename);  } catch (  RemoteException e) {    Log.e(TAG,"Failed to check if OBB is mounted",e);  }  return false;}  }
class C{  public byte[] retrieve(String fileName) throws IOException {  ByteArrayOutputStream buff=new ByteArrayOutputStream();  retrieve(fileName,buff,0);  return buff.toByteArray();}  }
class C{  public HashMap<String,String> readFile(String fileName){  HashMap<String,String> storage=new HashMap<String,String>();  try {    InputStream is=new FileInputStream(fileName);    int c=is.read();    StringBuffer str=new StringBuffer();    int i=0;    while (c != -1) {      if ((char)c == SEPARATOR_DATA) {        if (i < KEYS.length) {          storage.put(KEYS[i],str.toString());          str.setLength(0);          i++;        }      } else {        str.append((char)c);      }      try {        c=is.read();      } catch (      Exception e) {        c=-1;      }    }    try {      is.close();    } catch (    IOException e) {    }  } catch (  IOException ioe) {    System.out.println("IOException during processing the file: " + fileName);  }  return storage;}  }
class C{  public boolean isGNULongNameEntry(){  return linkFlag == LF_GNUTYPE_LONGNAME && name.toString().equals(GNU_LONGLINK);}  }
class C{  public GrammarException(String message){  super(message);}  }
class C{  public TermVectorsRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public boolean isClosed(StateAccessor<?> state){  return readFinishedBits(state.access(FINISHED_BITS_TAG)).isFinished(rootTrigger);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private boolean isMinimized(){  return (getExtendedState() & ICONIFIED) == ICONIFIED;}  }
class C{  private void save(Tuple tuple){  byte[] rowKey=mapper.rowKey(tuple);  ColumnList cols=mapper.columns(tuple);  Durability durability=writeToWAL ? Durability.SYNC_WAL : Durability.SKIP_WAL;  Optional<Long> ttl=mapper.getTTL(tuple);  if (ttl.isPresent()) {    hbaseClient.addMutation(rowKey,cols,durability,ttl.get());  } else {    hbaseClient.addMutation(rowKey,cols,durability);  }  batchHelper.addBatch(tuple);}  }
class C{  public void putAll(K key,Collection<V> values){  if (values.isEmpty()) {    return;  }  key=sanitizeKey(key);  List<V> list=map.get(key);  if (list == null) {    list=new ArrayList<V>();    map.put(key,list);  }  list.addAll(values);}  }
class C{  public static double[] times(double[]... v){  double[] array=fill(v[0].length,1.0);  for (int j=0; j < v.length; j++)   for (int i=0; i < v[j].length; i++)   array[i]*=v[j][i];  return array;}  }
class C{  @Override public void load(InputStream inStream){  throw new UnsupportedOperationException("ProtectedProperties cannot be modified!");}  }
class C{  public boolean nullable(){  return _nullable;}  }
class C{  void updateMask(){  if (getFormat() != null) {    Document doc=getFormattedTextField().getDocument();    validMask=false;    if (doc != null) {      try {        string=doc.getText(0,doc.getLength());      } catch (      BadLocationException ble) {        string=null;      }      if (string != null) {        try {          Object value=stringToValue(string);          AttributedCharacterIterator iterator=getFormat().formatToCharacterIterator(value);          updateMask(iterator);        } catch (        ParseException pe) {        }catch (        IllegalArgumentException iae) {        }catch (        NullPointerException npe) {        }      }    }  }}  }
class C{  public boolean isInfo(){  return fSeverity == IStatus.INFO;}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,Coords src){  final Entity ae=game.getEntity(attackerId);  if (ae == null) {    throw new IllegalArgumentException("Attacker is null");  }  if (target == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is null");  }  int targetId=Entity.NONE;  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;    targetId=target.getTargetId();  } else {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid Target");  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if ((target.getTargetType() == Targetable.TYPE_ENTITY) && ((((Entity)target).getOwnerId() == ae.getOwnerId()) || ((((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct attack.");    }  }  final boolean targetInBuilding=Compute.isInBuilding(game,te);  ToHitData toHit=null;  final int attackerElevation=ae.getElevation() + game.getBoard().getHex(ae.getPosition()).getLevel();  final int targetElevation=target.getElevation() + game.getBoard().getHex(target.getPosition()).getLevel();  final int attackerHeight=attackerElevation + ae.getHeight();  if (target.isAirborneVTOLorWIGE()) {    if ((targetElevation - attackerHeight) > ae.getJumpMP()) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Elevation difference to high");    }  }  if (ae.equals(te)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't target yourself");  }  if (ae instanceof Infantry) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Infantry can't dfa");  }  if ((Entity.NONE != te.getTransportId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is a passenger.");  }  if ((Entity.NONE != te.getSwarmTargetId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is swarming a Mek.");  }  if (src.distance(target.getPosition()) > 1) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if (te.hasDisplacementAttack()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is already making a charge/DFA attack");  }  if (te.isTargetOfDisplacementAttack() && (te.findTargetedDisplacement().getEntityId() != ae.getId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is the target of another charge/DFA");  }  if (targetInBuilding) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is inside building");  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK) || (target instanceof GunEmplacement)) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  if ((target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) || (target.getTargetType() == Targetable.TYPE_HEX_IGNITE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid attack");  }  int base=ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  if (te instanceof Infantry) {    toHit.addModifier(3,"Infantry target");  }  if (te instanceof BattleArmor) {    toHit.addModifier(1,"battle armor target");  }  if ((ae instanceof Mech) && ((Mech)ae).isSuperHeavy()) {    toHit.addModifier(1,"attacker is superheavy mech");  }  toHit.append(Compute.getAttackerMovementModifier(game,attackerId,EntityMovementType.MOVE_JUMP));  toHit.append(Compute.getTargetMovementModifier(game,targetId));  if ((ae.getCrew().getPiloting() != te.getCrew().getPiloting())) {    toHit.addModifier(ae.getCrew().getPiloting() - te.getCrew().getPiloting(),"piloting skill differential");  }  if (ae.isSpotting()) {    toHit.addModifier(+1,"attacker is spotting");  }  if (te.isProne()) {    toHit.addModifier(-2,"target prone and adjacent");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_TORSO_MOUNTED)) {    int sensorHits=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_HEAD);    int sensorHits2=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_CT);    if ((sensorHits + sensorHits2) == 3) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Sensors Completely Destroyed for Torso-Mounted Cockpit");    } else     if (sensorHits == 2) {      toHit.addModifier(4,"Head Sensors Destroyed for Torso-Mounted Cockpit");    }  }  toHit.append(Compute.getImmobileMod(te));  toHit.append(AbstractAttackAction.nightModifiers(game,target,null,ae,false));  Compute.modifyPhysicalBTHForAdvantages(ae,te,toHit,game);  if (te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  if (te instanceof Tank) {    toHit.setSideTable(ToHitData.SIDE_FRONT);    toHit.setHitTable(ToHitData.HIT_NORMAL);  } else   if (te.isProne()) {    toHit.setSideTable(ToHitData.SIDE_REAR);    toHit.setHitTable(ToHitData.HIT_NORMAL);  } else {    toHit.setSideTable(te.sideTable(src));    toHit.setHitTable(ToHitData.HIT_PUNCH);  }  if (game.getOptions().booleanOption(OptionsConstants.AGM_TAC_OPS_PHYSICAL_ATTACK_PSR)) {    if (ae.getWeightClass() == EntityWeightClass.WEIGHT_LIGHT) {      toHit.addModifier(-2,"Weight Class Attack Modifier");    } else     if (ae.getWeightClass() == EntityWeightClass.WEIGHT_MEDIUM) {      toHit.addModifier(-1,"Weight Class Attack Modifier");    }  }  if ((ae instanceof Mech) && ((Mech)ae).hasIndustrialTSM()) {    toHit.addModifier(2,"industrial TSM");  }  return toHit;}  }
class C{  private static boolean rangeIsValid(BasicBlock start,BasicBlock end,BlockAddresses addresses){  if (start == null) {    throw new NullPointerException("start == null");  }  if (end == null) {    throw new NullPointerException("end == null");  }  int startAddress=addresses.getLast(start).getAddress();  int endAddress=addresses.getEnd(end).getAddress();  return (endAddress - startAddress) <= MAX_CATCH_RANGE;}  }
class C{  public QuestStartedCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  public TsFciOrient(SepsetProducer sepsets,IndependenceTest independenceTest){  this.sepsets=sepsets;  this.independenceTest=independenceTest;}  }
class C{  public DataStoreTextClusteringModelsImpl(){}  }
class C{  @Override public void onPause(){  super.onPause();  getActivity().unregisterReceiver(advertisingFailureReceiver);}  }
class C{  public UserSearchManager(Connection con){  this.con=con;  userSearch=new UserSearch();}  }
class C{  public int crc16(Byte[] bytes){  int crc=0xFFFF;  int polynomial=0x1021;  for (  byte b : bytes) {    for (int i=0; i < 8; i++) {      boolean bit=((b >> (7 - i) & 1) == 1);      boolean c15=((crc >> 15 & 1) == 1);      crc<<=1;      if (c15 ^ bit)       crc^=polynomial;    }  }  crc&=0xffff;  return crc;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  Document ownerDocument;  String qualifiedName="test:root";  String publicId;  String systemId;  java.util.List publicIds=new java.util.ArrayList();  publicIds.add("1234");  publicIds.add("test");  java.util.List systemIds=new java.util.ArrayList();  systemIds.add("");  systemIds.add("test");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN1005D=0; indexN1005D < publicIds.size(); indexN1005D++) {    publicId=(String)publicIds.get(indexN1005D);    for (int indexN10061=0; indexN10061 < systemIds.size(); indexN10061++) {      systemId=(String)systemIds.get(indexN10061);      newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      assertNotNull("domimplementationcreatedocumenttype01_newDocType",newDocType);      ownerDocument=newDocType.getOwnerDocument();      assertNull("domimplementationcreatedocumenttype01_ownerDocument",ownerDocument);    }  }}  }
class C{  public void reconfigureRepositoryClients(){  for (  TaskRepository repository : myRepositories) {    if (repository instanceof BaseRepositoryImpl) {      ((BaseRepositoryImpl)repository).reconfigureClient();    }  }}  }
class C{  void notifyArriving(Integer id){  firePropertyChange("Arriving",null,id);}  }
class C{  public Builder historyBufferSize(int historyBufferSize){  this.historyBufferSize=historyBufferSize;  return this;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RowHandleMap(final int keylength,final ByteOrder objectOrder,final int idxbytes,final int expectedspace,final String name){  this.rowdef=new Row(new Column[]{new Column("key",Column.celltype_binary,Column.encoder_bytes,keylength,"key"),new Column("long c-" + idxbytes + " {b256}")},objectOrder);  this.index=new RAMIndexCluster(name,this.rowdef,spread(expectedspace));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.PRESENCE__MANDATORY:    setMandatory((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void init(){  eatTheRest=false;  tokens.clear();}  }
class C{  public void update(String input){  try {    digestInstance.update(input.getBytes("ISO-8859-1"));  } catch (  UnsupportedEncodingException e) {    throw new TorException(e);  }}  }
class C{  public CoapResponse post(String payload,int format,int accept){  return synchronous(accept(format(newPost().setURI(uri).setPayload(payload),format),accept));}  }
class C{  public AuthenticationException(){  super();}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void addEpisode(TvShowEpisode episode){  int oldValue=episodes.size();  episodes.add(episode);  episode.addPropertyChangeListener(propertyChangeListener);  addToSeason(episode);  Utils.sortList(episodes);  firePropertyChange(ADDED_EPISODE,null,episode);  firePropertyChange(EPISODE_COUNT,oldValue,episodes.size());}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - C_Project_ID=" + m_C_Project_ID + " - C_ProjectLine_ID="+ m_C_ProjectLine_ID+ " - Consolidate="+ m_ConsolidateDocument);  if (m_C_ProjectLine_ID != 0) {    MProjectLine projectLine=new MProjectLine(getCtx(),m_C_ProjectLine_ID,get_TrxName());    MProject project=new MProject(getCtx(),projectLine.getC_Project_ID(),get_TrxName());    createPO(project,projectLine);  } else {    MProject project=new MProject(getCtx(),m_C_Project_ID,get_TrxName());    MProjectLine[] lines=project.getLines();    for (int i=0; i < lines.length; i++)     createPO(project,lines[i]);  }  return "";}  }
class C{  protected TokenFilterFactory tokenFilterFactory(String name,Version matchVersion,ResourceLoader loader,String... keysAndValues) throws Exception {  return (TokenFilterFactory)analysisFactory(TokenFilterFactory.lookupClass(name),matchVersion,loader,keysAndValues);}  }
class C{  public static Geometry bufferOp(Geometry g,double distance,int quadrantSegments,int endCapStyle){  BufferOp bufOp=new BufferOp(g);  bufOp.setQuadrantSegments(quadrantSegments);  bufOp.setEndCapStyle(endCapStyle);  Geometry geomBuf=bufOp.getResultGeometry(distance);  return geomBuf;}  }
class C{  public static String now(){  return fromCalendar(GregorianCalendar.getInstance());}  }
class C{  public Point2D other(){  return best2;}  }
class C{  public AboutBox createAboutBox(Frame owner){  ClassLoader simpleClassLoader=makeInitialClassloader();  String about="";  try {    URL url=simpleClassLoader.getResource("META-INF/ABOUT.NFO");    if (url != null) {      about=Tools.readTextFile(new InputStreamReader(url.openStream()));    }  } catch (  Exception e) {    I18N.getMessage(ResourceBundle.getBundle("com.rapidminer.resources.i18n.LogMessages"),"com.rapidminer.tools.I18N.plugin_warning1",Level.WARNING,getName(),e);  }  Image productLogo=null;  try (InputStream imageIn=simpleClassLoader.getResourceAsStream("META-INF/icon.png")){    productLogo=ImageIO.read(imageIn);  } catch (  Exception e) {    I18N.getMessage(ResourceBundle.getBundle("com.rapidminer.resources.i18n.LogMessages"),"com.rapidminer.tools.I18N.plugin_warning2",Level.WARNING,getName(),e);  }  return new AboutBox(owner,name,version,"Vendor: " + (vendor != null ? vendor : "unknown"),url,about,true,productLogo);}  }
class C{  public static boolean hasTokenFile(File tokenFile,String content) throws IOException {  return hasToken(tokenFile.getParentFile(),tokenFile.getName(),content);}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++)   P[i]=P[i] ^ streamtoword(key,koffp);  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public String sqlADAction_deleteUnusedElementTranslations(String vendorName,String catalogName,String schemaName){  String subQuery2a=sql_select(vendorName,catalogName,schemaName,"AD_Column","c",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(e.ColumnName) = UPPER(c.ColumnName)")),null,false);  String subQuery2b=sql_select(vendorName,catalogName,schemaName,"AD_Process_Para","p",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(e.ColumnName) = UPPER(p.ColumnName)")),null,false);  String subQuery1=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("AD_Element_ID")),null,new ArrayList<String>(Arrays.asList(new StringBuffer("NOT EXISTS (").append(subQuery2a).append(")").toString(),new StringBuffer("NOT EXISTS (").append(subQuery2b).append(")").toString())),null,false);  String condition=new StringBuffer("AD_Element_ID IN (").append(subQuery1).append(")").toString();  return sql_delete(vendorName,catalogName,schemaName,"AD_Element_Trl",null,new ArrayList<String>(Arrays.asList(condition)),null);}  }
class C{  private static Set<CallSite> findObviouslyLockedCallSites(ClassContext classContext,SelfCalls selfCalls) throws CFGBuilderException, DataflowAnalysisException {  ConstantPoolGen cpg=classContext.getConstantPoolGen();  Set<CallSite> obviouslyLockedSites=new HashSet<CallSite>();  for (Iterator<CallSite> i=selfCalls.callSiteIterator(); i.hasNext(); ) {    CallSite callSite=i.next();    Method method=callSite.getMethod();    Location location=callSite.getLocation();    InstructionHandle handle=location.getHandle();    Instruction ins=handle.getInstruction();    if (ins.getOpcode() == Constants.INVOKESTATIC) {      continue;    }    LockChecker lockChecker=classContext.getLockChecker(method);    LockSet lockSet=lockChecker.getFactAtLocation(location);    ValueNumberDataflow vnaDataflow=classContext.getValueNumberDataflow(method);    ValueNumberFrame frame=vnaDataflow.getFactAtLocation(location);    if (!frame.isValid()) {      continue;    }    int numConsumed=ins.consumeStack(cpg);    MethodGen methodGen=classContext.getMethodGen(method);    assert methodGen != null;    if (numConsumed == Constants.UNPREDICTABLE) {      throw new DataflowAnalysisException("Unpredictable stack consumption",methodGen,handle);    }    ValueNumber instance=frame.getStackValue(numConsumed - 1);    int lockCount=lockSet.getLockCount(instance.getNumber());    if (lockCount > 0) {      obviouslyLockedSites.add(callSite);    }  }  return obviouslyLockedSites;}  }
class C{  ITypeBinding resolveWellKnownType(String name){  return null;}  }
class C{  public BitFlip(double probability){  super();  this.probability=probability;}  }
class C{  public FailureResponse sendAndWaitFailure(Operation op){  FailureResponse response=new FailureResponse();  String msg=String.format("Expected operation failure but was successful. uri=%s ",op.getUri());  Exception callerStack=new RuntimeException(msg);  TestContext waitContext=new TestContext(1,this.timeout);  op.appendCompletion(null);  sendRequest(op);  waitContext.await();  return response;}  }
class C{  @Override protected EClass eStaticClass(){  return ModelPackage.Literals.MODEL_REFERENCE;}  }
class C{  protected void error(Token tok,String msg) throws LexerException {  error(tok.getLine(),tok.getColumn(),msg);}  }
class C{  public void registerProvider(Class<?> dtoInterface,DtoProvider<?> provider){  dtoInterface2Providers.put(dtoInterface,provider);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PAREN_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public String checkDependencies(URI uri,Class<? extends DataObject> type,boolean onlyActive,List<Class<? extends DataObject>> excludeTypes){  String depMsg=localDependencyChecker.checkDependencies(uri,type,true,excludeTypes);  if (depMsg != null || KeyspaceUtil.isLocal(type)) {    return depMsg;  }  if (hasDisconnectedVdc()) {    return "";  }  List<URI> vDCIds=dbClient.queryByType(VirtualDataCenter.class,true);  VirtualDataCenter vDC=null;  for (  URI vDCId : vDCIds) {    if (vDCId.equals(VdcUtil.getLocalVdc().getId())) {      continue;    }    vDC=dbClient.queryObject(VirtualDataCenter.class,vDCId);    GeoServiceClient client=geoClientManager.getGeoClient(vDC.getShortId());    log.debug("Query Geo server={}",client.getServiceURI());    try {      String dependency=client.checkDependencies(type,uri,true);      if (!dependency.isEmpty()) {        log.info("Can't GC {} because depends on {} on {}",new Object[]{uri,dependency,vDCId});        return dependency;      }    } catch (    Exception e) {      log.error("Failed to query depenedency for {} on {} e=",new Object[]{uri,vDC.getShortId(),e});      log.error("so assume it has dependency");      return "";    }  }  log.debug("Geo object {} can be GC",uri);  return null;}  }
class C{  public void writeFile() throws IOException {  int maxLength=0;  if (octaveFilename == null) {    throw new IOException("No filename has been set");  }  String originalLSValue=null;  if (writeLFOnly) {    originalLSValue=System.getProperty(LINE_SEPARATOR_PROPERTY);    System.setProperty(LINE_SEPARATOR_PROPERTY,LINE_SEPARATOR);  }  createDirectories(octaveFilename);  PrintWriter pw=new PrintWriter(new BufferedWriter(new FileWriter(octaveFilename)));  String hostname="null";  try {    InetAddress localMachine=InetAddress.getLocalHost();    hostname=localMachine.getHostName();  } catch (  Exception e) {  }  pw.println("# Created on " + hostname + " by infodynamics.utils.OctaveFileWriter, "+ (new Date()));  DecimalFormat decFormat=new DecimalFormat();  int rounding=-1;  Set keySet=this.keySet();  Iterator iterator=keySet.iterator();  for (; iterator.hasNext(); ) {    String key=(String)iterator.next();    Object value=this.get(key);    try {      Integer roundObject=roundingHT.get(key);      if (roundObject != null) {        rounding=roundObject.intValue();        decFormat.setMaximumFractionDigits(rounding);      } else {        rounding=-1;      }      pw.println("# name: " + key);      if (value.getClass().isArray()) {        if (Array.getLength(value) > 0) {          Object item1=Array.get(value,0);          boolean isStrings=String.class.isInstance(item1);          if (isStrings) {            pw.println("# type: string");            maxLength=0;            for (int i=0; i < Array.getLength(value); i++) {              if (((String)Array.get(value,i)).length() > maxLength) {                maxLength=((String)Array.get(value,i)).length();              }            }            pw.println("# elements: " + Array.getLength(value));          } else {            pw.println("# type: matrix");          }          if (item1.getClass().isArray()) {            pw.println("# rows: " + Array.getLength(value));            pw.println("# columns: " + Array.getLength(item1));            for (int i=0; i < Array.getLength(value); i++) {              Object row=Array.get(value,i);              for (int j=0; j < Array.getLength(row); j++) {                Object thisValue=Array.get(row,j);                if (Boolean.class.isInstance(thisValue)) {                  pw.print(" " + (((Boolean)thisValue) ? "1" : "0"));                } else {                  if (rounding >= 0) {                    pw.print(" " + decFormat.format(thisValue));                  } else {                    pw.print(" " + thisValue);                  }                }              }              pw.println();            }          } else {            if (isStrings) {              for (int i=0; i < Array.getLength(value); i++) {                pw.println("# length: " + maxLength);                String thisString=(String)Array.get(value,i);                pw.print(thisString);                for (int l=thisString.length(); l < maxLength; l++) {                  pw.print(' ');                }                pw.println();              }            } else {              pw.println("# rows: " + Array.getLength(value));              pw.println("# columns: 1");              for (int i=0; i < Array.getLength(value); i++) {                Object thisValue=Array.get(value,i);                if (Boolean.class.isInstance(thisValue)) {                  pw.print(" " + (((Boolean)thisValue) ? "1" : "0"));                } else {                  if (rounding >= 0) {                    pw.print(" " + decFormat.format(thisValue));                  } else {                    pw.println(" " + thisValue);                  }                }              }            }          }        } else {          pw.println("# type: matrix");          pw.println("# rows: 0");          pw.println("# columns: 0");        }      } else {        if (String.class.isInstance(value)) {          pw.println("# type: string");          pw.println("# elements: 1");          pw.println("# length: " + ((String)value).length());          pw.println(value);        } else         if (Boolean.class.isInstance(value)) {          pw.println("# type: bool");          pw.println(((Boolean)value) ? "1" : "0");        } else {          pw.println("# type: scalar");          if (rounding >= 0) {            pw.println(decFormat.format(value));          } else {            pw.println(value);          }        }      }    } catch (    Exception e) {      System.out.println("Problem writing variable " + key + " to the output file (value = "+ value+ "):");      e.printStackTrace();      System.out.println("Continuing with file.");    }  }  pw.println();  pw.close();  if (writeLFOnly) {    System.setProperty(LINE_SEPARATOR_PROPERTY,originalLSValue);  }}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",blockIncrement=" + blockIncrement+ ",orientation="+ orientationString+ ",unitIncrement="+ unitIncrement;}  }
class C{  public FrameworkException(Throwable cause){  super(cause);}  }
class C{  public boolean hasMinorCode(){  return fieldSetFlags()[1];}  }
class C{  public static String infoKey(){  String s="";  if (systemOS == System.Unknown)   s+="o"; else   if (systemOS == System.MacOSC)   s+="c"; else   if (systemOS == System.MacOSX)   s+="x"; else   if (systemOS == System.Unix)   s+="u"; else   if (systemOS == System.Windows)   s+="w"; else   s+="o";  if (isMacArchitecture)   s+="m";  if (isUnixFS)   s+="f";  if (canExecUnix)   s+="e";  return s;}  }
class C{  public static <T>T string2Obj(String str,Class<T> clazz){  if (str == null || clazz == null) {    return null;  }  try {    return clazz.equals(String.class) ? (T)str : objectMapper.readValue(str,clazz);  } catch (  Exception e) {    log.info("parse String to Object error, String:{}, Class<T>:{}, error:{}",str,clazz.getName(),e);    return null;  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void addAll(Collection<? extends E> c){  for (  E element : c)   add(element);}  }
class C{  static URI withoutFragment(final String fullUri){  int hashmarkIdx=fullUri.indexOf('#');  String rval;  if (hashmarkIdx == -1) {    rval=fullUri;  } else {    rval=fullUri.substring(0,hashmarkIdx);  }  try {    return new URI(rval);  } catch (  URISyntaxException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Occurred compare(VectorClock v1,VectorClock v2){  if (v1 == null || v2 == null)   throw new IllegalArgumentException("Can't compare null vector clocks!");  boolean v1Bigger=false;  boolean v2Bigger=false;  int p1=0;  int p2=0;  while (p1 < v1.versions.size() && p2 < v2.versions.size()) {    ClockEntry ver1=v1.versions.get(p1);    ClockEntry ver2=v2.versions.get(p2);    if (ver1.getNodeId() == ver2.getNodeId()) {      if (ver1.getVersion() > ver2.getVersion())       v1Bigger=true; else       if (ver2.getVersion() > ver1.getVersion())       v2Bigger=true;      p1++;      p2++;    } else     if (ver1.getNodeId() > ver2.getNodeId()) {      v2Bigger=true;      p2++;    } else {      v1Bigger=true;      p1++;    }  }  if (p1 < v1.versions.size())   v1Bigger=true; else   if (p2 < v2.versions.size())   v2Bigger=true;  if (!v1Bigger && !v2Bigger)   return Occurred.BEFORE; else   if (v1Bigger && !v2Bigger)   return Occurred.AFTER; else   if (!v1Bigger && v2Bigger)   return Occurred.BEFORE; else   return Occurred.CONCURRENTLY;}  }
class C{  public String chompBalanced(char open,char close){  int start=-1;  int end=-1;  int depth=0;  char last=0;  do {    if (isEmpty())     break;    Character c=consume();    if (last == 0 || last != ESC) {      if (c.equals(open)) {        depth++;        if (start == -1)         start=pos;      } else       if (c.equals(close))       depth--;    }    if (depth > 0 && last != 0)     end=pos;    last=c;  } while (depth > 0);  return (end >= 0) ? queue.substring(start,end) : "";}  }
class C{  public static CrontabRangeExpression crontabScheduleRange(int lowerBounds,int upperBounds){  return new CrontabRangeExpression(constant(lowerBounds),constant(upperBounds));}  }
class C{  public static double regularizedGammaP(double a,double x,double epsilon,int maxIterations){  double ret;  if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0)|| (x < 0.0)) {    ret=Double.NaN;  } else   if (x == 0.0) {    ret=0.0;  } else   if (x >= a + 1) {    ret=1.0 - regularizedGammaQ(a,x,epsilon,maxIterations);  } else {    double n=0.0;    double an=1.0 / a;    double sum=an;    while (FastMath.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {      n+=1.0;      an*=x / (a + n);      sum+=an;    }    if (n >= maxIterations) {      throw new MaxCountExceededException(maxIterations);    } else     if (Double.isInfinite(sum)) {      ret=1.0;    } else {      ret=FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;    }  }  return ret;}  }
class C{  public void removeNode(TreeNode node){  if (children != null)   children.remove(node);}  }
class C{  void parseGlyph(Range r,Path gp,FlPoint pt){  pos=r.getStart();  int i;  float x1, y1, x2, y2, x3, y3, ybase;  int hold;  int stemhints=0;  while (pos < r.getEnd()) {    int cmd=readCommand(true);    hold=0;switch (cmd) {case 1:case 3:      stackptr=0;    break;case 4:  if (stackptr > 1) {    stack[0]=stack[1];  }pt.y+=stack[0];if (pt.open) {gp.close();}pt.open=false;gp.moveTo(pt.x,pt.y);stackptr=0;break;case 5:for (i=0; i < stackptr; ) {pt.x+=stack[i++];pt.y+=stack[i++];gp.lineTo(pt.x,pt.y);}pt.open=true;stackptr=0;break;case 6:for (i=0; i < stackptr; ) {if ((i & 1) == 0) {pt.x+=stack[i++];} else {pt.y+=stack[i++];}gp.lineTo(pt.x,pt.y);}pt.open=true;stackptr=0;break;case 7:for (i=0; i < stackptr; ) {if ((i & 1) == 0) {pt.y+=stack[i++];} else {pt.x+=stack[i++];}gp.lineTo(pt.x,pt.y);}pt.open=true;stackptr=0;break;case 8:for (i=0; i < stackptr; ) {x1=pt.x + stack[i++];y1=pt.y + stack[i++];x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2 + stack[i++];pt.y=y2 + stack[i++];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);}pt.open=true;stackptr=0;break;case 10:hold=pos;i=(int)stack[--stackptr] + lsubrsoffset;Range lsubr=getIndexEntry(lsubrbase,i);parseGlyph(lsubr,gp,pt);pos=hold;break;case 11:return;case 14:if (stackptr == 5) {buildAccentChar(stack[1],stack[2],(char)stack[3],(char)stack[4],gp);}if (pt.open) {gp.close();}pt.open=false;stackptr=0;break;case 18:stemhints+=stackptr / 2;stackptr=0;break;case 19:case 20:stemhints+=stackptr / 2;pos+=(stemhints - 1) / 8 + 1;stackptr=0;break;case 21:if (stackptr > 2) {stack[0]=stack[1];stack[1]=stack[2];}pt.x+=stack[0];pt.y+=stack[1];if (pt.open) {gp.close();}gp.moveTo(pt.x,pt.y);pt.open=false;stackptr=0;break;case 22:if (stackptr > 1) {stack[0]=stack[1];}pt.x+=stack[0];if (pt.open) {gp.close();}gp.moveTo(pt.x,pt.y);pt.open=false;stackptr=0;break;case 23:stemhints+=stackptr / 2;stackptr=0;break;case 24:for (i=0; i < stackptr - 2; ) {x1=pt.x + stack[i++];y1=pt.y + stack[i++];x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2 + stack[i++];pt.y=y2 + stack[i++];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);}pt.x+=stack[i++];pt.y+=stack[i++];gp.lineTo(pt.x,pt.y);pt.open=true;stackptr=0;break;case 25:for (i=0; i < stackptr - 6; ) {pt.x+=stack[i++];pt.y+=stack[i++];gp.lineTo(pt.x,pt.y);}x1=pt.x + stack[i++];y1=pt.y + stack[i++];x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2 + stack[i++];pt.y=y2 + stack[i++];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);pt.open=true;stackptr=0;break;case 26:i=0;if ((stackptr & 1) == 1) {pt.x+=stack[i++];}while (i < stackptr) {x1=pt.x;y1=pt.y + stack[i++];x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2;pt.y=y2 + stack[i++];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);}pt.open=true;stackptr=0;break;case 27:i=0;if ((stackptr & 1) == 1) {pt.y+=stack[i++];}while (i < stackptr) {x1=pt.x + stack[i++];y1=pt.y;x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2 + stack[i++];pt.y=y2;gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);}pt.open=true;stackptr=0;break;case 29:hold=pos;i=(int)stack[--stackptr] + gsubrsoffset;Range gsubr=getIndexEntry(gsubrbase,i);parseGlyph(gsubr,gp,pt);pos=hold;break;case 30:hold=4;case 31:for (i=0; i < stackptr; ) {boolean hv=(((i + hold) & 4) == 0);x1=pt.x + (hv ? stack[i++] : 0);y1=pt.y + (hv ? 0 : stack[i++]);x2=x1 + stack[i++];y2=y1 + stack[i++];pt.x=x2 + (hv ? 0 : stack[i++]);pt.y=y2 + (hv ? stack[i++] : 0);if (i == stackptr - 1) {if (hv) {pt.x+=stack[i++];} else {pt.y+=stack[i++];}}gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);}pt.open=true;stackptr=0;break;case 1000:stackptr=0;break;case 1003:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=((x1 != 0) && (y1 != 0)) ? 1 : 0;break;case 1004:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=((x1 != 0) || (y1 != 0)) ? 1 : 0;break;case 1005:x1=stack[--stackptr];stack[stackptr++]=(x1 == 0) ? 1 : 0;break;case 1009:stack[stackptr - 1]=Math.abs(stack[stackptr - 1]);break;case 1010:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=x1 + y1;break;case 1011:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=y1 - x1;break;case 1012:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=y1 / x1;break;case 1014:stack[stackptr - 1]=-stack[stackptr - 1];break;case 1015:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=(x1 == y1) ? 1 : 0;break;case 1018:stackptr--;break;case 1020:i=(int)stack[--stackptr];x1=stack[--stackptr];temps[i]=x1;break;case 1021:i=(int)stack[--stackptr];stack[stackptr++]=temps[i];break;case 1022:if (stack[stackptr - 2] > stack[stackptr - 1]) {stack[stackptr - 4]=stack[stackptr - 3];}stackptr-=3;break;case 1023:stack[stackptr++]=(float)Math.random();break;case 1024:x1=stack[--stackptr];y1=stack[--stackptr];stack[stackptr++]=y1 * x1;break;case 1026:stack[stackptr - 1]=(float)Math.sqrt(stack[stackptr - 1]);break;case 1027:x1=stack[stackptr - 1];stack[stackptr++]=x1;break;case 1028:x1=stack[stackptr - 1];stack[stackptr - 1]=stack[stackptr - 2];stack[stackptr - 2]=x1;break;case 1029:i=(int)stack[stackptr - 1];if (i < 0) {i=0;}stack[stackptr - 1]=stack[stackptr - 2 - i];break;case 1030:i=(int)stack[--stackptr];int n=(int)stack[--stackptr];if (i > 0) {i=i % n;} else {i=n - (-i % n);}if (i > 0) {float roll[]=new float[n];System.arraycopy(stack,stackptr - 1 - i,roll,0,i);System.arraycopy(stack,stackptr - 1 - n,roll,i,n - i);System.arraycopy(roll,0,stack,stackptr - 1 - n,n);}break;case 1034:x1=pt.x + stack[0];y1=ybase=pt.y;x2=x1 + stack[1];y2=y1 + stack[2];pt.x=x2 + stack[3];pt.y=y2;gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);x1=pt.x + stack[4];y1=pt.y;x2=x1 + stack[5];y2=ybase;pt.x=x2 + stack[6];pt.y=y2;gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);pt.open=true;stackptr=0;break;case 1035:x1=pt.x + stack[0];y1=pt.y + stack[1];x2=x1 + stack[2];y2=y1 + stack[3];pt.x=x2 + stack[4];pt.y=y2 + stack[5];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);x1=pt.x + stack[6];y1=pt.y + stack[7];x2=x1 + stack[8];y2=y1 + stack[9];pt.x=x2 + stack[10];pt.y=y2 + stack[11];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);pt.open=true;stackptr=0;break;case 1036:ybase=pt.y;x1=pt.x + stack[0];y1=pt.y + stack[1];x2=x1 + stack[2];y2=y1 + stack[3];pt.x=x2 + stack[4];pt.y=y2;gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);x1=pt.x + stack[5];y1=pt.y;x2=x1 + stack[6];y2=y1 + stack[7];pt.x=x2 + stack[8];pt.y=ybase;gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);pt.open=true;stackptr=0;break;case 1037:ybase=pt.y;float xbase=pt.x;x1=pt.x + stack[0];y1=pt.y + stack[1];x2=x1 + stack[2];y2=y1 + stack[3];pt.x=x2 + stack[4];pt.y=y2 + stack[5];gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);x1=pt.x + stack[6];y1=pt.y + stack[7];x2=x1 + stack[8];y2=y1 + stack[9];if (Math.abs(x2 - xbase) > Math.abs(y2 - ybase)) {pt.x=x2 + stack[10];pt.y=ybase;} else {pt.x=xbase;pt.y=y2 + stack[10];}gp.cubicTo(x1,y1,x2,y2,pt.x,pt.y);pt.open=true;stackptr=0;break;default :System.out.println("ERROR! TYPE1C CHARSTRING CMD IS " + cmd);break;}}}  }
class C{  public static long length2(int x1,int y1,int x2,int y2){  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);}  }
class C{  private boolean conditionCH0(String value,int index){  if (index != 0) {    return false;  } else   if (!contains(value,index + 1,5,"HARAC","HARIS") && !contains(value,index + 1,3,"HOR","HYM","HIA","HEM")) {    return false;  } else   if (contains(value,0,5,"CHORE")) {    return false;  } else {    return true;  }}  }
class C{  public static boolean isSelfCall(JCTree tree){  return calledMethodNameisSelfOrSuper(tree,true,true);}  }
class C{  public Object remove(int index){  Entry e=entry(index);  remove(e);  return e.element;}  }
class C{  public static MBeanServer createMBeanServer(){  return createMBeanServer(null);}  }
class C{  public void start(){}  }
class C{  protected ICommitRecord loadCommitRecord(IRawStore store,long addr){  return CommitRecordSerializer.INSTANCE.deserialize(store.read(addr));}  }
class C{  public void sortKeysReverse(){  sortImpl(true,true);}  }
class C{  public TimestampToken generateTimestampToken(final TimestampType timestampType,final XAdESSignatureParameters signatureParameters,final byte[] references){  if (timestampType == null) {    throw new NullPointerException();  }  if (signatureParameters == null) {    throw new NullPointerException();  }  final TimestampParameters contentTimestampParameters=signatureParameters.getContentTimestampParameters();  if (contentTimestampParameters == null) {    throw new NullPointerException();  }  final DigestAlgorithm digestAlgorithm=contentTimestampParameters.getDigestAlgorithm();  if (digestAlgorithm == null) {    throw new NullPointerException();  }  byte[] digest=DSSUtils.digest(digestAlgorithm,references);  if (LOG.isTraceEnabled()) {    LOG.trace("Bytes to digest : [" + new String(references) + "]");    LOG.trace("Digest to timestamp: " + Base64.encodeBase64String(digest));  }  final TimeStampToken timeStampResponse=tspSource.getTimeStampResponse(digestAlgorithm,digest);  final TimestampToken token=new TimestampToken(timeStampResponse,timestampType,certificatePool);  token.setCanonicalizationMethod(contentTimestampParameters.getCanonicalizationMethod());  if (TimestampType.INDIVIDUAL_DATA_OBJECTS_TIMESTAMP.equals(timestampType)) {    addTimestampTokenIncludes(signatureParameters.getReferences(),token);  }  return token;}  }
class C{  public void remove(SyncOperation operation){  SyncOperation operationToRemove=mOperationsMap.remove(operation.key);  if (operationToRemove == null) {    return;  }  if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)) {    final String errorMessage="unable to find pending row for " + operationToRemove;    Log.e(TAG,errorMessage,new IllegalStateException(errorMessage));  }}  }
class C{  public Hash(final byte[] data){  this.data=data;}  }
class C{  @DSModeled(DSC.SAFE) public void drawOval(RectF oval,Paint paint){  addTaint(oval.getTaint());  addTaint(paint.getTaint());}  }
class C{  public static boolean isABurst(String toTest){  return toTest.length() == 114 && toTest.matches("[01]*");}  }
class C{  @Override public String buildTextFromElement(Element element){  StringBuilder strb=new StringBuilder();  if (StringUtils.isNotBlank(element.ownText())) {    strb.append(SPACER);    strb.append(element.ownText().trim());  }  strb.append(getTextualContentOfAttribute(element,AttributeStore.ALT_ATTR));  strb.append(getTextualContentOfAttribute(element,AttributeStore.TITLE_ATTR));  strb.append(getTextualContentOfAttribute(element,AttributeStore.SUMMARY_ATTR));  strb.append(getTextualContentOfAttribute(element,AttributeStore.VALUE_ATTR));  if (element.hasAttr(AttributeStore.CONTENT_ATTR) && element.hasAttr(AttributeStore.NAME_ATTR) && StringUtils.equalsIgnoreCase(element.attr(AttributeStore.NAME_ATTR),"description")&& StringUtils.isNotBlank(element.attr(AttributeStore.CONTENT_ATTR))) {    strb.append(SPACER);    strb.append(getTextualContentOfAttribute(element,AttributeStore.CONTENT_ATTR));  }  return StringUtils.trim(strb.toString());}  }
class C{  public HeidelpayResponse(String response) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {  Document responseDoc=XMLConverter.convertToDocument(response,true);  this.processingResult=XMLConverter.getNodeTextContentByXPath(responseDoc,"/Response/Transaction/Processing/Result");  this.processingReturnCode=XMLConverter.getNodeTextContentByXPath(responseDoc,"/Response/Transaction/Processing/Return");}  }
class C{  public void postDeSerialize(){  territoryListeners=new ListenerList<>();  dataChangeListeners=new ListenerList<>();  gameMapListeners=new ListenerList<>();}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY_NOT_NULL\"";  db.execSQL(sql);}  }
class C{  public boolean hasRemoved(){  return hasExtension(Removed.class);}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.659 -0500",hash_original_method="84C5DF0BB814E2B994CF01B1B056D342",hash_generated_method="376E7DFE8900D748A8960D497FE30420") private static String processPlusCodeWithinNanp(String networkDialStr){  String retStr=networkDialStr;  if (DBG)   log("processPlusCodeWithinNanp,networkDialStr=" + networkDialStr);  if (networkDialStr != null && networkDialStr.charAt(0) == PLUS_SIGN_CHAR && networkDialStr.length() > 1) {    String newStr=networkDialStr.substring(1);    if (isOneNanp(newStr)) {      retStr=newStr;    } else {      String idpStr=getDefaultIdp();      retStr=networkDialStr.replaceFirst("[+]",idpStr);    }  }  if (DBG)   log("processPlusCodeWithinNanp,retStr=" + retStr);  return retStr;}  }
class C{  public NewTarget createNewTarget(){  NewTargetImpl newTarget=new NewTargetImpl();  return newTarget;}  }
class C{  public BaleenConsoleLoggerBuilder(String name,String pattern,List<Filter<ILoggingEvent>> filters){  super(name,pattern,filters);}  }
class C{  private void fireRemoved(final RPObject object,final String slotName,final RPObject sobject){  listener.onSlotRemoved(object,slotName,sobject);  userListener.onSlotRemoved(object,slotName,sobject);  fireRemoved(sobject);}  }
class C{  public static boolean matchCurrentHadoopVersion(int majorVersion){  return majorVersion == 2 && isHadoop2Env();}  }
class C{  @Override public boolean supportsIntegrityEnhancementFacility(){  debugCodeCall("supportsIntegrityEnhancementFacility");  return true;}  }
class C{  public Vector3f sub(float x,float y,float z){  this.x-=x;  this.y-=y;  this.z-=z;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.249 -0500",hash_original_method="5451D461541A6217AC0EFFC2EF4C9329",hash_generated_method="4017904D62B0FEC0C72BF95924032E36") public static String toString(long n){  String str=new String();  str.addTaint((int)n);  return str;}  }
class C{  @Override public void processEvent(SystemEvent event) throws AbortProcessingException {  final UIViewRoot source=(UIViewRoot)event.getSource();  final FacesContext context=FacesContext.getCurrentInstance();  final WebXmlParameters webXmlParameters=new WebXmlParameters(context.getExternalContext());  final boolean provideJQuery=webXmlParameters.isProvideJQuery();  final boolean provideBootstrap=webXmlParameters.isProvideBoostrap();  final boolean useCompressedResources=webXmlParameters.isUseCompressedResources();  final boolean disablePrimeFacesJQuery=webXmlParameters.isIntegrationPrimeFacesDisableJQuery();  final List<UIComponent> resources=new ArrayList<>(source.getComponentResources(context,HEAD));  if (useCompressedResources && context.getApplication().getProjectStage() == ProjectStage.Production) {    handleCompressedResources(context,provideJQuery,provideBootstrap,resources,source);  } else {    handleConfigurableResources(context,provideJQuery,provideBootstrap,resources,source);  }  if (disablePrimeFacesJQuery) {    for (    UIComponent resource : resources) {      final String resourceLibrary=(String)resource.getAttributes().get("library");      final String resourceName=(String)resource.getAttributes().get("name");      if ("primefaces".equals(resourceLibrary) && "jquery/jquery.js".equals(resourceName)) {        source.removeComponentResource(context,resource);      }    }  }}  }
class C{  public boolean isLocalThumbnailPreviewsEnabled(){  return mLocalThumbnailPreviewsEnabled;}  }
class C{  public boolean isPowerOfFour(int num){  return num > 0 && (num & (num - 1)) == 0 && (num & 0x55555555) != 0;}  }
class C{  private void cmd_import(){  JFileChooser jc=new JFileChooser();  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Import"));  jc.setDialogType(JFileChooser.OPEN_DIALOG);  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;  StringBuffer sb=new StringBuffer();  try {    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));    char[] cbuf=new char[1024];    int count;    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);    in.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"HTMLEditor.import" + e.getMessage());    return;  }  setHtmlText(sb.toString());}  }
class C{  public void add(final long addr){  addrs.add(addr);}  }
class C{  public TopHitsBuilder addHighlightedField(HighlightBuilder.Field field){  highlightBuilder().field(field);  return this;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static ASN1Primitive convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public static double[][] randn(int rows,int cols,Random r){  double X[][]=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      X[i][j]=r.nextGaussian();    }  }  return X;}  }
class C{  private void loadMenuSettings(){  for (  String setting : menuBooleanSettings) {    loadMenuSetting(setting);  }}  }
class C{  public void testLongMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new LongPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LONG_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static boolean isIndependentPooledMudholkerGeorge(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double c=Math.sqrt(3 * (5 * independenceTests.size() + 4) / (double)(independenceTests.size() * Math.pow(Math.PI,2) * (5 * independenceTests.size() + 2)));  double tm=0.0;  for (  IndependenceTest independenceTest : independenceTests) {    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    double pk=independenceTest.getPValue();    if (pk != 0 && pk != 1) {      tm+=-c * Math.log(pk / (1 - pk));    }  }  double p=2.0 * (1.0 - ProbUtils.tCdf(Math.abs(tm),5 * independenceTests.size() + 4));  return (p > alpha);}  }
class C{  public static void falseValue(final boolean value,final String name){  if (value) {    final String message=String.format("%s must be false",name);    throw new IllegalArgumentException(message);  }}  }
class C{  protected int rearrangePoints(int[] indices,final int startidx,final int endidx,final int splitDim,final double splitVal){  int tmp, left=startidx - 1;  for (int i=startidx; i <= endidx; i++) {    if (m_EuclideanDistance.valueIsSmallerEqual(m_Instances.instance(indices[i]),splitDim,splitVal)) {      left++;      tmp=indices[left];      indices[left]=indices[i];      indices[i]=tmp;    }  }  return left + 1;}  }
class C{  private synchronized void removeLock(FileLock lock){  locks.remove(lock);}  }
class C{  public static void main(String[] args){  TabbedPaneDemo demo=new TabbedPaneDemo(null);  demo.mainImpl();}  }
class C{  private SourceContext generateRichText(TextNode textNode){  SourceContext srcContext=new SourceContext(1024,0);  StringBuilder buf=srcContext.functionBuffer;  Variables varContext=new Variables();  varContext.setVar(richTextType,NodeType.RICHTEXT);  String elementVar=varContext.elementVar;  generateTextVariable(textNode,srcContext,varContext);  buf.append("        _richTextComponent = ").append(elementVar).append(";\r\n");  buf.append("        addChild(").append(elementVar).append(");\r\n");  buf.append("        var addHandler:Function = function(event:Event):void\r\n");  buf.append("        {\r\n");  buf.append("            removeEventListener(Event.ADDED_TO_STAGE, addHandler);\r\n\r\n");  buf.append("            // If we don't have a module factory by now then use the root\r\n");  buf.append("            if (moduleFactory == null && root is IFlexModuleFactory)\r\n");  buf.append("                moduleFactory = IFlexModuleFactory(root);\r\n");  buf.append("        };\r\n");  buf.append("        addEventListener(Event.ADDED_TO_STAGE, addHandler);\r\n");  return srcContext;}  }
class C{  public C upperEndpoint(){  return upperBound.endpoint();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public String toString(){  return "org.jpedal.fonts.tt.hinting.TTGraphicsState[" + "zp0=" + (zp0 == TTVM.GLYPH_ZONE ? "GLYPH" : "TWILIGHT") + ",zp1="+ (zp1 == TTVM.GLYPH_ZONE ? "GLYPH" : "TWILIGHT")+ ",zp2="+ (zp2 == TTVM.GLYPH_ZONE ? "GLYPH" : "TWILIGHT")+ ",rp0="+ rp0+ ",rp1="+ rp1+ ",rp2="+ rp2+ ",freedomVector=("+ getVectorAsString(freedomVector)+ ')'+ ",projectionVector=("+ getVectorAsString(projectionVector)+ ')'+ ",dualProjectionVector=("+ getVectorAsString(dualProjectionVector)+ ')'+ ",instructControl="+ instructControl+ ",autoFlip="+ autoFlip+ ",deltaBase="+ deltaBase+ ",deltaShift="+ deltaShift+ ",loop="+ loop+ ",roundState="+ getRoundStateAsString()+ ",minimumDistance="+ minimumDistance+ ",controlValueTableCutIn="+ controlValueTableCutIn+ ",singleWidthCutIn="+ singleWidthCutIn+ ",singleWidthValue="+ singleWidthValue+ ']';}  }
class C{  public static TestSSLContext create(TestKeyStore client,TestKeyStore server){  String provider=StandardNames.JSSE_PROVIDER_NAME;  return create(client,server,provider,provider);}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcZ="+ srcZ+ f+ "srcLOD="+ srcLOD+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost="+ srcHost+ f+ "srcDevice="+ srcDevice+ f+ "srcArray="+ srcArray+ f+ "srcContext="+ srcContext+ f+ "srcPitch="+ srcPitch+ f+ "srcHeight="+ srcHeight+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstZ="+ dstZ+ f+ "dstLOD="+ dstLOD+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost="+ dstHost+ f+ "dstDevice="+ dstDevice+ f+ "dstArray="+ dstArray+ f+ "dstContext="+ dstContext+ f+ "dstPitch="+ dstPitch+ f+ "dstHeight="+ dstHeight+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height+ f+ "Depth="+ Depth;}  }
class C{  protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }}  }
class C{  @SuppressWarnings("SimplifiableIfStatement") boolean inject(Object target,Class<? extends Annotation> annCls,GridResourceInjector injector,@Nullable GridDeployment dep,@Nullable Class<?> depCls) throws IgniteCheckedException {  return injectInternal(target,annCls,injector,dep,depCls,null);}  }
class C{  @Transactional public void removeRoleFromUsers(String roleName,Set<String> userIds,String operatorUserId){  Role role=findRoleByRoleName(roleName);  Preconditions.checkState(role != null,"Role %s doesn't exist!",roleName);  List<UserRole> existedUserRoles=userRoleRepository.findByUserIdInAndRoleId(userIds,role.getId());  for (  UserRole userRole : existedUserRoles) {    userRole.setDeleted(true);    userRole.setDataChangeLastModifiedTime(new Date());    userRole.setDataChangeLastModifiedBy(operatorUserId);  }  userRoleRepository.save(existedUserRoles);}  }
class C{  public boolean isDefSiteStructuralTyping(){  ParameterizedTypeRef _actualThisTypeRef=this.getActualThisTypeRef();  if ((_actualThisTypeRef instanceof TN4Classifier)) {    ParameterizedTypeRef _actualThisTypeRef_1=this.getActualThisTypeRef();    TypingStrategy _typingStrategy=((TN4Classifier)_actualThisTypeRef_1).getTypingStrategy();    return (_typingStrategy == TypingStrategy.STRUCTURAL);  }  ParameterizedTypeRef _actualThisTypeRef_2=this.getActualThisTypeRef();  if ((_actualThisTypeRef_2 instanceof TStructuralType)) {    return true;  }  return false;}  }
class C{  @NoInline @NoOptCompile public static Object invokeWithDotDotVarArg(Object obj,int methodID,TypeReference expectReturnType,boolean skip4Args) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  Address varargAddress=getVarArgAddress(skip4Args);  Object[] argObjectArray=packageParameterFromVarArg(mr,varargAddress);  return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);}  }
class C{  public ActionList(){  super(0);}  }
class C{  public FormatException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void handlePopupEvent(final Event event){switch (event.type) {case SWT.Close:    event.doit=false;  changeVisibilityOfPopupWindow(false);break;case SWT.Deactivate:changeVisibilityOfPopupWindow(false);break;case SWT.Dispose:if (this.checkboxes != null) {this.checkboxes.clear();}this.checkboxes=null;break;}}  }
class C{  public void test_HASSTMT_includeInferred() throws Exception {  doInsertbyURL("POST",packagePath + "test_estcard.ttl");  assertFalse(m_repo.hasStatement(OWL.EQUIVALENTCLASS,RDFS.SUBPROPERTYOF,RDFS.SUBCLASSOF,false));  assertTrue(m_repo.hasStatement(OWL.EQUIVALENTCLASS,RDFS.SUBPROPERTYOF,RDFS.SUBCLASSOF,true));  long mutationCount=0;  mutationCount+=m_repo.remove(new RemoveOp(null,RDF.TYPE,null));  mutationCount+=m_repo.remove(new RemoveOp(null,RDFS.LABEL,null));  mutationCount+=m_repo.remove(new RemoveOp(null,FOAF.KNOWS,null));  assertTrue(mutationCount > 7);  assertFalse(m_repo.hasStatement(OWL.EQUIVALENTCLASS,RDFS.SUBPROPERTYOF,RDFS.SUBCLASSOF,false));  assertTrue(m_repo.hasStatement(OWL.EQUIVALENTCLASS,RDFS.SUBPROPERTYOF,RDFS.SUBCLASSOF,true));}  }
class C{  public boolean hasAccessExt(){  return hasExtension(GphotoAccess.class);}  }
class C{  public TextAppearanceSpan(Context context,int appearance){  this(context,appearance,-1);}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  BranchLabel falseLabel;  if (this.constant != Constant.NotAConstant) {    return;  }  Constant cst=this.condition.optimizedBooleanConstant();  boolean needTruePart=!(cst != Constant.NotAConstant && cst.booleanValue() == false);  boolean needFalsePart=!(cst != Constant.NotAConstant && cst.booleanValue() == true);  falseLabel=new BranchLabel();  falseLabel.tagBits|=BranchLabel.USED;  this.condition.generateOptimizedBoolean(currentScope,null,falseLabel,cst == Constant.NotAConstant);  if (needTruePart) {    this.valueIfTrue.generateCode(currentScope,valueRequired);  }  if (needFalsePart) {    this.valueIfFalse.generateCode(currentScope,valueRequired);  }}  }
class C{  public Vector2f mul(float scalar){  this.x*=scalar;  this.y*=scalar;  return this;}  }
class C{  protected boolean backupAttributeValueIsNull(WriteObjectQuery query){  if (query.getSession().isUnitOfWork()) {    Object backupAttributeValue=getAttributeValueFromObject(query.getBackupClone());    if (backupAttributeValue == null) {      return true;    }  }  return false;}  }
class C{  static Set<File> retainAncestors(File... roots){  if (roots == null) {    return new HashSet<File>();  }  for (int i=0; i < roots.length; i++) {    for (int j=i + 1; j < roots.length && roots[i] != null; j++) {      if (roots[j] != null) {        if (FileUtils.isAncestor(roots[i],roots[j])) {          roots[j]=null;        } else         if (FileUtils.isAncestor(roots[j],roots[i])) {          roots[i]=null;        }      }    }  }  Set<File> retained=new HashSet<File>(roots.length);  for (  File file : roots) {    if (file != null) {      retained.add(file);    }  }  return retained;}  }
class C{  private void preInsert(RdKNNEntry q,RdKNNEntry nodeEntry,KNNHeap knns_q){  double knnDist_q=knns_q.getKNNDistance();  RdKNNNode node=getNode(nodeEntry);  double knnDist_node=0.;  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNLeafEntry p=(RdKNNLeafEntry)node.getEntry(i);      double dist_pq=distanceQuery.distance(p.getDBID(),((LeafEntry)q).getDBID());      if (dist_pq <= knnDist_q) {        knns_q.insert(dist_pq,p.getDBID());        if (knns_q.size() >= settings.k_max) {          knnDist_q=knns_q.getKNNDistance();          q.setKnnDistance(knnDist_q);        }      }      if (dist_pq <= p.getKnnDistance()) {        O obj=relation.get(p.getDBID());        KNNList knns_without_q=knnQuery.getKNNForObject(obj,settings.k_max);        if (knns_without_q.size() + 1 < settings.k_max) {          p.setKnnDistance(Double.NaN);        } else {          double knnDist_p=Math.min(knns_without_q.get(knns_without_q.size() - 1).doubleValue(),dist_pq);          p.setKnnDistance(knnDist_p);        }      }      knnDist_node=Math.max(knnDist_node,p.getKnnDistance());    }  } else {    O obj=relation.get(((LeafEntry)q).getDBID());    List<DoubleObjPair<RdKNNEntry>> entries=getSortedEntries(node,obj,settings.distanceFunction);    for (    DoubleObjPair<RdKNNEntry> distEntry : entries) {      RdKNNEntry entry=distEntry.second;      double entry_knnDist=entry.getKnnDistance();      if (distEntry.first < entry_knnDist || distEntry.first < knnDist_q) {        preInsert(q,entry,knns_q);        knnDist_q=knns_q.getKNNDistance();      }      knnDist_node=Math.max(knnDist_node,entry.getKnnDistance());    }  }  nodeEntry.setKnnDistance(knnDist_node);}  }
class C{  protected static boolean tienePermisosAdministracion(ISicresGenPerms genPerms){  return (genPerms.isCanModifyAdminUnits() || genPerms.isCanModifyIssueTypes() || genPerms.isCanModifyReports()|| genPerms.isCanModifyTransportTypes()|| genPerms.isCanModifyUsers());}  }
class C{  synchronized void unlock(){  if (isLockedExclusive) {    isLockedExclusive=false;  } else {    sharedLockCount=Math.max(0,sharedLockCount - 1);  }}  }
class C{  public void run(){  runWorker(this);}  }
class C{  private boolean evalTextOp(String fvalue,final Operator operator,String value){  if (value == null)   return false;  value=value.toLowerCase();  if (operator != Operator.MATCHES)   fvalue=fvalue.toLowerCase();switch (operator) {case CONTAINS:    return value.contains(fvalue);case ENDS_WITH:  return value.endsWith(fvalue);case EQUAL:return value.equals(fvalue);case GREATER_THAN:return value.compareTo(fvalue) > 0;case GREATER_THAN_OR_EQUAL:return value.compareTo(fvalue) >= 0;case LESS_THAN:return value.compareTo(fvalue) < 0;case LESS_THAN_OR_EQUAL:return value.compareTo(fvalue) <= 0;case MATCHES:{Pattern pattern=regexpPatternMap.get(fvalue);if (pattern == null && !regexpPatternMap.containsKey(fvalue)) {try {pattern=Pattern.compile(fvalue);} catch (final PatternSyntaxException pse) {pse.printStackTrace();}regexpPatternMap.put(fvalue,pattern);}return pattern != null && pattern.matcher(value).matches();}case NOT_CONTAINS:return !value.contains(fvalue);case NOT_ENDS_WITH:return !value.endsWith(fvalue);case NOT_EQUAL:return !value.equals(fvalue);case NOT_STARTS_WITH:return !value.startsWith(fvalue);case STARTS_WITH:return value.startsWith(fvalue);default :throw new RuntimeException("Unhandled operator: " + operator);}}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaComputeModeDefault:    return "cudaComputeModeDefault";case cudaComputeModeExclusive:  return "cudaComputeModeExclusive";case cudaComputeModeProhibited:return "cudaComputeModeProhibited";case cudaComputeModeExclusiveProcess:return "cudaComputeModeExclusiveProcess";}return "INVALID cudaComputeMode: " + n;}  }
class C{  public boolean isTopic(){  return isTopic;}  }
class C{  public CommentedLineReader(Reader in){  super(in);}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  private static Pair<Map<String,String>,ZyGraphViewSettings> loadNonNativeSettings(final INaviView view){  try {    return CViewSettingsGenerator.createSettings(view);  } catch (  final CouldntLoadDataException exception) {    final ConfigManager configFile=ConfigManager.instance();    final ZyGraphViewSettings graphSettings=view.getGraphType() == GraphType.CALLGRAPH ? configFile.getDefaultCallGraphSettings() : configFile.getDefaultFlowGraphSettings();    return new Pair<Map<String,String>,ZyGraphViewSettings>(new HashMap<String,String>(),graphSettings);  }}  }
class C{  public boolean isChunkLoaded(int x,int z){  Key key=new Key(x,z);  return chunks.containsKey(key) && chunks.get(key).isLoaded();}  }
class C{  public TStream<byte[]> receiveBytes(){  return receiveBinary(null);}  }
class C{  public Matrix3 invert(){  throw new UnsupportedOperationException("Matrix3.invert is not implemented");}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public void testStoppedConsumerHoldsMessagesTillStarted() throws JMSException {  Session startedSession=startedConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);  Session stoppedSession=stoppedConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);  Topic topic=startedSession.createTopic("test");  MessageConsumer startedConsumer=startedSession.createConsumer(topic);  MessageConsumer stoppedConsumer=stoppedSession.createConsumer(topic);  MessageProducer producer=startedSession.createProducer(topic);  TextMessage message=startedSession.createTextMessage("Hello");  producer.send(message);  Message m=startedConsumer.receive(1000);  assertNotNull(m);  m=stoppedConsumer.receive(1000);  assertNull(m);  stoppedConnection.start();  m=stoppedConsumer.receive(5000);  assertNotNull(m);  startedSession.close();  stoppedSession.close();}  }
class C{  public final void pushCurrentExpressionNode(int n){  m_currentExpressionNodes.push(n);}  }
class C{  @ModelAttribute public void onStart(){}  }
class C{  private static void delete(File f){  if (f.isDirectory()) {    for (    File c : f.listFiles()) {      delete(c);    }  }  if (!f.delete()) {    PrintStream err=System.err;    err.println("Failed to delete file: " + f);  }}  }
class C{  protected static void checkFileContent(IgfsImpl igfs,IgfsPath file,@Nullable byte[]... chunks) throws IOException, IgniteCheckedException {  if (chunks != null && chunks.length > 0) {    IgfsInputStream is=null;    try {      is=igfs.open(file);      int chunkIdx=0;      int pos=0;      for (      byte[] chunk : chunks) {        byte[] buf=new byte[chunk.length];        is.readFully(pos,buf);        assert Arrays.equals(chunk,buf) : "Bad chunk [igfs=" + igfs.name() + ", chunkIdx="+ chunkIdx+ ", expected="+ Arrays.toString(chunk)+ ", actual="+ Arrays.toString(buf)+ ']';        chunkIdx++;        pos+=chunk.length;      }      is.close();    }  finally {      U.closeQuiet(is);    }  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  static public final float max(float[] list){  if (list.length == 0) {    throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);  }  float max=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] > max)     max=list[i];  }  return max;}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public HashMetaDataPair(final Hash hash,final HashMetaData metaData){  this.hash=hash;  this.metaData=metaData;}  }
class C{  private AccountVO createUserDataLdapLoginMode(String account,String password) throws Exception {  if (account.length() > 24) {    throw new Exception("Create user data fail! account ID length more then 24.");  }  if (password.length() > 35) {    throw new Exception("Create user data fail! password length more then 35.");  }  ShiroLoginSupport loginSupport=new ShiroLoginSupport();  logger.info("create user data, login by LDAP mode, account: " + account);  Map<String,Object> paramMap=new HashMap<String,Object>();  paramMap.put("account",account);  paramMap.put("transPassword",loginSupport.getAccountService().tranPassword(password));  ScriptExpressionUtils.execute(ScriptTypeCode.IS_GROOVY,getCreateUserDataLdapModeScript(),null,paramMap);  return loginSupport.queryUser(account);}  }
class C{  static void test1(ExecutorService pool,SocketChannel source,SocketChannel sink,int size) throws Exception {  System.out.println("write(ByteBuffer), size=" + size);  ByteBuffer buf=ByteBuffer.allocate(size);  rand.nextBytes(buf.array());  Future<Long> result=pool.submit(new Reader(sink,size));  int n=source.write(buf);  if (n != size)   throw new RuntimeException("Short write detected");  buf.rewind();  long expected=computeChecksum(buf);  long actual=result.get();  if (actual != expected)   throw new RuntimeException("Checksum did not match");}  }
class C{  public Iterator keys(){  return this.map.keySet().iterator();}  }
class C{  public File showSaveDialog(final File file){  if (useNativeFileChooser) {    return showSaveDialogNative(file);  } else {    return showSaveDialogSwing(file);  }}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String BaseURI,StorageResolver storage) throws KeyResolverException {  try {    Element[] els=XMLUtils.selectDsNodes(element.getFirstChild(),Constants._TAG_X509CERTIFICATE);    if ((els == null) || (els.length == 0)) {      Element el=XMLUtils.selectDsNode(element.getFirstChild(),Constants._TAG_X509DATA,0);      if (el != null) {        return engineLookupResolveX509Certificate(el,BaseURI,storage);      }      return null;    }    for (int i=0; i < els.length; i++) {      XMLX509Certificate xmlCert=new XMLX509Certificate(els[i],BaseURI);      X509Certificate cert=xmlCert.getX509Certificate();      if (cert != null) {        return cert;      }    }    return null;  } catch (  XMLSecurityException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"XMLSecurityException",ex);    }    throw new KeyResolverException("generic.EmptyMessage",ex);  }}  }
class C{  public TypesItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  private int decodeDynamicRange(DynamicRangeControl cheDrc){  int n=1;  int drcNumBands=1;  if (br.readBool()) {    cheDrc.pceInstanceTag=br.read(4);    br.skip(4);    n++;  }  if (br.readBool()) {    n+=decodeDrcChannelExclusions(cheDrc);  }  if (br.readBool()) {    cheDrc.bandIncr=br.read(4);    cheDrc.interpolationScheme=br.read(4);    n++;    drcNumBands+=cheDrc.bandIncr;    for (int i=0; i < drcNumBands; i++) {      cheDrc.bandTop[i]=br.read(8);      n++;    }  }  if (br.readBool()) {    cheDrc.progRefLevel=br.read(7);    br.skip(1);    n++;  }  for (int i=0; i < drcNumBands; i++) {    cheDrc.dynRngSgn[i]=br.read1();    cheDrc.dynRngCtl[i]=br.read(7);    n++;  }  return n;}  }
class C{  public void addTable(String tableName,int tableId){  tableCache.put(tableName,tableId);}  }
class C{  protected Jerry(DOMBuilder builder,Node... nodes){  this.parent=null;  this.nodes=nodes;  this.builder=builder;}  }
class C{  @Override protected String createMenuItemText(int index,Setup item){  return FileUtils.createPartialFilename(item.getFile(),m_MinNumParentDirs);}  }
class C{  public SVGFontElementBridge(){}  }
class C{  public static <T,R extends Collection<T>>R addAllTo(Iterable<? extends T> iterable,R targetCollection){  Iterate.addAllIterable(iterable,targetCollection);  return targetCollection;}  }
class C{  private void connect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.CONNECTED);  c.addAction("Client Connected");}  }
class C{  public void sendOne2OneDisplayedDeliveryReport(String msgId,ContactId remote,long timestamp) throws NetworkException {  getOrCreateOneToOneChat(remote).sendDisplayedDeliveryReport(remote,msgId,timestamp);}  }
class C{  public synchronized void stop(){  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","stopping the timer");  if (isActive == true) {    for (    Object[] obj : timerTable.values()) {      TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];      if (alarmClock != null) {        alarmClock.cancel();      }    }    timer.cancel();    isActive=false;    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","timer stopped");  } else {    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","the timer is already deactivated");  }}  }
class C{  protected final void throwObjectContractViolation(Object o1,Object o2) throws IllegalArgumentException {  throw buildObjectContractViolation(o1,o2,"");}  }
class C{  public void clearEventListeners(){  this.eventListeners.clear();}  }
class C{  public static Object[] createMultiDimArray(Class<?> componentType,int[] dims){  return (Object[])Array.newInstance(componentType,dims);}  }
class C{  private JobStatus processStatus(HadoopJobStatus status){  if (lastVer < status.version()) {    lastVer=status.version();    lastStatus=status;  } else   assert lastStatus != null;  return HadoopUtils.status(lastStatus,conf);}  }
class C{  public synchronized void awaitReady(long timeout) throws IgniteInterruptedCheckedException {  long start=System.currentTimeMillis();  try {    while (!ready()) {      long now=System.currentTimeMillis();      if (start + timeout - now <= 0)       return;      wait(start + timeout - now);    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public ECPoint decrypt(ECPair pair){  if (key == null) {    throw new IllegalStateException("ECElGamalDecryptor not initialised");  }  ECPoint tmp=pair.getX().multiply(key.getD());  return pair.getY().subtract(tmp).normalize();}  }
class C{  public void put(int bitIndex,boolean value){  if (bitIndex < 0 || bitIndex >= nbits)   throw new IndexOutOfBoundsException(String.valueOf(bitIndex));  if (value)   QuickBitVector.set(bits,bitIndex); else   QuickBitVector.clear(bits,bitIndex);}  }
class C{  @Override public int compareTo(GeoKey gke){  if (keyCode < gke.keyCode) {    return (-1);  }  if (keyCode > gke.keyCode) {    return (1);  }  return (0);}  }
class C{  public String AcceptHash(String key) throws NoSuchAlgorithmException {  String input=key + WEBSOCKET_GUID;  MessageDigest sha1=MessageDigest.getInstance("SHA-1");  byte[] hash=sha1.digest(input.getBytes());  ;  return Base64Util.encode(ByteBuffer.wrap(hash));}  }
class C{  public static int median(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,int begin,int end){  final int length=end - begin;  assert (length > 0);  final int left=begin + ((length - 1) >> 1);  quickSelect(data,comparator,begin,end,left);  return left;}  }
class C{  public static void main(String args[]){  boolean ok=parseOptions(args);  if (!ok || !stripFiles(infiles,outfiles)) {    System.exit(1);  }}  }
class C{  private int classify(char c){  if (c == '_')   return TokenType.TEXT.ordinal();  if (Character.isAlphabetic(c) || Character.isDigit(c)) {    return TokenType.TEXT.ordinal();  } else   if (Character.isWhitespace(c)) {    return TokenType.WHITESPACE.ordinal();  } else {    Character.UnicodeBlock block=Character.UnicodeBlock.of(c);    if (!Character.isISOControl(c) && c != KeyEvent.CHAR_UNDEFINED && block != null && block != Character.UnicodeBlock.SPECIALS)     return TokenType.PUNCTUATION.ordinal(); else     return TokenType.UNPRINTABLE.ordinal();  }}  }
class C{  public static void clear(){  buffer.clear();  scheduleBufferPrint();}  }
class C{  public DisambiguationWebView(final DisambiguationDialog disambiguationDialog,final ICallback<DisambiguationResponse> callback){  mDisambiguationDialog=disambiguationDialog;  mCallback=callback;}  }
class C{  private boolean overrides(ExecutableElement e,Class<?> clazz,String method){  TypeElement clazzElt=elements.getTypeElement(clazz.getCanonicalName());  assert clazzElt != null;  for (  ExecutableElement elt : ElementFilter.methodsIn(clazzElt.getEnclosedElements())) {    if (elt.getSimpleName().contentEquals(method) && elements.overrides(e,elt,clazzElt)) {      return true;    }  }  return false;}  }
class C{  void fillComboBox(JComboBox cb){  cb.addItem(getString("ComboBoxDemo.brent"));  cb.addItem(getString("ComboBoxDemo.georges"));  cb.addItem(getString("ComboBoxDemo.hans"));  cb.addItem(getString("ComboBoxDemo.howard"));  cb.addItem(getString("ComboBoxDemo.james"));  cb.addItem(getString("ComboBoxDemo.jeff"));  cb.addItem(getString("ComboBoxDemo.jon"));  cb.addItem(getString("ComboBoxDemo.lara"));  cb.addItem(getString("ComboBoxDemo.larry"));  cb.addItem(getString("ComboBoxDemo.lisa"));  cb.addItem(getString("ComboBoxDemo.michael"));  cb.addItem(getString("ComboBoxDemo.philip"));  cb.addItem(getString("ComboBoxDemo.scott"));}  }
class C{  public void logReset(long streamId){  addEntry(new Entry(TYPE_RESET,null,null,streamId,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null));}  }
class C{  private static void selectAndPossiblyCenter(JTextArea textArea,int start,int end){  textArea.setSelectionStart(start);  textArea.setSelectionEnd(end);  Rectangle r=null;  try {    r=textArea.modelToView(start);    if (r == null) {      return;    }    if (end != start) {      r=r.union(textArea.modelToView(end));    }  } catch (  BadLocationException ble) {    ble.printStackTrace();    textArea.setSelectionStart(start);    textArea.setSelectionEnd(end);    return;  }  Rectangle visible=textArea.getVisibleRect();  if (visible.contains(r)) {    textArea.setSelectionStart(start);    textArea.setSelectionEnd(end);    return;  }  visible.x=r.x - (visible.width - r.width) / 2;  visible.y=r.y - (visible.height - r.height) / 2;  Rectangle bounds=textArea.getBounds();  Insets i=textArea.getInsets();  bounds.x=i.left;  bounds.y=i.top;  bounds.width-=i.left + i.right;  bounds.height-=i.top + i.bottom;  if (visible.x < bounds.x) {    visible.x=bounds.x;  }  if (visible.x + visible.width > bounds.x + bounds.width) {    visible.x=bounds.x + bounds.width - visible.width;  }  if (visible.y < bounds.y) {    visible.y=bounds.y;  }  if (visible.y + visible.height > bounds.y + bounds.height) {    visible.y=bounds.y + bounds.height - visible.height;  }  textArea.scrollRectToVisible(visible);}  }
class C{  @Override public synchronized String toString(){  final StringBuffer sbResult=new StringBuffer();  sbResult.append("[");  sbResult.append(getCredentialsStringRepresentation(proxyCred));  sbResult.append(" | ");  sbResult.append(getCredentialsStringRepresentation(credMap));  sbResult.append(" | ");  sbResult.append(getCookiesStringRepresentation(cookies));  sbResult.append("]");  final String strResult=sbResult.toString();  return strResult;}  }
class C{  private static StringListField strList(String key){  return new StringListField(key);}  }
class C{  public String parse(String inputTemplate,String outputFile) throws Exception {  return parse(inputTemplate,outputFile,null,null);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Deprecated @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{pid}/detach") public TaskResourceRep detachFullCopy(@PathParam("id") URI id,@PathParam("pid") URI fullCopyId) throws InternalException {  return getFullCopyManager().detachFullCopy(id,fullCopyId).getTaskList().get(0);}  }
class C{  public static String addressAndSpaceString(Address addr){  return String.format("%s/%s",addr,Space.getSpaceForAddress(addr).getName());}  }
class C{  @SuppressWarnings("unchecked") public static <T extends java.lang.Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  private void postInitViewPager(){  try {    Class<?> viewpager=ViewPager.class;    Field scroller=viewpager.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=viewpager.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new CarouselViewPagerScroller(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {  }}  }
class C{  Parser(byte[] info,ConstPool cp){  super(info);  pool=cp;}  }
class C{  public static final GCodeFlavor tasteFlavor(BufferedInputStream buffer) throws IOException {  int rl=200;  final byte[] readAhead=new byte[rl];  buffer.mark(readAhead.length);  int i=0;  while (buffer.available() > 0 && i < rl) {    readAhead[i]=(byte)buffer.read();    i++;  }  buffer.reset();  final String readAheadString=new String(readAhead).toLowerCase(Locale.US);  if (readAheadString.contains("generated by slic3r")) {    return GCodeFlavor.SLIC3R;  } else   if (readAheadString.contains("skeinforge")) {    return GCodeFlavor.SKEINFORGE;  }  return GCodeFlavor.UNKNOWN;}  }
class C{  public void removeTileAt(CGPoint pos){  assert (pos.x < layerSize.width && pos.y < layerSize.height && pos.x >= 0 && pos.y >= 0) : "TMXLayer: invalid position";  assert (tiles != null && atlasIndexArray_ != null) : "TMXLayer: the tiles map has been released";  int gid=tileGIDAt(pos);  if (gid != 0) {    int z=(int)(pos.x + pos.y * layerSize.width);    int atlasIndex=atlasIndexForExistantZ(z);    tiles.put(z,0);    atlasIndexArray_.remove(atlasIndex);    CCSprite sprite=(CCSprite)getChildByTag(z);    if (sprite != null)     super.removeChild(sprite,true); else {      textureAtlas_.removeQuad(atlasIndex);      for (      CCNode node : children_) {        CCSprite s=(CCSprite)node;        int ai=s.atlasIndex;        if (ai >= atlasIndex) {          s.atlasIndex=ai - 1;        }      }    }  }}  }
class C{  public int nextIndex(){  return tokenPos;}  }
class C{  protected void preProcessRow(){}  }
class C{  BluetoothServerSocket(int type,boolean auth,boolean encrypt,int port,ParcelUuid uuid) throws IOException {  mSocket=new BluetoothSocket(type,-1,auth,encrypt,null,port,uuid);  mChannel=mSocket.getPort();}  }
class C{  public void applicationWillEnterForeground(){}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj instanceof CharRange == false) {    return false;  }  final CharRange other=(CharRange)obj;  return start == other.start && end == other.end && negated == other.negated;}  }
class C{  protected void paintCurrentLineHighlight(Graphics g,Rectangle visibleRect){  if (textArea.getHighlightCurrentLine()) {    Caret caret=textArea.getCaret();    if (caret.getDot() == caret.getMark()) {      Color highlight=textArea.getCurrentLineHighlightColor();      int height=textArea.getLineHeight();      if (textArea.getFadeCurrentLineHighlight()) {        Graphics2D g2d=(Graphics2D)g;        Color bg=textArea.getBackground();        GradientPaint paint=new GradientPaint(visibleRect.x,0,highlight,visibleRect.x + visibleRect.width,0,bg == null ? Color.WHITE : bg);        g2d.setPaint(paint);        g2d.fillRect(visibleRect.x,textArea.currentCaretY,visibleRect.width,height);      } else {        g.setColor(highlight);        g.fillRect(visibleRect.x,textArea.currentCaretY,visibleRect.width,height);      }    }  }}  }
class C{  private MRMA createCounterDoc(){  if (getRef_RMA_ID() > 0)   return null;  MOrg org=MOrg.get(getCtx(),getAD_Org_ID());  int counterC_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());  if (counterC_BPartner_ID == 0)   return null;  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  int counterAD_Org_ID=bp.getAD_OrgBP_ID_Int();  if (counterAD_Org_ID == 0)   return null;  int C_DocTypeTarget_ID=0;  MDocTypeCounter counterDT=MDocTypeCounter.getCounterDocType(getCtx(),getC_DocType_ID());  if (counterDT != null) {    log.fine(counterDT.toString());    if (!counterDT.isCreateCounter() || !counterDT.isValid())     return null;    C_DocTypeTarget_ID=counterDT.getCounter_C_DocType_ID();  } else {    C_DocTypeTarget_ID=MDocTypeCounter.getCounterDocType_ID(getCtx(),getC_DocType_ID());    log.fine("Indirect C_DocTypeTarget_ID=" + C_DocTypeTarget_ID);    if (C_DocTypeTarget_ID <= 0)     return null;  }  MRMA counter=copyFrom(this,C_DocTypeTarget_ID,!isSOTrx(),true,get_TrxName());  counter.setAD_Org_ID(counterAD_Org_ID);  counter.setC_BPartner_ID(counterC_BPartner_ID);  counter.saveEx(get_TrxName());  MRMALine[] counterLines=counter.getLines(true);  for (int i=0; i < counterLines.length; i++) {    MRMALine counterLine=counterLines[i];    counterLine.setClientOrg(counter);    counterLine.saveEx(get_TrxName());  }  log.fine(counter.toString());  if (counterDT != null) {    if (counterDT.getDocAction() != null) {      counter.setDocAction(counterDT.getDocAction());      counter.processIt(counterDT.getDocAction());      counter.saveEx(get_TrxName());    }  }  return counter;}  }
class C{  public final double[] weights(Instance instance){  return null;}  }
class C{  protected void calculateBranchLengths(){  if (!hasLengths) {    throw new IllegalArgumentException("Can't calculate branch lengths because node heights not known");  }  nodeHeightsToLengths(rootNode,getHeight(rootNode));  lengthsKnown=true;}  }
class C{  public CloseableStaticBitmap decodeJpeg(final EncodedImage encodedImage,int length,QualityInfo qualityInfo,ImageDecodeOptions options){  CloseableReference<Bitmap> bitmapReference=mPlatformDecoder.decodeJPEGFromEncodedImage(encodedImage,options.bitmapConfig,length);  try {    return new CloseableStaticBitmap(bitmapReference,qualityInfo,encodedImage.getRotationAngle());  }  finally {    bitmapReference.close();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return Boolean.valueOf(EPG.getInstance().isPhysicalOverriden(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID()));}  }
class C{  public synchronized long incrAndGetSeqno(){  seqno++;  notifyAll();  return seqno;}  }
class C{  private static void printUnicodePropertyValuesAndAliases(String unicodeVersion) throws UnicodeProperties.UnsupportedUnicodeVersionException {  Pattern versionPattern=Pattern.compile("(\\d+)(?:\\.(\\d+))?(?:\\.\\d+)?");  Matcher matcher=versionPattern.matcher(unicodeVersion);  if (!matcher.matches()) {    throw new UnicodeProperties.UnsupportedUnicodeVersionException();  }  String underscoreVersion=matcher.group(1) + (null == matcher.group(2) ? "_0" : "_" + matcher.group(2));  String[] propertyValues;  String[] propertyValueAliases;  try {    Class<?> clazz=Class.forName("jflex.unicode.data.Unicode_" + underscoreVersion);    Field field=clazz.getField("propertyValues");    propertyValues=(String[])field.get(null);    field=clazz.getField("propertyValueAliases");    propertyValueAliases=(String[])field.get(null);  } catch (  Exception e) {    throw new UnicodeProperties.UnsupportedUnicodeVersionException();  }  SortedMap<String,SortedSet<String>> propertyValuesToAliases=new TreeMap<String,SortedSet<String>>();  for (  String value : propertyValues) {    propertyValuesToAliases.put(value,new TreeSet<String>());  }  for (int i=0; i < propertyValueAliases.length; i+=2) {    String alias=propertyValueAliases[i];    String value=propertyValueAliases[i + 1];    SortedSet<String> aliases=propertyValuesToAliases.get(value);    if (null == aliases) {      aliases=new TreeSet<String>();      propertyValuesToAliases.put(value,aliases);    }    aliases.add(alias);  }  for (  Map.Entry<String,SortedSet<String>> entry : propertyValuesToAliases.entrySet()) {    String value=entry.getKey();    SortedSet<String> aliases=entry.getValue();    Out.print(value);    if (aliases.size() > 0) {      for (      String alias : aliases) {        Out.print(", " + alias);      }    }    Out.println("");  }}  }
class C{  private void deletePcjIdAndSparqlMetadata(final Transaction tx,final String pcjId){  requireNonNull(tx);  requireNonNull(pcjId);  final String queryId=getQueryIdFromPcjId(tx,pcjId);  final String sparql=getSparqlFromQueryId(tx,queryId);  tx.delete(queryId,FluoQueryColumns.RYA_PCJ_ID);  tx.delete(sparql,FluoQueryColumns.QUERY_ID);  tx.delete(pcjId,FluoQueryColumns.PCJ_ID_QUERY_ID);}  }
class C{  protected ObjectMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseObjectMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,this.offset);}  }
class C{  public int decrementAliveCheck(){  assert isClient();  return --aliveCheck;}  }
class C{  public void registerProblem(@NotNull final PsiElement psiElement,@NotNull final String message,@NotNull ProblemHighlightType highlightType,@Nullable TextRange rangeInElement,@Nullable LocalQuickFix... fixes){  final ProblemDescriptor descriptor=myManager.createProblemDescriptor(psiElement,rangeInElement,message,highlightType,myOnTheFly,fixes);  registerProblem(descriptor);}  }
class C{  @NotNull public static Couple<VcsFileRevision> sortRevisions(@NotNull VcsFileRevision revision1,@NotNull VcsFileRevision revision2){  VcsFileRevision left=revision1;  VcsFileRevision right=revision2;  if (compare(revision1,revision2) > 0) {    left=revision2;    right=revision1;  }  return Couple.of(left,right);}  }
class C{  private static final void encodeLELong(long val,byte[] dst,int off){  dst[off + 0]=(byte)val;  dst[off + 1]=(byte)((int)val >>> 8);  dst[off + 2]=(byte)((int)val >>> 16);  dst[off + 3]=(byte)((int)val >>> 24);  dst[off + 4]=(byte)(val >>> 32);  dst[off + 5]=(byte)(val >>> 40);  dst[off + 6]=(byte)(val >>> 48);  dst[off + 7]=(byte)(val >>> 56);}  }
class C{  public <T>void addToRequestQueue(Request<T> request){  request.setTag(TAG);  getRequestQueue().add(request);}  }
class C{  private int totalLength(double[][] samples){  int N=0;  for (  double[] samp : samples) {    N+=samp.length;  }  return N;}  }
class C{  @Deprecated public boolean isAssignableFrom(Class<?> cls){  return isAssignableFrom((Type)cls);}  }
class C{  private void writeFlowMod(IOFSwitch sw,OFFlowModCommand command,OFBufferId bufferId,Match match,OFPort outPort){  OFFlowMod.Builder fmb;  if (command == OFFlowModCommand.DELETE) {    fmb=sw.getOFFactory().buildFlowDelete();  } else {    fmb=sw.getOFFactory().buildFlowAdd();  }  fmb.setMatch(match);  fmb.setCookie((U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE)));  fmb.setIdleTimeout(LearningSwitch.FLOWMOD_DEFAULT_IDLE_TIMEOUT);  fmb.setHardTimeout(LearningSwitch.FLOWMOD_DEFAULT_HARD_TIMEOUT);  fmb.setPriority(LearningSwitch.FLOWMOD_PRIORITY);  fmb.setBufferId(bufferId);  fmb.setOutPort((command == OFFlowModCommand.DELETE) ? OFPort.ANY : outPort);  Set<OFFlowModFlags> sfmf=new HashSet<OFFlowModFlags>();  if (command != OFFlowModCommand.DELETE) {    sfmf.add(OFFlowModFlags.SEND_FLOW_REM);  }  fmb.setFlags(sfmf);  List<OFAction> al=new ArrayList<OFAction>();  al.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(0xffFFffFF).build());  fmb.setActions(al);  if (log.isTraceEnabled()) {    log.trace("{} {} flow mod {}",new Object[]{sw,(command == OFFlowModCommand.DELETE) ? "deleting" : "adding",fmb.build()});  }  counterFlowMod.increment();  sw.write(fmb.build());}  }
class C{  public RuntimeExceptionConfig(String msg){  super(msg);}  }
class C{  public Vertex(){  this(-1);}  }
class C{  private void forgetSource(Color newColor,State nextState){  sourceQuality=0;  dancingThreshold=-1;  sourceDistance=0;  sourceConcentration=0;  repeatedTrip=0;  foodSource=null;  foragingCosts=0;  if (newColor != null)   setColor(newColor);  setState(nextState);}  }
class C{  public boolean isRepresentationClassReader(){  return java.io.Reader.class.isAssignableFrom(representationClass);}  }
class C{  @Interruptible public void createFinalMCMap(IR ir,int machineCodeLength){  _mcMap=OptMachineCodeMap.create(ir,machineCodeLength);}  }
class C{  private int parseTimezoneOffset(boolean isOptional) throws ParseException {  if (currentOffset >= maxOffset) {    if (!isOptional)     throw new java.text.ParseException("Missing non-optional timezone offset",currentOffset);    return 0;  }  char optionalSign=data.charAt(currentOffset);  boolean negate=false;  if (optionalSign == '+' || optionalSign == '-') {    if (optionalSign == '-')     negate=true;    isOptional=false;    currentOffset++;  }  int ret=parseTime(isOptional);  return (negate == true) ? -ret : ret;}  }
class C{  private void deletePubsubTopic(String topic) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options.as(PubsubOptions.class)).build();  }  if (executeNullIfNotFound(pubsubClient.projects().topics().get(topic)) != null) {    pubsubClient.projects().topics().delete(topic).execute();  }}  }
class C{  public void processLocalizedOption(String locale,String localizedText){  List<VOLocalizedText> obsoleteLocalizedTexts=obsoleteOptionDescriptions.get(Long.valueOf(parameterOption.getKey()));  VOLocalizedText obsoleteLocalizedText=getLocalizedText(locale,obsoleteLocalizedTexts);  if (obsoleteLocalizedText != null) {    obsoleteLocalizedTexts.remove(obsoleteLocalizedText);  }  localizer.storeLocalizedResource(locale,parameterOption.getKey(),LocalizedObjectTypes.OPTION_PARAMETER_DEF_DESC,localizedText);  processedOptionLocales.add(locale);}  }
class C{  private void checkNeeded(Player player,Engine en,String item){  ItemCollection needed=getMissingItems(player);  if (!player.isQuestCompleted(questSlot)) {    if (needed.containsKey(item)) {      boolean last=needed.size() == 1;      en.step(player,item);      if (last) {        assertEquals("Thank you so much! Now I can fill all of my orders.",getReply(seremela));      } else {        assertEquals("Thank you! What else did you bring?",getReply(seremela));      }    } else {      en.step(player,item);      assertEquals("I don't need any more of those.",getReply(seremela));    }  }}  }
class C{  private void addMapping(String jarItem,String jarName){  addToList(jarItem,jarName,indexMap);  addToList(jarName,jarItem,jarMap);}  }
class C{  public <T>T submit(final Callable<T> callable){  if (taskExecutor instanceof ForkJoinPool) {    log.debug("Submited callable to SimpleReact ForkJoinPool. JDK ParallelStreams will reuse SimpleReact ForkJoinPool.");    try {      return ((ForkJoinPool)taskExecutor).submit(callable).get();    } catch (    final ExecutionException e) {      throw ExceptionSoftener.throwSoftenedException(e);    }catch (    final InterruptedException e) {      Thread.currentThread().interrupt();      throw ExceptionSoftener.throwSoftenedException(e);    }  }  try {    log.debug("Submited callable but do not have a ForkJoinPool. JDK ParallelStreams will use Common ForkJoinPool not SimpleReact Executor.");    return callable.call();  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private Transform matchMath(Class type) throws Exception {  if (type == BigDecimal.class) {    return new BigDecimalTransform();  }  if (type == BigInteger.class) {    return new BigIntegerTransform();  }  return null;}  }
class C{  public DateTime roundFloorCopy(){  return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));}  }
class C{  protected void onPushReceive(Context context,Intent intent){  String pushDataStr=intent.getStringExtra(KEY_PUSH_DATA);  if (pushDataStr == null) {    PLog.e(TAG,"Can not get push data from intent.");    return;  }  PLog.v(TAG,"Received push data: " + pushDataStr);  JSONObject pushData=null;  try {    pushData=new JSONObject(pushDataStr);  } catch (  JSONException e) {    PLog.e(TAG,"Unexpected JSONException when receiving push data: ",e);  }  String action=null;  if (pushData != null) {    action=pushData.optString("action",null);  }  if (action != null) {    Bundle extras=intent.getExtras();    Intent broadcastIntent=new Intent();    broadcastIntent.putExtras(extras);    broadcastIntent.setAction(action);    broadcastIntent.setPackage(context.getPackageName());    context.sendBroadcast(broadcastIntent);  }  Notification notification=getNotification(context,intent);  if (notification != null) {    ParseNotificationManager.getInstance().showNotification(context,notification);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(4);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public int showDialog(Instances inst){  setInstances(inst);  return showDialog();}  }
class C{  public CacheRequest(final URL url,final String method,final EtagCache cache) throws HttpRequestException {  super(url,method);  this.cache=cache;}  }
class C{  public OnlineSearchProblem(ActionsFunction actionsFunction,GoalTest goalTest){  this(actionsFunction,goalTest,new DefaultStepCostFunction());}  }
class C{  private CachedRowSet buildCachedRow() throws SQLException {  int iColCount;  CachedRowSetImpl crsRow=new CachedRowSetImpl();  RowSetMetaDataImpl rsmd=new RowSetMetaDataImpl();  RowSetMetaDataImpl rsmdWrite=(RowSetMetaDataImpl)crsSync.getMetaData();  RowSetMetaDataImpl rsmdRow=new RowSetMetaDataImpl();  iColCount=rsmdWrite.getColumnCount();  rsmdRow.setColumnCount(iColCount);  for (int i=1; i <= iColCount; i++) {    rsmdRow.setColumnType(i,rsmdWrite.getColumnType(i));    rsmdRow.setColumnName(i,rsmdWrite.getColumnName(i));    rsmdRow.setNullable(i,ResultSetMetaData.columnNullableUnknown);    try {      rsmdRow.setCatalogName(i,rsmdWrite.getCatalogName(i));      rsmdRow.setSchemaName(i,rsmdWrite.getSchemaName(i));    } catch (    SQLException e) {      e.printStackTrace();    }  }  crsRow.setMetaData(rsmdRow);  crsRow.moveToInsertRow();  for (int col=1; col <= crsSync.getMetaData().getColumnCount(); col++) {    crsRow.updateObject(col,crsSync.getObject(col));  }  crsRow.insertRow();  crsRow.moveToCurrentRow();  crsRow.absolute(1);  crsRow.setOriginalRow();  try {    crsRow.setUrl(crsSync.getUrl());  } catch (  SQLException sqle) {  }  try {    crsRow.setDataSourceName(crsSync.getCommand());  } catch (  SQLException sqle) {  }  try {    if (crsSync.getTableName() != null) {      crsRow.setTableName(crsSync.getTableName());    }  } catch (  SQLException sqle) {  }  try {    if (crsSync.getCommand() != null)     crsRow.setCommand(crsSync.getCommand());  } catch (  SQLException sqle) {  }  try {    crsRow.setKeyColumns(crsSync.getKeyColumns());  } catch (  SQLException sqle) {  }  return crsRow;}  }
class C{  public static boolean isSameDay(Calendar cal1,Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));}  }
class C{  public void resume(){  throwReadOnly();}  }
class C{  public PdfReportTable createTable(float[] columnWidths){  return new PdfReportTable(this,columnWidths);}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  MPeriod.testPeriodOpen(getCtx(),getDateAcct(),getC_DocType_ID(),getAD_Org_ID());  MAllocationHdr[] allocations=MAllocationHdr.getOfInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());  for (int i=0; i < allocations.length; i++) {    allocations[i].setDocAction(DocAction.ACTION_Reverse_Correct);    allocations[i].reverseCorrectIt();    allocations[i].save(get_TrxName());  }  if (!isSOTrx()) {    MMatchInv[] mInv=MMatchInv.getInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());    for (int i=0; i < mInv.length; i++)     mInv[i].delete(true);    MMatchPO[] mPO=MMatchPO.getInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());    for (int i=0; i < mPO.length; i++) {      if (mPO[i].getM_InOutLine_ID() == 0)       mPO[i].delete(true); else {        mPO[i].setC_InvoiceLine_ID(null);        mPO[i].save(get_TrxName());      }    }  }  load(get_TrxName());  MInvoice reversal=copyFrom(this,getDateInvoiced(),getDateAcct(),getC_DocType_ID(),isSOTrx(),false,get_TrxName(),true);  if (reversal == null) {    m_processMsg="Could not create Invoice Reversal";    return false;  }  reversal.setReversal(true);  MInvoiceLine[] rLines=reversal.getLines(false);  for (int i=0; i < rLines.length; i++) {    MInvoiceLine rLine=rLines[i];    rLine.setQtyEntered(rLine.getQtyEntered().negate());    rLine.setQtyInvoiced(rLine.getQtyInvoiced().negate());    rLine.setLineNetAmt(rLine.getLineNetAmt().negate());    if (rLine.getTaxAmt() != null && rLine.getTaxAmt().compareTo(Env.ZERO) != 0)     rLine.setTaxAmt(rLine.getTaxAmt().negate());    if (rLine.getLineTotalAmt() != null && rLine.getLineTotalAmt().compareTo(Env.ZERO) != 0)     rLine.setLineTotalAmt(rLine.getLineTotalAmt().negate());    if (!rLine.save(get_TrxName())) {      m_processMsg="Could not correct Invoice Reversal Line";      return false;    }  }  reversal.setC_Order_ID(getC_Order_ID());  reversal.addDescription("{->" + getDocumentNo() + ")");  reversal.setReversal_ID(getC_Invoice_ID());  reversal.saveEx(get_TrxName());  if (!reversal.processIt(DocAction.ACTION_Complete)) {    m_processMsg="Reversal ERROR: " + reversal.getProcessMsg();    return false;  }  reversal.setC_Payment_ID(0);  reversal.setIsPaid(true);  reversal.closeIt();  reversal.setProcessing(false);  reversal.setDocStatus(DOCSTATUS_Reversed);  reversal.setDocAction(DOCACTION_None);  reversal.saveEx(get_TrxName());  m_processMsg=reversal.getDocumentNo();  addDescription("(" + reversal.getDocumentNo() + "<-)");  MInvoiceLine[] iLines=getLines(false);  for (int i=0; i < iLines.length; i++) {    MInvoiceLine iLine=iLines[i];    if (iLine.getM_InOutLine_ID() != 0) {      MInOutLine ioLine=new MInOutLine(getCtx(),iLine.getM_InOutLine_ID(),get_TrxName());      ioLine.setIsInvoiced(false);      ioLine.save(get_TrxName());      iLine.setM_InOutLine_ID(0);      iLine.save(get_TrxName());    }  }  setProcessed(true);  setReversal_ID(reversal.getC_Invoice_ID());  setDocStatus(DOCSTATUS_Reversed);  setDocAction(DOCACTION_None);  setC_Payment_ID(0);  setIsPaid(true);  MAllocationHdr alloc=new MAllocationHdr(getCtx(),false,getDateAcct(),getC_Currency_ID(),Msg.translate(getCtx(),"C_Invoice_ID") + ": " + getDocumentNo()+ "/"+ reversal.getDocumentNo(),get_TrxName());  alloc.setAD_Org_ID(getAD_Org_ID());  if (alloc.save()) {    BigDecimal gt=getGrandTotal(true);    if (!isSOTrx())     gt=gt.negate();    MAllocationLine aLine=new MAllocationLine(alloc,gt,Env.ZERO,Env.ZERO,Env.ZERO);    aLine.setC_Invoice_ID(getC_Invoice_ID());    aLine.saveEx();    MAllocationLine rLine=new MAllocationLine(alloc,gt.negate(),Env.ZERO,Env.ZERO,Env.ZERO);    rLine.setC_Invoice_ID(reversal.getC_Invoice_ID());    rLine.saveEx();    if (alloc.processIt(DocAction.ACTION_Complete))     alloc.saveEx();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  assert 0 <= rowIndex && rowIndex < rows;  assert 0 <= columnIndex && columnIndex < columns;  return false;}  }
class C{  public PowerVmAllocationPolicyMigrationMedianAbsoluteDeviation(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent process with : " + params);  if (!params.getBool(COMPONENT_NAME,false) || suggesters.isEmpty()) {    return;  }  boolean buildAll=params.getBool(SUGGEST_BUILD_ALL,false);  boolean reloadAll=params.getBool(SUGGEST_RELOAD_ALL,false);  Set<SolrSuggester> querySuggesters;  try {    querySuggesters=getSuggesters(params);  } catch (  SolrException ex) {    if (!buildAll && !reloadAll) {      throw ex;    } else {      querySuggesters=new HashSet<>();    }  }  String query=params.get(SUGGEST_Q);  if (query == null) {    query=rb.getQueryString();    if (query == null) {      query=params.get(CommonParams.Q);    }  }  if (query != null) {    int count=params.getInt(SUGGEST_COUNT,1);    SuggesterOptions options=new SuggesterOptions(new CharsRef(query),count);    Map<String,SimpleOrderedMap<NamedList<Object>>> namedListResults=new HashMap<>();    for (    SolrSuggester suggester : querySuggesters) {      SuggesterResult suggesterResult=suggester.getSuggestions(options);      toNamedList(suggesterResult,namedListResults);    }    rb.rsp.add(SuggesterResultLabels.SUGGEST,namedListResults);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private Automaton buildAutomaton(BytesRefHash termBytesHash){  final TreeSet<BytesRef> terms=new TreeSet<BytesRef>();  for (int i=0; i < termBytesHash.size(); i++) {    BytesRef ref=new BytesRef();    termBytesHash.get(i,ref);    terms.add(ref);  }  final Automaton a=DaciukMihovAutomatonBuilder.build(terms);  return a;}  }
class C{  protected void rewriteHops(){  try {    dmlTranslator.rewriteHopsDAG(dmlProgram);  } catch (  LanguageException e) {    throw new MLContextException("Exception occurred while rewriting HOPS (high-level operators)",e);  }catch (  HopsException e) {    throw new MLContextException("Exception occurred while rewriting HOPS (high-level operators)",e);  }catch (  ParseException e) {    throw new MLContextException("Exception occurred while rewriting HOPS (high-level operators)",e);  }}  }
class C{  public MediaMarkerTimingSpecifier(TimedElement owner,boolean isBegin,String syncbaseID,String markerName){  super(owner,isBegin);  this.syncbaseID=syncbaseID;  this.markerName=markerName;  this.mediaElement=owner.getTimedElementById(syncbaseID);}  }
class C{  public boolean isSuspended(){  return suspended;}  }
class C{  public static void detect(String url,OnDetectBigUrlFileListener onDetectBigUrlFileListener,DownloadConfiguration downloadConfiguration){  if (downloadConfiguration != null) {    downloadConfiguration.initNullKeyForUrl(url);  }  getFileDownloadManager().detect(url,onDetectBigUrlFileListener,downloadConfiguration);}  }
class C{  private void runUpdates(Collection<Runnable> runnables){  for (  Runnable runnable : runnables) {    runnable.run();  }}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength() + (4 - getDataLength() % 4) % 4];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  System.arraycopy(software,0,binValue,4,getDataLength());  return binValue;}  }
class C{  public void visitSyscall(int opcode){  flushInstructionCount(false,false);  int code=(opcode >> 6) & 0x000FFFFF;  if (code == SyscallHandler.syscallUnmappedImport) {    storePc();  }  HLEModuleFunction func=HLEModuleManager.getInstance().getFunctionFromSyscallCode(code);  boolean fastSyscall=isFastSyscall(code);  if (func == null) {    loadImm(code);    if (fastSyscall) {      mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"syscallFast","(I)V");    } else {      mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"syscall","(I)V");    }  } else {    visitSyscall(func,fastSyscall);  }}  }
class C{  public void removeGpsStatusListener(GpsStatus.Listener listener){  try {    GpsStatusListenerTransport transport=mGpsStatusListeners.remove(listener);    if (transport != null) {      mService.removeGpsStatusListener(transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in unregisterGpsStatusListener: ",e);  }}  }
class C{  public CharacterResult create(){  final Result result=validators.runValidators();  if (result != null) {    return new CharacterResult(result,character,template);  }  final TransactionPool transactionPool=SingletonRepository.getTransactionPool();  final DBTransaction trans=transactionPool.beginWork();  final CharacterDAO characterDAO=DAORegister.get().get(CharacterDAO.class);  try {    if (characterDAO.hasCharacter(trans,character)) {      logger.warn("Character already exist: " + character);      transactionPool.commit(trans);      return new CharacterResult(Result.FAILED_PLAYER_EXISTS,character,template);    }    final Player object=Player.createZeroLevelPlayer(character,template);    final String text="Character " + character + " ("+ username+ ") has been created.";    SingletonRepository.getRuleProcessor().sendMessageToSupporters(text);    characterDAO.addCharacter(trans,username,character,object);    transactionPool.commit(trans);    return new CharacterResult(Result.OK_CREATED,character,object);  } catch (  final Exception e) {    transactionPool.rollback(trans);    logger.error("Can't create character",e);    return new CharacterResult(Result.FAILED_EXCEPTION,character,template);  }}  }
class C{  public CriteriosBusquedaNotiBean(){}  }
class C{  private void pushCallStack(){  StackTraceElement[] eles=(new Throwable()).getStackTrace();  int i;  for (i=1; i < eles.length; i++) {    if (!eles[i].getClassName().equals(this.getClass().getName())) {      break;    }  }  this.callStack.push(eles[i]);}  }
class C{  public void write(int c) throws java.io.IOException {  return;}  }
class C{  public static Vector<String> find(String classname,String[] pkgnames){  Vector<String> result;  Class<?> cls;  result=new Vector<String>();  try {    cls=Class.forName(classname);    result=find(cls,pkgnames);  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  private static String createMessage(int product_id,int asi_id,BigDecimal qty,BigDecimal remainingQty){  MProduct product=MProduct.get(Env.getCtx(),product_id);  String productValue=product != null ? product.getValue() : "?";  String productName=product != null ? product.getName() : "?";  return "@M_Product_ID@ : " + productValue + " - "+ productName+ ", @Qty@ : "+ qty+ ", @RemainingQty@ : "+ remainingQty+ " (ASI:"+ asi_id+ ")";}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  protected static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  if (trace.length >= 2) {    String callingClass=trace[2].getClassName();    callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);    callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);    caller=callingClass + "." + trace[2].getMethodName();  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void deleteAsync(final String id,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(id,responseCallback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.951 -0500",hash_original_method="F9C41201775A1AACD21054779541BDEA",hash_generated_method="3CA11E865E7B60B42B88D30C85038589") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public String listHelp() throws IOException {  if (SMTPReply.isPositiveCompletion(help()))   return getReplyString();  return null;}  }
class C{  public void onFragmentResult(int requestCode,int resultCode,Intent data){}  }
class C{  public AnsibleRunner extraParams(String params){  if (params != null && params.length() > 0) {    extraParams=params;  }  return this;}  }
class C{  public static IPackageFragmentRoot addClassFolder(IJavaProject jproject,String containerName,IPath sourceAttachPath,IPath sourceAttachRoot) throws CoreException {  IProject project=jproject.getProject();  IContainer container=null;  if (containerName == null || containerName.length() == 0) {    container=project;  } else {    IFolder folder=project.getFolder(containerName);    if (!folder.exists()) {      CoreUtility.createFolder(folder,false,true,null);    }    container=folder;  }  IClasspathEntry cpe=JavaCore.newLibraryEntry(container.getFullPath(),sourceAttachPath,sourceAttachRoot);  addToClasspath(jproject,cpe);  return jproject.getPackageFragmentRoot(container);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  private boolean isUsedTileset(final Map map,final TileSet tileset){  for (final Iterator<?> tiles=tileset.iterator(); tiles.hasNext(); ) {    final Tile tile=(Tile)tiles.next();    for (    final MapLayer layer : map) {      if ((layer instanceof TileLayer) && (((TileLayer)layer).isUsed(tile))) {        return true;      }    }  }  return false;}  }
class C{  private void doReuseDOI(DOI doi,Resource resource){  resource.setDoi(doi);  resource.setDoiOrganisationKey(registrationManager.findPrimaryDoiAgencyAccount().getKey());  resource.setIdentifierStatus(IdentifierStatus.PUBLIC_PENDING_PUBLICATION);  resource.updateAlternateIdentifierForDOI();  resource.updateCitationIdentifierForDOI();  saveResource();  String msg=getText("manage.overview.publishing.doi.reserve.reused",new String[]{doi.toString()});  LOG.info(msg);  addActionMessage(msg);}  }
class C{  public static void addClassFactory(ClassFactory classFactory){  getUserClassFactories().add(classFactory);}  }
class C{  public List<SNMPTriple> querySingleSNMPEntryByOID(String oid) throws IOException {  if (oid == null || oid.isEmpty())   return null;  if (!oid.startsWith("."))   oid="." + oid;  List<SNMPTriple> snmpList=new ArrayList<SNMPTriple>();  Map<OID,String> res=get(new OID[]{new OID(oid)});  if (res != null) {    for (    Map.Entry<OID,String> e : res.entrySet()) {      snmpList.add(new SNMPTriple(e.getKey().toString(),"",e.getValue()));    }  }  return snmpList;}  }
class C{  private void verifyOneofContainingType(OneofDescriptor oneof){  if (oneof.getContainingType() != type) {    throw new IllegalArgumentException("OneofDescriptor does not match message type.");  }}  }
class C{  private static void removeHOVs(){  HashSet<Id> linksToRemove=new HashSet<Id>();  for (  Link i : network.getLinks().values()) {    Link L=(Link)i;    if (NetworkUtils.getType(L).equals("HOV") || NetworkUtils.getType(L).equals("HOV transfer")) {      linksToRemove.add(L.getId());    }  }  for (  Id i : linksToRemove) {    network.removeLink(i);  }  HashSet<Id> nodesToRemove=new HashSet<Id>();  for (  Node n : network.getNodes().values())   if (n.getInLinks().size() == 0 && n.getOutLinks().size() == 0)   nodesToRemove.add(n.getId());  for (  Id i : nodesToRemove)   network.removeNode(i);}  }
class C{  public boolean userCanViewArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int acsId;  int archMgrId=Defs.NULL_ID;  ArchivesTable table=new ArchivesTable();  LdapUsersTable usrTable=new LdapUsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),table.getAcsIdArchHdrColName(),table.getLoadArchIdQual(archId));    archMgrId=DbSelectFns.selectLongInteger(dbConn,usrTable.getOwnershipTableName(),usrTable.getOwnerIdColumnName(),usrTable.getLoadOwnerIdQual(acsId));    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,archMgrId,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public boolean isSetScope(){  return this.scope != null;}  }
class C{  private void updateIdealPoint(Solution solution){  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));  }}  }
class C{  public void addPreferredAuthPolicy(String policyUri){  String policies=getPreferredAuthPolicies();  if (policies == null || policies.length() == 0)   setPreferredAuthPolicies(policyUri); else   setPreferredAuthPolicies(policies + " " + policyUri);}  }
class C{  private void assertLayout(Integer... expectedLayout){  toggleMenu();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  j2DClient.get().clearGameLog();  return true;}  }
class C{  public static void writeString(OutputStream out,Charset charset,String value) throws IOException {  Writer writer=new OutputStreamWriter(out,charset);  String nl=System.getProperty("line.separator");  int r=0;  while (r < value.length()) {    int i=value.indexOf("\n",r);    if (i == -1) {      break;    }    writer.write(value.substring(r,i));    writer.write(nl);    r=i + 1;  }  writer.write(value.substring(r));  writer.close();}  }
class C{  public void writeR820TRegister(Register register,byte value,boolean controlI2C) throws UsbException {  if (register.isMasked()) {    int current=mShadowRegister[register.getRegister()];    value=(byte)((current & ~register.getMask()) | (value & register.getMask()));  }  writeI2CRegister(mDeviceHandle,mI2CAddress,(byte)register.getRegister(),value,controlI2C);  mShadowRegister[register.getRegister()]=value;}  }
class C{  public Timer schedule(int refreshRateInMs){  Timer timer=new Timer(JamonDataPersisterTimerTask.class.getSimpleName() + "-saveJamonData");  timer.scheduleAtFixedRate(this,refreshRateInMs,refreshRateInMs);  return timer;}  }
class C{  public static UpdateTicker.ThreadTicker threadTicker(){  return instance.threadTicker;}  }
class C{  public PermissionCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.914 -0500",hash_original_method="9F84EE545D7A893B2BE12E7FDE7E048D",hash_generated_method="3550118099D2274DF1E233703CE4A395") private void updatePacketRecvAddress(DatagramPacket packet){  packet.setAddress(connectedAddress);  packet.setPort(connectedPort);}  }
class C{  public RegressionResult(boolean zeroInterceptAssumed,String[] regressorNames,int n,double[] b,double[] t,double[] p,double[] se,double r2,double rss,double alpha,TetradVector yHat,TetradVector res){  if (regressorNames == null) {    throw new NullPointerException();  }  if (b == null) {    throw new NullPointerException();  }  if (t == null) {    throw new NullPointerException();  }  if (p == null) {    throw new NullPointerException();  }  if (se == null) {    throw new NullPointerException();  }  this.zeroInterceptAssumed=zeroInterceptAssumed;  this.regressorNames=regressorNames;  this.n=n;  this.b=b;  this.t=t;  this.p=p;  this.se=se;  this.r2=r2;  this.alpha=alpha;  this.rss=rss;  this.yHat=yHat;  this.res=res;}  }
class C{  public BusinessObjectDefinitionTagEntity createBusinessObjectDefinitionTagEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,TagEntity tagEntity){  BusinessObjectDefinitionTagEntity businessObjectDefinitionTagEntity=new BusinessObjectDefinitionTagEntity();  businessObjectDefinitionTagEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectDefinitionTagEntity.setTag(tagEntity);  return businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionTagEntity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:47.707 -0500",hash_original_method="936283CC8EFD34F7D7362628995C0399",hash_generated_method="04666F3055631A388E7245104E27551E") public void fillInNotifierBundle(Bundle m){  m.putInt("GsmSignalStrength",mGsmSignalStrength);  m.putInt("GsmBitErrorRate",mGsmBitErrorRate);  m.putInt("CdmaDbm",mCdmaDbm);  m.putInt("CdmaEcio",mCdmaEcio);  m.putInt("EvdoDbm",mEvdoDbm);  m.putInt("EvdoEcio",mEvdoEcio);  m.putInt("EvdoSnr",mEvdoSnr);  m.putInt("LteSignalStrength",mLteSignalStrength);  m.putInt("LteRsrp",mLteRsrp);  m.putInt("LteRsrq",mLteRsrq);  m.putInt("LteRssnr",mLteRssnr);  m.putInt("LteCqi",mLteCqi);  m.putBoolean("isGsm",Boolean.valueOf(isGsm));}  }
class C{  public CircularWallForce(float gravConst,float x,float y,float r){  params=new float[]{gravConst};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT};  this.x=x;  this.y=y;  this.r=r;}  }
class C{  public void editText(VisualItem item,String attribute,Rectangle r){  if (m_editing) {    stopEditing();  }  String txt=item.getString(attribute);  m_editItem=item;  m_editAttribute=attribute;  Color tc=ColorLib.getColor(item.getTextColor());  Color fc=ColorLib.getColor(item.getFillColor());  m_editor.setForeground(tc);  m_editor.setBackground(fc);  editText(txt,r);}  }
class C{  public void init(int numDataSources){  if (dataset == null) {    dataset=new XYSeriesCollection();    dataset.addSeries(new XYSeries("Data",false,true));  }  if (numDataSources == -1) {    projector=new Projector();  } else {    projector=new Projector(numDataSources);  }  fireChartInitialized(projector.getDimensions());  resetData();  addListeners();}  }
class C{  private ClobImpl(String data){  stringData=data;}  }
class C{  private long readTimeStamp(byte[] buffer,int offset){  long seconds=read32(buffer,offset);  long fraction=read32(buffer,offset + 4);  return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);}  }
class C{  public Iterator<BuildStep> iterator(){  return Collections.unmodifiableList(mStepList).iterator();}  }
class C{  public void createLogicalPort(LogicalPortCreateSpec spec,FutureCallback<LogicalPort> responseCallback) throws IOException {  postAsync(LOGICAL_PORTS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalPort>(){  },responseCallback);}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public boolean isDrawFilledEnabled(){  return mDrawFilled;}  }
class C{  public T caseAbstractCatchBlock(AbstractCatchBlock object){  return null;}  }
class C{  final public boolean scanTail(final int nscan,final T ref){  if (nscan <= 0)   throw new IllegalArgumentException();  if (ref == null)   throw new IllegalArgumentException();  for (int n=0, i=tail; n < nscan; n++) {    if (ref == refs[i])     return true;    i=(i + 1) % capacity;  }  return false;}  }
class C{  public static String formatQuantity(double quantity){  return quantityDecimalFormat.format(quantity);}  }
class C{  protected void fireActionPerformed(){  Object[] listeners=listenerList.getListenerList();  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,(command != null) ? command : getText(),EventQueue.getMostRecentEventTime(),modifiers);  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return KEYS;default :return null;}}  }
class C{  public void writeText(char text[],int off,int len) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  if (off < 0 || off > text.length || len < 0 || len > text.length) {    throw new IndexOutOfBoundsException();  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text,off,len);  } else {    HtmlUtils.writeText(writer,true,true,buffer,text,off,len);  }}  }
class C{  @Override public void draw(Graphics2D g2,XYPlot plot,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,int rendererIndex,PlotRenderingInfo info){  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  float anchorX=(float)domainAxis.valueToJava2D(this.x,dataArea,domainEdge);  float anchorY=(float)rangeAxis.valueToJava2D(this.y,dataArea,rangeEdge);  if (orientation == PlotOrientation.HORIZONTAL) {    float tempAnchor=anchorX;    anchorX=anchorY;    anchorY=tempAnchor;  }  g2.setFont(getFont());  Shape hotspot=TextUtilities.calculateRotatedStringBounds(getText(),g2,anchorX,anchorY,getTextAnchor(),getRotationAngle(),getRotationAnchor());  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(hotspot);  }  g2.setPaint(getPaint());  TextUtilities.drawRotatedString(getText(),g2,anchorX,anchorY,getTextAnchor(),getRotationAngle(),getRotationAnchor());  if (this.outlineVisible) {    g2.setStroke(this.outlineStroke);    g2.setPaint(this.outlinePaint);    g2.draw(hotspot);  }  String toolTip=getToolTipText();  String url=getURL();  if (toolTip != null || url != null) {    addEntity(info,hotspot,rendererIndex,toolTip,url);  }}  }
class C{  public int hashCode(){  return root.hashCode();}  }
class C{  public void addProcessInteractionListener(final ProcessInteractionListener l){  if (l == null) {    throw new IllegalArgumentException("l must not be null!");  }  processInteractionListeners.add(l);}  }
class C{  public synchronized void addAPI(SQLiteDatabase db,String id,String name,String url,String readonlyurl,String notesurl,String user,String pass,String preset,boolean showicon,boolean oauth){  ContentValues values=new ContentValues();  values.put("id",id);  values.put("name",name);  values.put("url",url);  values.put("readonlyurl",readonlyurl);  values.put("notesurl",notesurl);  values.put("user",user);  values.put("pass",pass);  values.put("preset",preset);  values.put("showicon",showicon ? 1 : 0);  values.put("oauth",oauth ? 1 : 0);  db.insert("apis",null,values);}  }
class C{  public void initializeLocalComment(final List<IComment> comments){  m_edge.initializeLocalComment(comments);}  }
