class C{  @SideEffectFree public void log(Level level,@Nullable String msg,@Nullable Object params[]){  throw new RuntimeException();}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,String lineEnd){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER,lineEnd);}  }
class C{  protected SprogSlot findFree(){  for (  SprogSlot s : slots) {    if (s.isFree()) {      if (log.isDebugEnabled()) {        log.debug("Found free slot " + s.getSlotNumber());      }      return s;    }  }  return (null);}  }
class C{  private double toWidth(IXMLElement elem,String str) throws IOException {  return toLength(elem,str,viewportStack.peek().widthPercentFactor);}  }
class C{  public void testCase19(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=-1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord){  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  public DistributionSetFilter build(){  return new DistributionSetFilter(this);}  }
class C{  final ElemContext push(final String uri,final String localName,final String qName){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_elementName=qName;  frame.m_elementLocalName=localName;  frame.m_elementURI=uri;  frame.m_isCdataSection=false;  frame.m_startTagOpen=true;  return frame;}  }
class C{  public ClusteringResultContentEvent(Clustering clustering,boolean isLast){  this.clustering=clustering;  this.isLast=isLast;}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return true;  }}  }
class C{  private static void readOp(byte[] outBuffer,int dst_buff_offset,int count,byte[] srcBuffer,int read_pos,int buff_len){  if (read_pos + count <= buff_len) {    System.arraycopy(srcBuffer,read_pos,outBuffer,dst_buff_offset,count);  } else {    int tillEndCount=buff_len - read_pos;    System.arraycopy(srcBuffer,read_pos,outBuffer,dst_buff_offset,tillEndCount);    int fromStartCount=count - tillEndCount;    System.arraycopy(srcBuffer,0,outBuffer,dst_buff_offset + tillEndCount,fromStartCount);  }}  }
class C{  public void mouseClicked(int p_146192_1_,int p_146192_2_,int p_146192_3_){  boolean var4=p_146192_1_ >= xPosition && p_146192_1_ < xPosition + width && p_146192_2_ >= yPosition && p_146192_2_ < yPosition + height;  if (canLoseFocus)   setFocused(var4);  if (isFocused && var4 && p_146192_3_ == 0) {    int var5=p_146192_1_ - xPosition;    if (enableBackgroundDrawing)     var5-=4;    String var6=fontRendererInstance.trimStringToWidth(text.substring(lineScrollOffset),getWidth());    setCursorPosition(fontRendererInstance.trimStringToWidth(var6,var5).length() + lineScrollOffset);  }}  }
class C{  protected void breedPopChunk(Population newpop,EvolutionState state,int[] numinds,int[] from,int threadnum){  for (int subpop=0; subpop < newpop.subpops.length; subpop++) {    if (!shouldBreedSubpop(state,subpop,threadnum)) {      for (int ind=from[subpop]; ind < numinds[subpop] - from[subpop]; ind++)       newpop.subpops[subpop].individuals[ind]=state.population.subpops[subpop].individuals[ind];    } else {      BreedingPipeline bp=null;      if (clonePipelineAndPopulation)       bp=(BreedingPipeline)newpop.subpops[subpop].species.pipe_prototype.clone(); else       bp=(BreedingPipeline)newpop.subpops[subpop].species.pipe_prototype;      int x;      if (!bp.produces(state,newpop,subpop,threadnum))       state.output.fatal("The Breeding Pipeline of subpopulation " + subpop + " does not produce individuals of the expected species "+ newpop.subpops[subpop].species.getClass().getName()+ " or fitness "+ newpop.subpops[subpop].species.f_prototype);      bp.prepareToProduce(state,subpop,threadnum);      x=from[subpop];      int upperbound=from[subpop] + numinds[subpop];      while (x < upperbound)       x+=bp.produce(1,upperbound - x,x,subpop,newpop.subpops[subpop].individuals,state,threadnum);      if (x > upperbound)       state.output.fatal("Whoa!  A breeding pipeline overwrote the space of another pipeline in subpopulation " + subpop + ".  You need to check your breeding pipeline code (in produce() ).");      bp.finishProducing(state,subpop,threadnum);    }  }}  }
class C{  public LocalDateTime withMinuteOfHour(int minute){  return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(),minute));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.WITH_STATEMENT__EXPRESSION:    return expression != null;case N4JSPackage.WITH_STATEMENT__STATEMENT:  return statement != null;}return super.eIsSet(featureID);}  }
class C{  @HttpUrl("^/clientinfo/(*)/$") public void clientDetails(int clientId) throws SQLException {}  }
class C{  public Collection<Tuple2<TransitionState,Double>> startStates(){  List<Tuple2<TransitionState,Double>> result=new ArrayList<Tuple2<TransitionState,Double>>();{    double score=Math.log(LINE_MRGN_PROB);    addNoSubGlyphStartState(result,new int[0],TransitionStateType.LMRGN,-1,score);  }  for (int destLanguage=0; destLanguage < numLanguages; ++destLanguage) {    SingleLanguageModel destLM=lm.get(destLanguage);    double destLanguagePrior=lm.languagePrior(destLanguage);    for (    int c : destLM.getActiveCharacters()) {      if (c != spaceCharIndex) {        double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(getNgramProb(destLM,new int[0],c)) + Math.log(destLanguagePrior);        addGlyphStartStates(result,c,new int[]{c},TransitionStateType.TMPL,destLanguage,score);      }    }  }{    double totalSpaceProb=0.0;    for (int language=0; language < numLanguages; ++language)     totalSpaceProb+=getNgramProb(lm.get(language),new int[0],spaceCharIndex) * lm.languagePrior(language);    double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(totalSpaceProb);    addNoSubGlyphStartState(result,new int[]{spaceCharIndex},TransitionStateType.TMPL,-1,score);  }  return result;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof OVector))   return false;  OVector v=(OVector)o;  return size == v.size && Arrays.equals(vector,v.vector);}  }
class C{  public static boolean isDefaultJournalSyncNonTransactional(){  return DEFAULT_JOURNAL_SYNC_NON_TRANSACTIONAL;}  }
class C{  public void removeForward(int localPort,int remotePort) throws TimeoutException, AdbCommandRejectedException, IOException {  AdbHelper.removeForward(AndroidDebugBridge.getSocketAddress(),this,String.format("tcp:%d",localPort),String.format("tcp:%d",remotePort));}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethodWithCharSequenceParameter(){  CharSequence errorMessage="errorMessage";  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=DisjunctiveValidator.create(errorMessage,validators);  assertEquals(errorMessage,disjunctiveValidator.getErrorMessage());  assertEquals(validators,disjunctiveValidator.getValidators());}  }
class C{  @SuppressWarnings("unused") protected void storeToken(@NonNull Account account,@NonNull String tokenType,@NonNull String token){  storeToken(account,tokenType,token,null);}  }
class C{  protected void sequence_DecimalEscapeSequence_Term(ISerializationContext context,DecimalEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.DECLARATION;}  }
class C{  private static void executeTransaction(IgniteCache<Long,Person> cache){  try (Transaction tx=Ignition.ignite().transactions().txStart()){    Person val=cache.get(id);    System.out.println("Read value: " + val);    val=cache.getAndPut(id,new Person(id,"Isaac","Newton"));    System.out.println("Overwrote old value: " + val);    val=cache.get(id);    System.out.println("Read value: " + val);    tx.commit();  }   System.out.println("Read value after commit: " + cache.get(id));}  }
class C{  public void validateExport(VideoEditor videoEditor,String fileName,int export_height,int startTime,long endTime,int vCodec,int aCodec){  File tempFile=new File(fileName);  assertEquals("Exported FileName",tempFile.exists(),true);  final MediaVideoItem mvi=createMediaItem(videoEditor,"m1",fileName,MediaItem.RENDERING_MODE_BLACK_BORDER);  Log.i(TAG,"VideoCodec for file = " + fileName + "\tExpected Video Codec = "+ vCodec+ "\tActual Video Codec = "+ mvi.getVideoType());  assertEquals("Export: Video Codec Mismatch for file = " + fileName + "\t<expected> "+ vCodec+ "\t<actual> "+ mvi.getVideoType(),vCodec,mvi.getVideoType());  Log.i(TAG,"Height for file = " + fileName + "\tExpected Height = "+ export_height+ "\tActual VideoHeight = "+ mvi.getHeight());  assertEquals("Export height Mismatch for file " + fileName + "\t<expected> "+ export_height+ "\t<actual> "+ mvi.getHeight(),export_height,mvi.getHeight());  if (startTime == 0) {    if (endTime != 0) {      Log.i(TAG,"TimeLine Expected = " + (startTime + endTime) + "\t VideoTime= "+ mvi.getTimelineDuration());      assertTrue("Timeline Duration Mismatch for file " + fileName + "<expected> "+ (startTime + endTime)+ "\t<actual> "+ mvi.getTimelineDuration(),checkRange((startTime + endTime),mvi.getTimelineDuration(),10));    }  } else {    Log.i(TAG,"TimeLine Expected = " + (endTime - startTime) + "\t VideoTime= "+ mvi.getTimelineDuration());    assertTrue("Timeline Duration Mismatch for file " + fileName + "<expected> "+ (endTime - startTime)+ "\t<actual> "+ mvi.getTimelineDuration(),checkRange((endTime - startTime),(int)mvi.getTimelineDuration(),10));  }}  }
class C{  private double toDouble(IXMLElement elem,String value) throws IOException {  return toDouble(elem,value,0,Double.MIN_VALUE,Double.MAX_VALUE);}  }
class C{  public TechRoll waitForTech(){  return m_techPanel.waitForTech();}  }
class C{  public boolean match(BooleanLiteral node,Object other){  if (!(other instanceof BooleanLiteral)) {    return false;  }  BooleanLiteral o=(BooleanLiteral)other;  return node.booleanValue() == o.booleanValue();}  }
class C{  public SequenceIndex(final int seqLength){  mBins=new TreeMap<>();  mLinearIndex=new long[(seqLength / LINEAR_INTERVAL) + 1];}  }
class C{  public String dump(){  return "DS:" + dsName + ":"+ dsType+ ":"+ heartbeat+ ":"+ Util.formatDouble(minValue,"U",false)+ ":"+ Util.formatDouble(maxValue,"U",false);}  }
class C{  public ChartView(){  super();}  }
class C{  public int size(){  return sizes.size();}  }
class C{  public void nodeChanged(boolean save,int keyID,String name,String description,boolean isSummary,String imageIndicator){  if (tree == null)   return;  if (keyID == 0)   return;  SimpleTreeModel model=(SimpleTreeModel)tree.getModel();  SimpleTreeNode root=model.getRoot();  SimpleTreeNode node=model.find(null,keyID);  if (node == null && save) {    MTreeNode rootData=(MTreeNode)root.getData();    MTreeNode mTreeNode=new MTreeNode(keyID,0,name,description,rootData.getNode_ID(),isSummary,imageIndicator,false,null);    SimpleTreeNode newNode=new SimpleTreeNode(mTreeNode,null);    model.addNode(root,newNode,0);    int[] path=model.getPath(model.getRoot(),newNode);    Treeitem ti=tree.renderItemByPath(path);    tree.setSelectedItem(ti);  } else   if (node != null && save) {    MTreeNode mTreeNode=(MTreeNode)node.getData();    mTreeNode.setName(name);    mTreeNode.setAllowsChildren(isSummary);    int[] path=model.getPath(model.getRoot(),node);    Treeitem ti=tree.renderItemByPath(path);    tree.setSelectedItem(ti);  } else   if (node != null && !save) {    model.removeNode(node);  } else {    node=null;  }  if (node == null)   return;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.656 -0500",hash_original_method="9E74C322CF79FFEBE378AFAB98D56D96",hash_generated_method="AD43DA09B8F6BB6058A22755BDBA989F") public boolean isNaN(){  return isNaN(value);}  }
class C{  private void updateLtp(SingleChannelElement sce){  IndividualChannelStream ics=sce.ics;  float saved[]=sce.saved;  float savedLtp[]=sce.coeffs;  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {    System.arraycopy(saved,0,savedLtp,0,512);    Arrays.fill(savedLtp,576,576 + 448,0f);    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);    for (int i=0; i < 64; i++) {      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];    }  } else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);    Arrays.fill(savedLtp,576,576 + 448,0f);    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);    for (int i=0; i < 64; i++) {      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];    }  } else {    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);    for (int i=0; i < 512; i++) {      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];    }  }  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);}  }
class C{  protected SystemMember findCacheOrAppVmById(String memberId){  SystemMember found=null;  if (memberId != null) {    try {      boolean foundSender=false;      CacheVm[] cacheVms=getCacheVms();      if (cacheVms != null) {        for (        CacheVm cacheVm : cacheVms) {          if (cacheVm.getId().equals(memberId) && cacheVm instanceof CacheVm) {            found=(SystemMember)cacheVm;            foundSender=true;            break;          }        }      }      if (!foundSender) {        SystemMember[] appVms=getSystemMemberApplications();        for (        SystemMember appVm : appVms) {          if (appVm.getId().equals(memberId) && appVm instanceof SystemMember) {            found=(SystemMember)appVm;            foundSender=true;            break;          }        }      }    } catch (    AdminException e) {      if (logger.isDebugEnabled()) {        logger.debug("Could not find System Member for member id: {}",memberId,e);      }    }  }  return found;}  }
class C{  public SetupPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  public boolean isSetVertwo3000(){  return this.vertwo3000 != null;}  }
class C{  public static BigDecimalUtilsCalculation calculate(int value){  return new BigDecimalUtilsCalculation(value);}  }
class C{  public final String relationName(){  return m_RelationName;}  }
class C{  public Matrix4x3d rotation(double angle,Vector3dc axis){  return rotation(angle,axis.x(),axis.y(),axis.z());}  }
class C{  public boolean isShowAxes(){  return mShowAxes;}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethodWithContextAndResourceIdParameters(){  CharSequence errorMessage=getContext().getText(android.R.string.cancel);  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  ConjunctiveValidator<Object> conjunctiveValidator=ConjunctiveValidator.create(getContext(),android.R.string.cancel,validators);  assertEquals(errorMessage,conjunctiveValidator.getErrorMessage());  assertEquals(validators,conjunctiveValidator.getValidators());}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public String toString(){  return " at " + index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public static CipherParameters makePBEMacParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  param=generator.generateDerivedMacParameters(pbeKey.getKeySize());  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public R1Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet,UtilityFunction utilityFunction){  this(problem,subdivisions,referenceSet,utilityFunction,DEFAULT_EPSILON);}  }
class C{  public int constrain(int size,float refValue,ContainerWrapper parent){  if (max != null)   size=Math.min(size,max.getPixels(refValue,parent,parent));  if (min != null)   size=Math.max(size,min.getPixels(refValue,parent,parent));  return size;}  }
class C{  public void actionPerformed(ActionEvent evt){  panel.getSharedContext().setDebug_draw_inline_boxes(!panel.getSharedContext().debugDrawInlineBoxes());  panel.repaint();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  return "class \"" + value + "\"";}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.IF_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.IF_STATEMENT__IF_STMT:setIfStmt((Statement)newValue);return;case N4JSPackage.IF_STATEMENT__ELSE_STMT:setElseStmt((Statement)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String encodePath(String path){  return encodePath(path,true);}  }
class C{  public static void splitCriticalEdges(IR ir){  Enumeration<BasicBlock> e=ir.getBasicBlocks();  while (e.hasMoreElements()) {    BasicBlock b=e.nextElement();    int numberOfIns=b.getNumberOfIn();    if (b.isExceptionHandlerBasicBlock() || numberOfIns <= 1) {      continue;    }    BasicBlock[] ins=new BasicBlock[numberOfIns];    Enumeration<BasicBlock> ie=b.getIn();    for (int i=0; i < numberOfIns; ++i) {      ins[i]=ie.nextElement();    }    for (int i=0; i < numberOfIns; ++i) {      BasicBlock a=ins[i];      if (a.getNumberOfOut() <= 1) {        continue;      }      BasicBlock landingPad;      Instruction firstInB=b.firstInstruction();      int bcIndex=firstInB != null ? firstInB.getBytecodeIndex() : -1;      landingPad=b.createSubBlock(bcIndex,ir);      landingPad.setLandingPad();      landingPad.setExecutionFrequency(edgeFrequency(a,b));      Instruction g;      g=Goto.create(GOTO,b.makeJumpTarget());      landingPad.appendInstruction(g);      landingPad.recomputeNormalOut(ir);      a.redirectOuts(b,landingPad,ir);      a.killFallThrough();      BasicBlock aNext=a.nextBasicBlockInCodeOrder();      if (aNext != null) {        ir.cfg.breakCodeOrder(a,aNext);        ir.cfg.linkInCodeOrder(landingPad,aNext);      }      ir.cfg.linkInCodeOrder(a,landingPad);    }  }}  }
class C{  public static String readLine(InputStream in,String charset) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  while (true) {    int b=in.read();    if (b == -1) {      if (baos.size() == 0) {        return null;      } else {        break;      }    }    if (b == '\n') {      break;    }    if (b != '\r') {      baos.write(b);      continue;    }    int b2=in.read();    if (b2 == -1) {      baos.write(b);      break;    }    if (b2 == '\n') {      break;    }    baos.write(b);    baos.write(b2);  }  return baos.toString(charset);}  }
class C{  void addChangeListener(ChangeListener changeListener){  this.changeListeners.add(changeListener);}  }
class C{  public HostParams(final HttpParams defaults){  super(defaults);}  }
class C{  protected V13Database(WireDatabaseConnection connection,ProtocolDescriptor descriptor){  super(connection,descriptor);}  }
class C{  public void register(Schedule schedule){  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.put(schedule.getId(),schedule);  int id=Integer.parseInt(schedule.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:35.629 -0500",hash_original_method="DB04742794ECD07699F134042784BBAE",hash_generated_method="995FB47B2ED1ADE79D1CFC3C7747B4D2") public void dismiss(){  dismissInternal(false);}  }
class C{  public SolrClusterOptions(String clusterName,Integer clusterSize){  this.clusterName=clusterName;  if (clusterSize == null) {    this.clusterSize=FREE_CLUSTER_SIZE;  } else {    Validator.isTrue((clusterSize > 0),"clusterSize cannot be lower than 0");    this.clusterSize=clusterSize.toString();  }}  }
class C{  public void addStatementEventListener(StatementEventListener listener){  statementEventListeners.add(listener);}  }
class C{  @Override protected void sendFunctionGroup2(){  XNetMessage msg=XNetMessage.getFunctionGroup2OpsMsg(this.getDccAddress(),f5,f6,f7,f8);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  private JPanel createPresetPanel(){  final int numButtons=3;  buttonWithTextForm[] buttons=new buttonWithTextForm[numButtons];  final ButtonGroup group=new ButtonGroup();  JButton generateButton;  buttons[0]=new buttonWithTextForm(new TextForm("Generator Seed: ",20),new JRadioButton("Captains Log"));  buttons[1]=new buttonWithTextForm(new JRadioButton("Annotation"));  buttons[2]=new buttonWithTextForm(new TextForm("Coherency Threshold: ",20),new JRadioButton("Treknobabble (Experimental)"));  buttons[2].setToolTipText("This is an experimental work in progress, \n " + "but it seems to be generating more interesting things than the other settings.\n");  for (  buttonWithTextForm buttonWithForm : buttons) {    group.add(buttonWithForm.button);  }  buttons[0].button.setSelected(true);  generateButton=new JButton("Begin Generating");  generateButton.addActionListener(null);  JPanel box=new JPanel();  JLabel label=new JLabel(presetPanelDescription + ":");  box.setLayout(new BoxLayout(box,BoxLayout.PAGE_AXIS));  box.add(label);  for (  buttonWithTextForm button : buttons)   box.add(button);  JPanel pane=new JPanel(new BorderLayout());  pane.add(box,BorderLayout.PAGE_START);  pane.add(generateButton,BorderLayout.PAGE_END);  return pane;}  }
class C{  protected boolean remove(Object s){  boolean found=false;  for (int i=0; i < sensorImage.size(); i++) {    if (s == sensorImage.get(i)) {      sensorImage.remove(i);      found=true;      break;    }  }  for (int i=0; i < sensorList.size(); i++) {    if (s == sensorList.get(i)) {      sensorList.remove(i);      found=true;      break;    }  }  for (int i=0; i < backgroundImage.size(); i++) {    if (s == backgroundImage.get(i)) {      backgroundImage.remove(i);      found=true;      break;    }  }  for (int i=0; i < memoryLabelList.size(); i++) {    if (s == memoryLabelList.get(i)) {      memoryLabelList.remove(i);      found=true;      break;    }  }  for (int i=0; i < blockContentsLabelList.size(); i++) {    if (s == blockContentsLabelList.get(i)) {      blockContentsLabelList.remove(i);      found=true;      break;    }  }  for (int i=0; i < signalList.size(); i++) {    if (s == signalList.get(i)) {      signalList.remove(i);      found=true;      break;    }  }  for (int i=0; i < signalMastList.size(); i++) {    if (s == signalMastList.get(i)) {      if (removeSignalMast((SignalMastIcon)s)) {        signalMastList.remove(i);        found=true;        break;      } else {        return false;      }    }  }  for (int i=0; i < multiSensors.size(); i++) {    if (s == multiSensors.get(i)) {      multiSensors.remove(i);      found=true;      break;    }  }  for (int i=0; i < clocks.size(); i++) {    if (s == clocks.get(i)) {      clocks.remove(i);      found=true;      break;    }  }  for (int i=0; i < signalHeadImage.size(); i++) {    if (s == signalHeadImage.get(i)) {      signalHeadImage.remove(i);      found=true;      break;    }  }  for (int i=0; i < labelImage.size(); i++) {    if (s == labelImage.get(i)) {      labelImage.remove(i);      found=true;      break;    }  }  super.removeFromContents((Positionable)s);  if (found) {    setDirty(true);    repaint();  }  return found;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  return decodeSampledBitmapFromResource(res,resId,reqWidth,reqHeight,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Pair(T[] values){  if (values == null)   throw new IllegalArgumentException("Input array cannot be null");  if (values.length == 2) {    if (values[0] == null || values[1] == null)     throw new IllegalArgumentException("Pair cannot contain null values");    first=values[0];    second=values[1];  } else   throw new IllegalArgumentException("Pair may only be created from an " + "array of 2 elements");}  }
class C{  public DateTimeFormatterBuilder(){  super();  iElementPairs=new ArrayList<Object>();}  }
class C{  public WriteRequestWrapper(WriteRequest parentRequest){  if (parentRequest == null) {    throw new IllegalArgumentException("parentRequest");  }  this.parentRequest=parentRequest;}  }
class C{  @Override public synchronized int read() throws IOException {  byte[] localBuf=buf;  InputStream localIn=in;  if (localBuf == null || localIn == null) {    throw streamClosed();  }  if (pos >= count && fillbuf(localIn,localBuf) == -1) {    return -1;  }  if (localBuf != buf) {    localBuf=buf;    if (localBuf == null) {      throw streamClosed();    }  }  if (count - pos > 0) {    return localBuf[pos++] & 0xFF;  }  return -1;}  }
class C{  public Bus(){  this(DEFAULT_IDENTIFIER);}  }
class C{  public static long[] toLongArray(Boolean[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  public void enableMotor(boolean flag){  joint.enableMotor(flag);}  }
class C{  protected String escape(String s){  StringBuffer result;  int i;  result=new StringBuffer();  for (i=0; i < s.length(); i++) {    if ((s.charAt(i) == '(') || (s.charAt(i) == ')')) {      result.append('\\');    }    result.append(s.charAt(i));  }  return result.toString();}  }
class C{  void onCancel(){  onUp();}  }
class C{  public UpdateRequest doc(Map source){  safeDoc().source(source);  return this;}  }
class C{  public boolean isManagingComponent(Control c){  return scrConstrMap.containsKey(c);}  }
class C{  public LimitTokenCountAnalyzer(Analyzer delegate,int maxTokenCount,boolean consumeAllTokens){  super(delegate.getReuseStrategy());  this.delegate=delegate;  this.maxTokenCount=maxTokenCount;  this.consumeAllTokens=consumeAllTokens;}  }
class C{  public String escapeString(String str){  try {    return URLEncoder.encode(str,"utf8").replaceAll("\\+","%20");  } catch (  UnsupportedEncodingException e) {    return str;  }}  }
class C{  public void doneLearning(){  prune(table);  prune(firstCapitalized);  prune(notFirstCapitalized);}  }
class C{  public CeylonRepoManagerBuilder remoteRepos(List<String> remoteRepos){  this.remoteRepos=remoteRepos;  return this;}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public void releaseAll(){  mEdgeGlowTop.onRelease();  mEdgeGlowBottom.onRelease();  mEdgeGlowLeft.onRelease();  mEdgeGlowRight.onRelease();}  }
class C{  public synchronized void warning(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.WARNING,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public void testMergeOneFilterIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));}  }
class C{  public WrongStaticAccessDescription(IEObjectDescription delegate,boolean staticAccess){  super(delegate);  this.staticAccess=staticAccess;}  }
class C{  public void increaseTimer(int time){  int newTime=timer + time;  if (newTime <= duration && newTime >= 0) {    timer=newTime;  } else {    timer=newTime < 0 ? 0 : duration;  }}  }
class C{  protected void addPredictionIntervals(){  int maxNum;  int num;  int i;  int n;  ArrayList<Prediction> preds;  ArrayList<Attribute> atts;  Instances data;  Instance inst;  Instance newInst;  double[] values;  double[][] predInt;  maxNum=0;  preds=m_Evaluation.predictions();  for (i=0; i < preds.size(); i++) {    num=((NumericPrediction)preds.get(i)).predictionIntervals().length;    if (num > maxNum) {      maxNum=num;    }  }  atts=new ArrayList<Attribute>();  for (i=0; i < m_PlotInstances.numAttributes(); i++) {    atts.add(m_PlotInstances.attribute(i));  }  for (i=0; i < maxNum; i++) {    atts.add(new Attribute("predictionInterval_" + (i + 1) + "-lowerBoundary"));    atts.add(new Attribute("predictionInterval_" + (i + 1) + "-upperBoundary"));    atts.add(new Attribute("predictionInterval_" + (i + 1) + "-width"));  }  data=new Instances(m_PlotInstances.relationName(),atts,m_PlotInstances.numInstances());  data.setClassIndex(m_PlotInstances.classIndex());  for (i=0; i < m_PlotInstances.numInstances(); i++) {    inst=m_PlotInstances.instance(i);    values=new double[data.numAttributes()];    System.arraycopy(inst.toDoubleArray(),0,values,0,inst.numAttributes());    predInt=((NumericPrediction)preds.get(i)).predictionIntervals();    for (n=0; n < maxNum; n++) {      if (n < predInt.length) {        values[m_PlotInstances.numAttributes() + n * 3 + 0]=predInt[n][0];        values[m_PlotInstances.numAttributes() + n * 3 + 1]=predInt[n][1];        values[m_PlotInstances.numAttributes() + n * 3 + 2]=predInt[n][1] - predInt[n][0];      } else {        values[m_PlotInstances.numAttributes() + n * 3 + 0]=Utils.missingValue();        values[m_PlotInstances.numAttributes() + n * 3 + 1]=Utils.missingValue();        values[m_PlotInstances.numAttributes() + n * 3 + 2]=Utils.missingValue();      }    }    newInst=new DenseInstance(inst.weight(),values);    data.add(newInst);  }  m_PlotInstances=data;}  }
class C{  protected Instances removeMissingColumns(Instances instances) throws Exception {  int numInstances=instances.numInstances();  StringBuffer deleteString=new StringBuffer();  int removeCount=0;  boolean first=true;  int maxCount=0;  for (int i=0; i < instances.numAttributes(); i++) {    AttributeStats as=instances.attributeStats(i);    if (m_upperBoundMinSupport == 1.0 && maxCount != numInstances) {      int[] counts=as.nominalCounts;      if (counts[Utils.maxIndex(counts)] > maxCount) {        maxCount=counts[Utils.maxIndex(counts)];      }    }    if (as.missingCount == numInstances) {      if (first) {        deleteString.append((i + 1));        first=false;      } else {        deleteString.append("," + (i + 1));      }      removeCount++;    }  }  if (m_verbose) {    System.err.println("Removed : " + removeCount + " columns with all missing "+ "values.");  }  if (m_upperBoundMinSupport == 1.0 && maxCount != numInstances) {    m_upperBoundMinSupport=(double)maxCount / (double)numInstances;    if (m_verbose) {      System.err.println("Setting upper bound min support to : " + m_upperBoundMinSupport);    }  }  if (deleteString.toString().length() > 0) {    Remove af=new Remove();    af.setAttributeIndices(deleteString.toString());    af.setInvertSelection(false);    af.setInputFormat(instances);    Instances newInst=Filter.useFilter(instances,af);    return newInst;  }  return instances;}  }
class C{  public ZkDataNode traverse() throws Exception {  try {    populate(znode);  } catch (  KeeperException e) {    throw new ZkDataTraversalException(ExceptionUtils.getFullStackTrace(e));  }catch (  InterruptedException e) {    throw new ZkDataTraversalException(ExceptionUtils.getFullStackTrace(e));  }  return znode;}  }
class C{  public OFInterfaceIPReplyVendorData(){  super(BSN_GET_INTERFACE_IP_REPLY);}  }
class C{  private void cancelRequest() throws XMPPException {  String errorMessage="Could not establish socket with any provided host";  XMPPError error=new XMPPError(XMPPError.Condition.item_not_found,errorMessage);  IQ errorIQ=IQ.createErrorResponse(this.bytestreamRequest,error);  this.manager.getConnection().sendPacket(errorIQ);  throw new XMPPException(errorMessage,error);}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public List<Tradestrategy> findAll(){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradestrategy> query=builder.createQuery(Tradestrategy.class);    Root<Tradestrategy> from=query.from(Tradestrategy.class);    query.select(from);    List<Tradestrategy> items=entityManager.createQuery(query).getResultList();    for (    Tradestrategy tradestrategy : items) {      tradestrategy.getTradingday().getCandles().size();      for (      TradeOrder tradeOrder : tradestrategy.getTradeOrders()) {        tradeOrder.getTradeOrderfills().size();      }    }    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.089 -0500",hash_original_method="57E1AB7C57BAD02879F9C8B9B633558A",hash_generated_method="DC2A41AA03DCB667D877296C574623AC") public void endData(){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.endData(): url: " + url());  }  sendMessageInternal(obtainMessage(MSG_CONTENT_FINISHED));}  }
class C{  void finish(){  finished=true;}  }
class C{  public boolean isQuiesced(){  return quiesced;}  }
class C{  private String buildToolTip(final NaviNode node){  final ZyLabelContent content=node.getRealizer().getNodeContent();  return HtmlGenerator.getHtml(content,GuiHelper.getMonospaceFont(),true);}  }
class C{  public HashChainBuilder(String hashAlgorithm) throws Exception {  this.hashAlgorithm=hashAlgorithm;  hashAlgorithmUri=getDigestAlgorithmURI(hashAlgorithm);  marshaller=jaxbCtx.createMarshaller();  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);}  }
class C{  public Executor distributeOn(int numberOfThreads){  if (numberOfThreads <= 0) {    throw new IllegalArgumentException("invalid number of threads");  }  this.numberOfThreads=numberOfThreads;  return this;}  }
class C{  public WebsocketFacesListener(Integer port,String channel,String uri,String functions,ValueExpression connectedExpression){  this.port=port;  this.channel=channel;  this.uri=uri;  this.functions=functions;  this.connectedExpression=connectedExpression;}  }
class C{  public static boolean nextBoolean(){  wasAccessed=true;  return nextInt(1) != 0;}  }
class C{  public void testRouterFactory() throws Exception {  try {    System.setProperty(IGNITE_JETTY_PORT,String.valueOf(GRID_HTTP_PORT));    try {      startGrid();    }  finally {      System.clearProperty(IGNITE_JETTY_PORT);    }    final int size=20;    final Collection<GridTcpRouter> tcpRouters=new ArrayList<>(size);    final GridTcpRouterConfiguration tcpCfg=new GridTcpRouterConfiguration();    tcpCfg.setPortRange(size);    for (int i=0; i < size; i++)     tcpRouters.add(GridRouterFactory.startTcpRouter(tcpCfg));    for (    GridTcpRouter tcpRouter : tcpRouters) {      assertEquals(tcpCfg,tcpRouter.configuration());      assertEquals(tcpRouter,GridRouterFactory.tcpRouter(tcpRouter.id()));    }    assertEquals("Validate all started tcp routers.",new HashSet<>(tcpRouters),new HashSet<>(GridRouterFactory.allTcpRouters()));    for (Iterator<GridTcpRouter> it=tcpRouters.iterator(); it.hasNext(); ) {      GridTcpRouter tcpRouter=it.next();      assertEquals("Validate all started tcp routers.",new HashSet<>(tcpRouters),new HashSet<>(GridRouterFactory.allTcpRouters()));      it.remove();      GridRouterFactory.stopTcpRouter(tcpRouter.id());      assertEquals("Validate all started tcp routers.",new HashSet<>(tcpRouters),new HashSet<>(GridRouterFactory.allTcpRouters()));    }    assertEquals(Collections.<GridTcpRouter>emptyList(),GridRouterFactory.allTcpRouters());  }  finally {    GridRouterFactory.stopAllRouters();    stopAllGrids();  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    finish();  return true;default :return super.onOptionsItemSelected(item);}}  }
class C{  public DPrivateKeyUsagePeriod(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DPrivateKeyUsagePeriod.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public static JComponent createLabeledLineSeparator(final String titleText,final Color containerBackgroundColor){  return createLabeledLineSeparator(titleText,containerBackgroundColor,new JBColor(Colors.DARK_BLUE,containerBackgroundColor.brighter().brighter()));}  }
class C{  public static CommandLineSelection empty(){  return new CommandLineSelection(null,null);}  }
class C{  @Override public void actualStart(){  setPeriod(NEVER);  setDelay(200);  ListenerProcess.self().attach(this);  markupCalendar=new Markup(this);  if (markupCalendar.isMarkup()) {    try {      calendar=(HashMap<Long,Long>)markupCalendar.readMarkupSerializable();    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error (begin): cannot read markup");      }    }  }  if (calendar == null) {    calendar=new HashMap<Long,Long>();    serializeCalendar();  }}  }
class C{  @Override public boolean isWritable(int columnIndex){  return false;}  }
class C{  public static <T>Function<T> jsonExtract(Object json,String path){  return new JSONArgumentFunction<>("json_extract",json,path);}  }
class C{  public AlignmentTemplateInstance(WordAlignment sent,int f1,int f2,int e1,int e2,float weight){  init(sent,f1,f2,e1,e2,weight);}  }
class C{  public boolean isNotificationNote(){  String s=getNotificationType();  return s != null && (NOTIFICATIONTYPE_Notice.equals(s) || NOTIFICATIONTYPE_EMailPlusNotice.equals(s));}  }
class C{  public boolean add(Object o){  if (nodes.contains(o)) {    return false;  }  DigraphNode node=new DigraphNode(o);  poNodes.put(o,node);  return true;}  }
class C{  public void test_getStatus(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect Status",enS[i],res.getStatus());        }      }    }  }}  }
class C{  public static int logLevelToAlertLevel(final int logLevel){  if (logLevel == Level.FATAL.intLevel()) {    return Alert.SEVERE;  } else   if (logLevel == Level.ERROR.intLevel()) {    return Alert.ERROR;  } else   if (logLevel == Level.WARN.intLevel()) {    return Alert.WARNING;  } else   if (logLevel == Level.OFF.intLevel()) {    return Alert.OFF;  }  throw new IllegalArgumentException("Unknown Log level [" + logLevel + "].");}  }
class C{  void advanceNextWriteFieldInfosGen(){  nextWriteFieldInfosGen++;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BOOLEAN_LITERAL__TRUE:    setTrue((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Key(byte[] hash){  if (hash.length != SHA1_HASH_LENGTH) {    throw new IllegalArgumentException("Invalid Hash must be 20bytes, was: " + hash.length);  }  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);}  }
class C{  public static void configureJUL(){  SLF4JBridgeHandler.removeHandlersForRootLogger();  SLF4JBridgeHandler.install();}  }
class C{  protected void rename(String oldname,String newname) throws IOException {  throw new IOException("not implemented");}  }
class C{  @RequestMapping(value="/SAML2/SSOCAC",method={RequestMethod.GET,RequestMethod.POST}) public void cacSsoDefaultTenant(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  ssoDefaultTenant(locale,model,request,response);}  }
class C{  public static <T>boolean add(TimeSeriesConverter<T> converter,Collection<T> timeSeries,SolrClient connection){  if (timeSeries == null || timeSeries.isEmpty()) {    LOGGER.debug("Collection is empty. Nothing to commit");    return true;  }  List<SolrInputDocument> collection=Collections.synchronizedList(new ArrayList<>());  timeSeries.parallelStream().forEach(null);  try {    return evaluate(connection.add(collection));  } catch (  SolrServerException|IOException e) {    LOGGER.error("Could not add document to solr.",e);    return false;  }}  }
class C{  static int compare(IQualifiedNameProvider fqnProvider,Type t1,Type t2){  if (t1 == t2) {    return 0;  }  if (t1 == null) {    return -1;  }  if (t2 == null) {    return 1;  }  if (fqnProvider != null) {    final QualifiedName name1=fqnProvider.getFullyQualifiedName(t1);    final QualifiedName name2=fqnProvider.getFullyQualifiedName(t2);    if (name1 == null && name2 == null) {      return 1;    }    if (name1 == null) {      return -1;    }    if (name2 == null) {      return 1;    }    return name1.compareTo(name2);  } else {    return 1;  }}  }
class C{  public static double mean(double n){  return n;}  }
class C{  private void forwardPackageDetails(ITestPackageDef def,ITestInvocationListener listener){  Map<String,String> metrics=new HashMap<String,String>(2);  metrics.put(PACKAGE_NAME_METRIC,def.getName());  metrics.put(PACKAGE_DIGEST_METRIC,def.getDigest());  listener.testRunStarted(def.getUri(),0);  listener.testRunEnded(0,metrics);}  }
class C{  public void storePref(final EditorType editorType){  final EditorPreferences editorPreferences=this.preferenceReader.getPreferences();  storePref(editorPreferences,editorType);}  }
class C{  public TopNCounter<T> merge(TopNCounter<T> another){  double m1=0.0, m2=0.0;  if (this.size() >= this.capacity) {    m1=this.counterList.getLast().count;  }  if (another.size() >= another.capacity) {    m2=another.counterList.getLast().count;  }  Set<T> duplicateItems=Sets.newHashSet();  List<T> notDuplicateItems=Lists.newArrayList();  for (  Map.Entry<T,Counter<T>> entry : this.counterMap.entrySet()) {    T item=entry.getKey();    Counter<T> existing=another.counterMap.get(item);    if (existing != null) {      duplicateItems.add(item);    } else {      notDuplicateItems.add(item);    }  }  for (  T item : duplicateItems) {    this.offer(item,another.counterMap.get(item).count);  }  for (  T item : notDuplicateItems) {    this.offer(item,m2);  }  for (  Map.Entry<T,Counter<T>> entry : another.counterMap.entrySet()) {    T item=entry.getKey();    if (duplicateItems.contains(item) == false) {      double counter=entry.getValue().count;      this.offer(item,counter + m1);    }  }  this.sortAndRetain();  return this;}  }
class C{  protected void forwardUpdate(DocumentEvent.ElementChange ec,DocumentEvent e,Shape a,ViewFactory f){  boolean wasValid=isLayoutValid(majorAxis);  super.forwardUpdate(ec,e,a,f);  if (wasValid && (!isLayoutValid(majorAxis))) {    Component c=getContainer();    if ((a != null) && (c != null)) {      int pos=e.getOffset();      int index=getViewIndexAtPosition(pos);      Rectangle alloc=getInsideAllocation(a);      if (majorAxis == X_AXIS) {        alloc.x+=majorOffsets[index];        alloc.width-=majorOffsets[index];      } else {        alloc.y+=minorOffsets[index];        alloc.height-=minorOffsets[index];      }      c.repaint(alloc.x,alloc.y,alloc.width,alloc.height);    }  }}  }
class C{  public void writingState(){  if (!stateWritten) {    this.stateWritten=true;    out=fWriter=new FastStringWriter(1024);  }}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next)     break;  }}  }
class C{  public boolean acceptsLoadName(String load){  if (_loadOption.equals(ALL_LOADS)) {    return true;  }  if (_loadOption.equals(INCLUDE_LOADS)) {    return _loadList.contains(load);  }  return !_loadList.contains(load);}  }
class C{  private void generalOwnership(){  String set="SET AD_Org_ID=0 WHERE AD_Client_ID=" + getAD_Client_ID() + " AND AD_Org_ID<>0";  String sql="UPDATE R_ContactInterest " + set;  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - R_ContactInterest=" + no);  sql="UPDATE AD_User_Roles " + set;  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - AD_User_Roles=" + no);  sql="UPDATE C_BPartner_Product " + set;  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - C_BPartner_Product=" + no);  sql="UPDATE C_BP_Withholding x " + set;  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - C_BP_Withholding=" + no);  sql="UPDATE M_Product_Costing " + set;  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - M_Product_Costing=" + no);  sql="UPDATE M_Replenish " + set;  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("generalOwnership - M_Replenish=" + no);}  }
class C{  public static Unsigned roundDown(Unsigned that,Unsigned multiple){  return that.unsignedDivide(multiple).multiply(multiple);}  }
class C{  String lastStepOfName(Node n){  return n.isGetProp() ? n.getLastChild().getString() : n.getQualifiedName();}  }
class C{  public void parse(){  for (  String line : commands) {    String[] args=line.split("%%");switch (args[0]) {case "respond":      handleResponse(args);    break;case "await":switch (args[1]) {case "terminal":    sub.awaitTerminalEvent();  break;case "atLeast":try {  sub.awaitAtLeast(Long.parseLong(args[3]));} catch (InterruptedException e) {  ConsoleUtils.error("interrupted");}break;case "no_events":try {sub.awaitNoEvents(Long.parseLong(args[3]));} catch (InterruptedException e) {ConsoleUtils.error("interrupted");}break;}break;case "assert":switch (args[1]) {case "no_error":sub.assertNoErrors();break;case "error":sub.assertError(new Throwable());break;case "received":handleReceived(args);break;case "received_n":sub.assertValueCount(Integer.parseInt(args[3]));break;case "received_at_least":sub.assertReceivedAtLeast(Integer.parseInt(args[3]));break;case "completed":sub.assertComplete();break;case "no_completed":sub.assertNotComplete();break;case "canceled":sub.isCancelled();break;}break;case "take":sub.take(Long.parseLong(args[1]));break;case "request":sub.request(Long.parseLong(args[1]));ConsoleUtils.info("requesting " + args[1]);break;case "cancel":sub.cancel();break;}}if (name.equals("")) {name="CHANNEL";}if (sub.hasPassed() && this.pass) ConsoleUtils.success(name); else if (!sub.hasPassed() && !this.pass) ConsoleUtils.success(name); else ConsoleUtils.failure(name);}  }
class C{  public static <K,V>CaseInsensitiveMap<V> caseInsensitiveMap(){  return new CaseInsensitiveMap<V>();}  }
class C{  public List<Integer> emit(Tuple anchor,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  public String toString(){  return "%%" + field.toString() + "%%";}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void initTrainer(boolean forceReinit){}  }
class C{  public void testTxReplicatedOptimisticSerializable() throws Exception {  checkTx(REPLICATED,OPTIMISTIC,SERIALIZABLE);}  }
class C{  public static BinaryMessage correct(BinaryMessage msg){  int residual=(int)(0xFF & getResidual(msg));switch (residual) {case 1:case 136:    msg.flip(67);  break;case 3:case 138:msg.flip(66);msg.flip(67);break;case 2:case 139:msg.flip(66);break;case 140:msg.flip(65);msg.flip(67);break;case 153:msg.flip(67);break;case 142:msg.flip(65);msg.flip(66);msg.flip(67);break;}return msg;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public NoPermission(final TypePermission permission){  this.permission=permission;}  }
class C{  public ImageIcon loadImageIcon(String filename,String description){  String path="/resources/images/buttons/" + filename;  return new ImageIcon(getClass().getResource(path),description);}  }
class C{  private void relaxResources(boolean releaseMediaPlayer){  LogUtils.d(TAG,"relaxResources. releaseMediaPlayer=",releaseMediaPlayer);  mService.stopForeground(true);  if (releaseMediaPlayer && mMediaPlayer != null) {    mMediaPlayer.reset();    mMediaPlayer.release();    mMediaPlayer=null;  }  if (mWifiLock.isHeld()) {    mWifiLock.release();  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public boolean skipField(final int tag) throws IOException {switch (WireFormat.getTagWireType(tag)) {case WireFormat.WIRETYPE_VARINT:    readInt32();  return true;case WireFormat.WIRETYPE_FIXED64:readRawLittleEndian64();return true;case WireFormat.WIRETYPE_LENGTH_DELIMITED:skipRawBytes(readRawVarint32());return true;case WireFormat.WIRETYPE_START_GROUP:skipMessage();checkLastTagWas(WireFormat.makeTag(WireFormat.getTagFieldNumber(tag),WireFormat.WIRETYPE_END_GROUP));return true;case WireFormat.WIRETYPE_END_GROUP:return false;case WireFormat.WIRETYPE_FIXED32:readRawLittleEndian32();return true;default :throw InvalidProtocolBufferException.invalidWireType();}}  }
class C{  protected void testParameterizationOk(ListParameterization config){  if (config.hasUnusedParameters()) {    fail("Unused parameters: " + config.getRemainingParameters());  }  if (config.hasErrors()) {    config.logAndClearReportedErrors();    fail("Parameterization errors.");  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  proxyBox.mouseClicked(par1,par2,par3);  if (proxyBox.isFocused())   error="";}  }
class C{  public static JsonArray array(double... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  double value : values) {    array.add(value);  }  return array;}  }
class C{  public CooperativeObservation(long seed){  super(seed);}  }
class C{  private String loadEmoticonsFromFile(boolean loadEvenIfExpired){synchronized (cache) {    return cache.load(loadEvenIfExpired);  }}  }
class C{  public XBLOMXBLElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static void store(ContentAssistHistory history,Preferences preferences,String key){  StringBuilder result=new StringBuilder();  new ReaderWriter().store(history,result);  preferences.setValue(key,result.toString());}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  private void handleReceivedPointerMove(MotionEvent event){  detectActivePointers(event);}  }
class C{  private void updateSecondaryIndices(Entity entity,IEntityClass entityClass,Long deviceKey){  for (  DeviceIndex index : secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }  ClassState state=getClassState(entityClass);  for (  DeviceIndex index : state.secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("stream is closed");  }}  }
class C{  private final void handleDecreaseIndent(Element elem,Document doc,int tabSize) throws BadLocationException {  int start=elem.getStartOffset();  int end=elem.getEndOffset() - 1;  doc.getText(start,end - start,s);  int i=s.offset;  end=i + s.count;  if (end > i) {    if (s.array[i] == '\t') {      doc.remove(start,1);    } else     if (s.array[i] == ' ') {      i++;      int toRemove=1;      while (i < end && s.array[i] == ' ' && toRemove < tabSize) {        i++;        toRemove++;      }      doc.remove(start,toRemove);    }  }}  }
class C{  private Record addRecordViewFromCurator(String text,List<String> sentences,String viewName) throws ServiceUnavailableException, AnnotationFailedException, TException, SocketException {  viewName=convertCuratorViewName(viewName);  TTransport transport=new TSocket(this.curatorHost,this.curatorPort);  logger.debug("Calling curator on host '" + curatorHost + "', port '"+ curatorPort+ "' for view '"+ viewName+ "'...");  try {    ((TSocket)transport).getSocket().setReuseAddress(true);  } catch (  SocketException e) {    logger.error("Unable to setReuseAddress!",e);    throw e;  }  transport=new TFramedTransport(transport);  TProtocol protocol=new TBinaryProtocol(transport);  transport.open();  Curator.Client client=new Curator.Client(protocol);  Record newRecord;  if (respectTokenization) {    newRecord=client.wsprovide(viewName,sentences,forceUpdate);  } else {    newRecord=client.provide(viewName,text,forceUpdate);  }  transport.close();  return newRecord;}  }
class C{  DownloadRequestQueue(int threadPoolSize,Logger logger){  if (threadPoolSize < 1 || threadPoolSize > 10) {    threadPoolSize=DEFAULT_DOWNLOAD_THREAD_POOL_SIZE;  }  this.logger=logger;  dispatchers=new DownloadDispatcher[threadPoolSize];  delivery=new DownloadDelivery(new Handler(Looper.getMainLooper()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int handleFragmentationUnitPacket(Buffer input,Buffer output){  if (!input.isDiscard()) {    assemblersCollection.put(input);    if (assemblersCollection.getLastActiveAssembler().complete()) {      assemblersCollection.getLastActiveAssembler().copyToBuffer(output);      assemblersCollection.removeOldestThan(input.getTimestamp());      return BUFFER_PROCESSED_OK;    }    output.setDiscard(true);    return OUTPUT_BUFFER_NOT_FILLED;  }  output.setDiscard(true);  return OUTPUT_BUFFER_NOT_FILLED;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void applyInputs(){  for (  Neuron neuron : getNeuronList()) {    neuron.setActivation(neuron.getActivation() + neuron.getInputValue());  }}  }
class C{  private void moveItemToBag(){  final RPAction action=new RPAction();  EntityView<?> entityView=view;  IEntity parentEntity=parent;  if ((entityView == null) || (parentEntity == null)) {    return;  }  action.put(EquipActionConsts.TYPE,"equip");  action.put(EquipActionConsts.SOURCE_PATH,entityView.getEntity().getPath());  action.put(Actions.TARGET_PATH,Arrays.asList(Integer.toString(User.get().getID().getObjectID()),"bag"));  final RPObject content=entityView.getEntity().getRPObject();  action.put(EquipActionConsts.BASE_OBJECT,parentEntity.getID().getObjectID());  action.put(EquipActionConsts.BASE_SLOT,getName());  action.put(EquipActionConsts.BASE_ITEM,content.getID().getObjectID());  action.put(EquipActionConsts.TARGET_OBJECT,User.get().getID().getObjectID());  action.put(EquipActionConsts.TARGET_SLOT,"bag");  StendhalClient.get().send(action);}  }
class C{  public void addPart(String key,String value,String contentType){  try {    out.write(boundaryLine);    out.write(createContentDisposition(key));    out.write(createContentType(contentType));    out.write(CR_LF);    out.write(value.getBytes());    out.write(CR_LF);  } catch (  Exception e) {    AbLogUtil.e(AbMultipartEntity.class,"addPart ByteArrayOutputStream exception");  }}  }
class C{  public static ExpectedVersion any(){  return ANY;}  }
class C{  public void testCreateAttributeNS1() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  doc=(Document)load("staffNS",builder);{    boolean success=false;    try {      doc.createAttributeNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public synchronized long skip(long n) throws IOException {  getBufIfOpen();  if (n <= 0) {    return 0;  }  long avail=count - pos;  if (avail <= 0) {    if (markpos < 0)     return getInIfOpen().skip(n);    fill();    avail=count - pos;    if (avail <= 0)     return 0;  }  long skipped=(avail < n) ? avail : n;  pos+=skipped;  return skipped;}  }
class C{  public RegisterValues(final com.google.security.zynamics.binnavi.debug.models.targetinformation.RegisterValues registerValues){  final List<ThreadRegisterValues> values=new ArrayList<ThreadRegisterValues>();  for (  final ThreadRegisters threadRegisterValues : registerValues) {    values.add(new ThreadRegisterValues(threadRegisterValues));  }  this.values=values;}  }
class C{  private static boolean addFollowInDumpMenu(final JPopupMenu menu,final CDebugPerspectiveModel viewModel,final IDebugger debugger,final TargetProcessThread activeThread,final INaviModule module,final COperandTreeNode treeNode){  final BigInteger simpleAddress=getSimpleAddress(treeNode,activeThread.getRegisterValues(),debugger,module);  if ((simpleAddress != null) && needsSimpleFollowMenu(debugger,treeNode,simpleAddress)) {    menu.add(new CGotoOperandExpressionAction(viewModel,treeNode.getValue(),simpleAddress));    return true;  }  final BigInteger expressionAddress=getExpressionAddress(treeNode,activeThread.getRegisterValues(),debugger,module);  if ((expressionAddress != null) && !expressionAddress.equals(simpleAddress) && needsAddressExpressionMenu(debugger,treeNode,expressionAddress)) {    final INaviOperandTreeNode addressExpression=getAddressExpression(treeNode);    menu.add(new CGotoOperandExpressionAction(viewModel,toString(addressExpression),expressionAddress));    return true;  }  return false;}  }
class C{  private void closeResources(){  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ex) {    LOGGER.warning("Log: Could not close " + file.toAbsolutePath() + " ("+ ex.getLocalizedMessage()+ ")");  }}  }
class C{  public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits){  return appendDecimal(DateTimeFieldType.clockhourOfDay(),minDigits,2);}  }
class C{  protected void filterVcf(VcfReader reader,VcfWriter writer) throws IOException {  final VcfHeader header=reader.getHeader();  checkHeaderFieldFilters(header);  for (  final VcfFilter filter : mFilters) {    if (filter instanceof VcfSampleFilter) {      ((VcfSampleFilter)filter).setSamples(mSampleIndexes,mSampleFailed);    }    filter.setHeader(header);  }  header.addRunInfo();  if (mFailFilterName != null) {    header.ensureContains(new FilterField(mFailFilterName,"RTG vcffilter user defined filter"));  }  process(reader,writer);}  }
class C{  public boolean clearAccounting(MAcctSchema accountSchema,I_M_CostType costType,PO model,Timestamp dateAcct){  if (!accountSchema.getCostingMethod().equals(costType.getCostingMethod()))   return false;  final String docBaseType;  if (model instanceof MMatchInv)   docBaseType=MPeriodControl.DOCBASETYPE_MatchInvoice; else   if (model instanceof MMatchPO)   docBaseType=MPeriodControl.DOCBASETYPE_MatchPO; else   if (model instanceof MProduction)   docBaseType=MPeriodControl.DOCBASETYPE_MaterialProduction; else {    MDocType dt=MDocType.get(model.getCtx(),model.get_ValueAsInt(MDocType.COLUMNNAME_C_DocType_ID));    docBaseType=dt.getDocBaseType();  }  Boolean openPeriod=MPeriod.isOpen(model.getCtx(),dateAcct,docBaseType,model.getAD_Org_ID());  if (!openPeriod) {    System.out.println("Period closed.");    return false;  }  final String sqlUpdate="UPDATE " + model.get_TableName() + " SET Posted = 'N' WHERE "+ model.get_TableName()+ "_ID=?";  DB.executeUpdate(sqlUpdate,new Object[]{model.get_ID()},false,model.get_TrxName());  final String sqldelete="DELETE FROM Fact_Acct WHERE Record_ID =? AND AD_Table_ID=?";  DB.executeUpdate(sqldelete,new Object[]{model.get_ID(),model.get_Table_ID()},false,model.get_TrxName());  return true;}  }
class C{  public static <T>int lowerBound(final List<T> valueList,int fromIdx,int toIdx,final Comparable<T> value){  int len=toIdx - fromIdx + (toIdx > fromIdx ? 1 : 0);  int from=fromIdx;  int half;  int middle;  while (len > 0) {    half=len >> 1;    middle=from;    middle=middle + half;    if (value.compareTo(valueList.get(middle)) == 1) {      from=middle;      from++;      len=len - half - 1;    } else {      len=half;    }  }  return from;}  }
class C{  public static int boolToInt(boolean bool){  int a=0;  if (bool) {    a=1;  }  return a;}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public NeighborhoodsAction(GraphWorkbench workbench){  super("Neighborhoods");  this.workbench=workbench;}  }
class C{  public Generator(ElementKey<?,? extends Generator> key){  super(key);}  }
class C{  User(String prefix,String nick){  _prefix=prefix;  _nick=nick;  _lowerNick=nick.toLowerCase();}  }
class C{  private boolean isCurrentRcController(PendingIntent pi){  if (!mRCStack.empty() && mRCStack.peek().mMediaIntent.equals(pi)) {    return true;  }  return false;}  }
class C{  public int readHeader() throws IOException {  int avail=count - pos;  if (avail >= 4) {    int returnValue=(buf[pos] & 0xff) + ((buf[pos + 1] & 0xff) << 8) + ((buf[pos + 2] & 0xff) << 16);    lastPacketSeq=buf[pos + 3] & 0xff;    pos+=4;    logger.trace("read packet seq:" + lastPacketSeq + " length:"+ returnValue);    return returnValue;  }  int read=0;  do {    int count=read(headerBuffer,read,4 - read);    if (count <= 0) {      throw new EOFException("unexpected end of stream, read " + read + " bytes from "+ 4);    }    read+=count;  } while (read < 4);  lastPacketSeq=headerBuffer[3] & 0xff;  int length=(headerBuffer[0] & 0xff) + ((headerBuffer[1] & 0xff) << 8) + ((headerBuffer[2] & 0xff) << 16);  logger.trace("read packet seq:" + lastPacketSeq + " length:"+ length);  return length;}  }
class C{  public void pauseTransferByUser(){  if (sLogger.isActivated()) {    sLogger.warn("User is pausing transfer");  }  mIsPaused=true;  getListener().onHttpTransferPausedByUser();}  }
class C{  public void open(){  mFifo=new FifoBuffer();}  }
class C{  private int createDocType(String Name,String PrintName,String DocBaseType,String DocSubTypeSO,int C_DocTypeShipment_ID,int C_DocTypeInvoice_ID,int StartNo,int GL_Category_ID,boolean isReturnTrx){  MSequence sequence=null;  if (StartNo != 0) {    sequence=new MSequence(m_ctx,getAD_Client_ID(),Name,StartNo,m_trx.getTrxName());    if (!sequence.save()) {      log.log(Level.SEVERE,"Sequence NOT created - " + Name);      return 0;    }  }  MDocType dt=new MDocType(m_ctx,DocBaseType,Name,m_trx.getTrxName());  if (PrintName != null && PrintName.length() > 0)   dt.setPrintName(PrintName);  if (DocSubTypeSO != null)   dt.setDocSubTypeSO(DocSubTypeSO);  if (C_DocTypeShipment_ID != 0)   dt.setC_DocTypeShipment_ID(C_DocTypeShipment_ID);  if (C_DocTypeInvoice_ID != 0)   dt.setC_DocTypeInvoice_ID(C_DocTypeInvoice_ID);  if (GL_Category_ID != 0)   dt.setGL_Category_ID(GL_Category_ID);  if (sequence == null)   dt.setIsDocNoControlled(false); else {    dt.setIsDocNoControlled(true);    dt.setDocNoSequence_ID(sequence.getAD_Sequence_ID());  }  dt.setIsSOTrx();  if (isReturnTrx)   dt.setIsSOTrx(!dt.isSOTrx());  if (!dt.save()) {    log.log(Level.SEVERE,"DocType NOT created - " + Name);    return 0;  }  return dt.getC_DocType_ID();}  }
class C{  private void computeOutputEventBlocks(){  if (this.outputEventBlocks == null) {    this.outputEventBlocks=new LinkedHashMap<MethodModel,Map<MethodModel,List<CodeLocationModel>>>();  }  for (  MethodModel inputEvent : inputEventBlocks.keySet()) {    if (inputEventBlocks.get(inputEvent) != null) {      for (      MethodModel outputEvent : inputEventBlocks.get(inputEvent)) {        Map<MethodModel,List<CodeLocationModel>> outputEventMap=this.outputEventBlocks.get(outputEvent);        if (outputEventMap == null) {          outputEventMap=new LinkedHashMap<MethodModel,List<CodeLocationModel>>();          this.outputEventBlocks.put(outputEvent,outputEventMap);        }        outputEventMap.put(inputEvent,outputEvent.getLines());      }    }  }}  }
class C{  public void removeAgedItems(long latest,boolean notify){  if (this.data.isEmpty()) {    return;  }  long index=Long.MAX_VALUE;  try {    Method m=RegularTimePeriod.class.getDeclaredMethod("createInstance",new Class[]{Class.class,Date.class,TimeZone.class});    RegularTimePeriod newest=(RegularTimePeriod)m.invoke(this.timePeriodClass,new Object[]{this.timePeriodClass,new Date(latest),TimeZone.getDefault()});    index=newest.getSerialIndex();  } catch (  NoSuchMethodException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(e);  }  boolean removed=false;  while (getItemCount() > 0 && (index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {    this.data.remove(0);    removed=true;  }  if (removed) {    updateMinMaxYByIteration();    if (notify) {      fireSeriesChanged();    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS06.class,args);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isNonVariantGt(String gt){  final int gtlen=gt.length();  for (int i=0; i < gtlen; i++) {    final char c=gt.charAt(i);switch (c) {case PHASED_SEPARATOR:case UNPHASED_SEPARATOR:case '0':case MISSING_VALUE:      continue;default :    return false;}}return true;}  }
class C{  public Node(E e){  value=e;}  }
class C{  public JSONWriter key(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      stack[top - 1].putOnce(s,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(s));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  @Deprecated public static @CheckForNull XMethod findXMethod(JavaClass javaClass,String methodName,String methodSig,JavaClassAndMethodChooser chooser){  JavaClassAndMethod result=findMethod(javaClass,methodName,methodSig,chooser);  return result == null ? null : XFactory.createXMethod(result.getJavaClass(),result.getMethod());}  }
class C{  public SVGOMCircleElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public MeasurementEvaluationStatisticsTableModel(){  this(new ArrayList<EvaluationStatistics>(),null,true);}  }
class C{  public NetworkPanelDesktop(final NetworkDesktopComponent component,final Network Network){  super(Network);  this.component=component;  this.getRunToolBar().setVisible(false);  applyUserPrefsToNetwork();}  }
class C{  @Override public void reset(){  m_ticketcurrent=null;}  }
class C{  void displayErrorDialog(Window w,Throwable t){  if (t instanceof NoDisplayException) {    return;  }  displayErrorDialog(w,t.toString());}  }
class C{  public DraweeHolder(@Nullable DH hierarchy){  if (hierarchy != null) {    setHierarchy(hierarchy);  }}  }
class C{  void startLogListener(){  List<LoggingService> services=getEnabledServicesForType(LoggingService.class);  if (services != null && !services.isEmpty()) {    if (logListener == null) {      logListener=new LogListener(context,services,foamApiKeys.wifiOnly());    }    if (!logListener.isRunning()) {      logListener.start();    }  }}  }
class C{  public ApproximationSetCollector(double epsilon){  this(null,new double[]{epsilon});}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input,ExtensionRegistry extensionRegistry) throws IOException {  return newBuilder(type).mergeFrom(input,extensionRegistry).buildParsed();}  }
class C{  public static double tile2xMercator(int x,int z){  double n=Math.pow(2.0,z);  return DefaultEllipsoid.WGS84.getSemiMajorAxis() * Math.PI * (2 * x / n - 1);}  }
class C{  public IDiscordClient build() throws DiscordException {  if ((loginInfo.length < 2 && !isBot) && botToken == null)   throw new DiscordException("No login info present!");  if (isBot) {    return new DiscordClientImpl(botToken,timeoutTime,maxMissedPingCount,isDaemon,reconnectAttempts);  } else {    return new DiscordClientImpl(loginInfo[0],loginInfo[1],timeoutTime,maxMissedPingCount,isDaemon,reconnectAttempts);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF__TYPE_ARGS:    return ((InternalEList<?>)getTypeArgs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  String asString(){  String s=getString();  if (s != null)   return s;  return word.toString();}  }
class C{  public static ActivityOptionsCompat makeCustomAnimation(Context context,int enterResId,int exitResId){  if (Build.VERSION.SDK_INT >= 16) {    return new ActivityOptionsImplJB(ActivityOptionsCompatJB.makeCustomAnimation(context,enterResId,exitResId));  }  return new ActivityOptionsCompat();}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  public void testSqlFieldsQueryFailedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from UNKNOWN");  testQueryFailedMetrics(cache,qry);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DEPEND___DEPEND_1:    return DEPEND_1_EDEFAULT == null ? depend_1 != null : !DEPEND_1_EDEFAULT.equals(depend_1);}return super.eIsSet(featureID);}  }
class C{  protected String loadDocumentDetails(){  MCash cash=(MCash)getPO();  setDateDoc(cash.getStatementDate());  setAmount(Doc.AMTTYPE_Gross,cash.getStatementDifference());  MCashBook cb=MCashBook.get(getCtx(),cash.getC_CashBook_ID());  setC_CashBook_ID(cb.getC_CashBook_ID());  setC_Currency_ID(cb.getC_Currency_ID());  p_lines=loadLines(cash,cb);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  public Vector4f sub(float x,float y,float z,float w){  this.x-=x;  this.y-=y;  this.z-=z;  this.w-=w;  return this;}  }
class C{  public IMqttDeliveryToken publish(String topic,byte[] payload,int qos,boolean retained,String invocationContext,String activityToken){  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  IMqttDeliveryToken sendToken=null;  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      MqttMessage message=new MqttMessage(payload);      message.setQos(qos);      message.setRetained(retained);      sendToken=myClient.publish(topic,payload,qos,retained,invocationContext,listener);      storeSendDetails(topic,message,sendToken,invocationContext,activityToken);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.SEND_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  return sendToken;}  }
class C{  @Override public void handlePlan(CarrierPlan carrierPlan){  if (carrierPlan == null)   throw new IllegalStateException("carrierPlan is null and cannot be handled.");  route(carrierPlan);}  }
class C{  public boolean isSetFullSyncRequest(){  return this.fullSyncRequest != null;}  }
class C{  protected OkAction(JDialog aboutBox){  super("OkAction");  this.aboutBox=aboutBox;}  }
class C{  public Map<String,Pattern> collections(){  if (cmap != null)   return cmap;  final String r=get(CrawlAttribute.COLLECTIONS.key);  this.cmap=collectionParser(r);  return this.cmap;}  }
class C{  public ContextStatementCollector(Collection<Statement> statements,Map<String,String> namespaces,ValueFactory vf,Resource... contexts){  OpenRDFUtil.verifyContextNotNull(contexts);  this.statements=statements;  this.namespaces=namespaces;  this.vf=vf;  this.contexts=contexts;}  }
class C{  public static void checkUnManagedResourceExportWwnPresent(UnManagedVolume unManagedVolume) throws IngestionException {  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String isVolumeExported=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString());  if (null != isVolumeExported && Boolean.parseBoolean(isVolumeExported)) {    String wwn=unManagedVolume.getWwn();    if (null == wwn || wwn.isEmpty()) {      throw IngestionException.exceptions.exportedVolumeIsMissingWwn(unManagedVolume.getLabel());    }  }}  }
class C{  public void addingEdge(SessionEvent event){  setEventId("addingEdge");}  }
class C{  public LinkedIdentityHashMap(int initialCapacity,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor);  this.accessOrder=accessOrder;}  }
class C{  private void fireStyleChangeSync(StyleListener[] array,String property,Style source){  int alen=array.length;  for (int iter=0; iter < alen; iter++) {    array[iter].styleChanged(property,source);  }}  }
class C{  public GeneratedListModel(ListDemo demo){  this.demo=demo;}  }
class C{  public boolean enqueueReference(ObjectReference addr){  Reference<?> reference=(Reference<?>)addr.toObject();  return reference.enqueueInternal();}  }
class C{  public static int minIndex(double... M){  int minI=0;  for (int i=1; i < M.length; i++)   if (M[i] < M[minI])   minI=i;  return minI;}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecCipher02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        epki.getKeySpec(g.c());        fail(algName[i][0] + ", " + algName[i][1]);      } catch (      InvalidKeySpecException ok) {      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public int size(){  return size;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof QName) {    return m_qname.equals(obj);  } else   return super.equals(obj);}  }
class C{  public void testFailedOnInvalidFunctionSequence(){  checkFail("{fnfunc1()}");  checkFail("select {fn func1(field1, {fn func2(field2), field3)} from SomeTable;");  checkFail("select {fn func1(field1, fn func2(field2)}, field3)} from SomeTable;");}  }
class C{  protected String closeTag(String tag){  int begin;  if (!tags.containsKey(tag)) {    return super.closeTag(tag);  } else {    begin=((Integer)tags.get(tag)).intValue();    tags.remove(tag);  }  if (tag.equalsIgnoreCase("b")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD));  } else   if (tag.equalsIgnoreCase("i")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE));  } else   if (tag.equalsIgnoreCase("s") || tag.equalsIgnoreCase("strike")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.STRIKETHROUGH,TextAttribute.STRIKETHROUGH_ON));  } else   if (tag.equalsIgnoreCase("udash")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_LOW_DASHED));  } else   if (tag.equalsIgnoreCase("udot")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_LOW_DOTTED));  } else   if (tag.equalsIgnoreCase("u")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON));  } else   if (tag.equalsIgnoreCase("tt")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.FAMILY,fontFamilyStack.pop()));  } else   if (tag.equalsIgnoreCase("v")) {  } else   if (tag.equalsIgnoreCase("over")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.UNDERLINE,UNDERLINE_OVERLINE));  } else   if (tag.equalsIgnoreCase("sup")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.TRANSFORM,AffineTransform.getTranslateInstance(0,superscriptCorrection)));    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUPER));  } else   if (tag.equalsIgnoreCase("sub")) {    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.TRANSFORM,AffineTransform.getTranslateInstance(0,-superscriptCorrection)));    this.attributes.add(new AttributeEntry(begin,clearedText.length(),TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUB));  } else {    return super.closeTag(tag);  }  return "";}  }
class C{  public void validarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DocumentoVitalForm frm=(DocumentoVitalForm)form;  ActionErrors errores=form.validate(mappings,request);  if (errores.isEmpty()) {    InfoBDocumentoVitalExtVO documentoVital=(InfoBDocumentoVitalExtVO)getFromTemporalSession(request,DocumentosVitalesConstants.DOCUMENTO_VITAL_KEY);    frm.populate(documentoVital);    getGestionDocumentosVitalesBI(request).validarDocumentoVital(documentoVital);    goLastClientExecuteLogic(mappings,form,request,response);  } else {    obtenerErrores(request,true).add(errores);    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  public DocumentConversionTest() throws Exception {  html=new File(RESOURCE + "html-with-extra-content-input.htm");}  }
class C{  boolean matchPropertyName(java.beans.PropertyChangeEvent e){  return (e.getPropertyName().indexOf("State") >= 0 || e.getPropertyName().indexOf("Appearance") >= 0);}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public Iterator iterateAttributeNames(){  ArrayList result=new ArrayList();  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    result.add(attr.getFullName());  }  return result.iterator();}  }
class C{  private static void assertLiveness(final String name,final AsynchronousIndexWriteConfiguration config){  if (config.getSinkIdleTimeoutNanos() > TimeUnit.SECONDS.toNanos(60)) {    log.error("Large idle timeout will not preserve liveness: index=" + name + ", config="+ config);  }}  }
class C{  public static synchronized void loadLibrary(String shortName) throws UnsatisfiedLinkError {  if (sSoSources == null) {    if ("http://www.android.com/".equals(System.getProperty("java.vendor.url"))) {      assertInitialized();    } else {      System.loadLibrary(shortName);      return;    }  }  try {    loadLibraryBySoName(System.mapLibraryName(shortName),0);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  private Object writeReplace() throws ObjectStreamException {  Object[] sourcesAsStrings=sources.toArray();  for (int i=0; i < sourcesAsStrings.length; i++) {    sourcesAsStrings[i]=Errors.convert(sourcesAsStrings[i]).toString();  }  return new Message(Arrays.asList(sourcesAsStrings),message,cause);}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (TextUtils.isEmpty(resultString)) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();    finish();  } else {    Intent i=new Intent();    i.putExtra("value",resultString);    setResult(RESULT_OK,i);    finish();  }}  }
class C{  private float d2x(int size){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,size,getContext().getResources().getDisplayMetrics());}  }
class C{  public Element store(Object o){  IndicatorTurnoutIcon p=(IndicatorTurnoutIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("indicatorturnouticon");  storeCommonAttributes(p,element);  NamedBeanHandle<Turnout> t=p.getNamedTurnout();  if (t != null) {    element.addContent(storeNamedBean("turnout",t));  }  NamedBeanHandle<OBlock> b=p.getNamedOccBlock();  if (b != null) {    element.addContent(storeNamedBean("occupancyblock",b));  }  NamedBeanHandle<Sensor> s=p.getNamedOccSensor();  if (b == null && s != null) {    element.addContent(storeNamedBean("occupancysensor",s));  }  Element elem=new Element("showTrainName");  String show="no";  if (p.showTrain()) {    show="yes";  }  elem.addContent(show);  element.addContent(elem);  HashMap<String,HashMap<Integer,NamedIcon>> iconMaps=p.getIconMaps();  Iterator<Entry<String,HashMap<Integer,NamedIcon>>> it=iconMaps.entrySet().iterator();  Element el=new Element("iconmaps");  String family=p.getFamily();  if (family != null) {    el.setAttribute("family",family);  }  while (it.hasNext()) {    Entry<String,HashMap<Integer,NamedIcon>> ent=it.next();    elem=new Element(ent.getKey());    Iterator<Entry<Integer,NamedIcon>> iter=ent.getValue().entrySet().iterator();    while (iter.hasNext()) {      Entry<Integer,NamedIcon> entry=iter.next();      elem.addContent(storeIcon(p.getStateName(entry.getKey()),entry.getValue()));    }    el.addContent(elem);  }  element.addContent(el);  elem=new Element("paths");  ArrayList<String> paths=p.getPaths();  if (paths != null) {    for (int i=0; i < paths.size(); i++) {      Element e=new Element("path");      e.addContent(paths.get(i));      elem.addContent(e);    }    element.addContent(elem);  }  element.setAttribute("class","jmri.jmrit.display.configurexml.IndicatorTurnoutIconXml");  return element;}  }
class C{  protected void terminated(){}  }
class C{  public static ParsedSql parseSqlStatement(String sql){  if (sql == null)   new IllegalArgumentException("SQL must not be null");  Set<String> namedParameters=new HashSet<String>();  ParsedSql parsedSql=new ParsedSql(sql);  char[] statement=sql.toCharArray();  int namedParameterCount=0;  int unnamedParameterCount=0;  int totalParameterCount=0;  int i=0;  while (i < statement.length) {    int skipToPosition=skipCommentsAndQuotes(statement,i);    if (i != skipToPosition) {      if (skipToPosition >= statement.length) {        break;      }      i=skipToPosition;    }    char c=statement[i];    if (c == ':' || c == '&' || c == '#' || c == '$') {      int j=i + 1;      if (j < statement.length && statement[j] == ':' && c == ':') {        i=i + 2;        continue;      }      while (j < statement.length && !isParameterSeparator(statement[j])) {        j++;      }      if (j - i > 1) {        String parameter=sql.substring(i + 1,j);        if (!namedParameters.contains(parameter)) {          namedParameters.add(parameter);          namedParameterCount++;        }        String removedPrefixAndSuffixParameter=removePrefixAndSuffix(c,parameter,sql);        parsedSql.addNamedParameter(removedPrefixAndSuffixParameter,c + parameter,i,j);        totalParameterCount++;      }      i=j - 1;    } else {      if (c == '?') {        unnamedParameterCount++;        totalParameterCount++;      }    }    i++;  }  parsedSql.setNamedParameterCount(namedParameterCount);  parsedSql.setUnnamedParameterCount(unnamedParameterCount);  parsedSql.setTotalParameterCount(totalParameterCount);  return parsedSql;}  }
class C{  private ChooseConfig searchAnnotatedConfig(ChooseConfig cc){  if (isNull(cc) || cc == ChooseConfig.DESTINATION)   if (Annotation.isInheritedMapped(destination))   return ChooseConfig.DESTINATION;  if (isNull(cc) || cc == ChooseConfig.SOURCE)   if (Annotation.isInheritedMapped(source))   return ChooseConfig.SOURCE;  return null;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  int parentToken=m_parentNode.getXSLToken();  if (parentToken == Constants.ELEMNAME_TEMPLATE || parentToken == Constants.EXSLT_ELEMNAME_FUNCTION)   ((ElemTemplate)m_parentNode).m_inArgsSize++;}  }
class C{  private void testZenModeWithDuration(int mode,long durationMillis){  final long startTimeMillis=System.currentTimeMillis();  mPartnerInterface.setZenModeWithDuration(mode,durationMillis);  final int actualZenMode=getZenMode();  if (durationMillis == 0) {    assertTrue(actualZenMode == mode || actualZenMode == PartnerInterface.ZEN_MODE_OFF);  } else {    assertEquals(mode,actualZenMode);  }  if (actualZenMode == PartnerInterface.ZEN_MODE_OFF || durationMillis < 0 || durationMillis == Long.MAX_VALUE) {    return;  }  final long zenDuration=getZenModeDuration(startTimeMillis);  assertTrue(Math.abs(zenDuration - durationMillis) <= DURATION_TOLERANCE_MS);}  }
class C{  public Builder(@IntRange(from=1) long maxIntervalMillis,@IntRange(from=DEFAULT_MIN_COMBO_TIMES_CARED) int minComboTimesCared){  mMaxIntervalMillis=maxIntervalMillis;  mMinComboTimesCared=minComboTimesCared;}  }
class C{  public void async(Activity act){  if (act.isFinishing()) {    AQUtility.warn("Warning","Possible memory leak. Calling ajax with a terminated activity.");  }  if (type == null) {    AQUtility.warn("Warning","type() is not called with response type.");    return;  }  this.act=new WeakReference<Activity>(act);  async((Context)act);}  }
class C{  public void doClose(){  MStatus status=MStatus.get(getCtx(),getR_Status_ID());  if (!status.isClosed()) {    MStatus[] closed=MStatus.getClosed(getCtx());    MStatus newStatus=null;    for (int i=0; i < closed.length; i++) {      if (!closed[i].isFinalClose()) {        newStatus=closed[i];        break;      }    }    if (newStatus == null && closed.length > 0)     newStatus=closed[0];    if (newStatus != null)     setR_Status_ID(newStatus.getR_Status_ID());  }}  }
class C{  public static Word readAvailableBitsWord(Object o){  return JavaHeader.readAvailableBitsWord(o);}  }
class C{  protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,PlotOrientation orientation,Rectangle2D dataArea,Rectangle2D markerArea,RectangleInsets markerOffset,LengthAdjustmentType labelOffsetType,RectangleAnchor anchor){  Rectangle2D anchorRect=null;  if (orientation == PlotOrientation.HORIZONTAL) {    anchorRect=markerOffset.createAdjustedRectangle(markerArea,labelOffsetType,LengthAdjustmentType.CONTRACT);  } else   if (orientation == PlotOrientation.VERTICAL) {    anchorRect=markerOffset.createAdjustedRectangle(markerArea,LengthAdjustmentType.CONTRACT,labelOffsetType);  }  return RectangleAnchor.coordinates(anchorRect,anchor);}  }
class C{  public ColorRange addAlphaRange(float min,float max){  return addAlphaRange(new FloatRange(min,max));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TMETHOD__DECLARED_FINAL:    setDeclaredFinal(DECLARED_FINAL_EDEFAULT);  return;case TypesPackage.TMETHOD__DECLARED_STATIC:setDeclaredStatic(DECLARED_STATIC_EDEFAULT);return;case TypesPackage.TMETHOD__DECLARED_OVERRIDE:setDeclaredOverride(DECLARED_OVERRIDE_EDEFAULT);return;case TypesPackage.TMETHOD__HAS_NO_BODY:setHasNoBody(HAS_NO_BODY_EDEFAULT);return;case TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER:setDeclaredMemberAccessModifier(DECLARED_MEMBER_ACCESS_MODIFIER_EDEFAULT);return;case TypesPackage.TMETHOD__DECLARED_ABSTRACT:setDeclaredAbstract(DECLARED_ABSTRACT_EDEFAULT);return;case TypesPackage.TMETHOD__LACKS_THIS_OR_SUPER_USAGE:setLacksThisOrSuperUsage(LACKS_THIS_OR_SUPER_USAGE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static double latToMercator(double lat){  lat=Math.min(MAX_LAT,lat);  lat=Math.max(-MAX_LAT,lat);  return _180_PI * Math.log(Math.tan(lat * PI_360 + PI_4));}  }
class C{  public boolean addEmptyTask(final Runnable whenDone){  if (this.isEmpty()) {    this.runEmptyTasks();    if (whenDone != null) {      whenDone.run();    }    return true;  }  if (whenDone != null) {    this.emptyTasks.add(whenDone);  }  return false;}  }
class C{  public void error(SourceLocator srcLctr,String msg,Exception e) throws TransformerException {  error(srcLctr,msg,null,e);}  }
class C{  private void processExtraFanart(){  extraFanarts.clear();  for (  JToggleButton button : buttons) {    if (button.getClientProperty("MediaArtworkExtrafanart") instanceof JCheckBox && button.getClientProperty("MediaArtwork") instanceof MediaArtwork && button.getClientProperty("MediaArtworkSize") instanceof JComboBox) {      JCheckBox chkbx=(JCheckBox)button.getClientProperty("MediaArtworkExtrafanart");      if (chkbx.isSelected()) {        MediaArtwork artwork=(MediaArtwork)button.getClientProperty("MediaArtwork");        @SuppressWarnings("rawtypes") JComboBox cb=(JComboBox)button.getClientProperty("MediaArtworkSize");        if (cb.getSelectedItem() instanceof ImageSizeAndUrl) {          ImageSizeAndUrl size=(ImageSizeAndUrl)cb.getSelectedItem();          if (size != null) {            extraFanarts.add(size.getUrl());          } else {            extraFanarts.add(artwork.getDefaultUrl());          }        } else         if (cb.getSelectedItem() instanceof String) {          extraFanarts.add(artwork.getDefaultUrl());        }      }    }  }}  }
class C{  public char[] findSource(IType type,IBinaryType info){  if (!type.isBinary()) {    return null;  }  String simpleSourceFileName=((BinaryType)type).getSourceFileName(info);  if (simpleSourceFileName == null) {    return null;  }  return findSource(type,simpleSourceFileName);}  }
class C{  public static String encloseHost(final String host){  if (host != null && host.contains(":")) {    String hostToCheck=host;    if (host.contains("%")) {      hostToCheck=host.substring(0,host.indexOf("%"));    }    if (InetAddresses.isInetAddress(hostToCheck)) {      return "[" + host + "]";    }  }  return host;}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  put(index,new Long(value));  return this;}  }
class C{  public static NbtInputStream fromDeflater(InputStream in,NbtLimiter limiter){  return new NbtInputStream(new DataInputStream(new BufferedInputStream(new DeflaterInputStream(new NbtInputLimitedStream(in,limiter)))));}  }
class C{  public void createWeekScenarioParAndRoleChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_WEEK_ROLES",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_WEEK_ROLES",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-04 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-04 00:00:00"),"MAX_FOLDER_NUMBER","2");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 00:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-14 12:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-19 18:00:00"),"MAX_FOLDER_NUMBER","13");  BillingIntegrationTestBase.setDateFactoryInstance("2013-03-01 00:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_WEEK_ROLES",subDetails);}  }
class C{  void awaitOperationalUnlocked() throws InterruptedException {  if (socketValid) {    logger.info("[{}-{}] Socket to {} is now non-operational. Closing.",gondola.getHostId(),memberId,peerId);    socketValid=false;    close(socket,in,out);    socket=null;    in=null;    out=null;    reconnect();  }  while (!socketValid) {    if (networkTracing) {      logger.info("[{}-{}] Waiting for valid socket to {}",gondola.getHostId(),memberId,peerId);    }    socketValidCond.await();  }  if (networkTracing) {    logger.info("[{}-{}] {}: Valid socket now available to {}",gondola.getHostId(),memberId,Thread.currentThread().getName(),peerId);  }}  }
class C{  public GsonRequest(String url,Class<T> clazz,Map<String,String> headers,Map<String,String> params,Response.Listener<T> listener,Response.ErrorListener errorListener){  super(Method.POST,url,errorListener);  this.clazz=clazz;  this.headers=headers;  this.params=params;  this.listener=listener;}  }
class C{  public EvernoteSession buildForSingleUser(String developerToken,String noteStoreUrl){  EvernoteSession evernoteSession=new EvernoteSession();  evernoteSession.mAuthenticationResult=new AuthenticationResult(EvernotePreconditions.checkNotEmpty(developerToken),EvernotePreconditions.checkNotEmpty(noteStoreUrl),mSupportAppLinkedNotebooks);  return build(evernoteSession);}  }
class C{  protected void encodeBufferPrefix(OutputStream a) throws IOException {  super.pStream=new PrintStream(a);  super.pStream.print("begin " + mode + " ");  if (bufferName != null) {    super.pStream.println(bufferName);  } else {    super.pStream.println("encoder.bin");  }  super.pStream.flush();}  }
class C{  protected synchronized void releaseBeanContextResources(){  Object[] bcssc;  super.releaseBeanContextResources();synchronized (children) {    if (children.isEmpty())     return;    bcssc=children.values().toArray();  }  for (int i=0; i < bcssc.length; i++) {    ((BCSSChild)bcssc[i]).revokeAllDelegatedServicesNow();  }  proxy=null;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public CodeSource(URL url,CodeSigner[] signers){  this.location=url;  if (signers != null) {    this.signers=signers.clone();  }}  }
class C{  public KeyGetterBasic(int[] aElems){  m_aElems=aElems;}  }
class C{  public Sum(){  super("statistical.sum",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.NUMERICAL);}  }
class C{  public static ContainerListener add(ContainerListener a,ContainerListener b){  return (ContainerListener)addInternal(a,b);}  }
class C{  public static boolean isPrefixStartChar(int codePoint){  return isPN_CHARS_BASE(codePoint);}  }
class C{  public boolean isGetUTXOsSupported(){  return clientVersion >= GetUTXOsMessage.MIN_PROTOCOL_VERSION && (localServices & NODE_GETUTXOS) == NODE_GETUTXOS;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.718 -0500",hash_original_method="8CDFE7B5CE94DD276F31B39577FD5966",hash_generated_method="3DC47773A05DF5A1FCD734C0E40FC588") public static final String guessFileName(String url,String contentDisposition,String mimeType){  String filename=null;  String extension=null;  if (filename == null && contentDisposition != null) {    filename=parseContentDisposition(contentDisposition);    if (filename != null) {      int index=filename.lastIndexOf('/') + 1;      if (index > 0) {        filename=filename.substring(index);      }    }  }  if (filename == null) {    String decodedUrl=Uri.decode(url);    if (decodedUrl != null) {      int queryIndex=decodedUrl.indexOf('?');      if (queryIndex > 0) {        decodedUrl=decodedUrl.substring(0,queryIndex);      }      if (!decodedUrl.endsWith("/")) {        int index=decodedUrl.lastIndexOf('/') + 1;        if (index > 0) {          filename=decodedUrl.substring(index);        }      }    }  }  if (filename == null) {    filename="downloadfile";  }  int dotIndex=filename.indexOf('.');  if (dotIndex < 0) {    if (mimeType != null) {      extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);      if (extension != null) {        extension="." + extension;      }    }    if (extension == null) {      if (mimeType != null && mimeType.toLowerCase().startsWith("text/")) {        if (mimeType.equalsIgnoreCase("text/html")) {          extension=".html";        } else {          extension=".txt";        }      } else {        extension=".bin";      }    }  } else {    if (mimeType != null) {      int lastDotIndex=filename.lastIndexOf('.');      String typeFromExt=MimeTypeMap.getSingleton().getMimeTypeFromExtension(filename.substring(lastDotIndex + 1));      if (typeFromExt != null && !typeFromExt.equalsIgnoreCase(mimeType)) {        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);        if (extension != null) {          extension="." + extension;        }      }    }    if (extension == null) {      extension=filename.substring(dotIndex);    }    filename=filename.substring(0,dotIndex);  }  return filename + extension;}  }
class C{  public <T extends View>T findViewByIdEfficient(int id){  return mCacheView.findViewByIdEfficient(id);}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor,Vector2 axis){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  localAxisA.set(bodyA.getLocalVector(axis));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  @Override public void updateRowId(String columnLabel,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  public static float toFloatValue(String str) throws PageException {  return (float)toDoubleValue(str);}  }
class C{  @SuppressWarnings("fallthrough") public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else           zzInput=zzBufferL[zzCurrentPosL++];        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb=null;    sb=new StringBuffer();    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,yycharat(0));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else zzScanError(ZZ_NO_MATCH);}}}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getC_Currency_ID() == getC_Currency_ID_To()) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@C_Currency_ID@ = @C_Currency_ID@"));    return false;  }  if (getMultiplyRate().compareTo(Env.ZERO) <= 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@MultiplyRate@ <= 0"));    return false;  }  Timestamp from=getValidFrom();  if (getValidTo() == null)   setValidTo(TimeUtil.getDay(2056,1,29));  Timestamp to=getValidTo();  if (to.before(from)) {    SimpleDateFormat df=DisplayType.getDateFormat(DisplayType.Date);    log.saveError("Error",df.format(to) + " < " + df.format(from));    return false;  }  return true;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.659 -0500",hash_original_method="DD467BD39ED470F41EBF28C514D0DE9D",hash_generated_method="14EE41019E4C43E3407A25417435EE5C") public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,Object content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setContent(content,contentType);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  void addParsedQuery(ParserRuleContext currentContext,Query<O> parsedQuery){  ParserRuleContext parentContext=getParentContextOfType(currentContext,getAndOrNotContextClasses());  Collection<Query<O>> childrenOfParent=this.childQueries.get(parentContext);  if (childrenOfParent == null) {    childrenOfParent=new ArrayList<Query<O>>();    this.childQueries.put(parentContext,childrenOfParent);  }  childrenOfParent.add(parsedQuery);  numQueriesParsed++;}  }
class C{  private void calculate(){  if (type != null)   return;  if (view) {    assert childFilters != null;    boolean collocated=true;    boolean partitioned=false;    int maxMultiplier=MULTIPLIER_COLLOCATED;    for (int i=0; i < childFilters.length; i++) {      GridH2CollocationModel child=child(i,true);      Type t=child.type(true);      if (child.multiplier == MULTIPLIER_REPLICATED_NOT_LAST)       maxMultiplier=child.multiplier;      if (t.isPartitioned()) {        partitioned=true;        if (!t.isCollocated()) {          collocated=false;          int m=child.multiplier(true);          if (m > maxMultiplier) {            maxMultiplier=m;            if (maxMultiplier == MULTIPLIER_REPLICATED_NOT_LAST)             break;          }        }      }    }    type=Type.of(partitioned,collocated);    multiplier=maxMultiplier;  } else {    assert upper != null;    assert childFilters == null;    GridH2Table tbl=(GridH2Table)upper.childFilters[filter].getTable();    if (!tbl.isPartitioned()) {      type=Type.REPLICATED;      multiplier=MULTIPLIER_COLLOCATED;      return;    }    if (!upper.findPartitionedTableBefore(filter)) {      type=Type.PARTITIONED_COLLOCATED;      multiplier=MULTIPLIER_COLLOCATED;    } else {switch (upper.joinedWithCollocated(filter)) {case JOINED_WITH_COLLOCATED:        type=Type.PARTITIONED_COLLOCATED;      multiplier=MULTIPLIER_COLLOCATED;    break;case HAS_AFFINITY_CONDITION:  type=Type.PARTITIONED_NOT_COLLOCATED;multiplier=MULTIPLIER_UNICAST;break;case NONE:type=Type.PARTITIONED_NOT_COLLOCATED;multiplier=MULTIPLIER_BROADCAST;break;default :throw new IllegalStateException();}}if (upper.previousReplicated(filter)) multiplier=MULTIPLIER_REPLICATED_NOT_LAST;}}  }
class C{  synchronized boolean visit() throws IOException {  if (exc != null) {    return true;  }  if (current == null) {    if (iter.hasNext() == false) {      c.close();      return true;    }    Map.Entry<String,FileMetaData> next=iter.next();    FileMetaData metaData=next.getValue();    String fileName=next.getKey();    long len=c.in.readVLong();    if (len != metaData.length) {      throw new IllegalStateException("file " + fileName + ": meta data says length="+ metaData.length+ " but c.in says "+ len);    }    current=new CopyOneFile(c.in,dest,fileName,metaData,copyBuffer);  }  if (current.visit()) {    copiedFiles.put(current.name,current.tmpName);    totBytesCopied+=current.getBytesCopied();    assert totBytesCopied <= totBytes : "totBytesCopied=" + totBytesCopied + " totBytes="+ totBytes;    current=null;    return false;  }  return false;}  }
class C{  protected void doPaethLine(byte[] curLine,byte[] prevLine){  int sub=(int)Math.ceil((getBitsPerComponent() * getColors()) / 8.0);  for (int i=0; i < curLine.length; i++) {    int left=0;    int up=0;    int upLeft=0;    int prevIdx=i - sub;    if (prevIdx >= 0) {      left=curLine[prevIdx] & 0xff;    }    if (prevLine != null) {      up=prevLine[i] & 0xff;    }    if (prevIdx > 0 && prevLine != null) {      upLeft=prevLine[prevIdx] & 0xff;    }    curLine[i]+=(byte)paeth(left,up,upLeft);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.499 -0500",hash_original_method="229999978F856549CB121738FDE882C4",hash_generated_method="FAC82D23424B0049B140FB11B266CA66") public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  private void writeFlowMod(IOFSwitch sw,short command,int bufferId,OFMatch match,short outPort){  OFFlowMod flowMod=(OFFlowMod)floodlightProvider.getOFMessageFactory().getMessage(OFType.FLOW_MOD);  flowMod.setMatch(match);  flowMod.setCookie(LearningSwitch.LEARNING_SWITCH_COOKIE);  flowMod.setCommand(command);  flowMod.setIdleTimeout(LearningSwitch.FLOWMOD_DEFAULT_IDLE_TIMEOUT);  flowMod.setHardTimeout(LearningSwitch.FLOWMOD_DEFAULT_HARD_TIMEOUT);  flowMod.setPriority(LearningSwitch.FLOWMOD_PRIORITY);  flowMod.setBufferId(bufferId);  flowMod.setOutPort((command == OFFlowMod.OFPFC_DELETE) ? outPort : OFPort.OFPP_NONE.getValue());  flowMod.setFlags((command == OFFlowMod.OFPFC_DELETE) ? 0 : (short)(1 << 0));  flowMod.setActions(Arrays.asList((OFAction)new OFActionOutput(outPort,(short)0xffff)));  flowMod.setLength((short)(OFFlowMod.MINIMUM_LENGTH + OFActionOutput.MINIMUM_LENGTH));  if (log.isTraceEnabled()) {    log.trace("{} {} flow mod {}",new Object[]{sw,(command == OFFlowMod.OFPFC_DELETE) ? "deleting" : "adding",flowMod});  }  counterStore.updatePktOutFMCounterStoreLocal(sw,flowMod);  try {    sw.write(flowMod,null);  } catch (  IOException e) {    log.error("Failed to write {} to switch {}",new Object[]{flowMod,sw},e);  }}  }
class C{  public static Class[] resolveAllSuperclasses(Class type){  List<Class> list=new ArrayList<>();  while (true) {    type=type.getSuperclass();    if ((type == null) || (type == Object.class)) {      break;    }    list.add(type);  }  return list.toArray(new Class[list.size()]);}  }
class C{  public boolean isFailure(final int exitValue){  if (this.exitValues == null) {    return false;  } else   if (this.exitValues.length == 0) {    return this.launcher.isFailure(exitValue);  } else {    for (int i=0; i < this.exitValues.length; i++) {      if (this.exitValues[i] == exitValue) {        return false;      }    }  }  return true;}  }
class C{  public BooleanLazyValue(Collection<? super BooleanLazyValue> collection,BooleanSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public GBC gridheight(int height){  gridheight=height;  return this;}  }
class C{  public void addMiscellaneousTaxesClone(final UnitTaxCalculationInfo unit,final UnitTaxCalculationInfo clone){  LOGGER.debug("Entered into addMiscellaneousTaxesClone");  for (  final MiscellaneousTax miscTax : unit.getMiscellaneousTaxes()) {    final MiscellaneousTax newMiscTax=new APMiscellaneousTax();    newMiscTax.setTaxName(miscTax.getTaxName());    newMiscTax.setTotalActualTax(miscTax.getTotalActualTax());    newMiscTax.setTotalCalculatedTax(miscTax.getTotalCalculatedTax());    newMiscTax.setHasChanged(miscTax.getHasChanged());    for (    final MiscellaneousTaxDetail miscTaxDetail : miscTax.getTaxDetails()) {      final MiscellaneousTaxDetail newMiscTaxDetail=new APMiscellaneousTaxDetail();      newMiscTaxDetail.setTaxValue(miscTaxDetail.getTaxValue());      newMiscTaxDetail.setActualTaxValue(miscTaxDetail.getActualTaxValue());      newMiscTaxDetail.setCalculatedTaxValue(miscTaxDetail.getCalculatedTaxValue());      final Calendar calendar=Calendar.getInstance();      calendar.setTime(miscTaxDetail.getFromDate());      newMiscTaxDetail.setFromDate(calendar.getTime());      newMiscTaxDetail.setNoOfDays(miscTaxDetail.getNoOfDays());      newMiscTaxDetail.setIsHistory(miscTaxDetail.getIsHistory());      newMiscTaxDetail.setHistoryALV(miscTaxDetail.getHistoryALV());      newMiscTax.addMiscellaneousTaxDetail(newMiscTaxDetail);    }    clone.addMiscellaneousTaxes(newMiscTax);  }  LOGGER.debug("Exiting from addMiscellaneousTaxesClone");}  }
class C{  public ArrayIndexOutOfBoundsException(int index){}  }
class C{  private boolean updateFields(HttpServletRequest request,MobileSessionCtx wsc,WWindowStatus ws){  boolean error=false;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(MobileEnv.ENCODING);  } catch (  Exception e) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + MobileEnv.ENCODING,e);  }  Enumeration en=request.getParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    if (key.equals(P_Command) || key.equals(P_ChangedColumn) || key.equals(P_MR_RowNo)|| key.equals(P_Tab))     continue;    GridField mField=ws.curTab.getField(key);    if (mField != null && mField.isEditable(true)) {      String oldValue=MobileUtil.getParameter(request,key);      String newValue=MobileUtil.getParameter(request,key + "F");      String value=null;      if (newValue != null) {        Object val=lookupValue(newValue,mField.getLookup());        if (val != null)         value=val.toString();      }      if (value == null)       value=oldValue;      Object dbValue=mField.getValue();      boolean fieldError=false;      String columnName=mField.getColumnName();      log.finest(columnName + ": " + (dbValue == null ? "null" : dbValue.toString())+ " -> "+ (value == null ? "null" : value.toString()));      if (dbValue == null && value == null)       continue; else       if (dbValue != null && value == null)       ws.curTab.setValue(mField,null); else       if (dbValue == null && value != null)       fieldError=!setFieldValue(wsc,ws,mField,value); else       if (dbValue.equals(value))       continue; else       fieldError=!setFieldValue(wsc,ws,mField,value);      if (!error && fieldError) {        log.info("Error: " + mField.getColumnName());        error=true;      }    }  }  return error;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HTMLStripCharFilter(Reader source,Set<String> escapedTags){  super(source);  this.zzReader=source;  if (null != escapedTags) {    for (    String tag : escapedTags) {      if (tag.equalsIgnoreCase("BR")) {        escapeBR=true;      } else       if (tag.equalsIgnoreCase("SCRIPT")) {        escapeSCRIPT=true;      } else       if (tag.equalsIgnoreCase("STYLE")) {        escapeSTYLE=true;      } else {        if (null == this.escapedTags) {          this.escapedTags=new CharArraySet(16,true);        }        this.escapedTags.add(tag);      }    }  }}  }
class C{  public void clear(){  mData.clear();  notifyDataSetChanged();}  }
class C{  public MetaData transformGenerated(MetaData md){  md.addToHistory(outputPort);  return md;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static TestCase readTestCase(String failingTest){  String[] classpath=Properties.CLASSPATH;  String[] sources=Properties.SOURCEPATH;  TestCase testCase=new JUnitTestReader(classpath,sources).readJUnitTestCase(failingTest);  return testCase;}  }
class C{  public final InterestRate equivalentRate(final double t,final Compounding comp,final Frequency freq){  return impliedRate(compoundFactor(t),t,this.dc,comp,freq);}  }
class C{  private static void checkCapacity(final int capacity){  if (capacity <= 1 || (capacity & -capacity) != capacity)   throw new IllegalArgumentException("capacity must be 2^n where n is positive, not " + capacity);}  }
class C{  @Override public void run(){  for (  Map.Entry<String,Handle> entry : this.handles.entrySet()) {    Handle handle=entry.getValue();    if (handle == null) {      continue;    }synchronized (handle) {      if (handle.isAutostart() && handle.getContainerStatus() == State.STOPPED && !handle.isForceStop()) {        StartRequest startRequest=new StartRequest();        startRequest.setParameters(handle.getProperties());        try {          startContainer(startRequest);        } catch (        Throwable e) {        }      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean fireEvent(EventType eventType){  return fireEvent(eventType,new BaseEvent(this));}  }
class C{  public static InputStream decrypt(InputStream encryptedDataStream,File x509CertificateFile,File privateKeyFile,final String privateKeyPassword) throws IOException, CertificateException, EncryptionException {  return new SMIMEDecryptedInputStream(encryptedDataStream,x509CertificateFile,privateKeyFile,privateKeyPassword);}  }
class C{  protected Object buildBinaryObject(String typeName,JdbcTypeField[] fields,Collection<String> hashFields,Map<String,Integer> loadColIdxs,ResultSet rs) throws CacheLoaderException {  try {    BinaryObjectBuilder builder=ignite.binary().builder(typeName);    boolean calcHash=hashFields != null;    Collection<Object> hashValues=calcHash ? new ArrayList<>(hashFields.size()) : null;    for (    JdbcTypeField field : fields) {      Integer colIdx=columnIndex(loadColIdxs,field.getDatabaseFieldName());      Object colVal=transformer.getColumnValue(rs,colIdx,field.getJavaFieldType());      builder.setField(field.getJavaFieldName(),colVal,(Class<Object>)field.getJavaFieldType());      if (calcHash)       hashValues.add(colVal);    }    if (calcHash)     builder.hashCode(hasher.hashCode(hashValues));    return builder.build();  } catch (  SQLException e) {    throw new CacheException("Failed to read binary object: " + typeName,e);  }}  }
class C{  public NativeStatementIterator(RecordIterator btreeIter,ValueStore valueStore) throws IOException {  this.btreeIter=btreeIter;  this.valueStore=valueStore;}  }
class C{  public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,int start,int end){  Iterator<?> it=attributes.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<?,?> entry=(Map.Entry<?,?>)it.next();    addAttribute((AttributedCharacterIterator.Attribute)entry.getKey(),entry.getValue(),start,end);  }}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  return retval.toString();}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.272 -0500",hash_original_method="264DF371DD142B0CCD6F6ECE44A7BFB6",hash_generated_method="293E3E92EE6F12C01ED80607A408DDB1") protected String encodeBody(){  if (address == null)   return null;  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  public static SourceFile[] toSourceFiles(Collection<File> javaFiles){  SourceFile[] dest=new SourceFile[javaFiles.size()];  int i=0;  for (  File javaFile : javaFiles) {    dest[i++]=new SourceFile(javaFile);  }  return dest;}  }
class C{  public void removeAllZeros(){  Iterator<Map.Entry<K,AtomicLong>> entryIterator=map.entrySet().iterator();  while (entryIterator.hasNext()) {    Map.Entry<K,AtomicLong> entry=entryIterator.next();    AtomicLong atomic=entry.getValue();    if (atomic != null && atomic.get() == 0L) {      entryIterator.remove();    }  }}  }
class C{  public SAXRecords ts2saxViaWindowSkipping(double[] ts,int windowSize,int paaSize,double[] cuts,NumerosityReductionStrategy strategy,double nThreshold,ArrayList<Integer> skips) throws SAXException {  SAXRecords saxFrequencyData=new SAXRecords();  Collections.sort(skips);  int cSkipIdx=0;  char[] previousString=null;  boolean skipped=false;  for (int i=0; i < ts.length - (windowSize - 1); i++) {    if (cSkipIdx < skips.size() && i == skips.get(cSkipIdx)) {      cSkipIdx=cSkipIdx + 1;      skipped=true;      continue;    }    double[] subSection=Arrays.copyOfRange(ts,i,i + windowSize);    subSection=tsProcessor.znorm(subSection,nThreshold);    double[] paa=tsProcessor.paa(subSection,paaSize);    char[] currentString=tsProcessor.ts2String(paa,cuts);    if (!(skipped) && null != previousString) {      if (NumerosityReductionStrategy.EXACT.equals(strategy) && Arrays.equals(previousString,currentString)) {        continue;      } else       if (NumerosityReductionStrategy.MINDIST.equals(strategy) && checkMinDistIsZero(previousString,currentString)) {        continue;      }    }    previousString=currentString;    if (skipped) {      skipped=false;    }    saxFrequencyData.add(currentString,i);  }  return saxFrequencyData;}  }
class C{  public static void sort(double[] array){  double temp;  int j, n=array.length;  for (j=n / 2; j > 0; j--) {    adjust(array,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=array[0];    array[0]=array[j];    array[j]=temp;    adjust(array,1,j);  }}  }
class C{  @Override public boolean hasNext(){  return (this.index < this.nodelist.getLength());}  }
class C{  @Override protected String generateJavadoc(int index) throws Exception {  throw new Exception("Not used!");}  }
class C{  public void stop(){  closeShell();  LogWrapper.close();  if (operationInvoker != null && operationInvoker.isConnected()) {    operationInvoker.stop();  }}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  public TermsByQueryRequest types(String... types){  this.types=types;  return this;}  }
class C{  public static ECPoint.F2m tau(ECPoint.F2m p){  if (p.isInfinity()) {    return p;  }  ECFieldElement x=p.getX();  ECFieldElement y=p.getY();  return new ECPoint.F2m(p.getCurve(),x.square(),y.square(),p.isCompressed());}  }
class C{  protected int extend(final int required){  final int capacity=Math.max(required,capacity() * 2);  if (log.isInfoEnabled())   log.info("Extending buffer to capacity=" + capacity + " bytes.");  return capacity;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected void appendOctet(int number){  append(number);}  }
class C{  public int size(){  return components.size();}  }
class C{  public static <T extends DataObject>Map<String,T> mapByProperty(Collection<T> col,String property){  Map<String,T> map=new HashMap<String,T>();  Object prop=null;  for (  T t : col) {    prop=getPropertyValue(t.getClass(),t,property);    if (prop != null) {      map.put(prop.toString(),t);    }  }  return map;}  }
class C{  protected VerletParticle3D createSingleParticle(Vec3D pos,float mass){  return new VerletParticle3D(pos,mass);}  }
class C{  public static boolean hasRedundantFirstNucleotide(final VcfRecord rec){  try {    final Character c=rec.getRefCall().charAt(0);    for (    final String alt : rec.getAltCalls()) {      if (!c.equals(alt.charAt(0))) {        return false;      }    }  } catch (  Exception e) {    System.err.println("rec = " + rec);    throw e;  }  return !rec.getAltCalls().isEmpty();}  }
class C{  private static void s_uakptrace(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  for (int i=rl; i < ru; i++) {    if (!a.isEmpty(i))     kplus.execute2(kbuff,a.get(i,i));  }  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  public static boolean isFileinZip(String fileName,ZipFile zipFile){  try {    Logger.appendLog("[ZipTools][I] about to search " + fileName + " in "+ zipFile.getFile().getAbsolutePath());    @SuppressWarnings("rawtypes") List fileHeaderList=zipFile.getFileHeaders();    for (int i=0; i < fileHeaderList.size(); i++) {      FileHeader fileHeader=(FileHeader)fileHeaderList.get(i);      String name=fileHeader.getFileName();      if (name.length() >= fileName.length())       if (name.contains(fileName)) {        return true;      }    }  } catch (  Exception e) {    Logger.appendLog("[ZipTools][EX] isFileInZip fail trying fail safe mode instead ");    File zip=zipFile.getFile();    try {      return ZipTools.isFileinZipFailSafe(fileName,new java.util.zip.ZipFile(zip));    } catch (    IOException e1) {      e1.printStackTrace();    }  }  return false;}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public InputStream executeDownload(String url,String cookie) throws IOException {  String[][] headerParams=new String[][]{{"Cookie",cookie},{"User-Agent","AndroidDownloadManager/6.0.1 (Linux; U; Android 6.0.1; Nexus 6P Build/MTC19T)"}};  HttpEntity httpEntity=executeGet(url,null,headerParams);  return httpEntity.getContent();}  }
class C{  public NullEngine(int blockSize){  this.blockSize=blockSize;}  }
class C{  public Object cacheInsert(String cacheName,Object key,Object val){  SolrCache cache=cacheMap.get(cacheName);  return cache == null ? null : cache.put(key,val);}  }
class C{  public static String mangleName(String name){  boolean toLower=CauchoUtil.isCaseInsensitive();  CharBuffer cb=new CharBuffer();  cb.append("_");  for (int i=0; i < name.length(); i++) {    char ch=name.charAt(i);    if (ch == '/' || ch == CauchoUtil.getPathSeparatorChar()) {      if (i == 0) {      } else       if (cb.charAt(cb.length() - 1) != '.' && (i + 1 < name.length() && name.charAt(i + 1) != '/'))       cb.append("._");    } else     if (ch == '.')     cb.append("__"); else     if (ch == '_')     cb.append("_0"); else     if (Character.isJavaIdentifierPart(ch))     cb.append(toLower ? Character.toLowerCase(ch) : ch); else     if (ch <= 256)     cb.append("_2" + encodeHex(ch >> 4) + encodeHex(ch)); else     cb.append("_4" + encodeHex(ch >> 12) + encodeHex(ch >> 8)+ encodeHex(ch >> 4)+ encodeHex(ch));  }  if (cb.length() == 0)   cb.append("_z");  return cb.toString();}  }
class C{  private void forceAddCommentToGroup(){  if (hasRemainingComments()) {    group.add(comments.get(lastCommentIndex + 1));  }  lastCommentIndex++;}  }
class C{  public RDN(String name) throws IOException {  this(name,Collections.<String,String>emptyMap());}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public Sample(){  super();}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  private JCExpression makeIndyCall(DiagnosticPosition pos,Type site,Name bsmName,List<Object> staticArgs,MethodType indyType,List<JCExpression> indyArgs,Name methName){  int prevPos=make.pos;  try {    make.at(pos);    List<Type> bsm_staticArgs=List.of(syms.methodHandleLookupType,syms.stringType,syms.methodTypeType).appendList(bsmStaticArgToTypes(staticArgs));    Symbol bsm=rs.resolveInternalMethod(pos,attrEnv,site,bsmName,bsm_staticArgs,List.<Type>nil());    DynamicMethodSymbol dynSym=new DynamicMethodSymbol(methName,syms.noSymbol,bsm.isStatic() ? ClassFile.REF_invokeStatic : ClassFile.REF_invokeVirtual,(MethodSymbol)bsm,indyType,staticArgs.toArray());    JCFieldAccess qualifier=make.Select(make.QualIdent(site.tsym),bsmName);    qualifier.sym=dynSym;    qualifier.type=indyType.getReturnType();    JCMethodInvocation proxyCall=make.Apply(List.<JCExpression>nil(),qualifier,indyArgs);    proxyCall.type=indyType.getReturnType();    return proxyCall;  }  finally {    make.at(prevPos);  }}  }
class C{  public Boolean between(final Date date,final Date fromDate,final Date toDate){  return (date.after(fromDate) || date.equals(fromDate)) && date.before(toDate) || date.equals(toDate);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static void showKeyboardInDialog(Dialog dialog,EditText target){  if (dialog == null || target == null) {    return;  }  dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);  target.requestFocus();}  }
class C{  public Boolean isPerformObjectUpgrade(){  return performObjectUpgrade;}  }
class C{  public ConnectionConsumer createConnectionConsumer(Connection connection,Destination destination,ServerSessionPool ssp) throws JMSException {  return connection.createConnectionConsumer(destination,null,ssp,1);}  }
class C{  private static final VelocityEngine createEngine(String lib){  VelocityEngine ve=new VelocityEngine();  ve.setProperty(Velocity.RUNTIME_LOG_LOGSYSTEM_CLASS,LOGSYSTEM_CLASS);  ve.setProperty(Velocity.RUNTIME_LOG_ERROR_STACKTRACE,"false");  ve.setProperty(Velocity.RUNTIME_LOG_REFERENCE_LOG_INVALID,"true");  ve.setProperty(Velocity.UBERSPECT_CLASSNAME,STRICT_UBERSPECT_IMPL_CLASS);  ve.setProperty(Velocity.RESOURCE_LOADER,"file,class");  ve.setProperty("class." + Velocity.RESOURCE_LOADER + ".class",CLASSPATH_RESOURCE_LOADER_CLASS);  ve.setProperty(Velocity.VM_LIBRARY,"");  try {    ve.init();  } catch (  Exception e) {    ThreadLocalToolkit.log(new InitializationError(e.getLocalizedMessage()));  }  if (lib != null && ve != null) {    getTemplate(lib,ve);  }  return ve;}  }
class C{  private long createQueueIfNecessaryAndGetID(ClientSession session,Queue queue,SimpleString addressName) throws Exception {  long queueID=getQueueID(session,queue.getName());  if (queueID == -1) {    session.createQueue(addressName,queue.getName(),queue.getFilter() == null ? null : queue.getFilter().getFilterString(),queue.isDurable());    logger.debug("Failed to get queue ID, creating queue [addressName=" + addressName + ", queueName="+ queue.getName()+ ", filter="+ (queue.getFilter() == null ? "" : queue.getFilter().getFilterString())+ ", durable="+ queue.isDurable()+ "]");    queueID=getQueueID(session,queue.getName());  }  logger.debug("ID for " + queue + " is: "+ queueID);  return queueID;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private static ServiceFieldRestRep findFieldByAssetType(String assetType,Collection<ServiceFieldRestRep> fields,Map<String,ServiceFieldRestRep> providedFields){  ServiceFieldRestRep field=findFieldByAssetType(assetType,fields);  if (field != null) {    return field;  }  field=providedFields.get(assetType);  if (field != null) {    return field;  }  throw new IllegalArgumentException("No Field of type " + assetType);}  }
class C{  @Override public final K acquire(){  K ctx=null;  final Reference<K> ref=ctxTL.get();  if (ref != null) {    ctx=ref.get();  }  if (ctx == null) {    ctx=newContext();    ctxTL.set(getOrCreateReference(ctx));  }  if (ctx.usage == USAGE_TL_INACTIVE) {    ctx.usage=USAGE_TL_IN_USE;  } else {    ctx=ctxProviderCLQ.acquire();  }  return ctx;}  }
class C{  public void applyToBackground(View view){  if (mColorInt != 0) {    view.setBackgroundColor(mColorInt);  } else   if (mColorRes != -1) {    view.setBackgroundResource(mColorRes);  }}  }
class C{  @Override public void refreshLastRequest(String sessionId){}  }
class C{  public Builder size(int val){  if (val == 0) {    throw new IllegalArgumentException("0 is not a valid size");  }  this.size=val;  return this;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public void putDouble(String key,double value){  checkForNullKey(key);  putString(key,String.valueOf(value));}  }
class C{  protected boolean canAnimateType(int type){  return true;}  }
class C{  public void add(final RPObject object,final boolean expire){  add(object,null,expire);}  }
class C{  public void writeMetadataDocument() throws ODataRenderException {  try {    xmlWriter.writeStartElement(EDMX_NS,EDMX);    xmlWriter.writeNamespace(EDMX_PREFIX,EDMX_NS);    xmlWriter.writeAttribute(VERSION,ODATA_VERSION);    xmlWriter.writeStartElement(EDMX_NS,EDMX_DATA_SERVICES);    boolean entityContinerWritten=false;    for (    Schema schema : entityDataModel.getSchemas()) {      xmlWriter.writeStartElement(SCHEMA);      xmlWriter.writeDefaultNamespace(EDM_NS);      xmlWriter.writeAttribute(NAMESPACE,schema.getNamespace());      for (      Type type : schema.getTypes()) {switch (type.getMetaType()) {case ENTITY:          entityTypeWriter.write((EntityType)type);        break;case COMPLEX:      complexTypeWriter.write((ComplexType)type);    break;case ENUM:  enumTypeWriter.write((EnumType)type);break;default :LOG.error("Unexpected type: {}",type.getFullyQualifiedName());throw new ODataRenderException("Unexpected type: " + type.getFullyQualifiedName());}}if (!entityContinerWritten) {writeEntityContainer(entityDataModel.getEntityContainer());entityContinerWritten=true;}xmlWriter.writeEndElement();}xmlWriter.writeEndElement();} catch (XMLStreamException e) {LOG.error("Not possible to start stream XML");throw new ODataRenderException("Not possible to start stream XML: ",e);}}  }
class C{  public O option(){  return option;}  }
class C{  public InlineConstantDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INLINE_CONSTANT,project,description,comment,arguments,flags);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static SubqueryTable fromQuery(Query query,String name,Class<? extends ViewModel> modelClass,Property<?>[] properties){  return new SubqueryTable(modelClass,properties,name,query);}  }
class C{  public final boolean isDead(){  return !isActive();}  }
class C{  private void clearForceAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.clearForce.warning"),body.getName()),Messages.getString("menu.context.body.clearForce.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.clearAccumulatedForce();        }      }    }  }}  }
class C{  private static int med3(double x[],int a,int b,int c,DoubleComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public PositionLayer(Image image){  this(new ImageView(image),image.getWidth() / -2.0,image.getHeight() / -2.0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addFilePart(String fieldName,File uploadFile) throws IOException {  String fileName=uploadFile.getName();  writer.append("--" + boundary).append(LINE_FEED);  writer.append("Content-Disposition: form-data; name=\"" + fieldName + "\"; filename=\""+ fileName+ "\"").append(LINE_FEED);  writer.append("Content-Type: " + URLConnection.guessContentTypeFromName(fileName)).append(LINE_FEED);  writer.append("Content-Transfer-Encoding: binary").append(LINE_FEED);  writer.append(LINE_FEED);  writer.flush();  FileInputStream inputStream=new FileInputStream(uploadFile);  byte[] buffer=new byte[4096];  int bytesRead=-1;  while ((bytesRead=inputStream.read(buffer)) != -1) {    outputStream.write(buffer,0,bytesRead);  }  outputStream.flush();  inputStream.close();  writer.append(LINE_FEED);  writer.flush();}  }
class C{  @Override public BasicEffect ground(Assignment grounding){  Template newT=Template.create(labelTemplate.fillSlots(grounding));  Template newV=Template.create(valueTemplate.fillSlots(grounding));  if (newT.isUnderspecified() || (newV.isUnderspecified())) {    return new TemplateEffect(newT,newV,priority,exclusive,negated);  } else {    return new BasicEffect(newT.toString(),ValueFactory.create(newV.toString()),priority,exclusive,negated);  }}  }
class C{  private ConversionMethod verifyConversionExistence(List<ConversionMethod> conversions){  for (  ConversionMethod method : conversions)   if (isPresentIn(method.getFrom(),sourceName) && isPresentIn(method.getTo(),destinationName))   return method;  return null;}  }
class C{  @Override public void joinTransaction(EntityContext newContext,EntityContext context){  ConnectionResources conRes=ConnectionResources.get(context);  if (conRes != null) {    ConnectionResources.set(newContext,conRes.getConnection(),conRes.getDatabase());  }}  }
class C{  public InitiatorRestRep register(URI id){  return client.post(InitiatorRestRep.class,getIdUrl() + "/register",id);}  }
class C{  protected void notifyMessage(String message){synchronized (listeners) {    for (    INodejsProcessListener listener : listeners) {      listener.onMessage(this,message);    }  }}  }
class C{  public PageViewSystem(PageViewSystem other){}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public static void insertNewFunctionIntoCfgFunctions(@NotNull SQFConfigFunctionInformationHolder newFunction) throws GenericConfigException {  HeaderClassDeclaration cfgFunctions=getCfgFunctions(newFunction.module);  HeaderClassDeclaration definedTagClass=null;  HeaderClassDeclaration definedContainerClass=null;  Attribute[] tagAttribute={new Attribute("tag","\"" + newFunction.functionTagName + "\"")};  Attribute[] fileAttribute={new Attribute("file","\"" + newFunction.functionLocation + "\"")};  ArrayList<HeaderClassDeclaration> tagClasses=getClassDeclarationsWithEntriesEqual(cfgFunctions,null,null,true,1,1);  for (  HeaderClassDeclaration tagClass : tagClasses) {    if (tagClass.hasAttributes(tagAttribute,true)) {      definedTagClass=tagClass;    }  }  if (definedTagClass == null) {    for (    HeaderClassDeclaration tagClass : tagClasses) {      if (tagClass.getClassName().equals(newFunction.functionTagName)) {        definedTagClass=tagClass;      }    }  }  if (definedTagClass == null) {    definedTagClass=cfgFunctions.addClassDeclaration("Tag_Class_" + newFunction.functionTagName,tagAttribute);  }  ArrayList<HeaderClassDeclaration> containerClasses=getClassDeclarationsWithEntriesEqual(definedTagClass,null,null,true,1,1);  for (  HeaderClassDeclaration containerClass : containerClasses) {    if (containerClass.hasAttributes(fileAttribute,true)) {      definedContainerClass=containerClass;    }  }  if (definedContainerClass == null) {    String name="Container_Class_" + System.currentTimeMillis();    definedContainerClass=definedTagClass.addClassDeclaration(name,fileAttribute);  }  definedContainerClass.addClassDeclaration(newFunction.functionClassName,newFunction.attributes);}  }
class C{  public Concat(){  super("text_transformation.concat",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS);}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public boolean isBreakPoint(int line){  return sourceInfo.breakableLine(line) && sourceInfo.breakpoint(line);}  }
class C{  public void selectInList(int[] path,int offset){  TestUtils.selectInList(path,offset);}  }
class C{  private void appendLinearRingTaggedText(LinearRing linearRing,int level,Writer writer) throws IOException {  appendLineString(linearRing,level,false,writer);}  }
class C{  public Socket(){  setImpl();}  }
class C{  public void waitForFormTitle(final String title){  TestUtils.waitForFormTitle(title);}  }
class C{  public Option(String modelDir){  if (modelDir.endsWith(File.separator)) {    this.modelDir=modelDir.substring(0,modelDir.length() - 1);  } else {    this.modelDir=modelDir;  }}  }
class C{  public ClientMessage browseMessage(String queueName){  return browseMessage(SimpleString.toSimpleString(queueName),defaultReceiveTimeout);}  }
class C{  public static JMenu leftShift(JMenu self,GString gstr){  self.add(gstr.toString());  return self;}  }
class C{  private boolean isNodeEdgeAreaLabelsConsistent(){  for (Iterator nodeIt=nodeGraph.getNodeIterator(); nodeIt.hasNext(); ) {    RelateNode node=(RelateNode)nodeIt.next();    if (!node.getEdges().isAreaLabelsConsistent(geomGraph)) {      invalidPoint=(Coordinate)node.getCoordinate().clone();      return false;    }  }  return true;}  }
class C{  public void inheritDocOnly(int i){}  }
class C{  protected void drawBackground(Canvas canvas){  if (mHasSelectedDay) {    p.setColor(mSelectedWeekBGColor);    p.setStyle(Style.FILL);  } else {    return;  }  r.top=1;  r.bottom=mHeight - 1;  r.left=mPadding;  r.right=mSelectedLeft;  canvas.drawRect(r,p);  r.left=mSelectedRight;  r.right=mWidth - mPadding;  canvas.drawRect(r,p);}  }
class C{  private void rotateRight(Node<K,V> root){  Node<K,V> pivot=root.left;  Node<K,V> right=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.left=pivotRight;  if (pivotRight != null) {    pivotRight.parent=root;  }  replaceInParent(root,pivot);  pivot.right=root;  root.parent=pivot;  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;}  }
class C{  public static void equals(Object object1,Object object2){  checkAssertion(object1.equals(object2),null);}  }
class C{  @Override public final Id<Link> chooseNextLinkId(){  if (this.cachedNextLinkId != null && !(this.cachedNextLinkId.equals(this.getCurrentLinkId()))) {    return this.cachedNextLinkId;  }  if (!(this.basicPlanAgentDelegate.getCurrentLeg().getRoute() instanceof NetworkRoute)) {    return null;  }  List<Id<Link>> routeLinkIds=((NetworkRoute)this.basicPlanAgentDelegate.getCurrentLeg().getRoute()).getLinkIds();  if (this.basicPlanAgentDelegate.getCurrentLinkIndex() >= routeLinkIds.size()) {    if (this.getCurrentLinkId().equals(this.getDestinationLinkId()) && this.basicPlanAgentDelegate.getCurrentLinkIndex() > routeLinkIds.size()) {      return null;    }    this.cachedNextLinkId=this.getDestinationLinkId();    return this.cachedNextLinkId;  }  this.cachedNextLinkId=routeLinkIds.get(this.basicPlanAgentDelegate.getCurrentLinkIndex());  return this.cachedNextLinkId;}  }
class C{  private void appendShapeOutline(Shape s){  if (!drawingComponent || !trackingAllowed || s.equals(lastShape)) {    return;  }  lastShape=s;  PathIterator pathIterator=s.getPathIterator(null);  double thickness;  if (getStroke() instanceof BasicStroke) {    thickness=((BasicStroke)getStroke()).getLineWidth() + 2 * LINE_SENSITIVITY_MARGIN;  } else {    thickness=2 * LINE_SENSITIVITY_MARGIN;  }  Point2D prevPoint=null;  while (!pathIterator.isDone()) {    double[] coord=new double[6];    int type=pathIterator.currentSegment(coord);switch (type) {case PathIterator.SEG_MOVETO:      prevPoint=new Point2D.Double(coord[0],coord[1]);    break;case PathIterator.SEG_LINETO:  Point2D nextPoint=new Point2D.Double(coord[0],coord[1]);Double theta=Math.atan2(nextPoint.getY() - prevPoint.getY(),nextPoint.getX() - prevPoint.getX());double width=Math.sqrt(Math.pow(nextPoint.getX() - prevPoint.getX(),2) + Math.pow(nextPoint.getY() - prevPoint.getY(),2));double midX=(prevPoint.getX() + nextPoint.getX()) / 2;double midY=(prevPoint.getY() + nextPoint.getY()) / 2;Rectangle2D rect=new Rectangle2D.Double(midX - width / 2,midY - thickness / 2,width,thickness);Area area=new Area(rect);area.transform(AffineTransform.getRotateInstance(theta,midX,midY));appendShape(area);prevPoint=nextPoint;break;case PathIterator.SEG_CUBICTO:CubicCurve2D cubicCurve=new CubicCurve2D.Double(prevPoint.getX(),prevPoint.getY(),coord[0],coord[1],coord[2],coord[3],coord[4],coord[5]);addCubicCurveArea(cubicCurve);prevPoint=new Point2D.Double(coord[4],coord[5]);break;case PathIterator.SEG_QUADTO:QuadCurve2D quadCurve=new QuadCurve2D.Double(prevPoint.getX(),prevPoint.getY(),coord[0],coord[1],coord[2],coord[3]);addQuadCurveArea(quadCurve);prevPoint=new Point2D.Double(coord[3],coord[3]);break;}pathIterator.next();}}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("kafkaClientPublisher");  TStream<String> msgs=t.poll(new MsgSupplier(options.get(OPT_PUB_CNT)),1L,TimeUnit.SECONDS);  Map<String,Object> config=newConfig();  KafkaProducer kafka=new KafkaProducer(t,null);  kafka.publish(msgs,options.get(OPT_TOPIC));  return t;}  }
class C{  protected void parseMetadata(String s){  String[] kvs=s.split(";");  for (  String kv : kvs) {    int n=kv.indexOf('=');    if (n < 1)     continue;    boolean isString=n + 1 < kv.length() && kv.charAt(kv.length() - 1) == '\'' && kv.charAt(n + 1) == '\'';    String key=kv.substring(0,n);    String val=isString ? kv.substring(n + 2,kv.length() - 1) : n + 1 < kv.length() ? kv.substring(n + 1) : "";    if (playerCallback != null)     playerCallback.playerMetadata(key,val);  }}  }
class C{  public static void copyStream(final InputStream fromStream,final OutputStream toStream) throws IOException {  byte[] buffer=new byte[4096];  int bytesRead;  while ((bytesRead=fromStream.read(buffer)) != -1) {    toStream.write(buffer,0,bytesRead);  }}  }
class C{  public ReuseResult(Bitmap res,boolean isReused){  this.res=res;  this.isReused=isReused;}  }
class C{  public SQLTimeoutException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public XMLString newstr(FastStringBuffer fsb,int start,int length){  return new XStringForFSB(fsb,start,length);}  }
class C{  static int findStartTrimBlanks(CharSequence s){  final int len=s.length();  for (int i=0; i < len; i++) {    final char ch=s.charAt(i);    if (ch != ' ' && ch != '\t') {      return i;    }  }  return len;}  }
class C{  public void addExtractor(ExtractorItem extractorItem,LinkedList<Cluster[]> listOfCodebooks){  if (docsCreated)   throw new UnsupportedOperationException("Cannot modify builder after documents have been created!");  if (!extractorItem.isLocal())   throw new UnsupportedOperationException("ExtractorItem must contain LocalFeatureExtractor");  if ((!(listOfCodebooks.size() > 0)) || (listOfCodebooks == null))   throw new UnsupportedOperationException("List of codebooks cannot be empty or null!!");  HashMap<Integer,String[]> mapOfFieldNames=new HashMap<Integer,String[]>(listOfCodebooks.size());  String fieldName=extractorItem.getFieldName() + aggregator.getFieldName();  String[] strArr;  for (  Cluster[] codebook : listOfCodebooks) {    strArr=new String[2];    strArr[0]=fieldName + codebook.length;    strArr[1]=fieldName + codebook.length + "Str";    mapOfFieldNames.put(codebook.length,strArr);  }  extractorItems.put(extractorItem,listOfCodebooks);  fieldNamesDictionary.put(extractorItem,mapOfFieldNames);}  }
class C{  public boolean addFriendBytes(byte[] friend){  if (friend == null) {    throw new IllegalArgumentException("Null friend added through addFriendBytes()");  }  return addFriend(bytesToBase64(friend));}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  RouteLineNodeTableDao.dropTable(db,ifExists);  PlanNodeTableDao.dropTable(db,ifExists);}  }
class C{  @Override public Rectangle2D drawImage(final BufferedImage img,final FileDrawingAttributes attributes){  if (sceneBuffer.getSceneToUpdate() == null) {    return null;  }  if (attributes.size == null) {    attributes.size=new GamaPoint(data.getEnvWidth(),data.getEnvHeight());  }  sceneBuffer.getSceneToUpdate().addImage(img,attributes);  if (attributes.border != null) {    drawGridLine(new GamaPoint(img.getWidth(),img.getHeight()),attributes.border);  }  return rect;}  }
class C{  public SimpleConnection(String name,String identifier,GuacamoleConfiguration config){  setName(name);  setIdentifier(identifier);  setConfiguration(config);  this.config=config;}  }
class C{  public void start(){  LocoNetMessage l=new LocoNetMessage(4);  l.setElement(0,LnConstants.OPC_RQ_SL_DATA);  l.setElement(1,CONFIG_SLOT);  l.setElement(2,0);  l.setElement(3,0);  memo.getLnTrafficController().sendLocoNetMessage(l);}  }
class C{  public void initialize() throws Exception {  m_RunNumber=getRunLower();  m_DatasetNumber=0;  m_PropertyNumber=0;  m_CurrentProperty=-1;  m_CurrentInstances=null;  m_Finished=false;  if (m_UsePropertyIterator && (m_PropertyArray == null)) {    throw new Exception("Null array for property iterator");  }  if (getRunLower() > getRunUpper()) {    throw new Exception("Lower run number is greater than upper run number");  }  if (getDatasets().size() == 0) {    throw new Exception("No datasets have been specified");  }  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  determineAdditionalResultMeasures();  m_ResultProducer.setResultListener(m_ResultListener);  m_ResultProducer.setAdditionalMeasures(m_AdditionalMeasures);  m_ResultProducer.preProcess();  String[] columnConstraints=m_ResultListener.determineColumnConstraints(m_ResultProducer);  if (columnConstraints != null) {    m_ResultProducer.setAdditionalMeasures(columnConstraints);  }}  }
class C{  void insertAttribute(NewAttribute attribute,Element owner){  final int len=xml.length;  xml=insertInto(xml,owner.start.right,' ' + attribute.asString());  shiftSegments(owner.start.left - 1,xml.length - len);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.208 -0500",hash_original_method="ADBD30E20976E5F84799D2EDCA6E8AB1",hash_generated_method="1AFF1F6B4A9BC5B821DD335B04F8E0E9") public UnknownServiceException(){}  }
class C{  private void verifyNameConstraints(X509Certificate currCert) throws CertPathValidatorException {  String msg="name constraints";  if (debug != null) {    debug.println("---checking " + msg + "...");  }  if (prevNC != null && ((i == certPathLength) || !X509CertImpl.isSelfIssued(currCert))) {    if (debug != null) {      debug.println("prevNC = " + prevNC + ", currDN = "+ currCert.getSubjectX500Principal());    }    try {      if (!prevNC.verify(currCert)) {        throw new CertPathValidatorException(msg + " check failed",null,null,-1,PKIXReason.INVALID_NAME);      }    } catch (    IOException ioe) {      throw new CertPathValidatorException(ioe);    }  }  prevNC=mergeNameConstraints(currCert,prevNC);  if (debug != null)   debug.println(msg + " verified.");}  }
class C{  public static synchronized void appendLog(String str){  getlogFileName();  long yourmilliseconds=System.currentTimeMillis();  SimpleDateFormat sdf=new SimpleDateFormat("[HH:mm:ss]");  Date resultdate=new Date(yourmilliseconds);  if (logToStd)   System.out.println(sdf.format(resultdate) + str);  BufferedWriter out;  try {    out=new BufferedWriter(new FileWriter(LOG_FILE.getAbsolutePath(),true));    out.write(sdf.format(resultdate) + str);    if (!str.endsWith("\n"))     ;    out.newLine();    out.flush();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void updateBusinessObjectDataStatusImpl(BusinessObjectDataKey businessObjectDataKey,String businessObjectDataStatus){  businessObjectDataDaoHelper.updateBusinessObjectDataStatus(businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey),businessObjectDataStatus);}  }
class C{  public void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  private Ref expoOp() throws PageException {  Ref ref=unaryOp();  while (cfml.isValidIndex() && (cfml.forwardIfCurrent('^') || cfml.forwardIfCurrent("exp"))) {    cfml.removeSpace();    ref=new Exp(ref,unaryOp());  }  return ref;}  }
class C{  public void add(int index,Object element){  content.beforeInsert(index,element);  modCount++;}  }
class C{  public SsaRenamer(SsaMethod ssaMeth,int thresh){  this(ssaMeth);  threshold=thresh;}  }
class C{  public static boolean floatEqual(float a,float b,float precision){  return java.lang.Math.abs(a - b) <= precision;}  }
class C{  public static boolean isRTL(CharSequence s,int start,int end){  if (s == null || s.length() == 0) {    return isRTL(Locale.getDefault());  }  if (start == end) {    start=Math.max(0,--start);    if (start == end) {      end=Math.min(s.length(),++end);    }  }  try {    Bidi bidi=new Bidi(s.subSequence(start,end).toString(),Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);    return !bidi.baseIsLeftToRight();  } catch (  IndexOutOfBoundsException e) {    return false;  }}  }
class C{  public boolean isRegistered(){  return mRegistration.isRegistered();}  }
class C{  protected double[] makeDistribution(Instances neighbours,double[] distances) throws Exception {  double total=0, weight;  double[] distribution=new double[m_NumClasses];  if (m_ClassType == Attribute.NOMINAL) {    for (int i=0; i < m_NumClasses; i++) {      distribution[i]=1.0 / Math.max(1,m_Train.numInstances());    }    total=(double)m_NumClasses / Math.max(1,m_Train.numInstances());  }  for (int i=0; i < neighbours.numInstances(); i++) {    Instance current=neighbours.instance(i);    distances[i]=distances[i] * distances[i];    distances[i]=Math.sqrt(distances[i] / m_NumAttributesUsed);switch (m_DistanceWeighting) {case WEIGHT_INVERSE:      weight=1.0 / (distances[i] + 0.001);    break;case WEIGHT_SIMILARITY:  weight=1.0 - distances[i];break;default :weight=1.0;break;}weight*=current.weight();try {switch (m_ClassType) {case Attribute.NOMINAL:distribution[(int)current.classValue()]+=weight;break;case Attribute.NUMERIC:distribution[0]+=current.classValue() * weight;break;}} catch (Exception ex) {throw new Error("Data has no class attribute!");}total+=weight;}if (total > 0) {Utils.normalize(distribution,total);}return distribution;}  }
class C{  public static void putInt(final String key,final int value){  final Editor editor=getOptimusPref().edit();  editor.putInt(key,value).apply();}  }
class C{  public TestPingedEvent(final String sessionId,final String testId,final long timeout,final String comment){  super(sessionId);  this.testId=testId;  this.timeout=timeout;  this.comment=fromNullable(comment);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.231 -0500",hash_original_method="7C2143BAA8152610397375F7B6D253AB",hash_generated_method="73231264E9616A58A51CB5AF770D3937") private static boolean isNavigationKey(KeyEvent keyEvent){switch (keyEvent.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:case KeyEvent.KEYCODE_DPAD_RIGHT:case KeyEvent.KEYCODE_DPAD_UP:case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_MOVE_HOME:case KeyEvent.KEYCODE_MOVE_END:case KeyEvent.KEYCODE_TAB:case KeyEvent.KEYCODE_SPACE:case KeyEvent.KEYCODE_ENTER:    return true;}return false;}  }
class C{  public MultilineComment_ createMultilineComment_(){  MultilineComment_Impl multilineComment_=new MultilineComment_Impl();  return multilineComment_;}  }
class C{  public void logTrace(Object message){  logInternal(TRACE,message,null);}  }
class C{  public void resetFragments(int position,boolean allowingStateLoss){  this.mCurrentPosition=position;  FragmentTransaction transaction=mFragmentManager.beginTransaction();  removeAll(transaction);  add(position,transaction);  if (allowingStateLoss) {    transaction.commitAllowingStateLoss();  } else {    transaction.commit();  }}  }
class C{  private void addKnownRates(){  final Date maxDate=Date.maxDate();  add(new ExchangeRate(new EURCurrency(),new ATSCurrency(),13.7603),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new BEFCurrency(),40.3399),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new DEMCurrency(),1.95583),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new ESPCurrency(),166.386),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new FIMCurrency(),5.94573),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new FRFCurrency(),6.55957),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new GRDCurrency(),340.750),new Date(1,Month.January,2001),maxDate);  add(new ExchangeRate(new EURCurrency(),new IEPCurrency(),0.787564),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new ITLCurrency(),1936.27),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new LUFCurrency(),40.3399),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new NLGCurrency(),2.20371),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new EURCurrency(),new PTECurrency(),200.482),new Date(1,Month.January,1999),maxDate);  add(new ExchangeRate(new TRYCurrency(),new TRLCurrency(),1000000.0),new Date(1,Month.January,2005),maxDate);  add(new ExchangeRate(new RONCurrency(),new ROLCurrency(),10000.0),new Date(1,Month.July,2005),maxDate);  add(new ExchangeRate(new PENCurrency(),new PEICurrency(),1000000.0),new Date(1,Month.July,1991),maxDate);  add(new ExchangeRate(new PEICurrency(),new PEHCurrency(),1000.0),new Date(1,Month.February,1985),maxDate);}  }
class C{  public boolean visit(ThisExpression node){  return true;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final MessageAction messageCommand=(MessageAction)SlashActionRepository.get("msg");  if ((messageCommand == null) || (messageCommand.getLastPlayerTell() == null) || remainder.isEmpty()) {    return false;  }  final RPAction tell=new RPAction();  tell.put("type","tell");  tell.put("target",messageCommand.getLastPlayerTell());  tell.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(tell);  return true;}  }
class C{  public E removeLast(){  return remove(header.previous);}  }
class C{  @Override public boolean hasNoDefenseShield(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && (m.curMode().equals(MiscType.S_NO_SHIELD) || isShutDown() || getCrew().isKoThisRound()|| getCrew().isUnconscious())) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  public List typeParameters(){  if (this.typeParameters == null) {    unsupportedIn2();  }  return this.typeParameters;}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException();  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int rowsLessOne=rows - 1;    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    if (myHost != null) {      DEM.setCommunicator(myHost);      output.setCommunicator(myHost);    }    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                flowDir=1 << i;              }            }            if (dist == gridRes) {              dist=diagGridRes;            } else {              dist=gridRes;            }          }          if (maxSlope > 0) {            output.setValue(row,col,flowDir);          } else {            output.setValue(row,col,0);          }        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RectF fill(final PDFRenderer state,final Canvas g,final Path s){  g.drawPath(s,mainPaint);  final RectF bounds=new RectF();  final RectF result=new RectF();  s.computeBounds(bounds,false);  g.getMatrix().mapRect(result,bounds);  return bounds;}  }
class C{  @Nullable private String readInheritAttribute(IXMLElement elem,String attributeName,@Nullable String defaultValue){  if (elem.hasAttribute(attributeName,SVG_NAMESPACE)) {    String value=elem.getAttribute(attributeName,SVG_NAMESPACE,null);    if (value.equals("inherit")) {      return readInheritAttribute(elem.getParent(),attributeName,defaultValue);    } else {      return value;    }  } else   if (elem.hasAttribute(attributeName)) {    String value=elem.getAttribute(attributeName,"");    if (value.equals("inherit")) {      return readInheritAttribute(elem.getParent(),attributeName,defaultValue);    } else {      return value;    }  } else   if (elem.getParent() != null && (elem.getParent().getNamespace() == null || elem.getParent().getNamespace().equals(SVG_NAMESPACE))) {    return readInheritAttribute(elem.getParent(),attributeName,defaultValue);  } else {    return defaultValue;  }}  }
class C{  public boolean addClass(OwlClass targetClass){  targetClass.addQCRestriction(this);  return qcClasses.add(targetClass);}  }
class C{  public Person(){}  }
class C{  public static boolean diff(Vector a,Vector b){  if (a == null) {    return (b == null ? false : true);  }  if (b == null) {    return true;  }  if (a.size() != b.size()) {    Debug.log("  diff: size");    return true;  }  for (int i=0; i < a.size(); i++) {    Object oa=a.elementAt(i);    Object ob=b.elementAt(i);    if (!oa.equals(ob)) {      Debug.log("  diff: " + oa + " with "+ ob);      return true;    }  }  return false;}  }
class C{  public double[] RGBtoIHS(double r,double g,double b){  double[] ret=new double[3];  double i, h, s;  double minRGB=b;  i=r + g + b;  if (g < minRGB) {    minRGB=g;  }  if (r < minRGB) {    minRGB=r;  }  if (i == 3) {    h=0;  } else   if (b == minRGB) {    h=(g - b) / (i - 3 * b);  } else   if (r == minRGB) {    h=(b - r) / (i - 3 * r) + 1;  } else {    h=(r - g) / (i - 3 * g) + 2;  }  if (h <= 1) {    s=(i - 3 * b) / i;  } else   if (h <= 2) {    s=(i - 3 * r) / i;  } else {    s=(i - 3 * g) / i;  }  ret[0]=i;  ret[1]=h;  ret[2]=s;  return ret;}  }
class C{  private static void checkException(FileChannel fc,long size,Class<?>... expected) throws IOException {  Exception exc=null;  try {    fc.truncate(size);  } catch (  Exception actual) {    exc=actual;  }  if (exc != null) {    for (    Class<?> clazz : expected) {      if (clazz.isInstance(exc)) {        return;      }    }  }  System.err.println("Expected one of");  for (  Class<?> clazz : expected) {    System.err.println(clazz);  }  if (exc == null) {    throw new RuntimeException("No expection thrown");  } else {    throw new RuntimeException("Unexpected exception thrown",exc);  }}  }
class C{  public void reloadContainer(Component cnt){  Container newCnt=createContainer(fetchResourceFile(),cnt.getName(),(EmbeddedContainer)cnt.getParent());  beforeShowContainer(newCnt);  cnt.getParent().replace(cnt,newCnt,null);  postShowContainer(newCnt);}  }
class C{  protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.FALSE);  conn.sendRequestHeader(request);  if (request instanceof HttpEntityEnclosingRequest) {    boolean sendentity=true;    final ProtocolVersion ver=request.getRequestLine().getProtocolVersion();    if (((HttpEntityEnclosingRequest)request).expectContinue() && !ver.lessEquals(HttpVersion.HTTP_1_0)) {      conn.flush();      int tms=request.getParams().getIntParameter(CoreProtocolPNames.WAIT_FOR_CONTINUE,2000);      if (conn.isResponseAvailable(tms)) {        response=conn.receiveResponseHeader();        if (canResponseHaveBody(request,response)) {          conn.receiveResponseEntity(response);        }        int status=response.getStatusLine().getStatusCode();        if (status < 200) {          if (status != HttpStatus.SC_CONTINUE) {            throw new ProtocolException("Unexpected response: " + response.getStatusLine());          }          response=null;        } else {          sendentity=false;        }      }    }    if (sendentity) {      conn.sendRequestEntity((HttpEntityEnclosingRequest)request);    }  }  conn.flush();  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.TRUE);  return response;}  }
class C{  @POST @Path("change/enabled") public void changeChangeEnabledState(ChangeEnabledState state) throws RefactoringException {  manager.changeChangeEnabled(state);}  }
class C{  private void doTextFontSubst(final PDFPage cmds,final String text){  final PointF zero=new PointF();  final Matrix scale=new Matrix();  Utils.setMatValues(scale,fsize,0,0,fsize * th,0,tr);  final Matrix at=new Matrix();  at.set(cur);  at.preConcat(scale);  PDFNativeTextCmd ntx=new PDFNativeTextCmd(text,at);  cmds.addCommand(ntx);  for (int i=0; i < text.length(); i++) {    char c=text.charAt(0);    float width=0.6f;    if (font instanceof OutlineFont)     width=((OutlineFont)font).getWidth(c,null);    float advanceX=(width * fsize) + tc;    if (c == ' ') {      advanceX+=tw;    }    advanceX*=th;    cur.preTranslate(advanceX,0);  }  final float[] src={zero.x,zero.y};  final float[] dst=new float[src.length];  cur.mapPoints(dst,src);  prevEnd.set(dst[0],dst[1]);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.046 -0500",hash_original_method="8DC9492B498FF3067475C41C79EEAB3B",hash_generated_method="9BE872B75FB064CD381E454316EBF68C") public boolean onException(Object obj,Throwable e){  return false;}  }
class C{  public static int reverse(int i){  i=((i >>> 1) & 0x55555555) | ((i & 0x55555555) << 1);  i=((i >>> 2) & 0x33333333) | ((i & 0x33333333) << 2);  i=((i >>> 4) & 0x0F0F0F0F) | ((i & 0x0F0F0F0F) << 4);  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return ((i >>> 16)) | ((i) << 16);}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  blockList.drawScreen(par1,par2,par3);  drawCenteredString(fontRendererObj,"X-Ray Block Manager",width / 2,8,16777215);  int totalBlocks=0;  for (int i=0; i < GuiXRayBlocksList.blocks.size(); i++)   if (XRayMod.xrayBlocks.contains(GuiXRayBlocksList.blocks.get(i)))   totalBlocks++;  drawCenteredString(fontRendererObj,"Blocks: " + totalBlocks,width / 2,20,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  public static synchronized void loadBrotli() throws UnsatisfiedLinkError, IllegalStateException, SecurityException {  LibraryLoader libraryLoader=new LibraryLoader(BROTLI_LIB_NAME);  if (libraryLoader.trySystemLibraryLoading())   return;  if (libraryLoader.tryLoadingFromTemporaryFolder())   return;  String details=libraryLoader.getResult().asFormattedString();  throw new UnsatisfiedLinkError("Couldn't load native library '" + BROTLI_LIB_NAME + "'. "+ details);}  }
class C{  private boolean distImpr(double newDistance){  return newDistance < checkpointedDistance;}  }
class C{  public void validateDates(ActionErrors errors){  Formats.Format<Date> df=Formats.getDateFormat(Formats.Pattern.DATE_ENTRY_FORMAT);  Date dStart=null;  try {    dStart=df.parse(sessionStart);  } catch (  Exception e) {  }  if (dStart == null)   errors.add("sessionStart",new ActionMessage("errors.invalidDate","Session Start Date")); else {    Date dEnd=null;    try {      dEnd=df.parse(sessionEnd);    } catch (    Exception e) {    }    if (dEnd == null)     errors.add("sessionEnd",new ActionMessage("errors.invalidDate","Session End Date")); else {      if (!dEnd.after(dStart))       errors.add("sessionEnd",new ActionMessage("errors.generic","Session End Date must occur AFTER Session Start Date")); else {        Date dClassEnd=null;        try {          dClassEnd=df.parse(classesEnd);        } catch (        Exception e) {        }        if (dClassEnd == null)         errors.add("classesEnd",new ActionMessage("errors.invalidDate","Classes End Date")); else {          if (!dClassEnd.after(dStart)) {            errors.add("classesEnd",new ActionMessage("errors.generic","Classes End Date must occur AFTER Session Start Date"));          } else           if (!(dClassEnd.before(dEnd) || dClassEnd.equals(dEnd))) {            errors.add("classesEnd",new ActionMessage("errors.generic","Classes End Date must occur ON or BEFORE Session End Date"));          } else {            Date dExamStart=null;            try {              dExamStart=df.parse(examStart);            } catch (            Exception e) {            }            if (dExamStart == null)             errors.add("examStart",new ActionMessage("errors.invalidDate","Examinations Start Date"));            Date dEventStart=null;            try {              dEventStart=df.parse(eventStart);            } catch (            Exception e) {            }            Date dEventEnd=null;            try {              dEventEnd=df.parse(eventEnd);            } catch (            Exception e) {            }            if (dEventStart == null)             errors.add("eventStart",new ActionMessage("errors.invalidDate","Event Start Date")); else             if (dEventEnd == null)             errors.add("eventEnd",new ActionMessage("errors.invalidDate","Event End Date"));            if (errors.isEmpty() && !dEventStart.before(dEventEnd)) {              errors.add("eventEnd",new ActionMessage("errors.generic","Event End Date must occur AFTER Event Start Date"));            }            Calendar start=Calendar.getInstance(Locale.US);            if (dEventStart != null) {              if (dEventStart.before(dStart)) {                start.setTime(dEventStart);              } else {                start.setTime(dStart);              }            } else {              start.setTime(dStart);            }            Calendar end=Calendar.getInstance(Locale.US);            if (dEventEnd != null) {              if (dEventEnd.after(dEnd)) {                end.setTime(dEventEnd);              } else {                end.setTime(dEnd);              }            } else {              end.setTime(dEnd);            }            int startYear=start.get(Calendar.YEAR);            int endYear=end.get(Calendar.YEAR);            int startMonth=start.get(Calendar.MONTH);            int endMonth=end.get(Calendar.MONTH);            int startDay=start.get(Calendar.DAY_OF_MONTH);            int endDay=end.get(Calendar.DAY_OF_MONTH);            if (startYear < endYear) {              if (startYear + 1 < endYear || startMonth < endMonth || (startMonth == endMonth && startDay <= endDay))               errors.add("sessionDays",new ActionMessage("errors.generic","Dates associated with a session cannot cover more than one year."));            }          }        }      }    }  }}  }
class C{  public boolean isSetDeleted(){  return EncodingUtils.testBit(__isset_bitfield,__DELETED_ISSET_ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.234 -0400",hash_original_method="20D2259271C7B1C96C133ACBD2C26B14",hash_generated_method="D0DBB0A8B51935EE62007FE5F69CF000") private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  private static Manifest addDigestsToManifest(final JarFile jar) throws IOException, GeneralSecurityException {  final Manifest input=jar.getManifest();  final Manifest output=new Manifest();  final Attributes main=output.getMainAttributes();  main.putValue("Manifest-Version",MANIFEST_VERSION);  main.putValue("Created-By",CREATED_BY);  final TreeMap<String,JarEntry> byName=new TreeMap<>();  for (Enumeration<JarEntry> e=jar.entries(); e.hasMoreElements(); ) {    JarEntry entry=e.nextElement();    byName.put(entry.getName(),entry);  }  final MessageDigest md=MessageDigest.getInstance("SHA1");  final byte[] buffer=new byte[4096];  int num;  for (  JarEntry entry : byName.values()) {    final String name=entry.getName();    if (!entry.isDirectory() && !name.equals(JarFile.MANIFEST_NAME) && !name.equals(CERT_SF_NAME)&& !name.equals(CERT_RSA_NAME)) {      InputStream data=jar.getInputStream(entry);      while ((num=data.read(buffer)) > 0) {        md.update(buffer,0,num);      }      Attributes attr=null;      if (input != null) {        attr=input.getAttributes(name);      }      attr=attr != null ? new Attributes(attr) : new Attributes();      attr.putValue("SHA1-Digest",base64encode(md.digest()));      output.getEntries().put(name,attr);    }  }  return output;}  }
class C{  public <T>T[] toArray(T[] a){  if (a.length < size)   a=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  System.arraycopy(elementData,0,a,0,size);  if (a.length > size)   a[size]=null;  return a;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster flowAccum;  String outputHeader=null;  String flowAccumHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  double maxZ;  int x, y;  int maxX=0;  int maxY=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  flowAccumHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || flowAccumHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    flowAccum=new WhiteboxRaster(flowAccumHeader,"r");    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(flowAccum.getCellSizeX() + flowAccum.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=flowAccum.getRowFromYCoordinate(vertices[0][1]);outletCol=flowAccum.getColumnFromXCoordinate(vertices[0][0]);maxZ=0;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}outletX=flowAccum.getXCoordinateFromColumn(maxX);outletY=flowAccum.getYCoordinateFromRow(maxY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (flowAccum.getNumberColumns() != cols || flowAccum.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {maxZ=0;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}output.setValue(maxY,maxX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();flowAccum.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected void retryDelay(int attemptCount) throws InterruptedException {  Thread.sleep((attemptCount + 1) * retryDelay);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public KEYRecord(Name name,int dclass,long ttl,int flags,int proto,int alg,byte[] key){  super(name,Type.KEY,dclass,ttl,flags,proto,alg,key);}  }
class C{  public boolean check_nullable() throws internal_error {  production_part part;  symbol sym;  int pos;  if (nullable_known())   return nullable();  if (rhs_length() == 0) {    return set_nullable(true);  }  for (pos=0; pos < rhs_length(); pos++) {    part=rhs(pos);    if (!part.is_action()) {      sym=((symbol_part)part).the_symbol();      if (!sym.is_non_term())       return set_nullable(false); else       if (!((non_terminal)sym).nullable())       return false;    }  }  return set_nullable(true);}  }
class C{  protected Object entryInitialFlow(){  List heads=graph.getHeads();  if (heads.size() != 1)   throw new RuntimeException("Assertion failed:  Only one head expected.");  BoundedFlowSet initSet=(BoundedFlowSet)emptySet.clone();  initSet.add(heads.get(0));  return initSet;}  }
class C{  public JButton createImageButton(Action a){  JButton b=new JButton(a);  b.setMargin(new Insets(0,0,0,0));  return b;}  }
class C{  public CategorySeriesHandler(RootHandler root){  this.root=root;  this.values=new DefaultKeyedValues();}  }
class C{  private BFINode<E> insertEntryIntoParent(BFINode<E> newChild,BFINode<E> node,InsDelUpdateStatistics stat){  int index=node.parent.children.indexOf(node);  stat.nbBFNodesAccessed++;  node.parent.children.add(index + 1,newChild);  newChild.parent=node.parent;  stat.nbBFNodesAccessed+=2;  stat.nbBFNodesAccessed++;  if (!node.parent.needSplit()) {    return null;  }  return split(node.parent,stat);}  }
class C{  public static TestSSLSocketPair create(){  TestSSLContext c=TestSSLContext.create();  SSLSocket[] sockets=connect(c,null,null);  return new TestSSLSocketPair(c,sockets[0],sockets[1]);}  }
class C{  public VNXeNfsShare findSnapNfsShare(String snapId,String shareName){  _logger.info("finding nfsShare id for snap id: {}, and shareName: {} ",snapId,shareName);  NfsShareRequests req=new NfsShareRequests(_khClient);  VNXeNfsShare share=req.findSnapNfsShare(snapId,shareName,getBasicSystemInfo().getSoftwareVersion());  return share;}  }
class C{  public void recursiveDelete(File fileOrDirectory){  if (fileOrDirectory.isDirectory())   for (  File child : fileOrDirectory.listFiles())   recursiveDelete(child);  try {    fileOrDirectory.delete();  } catch (  Exception e) {    e.getStackTrace();  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.222 -0500",hash_original_method="C7FD0C2698771DF8CC60A785DCC40BB4",hash_generated_method="80593170191F13BFD0E1C07AC7E4AFC0") public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public boolean init(final Transport transport){  this.transport=transport;  status=Status.self();  return true;}  }
class C{  public List<String[]> readAll() throws IOException {  List<String[]> allElements=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  while (hasNext) {    String[] nextLineAsTokens=readNext();    if (nextLineAsTokens != null) {      allElements.add(nextLineAsTokens);    }  }  return allElements;}  }
class C{  public static void blacklistItemFromMagnet(ItemStack stack){  String key=getMagnetKey(stack);  magnetBlacklist.add(key);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public String toString(){  return this.m00 + ", " + this.m01+ ", "+ this.m02+ "\n"+ this.m10+ ", "+ this.m11+ ", "+ this.m12+ "\n"+ this.m20+ ", "+ this.m21+ ", "+ this.m22+ "\n";}  }
class C{  public static File run(Dfareporting reporting,Long userProfileId,Report report,Boolean isSynchronous) throws Exception {  System.out.println("=================================================================");  System.out.printf("Generating a report file for report with ID %s%n",report.getId());  System.out.println("=================================================================");  File reportFile=reporting.reports().run(userProfileId,report.getId()).setSynchronous(isSynchronous).execute();  System.out.println("Report execution initiated. Checking for completion...");  reportFile=waitForReportRunCompletion(reporting,userProfileId,reportFile);  if (!reportFile.getStatus().equals("REPORT_AVAILABLE")) {    System.out.printf("Report file generation failed to finish. Final status is: %s%n",reportFile.getStatus());    return null;  }  System.out.printf("Report file with ID \"%s\" generated.%n",reportFile.getId());  System.out.println();  return reportFile;}  }
class C{  @Path("cleanup") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse cleanup(final CleanupRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.cleanup(request);}  }
class C{  private boolean cmd_saveOrder(int C_Order_ID){  log.config("C_Order_ID=" + C_Order_ID);  MOrder order=new MOrder(Env.getCtx(),C_Order_ID,null);  if (order.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Order_ID=" + C_Order_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=m_qtyList.get(i).getValue();      int M_Product_ID=m_productList.get(i).intValue();      MOrderLine ol=new MOrderLine(order);      ol.setM_Product_ID(M_Product_ID,true);      ol.setQty(qty);      ol.setPrice();      ol.setTax();      if (ol.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  FDialog.info(-1,this,order.getDocumentInfo() + " " + Msg.translate(Env.getCtx(),"Inserted")+ "="+ lineCount);  log.config("#" + lineCount);  return true;}  }
class C{  public static void bindParameter(PreparedStatement stmt,int index,Object value) throws SQLException {  if (value == Nulls.NULL_STRING || value instanceof String) {    if (value == Nulls.NULL_STRING) {      stmt.setNull(index,Types.VARCHAR);    } else {      stmt.setString(index,(String)value);    }  } else   if (value == Nulls.NULL_LONG || value instanceof Long) {    stmt.setLong(index,(Long)value);  } else   if (value == Nulls.NULL_TIMESTAMP || value instanceof java.sql.Timestamp) {    stmt.setTimestamp(index,(java.sql.Timestamp)value);  } else   if (value == Nulls.NULL_INTEGER || value instanceof Integer) {    if (value == Nulls.NULL_INTEGER) {      stmt.setNull(index,Types.INTEGER);    } else {      stmt.setInt(index,(Integer)value);    }  } else   if (value == Nulls.NULL_BOOLEAN || value instanceof Boolean) {    stmt.setBoolean(index,(Boolean)value);  } else   if (value == Nulls.NULL_BYTE || value instanceof Byte) {    stmt.setByte(index,(Byte)value);  } else   if (value == Nulls.NULL_SHORT || value instanceof Short) {    stmt.setShort(index,(Short)value);  } else   if (value == Nulls.NULL_FLOAT || value instanceof Float) {    stmt.setFloat(index,(Float)value);  } else   if (value == Nulls.NULL_DOUBLE || value instanceof Double) {    stmt.setDouble(index,(Double)value);  } else   if (value == Nulls.NULL_BYTE_ARRAY || value instanceof byte[]) {    stmt.setBytes(index,(byte[])value);  } else   if (value == Nulls.NULL_BIGDECIMAL || value instanceof BigDecimal) {    stmt.setBigDecimal(index,(BigDecimal)value);  } else   if (value == null) {    stmt.setNull(index,Types.NULL);  } else {    throw new InvalidParameterException(String.format("value type not supported: %s",value.getClass().getName()));  }}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.dateFormatter);  result=HashUtilities.hashCode(result,this.numberFormatter);  return result;}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderSelectionViewClickListener(AccountHeader.OnAccountHeaderSelectionViewClickListener onAccountHeaderSelectionViewClickListener){  this.mOnAccountHeaderSelectionViewClickListener=onAccountHeaderSelectionViewClickListener;  return this;}  }
class C{  @Override public void positionChanged(final double position){  GAMA.getExperiment().getAgent().setMinimumDurationExternal(valueFromPosition(position) / 1000);}  }
class C{  private void checkOpenAndCreate(boolean create) throws SocketException {  if (isClosed()) {    throw new SocketException("Socket is closed");  }  if (!create) {    if (!isConnected()) {      throw new SocketException("Socket is not connected");    }    return;  }  if (isCreated) {    return;  }synchronized (this) {    if (isCreated) {      return;    }    try {      impl.create(true);    } catch (    SocketException e) {      throw e;    }catch (    IOException e) {      throw new SocketException(e.toString());    }    isCreated=true;  }}  }
class C{  public AxisRenderer(int xalign,int yalign){  m_xalign=xalign;  m_yalign=yalign;}  }
class C{  public GroundContainer(final StendhalClient client,final IGameScreen gameScreen,final JComponent canvas){  this.client=client;  this.screen=gameScreen;  this.canvas=canvas;  this.state=new DefaultGroundContainerMouseState(this);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void close(){  try {    if (mFileDescriptor != null)     mFileDescriptor.close();  } catch (  IOException e) {  }}  }
class C{  private void dumpRblStops(String rblStopsDumpFile,List<FahrzeitEvent> fahrzeitEvents){  Set<String> dumpLines=new TreeSet<String>();  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(new File(rblStopsDumpFile)));    writer.write("# matsim stop id\trbl stop id\trbl short\tline\troute\tLfdNr\trbl name");    writer.newLine();    for (    FahrzeitEvent event : fahrzeitEvents) {      if (event.getFahrtEvent() == null) {        continue;      }      String line2write="\t" + event.getStopId() + "\t"+ event.getStopNameShort()+ "\t"+ event.getFahrtEvent().getLineId()+ "\t"+ event.getFahrtEvent().getRouteId()+ "\t"+ event.getRunningNumber()+ "\t"+ event.getStopName();      if (!dumpLines.contains(line2write)) {        dumpLines.add(line2write);        writer.write(line2write);        writer.newLine();      }    }    writer.flush();    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Vector2 solve22(Vector2 b){  double det=this.m00 * this.m11 - this.m01 * this.m10;  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector2 r=new Vector2();  r.x=det * (this.m11 * b.x - this.m01 * b.y);  r.y=det * (this.m00 * b.y - this.m10 * b.x);  return r;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public OnStateEntryEvent(Object source,State<?,?> state){  super(source);  this.state=state;}  }
class C{  public void updateInfo(Machine machine){  view.setServers(getServers(machine));}  }
class C{  public boolean removeTriggerGroupToNeverDelete(String group){  if (group != null)   return triggerGroupsToNeverDelete.remove(group);  return false;}  }
class C{  public static ConfigurationManager createInstance(Properties properties){  if (INSTANCE == null) {    INSTANCE=new ConfigurationManager(properties);  }  return (INSTANCE);}  }
class C{  public static int min(long s){  return Long.numberOfTrailingZeros(s);}  }
class C{  private void updateDimensions(){  maxX=xExtremityMonitor.hasData() ? xExtremityMonitor.getMax() : 1.0;  for (  ChartValueSeries chartValueSeries : series) {    chartValueSeries.updateDimension();  }  float density=getContext().getResources().getDisplayMetrics().density;  spacer=(int)(density * SPACER);  yAxisOffset=(int)(density * Y_AXIS_OFFSET);  int markerLength=0;  for (int i=0; i < series.length; i++) {    ChartValueSeries chartValueSeries=series[i];    if (chartValueSeries.isEnabled() && chartValueSeries.hasData() || allowIfEmpty(i)) {      Rect rect=getRect(chartValueSeries.getMarkerPaint(),chartValueSeries.getLargestMarker());      markerLength+=rect.width() + spacer;    }  }  leftBorder=(int)(density * BORDER + markerLength);  int[] titleDimensions=getTitleDimenions();  topBorder=(int)(density * BORDER + titleDimensions[0] * (titleDimensions[1] + spacer));  Rect xAxisLabelRect=getRect(axisPaint,getXAxisLabel());  bottomBorder=(int)(density * BORDER + getRect(xAxisMarkerPaint,"1").height() + spacer + (int)(xAxisLabelRect.height() / 2));  rightBorder=(int)(density * BORDER + xAxisLabelRect.width() + spacer);  updateEffectiveDimensions();}  }
class C{  private void commentWrapParagraphFromLine(IDocument document,int line,int[] caretOffset,boolean always) throws BadLocationException {  String indent=commentExtractLinePrefix(document,line);  if (!always) {    if (!indent.trim().startsWith("*")) {      return;    }    if (indent.trim().startsWith("*/")) {      return;    }    if (!isLineTooLong(document,line) && !isLineTooShort(document,line)) {      return;    }  }  boolean caretRelativeToParagraphOffset=false;  int caret=caretOffset[0];  int caretLine=document.getLineOfOffset(caret);  int lineOffset=document.getLineOffset(line);  int paragraphOffset=lineOffset + indent.length();  if (paragraphOffset < caret) {    caret-=paragraphOffset;    caretRelativeToParagraphOffset=true;  } else {    caret-=lineOffset;  }  StringBuilder buffer=new StringBuilder();  int currentLine=line;  while (line == currentLine || isCommentLine(document,currentLine)) {    if (buffer.length() != 0 && !Character.isWhitespace(buffer.charAt(buffer.length() - 1))) {      buffer.append(' ');      if (currentLine <= caretLine) {        ++caret;      }    }    String string=getLineContents(document,currentLine);    buffer.append(string);    currentLine++;  }  String paragraph=buffer.toString();  if (paragraph.trim().length() == 0) {    return;  }  caretOffset[0]=caretRelativeToParagraphOffset ? caret : 0;  String delimiter=document.getLineDelimiter(0);  String wrapped=formatParagraph(paragraph,caretOffset,indent,delimiter,getMargin());  int beginning=document.getLineOffset(line);  int end=document.getLineOffset(currentLine);  document.replace(beginning,end - beginning,wrapped);  caretOffset[0]=caretRelativeToParagraphOffset ? caretOffset[0] + beginning : caret + beginning;}  }
class C{  public PlanModifier(PhysicalPlan plan){  this.physicalPlan=plan;  this.logicalPlan=plan.getLogicalPlan();  init();}  }
class C{  public float dot(Quaternion q){  return (x * q.x) + (y * q.y) + (z * q.z)+ (w * q.w);}  }
class C{  public boolean hasArchiveComplete(){  return hasExtension(ArchiveComplete.class);}  }
class C{  public void connect(String host,int port) throws SocksException, IOException {  this.remoteServerHost=checkNotNull(host,"Argument [host] may not be null");  this.remoteServerPort=checkNotNull(port,"Argument [port] may not be null");  proxy.buildConnection();  initProxyChain();  proxy.requestConnect(remoteServerHost,remoteServerPort);}  }
class C{  public final LiveSetEnumerator enumerator(){  return new LiveSetEnumerator(first);}  }
class C{  public JSONObject toJson() throws JSONException {  JSONObject json=new JSONObject();  json.put("name",name);  json.put("score",score);  json.put("active6",active6);  json.put("id",id);  JSONArray jarr=new JSONArray();  for (  DiasporaPodUrl value : podUrls) {    jarr.put(value.toJson());  }  json.put("podUrls",jarr);  jarr=new JSONArray();  for (  String value : mainLangs) {    jarr.put(value);  }  json.put("mainLangs",jarr);  return json;}  }
class C{  public static void addStrut(JComponent b,int layout,int size){  if (size < 1)   return;  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));}  }
class C{  @Override public List<EmotionalState> evaluateEmotionalStates(Vertex output){  Collection<Relationship> emotions=output.getRelationships(Primitive.EMOTION);  List<EmotionalState> states=new ArrayList<EmotionalState>();  if (emotions != null) {    for (    Emotion emotion : getEmotions().values()) {      Relationship relationship=output.getRelationship(Primitive.EMOTION,emotion.primitive());      if (relationship != null && Math.abs(relationship.getCorrectness()) >= 0.3) {        states.add(emotion.evaluate(relationship.getCorrectness()));      }    }  }  return states;}  }
class C{  protected void installDefaults(){  spinner.setLayout(createLayout());  LookAndFeel.installBorder(spinner,"Spinner.border");  LookAndFeel.installColorsAndFont(spinner,"Spinner.background","Spinner.foreground","Spinner.font");  LookAndFeel.installProperty(spinner,"opaque",Boolean.TRUE);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  Object[] elements=getArray();  int len=elements.length;  s.writeInt(len);  for (int i=0; i < len; i++)   s.writeObject(elements[i]);}  }
class C{  private void initPaths(){  InterProcessSemaphoreMutex mutex=new InterProcessSemaphoreMutex(curatorClient,mutexPath);  try {    if (log.isTraceEnabled()) {      log.trace("About to acquire mutex");    }    mutex.acquire();    if (log.isTraceEnabled()) {      log.trace("Mutex acquired");    }    if (cleanState) {      if (curatorClient.checkExists().forPath(memberPath) != null) {        if (curatorClient.getChildren().forPath(memberPath).size() == 0) {          log.info("Deleting from " + baseDataPath);          curatorClient.delete().deletingChildrenIfNeeded().forPath(baseDataPath);        }      }    }    node=new PersistentEphemeralNode(curatorClient,Mode.EPHEMERAL,memberPath + "/" + uuid,new byte[0]);    node.start();    node.waitForInitialCreate(60,TimeUnit.SECONDS);    if (curatorClient.checkExists().forPath(baseDataPath) == null) {      CuratorTransaction tx=curatorClient.inTransaction();      CuratorTransactionFinal tt=tx.create().forPath(baseDataPath).and();      tt=tt.create().forPath(statePath).and();      tt=tt.create().forPath(logPath).and();      for (int i=0; i < logSize; i++) {        tt=tt.create().forPath(logPath + "/" + i).and();      }      tt.commit();    }  } catch (  Exception e) {    log.warn("Error in initPaths",e);  } finally {    try {      mutex.release();      if (log.isTraceEnabled()) {        log.trace("Mutex released");      }    } catch (    Exception e) {    }  }}  }
class C{  public void removeHost(URI id){  this.removedHosts.add(id);}  }
class C{  final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final PLA_AbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  public void accept(){  Packet acceptPacket=new AcceptPacket(this.session.getWorkgroupJID());  connection.sendPacket(acceptPacket);  accepted=true;}  }
class C{  public double R2(){  return R2;}  }
class C{  public String write(BigDecimal value){  return value.toString();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){  int length=xLabels.size();  if (length > 0) {    boolean showXLabels=mRenderer.isShowXLabels();    boolean showGridY=mRenderer.isShowGridY();    if (showGridY) {      mGridPaint.setStyle(Paint.Style.STROKE);      mGridPaint.setStrokeWidth(mRenderer.getGridLineWidth());    }    boolean showTickMarks=mRenderer.isShowTickMarks();    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));    for (int i=0; i < length; i++) {      long label=Math.round(xLabels.get(i));      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));      if (showXLabels) {        paint.setColor(mRenderer.getXLabelsColor());        if (showTickMarks) {          canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);        }        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());      }      if (showGridY) {        mGridPaint.setColor(mRenderer.getGridColor(0));        canvas.drawLine(xLabel,bottom,xLabel,top,mGridPaint);      }    }  }  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);}  }
class C{  void initialize(String args[],Frame awtSplash) throws Throwable {  preinit();  setupCallbacksAndListeners();  validateStartup(args);  LimeWireGUI limewireGUI=createLimeWire();  LimeWireCore limeWireCore=limewireGUI.getLimeWireCore();  glueCore(limeWireCore);  runExternalChecks(limeWireCore,args);  limeWireCore.getExternalControl().startServer();  DeadlockSupport.startDeadlockMonitoring();  installProperties();  installResources();  final SetupManager setupManager=new SetupManager();  switchSplashes(awtSplash);  startEarlyCore(setupManager,limeWireCore);  initializeEarlyUI();  startSetupManager(setupManager);  startBittorrentCore();  loadUI();  loadTrayAndNotifications();  hideSplashAndShowUI();  loadLateTasksForUI();  startCore(limeWireCore);  runQueuedRequests(limeWireCore);  if (OSUtils.isMacOSX()) {    GURLHandler.getInstance().register();    MacEventHandler.instance();  }  postinit();}  }
class C{  default String eat(){  return this.getClass().getSimpleName() + " eats like an ordinary animal";}  }
class C{  public static PTAgent agent(){  if (agent == null) {    initialize();  }  return agent;}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public Element writePoint(Element parent,Object o,String name) throws Exception {  Element node;  Point p;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  p=(Point)o;  node=addElement(parent,name,p.getClass().getName(),false);  writeDoubleToXML(node,p.getX(),VAL_X);  writeDoubleToXML(node,p.getY(),VAL_Y);  return node;}  }
class C{  public boolean isPopupVisible(JComboBox c){  return popup.isVisible();}  }
class C{  public ImmutableBinaryTrie(final Iterable<? extends T> elements,final TransformationStrategy<? super T> transformationStrategy){  this.transformationStrategy=transformationStrategy;  defRetValue=-1;  final Iterator<? extends T> iterator=elements.iterator();  final ObjectList<LongArrayBitVector> words=new ObjectArrayList<LongArrayBitVector>();  int cmp;  if (iterator.hasNext()) {    final LongArrayBitVector prev=LongArrayBitVector.copy(transformationStrategy.toBitVector(iterator.next()));    words.add(prev.copy());    BitVector curr;    while (iterator.hasNext()) {      curr=transformationStrategy.toBitVector(iterator.next());      cmp=prev.compareTo(curr);      if (cmp == 0)       throw new IllegalArgumentException("The trie elements are not unique");      if (cmp > 0)       throw new IllegalArgumentException("The trie elements are not sorted");      prev.replace(curr);      words.add(prev.copy());    }  }  root=buildTrie(words,0);}  }
class C{  private void validateExpression(){  removeLineSignals();  String expression=currentExpression.getText();  if (expression != null) {    if (expression.trim().length() > 0) {      try {        parser.checkSyntax(expression);        showError(false,"<b>Info: </b>","Expression is syntactically correct.");      } catch (      ExpressionException e) {        showError(true,"<b>Error: </b>",e.getMessage());        int line=e.getErrorLine();        if (line > 0) {          signalLine(line);        }        return;      }    } else {      showError(false,"","Please specify a valid expression.");    }  } else {    showError(false,"","Please specify a valid expression.");  }}  }
class C{  static LuaValue len(LuaValue arg){  return arg.checkstring().len();}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new LinkedHashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  public void fillBuffer(int lookAhead){  if ((p + lookAhead - 1) >= tokens.size()) {    fillBuffer();  }}  }
class C{  public static byte[] serializeLong(long val){  byte[] buffer=new byte[Type.LONG.getByteSize()];  buffer[0]=(byte)((val >> 56) & 0xFFL);  buffer[1]=(byte)((val >> 48) & 0xFFL);  buffer[2]=(byte)((val >> 40) & 0xFFL);  buffer[3]=(byte)((val >> 32) & 0xFFL);  buffer[4]=(byte)((val >> 24) & 0xFFL);  buffer[5]=(byte)((val >> 16) & 0xFFL);  buffer[6]=(byte)((val >> 8) & 0xFFL);  buffer[7]=(byte)(val & 0xFFL);  return buffer;}  }
class C{  private static int purchaseLoop(final IntegerMap<String> parameters,final int ruleNum,final IntegerMap<ProductionRule> bestAttack,final IntegerMap<ProductionRule> bestDefense,final IntegerMap<ProductionRule> bestTransport,final IntegerMap<ProductionRule> bestMaxUnits,final IntegerMap<ProductionRule> bestMobileAttack,final HashMap<ProductionRule,Boolean> transportMap,final HashMap<ProductionRule,Boolean> infMap,final HashMap<ProductionRule,Boolean> nonInfMap,final HashMap<ProductionRule,Boolean> supportableInfMap,final GameData data,final PlayerID player,final int fighters){  final long start=System.currentTimeMillis();  final Resource key=data.getResourceList().getResource(Constants.PUS);  final Set<ProductionRule> ruleCheck=bestAttack.keySet();  final Iterator<ProductionRule> ruleIter=ruleCheck.iterator();  int counter=1;  ProductionRule rule=null;  while (counter <= ruleNum && ruleIter.hasNext()) {    rule=ruleIter.next();    counter++;  }  if (rule == null) {    return 0;  }  int totAttack=parameters.getInt("attack");  int totDefense=parameters.getInt("defense");  int totCost=parameters.getInt("totcost");  int totMovement=parameters.getInt("totMovement");  final int maxCost=parameters.getInt("maxCost");  final int maxUnits=parameters.getInt("maxUnits");  int totUnits=parameters.getInt("totUnits");  int maxAttack=parameters.getInt("maxAttack");  int maxDefense=parameters.getInt("maxDefense");  int maxTransAttack=parameters.getInt("maxTransAttack");  int maxTransCost=parameters.getInt("maxTransCost");  int maxAttackCost=parameters.getInt("maxAttackCost");  int maxDefenseCost=parameters.getInt("maxDefenseCost");  int maxUnitAttack=parameters.getInt("maxUnitAttack");  int maxUnitCost=parameters.getInt("maxUnitCost");  int maxUnitCount=parameters.getInt("maxUnitCount");  int maxMobileAttack=parameters.getInt("maxMobileAttack");  int maxMovement=parameters.getInt("maxMovement");  int supportableInfCount=parameters.getInt("supportableInfCount");  int infCount=parameters.getInt("infantry");  int nonInfCount=parameters.getInt("nonInfantry");  int parametersChanged=0, thisParametersChanged=0;  final NamedAttachable resourceOrUnit=rule.getResults().keySet().iterator().next();  if (!(resourceOrUnit instanceof UnitType)) {    return 0;  }  final UnitType x=(UnitType)resourceOrUnit;  final UnitAttachment u=UnitAttachment.get(x);  final boolean thisIsSupportableInf=supportableInfMap.get(rule);  final boolean thisIsInf=infMap.get(rule);  final boolean thisIsNonInf=nonInfMap.get(rule);  final boolean thisIsArt=u.getArtillery();  final int uMovement=u.getMovement(player);  int uAttack=u.getAttack(player);  int uDefense=u.getDefense(player);  final int aRolls=u.getAttackRolls(player);  final int cost=rule.getCosts().getInt(key);  final boolean thisIsSub=u.getIsSub();  if (thisIsSub && uAttack >= 1) {    uAttack--;  } else   if (thisIsSub && uDefense >= 1) {    uDefense--;  }  if (u.getMovement(player) == 0) {    uAttack=0;  }  if ((u.getAttack(player) == 0 || u.getDefense(player) - u.getAttack(player) >= 4) && u.getDefense(player) >= 1) {    uDefense--;    if (u.getDefense(player) - u.getAttack(player) >= 4) {      uDefense--;    }  }  if ((u.getDefense(player) == 0 || u.getAttack(player) - u.getDefense(player) >= 4) && u.getAttack(player) >= 1) {    uAttack--;    if (u.getAttack(player) - u.getDefense(player) >= 4) {      uAttack--;    }  }  int fightersremaining=fighters;  int usableMaxUnits=maxUnits;  if (usableMaxUnits * ruleCheck.size() > 1000 && Math.random() <= 0.50) {    usableMaxUnits=usableMaxUnits / 2;  }  for (int i=0; i <= (usableMaxUnits - totUnits); i++) {    if (i > 0) {      totCost+=cost;      if (totCost > maxCost) {        continue;      }      if (thisIsInf) {        infCount++;      } else       if (thisIsNonInf) {        nonInfCount++;      }      if (thisIsSupportableInf) {        supportableInfCount++;      }      int carrierLoad=Math.min(u.getCarrierCapacity(),fightersremaining);      if (carrierLoad < 0) {        carrierLoad=0;      }      int bonusAttack=((u.getHitPoints() - 1) * uAttack) + (uAttack > 0 && (i % 2) == 0 ? 1 : 0) + carrierLoad * 3;      if (thisIsArt && i <= supportableInfCount) {        bonusAttack++;      }      final int bonusDefense=((u.getHitPoints() - 1) * uDefense) + (uDefense > 0 && (i % 2) == 0 ? 1 : 0) + (carrierLoad * 4);      fightersremaining-=carrierLoad;      totUnits++;      totAttack+=uAttack * aRolls + bonusAttack;      totDefense+=uDefense * aRolls + bonusDefense;      totMovement+=uMovement;    }    if (totUnits <= maxUnits && ruleIter.hasNext()) {      parameters.put("attack",totAttack);      parameters.put("defense",totDefense);      parameters.put("totcost",totCost);      parameters.put("totUnits",totUnits);      parameters.put("totMovement",totMovement);      parameters.put("infantry",infCount);      parameters.put("nonInfantry",nonInfCount);      parameters.put("supportableInfCount",supportableInfCount);      parametersChanged=purchaseLoop(parameters,counter,bestAttack,bestDefense,bestTransport,bestMaxUnits,bestMobileAttack,transportMap,infMap,nonInfMap,supportableInfMap,data,player,fighters);      maxAttack=parameters.getInt("maxAttack");      maxTransAttack=parameters.getInt("maxTransAttack");      maxTransCost=parameters.getInt("maxTransCost");      maxDefense=parameters.getInt("maxDefense");      maxAttackCost=parameters.getInt("maxAttackCost");      maxDefenseCost=parameters.getInt("maxDefenseCost");      maxUnitCost=parameters.getInt("maxUnitCost");      maxUnitAttack=parameters.getInt("maxUnitAttack");      maxMobileAttack=parameters.getInt("maxMobileAttack");      maxMovement=parameters.getInt("maxMovement");      if (System.currentTimeMillis() - start > PURCHASE_LOOP_MAX_TIME_MILLIS) {        break;      }    }    if (totCost == 0) {      continue;    }    if (parametersChanged > 0) {      if ((parametersChanged - 3) % 4 == 0) {        bestAttack.put(rule,i);        bestDefense.put(rule,i);        thisParametersChanged=3;        parametersChanged-=3;      } else       if ((parametersChanged - 1) % 4 == 0) {        bestAttack.put(rule,i);        if (thisParametersChanged % 2 == 0) {          thisParametersChanged+=1;        }        parametersChanged-=1;      } else       if ((parametersChanged - 2) % 4 == 0) {        bestDefense.put(rule,i);        if ((thisParametersChanged + 2) % 4 != 0 && (thisParametersChanged + 1) % 4 != 0) {          thisParametersChanged+=2;        }        parametersChanged-=2;      }      if ((parametersChanged > 0) && (parametersChanged - 4) % 8 == 0) {        bestMaxUnits.put(rule,i);        if (thisParametersChanged == 0 || (thisParametersChanged - 4) % 8 != 0) {          thisParametersChanged+=4;        }        parametersChanged-=4;      }      if ((parametersChanged - 8) % 16 == 0) {        bestTransport.put(rule,i);        if (thisParametersChanged == 0 || (thisParametersChanged - 8) % 16 != 0) {          thisParametersChanged+=8;        }      }      if (parametersChanged >= 16) {        bestMobileAttack.put(rule,i);        if (thisParametersChanged < 16) {          thisParametersChanged+=16;        }      }      parametersChanged=0;      continue;    }    if ((totAttack > maxAttack) || (totAttack == maxAttack && (Math.random() < 0.50))) {      maxAttack=totAttack;      maxAttackCost=totCost;      parameters.put("maxAttack",maxAttack);      parameters.put("maxAttackCost",maxAttackCost);      bestAttack.put(rule,i);      if (thisParametersChanged % 2 == 0) {        thisParametersChanged+=1;      }      final Iterator<ProductionRule> changeIter=ruleCheck.iterator();      ProductionRule changeThis=null;      int countThis=1;      while (changeIter.hasNext()) {        changeThis=changeIter.next();        if (countThis >= counter) {          bestAttack.put(changeThis,0);        }        countThis++;      }    }    if ((totDefense > maxDefense) || (totDefense == maxDefense && (Math.random() < 0.50))) {      maxDefense=totDefense;      maxDefenseCost=totCost;      parameters.put("maxDefense",maxDefense);      parameters.put("maxDefenseCost",maxDefenseCost);      bestDefense.put(rule,i);      if ((thisParametersChanged + 2) % 4 != 0 && (thisParametersChanged + 1) % 4 != 0) {        thisParametersChanged+=2;      }      final Iterator<ProductionRule> changeIter=ruleCheck.iterator();      ProductionRule changeThis=null;      int countThis=1;      while (changeIter.hasNext()) {        changeThis=changeIter.next();        if (countThis >= counter) {          bestDefense.put(changeThis,0);        }        countThis++;      }    }    if (totAttack > maxUnitAttack && totUnits >= maxUnitCount) {      maxUnitAttack=totAttack;      maxUnitCount=totUnits;      maxUnitCost=totCost;      parameters.put("maxUnitAttack",maxUnitAttack);      parameters.put("maxUnitCount",maxUnitCount);      parameters.put("maxUnitCost",maxUnitCost);      bestMaxUnits.put(rule,i);      if ((thisParametersChanged + 4) % 8 != 0) {        thisParametersChanged+=4;      }      final Iterator<ProductionRule> changeIter=ruleCheck.iterator();      ProductionRule changeThis=null;      int countThis=1;      while (changeIter.hasNext()) {        changeThis=changeIter.next();        if (countThis >= counter) {          bestMaxUnits.put(changeThis,0);        }        countThis++;      }    }    if (totAttack > maxTransAttack && (infCount <= nonInfCount + 1 && infCount >= nonInfCount - 1)) {      maxTransAttack=totAttack;      maxTransCost=totCost;      parameters.put("maxTransAttack",totAttack);      parameters.put("maxTransCost",maxTransCost);      bestTransport.put(rule,i);      if ((thisParametersChanged + 8) % 16 != 0) {        thisParametersChanged+=8;      }      final Iterator<ProductionRule> changeIter=ruleCheck.iterator();      ProductionRule changeThis=null;      int countThis=1;      while (changeIter.hasNext()) {        changeThis=changeIter.next();        if (countThis >= counter) {          bestTransport.put(changeThis,0);        }        countThis++;      }    }    if ((totAttack >= maxMobileAttack && (totMovement > maxMovement)) || (totAttack > maxMobileAttack && (totMovement >= maxMovement))) {      maxMobileAttack=totAttack;      maxMovement=totMovement;      parameters.put("maxMobileAttack",maxMobileAttack);      parameters.put("maxMovement",maxMovement);      bestMobileAttack.put(rule,i);      if (thisParametersChanged < 16) {        thisParametersChanged+=16;      }      final Iterator<ProductionRule> changeIter=ruleCheck.iterator();      ProductionRule changeThis=null;      int countThis=1;      while (changeIter.hasNext()) {        changeThis=changeIter.next();        if (countThis >= counter) {          bestMobileAttack.put(changeThis,0);        }        countThis++;      }    }  }  return thisParametersChanged;}  }
class C{  public void addElement(Element e){  body.addElement(e);}  }
class C{  public void trimToSize(){  balance();  redimNodeArrays(freenode);  CharVector kx=new CharVector();  kx.alloc(1);  TernaryTree map=new TernaryTree();  compact(kx,map,root);  kv=kx;  kv.trimToSize();}  }
class C{  public void clear(){  try {    this.writeLock.lock();    this.messages.clear();  }  finally {    this.writeLock.unlock();  }}  }
class C{  public Object apply(Object in){  if (in instanceof Token) {    Token w=(Token)in;    String str=w.toString();    String outStr=americanize(str,capitalizeTimex);    if (!outStr.equals(str)) {      new Token(outStr);    }    return w;  } else {    String str=(String)in;    return americanize(str,capitalizeTimex);  }}  }
class C{  protected LexicalUnit parseFunction(boolean positive,final LexicalUnit prev){  String name=scanner.getStringValue();  nextIgnoreSpaces();  LexicalUnit params=parseExpression(true);  if (current != LexicalUnits.RIGHT_BRACE) {    throw createCSSParseException("token",new Object[]{new Integer(current)});  }  int line=getLineNumber();  nextIgnoreSpaces();  predefined: switch (name.charAt(0)) {case 'r':case 'R':    LexicalUnit lu;  if (name.equalsIgnoreCase("rgb")) {    lu=params;    if (lu == null) {      break;    }switch (lu.getLexicalUnitType()) {default :      break predefined;case LexicalUnit.SAC_INTEGER:case LexicalUnit.SAC_PERCENTAGE:    lu=lu.getNextLexicalUnit();}if (lu == null) {  break;}switch (lu.getLexicalUnitType()) {default :  break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu != null) {break;}return CSSLexicalUnit.createPredefinedFunction(LexicalUnit.SAC_RGBCOLOR,params,prev,line);} else if (name.equalsIgnoreCase("rect")) {lu=params;if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:if (lu.getIntegerValue() != 0) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_IDENT:if (!lu.getStringValue().equalsIgnoreCase("auto")) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_EM:case LexicalUnit.SAC_EX:case LexicalUnit.SAC_PIXEL:case LexicalUnit.SAC_CENTIMETER:case LexicalUnit.SAC_MILLIMETER:case LexicalUnit.SAC_INCH:case LexicalUnit.SAC_POINT:case LexicalUnit.SAC_PICA:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:if (lu.getIntegerValue() != 0) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_IDENT:if (!lu.getStringValue().equalsIgnoreCase("auto")) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_EM:case LexicalUnit.SAC_EX:case LexicalUnit.SAC_PIXEL:case LexicalUnit.SAC_CENTIMETER:case LexicalUnit.SAC_MILLIMETER:case LexicalUnit.SAC_INCH:case LexicalUnit.SAC_POINT:case LexicalUnit.SAC_PICA:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:if (lu.getIntegerValue() != 0) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_IDENT:if (!lu.getStringValue().equalsIgnoreCase("auto")) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_EM:case LexicalUnit.SAC_EX:case LexicalUnit.SAC_PIXEL:case LexicalUnit.SAC_CENTIMETER:case LexicalUnit.SAC_MILLIMETER:case LexicalUnit.SAC_INCH:case LexicalUnit.SAC_POINT:case LexicalUnit.SAC_PICA:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_INTEGER:if (lu.getIntegerValue() != 0) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_IDENT:if (!lu.getStringValue().equalsIgnoreCase("auto")) {break predefined;}lu=lu.getNextLexicalUnit();break;case LexicalUnit.SAC_EM:case LexicalUnit.SAC_EX:case LexicalUnit.SAC_PIXEL:case LexicalUnit.SAC_CENTIMETER:case LexicalUnit.SAC_MILLIMETER:case LexicalUnit.SAC_INCH:case LexicalUnit.SAC_POINT:case LexicalUnit.SAC_PICA:case LexicalUnit.SAC_PERCENTAGE:lu=lu.getNextLexicalUnit();}if (lu != null) {break;}return CSSLexicalUnit.createPredefinedFunction(LexicalUnit.SAC_RECT_FUNCTION,params,prev,line);}break;case 'c':case 'C':if (name.equalsIgnoreCase("counter")) {lu=params;if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_IDENT:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_IDENT:lu=lu.getNextLexicalUnit();}if (lu != null) {break;}return CSSLexicalUnit.createPredefinedFunction(LexicalUnit.SAC_COUNTER_FUNCTION,params,prev,line);} else if (name.equalsIgnoreCase("counters")) {lu=params;if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_IDENT:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_STRING_VALUE:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_OPERATOR_COMMA:lu=lu.getNextLexicalUnit();}if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_IDENT:lu=lu.getNextLexicalUnit();}if (lu != null) {break;}return CSSLexicalUnit.createPredefinedFunction(LexicalUnit.SAC_COUNTERS_FUNCTION,params,prev,line);}break;case 'a':case 'A':if (name.equalsIgnoreCase("attr")) {lu=params;if (lu == null) {break;}switch (lu.getLexicalUnitType()) {default :break predefined;case LexicalUnit.SAC_IDENT:lu=lu.getNextLexicalUnit();}if (lu != null) {break;}return CSSLexicalUnit.createString(LexicalUnit.SAC_ATTR,params.getStringValue(),prev,line);}}return CSSLexicalUnit.createFunction(name,params,prev,line);}  }
class C{  public int partition(){  return part;}  }
class C{  public static <E extends Entity>LoadContext<E> create(Class<E> entityClass){  return new LoadContext<>(entityClass);}  }
class C{  final int[] breakLines(int startPos){  int[] lineEnds=(lineCache == null) ? null : lineCache.get();  int[] oldLineEnds=lineEnds;  int start=getStartOffset();  int lineIndex=0;  if (lineEnds != null) {    lineIndex=findLine(startPos - start);    if (lineIndex > 0) {      lineIndex--;    }  }  int p0=(lineIndex == 0) ? start : start + lineEnds[lineIndex - 1];  int p1=getEndOffset();  while (p0 < p1) {    int p=calculateBreakPosition(p0,p1);    p0=(p == p0) ? ++p : p;    if (lineIndex == 0 && p0 >= p1) {      lineCache=null;      lineEnds=null;      lineIndex=1;      break;    } else     if (lineEnds == null || lineIndex >= lineEnds.length) {      double growFactor=((double)(p1 - start) / (p0 - start));      int newSize=(int)Math.ceil((lineIndex + 1) * growFactor);      newSize=Math.max(newSize,lineIndex + 2);      int[] tmp=new int[newSize];      if (lineEnds != null) {        System.arraycopy(lineEnds,0,tmp,0,lineIndex);      }      lineEnds=tmp;    }    lineEnds[lineIndex++]=p0 - start;  }  lineCount=lineIndex;  if (lineCount > 1) {    int maxCapacity=lineCount + lineCount / 3;    if (lineEnds.length > maxCapacity) {      int[] tmp=new int[maxCapacity];      System.arraycopy(lineEnds,0,tmp,0,lineCount);      lineEnds=tmp;    }  }  if (lineEnds != null && lineEnds != oldLineEnds) {    lineCache=new SoftReference<int[]>(lineEnds);  }  return lineEnds;}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  public BufferList(String[] header,int bufferSize,BufferHolder bufferHolder){  this.header=header;  this.bufferSize=bufferSize;  this.bufferHolder=bufferHolder;}  }
class C{  public String toString(){  return super.toString() + "AuthorityInfoAccess [\n  " + accessDescriptions+ "\n]\n";}  }
class C{  public static float[] GaToLLa(Geo[] ga){  return GaToLLa(ga,new float[2 * ga.length]);}  }
class C{  public PolynomialGF2mSmallM modInverse(PolynomialGF2mSmallM a){  int[] unit={1};  int[] resultCoeff=modDiv(unit,coefficients,a.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public static boolean isAutoLandscape(){  return LocalStorageUtil.getBoolean("is_tablet",false);}  }
class C{  public void step(){  status="epoch: " + epoch + "; ";  if (epoch < maxEpoch) {    adjust();    updateParameters();    status+=" status: running";  } else {    status+="adaption: " + adaption + "; ";    status+="status: done";  }}  }
class C{  public void run(){  try {    inThread=true;    init();    running=true;    while (handle()) {      count++;      summary.loop(this);    }    log.debug("normal termination, handle() returned false");    currentThread=null;    done();  } catch (  ThreadDeath e1) {    log.debug("Received ThreadDeath, likely due to stop(): " + e1,e1);  }catch (  Exception e2) {    log.warn("Exception ends AbstractAutomaton thread: " + e2,e2);  }  running=false;}  }
class C{  protected void installKeyboardActions(){  InputMap km=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(comboBox,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,km);  LazyActionMap.installLazyActionMap(comboBox,BasicComboBoxUI.class,"ComboBox.actionMap");}  }
class C{  public boolean isPublic(){  return true;}  }
class C{  public CompressedMemorySequencesReader processSequencesInMemory(File sourceFile,boolean includeQuality,SimplePrereadNames names,SimplePrereadNames suffixes,LongRange region) throws IOException {  final CompressedMemorySequencesWriter sdfWriter=new CompressedMemorySequencesWriter(sourceFile,mPrereadType,mDataSource.hasQualityData() && includeQuality,names,suffixes,true,mDataSource.type(),region);  processSequences(sdfWriter,region);  return sdfWriter.getReader();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public LocalTime roundHalfCeilingCopy(){  return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));}  }
class C{  @Deprecated @Override public final void add(E e){  throw new UnsupportedOperationException();}  }
class C{  public Language(){}  }
class C{  public HashedMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public ServiceActivatorTest(String name){  super(name);}  }
class C{  public LinkedCaseInsensitiveMap(final Locale locale){  super();  this.caseInsensitiveKeys=new HashMap<String,String>();  this.locale=locale != null ? locale : Locale.getDefault();}  }
class C{  public void triggerGooglePlayApp(String packageName){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setData(Uri.parse(Constants.GOOGLE_PLAY_APP_URI + packageName));  context.startActivity(intent);}  }
class C{  public boolean isBlankEntidadRegistral(){  boolean result=false;  if (StringUtils.isBlank(this.code) && StringUtils.isBlank(this.name)) {    result=true;  }  return result;}  }
class C{  protected TraceCaseActivation_Impl(){  super();}  }
class C{  short readShort() throws IOException {  mDexFile.readFully(tmpBuf,0,2);  if (isBigEndian) {    return (short)((tmpBuf[1] & 0xff) | ((tmpBuf[0] & 0xff) << 8));  } else {    return (short)((tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8));  }}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.756 -0500",hash_original_method="A93DBE942737D1F537AD057E006AED8C",hash_generated_method="870783D19F6594D1C034646EFDF474AF") @Override public Bundle onSaveInstanceState(){  if (!isShowing())   return null;  Bundle bundle=new Bundle();  bundle.putParcelable(INSTANCE_KEY_COMPONENT,mLaunchComponent);  bundle.putBundle(INSTANCE_KEY_APPDATA,mAppSearchData);  bundle.putString(INSTANCE_KEY_USER_QUERY,mUserQuery);  return bundle;}  }
class C{  public static void writeInvocationResult(BinaryRawWriterEx writer,Object resObj,Exception err){  if (err == null) {    writer.writeBoolean(true);    writer.writeObject(resObj);  } else {    writer.writeBoolean(false);    PlatformNativeException nativeErr=null;    if (err instanceof IgniteCheckedException)     nativeErr=((IgniteCheckedException)err).getCause(PlatformNativeException.class); else     if (err instanceof IgniteException)     nativeErr=((IgniteException)err).getCause(PlatformNativeException.class);    if (nativeErr == null) {      writer.writeBoolean(false);      writer.writeString(err.getClass().getName());      writer.writeString(err.getMessage());      writer.writeString(X.getFullStackTrace(err));    } else {      writer.writeBoolean(true);      writer.writeObject(nativeErr.cause());    }  }}  }
class C{  public int read() throws IOException {  return inputReader.read();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INLINE_STATE_MACHINE___ANONYMOUS_INLINE_STATE_MACHINE_11:    return ((InternalEList<?>)getAnonymous_inlineStateMachine_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public RegionIterator createCopy(){  RegionIterator r=new RegionIterator(region);  r.curIndex=this.curIndex;  r.numXbands=this.numXbands;  return r;}  }
class C{  public Vector3D hsl(){  float r=redf();  float g=greenf();  float b=bluef();  float min=Math.min(Math.min(r,g),b);  float max=Math.max(Math.max(r,g),b);  float l=lighting(min,max);  float s=saturation(min,max,l);  float h=hue(r,g,b,min,max);  return new Vector3D(h,s,l);}  }
class C{  public void updateScopeCascadingType(String type) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  if (type.equalsIgnoreCase("strict"))   scope.setAttribute("cascading","strict"); else   if (type.equalsIgnoreCase("small"))   scope.setAttribute("cascading","small"); else   if (type.equalsIgnoreCase("standard"))   scope.setAttribute("cascading","standard"); else   scope.setAttribute("cascading","standard");}  }
class C{  public Builder timeToLive(int value){  timeToLive=value;  return this;}  }
class C{  public void deinstall(JTextComponent c){  c.removeMouseListener(this);  c.removeMouseMotionListener(this);  c.removeFocusListener(this);  c.removePropertyChangeListener(handler);  Document doc=c.getDocument();  if (doc != null) {    doc.removeDocumentListener(handler);  }synchronized (this) {    component=null;  }  if (flasher != null) {    flasher.stop();  }}  }
class C{  private static void remoteCreateCache() throws Exception {  Assert.assertTrue(cache == null,"cache should be null");  DistributedCacheTestCase x=new DistributedCacheTestCase(){  };  cache=CacheFactory.create(x.getSystem());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_NO_ACK);  cache.createRegion("root",factory.create());}  }
class C{  public Plot add(String label,Population population,int x,int y){  List<Number> xs=new ArrayList<Number>();  List<Number> ys=new ArrayList<Number>();  for (  Solution solution : population) {    if (!solution.violatesConstraints()) {      xs.add(solution.getObjective(x));      ys.add(solution.getObjective(y));    }  }  scatter(label,xs,ys);  setLabelsIfBlank("Objective " + (x + 1),"Objective " + (y + 1));  return this;}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  multiplexing.receive(this,p);}  }
class C{  protected static Filter createRasterFeImage(BridgeContext ctx,Rectangle2D primitiveRegion,ParsedURL purl){  Filter filter=ImageTagRegistry.getRegistry().readURL(purl);  Rectangle2D bounds=filter.getBounds2D();  AffineTransform scale=new AffineTransform();  scale.translate(primitiveRegion.getX(),primitiveRegion.getY());  scale.scale(primitiveRegion.getWidth() / (bounds.getWidth() - 1),primitiveRegion.getHeight() / (bounds.getHeight() - 1));  scale.translate(-bounds.getX(),-bounds.getY());  return new AffineRable8Bit(filter,scale);}  }
class C{  public void removeZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.removeZoomListener(listener);  }}  }
class C{  public SocksException(int errCode,String errString){  this.errCode=errCode;  this.errString=errString;}  }
class C{  public void appendToLog(String logAppendMessage){  ProfilingTimerNode currentNode=current.get();  if (currentNode != null) {    currentNode.appendToLog(logAppendMessage);  }}  }
class C{  public static void subscribeToLockReports(Callback callback){  subscribe(Type.LOCKING,callback);}  }
class C{  public static void closeMqttClientQuite(IMqttAsyncClient iMqttAsyncClient){  if (iMqttAsyncClient != null) {    try {      iMqttAsyncClient.disconnectForcibly();    } catch (    MqttException e) {      logger.info("Close Mqtt Client quite.",e);    }  }}  }
class C{  DirectCompactSketch(UpdateSketch sketch,Memory dstMem){  super(sketch.isEmpty(),sketch.getSeedHash(),sketch.getRetainedEntries(true),sketch.getThetaLong());  int emptyBit=isEmpty() ? (byte)EMPTY_FLAG_MASK : 0;  byte flags=(byte)(emptyBit | READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK);  boolean ordered=false;  long[] compactCache=CompactSketch.compactCache(sketch.getCache(),getRetainedEntries(false),getThetaLong(),ordered);  mem_=loadCompactMemory(compactCache,isEmpty(),getSeedHash(),getRetainedEntries(false),getThetaLong(),dstMem,flags);}  }
class C{  public static double haversineDistance(double lon1,double lat1,double lon2,double lat2){  double dLat=Math.toRadians(lat2 - lat1);  double dLon=Math.toRadians(lon2 - lon1);  lat1=Math.toRadians(lat1);  lat2=Math.toRadians(lat2);  double a=Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1)* Math.cos(lat2);  double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return EARTH_RADIUS * c;}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double slopeExponentValue=0;  double SCAExponent=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      SCAExponent=Double.parseDouble(args[i]);    } else     if (i == 4) {      slopeExponentValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (SCAExponent < 0.1) {      SCAExponent=0.1;    }    if (SCAExponent > 20) {      SCAExponent=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("spectrum.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          z=(SCAExponent + 1) * Math.pow((area[col] / 22.13),SCAExponent) * Math.pow((Math.sin(Math.toRadians(slope[col])) / 0.0896),slopeExponentValue);          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void layoutContainer(Container target){  checkContainer(target);  int nChildren=target.getComponentCount();  int[] xOffsets=new int[nChildren];  int[] xSpans=new int[nChildren];  int[] yOffsets=new int[nChildren];  int[] ySpans=new int[nChildren];  Dimension alloc=target.getSize();  Insets in=target.getInsets();  alloc.width-=in.left + in.right;  alloc.height-=in.top + in.bottom;  ComponentOrientation o=target.getComponentOrientation();  int absoluteAxis=resolveAxis(axis,o);  boolean ltr=(absoluteAxis != axis) ? o.isLeftToRight() : true;synchronized (this) {    checkRequests();    if (absoluteAxis == X_AXIS) {      SizeRequirements.calculateTiledPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans,ltr);      SizeRequirements.calculateAlignedPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);    } else {      SizeRequirements.calculateAlignedPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans,ltr);      SizeRequirements.calculateTiledPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);    }  }  for (int i=0; i < nChildren; i++) {    Component c=target.getComponent(i);    c.setBounds((int)Math.min((long)in.left + (long)xOffsets[i],Integer.MAX_VALUE),(int)Math.min((long)in.top + (long)yOffsets[i],Integer.MAX_VALUE),xSpans[i],ySpans[i]);  }  if (dbg != null) {    for (int i=0; i < nChildren; i++) {      Component c=target.getComponent(i);      dbg.println(c.toString());      dbg.println("X: " + xChildren[i]);      dbg.println("Y: " + yChildren[i]);    }  }}  }
class C{  public void deshadow(){}  }
class C{  public void clearAccessibleSelection(){  JList.this.clearSelection();}  }
class C{  @Override public void prepareMenu(Menu menu){  boolean isPageMenu;  boolean isOverviewMenu;  boolean isTabletEmptyModeMenu;  boolean isOverview=mActivity.isInOverviewMode();  boolean isIncognito=mActivity.getCurrentTabModel().isIncognito();  Tab currentTab=mActivity.getActivityTab();  if (mActivity.isTablet()) {    isPageMenu=!isOverview && mActivity.getCurrentTabModel().getCount() != 0;    isOverviewMenu=isOverview && mActivity.getCurrentTabModel().getCount() != 0;    isTabletEmptyModeMenu=!isPageMenu && mActivity.getCurrentTabModel().getCount() == 0;  } else {    isPageMenu=!isOverview;    isOverviewMenu=isOverview;    isTabletEmptyModeMenu=false;  }  menu.setGroupVisible(R.id.PAGE_MENU,isPageMenu);  menu.setGroupVisible(R.id.OVERVIEW_MODE_MENU,isOverviewMenu);  menu.setGroupVisible(R.id.TABLET_EMPTY_MODE_MENU,isTabletEmptyModeMenu);  if (isPageMenu && currentTab != null) {    String url=currentTab.getUrl();    boolean isChromeScheme=url.startsWith(UrlConstants.CHROME_SCHEME) || url.startsWith(UrlConstants.CHROME_NATIVE_SCHEME);    menu.findItem(R.id.icon_row_menu_id).setVisible(!mActivity.isTablet());    if (!mActivity.isTablet()) {      MenuItem forwardMenuItem=menu.findItem(R.id.forward_menu_id);      forwardMenuItem.setEnabled(currentTab.canGoForward());      mReloadMenuItem=menu.findItem(R.id.reload_menu_id);      mReloadMenuItem.setIcon(R.drawable.btn_reload_stop);      loadingStateChanged(currentTab.isLoading());      MenuItem bookmarkMenuItem=menu.findItem(R.id.bookmark_this_page_id);      bookmarkMenuItem.setEnabled(mBookmarksBridge.isEditBookmarksEnabled());      if (currentTab.getBookmarkId() != ChromeBrowserProviderClient.INVALID_BOOKMARK_ID) {        bookmarkMenuItem.setIcon(R.drawable.btn_star_filled);        bookmarkMenuItem.setChecked(true);        bookmarkMenuItem.setTitleCondensed(mActivity.getString(R.string.edit_bookmark));      } else {        bookmarkMenuItem.setIcon(R.drawable.btn_star);        bookmarkMenuItem.setChecked(false);        bookmarkMenuItem.setTitleCondensed(null);      }    }    MenuItem recentTabsMenuItem=menu.findItem(R.id.recent_tabs_menu_id);    recentTabsMenuItem.setVisible(!isIncognito && FeatureUtilities.canAllowSync(mActivity));    recentTabsMenuItem.setTitle(R.string.menu_recent_tabs);    if (OfflinePageBridge.isEnabled()) {      MenuItem allBookmarksMenuItem=menu.findItem(R.id.all_bookmarks_menu_id);      allBookmarksMenuItem.setTitle(mActivity.getString(R.string.menu_bookmarks_offline_pages));    }    menu.findItem(R.id.share_row_menu_id).setVisible(!isChromeScheme);    ShareHelper.configureDirectShareMenuItem(mActivity,menu.findItem(R.id.direct_share_menu_id));    menu.findItem(R.id.find_in_page_id).setVisible(!currentTab.isNativePage() && currentTab.getWebContents() != null);    MenuItem homescreenItem=menu.findItem(R.id.add_to_homescreen_id);    boolean canAddShortcutToHomescreen=ShortcutHelper.isAddToHomeIntentSupported(mActivity);    homescreenItem.setVisible(canAddShortcutToHomescreen && !isChromeScheme && !isIncognito);    MenuItem requestItem=menu.findItem(R.id.request_desktop_site_id);    requestItem.setVisible(!isChromeScheme || currentTab.isNativePage());    requestItem.setChecked(currentTab.getUseDesktopUserAgent());    requestItem.setTitleCondensed(requestItem.isChecked() ? mActivity.getString(R.string.menu_request_desktop_site_on) : mActivity.getString(R.string.menu_request_desktop_site_off));    PrintingController printingController=mActivity.getChromeApplication().getPrintingController();    disableEnableMenuItem(menu,R.id.print_id,printingController != null && !currentTab.isNativePage(),printingController != null && !printingController.isBusy() && PrefServiceBridge.getInstance().isPrintingEnabled(),PrefServiceBridge.getInstance().isPrintingManaged());    menu.findItem(R.id.reader_mode_prefs_id).setVisible(DomDistillerUrlUtils.isDistilledPage(currentTab.getUrl()));    maybeDisableRecentsAndHistoryItems(menu);  }  if (isOverviewMenu) {    if (isIncognito) {      menu.findItem(R.id.close_all_tabs_menu_id).setVisible(false);      menu.findItem(R.id.close_all_incognito_tabs_menu_id).setEnabled(true);    } else {      menu.findItem(R.id.close_all_incognito_tabs_menu_id).setVisible(false);      menu.findItem(R.id.close_all_tabs_menu_id).setEnabled(mActivity.getTabModelSelector().getTotalTabCount() > 0);    }  }  boolean incognitoItemVisible=!FeatureUtilities.isDocumentMode(mActivity) || (currentTab == null) || !(TextUtils.equals(currentTab.getUrl(),UrlConstants.NTP_URL) && isIncognito);  disableEnableMenuItem(menu,R.id.new_incognito_tab_menu_id,incognitoItemVisible,PrefServiceBridge.getInstance().isIncognitoModeEnabled(),PrefServiceBridge.getInstance().isIncognitoModeManaged());  mActivity.prepareMenu(menu);}  }
class C{  public void testStartStopRestartContainer() throws Exception {  File jetty7x=new File(System.getProperty("artifacts.dir"),"jetty7x.zip");  assertTrue("File " + jetty7x + " is missing",jetty7x.isFile());  File configurationDirectory=new File(System.getProperty("daemon.test-configurations.home"));  assertFalse("Directory " + configurationDirectory + " already exists",configurationDirectory.isDirectory());  StandaloneLocalConfiguration configuration=(StandaloneLocalConfiguration)CargoDaemonClientTest.configurationFactory.createConfiguration("jetty7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,configurationDirectory.getAbsolutePath());  InstalledLocalContainer container=(InstalledLocalContainer)CargoDaemonClientTest.containerFactory.createContainer("jetty7x",ContainerType.INSTALLED,configuration);  container.getSystemProperties().put("systemPropertyName","testProperty");  configuration.setProperty(ServletPropertySet.PORT,System.getProperty("servlet.port"));  configuration.setProperty(GeneralPropertySet.RMI_PORT,System.getProperty("rmi.port"));  configuration.addXmlReplacement("etc/webdefault.xml","//web-app/description","Testing XML replacements via the CARGO Daemon");  DeployableFactory deployableFactory=new DefaultDeployableFactory();  List<Deployable> deployables=new ArrayList<Deployable>();  deployables.add(deployableFactory.createDeployable("jetty7x",new File(System.getProperty("artifacts.dir"),"simple-war.war").getAbsolutePath(),DeployableType.WAR));  deployables.add(deployableFactory.createDeployable("jetty7x",new File(System.getProperty("artifacts.dir"),"systemproperty-war.war").getAbsolutePath(),DeployableType.WAR));  DaemonClient client=new DaemonClient(CargoDaemonClientTest.daemonUrl);  DaemonStart start=new DaemonStart();  start.setContainer(container);  start.setDeployables(deployables);  start.setHandleId("test1");  start.setInstallerZipFile(jetty7x.getAbsolutePath());  client.start(start);  DeployableMonitor cargoCpcMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/cargocpc/index.html"),CargoDaemonClientTest.TIMEOUT);  DeployableMonitor simpleWarMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/simple-war/index.jsp"),CargoDaemonClientTest.TIMEOUT);  DeployableMonitor systemPropertyWarMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/systemproperty-war/test?systemPropertyName=testProperty"),CargoDaemonClientTest.TIMEOUT);  DeployerWatchdog cargoCpcWatchdog=new DeployerWatchdog(cargoCpcMonitor);  cargoCpcWatchdog.watchForAvailability();  DeployerWatchdog simpleWarWatchdog=new DeployerWatchdog(simpleWarMonitor);  simpleWarWatchdog.watchForAvailability();  DeployerWatchdog systemPropertyWarWatchdog=new DeployerWatchdog(systemPropertyWarMonitor);  systemPropertyWarWatchdog.watchForAvailability();  client.stop("test1");  cargoCpcWatchdog.watchForUnavailability();  start=new DaemonStart();  start.setHandleId("test1");  client.start(start);  cargoCpcWatchdog.watchForAvailability();  simpleWarWatchdog.watchForAvailability();  systemPropertyWarWatchdog.watchForAvailability();  client.stop("test1");  cargoCpcWatchdog.watchForUnavailability();  String webdefaultXml=new DefaultFileHandler().readTextFile(configurationDirectory.getAbsolutePath() + "/etc/webdefault.xml","UTF-8");  assertTrue(webdefaultXml.contains("Testing XML replacements via the CARGO Daemon"));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"GL_JournalLine"));    return false;  }  if (!getOrCreateCombination())   return false;  if (getC_ValidCombination_ID() <= 0) {    log.saveError("SaveError",Msg.parseTranslation(getCtx(),"@FillMandatory@" + "@C_ValidCombination_ID@"));    return false;  }  fillDimensionsFromCombination();  BigDecimal rate=getCurrencyRate();  BigDecimal amt=rate.multiply(getAmtSourceDr());  if (amt.scale() > getPrecision())   amt=amt.setScale(getPrecision(),BigDecimal.ROUND_HALF_UP);  setAmtAcctDr(amt);  amt=rate.multiply(getAmtSourceCr());  if (amt.scale() > getPrecision())   amt=amt.setScale(getPrecision(),BigDecimal.ROUND_HALF_UP);  setAmtAcctCr(amt);  if (getAD_Org_ID() <= 0) {    setAD_Org_ID(getParent().getAD_Org_ID());  }  return true;}  }
class C{  @Override public final int addDirectoryEntry(E entry){  if (entry.isLeafEntry()) {    throw new UnsupportedOperationException("Entry is not a directory entry!");  }  if (isLeaf()) {    throw new UnsupportedOperationException("Node is not a directory node!");  }  return addEntry(entry);}  }
class C{  void defaultMethodInSuperClass(){  System.out.println("");}  }
class C{  boolean isGreaterEqualTo(Identifier minimum){  if (major < minimum.major)   return false;  if (major > minimum.major)   return true;  if (minor < minimum.minor)   return false;  if (minor > minimum.minor)   return true;  return service >= minimum.service;}  }
class C{  public static SipRequest createMessage(SipDialogPath dialog,String contentType,String content) throws PayloadException {  return createMessage(dialog,null,contentType,content.getBytes(UTF8));}  }
class C{  private void checkEmptyMap(Map<?,?> map) throws Exception {  assert map.isEmpty();  assert !map.containsKey("key");  assert !map.containsValue("value");  assertEquals(0,map.size());  assert map.keySet().isEmpty();  assert map.entrySet().isEmpty();  assert map.values().isEmpty();  assert !map.keySet().iterator().hasNext();  assert !map.entrySet().iterator().hasNext();  assert !map.values().iterator().hasNext();}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("gtone",null));}  }
class C{  public Pair<Long,Integer> archiveTicket(int position){  Cursor cursor=getCursor();  if (cursor == null || cursor.isClosed()) {    return null;  }  cursor.moveToPosition(position);  long id;  try {    id=cursor.getLong(iId);  } catch (  CursorIndexOutOfBoundsException e) {    return null;  }  final Time validTo=FormatUtil.timeFrom3339(cursor.getString(iValidTo));  int status=getValidityStatus(cursor.getInt(iStatus),validTo);  if (status == Tickets.STATUS_EXPIRED) {    ContentValues values=new ContentValues();    values.put(TicketProvider.Tickets.STATUS,TicketProvider.Tickets.STATUS_DELETED);    c.getContentResolver().update(ContentUris.withAppendedId(TicketProvider.Tickets.CONTENT_URI,id),values,null,null);    getCursor().requery();    return new Pair<Long,Integer>(id,status);  } else {    return null;  }}  }
class C{  public static boolean fileExists(String file){  File tmp=new File(file);  return (tmp.isFile() && tmp.exists());}  }
class C{  public H2FullPrunedBlockStore(NetworkParameters params,String dbName,int fullStoreDepth,int cacheSize) throws BlockStoreException {  this(params,dbName,fullStoreDepth);  try {    Statement s=conn.get().createStatement();    s.executeUpdate("SET CACHE_SIZE " + cacheSize);    s.close();  } catch (  SQLException e) {    throw new BlockStoreException(e);  }}  }
class C{  public void selectAll(){  MusicTrackListFragment musicTrackDetailFragment=(MusicTrackListFragment)getSupportFragmentManager().findFragmentById(R.id.track_detail_container);  if (musicTrackDetailFragment != null)   musicTrackDetailFragment.selectAll();}  }
class C{  public NewFileAction(Application app){  this(app,ID);}  }
class C{  public static boolean verify(byte[] data,ECDSASignature signature,byte[] pub){  if (FAKE_SIGNATURES)   return true;  if (NativeSecp256k1.enabled)   return NativeSecp256k1.verify(data,signature.encodeToDER(),pub);  ECDSASigner signer=new ECDSASigner();  ECPublicKeyParameters params=new ECPublicKeyParameters(CURVE.getCurve().decodePoint(pub),CURVE);  signer.init(false,params);  try {    return signer.verifySignature(data,signature.r,signature.s);  } catch (  NullPointerException e) {    log.error("Caught NPE inside bouncy castle");    e.printStackTrace();    return false;  }}  }
class C{  public static String makeDescriptor(Class[] params,Class retType){  StringBuffer sbuf=new StringBuffer();  sbuf.append('(');  for (int i=0; i < params.length; i++)   makeDesc(sbuf,params[i]);  sbuf.append(')');  if (retType != null)   makeDesc(sbuf,retType);  return sbuf.toString();}  }
class C{  private void parse(DerInputStream derin,boolean oldStyle) throws IOException {  contentInfo=new ContentInfo(derin,oldStyle);  contentType=contentInfo.contentType;  DerValue content=contentInfo.getContent();  if (contentType.equals((Object)ContentInfo.SIGNED_DATA_OID)) {    parseSignedData(content);  } else   if (contentType.equals((Object)ContentInfo.OLD_SIGNED_DATA_OID)) {    parseOldSignedData(content);  } else   if (contentType.equals((Object)ContentInfo.NETSCAPE_CERT_SEQUENCE_OID)) {    parseNetscapeCertChain(content);  } else {    throw new ParsingException("content type " + contentType + " not supported.");  }}  }
class C{  <E>E tryAgain(Callable<E> callable,Exception e) throws OAuthException, MalformedURLException, InterruptedException, AuthenticationException {  clearAuthTokenCache();  initProjectHostingService(true);  try {    return callable.call();  } catch (  AuthenticationException e1) {    clearAuthTokenCache();    throw e1;  }catch (  Exception e1) {    throw new MyRuntimeException(e);  }}  }
class C{  public StringDataPoint(double[] data,String string){  super(data);  this.string=string;}  }
class C{  FieldArray(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mFieldNumbers=new int[initialCapacity];  mData=new FieldData[initialCapacity];  mSize=0;}  }
class C{  public static int mapToGridCell(float lon,float lat){  int xIndex=(int)Math.floor((Math.abs(LON_WEST) - Math.abs(lon)) / DELTA_LON);  int yIndex=(int)Math.floor((LAT_NORTH - lat) / DELTA_LAT);  return xIndex + (yIndex * NUMBER_OF_GRID_X);}  }
class C{  public void processResponse(StunResponseEvent response){  socketDelegate.processResponse(response);}  }
class C{  public Object onMessage(String id,Object data){  if (!"onScrollChanged".equals(id)) {    LOG.d(TAG,"onMessage(" + id + ","+ data+ ")");  }  if ("onReceivedError".equals(id)) {    JSONObject d=(JSONObject)data;    try {      this.onReceivedError(d.getInt("errorCode"),d.getString("description"),d.getString("url"));    } catch (    JSONException e) {      e.printStackTrace();    }  } else   if ("exit".equals(id)) {    this.endActivity();  }  return null;}  }
class C{  @Override public synchronized void mark(int readlimit){}  }
class C{  public LagartoDOMBuilder enableXmlMode(){  config.ignoreWhitespacesBetweenTags=true;  config.setCaseSensitive(true);  config.setEnableRawTextModes(false);  config.enabledVoidTags=false;  config.selfCloseVoidTags=false;  config.impliedEndTags=false;  config.setEnableConditionalComments(false);  config.setParseXmlTags(true);  return this;}  }
class C{  public CGraphMenu(final CGraphWindow parent,final ZyGraph graph,final IViewContainer container,final JCheckBoxMenuItem proximityBrowsingMenu,final JCheckBoxMenuItem autoLayoutMenu){  super("Graph");  final ZyGraphViewSettings settings=graph.getSettings();  setMnemonic("HK_MENU_GRAPH".charAt(0));  autoLayoutMenu.setSelected(settings.getLayoutSettings().getAutomaticLayouting());  add(autoLayoutMenu);  proximityBrowsingMenu.setSelected(settings.getProximitySettings().getProximityBrowsing());  add(proximityBrowsingMenu);  addSeparator();  add(CActionProxy.proxy(new CActionGraphSettings(parent,graph)));  add(CActionProxy.proxy(new CActionShowProximityBrowsingSettingsDialog(parent,graph.getSettings())));  addSeparator();  add(CActionProxy.proxy(new CActionInsertView(parent,graph,container)));  addSeparator();  add(CActionProxy.proxy(new CActionDeleteSelectedNodes(graph,false)));  add(CActionProxy.proxy(new CActionDeleteUnselectedNodes(graph)));  add(CActionProxy.proxy(new CActionDeleteInvisibleNodes(graph)));  addSeparator();  final JMenu transformMenu=new JMenu("Transform");  transformMenu.add(CActionProxy.proxy(new CActionInlineAll(parent,container,graph)));  if ((container instanceof CModuleContainer) || (container instanceof CProjectContainer)) {    transformMenu.addSeparator();    transformMenu.add(CActionProxy.proxy(new CActionShowReil(parent,container,container.getModules().get(0),graph.getRawView())));  }  transformMenu.add(CActionProxy.proxy(new CActionShowDataflow(parent,container,graph.getRawView())));  add(transformMenu);}  }
class C{  public static byte subtract(byte a,byte b){  return (byte)(a ^ b);}  }
class C{  public byte byteValue(){  return 0;}  }
class C{  public static final <A>CollectionX<A> toLazyCollection(final Stream<A> stream){  return toLazyCollection(stream.iterator());}  }
class C{  public ExecutionExitItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.PSEUDOSTATE;}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  public boolean hasNext() throws IOException {  return thriftReader.hasNext();}  }
class C{  public void engineUpdate(byte b){  int i=(int)(count % BLOCK_LENGTH);  count++;  buffer[i]=b;  if (i == BLOCK_LENGTH - 1)   transform(buffer,0);}  }
class C{  private ClearAction(){  putValue(SHORT_DESCRIPTION,"Remove results highlighting from the graph");}  }
class C{  public ContainerPe(int id,ContainerPeProvisioner containerPeProvisioner){  setId(id);  setContainerPeProvisioner(containerPeProvisioner);  status=FREE;}  }
class C{  public static URI resolve(final URI baseURI,final String reference){  return URIUtils.resolve(baseURI,URI.create(reference));}  }
class C{  public VerletParticle2D(float x,float y,float w){  super(x,y);  prev=new Vec2D(this);  temp=new Vec2D();  setWeight(w);}  }
class C{  public static void normal(float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,Vector3f dest){  dest.x=((v1Y - v0Y) * (v2Z - v0Z)) - ((v1Z - v0Z) * (v2Y - v0Y));  dest.y=((v1Z - v0Z) * (v2X - v0X)) - ((v1X - v0X) * (v2Z - v0Z));  dest.z=((v1X - v0X) * (v2Y - v0Y)) - ((v1Y - v0Y) * (v2X - v0X));  dest.normalize();}  }
class C{  public void lockDevice(String code){  resultBuilder.build(code);  devicePolicyManager.lockNow();}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  if (mainString == null) {    return null;  }  if (UtilValidate.isEmpty(oldString)) {    return mainString;  }  if (newString == null) {    newString="";  }  int i=mainString.lastIndexOf(oldString);  if (i < 0)   return mainString;  StringBuilder mainSb=new StringBuilder(mainString);  while (i >= 0) {    mainSb.replace(i,i + oldString.length(),newString);    i=mainString.lastIndexOf(oldString,i - 1);  }  return mainSb.toString();}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  public long convertTransverseMercatorToGeodetic(double Easting,double Northing){  double c;  double de;  double dlam;  double eta;  double eta2;  double eta3;  double eta4;  double ftphi;  int i;  double s;  double sn;  double sr;  double t;  double tan2;  double tan4;  double t10;  double t11;  double t12;  double t13;  double t14;  double t15;  double t16;  double t17;  double tmd;  double tmdo;  long Error_Code=TRANMERC_NO_ERROR;  if ((Easting < (TranMerc_False_Easting - TranMerc_Delta_Easting)) || (Easting > (TranMerc_False_Easting + TranMerc_Delta_Easting))) {    Error_Code|=TRANMERC_EASTING_ERROR;  }  if ((Northing < (TranMerc_False_Northing - TranMerc_Delta_Northing)) || (Northing > (TranMerc_False_Northing + TranMerc_Delta_Northing))) {    Error_Code|=TRANMERC_NORTHING_ERROR;  }  if (Error_Code == TRANMERC_NO_ERROR) {    tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat);    tmd=tmdo + (Northing - TranMerc_False_Northing) / TranMerc_Scale_Factor;    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(0.e0),2)),3);    ftphi=tmd / sr;    for (i=0; i < 5; i++) {      t10=TranMerc_ap * ftphi - TranMerc_bp * Math.sin(2.0 * ftphi) + TranMerc_cp * Math.sin(4.0 * ftphi) - TranMerc_dp * Math.sin(6.0 * ftphi) + TranMerc_ep * Math.sin(8.0 * ftphi);      sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);      ftphi=ftphi + (tmd - t10) / sr;    }    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);    sn=TranMerc_a / Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2));    s=Math.sin(ftphi);    c=Math.cos(ftphi);    t=Math.tan(ftphi);    tan2=t * t;    tan4=tan2 * tan2;    eta=TranMerc_ebs * Math.pow(c,2);    eta2=eta * eta;    eta3=eta2 * eta;    eta4=eta3 * eta;    de=Easting - TranMerc_False_Easting;    if (Math.abs(de) < 0.0001)     de=0.0;    t10=t / (2.e0 * sr * sn* Math.pow(TranMerc_Scale_Factor,2));    t11=t * (5.e0 + 3.e0 * tan2 + eta - 4.e0 * Math.pow(eta,2) - 9.e0 * tan2 * eta) / (24.e0 * sr * Math.pow(sn,3)* Math.pow(TranMerc_Scale_Factor,4));    t12=t * (61.e0 + 90.e0 * tan2 + 46.e0 * eta + 45.E0 * tan4 - 252.e0 * tan2 * eta - 3.e0 * eta2 + 100.e0 * eta3 - 66.e0 * tan2 * eta2 - 90.e0 * tan4 * eta + 88.e0 * eta4 + 225.e0 * tan4 * eta2 + 84.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / (720.e0 * sr * Math.pow(sn,5)* Math.pow(TranMerc_Scale_Factor,6));    t13=t * (1385.e0 + 3633.e0 * tan2 + 4095.e0 * tan4 + 1575.e0 * Math.pow(t,6)) / (40320.e0 * sr * Math.pow(sn,7)* Math.pow(TranMerc_Scale_Factor,8));    Latitude=ftphi - Math.pow(de,2) * t10 + Math.pow(de,4) * t11 - Math.pow(de,6) * t12 + Math.pow(de,8) * t13;    t14=1.e0 / (sn * c * TranMerc_Scale_Factor);    t15=(1.e0 + 2.e0 * tan2 + eta) / (6.e0 * Math.pow(sn,3) * c* Math.pow(TranMerc_Scale_Factor,3));    t16=(5.e0 + 6.e0 * eta + 28.e0 * tan2 - 3.e0 * eta2 + 8.e0 * tan2 * eta + 24.e0 * tan4 - 4.e0 * eta3 + 4.e0 * tan2 * eta2 + 24.e0 * tan2 * eta3) / (120.e0 * Math.pow(sn,5) * c* Math.pow(TranMerc_Scale_Factor,5));    t17=(61.e0 + 662.e0 * tan2 + 1320.e0 * tan4 + 720.e0 * Math.pow(t,6)) / (5040.e0 * Math.pow(sn,7) * c* Math.pow(TranMerc_Scale_Factor,7));    dlam=de * t14 - Math.pow(de,3) * t15 + Math.pow(de,5) * t16 - Math.pow(de,7) * t17;    Longitude=TranMerc_Origin_Long + dlam;    if (Math.abs(Latitude) > (90.0 * PI / 180.0))     Error_Code|=TRANMERC_NORTHING_ERROR;    if ((Longitude) > (PI)) {      Longitude-=(2 * PI);      if (Math.abs(Longitude) > PI)       Error_Code|=TRANMERC_EASTING_ERROR;    }    if (Math.abs(dlam) > (9.0 * PI / 180) * Math.cos(Latitude)) {      Error_Code|=TRANMERC_LON_WARNING;    }    if (Latitude > 1.0e10)     Error_Code|=TRANMERC_LON_WARNING;  }  return (Error_Code);}  }
class C{  public static String md5(String str){  if (str == null) {    return null;  }  try {    MessageDigest messageDigest=MessageDigest.getInstance("MD5");    messageDigest.update(str.getBytes());    return new String(encodeHex(messageDigest.digest()));  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){  onSuccess(statusCode,response);}  }
class C{  @Override public void fmov(int size,Register dst,Register src){  assert !(dst.getRegisterCategory().equals(CPU) && src.getRegisterCategory().equals(CPU)) : "src and dst cannot both be integer registers.";  if (dst.getRegisterCategory().equals(CPU)) {    super.fmovFpu2Cpu(size,dst,src);  } else   if (src.getRegisterCategory().equals(CPU)) {    super.fmovCpu2Fpu(size,dst,src);  } else {    super.fmov(size,dst,src);  }}  }
class C{  public static Related email(String email){  return new Related("mailto:" + email);}  }
class C{  public void testNextIntBadBounds(){  int[][] badBoundss={{17,2},{-42,-42},{Integer.MAX_VALUE,Integer.MIN_VALUE}};  ThreadLocalRandom rnd=ThreadLocalRandom.current();  for (  int[] badBounds : badBoundss) {    try {      rnd.nextInt(badBounds[0],badBounds[1]);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }}  }
class C{  public String provideQualifier(){  return "unknown";}  }
class C{  @Nullable private static UUID uuidValue(String key,Map<String,Object> params) throws IgniteCheckedException {  assert key != null;  String val=(String)params.get(key);  try {    return val == null ? null : UUID.fromString(val);  } catch (  NumberFormatException ignore) {    throw new IgniteCheckedException("Failed to parse parameter of UUID type [" + key + "="+ val+ "]");  }}  }
class C{  @Override public void clear(){  if (_fields != null) {    _fields.clear();  }  _childDocuments=null;}  }
class C{  @SuppressWarnings("unchecked") private void startUpSecondary() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs-secondary");  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setDefaultMode(PRIMARY);  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setPort(11500);  igfsCfg.setIpcEndpointConfiguration(endpointCfg);  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("igfs-grid-secondary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  G.start(cfg);}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  private void readChunkFromSource() throws IOException {  final IRemoteChunk<E> chunk=src.nextChunk();  if (nchunks == 0) {    keyOrder=chunk.getKeyOrder();  }  exhausted=chunk.isExhausted();  a=chunk.getChunk();  index=0;  if (log.isInfoEnabled()) {    log.info("nchunks=" + nchunks + ", sourceExhausted="+ exhausted+ ", elementsInChunk="+ a.length);  }  nchunks++;}  }
class C{  public static void callEMCRefreshIfRequired(DbClient dbClient,SmisCommandHelper helper,StorageSystem storage,List<URI> blockObjectURIs){  try {    if (blockObjectURIs != null) {      List<URI> blockObjectsRequiringRefresh=new ArrayList<URI>();      boolean refreshIsRequired=false;      for (      URI uri : blockObjectURIs) {        BlockObject object=BlockObject.fetch(dbClient,uri);        if (object.getRefreshRequired()) {          blockObjectsRequiringRefresh.add(uri);          refreshIsRequired=true;        }      }      if (refreshIsRequired) {        SimpleFunction toUpdateRefreshRequired=new RefreshRequiredUpdateFunction(storage.getId(),blockObjectsRequiringRefresh,dbClient);        _log.info(String.format("Following objects require EMCRefresh, " + "will attempt call:\n%s",Joiner.on(',').join(blockObjectsRequiringRefresh)));        helper.callRefreshSystem(storage,toUpdateRefreshRequired);      } else {        _log.info("No EMCRefresh is required");      }    }  } catch (  Exception e) {    _log.error("Exception callEMCRefreshIfRequired",e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.040 -0500",hash_original_method="97CEB1054BCE489E9912047DDD2569CF",hash_generated_method="5A3261347299998869D5339D00F41336") public void startTransition(int durationMillis){  mFrom=0;  mTo=255;  mAlpha=0;  mDuration=mOriginalDuration=durationMillis;  mReverse=false;  mTransitionState=TRANSITION_STARTING;  invalidateSelf();}  }
class C{  private void parseFavoriteLink(Node node){}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public int numInstances(){  return m_Instances.size();}  }
class C{  private static int findThemeResourceId(ThemeInfo[] themeInfos,String needle){  if (themeInfos != null && !TextUtils.isEmpty(needle)) {    int n=themeInfos.length;    for (int i=0; i < n; i++) {      ThemeInfo info=themeInfos[i];      if (needle.equals(info.themeId)) {        return info.styleResourceId;      }    }  }  return 0;}  }
class C{  public NotEmptyValidator(@NonNull final CharSequence errorMessage){  super(errorMessage);}  }
class C{  public Text(final String txt){  text=Document.get().createTextNode(txt);  setElement(text.<Element>cast());}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget") @Override public Long findMaximumWithoutSplitSizeAndThreshold(Collection<Long> input){  return findMaximum0(input);}  }
class C{  public HttpURLConnection open(URL url,Proxy proxy){  OkHttpClient copy=mClient.newBuilder().proxy(proxy).build();  String protocol=url.getProtocol();  if (protocol.equals("http"))   return new OkHttpURLConnection(url,copy);  if (protocol.equals("https"))   return new OkHttpsURLConnection(url,copy);  throw new IllegalArgumentException("Unexpected protocol: " + protocol);}  }
class C{  private void addChart(){  JFreeChart chart=ChartFactory.createXYBarChart(getTitle(),"Buckets (sec)",false,"Count",dataset,PlotOrientation.VERTICAL,true,true,false);  chart.addProgressListener(locker);  XYPlot plot=(XYPlot)chart.getPlot();  XYItemRenderer renderer=plot.getRenderer();  renderer.setToolTipGenerator(dataset);  groupActivatingPanel=new GroupActivatingPanel(dataset,locker);  org.jfree.chart.ChartPanel chartPanel=new org.jfree.chart.ChartPanel(chart);  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,groupActivatingPanel,chartPanel);  splitPane.setDividerLocation(200);  mainPanel().add(BorderLayout.CENTER,splitPane);}  }
class C{  private boolean sameType(Object flowSet){  return (flowSet instanceof ArrayPackedSet && ((ArrayPackedSet)flowSet).map == map);}  }
class C{  public LogConfigurationException(String message,Throwable cause){  super(message + " (Caused by " + cause+ ")");  this.cause=cause;}  }
class C{  public Exp(){  super(Number.class,Number.class);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1__PARAMETER_LIST_1:    getParameterList_1().clear();  getParameterList_1().addAll((Collection<? extends ParameterList_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testGetCrawlerService(){  System.out.println("getCrawlerService");  setReplayMode();  CrawlAuditCommandImpl instance=new TestCrawlAuditCommandImpl();  assertEquals(mockCrawlerService,instance.getCrawlerService());  setVerifyMode();}  }
class C{  @SuppressLint("MissingSuperCall") @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState,R.layout.activity_media_details);  mBackgroundUpdater.initialise(this,R.color.black);  Media media=getIntent().getParcelableExtra(EXTRA_ITEM);  updateBackground(media.headerImage);  if (VersionUtils.isLollipop()) {    postponeEnterTransition();  }  if (media instanceof Movie) {    getFragmentManager().beginTransaction().replace(R.id.fragment,TVMovieDetailsFragment.newInstance(media)).commit();  } else {    getFragmentManager().beginTransaction().replace(R.id.fragment,TVShowDetailsFragment.newInstance(media)).commit();  }  getFragmentManager().executePendingTransactions();  if (VersionUtils.isLollipop()) {    startPostponedEnterTransition();  }}  }
class C{  @Override public boolean removeAttribute(String name){  boolean result=true;  ownerMessage.addEvent(Type.CLIENT_DELETE_DATA,name,null);  if (super.removeAttribute(name)) {    modified=true;    syncEvents.add(new SharedObjectEvent(Type.CLIENT_DELETE_DATA,name,null));    deleteStats.incrementAndGet();  } else {    result=false;  }  notifyModified();  return result;}  }
class C{  public void reset(){  displayCountries.clear();  supportedCountries=null;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void insertFmtPrefFicha(FmtPrefFichaVO fmtPrefFicha){  try {    DbConnection conn=getConnection();    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,fmtPrefFicha));  } catch (  Exception e) {    logger.error("Error insertando formato de ficha preferente: " + fmtPrefFicha,e);    throw new DBException("insertando formato de ficha preferente",e);  }}  }
class C{  public static void patchCode(CodeArray code,int patchOffset,int rel32){  if (DEBUG_CODE_PATCH) {    VM.sysWrite("patching at ",patchOffset);    VM.sysWrite(" inst ");    VM.sysWriteHex(code.get(patchOffset));    VM.sysWriteln(" offset ",rel32);  }  if (VM.VerifyAssertions) {    VM._assert(code.get(patchOffset) == NOPtemplate);    VM._assert(rel32 <= (MAX_DISPL << LG_INSTRUCTION_WIDTH));    VM._assert(rel32 >= (MIN_DISPL << LG_INSTRUCTION_WIDTH));  }  code.set(patchOffset,(18 << 26) | (rel32 & LI_MASK));}  }
class C{  public DoubleArrayList(){  this(10);}  }
class C{  public synchronized void remove(int index){  XYEntry<Double,Double> removedEntry=mXY.removeByIndex(index);  double removedX=removedEntry.getKey();  double removedY=removedEntry.getValue();  if (removedX == mMinX || removedX == mMaxX || removedY == mMinY || removedY == mMaxY) {    initRange();  }}  }
class C{  void storeRandomFile() throws Exception {  File f=new File(System.getProperty("user.home") + "/temp/rand.txt");  FileOutputStream out=new FileOutputStream(f);  CalculateHashConstant test=new CalculateHashConstant();  byte[] buff=new byte[4];  for (int i=0; i < 10000000 / 8; i++) {    int y=test.hash(i);    writeInt(buff,0,y);    out.write(buff);  }  out.close();}  }
class C{  public T caseN4FieldAccessor(N4FieldAccessor object){  return null;}  }
class C{  public static void cancelAllTask(){  CachedThreadPool.getInstance().cancelAllTask();}  }
class C{  public Warning(String message){  super(message);}  }
class C{  public boolean correctArmor(StringBuffer buff){  boolean correct=true;  int maxArmorPoints=maxArmorPoints(aero,aero.getWeight());  int armorTotal=0;  for (int loc=0; loc < aero.locations(); loc++) {    if (aero.getOArmor(loc) > maxArmorPoints) {      buff.append(printArmorLocation(loc)).append(printArmorLocProp(loc,maxArmorPoints)).append("\n");      correct=false;    }    armorTotal+=aero.getOArmor(loc);  }  if (armorTotal > maxArmorPoints) {    buff.append("Total armor," + armorTotal + ", is greater than the maximum: "+ maxArmorPoints);    correct=false;  }  return correct;}  }
class C{  public long cutime(){  return Long.parseLong(fields[15]);}  }
class C{  private boolean isZeroToThree(final char ch){  return ch >= '0' && ch <= '3';}  }
class C{  static public void packInt(DataOutput out,int value) throws IOException {  int shift=(value & ~0x7F);  if (shift != 0) {    shift=31 - Integer.numberOfLeadingZeros(value);    shift-=shift % 7;    while (shift != 0) {      out.writeByte((byte)((value >>> shift) & 0x7F));      shift-=7;    }  }  out.writeByte((byte)((value & 0x7F) | 0x80));}  }
class C{  public String saveFile(String relativeFile,InputStream inputStream){  String file=fileHandler.append(getWorkspaceDirectory(),relativeFile);  fileHandler.copy(inputStream,fileHandler.getOutputStream(file));  return file;}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public int flatten(byte[] dst,long pos,int dstOff,int len) throws IgniteCheckedException {  if (contains(pos)) {    byte[] data=readFut.get();    int srcPos=(int)(pos - this.pos);    int cpLen=Math.min(len,data.length - srcPos);    U.arrayCopy(data,srcPos,dst,dstOff,cpLen);    return cpLen;  }  return 0;}  }
class C{  @Override public BigdataGraph configureGraphInstance(final GraphConfigurationContext context) throws GraphConfigurationException {  try {    return configure(context);  } catch (  Exception ex) {    throw new GraphConfigurationException(ex);  }}  }
class C{  public span addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void removeMethod(CtMethod m) throws NotFoundException {  checkModify();}  }
class C{  public void onNewIntent(Intent intent){  if (mInitializationComplete) {    mActivityDelegate.onNewIntentWithNative(intent);  } else {    if (mPendingNewIntents == null)     mPendingNewIntents=new ArrayList<Intent>(1);    mPendingNewIntents.add(intent);  }}  }
class C{  public void shutdown(){  processor=null;  super.shutdown();  log.debug("Shutting down ProcessXformsQueue task ...");}  }
class C{  public Query walkTokens(ODataTokenList tokens,Query left){  if (!tokens.hasNext()) {    return null;  }  if (tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.OPENPAREN)) {    tokens.skip();    left=walkTokens(tokens,left);  }  if (tokens.hasNext() && tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.SIMPLE_TYPE)) {    left=parseUnaryTerm(tokens);  }  if (tokens.hasNext() && tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.CLOSEPAREN)) {    tokens.skip();    return left;  }  if (tokens.hasNext() && tokens.lookToken().getKind().equals(ODataToken.ODataTokenKind.BINARY_OPERATOR)) {    left=visitBinaryOperator(left,stringToVerb(tokens.next().getUriLiteral()),walkTokens(tokens,null));  }  if (tokens.hasNext()) {    left=walkTokens(tokens,left);  }  return left;}  }
class C{  private void scan(UriDeploymentScannerContext scanCtx){  Collection<String> foundFiles=U.newHashSet(tstampCache.size());  long start=U.currentTimeMillis();  processHttp(foundFiles,scanCtx);  if (scanCtx.getLogger().isDebugEnabled())   scanCtx.getLogger().debug("HTTP scanner time in ms: " + (U.currentTimeMillis() - start));  if (!scanCtx.isFirstScan()) {    Collection<String> deletedFiles=new HashSet<>(tstampCache.keySet());    deletedFiles.removeAll(foundFiles);    if (!deletedFiles.isEmpty()) {      List<String> uris=new ArrayList<>();      for (      String file : deletedFiles)       uris.add(getFileUri(fileName(file),scanCtx));      tstampCache.keySet().removeAll(deletedFiles);      scanCtx.getListener().onDeletedFiles(uris);    }  }}  }
class C{  public static void assertEqualsNaN(String message,double expected,double actual){  if (Double.isNaN(expected)) {    if (!Double.isNaN(actual)) {      throw new AssertionFailedError(message + " expected: <" + expected+ "> but was: <"+ actual+ ">");    }  } else {    assertEquals(message,expected,actual,DELTA);  }}  }
class C{  protected StringBuffer constructStatement(RowChangeData.ActionType action,String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> columns,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues,ArrayList<OneRowChange.ColumnVal> colValues){  StringBuffer stmt=new StringBuffer();  if (action == RowChangeData.ActionType.INSERT) {    stmt.append("INSERT INTO ");    stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName));    stmt.append(" ( ");    printColumnSpec(stmt,columns,null,colValues,PrintMode.NAMES_ONLY," , ");    stmt.append(" ) ");    stmt.append(" VALUES ( ");    printColumnSpec(stmt,columns,null,colValues,PrintMode.PLACE_HOLDER," , ");    stmt.append(" ) ");  } else   if (action == RowChangeData.ActionType.UPDATE) {    stmt.append("UPDATE ");    stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName));    stmt.append(" SET ");    printColumnSpec(stmt,columns,null,colValues,PrintMode.ASSIGNMENT," , ");    stmt.append(" WHERE ");    printColumnSpec(stmt,keys,keyValues,colValues,PrintMode.ASSIGNMENT," AND ");  } else   if (action == RowChangeData.ActionType.DELETE) {    stmt.append("DELETE FROM ");    stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName));    stmt.append(" WHERE ");    printColumnSpec(stmt,keys,keyValues,colValues,PrintMode.ASSIGNMENT," AND ");  }  return stmt;}  }
class C{  public JBBPOut Short(final String str,final JBBPBitOrder bitOrder) throws IOException {  assertNotEnded();  if (this.processCommands) {    final boolean msb0=bitOrder == JBBPBitOrder.MSB0;    for (int i=0; i < str.length(); i++) {      short value=(short)str.charAt(i);      if (msb0) {        value=(short)JBBPFieldShort.reverseBits(value);      }      _writeShort(value);    }  }  return this;}  }
class C{  public boolean hasValidMagicNumber(){  if (mMagicNumber == null)   return false;  if (mMagicNumber.length != 4)   return false;  for (int i=0; i < 4; i++)   if (mMagicNumber[i] != MAGIC_NUMBER[i])   return false;  return true;}  }
class C{  public Builder path(final ResourcePath path){  this.path=path;  return this;}  }
class C{  public MappingAdapterFactory(){  if (modelPackage == null) {    modelPackage=MappingPackage.eINSTANCE;  }}  }
class C{  public static <T>HashSet<T> newHashSet(){  return new HashSet<T>();}  }
class C{  public void evalNotifications(DispatchContext dctx,Map<String,? extends Object> context,Map<String,Object> result){  for (  ModelNotification notify : this.notifications) {    notify.callNotify(dctx,this,context,result);  }}  }
class C{  public boolean scanData(String delimiter,XMLStringBuffer buffer) throws IOException {  boolean done=false;  int delimLen=delimiter.length();  char charAt0=delimiter.charAt(0);  boolean external=fCurrentEntity.isExternal();  do {    if (fCurrentEntity.position == fCurrentEntity.count) {      load(0,true);    } else     if (fCurrentEntity.position >= fCurrentEntity.count - delimLen) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.position,fCurrentEntity.ch,0,fCurrentEntity.count - fCurrentEntity.position);      load(fCurrentEntity.count - fCurrentEntity.position,false);      fCurrentEntity.position=0;    }    if (fCurrentEntity.position >= fCurrentEntity.count - delimLen) {      int length=fCurrentEntity.count - fCurrentEntity.position;      buffer.append(fCurrentEntity.ch,fCurrentEntity.position,length);      fCurrentEntity.columnNumber+=fCurrentEntity.count;      fCurrentEntity.position=fCurrentEntity.count;      load(0,true);      return false;    }    int offset=fCurrentEntity.position;    int c=fCurrentEntity.ch[offset];    int newlines=0;    if (c == '\n' || (c == '\r' && external)) {      do {        c=fCurrentEntity.ch[fCurrentEntity.position++];        if (c == '\r' && external) {          newlines++;          fCurrentEntity.lineNumber++;          fCurrentEntity.columnNumber=1;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.position=newlines;            if (load(newlines,false)) {              break;            }          }          if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {            fCurrentEntity.position++;            offset++;          } else {            newlines++;          }        } else         if (c == '\n') {          newlines++;          fCurrentEntity.lineNumber++;          fCurrentEntity.columnNumber=1;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.position=newlines;            fCurrentEntity.count=newlines;            if (load(newlines,false)) {              break;            }          }        } else {          fCurrentEntity.position--;          break;        }      } while (fCurrentEntity.position < fCurrentEntity.count - 1);      for (int i=offset; i < fCurrentEntity.position; i++) {        fCurrentEntity.ch[i]='\n';      }      int length=fCurrentEntity.position - offset;      if (fCurrentEntity.position == fCurrentEntity.count - 1) {        buffer.append(fCurrentEntity.ch,offset,length);        return true;      }    }    OUTER:     while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == charAt0) {        int delimOffset=fCurrentEntity.position - 1;        for (int i=1; i < delimLen; i++) {          if (fCurrentEntity.position == fCurrentEntity.count) {            fCurrentEntity.position-=i;            break OUTER;          }          c=fCurrentEntity.ch[fCurrentEntity.position++];          if (delimiter.charAt(i) != c) {            fCurrentEntity.position--;            break;          }        }        if (fCurrentEntity.position == delimOffset + delimLen) {          done=true;          break;        }      } else       if (c == '\n' || (external && c == '\r')) {        fCurrentEntity.position--;        break;      } else       if (XMLChar.isInvalid(c)) {        fCurrentEntity.position--;        int length=fCurrentEntity.position - offset;        fCurrentEntity.columnNumber+=length - newlines;        buffer.append(fCurrentEntity.ch,offset,length);        return true;      }    }    int length=fCurrentEntity.position - offset;    fCurrentEntity.columnNumber+=length - newlines;    if (done) {      length-=delimLen;    }    buffer.append(fCurrentEntity.ch,offset,length);  } while (!done);  return !done;}  }
class C{  public void testIsolationLevel() throws Exception {  if (versionMeetsMinimum(4,0)) {    String[] isoLevelNames=new String[]{"Connection.TRANSACTION_NONE","Connection.TRANSACTION_READ_COMMITTED","Connection.TRANSACTION_READ_UNCOMMITTED","Connection.TRANSACTION_REPEATABLE_READ","Connection.TRANSACTION_SERIALIZABLE"};    int[] isolationLevels=new int[]{Connection.TRANSACTION_NONE,Connection.TRANSACTION_READ_COMMITTED,Connection.TRANSACTION_READ_UNCOMMITTED,Connection.TRANSACTION_REPEATABLE_READ,Connection.TRANSACTION_SERIALIZABLE};    DatabaseMetaData dbmd=this.conn.getMetaData();    for (int i=0; i < isolationLevels.length; i++) {      if (dbmd.supportsTransactionIsolationLevel(isolationLevels[i])) {        this.conn.setTransactionIsolation(isolationLevels[i]);        assertTrue("Transaction isolation level that was set (" + isoLevelNames[i] + ") was not returned, nor was a more restrictive isolation level used by the server",this.conn.getTransactionIsolation() == isolationLevels[i] || this.conn.getTransactionIsolation() > isolationLevels[i]);      }    }  }}  }
class C{  @Override public final String toString(){  return statusLine;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodes.class,args);}  }
class C{  public BlockConsistencyGroup findExistingBlockConsistencyGroup(String psetLabel,NamedURI projectNamedUri,NamedURI tenantOrg){  for (  VolumeIngestionContext volumeContext : getRootIngestionRequestContext().getProcessedUnManagedVolumeMap().values()) {    if (volumeContext instanceof RecoverPointVolumeIngestionContext) {      RecoverPointVolumeIngestionContext rpContext=(RecoverPointVolumeIngestionContext)volumeContext;      BlockConsistencyGroup bcg=rpContext.getManagedBlockConsistencyGroup();      if (bcg != null) {        if ((bcg.getLabel().equals(psetLabel)) && (bcg.getProject().equals(projectNamedUri)) && (bcg.getTenant().equals(tenantOrg))) {          _logger.info("found already-instantiated BlockConsistencyGroup {} (hash {})",bcg.getLabel(),bcg.hashCode());          return bcg;        }      }    }  }  _logger.info("did not find an already-instantiated BlockConsistencyGroup for ",psetLabel);  return null;}  }
class C{  public static final String escapeJava(String unescaped){  String escaped=replace(unescaped,"\\","\\\\");  escaped=replace(escaped,"\"","\\\"");  return escaped;}  }
class C{  private void convertTypeChoiceAndNullToString(List<RestrictionEntry> restrictionEntries){  for (  RestrictionEntry entry : restrictionEntries) {    if (entry.getType() == RestrictionEntry.TYPE_CHOICE || entry.getType() == RestrictionEntry.TYPE_NULL) {      entry.setType(RestrictionEntry.TYPE_STRING);    }  }}  }
class C{  private static int headCoefficient(int[] a){  int degree=computeDegree(a);  if (degree == -1) {    return 0;  }  return a[degree];}  }
class C{  public void testNoReplicatorProperties() throws Exception {  PropertiesManager pm=new PropertiesManager(new File("foo"),this.dynamicProperties,dynamicRole);  try {    pm.loadProperties();    throw new Exception("Did not fail when loading bad replicator.properties");  } catch (  ReplicatorException e) {  }}  }
class C{  public void dataIgnore(){  log.fine("#" + m_vo.TabNo);  m_mTable.dataIgnore();  setCurrentRow(m_currentRow,false);  fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_IGNORE));  log.fine("#" + m_vo.TabNo + "- fini");}  }
class C{  public final boolean isActive(){  return _state.get().isActive();}  }
class C{  public void doTest(){  try {    if (m_tradingdays.isDirty()) {      this.setStatusBarMessage("Please save before running strategy ...\n",BasePanel.WARNING);    } else {      contractPanel.doCloseAll();      Collections.sort(m_tradingdays.getTradingdays(),Tradingday.DATE_ORDER_DESC);      if (m_tradingdays.getTradingdays().isEmpty()) {        return;      }      ZonedDateTime toOpen=m_tradingdays.getTradingdays().get(0).getOpen();      ZonedDateTime fromOpen=m_tradingdays.getTradingdays().get(m_tradingdays.getTradingdays().size() - 1).getOpen();      List<Tradestrategy> strategyBarSizeChartHistItems=m_tradePersistentModel.findTradestrategyDistinctByDateRange(fromOpen,toOpen);      List<Tradestrategy> contractsItems=m_tradePersistentModel.findTradestrategyContractDistinctByDateRange(fromOpen,toOpen);      FilterBackTestPane filterTradestrategyPane=new FilterBackTestPane(fromOpen,toOpen,strategyBarSizeChartHistItems,contractsItems);      TextDialog dialog=new TextDialog(this.getFrame(),"Run back test for the following",true,filterTradestrategyPane);      dialog.setLocationRelativeTo(this);      dialog.setVisible(true);      if (!dialog.getCancel()) {        Tradestrategy tradestrategy=filterTradestrategyPane.getSelectedStrategyBarSizeChartHist();        if (null == tradestrategy)         return;        List<Contract> contracts=filterTradestrategyPane.getSelectedContracts();        Tradingdays tradingdays=new Tradingdays();        for (        Tradingday itemTradingday : m_tradingdays.getTradingdays()) {          if (!TradingCalendar.between(itemTradingday.getOpen(),filterTradestrategyPane.getSelectedStartDate(),filterTradestrategyPane.getSelectedEndDate()))           continue;          Tradingday tradingday=(Tradingday)itemTradingday.clone();          for (          Tradestrategy item : itemTradingday.getTradestrategies()) {            if (tradestrategy.getBarSize().equals(item.getBarSize()) && tradestrategy.getChartDays().equals(item.getChartDays()) && tradestrategy.getStrategy().equals(item.getStrategy())) {              if (contracts.isEmpty()) {                tradingday.addTradestrategy(item);              } else {                for (                Contract contract : contracts) {                  if (contract.equals(item.getContract())) {                    tradingday.addTradestrategy(item);                    break;                  }                }              }            }          }          if (!tradingday.getTradestrategies().isEmpty()) {            tradingdays.add(tradingday);          }        }        runStrategy(tradingdays,false);      }    }  } catch (  Exception ex) {    this.setErrorMessage("Error reconciling open orders.",ex.getMessage(),ex);  }}  }
class C{  private void initialize(){  this.setAlwaysOnTop(false);  this.setContentPane(getJTabbed());  this.setTitle(Constant.messages.getString("enc2.title"));}  }
class C{  static <T>GeneralRange<T> all(Comparator<? super T> comparator){  return new GeneralRange<T>(comparator,false,null,OPEN,false,null,OPEN);}  }
class C{  public final Vec3D addSelf(float a,float b,float c){  x+=a;  y+=b;  z+=c;  return this;}  }
class C{  public boolean isAttending(){  return (idea != null);}  }
class C{  public JSONObject(){  this.map=new HashMap();}  }
class C{  public static int lastIndexOf(String src,char c,int startIndex,int endIndex){  int total=src.length() - 1;  if (total < 0) {    return -1;  }  if (startIndex >= total) {    startIndex=total;  }  if (endIndex < 0) {    endIndex=0;  }  for (int i=startIndex; i >= endIndex; i--) {    if (src.charAt(i) == c) {      return i;    }  }  return -1;}  }
class C{  public static GF2nPolynomialElement ZERO(GF2nPolynomialField f){  GF2Polynomial polynomial=new GF2Polynomial(f.getDegree());  return new GF2nPolynomialElement(f,polynomial);}  }
class C{  public void printBytes(byte[] data,int offset,int length) throws IOException {  int i;  for (; length >= 3; length-=3) {    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));    os.write(base64encode(chunk >> 18));    os.write(base64encode(chunk >> 12));    os.write(base64encode(chunk >> 6));    os.write(base64encode(chunk));    offset+=3;  }  if (length == 2) {    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);    os.write(base64encode(chunk >> 12));    os.write(base64encode(chunk >> 6));    os.write(base64encode(chunk));    os.write('=');  } else   if (length == 1) {    int chunk=data[offset] & 0xff;    os.write(base64encode(chunk >> 6));    os.write(base64encode(chunk));    os.write('=');    os.write('=');  }}  }
class C{  private Base64(){}  }
class C{  public void enter(){  ((Depth)get()).inc();}  }
class C{  final synchronized private FileChannel reopenChannel() throws IOException {  if (raf != null && raf.getChannel().isOpen()) {    return raf.getChannel();  }  this.raf=new RandomAccessFile(file,fileMode);  if (INFO)   log.info("(Re-)opened file: " + file);  if (bufferMode != BufferMode.Mapped) {    try {      final boolean readOnly="r".equals(fileMode);      if (raf.getChannel().tryLock(0,Long.MAX_VALUE,readOnly) == null) {        try {          raf.close();        } catch (        Throwable t) {        }        throw new IOException("File already locked? file=" + file);      }    } catch (    IOException ex) {      if (INFO)       log.info("FileLock not supported: file=" + file,ex);    }catch (    OverlappingFileLockException ex) {      if (INFO)       log.info("FileLock problem: file=" + file,ex);      throw new RuntimeException("FileLock Overlap",ex);    }  }  return raf.getChannel();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType docType;  DocumentType docTypeNull=null;  Element documentElement;  Element element1;  Element element2;  Element element3;  Element element4;  Element element5;  Element element6;  Element element7;  Text text1;  Text text2;  Text text3;  ProcessingInstruction pi;  CDATASection cData;  Comment comment;  EntityReference entRef;  NodeList elementList;  Node appendedChild;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:root",docTypeNull);  element1=newDoc.createElement("element1");  element2=newDoc.createElement("element2");  element3=newDoc.createElement("element3");  element4=newDoc.createElement("element4");  element5=newDoc.createElement("element5");  element6=newDoc.createElement("element6");  element7=newDoc.createElement("element7");  text1=newDoc.createTextNode("text1");  text2=newDoc.createTextNode("text2");  text3=newDoc.createTextNode("text3");  cData=newDoc.createCDATASection("Cdata");  comment=newDoc.createComment("comment");  pi=newDoc.createProcessingInstruction("PITarget","PIData");  entRef=newDoc.createEntityReference("EntRef");  assertNotNull("createdEntRefNotNull",entRef);  documentElement=newDoc.getDocumentElement();  appendedChild=documentElement.appendChild(element1);  appendedChild=element2.appendChild(text1);  appendedChild=element2.appendChild(text2);  appendedChild=element2.appendChild(text3);  appendedChild=element1.appendChild(element2);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  appendedChild=element3.appendChild(entRef);  appendedChild=element3.appendChild(text1);  appendedChild=element3.appendChild(text2);  appendedChild=element1.appendChild(element3);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  appendedChild=element4.appendChild(cData);  appendedChild=element4.appendChild(text1);  appendedChild=element4.appendChild(text2);  appendedChild=element1.appendChild(element4);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element5.appendChild(comment);  appendedChild=element5.appendChild(text2);  appendedChild=element5.appendChild(text3);  appendedChild=element1.appendChild(element5);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element6.appendChild(pi);  appendedChild=element6.appendChild(text2);  appendedChild=element6.appendChild(text3);  appendedChild=element1.appendChild(element6);  entRef=(EntityReference)entRef.cloneNode(false);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element7.appendChild(entRef);  appendedChild=element7.appendChild(text1);  appendedChild=element7.appendChild(text2);  appendedChild=element7.appendChild(text3);  appendedChild=element1.appendChild(element7);  elementList=element1.getChildNodes();  assertSize("nodeNormalize01_1Bef",6,elementList);  elementList=element2.getChildNodes();  assertSize("nodeNormalize01_2Bef",3,elementList);  elementList=element3.getChildNodes();  assertSize("nodeNormalize01_3Bef",3,elementList);  elementList=element4.getChildNodes();  assertSize("nodeNormalize01_4Bef",3,elementList);  elementList=element5.getChildNodes();  assertSize("nodeNormalize01_5Bef",3,elementList);  elementList=element6.getChildNodes();  assertSize("nodeNormalize01_6Bef",3,elementList);  elementList=element7.getChildNodes();  assertSize("nodeNormalize01_7Bef",4,elementList);  newDoc.normalize();  elementList=element1.getChildNodes();  assertSize("nodeNormalize01_1Aft",6,elementList);  elementList=element2.getChildNodes();  assertSize("nodeNormalize01_2Aft",1,elementList);  elementList=element3.getChildNodes();  assertSize("nodeNormalize01_3Aft",2,elementList);  elementList=element4.getChildNodes();  assertSize("nodeNormalize01_4Aft",2,elementList);  elementList=element5.getChildNodes();  assertSize("nodeNormalize01_5Aft",2,elementList);  elementList=element6.getChildNodes();  assertSize("nodeNormalize01_6Aft",2,elementList);  elementList=element7.getChildNodes();  assertSize("nodeNormalize01_7Aft",2,elementList);}  }
class C{  public void initCqListeners(CqListener[] newListeners){  if (true) {    throw new IllegalStateException(LocalizedStrings.CqAttributesMutatorImpl_NOT_YET_SUPPORTED.toLocalizedString());  }}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:12.365 -0500",hash_original_method="54D21D729D42DC46694E67B89A565C46",hash_generated_method="34344A6BE132AF626299B3B6BCCE447B") public ColorDrawable(){  this(null);}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  protected static int computeCharacterPosition(IDocument document,ITextSelection line,int offset,char character,String partitioning){  String text=line.getText();  if (text == null)   return 0;  int insertPos;  if (character == BRACECHAR) {    insertPos=computeArrayInitializationPos(document,line,offset,partitioning);    if (insertPos == -1) {      insertPos=computeAfterTryDoElse(document,line,offset);    }    if (insertPos == -1) {      insertPos=computeAfterParenthesis(document,line,offset,partitioning);    }  } else   if (character == SEMICHAR) {    if (isForStatement(text,offset)) {      insertPos=-1;    } else {      int nextPartitionPos=nextPartitionOrLineEnd(document,line,offset,partitioning);      insertPos=startOfWhitespaceBeforeOffset(text,nextPartitionPos);      if (insertPos > 0 && text.charAt(insertPos - 1) == character)       insertPos=insertPos - 1; else       if (insertPos > 0 && text.charAt(insertPos - 1) == '}') {        int opening=scanBackward(document,insertPos - 1 + line.getOffset(),partitioning,-1,new char[]{'{'});        if (opening > -1 && opening < offset + line.getOffset()) {          if (computeArrayInitializationPos(document,line,opening - line.getOffset(),partitioning) == -1) {            insertPos=offset;          }        }      }    }  } else {    Assert.isTrue(false);    return -1;  }  return insertPos;}  }
class C{  @TransactionAttribute(TransactionAttributeType.MANDATORY) public void updateTags(TechnicalProduct tp,String locale,List<Tag> tags) throws ValidationException {  ArgumentValidator.notNull("tags",tags);  Map<String,Integer> localeCounter=new HashMap<String,Integer>();  List<TechnicalProductTag> existingTags=new ArrayList<TechnicalProductTag>(tp.getTags());  List<TechnicalProductTag> removedTags=new ArrayList<TechnicalProductTag>(tp.getTags());  Iterator<Tag> iter=tags.iterator();  while (iter.hasNext()) {    Tag tag=iter.next();    if (locale == null || tag.getLocale().equals(locale)) {      Integer localeCount=localeCounter.get(tag.getLocale());      if (localeCount == null)       localeCount=new Integer(1); else       localeCount=new Integer(localeCount.intValue() + 1);      localeCounter.put(tag.getLocale(),localeCount);      if (localeCount.intValue() > MAX_COUNT_TAGS) {        sessionCtx.setRollbackOnly();        throw new ValidationException(ReasonEnum.TAGS_MAX_COUNT,"tags",new Object[]{Integer.valueOf(MAX_COUNT_TAGS)});      }      TechnicalProductTag existingTag=getTagAssignment(existingTags,tag);      if (existingTag == null) {        try {          Tag persistentTag=(Tag)dm.find(tag);          if (persistentTag == null) {            dm.persist(tag);            persistentTag=tag;          }          TechnicalProductTag persistentRel=new TechnicalProductTag();          persistentRel.setTag(persistentTag);          persistentRel.setTechnicalProduct(tp);          dm.persist(persistentRel);          dm.flush();          existingTags.add(persistentRel);          tp.getTags().add(persistentRel);        } catch (        NonUniqueBusinessKeyException e) {          sessionCtx.setRollbackOnly();          SaaSSystemException sse=new SaaSSystemException("The tag '" + tag.getValue() + " for technical product '"+ tp.getKey()+ "' cannot be stored, as the business key already exists.",e);          throw sse;        }      } else {        removedTags.remove(existingTag);      }    }  }  Iterator<TechnicalProductTag> deliter=removedTags.iterator();  while (deliter.hasNext()) {    TechnicalProductTag deltagrel=deliter.next();    Tag deltag=deltagrel.getTag();    if (locale == null || deltag.getLocale().equals(locale)) {      dm.remove(deltagrel);      tp.getTags().remove(deltagrel);    }  }  dm.flush();  deleteOrphanedTags();}  }
class C{  private void initializeWorkList(){  for (  GVCongruenceClass c : B) {    if (c.size() == 1) {      continue;    }    Iterator<ValueGraphVertex> i=c.iterator();    ValueGraphVertex first=i.next();    while (i.hasNext()) {      ValueGraphVertex v=i.next();      if (!checkCongruence(first,v)) {        workList.push(c);        break;      }    }  }}  }
class C{  public MockTransaction(final Deserializer deserializer){  super(deserializer.readInt("type"),DeserializationOptions.VERIFIABLE,deserializer);  this.customField=deserializer.readInt("customField");}  }
class C{  private void clearStores(int cnt){  for (int i=0; i < cnt; i++) {    String cacheName=grid(i).configuration().getCacheConfiguration()[0].getName();    GridCacheContext ctx=((IgniteKernal)grid()).context().cache().internalCache(cacheName).context();    CacheStore store=ctx.store().configuredStore();    ((GridCacheTestStore)store).reset();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  public static float convertOpacity(Value v){  float r=v.getFloatValue();  return (r < 0f) ? 0f : (r > 1.0f) ? 1.0f : r;}  }
class C{  public static void writeParityFlag(final ITranslationEnvironment environment,final long offset,final OperandSize resultSize,final String result,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(resultSize,"Error: Argument resultSize can't be null");  Preconditions.checkNotNull(result,"Error: Argument result can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final String tempReg=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(offset,resultSize,result,resultSize,tempReg));  instructions.add(ReilHelpers.createBsh(offset + 1,resultSize,tempReg,OperandSize.BYTE,"-4",resultSize,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createXor(offset + 2,resultSize,tempReg,resultSize,Helpers.PARITY_FLAG,resultSize,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 3,resultSize,Helpers.PARITY_FLAG,resultSize,String.valueOf(0xFL),OperandSize.WORD,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 4,OperandSize.WORD,String.valueOf(0x9669L),OperandSize.WORD,Helpers.PARITY_FLAG,OperandSize.WORD,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 5,OperandSize.WORD,Helpers.PARITY_FLAG,OperandSize.WORD,String.valueOf(0x8000L),OperandSize.WORD,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 6,OperandSize.WORD,Helpers.PARITY_FLAG,OperandSize.BYTE,"-15",OperandSize.BYTE,Helpers.PARITY_FLAG));}  }
class C{  public void killContainer(final KillContainerParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/kill")){    addQueryParamIfNotNull(connection,"signal",params.getSignal());    final DockerResponse response=connection.request();    if (NO_CONTENT.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }  } }  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public static Set<AnnotationMirror> findEffectiveLowerBoundAnnotations(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch){  AnnotatedTypeMirror source=toSearch;  TypeKind kind=source.getKind();  while (kind == TypeKind.TYPEVAR || kind == TypeKind.WILDCARD || kind == TypeKind.INTERSECTION) {switch (source.getKind()) {case TYPEVAR:      source=((AnnotatedTypeVariable)source).getLowerBound();    break;case WILDCARD:  source=((AnnotatedWildcardType)source).getSuperBound();break;case INTERSECTION:final Set<AnnotationMirror> glb=glbOfBounds((AnnotatedIntersectionType)source,qualifierHierarchy);return glb;default :ErrorReporter.errorAbort("Unexpected AnnotatedTypeMirror with no primary annotation!" + "toSearch=" + toSearch + "source="+ source);}kind=source.getKind();}return source.getAnnotations();}  }
class C{  public DataSourceStatus(String type,String name,String state,String host,String role,int precedence,String service,String url,String driver,String vendor){  super(type,name,state,null);  TungstenProperties datasourceProperties=new TungstenProperties();  datasourceProperties.setString(PROPERTY_KEY_SERVICE,service);  datasourceProperties.setString(PROPERTY_KEY_HOST,host);  datasourceProperties.setString(PROPERTY_KEY_ROLE,role);  datasourceProperties.setInt(PROPERTY_KEY_PRECEDENCE,precedence);  datasourceProperties.setString(PROPERTY_KEY_URL,url);  datasourceProperties.setString(PROPERTY_KEY_DRIVER,driver);  datasourceProperties.setString(PROPERTY_KEY_VENDOR,vendor);  setProperties(datasourceProperties.map());}  }
class C{  public static Impp icq(String handle){  return new Impp(ICQ,handle);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe Gamma parameter.\n" + "\t(default: 0.01)","G",1,"-G <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void initializeIndex(boolean loadEntries) throws IMQException {  this.initEntriesUpdated=0;  try {    this.initContext.newScope(1);    for (int i=0; i < this.iteratorSize; i++) {      CompiledIteratorDef iterDef=(CompiledIteratorDef)this.indexInitIterators.get(i);      RuntimeIterator rIter=null;      if (!this.hasInitOccuredOnce) {        iterDef.computeDependencies(this.initContext);        rIter=iterDef.getRuntimeIterator(this.initContext);        this.initContext.addToIndependentRuntimeItrMapForIndexCreation(iterDef);      }      if (rIter == null) {        rIter=iterDef.getRuntimeIterator(this.initContext);      }      this.initContext.bindIterator(rIter);    }    this.hasInitOccuredOnce=true;    if (this.indexResultSetType == null) {      this.indexResultSetType=createIndexResultSetType();    }    if (loadEntries) {      doNestedIterationsForIndexInit(0,this.initContext.getCurrentIterators());    }  } catch (  IMQException imqe) {    throw imqe;  }catch (  Exception e) {    throw new IMQException(e);  } finally {    this.initContext.popScope();  }}  }
class C{  public Constant(final E value){  super(BOp.NOARGS,BOp.NOANNS);  if (value == null)   throw new IllegalArgumentException();  if (value instanceof IConstant<?>) {    throw new IllegalArgumentException();  }  this.value=value;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:08.562 -0500",hash_original_method="9317B5C63D080DC3774D9B3DFE979A1B",hash_generated_method="817796371ED855BF67F0184F350184F0") public TextAppearanceSpan(Context context,int appearance,int colorList){  ColorStateList textColor;  TypedArray a=context.obtainStyledAttributes(appearance,com.android.internal.R.styleable.TextAppearance);  textColor=a.getColorStateList(com.android.internal.R.styleable.TextAppearance_textColor);  mTextColorLink=a.getColorStateList(com.android.internal.R.styleable.TextAppearance_textColorLink);  mTextSize=a.getDimensionPixelSize(com.android.internal.R.styleable.TextAppearance_textSize,-1);  mStyle=a.getInt(com.android.internal.R.styleable.TextAppearance_textStyle,0);  int tf=a.getInt(com.android.internal.R.styleable.TextAppearance_typeface,0);switch (tf) {case 1:    mTypeface="sans";  break;case 2:mTypeface="serif";break;case 3:mTypeface="monospace";break;default :mTypeface=null;break;}a.recycle();if (colorList >= 0) {a=context.obtainStyledAttributes(com.android.internal.R.style.Theme,com.android.internal.R.styleable.Theme);textColor=a.getColorStateList(colorList);a.recycle();}mTextColor=textColor;}  }
class C{  public void required(int table,int field){  int table_start=bb.capacity() - table;  int vtable_start=table_start - bb.getInt(table_start);  boolean ok=bb.getShort(vtable_start + field) != 0;  if (!ok)   throw new AssertionError("FlatBuffers: field " + field + " must be set");}  }
class C{  public void add(CFrame window){  windows.add(window);  window.addComponentListener(eventListener);  window.addWindowListener(eventListener);}  }
class C{  public Maze(int N,int rseed,double pOpen,MazeType mt){  this.N=N;  init(rseed,pOpen,mt);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getSubScopes()).basicAdd(otherEnd,msgs);case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:  if (superScope != null)   msgs=((InternalEObject)superScope).eInverseRemove(this,SexecPackage.EXECUTION_SCOPE__SUB_SCOPES,ExecutionScope.class,msgs);return basicSetSuperScope((ExecutionScope)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  if (WindowsMenuItemUI.isVistaPainting()) {    WindowsMenuItemUI.paintText(accessor,g,menuItem,textRect,text);    return;  }  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  if (model.isEnabled() && (model.isArmed() || (menuItem instanceof JMenu && model.isSelected()))) {    g.setColor(selectionForeground);  }  WindowsGraphicsUtils.paintText(g,menuItem,textRect,text,0);  g.setColor(oldColor);}  }
class C{  public void truncate(){  calculateIdealPoint();  translateByIdealPoint();  List<List<Solution>> members=associateToReferencePoint(this);  clear();  for (int i=0; i < members.size(); i++) {    List<Solution> associations=members.get(i);    if (associations.size() > 0) {      add(select(associations,i));    }  }}  }
class C{  public static void main(String... args) throws Exception {  TestUndoLogLarge.test();}  }
class C{  protected boolean isSupportedContentType(String contentType){  if (contentType != null) {    for (int i=0; i < fLegalContentTypes.length; i++) {      if (fLegalContentTypes[i].equals(contentType))       return true;    }  }  return false;}  }
class C{  @Override public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e){  if (e.getFilter() == null) {    updateCapabilitiesFilter(null);  } else {    updateCapabilitiesFilter((Capabilities)e.getFilter().clone());  }}  }
class C{  public void reload(){  if (isNative) {    ((BrowserComponent)internal).reload();  } else {    ((HTMLComponent)internal).refreshDOM();  }}  }
class C{  public NoRouteToHostException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public static <T>T orderAccesses(T ref){  theVolatile=0;  return ref;}  }
class C{  private static int computeNetSize(SimpleList<Statement> statements){  int netSize=0;  for (int i=0; i < statements.size(); i++) {    if (!(statements.get(i).isPrimitiveInitialization())) {      netSize++;    }  }  return netSize;}  }
class C{  public void addDiscoverInfoTo(DiscoverInfo response){  response.addIdentities(getIdentities());synchronized (features) {    for (Iterator<String> it=getFeatures(); it.hasNext(); ) {      response.addFeature(it.next());    }    response.addExtension(extendedInfo);  }}  }
class C{  public void seekToBlock(int blockNumber) throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (blockNumber < 0 || blockNumber >= blockCount)   throw new XZIOException("Invalid XZ Block number: " + blockNumber);  seekPos=getBlockPos(blockNumber);  seekNeeded=true;}  }
class C{  public static float[] newBoundsArray(){  return new float[6];}  }
class C{  public static DefineBits createDefineBits(InputStream in,String mimeType) throws IOException {  byte[] bytes=FileUtils.toByteArray(in);  Image image=ImageUtil.getImage(bytes);  if (mimeType == null) {    throw new IOException("Unsupported MIME type");  }  PixelGrabber pixelGrabber=null;  try {    pixelGrabber=ImageUtil.getPixelGrabber(image,null);  } catch (  Exception e) {    throw new IOException("Error reading image");  }  int width=pixelGrabber.getWidth();  int height=pixelGrabber.getHeight();  if (MIME_JPG.equals(mimeType) || MIME_JPEG.equals(mimeType)) {    DefineBits imageTag=new DefineBits(Tag.stagDefineBitsJPEG2);    imageTag.data=bytes;    imageTag.width=width;    imageTag.height=height;    return imageTag;  } else   if (MIME_PNG.equals(mimeType) || MIME_GIF.equals(mimeType)) {    int[] pixels=(int[])pixelGrabber.getPixels();    DefineBitsLossless imageTag=createDefineBitsLossless(pixels,width,height);    return imageTag;  } else {    throw new IOException("Unsupported MIME type: " + mimeType);  }}  }
class C{  protected static <U,I,F>double coverage(BinomialModel<U,I,F>.UserBinomialModel ubm,Object2IntMap<F> count,int nret){  double coverage=ubm.getFeatures().stream().filter(null).mapToDouble(null).reduce(1.0,null);  coverage=Math.pow(coverage,1.0 / (double)ubm.getFeatures().size());  return coverage;}  }
class C{  public boolean isOptional(){  return ((this.getTypeRef() != null) && (this.getTypeRef().getUndefModifier() == UndefModifier.OPTIONAL));}  }
class C{  public BringListOfItemsQuestLogic(final BringListOfItemsQuest concreteQuest){  this.concreteQuest=concreteQuest;}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  public String routing(){  return routing;}  }
class C{  @Deprecated public static EpisodeMatchingResult detectEpisodeFromDirectory(File directory,String rootDirOfTvShow){  LOGGER.debug("Detect episodes/seasons from " + directory.getAbsolutePath());  EpisodeMatchingResult result=new EpisodeMatchingResult();  if (rootDirOfTvShow == null || rootDirOfTvShow.isEmpty() || directory.toURI().equals(new File(rootDirOfTvShow).toURI())) {    return result;  }  String directoryName=directory.getName();  result=parseString(directoryName);  if (result.episodes.size() == 0) {    detectEpisodeFromDirectory(directory.getParentFile(),rootDirOfTvShow);  }  Collections.sort(result.episodes);  LOGGER.debug("returning result " + result);  return result;}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.use186_3=false;  this.L=size;  this.N=getDefaultN(size);  this.certainty=certainty;  this.random=random;}  }
class C{  @Override @SuppressWarnings("unchecked") public E[] nextChunk(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final E[] ret;  if (i == 0 && bufferCount == buffer.length) {    ret=buffer;  } else {    final int remaining=bufferCount - i;    ret=(E[])java.lang.reflect.Array.newInstance(buffer.getClass().getComponentType(),remaining);    System.arraycopy(buffer,i,ret,0,remaining);  }  i=bufferCount;  return ret;}  }
class C{  public boolean beforeWriting(){  if (fileLockMethod != FileLock.LOCK_SERIALIZED) {    return true;  }  while (checkpointRunning) {    try {      Thread.sleep(10 + (int)(Math.random() * 10));    } catch (    Exception e) {    }  }synchronized (reconnectSync) {    if (reconnectModified(true)) {      checkpointAllowed++;      if (SysProperties.CHECK && checkpointAllowed > 20) {        throw DbException.throwInternalError();      }      return true;    }  }  reconnectCheckNext=System.currentTimeMillis() - 1;  reconnectLastLock=null;  return false;}  }
class C{  public static <T>T bkResult(Future<T> result) throws BKException {  try {    return Await.result(result);  } catch (  BKException bke) {    throw bke;  }catch (  InterruptedException ie) {    throw BKException.create(BKException.Code.InterruptedException);  }catch (  Exception e) {    logger.warn("Encountered unexpected exception on waiting bookkeeper results : ",e);    throw BKException.create(BKException.Code.UnexpectedConditionException);  }}  }
class C{  void seek(long filePos){  file.seek(filePos * Constants.FILE_BLOCK_SIZE);}  }
class C{  public Object removeFromEnvironment(String key) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_REMOVEFROMENVIRONMENTSTRING_KEY_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr districtNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  districtNode=(Attr)attributes.getNamedItem("lang");  assertNull("langAttrNull",districtNode);}  }
class C{  private static BigInteger chineseRemainder(Vector congruences,Vector primes){  BigInteger retval=ZERO;  BigInteger all=ONE;  for (int i=0; i < primes.size(); i++) {    all=all.multiply((BigInteger)primes.elementAt(i));  }  for (int i=0; i < primes.size(); i++) {    BigInteger a=(BigInteger)primes.elementAt(i);    BigInteger b=all.divide(a);    BigInteger b_=b.modInverse(a);    BigInteger tmp=b.multiply(b_);    tmp=tmp.multiply((BigInteger)congruences.elementAt(i));    retval=retval.add(tmp);  }  return retval.mod(all);}  }
class C{  public double entropyNMIMin(){  return (entropyMutualInformation() / Math.min(entropyFirst(),entropySecond()));}  }
class C{  private SavedState(Parcel in){  super(in);  prevScrollY=in.readInt();  scrollY=in.readInt();}  }
class C{  public static void placeToken(String[][] m,int[] e,String t){  m[e[0]][e[1]]=t;}  }
class C{  public ContainsLetterConstraint(){  super(REGEX);}  }
class C{  public Link(int x1,int y1,int x2,int y2,String details){  if (logger.isLoggable(Level.FINE)) {    logger.fine("Link(" + x1 + ", "+ y1+ ", "+ x2+ ", "+ y2+ ")");  }  this.x=x1;  this.y=y1;  this.x2=x2;  this.y2=y2;  if (details != null) {    this.details=details;  } else {    this.details="";  }  OMLine link=new OMLine(x1,y1,x2,y2);  setLocationMarker(link);}  }
class C{  public static final int liang_get_buflen(int nverts){  return (nverts << 2) + 3;}  }
class C{  public Map<Integer,String> graph() throws Exception {  Map<Integer,String> result;  int i;  result=new HashMap<Integer,String>();  if (m_MultiClassifiers != null) {    for (i=0; i < m_MultiClassifiers.length; i++) {      if (m_MultiClassifiers[i] instanceof Drawable) {        result.put(i,((Drawable)m_MultiClassifiers[i]).graph());      }    }  }  return result;}  }
class C{  public static void main(String[] args){  String input=args[0];  DigicorePathDependentNetworkReader_v1 nr=new DigicorePathDependentNetworkReader_v1();  nr.readFile(input);  nr.network.writeNetworkStatisticsToConsole();}  }
class C{  private static void updateAllUIs(){  Frame appFrames[]=Frame.getFrames();  for (  Frame frame : appFrames) {    updateWindowUI(frame);  }}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  static boolean isExpired(long pwdRecoveryStartDate){  Date current=new Date();  long currentDate=current.getTime();  long hours=currentDate - pwdRecoveryStartDate;  return (hours > EXPIRY);}  }
class C{  @Override public void removeSubscription(final String topic,final String clientID){  final List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID);  if (clientSubscriptions != null) {    clientSubscriptions.remove(topic);  }}  }
class C{  protected void onDrawableChanged(int featureId,Drawable drawable,int alpha){  ImageView view;  if (featureId == FEATURE_LEFT_ICON) {    view=getLeftIconView();  } else   if (featureId == FEATURE_RIGHT_ICON) {    view=getRightIconView();  } else {    return;  }  if (drawable != null) {    drawable.setAlpha(alpha);    view.setImageDrawable(drawable);    view.setVisibility(View.VISIBLE);  } else {    view.setVisibility(View.GONE);  }}  }
class C{  private static void deleteFilesInDirectory(File directory){  if (directory != null && directory.exists() && directory.isDirectory()) {    for (    File item : directory.listFiles()) {      if (item.isDirectory()) {        deleteFilesInDirectory(item);      } else {        item.delete();      }    }  }}  }
class C{  public static boolean testAabAab(double minXA,double minYA,double minZA,double maxXA,double maxYA,double maxZA,double minXB,double minYB,double minZB,double maxXB,double maxYB,double maxZB){  return maxXA >= minXB && maxYA >= minYB && maxZA >= minZB && minXA <= maxXB && minYA <= maxYB && minZA <= maxZB;}  }
class C{  public static HttpResponse contentLength(HttpResponse response,Long len){  if (len != null) {    response.getHeaders().remove("Content-Length");    response.getHeaders().put("Content-Length",len);  }  return response;}  }
class C{  Pair(final Expression left,final Expression right){  super(left);  this.left=claim(left);  this.right=claim(right);}  }
class C{  public static void main(String[] args){  Header.printHeader(ConcaveHull.class.toString(),args);  List<Coordinate> coordinates=ConcaveHull.getClusterCoords(args[0]);  GeometryFactory gf=new GeometryFactory();  Geometry[] points=new Geometry[coordinates.size()];  for (int i=0; i < coordinates.size(); i++) {    points[i]=gf.createPoint(coordinates.get(i));  }  GeometryCollection gc=new GeometryCollection(points,gf);  ConcaveHull ch=new ConcaveHull(gc,Double.parseDouble(args[1]),true);  Geometry g=ch.getConcaveHull();  Header.printFooter();}  }
class C{  private boolean isValidArchId(int archId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tblName=table.getArchHdrTableName();    qual=table.getLoadArchIdQual(archId);    count=DbSelectFns.selectCount(dbConn,tblName,qual);    if (count > 0)     valid=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public static void execute(ExecutablePool pool,String region,EventID eventId,Object callbackArg){  AbstractOp op=new DestroyRegionOpImpl(region,eventId,callbackArg);  pool.execute(op);}  }
class C{  static <T>DoubleStream makeDouble(AbstractPipeline<?,Double,?> upstream){  return new OfDouble(upstream);}  }
class C{  protected void addMirandaMethods(Environment env,Iterator mirandas){}  }
class C{  @Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){  super.onViewPositionChanged(changedView,left,top,dx,dy);  mDragOffset=Math.abs(top);  float fractionScreen=(float)mDragOffset / mAudioView.getmVerticalDragRange();  mAudioView.onViewPositionChanged(fractionScreen >= 1 ? 1 : fractionScreen);}  }
class C{  public long deleteConfiguration(final String name){  mSingleArg[0]=name;  final ContentValues values=mValues;  values.clear();  values.put(ConfigurationContract.Configuration.DELETED,1);  mDatabase.update(Tables.CONFIGURATIONS,values,NAME_SELECTION,mSingleArg);  final Cursor cursor=mDatabase.query(Tables.CONFIGURATIONS,ID_PROJECTION,NAME_SELECTION,mSingleArg,null,null,null);  try {    if (cursor.moveToNext())     return cursor.getLong(0);    return -1;  }  finally {    cursor.close();  }}  }
class C{  public ModbusException(String message,Object... values){  super(String.format(message,values));}  }
class C{  private boolean checkAndRepairTableDrop(){  try {    Set<String> tables=kvs.getAllTableNames().stream().map(null).collect(Collectors.toSet());    SweepProgressRowResult result=txManager.runTaskReadOnly(null);    if (result == null || tables.contains(result.getFullTableName())) {      return false;    }    kvs.truncateTable(tableFactory.getSweepProgressTable(null).getTableRef());    return true;  } catch (  RuntimeException e) {    log.error("Failed to check whether the table being swept was dropped." + " Continuing under the assumption that it wasn't...",e);    return false;  }}  }
class C{  public InvalidHeaderValueException(String message){  super(message);}  }
class C{  public static Slider createInfinite(){  Slider s=new Slider();  s.infinite=true;  return s;}  }
class C{  public static synchronized boolean isAntiAliasingEnabled(){  return antiAliasingEnabled;}  }
class C{  public boolean isParentRelative(int i){  return (masks[i] & PARENT_RELATIVE_MASK) != 0;}  }
class C{  public static Object initializeArrayHeader(Address ptr,TIB tib,int size){  Object ref=Magic.addressAsObject(ptr.plus(OBJECT_REF_OFFSET));  return ref;}  }
class C{  public static void assertJPut(String request,String content,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.put(request,content);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public boolean forEachKey(TFloatProcedure procedure){  return forEach(procedure);}  }
class C{  public void removeAllEmails(){  emails.clear();}  }
class C{  public SpiderTask(Spider parent,URI sourceUri,URI uri,int depth,String method){  this(parent,sourceUri,uri,depth,method,null);}  }
class C{  public Vector2 nor(){  float len=len();  if (len != 0) {    x/=len;    y/=len;  }  return this;}  }
class C{  public static boolean doesSymbolTableContainFrameObject(LocalVariableMap symbolTable,String variableName){  return (symbolTable != null && symbolTable.keySet().contains(variableName) && symbolTable.get(variableName) instanceof FrameObject);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void openSeekTableWindowItem(Connector connector){  RaptorWindowItem[] items=Raptor.getInstance().getWindow().getWindowItems(SeekTableWindowItem.class);  boolean openNewWindow=true;  for (  RaptorWindowItem item : items) {    SeekTableWindowItem seekTableItem=(SeekTableWindowItem)item;    if (seekTableItem.getConnector() == connector) {      Raptor.getInstance().getWindow().forceFocus(item);      openNewWindow=false;      break;    }  }  if (openNewWindow) {    SeekTableWindowItem item=new SeekTableWindowItem(connector.getSeekService());    Raptor.getInstance().getWindow().addRaptorWindowItem(item);  }}  }
class C{  public boolean isWithin(final double x,final double y,final double z){  return startCutoffPlane.isWithin(x,y,z) && endCutoffPlane.isWithin(x,y,z) && upperConnectingPlane.isWithin(x,y,z)&& lowerConnectingPlane.isWithin(x,y,z);}  }
class C{  public LocalTime toLocalTime(){  return new LocalTime(getHourOfDay(),getMinuteOfHour(),getSecondOfMinute(),getMillisOfSecond(),getChronology());}  }
class C{  protected void array(float[] result,int size,float... args){  for (int i=0; i < size; i++)   result[i]=args[i];}  }
class C{  private int hashNgram(int[] ngram,int start,int end,int val){  int result=HASH_OFFSET * HASH_SEED + val;  for (int i=start; i < end; i++)   result=HASH_OFFSET * result + ngram[i];  return result;}  }
class C{  public void printGoto(Vertex expression,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newFunctions,List<Vertex> newStates,Network network) throws IOException {  Vertex state=expression.getRelationship(Primitive.GOTO);  writer.write(indent);  writer.write("goto ");  if (expression.hasRelationship(Primitive.FINALLY)) {    writer.write("finally ");  }  if (!elements.contains(state)) {    newStates.add(state);    elements.add(state);  }  printElement(state,writer,indent,newFunctions,newVariables,elements,network);  Collection<Relationship> arguments=expression.getRelationships(Primitive.ARGUMENT);  if (arguments != null) {    writer.write(" with (");    for (Iterator<Relationship> iterator=arguments.iterator(); iterator.hasNext(); ) {      Relationship argument=iterator.next();      printElement(argument.getTarget(),writer,indent,newFunctions,newVariables,elements,network);      if (iterator.hasNext()) {        writer.write(", ");      }    }    writer.write(")");  }  writer.write(";\r\n\r\n");}  }
class C{  public boolean isEnabled(){  return this.enabled;}  }
class C{  public void processEvent(World world){  DTNHost from=world.getNodeByAddress(this.fromAddr);  DTNHost to=world.getNodeByAddress(this.toAddr);switch (stage) {case SENDING:    from.sendMessage(id,to);  break;case TRANSFERRED:to.messageTransferred(id,from);break;case ABORTED:to.messageAborted(id,from,-1);break;default :assert false : "Invalid stage (" + stage + ") for "+ this;}}  }
class C{  protected void appendTextString(String str){  appendTextString(str.getBytes());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  if (area.isEmpty()) {    return null;  }  area=trimMargin(area);  drawBorder(g2,area);  area=trimBorder(area);  area=trimPadding(area);  g2.setFont(getFont());  g2.setPaint(getPaint());  TextUtilities.drawAlignedString(getText(),g2,(float)area.getMinX(),(float)area.getMinY(),TextAnchor.TOP_LEFT);  return null;}  }
class C{  void validate(DynamicAABBTreeNode node){  if (node == null) {    return;  }  if (node == this.root) {    assert (node.parent == null);  }  DynamicAABBTreeNode left=node.left;  DynamicAABBTreeNode right=node.right;  if (node.isLeaf()) {    @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)node;    assert (node.left == null);    assert (node.right == null);    assert (node.height == 0);    assert (leaf.collidable != null);    return;  }  assert (node.aabb.contains(left.aabb));  if (right != null)   assert (node.aabb.contains(right.aabb));  assert (left.parent == node);  assert (right.parent == node);  validate(left);  validate(right);}  }
class C{  public static Test suite(){  return new TestSuite(TestSemGraph.class);}  }
class C{  private void upBoundConsistencyCheckAndAssign(List<NeuronUpdateRule> ruleList) throws ClassCastException {  Neuron neuronRef=neuronList.get(0);  double upBound=((BoundedUpdateRule)neuronRef.getUpdateRule()).getUpperBound();  boolean upDiscrepancy=ruleList.stream().anyMatch(null);  if (upDiscrepancy) {    tfCeiling.setText(SimbrainConstants.NULL_STRING);  } else {    tfCeiling.setValue(upBound);  }}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  put(index,Boolean.valueOf(value));  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.320 -0500",hash_original_method="E66129678530AEEFFFBEABAD39F4532F",hash_generated_method="FC5D27153C9486C901A5C24918336DC1") public StringIndexOutOfBoundsException(String s,int offset,int count){  this(s.length(),offset,count);}  }
class C{  public double computeAverageLocal(int timeSeries[][],int col){  initialise();  addObservations(timeSeries,col);  return computeAverageLocalOfObservations();}  }
class C{  public void addPlural(String match,String rule,boolean insensitive){  plurals.add(0,new Replacer(match,rule,insensitive));}  }
class C{  public void addDataset(ValueDataset dataset,MeterNeedle needle){  if (dataset != null) {    int i=this.datasets.length + 1;    ValueDataset[] t=new ValueDataset[i];    MeterNeedle[] p=new MeterNeedle[i];    i=i - 2;    for (; i >= 0; --i) {      t[i]=this.datasets[i];      p[i]=this.seriesNeedle[i];    }    i=this.datasets.length;    t[i]=dataset;    p[i]=((needle != null) ? needle : p[i - 1]);    ValueDataset[] a=this.datasets;    MeterNeedle[] b=this.seriesNeedle;    this.datasets=t;    this.seriesNeedle=p;    for (--i; i >= 0; --i) {      a[i]=null;      b[i]=null;    }    dataset.addChangeListener(this);  }}  }
class C{  @SuppressWarnings("deprecation") private void createCacheForVM0(){  try {    distributedSystem=(new Bug37377DUnitTest()).getSystem(props);    assertTrue(distributedSystem != null);    cache=CacheFactory.create(distributedSystem);    assertTrue(cache != null);    AttributesFactory factory=new AttributesFactory();    factory.setScope(Scope.DISTRIBUTED_ACK);    factory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);    factory.setDiskSynchronous(false);    factory.setDiskStoreName(cache.createDiskStoreFactory().setDiskDirs(dirs).create("Bug37377DUnitTest").getName());    RegionAttributes attr=factory.create();    cache.createRegion(regionName,attr);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Error Creating cache / region ");  }}  }
class C{  public RuleNode topOfTree(){  return m_topOfTree;}  }
class C{  public static final boolean isPointNearPoly(Geo s,GeoArray r,double near){  int rlen=r.getSize();  Geo pl0=r.get(rlen - 1,new Geo());  Geo pl1=new Geo();  for (int j=0; j < rlen; j++) {    r.get(j,pl1);    if (pl0.isInside(pl1,near,s)) {      return true;    }    pl0.initialize(pl1);  }  return false;}  }
class C{  public PageAttributes(ColorType color,MediaType media,OrientationRequestedType orientationRequested,OriginType origin,PrintQualityType printQuality,int[] printerResolution){  setColor(color);  setMedia(media);  setOrientationRequested(orientationRequested);  setOrigin(origin);  setPrintQuality(printQuality);  setPrinterResolution(printerResolution);}  }
class C{  public void actionPerformed(ActionEvent ae){  if (getMenuItems().contains(ae.getSource())) {    if (informationDelegator != null) {      informationDelegator.displayURL(Environment.get(Environment.HelpURL,"http://javamap.bbn.com/projects/openmap/openmap_maindes.html"));    }  }}  }
class C{  public void insertGetBefore(AbstractInsnNode position,InsnList list){  logger.info("Inserting get call before");  Label label=new Label();  LabelNode labelNode=new LabelNode(label);  currentMethodNode.instructions.insertBefore(position,labelNode);  currentMethodNode.instructions.insertBefore(position,new LdcInsnNode(getControlDependentBranchID(currentMethodNode,position)));  currentMethodNode.instructions.insertBefore(position,new InsnNode(Opcodes.SWAP));  currentMethodNode.instructions.insertBefore(position,new LdcInsnNode(getApproximationLevel(currentMethodNode,position)));  currentMethodNode.instructions.insertBefore(position,new InsnNode(Opcodes.SWAP));  MethodInsnNode get=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"getDistance",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,get);}  }
class C{  public boolean isPostStatistical(){  Object oo=get_Value(COLUMNNAME_PostStatistical);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ViewHolderFactoryResolver(int offset){  mOffset=offset;}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  private boolean isReferenced(String actionId,Auth auth){  boolean returnValue=false;  try {    Map<String,Action> actionMap=loadAllReferencedActions(auth);    if (actionMap != null) {      returnValue=actionMap.get(actionId) != null && isWhitelist() || actionMap.get(actionId) == null && isBlacklist();    }    return returnValue;  } catch (  Exception e) {    log.error("Error while checking action. Returning false",e);    return returnValue;  }}  }
class C{  public static String toHexString(byte[] bytes){  if (bytes == null)   return "";  int i;  String ret="";  String tmp;  for (i=0; i < bytes.length; i++) {    if (i > 0)     ret+=":";    tmp=Integer.toHexString(U8.f(bytes[i]));    if (tmp.length() == 1)     ret+="0";    ret+=tmp;  }  return ret;}  }
class C{  public int trueBitIndexOf(int bitIndex){  for (int i=0; i < arr.length; i++) {    if (arr[i] == bitIndex)     return i;  }  return -1;}  }
class C{  public Instrumenter attachSpacingCollector(){  includeSpacing=true;  return this;}  }
class C{  public static String doubleToString(double value,int width,int afterDecimalPoint){  String tempString=doubleToString(value,afterDecimalPoint);  char[] result;  int dotPosition;  if ((afterDecimalPoint >= width) || (tempString.indexOf('E') != -1)) {    return tempString;  }  result=new char[width];  for (int i=0; i < result.length; i++) {    result[i]=' ';  }  if (afterDecimalPoint > 0) {    dotPosition=tempString.indexOf('.');    if (dotPosition == -1) {      dotPosition=tempString.length();    } else {      result[width - afterDecimalPoint - 1]='.';    }  } else {    dotPosition=tempString.length();  }  int offset=width - afterDecimalPoint - dotPosition;  if (afterDecimalPoint > 0) {    offset--;  }  if (offset < 0) {    return tempString;  }  for (int i=0; i < dotPosition; i++) {    result[offset + i]=tempString.charAt(i);  }  for (int i=dotPosition + 1; i < tempString.length(); i++) {    result[offset + i]=tempString.charAt(i);  }  return new String(result);}  }
class C{  public boolean isVisibleInCatalogSupported(){  boolean rc=(getOrganizationId() == null);  if (rc && catalogEntries != null && !catalogEntries.isEmpty()) {    if (isNoMarketplaceAssigned()) {      rc=false;    }  }  return rc;}  }
class C{  public void score(int s){  score=s;}  }
class C{  protected void sequence_AnnotatedScriptElement_AsyncNoTrailingLineBreak_FunctionBody_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public LocalDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public Object read(InputNode node) throws Exception {  return read(node,value);}  }
class C{  private Cipher createAndInitialiseContentCipher(ByteBuffer encrypted,byte[] decryptionKeyBytes) throws PDFParseException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {  final Cipher cipher;  if (encryptionAlgorithm.isRC4()) {    cipher=Cipher.getInstance(CIPHER_RC4);    cipher.init(Cipher.DECRYPT_MODE,createRC4Key(decryptionKeyBytes));  } else   if (encryptionAlgorithm.isAES()) {    cipher=createAESCipher();    final byte[] initialisationVector=new byte[16];    if (encrypted.remaining() >= initialisationVector.length) {      encrypted.get(initialisationVector);    } else {      throw new PDFParseException("AES encrypted stream too short - " + "no room for initialisation vector");    }    final SecretKeySpec aesKey=new SecretKeySpec(decryptionKeyBytes,KEY_AES);    final IvParameterSpec aesIv=new IvParameterSpec(initialisationVector);    cipher.init(Cipher.DECRYPT_MODE,aesKey,aesIv);  } else {    throw new PDFParseException("Internal error - unhandled cipher type: " + encryptionAlgorithm);  }  return cipher;}  }
class C{  public Element store(Object o){  DoubleTurnoutSignalHead p=(DoubleTurnoutSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getGreen(),"green"));  element.addContent(addTurnoutElement(p.getRed(),"red"));  return element;}  }
class C{  public static Builder newBuilder(String type){  return new Builder(type);}  }
class C{  public void push(M match){  cache.clear();  addFirst(match);}  }
class C{  public boolean authenticateDevice(String uid,String key) throws DataAccessException {  DeviceInfo device=getDeviceInfo(uid);  return device != null && key.equals(device.getKey());}  }
class C{  private void updateMiniController(IMiniController controller) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  checkRemoteMediaPlayerAvailable();  if (mRemoteMediaPlayer.getStreamDuration() > 0 || isRemoteStreamLive()) {    MediaInfo mediaInfo=getRemoteMediaInformation();    MediaMetadata mm=mediaInfo.getMetadata();    controller.setStreamType(mediaInfo.getStreamType());    controller.setPlaybackStatus(mState,mIdleReason);    controller.setSubtitle(mContext.getResources().getString(R.string.ccl_casting_to_device,mDeviceName));    controller.setTitle(mm.getString(MediaMetadata.KEY_TITLE));    controller.setIcon(Utils.getImageUri(mediaInfo,0));  }}  }
class C{  public int[][] writePolyGeometry(EsriGraphicList list) throws IOException {  OMPoly poly;  _leos.writeInt(9994);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  _leos.writeInt(0);  int[][] indexData=createPolyIndex(list);  int contentLength=50;  if (!list.isEmpty()) {    contentLength=indexData[0][indexData[0].length - 1] + indexData[1][indexData[0].length - 1] + ESRI_RECORD_HEADER_LENGTH;  }  _leos.writeInt(contentLength);  _leos.writeLEInt(1000);  _leos.writeLEInt(list.getType());  double[] extents=list.getExtents();  writeExtents(extents);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  _leos.writeDouble(0.0);  Point2D pnt=new Point2D.Double();  for (int i=0; i < list.size(); i++) {    OMGraphic graphic=list.getOMGraphicAt(i);    _leos.writeInt(i + 1);    _leos.writeInt(indexData[1][i]);    _leos.writeLEInt(list.getType());    if (graphic instanceof EsriGraphicList) {      EsriGraphicList sublist=(EsriGraphicList)graphic;      extents=sublist.getExtents();      writeExtents(extents);      int numParts=sublist.size();      _leos.writeLEInt(numParts);      int numPoints=getPointsPerShape(sublist);      _leos.writeLEInt(numPoints);      int[] offsets=getPartOffsets(sublist);      for (int j=0; j < offsets.length; j++) {        _leos.writeLEInt(offsets[j]);      }      for (int j=0; j < sublist.size(); j++) {        poly=(OMPoly)sublist.getOMGraphicAt(j);        double[] data=poly.getLatLonArray();        int n=0;        while (n < data.length) {          double lat=Math.toDegrees(data[n++]);          double lon=Math.toDegrees(data[n++]);          if (transform == null) {            _leos.writeLEDouble(lon);            _leos.writeLEDouble(lat);          } else {            transform.forward(lat,lon,pnt);            _leos.writeLEDouble(pnt.getX());            _leos.writeLEDouble(pnt.getY());          }        }      }    } else {      extents=((EsriGraphic)graphic).getExtents();      writeExtents(extents);      _leos.writeLEInt(1);      poly=(OMPoly)graphic;      double[] data=poly.getLatLonArray();      _leos.writeLEInt(data.length / 2);      _leos.writeLEInt(0);      int n=0;      while (n < data.length) {        double lat=Math.toDegrees(data[n++]);        double lon=Math.toDegrees(data[n++]);        if (transform == null) {          _leos.writeLEDouble(lon);          _leos.writeLEDouble(lat);        } else {          transform.forward(lat,lon,pnt);          _leos.writeLEDouble(pnt.getX());          _leos.writeLEDouble(pnt.getY());        }      }    }  }  _leos.flush();  _leos.close();  return indexData;}  }
class C{  public boolean hasWildcard(){  return WILDCARD.equals(type) || WILDCARD.equals(subtype);}  }
class C{  public void testValueOfPosScaleNeg(){  long a=98374823947823578L;  int scale=-12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="9.8374823947823578E+28";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  private void releaseIpAddressSpace(DeleteVirtualNetworkWorkflowDocument state){  SubnetAllocatorService.ReleaseSubnet releaseSubnet=new SubnetAllocatorService.ReleaseSubnet(state.virtualNetworkId);  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(SubnetAllocatorService.SINGLETON_LINK).setBody(releaseSubnet).setCompletion(null).sendWith(this);}  }
class C{  protected static String removeExtraDots(String host){  StringBuilder stringBuilder=new StringBuilder();  InputTextReader reader=new InputTextReader(host);  while (!reader.eof()) {    char curr=reader.read();    stringBuilder.append(curr);    if (curr == '.') {      char possibleDot=curr;      while (possibleDot == '.' && !reader.eof()) {        possibleDot=reader.read();      }      if (possibleDot != '.') {        stringBuilder.append(possibleDot);      }    }  }  if (stringBuilder.length() > 0 && stringBuilder.charAt(stringBuilder.length() - 1) == '.') {    stringBuilder.deleteCharAt(stringBuilder.length() - 1);  }  if (stringBuilder.length() > 0 && stringBuilder.charAt(0) == '.') {    stringBuilder.deleteCharAt(0);  }  return stringBuilder.toString();}  }
class C{  private int generatePermutationId(int[] data){  int permutationId=0;  for (int c=0; c < dimensions; c++) {    permutationId*=dimensions;    permutationId+=data[c];  }  return permutationId;}  }
class C{  @NonNull public static Animator delay(float duration){  ValueAnimator animator=new ValueAnimator();  setPropertiesForAnimator(animator,duration,null);  animator.setIntValues(1);  return animator;}  }
class C{  private void createAndRegisterStunSocket(HostCandidate candidate){  IceSocketWrapper stunSocket=candidate.getStunSocket(null);  candidate.getStunStack().addSocket(stunSocket);}  }
class C{  public void add(Row r){  list.add(r);  memory+=r.getMemory() + Constants.MEMORY_POINTER;  if (maxMemory > 0 && memory > maxMemory) {    writeAllRows();  }  size++;}  }
class C{  public TranscoderOutput(Document document){  this.document=document;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element element;  Node firstChild;  Node secondChild;  String childValue;  Text emptyText;  Attr attrNode;  Node retval;  doc=(Document)load("hc_staff",true);  root=doc.getDocumentElement();  emptyText=doc.createTextNode("");  elementList=root.getElementsByTagName("acronym");  element=(Element)elementList.item(0);  attrNode=element.getAttributeNode("title");  retval=attrNode.appendChild(emptyText);  element.normalize();  attrNode=element.getAttributeNode("title");  firstChild=attrNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("firstChild","Yes",childValue);  secondChild=firstChild.getNextSibling();  assertNull("secondChildNull",secondChild);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.CONSTRAINT_RULE__CONSTRAINTS:    getConstraints().clear();  getConstraints().addAll((Collection<? extends Constraint>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isTextPlainType(String mime){  return mime != null && mime.toLowerCase().startsWith(MimeType.TEXT_MESSAGE);}  }
class C{  public Curve25519Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public void dismiss(){  if (isTrayShowing()) {    animation.playDismissAnimation();    onDismissed();  }}  }
class C{  public void centerOnScreen(){  UIUtilities.centerOnScreen(this);}  }
class C{  void validateCompatibility(Object object,Object parent,Class methodsProvider,Class allowedMethodsProvider,Version version,String parentName,boolean isUpdate) throws ConflictException {  if (SourceStorageDto.class.equals(methodsProvider) && !hasSubprojectInPath(parent)) {    sourceStorageParametersValidator.validate((SourceStorage)object,version);  }  for (  Method method : methodsProvider.getMethods()) {    FactoryParameter factoryParameter=method.getAnnotation(FactoryParameter.class);    if (factoryParameter == null) {      continue;    }    String fullName=(parentName.isEmpty() ? "" : (parentName + ".")) + CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,method.getName().startsWith("is") ? method.getName().substring(2) : method.getName().substring(3).toLowerCase());    Object parameterValue;    try {      parameterValue=method.invoke(object);    } catch (    IllegalAccessException|InvocationTargetException|IllegalArgumentException e) {      LOG.error(e.getLocalizedMessage(),e);      throw new ConflictException(FactoryConstants.INVALID_PARAMETER_MESSAGE);    }    if (ValueHelper.isEmpty(parameterValue)) {      if (Obligation.MANDATORY.equals(factoryParameter.obligation()) && factoryParameter.deprecatedSince().compareTo(version) > 0 && factoryParameter.ignoredSince().compareTo(version) > 0 && method.getDeclaringClass().isAssignableFrom(allowedMethodsProvider)) {        throw new ConflictException(String.format(FactoryConstants.MISSING_MANDATORY_MESSAGE,method.getName()));      }    } else     if (!method.getDeclaringClass().isAssignableFrom(allowedMethodsProvider)) {      throw new ConflictException(String.format(FactoryConstants.PARAMETRIZED_INVALID_PARAMETER_MESSAGE,fullName,version));    } else {      if (factoryParameter.deprecatedSince().compareTo(version) <= 0 || (!isUpdate && factoryParameter.setByServer())) {        throw new ConflictException(String.format(FactoryConstants.PARAMETRIZED_INVALID_PARAMETER_MESSAGE,fullName,version));      }      if (method.getReturnType().isAnnotationPresent(DTO.class)) {        validateCompatibility(parameterValue,object,method.getReturnType(),method.getReturnType(),version,fullName,isUpdate);      } else       if (Map.class.isAssignableFrom(method.getReturnType())) {        Type tp=((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[1];        Class secMapParamClass=(tp instanceof ParameterizedType) ? (Class)((ParameterizedType)tp).getRawType() : (Class)tp;        if (!String.class.equals(secMapParamClass) && !List.class.equals(secMapParamClass)) {          if (secMapParamClass.isAnnotationPresent(DTO.class)) {            Map<Object,Object> map=(Map)parameterValue;            for (            Map.Entry<Object,Object> entry : map.entrySet()) {              validateCompatibility(entry.getValue(),object,secMapParamClass,secMapParamClass,version,fullName + "." + entry.getKey(),isUpdate);            }          } else {            throw new RuntimeException("This type of fields is not supported by factory.");          }        }      } else       if (List.class.isAssignableFrom(method.getReturnType())) {        Type tp=((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[0];        Class secListParamClass=(tp instanceof ParameterizedType) ? (Class)((ParameterizedType)tp).getRawType() : (Class)tp;        if (!String.class.equals(secListParamClass) && !List.class.equals(secListParamClass)) {          if (secListParamClass.isAnnotationPresent(DTO.class)) {            List<Object> list=(List)parameterValue;            for (            Object entry : list) {              validateCompatibility(entry,object,secListParamClass,secListParamClass,version,fullName,isUpdate);            }          } else {            throw new RuntimeException("This type of fields is not supported by factory.");          }        }      }    }  }}  }
class C{  public static CreateNetworkParams create(@NotNull NewNetwork newNetwork){  return new CreateNetworkParams().withNetwork(newNetwork);}  }
class C{  public MqttAndroidClient createClient(Context context,String serverURI,String clientId){  MqttAndroidClient client=new MqttAndroidClient(context,serverURI,clientId);  return client;}  }
class C{  @LogMessageDoc(level="ERROR",message="Could not decode action {action}",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) private static String flowModActionsToString(List<OFAction> fmActions){  StringBuilder sb=new StringBuilder();  for (  OFAction a : fmActions) {    if (sb.length() > 0) {      sb.append(',');    }switch (a.getType()) {case OUTPUT:      sb.append("output=" + Short.toString(((OFActionOutput)a).getPort()));    break;case OPAQUE_ENQUEUE:  int queue=((OFActionEnqueue)a).getQueueId();short port=((OFActionEnqueue)a).getPort();sb.append("enqueue=" + Short.toString(port) + ":0x"+ String.format("%02x",queue));break;case STRIP_VLAN:sb.append("strip-vlan");break;case SET_VLAN_ID:sb.append("set-vlan-id=" + Short.toString(((OFActionVirtualLanIdentifier)a).getVirtualLanIdentifier()));break;case SET_VLAN_PCP:sb.append("set-vlan-priority=" + Byte.toString(((OFActionVirtualLanPriorityCodePoint)a).getVirtualLanPriorityCodePoint()));break;case SET_DL_SRC:sb.append("set-src-mac=" + HexString.toHexString(((OFActionDataLayerSource)a).getDataLayerAddress()));break;case SET_DL_DST:sb.append("set-dst-mac=" + HexString.toHexString(((OFActionDataLayerDestination)a).getDataLayerAddress()));break;case SET_NW_TOS:sb.append("set-tos-bits=" + Byte.toString(((OFActionNetworkTypeOfService)a).getNetworkTypeOfService()));break;case SET_NW_SRC:sb.append("set-src-ip=" + IPv4.fromIPv4Address(((OFActionNetworkLayerSource)a).getNetworkAddress()));break;case SET_NW_DST:sb.append("set-dst-ip=" + IPv4.fromIPv4Address(((OFActionNetworkLayerDestination)a).getNetworkAddress()));break;case SET_TP_SRC:sb.append("set-src-port=" + Short.toString(((OFActionTransportLayerSource)a).getTransportPort()));break;case SET_TP_DST:sb.append("set-dst-port=" + Short.toString(((OFActionTransportLayerDestination)a).getTransportPort()));break;default :log.error("Could not decode action: {}",a);break;}}return sb.toString();}  }
class C{  public MarshallerContextTestImpl(@Nullable List<PluginProvider> plugins,Collection<String> excluded){  super(plugins);  this.excluded=excluded;}  }
class C{  private static Set<Method> findNotUnlockedMethods(ClassContext classContext,SelfCalls selfCalls,Set<CallSite> obviouslyLockedSites){  JavaClass javaClass=classContext.getJavaClass();  Method[] methodList=javaClass.getMethods();  CallGraph callGraph=selfCalls.getCallGraph();  Set<Method> lockedMethodSet=new HashSet<Method>();  lockedMethodSet.addAll(Arrays.asList(methodList));  for (  Method method : methodList) {    if (method.isPublic() && !isConstructor(method.getName())) {      lockedMethodSet.remove(method);    }  }  boolean change;  do {    change=false;    for (Iterator<CallGraphEdge> i=callGraph.edgeIterator(); i.hasNext(); ) {      CallGraphEdge edge=i.next();      CallSite callSite=edge.getCallSite();      if (obviouslyLockedSites.contains(callSite)) {        continue;      }      if (lockedMethodSet.contains(callSite.getMethod())) {        continue;      }      CallGraphNode target=edge.getTarget();      if (lockedMethodSet.remove(target.getMethod())) {        change=true;      }    }  } while (change);  if (DEBUG) {    System.out.println("Apparently not unlocked methods:");    for (    Method method : lockedMethodSet) {      System.out.println("\t" + method.getName());    }  }  return lockedMethodSet;}  }
class C{  @RpcMethod public void startImageScan(String dataStore,Long scanRate,Long timeout,AsyncMethodCallback<Host.AsyncClient.start_image_scan_call> handler) throws RpcException {  ensureClient();  StartImageScanRequest request=new StartImageScanRequest(dataStore);  if (null != scanRate) {    request.setScan_rate(scanRate);  }  if (null != timeout) {    request.setTimeout(timeout);  }  try {    logger.info("start_image_scan target {}, request {}",getHostIp(),request);    clientProxy.setTimeout(START_IMAGE_SCAN_TIMEOUT_MS);    clientProxy.start_image_scan(request,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public PackingPlan createPackingPlan(final Config config,final Config runtime){  String packingClass=Context.packingClass(config);  IPacking packing;  try {    packing=ReflectionUtils.newInstance(packingClass);  } catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {    LOG.log(Level.SEVERE,"Failed to instantiate packing instance",e);    return null;  }  try {    TopologyAPI.Topology topology=com.twitter.heron.spi.utils.Runtime.topology(runtime);    packing.initialize(config,topology);    PackingPlan packedPlan=packing.pack();    return packedPlan;  }  finally {    SysUtils.closeIgnoringExceptions(packing);  }}  }
class C{  private void showPopupMenu(final MouseEvent event){  final int mouseRow=m_traceTable.rowAtPoint(event.getPoint());  if (mouseRow != -1) {    final int[] rows=m_traceTable.getSelectedRows();    if (Ints.asList(rows).indexOf(mouseRow) != -1) {      m_traceTable.setRowSelectionInterval(mouseRow,mouseRow);    }  }  final int minIndex=m_traceTable.getSelectionModel().getMinSelectionIndex();  if (minIndex != -1) {    final CTagsTree tagsTree=m_graphPanel.getTagsTree();    final JPopupMenu popupMenu=new CEventListTableMenu((JFrame)SwingUtilities.getWindowAncestor(CTracesPanel.this),m_traceTable,m_graph,m_traceProvider,tagsTree);    popupMenu.show(m_traceTable,event.getX(),event.getY());  }}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  put(index,new Integer(value));  return this;}  }
class C{  public static RecurrenceIterator createRecurrenceIterator(Collection<? extends DateValue> dates){  DateValue[] datesArray=dates.toArray(new DateValue[0]);  return new RDateIteratorImpl(datesArray);}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (o instanceof CustomPieURLGenerator) {    CustomPieURLGenerator generator=(CustomPieURLGenerator)o;    if (getListCount() != generator.getListCount()) {      return false;    }    Set keySet;    for (int pieItem=0; pieItem < getListCount(); pieItem++) {      if (getURLCount(pieItem) != generator.getURLCount(pieItem)) {        return false;      }      keySet=((HashMap)this.urls.get(pieItem)).keySet();      String key;      for (Iterator i=keySet.iterator(); i.hasNext(); ) {        key=(String)i.next();        if (!getURL(key,pieItem).equals(generator.getURL(key,pieItem))) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public Source<Double> fromZeroToDoubleMax(){  return Compositions.weightWithValues(Doubles.fromZeroToDoubleMax(),Double.MAX_VALUE,0d);}  }
class C{  public void parseForField(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public void put(int key,String value){  mCapabilities.put(key,value);}  }
class C{  public DatasetContainer(DataSet dataset,boolean defaultRanges,int defaultRangesSeed){  this();  this.setDataset(dataset);  this.dataset.populateAnnotatedStrings();  this.dataset.updateStats();  if (defaultRanges) {    this.createDefaultRanges(defaultRangesSeed);    this.updateSubDataset();  }}  }
class C{  void close(){  serverSocket=null;  socket=null;}  }
class C{  static double powerSeries(double a,double b,double x) throws ArithmeticException {  double s, t, u, v, n, t1, z, ai;  ai=1.0 / a;  u=(1.0 - b) * x;  v=u / (a + 1.0);  t1=v;  t=u;  n=2.0;  s=0.0;  z=MACHEP * ai;  while (Math.abs(v) > z) {    u=(n - b) * x / n;    t*=u;    v=t / (a + n);    s+=v;    n+=1.0;  }  s+=t1;  s+=ai;  u=a * Math.log(x);  if ((a + b) < MAXGAM && Math.abs(u) < MAXLOG) {    t=gamma(a + b) / (gamma(a) * gamma(b));    s=s * t * Math.pow(x,a);  } else {    t=logGamma(a + b) - logGamma(a) - logGamma(b) + u + Math.log(s);    if (t < MINLOG)     s=0.0; else     s=Math.exp(t);  }  return s;}  }
class C{  @Nullable private boolean shouldAlignFieldInColumns(@NotNull ASTNode child){  if (!mySettings.ALIGN_GROUP_FIELD_DECLARATIONS) {    return false;  }  IElementType childType=child.getElementType();  ASTNode previousNode=FormatterUtil.getPreviousNonWhitespaceSibling(child);  if (childType == JavaTokenType.IDENTIFIER && (previousNode == null || previousNode.getElementType() == JavaTokenType.COMMA)) {    return false;  }  return true;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public DcwColumnInfo(BinaryFile inputFile) throws EOFException, FormatException {  char delim=inputFile.readChar();  if (delim == ';')   throw new EOFException();  StringBuffer buildstring=new StringBuffer();  do {    buildstring.append(Character.toLowerCase(delim));  } while ((delim=inputFile.readChar()) != '=');  columnName=buildstring.toString().trim().intern();  fieldType=inputFile.readChar();  delim=inputFile.readChar();  if (delim != ',') {    if (delim != ' ') {      throw new com.bbn.openmap.io.InvalidCharException("Illegal delimiter character",delim);    }  }  buildstring=new StringBuffer();  while ((delim=inputFile.readChar()) != ',') {    if (!Character.isWhitespace(delim)) {      buildstring.append(delim);    }  }  String nEls=buildstring.toString();  numberOfElements=(nEls.equals("*")) ? -1 : Integer.parseInt(nEls);  if (numberOfElements != 1) {switch (fieldType) {case VPF_COLUMN_FLOAT:case VPF_COLUMN_DOUBLE:case VPF_COLUMN_SHORT:case VPF_COLUMN_INT:case VPF_COLUMN_DATE:case VPF_COLUMN_NULL:case VPF_COLUMN_TRIPLET:      throw new FormatException("Illegal array type: " + fieldType + "for column "+ columnName);default :    break;}}String tmpkeyType=readColumnText(inputFile);if (tmpkeyType == null) {throw new FormatException("keyType is required column info");}tmpkeyType=tmpkeyType.trim();if (tmpkeyType.length() == 1) {keyType=tmpkeyType.charAt(0);} else {throw new FormatException("keyType is supposed to be 1 character");}columnDescription=readColumnText(inputFile);if (columnDescription == null) {return;}valueDescriptionTable=readColumnTextLowerCase(inputFile);if (valueDescriptionTable == null) {return;}if (valueDescriptionTable.equals("-")) {valueDescriptionTable=null;} else {valueDescriptionTable=valueDescriptionTable.intern();}thematicIndexName=readColumnTextLowerCase(inputFile);if (thematicIndexName == null) {return;}if (thematicIndexName.equals("-")) {thematicIndexName=null;} else {thematicIndexName=thematicIndexName.intern();}narrativeTable=readColumnTextLowerCase(inputFile);if (narrativeTable == null) {return;}if (narrativeTable.equals("-")) {narrativeTable=null;} else {narrativeTable=narrativeTable.intern();}inputFile.assertChar(':');}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE;default :  return null;}}  }
class C{  public static SuggestionAnswer parseAnswerContents(String answerContents){  SuggestionAnswer answer=new SuggestionAnswer();  try {    JSONObject jsonAnswer=new JSONObject(answerContents);    JSONArray jsonLines=jsonAnswer.getJSONArray(ANSWERS_JSON_LINE);    if (jsonLines.length() != 2) {      Log.e(TAG,"Answer JSON doesn't contain exactly two lines: " + jsonAnswer);      return null;    }    answer.mFirstLine=new SuggestionAnswer.ImageLine(jsonLines.getJSONObject(0).getJSONObject(ANSWERS_JSON_IMAGE_LINE));    answer.mSecondLine=new SuggestionAnswer.ImageLine(jsonLines.getJSONObject(1).getJSONObject(ANSWERS_JSON_IMAGE_LINE));  } catch (  JSONException e) {    Log.e(TAG,"Problem parsing answer JSON: " + e.getMessage());    return null;  }  return answer;}  }
class C{  public Boolean isMulticastSnoopingSupported(){  return multicastSnoopingSupported;}  }
class C{  public static MatchQueryBuilder matchPhrasePrefixQuery(String name,Object text){  return new MatchQueryBuilder(name,text).type(MatchQueryBuilder.Type.PHRASE_PREFIX);}  }
class C{  public static String toDateString(java.util.Date date){  return toDateString(date,"MM/dd/yyyy");}  }
class C{  public Schema(Database database,int id,String schemaName,User owner,boolean system){  tablesAndViews=database.newConcurrentStringMap();  indexes=database.newConcurrentStringMap();  sequences=database.newConcurrentStringMap();  triggers=database.newConcurrentStringMap();  constraints=database.newConcurrentStringMap();  constants=database.newConcurrentStringMap();  functions=database.newConcurrentStringMap();  initDbObjectBase(database,id,schemaName,Trace.SCHEMA);  this.owner=owner;  this.system=system;}  }
class C{  public String toFormattedString(){  return "CUDA resource view descriptor:\n    " + createString("\n    ");}  }
class C{  public void start(float rotation){  if (mRunning) {    return;  }  mTargetRotation=rotation;  mVelocity=mTargetRotation / ROTATE_ANIMATION_DURATION;  mAppliedRotation=0f;  mLastRuntime=NEVER;  mStop=false;  mRunning=true;  mHeader.post(this);}  }
class C{  public void addInterfaceName(String interfaceName,int line){  (interfaceNames != null ? interfaceNames : (interfaceNames=new TreeSet<NameInfo>())).add(new NameInfo(interfaceName,line));  addImportName(interfaceName,line);}  }
class C{  public AuthSSLInitializationError(){  super();}  }
class C{  public Anonymous_derivedAttribute_1_ createAnonymous_derivedAttribute_1_(){  Anonymous_derivedAttribute_1_Impl anonymous_derivedAttribute_1_=new Anonymous_derivedAttribute_1_Impl();  return anonymous_derivedAttribute_1_;}  }
class C{  public static int spToPX(final Context ctx,float sp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,ctx.getResources().getDisplayMetrics());}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer){  this(constructor,representer,new DumperOptions());}  }
class C{  @Override public boolean deleteRabbit(String id){  logRepository.deleteByRabbitId(id);  logLevelDailyStatisticsRepository.deleteByRabbitId(id);  rabbitRepository.deleteById(id);  coreService.syncRabbitNameCache();  removeQueue("errabbit.report." + id);  return true;}  }
class C{  private int trimToPowerOf2(int initialCapacity){  int capacity=1;  while (capacity < initialCapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  public MyIdxList append(MyIdxList list1,MyIdxList list2){  MyIdxList temp=new MyIdxList(list1.size() + list2.size());  temp.m_List.addAll(list1.m_List);  temp.m_List.addAll(list2.m_List);  return temp;}  }
class C{  public KeyedVersions(KeyedVersions other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersions()) {    List<VectorClock> __this__versions=new ArrayList<VectorClock>();    for (    VectorClock other_element : other.versions) {      __this__versions.add(new VectorClock(other_element));    }    this.versions=__this__versions;  }}  }
class C{  private static boolean isInstrumentationInstruction(Instruction i){  return InstrumentedCounter.conforms(i);}  }
class C{  public void replyToMessage(Message srcMsg,int what){  Message msg=Message.obtain();  msg.what=what;  replyToMessage(srcMsg,msg);}  }
class C{  public ByteArrayInputStream(byte[] buf,int offset,int length){}  }
class C{  public JsonContentFilterFieldSetting(final String[] path,final Pattern expression,final JsonContentType valueType){  this.expression=expression;  this.path=path;  this.valueType=valueType;}  }
class C{  public static void main(String args[]){  long n=Long.parseLong(args[0]);  long N=Long.parseLong(args[1]);  testArraySampling((int)n,(int)N);}  }
class C{  public static double distancePointLine(double pointX,double pointY,double x0,double y0,double x1,double y1){  double dx=x1 - x0;  double dy=y1 - y0;  double denom=Math.sqrt(dx * dx + dy * dy);  return (dx * (y0 - pointY) - (x0 - pointX) * dy) / denom;}  }
class C{  public static float nextUp(final float start){  if (start < Float.POSITIVE_INFINITY) {    final int bits=Float.floatToRawIntBits(start + 0.0f);    return Float.intBitsToFloat(bits + (bits >= 0 ? 1 : -1));  } else   if (start == Float.POSITIVE_INFINITY) {    return Float.POSITIVE_INFINITY;  } else {    return start;  }}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());    if (!mYAxis.isInverted()) {      yMin=(float)p1.x;      yMax=(float)p2.x;    } else {      yMin=(float)p2.x;      yMax=(float)p1.x;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  public static IPoint[] reduce(IPoint[] points){  ArrayList<IPoint> reduced=new ArrayList<IPoint>();  double minX=points[0].getX();  double maxX=minX;  double minY=points[0].getY();  double maxY=minY;  int left=0, right=0, top=0, down=0;  for (int i=1; i < points.length; i++) {    double x=points[i].getX();    double y=points[i].getY();    if (FloatingPoint.lesser(x,minX)) {      minX=x;      left=i;    } else     if (FloatingPoint.greater(x,maxX)) {      maxX=x;      right=i;    }    if (FloatingPoint.lesser(y,minY)) {      minY=y;      down=i;    } else     if (FloatingPoint.greater(y,maxY)) {      maxY=y;      top=i;    }  }  double y2=Math.min(maxY + 1,Double.MAX_VALUE);  for (int i=0; i < points.length; i++) {    double x=points[i].getX();    double y=points[i].getY();    int ct=0;    if (intersect(x,y,x,y2,minX,points[left].getY(),points[top].getX(),maxY) == 0) {      ct+=intersect(x,y,x,y2,points[top].getX(),maxY,maxX,points[right].getY());    } else {      ct++;    }    if (intersect(x,y,x,y2,maxX,points[right].getY(),points[down].getX(),minY) == 0) {      ct+=intersect(x,y,x,y2,points[down].getX(),minY,minX,points[left].getY());    } else {      ct++;    }    if (ct == 0 || ct == 2) {      reduced.add(points[i]);    } else {      if (i == left || i == right || i == down || i == top) {        reduced.add(points[i]);      }    }  }  return reduced.toArray(new IPoint[]{});}  }
class C{  public void generatePlasmids(LogicCircuit lc,GateLibrary gate_library,PartLibrary part_library,UCF ucf){  String name_Eug_circuit_rules=lc.get_assignment_name() + "_Eugene_circuit_module_rules.eug";  String name_Eug_circuit_parts=lc.get_assignment_name() + "_Eugene_circuit_module_part_list.txt";  String name_Eug_circuit_gates=lc.get_assignment_name() + "_Eugene_circuit_module_gate_list.txt";  String name_Eug_output_rules=lc.get_assignment_name() + "_Eugene_output_module_rules.eug";  String name_Eug_output_parts=lc.get_assignment_name() + "_Eugene_output_module_part_list.txt";  logger.info("=========== Setting gate parts according to assigned gate names");  PlasmidUtil.setTxnUnits(lc,gate_library);  EugeneAdaptor eugeneAdaptor=new EugeneAdaptor();  eugeneAdaptor.setThreadDependentLoggername(threadDependentLoggername);  ArrayList<String> sensor_module_lines=Util.fileLines(_options.get_fin_sensor_module());  String sensor_module_sequence="";  for (  String s : sensor_module_lines) {    sensor_module_sequence+=s;  }  Part sensor_module_part=new Part("sensor_module","backbone",sensor_module_sequence);  ArrayList<Part> sensor_module_list=new ArrayList<Part>();  ArrayList<ArrayList<Part>> sensor_module_lists=new ArrayList<ArrayList<Part>>();  sensor_module_list.add(sensor_module_part);  sensor_module_lists.add(sensor_module_list);  lc.set_sensor_module_parts(sensor_module_lists);  String circuit_eugene_file_string="";  ucfAdaptor.setThreadDependentLoggername(threadDependentLoggername);  ArrayList<String> eugene_part_rules=ucfAdaptor.getEugenePartRules(ucf);  ArrayList<String> eugene_gate_rules=ucfAdaptor.getEugeneGateRules(ucf);  eugeneAdaptor.set_eugene_part_rules(eugene_part_rules);  eugeneAdaptor.set_eugene_gate_rules(eugene_gate_rules);  String circuit_module_location_name=ucfAdaptor.getCircuitModuleLocationName(ucf);  String output_module_location_name=ucfAdaptor.getOutputModuleLocationName(ucf);  if (circuit_module_location_name == null || circuit_module_location_name.isEmpty() || output_module_location_name == null || output_module_location_name.isEmpty() || circuit_module_location_name.equals(output_module_location_name)) {    logger.info("=========== Eugene: circuit module and output module combined ===========");    ArrayList<Gate> logic_and_output_gates=new ArrayList<>();    logic_and_output_gates.addAll(lc.get_logic_gates());    logic_and_output_gates.addAll(lc.get_output_gates());    circuit_eugene_file_string=eugeneAdaptor.generateEugeneFile(logic_and_output_gates,name_Eug_circuit_rules,part_library,_options);    logger.info("Eugene: combinatorial design of plasmid layouts...\n");    eugeneAdaptor.callEugene(name_Eug_circuit_rules,lc.get_circuit_module_parts(),part_library,_options);    logger.info("Number of circuit module layouts: " + lc.get_circuit_module_parts().size());  } else   if (!circuit_module_location_name.isEmpty() && !output_module_location_name.isEmpty() && !circuit_module_location_name.equals(output_module_location_name)) {    logger.info("=========== Eugene: circuit module ===========");    circuit_eugene_file_string=eugeneAdaptor.generateEugeneFile(lc.get_logic_gates(),name_Eug_circuit_rules,part_library,_options);    logger.info("Eugene: combinatorial design of plasmid layouts...\n");    eugeneAdaptor.callEugene(name_Eug_circuit_rules,lc.get_circuit_module_parts(),part_library,_options);    logger.info("Number of circuit module layouts: " + lc.get_circuit_module_parts().size());    logger.info("=========== Eugene: output module ============");    String output_eugene_file_string=eugeneAdaptor.generateEugeneFile(lc.get_output_gates(),name_Eug_output_rules,part_library,_options);    eugeneAdaptor.callEugene(name_Eug_output_rules,lc.get_output_module_parts(),part_library,_options);    logger.info("Number of output module layouts: " + lc.get_output_module_parts().size());  }  int p_counter=0;  for (  ArrayList<Part> module : lc.get_circuit_module_parts()) {    String N=lc.get_assignment_name() + "_P" + String.format("%03d",p_counter);    ArrayList<String> parts_list=new ArrayList<String>();    ArrayList<String> gates_list=new ArrayList<String>();    for (    Part p : module) {      parts_list.add(p.get_direction() + p.get_name());      if (p.get_type().equals("cds")) {        gates_list.add(p.get_direction() + "gate_" + p.get_name());      }    }    Util.fileWriter(_options.get_output_directory() + name_Eug_circuit_parts,N + " " + parts_list.toString()+ "\n",true);    Util.fileWriter(_options.get_output_directory() + name_Eug_circuit_gates,N + " " + gates_list.toString()+ "\n",true);    ++p_counter;  }  for (  ArrayList<Part> module : lc.get_output_module_parts()) {    String N=lc.get_assignment_name() + "_P" + String.format("%03d",p_counter);    ArrayList<String> parts_list=new ArrayList<String>();    ArrayList<String> gates_list=new ArrayList<String>();    for (    Part p : module) {      parts_list.add(p.get_direction() + p.get_name());    }    Util.fileWriter(_options.get_output_directory() + name_Eug_output_parts,N + " " + parts_list.toString()+ "\n",true);  }  if (ucf.get_genetic_locations().isEmpty()) {    lc.set_sensor_plasmid_parts(lc.get_sensor_module_parts());    lc.set_circuit_plasmid_parts(lc.get_circuit_module_parts());    lc.set_output_plasmid_parts(lc.get_output_module_parts());  } else {    if (!ucf.get_genetic_locations().containsKey("sensor_module_location")) {      lc.set_sensor_plasmid_parts(lc.get_sensor_module_parts());    }    if (!ucf.get_genetic_locations().containsKey("circuit_module_location")) {      logger.info("Setting circuit module parts");      lc.set_circuit_plasmid_parts(lc.get_circuit_module_parts());    }    if (!ucf.get_genetic_locations().containsKey("output_module_location")) {      lc.set_output_plasmid_parts(lc.get_output_module_parts());    }  }  GeneticLocationWriter.insertModulePartsIntoGeneticLocations(lc,ucf);  ArrayList<String> all_plasmid_strings=new ArrayList<>();  logger.info("\n=========== Writing plasmid files ============");  if (lc.get_sensor_plasmid_parts().size() > 0) {    all_plasmid_strings.addAll(PlasmidUtil.writePlasmidFiles(lc.get_sensor_plasmid_parts(),lc.get_assignment_name(),"plasmid_sensor",_options.get_output_directory()));  }  if (lc.get_circuit_plasmid_parts().size() > 0) {    all_plasmid_strings.addAll(PlasmidUtil.writePlasmidFiles(lc.get_circuit_plasmid_parts(),lc.get_assignment_name(),"plasmid_circuit",_options.get_output_directory()));  }  if (lc.get_output_plasmid_parts().size() > 0) {    all_plasmid_strings.addAll(PlasmidUtil.writePlasmidFiles(lc.get_output_plasmid_parts(),lc.get_assignment_name(),"plasmid_output",_options.get_output_directory()));  }  logger.info("\n=========== SBOL for circuit plasmids ========");  for (int i=0; i < lc.get_circuit_plasmid_parts().size(); ++i) {    ArrayList<Part> plasmid=lc.get_circuit_plasmid_parts().get(i);    SBOLCircuitWriter sbol_circuit_writer=new SBOLCircuitWriter();    sbol_circuit_writer.setCircuitName(lc.get_assignment_name());    String sbol_filename=lc.get_assignment_name() + "_sbol_circuit" + "_P"+ String.format("%03d",i)+ ".sbol";    String sbol_plasmid_name=lc.get_assignment_name() + "_P" + String.format("%03d",i);    String sbol_document=sbol_circuit_writer.writeSBOLCircuit(sbol_filename,lc,plasmid,sbol_plasmid_name,_options);  }  PlasmidUtil.resetParentGates(lc);  if (_options.is_figures()) {    if (_options.is_dnaplotlib()) {      logger.info("\n");      logger.info("=========== DNAPlotLib =======================");      logger.info("rendering genetic diagram image...");      PlotLibWriter.writeCircuitsForDNAPlotLib(lc.get_circuit_plasmid_parts(),lc.get_index(),_options);    }  }  logger.info("");}  }
class C{  @Override public void evaluate(){  if (!isEnabled()) {    return;  }  Network network=getBot().memory().getShortTermMemory();  List<Vertex> activeMemory=getBot().memory().getActiveMemory();  Iterator<Vertex> inputs=activeMemory.iterator();  while (inputs.hasNext()) {    Vertex input=network.createVertex(inputs.next());    Vertex source=input;    if (input.instanceOf(Primitive.INPUT)) {      for (      Emotion emotion : getEmotions().values()) {        emotion.setState(emotion.getState() / 2);      }      Collection<Relationship> emotions=input.getRelationships(Primitive.EMOTION);      Vertex sentence=input.getRelationship(Primitive.INPUT);      if ((emotions == null) && (sentence != null)) {        emotions=sentence.getRelationships(Primitive.EMOTION);        if (emotions != null) {          source=sentence;        } else {          Collection<Relationship> words=sentence.getRelationships(Primitive.WORD);          if (words != null) {            for (            Relationship word : words) {              if (word.getTarget().getRelationships(Primitive.EMOTION) != null) {                for (                Emotion emotion : getEmotions().values()) {                  Vertex emotionVertex=network.createVertex(emotion.primitive());                  Relationship emotionRelation=word.getTarget().getRelationship(Primitive.EMOTION,emotionVertex);                  if (emotionRelation != null) {                    Relationship relationship=input.getRelationship(Primitive.EMOTION,emotionVertex);                    if (relationship == null) {                      relationship=input.addRelationship(Primitive.EMOTION,emotionVertex);                      relationship.setCorrectness(emotionRelation.getCorrectness());                    } else {                      relationship.setCorrectness((relationship.getCorrectness() + emotionRelation.getCorrectness()) / 2);                    }                  }                }              }            }            emotions=input.getRelationships(Primitive.EMOTION);          }        }      }      if (emotions != null) {        for (        Emotion emotion : getEmotions().values()) {          Vertex emotionVertex=network.createVertex(emotion.primitive());          Relationship relationship=source.getRelationship(Primitive.EMOTION,emotionVertex);          if (relationship != null) {            try {              float value=relationship.getCorrectness();              emotion.setState(emotion.getState() + value);              log("Applying emotion",Level.FINE,emotion,value);            } catch (            Exception error) {              getBot().log(this,error);            }          }        }      }    }  }}  }
class C{  public void clearResults(){  m_Results.clear();  m_Model.clear();  m_Objs.clear();  System.gc();}  }
class C{  protected static boolean willUseBinaryTag(Object value){  if (value instanceof byte[])   return true;  if (value instanceof String)   return org.yaml.snakeyaml.reader.StreamReader.NON_PRINTABLE.matcher((String)value).find();  return false;}  }
class C{  public void onSnackbarTimedOut(Snackbar snackbar){}  }
class C{  private boolean fieldExist(ViewPart part){  PsiField[] fields=mClass.getAllFields();  for (  PsiField field : fields) {    if (field.getName().equals(part.getName())) {      return true;    }  }  return false;}  }
class C{  ThreadGroup(ThreadGroup parent){  this.name="main";  this.setParent(parent);}  }
class C{  protected final Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public VNXeCommandJob createLunGroupSnap(String lunGroupID,String name){  _logger.info("creating lun group snap:" + lunGroupID);  LunSnapCreateParam parm=new LunSnapCreateParam();  VNXeBase resource=new VNXeBase(lunGroupID);  parm.setStorageResource(resource);  parm.setName(name);  LunGroupSnapRequests req=new LunGroupSnapRequests(_khClient);  return req.createLunGroupSnap(parm);}  }
class C{  public static InvalidSession parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidSession object=new InvalidSession();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidSession)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void writeTimeStamp(byte[] buffer,int offset,long time){  long seconds=time / 1000L;  long milliseconds=time - seconds * 1000L;  seconds+=OFFSET_1900_TO_1970;  buffer[offset++]=(byte)(seconds >> 24);  buffer[offset++]=(byte)(seconds >> 16);  buffer[offset++]=(byte)(seconds >> 8);  buffer[offset++]=(byte)(seconds >> 0);  long fraction=milliseconds * 0x100000000L / 1000L;  buffer[offset++]=(byte)(fraction >> 24);  buffer[offset++]=(byte)(fraction >> 16);  buffer[offset++]=(byte)(fraction >> 8);  buffer[offset++]=(byte)(Math.random() * 255.0);}  }
class C{  public static ShardRouting newUnassigned(String index,int shardId,RestoreSource restoreSource,boolean primary,UnassignedInfo unassignedInfo){  return new ShardRouting(index,shardId,null,null,restoreSource,primary,ShardRoutingState.UNASSIGNED,0,unassignedInfo,null,true,UNAVAILABLE_EXPECTED_SHARD_SIZE);}  }
class C{  public final boolean isSilent(){  return silent;}  }
class C{  @Override public void execute(){  try {    if (!event.has("progress_type")) {      ProgressLogController.get().showCategories(event.getList("data"));    } else     if (!event.has("item")) {      if (event.get("progress_type").equals("repeatable")) {        ProgressLogController.get().setRepeatable(event.getList("data"));      } else {        ProgressLogController.get().showCategorySummary(event.get("progress_type"),event.getList("data"));      }    } else {      ProgressLogController.get().showDescription(event.get("progress_type"),event.get("item"),event.get("description"),event.get("information"),event.getList("data"));    }  } catch (  RuntimeException e) {    logger.error("Failed to process progress status. Event: " + event,e);  }}  }
class C{  public boolean canZoomOutMoreX(){  return (mScaleX > mMinScaleX);}  }
class C{  @ForceInline @SuppressWarnings("unchecked") static <T,U>T castReference(Class<? extends T> t,U x){  if (x != null && !t.isInstance(x))   throw newClassCastException(t,x);  return (T)x;}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  public static void deleteMember(final Connection connection,final TypeMember member,final INaviModule module) throws CouldntDeleteException {  try {    final CallableStatement statement=connection.prepareCall("{ call delete_type(?, ?) }");    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setInt(2,member.getId());      statement.execute();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  private static byte[] findCommonPrefix(Entry e1,Entry e2){  byte[] b1=e1.getEntryBytes();  byte[] b2=e2.getEntryBytes();  int maxLen=b1.length;  byte[] prefix=b1;  if (b1.length > b2.length) {    maxLen=b2.length;    prefix=b2;  }  int len=0;  while ((len < maxLen) && (b1[len] == b2[len])) {    ++len;  }  if (len < prefix.length) {    if (len == 0) {      return EMPTY_PREFIX;    }    prefix=ByteUtil.copyOf(prefix,len);  }  return prefix;}  }
class C{  protected Limit toLimit(PlanNode input,ValueNode offsetClause,ValueNode limitClause) throws StandardException {  int offset=0, limit=-1;  boolean offsetIsParameter=false, limitIsParameter=false;  if (offsetClause != null) {    if (offsetClause instanceof ParameterNode) {      offset=limitParameter((ParameterNode)offsetClause);      offsetIsParameter=true;    } else {      offset=getIntegerConstant(offsetClause,"OFFSET must be constant integer");      if (offset < 0)       throw new UnsupportedSQLException("OFFSET must not be negative",offsetClause);    }  }  if (limitClause != null) {    if (limitClause instanceof ParameterNode) {      limit=limitParameter((ParameterNode)limitClause);      limitIsParameter=true;    } else {      limit=getIntegerConstant(limitClause,"LIMIT must be constant integer");      if (limit < 0)       throw new UnsupportedSQLException("LIMIT must not be negative",limitClause);    }  }  return new Limit(input,offset,offsetIsParameter,limit,limitIsParameter);}  }
class C{  public static String executeCommand(String command){  StringBuffer output=new StringBuffer();  Process p;  try {    p=Runtime.getRuntime().exec(command);    p.waitFor();    try (BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()))){      String line="";      while ((line=reader.readLine()) != null) {        output.append(line + "\n");      }      reader.close();    }   } catch (  Exception e) {    e.printStackTrace();  }  return output.toString();}  }
class C{  public QueryInvalidException(String msg,Throwable cause){  super(msg);  initCause(cause);}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  AvgBigDecimalAggregator avgAggregator=(AvgBigDecimalAggregator)aggregator;  if (!avgAggregator.isFirstTime()) {    aggVal=aggVal.add(avgAggregator.aggVal);    count+=avgAggregator.count;    firstTime=false;  }}  }
class C{  public boolean removeEventListener(KeyChainEventListener listener){  checkNotNull(listener);  for (  DeterministicKeyChain chain : chains)   chain.removeEventListener(listener);  return basic.removeEventListener(listener);}  }
class C{  private HttpResponse sendRequestToXDMS(HttpRequest request,HttpAuthenticationAgent authenticationAgent) throws PayloadException, NetworkException {  HttpResponse response=sendHttpRequest(request,authenticationAgent);  final int responseCode=response.getResponseCode();switch (responseCode) {case Response.UNAUTHORIZED:    if (sLogger.isActivated()) {      sLogger.debug("401 Unauthorized response received");    }  if (authenticationAgent != null) {    authenticationAgent.readWwwAuthenticateHeader(response.getHeader("www-authenticate"));  }String cookie=response.getHeader("set-cookie");request.setCookie(cookie);return sendRequestToXDMS(request,authenticationAgent);case Response.CONDITIONAL_REQUEST_FAILED:if (sLogger.isActivated()) {sLogger.debug("412 Precondition failed");}documents.remove(request.getAUID());return sendRequestToXDMS(request);default :throw new NetworkException(new StringBuilder("Invalid response : ").append(responseCode).toString());}}  }
class C{  public static Angle rhumbDistance(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    throw new IllegalArgumentException("LatLon Is Null");  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLat=lat2 - lat1;  double dLon=lon2 - lon1;  double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));  double q=dLat / dPhi;  if (Double.isNaN(dPhi) || Double.isNaN(q)) {    q=Math.cos(lat1);  }  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double distanceRadians=Math.sqrt(dLat * dLat + q * q * dLon* dLon);  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);}  }
class C{  public AbFragmentPagerAdapter(FragmentManager mFragmentManager,ArrayList<Fragment> fragmentList){  super(mFragmentManager);  mFragmentList=fragmentList;}  }
class C{  public static Population createPopulation(Config config){  return createPopulation(config,null);}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  private boolean checkClassImplementsCompliance(){  Class<?>[] interfaces=mClass.getInterfaces();  Set<String> interFaceSet=new HashSet<>();  for (  Class<?> c : interfaces) {    interFaceSet.add(c.getCanonicalName());  }  for (  String inter : implInterfaces) {    if (!interFaceSet.contains(inter)) {      return false;    }  }  return true;}  }
class C{  public void insertBefore(String src) throws CannotCompileException {  edited=true;  ConstPool cp=getConstPool();  CodeAttribute ca=iterator.get();  Javac jv=new Javac(thisClass);  Bytecode b=jv.getBytecode();  b.setStackDepth(1);  b.setMaxLocals(ca.getMaxLocals());  try {    CtClass type=getType();    int var=jv.recordVariable(type,EXCEPTION_NAME);    jv.recordReturnType(type,false);    b.addAstore(var);    jv.compileStmnt(src);    b.addAload(var);    int oldHandler=etable.handlerPc(index);    b.addOpcode(Opcode.GOTO);    b.addIndex(oldHandler - iterator.getCodeLength() - b.currentPc() + 1);    maxStack=b.getMaxStack();    maxLocals=b.getMaxLocals();    int pos=iterator.append(b.get());    iterator.append(b.getExceptionTable(),pos);    etable.setHandlerPc(index,pos);  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  CompileError e) {    throw new CannotCompileException(e);  }}  }
class C{  public TsvSequenceDataSource(final File reads,final Integer maximumNs){  mMaximumNs=maximumNs;  mReads=reads;}  }
class C{  public static void showToast(final Context context,final View view){  showToast(context,view,Toast.LENGTH_SHORT,-1,-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.146 -0500",hash_original_method="225F1E2FD25662F69AE6A7484F5A3DE6",hash_generated_method="0B873B5BDB61A0A73ACAAADB7F7D472A") public RouteTracker(HttpHost target,InetAddress local){  if (target == null) {    throw new IllegalArgumentException("Target host may not be null.");  }  this.targetHost=target;  this.localAddress=local;  this.tunnelled=TunnelType.PLAIN;  this.layered=LayerType.PLAIN;}  }
class C{  public boolean hasParameterAnnotations(){  return (getParameterAnnotations().length != 0);}  }
class C{  public FastShortBuffer append(FastShortBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  public void exec(final String service,final String action,final String callbackId,final String rawArgs){  CordovaPlugin plugin=getPlugin(service);  if (plugin == null) {    Log.d(TAG,"exec() call to unknown plugin: " + service);    PluginResult cr=new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);    app.sendPluginResult(cr,callbackId);    return;  }  CallbackContext callbackContext=new CallbackContext(callbackId,app);  try {    long pluginStartTime=System.currentTimeMillis();    boolean wasValidAction=plugin.execute(action,rawArgs,callbackContext);    long duration=System.currentTimeMillis() - pluginStartTime;    if (duration > SLOW_EXEC_WARNING_THRESHOLD) {      Log.w(TAG,"THREAD WARNING: exec() call to " + service + "."+ action+ " blocked the main thread for "+ duration+ "ms. Plugin should use CordovaInterface.getThreadPool().");    }    if (!wasValidAction) {      PluginResult cr=new PluginResult(PluginResult.Status.INVALID_ACTION);      callbackContext.sendPluginResult(cr);    }  } catch (  JSONException e) {    PluginResult cr=new PluginResult(PluginResult.Status.JSON_EXCEPTION);    callbackContext.sendPluginResult(cr);  }catch (  Exception e) {    Log.e(TAG,"Uncaught exception from plugin",e);    callbackContext.error(e.getMessage());  }}  }
class C{  public Vector3f negate(){  return new Vector3f(-x,-y,-z);}  }
class C{  private int mostPolygonalIndex(){  int dim0=geom[0].getDimension();  int dim1=geom[1].getDimension();  if (dim0 >= 2 && dim1 >= 2) {    if (geom[0].getNumPoints() > geom[1].getNumPoints())     return 0;    return 1;  }  if (dim0 >= 2)   return 0;  if (dim1 >= 2)   return 1;  return 0;}  }
class C{  public JavaClass lookupClass(@Nonnull ClassDescriptor classDescriptor) throws ClassNotFoundException {  return lookupClass(classDescriptor.toDottedClassName());}  }
class C{  public static final LocoNetMessage createQueryAllIplDevicesPacket(){  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_IPL_OP_LEN);  m.setElement(0,LnConstants.OPC_PEER_XFER);  m.setElement(1,LnConstants.RE_IPL_OP_LEN);  m.setElement(2,LnConstants.RE_IPL_IDENTITY_OPERATION);  m.setElement(3,LnConstants.RE_IPL_OP_QUERY);  m.setElement(4,LnConstants.RE_IPL_MFR_ALL);  m.setElement(5,LnConstants.RE_IPL_DIGITRAX_HOST_ALL);  m.setElement(6,LnConstants.RE_IPL_DIGITRAX_SLAVE_ALL);  m.setElement(7,LnConstants.RE_IPL_MFR_ALL);  m.setElement(8,LnConstants.RE_IPL_OP_HFW_QUERY);  m.setElement(9,LnConstants.RE_IPL_OP_HSNM_QUERY);  m.setElement(10,LnConstants.RE_IPL_OP_SFW_QUERY);  m.setElement(11,LnConstants.RE_IPL_OP_HSN0_QUERY);  m.setElement(12,LnConstants.RE_IPL_OP_HSN1_QUERY);  m.setElement(13,LnConstants.RE_IPL_OP_HSN2_QUERY);  m.setElement(14,LnConstants.RE_IPL_OP_SSNM_QUERY);  m.setElement(15,LnConstants.RE_IPL__OP_SSN0_QUERY);  m.setElement(16,LnConstants.RE_IPL_OP_SSN1_QUERY);  m.setElement(17,LnConstants.RE_IPL_OP_SSN2_QUERY);  m.setElement(18,LnConstants.RE_IPL_OP_SSN3_QUERY);  return m;}  }
class C{  public static void addPropertyChangeListener(PropertyChangeListener listener){synchronized (classLock) {    getLAFState().getPropertyChangeSupport(true).addPropertyChangeListener(listener);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:22.177 -0400",hash_original_method="29D3F41BECA81AA1C4387320CF05DFBE",hash_generated_method="6049AB2C31355DF9978247A64507FAFF") private synchronized void onSinkPropertyChanged(String path,String[] propValues){  if (!mBluetoothService.isEnabled()) {    return;  }  String name=propValues[0];  String address=mBluetoothService.getAddressFromObjectPath(path);  if (address == null) {    Log.e(TAG,"onSinkPropertyChanged: Address of the remote device in null");    return;  }  BluetoothDevice device=mAdapter.getRemoteDevice(address);  if (name.equals(PROPERTY_STATE)) {    int state=convertBluezSinkStringToState(propValues[1]);    log("A2DP: onSinkPropertyChanged newState is: " + state + "mPlayingA2dpDevice: "+ mPlayingA2dpDevice);    if (mAudioDevices.get(device) == null) {      addAudioSink(device);      handleSinkStateChange(device,BluetoothA2dp.STATE_DISCONNECTED,state);    } else {      if (state == BluetoothA2dp.STATE_PLAYING && mPlayingA2dpDevice == null) {        mPlayingA2dpDevice=device;        handleSinkPlayingStateChange(device,state,BluetoothA2dp.STATE_NOT_PLAYING);      } else       if (state == BluetoothA2dp.STATE_CONNECTED && mPlayingA2dpDevice != null) {        mPlayingA2dpDevice=null;        handleSinkPlayingStateChange(device,BluetoothA2dp.STATE_NOT_PLAYING,BluetoothA2dp.STATE_PLAYING);      } else {        mPlayingA2dpDevice=null;        int prevState=mAudioDevices.get(device);        handleSinkStateChange(device,prevState,state);      }    }  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private HandshakeStatus runTasks(){  Runnable runnable;  while ((runnable=sslEngine.getDelegatedTask()) != null) {    if (log.isDebugEnabled())     log.debug("Running SSL engine task: " + runnable + '.');    runnable.run();  }  if (log.isDebugEnabled())   log.debug("Finished running SSL engine tasks. HandshakeStatus: " + sslEngine.getHandshakeStatus());  return sslEngine.getHandshakeStatus();}  }
class C{  private MatsimWorldReader(final MutableScenario scenario,final World world){  this.scenario=scenario;  this.world=world;}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  int top=pos;  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if (top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || (top == pos)) {          if (DTM.NULL != pos)           endNode(pos);          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  private static ImageIcon fixGifFps(byte[] imageData) throws IOException {  final GifImage gif=GifDecoder.read(imageData);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try (ImageOutputStream output=ImageIO.createImageOutputStream(bos)){    int delay=gif.getDelay(0) * 10;    if (delay <= 10) {      delay=100;    }    GifSequenceWriter w=new GifSequenceWriter(output,gif.getFrame(0).getType(),delay,true);    for (int i=0; i < gif.getFrameCount(); i++) {      w.writeToSequence(gif.getFrame(i));    }    w.close();  }   return new ImageIcon(bos.toByteArray());}  }
class C{  public synchronized void onRingMessageReceived(TcpDiscoveryAbstractMessage msg){  assert msg != null;  Long sentTs=ringMsgsSndTs.get(msg.id());  if (sentTs != null) {    long duration=U.currentTimeMillis() - sentTs;    if (maxRingMsgTime < duration) {      maxRingMsgTime=duration;      maxRingTimeMsgCls=msg.getClass().getSimpleName();    }    if (ringMsgsSent != 0)     avgRingMsgTime=(avgRingMsgTime * (ringMsgsSent - 1) + duration) / ringMsgsSent;  }}  }
class C{  protected void readContents(){  boolean done=false;  while (!(done || err())) {    int code=read();switch (code) {case 0x2C:      readBitmap();    break;case 0x21:  code=read();switch (code) {case 0xf9:  currentFrame=new GifFrame();readGraphicControlExt();break;case 0xff:readBlock();String app="";for (int i=0; i < 11; i++) {app+=(char)block[i];}if (app.equals("NETSCAPE2.0")) {readNetscapeExt();} else {skip();}break;case 0xfe:skip();break;case 0x01:skip();break;default :skip();}break;case 0x3b:done=true;break;case 0x00:default :status=STATUS_FORMAT_ERROR;}}}  }
class C{  protected void doRetrieveMatchingFiles(String fullPattern,File dir,Set<File> result) throws IOException {  if (logger.isDebugEnabled()) {    logger.debug("Searching directory [" + dir.getAbsolutePath() + "] for files matching pattern ["+ fullPattern+ "]");  }  File[] dirContents=dir.listFiles();  if (dirContents == null) {    if (logger.isWarnEnabled()) {      logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]");    }    return;  }  for (  File content : dirContents) {    String currPath=StringUtils.replace(content.getAbsolutePath(),File.separator,"/");    if (content.isDirectory() && getPathMatcher().matchStart(fullPattern,currPath + "/")) {      if (!content.canRead()) {        if (logger.isDebugEnabled()) {          logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() + "] because the application is not allowed to read the directory");        }      } else {        doRetrieveMatchingFiles(fullPattern,content,result);      }    }    if (getPathMatcher().match(fullPattern,currPath)) {      result.add(content);    }  }}  }
class C{  private BaseWatchMeFragment openFragmentWithoutAddingBackStack(FragmentManager manager,BaseWatchMeFragment fragment,Bundle args,String name){  if (args != null) {    fragment.setArguments(args);  }  manager.beginTransaction().replace(R.id.container,fragment,name).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();  return fragment;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String role=getString(stack);  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getPeopleString(Show.getRoleForString(role));  if (Sage.rez("Artist").equals(role) || Sage.rez("Album_Artist").equals(role)) {    Album al=getAlbumObj(obj);    if (al != null)     return al.getArtist();  }  return "";}  }
class C{  public GPathResult findAll(final Closure closure){  return this;}  }
class C{  private DoubleFactor pointwiseProduct(List<DoubleFactor> factors){  if (factors.isEmpty()) {    DoubleFactor factor=new DoubleFactor();    factor.addEntry(new Assignment(),1.0,0.0);    return factor;  } else   if (factors.size() == 1) {    return factors.get(0);  }  DoubleFactor factor=factors.get(0);  factors.remove(0);  for (  DoubleFactor f : factors) {    DoubleFactor tempFactor=new DoubleFactor();    Set<String> sharedVars=new HashSet<String>(f.getVariables());    sharedVars.retainAll(factor.getVariables());    for (    Assignment a : f.getValues()) {      double[] entry=f.getEntry(a);      double prob=entry[0];      double util=entry[1];      for (      Assignment b : factor.getValues()) {        if (b.consistentWith(a,sharedVars)) {          double[] entry2=factor.getEntry(b);          double prob2=entry2[0];          double util2=entry2[1];          double product=prob * prob2;          double sum=util + util2;          tempFactor.addEntry(new Assignment(a,b),product,sum);        }      }    }    factor=tempFactor;  }  return factor;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.277 -0500",hash_original_method="7BDBB6EE44226312FBB7DF96FC7BF3DE",hash_generated_method="35A84F948084B1DD9E50B661A119CBA6") public static boolean isLetter(int codePoint){  return ((codePoint) == 1);}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.events.add(event);}  }
class C{  public StateBuilder edit(){  return new StateBuilder(this);}  }
class C{  public static void sort(int[] array){  sort(0,array.length,array);}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  protected final void sendAddLoaderEvent(){  if (_hasNewLoader && _isScanning.compareAndSet(false,true)) {    try {      while (_hasNewLoader) {        _hasNewLoader=false;        scan();        configureEnhancerEvent();        configurePostEnhancerEvent();      }    }  finally {      _isScanning.set(false);    }  }}  }
class C{  public static void escapeJsString(CharSequence s,boolean asciiOnly,boolean embeddable,Appendable out) throws IOException {  new Escaper(s,embeddable ? STRING_EMBEDDABLE_ESCAPES : STRING_MINIMAL_ESCAPES,asciiOnly ? NO_NON_ASCII : ALLOW_NON_ASCII,JS_ENCODER,out).escape();}  }
class C{  public static int compare(long[] x,long[] y){  if (x == null) {    return (y == null) ? 0 : -1;  }  if (y == null) {    return +1;  }  int p=Math.min(x.length,y.length) - 1;  for (int i=x.length - 1; i > p; i--) {    if (x[i] != 0) {      return +1;    }  }  for (int i=y.length - 1; i > p; i--) {    if (y[i] != 0) {      return -1;    }  }  for (; p >= 0; p--) {    final long xp=x[p];    final long yp=y[p];    if (xp != yp) {      if (xp < 0) {        if (yp < 0) {          return (yp < xp) ? -1 : ((yp == xp) ? 0 : 1);        } else {          return +1;        }      } else {        if (yp < 0) {          return -1;        } else {          return (xp < yp) ? -1 : ((xp == yp) ? 0 : 1);        }      }    }  }  return 0;}  }
class C{  public boolean isUnderflow(){  return this.type == TYPE_UNDERFLOW;}  }
class C{  public static void sortList(List list){  if (SystemUtils.IS_JAVA_1_7 && list instanceof CopyOnWriteArrayList) {    List tempList=new ArrayList(list);    Collections.sort(tempList);    list.clear();    list.addAll(tempList);  } else {    Collections.sort(list);  }}  }
class C{  public ScaleAndIndexes indexes(Collection<Integer> indexes){  return new ScaleAndIndexes(scale,Ints.toArray(indexes));}  }
class C{  public HistoryUpdateResponse HistoryUpdate(HistoryUpdateRequest req) throws ServiceFaultException, ServiceResultException {  return (HistoryUpdateResponse)channel.serviceRequest(req);}  }
class C{  public void test_ConstructorLjava_io_ReaderI() throws IOException {  PushbackReader tobj;  tobj=new PushbackReader(underlying,10000);  tobj=new PushbackReader(underlying,1);  try {    tobj=new PushbackReader(underlying,-1);    tobj.close();    fail("IOException not thrown.");  } catch (  IllegalArgumentException e) {  }  try {    tobj=new PushbackReader(underlying,0);    tobj.close();    fail("IOException not thrown.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.382 -0500",hash_original_method="45612293FA8EEDD0211FEABD43E17C97",hash_generated_method="3C831CA419EC7CE3748EE0A6F05278B1") static private int minPositive(int a,int b){  if (a >= 0 && b >= 0) {    return (a < b) ? a : b;  } else   if (a >= 0) {    return a;  } else   if (b >= 0) {    return b;  } else {    return -1;  }}  }
class C{  private <T>void addBinding(Class<T> type,BindingAmp<T> binding){synchronized (_bindingSetMap) {    BindingSet<T> set=(BindingSet)_bindingSetMap.get(type);    if (set == null) {      set=new BindingSet<>(type);      _bindingSetMap.put(type,set);    }    set.addBinding(binding);  }}  }
class C{  private static double snapScaleTo_10_2_5(double scaleRaw){  double pow10=Math.floor(MathUtil.log10(scaleRaw) + ROUND_ERROR_REMOVAL);  double scaleRoundedToPow10=Math.pow(10,pow10);  double scale=scaleRoundedToPow10;  if (3.5 * scaleRoundedToPow10 <= scaleRaw)   scale=5 * scaleRoundedToPow10; else   if (2 * scaleRoundedToPow10 <= scaleRaw)   scale=2 * scaleRoundedToPow10;  return scale;}  }
class C{  private boolean isCurrentDevice(RouteInfo info){  if (mCastDevice == null) {    return false;  }  CastDevice device=CastDevice.getFromBundle(info.getExtras());  if (!device.getDeviceId().equals(mCastDevice.getDeviceId())) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.583 -0500",hash_original_method="1F4F3F0FABB4A48916F6AF62043D55D9",hash_generated_method="337E6C8E38657B615A724219FD4B7A13") @Deprecated public static void markAsContacted(ContentResolver resolver,long personId){  Uri uri=ContentUris.withAppendedId(CONTENT_URI,personId);  uri=Uri.withAppendedPath(uri,"update_contact_time");  ContentValues values=new ContentValues();  values.put(LAST_TIME_CONTACTED,System.currentTimeMillis());  resolver.update(uri,values,null,null);}  }
class C{  @SuppressWarnings("deprecation") protected String writeRunPage(TestSuiteChromosome suite,Map<String,OutputVariable<?>> data){  StringBuffer sb=new StringBuffer();  String className=(String)data.get("TARGET_CLASS").getValue();  writeHTMLHeader(sb,className);  sb.append("<br><br><h2 class=title>Summary</h2>\n");  sb.append("<ul><li>Target class: ");  sb.append(getOutputVariableValue(data,"TARGET_CLASS"));  sb.append(": ");  sb.append(suite.getCoverage());  sb.append("</ul>\n");  writeResultTable(suite,sb,data);  sb.append("<div id=\"page\">\n");  sb.append("<div id=\"page-bgtop\">\n");  sb.append("<div id=\"page-bgbtm\">\n");  sb.append("<div id=\"content\">\n");  sb.append("<div id=\"post\">\n");  sb.append("<h2 class=title id=tests>Test suite</h2>\n");  sb.append("<div class=tests>\n");  int num=0;  for (  TestChromosome testChromosome : suite.getTestChromosomes()) {    TestCase test=testChromosome.getTestCase();    sb.append("<h3>Test case ");    sb.append(++num);    sb.append("</h3>\n");    sb.append("<pre class=\"prettyprint\" style=\"border: 1px solid #888;padding: 2px\">\n");    int linecount=1;    String code=null;    if (testChromosome.getLastExecutionResult() != null) {      code=test.toCode(testChromosome.getLastExecutionResult().exposeExceptionMapping());    } else     code=test.toCode();    for (    String line : code.split("\n")) {      sb.append(String.format("<span class=\"nocode\"><a name=\"%d\">%3d: </a></span>",linecount,linecount));      sb.append(StringEscapeUtils.escapeHtml4(line));      linecount++;      sb.append("\n");    }    sb.append("</pre>\n");  }  sb.append("</div>");  sb.append("<div id=\"post\">\n");  OutputVariable<?> ov_covered_lines=data.get(RuntimeVariable.Covered_Lines.name());  @SuppressWarnings("unchecked") Set<Integer> coveredLines=(ov_covered_lines != null) ? (Set<Integer>)ov_covered_lines.getValue() : new HashSet<Integer>();  try {    Iterable<String> source=html_analyzer.getClassContent(className);    sb.append("<h2 class=title id=source>Source Code</h2>\n");    sb.append("<div class=source>\n");    sb.append("<p>");    sb.append("<pre class=\"prettyprint\" style=\"border: 1px solid #888;padding: 2px\">");    int linecount=1;    for (    String line : source) {      sb.append(String.format("<span class=\"nocode\"><a name=\"%d\">%3d: </a></span>",linecount,linecount));      if (coveredLines.contains(linecount)) {        sb.append("<span style=\"background-color: #ffffcc\">");        sb.append(StringEscapeUtils.escapeHtml4(line));        sb.append("</span>");      } else       sb.append(StringEscapeUtils.escapeHtml4(line));      sb.append("\n");      linecount++;    }    sb.append("</pre>\n");    sb.append("</p>\n");  } catch (  Exception e) {  }  sb.append("</div>\n");  sb.append("<div id=\"post\">\n");  writeParameterTable(sb,data);  sb.append("</div>\n");  sb.append("<p><br><a href=\"../report-generation.html\">Back to Overview</a></p>\n");  writeHTMLFooter(sb);  String filename="report-" + className + "-"+ getNumber(className)+ ".html";  File file=new File(getReportDir().getAbsolutePath() + "/html/" + filename);  FileIOUtils.writeFile(sb.toString(),file);  return filename;}  }
class C{  public ProfilerEntity start(){  start_time=System.nanoTime();  return this;}  }
