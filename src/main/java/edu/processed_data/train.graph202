class C{  public int spaceRemaining(Address addr){  int nextIndex=getIndex(addr) + 1;  Address nextTile=start_.plus(blockSize_ * (nextIndex - firstIndex_));  return nextTile.diff(addr).toInt();}  }
class C{  public boolean isSetBig_numbers(){  return this.big_numbers != null;}  }
class C{  public Node<K,V> first(){  Node<K,V> node=this;  Node<K,V> child=node.left;  while (child != null) {    node=child;    child=node.left;  }  return node;}  }
class C{  public VirtualArrayRestRep update(URI id,VirtualArrayUpdateParam input){  return client.put(VirtualArrayRestRep.class,input,getIdUrl(),id);}  }
class C{  @Override public int pointToPosition(int x,int y){  Rect frame=mTouchFrame;  if (frame == null) {    mTouchFrame=new Rect();    frame=mTouchFrame;  }  final int count=getChildCount();  for (int i=count - 1; i >= 0; i--) {    View child=getChildAt(i);    if (child.getVisibility() == VISIBLE) {      child.getHitRect(frame);      if (frame.contains(x,y)) {        if (isScrollCycle()) {          return (mFirstPosition + i) % mItemCount;        } else {          return (mFirstPosition + i);        }      }    }  }  return INVALID_POSITION;}  }
class C{  public static <T extends singleDetailPost>void routeSinglePage(final String route,final Context ctx,final Class<T> clazz){  Intent n=new Intent(ctx,clazz);  final Bundle b=new Bundle();  b.putInt(singleDetailPost.Method,singleDetailPost.REQUEST_METHOD_FULL_URL);  b.putString(singleDetailPost.requestURL,route);  n.putExtras(b);  ctx.startActivity(n);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.193 -0500",hash_original_method="6FB81CDE896F299C5469DD3DD94C1A99",hash_generated_method="AE86503EE478594407DCB62B69CED5D7") synchronized void updateNfcService(NfcActivityState state){  boolean serviceCallbackNeeded=state.ndefMessageCallback != null || state.onNdefPushCompleteCallback != null;  try {    NfcAdapter.sService.setForegroundNdefPush(state.resumed ? state.ndefMessage : null,state.resumed && serviceCallbackNeeded ? this : null);  } catch (  RemoteException e) {    mAdapter.attemptDeadServiceRecovery(e);  }}  }
class C{  public boolean containsType(GasStack stack){  if (stack == null || stack.amount == 0) {    return false;  }  return stack.isGasEqual(leftGas) || stack.isGasEqual(rightGas);}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public boolean acceptsURL(String url) throws SQLException {  Driver d=getUnderlyingDriver(url);  if (d != null) {    lastUnderlyingDriverRequested=d;    return true;  } else {    return false;  }}  }
class C{  public static void showInfo(Context context,CharSequence msg){  AlertDialog dlg=newDlg(context);  dlg.setIcon(android.R.drawable.ic_dialog_info);  dlg.setTitle(R.string.afc_title_info);  dlg.setMessage(msg);  dlg.show();}  }
class C{  public static void deleteProject(String projectName) throws CoreException {  deleteProject(projectName,true);}  }
class C{  public void addItemSet(Collection<Item> itemSet,Map<Item,Header> headerTable,int weight){  Iterator<Item> iterator=itemSet.iterator();  if (iterator.hasNext()) {    Item firstItem=iterator.next();    FPTreeNode childNode;    if (!children.containsKey(firstItem)) {      childNode=createChildNode(firstItem);      children.put(firstItem,childNode);      if (!headerTable.containsKey(firstItem)) {        headerTable.put(firstItem,new Header());      }      headerTable.get(firstItem).addSibling(childNode);    } else {      childNode=children.get(firstItem);    }    headerTable.get(firstItem).frequencies.increaseFrequency(0,weight);    childNode.increaseFrequency(0,weight);    itemSet.remove(firstItem);    childNode.addItemSet(itemSet,headerTable,weight);  }}  }
class C{  protected void sortColors(){  ColorTable ct=null;  boolean indexed=false;  for (  Command c : commandList) {    if (c instanceof ColorSelectionMode) {      if (((ColorSelectionMode)c).selectionMode == 0) {        indexed=true;      }    } else     if (c instanceof ColorTable) {      ct=(ColorTable)c;    } else     if (c instanceof ColorModel) {      logger.fine("Not handling other colormodels than rgb (indexed and direct)");    }  }  if (indexed && ct != null) {    for (    Command c : commandList) {      if (c instanceof ColorCommand) {        ((ColorCommand)c).setColorFromColorTable(ct);      }    }  }}  }
class C{  public boolean isHasVariables(){  return hasVariables;}  }
class C{  public byte[] readPersistentBytes(String key){  try {    if (checkService()) {      return sService.readPersistentBytes(key);    }  } catch (  RemoteException e) {  }  return null;}  }
class C{  public static final String digitsAndPlusOnly(Matcher matcher){  StringBuilder buffer=new StringBuilder();  String matchingRegion=matcher.group();  for (int i=0, size=matchingRegion.length(); i < size; i++) {    char character=matchingRegion.charAt(i);    if (character == '+' || Character.isDigit(character)) {      buffer.append(character);    }  }  return buffer.toString();}  }
class C{  public EntityView(RenderLayer layer){  setRenderLayer(layer);}  }
class C{  public FeatureDescriptor(){}  }
class C{  public void addImplicitArray(final Class<?> ownerType,final String fieldName,final String itemName){  addImplicitCollection(ownerType,fieldName,itemName,null);}  }
class C{  public MultiServer(int tcpPort,int udpPort){  this.tcpPort=tcpPort;  this.udpPort=udpPort;  tcpThread.setDaemon(true);  udpThread.setDaemon(true);}  }
class C{  public boolean isProjected(){  return projected;}  }
class C{  public int bytesLeft(){  return limit - position;}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  public UsersMultiSelectTable(int contextId){  super();  loadUsersManagementExtension();  this.setTableHeader(null);  reloadUsers(contextId);  this.getColumnModel().getColumn(0).setMaxWidth(40);}  }
class C{  public void updateNonceParameters(){  if (mNextNonce.equals(mNonce)) {    mCnonceCounter++;  } else {    mCnonceCounter=1;    mNonce=mNextNonce;  }}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void incEventsExceedingAlertThreshold(){  this.stats.incInt(eventsExceedingAlertThresholdId,1);}  }
class C{  public void removeListener(ListChangeListener<Waypoint> l){  observableDelegate.removeListener(l);}  }
class C{  public ReilInstruction(final IAddress address,final String mnemonic,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  Preconditions.checkNotNull(mnemonic,"Argument mnemonic can't be null");  this.mnemonic=ReilHelpers.MnemonicToMnemonicCode(mnemonic);  this.firstOperand=Preconditions.checkNotNull(firstOperand);  this.secondOperand=Preconditions.checkNotNull(secondOperand);  this.thirdOperand=Preconditions.checkNotNull(thirdOperand);  this.address=address;}  }
class C{  public static String formatUTC(final Date date,final String pattern){  return format(date,pattern,UTC_TIME_ZONE,null);}  }
class C{  public Individual newIndividual(final EvolutionState state,final LineNumberReader reader) throws IOException {  Individual newind=(Individual)(i_prototype.clone());  newind.fitness=(Fitness)(f_prototype.clone());  newind.evaluated=false;  newind.readIndividual(state,reader);  newind.species=this;  return newind;}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedChild;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);  oldChild=elementNode.getFirstChild();{    boolean success=false;    try {      replacedChild=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @SuppressWarnings("unchecked") @Test public void testStepBreakpointLifecycle() throws DebugExceptionWrapper {  mockDebugger.connect();  final TargetProcessThread thread=new TargetProcessThread(0,ThreadState.RUNNING);  mockDebugger.getProcessManager().addThread(thread);  mockDebugger.getBreakpointManager().addBreakpoints(BreakpointType.STEP,CommonTestObjects.BP_ADDRESS_123_SET);  mockDebugger.getBreakpointManager().addBreakpoints(BreakpointType.STEP,CommonTestObjects.BP_ADDRESS_456_SET);  debuggerSynchronizer.receivedEvent(new StepBreakpointSetReply(0,0,Lists.newArrayList(new Pair<RelocatedAddress,Integer>(CommonTestObjects.BP_ADDRESS_123_RELOC,0),new Pair<RelocatedAddress,Integer>(CommonTestObjects.BP_ADDRESS_456_RELOC,0))));  assertEquals(BreakpointStatus.BREAKPOINT_ACTIVE,mockDebugger.getBreakpointManager().getBreakpointStatus(CommonTestObjects.BP_ADDRESS_123,BreakpointType.STEP));  assertEquals(BreakpointStatus.BREAKPOINT_ACTIVE,mockDebugger.getBreakpointManager().getBreakpointStatus(CommonTestObjects.BP_ADDRESS_456,BreakpointType.STEP));  final RegisterValues registerValues=new RegisterValues(Lists.<ThreadRegisters>newArrayList(new ThreadRegisters(0,Lists.newArrayList(new RegisterValue("esp",BigInteger.valueOf(0x123),new byte[0],true,false)))));  debuggerSynchronizer.receivedEvent(new StepBreakpointHitReply(0,0,0,registerValues));  listener.toString();  assertTrue(Iterables.isEmpty(mockDebugger.getBreakpointManager().getBreakpoints(BreakpointType.STEP)));  assertEquals(thread,mockDebugger.getProcessManager().getActiveThread());  assertEquals(0x123,thread.getCurrentAddress().getAddress().toLong());}  }
class C{  private void showArrow(int whichArrow,int requestedX){  final View showArrow=(whichArrow == R.id.arrow_up) ? mArrowUp : mArrowDown;  final View hideArrow=(whichArrow == R.id.arrow_up) ? mArrowDown : mArrowUp;  final int arrowWidth=mArrowUp.getMeasuredWidth();  showArrow.setVisibility(View.VISIBLE);  ViewGroup.MarginLayoutParams param=(ViewGroup.MarginLayoutParams)showArrow.getLayoutParams();  param.leftMargin=requestedX - arrowWidth / 2;  hideArrow.setVisibility(View.INVISIBLE);}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(FR,0,FRE,0);  for (int n=0; n < blockSize; n++) {    out[outOff + n]=encryptByte(in[inOff + n],n);  }  for (int n=0; n < blockSize; n++) {    FR[n]=out[outOff + n];  }  return blockSize;}  }
class C{  public static int findNonwhitespaceCharacter(String s,int index){  int sLength=s.length();  while (index < sLength && Character.isWhitespace(s.charAt(index))) {    index++;  }  return index;}  }
class C{  public LinuxDVBCaptureManager(){  sage.Native.loadLibrary("DVBCapture");  prefs=MMC.MMC_KEY + '/';  mmc=MMC.getInstance();  encoderMap=new java.util.LinkedHashMap();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.RETURN_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public float decodeNormValue(long norm){  return NORM_TABLE[(int)(norm & 0xFF)];}  }
class C{  @OnWebSocketConnect public void onConnect(Session session){  this.session=session;  sendUpdate(this.session,"webtrends","stream-type","stream-query","stream-version","schema-version");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void refreshProfileThumbnail(){  mThumbnailImageView.setImageResource(R.drawable.ic_contact_picture_holo_light);  if (mMember.avatarUrl != null) {    int size=getResources().getDimensionPixelSize(R.dimen.profile_avatar_size);    Matrix.getInstance(this).getMediasCache().loadAvatarThumbnail(mSession.getHomeserverConfig(),mThumbnailImageView,mMember.avatarUrl,size);  }}  }
class C{  @SuppressWarnings("deprecation") public static void writeBinaryTestMatrixCells(String file,double[][] matrix){  try {    SequenceFile.Writer writer=new SequenceFile.Writer(FileSystem.get(conf),conf,new Path(file),MatrixIndexes.class,MatrixCell.class);    MatrixIndexes index=new MatrixIndexes();    MatrixCell value=new MatrixCell();    for (int i=0; i < matrix.length; i++) {      for (int j=0; j < matrix[i].length; j++) {        if (matrix[i][j] != 0) {          index.setIndexes((i + 1),(j + 1));          value.setValue(matrix[i][j]);          writer.append(index,value);        }      }    }    writer.close();  } catch (  IOException e) {    e.printStackTrace();    fail("unable to write test matrix: " + e.getMessage());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.179 -0500",hash_original_method="24C81F8B6EECD0B079C96068F78E52B2",hash_generated_method="3730F798B721721ED3FEB273772DED6C") public synchronized int failureCount(){  return fFailures.size();}  }
class C{  public Message(){  this(new Header());}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public void writeSkyLight(ByteBuf output){  output.writeBytes(skyLight.getHandle());}  }
class C{  public LongMap(int initialCapacity){  this(initialCapacity,0.8f);}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.763 -0500",hash_original_method="6EC728E52174DF43F39F15D376B96D59",hash_generated_method="741763FA91FB3B125F4D311FC2F6B63E") public void updateSelection(View view,int selStart,int selEnd,int candidatesStart,int candidatesEnd){  checkFocus();synchronized (mH) {    if ((mServedView != view && (mServedView == null || !mServedView.checkInputConnectionProxy(view))) || mCurrentTextBoxAttribute == null || mCurMethod == null) {      return;    }    if (mCursorSelStart != selStart || mCursorSelEnd != selEnd || mCursorCandStart != candidatesStart || mCursorCandEnd != candidatesEnd) {      if (DEBUG)       Log.d(TAG,"updateSelection");      try {        if (DEBUG)         Log.v(TAG,"SELECTION CHANGE: " + mCurMethod);        mCurMethod.updateSelection(mCursorSelStart,mCursorSelEnd,selStart,selEnd,candidatesStart,candidatesEnd);        mCursorSelStart=selStart;        mCursorSelEnd=selEnd;        mCursorCandStart=candidatesStart;        mCursorCandEnd=candidatesEnd;      } catch (      RemoteException e) {        Log.w(TAG,"IME died: " + mCurId,e);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void initialize(){  funcPlotterCtrl.setFunction((Function<Double,Double>)simPaneCtrl.getParamValue(PARAM_FUNC_SELECT));}  }
class C{  public InvalidCredentialsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void play(Episode episode,boolean playImmediately){  Timber.d("Play called");  if (mMediaPlayer == null) {    mMediaPlayer=new LocalMediaPlayer(this,this,this);  }switch (mMediaPlayerState) {case MediaPlayerState.STATE_CONNECTING:case MediaPlayerState.STATE_PLAYING:case MediaPlayerState.STATE_PAUSED:    if (episode != null) {      endUpdateTask();      endPlayback(false);      startPlayback(episode,playImmediately);    } else     if (mMediaPlayerState == MediaPlayerState.STATE_PAUSED) {      mMediaPlayer.resumePlayback();    } else {      Timber.w("Player is playing, episode cannot be null");    }  break;case MediaPlayerState.STATE_ENDED:case MediaPlayerState.STATE_IDLE:if (episode != null) {  startPlayback(episode,playImmediately);} else {  Timber.w("Player is stopped/uninitialized, episode cannot be null");}break;default :Timber.w("Trying to play an episode, but player is in state: %s",mPlaybackState);break;}}  }
class C{  public void testConstrBigIntegerScaleMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=4;  BigDecimal result=new BigDecimal(bA,aScale,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private boolean isCssPartition(ITextRegion textRegion,int offset){  if (CSS_DISALLOWED_TYPES.contains(textRegion.getType())) {    return false;  }  IStructuredDocumentRegion region=fStructuredDocument.getRegionAtCharacterOffset(offset);  IStructuredDocumentRegion tagOpenRegion=SseUtilities.findStructuredDocumentRegion(OPEN_TYPES,CLOSED_TYPES,region,false);  if (tagOpenRegion == null) {    return false;  }  return isStyleElement(tagOpenRegion);}  }
class C{  public AdaptiveMultimethodVariation(Population archive){  this.archive=archive;  operators=new ArrayList<Variation>();}  }
class C{  public boolean isDown(){  if (mLocalPath != null && mLocalPath.length() > 0) {    File file=new File(mLocalPath);    return (file.exists());  }  return false;}  }
class C{  public IMouseState createEdgeLabelExitState(final EdgeLabel l,final MouseEvent event){  final CEdgeLabelExitState<NodeType,EdgeType> state=new CEdgeLabelExitState<NodeType,EdgeType>(this,m_graph,l);  m_factory.createEdgeLabelExitAction().execute(state,event);  return state;}  }
class C{  public TeXIcon createTeXIcon(int style,float size){  return new TeXIconBuilder().setStyle(style).setSize(size).build();}  }
class C{  protected void fireFigureAdded(Figure f,int zIndex){  CompositeFigureEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CompositeFigureListener.class) {      if (event == null) {        event=new CompositeFigureEvent(this,f,f.getDrawingArea(),zIndex);      }      ((CompositeFigureListener)listeners[i + 1]).figureAdded(event);    }  }}  }
class C{  protected AccessibleState(String key){  this.key=key;}  }
class C{  public ResultSetTableCellRenderer(Color missingColor,Color missingColorSelected){  super();  this.missingColor=missingColor;  this.missingColorSelected=missingColorSelected;}  }
class C{  public static void put(DataService dm,String cacheKey,long timestamp,Object report){  removeOldEntries(dm);  byte[] serializedReport=serializeObject(report);  if (serializedReport == null) {    return;  }  if (serializedReport.length == 0) {    return;  }  ReportResultCache result=new ReportResultCache();  result.setReport(serializedReport);  result.setCachekey(cacheKey);  result.setTimestamp(new Date(timestamp));  try {    dm.persist(result);  } catch (  NonUniqueBusinessKeyException e) {    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);  }}  }
class C{  private void localPacket(byte[] data,int len) throws IOException {  localTcp.notifyPacket(data,len);  updateLocalClock();}  }
class C{  public static void e(String tag,String s,Object... args){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,String.format(s,args));}  }
class C{  private static String checkAndReplaceCode(final String searchFor,final String replaceWith,String script){  final int index=script.indexOf(searchFor);  if (index != -1) {    final StringBuilder buf=new StringBuilder(script.length());    buf.append(script.substring(0,index));    buf.append(replaceWith);    buf.append(checkAndReplaceCode(searchFor,replaceWith,script.substring(index + searchFor.length(),script.length())));    script=buf.toString();  }  return script;}  }
class C{  public boolean isInfo(){  return fSeverity == RefactoringStatus.INFO;}  }
class C{  public static RecordableBourneEvent convertToRecordableBourneEvent(DataObject resource,String type,String description,String extensions,DbClient dbClient,String evtServiceType,String recordType,String eventServiceSource){  URI cos=null;  URI id=null;  String nativeGuid=null;  URI projectURI=null;  URI tenantURI=null;  RecordableBourneEvent event=null;  if (resource != null) {    if (resource instanceof Volume) {      Volume volume=(Volume)resource;      cos=volume.getVirtualPool();      id=volume.getId();      nativeGuid=volume.getNativeGuid();      projectURI=volume.getProject().getURI();      tenantURI=volume.getTenant().getURI();    } else     if (resource instanceof FileShare) {      FileShare fs=(FileShare)resource;      cos=fs.getVirtualPool();      id=fs.getId();      nativeGuid=fs.getNativeGuid();      projectURI=(fs.getProject() != null) ? fs.getProject().getURI() : null;      tenantURI=(fs.getTenant() != null) ? fs.getTenant().getURI() : null;    } else     if (resource instanceof VplexMirror) {      VplexMirror vplexMirror=(VplexMirror)resource;      cos=vplexMirror.getVirtualPool();      id=vplexMirror.getId();      projectURI=vplexMirror.getProject().getURI();      tenantURI=vplexMirror.getTenant().getURI();    } else     if (resource instanceof BlockSnapshot) {      BlockSnapshot snapshot=(BlockSnapshot)resource;      try {        if (!NullColumnValueGetter.isNullNamedURI(snapshot.getParent())) {          Volume volume=dbClient.queryObject(Volume.class,snapshot.getParent());          cos=volume.getVirtualPool();          tenantURI=(volume.getTenant() != null) ? volume.getTenant().getURI() : null;        }        id=snapshot.getId();        nativeGuid=snapshot.getNativeGuid();        projectURI=snapshot.getProject().getURI();      } catch (      DatabaseException e) {        s_logger.error("Exception caught",e);      }    } else     if (resource instanceof BlockSnapshotSession) {      BlockSnapshotSession session=(BlockSnapshotSession)resource;      try {        id=session.getId();        projectURI=session.getProject().getURI();      } catch (      DatabaseException e) {        s_logger.error("Exception caught",e);      }    } else     if (resource instanceof ExportGroup) {      ExportGroup exportGroup=(ExportGroup)resource;      try {        id=exportGroup.getId();        projectURI=exportGroup.getProject().getURI();        tenantURI=(exportGroup.getTenant() != null) ? exportGroup.getTenant().getURI() : null;      } catch (      Exception e) {        s_logger.error("Exception caught",e);      }    } else     if (resource instanceof FCZoneReference) {      FCZoneReference zone=(FCZoneReference)resource;      try {        id=zone.getId();      } catch (      Exception e) {        s_logger.error("Exception caught",e);      }    } else     if (resource instanceof Network) {      Network tz=(Network)resource;      id=tz.getId();      nativeGuid=tz.getNativeGuid();    } else     if (resource instanceof BlockConsistencyGroup) {      BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)resource;      try {        id=consistencyGroup.getId();        projectURI=consistencyGroup.getProject().getURI();        tenantURI=(consistencyGroup.getTenant() != null) ? consistencyGroup.getTenant().getURI() : null;      } catch (      Exception e) {        s_logger.error("Exception caught",e);      }    } else     if (resource instanceof StoragePool) {      StoragePool sp=(StoragePool)resource;      id=sp.getId();      nativeGuid=sp.getNativeGuid();    } else {      s_logger.info("Error getting vpool,id,NativeGuid for event. Unexpected resource type {}.",resource.getClass().getName());    }    if (tenantURI == null && projectURI != null) {      tenantURI=ControllerUtils.getProjectTenantOrgURI(dbClient,projectURI);    }    event=new RecordableBourneEvent(type,tenantURI,URI.create("ViPR-User"),projectURI,cos,evtServiceType,id,description,System.currentTimeMillis(),extensions,nativeGuid,recordType,eventServiceSource,"","");  }  return event;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.499 -0500",hash_original_method="1C9F40C92EDF6ED97BB2D87B31D06D96",hash_generated_method="20CA82C52FF6FF6318BA96E52A574212") public void removeDisplayName(){  displayName=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.846 -0500",hash_original_method="665CD76EA1DF7ECA95D5C037ABED8C02",hash_generated_method="9684B6B8C49EDC9870A0E10E55BB4075") public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  public static void deleteImage(final IdocApplet ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().remove(ele.getImageSelectIndex());  ele.setImageSelectIndex(0);}  }
class C{  @SuppressWarnings("unused") @Test public void testInherited(){  Subclass2 s=new Subclass2();  testConstantReturn("runInherited",1);}  }
class C{  private String replaceInstructionStringWithTransMap(String inst,HashMap<Byte,Byte> transMap){  if (inst == null || inst.isEmpty() || transMap.isEmpty())   return inst;  String[] pinst=inst.split(Lop.INSTRUCTION_DELIMITOR);  StringBuilder instOut=new StringBuilder();  for (  String lpinst : pinst) {    String[] parts=InstructionUtils.getInstructionPartsWithValueType(lpinst);    for (int i=0; i < parts.length; i++) {      String lpart=parts[i];      int pos=lpart.indexOf(Instruction.DATATYPE_PREFIX + DataType.MATRIX.toString());      if (pos > 0) {        String index=lpart.substring(0,pos);        String newindex=String.valueOf(transMap.get(Byte.parseByte(index)));        parts[i]=newindex + lpart.substring(pos);      }    }    if (instOut.length() > 0)     instOut.append(Lop.INSTRUCTION_DELIMITOR);    instOut.append("MR");    for (    String lpart : parts) {      instOut.append(Lop.OPERAND_DELIMITOR);      instOut.append(lpart);    }  }  return instOut.toString();}  }
class C{  @Override public void flush() throws XMLStreamException {  try {    log.log(Level.FINE,"flush()");    if (encoded) {      this.stream.flush();    }  } catch (  IOException e) {    throw new XMLStreamException("Error flushing the stream",e);  }}  }
class C{  public synchronized void shutdown(){  if (server != null) {    try {      server.shutdown();      LOGGER.info("Stopped Kafka server {} at {}",brokerId,getConnection());    }  finally {      server=null;      port=desiredPort;    }  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public Register(final RegisterValue register){  m_register=register;}  }
class C{  public static int createIpAddress(byte[] address,char[] buffer){  if (isIpv4(address)) {    return createIpv4Address(address,0,buffer,0);  }  int offset=0;  boolean isZeroCompress=false;  boolean isInZeroCompress=false;  buffer[offset++]='[';  for (int i=0; i < 16; i+=2) {    int value=(address[i] & 0xff) * 256 + (address[i + 1] & 0xff);    if (value == 0 && i != 14) {      if (isInZeroCompress)       continue; else       if (!isZeroCompress) {        isZeroCompress=true;        isInZeroCompress=true;        continue;      }    }    if (isInZeroCompress) {      isInZeroCompress=false;      buffer[offset++]=':';      buffer[offset++]=':';    } else     if (i != 0) {      buffer[offset++]=':';    }    if (value == 0) {      buffer[offset++]='0';      continue;    }    offset=writeHexDigit(buffer,offset,value >> 12);    offset=writeHexDigit(buffer,offset,value >> 8);    offset=writeHexDigit(buffer,offset,value >> 4);    offset=writeHexDigit(buffer,offset,value);  }  buffer[offset++]=']';  return offset;}  }
class C{  static GeoCircle fromDistance(final double latitude,final double longitude,final double radiusMeters){  GeoUtils.checkLatitude(latitude);  GeoUtils.checkLongitude(longitude);  return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,fromDegrees(latitude),fromDegrees(longitude),fromMeters(radiusMeters));}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  Graphics2D g2d=(Graphics2D)g;  Composite originalComposite=null;  if (getAlpha() < 1.0f) {    originalComposite=g2d.getComposite();    g2d.setComposite(getAlphaComposite());  }  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Paint paint=getPaint();    if (paint == null)     g2d.setColor(c.getSelectionColor()); else     g2d.setPaint(paint);    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      g2d.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      g2d.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g2d.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      g2d.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {    e.printStackTrace();  } finally {    if (getAlpha() < 1.0f)     g2d.setComposite(originalComposite);  }}  }
class C{  public void putSet(DerValue[] set) throws IOException {  DerOutputStream bytes=new DerOutputStream();  int i;  for (i=0; i < set.length; i++)   set[i].encode(bytes);  write(DerValue.tag_Set,bytes);}  }
class C{  private static InetAddress decodeIpv6(String input,int pos,int limit){  byte[] address=new byte[16];  int b=0;  int compress=-1;  int groupOffset=-1;  for (int i=pos; i < limit; ) {    if (b == address.length)     return null;    if (i + 2 <= limit && input.regionMatches(i,"::",0,2)) {      if (compress != -1)       return null;      i+=2;      b+=2;      compress=b;      if (i == limit)       break;    } else     if (b != 0) {      if (input.regionMatches(i,":",0,1)) {        i++;      } else       if (input.regionMatches(i,".",0,1)) {        if (!decodeIpv4Suffix(input,groupOffset,limit,address,b - 2))         return null;        b+=2;        break;      } else {        return null;      }    }    int value=0;    groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      int hexDigit=decodeHexDigit(c);      if (hexDigit == -1)       break;      value=(value << 4) + hexDigit;    }    int groupLength=i - groupOffset;    if (groupLength == 0 || groupLength > 4)     return null;    address[b++]=(byte)((value >>> 8) & 0xff);    address[b++]=(byte)(value & 0xff);  }  if (b != address.length) {    if (compress == -1)     return null;    System.arraycopy(address,compress,address,address.length - (b - compress),b - compress);    Arrays.fill(address,compress,compress + (address.length - b),(byte)0);  }  try {    return InetAddress.getByAddress(address);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public CreateIndexRequest(String index,Settings settings){  this.index=index;  this.settings=settings;}  }
class C{  void addRefactoringDescriptor(final RefactoringDescriptor descriptor,final boolean sort,final IProgressMonitor monitor) throws CoreException {  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_updating_history,18);    final long stamp=descriptor.getTimeStamp();    if (stamp >= 0) {      final IPath path=stampToPath(stamp);      final IFileStore folder=fHistoryStore.getFileStore(path);      final IFileStore history=folder.getChild(RefactoringHistoryService.NAME_HISTORY_FILE);      final IFileStore index=folder.getChild(RefactoringHistoryService.NAME_INDEX_FILE);      final RefactoringDescriptorProxy[] proxies=new RefactoringDescriptorProxy[]{new DefaultRefactoringDescriptorProxy(descriptor.getDescription(),descriptor.getProject(),descriptor.getTimeStamp())};      if (history.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists()) {        InputStream input=null;        try {          input=new BufferedInputStream(history.openInputStream(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));          final Document document=getCachedDocument(path,input);          try {            input.close();            input=null;          } catch (          IOException exception) {          }          monitor.worked(1);          final Document result=transformDescriptor(descriptor,false);          if (result != null) {            boolean found=false;            final NodeList list=result.getElementsByTagName(IRefactoringSerializationConstants.ELEMENT_REFACTORING);            final Element root=document.getDocumentElement();            if (sort) {              final String string=Long.toString(stamp);              for (int offset=0; offset < list.getLength(); offset++) {                final Element element=(Element)list.item(offset);                final String attribute=element.getAttribute(IRefactoringSerializationConstants.ATTRIBUTE_STAMP);                if (attribute != null) {                  if (string.compareTo(attribute) > 0) {                    root.insertBefore(document.importNode(element,true),element);                    found=true;                    break;                  }                }              }            }            if (!found)             root.appendChild(document.importNode(list.item(0),true));            writeHistoryEntry(history,document,new SubProgressMonitor(monitor,10,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),RefactoringCoreMessages.RefactoringHistoryService_updating_history);            if (sort) {              final Set set=new HashSet(64);              readRefactoringDescriptorProxies(index,null,set,0,Long.MAX_VALUE,new SubProgressMonitor(monitor,2),RefactoringCoreMessages.RefactoringHistoryService_updating_history);              writeIndexEntry(index,(RefactoringDescriptorProxy[])set.toArray(new RefactoringDescriptorProxy[set.size()]),EFS.NONE,new SubProgressMonitor(monitor,3,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),RefactoringCoreMessages.RefactoringHistoryService_updating_history);            } else             writeIndexEntry(index,proxies,EFS.APPEND,new SubProgressMonitor(monitor,5,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),RefactoringCoreMessages.RefactoringHistoryService_updating_history);          }        } catch (        ParserConfigurationException exception) {          throw createCoreException(exception);        }catch (        IOException exception) {          throw createCoreException(exception);        }catch (        SAXException exception) {          throw createCoreException(exception);        } finally {          if (input != null) {            try {              input.close();            } catch (            IOException exception) {            }          }        }      } else {        try {          final Document result=transformDescriptor(descriptor,false);          writeHistoryEntry(history,result,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),RefactoringCoreMessages.RefactoringHistoryService_updating_history);          writeIndexEntry(index,proxies,EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),RefactoringCoreMessages.RefactoringHistoryService_updating_history);        } catch (        IOException exception) {          throw createCoreException(exception);        }      }    }  }  finally {    monitor.done();  }}  }
class C{  public boolean isTextVisible(){  return fTextVisible;}  }
class C{  @Override protected void doInitializeFilters(){  Vector<String> filters=GenericObjectEditor.getClassnames(FileBasedEvaluationStatisticsExporter.class.getName());  m_FileFilters=new ArrayList<>();  for (  String filter : filters) {    try {      FileBasedEvaluationStatisticsExporter handler=(FileBasedEvaluationStatisticsExporter)Utils.forName(FileBasedEvaluationStatisticsExporter.class,filter,new String[0]);      m_FileFilters.add(new ExtensionFileFilterWithClass(handler.getFormatExtensions(),handler.getFormatDescription() + " (" + ObjectUtils.flatten(handler.getFormatExtensions(),", ")+ ")",filter));    } catch (    Exception e) {      System.err.println("Failed to instantiate file filter: " + filter);      e.printStackTrace();    }  }}  }
class C{  protected void mergeProducer(Producer inner,Producer outer){  if (log.isLoggable(Level.FINEST)) {    log.finest("Merging Producer = " + inner + " into Producer = "+ outer);  }  if (log.isLoggable(Level.FINEST)) {    log.finest("Merging Producers: replacing correlation ids (" + outer.getCorrelationIds() + ") with ("+ inner.getCorrelationIds()+ ")");  }  outer.setCorrelationIds(inner.getCorrelationIds());  outer.getNodes().remove(inner);}  }
class C{  public final void testSetErrorMessageWithCharSequenceParameter(){  CharSequence errorMessage="errorMessage";  AbstractValidatorImplementation abstractValidator=new AbstractValidatorImplementation("foo");  abstractValidator.setErrorMessage(errorMessage);  assertEquals(errorMessage,abstractValidator.getErrorMessage());}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  @Override public Set<String> keySet(){  final THashSet<String> keys=new THashSet<>();  for (int i=0; i < contents.length; i+=2) {    keys.add(contents[i]);  }  return keys;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  LOG.i(TAG,"Apache Cordova native platform version " + CordovaWebView.CORDOVA_VERSION + " is starting");  LOG.d(TAG,"CordovaActivity.onCreate()");  loadConfig();  if (!preferences.getBoolean("ShowTitle",false)) {    getWindow().requestFeature(Window.FEATURE_NO_TITLE);  }  if (preferences.getBoolean("SetFullscreen",false)) {    Log.d(TAG,"The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.");    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else   if (preferences.getBoolean("Fullscreen",false)) {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);  }  super.onCreate(savedInstanceState);  cordovaInterface=makeCordovaInterface();  if (savedInstanceState != null) {    cordovaInterface.restoreInstanceState(savedInstanceState);  }}  }
class C{  protected String normalize(String s){  StringBuffer str=new StringBuffer();  int len=(s != null) ? s.length() : 0;  for (int i=0; i < len; i++) {    char ch=s.charAt(i);switch (ch) {case '<':{        str.append("&lt;");        break;      }case '>':{      str.append("&gt;");      break;    }case '&':{    str.append("&amp;");    break;  }case '"':{  str.append("&quot;");  break;}case '\r':case '\n':{if (m_canonical) {  str.append("&#");  str.append(Integer.toString(ch));  str.append(';');  break;}}default :{str.append(ch);}}}return (str.toString());}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      final String key=hashKeyForDisk(data);      OutputStream out=null;      try {        DiskLruCache.Snapshot snapshot=mDiskLruCache.get(key);        if (snapshot == null) {          final DiskLruCache.Editor editor=mDiskLruCache.edit(key);          if (editor != null) {            out=editor.newOutputStream(DISK_CACHE_INDEX);            value.getBitmap().compress(mCacheParams.compressFormat,mCacheParams.compressQuality,out);            editor.commit();            out.close();          }        } else {          snapshot.getInputStream(DISK_CACHE_INDEX).close();        }      } catch (      final IOException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }catch (      Exception e) {        Log.e(TAG,"addBitmapToCache - " + e);      } finally {        try {          if (out != null) {            out.close();          }        } catch (        IOException e) {        }      }    }  }}  }
class C{  public static String randomString(String source,int length){  return StringUtils.isEmpty(source) ? null : randomString(source.toCharArray(),length);}  }
class C{  public String toString(){  return new String(buf,0,count);}  }
class C{  public static double distanceToNearestSolution(Problem problem,Solution solution,NondominatedPopulation population){  double minimum=Double.POSITIVE_INFINITY;  for (int i=0; i < population.size(); i++) {    minimum=Math.min(minimum,euclideanDistance(problem,solution,population.get(i)));  }  return minimum;}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Mx1Message(int len,boolean protocol){  super(len);  this.protocol=protocol;  if (!protocol) {    if (len > 15 || len < 0) {      log.error("Invalid length in ctor: " + len);    }  }}  }
class C{  @Override public final void deleteSource(ISource source) throws AdeException {  m_dictionary.delete(source.getSourceInternalId());}  }
class C{  public ServerNativeException(ServerNativeException other){  if (other.isSetMsg()) {    this.msg=other.msg;  }}  }
class C{  public static long parseHexLong(String x){  try {    if (x.length() == 16) {      return (Long.parseLong(x.substring(0,8),16) << 32) | Long.parseLong(x.substring(8,16),16);    }    return Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  public Tree<String> determineHead(Tree<String> t){  if (nonTerminalInfo == null) {    throw new RuntimeException("Classes derived from AbstractCollinsHeadFinder must" + " create and fill HashMap nonTerminalInfo.");  }  if (t.isLeaf()) {    return null;  }  List<Tree<String>> kids=t.getChildren();  Tree<String> theHead;  if ((theHead=findMarkedHead(t)) != null) {    return theHead;  }  if (kids.size() == 1) {    return kids.get(0);  }  return determineNonTrivialHead(t);}  }
class C{  public static void restrictSize(JComponent component,SizePolicy sizePolicy){  restrictSize(component,sizePolicy,false);}  }
class C{  public boolean login() throws LoginException {  long[] solarisGroups=null;  ss=new SolarisSystem();  if (ss == null) {    succeeded=false;    throw new FailedLoginException("Failed in attempt to import " + "the underlying system identity information");  } else {    userPrincipal=new SolarisPrincipal(ss.getUsername());    UIDPrincipal=new SolarisNumericUserPrincipal(ss.getUid());    GIDPrincipal=new SolarisNumericGroupPrincipal(ss.getGid(),true);    if (ss.getGroups() != null && ss.getGroups().length > 0)     solarisGroups=ss.getGroups();    for (int i=0; i < solarisGroups.length; i++) {      SolarisNumericGroupPrincipal ngp=new SolarisNumericGroupPrincipal(solarisGroups[i],false);      if (!ngp.getName().equals(GIDPrincipal.getName()))       supplementaryGroups.add(ngp);    }    if (debug) {      System.out.println("\t\t[SolarisLoginModule]: " + "succeeded importing info: ");      System.out.println("\t\t\tuid = " + ss.getUid());      System.out.println("\t\t\tgid = " + ss.getGid());      solarisGroups=ss.getGroups();      for (int i=0; i < solarisGroups.length; i++) {        System.out.println("\t\t\tsupp gid = " + solarisGroups[i]);      }    }    succeeded=true;    return true;  }}  }
class C{  public PercentEscaper(String safeChars,boolean plusForSpace){  if (safeChars.matches(".*[0-9A-Za-z].*")) {    throw new IllegalArgumentException("Alphanumeric characters are always 'safe' and should not be " + "explicitly specified");  }  if (plusForSpace && safeChars.contains(" ")) {    throw new IllegalArgumentException("plusForSpace cannot be specified when space is a 'safe' character");  }  if (safeChars.contains("%")) {    throw new IllegalArgumentException("The '%' character cannot be specified as 'safe'");  }  this.plusForSpace=plusForSpace;  this.safeOctets=createSafeOctets(safeChars);}  }
class C{  public static <K,V>HashMap<K,V> newEmptyHashMap(Iterable<?> iterable){  if (iterable instanceof Collection<?>)   return Maps.newHashMapWithExpectedSize(((Collection<?>)iterable).size());  return Maps.newHashMap();}  }
class C{  public static String testMethod1(){  return "The result is: " + System.currentTimeMillis();}  }
class C{  private boolean receiveMessage(CloudObject object){  String msg=object.getString("message");  String sender=object.getString("from_user");  System.out.println(sender + ":" + msg);  if (!App.chats.containsKey(sender)) {    ChatArrayAdapter adapter=new ChatArrayAdapter(this,R.layout.activity_chat_singlemessage);    App.chats.put(sender,adapter);  }  System.out.println("Current appchats are " + App.chats.keySet());  App.chats.get(sender).add(new ChatMessage(true,msg));  return true;}  }
class C{  public void reset(){  super.reset();  H1=0xcbbb9d5dc1059ed8l;  H2=0x629a292a367cd507l;  H3=0x9159015a3070dd17l;  H4=0x152fecd8f70e5939l;  H5=0x67332667ffc00b31l;  H6=0x8eb44a8768581511l;  H7=0xdb0c2e0d64f98fa7l;  H8=0x47b5481dbefa4fa4l;}  }
class C{  boolean isStrict(){  return strict;}  }
class C{  @Provides @Config("dnsWriteLockTimeout") public static Duration provideDnsWriteLockTimeout(){  return Duration.standardSeconds(75);}  }
class C{  public void updateByte(String columnName,byte x) throws SQLException {  checkUpdatable();  getField(columnName).setByte(x);}  }
class C{  public LingamPatternRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params,null);}  }
class C{  protected static boolean isGroovyMetaClassGetter(AnnotatedMethod am){  Class<?> rt=am.getRawType();  if (rt == null || rt.isArray()) {    return false;  }  Package pkg=rt.getPackage();  if (pkg != null && pkg.getName().startsWith("groovy.lang")) {    return true;  }  return false;}  }
class C{  @PUT @Path("change-password") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response changePassword(@Context HttpServletRequest httpRequest,@Context HttpServletResponse servletResponse,@DefaultValue("true") @QueryParam("logout_user") boolean logout,PasswordChangeParam passwordChange){  String clientIP=_invLoginManager.getClientIP(httpRequest);  isClientIPBlocked(clientIP);  Response response=_passwordUtils.changePassword(passwordChange,false);  if (response.getStatus() != Status.OK.getStatusCode()) {    String message=response.getEntity().toString();    if (message.contains(_invLoginManager.OLD_PASSWORD_INVALID_ERROR)) {      _invLoginManager.markErrorLogin(clientIP);    }  } else {    try {      _invLoginManager.removeInvalidRecord(clientIP);      if (logout) {        _log.info("logout active sessions for: " + passwordChange.getUsername());        _tokenManager.deleteAllTokensForUser(passwordChange.getUsername(),false);      }    } catch (    Exception cleanupException) {      _log.error("clean up failed: {0}",cleanupException.getMessage());    }  }  return response;}  }
class C{  public boolean isClosed(){  if (isEmpty()) {    return true;  }  return super.isClosed();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Message decode(byte binMessage[],char offset,char arrayLen) throws StunException {  int originalOffset=offset;  arrayLen=(char)Math.min(binMessage.length,arrayLen);  if (binMessage == null || arrayLen - offset < Message.HEADER_LENGTH) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"The given binary array is not a valid StunMessage");  }  char messageType=(char)((binMessage[offset++] << 8) | (binMessage[offset++] & 0xFF));  Message message;  if (Message.isResponseType(messageType) && messageType != OLD_DATA_INDICATION)   message=new Response(); else   if (Message.isRequestType(messageType))   message=new Request(); else   message=new Indication();  message.setMessageType(messageType);  int length=(char)((binMessage[offset++] << 8) | (binMessage[offset++] & 0xFF));  byte cookie[]=new byte[4];  System.arraycopy(binMessage,offset,cookie,0,4);  offset+=4;  boolean rfc3489Compat=false;  if (!Arrays.equals(MAGIC_COOKIE,cookie)) {    rfc3489Compat=true;  }  if (arrayLen - offset - TRANSACTION_ID_LENGTH < length) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"The given binary array does not seem to contain" + " a whole StunMessage: given " + ((int)arrayLen) + " bytes of "+ message.getName()+ " but expecting "+ (offset + TRANSACTION_ID_LENGTH + length));  }  byte tranID[]=new byte[TRANSACTION_ID_LENGTH];  System.arraycopy(binMessage,offset,tranID,0,TRANSACTION_ID_LENGTH);  try {    if (rfc3489Compat) {      byte rfc3489TranID[]=new byte[TRANSACTION_ID_LENGTH + 4];      System.arraycopy(cookie,0,rfc3489TranID,0,4);      System.arraycopy(tranID,0,rfc3489TranID,4,TRANSACTION_ID_LENGTH);      message.setTransactionID(rfc3489TranID);    } else {      message.setTransactionID(tranID);    }  } catch (  StunException exc) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"The given binary array does not seem to " + "contain a whole StunMessage",exc);  }  offset+=TRANSACTION_ID_LENGTH;  while (offset - Message.HEADER_LENGTH < length) {    Attribute att=AttributeDecoder.decode(binMessage,offset,(char)(length - offset));    performAttributeSpecificActions(att,binMessage,originalOffset,offset);    message.putAttribute(att);    offset+=att.getDataLength() + Attribute.HEADER_LENGTH;    if ((att.getDataLength() % 4) > 0) {      offset+=(4 - (att.getDataLength() % 4));    }  }  return message;}  }
class C{  public LatLon parseLatLon(String latLonString){  if (latLonString == null) {    throw new IllegalArgumentException("String Is Null");  }  throw new UnsupportedOperationException();}  }
class C{  private boolean isInRadius(float x,float y,float radius){  Vector2f point=new Vector2f(x,y);  return Math.abs(point.length()) <= radius;}  }
class C{  public void open(){  myDebugger.getEventQueue().startDocument();  if (TRACE) {    trace("<trace>");  }}  }
class C{  private ArrayList<Double> makePolygon(ArrayList<Double> v){  ArrayList<Double> building=new ArrayList<Double>(v.size() + 10);  double x1, y1, x2, y2;  int edge1=0, edge2=0;  for (int noa=0; noa < v.size() - 2; noa++) {    building.add(new Double(v.get(noa).doubleValue()));  }  double[] new_coords;  x1=m_plot2D.convertToPanelX(v.get(1).doubleValue());  y1=m_plot2D.convertToPanelY(v.get(2).doubleValue());  x2=m_plot2D.convertToPanelX(v.get(3).doubleValue());  y2=m_plot2D.convertToPanelY(v.get(4).doubleValue());  if (x1 < 0) {    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),0);    edge1=0;    if (new_coords[0] < 0) {      if (y1 < 0) {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);        edge1=1;      } else {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());        edge1=3;      }    }  } else   if (x1 > this.getWidth()) {    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),this.getWidth());    edge1=2;    if (new_coords[0] < 0) {      if (y1 < 0) {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);        edge1=1;      } else {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());        edge1=3;      }    }  } else   if (y1 < 0) {    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);    edge1=1;  } else {    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());    edge1=3;  }  building.set(1,new Double(m_plot2D.convertToAttribX(new_coords[0])));  building.set(2,new Double(m_plot2D.convertToAttribY(new_coords[1])));  x1=m_plot2D.convertToPanelX(v.get(v.size() - 4).doubleValue());  y1=m_plot2D.convertToPanelY(v.get(v.size() - 3).doubleValue());  x2=m_plot2D.convertToPanelX(v.get(v.size() - 6).doubleValue());  y2=m_plot2D.convertToPanelY(v.get(v.size() - 5).doubleValue());  if (x1 < 0) {    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),0);    edge2=0;    if (new_coords[0] < 0) {      if (y1 < 0) {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);        edge2=1;      } else {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());        edge2=3;      }    }  } else   if (x1 > this.getWidth()) {    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),this.getWidth());    edge2=2;    if (new_coords[0] < 0) {      if (y1 < 0) {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);        edge2=1;      } else {        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());        edge2=3;      }    }  } else   if (y1 < 0) {    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);    edge2=1;  } else {    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());    edge2=3;  }  building.set(building.size() - 2,new Double(m_plot2D.convertToAttribX(new_coords[0])));  building.set(building.size() - 1,new Double(m_plot2D.convertToAttribY(new_coords[1])));  int xp, yp;  xp=this.getWidth() * ((edge2 & 1) ^ ((edge2 & 2) / 2));  yp=this.getHeight() * ((edge2 & 2) / 2);  if (inPolyline(v,m_plot2D.convertToAttribX(xp),m_plot2D.convertToAttribY(yp))) {    building.add(new Double(m_plot2D.convertToAttribX(xp)));    building.add(new Double(m_plot2D.convertToAttribY(yp)));    for (int noa=(edge2 + 1) % 4; noa != edge1; noa=(noa + 1) % 4) {      xp=this.getWidth() * ((noa & 1) ^ ((noa & 2) / 2));      yp=this.getHeight() * ((noa & 2) / 2);      building.add(new Double(m_plot2D.convertToAttribX(xp)));      building.add(new Double(m_plot2D.convertToAttribY(yp)));    }  } else {    xp=this.getWidth() * ((edge2 & 2) / 2);    yp=this.getHeight() * (1 & ~((edge2 & 1) ^ ((edge2 & 2) / 2)));    if (inPolyline(v,m_plot2D.convertToAttribX(xp),m_plot2D.convertToAttribY(yp))) {      building.add(new Double(m_plot2D.convertToAttribX(xp)));      building.add(new Double(m_plot2D.convertToAttribY(yp)));      for (int noa=(edge2 + 3) % 4; noa != edge1; noa=(noa + 3) % 4) {        xp=this.getWidth() * ((noa & 2) / 2);        yp=this.getHeight() * (1 & ~((noa & 1) ^ ((noa & 2) / 2)));        building.add(new Double(m_plot2D.convertToAttribX(xp)));        building.add(new Double(m_plot2D.convertToAttribY(yp)));      }    }  }  return building;}  }
class C{  public ShowRunToolBarAction(final NetworkPanel networkPanel){  super("Run Toolbar");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GameOptionsDialog(ClientGUI client){  super(client.frame,Messages.getString("GameOptionsDialog.title"),true);  this.client=client;  init(client.frame,client.getClient().getGame().getOptions());}  }
class C{  public static boolean validateSamRg(CFlags flags){  final String rg=(String)flags.getValue(SAM_RG);  final File in=new File(rg);  if (!in.exists() && rg.indexOf('\t') != -1) {    flags.setParseMessage("given string \"" + rg + "\" for --"+ SAM_RG+ " contains literal tab characters, please use \\t instead");    return false;  } else   if (in.isDirectory()) {    flags.setParseMessage("given input file \"" + in.getPath() + "\" for --"+ SAM_RG+ " is a directory, must be a file");    return false;  }  return true;}  }
class C{  public JSONObject makeDurationProps(final long sessionDurationSeconds){  JSONObject props;  try {    props=new JSONObject();    props.put("Duration",sessionDurationSeconds);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public RowValueBuilder(RowDescriptor rowDescriptor){  this.rowDescriptor=rowDescriptor;  rowValue=rowDescriptor.createDefaultFieldValues();}  }
class C{  public boolean isSetSrcTable(){  return this.srcTable != null;}  }
class C{  public void notifyWatchers(final String path){  Check.notNull(path,"path");  final TFSRepositoryPathWatcher[] watchers=getPathWatchers(path);  for (  final TFSRepositoryPathWatcher watcher : watchers) {    watcher.notifyPathChanged(path);  }}  }
class C{  static ScaleTypeDrawable wrapChildWithScaleType(DrawableParent parent,ScaleType scaleType){  Drawable child=parent.setDrawable(sEmptyDrawable);  child=maybeWrapWithScaleType(child,scaleType);  parent.setDrawable(child);  Preconditions.checkNotNull(child,"Parent has no child drawable!");  return (ScaleTypeDrawable)child;}  }
class C{  public PerfectStringHash(final String values[]){  final int length=values.length;  if (length == 0)   throw new IllegalArgumentException("No values supplied");  final int[] hashes=new int[length];  final int[] offsets=new int[2 * length];  final int[] runLengths=new int[length];  Arrays.sort(values,comparator);  for (int i=0; i < length; i++)   hashes[i]=values[i].hashCode();  int offset=0;  if (length > 1) {    int previousHash=hashes[0];    int runLength=1;    for (int i=1; i <= length; i++) {      int currentHash=i == length ? ~previousHash : hashes[i];      if (currentHash == previousHash) {        runLength++;      } else {        if (runLength > 1) {          final int firstIndex=i - runLength;          for (int j=i - 1; j >= firstIndex; j--) {            runLengths[j]=runLength;            offsets[j << 1]=offset;            offsets[(j << 1) + 1]=j - firstIndex;          }          offset+=(Integer.highestOneBit(runLength - 1) << 1);          runLength=1;        } else {          runLengths[i - 1]=1;          offsets[(i - 1) << 1]=-1;        }      }      previousHash=currentHash;    }  }  if (offset == 0) {    this.hashes=hashes;    this.offsets=null;    this.pivots=null;    this.range=new HashRange(0,length - 1);    return;  }  final int[] pivots=new int[offset * 2];  for (int i=0; i < length; ) {    final int runLength=runLengths[i];    if (runLength > 1)     generatePivots(values,i,runLength,pivots,(int)offsets[i << 1]);    i+=runLength;  }  this.pivots=pivots;  this.offsets=offsets;  this.hashes=hashes;  this.range=new HashRange(0,length - 1);}  }
class C{  public ResourceList<Tenant> listAll() throws IOException {  return listByName(null);}  }
class C{  public BasicTiledImageLayerBulkDownloader(BasicTiledImageLayer layer,Sector sector,double resolution,BulkRetrievalListener listener){  super(layer,sector,resolution,layer.getDataFileStore(),listener);  this.layer=layer;  this.level=this.layer.computeLevelForResolution(sector,resolution);}  }
class C{  private void deliverResultToReceiver(int resultCode,String message){  Bundle bundle=new Bundle();  bundle.putString(Constants.RESULT_DATA_KEY,message);  mReceiver.send(resultCode,bundle);}  }
class C{  private Collection<GraphNode> loadGraphNodes(HierarchicalStreamReader reader,UnmarshallingContext context){  reader.moveDown();  if (!isViewNodes(reader)) {    reader.moveUp();    logger.info("Can't load nodes from section " + reader.getNodeName());    return Collections.emptySet();  }  Set<GraphNode> result=Sets.newHashSet();  while (reader.hasMoreChildren()) {    reader.moveDown();    String nodeName=reader.getNodeName();    Class<?> childClass=mapper.realClass(nodeName);    GraphNode node=(GraphNode)context.convertAnother(null,childClass);    result.add(node);    reader.moveUp();  }  reader.moveUp();  return result;}  }
class C{  public Xpp3Driver(){  super(new XmlFriendlyNameCoder());}  }
class C{  private static int findNanpMatchEnd(CharSequence text,int startPos){  if (text.length() > startPos + 4 && text.subSequence(startPos,startPos + 4).toString().equalsIgnoreCase("tel:")) {    startPos+=4;  }  int endPos=text.length();  int curPos=startPos;  int foundDigits=0;  char firstDigit='x';  boolean foundWhiteSpaceAfterAreaCode=false;  while (curPos <= endPos) {    char ch;    if (curPos < endPos) {      ch=text.charAt(curPos);    } else {      ch=27;    }    if (Character.isDigit(ch)) {      if (foundDigits == 0) {        firstDigit=ch;      }      foundDigits++;      if (foundDigits > NANP_MAX_DIGITS) {        return -1;      }    } else     if (Character.isWhitespace(ch)) {      if ((firstDigit == '1' && foundDigits == 4) || (foundDigits == 3)) {        foundWhiteSpaceAfterAreaCode=true;      } else       if (firstDigit == '1' && foundDigits == 1) {      } else       if (foundWhiteSpaceAfterAreaCode && ((firstDigit == '1' && (foundDigits == 7)) || (foundDigits == 6))) {      } else {        break;      }    } else     if (NANP_ALLOWED_SYMBOLS.indexOf(ch) == -1) {      break;    }    curPos++;  }  if ((firstDigit != '1' && (foundDigits == 7 || foundDigits == 10)) || (firstDigit == '1' && foundDigits == 11)) {    return curPos;  }  return -1;}  }
class C{  void updateConfigWithOTP(String otp,String requestUri) throws RcsAccountException, IOException {  HttpsProvisioningService.cancelRetryAlarm(mCtx,mRetryIntent);  HttpsProvisioningResult result=sendSecondHttpsRequestWithOTP(otp,requestUri);  processProvisioningResult(result);}  }
class C{  protected String doIt() throws Exception {  log.info("C_PaySelection_ID=" + p_C_PaySelection_ID + ", OnlyDiscount="+ p_OnlyDiscount+ ", OnlyDue="+ p_OnlyDue+ ", IncludeInDispute="+ p_IncludeInDispute+ ", MatchRequirement="+ p_MatchRequirement+ ", PaymentRule="+ p_PaymentRule+ ", C_BP_Group_ID="+ p_C_BP_Group_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID);  MPaySelection psel=new MPaySelection(getCtx(),p_C_PaySelection_ID,get_TrxName());  if (psel.get_ID() == 0)   throw new IllegalArgumentException("Not found C_PaySelection_ID=" + p_C_PaySelection_ID);  if (psel.isProcessed())   throw new IllegalArgumentException("@Processed@");  if (p_DueDate == null)   p_DueDate=psel.getPayDate();  String sql="SELECT i.C_Invoice_ID, i.C_InvoicePaySchedule_ID," + " currencyConvert(invoiceOpen(i.C_Invoice_ID, i.C_InvoicePaySchedule_ID)" + ",i.C_Currency_ID, ?,?, i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),"+ " currencyConvert(paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?)"+ ",i.C_Currency_ID, ?,?,i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID),"+ " PaymentRule, IsSOTrx "+ "FROM C_Invoice_v i "+ "LEFT OUTER JOIN C_InvoicePaySchedule ips ON (i.C_InvoicePaySchedule_ID = ips.C_InvoicePaySchedule_ID) "+ "WHERE IsSOTrx='N' AND IsPaid='N' AND DocStatus IN ('CO','CL')"+ " AND i.AD_Client_ID=?"+ " AND invoiceOpen(i.C_Invoice_ID,i.C_InvoicePaySchedule_ID)-paymentTermDiscount(i.GrandTotal,i.C_Currency_ID,i.C_PaymentTerm_ID,i.DateInvoiced, ?) != 0.0"+ " AND NOT EXISTS (SELECT * FROM C_PaySelectionLine psl"+ " INNER JOIN C_PaySelectionCheck psc ON (psl.C_PaySelectionCheck_ID=psc.C_PaySelectionCheck_ID)"+ " LEFT OUTER JOIN C_Payment pmt ON (pmt.C_Payment_ID=psc.C_Payment_ID)"+ " WHERE i.C_Invoice_ID=psl.C_Invoice_ID"+ " AND i.C_InvoicePaySchedule_ID is null"+ " AND psl.IsActive='Y'"+ " AND (pmt.DocStatus IS NULL OR pmt.DocStatus NOT IN ('VO','RE'))"+ " AND psl.differenceamt = 0.0) "+ " AND NOT EXISTS (SELECT * FROM C_PaySelectionLine psl"+ " WHERE i.C_Invoice_ID=psl.C_Invoice_ID AND psl.IsActive='Y'"+ " AND psl.C_PaySelection_ID = ?)";  if (!p_IncludeInDispute)   sql+=" AND i.IsInDispute='N'";  if (p_PaymentRule != null)   sql+=" AND PaymentRule=?";  if (p_OnlyDiscount) {    if (p_OnlyDue)     sql+=" AND ("; else     sql+=" AND ";    sql+="paymentTermDiscount(invoiceOpen(i.C_Invoice_ID, i.C_InvoicePaySchedule_ID), C_Currency_ID, C_PaymentTerm_ID, DateInvoiced, ?) > 0";  }  if (p_OnlyDue) {    if (p_OnlyDiscount)     sql+=" OR "; else     sql+=" AND ";    sql+="COALESCE(ips.duedate,paymentTermDueDate(i.C_PaymentTerm_ID, i.DateInvoiced)) <= ?";    if (p_OnlyDiscount)     sql+=")";  }  if (p_C_BPartner_ID != 0)   sql+=" AND C_BPartner_ID=?"; else   if (p_C_BP_Group_ID != 0)   sql+=" AND EXISTS (SELECT * FROM C_BPartner bp " + "WHERE bp.C_BPartner_ID=i.C_BPartner_ID AND bp.C_BP_Group_ID=?)";  if (p_MatchRequirement.equals("P") || p_MatchRequirement.equals("B")) {    sql+=" AND EXISTS (SELECT * FROM C_InvoiceLine il " + "WHERE i.C_Invoice_ID=il.C_Invoice_ID" + " AND QtyInvoiced=(SELECT SUM(Qty) FROM M_MatchPO m "+ "WHERE il.C_InvoiceLine_ID=m.C_InvoiceLine_ID))";  }  if (p_MatchRequirement.equals("R") || p_MatchRequirement.equals("B")) {    sql+=" AND EXISTS (SELECT * FROM C_InvoiceLine il " + "WHERE i.C_Invoice_ID=il.C_Invoice_ID" + " AND QtyInvoiced=(SELECT SUM(Qty) FROM M_MatchInv m "+ "WHERE il.C_InvoiceLine_ID=m.C_InvoiceLine_ID))";  }  int lines=0;  int C_CurrencyTo_ID=psel.getC_Currency_ID();  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    int index=1;    pstmt.setInt(index++,C_CurrencyTo_ID);    pstmt.setTimestamp(index++,psel.getPayDate());    pstmt.setTimestamp(index++,psel.getPayDate());    pstmt.setInt(index++,C_CurrencyTo_ID);    pstmt.setTimestamp(index++,psel.getPayDate());    pstmt.setInt(index++,psel.getAD_Client_ID());    pstmt.setTimestamp(index++,psel.getPayDate());    pstmt.setInt(index++,psel.getC_PaySelection_ID());    if (p_PaymentRule != null)     pstmt.setString(index++,p_PaymentRule);    if (p_OnlyDiscount)     pstmt.setTimestamp(index++,psel.getPayDate());    if (p_OnlyDue)     pstmt.setTimestamp(index++,p_DueDate);    if (p_C_BPartner_ID != 0)     pstmt.setInt(index++,p_C_BPartner_ID); else     if (p_C_BP_Group_ID != 0)     pstmt.setInt(index++,p_C_BP_Group_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int C_Invoice_ID=rs.getInt(1);      int C_InvoicePaySchedule_ID=rs.getInt(2);      BigDecimal PayAmt=rs.getBigDecimal(3);      if (C_Invoice_ID == 0 || Env.ZERO.compareTo(PayAmt) == 0)       continue;      BigDecimal DiscountAmt=rs.getBigDecimal(4);      String PaymentRule=rs.getString(5);      boolean isSOTrx="Y".equals(rs.getString(6));      lines++;      MPaySelectionLine pselLine=new MPaySelectionLine(psel,lines * 10,PaymentRule);      pselLine.setInvoice(C_Invoice_ID,C_InvoicePaySchedule_ID,isSOTrx,PayAmt,PayAmt.subtract(DiscountAmt),DiscountAmt);      if (!pselLine.save()) {        pstmt.close();        throw new IllegalStateException("Cannot save MPaySelectionLine");      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  return "@C_PaySelectionLine_ID@  - #" + lines;}  }
class C{  private Producer<EncodedImage> newLocalTransformationsSequence(Producer<EncodedImage> inputProducer,ThumbnailProducer<EncodedImage>[] thumbnailProducers){  Producer<EncodedImage> localImageProducer=ProducerFactory.newAddImageTransformMetaDataProducer(inputProducer);  localImageProducer=mProducerFactory.newResizeAndRotateProducer(localImageProducer,true);  ThrottlingProducer<EncodedImage> localImageThrottlingProducer=mProducerFactory.newThrottlingProducer(mThrottlingMaxSimultaneousRequests,localImageProducer);  return mProducerFactory.newBranchOnSeparateImagesProducer(newLocalThumbnailProducer(thumbnailProducers),localImageThrottlingProducer);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProductPrice[");  sb.append(getM_PriceList_Version_ID()).append(",M_Product_ID=").append(getM_Product_ID()).append(",PriceList=").append(getPriceList()).append("]");  return sb.toString();}  }
class C{  public TraitMap newBranch(Trait key){  TraitMap newMap=new TraitMap(key);  if (this.containsKey(key)) {    throw new java.lang.IllegalArgumentException("Cannot branch on existing vector.");  } else {    put(key,newMap);  }  return newMap;}  }
class C{  private void swapChoiceState(int position){  int lastCount=getCountSelected();  boolean lastChecked=checked.get(position);  checked.set(position,!lastChecked);  int count=lastChecked ? lastCount - 1 : lastCount + 1;  if (lastCount == 0 && count == 1) {    swipeListView.onChoiceStarted();    closeOpenedItems();    setActionsTo(SwipeListView.SWIPE_ACTION_CHOICE);  }  if (lastCount == 1 && count == 0) {    swipeListView.onChoiceEnded();    returnOldActions();  }  swipeListView.onChoiceChanged(position,!lastChecked);  reloadChoiceStateInView(frontView,position);}  }
class C{  public Metric(Metric metric){  SystemAssert.requireArgument(metric != null,"Metric to clone cannot be null.");  setScope(metric.getScope());  setMetric(metric.getMetric());  setTags(metric.getTags());  _datapoints=new TreeMap<>();  setDatapoints(metric.getDatapoints());  setNamespace(metric.getNamespace());  setDisplayName(metric.getDisplayName());  setUnits(metric.getUnits());  setQuery(metric.getQuery());}  }
class C{  public CopyOnWriteArrayList(Collection c){  Object[] elements=new Object[c.size()];  int size=0;  for (Iterator itr=c.iterator(); itr.hasNext(); ) {    Object e=itr.next();    elements[size++]=e;  }  setArray(elements);}  }
class C{  public void removeSignalHeadFromPanel(String signalName){  if ((signalName == null) || (signalName.length() < 1)) {    return;  }  SignalHead head=jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(signalName);  removeAssignment(head);  layoutEditor.removeSignalHead(head);}  }
class C{  @Override public void keyPressed(KeyEvent event){  try {    if (event.getKeyChar() == '\n') {      onReturnPressed(event);    } else     if (event.getKeyChar() == '\t') {      onTabPressed(event);    }  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  private void clear(){  if (startFound) {    if (index1 != -1) {      if (index1 < 0 || index1 >= parameters.length) {        if (required) {          invalidParameters=true;        }      } else       if (toEnd) {        output.append(buildRange(parameters,index1,index2));      } else {        output.append(parameters[index1]);      }      buffer=new StringBuilder();    } else {      dumpBuffer();    }  }  reset();}  }
class C{  public long releaseCount(){  assertSegmentOpen();  return offsetPredicate.count();}  }
class C{  public RefactoringStatus checkParameterNames(){  RefactoringStatus result=new RefactoringStatus();  for (Iterator<ParameterInfo> iter=fParameterInfos.iterator(); iter.hasNext(); ) {    ParameterInfo parameter=iter.next();    result.merge(Checks.checkIdentifier(parameter.getNewName(),fCUnit));    for (Iterator<ParameterInfo> others=fParameterInfos.iterator(); others.hasNext(); ) {      ParameterInfo other=others.next();      if (parameter != other && other.getNewName().equals(parameter.getNewName())) {        result.addError(Messages.format(RefactoringCoreMessages.ExtractMethodRefactoring_error_sameParameter,BasicElementLabels.getJavaElementName(other.getNewName())));        return result;      }    }    if (parameter.isRenamed() && fUsedNames.contains(parameter.getNewName())) {      result.addError(Messages.format(RefactoringCoreMessages.ExtractMethodRefactoring_error_nameInUse,BasicElementLabels.getJavaElementName(parameter.getNewName())));      return result;    }  }  return result;}  }
class C{  private Coordinate displaceFromCornerAwayFromArms(Coordinate nearPt,Coordinate p1,Coordinate p2,double dist){  Coordinate[] corner=orientCorner(nearPt,p1,p2);  boolean isInsideCorner=isInsideCorner(vertexPt,nearPt,corner[0],corner[1]);  Vector2D u1=Vector2D.create(nearPt,corner[0]).normalize();  Vector2D u2=Vector2D.create(nearPt,corner[1]).normalize();  double cornerAng=u1.angle(u2);  double maxAngToBisec=maxAngleToBisector(cornerAng);  Vector2D bisec=u2.rotate(cornerAng / 2);  if (!isInsideCorner) {    bisec=bisec.multiply(-1);    double outerAng=2 * Math.PI - cornerAng;    maxAngToBisec=maxAngleToBisector(outerAng);  }  Vector2D pointwiseDisplacement=Vector2D.create(nearPt,vertexPt).normalize();  double stretchAng=pointwiseDisplacement.angleTo(bisec);  double stretchAngClamp=MathUtil.clamp(stretchAng,-maxAngToBisec,maxAngToBisec);  Vector2D cornerDisplacement=bisec.rotate(-stretchAngClamp).multiply(dist);  return cornerDisplacement.translate(vertexPt);}  }
class C{  static <J>MethodId<J> MethodId(String name,Class<J> returnType,Class<?>... types){  return new MethodId<J>(TreeMaker.class,name,returnType,types);}  }
class C{  public final Key translateKey(Key key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  @Override public void updateObject(int columnIndex,Object x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x);");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Sort weightSort(Sort sort) throws IOException {  return (sort != null) ? sort.rewrite(this) : null;}  }
class C{  public RootGraphicsNode(){}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V,V6 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5,String name6,V6 value6){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5,name6,value6);}  }
class C{  public static String toMonthString(Context context,long timeMillis){  return DateUtils.formatDateRange(context,timeMillis,timeMillis,DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_MONTH_DAY | DateUtils.FORMAT_SHOW_YEAR);}  }
class C{  public RegionAttributesCreation(CacheCreation cc){  this(cc,getDefaultAttributes(cc),true);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public Iterable<Integer> adj(int v){  int x=toX(v);  int y=toY(v);  TreeSet<Integer> neighbors=new TreeSet<Integer>();  if (!wallExists(x,y,"North")) {    neighbors.add(xyTo1D(x,y + 1));  }  if (!wallExists(x,y,"East")) {    neighbors.add(xyTo1D(x + 1,y));  }  if (!wallExists(x,y,"South")) {    neighbors.add(xyTo1D(x,y - 1));  }  if (!wallExists(x,y,"West")) {    neighbors.add(xyTo1D(x - 1,y));  }  return neighbors;}  }
class C{  static public tr createField(tr line,String FORMNAME,String PARAMETER,String labelText,String inputType,Object value,int sizeDisplay,int size,boolean longField,boolean mandatory,String onChange,StringBuffer script){  if (line == null)   line=new tr();  String labelInfo=labelText;  if (mandatory) {    labelInfo+="&nbsp;<font color=\"red\">*</font>";    String fName="document." + FORMNAME + "."+ PARAMETER;    script.append(fName).append(".required=true; ");  }  label llabel=new label().setFor(PARAMETER).addElement(labelInfo);  llabel.setID("ID_" + PARAMETER + "_Label");  line.addElement(new td().addElement(llabel).setAlign(AlignType.RIGHT));  input iinput=new input(inputType,PARAMETER,value == null ? "" : value.toString());  iinput.setSize(sizeDisplay).setMaxlength(size);  iinput.setID("ID_" + PARAMETER);  if (onChange != null && onChange.length() > 0)   iinput.setOnChange(onChange);  iinput.setTitle(labelText);  td field=new td().addElement(iinput).setAlign(AlignType.LEFT);  if (longField)   field.setColSpan(3);  line.addElement(field);  return line;}  }
class C{  public static boolean shouldParseContentDisposition(){  return SmsManager.getDefault().getCarrierConfigValues().getBoolean(SmsManager.MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION,true);}  }
class C{  protected void processRequest(Message req) throws Exception {  if (LOG.isDebugEnabled())   LOG.debug("ECHO request message " + req.toString());  resp_dest=req.getJMSReplyTo();  if (resp_dest != null) {    msg_prod=session.createProducer(resp_dest);    LOG.debug("SENDING ECHO RESPONSE to:" + resp_dest);    msg_prod.send(req);    LOG.debug((((ActiveMQSession)session).getConnection()).getBrokerName() + " SENT ECHO RESPONSE to " + resp_dest);    msg_prod.close();    msg_prod=null;  } else {    LOG.warn("invalid request: no reply-to destination given");  }}  }
class C{  public static final void writeIntArrayXml(int[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"int-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  for (int i=0; i < N; i++) {    out.startTag(null,"item");    out.attribute(null,"value",Integer.toString(val[i]));    out.endTag(null,"item");  }  out.endTag(null,"int-array");}  }
class C{  public void report(){  reporter.report();}  }
class C{  public boolean isNew(){  return m_isNew;}  }
class C{  public void testBug18041() throws Exception {  if (versionMeetsMinimum(4,1)) {    createTable("testBug18041","(`a` tinyint(4) NOT NULL, `b` char(4) default NULL)");    Properties props=new Properties();    props.setProperty("jdbcCompliantTruncation","true");    props.setProperty("useServerPrepStmts","true");    Connection truncConn=null;    PreparedStatement stm=null;    try {      truncConn=getConnectionWithProps(props);      stm=truncConn.prepareStatement("insert into testBug18041 values (?,?)");      stm.setInt(1,1000);      stm.setString(2,"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn");      stm.executeUpdate();      fail("Truncation exception should have been thrown");    } catch (    DataTruncation truncEx) {    } finally {      if (truncConn != null) {        truncConn.close();      }    }  }}  }
class C{  public double findRouteDistance(int from,int to,double time){  double dist=0.0;  Node fNode=sc.getNetwork().getNodes().get(Id.createNodeId("MyCiTi_" + from));  Node tNode=sc.getNetwork().getNodes().get(Id.createNodeId("MyCiTi_" + to));  if (fNode != null && tNode != null) {    FakeFacility fFrom=new FakeFacility(fNode.getCoord());    FakeFacility fTo=new FakeFacility(tNode.getCoord());    List<Leg> route=trRouter.calcRoute(fFrom,fTo,time,sc.getPopulation().getFactory().createPerson(Id.createPersonId("dummy")));    for (    Leg l : route) {      if (l.getRoute() != null) {        dist+=l.getRoute().getDistance();      }    }  } else {    LOG.error("Either origin (" + from + ") or destination ("+ to+ ") node, or both, could not be found. Returning zero distance.");  }  return dist;}  }
class C{  public long nextLong(){  return ((long)next(32) << 32) + next(32);}  }
class C{  private boolean removeDirectory(File directory,Map<String,String> progress){  if (directory == null)   return false;  if (!directory.exists())   return true;  if (!directory.isDirectory())   return false;  String[] list=directory.list();  if (list != null) {    for (int i=0; i < list.length; i++) {      File entry=new File(directory,list[i]);      if (entry.isDirectory()) {        if (!removeDirectory(entry,progress))         return false;      } else {        progress.put("delete file",entry.getName());        if (!entry.delete())         return false;      }    }  }  progress.put("delete directory",directory.getName());  return directory.delete();}  }
class C{  protected void processMessages(){  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    Part eid=null;    Message _message=initializeMessage();    if (quitting()) {      if (isDebugEnabled) {        logger.debug("processMessages quitting early because we have stopped");      }      return;    }    logger.info(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_READY_TO_PROCESS_MESSAGES,this));    while (continueProcessing.get()) {      if (quitting()) {        if (isDebugEnabled) {          logger.debug("termination detected");        }        return;      }      if (this.endpoint.isClosed()) {        if (isDebugEnabled) {          logger.debug("endpoint died");        }        this.continueProcessing.set(false);        break;      }      try {        _message.recv();        waitForFailedUpdater();        cache.waitForRegisterInterestsInProgress();        if (quitting()) {          if (isDebugEnabled) {            logger.debug("processMessages quitting before processing message");          }          break;        }        if (_message.getMessageType() == MessageType.SERVER_TO_CLIENT_PING) {          if (isDebugEnabled) {            logger.debug("{}: Received ping",this);          }          continue;        }        boolean isDeltaSent=false;        boolean isCreateOrUpdate=_message.getMessageType() == MessageType.LOCAL_CREATE || _message.getMessageType() == MessageType.LOCAL_UPDATE;        if (isCreateOrUpdate) {          isDeltaSent=((Boolean)_message.getPart(2).getObject()).booleanValue();        }        int numberOfParts=_message.getNumberOfParts();        eid=_message.getPart(numberOfParts - 1);        EventID eventId=(EventID)eid.getObject();        if (_message.getMessageType() != MessageType.REGISTER_INSTANTIATORS && _message.getMessageType() != MessageType.REGISTER_DATASERIALIZERS) {          if (this.qManager.getState().verifyIfDuplicate(eventId,!(this.isDurableClient || isDeltaSent))) {            continue;          }        }        if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER)) {          logger.trace(LogMarker.BRIDGE_SERVER,"Processing event with id {}" + eventId.expensiveToString());        }        this.isOpCompleted=true;switch (_message.getMessageType()) {case MessageType.LOCAL_CREATE:case MessageType.LOCAL_UPDATE:          handleUpdate(_message);        break;case MessageType.LOCAL_INVALIDATE:      handleInvalidate(_message);    break;case MessageType.LOCAL_DESTROY:  handleDestroy(_message);break;case MessageType.LOCAL_DESTROY_REGION:handleDestroyRegion(_message);break;case MessageType.CLEAR_REGION:handleClearRegion(_message);break;case MessageType.REGISTER_INSTANTIATORS:handleRegisterInstantiator(_message,eventId);break;case MessageType.REGISTER_DATASERIALIZERS:handleRegisterDataSerializer(_message,eventId);break;case MessageType.CLIENT_MARKER:handleMarker(_message);break;case MessageType.INVALIDATE_REGION:handleInvalidateRegion(_message);break;case MessageType.CLIENT_REGISTER_INTEREST:handleRegisterInterest(_message);break;case MessageType.CLIENT_UNREGISTER_INTEREST:handleUnregisterInterest(_message);break;case MessageType.TOMBSTONE_OPERATION:handleTombstoneOperation(_message);break;default :logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_RECEIVED_AN_UNSUPPORTED_MESSAGE_TYPE_1,new Object[]{this,MessageType.getString(_message.getMessageType())}));break;}if (this.isOpCompleted && (this.isDurableClient || isDeltaSent)) {this.qManager.getState().verifyIfDuplicate(eventId,true);}} catch (InterruptedIOException e) {this.endPointDied=true;continueProcessing.set(false);if (isDebugEnabled) {logger.debug("InterruptedIOException");}}catch (IOException e) {this.endPointDied=true;if (!quitting()) {String message=": Caught the following exception and will exit: ";String errMessage=e.getMessage();if (errMessage == null) {errMessage="";}ClientServerObserver bo=ClientServerObserverHolder.getInstance();bo.beforeFailoverByCacheClientUpdater(this.location);eManager.serverCrashed(this.endpoint);if (isDebugEnabled) {logger.debug("" + message + e);}}continueProcessing.set(false);if (isDebugEnabled) {logger.debug("terminated due to IOException");}}catch (Exception e) {if (!quitting()) {this.endPointDied=true;ClientServerObserver bo=ClientServerObserverHolder.getInstance();bo.beforeFailoverByCacheClientUpdater(this.location);eManager.serverCrashed(this.endpoint);String message=": Caught the following exception and will exit: ";handleException(message,e);}continueProcessing.set(false);if (isDebugEnabled) {logger.debug("CCU terminated due to Exception");}} finally {_message.clear();}}}  finally {if (isDebugEnabled) {logger.debug("has stopped and cleaning the helper ..");}this.close();this.qManager.checkEndpoint(this,endpoint);}}  }
class C{  protected double updateCloudetProcessingWithoutSchedulingFutureEventsForce(){  double currentTime=CloudSim.clock();  double minTime=Double.MAX_VALUE;  double timeDiff=currentTime - getLastProcessTime();  double timeFrameDatacenterEnergy=0.0;  Log.printLine("\n\n--------------------------------------------------------------\n\n");  Log.formatLine("New resource usage for the time frame starting at %.2f:",currentTime);  for (  PowerHost host : this.<PowerHost>getHostList()) {    Log.printLine();    double time=host.updateVmsProcessing(currentTime);    if (time < minTime) {      minTime=time;    }    Log.formatLine("%.2f: [Host #%d] utilization is %.2f%%",currentTime,host.getId(),host.getUtilizationOfCpu() * 100);  }  if (timeDiff > 0) {    Log.formatLine("\nEnergy consumption for the last time frame from %.2f to %.2f:",getLastProcessTime(),currentTime);    for (    PowerHost host : this.<PowerHost>getHostList()) {      double previousUtilizationOfCpu=host.getPreviousUtilizationOfCpu();      double utilizationOfCpu=host.getUtilizationOfCpu();      double timeFrameHostEnergy=host.getEnergyLinearInterpolation(previousUtilizationOfCpu,utilizationOfCpu,timeDiff);      timeFrameDatacenterEnergy+=timeFrameHostEnergy;      Log.printLine();      Log.formatLine("%.2f: [Host #%d] utilization at %.2f was %.2f%%, now is %.2f%%",currentTime,host.getId(),getLastProcessTime(),previousUtilizationOfCpu * 100,utilizationOfCpu * 100);      Log.formatLine("%.2f: [Host #%d] energy is %.2f W*sec",currentTime,host.getId(),timeFrameHostEnergy);    }    Log.formatLine("\n%.2f: Data center's energy is %.2f W*sec\n",currentTime,timeFrameDatacenterEnergy);  }  setPower(getPower() + timeFrameDatacenterEnergy);  checkCloudletCompletion();  for (  PowerHost host : this.<PowerHost>getHostList()) {    for (    Vm vm : host.getCompletedVms()) {      getVmAllocationPolicy().deallocateHostForVm(vm);      getVmList().remove(vm);      Log.printLine("VM #" + vm.getId() + " has been deallocated from host #"+ host.getId());    }  }  Log.printLine();  setLastProcessTime(currentTime);  return minTime;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected MultipleDocumentHandling(int value){  super(value);}  }
class C{  public RentedSign(final Player renter,final String text){  setRPClass(RPCLASS_NAME);  store();  put(RENTER,renter.getName());  put(TIMESTAMP,System.currentTimeMillis());  super.setText(text);}  }
class C{  public void testArrive3(){  Phaser phaser=new Phaser(1);  phaser.forceTermination();  assertTerminated(phaser,0,1);  assertEquals(0,phaser.getPhase() + Integer.MIN_VALUE);  assertTrue(phaser.arrive() < 0);  assertTrue(phaser.register() < 0);  assertTrue(phaser.arriveAndDeregister() < 0);  assertTrue(phaser.awaitAdvance(1) < 0);  assertTrue(phaser.getPhase() < 0);}  }
class C{  public Phase advancePhase(Phase phase){  if (phase == left) {    return self;  }  if (phase == right) {    return done;  }  return right;}  }
class C{  public DefaultDelegateBridge(final GameData data,final IGame game,final IDelegateHistoryWriter historyWriter,final RandomStats randomStats,final DelegateExecutionManager delegateExecutionManager){  m_data=data;  m_game=game;  m_historyWriter=historyWriter;  m_randomStats=randomStats;  m_delegateExecutionManager=delegateExecutionManager;}  }
class C{  public static ResourceManager common(){  return all(ResourceManager.class);}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  public void reset() throws DMLRuntimeException {  reset(false);}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  public final void testRead02() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dis.read();      }      assertEquals("retval1",-1,dis.read());      assertEquals("retval2",-1,dis.read());      assertEquals("retval3",-1,dis.read());      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public Context provideContext(){  return context;}  }
class C{  private IgniteNodeStartUtils(){}  }
class C{  public int generateValidTabId(){  return TabIdManager.getInstance().generateValidId(Tab.INVALID_TAB_ID);}  }
class C{  public Scanner(ReadableByteChannel source,String charsetName){  this(makeReadable(Objects.requireNonNull(source,"source"),toDecoder(charsetName)),WHITESPACE_PATTERN);}  }
class C{  public int clockSequence(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return clockSequence;}  }
class C{  private void andThenTest(Movie movie){  Consumer<Movie> andThenConsumer=auditMovie.andThen(persistMovie);  andThenConsumer.accept(movie);}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (SysProperties.CHECK) {    if (fromIndex > toIndex || toIndex > size) {      throw new ArrayIndexOutOfBoundsException("from=" + fromIndex + " to="+ toIndex+ " size="+ size);    }  }  System.arraycopy(data,toIndex,data,fromIndex,size - toIndex);  size-=toIndex - fromIndex;}  }
class C{  public Builder addFormDataPart(String name,String filename,RequestBody body){  return addPart(Part.createFormData(name,filename,body));}  }
class C{  protected CCBezierBy(float t,CCBezierConfig c){  super(t);  config=c;  startPosition=CGPoint.make(0,0);}  }
class C{  public void initializeDatabase(){  for (  ITmmModule module : modules) {    try {      if (module.isEnabled()) {        module.shutDown();      }      module.initializeDatabase();    } catch (    Exception e) {      LOGGER.error("problem shutting down " + module.getModuleTitle() + ": "+ e.getMessage());    }  }}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  private boolean isObjectDataBinding(String text,DataBindingProcessor dataBindingProcessor){  if (text != null && RegexpPatterns.REGEXP_CRUX_OBJECT_DATA_BINDING.matcher(text).matches()) {    String[] parts=getBindingParts(text,true);    String dataObjectAlias=dataBindingProcessor.getDataObjectAlias(parts[0]);    return (context.getDataObjects().getDataObject(dataObjectAlias) != null);  }  return false;}  }
class C{  static boolean hasClass(Element element,String cls){  checkNotNull(element);  checkNotNull(cls);  for (  String str : element.getAttribute("class").split(" ")) {    if (str.equals(cls)) {      return true;    }  }  return false;}  }
class C{  public double xmax(){  return xmax;}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  getLines(false);  HashSet<Integer> bps=new HashSet<Integer>();  for (int i=0; i < m_lines.length; i++) {    MAllocationLine line=m_lines[i];    bps.add(new Integer(line.processIt(false)));  }  updateBP(bps);  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  @SuppressWarnings({"unchecked"}) public void createAmalgPropStatVal(final String[] amalgPropIds,final BasicProperty parentBasicProperty){  LOGGER.debug("Entered into createAmalgPropStatVal, amalgPropIds(length): " + (amalgPropIds != null ? amalgPropIds.length : ZERO) + ", parentBasicProperty: "+ parentBasicProperty);  final List<PropertyStatusValues> activePropStatVal=propPerServ.findAllByNamedQuery(QUERY_PROPSTATVALUE_BY_UPICNO_CODE_ISACTIVE,parentBasicProperty.getUpicNo(),"Y",PropertyTaxConstants.PROP_CREATE_RSN);  LOGGER.debug("createAmalgPropStatVal: activePropStatVal: " + activePropStatVal);  for (  final PropertyStatusValues propstatval : activePropStatVal)   propstatval.setIsActive("N");  for (  final String amalgId : amalgPropIds)   if (amalgId != null && !amalgId.equals("")) {    final BasicProperty amalgBasicProp=(BasicProperty)getPropPerServ().findByNamedQuery(PropertyTaxConstants.QUERY_BASICPROPERTY_BY_UPICNO,amalgId);    final PropertyStatusValues amalgPropStatVal=new PropertyStatusValues();    final PropertyStatus propertyStatus=(PropertyStatus)getPropPerServ().find("from PropertyStatus where statusCode=?",PROPERTY_STATUS_MARK_DEACTIVE);    amalgPropStatVal.setIsActive("Y");    amalgPropStatVal.setPropertyStatus(propertyStatus);    amalgPropStatVal.setReferenceDate(new Date());    amalgPropStatVal.setReferenceNo("0001");    amalgPropStatVal.setRemarks("Property Amalgamated");    amalgBasicProp.addPropertyStatusValues(amalgPropStatVal);    amalgPropStatVal.setBasicProperty(amalgBasicProp);    final PropertyStatusValues propertyStatusValueschild=new PropertyStatusValues();    final PropertyStatus propertyStatuschild=(PropertyStatus)getPropPerServ().find("from PropertyStatus where statusCode=?","CREATE");    propertyStatusValueschild.setIsActive("Y");    propertyStatusValueschild.setPropertyStatus(propertyStatuschild);    propertyStatusValueschild.setReferenceDate(new Date());    propertyStatusValueschild.setReferenceNo("0001");    propertyStatusValueschild.setReferenceBasicProperty(amalgBasicProp);    parentBasicProperty.addPropertyStatusValues(propertyStatusValueschild);    propertyStatusValueschild.setBasicProperty(parentBasicProperty);    LOGGER.debug("propertyStatusValueschild: " + propertyStatusValueschild);  }  LOGGER.debug("Exiting from createAmalgPropStatVal");}  }
class C{  @Override public Void visitCompoundAssignment(CompoundAssignmentTree node,AnnotatedTypeMirror type){  if (TreeUtils.isStringCompoundConcatenation(node)) {    AnnotatedTypeMirror rhs=getAnnotatedType(node.getExpression());    AnnotatedTypeMirror lhs=getAnnotatedType(node.getVariable());    final Integer lhsRegexCount=getMinimumRegexCount(lhs);    final Integer rhsRegexCount=getMinimumRegexCount(rhs);    if (lhsRegexCount != null && rhsRegexCount != null) {      int lCount=getGroupCount(lhs.getAnnotation(Regex.class));      int rCount=getGroupCount(rhs.getAnnotation(Regex.class));      type.removeAnnotationInHierarchy(REGEX);      type.addAnnotation(createRegexAnnotation(lCount + rCount));    }  }  return null;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public PixelCountSoftReference(Image referent,ReferenceQueue<? super Image> q,int pixelCount,int hash,GraphicsConfiguration config,int w,int h,Object[] args){  super(referent,q);  this.pixelCount=pixelCount;  this.hash=hash;  this.config=config;  this.w=w;  this.h=h;  this.args=args;}  }
class C{  private void drawCircleEndpoint(Point from,Point to,Graphics g){  int diameter=12 + (int)getStrokeWidth();  double a=to.x - from.x;  double b=from.y - to.y;  double theta=Math.atan2(b,a);  int xminus=(int)(Math.cos(theta) * diameter / 2);  int yplus=(int)(Math.sin(theta) * diameter / 2);  g.fillOval(to.x - xminus - diameter / 2,to.y + yplus - diameter / 2,diameter,diameter);  Color c=g.getColor();  g.setColor(Color.white);  g.fillOval(to.x - xminus - diameter / 4 - 1,to.y + yplus - diameter / 4 - 1,(int)(diameter / 1.4),(int)(diameter / 1.4));  g.setColor(c);}  }
class C{  public void call(String name,Object value) throws IOException {  if (generator.isExcludingFieldsNamed(name) || generator.isExcludingValues(value)) {    return;  }  writeName(name);  writeValue(value);}  }
class C{  private Boolean parseBoolean(final String input){  if (input == null) {    return null;  } else {    return Boolean.parseBoolean(input);  }}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  boolean purge(final Reference<?> ref){  boolean r=parent.keyType != ReferenceStrength.HARD && key == ref;  r=r || parent.valueType != ReferenceStrength.HARD && value == ref;  if (r) {    if (parent.keyType != ReferenceStrength.HARD) {      ((Reference<?>)key).clear();    }    if (parent.valueType != ReferenceStrength.HARD) {      ((Reference<?>)value).clear();    } else     if (parent.purgeValues) {      value=null;    }  }  return r;}  }
class C{  private Json(){}  }
class C{  public CoffeeEntry(SkuDetails skuDetails,int coffeeRate,int energyRate,int candyRate){  mSkuDetails=skuDetails;  mCoffeeRate=coffeeRate;  mEnergyRate=energyRate;  mCandyRate=candyRate;}  }
class C{  @SuppressWarnings("unused") @android.webkit.JavascriptInterface public void visitStarted(String visitIdentifier,boolean visitHasCachedSnapshot){  TurbolinksLog.d("visitStarted called");  currentVisitIdentifier=visitIdentifier;  runJavascript("webView.changeHistoryForVisitWithIdentifier",visitIdentifier);  runJavascript("webView.issueRequestForVisitWithIdentifier",visitIdentifier);  runJavascript("webView.loadCachedSnapshotForVisitWithIdentifier",visitIdentifier);}  }
class C{  static boolean exits(ParseTreeNode node){  if (node instanceof Block) {    List<? extends ParseTreeNode> children=node.children();    return !children.isEmpty() && exits(children.get(children.size() - 1));  } else   if (node instanceof Conditional) {    List<? extends ParseTreeNode> children=node.children();    int n=children.size();    if ((n & 1) == 0) {      return false;    }    for (int i=1; i < n; i+=2) {      if (!exits(children.get(i))) {        return false;      }    }    return exits(children.get(n - 1));  } else   if (node instanceof BreakStmt || node instanceof ContinueStmt || node instanceof ReturnStmt|| node instanceof ThrowStmt) {    return true;  }  return false;}  }
class C{  public LdapName(String name) throws InvalidNameException {  unparsed=name;  parse();}  }
class C{  protected boolean internalFirst() throws SQLException {  boolean ret=false;  if (numRows > 0) {    cursorPos=1;    if ((getShowDeleted() == false) && (rowDeleted() == true)) {      ret=internalNext();    } else {      ret=true;    }  }  if (ret == true)   absolutePos=1; else   absolutePos=0;  return ret;}  }
class C{  public synchronized boolean performMerge(List<OsmElement> sortedWays) throws OsmIllegalOperationException {  createCheckpoint(R.string.undo_action_merge_ways);  boolean mergeOK=true;  Way previousWay=(Way)sortedWays.get(0);  for (int i=1; i < sortedWays.size(); i++) {    Way nextWay=(Way)sortedWays.get(i);    if (!getDelegator().mergeWays(previousWay,nextWay)) {      Log.d("Logic","ways " + previousWay.getDescription() + " and "+ nextWay+ " caused a merge conflict");      mergeOK=false;    }    if (previousWay.getState() == OsmElement.STATE_DELETED) {      previousWay=nextWay;    }  }  return mergeOK;}  }
class C{  @SideEffectFree public void logrb(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String bundleName,@Nullable String msg,@Nullable Throwable thrown){  throw new RuntimeException();}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return new CanvasGraphicsNode();}  }
class C{  public static IFitsHeader lookup(String key){  int keyLength=key.length();  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {    StringBuilder builder=new StringBuilder();    for (int index=0; index < keyLength; index++) {      char character=key.charAt(index);      if (Character.isDigit(character)) {        if (builder.charAt(builder.length() - 1) != 'n') {          builder.append('n');        }      } else {        builder.append(character);      }    }    return STANDARD_KEYS.get(builder.toString());  }  return STANDARD_KEYS.get(key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.084 -0500",hash_original_method="8F953C76C1FB41C208B15E25F4581FF5",hash_generated_method="857397CCD84CFD441D495018C2DC0976") public void copyFromUnchecked(float[] d){  mRS.validate();  copy1DRangeFromUnchecked(0,mCurrentCount,d);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return Boolean.valueOf(al != null && al.hasThumbnail());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static String trim(String str,boolean removeBOM,boolean removeSpecialWhiteSpace,String defaultValue){  if (str == null)   return defaultValue;  if (str.isEmpty())   return str;  if (removeBOM) {    if (str.charAt(0) == '\uFEFF')     str=str.substring(1); else     if (str.charAt(0) == '\uFFFD')     str=str.substring(1); else     if (str.charAt(0) == '\uFFFE')     str=str.substring(1); else     if (str.length() >= 2) {      if (str.charAt(0) == '\uBBEF' && str.charAt(1) == '\uFFFD')       str=str.substring(2);    }  }  if (removeSpecialWhiteSpace) {    int len=str.length();    int startIndex=0, endIndex=len - 1;    while ((startIndex < len) && isWhiteSpace(str.charAt(startIndex),true)) {      startIndex++;    }    while ((startIndex < endIndex) && isWhiteSpace(str.charAt(endIndex),true)) {      endIndex--;    }    return ((startIndex > 0) || (endIndex + 1 < len)) ? str.substring(startIndex,endIndex + 1) : str;  }  return str.trim();}  }
class C{  private void updatePerformaceLog(){  try {    Runtime runtime=Runtime.getRuntime();    double appUsedMem=(runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024;    double appTotalMem=(runtime.totalMemory()) / 1024 / 1024;    double totalMem=sigar.getMem().getTotal() / 1024 / 1024/ 1024.0;    double usedMem=(sigar.getMem().getTotal() - sigar.getMem().getFree()) / 1024 / 1024/ 1024.0;    int threads=Thread.activeCount();    long currentTime=System.currentTimeMillis();    String logEntry=fullHostName + "," + bootTime+ ","+ currentTime+ ","+ cpuLoad+ ","+ threads+ ","+ appUsedMem+ ","+ appTotalMem+ ","+ usedMem+ ","+ totalMem+ ","+ updateHtmlTime+ ","+ updatePerfLogTime;    File logFile=new File(performanceLogDir + "/" + "ServerLoad.csv");    ArrayList<String> logData=new ArrayList<>();    if (logFile.exists()) {      BufferedReader reader=new BufferedReader(new FileReader(logFile));      String line=reader.readLine();      line=reader.readLine();      while (line != null) {        logData.add(line);        line=reader.readLine();      }      reader.close();    }    while (logData.size() >= performanceLogSize) {      logData.remove(0);    }    BufferedWriter writer=new BufferedWriter(new FileWriter(logFile));    writer.write("ServerName, BootTime, UpdateTime, CpuLoad, Threads, AppMemUsage(MB), AppMemTotal(MB), UsedMem(GB), TotalMeb(GB), HtmlUpdateTime, LogUpdateTime\n");    for (    String log : logData) {      writer.write(log + "\n");    }    writer.write(logEntry + "\n");    writer.close();  } catch (  Exception e) {    log("ERROR: unable to update performace Log: " + e.getMessage());  }}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  public String toString(){  return uri.toString();}  }
class C{  public void remove(Production production){  productions.remove(production);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static CatalogEntry updateCatalogEntry(CatalogEntry domEntry,VOCatalogEntry voCatalogEntry) throws ConcurrentModificationException {  if (voCatalogEntry == null || domEntry == null) {    IllegalArgumentException e=new IllegalArgumentException("Parameters must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  verifyVersionAndKey(domEntry,voCatalogEntry);  copyAttributes(domEntry,voCatalogEntry);  return domEntry;}  }
class C{  public void popElemTemplateElement(){  m_currentTemplateElements.pop();}  }
class C{  public void push(Object obj){  stack.push(requireNonNull(obj));}  }
class C{  public static String processStatements(String sqlStatements,boolean allowDML){  return VSQLProcess.processStatements(sqlStatements,allowDML);}  }
class C{  @DSComment("Method returns IO Object") @DSSpec(DSCat.INTERNET) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.842 -0500",hash_original_method="DE0153D2AABFEE83527E2EAC5D1F68DF",hash_generated_method="29F537F9AC7BE50FF7DBE4DBA5831698") public Socket accept() throws IOException {  checkOpen();  if (!isBound()) {    throw new SocketException("Socket is not bound");  }  Socket aSocket=new Socket();  try {    implAccept(aSocket);  } catch (  IOException e) {    aSocket.close();    throw e;  }  return aSocket;}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public void removeInviteOnly(){  setMode("-i");}  }
class C{  public Element(ElementKey<?,?> elementKey){  Preconditions.checkNotNull(elementKey,"elementKey");  this.key=bindKey(elementKey,getClass());  this.state=new ElementState();}  }
class C{  public static IndexKey prepareDefaultEndIndexKey(SegmentProperties segmentProperties) throws KeyGenException {  long[] dictionarySurrogateKey=new long[segmentProperties.getDimensions().size() - segmentProperties.getNumberOfNoDictionaryDimension()];  Arrays.fill(dictionarySurrogateKey,Long.MAX_VALUE);  IndexKey endIndexKey;  byte[] dictionaryendMdkey=segmentProperties.getDimensionKeyGenerator().generateKey(dictionarySurrogateKey);  byte[] noDictionaryEndKeyBuffer=getNoDictionaryDefaultEndKey(segmentProperties);  endIndexKey=new IndexKey(dictionaryendMdkey,noDictionaryEndKeyBuffer);  return endIndexKey;}  }
class C{  public List<NamedRelatedResourceRep> listByDataCenter(URI dataCenterId){  return getList(PathConstants.CLUSTER_BY_DATACENTER_URL,dataCenterId);}  }
class C{  public Polygon2D add(Vec2D p){  if (!vertices.contains(p)) {    vertices.add(p);  }  return this;}  }
class C{  public static double gaussian(double mu,double sigma){  return mu + sigma * gaussian();}  }
class C{  public DataOutputStream openDataOutputStream() throws IOException {  return new DataOutputStream(openOutputStream());}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  supportHalfDiffX=halfDiffX;  supportYAxisValue=yAxisValue;  for (int i=0; i < length; i+=2) {    float x=points.get(i);    float y=points.get(i + 1);    double value=values.get(i + 1);    drawBar(supportSeriesRender,canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,value,paint);  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  public AbstractBlockBase<?>[] linearScanOrder(){  return linearScanOrder;}  }
class C{  public static ConstParameter integer(int i){  return new IntConstParameter(i);}  }
class C{  protected byte[] engineDigest(){  byte[] hash=new byte[DIGEST_LENGTH];  processDigest(hash,0);  return hash;}  }
class C{  public static Config convertStringToConfig(String configInString) throws JsonSyntaxException {  return new Gson().fromJson(configInString,Config.class);}  }
class C{  protected void uninstallListeners(){  list.removeFocusListener(focusListener);  list.removeMouseListener(mouseInputListener);  list.removeMouseMotionListener(mouseInputListener);  list.removePropertyChangeListener(propertyChangeListener);  list.removeKeyListener(getHandler());  ListModel model=list.getModel();  if (model != null) {    model.removeListDataListener(listDataListener);  }  ListSelectionModel selectionModel=list.getSelectionModel();  if (selectionModel != null) {    selectionModel.removeListSelectionListener(listSelectionListener);  }  focusListener=null;  mouseInputListener=null;  listSelectionListener=null;  listDataListener=null;  propertyChangeListener=null;  handler=null;}  }
class C{  public SQLDataException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public JunctionData(S source,S target,Guard<S,E> guard){  this.source=source;  this.target=target;  this.guard=guard;}  }
class C{  private static Point findMidnormalPoint(Point center,Point a,Point b,Rect area,int radius){  if (a.y == b.y) {    if (a.y < center.y) {      return new Point((a.x + b.x) / 2,center.y + radius);    }    return new Point((a.x + b.x) / 2,center.y - radius);  }  if (a.x == b.x) {    if (a.x < center.x) {      return new Point(center.x + radius,(a.y + b.y) / 2);    }    return new Point(center.x - radius,(a.y + b.y) / 2);  }  double abSlope=(a.y - b.y) / (a.x - b.x * 1.0);  double midnormalSlope=-1.0 / abSlope;  double radian=Math.tan(midnormalSlope);  int dy=(int)(radius * Math.sin(radian));  int dx=(int)(radius * Math.cos(radian));  Point point=new Point(center.x + dx,center.y + dy);  if (!inArea(point,area,0)) {    point=new Point(center.x - dx,center.y - dy);  }  return point;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static boolean isSameLength(final boolean[] array1,final boolean[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public boolean createExportGroupStep(String opId){  WorkflowStepCompleter.stepSucceded(opId);  return true;}  }
class C{  public AuthenticationUser validate(String login,String password,String entidad) throws SecurityException, ValidationException {  index++;  if (index % 2 == 0) {    throw new SecurityException(SecurityException.ERROR_USER_NOTFOUND,new String[]{login});  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getNameForIRCode(getLong(stack));}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque()) {    CompiereColor bg=CompiereColor.getDefaultBackground();    bg.paint(g,c);  }  paint(g,c);}  }
class C{  public static ZonedDateTime addTradingDays(ZonedDateTime date,int noDays){  if ((date != null) && (noDays != 0)) {    if (noDays > 0) {      for (int i=0; i < noDays; i++) {        date=date.plusDays(1);        if (!TradingCalendar.isTradingDay(date) || isHoliday(date)) {          noDays++;        }      }      return date;    } else {      for (int i=0; i > noDays; i--) {        date=date.minusDays(1);        if (!TradingCalendar.isTradingDay(date) || isHoliday(date)) {          noDays--;        }      }      return date;    }  } else {    return date;  }}  }
class C{  @Override public void serialize(OFFeaturesReply reply,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  jGen.writeNumberField("actions",reply.getActions());  jGen.writeNumberField("buffers",reply.getBuffers());  jGen.writeNumberField("capabilities",reply.getCapabilities());  jGen.writeStringField("datapathId",HexString.toHexString(reply.getDatapathId()));  jGen.writeNumberField("length",reply.getLength());  serializer.defaultSerializeField("ports",reply.getPorts(),jGen);  jGen.writeNumberField("tables",reply.getTables());  jGen.writeStringField("type",reply.getType().toString());  jGen.writeNumberField("version",reply.getVersion());  jGen.writeNumberField("xid",reply.getXid());  jGen.writeEndObject();}  }
class C{  public boolean isShowSpecialAttributes(){  return showSpecialAttributes;}  }
class C{  public boolean isPrimitiveArray(){  return primitiveArray;}  }
class C{  private void validateCyclicAliasing(String field) throws SyntaxError {  Set<String> set=new HashSet<>();  set.add(field);  if (validateField(field,set)) {    throw new SyntaxError("Field aliases lead to a cycle");  }}  }
class C{  protected void atCastToRtype(CastExpr expr) throws CompileError {  CtClass returnType=codeGen.returnType;  expr.getOprand().accept(this);  if (exprType == VOID || CodeGen.isRefType(exprType) || arrayDim > 0)   compileUnwrapValue(returnType); else   if (returnType instanceof CtPrimitiveType) {    CtPrimitiveType pt=(CtPrimitiveType)returnType;    int destType=MemberResolver.descToType(pt.getDescriptor());    exprType=destType;    arrayDim=0;    className=null;  }}  }
class C{  public SymbolTableEntryInternal steFor_call(){  return getSymbolTableEntryInternal("call",true);}  }
class C{  public int originalSize(){  return sizeCount;}  }
class C{  public void update(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  if (settings.getBoolean(BLUE_BUTTON,false)) {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchblue));  } else {    blueSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchbluelocked));  }  if (settings.getBoolean(PURPLE_BUTTON,false)) {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurple));  } else {    purpleSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchpurplelocked));  }  if (settings.getBoolean(GREEN_BUTTON,false)) {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreen));  } else {    greenSwatch.setBackgroundDrawable(getResources().getDrawable(R.drawable.swatchgreenlocked));  }  numClicks=settings.getInt(NUM_CLICKS,5);  clicksLeft.setText("" + numClicks);}  }
class C{  public void write(String string,int x,int y,Color color){  setForeground(color);  gotoPosition(x,y);  write(string);}  }
class C{  @Deprecated public XSection(String externalId){  iExternalId=externalId;}  }
class C{  public void clear(){  this.poNumber=null;  this.orderId=null;  this.firstAttemptOrderId=null;  this.billingAccountId=null;  this.billingAccountAmt=BigDecimal.ZERO;  this.nextItemSeq=1;  this.agreementId=null;  this.quoteId=null;  this.defaultItemDeliveryDate=null;  this.defaultItemComment=null;  this.orderAdditionalEmails=null;  this.readOnlyCart=false;  this.lastListRestore=null;  this.orderTermSet=false;  this.orderTerms.clear();  this.adjustments.clear();  this.expireSingleUsePayments();  this.cartLines.clear();  this.itemGroupByNumberMap.clear();  this.clearPayments();  this.shipInfo.clear();  this.contactMechIdsMap.clear();  this.internalOrderNotes.clear();  this.orderNotes.clear();  this.attributes.clear();  this.orderAttributes.clear();  for (  Map.Entry<String,List<String>> me : this.additionalPartyRole.entrySet()) {    ((LinkedList<String>)me.getValue()).clear();  }  this.additionalPartyRole.clear();  this.freeShippingProductPromoActions.clear();  this.desiredAlternateGiftByAction.clear();  this.productPromoUseInfoList.clear();  this.productPromoCodes.clear();  if (ProductStoreWorker.autoSaveCart(this.getDelegator(),this.getProductStoreId())) {    GenericValue ul=this.getUserLogin();    if (ul == null) {      ul=this.getAutoUserLogin();    }    if (ul != null && !"anonymous".equals(ul.getString("userLoginId"))) {      this.autoSaveListId=null;    }    if (autoSaveListId == null) {      try {        autoSaveListId=ShoppingListEvents.getAutoSaveListId(this.getDelegator(),null,null,ul,this.getProductStoreId());      } catch (      GeneralException e) {        Debug.logError(e,module);      }    }    if (autoSaveListId != null) {      try {        org.ofbiz.order.shoppinglist.ShoppingListEvents.clearListInfo(this.getDelegator(),autoSaveListId);      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }    this.lastListRestore=null;    this.autoSaveListId=null;  }}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static <V>Closure<V> buildMemoizeFunction(final MemoizeCache<Object,Object> cache,final Closure<V> closure){  return new MemoizeFunction<V>(cache,closure);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,null,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 204) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private static ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int index,int size){  throw new ArrayIndexOutOfBoundsException(size,index);}  }
class C{  public Builder withLeaseOfferExpirySecs(long leaseOfferExpirySecs){  this.leaseOfferExpirySecs=leaseOfferExpirySecs;  return this;}  }
class C{  public Result filterOnly(List<String> sources){  Result ret=new Result();  for (  ResultEntry l : this.log) {    if (sources.contains(l.getSource())) {      ret.add(l);    }  }  return ret;}  }
class C{  public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void testField(){  checkKey mk=new checkKey();  assertEquals("Incorrect serialVersionUID",mk.getSerVerUID(),6603384152749567654L);}  }
class C{  private void mergeTableRows(final int border_width){  String separator="</tr>\n<tr>";  if (!isXHTML) {    separator="\n";  }  master=((Vector_Int)lines.elementAt(line_order[0])).elementAt(0);  int item;  for (int rr=1; rr < max_rows; rr++) {    item=((Vector_Int)lines.elementAt(line_order[rr])).elementAt(0);    if (content[master] == null) {      master=item;    } else     if (content[item] != null) {      merge(master,item,separator,false);    }  }  if (isXHTML) {    if (border_width == 0) {      content[master].insert(0,"<TABLE>\n<tr>");      content[master].append("</tr>\n</TABLE>\n");    } else {      final StringBuilder startTag=new StringBuilder("<TABLE border='");      startTag.append(border_width);      startTag.append("'>\n<tr>");      startTag.append(content[master]);      content[master]=startTag;      content[master].append("</tr>\n</TABLE>\n");    }  }}  }
class C{  public static int dpToPx(@NonNull Resources res,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,res.getDisplayMetrics());}  }
class C{  public void addItemFromInflater(Preference preference){  addPreference(preference);}  }
class C{  public IllegalConnectorArgumentsException(String s,List<String> names){  super(s);  this.names=new ArrayList<String>(names);}  }
class C{  public QRDecomposition(double[][] A,int m,int n){  this.QR=VMath.copy(A);  this.m=QR.length;  this.n=QR[0].length;  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=MathUtil.fastHypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  public static DateFormat createUTCDateFormatter(String dateFormat){  DateFormat formatter=new SimpleDateFormat(dateFormat);  formatter.setTimeZone(TimeZone.getTimeZone("UTC"));  return formatter;}  }
class C{  public void writeRegister(final long tid,final String register,final long value) throws DebugException {  Preconditions.checkNotNull(register,"Error: Register argument can not be null");  Preconditions.checkNotNull(m_debugger.getProcessManager().getTargetInformation(),"Error: Target information string has not yet been received");  final List<RegisterDescription> registers=m_debugger.getProcessManager().getTargetInformation().getRegisters();  int index=0;  for (  final RegisterDescription description : registers) {    if (description.getName().equalsIgnoreCase(register)) {      if (!description.isEditable()) {        throw new IllegalArgumentException("Error: Selected register can not be edited");      }      break;    }    index++;  }  if (index == registers.size()) {    throw new IllegalArgumentException("Error: Unknown register name");  }  try {    m_debugger.setRegister(tid,index,BigInteger.valueOf(value));  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  public void freeHessian2StreamingOutput(Hessian2StreamingOutput out){  if (out == null)   return;  freeHessian2Output(out.getHessian2Output());}  }
class C{  public static IPackageFragmentRoot addSourceContainerWithImport(IJavaProject jproject,String containerName,File zipFile,String containerEncoding) throws InvocationTargetException, CoreException, IOException {  return addSourceContainerWithImport(jproject,containerName,zipFile,containerEncoding,new Path[0]);}  }
class C{  @Override public boolean equals(Object other){  return other instanceof ParameterizedType ? equals((ParameterizedType)other) : false;}  }
class C{  static <K>void bug(Set<Collection<K>> set,Collection<K> c,K k){  set.add(c);  c.add(k);}  }
class C{  public void release(){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);    EGL14.eglDestroyContext(mEGLDisplay,mEGLContext);    EGL14.eglReleaseThread();    EGL14.eglTerminate(mEGLDisplay);  }  mEGLDisplay=EGL14.EGL_NO_DISPLAY;  mEGLContext=EGL14.EGL_NO_CONTEXT;  mEGLConfig=null;}  }
class C{  static int nextPowerOfTwo(int val){  int highestBit=Integer.highestOneBit(val);  if (highestBit == val) {    return val;  } else {    return highestBit << 1;  }}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileSorter.class.toString(),args);  String processedFolder=args[0];  int numberOfThreads=Integer.parseInt(args[1]);  ExecutorService threadExecutor=Executors.newFixedThreadPool(numberOfThreads);  List<MonthSorter> jobs=new ArrayList<MonthSorter>();  List<File> inputFolders=GrainUtils.getVehicleFolders(processedFolder);  for (  File month : inputFolders) {    LOG.info("------>  Sorting " + month.getAbsolutePath());    MonthSorter job=new MonthSorter(month.getAbsolutePath());    threadExecutor.execute(job);    jobs.add(job);    LOG.info("------>  Done sorting ");  }  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  Header.printFooter();}  }
class C{  private static String mapPOS(String posTag){  if (posTag.startsWith("NN")) {    return "N";  } else   if (posTag.startsWith("VB")) {    return "V";  } else   if (posTag.startsWith("JJ")) {    return "A";  } else   if (posTag.startsWith("RB")) {    return "ADV";  }  return "O";}  }
class C{  public WindowSurface(EglCore eglCore,SurfaceTexture surfaceTexture){  super(eglCore);  createWindowSurface(surfaceTexture);}  }
class C{  public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public DefaultBoxAndWhiskerCategoryDataset(){  this.data=new KeyedObjects2D();  this.minimumRangeValue=Double.NaN;  this.minimumRangeValueRow=-1;  this.minimumRangeValueColumn=-1;  this.maximumRangeValue=Double.NaN;  this.maximumRangeValueRow=-1;  this.maximumRangeValueColumn=-1;}  }
class C{  public BoundType lowerBoundType(){  return lbt;}  }
class C{  public static short min(short[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  short min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public static void sendEvent(int category,int action,int label,long value){  sendEvent(getString(category),getString(action),getString(label),value);}  }
class C{  public RectangleConstraint toFixedHeight(double height){  return new RectangleConstraint(this.width,this.widthRange,this.widthConstraintType,height,this.heightRange,LengthConstraintType.FIXED);}  }
class C{  void test(Kind k) throws Exception {  System.err.println("Test " + (++count) + ": "+ k);  File testDir=new File("test" + count);  File srcDir=new File(testDir,"src");  srcDir.mkdirs();  File classesDir=new File(testDir,"classes");  classesDir.mkdirs();  List<String> opts=new ArrayList<String>();  opts.add("-d");  opts.add(classesDir.getPath());  File f=writeFile(srcDir,k);  int rc=compile(opts,f);  if (rc != 0) {    error("compilation failed: rc=" + rc);    return;  }  check(classesDir,"Test.class","Test$Inner.class","Test$1.class");}  }
class C{  public static String mechanismInfoFlagsToString(long flags){  return mechanismInfoFlags.toString(flags);}  }
class C{  public ModbusTCPTransaction(ModbusRequest request){  setRequest(request);}  }
class C{  public boolean removeDecoration(ShapeDecoration decoration){  return decorations.remove(decoration);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  private void parsePresentityWatcher(Node node){}  }
class C{  public static void fill(byte[] array,byte x){  for (int i=0; i < array.length; i++) {    array[i]=x;  }}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public NameValue(String name,String value){  super();  this.name=name;  this.value=value;}  }
class C{  public OsLib(){}  }
class C{  public void adjustTypeFromChildrenTypes(){  if (getType() != TextDiffTypeEnum.CHANGED) {    return;  }  TextDiffTypeEnum candidateType=null;  for (Iterator<Fragment> children=getChildrenIterator(); children != null && children.hasNext(); ) {    TextDiffTypeEnum fragmentType=children.next().getType();    if (fragmentType == null) {      continue;    }switch (fragmentType) {case CHANGED:      return;case INSERT:    if (candidateType == null) {      candidateType=TextDiffTypeEnum.INSERT;    } else     if (candidateType != TextDiffTypeEnum.INSERT) {      return;    }  break;case DELETED:if (candidateType == null) {  candidateType=TextDiffTypeEnum.DELETED;} else if (candidateType != TextDiffTypeEnum.DELETED) {  return;}break;default :return;}}if (candidateType != null) {setType(candidateType);}}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_FIELD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:    return getDefinedTypeElement();case N4JSPackage.N4_FIELD_DECLARATION___IS_CONST:  return isConst();case N4JSPackage.N4_FIELD_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.N4_FIELD_DECLARATION___IS_VALID:return isValid();case N4JSPackage.N4_FIELD_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.N4_FIELD_DECLARATION___GET_NAME:return getName();}return super.eInvoke(operationID,arguments);}  }
class C{  protected int doOpcode(int pos,byte[] code) throws BadBytecode {  try {    int op=code[pos] & 0xff;    if (op < 96)     if (op < 54)     return doOpcode0_53(pos,code,op); else     return doOpcode54_95(pos,code,op); else     if (op < 148)     return doOpcode96_147(pos,code,op); else     return doOpcode148_201(pos,code,op);  } catch (  ArrayIndexOutOfBoundsException e) {    throw new BadBytecode("inconsistent stack height " + e.getMessage(),e);  }}  }
class C{  public OutlierResult run(Database database,Relation<N> spatial,Relation<O> attributes){  if (LOG.isDebugging()) {    LOG.debug("Dimensionality: " + RelationUtil.dimensionality(attributes));  }  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,spatial);  CovarianceMatrix covmaker=new CovarianceMatrix(RelationUtil.dimensionality(attributes));  WritableDataStore<double[]> deltas=DataStoreUtil.makeStorage(attributes.getDBIDs(),DataStoreFactory.HINT_TEMP,double[].class);  for (DBIDIter iditer=attributes.iterDBIDs(); iditer.valid(); iditer.advance()) {    final O obj=attributes.get(iditer);    final DBIDs neighbors=npred.getNeighborDBIDs(iditer);    double[] mean=Centroid.make(attributes,neighbors).getArrayRef();    double[] delta=minusEquals(obj.toArray(),mean);    deltas.put(iditer,delta);    covmaker.put(delta);  }  double[] mean=covmaker.getMeanVector();  double[][] cmati=inverse(covmaker.destroyToSampleMatrix());  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(attributes.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=attributes.iterDBIDs(); iditer.valid(); iditer.advance()) {    final double score=mahalanobisDistance(cmati,deltas.get(iditer),mean);    minmax.put(score);    scores.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("mean multiple attributes spatial outlier","mean-multipleattributes-outlier",scores,attributes.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof Race) {    Race otherRace=(Race)other;    return id.equals(otherRace.id);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  float progress=0;  String inputHeader=null;  String outputHeader=null;  double range=0;  double sill=0;  double nugget=0;  int numIterations=1000;  boolean fastMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      range=Double.parseDouble(args[i]);    } else     if (i == 3) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 4) {      fastMode=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int i, j, k, m, n;    int edge1, edge2;    double pnt1x=0, pnt1y=0, pnt2x=0, pnt2y=0;    double z;    int diagonalSize=0;    Random generator=new Random();    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    diagonalSize=(int)(Math.sqrt(rows * rows + cols * cols));    int filterHalfSize=(int)(range / (2 * image.getCellSizeX()));    int filterSize=filterHalfSize * 2 + 1;    int[] cellOffsets=new int[filterSize];    for (i=0; i < filterSize; i++) {      cellOffsets[i]=i - filterHalfSize;    }    double w=Math.sqrt(36d / (filterHalfSize * (filterHalfSize + 1) * filterSize));    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("blue_white_red.pal");    if (!fastMode) {      updateProgress("Loop 1 of 2: ",0);      for (i=0; i < numIterations; i++) {        double[] T=new double[diagonalSize + 2 * filterHalfSize];        for (j=0; j < diagonalSize; j++) {          T[j]=generator.nextGaussian();        }        double[] y=new double[diagonalSize];        for (j=0; j < diagonalSize; j++) {          z=0;          for (k=0; k < filterSize; k++) {            m=cellOffsets[k];            z+=m * T[j + filterHalfSize + m];          }          y[j]=w * z;        }        edge1=generator.nextInt(4);        edge2=edge1;        do {          edge2=generator.nextInt(4);        } while (edge2 == edge1);switch (edge1) {case 0:          pnt1x=0;        pnt1y=generator.nextDouble() * (rows - 1);      break;case 1:    pnt1x=generator.nextDouble() * (cols - 1);  pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}z=outputFile.getValue(row,col) + y[p];outputFile.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outputFile.getValue(row,col);value=(float)(z / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}} else {double[][] output=new double[rows][cols];updateProgress("Loop 1 of 2: ",0);for (i=0; i < numIterations; i++) {double[] T=new double[diagonalSize + 2 * filterHalfSize];for (j=0; j < diagonalSize; j++) {T[j]=generator.nextGaussian();}double[] y=new double[diagonalSize];for (j=0; j < diagonalSize; j++) {z=0;for (k=0; k < filterSize; k++) {m=cellOffsets[k];z+=m * T[j + filterHalfSize + m];}y[j]=w * z;}edge1=generator.nextInt(4);edge2=edge1;do {edge2=generator.nextInt(4);} while (edge2 == edge1);switch (edge1) {case 0:pnt1x=0;pnt1y=generator.nextDouble() * (rows - 1);break;case 1:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}output[row][col]+=y[p];}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {value=(float)(output[row][col] / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}}outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputFile.addMetadataEntry("Created on " + new Date());image.close();outputFile.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public ActiveMQXAResourceWrapperImpl(XAResource xaResource,Map<String,Object> properties){  this.xaResource=xaResource;  this.productName=(String)properties.get(ACTIVEMQ_PRODUCT_NAME);  this.productVersion=(String)properties.get(ACTIVEMQ_PRODUCT_VERSION);  String jndiName=(String)properties.get(ACTIVEMQ_JNDI_NAME);  String nodeId="NodeId:" + properties.get(ACTIVEMQ_NODE_ID);  this.jndiNameNodeId=jndiName == null ? nodeId : jndiName + " " + nodeId;}  }
class C{  public KdTree(){  this(0.0);}  }
class C{  public AbstractKeyValueService(ExecutorService executor){  this.executor=executor;  this.tracingPrefs=new TracingPrefsConfig();  this.scheduledExecutor=PTExecutors.newSingleThreadScheduledExecutor(new NamedThreadFactory(getClass().getSimpleName() + "-tracing-prefs",true));  this.scheduledExecutor.scheduleWithFixedDelay(this.tracingPrefs,0,1,TimeUnit.MINUTES);}  }
class C{  public void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_needToCallStartDocument=false;    if (m_inEntityRef)     return;    m_needToOutputDocTypeDecl=true;    m_startNewLine=false;    final String version=getXMLVersion();    if (getOmitXMLDeclaration() == false) {      String encoding=Encodings.getMimeEncoding(getEncoding());      String standalone;      if (m_standaloneWasSpecified) {        standalone=" standalone=\"" + getStandalone() + "\"";      } else {        standalone="";      }      try {        final java.io.Writer writer=m_writer;        writer.write("<?xml version=\"");        writer.write(version);        writer.write("\" encoding=\"");        writer.write(encoding);        writer.write('\"');        writer.write(standalone);        writer.write("?>");        if (m_doIndent) {          if (m_standaloneWasSpecified || getDoctypePublic() != null || getDoctypeSystem() != null) {            writer.write(m_lineSep,0,m_lineSepLen);          }        }      } catch (      IOException e) {        throw new SAXException(e);      }    }  }}  }
class C{  private Item prepareItem(String name,int price){  Item prototype=SingletonRepository.getEntityManager().getItem(name);  Item item=new ItemInformation(prototype);  item.put("price",-price);  item.put("description_info",item.describe());  item.put("description",item.describe());  return item;}  }
class C{  public static synchronized void it(String description,UnsafeBlock block){  it(description,identity(),block);}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedEventId(String eventId,boolean terminate) throws InterruptedException {  Future<ReplDBMSHeader> watch=progressTracker.watchForProcessedEventId(eventId,terminate);  notifyThreads();  return watch;}  }
class C{  private long readAll(InputStream is) throws IOException {  long count=0;  int n=0;  byte[] buffer=new byte[1024 * 4];  while (EOF != (n=is.read(buffer))) {    count+=n;  }  return count;}  }
class C{  @Override public Long hset(final byte[] key,final byte[] field,final byte[] value){  checkIsInMultiOrPipeline();  client.hset(key,field,value);  return client.getIntegerReply();}  }
class C{  public StoredField(String name,BytesRef value){  super(name,value,TYPE);}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  private static boolean parseVersion(String version,int[] maj,int[] min,int[] rev,int[] point){  int major=0;  int minor=0;  int revision=0;  int pnt=0;  boolean isSnapshot=false;  try {    String tmpStr=version;    if (tmpStr.toLowerCase().endsWith("-snapshot")) {      tmpStr=tmpStr.substring(0,tmpStr.toLowerCase().indexOf("-snapshot"));      isSnapshot=true;    }    tmpStr=tmpStr.replace('-','.');    if (tmpStr.indexOf(".") > -1) {      major=Integer.parseInt(tmpStr.substring(0,tmpStr.indexOf(".")));      tmpStr=tmpStr.substring(tmpStr.indexOf(".") + 1);      if (tmpStr.indexOf(".") > -1) {        minor=Integer.parseInt(tmpStr.substring(0,tmpStr.indexOf(".")));        tmpStr=tmpStr.substring(tmpStr.indexOf(".") + 1);        if (tmpStr.indexOf(".") > 0) {          revision=Integer.parseInt(tmpStr.substring(0,tmpStr.indexOf(".")));          tmpStr=tmpStr.substring(tmpStr.indexOf(".") + 1);          if (!tmpStr.equals("")) {            pnt=Integer.parseInt(tmpStr);          } else {            pnt=0;          }        } else {          if (!tmpStr.equals("")) {            revision=Integer.parseInt(tmpStr);          } else {            revision=0;          }        }      } else {        if (!tmpStr.equals("")) {          minor=Integer.parseInt(tmpStr);        } else {          minor=0;        }      }    } else {      if (!tmpStr.equals("")) {        major=Integer.parseInt(tmpStr);      } else {        major=0;      }    }  } catch (  Exception e) {    e.printStackTrace();    major=-1;    minor=-1;    revision=-1;  } finally {    maj[0]=major;    min[0]=minor;    rev[0]=revision;    point[0]=pnt;  }  return isSnapshot;}  }
class C{  public Object invokeMethod(String name,Object args){  Object val=null;  if (args != null && Object[].class.isAssignableFrom(args.getClass())) {    Object[] arr=(Object[])args;    if (arr.length == 1) {      val=arr[0];    } else     if (isIterableOrArrayAndClosure(arr)) {      Closure<?> closure=(Closure<?>)arr[1];      Iterator<?> iterator=(arr[0] instanceof Iterable) ? ((Iterable)arr[0]).iterator() : Arrays.asList((Object[])arr[0]).iterator();      List<Object> list=new ArrayList<Object>();      while (iterator.hasNext()) {        list.add(curryDelegateAndGetContent(closure,iterator.next()));      }      val=list;    } else {      val=Arrays.asList(arr);    }  }  content.put(name,val);  return val;}  }
class C{  @Override public String resolve(String hostname){  return rack;}  }
class C{  public final void testValidateSucceeds(){  EditText editText=new EditText(getContext());  editText.setText("abc");  EqualValidator equalValidator=new EqualValidator("foo",editText);  assertTrue(equalValidator.validate("abc"));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void normal(){  if (headerArrowEnabled) {    if (mState == STATE_READY) {      mArrowImageView.startAnimation(mRotateDownAnim);    }    if (mState == STATE_REFRESHING) {      mArrowImageView.clearAnimation();    }  }  mHintTextView.setText(R.string.pulltorefresh_listview_header_hint_normal);}  }
class C{  public void connectKNNOutput(SharedObject<KNNList> output){  this.out=output;}  }
class C{  public static File findLog4jConfigInCurrentDir(){  return ConfigLocator.findConfigInWorkingDirectory();}  }
class C{  public param addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public final String identifier(){  return identifier;}  }
class C{  void selectElement(int selectedIndex){}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError("CodeTemplate implementation not Cloneable: " + getClass().getName());  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void validateStorageSystemExists(String ipAddress,Integer portNumber){  String systemUniqueKey=ipAddress + "-" + portNumber;  List<StorageSystem> systems=CustomQueryUtility.getActiveStorageSystemByMgmAccessId(_dbClient,systemUniqueKey);  if (systems != null && !systems.isEmpty()) {    throw APIException.badRequests.invalidParameterProviderStorageSystemAlreadyExists("mgmtAccessPoint",systemUniqueKey);  }}  }
class C{  public String toString(){  return getName();}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateConsistencyGroup(@PathParam("id") final URI id,final BlockConsistencyGroupUpdate param){  BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(id);  StorageDriverManager storageDriverManager=(StorageDriverManager)StorageDriverManager.getApplicationContext().getBean(StorageDriverManager.STORAGE_DRIVER_MANAGER);  if (!param.hasEitherAddOrRemoveVolumes()) {    throw APIException.badRequests.noVolumesToBeAddedRemovedFromCG();  }  StorageSystem cgStorageSystem=null;  if (consistencyGroup.isRPProtectedCG()) {    throw APIException.badRequests.operationNotAllowedOnRPVolumes();  }  if ((!consistencyGroup.created() || NullColumnValueGetter.isNullURI(consistencyGroup.getStorageController())) && param.hasVolumesToAdd()) {    BlockObject bo=BlockObject.fetch(_dbClient,param.getAddVolumesList().getVolumes().get(0));    cgStorageSystem=_permissionsHelper.getObjectById(bo.getStorageController(),StorageSystem.class);  } else {    cgStorageSystem=_permissionsHelper.getObjectById(consistencyGroup.getStorageController(),StorageSystem.class);  }  String systemType=cgStorageSystem.getSystemType();  if (!storageDriverManager.isDriverManaged(cgStorageSystem.getSystemType())) {    if (!systemType.equals(DiscoveredDataObject.Type.vplex.name()) && !systemType.equals(DiscoveredDataObject.Type.vnxblock.name()) && !systemType.equals(DiscoveredDataObject.Type.vmax.name())&& !systemType.equals(DiscoveredDataObject.Type.vnxe.name())&& !systemType.equals(DiscoveredDataObject.Type.unity.name())&& !systemType.equals(DiscoveredDataObject.Type.ibmxiv.name())&& !systemType.equals(DiscoveredDataObject.Type.scaleio.name())&& !systemType.equals(DiscoveredDataObject.Type.xtremio.name())) {      throw APIException.methodNotAllowed.notSupported();    }  }  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(cgStorageSystem);  List<URI> volIds=null;  Set<URI> addSet=new HashSet<URI>();  boolean isReplica=true;  if (param.hasVolumesToAdd()) {    volIds=param.getAddVolumesList().getVolumes();    addSet.addAll(volIds);    URI volId=volIds.get(0);    if (URIUtil.isType(volId,Volume.class)) {      Volume volume=_permissionsHelper.getObjectById(volId,Volume.class);      ArgValidator.checkEntity(volume,volId,false);      if (!BlockFullCopyUtils.isVolumeFullCopy(volume,_dbClient)) {        isReplica=false;      }    }  }  List<Volume> cgVolumes=blockServiceApiImpl.getActiveCGVolumes(consistencyGroup);  boolean volsAlreadyInCG=false;  if (!isReplica && cgVolumes != null && !cgVolumes.isEmpty()) {    Collection<URI> cgVolIds=transform(cgVolumes,fctnDataObjectToID());    if (addSet.size() == cgVolIds.size()) {      volsAlreadyInCG=addSet.containsAll(cgVolIds);    }  }  if (param.hasBothAddAndRemoveVolumes()) {    Set<URI> removeSet=new HashSet<URI>(param.getRemoveVolumesList().getVolumes());    addSet.retainAll(removeSet);    if (!addSet.isEmpty()) {      throw APIException.badRequests.sameVolumesInAddRemoveList();    }  }  if (cgStorageSystem.getUsingSmis80() && cgStorageSystem.deviceIsType(Type.vmax)) {    if (_log.isDebugEnabled()) {      _log.debug("CG can have replicas for VMAX with SMI-S 8.x");    }  } else   if (param.hasVolumesToRemove() || (!isReplica && !volsAlreadyInCG)) {    URIQueryResultList cgSnapshotsResults=new URIQueryResultList();    _dbClient.queryByConstraint(getBlockSnapshotByConsistencyGroup(id),cgSnapshotsResults);    Iterator<URI> cgSnapshotsIter=cgSnapshotsResults.iterator();    while (cgSnapshotsIter.hasNext()) {      BlockSnapshot cgSnapshot=_dbClient.queryObject(BlockSnapshot.class,cgSnapshotsIter.next());      if ((cgSnapshot != null) && (!cgSnapshot.getInactive())) {        throw APIException.badRequests.notAllowedWhenCGHasSnapshots();      }    }    if (!cgStorageSystem.deviceIsType(Type.vnxblock)) {      if (cgVolumes != null && !cgVolumes.isEmpty()) {        Volume firstVolume=cgVolumes.get(0);        StringSet mirrors=firstVolume.getMirrors();        if (mirrors != null && !mirrors.isEmpty()) {          throw APIException.badRequests.notAllowedWhenCGHasMirrors();        }      }      getFullCopyManager().verifyConsistencyGroupCanBeUpdated(consistencyGroup,cgVolumes);    }  }  List<URI> removeVolumesList=new ArrayList<URI>();  if (param.hasVolumesToRemove()) {    for (    URI volumeURI : param.getRemoveVolumesList().getVolumes()) {      if (URIUtil.isType(volumeURI,Volume.class)) {        Volume volume=_permissionsHelper.getObjectById(volumeURI,Volume.class);        ArgValidator.checkEntity(volume,volumeURI,false);        if (volume.checkForSRDF()) {          throw APIException.badRequests.notAllowedOnSRDFConsistencyGroups();        }        if (!BlockFullCopyUtils.isVolumeFullCopy(volume,_dbClient)) {          blockServiceApiImpl.verifyRemoveVolumeFromCG(volume,cgVolumes);        }      }      removeVolumesList.add(volumeURI);    }  }  URI xivPoolURI=null;  if (systemType.equals(DiscoveredDataObject.Type.ibmxiv.name()) && !cgVolumes.isEmpty()) {    Volume firstVolume=cgVolumes.get(0);    xivPoolURI=firstVolume.getPool();  }  List<URI> addVolumesList=new ArrayList<URI>();  List<Volume> volumes=new ArrayList<Volume>();  if (param.hasVolumesToAdd()) {    for (    URI volumeURI : param.getAddVolumesList().getVolumes()) {      Volume volume=null;      if (!isReplica) {        volume=_permissionsHelper.getObjectById(volumeURI,Volume.class);        ArgValidator.checkEntity(volume,volumeURI,false);        blockServiceApiImpl.verifyAddVolumeToCG(volume,consistencyGroup,cgVolumes,cgStorageSystem);        volumes.add(volume);      } else {        verifyAddReplicaToCG(volumeURI,consistencyGroup,cgStorageSystem);      }      if (systemType.equals(DiscoveredDataObject.Type.ibmxiv.name())) {        if (xivPoolURI == null) {          xivPoolURI=volume.getPool();        } else {          if (!xivPoolURI.equals(volume.getPool())) {            throw APIException.badRequests.invalidParameterIBMXIVConsistencyGroupVolumeNotInPool(volumeURI,xivPoolURI);          }        }      }      addVolumesList.add(volumeURI);    }    if (!volumes.isEmpty()) {      blockServiceApiImpl.verifyReplicaCount(volumes,cgVolumes,volsAlreadyInCG);    }  }  String taskId=UUID.randomUUID().toString();  return blockServiceApiImpl.updateConsistencyGroup(cgStorageSystem,cgVolumes,consistencyGroup,addVolumesList,removeVolumesList,taskId);}  }
class C{  protected String buildWriteExpression(String widgetPropertyPath,String uiObjectVariable) throws NoSuchFieldException {  StringBuilder writeExpression=new StringBuilder();  String uiObjectVar=getUIObjectVar(WIDGET_VAR_REF);  boolean hasUiObjectVariable=!StringUtils.isEmpty(uiObjectVariable);  boolean createAuxiliaryVariable=hasUiObjectExpression() && !hasUiObjectVariable;  uiObjectVariable=createAuxiliaryVariable ? ViewFactoryCreator.createVariableName("uiObjectVariable") : (hasUiObjectVariable ? uiObjectVariable : uiObjectVar);  if (createAuxiliaryVariable) {    writeExpression.append(getUiObjectClassName() + " " + uiObjectVariable+ " = "+ uiObjectVar+ ";\n");  }  writeExpression.append("if (" + uiObjectVariable + " != null)\n");  if (nativeWrapperOrElement) {    String propertySetter=DataBindingNativeTypeResolver.resolveTypeForProperty(widgetPropertyPath).getSetter();    writeExpression.append(uiObjectVariable + "." + propertySetter+ "("+ EscapeUtils.quote(widgetPropertyPath)+ ","+ getDataObjectReadExpression()+ ");");  } else {    JClassUtils.buildSetValueExpression(writeExpression,uiObjectType,widgetPropertyPath,uiObjectVariable,getDataObjectReadExpression());  }  return writeExpression.toString();}  }
class C{  public void verifyVisibleHighResIcons(int pageNo){  CellLayout page=getPageAt(pageNo);  if (page != null) {    ShortcutAndWidgetContainer parent=page.getShortcutsAndWidgets();    for (int i=parent.getChildCount() - 1; i >= 0; i--) {      ((BubbleTextView)parent.getChildAt(i)).verifyHighRes();    }  }}  }
class C{  public static <T>T defaultIfNull(T... values){  if (values != null) {    for (    T value : values) {      if (value != null) {        return value;      }    }  }  return null;}  }
class C{  private Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.put1(INT).put4(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public boolean isOpen(){  return isOpen;}  }
class C{  public AccountHeaderBuilder addProfiles(@NonNull IProfile... profiles){  if (this.mProfiles == null) {    this.mProfiles=new ArrayList<>();  }  Collections.addAll(this.mProfiles,IdDistributor.checkIds(profiles));  return this;}  }
class C{  protected Property addCustomPasswordProperty(Map<String,Property> properties,String name){  Property prop=addCustomProperty(properties,name);  if (prop != null) {    prop.setPasswordField(true);  }  return prop;}  }
class C{  public static String asPDFDocEncoded(String basicString){  final StringBuilder buf=new StringBuilder(basicString.length());  for (int i=0; i < basicString.length(); ++i) {    final char c=PDF_DOC_ENCODING_MAP[basicString.charAt(i) & 0xFF];    buf.append(c);  }  return buf.toString();}  }
class C{  public static StatListenerMessage create(long timestamp,int maxChanges){  StatListenerMessage m=new StatListenerMessage();  m.timestamp=timestamp;  m.changeCount=0;  m.listenerIds=new int[maxChanges];  m.values=new double[maxChanges];  return m;}  }
class C{  public void sendDeleteEntity(int id){  ArrayList<Integer> ids=new ArrayList<Integer>(1);  ids.add(id);  sendDeleteEntities(ids);}  }
class C{  private static void sort(float[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        float ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        float a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      float last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    float t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    float t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    float t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    float t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    float pivot1=a[e2];    float pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      float ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        float ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    float pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      float ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public static Chest chest(){  return getChest(DEFAULT_DB_NAME);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL__REFERENCES:    return ((InternalEList<?>)getReferences()).basicRemove(otherEnd,msgs);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK:  return basicSetFunctionblock(null,msgs);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENTITIES:return ((InternalEList<?>)getEntities()).basicRemove(otherEnd,msgs);case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENUMS:return ((InternalEList<?>)getEnums()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private HttpHeaderParser(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.440 -0500",hash_original_method="742B342269A43CEE9B6B4FB04BAA47B5",hash_generated_method="0A7ABDB13E39D8843019F448D0B1F42C") public static int toaFromString(String s){  if (s != null && s.length() > 0 && s.charAt(0) == '+') {    return TOA_International;  }  return TOA_Unknown;}  }
class C{  private Object buildBuiltinObject(String typeName,JdbcTypeField[] fields,Map<String,Integer> loadColIdxs,ResultSet rs) throws CacheLoaderException {  try {    JdbcTypeField field=fields[0];    Integer colIdx=columnIndex(loadColIdxs,field.getDatabaseFieldName());    return transformer.getColumnValue(rs,colIdx,field.getJavaFieldType());  } catch (  SQLException e) {    throw new CacheLoaderException("Failed to read object of class: " + typeName,e);  }}  }
class C{  public XYValueSeries(String title){  super(title);}  }
class C{  Builder addQueryParameter(String name,String value){  if (name == null)   throw new IllegalArgumentException("name == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(name,QUERY_COMPONENT_ENCODE_SET,false,true));  encodedQueryNamesAndValues.add(value != null ? canonicalize(value,QUERY_COMPONENT_ENCODE_SET,false,true) : null);  return this;}  }
class C{  public static double[] interp(double[] x,double[] xp,double[] yp){  double[] y=new double[x.length];  int i=0;  int ip=0;  while (i < x.length && x[i] < xp[0])   i++;  while (ip < xp.length && i < x.length) {    while (ip < xp.length && xp[ip] <= x[i])     ip++;    if (ip >= xp.length)     break;    double dy=yp[ip] - yp[ip - 1];    double dx=xp[ip] - xp[ip - 1];    y[i]=yp[ip - 1] + dy / dx * (x[i] - xp[ip - 1]);    i++;  }  return y;}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,TestInstances.CLASS_IS_LAST,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public void expandNotificationsPanel(){  try {    final IStatusBarService svc=getService();    if (svc != null) {      svc.expandNotificationsPanel();    }  } catch (  RemoteException ex) {    throw new RuntimeException(ex);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  double bestVal=Double.MAX_VALUE, currVal;  double bestPoint=-Double.MAX_VALUE;  int bestAtt=-1, numClasses;  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  if (instances.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_ZeroR=new weka.classifiers.rules.ZeroR();    m_ZeroR.buildClassifier(instances);    return;  } else {    m_ZeroR=null;  }  double[][] bestDist=new double[3][instances.numClasses()];  m_Instances=new Instances(instances);  if (m_Instances.classAttribute().isNominal()) {    numClasses=m_Instances.numClasses();  } else {    numClasses=1;  }  boolean first=true;  for (int i=0; i < m_Instances.numAttributes(); i++) {    if (i != m_Instances.classIndex()) {      m_Distribution=new double[3][numClasses];      if (m_Instances.attribute(i).isNominal()) {        currVal=findSplitNominal(i);      } else {        currVal=findSplitNumeric(i);      }      if ((first) || (currVal < bestVal)) {        bestVal=currVal;        bestAtt=i;        bestPoint=m_SplitPoint;        for (int j=0; j < 3; j++) {          System.arraycopy(m_Distribution[j],0,bestDist[j],0,numClasses);        }      }      first=false;    }  }  m_AttIndex=bestAtt;  m_SplitPoint=bestPoint;  m_Distribution=bestDist;  if (m_Instances.classAttribute().isNominal()) {    for (int i=0; i < m_Distribution.length; i++) {      double sumCounts=Utils.sum(m_Distribution[i]);      if (sumCounts == 0) {        System.arraycopy(m_Distribution[2],0,m_Distribution[i],0,m_Distribution[2].length);        Utils.normalize(m_Distribution[i]);      } else {        Utils.normalize(m_Distribution[i],sumCounts);      }    }  }  m_Instances=new Instances(m_Instances,0);}  }
class C{  private void init(Class<?> defClass,String name,Object type,int flags){  this.clazz=defClass;  this.name=name;  this.type=type;  this.flags=flags;  assert (testAnyFlags(ALL_KINDS));  assert (this.resolution == null);}  }
class C{  public CloseSessionResponse CloseSession(RequestHeader RequestHeader,Boolean DeleteSubscriptions) throws ServiceFaultException, ServiceResultException {  CloseSessionRequest req=new CloseSessionRequest(RequestHeader,DeleteSubscriptions);  return (CloseSessionResponse)channel.serviceRequest(req);}  }
class C{  public NodesStatsRequest all(){  this.indices.all();  this.os=true;  this.process=true;  this.jvm=true;  this.threadPool=true;  this.fs=true;  this.transport=true;  this.http=true;  this.breaker=true;  this.script=true;  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.350 -0500",hash_original_method="CFFD02C88D512DC860E9CC0FE1096C45",hash_generated_method="CFFD02C88D512DC860E9CC0FE1096C45") boolean pageScroll(int direction){  int nextPage=-1;  boolean down=false;  if (direction == FOCUS_UP) {    nextPage=Math.max(0,mSelectedPosition - getChildCount() - 1);  } else   if (direction == FOCUS_DOWN) {    nextPage=Math.min(mItemCount - 1,mSelectedPosition + getChildCount() - 1);    down=true;  }  if (nextPage >= 0) {    int position=lookForSelectablePosition(nextPage,down);    if (position >= 0) {      mLayoutMode=LAYOUT_SPECIFIC;      mSpecificTop=mPaddingTop + getVerticalFadingEdgeLength();      if (down && position > mItemCount - getChildCount()) {        mLayoutMode=LAYOUT_FORCE_BOTTOM;      }      if (!down && position < getChildCount()) {        mLayoutMode=LAYOUT_FORCE_TOP;      }      setSelectionInt(position);      invokeOnItemScrollListener();      if (!awakenScrollBars()) {        invalidate();      }      return true;    }  }  return false;}  }
class C{  public SymbolTableEntry basicGetRewiredTarget(){  return rewiredTarget;}  }
class C{  public void loadSounds(Element e3,String source){  if (soundLoadedOnce) {    return;  }  if (e3 != null) {    List<Element> l=e3.getChildren(RosterEntry.SOUND_LABEL);    for (    Element fn : l) {      int num=Integer.parseInt(fn.getAttribute("num").getValue());      String val=fn.getText();      if ((this.getSoundLabel(num) == null) || (source.equalsIgnoreCase("model"))) {        this.setSoundLabel(num,val);      }    }  }  if (source.equalsIgnoreCase("RosterEntry")) {    soundLoadedOnce=true;  }}  }
class C{  public boolean ping(String host,int port){  try (Socket socket=new Socket()){    socket.connect(new InetSocketAddress(host,port),100);    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public GoogleTurnCandidateHarvester(TransportAddress turnServer){  this(turnServer,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.631 -0500",hash_original_method="046D2D4D1B8612C0E98B2174C0C88DC5",hash_generated_method="CCF966184DD966B4A8431E00C8E0C9B9") public void readFromParcel(Parcel parcel){  int length=parcel.readInt();  if (length < 0) {    throw new RuntimeException("Bad length in parcel: " + length);  }  readFromParcelInner(parcel,length);}  }
class C{  public void updateCollider(){  if (wrapped.components.has(Collider.class)) {    Collider collider=wrapped.components.get(Collider.class);    Cuboid size=collider.boundingBox.get();    setBounds(size);  }}  }
class C{  public Drawable peekDrawable(){  Bitmap bm=sGlobals.peekWallpaperBitmap(mContext,false);  if (bm != null) {    Drawable dr=new BitmapDrawable(mContext.getResources(),bm);    dr.setDither(false);    return dr;  }  return null;}  }
class C{  private void saveFinalWeights(Counter<String> lastWeights,int maxObjectiveEpoch,int numEpochs){  Counter<String> finalWeights=lastWeights;  if (returnBestDev && maxObjectiveEpoch >= 0 && !(maxObjectiveEpoch == numEpochs - 1)) {    String bestWeightsFile=String.format("%s.%d%s",outputWeightPrefix,maxObjectiveEpoch,IOTools.WEIGHTS_FILE_EXTENSION);    lastWeights=IOTools.readWeights(bestWeightsFile);  }  String finalFilename=String.format("%s.final%s",outputWeightPrefix,IOTools.WEIGHTS_FILE_EXTENSION);  IOTools.writeWeights(finalFilename,finalWeights);  logger.info("Final weights from epoch {} to: {}",returnBestDev ? maxObjectiveEpoch : numEpochs - 1,finalFilename);  logger.info("Non-zero final weights: {}",finalWeights.keySet().size());}  }
class C{  public static <T>Set<List<T>> subsequences(List<T> items){  Set<List<T>> ans=new HashSet<List<T>>();  for (  T h : items) {    Set<List<T>> next=new HashSet<List<T>>();    for (    List<T> it : ans) {      List<T> sublist=new ArrayList<T>(it);      sublist.add(h);      next.add(sublist);    }    next.addAll(ans);    List<T> hlist=new ArrayList<T>();    hlist.add(h);    next.add(hlist);    ans=next;  }  return ans;}  }
class C{  protected WithStatementImpl(){  super();}  }
class C{  public synchronized void onDialogsChanged(boolean isEmpty){  if (isDialogsEmpty.get() != isEmpty) {    context.getPreferences().putBool("app.dialogs.empty",isEmpty);    isDialogsEmpty.change(isEmpty);  }  if (!isEmpty) {    if (isAppEmpty.get()) {      context.getPreferences().putBool("app.empty",false);      isAppEmpty.change(false);    }  }}  }
class C{  public synchronized int count(){  return set.size();}  }
class C{  protected AnnotationModelEvent createAnnotationModelEvent(){  return new AnnotationModelEvent(this);}  }
class C{  protected boolean looksLikeISO8601(String dateStr){  if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-') {    return true;  }  return false;}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public boolean isEmpty(){  return names.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.722 -0500",hash_original_method="0C97F129DA85CEA766FB3D7196531B26",hash_generated_method="B03BB07FC79CDD81A271865377AF9DAF") @DSSafe(DSCat.SAFE_OTHERS) @DSVerified public boolean hideSoftInputFromWindow(IBinder windowToken,int flags,ResultReceiver resultReceiver){  checkFocus();synchronized (mH) {    if (resultReceiver != null) {      resultReceiver.send(DSUtils.FAKE_INT,new Bundle());    }    if (mServedView == null || mServedView.getWindowToken() != windowToken) {      return false;    }    try {      return mService.hideSoftInput(mClient,flags,resultReceiver);    } catch (    RemoteException e) {    }    return false;  }}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public NemProperties(final Properties properties){  this.properties=properties;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public static final int typeIndex(Class type){  Class[] list=primitiveTypes;  int n=list.length;  for (int i=0; i < n; i++)   if (list[i] == type)   return i;  throw new RuntimeException("bad type:" + type.getName());}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.220 -0500",hash_original_method="2BE881D6CE1CF3506EFB49B5287B67D4",hash_generated_method="C33BBD7A1E4F2540D9F79FE41B5DB121") public boolean isRect(){  return getTaintBoolean();}  }
class C{  public static BigDecimal roundPrice(BigDecimal price,BigDecimal ticksize){  return roundPrice(price,ticksize,ticksize.scale());}  }
class C{  public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param,OperationTypeEnum opType){  s_logger.info("START unlink targets from snapshot session {}",snapSessionURI);  BlockSnapshotSession snapSession=BlockSnapshotSessionUtils.querySnapshotSession(snapSessionURI,_uriInfo,_dbClient,true);  BlockObject snapSessionSourceObj=null;  List<BlockObject> snapSessionSourceObjs=getAllSnapshotSessionSources(snapSession);  snapSessionSourceObj=snapSessionSourceObjs.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(snapSessionSourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(snapSessionSourceObj);  Map<URI,Boolean> targetMap=new HashMap<>();  for (  SnapshotSessionUnlinkTargetParam targetInfo : param.getLinkedTargets()) {    URI targetURI=targetInfo.getId();    Boolean deleteTarget=targetInfo.getDeleteTarget();    if (deleteTarget == null) {      deleteTarget=Boolean.FALSE;    }    targetMap.put(targetURI,deleteTarget);  }  snapSessionApiImpl.validateUnlinkSnapshotSessionTargets(snapSession,snapSessionSourceObj,project,targetMap,_uriInfo);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGETS);  _dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSessionURI,taskId,op);  snapSession.getOpStatus().put(taskId,op);  TaskResourceRep response=toTask(snapSession,taskId);  try {    snapSessionApiImpl.unlinkTargetVolumesFromSnapshotSession(snapSessionSourceObj,snapSession,targetMap,opType,taskId);  } catch (  Exception e) {    String errorMsg=format("Failed to unlink targets from snapshot session %s: %s",snapSessionURI,e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(Arrays.asList(response),new ArrayList<DataObject>(),errorMsg,taskId,sc);    throw e;  }  auditOp(opType,true,AuditLogManager.AUDITOP_BEGIN,snapSessionURI.toString(),snapSessionSourceObj.getId().toString(),snapSessionSourceObj.getStorageController().toString());  s_logger.info("FINISH unlink targets from snapshot session {}",snapSessionURI);  return response;}  }
class C{  public void testOutParams() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createProcedure("testOutParam","(x int, out y int)\nbegin\ndeclare z int;\nset z = x+1, y = z;\nend\n");    storedProc=this.conn.prepareCall("{call testOutParam(?, ?)}");    storedProc.setInt(1,5);    storedProc.registerOutParameter(2,Types.INTEGER);    storedProc.execute();    System.out.println(storedProc);    int indexedOutParamToTest=storedProc.getInt(2);    int namedOutParamToTest=storedProc.getInt("y");    assertTrue("Named and indexed parameter are not the same",indexedOutParamToTest == namedOutParamToTest);    assertTrue("Output value not returned correctly",indexedOutParamToTest == 6);    storedProc.clearParameters();    storedProc.setInt("x",32);    storedProc.registerOutParameter("y",Types.INTEGER);    storedProc.execute();    indexedOutParamToTest=storedProc.getInt(2);    namedOutParamToTest=storedProc.getInt("y");    assertTrue("Named and indexed parameter are not the same",indexedOutParamToTest == namedOutParamToTest);    assertTrue("Output value not returned correctly",indexedOutParamToTest == 33);    try {      storedProc.registerOutParameter("x",Types.INTEGER);      assertTrue("Should not be able to register an out parameter on a non-out parameter",true);    } catch (    SQLException sqlEx) {      if (!SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState())) {        throw sqlEx;      }    }    try {      storedProc.getInt("x");      assertTrue("Should not be able to retreive an out parameter on a non-out parameter",true);    } catch (    SQLException sqlEx) {      if (!SQLError.SQL_STATE_COLUMN_NOT_FOUND.equals(sqlEx.getSQLState())) {        throw sqlEx;      }    }    try {      storedProc.registerOutParameter(1,Types.INTEGER);      assertTrue("Should not be able to register an out parameter on a non-out parameter",true);    } catch (    SQLException sqlEx) {      if (!SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState())) {        throw sqlEx;      }    }  }}  }
class C{  synchronized void pressStopMaybe(){  if (requiresConfirmationToStop) {    if (getPlayState() != PS_STOPPED) {      boolean result=false;synchronized (simulation.state.schedule) {        result=(JOptionPane.showConfirmDialog(this,"The simulation is running.  Really stop it?","Stop the simulation?",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION);      }      if (result)       pressStop();    }  } else   pressStop();}  }
class C{  public LootableSlot(final Entity owner){  super("content","content");  this.owner=owner;}  }
class C{  @Override public boolean scanClass(String className,int modifiers){  int activeCount=0;  for (int i=_listeners.length - 1; i >= 0; i--) {    ScanListenerByteCode listener=_currentListeners[i];    if (listener == null)     continue;    ScanClass scanClass=listener.scanClass(_root,_packageRoot,className,modifiers);    if (scanClass != null) {      activeCount++;      _currentClasses[i]=scanClass;    } else {      _currentListeners[i]=null;    }  }  return activeCount > 0;}  }
class C{  public final CC sizeGroupY(String s){  ver.setSizeGroup(s);  return this;}  }
class C{  public T caseStep(Step object){  return null;}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static boolean eq(double a,double b){  return (a - b < SMALL) && (b - a < SMALL);}  }
class C{  public static double calculateColumnTotal(Values2D data,int column,int[] validRows){  ParamChecks.nullNotPermitted(data,"data");  double total=0.0;  int rowCount=data.getRowCount();  for (int v=0; v < validRows.length; v++) {    int row=validRows[v];    if (row < rowCount) {      Number n=data.getValue(row,column);      if (n != null) {        total+=n.doubleValue();      }    }  }  return total;}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  private String validateInputs(){  String pomPath=pathEntry.getText();  if (Strings.isNullOrEmpty(pomPath)) {    return "Maven POM cannot be empty";  }  File pathFile=new File(pomPath);  if (!pathFile.exists()) {    return "Maven POM file doesn't exist";  }  return null;}  }
class C{  public StandardPieURLGenerator(String prefix,String categoryParamName){  this(prefix,categoryParamName,"pieIndex");}  }
class C{  public static DefaultJobDefinition retryableFixedDelayJobDefinition(final String jobType,final String jobName,final String description,final Duration fixedDelay,final int restarts,final int retries,final Optional<Duration> retryDelay,final Optional<Duration> maxAge){  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.of(fixedDelay),Optional.empty(),restarts,retries,retryDelay);}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  Parcelable p=mFragments.saveAllState();  if (p != null) {    outState.putParcelable(FRAGMENTS_TAG,p);  }}  }
class C{  public static <K,V>BiMap<K,V> constrainedBiMap(BiMap<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedBiMap<K,V>(map,null,constraint);}  }
class C{  public final void addAllHelperTextColors(@NonNull final Collection<Integer> colors){  ensureNotNull(colors,"The collection may not be null");  for (  int color : colors) {    addHelperTextColor(color);  }}  }
class C{  private static int estimateFilterOrder(int sampleRate,int frequency1,int frequency2,double passBandRipple,double stopBandRipple){  double df=Math.abs(frequency2 - frequency1) / (double)sampleRate;  double ddp=Math.log10(stopBandRipple <= passBandRipple ? passBandRipple : stopBandRipple);  double dds=Math.log10(stopBandRipple <= passBandRipple ? stopBandRipple : passBandRipple);  double a1=5.309e-3;  double a2=7.114e-2;  double a3=-4.761e-1;  double a4=-2.66e-3;  double a5=-5.941e-1;  double a6=-4.278e-1;  double b1=11.01217;  double b2=0.5124401;  double t1=a1 * ddp * ddp;  double t2=a2 * ddp;  double t3=a4 * ddp * ddp;  double t4=a5 * ddp;  double dinf=((t1 + t2 + a3) * dds) + (t3 + t4 + a6);  double ff=b1 + b2 * (ddp - dds);  double n=dinf / df - ff * df + 1.0;  return (int)Math.ceil(n);}  }
class C{  public void doHandle(ConfigEvent event,Context context,AmazonConfig configClient,AmazonIdentityManagement iamClient,Supplier<Date> dateSupplier) throws IOException {  JsonNode invokingEvent=new ObjectMapper().readTree(event.getInvokingEvent());  failForIncompatibleEventTypes(invokingEvent);  Evaluation evaluation=new Evaluation().withComplianceResourceId(event.getAccountId()).withComplianceResourceType(AWS_ACCOUNT_RESOURCE_TYPE).withOrderingTimestamp(dateSupplier.get()).withComplianceType(getCompliance(iamClient));  doPutEvaluations(configClient,event,evaluation);}  }
class C{  public void create(View view){  ChannelConfig instance=new ChannelConfig();  saveProperties(instance);  Spinner spin=(Spinner)findViewById(R.id.typeSpin);  instance.type=(String)spin.getSelectedItem();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  public EncodingWriter create(String javaEncoding){  return _writer;}  }
class C{  public PortugueseLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private void interpolateSubList(List<PathParser.PathDataNode> list){  if (list == null || list.size() <= 2)   return;  int size=list.size();  PathParser.PathDataNode nodeFrom=list.get(0);  PathParser.PathDataNode nodeTo=list.get(size - 1);  float step=1.0f / (size - 1);  float fraction=0.0f;  for (  PathParser.PathDataNode current : list) {    current.interpolatePathDataNode(nodeFrom,nodeTo,fraction);    fraction+=step;  }}  }
class C{  protected static String plural(int val){  if (val == 1)   return ""; else   return "s";}  }
class C{  public static void removeExplainHintAnnotationsFromBOp(final BOp bop){  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(bop);  final List<BOp> nodesWithExplainHints=new ArrayList<BOp>();  while (explainHintAnnotatedBOps.hasNext()) {    nodesWithExplainHints.add(explainHintAnnotatedBOps.next());  }  for (  final BOp nodeWithExplainHint : nodesWithExplainHints) {    nodeWithExplainHint.setProperty(Annotations.EXPLAIN_HINTS,null);  }}  }
class C{  public static void checkAndAppendLatLonElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof LatLon) {    appendLatLon(context,path,(LatLon)o);  }}  }
class C{  private void showErrorMessage(String message){  Toast.makeText(this,message,Toast.LENGTH_LONG).show();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,-1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @LargeTest public void testPerformanceAddRemoveVideoItem() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int videoItemStartTime=0;  final int videoItemEndTime=5000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[3];  final MediaVideoItem[] mediaVideoItem=new MediaVideoItem[NUM_OF_ITERATIONS];  int timeTaken=0;  long startTime=0;  startTime=SystemClock.uptimeMillis();  createVideoItems(mediaVideoItem,videoItemFileName,renderingMode,videoItemStartTime,videoItemEndTime);  timeTaken=calculateTimeTaken(startTime,NUM_OF_ITERATIONS);  loggingInfo[0]="Time taken to Create Media Video Item :" + timeTaken;  startTime=SystemClock.uptimeMillis();  addVideoItems(mediaVideoItem);  timeTaken=calculateTimeTaken(startTime,NUM_OF_ITERATIONS);  loggingInfo[1]="\n\tTime taken to Add  Media Video Item :" + timeTaken;  startTime=SystemClock.uptimeMillis();  removeVideoItems(mediaVideoItem);  timeTaken=calculateTimeTaken(startTime,NUM_OF_ITERATIONS);  loggingInfo[2]="\n\tTime taken to remove  Media Video Item :" + timeTaken;  writeTimingInfo("testPerformanceAddRemoveVideoItem (in mSec)",loggingInfo);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-17 12:29:24.914 -0500",hash_original_method="78995B15C7B4DD7E0C829C6483E342E9",hash_generated_method="D3C295919527F31A8DB1FFF22A0DDCA9") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onGroupExpand(int groupPosition){}  }
class C{  public Object remove(String markername){  return prefixLibrarian.remove(markername);}  }
class C{  public SkypeBuilder withAllResources(){  resources.addAll(Arrays.asList("/v1/users/ME/conversations/ALL/properties","/v1/users/ME/conversations/ALL/messages","/v1/users/ME/contacts/ALL","/v1/threads/ALL"));  return this;}  }
class C{  @Override public String toString(){  return "CategoryItemEntity: rowKey=" + this.rowKey + ", columnKey="+ this.columnKey+ ", dataset="+ this.dataset;}  }
class C{  public static _ControllerStatus fromString(final String value) throws SOAPSerializationException {  return (_ControllerStatus)Enumeration.fromString(value,_ControllerStatus.VALUES_TO_INSTANCES);}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  public boolean topo_sort(){  return soot.PhaseOptions.getBoolean(options,"topo-sort");}  }
class C{  private void pivotingStep(int p){  swapRows(p,largestPivot(p));  pivot(p);  return;}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing round rect: " + new Rectangle(x,y,width,height)+ " arcWidth: "+ arcWidth+ " archHeight: "+ arcHeight);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);}  }
class C{  @Deprecated public static boolean startCacheTransaction(){  return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VALUES:  return isSetValues();}throw new IllegalStateException();}  }
class C{  public void refreshSyntaxHighlighting(){  modelChanged();}  }
class C{  public boolean connected(int p,int q){  return find(p) == find(q);}  }
class C{  @Override public String toExternalForm(){  final CookieSpec spec=CookiePolicy.getCookieSpec(CookiePolicy.RFC_2965);  return spec.formatCookie(this);}  }
class C{  public boolean isMenuContact(){  Object oo=get_Value(COLUMNNAME_IsMenuContact);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"loope");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a loope instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final List<? extends IOperandTree> operands=instruction.getOperands();  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String loopTarget=Helpers.getLeafValue(operands.get(0).getRootNode());  final String tempEcx=environment.getNextVariableString();  final String ecxZero=environment.getNextVariableString();  final String ecxNotZero=environment.getNextVariableString();  final String condition=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(baseOffset,archSize,"ecx",archSize,"1",archSize,tempEcx));  instructions.add(ReilHelpers.createAnd(baseOffset + 1,resultSize,tempEcx,archSize,truncateMask,archSize,"ecx"));  instructions.add(ReilHelpers.createBisz(baseOffset + 2,archSize,"ecx",OperandSize.BYTE,ecxZero));  instructions.add(ReilHelpers.createBisz(baseOffset + 3,OperandSize.BYTE,ecxZero,OperandSize.BYTE,ecxNotZero));  instructions.add(ReilHelpers.createAnd(baseOffset + 4,OperandSize.BYTE,ecxNotZero,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,condition));  instructions.add(ReilHelpers.createJcc(baseOffset + 5,OperandSize.BYTE,condition,archSize,loopTarget));}  }
class C{  @RequestMapping(value="/businessObjectDefinitions",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITIONS_POST) public BusinessObjectDefinition createBusinessObjectDefinition(@RequestBody BusinessObjectDefinitionCreateRequest request){  return businessObjectDefinitionService.createBusinessObjectDefinition(request);}  }
class C{  public static Image reflectionImage(Image source){  return reflectionImage(source,0.5f,120);}  }
class C{  public ObserveRelation(ObservingEndpoint endpoint,Resource resource,Exchange exchange){  if (endpoint == null)   throw new NullPointerException();  if (resource == null)   throw new NullPointerException();  if (exchange == null)   throw new NullPointerException();  this.endpoint=endpoint;  this.resource=resource;  this.exchange=exchange;  this.established=false;  this.key=getSource().toString() + "#" + exchange.getRequest().getTokenString();}  }
class C{  public SolrPing(){  super(METHOD.GET,CommonParams.PING_HANDLER);  params=new ModifiableSolrParams();}  }
class C{  boolean update(){  if (selectedContent == null) {    selectedContent=new SelectedNodes();    return true;  }  parse();  return selectedContent.update();}  }
class C{  public static String mainArgs(MonitoredVm vm) throws MonitorException {  String commandLine=commandLine(vm);  int firstSpace=commandLine.indexOf(' ');  if (firstSpace > 0) {    return commandLine.substring(firstSpace + 1);  } else   if (commandLine.compareTo("Unknown") == 0) {    return commandLine;  } else {    return null;  }}  }
class C{  public static String toMetricsJSONStringWithMultiRowsKeys(ResultList rs,String keyColumn,String[] groupByColumns,String metricName,QueryParameters qps,int status,String message){  String[] keys=getDistinctKeys(keyColumn,rs);  if (keys == null || keys.length == 0 || groupByColumns == null || groupByColumns.length == 0)   return toJSONString(rs,qps,status,message);  Map<String,String> keyMap=new HashMap<String,String>(keys.length);  for (int i=0; i < keys.length; i++)   keyMap.put(keys[i],"k" + i);  StringBuilder sb=new StringBuilder();  sb.append("{\"resp\":{\"status\":").append(status);  if (rs != null && rs.getTotalResponseTime() > 0) {    sb.append(",\"totalTime\":\"").append(rs.getTotalResponseTime()).append("ms\"");    sb.append(",\"execTime\":\"").append(rs.getTotalExecutionTime()).append("ms\"");    sb.append(",\"fetchTime\":\"").append(rs.getTotalFetchTime()).append("ms\"");  }  sb.append(",\"message\":\"").append(escapeJson(message)).append("\"");  if (qps != null) {    sb.append(",\"request\":{");    sb.append("\"group\":\"").append(qps.getGroup()).append("\"");    sb.append(",\"host\":\"").append(qps.getHost()).append("\"");    sb.append(",\"sql\":\"").append(qps.getSql()).append("\"");    for (    Map.Entry<String,String> e : qps.getSqlParams().entrySet()) {      sb.append(",\"").append(e.getKey()).append("\":\"").append(e.getValue()).append("\"");    }    sb.append("}\r\n");  }  if (rs != null) {    List<ColumnInfo> cols=rs.getColumnDescriptor().getColumns();    sb.append(",\"results\":{");    sb.append("\"total\":\"").append(rs.getRows().size()).append("\",");    sb.append("\"columns\":[");{      boolean first=true;      for (int i=0; i < cols.size(); i++) {        if (keyColumn.equalsIgnoreCase(cols.get(i).getName()))         continue;        if (!first)         sb.append(",");        first=false;        sb.append("\"").append(cols.get(i).getName() + "\"");      }    }    sb.append("],\r\n");    sb.append("\"keys\":[");    for (int i=0; i < keys.length; i++) {      if (i > 0)       sb.append(",");      sb.append("{").append("\"name\":\"").append(keys[i]).append("\", ").append("\"shortName\":\"").append("k").append(i).append("\"").append("}");    }    sb.append("],\r\n");    if (rs.getCustomObjects() != null && rs.getCustomObjects().size() > 0) {      for (      Map.Entry<String,CustomResultObject> e : rs.getCustomObjects().entrySet()) {        sb.append("\"").append(e.getKey()).append("\":");        sb.append(e.getValue().getValueJsonString());        sb.append(",\r\n");      }    }    boolean firstRow=true;    String[] prevGrpKey=new String[groupByColumns.length];    String[] newGrpKey=new String[groupByColumns.length];    int keyIdx=rs.getColumnIndex(keyColumn);    int mtrIdx=rs.getColumnIndex(metricName);    int[] grpKeyIdx=new int[groupByColumns.length];    for (int i=0; i < groupByColumns.length; i++) {      prevGrpKey[i]=null;      newGrpKey[i]=null;      grpKeyIdx[i]=rs.getColumnIndex(groupByColumns[i]);    }    sb.append("\"results\":[");    Map<String,String> valueMap=new TreeMap<String,String>();    for (    ResultRow row : rs.getRows()) {      for (int i=0; i < groupByColumns.length; i++) {        newGrpKey[i]=row.getColumns().get(grpKeyIdx[i]);      }      if (valueMap.size() > 0 && isDiff(prevGrpKey,newGrpKey)) {        if (!firstRow)         sb.append(",");        firstRow=false;        sb.append("{");        for (int i=0; i < groupByColumns.length; i++) {          sb.append("\"").append(groupByColumns[i]).append("\":").append(prevGrpKey[i]).append(",");        }        sb.append("\"").append(metricName).append("\":{");        boolean firstKey=true;        for (        Map.Entry<String,String> e : valueMap.entrySet()) {          if (e.getValue() == null)           continue;          String jkey=keyMap.get(e.getKey());          if (!firstKey)           sb.append(",");          firstKey=false;          sb.append("\"").append(jkey).append("\":").append(e.getValue());        }        sb.append("}");        sb.append("}");        valueMap.clear();      }      valueMap.put(row.getColumns().get(keyIdx),row.getColumns().get(mtrIdx));      for (int i=0; i < groupByColumns.length; i++) {        prevGrpKey[i]=newGrpKey[i];      }    }    if (!firstRow)     sb.append(",");{      sb.append("{");      for (int i=0; i < groupByColumns.length; i++) {        sb.append("\"").append(groupByColumns[i]).append("\":").append(newGrpKey[i]).append(",");      }      sb.append("\"").append(metricName).append("\":{");      boolean firstKey=true;      for (      Map.Entry<String,String> e : valueMap.entrySet()) {        if (e.getValue() == null)         continue;        String jkey=keyMap.get(e.getKey());        if (!firstKey)         sb.append(",");        firstKey=false;        sb.append("\"").append(jkey).append("\":").append(e.getValue());      }      sb.append("}");      sb.append("}");    }    sb.append("]}");  }  sb.append("}}");  return sb.toString();}  }
class C{  public static final float[] rgbToCMYK(float r,float g,float b){  return rgbToCMYK(r,g,b,new float[4]);}  }
class C{  public SpecEvent(Spec spec,int type){  this.spec=spec;  this.type=type;}  }
class C{  public ManagedIntArray(final int initialCapacity){  this.buf=new int[assertNonNegative("initialCapacity",initialCapacity)];}  }
class C{  public TransformerFactoryConfigurationError(){  this.exception=null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.904 -0500",hash_original_method="89A8EBF8FEFD90B855BF480125FCEA6A",hash_generated_method="24868BA389A9EF1988E4307F847489A7") private void readHighlight(){  CharPos pos=new CharPos();  pos.startChar=mParcel.readInt();  pos.endChar=mParcel.readInt();  if (mHighlightPosList == null) {    mHighlightPosList=new ArrayList<CharPos>();  }  mHighlightPosList.add(pos);}  }
class C{  public void fireEvent(final SPARQLUpdateEvent e){  if (isReadOnly())   throw new UnsupportedOperationException();  if (e == null)   throw new IllegalArgumentException();  if (listeners.isEmpty()) {    return;  }  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);  for (  ISPARQLUpdateListener l : a) {    final ISPARQLUpdateListener listener=l;    try {      listener.updateEvent(e);    } catch (    Throwable t) {      if (InnerCause.isInnerCause(t,InterruptedException.class)) {        throw new RuntimeException(t);      }      log.error(t,t);    }  }}  }
class C{  void println(int logLevel,String msg){  if (logLevel < XLog.sLogLevel) {    return;  }  printlnInternal(logLevel,msg);}  }
class C{  protected LayerPane findSelectedPane(){  for (  LayerPane pane : getPanes()) {    if (pane.isSelected()) {      return pane;    }  }  return null;}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  protected void validate_return(VasaAssociationObject[] param){}  }
class C{  public boolean isZipArchive(){  try {    return file != null && ZipUtils.isZipFile(file);  } catch (  IOException e) {    return false;  }}  }
class C{  private void helpTestDateRangeFacetsWithIncludeOption(final String fieldName){  final String p="facet.range";  final String b="facet_ranges";  final String f=fieldName;  final String c="/lst[@name='counts']";  final String pre="//lst[@name='" + b + "']/lst[@name='"+ f+ "']"+ c;  final String meta=pre + "/../";  assertQ("checking counts for lower",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower"),"*[count(" + pre + "/int)=15]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-13T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper"),"*[count(" + pre + "/int)=15]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='7']");  assertQ("checking counts for lower & upper",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","upper"),"*[count(" + pre + "/int)=15]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper & edge",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-16T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper",p + ".include","edge"),"*[count(" + pre + "/int)=15]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-13T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-14T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-15T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='1']",meta + "/int[@name='between'][.='8']");  assertQ("checking counts for upper & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","upper",p + ".include","outer"),"*[count(" + pre + "/int)=12]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='5']");  assertQ("checking counts for lower & edge",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","edge"),"*[count(" + pre + "/int)=12]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='1']",meta + "/int[@name='after'  ][.='3']",meta + "/int[@name='between'][.='6']");  assertQ("checking counts for lower & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","outer"),"*[count(" + pre + "/int)=12]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='0']",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='5']");  assertQ("checking counts for lower & edge & outer",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","lower",p + ".include","edge",p + ".include","outer"),"*[count(" + pre + "/int)=12]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-04T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='6']");  assertQ("checking counts for all",req("q","*:*","rows","0","facet","true",p,f,p + ".start","1976-07-01T00:00:00.000Z",p + ".end","1976-07-13T00:00:00.000Z",p + ".gap","+1DAY",p + ".other","all",p + ".include","all"),"*[count(" + pre + "/int)=12]",pre + "/int[@name='1976-07-01T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-02T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-03T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-04T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-05T00:00:00Z'][.='2'  ]",pre + "/int[@name='1976-07-06T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-07T00:00:00Z'][.='1'  ]",pre + "/int[@name='1976-07-08T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-09T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-10T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-11T00:00:00Z'][.='0']",pre + "/int[@name='1976-07-12T00:00:00Z'][.='1'  ]",meta + "/int[@name='before' ][.='2']",meta + "/int[@name='after'  ][.='4']",meta + "/int[@name='between'][.='6']");}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public SentenceSplitter(String file){  super(file);  sentences=new LinkedList<>();}  }
class C{  @SuppressWarnings("unchecked") public static boolean checkETagValidators(final HttpServletRequest req,final HttpServletResponse resp,final Method reqMethod,final String etag){  final List<String> ifNoneMatchList=Collections.list(req.getHeaders("If-None-Match"));  if (ifNoneMatchList.size() > 0 && isMatchingEtag(ifNoneMatchList,etag)) {    if (reqMethod == Method.GET || reqMethod == Method.HEAD) {      sendNotModified(resp);    } else {      sendPreconditionFailed(resp);    }    return true;  }  final List<String> ifMatchList=Collections.list(req.getHeaders("If-Match"));  if (ifMatchList.size() > 0 && !isMatchingEtag(ifMatchList,etag)) {    sendPreconditionFailed(resp);    return true;  }  return false;}  }
class C{  public ChannelDataMessageEvent(StunStack stunStack,TransportAddress remoteAddress,TransportAddress localAddress,ChannelData channelDataMessage){  super(remoteAddress);  this.remoteAddress=remoteAddress;  this.localAddress=localAddress;  this.stunStack=stunStack;  this.channelDataMessage=channelDataMessage;}  }
class C{  public ScannerBuffer(Scanner inner){  this.inner=inner;}  }
class C{  private void checkDbIsEmpty(String label,TestContext context){  logger.debug("Db check " + label);  Assert.assertNull("locationAuthDeployment",locationAuthDeployment);  Assert.assertNull("locationSampleDeployment",locationSampleDeployment);  Assert.assertNull("locationSample5Deployment",locationSample5Deployment);  Assert.assertNull("locationHeaderDeployment",locationHeaderDeployment);  String emptyListDoc="[ ]";  given().get("/_/deployment/modules").then().log().ifError().statusCode(200).body(equalTo(emptyListDoc));  given().get("/_/discovery/nodes").then().log().ifError().statusCode(200);  given().get("/_/discovery/modules").then().log().ifError().statusCode(200).body(equalTo(emptyListDoc));  given().get("/_/proxy/modules").then().log().ifError().statusCode(200).body(equalTo(emptyListDoc));  given().get("/_/proxy/tenants").then().log().ifError().statusCode(200).body(equalTo(emptyListDoc));  logger.debug("Db check " + label + " done");}  }
class C{  public ColorRange addAlphaRange(FloatRange alpha){  alphaConstraint.add(alpha);  return this;}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    int[] tmp=new int[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TDoubleIntHashMap)) {    return false;  }  TDoubleIntHashMap that=(TDoubleIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ParameterDatabase loadParameterDatabase(String[] args){  ParameterDatabase parameters=null;  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_FILE))   try {    parameters=new ParameterDatabase(new File(new File(args[x + 1]).getAbsolutePath()),args);    break;  } catch (  Exception e) {    Output.initialError("An exception was generated upon reading the parameter file \"" + args[x + 1] + "\".\nHere it is:\n"+ e);  }  if (parameters == null)   Output.initialError("No parameter file was specified.");  return parameters;}  }
class C{  public String toStringRep(){  StringBuffer sb=new StringBuffer();  int k=0;  for (int i=0; i < commands.length; i++) {    sb.append(PATH_COMMANDS[commands[i]]);    for (int j=0; j < PATH_PARAMS[commands[i]]; j++) {      sb.append(' ');      sb.append(parameters[k++]);    }  }  return sb.toString();}  }
class C{  public static String unescape(String in){  StringBuilder out=new StringBuilder();  char last=0;  for (  char c : in.toCharArray()) {    if (c == ESC) {      if (last != 0 && last == ESC)       out.append(c);    } else     out.append(c);    last=c;  }  return out.toString();}  }
class C{  public Model removeModule(String module){  if (modules().remove(requireNonNull(module,"Required not null module"))) {    removeModuleFromXML(module);  }  return this;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor df){  return getDropTargetContext().isDataFlavorSupported(df);}  }
class C{  public long selectNextFireTime(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_NEXT_FIRE_TIME));    ps.setString(1,STATE_WAITING);    rs=ps.executeQuery();    if (rs.next()) {      return rs.getLong(ALIAS_COL_NEXT_FIRE_TIME);    } else {      return 0l;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public boolean isService(){  return !isItem();}  }
class C{  @SuppressWarnings("unchecked") public Closure<V> dehydrate(){  Closure<V> result=(Closure<V>)this.clone();  result.delegate=null;  result.owner=null;  result.thisObject=null;  return result;}  }
class C{  @Override public int length(){  return getNodes().size();}  }
class C{  public void copyAsRtf(){  int selStart=getSelectionStart();  int selEnd=getSelectionEnd();  if (selStart == selEnd) {    return;  }  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    try {      sm.checkSystemClipboardAccess();    } catch (    SecurityException se) {      UIManager.getLookAndFeel().provideErrorFeedback(null);      return;    }  }  Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();  RtfGenerator gen=getRTFGenerator();  Token tokenList=getTokenListFor(selStart,selEnd);  for (Token t=tokenList; t != null; t=t.getNextToken()) {    if (t.isPaintable()) {      if (t.textCount == 1 && t.text[t.textOffset] == '\n') {        gen.appendNewline();      } else {        Font font=getFontForTokenType(t.type);        Color bg=getBackgroundForTokenType(t.type);        boolean underline=getUnderlineForToken(t);        if (t.isWhitespace()) {          gen.appendToDocNoFG(t.getLexeme(),font,bg,underline);        } else {          Color fg=getForegroundForToken(t);          gen.appendToDoc(t.getLexeme(),font,fg,bg,underline);        }      }    }  }  RtfTransferable contents=new RtfTransferable(gen.getRtf().getBytes());  try {    cb.setContents(contents,null);  } catch (  IllegalStateException ise) {    UIManager.getLookAndFeel().provideErrorFeedback(null);    return;  }}  }
class C{  public boolean process(String arg){  if (arg.equals("help")) {    printHelp();    return true;  }  if (arg.equals("printOptions")) {    printOptions();    return true;  }  if (arg.length() == 0) {    printHelp();    return true;  }  int split=arg.indexOf('=');  if (split == -1) {    VM.sysWriteln("  Illegal option specification!\n  \"" + arg + "\" must be specified as a name-value pair in the form of option=value");    return false;  }  String name=arg.substring(0,split);  String value=arg.substring(split + 1);  Option o=getOption(name);  if (o == null)   return false;switch (o.getType()) {case Option.BOOLEAN_OPTION:    if (value.equals("true")) {      ((BooleanOption)o).setValue(true);      return true;    } else     if (value.equals("false")) {      ((BooleanOption)o).setValue(false);      return true;    }  return false;case Option.INT_OPTION:int ival=CommandLineArgs.primitiveParseInt(value);((IntOption)o).setValue(ival);return true;case Option.ADDRESS_OPTION:long lval=CommandLineArgs.primitiveParseLong(value);((AddressOption)o).setValue(lval);return true;case Option.FLOAT_OPTION:float fval=CommandLineArgs.primitiveParseFloat(value);((FloatOption)o).setValue(fval);return true;case Option.STRING_OPTION:((StringOption)o).setValue(value);return true;case Option.ENUM_OPTION:((EnumOption)o).setValue(value);return true;case Option.PAGES_OPTION:long pval=CommandLineArgs.parseMemorySize(o.getName(),name,"b",1,arg,value);if (pval < 0) return false;((PagesOption)o).setBytes(Extent.fromIntSignExtend((int)pval));return true;case Option.MICROSECONDS_OPTION:int mval=CommandLineArgs.primitiveParseInt(value);((MicrosecondsOption)o).setMicroseconds(mval);return true;}return false;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  protected void rehash(int newN){  HashIndexSetProperties metaData=hashIndexSetProperties;  if (TEST_ALWAYS_REHASH) {    Thread.yield();  }  Object[] oldSet=metaData.set;  int oldCapacity=oldSet.length;  int mask=newN - 1;  int _maxSize=computeMaxSize(newN,_loadFactor);  Object[] newSet=new Object[newN + 1];  HashIndexSetProperties newHashIndexProperties=new HashIndexSetProperties(newSet,mask);  newHashIndexProperties.size=metaData.size;  newHashIndexProperties.free=hashIndexSetProperties.computeNumFree();  newHashIndexProperties.removedTokens=0;  newHashIndexProperties.n=newN;  newHashIndexProperties.maxSize=_maxSize;  for (int i=oldCapacity; i-- > 0; ) {    if (oldSet[i] != null && oldSet[i] != REMOVED) {      Object o=oldSet[i];      Object key=_imqEvaluator.evaluateKey(o);      if (key == null) {        key=IndexManager.NULL;      }      int index=insertionIndex(key,newHashIndexProperties);      if (index >= 0) {        addObjectToSet(newHashIndexProperties.set,index,o);      }    }  }  hashIndexSetProperties=newHashIndexProperties;}  }
class C{  public PartialHull(IPoint first,IPoint second){  points.add(first);  points.add(second);}  }
class C{  protected static Placemark createAircraftPlacemark(Position position,String aircraftName,String aircraftType){  if (!aircraftIconMap.containsKey(aircraftType)) {    throw new IllegalArgumentException(aircraftType + " is not valid.");  }  Placemark placemark=Placemark.createWithImage(position,ImageSource.fromResource(aircraftIconMap.get(aircraftType)));  placemark.getAttributes().setImageOffset(Offset.bottomCenter()).setImageScale(NORMAL_IMAGE_SCALE).setDrawLeader(true);  placemark.getAttributes().getLeaderAttributes().setOutlineWidth(4);  placemark.setHighlightAttributes(new PlacemarkAttributes(placemark.getAttributes()).setImageScale(HIGHLIGHTED_IMAGE_SCALE).setImageColor(new Color(android.graphics.Color.YELLOW)));  placemark.setDisplayName(aircraftName);  placemark.putUserProperty(AIRCRAFT_TYPE,aircraftType);  placemark.putUserProperty(SELECTABLE,null);  placemark.putUserProperty(EDITABLE,null);  placemark.putUserProperty(MOVABLE,null);  return placemark;}  }
class C{  Rectangle2D computeClip(){  Rectangle2D clip=getViewRect();  double scale=getScale();  int origindx=0;  int origindy=0;  if (clip.getWidth() > (width * scale))   origindx=(int)((clip.getWidth() - width * scale) / 2);  if (clip.getHeight() > (height * scale))   origindy=(int)((clip.getHeight() - height * scale) / 2);  if (isClipping()) {    Dimension s=getPreferredSize();    clip=clip.createIntersection(new Rectangle2D.Double(origindx,origindy,s.width,s.height));  }  return clip;}  }
class C{  public FPTreeNode(FPTreeNode parent,BinaryItem item){  m_parent=parent;  m_item=item;}  }
class C{  private void createModelWithCodeLocationAsTopParent(TreeElement<SecuritySpecModel,Object> root){  clearPropertyChangeListeners();  Map<CodeLocationModel,Map<MethodModel,List<MethodModel>>> codeLocationEventBlocks=getSpec().getCodeLocationEventBlocks();  if (codeLocationEventBlocks != null) {    for (    CodeLocationModel location : codeLocationEventBlocks.keySet()) {      TreeElement<Object,MethodModel> locationElement=new TreeElement<Object,MethodModel>(location.toString(),location,MethodModel.class);      root.addChild(locationElement);      updatePropertyChangeListener(location,locationElement);      for (      MethodModel inputMethod : codeLocationEventBlocks.get(location).keySet()) {        TreeElement<MethodModel,MethodModel> inputElement=new TreeElement<MethodModel,MethodModel>(inputMethod.getShortSignature(),inputMethod,MethodModel.class);        locationElement.addChild(inputElement);        updatePropertyChangeListener(inputMethod,inputElement);        List<MethodModel> outputMethods=codeLocationEventBlocks.get(location).get(inputMethod);        if (outputMethods != null) {          for (          MethodModel outputMethod : outputMethods) {            TreeElement<MethodModel,Object> outputElement=new TreeElement<MethodModel,Object>(outputMethod.getShortSignature(),outputMethod,Object.class);            inputElement.addChild(outputElement);            updatePropertyChangeListener(outputMethod,outputElement);          }        }      }    }  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"INJECTOR_DB\" ("+ "\"INJECTOR_TYPE\" TEXT,"+ "\"ORDER_NUM\" INTEGER,"+ "\"INJECTOR_NAME\" TEXT,"+ "\"ICON_URL\" TEXT);");}  }
class C{  public void shutdown(){  this.shutdown=true;  this.interrupt();  boolean interrupted=Thread.interrupted();  try {    this.join(15 * 1000);  } catch (  InterruptedException e) {    interrupted=true;  } finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }  if (this.isAlive()) {    logger.warn(LocalizedMessage.create(LocalizedStrings.HARegionQueue_QUEUEREMOVALTHREAD_IGNORED_CANCELLATION));  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.329 -0500",hash_original_method="A674BAD38D7705D0D440DD3B391B22D6",hash_generated_method="57E295F129CEDA9FA962B11B19569ABC") public static void apply(int gravity,int w,int h,Rect container,Rect outRect){  apply(gravity,w,h,container,0,0,outRect);}  }
class C{  public int print(Graphics _g,PageFormat pageFormat,int pageIndex){  if (printedInputs == null) {    printedInputs=new ArrayList(inputs);  }  if (pageIndex >= printedInputs.size()) {    curIndex=-1;    if (theCtx != null)     theCtx.dispose();    userAgent.displayMessage("Done");    return NO_SUCH_PAGE;  }  if (curIndex != pageIndex) {    if (theCtx != null)     theCtx.dispose();    try {      width=(int)pageFormat.getImageableWidth();      height=(int)pageFormat.getImageableHeight();      super.transcode((TranscoderInput)printedInputs.get(pageIndex),null);      curIndex=pageIndex;    } catch (    TranscoderException e) {      drawError(_g,e);      return PAGE_EXISTS;    }  }  Graphics2D g=(Graphics2D)_g;  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  g.setRenderingHint(RenderingHintsKeyExt.KEY_TRANSCODING,RenderingHintsKeyExt.VALUE_TRANSCODING_PRINTING);  AffineTransform t=g.getTransform();  Shape clip=g.getClip();  g.translate(pageFormat.getImageableX(),pageFormat.getImageableY());  g.transform(curTxf);  try {    root.paint(g);  } catch (  Exception e) {    g.setTransform(t);    g.setClip(clip);    drawError(_g,e);  }  g.setTransform(t);  g.setClip(clip);  return PAGE_EXISTS;}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  node.setComposite(CSSUtilities.convertOpacity(e));  node.setFilter(CSSUtilities.convertFilter(e,node,ctx));  node.setMask(CSSUtilities.convertMask(e,node,ctx));  node.setPointerEventType(CSSUtilities.convertPointerEvents(e));  initializeDynamicSupport(ctx,e,node);  ctx.closeViewport(e);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return COUNT;default :return null;}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SignalStrength(Parcel in){  if (DBG)   log("Size of signalstrength parcel:" + in.dataSize());  mGsmSignalStrength=in.readInt();  mGsmBitErrorRate=in.readInt();  mCdmaDbm=in.readInt();  mCdmaEcio=in.readInt();  mEvdoDbm=in.readInt();  mEvdoEcio=in.readInt();  mEvdoSnr=in.readInt();  mLteSignalStrength=in.readInt();  mLteRsrp=in.readInt();  mLteRsrq=in.readInt();  mLteRssnr=in.readInt();  mLteCqi=in.readInt();  mTdScdmaRscp=in.readInt();  isGsm=(in.readInt() != 0);}  }
class C{  public ImplServer(JSONObject data,ImplDiscordAPI api){  this.api=api;  name=data.getString("name");  id=data.getString("id");  region=Region.getRegionByKey(data.getString("region"));  memberCount=data.getInt("member_count");  large=data.getBoolean("large");  JSONArray roles=data.getJSONArray("roles");  for (int i=0; i < roles.length(); i++) {    new ImplRole(roles.getJSONObject(i),this,api);  }  JSONArray channels=data.getJSONArray("channels");  for (int i=0; i < channels.length(); i++) {    JSONObject channelJson=channels.getJSONObject(i);    String type=channelJson.getString("type");    if (type.equals("text")) {      new ImplChannel(channels.getJSONObject(i),this,api);    }    if (type.equals("voice")) {      new ImplVoiceChannel(channels.getJSONObject(i),this,api);    }  }  JSONArray members=new JSONArray();  if (data.has("members")) {    members=data.getJSONArray("members");  }  for (int i=0; i < members.length(); i++) {    User member=api.getOrCreateUser(members.getJSONObject(i).getJSONObject("user"));    this.members.put(member.getId(),member);    JSONArray memberRoles=members.getJSONObject(i).getJSONArray("roles");    for (int j=0; j < memberRoles.length(); j++) {      Role role=getRoleById(memberRoles.getString(j));      if (role != null) {        ((ImplRole)role).addUserNoUpdate(member);      }    }  }  JSONArray presences=new JSONArray();  if (data.has("presences")) {    presences=data.getJSONArray("presences");  }  for (int i=0; i < presences.length(); i++) {    JSONObject presence=presences.getJSONObject(i);    User user=api.getCachedUserById(presence.getJSONObject("user").getString("id"));    if (user != null && presence.has("game") && !presence.isNull("game")) {      if (presence.getJSONObject("game").has("name") && !presence.getJSONObject("game").isNull("name")) {        ((ImplUser)user).setGame(presence.getJSONObject("game").getString("name"));      }    }    if (user != null && presence.has("status") && !presence.isNull("status")) {      UserStatus status=UserStatus.fromString(presence.getString("status"));      ((ImplUser)user).setStatus(status);    }  }  api.getServerMap().put(id,this);}  }
class C{  public FontSizeHandle(TextHolderFigure owner){  super(owner,new FontSizeLocator());}  }
class C{  protected void assertEquals(FieldInfo expected,FieldInfo actual){  assertEquals(expected.number,actual.number);  assertEquals(expected.name,actual.name);  assertEquals(expected.getDocValuesType(),actual.getDocValuesType());  assertEquals(expected.getIndexOptions(),actual.getIndexOptions());  assertEquals(expected.hasNorms(),actual.hasNorms());  assertEquals(expected.hasPayloads(),actual.hasPayloads());  assertEquals(expected.hasVectors(),actual.hasVectors());  assertEquals(expected.omitsNorms(),actual.omitsNorms());  assertEquals(expected.getDocValuesGen(),actual.getDocValuesGen());}  }
class C{  public boolean isValid(){  return (min.x < max.x && min.y < max.y && min.z < max.z);}  }
class C{  public void addColumn(String name,int sqlType,int precision,int scale){  int valueType=DataType.convertSQLTypeToValueType(sqlType);  addColumn(name,sqlType,DataType.getDataType(valueType).name,precision,scale);}  }
class C{  private void loadTableInfo(){  Timestamp payDate=(Timestamp)fieldPayDate.getValue();  miniTable.setColorCompare(payDate);  log.config("PayDate=" + payDate);  BankInfo bi=(BankInfo)fieldBankAccount.getSelectedItem().getValue();  ValueNamePair paymentRule=(ValueNamePair)fieldPaymentRule.getSelectedItem().getValue();  KeyNamePair docType=(KeyNamePair)fieldDtype.getSelectedItem().getValue();  int c_bpartner_id=0;  if (fieldBPartner.getValue() != null) {    Integer id=(Integer)fieldBPartner.getValue();    c_bpartner_id=id.intValue();  }  loadTableInfo(bi,payDate,paymentRule,onlyDue.isSelected(),c_bpartner_id,docType,miniTable);  calculateSelection();}  }
class C{  public void addParameter(String name,String value){  parameters.put(name,value);}  }
class C{  public synchronized int read(byte b[],int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int c=read();  if (c < 0) {    return -1;  }  b[off]=(byte)c;  int rlen=1;  while ((in >= 0) && (len > 1)) {    int available;    if (in > out) {      available=Math.min((buffer.length - out),(in - out));    } else {      available=buffer.length - out;    }    if (available > (len - 1)) {      available=len - 1;    }    System.arraycopy(buffer,out,b,off + rlen,available);    out+=available;    rlen+=available;    len-=available;    if (out >= buffer.length) {      out=0;    }    if (in == out) {      in=-1;    }  }  return rlen;}  }
class C{  public double addEnergy(double amount){  if (FMLCommonHandler.instance().getEffectiveSide().isClient())   return 0;  if (amount > capacity - energyStored)   amount=capacity - energyStored;  energyStored+=amount;  return amount;}  }
class C{  public void test_namedGraphs_01a() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-01a","named-graphs-01a.rq","named-graphs-01.trig","named-graphs-01.srx").runTest();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultStatisticalCategoryDataset clone=(DefaultStatisticalCategoryDataset)super.clone();  clone.data=(KeyedObjects2D)this.data.clone();  return clone;}  }
class C{  private TrapCodeOperand(byte why){  trapCode=why;}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public XObject(Object obj){  setObject(obj);}  }
class C{  public static Object withInputStream(Path self,@ClosureParams(value=SimpleType.class,options="java.io.InputStream") Closure closure) throws IOException {  return IOGroovyMethods.withStream(newInputStream(self),closure);}  }
class C{  public void writeJson(OutputStream out,Boolean forcePoints){  try {    JsonFactory jsonFactory=new JsonFactory();    JsonGenerator jgen=jsonFactory.createGenerator(out);    jgen.setCodec(new ObjectMapper());    jgen.writeStartObject();{      jgen.writeStringField("type","FeatureCollection");      writeJsonProperties(jgen);      jgen.writeArrayFieldStart("features");{        for (int f=0; f < capacity; f++) {          writeFeature(f,jgen,forcePoints);        }      }      jgen.writeEndArray();    }    jgen.writeEndObject();    jgen.close();  } catch (  IOException ioex) {    LOG.info("IOException, connection may have been closed while streaming JSON.");  }}  }
class C{  public Property era(){  return new Property(this,getChronology().era());}  }
class C{  private IOException translateToIOException(String file,String other){  if (msg != null)   return new IOException(msg);  if (errno() == UnixConstants.EACCES)   return new AccessDeniedException(file,other,null);  if (errno() == UnixConstants.ENOENT)   return new NoSuchFileException(file,other,null);  if (errno() == UnixConstants.EEXIST)   return new FileAlreadyExistsException(file,other,null);  return new FileSystemException(file,other,errorString());}  }
class C{  private void writeRef(Entry e,Index cpIndex) throws IOException {  int i=(e == null) ? 0 : cpIndex.indexOf(e);  writeShort(i);}  }
class C{  @SideEffectFree public void entering(@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable Object params[]){  throw new RuntimeException();}  }
class C{  public void onGroupItemPinned(int groupPosition){  final DialogFragment dialog=ExpandableItemPinnedMessageDialogFragment.newInstance(groupPosition,RecyclerView.NO_POSITION);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  public EvaluationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void realClose(boolean calledExplicitly,boolean issueRollback,boolean skipLocalTeardown,Throwable reason) throws SQLException {  SQLException sqlEx=null;  if (this.isClosed()) {    return;  }  this.forceClosedReason=reason;  try {    if (!skipLocalTeardown) {      if (!getAutoCommit() && issueRollback) {        try {          rollback();        } catch (        SQLException ex) {          sqlEx=ex;        }      }      reportMetrics();      if (getUseUsageAdvisor()) {        if (!calledExplicitly) {          String message="Connection implicitly closed by Driver. You should call Connection.close() from your code to free resources more efficiently and avoid resource leaks.";          this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",this.getCatalog(),this.getId(),-1,-1,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,message));        }        long connectionLifeTime=System.currentTimeMillis() - this.connectionCreationTimeMillis;        if (connectionLifeTime < 500) {          String message="Connection lifetime of < .5 seconds. You might be un-necessarily creating short-lived connections and should investigate connection pooling to be more efficient.";          this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",this.getCatalog(),this.getId(),-1,-1,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,message));        }      }      try {        closeAllOpenStatements();      } catch (      SQLException ex) {        sqlEx=ex;      }      if (this.io != null) {        try {          this.io.quit();        } catch (        Exception e) {        }      }    } else {      this.io.forceClose();    }    if (this.statementInterceptors != null) {      for (int i=0; i < this.statementInterceptors.size(); i++) {        this.statementInterceptors.get(i).destroy();      }    }    if (this.exceptionInterceptor != null) {      this.exceptionInterceptor.destroy();    }  }  finally {    this.openStatements.clear();    if (this.io != null) {      this.io.releaseResources();      this.io=null;    }    this.statementInterceptors=null;    this.exceptionInterceptor=null;    ProfilerEventHandlerFactory.removeInstance(this);synchronized (getConnectionMutex()) {      if (this.cancelTimer != null) {        this.cancelTimer.cancel();      }    }    this.isClosed=true;  }  if (sqlEx != null) {    throw sqlEx;  }}  }
class C{  public boolean isGetEntry(){  return this.opType == OP_TYPE_GET_ENTRY;}  }
class C{  public void testWikidata(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("Who is Barack Obama?");  String response=waitForOutput(output);  if (response.indexOf("44th President") == -1) {    fail("Incorrect response: " + response);  }  Utils.sleep(5000);  text.input("Who is his child?");  response=waitForOutput(output);  if (response.indexOf("Malia Obama, and Sasha Obama") == -1) {    fail("Incorrect response: " + response);  }  text.input("Who is Barack Obama's child?");  response=waitForOutput(output);  if (response.indexOf("Malia Obama, and Sasha Obama") == -1) {    fail("Incorrect response: " + response);  }  text.input("Who is his mother?");  response=waitForOutput(output);  if (response.indexOf("Ann Dunham") == -1) {    fail("Incorrect response: " + response);  }  text.input("is he a human");  response=waitForOutput(output);  assertTrue(response);  bot.shutdown();}  }
class C{  private WebSessionCtx(HttpServletRequest request,int W_Store_ID){  log.info(request.getContextPath() + " (" + request.getRemoteAddr()+ " - "+ request.getLocale()+ ") #"+ counter);  ctx=new Properties();  setLanguage(request);  HttpSession session=request.getSession(false);  ServletContext sc=session.getServletContext();  Enumeration en=sc.getInitParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    String value=sc.getInitParameter(key);    ctx.setProperty(key,value);    log.config(key + "=" + value);  }  setWStore(W_Store_ID);  ctx=getDefaults();  ctx.put(CTX_SERVER_CONTEXT,request.getServerName() + request.getContextPath());  session.setAttribute("ctx",ctx);  log.fine("#" + ctx.size());}  }
class C{  public void add(long v){  _add(numberNode(v));}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowEventsParser.parse");  AllowEventsList list=new AllowEventsList();  try {    headerName(TokenTypes.ALLOW_EVENTS);    AllowEvents allowEvents=new AllowEvents();    allowEvents.setHeaderName(SIPHeaderNames.ALLOW_EVENTS);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    allowEvents.setEventType(token.getTokenValue());    list.add(allowEvents);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      allowEvents=new AllowEvents();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      allowEvents.setEventType(token.getTokenValue());      list.add(allowEvents);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowEventsParser.parse");  }}  }
class C{  private static boolean declarationBracketsParseStrict(PsiBuilder builder,PsiBuilder.Marker marker){  ParserUtils.getToken(builder,GroovyTokenTypes.mLBRACK);  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRBRACK,GroovyBundle.message("rbrack.expected"))) {    marker.rollbackTo();    return false;  }  PsiBuilder.Marker newMarker=marker.precede();  marker.done(GroovyElementTypes.ARRAY_TYPE);  if (GroovyTokenTypes.mLBRACK.equals(builder.getTokenType())) {    return declarationBracketsParseStrict(builder,newMarker);  } else {    newMarker.drop();    return true;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EXECUTE_CLAUSE___TRACE_EXECUTE_1:    setTrace_execute_1(TRACE_EXECUTE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public SuspendThreadSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public boolean isRemitTo(){  Object oo=get_Value(COLUMNNAME_IsRemitTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Boolean deleteTMasterLocation(String topologyName){  return awaitResult(delegate.deleteTMasterLocation(topologyName));}  }
class C{  public BaselineCompilerImpl(BaselineCompiledMethod cm,short[] localFixedLocations,short[] localFloatLocations){  super(cm);  stackHeights=new int[bcodes.length()];  parameterWords=method.getParameterWords() + (method.isStatic() ? 0 : 1);  asm=new Assembler(bcodes.length(),shouldPrint,this);}  }
class C{  public static double determinantViaCholeskyResult(double[][] L){  double detL=1.0;  int n=L.length;  for (int i=0; i < n; i++) {    detL*=L[i][i];  }  return detL * detL;}  }
class C{  private static void checkJavaPathSpaces(){  String javaHome=System.getProperty("java.home");  if (javaHome.contains(" ")) {    warn("Java installation path contains space characters!");    warn("Hadoop client will not be able to start using '" + javaHome + "'.");    warn("Please install JRE to path which does not contain spaces and point JAVA_HOME to that installation.");  }}  }
class C{  public static int[] splitInts(String str) throws IllegalArgumentException {  StringTokenizer tokenizer=new StringTokenizer(str,",");  int n=tokenizer.countTokens();  int[] list=new int[n];  for (int i=0; i < n; i++) {    String token=tokenizer.nextToken();    list[i]=Integer.parseInt(token);  }  return list;}  }
class C{  private void saveLoyaltyCardWithArguments(final Activity activity,final String store,final String note,final String cardId,final String barcodeType,boolean creatingNewCard){  DBHelper db=new DBHelper(activity);  if (creatingNewCard) {    assertEquals(0,db.getLoyaltyCardCount());  } else {    assertEquals(1,db.getLoyaltyCardCount());  }  final EditText storeField=(EditText)activity.findViewById(R.id.storeName);  final EditText noteField=(EditText)activity.findViewById(R.id.note);  final EditText cardIdField=(EditText)activity.findViewById(R.id.cardId);  final EditText barcodeTypeField=(EditText)activity.findViewById(R.id.barcodeType);  final Button saveButton=(Button)activity.findViewById(R.id.saveButton);  storeField.setText(store);  noteField.setText(note);  cardIdField.setText(cardId);  barcodeTypeField.setText(barcodeType);  assertEquals(false,activity.isFinishing());  saveButton.performClick();  assertEquals(true,activity.isFinishing());  assertEquals(1,db.getLoyaltyCardCount());  LoyaltyCard card=db.getLoyaltyCard(1);  assertEquals(store,card.store);  assertEquals(note,card.note);  assertEquals(cardId,card.cardId);  assertEquals(barcodeType,card.barcodeType);}  }
class C{  public T peek(){  return head.element;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.518 -0500",hash_original_method="ECC92B44317075FA349076F0B0608CC3",hash_generated_method="65116EA66D8224173DAB085A371A4E8B") public final Message obtainMessage(){  if (mSmHandler == null)   return null;  return Message.obtain(mSmHandler);}  }
class C{  public static void ensureVisible(String componentName){  if (verbose) {    log("ensureVisible(" + componentName + ")");  }  ensureVisible(findByName(componentName));}  }
class C{  public CovNoise(){}  }
class C{  @DSComment("constructor") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.398 -0500",hash_original_method="79B820032F5D7F722A5DF12324BC548A",hash_generated_method="5E252719E39637156C8BAC11C1AC30FD") private ContentValues(HashMap<String,Object> values){  mValues=values;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.197 -0500",hash_original_method="2EA3CE69FA8B837FDAA4CA6DE51D2499",hash_generated_method="AAE65D57329207CA6E43888EEC2755F7") private String guessMimeTypeFromExtension(String url){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"guessMimeTypeFromExtension: url = " + url);  }  return MimeTypeMap.getSingleton().getMimeTypeFromExtension(MimeTypeMap.getFileExtensionFromUrl(url));}  }
class C{  public static int indexOfIgnoreCase(String src,char c,int startIndex,int endIndex){  if (startIndex < 0) {    startIndex=0;  }  int srclen=src.length();  if (endIndex > srclen) {    endIndex=srclen;  }  c=Character.toLowerCase(c);  for (int i=startIndex; i < endIndex; i++) {    if (Character.toLowerCase(src.charAt(i)) == c) {      return i;    }  }  return -1;}  }
class C{  private TaxonList readTaxaBlock() throws ImportException, IOException, IllegalArgumentException {  taxonCount=0;  readDataBlockHeader("TAXLABELS",TAXA_BLOCK);  if (taxonCount == 0) {    throw new MissingFieldException("NTAXA");  }  Taxa taxa=new Taxa();  do {    String name=readToken(";").trim();    if (name.length() > 0) {      Taxon taxon=new Taxon(name);      taxa.addTaxon(taxon);    }  } while (getLastDelimiter() != ';');  if (taxa.getTaxonCount() != taxonCount) {    throw new BadFormatException("Number of taxa doesn't match NTAXA field");  }  findEndBlock();  int duplicateTaxon=TaxonList.Utils.findDuplicateTaxon(taxa);  if (duplicateTaxon >= 0)   throw new IllegalArgumentException("Tree contains duplicate taxon name: " + taxa.getTaxon(duplicateTaxon).getId() + "!\nAll taxon names should be unique.");  return taxa;}  }
class C{  protected void printTime(String s){  SimpleDateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");  println(dateFormat.format(new java.util.Date()) + " " + s);}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public static Geometry snapRoundWithPointwisePrecisionReduction(Geometry geom,double scaleFactor){  PrecisionModel pm=new PrecisionModel(scaleFactor);  Geometry roundedGeom=GeometryPrecisionReducer.reducePointwise(geom,pm);  List geomList=new ArrayList();  geomList.add(roundedGeom);  GeometryNoder noder=new GeometryNoder(pm);  List lines=noder.node(geomList);  return FunctionsUtil.getFactoryOrDefault(geom).buildGeometry(lines);}  }
class C{  private void process(Contact field,Annotation type,LabelMap map) throws Exception {  Label label=support.getLabel(field,type);  String path=label.getPath();  String name=label.getName();  if (map.get(path) != null) {    throw new PersistenceException("Duplicate annotation of name '%s' on %s",name,field);  }  process(field,label,map);}  }
class C{  protected void onRegister(){  _registered=true;}  }
class C{  public GetContainerLogsParams withTail(String tail){  this.tail=tail;  return this;}  }
class C{  public boolean isRecursive(){  return this.recursive;}  }
class C{  @PrePersist protected void prePersist(){  this.createdDate=new Date();}  }
class C{  public void startProcessingNode(){  nodeCount.incrementAndGet();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.998 -0500",hash_original_method="66DFA4DCECB08CE2162787D379089FCC",hash_generated_method="79941489EA54B7BC193B1E6CF20E913B") public static void transposeM(float[] mTrans,int mTransOffset,float[] m,int mOffset){  for (int i=0; i < 4; i++) {    int mBase=i * 4 + mOffset;    mTrans[i + mTransOffset]=m[mBase];    mTrans[i + 4 + mTransOffset]=m[mBase + 1];    mTrans[i + 8 + mTransOffset]=m[mBase + 2];    mTrans[i + 12 + mTransOffset]=m[mBase + 3];  }}  }
class C{  public void removeTempGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.TEMP_GRUU);}  }
class C{  public String globalInfo(){  return "Loads all text files in a directory and uses the subdirectory names " + "as class labels. The content of the text files will be stored in a " + "String attribute, the filename can be stored as well.";}  }
class C{  @Deprecated public static String lstrip(String str){  return (str == null) ? null : CharMatcher.LEGACY_WHITESPACE.trimLeadingFrom(str);}  }
class C{  protected SVGOMFilterElement(){}  }
class C{  private void recomputeDefinitelyProduced(){  definitelyProduced=new HashSet<IVariable<?>>();  definitelyProduced.addAll(externallyBound);  for (  IGroupMemberNode node : nonOptionalNonMinusNodes) {    definitelyProduced.addAll(bindingInfoMap.get(node).getDefinitelyProduced());  }}  }
class C{  public static String readFirstLine(File file,Charset charset) throws IOException {  return asCharSource(file,charset).readFirstLine();}  }
class C{  public int compare(Terminal terminal1,Terminal terminal2){  if (terminal1 == terminal2)   return 0;  for (  Associativity ass : list) {    boolean c1=ass.contains(terminal1);    boolean c2=ass.contains(terminal2);    if (!c1) {      if (!c2)       continue; else       return -1;    } else {      if (!c2)       return 1; else       return 0;    }  }  return 0;}  }
class C{  void hubHeartbeat(UpdateServerHeartbeat updateServer,UpdateRackHeartbeat updateRack,UpdatePodSystem updatePod,long sequence){  if (startUpdate(updateRack,updatePod)) {    getHeartbeat().hubHeartbeat(updateServer,updateRack,updatePod,sequence);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)newValue);  return;case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.FUNCTION_EXPRESSION__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean dateAfterInclusive(final Date date1,final Date date2){  return !date1.before(date2);}  }
class C{  public static boolean isDatabaseAlreadyExistsException(Exception e){  return e instanceof SQLException && ((SQLException)e).getErrorCode() == MYSQL_DB_ALREADY_EXISTS_ERROR_CODE;}  }
class C{  @Override public RegularTimePeriod previous(){  Second result=null;  if (this.second != FIRST_SECOND_IN_MINUTE) {    result=new Second(this.second - 1,getMinute());  } else {    Minute previous=(Minute)getMinute().previous();    if (previous != null) {      result=new Second(LAST_SECOND_IN_MINUTE,previous);    }  }  return result;}  }
class C{  public void onMarkerReached(AudioTrack track){  Log.d(LOG,"onMarkerReached()");  if (markerReachedAction == MARKER_REACHED_ACTION_PAUSE) {    track.pause();  }}  }
class C{  public ReadWriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  this(tableSource,storageEngineFactory,DEFAULT_TABLE_SIZE);}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MinMaxCategoryRenderer)) {    return false;  }  MinMaxCategoryRenderer that=(MinMaxCategoryRenderer)obj;  if (this.plotLines != that.plotLines) {    return false;  }  if (!PaintUtilities.equal(this.groupPaint,that.groupPaint)) {    return false;  }  if (!this.groupStroke.equals(that.groupStroke)) {    return false;  }  return super.equals(obj);}  }
class C{  @ApiModelProperty(value="indicates if the object is automatically generated. This property can be updated.") public boolean isDynamic(){  return isDynamic;}  }
class C{  public boolean isFont(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_FONT || b == MAGIC_FONT_LEGACY || b == MAGIC_INDEXED_FONT_LEGACY;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public SubRoutineStatement subroutine(){  if (this.associatedNode instanceof SubRoutineStatement) {    if (this.parent.subroutine() == this.associatedNode)     return null;    return (SubRoutineStatement)this.associatedNode;  }  return null;}  }
class C{  private void informNearbyPlayers(final WeddingRing ring){  try {    final Entity container=(Entity)ring.getBaseContainer();    final StendhalRPZone zone=getZone();    if (zone != null) {      for (      final Player player : zone.getPlayers()) {        if (player.nextTo(container)) {          player.sendPrivateText(NotificationType.SCENE_SETTING,"There's a flash of light when a wedding ring disintegrates in a magical conflict.");        }      }    }  } catch (  final Exception e) {    logger.error(e);  }}  }
class C{  public MethodNotFoundException(){  super();}  }
class C{  public TollAnalyzer(final String eventsFile,final double simulationEndTime,final int noOfTimeBins,final String shapeFile,final Network network,final String userGroup){  super(TollAnalyzer.class.getSimpleName());  this.eventsFile=eventsFile;  this.handler=new FilteredTollHandler(simulationEndTime,noOfTimeBins,shapeFile,network,userGroup);}  }
class C{  public Rect(){}  }
class C{  public void mouseClicked(java.awt.event.MouseEvent e){}  }
class C{  public void updateBigDecimal(String columnName,BigDecimal x) throws SQLException {  updateBigDecimal(findColumn(columnName),x);}  }
class C{  public void fireResumeEvent(final int detail){  fireEvent(new DebugEvent(this,DebugEvent.RESUME,detail));}  }
class C{  private int normalize(int rating){  return (100 + rating) / 2;}  }
class C{  @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){  try {    if (key.equalsIgnoreCase("EnableMongoUpload") || key.equalsIgnoreCase("MongoDB URI") || key.equalsIgnoreCase("Collection Name")|| key.equalsIgnoreCase("gcdCollectionName")) {      isDBInitialized=false;    }    if (key.equalsIgnoreCase("logLevel")) {      String level=sharedPreferences.getString("logLevel","1");      if ("2".equalsIgnoreCase(level))       log.setLevel(Level.INFO); else       if ("3".equalsIgnoreCase(level))       log.setLevel(Level.DEBUG); else       log.setLevel(Level.ERROR);    }    if (sharedPreferences.contains("monitor_type") && key.equalsIgnoreCase("monitor_type")) {      String type=sharedPreferences.getString("monitor_type","1");      if ("2".equalsIgnoreCase(type)) {        if (sharedPreferences.contains("calibrationType")) {          type=sharedPreferences.getString("calibrationType","3");          if ("3".equalsIgnoreCase(type)) {            calibrationSelected=MedtronicConstants.CALIBRATION_MANUAL;            mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);          } else           if ("2".equalsIgnoreCase(type)) {            type=sharedPreferences.getString("pumpPeriod","1");            if ("2".equalsIgnoreCase(type))             pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS; else             if ("3".equalsIgnoreCase(type))             pumpPeriod=MedtronicConstants.TIME_90_MIN_IN_MS; else             if ("4".equalsIgnoreCase(type))             pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS + MedtronicConstants.TIME_60_MIN_IN_MS; else             pumpPeriod=MedtronicConstants.TIME_30_MIN_IN_MS;            calibrationSelected=MedtronicConstants.CALIBRATION_SENSOR;            mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);            mHandlerSensorCalibration.postDelayed(getCalibrationFromSensor,pumpPeriod);          } else {            calibrationSelected=MedtronicConstants.CALIBRATION_GLUCOMETER;            mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);          }synchronized (medtronicReader.calibrationSelectedLock) {            medtronicReader.calibrationSelected=calibrationSelected;          }        }      }    }    if (sharedPreferences.contains("calibrationType") && key.equalsIgnoreCase("calibrationType")) {      String type=sharedPreferences.getString("pumpPeriod","1");      if ("2".equalsIgnoreCase(type))       pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS; else       if ("3".equalsIgnoreCase(type))       pumpPeriod=MedtronicConstants.TIME_90_MIN_IN_MS; else       if ("4".equalsIgnoreCase(type))       pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS + MedtronicConstants.TIME_60_MIN_IN_MS; else       pumpPeriod=MedtronicConstants.TIME_30_MIN_IN_MS;      type=sharedPreferences.getString("calibrationType","3");      if ("3".equalsIgnoreCase(type)) {        calibrationSelected=MedtronicConstants.CALIBRATION_MANUAL;        mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);      } else       if ("2".equalsIgnoreCase(type)) {        calibrationSelected=MedtronicConstants.CALIBRATION_SENSOR;        mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);        mHandlerSensorCalibration.postDelayed(getCalibrationFromSensor,pumpPeriod);      } else {        calibrationSelected=MedtronicConstants.CALIBRATION_GLUCOMETER;        mHandlerSensorCalibration.removeCallbacks(getCalibrationFromSensor);      }synchronized (medtronicReader.calibrationSelectedLock) {        medtronicReader.calibrationSelected=calibrationSelected;      }      String type1=sharedPreferences.getString("glucSrcTypes","1");      if (calibrationSelected != MedtronicConstants.CALIBRATION_SENSOR && type1.equals("1")) {        mHandler3ActivatePump.removeCallbacks(getCalibrationFromSensor);      }    }    if (key.equalsIgnoreCase("pumpPeriod")) {      if (sharedPreferences.contains("pumpPeriod")) {        String type=sharedPreferences.getString("pumpPeriod","1");        if ("2".equalsIgnoreCase(type))         pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS; else         if ("3".equalsIgnoreCase(type))         pumpPeriod=MedtronicConstants.TIME_90_MIN_IN_MS; else         if ("4".equalsIgnoreCase(type))         pumpPeriod=MedtronicConstants.TIME_60_MIN_IN_MS + MedtronicConstants.TIME_60_MIN_IN_MS; else         pumpPeriod=MedtronicConstants.TIME_30_MIN_IN_MS;      }      if (medtronicReader != null) {        mHandler3ActivatePump.removeCallbacks(getCalibrationFromSensor);        if (pumpPeriod > -1)         mHandler3ActivatePump.postDelayed(getCalibrationFromSensor,pumpPeriod); else         mHandler3ActivatePump.post(getCalibrationFromSensor);      }    }    if (key.equalsIgnoreCase("glucSrcTypes")) {      String type1=sharedPreferences.getString("glucSrcTypes","1");      if (calibrationSelected != MedtronicConstants.CALIBRATION_SENSOR && type1.equals("1")) {        mHandler3ActivatePump.removeCallbacks(getCalibrationFromSensor);      }      if (type1.equals("2")) {        medtronicReader.mHandlerCheckLastRead=null;        medtronicReader.checkLastRead=null;        mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);        String type=prefs.getString("historicPeriod","1");        if ("2".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_10_MIN_IN_MS; else         if ("3".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else         if ("4".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else         historicLogPeriod=MedtronicConstants.TIME_5_MIN_IN_MS;        if (settings.getLong("lastHistoricRead",0) != 0) {          if ((System.currentTimeMillis() - settings.getLong("lastHistoricRead",0)) >= historicLogPeriod) {            mHandlerReadFromHistoric.post(readDataFromHistoric);            SharedPreferences.Editor editor=settings.edit();            editor.putLong("lastHistoricRead",System.currentTimeMillis());            editor.commit();          }        } else {          mHandlerReadFromHistoric.post(readDataFromHistoric);          SharedPreferences.Editor editor=settings.edit();          editor.putLong("lastHistoricRead",System.currentTimeMillis());          editor.commit();        }      } else       if (type1.equals("1")) {        medtronicReader.mHandlerCheckLastRead=null;        medtronicReader.checkLastRead=null;        mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);        mHandlerCheckLastRead.removeCallbacks(checkLastRead);      } else       if (type1.equals("3")) {        medtronicReader.mHandlerCheckLastRead=mHandlerCheckLastRead;        medtronicReader.checkLastRead=checkLastRead;        mHandlerCheckLastRead.removeCallbacks(checkLastRead);        String type=prefs.getString("historicMixPeriod","1");        if ("2".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else         if ("3".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_20_MIN_IN_MS; else         if ("4".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_20_MIN_IN_MS + MedtronicConstants.TIME_5_MIN_IN_MS; else         if ("5".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS; else         if ("6".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_5_MIN_IN_MS; else         if ("7".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_10_MIN_IN_MS; else         if ("8".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_15_MIN_IN_MS; else         if ("9".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_20_MIN_IN_MS; else         if ("10".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_60_MIN_IN_MS - MedtronicConstants.TIME_5_MIN_IN_MS; else         if ("11".equalsIgnoreCase(type))         historicLogPeriod=MedtronicConstants.TIME_60_MIN_IN_MS; else         historicLogPeriod=MedtronicConstants.TIME_10_MIN_IN_MS;        mHandlerCheckLastRead.post(checkLastRead);      }    }    if (key.equalsIgnoreCase("historicPeriod")) {      mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);      String type=sharedPreferences.getString("historicPeriod","1");      if ("2".equalsIgnoreCase(type))       historicLogPeriod=MedtronicConstants.TIME_10_MIN_IN_MS; else       if ("3".equalsIgnoreCase(type))       historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else       if ("4".equalsIgnoreCase(type))       historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else       historicLogPeriod=MedtronicConstants.TIME_5_MIN_IN_MS;      mHandlerReadFromHistoric.post(readDataFromHistoric);      SharedPreferences.Editor editor=settings.edit();      editor.putLong("lastHistoricRead",System.currentTimeMillis());      editor.commit();    }    if (key.equals("MongoDB URI")) {      initializeDB();    }    if (key.equals("medtronic_cgm_id") || key.equals("glucometer_cgm_id") || key.equals("sensor_cgm_id")) {      String newID=sharedPreferences.getString("medtronic_cgm_id","");      if (newID != null && !"".equals(newID.replaceAll(" ",""))) {        mHandlerCheckSerial.removeCallbacks(readAndUpload);        byte[] newIdPump=HexDump.hexStringToByteArray(newID);        if (key.equals("medtronic_cgm_id") && !Arrays.equals(newIdPump,medtronicReader.idPump)) {          SharedPreferences.Editor editor=settings.edit();          editor.remove("lastGlucometerMessage");          editor.remove("previousValue");          editor.remove("expectedSensorSortNumber");          editor.remove("knownDevices");          editor.remove("isCalibrating");          editor.remove("previousValue");          editor.remove("expectedSensorSortNumber");          editor.remove("lastGlucometerValue");          editor.remove("lastGlucometerDate");          editor.remove("expectedSensorSortNumberForCalibration0");          editor.remove("expectedSensorSortNumberForCalibration1");          editor.remove("lastPumpAwake");          editor.commit();synchronized (checkSerialLock) {            mHandlerCheckSerial.removeCallbacks(readAndUpload);            mHandlerActive=false;          }          medtronicReader=new MedtronicReader(mSerial,getBaseContext(),mClients,null);          medtronicReader.idPump=newIdPump;synchronized (checkSerialLock) {            mHandlerCheckSerial.post(readAndUpload);            mHandlerActive=true;            if (medtronicReader != null) {              mHandler3ActivatePump.removeCallbacks(activateNewPump);              mHandler3ActivatePump.post(activateNewPump);              mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);              if (hGetter == null) {                hGetter=new HistoricGetterThread(mClients,medtronicReader,medtronicReader.idPump,mSerial,mHandlerReadFromHistoric);              } else               hGetter.init();              medtronicReader.historicPageIndex=-1;              medtronicReader.historicPageShift=0;              medtronicReader.datalog=new DataLog();              String type1=sharedPreferences.getString("glucSrcTypes","1");              if (type1.equals("2")) {                medtronicReader.mHandlerCheckLastRead=null;                medtronicReader.checkLastRead=null;                mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);                if (prefs.contains("historicPeriod")) {                  String type=prefs.getString("historicPeriod","1");                  if ("2".equalsIgnoreCase(type))                   historicLogPeriod=MedtronicConstants.TIME_10_MIN_IN_MS; else                   if ("3".equalsIgnoreCase(type))                   historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else                   if ("4".equalsIgnoreCase(type))                   historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else                   historicLogPeriod=MedtronicConstants.TIME_5_MIN_IN_MS;                }                if (settings.getLong("lastHistoricRead",0) != 0) {                  if ((System.currentTimeMillis() - settings.getLong("lastHistoricRead",0)) >= historicLogPeriod) {                    mHandlerReadFromHistoric.post(readDataFromHistoric);                    SharedPreferences.Editor editor2=settings.edit();                    editor2.putLong("lastHistoricRead",System.currentTimeMillis());                    editor2.commit();                  }                } else {                  mHandlerReadFromHistoric.post(readDataFromHistoric);                  SharedPreferences.Editor editor2=settings.edit();                  editor2.putLong("lastHistoricRead",System.currentTimeMillis());                  editor2.commit();                }              } else               if (type1.equals("1")) {                medtronicReader.mHandlerCheckLastRead=null;                medtronicReader.checkLastRead=null;                mHandlerReadFromHistoric.removeCallbacks(readDataFromHistoric);                mHandlerCheckLastRead.removeCallbacks(checkLastRead);              } else               if (type1.equals("3")) {                medtronicReader.mHandlerCheckLastRead=mHandlerCheckLastRead;                medtronicReader.checkLastRead=checkLastRead;                mHandlerCheckLastRead.removeCallbacks(checkLastRead);                String type=prefs.getString("historicMixPeriod","1");                if ("2".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_15_MIN_IN_MS; else                 if ("3".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_20_MIN_IN_MS; else                 if ("4".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_20_MIN_IN_MS + MedtronicConstants.TIME_5_MIN_IN_MS; else                 if ("5".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS; else                 if ("6".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_5_MIN_IN_MS; else                 if ("7".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_10_MIN_IN_MS; else                 if ("8".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_15_MIN_IN_MS; else                 if ("9".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_30_MIN_IN_MS + MedtronicConstants.TIME_20_MIN_IN_MS; else                 if ("10".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_60_MIN_IN_MS - MedtronicConstants.TIME_5_MIN_IN_MS; else                 if ("11".equalsIgnoreCase(type))                 historicLogPeriod=MedtronicConstants.TIME_60_MIN_IN_MS; else                 historicLogPeriod=MedtronicConstants.TIME_10_MIN_IN_MS;                mHandlerCheckLastRead.post(checkLastRead);              }            }          }        } else {          if (key.equalsIgnoreCase("glucometer_cgm_id") && prefs.contains("glucometer_cgm_id")) {            if (prefs.getString("glucometer_cgm_id","").length() > 0) {              if (!medtronicReader.knownDevices.contains(prefs.getString("glucometer_cgm_id",""))) {                medtronicReader.knownDevices.add(prefs.getString("glucometer_cgm_id",""));              }              medtronicReader.idGluc=HexDump.hexStringToByteArray(prefs.getString("glucometer_cgm_id",""));            }          }          if (key.equalsIgnoreCase("sensor_cgm_id") && prefs.contains("sensor_cgm_id")) {            if (prefs.getString("sensor_cgm_id","").length() > 0) {              String sensorID=HexDump.toHexString(Integer.parseInt(prefs.getString("sensor_cgm_id","0")));              while (sensorID != null && sensorID.length() > 6) {                sensorID=sensorID.substring(1);              }              if (!medtronicReader.knownDevices.contains(sensorID)) {                medtronicReader.knownDevices.add(sensorID);              }              medtronicReader.idSensor=HexDump.hexStringToByteArray(sensorID);            }          }          medtronicReader.storeKnownDevices();          mHandlerCheckSerial.post(readAndUpload);        }      }    }  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString()).append("\n");      ;    }    sendMessageToUI(sb1.toString(),false);  }}  }
class C{  @Override public double classifyInstance(Instance inst) throws Exception {  if (m_ZeroR != null) {    return m_ZeroR.classifyInstance(inst);  }  int v=0;  if (inst.isMissing(m_rule.m_attr)) {    if (m_rule.m_missingValueClass != -1) {      return m_rule.m_missingValueClass;    } else {      return 0;    }  }  if (m_rule.m_attr.isNominal()) {    v=(int)inst.value(m_rule.m_attr);  } else {    while (v < m_rule.m_breakpoints.length && inst.value(m_rule.m_attr) >= m_rule.m_breakpoints[v]) {      v++;    }  }  return m_rule.m_classifications[v];}  }
class C{  public NFA(int numInput,LexScan scanner,RegExps regExps,Macros macros,CharClasses classes){  this(numInput,regExps.NFASize(macros) + 2 * scanner.states.number());  this.scanner=scanner;  this.regExps=regExps;  this.macros=macros;  this.classes=classes;  numLexStates=scanner.states.number();  int new_num=numEntryStates();  ensureCapacity(new_num);  numStates=new_num;}  }
class C{  public ProfileVisit visitedAtEncrypted(String visitedAtEncrypted){  this.visitedAtEncrypted=visitedAtEncrypted;  return this;}  }
class C{  public static String removeDuplicateWhitespace(String s){  StringBuilder result=new StringBuilder();  int length=s.length();  boolean isPreviousWhiteSpace=false;  for (int i=0; i < length; i++) {    char c=s.charAt(i);    boolean thisCharWhiteSpace=Character.isWhitespace(c);    if (!(isPreviousWhiteSpace && thisCharWhiteSpace)) {      result.append(c);    }    isPreviousWhiteSpace=thisCharWhiteSpace;  }  return result.toString();}  }
class C{  public static ServiceId create(String xRoadInstance,String memberClass,String memberCode,String subsystemCode,String serviceCode){  return create(xRoadInstance,memberClass,memberCode,subsystemCode,serviceCode,null);}  }
class C{  public boolean isDurable(){  if (message.getHeader() == null || message.getHeader().getDurable() == null) {    return false;  }  return message.getHeader().getDurable();}  }
class C{  protected void removeTransformerFromManager(Instrumentation manager,ClassFileTransformer transformer,boolean decrementIndex){  removeTransformerFromManager(manager,transformer);  if (decrementIndex) {    fTransformerIndex--;    verbosePrint("removeTransformerFromManager fTransformerIndex decremented to: " + fTransformerIndex);  }}  }
class C{  public char peekChar(int offset){  if (!canReadChars(offset)) {    throw new ArrayIndexOutOfBoundsException();  }  return _content[_index + offset];}  }
class C{  public static Transport block2Transport(String protocol){  if (protocol == null) {    return null;  }  if (Block.iSCSI.name().equals(protocol)) {    return Transport.IP;  }  if (Block.FCoE.name().equals(protocol)) {    return Transport.Ethernet;  }  if (Block.FC.name().equals(protocol)) {    return Transport.FC;  }  if (Block.ScaleIO.name().equals(protocol)) {    return Transport.ScaleIO;  }  if (Block.RBD.name().equals(protocol)) {    return Transport.IP;  }  throw new RuntimeException("Invalid block protocol");}  }
class C{  public void addfixedAnimation(String name,BaseAnim anim){  animMap.put(name,anim);}  }
class C{  public final void unconsultFile(final String strFileName){  final String[] strCurDir=new String[1];  final String[] strFName=new String[1];  try {    final InputStream ins=StreamManager.getStreamManager().getInputStream(strFileName,m_strSearchPath,strFName,strCurDir);    ins.close();  } catch (  IOException ex) {  }synchronized (m_globalDB) {    m_globalDB.unconsult(strFName[0]);  }}  }
class C{  public CheckedCollection(Collection<E> c,Class<E> type){  if (c == null || type == null) {    throw new NullPointerException();  }  this.c=c;  this.type=type;}  }
class C{  public static int primaryOrder(int order){  return ((order & PRIMARY_ORDER_MASK_) >> PRIMARY_ORDER_SHIFT_) & UNSIGNED_16_BIT_MASK_;}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  StringBuffer rs=new StringBuffer();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2')   throw new IllegalArgumentException("Invalid salt version");  if (salt.charAt(2) == '$')   off=3; else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$')     throw new IllegalArgumentException("Invalid salt revision");    off=4;  }  if (salt.charAt(off + 2) > '$')   throw new IllegalArgumentException("Missing salt rounds");  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds);  rs.append("$2");  if (minor >= 'a')   rs.append(minor);  rs.append("$");  if (rounds < 10)   rs.append("0");  rs.append(Integer.toString(rounds));  rs.append("$");  rs.append(encode_base64(saltb,saltb.length));  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return rs.toString();}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void init(boolean forSigning,CipherParameters parameters){  this.forSigning=forSigning;  AsymmetricKeyParameter k;  if (parameters instanceof ParametersWithRandom) {    k=(AsymmetricKeyParameter)((ParametersWithRandom)parameters).getParameters();  } else {    k=(AsymmetricKeyParameter)parameters;  }  if (forSigning && !k.isPrivate()) {    throw new IllegalArgumentException("signing requires private key");  }  if (!forSigning && k.isPrivate()) {    throw new IllegalArgumentException("verification requires public key");  }  reset();  rsaEngine.init(forSigning,parameters);}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery(" + quote(sql) + ")");    }synchronized (session) {      checkClosed();      closeOldResultSet();      sql=JdbcConnection.translateSQL(sql,escapeProcessing);      CommandInterface command=conn.prepareCommand(sql,fetchSize);      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      setExecutingStatement(command);      try {        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      command.close();      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public <T extends MediaEntity>void export(List<T> moviesToExport,Path exportDir) throws Exception {  LOGGER.info("preparing movie export; using " + properties.getProperty("name"));  engine.registerNamedRenderer(new NamedDateRenderer());  engine.registerNamedRenderer(new MovieFilenameRenderer());  engine.registerNamedRenderer(new ArtworkCopyRenderer(exportDir));  if (!Files.exists(exportDir)) {    try {      Files.createDirectories(exportDir);    } catch (    Exception e) {      throw new Exception("error creating export directory");    }  }  Path listExportFile=null;  if (fileExtension.equalsIgnoreCase("html")) {    listExportFile=exportDir.resolve("index.html");  }  if (fileExtension.equalsIgnoreCase("xml")) {    listExportFile=exportDir.resolve("movielist.xml");  }  if (fileExtension.equalsIgnoreCase("csv")) {    listExportFile=exportDir.resolve("movielist.csv");  }  if (listExportFile == null) {    throw new Exception("error creating movie list file");  }  LOGGER.info("generating movie list");  Utils.deleteFileSafely(listExportFile);  Map<String,Object> root=new HashMap<>();  root.put("movies",new ArrayList<>(moviesToExport));  String output=engine.transform(listTemplate,root);  Utils.writeStringToFile(listExportFile,output);  LOGGER.info("movie list generated: " + listExportFile);  if (StringUtils.isNotBlank(detailTemplate)) {    Path detailsDir=exportDir.resolve("movies");    if (Files.isDirectory(detailsDir)) {      Utils.deleteDirectoryRecursive(detailsDir);    }    Files.createDirectory(detailsDir);    for (    MediaEntity me : moviesToExport) {      Movie movie=(Movie)me;      LOGGER.debug("processing movie " + movie.getTitle());      String detailFilename=MovieRenamer.createDestinationForFilename(MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerFilename(),movie);      if (StringUtils.isBlank(detailFilename)) {        detailFilename=movie.getVideoBasenameWithoutStacking();      }      Path detailsExportFile=detailsDir.resolve(detailFilename + "." + fileExtension);      root=new HashMap<>();      root.put("movie",movie);      output=engine.transform(detailTemplate,root);      Utils.writeStringToFile(detailsExportFile,output);    }    LOGGER.info("movie detail pages generated: " + exportDir);  }  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(templateDir)){    for (    Path path : directoryStream) {      if (Utils.isRegularFile(path)) {        if (path.getFileName().toString().endsWith(".jmte") || path.getFileName().toString().endsWith("template.conf")) {          continue;        }        Files.copy(path,exportDir.resolve(path.getFileName()),StandardCopyOption.REPLACE_EXISTING);      } else       if (Files.isDirectory(path)) {        Utils.copyDirectoryRecursive(path,exportDir.resolve(path.getFileName()));      }    }  } catch (  IOException ex) {    LOGGER.error("could not copy resources: ",ex);  }}  }
class C{  private static boolean matchBindingSets(List<? extends BindingSet> queryResult1,Iterable<? extends BindingSet> queryResult2,Map<BNode,BNode> bNodeMapping,int idx){  boolean result=false;  if (idx < queryResult1.size()) {    BindingSet bs1=queryResult1.get(idx);    List<BindingSet> matchingBindingSets=findMatchingBindingSets(bs1,queryResult2,bNodeMapping);    for (    BindingSet bs2 : matchingBindingSets) {      Map<BNode,BNode> newBNodeMapping=new HashMap<BNode,BNode>(bNodeMapping);      for (      Binding binding : bs1) {        if (binding.getValue() instanceof BNode) {          newBNodeMapping.put((BNode)binding.getValue(),(BNode)bs2.getValue(binding.getName()));        }      }      result=matchBindingSets(queryResult1,queryResult2,newBNodeMapping,idx + 1);      if (result == true) {        break;      }    }  } else {    result=true;  }  return result;}  }
class C{  public ThrowingCstInsn(Rop opcode,SourcePosition position,RegisterSpecList sources,TypeList catches,Constant cst){  super(opcode,position,null,sources,cst);  if (opcode.getBranchingness() != Rop.BRANCH_THROW) {    throw new IllegalArgumentException("bogus branchingness");  }  if (catches == null) {    throw new NullPointerException("catches == null");  }  this.catches=catches;}  }
class C{  public Builder withoutStrictParsing(){  return new Builder(args,validation,false);}  }
class C{  public void writePopulation(String outputfolder){  if (this.sc.getPopulation().getPersons().size() == 0) {    LOG.error("No persons or person attributes to write.");  } else {    LOG.info("Writing population to file.");    PopulationWriter pw=new PopulationWriter(sc.getPopulation(),sc.getNetwork());    pw.writeV5(outputfolder + "Population.xml");    LOG.info("Writing person attributes to file.");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getPopulation().getPersonAttributes());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "PersonAttributes.xml");  }}  }
class C{  public AlignToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));}  }
class C{  public void removeParam(Class modelClass){  Object param=paramMap.get(modelClass);  if (param != null && param instanceof SessionListener) {    SessionListener listener=(SessionListener)param;    getSessionSupport().removeSessionListener(listener);  }  paramMap.remove(modelClass);}  }
class C{  public static double nextErlang(double variance,double mean,MersenneTwisterFast randomGenerator){  int k=(int)((mean * mean) / variance + 0.5);  k=(k > 0) ? k : 1;  double a=k / mean;  double prod=1.0;  for (int i=0; i < k; i++)   prod*=randomGenerator.nextDouble();  return -Math.log(prod) / a;}  }
class C{  public static boolean isValidPhone(String phoneNumber){  if (TextUtils.isEmpty(phoneNumber)) {    return false;  } else {    return Patterns.PHONE.matcher(phoneNumber).matches();  }}  }
class C{  public double calculateValuePos(double value,double valueSegment){  if (value > 0 && minVal > 0) {    value-=minVal;  } else   if (value < 0 && maxVal < 0) {    value-=maxVal;  }  return value * valueSegment;}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  private int readBang(boolean inScript) throws IOException {  int ret=readComment(inScript);  if (ret == MATCH)   return MATCH;  if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>') {    int ch=next();    if (ch == '>')     return MATCH;    while ((numRead - lastMark) < safeReadAheadLimit) {      ch=next();      if (ch == '>') {        return MATCH;      } else       if (ch < 0) {        return MISMATCH;      }    }  }  return MISMATCH;}  }
class C{  public synchronized Data findData(Data data){  if (data == null) {    return null;  }  return this.entityManager.find(data.getClass(),data.getId());}  }
class C{  public static CssSchema union(CssSchema... cssSchemas){  if (cssSchemas.length == 1) {    return cssSchemas[0];  }  Map<String,Property> properties=Maps.newLinkedHashMap();  for (  CssSchema cssSchema : cssSchemas) {    properties.putAll(cssSchema.properties);  }  return new CssSchema(ImmutableMap.copyOf(properties));}  }
class C{  public boolean isPrimitive(){  Class<?> t=getTypeInternal();  return t != null && t.isPrimitive();}  }
class C{  public void disposeBefore(long pos){  long index=pos / BUFFER_LENGTH;  if (index < cacheStart) {    throw new IndexOutOfBoundsException("pos already disposed");  }  long numBlocks=Math.min(index - cacheStart,cache.size());  for (long i=0; i < numBlocks; i++) {    cache.remove(0);  }  this.cacheStart=index;}  }
class C{  @Override public void onConfiguration(HobbitOps.View view,boolean firstTimeIn){  super.onConfiguration(view,firstTimeIn);  if (firstTimeIn) {    ContentResolver cr=view.getApplicationContext().getContentResolver();    mCpc=cr.acquireContentProviderClient(CharacterContract.CharacterEntry.CONTENT_URI);  }}  }
class C{  public AbstractQueryProtocol(final UrlParser urlParser,final ReentrantLock lock){  super(urlParser,lock);}  }
class C{  public void extract(BufferedImage bimg){  BufferedImage sml=ImageUtils.scaleImage(bimg,SIZE);  WritableRaster raster=sml.getRaster();  int bands=raster.getNumBands();  int clipB=0, clipD=0;  float average=0;  float sum=0;  int[] hist=new int[BINS];  int[] hist256=new int[256];  int max=0;  if (bands == 3) {    int w=raster.getWidth();    int h=raster.getHeight();    int numPixels=w * h;    int[] pixels=raster.getPixels(0,0,w,h,new int[numPixels * bands]);    int[] gPixels=new int[numPixels];    for (int i=0; i < w * h * bands; i+=bands) {      int grey=(pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;      float[] hsv=new float[3];      brightness+=(float)grey / 255;      int cornerSum=pixels[0] + pixels[1] + pixels[2]+ pixels[w * h * 3 - 3]+ pixels[w * h * 3 - 2]+ pixels[w * h * 3 - 1];      if (!(cornerSum == 0 || cornerSum == 255 * 6)) {        if (grey == 255) {          clipB+=1;        } else         if (grey == 0) {          clipD+=1;        }      }      gPixels[i / 3]=grey;      sum+=grey;      hist256[grey]++;      Color.RGBtoHSB(pixels[i],pixels[i + 1],pixels[i + 2],hsv);      if (hsv[2] > 0.15 && hsv[2] < 0.95 && hsv[1] > 0.2) {        hist[(int)(hsv[0] * 20)]++;      }      saturation+=hsv[1];    }    complexity=getComplexity(bimg);    clipping=(float)(clipB + clipD / 2) / numPixels;    brightness/=numPixels;    average=sum / numPixels;    float dev=stdDeviation(gPixels,average);    contrast=dev / 128f;    for (int i=0; i < BINS; i++) {      if (hist[i] > max) {        max=hist[i];      }    }    max*=threshold;    for (int i=0; i < BINS; i++) {      if (hist[i] > max) {        hueCount++;      }    }    hueCount/=BINS;    for (int i=0; i < 256; i++) {      float temp=((float)hist256[i]) / (float)(w * h);      energy+=temp * temp;    }    for (int i=0; i < 256; i++) {      float temp=((float)hist256[i]) / (float)(w * h);      float temp2=(i - average);      skew+=temp2 * temp2 * temp2* temp;    }    skew/=dev * dev * dev;    saturation/=numPixels;  }}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public boolean testVarUnassigned(int varNumber){  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=((varNumber / VBITS - 1) * 2) + 1;    if (i >= x.length) {      return (x == fullX);    }    return (x[i] & bit) != 0;  } else {    return (uset & bit) != 0;  }}  }
class C{  protected void storeEventListenerNS(EventTarget t,String n,String s,EventListener l,boolean b){synchronized (eventListenerSet) {    eventListenerSet.add(new EventListenerMememto(t,n,s,l,b,this));  }}  }
class C{  public CopyRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String name,final ItemReference parentReference){  super(requestUrl,client,options,name,parentReference);}  }
class C{  public Vector3f multLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x*=vec.x;  y*=vec.y;  z*=vec.z;  return this;}  }
class C{  public void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IsTest"))     m_test=Boolean.valueOf("Y".equals(para[i].getParameter())); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_system=MSystem.get(getCtx());}  }
class C{  public void clearOffScreen(){  if (isDoubleBuffered)   return;  updateWorkingBuffers();  if (workImg == null)   return;synchronized (workImg) {    Graphics2D g2d=workImg.createGraphics();    g2d.setComposite(AlphaComposite.Clear);    g2d.fillRect(0,0,workImg.getWidth(),workImg.getHeight());    g2d.dispose();  }  damagedAreas=null;}  }
class C{  public void disallowIn(int x,int y,int width,int height){  teleRules.disallowIn(x,y,width,height);}  }
class C{  public int hashCode(){  return ((location == null ? 0 : location.hashCode() << 24) ^ (env == null ? 0 : env.hashCode() << 16) ^ (className == null ? 0 : className.hashCode() << 8)^ (data == null ? 0 : data.hashCode()));}  }
class C{  private void connect() throws ConnectionFailedException, IOException {  try {    final JMXServiceURL jmxUrl=getJMXServiceURL();    this.jmxc=JMXConnectorFactory.connect(jmxUrl);    this.server=this.jmxc.getMBeanServerConnection();  } catch (  AttachNotSupportedException e) {    throw new ConnectionFailedException("Failed to connect to process '" + this.pid + "'",e);  }}  }
class C{  @PUT @Path("/ostenants") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public OSTenantListRestRep updateOpenstackTenants(OSTenantListRestRep param){  _log.debug("Keystone Service - updateOpenstackTenants");  if (param.getOSTenantsRestRep() == null || param.getOSTenantsRestRep().isEmpty()) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Tenant list param");  }  OSTenantListRestRep resp=new OSTenantListRestRep();  List<OSTenant> tenantsToUpdate=new ArrayList<>();  List<OSTenant> tenantsToDelete=new ArrayList<>();  OSTenant osTenant;  for (  OSTenantRestRep tenant : param.getOSTenantsRestRep()) {    osTenant=_dbClient.queryObject(OSTenant.class,tenant.getId());    if (!osTenant.getExcluded().equals(tenant.getExcluded())) {      if (!osTenant.getExcluded()) {        tenantsToDelete.add(osTenant);      } else {        tenantsToUpdate.add(osTenant);      }      osTenant.setExcluded(tenant.getExcluded());      resp.getOSTenantsRestRep().add(mapToCoprhdOsTenant(osTenant));    }  }  if (!tenantsToUpdate.isEmpty()) {    for (    OSTenant tenant : tenantsToUpdate) {      if (_keystoneUtils.getCoprhdTenantWithOpenstackId(tenant.getOsId()) == null) {        _authService.createTenantAndProjectForOpenstackTenant(tenant);      }    }  }  tenantsToUpdate.addAll(tenantsToDelete);  if (!tenantsToUpdate.isEmpty()) {    _dbClient.updateObject(tenantsToUpdate);  }  if (!tenantsToDelete.isEmpty()) {    for (    OSTenant tenant : tenantsToDelete) {      TenantOrg tenantOrg=_keystoneUtils.getCoprhdTenantWithOpenstackId(tenant.getOsId());      if (tenantOrg != null && !TenantOrg.isRootTenant(tenantOrg)) {        URIQueryResultList uris=new URIQueryResultList();        _dbClient.queryByConstraint(PrefixConstraint.Factory.getTagsPrefixConstraint(Project.class,tenant.getOsId(),tenantOrg.getId()),uris);        for (        URI projectUri : uris) {          Project project=_dbClient.queryObject(Project.class,projectUri);          ArgValidator.checkReference(Project.class,project.getId(),checkForDelete(project));          _dbClient.markForDeletion(project);        }        ArgValidator.checkReference(TenantOrg.class,tenantOrg.getId(),checkForDelete(tenantOrg));        _dbClient.markForDeletion(tenantOrg);      }    }  }  return resp;}  }
class C{  public V currentValue(){  return values[lastPos];}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Integer && val instanceof Float) {          int k=unwrapKey(key);          float v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  private ComputeState createComputeHost() throws Throwable {  ComputeState computeState=new ComputeState();  computeState.id=UUID.randomUUID().toString();  computeState.name=this.computeHostDescription.name;  computeState.documentSelfLink=computeState.id;  computeState.descriptionLink=this.computeHostDescription.documentSelfLink;  computeState.resourcePoolLink=this.resourcePool.documentSelfLink;  computeState.adapterManagementReference=getAdapterManagementReference();  ComputeState returnState=TestUtils.doPost(this.host,computeState,ComputeState.class,UriUtils.buildUri(this.host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  public static synchronized void shutdown(String url,String password,boolean force,boolean all) throws SQLException {  try {    int port=Constants.DEFAULT_TCP_PORT;    int idx=url.lastIndexOf(':');    if (idx >= 0) {      String p=url.substring(idx + 1);      if (StringUtils.isNumber(p)) {        port=Integer.decode(p);      }    }    String db=getManagementDbName(port);    try {      org.h2.Driver.load();    } catch (    Throwable e) {      throw DbException.convert(e);    }    for (int i=0; i < 2; i++) {      Connection conn=null;      PreparedStatement prep=null;      try {        conn=DriverManager.getConnection("jdbc:h2:" + url + "/"+ db,"",password);        prep=conn.prepareStatement("CALL STOP_SERVER(?, ?, ?)");        prep.setInt(1,all ? 0 : port);        prep.setString(2,password);        prep.setInt(3,force ? SHUTDOWN_FORCE : SHUTDOWN_NORMAL);        try {          prep.execute();        } catch (        SQLException e) {          if (force) {          } else {            if (e.getErrorCode() != ErrorCode.CONNECTION_BROKEN_1) {              throw e;            }          }        }        break;      } catch (      SQLException e) {        if (i == 1) {          throw e;        }      } finally {        JdbcUtils.closeSilently(prep);        JdbcUtils.closeSilently(conn);      }    }  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  public ExtendedDirectEditManager(GraphicalEditPart source,Class editorType,CellEditorLocator locator,Label label,ICellEditorValidator validator){  super(source,editorType,locator);  this.label=label;  this.originalValue=label.getText();  this.validator=validator;}  }
class C{  public Builder put(String setting,float value){  put(setting,String.valueOf(value));  return this;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException {  if (request.getPathInfo().length() == 1) {    this.doList(request,response);  } else {    String[] pathInfo=request.getPathInfo().substring(1).split("/");switch (pathInfo[0]) {case LIST:      this.doList(request,response);    break;case GROUP:  if (pathInfo.length == 2) {    this.doGroup(request,response,pathInfo[1]);  } else {    this.doList(request,response);  }break;default :this.doEntry(request,response);break;}}}  }
class C{  private void fitSizeOfScrolledContent(){  Point p=scrollComposite.getSize();  main.setSize(main.computeSize(p.x,SWT.DEFAULT));}  }
class C{  public void clearContent(String database){  databaseManager.clearDatabase(database);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.573 -0500",hash_original_method="02FA7C1768B1D5902CFE928A1217987E",hash_generated_method="284C1DF475CEF71A0B1EFDF0CC6151DE") public static final HashSet readSetXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashSet)readValueXml(parser,new String[1]);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setVolume(stack.getUIMgrSafe().getVideoFrame().getVolume() + getFloat(stack));  return null;}  }
class C{  private Class<?> typeToClass(String value){  try {    return Thread.currentThread().getContextClassLoader().loadClass(value);  } catch (  ClassNotFoundException e) {    throw new ConfigurationException("unknown serializable type: " + value);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  double cutoff=Double.parseDouble(args[2]);  if (cutoff < 0) {    cutoff=0;  }  if (cutoff > 0.95) {    cutoff=0.95;  }  double gain=Double.parseDouble(args[3]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(input.getPreferredPalette());    double minValue=input.getMinimumValue();    double maxValue=input.getMaximumValue();    double range=maxValue - minValue;    double[] data;    double a=1 / (1 + Math.exp(gain * cutoff));    double b=1 / (1 + Math.exp(gain * (cutoff - 1))) - 1 / (1 + Math.exp(gain * cutoff));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          z=(z - minValue) / range;          z=(1 / (1 + Math.exp(gain * (cutoff - z))) - a) / b;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public List<T> subList(int beginIdx,int uptoLength){  return elements.subList(beginIdx,uptoLength);}  }
class C{  public static void drawAngledString(Graphics g,String text,int x,int y,double angle){  Graphics2D g2D=(Graphics2D)g;  AffineTransform oldAt=g2D.getTransform();  AffineTransform at=new AffineTransform(oldAt);  at.rotate(angle,x,y);  g2D.setTransform(at);  g2D.drawString(text,x,y);  g2D.setTransform(oldAt);}  }
class C{  int retrieveState(Mode userMode,boolean isOnline){  int userState=XmppFriend.OFFLINE;  if (userMode == Mode.dnd) {    userState=XmppFriend.BUSY;  } else   if (userMode == Mode.away || userMode == Mode.xa) {    userState=XmppFriend.AWAY;  } else   if (isOnline) {    userState=XmppFriend.ONLINE;  }  return userState;}  }
class C{  public ResultComparator(IDataComparator<? super T> comparator,ICachedDataService cachedDataService,boolean ascending){  this.comparator=comparator;  this.ascending=ascending;  this.cachedDataService=cachedDataService;}  }
class C{  public static AppVersion parse(String versionString){  if (versionString.equals("dev")) {    return new AppVersion(-1,-1,"dev");  }  int minorSeparator=versionString.indexOf('.');  int patchSeparator=versionString.indexOf('.',minorSeparator + 1);  int milestoneSeparator=versionString.indexOf('M',Math.max(minorSeparator,patchSeparator));  int modifierSeparator=versionString.indexOf('-',Math.max(minorSeparator,milestoneSeparator));  if (minorSeparator == -1) {    throw new NumberFormatException("Illegal version string: " + versionString);  }  final boolean hasPatch=patchSeparator > -1;  final boolean hasMilestone=milestoneSeparator > -1;  final boolean hasModifier=modifierSeparator > -1;  String major=versionString.substring(0,minorSeparator);  String minor=null;  String patch=null;  String milestone=null;  String modifier=null;  if (hasModifier) {    modifier=versionString.substring(modifierSeparator + 1);  }  if (hasMilestone) {    if (hasModifier) {      milestone=versionString.substring(milestoneSeparator + 1,modifierSeparator);    } else {      milestone=versionString.substring(milestoneSeparator + 1);    }  }  if (hasPatch) {    if (hasMilestone) {      patch=versionString.substring(patchSeparator + 1,milestoneSeparator);    } else     if (hasModifier) {      patch=versionString.substring(patchSeparator + 1,modifierSeparator);    } else {      patch=versionString.substring(patchSeparator + 1);    }    minor=versionString.substring(minorSeparator + 1,patchSeparator);  } else {    if (hasMilestone) {      minor=versionString.substring(minorSeparator + 1,milestoneSeparator);    } else     if (hasModifier) {      minor=versionString.substring(minorSeparator + 1,modifierSeparator);    } else {      minor=versionString.substring(minorSeparator + 1);    }  }  int majorInt=Integer.parseInt(major);  int minorInt=Integer.parseInt(minor);  int patchInt=patch == null ? -1 : Integer.parseInt(patch);  int milestoneInt=milestone == null ? -1 : Integer.parseInt(milestone);  return new AppVersion(majorInt,minorInt,patchInt,milestoneInt,modifier);}  }
class C{  public static RenderedImage createIndexedImage(RenderedImage src){  PaletteBuilder pb=new PaletteBuilder(src);  pb.buildPalette();  return pb.getIndexedImage();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public <OUT>DataStreamSource<OUT> createTestStream(Collection<OUT> input){  return testEnv.fromInput(input);}  }
class C{  public boolean equalTo(Entry e){  if (e == null)   return false;  if (e.mData != this.mData)   return false;  if (e.mXIndex != this.mXIndex)   return false;  if (Math.abs(e.mVal - this.mVal) > 0.00001f)   return false;  return true;}  }
class C{  public static String hashSecretToString(byte[] secret){  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.update(secret);    byte[] digest=md.digest();    RIPEMD160Digest dig=new RIPEMD160Digest();    dig.update(digest,0,digest.length);    byte[] out=new byte[20];    dig.doFinal(out,0);    return Tools.byteToString(out);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public static String sortLines(final String in){  final String[] split=splitLines(in);  Arrays.sort(split);  final StringBuilder sb=new StringBuilder();  for (  final String s : split) {    sb.append(s).append(StringUtils.LS);  }  return sb.toString();}  }
class C{  public void clearGraph(){  mSeries.clear();}  }
class C{  @Override public int read() throws IOException {  int x=in.read();  if (x != -1) {    check.update(x);  }  return x;}  }
class C{  private static void uaRIMGt(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxGt(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxGt(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public static int evaluateExpression(String expression){  Stack<Integer> operandStack=new Stack<>();  Stack<Character> operatorStack=new Stack<>();  expression=insertBlanks(expression);  String[] tokens=expression.split(" ");  for (  String token : tokens) {    if (token.length() == 0)     continue; else     if (token.charAt(0) == '+' || token.charAt(0) == '-') {      while (!operatorStack.isEmpty() && (operatorStack.peek() == '+' || operatorStack.peek() == '-' || operatorStack.peek() == '*' || operatorStack.peek() == '/' || operatorStack.peek() == '^' || operatorStack.peek() == '%')) {        processAnOperator(operandStack,operatorStack);      }      operatorStack.push(token.charAt(0));    } else     if (token.charAt(0) == '*' || token.charAt(0) == '/' || token.charAt(0) == '%') {      while (!operatorStack.isEmpty() && (operatorStack.peek() == '*' || operatorStack.peek() == '/' || operatorStack.peek() == '%')) {        processAnOperator(operandStack,operatorStack);      }      operatorStack.push(token.charAt(0));    } else     if (token.charAt(0) == '^') {      while (!operatorStack.isEmpty() && operatorStack.peek() == '^') {        processAnOperator(operandStack,operatorStack);      }      operatorStack.push(token.charAt(0));    } else     if (token.trim().charAt(0) == '(') {      operatorStack.push('(');    } else     if (token.trim().charAt(0) == ')') {      while (operatorStack.peek() != '(') {        processAnOperator(operandStack,operatorStack);      }      operatorStack.pop();    } else {      operandStack.push(new Integer(token));    }  }  while (!operatorStack.isEmpty()) {    processAnOperator(operandStack,operatorStack);  }  return operandStack.pop();}  }
class C{  private int changeFieldLength(int columnID,String columnName,int length,String tableName) throws Exception {  int rowsEffected=-1;  StringBuffer selectSql=new StringBuffer();  selectSql.append("SELECT FieldLength");  selectSql.append(" FROM AD_Column");  selectSql.append(" WHERE AD_Column_ID=?");  StringBuffer alterSql=new StringBuffer();  alterSql.append("ALTER TABLE " + tableName);  alterSql.append(" MODIFY " + columnName);  alterSql.append(" NVARCHAR2(");  alterSql.append(length + ") ");  StringBuffer updateSql=new StringBuffer();  updateSql.append("UPDATE AD_Column");  updateSql.append(" SET FieldLength=" + length);  updateSql.append(" WHERE AD_Column_ID=" + columnID);  PreparedStatement selectStmt=null;  selectStmt=m_conn.prepareStatement(selectSql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  selectStmt.setInt(1,columnID);  ResultSet rs=selectStmt.executeQuery();  if (rs.next()) {    if (DB.executeUpdate(alterSql.toString(),false,m_trx.getTrxName()) == -1) {      log.warning("EncryptError [ChangeFieldLength]: ColumnID=" + columnID + ", NewLength="+ length);      throw new Exception();    }    if (DB.executeUpdate(updateSql.toString(),false,m_trx.getTrxName()) == -1) {      log.warning("EncryptError [ChangeFieldLength]: ColumnID=" + columnID + ", NewLength="+ length);      throw new Exception();    }  }  rs.close();  selectStmt.close();  rowsEffected++;  return rowsEffected;}  }
class C{  public static QuadTree build(int dim,double[][] data){  return build(dim,data.clone(),0,data.length);}  }
class C{  private static void sort(short[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        short ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        short a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      short last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    short t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    short t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    short t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    short t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    short pivot1=a[e2];    short pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      short ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        short ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    short pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      short ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  @SuppressWarnings("unchecked") private void handleResponseSuccess(long requestId,Object response){  ContextualFuture future=responseFutures.remove(requestId);  if (future != null) {    future.context.executor().execute(null);  }}  }
class C{  public static int convertTypeToSQLType(int type){  return getDataType(type).sqlType;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void writeOnHALog(final IHAWriteMessage msg,final ByteBuffer data) throws IOException, IllegalStateException {  final Lock lock=m_stateLock.readLock();  lock.lock();  try {    assertOpen();    if (m_rootBlock.getCommitCounter() != msg.getCommitCounter())     throw new IllegalStateException("commitCounter=" + m_rootBlock.getCommitCounter() + ", but msg="+ msg);    if (m_rootBlock.getLastCommitTime() != msg.getLastCommitTime())     throw new IllegalStateException("lastCommitTime=" + m_rootBlock.getLastCommitTime() + ", but msg="+ msg);    if (m_nextSequence != msg.getSequence())     throw new IllegalStateException("nextSequence=" + m_nextSequence + ", but msg="+ msg);    if (haLog.isDebugEnabled())     haLog.debug("msg=" + msg + ", position="+ m_position);    if (m_position < headerSize0)     throw new AssertionError("position=" + m_position + ", but headerSize="+ headerSize0);{      final ByteBuffer tmp=bufferObject(msg);      final int nbytes=tmp.limit();      FileChannelUtility.writeAll(reopener,tmp,m_position);      m_position+=nbytes;      m_nextSequence++;    }switch (m_rootBlock.getStoreType()) {case WORM:case RW:{        final int nbytes=msg.getSize();        assert data.position() == 0;        assert data.limit() == nbytes;        FileChannelUtility.writeAll(reopener,data.duplicate(),m_position);        m_position+=nbytes;        break;      }default :    throw new AssertionError();}m_state.addRecord();}  finally {lock.unlock();}}  }
class C{  public LogPanel(WekaTaskMonitor tm){  this(tm,true,false,true);}  }
class C{  public boolean isSignificant(){  Enumeration cursor=edits.elements();  while (cursor.hasMoreElements()) {    if (((UndoableEdit)cursor.nextElement()).isSignificant()) {      return true;    }  }  return false;}  }
class C{  public double angleBetween(DoubleVector v){  return Math.acos(this.dotProduct(v) / (this.norm() * v.norm()));}  }
class C{  private static void legacyMergeSort(Object[] a,int fromIndex,int toIndex){  Object[] aux=copyOfRange(a,fromIndex,toIndex);  mergeSort(aux,a,fromIndex,toIndex,-fromIndex);}  }
class C{  public static String forJSON(String aText){  final StringBuilder result=new StringBuilder();  StringCharacterIterator iterator=new StringCharacterIterator(aText);  char character=iterator.current();  while (character != StringCharacterIterator.DONE) {    if (character == '\"') {      result.append("\\\"");    } else     if (character == '\\') {      result.append("\\\\");    } else     if (character == '/') {      result.append("\\/");    } else     if (character == '\b') {      result.append("\\b");    } else     if (character == '\f') {      result.append("\\f");    } else     if (character == '\n') {      result.append("\\n");    } else     if (character == '\r') {      result.append("\\r");    } else     if (character == '\t') {      result.append("\\t");    } else {      result.append(character);    }    character=iterator.next();  }  return result.toString();}  }
class C{  public void load(Matrix4f src){  System.arraycopy(src.getArray(),0,mMat,0,mMat.length);}  }
class C{  public static Map<String,Object> viewScrumRevision(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  String revision=(String)context.get("revision");  String repository=(String)context.get("repository");  Map<String,Object> result=ServiceUtil.returnSuccess();  StringBuilder logMessage=new StringBuilder();  StringBuilder diffMessage=new StringBuilder();  try {    if (UtilValidate.isNotEmpty(repository) && UtilValidate.isNotEmpty(revision)) {      String logline=null;      String logCommand="svn log -r" + revision + " "+ repository;      Process logProcess=Runtime.getRuntime().exec(logCommand);      BufferedReader logIn=new BufferedReader(new InputStreamReader(logProcess.getInputStream()));      while ((logline=logIn.readLine()) != null) {        logMessage.append(logline).append("\n");      }      String diffline=null;      String diffCommand="svn diff -r" + Integer.toString((Integer.parseInt(revision.trim()) - 1)) + ":"+ revision+ " "+ repository;      Process diffProcess=Runtime.getRuntime().exec(diffCommand);      BufferedReader diffIn=new BufferedReader(new InputStreamReader(diffProcess.getInputStream()));      while ((diffline=diffIn.readLine()) != null) {        diffMessage.append(diffline).append("\n");      }    }    result.put("revision",revision);    result.put("repository",repository);    result.put("logMessage",logMessage.toString());    result.put("diffMessage",diffMessage.toString());  } catch (  IOException e) {    e.printStackTrace();    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  public static double calculateColumnTotal(Values2D data,int column){  ParamChecks.nullNotPermitted(data,"data");  double total=0.0;  int rowCount=data.getRowCount();  for (int r=0; r < rowCount; r++) {    Number n=data.getValue(r,column);    if (n != null) {      total+=n.doubleValue();    }  }  return total;}  }
class C{  public void execute(Connection conn) throws SQLException {  setConnection(conn);  if (getPageSize() != 0) {    crsReader=(CachedRowSetReader)provider.getRowSetReader();    crsReader.setStartPosition(1);    callWithCon=true;    crsReader.readData((RowSetInternal)this);  } else {    rowSetReader.readData((RowSetInternal)this);  }  RowSetMD=(RowSetMetaDataImpl)this.getMetaData();  if (conn != null) {    dbmslocatorsUpdateCopy=conn.getMetaData().locatorsUpdateCopy();  }}  }
class C{  public int parameterCount(StreamKind streamKind,int streamNumber){  if (isLoaded()) {    return MediaInfoLibrary.INSTANCE.Count_Get(handle,streamKind.ordinal(),streamNumber);  } else {    return 0;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.620 -0400",hash_original_method="472FEF71223996485998F30A706D4370",hash_generated_method="328A6FCBACECA0A5D6BCAB9052A23BAE") public static void dump(byte[] data,long offset,OutputStream stream,int index) throws IOException, ArrayIndexOutOfBoundsException, IllegalArgumentException {  if (index < 0 || index >= data.length) {    throw new ArrayIndexOutOfBoundsException("illegal index: " + index + " into array of length "+ data.length);  }  if (stream == null) {    throw new IllegalArgumentException("cannot write to nullstream");  }  long display_offset=offset + index;  StringBuilder buffer=new StringBuilder(74);  for (int j=index; j < data.length; j+=16) {    int chars_read=data.length - j;    if (chars_read > 16) {      chars_read=16;    }    dump(buffer,display_offset).append(' ');    for (int k=0; k < 16; k++) {      if (k < chars_read) {        dump(buffer,data[k + j]);      } else {        buffer.append("  ");      }      buffer.append(' ');    }    for (int k=0; k < chars_read; k++) {      if (data[k + j] >= ' ' && data[k + j] < 127) {        buffer.append((char)data[k + j]);      } else {        buffer.append('.');      }    }    buffer.append(EOL);    stream.write(buffer.toString().getBytes());    stream.flush();    buffer.setLength(0);    display_offset+=chars_read;  }}  }
class C{  public SubscriptionMigrationException(String message,Reason reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public int[] reset(){  return nums;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.279 -0500",hash_original_method="2AF991EC026F340CB09E7C74A01E5A9A",hash_generated_method="04D897707079137EE6D8A1003358B81E") private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public byte[] toByteArray(){  return buffer.toByteArray();}  }
class C{  @Override public String toString(){  return "(" + this.x + ", "+ this.y+ ")";}  }
class C{  private void clearDatabase(SQLiteDatabase db){  if (db != null && db.isOpen()) {    Log.d(TAG,"Will clear database.");    ArrayList<String> tableNames=new ArrayList<>();    Cursor c=db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'",null);    if (c.moveToFirst()) {      while (!c.isAfterLast()) {        tableNames.add(c.getString(0));        c.moveToNext();      }    }    c.close();    try {      db.beginTransaction();      for (      String tableName : tableNames) {        db.execSQL("DROP TABLE " + tableName + ";");      }      db.setTransactionSuccessful();      db.endTransaction();      Log.d(TAG,"Database is cleared");    } catch (    SQLiteException exc) {      exc.printStackTrace();    }  }}  }
class C{  public static @CheckForNull XMethod findMethod(ClassDescriptor classDesc,String methodName,String methodSig,boolean isStatic){  if (DEBUG_METHOD_LOOKUP) {    System.out.println("Check " + classDesc.getClassName());  }  try {    XClass xClass=Global.getAnalysisCache().getClassAnalysis(XClass.class,classDesc);    return xClass.findMethod(methodName,methodSig,isStatic);  } catch (  CheckedAnalysisException e) {    AnalysisContext.logError("Error looking for " + classDesc + "."+ methodName+ methodSig,e);    return null;  }}  }
class C{  public boolean isAutoConnect(){  return this.agentConfig.getAutoConnect();}  }
class C{  protected void requestUpdate(){  if (mUpdateHost != null) {    mUpdateHost.requestUpdate();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.WORD_BOUNDARY__NOT:    setNot(NOT_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static boolean isNull(){  return instance == null;}  }
class C{  public SQLNonTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public Timestamp recalculateEstimatedCompletionDate(){  this.updateCompletionDate=false;  return recalculateEstimatedCompletionDate(Long.valueOf(0),estimatedStartDate);}  }
class C{  @Override public Set<V> removeAll(@NotNull Object key){  SpillableSetImpl<V> spillableSet=getHelper((K)key);  if (spillableSet != null) {    cache.remove((K)key);    Slice keySlice=keyValueSerdeManager.serializeMetaKey((K)key,false);    map.put(keySlice,new ImmutablePair<>(0,spillableSet.getHead()));    spillableSet.clear();    removedSets.add(spillableSet);  }  return null;}  }
class C{  protected void generatePseudoQueenMoves(PriorityMoveList moves){  long fromBB=getPieceBB(colorToMove,QUEEN);  while (fromBB != 0) {    int fromSquare=bitscanForward(fromBB);    long toBB=(orthogonalMove(fromSquare,emptyBB,occupiedBB) | diagonalMove(fromSquare,emptyBB,occupiedBB)) & getNotColorToMoveBB();    while (toBB != 0) {      int toSquare=bitscanForward(toBB);      int contents=getPieceWithPromoteMask(toSquare);      addMove(new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),colorToMove,contents),moves);      toBB=bitscanClear(toBB);    }    fromBB=bitscanClear(fromBB);  }}  }
class C{  public boolean isKeyword(String keyword){  return (type == TokenType.ID && content.equals(keyword));}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,index,length,false);}  }
class C{  public int length(){  int len=getArrayLength() - (getGapEnd() - getGapStart());  return len;}  }
class C{  public SRNEditorDialog(final NetworkPanel panel,SimpleRecurrentNetwork srn){  super(panel,srn);  this.srn=srn;  init();  initDefaultTabs();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void registerSession(long index,long timestamp,ServerSessionContext session,CompletableFuture<Long> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  executor.tick(index,timestamp);  executor.init(index,Instant.ofEpochMilli(timestamp),ServerStateMachineContext.Type.COMMAND);  for (  SessionListener listener : executor.context().sessions().listeners) {    listener.register(session);  }  session.open();  long lastCompleted=calculateLastCompleted(index);  executor.commit();  context.executor().execute(null);}  }
class C{  private int increment(int index){  index++;  if (index >= maxElements) {    index=0;  }  return index;}  }
class C{  OperandStack createEmptyOperandStackWithSameCapacity(){  return new OperandStack(stack.length);}  }
class C{  protected MiniFluo startMiniFluo() throws AlreadyInitializedException, TableExistsException {  final List<ObserverSpecification> observers=new ArrayList<>();  observers.add(new ObserverSpecification(TripleObserver.class.getName()));  observers.add(new ObserverSpecification(StatementPatternObserver.class.getName()));  observers.add(new ObserverSpecification(JoinObserver.class.getName()));  observers.add(new ObserverSpecification(FilterObserver.class.getName()));  final ObserverSpecification exportObserverConfig=new ObserverSpecification(QueryResultObserver.class.getName(),makeExportParams());  observers.add(exportObserverConfig);  final FluoConfiguration config=new FluoConfiguration();  config.setMiniStartAccumulo(false);  config.setAccumuloInstance(instanceName);  config.setAccumuloUser(ACCUMULO_USER);  config.setAccumuloPassword(ACCUMULO_PASSWORD);  config.setInstanceZookeepers(zookeepers + "/fluo");  config.setAccumuloZookeepers(zookeepers);  config.setApplicationName(appName);  config.setAccumuloTable("fluo" + appName);  config.addObservers(observers);  FluoFactory.newAdmin(config).initialize(new FluoAdmin.InitializationOptions().setClearTable(true).setClearZookeeper(true));  return FluoFactory.newMiniFluo(config);}  }
class C{  @Override protected void initData(){}  }
class C{  void stop(){  stop=true;}  }
class C{  public void nuevoDetalleExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DetalleConsultaForm detalleConsultaForm=(DetalleConsultaForm)form;  removeInTemporalSession(request,Constants.LAST_ORDER);  removeInTemporalSession(request,Constants.LAST_ORDER_DIRECTION);  removeInTemporalSession(request,Constants.PAGE_NUMBER);  removeInTemporalSession(request,ConsultasConstants.LISTADO_BUSQUEDA_UDOCS);  removeInTemporalSession(request,ConsultasConstants.LISTA_IDS_ELEMENTOS_CF);  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_NUEVODETALLE,request);  Busqueda busqueda=getCfgBusquedaConsultas(request);  setInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY,busqueda);  PrecondicionesBusquedaFondosGenerica precondiciones=new PrecondicionesBusquedaFondosGenerica();  precondiciones.setTiposNivelFicha(new int[]{TipoNiveles.UNIDAD_DOCUMENTAL_VALUE});  BusquedasHelper.loadListasBusqueda(busqueda,detalleConsultaForm,request,precondiciones);  setInTemporalSession(request,FondosConstants.IS_PRESTAMO,"false");  setReturnActionFordward(request,mappings.findForward("nuevo_detalle_consulta"));}  }
class C{  public SymbolAxis(String label,String[] sv){  super(label);  this.symbols=Arrays.asList(sv);  this.gridBandsVisible=true;  this.gridBandPaint=DEFAULT_GRID_BAND_PAINT;  this.gridBandAlternatePaint=DEFAULT_GRID_BAND_ALTERNATE_PAINT;  setAutoTickUnitSelection(false,false);  setAutoRangeStickyZero(false);}  }
class C{  @POST @Path("internal/log-level/") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public LogLevels processNodeLogLevel(LogLevelRequest logReqInfo) throws WebApplicationException {  String nodeId=logReqInfo.getNodeIds().get(0);  LogLevels logLevels=new LogLevels();  List<String> logNames=logReqInfo.getLogNames();  List<String> availableLogNames=ServicesMetadata.getRoleServiceNames(_coordinatorClientExt.getNodeRoles());  if (logNames.isEmpty()) {    logNames=new ArrayList<String>(availableLogNames);  } else {    logNames.retainAll(availableLogNames);  }  logNames.removeAll(_exemptLogSvcs);  boolean isGetReq=false;  if (logReqInfo.getSeverity() == LogSeverity.NA) {    isGetReq=true;  }  for (  String logName : logNames) {    if (isGetReq) {      _log.info("getting log level from service {}",logName);    } else {      _log.info("setting log level of service {}",logName);    }    try {      String level=null;      if (isGetReq) {        level=LoggingOps.getLevel(logName);        _log.debug("log level of service {} is {}",logName,level);        String nodeName=_coordinatorClientExt.getMatchingNodeName(nodeId);        logLevels.getLogLevels().add(new LogLevels.LogLevel(nodeId,nodeName,logName,level));      } else {        level=logReqInfo.getSeverity().toString();        LoggingOps.setLevel(logName,level,logReqInfo.getExpirInMin(),logReqInfo.getScope());        _log.debug("log level of service {} has been set to {}",logName,level);      }    } catch (    IllegalStateException e) {      if (isGetReq) {        _log.error("Failed to get log level from service {}:",logName,e);      } else {        _log.error("Failed to set log level of service {}:",logName,e);      }    }  }  return logLevels;}  }
class C{  public EventHandlingListener(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,450,300);  contentPane=new JPanel();  setContentPane(contentPane);  contentPane.setLayout(null);  contentPane.add(getNameLbl());  contentPane.add(getNameTxt());  contentPane.add(getOkBtn());  contentPane.add(getStatusTxt());}  }
class C{  static int sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler,int edgeTreatmentFlags) throws org.xml.sax.SAXException {  boolean processingLeadingWhitespace=((edgeTreatmentFlags & SUPPRESS_LEADING_WS) != 0);  boolean seenWhitespace=((edgeTreatmentFlags & CARRY_WS) != 0);  int currPos=start;  int limit=start + length;  if (processingLeadingWhitespace) {    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (currPos == limit) {      return edgeTreatmentFlags;    }  }  while (currPos < limit) {    int startNonWhitespace=currPos;    for (; currPos < limit && !XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startNonWhitespace != currPos) {      if (seenWhitespace) {        handler.characters(SINGLE_SPACE,0,1);        seenWhitespace=false;      }      handler.characters(ch,startNonWhitespace,currPos - startNonWhitespace);    }    int startWhitespace=currPos;    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startWhitespace != currPos) {      seenWhitespace=true;    }  }  return (seenWhitespace ? CARRY_WS : 0) | (edgeTreatmentFlags & SUPPRESS_TRAILING_WS);}  }
class C{  public void animateDismiss(int position){  animateDismiss(Arrays.asList(position));}  }
class C{  public boolean isCompatible(MetaData isData,CompatibilityLevel level){  return getErrorsForInput(null,isData,level).isEmpty();}  }
class C{  public void addTriggersIds(Trigger trigger){  this.getTriggersIds().add(trigger.getId());}  }
class C{  RegisterOperand makeNullCheckGuard(Register ref){  RegisterOperand guard=_ncGuards.get(ref);  if (guard == null) {    guard=temps.makeTempValidation();    _ncGuards.put(ref,guard.copyRO());  } else {    guard=guard.copyRO();  }  return guard;}  }
class C{  public void testAbortWhenReady(){  Message m1=new Message(h2,h1,msgId2,1);  h2.createNewMessage(m1);  checkCreates(1);  h2.connect(h1);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertFalse(mc.next());  clock.advance(10);  h2.setLocation(farAway);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastFrom());  assertFalse(mc.next());}  }
class C{  private String computeInitialPattern(){  IEditorPart activeEditor=HandlerServiceUtils.getActiveEditor().orNull();  if (activeEditor instanceof N4JSEditor) {    Point range=((N4JSEditor)activeEditor).getSourceViewer2().getSelectedRange();    try {      String text=((N4JSEditor)activeEditor).getDocument().get(range.x,range.y);      if (N4JSLanguageUtils.isValidIdentifier(text) && !startWithLowercaseLetter(text) && !languageHelper.isReservedIdentifier(text)) {        return text;      }    } catch (    BadLocationException e) {      LOGGER.error("Failed to infer type search pattern from editor selection.",e);    }  }  return "";}  }
class C{  public static boolean isVoiceCapable(Context context){  TelephonyManager telephony=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return telephony != null && telephony.isVoiceCapable();}  }
class C{  @Override public void reset(){  cursor=0;}  }
class C{  @Override public void destroy(){  this.config=null;}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  return attributes.containsAttributes(attrs);}  }
class C{  public boolean equalsDefault(){  return (Double.doubleToLongBits(value) == 0);}  }
class C{  private void removeLineInfo(int lineNumber){  LineInfo info=lineInfo.remove(lineNumber);  if (info.pr.label != null) {    labelDefinitions.remove(info.pr.label);    for (    LineInfo usingLine : labelUses.get(info.pr.label)) {      toDoList.add(usingLine);    }  }  for (  String label : info.pr.usedLabels) {    labelUses.get(label).remove(info);  }  if (info.pr.error != null) {    errorLines.remove(info);  }  if (toDoList.contains(info)) {    toDoList.remove(info);  }}  }
class C{  public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  public LocalVariableAwareTranslationVisitor(OutputCollector output,LocalVariableInfo locals){  super(output);  this.locals=locals;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  nodeType=(int)addrAttr.getNodeType();  assertEquals("nodeAttrNodeTypeAssert1",2,nodeType);}  }
class C{  public PoisonRunnable(){}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 178) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANONYMOUS_FORMAL_PARAMETER;}  }
class C{  public static boolean intersectLineCircle(float x0,float y0,float x1,float y1,float centerX,float centerY,float radius,Vector3f intersectionCenterAndHL){  return intersectLineCircle(y0 - y1,x1 - x0,(x0 - x1) * y0 + (y1 - y0) * x0,centerX,centerY,radius,intersectionCenterAndHL);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int[] dX;  int[] dY;  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double[] expandArrayD(int bufferSize,double[] currentArray){  if (currentArray == null) {    return new double[bufferSize * 3];  }  int length=currentArray.length;  double[] ret=new double[length + bufferSize * 3];  System.arraycopy(currentArray,0,ret,0,length);  return ret;}  }
class C{  @Override public void visitMaxs(int maxStack,int maxLocals){  if (localScopes != null) {    for (    VariableScope scope : localScopes) {      super.visitLocalVariable("xxxxx$" + scope.index,scope.desc,null,scope.start,scope.end,scope.index);    }  }  super.visitMaxs(maxStack,maxLocals);}  }
class C{  public boolean isDownloadable(){  List<String> topics=getExactTopics();  for (  String xt : topics)   if (xt.startsWith("urn:btih"))   return true;  if (getDefaultURLs().length > 0) {    return true;  }  return false;}  }
class C{  public boolean isRotating(){  return isRotating;}  }
class C{  public QueueBuilder<T> withCapacity(int capacity){  this.capacity=capacity;  return this;}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public Map<URI,List<URI>> addSourceVolumeMirrors(){  List<URI> blockMirrors=Lists.newArrayList();  Map<URI,List<URI>> mirrorsMap=new HashMap<>();  for (  URI volumeId : uris(volumeIds)) {    List<URI> mirrors=getMirrors(volumeId);    blockMirrors.addAll(mirrors);    mirrorsMap.put(volumeId,mirrors);  }  if (!blockMirrors.isEmpty()) {    BlockStorageUtils.addVolumesToConsistencyGroup(consistencyGroup,blockMirrors);  }  return mirrorsMap;}  }
class C{  public SQLWarning(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @Override public boolean shouldExecute(){  if (!this.theDefendingTameable.isTamed()) {    return false;  } else {    EntityLivingBase entitylivingbase=this.theDefendingTameable.getOwner();    if (entitylivingbase == null) {      return false;    } else {      this.theOwnerAttacker=entitylivingbase.getAITarget();      int i=entitylivingbase.getRevengeTimer();      return i != this.timestamp && this.isSuitableTarget(this.theOwnerAttacker,false);    }  }}  }
class C{  public Message(Message other){  if (other.isSetSessionIDs()) {    List<String> __this__sessionIDs=new ArrayList<String>();    for (    String other_element : other.sessionIDs) {      __this__sessionIDs.add(other_element);    }    this.sessionIDs=__this__sessionIDs;  }  if (other.isSetPacket()) {    this.packet=new Packet(other.packet);  }}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void abortExperiment(){  m_experimentAborted=true;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public static void modifyGroups(List<Group> groups) throws AdeException {  ModifyModelGroupAtomic atomicUpdate=new ModifyModelGroupAtomic(groups);  boolean success=ExtDataStoreUtils.executeAtomicTransaction(atomicUpdate);  if (!success) {    if (atomicUpdate.getIllegalArgEx() != null) {      throw atomicUpdate.getIllegalArgEx();    } else {      logger.error("An error occurred while trying to modify " + GROUPS_TABLE + " table.");      throw new AdeInternalException("An error occurred while trying to modify" + GROUPS_TABLE + " table.");    }  }}  }
class C{  public final void writeByte(int v) throws IOException {  out.write(v);  incCount(1);}  }
class C{  public static Object findValueOfType(Collection collection,Class[] types){  if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {    return null;  }  for (int i=0; i < types.length; i++) {    Object value=findValueOfType(collection,types[i]);    if (value != null) {      return value;    }  }  return null;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") protected void extendElement(Element e){  SerialTrafficController tc=((CMRISystemConnectionMemo)adapter.getSystemConnectionMemo()).getTrafficController();  SerialNode node=(SerialNode)tc.getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeType()));    n.addContent(makeParameter("bitspercard","" + node.getNumBitsPerCard()));    n.addContent(makeParameter("transmissiondelay","" + node.getTransmissionDelay()));    n.addContent(makeParameter("num2lsearchlights","" + node.getNum2LSearchLights()));    n.addContent(makeParameter("pulsewidth","" + node.getPulseWidth()));    String value="";    for (int i=0; i < node.getLocSearchLightBits().length; i++) {      value=value + Integer.toHexString(node.getLocSearchLightBits()[i] & 0xF);    }    n.addContent(makeParameter("locsearchlightbits","" + value));    value="";    for (int i=0; i < node.getCardTypeLocation().length; i++) {      value=value + Integer.toHexString(node.getCardTypeLocation()[i] & 0xF);    }    n.addContent(makeParameter("cardtypelocation","" + value));    node=(SerialNode)tc.getNode(index);    index++;  }}  }
class C{  public void decrementCurrentPageIndex(){  if (model.getCurrentPageIndex() > 0) {    model.setCurrentPageIndex(model.getCurrentPageIndex() - 1);    model.firePaginationChangedEvent();  }}  }
class C{  public void add(final ConversationStates state,final String trigger,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){  engine.add(state,trigger,condition,false,nextState,reply,action);}  }
class C{  private ArrayList<String> createKeyColumns(){  ArrayList<String> columns=new ArrayList<String>();  m_leadingColumns=0;  columns.add(sortBy1);  if (!columns.contains(sortBy2))   columns.add(sortBy2);  if (!columns.contains(sortBy3))   columns.add(sortBy3);  if (!columns.contains(sortBy4))   columns.add(sortBy4);  MAcctSchemaElement[] elements=ASchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    if (m_leadingColumns == 0 && columns.contains("AD_Org_ID") && columns.contains("Account_ID"))     m_leadingColumns=columns.size();    MAcctSchemaElement ase=elements[i];    String columnName=ase.getColumnName();    if (columnName.startsWith("UserElement")) {      if (columnName.indexOf('1') != -1)       m_ref1=ase.getDisplayColumnName(); else       m_ref2=ase.getDisplayColumnName();    }    if (!columns.contains(columnName))     columns.add(columnName);  }  if (m_leadingColumns == 0 && columns.contains("AD_Org_ID") && columns.contains("Account_ID"))   m_leadingColumns=columns.size();  return columns;}  }
class C{  public void afterMessageWrite(AbstractSerialConnection port,ModbusMessage msg){}  }
class C{  public StringBuffer(){  super(16);}  }
class C{  public static Vec forwardSub(Matrix L,Vec b){  if (b.length() != L.rows())   throw new ArithmeticException("Vector and matrix sizes do not agree");  Vec y=b instanceof SparseVector ? new SparseVector(b.length()) : new DenseVector(b.length());  for (int i=0; i < b.length(); i++) {    double y_i=b.get(i);    for (int j=0; j < i; j++)     y_i-=L.get(i,j) * y.get(j);    y_i/=L.get(i,i);    y.set(i,y_i);  }  return y;}  }
class C{  public AllSuperTypeRefsCollector(ContainerType<?> type){  super(type);  result=Lists.newArrayList();}  }
class C{  private void updateShardRoutingEntries(String shardId,String appUri){  if (appUri.equals(myAppUri)) {    logger.warn("Trying to update routingTable with self appUri. -- skip");    return;  }  List<String> appUris=lookupRoutingTable(shardId);  List<String> newAppUris=new ArrayList<>(appUris.size());  newAppUris.add(appUri);  for (  String appUrl : appUris) {    if (!appUrl.equals(appUri)) {      newAppUris.add(appUrl);    }  }  trace("[{}] Update shard '{}' leader as {}",gondola.getHostId(),shardId,appUri);  routingTable.put(shardId,newAppUris);}  }
class C{  public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  private void compactCriticals(Mech mech){  for (int loc=0; loc < mech.locations(); loc++) {    compactCriticals(mech,loc);  }}  }
class C{  public <K,V>JavaPairRDD<T,V> joinGeodeRegion(String regionPath,Function<T,K> func){  return joinGeodeRegion(regionPath,func,rddf.defaultConnectionConf());}  }
class C{  public ZebraJTree(javax.swing.tree.TreeNode root){  super(root);}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  int nArmorLoc=LOC_FRONT;  boolean bSide=false;  boolean bRearSide=false;  boolean bRear=false;  int motiveMod=0;  if ((side == ToHitData.SIDE_FRONT) && isHullDown() && !m_bHasNoTurret) {    nArmorLoc=LOC_TURRET;  }  if (side == ToHitData.SIDE_FRONTLEFT) {    nArmorLoc=LOC_FRONTLEFT;    bSide=true;    motiveMod=2;  } else   if (side == ToHitData.SIDE_FRONTRIGHT) {    nArmorLoc=LOC_FRONTRIGHT;    bSide=true;    motiveMod=2;  } else   if (side == ToHitData.SIDE_REARRIGHT) {    nArmorLoc=LOC_REARRIGHT;    bRearSide=true;    motiveMod=1;  } else   if (side == ToHitData.SIDE_REARLEFT) {    nArmorLoc=LOC_REARLEFT;    bRearSide=true;    motiveMod=1;  } else   if (side == ToHitData.SIDE_REAR) {    nArmorLoc=LOC_REAR;    motiveMod=1;    bRear=true;  }  if (game.getOptions().booleanOption("tacops_vehicle_effective")) {    motiveMod=0;  }  HitData rv=new HitData(nArmorLoc);  boolean bHitAimed=false;  if ((aimedLocation != LOC_NONE) && (aimingMode != IAimingModes.AIM_MODE_NONE)) {    int roll=Compute.d6(2);    if ((5 < roll) && (roll < 9)) {      rv=new HitData(aimedLocation,side == ToHitData.SIDE_REAR,true);      bHitAimed=true;    }  }  if (!bHitAimed) {switch (Compute.d6(2)) {case 2:      if (game.getOptions().booleanOption("vehicles_threshold")) {        setPotCrit(HitData.EFFECT_CRITICAL);      } else {        rv.setEffect(HitData.EFFECT_CRITICAL);      }    break;case 3:  if (bSide) {    rv=new HitData(LOC_FRONT,false);    if (game.getOptions().booleanOption("vehicles_threshold")) {      setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    } else {      rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    }  } else   if (bRear) {    rv=new HitData(LOC_REARLEFT,false);    if (game.getOptions().booleanOption("vehicles_threshold")) {      setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    } else {      rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    }  } else   if (bRearSide) {    if (game.getOptions().booleanOption("vehicles_threshold")) {      setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    } else {      rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    }  } else {    rv=new HitData(LOC_FRONTRIGHT,false);    if (game.getOptions().booleanOption("vehicles_threshold")) {      setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    } else {      rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);    }  }rv.setMotiveMod(motiveMod);break;case 4:if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);} else {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}rv.setMotiveMod(motiveMod);break;case 5:if (bRear || !(bSide || bRearSide)) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);} else {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}rv.setMotiveMod(motiveMod);}break;case 6:case 7:break;case 8:if ((bSide || bRearSide) && !game.getOptions().booleanOption("tacops_vehicle_effective")) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);} else {rv.setEffect(HitData.EFFECT_CRITICAL);}}break;case 9:if (!game.getOptions().booleanOption("tacops_vehicle_effective")) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);} else {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}rv.setMotiveMod(motiveMod);}break;case 10:case 11:if (!m_bHasNoTurret) {if (!hasNoDualTurret()) {int roll=Compute.d6();if (side == ToHitData.SIDE_FRONT) {roll-=2;} else if (side == ToHitData.SIDE_REAR) {roll+=2;}if (roll <= 3) {rv=new HitData(LOC_TURRET_2);} else {rv=new HitData(LOC_TURRET);}} else {rv=new HitData(LOC_TURRET);}}break;case 12:if (m_bHasNoTurret) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);} else {rv.setEffect(HitData.EFFECT_CRITICAL);}} else {if (!hasNoDualTurret()) {int roll=Compute.d6();if (side == ToHitData.SIDE_FRONT) {roll-=2;} else if (side == ToHitData.SIDE_REAR) {roll+=2;}if (roll <= 3) {rv=new HitData(LOC_TURRET_2);} else {rv=new HitData(LOC_TURRET);}} else {rv=new HitData(LOC_TURRET,false);}if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);} else {rv.setEffect(HitData.EFFECT_CRITICAL);}}}}if (table == ToHitData.HIT_SWARM) {rv.setEffect(rv.getEffect() | HitData.EFFECT_CRITICAL);}return rv;}  }
class C{  public synchronized void removeSession(String sessionID) throws DirectoryException {  DirectorySession session=null;synchronized (sessionsByID) {    session=sessionsByID.get(sessionID);    if (session == null) {      throw new DirectoryException(String.format("Directory session '%s' not found",sessionID));    }    sessionsByID.remove(sessionID);  }}  }
class C{  public static ContinuousVariable serializableInstance(){  return new ContinuousVariable("X");}  }
class C{  @Override public void failSocket(long time){  getRequestFailProbe().start();  _failCountTotal.incrementAndGet();  logFinest(L.l("failSocket: time={0}, _failTime={1}",time,_failTime));synchronized (this) {    if (_failTime < time) {      degrade(time);      _firstSuccessTime=0;      _failTime=time;      _lastFailTime=_failTime;      _dynamicFailRecoverTime=Math.min(2 * _dynamicFailRecoverTime,_loadBalanceFailRecoverTime);      _state=_state.toFail();    }  }}  }
class C{  public ChainingXmlWriter register(String parameterName,VCardDataType dataType){  parameterDataTypes.put(parameterName,dataType);  return this;}  }
class C{  private String filterAndExecuteLaunchScriptAndReturnExecLine(String containerWorkDir){  BufferedReader reader=null;  BufferedWriter writer=null;  String execLine=null;  File inJvmlaunchScript=null;  try {    File launchScript=new File(containerWorkDir,"launch_container.sh");    inJvmlaunchScript=new File(containerWorkDir.toString(),"injvm_launch_container.sh");    inJvmlaunchScript.setExecutable(true);    reader=new BufferedReader(new FileReader(launchScript));    writer=new BufferedWriter(new FileWriter(inJvmlaunchScript));    String line;    while ((line=reader.readLine()) != null) {      if (!line.startsWith("exec")) {        writer.write(line);        writer.write("\n");      } else {        execLine=line;      }    }  } catch (  Exception e) {    throw new IllegalStateException("Failed to override default launch script",e);  } finally {    try {      reader.close();    } catch (    IOException e) {    }    try {      writer.close();    } catch (    IOException e) {    }  }  if (inJvmlaunchScript != null) {    try {      inJvmlaunchScript.setExecutable(true);      Process process=Runtime.getRuntime().exec(inJvmlaunchScript.getAbsolutePath());      int exitCode=process.waitFor();      if (exitCode != 0) {        throw new IllegalStateException("Failed to execute launch script.  Exit code: " + exitCode);      }    } catch (    Exception e) {      throw new IllegalStateException("Failed to execute " + inJvmlaunchScript.getAbsolutePath(),e);    }  }  return execLine;}  }
class C{  public void failOver(final ReplicationLiveIsStoppingMessage.LiveStopping finalMessage){  if (finalMessage == null) {    backupQuorum.causeExit(FAILURE_REPLICATING);  } else {    backupQuorum.failOver(finalMessage);  }}  }
class C{  public boolean isReverse(){  return reverse;}  }
class C{  @Override public void deallocatePesForAllVms(){  super.deallocatePesForAllVms();  getMipsMapRequested().clear();  setPesInUse(0);}  }
class C{  public int update(String table,ContentValues values,String whereClause,String[] whereArgs){  try {    openDB();    return mSQLiteDatabase.update(table,values,whereClause,whereArgs);  } catch (  Exception ex) {    ex.printStackTrace();    return -1;  }}  }
class C{  @VisibleForTesting protected static State buildPatch(TaskState.TaskStage patchStage,@Nullable TaskState.SubStage patchSubStage,@Nullable Throwable t){  State patchState=new State();  patchState.taskState=new TaskState();  patchState.taskState.stage=patchStage;  patchState.taskState.subStage=patchSubStage;  if (null != t) {    patchState.taskState.failure=Utils.toServiceErrorResponse(t);  }  return patchState;}  }
class C{  public void testFlipBitNegativeInside4(){  String as="-4294967295";  String res="-4294967296";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  protected void readHeader(){  String id="";  for (int i=0; i < 6; i++) {    id+=(char)read();  }  if (!id.startsWith("GIF")) {    status=STATUS_FORMAT_ERROR;    return;  }  readLSD();  if (gctFlag && !err()) {    gct=readColorTable(gctSize);    bgColor=gct[bgIndex];  }}  }
class C{  public void renameTo(SmbFile dest) throws SmbException {  if (getUncPath0().length() == 1 || dest.getUncPath0().length() == 1) {    throw new SmbException("Invalid operation for workgroups, servers, or shares");  }  resolveDfs(null);  dest.resolveDfs(null);  if (!tree.equals(dest.tree)) {    throw new SmbException("Invalid operation for workgroups, servers, or shares");  }  if (log.level >= 3)   log.println("renameTo: " + unc + " -> "+ dest.unc);  attrExpiration=sizeExpiration=0;  dest.attrExpiration=0;  send(new SmbComRename(unc,dest.unc),blank_resp());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.NEGATIVE_CONSTRAINT___CONSTRAINT_1:    getConstraint_1().clear();  getConstraint_1().addAll((Collection<? extends Constraint_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static TypeOfExpression typeOf(String propertyName){  return new TypeOfExpression(getPropExpr(propertyName));}  }
class C{  @Override public void GETFIELD(Object conc_receiver,String className,String fieldName,String desc){  ReferenceExpression receiver_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_receiver,receiver_ref);  Field field=resolveField(classLoader.getClassForName(className),fieldName);  env.ensurePrepared(field.getDeclaringClass());  boolean isAccessible=field.isAccessible();  if (!isAccessible) {    field.setAccessible(true);  }  if (nullReferenceViolation(receiver_ref,conc_receiver)) {    return;  }  ReferenceExpression symb_receiver=receiver_ref;  Type type=Type.getType(desc);  try {    if (type.equals(Type.INT_TYPE)) {      int value=field.getInt(conc_receiver);      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.LONG_TYPE)) {      long value=field.getLong(conc_receiver);      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,value);      env.topFrame().operandStack.pushBv64(intExpr);    } else     if (type.equals(Type.FLOAT_TYPE)) {      float value=field.getFloat(conc_receiver);      RealValue fp32=(RealValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(double)value);      env.topFrame().operandStack.pushFp32(fp32);    } else     if (type.equals(Type.DOUBLE_TYPE)) {      double value=field.getDouble(conc_receiver);      RealValue fp64=(RealValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,value);      env.topFrame().operandStack.pushFp64(fp64);    } else     if (type.equals(Type.CHAR_TYPE)) {      char value=field.getChar(conc_receiver);      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.SHORT_TYPE)) {      short value=field.getShort(conc_receiver);      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.BOOLEAN_TYPE)) {      boolean booleanValue=field.getBoolean(conc_receiver);      int value=booleanValue ? 1 : 0;      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.BYTE_TYPE)) {      byte value=field.getByte(conc_receiver);      IntegerValue intExpr=(IntegerValue)env.heap.getField(className,fieldName,conc_receiver,symb_receiver,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else {      Object value=field.get(conc_receiver);      ReferenceExpression ref=env.heap.getReference(value);      env.topFrame().operandStack.pushRef(ref);    }    if (!isAccessible) {      field.setAccessible(false);    }  } catch (  IllegalArgumentException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public static RibbonMaker createFromRadians(double[] coords){  return new RibbonMaker(GeoArray.Double.createFromLatLonRadians(coords));}  }
class C{  public static <T>ArrayList<T> newArrayList(int size){  return new ArrayList<T>(size);}  }
class C{  public boolean isSuperset(Signature other){  for (int i=0; i < spec.length; i+=2) {    if (spec[i] != other.spec[i] || spec[i + 1] != other.spec[i]) {      if (other.spec[i] != -1) {        return false;      }    }  }  return true;}  }
class C{  protected Node(){  key=null;  value=null;}  }
class C{  public MutablePeriod(long duration,PeriodType type){  super(duration,type,null);}  }
class C{  public static Result index(){  if (_metricRegistry != null) {    return ok(Json.toJson(_metricRegistry));  } else {    return ok(Json.toJson(METRICS_NOT_ENABLED));  }}  }
class C{  @Override public String toString(){  return value.toString();}  }
class C{  private void makeSessionKey(byte[] k) throws InvalidKeyException {  if (k == null) {    throw new InvalidKeyException("Empty key");  }  if (!isKeySizeValid(k.length)) {    throw new InvalidKeyException("Invalid AES key length: " + k.length + " bytes");  }  int ROUNDS=getRounds(k.length);  int ROUND_KEY_COUNT=(ROUNDS + 1) * 4;  int BC=4;  int[][] Ke=new int[ROUNDS + 1][4];  int[][] Kd=new int[ROUNDS + 1][4];  int KC=k.length / 4;  int[] tk=new int[KC];  int i, j;  for (i=0, j=0; i < KC; i++, j+=4) {    tk[i]=(k[j]) << 24 | (k[j + 1] & 0xFF) << 16 | (k[j + 2] & 0xFF) << 8 | (k[j + 3] & 0xFF);  }  int t=0;  for (j=0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {    Ke[t / 4][t % 4]=tk[j];    Kd[ROUNDS - (t / 4)][t % 4]=tk[j];  }  int tt, rconpointer=0;  while (t < ROUND_KEY_COUNT) {    tt=tk[KC - 1];    tk[0]^=(S[(tt >>> 16) & 0xFF]) << 24 ^ (S[(tt >>> 8) & 0xFF] & 0xFF) << 16 ^ (S[(tt) & 0xFF] & 0xFF) << 8 ^ (S[(tt >>> 24)] & 0xFF) ^ (rcon[rconpointer++]) << 24;    if (KC != 8)     for (i=1, j=0; i < KC; i++, j++)     tk[i]^=tk[j]; else {      for (i=1, j=0; i < KC / 2; i++, j++)       tk[i]^=tk[j];      tt=tk[KC / 2 - 1];      tk[KC / 2]^=(S[(tt) & 0xFF] & 0xFF) ^ (S[(tt >>> 8) & 0xFF] & 0xFF) << 8 ^ (S[(tt >>> 16) & 0xFF] & 0xFF) << 16 ^ (S[(tt >>> 24)]) << 24;      for (j=KC / 2, i=j + 1; i < KC; i++, j++)       tk[i]^=tk[j];    }    for (j=0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {      Ke[t / 4][t % 4]=tk[j];      Kd[ROUNDS - (t / 4)][t % 4]=tk[j];    }  }  for (int r=1; r < ROUNDS; r++) {    for (j=0; j < BC; j++) {      tt=Kd[r][j];      Kd[r][j]=U1[(tt >>> 24) & 0xFF] ^ U2[(tt >>> 16) & 0xFF] ^ U3[(tt >>> 8) & 0xFF]^ U4[tt & 0xFF];    }  }  int[] expandedKe=expandToSubKey(Ke,false);  int[] expandedKd=expandToSubKey(Kd,true);  ROUNDS_12=(ROUNDS >= 12);  ROUNDS_14=(ROUNDS == 14);  limit=ROUNDS * 4;  sessionK=new Object[]{expandedKe,expandedKd};}  }
class C{  public static String format(String pattern,Object... arguments){  return MessageFormat.format(pattern,arguments);}  }
class C{  public static DynamicGrpcClient createWithCredentials(MethodDescriptor protoMethod,HostAndPort endpoint,CallConfiguration callConfiguration,Credentials credentials){  ListeningExecutorService executor=createExecutorService();  Channel channel=createChannel(endpoint,callConfiguration);  return new DynamicGrpcClient(protoMethod,ClientInterceptors.intercept(channel,new ClientAuthInterceptor(credentials,executor)),executor);}  }
class C{  public static String importCert(byte[] certBytes,String initialStatus) throws Exception {  return importCert(certBytes,initialStatus,null);}  }
class C{  public void fillFieldValues(){  tfNumInputs.setText("" + 5);  tfNumHidden.setText("" + 7);  tfNumOutputs.setText("" + 5);  hiddenNeuronTypes.setSelectedIndex(2);  outputNeuronTypes.setSelectedIndex(2);}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  private void processConsoleResult(List<RichTranslation<IString,String>> translations,Sequence<IString> bestTranslation,int sourceLength,int sourceInputId){  if (translations.size() > 0) {    final RichTranslation<IString,String> bestTranslationInfo=translations.get(0);    if (printModelScores) {      System.out.printf("%e\t%s%n",bestTranslationInfo.score,bestTranslation.toString());    } else {      System.out.println(bestTranslation.toString());    }    logger.info("input {}: 1-best model score: {}",sourceInputId,bestTranslationInfo.score);    if (nbestListWriter != null) {      IOTools.writeNbest(translations,sourceInputId,nbestListOutputType,nBestListFeaturePattern,nbestListWriter);    }    if (alignmentWriter != null) {      for (      final RichTranslation<IString,String> translation : translations) {        alignmentWriter.printf("%d %s %s%n",sourceInputId,CompiledPhraseTable.FIELD_DELIM,translation.alignmentString());      }    }  } else {    System.out.println();    if (nbestListWriter != null) {      IOTools.writeEmptyNBest(sourceInputId,nbestListWriter);    }    if (alignmentWriter != null) {      alignmentWriter.println();    }    logger.info("<<< decoder failure for id: {} >>>",sourceInputId);  }}  }
class C{  public void notifyChangeToAuthsvc(){  try {    AuthSvcInternalApiClientIterator authSvcItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);    while (authSvcItr.hasNext()) {      String endpoint=authSvcItr.peek().toString();      _log.info("sending request to endpoint: " + endpoint);      try {        ClientResponse response=authSvcItr.post(_URI_AUTH_RELOAD,null);        if (response.getStatus() != ClientResponse.Status.OK.getStatusCode()) {          _log.error("Failed to reload authN providers on endpoint {} response {}",endpoint,response.toString());        }      } catch (      Exception e) {        _log.error("Caught exception trying to reload an authsvc on {} continuing",endpoint,e);      }    }  } catch (  CoordinatorException e) {    _log.error("Caught coordinator exception trying to find an authsvc endpoint",e);  }}  }
class C{  public synchronized Enumeration<TestFailure> errors(){  return Collections.enumeration(fErrors);}  }
class C{  public static void writeScaledChartAsPNG(OutputStream out,JFreeChart chart,int width,int height,int widthScaleFactor,int heightScaleFactor) throws IOException {  ParamChecks.nullNotPermitted(out,"out");  ParamChecks.nullNotPermitted(chart,"chart");  double desiredWidth=width * widthScaleFactor;  double desiredHeight=height * heightScaleFactor;  double defaultWidth=width;  double defaultHeight=height;  boolean scale=false;  if ((widthScaleFactor != 1) || (heightScaleFactor != 1)) {    scale=true;  }  double scaleX=desiredWidth / defaultWidth;  double scaleY=desiredHeight / defaultHeight;  BufferedImage image=new BufferedImage((int)desiredWidth,(int)desiredHeight,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=image.createGraphics();  if (scale) {    AffineTransform saved=g2.getTransform();    g2.transform(AffineTransform.getScaleInstance(scaleX,scaleY));    chart.draw(g2,new Rectangle2D.Double(0,0,defaultWidth,defaultHeight),null,null);    g2.setTransform(saved);    g2.dispose();  } else {    chart.draw(g2,new Rectangle2D.Double(0,0,defaultWidth,defaultHeight),null,null);  }  out.write(encodeAsPNG(image));}  }
class C{  public int produce(final int subpopulation,final EvolutionState state,final int thread){  int[] inds=new int[size2];  for (int x=0; x < size2; x++)   inds[x]=make(subpopulation,state,thread);  if (!doLengthFirst) {    Individual[] oldinds=state.population.subpops[subpopulation].individuals;    int i=inds[0];    int bad=i;    for (int x=1; x < size2; x++) {      int j=inds[x];      if (pickWorst2) {        if (oldinds[j].size() > oldinds[i].size()) {          bad=i;          i=j;        } else         bad=j;      } else {        if (oldinds[j].size() < oldinds[i].size()) {          bad=i;          i=j;        } else         bad=j;      }    }    if (probabilityOfSelection2 != 1.0 && !state.random[thread].nextBoolean(probabilityOfSelection2))     i=bad;    return i;  } else {    Individual[] oldinds=state.population.subpops[subpopulation].individuals;    int i=inds[0];    int bad=i;    for (int x=1; x < size2; x++) {      int j=inds[x];      if (pickWorst2) {        if (!(oldinds[j].fitness.betterThan(oldinds[i].fitness))) {          bad=i;          i=j;        } else         bad=j;      } else {        if (oldinds[j].fitness.betterThan(oldinds[i].fitness)) {          bad=i;          i=j;        } else         bad=j;      }    }    if (probabilityOfSelection2 != 1.0 && !state.random[thread].nextBoolean(probabilityOfSelection2))     i=bad;    return i;  }}  }
class C{  private void insertMovies(final SyncOrchestrator orchestrator,final ContentResolver contentResolver,final List<VideoType.DetailsMovie> movies){  ContentValues movieValuesBatch[]=new ContentValues[movies.size()];  int castCount=0;  for (int i=0; i < movies.size(); i++) {    VideoType.DetailsMovie movie=movies.get(i);    movieValuesBatch[i]=SyncUtils.contentValuesFromMovie(hostId,movie);    castCount+=movie.cast.size();  }  contentResolver.bulkInsert(MediaContract.Movies.CONTENT_URI,movieValuesBatch);  ContentValues movieCastValuesBatch[]=new ContentValues[castCount];  int count=0;  for (  VideoType.DetailsMovie movie : movies) {    for (    VideoType.Cast cast : movie.cast) {      movieCastValuesBatch[count]=SyncUtils.contentValuesFromCast(hostId,cast);      movieCastValuesBatch[count].put(MediaContract.MovieCastColumns.MOVIEID,movie.movieid);      count++;    }  }  contentResolver.bulkInsert(MediaContract.MovieCast.CONTENT_URI,movieCastValuesBatch);}  }
class C{  protected void notifyErrorProcess(String line){synchronized (listeners) {    for (    INodejsProcessListener listener : listeners) {      listener.onError(AbstractNodejsProcess.this,line);    }  }}  }
class C{  public static boolean isDualSim(@NonNull Context context){  return (getMtkDualSimInfo(context,true) != null) || (getQualcommDualSimInfo(context,true) != null);}  }
class C{  public java.lang.StringBuilder delete(int start,int end){  return null;}  }
class C{  public static SplittedExampleSet splitByAttribute(ExampleSet exampleSet,Attribute attribute){  int[] elements=new int[exampleSet.size()];  int i=0;  Map<Integer,Integer> indexMap=new HashMap<Integer,Integer>();  AtomicInteger currentIndex=new AtomicInteger(0);  for (  Example example : exampleSet) {    int value=(int)example.getValue(attribute);    Integer indexObject=indexMap.get(value);    if (indexObject == null) {      indexMap.put(value,currentIndex.getAndIncrement());    }    int intValue=indexMap.get(value).intValue();    elements[i++]=intValue;  }  int maxNumber=indexMap.size();  indexMap.clear();  Partition partition=new Partition(elements,maxNumber);  return new SplittedExampleSet(exampleSet,partition);}  }
class C{  public GetContainerLogsParams withDetails(boolean details){  this.details=details;  return this;}  }
class C{  public String rendererName(){  return "Weka Chart Renderer";}  }
class C{  public static ResultList fromSqlResultSet(ResultSet rs,int maxCount) throws SQLException {  logger.fine(new java.util.Date() + ": Process results ...");  ResultList resList=new ResultList();  if (rs == null)   return resList;  java.sql.ResultSetMetaData meta=rs.getMetaData();  int colCnt=meta.getColumnCount();  ColumnDescriptor desc=new ColumnDescriptor();  desc.setColumns(new java.util.ArrayList<ColumnInfo>(colCnt));  for (int i=1; i <= colCnt; i++) {    ColumnInfo col=new ColumnInfo(meta.getColumnName(i));    int sqlt=meta.getColumnType(i);    if (sqlt == java.sql.Types.BIGINT || sqlt == java.sql.Types.DECIMAL || sqlt == java.sql.Types.DOUBLE || sqlt == java.sql.Types.FLOAT || sqlt == java.sql.Types.INTEGER || sqlt == java.sql.Types.NUMERIC || sqlt == java.sql.Types.TINYINT || sqlt == java.sql.Types.SMALLINT)     col.setNumberType(true);    col.setPosition(i);    desc.getColumns().add(col);  }  resList.setColumnDescriptor(desc);  int rowCnt=0;  List<ColumnInfo> cols=desc.getColumns();  while (rs.next()) {    ResultRow row=new ResultRow();    row.setColumnDescriptor(desc);    java.util.ArrayList<String> cols2=new java.util.ArrayList<String>(colCnt);    row.setColumns(cols2);    for (int i=1; i <= colCnt; i++) {      String val=rs.getString(i);      if (cols.get(i - 1).isNumberType() && val != null && val.startsWith("."))       val="0" + val; else       if (cols.get(i - 1).isNumberType() && val != null && val.startsWith("-."))       val=val.replace("-.","-0.");      cols2.add(val);    }    resList.addRow(row);    rowCnt++;    if (maxCount > 0 && rowCnt >= maxCount)     break;  }  logger.fine(new java.util.Date() + ": Process results done: " + resList.getRows().size());  return resList;}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (ifrData.length < ifrLength + readLength) {    ifrData=Arrays.copyOf(ifrData,(ifrLength + readLength) * 2);  }  System.arraycopy(data,offset,ifrData,ifrLength,readLength);  ifrLength+=readLength;  scratchSliceType.reset(ifrData,ifrLength);  scratchSliceType.skipBits(8);  int len=scratchSliceType.peekExpGolombCodedNumLength();  if ((len == -1) || (len > scratchSliceType.bitsLeft())) {    return;  }  scratchSliceType.skipBits(len);  len=scratchSliceType.peekExpGolombCodedNumLength();  if ((len == -1) || (len > scratchSliceType.bitsLeft())) {    return;  }  sliceType=scratchSliceType.readUnsignedExpGolombCodedInt();  isFilling=false;}  }
class C{  @Override public boolean isBusy(){  return (m_evaluateThread != null);}  }
class C{  @Override public IType fromFacetType(){  return Types.LIST;}  }
class C{  @Override public synchronized void commit() throws SQLException {  try {    debugCodeCall("commit");    checkClosed();    try {      commit=prepareCommand("COMMIT",commit);      commit.executeUpdate();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.STEREO_TYPE_TARGET;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  static boolean isTweetResolvable(Tweet tweet){  return tweet != null && tweet.id > 0 && tweet.user != null && !TextUtils.isEmpty(tweet.user.screenName);}  }
class C{  @Override public void read(ArrayDataInput str) throws FitsException {  try {    setFileOffset(str);    this.currInput=str;    if (str instanceof RandomAccess) {      str.skipAllBytes((long)this.nRows * this.rowLen);    } else {      if ((long)this.rowLen * this.nRows > Integer.MAX_VALUE) {        throw new FitsException("Cannot read ASCII table > 2 GB");      }      getBuffer(this.rowLen * this.nRows,0);    }    str.skipAllBytes(FitsUtil.padding(this.nRows * this.rowLen));  } catch (  EOFException e) {    throw new PaddingException("EOF skipping padding after ASCII Table",this,e);  }catch (  IOException e) {    throw new FitsException("Error skipping padding after ASCII Table",e);  }}  }
class C{  private FoodSource nearFoodSource(){  Object[] objects=this.getObjectsWithinMyDistance(.5,true,true,false);  objects=Filter.filter(objects,FoodSource.class);  FoodSource fs=null;  if (objects.length > 0) {    fs=(FoodSource)objects[r.nextInt(objects.length)];  }  return fs;}  }
class C{  public static double logNormal(double mu,double sigma){  double x=mu + sigma * Math.cos(2 * Math.PI * raw()) * Math.sqrt(-2 * Math.log(raw()));  return Math.exp(x);}  }
class C{  public static void deleteTagSubtree(final AbstractSQLProvider provider,final ITreeNode<CTag> tag) throws CouldntDeleteException {  checkArguments(provider,tag);  Preconditions.checkNotNull(tag.getParent(),"IE00559: Can not delete the root tag");  final CConnection connection=provider.getConnection();  try {    final StringBuilder query=new StringBuilder(String.format("delete from %s where id = %d",CTableNames.TAGS_TABLE,tag.getObject().getId()));    final List<Integer> idsToDelete=new ArrayList<>();    for (    final ITreeNode<CTag> child : DepthFirstSorter.getSortedList(tag)) {      idsToDelete.add(child.getObject().getId());      query.append(" or id = " + tag.getObject().getId());    }    connection.executeUpdate(query.toString(),true);  } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public static boolean equalsMaps(HashMap<String,String> original,HashMap<String,String> result){  if (original == null && result == null) {    return true;  } else {    if (original.size() != result.size())     return false;    for (int i=0; i < KEYS.length; i++) {      if (!original.get(KEYS[i]).equals(result.get(KEYS[i]))) {        System.out.println("for " + KEYS[i] + ": original:"+ original.get(KEYS[i]));        System.out.println();        System.out.println("  result:" + result.get(KEYS[i]));        System.out.println();        return false;      }    }    return true;  }}  }
class C{  public ClientSubnetOption(int sourceNetmask,InetAddress address){  this(sourceNetmask,0,address);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.599 -0400",hash_original_method="E52DB31DD4CEA24D40EB558E5E7FE49E",hash_generated_method="805BE676780F942EC24517F079CC8FC8") public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getPath(),file2.getPath());}  }
class C{  public boolean applyOptions() throws IOException {  UpdateManagerSettings.SHOW_FROSTWIRE_RECOMMENDATIONS.setValue(CHECK_BOX.isSelected());  return false;}  }
class C{  public Task<NetworkSystemRestRep> create(NetworkSystemCreate input){  return postTask(input,baseUrl);}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if (closed || len == 0) {    return;  }  gzipstream.write(b,off,len);}  }
class C{  final public void disable_tracing(){}  }
class C{  public static boolean isNetworkAvailable(final Context c){  boolean state=false;  if (c != null) {    ConnectivityManager cm=(ConnectivityManager)c.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo netInfo=cm.getActiveNetworkInfo();    if (netInfo != null && netInfo.isConnected()) {      Log.i(TAG,"The device currently has data connectivity");      state=true;    } else {      Log.i(TAG,"The device does not currently have data connectivity");      state=false;    }  }  return state;}  }
class C{  public void validateStorageExistence(List<String> storageNames) throws ObjectNotFoundException {  for (  String storageName : storageNames) {    getStorageEntity(storageName);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String evaluate(Associator associator,String[] options) throws Exception {  String trainFileString="";  String graphFileName="";  AssociatorEvaluation eval;  DataSource loader;  if (Utils.getFlag('h',options)) {    throw new Exception("\nHelp requested.\n" + makeOptionString(associator));  }  try {    trainFileString=Utils.getOption('t',options);    if (trainFileString.length() == 0) {      throw new Exception("No training file given!");    }    loader=new DataSource(trainFileString);    graphFileName=Utils.getOption('g',options);    if (associator instanceof OptionHandler) {      ((OptionHandler)associator).setOptions(options);    }    Utils.checkForRemainingOptions(options);  } catch (  Exception e) {    throw new Exception("\nWeka exception: " + e.getMessage() + "\n"+ makeOptionString(associator));  }  eval=new AssociatorEvaluation();  String results=eval.evaluate(associator,new Instances(loader.getDataSet()));  if ((associator instanceof Drawable) && (graphFileName.length() != 0)) {    BufferedWriter writer=new BufferedWriter(new FileWriter(graphFileName));    writer.write(((Drawable)associator).graph());    writer.newLine();    writer.flush();    writer.close();  }  return results;}  }
class C{  public AsyncResult DeleteReferencesAsync(DeleteReferencesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void updateNClob(int columnIndex,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.098 -0500",hash_original_method="4B2E3C5C63E13C95ACA7AA346AD0833D",hash_generated_method="78AA0F41E5A5393BE9D7C73BF0536F4B") public void animateZoom(Canvas canvas){  mInitialZoomOverview=false;  if (mZoomScale == 0) {    Log.w(LOGTAG,"A WebView is attempting to perform a fixed length " + "zoom animation when no zoom is in progress");    return;  }  float zoomScale;  int interval=(int)(SystemClock.uptimeMillis() - mZoomStart);  if (interval < ZOOM_ANIMATION_LENGTH) {    float ratio=(float)interval / ZOOM_ANIMATION_LENGTH;    zoomScale=1.0f / (mInvInitialZoomScale + (mInvFinalZoomScale - mInvInitialZoomScale) * ratio);    mWebView.invalidate();  } else {    zoomScale=mZoomScale;    mZoomScale=0;    mWebView.onFixedLengthZoomAnimationEnd();  }  float scale=zoomScale * mInvInitialZoomScale;  int tx=Math.round(scale * (mInitialScrollX + mZoomCenterX) - mZoomCenterX);  tx=-WebView.pinLoc(tx,mWebView.getViewWidth(),Math.round(mWebView.getContentWidth() * zoomScale)) + mWebView.getScrollX();  int titleHeight=mWebView.getTitleHeight();  int ty=Math.round(scale * (mInitialScrollY + mZoomCenterY - titleHeight) - (mZoomCenterY - titleHeight));  ty=-(ty <= titleHeight ? Math.max(ty,0) : WebView.pinLoc(ty - titleHeight,mWebView.getViewHeight(),Math.round(mWebView.getContentHeight() * zoomScale)) + titleHeight) + mWebView.getScrollY();  if (mHardwareAccelerated) {    mWebView.updateScrollCoordinates(mWebView.getScrollX() - tx,mWebView.getScrollY() - ty);    canvas.translate(tx,ty);    setZoomScale(zoomScale,false);    if (mZoomScale == 0) {      mInHWAcceleratedZoom=false;      mWebView.sendViewSizeZoom(false);    }  } else {    canvas.translate(tx,ty);    canvas.scale(zoomScale,zoomScale);  }}  }
class C{  public boolean hasMergedInto(){  return hasExtension(MergedInto.class);}  }
class C{  public AdminXmlException(String s){  super(s);}  }
class C{  private static void initTestFile(Path blah) throws IOException {  try (BufferedWriter awriter=Files.newBufferedWriter(blah,ISO8859_1)){    for (int i=0; i < 4000; i++) {      String number=new Integer(i).toString();      for (int h=0; h < 4 - number.length(); h++)       awriter.write("0");      awriter.write("" + i);      awriter.newLine();    }  } }  }
class C{  public View(String id){  super(id);}  }
class C{  private static void checkParameters(CategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || dataset.getItemCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public void memberCrashed(ClientMembershipEvent event){}  }
class C{  protected void fireDOMNodeRemovedEvent(Node node){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    DOMMutationEvent ev=(DOMMutationEvent)doc.createEvent("MutationEvents");    ev.initMutationEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",true,false,this,null,null,null,MutationEvent.REMOVAL);    AbstractNode n=(AbstractNode)node;    n.dispatchEvent(ev);    n.fireDOMNodeRemovedFromDocumentEvent();  }}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize){  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=null;}  }
class C{  public void removeRule(int verb){  mRules[verb]=0;  mInitialRules[verb]=0;  mRulesChanged=true;}  }
class C{  public UtilizationModelPlanetLabInMemory(String inputPath,double schedulingInterval,int dataSamples) throws NumberFormatException, IOException {  setSchedulingInterval(schedulingInterval);  data=new double[dataSamples];  BufferedReader input=new BufferedReader(new FileReader(inputPath));  int n=data.length;  for (int i=0; i < n - 1; i++) {    data[i]=Integer.valueOf(input.readLine()) / 100.0;  }  data[n - 1]=data[n - 2];  input.close();}  }
class C{  protected void finalize() throws Throwable {  this.writer=null;  super.finalize();}  }
class C{  private void showPopupMenu(final MouseEvent event){  final int[] rows=m_tracesPanel.getEventsTable().getConvertedSelectedRows();  final List<ITraceEvent> traces=getTraces(rows);  final CEventTableMenu menu=new CEventTableMenu(m_tracesPanel.getEventsTable(),traces);  menu.show(m_tracesPanel.getEventsTable(),event.getX(),event.getY());}  }
class C{  public boolean isClosed(){  return !mOpen;}  }
class C{  private int insertIndexForLayer(Component comp,int layer,int position){  int i, count, curLayer;  int layerStart=-1;  int layerEnd=-1;  int componentCount=getComponentCount();  ArrayList<Component> compList=new ArrayList<Component>(componentCount);  for (int index=0; index < componentCount; index++) {    if (getComponent(index) != comp) {      compList.add(getComponent(index));    }  }  count=compList.size();  for (i=0; i < count; i++) {    curLayer=getLayer(compList.get(i));    if (layerStart == -1 && curLayer == layer) {      layerStart=i;    }    if (curLayer < layer) {      if (i == 0) {        layerStart=0;        layerEnd=0;      } else {        layerEnd=i;      }      break;    }  }  if (layerStart == -1 && layerEnd == -1)   return count;  if (layerStart != -1 && layerEnd == -1)   layerEnd=count;  if (layerEnd != -1 && layerStart == -1)   layerStart=layerEnd;  if (position == -1)   return layerEnd;  if (position > -1 && layerStart + position <= layerEnd)   return layerStart + position;  return layerEnd;}  }
class C{  public Gnomonic(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);  setMinScale(1000.0f);}  }
class C{  private static int CallStaticIntMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticIntMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Int);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public ListFeatureExtractor(String listName,String listFile,boolean caseSensitive) throws FileNotFoundException {  this(listName,LineIO.read(listFile),caseSensitive);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardCrosshairLabelGenerator)) {    return false;  }  StandardCrosshairLabelGenerator that=(StandardCrosshairLabelGenerator)obj;  if (!this.labelTemplate.equals(that.labelTemplate)) {    return false;  }  if (!this.numberFormat.equals(that.numberFormat)) {    return false;  }  return true;}  }
class C{  public IgniteConsistencyException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public synchronized void add(double x,double y,int c){  mXY.put(x,y);  updateRange(x,y);  mXC.put(x,c);}  }
class C{  @SuppressWarnings("unchecked") @Override public void execute(Iterator<String> contactsIter){  final GenericAsyncTask<Iterator<String>,Void,Integer,ModifyContactsCommand> asyncTask=new GenericAsyncTask<>(this);  asyncTask.execute(contactsIter);}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[0];  for (int i=1; i < ROUNDS; i+=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i + 1];  }  xr^=P[ROUNDS + 1];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new DanishAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public boolean isSelected(){  return m_selected;}  }
class C{  private String copyConstraintName(RepositoryService projectRepository,String constraintFilename){  String betterConstraintName="copy_of_" + constraintFilename;  int i=1;  while (true) {    if (projectRepository.existConstraintSet(betterConstraintName,ProjectConstraintsPanel.this.getModelObject())) {      betterConstraintName="copy_of_" + constraintFilename + "("+ i+ ")";      i++;    } else {      return betterConstraintName;    }  }}  }
class C{  public static Chunk read(DataInputStream in,boolean readKey){  try {    ArrayList<Long> idList=new ArrayList<Long>();    while (true) {      long x=readVarLong(in);      if (x == 0) {        break;      }      idList.add(x);    }    if (idList.size() == 0) {      in.close();      return null;    }    int[] key=null;    if (readKey) {      key=new int[4];      for (int i=0; i < key.length; i++) {        key[i]=in.readInt();      }    }    int len=(int)readVarLong(in);    byte[] value=new byte[len];    in.readFully(value);    return new Chunk(idList,key,value);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void sendAck(String index,String message,GuacamoleStatus status){  if (status != GuacamoleStatus.SUCCESS)   closeInterceptedStream(index);  sendInstruction(new GuacamoleInstruction("ack",index,message,Integer.toString(status.getGuacamoleStatusCode())));}  }
class C{  public static ByteList ConstantPool(ByteList bytes,ObjectList<ByteList> constants){  for (  ByteList list : constants) {    bytes.addAll(list);  }  return bytes;}  }
class C{  public boolean hasNextLine(){  return hasNext();}  }
class C{  public static Attribute createAttribute(int valueType,int blockType,String constructionDescription){  Attribute attribute=createAttribute(valueType);  attribute.setBlockType(blockType);  attribute.setConstruction(constructionDescription);  return attribute;}  }
class C{  protected void countCompiledMRJobsAndSparkInstructions(){  ExplainCounts counts=Explain.countDistributedOperations(runtimeProgram);  Statistics.resetNoOfCompiledJobs(counts.numJobs);}  }
class C{  private void ensureCapacity(int value){  if (value >= Bits.getMax(bits)) {    int[] newBits=Bits.makeBitSet(Math.max(value + 1,2 * Bits.getMax(bits)));    System.arraycopy(bits,0,newBits,0,bits.length);    bits=newBits;  }}  }
class C{  public static <T>Filter<T> andFilter(Filter<T> f1,Filter<T> f2){  return (new CombinedFilter<T>(f1,f2,true));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetimplementation.class,args);}  }
class C{  public GridTcpRouterImpl(GridTcpRouterConfiguration cfg){  this.cfg=cfg;  log=cfg.getLogger() != null ? cfg.getLogger().getLogger(getClass()) : new JavaLogger().getLogger(getClass());}  }
class C{  public boolean isSriovCapable(){  return sriovCapable;}  }
class C{  public void readFromParcel(Parcel parcel){  int length=parcel.readInt();  if (length < 0) {    throw new RuntimeException("Bad length in parcel: " + length);  }  readFromParcelInner(parcel,length);}  }
class C{  @Override public Set<Entry<K,V>> entrySet(){  throw new RuntimeException();}  }
class C{  public static <T extends Comparable<T>>int compareLists(List<T> a,List<T> b){  final Iterator<T> left=a.iterator();  final Iterator<T> right=b.iterator();  if (left.hasNext()) {    if (!right.hasNext()) {      return -1;    }    final T l=left.next();    final T r=right.next();    final int c=l.compareTo(r);    if (c != 0) {      return c;    }  }  if (right.hasNext()) {    return 1;  }  return 0;}  }
class C{  private void repackageGeoReferencingTags() throws IOException {  for (int i=0; i < this.getNumImages(); i++) {    TiffIFDEntry[] ifd=tiffIFDs.get(i);    AVList values=this.metadata.get(i);    values.setValue(AVKey.FILE_NAME,this.sourceFilename);    values.setValue(AVKey.BYTE_ORDER,AVKey.BIG_ENDIAN);    BaselineTiff tiff=BaselineTiff.extract(ifd,this.tiffReader);    if (null == tiff) {      String message=Logging.getMessage("GeotiffReader.BadGeotiff");      Logging.logger().severe(message);      throw new IOException(message);    }    if (tiff.width == Tiff.Undefined) {      String message=Logging.getMessage("generic.InvalidWidth",tiff.width);      Logging.logger().severe(message);      throw new IOException(message);    }    values.setValue(AVKey.WIDTH,tiff.width);    if (tiff.height == Tiff.Undefined) {      String message=Logging.getMessage("generic.InvalidHeight",tiff.height);      Logging.logger().severe(message);      throw new IOException(message);    }    values.setValue(AVKey.HEIGHT,tiff.height);    int sampleFormat=(null != tiff.sampleFormat) ? tiff.sampleFormat[0] : Tiff.Undefined;    int bitsPerSample=(null != tiff.bitsPerSample) ? tiff.bitsPerSample[0] : Tiff.Undefined;    if (null != tiff.displayName) {      values.setValue(AVKey.DISPLAY_NAME,tiff.displayName);    }    if (null != tiff.imageDescription) {      values.setValue(AVKey.DESCRIPTION,tiff.imageDescription);    }    if (null != tiff.softwareVersion) {      values.setValue(AVKey.VERSION,tiff.softwareVersion);    }    if (null != tiff.dateTime) {      values.setValue(AVKey.DATE_TIME,tiff.dateTime);    }    if (tiff.photometric == Tiff.Photometric.Color_RGB) {      values.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      values.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.COLOR);      values.setValue(AVKey.DATA_TYPE,AVKey.INT8);    } else     if (tiff.photometric == Tiff.Photometric.CMYK) {      values.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      values.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.COLOR);      values.setValue(AVKey.DATA_TYPE,AVKey.INT8);    } else     if (tiff.photometric == Tiff.Photometric.Color_Palette) {      values.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      values.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.COLOR);      values.setValue(AVKey.DATA_TYPE,AVKey.INT8);    } else     if (tiff.samplesPerPixel == Tiff.SamplesPerPixel.MONOCHROME) {      if (sampleFormat == Tiff.SampleFormat.SIGNED) {        values.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);        if (bitsPerSample == Short.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT16);        } else         if (bitsPerSample == Byte.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT8);        } else         if (bitsPerSample == Integer.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT32);        }      } else       if (sampleFormat == Tiff.SampleFormat.IEEEFLOAT) {        values.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);        if (bitsPerSample == Float.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.FLOAT32);        }      } else       if (sampleFormat == Tiff.SampleFormat.UNSIGNED) {        values.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);        values.setValue(AVKey.IMAGE_COLOR_FORMAT,AVKey.GRAYSCALE);        if (bitsPerSample == Short.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT16);        } else         if (bitsPerSample == Byte.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT8);        } else         if (bitsPerSample == Integer.SIZE) {          values.setValue(AVKey.DATA_TYPE,AVKey.INT32);        }      }    }    if (!values.hasKey(AVKey.PIXEL_FORMAT) || !values.hasKey(AVKey.DATA_TYPE)) {      String message=Logging.getMessage("Geotiff.UnsupportedDataTypeRaster",tiff.toString());      Logging.logger().severe(message);    }    for (    TiffIFDEntry entry : ifd) {      try {switch (entry.tag) {case GeoTiff.Tag.GDAL_NODATA:          Double d=Double.parseDouble(this.tiffReader.readString(entry));        values.setValue(AVKey.MISSING_DATA_SIGNAL,d);      break;case Tiff.Tag.MIN_SAMPLE_VALUE:    values.setValue(AVKey.ELEVATION_MIN,entry.getAsDouble());  break;case Tiff.Tag.MAX_SAMPLE_VALUE:values.setValue(AVKey.ELEVATION_MAX,entry.getAsDouble());break;case GeoTiff.Tag.MODEL_PIXELSCALE:this.gc.setModelPixelScale(entry.getDoubles());break;case GeoTiff.Tag.MODEL_TIEPOINT:this.gc.addModelTiePoints(entry.getDoubles());break;case GeoTiff.Tag.MODEL_TRANSFORMATION:this.gc.setModelTransformation(entry.getDoubles());break;case GeoTiff.Tag.GEO_KEY_DIRECTORY:this.gc.setGeokeys(entry.getShorts());break;case GeoTiff.Tag.GEO_DOUBLE_PARAMS:this.gc.setDoubleParams(entry.getDoubles());break;case GeoTiff.Tag.GEO_ASCII_PARAMS:this.gc.setAsciiParams(this.tiffReader.readBytes(entry));break;}} catch (Exception e) {Logging.logger().finest(e.toString());}}this.processGeoKeys(i);}}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int anns=0;  int ianns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(access,name,desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mpanns,desc,c,true,mv);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(impanns,desc,c,false,mv);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    context.access=access;    context.name=name;    context.desc=desc;    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public static void fill(int[] matrix,int value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    matrix[r]=value;  }}  }
class C{  public GenerateCodeException(Throwable cause){  super(cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void animateY(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  public TableDrivenAgentProgram(Map<List<Percept>,Action> perceptSequenceActions){  List<List<Percept>> rowHeaders=new ArrayList<List<Percept>>(perceptSequenceActions.keySet());  List<String> colHeaders=new ArrayList<String>();  colHeaders.add(ACTION);  table=new Table<List<Percept>,String,Action>(rowHeaders,colHeaders);  for (  List<Percept> row : rowHeaders) {    table.set(row,ACTION,perceptSequenceActions.get(row));  }}  }
class C{  void cancelAllSuperActivityToasts(){  for (  SuperCardToast superCardToast : mList) {    if (superCardToast.isShowing()) {      superCardToast.getViewGroup().removeView(superCardToast.getView());      superCardToast.getViewGroup().invalidate();    }  }  mList.clear();}  }
class C{  private void writeLine(String str,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(str,start,len);}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public final boolean removeStrategy(final PlanStrategy strategy,final Id<Population> populationId){  int idx=this.strategies.get(populationId).indexOf(strategy);  if (idx != -1) {    this.strategies.get(populationId).remove(idx);    double weight=this.weights.get(populationId).remove(idx).doubleValue();    this.totalWeights.put(populationId,this.totalWeights.get(populationId) - weight);    return true;  }  return false;}  }
class C{  public BitArray copy(){  return new BitArray(bytes.copy(),count,size);}  }
class C{  public void deselectAll(){  checkWidget();  checkNullElement();  this.selection.clear();  updateSelection();}  }
class C{  public boolean isAcceptable(X509Certificate cert){  if (permitted_names == null) {    prepareNames();  }  byte[] bytes=getExtensionValue(cert,"2.5.29.17");  List<GeneralName> names;  try {    names=(bytes == null) ? new ArrayList<GeneralName>(1) : ((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if ((excluded_names[4] != null) || (permitted_names[4] != null)) {    try {      names.add(new GeneralName(4,cert.getSubjectX500Principal().getName()));    } catch (    IOException e) {    }  }  return isAcceptable(names);}  }
class C{  public boolean resumeBatch(long batchId){  int batchStatus=batchRepository.getBatchStatus(batchId);  if (DownloadStatus.isPausedByApp(batchStatus)) {    downloadsRepository.resumeDownloadWithBatchId(batchId);    batchRepository.updateBatchStatus(batchId,DownloadStatus.PENDING);    notifyBatchesHaveChanged();    return true;  } else {    return false;  }}  }
class C{  public void testGetNString() throws Exception {  createTable("testGetNString","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10))");  this.stmt.executeUpdate("INSERT INTO testGetNString (c1, c2) VALUES (_utf8 'aaa', _utf8 'bbb')");  this.rs=this.stmt.executeQuery("SELECT c1, c2 FROM testGetNString");  this.rs.next();  assertEquals("aaa",this.rs.getNString(1));  assertEquals("bbb",this.rs.getNString("c2"));  this.rs.close();}  }
class C{  public void destroy(){}  }
class C{  public SwitchElementAction(GenericElementView groupView,String typeId){  this.groupView=groupView;  this.objectTypeId=typeId;  String title=HitroUtil.getInstance().getTypeFactory().getMessage(typeId);  setText(title);  setImageDescriptor(ImageDescriptor.createFromImage(ImageCache.getInstance().getISO27kTypeImage(objectTypeId)));}  }
class C{  public ServerErrorException(String message){  super(message);}  }
class C{  public Object clone(){  return new BigIntPolynomial(coeffs.clone());}  }
class C{  @MediumTest public void testStabilityInSpace(){  long t=System.currentTimeMillis();  VelocityTracker vt=VelocityTracker.obtain();  drag(vt,100,200,100,200,10,t,400);  vt.computeCurrentVelocity(1);  float firstX=vt.getXVelocity();  float firstY=vt.getYVelocity();  vt.clear();  drag(vt,200,300,200,300,10,t,400);  vt.computeCurrentVelocity(1);  float secondX=vt.getXVelocity();  float secondY=vt.getYVelocity();  assertEqualFuzzy(firstX,secondX,0.1f);  assertEqualFuzzy(firstY,secondY,0.1f);  vt.recycle();}  }
class C{  public double[] computeLocal(int states[][],int destCol,int[] sourcesAbsolute){  initialise();  int[] cleanedSources=cleanAbsoluteSources(sourcesAbsolute,destCol);  addObservations(states,destCol,cleanedSources,true);  return computeLocalFromPreviousObservations(states,destCol,cleanedSources,true);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    setOwner((Composite)newValue);  return;case DomPackage.SIMPLE_TYPE_REFERENCE__TYPE_NAME:setTypeName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void loadReferenceValues(){  addValues(descripcionBI.getValues(tipoFicha,ValorCampoGenericoVO.TIPO_REFERENCIA,id));}  }
class C{  public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final View lastChild=getChildAt(childCount - 1);    final int lastBottom=lastChild.getBottom();    final int end=(mBottom - mTop) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    View firstChild=getChildAt(0);    final int firstTop=firstChild.getTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      offsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        fillUp(mFirstPosition - 1,firstChild.getTop() - mDividerHeight);        adjustViewsUpOrDown();      }    }  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static final void registerPackets(){  registerMessage(PacketCube.Handler.class,PacketCube.class);  registerMessage(PacketColumn.Handler.class,PacketColumn.class);  registerMessage(PacketUnloadColumn.Handler.class,PacketUnloadColumn.class);  registerMessage(PacketUnloadCube.Handler.class,PacketUnloadCube.class);  registerMessage(PacketCubeBlockChange.Handler.class,PacketCubeBlockChange.class);}  }
class C{  public static void installColors(JComponent c,String defaultBgName,String defaultFgName){  PaletteLookAndFeel plaf=getInstance();  Color bg=c.getBackground();  if (bg == null || bg instanceof UIResource) {    c.setBackground(plaf.getColor(defaultBgName));  }  Color fg=c.getForeground();  if (fg == null || fg instanceof UIResource) {    c.setForeground(plaf.getColor(defaultFgName));  }}  }
class C{  @Override public void close() throws IOException {  if (mBufferCount > 0) {    try {      mQueue.write(mBuffer,0,mBufferCount);    } catch (    InterruptedException e) {      throw new IOException("GzipAsynchOutputStream interrupted during write/3");    }    mBufferCount=0;  }  mQueue.close();  try {    mThread.join();  } catch (  InterruptedException e) {    throw new IOException("AsynchOutputStream interrupted during close");  } finally {    super.close();  }  checkException();}  }
class C{  private ActionErrors validateWsTransferenciasUrl(String url,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((url == null) || StringUtils.isBlank(url)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(TransferenciasConstants.ERROR_TRANSFERENCIAS_RELACIONES_IMPORT_XML_URL_WS_EMPTY));  }  return errors;}  }
class C{  private static double roundUp(final double val){  int exponent=(int)Math.floor(Math.log10(val));  double rval=val * Math.pow(10,-exponent);  if (rval > 5.0) {    rval=10.0;  } else   if (rval > 2.0) {    rval=5.0;  } else   if (rval > 1.0) {    rval=2.0;  }  rval*=Math.pow(10,exponent);  return rval;}  }
class C{  public Matrix4 tra(){  tmp[M00]=val[M00];  tmp[M01]=val[M10];  tmp[M02]=val[M20];  tmp[M03]=val[M30];  tmp[M10]=val[M01];  tmp[M11]=val[M11];  tmp[M12]=val[M21];  tmp[M13]=val[M31];  tmp[M20]=val[M02];  tmp[M21]=val[M12];  tmp[M22]=val[M22];  tmp[M23]=val[M32];  tmp[M30]=val[M03];  tmp[M31]=val[M13];  tmp[M32]=val[M23];  tmp[M33]=val[M33];  return set(tmp);}  }
class C{  public RpfUtil(String rpfDir,float ulat,float llon,float llat,float rlon,float scale,char scaleDelimiter,int boundaryLimits){  this.upperLat=ulat;  this.lowerLat=llat;  this.leftLon=llon;  this.rightLon=rlon;  this.scale=scale;  this.scaleDelim=scaleDelimiter;  this.boundaryLimits=boundaryLimits;  setRpfDir(rpfDir);}  }
class C{  public void buscarProcedimientoElementosExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  setReturnActionFordward(request,mappings.findForward("form_busqueda_elementos"));}  }
class C{  private static EncodingInfo[] loadEncodingInfo(){  try {    final InputStream is;    SecuritySupport ss=SecuritySupport.getInstance();    is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),ENCODINGS_FILE);    Properties props=new Properties();    if (is != null) {      props.load(is);      is.close();    } else {    }    int totalEntries=props.size();    List encodingInfo_list=new ArrayList();    Enumeration keys=props.keys();    for (int i=0; i < totalEntries; ++i) {      String javaName=(String)keys.nextElement();      String val=props.getProperty(javaName);      int len=lengthOfMimeNames(val);      String mimeName;      char highChar;      if (len == 0) {        mimeName=javaName;        highChar='\u0000';      } else {        try {          final String highVal=val.substring(len).trim();          highChar=(char)Integer.decode(highVal).intValue();        } catch (        NumberFormatException e) {          highChar=0;        }        String mimeNames=val.substring(0,len);        StringTokenizer st=new StringTokenizer(mimeNames,",");        for (boolean first=true; st.hasMoreTokens(); first=false) {          mimeName=st.nextToken();          EncodingInfo ei=new EncodingInfo(mimeName,javaName,highChar);          encodingInfo_list.add(ei);          _encodingTableKeyMime.put(mimeName.toUpperCase(),ei);          if (first)           _encodingTableKeyJava.put(javaName.toUpperCase(),ei);        }      }    }    EncodingInfo[] ret_ei=new EncodingInfo[encodingInfo_list.size()];    encodingInfo_list.toArray(ret_ei);    return ret_ei;  } catch (  java.net.MalformedURLException mue) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(mue);  }catch (  java.io.IOException ioe) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(ioe);  }}  }
class C{  public Object key(int index){  if (index < 0 || index >= count) {    return null;  }  int j=0;  for (int i=0; i < table.length; i++) {    Entry e=table[i];    if (e == null) {      continue;    }    do {      if (j++ == index) {        return e.key;      }      e=e.next;    } while (e != null);  }  return null;}  }
class C{  public Object onCompletion(Event event,EventStatus status) throws InterruptedException {  Object annotation=null;  if (status.isSuccessful()) {    if (logger.isDebugEnabled())     logger.debug("Applied event: " + event.getClass().getSimpleName());  } else   if (status.isCancelled()) {    logger.warn("Event processing was cancelled: " + event.getClass().getSimpleName());  } else   if (status.getException() != null) {    Throwable t=status.getException();    if (t instanceof TransitionNotFoundException) {      TransitionNotFoundException e=(TransitionNotFoundException)t;      StringBuffer msg=new StringBuffer();      msg.append("Received irrelevant event for current state: state=");      msg.append(e.getState().getName());      msg.append(" event=");      msg.append(e.getEvent().getClass().getSimpleName());      logger.warn(msg.toString());      endUserLog.warn(msg.toString());      annotation=new ReplicatorStateException("Operation irrelevant in current state");    } else     if (t instanceof TransitionRollbackException) {      TransitionRollbackException e=(TransitionRollbackException)t;      StringBuffer msg=new StringBuffer();      msg.append("State transition could not complete and was rolled back: state=");      msg.append(e.getTransition().getInput().getName());      msg.append(" transition=");      msg.append(e.getTransition().getName());      msg.append(" event=");      msg.append(e.getEvent().getClass().getSimpleName());      String errMsg=msg.toString();      endUserLog.error(errMsg);      displayErrorMessages(e);      annotation=getStateMachineException(e,errMsg);    } else     if (t instanceof TransitionFailureException) {      TransitionFailureException e=(TransitionFailureException)t;      StringBuffer msg=new StringBuffer();      msg.append("State transition failed causing emergency recovery: state=");      msg.append(e.getTransition().getInput().getName());      msg.append(" transition=");      msg.append(e.getTransition().getName());      msg.append(" event=");      msg.append(e.getEvent().getClass().getSimpleName());      String errMsg=msg.toString();      endUserLog.error(errMsg);      displayErrorMessages(e);      annotation=getStateMachineException(e,errMsg);    } else     if (t instanceof FiniteStateException) {      logger.error("Unexpected state transition processing error",t);      annotation=new ReplicatorException("Operation failed unexpectedly--see log for details",t);    } else {      logger.error("Unexpected processing error",t);      annotation=new ReplicatorException("Operation failed unexpectedly--see log for details",t);    }  }  return annotation;}  }
class C{  public static int andNot(int a[],int lena,int b[],int lenb,int[] target){  if (lena == 0)   return 0;  if (lenb == 0) {    System.arraycopy(a,0,target,0,lena);    return lena;  }  if ((lenb >> 3) >= lena) {    return andNotBinarySearch(a,lena,b,lenb,target);  }  int count=0;  int i=0, j=0;  int doca=a[i], docb=b[j];  for (; ; ) {    if (doca > docb) {      if (++j >= lenb)       break;      docb=b[j];    } else     if (doca < docb) {      target[count++]=doca;      if (++i >= lena)       break;      doca=a[i];    } else {      if (++i >= lena)       break;      doca=a[i];      if (++j >= lenb)       break;      docb=b[j];    }  }  int leftover=lena - i;  if (leftover > 0) {    System.arraycopy(a,i,target,count,leftover);    count+=leftover;  }  return count;}  }
class C{  @Ignore public static DoubleArray instance(double[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  protected boolean hasOutstandingChanges(){  return (fAmtFrom.hasChanged() || fAmtTo.hasChanged() || fBankAccount_ID.hasChanged()|| fCash_ID.hasChanged()|| fCashBook_ID.hasChanged()|| fCharge_ID.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged()|| fInvoice_ID.hasChanged()|| fPayment_ID.hasChanged()|| cbAbsolute.hasChanged());}  }
class C{  public Open(String sessionID,int blockSize,StanzaType stanza){  if (sessionID == null || "".equals(sessionID)) {    throw new IllegalArgumentException("Session ID must not be null or empty");  }  if (blockSize <= 0) {    throw new IllegalArgumentException("Block size must be greater than zero");  }  this.sessionID=sessionID;  this.blockSize=blockSize;  this.stanza=stanza;  setType(Type.SET);}  }
class C{  protected RuleMatchPair matchWithRule(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  FirewallRule matched_rule=null;  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  AllowDropPair adp=new AllowDropPair(sw.getOFFactory());synchronized (rules) {    Iterator<FirewallRule> iter=this.rules.iterator();    FirewallRule rule=null;    while (iter.hasNext()) {      rule=iter.next();      if (rule.matchesThisPacket(sw.getId(),(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),eth,adp) == true) {        matched_rule=rule;        break;      }    }  }  RuleMatchPair rmp=new RuleMatchPair();  rmp.rule=matched_rule;  if (matched_rule == null) {    Match.Builder mb=OFFactories.getFactory(pi.getVersion()).buildMatch();    mb.setExact(MatchField.IN_PORT,(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT))).setExact(MatchField.ETH_SRC,eth.getSourceMACAddress()).setExact(MatchField.ETH_DST,eth.getDestinationMACAddress()).setExact(MatchField.ETH_TYPE,eth.getEtherType());    if (mb.get(MatchField.ETH_TYPE).equals(EthType.IPv4)) {      IPv4 ipv4=(IPv4)eth.getPayload();      mb.setExact(MatchField.IPV4_SRC,ipv4.getSourceAddress()).setExact(MatchField.IPV4_DST,ipv4.getDestinationAddress()).setExact(MatchField.IP_PROTO,ipv4.getProtocol());      if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.TCP)) {        TCP tcp=(TCP)ipv4.getPayload();        mb.setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());      } else       if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.UDP)) {        UDP udp=(UDP)ipv4.getPayload();        mb.setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());      } else {      }    }    rmp.match=mb.build();  } else   if (matched_rule.action == FirewallRule.FirewallAction.DROP) {    rmp.match=adp.drop.build();  } else {    rmp.match=adp.allow.build();  }  return rmp;}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(stroke));}  }
class C{  public boolean supportsSpeed(){  return mProperties.mSupportsSpeed;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[name=" + this.getName()+ ",maxpri="+ this.getMaxPriority()+ "]";}  }
class C{  public final DoubleGrid2D add(final DoubleGrid2D withThis){  checkBounds(withThis);  final double[][] otherField=withThis.field;  double[] fieldx=null;  double[] ofieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++)     fieldx[y]+=ofieldx[y];  }  return this;}  }
class C{  public static final long BuildLongBE(byte bytevec[]){  return BuildLongBE(bytevec,0);}  }
class C{  public HttpCookie(String name,String value){  String ntrim=name.trim();  if (!isValidName(ntrim)) {    throw new IllegalArgumentException("Invalid name: " + name);  }  this.name=ntrim;  this.value=value;}  }
class C{  void removeDeferredErrors(JavacNode node){  DiagnosticPosition pos=node.get().pos();  JCCompilationUnit top=(JCCompilationUnit)top().get();  removeFromDeferredDiagnostics(pos.getStartPosition(),Javac.getEndPosition(pos,top));}  }
class C{  @Override protected void computeRxFillLevel(){  rxInterruptFillLevel=rfc & RFC_RIL_MASK;  if (rxInterruptFillLevel == 0) {    rxInterruptFillLevel=32;  }}  }
class C{  public Builder detectDiskWrites(){  return enable(DETECT_DISK_WRITE);}  }
class C{  private boolean checkforMatchColumn(Joinable rs) throws SQLException {  int[] i=rs.getMatchColumnIndexes();  if (i.length <= 0) {    return false;  }  return true;}  }
class C{  private static void readJson() throws IOException {  JsonParser parser=new JsonParser();  JsonElement jsonElement=parser.parse("{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}");  JsonObject rootObject=jsonElement.getAsJsonObject();  String message=rootObject.get("message").getAsString();  JsonObject childObject=rootObject.getAsJsonObject("place");  String place=childObject.get("name").getAsString();  System.out.println(message + " " + place);}  }
class C{  public boolean isAxisModulusCustom(){  return mIsAxisModulusCustom;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @UiHandler("secondChoiceButton") public void handleSecondChoiceClick(final ClickEvent event){  this.actionDelegate.secondChoiceClicked();}  }
class C{  public JobClassLoader(File f){  super(new URL[]{});  if (f == null)   throw new IllegalArgumentException("argument mustn't be null");  file=f.getAbsoluteFile();  if (!file.canRead())   throw new IllegalArgumentException("'" + file + "' is not readable");  try {    addURL(file.getAbsoluteFile().toURL());  } catch (  MalformedURLException e) {    throw new IllegalArgumentException("'" + file + "' cannot be converted to an URL");  }}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public static boolean deleteSpreadsheetsRow(Context context,String accountName,String trackName){  try {    List<File> files=searchSpreadsheets(context,accountName);    if (files == null || files.size() == 0) {      return false;    }    String spreadsheetId=files.get(0).getId();    SpreadsheetService spreadsheetService=new SpreadsheetService("MyTracks-" + SystemUtils.getMyTracksVersion(context));    Credential credential=new Credential(BearerToken.authorizationHeaderAccessMethod());    credential.setAccessToken(SendToGoogleUtils.getToken(context,accountName,SendToGoogleUtils.SPREADSHEETS_SCOPE));    spreadsheetService.setOAuth2Credentials(credential);    WorksheetFeed worksheetFeed=spreadsheetService.getFeed(new URL(String.format(Locale.US,SendSpreadsheetsAsyncTask.GET_WORKSHEETS_URI,spreadsheetId)),WorksheetFeed.class);    Iterator<WorksheetEntry> worksheetEntryIterator=worksheetFeed.getEntries().iterator();    while (worksheetEntryIterator.hasNext()) {      WorksheetEntry worksheetEntry=(WorksheetEntry)worksheetEntryIterator.next();      String worksheetTitle=worksheetEntry.getTitle().getPlainText();      if (worksheetTitle.equals(SPREADSHEETS_WORKSHEET_NAME)) {        URL url=worksheetEntry.getListFeedUrl();        Iterator<ListEntry> listEntryIterator=spreadsheetService.getFeed(url,ListFeed.class).getEntries().iterator();        while (listEntryIterator.hasNext()) {          ListEntry listEntry=(ListEntry)listEntryIterator.next();          String name=listEntry.getCustomElements().getValue(SPREADSHEETS_TRANCK_NAME_COLUMN);          if (name.equals(trackName)) {            listEntry.delete();            return true;          }        }      }    }  } catch (  Exception e) {    Log.e(TAG,"Unable to delete spreadsheets row.",e);  }  return false;}  }
class C{  public static SparkRunner fromOptions(PipelineOptions options){  SparkPipelineOptions sparkOptions=PipelineOptionsValidator.validate(SparkPipelineOptions.class,options);  return new SparkRunner(sparkOptions);}  }
class C{  private void loadOptionalLayer(StendhalRPZone zone,StendhalMapStructure zonedata,String layerName) throws IOException {  LayerDefinition layer=zonedata.getLayer(layerName);  if (layer != null) {    zone.addLayer(zone.getName() + "." + layerName,layer);  }}  }
class C{  public static Object callProp0(Object value,String property,Context cx,Scriptable scope){  Callable f=getPropFunctionAndThis(value,property,cx,scope);  Scriptable thisObj=lastStoredScriptable(cx);  return f.call(cx,scope,thisObj,ScriptRuntime.emptyArgs);}  }
class C{  public static Automaton makeAnyString(){  Automaton a=new Automaton();  int s=a.createState();  a.setAccept(s,true);  a.addTransition(s,s,Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);  a.finishState();  return a;}  }
class C{  public static void main(String[] args){  try {    for (int i=0; i < 10; i++)     System.out.println(PasswordHash.createHash("p\r\nassw0Rd!"));    boolean failure=false;    System.out.println("Running tests...");    for (int i=0; i < 100; i++) {      String password="" + i;      String hash=createHash(password);      String secondHash=createHash(password);      if (hash.equals(secondHash)) {        System.out.println("FAILURE: TWO HASHES ARE EQUAL!");        failure=true;      }      String wrongPassword="" + (i + 1);      if (validatePassword(wrongPassword,hash)) {        System.out.println("FAILURE: WRONG PASSWORD ACCEPTED!");        failure=true;      }      if (!validatePassword(password,hash)) {        System.out.println("FAILURE: GOOD PASSWORD NOT ACCEPTED!");        failure=true;      }    }    if (failure)     System.out.println("TESTS FAILED!"); else     System.out.println("TESTS PASSED!");  } catch (  Exception ex) {    System.out.println("ERROR: " + ex);  }}  }
class C{  public boolean isTooltipEnabled(){  return this.tooltipEnabled;}  }
class C{  public boolean isSnapshotConfigSupported(){  return snapshotConfigSupported;}  }
class C{  @Override public void onBuildHeaders(List<Header> target){  loadHeadersFromResource(R.xml.device_admin_headers,target);}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  ContentResolver.requestSync(getSyncAccount(context),MoviesContract.CONTENT_AUTHORITY,bundle);}  }
class C{  @Override final public <T extends Persistent<PK>,PK extends GenericPK>T readNotNull(AppContext ctx,Class<T> type,PK objectId){  T object=null;  if (objectId != null) {    Cache<PK,T> cache=CacheFactoryEHCache.getCacheFactory().getCache(type);    object=cache.get(objectId);    if (object == null) {      object=ds.readNotNull(ctx,type,objectId);      cache.put(objectId,object);    }  }  AccessRightsUtils.getInstance().setRole(ctx,object);  return object;}  }
class C{  private PlanSpecific(String name){  this.name=name;  addExpectedSpaces("vm");  addExpectedSpaces("immortal");  addExpectedSpaces("meta");  addExpectedSpaces("los");  addExpectedSpaces("sanity");  addExpectedSpaces("non-moving");  addExpectedSpaces("sm-code");  addExpectedSpaces("lg-code");}  }
class C{  public synchronized void close(){  cursorRow=-1;  try {    if (inputFile != null) {      inputFile.close();    }    inputFile=null;  } catch (  IOException i) {    System.out.println("Caught ioexception " + i.getMessage());  }}  }
class C{  public long available() throws IOException, InterruptedException {  return bfdi.available();}  }
class C{  public ClusterState(Integer znodeVersion,Set<String> liveNodes,Map<String,DocCollection> collectionStates){  this(liveNodes,getRefMap(collectionStates),znodeVersion);}  }
class C{  @Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {  return SmileParserBootstrapper.hasSmileFormat(acc);}  }
class C{  public BaggageAPIImplForTest(){  super(new BaggageNamespaceForTest(),new BaggageNamespaceForTest());  this.ACTIVE=(BaggageNamespaceForTest)super.ACTIVE;  this.ARCHIVE=(BaggageNamespaceForTest)super.ARCHIVE;}  }
class C{  public boolean isIdentical(String version){  return isIdentical(new Version(version));}  }
class C{  public boolean hasUnPlacedVolumes(){  return unplacedVolumes != null && !unplacedVolumes.isEmpty();}  }
class C{  public void showStatistics(){  List<ResultKey> selectedResults=frame.getSelectedResults();  String problemName=selectedResults.get(0).getProblem();  Problem problem=null;  try {    problem=ProblemFactory.getInstance().getProblem(problemName);    double epsilon=EpsilonHelper.getEpsilon(problem);    Analyzer analyzer=new Analyzer().withProblem(problemName).withEpsilon(epsilon).showAggregate().showStatisticalSignificance();    if (getIncludeHypervolume()) {      analyzer.includeHypervolume();    }    if (getIncludeGenerationalDistance()) {      analyzer.includeGenerationalDistance();    }    if (getIncludeInvertedGenerationalDistance()) {      analyzer.includeInvertedGenerationalDistance();    }    if (getIncludeSpacing()) {      analyzer.includeSpacing();    }    if (getIncludeAdditiveEpsilonIndicator()) {      analyzer.includeAdditiveEpsilonIndicator();    }    if (getIncludeContribution()) {      analyzer.includeContribution();    }    if (getIncludeR1()) {      analyzer.includeR1();    }    if (getIncludeR2()) {      analyzer.includeR2();    }    if (getIncludeR3()) {      analyzer.includeR3();    }    for (    ResultKey key : selectedResults) {      for (      Accumulator accumulator : get(key)) {        if (!accumulator.keySet().contains("Approximation Set")) {          continue;        }        NondominatedPopulation population=new EpsilonBoxDominanceArchive(epsilon);        List<?> list=(List<?>)accumulator.get("Approximation Set",accumulator.size("Approximation Set") - 1);        for (        Object object : list) {          population.add((Solution)object);        }        analyzer.add(key.getAlgorithm(),population);      }    }    ByteArrayOutputStream stream=new ByteArrayOutputStream();    analyzer.printAnalysis(new PrintStream(stream));    StatisticalResultsViewer viewer=new StatisticalResultsViewer(this,stream.toString());    viewer.setLocationRelativeTo(frame);    viewer.setIconImages(frame.getIconImages());    viewer.setVisible(true);  }  finally {    if (problem != null) {      problem.close();    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetdoctype.class,args);}  }
class C{  private Object readResolve(){  return this;}  }
class C{  public BlueMarbleLayer(String serviceAddress){  if (serviceAddress == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BlueMarbleLayer","constructor","missingServiceAddress"));  }  WmsLayerConfig config=new WmsLayerConfig();  config.serviceAddress=serviceAddress;  config.wmsVersion="1.3.0";  config.layerNames="BlueMarble-200405";  config.coordinateSystem="EPSG:4326";  config.transparent=false;  this.setDisplayName("Blue Marble");  this.setConfiguration(new Sector().setFullSphere(),500,config);  this.setImageOptions(new ImageOptions(WorldWind.RGB_565));}  }
class C{  public ProductPriceModelImpl(final String ref,final String currency,final BigDecimal quantity,final BigDecimal regularPrice,final BigDecimal salePrice){  this(ref,currency,quantity,regularPrice,salePrice,false,false,false,null,null,false,null);}  }
class C{  private void readMarkerElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {}  }
class C{  public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  mAlphabetIndexer.setCursor(newCursor);  return super.swapCursor(newCursor);}  }
class C{  private static List<BasicBlock> findExitNode(final FlowGraph graph){  final ArrayList<BasicBlock> exitNodes=new ArrayList<BasicBlock>();  for (  final BasicBlock block : graph) {    if (block.getChildren().size() == 0) {      exitNodes.add(block);    }  }  return exitNodes;}  }
class C{  protected OMDrawingToolMouseMode activateDrawingTool(String ttc){  if (drawingTool != null && ttc != null) {    DrawingAttributes da=(DrawingAttributes)drawingAttributesTable.get(ttc);    if (da != null) {      da.setOrientation(ga.getOrientation());      da.setTo(ga);    }    if (Debug.debugging("editortool")) {      Debug.output("DrawingEditorTool.activateDrawingTool(" + ttc + ")");    }    drawingTool.setMask(OMDrawingTool.PASSIVE_MOUSE_EVENT_BEHAVIOR_MASK | OMDrawingTool.QUICK_CHANGE_BEHAVIOR_MASK);    OMGraphic newOMG=drawingTool.create(ttc,ga,(DrawingToolRequestor)getLayer(),true);    if (newOMG == null) {      if (Debug.debugging("editortool")) {        Debug.output("DrawingEditorTool.activateDrawingTool() failed, cleaning up...");      }      drawingTool.deactivate();      return null;    }    OMGraphicHandlerLayer el=getLayer();    if (el instanceof EditorLayer) {      ((EditorLayer)el).creatingOMGraphic(newOMG);    }    return drawingTool.getMouseMode();  } else {    if (Debug.debugging("editortool")) {      Debug.output("DrawingEditorTool.activateDrawingTool(" + ttc + ") with drawing tool = "+ drawingTool);    }  }  return null;}  }
class C{  public void addLinkListener(LinkListener listener){  listenerList.add(LinkListener.class,listener);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public int size(){  return this.bitSetSize;}  }
class C{  private void encodeOutput(DexFile file,AnnotatedOutput out){  boolean annotates=out.annotates();  if (annotates) {    out.annotate(0,offsetString() + " class data for " + thisClass.toHuman());  }  encodeSize(file,out,"static_fields",staticFields.size());  encodeSize(file,out,"instance_fields",instanceFields.size());  encodeSize(file,out,"direct_methods",directMethods.size());  encodeSize(file,out,"virtual_methods",virtualMethods.size());  encodeList(file,out,"static_fields",staticFields);  encodeList(file,out,"instance_fields",instanceFields);  encodeList(file,out,"direct_methods",directMethods);  encodeList(file,out,"virtual_methods",virtualMethods);  if (annotates) {    out.endAnnotation();  }}  }
class C{  public static JsonObject addRoutingRuleMainStorage(JsonObject rules){  JsonObject mstorage=createRoutingRule(ImmutableMap.of("description","a default routing for the source storage","path","/$1","storage","main","logExpiry",0));  rules=addRoutingRule(rules,"/(.*)",mstorage);  return rules;}  }
class C{  protected Jerry(Jerry parent,Node[] nodes1,Node[] nodes2){  this.parent=parent;  this.nodes=ArraysUtil.join(nodes1,nodes2);  this.builder=parent.builder;}  }
class C{  public static Drawable bitmapToDrawble(Bitmap bitmap,Context mcontext){  Drawable drawable=new BitmapDrawable(mcontext.getResources(),bitmap);  return drawable;}  }
class C{  private Long id(HttpServletRequest request){  Long id=null;  String pathInfo=request.getPathInfo();  if (pathInfo != null && pathInfo.length() > 1) {    String idString=pathInfo.substring(1);    id=Long.valueOf(idString);  }  return id;}  }
class C{  public static String fixedWidth(String[] lines,int width){  StringBuilder formatStr=new StringBuilder();  for (int i=0; i < lines.length; i++) {    int curWidth=0;    if (i != 0) {      formatStr.append("\n");    }    if (lines[i].length() <= width) {      formatStr.append(lines[i]);      continue;    }    String[] words=splitAndTrim(lines[i],WHITE_SPACES);    for (int j=0; j < words.length; j++) {      if (curWidth == 0 || (curWidth + words[j].length()) < width) {        if (curWidth != 0) {          formatStr.append(" ");          curWidth+=1;        }        curWidth+=words[j].length();        formatStr.append(words[j]);      } else {        formatStr.append("\n");        curWidth=words[j].length();        formatStr.append(words[j]);      }    }  }  return formatStr.toString();}  }
class C{  public static org.oscm.vo.VOUda convertToApi(org.oscm.internal.vo.VOUda oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUda newVO=new org.oscm.vo.VOUda();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUdaDefinition(convertToApi(oldVO.getUdaDefinition()));  newVO.setUdaValue(oldVO.getUdaValue());  newVO.setTargetObjectKey(oldVO.getTargetObjectKey());  return newVO;}  }
class C{  public MethodTypeSignature parseMethodSig(String s){  if (DEBUG)   System.out.println("Parsing method sig:" + s);  input=s.toCharArray();  return parseMethodTypeSignature();}  }
class C{  public LexicographicalComparator(){  super();}  }
class C{  public Scanner createScannerByKey(byte[] beginKey,byte[] endKey) throws IOException {  return createScannerByKey((beginKey == null) ? null : new ByteArray(beginKey,0,beginKey.length),(endKey == null) ? null : new ByteArray(endKey,0,endKey.length));}  }
class C{  @Inline @Uninterruptible public static boolean isLiveRC(ObjectReference object){  Word value=VM.objectModel.readAvailableBitsWord(object);  if (isStuck(value))   return true;  return value.and(READ_MASK).GE(LIVE_THRESHOLD);}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public AndPredicate(Predicate p1){  add(p1);}  }
class C{  public int error_sym(){  return 1;}  }
class C{  public XMLResponse(){  this("");}  }
class C{  @Override public void delete() throws IOException {  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    ledgerHandler.deleteLog();  }  finally {    Utils.closeQuietly(ledgerHandler);  }  String zkPath=getZKPath();  if (zkPath.toLowerCase().contains("distributedlog")) {    try {      LOG.info("Delete the path associated with the log {}, ZK Path {}",name,zkPath);      ZKUtil.deleteRecursive(writerZKC.get(),zkPath);    } catch (    InterruptedException ie) {      LOG.error("Interrupted while accessing ZK",ie);      throw new DLInterruptedException("Error initializing zk",ie);    }catch (    KeeperException ke) {      LOG.error("Error accessing entry in zookeeper",ke);      throw new IOException("Error initializing zk",ke);    }  } else {    LOG.warn("Skip deletion of unrecognized ZK Path {}",zkPath);  }}  }
class C{  public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  private Marketplace findMarketplace(List<Marketplace> mplList,String mplId){  if (mplList != null && mplId != null) {    for (    Marketplace mpl : mplList) {      if (mplId.equals(mpl.getMarketplaceId())) {        return mpl;      }    }  }  return null;}  }
class C{  public static void updateUI(){  Set<Window> updated=Env.updateUI();  JFrame top=Env.getWindow(0);  if (top instanceof AMenu) {    CFrame[] frames=((AMenu)top).getWindowManager().getWindows();    for (    CFrame f : frames) {      if (updated.contains(f))       continue;      SwingUtilities.updateComponentTreeUI(f);      f.validate();      RepaintManager mgr=RepaintManager.currentManager(f);      Component childs[]=f.getComponents();      for (      Component c : childs) {        if (c instanceof JComponent)         mgr.markCompletelyDirty((JComponent)c);      }      f.repaint();      updated.add(f);    }  }}  }
class C{  private void findLargeCarItemSets() throws Exception {  ArrayList<Object> kMinusOneSets, kSets;  Hashtable<ItemSet,Integer> hashtable;  int necSupport, i=0;  double nextMinSupport=m_minSupport * m_instances.numInstances();  double nextMaxSupport=m_upperBoundMinSupport * m_instances.numInstances();  if (Math.rint(nextMinSupport) == nextMinSupport) {    necSupport=(int)nextMinSupport;  } else {    necSupport=Math.round((float)(nextMinSupport + 0.5));  }  if (Math.rint(nextMaxSupport) == nextMaxSupport) {  } else {    Math.round((float)(nextMaxSupport + 0.5));  }  kSets=LabeledItemSet.singletons(m_instances,m_onlyClass);  LabeledItemSet.upDateCounters(kSets,m_instances,m_onlyClass);  kSets=LabeledItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());  if (kSets.size() == 0) {    return;  }  do {    m_Ls.add(kSets);    kMinusOneSets=kSets;    kSets=LabeledItemSet.mergeAllItemSets(kMinusOneSets,i,m_instances.numInstances());    hashtable=LabeledItemSet.getHashtable(kMinusOneSets,kMinusOneSets.size());    kSets=LabeledItemSet.pruneItemSets(kSets,hashtable);    LabeledItemSet.upDateCounters(kSets,m_instances,m_onlyClass);    kSets=LabeledItemSet.deleteItemSets(kSets,necSupport,m_instances.numInstances());    i++;  } while (kSets.size() > 0);}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void appendGeometryCollectionTaggedText(GeometryCollection geometryCollection,int level,Writer writer) throws IOException {  writer.write("GEOMETRYCOLLECTION ");  appendGeometryCollectionText(geometryCollection,level,writer);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYGON;    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    ArrayList<com.vividsolutions.jts.geom.Geometry> pointList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    for (    ShapeFileRecord record : input.records) {      recJTS=record.getGeometry().getJTSGeometries();switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}double minX=Double.MAX_VALUE;double maxX=Double.MIN_VALUE;double minY=Double.MAX_VALUE;double maxY=Double.MIN_VALUE;for (i=0; i < vertices.length; i++) {Coordinate coordinate=new Coordinate();coordinate.x=vertices[i][0];coordinate.y=vertices[i][1];pointList.add(factory.createPoint(coordinate));if (vertices[i][0] < minX) {minX=vertices[i][0];}if (vertices[i][0] > maxX) {maxX=vertices[i][0];}if (vertices[i][1] < minY) {minY=vertices[i][1];}if (vertices[i][1] > maxY) {maxY=vertices[i][1];}}Envelope env=new Envelope(minX,maxX,minY,maxY);com.vividsolutions.jts.geom.Geometry geom=factory.buildGeometry(pointList);DelaunayTriangulationBuilder vdb=new DelaunayTriangulationBuilder();vdb.setSites(geom);com.vividsolutions.jts.geom.Geometry vd=vdb.getTriangles(factory);for (int a=0; a < vd.getNumGeometries(); a++) {com.vividsolutions.jts.geom.Geometry g=vd.getGeometryN(a);if (g instanceof com.vividsolutions.jts.geom.Polygon) {com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int[] parts=new int[p.getNumInteriorRing() + 1];Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Exterior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}for (int b=0; b < p.getNumInteriorRing(); b++) {parts[b + 1]=pnts.size();buffCoords=p.getInteriorRingN(b).getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Interior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}}PointsList pl=new PointsList(pnts);whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());Object[] rowData=new Object[1];rowData[0]=new Double(record.getRecordNumber());output.addRecord(wbPoly);}}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  default String renderThrows(Generator gen,M model){  return gen.onEach(model.getExceptions()).collect(joinIfNotEmpty(COMMA_SPACE,"throws ",EMPTY));}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public SelectedTag(String tagText,Tag[] tags){  for (int i=0; i < tags.length; i++) {    if (tags[i].getReadable().equalsIgnoreCase(tagText) || tags[i].getIDStr().equalsIgnoreCase(tagText)) {      m_Selected=i;      m_Tags=tags;      return;    }  }  throw new IllegalArgumentException("Selected tag is not valid");}  }
class C{  public void onTrackballEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_TRACKBALL)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int source=event.getSource();    if ((source & InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {switch (action) {case MotionEvent.ACTION_DOWN:        if (mTrackballDown && !mTrackballUnhandled) {          problem("ACTION_DOWN but trackball is already down.");        } else {          mTrackballDown=true;          mTrackballUnhandled=false;        }      ensureHistorySizeIsZeroForThisAction(event);    ensurePointerCountIsOneForThisAction(event);  break;case MotionEvent.ACTION_UP:if (!mTrackballDown) {  problem("ACTION_UP but trackball is not down.");} else {  mTrackballDown=false;  mTrackballUnhandled=false;}ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);break;case MotionEvent.ACTION_MOVE:ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action " + MotionEvent.actionToString(action) + " for trackball event.");break;}if (mTrackballDown && event.getPressure() <= 0) {problem("Trackball is down but pressure is not greater than 0.");} else if (!mTrackballDown && event.getPressure() != 0) {problem("Trackball is up but pressure is not equal to 0.");}} else {problem("Source was not SOURCE_CLASS_TRACKBALL.");}}  finally {finishEvent();}}  }
class C{  public static void boundViewerWithContext(final ColumnViewer viewer,final IWorkbenchSite site,final String contextId){  viewer.getControl().addFocusListener(new ContextActivatingFocusListener(contextId,site));}  }
class C{  public TransactionSignature(ECKey.ECDSASignature signature,Transaction.SigHash mode,boolean anyoneCanPay){  super(signature.r,signature.s);  sighashFlags=calcSigHashValue(mode,anyoneCanPay);}  }
class C{  protected ForwardingJavaFileObject(F fileObject){  super(fileObject);}  }
class C{  @Override public void parseValue(String value){  setValue(value);}  }
class C{  public Event peekEvent(){  if (currentEvent == null) {    if (state != null) {      currentEvent=state.produce();    }  }  return currentEvent;}  }
class C{  public JobExecutionException(String msg){  super(msg);}  }
class C{  public boolean isInitiatorInVarray(VirtualArray varray,String wwn) throws InternalException {  List<Network> networks=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,varray.getId(),Network.class,"connectedVirtualArrays");  for (  Network network : networks) {    if (network == null || network.getInactive() == true) {      continue;    }    StringMap endpointMap=network.getEndpointsMap();    for (    String endpointKey : endpointMap.keySet()) {      String endpointValue=endpointMap.get(endpointKey);      if (wwn.equals(endpointValue) || wwn.equals(endpointKey)) {        return true;      }    }  }  return false;}  }
class C{  void notifyFailure(Throwable exception){synchronized (waitObject) {    isComplete=true;    if (exception instanceof MqttException) {      pendingException=(MqttException)exception;    } else {      pendingException=new MqttException(exception);    }    waitObject.notifyAll();    if (exception instanceof MqttException) {      lastException=(MqttException)exception;    }    if (listener != null) {      listener.onFailure(this,exception);    }  }}  }
class C{  public IntervalCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){  super(labelFormat,formatter);}  }
class C{  public K key(){  return key;}  }
class C{  @Interruptible public static void initializeAvailableByte(Object o){  if (!ADDRESS_BASED_HASHING)   getObjectHashCode(o);}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public OMAction(){  this.value=0;}  }
class C{  public long timestamp(){  return timestamp;}  }
