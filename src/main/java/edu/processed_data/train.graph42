class C{  public Street(String street,String lane){  this.street=street;  this.lane=lane;}  }
class C{  public long term(){  return term;}  }
class C{  private void displayMacroTargetNotConfiguredError(final MacroTargetNotConfiguredException ex){  final StringBuffer sb=new StringBuffer();  sb.append("<html><head></head><body>");  sb.append("<p><b><u>" + ex.getMessageTitle() + "</u></b></p>");  sb.append("<p>" + ex.getMessageBody() + "</p>");  sb.append("</body></html>");  isBackOrForwardInProgress=true;  browser.setText(sb.toString());}  }
class C{  private static void bindList(Class<?> itemType,Object target,Field field,ParameterAccess parameters){  String fieldName=field.getName();  Class<?> fieldType=field.getType();  List<ParameterAccess> itemParameters=createItemParameters(itemType,parameters);  Object array=Array.newInstance(itemType,itemParameters.size());  for (int i=0; i < itemParameters.size(); i++) {    Object itemValue=createAndBindItem(itemParameters.get(i),itemType);    Array.set(array,i,itemValue);  }  Object targetValue=convertArray(array,fieldType,itemType);  try {    field.setAccessible(true);    field.set(target,targetValue);  } catch (  Exception e) {    String message=String.format("Error binding list to field '%s'",fieldName);    throw new BindingException(message,e);  }}  }
class C{  @DebugLog public static boolean shouldShowHelp(Context context,String key,int version){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);  final int shownVersion=preferences.getInt(key,0);  return version > shownVersion;}  }
class C{  public T caseTestedProject(TestedProject object){  return null;}  }
class C{  public static Plane detectPlane(List<Vector3> points,float distanceThresh,int numIterations,int sufficientSupport){  int pointCount=points.size();  boolean[] picked=new boolean[pointCount];  List<Vector3> supportPointsMax=new LinkedList<>();  int supportMax=0;  while (numIterations > 0) {    numIterations--;    int[] randomPointIndices=new int[3];    for (int i=0; i < 3; i++) {      do {        randomPointIndices[i]=(int)(Math.random() * pointCount);      } while (picked[randomPointIndices[i]]);      picked[randomPointIndices[i]]=true;    }    picked[randomPointIndices[0]]=false;    picked[randomPointIndices[1]]=false;    picked[randomPointIndices[2]]=false;    Vector3 p0=points.get(randomPointIndices[0]);    Vector3 p1=points.get(randomPointIndices[1]);    Vector3 p2=points.get(randomPointIndices[2]);    Plane plane=Plane.createHessePlane(p0,p1,p2);    computeSupport(plane,points,distanceThresh);    int support=supportingPoints.size();    if (support > supportMax) {      supportMax=support;      supportPointsMax=supportingPoints;    }    if (supportMax >= sufficientSupport) {      break;    }  }  Plane plane=planeRegression(supportPointsMax);  computeSupport(plane,points,distanceThresh);  return (plane);}  }
class C{  public static void initializeActionIntent(){  mSimpleLastFMIntent=null;  mSimpleLastFMIntent=new Intent("com.adam.aslfms.notify.playstatechanged");}  }
class C{  public void dispose(){  setOutput(null);  super.dispose();}  }
class C{  public void replaceStopFacilityInAllRoutes(TransitStopFacility toReplace,TransitStopFacility replaceWith){  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      replaceStopFacilityInRoute(route,toReplace,replaceWith);    }  }}  }
class C{  public static IndexWriter createIndexWriter(String indexPath,boolean create,AnalyzerType analyzer) throws IOException {  return createIndexWriter(FSDirectory.open(Paths.get(indexPath)),create,analyzer);}  }
class C{  public XRTreeFrag(Expression expr){  super(expr);}  }
class C{  public T remove(long key){  for (long i=slot(hash(key),mask); ; i=nextSlot(i,mask)) {    final T previous=values.set(i,null);    if (previous == null) {      return null;    } else     if (keys.get(i) == key) {      --size;      for (long j=nextSlot(i,mask); used(j); j=nextSlot(j,mask)) {        removeAndAdd(j);      }      return previous;    } else {      values.set(i,previous);    }  }}  }
class C{  public void readMapEnd() throws IOException {  int code=_offset < _length ? (_buffer[_offset++] & 0xff) : read();  if (code != 'Z')   throw error("expected end of map ('Z') at '" + codeName(code) + "'");}  }
class C{  protected void animateProperty(Property property,float start,float end,long duration){  if (duration > 0) {    if (animationIsRunning()) {      cancelAnimation(this,property);    }    addToAnimation(this,property,start,end,duration,0);  }}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,SimpleTrigger struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.isSetTriggerId()) {    oprot.writeFieldBegin(TRIGGER_ID_FIELD_DESC);    oprot.writeI32(struct.triggerId);    oprot.writeFieldEnd();  }  if (struct.triggerName != null) {    oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);    oprot.writeString(struct.triggerName);    oprot.writeFieldEnd();  }  if (struct.isSetCreateTime()) {    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);    oprot.writeI64(struct.createTime);    oprot.writeFieldEnd();  }  if (struct.isSetOperatorId()) {    oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);    oprot.writeI32(struct.operatorId);    oprot.writeFieldEnd();  }  if (struct.triggerType != null) {    if (struct.isSetTriggerType()) {      oprot.writeFieldBegin(TRIGGER_TYPE_FIELD_DESC);      oprot.writeString(struct.triggerType);      oprot.writeFieldEnd();    }  }  if (struct.isSetBeginTime()) {    oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);    oprot.writeI64(struct.beginTime);    oprot.writeFieldEnd();  }  if (struct.isSetEndTime()) {    oprot.writeFieldBegin(END_TIME_FIELD_DESC);    oprot.writeI64(struct.endTime);    oprot.writeFieldEnd();  }  if (struct.isSetTimes()) {    oprot.writeFieldBegin(TIMES_FIELD_DESC);    oprot.writeI32(struct.times);    oprot.writeFieldEnd();  }  if (struct.isSetExecuteInterval()) {    oprot.writeFieldBegin(EXECUTE_INTERVAL_FIELD_DESC);    oprot.writeI32(struct.executeInterval);    oprot.writeFieldEnd();  }  if (struct.intervalUnit != null) {    if (struct.isSetIntervalUnit()) {      oprot.writeFieldBegin(INTERVAL_UNIT_FIELD_DESC);      oprot.writeString(struct.intervalUnit);      oprot.writeFieldEnd();    }  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  public int compareTo(Card that){  if (this.suit < that.suit) {    return -1;  }  if (this.suit > that.suit) {    return 1;  }  if (this.rank < that.rank) {    return -1;  }  if (this.rank > that.rank) {    return 1;  }  return 0;}  }
class C{  public List<Protos.Resource> consumeCpus(Double value){  return consumeScalarResource(RESOURCE_CPUS,value);}  }
class C{  synchronized boolean isAirplaneModeOn(){  return mAirplaneModeOn;}  }
class C{  public static void loadPlugins() throws OpenStegoException {  List<String> pluginList=null;  OpenStegoPlugin plugin=null;  InputStream is=null;  try {    is=plugins.getClass().getResourceAsStream("/OpenStegoPlugins.internal");    pluginList=StringUtil.getStringLines(new String(CommonUtil.getStreamBytes(is)));    is=plugins.getClass().getResourceAsStream("/OpenStegoPlugins.external");    if (is != null) {      pluginList.addAll(StringUtil.getStringLines(new String(CommonUtil.getStreamBytes(is))));    }    for (int i=0; i < pluginList.size(); i++) {      plugin=(OpenStegoPlugin)Class.forName(pluginList.get(i)).newInstance();      plugins.add(plugin);      pluginsMap.put(plugin.getName().toUpperCase(),plugin);    }  } catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  public void addRow(double min,double pref,double max,Priority vgrow){  RowConstraints rc=new RowConstraints(min,pref,max);  rc.setVgrow(vgrow);  getRowConstraints().add(rc);}  }
class C{  @Override TemplateElement[] accept(Environment env) throws IOException, TemplateException {  Context bodyContext=new Context(env);  env.invokeNestedContent(bodyContext);  return null;}  }
class C{  final boolean complete(long timeoutMillis) throws InterruptedException, ExecutionException {  long totalWait=timeoutMillis;  if (totalWait <= 0)   totalWait=1000;synchronized (this) {    completer=Thread.currentThread();  }  final long start=System.currentTimeMillis();  try {    while ((System.currentTimeMillis() - start) < totalWait) {      if (Thread.interrupted())       throw new InterruptedException();      Throwable t=getLastError();      if (t != null) {        throw executionException(t);      }      if (!hasActiveTasks()) {        break;      }synchronized (completer) {        if (!completerNotify) {          try {            completer.wait(totalWait);          } catch (          InterruptedException e) {            if (!completerNotify) {              throw e;            }          }        }        completerNotify=false;      }    }  }  finally {synchronized (this) {      completer=null;    }  }  return ((System.currentTimeMillis() - start) < totalWait);}  }
class C{  public void drawJPEG(InputStream inputStream,int length,int width,int height,String name) throws IOException {  if (inputStream != null) {    try {      JPEGImage image=new JPEGImage(inputStream,length);      DefineBits defineBits=new DefineBits(Tag.stagDefineBitsJPEG2);      defineBits.data=image.getData();      defineTags.defineBitsJPEG2(defineBits);      DefineShape ds3=ImageShapeBuilder.buildImage(defineBits,width,height);      defineTags.defineShape3(ds3);      applyBounds(ds3.bounds.xMin,ds3.bounds.yMin,ds3.bounds.xMax,ds3.bounds.yMax);      PlaceObject po2=new PlaceObject(ds3,depth++);      po2.setMatrix(MatrixBuilder.build(graphicContext.getTransform()));      po2.setName(name);      defineTags.placeObject2(po2);    }  finally {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  void appendOperationParameters(Document xmldoc,Element parent,LocalizerServiceLocal localizer,TechnicalProductOperation technicalProductOperation){  List<OperationParameter> parameters=technicalProductOperation.getParameters();  for (  OperationParameter op : parameters) {    Element opNode=xmldoc.createElement("OperationParameter");    opNode.setAttribute("id",op.getId());    opNode.setAttribute("type",op.getType().name());    opNode.setAttribute("mandatory",String.valueOf(op.isMandatory()));    parent.appendChild(opNode);    appendLocalizedValues(xmldoc,localizer,opNode,LocalizedObjectTypes.TECHNICAL_PRODUCT_OPERATION_PARAMETER_NAME,op.getKey(),"LocalizedName");  }}  }
class C{  final public int lastIndexOf(final CharSequence pattern){  return lastIndexOf(pattern,length());}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  public void applyAngularImpulse(float impulse){  if (m_type != BodyType.DYNAMIC) {    return;  }  if (isAwake() == false) {    setAwake(true);  }  m_angularVelocity+=m_invI * impulse;}  }
class C{  public void ensureAtLeast(AxisSpace space){  this.top=Math.max(this.top,space.top);  this.bottom=Math.max(this.bottom,space.bottom);  this.left=Math.max(this.left,space.left);  this.right=Math.max(this.right,space.right);}  }
class C{  public void testUserTxTimeout() throws Exception {  final Ignite ignite=grid(0);  final IgniteCache<Object,Object> cache=ignite.getOrCreateCache(CACHE_NAME);  checkImplicitTxTimeout(cache);  checkExplicitTxTimeout(cache,ignite);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  protected boolean processAddedAssignments(Collection<? extends AbstractClassSensorAssignment<?>> classSensorAssignments){  boolean added=false;  for (  AbstractClassSensorAssignment<?> assignment : classSensorAssignments) {    Collection<? extends ImmutableClassType> classTypes=classCacheSearchNarrower.narrowByClassSensorAssignment(getClassCache(),assignment);    IInstrumentationApplier instrumentationApplier=configurationResolver.getInstrumentationApplier(assignment,getEnvironment());    Collection<? extends ImmutableClassType> instrumentedClassTypes=getClassCache().getInstrumentationService().addInstrumentationPoints(classTypes,getAgentConfiguration(),Collections.singleton(instrumentationApplier));    added|=CollectionUtils.isNotEmpty(instrumentedClassTypes);  }  return added;}  }
class C{  public final double doOperation() throws OperatorFailedException {  double total=0.0;  for (int i=0; i < parameter.getDimension(); i++) {    total+=parameter.getParameterValue(i);  }  double mean=total / parameter.getDimension();  double scaleFactor=getRandomScaleFactor();  double logq=parameter.getDimension() * Math.log(1.0 / scaleFactor);  for (int i=0; i < parameter.getDimension(); i++) {    double newScalar=(parameter.getParameterValue(i) - mean) * scaleFactor + mean;    if (newScalar < parameter.getBounds().getLowerLimit(i) || newScalar > parameter.getBounds().getUpperLimit(i)) {      throw new OperatorFailedException("Proposed value out of bounds");    }    parameter.setParameterValue(i,newScalar);  }  return logq;}  }
class C{  public void damage(){  put("amount",0);}  }
class C{  public void initialize(){  jobServices.addService(ThreadFactory.class,getThreads());  jobServices.addService(ScheduledExecutorService.class,getScheduler());  invokeAction(null);}  }
class C{  public static int max(int a,final int b,final int c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public IsActiveException(){  super();}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  throw new UnsupportedOperationException();}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private boolean startsWith(String value) throws IOException {  int valueLen=value.length();  readIfNeeded(valueLen);  if (_len >= 0 && _pos + valueLen > _len) {    return false;  }  for (int i=0; i < valueLen; i++) {    char ch1=Character.toLowerCase(value.charAt(i));    char ch2=Character.toLowerCase(_working[_pos + i]);    if (ch1 != ch2) {      return false;    }  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SEXPERIMENT__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public LZ5(){  super(30,2,21,26,1);}  }
class C{  private static void addNonBlank(final String string,final List<String> strings){  if (!StringUtils.isBlank(string))   strings.add(string);}  }
class C{  public ChangePlayerOutfitAction(Outfit outfit,boolean addOutfit,boolean temporaryOutfit){  this.outfitChange=checkNotNull(outfit);  this.addOutfit=addOutfit;  this.temporaryOutfit=temporaryOutfit;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public ValidateQueryRequest source(byte[] source,int offset,int length){  return source(new BytesArray(source,offset,length));}  }
class C{  public FilterExprIterator(){  super(null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int[] sortWithNoMissingValues(double[] array){  int[] index=initialIndex(array.length);  if (array.length > 1) {    quickSort(array,index,0,array.length - 1);  }  return index;}  }
class C{  public void addChainDownloadStartedEventListener(Executor executor,ChainDownloadStartedEventListener listener){  chainDownloadStartedEventListeners.add(new ListenerRegistration(listener,executor));}  }
class C{  public ScriptThread(final ScriptEngine engine,final File selectedFile,final List<Pair<String,Object>> bindings){  m_engine=engine;  m_selectedFile=selectedFile;  m_pairList=bindings;}  }
class C{  public static double pdf(double x,double k,double theta){  if (x < 0) {    return 0.;  }  if (x == 0) {    return (k == 1.) ? theta : 0;  }  if (k == 1.) {    return Math.exp(-x * theta) * theta;  }  final double xt=x * theta;  return (xt == Double.POSITIVE_INFINITY) ? 0. : Math.exp((k - 1.0) * Math.log(xt) - xt - logGamma(k)) * theta;}  }
class C{  public static void runUpdateVirtualNasAssociationsProcess(Collection<StoragePort> ports,Collection<StoragePort> remPorts,DbClient dbClient){  try {    List<VirtualNAS> modifiedServers=new ArrayList<VirtualNAS>();    if (ports != null && !ports.isEmpty()) {      Map<String,List<NetworkLite>> vNasNetworkMap=getVNasNetworksMap(ports,dbClient);      if (!vNasNetworkMap.isEmpty()) {        for (        Map.Entry<String,List<NetworkLite>> vNasEntry : vNasNetworkMap.entrySet()) {          String nativeId=vNasEntry.getKey();          VirtualNAS vNas=findvNasByNativeId(nativeId,dbClient);          if (vNas != null) {            for (            NetworkLite network : vNasEntry.getValue()) {              Set<String> varraySet=new HashSet<String>(network.getAssignedVirtualArrays());              if (vNas.getAssignedVirtualArrays() == null) {                vNas.setAssignedVirtualArrays(new StringSet());              }              vNas.getAssignedVirtualArrays().addAll(varraySet);              _log.info("found virtual NAS: {} and varrays: {}",vNas.getNasName(),varraySet.toString());            }            modifiedServers.add(vNas);          }        }      }    }    if (!modifiedServers.isEmpty()) {      dbClient.persistObject(modifiedServers);    }  } catch (  Exception e) {    _log.error("Update Port Association process failed",e);  }}  }
class C{  private double round(double data){  return Math.rint(data / m_Precision) * m_Precision;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(", name: ");  result.append(name);  result.append(", typingStrategy: ");  result.append(typingStrategy);  result.append(')');  return result.toString();}  }
class C{  public void endVisit(Block node){}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=0;  for (int i=0; (i < args.length) && (cost < thresh); i++) {    cost+=args[i].costInline(thresh,env,ctx);  }  return cost;}  }
class C{  @Override public TransferResult<V,S> visitFieldAccess(FieldAccessNode n,TransferInput<V,S> p){  TransferResult<V,S> result=super.visitFieldAccess(n,p);  assert !result.containsTwoStores();  S store=result.getRegularStore();  if (store.isFieldInitialized(n.getElement()) && n.getReceiver() instanceof ThisLiteralNode) {    AnnotatedTypeMirror fieldAnno=analysis.getTypeFactory().getAnnotatedType(n.getElement());    if (fieldAnno.hasAnnotation(atypeFactory.getFieldInvariantAnnotation())) {      AnnotationMirror inv=atypeFactory.getFieldInvariantAnnotation();      V oldResultValue=result.getResultValue();      V refinedResultValue=analysis.createSingleAnnotationValue(inv,oldResultValue.getUnderlyingType());      V newResultValue=refinedResultValue.mostSpecific(oldResultValue,null);      result.setResultValue(newResultValue);    }  }  return result;}  }
class C{  public void flush() throws java.io.IOException {  flushBuffer();  m_os.flush();}  }
class C{  public boolean isThemeConstant(String constantName,boolean def){  String c=getThemeConstant(constantName,null);  if (c == null) {    return def;  }  return c.equalsIgnoreCase("true") || c.equals("1");}  }
class C{  protected void processInContent(String location,FragmentBuilder builder,int hashCode){  if (builder.isInBufferActive(hashCode)) {    processIn(location,null,builder.getInData(hashCode));  } else   if (log.isLoggable(Level.FINEST)) {    log.finest("processInContent: location=[" + location + "] hashCode="+ hashCode+ " in buffer is not active");  }}  }
class C{  public DelegateToEdgeTransformer(Function<? super E,? extends Number> delegate){  this.delegate=delegate;}  }
class C{  public void componentHidden(ComponentEvent e){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void insertTurnAfter(GameTurn turn,int index){  if ((index + 1) >= turnVector.size()) {    turnVector.add(turn);  } else {    turnVector.insertElementAt(turn,index + 1);  }}  }
class C{  public PredefinedTypes(BuiltInTypeScope builtInTypeScope,GlobalObjectScope globalObjectScope,VirtualBaseTypeScope virtualBaseTypeScope){  super();  this.builtInTypeScope=builtInTypeScope;  this.globalObjectScope=globalObjectScope;  this.virtualBaseTypeScope=virtualBaseTypeScope;}  }
class C{  public static int bytesToShortLittleEndian(final byte[] vals,final int from){  return ((vals[from + 1] & 0xFF) << 8) + (vals[from] & 0xFF);}  }
class C{  public static void registerPlayer(final Player player,final String zoneName){  registerPlayer(player,SingletonRepository.getRPWorld().getZone(zoneName));}  }
class C{  public void skipWhiteSpace(){  int len=orig.length;  while (index < len) {switch (orig[index]) {case ' ':case '\t':case '\r':case '\n':      index++;    break;default :  return;}}}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/reset") public Response resetRootCatalogCategory(@DefaultValue("") @QueryParam(SearchConstants.TENANT_ID_PARAM) String tenantId){  StorageOSUser user=getUserFromContext();  if (StringUtils.isBlank(tenantId)) {    tenantId=user.getTenantId();  }  verifyAuthorizedInTenantOrg(uri(tenantId),user);  try {    catalogCategoryManager.restoreDefaultCatalog(uri(tenantId));  } catch (  IOException e) {    log.error("Failed to reset catalog",e);    return Response.serverError().build();  }  return Response.ok().build();}  }
class C{  public String sqlMetadata_viewNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_viewNames(catalogName,schemaName);}  }
class C{  private void rehash(){  java.util.ArrayList<E> list=setToList();  capacity<<=1;  table=new LinkedList[capacity];  size=0;  for (  E element : list) {    add(element);  }}  }
class C{  public A first(){  return a;}  }
class C{  private DefaultMutableTreeNode iparent(int AD_Client_ID,int M_Product_ID,int PP_Product_BOM_ID){  DefaultMutableTreeNode parent=new DefaultMutableTreeNode(Integer.toString(M_Product_ID) + "|" + Integer.toString(PP_Product_BOM_ID));  String sql="SELECT PP_Product_BOMLine_ID FROM PP_Product_BOMLine" + " WHERE IsActive=? AND AD_Client_ID=? AND M_Product_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,m_trxName);    DB.setParameters(pstmt,new Object[]{true,AD_Client_ID,M_Product_ID});    rs=pstmt.executeQuery();    while (rs.next()) {      if (rs.getRow() > 1) {        tableproduct.clear();        tableproduct.put(M_Product_ID,PP_Product_BOM_ID);      }      DefaultMutableTreeNode bom=icomponent(AD_Client_ID,rs.getInt(1),M_Product_ID,parent);      if (bom != null) {        parent.add(bom);      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return parent;}  }
class C{  public NoSubscriptionServersAvailableException(Throwable cause){  super(cause);}  }
class C{  public BitSet(BitSetMapping map){  int length=map.getMappingSize();  vector=new BitVector(length);  this.map=map;}  }
class C{  private void failTask(ReleaseIPTask patchState,Throwable t,Operation postOperation){  ServiceUtils.logSevere(this,t);  sendPatch(patchState,postOperation);}  }
class C{  protected void clearStableIdMap(){  mIdMap.clear();}  }
class C{  public <D>AttributeMetadata<D> bind(ElementKey<?,?> parent,AttributeKey<D> attribute,MetadataContext context){  AttributeMetadataRegistry attRegistry=getAttribute(attribute);  return (attRegistry == null) ? null : attRegistry.bind(parent,attribute,context);}  }
class C{  public PlanMutateTimeAllocationSimplified(final StageActivityTypes blackList,final double mutationRange,boolean affectingDuration,final Random random){  this.blackList=blackList;  this.mutationRange=mutationRange;  this.affectingDuration=affectingDuration;  this.random=random;}  }
class C{  public Object compute(Task task){  return task.run();}  }
class C{  public Boolean isNpivTemporaryDisabled(){  return npivTemporaryDisabled;}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public static CompilationUnit convertCompilationUnit(int level,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration,Map options,boolean isResolved,org.eclipse.jdt.internal.core.CompilationUnit workingCopy,int reconcileFlags,IProgressMonitor monitor){  ASTConverter converter=new ASTConverter(options,isResolved,monitor);  AST ast=AST.newAST(level);  int savedDefaultNodeFlag=ast.getDefaultNodeFlag();  ast.setDefaultNodeFlag(ASTNode.ORIGINAL);  BindingResolver resolver=null;  if (isResolved) {    resolver=new DefaultBindingResolver(compilationUnitDeclaration.scope,workingCopy.owner,new DefaultBindingResolver.BindingTables(),false,true);    ((DefaultBindingResolver)resolver).isRecoveringBindings=(reconcileFlags & ICompilationUnit.ENABLE_BINDINGS_RECOVERY) != 0;    ast.setFlag(AST.RESOLVED_BINDINGS);  } else {    resolver=new BindingResolver();  }  ast.setFlag(reconcileFlags);  ast.setBindingResolver(resolver);  converter.setAST(ast);  CompilationUnit unit=converter.convert(compilationUnitDeclaration,workingCopy.getContents());  unit.setLineEndTable(compilationUnitDeclaration.compilationResult.getLineSeparatorPositions());  unit.setTypeRoot(workingCopy.originalFromClone());  ast.setDefaultNodeFlag(savedDefaultNodeFlag);  return unit;}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,boolean averaging,boolean ignore_missing,boolean ignore_self_distances){  this(graph,new UnweightedShortestPath<V,E>(graph),averaging,ignore_missing,ignore_self_distances);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.034 -0500",hash_original_method="0C976477F7A22AE527BAA6379E244E6F",hash_generated_method="B0673D9789C64E640B95006E1104E706") public SIPHeader parse() throws ParseException {  SupportedList supportedList=new SupportedList();  if (debug)   dbg_enter("SupportedParser.parse");  try {    headerName(TokenTypes.SUPPORTED);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      Supported supported=new Supported();      supported.setHeaderName(SIPHeaderNames.SUPPORTED);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      supported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      supportedList.add(supported);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        supported=new Supported();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        supported.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        supportedList.add(supported);      }    }  }  finally {    if (debug)     dbg_leave("SupportedParser.parse");  }  return supportedList;}  }
class C{  public String initializationMethodTipText(){  return "The initialization method to use. Random, k-means++, Canopy or farthest first";}  }
class C{  public int length(){  return 0;}  }
class C{  public void toggleQuality() throws IOException {  writeCode(TOGGLE_QUALITY);}  }
class C{  public int validateAllSections(jmri.util.JmriJFrame frame,LayoutEditor lePanel){  List<String> list=getSystemNameList();  int numSections=0;  int numErrors=0;  if (list.size() <= 0) {    return -2;  }  for (int i=0; i < list.size(); i++) {    String s=getBySystemName(list.get(i)).validate(lePanel);    if (!s.equals("")) {      log.error(s);      numErrors++;    }    numSections++;  }  log.debug("Validated {} Sections - {} errors or warnings.",numSections,numErrors);  return numErrors;}  }
class C{  private void siftUp(int k,RunnableScheduledFuture<?> key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture<?> e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.994 -0500",hash_original_method="AAE83DB2AD919861A82743950CD3FB58",hash_generated_method="0F979C24F235B4A55DE46CF03C3C005E") @DSSafe(DSCat.SAFE_OTHERS) public static String sha256Hex(InputStream data) throws IOException {  return Hex.encodeHexString(sha256(data));}  }
class C{  private void adjustFocus(boolean inWindow){  if ((component != null) && component.isEnabled() && component.isRequestFocusEnabled()) {    if (inWindow) {      component.requestFocusInWindow();    } else {      component.requestFocus();    }  }}  }
class C{  public RaftParameters withMaximumAppendingSize(int maxAppendingSize){  this.maxAppendingSize=maxAppendingSize;  return this;}  }
class C{  public synchronized boolean isValid(){  return CloseableReference.isValid(mPooledByteBufferRef) || mInputStreamSupplier != null;}  }
class C{  public Delta delta(DiscoveryNodes other){  List<DiscoveryNode> removed=new ArrayList<>();  List<DiscoveryNode> added=new ArrayList<>();  for (  DiscoveryNode node : other) {    if (!this.nodeExists(node.id())) {      removed.add(node);    }  }  for (  DiscoveryNode node : this) {    if (!other.nodeExists(node.id())) {      added.add(node);    }  }  DiscoveryNode previousMasterNode=null;  DiscoveryNode newMasterNode=null;  if (masterNodeId != null) {    if (other.masterNodeId == null || !other.masterNodeId.equals(masterNodeId)) {      previousMasterNode=other.masterNode();      newMasterNode=masterNode();    }  }  return new Delta(previousMasterNode,newMasterNode,localNodeId,Collections.unmodifiableList(removed),Collections.unmodifiableList(added));}  }
class C{  public PointCloud3D copy(){  PointCloud3D c=new PointCloud3D(points.size());  for (  ReadonlyVec3D p : points) {    c.addPoint(p.copy());  }  return c;}  }
class C{  public int[] checkSumRange(){synchronized (this.checksumLock) {    if (this.checksumRange != null && checksumRange.length > 0) {      return Arrays.copyOf(this.checksumRange,this.checksumRange.length);    }    return new int[0];  }}  }
class C{  public String createPrefetchSelect(){  StringBuffer sb=new StringBuffer();  if (key.isPrimaryKey())   sb.append("SELECT * FROM `"); else   sb.append("SELECT count(*) FROM `");  sb.append(table.getSchema());  sb.append("`.`");  sb.append(table.getName());  sb.append("`");  sb.append(" FORCE INDEX (").append(key.getName()).append(")");  sb.append(" WHERE ");  for (int i=0; i < key.getColumns().size(); i++) {    Column col=key.getColumns().get(i);    if (i > 0)     sb.append(" AND ");    sb.append(col.getName());    sb.append("=?");  }  sb.append(String.format(" /* TUNGSTEN PREFETCH: schema=%s table=%s, key=%s */",table.getSchema(),table.getName(),key.getName()));  return sb.toString();}  }
class C{  private boolean trackedThreadUncaughtException(Thread t,Throwable e){  getLogger().error("Uncaught exception in thread " + t.getName(),e);  return true;}  }
class C{  public final void transform(Vec3D t){  float x, y, z;  x=(float)(m00 * t.x + m01 * t.y + m02 * t.z);  y=(float)(m10 * t.x + m11 * t.y + m12 * t.z);  z=(float)(m20 * t.x + m21 * t.y + m22 * t.z);  t.set(x,y,z);}  }
class C{  public SortingParams by(final byte[] pattern){  params.add(BY.raw);  params.add(pattern);  return this;}  }
class C{  private void createHttpClient(){  HttpClientOptions options=new HttpClientOptions().setDefaultHost(rule.getHost()).setDefaultPort(rule.getPort()).setMaxPoolSize(5000).setKeepAlive(true).setPipelining(false);  if (rule.getScheme().equals("https")) {    options.setSsl(true).setVerifyHost(false).setTrustAll(true);  }  client=vertx.createHttpClient(options);}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  private void createNewPlayedEntry(final SQLiteDatabase database,final long songId){  float newScore=getScoreMultiplierForWeek(0);  int newPlayCount=1;  final ContentValues values=new ContentValues(3);  values.put(SongPlayCountColumns.ID,songId);  values.put(SongPlayCountColumns.PLAYCOUNTSCORE,newScore);  values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);  values.put(getColumnNameForWeek(0),newPlayCount);  database.insert(SongPlayCountColumns.NAME,null,values);}  }
class C{  public StochasticGradientBoosting(Regressor weakLearner,int maxIterations,double learningRate,double trainingPortion){  this(null,weakLearner,maxIterations,learningRate,trainingPortion);}  }
class C{  @Override protected void onStartLoading(){  if (mCursor != null) {    deliverResult(mCursor);  }  if (takeContentChanged() || mCursor == null) {    forceLoad();  }}  }
class C{  protected void updateMatrix(int size,double[] scratch,DBIDArrayIter ij,double[] bestd,int[] besti,PointerHierarchyRepresentationBuilder builder,double mindist,int x,int y,final int sizex,final int sizey){  final int xbase=AGNES.triangleSize(x), ybase=AGNES.triangleSize(y);  int j=0;  for (; j < y; j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    final int yb=ybase + j;    final double d=scratch[yb]=linkage.combine(sizex,scratch[xbase + j],sizey,scratch[yb],sizej,mindist);    updateCache(size,scratch,bestd,besti,x,y,j,d);  }  j++;  int jbase=AGNES.triangleSize(j);  for (; j < x; jbase+=j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    final int jb=jbase + y;    final double d=scratch[jb]=linkage.combine(sizex,scratch[xbase + j],sizey,scratch[jb],sizej,mindist);    updateCache(size,scratch,bestd,besti,x,y,j,d);  }  jbase+=j++;  for (; j < size; jbase+=j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    final double d=scratch[jbase + y]=linkage.combine(sizex,scratch[jbase + x],sizey,scratch[jbase + y],sizej,mindist);    updateCache(size,scratch,bestd,besti,x,y,j,d);  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  void dispose(){  if (popup != null) {    popup.removeAll();  }  popup=null;}  }
class C{  @Override public void doSimStep(final double time){  run(time);  this.printSimLog(time);}  }
class C{  protected void indexPoints(InputStream is,long ptr,List<Entry> entries){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  int result;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int shapeType;  int recBufSize=20;  byte recBuf[]=new byte[recBufSize];  double x=0;  double y=0;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Found " + nRecords + " records");          logger.fine("recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        shapeType=readLEInt(recBuf,0);        if (shapeType != SHAPE_TYPE_NULL) {          x=readLEDouble(recBuf,4);          y=readLEDouble(recBuf,12);        }        ptr+=recLengthBytes + 8;        Entry entry=new Entry(x,y,x,y,(int)recOffset);        entries.add(entry);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  public static byte[] randomSalt(){  byte[] salt=new byte[SALT_LENGTH];  secureRandom.nextBytes(salt);  return salt;}  }
class C{  public final double error(){  return 1.0 / Math.sqrt(n);}  }
class C{  public static String now(){  Calendar cal=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT_NOW);  return sdf.format(cal.getTime());}  }
class C{  public Writer buildIndexDeletionWriter(AbstractSession session,String key,Writer writer,boolean isUniqueSetOnField){  String indexName=buildIndexName(getName(),key,session.getPlatform().getIndexNamePrefix(isUniqueSetOnField),session.getPlatform().getMaxIndexNameSize(),session.getPlatform());  IndexDefinition index=new IndexDefinition();  index.setName(indexName);  index.setTargetTable(getFullName());  index.buildDeletionWriter(session,writer);  return writer;}  }
class C{  public ExpiryTask addExpiryTask(ExpiryTask task){  try {    if (logger.isTraceEnabled()) {      logger.trace(LocalizedMessage.create(LocalizedStrings.ExpirationScheduler_SCHEDULING__0__TO_FIRE_IN__1__MS,new Object[]{task,Long.valueOf(task.getExpiryMillis())}));    }    timer.schedule(task,task.getExpiryMillis());  } catch (  EntryNotFoundException e) {    return null;  }catch (  IllegalStateException e) {    return null;  }  return task;}  }
class C{  private void decodeTonesFrequency(int chNum,boolean bandHasTones[]){  WavesData dst[]=ctx.channels[chNum].tonesInfo;  WavesData ref[]=ctx.channels[0].tonesInfo;  if (chNum == 0 || !br.readBool()) {    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb] || dst[sb].numWavs == 0) {        continue;      }      int iwav=dst[sb].startIndex;      boolean direction=(dst[sb].numWavs > 1 ? br.readBool() : false);      if (direction) {        if (dst[sb].numWavs > 0) {          ctx.wavesInfo.waves[iwav + dst[sb].numWavs - 1].freqIndex=br.read(10);        }        for (int i=dst[sb].numWavs - 2; i >= 0; i--) {          int nbits=avLog2(ctx.wavesInfo.waves[iwav + i + 1].freqIndex) + 1;          ctx.wavesInfo.waves[iwav + i].freqIndex=br.read(nbits);        }      } else {        for (int i=0; i < dst[sb].numWavs; i++) {          if (i == 0 || ctx.wavesInfo.waves[iwav + i - 1].freqIndex < 512) {            ctx.wavesInfo.waves[iwav + i].freqIndex=br.read(10);          } else {            int nbits=avLog2(1023 - ctx.wavesInfo.waves[iwav + i - 1].freqIndex) + 1;            ctx.wavesInfo.waves[iwav + i].freqIndex=br.read(nbits) + 1024 - (1 << nbits);          }        }      }    }  } else {    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb] || dst[sb].numWavs == 0) {        continue;      }      int iwav=ref[sb].startIndex;      int owav=dst[sb].startIndex;      for (int i=0; i < dst[sb].numWavs; i++) {        int delta=tone_vlc_tabs[6].getVLC2(br);        delta=signExtend(delta,8);        int pred=(i < ref[sb].numWavs ? ctx.wavesInfo.waves[iwav + i].freqIndex : (ref[sb].numWavs > 0 ? ctx.wavesInfo.waves[iwav + ref[sb].numWavs - 1].freqIndex : 0));        ctx.wavesInfo.waves[owav + i].freqIndex=(pred + delta) & 0x3FF;      }    }  }}  }
class C{  public ComposableBody build(){  if (map == null) {    map=new HashMap<BodyQName,String>();  }  if (payloadXML == null) {    payloadXML="";  }  return new ComposableBody(map,payloadXML);}  }
class C{  public boolean isContains(){  return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && matrix[Location.EXTERIOR][Location.INTERIOR] == Dimension.FALSE && matrix[Location.EXTERIOR][Location.BOUNDARY] == Dimension.FALSE;}  }
class C{  public static void writeField(final Object target,final String fieldName,final Object value,final boolean forceAccess) throws IllegalAccessException {  if (target == null) {    throw new IllegalArgumentException("target object must not be null");  }  Class<?> cls=target.getClass();  Field field=FieldUtils.getField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "."+ fieldName);  }  FieldUtils.writeField(field,target,value);}  }
class C{  public static final void checkToken(String token) throws ParseException {  if (token == null || token.length() == 0) {    throw new ParseException("null or empty token",-1);  } else {    for (int i=0; i < token.length(); ++i) {      if (!LexerCore.isTokenChar(token.charAt(i))) {        throw new ParseException("Invalid character(s) in string (not allowed in 'token')",i);      }    }  }}  }
class C{  private void updateStoragePortsForAddInitiators(ExportMaskAddInitiatorCompleter taskCompleter,StorageSystem system,ExportMask exportMask,List<com.emc.storageos.db.client.model.Initiator> initiatorList,List<com.emc.storageos.db.client.model.StoragePort> selectedPortsForMask,URI virtualArray,ExportPathParams pathParams){  List<URI> portUris=new ArrayList<>();  for (  com.emc.storageos.db.client.model.StoragePort port : selectedPortsForMask) {    portUris.add(port.getId());  }  taskCompleter.setTargetURIs(portUris);  List<URI> initiatorUris=URIUtil.toUris(initiatorList);  for (  URI initiatorUri : initiatorUris) {    exportMask.removeZoningMapEntry(initiatorUri.toString());  }  Map<URI,List<URI>> assignments=blockScheduler.assignSelectedStoragePorts(system,selectedPortsForMask,virtualArray,initiatorList,pathParams,exportMask.getZoningMap());  exportMask.addZoningMap(BlockStorageScheduler.getZoneMapFromAssignments(assignments));  dbClient.updateObject(exportMask);}  }
class C{  private int updateSelectedKeys(){  int entries=pollWrapper.updated;  int numKeysUpdated=0;  for (int i=0; i < entries; i++) {    int nextFD=pollWrapper.getDescriptor(i);    SelectionKeyImpl ski=fdToKey.get(Integer.valueOf(nextFD));    if (ski != null) {      int rOps=pollWrapper.getReventOps(i);      if (selectedKeys.contains(ski)) {        if (ski.channel.translateAndSetReadyOps(rOps,ski)) {          numKeysUpdated++;        }      } else {        ski.channel.translateAndSetReadyOps(rOps,ski);        if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {          selectedKeys.add(ski);          numKeysUpdated++;        }      }    }  }  return numKeysUpdated;}  }
class C{  public static boolean isSpecification(EObject property){  EObject current=property;  while (current != null) {    if (current instanceof FDPropertyDecl)     return true;    if (current instanceof FDProperty)     return false;    current=current.eContainer();  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.SWITCH_STATEMENT__EXPRESSION:    return getExpression();case N4JSPackage.SWITCH_STATEMENT__CASES:  return getCases();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  String filterSize="3 x 3";  int numPixelsInFilter;  boolean reflectAtBorders=false;  int[] dX;  int[] dY;  double[] maskX;  double[] maskY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSize=args[i];    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.endsWith("3 x 3")) {      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      maskX=new double[]{1,2,1,0,-1,-2,-1,0};      maskY=new double[]{1,0,-1,-2,-1,0,1,2};    } else {      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};      maskX=new double[]{2,1,0,-1,-2,3,2,0,-2,-3,4,3,0,-3,-4,3,2,0,-2,-3,2,1,0,-1,-2};      maskY=new double[]{2,3,4,3,2,1,2,3,2,1,0,0,0,0,0,-1,-2,-3,-2,-1,-2,-3,-4,-3,-2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  if (useAnchor) {    double sourceY=source.getY();    double anchorY=this.rangeAxis.java2DToValue(sourceY,info.getDataArea(),RectangleEdge.LEFT);    this.rangeAxis.resizeRange2(factor,anchorY);  } else {    this.rangeAxis.resizeRange(factor);  }}  }
class C{  public void onFindServers(EndpointServiceRequest<FindServersRequest,FindServersResponse> req) throws ServiceFaultException {  FindServersRequest request=req.getRequest();  ApplicationDescription[] servers=new ApplicationDescription[1];  Application application=nanoServer.getApplication();  String applicationUri=application.getApplicationUri();  String productUri=application.getProductUri();  ApplicationDescription applicationDescription=application.getApplicationDescription();  LocalizedText applicationName=applicationDescription.getApplicationName();  ApplicationType applicationType=applicationDescription.getApplicationType();  String gatewayServerUri=null;  String discoveryProfileUri=null;  String[] discoveryUrls=applicationDescription.getDiscoveryUrls();  if (discoveryUrls == null) {    Endpoint[] discoveryEndpoints=nanoServer.getEndpoints();    discoveryUrls=new String[discoveryEndpoints.length];    for (int i=0; i < discoveryEndpoints.length; i++) {      discoveryUrls[i]=discoveryEndpoints[i].getEndpointUrl();    }  }  servers[0]=new ApplicationDescription(applicationUri,productUri,applicationName,applicationType,gatewayServerUri,discoveryProfileUri,discoveryUrls);  ResponseHeader header=new ResponseHeader(DateTime.currentTime(),request.getRequestHeader().getRequestHandle(),StatusCode.GOOD,null,null,null);  FindServersResponse response=new FindServersResponse(header,servers);  req.sendResponse(response);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public void startSensorDetection(SensorDetector detector){  final Iterable<Sensor> sensors=convertTypesToSensors(detector.getSensorTypes());  if (areAllSensorsValid(sensors)) {    registerDetectorForAllSensors(detector,sensors);  }}  }
class C{  public EmpiricalWalker(double[] pdf,int interpolationType,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(pdf,interpolationType);  setState2(pdf);}  }
class C{  static boolean isEclipsePluginDisabled(String pluginId,Map<URI,Plugin> allPlugins){  for (  Plugin plugin : allPlugins.values()) {    if (pluginId.equals(plugin.getPluginId())) {      return false;    }  }  return true;}  }
class C{  public void notifyListener(TableModelEvent e){  ((ArffTableModel)getModel()).notifyListener(e);}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.TAG_VALUE;}  }
class C{  @LargeTest public void testMobileDownloadWithDownloadManager() throws Exception {  assertTrue(hasMobileData());  downloadFileUsingDownloadManager();}  }
class C{  public static float enlarge(float startValue,float endValue,float time){  if (startValue > endValue)   throw new IllegalArgumentException("Start size can't be larger than end size.");  return startValue + (endValue - startValue) * time;}  }
class C{  public void testTxReplicatedOptimisticRepeatableRead() throws Exception {  checkTx(REPLICATED,OPTIMISTIC,REPEATABLE_READ);}  }
class C{  public int nextInt(){  return nextInt(this.mean);}  }
class C{  public int context(){  String s=soot.PhaseOptions.getString(options,"context");  if (s.equalsIgnoreCase("insens"))   return context_insens;  if (s.equalsIgnoreCase("1cfa"))   return context_1cfa;  if (s.equalsIgnoreCase("kcfa"))   return context_kcfa;  if (s.equalsIgnoreCase("objsens"))   return context_objsens;  if (s.equalsIgnoreCase("kobjsens"))   return context_kobjsens;  if (s.equalsIgnoreCase("uniqkobjsens"))   return context_uniqkobjsens;  if (s.equalsIgnoreCase("threadkobjsens"))   return context_threadkobjsens;  throw new RuntimeException("Invalid value " + s + " of phase option context");}  }
class C{  public int validateAnswers(Boolean markCompleted) throws JavaRosaException {  ValidateOutcome outcome=getFormDef().validate(markCompleted);  if (outcome != null) {    this.jumpToIndex(outcome.failedPrompt);    return outcome.outcome;  }  return FormEntryController.ANSWER_OK;}  }
class C{  public Element makeXmlElement(Document document){  return makeXmlElement(document,null);}  }
class C{  public static void addCraters(IBoard board,int minRadius,int maxRadius,int minCraters,int maxCraters){  int numberCraters=minCraters;  if (maxCraters > minCraters) {    numberCraters+=Compute.randomInt(maxCraters - minCraters);  }  int width=board.getWidth();  int height=board.getHeight();  Map<Coords,Integer> usedHexes=new HashMap<>();  for (int i=0; i < numberCraters; i++) {    Point center=new Point(Compute.randomInt(width),Compute.randomInt(height));    int radius=Compute.randomInt(maxRadius - minRadius) + minRadius;    int divisor=Compute.randomInt(2) + 8;    int radiusM=radius * 30;    int maxDepthM=Math.max(6,radiusM / divisor);    int maxDepth=maxDepthM / 6;    int cratDepth[]=new int[radius];    for (int x=0; x < radius; x++) {      cratDepth[x]=craterProfile(x,radius,maxDepth);    }    for (int h=0; h < height; h++) {      for (int w=0; w < width; w++) {        int distance=(int)distance(center,new Point(w,h));        if (distance < radius) {          IHex field=board.getHex(w,h);          int baseElevation;          if (usedHexes.containsKey(field.getCoords())) {            baseElevation=usedHexes.get(field.getCoords());          } else {            baseElevation=field.getLevel();            usedHexes.put(field.getCoords(),baseElevation);          }          int newElevation=baseElevation + cratDepth[distance];          field.setLevel(Math.min(newElevation,field.getLevel()));        }      }    }  }}  }
class C{  @Override public void onSensorChanged(SensorEvent event){  assert (event.values.length == 3);  assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());  assert (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER);  if (!mIsRunning) {    return;  }  boolean firstData=mLastAcceleration == null;  mLastAcceleration=event.values;  if (firstData) {    startSendingUpdates();  }}  }
class C{  public JPanel(boolean isDoubleBuffered){  this(new FlowLayout(),isDoubleBuffered);}  }
class C{  @Inject public NotificationManagerImpl(NotificationManagerView view,NotificationContainer nContainer,NotificationPopupStack nPopupStack,Resources resources){  this.view=view;  this.nContainer=nContainer;  this.nContainer.setDelegate(this);  this.nPopupStack=nPopupStack;  this.nPopupStack.setDelegate(this);  this.view.setDelegate(this);  this.view.setContainer(nContainer);  this.view.setTitle(TITLE);  this.resources=resources;}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  @Override protected void handleMetaDataPersistException(Exception exception){  String title="[ERROR] - [" + getDeployEnvName() + "] - ["+ getProjectName()+ "] - "+ CubingExecutableUtil.getCubeName(this.getParams());  String content=ExecutableConstants.NOTIFY_EMAIL_TEMPLATE;  final String UNKNOWN="UNKNOWN";  String errMsg=null;  if (exception != null) {    final StringWriter out=new StringWriter();    exception.printStackTrace(new PrintWriter(out));    errMsg=out.toString();  }  content=content.replaceAll("\\$\\{job_name\\}",getName());  content=content.replaceAll("\\$\\{result\\}",ExecutableState.ERROR.toString());  content=content.replaceAll("\\$\\{env_name\\}",getDeployEnvName());  content=content.replaceAll("\\$\\{project_name\\}",getProjectName());  content=content.replaceAll("\\$\\{cube_name\\}",CubingExecutableUtil.getCubeName(this.getParams()));  content=content.replaceAll("\\$\\{source_records_count\\}",UNKNOWN);  content=content.replaceAll("\\$\\{start_time\\}",UNKNOWN);  content=content.replaceAll("\\$\\{duration\\}",UNKNOWN);  content=content.replaceAll("\\$\\{mr_waiting\\}",UNKNOWN);  content=content.replaceAll("\\$\\{last_update_time\\}",UNKNOWN);  content=content.replaceAll("\\$\\{submitter\\}",StringUtil.noBlank(getSubmitter(),"missing submitter"));  content=content.replaceAll("\\$\\{error_log\\}",Matcher.quoteReplacement(StringUtil.noBlank(errMsg,"no error message")));  try {    InetAddress inetAddress=InetAddress.getLocalHost();    content=content.replaceAll("\\$\\{job_engine\\}",inetAddress.getCanonicalHostName());  } catch (  UnknownHostException e) {    logger.warn(e.getLocalizedMessage(),e);  }  sendMail(Pair.of(title,content));}  }
class C{  public BlockBossLogic(){  jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).addVetoableChangeListener(this);  jmri.InstanceManager.turnoutManagerInstance().addVetoableChangeListener(this);  jmri.InstanceManager.sensorManagerInstance().addVetoableChangeListener(this);}  }
class C{  public boolean isMaxYSet(){  return isMaxYSet(0);}  }
class C{  public void testWithDocsName() throws Exception {  Path file=getWorkDir().resolve("one-line");  createRegularLineFileWithMoreFields(file,DocMaker.NAME_FIELD);  doIndexAndSearchTest(file,null,DocMaker.NAME_FIELD);}  }
class C{  protected void syncConsumeLoop(MessageConsumer requestConsumer){  try {    Message message=requestConsumer.receive(5000);    if (message != null) {      onMessage(message);    } else {      System.err.println("No message received");    }  } catch (  JMSException e) {    onException(e);  }}  }
class C{  public DrawerBuilder withStickyFooter(@LayoutRes int stickyFooterRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyFooterRes != -1) {    this.mStickyFooterView=(ViewGroup)mActivity.getLayoutInflater().inflate(stickyFooterRes,null,false);  }  return this;}  }
class C{  public int totalSize(){  int total=0;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    total+=counter.size();  }  return total;}  }
class C{  private boolean check(){  if (!isBST())   StdOut.println("Not in symmetric order");  if (!isSizeConsistent())   StdOut.println("Subtree counts not consistent");  if (!isRankConsistent())   StdOut.println("Ranks not consistent");  if (!is23())   StdOut.println("Not a 2-3 tree");  if (!isBalanced())   StdOut.println("Not balanced");  return isBST() && isSizeConsistent() && isRankConsistent()&& is23()&& isBalanced();}  }
class C{  private void create(int size){  int count=size;  while (count-- > 0) {    list.add(new Segment());  }}  }
class C{  public void swing(MowzieModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float f,float f1){  int inverted=1;  if (invert)   inverted=-1;  box.rotateAngleY+=MathHelper.cos(f * speed + offset) * degree * inverted* f1 + weight * f1;}  }
class C{  public void connect(SocketAddress endpoint) throws IOException {  connect(endpoint,0);}  }
class C{  public String[] match(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      String[] groups=new String[count];      for (int j=0; j < count; j++) {        groups[j]=matcher.group(j + 1);      }      return groups;    }  }  return null;}  }
class C{  public Pair<Pointer<T>,CLEvent> mapLater(CLQueue queue,MapFlags flags,CLEvent... eventsToWaitFor) throws CLException.MapFailure {  return map(queue,flags,0,getElementCount(),false,eventsToWaitFor);}  }
class C{  public Minus(){  super("basic.subtraction",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.NUMERICAL);}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  Graphics2D g2=(Graphics2D)g.create();  if (getModel().isPressed()) {    g2.translate(1,1);  }  g2.setStroke(new BasicStroke(2));  g2.setColor(Color.BLACK);  if (getModel().isRollover()) {    g2.setColor(Color.MAGENTA);  }  int delta=6;  g2.drawLine(delta,delta,getWidth() - delta - 1,getHeight() - delta - 1);  g2.drawLine(getWidth() - delta - 1,delta,delta,getHeight() - delta - 1);  g2.dispose();}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldKeys=_set;  double[] oldVals=_values;  byte[] oldStates=_states;  _set=new float[newCapacity];  _values=new double[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      float o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public Label(Label labelWithoutId,long labelId){  if (labelWithoutId.getId() != Label.NO_ID) {    throw new IllegalArgumentException("Label to copy cannot have an ID already assigned.");  }  mId=labelId;  mPackageName=labelWithoutId.mPackageName;  mPackageSignature=labelWithoutId.mPackageSignature;  mViewName=labelWithoutId.mViewName;  mText=labelWithoutId.mText;  mLocale=labelWithoutId.mLocale;  mPackageVersion=labelWithoutId.mPackageVersion;  mScreenshotPath=labelWithoutId.mScreenshotPath;  mTimestampMillis=labelWithoutId.mTimestampMillis;}  }
class C{  public void process(JCas jcas) throws AnalysisEngineProcessException {  CompositeUnicode2Unicode convertor=new CompositeUnicode2Unicode();  String origText=jcas.getDocumentText();  final String convertedText=convertor.convert(origText);  final String senSegmentedText=vnSenSegmenter.senSegment(convertedText).trim();  final String tokenizedText=PennTokenizer.tokenize(senSegmentedText).trim();  final String segmentedText=vnSegmenter.segmenting(tokenizedText);  final String postProcessedString=(new JVnTextPro()).postProcessing(segmentedText).trim();  List<jvntextpro.data.Sentence> posSentences=jvnTagging(postProcessedString);  LinkedList<TWord> posWords=new LinkedList<TWord>();  for (  jvntextpro.data.Sentence sent : posSentences)   for (Integer i=0; i < sent.size(); ++i)   posWords.add(sent.getTWordAt(i));  if (annotate_sentences) {    Integer offset=0;    String[] sentences=senSegmentedText.split("\n");    for (    String sentence : sentences) {      Sentence s=new Sentence(jcas);      sentence=sentence.trim();      Integer sentOffset=origText.indexOf(sentence,offset);      if (sentOffset >= 0) {        s.setBegin(sentOffset);        offset=sentOffset + sentence.length();        s.setEnd(offset);        s.addToIndexes();      } else {        sentence=sentence.substring(0,sentence.length() - 1).trim();        sentOffset=origText.indexOf(sentence,offset);        if (sentOffset >= 0) {          s.setBegin(sentOffset);          offset=sentOffset + sentence.length();          s.setEnd(offset);          s.addToIndexes();        } else {          System.err.println("Sentence \"" + sentence + "\" was not found in the original text.");        }      }    }  }  if (annotate_tokens) {    Integer offset=0;    String[] tokens=postProcessedString.split("\\s+");    for (Integer i=0; i < tokens.length; ++i) {      final String token=tokens[i].trim();      String thisPosTag=null;      if (posWords.size() >= i + 1) {        if (!token.equals(posWords.get(i).getWord())) {          System.err.println("Couldn't match token: " + token + " to expected word/tag combination "+ posWords.get(i).getWord());        } else {          thisPosTag=posWords.get(i).getTag();        }      }      Integer tokenOffset=origText.indexOf(token,offset);      Token t=new Token(jcas);      if (tokenOffset >= 0) {        t.setBegin(tokenOffset);        offset=tokenOffset + token.length();        t.setEnd(offset);        sanitizeToken(t,jcas);        if (annotate_tokens)         t.setPos(thisPosTag);        t.addToIndexes();      } else {        String underscoreToSpaceToken=token.replaceAll("_"," ");        Integer spaceOffset=origText.indexOf(underscoreToSpaceToken,offset);        String underscoreRemovedToken=token.replaceAll("_","");        Integer removedOffset=origText.indexOf(underscoreRemovedToken,offset);        if (removedOffset >= 0 && spaceOffset >= 0) {          if (removedOffset >= spaceOffset) {            t.setBegin(spaceOffset);            offset=spaceOffset + underscoreToSpaceToken.length();            t.setEnd(offset);            sanitizeToken(t,jcas);            if (annotate_tokens)             t.setPos(thisPosTag);            t.addToIndexes();          } else {            t.setBegin(removedOffset);            offset=removedOffset + underscoreRemovedToken.length();            t.setEnd(offset);            sanitizeToken(t,jcas);            t.addToIndexes();          }        } else         if (removedOffset >= 0 && spaceOffset == -1) {          t.setBegin(removedOffset);          offset=removedOffset + underscoreRemovedToken.length();          t.setEnd(offset);          sanitizeToken(t,jcas);          if (annotate_tokens)           t.setPos(thisPosTag);          t.addToIndexes();        } else         if (removedOffset == -1 && spaceOffset >= 0) {          t.setBegin(spaceOffset);          offset=spaceOffset + underscoreToSpaceToken.length();          t.setEnd(offset);          sanitizeToken(t,jcas);          if (annotate_tokens)           t.setPos(thisPosTag);          t.addToIndexes();        } else {          System.err.println("Token \"" + token + "\" was not found in the original text.");        }      }    }  }}  }
class C{  public Drawer append(@NonNull Drawer result){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mDrawerGravity == null) {    throw new RuntimeException("please set the gravity for the drawer");  }  mUsed=true;  mAppended=true;  mDrawerLayout=result.getDrawerLayout();  mSliderLayout=(ScrimInsetsRelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  params.gravity=mDrawerGravity;  params=DrawerUtils.processDrawerLayoutParams(this,params);  mSliderLayout.setLayoutParams(params);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  createContent();  Drawer appendedResult=new Drawer(this);  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED_APPENDED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  mActivity=null;  return appendedResult;}  }
class C{  public static int intHash(long a){  if (false) {    int hash=((int)(a >> 32)) ^ ((int)a);    if (a < 0) {      hash=-hash - 1;    }    return hash;  }  int hash=((int)(a >> 32)) + ((int)a);  if (a < 0) {    hash++;  }  return hash;}  }
class C{  @Deprecated public static void assertNotEquals(String itemsName,Object item1,Object item2){  try {    if (Comparators.nullSafeEquals(item1,item2) || Comparators.nullSafeEquals(item2,item1)) {      Assert.fail(itemsName + " should not be equal, item1:<" + item1+ ">, item2:<"+ item2+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static Variable defaultVariable(){  return VariableImpl.defaultInstance();}  }
class C{  private void startCompactor(){  this.compactorEnabled=true;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="BC_UNCONFIRMED_CAST",justification="Only JMXConnectionNotification instances are used.") public void handleNotification(Notification notification,Object handback){  if (handback instanceof AgentImpl) {    AgentImpl agent=(AgentImpl)handback;    JMXConnectionNotification jmxNotifn=(JMXConnectionNotification)notification;    if (logger.isDebugEnabled()) {      logger.debug("Connection notification for connection id : '{}'",jmxNotifn.getConnectionId());    }    agent.updateRmiClientsCount();  }}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text") {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public static byte[] transfer(ChannelHandlerContext ctx,Object msg){  ApiProtocol apiProtocol=new ApiProtocol(ctx,msg);  if (apiProtocol.getEndpoint() == null) {    return encode(ErrorHandler.error(StatusCode.API_CAN_NOT_BE_NULL));  }  if (apiProtocol.getApi() == null) {    return encode(ErrorHandler.error(StatusCode.API_NOT_FOUND));  }  Object result=invoke(apiProtocol.getApi(),apiProtocol);  if (result == null) {    return encode(ErrorHandler.error(StatusCode.UNKNOWN_ERROR));  }  return encode(result);}  }
class C{  public static void tileBackground(Context ctx,int viewId,int resIdOfTile){  try {    Bitmap bmp=BitmapFactory.decodeResource(ctx.getResources(),resIdOfTile);    BitmapDrawable bitmapDrawable=new BitmapDrawable(ctx.getResources(),bmp);    bitmapDrawable.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);    View view=((Activity)ctx).findViewById(viewId);    if (view == null) {      throw new NullPointerException("View to which the tile has to be applied should not be null");    } else {      setBackground(view,bitmapDrawable);    }  } catch (  Exception e) {    Log.w(TAG,"#tileBackground Exception while tiling the background of the view");  }}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  host.revalidate();  host.repaint();}  }
class C{  private void findJaxrsApplicationScanning(){  Set<Class<? extends Application>> applications=JaxrsApplicationScanner.getApplications();  if (applications == null || applications.size() == 0) {    return;  }  this.applications.addAll(applications);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case InformationModelPackage.INFORMATION_MODEL:{      InformationModel informationModel=(InformationModel)theEObject;      T result=caseInformationModel(informationModel);      if (result == null)       result=caseModel(informationModel);      if (result == null)       result=defaultCase(theEObject);      return result;    }case InformationModelPackage.FUNCTIONBLOCK_PROPERTY:{    FunctionblockProperty functionblockProperty=(FunctionblockProperty)theEObject;    T result=caseFunctionblockProperty(functionblockProperty);    if (result == null)     result=defaultCase(theEObject);    return result;  }default :return defaultCase(theEObject);}}  }
class C{  public Card searchForMatch(Card prev){  for (int i=0; i < hand.size(); i++) {    Card card=hand.getCard(i);    if (cardMatches(card,prev)) {      return hand.popCard(i);    }  }  return null;}  }
class C{  private boolean matchesFileName(String fileName){  return getFileNameMatcher().reset(fileName).matches();}  }
class C{  public static <SRC>KryoCloneUtils<SRC> createCloneUtils(Kryo kryo,SRC template){  return new KryoCloneUtils<>(kryo,template);}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystemVirtualPool(URI storageSystemId,URI vpool){  return listByStorageSystemVirtualPool(storageSystemId,vpool,false);}  }
class C{  public PreparedStatement monitor(PreparedStatement statement){  return (PreparedStatement)monitorJDBC(statement);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String encoded(){  StringBuilder buf=new StringBuilder();  buf.append(getName());  buf.append('|');  buf.append(getValue());  if (getOperator() != Operator.HAS) {    buf.append('|');    buf.append(getOperator());  }  return buf.toString();}  }
class C{  public static void writeKeyBindings(){  try {    Writer output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(Configuration.configDir(),DEFAULT_BINDINGS_FILE))));    output.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");    output.write("<KeyBindings " + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" + " xsi:noNamespaceSchemaLocation=\"keyBindingSchema.xsl\">\n");    for (    KeyCommandBind kcb : KeyCommandBind.values()) {      output.write("    <KeyBind>\n");      output.write("         <command>" + kcb.cmd + "</command> ");      String keyTxt="";      if (kcb.modifiers != 0) {        keyTxt=KeyEvent.getKeyModifiersText(kcb.modifiers);        keyTxt+="-";      }      keyTxt+=KeyEvent.getKeyText(kcb.key);      output.write("<!-- " + keyTxt + " -->\n");      output.write("        <keyCode>" + kcb.key + "</keyCode>\n");      output.write("        <modifier>" + kcb.modifiers + "</modifier>\n");      output.write("        <isRepeatable>" + kcb.isRepeatable + "</isRepeatable>\n");      output.write("    </KeyBind>\n");      output.write("\n");    }    output.write("</KeyBindings>");    output.close();  } catch (  IOException e) {    System.err.println("Error writing keybindings file!");    e.printStackTrace(System.err);  }}  }
class C{  private AppInfo findApplicationInfoLocked(String packageName,UserHandleCompat user,String className){  for (  AppInfo info : data) {    final ComponentName component=info.intent.getComponent();    if (user.equals(info.user) && packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {      return info;    }  }  return null;}  }
class C{  public static boolean isDataUri(String text){  return text.startsWith(DATA_URI_PREFIX);}  }
class C{  public SortedNumericSortField(String field,SortField.Type type,boolean reverse){  this(field,type,reverse,SortedNumericSelector.Type.MIN);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) - m_right.num(xctxt));}  }
class C{  public void testSeedConstructor(){  for (long seed=2; seed < MAX_LONG_BOUND; seed+=15485863) {    SplittableRandom sr1=new SplittableRandom(seed);    SplittableRandom sr2=new SplittableRandom(seed);    for (int i=0; i < REPS; ++i)     assertEquals(sr1.nextLong(),sr2.nextLong());  }}  }
class C{  public String toString(){  return name;}  }
class C{  private Registration findRecord(final String regId){  return ofy().load().type(Registration.class).filter("regId",regId).first().now();}  }
class C{  protected Entry<K,V> nextEntry(){  if (modCount != expectedModCount)   throw new ConcurrentModificationException();  if (nextKey == null && !hasNext())   throw new NoSuchElementException();  lastReturned=entry;  entry=entry.next;  currentKey=nextKey;  nextKey=null;  return lastReturned;}  }
class C{  public static void enableTraceCalls(){  ExecutionTraceImpl.enableTraceCalls();}  }
class C{  public KafkaServer(Supplier<String> zookeeperConnection,int brokerId,int port){  if (zookeeperConnection == null)   throw new IllegalArgumentException("The Zookeeper connection string supplier may not be null");  this.zkConnection=zookeeperConnection;  this.brokerId=brokerId;  this.config=new Properties();  setPort(port);  populateDefaultConfiguration(this.config);}  }
class C{  public void clonePersons(final int cloningFactor){  Population pop=sc.getPopulation();  List<Person> persons=new ArrayList<>(pop.getPersons().values());  for (  Person p : persons) {    for (int cf=1; cf < cloningFactor; cf++) {      Id<Person> pOutId=Id.createPersonId(p.getId().toString().concat("_").concat(String.valueOf(cf)));      Person pOut=pop.getFactory().createPerson(pOutId);      pop.addPerson(pOut);      for (      Plan plan : p.getPlans()) {        Plan planOut=pop.getFactory().createPlan();        List<PlanElement> pes=plan.getPlanElements();        for (        PlanElement pe : pes) {          if (pe instanceof Leg) {            Leg leg=(Leg)pe;            Leg legOut=pop.getFactory().createLeg(leg.getMode());            planOut.addLeg(legOut);          } else {            Activity actIn=(Activity)pe;            Activity actOut=pop.getFactory().createActivityFromCoord(actIn.getType(),actIn.getCoord());            actOut.setEndTime(actIn.getEndTime() - 1800 + random.nextDouble() * 1800);            planOut.addActivity(actOut);          }        }        pOut.addPlan(planOut);      }    }  }}  }
class C{  public T remove(T value){  return this.remove(value.getX(),value.getZ());}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public void send(OutputStream os) throws IOException, QueryException {  PacketOutputStream writer=(PacketOutputStream)os;  byte type=authData[0];  String promptb;  while (true) {    promptb=new String(Arrays.copyOfRange(authData,1,authData.length));    if ("Password: ".equals(promptb) && password != null && !"".equals(password)) {      writer.startPacket(packSeq);      writer.write(password.getBytes());      writer.write(0);    } else {      boolean isPassword=type == 4;      String password=showInputDialog(promptb,isPassword);      if (password == null) {        throw new QueryException("Error during PAM authentication : dialog input cancelled");      }      writer.startPacket(packSeq);      writer.write(password.getBytes());      writer.write(0);    }    writer.finishPacketWithoutRelease(false);    writer.releaseBuffer();    try {      Buffer buffer=packetFetcher.getReusableBuffer();      packSeq=packetFetcher.getLastPacketSeq() + 1;      type=buffer.getByteAt(0);      if (type == Packet.EOF || type == Packet.OK) {        return;      }      if (type == Packet.ERROR) {        ErrorPacket errorPacket=new ErrorPacket(buffer);        throw new QueryException("Error during PAM authentication : " + errorPacket.getMessage());      }      authData=buffer.readRawBytes(buffer.remaining());    } catch (    EOFException eof) {      throw new QueryException("Error during PAM authentication reading server response : " + eof.getMessage() + "\n It may be due to a low @@connect_timeout.");    }  }}  }
class C{  private static boolean loadView(final JFrame parent,final IViewContainer viewContainer,final INaviView view){  CViewLoader.load(parent,viewContainer,view);  return view.isLoaded();}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public boolean hasModifiedTime(){  return fieldSetFlags()[6];}  }
class C{  protected void processConditionalSection(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != 'I') {    XMLUtil.skipTag(reader);    return;  }  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);switch (ch) {case 'G':    this.processIgnoreSection(reader,entityResolver);  return;case 'N':break;default :XMLUtil.skipTag(reader);return;}if (!XMLUtil.checkLiteral(reader,"CLUDE")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader,null);str=XMLUtil.read(reader,'%');ch=str.charAt(0);if (ch != '[') {XMLUtil.skipTag(reader);return;}Reader subreader=new CDATAReader(reader);StringBuffer buf=new StringBuffer(1024);for (; ; ) {int ch2=subreader.read();if (ch2 < 0) {break;}buf.append((char)ch2);}subreader.close();reader.startNewStream(new StringReader(buf.toString()));}  }
class C{  public void testSetBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void generateEventsByDestroyEntryOperation() throws Exception {  Connection connection=pool.acquireConnection();  String regionName=Region.SEPARATOR + REGION_NAME;  ServerRegionProxy srp=new ServerRegionProxy(regionName,pool);  for (int i=0; i < eventIds.length; i++) {    srp.destroyOnForTestsOnly(connection,"KEY-" + i,null,Operation.DESTROY,new EventIDHolder(eventIds[i]),null);  }  srp.destroyOnForTestsOnly(connection,LAST_KEY,null,Operation.DESTROY,new EventIDHolder(eventIdForLastKey),null);}  }
class C{  private void checkLinkToDataSourceInConfigXml(DataSourceFixture fixture) throws Exception {  String domainXml=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(fixture.buildDataSource().getId(),"//weblogic:jdbc-system-resource/weblogic:name",domainXml);  XMLAssert.assertXpathEvaluatesTo("server","//weblogic:jdbc-system-resource/weblogic:target",domainXml);}  }
class C{  public NonDeletingPositionUpdater(String category){  fCategory=category;}  }
class C{  public void offsetTo(int newLeft,int newTop){  right+=newLeft - left;  bottom+=newTop - top;  left=newLeft;  top=newTop;}  }
class C{  public DepartQueuePacket(String workgroup){  this(workgroup,null);}  }
class C{  @Override public boolean equals(Object obj){  return obj instanceof GregorianCalendar && super.equals(obj) && gregorianCutover == ((GregorianCalendar)obj).gregorianCutover;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean containsKey(String key){  return map.containsKey(key);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void readHeadersFromIndexInput(FlagConfig flagConfig) throws IOException {  String header=threadLocalIndexInput.get().readString();  FlagConfig.mergeWriteableFlagsFromString(header,flagConfig);}  }
class C{  public void testSetF15(){  boolean f15=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF15(f15);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  @Override public HashMap<String,String> createMap(){  HashMap<String,String> queryMap=new HashMap<>();  if (query != null) {    queryMap.put("q",query);  }  if (tags != null) {    queryMap.put("tags",tags);  }  if (filter != null) {    queryMap.put("filter",filter.toString());  }  if (license != null) {    queryMap.put("license",license.toString());  }  if (bpmFrom != -1) {    queryMap.put("bpm[from]",String.valueOf(bpmFrom));  }  if (bpmTo != -1) {    queryMap.put("bpm[to]",String.valueOf(bpmTo));  }  if (durationFrom != -1) {    queryMap.put("duration[from]",String.valueOf(durationFrom));  }  if (durationTo != -1) {    queryMap.put("duration[to]",String.valueOf(durationTo));  }  if (createdAtFrom != null) {    queryMap.put("created_at[from]",createdAtFrom);  }  if (createdAtTo != null) {    queryMap.put("created_at[to]",createdAtTo);  }  if (ids != null) {    queryMap.put("ids",ids);  }  if (createdAtTo != null) {    queryMap.put("genres",genres);  }  if (createdAtTo != null) {    queryMap.put("types",types);  }  if (queryMap.size() > 0) {    queryMap.put(Pager.LIMIT,String.valueOf(limit));    return queryMap;  } else {    return null;  }}  }
class C{  JavaCompiler finalCompiler(){  try {    Context nextCtx=nextContext();    JavacProcessingEnvironment.this.context=nextCtx;    JavaCompiler c=JavaCompiler.instance(nextCtx);    c.log.initRound(compiler.log);    return c;  }  finally {    compiler.close(false);  }}  }
class C{  public synchronized ApplyDeletesResult applyDeletesAndUpdates(IndexWriter.ReaderPool pool,List<SegmentCommitInfo> infos) throws IOException {  final long t0=System.currentTimeMillis();  final long gen=nextGen++;  if (infos.size() == 0) {    return new ApplyDeletesResult(false,gen,null);  }  SegmentState[] segStates=null;  long totDelCount=0;  long totTermVisitedCount=0;  boolean success=false;  ApplyDeletesResult result=null;  try {    if (infoStream.isEnabled("BD")) {      infoStream.message("BD",String.format(Locale.ROOT,"applyDeletes: open segment readers took %d msec",System.currentTimeMillis() - t0));    }    assert checkDeleteStats();    if (!any()) {      if (infoStream.isEnabled("BD")) {        infoStream.message("BD","applyDeletes: no segments; skipping");      }      return new ApplyDeletesResult(false,gen,null);    }    if (infoStream.isEnabled("BD")) {      infoStream.message("BD","applyDeletes: infos=" + infos + " packetCount="+ updates.size());    }    infos=sortByDelGen(infos);    CoalescedUpdates coalescedUpdates=null;    int infosIDX=infos.size() - 1;    int delIDX=updates.size() - 1;    while (infosIDX >= 0) {      final FrozenBufferedUpdates packet=delIDX >= 0 ? updates.get(delIDX) : null;      final SegmentCommitInfo info=infos.get(infosIDX);      final long segGen=info.getBufferedDeletesGen();      if (packet != null && segGen < packet.delGen()) {        if (!packet.isSegmentPrivate && packet.any()) {          if (coalescedUpdates == null) {            coalescedUpdates=new CoalescedUpdates();          }          coalescedUpdates.update(packet);        }        delIDX--;      } else       if (packet != null && segGen == packet.delGen()) {        assert packet.isSegmentPrivate : "Packet and Segments deletegen can only match on a segment private del packet gen=" + segGen;        if (segStates == null) {          segStates=openSegmentStates(pool,infos);        }        SegmentState segState=segStates[infosIDX];        assert pool.infoIsLive(info);        int delCount=0;        final DocValuesFieldUpdates.Container dvUpdates=new DocValuesFieldUpdates.Container();        delCount+=applyQueryDeletes(packet.queriesIterable(),segState);        applyDocValuesUpdates(Arrays.asList(packet.numericDVUpdates),segState,dvUpdates);        applyDocValuesUpdates(Arrays.asList(packet.binaryDVUpdates),segState,dvUpdates);        if (coalescedUpdates != null) {          delCount+=applyQueryDeletes(coalescedUpdates.queriesIterable(),segState);          applyDocValuesUpdatesList(coalescedUpdates.numericDVUpdates,segState,dvUpdates);          applyDocValuesUpdatesList(coalescedUpdates.binaryDVUpdates,segState,dvUpdates);        }        if (dvUpdates.any()) {          segState.rld.writeFieldUpdates(info.info.dir,dvUpdates);        }        totDelCount+=delCount;        delIDX--;        infosIDX--;      } else {        if (coalescedUpdates != null) {          if (segStates == null) {            segStates=openSegmentStates(pool,infos);          }          SegmentState segState=segStates[infosIDX];          assert pool.infoIsLive(info);          int delCount=0;          delCount+=applyQueryDeletes(coalescedUpdates.queriesIterable(),segState);          DocValuesFieldUpdates.Container dvUpdates=new DocValuesFieldUpdates.Container();          applyDocValuesUpdatesList(coalescedUpdates.numericDVUpdates,segState,dvUpdates);          applyDocValuesUpdatesList(coalescedUpdates.binaryDVUpdates,segState,dvUpdates);          if (dvUpdates.any()) {            segState.rld.writeFieldUpdates(info.info.dir,dvUpdates);          }          totDelCount+=delCount;        }        infosIDX--;      }    }    if (coalescedUpdates != null && coalescedUpdates.totalTermCount != 0) {      if (segStates == null) {        segStates=openSegmentStates(pool,infos);      }      totTermVisitedCount+=applyTermDeletes(coalescedUpdates,segStates);    }    assert checkDeleteStats();    success=true;  }  finally {    if (segStates != null) {      result=closeSegmentStates(pool,segStates,success,gen);    }  }  if (result == null) {    result=new ApplyDeletesResult(false,gen,null);  }  if (infoStream.isEnabled("BD")) {    infoStream.message("BD",String.format(Locale.ROOT,"applyDeletes took %d msec for %d segments, %d newly deleted docs (query deletes), %d visited terms, allDeleted=%s",System.currentTimeMillis() - t0,infos.size(),totDelCount,totTermVisitedCount,result.allDeleted));  }  return result;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static boolean between(float value,float start,float end){  if (start > end) {    float tmp=start;    start=end;    end=tmp;  }  return value >= start && value <= end;}  }
class C{  public static boolean tryValidateWildcard(String uri,boolean useStrictValidation){  return tryValidate(uri,useStrictValidation ? STRICT_URI_WILDCARD : LOOSE_URI_WILDCARD);}  }
class C{  @Override public int size(){  return stackTop;}  }
class C{  public boolean isImageTransferred(){  return mImageTransfered;}  }
class C{  @Override public void configure() throws ReplicatorException, InterruptedException {  logger.info("Configuring data source: service=" + serviceName);}  }
class C{  public int read() throws IOException {  int c=fSurrogate;  if (fSurrogate == -1) {    int index=0;    int b0=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;    if (b0 == -1) {      return -1;    }    if (b0 < 0x80) {      c=(char)b0;    } else     if ((b0 & 0xE0) == 0xC0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,2);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,2,b1);      }      c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);    } else     if ((b0 & 0xF0) == 0xE0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,3);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,3,b1);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,3);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3,b2);      }      c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);    } else     if ((b0 & 0xF8) == 0xF0) {      int b1=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b1 == -1) {        expectedByte(2,4);      }      if ((b1 & 0xC0) != 0x80) {        invalidByte(2,3,b1);      }      int b2=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b2 == -1) {        expectedByte(3,4);      }      if ((b2 & 0xC0) != 0x80) {        invalidByte(3,3,b2);      }      int b3=index == fOffset ? fInputStream.read() : fBuffer[index++] & 0x00FF;      if (b3 == -1) {        expectedByte(4,4);      }      if ((b3 & 0xC0) != 0x80) {        invalidByte(4,4,b3);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | ((b1 << 2) & 0x003C)| ((b2 >> 4) & 0x0003);      int ls=0xDC00 | ((b2 << 6) & 0x03C0) | (b3 & 0x003F);      c=hs;      fSurrogate=ls;    } else {      invalidByte(1,1,b0);    }  } else {    fSurrogate=-1;  }  return c;}  }
class C{  @Nonnull public ClassNode buildFromClass(@Nonnull Class clz) throws AstNotFoundException {  ClassNode cn=ClassNode.create();  cn.name=clz.getName();  cn.modifier=clz.getModifiers();  loadedClasses.put(clz.getName(),cn);  Map<TypeVariable,GenericType> genericTypes=new HashMap();  TypeVariable[] typeParameters=clz.getTypeParameters();  if (typeParameters.length > 0) {    for (    TypeVariable pt : typeParameters) {      ObjectType[] bounds=castToClassTypes(transType(pt.getBounds(),genericTypes));      ObjectType superType;      ObjectType[] interfaces;      if (bounds != null && bounds.length > 0) {        if (ModifierUtil.isInterface(bounds[0].getModifier())) {          superType=Types.getRootType();          interfaces=bounds;        } else {          superType=bounds[0];          interfaces=new ObjectType[bounds.length - 1];          System.arraycopy(bounds,1,interfaces,0,interfaces.length);        }      } else {        superType=Types.getRootType();        interfaces=bounds;      }      GenericType gt=new GenericType(pt.getName(),superType,interfaces,NullableKind.NONNULL);      genericTypes.put(pt,gt);      cn.declareGenericType(gt);    }  }  java.lang.reflect.Type superType=clz.getGenericSuperclass();  Class superClazz=clz.getSuperclass();  if (superType != null) {    cn.superType=(ObjectType)getType(superType,genericTypes,superClazz,NullableKind.NONNULL);  }  java.lang.reflect.Type[] typeInterfaces=clz.getGenericInterfaces();  Class[] clzInterfaces=clz.getInterfaces();  if (clzInterfaces != null) {    for (int i=0; i < clzInterfaces.length; i++) {      cn.interfaces.add((ObjectType)getType(typeInterfaces[i],genericTypes,clzInterfaces[i],NullableKind.NONNULL));    }  }  List<Executable> methods=new LinkedList();  methods.addAll(Arrays.asList(clz.getDeclaredMethods()));  methods.addAll(Arrays.asList(clz.getDeclaredConstructors()));  for (  Executable m : methods) {    NullableKind nullable=getNullable(m.getAnnotations());    Type mType;    String mName;    int mModifier;    if (m instanceof Method) {      mType=getType(((Method)m).getGenericReturnType(),genericTypes,((Method)m).getReturnType(),nullable);      mName=m.getName();      mModifier=m.getModifiers();    } else     if (m instanceof Constructor) {      mName="<init>";      mType=Types.VOID_TYPE;      mModifier=m.getModifiers();    } else {      throw Exceptions.unexceptedValue(m);    }    MethodNode methodNode=cn.createMethodNode(mType,mName,mModifier);    for (    Parameter p : m.getParameters()) {      NullableKind pnullable=getNullable(p.getAnnotations());      methodNode.createParameter(getType(p.getParameterizedType(),genericTypes,p.getType(),pnullable),p.getName());    }    methodNode.body=null;    for (    Class e : m.getExceptionTypes()) {      methodNode.exceptionTypes.add(getType(e,genericTypes,e,NullableKind.NONNULL));    }  }  for (  Field f : clz.getFields()) {    NullableKind nullable=getNullable(f.getAnnotations());    FieldNode fn=cn.createField(getType(f.getGenericType(),genericTypes,f.getType(),nullable),f.getName(),f.getModifiers());  }  return cn;}  }
class C{  public void addUINodes(Node... nodes){  for (  Node node : nodes)   addUINode(node);}  }
class C{  public void initMoveRightAnim(){  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()],endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()],endCoordinateYs[imageE.getIndexLable()]);  if (imageA.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageAAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageAAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  imageAAnimToRight.setDuration(mDuration);  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()],endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()],endCoordinateYs[imageA.getIndexLable()]);  if (imageB.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageBAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageBAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  imageBAnimToRight.setDuration(mDuration);  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()],endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()],endCoordinateYs[imageB.getIndexLable()]);  if (imageC.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageCAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageCAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  imageCAnimToRight.setDuration(mDuration);  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()],endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()],endCoordinateYs[imageC.getIndexLable()]);  if (imageD.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageDAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageDAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  imageDAnimToRight.setDuration(mDuration);  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()],endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()],endCoordinateYs[imageD.getIndexLable()]);  if (imageE.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageEAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageEAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimToRight=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  imageEAnimToRight.setDuration(mDuration);}  }
class C{  public static void validateXML(URL schemaFileURL,File file) throws SAXException, IOException {  SchemaFactory factory=SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");  Schema schema=factory.newSchema(schemaFileURL);  Validator validator=schema.newValidator();  Source source=new StreamSource(file);  validator.validate(source);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.INFO_MODEL_MAPPING_MODEL;}  }
class C{  public static Bitmap drawableToBitmap(Drawable d){  return d == null ? null : ((BitmapDrawable)d).getBitmap();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public Vector3d cross(Vector3dc v){  set(y * v.z() - z * v.y(),z * v.x() - x * v.z(),x * v.y() - y * v.x());  return this;}  }
class C{  public static String fmtDate(long ms){  return DATE_TIME.format(new Date(ms));}  }
class C{  public void itemLogAssignIDIfNotPresent(final DBTransaction transaction,final RPObject item) throws SQLException {  if (item.has(ATTR_ITEM_LOGID)) {    return;  }  String sql="INSERT INTO item (name) VALUES ('[name]')";  Map<String,Object> params=new HashMap<String,Object>();  params.put("name",item.get("name"));  transaction.execute(sql,params);  item.put(ATTR_ITEM_LOGID,transaction.getLastInsertId("item","id"));  itemLogInsertName(transaction,item);}  }
class C{  public MiscWhitelist() throws IOException {  super(new StaticWhitelist("new org.yaml.snakeyaml.Yaml","method org.yaml.snakeyaml.Yaml load java.lang.String","method java.util.Map containsKey java.lang.Object","method java.lang.Class isInstance java.lang.Object","staticMethod org.codehaus.groovy.runtime.ScriptBytecodeAdapter castToType java.lang.Object java.lang.Class","staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toSet java.util.Collection","staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods size java.lang.Object[]","method java.util.Map size","method java.util.Map keySet","method java.util.Map values","staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods toList java.util.Collection","staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods transpose java.util.List","staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods combinations java.util.Collection","staticMethod org.codehaus.groovy.runtime.ScriptBytecodeAdapter compareGreaterThan java.lang.Object java.lang.Object"));}  }
class C{  public static void main(String argv[]) throws Exception {  keystoreManager=new KeystoreManagerCtrl();  CommandLine line=null;  try {    CommandLineParser parser=new GnuParser();    line=parser.parse(keystoreManager.helpOptions,argv,true);    if (line.hasOption(_HELP)) {      DisplayHelpAndExit(EXIT_CODE.EXIT_OK);    }    line=parser.parse(keystoreManager.options,argv);    if (line.hasOption(_KEYSTORE_LOCATION))     keystoreManager.keystoreLocation=line.getOptionValue(_KEYSTORE_LOCATION);    if (line.hasOption(_KEY_ALIAS))     keystoreManager.keyAlias=line.getOptionValue(_KEY_ALIAS);    if (line.hasOption(_KEY_TYPE)) {      String keyType=line.getOptionValue(_KEY_TYPE);      KEYSTORE_TYPE certificateTYpe=KEYSTORE_TYPE.fromString(keyType);      keystoreManager.keyType=certificateTYpe;    }    if (line.hasOption(_KEYSTORE_PASSWORD))     keystoreManager.keystorePassword=line.getOptionValue(_KEYSTORE_PASSWORD);    if (line.hasOption(_KEY_PASSWORD))     keystoreManager.keyPassword=line.getOptionValue(_KEY_PASSWORD);  } catch (  ParseException exp) {    logger.error(exp.getMessage());    DisplayHelpAndExit(EXIT_CODE.EXIT_ERROR);  }catch (  Exception e) {    if (e.toString().contains("CheckExitCalled")) {      throw e;    } else {      logger.error(e.getMessage());      Exit(EXIT_CODE.EXIT_ERROR);    }  }  if (line.hasOption(_CHECK)) {    try {      if (keystoreManager.keystorePassword == null || keystoreManager.keyPassword == null) {        List<String> listPrompts=Arrays.asList("Keystore password:",MessageFormat.format("Password for key {0}:",keystoreManager.keyAlias));        List<String> listUserInput=keystoreManager.getUserInputFromStdin(listPrompts);        if (listUserInput.size() == listPrompts.size()) {          keystoreManager.keystorePassword=listUserInput.get(0);          keystoreManager.keyPassword=listUserInput.get(1);        } else {          throw new NoSuchElementException();        }      }      try {        logger.info(MessageFormat.format("Using keystore:{0}",keystoreManager.keystoreLocation));        SecurityHelper.checkKeyStorePasswords(keystoreManager.keystoreLocation,keystoreManager.keyType,keystoreManager.keystorePassword,keystoreManager.keyAlias,keystoreManager.keyPassword);        logger.info(MessageFormat.format("OK : Identical password for Keystore and key={0}",keystoreManager.keyAlias));      } catch (      UnrecoverableKeyException uke) {        logger.error(MessageFormat.format("At least 1 key has a wrong password.{0}",uke.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }catch (      Exception e) {        logger.error(MessageFormat.format("{0}",e.getMessage()));        Exit(EXIT_CODE.EXIT_ERROR);      }    } catch (    NoSuchElementException nse) {      logger.error(nse.getMessage());      Exit(EXIT_CODE.EXIT_ERROR);    }catch (    Exception e) {      logger.error(MessageFormat.format("Error while running the program: {0}",e.getMessage()));      Exit(EXIT_CODE.EXIT_ERROR);    }  }  Exit(EXIT_CODE.EXIT_OK);}  }
class C{  public static String notEmpty(String value,String name){  return notEmpty(value,name,null);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public BannerPattern(SsfValue<?> tag,SsfContext context) throws SsfSerializationException {  SsfNode node=(SsfNode)tag;  this.color=DyeColor.getByItemFlag(node.getAsInt("Color"));  this.pattern=BannerPatternType.getByIdentifier(node.getAsString("Pattern","b"));}  }
class C{  public void select(final int start,final int end){  select(start,end,true);}  }
class C{  private void processElementHalton(GeneratorSingleCluster cluster,Node cur){  double min=0.0;  double max=1.0;  String minstr=((Element)cur).getAttribute(ATTR_MIN);  if (minstr != null && minstr.length() > 0) {    min=ParseUtil.parseDouble(minstr);  }  String maxstr=((Element)cur).getAttribute(ATTR_MAX);  if (maxstr != null && maxstr.length() > 0) {    max=ParseUtil.parseDouble(maxstr);  }  Random random=cluster.getNewRandomGenerator();  Distribution generator=new HaltonUniformDistribution(min,max,random);  cluster.addGenerator(generator);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> _loader,Cursor data){  mLastVisiblePosition=mGalleryView.getLastVisiblePosition();  final Activity context=getActivity();  if (data == null) {    FotoSql.CursorLoaderWithException loader=(FotoSql.CursorLoaderWithException)_loader;    String title;    String message=context.getString(R.string.global_err_sql_message_format,loader.getException().getMessage(),loader.getQuery().toSqlString());    if (loader.getException() != null) {      if (0 != loader.getQuery().toSqlString().compareTo(getCurrentQuery(FotoSql.queryDetail).toSqlString())) {        mGalleryContentQuery=FotoSql.queryDetail;        requery("requery after query-errror");        title=context.getString(R.string.global_err_sql_title_reload);      } else {        title=context.getString(R.string.global_err_system);        context.finish();      }      Dialogs.messagebox(context,title,message);      return;    }  }  mAdapter.swapCursor(data);  if (mLastVisiblePosition > 0) {    mGalleryView.smoothScrollToPosition(mLastVisiblePosition);    mLastVisiblePosition=-1;  }  final int resultCount=(data == null) ? 0 : data.getCount();  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onLoadFinished" + getDebugContext()+ " fount "+ resultCount+ " rows");  }  mAdapter.notifyDataSetChanged();  if (mLastVisiblePosition > 0) {    mGalleryView.smoothScrollToPosition(mLastVisiblePosition);    mLastVisiblePosition=-1;  }  if (context instanceof OnGalleryInteractionListener) {    ((OnGalleryInteractionListener)context).setResultCount(resultCount);  }  multiSelectionReplaceTitleIfNecessary();}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  cipher.init(forEncryption,params);}  }
class C{  public synchronized void release(){  if (eventQueue != null) {    eventQueue.clear();    eventQueue=null;  }  if (controlQueue != null) {    controlQueue.clear();    controlQueue=null;  }  if (watchPredicates != null) {    watchPredicates.clear();    watchPredicates=null;  }}  }
class C{  @Override public void sync(){}  }
class C{  IVariableBinding resolveField(SuperFieldAccess fieldAccess){  return null;}  }
class C{  public static String checkEmpty(String string1,String string2){  if (UtilValidate.isNotEmpty(string1))   return string1; else   if (UtilValidate.isNotEmpty(string2))   return string2; else   return "";}  }
class C{  public static ModeScope changeMode(Mode mode){  Mode previousMode=tl.get();  tl.set(mode);  return new ModeScope(previousMode);}  }
class C{  public void addEventTrigger(EventTrigger<?> trigger){  eventTriggers.add(trigger);}  }
class C{  private static Constant throwInvalid(int idx){  throw new ExceptionWithContext("invalid constant pool index " + Hex.u2(idx));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_3__OR_OP_1:    return getOrOp_1();case UmplePackage.ANONYMOUS_LINKING_OP_3__CONSTRAINT_EXPR_1:  return getConstraintExpr_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String replaceShardNumber(String template,int shardNumber){  return replaceShardPattern(template,"S+",shardNumber);}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEOffsetElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.BINDING_PROPERTY___GET_NAME:    return getName();case N4JSPackage.BINDING_PROPERTY___IS_VALID_NAME:  return isValidName();}return super.eInvoke(operationID,arguments);}  }
class C{  public void deleteRepeat(){  FormIndex fi=mFormEntryController.deleteRepeat();  mFormEntryController.jumpToIndex(fi);}  }
class C{  public Map<String,ClassificationResult> test(String nameOfTrain) throws Exception {  System.out.println("Starting NRC Test");  System.out.println("Tweets: " + this.tweetList.size());  String trainname="";  if (!nameOfTrain.equals("")) {    trainname=nameOfTrain;  } else {    trainname="Trained-Features-NRC";  }  BufferedReader reader=new BufferedReader(new FileReader("resources/arff/" + trainname + ".arff"));  Instances train=new Instances(reader);  train.setClassIndex(train.numAttributes() - 1);  reader.close();  LibLINEAR classifier=new LibLINEAR();  classifier.setProbabilityEstimates(true);  classifier.setSVMType(new SelectedTag(0,LibLINEAR.TAGS_SVMTYPE));  classifier.setCost(0.5);  classifier.buildClassifier(train);  train.delete();  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> senti140UniLexi=this.loadLexicon("sentiment140/unigrams-pmilexicon");  Map<String,Double> hashtagUniLexi=this.loadLexicon("hashtag/unigrams-pmilexicon");  Map<String,Double> senti140BiLexi=this.loadLexicon("sentiment140/bigrams-pmilexicon");  Map<String,Double> hashtagBiLexi=this.loadLexicon("hashtag/bigrams-pmilexicon");  Map<String,Double> MPQALexi=this.loadMPQA();  Map<String,Double> BingLiuLexi=this.loadBingLiu();  Map<String,Double> NRCLexi=this.loadNRC();  Map<String,Integer> featureMap=new HashMap<String,Integer>();  for (int i=0; i < train.numAttributes(); i++) {    featureMap.put(train.attribute(i).name(),train.attribute(i).index());  }  Map<String,ClassificationResult> resultMap=new HashMap<String,ClassificationResult>();  for (  Tweet tweet : this.tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=this.getNGrams(tweet,4);    for (    String nGram : nGramSet) {      Integer index=featureMap.get("NGRAM_" + nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> CharNGramSet=this.getCharNGrams(tweet);    for (    String nGram : CharNGramSet) {      Integer index=featureMap.get("CHARNGRAM_" + nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Map<String,Integer> posTags=this.getPosTags(tweet);    for (    Map.Entry<String,Integer> posTag : posTags.entrySet()) {      Integer index=featureMap.get("POS_" + posTag.getKey());      if (index != null) {        instance.setValue(index,posTag.getValue());      }    }    Set<String> clusterSet=this.getClusters(tweet);    for (    String cluster : clusterSet) {      Integer index=featureMap.get("CLUSTER_" + cluster);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> emoticonSet=this.getEmoticons(tweet);    for (    String emoticon : emoticonSet) {      Integer index=featureMap.get("EMO_" + emoticon);      if (index != null) {        instance.setValue(index,1);      }    }    instance.setValue(featureMap.get("allCaps"),this.getAllCapsCount(tweet.getRawTweetString()));    instance.setValue(featureMap.get("hashtags"),this.getHashtagCount(tweet.getTweetString()));    instance.setValue(featureMap.get("punctuationCount"),this.getPunctuation(tweet.getTweetString()));    if (this.isLastPunctuation(tweet.getTweetString())) {      instance.setValue(featureMap.get("punctuationLast"),1);    } else {      instance.setValue(featureMap.get("punctuationLast"),0);    }    if (tweet.isLastEmoticon()) {      instance.setValue(featureMap.get("emoticonLast"),1);    } else {      instance.setValue(featureMap.get("emoticonLast"),0);    }    instance.setValue(featureMap.get("elongatedWords"),this.getElongatedCount(tweet.getTweetString()));    instance.setValue(featureMap.get("negationCount"),tweet.getNegationCount());    List<Double> senti140UniPos=this.getLexiScores(senti140UniLexi,tweet.getWordList(),false);    instance.setValue(featureMap.get("senti140UniTotalCountPos"),senti140UniPos.get(0));    instance.setValue(featureMap.get("senti140UniTotalScorePos"),senti140UniPos.get(1));    instance.setValue(featureMap.get("senti140UniMaxScorePos"),senti140UniPos.get(2));    instance.setValue(featureMap.get("senti140UniLastScorePos"),senti140UniPos.get(3));    List<Double> hashtagUniPos=this.getLexiScores(hashtagUniLexi,tweet.getWordList(),false);    instance.setValue(featureMap.get("hashtagUniTotalCountPos"),hashtagUniPos.get(0));    instance.setValue(featureMap.get("hashtagUniTotalScorePos"),hashtagUniPos.get(1));    instance.setValue(featureMap.get("hashtagUniMaxScorePos"),hashtagUniPos.get(2));    instance.setValue(featureMap.get("hashtagUniLastScorePos"),hashtagUniPos.get(3));    List<Double> senti140UniNeg=this.getLexiScores(senti140UniLexi,tweet.getWordList(),true);    instance.setValue(featureMap.get("senti140UniTotalCountNeg"),senti140UniNeg.get(0));    instance.setValue(featureMap.get("senti140UniTotalScoreNeg"),senti140UniNeg.get(1));    instance.setValue(featureMap.get("senti140UniMaxScoreNeg"),senti140UniNeg.get(2));    instance.setValue(featureMap.get("senti140UniLastScoreNeg"),senti140UniNeg.get(3));    List<Double> hashtagUniNeg=this.getLexiScores(hashtagUniLexi,tweet.getWordList(),true);    instance.setValue(featureMap.get("hashtagUniTotalCountNeg"),hashtagUniNeg.get(0));    instance.setValue(featureMap.get("hashtagUniTotalScoreNeg"),hashtagUniNeg.get(1));    instance.setValue(featureMap.get("hashtagUniMaxScoreNeg"),hashtagUniNeg.get(2));    instance.setValue(featureMap.get("hashtagUniLastScoreNeg"),hashtagUniNeg.get(3));    Set<String> biGramSet=this.getNGrams(tweet,2,2);    List<Double> senti140BiPos=this.getLexiScoresBi(senti140BiLexi,biGramSet,false);    instance.setValue(featureMap.get("senti140BiTotalCountPos"),senti140BiPos.get(0));    instance.setValue(featureMap.get("senti140BiTotalScorePos"),senti140BiPos.get(1));    instance.setValue(featureMap.get("senti140BiMaxScorePos"),senti140BiPos.get(2));    instance.setValue(featureMap.get("senti140BiLastScorePos"),senti140BiPos.get(3));    List<Double> hashtagBiPos=this.getLexiScoresBi(hashtagBiLexi,biGramSet,false);    instance.setValue(featureMap.get("hashtagBiTotalCountPos"),hashtagBiPos.get(0));    instance.setValue(featureMap.get("hashtagBiTotalScorePos"),hashtagBiPos.get(1));    instance.setValue(featureMap.get("hashtagBiMaxScorePos"),hashtagBiPos.get(2));    instance.setValue(featureMap.get("hashtagBiLastScorePos"),hashtagBiPos.get(3));    List<Double> senti140BiNeg=this.getLexiScoresBi(senti140BiLexi,biGramSet,true);    instance.setValue(featureMap.get("senti140BiTotalCountNeg"),senti140BiNeg.get(0));    instance.setValue(featureMap.get("senti140BiTotalScoreNeg"),senti140BiNeg.get(1));    instance.setValue(featureMap.get("senti140BiMaxScoreNeg"),senti140BiNeg.get(2));    instance.setValue(featureMap.get("senti140BiLastScoreNeg"),senti140BiNeg.get(3));    List<Double> hashtagBiNeg=this.getLexiScoresBi(hashtagBiLexi,biGramSet,true);    instance.setValue(featureMap.get("hashtagBiTotalCountNeg"),hashtagBiNeg.get(0));    instance.setValue(featureMap.get("hashtagBiTotalScoreNeg"),hashtagBiNeg.get(1));    instance.setValue(featureMap.get("hashtagBiMaxScoreNeg"),hashtagBiNeg.get(2));    instance.setValue(featureMap.get("hashtagBiLastScoreNeg"),hashtagBiNeg.get(3));    List<Double> MPQAPos=this.getLexiScores(MPQALexi,tweet.getWordList(),false);    instance.setValue(featureMap.get("MPQATotalCountPos"),MPQAPos.get(0));    instance.setValue(featureMap.get("MPQATotalScorePos"),MPQAPos.get(1));    instance.setValue(featureMap.get("MPQAMaxScorePos"),MPQAPos.get(2));    instance.setValue(featureMap.get("MPQALastScorePos"),MPQAPos.get(3));    List<Double> MPQANeg=this.getLexiScores(MPQALexi,tweet.getWordList(),true);    instance.setValue(featureMap.get("MPQATotalCountNeg"),MPQANeg.get(0));    instance.setValue(featureMap.get("MPQATotalScoreNeg"),MPQANeg.get(1));    instance.setValue(featureMap.get("MPQAMaxScoreNeg"),MPQANeg.get(2));    instance.setValue(featureMap.get("MPQALastScoreNeg"),MPQANeg.get(3));    List<Double> BingLiuPos=this.getLexiScores(BingLiuLexi,tweet.getWordList(),false);    instance.setValue(featureMap.get("BingLiuTotalCountPos"),BingLiuPos.get(0));    instance.setValue(featureMap.get("BingLiuTotalScorePos"),BingLiuPos.get(1));    instance.setValue(featureMap.get("BingLiuMaxScorePos"),BingLiuPos.get(2));    instance.setValue(featureMap.get("BingLiuLastScorePos"),BingLiuPos.get(3));    List<Double> BingLiuNeg=this.getLexiScores(BingLiuLexi,tweet.getWordList(),true);    instance.setValue(featureMap.get("BingLiuTotalCountNeg"),BingLiuNeg.get(0));    instance.setValue(featureMap.get("BingLiuTotalScoreNeg"),BingLiuNeg.get(1));    instance.setValue(featureMap.get("BingLiuMaxScoreNeg"),BingLiuNeg.get(2));    instance.setValue(featureMap.get("BingLiuLastScoreNeg"),BingLiuNeg.get(3));    List<Double> NRCPos=this.getLexiScores(NRCLexi,tweet.getWordList(),false);    instance.setValue(featureMap.get("NRCTotalCountPos"),NRCPos.get(0));    instance.setValue(featureMap.get("NRCTotalScorePos"),NRCPos.get(1));    instance.setValue(featureMap.get("NRCMaxScorePos"),NRCPos.get(2));    instance.setValue(featureMap.get("NRCLastScorePos"),NRCPos.get(3));    List<Double> NRCNeg=this.getLexiScores(NRCLexi,tweet.getWordList(),true);    instance.setValue(featureMap.get("NRCTotalCountNeg"),NRCNeg.get(0));    instance.setValue(featureMap.get("NRCTotalScoreNeg"),NRCNeg.get(1));    instance.setValue(featureMap.get("NRCMaxScoreNeg"),NRCNeg.get(2));    instance.setValue(featureMap.get("NRCLastScoreNeg"),NRCNeg.get(3));    train.add(instance);    double result=classifier.classifyInstance(train.lastInstance());    double[] resultDistribution=classifier.distributionForInstance(train.lastInstance());    resultMap.put(tweet.getTweetID(),new ClassificationResult(tweet,resultDistribution,result));  }  return resultMap;}  }
class C{  private void createEmptyTable(String instanceName,String tableId){  Table.Builder tableBuilder=Table.newBuilder();  Map<String,ColumnFamily> columnFamilies=tableBuilder.getMutableColumnFamilies();  columnFamilies.put(COLUMN_FAMILY_NAME,ColumnFamily.newBuilder().build());  CreateTableRequest.Builder createTableRequestBuilder=CreateTableRequest.newBuilder().setParent(instanceName).setTableId(tableId).setTable(tableBuilder.build());  tableAdminClient.createTable(createTableRequestBuilder.build());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override final public boolean isBigdataNativeService(){  return false;}  }
class C{  public void addRule(final Rule rule){  rules.add(rule);}  }
class C{  public EaseOut(){}  }
class C{  public void update(Path crawlDb,Path webGraphDb) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("ScoreUpdater: starting at " + sdf.format(start));  Configuration conf=getConf();  FileSystem fs=FileSystem.get(conf);  LOG.info("Running crawldb update " + crawlDb);  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  Path crawlDbCurrent=new Path(crawlDb,CrawlDb.CURRENT_NAME);  Path newCrawlDb=new Path(crawlDb,Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf updater=new NutchJob(conf);  updater.setJobName("Update CrawlDb from WebGraph");  FileInputFormat.addInputPath(updater,crawlDbCurrent);  FileInputFormat.addInputPath(updater,nodeDb);  FileOutputFormat.setOutputPath(updater,newCrawlDb);  updater.setInputFormat(SequenceFileInputFormat.class);  updater.setMapperClass(ScoreUpdater.class);  updater.setReducerClass(ScoreUpdater.class);  updater.setMapOutputKeyClass(Text.class);  updater.setMapOutputValueClass(ObjectWritable.class);  updater.setOutputKeyClass(Text.class);  updater.setOutputValueClass(CrawlDatum.class);  updater.setOutputFormat(MapFileOutputFormat.class);  try {    JobClient.runJob(updater);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    if (fs.exists(newCrawlDb)) {      fs.delete(newCrawlDb,true);    }    throw e;  }  LOG.info("ScoreUpdater: installing new crawldb " + crawlDb);  CrawlDb.install(updater,crawlDb);  long end=System.currentTimeMillis();  LOG.info("ScoreUpdater: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public void logTrace(Object message){  logInternal(TRACE,message,null);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);  }  startState.taskState=patchState.taskState;  return startState;}  }
class C{  public void startLogCleaningProcess(File accessLogDirectory){  logger.info("Cleaning up tomcat access log files under : {}",accessLogDirectory.getAbsolutePath());  Timer timer=new Timer(IS_DAEMON);  AccessLogCleanerTask tomcatAccessLogCleaner=new AccessLogCleanerTask(accessLogDirectory);  logger.info("Starting to schedule the log clean up tasks..");  timer.scheduleAtFixedRate(tomcatAccessLogCleaner,0,TIMER_TASK_DELAY_IN_MILLIS);}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  if (buffer == null || buffer.length < len) {    buffer=new byte[len];  }  int length=in.read(buffer,0,len);  for (int i=0; i < length; i++) {    cbuf[off + i]=(char)(0xFF & buffer[i]);  }  return length;}  }
class C{  private int findAPICallsWithNullReturnValues() throws Exception {  List<SootClass> classes=new LinkedList<SootClass>();  classes.addAll(Scene.v().getClasses());  int numChanges=0;  for (  SootClass clz : classes) {    for (    SootMethod method : clz.getMethods()) {      if (API.v().isSystemMethod(method))       continue;      if (method.isPhantom() || method.isAbstract() || !method.isConcrete())       continue;      if (!PTABridge.v().isReachableMethod(method))       continue;      boolean DEBUG=false;      Body body=method.getActiveBody();      StmtBody stmtBody=(StmtBody)body;      Chain units=stmtBody.getUnits();      Iterator stmtIt=units.snapshotIterator();      while (stmtIt.hasNext()) {        Stmt stmt=(Stmt)stmtIt.next();        if (stmt instanceof AssignStmt) {          AssignStmt assign=(AssignStmt)stmt;          if (assign.getRightOp() instanceof InvokeExpr) {            boolean hasAPITarget=false;            InvokeExpr invoke=(InvokeExpr)assign.getRightOp();            if (!(invoke.getMethodRef().returnType() instanceof RefLikeType))             continue;            Collection<SootMethod> targets=PTABridge.v().getTargetsInsNoContext(stmt);            for (            SootMethod target : targets)             if (API.v().isSystemMethod(target)) {              hasAPITarget=true;              break;            }            if (hasAPITarget) {              Set<AllocNode> nodes=(Set<AllocNode>)PTABridge.v().getPTSetIns(assign.getLeftOp());              if (DEBUG) {                System.out.println(stmt);                for (                AllocNode node : nodes) {                  System.out.println(node);                }              }              if (nodes.isEmpty()) {                if (addUnmodeledObject(assign,method,DEBUG)) {                  numChanges++;                }              }            }          }        }      }    }  }  return numChanges;}  }
class C{  public boolean addToCompletedList(DownloadInfoRunnable downloadInfoRunnable){  return mCompletedList.add(downloadInfoRunnable);}  }
class C{  public final void writeLong(long v) throws IOException {  writeBuffer[0]=(byte)(v >>> 56);  writeBuffer[1]=(byte)(v >>> 48);  writeBuffer[2]=(byte)(v >>> 40);  writeBuffer[3]=(byte)(v >>> 32);  writeBuffer[4]=(byte)(v >>> 24);  writeBuffer[5]=(byte)(v >>> 16);  writeBuffer[6]=(byte)(v >>> 8);  writeBuffer[7]=(byte)(v >>> 0);  out.write(writeBuffer,0,8);  incCount(8);}  }
class C{  private GeocodingResult geocodeSnappedPoint(GeoApiContext context,SnappedPoint point) throws Exception {  GeocodingResult[] results=GeocodingApi.newRequest(context).place(point.placeId).await();  if (results.length > 0) {    return results[0];  }  return null;}  }
class C{  protected SymmetricMatrix secureProduct(SymmetricMatrix a){  return new SymmetricMatrix(productComponents(a));}  }
class C{  public int storeByCondition(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fieldsToSet,EntityCondition condition) throws GenericEntityException {  if (modelEntity == null || condition == null) {    return 0;  }  return genericDAO.updateByCondition(delegator,modelEntity,fieldsToSet,condition);}  }
class C{  public AccessibleAttributeSequence(int start,int end,AttributeSet attr){  startIndex=start;  endIndex=end;  attributes=attr;}  }
class C{  protected void installListeners(JPanel p){  p.addPropertyChangeListener(this);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_1__CONSTRAINT_EXPR_1:    return constraintExpr_1 != null && !constraintExpr_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private boolean validateMarketplaceId(String marketplaceId){  try {    getMarketplaceService().getMarketplaceById(marketplaceId);    return true;  } catch (  SaaSApplicationException e) {    this.resetMarketplaces();    this.ui.handleException(e);  }  return false;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < numVertices; i++) {    for (int j=0; j < numVertices; j++) {      if (j == i)       continue;      if (capacity[i][j] > 0) {        sb.append(i + " -> " + j+ "["+ capacity[i][j]+ "]").append('\n');      }    }  }  return sb.toString();}  }
class C{  public static Geo[] computeCorridor(Geo[] path,double radius){  return computeCorridor(path,radius,radians(10.0),true);}  }
class C{  public Object clone() throws CloneNotSupportedException {  VwapSeries clone=(VwapSeries)super.clone();  return clone;}  }
class C{  public ActualControlFlowGraph computeReverseCFG(){  return new ActualControlFlowGraph(this);}  }
class C{  public static void pushParameter(boolean o){  parametersBoolean.push(o);}  }
class C{  public static long jenkins(final BitVector bv,final long prefixLength,final long[] aa,final long bb[],final long cc[]){  if (prefixLength == 0)   return aa[0] ^ 0x36071e726d0ba0c5L;  int stateOffset=(int)(prefixLength / (3 * Long.SIZE));  long from=(stateOffset * 3) * Long.SIZE;  long a=aa[stateOffset];  long b=bb[stateOffset];  long c=cc[stateOffset];  if (prefixLength - from > Long.SIZE * 2) {    a+=bv.getLong(from,from + Long.SIZE);    b+=bv.getLong(from + Long.SIZE,from + 2 * Long.SIZE);    c+=bv.getLong(from + 2 * Long.SIZE,Math.min(from + 3 * Long.SIZE,prefixLength));    a-=b;    a-=c;    a^=(c >>> 43);    b-=c;    b-=a;    b^=(a << 9);    c-=a;    c-=b;    c^=(b >>> 8);    a-=b;    a-=c;    a^=(c >>> 38);    b-=c;    b-=a;    b^=(a << 23);    c-=a;    c-=b;    c^=(b >>> 5);    a-=b;    a-=c;    a^=(c >>> 35);    b-=c;    b-=a;    b^=(a << 49);    c-=a;    c-=b;    c^=(b >>> 11);    a-=b;    a-=c;    a^=(c >>> 12);    b-=c;    b-=a;    b^=(a << 18);    c-=a;    c-=b;    c^=(b >>> 22);    from+=3 * Long.SIZE;  }  c+=prefixLength;  long residual=prefixLength - from;  if (residual > 0) {    if (residual > Long.SIZE) {      a+=bv.getLong(from,from + Long.SIZE);      residual-=Long.SIZE;    }    if (residual != 0)     b+=bv.getLong(prefixLength - residual,prefixLength);  }  a-=b;  a-=c;  a^=(c >>> 43);  b-=c;  b-=a;  b^=(a << 9);  c-=a;  c-=b;  c^=(b >>> 8);  a-=b;  a-=c;  a^=(c >>> 38);  b-=c;  b-=a;  b^=(a << 23);  c-=a;  c-=b;  c^=(b >>> 5);  a-=b;  a-=c;  a^=(c >>> 35);  b-=c;  b-=a;  b^=(a << 49);  c-=a;  c-=b;  c^=(b >>> 11);  a-=b;  a-=c;  a^=(c >>> 12);  b-=c;  b-=a;  b^=(a << 18);  c-=a;  c-=b;  c^=(b >>> 22);  return c;}  }
class C{  private ByteBufferSerializer<?>[] writeHeader(BundleStreamSource source,ByteBuffer buffer,WritableByteChannel output) throws IOException {  final BundleMeta meta=source.getMeta();  final int nummeta=meta.size();  @SuppressWarnings("rawtypes") final ByteBufferSerializer[] serializers=new ByteBufferSerializer[1 + nummeta];  assert (buffer.position() == 0) : "Buffer is supposed to be at 0.";  buffer.putInt(MAGIC);  if (source.hasDBIDs()) {    buffer.putInt(1 + nummeta);    ByteBufferSerializer<DBID> ser=DBIDFactory.FACTORY.getDBIDSerializer();    TypeInformationSerializer.STATIC.toByteBuffer(buffer,new SimpleTypeInformation<>(DBID.class,ser));    serializers[0]=ser;  } else {    buffer.putInt(nummeta);  }  for (int i=0; i < nummeta; i++) {    SimpleTypeInformation<?> type=meta.get(i);    ByteBufferSerializer<?> ser=type.getSerializer();    if (ser == null) {      throw new AbortException("Cannot serialize - no serializer found for type: " + type.toString());    }    TypeInformationSerializer.STATIC.toByteBuffer(buffer,type);    serializers[i + 1]=ser;  }  return serializers;}  }
class C{  public DragHandle(Figure owner){  super(owner);}  }
class C{  private Map<String,String> loadDCATPrefixes(){  HashMap<String,String> prefixes=new HashMap<String,String>();  Closer closer=Closer.create();  try {    InputStreamUtils streamUtils=new InputStreamUtils();    InputStream configStream=streamUtils.classpathStream(PREFIXES_PROPERTIES);    if (configStream == null) {      LOG.error("Could not load DCAT prefixes from file: " + PREFIXES_PROPERTIES);    } else {      Properties properties=new Properties();      properties.load(configStream);      for (      Map.Entry<Object,Object> entry : properties.entrySet()) {        String key=StringUtils.trim((String)entry.getKey());        String value=StringUtils.trim((String)entry.getValue());        if (key != null && value != null) {          prefixes.put(key,value);        } else {          throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,"Invalid properties file: " + PREFIXES_PROPERTIES);        }      }      LOG.debug("Loaded DCAT prefixes: " + prefixes.toString());    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      closer.close();    } catch (    IOException e) {      LOG.error("Failed to close input stream on DCAT prefixes file: " + PREFIXES_PROPERTIES);    }  }  return prefixes;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testIntMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.INT);  sortField.setMissingValue(Integer.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static boolean isFilenameValid(String filename){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  @Override public String toString(){  return toString("%f");}  }
class C{  private VOPricedOption copyOption(VOPricedOption optionOld){  VOPricedOption optionNew=new VOPricedOption();  optionNew.setKey(optionOld.getKey());  optionNew.setParameterOptionKey(optionOld.getParameterOptionKey());  optionNew.setPricePerSubscription(optionOld.getPricePerSubscription());  optionNew.setPricePerUser(optionOld.getPricePerUser());  optionNew.setRoleSpecificUserPrices(optionOld.getRoleSpecificUserPrices());  optionNew.setVersion(optionOld.getVersion());  return optionNew;}  }
class C{  static List<Tweet> orderTweets(List<Long> tweetIds,List<Tweet> tweets){  final HashMap<Long,Tweet> idToTweet=new HashMap<>();  final ArrayList<Tweet> ordered=new ArrayList<>();  for (  Tweet tweet : tweets) {    idToTweet.put(tweet.id,tweet);  }  for (  Long id : tweetIds) {    if (idToTweet.containsKey(id)) {      ordered.add(idToTweet.get(id));    }  }  return ordered;}  }
class C{  public void addSubclassNoBidirectionalUpdate(ClassType type){  if (null == subClasses) {    subClasses=new TypeSet<ClassType>();  }  subClasses.addOrUpdate(type);}  }
class C{  public TransitionAlpha createTAlpha(String transitionId,MediaItem afterMediaItem,MediaItem beforeMediaItem,long durationMs,int behavior,String maskFilename,int blendingPercent,boolean invert){  TransitionAlpha transA=null;  transA=new TransitionAlpha(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior,maskFilename,blendingPercent,invert);  return transA;}  }
class C{  protected void updateTile(DrawContext dc,SurfaceObjectTile tile){  Texture texture=tile.getTexture(dc.getTextureCache());  if (!this.isForceTileUpdates()) {    Object tileStateKey=tile.getStateKey(dc);    if (texture != null && tileStateKey.equals(tile.lastUpdateStateKey))     return;    tile.lastUpdateStateKey=tileStateKey;  }  if (texture == null) {    texture=this.createTileTexture(dc,tile.getWidth(),tile.getHeight());    tile.setTexture(dc.getTextureCache(),texture);  }  if (texture == null) {    Logging.logger().warning(Logging.getMessage("nullValue.TextureIsNull"));    return;  }  try {    dc.setValue(AVKey.SURFACE_TILE_DRAW_CONTEXT,this.createSurfaceTileDrawContext(tile));    this.rttSupport.setColorTarget(dc,texture);    this.rttSupport.clear(dc,new Color(0,0,0,0));    if (tile.hasObjects()) {      for (      SurfaceRenderable so : tile.getObjectList()) {        so.render(dc);      }    }  }  finally {    this.rttSupport.setColorTarget(dc,null);    dc.removeKey(AVKey.SURFACE_TILE_DRAW_CONTEXT);  }}  }
class C{  public void addNotExportedLibRelative(String pLibPath) throws MalformedURLException {  URI uri=new File(getPluginPath() + File.separator + pLibPath).toURI();  URL url=uri.toURL();  fNotExportedLibs.add(url);}  }
class C{  public AssemblerImp(){}  }
class C{  private void updateClock(){  scheduleClockTask(0);}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  public void insert(INode n){  list.insert(n);}  }
class C{  private void waitToRetry(){  (new RetryTimeKeeper(2000)).waitForBucketsRecovery();}  }
class C{  public Solution search(INode initial,INode goal){  INodeSet open=StateStorageFactory.create(StateStorageFactory.TREE);  INode copy=initial.copy();  scoringFunction.score(copy);  open.insert(copy);  INodeSet closed=StateStorageFactory.create(closedStorage);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    if (n.equals(goal)) {      numOpen=open.size();      numClosed=closed.size();      return new Solution(initial,n);    }    DepthTransition trans=(DepthTransition)n.storedData();    int depth=1;    if (trans != null) {      depth=trans.depth + 1;    }    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      successor.storedData(new DepthTransition(move,n,depth));      scoringFunction.score(successor);      numMoves++;      INode past=closed.contains(successor);      if (past != null) {        if (successor.score() >= past.score()) {          continue;        }        closed.remove(past);      }      open.insert(successor);    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,false);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public boolean manipulatesSidedRedstoneOutput(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  private static DateTimeFormatter createFormatterForPattern(String pattern){  if (pattern == null || pattern.length() == 0) {    throw new IllegalArgumentException("Invalid pattern specification");  }  DateTimeFormatter formatter=null;synchronized (cPatternedCache) {    formatter=cPatternedCache.get(pattern);    if (formatter == null) {      DateTimeFormatterBuilder builder=new DateTimeFormatterBuilder();      parsePatternTo(builder,pattern);      formatter=builder.toFormatter();      cPatternedCache.put(pattern,formatter);    }  }  return formatter;}  }
class C{  public DataSizeAction(String group,String field){  super(group,NO_SIZE);  m_dataField=field;}  }
class C{  public void testComplexUrlInvalid(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index.html?firstParam=myParam",TestSolution.FAILED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public static final JIPCons create(final JIPTerm head,final JIPTerm tail){  if (head != null) {    if (tail != null)     return new JIPCons(new ConsCell(head.getTerm(),tail.getTerm())); else     return new JIPCons(new ConsCell(head.getTerm(),null));  } else {    if (tail != null)     return new JIPCons(new ConsCell(null,tail.getTerm())); else     return new JIPCons(ConsCell.NIL);  }}  }
class C{  public void testDoConfigureSetsDefaultConfigurationVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"//weblogic:configuration-version",config);}  }
class C{  public static void main(String[] args) throws StartupError {  try {    Bootstrap.init(args);  } catch (  Throwable t) {    throw new StartupError(t);  }}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  public void commitOffsets(Map<AbstractKafkaPartitioner.PartitionMeta,Long> offsetsInWindow){  if (offsetsInWindow == null) {    return;  }  for (  Map.Entry<AbstractKafkaPartitioner.PartitionMeta,Long> e : offsetsInWindow.entrySet()) {    String cluster=e.getKey().getCluster();    Map<TopicPartition,OffsetAndMetadata> topicPartitionOffsetMap=offsetsToCommit.get(cluster);    if (topicPartitionOffsetMap == null) {      logger.warn("committed offset map should be initialized by consumer thread!");      continue;    }    topicPartitionOffsetMap.put(e.getKey().getTopicPartition(),new OffsetAndMetadata(e.getValue()));  }}  }
class C{  public Name findName(int firstQuad){  int hash=calcHash(firstQuad);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null) {      return null;    }    if (name.equals(firstQuad)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,firstQuad,0);    }  }  return null;}  }
class C{  public boolean isMinuteHandVisible(){  return minuteHandVisible;}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public List<T> queryAsList(){  QuantumFluxCursor<T> cursor=queryAsCursor();  try {    List<T> resultList=new ArrayList<>(cursor.getCount());    while (cursor.moveToNext()) {      resultList.add(cursor.inflate());    }    return resultList;  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void preSerialize(){  delegate.addAll(observableDelegate);}  }
class C{  public IpInterfaceRestRep register(URI id){  return client.post(IpInterfaceRestRep.class,getIdUrl() + "/register",id);}  }
class C{  protected void revealInEditor(TreeElement<?,?> treeElement,boolean activate){  IProject project=fCallHierarchy.getProject();  Object data=treeElement.getData();  if (data instanceof SourceMethodNode) {    Set<MethodModel> methods=getMethodModels(treeElement);    if (methods == null || methods.isEmpty()) {      CallerHierarchy callerHierarchy=(CallerHierarchy)fCallHierarchy;      Set<JsonElement> calls=getCalls(callerHierarchy,treeElement);      if (!calls.isEmpty())       DroidsafePluginUtilities.revealInEditor(project,calls.iterator().next(),activate); else {        SourceMethodNode methodNode=(SourceMethodNode)data;        String className=methodNode.getSourceClass();        int lineNumber=methodNode.getLine();        if (className != null || lineNumber > 0) {          DroidsafePluginUtilities.revealInEditor(project,className,lineNumber,activate);        } else {          DroidsafePluginUtilities.error("No source location info for method " + methodNode);        }      }    } else {      DroidsafePluginUtilities.revealInEditor(project,methods.iterator().next(),activate);    }  } else   if (data instanceof JsonElement) {    DroidsafePluginUtilities.revealInEditor(project,(JsonElement)data,activate);  }}  }
class C{  public void jmp(Register dest){  super.br(dest);}  }
class C{  private static PieDataset createDataset(){  DefaultPieDataset dataset=new DefaultPieDataset();  dataset.setValue("Samsung",new Double(27.8));  dataset.setValue("Others",new Double(55.3));  dataset.setValue("Nokia",new Double(16.8));  dataset.setValue("Apple",new Double(17.1));  return dataset;}  }
class C{  public KeepAliveFilter(KeepAliveMessageFactory messageFactory,IdleStatus interestedIdleStatus,KeepAliveRequestTimeoutHandler policy){  this(messageFactory,interestedIdleStatus,policy,60,30);}  }
class C{  @Synchronized("INSTANCE_CREATE_LOCK") public static void startServer(Charset encoding,InetAddress localAddress){  startServer(encoding,localAddress,DEFAULT_PORT);}  }
class C{  public static CGPoint ccpClamp(CGPoint p,CGPoint min_inclusive,CGPoint max_inclusive){  return ccp(clampf(p.x,min_inclusive.x,max_inclusive.x),clampf(p.y,min_inclusive.y,max_inclusive.y));}  }
class C{  public static void main(String... args) throws Exception {  new SQLInjection().run("org.h2.Driver","jdbc:h2:test","sa","sa");}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof CryptoPermission)) {    return false;  }  CryptoPermission cryptoPerm=(CryptoPermission)permission;  PermissionCollection pc=getPermissionCollection(cryptoPerm.getAlgorithm());  return pc.implies(cryptoPerm);}  }
class C{  public static void add(Review review){  long restaurantId=Restaurants.idForGlobalId(review.restaurantId);  boolean restaurantExists=restaurantId > 0;  if (!restaurantExists) {    restaurantId=Restaurants.add(review.restaurantId);  }  if (restaurantId > 0) {    ContentResolver cr=cr();    review.localId=ContentUris.parseId(cr.insert(Reviews.CONTENT_URI,Reviews.values(review)));    cr.call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_RATING,String.valueOf(restaurantId),null);    if (!restaurantExists) {      RestaurantService.download(restaurantId);    }  }}  }
class C{  public void addMembers(String senderId,String apiKey,String groupName,String groupKey,Bundle members){  try {    HttpRequest httpRequest=new HttpRequest();    httpRequest.setHeader(HEADER_CONTENT_TYPE,CONTENT_TYPE_JSON);    httpRequest.setHeader(HEADER_AUTHORIZATION,"key=" + apiKey);    httpRequest.setHeader(HEADER_PROJECT_ID,senderId);    JSONObject requestBody=new JSONObject();    requestBody.put("operation","add");    requestBody.put("notification_key_name",groupName);    requestBody.put("notification_key",groupKey);    requestBody.put("registration_ids",new JSONArray(bundleValues2Array(members)));    httpRequest.doPost(GCM_GROUPS_ENDPOINT,requestBody.toString());    JSONObject responseBody=new JSONObject(httpRequest.getResponseBody());    if (responseBody.has("error")) {      mLogger.log(Log.INFO,"Error while adding new group members." + "\ngroupName: " + groupName + "\ngroupKey: "+ groupKey+ "\nhttpResponse: "+ httpRequest.getResponseBody());      MainActivity.showToast(mContext,R.string.group_toast_add_members_failed,responseBody.getString("error"));    } else {      Sender sender=mSenders.getSender(senderId);      DeviceGroup newGroup=sender.groups.get(groupName);      for (      String name : members.keySet()) {        newGroup.tokens.put(name,members.getString(name));      }      mSenders.updateSender(sender);      mLogger.log(Log.INFO,"Group members added successfully." + "\ngroupName: " + groupName + "\ngroupKey: "+ groupKey);      MainActivity.showToast(mContext,R.string.group_toast_add_members_succeeded);    }  } catch (  JSONException|IOException e) {    mLogger.log(Log.INFO,"Exception while adding new group members." + "\nerror: " + e.getMessage() + "\ngroupName: "+ groupName+ "\ngroupKey: "+ groupKey);    MainActivity.showToast(mContext,R.string.group_toast_add_members_failed,e.getMessage());  }}  }
class C{  @Override public void addAttribute(String name,double value){  String str=Double.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  ((Element)current).setAttribute(name,str);}  }
class C{  public void deleteUser(String email) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  service.delete(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain + "/"+ email));}  }
class C{  public double calculateLogLikelihood(){  DemographicFunction demoFunction=demoModel.getDemographicFunction();  double lnL=Coalescent.calculateLogLikelihood(getIntervals(),demoFunction,demoFunction.getThreshold());  if (Double.isNaN(lnL) || Double.isInfinite(lnL)) {    Logger.getLogger("warning").severe("CoalescentLikelihood for " + demoModel.getId() + " is "+ Double.toString(lnL));  }  return lnL;}  }
class C{  protected String paramString(){  return super.paramString() + ",echoChar=" + echoChar;}  }
class C{  public AuthorityKeyIdentifier(GeneralNames name,BigInteger serialNumber){  this.keyidentifier=null;  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  protected void run_ThreadSizeLoop() throws Exception {  for (int i=25; i <= 100; i+=25) {    setNumWorkers(i);    try {      Thread.sleep(60 * 1000);    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCT_FIELD___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:    return getDefaultMemberAccessModifier();case TypesPackage.TSTRUCT_FIELD___IS_STATIC:  return isStatic();case TypesPackage.TSTRUCT_FIELD___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public void assertMessagesReceivedNoWait(int messageCount){  assertEquals("expected number of messages when received",messageCount,getMessageCount());}  }
class C{  public void testOneTrackTwoSegmentsNoTime() throws Exception {  Capture<Track> track=new Capture<Track>();  expect(myTracksProviderUtils.insertTrack((Track)AndroidMock.anyObject())).andReturn(TRACK_ID_0_URI);  expectFirstTrackPoint(null,TRACK_ID_0,TRACK_POINT_ID_0);  expect(myTracksProviderUtils.bulkInsertTrackPoint((Location[])AndroidMock.anyObject(),eq(5),eq(TRACK_ID_0))).andStubReturn(5);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID_0)).andReturn(TRACK_POINT_ID_3);  expect(myTracksProviderUtils.getTrack(PreferencesUtils.getLong(getContext(),R.string.recording_track_id_key))).andStubReturn(null);  expectUpdateTrack(track,true,TRACK_ID_0);  AndroidMock.replay(myTracksProviderUtils);  InputStream inputStream=new ByteArrayInputStream(VALID_ONE_TRACK_TWO_SEGMENTS_NO_TIME_GPX.getBytes());  GpxFileTrackImporter gpxFileTrackImporter=new GpxFileTrackImporter(getContext(),myTracksProviderUtils);  long trackId=gpxFileTrackImporter.importFile(inputStream);  assertEquals(TRACK_ID_0,trackId);  assertEquals(0,track.getValue().getTripStatistics().getTotalTime());  AndroidMock.verify(myTracksProviderUtils);  verifyTrack(track.getValue(),TRACK_NAME_0,TRACK_DESCRIPTION_0,-1L);}  }
class C{  public void startExecuting(){  field_48310_h=0;}  }
class C{  protected Double wrapValue(double k){  return new Double(k);}  }
class C{  public static String methodString(int flags){  return humanHelper(flags,METHOD_FLAGS,CONV_METHOD);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public String replaceDoubleExtensionByExtensionActuallyAvailable(String kernelSource){  boolean hasKHR=isDoubleSupportedKHR(), hasAMD=isDoubleSupportedAMD();  if (hasAMD && !hasKHR)   kernelSource=kernelSource.replaceAll("#pragma\\s+OPENCL\\s+EXTENSION\\s+cl_khr_fp64\\s*:\\s*enable","#pragma OPENCL EXTENSION cl_amd_fp64 : enable"); else   if (!hasAMD && hasKHR)   kernelSource=kernelSource.replaceAll("#pragma\\s+OPENCL\\s+EXTENSION\\s+cl_amd_fp64\\s*:\\s*enable","#pragma OPENCL EXTENSION cl_khr_fp64 : enable");  return kernelSource;}  }
class C{  protected BinaryLogicalExpressionImpl(){  super();}  }
class C{  public int searchInsert(int[] A,int target){  if (A == null || A.length == 0)   return 0;  int index=binarySearch(A,0,A.length - 1,target);  return index;}  }
class C{  private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().atomicLong(t.get2(),0L,false);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,View.OnClickListener onClickListener){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());}  }
class C{  private static void requestSubscription(String jid,XMPPConnection connection){  Presence presence=new Presence(Presence.Type.subscribe);  sendPresenceTo(jid,presence,connection);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.811 -0500",hash_original_method="65CC9974914C583AD70C403F8621F2C0",hash_generated_method="FCF10A1E6C0ABE4B35D15076302CD2C3") public HttpRoute(HttpHost target,InetAddress local,HttpHost proxy,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxy),secure,tunnelled,layered);}  }
class C{  @Nullable public V pop(){  return (V)mFreeList.poll();}  }
class C{  public String toString(){  return this.waveAudioEssenceDescriptorBO.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};  double[] neighbours=new double[8];  boolean patternMatch=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    do {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z > 0 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != vals[a][i]) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }    } while (counter > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String sqlObject_createSequence(String vendorName,String catalogName,String schemaName,String sequenceName,long min,long max,long incr,boolean isCycled,long cache,long start){  sequenceName=normalizeIdentifier(vendorName,sequenceName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_createSequence(catalogName,schemaName,sequenceName,min,max,incr,isCycled,cache,start);}  }
class C{  public static final JIPNumber create(final int n){  return new JIPNumber(Expression.createNumber(n));}  }
class C{  private double readDouble() throws IOException {  return in.readDouble();}  }
class C{  private void initMeetings(){  this.meetings=new HashMap<DTNHost,Double>();  this.meanIET=0;  this.nrofSamples=0;}  }
class C{  public boolean isDynamizable(){  return dynamizable;}  }
class C{  public void sendTestMessage(LocoNetMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notify(m);  return;}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  Debug.message("dndlistener","dragOver(source)");  int action=dsde.getDropAction();  if (action == default_action) {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveDrop));  } else {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveNoDrop));  }}  }
class C{  public Eval<Maybe<V>> nextValue(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  final LazyImmutable<Boolean> requested=LazyImmutable.def();  final Maybe<Eval<Maybe<V>>> nested=get(key).peek(null).map(null);  return nested.orElse(Eval.now(Maybe.<V>none()));}  }
class C{  public T caseServiceActivator(ServiceActivator object){  return null;}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  Rectangle2D target=(Rectangle2D)area.clone();  target=trimMargin(target);  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(target);  }  getFrame().draw(g2,target);  getFrame().getInsets().trim(target);  target=trimPadding(target);  double base=this.axis.getLowerBound();  double increment=this.axis.getRange().getLength() / this.subdivisions;  Rectangle2D r=new Rectangle2D.Double();  if (RectangleEdge.isTopOrBottom(getPosition())) {    RectangleEdge axisEdge=Plot.resolveRangeAxisLocation(this.axisLocation,PlotOrientation.HORIZONTAL);    if (axisEdge == RectangleEdge.TOP) {      for (int i=0; i < this.subdivisions; i++) {        double v=base + (i * increment);        Paint p=this.scale.getPaint(v);        double vv0=this.axis.valueToJava2D(v,target,RectangleEdge.TOP);        double vv1=this.axis.valueToJava2D(v + increment,target,RectangleEdge.TOP);        double ww=Math.abs(vv1 - vv0) + 1.0;        r.setRect(Math.min(vv0,vv1),target.getMaxY() - this.stripWidth,ww,this.stripWidth);        g2.setPaint(p);        g2.fill(r);      }      if (isStripOutlineVisible()) {        g2.setPaint(this.stripOutlinePaint);        g2.setStroke(this.stripOutlineStroke);        g2.draw(new Rectangle2D.Double(target.getMinX(),target.getMaxY() - this.stripWidth,target.getWidth(),this.stripWidth));      }      this.axis.draw(g2,target.getMaxY() - this.stripWidth - this.axisOffset,target,target,RectangleEdge.TOP,null);    } else     if (axisEdge == RectangleEdge.BOTTOM) {      for (int i=0; i < this.subdivisions; i++) {        double v=base + (i * increment);        Paint p=this.scale.getPaint(v);        double vv0=this.axis.valueToJava2D(v,target,RectangleEdge.BOTTOM);        double vv1=this.axis.valueToJava2D(v + increment,target,RectangleEdge.BOTTOM);        double ww=Math.abs(vv1 - vv0) + 1.0;        r.setRect(Math.min(vv0,vv1),target.getMinY(),ww,this.stripWidth);        g2.setPaint(p);        g2.fill(r);      }      if (isStripOutlineVisible()) {        g2.setPaint(this.stripOutlinePaint);        g2.setStroke(this.stripOutlineStroke);        g2.draw(new Rectangle2D.Double(target.getMinX(),target.getMinY(),target.getWidth(),this.stripWidth));      }      this.axis.draw(g2,target.getMinY() + this.stripWidth + this.axisOffset,target,target,RectangleEdge.BOTTOM,null);    }  } else {    RectangleEdge axisEdge=Plot.resolveRangeAxisLocation(this.axisLocation,PlotOrientation.VERTICAL);    if (axisEdge == RectangleEdge.LEFT) {      for (int i=0; i < this.subdivisions; i++) {        double v=base + (i * increment);        Paint p=this.scale.getPaint(v);        double vv0=this.axis.valueToJava2D(v,target,RectangleEdge.LEFT);        double vv1=this.axis.valueToJava2D(v + increment,target,RectangleEdge.LEFT);        double hh=Math.abs(vv1 - vv0) + 1.0;        r.setRect(target.getMaxX() - this.stripWidth,Math.min(vv0,vv1),this.stripWidth,hh);        g2.setPaint(p);        g2.fill(r);      }      if (isStripOutlineVisible()) {        g2.setPaint(this.stripOutlinePaint);        g2.setStroke(this.stripOutlineStroke);        g2.draw(new Rectangle2D.Double(target.getMaxX() - this.stripWidth,target.getMinY(),this.stripWidth,target.getHeight()));      }      this.axis.draw(g2,target.getMaxX() - this.stripWidth - this.axisOffset,target,target,RectangleEdge.LEFT,null);    } else     if (axisEdge == RectangleEdge.RIGHT) {      for (int i=0; i < this.subdivisions; i++) {        double v=base + (i * increment);        Paint p=this.scale.getPaint(v);        double vv0=this.axis.valueToJava2D(v,target,RectangleEdge.LEFT);        double vv1=this.axis.valueToJava2D(v + increment,target,RectangleEdge.LEFT);        double hh=Math.abs(vv1 - vv0) + 1.0;        r.setRect(target.getMinX(),Math.min(vv0,vv1),this.stripWidth,hh);        g2.setPaint(p);        g2.fill(r);      }      if (isStripOutlineVisible()) {        g2.setPaint(this.stripOutlinePaint);        g2.setStroke(this.stripOutlineStroke);        g2.draw(new Rectangle2D.Double(target.getMinX(),target.getMinY(),this.stripWidth,target.getHeight()));      }      this.axis.draw(g2,target.getMinX() + this.stripWidth + this.axisOffset,target,target,RectangleEdge.RIGHT,null);    }  }  return null;}  }
class C{  public boolean hasOwnedAnnotation(final AnnotableElement element){  return getOwnedAnnotation(element) != null;}  }
class C{  public KStepMarkov(Hypergraph<V,E> graph,Function<V,Double> vertex_priors,int steps){  super(graph,vertex_priors,0);  initialize(steps);}  }
class C{  public void addExceptionHandler(int start,int end,int handler,String type){  addExceptionHandler(start,end,handler,constPool.addClassInfo(type));}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventSender,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(CommandRequest.UPDATE,clientEnvironment);  requests.addArgumentRequest(isBuildDirectories(),"-d");  requests.addArgumentRequest(isCleanCopy(),"-C");  requests.addArgumentRequest(isResetStickyOnes(),"-A");  requests.addArgumentRequest(isUseHeadIfNotFound(),"-f");  requests.addArgumentRequest(getUpdateByDate(),"-D");  requests.addArgumentRequest(getUpdateByRevision(),"-r");  requests.addArgumentRequests(getMergeRevision1(),"-j");  requests.addArgumentRequests(getMergeRevision2(),"-j");  requests.addArgumentRequest(getKeywordSubst(),"-k");  addFileRequests(cvsFiles,requests,clientEnvironment);  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  DirectoryPruner directoryPruner=null;  if (isPruneDirectories()) {    directoryPruner=new DirectoryPruner(clientEnvironment);    directoryPruner.registerListeners(listenerRegistry);  }  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);  final ICvsListener responseProgressViewer=new FileInfoAndDirectoryResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles);  final ICvsListener updateMessageParser=new UpdateMessageParser(eventSender,clientEnvironment.getCvsFileSystem());  final ICvsListener listener=new DualListener(updateMessageParser,responseProgressViewer);  listener.registerListeners(listenerRegistry);  try {    return requestProcessor.processRequests(requests,requestsProgressHandler);  }  finally {    listener.unregisterListeners(listenerRegistry);    if (directoryPruner != null) {      directoryPruner.unregisterListeners(listenerRegistry);      try {        directoryPruner.pruneEmptyDirectories();      } catch (      IOException ex) {        throw new IOCommandException(ex);      }    }  }}  }
class C{  public long wchan(){  return Long.parseLong(fields[34]);}  }
class C{  private void doAddOrUpdate(HttpServletRequest request,DistributionPrefsForm frm) throws Exception {  String distPrefId=frm.getDistPrefId();  List saList=frm.getSubjectArea();  List suList=frm.getItype();  List clList=frm.getClassNumber();  DistributionPref dp=null;  Department oldOwner=null;  DistributionPrefDAO dpDao=new DistributionPrefDAO();  Transaction tx=null;  org.hibernate.Session hibSession=dpDao.getSession();  HashSet relatedInstructionalOfferings=new HashSet();  try {    tx=hibSession.beginTransaction();    if (distPrefId != null && distPrefId.trim().length() > 0) {      Long distPrefUid=new Long(distPrefId);      if (distPrefUid.longValue() > 0) {        dp=dpDao.get(distPrefUid,hibSession);        Set s=dp.getDistributionObjects();        for (Iterator i=s.iterator(); i.hasNext(); ) {          DistributionObject dObj=(DistributionObject)i.next();          PreferenceGroup pg=dObj.getPrefGroup();          relatedInstructionalOfferings.add((pg instanceof Class_ ? ((Class_)pg).getSchedulingSubpart() : (SchedulingSubpart)pg).getInstrOfferingConfig().getInstructionalOffering());          pg.getDistributionObjects().remove(dObj);          hibSession.saveOrUpdate(pg);        }        s.clear();        dp.setDistributionObjects(s);        oldOwner=(Department)dp.getOwner();      }    } else     dp=new DistributionPref();    dp.setDistributionType(new DistributionTypeDAO().get(new Long(frm.getDistType()),hibSession));    dp.setStructure(frm.getStructure());    dp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(frm.getPrefLevel())));    Department owningDept=null;    for (int i=0; i < saList.size(); i++) {      String su=suList.get(i).toString();      String cl=clList.get(i).toString();      DistributionObject dObj=new DistributionObject();      if (cl.equals(DistributionPrefsForm.ALL_CLASSES_SELECT)) {        SchedulingSubpart subpart=new SchedulingSubpartDAO().get(new Long(su),hibSession);        if (owningDept == null)         owningDept=subpart.getManagingDept(); else         if (!owningDept.getUniqueId().equals(subpart.getManagingDept().getUniqueId())) {          if (owningDept.getDistributionPrefPriority().intValue() < subpart.getManagingDept().getDistributionPrefPriority().intValue())           owningDept=subpart.getManagingDept(); else           if (owningDept.getDistributionPrefPriority().intValue() == subpart.getManagingDept().getDistributionPrefPriority().intValue()) {            if (!sessionContext.getUser().getCurrentAuthority().hasQualifier(owningDept) && sessionContext.getUser().getCurrentAuthority().hasQualifier(subpart.getManagingDept()))             owningDept=subpart.getManagingDept();          }        }        dObj.setPrefGroup(subpart);        relatedInstructionalOfferings.add(subpart.getInstrOfferingConfig().getInstructionalOffering());      } else {        Class_ clazz=new Class_DAO().get(new Long(cl),hibSession);        if (owningDept == null)         owningDept=clazz.getManagingDept(); else         if (!owningDept.equals(clazz.getManagingDept())) {          if (owningDept.getDistributionPrefPriority().intValue() < clazz.getManagingDept().getDistributionPrefPriority().intValue())           owningDept=clazz.getManagingDept(); else           if (owningDept.getDistributionPrefPriority().intValue() == clazz.getManagingDept().getDistributionPrefPriority().intValue()) {            if (!sessionContext.getUser().getCurrentAuthority().hasQualifier(owningDept) && sessionContext.getUser().getCurrentAuthority().hasQualifier(clazz.getManagingDept()))             owningDept=clazz.getManagingDept();          }        }        relatedInstructionalOfferings.add(clazz.getSchedulingSubpart().getInstrOfferingConfig().getInstructionalOffering());        dObj.setPrefGroup(clazz);      }      dObj.setSequenceNumber(new Integer(i + 1));      dObj.setDistributionPref(dp);      dObj.getPrefGroup().getDistributionObjects().add(dObj);      dp.addTodistributionObjects(dObj);    }    dp.setOwner(owningDept);    sessionContext.checkPermission(dp,Right.DistributionPreferenceEdit);    hibSession.saveOrUpdate(dp);    List<Long> changedOfferingIds=new ArrayList<Long>();    for (Iterator i=relatedInstructionalOfferings.iterator(); i.hasNext(); ) {      InstructionalOffering io=(InstructionalOffering)i.next();      ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.DIST_PREF_EDIT,(distPrefId != null && distPrefId.trim().length() > 0 ? ChangeLog.Operation.UPDATE : ChangeLog.Operation.CREATE),io.getControllingCourseOffering().getSubjectArea(),null);      if (permissionOfferingLockNeeded.check(sessionContext.getUser(),io))       changedOfferingIds.add(io.getUniqueId());    }    if (!changedOfferingIds.isEmpty())     StudentSectioningQueue.offeringChanged(hibSession,sessionContext.getUser(),sessionContext.getUser().getCurrentAcademicSessionId(),changedOfferingIds);    tx.commit();    hibSession.flush();    hibSession.refresh(dp.getOwner());    if (oldOwner != null && !oldOwner.equals(dp.getOwner()))     hibSession.refresh(oldOwner);    frm.setDistPrefId(dp.getUniqueId().toString());  } catch (  Exception e) {    if (tx != null)     tx.rollback();    hibSession.clear();    throw e;  }}  }
class C{  private void addAndVerifySplitableStatements() throws Exception {  final RyaStatement stmtOldP_MisC_delP_a=createRyaStatementUniqueAdd("as_OldP_MisC","ap_OldP_MisC","ao_OldP_MisC",LAST_MONTH,parentDao,null);  final RyaStatement stmtOldP_MisC_delP_f=createRyaStatementUniqueAdd("fs_OldP_MisC","fp_OldP_MisC","fo_OldP_MisC",LAST_MONTH,parentDao,null);  final RyaStatement stmtOldP_MisC_delP_u=createRyaStatementUniqueAdd("us_OldP_MisC","up_OldP_MisC","uo_OldP_MisC",LAST_MONTH,parentDao,null);  final RyaStatement stmtOldP_MisC_delP_z=createRyaStatementUniqueAdd("zs_OldP_MisC","zp_OldP_MisC","zo_OldP_MisC",LAST_MONTH,parentDao,null);  final RyaStatement stmtNewP_MisC_Noth_a=createRyaStatementUniqueAdd("as_NewP_MisC","ap_NewP_MisC","ao_NewP_MisC",null,parentDao,null);  final RyaStatement stmtNewP_MisC_Noth_f=createRyaStatementUniqueAdd("fs_NewP_MisC","fp_NewP_MisC","fo_NewP_MisC",null,parentDao,null);  final RyaStatement stmtNewP_MisC_Noth_u=createRyaStatementUniqueAdd("us_NewP_MisC","up_NewP_MisC","uo_NewP_MisC",null,parentDao,null);  final RyaStatement stmtNewP_MisC_Noth_z=createRyaStatementUniqueAdd("zs_NewP_MisC","zp_NewP_MisC","zo_NewP_MisC",null,parentDao,null);  final RyaStatement stmtMisP_OldC_Noth_a=createRyaStatementUniqueAdd("as_MisP_OldC","ap_MisP_OldC","ao_MisP_OldC",LAST_MONTH,null,childDao);  final RyaStatement stmtMisP_OldC_Noth_f=createRyaStatementUniqueAdd("fs_MisP_OldC","fp_MisP_OldC","fo_MisP_OldC",LAST_MONTH,null,childDao);  final RyaStatement stmtMisP_OldC_Noth_u=createRyaStatementUniqueAdd("us_MisP_OldC","up_MisP_OldC","uo_MisP_OldC",LAST_MONTH,null,childDao);  final RyaStatement stmtMisP_OldC_addP_z=createRyaStatementUniqueAdd("zs_MisP_OldC","zp_MisP_OldC","zo_MisP_OldC",LAST_MONTH,null,childDao);  final RyaStatement stmtMisP_NewC_addP_a=createRyaStatementUniqueAdd("as_MisP_NewC","ap_MisP_NewC","ao_MisP_NewC",null,null,childDao);  final RyaStatement stmtMisP_NewC_addP_f=createRyaStatementUniqueAdd("fs_MisP_NewC","fp_MisP_NewC","fo_MisP_NewC",null,null,childDao);  final RyaStatement stmtMisP_NewC_addP_u=createRyaStatementUniqueAdd("us_MisP_NewC","up_MisP_NewC","uo_MisP_NewC",null,null,childDao);  final RyaStatement stmtMisP_NewC_addP_z=createRyaStatementUniqueAdd("zs_MisP_NewC","zp_MisP_NewC","zo_MisP_NewC",null,null,childDao);  AccumuloRyaUtils.printTable(PARENT_TABLE_PREFIX + RdfCloudTripleStoreConstants.TBL_SPO_SUFFIX,parentConfig);  AccumuloRyaUtils.printTable(CHILD_TABLE_PREFIX + RdfCloudTripleStoreConstants.TBL_SPO_SUFFIX,childConfig);  mergeToolRun(YESTERDAY);  AccumuloRyaUtils.printTable(PARENT_TABLE_PREFIX + RdfCloudTripleStoreConstants.TBL_SPO_SUFFIX,parentConfig);  AccumuloRyaUtils.printTable(CHILD_TABLE_PREFIX + RdfCloudTripleStoreConstants.TBL_SPO_SUFFIX,childConfig);  String desc=null;  desc="Old parent, missing Child, should delete Parent. ";  assertStatementInParent(desc,0,stmtOldP_MisC_delP_a);  assertStatementInParent(desc,0,stmtOldP_MisC_delP_f);  assertStatementInParent(desc,0,stmtOldP_MisC_delP_u);  assertStatementInParent(desc,0,stmtOldP_MisC_delP_z);  desc="New parent, missing Child, should do nothing, leave parent. ";  assertStatementInParent(desc,1,stmtNewP_MisC_Noth_a);  assertStatementInParent(desc,1,stmtNewP_MisC_Noth_f);  assertStatementInParent(desc,1,stmtNewP_MisC_Noth_u);  assertStatementInParent(desc,1,stmtNewP_MisC_Noth_z);  desc="Missing parent, Old Child, should do nothing, missing parent. ";  assertStatementInParent(desc,0,stmtMisP_OldC_Noth_a);  assertStatementInParent(desc,0,stmtMisP_OldC_Noth_f);  assertStatementInParent(desc,0,stmtMisP_OldC_Noth_u);  assertStatementInParent(desc,0,stmtMisP_OldC_addP_z);  desc="Missing parent, New Child, add to parent. ";  assertStatementInParent(desc,1,stmtMisP_NewC_addP_a);  assertStatementInParent(desc,1,stmtMisP_NewC_addP_f);  assertStatementInParent(desc,1,stmtMisP_NewC_addP_u);  assertStatementInParent(desc,1,stmtMisP_NewC_addP_z);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  protected void removeKeyFromLRUCache(Cache cacheObject){  for (int i=0; i < columnIdentifiers.length; i++) {    DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=createDictionaryColumnUniqueIdentifier(columnIdentifiers[i]);    cacheObject.invalidate(dictionaryColumnUniqueIdentifier);  }}  }
class C{  public boolean leftClick(OMGraphic omg,MouseEvent e){  boolean ret=false;  if (omg != null && !ret && e.getClickCount() > 1) {    select(omg);    ret=true;  }  return ret && consumeEvents;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static long[] subarray(final long[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_LONG_ARRAY;  }  long[] subarray=new long[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public String updateSite(){  return updateSite;}  }
class C{  public static void log(final String msg,final Throwable t){  if (DEBUG) {    log(msg);    t.printStackTrace(System.out);  }}  }
class C{  @Override public V replace(K key,V value){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public boolean isDefaultInstance(){  return pageData.isEmpty();}  }
class C{  private void appendPoint(Coordinate coordinate,int level,Writer writer,PrecisionModel precisionModel) throws IOException {  writer.write("(");  appendCoordinate(coordinate,writer);  writer.write(")");}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static Ethernet DhcpDiscoveryRequestEthernet(MacAddress hostMac){  List<DHCPOption> optionList=new ArrayList<DHCPOption>();  byte[] requestValue=new byte[4];  requestValue[0]=requestValue[1]=requestValue[2]=requestValue[3]=0;  DHCPOption requestOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedIP.getValue()).setLength((byte)4).setData(requestValue);  byte[] msgTypeValue=new byte[1];  msgTypeValue[0]=1;  DHCPOption msgTypeOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_MessageType.getValue()).setLength((byte)1).setData(msgTypeValue);  byte[] reqParamValue=new byte[4];  reqParamValue[0]=1;  reqParamValue[1]=3;  reqParamValue[2]=6;  reqParamValue[3]=42;  DHCPOption reqParamOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedParameters.getValue()).setLength((byte)4).setData(reqParamValue);  byte[] clientIdValue=new byte[7];  clientIdValue[0]=1;  System.arraycopy(hostMac.getBytes(),0,clientIdValue,1,6);  DHCPOption clientIdOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_ClientID.getValue()).setLength((byte)7).setData(clientIdValue);  DHCPOption endOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_END.getValue()).setLength((byte)0).setData(null);  optionList.add(requestOption);  optionList.add(msgTypeOption);  optionList.add(reqParamOption);  optionList.add(clientIdOption);  optionList.add(endOption);  Ethernet requestPacket=new Ethernet();  requestPacket.setSourceMACAddress(hostMac.getBytes()).setDestinationMACAddress(broadcastMac).setEtherType(EthType.IPv4).setPayload(new IPv4().setVersion((byte)4).setDiffServ((byte)0).setIdentification((short)100).setFlags((byte)0).setFragmentOffset((short)0).setTtl((byte)250).setProtocol(IpProtocol.UDP).setChecksum((short)0).setSourceAddress(0).setDestinationAddress(broadcastIp).setPayload(new UDP().setSourcePort(UDP.DHCP_CLIENT_PORT).setDestinationPort(UDP.DHCP_SERVER_PORT).setChecksum((short)0).setPayload(new DHCP().setOpCode(DHCP.OPCODE_REQUEST).setHardwareType(DHCP.HWTYPE_ETHERNET).setHardwareAddressLength((byte)6).setHops((byte)0).setTransactionId(0x00003d1d).setSeconds((short)0).setFlags((short)0).setClientIPAddress(IPv4Address.NONE).setYourIPAddress(IPv4Address.NONE).setServerIPAddress(IPv4Address.NONE).setGatewayIPAddress(IPv4Address.NONE).setClientHardwareAddress(hostMac).setOptions(optionList))));  return requestPacket;}  }
class C{  protected void updateStatsForClassifier(double[] predictedDistribution,Instance instance) throws Exception {  int actualClass=(int)instance.classValue();  if (!instance.classIsMissing()) {    updateMargins(predictedDistribution,actualClass,instance.weight());    int predictedClass=-1;    double bestProb=0.0;    for (int i=0; i < m_NumClasses; i++) {      if (predictedDistribution[i] > bestProb) {        predictedClass=i;        bestProb=predictedDistribution[i];      }    }    m_WithClass+=instance.weight();    if (m_CostMatrix != null) {      if (predictedClass < 0) {        m_TotalCost+=instance.weight() * m_CostMatrix.getMaxCost(actualClass,instance);      } else {        m_TotalCost+=instance.weight() * m_CostMatrix.getElement(actualClass,predictedClass,instance);      }    }    if (predictedClass < 0) {      m_Unclassified+=instance.weight();      return;    }    double predictedProb=Math.max(MIN_SF_PROB,predictedDistribution[actualClass]);    double priorProb=Math.max(MIN_SF_PROB,m_ClassPriors[actualClass] / m_ClassPriorsSum);    if (predictedProb >= priorProb) {      m_SumKBInfo+=(Utils.log2(predictedProb) - Utils.log2(priorProb)) * instance.weight();    } else {      m_SumKBInfo-=(Utils.log2(1.0 - predictedProb) - Utils.log2(1.0 - priorProb)) * instance.weight();    }    m_SumSchemeEntropy-=Utils.log2(predictedProb) * instance.weight();    m_SumPriorEntropy-=Utils.log2(priorProb) * instance.weight();    updateNumericScores(predictedDistribution,makeDistribution(instance.classValue()),instance.weight());    int[] indices=Utils.stableSort(predictedDistribution);    double sum=0, sizeOfRegions=0;    for (int i=predictedDistribution.length - 1; i >= 0; i--) {      if (sum >= m_ConfLevel) {        break;      }      sum+=predictedDistribution[indices[i]];      sizeOfRegions++;      if (actualClass == indices[i]) {        m_TotalCoverage+=instance.weight();      }    }    m_TotalSizeOfRegions+=sizeOfRegions / (m_MaxTarget - m_MinTarget);    m_ConfusionMatrix[actualClass][predictedClass]+=instance.weight();    if (predictedClass != actualClass) {      m_Incorrect+=instance.weight();    } else {      m_Correct+=instance.weight();    }  } else {    m_MissingClass+=instance.weight();  }  if (m_pluginMetrics != null) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      if (m instanceof StandardEvaluationMetric) {        ((StandardEvaluationMetric)m).updateStatsForClassifier(predictedDistribution,instance);      } else       if (m instanceof InformationRetrievalEvaluationMetric) {        ((InformationRetrievalEvaluationMetric)m).updateStatsForClassifier(predictedDistribution,instance);      } else       if (m instanceof InformationTheoreticEvaluationMetric) {        ((InformationTheoreticEvaluationMetric)m).updateStatsForClassifier(predictedDistribution,instance);      }    }  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).xstr().startsWith(m_arg1.execute(xctxt).xstr()) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public LZ7(){  super(10,2,21,21,3);}  }
class C{  public byte[] toZOrderByteArray(Object[] components){  final long[] componentsAsLongArr=componentsAsLongArr(components,datatypeConfig);  final byte[] zOrderByteArray=toZOrderByteArray(componentsAsLongArr,datatypeConfig);  return padLeadingZero(zOrderByteArray);}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public AgeLessThanCondition(final int age){  this.age=age;}  }
class C{  public void registerTask(AbstractTask task,EventData[] events){  this.eventsToTaskMap.put(TaskRegistry.getEventsKey(events),task);}  }
class C{  private CordovaPlugin instantiatePlugin(String className){  CordovaPlugin ret=null;  try {    Class<?> c=null;    if ((className != null) && !("".equals(className))) {      c=Class.forName(className);    }    if (c != null & CordovaPlugin.class.isAssignableFrom(c)) {      ret=(CordovaPlugin)c.newInstance();    }  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Error adding plugin " + className + ".");  }  return ret;}  }
class C{  public TFloatLongHashMapDecorator(TFloatLongHashMap map){  super();  this._map=map;}  }
class C{  @Override public void writeToParcel(Parcel out,int flags){  out.writeInt(x);  out.writeInt(y);}  }
class C{  boolean isReflex(DoubleEdgeListVertex v0,DoubleEdgeListVertex v1,DoubleEdgeListVertex v2){  Vector2 p0=v0.point;  Vector2 p1=v1.point;  Vector2 p2=v2.point;  Vector2 e1=p0.to(p1);  Vector2 e2=p1.to(p2);  double cross=e1.cross(e2);  if (cross < 0)   return true;  return false;}  }
class C{  public terminal_set first_set(){  return _first_set;}  }
class C{  @Override public void keyTyped(char par1,int par2){  super.keyTyped(par1,par2);  target_xCoord_field.textboxKeyTyped(par1,par2);  target_zCoord_field.textboxKeyTyped(par1,par2);  if (tileEntity.getTier() >= 1) {    target_yCoord_field.textboxKeyTyped(par1,par2);    target_height_field.textboxKeyTyped(par1,par2);    if (tileEntity.getTier() > 1) {      target_freq_field.textboxKeyTyped(par1,par2);    }  }  try {    Pos3D newTarget=new Pos3D(Integer.parseInt(target_xCoord_field.getText()),Math.max(Integer.parseInt(target_yCoord_field.getText()),0),Integer.parseInt(target_zCoord_field.getText()));    tileEntity.setTarget(newTarget);    ArrayList data=new ArrayList();    data.add(2);    data.add((int)tileEntity.getTarget().xPos);    data.add((int)tileEntity.getTarget().yPos);    data.add((int)tileEntity.getTarget().zPos);    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }  try {    short newFrequency=(short)Math.max(Short.parseShort(target_freq_field.getText()),0);    tileEntity.setFrequency(newFrequency);    ArrayList data=new ArrayList();    data.add(1);    data.add(tileEntity.getFrequency());    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }  try {    short newHeight=(short)Math.max(Math.min(Short.parseShort(target_height_field.getText()),Short.MAX_VALUE),3);    tileEntity.launchHeight=newHeight;    ArrayList data=new ArrayList();    data.add(3);    data.add(tileEntity.launchHeight);    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }}  }
class C{  public DateTimeFormatter withZoneUTC(){  return withZone(DateTimeZone.UTC);}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearHtml(){  html=null;  fieldSetFlags()[7]=false;  return this;}  }
class C{  public static PlatformBitmapFactory buildPlatformBitmapFactory(PoolFactory poolFactory,PlatformDecoder platformDecoder){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return new ArtBitmapFactory(poolFactory.getBitmapPool());  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    return new HoneycombBitmapFactory(new EmptyJpegGenerator(poolFactory.getPooledByteBufferFactory()),platformDecoder);  } else {    return new GingerbreadBitmapFactory();  }}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public void incDescendants(){  descendants++;}  }
class C{  public static ECKey signedMessageToKey(String message,String signatureBase64) throws SignatureException {  byte[] signatureEncoded;  try {    signatureEncoded=Base64.decode(signatureBase64);  } catch (  RuntimeException e) {    throw new SignatureException("Could not decode base64",e);  }  if (signatureEncoded.length < 65)   throw new SignatureException("Signature truncated, expected 65 bytes and got " + signatureEncoded.length);  int header=signatureEncoded[0] & 0xFF;  if (header < 27 || header > 34)   throw new SignatureException("Header byte out of range: " + header);  BigInteger r=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,1,33));  BigInteger s=new BigInteger(1,Arrays.copyOfRange(signatureEncoded,33,65));  ECDSASignature sig=new ECDSASignature(r,s);  byte[] messageBytes=Utils.formatMessageForSigning(message);  Sha256Hash messageHash=Sha256Hash.twiceOf(messageBytes);  boolean compressed=false;  if (header >= 31) {    compressed=true;    header-=4;  }  int recId=header - 27;  ECKey key=ECKey.recoverFromSignature(recId,sig,messageHash,compressed);  if (key == null)   throw new SignatureException("Could not recover public key from signature");  return key;}  }
class C{  public void connectToBroker() throws MqttException {  userConnect=true;  try {    connectionLost();    connected=true;  } catch (  MqttException e) {    connected=false;    throw e;  } finally {    userConnect=false;  }}  }
class C{  public final TextBuilder delete(int start,int end){  if ((start < 0) || (end < 0) || (start > end)|| (end > this.length()))   throw new IndexOutOfBoundsException();  for (int i=end, j=start; i < _length; ) {    this.setCharAt(j++,this.charAt(i++));  }  _length-=end - start;  return this;}  }
class C{  public static void onLowMemory(Activity activity){  if (!VectorApp.isAppInBackground()) {    String activityName=(null != activity) ? activity.getClass().getSimpleName() : "NotAvailable";    Log.e(LOW_MEMORY_LOG_TAG,"Active application : onLowMemory from " + activityName);    if (displayMemoryInformation(activity)) {      if (CommonActivityUtils.shouldRestartApp(activity)) {        Log.e(LOW_MEMORY_LOG_TAG,"restart");        CommonActivityUtils.restartApp(activity);      } else {        Log.e(LOW_MEMORY_LOG_TAG,"clear the application cache");        Matrix.getInstance(activity).reloadSessions(activity);      }    } else {      Log.e(LOW_MEMORY_LOG_TAG,"Wait to be concerned");    }  } else {    Log.e(LOW_MEMORY_LOG_TAG,"background application : onLowMemory ");  }  displayMemoryInformation(activity);}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("unused") @Test public void testStateCycle_WithLocalReactionsOnly(){  MinimalTSC tsc=new MinimalTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction lr1=_createLocalReaction(tsc.s1,null);  _createRegularEventSpec(tsc.e1,(ReactionTrigger)lr1.getTrigger());  ReactionEffect lr1_eff=_createReactionEffect(lr1);  AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr1_eff);  LocalReaction lr2=_createLocalReaction(tsc.s1,null);  _createRegularEventSpec(tsc.e1,(ReactionTrigger)lr2.getTrigger());  LogicalRelationExpression lr2_equals=ExpressionsFactory.eINSTANCE.createLogicalRelationExpression();  lr2_equals.setOperator(RelationalOperator.EQUALS);  ElementReferenceExpression lr2_varRef=ExpressionsFactory.eINSTANCE.createElementReferenceExpression();  lr2_varRef.setReference(v1);  PrimitiveValueExpression lr2_value=_createValue(42);  lr2_equals.setLeftOperand(lr2_varRef);  lr2_equals.setRightOperand(lr2_value);  ((ReactionTrigger)lr2.getTrigger()).setGuard(createGuardExpression(lr2_equals));  ReactionEffect lr2_eff=_createReactionEffect(lr2);  AssignmentExpression assign2=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(0),lr2_eff);  LocalReaction lr3=_createLocalReaction(tsc.s1,null);  LogicalRelationExpression lr3_equals=ExpressionsFactory.eINSTANCE.createLogicalRelationExpression();  lr3_equals.setOperator(RelationalOperator.EQUALS);  ElementReferenceExpression lr3_varRef=ExpressionsFactory.eINSTANCE.createElementReferenceExpression();  lr3_varRef.setReference(v1);  PrimitiveValueExpression lr3_value=_createValue(0);  lr3_equals.setLeftOperand(lr3_varRef);  lr3_equals.setRightOperand(lr3_value);  ((ReactionTrigger)lr3.getTrigger()).setGuard(createGuardExpression(lr3_equals));  ReactionEffect lr3_eff=_createReactionEffect(lr3);  AssignmentExpression assign3=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(1),lr3_eff);  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState s1=flow.getStates().get(0);  assertEquals(tsc.s1.getName(),s1.getSimpleName());  assertEquals(3,s1.getReactions().size());  assertNotNull(s1.getReactSequence());  Step step=s1.getReactSequence().getSteps().get(0);  Sequence _seq=(Sequence)assertedSequence(assertedSequence(step).getSteps().get(0)).getSteps().get(0);  assertEquals(3,_seq.getSteps().size());  If _lr1=(If)_seq.getSteps().get(0);  assertClass(ElementReferenceExpression.class,_lr1.getCheck().getCondition());  assertSame(s1.getReactions().get(0).getCheck().getCondition(),_lr1.getCheck().getCondition());  Call _lr1_eff_call=(Call)_lr1.getThenStep();  assertSame(s1.getReactions().get(0).getEffect(),_lr1_eff_call.getStep());  If _lr2=(If)_seq.getSteps().get(1);  assertClass(LogicalAndExpression.class,_lr2.getCheck().getCondition());  assertSame(s1.getReactions().get(1).getCheck().getCondition(),_lr2.getCheck().getCondition());  Call _lr2_eff_call=(Call)_lr2.getThenStep();  assertSame(s1.getReactions().get(1).getEffect(),_lr2_eff_call.getStep());  If _lr3=(If)_seq.getSteps().get(2);  assertClass(LogicalRelationExpression.class,_lr3.getCheck().getCondition());  assertSame(s1.getReactions().get(2).getCheck().getCondition(),_lr3.getCheck().getCondition());  Call _lr3_eff_call=(Call)_lr3.getThenStep();  assertSame(s1.getReactions().get(2).getEffect(),_lr3_eff_call.getStep());}  }
class C{  protected boolean isSoLingerChanged(){  return true;}  }
class C{  @Override public URI uploadPackage(){  boolean fileExists=new File(topologyPackageLocation).isFile();  if (!fileExists) {    LOG.info("Topology file " + topologyPackageLocation + " does not exist.");    return null;  }  Path filePath=Paths.get(destTopologyFile);  File parentDirectory=filePath.getParent().toFile();  assert parentDirectory != null;  if (!parentDirectory.exists()) {    LOG.fine("The working directory does not exist; creating it.");    if (!parentDirectory.mkdirs()) {      LOG.severe("Failed to create directory: " + parentDirectory.getPath());      return null;    }  }  fileExists=new File(filePath.toString()).isFile();  if (fileExists) {    LOG.fine("Target topology file " + filePath.toString() + " exists, overwriting...");  }  LOG.fine("Copying topology " + topologyPackageLocation + " package to target working directory "+ filePath.toString());  Path source=Paths.get(topologyPackageLocation);  try {    CopyOption[] options=new CopyOption[]{StandardCopyOption.REPLACE_EXISTING};    Files.copy(source,filePath,options);  } catch (  IOException ex) {    LOG.info("Unable to copy: " + source.toString() + " "+ ex);    return null;  }  return getUri(destTopologyFile);}  }
class C{  public StreamSource(Reader reader,String systemId){  setReader(reader);  setSystemId(systemId);}  }
class C{  public void show(NavigationStack stack){  dispatcher.dispatch(add(History.NAV_TYPE_MODAL,stack));}  }
class C{  void transform() throws Exception {  String templateName=ftlFile.getName();  Template template=cfg.getTemplate(templateName,locale);  NodeModel rootNode=NodeModel.parse(inputFile);  OutputStream outputStream=System.out;  if (outputFile != null) {    outputStream=new FileOutputStream(outputFile);  }  Writer outputWriter=new OutputStreamWriter(outputStream,encoding);  try {    template.process(null,outputWriter,null,rootNode);  }  finally {    if (outputFile != null)     outputWriter.close();  }}  }
class C{  public static String encodeQuery(final String unescaped) throws URIException {  return encodeQuery(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_day_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  public Position(int offset){  this(offset,0);}  }
class C{  public void add(int index,E element){  delegate.insertElementAt(element,index);  fireIntervalAdded(this,index,index);}  }
class C{  public static boolean isValid(ByteBuffer header){  if ((ETC2Magic[0] != header.get(0)) && (ETC2Magic[1] != header.get(1)) && (ETC2Magic[2] != header.get(2))&& (ETC2Magic[3] != header.get(3))&& (ETC2Magic[4] != header.get(4))&& (ETC2Magic[5] != header.get(5))) {    RajLog.e("ETC2 header failed magic sequence check.");    if ((ETC1Magic[0] != header.get(0)) && (ETC1Magic[1] != header.get(1)) && (ETC1Magic[2] != header.get(2))&& (ETC1Magic[3] != header.get(3))&& (ETC1Magic[4] != header.get(4))&& (ETC1Magic[5] != header.get(5))) {      RajLog.e("ETC1 header failed magic sequence check.");      return false;    }  }  final short ETC2_FORMAT=header.getShort(ETC2_PKM_FORMAT_OFFSET);switch (ETC2_FORMAT) {case ETC1_RGB8_OES:case RGB8_ETC2:case RGBA8_ETC2_EAC:case RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case R11_EAC:case RG11_EAC:case SIGNED_R11_EAC:case SIGNED_RG11_EAC:    break;default :  RajLog.e("ETC2 header failed format check.");return false;}final int encodedWidth=getEncodedWidth(header);final int encodedHeight=getEncodedHeight(header);final int width=getWidth(header);final int height=getHeight(header);if (encodedWidth < width || (encodedWidth - width) > 4) {RajLog.e("ETC2 header failed width check. Encoded: " + encodedWidth + " Actual: "+ width);return false;}if (encodedHeight < height || (encodedHeight - height) > 4) {RajLog.e("ETC2 header failed height check. Encoded: " + encodedHeight + " Actual: "+ height);return false;}return true;}  }
class C{  public boolean ignoreException(Exception e){  return false;}  }
class C{  public boolean isGenerator(){  return generator;}  }
class C{  public long[] elements(){  return bits;}  }
class C{  public void defaultCrossover(EvolutionState state,int thread,VectorIndividual ind){  VectorSpeciesCGP s=(VectorSpeciesCGP)species;  float[] p1=((FloatVectorIndividual)ind).genome;  float[] p2=genome;  float tmp;  float[] r;  do   r=new float[]{state.random[thread].nextFloat(),state.random[thread].nextFloat()}; while (r[0] == 0 || r[1] == 0);  for (int i=0; i < genome.length; i++) {    tmp=p1[i];    p1[i]=(1 - r[0]) * p1[i] + r[0] * p2[i];    p2[i]=(1 - r[1]) * tmp + r[1] * p2[i];  }}  }
class C{  public Message sendMessageSynchronously(int what){  Message msg=Message.obtain();  msg.what=what;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @RpcMethod public void reserve(Resource resource,Integer generation,AsyncMethodCallback<Host.AsyncClient.reserve_call> handler) throws RpcException {  ensureClient();  ReserveRequest reserveRequest=new ReserveRequest();  reserveRequest.setResource(resource);  if (null != generation) {    reserveRequest.setGeneration(generation);  }  clientProxy.setTimeout(RESERVE_TIMEOUT_MS);  logger.info("reserve resource {}, generation {}, target {}, request {}",resource,generation,getHostIp(),reserveRequest);  try {    clientProxy.reserve(reserveRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  protected void processLine(String line) throws IOException {  if (Debug.debugging("httpconnection")) {    Debug.output("HttpConnection | processLine -- Processing command " + line);  }  if (line.startsWith("GET")) {    processGetCommand(line);  } else   if (line.startsWith("POST")) {    Debug.message("httpconnection","handling POST");    handlePost();  }}  }
class C{  public void stop(){  stop.set(true);  logger.info("JobHandlerRunnable {} stopped.",Thread.currentThread().getName());}  }
class C{  public boolean hasIntersection(){  return hasIntersection;}  }
class C{  @SuppressWarnings("nls") public String parse(TagString string){  String src=string.toString();  StringBuffer parsedString=new StringBuffer();  StringBuffer textString=new StringBuffer();  int i=0;  int p=0;  try {    while (i < src.length()) {switch (src.charAt(i)) {case '&':        i++;      p=i;    while (src.charAt(i) != ';') {      i++;    }  String ent=src.substring(p,i);if (ent.equals("amp") || ent.equals("gt") || ent.equals("lt")|| ent.equals("quot")|| ent.equals("apos")) {  textString.append(defaultEntity(ent));} else {  textString.append(entity(ent));}break;case '<':if (textString.length() > 0) {parsedString.append(text(textString.toString()));textString=new StringBuffer();}i++;p=i;while (src.charAt(i) != '>') {i++;}if (src.charAt(p) == '/') {parsedString.append(closeTag(src.substring(p + 1,i)));} else {parsedString.append(openTag(src.substring(p,i)));}break;default :textString.append(src.charAt(i));break;}i++;}} catch (ArrayIndexOutOfBoundsException aoobe) {parsedString.append("!PARSEERROR!");}if (textString.length() > 0) {parsedString.append(text(textString.toString()));}return parsedString.toString();}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public static LogoutResponse createSamlLogoutResponseFromIDP(String inResponseTo,String sessionIndex) throws NoSuchAlgorithmException {  String issuerUrl=TestConfig.idpEntityID;  String destination=TestConfig.SpSloService_loc;  return SamlUtils.createSamlLogoutResponse(issuerUrl,inResponseTo,destination,StatusCode.SUCCESS_URI,StatusCode.SUCCESS_URI,null);}  }
class C{  public boolean isIsTransformed(){  if (isTransformed == null) {    return false;  } else {    return isTransformed;  }}  }
class C{  public static Type newType(AST ast,VariableDeclaration declaration){  return newType(ast,declaration,null,null);}  }
class C{  @ObjectiveCName("isSendByEnterEnabled") public boolean isSendByEnterEnabled(){  return modules.getSettingsModule().isSendByEnterEnabled();}  }
class C{  public boolean isCompatible(Version minimumRequiredVersion){  return compareTo(minimumRequiredVersion) >= 0;}  }
class C{  public static PsiElement findElementAtNoCommit(@NotNull PsiFile file,int offset){  FileViewProvider viewProvider=file.getViewProvider();  Trinity<PsiElement,PsiElement,Language> result=null;  if (!(viewProvider instanceof InjectedFileViewProvider)) {    PsiDocumentManager documentManager=PsiDocumentManager.getInstance(file.getProject());    result=tryOffset(file,offset,documentManager);    PsiElement injected=result.first;    if (injected != null) {      return injected;    }  }  Language baseLanguage=viewProvider.getBaseLanguage();  if (result != null && baseLanguage == result.third) {    return result.second;  }  return viewProvider.findElementAt(offset,baseLanguage);}  }
class C{  protected boolean isValidState(mxCellState state){  return true;}  }
class C{  public void removeParameter(String name){  parameters.removeAll(name);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void removeHighlights(){  if (textArea != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (int i=0; i < tags.size(); i++) {      h.removeMarkOccurrencesHighlight(tags.get(i));    }  }  tags.clear();}  }
class C{  private static Entity findC3Spotter(IGame game,Entity attacker,Targetable target){  if (!attacker.hasC3() && !attacker.hasC3i() && !attacker.hasActiveNovaCEWS()) {    return attacker;  }  ArrayList<Entity> network=new ArrayList<Entity>();  for (  Entity friend : game.getEntitiesVector()) {    if (attacker.equals(friend) || !attacker.onSameC3NetworkAs(friend,true) || !friend.isDeployed()|| (friend.getTransportId() != Entity.NONE)) {      continue;    }    if (!LosEffects.calculateLos(game,friend.getId(),target).canSee()) {      continue;    }    int buddyRange=Compute.effectiveDistance(game,friend,target,false);    boolean added=false;    for (int pos=0; pos < network.size(); pos++) {      if (Compute.effectiveDistance(game,network.get(pos),target,false) >= buddyRange) {        network.add(pos,friend);        added=true;        break;      }    }    if (!added) {      network.add(friend);    }  }  List<ECMInfo> allECMInfo=ComputeECM.computeAllEntitiesECMInfo(game.getEntitiesVector());  int position=0;  for (  Entity spotter : network) {    for (int count=position++; count < network.size(); count++) {      if (Compute.canCompleteNodePath(spotter,attacker,network,count,allECMInfo)) {        return spotter;      }    }  }  return attacker;}  }
class C{  @Override protected void prepareRequest(){  RequestManager.getInstance().getRequestProxy(this).prepareRequest(this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_TYPE_LIBRARY__TYPES:    return ((InternalEList<?>)getTypes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public static String formatCurrency(double value,Currency currency){  NumberFormat f=getCurrencyFormatter();  f.setCurrency(currency);  return postFormatCurrency(f.format(value));}  }
class C{  public XmlSlurper(final boolean validating,final boolean namespaceAware,boolean allowDocTypeDeclaration) throws ParserConfigurationException, SAXException {  SAXParserFactory factory=FactorySupport.createSaxParserFactory();  factory.setNamespaceAware(namespaceAware);  this.namespaceAware=namespaceAware;  factory.setValidating(validating);  setQuietly(factory,XMLConstants.FEATURE_SECURE_PROCESSING,true);  setQuietly(factory,"http://apache.org/xml/features/disallow-doctype-decl",!allowDocTypeDeclaration);  reader=factory.newSAXParser().getXMLReader();}  }
class C{  public IssuePropertyEqualsMatcher(String propertyName,T expectedValue,Function<Issue,T> getActualValue){  super(propertyName);  this.expectedValue=Objects.requireNonNull(expectedValue);  this.getActualValue=Objects.requireNonNull(getActualValue);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowLineElement(prefix,(AbstractDocument)doc);}  }
class C{  public void stop(){  if (browser != null && !browser.isDisposed())   browser.stop();  setLoading(false);}  }
class C{  public int[] countBits(int num){  int[] res=new int[num + 1];  for (int i=1; i < res.length; i++) {    res[i]=res[i / 2] + i % 2;  }  return res;}  }
class C{  public FixedBordersDiscretizer(double[] borders){  this.borders=borders;  Arrays.sort(this.borders);}  }
class C{  public IceMediaStream createMediaStream(String mediaStreamName){  logger.debug("Create media stream for " + mediaStreamName);  IceMediaStream mediaStream=new IceMediaStream(Agent.this,mediaStreamName);  mediaStreams.put(mediaStreamName,mediaStream);  this.setState(IceProcessingState.WAITING);  return mediaStream;}  }
class C{  private void initMessageData(TriggerType triggerType,Organization org){  storedTriggerProcess=new TriggerProcess();  TriggerMessage messageData=new TriggerMessage(triggerType,null,Collections.singletonList(org));  triggerMessageData.add(new TriggerProcessMessageData(storedTriggerProcess,messageData));}  }
class C{  void checkElems(CompoundScope cs,Filter<Symbol> sf){  int count=0;  ListBuffer<Symbol> found=ListBuffer.lb();  List<Symbol> allSymbols=sf == null ? elems : filter(elems,sf);  int expectedCount=allSymbols.length();  for (  Symbol s : sf == null ? cs.getElements() : cs.getElements(sf)) {    checkSameSymbols(s,allSymbols.head);    allSymbols=allSymbols.tail;    found.append(s);    count++;  }  if (count != expectedCount) {    error("CompoundScope.getElements() did not returned enough symbols");  }}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  private ExprKraken parseSimpleTerm(){  Token token=scanToken();switch (token) {case MINUS:    return new UnaryExpr(UnaryOp.MINUS,parseSimpleTerm());case LPAREN:{    ExprKraken expr=parseExpr();    if ((token=scanToken()) != Token.RPAREN) {      throw error("Expected ')' at '{0}'",token);    }    return expr;  }case IDENTIFIER:{  String name=_lexeme;  if ((token=peekToken()) == Token.DOT) {    return parsePath(name);  } else   if (token == Token.LPAREN) {    FunExpr fun=null;{      String funName=(Character.toUpperCase(name.charAt(0)) + name.substring(1).toLowerCase(Locale.ENGLISH));      funName="com.caucho.v5.kraken.fun." + funName + "Expr";      try {        ClassLoader loader=Thread.currentThread().getContextClassLoader();        Class<?> cl=Class.forName(funName,false,loader);        fun=(FunExpr)cl.newInstance();      } catch (      ClassNotFoundException e) {        log.finer(e.toString());      }catch (      Exception e) {        log.log(Level.FINER,e.toString(),e);        throw error(e.toString());      }      if (fun == null) {        throw error(L.l("'{0}' is an unknown function.",name));      }    }    scanToken();    token=peekToken();    while (token != null && token != Token.RPAREN) {      ExprKraken arg=parseExpr();      fun.addArg(arg);      token=peekToken();      if (token == Token.COMMA) {        scanToken();        token=peekToken();      }    }    scanToken();    return fun;  } else {    return new IdExprBuilder(name);  }}case STRING:return new LiteralExpr(_lexeme);case DOUBLE:return new LiteralExpr(Double.parseDouble(_lexeme));case INTEGER:return new LiteralExpr(Long.parseLong(_lexeme));case LONG:return new LiteralExpr(Long.parseLong(_lexeme));case NULL:return new NullExpr();case TRUE:return new LiteralExpr(true);case FALSE:return new LiteralExpr(false);case QUESTION_MARK:ParamExpr param=new ParamExpr(_params.size());_params.add(param);return param;default :throw error("unexpected term {0}",token);}}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| (DECODABET[source[srcOffset + 3]] & 0xFF);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame("TextConsole test");  TextConsole console=new TextConsole(60,20,20,"Courier New");  frame.getContentPane().add(console);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.setResizable(false);  frame.pack();  frame.setVisible(true);  console.gotoPosition(1,2);  console.write("  Please provide your first name, last name, age and \n  profession. Leave out no information.",Color.YELLOW);  console.gotoPosition(4,4);  console.write("**********************************************",Color.BLUE);  console.write("First name  : ",5,5,Color.YELLOW);  console.addFormField("first name",30,Color.RED);  console.write("Last name   : ",5,6,Color.YELLOW);  console.addFormField("last name",30,Color.RED);  console.write("Age         : ",5,7,Color.YELLOW);  console.addFormField("age",3,Color.RED);  console.write("Profession  : ",5,8,Color.YELLOW);  console.addFormField("profession",30,Color.RED);  console.gotoPosition(4,10);  console.write("**********************************************",Color.BLUE);  console.gotoFirstField();  Map values=console.getValues();  for (Iterator iter=values.keySet().iterator(); iter.hasNext(); ) {    String key=(String)iter.next();  }  console.clear();}  }
class C{  int writeBytes(byte[] data,int nBytes,int offset){  maxPos=Math.max(maxPos,offset + nBytes);  if (nBytes + offset > pngBytes.length) {    pngBytes=resizeByteArray(pngBytes,pngBytes.length + Math.max(1000,nBytes));  }  System.arraycopy(data,0,pngBytes,offset,nBytes);  return offset + nBytes;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void addString(int c){  if (strpos == str.length) {    char newstr[]=new char[str.length + 128];    System.arraycopy(str,0,newstr,0,str.length);    str=newstr;  }  str[strpos++]=(char)c;}  }
class C{  public DownloaderApp(){  argParser=new ArgumentParser("herd-downloader-app");}  }
class C{  public final AprioriItemSet subtract(AprioriItemSet toSubtract){  AprioriItemSet result=new AprioriItemSet(m_totalTransactions);  result.m_items=new int[m_items.length];  for (int i=0; i < m_items.length; i++) {    if (toSubtract.m_items[i] == -1) {      result.m_items[i]=m_items[i];    } else {      result.m_items[i]=-1;    }  }  result.m_counter=0;  return result;}  }
class C{  public javax2.sip.address.SipURI createSipURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null URI");  try {    StringMsgParser smp=new StringMsgParser();    SipUri sipUri=smp.parseSIPUrl(uri);    return (SipURI)sipUri;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  private LuhnAlgorithm(){}  }
class C{  protected RuntimeProjectDependencyImpl(){  super();}  }
class C{  public GeoLocalizacionExcepcion(String message){  this(message,null);}  }
class C{  public void undoTurn(){  state.reverseTurn();}  }
class C{  public long top(){  return heap[1];}  }
class C{  public static void main(String[] argv){  runFilter(new TimeSeriesDelta(),argv);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static synchronized void destroy(){  mInstance=null;}  }
class C{  public String toString(){  return "(" + element + ","+ match+ ")";}  }
class C{  public MiniSolrCloudCluster(int numServers,Path baseDir,String solrXml,JettyConfig jettyConfig,ZkTestServer zkTestServer) throws Exception {  this.baseDir=Objects.requireNonNull(baseDir);  this.jettyConfig=Objects.requireNonNull(jettyConfig);  log.info("Starting cluster of {} servers in {}",numServers,baseDir);  Files.createDirectories(baseDir);  this.externalZkServer=zkTestServer != null;  if (!externalZkServer) {    String zkDir=baseDir.resolve("zookeeper/server1/data").toString();    zkTestServer=new ZkTestServer(zkDir);    zkTestServer.run();  }  this.zkServer=zkTestServer;  try (SolrZkClient zkClient=new SolrZkClient(zkServer.getZkHost(),AbstractZkTestCase.TIMEOUT)){    zkClient.makePath("/solr/solr.xml",solrXml.getBytes(Charset.defaultCharset()),true);    if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {      zkClient.makePath("/solr" + ZkStateReader.CLUSTER_PROPS,"{'urlScheme':'https'}".getBytes(Charsets.UTF_8),true);    }  }   System.setProperty("zkHost",zkServer.getZkAddress());  List<Callable<JettySolrRunner>> startups=new ArrayList<>(numServers);  for (int i=0; i < numServers; ++i) {    startups.add(null);  }  Collection<Future<JettySolrRunner>> futures=executor.invokeAll(startups);  Exception startupError=checkForExceptions("Error starting up MiniSolrCloudCluster",futures);  if (startupError != null) {    try {      this.shutdown();    } catch (    Throwable t) {      startupError.addSuppressed(t);    }    throw startupError;  }  waitForAllNodes(numServers,60);  solrClient=buildSolrClient();}  }
class C{  protected boolean addAtlasImage(){  if (this.getImage() == null) {    String msg=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(msg);    throw new IllegalStateException(msg);  }  try {    this.getTextureAtlas().add(this.getImageSource(),this.getImage());    this.setImage(null);  } catch (  Exception e) {    String msg=Logging.getMessage("TextureAtlas.ExceptionAddingImage",this.getImageSource().toString());    Logging.logger().log(java.util.logging.Level.SEVERE,msg,e);    this.imageInitializationFailed=true;    return false;  }  return true;}  }
class C{  public synchronized Object[] assignMatch(IHex hex,Component comp){  IHex hexCopy=hex.duplicate();  List<Image> ortho=orthoFor(hexCopy,comp);  List<Image> supers=supersFor(hexCopy,comp);  Image base=baseFor(hexCopy,comp);  Object[] pair=new Object[]{base,supers,ortho};  hexToImageCache.put(hex,base);  hexToImageListCache.put(hex,supers);  orthoListCache.put(hex,ortho);  return pair;}  }
class C{  private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {  DataOutputStream dos=null;  try {    String xml=transMeta.getXML();    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));    dos.write(xml.getBytes("UTF-8"));  } catch (  KettleException kettelException) {    throw new GraphGeneratorException("Error while getting the graph XML",kettelException);  }catch (  FileNotFoundException e) {    throw new GraphGeneratorException("Unable to find the graph fileL",e);  }catch (  UnsupportedEncodingException ue) {    throw new GraphGeneratorException("Error while Converting the graph xml string to bytes",ue);  }catch (  IOException ioe) {    throw new GraphGeneratorException("Error while writing the graph file",ioe);  } finally {    if (dos != null) {      try {        dos.close();      } catch (      IOException e) {        e.getMessage();      }    }  }}  }
class C{  public Builder keywordsThreshold(Double keywordsThreshold){  this.keywordsThreshold=keywordsThreshold;  return this;}  }
class C{  public static Border createGrayLineBorder(){  if (grayLine == null) {    grayLine=new LineBorder(Color.gray,1);  }  return grayLine;}  }
class C{  @SuppressWarnings("unchecked") private WebSession createSession(HttpServletRequest httpReq){  HttpSession ses=httpReq.getSession(true);  String sesId=transformSessionId(ses.getId());  return createSession(ses,sesId);}  }
class C{  public T enctype(String value){  return attr("enctype",value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isUseClassName(){  return super.isUseClassName();}  }
class C{  public void warn(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.WARNING,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public void addNetworkListener(final NetworkListener listener){  networkListeners.add(listener);}  }
class C{  public ZeroLengthPath(Var subject,Var object,Var context){  this(Scope.DEFAULT_CONTEXTS,subject,object,context);}  }
class C{  public static String checkURL(String url){  if (url == null || url.isEmpty()) {    return url;  }  if (!url.startsWith("http")) {    url="http://" + url;  }  return url;}  }
class C{  public final void testFieldsGetDigestAlgorithm(){  assertEquals("SHA-1",MGF1ParameterSpec.SHA1.getDigestAlgorithm());  assertEquals("SHA-256",MGF1ParameterSpec.SHA256.getDigestAlgorithm());  assertEquals("SHA-384",MGF1ParameterSpec.SHA384.getDigestAlgorithm());  assertEquals("SHA-512",MGF1ParameterSpec.SHA512.getDigestAlgorithm());}  }
class C{  public SetGetAdd(){  onlyInclude=null;}  }
class C{  public static BytecodeInstruction createBytecodeInstruction(ClassLoader classLoader,String className,String methodName,int instructionId,int bytecodeOffset,AbstractInsnNode node){  BytecodeInstruction instruction=new BytecodeInstruction(classLoader,className,methodName,instructionId,bytecodeOffset,node);  return instruction;}  }
class C{  public static Predicates<String> notContains(String otherString){  return new NotContainsString(otherString);}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  private void display(String message){  if (GenInputsAbstract.progressinterval == -1)   return;synchronized (print_synchro) {    System.out.print((this.outputMode == Mode.SINGLE_LINE_OVERWRITE ? "\r" : Globals.lineSep) + message);    System.out.flush();  }}  }
class C{  public FloatBuffer fillFloatBuffer(FloatBuffer fb,boolean columnMajor){  if (columnMajor) {    fb.put(m00).put(m10).put(m20);    fb.put(m01).put(m11).put(m21);    fb.put(m02).put(m12).put(m22);  } else {    fb.put(m00).put(m01).put(m02);    fb.put(m10).put(m11).put(m12);    fb.put(m20).put(m21).put(m22);  }  return fb;}  }
class C{  final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  @Override public int compareTo(RyaStatementWritable other){  CompareToBuilder builder=new CompareToBuilder();  RyaStatement rsThis=this.getRyaStatement();  RyaStatement rsOther=other.getRyaStatement();  builder.append(rsThis == null,rsOther == null);  if (rsThis != null && rsOther != null) {    builder.append(rsThis.getSubject(),rsOther.getSubject());    builder.append(rsThis.getPredicate(),rsOther.getPredicate());    builder.append(rsThis.getObject(),rsOther.getObject());    builder.append(rsThis.getContext(),rsOther.getContext());    builder.append(rsThis.getQualifer(),rsOther.getQualifer());    builder.append(rsThis.getColumnVisibility(),rsOther.getColumnVisibility());    builder.append(rsThis.getValue(),rsOther.getValue());    builder.append(rsThis.getTimestamp(),rsOther.getTimestamp());  }  return builder.toComparison();}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount());    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (!this.isThereOpenPosition()) {      _log.info("No open position so Cancel Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod);      this.cancel();      return;    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5)) && newBar) {    } else     if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(60))) {    } else     if (startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(60))) {      _log.info("Rule after 10:30:00 bar, close the " + getTradestrategy().getStrategy().getClassName() + " Symbol: "+ getSymbol());      this.cancel();    }    if (!currentCandleItem.getLastUpdateDate().isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(2))) {      cancelOrdersClosePosition(true);      _log.info("Rule 15:58:00 close all open positions: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,10,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  public static String cleanAmp(String in){  if (in == null || in.length() == 0)   return in;  int pos=in.indexOf('&');  if (pos == -1)   return in;  if (pos + 1 < in.length() && in.charAt(pos + 1) != ' ')   in=in.substring(0,pos) + in.substring(pos + 1);  return in;}  }
class C{  public void testSerialization() throws Exception {  TungstenProperties props=makeProperties();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  props.store(baos);  baos.close();  byte[] bytes=baos.toByteArray();  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  TungstenProperties props2=new TungstenProperties();  props2.load(bais);  bais.close();  assertEquals("Comparing reloaded properties",props,props2);}  }
class C{  @Override public boolean hasPrevious(){  checkTokenized();  return tokenPos > 0;}  }
class C{  private void internalSetup(File ideDir) throws IOException {  List<SetupAction> list=setupActions.getResult();  list.add(new ProjectImporter(projectFiles));  List<SetupAction> ordered=SetupAction.order(list);  ordered.add(new SaveWorkspace());  SetupWithinEclipse internal=new SetupWithinEclipse(ideDir,ordered);  Errors.constrainTo(IOException.class).run(null);}  }
class C{  public boolean isYellow2Red(){  return yellow2Red;}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  private void hideLoadingView(boolean refresh){  mLoadingView.setVisibility(View.GONE);  if (refresh) {    refreshDisplay();  }}  }
class C{  public JBBPOut Flush() throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.flush();  }  return this;}  }
class C{  private void validateVcenter(VcenterUpdateParam param,Vcenter vcenter,Boolean validateConnection){  if (isSystemAdmin()) {    validateSystemVcenter(param,vcenter,validateConnection);  } else {    validateTenantVcenter(param,vcenter,validateConnection);  }}  }
class C{  public SqlViewer(JFrame parent){  super();  m_Parent=parent;  m_URL="";  m_User="";  m_Password="";  m_Query="";  m_History=new Properties();  createPanel();}  }
class C{  static float dBToLinear(float dB){  float linear=(float)Math.pow(10.0,dB / 20.0);  return linear;}  }
class C{  public int core_hashCode(){  return _core_hash_cache;}  }
class C{  public void buildPanel(){  GridBagLayout gridBagLayout=new GridBagLayout();  gridBagLayout.columnWidths=new int[]{10,100,10};  gridBagLayout.rowHeights=new int[]{20,0,0};  gridBagLayout.columnWeights=new double[]{0.0,1.0,0.0};  gridBagLayout.rowWeights=new double[]{0.0,1.0,Double.MIN_VALUE};  setLayout(gridBagLayout);  JScrollPane scrollPane=new JScrollPane();  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);  GridBagConstraints gbc_scrollPane=new GridBagConstraints();  gbc_scrollPane.insets=new Insets(0,0,0,5);  gbc_scrollPane.fill=GridBagConstraints.BOTH;  gbc_scrollPane.gridx=1;  gbc_scrollPane.gridy=1;  add(scrollPane,gbc_scrollPane);  statsTextPane=new JTextPane();  scrollPane.setViewportView(statsTextPane);  statsTextPane.setText("Start game to see statistics.");}  }
class C{  public static <E>List<E> parseList(InputStream is,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parseList(is);}  }
class C{  public List<String> findWords(char[][] board,String[] words){  List<String> res=new ArrayList<>();  TrieNode root=buildTrie(words);  for (int i=0; i < board.length; i++) {    for (int j=0; j < board[i].length; j++) {      dfs(board,i,j,root,res);    }  }  return res;}  }
class C{  public static void inheritVeriniceContextState(){  VeriniceContext.setState(state);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public void registerObserver(@NonNull RecyclerView.Adapter adapter){  adapter.registerAdapterDataObserver(observer);  observer.onChanged();}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  public QueryBuilder<T,ID> orderByRaw(String rawSql,ArgumentHolder... args){  orderByRaw=rawSql;  orderByArgs=args;  return this;}  }
class C{  public static void updateShareTrackAccountPreference(Context context,Account account){  if (account != null) {    PreferencesUtils.setString(context,R.string.share_track_account_key,account.name);  }}  }
class C{  private Base64(){}  }
class C{  public ZipfianGenerator(long _min,long _max){  this(_min,_max,ZIPFIAN_CONSTANT);}  }
class C{  public MultiUnion createMultiUnion(Iterator<Graph> graphs){  return new MultiUnion(graphs);}  }
class C{  @Override public void close() throws IOException {  if (!def.finished()) {    finish();  }  def.end();  out.close();}  }
class C{  public DOMManifest(Element manElem,XMLCryptoContext context,Provider provider) throws MarshalException {  Attr attr=manElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    this.id=attr.getValue();    manElem.setIdAttributeNode(attr,true);  } else {    this.id=null;  }  boolean secVal=Utils.secureValidation(context);  Element refElem=DOMUtils.getFirstChildElement(manElem,"Reference");  List<Reference> refs=new ArrayList<Reference>();  refs.add(new DOMReference(refElem,context,provider));  refElem=DOMUtils.getNextSiblingElement(refElem);  while (refElem != null) {    String localName=refElem.getLocalName();    if (!localName.equals("Reference")) {      throw new MarshalException("Invalid element name: " + localName + ", expected Reference");    }    refs.add(new DOMReference(refElem,context,provider));    if (secVal && (refs.size() > DOMSignedInfo.MAXIMUM_REFERENCE_COUNT)) {      String error="A maxiumum of " + DOMSignedInfo.MAXIMUM_REFERENCE_COUNT + " "+ "references per Manifest are allowed with secure validation";      throw new MarshalException(error);    }    refElem=DOMUtils.getNextSiblingElement(refElem);  }  this.references=Collections.unmodifiableList(refs);}  }
class C{  public WordsInDocumentByDirectory(String directory,String[] exceptions,boolean shuffle){  this(directory,exceptions,true,-1);}  }
class C{  static private IBindingSet[] elementsToBindingSets(final IPredicate<?> pred,final Object[] elements){  final IBindingSet[] sourceSample=new IBindingSet[elements.length];  for (int i=0; i < sourceSample.length; i++) {    final IBindingSet bset=new ListBindingSet();    BOpContext.copyValues((IElement)elements[i],pred,bset);    sourceSample[i]=bset;  }  return sourceSample;}  }
class C{  private void handleSelectionView(IProfile profile,boolean on){  if (on) {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(UIUtils.getCompatDrawable(mAccountHeaderContainer.getContext(),mAccountHeaderTextSectionBackgroundResource));      mAccountHeaderContainer.setOnClickListener(onSelectionClickListener);      mAccountHeaderContainer.setTag(R.id.material_drawer_profile_header,profile);    } else {      mAccountHeaderTextSection.setBackgroundResource(mAccountHeaderTextSectionBackgroundResource);      mAccountHeaderTextSection.setOnClickListener(onSelectionClickListener);      mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    }  } else {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(null);      mAccountHeaderContainer.setOnClickListener(null);    } else {      UIUtils.setBackground(mAccountHeaderTextSection,null);      mAccountHeaderTextSection.setOnClickListener(null);    }  }}  }
class C{  public void onDisconnect(){  input.setDisabled(true);  sendingButton.setDisabled(true);  connectingButton.setDisabled(false);  disconnectingButton.setDisabled(true);}  }
class C{  public void writeAttrString(Writer writer,String string,String encoding) throws IOException {  final int len=string.length();  if (len > m_attrBuff.length) {    m_attrBuff=new char[len * 2 + 1];  }  string.getChars(0,len,m_attrBuff,0);  final char[] stringChars=m_attrBuff;  for (int i=0; i < len; i++) {    char ch=stringChars[i];    if (m_charInfo.shouldMapAttrChar(ch)) {      accumDefaultEscape(writer,ch,i,stringChars,len,false,true);    } else {      if (0x0 <= ch && ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:          writer.write("&#9;");        break;case CharInfo.S_LINEFEED:      writer.write("&#10;");    break;case CharInfo.S_CARRIAGERETURN:  writer.write("&#13;");break;default :writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');break;}} else if (ch < 0x7F) {writer.write(ch);} else if (ch <= 0x9F) {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');} else if (ch == CharInfo.S_LINE_SEPARATOR) {writer.write("&#8232;");} else if (m_encodingInfo.isInEncoding(ch)) {writer.write(ch);} else {writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');}}}}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static DbException convert(Throwable e){  if (e instanceof DbException) {    return (DbException)e;  } else   if (e instanceof SQLException) {    return new DbException((SQLException)e);  } else   if (e instanceof InvocationTargetException) {    return convertInvocation((InvocationTargetException)e,null);  } else   if (e instanceof IOException) {    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  } else   if (e instanceof OutOfMemoryError) {    return get(ErrorCode.OUT_OF_MEMORY,e);  } else   if (e instanceof StackOverflowError || e instanceof LinkageError) {    return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());  } else   if (e instanceof Error) {    throw (Error)e;  }  return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());}  }
class C{  public static <K,V>Map<K,V> map(K[] keys,V[] values){  if (keys.length != values.length) {    throw new IllegalArgumentException("Could not create the map because the number of keys and values differs.");  }  Map<K,V> map=new HashMap<K,V>();  for (int i=0; i < keys.length; i++) {    K key=keys[i];    V value=values[i];    map.put(key,value);  }  return map;}  }
class C{  private static void sumAgg(double[] a,double[] c,int[] aix,int ai,final int len,final int n,KahanObject kbuff,KahanPlus kplus){  sumAggWithFn(a,c,aix,ai,len,n,kbuff,kplus);}  }
class C{  private void addEdges(String line,LagGraph lagGraph){  StringTokenizer st=new StringTokenizer(line);  String cause=st.nextToken();  while (st.hasMoreTokens()) {    String effect=st.nextToken();    if (effect == "") {      continue;    }    System.out.println(cause + " --> " + effect);    lagGraph.addFactor(effect);    lagGraph.addEdge(effect,new LaggedFactor(cause,1));  }}  }
class C{  protected static <T>void addItems(Collection<T> collection,T[] elements){  if (elements != null) {    for (    T element : elements) {      collection.add(element);    }  }}  }
class C{  public synchronized Vertex findById(Number id){  if (id == null) {    return null;  }  return this.entityManager.find(BasicVertex.class,id);}  }
class C{  public void test() throws Exception {  final Properties properties=loadProperties("quads.properties");  BigdataSail sail=new BigdataSail(properties);  BigdataSailRepository repo=new BigdataSailRepository(sail);  repo.initialize();  try {    final RepositoryConnection cxn=repo.getReadOnlyConnection();    long stmtCount=sail.getDatabase().getStatementCount();    System.err.println("Statement Count: " + stmtCount);    RepositoryResult<Resource> graphs=cxn.getContextIDs();    HashSet<URI> ngs=new HashSet<URI>();    while (graphs.hasNext()) {      Resource g=graphs.next();      if (g instanceof URI) {        ngs.add((URI)g);      }    }    System.err.println("graphCount: " + ngs.size());    TupleQuery actorQuery=cxn.prepareTupleQuery(QueryLanguage.SPARQL,"SELECT " + "DISTINCT" + " ?actID ?actor  WHERE {"+ " ?movie a <http://cambridgesemantics.com/ontologies/2009/08/Film#Movie>. "+ " ?movie <http://cambridgesemantics.com/ontologies/2009/08/Film#performance> ?actID ."+ " ?actID <http://cambridgesemantics.com/ontologies/2009/08/Film#mpName> ?actor ."+ " ?actID a <http://cambridgesemantics.com/ontologies/2009/08/Film#Actor>"+ "}");    DatasetImpl ds=new DatasetImpl();    for (    URI g : ngs) {      ds.addDefaultGraph(g);    }    actorQuery.setDataset(ds);    actorQuery.setIncludeInferred(false);    long start=System.currentTimeMillis();    TupleQueryResult rs2=actorQuery.evaluate();    int size=0;    while (rs2.hasNext()) {      rs2.next();      size++;      if (size % 100 == 0) {        System.err.println(size);      }    }    System.err.println("Query time/size:" + (System.currentTimeMillis() - start) + "/"+ size);    cxn.close();  }  finally {    sail.shutDown();  }}  }
class C{  public void changeLockCode(String code,String data){  ComponentName demoDeviceAdmin=new ComponentName(context,AgentDeviceAdminReceiver.class);  devicePolicyManager.setPasswordMinimumLength(demoDeviceAdmin,DEFAULT_PASSWORD_MIN_LENGTH);  String password=null;  try {    JSONObject lockData=new JSONObject(data);    if (!lockData.isNull(resources.getString(R.string.intent_extra_password))) {      password=(String)lockData.get(resources.getString(R.string.intent_extra_password));    }    resultBuilder.build(code);    if (password != null && !password.isEmpty()) {      devicePolicyManager.resetPassword(password,DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);      devicePolicyManager.lockNow();    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount){  return this.addPaymentAmount(id,amount,false);}  }
class C{  void previousPage(PageBtreeCursor cursor){  if (parentPageId == PageBtree.ROOT) {    cursor.setCurrent(null,0);    return;  }  PageBtreeNode next=(PageBtreeNode)index.getPage(parentPageId);  next.previousPage(cursor,getPos());}  }
class C{  public ClientConfig withMediaType(String mediaType){  setMediaType(mediaType);  return this;}  }
class C{  public boolean maketoc(String rpfDir){  boolean ret=false;  MakeToc mt=new MakeToc();  String[] paths=new String[]{rpfDir};  paths=mt.searchForRpfFiles(paths);  try {    mt.create(paths,rpfDir + "/" + RpfTocHandler.RPF_TOC_FILE_NAME,false);    ret=true;  } catch (  MakeTocException mte) {    Debug.error("Problem creating A.TOC file: \n" + mte.getMessage());  }  return ret;}  }
class C{  public void testBottomUpSemanticsExplainHint06() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup06","explainHints-bottomup06.rq","explainHints.trig","explainHints-bottomup06.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertFalse(explainHintAnnotatedBOps.hasNext());}  }
class C{  protected OrderListState(){  viewSize=10;  viewIndex=0;  orderStatusState=FastMap.newInstance();  orderTypeState=FastMap.newInstance();  orderFilterState=FastMap.newInstance();  orderStatusState.put("viewcreated","Y");  orderStatusState.put("viewprocessing","Y");  orderStatusState.put("viewapproved","Y");  orderStatusState.put("viewhold","N");  orderStatusState.put("viewcompleted","N");  orderStatusState.put("viewsent","N");  orderStatusState.put("viewrejected","N");  orderStatusState.put("viewcancelled","N");  orderTypeState.put("view_SALES_ORDER","Y");}  }
class C{  public RestoreDurableEntityError(String s){  super(s);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.259 -0400",hash_original_method="ED4FF9FF056952A274F56A12F7DFED33",hash_generated_method="7BBB6519E109483C139357277A6925C9") public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public Array(final int size,final Set<Address.Flags> flags){  super(1,size,null);  this.addr=new DirectArrayRowAddress(this.$,0,null,0,size - 1,flags,true,1,size);}  }
class C{  public StrokeToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString("stroke.toolbar"));  setDisclosureStateCount(3);}  }
class C{  public void clearCache(){  organisations=new ArrayList<Organisation>();}  }
class C{  boolean cfgopt(Method m){  Deque<Block> code=dfs(m.entry.to);  SetMap<Block,Edge> pred=allpreds(code);  boolean changedout=false;  boolean changed;  do {    changed=false;    blocks:     for (    Block b : code) {      Expr last=b.last();      Block taken;      if (isJump(last) && sameExScope(b,taken=last.succ[0].to)) {        Edge s=last.succ[0];        if (containsOnly(pred.get(taken),s) && !taken.must_isolate_block) {          assert (taken.first().op != OP_phi);          verboseStatus("STRAIGHTEN " + s);          b.remove(last);          b.addAll(taken);          for (          Edge edge : taken.succ())           edge.from=b;          changed=true;          printabc(b,new PrintWriter(System.out));          break blocks;        }        Expr first=taken.first();        if (first.op == OP_returnvalue || first.op == OP_returnvoid) {          verboseStatus("PRUNE " + b + "->"+ s);          last.op=first.op;          last.args=first.op == OP_returnvoid ? noexprs : new Expr[]{first.args[0]};          last.succ=noedges;          changed=true;          break blocks;        }        Expr r;        if (first.op == OP_phi && taken.size() == 2 && (r=taken.last()).op == OP_returnvalue && r.args[0] == first) {          verboseStatus("PRUNE " + b + "->"+ s);          int i=findPhiArg(first,last.succ[0]);          last.op=r.op;          last.args=new Expr[]{first.args[i]};          last.succ=noedges;          first.removePhiInput(i);          changed=true;          break blocks;        }      }      if (isBranch(last)) {        Edge out=last.succ[1];        Expr cond=last.args[0];        taken=out.to;        Expr phi, br;        if (last.args.length == 1 && taken.size() == 2 && (phi=taken.first()).op == OP_phi && ((br=taken.last()).op == OP_iftrue || br.op == OP_iffalse)) {          int i=findPhiArg(phi,out);          if (phi.args[i] == cond) {            Edge before=br.op == last.op ? br.succ[1] : br.succ[0];            verboseStatus("SKIPTEST old " + out + " new "+ before);            phi.removePhiInput(i);            copyTargetPhi(phi,cond,before,out);            changed=true;            break blocks;          }        }        if (pred.get(last.succ[0].to).size() > 1 && pred.get(taken).size() == 1) {          invert(last);          changed=true;          break blocks;        }      }      for (      Edge edge : last.succ) {        if (skip(edge)) {          changed=true;          break blocks;        }      }    }    if (changed) {      dce(m);      code=dfs(m.entry.to);      pred=allpreds(code);      changedout=true;    }  } while (changed);  return changedout;}  }
class C{  @RequestMapping(value=EMR_CLUSTER_DEFINITIONS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_CLUSTER_DEFINITIONS_POST) public EmrClusterDefinitionInformation createEmrClusterDefinition(@RequestBody EmrClusterDefinitionCreateRequest request) throws Exception {  return emrClusterDefinitionService.createEmrClusterDefinition(request);}  }
class C{  protected void drawTop(final Graphics2D g2d,final int x,final int y,final int width,final int height){}  }
class C{  @Override public void configure() throws ReplicatorException, InterruptedException {  super.configure();  rootDir=new FilePath(directory);  serviceDir=new FilePath(rootDir,serviceName);  try {    uri=new URI(hdfsUri);  } catch (  URISyntaxException e) {    throw new ReplicatorException("Invalid HDFS URI: uri=" + uri + " messsage="+ e.getMessage(),e);  }  TungstenProperties hdfsProps;  if (hdfsConfigProperties == null) {    hdfsProps=new TungstenProperties();  } else {    File configPropFile=new File(hdfsConfigProperties);    TungstenPropertiesIO propsIO=new TungstenPropertiesIO(configPropFile);    propsIO.setFormat(TungstenPropertiesIO.JAVA_PROPERTIES);    hdfsProps=propsIO.read();  }  hdfsFileIO=new HdfsFileIO(uri,hdfsProps);  commitSeqno=new FileCommitSeqno(hdfsFileIO);  commitSeqno.setServiceName(serviceName);  commitSeqno.setChannels(channels);  commitSeqno.setServiceDir(serviceDir);}  }
class C{  public SimpleTriggerImpl(){  super();}  }
class C{  public void testConstructor_IIInetAddress() throws Exception {  new mySSLServerSocket(0,0,null);  int[] port_invalid={-1,65536,Integer.MIN_VALUE,Integer.MAX_VALUE};  mySSLServerSocket ssl=new mySSLServerSocket(0,0,InetAddress.getLocalHost());  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i],1,InetAddress.getLocalHost());      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort(),0,InetAddress.getLocalHost());    fail("IOException should be thrown for");  } catch (  IOException expected) {  }}  }
class C{  public static void serializeMeterReply(List<OFMeterStatsReply> meterReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterStatsReply meterReply=meterReplies.get(0);  jGen.writeStringField("version",meterReply.getVersion().toString());  jGen.writeFieldName("meter");  jGen.writeStartArray();  for (  OFMeterStats entry : meterReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("meterId",entry.getMeterId());    jGen.writeNumberField("flowCount",entry.getFlowCount());    jGen.writeNumberField("packetInCount",entry.getPacketInCount().getValue());    jGen.writeNumberField("byteInCount",entry.getByteInCount().getValue());    jGen.writeFieldName("meterBandStats");    jGen.writeStartArray();    for (    OFMeterBandStats bandStats : entry.getBandStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetBandCount",bandStats.getPacketBandCount().getValue());      jGen.writeNumberField("byteBandCount",bandStats.getByteBandCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeNumberField("durationSec",entry.getDurationSec());    jGen.writeNumberField("durationNsec",entry.getDurationNsec());    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  public String dump(PrivateKey privateKey) throws Asn1Exception, IOException {  return dump(privateKey.getEncoded());}  }
class C{  public void insert(int offset,long value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public ScVolume createViewVolume(String name,String instanceId) throws StorageCenterAPIException {  LOG.debug("Creating view volume of replay {}",instanceId);  String errorMessage="";  Parameters params=new Parameters();  params.add("Name",name);  params.add("Notes",NOTES_STRING);  try {    RestResult result=restClient.post(String.format("StorageCenter/ScReplay/%s/CreateView",instanceId),params.toJson());    if (checkResults(result)) {      return gson.fromJson(result.getResult(),ScVolume.class);    }  } catch (  Exception e) {    errorMessage=String.format("Error creating view volume: %s",e);    LOG.warn(errorMessage);  }  if (errorMessage.length() == 0) {    errorMessage=String.format("Unable to create view volume %s from replay %s",name,instanceId);  }  throw new StorageCenterAPIException(errorMessage);}  }
class C{  public Future<ReplDBMSHeader> watchForExtractedEventId(String eventId) throws InterruptedException {  return stages.getFirst().watchForProcessedEventId(eventId,false);}  }
class C{  private static boolean looksLikeIfWhileForCatch(IDocument document,int position,String partitioning){  position=firstNonWhitespaceBackward(document,position,partitioning,-1);  if (position == -1)   return false;  return looksLike(document,position,"if") || looksLike(document,position,"while") || looksLike(document,position,"catch")|| looksLike(document,position,"synchronized")|| looksLike(document,position,"switch")|| looksLike(document,position,"for");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.ROUTER__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.ROUTER__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);case EipPackage.ROUTER__OWNED_ROUTES:return ((InternalEList<?>)getOwnedRoutes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void issueCommandCheck(String cmd) throws sun.net.ftp.FtpProtocolException, IOException {  if (!issueCommand(cmd)) {    throw new sun.net.ftp.FtpProtocolException(cmd + ":" + getResponseString(),getLastReplyCode());  }}  }
class C{  public Vector3f subtract(Vector3f vec){  return new Vector3f(x - vec.x,y - vec.y,z - vec.z);}  }
class C{  public ParallelTaskBuilder prepareHttpHead(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.HEAD);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  @Inline public static void enableGC(){  enableGC(false);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tChange generalization parameter Rho for Clusters\n","PC",0,"-PC"));  newVector.addElement(new Option("\tChange threshold to select activated neurons (no-winner-takes-all)\n","THR",0,"-THR"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL:    setLiteral((Literal)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void attachLocalMediaStream(MediaStream mediaStream){  this.pcClient.setLocalMediaStream(mediaStream);}  }
class C{  private String inlineCommentFilter(String line){  if (line == null || line.equals("")) {    return "";  }  StringBuffer buf=new StringBuffer();  int index;  if ((index=line.indexOf("//")) > -1 && !isInsideString(line,index)) {    buf.append(stringFilter(line.substring(0,index)));    buf.append(commentStart);    buf.append(line.substring(index));    buf.append(commentEnd);  } else {    buf.append(stringFilter(line));  }  return buf.toString();}  }
class C{  @Override protected void initGUI(){  super.initGUI();  setLayout(new BorderLayout());  m_PaneView=new JEditorPane();  m_PaneView.setEditable(false);  m_PaneView.setContentType("text/html");  add(new BaseScrollPane(m_PaneView),BorderLayout.CENTER);}  }
class C{  public QueryStringDecoder(String uri,Charset charset){  this(uri,charset,true);}  }
class C{  private void showTooltip(int stringId){  if (mToast != null)   mToast.cancel();  Context ctx=getContext();  mToast=Toast.makeText(ctx,ctx.getResources().getString(stringId),Toast.LENGTH_SHORT);  mToast.setGravity(Gravity.BOTTOM | Gravity.CENTER,0,getHeight());  mToast.show();}  }
class C{  protected void checkUnboundPrefixInEntRef(Node node){  Node child, next;  for (child=node.getFirstChild(); child != null; child=next) {    next=child.getNextSibling();    if (child.getNodeType() == Node.ELEMENT_NODE) {      String prefix=child.getPrefix();      if (prefix != null && fNSBinder.getURI(prefix) == null) {        String msg=Utils.messages.createMessage(MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),prefix});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,null,null,null));        }      }      NamedNodeMap attrs=child.getAttributes();      for (int i=0; i < attrs.getLength(); i++) {        String attrPrefix=attrs.item(i).getPrefix();        if (attrPrefix != null && fNSBinder.getURI(attrPrefix) == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),attrs.item(i)});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,null,null,null));          }        }      }    }    if (child.hasChildNodes()) {      checkUnboundPrefixInEntRef(child);    }  }}  }
class C{  private void positionIcon(){  if (mIcon == null) {    return;  }  Rect tmpRect=mPositionIconOutput;  getLineBounds(0,tmpRect);  mPositionIconAvailable.set(0,0,getWidth(),tmpRect.top);  final int layoutDirection=getLayoutDirection();  Gravity.apply(Gravity.CENTER_VERTICAL | Gravity.START,mIcon.getIntrinsicWidth(),mIcon.getIntrinsicHeight(),mPositionIconAvailable,mPositionIconOutput,layoutDirection);  mIcon.setBounds(mPositionIconOutput);}  }
class C{  public Card(int rank,int suit){  this.rank=rank;  this.suit=suit;}  }
class C{  @Transactional public void updateCheque_DD_Card_Deposit_Receipt(final Long receiptId,final String toBankaccountGlcode,final InstrumentHeader instrumentHeader,final Map valuesMap){  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit_Receipt | Start");  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit_Receipt for" + instrumentHeader + "and receiptId"+ receiptId);  final CVoucherHeader payIn=(CVoucherHeader)persistenceService.find("from CVoucherHeader where id=?",receiptId);  updateInstrumentAndPayin(payIn,(Bankaccount)valuesMap.get("depositedBankAccount"),instrumentHeader,(EgwStatus)valuesMap.get("instrumentDepositedStatus"));  addToBankRecon(payIn,instrumentHeader,(EgwStatus)valuesMap.get("instrumentReconciledStatus"));  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit_Receipt | End");}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  traverseFragment(pos);  this.m_contentHandler.endDocument();}  }
class C{  public ECKey(){  this(secureRandom);}  }
class C{  public OrderEventImpl(final OrderEvent parent,final String eventId,final CustomerOrder customerOrder,final CustomerOrderDelivery customerOrderDelivery){  this(parent,eventId,customerOrder,customerOrderDelivery,null);}  }
class C{  protected void initializeGenomeSegmentsByEndIndices(final EvolutionState state,final Parameter base,final Parameter def,int numSegments){  int previousSegmentEnd=-1;  int currentSegmentEnd=0;  for (int i=0; i < numSegments; i++) {    if (state.parameters.exists(base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END),def.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END))) {      currentSegmentEnd=state.parameters.getInt(base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END),def.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END));    } else {      state.output.fatal("Genome segment " + i + " has not been defined!"+ "\nYou must specify end indices for "+ numSegments+ " segment(s)",base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END),base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_END));    }    if (currentSegmentEnd <= previousSegmentEnd || currentSegmentEnd >= genomeSize)     state.output.fatal("Invalid end index value for segment " + i + ": "+ currentSegmentEnd+ "\nThe value must be greater than "+ previousSegmentEnd+ " and smaller than "+ genomeSize);    if (i == numSegments - 1 && currentSegmentEnd != (genomeSize - 1))     state.output.fatal("Invalid end index value for the last segment " + i + ": "+ currentSegmentEnd+ "\nThe value must be equal to the index of the last gene in the genome:  "+ (genomeSize - 1));    for (int j=previousSegmentEnd + 1; j <= currentSegmentEnd; j++) {      loadParametersForGene(state,j,base.push(P_SEGMENT).push("" + i),def.push(P_SEGMENT).push("" + i),"");    }    previousSegmentEnd=currentSegmentEnd;  }}  }
class C{  public String first(VCardDataType... dataTypes){  String names[]=new String[dataTypes.length];  for (int i=0; i < dataTypes.length; i++) {    VCardDataType dataType=dataTypes[i];    names[i]=toLocalName(dataType);  }  return first(names);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle,Axis axis,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(axis),eccentricity,angle,direction);}  }
class C{  public final long readUnsignedInt() throws IOException {  mPosition+=4;  d.readFully(w,0,4);  return ((long)(w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff)) & 0X00000000FFFFFFFFL;}  }
class C{  public void enables(Control... controls){  this.controls.addAll(ImmutableList.copyOf(controls));  updateEnabledStateOfTargetControls();}  }
class C{  public boolean isEnabled(){  Spec spec=ToolboxHandle.getCurrentSpec();  if (spec == null) {    return false;  }  TLAEditor tlaEditor=EditorUtil.getTLAEditorWithFocus();  if (tlaEditor == null) {    return false;  }  String moduleName=tlaEditor.getModuleName();  return spec.getTpMapping(moduleName + ".tla") != null;}  }
class C{  public void dispose(){  myAlarm.cancelAllRequests();}  }
class C{  private static String cleanup(String title){  if (title != null) {    int pos=title.indexOf('&');    if (pos != -1 && title.length() > pos) {      int mnemonic=title.toUpperCase().charAt(pos + 1);      if (mnemonic != ' ')       title=title.substring(0,pos) + title.substring(pos + 1);    }  }  return title;}  }
class C{  public static void sort(short[] array){  sort(0,array.length,array);}  }
class C{  public static float[] copyOfRange(float[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  float[] copy=new float[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public String debuggingOutputTipText(){  return "Output debugging information to the console";}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  mFileToRemove=getStorageManager().getFileByPath(mRemotePath);  boolean localRemovalFailed=false;  if (!mOnlyLocalCopy) {    RemoveRemoteFileOperation operation=new RemoveRemoteFileOperation(mRemotePath);    result=operation.execute(client);    if (result.isSuccess() || result.getCode() == ResultCode.FILE_NOT_FOUND) {      localRemovalFailed=!(getStorageManager().removeFile(mFileToRemove,true,true));    }  } else {    localRemovalFailed=!(getStorageManager().removeFile(mFileToRemove,false,true));    if (!localRemovalFailed) {      result=new RemoteOperationResult(ResultCode.OK);    }  }  if (localRemovalFailed) {    result=new RemoteOperationResult(ResultCode.LOCAL_STORAGE_NOT_REMOVED);  }  return result;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  for (  final IExpression e : elements) {    if (e != null) {      e.collectMetaInformation(meta);    }  }}  }
class C{  public CastingValidatorTestCase(String name){  super(name);}  }
class C{  public int countTestCases(){  return 1;}  }
class C{  public boolean startsWith(String prefix){  return startsWith(prefix,0);}  }
class C{  public CompareResult<InetAddress> compareDnses(LinkProperties target){  CompareResult<InetAddress> result=new CompareResult<>();  result.removed=new ArrayList<>(mDnses);  result.added.clear();  if (target != null) {    for (    InetAddress newAddress : target.getDnses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  static PageDataOverflow create(PageStore store,int page,int type,int parentPageId,int next,Data all,int offset,int size){  Data data=store.createData();  PageDataOverflow p=new PageDataOverflow(store,page,data);  store.logUndo(p,null);  data.writeByte((byte)type);  data.writeShortInt(0);  data.writeInt(parentPageId);  if (type == Page.TYPE_DATA_OVERFLOW) {    data.writeInt(next);  } else {    data.writeShortInt(size);  }  p.start=data.length();  data.write(all.getBytes(),offset,size);  p.type=type;  p.parentPageId=parentPageId;  p.nextPage=next;  p.size=size;  return p;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testWithValueInConvertedClass(){  converterLookup.registerConverter(new ToAttributedValueConverter(Software.class,mapper,reflectionProvider,converterLookup,"name"),0);  final Software name=new Software(null,"XStream");  final StringWriter writer=new StringWriter();  final CompactWriter compactWriter=new CompactWriter(writer);  new TreeMarshaller(compactWriter,converterLookup,mapper).start(name,null);  compactWriter.flush();  assertEquals("<software>XStream</software>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  assertEquals(name,new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null));}  }
class C{  protected void doPrintClassification(double[] dist,Instance inst,int index) throws Exception {}  }
class C{  public boolean checkDupWithinKB(int[] arr,int k){  return false;}  }
class C{  public static Field findField(Class<?> type,String name) throws NoSuchFieldException {  if (name == null) {    throw new IllegalArgumentException("Field name is not set");  }  Field field=type.getField(name);  if (!Modifier.isPublic(field.getModifiers())) {    throw new NoSuchFieldException("Field '" + name + "' is not public");  }  type=field.getDeclaringClass();  if (!Modifier.isPublic(type.getModifiers()) || !isPackageAccessible(type)) {    throw new NoSuchFieldException("Field '" + name + "' is not accessible");  }  return field;}  }
class C{  public final synchronized void redoMove(){  if (game.canRedoMove()) {    abortSearch();    redoMoveNoUpdate();    updateComputeThreads();    setSelection();    setAnimMove(game.prevPos(),game.getLastMove(),true);    updateGUI();  }}  }
class C{  public static boolean isStringType(int type){  if (type == STRING || type == MULTI_VALUE) {    return true;  }  return false;}  }
class C{  private void analize(){  String value=null;  try {    value=tokenizer.nextToken();    procId=new Integer(value);    procName=tokenizer.nextToken();  } catch (  NumberFormatException n) {    procName=value;  }}  }
class C{  public void addImageTask(ImageTask imageTask,CubeImageView imageView){  LoadImageTask runningTask=mLoadWorkList.get(imageTask.getIdentityKey());  if (runningTask != null) {    if (imageView != null) {      if (DEBUG) {        Log.d(Log_TAG,String.format(MSG_ATTACK_TO_RUNNING_TASK,imageTask,runningTask.getImageTask()));      }      runningTask.getImageTask().addImageView(imageView);    }    return;  } else {    imageTask.addImageView(imageView);  }  imageTask.onLoading(mImageLoadHandler);  LoadImageTask loadImageTask=new LoadImageTask(imageTask);  mLoadWorkList.put(imageTask.getIdentityKey(),loadImageTask);  mImageTaskExecutor.execute(loadImageTask);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public ChangeListInfo(){}  }
class C{  private void deleteAccount(){  AccountsSource source=new AccountsSource(getApplicationContext());  source.wOpen();  source.deleteAccount(this.account);  source.close();}  }
class C{  @Override public TimeValue ackTimeout(){  return ackTimeout;}  }
class C{  public static boolean putString(ContentResolver resolver,String name,String value){  return putStringForUser(resolver,name,value,UserHandle.myUserId());}  }
class C{  public void addItem(Comparable key,final Number value){  this.values.addValue(key,value);}  }
class C{  public String[] toShellCommand(){  return ShellFactory.getShell().createShellCommand(this);}  }
class C{  protected void fireAdjustmentValueChanged(int id,int type,int value){  fireAdjustmentValueChanged(id,type,value,getValueIsAdjusting());}  }
class C{  public Lexicon(boolean hasBias,boolean storeStrings){  feature2Id=new TIntIntHashMap();  nextFeatureId=0;  if (hasBias)   this.previewFeature(GLOBAL_BIAS);  if (storeStrings)   featureNames=new ArrayList<>(); else   featureNames=null;  featureCounts=new TIntIntHashMap();}  }
class C{  @Override public String toString(){  return getXMLDocument().toString();}  }
class C{  static void testSetUp() throws Exception {  InstallSDE.install(new File(System.getProperty("test.classes","."),op + "Mangle.class"),new File(System.getProperty("test.src","."),"Mangle.sde"));}  }
class C{  protected FeatureTypeImpl(){  super();}  }
class C{  protected final boolean storeUnknownField(CodedInputByteBufferNano input,int tag) throws IOException {  int startPos=input.getPosition();  if (!input.skipField(tag)) {    return false;  }  int fieldNumber=WireFormatNano.getTagFieldNumber(tag);  int endPos=input.getPosition();  byte[] bytes=input.getData(startPos,endPos - startPos);  UnknownFieldData unknownField=new UnknownFieldData(tag,bytes);  FieldData field=null;  if (unknownFieldData == null) {    unknownFieldData=new FieldArray();  } else {    field=unknownFieldData.get(fieldNumber);  }  if (field == null) {    field=new FieldData();    unknownFieldData.put(fieldNumber,field);  }  field.addUnknownField(unknownField);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:08.480 -0500",hash_original_method="1580E47F5CA043D92A51FFCE46D3AD3B",hash_generated_method="A973F409C0398A46C86939076D4BEBA6") private void simplifySubject(){  int start=0;  String subject=getSubject();  int len=subject.length();  boolean done=false;  while (!done) {    done=true;    while (start < len && subject.charAt(start) == ' ') {      start++;    }    if (start < (len - 2) && (subject.charAt(start) == 'r' || subject.charAt(start) == 'R') && (subject.charAt(start + 1) == 'e' || subject.charAt(start + 1) == 'E')) {      if (subject.charAt(start + 2) == ':') {        start+=3;        isReply=true;        done=false;      } else       if (start < (len - 2) && (subject.charAt(start + 2) == '[' || subject.charAt(start + 2) == '(')) {        int i=start + 3;        while (i < len && subject.charAt(i) >= '0' && subject.charAt(i) <= '9')         i++;        if (i < (len - 1) && (subject.charAt(i) == ']' || subject.charAt(i) == ')') && subject.charAt(i + 1) == ':') {          start=i + 2;          isReply=true;          done=false;        }      }    }    if (simplifiedSubject == "(no subject)")     simplifiedSubject="";    int end=len;    while (end > start && subject.charAt(end - 1) < ' ')     end--;    if (start == 0 && end == len)     simplifiedSubject=subject; else     simplifiedSubject=subject.substring(start,end);  }}  }
class C{  @Override public void onTabUnselected(TabLayout.Tab tab){}  }
class C{  public E putPhoto(final String key,@Nullable final SharePhoto value){  this.bundle.putParcelable(key,value);  return (E)this;}  }
class C{  public void clearFilter(){  ignoredAttKeys.clear();  ignorePathKeys=false;}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public boolean add(final Differences diffs){  return addAll(diffs);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void main(String[] args){  try {    weka.core.WekaPackageManager.loadPackages(false,true,false);    Experiment exp=null;    String xmlOption=Utils.getOption("xml",args);    if (!xmlOption.equals("")) {      args=new XMLOptions(xmlOption).toArray();    }    String expFile=Utils.getOption('l',args);    String saveFile=Utils.getOption('s',args);    boolean runExp=Utils.getFlag('r',args);    boolean verbose=Utils.getFlag("verbose",args);    if (expFile.length() == 0) {      exp=new Experiment();      try {        exp.setOptions(args);        Utils.checkForRemainingOptions(args);      } catch (      Exception ex) {        ex.printStackTrace();        String result="Usage:\n\n" + "-l <exp|xml file>\n" + "\tLoad experiment from file (default use cli options).\n"+ "\tThe type is determined, based on the extension (" + FILE_EXTENSION + " or .xml)\n"+ "-s <exp|xml file>\n"+ "\tSave experiment to file after setting other options.\n"+ "\tThe type is determined, based on the extension ("+ FILE_EXTENSION+ " or .xml)\n"+ "\t(default don't save)\n"+ "-r\n"+ "\tRun experiment (default don't run)\n"+ "-xml <filename | xml-string>\n"+ "\tget options from XML-Data instead from parameters.\n"+ "-verbose\n"+ "\toutput progress information to std out."+ "\n";        Enumeration<Option> enm=((OptionHandler)exp).listOptions();        while (enm.hasMoreElements()) {          Option option=enm.nextElement();          result+=option.synopsis() + "\n";          result+=option.description() + "\n";        }        throw new Exception(result + "\n" + ex.getMessage());      }    } else {      exp=read(expFile);      String dataName;      do {        dataName=Utils.getOption('T',args);        if (dataName.length() != 0) {          File dataset=new File(dataName);          exp.getDatasets().addElement(dataset);        }      } while (dataName.length() != 0);    }    System.err.println("Experiment:\n" + exp.toString());    if (saveFile.length() != 0) {      write(saveFile,exp);    }    if (runExp) {      System.err.println("Initializing...");      exp.initialize();      System.err.println("Iterating...");      exp.runExperiment(verbose);      System.err.println("Postprocessing...");      exp.postProcess();    }  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public T caseEqualsOp_(EqualsOp_ object){  return null;}  }
class C{  public Element store(Object o){  TripleTurnoutSignalHead p=(TripleTurnoutSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getGreen(),"green"));  element.addContent(addTurnoutElement(p.getYellow(),"yellow"));  element.addContent(addTurnoutElement(p.getRed(),"red"));  return element;}  }
class C{  public String chompTo(String seq){  String data=consumeTo(seq);  matchChomp(seq);  return data;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case N4mfPackage.PROJECT_DESCRIPTION:{      ProjectDescription projectDescription=(ProjectDescription)theEObject;      T result=caseProjectDescription(projectDescription);      if (result == null)       result=caseSimpleProjectDescription(projectDescription);      if (result == null)       result=defaultCase(theEObject);      return result;    }case N4mfPackage.EXEC_MODULE:{    ExecModule execModule=(ExecModule)theEObject;    T result=caseExecModule(execModule);    if (result == null)     result=defaultCase(theEObject);    return result;  }case N4mfPackage.TESTED_PROJECTS:{  TestedProjects testedProjects=(TestedProjects)theEObject;  T result=caseTestedProjects(testedProjects);  if (result == null)   result=defaultCase(theEObject);  return result;}case N4mfPackage.INIT_MODULES:{InitModules initModules=(InitModules)theEObject;T result=caseInitModules(initModules);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.IMPLEMENTED_PROJECTS:{ImplementedProjects implementedProjects=(ImplementedProjects)theEObject;T result=caseImplementedProjects(implementedProjects);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.PROJECT_DEPENDENCIES:{ProjectDependencies projectDependencies=(ProjectDependencies)theEObject;T result=caseProjectDependencies(projectDependencies);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES:{ProvidedRuntimeLibraries providedRuntimeLibraries=(ProvidedRuntimeLibraries)theEObject;T result=caseProvidedRuntimeLibraries(providedRuntimeLibraries);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES:{RequiredRuntimeLibraries requiredRuntimeLibraries=(RequiredRuntimeLibraries)theEObject;T result=caseRequiredRuntimeLibraries(requiredRuntimeLibraries);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION:{SimpleProjectDescription simpleProjectDescription=(SimpleProjectDescription)theEObject;T result=caseSimpleProjectDescription(simpleProjectDescription);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.TESTED_PROJECT:{TestedProject testedProject=(TestedProject)theEObject;T result=caseTestedProject(testedProject);if (result == null) result=caseSimpleProjectDependency(testedProject);if (result == null) result=caseProjectReference(testedProject);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.DECLARED_VERSION:{DeclaredVersion declaredVersion=(DeclaredVersion)theEObject;T result=caseDeclaredVersion(declaredVersion);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.SOURCE_FRAGMENT:{SourceFragment sourceFragment=(SourceFragment)theEObject;T result=caseSourceFragment(sourceFragment);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.MODULE_FILTER:{ModuleFilter moduleFilter=(ModuleFilter)theEObject;T result=caseModuleFilter(moduleFilter);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.BOOTSTRAP_MODULE:{BootstrapModule bootstrapModule=(BootstrapModule)theEObject;T result=caseBootstrapModule(bootstrapModule);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT:{ExtendedRuntimeEnvironment extendedRuntimeEnvironment=(ExtendedRuntimeEnvironment)theEObject;T result=caseExtendedRuntimeEnvironment(extendedRuntimeEnvironment);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.PROJECT_REFERENCE:{ProjectReference projectReference=(ProjectReference)theEObject;T result=caseProjectReference(projectReference);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.SIMPLE_PROJECT_DEPENDENCY:{SimpleProjectDependency simpleProjectDependency=(SimpleProjectDependency)theEObject;T result=caseSimpleProjectDependency(simpleProjectDependency);if (result == null) result=caseProjectReference(simpleProjectDependency);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.MODULE_FILTER_SPECIFIER:{ModuleFilterSpecifier moduleFilterSpecifier=(ModuleFilterSpecifier)theEObject;T result=caseModuleFilterSpecifier(moduleFilterSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.RUNTIME_PROJECT_DEPENDENCY:{RuntimeProjectDependency runtimeProjectDependency=(RuntimeProjectDependency)theEObject;T result=caseRuntimeProjectDependency(runtimeProjectDependency);if (result == null) result=caseSimpleProjectDependency(runtimeProjectDependency);if (result == null) result=caseProjectReference(runtimeProjectDependency);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.REQUIRED_RUNTIME_LIBRARY_DEPENDENCY:{RequiredRuntimeLibraryDependency requiredRuntimeLibraryDependency=(RequiredRuntimeLibraryDependency)theEObject;T result=caseRequiredRuntimeLibraryDependency(requiredRuntimeLibraryDependency);if (result == null) result=caseRuntimeProjectDependency(requiredRuntimeLibraryDependency);if (result == null) result=caseSimpleProjectDependency(requiredRuntimeLibraryDependency);if (result == null) result=caseProjectReference(requiredRuntimeLibraryDependency);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.PROVIDED_RUNTIME_LIBRARY_DEPENDENCY:{ProvidedRuntimeLibraryDependency providedRuntimeLibraryDependency=(ProvidedRuntimeLibraryDependency)theEObject;T result=caseProvidedRuntimeLibraryDependency(providedRuntimeLibraryDependency);if (result == null) result=caseRuntimeProjectDependency(providedRuntimeLibraryDependency);if (result == null) result=caseSimpleProjectDependency(providedRuntimeLibraryDependency);if (result == null) result=caseProjectReference(providedRuntimeLibraryDependency);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.PROJECT_DEPENDENCY:{ProjectDependency projectDependency=(ProjectDependency)theEObject;T result=caseProjectDependency(projectDependency);if (result == null) result=caseSimpleProjectDependency(projectDependency);if (result == null) result=caseProjectReference(projectDependency);if (result == null) result=defaultCase(theEObject);return result;}case N4mfPackage.VERSION_CONSTRAINT:{VersionConstraint versionConstraint=(VersionConstraint)theEObject;T result=caseVersionConstraint(versionConstraint);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  private void reassign(){  GridCacheMvccCandidate firstRmt=null;  if (rmts != null) {    for (    GridCacheMvccCandidate cand : rmts) {      if (firstRmt == null)       firstRmt=cand;      if (cand.owner())       return;    }  }  if (locs != null) {    boolean first=true;    for (ListIterator<GridCacheMvccCandidate> it=locs.listIterator(); it.hasNext(); ) {      GridCacheMvccCandidate cand=it.next();      if (first && cand.serializable()) {        if (cand.owner() || !cand.ready())         return;        cand.setOwner();        return;      }      first=false;      if (cand.owner())       return;      if (cand.ready()) {        GridCacheMvccCandidate prev=nonRollbackPrevious(cand);        if (prev != null && !prev.owner())         continue;        boolean assigned=false;        if (!cctx.isNear() && firstRmt != null && cand.version().isGreater(firstRmt.version())) {          while (prev != null && prev.owner()) {            for (            GridCacheMvccCandidate c : prev.parent().remoteMvccSnapshot()) {              if (c.version().equals(firstRmt.version())) {                cand.setOwner();                assigned=true;                break;              }            }            if (!assigned) {              for (              GridCacheMvccCandidate c : locs) {                if (c == cand || c.version().isGreater(firstRmt.version()))                 break;                for (GridCacheMvccCandidate p=c.previous(); p != null; p=p.previous()) {                  if (p.key().equals(prev.key())) {                    cand.setOwner();                    assigned=true;                    break;                  }                }                if (assigned)                 break;              }            }            if (assigned)             break;            prev=prev.previous();          }        }        if (!assigned) {          if (!cctx.isNear() && firstRmt != null) {            if (cand.version().isLess(firstRmt.version())) {              assert !cand.nearLocal();              cand.setOwner();              assigned=true;            }          } else {            cand.setOwner();            assigned=true;          }        }        if (assigned) {          it.remove();          locs.addFirst(cand);        }        return;      }    }  }}  }
class C{  public TypeMismatchException(String msg){  super(msg);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public ModelMBeanInfoSupport(String className,String description,ModelMBeanAttributeInfo[] attributes,ModelMBeanConstructorInfo[] constructors,ModelMBeanOperationInfo[] operations,ModelMBeanNotificationInfo[] notifications){  this(className,description,attributes,constructors,operations,notifications,null);}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  void errorForDOM3(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new XPathStylesheetDOM3Exception(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  public Params requireNetwork(){  requiresNetwork=true;  return this;}  }
class C{  private static void printBytes(int color){  System.out.println(colorToString(color));}  }
class C{  public void remove(DirectedEdge de){  outEdges.remove(de);}  }
class C{  @Override public boolean equals(Object otherObj){  if (otherObj instanceof TestDescriptor) {    TestDescriptor otherDesc=(TestDescriptor)otherObj;    return otherDesc.getClassName().equals(this.getClassName()) && otherDesc.getTestName().equals(this.getTestName());  }  return false;}  }
class C{  @HLEFunction(nid=0x67F0ED84,version=271) public int sceJpegCsc(TPointer imageBuffer,TPointer yCbCrBuffer,int widthHeight,int bufferWidth,int colorInfo){  return hleJpegCsc(imageBuffer,yCbCrBuffer,widthHeight,bufferWidth);}  }
class C{  public ScriptStepContainer(List<ScriptStepTO> steps){  this.steps=steps;}  }
class C{  private void computeUnnamedParams(){  unnamedParams.addAll(rawArgs.stream().filter(null).collect(Collectors.toList()));}  }
class C{  public <T extends Actor>GdxCellQuery<T> cell(T append){  for (  Actor actor : getItems())   if (actor instanceof Table)   return GdxCellQuery.build(this,((Table)actor).add(append));  return null;}  }
class C{  private void error(String stream,int amount){  Integer current=errors.get(stream);  if (current == null) {    current=0;  }  if (current > 10) {    current=10;  }  errors.put(stream,current + amount);}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  private String addStepsForPreOrPostCreateReplica(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,boolean preCreate,String taskId) throws InternalException {  List<VolumeDescriptor> blockVolmeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA,VolumeDescriptor.Type.BLOCK_SNAPSHOT,VolumeDescriptor.Type.VPLEX_IMPORT_VOLUME,VolumeDescriptor.Type.BLOCK_SNAPSHOT_SESSION},new VolumeDescriptor.Type[]{});  if (blockVolmeDescriptors.isEmpty()) {    _log.warn("Skipping RP create steps for create replica because no block volume descriptors were found");    return waitFor;  }  Map<VolumeDescriptor,List<URI>> descriptorToParentIds=new HashMap<VolumeDescriptor,List<URI>>();  Class<? extends DataObject> clazz=Volume.class;  for (  VolumeDescriptor descriptor : blockVolmeDescriptors) {    List<URI> parentIds=new ArrayList<>();    if (URIUtil.isType(descriptor.getVolumeURI(),BlockSnapshotSession.class)) {      BlockSnapshotSession snapshotSession=_dbClient.queryObject(BlockSnapshotSession.class,descriptor.getVolumeURI());      if (snapshotSession != null && !snapshotSession.getInactive()) {        if (!NullColumnValueGetter.isNullNamedURI(snapshotSession.getParent())) {          parentIds.add(snapshotSession.getParent().getURI());        } else         if (!NullColumnValueGetter.isNullValue(snapshotSession.getReplicationGroupInstance())) {          List<Volume> volsInRG=ControllerUtils.getVolumesPartOfRG(snapshotSession.getStorageController(),snapshotSession.getReplicationGroupInstance(),_dbClient);          for (          Volume vol : volsInRG) {            parentIds.add(vol.getId());          }        } else {          _log.warn(String.format("Skipping BlockSnapshotSession object with null parent and null replicationGroupInstance: %s",snapshotSession.getId().toString()));        }        clazz=BlockSnapshotSession.class;      }    } else     if (URIUtil.isType(descriptor.getVolumeURI(),BlockSnapshot.class)) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,descriptor.getVolumeURI());      if (snapshot != null && !snapshot.getInactive() && !NullColumnValueGetter.isNullNamedURI(snapshot.getParent())) {        parentIds.add(snapshot.getParent().getURI());        clazz=BlockSnapshot.class;      } else {        _log.warn(String.format("Skipping snapshot with null parent: %s",descriptor.getVolumeURI().toString()));      }    } else     if (URIUtil.isType(descriptor.getVolumeURI(),Volume.class)) {      Volume volume=_dbClient.queryObject(Volume.class,descriptor.getVolumeURI());      if (volume != null && !volume.getInactive() && !NullColumnValueGetter.isNullURI(volume.getAssociatedSourceVolume())) {        parentIds.add(volume.getAssociatedSourceVolume());      } else {        _log.warn(String.format("Skipping full copy with null parent: %s",descriptor.getVolumeURI().toString()));      }    } else {      _log.warn(String.format("Skipping unsupported copy type: %s",descriptor.getVolumeURI().toString()));    }    if (!parentIds.isEmpty()) {      descriptorToParentIds.put(descriptor,parentIds);    }  }  ProtectionSystem protectionSystem=null;  Volume aSrcVolume=null;  Set<String> volumeWWNs=new HashSet<String>();  Set<URI> copyList=new HashSet<URI>();  for (  Entry<VolumeDescriptor,List<URI>> entry : descriptorToParentIds.entrySet()) {    VolumeDescriptor descriptor=entry.getKey();    List<URI> parentIds=entry.getValue();    for (    URI parentId : parentIds) {      if (URIUtil.isType(parentId,Volume.class)) {        Volume parentVolume=_dbClient.queryObject(Volume.class,parentId);        if (parentVolume != null && !parentVolume.getInactive()) {          if (Volume.checkForVplexBackEndVolume(_dbClient,parentVolume)) {            parentVolume=Volume.fetchVplexVolume(_dbClient,parentVolume);          }          if (StringUtils.equals(parentVolume.getPersonality(),Volume.PersonalityTypes.TARGET.toString()) && Volume.checkForRP(_dbClient,parentVolume.getId())) {            volumeWWNs.add(RPHelper.getRPWWn(parentVolume.getId(),_dbClient));            copyList.add(descriptor.getVolumeURI());            if (protectionSystem == null) {              if (!NullColumnValueGetter.isNullURI(parentVolume.getProtectionController())) {                aSrcVolume=RPHelper.getRPSourceVolumeFromTarget(_dbClient,parentVolume);                protectionSystem=_dbClient.queryObject(ProtectionSystem.class,aSrcVolume.getProtectionController());              }            }          }        }      }    }  }  if (!volumeWWNs.isEmpty()) {    if (preCreate) {      String bookmarkName=VIPR_SNAPSHOT_PREFIX + (new Random()).nextInt();      String rpWaitFor=addCreateBookmarkStep(workflow,new ArrayList<URI>(),protectionSystem,bookmarkName,volumeWWNs,false,waitFor);      List<String> locks=new ArrayList<String>();      String lockName=ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,aSrcVolume.getConsistencyGroup(),protectionSystem.getId());      if (null != lockName) {        locks.add(lockName);        acquireWorkflowLockOrThrow(workflow,locks);      }      return addEnableImageAccessForCreateReplicaStep(workflow,protectionSystem,clazz,new ArrayList<URI>(copyList),bookmarkName,volumeWWNs,rpWaitFor);    } else {      return addDisableImageAccessForCreateReplicaStep(workflow,protectionSystem,clazz,new ArrayList<URI>(copyList),volumeWWNs,waitFor);    }  } else {    _log.warn("Skipping RP create steps for create replica. No qualifying volume WWNs found.");  }  return waitFor;}  }
class C{  public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected Point.Float computeDrawPoint(DrawContext dc,Rectangle2D rect,Vec4 screenPoint){  return new Point.Float((float)(screenPoint.x - rect.getWidth() / 2d),(float)(screenPoint.y));}  }
class C{  static SlideAction mapIntToValue(final int actionInt){  for (  SlideAction value : SlideAction.values()) {    if (actionInt == value.getIntValue()) {      return value;    }  }  return getDefault();}  }
class C{  public static void divideQuad(double src[],int srcoff,double left[],int loff,double right[],int roff){  double x1=src[srcoff + 0];  double y1=src[srcoff + 1];  double ctrlx=src[srcoff + 2];  double ctrly=src[srcoff + 3];  double x2=src[srcoff + 4];  double y2=src[srcoff + 5];  if (left != null) {    left[loff + 0]=x1;    left[loff + 1]=y1;  }  if (right != null) {    right[roff + 4]=x2;    right[roff + 5]=y2;  }  x1=(x1 + ctrlx) / 2.0;  y1=(y1 + ctrly) / 2.0;  x2=(x2 + ctrlx) / 2.0;  y2=(y2 + ctrly) / 2.0;  ctrlx=(x1 + x2) / 2.0;  ctrly=(y1 + y2) / 2.0;  if (left != null) {    left[loff + 2]=x1;    left[loff + 3]=y1;    left[loff + 4]=ctrlx;    left[loff + 5]=ctrly;  }  if (right != null) {    right[roff + 0]=ctrlx;    right[roff + 1]=ctrly;    right[roff + 2]=x2;    right[roff + 3]=y2;  }}  }
class C{  public JobExecutionContextImpl(Scheduler scheduler,TriggerFiredBundle firedBundle,Job job){  this.scheduler=scheduler;  this.trigger=firedBundle.getTrigger();  this.calendar=firedBundle.getCalendar();  this.jobDetail=firedBundle.getJobDetail();  this.job=job;  this.recovering=firedBundle.isRecovering();  this.fireTime=firedBundle.getFireTime();  this.scheduledFireTime=firedBundle.getScheduledFireTime();  this.prevFireTime=firedBundle.getPrevFireTime();  this.nextFireTime=firedBundle.getNextFireTime();  this.jobDataMap=new JobDataMap();  this.jobDataMap.putAll(jobDetail.getJobDataMap());  this.jobDataMap.putAll(trigger.getJobDataMap());}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  public static Map<String,Object> decode(final Map<String,Object> form,final String encoding){  if (form != null) {    for (    final String key : form.keySet()) {      final Object value=form.get(key);      if (value instanceof String) {        form.put(key,decode(value.toString(),encoding));      }    }  }  return form;}  }
class C{  public LogicalUnit createLUSEVolume(String systemObjectId,String metaHead,List<String> ldevIds) throws Exception {  return hdsApiVolumeManager.addLUSE(systemObjectId,metaHead,ldevIds);}  }
class C{  public static <DTO>List<DTO> createListDtoFromJson(String json,Class<DTO> dtoInterface){  return JsonUtils.createListDtoFromJson(json,dtoInterface);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void run(){  try {    while (!kill) {      doQuery();      Thread.sleep(3000);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public SystemManager(String id){  this(id,(ClassLoader)null);}  }
class C{  public static void main(String[] args) throws IOException {  HBaseSpanViewer viewer=new HBaseSpanViewer(HBaseConfiguration.create());  if (args.length == 0) {    List<SpanProtos.Span> spans=viewer.getRootSpans();    for (    SpanProtos.Span span : spans) {      System.out.println(toJsonString(span));    }  } else {    List<SpanProtos.Span> spans=viewer.getSpans(Long.parseLong(args[0]));    for (    SpanProtos.Span span : spans) {      System.out.println(toJsonString(span));    }  }  viewer.close();}  }
class C{  public void initializeHistory(){  Map<String,String> variables=readMySqlCharsetSystemVariables(null);  String ddlStatement=setStatementFor(variables);  dbSchema.applyDdl(source,"",ddlStatement,null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void initAnalysisCellBasedAccessibilityCSVWriterV2(String fileExtension){  try {    log.info("Initializing AnalysisCellBasedAccessibilityCSVWriterV2 ...");    accessibilityDataWriter=IOUtils.getBufferedWriter(InternalConstants.MATSIM_4_OPUS_TEMP + fileExtension + FILE_NAME);    accessibilityDataWriter.write(InternalConstants.ZONE_ID + "," + InternalConstants.X_COORDINATE+ ","+ InternalConstants.Y_COORDINATE+ ","+ InternalConstants.NEARESTNODE_ID+ ","+ InternalConstants.NEARESTNODE_X_COORD+ ","+ InternalConstants.NEARESTNODE_Y_COORD+ ","+ InternalConstants.ACCESSIBILITY_BY_FREESPEED+ ","+ InternalConstants.ACCESSIBILITY_BY_CAR+ ","+ InternalConstants.ACCESSIBILITY_BY_BIKE+ ","+ InternalConstants.ACCESSIBILITY_BY_WALK);    accessibilityDataWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void dispose(){  m_module.removeListener(m_moduleListener);}  }
class C{  protected void ensureExistingSvnConfigFile() throws IOException {  if (Files.notExists(GLOBAL_SUBVERSION_CONFIG_FILE_PATH)) {    Path parent=GLOBAL_SUBVERSION_CONFIG_FILE_PATH.getParent();    if (Files.notExists(parent)) {      Files.createDirectories(parent);    }    Files.createFile(GLOBAL_SUBVERSION_CONFIG_FILE_PATH);  }}  }
class C{  public static void isNotNull(String member,Object value) throws ValidationException {  if (value == null) {    ValidationException vf=new ValidationException(ReasonEnum.REQUIRED,member,new Object[]{member});    logValidationFailure(vf);    throw vf;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FUNCTION_OR_FIELD_ACCESSOR;}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  public ExtensionsAwareProcessorDecorator addExtension(final String extension){  notBlank(extension);  extensions.add(extension);  return this;}  }
class C{  public void requestStop(){  go=false;  interrupt();}  }
class C{  public void defaultConfiguration(){  clear();  setConfigParameter(ConfigurationKeys.VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING,12);  setConfigParameter(ConfigurationKeys.COUNTER_FULL_REVISION,1000);  setConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_REVISIONS,5000000l);  setConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_DIFFS,1000000l);  setConfigParameter(ConfigurationKeys.LIMIT_SQLSERVER_MAX_ALLOWED_PACKET,1000000l);  setConfigParameter(ConfigurationKeys.MODE_SURROGATES,SurrogateModes.DISCARD_REVISION);  setConfigParameter(ConfigurationKeys.WIKIPEDIA_ENCODING,"UTF-8");  setConfigParameter(ConfigurationKeys.MODE_OUTPUT,OutputType.BZIP2);  setConfigParameter(ConfigurationKeys.MODE_DATAFILE_OUTPUT,false);  setConfigParameter(ConfigurationKeys.MODE_ZIP_COMPRESSION_ENABLED,true);  setConfigParameter(ConfigurationKeys.LIMIT_SQL_FILE_SIZE,1000000000l);  setConfigParameter(ConfigurationKeys.LOGGING_PATH_DIFFTOOL,"logs");  setConfigParameter(ConfigurationKeys.LOGGING_LOGLEVEL_DIFFTOOL,Level.INFO);  setConfigParameter(ConfigurationKeys.VERIFICATION_DIFF,false);  setConfigParameter(ConfigurationKeys.VERIFICATION_ENCODING,false);  setConfigParameter(ConfigurationKeys.MODE_DEBUG_OUTPUT,false);  setConfigParameter(ConfigurationKeys.MODE_STATISTICAL_OUTPUT,false);  Set<Integer> defaultNamespaces=new HashSet<Integer>();  defaultNamespaces.add(0);  defaultNamespaces.add(1);  setConfigParameter(ConfigurationKeys.NAMESPACES_TO_KEEP,defaultNamespaces);  this.type=ConfigEnum.DEFAULT;}  }
class C{  private static void swap(float[] x,int a,int b){  float t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  @Override public void teardown(){}  }
class C{  public Vector4f rotate(Quaternionfc quat){  return rotate(quat,this);}  }
class C{  public HalfEdge addEdge(Coordinate orig,Coordinate dest){  if (!isValidEdge(orig,dest))   return null;  HalfEdge eAdj=(HalfEdge)vertexMap.get(orig);  HalfEdge eSame=null;  if (eAdj != null) {    eSame=eAdj.find(dest);  }  if (eSame != null) {    return eSame;  }  HalfEdge e=insert(orig,dest,eAdj);  return e;}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  @Override public byte[] rowKey(Tuple tuple){  ProfileMeasurement m=(ProfileMeasurement)tuple.getValueByField("measurement");  List<Object> groups=executeGroupBy(m);  return rowKeyBuilder.rowKey(m,groups);}  }
class C{  public final boolean isEnabled(){  return enabled;}  }
class C{  public AndExpr newAndExpr(Value op1,Value op2){  return new JAndExpr(op1,op2);}  }
class C{  public void shiftRight() throws IOException {  writeCode(SHIFT_RIGHT);}  }
class C{  public static boolean isAnonymousClass(Scope s){  if (s instanceof Class) {    Class td=(Class)s;    return td.isAnonymous();  } else {    return false;  }}  }
class C{  public boolean join(){  try {    if (Boolean.getBoolean(BYPASS_DISCOVERY_PROPERTY)) {synchronized (viewInstallationLock) {        becomeCoordinator();      }      return true;    }    SearchState state=searchState;    long locatorWaitTime=((long)services.getConfig().getLocatorWaitTime()) * 1000L;    long timeout=services.getConfig().getJoinTimeout();    logger.debug("join timeout is set to {}",timeout);    long retrySleep=JOIN_RETRY_SLEEP;    long startTime=System.currentTimeMillis();    long locatorGiveUpTime=startTime + locatorWaitTime;    long giveupTime=startTime + timeout;    for (int tries=0; !this.isJoined && !this.isStopping; tries++) {      logger.debug("searching for the membership coordinator");      boolean found=findCoordinator();      if (found) {        logger.debug("found possible coordinator {}",state.possibleCoordinator);        if (localAddress.getNetMember().preferredForCoordinator() && state.possibleCoordinator.equals(this.localAddress)) {          if (tries > 2 || System.currentTimeMillis() < giveupTime) {synchronized (viewInstallationLock) {              becomeCoordinator();            }            return true;          }        } else {          if (attemptToJoin()) {            return true;          }          if (!state.possibleCoordinator.equals(localAddress)) {            state.alreadyTried.add(state.possibleCoordinator);          }          if (System.currentTimeMillis() > giveupTime) {            break;          }        }      } else {        long now=System.currentTimeMillis();        if (state.locatorsContacted <= 0) {          if (now > locatorGiveUpTime) {            break;          }          tries=0;          giveupTime=now + timeout;        } else         if (now > giveupTime) {          break;        }      }      try {        logger.debug("sleeping for {} before making another attempt to find the coordinator",retrySleep);        Thread.sleep(retrySleep);      } catch (      InterruptedException e) {        logger.debug("retry sleep interrupted - giving up on joining the distributed system");        return false;      }    }    if (!this.isJoined) {      logger.debug("giving up attempting to join the distributed system after " + (System.currentTimeMillis() - startTime) + "ms");    }    if (!this.isJoined && state.hasContactedAJoinedLocator) {      throw new SystemConnectException("Unable to join the distributed system in " + (System.currentTimeMillis() - startTime) + "ms");    }    return this.isJoined;  }  finally {    if (this.isJoined) {synchronized (this.localAddress) {        this.localAddress.notifyAll();      }    }    searchState.cleanup();  }}  }
class C{  private Object unwrapTarget(Object target) throws IgniteCheckedException {  return rsrcCtx != null ? rsrcCtx.unwrapTarget(target) : target;}  }
class C{  @Nullable private static Bitmap extractThumbnail(@Nullable final Bitmap source,final int width,final int height,final int options){  if (source == null) {    return null;  }  float scale;  if (source.getWidth() < source.getHeight()) {    scale=width / (float)source.getWidth();  } else {    scale=height / (float)source.getHeight();  }  final Matrix matrix=new Matrix();  matrix.setScale(scale,scale);  return transform(matrix,source,width,height,OPTIONS_SCALE_UP | options);}  }
class C{  protected double updatedDistance(int i,int j,int k){  int ai=alias[i];  int aj=alias[j];  double tipSum=(double)(tipCount[ai] + tipCount[aj]);  return (((double)tipCount[ai]) / tipSum) * getDist(k,i) + (((double)tipCount[aj]) / tipSum) * getDist(k,j);}  }
class C{  private void updateDefaults(String clientCheck){  log.config("CreateNewCombination=" + m_createNewCombination);  StringBuffer sql=new StringBuffer("SELECT C_AcctSchema_ID FROM C_AcctSchema_Element " + "WHERE C_Element_ID=?").append(clientCheck);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    pstmt.setInt(1,m_C_Element_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     updateDefaultAccounts(rs.getInt(1));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  sql=new StringBuffer("UPDATE C_AcctSchema_Element e " + "SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM I_ElementValue i" + " WHERE e.C_Element_ID=i.C_Element_ID AND i.C_ElementValue_ID IS NOT NULL"+ " AND UPPER(i.Default_Account)='DEFAULT_ACCT') "+ "WHERE EXISTS (SELECT * FROM I_ElementValue i"+ " WHERE e.C_Element_ID=i.C_Element_ID AND i.C_ElementValue_ID IS NOT NULL"+ " AND UPPER(i.Default_Account)='DEFAULT_ACCT' "+ "	AND i.I_IsImported='Y' AND i.Processing='-')").append(clientCheck);  int no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@C_AcctSchema_Element_ID@: @Updated@");}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  SizeRequirements req=super.calculateMajorAxisRequirements(axis,r);  req.maximum=Integer.MAX_VALUE;  return req;}  }
class C{  public boolean isSwipeActivated(){  return swipeActivated;}  }
class C{  public final boolean isLoaded(){  checkIsMapped();  long address=block.toLong();  long size=block.getSize();  if (size == 0) {    return true;  }  try {    int pageSize=(int)Libcore.os.sysconf(_SC_PAGE_SIZE);    int pageOffset=(int)(address % pageSize);    address-=pageOffset;    size+=pageOffset;    int pageCount=(int)((size + pageSize - 1) / pageSize);    byte[] vector=new byte[pageCount];    Libcore.os.mincore(address,size,vector);    for (int i=0; i < vector.length; ++i) {      if ((vector[i] & 1) != 1) {        return false;      }    }    return true;  } catch (  ErrnoException errnoException) {    return false;  }}  }
class C{  public void initialize(Supplier<DataSource<Bitmap>> dataSourceSupplier,String id,Object callerContext){  super.initialize(id,callerContext);  init(dataSourceSupplier);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.581 -0500",hash_original_method="78F307A2353DB69194E5CFDF11F3F547",hash_generated_method="699F88D30470D378C59B3EAF397ADAD1") public static String newStringUsAscii(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.US_ASCII);}  }
class C{  public String camelize(String word){  return camelize(word,false);}  }
class C{  public boolean remove(Object key){  if (pageSources.remove(key) != null)   return true;  Iterator<Entry<String,PageSource>> it=pageSources.entrySet().iterator();  PageSource ps;  while (it.hasNext()) {    Entry<String,PageSource> e;    e=it.next();    ps=e.getValue();    if (key.equals(ps.getClassName())) {      pageSources.remove(e.getKey());      return true;    }  }  return false;}  }
class C{  public Object clone(){  SimpleAttributeSet attr;  try {    attr=(SimpleAttributeSet)super.clone();    attr.table=(LinkedHashMap)table.clone();  } catch (  CloneNotSupportedException cnse) {    attr=null;  }  return attr;}  }
class C{  boolean updateSliceNoSeqNo(DeleteSlice slice){  if (slice.sliceTail != tail) {    slice.sliceTail=tail;    return true;  }  return false;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public Rule findRuleById(final Integer id) throws PersistentModelException {  Rule instance=m_ruleHome.findById(id);  if (null == instance)   throw new PersistentModelException("Rule not found for Id: " + id);  return instance;}  }
class C{  public boolean isMult(){  return m_isMult;}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  public static <T extends RelatedResourceRep>T findRef(Collection<T> resources,URI id){  if ((resources != null) && (id != null)) {    for (    T resource : resources) {      if (id.equals(id(resource))) {        return resource;      }    }  }  return null;}  }
class C{  public DTLZ1(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public static boolean isFileExists(String fileName){  try {    FileFactory.FileType fileType=FileFactory.getFileType(fileName);    if (FileFactory.isFileExist(fileName,fileType)) {      return true;    }  } catch (  IOException e) {    LOGGER.error("@@@@@@  File not found at a given location @@@@@@ : " + fileName);  }  return false;}  }
class C{  public DoublesSketch build(){  return HeapDoublesSketch.newInstance(bK);}  }
class C{  public void addCommands(PDFPage page){  addCommands(page,null);}  }
class C{  public static boolean hasFragmentId(String uri){  return uri.indexOf('#') >= 0;}  }
class C{  public OrganizationAlreadyBannedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public ValidationException(File file,String message){  super(MessageFormat.format("{0} ({1})",(message == null ? "file validation failed" : message),file));  this.file=file;}  }
class C{  protected final void openSessionForPublish(String applicationId,List<String> permissions,SessionLoginBehavior behavior,int activityCode){  openSession(applicationId,permissions,behavior,activityCode,SessionAuthorizationType.PUBLISH);}  }
class C{  private boolean shouldReplace(String current,String proposed){  if (getStringScore(current) > getStringScore(proposed)) {    return false;  } else {    return true;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceattributewithself.class,args);}  }
class C{  public static Envelope envelope(Coordinate[] coordinates){  Envelope env=new Envelope();  for (int i=0; i < coordinates.length; i++) {    env.expandToInclude(coordinates[i]);  }  return env;}  }
class C{  public boolean removeRef(Object obj) throws IOException {  if (_refs != null) {    _refs.remove(obj);    return true;  } else   return false;}  }
class C{  public void start(){  _log.info("Get vipr keystore");  try {    viprKeyStore=KeyStoreUtil.getViPRKeystore(_coordinator);  } catch (  Exception e) {    _log.error("Failed to load the VIPR keystore",e);    throw new IllegalStateException(e);  }  _log.info("Starting geosvc job queue");  try {    _queue=_coordinator.getQueue(GeoServiceHelper.GEOSVC_QUEUE_NAME,this,new GeoServiceJobSerializer(),GeoServiceHelper.DEFAULT_MAX_THREADS);  } catch (  Exception e) {    _log.error("can not startup geosvc job queue",e);  }}  }
class C{  public boolean debugTraffic(){  return preferences.getBoolean(resources.getString(R.string.key_debug_traffic),Boolean.parseBoolean(resources.getString(R.string.default_debug_traffic)));}  }
class C{  public static BlockMultiPlaceEvent callBlockMultiPlaceEvent(net.minecraft.world.World world,net.minecraft.entity.player.EntityPlayer who,List<BlockState> blockStates,int clickedX,int clickedY,int clickedZ){  CraftWorld craftWorld=world.getWorld();  CraftServer craftServer=world.getServer();  Player player=(who == null) ? null : (Player)who.getBukkitEntity();  Block blockClicked=craftWorld.getBlockAt(clickedX,clickedY,clickedZ);  boolean canBuild=true;  for (int i=0; i < blockStates.size(); i++) {    if (!canBuild(craftWorld,player,blockStates.get(i).getX(),blockStates.get(i).getZ())) {      canBuild=false;      break;    }  }  BlockMultiPlaceEvent event=new BlockMultiPlaceEvent(blockStates,blockClicked,player.getItemInHand(),player,canBuild);  craftServer.getPluginManager().callEvent(event);  return event;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private Session create(boolean strict) throws Exception {  Reference session=new Reference(strict);  if (session != null) {    local.set(session);  }  return session.get();}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (!eventName.equals("instance") && !eventName.equals("dataSet")) {    return false;  }  if (m_listenee instanceof DataSource) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      return ec.eventGeneratable(eventName);    }  }  if (m_listenee instanceof TrainingSetProducer) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      if (!eventName.equals("dataSet")) {        return false;      }      if (!ec.eventGeneratable("trainingSet")) {        return false;      }    }  }  if (m_listenee instanceof TestSetProducer) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      if (!eventName.equals("dataSet")) {        return false;      }      if (!ec.eventGeneratable("testSet")) {        return false;      }    }  }  return true;}  }
class C{  public static boolean isJdbcPackage(String packageName){  return packageName != null && (packageName.startsWith("java.sql") || packageName.startsWith("javax.sql") || packageName.startsWith(MYSQL_JDBC_PACKAGE_ROOT));}  }
class C{  public IntersectionMatrix transpose(){  int temp=matrix[1][0];  matrix[1][0]=matrix[0][1];  matrix[0][1]=temp;  temp=matrix[2][0];  matrix[2][0]=matrix[0][2];  matrix[0][2]=temp;  temp=matrix[2][1];  matrix[2][1]=matrix[1][2];  matrix[1][2]=temp;  return this;}  }
class C{  public void removeAppOffer(Offer offer){  ((MyAppsBinder)getDataBinder(TYPE_MY_APPS)).removeAppOffer(offer);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput){  return nodeBlockMapping(blockInfos,noOfNodesInput,null);}  }
class C{  @Override public VFSClient vfs(){  return null;}  }
class C{  public void createWindowSurface(Object surface){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createWindowSurface(surface);}  }
class C{  protected void addInstrumentationForSwitchCases(BytecodeInstruction v,InsnList instrumentation,String className,String methodName){  if (!v.isSwitch())   throw new IllegalArgumentException("switch instruction expected");  List<Branch> caseBranches=BranchPool.getInstance(classLoader).getCaseBranchesForSwitch(v);  if (caseBranches == null || caseBranches.isEmpty())   throw new IllegalStateException("expect BranchPool to know at least one Branch for each switch instruction");  for (  Branch targetCaseBranch : caseBranches) {    if (targetCaseBranch.isDefaultCase())     continue;    Integer targetCaseValue=targetCaseBranch.getTargetCaseValue();    Integer targetCaseBranchId=targetCaseBranch.getActualBranchId();    instrumentation.add(new InsnNode(Opcodes.DUP));    instrumentation.add(new LdcInsnNode(targetCaseValue));    instrumentation.add(new LdcInsnNode(Opcodes.IF_ICMPEQ));    instrumentation.add(new LdcInsnNode(targetCaseBranchId));    instrumentation.add(new LdcInsnNode(v.getInstructionId()));    instrumentation.add(new MethodInsnNode(Opcodes.INVOKESTATIC,EXECUTION_TRACER,"passedBranch","(IIIII)V",false));  }}  }
class C{  public OperationNotPermittedException(String message){  super(message);}  }
class C{  private int numberOfUsablePorts(URI storageDeviceURI,StorageProtocol.Transport transportType,Set<String> vArrays,Map<URI,Integer> cachedUsablePorts,Map<URI,Integer> cachedUsableHADomains){  Integer usable=cachedUsablePorts.get(storageDeviceURI);  if (usable != null) {    return usable;  } else {    usable=0;  }  StorageSystem storageDevice=_objectCache.queryObject(StorageSystem.class,storageDeviceURI);  if (storageDevice == null || storageDevice.getInactive() == true) {    cachedUsablePorts.put(storageDeviceURI,new Integer(0));    cachedUsableHADomains.put(storageDeviceURI,new Integer(0));    return 0;  }  Set<URI> haDomains=new HashSet<URI>();  URIQueryResultList storagePortURIs=new URIQueryResultList();  _objectCache.getDbClient().queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(storageDeviceURI),storagePortURIs);  List<StoragePort> storagePorts=_objectCache.queryObject(StoragePort.class,storagePortURIs);  boolean nonFrontendPortFound=false;  boolean atLeastOneFrontEndPortFound=false;  for (  StoragePort storagePort : storagePorts) {    if (transportType.name().equals(storagePort.getTransportType()) && vArrays != null && storagePort.getTaggedVirtualArrays() != null && !Sets.intersection(vArrays,storagePort.getTaggedVirtualArrays()).isEmpty()) {      if (!StoragePort.PortType.frontend.name().equals(storagePort.getPortType())) {        nonFrontendPortFound=true;      } else {        atLeastOneFrontEndPortFound=true;        break;      }    }  }  if (nonFrontendPortFound && !atLeastOneFrontEndPortFound) {    cachedUsablePorts.put(storageDeviceURI,new Integer(0));    cachedUsableHADomains.put(storageDeviceURI,new Integer(0));    return 0;  }  for (  StoragePort storagePort : storagePorts) {    _logger.debug("Checking port: " + storagePort.getNativeGuid());    if (transportType.name().equals(storagePort.getTransportType()) && _portMetricsProcessor.isPortUsable(storagePort,vArrays) && !_portMetricsProcessor.isPortOverCeiling(storagePort,storageDevice,false)) {      haDomains.add(storagePort.getStorageHADomain());      usable++;    }  }  _logger.info("System: " + storageDevice.getNativeGuid() + " transport: "+ transportType+ " usable: "+ usable+ " haDomains"+ haDomains.size());  cachedUsablePorts.put(storageDeviceURI,usable);  cachedUsableHADomains.put(storageDeviceURI,haDomains.size());  return usable;}  }
class C{  public boolean isDividerAllowedBelow(){  return mDividerAllowedBelow;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB) : getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public static OutputFormat createCompactFormat(){  OutputFormat format=new OutputFormat();  format.setIndent(false);  format.setNewlines(false);  format.setTrimText(true);  return format;}  }
class C{  private void collectGlobalFeatures(Predicate pred,ArgMap argMap,Collection<Integer> indices,Map<Integer,Double> nonbinFeats){  int offset=0;  if ((Parse.parseOptions != null && Parse.parseOptions.globalFeats) || ((Learn.learnOptions != null && Learn.learnOptions.globalFeats))) {    indices.add(sizePipelineFeatures + argMap.size());    offset=10;  }  String cals=Language.getLanguage().getCoreArgumentLabelSequence(pred,argMap);  Integer index=calsMap.get(cals);  if (index != null)   indices.add(offset + sizePipelineFeatures + index);}  }
class C{  @GwtIncompatible public Matcher matcher(Reader text,int length) throws IOException {  Matcher m=new Matcher(this);  m.setTarget(text,length);  return m;}  }
class C{  public static long string2long(String s,int radix) throws NumberFormatException {  if (radix == 10) {    return Long.parseLong(s,radix);  } else {    char[] cs=s.toCharArray();    long limit=Long.MAX_VALUE / (radix / 2);    long n=0;    for (int i=0; i < cs.length; i++) {      int d=Character.digit(cs[i],radix);      if (n < 0 || n > limit || n * radix > Long.MAX_VALUE - d)       throw new NumberFormatException();      n=n * radix + d;    }    return n;  }}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o,final IAccessPathExpander<ISPO> expander){  super(new IVariableOrConstant[]{s,p,o},new NV(Annotations.RELATION_NAME,new String[]{relationName}),new NV(Annotations.ACCESS_PATH_EXPANDER,expander));}  }
class C{  protected Node newNode(){  return new GenericElement();}  }
class C{  protected void doDetach(){  mDraweeHolder.onDetach();}  }
class C{  public ListItemView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.mdListItemViewStyle);}  }
class C{  public HolderInt(int value){  this.value=value;}  }
class C{  protected static Object readBinary(String binary) throws Exception {  FileInputStream fi;  ObjectInputStream oi;  Object o;  fi=new FileInputStream(binary);  oi=new ObjectInputStream(new BufferedInputStream(fi));  o=oi.readObject();  oi.close();  return o;}  }
class C{  @SuppressWarnings("unchecked") public T put(T value){  int x=value.getX();  int y=value.getY();  int z=value.getZ();  int index=getIndex(x,y,z);  XYZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getY() == y && bucket.getZ() == z) {      this.buckets[index]=value;      return (T)bucket;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  this.buckets[index]=value;  ++this.size;  if (this.size > this.loadThreshold) {    grow();  }  return null;}  }
class C{  public void stopADB() throws Exception {  cmd.runCommand("adb kill-server");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean routingStablised(){  return stabilised;}  }
class C{  public void testNewClassLoaderHotRedeploymentIsolatedMode() throws Exception {  processTestClassLoaderHotRedeployment(DeploymentMode.ISOLATED);}  }
class C{  public boolean readSample(SampleHolder sampleHolder){  boolean haveSample=infoQueue.peekSample(sampleHolder,extrasHolder);  if (!haveSample) {    return false;  }  if (sampleHolder.isEncrypted()) {    readEncryptionData(sampleHolder,extrasHolder);  }  if (sampleHolder.data == null || sampleHolder.data.capacity() < sampleHolder.size) {    sampleHolder.replaceBuffer(sampleHolder.size);  }  if (sampleHolder.data != null) {    readData(extrasHolder.offset,sampleHolder.data,sampleHolder.size);  }  long nextOffset=infoQueue.moveToNextSample();  dropDownstreamTo(nextOffset);  return true;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public void testDoConfigureCreatesFiles() throws Exception {  configuration.doConfigure(container);  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config/config.xml"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/DefaultAuthenticatorInit.ldift"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/SerializedSystemIni.dat"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/autodeploy/cargocpc.war"));}  }
class C{  public void testIncrementAndsum(){  LongAdder ai=new LongAdder();  ai.increment();  assertEquals(1,ai.sum());  ai.increment();  assertEquals(2,ai.sum());}  }
class C{  public DTMException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  public static void debug(String msg,boolean interactiveAsWell){  if (Game.debug || Game.junit) {    log(msg);  }}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  StackPane envView=new StackPane();  envViewCtrl=new MapEnvironmentViewCtrl(envView);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(envView);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  return root;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public LuaClosure(Prototype p,LuaValue env){  this.p=p;  if (p.upvalues == null || p.upvalues.length == 0)   this.upValues=NOUPVALUES; else {    this.upValues=new UpValue[p.upvalues.length];    this.upValues[0]=new UpValue(new LuaValue[]{env},0);  }  globals=env instanceof Globals ? (Globals)env : null;}  }
class C{  private static Collection<?> findFactories(String service){  HashSet<Object> fact=new HashSet<Object>();  Provider[] pp=Security.getProviders();  if ((pp == null) || (pp.length == 0)) {    return fact;  }  HashSet<String> props=new HashSet<String>();  for (int i=0; i < pp.length; i++) {    String prName=pp[i].getName();    Enumeration<Object> keys=pp[i].keys();    while (keys.hasMoreElements()) {      String s=(String)keys.nextElement();      if (s.startsWith(service)) {        String prop=pp[i].getProperty(s);        try {          if (props.add(prName.concat(prop))) {            fact.add(newInstance(prop,pp[i]));          }        } catch (        SaslException e) {          e.printStackTrace();        }      }    }  }  return fact;}  }
class C{  public boolean chooseOpsOption(MenuItem item){switch (item.getItemId()) {case R.id.contentResolver:    getOps().setContentProviderAccessType(HobbitOps.ContentProviderAccessType.CONTENT_RESOLVER);  Toast.makeText(this,"ContentResolver selected",Toast.LENGTH_SHORT).show();break;case R.id.contentProviderClient:getOps().setContentProviderAccessType(HobbitOps.ContentProviderAccessType.CONTENT_PROVIDER_CLIENT);Toast.makeText(this,"ContentProviderClient selected",Toast.LENGTH_SHORT).show();break;}getOps().onConfiguration(this,true);return true;}  }
class C{  public static Test suite() throws Exception {  return suite(true);}  }
class C{  private RxParser(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void outputLogPageFooter(ServletOutputStream outputStream,String handleId,String pageId,long pos) throws Exception {  outputStream.print("</pre></div>\n" + "  <img alt=\"activity indicator\" src=\"spinner.gif\">\n" + "\n"+ "    <script>\n"+ "//<![CDATA[\n"+ "\n"+ "      var logText = document.getElementById('logText')\n"+ "      var offset = " + pos + ";\n"+ "      var handleId = \""+ handleId+ "\";\n"+ "      // See http://www.howtocreate.co.uk/tutorials/javascript/browserwindow\n"+ "      function getViewportHeight() {\n"+ "        if (typeof( window.innerWidth ) == 'number') {\n"+ "          //Non-IE\n"+ "          return window.innerHeight;\n"+ "        } else if (document.documentElement && ( "+ "document.documentElement.clientWidth "+ "|| document.documentElement.clientHeight )) {\n"+ "          //IE 6+ in 'standards compliant mode'\n"+ "          return document.documentElement.clientHeight;\n"+ "        } else if (document.body && ( document.body.clientWidth "+ "|| document.body.clientHeight )) {\n"+ "          //IE 4 compatible\n"+ "          return document.body.clientHeight;\n"+ "        }\n"+ "        return null;\n"+ "      }\n"+ "      function getCurrentHeight(scrollDiv) {\n"+ "        if (scrollDiv.scrollHeight > 0)\n"+ "           return scrollDiv.scrollHeight;\n"+ "        else if (scrollDiv.offsetHeight > 0)\n"+ "           return scrollDiv.offsetHeight;\n"+ "        return null;\n"+ "      }\n"+ "      function shouldAutoscroll(scrollDiv) {\n"+ "         var bottomThreshold = 25;\n"+ "         var currentHeight = getCurrentHeight(scrollDiv);\n"+ "         var height = getViewportHeight();\n"+ "         var scrollPos = Math.max(scrollDiv.scrollTop, "+ "document.documentElement.scrollTop, "+ "document.body.scrollTop);\n"+ "         var diff = currentHeight - scrollPos - height;\n"+ "         return diff < bottomThreshold;\n"+ "      }\n"+ "      function scrollToBottom(scrollDiv) {\n"+ "         var currentHeight = getCurrentHeight(scrollDiv);\n"+ "         if (document.documentElement)\n"+ "            document.documentElement.scrollTop = currentHeight;\n"+ "         if (document.body)\n"+ "            document.body.scrollTop = currentHeight;\n"+ "         scrollDiv.scrollTop = currentHeight;\n"+ "      }\n"+ "      var xmlHttpRequest = 0;\n"+ "      if (window.XMLHttpRequest) {\n"+ "        xmlHttpRequest = new XMLHttpRequest();\n"+ "      } else if (window.ActiveXObject) {\n"+ "        xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n"+ "      }\n"+ "      if (xmlHttpRequest)\n"+ "      {\n"+ "        xmlHttpRequest.onreadystatechange = function()\n"+ "        {\n"+ "          if (xmlHttpRequest.readyState==4 && xmlHttpRequest.status==200)\n"+ "          {\n"+ "            var response = xmlHttpRequest.responseText;\n"+ "            if (response.length != 0)\n"+ "            {\n"+ "               var pre = document.createElement('pre');\n"+ "               var doscroll = shouldAutoscroll(logText);\n"+ "               pre.innerHTML = response;\n"+ "               logText.appendChild(pre);\n"+ "               if (doscroll) scrollToBottom(logText);\n"+ "            }\n"+ "            offset = parseInt(xmlHttpRequest.getResponseHeader"+ "('X-Text-Size'));\n"+ "          }\n"+ "        }\n"+ "\n"+ "        setInterval(function()\n"+ "        {\n"+ "          if (isNaN(offset)) return;\n"+ "          xmlHttpRequest.open(\"GET\", \"./"+ pageId+ "?handleId=\" + handleId "+ "+ \"&offset=\" + offset, true);\n"+ "\n"+ "          xmlHttpRequest.send();\n"+ "        }, 1000);\n"+ "      }\n"+ "//]]>\n"+ "    </script>\n"+ "  </body>\n"+ "</html>\n");}  }
class C{  public EntryStream<K,V> removeKeyValue(BiPredicate<? super K,? super V> predicate){  return filterKeyValue(predicate.negate());}  }
class C{  public boolean isComponentPartOfCurrentMenu(Component c){  if (selection.size() > 0) {    MenuElement me=selection.elementAt(0);    return isComponentPartOfCurrentMenu(me,c);  } else   return false;}  }
class C{  public void detach(){  if (m_allowRelease) {    m_DTMXRTreeFrag.destruct();    setObject(null);  }}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  DragSourceContext dsc=dsde.getDragSourceContext();  JComponent c=(JComponent)dsc.getComponent();  if (dsde.getDropSuccess()) {    ((LimeTransferHandler)c.getTransferHandler()).exportDone(c,dsc.getTransferable(),dsde.getDropAction());  } else {    ((LimeTransferHandler)c.getTransferHandler()).exportDone(c,dsc.getTransferable(),TransferHandler.NONE);  }  c.setAutoscrolls(scrolled);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.activity_code_scan);  CameraManager.init(getApplication());  initControl();  hasSurface=false;  inactivityTimer=new InactivityTimer(this);  Bundle bundle=getIntent().getExtras();  if (bundle != null && bundle.getBoolean("isNoCute")) {    isNoCute=true;  } else {    isNoCute=false;  }}  }
class C{  public int indexOf(final ParameterExpandItem item){  if (item == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  for (int i=0; i < itemCount; i++) {    if (items[i] == item) {      return i;    }  }  return -1;}  }
class C{  private void dumpRef(Address refaddr,int verbosity){  ObjectReference ref=refaddr.loadObjectReference();  VM.sysWrite(refaddr);  if (verbosity >= 5) {    VM.sysWrite(":");    MemoryManager.dumpRef(ref);  } else   VM.sysWriteln();}  }
class C{  public String toVerboseString(){  StringBuilder result=new StringBuilder();  result.append("Table [name=");  result.append(getName());  result.append("; catalog=");  result.append(getCatalog());  result.append("; schema=");  result.append(getSchema());  result.append("; type=");  result.append(getType());  result.append("] columns:");  for (int idx=0; idx < getColumnCount(); idx++) {    result.append(" ");    result.append(getColumn(idx).toVerboseString());  }  result.append("; indices:");  for (int idx=0; idx < getIndexCount(); idx++) {    result.append(" ");    result.append(getIndex(idx).toVerboseString());  }  result.append("; foreign keys:");  for (int idx=0; idx < getForeignKeyCount(); idx++) {    result.append(" ");    result.append(getForeignKey(idx).toVerboseString());  }  return result.toString();}  }
class C{  private Map<DoubleArrayWrapper,List<Example>> createKeyMapping(ExampleSet exampleSet,Attribute[] keyAttributes,Attribute[] matchKeyAttributes){  Map<DoubleArrayWrapper,List<Example>> keyMapping=new HashMap<>();  assert keyAttributes.length == matchKeyAttributes.length;  Map<Attribute,Map<Double,Double>> valueMapping=null;  if (matchKeyAttributes != null) {    valueMapping=new HashMap<>();    for (int attributeNumber=0; attributeNumber < keyAttributes.length; ++attributeNumber) {      if (keyAttributes[attributeNumber].isNominal()) {        Map<Double,Double> valueMap=new HashMap<>();        for (int valueNumber=0; valueNumber < keyAttributes[attributeNumber].getMapping().size(); ++valueNumber) {          String valueString=keyAttributes[attributeNumber].getMapping().mapIndex(valueNumber);          valueMap.put((double)valueNumber,(double)matchKeyAttributes[attributeNumber].getMapping().mapString(valueString));        }        valueMapping.put(keyAttributes[attributeNumber],valueMap);      }    }  }  double[] keyValues;  for (  Example example : exampleSet) {    boolean continueIteration=false;    keyValues=getKeyValues(example,keyAttributes);    if (valueMapping != null) {      for (int i=0; i < keyValues.length; ++i) {        if (Double.isNaN(keyValues[i])) {          continueIteration=true;          break;        }        if (keyAttributes[i].isNominal()) {          keyValues[i]=valueMapping.get(keyAttributes[i]).get(keyValues[i]);        }      }      if (continueIteration) {        continue;      }    }    List<Example> keyExamples=keyMapping.get(new DoubleArrayWrapper(keyValues));    if (keyExamples != null) {      keyExamples.add(example);    } else {      keyExamples=new LinkedList<>();      keyExamples.add(example);      keyMapping.put(new DoubleArrayWrapper(keyValues),keyExamples);    }  }  ;  return keyMapping;}  }
class C{  public void update(ActivityOptionsCompat otherOptions){}  }
class C{  NoResultAction changeCurrentMode(Mode mode){  return new ValidateAction(getModeUsage().changeCurrentMode(mode),schema);}  }
class C{  public void reset(){  m_currentSize=0;}  }
class C{  public static void openURL(String url){  try {    Class<?> d=Class.forName("java.awt.Desktop");    d.getDeclaredMethod("browse",new Class[]{java.net.URI.class}).invoke(d.getDeclaredMethod("getDesktop").invoke(null),new Object[]{java.net.URI.create(url)});  } catch (  Exception ignore) {    String osName=System.getProperty("os.name");    try {      if (osName.startsWith("Mac OS")) {        Class.forName("com.apple.eio.FileManager").getDeclaredMethod("openURL",new Class[]{String.class}).invoke(null,new Object[]{url});      } else       if (osName.startsWith("Windows"))       Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url); else {        boolean found=false;        for (        String browser : browsers)         if (!found) {          found=Runtime.getRuntime().exec(new String[]{"which",browser}).waitFor() == 0;          if (found)           Runtime.getRuntime().exec(new String[]{browser,url});        }        if (!found)         throw new Exception(Arrays.toString(browsers));      }    } catch (    Exception e) {      JOptionPane.showMessageDialog(null,errMsg + "\n" + e.toString());    }  }}  }
class C{  public DOMXMLObject(Element objElem,XMLCryptoContext context,Provider provider) throws MarshalException {  this.encoding=DOMUtils.getAttributeValue(objElem,"Encoding");  Attr attr=objElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    this.id=attr.getValue();    objElem.setIdAttributeNode(attr,true);  } else {    this.id=null;  }  this.mimeType=DOMUtils.getAttributeValue(objElem,"MimeType");  NodeList nodes=objElem.getChildNodes();  int length=nodes.getLength();  List<XMLStructure> content=new ArrayList<XMLStructure>(length);  for (int i=0; i < length; i++) {    Node child=nodes.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element childElem=(Element)child;      String tag=childElem.getLocalName();      if (tag.equals("Manifest")) {        content.add(new DOMManifest(childElem,context,provider));        continue;      } else       if (tag.equals("SignatureProperties")) {        content.add(new DOMSignatureProperties(childElem,context));        continue;      } else       if (tag.equals("X509Data")) {        content.add(new DOMX509Data(childElem));        continue;      }    }    content.add(new javax.xml.crypto.dom.DOMStructure(child));  }  if (content.isEmpty()) {    this.content=Collections.emptyList();  } else {    this.content=Collections.unmodifiableList(content);  }  this.objectElem=objElem;}  }
class C{  public int unsetMask(int mask){  behaviorMask=OMAction.unsetMask(behaviorMask,mask);  return behaviorMask;}  }
class C{  protected void saveSelectionDetail(){}  }
class C{  public boolean isNatural(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Natural.equals(pt);}  }
class C{  boolean dropItems(final Player player,int itemCount){  boolean result=false;  final ItemCollection itemsTodo=new ItemCollection();  itemsTodo.addFromQuestStateString(player.getQuest(questSlot));  if (player.drop(itemName,itemCount)) {    if (itemsTodo.removeItem(itemName,itemCount)) {      result=true;    }  } else {    final List<Item> items=player.getAllEquipped(itemName);    if (items != null) {      for (      final Item item : items) {        final int quantity=item.getQuantity();        final int n=Math.min(itemCount,quantity);        if (player.drop(itemName,n)) {          itemCount-=n;          if (itemsTodo.removeItem(itemName,n)) {            result=true;          }        }        if (itemCount == 0) {          result=true;          break;        }      }    }  }  if (result) {    player.setQuest(questSlot,itemsTodo.toStringForQuestState());  }  return result;}  }
class C{  public static Map<String,Set<String>> parse(final URI uri,boolean decodeQueryParam){  Map<String,Set<String>> result=Collections.emptyMap();  final String query=uri.getRawQuery();  if (query != null && query.length() > 0) {    result=new HashMap<>();    parse(result,new Scanner(query),null,decodeQueryParam);  }  return result;}  }
class C{  @Override public void updateRef(String columnLabel,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  public void selectElements(SSPHandler sspHandler){  this.selectElements(sspHandler,null);}  }
class C{  void verifyIfParameterConcurrentlyChanged(Product dbTargetProduct,List<VOParameter> voTargetParameters,boolean upgrade) throws ServiceChangedException, ConcurrentModificationException {  List<Parameter> dbTargetParameterList;  if (dbTargetProduct.getParameterSet() == null || dbTargetProduct.getParameterSet().getParameters() == null) {    dbTargetParameterList=new LinkedList<>();  } else {    dbTargetParameterList=dbTargetProduct.getParameterSet().getParameters();  }  if (upgrade && dbTargetParameterList.size() != voTargetParameters.size()) {    throw new ServiceChangedException(ServiceChangedException.Reason.SERVICE_MODIFIED);  }  Map<String,Parameter> dbParameterMap=new HashMap<>();  for (  Parameter parameter : dbTargetParameterList) {    dbParameterMap.put(parameter.getParameterDefinition().getParameterId(),parameter);  }  for (  VOParameter voParameter : voTargetParameters) {    Parameter dbParameter=dbParameterMap.get(voParameter.getParameterDefinition().getParameterId());    if (dbParameter == null) {      String message=String.format("Parameter '%s' does not exist.",voParameter.getParameterDefinition().getParameterId());      throw new ServiceChangedException(message);    }    BaseAssembler.verifyVersionAndKey(dbParameter,voParameter);  }}  }
class C{  @Inline public void reset(){  lock();  reserved=0;  committed=0;  releasePages();  unlock();}  }
class C{  protected String encodeBody(){  return new StringBuffer().append(rSeqNumber).append(SP).append(cSeqNumber).append(SP).append(method).toString();}  }
class C{  public static boolean boardIsSize(final File filepath,final BoardDimensions size){  int boardx=0;  int boardy=0;  try {    Reader r=new BufferedReader(new FileReader(filepath));    StreamTokenizer st=new StreamTokenizer(r);    st.eolIsSignificant(true);    st.commentChar('#');    st.quoteChar('"');    st.wordChars('_','_');    while (st.nextToken() != StreamTokenizer.TT_EOF) {      if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equalsIgnoreCase("size")) {        st.nextToken();        boardx=(int)st.nval;        st.nextToken();        boardy=(int)st.nval;        break;      }    }    r.close();  } catch (  IOException ex) {    return false;  }  return (boardx == size.width()) && (boardy == size.height());}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return optimizedDrawingPossible;}  }
class C{  public void printClasses(CrosstabFormat crosstabFormat,boolean isCumulative,double[] classes,PrintStream out){  long numberOfLegs;  out.println();  out.print("#i\tclass");  for (  String mode : this.frequencies.keySet()) {    out.print("\t" + mode);  }  out.print("\tsum");  out.println();  for (int i=0; i < classes.length; i++) {    long sumClass=0;    out.print(Integer.toString(i) + "\t");    out.print(classFormat.format(classes[i]));    for (    String mode : this.frequencies.keySet()) {      out.print("\t");      if (isCumulative) {        numberOfLegs=this.getNumberOfLegs(mode,DUMMY_NEGATIVE_BOUND,classes[i]);      } else {        numberOfLegs=this.getNumberOfLegs(mode,((i == 0) ? DUMMY_NEGATIVE_BOUND : classes[i - 1]),classes[i]);      }      sumClass+=numberOfLegs;switch (crosstabFormat) {case ABSOLUTE:        out.print(Long.toString(numberOfLegs));      break;case PERCENTAGE:    out.print(percentFormat.format((double)numberOfLegs / (double)this.getNumberOfLegs()));  break;}}out.print("\t");switch (crosstabFormat) {case ABSOLUTE:out.print(Long.toString(sumClass));break;case PERCENTAGE:out.print(percentFormat.format((double)sumClass / (double)this.getNumberOfLegs()));break;}out.println();}out.print("#sum\t");for (String mode : this.frequencies.keySet()) {out.print("\t");numberOfLegs=this.getNumberOfLegs(mode);switch (crosstabFormat) {case ABSOLUTE:out.print(numberOfLegs);break;case PERCENTAGE:out.print(percentFormat.format((double)numberOfLegs / (double)this.getNumberOfLegs()));break;}}out.print("\t");numberOfLegs=this.getNumberOfLegs();switch (crosstabFormat) {case ABSOLUTE:out.print(Long.toString(numberOfLegs));break;case PERCENTAGE:out.print(percentFormat.format(1.0));break;}out.println();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PropertyException(String msg,Throwable t){  super(msg,t);}  }
class C{  public static void collect(Map<FeatureStructure,FeatureStructure> aFSes,Set<FeatureStructure> aIndexed,FeatureStructure aFS,FeatureStructure aLastIndexed){  if (aFS != null && !aFSes.containsKey(aFS)) {    if (aIndexed.contains(aFS)) {      aFSes.put(aFS,aFS);    } else {      aFSes.put(aFS,aLastIndexed);    }    for (    Feature f : aFS.getType().getFeatures()) {      if (!f.getRange().isPrimitive() && !CAS.FEATURE_BASE_NAME_SOFA.equals(f.getShortName())) {        collect(aFSes,aIndexed,aFS.getFeatureValue(f),aIndexed.contains(aFS) ? aFS : aLastIndexed);      }    }  }}  }
class C{  public static void tangentBitangent(Vector3fc v1,Vector2fc uv1,Vector3fc v2,Vector2fc uv2,Vector3fc v3,Vector2fc uv3,Vector3f destTangent,Vector3f destBitangent){  float DeltaV1=uv2.y() - uv1.y();  float DeltaV2=uv3.y() - uv1.y();  float DeltaU1=uv2.x() - uv1.x();  float DeltaU2=uv3.x() - uv1.x();  float f=1.0f / (DeltaU1 * DeltaV2 - DeltaU2 * DeltaV1);  destTangent.x=f * (DeltaV2 * (v2.x() - v1.x()) - DeltaV1 * (v3.x() - v1.x()));  destTangent.y=f * (DeltaV2 * (v2.y() - v1.y()) - DeltaV1 * (v3.y() - v1.y()));  destTangent.z=f * (DeltaV2 * (v2.z() - v1.z()) - DeltaV1 * (v3.z() - v1.z()));  destTangent.normalize();  destBitangent.x=f * (-DeltaU2 * (v2.x() - v1.x()) - DeltaU1 * (v3.x() - v1.x()));  destBitangent.y=f * (-DeltaU2 * (v2.y() - v1.y()) - DeltaU1 * (v3.y() - v1.y()));  destBitangent.z=f * (-DeltaU2 * (v2.z() - v1.z()) - DeltaU1 * (v3.z() - v1.z()));  destBitangent.normalize();}  }
class C{  public boolean isStatic(){  return _static;}  }
class C{  private void checkAlterDurationConverters() throws SecurityException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new JodaTimePermission("ConverterManager.alterDurationConverters"));  }}  }
class C{  private void addRepositoryListener(final TFSRepository repository){synchronized (tfsRepositories) {    if (tfsRepositories.contains(repository)) {      return;    }    repository.getPendingChangeCache().addListener(repositoryListener);    repository.getConflictManager().addConflictAddedListener(repositoryListener);    repository.getConflictManager().addConflictModifiedListener(repositoryListener);    repository.getConflictManager().addConflictRemovedListener(repositoryListener);    repository.getWorkspace().getClient().getEventEngine().addWorkspaceUpdatedListener(workspaceUpdatedListener);    tfsRepositories.add(repository);  }  refresh();}  }
class C{  public void resize(String key,long length){  RawByteAllocator alloc=findRawByteAllocator(key);  if (alloc.cacheFile != null) {    long newFileLength=length - alloc.memoryLength;    if (newFileLength > 0) {      int excessLength=(int)(alloc.storageLength - newFileLength);      FileOutputStream output=outputStreamCache.get(key);      try {        if (output == null) {          output=new FileOutputStream(alloc.cacheFile,true);          outputStreamCache.put(key,output);        }        FileChannel channel=output.getChannel();        channel.truncate(newFileLength);        channel.position(newFileLength);        output.flush();        outputStreamCache.invalidate(key);        alloc.storageLength=newFileLength;        currentStorageBytes-=excessLength;      } catch (      IOException e) {        throw new RuntimeException(String.format("Unable to truncate vector in storage: key=%s file=%s length=%d truncated length=%d",key,alloc.cacheFile.getAbsolutePath(),alloc.memoryLength + alloc.storageLength,length));      }      return;    } else {      outputStreamCache.invalidate(key);      alloc.cacheFile.delete();      alloc.cacheFile=null;      currentStorageBytes-=alloc.storageLength;      alloc.storageLength=0;    }  }  int lastBuffer=-1;  int totalBufferBytes=0;  for (int i=0; i < alloc.buffers.size(); i++) {    byte[] buffer=alloc.buffers.get(i);    totalBufferBytes+=buffer.length;    if (totalBufferBytes == length) {      lastBuffer=i;      break;    } else     if (totalBufferBytes > length) {      lastBuffer=i;      int excessLength=totalBufferBytes - (int)length;      int shortenedBufferLength=buffer.length - excessLength;      byte[] shortenedBuffer=Arrays.copyOf(buffer,shortenedBufferLength);      alloc.buffers.set(i,shortenedBuffer);      currentMemoryBytes-=excessLength;      alloc.memoryLength-=excessLength;      break;    }  }  if (lastBuffer > -1) {    for (int i=alloc.buffers.size() - 1; i > lastBuffer; i--) {      byte[] buffer=alloc.buffers.remove(i);      currentMemoryBytes-=buffer.length;      alloc.memoryLength-=buffer.length;    }  }}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,VersionedObjectList versions,RemoveAllEntryData[] removeAllData,int removeAllDataCount){  Assert.assertTrue(recipient != null,"RemoveAllReplyMessage NULL reply message");  RemoveAllReplyMessage m=new RemoveAllReplyMessage(processorId,versions,removeAllData,removeAllDataCount);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private String encode(Variable variable) throws IOException {  StringBuilder sb=new StringBuilder();  if (variable instanceof RealVariable) {    RealVariable rv=(RealVariable)variable;    sb.append(rv.getValue());  } else   if (variable instanceof BinaryVariable) {    BinaryVariable bv=(BinaryVariable)variable;    for (int i=0; i < bv.getNumberOfBits(); i++) {      sb.append(bv.get(i) ? "1" : "0");    }  } else   if (variable instanceof Permutation) {    Permutation p=(Permutation)variable;    for (int i=0; i < p.size(); i++) {      if (i > 0) {        sb.append(',');      }      sb.append(p.get(i));    }  } else {    throw new IOException("unable to serialize variable");  }  return sb.toString();}  }
class C{  public XmlHeaderAwareReader(final InputStream in) throws UnsupportedEncodingException, IOException {  final PushbackInputStream[] pin=new PushbackInputStream[]{in instanceof PushbackInputStream ? (PushbackInputStream)in : new PushbackInputStream(in,64)};  final Map<String,String> header=getHeader(pin);  version=Double.parseDouble(header.get(KEY_VERSION));  reader=new InputStreamReader(pin[0],header.get(KEY_ENCODING));}  }
class C{  private boolean shouldAddZip64Extra(ZipArchiveEntry entry,Zip64Mode mode){  return mode == Zip64Mode.Always || entry.getSize() >= ZIP64_MAGIC || entry.getCompressedSize() >= ZIP64_MAGIC || (entry.getSize() == ArchiveEntry.SIZE_UNKNOWN && raf != null && mode != Zip64Mode.Never);}  }
class C{  public static boolean deleteDir(String filename,boolean recurse){  return doDeleteDir(new File(filename),recurse);}  }
class C{  public void clearProperty(String key){  deprecationCrutch.clearProperty(key);  if (containsKey(key)) {    for (int i=0; i < keysAsListed.size(); i++) {      if (((String)keysAsListed.get(i)).equals(key)) {        keysAsListed.remove(i);        break;      }    }    remove(key);  }}  }
class C{  public void fireRefresh(){  TreeModelEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=(listeners.length - 2); i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null) {        e=new TreeModelEvent(this,new Object[]{root});      }      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public static String replace(String text,String oldsub,String newsub,boolean caseInsensitive,boolean firstOnly){  StringBuilder buf;  int tln;  int oln=oldsub.length();  if (oln == 0) {    int nln=newsub.length();    if (nln == 0) {      return text;    } else {      if (firstOnly) {        return newsub + text;      } else {        tln=text.length();        buf=new StringBuilder(tln + (tln + 1) * nln);        buf.append(newsub);        for (int i=0; i < tln; i++) {          buf.append(text.charAt(i));          buf.append(newsub);        }        return buf.toString();      }    }  } else {    oldsub=caseInsensitive ? oldsub.toLowerCase() : oldsub;    String input=caseInsensitive ? text.toLowerCase() : text;    int e=input.indexOf(oldsub);    if (e == -1) {      return text;    }    int b=0;    tln=text.length();    buf=new StringBuilder(tln + Math.max(newsub.length() - oln,0) * 3);    do {      buf.append(text.substring(b,e));      buf.append(newsub);      b=e + oln;      e=input.indexOf(oldsub,b);    } while (e != -1 && !firstOnly);    buf.append(text.substring(b));    return buf.toString();  }}  }
class C{  public static <S extends HasCancelClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CancelClickEvent event=new CancelClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void addDependency(DbObject obj){  dependencies.add(obj);}  }
class C{  public void addNewKernelPoint(){  KernelPoint source=points.get(0);  KernelPoint toAdd=new KernelPoint(k,errorTolerance);  toAdd.setMaxBudget(maxBudget);  toAdd.setBudgetStrategy(budgetStrategy);  standardMove(toAdd,source);  toAdd.kernelAccel=source.kernelAccel;  toAdd.vecs=source.vecs;  toAdd.alpha=new DoubleList(source.alpha.size());  for (int i=0; i < source.alpha.size(); i++)   toAdd.alpha.add(0.0);  points.add(toAdd);}  }
class C{  public void dispose(){  m_table.dispose();}  }
class C{  public void updateAsciiStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateAsciiStream(findColumn(columnName),x,length);}  }
class C{  public Wave addTask(Task task){  mTaskList.add(task);  return this;}  }
class C{  public boolean isEnabled(RichFormatterFeature feature){  return features.contains(feature);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  try {    fillPicks();    jbInit();    dynInit();    frame.getContentPane().add(tabbedPane,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  public void testNegateMathContextPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  int precision=37;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="-929487820944884782312124789.8748298843";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.negate(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public int add(int x,int y){  while (y != 0) {    int carry=x & y;    x=x ^ y;    y=carry << 1;  }  return x;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  private void collectUnmergedAndUnversioned() throws VcsException {  Collection<FilePath> dirtyPaths=dirtyPaths(false);  if (dirtyPaths.isEmpty()) {    return;  }  GitSimpleHandler handler=new GitSimpleHandler(myProject,myVcsRoot,GitCommand.LS_FILES);  handler.addParameters("-v","--unmerged");  handler.setSilent(true);  handler.setStdoutSuppressed(true);  parseFiles(handler.run());  handler=new GitSimpleHandler(myProject,myVcsRoot,GitCommand.LS_FILES);  handler.addParameters("-v","--others","--exclude-standard");  handler.setSilent(true);  handler.setStdoutSuppressed(true);  handler.endOptions();  handler.addRelativePaths(dirtyPaths);  if (handler.isLargeCommandLine()) {    handler=new GitSimpleHandler(myProject,myVcsRoot,GitCommand.LS_FILES);    handler.addParameters("-v","--others","--exclude-standard");    handler.setSilent(true);    handler.setStdoutSuppressed(true);    handler.endOptions();  }  parseFiles(handler.run());}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  private Ref plusMinusOp() throws PageException {  Ref ref=modOp();  while (!cfml.isLast()) {    if (cfml.forwardIfCurrent('+')) {      ref=_plus(ref);    } else     if (cfml.forwardIfCurrent('-')) {      ref=_minus(ref);    } else     break;  }  return ref;}  }
class C{  public OkHttpDownloader(final Context context,final long maxSize){  this(Utils.createDefaultCacheDir(context),maxSize);}  }
class C{  public void writeField(String name,float value) throws java.io.IOException {  writeField(name,Float.toString(value));}  }
class C{  public String useAICTipText(){  return "The AIC is used to determine when to stop LogitBoost iterations " + "(instead of cross-validation or training error).";}  }
class C{  private final void calculateNextSupplementaryElement(Element element){  int currentValue=m_nextValue_;  int currentBlock=m_nextBlock_;  m_nextCodepoint_++;  m_nextBlockIndex_++;  if (UTF16.getTrailSurrogate(m_nextCodepoint_) != UTF16.TRAIL_SURROGATE_MIN_VALUE) {    if (!checkNullNextTrailIndex() && !checkBlockDetail(currentValue)) {      setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);      m_currentCodepoint_=m_nextCodepoint_;      return;    }    m_nextIndex_++;    m_nextTrailIndexOffset_++;    if (!checkTrailBlock(currentBlock,currentValue)) {      setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);      m_currentCodepoint_=m_nextCodepoint_;      return;    }  }  int nextLead=UTF16.getLeadSurrogate(m_nextCodepoint_);  while (nextLead < TRAIL_SURROGATE_MIN_VALUE_) {    int leadBlock=m_trie_.m_index_[nextLead >> Trie.INDEX_STAGE_1_SHIFT_] << Trie.INDEX_STAGE_2_SHIFT_;    if (leadBlock == m_trie_.m_dataOffset_) {      if (currentValue != m_initialValue_) {        m_nextValue_=m_initialValue_;        m_nextBlock_=0;        m_nextBlockIndex_=0;        setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);        m_currentCodepoint_=m_nextCodepoint_;        return;      }      nextLead+=DATA_BLOCK_LENGTH_;      m_nextCodepoint_=UCharacterProperty.getRawSupplementary((char)nextLead,(char)UTF16.TRAIL_SURROGATE_MIN_VALUE);      continue;    }    if (m_trie_.m_dataManipulate_ == null) {      throw new NullPointerException("The field DataManipulate in this Trie is null");    }    m_nextIndex_=m_trie_.m_dataManipulate_.getFoldingOffset(m_trie_.getValue(leadBlock + (nextLead & Trie.INDEX_STAGE_3_MASK_)));    if (m_nextIndex_ <= 0) {      if (currentValue != m_initialValue_) {        m_nextValue_=m_initialValue_;        m_nextBlock_=0;        m_nextBlockIndex_=0;        setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);        m_currentCodepoint_=m_nextCodepoint_;        return;      }      m_nextCodepoint_+=TRAIL_SURROGATE_COUNT_;    } else {      m_nextTrailIndexOffset_=0;      if (!checkTrailBlock(currentBlock,currentValue)) {        setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);        m_currentCodepoint_=m_nextCodepoint_;        return;      }    }    nextLead++;  }  setResult(element,m_currentCodepoint_,UCharacter.MAX_VALUE + 1,currentValue);}  }
class C{  public boolean isProperDescendentOf(Node node1,Node node2){  return node1 != node2 && isDescendentOf(node1,node2);}  }
class C{  protected void updateRemoteAddress() throws MessagingException, UnknownHostException {  setRemoteAddress(computeRemoteAddress());}  }
class C{  public SslCertificate(X509Certificate certificate){  this(certificate.getSubjectDN().getName(),certificate.getIssuerDN().getName(),certificate.getNotBefore(),certificate.getNotAfter(),certificate);}  }
class C{  public static int readFully(Reader in,char[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  protected void filtrarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_VIEW,request);  filtrarCodeLogic(mapping,form,request,response);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  int n=sampleSize();  double r=partialCorrelation(x,y,z);  double fisherZ=Math.sqrt(n - 3 - z.size()) * 0.5 * (Math.log(1.0 + r) - Math.log(1.0 - r));  this.fisherZ=fisherZ;  boolean independent=Math.abs(fisherZ) < cutoff;  return independent;}  }
class C{  private void drawCube(){  mCubePositions.position(0);  GLES20.glVertexAttribPointer(mPositionHandle,mPositionDataSize,GLES20.GL_FLOAT,false,0,mCubePositions);  GLES20.glEnableVertexAttribArray(mPositionHandle);  mCubeColors.position(0);  GLES20.glVertexAttribPointer(mColorHandle,mColorDataSize,GLES20.GL_FLOAT,false,0,mCubeColors);  GLES20.glEnableVertexAttribArray(mColorHandle);  mCubeNormals.position(0);  GLES20.glVertexAttribPointer(mNormalHandle,mNormalDataSize,GLES20.GL_FLOAT,false,0,mCubeNormals);  GLES20.glEnableVertexAttribArray(mNormalHandle);  mCubeTextureCoordinates.position(0);  GLES20.glVertexAttribPointer(mTextureCoordinateHandle,mTextureCoordinateDataSize,GLES20.GL_FLOAT,false,0,mCubeTextureCoordinates);  GLES20.glEnableVertexAttribArray(mTextureCoordinateHandle);  Matrix.multiplyMM(mMVPMatrix,0,mViewMatrix,0,mModelMatrix,0);  GLES20.glUniformMatrix4fv(mMVMatrixHandle,1,false,mMVPMatrix,0);  Matrix.multiplyMM(mMVPMatrix,0,mProjectionMatrix,0,mMVPMatrix,0);  GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mMVPMatrix,0);  GLES20.glUniform3f(mLightPosHandle,mLightPosInEyeSpace[0],mLightPosInEyeSpace[1],mLightPosInEyeSpace[2]);  GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,36);}  }
class C{  public void testMinGreater(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Matrix fromAxes(Vec4[] axes){  if (axes == null) {    throw new IllegalArgumentException("Axes Is Null");  }  if (axes.length < 3) {    throw new IllegalArgumentException("Array Invalid Length");  }  if (axes[0] == null || axes[1] == null || axes[2] == null) {    throw new IllegalArgumentException("Axes Is Null");  }  Vec4 s=axes[0].normalize3();  Vec4 f=s.cross3(axes[1]).normalize3();  Vec4 u=f.cross3(s).normalize3();  return new Matrix(s.x,u.x,f.x,0.0,s.y,u.y,f.y,0.0,s.z,u.z,f.z,0.0,0.0,0.0,0.0,1.0,true);}  }
class C{  public boolean isEncryptedField(){  return m_vo.IsEncryptedField;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.369 -0500",hash_original_method="425C245C15643B6C00C58E49D6A6C651",hash_generated_method="C2258CD53F30B7AF255CD975E6523897") protected void connect(LocalSocketAddress address,int timeout) throws IOException {  if (fd == null) {    throw new IOException("socket not created");  }  connectLocal(fd,address.getName(),address.getNamespace().getId());}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  private static int NewFloatArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewFloatArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    float[] newArray=new float[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void visualizeRTreeEntry(SVGPlot svgp,Element layer,Projection2D proj,AbstractRStarTree<? extends N,E,?> rtree,E entry,int depth){  SpatialComparable mbr=entry;  if (settings.fill) {    Element r=SVGHyperCube.drawFilled(svgp,INDEX + depth,proj,mbr);    layer.appendChild(r);  } else {    Element r=SVGHyperCube.drawFrame(svgp,proj,mbr);    SVGUtil.setCSSClass(r,INDEX + depth);    layer.appendChild(r);  }  if (!entry.isLeafEntry()) {    N node=rtree.getNode(entry);    for (int i=0; i < node.getNumEntries(); i++) {      E child=node.getEntry(i);      if (!child.isLeafEntry()) {        visualizeRTreeEntry(svgp,layer,proj,rtree,child,depth + 1);      }    }  }}  }
class C{  default void write(Packet packet){  ReflectionUtil.forEachRecursiveAnnotatedField(Sync.class,getClass(),null);}  }
class C{  @DebugLog private boolean assignTopChoice(){  for (  String colorToAssign : colorsAvailable) {    PlayerColorChoices playerWhoWantsThisColor=getLonePlayerWithTopChoice(colorToAssign);    if (playerWhoWantsThisColor != null) {      assignColorToPlayer(colorToAssign,playerWhoWantsThisColor,"top choice");      return true;    }  }  Timber.i("No more players have a unique top choice in round %d",round);  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.204 -0400",hash_original_method="5CBF4EFA626DEC304F1893B39058BBEF",hash_generated_method="850B57D2923841CC2E0A94D8374367B6") public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  public static PageParamInfo parse(String originalUrl,TimingInfo timingInfo){  PageParameterParser parser=new PageParameterParser(timingInfo);  return parser.parseDocument(Document.get().getDocumentElement(),originalUrl);}  }
class C{  public static boolean isNullOrEmpty(String str){  return str == null || str.trim().length() == 0;}  }
class C{  private void writeSection(OutputNode node,Object source,Section section) throws Exception {  NamespaceMap scope=node.getNamespaces();  String prefix=section.getPrefix();  if (prefix != null) {    String reference=scope.getReference(prefix);    if (reference == null) {      throw new ElementException("Namespace prefix '%s' in %s is not in scope",prefix,type);    } else {      node.setReference(reference);    }  }  writeAttributes(node,source,section);  writeElements(node,source,section);  writeText(node,source,section);}  }
class C{  public TvShowEpisode(TvShowEpisode source){  tvShow=source.tvShow;  for (  MediaFile mf : source.getMediaFiles()) {    addToMediaFiles(new MediaFile(mf));  }  path=new String(source.path);  title=new String(source.title);  originalTitle=new String(source.originalTitle);  year=new String(source.year);  plot=new String(source.plot);  rating=source.rating;  for (  Entry<MediaFileType,String> entry : source.artworkUrlMap.entrySet()) {    artworkUrlMap.put(entry.getKey(),new String(entry.getValue()));  }  dateAdded=new Date(source.dateAdded.getTime());  scraped=source.scraped;  ids.putAll(source.ids);  episode=source.episode;  season=source.season;  dvdEpisode=source.dvdEpisode;  dvdSeason=source.dvdSeason;  isDvdOrder=source.isDvdOrder;  if (source.firstAired != null) {    firstAired=new Date(source.firstAired.getTime());  }  director=source.director;  writer=source.writer;  disc=source.disc;  watched=source.watched;  votes=source.votes;  subtitles=source.subtitles;  actors.addAll(source.actors);}  }
class C{  private void obtainLocalLocks(){  lockReq=new TXLockRequest();  GemFireCacheImpl cache=GemFireCacheImpl.getExisting("");  for (  TransactionalOperation txOp : this.recordedOperations) {    if (ServerRegionOperation.lockKeyForTx(txOp.getOperation())) {      TXRegionLockRequest rlr=lockReq.getRegionLockRequest(txOp.getRegionName());      if (rlr == null) {        rlr=new TXRegionLockRequestImpl(cache.getRegionByPath(txOp.getRegionName()));        lockReq.addLocalRequest(rlr);      }      if (txOp.getOperation() == ServerRegionOperation.PUT_ALL || txOp.getOperation() == ServerRegionOperation.REMOVE_ALL) {        rlr.addEntryKeys(txOp.getKeys());      } else {        rlr.addEntryKey(txOp.getKey());      }    }  }  if (logger.isDebugEnabled()) {    logger.debug("TX: client localLockRequest: {}",lockReq);  }  try {    lockReq.obtain();  } catch (  CommitConflictException e) {    rollback();    throw e;  }  if (internalAfterLocalLocks != null) {    internalAfterLocalLocks.run();  }}  }
class C{  public void hleGeListSyncDone(PspGeList list){  if (log.isDebugEnabled()) {    String msg="hleGeListSyncDone list " + list;    if (list.isDone()) {      msg+=", done";    } else {      msg+=", NOT done";    }    if (list.blockedThreadIds.size() > 0 && list.status != PSP_GE_LIST_END_REACHED) {      msg+=", waking thread";      for (      int threadId : list.blockedThreadIds) {        msg+=" " + Integer.toHexString(threadId);      }    }    log.debug(msg);  }synchronized (this) {    if (list.blockedThreadIds.size() > 0 && list.status != PSP_GE_LIST_END_REACHED) {      deferredThreadWakeupQueue.addAll(list.blockedThreadIds);    }    if (list.isDone()) {      listFreeQueue.add(list);    }  }}  }
class C{  protected InvalidConversationException(final IScope scope,final String s){  super(scope,s);}  }
class C{  public T first(){  Integer currentLimit=mLimit;  limit(1);  QuantumFluxCursor<T> cursor=queryAsCursor();  try {    if (cursor.moveToNext()) {      return cursor.inflate();    } else     return null;  }  finally {    cursor.close();    mLimit=currentLimit;  }}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  public void finishPopulation(final EvolutionState state,final int result){  return;}  }
class C{  @Override public void remove(){  IntRange.this.remove(index);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isStreamable(){  return mStreamable;}  }
class C{  void onAddMedia(RTMedia media){  mAddedMedia.add(media);}  }
class C{  public void step(final int leftHP,final int rounds){  float stepSize=leftHP / (float)player.getBaseHP();  stepSize=Math.signum(stepSize) * Math.min(Math.abs(stepSize),0.5f);  final int oldAtk=creature.getAtk();  int newAtk=Math.max(1,Math.round(creature.getAtk() + stepSize * creature.getAtk()));  if ((leftHP < 0) && (newAtk == oldAtk)) {    newAtk--;  }  final int level=creature.getLevel();  final int oldDef=creature.getDef();  int newDef=oldDef;  final double preferred=preferredDuration(level);  if (!isWithinDurationRange(preferred,rounds)) {    if ((leftHP > 0) || (preferred < rounds)) {      newDef=Math.max(1,(int)(creature.getDef() + preferred - rounds + 0.5));    }  } else {    newDef=Math.max(1,(int)(creature.getDef() + 5 * stepSize * creature.getDef() + 0.5f));  }  if (newDef > 1.1 * oldDef) {    newDef=Math.max((int)(1.1 * oldDef),oldDef + 1);  } else   if (newDef < 0.9 * oldDef) {    newDef=Math.max(1,Math.min((int)(0.9 * oldDef),oldDef - 1));  }  creature.setAtk(newAtk);  creature.setDef(newDef);}  }
class C{  @Override public void unregisterTap(Tap tap){  if (mSymbolFilter != null) {    mSymbolFilter.unregisterTap(tap);  }switch (tap.getName()) {case INSTRUMENT_FILTER_OUTPUT:    mC4FMPreFilter.setListener(mSymbolFilter);  break;case INSTRUMENT_C4FM_SYMBOL_FILTER_OUTPUT:mSymbolFilter.setListener(mC4FMSlicer);break;case INSTRUMENT_C4FM_SLICER_OUTPUT:DibitTap slicerTap=(DibitTap)tap;if (mC4FMSlicer != null) {mC4FMSlicer.removeListener(slicerTap);}break;default :throw new IllegalArgumentException("Unrecognized tap: " + tap.getName());}}  }
class C{  public AvailabilityCondition(AvailabilityChecker checker){  this.checker=checker;}  }
class C{  @Override public void updateSelectionTo(Collection<GraphNode> selection){  emptySelection();  updateSelectedExtend(selection);}  }
class C{  private void registerUse(Instruction s,TypeReference t){  if (heapTypes != null) {    if (!heapTypes.contains(t)) {      return;    }  }  HeapVariable<Object> H=findOrCreateHeapVariable(t);  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  uses.put(s,Hprime);}  }
class C{  public void refreshSchedule(){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    transitLine.getRoutes().values().forEach(null);  }}  }
class C{  public void div(BigInteger divisor){  BigInteger d=divisor.add(Constants.BIGINT_ONE).divide(BigInteger.valueOf(2));  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=coeffs[i].compareTo(Constants.BIGINT_ZERO) > 0 ? coeffs[i].add(d) : coeffs[i].add(d.negate());    coeffs[i]=coeffs[i].divide(divisor);  }}  }
class C{  void showEditorOpen(){  BoardEditor editor=new BoardEditor(controller);  controller.boardEditor=editor;  launch(editor.getFrame());  editor.boardLoad();}  }
class C{  private static void populateMimeTypeIconMapping(){  MIMETYPE_TO_ICON_MAPPING.put("application/coreldraw",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/epub+zip",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/font-sfnt",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/font-woff",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/illustrator",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/javascript",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/json",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/msaccess",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/msexcel",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/mspowerpoint",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/msword",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/octet-stream",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/postscript",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/pdf",R.drawable.file_pdf);  MIMETYPE_TO_ICON_MAPPING.put("application/rss+xml",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/rtf",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.android.package-archive",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.addin.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.sheet.binary.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.sheet.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.template.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-fontobject",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.addin.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.presentation.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.slideshow.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.template.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-word.document.macroEnabled.12",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-word.template.macroEnabled.12",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.presentation",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.presentation-template",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.spreadsheet",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.spreadsheet-template",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-master",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-template",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-web",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.presentation",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.slideshow",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.template",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.spreadsheetml.template",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.wordprocessingml.template",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/x-7z-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-bin",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-cbr",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/x-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-dcraw",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-deb",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-font",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-gimp",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-gzip",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-ms-dos-executable",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-msi",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-numbers-sffnumbers",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-keynote-sffkey",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-pages-sffpages",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/x-perl",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/x-photoshop",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-php",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/x-rar-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-shockwave-flash",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-tar",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-tex",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/xml",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/yaml",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/zip",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("database",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("httpd/unix-directory",R.drawable.ic_menu_archive);  MIMETYPE_TO_ICON_MAPPING.put("image/svg+xml",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("image/vector",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("text/calendar",R.drawable.file_calendar);  MIMETYPE_TO_ICON_MAPPING.put("text/css",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/csv",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("text/html",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/vcard",R.drawable.file_vcard);  MIMETYPE_TO_ICON_MAPPING.put("text/x-c",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-c++src",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-h",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-python",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-shellscript",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("web",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("DIR",R.drawable.ic_menu_archive);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.INT_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static boolean isDeviceRooted(){  return checkRootMethod1() || checkRootMethod2() || checkRootMethod3();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static String normalize(String oid){  return oid.startsWith("OID.") ? oid.substring(4) : oid;}  }
class C{  public ZeroReader(Reader reader){  this.reader=reader;}  }
class C{  public static void main(String[] args){  Version v;  String tmpStr;  System.out.println(VERSION + "\n");  v=new Version();  System.out.println("-1? " + v.compareTo("5.0.1"));  System.out.println(" 0? " + v.compareTo(VERSION));  System.out.println("+1? " + v.compareTo("3.4.0"));  tmpStr="5.0.1";  System.out.println("\ncomparing with " + tmpStr);  System.out.println("isOlder? " + v.isOlder(tmpStr));  System.out.println("equals ? " + v.equals(tmpStr));  System.out.println("isNewer? " + v.isNewer(tmpStr));  tmpStr=VERSION;  System.out.println("\ncomparing with " + tmpStr);  System.out.println("isOlder? " + v.isOlder(tmpStr));  System.out.println("equals ? " + v.equals(tmpStr));  System.out.println("isNewer? " + v.isNewer(tmpStr));  tmpStr="3.4.0";  System.out.println("\ncomparing with " + tmpStr);  System.out.println("isOlder? " + v.isOlder(tmpStr));  System.out.println("equals ? " + v.equals(tmpStr));  System.out.println("isNewer? " + v.isNewer(tmpStr));  tmpStr="3.4";  System.out.println("\ncomparing with " + tmpStr);  System.out.println("isOlder? " + v.isOlder(tmpStr));  System.out.println("equals ? " + v.equals(tmpStr));  System.out.println("isNewer? " + v.isNewer(tmpStr));  tmpStr="5";  System.out.println("\ncomparing with " + tmpStr);  System.out.println("isOlder? " + v.isOlder(tmpStr));  System.out.println("equals ? " + v.equals(tmpStr));  System.out.println("isNewer? " + v.isNewer(tmpStr));}  }
class C{  void neighborJoining(int nClusters,Vector<Integer>[] nClusterID,Node[] clusterNodes){  int n=m_instances.numInstances();  double[][] fDist=new double[nClusters][nClusters];  for (int i=0; i < nClusters; i++) {    fDist[i][i]=0;    for (int j=i + 1; j < nClusters; j++) {      fDist[i][j]=getDistance0(nClusterID[i],nClusterID[j]);      fDist[j][i]=fDist[i][j];    }  }  double[] fSeparationSums=new double[n];  double[] fSeparations=new double[n];  int[] nNextActive=new int[n];  for (int i=0; i < n; i++) {    double fSum=0;    for (int j=0; j < n; j++) {      fSum+=fDist[i][j];    }    fSeparationSums[i]=fSum;    fSeparations[i]=fSum / (nClusters - 2);    nNextActive[i]=i + 1;  }  while (nClusters > 2) {    int iMin1=-1;    int iMin2=-1;    double fMin=Double.MAX_VALUE;    if (m_Debug) {      for (int i=0; i < n; i++) {        if (nClusterID[i].size() > 0) {          double[] fRow=fDist[i];          double fSep1=fSeparations[i];          for (int j=0; j < n; j++) {            if (nClusterID[j].size() > 0 && i != j) {              double fSep2=fSeparations[j];              double fVal=fRow[j] - fSep1 - fSep2;              if (fVal < fMin) {                iMin1=i;                iMin2=j;                fMin=fVal;              }            }          }        }      }    } else {      int i=0;      while (i < n) {        double fSep1=fSeparations[i];        double[] fRow=fDist[i];        int j=nNextActive[i];        while (j < n) {          double fSep2=fSeparations[j];          double fVal=fRow[j] - fSep1 - fSep2;          if (fVal < fMin) {            iMin1=i;            iMin2=j;            fMin=fVal;          }          j=nNextActive[j];        }        i=nNextActive[i];      }    }    double fMinDistance=fDist[iMin1][iMin2];    nClusters--;    double fSep1=fSeparations[iMin1];    double fSep2=fSeparations[iMin2];    double fDist1=(0.5 * fMinDistance) + (0.5 * (fSep1 - fSep2));    double fDist2=(0.5 * fMinDistance) + (0.5 * (fSep2 - fSep1));    if (nClusters > 2) {      double fNewSeparationSum=0;      double fMutualDistance=fDist[iMin1][iMin2];      double[] fRow1=fDist[iMin1];      double[] fRow2=fDist[iMin2];      for (int i=0; i < n; i++) {        if (i == iMin1 || i == iMin2 || nClusterID[i].size() == 0) {          fRow1[i]=0;        } else {          double fVal1=fRow1[i];          double fVal2=fRow2[i];          double fDistance=(fVal1 + fVal2 - fMutualDistance) / 2.0;          fNewSeparationSum+=fDistance;          fSeparationSums[i]+=(fDistance - fVal1 - fVal2);          fSeparations[i]=fSeparationSums[i] / (nClusters - 2);          fRow1[i]=fDistance;          fDist[i][iMin1]=fDistance;        }      }      fSeparationSums[iMin1]=fNewSeparationSum;      fSeparations[iMin1]=fNewSeparationSum / (nClusters - 2);      fSeparationSums[iMin2]=0;      merge(iMin1,iMin2,fDist1,fDist2,nClusterID,clusterNodes);      int iPrev=iMin2;      while (nClusterID[iPrev].size() == 0) {        iPrev--;      }      nNextActive[iPrev]=nNextActive[iMin2];    } else {      merge(iMin1,iMin2,fDist1,fDist2,nClusterID,clusterNodes);      break;    }  }  for (int i=0; i < n; i++) {    if (nClusterID[i].size() > 0) {      for (int j=i + 1; j < n; j++) {        if (nClusterID[j].size() > 0) {          double fDist1=fDist[i][j];          if (nClusterID[i].size() == 1) {            merge(i,j,fDist1,0,nClusterID,clusterNodes);          } else           if (nClusterID[j].size() == 1) {            merge(i,j,0,fDist1,nClusterID,clusterNodes);          } else {            merge(i,j,fDist1 / 2.0,fDist1 / 2.0,nClusterID,clusterNodes);          }          break;        }      }    }  }}  }
class C{  public RegionDistributionException(String s,String regionFullPath,Set failedRoles){  super(s,regionFullPath);  this.failedRoles=failedRoles;  if (this.failedRoles == null) {    this.failedRoles=Collections.EMPTY_SET;  }}  }
class C{  public RecordableHistoryEvent(String eventType,Recordable recordable,String referrer,String action){  this(eventType,System.currentTimeMillis(),recordable,referrer,action);}  }
class C{  public void addDimension(int index,double value){}  }
class C{  static MediaType createAudioType(String subtype){  return create(AUDIO_TYPE,subtype);}  }
class C{  public int size(){  return elements.size();}  }
class C{  public int size(){  return content.size();}  }
class C{  public ImageTitle(Image image){  this(image,image.getHeight(null),image.getWidth(null),Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);}  }
class C{  @Uninterruptible final boolean enqueueInternal(Reference<? extends T> ref){  if (enqueueImpl(ref)) {    lock.broadcast();    return true;  } else {    return false;  }}  }
class C{  private void writeDocType() throws IOException {  writer.write("\n<!DOCTYPE taglib\n");  writer.write("PUBLIC \"-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN\"\n");  writer.write("\"http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd\">\n\n");}  }
class C{  protected void generateTestFile(String path,Object... wordCounts) throws Exception {  List<String> wordsArr=new ArrayList<>();  for (int i=0; i < wordCounts.length; i+=2) {    String word=(String)wordCounts[i];    int cnt=(Integer)wordCounts[i + 1];    while (cnt-- > 0)     wordsArr.add(word);  }  for (int i=0; i < wordsArr.size(); i++) {    int j=(int)(Math.random() * wordsArr.size());    Collections.swap(wordsArr,i,j);  }  PrintWriter testInputFileWriter=new PrintWriter(igfs.create(new IgfsPath(path),true));  int j=0;  while (j < wordsArr.size()) {    int i=5 + (int)(Math.random() * 5);    List<String> subList=wordsArr.subList(j,Math.min(j + i,wordsArr.size()));    j+=i;    testInputFileWriter.println(Joiner.on(' ').join(subList));  }  testInputFileWriter.close();}  }
class C{  protected HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public static final Polygon scale(Polygon polygon,double scale){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  Vector2[] oVertices=polygon.vertices;  int size=oVertices.length;  Vector2[] vertices=new Vector2[size];  Vector2 center=polygon.center;  for (int i=0; i < size; i++) {    vertices[i]=center.to(oVertices[i]).multiply(scale).add(center);  }  return new Polygon(vertices);}  }
class C{  public PercolateRequest onlyCount(boolean onlyCount){  this.onlyCount=onlyCount;  return this;}  }
class C{  @NamespacePermission(fields="#aNumber",permissions=NamespacePermissionEnum.READ) private void mockMethod(Integer aNumber){}  }
class C{  public Fact(Statement stmt){  this.triple=stmt;}  }
class C{  static void deleteIfExists(Configuration conf,String rel) throws IOException {  FileSystem fs=FileSystem.get(conf);  Path path=getOutputPath(conf,rel);  if (fs.isDirectory(path) || fs.isFile(path)) {    fs.delete(path,true);  }}  }
class C{  static Object internalMemberNameEnsureInit(Object mh){  DirectMethodHandle dmh=(DirectMethodHandle)mh;  dmh.ensureInitialized();  return dmh.member;}  }
class C{  public static UiResult openUrl(String url){  UiResult r=new UiResult();  r.url=url;  r.openWindow=true;  return r;}  }
class C{  public boolean isMenuInterests(){  Object oo=get_Value(COLUMNNAME_IsMenuInterests);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addFieldLine(String className,String fieldName,SourceLineRange range){  fieldLineMap.put(new FieldDescriptor(className,fieldName),range);}  }
class C{  public static void dumpCurrentRow(ICursor cursor,int maxColumnWidth,StringBuilder builder){  for (int i=0, count=cursor.getColumnCount(); i < count; i++) {    addColumnToRowBuilder(builder,cursor.getString(i),maxColumnWidth);  }}  }
class C{  public BoolQueryBuilder mustNot(QueryBuilder queryBuilder){  mustNotClauses.add(queryBuilder);  return this;}  }
class C{  private void overflow(final long offset,final int nbytes){  final long needed=(offset + nbytes) - userExtent;  if (needed > 0) {    if (!overflow(needed)) {      throw new OverflowException();    }  }}  }
class C{  private void processDocument(JCas jcas,String document) throws CollectionException {  String[] lines=document.split(System.getProperty("line.separator"));  int i=0;  int offset=0;  for (  String line : lines) {    i++;    if (line.startsWith(commentChar)) {      offset+=line.length() + System.getProperty("line.separator").length();      continue;    }    int wordChoiceProblemBegin=offset;    int wordChoiceProblemEnd=offset + line.length();    String[] parts=line.split(separatorChar);    if (parts.length != 6) {      this.getLogger().log(Level.SEVERE,"Wrong file format:  " + line);      throw new CollectionException(new Throwable("Wrong file format on line '" + i + " "+ line+ "'. It should be target:cand1:cand2:cand3:cand4:correct"));    }    offset=addTokenAnnotations(jcas,parts,offset);    String correctValueString=parts[5];    int correct=0;    try {      correct=new Integer(correctValueString);    } catch (    NumberFormatException e) {      this.getLogger().log(Level.INFO,"Wrong number format: " + correctValueString);      offset+=line.length() + System.getProperty("line.separator").length();      continue;    }    offset+=correctValueString.length();    WordChoiceProblem wordChoiceProblem=new WordChoiceProblem(jcas,wordChoiceProblemBegin,wordChoiceProblemEnd);    wordChoiceProblem.setTarget(parts[0]);    wordChoiceProblem.setCandidate1(parts[1]);    wordChoiceProblem.setCandidate2(parts[2]);    wordChoiceProblem.setCandidate3(parts[3]);    wordChoiceProblem.setCandidate4(parts[4]);    wordChoiceProblem.setCorrectAnswer(correct);    wordChoiceProblem.addToIndexes();    offset+=System.getProperty("line.separator").length();  }}  }
class C{  public boolean equals(reduce_action other){  return other != null && other.reduce_with() == reduce_with();}  }
class C{  public HTMLWriter(Writer out,String docType) throws IOException {  if (out instanceof BufferedWriter)   this.out=(BufferedWriter)out; else   this.out=new BufferedWriter(out);  this.out.write(docType);  this.out.newLine();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.246 -0500",hash_original_method="CA7EEF802D39DD35821E8C5DF292BB9E",hash_generated_method="920F6FBF2CA4E75ED27B7EB38BB24898") public void parse(final SetCookie cookie,String domain) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (domain == null) {    throw new MalformedCookieException("Missing value for domain attribute");  }  if (domain.trim().length() == 0) {    throw new MalformedCookieException("Blank value for domain attribute");  }  domain=domain.toLowerCase(Locale.ENGLISH);  if (!domain.startsWith(".")) {    domain='.' + domain;  }  cookie.setDomain(domain);}  }
class C{  @Override public void addAttribute(String name,String value){  if (value != null) {    ((Element)current).setAttribute(name,value);  }}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public void write(String s,int offset,int length) throws IOException {  while (length > 0) {    if (_tail == null)     addBuffer(TempCharBuffer.allocate()); else     if (_tail._buf.length <= _tail._length) {      addBuffer(TempCharBuffer.allocate());    }    int sublen=_tail._buf.length - _tail._length;    if (length < sublen)     sublen=length;    s.getChars(offset,offset + sublen,_tail._buf,_tail._length);    offset+=sublen;    length-=sublen;    _tail._length+=sublen;  }}  }
class C{  public void render(Graphics g){  if (getShape() != null) {    super.render(g);    if (arrowhead != null) {      arrowhead.render(g);    }    return;  }  if (getNeedToRegenerate() || !isVisible())   return;  float[][] xpts=xpoints;  float[][] ypts=ypoints;  if (xpts == null || ypts == null) {    setNeedToRegenerate(true);    return;  }  float[] _x, _y;  int i;  int len=xpts.length;  Paint displayPaint=getDisplayPaint();  Paint fillPaint=getFillPaint();  boolean isFillClear=isClear(fillPaint);  boolean isLineClear=isClear(displayPaint);  Paint tm=getTextureMask();  try {    for (i=0; i < len; i++) {      _x=xpts[i];      _y=ypts[i];      if (_x == null || _y == null) {        continue;      }      if (isPolygon()) {        if (!isFillClear) {          setGraphicsForFill(g);          GeneralPath polyGon=new GeneralPath();          for (int j=0; j < _x.length; j++) {            if (j == 0) {              polyGon.moveTo(_x[j],_y[j]);            } else {              polyGon.lineTo(_x[j],_y[j]);            }          }          ((Graphics2D)g).fill(polyGon);          if (tm != null && tm != fillPaint) {            setGraphicsColor(g,tm);            ((Graphics2D)g).fill(polyGon);          }        }        if (matted || !isLineClear || !edgeMatchesFill) {          if (matted) {            if (g instanceof Graphics2D && stroke instanceof BasicStroke) {              ((Graphics2D)g).setStroke(new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f));              setGraphicsColor(g,mattingPaint);              GeneralPath polyLine=new GeneralPath();              for (int j=0; j < _x.length; j++) {                if (j == 0) {                  polyLine.moveTo(_x[j],_y[j]);                } else {                  polyLine.lineTo(_x[j],_y[j]);                }              }              ((Graphics2D)g).draw(polyLine);            }          }          setGraphicsForEdge(g);          GeneralPath polyGon=new GeneralPath();          for (int j=0; j < _x.length; j++) {            if (j == 0) {              polyGon.moveTo(_x[j],_y[j]);            } else {              polyGon.lineTo(_x[j],_y[j]);            }          }          ((Graphics2D)g).draw(polyGon);        }      } else {        if (matted) {          if (g instanceof Graphics2D && stroke instanceof BasicStroke) {            ((Graphics2D)g).setStroke(new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f));            if (arrowhead != null) {              setGraphicsColor(g,mattingPaint);              arrowhead.render(g);            }            setGraphicsColor(g,mattingPaint);            GeneralPath polyLine=new GeneralPath();            for (int j=0; j < _x.length; j++) {              if (j == 0) {                polyLine.moveTo(_x[j],_y[j]);              } else {                polyLine.lineTo(_x[j],_y[j]);              }            }            ((Graphics2D)g).draw(polyLine);          }        }        setGraphicsForEdge(g);        GeneralPath polyLine=new GeneralPath();        for (int j=0; j < _x.length; j++) {          if (j == 0) {            polyLine.moveTo(_x[j],_y[j]);          } else {            polyLine.lineTo(_x[j],_y[j]);          }        }        ((Graphics2D)g).draw(polyLine);        if (arrowhead != null) {          arrowhead.render(g);        }      }    }    renderLabel(g);  } catch (  Exception e) {    Debug.output("OMPoly: caught Java rendering exception\n" + e.getMessage());    if (Debug.debugging("ompoly")) {      e.printStackTrace();    }  }}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public TagAttachExample(TagAttachObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getTagId() != null) {    criteria.andTagIdEqualTo(sample.getTagId());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }}  }
class C{  public boolean add(Coordinate[] coord,boolean allowRepeated){  add(coord,allowRepeated,true);  return true;}  }
class C{  public Configurator errorBackground(int color){  if (color != 0) {    viewErrorBackgroundColor=color;  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.173 -0500",hash_original_method="DDF38266DDD18665F4022DB956C0FE2D",hash_generated_method="0ECB2D97A81CEBB5F43FDA74B50F1D9C") public void transactionErrorEvent(SIPTransactionErrorEvent transactionErrorEvent){  SIPTransaction transaction=(SIPTransaction)transactionErrorEvent.getSource();  if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TRANSPORT_ERROR) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("TransportError occured on " + transaction);    }    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_ERROR) {    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_RETRANSMIT) {    Object errorObject=transactionErrorEvent.getSource();    Transaction tx=(Transaction)errorObject;    if (tx.getDialog() != null)     InternalErrorHandler.handleException("Unexpected event !",this.sipStack.getStackLogger());    Timeout timeout=Timeout.RETRANSMIT;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  }}  }
class C{  private void forceGC(){  System.gc();  try {    Thread.sleep(m_gctimeout);  } catch (  Exception ex) {  }}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _map.size()) {    throw new ConcurrentModificationException();  }  Object[] values=_map._values;  int i=_index;  while (i-- > 0 && !TIntObjectHashMap.isFull(values,i))   ;  return i;}  }
class C{  public static int calcMemSize(Object o,ObjectSizer os,boolean addOverhead,boolean calcSerializedSize){  int result;  if (o instanceof byte[]) {    result=getByteSize((byte[])o);    addOverhead=false;  } else   if (o == null) {    result=0;    addOverhead=false;  } else   if (o instanceof String) {    result=(((String)o).length() * 2) + 4 + (Sizeable.PER_OBJECT_OVERHEAD * 2)+ 4+ 4+ 4+ 4;  } else   if (o instanceof byte[][]) {    result=getArrayOfBytesSize((byte[][])o,true);    addOverhead=false;  } else   if (o instanceof CachedDeserializable) {    result=((CachedDeserializable)o).getSizeInBytes();    addOverhead=false;  } else   if (o instanceof Sizeable) {    result=((Sizeable)o).getSizeInBytes();  } else   if (os != null) {    result=os.sizeof(o);  } else   if (calcSerializedSize) {    result=Sizeable.PER_OBJECT_OVERHEAD + 4;    NullDataOutputStream dos=new NullDataOutputStream();    try {      DataSerializer.writeObject(o,dos);      result+=dos.size();    } catch (    IOException ex) {      RuntimeException ex2=new IllegalArgumentException(LocalizedStrings.CachedDeserializableFactory_COULD_NOT_CALCULATE_SIZE_OF_OBJECT.toLocalizedString());      ex2.initCause(ex);      throw ex2;    }  } else {    result=-1;    addOverhead=false;  }  if (addOverhead) {    result+=overhead();  }  return result;}  }
class C{  private void initializeSensoring(){  for (  DgExtensionPoint extPoint : this.extensionPointMap.values()) {    Set<SignalData> extPointSignals=new HashSet<SignalData>();    for (    Id<SignalGroup> signalGroupId : extPoint.getSignalGroupIds()) {      SignalSystemData systemData=this.system.getSignalSystemsManager().getSignalsData().getSignalSystemsData().getSignalSystemData().get(this.system.getId());      SignalGroupData signalGroup=this.system.getSignalSystemsManager().getSignalsData().getSignalGroupsData().getSignalGroupDataBySystemId(systemData.getId()).get(signalGroupId);      Set<SignalData> signals=DgSignalsUtils.getSignalDataOfSignalGroup(systemData,signalGroup);      extPointSignals.addAll(signals);    }    extPoint.addSignals(extPointSignals);    for (    SignalData signal : extPointSignals) {      if (signal.getLaneIds() == null || signal.getLaneIds().isEmpty()) {        this.sensorManager.registerNumberOfCarsInDistanceMonitoring(signal.getLinkId(),this.sylviaConfig.getSensorDistanceMeter());      } else {        for (        Id<Lane> laneId : signal.getLaneIds()) {          this.sensorManager.registerNumberOfCarsMonitoringOnLane(signal.getLinkId(),laneId);        }      }    }  }}  }
class C{  public Polynomial plus(Polynomial B){  Polynomial retval=new Polynomial(Math.max(order,B.order));  for (int i=0; i <= order; i++)   retval.a[i]=a[i];  for (int i=0; i <= B.order; i++)   retval.a[i]+=B.a[i];  return retval;}  }
class C{  public ClassificationDataSet asClassificationDataSet(int index){  if (index < 0)   throw new IllegalArgumentException("Index must be a non-negative value"); else   if (getNumCategoricalVars() == 0)   throw new IllegalArgumentException("Dataset has no categorical variables, can not create classification dataset"); else   if (index >= getNumCategoricalVars())   throw new IllegalArgumentException("Index " + index + " is larger than number of categorical features "+ getNumCategoricalVars());  return new ClassificationDataSet(this,index);}  }
class C{  public Object clone(){  try {    return new RoleUnresolved(roleName,roleValue,problemType);  } catch (  IllegalArgumentException exc) {    return null;  }}  }
class C{  public void specParsed(Spec spec){  this.lifecycleManager.sendEvent(new SpecEvent(spec,SpecEvent.TYPE_PARSE));}  }
class C{  @Override public Instance outputPeek(){  return m_attributeFilter.outputPeek();}  }
class C{  public void testSortValues() throws Exception {  Expression expr=JavascriptCompiler.compile("sqrt(_score)");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("_score",SortField.Type.SCORE));  Sort sort=new Sort(expr.getSortField(bindings,true));  Query query=new TermQuery(new Term("body","contents"));  TopFieldDocs td=searcher.search(query,3,sort,true,true);  for (int i=0; i < 3; i++) {    FieldDoc d=(FieldDoc)td.scoreDocs[i];    float expected=(float)Math.sqrt(d.score);    float actual=((Double)d.fields[0]).floatValue();    assertEquals(expected,actual,CheckHits.explainToleranceDelta(expected,actual));  }}  }
class C{  public byte[] toByteArray(){  int k=((len - 1) >> 3) + 1;  int ov=k & 0x03;  int m;  byte[] res=new byte[k];  int i;  for (i=0; i < (k >> 2); i++) {    m=k - (i << 2) - 1;    res[m]=(byte)((value[i] & 0x000000ff));    res[m - 1]=(byte)((value[i] & 0x0000ff00) >>> 8);    res[m - 2]=(byte)((value[i] & 0x00ff0000) >>> 16);    res[m - 3]=(byte)((value[i] & 0xff000000) >>> 24);  }  for (i=0; i < ov; i++) {    m=(ov - i - 1) << 3;    res[i]=(byte)((value[blocks - 1] & (0x000000ff << m)) >>> m);  }  return res;}  }
class C{  public String handleException(AbstractExperimenterTab tab,String msg,Throwable t){  String result;  result=ExceptionUtils.handleException(tab,msg,t,false);  log(null,result);  return result;}  }
class C{  public void testGetSet(){  final byte[] data={1,3,5,7,9,11,13,15,17,19,21,20,18,16,14,12,10,8,6,4,2,0};  for (int size=1; size < data.length; size++) {    final ByteArray array=getByteArray(100,7);    long offset=1L;    while (offset < array.length()) {      final int safeWrite=Math.min(size,(int)(array.length() - offset));      array.set(offset,data,safeWrite);      final byte[] tmp=new byte[safeWrite + 1];      array.get(tmp,offset - 1,safeWrite + 1);      assertEquals("tmp[0]",offset == 1L ? (byte)0 : data[size - 1],tmp[0]);      for (int i=1; i <= safeWrite; i++) {        assertEquals("tmp[" + i + "]",data[i - 1],tmp[i]);        assertEquals("tmp[" + i + "]",data[i - 1],array.get(offset + i - 1));      }      offset+=size;    }  }}  }
class C{  public final float readFloat() throws java.io.IOException {  return 0.0f;}  }
class C{  public boolean isOneTime(){  return countdown == 0L;}  }
class C{  public static void showError(String messageKey,Switch ignore){  _callback.showError(messageKey,ignore);}  }
class C{  public CannotCompileException(String msg){  super(msg);  message=msg;  initCause(null);}  }
class C{  public Todo_Relation idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  public String redo(){  if (!canRedo()) {    return "";  }  m_nCurrentEditAction++;  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);  m_bNeedsUndoAction=false;  undoAction.redo();  m_bNeedsUndoAction=true;  return undoAction.getRedoMsg();}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public static MountInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  MountInfo object=new MountInfo();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"MountInfo".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (MountInfo)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","filePath").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFilePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","serverName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setServerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public <U extends T,A,B>OngoingMatchingR2<T,U,A,B,R> when(DecomposableMatchBuilder2<U,A,B> decomposableMatchBuilder){  return new OngoingMatchingR2<>(this,decomposableMatchBuilder.build());}  }
class C{  public Set<Entry<String,T>> entrySet(){  HashSet<Entry<String,T>> set=new HashSet<Entry<String,T>>();  set.addAll(container.entrySet());  set.addAll(cache.entrySet());  return set;}  }
class C{  public ReilInstruction(final Address address,final String mnemonic,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  this(new com.google.security.zynamics.reil.ReilInstruction(new CAddress(check(address).toLong()),checkMnemonic(mnemonic),check1(firstOperand).getNative(),check2(secondOperand).getNative(),check3(thirdOperand).getNative()));}  }
class C{  public DownloadManager(){  mActiveList=new ArrayList<>();  mInactiveList=new ArrayList<>();  mPendingList=new ArrayList<>();  mCompletedList=new ArrayList<>();  mErrorList=new ArrayList<>();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public QueueCursor(int capacity,boolean fair){  super();  this.queue=new ArrayBlockingQueue<E>(capacity,fair);}  }
class C{  public LofsSearchEditorNew(LofsRunner runner){  super(runner,"Result Graph");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.396 -0500",hash_original_method="AC75BAF5D25E8A26F15256B1C5A7867F",hash_generated_method="281B47BDC9545EEB94B7BF57D4FC12A7") public String encode(){  return new StringBuffer(this.headerName).append(COLON).append(SP).append(this.value).append(NEWLINE).toString();}  }
class C{  @Override public boolean shouldEstimatePerformance(){  return false;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  protected int[] addPeriodInto(int[] values,ReadablePeriod period){  for (int i=0, isize=period.size(); i < isize; i++) {    DurationFieldType type=period.getFieldType(i);    int value=period.getValue(i);    if (value != 0) {      int index=indexOf(type);      if (index == -1) {        throw new IllegalArgumentException("Period does not support field '" + type.getName() + "'");      } else {        values[index]=FieldUtils.safeAdd(getValue(index),value);      }    }  }  return values;}  }
class C{  final public SyntaxTreeNode GeneralId() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[2];  Token t;  bpa("General ID");  zn[0]=IdPrefix();  zn[1]=Identifier();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_GeneralId,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  public static String insertRequiredSpace(String str){  String strResult="";  if (str.indexOf(" ") == -1) {    try {      strResult=str.substring(0,str.length() - 3) + " " + str.substring(str.length() - 3);      System.out.println("inserting Space2 : " + strResult);    } catch (    StringIndexOutOfBoundsException ex) {      System.out.println(ex.getMessage());      strResult=str;    }  } else {    strResult=str;  }  return strResult;}  }
class C{  public EnumConstantDeclaration newEnumConstantDeclaration(){  EnumConstantDeclaration result=new EnumConstantDeclaration(this);  return result;}  }
class C{  public static void createSimple() throws Exception {  MemoryStore memoryStore=new MemoryStore();  LuceneSail lucenesail=new LuceneSail();  lucenesail.setParameter(LuceneSail.INDEX_CLASS_KEY,LuceneIndex.class.getName());  lucenesail.setParameter(LuceneSail.LUCENE_RAMDIR_KEY,"true");  lucenesail.setBaseSail(memoryStore);  SailRepository repository=new SailRepository(lucenesail);  repository.initialize();  SailRepositoryConnection connection=repository.getConnection();  try {    connection.begin();    connection.add(LuceneSailExample.class.getResourceAsStream("/org/openrdf/sail/lucene/examples/foaf.rdfs"),"",RDFFormat.RDFXML);    connection.commit();    String queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"+ "SELECT * WHERE { \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"person\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "?subject rdf:type ?type . \n"+ "} LIMIT 3 \n"+ "BINDINGS ?type { \n"+ " (<http://www.w3.org/2002/07/owl#Class>) \n"+ "}";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "SELECT * WHERE { \n"+ "?subject rdfs:domain ?domain . \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"chat\" ; \n"+ "       search:score ?score . \n"+ "?domain search:matches ?match2 . \n"+ "?match2 search:query \"person\" ; \n"+ "        search:score ?score2 . \n"+ "} LIMIT 5";    tupleQuery(queryString,connection);    queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "SELECT * WHERE { \n"+ "{ SELECT * WHERE { \n"+ "  ?subject search:matches ?match . \n"+ "  ?match search:query \"person\" ; \n"+ "         search:property ?property ; \n"+ "         search:score ?score ; \n"+ "         search:snippet ?snippet . \n"+ "} } \n"+ "FILTER(CONTAINS(STR(?subject), \"Person\")) \n"+ "} \n"+ "";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX foaf: <http://xmlns.com/foaf/0.1/> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "CONSTRUCT { ?x rdfs:domain foaf:Person } \n"+ "WHERE { \n"+ "?x rdfs:domain foaf:Person . \n"+ "?x search:matches ?match . \n"+ "?match search:query \"homepage\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "} LIMIT 3 \n";    graphQuery(queryString,connection);  }  finally {    connection.close();    repository.shutDown();  }}  }
class C{  @Override public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  try {    int[] pixels=new int[width * height];    PixelGrabber grabber=new PixelGrabber(img,0,0,width,height,pixels,0,width);    grabber.grabPixels();    ColorModel model=ColorModel.getRGBdefault();    m_printstream.println("gsave");    m_printstream.println(xTransform(xScale(x)) + " " + (yTransform(yScale(y)) - yScale(height))+ " translate");    m_printstream.println(xScale(width) + " " + yScale(height)+ " scale");    m_printstream.println(width + " " + height+ " "+ "8"+ " ["+ width+ " 0 0 "+ (-height)+ " 0 "+ height+ "]");    m_printstream.println("{<");    int index;    for (int i=0; i < height; i++) {      for (int j=0; j < width; j++) {        index=i * width + j;        m_printstream.print(toHex(model.getRed(pixels[index])));        m_printstream.print(toHex(model.getGreen(pixels[index])));        m_printstream.print(toHex(model.getBlue(pixels[index])));      }      m_printstream.println();    }    m_printstream.println(">}");    m_printstream.println("false 3 colorimage");    m_printstream.println("grestore");    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public static long extractWrappedIdPart(long composedId){  if (composedId == RecyclerView.NO_ID) {    return RecyclerView.NO_ID;  }  return (composedId << (64 - BIT_WIDTH_GROUP_ID - BIT_WIDTH_CHILD_ID- BIT_OFFSET_CHILD_ID)) >> (64 - (BIT_WIDTH_GROUP_ID + BIT_WIDTH_CHILD_ID));}  }
class C{  public void mouseClick(MouseEvent e){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (roleName_1: ");  result.append(roleName_1);  result.append(')');  return result.toString();}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  private ObexHelper(){}  }
class C{  public void beginTask(String name,int totalWork){}  }
class C{  public DeviceIterator(Iterator<Device> subIterator,IEntityClass[] entityClasses,MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,DatapathId switchDPID,OFPort switchPort){  super(subIterator);  this.entityClasses=entityClasses;  this.subIterator=subIterator;  this.macAddress=macAddress;  this.vlan=vlan;  this.ipv4Address=ipv4Address;  this.switchDPID=switchDPID;  this.switchPort=switchPort;}  }
class C{  public void testGetRootDirectory() throws Exception {  System.out.println("getRootDirectory");  final ScanManagerMXBean manager=ScanManager.register();  try {    final String tmpdir=System.getProperty("java.io.tmpdir");    final ScanDirConfigMXBean config=manager.getConfigurationMBean();    System.err.println("Configuration MXBean is: " + config);    final DirectoryScannerConfig bean=config.addDirectoryScanner("test",tmpdir,".*",0,0);    final String root=bean.getRootDirectory();    if (root == null)     throw new NullPointerException("bean.getRootDirectory()");    if (config.getConfiguration().getScan("test").getRootDirectory() == null)     throw new NullPointerException("config.getConfig().getScan(\"test\").getRootDirectory()");    manager.applyConfiguration(true);    final DirectoryScannerMXBean proxy=manager.getDirectoryScanners().get("test");    final File tmpFile=new File(tmpdir);    final File rootFile=new File(proxy.getRootDirectory());    assertEquals(tmpFile,rootFile);  } catch (  Exception x) {    x.printStackTrace();    throw x;  } finally {    try {      ManagementFactory.getPlatformMBeanServer().unregisterMBean(ScanManager.SCAN_MANAGER_NAME);    } catch (    Exception x) {      System.err.println("Failed to cleanup: " + x);    }  }}  }
class C{  public boolean isAutoNegotiation(){  return autoNegotiation;}  }
class C{  public void enableHelpOnButton(@NotNull MenuItem comp,@NotNull String id,HelpSet hs){  CSH.setHelpIDString(comp,id);  if (hs != null) {    CSH.setHelpSet(comp,hs);  }  comp.addActionListener(getDisplayHelpFromSource());}  }
class C{  protected void scanData() throws Exception {  while ((!this.reader.atEOF()) && (this.builder.getResult() == null)) {    String str=XMLUtil.read(this.reader,'&');    char ch=str.charAt(0);    if (ch == '&') {      XMLUtil.processEntity(str,this.reader,this.entityResolver);      continue;    }switch (ch) {case '<':      this.scanSomeTag(false,null,new Properties());    break;case ' ':case '\t':case '\r':case '\n':  break;default :XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),"`" + ch + "' (0x"+ Integer.toHexString((int)ch)+ ')');}}}  }
class C{  protected void include(Coords coords,IBoard board,int structureType){  if (isIn(coords)) {    return;  }  IHex nextHex=board.getHex(coords);  if ((null == nextHex) || !(nextHex.containsTerrain(structureType))) {    return;  }  if (structureType == Terrains.BUILDING) {    if (type != nextHex.terrainLevel(Terrains.BUILDING)) {      throw new IllegalArgumentException("The coordinates, " + coords.getBoardNum() + ", should contain the same type of building as "+ coordinates.elementAt(0).getBoardNum());    }    if (bldgClass != nextHex.terrainLevel(Terrains.BLDG_CLASS)) {      throw new IllegalArgumentException("The coordinates, " + coords.getBoardNum() + ", should contain the same class of building as "+ coordinates.elementAt(0).getBoardNum());    }  }  coordinates.addElement(coords);  originalHexes++;  currentCF.put(coords,nextHex.terrainLevel(Terrains.BLDG_CF));  phaseCF.put(coords,nextHex.terrainLevel(Terrains.BLDG_CF));  basement.put(coords,BasementType.getType(nextHex.terrainLevel(Terrains.BLDG_BASEMENT_TYPE)));  basementCollapsed.put(coords,nextHex.terrainLevel(Terrains.BLDG_BASE_COLLAPSED) == 1);  if (structureType == Terrains.BRIDGE) {    currentCF.put(coords,nextHex.terrainLevel(Terrains.BRIDGE_CF));    phaseCF.put(coords,nextHex.terrainLevel(Terrains.BRIDGE_CF));  }  if (structureType == Terrains.FUEL_TANK) {    currentCF.put(coords,nextHex.terrainLevel(Terrains.FUEL_TANK_CF));    phaseCF.put(coords,nextHex.terrainLevel(Terrains.FUEL_TANK_CF));  }  if (nextHex.containsTerrain(Terrains.BLDG_ARMOR)) {    armor.put(coords,nextHex.terrainLevel(Terrains.BLDG_ARMOR));  } else {    armor.put(coords,0);  }  burning.put(coords,false);  for (int dir=0; dir < 6; dir++) {    if (nextHex.containsTerrainExit(structureType,dir)) {      include(coords.translated(dir),board,structureType);    }  }}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe){  return encodeBase64(binaryData,isChunked,urlSafe,Integer.MAX_VALUE);}  }
class C{  public static String sha256(String str){  try {    return toHex(MessageDigest.getInstance("SHA-256").digest(str.getBytes()));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Your Java is broken",e);  }}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public RefactoringHistoryImplementation(final RefactoringDescriptorProxy[] proxies){  Assert.isNotNull(proxies);  fDescriptorProxies=new RefactoringDescriptorProxy[proxies.length];  System.arraycopy(proxies,0,fDescriptorProxies,0,proxies.length);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public IllegalArgumentException(String str){  super("Illegal Argument : " + str);}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public SpanQuery sf(String s,int b){  return spanFirstQuery(st(s),b);}  }
class C{  public MovAvgBuilder gapPolicy(GapPolicy gapPolicy){  this.gapPolicy=gapPolicy;  return this;}  }
class C{  protected boolean hasArgumentList(){  if (CompletionProposal.METHOD_NAME_REFERENCE == fProposal.getKind())   return false;  boolean noOverwrite=true;  char[] completion=fProposal.getCompletion();  return !isInJavadoc() && completion.length > 0 && (noOverwrite || completion[completion.length - 1] == ')');}  }
class C{  public void resetSpecNames(){  specContext=getNewContext();}  }
class C{  @Override public XMLSignatureInput engineResolveURI(ResourceResolverContext context) throws ResourceResolverException {  try {    URI uriNew=getNewURI(context.uriToResolve,context.baseUri);    URL url=uriNew.toURL();    URLConnection urlConnection;    urlConnection=openConnection(url);    String auth=urlConnection.getHeaderField("WWW-Authenticate");    if (auth != null && auth.startsWith("Basic")) {      String user=engineGetProperty(ResolverDirectHTTP.properties[ResolverDirectHTTP.HttpBasicUser]);      String pass=engineGetProperty(ResolverDirectHTTP.properties[ResolverDirectHTTP.HttpBasicPass]);      if ((user != null) && (pass != null)) {        urlConnection=openConnection(url);        String password=user + ":" + pass;        String encodedPassword=Base64.encode(password.getBytes("ISO-8859-1"));        urlConnection.setRequestProperty("Authorization","Basic " + encodedPassword);      }    }    String mimeType=urlConnection.getHeaderField("Content-Type");    InputStream inputStream=urlConnection.getInputStream();    ByteArrayOutputStream baos=new ByteArrayOutputStream();    byte buf[]=new byte[4096];    int read=0;    int summarized=0;    while ((read=inputStream.read(buf)) >= 0) {      baos.write(buf,0,read);      summarized+=read;    }    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Fetched " + summarized + " bytes from URI "+ uriNew.toString());    }    XMLSignatureInput result=new XMLSignatureInput(baos.toByteArray());    result.setSourceURI(uriNew.toString());    result.setMIMEType(mimeType);    return result;  } catch (  URISyntaxException ex) {    throw new ResourceResolverException("generic.EmptyMessage",ex,context.attr,context.baseUri);  }catch (  MalformedURLException ex) {    throw new ResourceResolverException("generic.EmptyMessage",ex,context.attr,context.baseUri);  }catch (  IOException ex) {    throw new ResourceResolverException("generic.EmptyMessage",ex,context.attr,context.baseUri);  }catch (  IllegalArgumentException e) {    throw new ResourceResolverException("generic.EmptyMessage",e,context.attr,context.baseUri);  }}  }
class C{  @Override public boolean beginDrawingLayers(){  while (!inited) {    try {      Thread.sleep(10);    } catch (    final InterruptedException e) {      return false;    }  }  return sceneBuffer.beginUpdatingScene();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.220 -0400",hash_original_method="F2C311997B1BD2792B1132EA724E574F",hash_generated_method="38C9B028E6E8B805F65CD5A833DC0539") private boolean sameMembers(Object[] ar1,Object[] ar2,int length){  if (ar1 == null && ar2 == null) {    return true;  }  if (ar1 == null || ar2 == null) {    return false;  }  boolean found;  for (int i=0; i < length; i++) {    found=false;    for (int j=0; j < length; j++) {      if (ar1[i].equals(ar2[j])) {        found=true;        break;      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  @Inline public final boolean isEmpty(){  return !checkDequeue(1);}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  public IndexConfiguration indexConfiguration(){  return indexConfiguration;}  }
class C{  protected Caret createCaret(){  return MotifTextUI.createCaret();}  }
class C{  public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){}  }
class C{  @Deprecated public static Class<?> forName(String name) throws ClassNotFoundException, LinkageError {  return forName(name,getDefaultClassLoader());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void disable(Feature f){  _featureFlags&=~f.getMask();}  }
class C{  public void onBuyMoreClicks(View view){  if (isSubscribed()) {    String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.consumable_sku));    storeRequestId(requestId,NUM_CLICKS);  } else {    generateSubscribeDialog();  }}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  @Override public void mousePressed(MouseEvent e){  try {    recorder.startRecording();  } catch (  RuntimeException ex) {    log.warning(ex.toString());  }}  }
class C{  private ArffTableModel(){  super();  m_Listeners=new HashSet<TableModelListener>();  m_Data=null;  m_NotificationEnabled=true;  m_UndoList=new Vector<File>();  m_IgnoreChanges=false;  m_UndoEnabled=true;  m_ReadOnly=false;  m_ShowAttributeIndex=false;  m_Cache=new Hashtable<String,String>();}  }
class C{  public FITRowMaker(DcwRecordFile drf) throws FormatException {  String tableName=drf.getTableName().substring(0,3);  dirPath=new File(drf.getTableFile()).getParentFile();  featureTableExt=getExtensionForTable(tableName);  primIdColumn=drf.whatColumn("prim_id");  tileIdColumn=drf.whatColumn("tile_id");  fcIdColumn=drf.whatColumn("fc_id");  featureIdColumn=drf.whatColumn("feature_id");  tiler=new TileHolder(dirPath,tableName,(tileIdColumn != -1));  featureNames=getFeatureNames(dirPath);  featureTables=new DcwRecordFile[featureNames.length];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DatagramSocket() throws SocketException {  this(0);}  }
