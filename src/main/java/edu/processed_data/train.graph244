class C{  protected synchronized void blockUntilEmpty() throws PipeClosedException {  while (head != tail) {    if (closed)     throw new PipeClosedException("input stream closed pipe");    try {      wait();    } catch (    InterruptedException e) {      throw new IllegalStateException(e);    }  }}  }
class C{  public static LinkedList<Long> findAndSetRoute(Map<String,Double> params){  return new LinkedList<>();}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  protected void unparsedEntDecl(String name,String pubid,String sysid,String notation) throws SAXException {  mHandDtd.unparsedEntityDecl(name,pubid,sysid,notation);}  }
class C{  public static Map<String,List<String>> readConfigFile(String filename) throws IOException {  Map<String,List<String>> config=new HashMap<>();  LineNumberReader reader=getReaderFromFile(filename);  for (String line; (line=reader.readLine()) != null; ) {    line=line.trim().replaceAll("#.*$","");    if (line.length() == 0)     continue;    if (line.charAt(0) != '[' || line.charAt(line.length() - 1) != ']') {      reader.close();      throw new RuntimeException(String.format("Expected bracketing of option name by '[',']', line: %d label: %s",reader.getLineNumber(),line));    }    String nextArgLine=line;    while (nextArgLine != null) {      String key=line.substring(1,nextArgLine.length() - 1);      nextArgLine=null;      List<String> entries=new ArrayList<String>();      while ((line=reader.readLine()) != null) {        if (line.matches("^\\s*$"))         break;        if (line.startsWith("[")) {          nextArgLine=line;          break;        }        if (line.charAt(0) == '#')         break;        line=line.replaceAll("#.*$","");        String[] fields=line.split("\\s+");        entries.addAll(Arrays.asList(fields));      }      if (!entries.isEmpty())       config.put(key,entries);    }  }  reader.close();  return config;}  }
class C{  public void restore(){  if (typeName == null) {    typeName=wtype.getName();  } else {    wtype=(WeaponType)EquipmentType.get(typeName);  }  if (wtype == null) {    System.err.println("WeaponHandler.restore: could not restore equipment type \"" + typeName + "\"");  }}  }
class C{  public Optional<List<Id>> generateIdBatch(){  return generateIdBatch(MAX_BATCH_SIZE);}  }
class C{  public LambdaCounter(Logger logger,int total,int logFrequency,String message){  this.logger=logger;  this.total=total;  this.logFrequency=logFrequency;  this.message=message;}  }
class C{  public void java_lang_Class_setProtectionDomain0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable protdmn=helper.tempField("<java.lang.Class ProtDmn>");  helper.assign(protdmn,params[0]);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.877 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public PAForUserEnc(DerValue encoding,EncryptionKey key) throws Asn1Exception, KrbException, IOException {  DerValue der=null;  this.key=key;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  PrincipalName tmpName=null;  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    try {      tmpName=new PrincipalName(der.getData().getDerValue(),new Realm("PLACEHOLDER"));    } catch (    RealmException re) {    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x01) {    try {      Realm realm=new Realm(der.getData().getDerValue());      name=new PrincipalName(tmpName.getNameType(),tmpName.getNameStrings(),realm);    } catch (    RealmException re) {      throw new IOException(re);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x02) {  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x03) {    String authPackage=new KerberosString(der.getData().getDerValue()).toString();    if (!authPackage.equalsIgnoreCase(AUTH_PACKAGE)) {      throw new IOException("Incorrect auth-package");    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  protected void dispatchSVGLoadEvent(BridgeContext ctx,ScriptingEnvironment se){  se.loadScripts();  se.dispatchSVGLoadEvent();  if (ctx.isSVG12() && ctx.xblManager != null) {    SVG12BridgeContext ctx12=(SVG12BridgeContext)ctx;    ctx12.addBindingListener();    ctx12.xblManager.startProcessing();  }}  }
class C{  public static void checkIdUniqueness(FacesContext context,UIComponent component,Set<String> componentIds){  boolean uniquenessCheckDisabled=false;  if (context.isProjectStage(ProjectStage.Production)) {    WebConfiguration config=WebConfiguration.getInstance(context.getExternalContext());    uniquenessCheckDisabled=config.isOptionEnabled(WebConfiguration.BooleanWebContextInitParameter.DisableIdUniquenessCheck);  }  if (!uniquenessCheckDisabled) {    for (Iterator<UIComponent> kids=component.getFacetsAndChildren(); kids.hasNext(); ) {      UIComponent kid=kids.next();      String id=kid.getClientId(context);      if (componentIds.add(id)) {        checkIdUniqueness(context,kid,componentIds);      } else {        if (LOGGER.isLoggable(Level.SEVERE)) {          LOGGER.log(Level.SEVERE,"jsf.duplicate_component_id_error",id);          FastStringWriter writer=new FastStringWriter(128);          DebugUtil.simplePrintTree(context.getViewRoot(),id,writer);          LOGGER.severe(writer.toString());        }        String message=MessageUtils.getExceptionMessageString(MessageUtils.DUPLICATE_COMPONENT_ID_ERROR_ID,id);        throw new IllegalStateException(message);      }    }  }}  }
class C{  @Override public String toStringNoWeight(){  return toStringNoWeight(AbstractInstance.s_numericAfterDecimalPoint);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testEngineGenerateCertPathLJava_util_List01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  List<Certificate> list=new ArrayList<Certificate>();  try {    assertNull(certFactorySpi.engineGenerateCertPath(list));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }  try {    certFactorySpi.engineGenerateCertPath((List<? extends Certificate>)null);    fail("expected NullPointerException");  } catch (  NullPointerException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  boolean onSubProperty(OwlClass other){  Set<URI> otherProp=other.getOnProperty();  for (  OwlProperty prop : this.properties) {    Set<URI> intersection=prop.getSuperProperties();    intersection.retainAll(otherProp);    if (!intersection.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public synchronized boolean add(E e,boolean hasNext){  while (mInternalQueue.size() >= mMaxSize && !mClosed) {    notifyAll();    try {      wait(TIMEOUT);    } catch (    InterruptedException e1) {      mClosed=true;      ProgramState.checkAbort();      throw new IllegalStateException("Interrupted but program not aborting?",e1);    }    ProgramState.checkAbort();  }  if (mClosed) {    return true;  }  final boolean wasEmpty=mInternalQueue.isEmpty();  mHasNext=hasNext;  mInternalQueue.add(e);  if (wasEmpty) {    notifyAll();  }  return true;}  }
class C{  public static Object fromIntValue(int value){  return BigInteger.valueOf(value).toByteArray();}  }
class C{  @SuppressWarnings("BusyWait") public void readLock(){  int cnt=readLockEntryCnt.get();  if (cnt > 0 || Thread.currentThread().getId() == writeLockOwner) {    assert state > 0 || state == -1;    readLockEntryCnt.set(cnt + 1);    return;  }  boolean interrupted=false;  while (true) {    int cur=state;    assert cur >= -1;    if (cur == -1 || pendingWLocks > 0) {      try {        Thread.sleep(10);      } catch (      InterruptedException ignored) {        interrupted=true;      }      continue;    }    if (compareAndSet(STATE_OFFS,cur,cur + 1)) {      if (interrupted)       Thread.currentThread().interrupt();      break;    }  }  readLockEntryCnt.set(1);}  }
class C{  private Vector2 toWorldCoordinates(Point point){  double x=(point.getX() - this.canvas.getWidth() / 2.0) / this.scale;  double y=-(point.getY() - this.canvas.getHeight() / 2.0) / this.scale;  return new Vector2(x,y);}  }
class C{  public SetAddressesCartCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public void reset(){  for (int i=0; i < mAnimators.size(); i++) {    mAnimators.get(mAnimators.keyAt(i)).cancel();  }  mAnimators.clear();  mFirstAnimatedPosition=-1;  mLastAnimatedPosition=-1;  mAnimationStartMillis=-1;  mShouldAnimate=true;}  }
class C{  CompletableFuture commitAsync(MemberRc member,String s,int delay){  return CompletableFuture.runAsync(null);}  }
class C{  @RequestMapping(value="/update/{name}",method=RequestMethod.PUT) @ResponseBody public HttpEntity<String> update(@PathVariable(value="name") final String name,@RequestBody final String message){  final StringBuilder sb=new StringBuilder();  String prefix="";  for (  final Alert alert : configuration.getAlerts()) {    if (alert.getName().equals(name)) {      final Pair<Boolean,String> updateStatus=alert.update(message);      if (!updateStatus.getElement1()) {        sb.append(prefix);        prefix=",";        sb.append(updateStatus.getElement2());      }    }  }  final ResponseEntity<String> response;  final String statuses=sb.toString();  if (statuses.isEmpty()) {    response=new ResponseEntity<String>(HttpStatus.OK);  } else {    response=new ResponseEntity<String>(statuses,HttpStatus.BAD_REQUEST);  }  return response;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.037 -0500",hash_original_method="22CFEAA69588357DEEA1E52F95A64CA9",hash_generated_method="50C71A9774937CB4C96DFB7BD77C5D4C") public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public WFG5(int k,int l,int M){  super(k,l,M);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void close(){  if (!closed) {    closed=true;    for (    ArrowBuf arrowBuf : buffers) {      arrowBuf.release();    }  }}  }
class C{  public void update(long n){  uncounted.add(n);}  }
class C{  public void addField(String fieldName,String type,short flags,long value){  short fieldNameIndex=itsConstantPool.addUtf8(fieldName);  short typeIndex=itsConstantPool.addUtf8(type);  ClassFileField field=new ClassFileField(fieldNameIndex,typeIndex,flags);  field.setAttributes(itsConstantPool.addUtf8("ConstantValue"),(short)0,(short)2,itsConstantPool.addConstant(value));  itsFields.add(field);}  }
class C{  public String toString(){  return method.toGenericString();}  }
class C{  public OneStepIteratorForward(int axis){  super(null);  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  protected void sendIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);  }  int newStep=(int)Math.round(intensity * maxDimStep);  if ((newStep < 0) || (newStep > maxDimStep)) {    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);  }  if (newStep == 0) {    if (log.isDebugEnabled()) {      log.debug("intensity " + intensity + " within current step, return");    }    return;  }  X10Sequence out=new X10Sequence();  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);  tc.sendX10Sequence(out,null);  lastOutputStep=newStep;  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ") house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " newStep: "+ newStep);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.725 -0400",hash_original_method="8B71D39574F4373108A5D4807832741B",hash_generated_method="A34E94818810C8365002C7DE63734330") private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  public Vec3 extractForwardVector(Vec3 result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","extractForwardVector","missingResult"));  }  result.x=-this.m[8];  result.y=-this.m[9];  result.z=-this.m[10];  return result;}  }
class C{  public static ClassificationDataSet loadC(File file,double sparseRatio,int vectorLength) throws FileNotFoundException, IOException {  return loadC(new FileReader(file),sparseRatio,vectorLength);}  }
class C{  public CreateTypeInstanceAction(final JFrame owner,final TypeInstanceContainer instanceContainer,final TypeManager typeManager,final Section section){  this(owner,instanceContainer,typeManager,section,null);}  }
class C{  private void init() throws IOException {  initPath();  openThriftReader();}  }
class C{  public void addTriggersIds(Trigger trigger){  this.getTriggersIds().add(trigger.getId());}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  private void startTag(){  tag=new TagLibTag(lib);  insideTag=true;}  }
class C{  @Override public TreeNode nextElement(){  return iterator.next();}  }
class C{  DynamicAABBTreeNode balance(DynamicAABBTreeNode node){  DynamicAABBTreeNode a=node;  if (a.isLeaf() || a.height < 2) {    return a;  }  DynamicAABBTreeNode b=a.left;  DynamicAABBTreeNode c=a.right;  int balance=c.height - b.height;  if (balance > 1) {    DynamicAABBTreeNode f=c.left;    DynamicAABBTreeNode g=c.right;    c.left=a;    c.parent=a.parent;    a.parent=c;    if (c.parent != null) {      if (c.parent.left == a) {        c.parent.left=c;      } else {        c.parent.right=c;      }    } else {      this.root=c;    }    if (f.height > g.height) {      c.right=f;      a.right=g;      g.parent=a;      a.aabb=b.aabb.getUnion(g.aabb);      c.aabb=a.aabb.getUnion(f.aabb);      a.height=1 + Math.max(b.height,g.height);      c.height=1 + Math.max(a.height,f.height);    } else {      c.right=g;      a.right=f;      f.parent=a;      a.aabb=b.aabb.getUnion(f.aabb);      c.aabb=a.aabb.getUnion(g.aabb);      a.height=1 + Math.max(b.height,f.height);      c.height=1 + Math.max(a.height,g.height);    }    return c;  }  if (balance < -1) {    DynamicAABBTreeNode d=b.left;    DynamicAABBTreeNode e=b.right;    b.left=a;    b.parent=a.parent;    a.parent=b;    if (b.parent != null) {      if (b.parent.left == a) {        b.parent.left=b;      } else {        b.parent.right=b;      }    } else {      this.root=b;    }    if (d.height > e.height) {      b.right=d;      a.left=e;      e.parent=a;      a.aabb=c.aabb.getUnion(e.aabb);      b.aabb=a.aabb.getUnion(d.aabb);      a.height=1 + Math.max(c.height,e.height);      b.height=1 + Math.max(a.height,d.height);    } else {      b.right=e;      a.left=d;      d.parent=a;      a.aabb=c.aabb.getUnion(d.aabb);      b.aabb=a.aabb.getUnion(e.aabb);      a.height=1 + Math.max(c.height,d.height);      b.height=1 + Math.max(a.height,e.height);    }    return b;  }  return a;}  }
class C{  public boolean isSuspended(){  return STATE_Suspended.equals(m_state);}  }
class C{  public ServerPowerManagement(){  super();  if (Sage.WINDOWS_OS)   sage.Native.loadLibrary("SageTVWin32"); else   if (Sage.MAC_OS_X)   sage.Native.loadLibrary("Sage");  extendersKeepServerOn=Sage.getBoolean("extender_power_keeps_server_out_of_standby",false);}  }
class C{  @Override public void append(ResultEntry entry){  qualityIndicator.calculate(entry.getPopulation());  writer.print(qualityIndicator.getHypervolume());  writer.print(' ');  writer.print(qualityIndicator.getGenerationalDistance());  writer.print(' ');  writer.print(qualityIndicator.getInvertedGenerationalDistance());  writer.print(' ');  writer.print(qualityIndicator.getSpacing());  writer.print(' ');  writer.print(qualityIndicator.getAdditiveEpsilonIndicator());  writer.print(' ');  writer.print(qualityIndicator.getMaximumParetoFrontError());  writer.println();  numberOfEntries++;}  }
class C{  public DelegatingMethodDeclaration createDelegatingMethodDeclaration(){  DelegatingMethodDeclarationImpl delegatingMethodDeclaration=new DelegatingMethodDeclarationImpl();  return delegatingMethodDeclaration;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=(int)(ImageProvider.getBitmapSize(value) / 1024);  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private static Collection<TCPTransport> allKnownTransports(){  Set<TCPTransport> s;synchronized (localEndpoints) {    s=new HashSet<TCPTransport>(localEndpoints.size());    for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) {      TCPEndpoint ep=epList.getFirst();      s.add(ep.transport);    }  }  return s;}  }
class C{  public static Double sumup(Node node,String expression) throws XPathExpressionException {  final XPathFactory factory=XPathFactory.newInstance();  final XPath xpath=factory.newXPath();  final XPathExpression expr=xpath.compile("sum(" + expression + ')');  return (Double)expr.evaluate(node,XPathConstants.NUMBER);}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/monsters/" + name + ".png";}  }
class C{  public void waitReport(){synchronized (this) {    try {      super.wait(TIMEOUT);    } catch (    InterruptedException e) {    }  }}  }
class C{  public Long addFolderByUserId(String SID,Long userId,Long parentFileExplorerItemId,String folderName,Long room_id,Boolean isOwner,Long externalFilesid,String externalType) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      log.debug("addFolder " + parentFileExplorerItemId);      if (parentFileExplorerItemId == -2 && isOwner) {        return fileExplorerItemDao.add(folderName,"",0L,userId,room_id,userId,true,false,false,"",false,false,externalFilesid,externalType);      } else {        return fileExplorerItemDao.add(folderName,"",parentFileExplorerItemId,null,room_id,userId,true,false,false,"",false,false,externalFilesid,externalType);      }    }  } catch (  Exception err) {    log.error("[addFolderByUserId]",err);  }  return null;}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  @Override public void flush() throws IOException {  flushBits();  out.flush();}  }
class C{  private void updateSessionAndCookie(HttpSession session,HttpServletRequest httpRequest,HttpServletResponse httpResponse,String marketplaceId) throws UnsupportedEncodingException {  session.setAttribute(Constants.REQ_PARAM_MARKETPLACE_ID,marketplaceId);  String cookieMIdValue=ADMStringUtils.isBlank(marketplaceId) ? "" : URLEncoder.encode(marketplaceId,Constants.CHARACTER_ENCODING_UTF8);  int maxAge=-1;  if (ADMStringUtils.isBlank(marketplaceId)) {    maxAge=0;  }  JSFUtils.setCookieValue(httpRequest,httpResponse,Constants.REQ_PARAM_MARKETPLACE_ID,cookieMIdValue,maxAge);}  }
class C{  MethodType asSpreaderType(Class<?> arrayType,int arrayLength){  assert (parameterCount() >= arrayLength);  int spreadPos=ptypes.length - arrayLength;  if (arrayLength == 0)   return this;  if (arrayType == Object[].class) {    if (isGeneric())     return this;    if (spreadPos == 0) {      MethodType res=genericMethodType(arrayLength);      if (rtype != Object.class) {        res=res.changeReturnType(rtype);      }      return res;    }  }  Class<?> elemType=arrayType.getComponentType();  assert (elemType != null);  for (int i=spreadPos; i < ptypes.length; i++) {    if (ptypes[i] != elemType) {      Class<?>[] fixedPtypes=ptypes.clone();      Arrays.fill(fixedPtypes,i,ptypes.length,elemType);      return methodType(rtype,fixedPtypes);    }  }  return this;}  }
class C{  private CIMObjectPath createDeviceGroup(final StorageSystem system,final StorageSystem forProvider,final BlockObject volume,final DbClient dbClient) throws Exception {  return createDeviceGroup(system,forProvider,asList(volume),dbClient);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void executeCharsToContentHandler(XPathContext xctxt,ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException {  if (Arg0IsNodesetExpr()) {    int node=getArg0AsNode(xctxt);    if (DTM.NULL != node) {      DTM dtm=xctxt.getDTM(node);      dtm.dispatchCharactersEvents(node,handler,true);    }  } else {    XObject obj=execute(xctxt);    obj.dispatchCharactersEvents(handler);  }}  }
class C{  public static TrueTypeFont parseFont(ByteBuffer inBuf){  int type=inBuf.getInt();  short numTables=inBuf.getShort();  short searchRange=inBuf.getShort();  short entrySelector=inBuf.getShort();  short rangeShift=inBuf.getShort();  TrueTypeFont font=new TrueTypeFont(type);  parseDirectories(inBuf,numTables,font);  return font;}  }
class C{  void acquireWriteLock(){  this.rwLock.writeLock().lock();}  }
class C{  public boolean isUnique(){  return classId.equals(stem);}  }
class C{  public void addAlliedECMEffects(ECMInfo other){  if (((other.owner == null) || owner.isEnemyOf(other.owner))) {    eccmStrength+=other.eccmStrength;    angelECCMStrength+=other.angelECCMStrength;  } else   if ((other.owner != null) && !owner.isEnemyOf(other.owner)) {    strength+=other.strength;    angelStrength+=other.angelStrength;    isECMNova|=other.isECMNova;  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deleteVolume(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("force") boolean force,@DefaultValue("FULL") @QueryParam("type") String type) throws InternalException {  BulkDeleteParam deleteParam=new BulkDeleteParam();  deleteParam.setIds(Lists.newArrayList(id));  TaskList taskList=deleteVolumes(deleteParam,force,type);  return taskList.getTaskList().get(0);}  }
class C{  @HLEFunction(nid=0xB55249D2,version=150) public boolean sceKernelIsCpuIntrEnable(){  return Interrupts.isInterruptsEnabled();}  }
class C{  protected AbstractRefactoringHistoryResourceMapping(final RefactoringHistory history){  Assert.isNotNull(history);  fRefactoringHistory=history;}  }
class C{  @Override public int compareTo(FirewallRule rule){  return this.priority - rule.priority;}  }
class C{  public List<ProductAssociation> findProductAssociations(final Long productId){  return productAssociationDao.findByNamedQuery("PRODUCT.ASSOCIATIONS",productId);}  }
class C{  @OkCancelResult public static int showOkCancelDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String okText,@NotNull String cancelText,Icon icon,@Nullable DialogWrapper.DoNotAskOption doNotAskOption){  try {    if (canShowMacSheetPanel()) {      int result=MacMessages.getInstance().showYesNoDialog(title,message,okText,cancelText,null,doNotAskOption);      return result == YES ? OK : CANCEL;    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  return showDialog(message,title,new String[]{okText,cancelText},0,icon,doNotAskOption) == 0 ? OK : CANCEL;}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.name+ "\n"+ this.n+ " // <- Total # rows\n";  for (int r=0; r < this.n; r++) {    for (int c=0; c <= r; c++) {      s=s + this.getValue(r,c) + " ";    }    s=s + "\n";  }  return s;}  }
class C{  public int countArray(String[] array){  return array.length;}  }
class C{  private void zoomIn(){  chartView.zoomIn();  zoomControls.setIsZoomInEnabled(chartView.canZoomIn());  zoomControls.setIsZoomOutEnabled(chartView.canZoomOut());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.219 -0400",hash_original_method="217DDC96D1B25C0D1457937D523A3AA4",hash_generated_method="8D3841501153DC8DC4D44C4E93EC71D1") public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public ListFeed(BaseFeed sourceFeed){  super(ListEntry.class,sourceFeed);  getCategories().add(ListEntry.CATEGORY);}  }
class C{  public void lerp(Transform end,double alpha,Transform result){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  result.identity();  result.rotate(a);  result.translate(x,y);}  }
class C{  public ModeledAuthenticatedUser retrieveAuthenticatedUser(AuthenticationProvider authenticationProvider,Credentials credentials) throws GuacamoleException {  String username=credentials.getUsername();  String password=credentials.getPassword();  UserModel userModel=userMapper.selectOne(username);  if (userModel == null)   return null;  if (userModel.isDisabled())   return null;  byte[] hash=encryptionService.createPasswordHash(password,userModel.getPasswordSalt());  if (!Arrays.equals(hash,userModel.getPasswordHash()))   return null;  ModeledUser user=getObjectInstance(null,userModel);  user.setCurrentUser(new ModeledAuthenticatedUser(authenticationProvider,user,credentials));  if (!user.isAccountValid())   throw new GuacamoleClientException("LOGIN.ERROR_NOT_VALID");  if (!user.isAccountAccessible())   throw new GuacamoleClientException("LOGIN.ERROR_NOT_ACCESSIBLE");  if (userModel.isExpired()) {    HttpServletRequest request=credentials.getRequest();    String newPassword=request.getParameter(NEW_PASSWORD_PARAMETER);    String confirmNewPassword=request.getParameter(CONFIRM_NEW_PASSWORD_PARAMETER);    if (newPassword == null || confirmNewPassword == null) {      logger.info("The password of user \"{}\" has expired and must be reset.",username);      throw new GuacamoleInsufficientCredentialsException("LOGIN.INFO_PASSWORD_EXPIRED",EXPIRED_PASSWORD);    }    if (newPassword.equals(credentials.getPassword()))     throw new GuacamoleClientException("LOGIN.ERROR_PASSWORD_SAME");    if (newPassword.isEmpty())     throw new GuacamoleClientException("LOGIN.ERROR_PASSWORD_BLANK");    if (!newPassword.equals(confirmNewPassword))     throw new GuacamoleClientException("LOGIN.ERROR_PASSWORD_MISMATCH");    userModel.setExpired(false);    user.setPassword(newPassword);    userMapper.update(userModel);    logger.info("Expired password of user \"{}\" has been reset.",username);  }  return user.getCurrentUser();}  }
class C{  public boolean supportsCorrelatedSubqueries() throws SQLException {  return true;}  }
class C{  private void addMessage(String message){  if (quality == null && message.trim().startsWith("Available streams:")) {    parseQualities(message);  }  Document doc=messages.getDocument();  try {    doc.insertString(doc.getLength(),message + "\n",null);  } catch (  BadLocationException ex) {    Logger.getLogger(LivestreamerDialog.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final long verticalDHTPosition(final byte[] wordHash,final String urlHash){  return (Distribution.horizontalDHTPosition(wordHash) & partitionMask) | (Distribution.horizontalDHTPosition(ASCII.getBytes(urlHash)) & ~partitionMask);}  }
class C{  public IntListParameter(OptionID optionID){  super(optionID);}  }
class C{  public LocalXSessionFactoryBuilder(DataSource dataSource){  this(dataSource,new PathMatchingResourcePatternResolver());}  }
class C{  public void addPoints(final int points){  this.points+=points;}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void e(String tag,String s,Object... args){  if (LDJSLOG.ERROR >= LOGLEVEL)   Log.e(tag,String.format(s,args));}  }
class C{  void subtract(Interval interval){  subtract(interval.getStart(),interval.getEnd());}  }
class C{  public final String name(){  return m_Name;}  }
class C{  protected void initFinished(){}  }
class C{  public static String uuid(int len){  return uuid(len,CHARS.length);}  }
class C{  public static void writeToIndexOutput(VectorStore objectVectors,FlagConfig flagConfig,IndexOutput outputStream) throws IOException {  outputStream.writeString(generateHeaderString(flagConfig));  Enumeration<ObjectVector> vecEnum=objectVectors.getAllVectors();  while (vecEnum.hasMoreElements()) {    ObjectVector objectVector=vecEnum.nextElement();    outputStream.writeString(objectVector.getObject().toString());    objectVector.getVector().writeToLuceneStream(outputStream);  }  VerbatimLogger.info("finished writing vectors.\n");}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new long[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public ToStringBuilder append(double[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  @Override public void paint(Graphics g){  int a[]=arr;  int y=0;  int deltaY=0, deltaX=0, evenY=0;  Dimension currentSize=getSize();  int currentHeight=currentSize.height;  int currentWidth=currentSize.width;  if (!currentSize.equals(initialSize)) {    evenY=(currentHeight - initialSize.height) % 2;    deltaY=(currentHeight - initialSize.height) / 2;    deltaX=(currentWidth - initialSize.width) / 2;    if (deltaY < 0) {      deltaY=0;      evenY=0;    }    if (deltaX < 0) {      deltaX=0;    }  }  g.setColor(getBackground());  y=currentHeight - deltaY - 1;  for (int i=a.length; --i >= 0; y-=2) {    g.drawLine(deltaX + arr[i],y,currentWidth,y);  }  g.setColor(Color.black);  y=currentHeight - deltaY - 1;  for (int i=a.length; --i >= 0; y-=2) {    g.drawLine(deltaX,y,deltaX + arr[i],y);  }  if (h1 >= 0) {    g.setColor(Color.red);    y=deltaY + evenY + h1 * 2 + 1;    g.drawLine(deltaX,y,deltaX + initialSize.width,y);  }  if (h2 >= 0) {    g.setColor(Color.blue);    y=deltaY + evenY + h2 * 2 + 1;    g.drawLine(deltaX,y,deltaX + initialSize.width,y);  }}  }
class C{  public void error(Object message,Throwable t){}  }
class C{  public StoredIntervalsNode(int left,int right){  super(left,right);}  }
class C{  public static CView createView(final AbstractSQLProvider provider,final INaviModule module,final INaviView view,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02268: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE02269: Module argument can not be null");  Preconditions.checkNotNull(view,"IE02270: View argument can not be null");  Preconditions.checkNotNull(name,"IE02271: Name argument can not be null");  Preconditions.checkState(module.inSameDatabase(provider),"Error: Module is not part of this database");  Preconditions.checkState(view.inSameDatabase(provider),"Error: View is not part of this database");  return createView(provider,module.getConfiguration().getId(),view,name,description,"" + CTableNames.MODULES_TABLE + "","" + CTableNames.MODULE_VIEWS_TABLE + "",new CModuleViewGenerator(provider,module));}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.073 -0500",hash_original_method="03121A7AC3B4E7519E88953F37DA485C",hash_generated_method="E0F9C5B343EA0376178403393DBFABB2") public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public TechnicalServiceMultiSubscriptions(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  private void init(){  Network n=sc.getNetwork();  NetworkFactory nb=(NetworkFactory)n.getFactory();  Node node=null;  Coord coord=new Coord(0.0,0.0);  node=nb.createNode(nid0,coord);  n.addNode(node);  coord=new Coord(100.0,0.0);  node=nb.createNode(nid1,coord);  n.addNode(node);  coord=new Coord(200.0,0.0);  node=nb.createNode(nid2,coord);  n.addNode(node);  coord=new Coord(200.0,100.0);  node=nb.createNode(nid3,coord);  n.addNode(node);  double y=-100.0;  coord=new Coord(200.0,y);  node=nb.createNode(nid4,coord);  n.addNode(node);  Link link0=nb.createLink(id0,n.getNodes().get(nid0),n.getNodes().get(nid1));  link0.setLength(100.1);  link0.setFreespeed(10.0);  link0.setCapacity(7200.0);  link0.setNumberOfLanes(2.0);  n.addLink(link0);  Link link1=nb.createLink(id1,n.getNodes().get(nid1),n.getNodes().get(nid2));  link1.setLength(100.1);  link1.setFreespeed(10.0);  link1.setCapacity(7200.0);  link1.setNumberOfLanes(2.0);  n.addLink(link1);  Link link2=nb.createLink(id2,n.getNodes().get(nid2),n.getNodes().get(nid3));  link2.setLength(100.1);  link2.setFreespeed(10.0);  link2.setCapacity(7200.0);  link2.setNumberOfLanes(2.0);  n.addLink(link2);  Link link3=nb.createLink(id3,n.getNodes().get(nid2),n.getNodes().get(nid4));  link3.setLength(100.1);  link3.setFreespeed(10.0);  link3.setCapacity(7200.0);  link3.setNumberOfLanes(2.0);  n.addLink(link3);  LaneDefinitions11 lanes=new LaneDefinitions11Impl();  LaneDefinitionsFactory11 lb=lanes.getFactory();  LaneData11 lane=lb.createLane(Id.create(id1,Lane.class));  lane.setNumberOfRepresentedLanes(2.0);  lane.setStartsAtMeterFromLinkEnd(50.0);  lane.addToLinkId(id2);  lane.addToLinkId(id3);  LanesToLinkAssignment11 l2l=lb.createLanesToLinkAssignment(id1);  l2l.addLane(lane);  lanes.addLanesToLinkAssignment(l2l);  LaneDefinitionsV11ToV20Conversion.convertTo20(lanes,this.sc.getLanes(),this.sc.getNetwork());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesPm == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  if (dataSet == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new NullPointerException();  }  if (parentDims == null) {    throw new NullPointerException();  }}  }
class C{  public NimbusLookAndFeel(){  super();  defaults=new NimbusDefaults();}  }
class C{  protected <M extends Member>M[] array(M[] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _index=0;    _resetIndex=false;  }  if (BOOL.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Bool();    }  } else   if (SIGNED_8.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Signed8();    }  } else   if (UNSIGNED_8.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Unsigned8();    }  } else   if (SIGNED_16.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Signed16();    }  } else   if (UNSIGNED_16.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Unsigned16();    }  } else   if (SIGNED_32.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Signed32();    }  } else   if (UNSIGNED_32.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Unsigned32();    }  } else   if (SIGNED_64.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Signed64();    }  } else   if (FLOAT_32.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Float32();    }  } else   if (FLOAT_64.isInstance(arrayMember)) {    for (int i=0; i < arrayMember.length; ) {      arrayMember[i++]=(M)this.new Float64();    }  } else {    throw new UnsupportedOperationException("Cannot create member elements, the arrayMember should " + "contain the member instances instead of null");  }  _resetIndex=resetIndexSaved;  return (M[])arrayMember;}  }
class C{  public void debug(IDebugSearch debug){  this.debug=debug;}  }
class C{  public LayerTreeModel(){  this.initialize();}  }
class C{  public boolean forEachKey(TDoubleProcedure procedure){  return forEach(procedure);}  }
class C{  public ControllerPlan(CompilationPlan compPlan,int timeCreated,int prevCMID,double expectedSpeedup,double expectedCompilationTime,double priority){  this.compPlan=compPlan;  this.timeCreated=timeCreated;  this.prevCMID=prevCMID;  this.status=ControllerPlan.UNINITIALIZED;  this.expectedSpeedup=expectedSpeedup;  this.expectedCompilationTime=expectedCompilationTime;  this.priority=priority;}  }
class C{  static public double gamma(double x) throws ArithmeticException {  double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1};  double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0};  double p, z;  int i;  double q=Math.abs(x);  if (q > 33.0) {    if (x < 0.0) {      p=Math.floor(q);      if (p == q)       throw new ArithmeticException("gamma: overflow");      i=(int)p;      z=q - p;      if (z > 0.5) {        p+=1.0;        z=q - p;      }      z=q * Math.sin(Math.PI * z);      if (z == 0.0)       throw new ArithmeticException("gamma: overflow");      z=Math.abs(z);      z=Math.PI / (z * stirlingFormula(q));      return -z;    } else {      return stirlingFormula(x);    }  }  z=1.0;  while (x >= 3.0) {    x-=1.0;    z*=x;  }  while (x < 0.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x > -1.E-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  while (x < 2.0) {    if (x == 0.0) {      throw new ArithmeticException("gamma: singular");    } else     if (x < 1.e-9) {      return (z / ((1.0 + 0.5772156649015329 * x) * x));    }    z/=x;    x+=1.0;  }  if ((x == 2.0) || (x == 3.0))   return z;  x-=2.0;  p=Polynomial.polevl(x,P,6);  q=Polynomial.polevl(x,Q,7);  return z * p / q;}  }
class C{  public static int applyAlphaToColor(int color,float alpha){  return (int)(0xFF * alpha) << 24 | color & 0xFFFFFF;}  }
class C{  public HighlightBuilder noMatchSize(Integer noMatchSize){  this.noMatchSize=noMatchSize;  return this;}  }
class C{  public DefaultConfigurationCapabilityFactory(){  this(null);}  }
class C{  @HLEFunction(nid=0x877F6D66,version=150) public int sceNetAdhocPtpOpen(pspNetMacAddress srcMacAddress,int srcPort,pspNetMacAddress destMacAddress,int destPort,int bufSize,int retryDelay,int retryCount,int unk1){  checkInitialized();  PtpObject ptpObject=getNetworkAdapter().createPtpObject();  ptpObject.setMacAddress(srcMacAddress);  ptpObject.setPort(srcPort);  ptpObject.setDestMacAddress(destMacAddress);  ptpObject.setDestPort(destPort);  ptpObject.setBufSize(bufSize);  ptpObject.setRetryDelay(retryDelay);  ptpObject.setRetryCount(retryCount);  int result=ptpObject.open();  if (result != 0) {    ptpObject.delete();    return result;  }  ptpObjects.put(ptpObject.getId(),ptpObject);  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocPtpOpen: returning id=0x%X",ptpObject.getId()));  }  return ptpObject.getId();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String extractFingerprint(SdpParser parser,MediaDescription mediaDescription){  String fingerprint=null;  if (parser != null && parser.getSessionAttribute(FINGERPRINT) != null) {    fingerprint=new String(parser.getSessionAttribute(FINGERPRINT).getValue());  }  if (mediaDescription != null && mediaDescription.getMediaAttribute(FINGERPRINT) != null) {    fingerprint=new String(mediaDescription.getMediaAttribute(FINGERPRINT).getValue());  }  return fingerprint;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYTextAnnotation)) {    return false;  }  XYTextAnnotation that=(XYTextAnnotation)obj;  if (!this.text.equals(that.text)) {    return false;  }  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  if (!this.font.equals(that.font)) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!this.rotationAnchor.equals(that.rotationAnchor)) {    return false;  }  if (this.rotationAngle != that.rotationAngle) {    return false;  }  if (!this.textAnchor.equals(that.textAnchor)) {    return false;  }  if (this.outlineVisible != that.outlineVisible) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!(this.outlineStroke.equals(that.outlineStroke))) {    return false;  }  return super.equals(obj);}  }
class C{  protected String decorate(String aName){  return aName;}  }
class C{  public static void registerDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener){  getFileDownloadManager().registerDownloadFileChangeListener(onDownloadFileChangeListener,null);}  }
class C{  @Override public <T extends DataObject>Iterator<T> findByLabel(Class<T> clazz,String label){  return join(clazz,"one","label",label).go().iterator("one");}  }
class C{  @VisibleForTesting protected boolean isAnotherAccountInUseAlready(Organisation organisation){  for (  Resource resource : resourceManager.list()) {    DOI doi=resource.getDoi();    Organisation fromDisk=registrationManager.getFromDisk(organisation.getKey().toString());    if (doi != null && fromDisk != null) {      if (organisation.getDoiRegistrationAgency() != null && fromDisk.getDoiRegistrationAgency() != null) {        if (!organisation.getDoiRegistrationAgency().equals(fromDisk.getDoiRegistrationAgency())) {          String msg=getText("admin.organisation.doiAccount.differentTypeInUse",new String[]{fromDisk.getDoiRegistrationAgency().toString().toLowerCase(),doi.toString()});          LOG.error(msg);          addActionError(msg);          return true;        }      }    }  }  return false;}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  public boolean isBoolean(){  return value instanceof Boolean;}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  possiblyUpdateCurrentLineHighlightLocation();  if (e != null && e.getDot() != e.getMark()) {    cutAction.setEnabled(true);    copyAction.setEnabled(true);  } else   if (cutAction.isEnabled()) {    cutAction.setEnabled(false);    copyAction.setEnabled(false);  }  super.fireCaretUpdate(e);}  }
class C{  protected Email(){}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(com.android.volley.VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static MapDialogFragment newInstance(ShippingDialogFragment fragment,Shipping shipping,Branch branch){  MapDialogFragment frag=new MapDialogFragment();  frag.branch=branch;  frag.shipping=shipping;  frag.shippingDialogFragment=fragment;  return frag;}  }
class C{  static String listToCommaDelimitedString(List<String> list){  StringBuilder result=new StringBuilder();  for (  String str : list) {    if (result.length() > 0) {      result.append(",");    }    result.append(str);  }  return result.toString();}  }
class C{  protected XML appendChild(Node newNode){  node.appendChild(newNode);  XML newbie=new XML(this,newNode);  if (children != null) {    children=(XML[])PApplet.concat(children,new XML[]{newbie});  }  return newbie;}  }
class C{  @Deprecated public static boolean compareByteBuffers(byte[] buf1,byte[] buf2){  if (buf1.length != buf2.length) {    return false;  }  for (int i=0; i < buf1.length; i++) {    if (buf1[i] != buf2[i]) {      return false;    }  }  return true;}  }
class C{  public int requireSetFlags(){  return mRequireSetFlags;}  }
class C{  boolean impliesMechanism(Oid oid){  return (this.oid == null || this.oid.equals(oid));}  }
class C{  public CompiereButtonListener(AbstractButton b){  super(b);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  public Column key(String key){  this.key=key;  return this;}  }
class C{  public void attachTunnel(GuacamoleTunnel tunnel){}  }
class C{  @Override public InetSocketAddress ipLocal(){  SocketChannel s=_channel;  if (s != null) {    try {      return (InetSocketAddress)s.getLocalAddress();    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    return null;  }}  }
class C{  boolean hasOnlyDeactivatedHistory(){  return (billingInput.getSubscriptionHistoryEntries().size() == 1 && (billingInput.getSubscriptionHistoryEntries().get(0).getStatus() == SubscriptionStatus.DEACTIVATED || billingInput.getSubscriptionHistoryEntries().get(0).getStatus() == SubscriptionStatus.EXPIRED || billingInput.getSubscriptionHistoryEntries().get(0).getStatus().isSuspendedOrSuspendedUpd()));}  }
class C{  public SetMonitoringModeResponse clone(){  SetMonitoringModeResponse result=new SetMonitoringModeResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  try {    if (!configMap.containsKey(qName)) {      skipCharacters=false;      writer.newLine();      writer.write("<" + qName);      for (int i=0; i < attributes.getLength(); i++) {        writer.write(" " + attributes.getQName(i) + "=\""+ attributes.getValue(i)+ "\"");      }      writer.write(">");    } else {      skipCharacters=true;    }  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  private String generateStepIdForDependentCallDuringRollback(){  return UUID.randomUUID().toString();}  }
class C{  private void addListeners(){  for (  RegionStatus region : regions) {    region.addListeners();  }}  }
class C{  public static Transform makeIdentity(){  Transform out=new Transform(null);  out.type=TYPE_IDENTITY;  return out;}  }
class C{  public cudaTextureObject(){}  }
class C{  private void moveCursorUp(int lines){}  }
class C{  public void fill(int fromIndex,int toIndex,byte val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  public static void saveBamIndex(final InputStream bam,final OutputStream bamIndex) throws IOException, UnindexableDataException {  writeIndex(createBamIndex(bam),bamIndex);}  }
class C{  private Concierge(){}  }
class C{  protected void updateGenerateButton(){  if (namesByTypes.isEmpty()) {    view.disableGenerateButton();    view.disableProgressOnGenerateButton();  } else {    view.enableGenerateButton();  }}  }
class C{  public TvShowRenameTask(List<TvShow> tvShowsToRename,List<TvShowEpisode> episodesToRename,boolean renameRootFolder){  super(BUNDLE.getString("tvshow.rename"));  if (tvShowsToRename != null) {    this.tvShowsToRename.addAll(tvShowsToRename);  }  if (episodesToRename != null) {    this.episodesToRename.addAll(episodesToRename);  }  this.renameRoot=renameRootFolder;}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  int numOfPixels=0;  BufferedImage image=null;  LSBOutputStream lsbOS=null;  try {    if (cover == null) {      numOfPixels=(int)(LSBDataHeader.getMaxHeaderSize() * 8 / 3.0);      numOfPixels+=(int)(msg.length * 8 / (3.0 * ((LSBConfig)this.config).getMaxBitsUsedPerChannel()));      image=ImageUtil.generateRandomImage(numOfPixels);    } else {      image=ImageUtil.byteArrayToImage(cover,coverFileName);    }    lsbOS=new LSBOutputStream(image,msg.length,msgFileName,this.config);    lsbOS.write(msg);    lsbOS.close();    return ImageUtil.imageToByteArray(lsbOS.getImage(),stegoFileName,this);  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public int[] execute(){  reduce();  computeInitialFeasibleSolution();  greedyMatch();  int w=fetchUnmatchedWorker();  while (w < dim) {    initializePhase(w);    executePhase();    w=fetchUnmatchedWorker();  }  int[] result=Arrays.copyOf(matchJobByWorker,rows);  for (w=0; w < result.length; w++) {    if (result[w] >= cols) {      result[w]=-1;    }  }  return result;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.pieIndex);  result=HashUtilities.hashCode(result,this.sectionIndex);  return result;}  }
class C{  private boolean isInThumb(int x,int y){  Dimension size=getSize();  int thumbX;  int thumbY;  int thumbWidth;  int thumbHeight;  if (getBasicSplitPaneUI().getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {    int center=size.width / 2;    thumbX=center - hThumbWidth / 2;    thumbY=hThumbOffset;    thumbWidth=hThumbWidth;    thumbHeight=hThumbHeight;  } else {    int center=size.height / 2;    thumbX=size.width - vThumbOffset;    thumbY=size.height / 2 - vThumbHeight / 2;    thumbWidth=vThumbWidth;    thumbHeight=vThumbHeight;  }  return (x >= thumbX && x < (thumbX + thumbWidth) && y >= thumbY && y < (thumbY + thumbHeight));}  }
class C{  public static float convertPixelsToDp(float px){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertPixelsToDp(...). Otherwise conversion does not take place.");    return px;  }  DisplayMetrics metrics=mMetrics;  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  public static Matcher<BindingSet> binds(String name,String value){  if (value.startsWith("P")) {    value=WikibaseUris.getURISystem().property(PropertyType.CLAIM) + value;  }  return new BindsMatcher<URI>(name,equalTo(uri(value)));}  }
class C{  protected void restoreState(){  updateSiteModel=true;  partialBufferHelper.restoreState();  substitutionModelDelegate.restoreState();  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.restoreState();    int[] tmp=storedScaleBufferIndices;    storedScaleBufferIndices=scaleBufferIndices;    scaleBufferIndices=tmp;  }  updateRestrictedNodePartials=true;  super.restoreState();}  }
class C{  @TargetApi(8) @Override public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  final String packageName=this.cordova.getActivity().getPackageName();  final PackageManager pm=this.cordova.getActivity().getPackageManager();  ApplicationInfo appInfo;  try {    appInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    if ((appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {      handler.proceed();      return;    } else {      super.onReceivedSslError(view,handler,error);    }  } catch (  NameNotFoundException e) {    super.onReceivedSslError(view,handler,error);  }}  }
class C{  private void findViews(){  this.etNumber=(EditText)findViewById(R.id.etNumber);  this.optColombian=(RadioButton)findViewById(R.id.optColombian);  this.optExpresso=(RadioButton)findViewById(R.id.optExpresso);  this.optDecaf=(RadioButton)findViewById(R.id.optDecaf);  this.chkCream=(CheckBox)findViewById(R.id.chkCream);  this.chkSugar=(CheckBox)findViewById(R.id.chkSugar);  this.btnCancel=(Button)findViewById(R.id.btnCancel);  this.btnOrder=(Button)findViewById(R.id.btnOrder);}  }
class C{  public static void LDC_W(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC_W();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TVARIABLE__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();case TypesPackage.TVARIABLE__ANNOTATIONS:return getAnnotations();case TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER:return getDeclaredTypeAccessModifier();case TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME:return isDeclaredProvidedByRuntime();case TypesPackage.TVARIABLE__TYPE_REF:return getTypeRef();case TypesPackage.TVARIABLE__CONST:return isConst();case TypesPackage.TVARIABLE__EXTERNAL:return isExternal();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Set<Map.Entry<K,V>> entrySet(){  Set<Map.Entry<K,V>> es=entrySet;  return (es != null ? es : (entrySet=new EntrySet()));}  }
class C{  public final void testGetType01(){  CRL crl=new MyCRL("TEST_TYPE");  assertEquals("TEST_TYPE",crl.getType());}  }
class C{  public boolean isAddressSettable(){  return addressSettable;}  }
class C{  private void initFromAuthHeader(String authHeader){  this.authHeader=authHeader;  if (authHeader == null)   throw new NullPointerException("No authentication header information");  Matcher authMatcher=SCHEME_PATTERN.matcher(authHeader);  if (!authMatcher.matches()) {    throw new IllegalStateException("Unable to parse auth header: " + authHeader);  }  scheme=authMatcher.group(1);  if (authMatcher.groupCount() > 1) {    Matcher paramMatcher=PARAM_PATTERN.matcher(authMatcher.group(2));    while (paramMatcher.find()) {      String value=paramMatcher.group(2);      if (value == null) {        value=paramMatcher.group(3);      }      parameters.put(paramMatcher.group(1),value);    }  }}  }
class C{  public DependencyVisitor(){  super(Opcodes.ASM4);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:26.979 -0500",hash_original_method="25B57E3869C6FCC0565FBD24EEAB9FA0",hash_generated_method="D54276E98CE38A3B15A1D16585CD8968") public void stop(){  if (mAudio != null) {    mAudio.reset();    mAudio.release();    mAudio=null;  }}  }
class C{  public static <T>Set<T> asSynchronized(Set<T> self){  return Collections.synchronizedSet(self);}  }
class C{  public static byte[] readFile(File file) throws IOException {  FileInputStream fis=new FileInputStream(file);  try {    long size=file.length();    if (size > Integer.MAX_VALUE)     throw new IOException("File too big");    int len=(int)size;    byte data[]=new byte[len];    int pos=0;    while (pos < size) {      int read=fis.read(data,pos,len - pos);      pos+=read;    }    return data;  }  finally {    fis.close();  }}  }
class C{  public void runTest() throws Throwable {  java.util.List features=new java.util.ArrayList();  features.add("Core");  features.add("XML");  features.add("HTML");  features.add("Views");  features.add("StyleSheets");  features.add("CSS");  features.add("CSS2");  features.add("Events");  features.add("UIEvents");  features.add("MouseEvents");  features.add("MutationEvents");  features.add("HTMLEvents");  features.add("Range");  features.add("Traversal");  features.add("bogus.bogus.bogus");  Document doc;  Node rootNode;  String featureElement;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core","2.0");  assertTrue("Core2",state);  for (int indexN10078=0; indexN10078 < features.size(); indexN10078++) {    featureElement=(String)features.get(indexN10078);    state=rootNode.isSupported(featureElement,"1.0");  }  for (int indexN10083=0; indexN10083 < features.size(); indexN10083++) {    featureElement=(String)features.get(indexN10083);    state=rootNode.isSupported(featureElement,"2.0");  }}  }
class C{  static Initializer of(){  return new InitializerImpl();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isSetI32_thing(){  return EncodingUtils.testBit(__isset_bitfield,__I32_THING_ISSET_ID);}  }
class C{  public synchronized void requestGlobalEmotes(boolean forcedUpdate){  request(Type.GLOBAL,null,forcedUpdate);  requestFeatureFridayEmotes(forcedUpdate);}  }
class C{  @PostConstruct public void init(){  Iterator<ValidatorFactory> iterator=validatorFactoryInstance.iterator();  if (iterator.hasNext()) {    this.validatorFactory=iterator.next();  } else {    log.warning("Creating a ValidatorFactory because the container didn't provide one!");    this.validatorFactory=Validation.buildDefaultValidatorFactory();  }}  }
class C{  public boolean hasObjects(){  return this.intersectingObjects != null && !this.intersectingObjects.isEmpty();}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  private void flowInto(SuperBlock sb){  if (sb.merge(locals,localsTop,stack,stackTop,itsConstantPool)) {    addToWorkList(sb);  }}  }
class C{  GitLogParser(Project project,GitLogOption... options){  this(project,NameStatus.NONE,options);}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sampleSize < 1) {    throw new IllegalStateException("Sample size < 1: " + sampleSize);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void focusGained(FocusEvent e){  comboBox.repaint();}  }
class C{  public static void convertToGnuStepASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsGnuStepASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsGnuStepASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  public Wine runBackground(File executableToRun,List<String> arguments) throws ScriptFailureException {  runBackground(executableToRun,arguments,null);  return this;}  }
class C{  private static void insertEdgeInsn(Region region){  List<IContainer> subBlocks=region.getSubBlocks();  if (subBlocks.isEmpty()) {    return;  }  IContainer last=subBlocks.get(subBlocks.size() - 1);  List<EdgeInsnAttr> edgeInsnAttrs=last.getAll(AType.EDGE_INSN);  if (edgeInsnAttrs.isEmpty()) {    return;  }  EdgeInsnAttr insnAttr=edgeInsnAttrs.get(0);  if (!insnAttr.getStart().equals(last)) {    return;  }  List<InsnNode> insns=Collections.singletonList(insnAttr.getInsn());  region.add(new InsnContainer(insns));}  }
class C{  public PipelineManagerServlet(AbstractCpeManager<BaleenPipeline> manager){  super("pipelines",manager,PipelineManagerServlet.class);}  }
class C{  public void selectSavedQueries(final HTTPRepository repository,final String userName,final TupleResultBuilder builder) throws RepositoryException, MalformedQueryException, QueryEvaluationException, QueryResultHandlerException {  final QueryStringBuilder select=new QueryStringBuilder(SELECT);  select.replaceQuote(USER_NAME,userName);  select.replaceURI(REPOSITORY,repository.getRepositoryURL());  final RepositoryConnection connection=this.queries.getConnection();  try {    EVAL.evaluateTupleQuery(builder,connection.prepareTupleQuery(QueryLanguage.SPARQL,select.toString()));  }  finally {    connection.close();  }}  }
class C{  @SuppressWarnings({"TooBroadScope","AssertWithSideEffects"}) private int freeSpace(int hash,short order,long qAddr){  assert lru != null;  byte[] keyBytes=null;  byte[] valBytes=null;  int relSize=0;  long relAddr=0;  long binAddr=writeLock(hash);  try {    long addr=lru.entry(order,qAddr);    if (addr != 0) {      long first=Bin.first(binAddr,mem);      if (first != 0) {        long prev=0;        long cur=first;        while (cur != addr && cur != 0) {          prev=cur;          cur=Entry.nextAddress(cur,mem);        }        if (cur != 0) {          long qAddr0=Entry.queueAddress(cur,mem);          assert qAddr == qAddr0 : "Queue node address mismatch " + "[qAddr=" + qAddr + ", entryQueueAddr="+ qAddr+ ']';          if (evictLsnr != null) {            keyBytes=Entry.readKeyBytes(cur,mem);            int keyLen=Entry.readKeyLength(cur,mem);            int valLen=Entry.readValueLength(cur,mem);            valBytes=mem.readBytes(cur + HEADER_SIZE + keyLen,valLen);          }          if (rmvEvicted) {            long a;            assert qAddr == (a=Entry.queueAddress(cur,mem)) : "Queue node address mismatch " + "[qAddr=" + qAddr + ", entryQueueAddr="+ a+ ']';            long next=Entry.nextAddress(cur,mem);            if (prev != 0)             Entry.nextAddress(prev,next,mem); else {              if (next == 0)               Bin.clear(binAddr,mem); else               Bin.first(binAddr,next,mem);            }            relSize=Entry.size(cur,mem);            relAddr=cur;            cnt--;            totalCnt.decrement();          } else {            boolean clear=Entry.clearQueueAddress(cur,qAddr,mem);            assert clear;            relSize=Entry.size(cur,mem);          }        }      }    }    lru.poll(qAddr);  }  finally {    writeUnlock();    mem.release(relAddr,relSize);  }  if (keyBytes != null) {    assert evictLsnr != null;    evictLsnr.onEvict(part,hash,keyBytes,valBytes);  }  return relSize;}  }
class C{  @Override public boolean remove(Object o){  boolean result;  result=m_Root.remove(((String)o) + TrieNode.STOP);  m_RecalcHashCode=result;  return result;}  }
class C{  protected boolean isValidDomain(String domain){  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);  if (ipDomainMatcher.matches()) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    return inetAddressValidator.isValid(ipDomainMatcher.group(1));  }  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void continueWithRoutableNetwork(){  checkNodeAttributes();  checkLinkAttributes();  BoundingBox bbox=BoundingBox.createBoundingBox(this.scenario.getNetwork());  double resolution=100;  ZoneLayer<Id<Zone>> measuringPoints=NetworkAnalyzer.createGridLayerByGridSizeByNetwork(resolution,bbox.getBoundingBox());  this.freeSpeedGrid=new SpatialGrid(bbox.getXMin(),bbox.getYMin(),bbox.getXMax(),bbox.getYMax(),resolution,Double.NaN);  MutableScenario sc=(MutableScenario)this.scenario;  new AccessibilityCalc(measuringPoints,freeSpeedGrid,sc,envelope).runAccessibilityComputation();}  }
class C{  public void writeFloatArray(float[] array,boolean append){  try {    DataOutput dos;    if (bigEndian) {      dos=new DataOutputStream(stream);    } else {      dos=new LEDataOutputStream(stream);    }    for (int i=0; i < array.length; i++) {      dos.writeFloat(array[i]);    }    stream.close();  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unwritable : " + e.toString());  }}  }
class C{  public boolean matches(final String gateId){  final String[] info=getInfoString().split(";");  final long expirationTime=Long.parseLong(info[1]);  return info[0].equals(gateId) && expirationTime > System.currentTimeMillis();}  }
class C{  public void addStarConstraint(IStarConstraint<ISPO> constraint){  starConstraints.add(constraint);}  }
class C{  public synchronized void store(String fileName) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  store(out,null);  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  InputStreamReader reader=new InputStreamReader(in,"ISO8859-1");  LineNumberReader r=new LineNumberReader(reader);  Writer w;  try {    w=new OutputStreamWriter(FileUtils.newOutputStream(fileName,false));  } catch (  Exception e) {    throw new IOException(e.toString(),e);  }  PrintWriter writer=new PrintWriter(new BufferedWriter(w));  while (true) {    String line=r.readLine();    if (line == null) {      break;    }    if (!line.startsWith("#")) {      writer.print(line + "\n");    }  }  writer.close();}  }
class C{  @SuppressWarnings("unchecked") @ValidationErrorPage(value=INDEX) @Action(value="/reports/arrearRegisterReport-generateArrearReport") public String generateArrearReport(){  final ReportInfo reportInfo=new ReportInfo();  propertyWiseInfoList=new ArrayList<PropertyWiseArrearInfo>();  String strZoneNum=null, strWardNum=null, strBlockNum=null, strLocalityNum=null, strMunicipal=null, strDistrict=null;  if ((localityId == null || localityId == -1) && zoneId != null && zoneId != -1)   strZoneNum=boundaryService.getBoundaryById(zoneId).getName(); else   if (localityId != null && localityId != -1) {    strLocalityNum=boundaryService.getBoundaryById(localityId).getName();    if (zoneId != null && zoneId != -1)     strZoneNum=boundaryService.getBoundaryById(zoneId).getName();  }  if (wardId != null && wardId != -1)   strWardNum=boundaryService.getBoundaryById(wardId).getName();  if (areaId != null && areaId != -1)   strBlockNum=boundaryService.getBoundaryById(areaId).getName();  strMunicipal=getSession().get("citymunicipalityname").toString();  strDistrict=getSession().get("districtName").toString();  strDistrict=strDistrict.substring(0,1) + strDistrict.substring(1,strDistrict.length()).toLowerCase();  final List<PropertyMaterlizeView> propertyViewList=propertyTaxUtil.prepareQueryforArrearRegisterReport(zoneId,wardId,areaId,localityId);  if (LOGGER.isDebugEnabled())   LOGGER.debug("PropertyMaterlizeView List Size" + propertyViewList.size());  for (  final PropertyMaterlizeView propMatView : propertyViewList)   if (propMatView.getInstDmdColl().size() == 1) {    final InstDmdCollMaterializeView currIDCMatView=propMatView.getInstDmdColl().iterator().next();    final PropertyWiseArrearInfo propertyWiseInfo=preparePropertyWiseInfo(currIDCMatView);    if (propertyWiseInfo != null)     propertyWiseInfoList.add(propertyWiseInfo);  } else {    final List<InstDmdCollMaterializeView> idcList=new ArrayList<InstDmdCollMaterializeView>(propMatView.getInstDmdColl());    final List unitList=new ArrayList();    PropertyWiseArrearInfo propertyWiseInfoTotal=null;    for (    final InstDmdCollMaterializeView instlDmdColMatView : idcList) {      final PropertyWiseArrearInfo propertyWiseInfo=preparePropertyWiseInfo(instlDmdColMatView);      if (propertyWiseInfo != null) {        if (unitList.size() == 0) {          unitList.add(propertyWiseInfo.getArrearInstallmentDesc());          propertyWiseInfoTotal=propertyWiseInfo;        } else         if (unitList.contains(propertyWiseInfo.getArrearInstallmentDesc()))         propertyWiseInfoTotal=addPropertyWiseInfo(propertyWiseInfoTotal,propertyWiseInfo); else         if (!unitList.contains(propertyWiseInfo.getArrearInstallmentDesc())) {          propertyWiseInfoList.add(propertyWiseInfoTotal);          unitList.add(propertyWiseInfo.getArrearInstallmentDesc());          propertyWiseInfoTotal=propertyWiseInfo;          propertyWiseInfoTotal.setIndexNumber("");          propertyWiseInfoTotal.setOwnerName("");          propertyWiseInfoTotal.setHouseNo("");        }      } else       propertyWiseInfoList.add(propertyWiseInfoTotal);    }  }  reportInfo.setZoneNo(strZoneNum);  reportInfo.setWardNo(strWardNum);  reportInfo.setBlockNo(strBlockNum);  reportInfo.setLocalityNo(strLocalityNum);  reportInfo.setMunicipal(strMunicipal);  reportInfo.setDistrict(strDistrict);  reportInfo.setPropertyWiseArrearInfoList(propertyWiseInfoList);  setDataSourceType(ReportDataSourceType.JAVABEAN);  setReportData(reportInfo);  super.report();  return "generate";}  }
class C{  public AddressMap(){  map=new HashMap<Integer,Integer>();}  }
class C{  public MWFProcess startWait(ProcessInfo pi){  final int SLEEP=500;  final int MAXLOOPS=30;  MWFProcess process=start(pi,pi.getTransactionName());  if (process == null)   return null;  Thread.yield();  StateEngine state=process.getState();  int loops=0;  while (!state.isClosed() && !state.isSuspended()) {    if (loops > MAXLOOPS) {      log.warning("Timeout after sec " + ((SLEEP * MAXLOOPS) / 1000));      pi.setSummary(Msg.getMsg(getCtx(),"ProcessRunning"));      pi.setIsTimeout(true);      return process;    }    try {      Thread.sleep(SLEEP);      loops++;    } catch (    InterruptedException e) {      log.log(Level.SEVERE,"startWait interrupted",e);      pi.setSummary("Interrupted");      return process;    }    Thread.yield();    state=process.getState();  }  String summary=process.getProcessMsg();  if (summary == null || summary.trim().length() == 0)   summary=state.toString();  pi.setSummary(summary,state.isTerminated() || state.isAborted());  log.fine(summary);  return process;}  }
class C{  public void stopAndRetainRecording(File destination){  super.stop();  try {    Files.move(getRecordingPath(),destination.toPath(),StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException e) {    throw new RuntimeException("Could not move recording file from " + getRecordingPath() + " to "+ destination,e);  }}  }
class C{  public void quadTo(double x1,double y1,double x2,double y2){  if (size() == 0) {    throw new IllegalPathStateException("quadTo only allowed when not empty");  }  add(new Node(C1_MASK,x2,y2,x1,y1,x2,y2));}  }
class C{  @Override public final long lastExecution(){  return lastExecution;}  }
class C{  public Boolean alternateIntents(){  return alternateIntents;}  }
class C{  private AnnotationNode visitAnnotation(AnnotationNode unvisited){  ErrorCollector errorCollector=new ErrorCollector(this.source.getConfiguration());  AnnotationVisitor visitor=new AnnotationVisitor(this.source,errorCollector);  AnnotationNode visited=visitor.visit(unvisited);  this.source.getErrorCollector().addCollectorContents(errorCollector);  return visited;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void add(X509Certificate x509certificate){  this.add(new SingleCertificateResolver(x509certificate));}  }
class C{  public JsonObjectRequest(String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public IMultimediaMessagingSession initiateMessagingSession2(String serviceId,ContactId contact,String[] acceptTypes,String[] acceptWrappedTypes) throws RemoteException {  if (TextUtils.isEmpty(serviceId)) {    throw new ServerApiIllegalArgumentException("serviceId must not be null or empty!");  }  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Initiate a multimedia messaging session with " + contact);  }  ServerApiUtils.testImsExtension(serviceId);  try {    String featureTag=FeatureTags.FEATURE_RCSE + "=\"" + FeatureTags.FEATURE_RCSE_IARI_EXTENSION+ "."+ serviceId+ "\"";    final GenericSipMsrpSession session=mSipService.createMsrpSession(contact,featureTag,acceptTypes,acceptWrappedTypes);    MultimediaMessagingSessionImpl multiMediaMessaging=new MultimediaMessagingSessionImpl(session.getSessionID(),mMultimediaMessagingSessionEventBroadcaster,mSipService,this,Direction.OUTGOING,contact,serviceId,State.INITIATING);    session.addListener(multiMediaMessaging);    addMultimediaMessaging(multiMediaMessaging);    session.startSession();    return multiMediaMessaging;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public void testEncode(){  assertTrue("encode failed",Arrays.equals(usernameAttribute.encode(),attributeBinValue));}  }
class C{  public PurpleDragon(final Player owner){  super();  setOwner(owner);  setUp();  setRPClass("purple_dragon");  put("type","purple_dragon");  if (owner != null) {    owner.getZone().add(this);    owner.setPet(this);  }  update();}  }
class C{  public static void destroyAll(){  Collection svcs=Collections.EMPTY_SET;synchronized (services) {    svcs=new HashSet(services.values());  }  for (Iterator iter=svcs.iterator(); iter.hasNext(); ) {    DLockService svc=(DLockService)iter.next();    try {      svc.destroyAndRemove();    } catch (    CancelException e) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"destroyAndRemove of {} terminated due to cancellation: ",svc,e);      }    }catch (    RuntimeException e) {      throw e;    }  }}  }
class C{  public void check(){  if (!hasAnimVal) {    if (pathSegs == null) {      pathSegs=new BaseSVGPathSegList();    }    pathSegs.revalidate();    if (pathSegs.missing) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MISSING,null);    }    if (pathSegs.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,pathSegs.getValueAsString());    }  }}  }
class C{  public void visitPreInsn(int opcode,int location){  if (mv != null) {    mv.visitPreInsn(opcode,location);  }}  }
class C{  public LetExpression(Expression body,boolean isGuard){  super();  this.body=body;  this.binders=new LinkedHashMap<>();  this.isGuard=isGuard;}  }
class C{  void allowAccept(boolean allow){  acceptButton.setEnabled(allow);}  }
class C{  private TaskList changeVirtualArrayForVolumes(List<URI> volumeURIs,URI tgtVarrayURI) throws InternalException, APIException {  TaskList taskList=new TaskList();  String taskId=UUID.randomUUID().toString();  VirtualArray tgtVarray=null;  BlockConsistencyGroup cg=null;  BlockServiceApi blockServiceAPI=null;  List<Volume> volumes=new ArrayList<Volume>();  List<Volume> cgVolumes=new ArrayList<Volume>();  boolean foundVolumeNotInCG=false;  for (  URI volumeURI : volumeURIs) {    ArgValidator.checkFieldUriType(volumeURI,Volume.class,"volume");    Volume volume=queryVolumeResource(volumeURI);    ArgValidator.checkEntity(volume,volumeURI,false);    _log.info("Found volume {}",volumeURI);    BlockServiceUtils.validateNotAnInternalBlockObject(volume,false);    VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VARRAY,_dbClient);    URI projectURI=volume.getProject().getURI();    Project project=_permissionsHelper.getObjectById(projectURI,Project.class);    ArgValidator.checkEntity(project,projectURI,false);    _log.info("Found volume project {}",projectURI);    BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);    _log.info("User is authorized for volume's project");    if (volume.getVirtualArray().equals(tgtVarrayURI)) {      throw APIException.badRequests.currentAndRequestedVArrayAreTheSame();    }    if (tgtVarray == null) {      tgtVarray=BlockServiceUtils.verifyVirtualArrayForRequest(project,tgtVarrayURI,uriInfo,_permissionsHelper,_dbClient);      _log.info("Found new VirtualArray {}",tgtVarrayURI);    }    checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));    blockServiceAPI=getBlockServiceImpl(volume);    blockServiceAPI.verifyVarrayChangeSupportedForVolumeAndVarray(volume,tgtVarray);    _log.info("Virtual array change is supported for requested volume and varray");    URI cgURI=volume.getConsistencyGroup();    if ((cg == null) && (!foundVolumeNotInCG)) {      if (!isNullURI(cgURI)) {        cg=_permissionsHelper.getObjectById(cgURI,BlockConsistencyGroup.class);        _log.info("All volumes should be in CG {}:{}",cgURI,cg.getLabel());        cgVolumes.addAll(blockServiceAPI.getActiveCGVolumes(cg));      } else {        _log.info("No volumes should be in CGs");        foundVolumeNotInCG=true;      }    } else     if (((cg != null) && (isNullURI(cgURI))) || ((foundVolumeNotInCG) && (!isNullURI(cgURI)))) {      if (cg != null) {        _log.error("Volume {}:{} is not in the CG",volumeURI,volume.getLabel());      } else {        _log.error("Volume {}:{} is in CG {}",new Object[]{volumeURI,volume.getLabel(),cgURI});      }      throw APIException.badRequests.mixedVolumesinCGForVarrayChange();    }    volumes.add(volume);  }  if (cg != null) {    _log.info("Verify all volumes in CG {}:{}",cg.getId(),cg.getLabel());    URI storageId=cg.getStorageController();    if (!NullColumnValueGetter.isNullURI(storageId)) {      StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageId);      if (DiscoveredDataObject.Type.vplex.name().equals(storage.getSystemType())) {        if (!VPlexUtil.verifyVolumesInCG(volumes,cgVolumes,_dbClient)) {          throw APIException.badRequests.cantChangeVarrayNotAllCGVolumes();        }      } else {        verifyVolumesInCG(volumes,cgVolumes);      }    } else {      verifyVolumesInCG(volumes,cgVolumes);    }  }  for (  Volume volume : volumes) {    Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),taskId,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VARRAY);    TaskResourceRep resourceTask=toTask(volume,taskId,op);    taskList.addTask(resourceTask);  }  if (cg != null) {    try {      blockServiceAPI.changeVirtualArrayForVolumes(volumes,cg,cgVolumes,tgtVarray,taskId);      _log.info("Executed virtual array change for volumes");    } catch (    InternalException|APIException e) {      String errorMsg=String.format("Volume virtual array change error: %s",e.getMessage());      _log.error(errorMsg);      for (      TaskResourceRep resourceTask : taskList.getTaskList()) {        resourceTask.setState(Operation.Status.error.name());        resourceTask.setMessage(errorMsg);        _dbClient.error(Volume.class,resourceTask.getResource().getId(),taskId,e);      }    }catch (    Exception e) {      String errorMsg=String.format("Volume virtual array change error: %s",e.getMessage());      _log.error(errorMsg);      for (      TaskResourceRep resourceTask : taskList.getTaskList()) {        resourceTask.setState(Operation.Status.error.name());        resourceTask.setMessage(errorMsg);        _dbClient.error(Volume.class,resourceTask.getResource().getId(),taskId,InternalServerErrorException.internalServerErrors.unexpectedErrorDuringVarrayChange(e));      }    }  } else {    for (    Volume volume : volumes) {      try {        blockServiceAPI.changeVirtualArrayForVolumes(Arrays.asList(volume),cg,cgVolumes,tgtVarray,taskId);        _log.info("Executed virtual array change for volume {}",volume.getId());      } catch (      InternalException|APIException e) {        String errorMsg=String.format("Volume virtual array change error: %s",e.getMessage());        _log.error(errorMsg);        for (        TaskResourceRep resourceTask : taskList.getTaskList()) {          if (resourceTask.getResource().getId().equals(volume.getId())) {            resourceTask.setState(Operation.Status.error.name());            resourceTask.setMessage(errorMsg);            _dbClient.error(Volume.class,resourceTask.getResource().getId(),taskId,e);          }        }      }catch (      Exception e) {        String errorMsg=String.format("Volume virtual array change error: %s",e.getMessage());        _log.error(errorMsg);        for (        TaskResourceRep resourceTask : taskList.getTaskList()) {          if (resourceTask.getResource().getId().equals(volume.getId())) {            resourceTask.setState(Operation.Status.error.name());            resourceTask.setMessage(errorMsg);            _dbClient.error(Volume.class,resourceTask.getResource().getId(),taskId,InternalServerErrorException.internalServerErrors.unexpectedErrorDuringVarrayChange(e));          }        }      }    }  }  return taskList;}  }
class C{  public EPDataFlowInstantiationOptions operatorStatistics(boolean statistics){  this.operatorStatistics=statistics;  return this;}  }
class C{  public DocumentDictionary(IndexReader reader,String field,String weightField,String payloadField){  this(reader,field,weightField,payloadField,null);}  }
class C{  public TIntIntHashMap(){  super();}  }
class C{  private void writeKml(final String filename,final KmlType kml){  try {    ZipEntry ze=new ZipEntry(filename);    ze.setMethod(ZipEntry.DEFLATED);    this.zipOut.putNextEntry(ze);    try {      marshaller.marshal(kmlObjectFactory.createKml(kml),out);    } catch (    JAXBException e) {      e.printStackTrace();    }    this.out.flush();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static long sparseCodeSize(IntList cases){  int sz=cases.size();  return (sz * 4L) + 2;}  }
class C{  private boolean recentlyExchangedWithPeer(Peer peer){  long now=(new Date()).getTime();  long then=getLastExchangeTime(peer).getTime();  return (now - then) < MS_BETWEEN_EXCHANGES;}  }
class C{  public synchronized boolean authenticateWithPublicKey(String user,File pemFile,String password) throws IOException {  if (pemFile == null)   throw new IllegalArgumentException("pemFile argument is null");  char[] buff=new char[256];  CharArrayWriter cw=new CharArrayWriter();  FileReader fr=new FileReader(pemFile);  while (true) {    int len=fr.read(buff);    if (len < 0)     break;    cw.write(buff,0,len);  }  fr.close();  return authenticateWithPublicKey(user,cw.toCharArray(),password);}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  public void cancelEditing(JTree a){  for (int i=0; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).cancelEditing(a);  }}  }
class C{  @Override protected IndexReader determineReader(IndexReader reader){  return null;}  }
class C{  public boolean restoreValue(String name,String value){  if (Settings.System.SCREEN_BRIGHTNESS.equals(name)) {    setBrightness(Integer.parseInt(value));  } else   if (Settings.System.SOUND_EFFECTS_ENABLED.equals(name)) {    setSoundEffects(Integer.parseInt(value) == 1);  } else   if (Settings.Secure.LOCATION_PROVIDERS_ALLOWED.equals(name)) {    setGpsLocation(value);    return false;  } else   if (Settings.Secure.BACKUP_AUTO_RESTORE.equals(name)) {    setAutoRestore(Integer.parseInt(value) == 1);  } else   if (isAlreadyConfiguredCriticalAccessibilitySetting(name)) {    return false;  }  return true;}  }
class C{  public void refresh(@NotNull Collection<VirtualFile> roots){  myRefresher.refresh(roots);}  }
class C{  private Pair<Target,RemoteOperation> newOperation(Intent operationIntent){  RemoteOperation operation=null;  Target target=null;  try {    if (!operationIntent.hasExtra(EXTRA_ACCOUNT) && !operationIntent.hasExtra(EXTRA_SERVER_URL)) {      Log_OC.e(TAG,"Not enough information provided in intent");    } else {      Account account=operationIntent.getParcelableExtra(EXTRA_ACCOUNT);      String serverUrl=operationIntent.getStringExtra(EXTRA_SERVER_URL);      String cookie=operationIntent.getStringExtra(EXTRA_COOKIE);      target=new Target(account,(serverUrl == null) ? null : Uri.parse(serverUrl),cookie);      String action=operationIntent.getAction();      if (action.equals(ACTION_CREATE_SHARE_VIA_LINK)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String password=operationIntent.getStringExtra(EXTRA_SHARE_PASSWORD);        Intent sendIntent=operationIntent.getParcelableExtra(EXTRA_SEND_INTENT);        if (remotePath.length() > 0) {          operation=new CreateShareViaLinkOperation(remotePath,password,sendIntent);        }      } else       if (ACTION_UPDATE_SHARE.equals(action)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        long shareId=operationIntent.getLongExtra(EXTRA_SHARE_ID,-1);        if (remotePath != null && remotePath.length() > 0) {          operation=new UpdateShareViaLinkOperation(remotePath);          String password=operationIntent.getStringExtra(EXTRA_SHARE_PASSWORD);          ((UpdateShareViaLinkOperation)operation).setPassword(password);          long expirationDate=operationIntent.getLongExtra(EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS,0);          ((UpdateShareViaLinkOperation)operation).setExpirationDate(expirationDate);        } else         if (shareId > 0) {          operation=new UpdateSharePermissionsOperation(shareId);          int permissions=operationIntent.getIntExtra(EXTRA_SHARE_PERMISSIONS,1);          ((UpdateSharePermissionsOperation)operation).setPermissions(permissions);        }      } else       if (action.equals(ACTION_CREATE_SHARE_WITH_SHAREE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String shareeName=operationIntent.getStringExtra(EXTRA_SHARE_WITH);        ShareType shareType=(ShareType)operationIntent.getSerializableExtra(EXTRA_SHARE_TYPE);        int permissions=operationIntent.getIntExtra(EXTRA_SHARE_PERMISSIONS,-1);        if (remotePath.length() > 0) {          operation=new CreateShareWithShareeOperation(remotePath,shareeName,shareType,permissions);        }      } else       if (action.equals(ACTION_UNSHARE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        ShareType shareType=(ShareType)operationIntent.getSerializableExtra(EXTRA_SHARE_TYPE);        String shareWith=operationIntent.getStringExtra(EXTRA_SHARE_WITH);        if (remotePath.length() > 0) {          operation=new UnshareOperation(remotePath,shareType,shareWith,OperationsService.this);        }      } else       if (action.equals(ACTION_GET_SERVER_INFO)) {        operation=new GetServerInfoOperation(serverUrl,OperationsService.this);      } else       if (action.equals(ACTION_OAUTH2_GET_ACCESS_TOKEN)) {        String oauth2QueryParameters=operationIntent.getStringExtra(EXTRA_OAUTH2_QUERY_PARAMETERS);        operation=new OAuth2GetAccessToken(getString(R.string.oauth2_client_id),getString(R.string.oauth2_redirect_uri),getString(R.string.oauth2_grant_type),oauth2QueryParameters);      } else       if (action.equals(ACTION_GET_USER_NAME)) {        operation=new GetRemoteUserNameOperation();      } else       if (action.equals(ACTION_RENAME)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newName=operationIntent.getStringExtra(EXTRA_NEWNAME);        operation=new RenameFileOperation(remotePath,newName);      } else       if (action.equals(ACTION_REMOVE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean onlyLocalCopy=operationIntent.getBooleanExtra(EXTRA_REMOVE_ONLY_LOCAL,false);        operation=new RemoveFileOperation(remotePath,onlyLocalCopy);      } else       if (action.equals(ACTION_CREATE_FOLDER)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean createFullPath=operationIntent.getBooleanExtra(EXTRA_CREATE_FULL_PATH,true);        operation=new CreateFolderOperation(remotePath,createFullPath);      } else       if (action.equals(ACTION_SYNC_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean syncFileContents=operationIntent.getBooleanExtra(EXTRA_SYNC_FILE_CONTENTS,true);        operation=new SynchronizeFileOperation(remotePath,account,syncFileContents,getApplicationContext());      } else       if (action.equals(ACTION_SYNC_FOLDER)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        operation=new SynchronizeFolderOperation(this,remotePath,account,System.currentTimeMillis());      } else       if (action.equals(ACTION_MOVE_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newParentPath=operationIntent.getStringExtra(EXTRA_NEW_PARENT_PATH);        operation=new MoveFileOperation(remotePath,newParentPath,account);      } else       if (action.equals(ACTION_COPY_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newParentPath=operationIntent.getStringExtra(EXTRA_NEW_PARENT_PATH);        operation=new CopyFileOperation(remotePath,newParentPath,account);      }    }  } catch (  IllegalArgumentException e) {    Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());    operation=null;  }  if (operation != null) {    return new Pair<Target,RemoteOperation>(target,operation);  } else {    return null;  }}  }
class C{  private String camelCaseCommandName(String cmd){  StringBuilder dest=new StringBuilder();  char previous='_';  for (int iter=0; iter < cmd.length(); iter++) {    char current=cmd.charAt(iter);    if (current == '_' || current == ' ') {      previous='_';      continue;    }    if (current >= 'a' && current <= 'z' || current >= 'A' && current <= 'Z' || current >= '0' && current <= '9') {      if (previous == '_' || previous == ' ') {        dest.append(Character.toUpperCase(current));      } else {        dest.append(Character.toLowerCase(current));      }      previous=current;    } else {      previous='_';    }  }  return dest.toString();}  }
class C{  private void outputIndex(final String oldVersion,final String newVersion){  StringBuilder builder=new StringBuilder();  String title="API Differences";  String subTitle=" Between ViPR " + oldVersion + " and "+ newVersion;  builder.append(HtmlSerializerHelper.buildHeader(title + subTitle));  builder.append(HtmlSerializerHelper.buildBodyTitle(title,subTitle));  builder.append(HtmlSerializerHelper.buildDivHeader("summary"));  builder.append(HtmlSerializerHelper.buildContent("API","summary",2));  builder.append(HtmlSerializerHelper.buildTableHeader());  builder.append(HtmlSerializerHelper.buildTableHeaderRow(1,new Pair<String,Integer>("Service Category",25),new Pair<String,Integer>("Added Number",25),new Pair<String,Integer>("Changed Number",25),new Pair<String,Integer>("Removed Number",25)));  int addedAll=0, removedAll=0, changedAll=0;  for (  Map.Entry<String,ComponentView> entry : componentMap.entrySet()) {    String componentName=entry.getKey();    int added=entry.getValue().added.size();    int changed=entry.getValue().changed.size();    int removed=entry.getValue().removed.size();    String linkPage=componentName.replaceAll(" ","") + "_diff.html";    builder.append(HtmlSerializerHelper.buildTableRow(1,new Pair<String,Integer>(HtmlSerializerHelper.buildLink(linkPage,componentName),25),new Pair<String,Integer>(Integer.toString(added),25),new Pair<String,Integer>(Integer.toString(changed),25),new Pair<String,Integer>(Integer.toString(removed),25)));    addedAll+=added;    changedAll+=changed;    removedAll+=removed;  }  builder.append(HtmlSerializerHelper.buildTableRow(1,new Pair<String,Integer>("Total",25),new Pair<String,Integer>(Integer.toString(addedAll),25),new Pair<String,Integer>(Integer.toString(changedAll),25),new Pair<String,Integer>(Integer.toString(removedAll),25)));  builder.append(HtmlSerializerHelper.buildTableTailer());  builder.append(HtmlSerializerHelper.buildDivTailer());  builder.append(HtmlSerializerHelper.buildTailer());  outputToFile(file.getAbsolutePath() + File.separator + "index.html",builder.toString());}  }
class C{  public void syncToModel(){  for (  Neuron neuron : network.getNeuronList()) {    addNeuron(neuron);  }  for (  Group group : network.getGroupList()) {    addGroup(group);  }  for (  Synapse synapse : network.getSynapseList()) {    addSynapse(synapse);  }  for (  NetworkTextObject text : network.getTextList()) {    addTextObject(text);  }}  }
class C{  public boolean isOptional(){  return optional;}  }
class C{  public synchronized boolean deleteJob(String jobId){  Job job=findJob(jobId);  if (job == null)   return false;  return jobs.remove(job);}  }
class C{  public static boolean isJellybeanOrLater(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public MVStore open(){  return new MVStore(config);}  }
class C{  protected void parseIdentifier() throws ParseException, IOException {  for (; ; ) {    if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {      break;    }    bufferize();    current=reader.read();  }}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  ((DragSourceListener)a).dragDropEnd(dsde);  ((DragSourceListener)b).dragDropEnd(dsde);}  }
class C{  public static DAOStrategy newInstance(String displayName){  final DAOStrategy returnInstance=new DAOStrategy();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  public Value evaluate(IsResource node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  return BooleanLiteral.valueOf(argValue instanceof Resource);}  }
class C{  public Id<Node> sampleChainStartNode(double randomValue){  Id<Node> id=null;  if (this.totalSourceWeight == null) {    this.totalSourceWeight=0.0;    for (    PathDependentNode node : this.network.values()) {      this.totalSourceWeight+=node.getSourceWeight();    }  }  double cumulativeWeight=0.0;  Iterator<PathDependentNode> iterator=this.network.values().iterator();  while (id == null && iterator.hasNext()) {    PathDependentNode node=iterator.next();    cumulativeWeight+=node.getSourceWeight();    if (cumulativeWeight / this.totalSourceWeight >= randomValue) {      id=node.getId();    }  }  return id;}  }
class C{  public NoUniqueResultException(Throwable cause){  super(cause);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private boolean isSharedLun(VNXeLun lun){  List<BlockHostAccess> accesses=lun.getHostAccess();  int hostCount=0;  if (accesses != null && !accesses.isEmpty()) {    for (    BlockHostAccess access : accesses) {      if (access != null) {        VNXeBase hostId=access.getHost();        if (hostId != null) {          hostCount++;          if (hostCount > 1) {            return true;          }        }      }    }  }  return false;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof GeneralSubtree))   return false;  GeneralSubtree otherGS=(GeneralSubtree)other;  if (this.name == null) {    if (otherGS.name != null) {      return false;    }  } else {    if (!((this.name).equals(otherGS.name)))     return false;  }  if (this.minimum != otherGS.minimum)   return false;  if (this.maximum != otherGS.maximum)   return false;  return true;}  }
class C{  public void pushEnclosingMethodCall(Expression call){  if (call instanceof MethodCallExpression || call instanceof StaticMethodCallExpression) {    enclosingMethodCalls.addFirst(call);  } else {    throw new IllegalArgumentException("Expression must be a method call or a static method call");  }}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a positive integer: ");  int number=input.nextInt();  System.out.print("The smallest factors of " + number + " are: ");  StackOfIntegers stack=new StackOfIntegers();  smallestFactors(number,stack);  while (!stack.empty()) {    System.out.print(stack.pop() + " ");  }  System.out.println();}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,Value arg1,Value arg2){  return new JVirtualInvokeExpr(base,method,Arrays.asList(new Value[]{arg1,arg2}));}  }
class C{  public static SequenceIndex[] loadFileIndexes(InputStream bcis,int numberSequences,long pointerAdjust) throws IOException {  final byte[] bufIn=new byte[10 * 1024];  final ByteArrayOutputStream bufHelper=new ByteArrayOutputStream();  int inLen;  while ((inLen=bcis.read(bufIn,0,bufIn.length)) != -1) {    bufHelper.write(bufIn,0,inLen);  }  final byte[] buf=bufHelper.toByteArray();  final ArrayList<SequenceIndex> indexes=new ArrayList<>();  long pos=0;  for (int seqNo=0; seqNo < numberSequences; seqNo++) {    final SequenceIndex bi=new SequenceIndex();    final int numBins=ByteArrayIOUtils.bytesToIntLittleEndian(buf,(int)pos);    pos+=4;    for (int i=0; i < numBins; i++) {      final int binNo=ByteArrayIOUtils.bytesToIntLittleEndian(buf,(int)pos);      final int numChunks=ByteArrayIOUtils.bytesToIntLittleEndian(buf,(int)pos + 4);      pos+=8;      for (int j=0; j < numChunks; j++) {        final long chunkBeg;        final long chunkEnd;        if (binNo == TabixIndexer.META_BIN && j == 1) {          chunkBeg=ByteArrayIOUtils.bytesToLongLittleEndian(buf,(int)pos);          chunkEnd=ByteArrayIOUtils.bytesToLongLittleEndian(buf,(int)pos + 8);        } else {          chunkBeg=fixChunkPosition(ByteArrayIOUtils.bytesToLongLittleEndian(buf,(int)pos),pointerAdjust);          chunkEnd=fixChunkPosition(ByteArrayIOUtils.bytesToLongLittleEndian(buf,(int)pos + 8),pointerAdjust);        }        bi.addChunk(binNo,chunkBeg,chunkEnd);        pos+=16;      }    }    final int numLinear=ByteArrayIOUtils.bytesToIntLittleEndian(buf,(int)pos);    pos+=4;    for (int chunkNo=0; chunkNo < numLinear; chunkNo++) {      final long orgChunkOffset=ByteArrayIOUtils.bytesToLongLittleEndian(buf,(int)pos);      final long chunkOffset=fixChunkPosition(orgChunkOffset,pointerAdjust);      bi.setLinearIndex(chunkNo,chunkOffset,-1);      pos+=8;    }    indexes.add(bi);  }  return indexes.toArray(new SequenceIndex[indexes.size()]);}  }
class C{  public synchronized VasaAssociationObject[] queryAssociatedProcessorsForArray(String[] arrayUniqueIds) throws InvalidArgument, StorageFault, NotImplemented, InvalidSession {  final String methodName="queryAssociatedProcessorsForArray(): ";  List<VasaAssociationObject> returnList=null;  String bourneArrayId=this.getArrayId();  log.debug(methodName + "Entry");  Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));  try {    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    if (!Util.isEmpty(arrayUniqueIds)) {      List<String> inputArrayIdList=Arrays.asList(arrayUniqueIds);      log.debug(methodName + "input array ids: " + inputArrayIdList);      for (      String inputArrayId : inputArrayIdList) {        if (!Util.isEmpty(inputArrayId) && !inputArrayId.startsWith(STORAGEARRAY_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given array Id is invalid:[" + inputArrayId + "]");        }      }    }    returnList=new ArrayList<VasaAssociationObject>();    VasaAssociationObject associationObject=new VasaAssociationObject();    BaseStorageEntity entity=new BaseStorageEntity();    entity.setUniqueIdentifier(bourneArrayId);    BaseStorageEntity associatedEntity=new BaseStorageEntity();    associatedEntity.setUniqueIdentifier(this.getProcessorId());    associationObject.addEntityId(entity);    associationObject.addAssociatedId(associatedEntity);    if (Util.isEmpty(arrayUniqueIds)) {      log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");      returnList.add(associationObject);    } else {      for (      String arrayID : arrayUniqueIds) {        if (bourneArrayId.equals(arrayID)) {          log.debug(methodName + "array[" + entity.getUniqueIdentifier()+ "] is associated to processor["+ associatedEntity.getUniqueIdentifier()+ "]");          returnList.add(associationObject);        }      }    }  } catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }catch (  StorageFault e) {    log.error(methodName + "StorageFault occured ",e);    throw e;  }  log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");  return returnList.toArray(new VasaAssociationObject[0]);}  }
class C{  public RhinoScriptBuilder addJSON(){  try {    final InputStream script=new AutoCloseInputStream(new WebjarUriLocator().locate(WebjarUriLocator.createUri("20110223/json2.js")));    final InputStream scriptCycle=getClass().getResourceAsStream(SCRIPT_CYCLE);    evaluateChain(script,SCRIPT_JSON);    evaluateChain(scriptCycle,SCRIPT_CYCLE);    return this;  } catch (  final IOException e) {    throw new RuntimeException("Couldn't initialize json2.min.js script",e);  }}  }
class C{  public static SetExpression notIn(String propertyName,Object[] values){  return new SetExpression(Operator.NOT_IN,propertyName,values);}  }
class C{  public ClientMessage createMessage(Map<String,Object> properties){  ClientMessage message=createMessage();  addMessageProperties(message,properties);  return message;}  }
class C{  public Complex minus(Complex that){  double real=this.re - that.re;  double imag=this.im - that.im;  return new Complex(real,imag);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord) {    MTree_Base tree=new MTree_Base(getCtx(),getName() + MTree_Base.TREETYPE_CMContainer,MTree_Base.TREETYPE_CMContainer,get_TrxName());    if (!tree.save())     return false;    setAD_TreeCMC_ID(tree.getAD_Tree_ID());    tree=new MTree_Base(getCtx(),getName() + MTree_Base.TREETYPE_CMContainerStage,MTree_Base.TREETYPE_CMContainerStage,get_TrxName());    if (!tree.save())     return false;    setAD_TreeCMS_ID(tree.getAD_Tree_ID());    tree=new MTree_Base(getCtx(),getName() + MTree_Base.TREETYPE_CMTemplate,MTree_Base.TREETYPE_CMTemplate,get_TrxName());    if (!tree.save())     return false;    setAD_TreeCMT_ID(tree.getAD_Tree_ID());    tree=new MTree_Base(getCtx(),getName() + MTree_Base.TREETYPE_CMMedia,MTree_Base.TREETYPE_CMMedia,get_TrxName());    if (!tree.save())     return false;    setAD_TreeCMM_ID(tree.getAD_Tree_ID());  }  return true;}  }
class C{  static <T extends LifecycleObserver>boolean call(Activity activity,Class<T> lifecycleClazz,Object... parameters){  boolean shouldCallSuper=true;  List<GeneralController> controllers=ACTIVITY_CONTROLLER_MAP.get(activity);  if (controllers != null) {    for (    Controller controller : controllers) {      shouldCallSuper=shouldCallSuper && checkAndCall(lifecycleClazz,controller,parameters);      callControllerPlugins(lifecycleClazz,controller,parameters);    }  }  if (lifecycleClazz.equals(OnDestroy.class)) {    ACTIVITY_CONTROLLER_MAP.remove(activity);  }  for (  PanLifecyclePlugin plugin : PAN_PLUGINS) {    try {      plugin.onActivityLifecycle(activity,lifecycleClazz,parameters);    } catch (    Throwable e) {      LOG.error("wtf! Your plugin is shit!",e);    }  }  return shouldCallSuper;}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  @Override protected final void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  shoppingAssistantAPI=CloudEndpointBuilderHelper.getEndpoints();  context=getApplicationContext();  new CheckInTask().execute();  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);  setContentView(R.layout.activity_main);  placesList=(ListView)findViewById(R.id.PlacesList);  placesListLabel=(TextView)findViewById(R.id.PlacesListLabel);  placesList.setOnItemClickListener(placesListClickListener);  geoLocationHelper.startRetrievingLocation(this);  if (checkPlayServices()) {    gcm=GoogleCloudMessaging.getInstance(this);    regId=getRegistrationId(context);    if (regId.isEmpty()) {      Log.i(TAG,"Not registered with GCM.");      new GcmAsyncRegister().execute();    }  } else {    Log.i(TAG,"No valid Google Play Services APK found.");  }  new ListOfPlacesAsyncRetriever().execute(geoLocationHelper.getCurrentLocation());}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);}  }
class C{  public ElementRule(String name,XMLSyntaxRule[] rules,String description){  this.name=name;  this.rules=rules;  this.description=description;}  }
class C{  public Statement or(Object operand){  statement.append(" OR ").append(operand);  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    return basicSetToEndpoint(null,msgs);case EipPackage.CHANNEL__FROM_ENDPOINT:  return basicSetFromEndpoint(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ActivateSessionRequest clone(){  ActivateSessionRequest result=new ActivateSessionRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.ClientSignature=ClientSignature == null ? null : ClientSignature.clone();  if (ClientSoftwareCertificates != null) {    result.ClientSoftwareCertificates=new SignedSoftwareCertificate[ClientSoftwareCertificates.length];    for (int i=0; i < ClientSoftwareCertificates.length; i++)     result.ClientSoftwareCertificates[i]=ClientSoftwareCertificates[i].clone();  }  result.LocaleIds=LocaleIds == null ? null : LocaleIds.clone();  result.UserIdentityToken=UserIdentityToken;  result.UserTokenSignature=UserTokenSignature == null ? null : UserTokenSignature.clone();  return result;}  }
class C{  public void addUnresolvedCall(String name,UnresolvedFunctionCall call){  unresolvedCalls.put(name,call);}  }
class C{  public static long[] copy(long[] v,int mincap,int shift){  int words=((mincap - 1) >>> LONG_LOG2_SIZE) + 1;  if (v.length == words && shift == 0) {    return Arrays.copyOf(v,v.length);  }  long[] ret=new long[words];  final int shiftWords=shift >>> LONG_LOG2_SIZE;  final int shiftBits=shift & LONG_LOG2_MASK;  if (shiftBits == 0) {    for (int i=shiftWords; i < ret.length; i++) {      ret[i]|=v[i - shiftWords];    }    return ret;  }  final int unshiftBits=Long.SIZE - shiftBits;  final int end=Math.min(ret.length,v.length + shiftWords) - 1;  for (int i=end; i > shiftWords; i--) {    final int src=i - shiftWords;    ret[i]|=(v[src] << shiftBits) | (v[src - 1] >>> unshiftBits);  }  ret[shiftWords]|=v[0] << shiftBits;  return ret;}  }
class C{  public View inflate(View convertView,int layoutId,ViewGroup root){  if (convertView != null) {    Integer layout=(Integer)convertView.getTag(AQuery.TAG_LAYOUT);    if (layout != null && layout.intValue() == layoutId) {      return convertView;    }  }  LayoutInflater inflater=null;  if (act != null) {    inflater=act.getLayoutInflater();  } else {    inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);  }  View view=inflater.inflate(layoutId,root,false);  view.setTag(AQuery.TAG_LAYOUT,layoutId);  return view;}  }
class C{  public static StorageImage create(String fileName,int width,int height){  return new StorageImage(fileName,width,height,true);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public void prepare(){  final IBoard board=bv.game.getBoard();  final GUIPreferences guip=GUIPreferences.getInstance();  getBounds();  GraphicsConfiguration config=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  image=config.createCompatibleImage(bounds.width,bounds.height,Transparency.TRANSLUCENT);  Graphics2D graph=(Graphics2D)image.getGraphics();  GUIPreferences.AntiAliasifSet(graph);  graph.translate(-hexOrigin.x,-hexOrigin.y);  if (!bv.useIsometric()) {    if (onlyDetectedBySensors()) {      graph.drawImage(bv.getScaledImage(radarBlipImage,true),0,0,this);    } else {      boolean translucentHiddenUnits=guip.getBoolean(GUIPreferences.ADVANCED_TRANSLUCENT_HIDDEN_UNITS);      boolean shouldBeTranslucent=(trackThisEntitiesVisibilityInfo(entity) && !entity.isVisibleToEnemy()) || entity.isHidden();      if ((shouldBeTranslucent && translucentHiddenUnits) || (entity.relHeight() < 0)) {        graph.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.5f));      }      graph.drawImage(bv.getScaledImage(bv.tileManager.imageFor(entity,secondaryPos),true),0,0,this);      graph.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));    }  }  graph.scale(bv.scale,bv.scale);  boolean isInfantry=(entity instanceof Infantry);  boolean isAero=(entity instanceof Aero);  if ((isAero && ((Aero)entity).isSpheroid() && !board.inSpace()) && (secondaryPos == 1)) {    graph.setColor(Color.WHITE);    graph.draw(bv.facingPolys[entity.getFacing()]);  }  if ((secondaryPos == -1) || (secondaryPos == 6)) {    ArrayList<Status> stStr=new ArrayList<Status>();    criticalStatus=false;    boolean turretLocked=false;    int crewStunned=0;    boolean ge=false;    if (entity instanceof Tank) {      turretLocked=!((Tank)entity).hasNoTurret() && !entity.canChangeSecondaryFacing();      crewStunned=((Tank)entity).getStunnedTurns();      ge=entity instanceof GunEmplacement;    }    if (entity.isAirborne()) {      if (!board.inSpace()) {        stStr.add(new Status(Color.CYAN,"A",SMALL));        stStr.add(new Status(Color.CYAN,Integer.toString(entity.getAltitude()),SMALL));      }    } else     if (entity.getElevation() != 0) {      stStr.add(new Status(Color.CYAN,Integer.toString(entity.getElevation()),SMALL));    }    if (entity.isManualShutdown()) {      stStr.add(new Status(Color.YELLOW,"SHUTDOWN"));    } else     if (entity.isShutDown()) {      stStr.add(new Status(Color.RED,"SHUTDOWN"));    }    if (entity.isProne())     stStr.add(new Status(Color.RED,"PRONE"));    if (entity.isHiddenActivating())     stStr.add(new Status(Color.RED,"ACTIVATING"));    if (entity.isHidden())     stStr.add(new Status(Color.RED,"HIDDEN"));    if (entity.isHullDown())     stStr.add(new Status(Color.ORANGE,"HULLDOWN"));    if ((entity.isStuck()))     stStr.add(new Status(Color.ORANGE,"STUCK"));    if (!ge && entity.isImmobile())     stStr.add(new Status(Color.RED,"IMMOBILE"));    if (isAffectedByECM())     stStr.add(new Status(Color.YELLOW,"Jammed"));    if (turretLocked)     stStr.add(new Status(Color.YELLOW,"LOCKED"));    if (entity.getGrappled() != Entity.NONE) {      if (entity.isGrappleAttacker()) {        stStr.add(new Status(Color.YELLOW,"GRAPPLER"));      } else {        stStr.add(new Status(Color.RED,"GRAPPLED"));      }    }    if (entity.getSwarmAttackerId() != Entity.NONE) {      stStr.add(new Status(Color.RED,"SWARMED"));    }    if ((entity.getLoadedUnits()).size() > 0) {      stStr.add(new Status(Color.YELLOW,"T",SMALL));    }    if (trackThisEntitiesVisibilityInfo(entity)) {      if (!entity.isEverSeenByEnemy()) {        stStr.add(new Status(Color.GREEN,"U",SMALL));      } else       if (!entity.isVisibleToEnemy()) {        stStr.add(new Status(Color.GREEN,"H",SMALL));      }    }    if (entity.getCrew().isDead())     stStr.add(new Status(Color.RED,"CrewDead"));    if (crewStunned > 0) {      stStr.add(new Status(Color.YELLOW,"STUNNED",new Object[]{crewStunned}));    }    if (isInfantry) {      Infantry inf=((Infantry)entity);      int dig=inf.getDugIn();      if (dig == Infantry.DUG_IN_COMPLETE) {        stStr.add(new Status(Color.PINK,"D",SMALL));      } else       if (dig != Infantry.DUG_IN_NONE) {        stStr.add(new Status(Color.YELLOW,"Working",DIRECT));        stStr.add(new Status(Color.PINK,"D",SMALL));      } else       if (inf.isTakingCover()) {        stStr.add(new Status(Color.YELLOW,"TakingCover"));      }      if (inf.turnsLayingExplosives >= 0) {        stStr.add(new Status(Color.YELLOW,"Working",DIRECT));        stStr.add(new Status(Color.PINK,"E",SMALL));      }    }    if (isAero) {      Aero a=(Aero)entity;      if (a.isRolled())       stStr.add(new Status(Color.YELLOW,"ROLLED"));      if (a.getFuel() <= 0)       stStr.add(new Status(Color.RED,"FUEL"));      if (a.isEvading())       stStr.add(new Status(Color.GREEN,"EVADE"));      if (a.isOutControlTotal() & a.isRandomMove()) {        stStr.add(new Status(Color.RED,"RANDOM"));      } else       if (a.isOutControlTotal()) {        stStr.add(new Status(Color.RED,"CONTROL"));      }    }    if (guip.getShowDamageLevel()) {      Color damageColor=getDamageColor();      if (damageColor != null) {        stStr.add(new Status(damageColor,0,SMALL));      }    }    graph.scale(1 / bv.scale,1 / bv.scale);    if (guip.getBoolean(GUIPreferences.ADVANCED_DRAW_ENTITY_LABEL)) {      if (criticalStatus) {        graph.setColor(LABEL_CRITICAL_BACK);      } else {        graph.setColor(LABEL_BACK);      }      graph.fillRoundRect(labelRect.x,labelRect.y,labelRect.width,labelRect.height,5,10);      if (guip.getEntityOwnerLabelColor()) {        graph.setColor(PlayerColors.getColor(entity.getOwner().getColorIndex(),false));        Stroke oldStroke=graph.getStroke();        graph.setStroke(new BasicStroke(3));        graph.drawRoundRect(labelRect.x - 1,labelRect.y - 1,labelRect.width + 1,labelRect.height + 1,5,10);        graph.setStroke(oldStroke);      }      graph.setFont(labelFont);      Color textColor=LABEL_TEXT_COLOR;      if (!entity.isDone() && !onlyDetectedBySensors()) {        textColor=guip.getColor(GUIPreferences.ADVANCED_UNITOVERVIEW_VALID_COLOR);      }      if (isSelected) {        textColor=guip.getColor(GUIPreferences.ADVANCED_UNITOVERVIEW_SELECTED_COLOR);      }      bv.drawCenteredText(graph,getAdjShortName(),labelRect.x + labelRect.width / 2,labelRect.y + labelRect.height / 2 - 1,textColor,(entity.isDone() && !onlyDetectedBySensors()));    }    if (onlyDetectedBySensors()) {      graph.dispose();      return;    }    drawStatusStrings(graph,stStr);    graph.scale(bv.scale,bv.scale);    graph.setColor(Color.white);    if ((entity.getFacing() != -1) && !(isInfantry && !((Infantry)entity).hasFieldGun() && !((Infantry)entity).isTakingCover()) && !(isAero && ((Aero)entity).isSpheroid() && !board.inSpace())) {      graph.draw(bv.facingPolys[entity.getFacing()]);    }    int secFacing=entity.getFacing();    if (!((entity instanceof Mech) || (entity instanceof Protomech))) {      secFacing=entity.getSecondaryFacing();    } else     if (entity.getArmsFlipped()) {      secFacing=(entity.getFacing() + 3) % 6;    }    if ((secFacing != -1) && (secFacing != entity.getFacing())) {      graph.setColor(Color.red);      graph.draw(bv.facingPolys[secFacing]);    }    if ((entity instanceof Aero) && this.bv.game.useVectorMove()) {      for (      int head : entity.getHeading()) {        graph.setColor(Color.red);        graph.draw(bv.facingPolys[head]);      }    }    int baseBarLength=23;    int barLength=0;    double percentRemaining=0.00;    percentRemaining=entity.getArmorRemainingPercent();    barLength=(int)(baseBarLength * percentRemaining);    graph.setColor(Color.darkGray);    graph.fillRect(56,7,23,3);    graph.setColor(Color.lightGray);    graph.fillRect(55,6,23,3);    graph.setColor(getStatusBarColor(percentRemaining));    graph.fillRect(55,6,barLength,3);    if (!ge) {      percentRemaining=entity.getInternalRemainingPercent();      barLength=(int)(baseBarLength * percentRemaining);      graph.setColor(Color.darkGray);      graph.fillRect(56,11,23,3);      graph.setColor(Color.lightGray);      graph.fillRect(55,10,23,3);      graph.setColor(getStatusBarColor(percentRemaining));      graph.fillRect(55,10,barLength,3);    }  }  graph.dispose();}  }
class C{  public static String fileToString(final String file) throws IOException {  final String ret;  try (Reader reader=new FileReader(file)){    ret=readerToString(reader);  }   return ret;}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  protected static void compress(Map<ScheduleUnit,SortedSet<Integer>> unitValues){  for (  Map.Entry<ScheduleUnit,SortedSet<Integer>> entry : unitValues.entrySet()) {    int elementValueSetSize=entry.getKey().max() - entry.getKey().min() + 1;    if (entry.getValue() != null) {      if (entry.getValue().size() == elementValueSetSize) {        unitValues.put(entry.getKey(),null);      }    }  }}  }
class C{  private void updateTabContext(int index,boolean selected,boolean isMouseDown,boolean isMouseOver,boolean hasFocus){  int state=0;  if (!tabPane.isEnabled() || !tabPane.isEnabledAt(index)) {    state|=SynthConstants.DISABLED;    if (selected) {      state|=SynthConstants.SELECTED;    }  } else   if (selected) {    state|=(SynthConstants.ENABLED | SynthConstants.SELECTED);    if (isMouseOver && UIManager.getBoolean("TabbedPane.isTabRollover")) {      state|=SynthConstants.MOUSE_OVER;    }  } else   if (isMouseOver) {    state|=(SynthConstants.ENABLED | SynthConstants.MOUSE_OVER);  } else {    state=SeaGlassLookAndFeel.getComponentState(tabPane);    state&=~SynthConstants.FOCUSED;  }  if (hasFocus && tabPane.hasFocus()) {    state|=SynthConstants.FOCUSED;  }  if (isMouseDown) {    state|=SynthConstants.PRESSED;  }  tabContext.setComponentState(state);}  }
class C{  public void paintComponent(Graphics g){  g.drawImage(track,0,0,null);  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(carPosition.x,carPosition.y);  g2d.rotate(Math.toRadians(carRotation));  g2d.translate(-(carPosition.x),-(carPosition.y));  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);}  }
class C{  public void activate(GeometryEditPanel panel){  this.panel=panel;  gridPM=getViewport().getGridPrecisionModel();  this.panel.setCursor(getCursor());  this.panel.addMouseListener(this);  this.panel.addMouseMotionListener(this);  this.panel.addMouseWheelListener(this);}  }
class C{  public void stutterProcess(){  if (useStandardStutterSound())   sendSound((byte)8);}  }
class C{  public boolean hasDeadline(){  return hasDeadline;}  }
class C{  public void open(String name) throws IOException {  this.open(new FileInputStream(name));}  }
class C{  protected void memberEnter(JCTree tree,Env<AttrContext> env){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    tree.accept(this);  } catch (  CompletionFailure ex) {    chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;  }}  }
class C{  public G load(String filename,Supplier<? extends G> graph_factory) throws IOException {  return load(new FileReader(filename),graph_factory.get());}  }
class C{  public boolean routingResolved(){  return routingResolved;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  createNPC(zone);}  }
class C{  public String globalInfo(){  return "A filter that generates output with a new order of the " + "attributes. Useful if one wants to move an attribute to the end to " + "use it as class attribute (e.g. with using \"-R 2-last,1\").\n"+ "But it's not only possible to change the order of all the attributes, "+ "but also to leave out attributes. E.g. if you have 10 attributes, you "+ "can generate the following output order: 1,3,5,7,9,10 or 10,1-5.\n"+ "You can also duplicate attributes, e.g. for further processing later "+ "on: e.g. 1,1,1,4,4,4,2,2,2 where the second and the third column of "+ "each attribute are processed differently and the first one, i.e. the "+ "original one is kept.\n"+ "One can simply inverse the order of the attributes via 'last-first'.\n"+ "After appyling the filter, the index of the class attribute is the "+ "last attribute.";}  }
class C{  private void onPaint(final PaintEvent event){  final Rectangle rect=this.getClientArea();  if (rect.width == 0 || rect.height == 0) {    return;  }  this.gc=event.gc;  final Point buttonSize=this.computeButtonSize();  this.drawSwitchButton(buttonSize);  this.drawText(buttonSize);}  }
class C{  public JIntegerField(Composite parent,int style,boolean allowsNegative){  this(parent,style,0,allowsNegative);}  }
class C{  public Builder version(final String version){  this.version=GraphSONVersion.valueOf(version);  return this;}  }
class C{  public Connection(final InetSocketAddress peerAddress,final Handshaker ongoingHandshake){  if (peerAddress == null) {    throw new NullPointerException("Peer address must not be null");  } else {    this.peerAddress=peerAddress;    this.ongoingHandshake=ongoingHandshake;  }}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  private boolean commonNodeEquality(Node n1,Node n2){  if (!nodeEquals(n1.getComment(),n2.getComment())) {    return false;  }  return nodesEquals(n1.getOrphanComments(),n2.getOrphanComments());}  }
class C{  public BigIntegerConverter(final Object defaultValue){  super(false,defaultValue);}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  @Deprecated public SSLTestConfig(boolean useSSL,boolean clientAuth,String keyStore,String keyStorePassword,String trustStore,String trustStorePassword){  super(useSSL,clientAuth,keyStore,keyStorePassword,trustStore,trustStorePassword);  this.keyStore=tryNewResource(keyStore,"KeyStore");  this.trustStore=tryNewResource(trustStore,"TrustStore");}  }
class C{  public boolean showModalDialog(final boolean autoSaveWorkspace){  final boolean result=dialog.showModalDialog();  if (result && autoSaveWorkspace) {    saveWorkspace(project.getBasePath(),false,null);  }  return result;}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    cipher.processBlock(buf,0,block,0);    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    for (int i=bufOff; i != buf.length; i++) {      buf[i]=block[i - blockSize];    }    for (int i=blockSize; i != bufOff; i++) {      buf[i]^=block[i - blockSize];    }    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,blockSize,out,outOff);    } else {      cipher.processBlock(buf,blockSize,out,outOff);    }    System.arraycopy(block,0,out,outOff + blockSize,len);  } else {    byte[] lastBlock=new byte[blockSize];    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,0,block,0);    } else {      cipher.processBlock(buf,0,block,0);    }    for (int i=blockSize; i != bufOff; i++) {      lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);    }    System.arraycopy(buf,blockSize,block,0,len);    cipher.processBlock(block,0,out,outOff);    System.arraycopy(lastBlock,0,out,outOff + blockSize,len);  }  int offset=bufOff;  reset();  return offset;}  }
class C{  public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,null);}  }
class C{  public static int fieldIdLength(short flags){  return isCompactFooter(flags) ? 0 : FIELD_ID_LEN;}  }
class C{  public String filterTypeTipText(){  return "Determines how/if the data will be transformed.";}  }
class C{  public void showDialog(){  setVisible(true);}  }
class C{  public static List<Map<String,Object>> createSimpleSeedProvider(List<String> seeds){  return ImmutableList.<Map<String,Object>>of(ImmutableMap.<String,Object>of("class_name","org.apache.cassandra.locator.SimpleSeedProvider","parameters",ImmutableList.of(ImmutableMap.of("seeds",Joiner.on(",").join(seeds)))));}  }
class C{  public static String convertMacAddressToString(byte[] macAddress){  return String.format("%02x:%02x:%02x:%02x:%02x:%02x",macAddress[0],macAddress[1],macAddress[2],macAddress[3],macAddress[4],macAddress[5]);}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  public void test_INSERT_NQuads_by_URL() throws Exception {  if (TestMode.quads != getTestMode())   return;{    final String queryStr="ASK where {?s ?p ?o}";    final BooleanQuery query=cxn.prepareBooleanQuery(QueryLanguage.SPARQL,queryStr);    assertEquals(false,query.evaluate());  }  final long expectedStatementCount=7;{    final URL url=new URL("file:src/test/java/com/bigdata/rdf/sail/webapp/quads.nq");    cxn.add(url,"",RDFFormat.NQUADS);    assertEquals(7,getExactSize());  }{    final String queryStr="SELECT * where {?s ?p ?o}";    final TupleQuery query=cxn.prepareTupleQuery(QueryLanguage.SPARQL,queryStr);    assertEquals(expectedStatementCount,countResults(query.evaluate()));  }}  }
class C{  public void removeTTL(){  if (uriParms != null)   uriParms.delete(TTL);}  }
class C{  public void error(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  public boolean isMinimized(){  return this.minimized;}  }
class C{  public void clear(){  int len=numObjs;  Object[] o=objs;  for (int i=0; i < len; i++)   o[i]=null;  numObjs=0;}  }
class C{  protected static String makeOptionString(Associator associator){  StringBuffer text;  text=new StringBuffer();  text.append("\nGeneral options:\n\n");  text.append("-t <training file>\n");  text.append("\tThe name of the training file.\n");  text.append("-g <name of graph file>\n");  text.append("\tOutputs the graph representation (if supported) of the associator to a file.\n");  if (associator instanceof OptionHandler) {    text.append("\nOptions specific to " + associator.getClass().getName().replaceAll(".*\\.","") + ":\n\n");    Enumeration<Option> enm=((OptionHandler)associator).listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      text.append(option.synopsis() + "\n");      text.append(option.description() + "\n");    }  }  return text.toString();}  }
class C{  public static boolean isConnectionException(SQLException e) throws AdeInternalException {  boolean isSessionSeverity;  logger.trace("isConnectionException()  --> entry");  final String connectionUrl=getDatabaseUrl();  if (connectionUrl == null) {    throw new AdeInternalException("isConnectionException() - unknown jdbc driver");  }  if (!connectionUrl.contains(DERBY_JDBC_TYPE)) {    throw new AdeInternalException("isConnectionException() - unsupported jdbc driver: " + connectionUrl);  }  final String sqlState=e.getSQLState();  if (sqlState == null || sqlState.isEmpty()) {    throw new AdeInternalException("isConnectionException() - unknown sql state");  }  isSessionSeverity=sqlState.startsWith(DERBY_SESSION_SEVERITY);  logger.trace(String.format("isConnectionException()  <-- exit (%b)",isSessionSeverity));  return isSessionSeverity;}  }
class C{  @Override public String toString(){  return getAsReadable();}  }
class C{  public PCA(){  this(50);}  }
class C{  public void shutdown(GL10 gl){  if (gl != null) {    if (mState > STATE_NEW) {      mTexture.delete(gl);      mState=STATE_NEW;    }  }}  }
class C{  private void drawBar(Graphics2D g2,Coord loc,int nrof,int col){  final int BAR_HEIGHT=5;  final int BAR_WIDTH=5;  final int BAR_DISPLACEMENT=2;  for (int i=1; i <= nrof; i++) {    if (i % 2 == 0) {      g2.setColor(msgColor1);    } else {      if (col > 1) {        g2.setColor(msgColor3);      } else {        g2.setColor(msgColor2);      }    }    g2.fillRect(scale(loc.getX() - BAR_DISPLACEMENT - (BAR_WIDTH * col)),scale(loc.getY() - BAR_DISPLACEMENT - i * BAR_HEIGHT),scale(BAR_WIDTH),scale(BAR_HEIGHT));  }}  }
class C{  public static Response createChannelBindErrorResponse(char errorCode){  return createChannelBindErrorResponse(errorCode,null);}  }
class C{  public static DailyTimeIntervalScheduleBuilder dailyTimeIntervalSchedule(){  return new DailyTimeIntervalScheduleBuilder();}  }
class C{  synchronized void writePointerEvent(int x,int y,int modifiers,int pointerMask) throws IOException {  eventBufLen=0;  writeModifierKeyEvents(modifiers);  eventBuf[eventBufLen++]=(byte)PointerEvent;  eventBuf[eventBufLen++]=(byte)pointerMask;  eventBuf[eventBufLen++]=(byte)((x >> 8) & 0xff);  eventBuf[eventBufLen++]=(byte)(x & 0xff);  eventBuf[eventBufLen++]=(byte)((y >> 8) & 0xff);  eventBuf[eventBufLen++]=(byte)(y & 0xff);  if (pointerMask == 0) {    writeModifierKeyEvents(0);  }  os.write(eventBuf,0,eventBufLen);}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuGroup);  groupId=a.getResourceId(R.styleable.SherlockMenuGroup_android_id,defaultGroupId);  groupCategory=a.getInt(R.styleable.SherlockMenuGroup_android_menuCategory,defaultItemCategory);  groupOrder=a.getInt(R.styleable.SherlockMenuGroup_android_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(R.styleable.SherlockMenuGroup_android_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(R.styleable.SherlockMenuGroup_android_visible,defaultItemVisible);  groupEnabled=a.getBoolean(R.styleable.SherlockMenuGroup_android_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  private void load(final Request urlEntry,final String stats){  final CrawlProfile profile=this.sb.crawler.get(UTF8.getBytes(urlEntry.profileHandle()));  if (profile != null) {    final DigestURL url=urlEntry.url();    final String urlProtocol=url.getProtocol();    if (this.sb.loader.isSupportedProtocol(urlProtocol)) {      if (CrawlQueues.log.isFine()) {        CrawlQueues.log.fine(stats + ": URL=" + urlEntry.url()+ ", initiator="+ ((urlEntry.initiator() == null) ? "" : ASCII.String(urlEntry.initiator()))+ ", crawlOrder="+ ((profile.remoteIndexing()) ? "true" : "false")+ ", depth="+ urlEntry.depth()+ ", crawlDepth="+ profile.depth()+ ", must-match="+ profile.urlMustMatchPattern().toString()+ ", must-not-match="+ profile.urlMustNotMatchPattern().toString()+ ", permission="+ ((this.sb.peers == null) ? "undefined" : (((this.sb.peers.mySeed().isSenior()) || (this.sb.peers.mySeed().isPrincipal())) ? "true" : "false")));      }      if (urlEntry == null || urlEntry.url() == null) {        CrawlQueues.log.info(stats + ": urlEntry = null");      } else {        if (!activeWorkerEntries().containsKey(urlEntry.url())) {          try {            ensureLoaderRunning();            this.workerQueue.put(urlEntry);          } catch (          InterruptedException e) {            ConcurrentLog.logException(e);          }        }      }    } else {      CrawlQueues.log.severe("Unsupported protocol in URL '" + url.toNormalform(false));    }  } else {    if (CrawlQueues.log.isFine())     CrawlQueues.log.fine(stats + ": LOST PROFILE HANDLE '" + urlEntry.profileHandle()+ "' for URL "+ urlEntry.url());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BlockDefinition newDefinition(Block block){  final BlockDefinition def=new BlockDefinition(block);  all.add(def);  return def;}  }
class C{  public static boolean isNullOrEmpty(@Nullable Object object){  return isNull(object);}  }
class C{  @Override public void refreshRow() throws SQLException {  try {    debugCodeCall("refreshRow");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    checkOnValidRow();    patchCurrentRow(getUpdatableRow().readRow(result.currentRow()));    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public RuntimeException(){}  }
class C{  private static void insertStubCase(Assembler asm,int[] sigIds,RVMMethod[] targets,int[] bcIndices,int low,int high){  int middle=(high + low) / 2;  asm.resolveForwardReferences(bcIndices[middle]);  if (low == middle && middle == high) {    RVMMethod target=targets[middle];    if (target.isStatic()) {      asm.emitLAddrToc(S0,target.getOffset());    } else {      asm.emitLAddrOffset(S0,S0,target.getOffset());    }    asm.emitMTCTR(S0);    asm.emitBCCTR();  } else {    asm.emitCMPI(S1,sigIds[middle]);    if (low < middle) {      asm.emitShortBC(LT,0,bcIndices[(low + middle - 1) / 2]);    }    if (middle < high) {      asm.emitShortBC(GT,0,bcIndices[(middle + 1 + high) / 2]);    }    RVMMethod target=targets[middle];    if (target.isStatic()) {      asm.emitLAddrToc(S0,target.getOffset());    } else {      asm.emitLAddrOffset(S0,S0,target.getOffset());    }    asm.emitMTCTR(S0);    asm.emitBCCTR();    if (low < middle) {      insertStubCase(asm,sigIds,targets,bcIndices,low,middle - 1);    }    if (middle < high) {      insertStubCase(asm,sigIds,targets,bcIndices,middle + 1,high);    }  }}  }
class C{  public void finishActivityFromChild(Activity child,int requestCode){  try {    ActivityManagerNative.getDefault().finishSubActivity(mToken,child.mEmbeddedID,requestCode);  } catch (  RemoteException e) {  }}  }
class C{  public static void addRiver(IBoard board,HashMap<IHex,Point> reverseHex){  int minElevation=Integer.MAX_VALUE;  HashSet<IHex> riverHexes=new HashSet<IHex>();  IHex field;  Point p=null;  int direction=0;  int nextLeft=0;  int nextRight=0;  int width=board.getWidth();  int height=board.getHeight();  if ((width < 5) || (height < 5)) {    return;  }switch (Compute.randomInt(4)) {case 0:    p=new Point(0,Compute.randomInt(5) - 2 + height / 2);  direction=Compute.randomInt(2) + 1;nextLeft=direction - 1;nextRight=direction + 1;break;case 1:p=new Point(width - 1,Compute.randomInt(5) - 2 + height / 2);direction=Compute.randomInt(2) + 4;nextLeft=direction - 1;nextRight=(direction + 1) % 6;break;case 2:case 3:p=new Point(Compute.randomInt(5) - 2 + width / 2,0);direction=2;nextRight=3;nextLeft=4;break;}field=board.getHex(p.x,p.y);ITerrainFactory f=Terrains.getTerrainFactory();do {field.removeAllTerrains();field.addTerrain(f.createTerrain(Terrains.WATER,1));riverHexes.add(field);p=reverseHex.get(field);riverHexes.addAll(extendRiverToSide(board,p,Compute.randomInt(3),nextLeft,reverseHex));riverHexes.addAll(extendRiverToSide(board,p,Compute.randomInt(3),nextRight,reverseHex));switch (Compute.randomInt(4)) {case 0:field=board.getHexInDir(p.x,p.y,(direction + 5) % 6);break;case 1:field=board.getHexInDir(p.x,p.y,(direction + 1) % 6);break;default :field=board.getHexInDir(p.x,p.y,direction);break;}} while (field != null);HashSet<IHex> tmpRiverHexes=new HashSet<IHex>(riverHexes);while (!tmpRiverHexes.isEmpty()) {Iterator<IHex> iter=tmpRiverHexes.iterator();field=iter.next();if (field.getLevel() < minElevation) {minElevation=field.getLevel();}tmpRiverHexes.remove(field);Point thisHex=reverseHex.get(field);for (int i=0; i < 6; i++) {field=board.getHexInDir(thisHex.x,thisHex.y,i);if ((field != null) && (field.getLevel() < minElevation)) {minElevation=field.getLevel();}tmpRiverHexes.remove(field);}}Iterator<IHex> iter=riverHexes.iterator();while (iter.hasNext()) {field=iter.next();field.setLevel(minElevation);}return;}  }
class C{  public static Collection prefix(Collection c,String pref){  Collection result=new Vector();synchronized (c) {    Iterator i=c.iterator();    while (i.hasNext()) {      Object s=i.next();      if (s instanceof String && ((String)s).startsWith(pref))       result.add(s);    }  }  return result;}  }
class C{  public ShowEntityDialogAction(OdorWorldEntity entity){  super("Edit entity");  this.entity=entity;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Prefs.png"));  putValue(SHORT_DESCRIPTION,"Edit entity...");}  }
class C{  public Vertex processListening(Vertex input,Vertex sentence,Vertex speaker,Vertex conversation,List<Relationship> targets,Network network,LanguageState state){  if (targets != null) {    for (int index=0; index < targets.size(); index++) {      Vertex target=targets.get(index).getTarget();      Vertex lastInput=getLastInputInConversation(conversation,target,1);      if (input == lastInput) {        return sentence;      }      if (lastInput == null) {        continue;      }      Vertex lastSentence=lastInput.mostConscious(Primitive.INPUT);      Vertex mimic=lastInput.getRelationship(Primitive.MIMIC);      if (mimic != null) {        lastSentence=mimic.mostConscious(Primitive.INPUT);      }      if (lastSentence == null) {        continue;      }      float value=1.0f / (index + (1 / this.learningRate));      if (!shouldLearn(input,speaker)) {        lastInput.addWeakRelationship(Primitive.RESPONSE,input,value);        input.addWeakRelationship(Primitive.QUESTION,lastInput,value);      } else {        Vertex previousQuestionInput=lastInput.getRelationship(Primitive.QUESTION);        sentence.addWeakRelationship(Primitive.QUESTION,lastSentence,value);        lastInput.addWeakRelationship(Primitive.RESPONSE,input,value);        lastSentence.associateAll(Primitive.WORD,lastSentence,Primitive.QUESTION);        input.addWeakRelationship(Primitive.QUESTION,lastInput,value);        Relationship relationship=null;        if (index == 0) {          relationship=getBot().mind().getThought(Comprehension.class).checkTemplate(input,network);          if (relationship == null) {            relationship=lastSentence.addWeakRelationship(Primitive.RESPONSE,sentence,value);            network.checkReduction(lastSentence);            lastSentence.weakAssociateAll(Primitive.SYNONYM,sentence,Primitive.RESPONSE,value);          }        } else {          relationship=lastSentence.addWeakRelationship(Primitive.RESPONSE,sentence,value);        }        addSentencePreviousMeta(relationship,previousQuestionInput,network);      }      log("Listening sentence",Level.FINE,lastSentence);    }  }  if (speaker != null) {    Vertex lastInput=getLastInputInConversation(speaker,conversation,1);    if (lastInput != null) {      Vertex lastSentence=lastInput.mostConscious(Primitive.INPUT);      if (lastSentence != null) {        lastSentence.addRelationship(Primitive.NEXT,sentence);        sentence.addRelationship(Primitive.PREVIOUS,lastSentence);      }    }  }  return sentence;}  }
class C{  public boolean isExactMatch(MIMEType otherType){  return isExactMatch(otherType,true);}  }
class C{  public static void expandNode(final JTree tree,final Object object){  tree.expandPath(new TreePath(findNode(tree,object).getPath()));  tree.validate();}  }
class C{  private void showUnreadMessagesNotification(){  Intent intent=new Intent(this,MainActivity.class);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);  Notification.Builder builder=new Notification.Builder(getApplicationContext());  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.unread_notification_title) + " (" + MessageStore.getInstance(this).getUnreadCount()+ ")");  builder.setContentText(getString(R.string.unread_notification_content) + " (" + ExchangeHistoryTracker.getInstance().getExchangeHistory()+ ")");  Resources res=this.getResources();  BitmapDrawable largeIconDrawable;  if (Build.VERSION.SDK_INT >= 21) {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher,null);  } else {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher);  }  Bitmap largeIcon=largeIconDrawable.getBitmap();  int height=(int)res.getDimension(android.R.dimen.notification_large_icon_height);  int width=(int)res.getDimension(android.R.dimen.notification_large_icon_width);  largeIcon=Bitmap.createScaledBitmap(largeIcon,width,height,false);  builder.setLargeIcon(largeIcon);  builder.setAutoCancel(true);  builder.setTicker(getText(R.string.unread_notification_content));  builder.setSmallIcon(R.mipmap.ic_launcher_small);  builder.setDefaults(Notification.DEFAULT_SOUND);  NotificationManager nManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nManager.notify(NOTIFICATION_ID,builder.build());}  }
class C{  @Deprecated public RegionAttributes<K,V> createRegionAttributes(){  return create();}  }
class C{  public ArrayLongCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.447 -0500",hash_original_method="D88879F567A4CA145787F3AF3B8F5F18",hash_generated_method="245D7C7EBEDC071B4A50B10CD6BDE868") public NinePatch(Bitmap bitmap,byte[] chunk,String srcName){  mBitmap=bitmap;  mChunk=chunk;  mSrcName=srcName;  validateNinePatchChunk(mBitmap.ni(),chunk);}  }
class C{  public static void dumpApplicationInfoList(String tag,String label,ArrayList<AppInfo> list){  Log.d(tag,label + " size=" + list.size());  for (  AppInfo info : list) {    Log.d(tag,"   title=\"" + info.title + "\" iconBitmap="+ info.iconBitmap+ " componentName="+ info.componentName.getPackageName());  }}  }
class C{  public static Workflow.Method unlinkBlockSnapshotSessionTargetMethod(URI systemURI,URI snapSessionURI,URI snapshotURI,Boolean deleteTarget){  return new Workflow.Method(UNLINK_SNAPSHOT_SESSION_TARGET_METHOD,systemURI,snapSessionURI,snapshotURI,deleteTarget);}  }
class C{  public static String toHex(byte[] buf){  return toHex(buf,0,buf.length);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType, outputShapeType=ShapeType.POLYLINE;  int[] parts={0};  double psi=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  MinimizationCriterion minimizationCriteria=MinimizationCriterion.AREA;  if (args[1].toLowerCase().contains("peri")) {    minimizationCriteria=MinimizationCriterion.PERIMETER;  }  String outputFile=args[2];  if (args[3].toLowerCase().contains("true")) {    outputShapeType=ShapeType.POLYGON;  } else {    outputShapeType=ShapeType.POLYLINE;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    DBFField fields[]=new DBFField[4];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("SHRT_AXIS");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("LNG_AXIS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    fields[3]=new DBFField();    fields[3].setName("ELONGATION");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(10);    fields[3].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    MinimumBoundingRectangle mbr=new MinimumBoundingRectangle(minimizationCriteria);    int recordNum;    if (shapeType.getBaseType() == ShapeType.POLYGON || shapeType.getBaseType() == ShapeType.POLYLINE) {      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        mbr.setCoordinates(vertices);        double[][] points=mbr.getBoundingBox();        Object[] rowData=new Object[4];        rowData[0]=(double)recordNum;        rowData[1]=mbr.getShortAxisLength();        rowData[2]=mbr.getLongAxisLength();        rowData[3]=mbr.getElongationRatio();        Geometry poly;        if (outputShapeType == ShapeType.POLYLINE) {          poly=new PolyLine(parts,points);        } else {          poly=new Polygon(parts,points);        }        output.addRecord(poly,rowData);        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      ArrayList<Double> pointsX=new ArrayList<>();      ArrayList<Double> pointsY=new ArrayList<>();      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        int numVertices=vertices.length;        for (i=0; i < numVertices; i++) {          pointsX.add(vertices[i][0]);          pointsY.add(vertices[i][1]);        }        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          if (cancelOp) {            cancelOperation();            return;          }        }        oldProgress=progress;      }      vertices=new double[pointsX.size()][2];      for (i=0; i < vertices.length; i++) {        vertices[i][0]=pointsX.get(i);        vertices[i][1]=pointsY.get(i);      }      mbr.setCoordinates(vertices);      double[][] points=mbr.getBoundingBox();      Object[] rowData=new Object[4];      rowData[0]=1.0d;      rowData[1]=mbr.getShortAxisLength();      rowData[2]=mbr.getLongAxisLength();      rowData[3]=mbr.getElongationRatio();      Geometry poly;      if (outputShapeType == ShapeType.POLYLINE) {        poly=new PolyLine(parts,points);      } else {        poly=new Polygon(parts,points);      }      output.addRecord(poly,rowData);    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testDescriptorValidatorException() throws Exception {  FileDescriptorProto fileDescriptorProto=FileDescriptorProto.newBuilder().setName("foo.proto").addMessageType(DescriptorProto.newBuilder().setName("Foo").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setType(FieldDescriptorProto.Type.TYPE_INT32).setName("foo").setNumber(1).setDefaultValue("invalid").build()).build()).build();  try {    Descriptors.FileDescriptor.buildFrom(fileDescriptorProto,new FileDescriptor[0]);    fail("DescriptorValidationException expected");  } catch (  DescriptorValidationException e) {    assertTrue(e.getMessage().indexOf("foo") != -1);    assertTrue(e.getMessage().indexOf("Foo") != -1);    assertTrue(e.getMessage().indexOf("invalid") != -1);    assertTrue(e.getCause() instanceof NumberFormatException);    assertTrue(e.getCause().getMessage().indexOf("invalid") != -1);  }}  }
class C{  private static void logValidationFailure(ValidationException vf){  logger.logWarn(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.WARN_VALIDATION_FAILED);}  }
class C{  public Vertex synthesize(Vertex source,Vertex phrase){  log("synthesize",Level.FINE,phrase);  return synthesizeResponse(null,phrase,null,false,null,phrase.getNetwork());}  }
class C{  public void dispose(){  m_model.dispose();}  }
class C{  public static <E>Collection<E> constrainedCollection(Collection<E> collection,Constraint<? super E> constraint){  return new ConstrainedCollection<E>(collection,constraint);}  }
class C{  public static String serializeAsBase64EncodedString(Object b) throws IOException {  byte[] rawBytes=serializeAsByteArray(b);  byte[] encodedBytes=Base64.encodeBase64(rawBytes);  return new String(encodedBytes,"UTF-8");}  }
class C{  public void generateNewScramble(){  if (scrambleEnabled) {    scrambleGeneratorAsync.cancel(true);    scrambleGeneratorAsync=new GenerateScrambleSequence();    scrambleGeneratorAsync.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);  }}  }
class C{  @Override public void replyReceived(TOMMessage reply){  Logger.println("Synchronously received reply from " + reply.getSender() + " with sequence number "+ reply.getSequence());  try {    canReceiveLock.lock();    if (reqId == -1) {      Logger.println("throwing out request: sender=" + reply.getSender() + " reqId="+ reply.getSequence());      canReceiveLock.unlock();      return;    }    int pos=getViewManager().getCurrentViewPos(reply.getSender());    if (pos < 0) {      canReceiveLock.unlock();      return;    }    int sameContent=1;    if (reply.getSequence() == reqId && reply.getReqType() == requestType) {      Logger.println("Receiving reply from " + reply.getSender() + " with reqId:"+ reply.getSequence()+ ". Putting on pos="+ pos);      if (requestType == TOMMessageType.UNORDERED_HASHED_REQUEST) {        response=hashResponseController.getResponse(pos,reply);        if (response != null) {          reqId=-1;          this.sm.release();          canReceiveLock.unlock();          return;        }      } else {        if (replies[pos] == null) {          receivedReplies++;        }        replies[pos]=reply;        for (int i=0; i < replies.length; i++) {          if ((i != pos || getViewManager().getCurrentViewN() == 1) && replies[i] != null && (comparator.compare(replies[i].getContent(),reply.getContent()) == 0)) {            sameContent++;            if (sameContent >= replyQuorum) {              response=extractor.extractResponse(replies,sameContent,pos);              reqId=-1;              this.sm.release();              canReceiveLock.unlock();              return;            }          }        }      }      if (response == null) {        if (requestType.equals(TOMMessageType.ORDERED_REQUEST)) {          if (receivedReplies == getViewManager().getCurrentViewN()) {            reqId=-1;            this.sm.release();          }        } else         if (requestType.equals(TOMMessageType.UNORDERED_HASHED_REQUEST)) {          if (hashResponseController.getNumberReplies() == getViewManager().getCurrentViewN()) {            reqId=-1;            this.sm.release();          }        } else {          if (receivedReplies != sameContent) {            reqId=-1;            this.sm.release();          }        }      }    } else {      Logger.println("Ignoring reply from " + reply.getSender() + " with reqId:"+ reply.getSequence()+ ". Currently wait reqId= "+ reqId);    }    canReceiveLock.unlock();  } catch (  Exception ex) {    System.out.println("Problem at ServiceProxy.ReplyReceived()");    ex.printStackTrace();    canReceiveLock.unlock();  }}  }
class C{  private void scanManagedSystems(VPlexApiClient client,StorageProvider mgmntServer,Map<String,StorageSystemViewObject> scanCache) throws VPlexCollectionException {  try {    List<String> clusterAssemblyIds=new ArrayList<String>();    String systemSerialNumber=getSystemSerialNumber(client,mgmntServer,clusterAssemblyIds);    String systemNativeGUID=NativeGUIDGenerator.generateNativeGuid(mgmntServer.getInterfaceType(),systemSerialNumber);    s_logger.info("Scanned VPLEX system {}",systemNativeGUID);    checkForClusterHardwareChange(clusterAssemblyIds,systemNativeGUID,systemSerialNumber,client,scanCache,mgmntServer);    StorageSystemViewObject systemViewObj=null;    if (scanCache.containsKey(systemNativeGUID)) {      s_logger.info("VPLEX system {} was previously found.",systemNativeGUID);      systemViewObj=scanCache.get(systemNativeGUID);    } else {      s_logger.info("Found new VPLEX system {}, adding to scan cache.",systemNativeGUID);      systemViewObj=new StorageSystemViewObject();    }    systemViewObj.setDeviceType(mgmntServer.getInterfaceType());    systemViewObj.addprovider(mgmntServer.getId().toString());    systemViewObj.setProperty(StorageSystemViewObject.SERIAL_NUMBER,systemSerialNumber);    systemViewObj.setProperty(StorageSystemViewObject.STORAGE_NAME,systemNativeGUID);    scanCache.put(systemNativeGUID,systemViewObj);  } catch (  Exception e) {    s_logger.error("Error scanning managed systems for {}:",mgmntServer.getIPAddress(),e);    throw VPlexCollectionException.exceptions.failedScanningManagedSystems(mgmntServer.getIPAddress(),e.getLocalizedMessage(),e);  }}  }
class C{  public static Function<String> jsonExtract(Object json,String... paths){  return new JSONArgumentFunction<>("json_extract",json,(Object[])paths);}  }
class C{  public static short[] toShortArray(Number[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public boolean fullScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  mTempRect.top=0;  mTempRect.bottom=height;  if (down) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.bottom=view.getBottom() + mPaddingBottom;      mTempRect.top=mTempRect.bottom - height;    }  }  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  @ObjectiveCName("findAllPhotosWithPeer:") public Command<List<MessageSearchEntity>> findAllPhotos(Peer peer){  return null;}  }
class C{  public MLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory,boolean delegateToCLR){  super(urls,parent,factory);  init(delegateToCLR);}  }
class C{  @Override public IndependentDistribution copy(){  return new SingleValueDistribution(variable,value);}  }
class C{  @Override public void connect(){  try {    ServiceArgs loginArgs=new ServiceArgs();    loginArgs.setUsername(userName);    loginArgs.setPassword(password);    loginArgs.setHost(host);    loginArgs.setPort(port);    service=Service.connect(loginArgs);  } catch (  Exception e) {    throw new RuntimeException("closing connection",e);  }}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(Source source) throws XMLStreamException {  try {    if (source instanceof StreamSource) {      StreamSource ss=(StreamSource)source;      return new WbXmlStreamReader(ss.getInputStream(),(WbXmlDefinition)props.get(DEFINITION_PROPERTY));    } else {      throw new XMLStreamException("WBXML only support StreamSource with InputStream!");    }  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public synchronized void ensureOpen() throws IOException {  if (!mOpen) {    throw new IOException("Connection closed");  }}  }
class C{  private void checkFactoryClass(@NonNull TypeMirror factoryTypeMirror,@NonNull TypeElement type){  if (seenFactoryTypeMirror == null) {    seenFactoryTypeMirror=factoryTypeMirror;    return;  }  if (!types.isSameType(factoryTypeMirror,seenFactoryTypeMirror)) {    String errorMsg="More than one factory class referenced by models " + seenFactoryTypeMirror.toString() + " and "+ factoryTypeMirror.toString();    abortWithError(errorMsg,type);  }}  }
class C{  private void jbInit() throws Exception {  this.setBackground(Color.white);  this.setName("splash");  this.setUndecorated(true);  productLabel.setAlignment(Label.CENTER);  message.setFont(new java.awt.Font("Serif",3,20));  message.setForeground(SystemColor.activeCaption);  message.setAlignment(Label.CENTER);  contentPanel.setLayout(contentLayout);  contentPanel.setName("splashContent");  contentPanel.setBackground(Color.white);  productLabel.setFont(new java.awt.Font("Serif",2,10));  productLabel.setForeground(Color.blue);  productLabel.setText(Adempiere.getSubtitle());  contentPanel.add(cImage,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(10,5,0,10),0,0));  contentPanel.add(productLabel,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,5,0,10),0,0));  contentPanel.add(message,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,10,10),0,0));  this.add(aImage,BorderLayout.WEST);  this.add(contentPanel,BorderLayout.EAST);}  }
class C{  public boolean deleteDb(){  if (aDbHasEverBeenCreatedInThisProcess) {    return false;  }  try {    FileUtils.cleanDirectory(dbDirectory);  } catch (  final IOException e) {    return false;  }  return true;}  }
class C{  private void checkAddable(String name){  if (name2entry.containsKey(name)) {    throw new IllegalArgumentException("Other filter is using the same name '" + name + "'");  }}  }
class C{  private void generateIterators(TagPluginContext ctxt){  ctxt.generateDeclaration("ObjectArrayIterator","private Iterator toIterator(final Object[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return a[index++];}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("booleanArrayIterator","private Iterator toIterator(final boolean[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Boolean(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("byteArrayIterator","private Iterator toIterator(final byte[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Byte(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("charArrayIterator","private Iterator toIterator(final char[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Character(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("shortArrayIterator","private Iterator toIterator(final short[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Short(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("intArrayIterator","private Iterator toIterator(final int[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Integer(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("longArrayIterator","private Iterator toIterator(final long[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Long(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("floatArrayIterator","private Iterator toIterator(final float[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Float(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("doubleArrayIterator","private Iterator toIterator(final double[] a){\n" + "  return (new Iterator() {\n" + "    int index=0;\n"+ "    public boolean hasNext() {\n"+ "      return index < a.length;}\n"+ "    public Object next() {\n"+ "      return new Double(a[index++]);}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");  ctxt.generateDeclaration("enumIterator","private Iterator toIterator(final Enumeration e){\n" + "  return (new Iterator() {\n" + "    public boolean hasNext() {\n"+ "      return e.hasMoreElements();}\n"+ "    public Object next() {\n"+ "      return e.nextElement();}\n"+ "    public void remove() {}\n"+ "  });\n"+ "}");}  }
class C{  public boolean isValid(Validator validator,ExceptionMessageListener receiver){  return validator.isValid(m_value,m_invalidValue,null,receiver);}  }
class C{  public static <T>List<Future<T>> invokeAll(@NotNull Collection<Callable<T>> tasks,ExecutorService executorService) throws Throwable {  if (executorService == null) {    for (    Callable<T> task : tasks) {      task.call();    }    return null;  }  List<Future<T>> futures=new ArrayList<Future<T>>(tasks.size());  boolean done=false;  try {    for (    Callable<T> t : tasks) {      Future<T> future=executorService.submit(t);      futures.add(future);    }    for (    Future f : futures) {      ((Runnable)f).run();    }    for (    Future f : futures) {      try {        f.get();      } catch (      CancellationException ignore) {      }catch (      ExecutionException e) {        Throwable cause=e.getCause();        if (cause != null) {          throw cause;        }      }    }    done=true;  }  finally {    if (!done) {      for (      Future f : futures) {        f.cancel(false);      }    }  }  return futures;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.869 -0500",hash_original_method="6C6F96FB15913D1AD047295FEBDE6F36",hash_generated_method="FF4D73C7C312E8F535E4F06C81F56B2A") public String encodeMessage(){  String retval;  if (requestLine != null) {    this.setRequestLineDefaults();    retval=requestLine.encode() + super.encodeSIPHeaders();  } else   if (this.isNullRequest()) {    retval="\r\n\r\n";  } else   retval=super.encodeSIPHeaders();  return retval;}  }
class C{  protected static JCas jCasWithLemmas() throws UIMAException {  JCas jCas=JCasFactory.createJCas();  jCas.setDocumentText("token1 token2");  DocumentMetaData metaData=DocumentMetaData.create(jCas);  metaData.setDocumentId("lemmasTest");  metaData.addToIndexes(jCas);  Token token1=new Token(jCas,0,6);  Token token2=new Token(jCas,7,13);  Lemma lemma1=new Lemma(jCas,0,6);  lemma1.setValue("lemma1");  Lemma lemma2=new Lemma(jCas,7,13);  lemma2.setValue("lemma2");  token1.setLemma(lemma1);  token2.setLemma(lemma2);  token1.addToIndexes(jCas);  token2.addToIndexes(jCas);  lemma1.addToIndexes(jCas);  lemma2.addToIndexes(jCas);  return jCas;}  }
class C{  public DockerSlaveTemplate(@Nonnull String id) throws FormException {  if (id == null) {    throw new FormException("Hidden id must not be null","id");  }  this.id=id;}  }
class C{  public RandomGroupsData(){  this.dataArray=new Object[0][];}  }
class C{  protected final Name _handleUnusualFieldName(int ch) throws IOException, JsonParseException {  if (ch == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    return _parseApostropheFieldName();  }  if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {    _reportUnexpectedChar(ch,"was expecting double-quote to start field name");  }  final int[] codes=CharTypes.getInputCodeUtf8JsNames();  if (codes[ch] != 0) {    _reportUnexpectedChar(ch,"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");  }  int[] quads=_quadBuffer;  int qlen=0;  int currQuad=0;  int currQuadBytes=0;  while (true) {    if (currQuadBytes < 4) {      ++currQuadBytes;      currQuad=(currQuad << 8) | ch;    } else {      if (qlen >= quads.length) {        _quadBuffer=quads=growArrayBy(quads,quads.length);      }      quads[qlen++]=currQuad;      currQuad=ch;      currQuadBytes=1;    }    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(" in field name");      }    }    ch=_inputBuffer[_inputPtr] & 0xFF;    if (codes[ch] != 0) {      break;    }    ++_inputPtr;  }  if (currQuadBytes > 0) {    if (qlen >= quads.length) {      _quadBuffer=quads=growArrayBy(quads,quads.length);    }    quads[qlen++]=currQuad;  }  Name name=_symbols.findName(quads,qlen);  if (name == null) {    name=addName(quads,qlen,currQuadBytes);  }  return name;}  }
class C{  public Image(double lat,double lon){  super(lat,lon);}  }
class C{  private void zzDoEOF() throws java.io.IOException {  if (!zzEOFDone) {    zzEOFDone=true;    yyclose();  }}  }
class C{  private void displayMessage(String text,Image image){  if ((null == cmrMessageComposite) || cmrMessageComposite.isDisposed()) {    cmrMessageComposite=toolkit.createComposite(upperComposite);  } else {    for (    Control c : cmrMessageComposite.getChildren()) {      if (!c.isDisposed()) {        c.dispose();      }    }  }  cmrMessageComposite.setLayout(new GridLayout(2,false));  cmrMessageComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));  toolkit.createLabel(cmrMessageComposite,null).setImage(image);  toolkit.createLabel(cmrMessageComposite,text,SWT.WRAP).setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,true));}  }
class C{  public static void cleanStaleReferences(URI exportGroupURI,DbClient dbClient){  ExportGroup exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);  cleanStaleMaskReferences(exportGroup,dbClient);  cleanStaleInitiatorReferences(exportGroup,dbClient);  cleanStaleHostReferences(exportGroup,dbClient);  cleanStaleClusterReferences(exportGroup,dbClient);  dbClient.updateObject(exportGroup);}  }
class C{  @Override protected void processPositioning(final RPObject base,final RPObject diff){  final int oldx=base.getInt("x");  final int oldy=base.getInt("y");  int newX=oldx;  int newY=oldy;  if (diff.has("x")) {    newX=diff.getInt("x");  }  if (diff.has("y")) {    newY=diff.getInt("y");  }  Direction tempDirection;  if (diff.has("dir")) {    tempDirection=Direction.build(diff.getInt("dir"));    setDirection(tempDirection);  } else   if (base.has("dir")) {    tempDirection=Direction.build(base.getInt("dir"));    setDirection(tempDirection);  } else {    tempDirection=Direction.STOP;  }  double speed;  boolean speedChanged=false;  if (diff.has("speed")) {    speed=diff.getDouble("speed");    speedChanged=true;  } else   if (base.has("speed")) {    speed=base.getDouble("speed");  } else {    speed=0;  }  onMove(newX,newY,tempDirection,speed);  if (speedChanged) {    fireChange(PROP_SPEED);  }  boolean positionChanged=false;  if ((Direction.STOP == tempDirection) || (speed == 0)) {    setSpeed(0.0,0.0);    if (!(compareDouble(y,newY,EPSILON) && compareDouble(x,newX,EPSILON))) {      positionChanged=true;    }    x=newX;    y=newY;  }  if (positionChanged || ((oldx != newX) && (oldy != newY))) {    onPosition(newX,newY);  }}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  protected ForeignKeyConstraint buildForeignKeyConstraint(FieldDefinition field,DatabasePlatform platform){  Vector sourceFields=new Vector();  Vector targetFields=new Vector();  ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint();  DatabaseField tempTargetField=new DatabaseField(field.getForeignKeyFieldName());  DatabaseField tempSourceField=new DatabaseField(field.getName());  sourceFields.add(tempSourceField.getName());  targetFields.add(tempTargetField.getName());  fkConstraint.setSourceFields(sourceFields);  fkConstraint.setTargetFields(targetFields);  fkConstraint.setTargetTable(tempTargetField.getTable().getQualifiedNameDelimited(platform));  String tempName=buildForeignKeyConstraintName(this.getName(),tempSourceField.getName(),platform.getMaxForeignKeyNameSize(),platform);  fkConstraint.setName(tempName);  return fkConstraint;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    return basicGetOwner() != null;}return super.eIsSet(featureID);}  }
class C{  public void endDrawing(GL10 gl){  checkState(STATE_DRAWING,STATE_INITIALIZED);  gl.glDisable(GL10.GL_BLEND);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPopMatrix();  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPopMatrix();  gl.glDisable(GL10.GL_TEXTURE_2D);}  }
class C{  public int responseCode(){  return responseCode;}  }
class C{  public static <V>PropertyValuesHolder ofObject(Property property,TypeEvaluator<V> evaluator,V... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(property);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  static ServiceAccountCredentials fromJson(Map<String,Object> json,HttpTransportFactory transportFactory) throws IOException {  String clientId=(String)json.get("client_id");  String clientEmail=(String)json.get("client_email");  String privateKeyPkcs8=(String)json.get("private_key");  String privateKeyId=(String)json.get("private_key_id");  if (clientId == null || clientEmail == null || privateKeyPkcs8 == null || privateKeyId == null) {    throw new IOException("Error reading service account credential from JSON, " + "expecting  'client_id', 'client_email', 'private_key' and 'private_key_id'.");  }  return fromPkcs8(clientId,clientEmail,privateKeyPkcs8,privateKeyId,null,transportFactory,null);}  }
class C{  public static DataDisplayTable listCharBlockCoverage(Font font){  String[] header={"Block","Coverage"};  Align[] displayAlignment={Align.Left,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  CMap cmap=FontUtils.getUCSCMap(font);  int totalCount=0;  for (int i=0; i < UnicodeBlockData.numBlocks(); i++) {    String block=UnicodeBlockData.getBlockName(i);    UnicodeSet set=null;    try {      set=new UnicodeSet("[[:Block=" + block + ":]-[:gc=Unassigned:]-[:gc=Control:]]");    } catch (    IllegalIcuArgumentException e) {      continue;    }    int count=0;    for (    String charStr : set) {      if (cmap.glyphId(UCharacter.codePointAt(charStr,0)) > 0) {        count++;      }    }    if (count > 0) {      table.add(Arrays.asList(new String[]{String.format("%s [%s, %s]",block,UnicodeBlockData.getBlockStartCode(i),UnicodeBlockData.getBlockEndCode(i)),String.format("%d / %d",count,set.size())}));    }    totalCount+=count;  }  UnicodeSet controlSet=new UnicodeSet("[[:gc=Control:]]");  for (  String charStr : controlSet) {    if (cmap.glyphId(UCharacter.codePointAt(charStr,0)) > 0) {      totalCount++;    }  }  int nonUnicodeCount=numChars(font) - totalCount;  if (nonUnicodeCount > 0) {    table.add(Arrays.asList(new String[]{"Unknown",String.format("%d",nonUnicodeCount)}));  }  return table;}  }
class C{  public JCalParseException(JsonToken expected,JsonToken actual){  super("Expected " + expected + " but was "+ actual+ ".");  this.expected=expected;  this.actual=actual;}  }
class C{  public BigDecimal aggregate(String sqlExpression,String sqlFunction) throws DBException {  return aggregate(sqlExpression,sqlFunction,BigDecimal.class);}  }
class C{  public final void changeNick(String newNick){  this.sendRawLine("NICK " + newNick);}  }
class C{  public boolean hasWindow(){  return mWindow != null;}  }
class C{  public boolean isSourceEmpty(){  return source == null;}  }
class C{  public static double[][][] readHashFunctions(InputStream inputStream) throws IOException {  ObjectInputStream ois=new ObjectInputStream(new GZIPInputStream(inputStream));  int bits=ois.readInt();  int dimensions=ois.readInt();  int numFunctionBundles=ois.readInt();  double[][][] hashFunctions=new double[numFunctionBundles][bits][dimensions];  for (int i=0; i < hashFunctions.length; i++) {    double[][] functionBundle=hashFunctions[i];    for (int j=0; j < functionBundle.length; j++) {      double[] bitFunctions=functionBundle[j];      for (int k=0; k < bitFunctions.length; k++) {        bitFunctions[k]=ois.readFloat();      }    }  }  BitSampling.hashes=hashFunctions;  return hashFunctions;}  }
class C{  protected void removeListeners(){  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();  if (topLevelWindows != null) {    for (int i=0; i < topLevelWindows.length; i++) {      if (topLevelWindows[i] instanceof Accessible) {        removeListeners((Accessible)topLevelWindows[i]);      }    }  }}  }
class C{  public static void errms(StreamTokenizer tokenizer,String theMsg) throws IOException {  throw new IOException(theMsg + ", read " + tokenizer.toString());}  }
class C{  public Intersection(MatchFilter filter,MatchCollector collector){  this.filter=filter;  this.collector=collector;}  }
class C{  private void doUpdate(){  time++;  LOGGER.trace("starting: " + time);  try {    Thread.sleep(workspace.getUpdateDelay());  } catch (  InterruptedException e) {    e.printStackTrace();  }  for (  UpdateAction action : updateActionManager.getActionList()) {    action.invoke();  }  synchManager.runTasks();  notifyWorkspaceUpdated();  LOGGER.trace("done: " + time);}  }
class C{  public CacheObject(V object){  this.object=object;}  }
class C{  public JarEntry(ZipEntry ze){  super(ze);}  }
class C{  public Builder deleteIms(){  deleteFields.add("ims");  return this;}  }
class C{  public ReceiptHeader initialiseReceiptModelWithBillInfo(final BillInfo collDetails,final Fund fund,final Department dept) throws ValidationException {  ReceiptHeader receiptHeader=null;  final StringBuilder collModesNotAllowed=new StringBuilder();  if (collDetails.getCollectionModesNotAllowed() != null)   for (  final String collModeNotAllwd : collDetails.getCollectionModesNotAllowed()) {    if (collModesNotAllowed.length() > 0)     collModesNotAllowed.append(',');    collModesNotAllowed.append(collModeNotAllwd);  }  for (  final BillPayeeDetails billPayee : collDetails.getPayees()) {    receiptHeader=new ReceiptHeader();    for (    final BillDetails billDetail : billPayee.getBillDetails()) {      final ServiceDetails service=(ServiceDetails)persistenceService.findByNamedQuery(CollectionConstants.QUERY_SERVICE_BY_CODE,collDetails.getServiceCode());      if (service == null)       throw new ValidationException(Arrays.asList(new ValidationError("billreceipt.improperbilldata.missingservice","billreceipt.improperbilldata.missingservice")));      receiptHeader=new ReceiptHeader(billDetail.getRefNo(),billDetail.getBilldate(),billDetail.getConsumerCode(),billDetail.getDescription(),billDetail.getTotalAmount(),billDetail.getMinimumAmount(),collDetails.getPartPaymentAllowed(),collDetails.getOverrideAccountHeadsAllowed(),collDetails.getCallbackForApportioning(),collDetails.getDisplayMessage(),service,collModesNotAllowed.toString(),billPayee.getPayeeName(),billPayee.getPayeeAddress(),billPayee.getPayeeEmail());      if (collDetails.getTransactionReferenceNumber() != null) {        receiptHeader.setManualreceiptnumber(collDetails.getTransactionReferenceNumber());        receiptHeader.setManualreceiptdate(new Date());      }      final Boundary boundary=boundaryService.getActiveBoundaryByBndryNumAndTypeAndHierarchyTypeCode(Long.valueOf(billDetail.getBoundaryNum()),billDetail.getBoundaryType(),CollectionConstants.BOUNDARY_HIER_CODE_ADMIN);      final Functionary functionary=(Functionary)persistenceService.findByNamedQuery(CollectionConstants.QUERY_FUNCTIONARY_BY_CODE,collDetails.getFunctionaryCode());      final Fundsource fundSource=fundSourceDAO.getFundSourceByCode(collDetails.getFundSourceCode());      final ReceiptMisc receiptMisc=new ReceiptMisc(boundary,fund,functionary,fundSource,dept,receiptHeader,null,null,null);      receiptHeader.setReceiptMisc(receiptMisc);      BigDecimal totalAmountToBeCollected=BigDecimal.valueOf(0);      Collections.sort(billDetail.getAccounts());      for (      final BillAccountDetails billAccount : billDetail.getAccounts()) {        final CChartOfAccounts account=chartOfAccountsHibernateDAO.getCChartOfAccountsByGlCode(billAccount.getGlCode());        final CFunction function=functionDAO.getFunctionByCode(billAccount.getFunctionCode());        if (billAccount.getIsActualDemand())         totalAmountToBeCollected=totalAmountToBeCollected.add(billAccount.getCrAmount()).subtract(billAccount.getDrAmount());        final ReceiptDetail receiptDetail=new ReceiptDetail(account,function,billAccount.getCrAmount().subtract(billAccount.getDrAmount()),billAccount.getDrAmount(),billAccount.getCrAmount(),Long.valueOf(billAccount.getOrder()),billAccount.getDescription(),billAccount.getIsActualDemand(),receiptHeader,billAccount.getPurpose().toString());        receiptHeader.addReceiptDetail(receiptDetail);      }      receiptHeader.setTotalAmountToBeCollected(totalAmountToBeCollected);    }  }  return receiptHeader;}  }
class C{  public DebugInputBitStream(final InputBitStream ibs,final PrintStream pw){  this.ibs=ibs;  this.pw=pw;  pw.print("[");}  }
class C{  private static MutableTreeNode simplifyTree(MutableTreeNode cur,String prefix){  if (cur instanceof PackageNode) {    PackageNode node=(PackageNode)cur;    if (node.getChildCount() == 1) {      String newprefix=(prefix != null) ? prefix + "." + (String)node.getUserObject() : (String)node.getUserObject();      cur=simplifyTree((MutableTreeNode)node.getChildAt(0),newprefix);    } else {      if (prefix != null) {        node.setUserObject(prefix + "." + (String)node.getUserObject());      }      for (int i=0; i < node.getChildCount(); i++) {        MutableTreeNode c=(MutableTreeNode)node.getChildAt(i);        MutableTreeNode c2=simplifyTree(c,null);        if (c != c2) {          node.remove(i);          node.insert(c2,i);        }      }    }  } else   if (cur instanceof ClassNode) {    ClassNode node=(ClassNode)cur;    if (prefix != null) {      node.setUserObject(prefix + "." + (String)node.getUserObject());    }  }  return cur;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public static <T extends CharSequence>PrefixMap<T> synchronize(final PrefixMap<T> prefixMap){  return new SynchronizedPrefixMap<T>(prefixMap);}  }
class C{  public static org.oscm.internal.vo.VOServiceOperationParameter convertToUp(org.oscm.vo.VOServiceOperationParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceOperationParameter newVO=new org.oscm.internal.vo.VOServiceOperationParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterId(oldVO.getParameterId());  newVO.setParameterName(oldVO.getParameterName());  newVO.setParameterValue(oldVO.getParameterValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.internal.types.enumtypes.OperationParameterType.class));  return newVO;}  }
class C{  @Override public void activate(IProject project,HttpServletRequest request) throws PublishException {  try {    final ICollection targetContainer=getTargetProjectContainer(CommonIDEParameters.getScriptingContentSandbox(request),request);    final IFolder sourceFolder=getSourceFolder(project,ICommonConstants.ARTIFACT_TYPE.SCRIPTING_SERVICES);    copyAllFromTo(sourceFolder,targetContainer,request);  } catch (  Exception ex) {    throw new PublishException(ex.getMessage(),ex);  }}  }
class C{  protected PatternCharacterImpl(){  super();}  }
class C{  public final void info(final String message,final Throwable throwable){  if (isInfoEnabled()) {    output(Priority.INFO,message,throwable);  }}  }
class C{  public ButtonColors(Color top,Color left,Color edge,Color shadow,Color interiorTop,Color interiorBottom,Color markBorder,Color markInterior){  this.top=top;  this.left=left;  this.edge=edge;  this.shadow=shadow;  this.interiorTop=interiorTop;  this.interiorBottom=interiorBottom;  this.markBorder=markBorder;  this.markInterior=markInterior;}  }
class C{  public boolean isPanTiltStatusSupported(){  return panTiltStatusSupported;}  }
class C{  protected void redefine(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  public synchronized byte[] crypt(byte[] pw,byte[] salt){  int c, i, j, pwi;  byte temp;  byte[] block=new byte[66];  byte[] iobuf=new byte[13];  pwi=0;  for (i=0; pwi < pw.length && i < 64; pwi++) {    c=pw[pwi];    for (j=0; j < 7; j++, i++) {      block[i]=(byte)((c >> (6 - j)) & 01);    }    i++;  }  setkey(block);  for (i=0; i < 66; i++) {    block[i]=0;  }  for (i=0; i < 2; i++) {    c=salt[i];    iobuf[i]=(byte)c;    if (c > 'Z')     c-=6;    if (c > '9')     c-=7;    c-='.';    for (j=0; j < 6; j++) {      if (((c >> j) & 01) != 0) {        temp=E[6 * i + j];        E[6 * i + j]=E[6 * i + j + 24];        E[6 * i + j + 24]=temp;      }    }  }  for (i=0; i < 25; i++) {    encrypt(block,0);  }  for (i=0; i < 11; i++) {    c=0;    for (j=0; j < 6; j++) {      c<<=1;      c|=block[6 * i + j];    }    c+='.';    if (c > '9') {      c+=7;    }    if (c > 'Z') {      c+=6;    }    iobuf[i + 2]=(byte)c;  }  if (iobuf[1] == 0) {    iobuf[1]=iobuf[0];  }  return (iobuf);}  }
class C{  protected void addToQuarantineQueue(NodePortTuple npt){  if (quarantineQueue.contains(npt) == false) {    quarantineQueue.add(npt);  }}  }
class C{  public int toImaginary(){  return _imag;}  }
class C{  public static String quoteIfCeylonKeyword(String name){  if (isCeylonKeyword(name))   return "\\i" + name;  return name;}  }
class C{  public void postAsMemberOf(AnnotatedTypeMirror type,AnnotatedTypeMirror owner,Element element){  addComputedTypeAnnotations(element,type);}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public static final Vec2D max(ReadonlyVec2D a,ReadonlyVec2D b){  return new Vec2D(MathUtils.max(a.x(),b.x()),MathUtils.max(a.y(),b.y()));}  }
class C{  public Iterator visibleItems(){  return items(VisiblePredicate.TRUE);}  }
class C{  public static void updateTheme(Context context,Themes theme){  Settings.of(context).edit().putString("pref_theme",theme.name()).apply();  updateTheme(context);}  }
class C{  public long currentTime(){  tc=System.currentTimeMillis();  return (long)tc;}  }
class C{  public RENAME_TO RENAME_TO(String newTableName){  return new RENAME_TO(this,newTableName);}  }
class C{  @After public void tearDown(){  properties=null;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public static String bufferToString(Buffer buffer){  return buffer.readString(Charset.defaultCharset());}  }
class C{  private static void ParsingError(String msg) throws ParseAlgorithmException {  throw new ParseAlgorithmException(msg + "\n    line " + lastTokLine+ ", column "+ lastTokCol);}  }
class C{  public boolean hasArchiveTotal(){  return hasExtension(ArchiveTotal.class);}  }
class C{  public void testClientDoubleDestroy() throws Exception {  clientDestroy();  clientDestroy();}  }
class C{  private void addPolyobjects(){  mMap.addPolyline((new PolylineOptions()).add(MELBOURNE,ADELAIDE,PERTH).color(Color.GREEN).width(5f));  mMap.addPolygon(new PolygonOptions().add(POLYGON).fillColor(Color.CYAN).strokeColor(Color.BLUE).strokeWidth(5));}  }
class C{  public Version(String v){  String[] ray=v.trim().split("\\.");  numbers=new int[ray.length];  for (int i=0; i < ray.length; i++) {    try {      numbers[i]=Integer.parseInt(ray[i]);    } catch (    NumberFormatException e) {      Log.error("Couldn't parse %s. Number %d will be zero.",v,i);      e.printStackTrace();      numbers[i]=0;    }  }  int end;  for (end=numbers.length - 1; end >= 0; end--) {    if (numbers[end] != 0)     break;  }  end++;  if (end != numbers.length) {    int[] na=new int[end];    System.arraycopy(numbers,0,na,0,end);    numbers=na;  }}  }
class C{  private static Address GetStringCritical(JNIEnvironment env,int strJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetStringCritical \n");  RuntimeEntrypoints.checkJNICountDownToGC();  String str=(String)env.getJNIRef(strJREF);  char[] strChars=java.lang.JikesRVMSupport.getBackingCharArray(str);  int strOffset=java.lang.JikesRVMSupport.getStringOffset(str);  JNIGenericHelpers.setBoolStar(isCopyAddress,false);  VM.disableGC(true);  Address strBase=Magic.objectAsAddress(strChars);  return strBase.plus(strOffset * 2);}  }
class C{  public void findChargeElementID(){  m_C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),"$C_AcctSchema_ID");  String sql="SELECT C_Element_ID " + "FROM C_AcctSchema_Element " + "WHERE ElementType='AC' AND C_AcctSchema_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_C_AcctSchema_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      m_C_Element_ID=rs.getInt(1);    }    rs.close();    pstmt.close();  } catch (  SQLException exception) {    log.log(Level.SEVERE,sql,exception);  }}  }
class C{  public static Channel inheritedChannel() throws IOException {  return SelectorProvider.provider().inheritedChannel();}  }
class C{  @Override public void run(){  amIActive=true;  String slopeHeader=null;  String aspectHeader=null;  String outputHeader=null;  String horizonAngleHeader=null;  double z;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col;  double azimuth=0;  boolean blnSlope=false;  double relativeAspect=0;  double slopeVal=0;  double aspectVal=0;  double HAval=0;  double gridRes=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      slopeHeader=args[i];    } else     if (i == 1) {      aspectHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Math.toRadians(Double.parseDouble(args[i]) - 90);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("slope")) {        blnSlope=true;      } else {        blnSlope=false;      }    } else     if (i == 4) {      if (blnSlope) {        if (args[i].toLowerCase().contains("not specified")) {          showFeedback("The horizon angle raster must be specified");          break;        }        horizonAngleHeader=args[i];      }    }  }  if ((slopeHeader == null) || aspectHeader == null || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slope=new WhiteboxRaster(slopeHeader,"r");    int rows=slope.getNumberRows();    int cols=slope.getNumberColumns();    gridRes=(slope.getCellSizeX() + slope.getCellSizeY()) / 2;    double slopeNoData=slope.getNoDataValue();    WhiteboxRaster aspect=new WhiteboxRaster(aspectHeader,"r");    if (aspect.getNumberRows() != rows || aspect.getNumberColumns() != cols) {      showFeedback("the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double aspectNoData=aspect.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",slopeHeader,WhiteboxRaster.DataType.FLOAT,slopeNoData);    output.setPreferredPalette("grey.pal");    double[] slopeData;    double[] aspectData;    if (blnSlope) {      WhiteboxRaster horizonAngle=new WhiteboxRaster(horizonAngleHeader,"r");      if (horizonAngle.getNumberRows() != rows || horizonAngle.getNumberColumns() != cols) {        showFeedback("the input images must have the same dimensions (i.e. rows and columns).");        return;      }      double HANoData=horizonAngle.getNoDataValue();      double[] HAdata;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        HAdata=horizonAngle.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;            if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData && HAdata[col] != HANoData) {              slopeVal=Math.toRadians(slopeData[col]);              aspectVal=Math.toRadians(aspectData[col]);              HAval=Math.toRadians(HAdata[col]);              relativeAspect=Math.toRadians(relativeAspect);              output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));            } else {              output.setValue(row,col,slopeNoData);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      horizonAngle.close();    } else {      HAval=0;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;          }          if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData) {            slopeVal=Math.toRadians(slopeData[col]);            aspectVal=Math.toRadians(aspectData[col]);            relativeAspect=Math.toRadians(relativeAspect);            output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));          } else {            output.setValue(row,col,slopeNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slope.close();    aspect.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public final int readUnsignedShort() throws IOException {  d.readFully(w,0,2);  return ((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  @Override public String toString(){  String superString=super.toString();  return MessageFormat.format("{0} @ {1} ({2}, {3})",superString,getSource().toString(),String.valueOf(getOffset()),String.valueOf(superString.length()));}  }
class C{  public double round(double n){  if (roundState == off) {    return n;  }  final boolean isPositive=n > 0;  int p=(roundState >> 6) & 3;  final double period;  if (p == 0) {    period=gridPeriod / 2;  } else   if (p == 1) {    period=gridPeriod;  } else {    period=gridPeriod * 2;  }  p=(roundState >> 4) & 3;  final double phase;switch (p) {case 0:    phase=0;  break;case 1:phase=period / 4;break;case 2:phase=period / 2;break;default :phase=(3 * period) / 4;break;}p=roundState & 15;if (p == 0) {double result=phase;while (result < n) {result+=period;}return result;}final double threshold=((p - 4) * period) / 8;n-=phase;double lower=0;if (n > 0) {n+=threshold;while (lower + period <= n) {lower+=period;}} else {n-=threshold;while (lower - period >= n) {lower-=period;}}n=lower;n+=phase;if (isPositive && n < 0) {n=phase % period;}if (!isPositive && n > 0) {n=(phase - (10 * period)) % period;}return n;}  }
class C{  public PropertyExistsExpression(){}  }
class C{  @Description(summary="Create the documentation from sources (incl. API Javadocs).") public void docs(){  javadoc();  copy("docs",files("src/docsrc/index.html"),"src/docsrc");  java("org.h2.build.doc.XMLChecker",null);  java("org.h2.build.code.CheckJavadoc",null);  java("org.h2.build.code.CheckTextFiles",null);  java("org.h2.build.doc.GenerateDoc",null);  java("org.h2.build.doc.GenerateHelp",null);  java("org.h2.build.i18n.PrepareTranslation",null);  java("org.h2.build.indexer.Indexer",null);  java("org.h2.build.doc.MergeDocs",null);  java("org.h2.build.doc.WebSite",null);  java("org.h2.build.doc.LinkChecker",null);  java("org.h2.build.doc.XMLChecker",null);  java("org.h2.build.doc.SpellChecker",null);  java("org.h2.build.code.CheckTextFiles",null);  beep();}  }
class C{  @SuppressWarnings("unchecked") @Override public Response onCommand(POP3Session session,Request request){  String parameters=request.getArgument();  if (parameters == null) {    return SYNTAX_ERROR;  }  String argument="";  String argument1="";  int pos=parameters.indexOf(" ");  if (pos > 0) {    argument=parameters.substring(0,pos);    argument1=parameters.substring(pos + 1);  }  if (session.getHandlerState() == POP3Session.TRANSACTION) {    int num=0;    int lines=-1;    try {      num=Integer.parseInt(argument);      lines=Integer.parseInt(argument1);    } catch (    NumberFormatException nfe) {      return SYNTAX_ERROR;    }    try {      MessageMetaData data=MessageMetaDataUtils.getMetaData(session,num);      if (data == null) {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");        return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }      List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);      String uid=data.getUid();      if (deletedUidList.contains(uid) == false) {        InputStream message=new CountingBodyInputStream(new ExtraDotInputStream(new CRLFTerminatedInputStream(session.getUserMailbox().getMessage(uid))),lines);        return new POP3StreamResponse(POP3Response.OK_RESPONSE,"Message follows",message);      } else {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") already deleted.");        return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }    } catch (    IOException ioe) {      return ERROR_MESSAGE_RETR;    }catch (    IndexOutOfBoundsException iob) {      StringBuilder exceptionBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");      return new POP3Response(POP3Response.ERR_RESPONSE,exceptionBuffer.toString());    }catch (    NoSuchElementException iob) {      StringBuilder exceptionBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");      return new POP3Response(POP3Response.ERR_RESPONSE,exceptionBuffer.toString());    }  } else {    return POP3Response.ERR;  }}  }
class C{  public static List<Path> listFilesOnly(Path directory){  List<Path> fileNames=new ArrayList<>();  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){    for (    Path path : directoryStream) {      if (Utils.isRegularFile(path)) {        String fn=path.getFileName().toString().toUpperCase();        if (!skipFolders.contains(fn) && !fn.matches(skipRegex) && !MovieModuleManager.MOVIE_SETTINGS.getMovieSkipFolders().contains(path.toFile().getAbsolutePath())) {          fileNames.add(path.toAbsolutePath());        } else {          LOGGER.debug("Skipping: " + path);        }      }    }  } catch (  IOException ex) {  }  return fileNames;}  }
class C{  public static String replaceAll(final CharSequence self,final CharSequence regex,final CharSequence replacement){  return self.toString().replaceAll(regex.toString(),replacement.toString());}  }
class C{  private void refreshTenantCrlCache() throws Exception {  Collection<String> allTenantNames=this.getAllTenants();  assert (allTenantNames != null && allTenantNames.size() > 0);  for (  String tenantName : allTenantNames) {    TenantInformation info=this.getTenantInfo(tenantName);    AuthnPolicy authnPolicy=info.getAuthnPolicy();    Validate.notNull(authnPolicy,"AuthnPolicy can not be null.");    ClientCertPolicy certPolicy=authnPolicy.getClientCertPolicy();    Validate.notNull(certPolicy,"CertPolicy can not be null.");    URL crlUrl=certPolicy.getCRLUrl();    if (crlUrl != null) {      String crlUriString=crlUrl.toString();      IdmCrlCache crlCache=TenantCrlCache.get().get(tenantName);      if (crlCache == null) {        crlCache=TenantCrlCache.get().put(tenantName,new IdmCrlCache());      }      if (null == crlCache.get(crlUriString) && !crlUriString.isEmpty()) {        try {          X509CRL crl=IdmCrlCache.downloadCrl(crlUriString);          if (null != crl) {            crlCache.put(crlUriString,crl);          } else {            throw new Exception("No CRL was download at " + crlUriString);          }        } catch (        Exception e) {          logger.error("Failed to download custom CRL at CRL refresh. " + e.getMessage());        }      }    }    _tenantCrlCache.refreshCrl(tenantName);  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MatrixNode) {    if (translateSet || scaleSet || rotationSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildMatrixNode");    matrix=(MatrixNode)child;  } else   if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidRadialGradientStrokeNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:44.625 -0500",hash_original_method="447AF20F3E8B0F9406C259A46D1AF12B",hash_generated_method="874F5813A3F49589CCC4C945CC392D71") private SystemClock(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:    return statement != null;case N4JSPackage.FOR_STATEMENT__EXPRESSION:  return expression != null;case N4JSPackage.FOR_STATEMENT__INIT_EXPR:return initExpr != null;case N4JSPackage.FOR_STATEMENT__UPDATE_EXPR:return updateExpr != null;case N4JSPackage.FOR_STATEMENT__FOR_IN:return forIn != FOR_IN_EDEFAULT;case N4JSPackage.FOR_STATEMENT__FOR_OF:return forOf != FOR_OF_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void save(){  if (workspace.changesExist()) {    if (workspace.getCurrentFile() != null) {      save(workspace.getCurrentFile());    } else {      saveAs();    }  }}  }
class C{  private void processStartedState(final State currentState) throws Throwable {switch (currentState.taskState.subStage) {case PROVISION_MANAGEMENT_HOSTS:    addHosts(currentState);  break;case CREATE_MANAGEMENT_PLANE:batchCreateManagementPlane(currentState);break;case PROVISION_ALL_HOSTS:processProvisionAllHosts(currentState);break;case ALLOCATE_CM_RESOURCES:allocateClusterManagerResources(currentState);break;case MIGRATE_DEPLOYMENT_DATA:migrateData(currentState);break;case SET_DEPLOYMENT_STATE:setDesiredDeploymentState(currentState);break;}}  }
class C{  @Override public boolean onDown(MotionEvent e){  return false;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public void rotateX(float angle){  showMethodWarning("rotateX");}  }
class C{  public DemoLoadThread(SwingSet2 swingset){  this.swingset=swingset;}  }
class C{  public static Range shift(Range base,double delta,boolean allowZeroCrossing){  ParamChecks.nullNotPermitted(base,"base");  if (allowZeroCrossing) {    return new Range(base.getLowerBound() + delta,base.getUpperBound() + delta);  } else {    return new Range(shiftWithNoZeroCrossing(base.getLowerBound(),delta),shiftWithNoZeroCrossing(base.getUpperBound(),delta));  }}  }
class C{  public static void blacklistEntityFromGravityRod(Class<? extends Entity> entity){  gravityRodBlacklist.add(entity);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void updateApps(List<AppInfo> apps){  mApps.updateApps(apps);}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  public static S2Point origin(){  return new S2Point(0,1,0);}  }
class C{  public void reset(Operation operation,String index){  this.index=index;  for (int i=0; i < weights.length; i++) {    weights[i]=weight(operation,modelNodes[i]);  }  sort(0,modelNodes.length);}  }
class C{  public void start(int totalSeeds,int maxNFE,long maxTime){  this.totalSeeds=totalSeeds;  this.maxNFE=maxNFE;  this.maxTime=maxTime;  lastSeed=1;  lastNFE=0;  currentSeed=1;  currentNFE=0;  statistics.clear();  startTime=System.currentTimeMillis();  lastTime=startTime;}  }
class C{  public DefaultStateMachineComponentResolver(BeanFactory beanFactory,Map<String,Action<S,E>> registeredActions,Map<String,Guard<S,E>> registeredGuards){  this.beanFactory=beanFactory;  this.registeredActions=registeredActions != null ? registeredActions : new HashMap<String,Action<S,E>>();  this.registeredGuards=registeredGuards != null ? registeredGuards : new HashMap<String,Guard<S,E>>();}  }
class C{  private JapaneseDate withYear(JapaneseEra era,int yearOfEra){  int year=JapaneseChronology.INSTANCE.prolepticYear(era,yearOfEra);  return with(isoDate.withYear(year));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public T caseTypeAlias(TypeAlias object){  return null;}  }
class C{  private static void checkArguments(final INaviView view){  Preconditions.checkNotNull(view,"IE01359: View argument can't be null");}  }
class C{  public void testResourcesAvailable(){  new FinnishAnalyzer().close();}  }
class C{  public static float[] toPrimitive(final Float[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_FLOAT_ARRAY;  }  final float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public static TCPEndpoint readHostPortFormat(DataInput in) throws IOException {  String host=in.readUTF();  int port=in.readInt();  return new TCPEndpoint(host,port);}  }
class C{  public final void checkAssert(final TriConsumer<P,P2,T> property){  check(null);}  }
class C{  private String streamAttachment(HttpServletRequest request,HttpServletResponse response){  int AD_WF_Activity_ID=WebUtil.getParameterAsInt(request,P_WF_Activity_ID);  if (AD_WF_Activity_ID == 0) {    log.fine("streamAttachment - no AD_WF_Activity_ID)");    return "No Activity ID";  }  int attachmentIndex=WebUtil.getParameterAsInt(request,P_ATTACHMENT_INDEX);  if (attachmentIndex == 0) {    log.fine("streamAttachment - no index)");    return "No Request Attachment index";  }  log.info("streamAttachment - AD_WF_Activity_ID=" + AD_WF_Activity_ID + " / "+ attachmentIndex);  Properties ctx=JSPEnv.getCtx(request);  MWFActivity doc=new MWFActivity(ctx,AD_WF_Activity_ID,null);  if (doc.get_ID() != AD_WF_Activity_ID) {    log.fine("streamAttachment - Activity not found - ID=" + AD_WF_Activity_ID);    return "Activity not found";  }  MAttachment attachment=doc.getAttachment(false);  if (attachment == null) {    log.fine("streamAttachment - No Attachment for AD_WF_Activity_ID=" + AD_WF_Activity_ID);    return "Notice Attachment not found";  }  HttpSession session=request.getSession(true);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu.getAD_User_ID() != doc.getAD_User_ID()) {    log.warning("streamAttachment - AD_WF_Activity_ID=" + AD_WF_Activity_ID + " - User_Activity="+ doc.getAD_User_ID()+ " = Web_User="+ wu.getAD_User_ID());    return "Your Activity not found";  }  return WebUtil.streamAttachment(response,attachment,attachmentIndex);}  }
class C{  public boolean containsUtf8(String value){  return findUtf8(value) != NOT_FOUND;}  }
class C{  private void parseSetItem(UpdateQueryBuilder query){  Token token;  if ((token=scanToken()) != Token.IDENTIFIER) {    throw error(L.l("expected identifier at '{0}'",token));  }  String columnName=_lexeme;  if ((token=scanToken()) != Token.EQ) {    throw error("expected '=' at {0}",token);  }  ExprKraken expr=parseExpr();  query.addItem(columnName,expr);}  }
class C{  @Override public boolean isCellEditable(EventObject anEvent){  if (anEvent instanceof MouseEvent) {    return ((MouseEvent)anEvent).getClickCount() >= clickCountToEdit;  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getStartTime());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  impl=new NameImpl(null);  int n=s.readInt();  try {    while (--n >= 0) {      add((String)s.readObject());    }  } catch (  InvalidNameException e) {    throw (new java.io.StreamCorruptedException("Invalid name"));  }}  }
class C{  private void lobAdd(PO_LOB lob){  log.fine("LOB=" + lob);  if (m_lobInfo == null)   m_lobInfo=new ArrayList<PO_LOB>();  m_lobInfo.add(lob);}  }
class C{  public WebLogicWlstStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_USER,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_PWD,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.JYTHON_SCRIPT_OFFLINE,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.JYTHON_SCRIPT_ONLINE,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.LOG_ROTATION_TYPE,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.SSL_HOSTNAME_VERIFICATION_IGNORED,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.SSL_HOSTNAME_VERIFIER_CLASS,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.JTA_TRANSACTION_TIMEOUT,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.PASSWORD_LENGTH_MIN,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.PASSWORD_SPNUM_MIN,Boolean.TRUE);  this.propertySupportMap.remove(WebLogicPropertySet.CONFIGURATION_VERSION);  this.propertySupportMap.remove(WebLogicPropertySet.DOMAIN_VERSION);}  }
class C{  public boolean intersects(int x,int y,int width,int height){  return this.width > 0 && this.height > 0 && width > 0 && height > 0 && this.x < (x + width) && x < (this.x + this.width) && this.y < (y + height) && y < (this.y + this.height);}  }
class C{  private BigDecimal evaluate(){  if (m_display == null || m_display.equals("") || m_display.equals("0")) {    m_number=new BigDecimal(0.0);    return m_number;  }  StringTokenizer st=new StringTokenizer(m_display,OPERANDS,true);  String token=st.nextToken();  if (token.equals("-")) {    if (st.hasMoreTokens())     token+=st.nextToken(); else {      m_number=new BigDecimal(0.0);      return m_number;    }  }  Number firstNumber;  try {    firstNumber=m_format.parse(token);  } catch (  ParseException pe1) {    log.log(Level.SEVERE,"Calculator.evaluate - token: " + token,pe1);    m_number=new BigDecimal(0.0);    return m_number;  }  BigDecimal firstNo=new BigDecimal(firstNumber.toString());  m_number=firstNo;  if (!st.hasMoreTokens())   return m_number;  token=st.nextToken();  if (OPERANDS.indexOf(token) == -1) {    log.log(Level.SEVERE,"Calculator.evaluate - Unknown token: " + token);    return m_number;  }  char op=token.charAt(0);  if (op == '%') {    firstNo=firstNo.divide(new BigDecimal(100.0),m_format.getMaximumFractionDigits(),BigDecimal.ROUND_HALF_UP);    m_number=firstNo;  }  if (!st.hasMoreTokens())   return m_number;  token=st.nextToken();  Number secondNumber;  try {    secondNumber=m_format.parse(token);  } catch (  ParseException pe2) {    log.log(Level.SEVERE,"Calculator.evaluate - token: " + token,pe2);    m_number=new BigDecimal(0.0);    return m_number;  }  BigDecimal secondNo=new BigDecimal(secondNumber.toString());  char op2=0;  if (st.hasMoreTokens()) {    token=st.nextToken();    if (OPERANDS.indexOf(token) == -1) {      log.log(Level.SEVERE,"Calculator.evaluate - Unknown token: " + token);      return m_number;    }    op2=token.charAt(0);  }  if (op2 == '%')   secondNo=secondNo.divide(new BigDecimal(100.0),m_format.getMaximumFractionDigits(),BigDecimal.ROUND_HALF_UP);switch (op) {case '/':    m_number=firstNo.divide(secondNo,m_format.getMaximumFractionDigits(),BigDecimal.ROUND_HALF_UP);  break;case '*':m_number=firstNo.multiply(secondNo);break;case '-':m_number=firstNo.subtract(secondNo);break;case '+':m_number=firstNo.add(secondNo);break;default :break;}return m_number.setScale(m_format.getMaximumFractionDigits(),BigDecimal.ROUND_HALF_UP);}  }
class C{  public boolean isCoordinate(Coordinate pt){  for (int i=0; i < points.size(); i++) {    if (points.getCoordinate(i).equals(pt)) {      return true;    }  }  return false;}  }
class C{  protected void readOptionalMeasures(ByteBuffer buffer){  if (buffer.hasRemaining() && (buffer.limit() - buffer.position()) >= (this.getNumberOfPoints() * 8)) {    this.mRange=ShapefileUtils.readDoubleArray(buffer,2);    this.mValues=ShapefileUtils.readDoubleArray(buffer,this.getNumberOfPoints());  }}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  public long toSeconds(){  return timeUnit.toSeconds(length);}  }
class C{  private void fetchPage(String page,int expectedCode) throws Exception {  URL url=new URL("http","127.0.0.1",port,page);  Response response=null;  response=http.getResponse(url,WebPage.newBuilder().build(),true);  int code=response.getCode();  assertEquals("HTTP Status Code for " + url,expectedCode,code);}  }
class C{  public final boolean unloadReference(SharedStorageReference reference){  return this.loadedReferences.remove(reference);}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String costHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster costSurface;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, costVal, srcVal;  float progress=0;  double largeVal=Float.MAX_VALUE - 10000000;  int[] dX=new int[]{1,1,0,-1,-1,-1,0,1};  int[] dY=new int[]{0,1,1,1,0,-1,-1,-1};  double diagDist=Math.sqrt(2);  double[] dist=new double[]{1,diagDist,1,diagDist,1,diagDist,1,diagDist};  double gridRes;  int col, row, a;  int c;  int x, y, i;  int[] backLinkDir=new int[]{32,64,128,1,2,4,8,16};  double costAccumVal, cost1, cost2, newCostVal;  boolean didSomething=false;  int loopNum=0;  boolean blnAnisotropicForce=false;  double anisotropicForceDirection=-999;  double anisotropicForceStrength=-999;  double[] azDir=new double[]{90,135,180,225,270,315,0,45};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      costHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      backLinkHeader=args[i];    } else     if (i == 4) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        blnAnisotropicForce=true;        anisotropicForceDirection=Double.parseDouble(args[i]);        if (anisotropicForceDirection >= 360) {          anisotropicForceDirection=0;        }        if (anisotropicForceDirection < 0) {          anisotropicForceDirection=0;        }      }    } else     if (i == 5) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        anisotropicForceStrength=Double.parseDouble(args[i]);        if (anisotropicForceStrength == 1 || anisotropicForceStrength == 0) {          blnAnisotropicForce=false;        } else {          blnAnisotropicForce=true;          if (anisotropicForceStrength > 100) {            anisotropicForceStrength=100;          }          if (anisotropicForceStrength < -100) {            anisotropicForceStrength=-100;          }        }      }    }  }  if ((sourceHeader == null) || (costHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (anisotropicForceDirection == -999 || anisotropicForceStrength == -999) {    if (blnAnisotropicForce) {      showFeedback("Both the Anisotropic Force Direction and " + "Anisotropic Force Strength must be set to valid " + "values to carry out this operation.");      return;    }  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    costSurface=new WhiteboxRaster(costHeader,"r");    if (costSurface.getNumberColumns() != cols || costSurface.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,largeVal);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    backLink=new WhiteboxRaster(backLinkHeader,"rw",sourceHeader,WhiteboxRaster.DataType.INTEGER,noData);    backLink.setPreferredPalette("spectrum.pal");    backLink.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    updateProgress("Calculating Cost Accumulation Surface:",0);    double[] data;    for (row=0; row < rows; row++) {      data=costSurface.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          srcVal=sourceImage.getValue(row,col);          if (srcVal > 0) {            output.setValue(row,col,0);            backLink.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    if (!blnAnisotropicForce) {      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    } else {      double dir=0;      for (c=0; c <= 7; c++) {        dir=Math.abs(azDir[c] - anisotropicForceDirection);        if (dir > 180) {          dir=360 - dir;        }        azDir[c]=1 + (180 - dir) / 180 * (anisotropicForceStrength - 1);      }      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    backLink.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    backLink.addMetadataEntry("Created on " + new Date());    sourceImage.close();    costSurface.close();    output.close();    backLink.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void exportProjectLog(Project aProject,File aCopyDir) throws IOException {  File logDir=new File(aCopyDir + LOG_FOLDER);  FileUtils.forceMkdir(logDir);  if (repository.getProjectLogFile(aProject).exists()) {    FileUtils.copyFileToDirectory(repository.getProjectLogFile(aProject),logDir);  }}  }
class C{  public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  public ProjectionTransverseMercator(){  super(makeProjectionLimits(DEFAULT_CENTRAL_MERIDIAN,DEFAULT_WIDTH));}  }
class C{  public Boolean isDefaultConfigOption(){  return defaultConfigOption;}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLVertex) {    if (this == o)     return true;    PLVertex vertex=(PLVertex)o;    return (x == vertex.x && y == vertex.y && z == vertex.z);  }  return false;}  }
class C{  public Lattice(Value[] linearChain,JoshuaConfiguration config){  this.latticeHasAmbiguity=false;  this.nodes=new ArrayList<>();  Node<Value> previous=new Node<>(0);  nodes.add(previous);  int i=1;  for (  Value value : linearChain) {    Node<Value> current=new Node<>(i);    float cost=0.0f;    previous.addArc(current,cost,value);    nodes.add(current);    previous=current;    i++;  }}  }
class C{  protected AbstractGraph(){}  }
class C{  public static void updateBoolean(VisualItem item,String field,boolean b){  item.setBoolean(getStartField(field),item.getBoolean(field));  item.setBoolean(field,b);  item.setBoolean(getEndField(field),b);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public boolean hasPrimaryKey(){  for (Iterator<Column> it=columns.iterator(); it.hasNext(); ) {    Column column=(Column)it.next();    if (column.isPrimaryKey()) {      return true;    }  }  return false;}  }
class C{  public Builder subject(X500Principal subject){  this.subject=subject;  return this;}  }
class C{  public boolean isZoomOverItem(){  return m_zoomOverItem;}  }
class C{  public static void spearmanCorrelation(File goldCorpus,File otherCorpus,int topN) throws IOException {  LinkedHashMap<String,Integer> gold=loadCorpusToRankedVocabulary(new FileInputStream(goldCorpus));  LinkedHashMap<String,Integer> other=loadCorpusToRankedVocabulary(new FileInputStream(otherCorpus));  double[][] matrix=new double[topN][];  if (gold.size() < topN) {    throw new IllegalArgumentException("topN (" + topN + ") cannot be greater than vocabulary size ("+ gold.size()+ ")");  }  Iterator<Map.Entry<String,Integer>> iterator=gold.entrySet().iterator();  int counter=0;  while (counter < topN) {    Map.Entry<String,Integer> next=iterator.next();    String goldWord=next.getKey();    Integer goldValue=next.getValue();    Integer otherValue=other.get(goldWord);    if (otherValue == null) {      otherValue=Integer.MAX_VALUE;    }    matrix[counter]=new double[2];    matrix[counter][0]=goldValue;    matrix[counter][1]=otherValue;    counter++;  }  RealMatrix realMatrix=new Array2DRowRealMatrix(matrix);  SpearmansCorrelation spearmansCorrelation=new SpearmansCorrelation(realMatrix);  double pValue=spearmansCorrelation.getRankCorrelation().getCorrelationPValues().getEntry(0,1);  double correlation=spearmansCorrelation.getRankCorrelation().getCorrelationMatrix().getEntry(0,1);  System.out.println("Gold: " + goldCorpus.getName());  System.out.println("Other: " + otherCorpus.getName());  System.out.printf(Locale.ENGLISH,"Top N:\n%d\nCorrelation\n%.3f\np-value\n%.3f\n",topN,correlation,pValue);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  @Override public final ImmutableList<E> asList(){  return this;}  }
class C{  @Override public void recycle(){  clear();  sPool.release(this);}  }
class C{  public FlashAACPlayer(PlayerCallback playerCallback){  this(playerCallback,DEFAULT_AUDIO_BUFFER_CAPACITY_MS,DEFAULT_DECODE_BUFFER_CAPACITY_MS);}  }
class C{  public static void copy(InputStream in,OutputStream out) throws IOException {synchronized (in) {synchronized (out) {      byte[] buffer=new byte[256];      while (true) {        int bytesRead=in.read(buffer);        if (bytesRead == -1)         break;        out.write(buffer,0,bytesRead);      }    }  }}  }
class C{  public static void reset(){  map.clear();}  }
class C{  public static double convertQuartSecToDecDegrees(int quartSec){  if (Double.isNaN(quartSec) || quartSec < -2592000 || quartSec > 2592000) {    throw new IllegalArgumentException("Invalid coordiante value:" + quartSec);  }  return ((double)quartSec) / (3600 * 4);}  }
class C{  public char map(char src){  for (Iterator i=segments.keySet().iterator(); i.hasNext(); ) {    Segment s=(Segment)i.next();    if (s.endCode >= src) {      if (s.startCode <= src) {        if (s.hasMap) {          char[] map=(char[])segments.get(s);          return map[src - s.startCode];        } else {          Integer idDelta=(Integer)segments.get(s);          return (char)(src + idDelta.intValue());        }      } else {        return (char)0;      }    }  }  return (char)0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument04.class,args);}  }
class C{  private void goToDocumentation(CiClass ciClass,String methodName){  assert (ciClass.getDocumentationLink() != null);  try {    URL url=new URL(String.format("%s?#%s::%s",ciClass.getDocumentationLink().toString(),ciClass.getName(),methodName));    System.out.printf("Going to URL: %s\n",url.toString());    URLDisplayer.getDefault().showURL(url);  } catch (  MalformedURLException mue) {    Toolkit.getDefaultToolkit().beep();    mue.printStackTrace(System.err);  }}  }
class C{  public void addUncheckedCodeDefault(AnnotationMirror uncheckedDefaultAnno,TypeUseLocation location){  checkDuplicates(uncheckedCodeDefaults,uncheckedDefaultAnno,location);  checkIsValidUncheckedCodeLocation(uncheckedDefaultAnno,location);  uncheckedCodeDefaults.add(new Default(uncheckedDefaultAnno,location));}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.MARKER;}  }
class C{  private void drawTexts(Canvas canvas,float textSize,Typeface typeface,String[] texts,float[] textGridWidths,float[] textGridHeights){  mPaint.setTextSize(textSize);  mPaint.setTypeface(typeface);  canvas.drawText(texts[0],textGridWidths[3],textGridHeights[0],mPaint);  canvas.drawText(texts[1],textGridWidths[4],textGridHeights[1],mPaint);  canvas.drawText(texts[2],textGridWidths[5],textGridHeights[2],mPaint);  canvas.drawText(texts[3],textGridWidths[6],textGridHeights[3],mPaint);  canvas.drawText(texts[4],textGridWidths[5],textGridHeights[4],mPaint);  canvas.drawText(texts[5],textGridWidths[4],textGridHeights[5],mPaint);  canvas.drawText(texts[6],textGridWidths[3],textGridHeights[6],mPaint);  canvas.drawText(texts[7],textGridWidths[2],textGridHeights[5],mPaint);  canvas.drawText(texts[8],textGridWidths[1],textGridHeights[4],mPaint);  canvas.drawText(texts[9],textGridWidths[0],textGridHeights[3],mPaint);  canvas.drawText(texts[10],textGridWidths[1],textGridHeights[2],mPaint);  canvas.drawText(texts[11],textGridWidths[2],textGridHeights[1],mPaint);}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<?> createUser(@RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request) throws URISyntaxException {  log.debug("REST request to save User : {}",managedUserDTO);  if (userRepository.findOneByLogin(managedUserDTO.getLogin()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  } else   if (userRepository.findOneByEmail(managedUserDTO.getEmail()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","Email already in use")).body(null);  } else {    User newUser=userService.createUser(managedUserDTO);    String baseUrl=request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ request.getContextPath();    mailService.sendCreationEmail(newUser,baseUrl);    return ResponseEntity.created(new URI("/api/users/" + newUser.getLogin())).headers(HeaderUtil.createAlert("userManagement.created",newUser.getLogin())).body(newUser);  }}  }
class C{  public final void removeRows(int[] selectedRows){  int[] cols=new int[dataBox.numCols()];  for (int i=0; i < dataBox.numCols(); i++) {    cols[i]=i;  }  int[] retainedRows=new int[dataBox.numRows() - selectedRows.length];  int i=-1;  for (int j=0; j < dataBox.numRows(); j++) {    if (Arrays.binarySearch(selectedRows,j) < 0) {      retainedRows[++i]=j;    }  }  dataBox=viewSelection(retainedRows,cols);  selection=new HashSet<>();  multipliers=new HashMap<>(multipliers);  knowledge=knowledge.copy();}  }
class C{  public void add(int pos,Name name){  if (pos > MAX_POINTER)   return;  int row=(name.hashCode() & 0x7FFFFFFF) % TABLE_SIZE;  Entry entry=new Entry();  entry.name=name;  entry.pos=pos;  entry.next=table[row];  table[row]=entry;  if (verbose)   System.err.println("Adding " + name + " at "+ pos);}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  private static OptimizationPlanElement[] toArray(ArrayList<OptimizationPlanElement> planElementList){  OptimizationPlanElement[] p=new OptimizationPlanElement[planElementList.size()];  planElementList.toArray(p);  return p;}  }
class C{  private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (diff_main)");  }  LinkedList<Diff> diffs;  if (text1.equals(text2)) {    diffs=new LinkedList<Diff>();    if (text1.length() != 0) {      diffs.add(new Diff(Operation.EQUAL,text1));    }    return diffs;  }  int commonlength=diff_commonPrefix(text1,text2);  String commonprefix=text1.substring(0,commonlength);  text1=text1.substring(commonlength);  text2=text2.substring(commonlength);  commonlength=diff_commonSuffix(text1,text2);  String commonsuffix=text1.substring(text1.length() - commonlength);  text1=text1.substring(0,text1.length() - commonlength);  text2=text2.substring(0,text2.length() - commonlength);  diffs=diff_compute(text1,text2,checklines,deadline);  if (commonprefix.length() != 0) {    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));  }  if (commonsuffix.length() != 0) {    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));  }  diff_cleanupMerge(diffs);  return diffs;}  }
class C{  protected void reset(){  eventClasses=new HashMap<String,String>();  mapNames=new HashMap<String,Properties>();  nestableMapNames=new HashMap<String,Map<String,Object>>();  nestableObjectArrayNames=new HashMap<String,Map<String,Object>>();  eventTypesXMLDOM=new HashMap<String,ConfigurationEventTypeXMLDOM>();  eventTypesLegacy=new HashMap<String,ConfigurationEventTypeLegacy>();  databaseReferences=new HashMap<String,ConfigurationDBRef>();  imports=new ArrayList<String>();  annotationImports=new ArrayList<String>(2);  addDefaultImports();  plugInViews=new ArrayList<ConfigurationPlugInView>();  plugInVirtualDataWindows=new ArrayList<ConfigurationPlugInVirtualDataWindow>();  pluginLoaders=new ArrayList<ConfigurationPluginLoader>();  plugInAggregationFunctions=new ArrayList<ConfigurationPlugInAggregationFunction>();  plugInAggregationMultiFunctions=new ArrayList<ConfigurationPlugInAggregationMultiFunction>();  plugInSingleRowFunctions=new ArrayList<ConfigurationPlugInSingleRowFunction>();  plugInPatternObjects=new ArrayList<ConfigurationPlugInPatternObject>();  engineDefaults=new ConfigurationEngineDefaults();  eventTypeAutoNamePackages=new LinkedHashSet<String>();  variables=new HashMap<String,ConfigurationVariable>();  methodInvocationReferences=new HashMap<String,ConfigurationMethodRef>();  plugInEventRepresentation=new HashMap<URI,ConfigurationPlugInEventRepresentation>();  plugInEventTypes=new HashMap<String,ConfigurationPlugInEventType>();  revisionEventTypes=new HashMap<String,ConfigurationRevisionEventType>();  variantStreams=new HashMap<String,ConfigurationVariantStream>();  mapTypeConfigurations=new HashMap<String,ConfigurationEventTypeMap>();  objectArrayTypeConfigurations=new HashMap<String,ConfigurationEventTypeObjectArray>();}  }
class C{  public static boolean isInterVDCRequest(HttpServletRequest req){  return ((req != null) && req.getRequestURI().contains(INTERVDC_URI));}  }
class C{  public static NowplayingFragment newInstance(){  NowplayingFragment fragment=new NowplayingFragment();  return fragment;}  }
class C{  public void appendParameterization(Parameterization p){  chain.add(p);}  }
class C{  public void schedule(){  for (  Location location : mobilityTrace) {    long time=location.date.getTime();    ((ProximitySimulation)sim).schedulePerson(this,time);  }}  }
class C{  private static long lf_maj(long x,long y,long z){  return (x & y) ^ (x & z) ^ (y & z);}  }
class C{  public RelativeLayoutStick isInRelative(int width,int height){  return (RelativeLayoutStick)isInLayout(RelativeLayout.LayoutParams.class,false,width,height);}  }
class C{  @Override public void updateUI(){  setUI(new RangeSliderUI(this));  updateLabelUIs();}  }
class C{  public int hashCode(){  return (((crossFeedResolution & 0x0000FFFF)) | ((feedResolution & 0x0000FFFF) << 16));}  }
class C{  public static boolean isUserDefinedMethod(final Method method){  return method.getDeclaringClass() != Object.class;}  }
class C{  public static DateTimeFormatter dateHourMinuteSecondMillis(){  if (dhmsl == null) {    dhmsl=new DateTimeFormatterBuilder().append(date()).append(literalTElement()).append(hourMinuteSecondMillis()).toFormatter();  }  return dhmsl;}  }
class C{  @Override protected MkCoPEntry createNewDirectoryEntry(MkCoPTreeNode<O> node,DBID routingObjectID,double parentDistance){  return new MkCoPDirectoryEntry(routingObjectID,parentDistance,node.getPageID(),node.coveringRadiusFromEntries(routingObjectID,this),null);}  }
class C{  public final void testEqualWithCharSequenceParameter(){  assertNotNull(Validators.equal("foo",new EditText(getContext())));}  }
class C{  public static int[] mergeSort(int[] a){  if (a.length == 1)   return a;  int[] x=mergeSort(Arrays.copyOfRange(a,0,a.length / 2));  int[] y=mergeSort(Arrays.copyOfRange(a,a.length / 2,a.length));  return merge(x,y);}  }
class C{  public static CreateWalletResponse create(String password,String apiCode,String privateKey,String label,String email) throws IOException, APIException {  Map<String,String> params=new HashMap<String,String>();  params.put("password",password);  params.put("api_code",apiCode);  if (privateKey != null) {    params.put("priv",privateKey);  }  if (label != null) {    params.put("label",label);  }  if (email != null) {    params.put("email",email);  }  String response=HttpClient.getInstance().post("api/v2/create_wallet",params);  JsonObject jsonObj=new JsonParser().parse(response).getAsJsonObject();  return new CreateWalletResponse(jsonObj.get("guid").getAsString(),jsonObj.get("address").getAsString(),jsonObj.get("link").getAsString());}  }
class C{  public boolean forEachKey(TFloatProcedure procedure){  return forEach(procedure);}  }
class C{  private void checkRemoved() throws IllegalStateException {  if (rmvd)   throw removedError();  if (rmvCheck) {    try {      rmvd=atomicView.get(key) == null;    } catch (    IgniteCheckedException e) {      throw U.convertException(e);    }    rmvCheck=false;    if (rmvd) {      ctx.kernalContext().dataStructures().onRemoved(key,this);      throw removedError();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInlineComment_();}  }
class C{  public static void I2OSP(int value,byte[] output,int outOff,int outLen){  for (int i=outLen - 1; i >= 0; i--) {    output[outOff + i]=(byte)(value >>> (8 * i));  }}  }
class C{  public boolean isCallbackMode(){  return callbackMode;}  }
class C{  public TextComponent(String text){  this.text=text;}  }
class C{  public GDSException(int fbErrorCode){  this.intParam=fbErrorCode;  this.type=ISCConstants.isc_arg_gds;  this.strParam=null;}  }
class C{  @Override public Resource createResource(URI uri){  XMLResource result=new OrientedResourceImpl(uri);  result.getDefaultSaveOptions().put(XMLResource.OPTION_EXTENDED_META_DATA,Boolean.TRUE);  result.getDefaultLoadOptions().put(XMLResource.OPTION_EXTENDED_META_DATA,Boolean.TRUE);  result.getDefaultSaveOptions().put(XMLResource.OPTION_SCHEMA_LOCATION,Boolean.TRUE);  result.getDefaultLoadOptions().put(XMLResource.OPTION_USE_ENCODED_ATTRIBUTE_STYLE,Boolean.TRUE);  result.getDefaultSaveOptions().put(XMLResource.OPTION_USE_ENCODED_ATTRIBUTE_STYLE,Boolean.TRUE);  result.getDefaultLoadOptions().put(XMLResource.OPTION_USE_LEXICAL_HANDLER,Boolean.TRUE);  return result;}  }
class C{  public URIBuilder builder(){  URIBuilder builder=new URIBuilder();  builder.setHost(host);  builder.setScheme(scheme);  if (port != 0) {    builder.setPort(port);  }  return builder;}  }
class C{  private boolean checkUnitPresence(final Collection<Territory> Territories,final String exclType,final int numberNeeded,final List<PlayerID> players,final GameData data){  int numberMet=0;  boolean satisfied=false;  boolean useSpecific=false;  if (getUnitPresence() != null && !getUnitPresence().keySet().isEmpty()) {    useSpecific=true;  }  for (  final Territory terr : Territories) {    final Collection<Unit> allUnits=Match.getMatches(terr.getUnits().getUnits(),Matches.unitIsBeingTransported().invert());    if (exclType.equals("direct")) {      allUnits.removeAll(Match.getMatches(allUnits,Matches.unitIsOwnedByOfAnyOfThesePlayers(players).invert()));    } else     if (exclType.equals("allied")) {      allUnits.retainAll(Match.getMatches(allUnits,Matches.alliedUnitOfAnyOfThesePlayers(players,data)));    } else     if (exclType.equals("enemy")) {      allUnits.retainAll(Match.getMatches(allUnits,Matches.enemyUnitOfAnyOfThesePlayers(players,data)));    } else {      return false;    }    if (allUnits.size() > 0) {      if (!useSpecific) {        numberMet+=1;        if (numberMet >= numberNeeded) {          satisfied=true;          if (!getCountEach()) {            break;          }        }      } else       if (useSpecific) {        final IntegerMap<String> unitComboMap=getUnitPresence();        final Set<String> unitCombos=unitComboMap.keySet();        boolean hasEnough=false;        for (        final String uc : unitCombos) {          final int unitsNeeded=unitComboMap.getInt(uc);          if (uc == null || uc.equals("ANY") || uc.equals("any")) {            hasEnough=allUnits.size() >= unitsNeeded;          } else {            final Set<UnitType> typesAllowed=data.getUnitTypeList().getUnitTypes(uc.split(":"));            hasEnough=Match.getMatches(allUnits,Matches.unitIsOfTypes(typesAllowed)).size() >= unitsNeeded;          }          if (!hasEnough) {            break;          }        }        if (hasEnough) {          numberMet+=1;          if (numberMet >= numberNeeded) {            satisfied=true;            if (!getCountEach()) {              break;            }          }        }      }    }  }  if (getCountEach()) {    m_eachMultiple=numberMet;  }  return satisfied;}  }
class C{  public void connectionClosed(ConnectionEvent event){  if (isActive) {    ManagedConnection conn=(ManagedConnection)event.getSource();    TransactionManagerImpl transManager=TransactionManagerImpl.getTransactionManager();    try {      Transaction txn=transManager.getTransaction();      if (txn == null) {        mannPoolCache.returnPooledConnectionToPool(conn);      }    } catch (    Exception se) {      String exception="FacetsJCAConnectionManagerImpl::connectionClosed: Exception occured due to " + se.getMessage();      if (logger.isDebugEnabled()) {        logger.debug(exception,se);      }    }  }}  }
class C{  static public PhysicalLocation parse(String pos){  String syntax="\\((\\s*[-+]?[0-9]*\\.?[0-9]+), (\\s*[-+]?[0-9]*\\.?[0-9]+), (\\s*[-+]?[0-9]*\\.?[0-9]+)\\)\\(?([tunnel]*)\\)?";  try {    Pattern p=Pattern.compile(syntax);    Matcher m=p.matcher(pos);    if (!m.matches()) {      log.error("String does not match a valid position pattern. syntax= " + syntax + " string = "+ pos);      return (null);    }    String xs=m.group(1);    String ys=m.group(2);    String zs=m.group(3);    log.debug("Loading position: x = {} y = {} z = {}",xs,ys,zs);    boolean is_tunnel=false;    for (int i=4; i < m.groupCount() + 1; i++) {      if ((m.group(i) != null) && ("tunnel".equals(m.group(i)))) {        is_tunnel=true;      }    }    return (new PhysicalLocation(Float.parseFloat(xs),Float.parseFloat(ys),Float.parseFloat(zs),is_tunnel));  } catch (  PatternSyntaxException e) {    log.error("Malformed listener position syntax! " + syntax);    return (null);  }catch (  IllegalStateException e) {    log.error("Group called before match operation executed syntax=" + syntax + " string= "+ pos+ " "+ e.toString());    return (null);  }catch (  IndexOutOfBoundsException e) {    log.error("Index out of bounds " + syntax + " string= "+ pos+ " "+ e.toString());    return (null);  }}  }
class C{  public void invalidateField(ImplicitIntentFields field){  isInvalidated[field.i()]=true;}  }
class C{  private static void displayIdentityStoreData(IIdentityStoreDataEx identityStore){  displayParamNameAndValue("alias",identityStore.getAlias());  displayParamNameAndValue("authenticationType",identityStore.getAuthenticationType() != null ? identityStore.getAuthenticationType().name() : StringUtils.EMPTY);  displayParamNameAndValue("userBaseDN",identityStore.getUserBaseDn());  displayParamNameAndValue("groupBaseDN",identityStore.getGroupBaseDn());  displayParamNameAndValue("username",identityStore.getUserName());  displayParamNameAndValue("providerType",identityStore.getProviderType() != null ? identityStore.getProviderType().name() : StringUtils.EMPTY);  displayParamNameAndValue("servicePrincipalName",identityStore.getServicePrincipalName());  Map<String,String> attributeMap=identityStore.getAttributeMap();  if (attributeMap != null) {    System.out.println("****** Attributes ******");    for (    Entry<String,String> entry : attributeMap.entrySet()) {      displayParamNameAndValue(entry.getKey(),entry.getValue());    }  }  System.out.println("****** Connection Strings ******");  for (  String connectionString : identityStore.getConnectionStrings()) {    displayParamNameAndValue("connectionString",connectionString);  }  Set<String> upnSuffixes=identityStore.getUpnSuffixes();  if (upnSuffixes != null) {    System.out.println("****** UPN Suffixes ******");    for (    String upnSuffix : upnSuffixes) {      displayParamNameAndValue("upnSuffix",upnSuffix);    }  }  displayParamNameAndValue("SearchTimeoutInSeconds",String.valueOf(identityStore.getSearchTimeoutSeconds()));  IdentityStoreSchemaMapping identityStoreSchemaMapping=identityStore.getIdentityStoreSchemaMapping();  if (identityStoreSchemaMapping != null) {    System.out.println("******* IdentityStore Schema Mappings ******");    ArrayList<IdentityStoreObjectMapping> identityStoreObjectMappings=new ArrayList<IdentityStoreObjectMapping>(identityStoreSchemaMapping.getObjectMappings());    for (    IdentityStoreObjectMapping identityObjectMapping : identityStoreObjectMappings) {      System.out.println("---- Identity Object -----");      displayParamNameAndValue("objectClass",identityObjectMapping.getObjectClass());      displayParamNameAndValue("objectId",identityObjectMapping.getObjectId());      ArrayList<IdentityStoreAttributeMapping> identityAttributeMappings=new ArrayList<IdentityStoreAttributeMapping>(identityObjectMapping.getAttributeMappings());      for (      IdentityStoreAttributeMapping identityAttributeMapping : identityAttributeMappings) {        displayParamNameAndValue("attributeId",identityAttributeMapping.getAttributeId());        displayParamNameAndValue("attributeName",identityAttributeMapping.getAttributeName());      }    }  }  printOutProviderFlags(identityStore.getFlags());}  }
class C{  private void checkSteps(){  if (SystemClock.uptimeMillis() - lastStepsCheck > STEPS_CHECK_INTERVAL) {    lastStepsCheck=SystemClock.uptimeMillis();    stepsHelper.fetchStepsCount();  }}  }
class C{  public SequenceCharacterIterator(CharSequence sequence,int first,int last) throws IllegalArgumentException {  if (sequence == null)   throw new NullPointerException();  if (first < 0 || first > last)   throw new IllegalArgumentException();  if (last > sequence.length())   throw new IllegalArgumentException();  fSequence=sequence;  fFirst=first;  fLast=last;  fIndex=first;  invariant();}  }
class C{  final public void enable_tracing(){}  }
class C{  protected boolean parseAdditive(){  String additiveString=element.getAttributeNS(null,SVG_ADDITIVE_ATTRIBUTE);  if (additiveString.length() == 0 || additiveString.equals(SMILConstants.SMIL_REPLACE_VALUE)) {    return false;  } else   if (additiveString.equals(SMILConstants.SMIL_SUM_VALUE)) {    return true;  }  throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_ADDITIVE_ATTRIBUTE,additiveString});}  }
class C{  public boolean isOutputCard(int cardNum){  if (cardNum > 63) {    warn("C/MRI - isOutputCard - cardNum out of range");    return (false);  }  if (nodeType == SMINI) {    if ((cardNum == 0) || (cardNum == 1)) {      return (true);    } else {      return (false);    }  }  return (cardTypeLocation[cardNum] == OUTPUT_CARD);}  }
class C{  public GeodeCheckpointStore(String locatorString){  this.geodeLocators=locatorString;  kryo=new Kryo();}  }
class C{  public static void writeMapToLdap(final ChaiUser theUser,final Map<String,String> valueMap,final MacroMachine macroMachine,final boolean expandMacros) throws PwmOperationalException, ChaiUnavailableException {  final Map<String,String> currentValues;  try {    currentValues=theUser.readStringAttributes(valueMap.keySet());  } catch (  ChaiOperationException e) {    final String errorMsg="error reading existing values on user " + theUser.getEntryDN() + " prior to replacing values, error: "+ e.getMessage();    final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);    final PwmOperationalException newException=new PwmOperationalException(errorInformation);    newException.initCause(e);    throw newException;  }  for (  final String attrName : valueMap.keySet()) {    String attrValue=valueMap.get(attrName) != null ? valueMap.get(attrName) : "";    if (expandMacros) {      attrValue=macroMachine.expandMacros(attrValue);    }    if (!attrValue.equals(currentValues.get(attrName))) {      if (attrValue.length() > 0) {        try {          theUser.writeStringAttribute(attrName,attrValue);          LOGGER.info("set attribute on user " + theUser.getEntryDN() + " ("+ attrName+ "="+ attrValue+ ")");        } catch (        ChaiOperationException e) {          final String errorMsg="error setting '" + attrName + "' attribute on user "+ theUser.getEntryDN()+ ", error: "+ e.getMessage();          final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);          final PwmOperationalException newException=new PwmOperationalException(errorInformation);          newException.initCause(e);          throw newException;        }      } else {        if (currentValues.get(attrName) != null && currentValues.get(attrName).length() > 0) {          try {            theUser.deleteAttribute(attrName,null);            LOGGER.info("deleted attribute value on user " + theUser.getEntryDN() + " ("+ attrName+ ")");          } catch (          ChaiOperationException e) {            final String errorMsg="error removing '" + attrName + "' attribute value on user "+ theUser.getEntryDN()+ ", error: "+ e.getMessage();            final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);            final PwmOperationalException newException=new PwmOperationalException(errorInformation);            newException.initCause(e);            throw newException;          }        }      }    } else {      LOGGER.debug("skipping attribute modify for attribute '" + attrName + "', no change in value");    }  }}  }
class C{  public String classify(String tableName){  int period=tableName.lastIndexOf('.');  if (period >= 0) {    tableName=tableName.substring(period + 1);  }  return camelize(singularize(tableName));}  }
class C{  JavaFileObjectImpl(final String baseName,final CharSequence source){  super(CharSequenceCompiler.toURI(baseName + CharSequenceCompiler.JAVA_EXTENSION),Kind.SOURCE);  this.source=source;}  }
class C{  private TeamExplorerNavigationItemConfig[] discoverNavigationItems(){  final List<TeamExplorerNavigationItemConfig> list=new ArrayList<TeamExplorerNavigationItemConfig>();  for (  final IConfigurationElement element : getExtensions(NAVITEM_EXTENSION_POINT_ID)) {    final TeamExplorerNavigationItemConfig navItem=TeamExplorerNavigationItemConfig.fromConfigurationElement(element);    if (navItem.getID().equals(HOME_ITEM_ID)) {      homeItem=navItem;    } else {      list.add(navItem);    }  }  Check.notNull(homeItem,"homeItem");  final TeamExplorerNavigationItemConfig[] navItems=list.toArray(new TeamExplorerNavigationItemConfig[list.size()]);  Arrays.sort(navItems,new TeamExplorerOrderedComponentComparator());  return navItems;}  }
class C{  public SimpleConnectionGroupDirectory(Collection<ConnectionGroup> groups){  for (  ConnectionGroup group : groups)   connectionGroups.put(group.getIdentifier(),group);  super.setObjects(connectionGroups);}  }
class C{  public BufferedImagePixelMatrix(){  this(DEFAULT_WIDTH,DEFAULT_HEIGHT);}  }
class C{  public static <E extends Comparable<E>>int partition(List<E> array,int left,int right){  final int mid=left + ((right - left) / 2);  E pivot=array.get(mid);  while (left <= right) {    while (array.get(left).compareTo(pivot) < 0) {      left++;    }    while (array.get(right).compareTo(pivot) > 0) {      right--;    }    if (left <= right) {      E tmp=array.get(left);      array.set(left,array.get(right));      array.set(right,tmp);      left++;      right--;    }  }  return left;}  }
class C{  private void queryEntries(ContactsExampleParameters parameters) throws IOException, ServiceException {  Query myQuery=new Query(feedUrl);  if (parameters.getUpdatedMin() != null) {    DateTime startTime=DateTime.parseDateTime(parameters.getUpdatedMin());    myQuery.setUpdatedMin(startTime);  }  if (parameters.getMaxResults() != null) {    myQuery.setMaxResults(parameters.getMaxResults().intValue());  }  if (parameters.getStartIndex() != null) {    myQuery.setStartIndex(parameters.getStartIndex());  }  if (parameters.isShowDeleted()) {    myQuery.setStringCustomParameter("showdeleted","true");  }  if (parameters.getRequireAllDeleted() != null) {    myQuery.setStringCustomParameter("requirealldeleted",parameters.getRequireAllDeleted());  }  if (parameters.getSortorder() != null) {    myQuery.setStringCustomParameter("sortorder",parameters.getSortorder());  }  if (parameters.getOrderBy() != null) {    myQuery.setStringCustomParameter("orderby",parameters.getOrderBy());  }  if (parameters.getGroup() != null) {    myQuery.setStringCustomParameter("group",parameters.getGroup());  }  try {    if (parameters.isGroupFeed()) {      ContactGroupFeed groupFeed=service.query(myQuery,ContactGroupFeed.class);      for (      ContactGroupEntry entry : groupFeed.getEntries()) {        printGroup(entry);      }      System.err.println("Total: " + groupFeed.getEntries().size() + " entries found");    } else {      ContactFeed resultFeed=service.query(myQuery,ContactFeed.class);      for (      ContactEntry entry : resultFeed.getEntries()) {        printContact(entry);      }      System.err.println("Total: " + resultFeed.getEntries().size() + " entries found");    }  } catch (  NoLongerAvailableException ex) {    System.err.println("Not all placehorders of deleted entries are available");  }}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection != null) {    extraGraphics.generate(projection);  }  return super.prepare();}  }
class C{  public boolean isSelected(){  return false;}  }
class C{  public static void main(String args[]){  if (args.length != 4) {    System.out.println("Ooops, wrong usage. This tool requires 4 arguments to be able to register an extension properly.");    System.out.println("- Maven Group ID of the extension (i.e. 'org.eclipse.che.ide')");    System.out.println("- Maven Artifact ID of the extension (i.e. 'ide-ext-tasks')");    System.out.println("- Maven Module Version of the extension (i.e. '3.0')");    System.out.println("- GWT Module FQN (i.e. 'org.eclipse.che.ide.extension.tasks.Tasks')");    return;  }  String mavenGroupId=args[0];  String mavenArtifactId=args[1];  String mavenModuleVersion=args[2];  String gwtModuleFQN=args[3];  SetupPomAndGWTModule projectWithExtensionsInitializer=new SetupPomAndGWTModule(mavenGroupId,mavenArtifactId,mavenModuleVersion,gwtModuleFQN,new File("."));  try {    projectWithExtensionsInitializer.setupProject();  } catch (  IOException e) {    System.err.println("failed to setup the project.");    e.printStackTrace();    System.exit(1);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  DeterministicKey other=(DeterministicKey)o;  return super.equals(other) && Arrays.equals(this.chainCode,other.chainCode) && Objects.equal(this.childNumberPath,other.childNumberPath);}  }
class C{  public SmbFile(URL url,NtlmPasswordAuthentication auth){  super(url);  this.auth=auth == null ? new NtlmPasswordAuthentication(url.getUserInfo()) : auth;  getUncPath0();}  }
class C{  static int differenceEncoded(String es1,String es2){  if (es1 == null || es2 == null) {    return 0;  }  int lengthToMatch=Math.min(es1.length(),es2.length());  int diff=0;  for (int i=0; i < lengthToMatch; i++) {    if (es1.charAt(i) == es2.charAt(i)) {      diff++;    }  }  return diff;}  }
class C{  private boolean notNull(Object... objects){  for (  Object obj : objects) {    if (obj == null) {      return false;    }  }  return true;}  }
class C{  public MeanInterpolatorAction(DataEditor editor){  super("Replace Missing Values with Column Mean");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public static ListNode rotateRight(ListNode head,int n){  if (head == null || head.next == null)   return head;  ListNode dummy=new ListNode(0);  dummy.next=head;  ListNode fast=dummy, slow=dummy;  int len;  for (len=0; fast.next != null; len++)   fast=fast.next;  for (int j=len - n % len; j > 0; j--)   slow=slow.next;  fast.next=dummy.next;  dummy.next=slow.next;  slow.next=null;  return dummy.next;}  }
class C{  public void removeFromClassIntrospectionCache(Class clazz){  classIntrospector.remove(clazz);}  }
class C{  public void pointValuesToPixel(float[] pts){  mMatrixValueToPx.mapPoints(pts);  mViewPortHandler.getMatrixTouch().mapPoints(pts);  mMatrixOffset.mapPoints(pts);}  }
class C{  public int[][] allTrueValues(){  int Y[][]=new int[actuals.size()][];  for (int i=0; i < actuals.size(); i++) {    Y[i]=rowTrue(i);  }  return Y;}  }
class C{  @ValidationErrorPage(value="createReceipt") @SkipValidation @Action(value="/receipts/challan-createReceipt") public String createReceipt(){  if (challanNumber != null && !"".equals(challanNumber)) {    receiptHeader=(ReceiptHeader)persistenceService.findByNamedQuery(CollectionConstants.QUERY_VALIDRECEIPT_BY_CHALLANNO,challanNumber);    if (receiptHeader == null) {      receiptHeader=new ReceiptHeader();      errors.add(new ValidationError(getText("challan.notfound.message"),"No Valid Challan Found. Please check the challan number."));      throw new ValidationException(errors);    }    if (CollectionConstants.CHALLAN_STATUS_CODE_CANCELLED.equals(receiptHeader.getChallan().getStatus().getCode())) {      errors.add(new ValidationError(getText("challan.cancel.receipt.error"),"Challan is cancelled. Cannot create Receipt for Challan."));      throw new ValidationException(errors);    }    if (CollectionConstants.RECEIPT_STATUS_CODE_PENDING.equals(receiptHeader.getStatus().getCode())) {      loadReceiptDetails();      setCollectionModesNotAllowed();    } else {      errors.add(new ValidationError(getText("challanreceipt.created.message",new String[]{receiptHeader.getReceiptnumber()}),"Receipt Already Created For this Challan. Receipt Number is " + receiptHeader.getReceiptnumber()));      throw new ValidationException(errors);    }  }  return CollectionConstants.CREATERECEIPT;}  }
class C{  public boolean subst(ASTree newObj,ASTree oldObj){  for (ASTList list=this; list != null; list=list.right)   if (list.left == oldObj) {    list.left=newObj;    return true;  }  return false;}  }
class C{  public static int numTrees(int n){  if (n < 0)   return 0;  int[] trees=new int[n + 1];  trees[0]=1;  for (int i=1; i <= n; i++)   for (int j=0; j < i; j++)   trees[i]+=trees[j] * trees[i - j - 1];  return trees[n];}  }
class C{  @Override public void doGet(final HttpServletRequest request,final HttpServletResponse resp) throws IOException {  Queue queue=QueueFactory.getDefaultQueue();  queue.add(TaskOptions.Builder.withPayload(new ExpensiveOperation()).etaMillis(System.currentTimeMillis() + DELAY_MS));  resp.setContentType("text/plain");  resp.getWriter().println("Task is backgrounded on queue!");}  }
class C{  public StrTokenizer(char[] input){  super();  this.chars=input;}  }
class C{  private static boolean isSubKeyExist(String subKey,int regLevel){  int hKey=getHKeyByLevel(regLevel);  if (WinRegistryWrapper.WinRegSubKeyExist(hKey,subKey) == ERROR_ITEM_EXISTED) {    return true;  } else {    return false;  }}  }
class C{  public boolean isOpen(String DocBaseType){  return isOpen(DocBaseType,null);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected VisorNodeDataCollectorJobResult run(VisorNodeDataCollectorJobResult res,VisorNodeDataCollectorTaskArg arg){  res.gridName(ignite.name());  res.topologyVersion(ignite.cluster().topologyVersion());  long start0=U.currentTimeMillis();  events(res,arg);  if (debug)   start0=log(ignite.log(),"Collected events",getClass(),start0);  caches(res,arg);  if (debug)   start0=log(ignite.log(),"Collected caches",getClass(),start0);  igfs(res);  if (debug)   log(ignite.log(),"Collected igfs",getClass(),start0);  res.errorCount(ignite.context().exceptionRegistry().errorCount());  return res;}  }
class C{  public String invalidate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (mTab.getValue("IsSummary") != null) {    mTab.setValue("IsValid",false);    return "";  }  return "";}  }
class C{  public boolean rebuildOnFailedScrub(Throwable failure){  if (!isIndex())   return false;  SecondaryIndex index=null;  if (metadata.cfName.contains(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) {    String[] parts=metadata.cfName.split("\\" + Directories.SECONDARY_INDEX_NAME_SEPARATOR,2);    ColumnFamilyStore parentCfs=keyspace.getColumnFamilyStore(parts[0]);    index=parentCfs.indexManager.getIndexByName(metadata.cfName);    assert index != null;  }  if (index == null)   return false;  truncateBlocking();  logger.warn("Rebuilding index for {} because of <{}>",name,failure.getMessage());  index.getBaseCfs().rebuildSecondaryIndex(index.getIndexName());  return true;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public final Sector union(Sector that){  if (that == null)   return this;  Angle minLat=this.minLatitude;  Angle maxLat=this.maxLatitude;  Angle minLon=this.minLongitude;  Angle maxLon=this.maxLongitude;  if (that.minLatitude.degrees < this.minLatitude.degrees)   minLat=that.minLatitude;  if (that.maxLatitude.degrees > this.maxLatitude.degrees)   maxLat=that.maxLatitude;  if (that.minLongitude.degrees < this.minLongitude.degrees)   minLon=that.minLongitude;  if (that.maxLongitude.degrees > this.maxLongitude.degrees)   maxLon=that.maxLongitude;  return new Sector(minLat,maxLat,minLon,maxLon);}  }
class C{  public FastVector(){  m_Objects=new Object[0];  m_Size=0;  m_CapacityIncrement=1;  m_CapacityMultiplier=2;}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public LoginPage(final PageParameters params){  super(params);  add(new FeedbackPanel(FEEDBACK)).add(new LoginPanel(CART_VIEW,false)).add(new StandardFooter(FOOTER)).add(new StandardHeader(HEADER)).add(new ServerSideJs("serverSideJs")).add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatagetdata.class,args);}  }
class C{  void b1a2__b1a2b1(){  mv.visitInsn(DUP2_X1);  mv.visitInsn(POP2);  mv.visitInsn(DUP_X2);}  }
class C{  public Boolean isControllerType(){  return controllerType;}  }
class C{  protected void createSnapshot(List<DTNHost> hosts){  boolean isFirstMessage;  String reportLine;  write("[" + (int)getSimTime() + "]");  for (  DTNHost host : hosts) {    isFirstMessage=true;    reportLine="";    for (    Message m : host.getMessageCollection()) {      if (isTracked(m)) {        if (isFirstMessage) {          reportLine=host.getLocation().toString();          isFirstMessage=false;        }        reportLine+=" " + m.getId();      }    }    if (reportLine.length() > 0) {      write(reportLine);    }  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @LargeTest public void testMountSingleObb(){  mFile=createObbFile(OBB_FILE_1,R.raw.obb_file1);  String filePath=mFile.getAbsolutePath();  mountObb(filePath);  verifyObb1Contents(filePath);  unmountObb(filePath,DONT_FORCE);}  }
class C{  public final int received(){  return volatileSize;}  }
class C{  @RpcMethod public void createImageFromVm(String vmId,String imageId,String datastore,String tmpImagePath,AsyncMethodCallback<Host.AsyncClient.create_image_from_vm_call> handler) throws InterruptedException, RpcException {  ensureClient();  CreateImageFromVmRequest createImageFromVmRequest=new CreateImageFromVmRequest(vmId,imageId,datastore,tmpImagePath);  clientProxy.setTimeout(CREATE_IMAGE_TIMEOUT_MS);  logger.info("create_image_from_vm target {}, request {}",getHostIp(),createImageFromVmRequest);  try {    clientProxy.create_image_from_vm(createImageFromVmRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public ParseOperationSet(){  this(UUID.randomUUID().toString());}  }
class C{  public AnnotationTypeMismatchException(Method element,String foundType){  super("The annotation element " + element + " doesn't match the type "+ foundType);  this.element=element;  this.foundType=foundType;}  }
class C{  public Rotation loadRotation(RepositoryModule repo){  List<LoadedMap> list=Lists.newArrayList();  repo.getLoadedMaps().forEach(null);  Rotation rotation=new Rotation(list);  return rotation;}  }
class C{  private void parseProcedureStatementList(List<SQLStatement> statementList,int max){  for (; ; ) {    if (max != -1) {      if (statementList.size() >= max) {        return;      }    }    if (lexer.token() == Token.EOF) {      return;    }    if (lexer.token() == Token.END) {      return;    }    if (lexer.token() == Token.ELSE) {      return;    }    if (lexer.token() == (Token.SEMI)) {      lexer.nextToken();      continue;    }    if (lexer.token() == Token.WHEN) {      return;    }    if (lexer.token() == Token.UNTIL) {      return;    }    if (lexer.token() == (Token.SELECT)) {      statementList.add(this.parseSelectInto());      continue;    }    if (lexer.token() == (Token.UPDATE)) {      statementList.add(parseUpdateStatement());      continue;    }    if (lexer.token() == (Token.CREATE)) {      statementList.add(parseCreate());      continue;    }    if (lexer.token() == Token.INSERT) {      statementList.add(parseInsert());      continue;    }    if (lexer.token() == (Token.DELETE)) {      statementList.add(parseDeleteStatement());      continue;    }    if (lexer.token() == Token.LBRACE || identifierEquals("CALL")) {      statementList.add(this.parseCall());      continue;    }    if (lexer.token() == Token.BEGIN) {      statementList.add(this.parseBlock());      continue;    }    if (lexer.token() == Token.VARIANT) {      SQLExpr variant=this.exprParser.primary();      if (variant instanceof SQLBinaryOpExpr) {        SQLBinaryOpExpr binaryOpExpr=(SQLBinaryOpExpr)variant;        if (binaryOpExpr.getOperator() == SQLBinaryOperator.Assignment) {          SQLSetStatement stmt=new SQLSetStatement(binaryOpExpr.getLeft(),binaryOpExpr.getRight(),getDbType());          statementList.add(stmt);          continue;        }      }      accept(Token.COLONEQ);      SQLExpr value=this.exprParser.expr();      SQLSetStatement stmt=new SQLSetStatement(variant,value,getDbType());      statementList.add(stmt);      continue;    }    if (lexer.token() == Token.LPAREN) {      char ch=lexer.current();      int bp=lexer.bp();      lexer.nextToken();      if (lexer.token() == Token.SELECT) {        lexer.reset(bp,ch,Token.LPAREN);        statementList.add(this.parseSelect());        continue;      } else {        throw new ParserException("TODO : " + lexer.token() + " "+ lexer.stringVal());      }    }    if (lexer.token() == Token.SET) {      statementList.add(this.parseAssign());      continue;    }    if (lexer.token() == Token.WHILE) {      statementList.add(this.parseWhile());      continue;    }    if (lexer.token() == Token.LOOP) {      statementList.add(this.parseLoop());      continue;    }    if (lexer.token() == Token.IF) {      statementList.add(this.parseIf());      continue;    }    if (lexer.token() == Token.CASE) {      statementList.add(this.parseCase());      continue;    }    if (lexer.token() == Token.DECLARE) {      char markChar=lexer.current();      int markBp=lexer.bp();      lexer.nextToken();      lexer.nextToken();      if (lexer.token() == Token.CURSOR) {        lexer.reset(markBp,markChar,Token.DECLARE);        statementList.add(this.parseCursorDeclare());      } else {        lexer.reset(markBp,markChar,Token.DECLARE);        statementList.add(this.parseDeclare());      }      continue;    }    if (lexer.token() == Token.LEAVE) {      statementList.add(this.parseLeave());      continue;    }    if (lexer.token() == Token.ITERATE) {      statementList.add(this.parseIterate());      continue;    }    if (lexer.token() == Token.REPEAT) {      statementList.add(this.parseRepeat());      continue;    }    if (lexer.token() == Token.OPEN) {      statementList.add(this.parseOpen());      continue;    }    if (lexer.token() == Token.CLOSE) {      statementList.add(this.parseClose());      continue;    }    if (lexer.token() == Token.FETCH) {      statementList.add(this.parseFetch());      continue;    }    if (lexer.token() == Token.IDENTIFIER) {      String label=lexer.stringVal();      char ch=lexer.current();      int bp=lexer.bp();      lexer.nextToken();      if (lexer.token() == Token.VARIANT && lexer.stringVal().equals(":")) {        lexer.nextToken();        if (lexer.token() == Token.LOOP) {          statementList.add(this.parseLoop(label));        } else         if (lexer.token() == Token.WHILE) {          statementList.add(this.parseWhile(label));        } else         if (lexer.token() == Token.BEGIN) {          statementList.add(this.parseBlock(label));        } else         if (lexer.token() == Token.REPEAT) {          statementList.add(this.parseRepeat(label));        }        continue;      } else {        lexer.reset(bp,ch,Token.IDENTIFIER);      }    }    throw new ParserException("TODO : " + lexer.token() + " "+ lexer.stringVal());  }}  }
class C{  public DistributedLogNamespaceBuilder regionId(int regionId){  this._regionId=regionId;  return this;}  }
class C{  public static String reverseDNS(InetAddress addr){  byte[] addrBytes=addr.getAddress();  String lookup="";  for (int index=addrBytes.length - 1; index >= 0; index--) {    lookup=lookup + (addrBytes[index] & 0xff) + '.';  }  lookup+="in-addr.arpa";  try {    Hashtable env=new Hashtable();    env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.dns.DnsContextFactory");    DirContext ctx=new InitialDirContext(env);    Attributes attrs=ctx.getAttributes(lookup,new String[]{"PTR"});    for (NamingEnumeration ae=attrs.getAll(); ae.hasMoreElements(); ) {      Attribute attr=(Attribute)ae.next();      for (Enumeration vals=attr.getAll(); vals.hasMoreElements(); ) {        Object elem=vals.nextElement();        if ("PTR".equals(attr.getID()) && elem != null) {          return elem.toString();        }      }    }    ctx.close();  } catch (  Exception e) {  }  return null;}  }
class C{  public String content(){  return content;}  }
class C{  protected int countChar(String str,int ch){  int fromIndex=0;  int count=0;  while ((fromIndex=str.indexOf(ch,fromIndex)) != -1) {    count++;    fromIndex++;  }  return count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.029 -0500",hash_original_method="01E50CA685DCCC4E2CB4A3BAE1B534F6",hash_generated_method="914ADD5D47AA4D78109C5A27EDEADBA9") public static void translateM(float[] tm,int tmOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 12; i++) {    tm[tmOffset + i]=m[mOffset + i];  }  for (int i=0; i < 4; i++) {    int tmi=tmOffset + i;    int mi=mOffset + i;    tm[12 + tmi]=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z + m[12 + mi];  }}  }
class C{  private static void insertionSort(int[] data,final int start,final int end,IntegerComparator comp){  for (int i=start + 1; i < end; i++) {    final int cur=data[i];    int j=i - 1;    while (j >= start) {      final int pre=data[j];      if (comp.compare(cur,pre) >= 0) {        break;      }      data[j + 1]=pre;      --j;    }    data[j + 1]=cur;  }}  }
class C{  protected void reportFinish(){}  }
class C{  @Override public boolean equals(Object object){  if (object instanceof Method) {    Method that=(Method)object;    return this.vmMethod == that.vmMethod;  } else {    return false;  }}  }
class C{  public void addIndex(int idx){  this.occurrences.add(idx);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/expose") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep exposeSnapshotAsVolume(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,BlockSnapshot.class,"id");  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  URI sourceVolumeURI=snapshot.getParent().getURI();  Volume sourceVolume=_dbClient.queryObject(Volume.class,sourceVolumeURI);  if (!Volume.checkForVplexBackEndVolume(_dbClient,sourceVolume)) {    throw APIException.badRequests.cantExposeNonVPLEXSnapshot(snapshot.getLabel());  }  if (snapshot.getInactive()) {    throw APIException.badRequests.cantExposeInactiveSnapshot(snapshot.getLabel());  }  if (!snapshot.getIsSyncActive()) {    throw APIException.badRequests.cantExposeUnsynchronizedSnapshot(snapshot.getLabel());  }  String snapshotNativeGuid=snapshot.getNativeGuid();  if (!CustomQueryUtility.getActiveVolumeByNativeGuid(_dbClient,snapshotNativeGuid).isEmpty()) {    throw APIException.badRequests.cantExposeSnapshotAlreadyExposed(snapshot.getLabel());  }  if (snapshot.isSnapshotExported(_dbClient)) {    throw APIException.badRequests.cantExposeExportedSnapshot(snapshot.getLabel());  }  VirtualPool sourceVolumeVpool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());  Volume backendVolume=prepareVPLEXBackendVolumeFromSnapshot(snapshot,sourceVolume);  String taskId=UUID.randomUUID().toString();  try {    VPlexBlockServiceApiImpl vplexBlocSvcApi=(VPlexBlockServiceApiImpl)getBlockServiceImpl("vplex");    vplexBlocSvcApi.importVirtualVolume(snapshot.getStorageController(),backendVolume,sourceVolumeVpool,taskId);  } catch (  Exception e) {    _log.error("Exception importing snapshot to VPLEX",e);    backendVolume.setInactive(true);    _dbClient.persistObject(backendVolume);    throw e;  }  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_VPLEX_VOLUME_FROM_SNAPSHOT);  _dbClient.createTaskOpStatus(BlockSnapshot.class,id,taskId,op);  snapshot.getOpStatus().put(taskId,op);  return toTask(snapshot,taskId,op);}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  public boolean isXRoundedLabels(){  return mXRoundedLabels;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:07.513 -0500",hash_original_method="920E2CC099037AFE91302301CF7E9F3E",hash_generated_method="AFBCB786E817854F5D34F17C592E0592") public char last(){  if (start == end) {    return DONE;  }  offset=end - 1;  return string.charAt(offset);}  }
class C{  public boolean isLookedUp(){  return lookedUp;}  }
class C{  public OperationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String circleAwareLogDirectory(Class<?> testClass){  return circleAwareLogDirectory(testClass.getSimpleName());}  }
class C{  public FacebookOperationCanceledException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public void scanLeDevice(boolean enable){  this.scanLeDevice(enable,SCAN_PERIOD);}  }
class C{  public DeployerServlet(Server server){  this.configHome=System.getProperty("config.home");  if (this.configHome == null) {    this.configHome=System.getProperty("jetty.base");  }  if (this.configHome == null) {    this.configHome=System.getProperty("jetty.home");  }  if (this.configHome == null) {    throw new IllegalStateException("Cannot find the Jetty configuration home");  }  this.webAppDirectory=new File(this.configHome,"webapps");  Handler[] handles=server.getChildHandlers();  for (  Handler handle : handles) {    if (handle instanceof ContextHandlerCollection) {      chc=(ContextHandlerCollection)handle;      break;    }  }}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public void replaceAndWait(final Component current,final Component next,final Transition t){  replaceComponents(current,next,t,true,false,null,0,0,true);}  }
class C{  private long nextHandle(){  long h=System.currentTimeMillis();  if (h <= this.lastHandle)   h=this.lastHandle + 1;  this.lastHandle=h;  return h;}  }
class C{  public void addCommandListener(ActionListener l){  if (globalCommandListeners == null) {    globalCommandListeners=new EventDispatcher();  }  globalCommandListeners.addListener(l);}  }
class C{  public void writeJson(OutputStream output){  writeJson(output,null);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceCondition_();}  }
class C{  @Override protected Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=null;  if (name.startsWith("org.apache")) {    c=findLoadedClass(name);    if (c == null) {      try {        c=findClass(name);      } catch (      ClassNotFoundException cnfe) {      }    }  }  if (c == null) {    if (getParent() != null) {      c=getParent().loadClass(name);    } else {      c=getSystemClassLoader().loadClass(name);    }  }  if (resolve) {    resolveClass(c);  }  return c;}  }
class C{  private DTNHost randomHost(){  int destaddr=0;  if (destMax == destMin) {    destaddr=destMin;  }  destaddr=destMin + rng.nextInt(destMax - destMin);  World w=SimScenario.getInstance().getWorld();  return w.getNodeByAddress(destaddr);}  }
class C{  public UnixPrincipal(String name){  if (name == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"name"};    throw new NullPointerException(form.format(source));  }  this.name=name;}  }
class C{  public static boolean verifyPassword(String password){  return decryptPrivateKey(password) != null;}  }
class C{  public <T>Observable<T> makeSubscription(final String topic,final Class<T> eventClass){  return makeSubscription(topic,SubscriptionFlags.Exact,eventClass);}  }
class C{  public synchronized TradeOrder persistTradeOrderfill(final TradeOrder tradeOrder) throws PersistentModelException {  try {    ZonedDateTime filledDate=null;    double filledValue=0;    double commission=0;    int filledQuantity=0;    for (    TradeOrderfill tradeOrderfill : tradeOrder.getTradeOrderfills()) {      if (null != tradeOrderfill.getCommission())       commission=commission + tradeOrderfill.getCommission().doubleValue();      filledQuantity=filledQuantity + tradeOrderfill.getQuantity();      filledValue=filledValue + (tradeOrderfill.getPrice().doubleValue() * tradeOrderfill.getQuantity());      if (null == filledDate)       filledDate=tradeOrderfill.getTime();      if (filledDate.isBefore(tradeOrderfill.getTime()))       filledDate=tradeOrderfill.getTime();    }    if (filledQuantity > 0) {      BigDecimal avgFillPrice=(new BigDecimal(filledValue / filledQuantity)).setScale(SCALE_5,BigDecimal.ROUND_HALF_EVEN);      BigDecimal commissionAmount=(new BigDecimal(commission)).setScale(SCALE_2,BigDecimal.ROUND_HALF_EVEN);      if (CoreUtils.nullSafeComparator(new Integer(filledQuantity),tradeOrder.getFilledQuantity()) == 1) {        tradeOrder.setAverageFilledPrice(avgFillPrice);        tradeOrder.setFilledQuantity(filledQuantity);        tradeOrder.setFilledDate(filledDate);        if (CoreUtils.nullSafeComparator(commissionAmount,tradeOrder.getCommission()) == 1)         tradeOrder.setCommission(commissionAmount);        tradeOrder.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      }    }    return persistTradeOrder(tradeOrder);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving TradeOrderfill please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving TradeOrderfill: " + tradeOrder.getOrderKey() + "\n Msg: "+ e.getMessage());  }}  }
class C{  void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  public String toString(){  return fontFace.getFamilyName() + " " + fontFace.getFontWeight()+ " "+ fontFace.getFontStyle();}  }
class C{  public Song suggestBestForArtist(Artist artist){  final Iterator<String> albums=artist.albums();  while (albums.hasNext()) {    final ProviderAggregator aggregator=ProviderAggregator.getDefault();    final String albumRef=albums.next();    Album album=aggregator.retrieveAlbum(albumRef,artist.getProvider());    if (album != null && album.isLoaded() && album.getSongsCount() > 0) {      final Iterator<String> songs=album.songs();      while (songs.hasNext()) {        String songRef=songs.next();        Song song=aggregator.retrieveSong(songRef,artist.getProvider());        if (song != null) {          if (artist.getRef().equals(song.getArtist())) {            return song;          }        }      }    }  }  return null;}  }
class C{  public final int invoke(@NonNull final ChronosOperation<?> operation,final boolean broadcastResult){  logd("invoking untagged operation");  final int id=ChronosService.getInstance().runAsync(operation,broadcastResult);  mUntaggedRequests.add(id);  return id;}  }
class C{  protected void validateOnStart(){  if (Command.START.equals(getCommand())) {    if (StringUtils.isBlank(getMemberName()) && !isSet(System.getProperties(),DistributionConfig.GEMFIRE_PREFIX + NAME) && !isSet(getDistributedSystemProperties(),NAME)&& !isSet(loadGemFireProperties(DistributedSystem.getPropertyFileURL()),NAME)) {      throw new IllegalStateException(LocalizedStrings.Launcher_Builder_MEMBER_NAME_VALIDATION_ERROR_MESSAGE.toLocalizedString("Locator"));    }    if (!SystemUtils.CURRENT_DIRECTORY.equals(getWorkingDirectory())) {      throw new IllegalStateException(LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE.toLocalizedString("Locator"));    }  }}  }
class C{  public void test_subListII(){  List sl=tVector.subList(10,25);  assertEquals("Returned sublist of incorrect size",15,sl.size());  for (int i=10; i < 25; i++)   assertTrue("Returned incorrect sublist",sl.contains(tVector.get(i)));  assertEquals("Not synchronized random access","java.util.Collections$SynchronizedRandomAccessList",sl.getClass().getName());  try {    tVector.subList(-10,25);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    tVector.subList(10,tVector.size() + 1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    tVector.subList(25,10);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  private byte[] buildFileAuthTag() throws FileEncryptionException {  SecretKey key=backEncRandomAccessFile.shareKey;  if (key == null || key.getEncoded().length == 0) {    throw new FileEncryptionException("Invalid file encryption key in encrypting random access file!");  } else {    authTagHMac.reset();    KeyParameter keyParameter=new KeyParameter(key.getEncoded());    authTagHMac.init(keyParameter);  }  if (atagList.size() == 0) {    throw new FileEncryptionException("No chunk authentication tags have been set yet!");  } else {    for (int i=0; i < atagList.size(); i++) {      byte[] curChunkTag=atagList.get(i);      if ((curChunkTag == null) || (curChunkTag.length != CHUNK_AUTH_TAG_LENGTH)) {        throw new FileEncryptionException("Invalid chunk authentication tag in auth tag table at offset: " + i);      } else {        authTagHMac.update(curChunkTag,0,CHUNK_AUTH_TAG_LENGTH);      }    }    byte[] tmp=new byte[AUTH_TAG_SIZE];    authTagHMac.doFinal(tmp,0);    return tmp;  }}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.505 -0500",hash_original_method="6E03156089AB80D54004D251F8CBA9A8",hash_generated_method="C0C3A6D4334E11C7E7E55FB20260433D") public void putIntArray(String key,int[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Ignite queue example started.");    String queueName=UUID.randomUUID().toString();    queue=initializeQueue(ignite,queueName);    readFromQueue(ignite);    writeToQueue(ignite);    clearAndRemoveQueue();  }   System.out.println("Cache queue example finished.");}  }
class C{  @Override public boolean preCall(Request request,Response responder,ServiceMethodInfo serviceMethodInfo) throws Exception {  serviceMethodInfo.setAttribute(RESPONDER_ATTRIBUTE,responder);  HttpServerRequest req=new TraceableHttpServerRequest(request);  HttpServerRequestAdapter reqAdapter=new HttpServerRequestAdapter(req,new DefaultSpanNameProvider());  reqInterceptor.handle(reqAdapter);  return true;}  }
class C{  public static MutableTreeNode leftShift(MutableTreeNode self,MutableTreeNode node){  self.insert(node,self.getChildCount());  return self;}  }
class C{  public void testMinUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="94488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="94488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.936 -0500",hash_original_method="4B87CBDD18691A2F7063A9BFE6EBFE62",hash_generated_method="F45DEE8C578CC0C333B599092F37CC4F") public NonRepeatableRequestException(String message){  super(message);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  private void checkBounds(int selectedIndex){  if (selectedIndex == 0) {    decayAmount.setEnabled(false);    decayFraction.setEnabled(true);  } else {    decayAmount.setEnabled(true);    decayFraction.setEnabled(false);  }}  }
class C{  private ArrayDeque<Node> findRoots(int[] rulesFilter){  final SparseArray<Node> keyNodes=mKeyNodes;  final ArrayList<Node> nodes=mNodes;  final int count=nodes.size();  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    node.dependents.clear();    node.dependencies.clear();  }  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    final LayoutParams layoutParams=(LayoutParams)node.view.getLayoutParams();    final int[] rules=layoutParams.mRules;    final int rulesCount=rulesFilter.length;    for (int j=0; j < rulesCount; j++) {      final int rule=rules[rulesFilter[j]];      if (rule > 0) {        final Node dependency=keyNodes.get(rule);        if (dependency == null || dependency == node) {          continue;        }        dependency.dependents.put(node,this);        node.dependencies.put(rule,dependency);      }    }  }  final ArrayDeque<Node> roots=mRoots;  roots.clear();  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    if (node.dependencies.size() == 0)     roots.addLast(node);  }  return roots;}  }
class C{  public Object clone(){  ContourPath newObject=null;  try {    newObject=(ContourPath)super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return newObject;}  }
class C{  synchronized void close(){  running=false;  notify();}  }
class C{  public boolean isOverlapping(){  return overlapping;}  }
class C{  private TripPattern processPattern(TripPattern originalPattern){  if (!originalPattern.routeId.equals(route)) {    return originalPattern;  }  nPatternsCleared+=1;  TripPattern newPattern=originalPattern.clone();  newPattern.tripSchedules=new ArrayList<>();  newPattern.servicesActive=new BitSet();  newPattern.hasFrequencies=false;  newPattern.hasSchedules=false;  for (  TripSchedule originalSchedule : originalPattern.tripSchedules) {    for (    PatternTimetable entry : entriesByTrip.get(originalSchedule.tripId)) {      entriesMatched.add(entry);      int serviceCode=servicesCopy.size();      servicesCopy.add(AddTrips.createService(entry));      newPattern.servicesActive.set(serviceCode);      if (entry.firstDepartures != null) {        for (        int firstDepartureTime : entry.firstDepartures) {          TripSchedule newSchedule=shiftedCopy(originalSchedule,firstDepartureTime,serviceCode);          newSchedule.headwaySeconds=null;          newSchedule.startTimes=null;          newSchedule.endTimes=null;          newPattern.tripSchedules.add(newSchedule);          nTripSchedulesCreated+=1;        }        newPattern.hasSchedules=true;      } else {        TripSchedule newSchedule=shiftedCopy(originalSchedule,0,serviceCode);        newSchedule.headwaySeconds=new int[]{entry.headwaySecs};        newSchedule.startTimes=new int[]{entry.startTime};        newSchedule.endTimes=new int[]{entry.endTime};        entry.applyPhasing(newSchedule);        newPattern.tripSchedules.add(newSchedule);        nTripSchedulesCreated+=1;        newPattern.hasFrequencies=true;      }    }    if (retainTripsOutsideFrequencyEntries) {      Service reducedService=blackOutService(originalSchedule);      if (reducedService != null) {        TripSchedule newSchedule=originalSchedule.clone();        newSchedule.serviceCode=servicesCopy.size();        servicesCopy.add(reducedService);        newPattern.servicesActive.set(newSchedule.serviceCode);        newPattern.tripSchedules.add(newSchedule);        newPattern.hasSchedules=true;      }    }  }  if (newPattern.tripSchedules.isEmpty()) {    return null;  }  if (newPattern.hasSchedules) {    newPattern.tripSchedules.sort(null);  }  return newPattern;}  }
class C{  public void launch(EntityMissile missileObj){}  }
class C{  public IntHashMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public GeneralizedSemIm estimate(GeneralizedSemPm pm,DataSet data){  StringBuilder builder=new StringBuilder();  GeneralizedSemIm estIm=new GeneralizedSemIm(pm);  List<Node> nodes=pm.getGraph().getNodes();  nodes.removeAll(pm.getErrorNodes());  MyContext context=new MyContext();  List<List<Double>> allResiduals=new ArrayList<>();  List<RealDistribution> allDistributions=new ArrayList<>();  for (int index=0; index < nodes.size(); index++) {    Node node=nodes.get(index);    List<String> parameters=new ArrayList<>(pm.getReferencedParameters(node));    Node error=pm.getErrorNode(node);    parameters.addAll(pm.getReferencedParameters(error));    LikelihoodFittingFunction2 likelihoodFittingfunction=new LikelihoodFittingFunction2(index,pm,parameters,nodes,data,context);    double[] values=new double[parameters.size()];    for (int j=0; j < parameters.size(); j++) {      String parameter=parameters.get(j);      Expression parameterEstimationInitializationExpression=pm.getParameterEstimationInitializationExpression(parameter);      values[j]=parameterEstimationInitializationExpression.evaluate(new MyContext());    }    double[] point=optimize(likelihoodFittingfunction,values,1);    for (int j=0; j < parameters.size(); j++) {      estIm.setParameterValue(parameters.get(j),point[j]);    }    List<Double> residuals=likelihoodFittingfunction.getResiduals();    allResiduals.add(residuals);    RealDistribution distribution=likelihoodFittingfunction.getDistribution();    allDistributions.add(distribution);    GeneralAndersonDarlingTest test=new GeneralAndersonDarlingTest(residuals,distribution);    builder.append("\nEquation: ").append(node).append(" := ").append(estIm.getNodeSubstitutedString(node));    builder.append("\n\twhere ").append(pm.getErrorNode(node)).append(" ~ ").append(estIm.getNodeSubstitutedString(pm.getErrorNode(node)));    builder.append("\nAnderson Darling A^2* for this equation =  ").append(test.getASquaredStar()).append("\n");  }  List<String> parameters=new ArrayList<>();  double[] values=new double[parameters.size()];  for (int i=0; i < parameters.size(); i++) {    values[i]=estIm.getParameterValue(parameters.get(i));  }  LikelihoodFittingFunction likelihoodFittingFunction=new LikelihoodFittingFunction(pm,parameters,nodes,data,context);  optimize(likelihoodFittingFunction,values,1);  MultiGeneralAndersonDarlingTest test=new MultiGeneralAndersonDarlingTest(allResiduals,allDistributions);  double aSquaredStar=test.getASquaredStar();  this.aSquaredStar=aSquaredStar;  String builder2="Report:\n" + "\nModel A^2* (Anderson Darling) = " + aSquaredStar + "\n"+ builder;  this.report=builder2;  return estIm;}  }
class C{  public boolean noPrimaryOrHasRegisteredInterest(){  return this.region.noPrimaryOrHasRegisteredInterest();}  }
class C{  private static void verifyConfPathCorrectness(){  GlobalConf.getInstanceIdentifier();}  }
class C{  private boolean isValidAccessMethod(String methodSig,XField field,boolean isLoad){  int paramsEnd=methodSig.indexOf(')');  if (paramsEnd < 0) {    return false;  }  String methodParams=methodSig.substring(0,paramsEnd + 1);  String methodReturnType=methodSig.substring(paramsEnd + 1);  String classSig="L" + javaClass.getClassName().replace('.','/') + ";";  StringBuilder buf=new StringBuilder();  buf.append('(');  if (!field.isStatic()) {    buf.append(classSig);  }  if (!isLoad) {    buf.append(field.getSignature());  }  buf.append(')');  String expectedMethodParams=buf.toString();  if (!methodParams.equals(expectedMethodParams)) {    if (DEBUG) {      System.out.println("In " + javaClass.getClassName() + "."+ methodName+ " expected params "+ expectedMethodParams+ ", saw "+ methodParams);      System.out.println(isLoad ? "LOAD" : "STORE");    }    return false;  }  if (!"V".equals(methodReturnType) && !methodReturnType.equals(field.getSignature())) {    if (DEBUG) {      System.out.println("In " + javaClass.getClassName() + "."+ methodName+ " expected return type V or "+ field.getSignature()+ ", saw "+ methodReturnType);      System.out.println(isLoad ? "LOAD" : "STORE");    }    return false;  }  return true;}  }
class C{  public APIConnectionGroupWrapper(APIConnectionGroup apiConnectionGroup){  this.apiConnectionGroup=apiConnectionGroup;}  }
class C{  public String toMatlab(){  StringBuffer result;  int i;  int n;  result=new StringBuffer();  result.append("[");  for (i=0; i < m_size; i++) {    if (i > 0) {      result.append("; ");    }    for (n=0; n < m_size; n++) {      if (n > 0) {        result.append(" ");      }      result.append(getCell(i,n));    }  }  result.append("]");  return result.toString();}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext accContext=getContext(menuItem,Region.MENU_ITEM_ACCELERATOR);  String prefix=getPropertyPrefix();  Icon checkIcon=style.getIcon(context,prefix + ".checkIcon");  Icon arrowIcon=style.getIcon(context,prefix + ".arrowIcon");  SynthGraphicsUtils.paint(context,accContext,g,checkIcon,arrowIcon,acceleratorDelimiter,defaultTextIconGap,getPropertyPrefix());  accContext.dispose();}  }
class C{  private static void collectFollowingBlocks(PsiElement element,List<PsiCodeBlock> out){  while (element != null) {    if (element instanceof PsiCodeBlock) {      out.add((PsiCodeBlock)element);    }    collectFollowingBlocks(element.getFirstChild(),out);    element=element.getNextSibling();  }}  }
class C{  public Container deploy(Archive<?> deployment) throws DeploymentException {  if (!this.running) {    throw new RuntimeException("The Container has not been started.");  }  this.deployer.deploy(deployment);  return this;}  }
class C{  public static <A>SetTSeq<A> fromStream(final AnyMSeq<Stream<A>> monads){  return of(monads.map(null));}  }
class C{  public void compressBlockDXT1a(ColorBlock4x4 colorBlock,DXTCompressionAttributes attributes,BlockDXT1 dxtBlock){  if (colorBlock == null) {    String message=Logging.getMessage("nullValue.ColorBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dxtBlock == null) {    String message=Logging.getMessage("nullValue.DXTBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.chooseMinMaxColors(colorBlock,attributes,this.minColor,this.maxColor);  int color0=short565FromColor32(this.maxColor);  int color1=short565FromColor32(this.minColor);  if (color0 < color1) {    int tmp=color0;    color0=color1;    color1=tmp;  }  computeColorPalette3(color1,color0,this.palette);  dxtBlock.color0=color1;  dxtBlock.color1=color0;  dxtBlock.colorIndexMask=computePaletteIndices3(colorBlock,attributes,this.palette);}  }
class C{  protected boolean isDefaultGateway(Ethernet frame){  if (macToGateway.containsKey(frame.getSourceMAC()))   return true;  Integer gwIp=macToGateway.get(frame.getDestinationMAC());  if (gwIp != null) {    MACAddress host=frame.getSourceMAC();    String srcNet=macToGuid.get(host);    if (srcNet != null) {      Integer gwIpSrcNet=guidToGateway.get(srcNet);      if ((gwIpSrcNet != null) && (gwIp.equals(gwIpSrcNet)))       return true;    }  }  return false;}  }
class C{  private DistributedClearOperation(OperationType op,RegionEventImpl event,RegionVersionVector rvv,Set<InternalDistributedMember> recipients){  super(event);  this.rvv=rvv;  this.operation=op;  this.recipients=recipients;  if (event != null) {    this.operationTag=event.getVersionTag();  }}  }
class C{  public boolean isOuterLanguageBlock(){  return (myStartTreeNode == myEndTreeNode) && (myStartTreeNode instanceof OuterLanguageElement);}  }
class C{  Node searchLogic(final Node fromNode,final Node toNode,final RouterPriorityQueue<Node> pendingNodes){  boolean stillSearching=true;  while (stillSearching) {    Node outNode=pendingNodes.poll();    if (outNode == null) {      log.warn("No route was found from node " + fromNode.getId() + " to node "+ toNode.getId());      return null;    }    if (outNode == toNode) {      stillSearching=false;    } else {      relaxNode(outNode,toNode,pendingNodes);    }  }  return toNode;}  }
class C{  protected void paintButtonPressed(Graphics g,AbstractButton b){}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  public ImageSource tilingDisabled(){  return tiling(false);}  }
class C{  private void checkNodeStatus(URI uri,String uriCmd) throws SysClientException {  _log.info("Entering SysClientFactory.checkNodeStatus()");  String nodeIP;  try {    _log.info("Before InetAddress.getByName()");    nodeIP=InetAddress.getByName(_endpoint.getHost()).getHostAddress();    _log.info("after InetAddress.getByName()");  } catch (  UnknownHostException e) {    _log.info(" request on URI {} to node {} failed to get node IP address {}",new Object[]{uri,_endpoint.toString(),e.getMessage()});    throw SyssvcException.syssvcExceptions.sysClientError(MessageFormatter.arrayFormat(uriCmd + " request on URI {} to node {} failed to get node IP address {}",new Object[]{uri,_endpoint.toString(),e.getMessage()}).getMessage());  }  _log.info("out first try catch");  final String[] cmd={_IPCHECKTOOL_CMD,"--ip",nodeIP};  _log.info("get cmd");  Exec.Result result=Exec.sudo(_IPCHECKTOOL_TIMEOUT,cmd);  _log.info("Exec.Result");  if (result.getExitValue() == _IPCHECKTOOL_IP_CONFLICT) {    _log.info(" request on URI {} to node {} failed due to IP conflict at {}",new Object[]{uri,_endpoint.toString(),nodeIP});    throw SyssvcException.syssvcExceptions.sysClientError(MessageFormatter.arrayFormat(uriCmd + " request on URI {} to node {} failed due to IP conflict at {}",new Object[]{uri,_endpoint.toString(),nodeIP}).getMessage());  } else   if (result.getExitValue() == _IPCHECKTOOL_NO_NODE) {    _log.info(" request on URI {} to node {} failed due to node with IP {}  is down.",new Object[]{uri,_endpoint.toString(),nodeIP});    throw SyssvcException.syssvcExceptions.sysClientError(MessageFormatter.arrayFormat(uriCmd + " request on URI {} to node {} failed due to node with IP {}  is down.",new Object[]{uri,_endpoint.toString(),nodeIP}).getMessage());  }  _log.info("out of Check status");}  }
class C{  public static String format(final Date date,final String pattern){  return format(date,pattern,null,null);}  }
class C{  public final static byte[] toRawByteArray(char[] carr){  byte[] barr=new byte[carr.length << 1];  for (int i=0, bpos=0; i < carr.length; i++) {    char c=carr[i];    barr[bpos++]=(byte)((c & 0xFF00) >> 8);    barr[bpos++]=(byte)(c & 0x00FF);  }  return barr;}  }
class C{  @Nullable public Field firstField(Class<?> cls){  assert cls != null;  List<Field> l=fields(cls);  return l.isEmpty() ? null : l.get(0);}  }
class C{  private void layoutTabComponents(){  Rectangle rect=new Rectangle();  for (int i=0; i < tabPane.getTabCount(); i++) {    Component c=tabPane.getTabComponentAt(i);    if (c == null) {      continue;    }    getTabBounds(i,rect);    Dimension preferredSize=c.getPreferredSize();    Insets insets=getTabInsets(tabPlacement,i);    int outerX=(rect.x - c.getParent().getX()) + insets.left;    int outerY=(rect.y - c.getParent().getY()) + insets.top;    int outerWidth=rect.width - insets.left - insets.right;    int outerHeight=rect.height - insets.top - insets.bottom;    int x=outerX + (outerWidth - preferredSize.width) / 2;    int y=outerY + (outerHeight - preferredSize.height) / 2;    boolean isSelected=i == tabPane.getSelectedIndex();    c.setBounds(x + getTabLabelShiftX(tabPlacement,i,isSelected),y + getTabLabelShiftY(tabPlacement,i,isSelected),preferredSize.width,preferredSize.height);  }}  }
class C{  public final void writeLEDouble(double d) throws IOException {  this.writeLELong(Double.doubleToLongBits(d));}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Configuration public Option[] config(){  List<Option> options=new ArrayList<>(Arrays.asList(baseConfig()));  options.add(KarafDistributionOption.features(CAMEL_REPO_URI));  return CoreOptions.options(options.toArray(new Option[0]));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return System.getProperty("user.dir");}  }
class C{  private boolean shouldUpdateMinMaxDate(CalendarDay minMaxDate,Date newDate){  if (minMaxDate == null) {    return true;  }  java.util.Calendar newDateCalendar=java.util.Calendar.getInstance();  newDateCalendar.setTimeInMillis(newDate.getTime());  return (minMaxDate.getYear() != newDateCalendar.get(java.util.Calendar.YEAR) && minMaxDate.getMonth() != newDateCalendar.get(java.util.Calendar.MONTH) && minMaxDate.getDay() != newDateCalendar.get(java.util.Calendar.DAY_OF_MONTH));}  }
class C{  protected long processInStreamOutLong(int type,BinaryRawReaderEx reader,PlatformMemory mem) throws IgniteCheckedException {  return processInStreamOutLong(type,reader);}  }
class C{  public static PrimitiveInfo fromObject(Object o){  if (o instanceof Integer) {    return new PrimitiveInfo(((Integer)o).intValue());  } else   if (o instanceof Short) {    return new PrimitiveInfo(((Short)o).intValue());  } else   if (o instanceof Byte) {    return new PrimitiveInfo(((Byte)o).intValue());  } else   if (o instanceof Long) {    return new PrimitiveInfo(((Long)o).longValue());  } else   if (o instanceof Float) {    return new PrimitiveInfo(((Float)o).floatValue());  } else   if (o instanceof Double) {    return new PrimitiveInfo(((Double)o).doubleValue());  } else   if (o instanceof Boolean) {    return new PrimitiveInfo(((Boolean)o).booleanValue());  } else {    Log.err("unsupported object to ValueInfo" + o.getClass().toString());    return null;  }}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public void removeCacheListener(MemoryCache.CacheListener listener){  if (listener == null) {    String message=Logging.getMessage("BasicMemoryCache.nullListenerRemoved");    Logging.logger().warning(message);    throw new IllegalArgumentException(message);  }  this.listeners.remove(listener);}  }
class C{  public void service(Mail mail){  try {    log(mail.getName() + "HeadersToHTTP: Starting");    MimeMessage message=mail.getMessage();    HashSet<NameValuePair> pairs=getNameValuePairs(message);    log(mail.getName() + "HeadersToHTTP: " + pairs.size()+ " named value pairs found");    String result=httpPost(pairs);    if (passThrough) {      addHeader(mail,true,result);    } else {      mail.setState(Mail.GHOST);    }  } catch (  javax.mail.MessagingException me) {    log(me.getMessage());    addHeader(mail,false,me.getMessage());  }catch (  IOException e) {    log(e.getMessage());    addHeader(mail,false,e.getMessage());  }}  }
class C{  public void functionMessage(long pkt){  if ((pkt & 0xFFFFFF0) == 0xA0) {    localF9=((pkt & 0x01) != 0);    localF10=((pkt & 0x02) != 0);    localF11=((pkt & 0x04) != 0);    localF12=((pkt & 0x08) != 0);    notifySlotListeners();  } else   if ((pkt & 0xFFFFFF00) == 0xDE00) {    localF13=((pkt & 0x01) != 0);    localF14=((pkt & 0x02) != 0);    localF15=((pkt & 0x04) != 0);    localF16=((pkt & 0x08) != 0);    localF17=((pkt & 0x10) != 0);    localF18=((pkt & 0x20) != 0);    localF19=((pkt & 0x40) != 0);    localF20=((pkt & 0x80) != 0);    notifySlotListeners();  } else   if ((pkt & 0xFFFFFF00) == 0xDF00) {    localF21=((pkt & 0x01) != 0);    localF22=((pkt & 0x02) != 0);    localF23=((pkt & 0x04) != 0);    localF24=((pkt & 0x08) != 0);    localF25=((pkt & 0x10) != 0);    localF26=((pkt & 0x20) != 0);    localF27=((pkt & 0x40) != 0);    localF28=((pkt & 0x80) != 0);    notifySlotListeners();  }}  }
class C{  public final void removeAllHelperTextColors(@NonNull final int... colors){  ensureNotNull(colors,"The array may not be null");  for (  int color : colors) {    removeHelperTextColor(color);  }}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  @Override public int compareTo(Plottable o){  if (mTimestamp == o.mTimestamp) {    return 0;  } else   if (mTimestamp < o.mTimestamp) {    return -1;  } else {    return 1;  }}  }
class C{  public void report(){  for (  ConfiguredReporter reporter : reporters) {    reporter.report();  }}  }
class C{  public Object mapTo(final Object objectToMap,final JBBPMapperCustomFieldProcessor customFieldProcessor,final int flags){  return JBBPMapper.map(this,objectToMap,customFieldProcessor,flags);}  }
class C{  public static Object xml(String xml){  Object o=null;  try {    o=Gestion.getXStream().fromXML(xml);  } catch (  com.thoughtworks.xstream.mapper.CannotResolveClassException e) {    System.out.println("excepcion: " + e.getMessage());    String nombre="";    String nombreClase="ieci.tecdoc.sgm.xml." + nombre.toLowerCase() + "."+ nombre;    try {      Class.forName(nombreClase).newInstance();    } catch (    Exception ee) {      System.out.println("excepcion: " + ee.getMessage());    }    o=Gestion.getXStream().fromXML(xml);  }  return o;}  }
class C{  public Timestamp decrypt(Timestamp value){  return value;}  }
class C{  public static String rightPad(String str,int size){  return rightPad(str,size," ");}  }
class C{  public static MultiPoint[] toMultiPointArray(Collection multiPoints){  MultiPoint[] multiPointArray=new MultiPoint[multiPoints.size()];  return (MultiPoint[])multiPoints.toArray(multiPointArray);}  }
class C{  @Override public int compareTo(RemindDTO another){  return remindTime.compareTo(another.remindTime);}  }
class C{  public static SetVal create(Collection<Value> vals){  return new SetVal(vals);}  }
class C{  public BigDecimal read(String value){  return new BigDecimal(value);}  }
class C{  public void hide(){  if (this.parent.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  if (this.panel == null || this.panel.isDisposed()) {    return;  }  this.panel.dispose();}  }
class C{  public void expandVirtualVolume(URI vplexSystemURI,URI vplexVolumeURI,Long newSize,List<String> systemNativeGuids,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    String vplexVolumeName=vplexVolume.getDeviceLabel();    _log.info("Virtual volume name is {}",vplexVolumeName);    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexSystemURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    _log.info("Got VPlex API client for VPlex system {}",vplexSystemURI);    if (systemNativeGuids != null) {      client.rediscoverStorageSystems(systemNativeGuids);      try {        Thread.sleep(60000);      } catch (      Exception e) {        _log.warn("thread sleep exception " + e.getLocalizedMessage());      }    }    int expansionStatusRetryCount=Integer.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,VPlexApiConstants.EXPANSION_STATUS_RETRY_COUNT));    long expansionStatusSleepTime=Long.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,VPlexApiConstants.EXPANSION_STATUS_SLEEP_TIME_MS));    VPlexVirtualVolumeInfo vplexVolumeInfo=client.expandVirtualVolume(vplexVolumeName,expansionStatusRetryCount,expansionStatusSleepTime);    _log.info("Completed VPlex volume expansion");    vplexVolume.setCapacity(newSize);    vplexVolume.setProvisionedCapacity(vplexVolumeInfo.getCapacityBytes());    vplexVolume.setAllocatedCapacity(0L);    _dbClient.updateObject(vplexVolume);    _log.info("Updated volume size");    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception expanding VPlex virtual volume: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception expanding VPlex virtual volume: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.EXPAND_VIRTUAL_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.expandVirtualVolumeFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  @Override public String toString(){  return "cudaEvent_t[" + "nativePointer=" + getNativePointer() + "]";}  }
class C{  private Bitmap loadBitmapFromHttp(String url,int reqWidth,int reqHeight) throws IOException {  if (Looper.myLooper() == Looper.getMainLooper())   throw new RuntimeException("Please stop visiting Network in UI Thread");  if (mDiskLruCache == null) {    return null;  }  String key=hashKeyFromUrl(url);  DiskLruCache.Editor editor=mDiskLruCache.edit(key);  if (editor != null) {    OutputStream outputStream=editor.newOutputStream(DISK_CACHE_INDEX);  }  return null;}  }
class C{  public static boolean isReadable(@NonNull final String file){  return isReadable(new File(file));}  }
class C{  public Note cloneNote(String sourceNoteId,String newNoteName,AuthenticationInfo subject) throws IOException, CloneNotSupportedException, IllegalArgumentException {  Note sourceNote=getNote(sourceNoteId);  if (sourceNote == null) {    throw new IllegalArgumentException(sourceNoteId + "not found");  }  Note newNote=createNote(subject);  if (newNoteName != null) {    newNote.setName(newNoteName);  } else {    newNote.setName("Note " + newNote.getId());  }  List<String> boundInterpreterSettingsIds=getBindedInterpreterSettingsIds(sourceNote.getId());  bindInterpretersToNote(subject.getUser(),newNote.getId(),boundInterpreterSettingsIds);  List<Paragraph> paragraphs=sourceNote.getParagraphs();  for (  Paragraph p : paragraphs) {    newNote.addCloneParagraph(p);  }  noteSearchService.addIndexDoc(newNote);  newNote.persist(subject);  return newNote;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.203 -0500",hash_original_method="9C68345D80E74B8E583DD83B51C68973",hash_generated_method="23CE4BE721FB71F983A94D76D7BC97E8") public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  private void remove(ThreadGroup g){synchronized (this.childrenGroupsLock) {    for (int i=0; i < numGroups; i++) {      if (childrenGroups[i].equals(g)) {        numGroups--;        System.arraycopy(childrenGroups,i + 1,childrenGroups,i,numGroups - i);        childrenGroups[numGroups]=null;        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public final String replaceAll(String input,String replacement){  return this.pattern.matcher(input).replaceAll(replacement);}  }
class C{  @CliCommand(value={CliStrings.UNDEPLOY},help=CliStrings.UNDEPLOY__HELP) @CliMetaData(relatedTopic={CliStrings.TOPIC_GEODE_CONFIG},writesToSharedConfiguration=true) @ResourceOperation(resource=Resource.DATA,operation=Operation.MANAGE) public final Result undeploy(@CliOption(key={CliStrings.UNDEPLOY__GROUP},help=CliStrings.UNDEPLOY__GROUP__HELP,optionContext=ConverterHint.MEMBERGROUP) @CliMetaData(valueSeparator=",") String[] groups,@CliOption(key={CliStrings.UNDEPLOY__JAR},help=CliStrings.UNDEPLOY__JAR__HELP,unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE) @CliMetaData(valueSeparator=",") String jars){  try {    TabularResultData tabularData=ResultBuilder.createTabularResultData();    boolean accumulatedData=false;    Set<DistributedMember> targetMembers;    try {      targetMembers=CliUtil.findAllMatchingMembers(groups,null);    } catch (    CommandResultException crex) {      return crex.getResult();    }    ResultCollector<?,?> rc=CliUtil.executeFunction(this.undeployFunction,new Object[]{jars},targetMembers);    List<CliFunctionResult> results=CliFunctionResult.cleanResults((List<?>)rc.getResult());    for (    CliFunctionResult result : results) {      if (result.getThrowable() != null) {        tabularData.accumulate("Member",result.getMemberIdOrName());        tabularData.accumulate("Un-Deployed JAR","");        tabularData.accumulate("Un-Deployed JAR Location","ERROR: " + result.getThrowable().getClass().getName() + ": "+ result.getThrowable().getMessage());        accumulatedData=true;        tabularData.setStatus(Status.ERROR);      } else {        String[] strings=(String[])result.getSerializables();        for (int i=0; i < strings.length; i+=2) {          tabularData.accumulate("Member",result.getMemberIdOrName());          tabularData.accumulate("Un-Deployed JAR",strings[i]);          tabularData.accumulate("Un-Deployed From JAR Location",strings[i + 1]);          accumulatedData=true;        }      }    }    if (!accumulatedData) {      return ResultBuilder.createInfoResult(CliStrings.UNDEPLOY__NO_JARS_FOUND_MESSAGE);    }    Result result=ResultBuilder.buildResult(tabularData);    if (tabularData.getStatus().equals(Status.OK)) {      result.setCommandPersisted((new SharedConfigurationWriter()).deleteJars(jars == null ? null : jars.split(","),groups));    }    return result;  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable th) {    SystemFailure.checkFailure();    return ResultBuilder.createGemFireErrorResult("Exception while attempting to un-deploy: " + th.getClass().getName() + ": "+ th.getMessage());  }}  }
class C{  public static boolean hasLineFeed(String str){  int len=str.length();  char c;  for (int i=0; i < len; i++) {    c=str.charAt(i);    if (c == '\n' || c == '\r')     return true;  }  return false;}  }
class C{  public void addAttributeFor(final Field field){  fieldToUseAsAttribute.add(field);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  for (int i=0; i < m_Codebits[0].length; i++) {    for (int j=0; j < m_Codebits.length; j++) {      sb.append(m_Codebits[j][i] ? " 1" : " 0");    }    sb.append('\n');  }  return sb.toString();}  }
class C{  public UsageLicense addUser(PlatformUser user,RoleDefinition role) throws UserAlreadyAssignedException {  if (user == null) {    return null;  }  for (  UsageLicense u : getUsageLicenses()) {    if (user.equals(u.getUser())) {      throw new UserAlreadyAssignedException(this.getSubscriptionId(),user.getUserId());    }  }  UsageLicense license=new UsageLicense();  license.setRoleDefinition(role);  license.setAssignmentDate(DateFactory.getInstance().getTransactionTime());  license.setSubscription(this);  license.setUser(user);  usageLicenses.add(license);  return license;}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public CubeRenderer(){  mCube=new Cube();}  }
class C{  public CellularAutomatonRNG(final RandomUtils seedGenerator){  this(seedGenerator.generateSeed(SEED_SIZE_BYTES));}  }
class C{  public static IStatus validateClassFileName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_nullName,null);  }  if (!org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name)) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  String identifier;  int index;  index=name.lastIndexOf('.');  if (index == -1) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  identifier=name.substring(0,index);  if (!identifier.equals(PACKAGE_INFO)) {    IStatus status=validateIdentifier(identifier,sourceLevel,complianceLevel);    if (!status.isOK()) {      return status;    }  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  private static int PushLocalFrame(JNIEnvironment env,int capacity){  if (traceJNI)   VM.sysWrite("JNI called: PushLocalFrame \n");  RuntimeEntrypoints.checkJNICountDownToGC();  return 0;}  }
class C{  public void displayComment(String msg){  Color msgColor=(msg.contains("error")) ? new Color(250,230,230) : new Color(230,250,230);  BalloonTipStyle style=new RoundedBalloonStyle(5,5,msgColor,Color.BLACK);  BalloonTip tip=new BalloonTip(frame.getMenu(),msg,style,false);  tip.setVisible(true);  new Thread(null).start();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.134 -0500",hash_original_method="22A9CB4332482AECEE114125E6F63C27",hash_generated_method="1BF27C0DE5B5341ACCEFFB6DF77280E8") private boolean isIPv6Address(String address){  return (address != null && address.indexOf(':') != -1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.092 -0400",hash_original_method="D4D4082A9C972307633B5D5120EC13F5",hash_generated_method="A2F3463D3EDB5CE6BC1D33FECD5AD83D") public boolean disable(){  return disable(true);}  }
class C{  @Override protected RecommendationCollection doInBackground(final PlaceInfo... params){  PlaceInfo place=params[0];  if (place == null) {    return null;  }  RecommendationCollection result;  try {    result=shoppingAssistantAPI.recommendations().listRecommendations(place.getPlaceId()).execute();  } catch (  IOException e) {    String message=e.getMessage();    if (message == null) {      message=e.toString();    }    log.severe("Exception=" + message);    result=null;  }  return result;}  }
class C{  public static Uri addImageToMediaStore(ContentResolver resolver,String title,long date,Location location,int orientation,long jpegLength,String path,int width,int height,String mimeType){  ContentValues values=getContentValuesForData(title,date,location,orientation,jpegLength,path,width,height,mimeType);  Uri uri=null;  try {    uri=resolver.insert(Images.Media.EXTERNAL_CONTENT_URI,values);  } catch (  Throwable th) {    Log.e(TAG,"Failed to write MediaStore" + th);  }  return uri;}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  private void submitRegionEvictionTask(Callable<Object> task){  evictorThreadPool.submit(task);}  }
class C{  public Matrix4f mulPerspectiveAffine(Matrix4x3fc view){  return mulPerspectiveAffine(view,this);}  }
class C{  public boolean isReference(){  return true;}  }
class C{  public boolean completeExceptionally(Throwable ex){  this.value=null;  this.executionException=new ExecutionException(ex);  this.isCompletedExceptionally=true;  this.isDone=true;  return true;}  }
class C{  public byte[] unwrap(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (forWrapping) {    throw new IllegalStateException("Not set for unwrapping");  }  if (in == null) {    throw new InvalidCipherTextException("Null pointer as ciphertext");  }  final int blockSize=engine.getBlockSize();  if (inLen % blockSize != 0) {    throw new InvalidCipherTextException("Ciphertext not multiple of " + blockSize);  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(false,param2);  byte TEMP3[]=new byte[inLen];  for (int currentBytePos=0; currentBytePos != inLen; currentBytePos+=blockSize) {    engine.processBlock(in,inOff + currentBytePos,TEMP3,currentBytePos);  }  byte[] TEMP2=reverse(TEMP3);  this.iv=new byte[8];  byte[] TEMP1=new byte[TEMP2.length - 8];  System.arraycopy(TEMP2,0,this.iv,0,8);  System.arraycopy(TEMP2,8,TEMP1,0,TEMP2.length - 8);  this.paramPlusIV=new ParametersWithIV(this.param,this.iv);  this.engine.init(false,this.paramPlusIV);  byte[] WKCKS=new byte[TEMP1.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP1,currentBytePos,WKCKS,currentBytePos);  }  byte[] result=new byte[WKCKS.length - 8];  byte[] CKStoBeVerified=new byte[8];  System.arraycopy(WKCKS,0,result,0,WKCKS.length - 8);  System.arraycopy(WKCKS,WKCKS.length - 8,CKStoBeVerified,0,8);  if (!checkCMSKeyChecksum(result,CKStoBeVerified)) {    throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted");  }  return result;}  }
class C{  protected void recordCurrentOplogPosition(){  primaryClient.execute("get oplog position",null);}  }
class C{  ClassDoc[] exceptionTypes(){  return exceptionTypes.clone();}  }
class C{  public K transformer(Transformer transformer){  this.transformer=transformer;  return self();}  }
class C{  protected boolean canResponseHaveBody(final HttpRequest request,final HttpResponse response){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  int status=response.getStatusLine().getStatusCode();  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED && status != HttpStatus.SC_RESET_CONTENT;}  }
class C{  public static DoubleMatrix2D less(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.less);}  }
class C{  public XYSeries(String title,int scaleNumber){  mTitle=title;  mScaleNumber=scaleNumber;  initRange();}  }
class C{  public void invalidate(int row){  if (m_tuples == null || row < 0 || row >= m_tuples.length) {    return;  } else   if (m_tuples[row] != null) {    m_tuples[row].invalidate();    m_tuples[row]=null;  }}  }
class C{  public VideoSharingDeleteTask(VideoSharingServiceImpl videoSharingService,RichcallService richcallService,LocalContentResolver contentResolver,String sharingId){  super(contentResolver,VideoSharingData.CONTENT_URI,VideoSharingData.KEY_SHARING_ID,VideoSharingData.KEY_CONTACT,null,sharingId);  mVideoSharingService=videoSharingService;  mRichcallService=richcallService;}  }
class C{  public ISelectPiece select(ISelectPiece piece){  SubSelectReferencePiece ref=new SubSelectReferencePiece(from,piece);  return mixedSelect.select(ref);}  }
class C{  public Path(){}  }
class C{  public static boolean deleteFiles(final File targetDir){  if (targetDir == null || !targetDir.isDirectory()) {    Log.e(FileUtils.class,"deleteFiles(): Null parameter given or not a Directory");    return false;  }  boolean isDeleted=true;  final File[] filesList=targetDir.listFiles();  for (  File file2Delete : filesList)   if (file2Delete.isFile())   isDeleted&=file2Delete.delete();  return isDeleted;}  }
class C{  public String createObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {  String query=((TableDefinition)databaseObjectDefinition).buildCreationWriter(session,new StringWriter()).toString();  System.out.println("query : " + query);  return query;}  }
class C{  public boolean isStatistics(){  return statistics;}  }
class C{  @Override public void update(DeployService2Impl<I> deploy,Result<I> result){  LifecycleState state=deploy.getState();  if (state.isStopped()) {    deploy.startImpl(result);  } else   if (state.isError()) {    deploy.restartImpl(result);  } else   if (deploy.isModifiedNow()) {    deploy.restartImpl(result);  } else {    result.ok(deploy.get());  }}  }
class C{  public LSHSuperBit(final int stages,final int buckets,final int dimensions,final long seed){  super(stages,buckets);  int code_length=stages * buckets / 2;  int superbit=computeSuperBit(stages,buckets,dimensions);  this.sb=new SuperBit(dimensions,superbit,code_length / superbit,seed);}  }
class C{  private static final String export(Settings settings){  StringBuilder sb=new StringBuilder();  if (settings.getStepFrequency() != Settings.DEFAULT_STEP_FREQUENCY) {    sb.append(TAB2).append("settings.setStepFrequency(").append(1.0 / settings.getStepFrequency()).append(");").append(NEW_LINE);  }  if (settings.getMaximumTranslation() != Settings.DEFAULT_MAXIMUM_TRANSLATION) {    sb.append(TAB2).append("settings.setMaximumTranslation(").append(settings.getMaximumTranslation()).append(");").append(NEW_LINE);  }  if (settings.getMaximumRotation() != Settings.DEFAULT_MAXIMUM_ROTATION) {    sb.append(TAB2).append("settings.setMaximumRotation(Math.toRadians(").append(Math.toDegrees(settings.getMaximumRotation())).append("));").append(NEW_LINE);  }  if (!settings.isAutoSleepingEnabled()) {    sb.append(TAB2).append("settings.setAutoSleepingEnabled(false);").append(NEW_LINE);  }  if (settings.getSleepLinearVelocity() != Settings.DEFAULT_SLEEP_LINEAR_VELOCITY) {    sb.append(TAB2).append("settings.setSleepLinearVelocity(").append(settings.getSleepLinearVelocity()).append(");").append(NEW_LINE);  }  if (settings.getSleepAngularVelocity() != Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY) {    sb.append(TAB2).append("settings.setSleepAngularVelocity(Math.toRadians(").append(Math.toDegrees(settings.getSleepAngularVelocity())).append("));").append(NEW_LINE);  }  if (settings.getSleepTime() != Settings.DEFAULT_SLEEP_TIME) {    sb.append(TAB2).append("settings.setSleepTime(").append(settings.getSleepTime()).append(");").append(NEW_LINE);  }  if (settings.getVelocityConstraintSolverIterations() != Settings.DEFAULT_SOLVER_ITERATIONS) {    sb.append(TAB2).append("settings.setVelocityConstraintSolverIterations(").append(settings.getVelocityConstraintSolverIterations()).append(");").append(NEW_LINE);  }  if (settings.getPositionConstraintSolverIterations() != Settings.DEFAULT_SOLVER_ITERATIONS) {    sb.append(TAB2).append("settings.setPositionConstraintSolverIterations(").append(settings.getPositionConstraintSolverIterations()).append(");").append(NEW_LINE);  }  if (settings.getWarmStartDistance() != Settings.DEFAULT_WARM_START_DISTANCE) {    sb.append(TAB2).append("settings.setWarmStartDistance(").append(settings.getWarmStartDistance()).append(");").append(NEW_LINE);  }  if (settings.getRestitutionVelocity() != Settings.DEFAULT_RESTITUTION_VELOCITY) {    sb.append(TAB2).append("settings.setRestitutionVelocity(").append(settings.getRestitutionVelocity()).append(");").append(NEW_LINE);  }  if (settings.getLinearTolerance() != Settings.DEFAULT_LINEAR_TOLERANCE) {    sb.append(TAB2).append("settings.setLinearTolerance(").append(settings.getLinearTolerance()).append(");").append(NEW_LINE);  }  if (settings.getAngularTolerance() != Settings.DEFAULT_ANGULAR_TOLERANCE) {    sb.append(TAB2).append("settings.setAngularTolerance(Math.toRadians(").append(Math.toDegrees(settings.getAngularTolerance())).append("));").append(NEW_LINE);  }  if (settings.getMaximumLinearCorrection() != Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION) {    sb.append(TAB2).append("settings.setMaximumLinearCorrection(").append(settings.getMaximumLinearCorrection()).append(");").append(NEW_LINE);  }  if (settings.getMaximumAngularCorrection() != Settings.DEFAULT_MAXIMUM_ANGULAR_CORRECTION) {    sb.append(TAB2).append("settings.setMaximumAngularCorrection(Math.toRadians(").append(Math.toDegrees(settings.getMaximumAngularCorrection())).append("));").append(NEW_LINE);  }  if (settings.getBaumgarte() != Settings.DEFAULT_BAUMGARTE) {    sb.append(TAB2).append("settings.setBaumgarte(").append(settings.getBaumgarte()).append(");").append(NEW_LINE);  }  if (settings.getContinuousDetectionMode() != ContinuousDetectionMode.ALL) {    sb.append(TAB2).append("settings.setContinuousDetectionMode(Settings.ContinuousDetectionMode.").append(settings.getContinuousDetectionMode()).append(");").append(NEW_LINE);  }  return sb.toString();}  }
class C{  @Override public void sawOpcode(int seen){  if (DEBUG) {    System.out.println(getPC() + " " + OPCODE_NAMES[seen]);  }switch (seen) {case IFNE:case IFEQ:{      OpcodeStack.Item top=stack.getStackItem(0);      if (DEBUG) {        System.out.println("Stack top: " + top);      }      XMethod m=top.getReturnValueOf();      if (m != null && "java.util.concurrent.ConcurrentHashMap".equals(m.getClassName()) && "containsKey".equals(m.getName())) {        lastQuestionableCheckTarget=getBranchTarget();        if (seen == IFEQ) {          priority=LOW_PRIORITY;        } else         if (seen == IFNE) {          priority=NORMAL_PRIORITY;        }      }      break;    }case IFNULL:case IFNONNULL:{    OpcodeStack.Item top=stack.getStackItem(0);    if (DEBUG) {      System.out.println("Stack top: " + top);    }    XMethod m=top.getReturnValueOf();    if (DEBUG) {      System.out.println("Found null check");    }    if (m != null && "java.util.concurrent.ConcurrentHashMap".equals(m.getClassName()) && "get".equals(m.getName())) {      lastQuestionableCheckTarget=getBranchTarget();      if (seen == IFNULL) {        priority=LOW_PRIORITY;      } else       if (seen == IFNONNULL) {        priority=NORMAL_PRIORITY;      }    }    break;  }case INVOKEVIRTUAL:case INVOKEINTERFACE:{  if ("java.util.concurrent.ConcurrentHashMap".equals(getDottedClassConstantOperand())) {    String methodName=getNameConstantOperand();    XClass xClass=getXClassOperand();    if (xClass != null && "put".equals(methodName)) {      if ((getPC() < lastQuestionableCheckTarget) && (lastQuestionableCheckTarget != -1)) {        bugReporter.reportBug(new BugInstance(this,"AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION",priority).addClassAndMethod(this).addType(xClass.getClassDescriptor()).addCalledMethod(this).addSourceLine(this));      }    }  }  break;}default :break;}}  }
class C{  public void addColumn(){  addColumn(dataset.getColumnCount());}  }
class C{  private static byte[] readEntryFromJar(String jar,String name) throws IOException {  ZipFile zipFile=new ZipFile(jar);  ZipEntry entry=zipFile.getEntry(name);  if (entry == null) {    entry=zipFile.getEntry(name);    if (entry == null) {      zipFile.close();      return null;    }  }  ByteArrayOutputStream outs=new ByteArrayOutputStream();  BufferedInputStream ins=new BufferedInputStream(zipFile.getInputStream(entry));  int c=ins.read();  while (c != -1) {    outs.write(c);    c=ins.read();  }  ins.close();  zipFile.close();  return outs.toByteArray();}  }
class C{  public void overwriteSetSelectedText(String str){  if (!overwrite || selectionStart != selectionEnd) {    setSelectedText(str);    return;  }  int caret=getCaretPosition();  int caretLineEnd=getLineEndOffset(getCaretLine());  if (caretLineEnd - caret <= str.length()) {    setSelectedText(str);    return;  }  document.beginCompoundEdit();  try {    document.remove(caret,str.length());    document.insertString(caret,str,null);  } catch (  BadLocationException bl) {    bl.printStackTrace();  } finally {    document.endCompoundEdit();  }}  }
class C{  public boolean isWellFormed(){  ValueRange possibleCondPairs=new ValueRange(table.keySet());  if (possibleCondPairs.getNbCombinations() < 100) {    Set<Assignment> possibleCondAssignments=possibleCondPairs.linearise();    possibleCondAssignments.remove(new Assignment());    if (possibleCondAssignments.size() != table.keySet().size() && possibleCondAssignments.size() > 1) {      log.warning("number of possible conditional assignments: " + possibleCondAssignments.size() + ", but number of actual conditional assignments: "+ table.keySet().size());      log.fine("possible conditional assignments: " + possibleCondAssignments);      log.fine("actual assignments: " + table.keySet());      return false;    }  }  return true;}  }
class C{  List<String> listSnapshots(Collection<String> attrs){  NaElement elem=new NaElement("snapshot-get-iter");  NaElement resultElem=null;  String tag=null;  NaElement volumeElem=new NaElement("volume-get-iter");  if (name != null && !name.isEmpty()) {    NaElement volumeIdAttrs=new NaElement("volume-id-attributes");    volumeIdAttrs.addNewChild("name",name);    NaElement volumeAttrs=new NaElement("volume-attributes");    volumeAttrs.addChildElem(volumeIdAttrs);    NaElement query=new NaElement("query");    query.addChildElem(volumeAttrs);    volumeElem.addChildElem(query);  }  try {    do {      NaElement result=server.invokeElem(volumeElem);      tag=result.getChildContent("next-tag");      resultElem=result.getChildByName("attributes-list");      if (resultElem != null) {        for (        NaElement volInfo : (List<NaElement>)resultElem.getChildren()) {          NaElement volAttrs=volInfo.getChildByName("volume-id-attributes");          if (volAttrs != null) {            String volumeName=volAttrs.getChildContent("name");            if (volumeName.equalsIgnoreCase(name)) {              NaElement snapshotInfo=new NaElement("snapshot-info");              snapshotInfo.addNewChild("volume-provenance-uuid",volAttrs.getChildContent("provenance-uuid"));              NaElement query=new NaElement("query");              query.addChildElem(snapshotInfo);              elem.addChildElem(query);              break;            }          }        }      }      if (tag != null && !tag.isEmpty()) {        volumeElem=new NaElement("volume-get-iter");        volumeElem.addNewChild("tag",tag);      }    } while (tag != null && !tag.isEmpty());  } catch (  Exception e) {    String msg="Failed to list volumes: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  ArrayList<String> snaps=new ArrayList<String>();  try {    do {      resultElem=server.invokeElem(elem);      tag=resultElem.getChildContent("next-tag");      if (resultElem != null) {        for (        NaElement e : (List<NaElement>)resultElem.getChildren()) {          for (          NaElement info : (List<NaElement>)e.getChildren()) {            for (            NaElement info2 : ((List<NaElement>)info.getChildren())) {              String name=info2.getName();              if (attrs == null || attrs.contains(name) || name.equals("name")) {                snaps.add(info2.getContent());              }            }          }        }      }      if (tag != null && !tag.isEmpty()) {        elem=new NaElement("snapshot-get-iter");        elem.addNewChild("tag",tag);      }    } while (tag != null && !tag.isEmpty());  } catch (  Exception e) {    String msg="Failed to list snapshot for volume: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  return snaps;}  }
class C{  @Override public void deleteCredentials(final URI targetUri){  validateTargetUri(targetUri);  Trace.writeLine("SecretStore::deleteCredentials");  final String targetName=this.getTargetName(targetUri);  this.delete(targetName);  _credentialCache.deleteCredentials(targetUri);}  }
class C{  public void connect() throws IOException {  new Thread(this).start();}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkTabLeafEntry that=(MkTabLeafEntry)o;  if (knnDistances.length != that.knnDistances.length) {    return false;  }  return !(knnDistances != null ? !knnDistances.equals(that.knnDistances) : that.knnDistances != null);}  }
class C{  public static int compare(boolean left,boolean right){  if (left)   return right ? 0 : 1;  return right ? -1 : 0;}  }
class C{  public EchoClientHandler(){  firstMessage=Unpooled.buffer(EchoClient.SIZE);  for (int i=0; i < firstMessage.capacity(); i++) {    firstMessage.writeByte((byte)i);  }}  }
class C{  public CloseableIterable<Entity> run() throws OperationException {  final Graph graph=new Graph.Builder().storeProperties(StreamUtil.openStream(getClass(),"/example/films/mockaccumulostore.properties",true)).addSchemas(StreamUtil.openStreams(getClass(),"/example/films/schema",true)).build();  final OperationChain<Void> populateChain=new OperationChain.Builder().first(new GenerateElements.Builder<>().objects(new SampleData().generate()).generator(new DataGenerator()).build()).then(new AddElements.Builder().build()).build();  graph.execute(populateChain,USER);  final OperationChain<CloseableIterable<Entity>> queryChain=new OperationChain.Builder().first(new GetAdjacentEntitySeeds.Builder().view(new View.Builder().edge(Group.VIEWING).build()).addSeed(new EntitySeed("user02")).build()).then(new GetEntitiesBySeed.Builder().view(new View.Builder().entity(Group.REVIEW,new ViewElementDefinition.Builder().transientProperty(TransientProperty.FIVE_STAR_RATING,Float.class).preAggregationFilter(new ElementFilter.Builder().select(Property.USER_ID).execute(new Not(new IsEqual("user02"))).build()).groupBy().transformer(new ElementTransformer.Builder().select(Property.RATING,Property.COUNT).project(TransientProperty.FIVE_STAR_RATING).execute(new StarRatingTransform()).build()).build()).build()).build()).build();  return graph.execute(queryChain,USER);}  }
class C{  public int line(){  return line;}  }
class C{  protected boolean customShouldTakeFocus(){  if (customArea instanceof Label) {    return false;  }  if (customArea instanceof CLabel) {    return (customArea.getStyle() & SWT.NO_FOCUS) > 0;  }  return true;}  }
class C{  public void validate(){  if (pattern != null) {    if (className != null && className != PatternTokenizer.class.getName()) {      throw new RuntimeException("Bad Option: Language range " + languageRange + " with pattern propety for class "+ className);    }    className=PatternTokenizer.class.getName();  }  if (this.wordBoundary != null) {    if (className != null && className != TermCompletionAnalyzer.class.getName()) {      throw new RuntimeException("Bad Option: Language range " + languageRange + " with pattern propety for class "+ className);    }    className=TermCompletionAnalyzer.class.getName();    if (subWordBoundary == null) {      subWordBoundary=AnalyzerOptions.DEFAULT_SUB_WORD_BOUNDARY;    }    if (alwaysRemoveSoftHyphens != null && softHyphens == null) {      throw new RuntimeException("Bad option: Language range " + languageRange + ": must specify softHypens when setting alwaysRemoveSoftHyphens");    }    if (softHyphens != null && alwaysRemoveSoftHyphens == null) {      alwaysRemoveSoftHyphens=AnalyzerOptions.DEFAULT_ALWAYS_REMOVE_SOFT_HYPHENS;    }  } else   if (subWordBoundary != null || softHyphens != null || alwaysRemoveSoftHyphens != null || TermCompletionAnalyzer.class.getName().equals(className)) {    throw new RuntimeException("Bad option: Language range " + languageRange + ": must specify wordBoundary for TermCompletionAnalyzer");  }  if (PatternTokenizer.class.getName().equals(className) && pattern == null) {    throw new RuntimeException("Bad Option: Language range " + languageRange + " must specify pattern for PatternTokenizer.");  }  if ((like != null) == (className != null)) {    throw new RuntimeException("Bad Option: Language range " + languageRange + " must specify exactly one of implementation class or like.");  }  if (stopwords != null && like != null) {    throw new RuntimeException("Bad Option: Language range " + languageRange + " must not specify stopwords with like.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.259 -0500",hash_original_method="984A5DF7C514C121E76596CBE2C6D49B",hash_generated_method="858465DF6EF0739C3EAC5171186AACA0") protected String encodeBody(){  return parameters.encode();}  }
class C{  private CLogFileDialog(final Window parent,final String content){  super(parent,"Log file content",ModalityType.APPLICATION_MODAL);  new CDialogEscaper(this);  CIconInitializer.initializeWindowIcons(this);  setLayout(new BorderLayout());  final JTextArea area=new JTextArea(content);  area.setEditable(false);  add(new JScrollPane(area));  final JPanel buttonPanel=new JPanel(new BorderLayout());  final JButton closeButton=new JButton(new CCloseAction());  buttonPanel.add(closeButton);  add(buttonPanel,BorderLayout.SOUTH);  getRootPane().setDefaultButton(closeButton);  setSize(800,600);}  }
class C{  protected void appendInternal(StringBuffer buffer,String fieldName,Object value,boolean detail){  if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {    appendCyclicObject(buffer,fieldName,value);    return;  }  register(value);  try {    if (value instanceof Collection) {      if (detail) {        appendDetail(buffer,fieldName,(Collection)value);      } else {        appendSummarySize(buffer,fieldName,((Collection)value).size());      }    } else     if (value instanceof Map) {      if (detail) {        appendDetail(buffer,fieldName,(Map)value);      } else {        appendSummarySize(buffer,fieldName,((Map)value).size());      }    } else     if (value instanceof long[]) {      if (detail) {        appendDetail(buffer,fieldName,(long[])value);      } else {        appendSummary(buffer,fieldName,(long[])value);      }    } else     if (value instanceof int[]) {      if (detail) {        appendDetail(buffer,fieldName,(int[])value);      } else {        appendSummary(buffer,fieldName,(int[])value);      }    } else     if (value instanceof short[]) {      if (detail) {        appendDetail(buffer,fieldName,(short[])value);      } else {        appendSummary(buffer,fieldName,(short[])value);      }    } else     if (value instanceof byte[]) {      if (detail) {        appendDetail(buffer,fieldName,(byte[])value);      } else {        appendSummary(buffer,fieldName,(byte[])value);      }    } else     if (value instanceof char[]) {      if (detail) {        appendDetail(buffer,fieldName,(char[])value);      } else {        appendSummary(buffer,fieldName,(char[])value);      }    } else     if (value instanceof double[]) {      if (detail) {        appendDetail(buffer,fieldName,(double[])value);      } else {        appendSummary(buffer,fieldName,(double[])value);      }    } else     if (value instanceof float[]) {      if (detail) {        appendDetail(buffer,fieldName,(float[])value);      } else {        appendSummary(buffer,fieldName,(float[])value);      }    } else     if (value instanceof boolean[]) {      if (detail) {        appendDetail(buffer,fieldName,(boolean[])value);      } else {        appendSummary(buffer,fieldName,(boolean[])value);      }    } else     if (value.getClass().isArray()) {      if (detail) {        appendDetail(buffer,fieldName,(Object[])value);      } else {        appendSummary(buffer,fieldName,(Object[])value);      }    } else {      if (detail) {        appendDetail(buffer,fieldName,value);      } else {        appendSummary(buffer,fieldName,value);      }    }  }  finally {    unregister(value);  }}  }
class C{  public TransmissionHistoryModel(String name,Type units){  super(name);  setUnits(units);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public boolean isSynthetic(){  return fIsSynthetic;}  }
class C{  public static void main(String[] args){  ApmMockServer main=new ApmMockServer();  main.run();}  }
class C{  public int[] plusOneOthers(int[] digits){  for (int i=digits.length - 1; i >= 0; i--) {    digits[i]=1 + digits[i];    if (digits[i] == 10) {      digits[i]=0;    } else     return digits;  }  int[] ans=new int[digits.length + 1];  ans[0]=1;  for (int i=0; i < digits.length; i++)   ans[i + 1]=digits[i];  return ans;}  }
class C{  public CryptoException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public String convertToLD(){  String arrayPart="";  if (null == repeatCountField) {    for (    int i : arraySizes) {      arrayPart+=("[" + i + "]");    }  } else {    arrayPart+=("[" + repeatCountField + "]");  }  return "\"" + this.name + ":"+ (Helper.isJPrimitiveType(this.type) ? ("j" + this.type) : this.type)+ arrayPart+ ":"+ (this.type.equals("Pointer") ? "pointer" : this.size)+ "\"";}  }
class C{  public int alloc(final int size){  if (size < 0) {    throw new Error("Storage allocation error : negative size passed");  }  final int bit=RWStore.fndBit(m_transients,m_ints);  if (bit != -1) {    RWStore.setBit(m_live,bit);    RWStore.setBit(m_transients,bit);    return bit;  } else {    return -1;  }}  }
class C{  public void testSerialization(){  XYShapeRenderer r1=new XYShapeRenderer();  XYShapeRenderer r2=(XYShapeRenderer)TestUtilities.serialised(r1);  assertEquals(r1,r2);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public static void filledPolygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  public void writeByte(byte b) throws IOException {  this.buff[this.len++]=b;  if (this.buff.length == this.len) {    this.out.write(this.buff,0,this.len);    this.len=0;  }}  }
class C{  public void removeFromFolder(String resourceId,String folderResourceId) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null || folderResourceId == null) {    throw new DocumentListException("null passed in for required parameters");  }  URL url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + "/"+ folderResourceId+ URL_FOLDERS+ "/"+ resourceId);  service.delete(url,getDocsListEntry(resourceId).getEtag());}  }
class C{  private final GtbProbeResult gtbProbe(Position pos){  GtbProbeResult ret=gtbProbeRaw(pos);  if (ret.result == GtbProbeResult.DRAW && pos.getEpSquare() != -1) {    ArrayList<Move> moveList=MoveGen.instance.legalMoves(pos);    int pawn=pos.whiteMove ? Piece.WPAWN : Piece.BPAWN;    int maxMate=-1;    UndoInfo ui=new UndoInfo();    for (    Move move : moveList) {      if ((move.to != pos.getEpSquare()) || (pos.getPiece(move.from) != pawn))       return ret;      pos.makeMove(move,ui);      GtbProbeResult ret2=gtbProbe(pos);      pos.unMakeMove(move,ui);switch (ret2.result) {case GtbProbeResult.DRAW:        break;case GtbProbeResult.WMATE:case GtbProbeResult.BMATE:      maxMate=Math.max(maxMate,ret2.pliesToMate);    break;case GtbProbeResult.UNKNOWN:  ret.result=GtbProbeResult.UNKNOWN;return ret;}}if (maxMate != -1) {ret.result=pos.whiteMove ? GtbProbeResult.BMATE : GtbProbeResult.WMATE;ret.pliesToMate=maxMate;}}return ret;}  }
class C{  protected void processUpdates(Queue<DeviceUpdate> updates){  if (updates == null)   return;  DeviceUpdate update=null;  while (null != (update=updates.poll())) {    if (logger.isTraceEnabled()) {      logger.trace("Dispatching device update: {}",update);    }    if (update.change == DeviceUpdate.Change.DELETE) {      deviceSyncManager.removeDevice(update.device);    } else {      deviceSyncManager.storeDevice(update.device);    }    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();    notifyListeners(listeners,update);  }}  }
class C{  public SynthContext(JComponent component,Region region,SynthStyle style,int state){  if (component == null || region == null || style == null) {    throw new NullPointerException("You must supply a non-null component, region and style");  }  reset(component,region,style,state);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  final int offer(T item){  int h=head, t=tail, cap, size, stat;  Object[] a=array;  if (a != null && (cap=a.length) > 0 && cap >= (size=t + 1 - h)) {    a[(cap - 1) & t]=item;    tail=t + 1;    stat=size;  } else   stat=growAndAdd(a,item);  return (stat > 0 && (ctl & (ACTIVE | CONSUME)) != (ACTIVE | CONSUME)) ? startOnOffer(stat) : stat;}  }
class C{  public static final CButton createPAttributeButton(String text){  AppsAction aa=new AppsAction(A_PATTRIBUTE,null,text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  protected void drawImage(Graphics g,Object nativeGraphics,int x,int y){  g.drawImage(image,x,y,transform);}  }
class C{  public static XMPMeta extractOrCreateXMPMeta(String filename){  XMPMeta meta=extractXMPMeta(filename);  return meta == null ? createXMPMeta() : meta;}  }
class C{  public int create(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  if (mappedInsert == null) {    mappedInsert=MappedCreate.build(databaseType,tableInfo);  }  return mappedInsert.insert(databaseType,databaseConnection,data,objectCache);}  }
class C{  protected BusinessObjectFormatDdlCollectionResponse generateBusinessObjectFormatDdlCollectionImpl(BusinessObjectFormatDdlCollectionRequest businessObjectFormatDdlCollectionRequest){  validateBusinessObjectFormatDdlCollectionRequest(businessObjectFormatDdlCollectionRequest);  BusinessObjectFormatDdlCollectionResponse businessObjectFormatDdlCollectionResponse=new BusinessObjectFormatDdlCollectionResponse();  List<BusinessObjectFormatDdl> businessObjectFormatDdlResponses=new ArrayList<>();  businessObjectFormatDdlCollectionResponse.setBusinessObjectFormatDdlResponses(businessObjectFormatDdlResponses);  List<String> ddls=new ArrayList<>();  for (  BusinessObjectFormatDdlRequest request : businessObjectFormatDdlCollectionRequest.getBusinessObjectFormatDdlRequests()) {    BusinessObjectFormatDdl businessObjectFormatDdl=generateBusinessObjectFormatDdlImpl(request,true);    businessObjectFormatDdlResponses.add(businessObjectFormatDdl);    ddls.add(businessObjectFormatDdl.getDdl());  }  businessObjectFormatDdlCollectionResponse.setDdlCollection(StringUtils.join(ddls,"\n\n"));  return businessObjectFormatDdlCollectionResponse;}  }
class C{  protected static int find_single_char(int ch){  Integer result;  result=(Integer)char_symbols.get(new Integer((char)ch));  if (result == null)   return -1; else   return result.intValue();}  }
class C{  public final void acquireTable(){  base=space.acquire(Conversions.bytesToPages(size));  VM.memory.zero(false,base,size);  valid=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CTraceEventsPanel(final CEventTable table){  super(table,new CTraceFilterCreator(),new CTraceEventFilterHelp());  addListener(m_internalTracesTableMouseListener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PGPData itemPGPData(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_PGPDATA,i);  if (e != null) {    return new PGPData(e,this.baseURI);  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.TAG__TITLE:    return getTitle();case DomPackage.TAG__VALUES:  return getValues();case DomPackage.TAG__TAG_DEFINITION:return getTagDefinition();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isECM(){  return (angelStrength > angelECCMStrength) || (angelECCMStrength == angelStrength && strength > eccmStrength);}  }
class C{  public void save(){  try {    config.save(configFile);  } catch (  IOException e) {    GlowServer.logger.log(Level.SEVERE,"Failed to write config: " + configFile,e);  }}  }
class C{  public Convolution(DataSource original,Kernel kernel,Mode mode,int... cols){  super(original,mode,cols);  this.kernel=kernel;  filter();}  }
class C{  public final void applySetting(DocumentBuilderFactory factory) throws DOMTestIncompatibleException {  strategy.applySetting(factory,value);}  }
class C{  public static void main(String args[]){  processArgs(args,System.out);}  }
class C{  public List<Assignment> addAssignment(Assignment assignment){  assignments.add(assignment);  return assignments;}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=createShader("org/lwjgl/demo/opengl/raytracing/raytracingAtomic.glslcs",GL_COMPUTE_SHADER);  int randomCommon=createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  int random=createShader("org/lwjgl/demo/opengl/raytracing/randomAtomic.glsl",GL_COMPUTE_SHADER);  glAttachShader(program,cshader);  glAttachShader(program,randomCommon);  glAttachShader(program,random);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public String toString(){  java.util.ArrayList<E> list=setToList();  StringBuilder builder=new StringBuilder("[");  for (int i=0; i < list.size() - 1; i++) {    builder.append(list.get(i) + ", ");  }  if (list.size() == 0)   builder.append("]"); else   builder.append(list.get(list.size() - 1) + "]");  return builder.toString();}  }
class C{  public void removeHost(@NonNull Player player){  removeHost(player.getUniqueId());}  }
class C{  public static SimpleScheduleBuilder repeatMinutelyForever(int minutes){  return simpleSchedule().withIntervalInMinutes(minutes).repeatForever();}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      yAxis.zoomRange(lowerPercent,upperPercent);    }  }}  }
class C{  public Future<RecoveryInfo> applyBufferedUpdates(){  versionInfo.blockUpdates();  try {    cancelApplyBufferUpdate=false;    if (state != State.BUFFERING)     return null;    operationFlags&=~FLAG_GAP;    if (tlog == null) {      state=State.ACTIVE;      return null;    }    tlog.incref();    state=State.APPLYING_BUFFERED;  }  finally {    versionInfo.unblockUpdates();  }  if (recoveryExecutor.isShutdown()) {    tlog.decref();    throw new RuntimeException("executor is not running...");  }  ExecutorCompletionService<RecoveryInfo> cs=new ExecutorCompletionService<>(recoveryExecutor);  LogReplayer replayer=new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}),true);  return cs.submit(replayer,recoveryInfo);}  }
class C{  public void pokeWakelock(int millis){  if (DEBUG)   Log.d(TAG,"pokeWakelock() for " + millis + "ms");  Message message=mHandler.obtainMessage(MSG_POKE_WAKELOCK,millis,-1);  mHandler.sendMessage(message);}  }
class C{  public File extractJni(String libname) throws IOException {  String mappedlib=System.mapLibraryName(libname);  if (mappedlib.endsWith(".jnilib")) {    if (this.getClass().getClassLoader().getResource("META_INF/lib/" + mappedlib) == null)     mappedlib=mappedlib.substring(0,mappedlib.length() - 7) + ".dylib";  }  return extractResource("/META-INF/lib/" + mappedlib,mappedlib);}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public static CertStore createStore(String relPath,String[] fileNames) throws Exception {  Set<X509Certificate> certs=new HashSet<X509Certificate>();  for (int i=0; i < fileNames.length; i++) {    certs.add(getCertFromFile(relPath + fileNames[i]));  }  return CertStore.getInstance("Collection",new CollectionCertStoreParameters(certs));}  }
class C{  public void connect(){  for (  DeviceService service : services.values()) {    if (!service.isConnected()) {      service.connect();    }  }}  }
class C{  public void addMimeType(String mimeType){  if (mimeType == null) {    throw new IllegalArgumentException("mimeType is null");  }  if (mimeType == "") {    throw new IllegalArgumentException("mimeType is an empty string");  }  mMimeTypeList.add(mimeType);}  }
class C{  private void visualizeRTreeEntry(SVGPlot svgp,Element layer,ProjectionParallel proj,AbstractRStarTree<? extends N,E,?> rtree,E entry,int depth,int step){  final int dim=proj.getVisibleDimensions();  double[] min=proj.fastProjectDataToRenderSpace(SpatialUtil.getMin(entry));  double[] max=proj.fastProjectDataToRenderSpace(SpatialUtil.getMax(entry));  assert (min.length == dim && max.length == dim);  SVGPath path=new SVGPath();  for (int i=0; i < dim; i++) {    path.drawTo(getVisibleAxisX(i),Math.max(min[i],max[i]));  }  for (int i=dim - 1; i >= 0; i--) {    path.drawTo(getVisibleAxisX(i),Math.min(min[i],max[i]));  }  path.close();  Element intervals=path.makeElement(svgp);  SVGUtil.addCSSClass(intervals,INDEX + depth);  layer.appendChild(intervals);  if (!entry.isLeafEntry()) {    N node=rtree.getNode(entry);    for (int i=0; i < node.getNumEntries(); i++) {      E child=node.getEntry(i);      if (!child.isLeafEntry()) {        visualizeRTreeEntry(svgp,layer,proj,rtree,child,depth + 1,++step);      }    }  }}  }
class C{  private void consumeReceivedVersions(){  for (Iterator<Long> it=this.received.iterator(); it.hasNext(); ) {    long v=it.next();    if (v <= this.previousVersion + 1) {      it.remove();      if (v == this.previousVersion + 1) {        this.previousVersion=v;      }    } else {      break;    }  }  for (Iterator<Long> it=this.received.descendingIterator(); it.hasNext(); ) {    long v=it.next();    if (v >= this.nextVersion - 1) {      it.remove();      if (v == this.nextVersion - 1) {        this.nextVersion=v;      }    } else {      break;    }  }}  }
class C{  public synchronized void removePanListener(PanListener listener){  mPanListeners.remove(listener);}  }
class C{  public final void removeElementAt(final int id){  if (id >= 0) {    System.arraycopy(items,id + 1,items,id,current_item - 1 - id);    items[current_item - 1]=null;  } else {    items[0]=null;  }  current_item--;}  }
class C{  public void startExpiringIfNotStarted(){  stateLock.readLock().lock();  try {    if (running) {      return;    }  }  finally {    stateLock.readLock().unlock();  }  stateLock.writeLock().lock();  try {    if (!running) {      running=true;      expirerThread.start();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  protected boolean shouldConvertPostToGetOnRedirect(){  return true;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  int serverId=intent.getExtras().getInt(Extra.SERVER);  if (serverId != this.serverId) {    return;  }  String action=intent.getAction();  if (action.equals(Broadcast.CONVERSATION_MESSAGE)) {    listener.onConversationMessage(intent.getExtras().getString(Extra.CONVERSATION));  } else   if (action.equals(Broadcast.CONVERSATION_NEW)) {    listener.onNewConversation(intent.getExtras().getString(Extra.CONVERSATION));  } else   if (action.equals(Broadcast.CONVERSATION_REMOVE)) {    listener.onRemoveConversation(intent.getExtras().getString(Extra.CONVERSATION));  } else   if (action.equals(Broadcast.CONVERSATION_TOPIC)) {    listener.onTopicChanged(intent.getExtras().getString(Extra.CONVERSATION));  }}  }
class C{  public String viewForm(){  setMode(SEARCH);  return SEARCH;}  }
class C{  public static ICluster joinAwait(Map<String,String> metadata,Address... seedMembers){  try {    return join(metadata,seedMembers).get();  } catch (  Exception e) {    throw Throwables.propagate(Throwables.getRootCause(e));  }}  }
class C{  private String serialize(Variable variable) throws IOException {  ObjectOutputStream oos=null;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(baos);    oos.writeObject(variable);    byte[] encoding=Base64.encodeBase64(baos.toByteArray(),false);    return StringUtils.newStringUtf8(encoding);  }  finally {    if (oos != null) {      oos.close();    }  }}  }
class C{  public DefaultLookAndFeel(UIManager manager){  super(manager);}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  public static long allocatePooled(long poolPtr,int cap){  long memPtr1=poolPtr + POOL_HDR_OFF_MEM_1;  if (isAcquired(memPtr1)) {    long memPtr2=poolPtr + POOL_HDR_OFF_MEM_2;    if (isAcquired(memPtr2)) {      long memPtr3=poolPtr + POOL_HDR_OFF_MEM_3;      if (isAcquired(memPtr3))       return 0L; else {        allocatePooled0(memPtr3,cap);        return memPtr3;      }    } else {      allocatePooled0(memPtr2,cap);      return memPtr2;    }  } else {    allocatePooled0(memPtr1,cap);    return memPtr1;  }}  }
class C{  private void calcPredecessors(){  int maxLabel=blocks.getMaxLabel();  IntList[] predecessors=new IntList[maxLabel];  IntList exitPredecessors=new IntList(10);  int sz=blocks.size();  for (int i=0; i < sz; i++) {    BasicBlock one=blocks.get(i);    int label=one.getLabel();    IntList successors=one.getSuccessors();    int ssz=successors.size();    if (ssz == 0) {      exitPredecessors.add(label);    } else {      for (int j=0; j < ssz; j++) {        int succLabel=successors.get(j);        IntList succPreds=predecessors[succLabel];        if (succPreds == null) {          succPreds=new IntList(10);          predecessors[succLabel]=succPreds;        }        succPreds.add(label);      }    }  }  for (int i=0; i < maxLabel; i++) {    IntList preds=predecessors[i];    if (preds != null) {      preds.sort();      preds.setImmutable();    }  }  exitPredecessors.sort();  exitPredecessors.setImmutable();  if (predecessors[firstLabel] == null) {    predecessors[firstLabel]=IntList.EMPTY;  }  this.predecessors=predecessors;  this.exitPredecessors=exitPredecessors;}  }
class C{  @Override public void init(ProcessingEnvironment procEnv){  super.init(procEnv);  String className=procEnv.getClass().getName();  if (className.startsWith("org.eclipse.jdt.")) {    errorToShow="This version of disableCheckedExceptions is not compatible with eclipse. javac only; sorry.";    procEnv.getMessager().printMessage(Kind.WARNING,errorToShow);  } else   if (!procEnv.getClass().getName().equals("com.sun.tools.javac.processing.JavacProcessingEnvironment")) {    procEnv.getMessager().printMessage(Kind.WARNING,"You aren't using a compiler based around javac v1.6, so disableCheckedExceptions will not work.\n" + "Your processor class is: " + className);  } else {    new LiveInjector().inject(ClassRootFinder.findClassRootOfClass(DisableCheckedExceptionsAgent.class));  }}  }
class C{  @Override public ITupleIterator rangeIterator(final byte[] fromKey,final byte[] toKey,int capacity,final int flags,final IFilter filter){  if (capacity == 0) {    capacity=this.capacity;  }  final boolean parallel=((flags & PARALLEL) != 0);  final boolean readOnly=((flags & READONLY) != 0);  if (readOnly && ((flags & REMOVEALL) != 0)) {    throw new IllegalArgumentException();  }  final boolean isReadConsistentTx;  final long ts;  if ((timestamp == ITx.UNISOLATED && readOnly) || (timestamp == ITx.READ_COMMITTED && readConsistent)) {    try {      ts=fed.getTransactionService().newTx(ITx.READ_COMMITTED);    } catch (    IOException ex) {      throw new RuntimeException(ERR_NEW_TX,ex);    }    isReadConsistentTx=true;  } else {    ts=timestamp;    isReadConsistentTx=false;  }  try {    if (parallel) {      return parallelRangeIterator(ts,isReadConsistentTx,fromKey,toKey,capacity,flags,filter);    } else {      return new PartitionedTupleIterator(this,ts,isReadConsistentTx,fromKey,toKey,capacity,flags,filter);    }  } catch (  Throwable t) {    if (isReadConsistentTx) {      try {        fed.getTransactionService().abort(ts);      } catch (      Throwable t2) {        log.error(t2,t2);      }    }    throw new RuntimeException(t);  }}  }
class C{  public final void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " onto this OmniMech.");  }  troopers=unit.getId();}  }
class C{  public void handlePUT(CoapExchange exchange){  exchange.respond(ResponseCode.METHOD_NOT_ALLOWED);}  }
class C{  public static String actionsToString(List<OFAction> actions,Logger log){  StringBuilder sb=new StringBuilder();  for (  OFAction a : actions) {    if (sb.length() > 0) {      sb.append(',');    }switch (a.getType()) {case OUTPUT:      sb.append(STR_OUTPUT + "=" + Integer.toString(((OFActionOutput)a).getPort().getPortNumber()));    break;case ENQUEUE:  long queue=((OFActionEnqueue)a).getQueueId();OFPort port=((OFActionEnqueue)a).getPort();sb.append(STR_ENQUEUE + "=" + Integer.toString(port.getPortNumber())+ ":0x"+ String.format("%02x",queue));break;case STRIP_VLAN:sb.append(STR_VLAN_STRIP);break;case POP_VLAN:sb.append(STR_VLAN_POP);break;case PUSH_VLAN:sb.append(STR_VLAN_PUSH + "=" + Integer.toString(((OFActionPushVlan)a).getEthertype().getValue()));break;case SET_VLAN_VID:sb.append(STR_VLAN_SET_VID + "=" + Short.toString(((OFActionSetVlanVid)a).getVlanVid().getVlan()));break;case SET_VLAN_PCP:sb.append(STR_VLAN_SET_PCP + "=" + Byte.toString(((OFActionSetVlanPcp)a).getVlanPcp().getValue()));break;case SET_QUEUE:sb.append(STR_QUEUE_SET + "=" + Long.toString(((OFActionSetQueue)a).getQueueId()));case SET_DL_SRC:sb.append(STR_DL_SRC_SET + "=" + ((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:sb.append(STR_DL_DST_SET + "=" + ((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_ECN:sb.append(STR_NW_ECN_SET + "=" + Byte.toString(((OFActionSetNwEcn)a).getNwEcn().getEcnValue()));break;case SET_NW_TOS:sb.append(STR_NW_TOS_SET + "=" + Short.toString(((OFActionSetNwTos)a).getNwTos()));break;case SET_NW_TTL:sb.append(STR_NW_TTL_SET + "=" + Short.toString(((OFActionSetNwTtl)a).getNwTtl()));break;case DEC_NW_TTL:sb.append(STR_NW_TTL_DEC);break;case SET_MPLS_LABEL:sb.append(STR_MPLS_LABEL_SET + "=" + Long.toString(((OFActionSetMplsLabel)a).getMplsLabel()));break;case SET_MPLS_TC:sb.append(STR_MPLS_TC_SET + "=" + Short.toString(((OFActionSetMplsTc)a).getMplsTc()));break;case SET_MPLS_TTL:sb.append(STR_MPLS_TTL_SET + "=" + Short.toString(((OFActionSetMplsTtl)a).getMplsTtl()));break;case DEC_MPLS_TTL:sb.append(STR_MPLS_TTL_DEC);break;case PUSH_MPLS:sb.append(STR_MPLS_PUSH + "=" + Integer.toString(((OFActionPushMpls)a).getEthertype().getValue()));break;case POP_MPLS:sb.append(STR_MPLS_POP + "=" + Integer.toString(((OFActionPopMpls)a).getEthertype().getValue()));break;case SET_NW_SRC:sb.append(STR_NW_SRC_SET + "=" + ((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:sb.append(STR_NW_DST_SET + "=" + ((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_TP_SRC:sb.append(STR_TP_SRC_SET + "=" + ((OFActionSetTpSrc)a).getTpPort().toString());break;case SET_TP_DST:sb.append(STR_TP_DST_SET + "=" + ((OFActionSetTpDst)a).getTpPort().toString());break;case COPY_TTL_IN:sb.append(STR_TTL_IN_COPY);break;case COPY_TTL_OUT:sb.append(STR_TTL_OUT_COPY);break;case PUSH_PBB:sb.append(STR_PBB_PUSH + "=" + Integer.toString(((OFActionPushPbb)a).getEthertype().getValue()));break;case POP_PBB:sb.append(STR_PBB_POP);break;case EXPERIMENTER:sb.append(STR_EXPERIMENTER + "=" + Long.toString(((OFActionExperimenter)a).getExperimenter()));break;case GROUP:sb.append(STR_GROUP + "=" + Integer.toString(((OFActionGroup)a).getGroup().getGroupNumber()));break;case SET_FIELD:log.debug("Got Set-Field action. Setting " + ((OFActionSetField)a));if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_OPCODE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_SSL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TTL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TARGET+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_TYPE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan()));} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN_PCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmVlanPcp)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_PROTO+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_FLOW_LABEL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_ECN+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DSCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_LABEL+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_TC+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_METADATA+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue()));} else {log.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}break;default :log.error("Could not decode action: {}",a);break;}}return sb.toString();}  }
class C{  public final void testValidateUppercaseAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.UPPERCASE,true,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("Ab 1-"));}  }
class C{  void moveDot(NavigationFilter.FilterBypass fb,int dot,Position.Bias bias){  fb.moveDot(dot,bias);}  }
class C{  public Boolean deleteSchedulerLocation(String topologyName){  return awaitResult(delegate.deleteSchedulerLocation(topologyName));}  }
class C{  public BottomSheetDialogView(Context context,int dayNightMode){  BottomSheetDialog dialog=new BottomSheetDialog(context);  dialog.getDelegate().setLocalNightMode(dayNightMode);  View view=LayoutInflater.from(context).inflate(R.layout.bottom_sheet_dialog_recycler_view,null);  RecyclerView recyclerView=(RecyclerView)view.findViewById(R.id.bottom_sheet_recycler_view);  recyclerView.setLayoutManager(new LinearLayoutManager(context));  recyclerView.setAdapter(new SimpleAdapter());  dialog.setContentView(view);  dialog.show();}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  protected String toString(Object parameter){  if (parameter == null) {    return NULL_STR;  }  try {    String result=Misc.getAsString(parameter);    if (result.length() > DEFAULT_ARG_STRING_MAX_LENGTH) {      result=result.substring(0,DEFAULT_ARG_STRING_MAX_LENGTH) + DEFAULT_MAX_STRING_ENDING;    }    return result;  } catch (  Throwable e) {    return UNKNOWN;  }}  }
class C{  private static CellProcessor addParseDouble(CellProcessor cellProcessor){  if (cellProcessor == null) {    return new ParseDouble();  }  return new ParseDouble((DoubleCellProcessor)cellProcessor);}  }
class C{  protected final Operand MO_CONV(byte size){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  return new StackLocationOperand(true,offset,size);}  }
class C{  protected void registerScrollBarAttributes(){  addAttributeProcessor(new ScrollBarsOnTopLmlAttribute(),"barsOnTop","scrollbarsOnTop");  addAttributeProcessor(new ScrollBarsPositionsLmlAttribute(),"barsPositions","scrollBarsPositions");  addAttributeProcessor(new ScrollCancelTouchFocusLmlAttribute(),"cancelTouchFocus");  addAttributeProcessor(new ScrollClampLmlAttribute(),"clamp");  addAttributeProcessor(new ScrollDisabledLmlAttribute(),"disable","disabled","scrollingDisabled");  addAttributeProcessor(new ScrollDisabledXLmlAttribute(),"disableX","disabledX","scrollingDisabledX");  addAttributeProcessor(new ScrollDisabledYLmlAttribute(),"disableY","disabledY","scrollingDisabledY");  addAttributeProcessor(new ScrollFadeBarsLmlAttribute(),"fadeBars","fadeScrollbars");  addAttributeProcessor(new ScrollFadeBarsSetupLmlAttribute(),"setupFadeScrollBars");  addAttributeProcessor(new ScrollFlickLmlAttribute(),"flick","flickScroll");  addAttributeProcessor(new ScrollFlickTapSquareSizeLmlAttribute(),"flickScrollTapSquareSize","tapSquareSize");  addAttributeProcessor(new ScrollFlingTimeLmlAttribute(),"flingTime");  addAttributeProcessor(new ScrollForceLmlAttribute(),"force","forceScroll");  addAttributeProcessor(new ScrollForceXLmlAttribute(),"forceX","forceScrollX");  addAttributeProcessor(new ScrollForceYLmlAttribute(),"forceY","forceScrollY");  addAttributeProcessor(new ScrollOverscrollLmlAttribute(),"overscroll");  addAttributeProcessor(new ScrollOverscrollSetupLmlAttribute(),"setupOverscroll");  addAttributeProcessor(new ScrollOverscrollXLmlAttribute(),"overscrollX");  addAttributeProcessor(new ScrollOverscrollYLmlAttribute(),"overscrollY");  addAttributeProcessor(new ScrollPercentLmlAttribute(),"scrollPercent","percent");  addAttributeProcessor(new ScrollPercentXLmlAttribute(),"scrollPercentX","percentX");  addAttributeProcessor(new ScrollPercentYLmlAttribute(),"scrollPercentY","percentY");  addAttributeProcessor(new ScrollVariableSizeKnobsLmlAttribute(),"variableSizeKnobs");  addAttributeProcessor(new ScrollSmoothLmlAttribute(),"smooth","smoothScrolling");  addAttributeProcessor(new ScrollVelocityLmlAttribute(),"velocity");  addAttributeProcessor(new ScrollVelocityXLmlAttribute(),"velocityX");  addAttributeProcessor(new ScrollVelocityYLmlAttribute(),"velocityY");}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void runSingleMoveTask(String url,OnMoveDownloadFileListener onMoveEverySingleDownloadFileListener,boolean sync){  MoveDownloadFileTask moveSingleDownloadFileTask=new MoveDownloadFileTask(url,mNewDirPath,mDownloadFileMover);  moveSingleDownloadFileTask.enableSyncCallback();  moveSingleDownloadFileTask.setOnMoveDownloadFileListener(onMoveEverySingleDownloadFileListener);  if (sync) {    moveSingleDownloadFileTask.run();  } else {    mTaskEngine.execute(moveSingleDownloadFileTask);  }}  }
class C{  public Nxor(){  super("nxor",2);}  }
class C{  public final void removeAll(){  mySortedChildren.clear();  myPairs.clear();}  }
class C{  public void restoreDefaults(){  SimbrainPreferences.restoreDefaultSetting("networkBackgroundColor");  SimbrainPreferences.restoreDefaultSetting("networkWandRadius");  SimbrainPreferences.restoreDefaultSetting("networkHotNodeColor");  SimbrainPreferences.restoreDefaultSetting("networkCoolNodeColor");  SimbrainPreferences.restoreDefaultSetting("networkExcitatorySynapseColor");  SimbrainPreferences.restoreDefaultSetting("networkInhibitorySynapseColor");  SimbrainPreferences.restoreDefaultSetting("networkSpikingColor");  SimbrainPreferences.restoreDefaultSetting("networkZeroWeightColor");  SimbrainPreferences.restoreDefaultSetting("networkSynapseMaxSize");  SimbrainPreferences.restoreDefaultSetting("networkSynapseMinSize");  SimbrainPreferences.restoreDefaultSetting("networkNudgeAmount");  SimbrainPreferences.restoreDefaultSetting("networkSynapseVisibilityThreshold");  ((NetworkPanelDesktop)networkPanel).applyUserPrefsToNetwork();  networkPropertiesPanel.fillFieldValues();  networkPropertiesPanel.setIndicatorColor();  networkPanel.resetColors();}  }
class C{  public SelectableConsoleHandler(){  this(System.out);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static int h(int key){  key=((key >>> 16) ^ key) & 0x45f9f3b;  key=((key >>> 16) ^ key) & 0x45f9f3b;  key=((key >>> 16) ^ key);  return key;}  }
class C{  public static Value noLocal(Value val){  if (val != null && !isLocal(val))   return val; else   return null;}  }
class C{  protected void afterLoggedIn(){  UserSessionSource sessionSource=AppBeans.get(UserSessionSource.NAME);  final User user=sessionSource.getUserSession().getUser();  if (Boolean.TRUE.equals(user.getChangePasswordAtNextLogon())) {    mainFrame.deactivate("");    final DesktopWindowManager wm=mainFrame.getWindowManager();    for (    Window window : wm.getOpenWindows()) {      window.setEnabled(false);    }    WindowConfig windowConfig=AppBeans.get(WindowConfig.NAME);    WindowInfo changePasswordDialog=windowConfig.getWindowInfo("sec$User.changePassword");    wm.getDialogParams().setCloseable(false);    Map<String,Object> params=Collections.singletonMap("cancelEnabled",(Object)Boolean.FALSE);    Window changePasswordWindow=wm.openEditor(changePasswordDialog,user,WindowManager.OpenType.DIALOG,params);    changePasswordWindow.addCloseListener(null);  }}  }
class C{  public ThrottleFrame createThrottleFrame(){  return createThrottleWindow().getCurrentThrottleFrame();}  }
class C{  @Override protected void commitNameChange(PropertyChangeEvent evt){  EntityFigure entityFigure=getFigure();  EditableLabel label=entityFigure.getNameLabel();  label.setText(getTable().getObject().getName());  label.setVisible(true);  refreshVisuals();}  }
class C{  private String _serializeMap(Map map,Map<Object,String> done) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<struct>");  Iterator it=map.keySet().iterator();  deep++;  while (it.hasNext()) {    Object key=it.next();    sb.append(goIn() + "<var name=" + del+ key.toString()+ del+ ">");    sb.append(_serialize(map.get(key),done));    sb.append(goIn() + "</var>");  }  deep--;  sb.append(goIn() + "</struct>");  return sb.toString();}  }
class C{  private final boolean blockTouched(int i){  return hashes[i] != 0;}  }
class C{  public static String securityAttributesToCommaDelimitedList(Collection<?> attributes){  return StringUtils.collectionToDelimitedString(attributes,", ");}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  @Override public CloseableReference<Bitmap> createBitmapInternal(int width,int height,Bitmap.Config bitmapConfig){  int sizeInBytes=BitmapUtil.getSizeInByteForBitmap(width,height,bitmapConfig);  Bitmap bitmap=mBitmapPool.get(sizeInBytes);  Bitmaps.reconfigureBitmap(bitmap,width,height,bitmapConfig);  return CloseableReference.of(bitmap,mBitmapPool);}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,ConfigurationKey<?>> registeredKeys(){synchronized (registeredKeys) {    if (copy == null)     copy=Collections.unmodifiableMap((Map<String,ConfigurationKey<?>>)registeredKeys.clone());    return copy;  }}  }
class C{  public final double pctIncorrect(){  return 100 * m_Incorrect / m_WithClass;}  }
class C{  public static void tileStretchPaint(Graphics g,JComponent comp,BufferedImage img,Insets ins){  int left=ins.left;  int right=ins.right;  int top=ins.top;  int bottom=ins.bottom;  g.drawImage(img,0,0,left,top,0,0,left,top,null);  g.drawImage(img,left,0,comp.getWidth() - right,top,left,0,img.getWidth() - right,top,null);  g.drawImage(img,comp.getWidth() - right,0,comp.getWidth(),top,img.getWidth() - right,0,img.getWidth(),top,null);  g.drawImage(img,0,top,left,comp.getHeight() - bottom,0,top,left,img.getHeight() - bottom,null);  g.drawImage(img,left,top,comp.getWidth() - right,comp.getHeight() - bottom,left,top,img.getWidth() - right,img.getHeight() - bottom,null);  g.drawImage(img,comp.getWidth() - right,top,comp.getWidth(),comp.getHeight() - bottom,img.getWidth() - right,top,img.getWidth(),img.getHeight() - bottom,null);  g.drawImage(img,0,comp.getHeight() - bottom,left,comp.getHeight(),0,img.getHeight() - bottom,left,img.getHeight(),null);  g.drawImage(img,left,comp.getHeight() - bottom,comp.getWidth() - right,comp.getHeight(),left,img.getHeight() - bottom,img.getWidth() - right,img.getHeight(),null);  g.drawImage(img,comp.getWidth() - right,comp.getHeight() - bottom,comp.getWidth(),comp.getHeight(),img.getWidth() - right,img.getHeight() - bottom,img.getWidth(),img.getHeight(),null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void configK(Parameterization config){  final IntParameter param=new IntParameter(K_ID);  param.addConstraint(CommonConstraints.GREATER_EQUAL_ONE_INT);  if (config.grab(param)) {    k=param.getValue();  }}  }
class C{  private ViewUtils(){}  }
class C{  public Entry(float val,int xIndex){  mVal=val;  mXIndex=xIndex;}  }
class C{  public TransformObjectiveShift(BBOBFunction function,double offset){  super(function);  this.offset=offset;}  }
class C{  public _QueueOptions(final _QueueOptions_Flag[] flags){  super(flags);}  }
class C{  public DNetscapeBaseUrl(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeBaseUrl.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  @Override public boolean retainAll(@NotNull Collection<?> c){  while (true) {    Object[] elements=array;    Object[] newElements=createArrayRetainAll(elements,c);    if (newElements == null)     return false;    if (replaceArray(elements,newElements))     return true;  }}  }
class C{  @Override public List<String> searchMB(final Map<String,Object> criteriaMap,final List<Object> paramList){  logger.debug("-------Inside searchMB method-----------------------");  final List<String> mbHeaderQryList=new ArrayList<String>();  final String countQry="select count(distinct mbh) from MBHeader mbh where mbh.id != null and mbh.egwStatus.code != 'NEW' ";  final String resultQry="select distinct mbh from MBHeader mbh where mbh.id != null and mbh.egwStatus.code != 'NEW'";  StringBuffer commonFilter=new StringBuffer();  if (criteriaMap.get(WORKORDER_NO) != null) {    commonFilter=commonFilter.append(" and mbh.workOrder.workOrderNumber like ?");    paramList.add("%" + criteriaMap.get(WORKORDER_NO) + "%");  }  if (criteriaMap.get(CONTRACTOR_ID) != null && !"-1".equals(criteriaMap.get(CONTRACTOR_ID))) {    commonFilter=commonFilter.append(" and mbh.workOrder.contractor.id = ?");    paramList.add(criteriaMap.get(CONTRACTOR_ID));  }  if (criteriaMap.get(DEPT_ID) != null && !"-1".equals(criteriaMap.get(DEPT_ID))) {    commonFilter=commonFilter.append(" and mbh.workOrderEstimate.estimate.executingDepartment.id = ?");    paramList.add(criteriaMap.get(DEPT_ID));  }  if (criteriaMap.get(CREATE_DATE) != null) {    commonFilter=commonFilter.append(" and mbh.mbDate = ?");    paramList.add(criteriaMap.get(CREATE_DATE));  }  if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) == null) {    commonFilter=commonFilter.append(" and mbh.mbDate >= ? ");    paramList.add(criteriaMap.get(FROM_DATE));  } else   if (criteriaMap.get(TO_DATE) != null && criteriaMap.get(FROM_DATE) == null) {    commonFilter=commonFilter.append(" and mbh.mbDate <= ? ");    paramList.add(criteriaMap.get(TO_DATE));  } else   if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) != null) {    commonFilter=commonFilter.append(" and mbh.mbDate between ? and ? ");    paramList.add(criteriaMap.get(FROM_DATE));    paramList.add(criteriaMap.get(TO_DATE));  }  if (criteriaMap.get(EST_NO) != null) {    commonFilter=commonFilter.append(" and mbh.workOrderEstimate.estimate.estimateNumber like ?");    paramList.add("%" + criteriaMap.get(EST_NO) + "%");  }  if (criteriaMap.get(MB_REF_NO) != null) {    commonFilter=commonFilter.append(" and mbh.mbRefNo = ?");    paramList.add(criteriaMap.get(MB_REF_NO));  }  if (criteriaMap.get(MB_PAGE_NO) != null) {    commonFilter=commonFilter.append(" and ? between mbh.fromPageNo and mbh.toPageNo ");    paramList.add(criteriaMap.get(MB_PAGE_NO));  }  if ("1".equals(criteriaMap.get(ALL_STATUS)))   commonFilter=commonFilter.append(" and mbh.egBillregister.id is not null"); else   if (!"-1".equals(criteriaMap.get(STATUS)) && criteriaMap.get(STATUS) != null && (criteriaMap.get(STATUS).equals(MBHeader.MeasurementBookStatus.APPROVED.toString()) || criteriaMap.get(STATUS).equals(MBHeader.MeasurementBookStatus.CANCELLED.toString()))) {    commonFilter=commonFilter.append(" and mbh.egwStatus.code = ?");    paramList.add(criteriaMap.get(STATUS));  } else   if (!"-1".equals(criteriaMap.get(STATUS)) && criteriaMap.get(STATUS) != null) {    commonFilter=commonFilter.append(" and mbh.egwStatus.code = ?");    paramList.add(criteriaMap.get(STATUS));  }  if (criteriaMap.get(BILLDATE) != null) {    commonFilter=commonFilter.append(" and trunc(mbh.egBillregister.billdate) = ?");    paramList.add(criteriaMap.get(BILLDATE));  }  if (criteriaMap.get(BILLSTATUS) != null && !criteriaMap.get(BILLSTATUS).equals("-1")) {    commonFilter=commonFilter.append(" and mbh.egBillregister.status.code like ?");    paramList.add("%" + criteriaMap.get(BILLSTATUS) + "%");  }  if (criteriaMap.get(BILLNO) != null) {    commonFilter=commonFilter.append(" and mbh.egBillregister.billnumber= ? ");    paramList.add(criteriaMap.get(BILLNO));  }  commonFilter=commonFilter.append(" order by mbh.mbDate ");  final String searchQry=resultQry + commonFilter;  final String countResultQry=countQry + commonFilter;  mbHeaderQryList.add(searchQry);  mbHeaderQryList.add(countResultQry);  return mbHeaderQryList;}  }
class C{  public TripsAnalyzer(){  this.autoConfig=true;  this.createGraphs=true;  this.sortedModes.add(TransportMode.bike);  this.sortedModes.add(TransportMode.car);  this.sortedModes.add(TransportMode.pt);  this.sortedModes.add(TransportMode.ride);  this.sortedModes.add(TransportMode.walk);  this.observedAgents=null;}  }
class C{  public final int read(byte[] b,int off,int len) throws java.io.IOException {  return 0;}  }
class C{  @RequestProcessing(value="/admin/users",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showUsers(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/users.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String nameOrEmail=request.getParameter(Common.USER_NAME_OR_EMAIL);  if (!Strings.isEmptyOrNull(nameOrEmail)) {    requestJSONObject.put(Common.USER_NAME_OR_EMAIL,nameOrEmail);  }  final JSONObject result=userQueryService.getUsers(requestJSONObject);  dataModel.put(User.USERS,CollectionUtils.jsonArrayToList(result.optJSONArray(User.USERS)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  private static Digester createDigester(boolean design,boolean generate,boolean runtime){  Digester digester=DigesterFactory.newInstance(true).createDigester();  digester.addRuleSet(new FacesConfigRuleSet(design,generate,runtime));  return (digester);}  }
class C{  public void add(final int termNdx,final double weight){synchronized (this) {    cosine+=weight;    searchTerms[termNdx]=true;  }}  }
class C{  private void drawYTick(Graphics grahpics){  grahpics.setFont(scale.getFont());  int fontHeight=tickLabelMaxHeight;  for (int i=0; i < tickLabelPositions.size(); i++) {    if (tickVisibilities.size() == 0 || tickLabels.size() == 0) {      break;    }    if (tickVisibilities.get(i) == true) {      String text=tickLabels.get(i);      int x=0;      if (tickLabels.get(0).startsWith("-") && !text.startsWith("-")) {        x+=FigureUtilities.getTextExtents("-",getFont()).width;      }      int y=(int)Math.ceil(scale.getLength() - tickLabelPositions.get(i) - fontHeight / 2.0);      grahpics.drawText(text,x,y);    }  }}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  for (int i=0; i < numFeatures; i++) {    if (data[i] < weightsA[category][i]) {      weightsA[category][i]=(learningRate * data[i]) + (1 - learningRate) * weightsA[category][i];    }  }  for (int i=0; i < numClasses; i++) {    if (weightblearnmethod == 0) {      weightsB[category][i]=labels[i] + weightsB[category][i];      weightChange=1;    } else {      if (labels[i] < weightsB[category][i]) {        weightsB[category][i]=(learningRate * labels[i]) + (1 - learningRate) * weightsB[category][i];        weightChange=1;      }    }  }  return weightChange;}  }
class C{  public Object read(String value) throws Exception {  String[] list=split.read(value);  int length=list.length;  return read(list,length);}  }
class C{  public static Object unwrapParcelable(Parcelable p){  if (p instanceof ParcelableAdapter) {    return ((ParcelableAdapter)p).getValue();  }  return p;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.288 -0500",hash_original_method="3FC829F6BB79347D76007A55E3423470",hash_generated_method="4254136FF2998A18A9977A88AE4EA5EE") @DSSpec(DSCat.REFLECTION) public Class<?> forClass(){  return resolvedClass;}  }
class C{  public Builder csrf(){  return csrf("X-XSRF-TOKEN","XSRF-TOKEN");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void init(){  this.leading=0;  while (this.leading < this.value.length() && this.value.charAt(this.leading) == ' ') {    this.leading++;  }  if (this.leading == this.value.length()) {    this.setEmpty();  } else {    this.isEmpty=false;    this.trailing=0;    while (this.value.charAt(this.value.length() - this.trailing - 1) == ' ') {      this.trailing++;    }  }}  }
class C{  public Object clone(){  try {    IntObjectHashMap copy=(IntObjectHashMap)super.clone();    copy.table=(int[])copy.table.clone();    copy.values=(Object[])copy.values.clone();    copy.state=(byte[])copy.state.clone();    return copy;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Suffix(){  super("text_transformation.suffix",2);}  }
class C{  public FeatureCall createFeatureCall(){  FeatureCallImpl featureCall=new FeatureCallImpl();  return featureCall;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getAllGenres();}  }
class C{  public void checkDetail(int position){  if (mWeathers == null) {    Log.d(TAG,"getData: checkDetail(): datumlist is null");    return;  }  if (mWeathers.size() == 0) {    Log.d(TAG,"checkDetail: checkDetail(): datumlist.size() == 0");    return;  }  mDispatcher.dispatch(WeatherAction.CHECK_DETAIL,WeatherAction.DETAIL_POSITION,position);}  }
class C{  private void sendBroadcastNewOperation(Target target,RemoteOperation operation){  Intent intent=new Intent(ACTION_OPERATION_ADDED);  if (target.mAccount != null) {    intent.putExtra(EXTRA_ACCOUNT,target.mAccount);  } else {    intent.putExtra(EXTRA_SERVER_URL,target.mServerUrl);  }  sendStickyBroadcast(intent);}  }
class C{  public void process() throws IOException {  section=null;  try {    counterdr=new LineNumberReader(new BufferedReader(new InputStreamReader(in,Charset.forName("UTF-8"))));    reader=new MemoPushbackReader(counterdr);    listener.setup();    Token tok;    skipWhitespace(true);    flushWhitespace();    while ((tok=peekToken()) != Token.eof) {switch (tok) {case section:        handleSection();      break;case option:    if (section != null) {      handleOption();    } else {      throw new InvalidPropertiesFormatException("Option without section in configuration file at line " + (counterdr.getLineNumber() + 1));    }  break;case comment:skipToNextLine();listener.onComment(reader.getAndClearMemo());break;case eol:skipToNextLine();listener.onWhitespace(reader.getAndClearMemo());break;default :throw new InvalidPropertiesFormatException("Unexpected token in configuration file at line " + (counterdr.getLineNumber() + 1));}skipWhitespace(true);flushWhitespace();}listener.cleanup();}  finally {if (reader != null) {reader.close();}}}  }
class C{  public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public MinHash(final int size,final int dict_size,final long seed){  init(size,dict_size,new Random(seed));}  }
class C{  public int hashCode(){  return hash;}  }
class C{  public double determinant(){  if (!isSquare())   throw new IllegalArgumentException("Determinant Matrices must be Square");  return determinant(cloneValues(),rows);}  }
class C{  public void handleCapabilitiesRequest(Properties requestProperties,OutputStream out) throws IOException, MapRequestFormatException {  if (Debug.debugging("imageserver")) {    Debug.output("MRH.handleCapabilitiesRequest: unimplemented");  }  throw new MapRequestFormatException("Capabilities request currently not handled");}  }
class C{  public void run(IAction action){  try {    MessageDialog.openError(window.getShell(),"UMPLE Plug-in",action.getId() + "\n");    window.getActivePage().saveAllEditors(false);    IEditorPart editor=window.getActivePage().getActiveEditor();    if (editor == null) {      throw new Exception("Please open an Umple file.");    }    IResource fName=(IResource)editor.getEditorInput().getAdapter(IResource.class);    String name=fName.getFullPath().toOSString();    String wsLocation=fName.getWorkspace().getRoot().getLocation().toOSString();    String fileName=window.getActivePage().getActiveEditor().getTitle().toString();    if (!(fileName.endsWith(".ump")) || fileName.equals("")) {      throw new Exception("Please open an Umple file.");    }    String fullPath=wsLocation + name;    UmpleFile file=new UmpleFile(fullPath.substring(0,fullPath.lastIndexOf(fileName,fullPath.length() - 1)),fileName);    UmpleModel model=new UmpleModel(file);    model.run();    fName.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE,null);  } catch (  Exception e) {    e.printStackTrace();    MessageDialog.openError(window.getShell(),"UMPLE Plug-in",e.getMessage() + "\n");  }}  }
class C{  public void onClickRemoteAction(NotificationRemote remote,NotificationEntry entry,NotificationEntry.Action act){  if (DBG)   Log.v(TAG,"onClickRemoteAction - " + entry.ID + ", "+ act);}  }
class C{  Expression eval(){  return this;}  }
class C{  public NoSuchClassError(String className,Error cause){  super(cause.toString(),cause);  this.className=className;}  }
class C{  public static Complex multiply(Complex c,double a){  return multiply(a,c);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index){  return this.optEnum(clazz,index,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.726 -0400",hash_original_method="3AF4BFBC54E30FB310A497284D9191E7",hash_generated_method="A83592AC7DE5DDE9BC2B3211EA492B7C") public FileWriterWithEncoding(File file,CharsetEncoder encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public static long reverse(long v){  v=((v >>> 1) & 0x5555555555555555L) | ((v & 0x5555555555555555L) << 1);  v=((v >>> 2) & 0x3333333333333333L) | ((v & 0x3333333333333333L) << 2);  v=((v >>> 4) & 0x0F0F0F0F0F0F0F0FL) | ((v & 0x0F0F0F0F0F0F0F0FL) << 4);  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("tomee1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,TomeeStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomee1x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomee1x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomee7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,TomeeStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomee7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomcatExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("tomee7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomcatRuntimeConfigurationCapability.class);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_codeLangs_1_();}  }
class C{  public <T>void removeStickyEventRemote(Class<T> eventType){  new SendCommandToNode(WearBusTools.PREFIX_CLASS + WearBusTools.MESSAGE_PATH_COMMAND,null,eventType,context).start();}  }
class C{  public static String extractNoun(final String text){  String result;  if (text == null) {    result=null;  } else {    final PrefixExtractor extractor=new PrefixExtractor(text);    boolean changed;    do {      changed=false;      if (extractor.extractNounSingular()) {        changed=true;      }      if (extractor.extractNounPlural()) {        changed=true;      }    } while (changed);    result=extractor.toString();  }  return result;}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(cause != null ? cause.toString() : null);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  public synchronized void log(Level msgLevel,String msg,Object[] params){  LogRecord record=new LogRecord(msgLevel,msg);  record.setParameters(params);  log(record);}  }
class C{  protected void addPivotQueriesAndRanges(NamedList<Object> pivot,SolrParams params,DocSet docs,List<FacetComponent.FacetBase> facetQueries,List<RangeFacetRequest> facetRanges) throws IOException {  assert null != facetQueries;  assert null != facetRanges;  if (!facetQueries.isEmpty()) {    SimpleFacets facets=new SimpleFacets(req,docs,params);    NamedList<Integer> res=new SimpleOrderedMap<>();    for (    FacetComponent.FacetBase facetQuery : facetQueries) {      try {        ParsedParams parsed=getParsedParams(params,docs,facetQuery);        facets.getFacetQueryCount(parsed,res);      } catch (      SyntaxError e) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid " + FacetParams.FACET_QUERY + " ("+ facetQuery.facetStr+ ") cause: "+ e.getMessage(),e);      }    }    pivot.add(PivotListEntry.QUERIES.getName(),res);  }  if (!facetRanges.isEmpty()) {    RangeFacetProcessor rangeFacetProcessor=new RangeFacetProcessor(req,docs,params,null);    NamedList<Object> resOuter=new SimpleOrderedMap<>();    for (    RangeFacetRequest rangeFacet : facetRanges) {      try {        rangeFacetProcessor.getFacetRangeCounts(rangeFacet,resOuter);      } catch (      SyntaxError e) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid " + FacetParams.FACET_RANGE + " ("+ rangeFacet.facetStr+ ") cause: "+ e.getMessage(),e);      }    }    pivot.add(PivotListEntry.RANGES.getName(),resOuter);  }}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  private void endUpdatePendingChanges(){  boolean sendEvent;  boolean modified;synchronized (operationDepthAndModificationLock) {    --operationDepth;    sendEvent=(operationDepth == 0);    modified=changesModifiedInOperation;  }  if (sendEvent) {    final PendingChangeCacheEvent event=new PendingChangeCacheEvent(this);    getListener().onAfterUpdatePendingChanges(event,modified);  }}  }
class C{  public GroupManager(){  TurnNotifier.get().notifyInSeconds(60,this);  LoginNotifier.get().addListener(this);}  }
class C{  default String swim(){  return "I can swim.";}  }
class C{  public static IndexType createNonUnique(){  return createNonUnique(false,false);}  }
class C{  @Override protected void sendFunctionGroup5(){  XNetMessage msg=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),21,f21);  queueMessage(msg,THROTTLEFUNCSENT);  XNetMessage msg1=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),22,f22);  queueMessage(msg1,THROTTLEFUNCSENT);  XNetMessage msg2=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),23,f23);  queueMessage(msg2,THROTTLEFUNCSENT);  XNetMessage msg3=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),24,f24);  queueMessage(msg3,THROTTLEFUNCSENT);  XNetMessage msg4=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),25,f25);  queueMessage(msg4,THROTTLEFUNCSENT);  XNetMessage msg5=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),26,f26);  queueMessage(msg5,THROTTLEFUNCSENT);  XNetMessage msg6=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),27,f27);  queueMessage(msg6,THROTTLEFUNCSENT);  XNetMessage msg7=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),28,f28);  queueMessage(msg7,THROTTLEFUNCSENT);}  }
class C{  @SuppressLint("DefaultLocale") private void initializeWeekLayout(){  TextView dayOfWeek;  String dayOfTheWeekString;  View titleLayout=view.findViewById(R.id.weekLayout);  titleLayout.setBackgroundColor(weekLayoutBackgroundColor);  final String[] weekDaysArray=new DateFormatSymbols(locale).getShortWeekdays();  for (int i=1; i < weekDaysArray.length; i++) {    dayOfTheWeekString=weekDaysArray[i];    if (dayOfTheWeekString.length() > 3) {      dayOfTheWeekString=dayOfTheWeekString.substring(0,3).toUpperCase();    }    dayOfWeek=(TextView)view.findViewWithTag(DAY_OF_WEEK + getWeekIndex(i,currentCalendar));    dayOfWeek.setText(dayOfTheWeekString);    dayOfWeek.setTextColor(dayOfWeekTextColor);    if (null != getCustomTypeface()) {      dayOfWeek.setTypeface(getCustomTypeface());    }  }}  }
class C{  public void refreshProject(){synchronized (this) {    this.access=null;  }}  }
class C{  protected Units(){}  }
class C{  public static void main(String args[]){  Header.printHeader(DigicoreFilesSorter.class.toString(),args);  DigicoreFilesSorter dfs=null;  if (args.length != 1) {    throw new RuntimeException("Must provide path for `Vehicles' folder.");  } else {    dfs=new DigicoreFilesSorter(args[0]);  }  log.info("=============================================================");  log.info("  Sorting DigiCore vehicle files after they've been split.");  log.info("-------------------------------------------------------------");  dfs.sortVehicleFiles();  Header.printFooter();}  }
class C{  private LinearGradient_Delegate(float x0,float y0,float x1,float y1,int colors[],float positions[],TileMode tile){  super(colors,positions);  mJavaPaint=new LinearGradientPaint(x0,y0,x1,y1,mColors,mPositions,tile);}  }
class C{  public IgniteUuid id(int idx){  return idx <= lastExistingIdx ? ids[idx] : surrogateId(idx);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Description(){  put(Actions.ACTION,Actions.LOOK);}  }
class C{  public static boolean isLegal(int entityTechlevel,int equipmentTechlevel,boolean ignoreUnknown,boolean mixed){  if (equipmentTechlevel == T_ALLOWED_ALL) {    return true;  }  if (equipmentTechlevel == T_TECH_UNKNOWN) {    if (ignoreUnknown) {      return true;    }    return false;  }  if (entityTechlevel == equipmentTechlevel) {    return true;  }  if (mixed) {    if (((entityTechlevel == T_IS_EXPERIMENTAL) || (entityTechlevel == T_CLAN_EXPERIMENTAL)) && ((equipmentTechlevel != T_IS_UNOFFICIAL) && (equipmentTechlevel != T_CLAN_UNOFFICIAL))) {      return true;    }    if (((entityTechlevel == T_IS_ADVANCED) || (entityTechlevel == T_CLAN_ADVANCED)) && ((equipmentTechlevel != T_IS_UNOFFICIAL) && (equipmentTechlevel != T_CLAN_UNOFFICIAL)) && ((equipmentTechlevel != T_IS_EXPERIMENTAL) && (equipmentTechlevel != T_CLAN_EXPERIMENTAL))) {      return true;    }    if ((entityTechlevel == T_IS_UNOFFICIAL) || (entityTechlevel == T_CLAN_UNOFFICIAL)) {      return true;    }  }  if ((equipmentTechlevel == T_ALL_IS) && !isClan(entityTechlevel)) {    return true;  }  if ((equipmentTechlevel == T_INTRO_BOXSET) && ((entityTechlevel == T_IS_TW_NON_BOX) || (entityTechlevel == T_IS_TW_ALL) || (entityTechlevel == T_TW_ALL)|| (entityTechlevel == T_IS_ADVANCED)|| (entityTechlevel == T_IS_EXPERIMENTAL)|| (entityTechlevel == T_IS_UNOFFICIAL)|| (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_IS_TW_NON_BOX) && ((entityTechlevel == T_IS_TW_ALL) || (entityTechlevel == T_TW_ALL) || (entityTechlevel == T_IS_ADVANCED)|| (entityTechlevel == T_IS_EXPERIMENTAL)|| (entityTechlevel == T_IS_UNOFFICIAL)|| (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_CLAN_TW) && ((entityTechlevel == T_CLAN_TW) || (entityTechlevel == T_CLAN_ADVANCED) || (entityTechlevel == T_CLAN_EXPERIMENTAL)|| (entityTechlevel == T_CLAN_UNOFFICIAL)|| (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_IS_ADVANCED) && ((entityTechlevel == T_IS_EXPERIMENTAL) || (entityTechlevel == T_IS_UNOFFICIAL) || (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_ALL_CLAN) && isClan(entityTechlevel)) {    return true;  }  if ((equipmentTechlevel == T_CLAN_ADVANCED) && ((entityTechlevel == T_CLAN_EXPERIMENTAL) || (entityTechlevel == T_CLAN_UNOFFICIAL) || (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_IS_EXPERIMENTAL) && ((entityTechlevel == T_IS_UNOFFICIAL) || (entityTechlevel == T_ALL))) {    return true;  }  if ((equipmentTechlevel == T_CLAN_EXPERIMENTAL) && ((entityTechlevel == T_CLAN_UNOFFICIAL) || (entityTechlevel == T_ALL))) {    return true;  }  return false;}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  @Override public boolean equals(Object that){  if (that instanceof S1Interval) {    S1Interval thatInterval=(S1Interval)that;    return lo() == thatInterval.lo() && hi() == thatInterval.hi();  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.871 -0400",hash_original_method="C9DEC901D489056B6C33764CD8784603",hash_generated_method="6CA4A88AF085C82DDE910B54F344F663") public static IOFileFilter nameFileFilter(String name,IOCase caseSensitivity){  return new NameFileFilter(name,caseSensitivity);}  }
class C{  public void throwUnlessEmpty(final String name){  if (args.isEmpty() && kw.isEmpty()) {    return;  }  final List<String> parts=new ArrayList<>();  final Joiner on=Joiner.on(" and ");  if (!args.isEmpty()) {    parts.add(args.size() == 1 ? "argument " + args.iterator().next() : "arguments " + args);  }  if (!kw.isEmpty()) {    parts.add((kw.size() == 1 ? "keyword " + kw.keySet().iterator().next() : "keywords " + kw.keySet()));  }  throw new IllegalStateException(name + ": has trailing " + on.join(parts));}  }
class C{  private void attributes(StringBuilder builder){  Method[] list=type.getDeclaredMethods();  for (int i=0; i < list.length; i++) {    String attribute=list[i].getName();    Object value=value(list[i]);    if (i > 0) {      builder.append(',');      builder.append(' ');    }    builder.append(attribute);    builder.append('=');    builder.append(value);  }  builder.append(')');}  }
class C{  public static double cdf(double val,double mu,double beta){  return Math.exp(-Math.exp(-(val - mu) / beta));}  }
class C{  private TMember createComposedMember(String memberName){  final ComposedMemberDescriptor composedMemberDescr=new ComposedMemberDescriptor(writeAccess,EcoreUtilN4.getResource(context,unionTypeExpression),ts);  for (int idx=0; idx < subScopes.length; idx++) {    IScope subScope=subScopes[idx];    final RuleEnvironment GwithSubstitutions=ts.createRuleEnvironmentForContext(unionTypeExpression.getTypeRefs().get(idx),EcoreUtilN4.getResource(context,unionTypeExpression));    TMember member=findMemberInSubScope(subScope,memberName);    composedMemberDescr.merge(GwithSubstitutions,member);  }  if (!composedMemberDescr.isEmpty()) {    final TMember result;    if (composedMemberDescr.isValid()) {      result=composedMemberDescr.create(memberName);    } else {      result=createErrorPlaceholder(memberName);    }    final ComposedTypeRef cacheHolder=getCacheHolder(unionTypeExpression);    EcoreUtilN4.doWithDeliver(false,null,cacheHolder);    return result;  } else {    return null;  }}  }
class C{  public void move(double x,double y){  Move move=new Move(x,y);  if (x < minX) {    minX=x;  }  if (y < minY) {    minY=y;  }  if (x > maxX) {    maxX=x;  }  if (y > maxY) {    maxY=y;  }  elements.add(move);}  }
class C{  public WebApplicationResource(ServletContext context,String path){  this(context,getMimeType(context,path),path);}  }
class C{  public static void grantRoles(DataService mgr,PlatformUser user,UserRoleType... rolesToBeGranted) throws NonUniqueBusinessKeyException {  for (  UserRoleType roleToBeGranted : rolesToBeGranted) {    if (!user.hasRole(roleToBeGranted)) {      UserRole role=findOrCreateRole(mgr,roleToBeGranted);      RoleAssignment assignment=new RoleAssignment();      assignment.setRole(role);      assignment.setUser(user);      mgr.persist(assignment);    }  }}  }
class C{  synchronized void initialize(long initialTimestamp,long initialGeoXPPoint,long initialElevation,long initialLongValue,double initialDoubleValue,BigDecimal initialBDValue,String initialStringValue){  this.initialTimestamp=initialTimestamp;  this.initialGeoXPPoint=initialGeoXPPoint;  this.initialElevation=initialElevation;  this.initialLongValue=initialLongValue;  this.initialDoubleValue=initialDoubleValue;  this.initialBDValue=initialBDValue;  this.initialStringValue=initialStringValue;}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int bitNum=getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String sName=prefix + typeLetter() + bitNum;  lgt=new DCCppLight(tc,this,sName,userName);  return lgt;}  }
class C{  public OptionSet removeObserve(){  observe=null;  return this;}  }
class C{  public Path(Vector<PathElement> elements){  this();  for (int i=0; i < elements.size(); i++)   m_Elements.add((PathElement)elements.get(i).clone());}  }
class C{  @Override public void validate(final IDescription cd){  if (Assert.nameIsValid(cd)) {    super.validate(cd);  }}  }
class C{  public int match_main(String text,String pattern,int loc){  if (text == null || pattern == null) {    throw new IllegalArgumentException("Null inputs. (match_main)");  }  loc=Math.max(0,Math.min(loc,text.length()));  if (text.equals(pattern)) {    return 0;  } else   if (text.length() == 0) {    return -1;  } else   if (loc + pattern.length() <= text.length() && text.substring(loc,loc + pattern.length()).equals(pattern)) {    return loc;  } else {    return match_bitap(text,pattern,loc);  }}  }
class C{  public void tabHidden(Tab tab){  mRecentTabs.add(new WeakReference<Tab>(tab));  if (mRecentTabs.size() <= MAX_RECENT_TABS)   return;  freeze(mRecentTabs.remove(0).get());}  }
class C{  public void addTab(String title,Component component,boolean isClosable){  super.addTab(title,component);  if (isClosable && component instanceof Watch) {    closeableTabs.add((Watch)component);  }}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed. Failed to update discovery status to ERROR.",e);  }}  }
class C{  public boolean containsValue(Object value){  purgeBeforeRead();  if (value == null) {    return false;  }  return super.containsValue(value);}  }
class C{  private RASpliterator(List<E> list,int origin,int fence,int expectedModCount){  this.list=list;  this.index=origin;  this.fence=fence;  this.alist=list instanceof AbstractList ? (AbstractList<E>)list : null;  this.expectedModCount=expectedModCount;}  }
class C{  public static BitSet or(BitSet left,BitSet right){  BitSet result=(BitSet)left.clone();  result.or(right);  return result;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  void finishPacket(ByteBuffer buffer){  byte[] clientId=new byte[7];  clientId[0]=CLIENT_ID_ETHER;  System.arraycopy(mClientMac,0,clientId,1,6);  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_REQUEST);  addTlv(buffer,DHCP_PARAMETER_LIST,mRequestedParams);  addTlvEnd(buffer);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE;default :return null;}}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public String generateSdp(){  String ntpTime=SipUtils.constructNTPtime(System.currentTimeMillis());  String ipAddress=getDialogPath().getSipStack().getLocalIpAddress();  return "v=0" + SipUtils.CRLF + "o=- "+ ntpTime+ " "+ ntpTime+ " "+ SdpUtils.formatAddressType(ipAddress)+ SipUtils.CRLF+ "s=-"+ SipUtils.CRLF+ "c="+ SdpUtils.formatAddressType(ipAddress)+ SipUtils.CRLF+ "t=0 0"+ SipUtils.CRLF+ "m=application "+ mLocalRtpPort+ " RTP/AVP "+ getRtpFormat().getPayload()+ SipUtils.CRLF+ "a=rtpmap:"+ getRtpFormat().getPayload()+ " "+ getRtpFormat().getCodec()+ SipUtils.CRLF+ "a=sendrecv"+ SipUtils.CRLF;}  }
class C{  protected TemporalRecord interpolate(long time,TemporalRecord previous,TemporalRecord next){  TemporalRecord ret=null;  double top=time - previous.getTime();  double bottom=next.getTime() - previous.getTime();  double percent=top / bottom;switch (renderType) {case OMGraphic.RENDERTYPE_XY:    ret=super.interpolate(time,previous,next);  break;default :Point2D prevPt=((TemporalPoint)previous).getLocation();Point2D nextPt=((TemporalPoint)next).getLocation();LatLonPoint prevLL;LatLonPoint nextLL;if (prevPt instanceof LatLonPoint) {prevLL=(LatLonPoint)prevPt;} else {prevLL=new LatLonPoint.Double(prevPt);}if (nextPt instanceof LatLonPoint) {nextLL=(LatLonPoint)nextPt;} else {nextLL=new LatLonPoint.Double(nextPt);}double[] pts=GreatCircle.greatCircle(prevLL.getRadLat(),prevLL.getRadLon(),nextLL.getRadLat(),nextLL.getRadLon(),100,true);int index=(int)(2 * Math.floor(100 * percent));ret=new TemporalPoint(new LatLonPoint.Double(pts[index],pts[index + 1],true),time);}return ret;}  }
class C{  private BigDecimal sumALVOnUnitUsage(String usages){  BigDecimal totalALV=BigDecimal.ZERO;  if (this.taxCalcInfo.getUnitTaxCalculationInfos().get(0) instanceof List) {    for (    UnitTaxCalculationInfo unitTaxInfo : this.taxCalcInfo.getUnitTaxCalculationInfos()) {      if (usages.contains(unitTaxInfo.getUnitUsage())) {        totalALV=totalALV.add(unitTaxInfo.getNetARV());      }    }  } else {    for (int i=0; i < this.taxCalcInfo.getUnitTaxCalculationInfos().size(); i++) {      UnitTaxCalculationInfo unitTax=(UnitTaxCalculationInfo)this.taxCalcInfo.getUnitTaxCalculationInfos().get(i);      if (usages.contains(unitTax.getUnitUsage())) {        totalALV=totalALV.add(unitTax.getNetARV());      }    }  }  return totalALV;}  }
class C{  public String realm(){  return realm;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public Node buildTreeGrow(Node node,int depth){  if (depth == 0) {    return node.copyNode();  } else {    Node copy=node.copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      if (node.getArgument(i) == null) {        copy.setArgument(i,buildTreeGrow(node.getArgumentType(i),depth - 1));      } else {        copy.setArgument(i,buildTreeGrow(node.getArgument(i),depth - 1));      }    }    return copy;  }}  }
class C{  public MqttUnsubscribe(String[] names){  super(MqttWireMessage.MESSAGE_TYPE_UNSUBSCRIBE);  this.names=names;}  }
class C{  public void addRoundRectangle(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.cubicTo(x,y,x,y,x,y + arcHeight);  this.cubicTo(x,y,x,y,x + arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width,y + arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width,y + height - arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width - arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x + arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x,y + height - arcHeight);}  }
class C{  final public MutableString toUpperCase(){  int n=length();  final char[] a=array;  while (n-- != 0)   a[n]=Character.toUpperCase(a[n]);  changed();  return this;}  }
class C{  public static long dataPoints(long period,long span){  return span / period;}  }
class C{  public static Builder builder(){  return new Builder(new KeepAliveRequest());}  }
class C{  public long readLocalDate() throws IOException {  expectStartTag("date");  if (localCalendar == null)   localCalendar=Calendar.getInstance();  long value=parseDate(localCalendar);  expectEndTag("date");  return value;}  }
class C{  public void testDivideToIntegralValueMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=32;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String c="277923185514690367474770683";  int resScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divideToIntegralValue(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public Years minus(int years){  return plus(FieldUtils.safeNegate(years));}  }
class C{  public static void rollbackAndCloseQuietly(Connection conn){  try {    rollbackAndClose(conn);  } catch (  SQLException e) {  }}  }
class C{  @Override public String toString(){  Enumeration<String> enm;  String result;  String key;  Vector<String> keys;  int i;  String value;  result="";  keys=new Vector<String>();  enm=m_Info.keys();  while (enm.hasMoreElements()) {    keys.add(enm.nextElement());  }  Collections.sort(keys);  for (i=0; i < keys.size(); i++) {    key=keys.get(i).toString();    value=m_Info.get(key).toString();    if (key.equals("line.separator")) {      value=Utils.backQuoteChars(value);    }    result+=key + ": " + value+ "\n";  }  return result;}  }
class C{  public Composite createControl(final Composite parent,final KeyListener kListener){  final Composite part=AbstractSimpleConfigurator.subpart(parent,"Fill:");  this.on=new Button(part,SWT.CHECK);  this.on.addSelectionListener(this.sync);  this.chooser=new StolenColorEditor(part,this.sync);  this.percent=new Combo(part,SWT.DROP_DOWN);  this.percent.setItems(new String[]{"0%","25%","50%","75%","100%"});  this.percent.setTextLimit(4);  this.percent.addKeyListener(kListener);  this.percent.setToolTipText("Fill opacity");  return part;}  }
class C{  public static boolean isViable(World worldObj,AStarNode target,int yoffset){  return isViable(worldObj,target.x,target.y,target.z,yoffset);}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  public ImmutableByteBufferInputStream(byte[] bytes){  setBuffer(ByteBuffer.wrap(bytes));}  }
class C{  public void jsFnCall(String jsString){  showDialog(jsString);}  }
class C{  public TestStackExResponse clone(){  TestStackExResponse result=new TestStackExResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Output=Output == null ? null : Output.clone();  return result;}  }
class C{  public static void sort(float[] array){  DualPivotQuicksort.sort(array);}  }
class C{  private void convert(BufferedReader in,PrintStream out){  try {    LagGraph lagGraph=new BasicLagGraph();    String line=null;    while ((line=in.readLine()) != null) {      addEdges(line,lagGraph);    }    out.print(lagGraph);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean test(List<Object> strings){  if (strings.isEmpty()) {    return false;  }  if (strings.size() >= 2) {    Object date=strings.get(0);    Object format=strings.get(1);    if (date == null || format == null) {      return false;    }    try {      SimpleDateFormat sdf=new SimpleDateFormat(format.toString());      sdf.parse(date.toString());      return true;    } catch (    ParseException pe) {      return false;    }  } else {    return false;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION___MODIFIER_1:    return MODIFIER_1_EDEFAULT == null ? modifier_1 != null : !MODIFIER_1_EDEFAULT.equals(modifier_1);case UmplePackage.ASSOCIATION___ASSOCIATION_END_1:  return associationEnd_1 != null && !associationEnd_1.isEmpty();case UmplePackage.ASSOCIATION___ARROW_1:return ARROW_1_EDEFAULT == null ? arrow_1 != null : !ARROW_1_EDEFAULT.equals(arrow_1);case UmplePackage.ASSOCIATION___ASSOCIATION_END_2:return associationEnd_2 != null && !associationEnd_2.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "INVALID CUipcMem_flags: " + n;  }  String result="";  if ((n & CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS) != 0)   result+="CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS";  return result;}  }
class C{  public TaskResourceRep modifyExports(URI fsId,String protocol,String securityType,String permissions,String rootUserMapping,FileExportUpdateParam updateParam){  String modifyExportPath=String.format(MODIFYEXPORTS,fsId,protocol,securityType,permissions,rootUserMapping);  WebResource rRoot=createRequest(modifyExportPath);  TaskResourceRep resp=null;  try {    resp=addSignature(rRoot).put(TaskResourceRep.class,updateParam);  } catch (  UniformInterfaceException e) {    _log.warn("could not modify exports",e);  }  return resp;}  }
class C{  public RemoteVmManager(RemoteHost remoteHost){  this(remoteHost,null);}  }
class C{  public PKCS10(PublicKey publicKey,PKCS10Attributes attributes){  subjectPublicKeyInfo=publicKey;  attributeSet=attributes;}  }
class C{  static int mapCapacity(int expectedSize){  if (expectedSize < 3) {    Preconditions.checkArgument(expectedSize >= 0,"Size must be nonnegative but was " + expectedSize);    return expectedSize + 1;  }  if (expectedSize < MAX_POWER_OF_TWO) {    return expectedSize + expectedSize / 3;  }  return Integer.MAX_VALUE;}  }
class C{  public static WindowFocusListener add(WindowFocusListener a,WindowFocusListener b){  return (WindowFocusListener)addInternal(a,b);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.855 -0500",hash_original_method="3F663E82A2EB3C95CA9BF0AFC9912DC8",hash_generated_method="DBB377E63B1D8B44DF2588167E13233A") @Override public synchronized void close() throws IOException {  buffer=null;  notifyAll();}  }
class C{  public static void box(double x,double y,double z,double x2,double y2,double z2,Color color){  x=x - Minecraft.getMinecraft().getRenderManager().renderPosX;  y=y - Minecraft.getMinecraft().getRenderManager().renderPosY;  z=z - Minecraft.getMinecraft().getRenderManager().renderPosZ;  x2=x2 - Minecraft.getMinecraft().getRenderManager().renderPosX;  y2=y2 - Minecraft.getMinecraft().getRenderManager().renderPosY;  z2=z2 - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(2.0F);  RenderUtil.setColor(color);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  drawColorBox(new AxisAlignedBB(x,y,z,x2,y2,z2));  GL11.glColor4d(0,0,0,0.5F);  RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x,y,z,x2,y2,z2),-1);  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void zoomOut(){  chartView.zoomOut();  zoomControls.setIsZoomInEnabled(chartView.canZoomIn());  zoomControls.setIsZoomOutEnabled(chartView.canZoomOut());}  }
class C{  public Murata(){  super(2,2);}  }
class C{  private double findLevelMaxCoeff(ImageTree imgTree){  double h=0.0;  double v=0.0;  double d=0.0;  h=findSubBandMaxCoeff(imgTree.getHorizontal(),2);  v=findSubBandMaxCoeff(imgTree.getVertical(),3);  d=findSubBandMaxCoeff(imgTree.getDiagonal(),4);  return CommonUtil.max(h,CommonUtil.max(v,d));}  }
class C{  public FeatureParameterValue createFeatureParameterValue(){  FeatureParameterValueImpl featureParameterValue=new FeatureParameterValueImpl();  return featureParameterValue;}  }
class C{  public JavacAST(Messager messager,Context context,JCCompilationUnit top){  super(sourceName(top),packageDeclaration(top),new JavacImportList(top));  setTop(buildCompilationUnit(top));  this.context=context;  this.messager=messager;  this.log=Log.instance(context);  this.elements=JavacElements.instance(context);  this.treeMaker=new JavacTreeMaker(TreeMaker.instance(context));  this.symtab=Symtab.instance(context);  this.javacTypes=JavacTypes.instance(context);  clearChanged();}  }
class C{  public boolean removeConfiguredNetworksAndDisableWifi(){  if (!disconnectAP()) {    return false;  }  sleep(SHORT_TIMEOUT);  if (!mWifiManager.setWifiEnabled(false)) {    return false;  }  sleep(SHORT_TIMEOUT);  return true;}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
