class C{  public boolean canZoomInMoreY(){  return (mScaleY < mMaxScaleY);}  }
class C{  default String objectRole(String relationId){  return OwlModel.OBJECT.owlname() + "-" + relationId;}  }
class C{  protected void scanExternalID(String[] identifiers,boolean optionalSystemId) throws IOException, XNIException {  String systemId=null;  String publicId=null;  if (fEntityScanner.skipString("PUBLIC")) {    if (!fEntityScanner.skipSpaces()) {      reportFatalError("SpaceRequiredAfterPUBLIC",null);    }    scanPubidLiteral(fString);    publicId=fString.toString();    if (!fEntityScanner.skipSpaces() && !optionalSystemId) {      reportFatalError("SpaceRequiredBetweenPublicAndSystem",null);    }  }  if (publicId != null || fEntityScanner.skipString("SYSTEM")) {    if (publicId == null && !fEntityScanner.skipSpaces()) {      reportFatalError("SpaceRequiredAfterSYSTEM",null);    }    int quote=fEntityScanner.peekChar();    if (quote != '\'' && quote != '"') {      if (publicId != null && optionalSystemId) {        identifiers[0]=null;        identifiers[1]=publicId;        return;      }      reportFatalError("QuoteRequiredInSystemID",null);    }    fEntityScanner.scanChar();    XMLString ident=fString;    if (fEntityScanner.scanLiteral(quote,ident) != quote) {      fStringBuffer.clear();      do {        fStringBuffer.append(ident);        int c=fEntityScanner.peekChar();        if (XMLChar.isMarkup(c) || c == ']') {          fStringBuffer.append((char)fEntityScanner.scanChar());        } else         if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer);        } else         if (isInvalidLiteral(c)) {          reportFatalError("InvalidCharInSystemID",new Object[]{Integer.toHexString(c)});          fEntityScanner.scanChar();        }      } while (fEntityScanner.scanLiteral(quote,ident) != quote);      fStringBuffer.append(ident);      ident=fStringBuffer;    }    systemId=ident.toString();    if (!fEntityScanner.skipChar(quote)) {      reportFatalError("SystemIDUnterminated",null);    }  }  identifiers[0]=systemId;  identifiers[1]=publicId;}  }
class C{  public static void assertEquals(double expected,double actual,double delta){  Assert.assertEquals(null,expected,actual,delta);}  }
class C{  private void initStyle(AttributeSet attrs,int defStyleAttr){  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.ActionCardView,defStyleAttr,0);  if (typedArray != null) {    int defaultColor=ContextCompat.getColor(context,android.R.color.black);    if (typedArray.hasValue(R.styleable.ActionCardView_cardTitle)) {      setTitle(typedArray.getString(R.styleable.ActionCardView_cardTitle));    }    if (typedArray.hasValue(R.styleable.ActionCardView_cardTitleTextColor)) {      setTitleTextColor(typedArray.getColor(R.styleable.ActionCardView_cardTitleTextColor,defaultColor));    }    if (typedArray.hasValue(R.styleable.ActionCardView_cardDividerColor)) {      setDividerColor(typedArray.getColor(R.styleable.ActionCardView_cardDividerColor,defaultColor));    }    if (typedArray.hasValue(R.styleable.ActionCardView_cardDescription)) {      setDescription(typedArray.getString(R.styleable.ActionCardView_cardDescription));    }    if (typedArray.hasValue(R.styleable.ActionCardView_cardDescriptionTextColor)) {      setDescriptionTextColor(typedArray.getColor(R.styleable.ActionCardView_cardDescriptionTextColor,defaultColor));    }    typedArray.recycle();  }}  }
class C{  public Builder baseUrl(String baseUrl){  checkNotNull(baseUrl,"baseUrl == null");  HttpUrl httpUrl=HttpUrl.parse(baseUrl);  if (httpUrl == null) {    throw new IllegalArgumentException("Illegal URL: " + baseUrl);  }  return baseUrl(httpUrl);}  }
class C{  public static void launchProc(String cmdLine,String task,String baseName){  Process proc=null;  String line=null;  try {    proc=Runtime.getRuntime().exec(cmdLine);    InputStream procStdOut=proc.getInputStream();    InputStream procStdErr=proc.getErrorStream();    StreamLogger stdOutLogger=new StreamLogger(procStdOut,System.out);    StreamLogger stdErrLogger=new StreamLogger(procStdErr,System.err);    stdOutLogger.start();    stdErrLogger.start();    try {      stdOutLogger.join();      stdErrLogger.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }    proc.waitFor();    if (proc.exitValue() != 0) {      throw new RuntimeException(task + " computation failed on file [" + baseName+ "]!\n"+ "Command line was: ["+ cmdLine+ "].");    }  } catch (  IOException e) {    throw new RuntimeException(task + " computation provoked an IOException on file [" + baseName+ "].",e);  }catch (  InterruptedException e) {    throw new RuntimeException(task + " computation interrupted on file [" + baseName+ "].",e);  }}  }
class C{  private void identifyAbbrev(AnnotatedString input,LanguageResource langRes){  RegExp allAbbrevMatcher=langRes.getAllAbbrevMatcher();  Map<String,Set<String>> abbrevLists=langRes.getAbbrevLists();  char c=input.setIndex(0);  if (null == input.getAnnotation(CLASS_ANNO)) {    c=input.setIndex(input.findNextAnnotation(CLASS_ANNO));  }  while (c != CharacterIterator.DONE) {    int tokenEnd=input.getRunLimit(CLASS_ANNO);    int tokenStart=input.getIndex();    c=input.setIndex(input.findNextAnnotation(CLASS_ANNO));    if (c == '.' && tokenEnd == input.getIndex()) {      tokenEnd=tokenEnd + 1;      String image=input.substring(tokenStart,tokenEnd);      int hyphenPos=image.lastIndexOf("-");      if (hyphenPos != -1) {        String afterHyphen=image.substring(hyphenPos + 1);        if (afterHyphen.matches("[^0-9]{2,}")) {          image=afterHyphen;        }      }      boolean found=false;      for (      Map.Entry<String,Set<String>> oneEntry : abbrevLists.entrySet()) {        String abbrevClass=oneEntry.getKey();        Set<String> oneList=oneEntry.getValue();        if (oneList.contains(image)) {          input.annotate(CLASS_ANNO,abbrevClass,tokenStart,tokenEnd);          found=true;          break;        }      }      if (found) {        continue;      }      if (allAbbrevMatcher.matches(image)) {        String abbrevClass=this.identifyClass(image,allAbbrevMatcher,langRes.getAbbrevDescr());        input.annotate(CLASS_ANNO,abbrevClass,tokenStart,tokenEnd);        continue;      }    }  }}  }
class C{  @ObjectiveCName("updateList:") private void updateList(Collection entries){  Map<String,ArrayList<Integer>> oldStructure=this.beforeChange();  this.record.set(entries);  this.afterChange(oldStructure);}  }
class C{  public ShapelessRecipe removeIngredient(MaterialData ingredient){  return removeIngredient(ingredient.getItemType(),ingredient.getData());}  }
class C{  public void callEvent(Event event){  if (event.isAsynchronous()) {    if (Thread.holdsLock(this)) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");    }    if (Bukkit.getServer().isPrimaryThread()) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");    }    fireEvent(event);  } else {synchronized (this) {      fireEvent(event);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_MY(String skillcaster){  return new SM_SYSTEM_MESSAGE(1210004,skillcaster);}  }
class C{  private ArticlesUtils(){}  }
class C{  public Matrix times(Matrix B){  if (B.m != n) {    throw new IllegalArgumentException("Matrix inner dimensions must agree.");  }  Matrix X=new Matrix(m,B.n);  double[][] C=X.getArray();  double[] Bcolj=new double[n];  for (int j=0; j < B.n; j++) {    for (int k=0; k < n; k++) {      Bcolj[k]=B.A[k][j];    }    for (int i=0; i < m; i++) {      double[] Arowi=A[i];      double s=0;      for (int k=0; k < n; k++) {        s+=Arowi[k] * Bcolj[k];      }      C[i][j]=s;    }  }  return X;}  }
class C{  @Override public List<WebElement> findElementsByClassName(String className){  return ((FindsByClassName)super.getWrappedDriver()).findElementsByClassName(className);}  }
class C{  public static <K,R>Flowable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends Publisher<? extends R>> mapOfCases,Scheduler scheduler){  return switchCase(caseSelector,mapOfCases,Flowable.<R>empty().subscribeOn(scheduler));}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("select=all;");}  }
class C{  public boolean isDocumentLevel(){  loadRuleProperties();  return documentLevelRule;}  }
class C{  public static boolean veryLowMemoryCondition(){  return MaryUtils.availableMemory() < lowMemoryThreshold() / 2;}  }
class C{  private void regulateAverageAngle(double endAngleRadians,int expandButtonCount){  if (!angleStartEqualsEnd && startAngleRadians == endAngleRadians) {    double tmp=2 * Math.PI / expandButtonCount;    if (averageAngleRadians < 0) {      averageAngleRadians=-tmp;    } else {      averageAngleRadians=tmp;    }  }}  }
class C{  public static void showImage(Context context,@NonNull String imageUrl,String title){  if (context == null)   return;  showImage(context,imageView,imageUrl,title);}  }
class C{  public boolean isFullSplitSystem(Taxa taxa){  BitSet bits=taxa.getBits();  for (Iterator it=iterator(); it.hasNext(); ) {    Split split=(Split)it.next();    if (!split.getTaxa().equals(bits))     return false;  }  return true;}  }
class C{  public void clearBody() throws JMSException {  super.clearBody();  Body=new HashMap<String,Object>();}  }
class C{  private void putIntoCache(String diphoneName,Diphone diphone){  if (diphoneMap == null) {    return;  }  if (useSoftCache) {    diphoneMap.put(diphoneName,new WeakReference(diphone));  } else {    diphoneMap.put(diphoneName,diphone);  }}  }
class C{  public boolean isCDATAAttribute(QName elName,QName atName){  int elDeclIdx=getElementDeclIndex(elName);  return !(getAttributeDecl(elDeclIdx,fAttributeDecl) && fAttributeDecl.simpleType.type != XMLSimpleType.TYPE_CDATA);}  }
class C{  private void loadHeaderAndData(DataInputStream dis){  try {    if (!General.readWord(dis).equals("EST_File") || !General.readWord(dis).equals("Track")) {      throw new Error("The given data input stream is not an EST Track file.");    }    String token=General.readWord(dis);    while (!token.equals("EST_Header_End")) {      if (token.equals("DataType")) {        isBinary=General.readWord(dis).equals("binary");      } else       if (token.equals("ByteOrder")) {        isBigEndian=General.readWord(dis).equals("10");      } else       if (token.equals("NumFrames")) {        numFrames=Integer.parseInt(General.readWord(dis));      } else       if (token.equals("NumChannels")) {        numChannels=Integer.parseInt(General.readWord(dis));      }      token=General.readWord(dis);    }    times=new float[numFrames];    frames=new float[numFrames][numChannels];    if (isBinary) {      loadBinaryData(dis);    } else {      loadTextData(dis);    }  } catch (  IOException ioe) {    throw new Error("IO Exception while parsing EST Track file: " + ioe.getMessage());  }}  }
class C{  protected AdsCheckLinkQuery linkUrl(String value){  return unsafeParam("link_url",value);}  }
class C{  public void startWrite(){  writerIterator=null;}  }
class C{  public void storeCookies(URLConnection conn) throws IOException {  String domain=getDomainFromHost(conn.getURL().getHost());  Map domainStore;  if (store.containsKey(domain)) {    domainStore=(Map)store.get(domain);  } else {    domainStore=new HashMap();    store.put(domain,domainStore);  }  String headerName=null;  for (int i=1; (headerName=conn.getHeaderFieldKey(i)) != null; i++) {    if (headerName.equalsIgnoreCase(SET_COOKIE)) {      Map cookie=new HashMap();      StringTokenizer st=new StringTokenizer(conn.getHeaderField(i),COOKIE_VALUE_DELIMITER);      if (st.hasMoreTokens()) {        String token=st.nextToken();        String name=token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR));        String value=token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length());        domainStore.put(name,cookie);        cookie.put(name,value);      }      while (st.hasMoreTokens()) {        String token=st.nextToken();        try {          cookie.put(token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR)).toLowerCase(),token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length()));        } catch (        Exception e) {        }      }    }  }}  }
class C{  public TIntArrayList inverseGrep(TIntProcedure condition){  TIntArrayList list=new TIntArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200719,skillcaster,num0,skillname);}  }
class C{  private void computeHash(ClassMapper.EntryField[] fields) throws MarshalException {  hash=0;  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(new OptimizedByteArrayOutputStream(127),md));    if (superclass != null)     out.writeLong(superclass.hash);    out.writeUTF(name);    int startDeclaredFields=superclass != null ? superclass.numFields : 0;    for (int i=startDeclaredFields; i < fields.length; i++) {      out.writeUTF(fields[i].field.getName());      out.writeUTF(fields[i].field.getType().getName());    }    out.flush();    byte[] digest=md.digest();    for (int i=Math.min(8,digest.length); --i >= 0; ) {      hash+=((long)(digest[i] & 0xFF)) << (i * 8);    }  } catch (  Exception e) {    throw new MarshalException("Unable to calculate type hash for " + name,e);  }}  }
class C{  public LikesDeleteQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){  super(client,"likes.delete",DeleteResponse.class);  accessToken(actor.getAccessToken());  type(type);  itemId(itemId);}  }
class C{  public static void init(Properties conf){  if (conf.containsKey("db.driver")) {    DRIVER=conf.getProperty("db.driver");  }  if (conf.containsKey("db.url")) {    URL=conf.getProperty("db.url");  }  if (conf.containsKey("db.number")) {    MAX_ACTIVE_NUMBER=Integer.parseInt(conf.getProperty("db.number"));  }  if (conf.containsKey("db.validation.sql")) {    VALIDATION_SQL=conf.getProperty("db.validation.sql");  }  ds=new BasicDataSource();  ds.setDriverClassName(DRIVER);  ds.setUrl(URL);  if (USER != null)   ds.setUsername(USER);  if (PASSWD != null)   ds.setPassword(PASSWD);  ds.setMaxActive(MAX_ACTIVE_NUMBER);  ds.setMaxIdle(MAX_ACTIVE_NUMBER);  ds.setMaxWait(MAX_WAIT_TIME);  ds.setDefaultAutoCommit(true);  ds.setDefaultReadOnly(false);  ds.setValidationQuery(null);  ds.setPoolPreparedStatements(true);}  }
class C{  public Observable<EncounterResult> encounterPokemonAsync(){  if (encounterKind == EncounterKind.NORMAL) {    return encounterNormalPokemonAsync();  } else   if (encounterKind == EncounterKind.DISK) {    return encounterDiskPokemonAsync();  }  throw new IllegalStateException("Catchable pokemon missing encounter type");}  }
class C{  @Override public int read() throws IOException {  if (this.remaining == 0) {    return -1;  } else {    int var1=this.in.read();    if (var1 >= 0) {      --this.remaining;    }    return var1;  }}  }
class C{  public BaseResourceStorage createResourceStorage(BaseResource baseResource){  return new BaseResourceStorage(baseResource);}  }
class C{  protected static Dfp[] splitMult(final Dfp[] a,final Dfp[] b){  final Dfp[] result=new Dfp[2];  result[1]=a[0].getZero();  result[0]=a[0].multiply(b[0]);  if (result[0].classify() == Dfp.INFINITE || result[0].equals(result[1])) {    return result;  }  result[1]=a[0].multiply(b[1]).add(a[1].multiply(b[0])).add(a[1].multiply(b[1]));  return result;}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public DistributedLogClientBuilder redirectBackoffStartMs(int ms){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRedirectBackoffStartMs(ms);  return newBuilder;}  }
class C{  public static double computeInfoGain(Instances data,Attribute att) throws Exception {  double infoGain=computeEntropy(data);  Instances[] splitData=splitData(data,att);  for (int j=0; j < data.numDistinctValues(att); j++) {    if (splitData[j].numInstances() > 0) {      infoGain-=((double)splitData[j].numInstances() / (double)data.numInstances()) * computeEntropy(splitData[j]);    }  }  return infoGain;}  }
class C{  public TIntObjectIterator(TIntObjectHashMap<V> map){  super(map);  this._map=map;}  }
class C{  public Builder(){}  }
class C{  public static EnhancedBookmarkPage buildPage(Activity activity,Tab tab){  if (DeviceFormFactor.isTablet(activity))   return new EnhancedBookmarkPage(activity,tab); else   return null;}  }
class C{  public boolean contains(final Vector3D p){  return FastMath.abs(getOffset(p)) < tolerance;}  }
class C{  public void clear(String className) throws RemoteException, TransactionException, UnusableEntryException {  _remoteSpaceProxy.clear(createTemplate(className),null);}  }
class C{  public void addRecognizedParamsAndSetDefaults(XMLComponent component,XSGrammarPoolContainer grammarContainer){  final String[] recognizedFeatures=component.getRecognizedFeatures();  addRecognizedFeatures(recognizedFeatures);  final String[] recognizedProperties=component.getRecognizedProperties();  addRecognizedProperties(recognizedProperties);  setFeatureDefaults(component,recognizedFeatures,grammarContainer);  setPropertyDefaults(component,recognizedProperties);}  }
class C{  public UniqueValueStore(UniqueOrKey unique){  super(unique);}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null;}  }
class C{  private static void sendPacket(MulticastSocket mcSocket,DatagramPacket[] packet) throws IOException {  for (int i=0; i < packet.length; i++) {    mcSocket.send(packet[i]);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private static Node makeTree(@NotNull File root){  Node n=new Node();  n.name=root.getName();  n.existsOnDisk=root.exists();  if (root.isDirectory()) {    File[] children=root.listFiles();    if (children != null) {      for (      File f : children) {        if (!f.isHidden()) {          n.children.add(makeTree(f));        }      }    }  }  return n;}  }
class C{  @Override public String matchPredicateOperand(String alias){  Objects.requireNonNull(alias,"alias cannot be null");  return alias + "." + idFieldName;}  }
class C{  @Override public boolean resolveXPointer(QName element,XMLAttributes attributes,Augmentations augs,int event) throws XNIException {  boolean isShortHandPointerResolved=false;  if (fShortHandPointerName != null) {    isShortHandPointerResolved=fShortHandPointer.resolveXPointer(element,attributes,augs,event);    if (isShortHandPointerResolved) {      fIsResolveElement=true;      fIsShortHand=true;    } else {      fIsResolveElement=false;    }  } else {    fIsResolveElement=true;  }  if (fChildSequence.length > 0) {    fIsFragmentResolved=matchChildSequence(element,event);  } else   if (isShortHandPointerResolved && fChildSequence.length <= 0) {    fIsFragmentResolved=isShortHandPointerResolved;  } else {    fIsFragmentResolved=false;  }  return fIsFragmentResolved;}  }
class C{  public void discarded(DiscoveryEvent event){  DiscoveryListener l=get();  if (l != null) {    l.discarded(event);  }}  }
class C{  protected static void loadTransforms(ClassLoader loader,Properties props,Configuration config){  for (Iterator<Object> i=props.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    String className=props.getProperty(key);    if (Debug.verboseOn()) {      Debug.logVerbose("Adding FTL Transform " + key + " with class "+ className,module);    }    try {      config.setSharedVariable(key,loader.loadClass(className).newInstance());    } catch (    Exception e) {      Debug.logError(e,"Could not pre-initialize dynamically loaded class: " + className + ": "+ e,module);    }  }}  }
class C{  protected GroupsUnbanUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  @SuppressWarnings("unchecked") @EdmFunctionImport(name="ConfirmSalesOrder",entitySet="SalesOrderHeaders",returnType=@ReturnType(type=Type.ENTITY,isCollection=true)) public List<SalesOrderHeader> confirmSalesOrder(@EdmFunctionImportParameter(name="SalesOrderId") String salesOrderId) throws ODataException {  EntityManagerFactory emf=Utility.getEntityManagerFactory();  EntityManager em=emf.createEntityManager();  try {    Query query=em.createQuery("SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId =" + salesOrderId);    try {      SalesOrderHeader so=(SalesOrderHeader)query.getSingleResult();      em.getTransaction().begin();      so.setLifeCycleStatus("P");      so.setLifeCycleStatusName("In Process");      em.persist(so);      em.getTransaction().commit();      List<SalesOrderHeader> salesorderlist=null;      query=em.createQuery("SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId ='" + salesOrderId + "'");      salesorderlist=query.getResultList();      return salesorderlist;    } catch (    NoResultException e) {      throw new ODataApplicationException("No Sales Order with Sales Order Id:" + salesOrderId,Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);    }  }  finally {    em.close();  }}  }
class C{  private static boolean snapToVerticalAnchor(Point candidatePoint,ConstraintWidget widget,SnapCandidate candidate){  if (candidate.target == null) {    return false;  }  int y1=WidgetInteractionTargets.constraintHandle(candidate.source).getDrawY();  int y2=WidgetInteractionTargets.constraintHandle(candidate.target).getDrawY() + candidate.margin;  int distance=y2 - y1;  candidatePoint.y=widget.getDrawY() + distance;  return true;}  }
class C{  public EmailBuilder cc(List<String> ccAddresses){  this.cc.addAll(ccAddresses);  return this;}  }
class C{  public ArrayEnumeration(Object[] array){  this.array=array;}  }
class C{  public LegendreHighPrecisionParametricTest(int numberOfPoints,int maxDegree,double eps,double numUlps){  super(factory.legendreHighPrecision(numberOfPoints),maxDegree,eps,numUlps);}  }
class C{  public DataIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean isWifiConnected(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  return cm != null && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  public String toString(){  String sEncoding="";  if (getEncoding() != null) {    sEncoding=getEncoding().toString() + " ";  }  String sSampleRate;  if (getSampleRate() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleRate="unknown sample rate, ";  } else {    sSampleRate="" + getSampleRate() + " Hz, ";  }  String sSampleSizeInBits;  if (getSampleSizeInBits() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleSizeInBits="unknown bits per sample, ";  } else {    sSampleSizeInBits="" + getSampleSizeInBits() + " bit, ";  }  String sChannels;  if (getChannels() == 1) {    sChannels="mono, ";  } else   if (getChannels() == 2) {    sChannels="stereo, ";  } else {    if (getChannels() == AudioSystem.NOT_SPECIFIED) {      sChannels=" unknown number of channels, ";    } else {      sChannels="" + getChannels() + " channels, ";    }  }  String sFrameSize;  if (getFrameSize() == (float)AudioSystem.NOT_SPECIFIED) {    sFrameSize="unknown frame size, ";  } else {    sFrameSize="" + getFrameSize() + " bytes/frame, ";  }  String sFrameRate="";  if (Math.abs(getSampleRate() - getFrameRate()) > 0.00001) {    if (getFrameRate() == (float)AudioSystem.NOT_SPECIFIED) {      sFrameRate="unknown frame rate, ";    } else {      sFrameRate=getFrameRate() + " frames/second, ";    }  }  String sEndian="";  if ((getEncoding().equals(Encoding.PCM_SIGNED) || getEncoding().equals(Encoding.PCM_UNSIGNED)) && ((getSampleSizeInBits() > 8) || (getSampleSizeInBits() == AudioSystem.NOT_SPECIFIED))) {    if (isBigEndian()) {      sEndian="big-endian";    } else {      sEndian="little-endian";    }  }  return sEncoding + sSampleRate + sSampleSizeInBits+ sChannels+ sFrameSize+ sFrameRate+ sEndian;}  }
class C{  public void onScrollToClose(){}  }
class C{  public void reset(){  is_Dead=false;  Un_Dead_Cult=500;  is_Un_Dead=true;}  }
class C{  @Override public boolean validateLabel(String label){  return true;}  }
class C{  protected void onDelete(ActivitiEvent event){}  }
class C{  public void put(long index,int value){  final int segment=(int)(index >>> SEGMENT_BITS);  final int position=(int)(index & SEGMENT_MASK);  final int old=segments[segment][position];  if (old == 0) {    if (value != 0) {      segments[segment][position]=value;      numberOfNonZeroEntries++;    }  } else {    segments[segment][position]=value;    if (value == 0)     numberOfNonZeroEntries--;  }  maxIndex=Math.max(maxIndex,index);}  }
class C{  public void clear(){  maxValue=0L;  minValue=Long.MAX_VALUE;  for (int i=0, size=counts.length; i < size; i++) {    counts[i]=0L;  }}  }
class C{  public int length(){  return NGramHistogram.size();}  }
class C{  public void removeUpdateListener(final BaseListener<? extends Tag> pListener){  listeners.remove(pListener);}  }
class C{  private static int[][] successors(final List<Vector3D> vertices,final List<int[]> facets,final int[][] references){  final int[][] successors=new int[vertices.size()][references[0].length];  for (  final int[] s : successors) {    Arrays.fill(s,-1);  }  for (int v=0; v < vertices.size(); ++v) {    for (int k=0; k < successors[v].length && references[v][k] >= 0; ++k) {      final int[] facet=facets.get(references[v][k]);      int i=0;      while (i < facet.length && facet[i] != v) {        ++i;      }      successors[v][k]=facet[(i + 1) % facet.length];      for (int l=0; l < k; ++l) {        if (successors[v][l] == successors[v][k]) {          final Vector3D start=vertices.get(v);          final Vector3D end=vertices.get(successors[v][k]);          throw new MathIllegalArgumentException(LocalizedGeometryFormats.FACET_ORIENTATION_MISMATCH,start.getX(),start.getY(),start.getZ(),end.getX(),end.getY(),end.getZ());        }      }    }  }  return successors;}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  @Override public void readCatalog(Catalog catalog,InputStream is) throws IOException, CatalogException {  DocumentBuilderFactory factory=null;  DocumentBuilder builder=null;  factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(false);  factory.setValidating(false);  try {    builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException pce) {    throw new CatalogException(CatalogException.UNPARSEABLE);  }  Document doc=null;  try {    doc=builder.parse(is);  } catch (  SAXException se) {    throw new CatalogException(CatalogException.UNKNOWN_FORMAT);  }  Element root=doc.getDocumentElement();  String namespaceURI=Namespaces.getNamespaceURI(root);  String localName=Namespaces.getLocalName(root);  String domParserClass=getCatalogParser(namespaceURI,localName);  if (domParserClass == null) {    if (namespaceURI == null) {      catalog.getCatalogManager().debug.message(1,"No Catalog parser for " + localName);    } else {      catalog.getCatalogManager().debug.message(1,"No Catalog parser for " + "{" + namespaceURI + "}"+ localName);    }    return;  }  DOMCatalogParser domParser=null;  try {    domParser=(DOMCatalogParser)Class.forName(domParserClass).newInstance();  } catch (  ClassNotFoundException cnfe) {    catalog.getCatalogManager().debug.message(1,"Cannot load XML Catalog Parser class",domParserClass);    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  InstantiationException ie) {    catalog.getCatalogManager().debug.message(1,"Cannot instantiate XML Catalog Parser class",domParserClass);    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  IllegalAccessException iae) {    catalog.getCatalogManager().debug.message(1,"Cannot access XML Catalog Parser class",domParserClass);    throw new CatalogException(CatalogException.UNPARSEABLE);  }catch (  ClassCastException cce) {    catalog.getCatalogManager().debug.message(1,"Cannot cast XML Catalog Parser class",domParserClass);    throw new CatalogException(CatalogException.UNPARSEABLE);  }  Node node=root.getFirstChild();  while (node != null) {    domParser.parseCatalogEntry(catalog,node);    node=node.getNextSibling();  }}  }
class C{  public synchronized void createTableWithIndices(Schema s,String tableName,List<String> indexColumns) throws DatabaseException {  if (this.tableLookup.containsKey(tableName)) {    throw new DatabaseException("Table name already exists");  }  List<String> schemaColNames=s.getFieldNames();  List<DataType> schemaColType=s.getFieldTypes();  HashSet<String> seenColNames=new HashSet<String>();  List<Integer> schemaColIndex=new ArrayList<Integer>();  for (int i=0; i < indexColumns.size(); i++) {    String col=indexColumns.get(i);    if (!schemaColNames.contains(col)) {      throw new DatabaseException("Column desired for index does not exist");    }    if (seenColNames.contains(col)) {      throw new DatabaseException("Column desired for index has been duplicated");    }    seenColNames.add(col);    schemaColIndex.add(schemaColNames.indexOf(col));  }  this.tableLookup.put(tableName,new Table(s,tableName,this.fileDir));  for (  int i : schemaColIndex) {    String colName=schemaColNames.get(i);    DataType colType=schemaColType.get(i);    String indexName=tableName + "," + colName;    this.indexLookup.put(indexName,new BPlusTree(colType,indexName,this.fileDir));  }}  }
class C{  private double mean(double[] vec){  double result=0;  for (int i=0; i < vec.length; i++)   result+=vec[i];  return result / vec.length;}  }
class C{  private void unsubscribeRecord(){  if (this.record == null || this.record.isDestroyed()) {    return;  }  for (  Subscription subscription : this.subscriptions) {    if (subscription.recordPathChangedCallback != null) {      this.record.unsubscribe(subscription.path,subscription.recordPathChangedCallback);    } else     if (subscription.recordChangedCallback != null) {      this.record.unsubscribe(subscription.recordChangedCallback);    }  }  this.record.discard();}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public <T>T dataFromResource(String resourceName,Class<T> clazz){  return json2Data(readResource(resourceName),clazz);}  }
class C{  public Map<String,Object> send(String url,Map<String,Object> request) throws HttpClientException {  if (debug) {    Debug.logInfo("Request : " + url + " / "+ request,module);  }  String timeoutString=(String)props.get("payment.valuelink.timeout");  int timeout=34;  try {    timeout=Integer.parseInt(timeoutString);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeoutString + " using default "+ timeout);  }  HttpClient client=new HttpClient(url,request);  client.setTimeout(timeout * 1000);  client.setDebug(debug);  client.setClientCertificateAlias((String)props.get("payment.valuelink.certificateAlias"));  String response=client.post();  return this.parseResponse(response);}  }
class C{  public Vector2D[] generate(int n){  final Vector2D[] cloud=new Vector2D[n];  for (int i=0; i < n; i++) {    cloud[i]=create();  }  return cloud;}  }
class C{  public void delete(String id){  log.debug("Request to delete Pet : {}",id);  petRepository.delete(UUID.fromString(id));}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);    if (right >= image.getWidth()) {      throw NotFoundException.getNotFoundInstance();    }  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public void handleData(ByteString bytes){  this.data=bytes;}  }
class C{  @Override public void run(Timeout timeout) throws Exception {  if (timeout.isCancelled()) {    return;  }  long timeToWaitMs;synchronized (this) {    OpSendMsg firstMsg=pendingMessages.peek();    if (firstMsg == null) {      timeToWaitMs=conf.getSendTimeoutMs();    } else {      long diff=(firstMsg.createdAt + conf.getSendTimeoutMs()) - System.currentTimeMillis();      if (diff <= 0) {        log.info("[{}] [{}] Message send timed out. Failing {} messages",topic,producerName,pendingMessages.size());        PulsarClientException te=new PulsarClientException.TimeoutException("Could not send message to broker within given timeout");        failPendingMessages(cnx(),te);        stats.incrementSendFailed(pendingMessages.size());        timeToWaitMs=conf.getSendTimeoutMs();      } else {        timeToWaitMs=diff;      }    }  }  sendTimeout=client.timer().newTimeout(this,timeToWaitMs,TimeUnit.MILLISECONDS);}  }
class C{  protected synchronized String resolveLocalPublic(int entityType,String entityName,String publicId,String systemId) throws IOException {  publicId=PublicId.normalize(publicId);  if (systemId != null) {    String resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  boolean over=default_override;  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == OVERRIDE) {      over=e.getEntryArg(0).equalsIgnoreCase("YES");      continue;    }    if (e.getEntryType() == PUBLIC && e.getEntryArg(0).equals(publicId)) {      if (over || systemId == null) {        return e.getEntryArg(1);      }    }  }  over=default_override;  en=catalogEntries.elements();  Vector delCats=new Vector();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == OVERRIDE) {      over=e.getEntryArg(0).equalsIgnoreCase("YES");      continue;    }    if (e.getEntryType() == DELEGATE_PUBLIC && (over || systemId == null)) {      String p=e.getEntryArg(0);      if (p.length() <= publicId.length() && p.equals(publicId.substring(0,p.length()))) {        delCats.addElement(e.getEntryArg(1));      }    }  }  if (delCats.size() > 0) {    Enumeration enCats=delCats.elements();    if (catalogManager.debug.getDebug() > 1) {      catalogManager.debug.message(2,"Switching to delegated catalog(s):");      while (enCats.hasMoreElements()) {        String delegatedCatalog=(String)enCats.nextElement();        catalogManager.debug.message(2,"\t" + delegatedCatalog);      }    }    Catalog dcat=newCatalog();    enCats=delCats.elements();    while (enCats.hasMoreElements()) {      String delegatedCatalog=(String)enCats.nextElement();      dcat.parseCatalog(delegatedCatalog);    }    return dcat.resolvePublic(publicId,null);  }  return null;}  }
class C{  public void pixelsToValue(float[] pixels){  Matrix tmp=mPixelsToValueMatrixBuffer;  tmp.reset();  mMatrixOffset.invert(tmp);  tmp.mapPoints(pixels);  mViewPortHandler.getMatrixTouch().invert(tmp);  tmp.mapPoints(pixels);  mMatrixValueToPx.invert(tmp);  tmp.mapPoints(pixels);}  }
class C{  private void sendIntroductionResponse(Peer peer,Peer invitee) throws IOException {  List<Peer> pexPeers=new ArrayList<>();  for (  Peer p : peerList) {    if (p.hasReceivedData() && p.getPeerId() != null && p.isAlive())     pexPeers.add(p);  }  IntroductionResponse response=new IntroductionResponse(hashId,internalSourceAddress,peer.getAddress(),invitee,connectionType,pexPeers,networkOperator);  sendMesssage(response,peer);}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  @Override public String toString(){  StringBuilder str=new StringBuilder();  str.append("class = \"" + getTierClass() + "\" \n");  str.append("name = \"" + getName() + "\" \n");  str.append("xmin = " + getXmin() + " \n");  str.append("xmax = " + getXmax() + " \n");  str.append("intervals: size = " + getNumberOfIntervals() + " \n");  for (int i=0; i < getNumberOfIntervals(); i++) {    str.append("intervals [" + (i + 1) + "]:\n");    str.append(getInterval(i).toString());  }  return str.toString();}  }
class C{  public static MatchBlockRMA2 read(RMA2Formatter rma2Formatter,long uid,boolean wantMatchData,boolean wantMatchText,float minScore,float maxExpected,TextStorageReader textReader,IInputReader dataIndexReader) throws IOException {  MatchBlockRMA2 matchBlock=rma2Formatter.isWantLocationData() ? new MatchBlockFromBlast() : new MatchBlockRMA2();  if (uid == -1)   uid=dataIndexReader.getPosition(); else   dataIndexReader.seek(uid);  if (!wantMatchData && (minScore > 0 || maxExpected < 10000))   wantMatchData=true;  if (wantMatchData) {    matchBlock.setUId(uid);    MatchBlockRMA2Formatter matchBlockFormatter=rma2Formatter.getMatchBlockRMA2Formatter();    matchBlockFormatter.read(dataIndexReader);    if (matchBlockFormatter.hasBitScore())     matchBlock.setBitScore(matchBlockFormatter.getBitScore());    if (matchBlockFormatter.hasExpected())     matchBlock.setExpected(matchBlockFormatter.getExpected());    if (matchBlockFormatter.hasPercentIdentity())     matchBlock.setPercentIdentity(matchBlockFormatter.getPercentIdentity());    if (matchBlockFormatter.hasTaxonId())     matchBlock.setTaxonId(matchBlockFormatter.getTaxonId());    if (matchBlockFormatter.hasSeedId())     matchBlock.setId(SEED,matchBlockFormatter.getSeedId());    if (matchBlockFormatter.hasCogId())     matchBlock.setId(COG,matchBlockFormatter.getCogId());    if (matchBlockFormatter.hasKeggId())     matchBlock.setId(KEGG,matchBlockFormatter.getKeggId());    if (matchBlockFormatter.hasRefSeqId())     matchBlock.setRefSeqId(matchBlockFormatter.getRefSeqId().toString());    if (matchBlock.getBitScore() < minScore || matchBlock.getExpected() > maxExpected) {      dataIndexReader.skipBytes(14);      return null;    }  } else {    dataIndexReader.skipBytes(rma2Formatter.getMatchBlockRMA2Formatter().getNumberOfBytes());  }  if (wantMatchText) {    final Location location=new Location(dataIndexReader.readChar(),dataIndexReader.readLong(),dataIndexReader.readInt());    matchBlock.setText(textReader.getText(location));    if (rma2Formatter.isWantLocationData()) {      ((MatchBlockFromBlast)matchBlock).setTextLocation(location);    }  } else   dataIndexReader.skipBytes(14);  return matchBlock;}  }
class C{  public IEProxyConfig readIEProxyConfig(){  WinHttpCurrentUserIEProxyConfig winHttpCurrentUserIeProxyConfig=new WinHttpCurrentUserIEProxyConfig();  boolean result=WinHttp.INSTANCE.WinHttpGetIEProxyConfigForCurrentUser(winHttpCurrentUserIeProxyConfig);  if (!result) {    return null;  }  return new IEProxyConfig(winHttpCurrentUserIeProxyConfig.fAutoDetect,winHttpCurrentUserIeProxyConfig.lpszAutoConfigUrl != null ? winHttpCurrentUserIeProxyConfig.lpszAutoConfigUrl.getValue() : null,winHttpCurrentUserIeProxyConfig.lpszProxy != null ? winHttpCurrentUserIeProxyConfig.lpszProxy.getValue() : null,winHttpCurrentUserIeProxyConfig.lpszProxyBypass != null ? winHttpCurrentUserIeProxyConfig.lpszProxyBypass.getValue() : null);}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  public void performanceTest() throws SecurityException, NoSuchMethodException {  realisticProcessor=createMock(RealisticProcessor.class);  Method method=RealisticProcessor.class.getMethod("processUpdate",new Class<?>[]{Object.class});  threadHandler=new ThreadHandler(realisticProcessor,method);  threadHandler.start();  Object parameterObject=new Object();  parameterArray=new Object[]{parameterObject};  realisticProcessor.processUpdate(parameterObject);  expectLastCall().times(1000000);  replay(realisticProcessor);  for (int i=0; i < 1000000; i++) {    threadHandler.put(parameterArray);  }  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  verify(realisticProcessor);  threadHandler.shutdown();}  }
class C{  protected PlacesGetByIdQuery places(int... value){  return unsafeParam("places",value);}  }
class C{  public MessagesSetActivityQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  public static void printToFile(String filename,String message,boolean append){  printToFile(new File(filename),message,append);}  }
class C{  public static double[] computeLogAmplitudeSpectrum_FD(final double[] fft){  double[] spectrum=computeAmplitudeSpectrum_FD(fft);  for (int i=0; i < spectrum.length; i++) {    spectrum[i]=Math.log(spectrum[i]);  }  return spectrum;}  }
class C{  public int size(){  return counterMap.size();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set show-insertions=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.setShowInsertions(show);}  }
class C{  public CallableDistributedTaskAdapter(Callable<T> callable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(callable);  this.reducer=reducer;  this.filter=filter;}  }
class C{  @Deprecated public Builder enablePermissive(){  return this;}  }
class C{  private ItemStack dumpContainer(IBlockSource source,ItemStack stack){  ItemStack dispensedStack=stack.copy();  dispensedStack.stackSize=1;  IFluidHandler fluidHandler=FluidUtil.getFluidHandler(dispensedStack);  if (fluidHandler == null) {    return super.dispenseStack(source,stack);  }  FluidStack fluidStack=fluidHandler.drain(Fluid.BUCKET_VOLUME,false);  EnumFacing dispenserFacing=source.func_189992_e().getValue(BlockDispenser.FACING);  BlockPos blockpos=source.getBlockPos().offset(dispenserFacing);  if (fluidStack != null && fluidStack.amount == Fluid.BUCKET_VOLUME && FluidUtil.tryPlaceFluid(null,source.getWorld(),fluidStack,blockpos)) {    if (fluidStack.getFluid() == FluidRegistry.WATER) {      source.getWorld().setBlockState(blockpos,Blocks.FLOWING_WATER.getStateFromMeta(2));      for (      EnumFacing face : EnumFacing.HORIZONTALS) {        BlockPos off=blockpos.offset(face);        if (source.getWorld().isAirBlock(off) || source.getWorld().getBlockState(off).getBlock().isReplaceable(source.getWorld(),off))         source.getWorld().setBlockState(off,Blocks.FLOWING_WATER.getStateFromMeta(5));      }    }    fluidHandler.drain(Fluid.BUCKET_VOLUME,true);    if (--stack.stackSize == 0) {      stack.deserializeNBT(dispensedStack.serializeNBT());    } else     if (((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(dispensedStack) < 0) {      this.dispenseBehavior.dispense(source,dispensedStack);    }    return stack;  } else {    return this.dispenseBehavior.dispense(source,stack);  }}  }
class C{  private void sendCharactersToValidator(String str){  if (str != null) {    final int length=str.length();    final int remainder=length & CHUNK_MASK;    if (remainder > 0) {      str.getChars(0,remainder,fCharBuffer,0);      fTempString.setValues(fCharBuffer,0,remainder);      fSchemaValidator.characters(fTempString,null);    }    int i=remainder;    while (i < length) {      str.getChars(i,i+=CHUNK_SIZE,fCharBuffer,0);      fTempString.setValues(fCharBuffer,0,CHUNK_SIZE);      fSchemaValidator.characters(fTempString,null);    }  }}  }
class C{  public void init(Table t,Graph g,Class tupleType){  if (m_table != null) {    throw new IllegalStateException("This TupleManager has already been initialized");  }  m_table=t;  m_graph=g;  m_tupleType=tupleType;  m_tuples=null;}  }
class C{  public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200974,skilltarget,skillcaster,skillname);}  }
class C{  private static Stream<QueryParam> extractQueryParameters(Method method){  return Stream.of(method.getParameterAnnotations()).flatMap(null).filter(null).map(null);}  }
class C{  public static void destroyInstance(){  instance=null;}  }
class C{  public DefaultTable(){  this.values=new TraversableHashMap<>();}  }
class C{  static int hash(Object[] elements){  int h=0;  for (int i=elements.length; --i >= 0; ) {    h+=elements[i].hashCode();  }  return h;}  }
class C{  public SQLQuery(Class<T> type,String sqlExpression){  this(sqlExpression,type.getName(),null,DEFAULT_QUERY_RESULT_TYPE,null);}  }
class C{  public static Map<Tuple2<String,String>,Integer> headDependentMap(List<DependencyGraph> graphs){  Map<Tuple2<String,String>,Integer> map=new HashMap<Tuple2<String,String>,Integer>();  for (  DependencyGraph graph : graphs) {    Integer[] heads=graph.getHeads();    Sentence sentence=graph.getSentence();    for (int j=0; j < heads.length; j++) {      String dependentTag=sentence.getTag(j);      if (heads[j] >= 0) {        String headTag=sentence.getTag(heads[j]);        Tuple2<String,String> tuple=new Tuple2<String,String>(headTag,dependentTag);        if (map.get(tuple) == null) {          map.put(tuple,1);        } else {          map.put(tuple,map.get(tuple) + 1);        }      }    }  }  return map;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ZHISHU\" ("+ "\"AREAID\" TEXT,"+ "\"NAME\" TEXT,"+ "\"LEVEL\" TEXT,"+ "\"TEXT\" TEXT,"+ "\"DETAIL\" TEXT);");}  }
class C{  public static boolean isValidData(String data,DataType actualDataType){  if (null == data) {    return false;  }  try {switch (actualDataType) {case SHORT:case INT:case LONG:case DOUBLE:case DECIMAL:      return NumberUtils.isNumber(data);case TIMESTAMP:    if (data.isEmpty()) {      return false;    }  SimpleDateFormat parser=new SimpleDateFormat(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));try {  parser.parse(data);  return true;} catch (ParseException e) {  return false;}default :return true;}} catch (NumberFormatException ex) {return false;}}  }
class C{  public ClassSource find(String className){  String fileName=className + ".jimple";  SourceLocator.FoundFile file=SourceLocator.v().lookupInClassPath(fileName);  if (file == null)   return null;  return new JimpleClassSource(className,file.inputStream());}  }
class C{  @Override public boolean validateLabel(String label){  Objects.requireNonNull(label,"label cannot be null");  return !labels.contains(label);}  }
class C{  protected void insertToken(Item tokenItem,Element parent){  insertToken(tokenItem,parent,false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200486,skilltarget,skillname);}  }
class C{  @RequestMapping(value=ClientUris.SERVER_ROUTE,method=RequestMethod.GET) public ServerRouteResp route(@RequestParam("appName") String appName,@RequestParam("clientPid") Integer clientPid,HttpServletRequest req){  Response<ServerRouteResp> routeResp=clusterService.routeServer(appName,req.getRemoteAddr(),clientPid);  if (!routeResp.isSuccess()) {    return null;  }  return routeResp.getData();}  }
class C{  private Control createGeneralDecoratorPage(Composite parent){  Composite composite=new Composite(parent,SWT.NULL);  GridLayout layout=new GridLayout();  composite.setLayout(layout);  GridData data=new GridData();  data.horizontalAlignment=GridData.FILL;  composite.setLayoutData(data);  SWTUtils.createPreferenceLink((IWorkbenchPreferenceContainer)getContainer(),composite,"org.eclipse.ui.preferencePages.Decorators",Policy.bind("SVNDecoratorPreferencesPage.labelDecorationsLink"));  showDirty=createCheckBox(composite,Policy.bind("SVNDecoratorPreferencesPage.computeDeep"));  enableFontDecorators=createCheckBox(composite,Policy.bind("SVNDecoratorPreferencesPage.useFontDecorators"));  SWTUtils.createPreferenceLink((IWorkbenchPreferenceContainer)getContainer(),composite,"org.eclipse.ui.preferencePages.ColorsAndFonts",Policy.bind("SVNDecoratorPreferencesPage.colorsAndFontsLink"));  return composite;}  }
class C{  void saveRotationState(@NonNull ContentResolver contentResolver){  try {    originalAccelerometer=Settings.System.getInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION);  } catch (  Settings.SettingNotFoundException e) {    Log.d(TAG,"Could not read accelerometer rotation setting: " + e.getMessage());  }  try {    originalUserRotation=Settings.System.getInt(contentResolver,Settings.System.USER_ROTATION);  } catch (  Settings.SettingNotFoundException e) {    Log.d(TAG,"Could not read user rotation setting: " + e.getMessage());  }  Settings.System.putInt(contentResolver,Settings.System.USER_ROTATION,Surface.ROTATION_0);  Settings.System.putInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION,0);}  }
class C{  public SM_MACRO_LIST(Player player){  this.player=player;}  }
class C{  public boolean isControl(){  return isControl(metadata);}  }
class C{  public CM_CHARACTER_LIST(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public boolean loadConfiguration(final String configurationFile){  try {    final InputStream is=FileUtils.loadFileByName(configurationFile);    configuration=(MqttSpyDaemonConfiguration)parser.loadFromInputStream(is);    populateDefaults();    return true;  } catch (  XMLException e) {    logger.error("Cannot process the configuration from input stream",e);  }catch (  IOException e) {    logger.error("Cannot read the configuration from input stream",e);  }  return false;}  }
class C{  public void postPaint(Display d,Graphics2D g){  g.setFont(d.getFont());  g.setColor(d.getForeground());  g.drawString(PrefuseLib.getDisplayStats(d),5,15);}  }
class C{  public Pair<Integer,Integer> writeOverlapGraph(Writer w) throws IOException, CanceledException {  final NodeArray<String> names=new NodeArray<>(overlapGraph);  final NodeArray<String> sequences=new NodeArray<>(overlapGraph);  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {    ReadData readData=readId2ReadData[(Integer)v.getInfo()];    sequences.set(v,readData.getSegment());    names.set(v,readData.getName());  }  final Map<String,NodeArray<?>> label2nodes=new TreeMap<>();  label2nodes.put("label",names);  label2nodes.put("sequence",sequences);  final EdgeArray<Integer> overlap=new EdgeArray<>(overlapGraph);  for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {    overlap.set(e,(Integer)e.getInfo());  }  final Map<String,EdgeArray<?>> label2edges=new TreeMap<>();  label2edges.put("label",null);  label2edges.put("overlap",overlap);  overlapGraph.writeGML(w,"Overlap graph generated by MEGAN6",true,label,1,label2nodes,label2edges);  return new Pair<>(this.overlapGraph.getNumberOfNodes(),this.overlapGraph.getNumberOfEdges());}  }
class C{  public void outASTWhileNode(ASTWhileNode node){  if (nodeStack.isEmpty())   throw new RuntimeException("trying to remove node from empty stack: ClosestBreakTargetFinder");  nodeStack.remove(nodeStack.size() - 1);}  }
class C{  public CommandTagAdd(final long changeId,final long equipmentId,final SourceCommandTag sourceCommandTag){  setChangeId(changeId);  this.equipmentId=equipmentId;  this.sourceCommandTag=sourceCommandTag;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @Override public boolean exclude(String identifier){  return !whitelist.contains(identifier);}  }
class C{  private static Collector<SegmentInfo,?,Map<String,SegmentInfo>> partitionsToMapCollector(){  return Collector.of(null,null,null);}  }
class C{  protected MarketRestoreCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  public static String replaceUnicodeEmojis(String s){  if (TextUtils.isEmpty(s)) {    return "";  }  for (int i=0; i < s.length(); i++) {    String key=s.substring(i,i + 1);    if ((Character.isLowSurrogate(key.charAt(0)) || Character.isHighSurrogate(key.charAt(0))) && s.length() > i + 1) {      key=s.substring(i,i + 2);    }    String emoji=UNICODE_TO_CHEAT_SHEET.get(key);    if (null != emoji) {      s=s.replace(key,emoji);    }  }  return s;}  }
class C{  private ComboMenu createMenu(List<ValueComboBoxDataGroup> listAll){  ComboMenu menu=new ComboMenu("");  for (  ValueComboBoxDataGroup group : listAll) {    if (group.isSubMenu()) {      JMenu subMenu=new JMenu(group.getGroupName());      for (      ValueComboBoxData data : group.getDataList()) {        ComboMenuItem menuItem=new ComboMenuItem(data);        subMenu.add(menuItem);        dataMap.put(data.getKey(),data);        if (firstValue == null) {          firstValue=data;        }      }      menu.add(subMenu);    } else {      for (      ValueComboBoxData data : group.getDataList()) {        ComboMenuItem menuItem=new ComboMenuItem(data);        menu.add(menuItem);        dataMap.put(data.getKey(),data);        if (firstValue == null) {          firstValue=data;        }      }    }  }  return menu;}  }
class C{  public String[] build(TimedTextObject tto){  if (!tto.isBuilt()) {    return null;  }  int index=0;  ArrayList<String> file=new ArrayList<>(20 + 2 * tto.getCaptions().size());  file.add(index++,"Scenarist_SCC V1.0\n");  String line;  Caption oldC;  Caption newC=new Caption();  newC.setEnd(new Time("h:mm:ss.cs","0:00:00.00"));  Iterator<Caption> itrC=tto.getCaptions().values().iterator();  while (itrC.hasNext()) {    line="";    oldC=newC;    newC=itrC.next();    if (oldC.getEnd().getMseconds() > newC.getStart().getMseconds()) {      newC.setContent(newC.getContent() + "<br />" + oldC.getContent());      newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));      line+=newC.getStart().getTime("hh:mm:ss:ff/29.97") + "\t942c 942c ";      newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));      line+="94ae 94ae 9420 9420 ";    } else     if (oldC.getEnd().getMseconds() < newC.getStart().getMseconds()) {      line+=oldC.getEnd().getTime("hh:mm:ss:ff/29.97") + "\t942c 942c\n\n";      newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));      line+=newC.getStart().getTime("hh:mm:ss:ff/29.97") + "\t94ae 94ae 9420 9420 ";      newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));    } else {      newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));      line+=newC.getStart().getTime("hh:mm:ss:ff/29.97") + "\t942c 942c 94ae 94ae 9420 9420 ";      newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));    }    line+=codeText(newC);    line+="8080 8080 942f 942f\n";    file.add(index++,line);  }  file.add(index++,"");  return file.toArray(new String[0]);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200860,skillcaster,skillname);}  }
class C{  NewProjectDescriptor withPackageName(@NotNull String pkg){  myPkg=pkg;  return this;}  }
class C{  public IEntryPacket toEntry(Object object) throws RemoteException, UnusableEntryException, UnknownTypeException {  if (object == null)   return null;  if (object instanceof SpaceMapEntry)   return _converter.toInternal(object);  if (object instanceof Map.Entry) {    Map.Entry entry=(Map.Entry)object;    SpaceMapEntry envelope=MapEntryFactory.create(entry.getKey(),entry.getValue());    return _converter.toInternal(envelope);  }  if (_converter != null)   return _converter.toInternal(object);  return null;}  }
class C{  public static Predicate<String> isNotEmpty(){  return null;}  }
class C{  @PostConstruct public void automaticBrokerStart() throws Exception {  createAndStartBroker();}  }
class C{  public static long parseLong(String text) throws DataParseException {  try {    if (text.length() > 0) {      char c=text.charAt(text.length() - 1);      if (c == 'l' || c == 'L')       text=text.substring(0,text.length() - 1);    }    return Long.parseLong(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  private static DataFlavor[] convertToArray(List<DataFlavor> dataFlavourList){  DataFlavor[] array=new DataFlavor[dataFlavourList.size()];  dataFlavourList.toArray(array);  return array;}  }
class C{  public void awaitCompletion(long timeout,TimeUnit unit) throws InterruptedException {  numRunningTasks.awaitZero(timeout,unit);}  }
class C{  private PolynomialSplineFunction interpolateHermiteSorted(double[] xvals,double[] yvals,double[] firstDerivatives){  MathArrays.checkEqualLength(xvals,yvals);  MathArrays.checkEqualLength(xvals,firstDerivatives);  final int minimumLength=2;  if (xvals.length < minimumLength) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,xvals.length,minimumLength,true);  }  final int size=xvals.length - 1;  final PolynomialFunction[] polynomials=new PolynomialFunction[size];  final double[] coefficients=new double[4];  for (int i=0; i < polynomials.length; i++) {    final double w=xvals[i + 1] - xvals[i];    final double w2=w * w;    final double yv=yvals[i];    final double yvP=yvals[i + 1];    final double fd=firstDerivatives[i];    final double fdP=firstDerivatives[i + 1];    coefficients[0]=yv;    coefficients[1]=firstDerivatives[i];    coefficients[2]=(3 * (yvP - yv) / w - 2 * fd - fdP) / w;    coefficients[3]=(2 * (yv - yvP) / w + fd + fdP) / w2;    polynomials[i]=new PolynomialFunction(coefficients);  }  return new PolynomialSplineFunction(xvals,polynomials);}  }
class C{  public boolean isOrHasSuperclass(@NotNull String className){  if (viewInfo != null) {    Object viewObject=viewInfo.getViewObject();    Class<?> viewClass=viewObject.getClass();    while (viewClass != Object.class) {      if (className.equals(viewClass.getName())) {        return true;      }      viewClass=viewClass.getSuperclass();    }  }  return false;}  }
class C{  public void error(String message){  fail();  addLogEntry(new ErrorEntry(message));  addLogEntry(browserLogEntryCollector.getBrowserLogEntries());}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private void configureDecoder() throws IOException {  byte[] prefix=new byte[]{0x00,0x00,0x00,0x01};  ByteBuffer csd0=ByteBuffer.allocate(4 + mSPS.length + 4+ mPPS.length);  csd0.put(new byte[]{0x00,0x00,0x00,0x01});  csd0.put(mSPS);  csd0.put(new byte[]{0x00,0x00,0x00,0x01});  csd0.put(mPPS);  mDecoder=MediaCodec.createByCodecName(mDecoderName);  MediaFormat mediaFormat=MediaFormat.createVideoFormat(MIME_TYPE,mWidth,mHeight);  mediaFormat.setByteBuffer("csd-0",csd0);  mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,mDecoderColorFormat);  mDecoder.configure(mediaFormat,null,null,0);  mDecoder.start();  ByteBuffer[] decInputBuffers=mDecoder.getInputBuffers();  int decInputIndex=mDecoder.dequeueInputBuffer(1000000 / FRAMERATE);  if (decInputIndex >= 0) {    decInputBuffers[decInputIndex].clear();    decInputBuffers[decInputIndex].put(prefix);    decInputBuffers[decInputIndex].put(mSPS);    mDecoder.queueInputBuffer(decInputIndex,0,decInputBuffers[decInputIndex].position(),timestamp(),0);  } else {    if (VERBOSE)     Log.e(TAG,"No buffer available !");  }  decInputIndex=mDecoder.dequeueInputBuffer(1000000 / FRAMERATE);  if (decInputIndex >= 0) {    decInputBuffers[decInputIndex].clear();    decInputBuffers[decInputIndex].put(prefix);    decInputBuffers[decInputIndex].put(mPPS);    mDecoder.queueInputBuffer(decInputIndex,0,decInputBuffers[decInputIndex].position(),timestamp(),0);  } else {    if (VERBOSE)     Log.e(TAG,"No buffer available !");  }}  }
class C{  public void removeTag(String aName){  int tagIndex;  if ((tagIndex=searchForTag(aName)) != -1) {    mTagList.remove(tagIndex);  }}  }
class C{  private static int findeol(byte b[],int pos,int len){  int end=pos + len;  int i=pos;  while (i < end) {    if (b[i++] == '\n') {      return i - pos;    }  }  return -1;}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public SREntry(String internedSymbol,char[] ch,int offset,int length,SREntry next,int bucket,ReferenceQueue q){  super(new SREntryData(internedSymbol,ch,offset,length),q);  initialize(next,bucket);}  }
class C{  public VideoGetQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200408,num0,skillname);}  }
class C{  private void widgetModified(){  if (mWidget == null) {    return;  }  if (!mWidgetModified) {    mConstraintModel.getSelection().addModifiedWidget(mWidget);  }  mWidgetModified=true;  mConstraintModel.getDrawConstraintModels().forEach(null);  saveWidget();}  }
class C{  private void copyBlockPart(final T[] srcBlock,final int srcWidth,final int srcStartRow,final int srcEndRow,final int srcStartColumn,final int srcEndColumn,final T[] dstBlock,final int dstWidth,final int dstStartRow,final int dstStartColumn){  final int length=srcEndColumn - srcStartColumn;  int srcPos=srcStartRow * srcWidth + srcStartColumn;  int dstPos=dstStartRow * dstWidth + dstStartColumn;  for (int srcRow=srcStartRow; srcRow < srcEndRow; ++srcRow) {    System.arraycopy(srcBlock,srcPos,dstBlock,dstPos,length);    srcPos+=srcWidth;    dstPos+=dstWidth;  }}  }
class C{  public BlockId search(Constant searchKey,String leafFileName,int purpose){  if (purpose == BTreeIndex.READ)   return searchForRead(searchKey,leafFileName); else   if (purpose == BTreeIndex.INSERT)   return searchForInsert(searchKey,leafFileName); else   if (purpose == BTreeIndex.DELETE)   return searchForDelete(searchKey,leafFileName); else   throw new UnsupportedOperationException();}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public Queue queue(int concurrency){  return new Queue(this.executor_,concurrency);}  }
class C{  void remove(int key){  if (cache != null) {    cache.remove(key);  }}  }
class C{  private String makeSAM(String queryName,String refName,int referenceLength,float bitScore,float expect,int rawScore,float percentIdentity,int frame,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference){  final StringBuilder buffer=new StringBuilder();  buffer.append(queryName).append("\t");  buffer.append(0);  buffer.append("\t");  buffer.append(refName).append("\t");  buffer.append(referenceStart).append("\t");  buffer.append("255\t");  Utilities.appendCigar(alignedQuery,alignedReference,buffer);  buffer.append("\t");  buffer.append("*\t");  buffer.append("0\t");  buffer.append("0\t");  buffer.append(alignedQuery.replaceAll("-","")).append("\t");  buffer.append("*\t");  buffer.append(String.format("AS:i:%d\t",(int)Math.round(bitScore)));  buffer.append(String.format("NM:i:%d\t",Utilities.computeEditDistance(alignedQuery,alignedReference)));  buffer.append(String.format("ZL:i:%d\t",referenceLength));  buffer.append(String.format("ZR:i:%d\t",rawScore));  buffer.append(String.format("ZE:f:%g\t",expect));  buffer.append(String.format("ZI:i:%d\t",(int)Math.round(percentIdentity)));  if (frame != 0)   buffer.append(String.format("ZF:i:%d\t",frame));  buffer.append(String.format("ZS:i:%s\t",queryStart));  Utilities.appendMDString(alignedQuery,alignedReference,buffer);  return buffer.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_USE_ALREADY_HAVE_REWARD_ITEM(int rewardNameId,int objectNameId){  return new SM_SYSTEM_MESSAGE(1401396,new DescriptionId(rewardNameId),calculateNameId(objectNameId));}  }
class C{  public boolean isValidCurrent(){  return isValidCurrent(RecurrenceUtil.now());}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQ_CODE_SPEECH_INPUT:{      if (resultCode == RESULT_OK && null != data) {        ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);        sendMessage(result.get(0));      }      break;    }case CROP_PICTURE:{    if (resultCode == RESULT_OK && null != data) {      try {        Bundle extras=data.getExtras();        Bitmap thePic=extras.getParcelable("data");        ByteArrayOutputStream baos=new ByteArrayOutputStream();        thePic.compress(Bitmap.CompressFormat.JPEG,100,baos);        byte[] b=baos.toByteArray();        String encodedImage=Base64.encodeToString(b,Base64.DEFAULT);        PrefManager.putString(Constant.IMAGE_DATA,encodedImage);        setChatBackground();      } catch (      NullPointerException e) {        Log.d(TAG,e.getLocalizedMessage());      }    }    break;  }case SELECT_PICTURE:{  if (resultCode == RESULT_OK && null != data) {    Uri selectedImageUri=data.getData();    InputStream imageStream;    Bitmap selectedImage;    try {      cropCapturedImage(selectedImageUri);    } catch (    ActivityNotFoundException aNFE) {      showToast(getString(R.string.error_crop_not_supported));      try {        String[] filePathColumn={MediaStore.Images.Media.DATA};        Cursor cursor=getContentResolver().query(selectedImageUri,filePathColumn,null,null,null);        cursor.moveToFirst();        int columnIndex=cursor.getColumnIndex(filePathColumn[0]);        String picturePath=cursor.getString(columnIndex);        imageStream=getContentResolver().openInputStream(selectedImageUri);        selectedImage=BitmapFactory.decodeStream(imageStream);        ByteArrayOutputStream baos=new ByteArrayOutputStream();        selectedImage.compress(Bitmap.CompressFormat.JPEG,100,baos);        byte[] b=baos.toByteArray();        String encodedImage=Base64.encodeToString(b,Base64.DEFAULT);        PrefManager.putString(Constant.IMAGE_DATA,encodedImage);        cursor.close();        setChatBackground();      } catch (      FileNotFoundException e) {        e.printStackTrace();      }    }  }  break;}}}  }
class C{  private boolean checkIfExpressionContainsColumn(Expression expression){  if (expression instanceof ColumnExpression) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfExpressionContainsColumn(child)) {      return true;    }  }  return false;}  }
class C{  public boolean isMapEntry(){  return getProto().getOptions().getMapEntry();}  }
class C{  public CommonWebView(Context context){  this(context,null);}  }
class C{  public App(final CharSequence caller,final Boolean debug,final CharSequence applicationId,final Integer versionCode,final CharSequence flavor,final CharSequence buildType,final CharSequence versionName){  this.caller=caller;  this.debug=debug;  this.applicationId=applicationId;  this.versionCode=versionCode;  this.flavor=flavor;  this.buildType=buildType;  this.versionName=versionName;}  }
class C{  private boolean matchesPartPhoneNumber(Item tokenItem,String tokenVal){  String n_name=(String)tokenItem.findFeature("n.name");  String n_n_name=(String)tokenItem.findFeature("n.n.name");  String p_name=(String)tokenItem.findFeature("p.name");  String p_p_name=(String)tokenItem.findFeature("p.p.name");  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));}  }
class C{  public static final String roll(String isoString,String fmt,int field,boolean up) throws ParseException {  Calendar cal=GregorianCalendar.getInstance(TimeZone.getTimeZone("GMT"));  cal.setTime(stringToDate(isoString,fmt));  cal.roll(field,up);  return dateToString(cal.getTime(),fmt);}  }
class C{  public void loadReferences(boolean loadOnDemand) throws IOException {  if (references == null) {    try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){      ins.skip(getLocationOfBlockInFile(getRefNamesBlockIndex()));      initializeReferences((int)getDbSeqsUsed(),loadOnDemand);      if (loadOnDemand) {        for (int r=0; r < getDbSeqsUsed(); r++) {          if ((r & (referenceLocationChunkSize - 1)) == 0) {            referenceLocations[r >>> referenceLocationChunkBits]=ins.getPosition();          }          ins.skipNullTerminatedBytes();        }      } else {        for (int r=0; r < getDbSeqsUsed(); r++) {          setReference(r,ins.readNullTerminatedBytes().getBytes());        }      }      initializeRefLengths((int)getDbSeqsUsed());      for (int i=0; i < getDbSeqsUsed(); i++) {        setRefLength(i,ins.readInt());      }    }   }}  }
class C{  protected final void removeNode(PurityNode n){  Iterator it=edges.get(n).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    backEdges.remove(e.getTarget(),e);  }  it=backEdges.get(n).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    edges.remove(e.getSource(),e);  }  it=backLocals.get(n).iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    locals.remove(l,n);  }  ret.remove(n);  edges.remove(n);  backEdges.remove(n);  backLocals.remove(n);  nodes.remove(n);  paramNodes.remove(n);  globEscape.remove(n);  mutated.remove(n);}  }
class C{  public void renderSymbol(){  if (SelectedSymbol.getInstance().isValid()) {    StyledLayerDescriptor sld=SelectedSymbol.getInstance().getSld();    if (sld != null) {      String styleNameHeading=null;      if (showStyleName) {        if (!sld.layers().isEmpty()) {          StyledLayer styledLayer=sld.layers().get(0);          if (styledLayer != null) {            styleNameHeading=styledLayer.getName();          }        }        if (styleNameHeading == null) {          styleNameHeading="";        }      }      String filename=null;      if (showFilename) {        filename=SelectedSymbol.getInstance().getFilename();        if (filename == null) {          filename="";        }      }      BufferedImage bImage=legend.createLegend(sld,styleNameHeading,filename);      if (bImage != null) {        imageIcon=new ImageIcon(bImage);      } else {        imageIcon=null;      }      this.setIcon(imageIcon);    } else {      this.setIcon(null);    }  } else {    this.setIcon(null);  }  repaint();}  }
class C{  public Collection<HTMLToken> tokenizeHTML(){  List<HTMLToken> tokens=new ArrayList<HTMLToken>();  String nestedTags=nestedTagsRegex(6);  Pattern p=Pattern.compile("" + "(?s:<!(--.*?--\\s*)+>)" + "|"+ "(?s:<\\?.*?\\?>)"+ "|" + nestedTags + "",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(text);  int lastPos=0;  while (m.find()) {    if (lastPos < m.start()) {      tokens.add(HTMLToken.text(text.substring(lastPos,m.start())));    }    tokens.add(HTMLToken.tag(text.substring(m.start(),m.end())));    lastPos=m.end();  }  if (lastPos < text.length()) {    tokens.add(HTMLToken.text(text.substring(lastPos,text.length())));  }  return tokens;}  }
class C{  public Builder paddingBottomRight(Point paddingBottomRight){  this.paddingBottomRight=paddingBottomRight;  return this;}  }
class C{  public WeakConcurrentHashSet(){  delegate=new MapMaker().weakKeys().concurrencyLevel(Runtime.getRuntime().availableProcessors()).makeMap();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201201,skilltarget,num0,skillname);}  }
class C{  public void onDirectoryDelete(final File directory){}  }
class C{  @GET @Signed(selector="test",domain="samplezone.org") @Produces("text/plain") public String hello(){  return "hello world";}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final AlignmentViewer viewer=(AlignmentViewer)getViewer();  final Alignment alignment=viewer.getAlignment();  final SelectedBlock block=viewer.getSelectedBlock();  StringBuilder buf=new StringBuilder();  int count=0;  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {    if (block.isSelectedRow(row)) {      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {        Lane lane=alignment.getLane(read);        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {          if (count++ > 0)           buf.append("\n");          buf.append(Basic.getFirstWord(lane.getName()));        }      }    }  }  if (count > 1)   buf.append("\n");  if (count > 0) {    StringSelection selection=new StringSelection(buf.toString());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection,null);  }}  }
class C{  private static void populateMimeTypeIconMapping(){  MIMETYPE_TO_ICON_MAPPING.put("application/coreldraw",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/epub+zip",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/font-sfnt",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/font-woff",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/illustrator",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/javascript",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/json",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/msaccess",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/msexcel",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/mspowerpoint",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/msword",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/octet-stream",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/postscript",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/pdf",R.drawable.file_pdf);  MIMETYPE_TO_ICON_MAPPING.put("application/rss+xml",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/rtf",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.android.package-archive",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.addin.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.sheet.binary.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.sheet.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-excel.template.macroEnabled.12",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-fontobject",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.addin.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.presentation.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.slideshow.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-powerpoint.template.macroEnabled.12",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-word.document.macroEnabled.12",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.ms-word.template.macroEnabled.12",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.presentation",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.presentation-template",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.spreadsheet",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.spreadsheet-template",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-master",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-template",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.oasis.opendocument.text-web",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.presentation",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.slideshow",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.presentationml.template",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.spreadsheetml.template",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/vnd.openxmlformats-officedocument.wordprocessingml.template",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/x-7z-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-bin",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-cbr",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/x-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-dcraw",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-deb",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-font",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-gimp",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-gzip",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-ms-dos-executable",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-msi",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-numbers-sffnumbers",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-keynote-sffkey",R.drawable.file_ppt);  MIMETYPE_TO_ICON_MAPPING.put("application/x-iwork-pages-sffpages",R.drawable.file_doc);  MIMETYPE_TO_ICON_MAPPING.put("application/x-perl",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/x-photoshop",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("application/x-php",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/x-rar-compressed",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-shockwave-flash",R.drawable.file_application);  MIMETYPE_TO_ICON_MAPPING.put("application/x-tar",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("application/x-tex",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/xml",R.drawable.file_text);  MIMETYPE_TO_ICON_MAPPING.put("application/yaml",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("application/zip",R.drawable.file_zip);  MIMETYPE_TO_ICON_MAPPING.put("database",R.drawable.file);  MIMETYPE_TO_ICON_MAPPING.put("httpd/unix-directory",R.drawable.ic_menu_archive);  MIMETYPE_TO_ICON_MAPPING.put("image/svg+xml",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("image/vector",R.drawable.file_image);  MIMETYPE_TO_ICON_MAPPING.put("text/calendar",R.drawable.file_calendar);  MIMETYPE_TO_ICON_MAPPING.put("text/css",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/csv",R.drawable.file_xls);  MIMETYPE_TO_ICON_MAPPING.put("text/html",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/vcard",R.drawable.file_vcard);  MIMETYPE_TO_ICON_MAPPING.put("text/x-c",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-c++src",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-h",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-python",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("text/x-shellscript",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put("web",R.drawable.file_code);  MIMETYPE_TO_ICON_MAPPING.put(MimeType.DIRECTORY,R.drawable.ic_menu_archive);}  }
class C{  private static void assertNoCharactersMissing(int totalLength,Token[] tokens){  if (tokens.length != 0 && tokens[tokens.length - 1].right != totalLength) {    throw new AssertionError(String.format("Last tokenized character '%s' doesn't match document length '%s'",tokens[tokens.length - 1].right,totalLength));  }  int start=0;  for (int i=0; i < tokens.length; i++) {    Token token=tokens[i];    if (token.left != start) {      throw new AssertionError("Gap/inconsistency at: " + start);    }    start=token.right;  }}  }
class C{  public static byte[] patchFast(byte[] oldBuf,int oldsize,byte[] diffBuf,int diffSize,int extLen) throws IOException {  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));  diffIn.skip(8);  long ctrlBlockLen=diffIn.readLong();  long diffBlockLen=diffIn.readLong();  int newsize=(int)diffIn.readLong();  diffIn.close();  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(BSUtil.HEADER_SIZE);  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));  in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);  InputStream diffBlockIn=new GZIPInputStream(in);  in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);  InputStream extraBlockIn=new GZIPInputStream(in);  byte[] newBuf=new byte[newsize];  int oldpos=0;  int newpos=0;  int[] ctrl=new int[3];  while (newpos < newsize) {    for (int i=0; i <= 2; i++) {      ctrl[i]=ctrlBlockIn.readInt();    }    if (newpos + ctrl[0] > newsize) {      throw new IOException("Corrupt by wrong patch file.");    }    if (!BSUtil.readFromStream(diffBlockIn,newBuf,newpos,ctrl[0])) {      throw new IOException("Corrupt by wrong patch file.");    }    for (int i=0; i < ctrl[0]; i++) {      if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {        newBuf[newpos + i]+=oldBuf[oldpos + i];      }    }    newpos+=ctrl[0];    oldpos+=ctrl[0];    if (newpos + ctrl[1] > newsize) {      throw new IOException("Corrupt by wrong patch file.");    }    if (!BSUtil.readFromStream(extraBlockIn,newBuf,newpos,ctrl[1])) {      throw new IOException("Corrupt by wrong patch file.");    }    newpos+=ctrl[1];    oldpos+=ctrl[2];  }  ctrlBlockIn.close();  diffBlockIn.close();  extraBlockIn.close();  return newBuf;}  }
class C{  private void updateVendorOptionPanels(){  if (vendorOptionFillFactory != null) {    List<VendorOptionInterface> voList=vendorOptionFillFactory.getVendorOptionList();    if (voList != null) {      for (      VendorOptionInterface extension : voList) {        boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionOptionsList,extension.getVendorOption());        BasePanel optionPanel=extension.getPanel();        if (optionPanel != null) {          removePanel(optionPanel);          if (displayVendorOption) {            appendPanel(optionPanel);          }        }      }    }  }}  }
class C{  public Expression notMatches(Value str,Value regexp,String single,String multi,String escape){  if (escape != null)   throw new IllegalArgumentException("JPQL ESCAPE keyword is not supported.");  return new NotMatchesExpression(str,regexp);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedHttpAuthRequest(app,handler,host,realm)) {      return true;    }  }  return false;}  }
class C{  private void collectMoves(UpdateOpHelper helper){  Iterator<ModelState> oldItemIterator=oldStateList.iterator();  ModelState nextOldItem=null;  for (  ModelState newItem : currentStateList) {    if (newItem.pair == null) {      if (helper.moves.isEmpty()) {        continue;      } else {        newItem.pairWithSelf();      }    }    if (nextOldItem == null) {      nextOldItem=getNextItemWithPair(oldItemIterator);      if (nextOldItem == null) {        nextOldItem=newItem.pair;      }    }    while (nextOldItem != null) {      updateItemPosition(newItem.pair,helper.moves);      updateItemPosition(nextOldItem,helper.moves);      if (newItem.id == nextOldItem.id && newItem.position == nextOldItem.position) {        nextOldItem=null;        break;      }      int newItemDistance=newItem.pair.position - newItem.position;      int oldItemDistance=nextOldItem.pair.position - nextOldItem.position;      if (newItemDistance == 0 && oldItemDistance == 0) {        nextOldItem=null;        break;      }      if (oldItemDistance > newItemDistance) {        helper.move(nextOldItem.position,nextOldItem.pair.position);        nextOldItem.position=nextOldItem.pair.position;        nextOldItem.lastMoveOp=helper.getNumMoves();        nextOldItem=getNextItemWithPair(oldItemIterator);      } else {        helper.move(newItem.pair.position,newItem.position);        newItem.pair.position=newItem.position;        newItem.pair.lastMoveOp=helper.getNumMoves();        break;      }    }  }}  }
class C{  public void decline(){  if (processed) {    return;  }  skype.declineContactRequest(this);  processed=true;}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public static <R>Flowable<R> ifThen(BooleanSupplier condition,Publisher<? extends R> then,Scheduler scheduler){  return ifThen(condition,then,Flowable.<R>empty().subscribeOn(scheduler));}  }
class C{  public RoomController(final GameServicesMultiplayer multiplayer,final Future<Void> future){  this.multiplayer=multiplayer;  this.future=future;  session=new AndroidGameSession(multiplayer,future);}  }
class C{  public String toString(){  final IOutputWriter w=new OutputWriterHumanReadable(new StringWriter());  try {    write(w,null);  } catch (  IOException e) {  }  return w.toString();}  }
class C{  @RequestMapping("/auth") public String auth(HttpSession httpSession,@RequestParam(value="state") String state,@RequestParam(value="code") String code){  if (!state.equals(httpSession.getAttribute(LINE_WEB_LOGIN_STATE))) {    throw new IllegalArgumentException();  }  ;  httpSession.removeAttribute(LINE_WEB_LOGIN_STATE);  if (logger.isDebugEnabled()) {    logger.debug("code : " + code);  }  AccessToken token=lineAPIService.accessToken(code);  if (logger.isDebugEnabled()) {    logger.debug("mid : " + token.mid);    logger.debug("access_token : " + token.access_token);    logger.debug("refresh_token : " + token.refresh_token);    logger.debug("expires_in : " + token.expires_in);  }  httpSession.setAttribute(ACCESS_TOKEN,token);  return "user/success";}  }
class C{  public UnsupportedConstraintException(String s,Throwable cause){  super(s);  initCause(cause);}  }
class C{  public static List<String> readFileLines(String filePath,int maxFileLineDepth) throws FileNotFoundException {  List<String> lines=new ArrayList<>();  Scanner input=new Scanner(new File(filePath));  int counter=0;  while (input.hasNextLine() && counter < maxFileLineDepth) {    lines.add(input.nextLine());    counter++;  }  return lines;}  }
class C{  public AWSIotMqttClient(String clientEndpoint,String clientId,String awsAccessKeyId,String awsSecretAccessKey,String sessionToken){  super(clientEndpoint,clientId,awsAccessKeyId,awsSecretAccessKey,sessionToken);}  }
class C{  public int compare(Object o1,Object o2){  Field f1=(Field)o1;  Field f2=(Field)o2;  if (f1 == f2)   return 0;  if (f1.getDeclaringClass() == f2.getDeclaringClass())   return f1.getName().compareTo(f2.getName());  if (f1.getDeclaringClass().isAssignableFrom(f2.getDeclaringClass()))   return -1;  return 1;}  }
class C{  int checkIfAssigned(String webappId){  if (webappId == null) {    return INVALID_ACTIVITY_INDEX;  }  for (int i=mActivityList.size() - 1; i >= 0; i--) {    if (webappId.equals(mActivityList.get(i).mWebappId)) {      return mActivityList.get(i).mActivityIndex;    }  }  return INVALID_ACTIVITY_INDEX;}  }
class C{  public void drawHeader(RecyclerView recyclerView,Canvas canvas,View header,Rect offset){  canvas.save();  if (recyclerView.getLayoutManager().getClipToPadding()) {    initClipRectForHeader(mTempRect,recyclerView,header);    canvas.clipRect(mTempRect);  }  canvas.translate(offset.left,offset.top);  header.draw(canvas);  canvas.restore();}  }
class C{  public AbstractChangeEvent(UserInfo user,String propertyName,String before,String after){  super(user);  if (StringUtils.isBlank(propertyName)) {    throw new IllegalArgumentException("PropertyName must not be blank or null.");  }  this.propertyName=propertyName;  this.before=before;  this.after=after;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public Edge findEdge(Unit u,SootMethod callee){  Edge e=srcUnitToEdge.get(u);  while (e.srcUnit() == u && e.kind() != Kind.INVALID) {    if (e.tgt() == callee)     return e;    e=e.nextByUnit();  }  return null;}  }
class C{  public short readShort(){  return (short)((readByte() << 8) | (readByte() & 0xFF));}  }
class C{  public ChangeReport applyChange(final Change change){  LOGGER.debug("Entering applyChange: ");  ChangeReport report;  if (change instanceof DataTagAdd) {    DataTagAdd addChange=(DataTagAdd)change;    String logId="not set";    if (addChange.getSourceDataTag() != null) {      logId=addChange.getSourceDataTag().getId().toString();    }    LOGGER.debug("Adding data tag with id: " + logId);    report=configurationController.onDataTagAdd(addChange);  } else   if (change instanceof DataTagRemove) {    LOGGER.debug("Removing data tag " + ((DataTagRemove)change).getDataTagId());    report=configurationController.onDataTagRemove((DataTagRemove)change);  } else   if (change instanceof DataTagUpdate) {    LOGGER.debug("Updating data tag" + ((DataTagUpdate)change).getDataTagId());    report=configurationController.onDataTagUpdate((DataTagUpdate)change);  } else   if (change instanceof CommandTagAdd) {    CommandTagAdd addChange=(CommandTagAdd)change;    String logId="not set";    if (addChange.getSourceCommandTag() != null) {      logId=addChange.getSourceCommandTag().getId().toString();    }    LOGGER.debug("Adding command tag with id: " + logId);    report=configurationController.onCommandTagAdd(addChange);  } else   if (change instanceof CommandTagRemove) {    LOGGER.debug("Removing command tag " + ((CommandTagRemove)change).getCommandTagId());    report=configurationController.onCommandTagRemove((CommandTagRemove)change);  } else   if (change instanceof CommandTagUpdate) {    LOGGER.debug("Updating command tag " + ((CommandTagUpdate)change).getCommandTagId());    report=configurationController.onCommandTagUpdate((CommandTagUpdate)change);  } else   if (change instanceof EquipmentConfigurationUpdate) {    report=configurationController.onEquipmentConfigurationUpdate((EquipmentConfigurationUpdate)change);  } else   if (change instanceof ProcessConfigurationUpdate) {    report=configurationController.onProcessConfigurationUpdate((ProcessConfigurationUpdate)change);  } else   if (change instanceof SubEquipmentUnitAdd) {    report=configurationController.onSubEquipmentUnitAdd((SubEquipmentUnitAdd)change);  } else   if (change instanceof SubEquipmentUnitRemove) {    report=configurationController.onSubEquipmentUnitRemove((SubEquipmentUnitRemove)change);  } else {    report=new ChangeReport(change);    report.appendError("Change failed in DAQ core. " + change.getClass().getName() + " is not supported by this version of the DAQ.");  }  LOGGER.debug("Leaving applyChange: ");  return report;}  }
class C{  protected void handleMultipleReturns(){  if (this.getTails().size() > 1) {    Unit stop=new ExitStmt();    List<Unit> predsOfstop=new ArrayList<Unit>();    for (Iterator<Unit> tailItr=this.getTails().iterator(); tailItr.hasNext(); ) {      Unit tail=tailItr.next();      predsOfstop.add(tail);      List<Unit> tailSuccs=this.unitToSuccs.get(tail);      tailSuccs.add(stop);    }    this.unitToPreds.put(stop,predsOfstop);    this.unitToSuccs.put(stop,new ArrayList<Unit>());    Chain<Unit> units=body.getUnits().getNonPatchingChain();    if (!units.contains(stop))     units.addLast(stop);  }}  }
class C{  public PhotosGetUploadServerQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public String fieldName(){  return fldName;}  }
class C{  public static boolean isSignedLong(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Long.parseLong(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  protected void addColumn(String name,Column col){  int idx=getColumnNumber(name);  if (idx >= 0 && idx < m_columns.size()) {    throw new IllegalArgumentException("Table already has column with name \"" + name + "\"");  }  m_columns.add(col);  m_names.add(name);  m_lastCol=m_columns.size() - 1;  ColumnEntry entry=new ColumnEntry(m_lastCol,col,new ColumnMetadata(this,name));  ColumnEntry oldEntry=(ColumnEntry)m_entries.put(name,entry);  if (oldEntry != null)   oldEntry.dispose();  invalidateSchema();  col.addColumnListener(this);  fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),m_lastCol,TableModelEvent.INSERT);}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public void java_lang_Class_getDeclaredClasses0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  public void clear(){  Iterator<MouseButton> buttons=this.buttons.values().iterator();  while (buttons.hasNext()) {    buttons.next().clear();  }  this.moved=false;  this.scroll=0;}  }
class C{  public boolean isApplicable(){  ChartViewer viewer=(ChartViewer)getViewer();  return viewer.getChartData().getNumberOfSeries() > 0 && viewer.getChartSelection().getSelectedSeries().size() < viewer.getChartData().getNumberOfSeries();}  }
class C{  protected void bottomUpDispatch(DominatorNode<N> node){  if (isFrontierKnown(node))   return;  for (  DominatorNode<N> child : dt.getChildrenOf(node)) {    if (!isFrontierKnown(child))     bottomUpDispatch(child);  }  processNode(node);}  }
class C{  private void updateVendorOptionPanels(){  if (vendorOptionTextFactory != null) {    List<VendorOptionInterface> veList=vendorOptionTextFactory.getVendorOptionList();    if (veList != null) {      for (      VendorOptionInterface vendorOption : veList) {        boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionList,vendorOption.getVendorOption());        BasePanel extensionPanel=vendorOption.getPanel();        if (extensionPanel != null) {          removePanel(vendorOption.getPanel());          if (displayVendorOption) {            appendPanel(vendorOption.getPanel());          }        }      }    }  }}  }
class C{  public AudioRestoreQuery(VkApiClient client,UserActor actor,int audioId){  super(client,"audio.restore",OkResponse.class);  accessToken(actor.getAccessToken());  audioId(audioId);}  }
class C{  public boolean isLeaf(){  return ((int)id & 1) != 0;}  }
class C{  public ZWaveColorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public PolarLocationAnimator(String group,String linearGroup){  super(group);  m_linear=linearGroup;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201005,skilltarget,num0,skillcaster,skillname);}  }
class C{  public AndExtended(){  super(new ArrayList<Filter>());}  }
class C{  public EntityListIterator selectListIteratorByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition whereEntityCondition,EntityCondition havingEntityCondition,Collection<String> fieldsToSelect,List<String> orderBy,EntityFindOptions findOptions) throws GenericEntityException {  if (modelEntity == null) {    return null;  }  ModelViewEntity modelViewEntity=null;  if (modelEntity instanceof ModelViewEntity) {    modelViewEntity=(ModelViewEntity)modelEntity;  }  if (findOptions == null)   findOptions=new EntityFindOptions();  boolean verboseOn=Debug.verboseOn();  if (verboseOn) {    Debug.logVerbose("Doing selectListIteratorByCondition with whereEntityCondition: " + whereEntityCondition,module);  }  List<ModelField> selectFields=new LinkedList<ModelField>();  if (UtilValidate.isNotEmpty(fieldsToSelect)) {    Set<String> tempKeys=new HashSet<String>();    tempKeys.addAll(fieldsToSelect);    Set<String> fieldSetsToInclude=new HashSet<String>();    Set<String> addedFields=new HashSet<String>();    for (    String fieldToSelect : fieldsToSelect) {      if (tempKeys.contains(fieldToSelect)) {        ModelField curField=modelEntity.getField(fieldToSelect);        if (curField != null) {          fieldSetsToInclude.add(curField.getFieldSet());          selectFields.add(curField);          tempKeys.remove(fieldToSelect);          addedFields.add(fieldToSelect);        }      }    }    if (tempKeys.size() > 0) {      throw new GenericModelException("In selectListIteratorByCondition invalid field names specified: " + tempKeys.toString());    }    fieldSetsToInclude.remove("");    if (verboseOn) {      Debug.logInfo("[" + modelEntity.getEntityName() + "]: field-sets to include: "+ fieldSetsToInclude,module);    }    if (UtilValidate.isNotEmpty(fieldSetsToInclude)) {      Iterator<ModelField> fieldIter=modelEntity.getFieldsIterator();      Set<String> extraFields=new HashSet<String>();      Set<String> reasonSets=new HashSet<String>();      while (fieldIter.hasNext()) {        ModelField curField=fieldIter.next();        String fieldSet=curField.getFieldSet();        if (UtilValidate.isEmpty(fieldSet)) {          continue;        }        if (!fieldSetsToInclude.contains(fieldSet)) {          continue;        }        String fieldName=curField.getName();        if (addedFields.contains(fieldName)) {          continue;        }        reasonSets.add(fieldSet);        extraFields.add(fieldName);        addedFields.add(fieldName);        selectFields.add(curField);      }      if (verboseOn) {        Debug.logInfo("[" + modelEntity.getEntityName() + "]: auto-added select fields: "+ extraFields,module);        Debug.logInfo("[" + modelEntity.getEntityName() + "]: auto-added field-sets: "+ reasonSets,module);      }    }  } else {    selectFields=modelEntity.getFieldsUnmodifiable();  }  StringBuilder sqlBuffer=new StringBuilder("SELECT ");  if (findOptions.getDistinct()) {    sqlBuffer.append("DISTINCT ");  }  if (selectFields.size() > 0) {    modelEntity.colNameString(selectFields,sqlBuffer,"",", ","",datasource.getAliasViewColumns());  } else {    sqlBuffer.append("*");  }  List<EntityCondition> viewWhereConditions=null;  List<EntityCondition> viewHavingConditions=null;  List<String> viewOrderByList=null;  if (modelViewEntity != null) {    viewWhereConditions=new LinkedList<EntityCondition>();    viewHavingConditions=new LinkedList<EntityCondition>();    viewOrderByList=new LinkedList<String>();    modelViewEntity.populateViewEntityConditionInformation(modelFieldTypeReader,viewWhereConditions,viewHavingConditions,viewOrderByList,null);  }  sqlBuffer.append(SqlJdbcUtil.makeFromClause(modelEntity,modelFieldTypeReader,datasource));  List<EntityConditionParam> whereEntityConditionParams=new LinkedList<EntityConditionParam>();  makeConditionWhereString(sqlBuffer," WHERE ",modelEntity,whereEntityCondition,viewWhereConditions,whereEntityConditionParams);  if (modelViewEntity != null) {    modelViewEntity.colNameString(modelViewEntity.getGroupBysCopy(selectFields),sqlBuffer," GROUP BY ",", ","",false);  }  List<EntityConditionParam> havingEntityConditionParams=new LinkedList<EntityConditionParam>();  makeConditionHavingString(sqlBuffer," HAVING ",modelEntity,havingEntityCondition,viewHavingConditions,havingEntityConditionParams);  List<String> orderByExpanded=new LinkedList<String>();  if (orderBy != null) {    orderByExpanded.addAll(orderBy);  }  if (viewOrderByList != null) {    orderByExpanded.addAll(viewOrderByList);  }  sqlBuffer.append(SqlJdbcUtil.makeOrderByClause(modelEntity,orderByExpanded,datasource));  makeOffsetString(sqlBuffer,findOptions);  String sql=sqlBuffer.toString();  SQLProcessor sqlP=new SQLProcessor(delegator,helperInfo);  sqlP.prepareStatement(sql,findOptions.getSpecifyTypeAndConcur(),findOptions.getResultSetType(),findOptions.getResultSetConcurrency(),findOptions.getFetchSize(),findOptions.getMaxRows());  if (verboseOn) {    Debug.logVerbose("Setting the whereEntityConditionParams: " + whereEntityConditionParams,module);  }  for (  EntityConditionParam whereEntityConditionParam : whereEntityConditionParams) {    SqlJdbcUtil.setValue(sqlP,whereEntityConditionParam.getModelField(),modelEntity.getEntityName(),whereEntityConditionParam.getFieldValue(),modelFieldTypeReader);  }  if (verboseOn) {    Debug.logVerbose("Setting the havingEntityConditionParams: " + havingEntityConditionParams,module);  }  for (  EntityConditionParam havingEntityConditionParam : havingEntityConditionParams) {    SqlJdbcUtil.setValue(sqlP,havingEntityConditionParam.getModelField(),modelEntity.getEntityName(),havingEntityConditionParam.getFieldValue(),modelFieldTypeReader);  }  long queryStartTime=0;  if (Debug.timingOn()) {    queryStartTime=System.currentTimeMillis();  }  sqlP.executeQuery();  if (Debug.timingOn()) {    long queryEndTime=System.currentTimeMillis();    long queryTotalTime=queryEndTime - queryStartTime;    if (queryTotalTime > 150) {      Debug.logTiming("Ran query in " + queryTotalTime + " milli-seconds: "+ " EntityName: "+ modelEntity.getEntityName()+ " Sql: "+ sql+ " where clause:"+ whereEntityConditionParams,module);    }  }  return new EntityListIterator(sqlP,modelEntity,selectFields,modelFieldTypeReader,this,whereEntityCondition,havingEntityCondition,findOptions.getDistinct());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200757,skilltarget);}  }
class C{  public static Beans<Role> loadByAccess(String access,int s,int n){  Beans<RoleAccess> bs=Helper.load(W.create("name",access).sort("rid",1),0,Integer.MAX_VALUE,RoleAccess.class);  W q=W.create();  if (bs != null && bs.getList() != null) {    if (bs.getList().size() > 1) {      W w1=W.create();      for (      RoleAccess a : bs.getList()) {        w1.or(X.ID,a.getLong("rid"));      }      q.and(w1);    } else     if (bs.getList().size() == 1) {      q.and(X.ID,bs.getList().get(0).getLong("rid"));    }  }  return Helper.load(q.sort("name",1),s,n,Role.class);}  }
class C{  @CalledByNative private static void showSnackbar(Tab tab,String text){  SnackbarManager snackbarManager=tab.getSnackbarManager();  if (snackbarManager == null)   return;  AutoSigninSnackbarController snackbarController=new AutoSigninSnackbarController(snackbarManager,tab);  Snackbar snackbar=Snackbar.make(text,snackbarController);  Context context=(Context)tab.getWindowAndroid().getActivity().get();  int backgroundColor=ApiCompatibilityUtils.getColor(context.getResources(),R.color.smart_lock_auto_signin_snackbar_background_color);  snackbar.setSingleLine(false).setBackgroundColor(backgroundColor);  snackbarManager.showSnackbar(snackbar);}  }
class C{  public LoopNestTree(Collection<Loop> loops){  super(new LoopNestTreeComparator());  addAll(loops);}  }
class C{  public void firstTimeExperienceComplete() throws LoginFailedException, RemoteServerException {  markTutorial(TutorialStateOuterClass.TutorialState.FIRST_TIME_EXPERIENCE_COMPLETE);}  }
class C{  @Nullable public static <T extends DomElement>T loadDomElementWithReadPermission(@NotNull Project project,@NotNull XmlFile xmlFile,@NotNull Class<T> aClass){  ApplicationManager.getApplication().assertReadAccessAllowed();  DomManager domManager=DomManager.getDomManager(project);  DomFileElement<T> element=domManager.getFileElement(xmlFile,aClass);  if (element == null)   return null;  return element.getRootElement();}  }
class C{  public static String storedByIsValid(String storedBy){  if (storedBy == null || storedBy.trim().isEmpty()) {    return null;  }  if (storedBy.length() > 255) {    return "stored_by_length_greater_than_max_length";  }  return null;}  }
class C{  public String next(int n){  int i=this.myIndex;  int j=i + n;  if (j >= this.mySource.length()) {    throw syntaxError("Substring bounds error");  }  this.myIndex+=n;  return this.mySource.substring(i,j);}  }
class C{  public CholeskyDecomposition(final RealMatrix matrix,final double relativeSymmetryThreshold,final double absolutePositivityThreshold){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  final int order=matrix.getRowDimension();  lTData=matrix.getData();  cachedL=null;  cachedLT=null;  for (int i=0; i < order; ++i) {    final double[] lI=lTData[i];    for (int j=i + 1; j < order; ++j) {      final double[] lJ=lTData[j];      final double lIJ=lI[j];      final double lJI=lJ[i];      final double maxDelta=relativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ),FastMath.abs(lJI));      if (FastMath.abs(lIJ - lJI) > maxDelta) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SYMMETRIC_MATRIX,i,j,relativeSymmetryThreshold);      }      lJ[i]=0;    }  }  for (int i=0; i < order; ++i) {    final double[] ltI=lTData[i];    if (ltI[i] <= absolutePositivityThreshold) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_DEFINITE_MATRIX);    }    ltI[i]=FastMath.sqrt(ltI[i]);    final double inverse=1.0 / ltI[i];    for (int q=order - 1; q > i; --q) {      ltI[q]*=inverse;      final double[] ltQ=lTData[q];      for (int p=q; p < order; ++p) {        ltQ[p]-=ltI[q] * ltI[p];      }    }  }}  }
class C{  public UsersSearchQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static boolean isAlphanumeric(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isLetterOrDigit(c))     return false;  }  return true;}  }
class C{  public FramePath(List<FrameDescriptor> frames){  this.frames=new ArrayList<>(frames);}  }
class C{  public ECDSASignature toCanonicalised(){  if (!isCanonical()) {    return new ECDSASignature(r,CURVE.getN().subtract(s));  } else {    return this;  }}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public SM_MAIL_SERVICE(int letterId,int attachmentType){  super(null);  this.serviceId=5;  this.letterId=letterId;  this.attachmentType=attachmentType;}  }
class C{  public Object clone(){  Schema s=new Schema(m_size);  for (int i=0; i < m_size; ++i) {    s.addColumn(m_names[i],m_types[i],m_dflts[i]);  }  return s;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SuperConstructorAccess fullCopy(){  SuperConstructorAccess tree=(SuperConstructorAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public final boolean isAlternatingDeviceState(){  return (myAlternate & CFG_DEVICE_STATE) != 0;}  }
class C{  static void scheduleAfter(Activity before,Activity after){  getInstance()._scheduleAfter(before,after);}  }
class C{  public DynamicClassLoader(URL[] urls,ClassLoader parent){  super(urls,parent);  classPath=new java.util.HashSet(urls.length);  for (int i=0; i < urls.length; i++) {    classPath.add(urls[i]);  }}  }
class C{  public static <E>RingBuffer<E> createMultiProducer(EventFactory<E> factory,int bufferSize,WaitStrategy waitStrategy){  MultiProducerSequencer sequencer=new MultiProducerSequencer(bufferSize,waitStrategy);  return new RingBuffer<E>(factory,sequencer);}  }
class C{  public Well19937c(){  super(K);}  }
class C{  public void centerViewToY(float yValue,AxisDependency axis){  float valsInView=getAxisRange(axis) / mViewPortHandler.getScaleY();  Runnable job=MoveViewJob.getInstance(mViewPortHandler,0f,yValue + valsInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof DerivativeStructure) {    final DerivativeStructure rhs=(DerivativeStructure)other;    return (getFreeParameters() == rhs.getFreeParameters()) && (getOrder() == rhs.getOrder()) && MathArrays.equals(data,rhs.data);  }  return false;}  }
class C{  public boolean isManagedBy(User user){  if (user == null || user.getGroups() == null) {    return false;  }  for (  UserGroup group : user.getGroups()) {    if (isManagedBy(group)) {      return true;    }  }  return false;}  }
class C{  public LabelRenderer(String textField){  this.setTextField(textField);}  }
class C{  public void addServiceName(String name){  if (name != null) {    this.serviceNameSet.add(name);  }}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ex) {    throw FormatException.getFormatInstance(ex);  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  mListener=listener;  mMediaFactory=mediaFactory;}  }
class C{  private void init(AttributeSet attrs,int defStyle){  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.FlowLayout);  try {    mConnectivityAware=a.getBoolean(R.styleable.FlowLayout_isConnectivityAware,mConnectivityAware);    mConnectedText=a.getResourceId(R.styleable.FlowLayout_connectedText,mConnectedText);    mConnectedTextColor=a.getResourceId(R.styleable.FlowLayout_connectedTextColor,mConnectedTextColor);    mConnectedBackground=a.getResourceId(R.styleable.FlowLayout_connectedBackground,mConnectedBackground);    mConnectedLayout=a.getResourceId(R.styleable.FlowLayout_connectedlayout,mConnectedLayout);    mDisconnectedText=a.getResourceId(R.styleable.FlowLayout_disconnectedText,mDisconnectedText);    mDisconnectedTextColor=a.getResourceId(R.styleable.FlowLayout_disconnectedTextColor,mDisconnectedTextColor);    mDisconnectedBackground=a.getResourceId(R.styleable.FlowLayout_disconnectedBackground,mDisconnectedBackground);    mDisconnectedLayout=a.getResourceId(R.styleable.FlowLayout_disconnectedlayout,mDisconnectedLayout);    mErrorText=a.getResourceId(R.styleable.FlowLayout_errorText,mErrorText);    mEmptyLayout=a.getResourceId(R.styleable.FlowLayout_emptyLayout,mEmptyLayout);    mEmptyText=a.getResourceId(R.styleable.FlowLayout_emptyText,mEmptyText);    mEmptyTextColor=a.getResourceId(R.styleable.FlowLayout_emptyTextColor,mEmptyTextColor);    mProgressLayout=a.getResourceId(R.styleable.FlowLayout_progressLayout,mProgressLayout);  }  finally {    a.recycle();  }  postInit();}  }
class C{  private void initWidget(){  this.handler=new SafeHandler<>(this);  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_update_me_swipeBackLayout);  swipeBackLayout.setOnSwipeListener(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_update_me_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)findViewById(R.id.activity_update_me_container);  ImageButton closeBtn=(ImageButton)findViewById(R.id.activity_update_me_closeBtn);  if (Mysplash.getInstance().isLightTheme()) {    closeBtn.setImageResource(R.drawable.ic_close_light);  } else {    closeBtn.setImageResource(R.drawable.ic_close_dark);  }  closeBtn.setOnClickListener(this);  this.scrollView=(NestedScrollView)findViewById(R.id.activity_update_me_scrollView);  this.progressView=(CircularProgressView)findViewById(R.id.container_update_me_progressView);  progressView.setVisibility(View.GONE);  this.contentView=(LinearLayout)findViewById(R.id.container_update_me_textContainer);  contentView.setVisibility(View.VISIBLE);  this.usernameTxt=(EditText)findViewById(R.id.container_update_me_usernameTxt);  DisplayUtils.setTypeface(this,usernameTxt);  usernameTxt.setText(AuthManager.getInstance().getMe().username);  this.firstNameTxt=(EditText)findViewById(R.id.container_update_me_firstNameTxt);  DisplayUtils.setTypeface(this,firstNameTxt);  firstNameTxt.setText(AuthManager.getInstance().getMe().first_name);  this.lastNameTxt=(EditText)findViewById(R.id.container_update_me_lastNameTxt);  DisplayUtils.setTypeface(this,lastNameTxt);  lastNameTxt.setText(AuthManager.getInstance().getMe().last_name);  this.emailTxt=(EditText)findViewById(R.id.container_update_me_emailTxt);  DisplayUtils.setTypeface(this,emailTxt);  emailTxt.setText(AuthManager.getInstance().getMe().email);  this.portfolioTxt=(EditText)findViewById(R.id.container_update_me_portfolioTxt);  DisplayUtils.setTypeface(this,portfolioTxt);  portfolioTxt.setText(AuthManager.getInstance().getMe().portfolio_url);  this.locationTxt=(EditText)findViewById(R.id.container_update_me_locationTxt);  DisplayUtils.setTypeface(this,locationTxt);  locationTxt.setText(AuthManager.getInstance().getMe().location);  this.bioTxt=(EditText)findViewById(R.id.container_update_me_bioTxt);  DisplayUtils.setTypeface(this,bioTxt);  bioTxt.setText(AuthManager.getInstance().getMe().bio);  Button saveBtn=(Button)findViewById(R.id.container_update_me_saveBtn);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    saveBtn.setBackgroundResource(R.drawable.button_login);  }  saveBtn.setOnClickListener(this);}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200406,value0,skillname);}  }
class C{  public static List<String> parseRegexGroup(final String string,final String regex){  List<String> groupList=null;  if (string != null && regex != null) {    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(string);    int groupCount=matcher.groupCount();    int count=1;    groupList=new ArrayList<String>();    if (matcher.find()) {      while (count <= groupCount) {        groupList.add(matcher.group(count));        count++;      }    }  }  return groupList;}  }
class C{  public boolean isShowTitle(){  return showTitle;}  }
class C{  public Map<Instance,Long> degrees(){  Map<Instance,Long> allDegrees=new HashMap<>();  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(subtypes));  MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraph();  result.graph().traversal().V().forEachRemaining(null);  return allDegrees;}  }
class C{  public static int calculateSampleSize(int srcWidth,int srcHeight,int dstWidth,int dstHeight){  final float srcAspect=(float)srcWidth / (float)srcHeight;  final float dstAspect=(float)dstWidth / (float)dstHeight;  if (srcAspect > dstAspect) {    return srcWidth / dstWidth;  } else {    return srcHeight / dstHeight;  }}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  @Override public void loadTrendingImages(){  loadImages(repository.getTrendingResults(RiffsyRepository.DEFAULT_LIMIT_COUNT));}  }
class C{  @Override protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  int end=getDate(str,0,len,date);  parseTimeZone(str,end,len,date);  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  return date;}  }
class C{  @Override public int read() throws IOException {  for (; ; ) {    if (encoderOut.hasRemaining()) {      return encoderOut.get() & 0xFF;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        return -1;      }    }  }}  }
class C{  private void processAuthentication(RequestContext context,Runnable callback){  DockerImage image=DockerImage.fromImageName(context.containerDescription.image);  if (image.getHost() == null) {    callback.run();    return;  }  QueryTask registryQuery=QueryUtil.buildQuery(RegistryState.class,false);  if (context.containerDescription.tenantLinks != null) {    registryQuery.querySpec.query.addBooleanClause(QueryUtil.addTenantGroupAndUserClause(context.containerDescription.tenantLinks));  }  registryQuery.querySpec.query.addBooleanClause(createAnyPropertyClause(String.format("*://%s",image.getHost()),RegistryState.FIELD_NAME_ADDRESS));  List<String> registryLinks=new ArrayList<>();  new ServiceDocumentQuery<ContainerState>(getHost(),ContainerState.class).query(registryQuery,null);}  }
class C{  public static boolean validKey(String cacheName,Object key){  UtilCache<?,?> cache=findCache(cacheName);  if (cache != null) {    if (cache.containsKey(key))     return true;  }  return false;}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public ErrorHandlerWrapper(ErrorHandler errorHandler){  setErrorHandler(errorHandler);}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  public boolean hasComplete(){  return observers.get() == TERMINATED && value == null && error == null;}  }
class C{  @Override public List<WebElement> findElementsByXPath(String xPath){  return ((FindsByXPath)super.getWrappedDriver()).findElementsByXPath(xPath);}  }
class C{  public void requestRender(){  requestRender(true);}  }
class C{  private void load(VocalizationFeatureFileReader ffr,FeatureDefinition fDef){  this.featureVectors=ffr.featureVectorMapping(fDef);  this.featureDefinition=fDef;  weightFunction=new WeightFunc[featureDefinition.getNumberOfContinuousFeatures()];  WeightFunctionManager wfm=new WeightFunctionManager();  int nDiscreteFeatures=featureDefinition.getNumberOfByteFeatures() + featureDefinition.getNumberOfShortFeatures();  for (int i=0; i < weightFunction.length; i++) {    String weightFunctionName=featureDefinition.getWeightFunctionName(nDiscreteFeatures + i);    if ("".equals(weightFunctionName))     weightFunction[i]=wfm.getWeightFunction("linear"); else     weightFunction[i]=wfm.getWeightFunction(weightFunctionName);  }  rememberWhichWeightsAreNonZero();}  }
class C{  public EnvironmentVariablePanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  public void despawn(VisibleObject object){  despawn(object,true);}  }
class C{  public static float roundToNextSignificant(double number){  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));  final int pw=1 - (int)d;  final float magnitude=(float)Math.pow(10,pw);  final long shifted=Math.round(number * magnitude);  return shifted / magnitude;}  }
class C{  @Override public Object clone(){  GenericEntity newEntity=new GenericEntity();  newEntity.init(this);  newEntity.setDelegator(internalDelegator);  return newEntity;}  }
class C{  protected Object cloneBody(){  return Body;}  }
class C{  public static Object objectFromByteBuffer(byte[] buffer) throws Exception {  if (buffer == null)   return null;  ByteArrayInputStream inStream=new ByteArrayInputStream(buffer);  ObjectInputStream in=new ObjectInputStreamExt(inStream);  Object retval=in.readObject();  in.close();  return retval;}  }
class C{  public boolean isUploading(Account account,OCFile file){  if (account == null || file == null)   return false;  return (mPendingUploads.contains(account.name,file.getRemotePath()));}  }
class C{  @Override public void clusterRejoined(ClusterNode oldNode,ClusterNode newNode){  LOGGER.info("Detected Terracotta cluster rejoined event. Old node: " + oldNode.getId() + " New node: "+ newNode.getId());}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public boolean isInstance(){  return this == VIRTUAL || this == INTERFACE || this == SPECIAL;}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_NEUTRAL(String value0){  return new SM_SYSTEM_MESSAGE(1300521,value0);}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_1_BASIC(String value0){  return new SM_SYSTEM_MESSAGE(1330016,value0);}  }
class C{  public void onSearchResultsLoaded(boolean wasPrefetch){  if (mHasExpanded || mHasMaximized) {    assert mSearchViewStartTimeNs != 0;    long durationMs=(System.nanoTime() - mSearchViewStartTimeNs) / 1000000;    logSearchPanelLoadDuration(wasPrefetch,durationMs);  }  mIsSearchPanelFullyPreloaded=true;}  }
class C{  public static double[] mean(double[][] p){  int order=p[0].length - 1;  double[] meanCoeffs=new double[order + 1];  for (int k=0; k <= order; k++) {    for (int i=0; i < p.length; i++) {      meanCoeffs[k]+=p[i][k];    }    meanCoeffs[k]/=p.length;  }  return meanCoeffs;}  }
class C{  public ChangeSet decrement(String path,double delta){  return increment(path,-delta);}  }
class C{  public static double distance(LatLng pointA,LatLng pointB){  double lat=Math.toRadians(pointA.latitude);  double lat2=Math.toRadians(pointB.latitude);  double difLat=Math.toRadians(pointB.latitude - pointA.latitude);  double difLong=Math.toRadians(pointB.longitude - pointA.longitude);  double a=(Math.pow(Math.sin(difLat / 2),2)) + (Math.cos(lat) * Math.cos(lat2) * Math.pow(Math.sin(difLong / 2),2));  double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return EARTH * c;}  }
class C{  @Override public int read() throws IOException {  try {    beforeRead(1);    int b=in.read();    afterRead(b != -1 ? 1 : -1);    return b;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public void onSensorChanged(SensorEvent event){  if (event.sensor.getType() != Sensor.TYPE_ACCELEROMETER) {    return;  }  if (this.status == AccelListener.STOPPED) {    return;  }  this.setStatus(AccelListener.RUNNING);  if (this.accuracy >= SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM) {    this.timestamp=System.currentTimeMillis();    this.x=event.values[0];    this.y=event.values[1];    this.z=event.values[2];    this.win();  }}  }
class C{  public static double midpoint(double a,double b){  return (a + b) * 0.5;}  }
class C{  public Map.Entry<K,V> pollFirstEntry(){  return doRemoveFirstEntry();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("copyImage;");}  }
class C{  public TObjectLongHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public UsersSearchQuery universityYear(Integer value){  return unsafeParam("university_year",value);}  }
class C{  private void verifyIdentifierIsConventionalMethodName(String id,Location loc) throws CompileException {  if (!Character.isLowerCase(id.charAt(0))) {    this.warning("UMN1","Method name \"" + id + "\" does not begin with a lower-case letter (see JLS7 6.8.3)",loc);    return;  }  for (int i=0; i < id.length(); ++i) {    char c=id.charAt(i);    if (!Character.isLetter(c) && !Character.isDigit(c)) {      this.warning("UMN","Method name \"" + id + "\" contains unconventional character \""+ c+ "\" (see JLS7 6.8.3)",loc);      return;    }  }}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  static public int encode_vA_vM(float vArc,float vMag){  float vArc_nor=vArc / TWO_PI;  int vArc_I16=(int)(vArc_nor * (0xFFFF - 1)) & 0xFFFF;  int vMag_I16=(int)(vMag) & 0xFFFF;  return vMag_I16 << 16 | vArc_I16;}  }
class C{  public Object nextElement(){  byte b;  b=bytes[curindex++];  if ((b & ((byte)0x80)) == 0) {    c=b;  } else   if ((b & ((byte)0xe0)) == 0xc0) {    c=((b & ((byte)0x1f))) << 6;    b=bytes[curindex++];    c|=(b & ((byte)0x3f));  } else {    c=((b & ((byte)0x0f))) << 12;    b=bytes[curindex++];    c|=((b & ((byte)0x3f))) << 6;    b=bytes[curindex++];    c|=(b & ((byte)0x3f));  }  return this;}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  public static String capitalizeFirstOnly(String s){  if (s == null)   return null;  if (s.length() == 0)   return s;  StringBuffer sbuf=new StringBuffer();  char c=s.charAt(0);  sbuf.append(Character.toUpperCase(c));  boolean space=Character.isWhitespace(c);  for (int i=1; i < s.length(); ++i) {    c=s.charAt(i);    if (Character.isWhitespace(c)) {      space=true;    } else     if (space) {      c=Character.toUpperCase(c);      space=false;    } else {      c=Character.toLowerCase(c);    }    sbuf.append(c);  }  return sbuf.toString();}  }
class C{  public synchronized void closeConnection(ChannelEntry channelEntry){  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Connection with client closed from [" + channelEntry.getClientEndPointAddress() + "] endpoint.");  try {    if (channelEntry.getReadSelectionKey() != null)     channelEntry.getReadSelectionKey().cancel();    SocketChannel socketChannel=channelEntry.getSocketChannel();    Socket socket=socketChannel.socket();    if (socket != null) {      SocketAddress socketAddress=socket.getRemoteSocketAddress();      if (socketAddress != null)       _clientToChannel.remove(socketAddress);    }    channelEntry.close();    m_Channels.remove(socketChannel);  } catch (  IOException ex) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,ex.toString(),ex);    }  }}  }
class C{  public void unlockUserInput(){  isLocked=false;  if (commandManager != null)   commandManager.setEnableCritical(true);  getTabbedPane().setEnabled(true);  setCursor(Cursor.getDefaultCursor());}  }
class C{  protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (!fRecognizedProperties.contains(propertyId)) {    if (fParentSettings != null) {      fParentSettings.getProperty(propertyId);    } else {      short type=XMLConfigurationException.NOT_RECOGNIZED;      throw new XMLConfigurationException(type,propertyId);    }  }}  }
class C{  public static void main(String[] arg){  try {    String filename=arg[arg.length - 1];    boolean use_default_md5=false;    boolean use_native_lib=true;    for (int i=0; i < arg.length - 1; i++) {      if (arg[i].equals("--use-default-md5")) {        use_default_md5=true;      } else       if (arg[i].equals("--no-native-lib")) {        use_native_lib=false;      }    }    byte[] buf=new byte[65536];    int num_read;    if (use_default_md5) {      InputStream in=new BufferedInputStream(new FileInputStream(filename));      java.security.MessageDigest digest=java.security.MessageDigest.getInstance("MD5");      while ((num_read=in.read(buf)) != -1) {        digest.update(buf,0,num_read);      }      System.out.println(MD5.asHex(digest.digest()) + "  " + filename);      in.close();    } else {      if (!use_native_lib) {        MD5.initNativeLibrary(true);      }      MD5InputStream in=new MD5InputStream(new BufferedInputStream(new FileInputStream(filename)));      while ((num_read=in.read(buf)) != -1)       ;      System.out.println(MD5.asHex(in.hash()) + "  " + filename);      in.close();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public boolean isShowing(){  return dialog.isShowing();}  }
class C{  public static double erfcInv(final double x){  return erfInv(1 - x);}  }
class C{  public static long readLong(byte[] bytes,int start){  return ((long)(readInt(bytes,start)) << 32) + (readInt(bytes,start + 4) & 0xFFFFFFFFL);}  }
class C{  public EventQueryParams removeProgramIndicatorItems(){  items=items.stream().filter(null).collect(Collectors.toList());  itemFilters=itemFilters.stream().filter(null).collect(Collectors.toList());  return this;}  }
class C{  private float computeOverscrollPercent(){  if (mOverScrollOffset >= 0) {    return mOverScrollOffset / mMaxOverScroll;  } else {    return mOverScrollOffset / mMaxUnderScroll;  }}  }
class C{  FloatList(){  value=0.0F;  next=null;  prev=null;}  }
class C{  public static void main(String[] args){  TtmlConverterCmdLineParams parsedParams=null;  TtmlConverter converter=null;  try {    parsedParams=new TtmlConverterCmdLineParser().parse(args);  } catch (  Exception e) {    System.err.println(String.format("Parsing of command line arguments failed. Reason: %s",e.getLocalizedMessage()));    System.exit(-1);  }  if (parsedParams == null) {    System.exit(0);  }  printStartMessage(parsedParams);  try {    converter=new TtmlConverter(parsedParams);  } catch (  Exception e) {    System.err.println(String.format("Input file/s is not valid. %s",e.getLocalizedMessage()));    System.exit(-1);  }  try {    converter.convertInputsToItt();  } catch (  Exception e) {    System.err.println(String.format("Input file/s cannot be converted to itt. %s",e.getLocalizedMessage()));    System.exit(-1);  }  try {    converter.mergeConvertedItts();  } catch (  Exception e) {    System.err.println(String.format("Input file/s cannot be merged to one itt. %s",e.getLocalizedMessage()));    System.exit(-1);  }  try {    converter.resolveParagraphTimeOverlaps();  } catch (  Exception e) {    System.err.println(String.format("Input file/s cannot be converted to itt. %s",e.getLocalizedMessage()));    System.exit(-1);  }  try {    converter.writeToFile();  } catch (  Exception e) {    System.err.println(String.format("Output iTT file cannot be saved. %s",e.getLocalizedMessage()));    System.exit(-1);  }  try {    converter.validateOutput();  } catch (  Exception e) {    System.err.println(String.format("Output iTT file is not correct TTML file, internal merging error. %s",e.getLocalizedMessage()));    System.exit(-1);  }  System.out.println("Conversion done.");}  }
class C{  public final void ensureValid(JobParameters job){  ensureNoErrors(validate(job));}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public static MetaAttribute findAttribute(MetaDataObject meta,Object value){  if (value == null) {    throw new IllegalArgumentException("null as value not supported");  }  for (  MetaAttribute attr : meta.getAttributes()) {    if (attr.isDerived()) {      continue;    }    if (attr.getType().getImplementationClass().isAssignableFrom(value.getClass())) {      return attr;    }  }  throw new IllegalArgumentException("cannot find anyType attribute for value '" + value + '\'');}  }
class C{  static void debug(String s){  if (DEBUG) {    System.out.println("cludebug: " + s);  }}  }
class C{  private void fileSetBuildingTime(String contents,String fileName){  try {    File file=new File(fileName + ".log");    FileWriter fw=new FileWriter(file,false);    fw.write(contents);    fw.flush();    fw.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();    System.out.println(fileName + ".log file do not exist");  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  protected PlacesSearchQuery longitude(float value){  return unsafeParam("longitude",value);}  }
class C{  public LpcPitchSynchronousAnalyser(DoubleDataSource signal,DoubleDataSource pitchmarks,int windowType,int samplingRate,int framePeriods,int shiftPeriods){  super(signal,pitchmarks,windowType,samplingRate,framePeriods,shiftPeriods);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201078,skilltarget,skillname);}  }
class C{  public void started(){}  }
class C{  public void activate(){  getViewer().getSearchManager().setSearcher(getSearcher());  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionClasses();      chartSelection.setSelectedClass(getSelectedLabels(),true);      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  public DocumentNGramDistroGraph mergeDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  EdgeCachedLocator ecLocator=new EdgeCachedLocator(10);  DocumentNGramDistroGraph res=(DocumentNGramDistroGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gGraph=res.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraph=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraph == null)     continue;    java.util.Iterator iIter=gOtherGraph.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      String sHead=weCurItem.getVertexA().getLabel();      String sTail=weCurItem.getVertexB().getLabel();      WeightedEdge weMyCurItem=(WeightedEdge)ecLocator.locateDirectedEdgeInGraph(gGraph,weCurItem.getVertexA(),weCurItem.getVertexB());      if (weMyCurItem == null) {        try {          weMyCurItem=gGraph.addEdge(weCurItem.getVertexA(),weCurItem.getVertexB(),weCurItem.getWeight());          ecLocator.addedEdge(weMyCurItem);        } catch (        Exception ex) {          ex.printStackTrace(System.err);          continue;        }      }      Distribution d1=(Distribution)res.EdgeDistros.get(weMyCurItem);      if (d1 == null)       d1=new Distribution();      Distribution d2=(Distribution)dgOtherGraph.EdgeDistros.get(weCurItem);      if (d2 == null)       d2=new Distribution();      res.EdgeDistros.put(weMyCurItem,d2.addTo(d1));      if (weMyCurItem != null) {        double dWeight=weCurItem.getWeight() + weMyCurItem.getWeight();        weMyCurItem.setWeight(dWeight);      }    }  }  return res;}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>endElement (" + element.rawname + ")");  }  if (!fDeferNodeExpansion) {    if (augs != null && fDocumentImpl != null && (fNamespaceAware || fStorePSVI)) {      ElementPSVI elementPSVI=(ElementPSVI)augs.getItem(Constants.ELEMENT_PSVI);      if (elementPSVI != null) {        if (fNamespaceAware) {          XSTypeDefinition type=elementPSVI.getMemberTypeDefinition();          if (type == null) {            type=elementPSVI.getTypeDefinition();          }          ((ElementNSImpl)fCurrentNode).setType(type);        }        if (fStorePSVI) {          ((PSVIElementNSImpl)fCurrentNode).setPSVI(elementPSVI);        }      }    }    if (fDOMFilter != null) {      if (fFilterReject) {        if (fRejectedElementDepth-- == 0) {          fFilterReject=false;        }        return;      }      if (!fSkippedElemStack.isEmpty()) {        if (fSkippedElemStack.pop() == Boolean.TRUE) {          return;        }      }      setCharacterData(false);      if ((fCurrentNode != fRoot) && !fInEntityRef && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_ELEMENT) != 0) {        short code=fDOMFilter.acceptNode(fCurrentNode);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{            throw Abort.INSTANCE;          }case LSParserFilter.FILTER_REJECT:{          Node parent=fCurrentNode.getParentNode();          parent.removeChild(fCurrentNode);          fCurrentNode=parent;          return;        }case LSParserFilter.FILTER_SKIP:{        fFirstChunk=true;        Node parent=fCurrentNode.getParentNode();        NodeList ls=fCurrentNode.getChildNodes();        int length=ls.getLength();        for (int i=0; i < length; i++) {          parent.appendChild(ls.item(0));        }        parent.removeChild(fCurrentNode);        fCurrentNode=parent;        return;      }default :{    }}}fCurrentNode=fCurrentNode.getParentNode();} else {setCharacterData(false);fCurrentNode=fCurrentNode.getParentNode();}} else {if (augs != null) {ElementPSVI elementPSVI=(ElementPSVI)augs.getItem(Constants.ELEMENT_PSVI);if (elementPSVI != null) {XSTypeDefinition type=elementPSVI.getMemberTypeDefinition();if (type == null) {  type=elementPSVI.getTypeDefinition();}fDeferredDocumentImpl.setTypeInfo(fCurrentNodeIndex,type);}}fCurrentNodeIndex=fDeferredDocumentImpl.getParentNode(fCurrentNodeIndex,false);}}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  protected void ordinalLayout(TupleSet ts){  if (!m_modelSet) {    Object[] array=DataLib.ordinalArray(ts,m_field);    if (m_model == null) {      m_model=new ObjectRangeModel(array);    } else {      ((ObjectRangeModel)m_model).setValueRange(array);    }  }  ObjectRangeModel model=(ObjectRangeModel)m_model;  int start=model.getValue();  int end=start + model.getExtent();  double total=(double)(end - start);  Iterator iter=m_vis.items(m_group,m_filter);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    int order=model.getIndex(item.get(m_field)) - start;    set(item,(total > 0.0) ? order / total : 0.5);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200350,num0,skillname);}  }
class C{  public boolean isDirectory(){  return directory;}  }
class C{  public void stopPreview(){  if (mCamera != null && mPreviewing) {    mCamera.stopPreview();    mPreviewCallback.setHandler(null,0);    mAutoFocusCallback.setHandler(null,0);    mPreviewing=false;  }}  }
class C{  public void actionPerformed(ActionEvent ev){  if (isSelected())   execute("set idParsing=false cName=" + cName + ";"); else {    String idTags=Basic.toString(ProgramProperties.get(cName + "Tags",IdMapper.createTags(cName))," ");    final JFrame frame=((getParent() instanceof IDirectableViewer) ? ((IDirectableViewer)getParent()).getFrame() : null);    idTags=JOptionPane.showInputDialog(frame,"Enter tag(s) used to identify ids (separated by spaces):",idTags);    if (idTags != null)     execute("set idParsing=true cName=" + cName + " prefix='"+ idTags+ "';"); else     execute("set idParsing=false cName=" + cName + ";");  }}  }
class C{  private void removeAllFixtures(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.removeAll.warning"),body.getName()),Messages.getString("menu.context.body.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.removeAllFixtures();          if (!body.isMassExplicit()) {            body.updateMass();          }        }        node.removeAllChildren();        this.model.reload(node);      }    }  }}  }
class C{  public static double[] convexHull(double[] pts,int len){  if (len < 6) {    throw new IllegalArgumentException("Input must have at least 3 points");  }  int plen=len / 2 - 1;  float[] angles=new float[plen];  int[] idx=new int[plen];  int[] stack=new int[len / 2];  return convexHull(pts,len,angles,idx,stack);}  }
class C{  public Vector2 rotate(double theta){  double cos=Math.cos(theta);  double sin=Math.sin(theta);  double x=this.x;  double y=this.y;  this.x=x * cos - y * sin;  this.y=x * sin + y * cos;  return this;}  }
class C{  public static Map<String,Object> alwaysBadExpireProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Bad Expire Date Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultBadExpire",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","E");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  public static final void show(Window owner,Settings settings){  SettingsDialog dialog=new SettingsDialog(owner,settings);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlSettings.setSettings(settings);  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  protected void showModels(EpoxyModel<?>... models){  showModels(Arrays.asList(models));}  }
class C{  private static boolean fieldExists(List<DataSourceFieldInterface> processedFieldList,String fieldName){  for (  DataSourceFieldInterface field : processedFieldList) {    if (field.getName().compareTo(fieldName) == 0) {      return true;    }  }  return false;}  }
class C{  private byte[] RIPEMD160(byte[] tobeHashed){  RIPEMD160Digest digester=new RIPEMD160Digest();  byte[] retValue=new byte[digester.getDigestSize()];  digester.update(tobeHashed,0,tobeHashed.length);  digester.doFinal(retValue,0);  byte[] version=new byte[]{0x00};  return concateByteArray(version,retValue);}  }
class C{  private void loadSpriteAndPalettes(PokeModel pokeModel){  int resId=PokePicker.GenerationNumbers.getDrawableResourceFromNumber(mContext,pokeModel.getPokedexNum());  String url=getUriToDrawable(mContext,resId).toString();  Picasso.with(mContext).load(resId).into(mPokemonSprite,PicassoPalette.with(url,mPokemonSprite).use(PicassoPalette.Profile.VIBRANT).intoBackground(mPokemonSprite).intoTextColor(mPokemonNumBorder,PicassoPalette.Swatch.BODY_TEXT_COLOR).use(PicassoPalette.Profile.VIBRANT_LIGHT).intoBackground(mPokemonNumBorder).intoBackground(mPokemonGeneration).intoBackground(mPokemonEvolutions).use(PicassoPalette.Profile.MUTED_LIGHT).intoBackground(mPokemonTypes));}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public int compareTo(Object o){  long thisValue=this.value;  long thatValue=((LongWritable)o).value;  return (thisValue < thatValue ? -1 : (thisValue == thatValue ? 0 : 1));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200899,skilltarget,skillcaster,skillname);}  }
class C{  public Selection_PhoneClass(Map<String,String> phones2Classes,String[] classes,TargetElementNavigator segmentNavigator){  this.name="selection_next_phone_class";  this.phones2Classes=phones2Classes;  this.values=new ByteStringTranslator(classes);  this.navigator=segmentNavigator;}  }
class C{  public String process(Item syl) throws ProcessException {  Item ss=syl.getItemAs(Relation.SYLLABLE_STRUCTURE);  if (ss == null) {    return "1";  } else   if (ss.getNext() != null) {    return "0";  } else   if (ss.getParent() == null) {    return "1";  } else {    return wordBreak(ss.getParent());  }}  }
class C{  public Item findItem(String path){  Item pitem=this;  StringTokenizer tok;  if (path == null) {    return this;  }  tok=new StringTokenizer(path,":.");  while (pitem != null && tok.hasMoreTokens()) {    String token=tok.nextToken();    if (token.equals("n")) {      pitem=pitem.getNext();    } else     if (token.equals("p")) {      pitem=pitem.getPrevious();    } else     if (token.equals("nn")) {      pitem=pitem.getNext();      if (pitem != null) {        pitem=pitem.getNext();      }    } else     if (token.equals("pp")) {      pitem=pitem.getPrevious();      if (pitem != null) {        pitem=pitem.getPrevious();      }    } else     if (token.equals("parent")) {      pitem=pitem.getParent();    } else     if (token.equals("daughter") || token.equals("daughter1")) {      pitem=pitem.getDaughter();    } else     if (token.equals("daughtern")) {      pitem=pitem.getLastDaughter();    } else     if (token.equals("R")) {      String relationName=tok.nextToken();      pitem=pitem.getSharedContents().getItemRelation(relationName);    } else {      System.out.println("findItem: bad feature " + token + " in "+ path);    }  }  return pitem;}  }
class C{  @CheckReturnValue public AddCmd all(){  Preconditions.checkState(Iterables.isEmpty(files),"'all' and passing files is incompatible");  return new AddCmd(force,true,files);}  }
class C{  public AesEncrypter(SecretKey key){  byte[] iv=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};  AlgorithmParameterSpec paramSpec=new IvParameterSpec(iv);  try {    ecipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    dcipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    ecipher.init(Cipher.ENCRYPT_MODE,key,paramSpec);    dcipher.init(Cipher.DECRYPT_MODE,key,paramSpec);  } catch (  Exception e) {    throw new EncodingException("Failed to create AES encrypter",e);  }}  }
class C{  public Vector3f add(float addX,float addY,float addZ){  return new Vector3f(x + addX,y + addY,z + addZ);}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  private void validateCasting(CastingImpl casting){  if (!ValidateGlobalRules.validatePlaysRoleStructure(casting)) {    Instance rolePlayer=casting.getRolePlayer();    errorsFound.add(ErrorMessage.VALIDATION_CASTING.getMessage(rolePlayer.type().getId(),rolePlayer.getId(),casting.getRole().getId()));  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public void saveCommentHistory() throws TeamException {  IPath pluginStateLocation=SVNUIPlugin.getPlugin().getStateLocation();  File tempFile=pluginStateLocation.append(COMMENT_HIST_FILE + ".tmp").toFile();  File histFile=pluginStateLocation.append(COMMENT_HIST_FILE).toFile();  try {    XMLWriter writer=new XMLWriter(new BufferedOutputStream(new FileOutputStream(tempFile)));    try {      writer.startTag(ELEMENT_COMMIT_HISTORY,null,false);      for (int i=0; i < previousComments.length && i < maxComments; i++)       writer.printSimpleTag(ELEMENT_COMMIT_COMMENT,previousComments[i]);      writer.endTag(ELEMENT_COMMIT_HISTORY);    }  finally {      writer.close();    }    if (histFile.exists()) {      histFile.delete();    }    boolean renamed=tempFile.renameTo(histFile);    if (!renamed) {      throw new TeamException(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind("RepositoryManager.rename",tempFile.getAbsolutePath()),null));    }  } catch (  IOException e) {    throw new TeamException(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind("RepositoryManager.save",histFile.getAbsolutePath()),e));  }}  }
class C{  public static int extractHighSignedNibble(int value){  return (value << 24) >> 28;}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public ResourcePool(IResourceFactory<R> resourceFactory,int minResources,int maxResources){  this(resourceFactory,minResources,maxResources,null);}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  fEntityRef=true;  if (fDocumentHandler != null) {    fDocumentHandler.startGeneralEntity(name,identifier,encoding,augs);  }}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int oldSet[]=_set;  byte oldStates[]=_states;  _set=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldSet[i];      int index=insertionIndex(o);      _set[index]=o;      _states[index]=FULL;    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200732,skillcaster,value0,skillname);}  }
class C{  public boolean contains(TakeModifiers modifiers){  return super.contains(modifiers);}  }
class C{  public void addMember(InternalMapObject member){  this.members.add(member);}  }
class C{  public TimeDifferenceMovingAverageTimeDeadbandActivator(final int windowSize,final long minDiff,final long deactivationDiff,final int timeDeadbandTime){  super();  this.windowSize=windowSize;  this.minDiff=minDiff;  this.deactivationDiff=deactivationDiff;  this.timeDeadbandTime=timeDeadbandTime;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CAHT_ROOM_JOIN_SUCCESS(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1300850,value1,value0);}  }
class C{  public static void showCreateAircraft(Fragment fragment,int requestCode){  Intent intent=new Intent(fragment.getActivity(),CreateEditAircraftActivity.class);  fragment.startActivityForResult(intent,requestCode);}  }
class C{  public int download_file1(String file_id,DownloadCallback callback) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file1(file_id,file_offset,download_bytes,callback);}  }
class C{  @Override public Scan open(){  Scan s=p.open();  return new SelectScan(s,pred);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public PhotosSaveMessagesPhotoQuery saveMessagesPhoto(Actor actor,String photo){  return new PhotosSaveMessagesPhotoQuery(getClient(),actor,photo);}  }
class C{  void Evenodd_decoding(int[] restarts){  int i, j, stripe, k;  int rs_disk1=-1;  int rs_disk2=-1;  int rs_nbr=0;  for (i=0; i < data_disk_nbr + 2; i++) {    if (restarts[i] == 1) {      rs_disk1=i;      rs_nbr++;      break;    }  }  if (rs_disk1 != -1) {    for (i=rs_disk1 + 1; i < data_disk_nbr + 2; i++) {      if (restarts[i] == 1) {        rs_disk2=i;        rs_nbr++;        break;      }    }  }  if (rs_disk1 != -1) {    Arrays.fill(check_data[rs_disk1],(char)0);  }  if (rs_disk2 != -1) {    Arrays.fill(check_data[rs_disk2],(char)0);  }  if (rs_disk1 >= data_disk_nbr) {    if (restarts[data_disk_nbr] == 1) {      STAR_encoding_row();    }    if (restarts[data_disk_nbr + 1] == 1) {      STAR_encoding_diag1();    }  }  if (rs_disk1 < data_disk_nbr && rs_nbr == 1) {    for (i=0; i < stripe_unit_size; i++) {      for (j=0; j <= data_disk_nbr; j++) {        if (j != rs_disk1) {          check_data[rs_disk1][i]^=check_data[j][i];        }      }    }  }  if (rs_nbr == 2 && rs_disk1 < data_disk_nbr && rs_disk2 >= data_disk_nbr) {    if (rs_disk2 == data_disk_nbr + 1) {      for (i=0; i < stripe_unit_size; i++) {        for (j=0; j <= data_disk_nbr; j++) {          if (j != rs_disk1)           check_data[rs_disk1][i]^=check_data[j][i];        }      }      STAR_encoding_diag1();    }    if (rs_disk2 == data_disk_nbr) {      char[] tmp;      tmp=new char[p * block_size];      char[] tmp_for_s;      tmp_for_s=new char[block_size];      for (stripe=0; stripe < block_nbr + 1; stripe++) {        for (i=0; i < data_disk_nbr; i++) {          for (j=0; j < block_size; j++) {            k=(stripe - i + p) % p;            if (k < block_nbr)             tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];          }        }      }      stripe=(rs_disk1 + p - 1) % p;      for (i=0; i < block_size; i++) {        if (stripe == p - 1)         tmp_for_s[i]=tmp[stripe * block_size + i]; else         tmp_for_s[i]=(char)(tmp[stripe * block_size + i] ^ check_data[data_disk_nbr + 1][stripe * block_size + i]);      }      for (i=0; i < block_nbr; i++) {        for (j=0; j < block_size; j++) {          tmp[i * block_size + j]^=(tmp_for_s[j] ^ check_data[data_disk_nbr + 1][i * block_size + j]);        }      }      for (j=0; j < block_size; j++)       tmp[block_nbr * block_size + j]^=tmp_for_s[j];      for (i=0; i < p; i++) {        j=(i + p - rs_disk1) % p;        if (j < p - 1) {          System.arraycopy(tmp,i * block_size,check_data[rs_disk1],j * block_size,block_size);        }      }      STAR_encoding_row();    }  }  if (rs_nbr == 2 && rs_disk1 < data_disk_nbr && rs_disk2 < data_disk_nbr) {    char[] tmp;    tmp=new char[p * block_size];    char[] tmp_for_s;    tmp_for_s=new char[block_size];    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        tmp_for_s[j]^=check_data[data_disk_nbr][i * block_size + j];        tmp_for_s[j]^=check_data[data_disk_nbr + 1][i * block_size + j];      }    }    for (stripe=0; stripe < block_nbr + 1; stripe++) {      for (i=0; i < data_disk_nbr; i++) {        k=(stripe - i + p) % p;        if (k < block_nbr)         for (j=0; j < block_size; j++) {          tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];        }      }    }    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        tmp[i * block_size + j]^=(check_data[data_disk_nbr + 1][i * block_size + j] ^ tmp_for_s[j]);      }    }    for (j=0; j < block_size; j++)     tmp[block_nbr * block_size + j]^=tmp_for_s[j];    stripe=(rs_disk1 + p - 1) % p;    System.arraycopy(tmp,stripe * block_size,tmp_for_s,0,block_size);    while (true) {      k=(stripe - rs_disk2 + p) % p;      if (k == block_nbr)       break;      System.arraycopy(tmp_for_s,0,check_data[rs_disk2],k * block_size,block_size);      for (j=0; j < block_size; j++) {        for (i=0; i <= data_disk_nbr; i++)         if (i != rs_disk1)         check_data[rs_disk1][k * block_size + j]^=check_data[i][k * block_size + j];      }      stripe=(k + rs_disk1 + p) % p;      for (j=0; j < block_size; j++) {        tmp_for_s[j]=(char)(check_data[rs_disk1][k * block_size + j] ^ tmp[stripe * block_size + j]);      }    }  }}  }
class C{  public static void main(String[] args){  try {    ThreadPool tp=new ThreadPool("Unit Test Thread Pool",5,10);    ThreadGroup group=tp.getThreadGroup();    group.list();    tp.destroy();    group.list();    tp.get();  } catch (  Exception ex) {    ex.printStackTrace();  }  System.exit(0);}  }
class C{  public void stopLoadMore(){  if (mPullLoading == true) {    mPullLoading=false;    mFooterView.setState(XListViewFooter.STATE_NORMAL);  }}  }
class C{  public void cancel(Account account,OCFile file){  mSyncFolderHandler.cancel(account,file);}  }
class C{  private List<ValidationError> validate(){  List<ValidationError> errors=Lists.newArrayList();  Module module=getModule();  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateModule(module));  AndroidFacet facet=null;  if (module != null) {    facet=AndroidFacet.getInstance(module);    errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateFacet(facet,module));  }  errors.addAll(configState.validate(facet));  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateLabel(getLabel(),configuration.getProject(),Kind.ANDROID_BINARY));  return errors;}  }
class C{  private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client){  mLocalFolder=mStorageManager.getFileByPath(mLocalFolder.getRemotePath());  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));  remoteFolder.setParentId(mLocalFolder.getParentId());  remoteFolder.setFileId(mLocalFolder.getFileId());  Log_OC.d(TAG,"Remote folder " + mLocalFolder.getRemotePath() + " changed - starting update of local data ");  List<OCFile> updatedFiles=new Vector<OCFile>(folderAndFiles.size() - 1);  mFilesToSyncContents.clear();  List<OCFile> localFiles=mStorageManager.getFolderContent(mLocalFolder,false);  Map<String,OCFile> localFilesMap=new HashMap<String,OCFile>(localFiles.size());  for (  OCFile file : localFiles) {    localFilesMap.put(file.getRemotePath(),file);  }  OCFile remoteFile=null, localFile=null, updatedFile=null;  RemoteFile r;  for (int i=1; i < folderAndFiles.size(); i++) {    r=(RemoteFile)folderAndFiles.get(i);    remoteFile=FileStorageUtils.fillOCFile(r);    updatedFile=FileStorageUtils.fillOCFile(r);    updatedFile.setParentId(mLocalFolder.getFileId());    localFile=localFilesMap.remove(remoteFile.getRemotePath());    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);    if (localFile != null) {      updatedFile.setFileId(localFile.getFileId());      updatedFile.setFavorite(localFile.isFavorite());      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());      updatedFile.setStoragePath(localFile.getStoragePath());      updatedFile.setEtag(localFile.getEtag());      if (updatedFile.isFolder()) {        updatedFile.setFileLength(remoteFile.getFileLength());      } else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {        updatedFile.setNeedsUpdateThumbnail(true);        Log.d(TAG,"Image " + remoteFile.getFileName() + " updated on the server");      }      updatedFile.setPublicLink(localFile.getPublicLink());      updatedFile.setShareViaLink(localFile.isSharedViaLink());      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());      updatedFile.setEtagInConflict(localFile.getEtagInConflict());    } else {      updatedFile.setEtag("");    }    FileStorageUtils.searchForLocalFileInDefaultPath(updatedFile,mAccount);    if (updatedFile.isFavorite()) {      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);      mFilesToSyncContents.add(operation);    }    updatedFiles.add(updatedFile);  }  mStorageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());  mChildren=updatedFiles;}  }
class C{  public DocumentProperties(int initialCapacity,float loadFactor){  this._map=CollectionsFactory.getInstance().createMap(initialCapacity,loadFactor);}  }
class C{  public static BigFraction parseEditRate(List<Long> editRate){  if (editRate.size() != 2) {    throw new ConversionHelperException("Incorrect edit rate! Edit rate must consist of two values.");  }  return new BigFraction(editRate.get(0),editRate.get(1));}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static RealMatrix createRealDiagonalMatrix(final double[] diagonal){  final RealMatrix m=createRealMatrix(diagonal.length,diagonal.length);  for (int i=0; i < diagonal.length; ++i) {    m.setEntry(i,i,diagonal[i]);  }  return m;}  }
class C{  public S2Point projectToEdge(S2Point point,int index){  if (!(numVertices() > 0))   throw new IllegalStateException("Empty polyline");  if (!(numVertices() == 1 || index < numVertices() - 1))   throw new IllegalStateException("Invalid edge index");  if (numVertices() == 1) {    return vertex(0);  }  return S2EdgeUtil.getClosestPoint(point,vertex(index),vertex(index + 1));}  }
class C{  @GET @Path("_stashroot") @Produces(MediaType.TEXT_PLAIN) @ApiOperation(value="Returns the stash root directory for this cluster.",notes="Returns the stash root directory for this cluster, or an HTTP not found if stash is not supported by this server.",response=String.class) public String stashRoot(){  return _dataStore.getStashRoot().toString();}  }
class C{  public PhotosCreateCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override protected void validateConfig(final Alarm alarm) throws ConfigurationException {  if (alarm.getId() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"id\" cannot be null");  }  if (alarm.getTagId() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"dataTagId\" cannot be null");  }  if (alarm.getFaultFamily() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"faultFamily\" cannot be null");  }  if (alarm.getFaultFamily().length() == 0 || alarm.getFaultFamily().length() > MAX_FAULT_FAMILY_LENGTH) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"faultFamily\" must be 1 to 20 characters long");  }  if (alarm.getFaultMember() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"faultMember\" cannot be null");  }  if (alarm.getFaultMember().length() == 0 || alarm.getFaultMember().length() > MAX_FAULT_MEMBER_LENGTH) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"faultMember\" must be 1 to 64 characters long");  }  if (alarm.getFaultCode() < 0) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"faultCode\" must be >= 0");  }  if (alarm.getCondition() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"alarmCondition\" cannot be null");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_SHIELD_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400473,value1,value0);}  }
class C{  private int numValidEntries(Page p){  byte[] header=this.readPageHeader(p);  int count=0;  for (  byte b : header) {    for (int mask=0x01; mask != 0x100; mask<<=1) {      if ((b & (byte)mask) != 0) {        count++;      }    }  }  return count;}  }
class C{  public static boolean isSupportedHardware(Context context){  FingerprintManagerCompat fingerprintManager=FingerprintManagerCompat.from(context);  return fingerprintManager.isHardwareDetected();}  }
class C{  public boolean isScreenOn(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ECLAIR_MR1) {    LogUtils.e("can not call isScreenOn if SDK_INT < 7 ");    return false;  } else {    return powerManager.isScreenOn();  }}  }
class C{  public boolean isRequired(){  return proto.getLabel() == FieldDescriptorProto.Label.LABEL_REQUIRED;}  }
class C{  public void shouldShowFullBadgeText(boolean shouldShowBadgeWithNinePlus){  this.shouldShowBadgeWithNinePlus=shouldShowBadgeWithNinePlus;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", deptName=").append(deptName);  sb.append(", parentId=").append(parentId);  sb.append(", sortNo=").append(sortNo);  sb.append(", leaf=").append(leaf);  sb.append("]");  return sb.toString();}  }
class C{  public long parse() throws IOException {  try {    String magicString=StringHelper.str(in,5);    if (!magicString.equals("REDIS")) {      logger.error("Can't read MAGIC STRING [REDIS] ,value:" + magicString);      return in.total();    }    int version=Integer.parseInt(StringHelper.str(in,4));switch (version) {case 1:case 2:case 3:case 4:case 5:case 6:case 7:      this.replicator.submitEvent(new PreFullSyncEvent());    long checksum=rdbLoad(version);  this.replicator.submitEvent(new PostFullSyncEvent(checksum));return in.total();default :logger.error("Can't handle RDB format version " + version);return in.total();}} catch (InterruptedException e) {logger.error(e);Thread.currentThread().interrupt();return -1;}}  }
class C{  protected double toScreenDouble(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() + 1 - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() + 1 - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return ARROW_SZ + ((xOrY - min) * scale);  } else {    if (orientation == VERTICAL) {      return sz.height - (xOrY - min) * scale - ARROW_SZ;    } else {      return sz.width - (xOrY - min) * scale - ARROW_SZ;    }  }}  }
class C{  public void testAddNonExistedTargetCompatibility() throws IOException {  String text="sourceCompatibility = 1.5\n" + "dependencies {}\n";  writeToBuildFile(text);  GradleBuildModel buildModel=getGradleBuildModel();  JavaModel java=buildModel.java();  assertEquals(LanguageLevel.JDK_1_5,java.sourceCompatibility());  assertNull(java.targetCompatibility());  java.setTargetCompatibility(LanguageLevel.JDK_1_5);  applyChangesAndReparse(buildModel);  assertEquals(LanguageLevel.JDK_1_5,java.targetCompatibility());  JavaVersionDslElement targetVersionElement=java.getGradleDslElement().getProperty(TARGET_COMPATIBILITY_ATTRIBUTE_NAME,JavaVersionDslElement.class);  JavaVersionDslElement sourceVersionElement=java.getGradleDslElement().getProperty(SOURCE_COMPATIBILITY_ATTRIBUTE_NAME,JavaVersionDslElement.class);  assertNotNull(targetVersionElement);  assertNotNull(sourceVersionElement);  PsiElement targetPsi=targetVersionElement.getPsiElement();  PsiElement sourcePsi=sourceVersionElement.getPsiElement();  assertNotNull(targetPsi);  assertNotNull(sourcePsi);  assertEquals(targetPsi,sourcePsi.getPrevSibling().getPrevSibling());}  }
class C{  public MalformedURIException(){  super();}  }
class C{  private static Object toTagValue(final TagShortTermLog dtShortTerm){  Object tagValue=null;  if (dtShortTerm.getTagValue() != null) {    tagValue=TypeConverter.cast(dtShortTerm.getTagValue(),dtShortTerm.getTagDataType());  }  return tagValue;}  }
class C{  public void sendMessage(String message){  skype.sendUserMessage(this,message);}  }
class C{  public boolean executeImmediately(final String command){  throw new RuntimeException("Internal error: OLD executeImmediately()");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200717,skillcaster,num0,skillname);}  }
class C{  private boolean onTap(float rawX,float rawY){  int[] location=new int[2];  mGraphicOverlay.getLocationOnScreen(location);  float x=(rawX - location[0]) / mGraphicOverlay.getWidthScaleFactor();  float y=(rawY - location[1]) / mGraphicOverlay.getHeightScaleFactor();  Barcode best=null;  float bestDistance=Float.MAX_VALUE;  ArrayList<Barcode> allRetrieved=new ArrayList<>();  for (  BarcodeGraphic graphic : mGraphicOverlay.getGraphics()) {    Barcode barcode=graphic.getBarcode();    allRetrieved.add(barcode);    if (barcode.getBoundingBox().contains((int)x,(int)y)) {      best=barcode;      break;    }    float dx=x - barcode.getBoundingBox().centerX();    float dy=y - barcode.getBoundingBox().centerY();    float distance=(dx * dx) + (dy * dy);    if (distance < bestDistance) {      best=barcode;      bestDistance=distance;    }  }  if (best != null) {    if (barcodeRetriever != null)     if (supportMultipleScan()) {      barcodeRetriever.onRetrievedMultiple(best,mGraphicOverlay.getGraphics());    } else {      barcodeRetriever.onRetrieved(best);    }    return true;  }  return false;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  if (type != null) {    buf.append(type.toString() + " (." + type.getExtension()+ ") file");  } else {    buf.append("unknown file format");  }  if (byteLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", byte length: " + byteLength);  }  buf.append(", data format: " + format);  if (frameLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", frame length: " + frameLength);  }  return new String(buf);}  }
class C{  public <A>void publishEvents(final EventTranslatorOneArg<T,A> eventTranslator,final A[] arg){  ringBuffer.publishEvents(eventTranslator,arg);}  }
class C{  public GlobalLexica(Element doc){  Element eLexica=XMLUtils.getFirstElementByTagName(doc,LEXICA);  if (eLexica == null)   return;  setAmbiguityClasses(getGlobalLexicon(eLexica,"ambiguity_classes","Loading ambiguity classes"));  setWordClusters(getGlobalLexicon(eLexica,"word_clusters","Loading word clusters"));  setWordEmbeddings(getGlobalLexicon(eLexica,"word_embeddings","Loading word embeddings"));  setNamedEntityGazetteers(getGlobalLexicon(eLexica,"named_entity_gazetteers","Loading named entity gazetteers"));  setStopWords(getGlobalLexicon(eLexica,"stop_words","Loading stop words"));}  }
class C{  public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public void calculateSun(){  for (int x=0; x < Chunk.CHUNK_SIZE; x++) {    calculateSun(x);  }}  }
class C{  public static Box createHorizontalBox(int gap,@NotNull Component... components){  return createHorizontalBox(gap,Lists.newArrayList(components));}  }
class C{  private void stop(){  stopTimeout();  if (this.status != AccelListener.STOPPED) {    this.sensorManager.unregisterListener(this);  }  this.setStatus(AccelListener.STOPPED);  this.accuracy=SensorManager.SENSOR_STATUS_UNRELIABLE;}  }
class C{  public boolean isEmpty(){  return getRelativePeriods().isEmpty();}  }
class C{  public FileInfo query_file_info1(String file_id) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(file_id,parts);  if (this.errno != 0) {    return null;  }  return this.query_file_info(parts[0],parts[1]);}  }
class C{  public static List<Map<String,String>> listCountByFeatureForType(String productFeatureTypeId,HttpSession session,Delegator delegator){  String visitId=VisitHandler.getVisitId(session);  ProductSearchContext productSearchContext=new ProductSearchContext(delegator,visitId);  List<ProductSearchConstraint> productSearchConstraintList=ProductSearchOptions.getConstraintList(session);  if (UtilValidate.isNotEmpty(productSearchConstraintList)) {    productSearchContext.addProductSearchConstraints(productSearchConstraintList);  }  productSearchContext.finishKeywordConstraints();  productSearchContext.finishCategoryAndFeatureConstraints();  DynamicViewEntity dynamicViewEntity=productSearchContext.dynamicViewEntity;  List<EntityCondition> entityConditionList=productSearchContext.entityConditionList;  dynamicViewEntity.addMemberEntity("PFAC","ProductFeatureAppl");  dynamicViewEntity.addAlias("PFAC","pfacProductFeatureId","productFeatureId",null,null,Boolean.TRUE,null);  dynamicViewEntity.addAlias("PFAC","pfacFromDate","fromDate",null,null,null,null);  dynamicViewEntity.addAlias("PFAC","pfacThruDate","thruDate",null,null,null,null);  dynamicViewEntity.addAlias("PFAC","featureCount","productId",null,null,null,"count-distinct");  dynamicViewEntity.addViewLink("PROD","PFAC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productId"));  entityConditionList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("pfacThruDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("pfacThruDate",EntityOperator.GREATER_THAN,UtilDateTime.nowTimestamp())));  entityConditionList.add(EntityCondition.makeCondition("pfacFromDate",EntityOperator.LESS_THAN,UtilDateTime.nowTimestamp()));  dynamicViewEntity.addMemberEntity("PFC","ProductFeature");  dynamicViewEntity.addAlias("PFC","pfcProductFeatureTypeId","productFeatureTypeId",null,null,Boolean.TRUE,null);  dynamicViewEntity.addAlias("PFC","pfcDescription","description",null,null,Boolean.TRUE,null);  dynamicViewEntity.addViewLink("PFAC","PFC",Boolean.FALSE,ModelKeyMap.makeKeyMapList("productFeatureId"));  entityConditionList.add(EntityCondition.makeCondition("pfcProductFeatureTypeId",EntityOperator.EQUALS,productFeatureTypeId));  EntityListIterator eli=null;  try {    eli=EntityQuery.use(delegator).select(UtilMisc.toSet("pfacProductFeatureId","featureCount","pfcDescription","pfcProductFeatureTypeId")).from(dynamicViewEntity).where(entityConditionList).orderBy(productSearchContext.orderByList).cursorScrollInsensitive().queryIterator();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error in product search",module);    return null;  }  List<Map<String,String>> featureCountList=FastList.newInstance();  GenericValue searchResult=null;  while ((searchResult=eli.next()) != null) {    featureCountList.add(UtilMisc.<String,String>toMap("productFeatureId",(String)searchResult.get("pfacProductFeatureId"),"productFeatureTypeId",(String)searchResult.get("pfcProductFeatureTypeId"),"description",(String)searchResult.get("pfcDescription"),"featureCount",Long.toString((Long)searchResult.get("featureCount"))));  }  if (eli != null) {    try {      eli.close();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error closing ProductSearch EntityListIterator");    }  }  return featureCountList;}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  VideoBeanDao.createTable(db,ifNotExists);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public Duration(String string){  if (string.startsWith(DURATION_DATE_PREFIX)) {    int year=0;    int month=0;    int day=0;    int hour=0;    int minute=0;    int second=0;    List<String> outputList=extractDurationValues(string.substring(1));    boolean hasTime=(outputList.size() >= 2) && (outputList.get(0).endsWith(YEAR_SUFFIX) && (outputList.get(1).endsWith(HOUR_SUFFIX) || outputList.get(1).endsWith(MINUTE_SUFFIX) || outputList.get(1).endsWith(SECOND_SUFFIX)));    year=extractValue(outputList,YEAR_SUFFIX);    month=extractValue(outputList,MONTH_SUFFIX);    day=extractValue(outputList,DAY_SUFFIX);    if (hasTime) {      hour=extractValue(outputList,HOUR_SUFFIX);      minute=extractValue(outputList,MINUTE_SUFFIX);      second=extractValue(outputList,SECOND_SUFFIX);    }    setDuration(year,month,day,hour,minute,second);  } else   if (string.startsWith(DURATION_TIME_PREFIX)) {    int year=0;    int month=0;    int day=0;    int hour=0;    int minute=0;    int second=0;    List<String> outputList=extractDurationValues(string);    hour=extractValue(outputList,HOUR_SUFFIX);    minute=extractValue(outputList,MINUTE_SUFFIX);    second=extractValue(outputList,SECOND_SUFFIX);    setDuration(year,month,day,hour,minute,second);  } else {    String[] components=string.split(DURATION_TIME_PREFIX);    try {      Date date=df.parse((String)components[0]);      Date time=tf.parse((String)components[1]);      Calendar cal=Calendar.getInstance();      cal.setTime(time);      int hour=cal.get(Calendar.HOUR_OF_DAY);      int minute=cal.get(Calendar.MINUTE);      int seconds=cal.get(Calendar.SECOND);      cal.setTime(date);      cal.set(Calendar.HOUR,hour);      cal.set(Calendar.MINUTE,minute);      cal.set(Calendar.SECOND,seconds);      setDate(cal.getTime());    } catch (    ParseException e) {      ConsoleManager.getInstance().exception(this,e);    }  }}  }
class C{  public static Color createRandomColour(){  float r=rand.nextFloat();  float g=rand.nextFloat();  float b=rand.nextFloat();  Color randomColor=new Color(r,g,b);  return randomColor;}  }
class C{  public AgeFileFilter(Date cutoffDate){  this(cutoffDate,true);}  }
class C{  protected VideoSearchQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private JsonWriter open(int empty,String openBracket) throws IOException {  beforeValue();  push(empty);  out.write(openBracket);  return this;}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  private void checkTheMeteorGameFinishCondition(String[] packet){  increaseReceiveFinishEventCount();  if (getnReceiveFinishEventCount() >= getnMaxmumClients() && isCheckMeteorGameCheckFinishOneTime) {    sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_METEOR_GAME_FINISH + "");    isCheckMeteorGameCheckFinishOneTime=false;    setTheClientScoreAboutMeteorGame(packet[2]);  }}  }
class C{  public void java_io_ObjectOutputStream_getObjectFieldValue(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(LurePokemonEvent event){  if (!event.getCatchablePokemon().isEmpty() && mPref.getShowLuredPokemon()) {    setPokemonMarkers(event.getCatchablePokemon());  }}  }
class C{  protected boolean sameType(Object flowSet){  return (flowSet instanceof ValueArraySparseSet);}  }
class C{  public static boolean isWindowsClassicLookAndFeel(){  return UIUtils.isWindowsClassicLookAndFeel();}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory() && file.canRead()) {    return true;  } else   if (properties.selection_type == DialogConfigs.DIR_SELECT) {    return false;  } else {    String name=file.getName().toLowerCase();    for (    String ext : validExtensions) {      if (name.endsWith(ext)) {        return true;      }    }  }  return false;}  }
class C{  protected DocsSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  @Override public boolean heap_sensitive_intersection(IVarAbstraction qv){  int i, j;  PtInsNode qn;  SegmentNode p, q, pt[], qt[];  qn=(PtInsNode)qv;  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {    AllocNode an=it.next();    if (an instanceof StringConstantNode)     continue;    qt=qn.find_points_to(an);    if (qt == null)     continue;    pt=find_points_to(an);    for (i=0; i < PtInsIntervalManager.Divisions; ++i) {      p=pt[i];      while (p != null) {        for (j=0; j < PtInsIntervalManager.Divisions; ++j) {          q=qt[j];          while (q != null) {            if (quick_intersecting_test(p,q))             return true;            q=q.next;          }        }        p=p.next;      }    }  }  return false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  final MeganizeDAADialog dialog=new MeganizeDAADialog(getViewer().getFrame(),(Director)getDir());  final String command=dialog.showAndGetCommand();  if (command != null)   execute(command);}  }
class C{  public void tabLoadStarted(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.loadingStarted();}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  protected void deleteExceptionByteArrayRef(SuspendedJobEntity jobEntity){  ByteArrayRef exceptionByteArrayRef=jobEntity.getExceptionByteArrayRef();  if (exceptionByteArrayRef != null) {    exceptionByteArrayRef.delete();  }}  }
class C{  public GSQueueSenderImpl(GSSessionImpl sess,GSQueueImpl queue,IMessageConverter messageConverter) throws JMSException {  super(sess,queue,messageConverter);}  }
class C{  public MonsterStatusCursor queryMonsterStatus(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_MONSTER_STATUS;  qh.Columns=null;  qh.Selection=S.COLUMN_MONSTER_STATUS_MONSTER_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterStatusCursor(wrapHelper(qh));}  }
class C{  private static boolean isJsonString(final Object json){  boolean valid=false;  try {    if (json instanceof String) {      final JsonParser parser=mapper.getFactory().createParser((String)json);      while (parser.nextToken() != null) {      }      valid=true;    }  } catch (  IOException ignored) {  }  return valid;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public boolean removeUndefinedAttributes(){  LinkedList<String> undefined=new LinkedList<>();  for (  String attribute : getAttributeSet()) {    Map<String,Object> sample2values=getSamples2Values(attribute);    boolean ok=false;    for (    String sample : sample2values.keySet()) {      if (sample2values.get(sample) != null) {        ok=true;        break;      }    }    if (!ok)     undefined.add(attribute);  }  if (undefined.size() > 0)   removeAttributes(undefined);  return undefined.size() > 0;}  }
class C{  public static List<String> toList(String s){  List<String> newList=new LinkedList<String>();  if (s.startsWith("[") && s.endsWith("]")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      newList.add(entry);    }  } else {    throw new IllegalArgumentException("String is not from List.toString()");  }  return newList;}  }
class C{  @Override public boolean isDeprecated(){  return isDeprecated;}  }
class C{  public boolean isNonBlockingRead(){  return _nonBlockingRead;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (((PLA_HeaderViewListAdapter)mAdapter).removeHeader(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public ObjectFactory(){}  }
class C{  public static SSLContext createSSLContext(String trustedCert,String clientKey,String clientCert){  try {    SSLContext ctx=SSLContext.getInstance("TLS");    ctx.init(CertificateUtil.getKeyManagers("client",clientKey,clientCert),CertificateUtil.getTrustManagers("server",trustedCert),null);    return ctx;  } catch (  NoSuchAlgorithmException|KeyManagementException e) {    throw new RuntimeException("Failed to create SSLContext",e);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AttributesWindow viewer=(AttributesWindow)getViewer();  if (viewer != null) {    viewer.doSortByAlpha=true;    viewer.doSortByNrOfReads=false;    int div=viewer.getSplitPane().getDividerLocation();    viewer.getSplitPane().remove(viewer.getSplitPane().getTopComponent());    viewer.getSplitPane().setTopComponent(viewer.getTreePanel());    viewer.getSplitPane().setDividerLocation(div);  }}  }
class C{  public boolean detectAdBlockers(Info info){  if (info != null) {    info.method=Method.NONE;    info.details1="";    info.details2="";  }  return detectAppNames(info) || (detectHostName(info)) || detectInHostFile(info);}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getProperPairFlag()) {      return false;    }  } else {    if (!record.getProperPairFlag()) {      return false;    }  }  return true;}  }
class C{  public EmailBuilder from(String fromAddress){  this.from.add(fromAddress);  return this;}  }
class C{  public double[] processWindow(double[] window,int start) throws IllegalArgumentException {  int fftSize=(windowSize / 2) + 1;  if (start < 0)   throw new IllegalArgumentException("start must be a positve value");  if (window == null || window.length - start < windowSize)   throw new IllegalArgumentException("the given data array must not be a null value and must contain data for one window");  for (int j=0; j < windowSize; j++)   buffer[j]=window[j + start];  normalizedPowerFFT.transform(buffer,null);  Matrix x=new Matrix(buffer,windowSize);  x=x.getMatrix(0,fftSize - 1,0,0);  x=melFilterBanks.times(x);  double log10=10 * (1 / Math.log(10));  x.thrunkAtLowerBoundary(1);  x.logEquals();  x.timesEquals(log10);  x=dctMatrix.times(x);  return x.getColumnPackedCopy();}  }
class C{  public void tabSelected(long time,int id,int prevId){  if (findTabById(id) == null) {    tabCreated(time,id,prevId,true);  } else {    updateVisualTabOrdering();    mUpdateHost.requestUpdate();  }}  }
class C{  static boolean validateResponderProperties(){  boolean valid=true;  if (!SystemConfiguration.hasProperty(PLATFORM)) {    logger.info("Must have the option {}",PLATFORM);    valid=false;  }  if (!SystemConfiguration.hasProperty(QUERYINPUT)) {    logger.info("Must have the option " + QUERYINPUT);    valid=false;  }  if (!SystemConfiguration.hasProperty(OUTPUTFILE)) {    logger.info("Must have the option " + OUTPUTFILE);    valid=false;  }  if (!SystemConfiguration.hasProperty(DATAINPUTFORMAT)) {    logger.info("Must have the option " + DATAINPUTFORMAT);    valid=false;  }  String dataInputFormat=SystemConfiguration.getProperty(DATAINPUTFORMAT).toLowerCase();  if (dataInputFormat.equals(InputFormatConst.BASE_FORMAT)) {    if (!SystemConfiguration.hasProperty(BASEINPUTFORMAT)) {      logger.info("For base inputformt: Must have the option " + BASEINPUTFORMAT + " if using "+ InputFormatConst.BASE_FORMAT);      valid=false;    }    if (!SystemConfiguration.hasProperty(INPUTDATA)) {      logger.info("For base inputformt: Must have the option " + INPUTDATA + " if using "+ InputFormatConst.BASE_FORMAT);      valid=false;    }    if (!SystemConfiguration.hasProperty(BASEQUERY)) {      SystemConfiguration.setProperty(BASEQUERY,"?q=*");    } else     if (!SystemConfiguration.getProperty(BASEQUERY).startsWith("?q")) {      SystemConfiguration.setProperty(BASEQUERY,"?q=*");    }  } else   if (dataInputFormat.equals(InputFormatConst.ES)) {    if (!SystemConfiguration.hasProperty(ESRESOURCE)) {      logger.info("For ElasticSearch inputformt: Must have the option " + ESRESOURCE);      valid=false;    }    if (!SystemConfiguration.hasProperty(ESQUERY)) {      logger.info("For ElasticSearch inputformat: Must have the option " + ESQUERY);      valid=false;    }    if (!SystemConfiguration.hasProperty(ESNODES)) {      logger.info("For ElasticSearch inputformat: Must have the option " + ESNODES);      valid=false;    }    if (!SystemConfiguration.hasProperty(ESPORT)) {      logger.info("For ElasticSearch inputformat: Must have the option " + ESPORT);      valid=false;    }  } else   if (dataInputFormat.equalsIgnoreCase("standalone")) {    if (!SystemConfiguration.hasProperty(INPUTDATA)) {      logger.info("Must have the option " + INPUTDATA + " if using "+ InputFormatConst.BASE_FORMAT);      valid=false;    }  } else {    logger.info("Unsupported inputFormat = " + dataInputFormat);    valid=false;  }  if (SystemConfiguration.hasProperty(QUERYSCHEMAS)) {    SystemConfiguration.appendProperty("query.schemas",SystemConfiguration.getProperty(QUERYSCHEMAS));  }  if (SystemConfiguration.hasProperty(DATASCHEMAS)) {    SystemConfiguration.appendProperty("data.schemas",SystemConfiguration.getProperty(DATASCHEMAS));  }  if (!SystemConfiguration.hasProperty(USEHDFSLOOKUPTABLE)) {    SystemConfiguration.setProperty(USEHDFSLOOKUPTABLE,"false");  }  if (!SystemConfiguration.hasProperty(USEMODEXPJOIN)) {    SystemConfiguration.setProperty(USEMODEXPJOIN,"false");  }  if (!SystemConfiguration.hasProperty(NUMDATAPARTITIONS)) {    SystemConfiguration.setProperty(NUMDATAPARTITIONS,"1000");  }  if (!SystemConfiguration.hasProperty(NUMCOLMULTPARTITIONS)) {    SystemConfiguration.setProperty(NUMCOLMULTPARTITIONS,"1000");  }  if (!SystemConfiguration.hasProperty(COLMULTREDUCEBYKEY)) {    SystemConfiguration.setProperty(COLMULTREDUCEBYKEY,"false");  }  if (!SystemConfiguration.hasProperty(ALLOWEMBEDDEDQUERYSCHEMAS)) {    SystemConfiguration.setProperty(ALLOWEMBEDDEDQUERYSCHEMAS,"false");  }  if (!SystemConfiguration.hasProperty(EMBEDQUERYSCHEMA)) {    SystemConfiguration.setProperty(EMBEDQUERYSCHEMA,"false");  }  if (!SystemConfiguration.hasProperty(USELOCALCACHE)) {    SystemConfiguration.setProperty(USELOCALCACHE,"true");  }  if (!SystemConfiguration.hasProperty(BATCHSECONDS)) {    SystemConfiguration.setProperty(BATCHSECONDS,"30");  }  if (!SystemConfiguration.hasProperty(WINDOWLENGTH)) {    SystemConfiguration.setProperty(WINDOWLENGTH,"30");  }  if (!SystemConfiguration.hasProperty(USEQUEUESTREAM)) {    SystemConfiguration.setProperty(USEQUEUESTREAM,"false");  }  if (!SystemConfiguration.hasProperty(MAXBATCHES)) {    SystemConfiguration.setProperty(MAXBATCHES,"-1");  }  if (!SystemConfiguration.hasProperty(STOPGRACEFULLY)) {    SystemConfiguration.setProperty(STOPGRACEFULLY,"false");  }  if (valid) {    logger.info("loading schemas: dataSchemas = " + SystemConfiguration.getProperty("data.schemas") + " querySchemas = "+ SystemConfiguration.getProperty("query.schemas"));    try {      DataSchemaLoader.initialize();      QuerySchemaLoader.initialize();    } catch (    Exception e) {      e.printStackTrace();    }  }  return valid;}  }
class C{  public boolean hasPermission(Security security,GenericValue userLogin){  return OrderReadHelper.hasPermission(security,userLogin,orderHeader);}  }
class C{  public Map<String,Object> addToCart(String catalogId,String shoppingListId,String shoppingListItemSeqId,String productId,String productCategoryId,String itemType,String itemDescription,BigDecimal price,BigDecimal amount,BigDecimal quantity,java.sql.Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,java.sql.Timestamp shipBeforeDate,java.sql.Timestamp shipAfterDate,ProductConfigWrapper configWrapper,String itemGroupNumber,Map<String,? extends Object> context,String parentProductId){  Map<String,Object> result=null;  Map<String,Object> attributes=null;  String pProductId=null;  pProductId=parentProductId;  if (productId == null && price != null && price.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.price_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (quantity.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.quantity_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (amount != null && amount.compareTo(BigDecimal.ZERO) < 0) {    String errMsg=UtilProperties.getMessage(resource_error,"cart.amount_not_positive_number",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  String ddDate=(String)context.get("itemDesiredDeliveryDate");  if (!UtilValidate.isEmpty(ddDate)) {    try {      java.sql.Timestamp.valueOf((String)context.get("itemDesiredDeliveryDate"));    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidDesiredDeliveryDateSyntaxError",this.cart.getLocale()));    }  } else {    context.remove("itemDesiredDeliveryDate");  }  String comment=(String)context.get("itemComment");  if (UtilValidate.isEmpty(comment)) {    context.remove("itemComment");  }  if (!UtilValidate.isEmpty(context.get("useAsDefaultDesiredDeliveryDate"))) {    cart.setDefaultItemDeliveryDate((String)context.get("itemDesiredDeliveryDate"));  } else {    cart.setDefaultItemDeliveryDate(null);  }  if (!UtilValidate.isEmpty(context.get("useAsDefaultComment"))) {    cart.setDefaultItemComment((String)context.get("itemComment"));  } else {    cart.setDefaultItemComment(null);  }  for (int namesIdx=0; namesIdx < ShoppingCartItem.attributeNames.length; namesIdx++) {    if (attributes == null)     attributes=new HashMap<String,Object>();    if (context.containsKey(ShoppingCartItem.attributeNames[namesIdx])) {      attributes.put(ShoppingCartItem.attributeNames[namesIdx],context.get(ShoppingCartItem.attributeNames[namesIdx]));    }  }  GenericValue product=null;  if (productId != null) {    try {      product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Unable to lookup product : " + productId,module);    }    if (product == null || product.get("requireAmount") == null || "N".equals(product.getString("requireAmount"))) {      amount=null;    }    Debug.logInfo("carthelper productid " + productId,module);    Debug.logInfo("parent productid " + pProductId,module);  }  Map<String,Object> selectedFeatures=UtilHttp.makeParamMapWithPrefix(context,null,"FT",null);  Map<String,GenericValue> additionalFeaturesMap=FastMap.newInstance();  for (  String selectedFeatureType : selectedFeatures.keySet()) {    String selectedFeatureValue=(String)selectedFeatures.get(selectedFeatureType);    if (UtilValidate.isNotEmpty(selectedFeatureValue)) {      GenericValue productFeatureAndAppl=null;      try {        productFeatureAndAppl=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId",selectedFeatureType,"productFeatureId",selectedFeatureValue).filterByDate().queryFirst();      } catch (      GenericEntityException gee) {        Debug.logError(gee,module);      }      if (UtilValidate.isNotEmpty(productFeatureAndAppl)) {        productFeatureAndAppl.set("productFeatureApplTypeId","STANDARD_FEATURE");      }      additionalFeaturesMap.put(selectedFeatureType,productFeatureAndAppl);    }  }  Map<String,String> orderItemAttributes=FastMap.newInstance();  String orderItemAttributePrefix=EntityUtilProperties.getPropertyValue("order.properties","order.item.attr.prefix",delegator);  for (  Entry<String,? extends Object> entry : context.entrySet()) {    if (entry.getKey().toString().contains(orderItemAttributePrefix) && UtilValidate.isNotEmpty(entry.getValue())) {      orderItemAttributes.put(entry.getKey().replaceAll(orderItemAttributePrefix,""),entry.getValue().toString());    }  }  int itemId=-1;  try {    if (productId != null) {      itemId=cart.addOrIncreaseItem(productId,amount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,additionalFeaturesMap,attributes,orderItemAttributes,catalogId,configWrapper,itemType,itemGroupNumber,pProductId,dispatcher);    } else {      itemId=cart.addNonProductItem(itemType,itemDescription,productCategoryId,price,quantity,attributes,catalogId,itemGroupNumber,dispatcher);    }    if (itemId > -1 && shoppingListId != null && shoppingListItemSeqId != null) {      ShoppingCartItem item=cart.findCartItem(itemId);      item.setShoppingList(shoppingListId,shoppingListItemSeqId);    }  } catch (  CartItemModifyException e) {    if (cart.getOrderType().equals("PURCHASE_ORDER")) {      String errMsg=UtilProperties.getMessage(resource_error,"cart.product_not_valid_for_supplier",this.cart.getLocale());      errMsg=errMsg + " (" + e.getMessage()+ ")";      result=ServiceUtil.returnError(errMsg);    } else {      result=ServiceUtil.returnError(e.getMessage());    }    return result;  }catch (  ItemNotFoundException e) {    result=ServiceUtil.returnError(e.getMessage());    return result;  }  result=ServiceUtil.returnSuccess();  if (itemId != -1) {    result.put("itemId",new Integer(itemId));  }  return result;}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public TestEventCollectorImpl(){  this.testInfoEntries=Collections.synchronizedList(new ArrayList<TestInfo>());  this.startingDate=new Date();}  }
class C{  public static String trimToDummyIdentifier(String string){  int dummyIdentifierIndex=string.indexOf(CompletionUtilCore.DUMMY_IDENTIFIER);  if (dummyIdentifierIndex == -1) {    dummyIdentifierIndex=string.indexOf(CompletionUtilCore.DUMMY_IDENTIFIER_TRIMMED);  }  return dummyIdentifierIndex == -1 ? string : string.substring(0,dummyIdentifierIndex);}  }
class C{  @Override public void fatalError(String domain,String key,XMLParseException ex) throws XNIException {  printError("Fatal Error",ex);  throw ex;}  }
class C{  @Override public void onReset(){  if (this.status == AccelListener.RUNNING) {    this.stop();  }}  }
class C{  public boolean viewCartOnAdd(){  return viewCartOnAdd;}  }
class C{  public AdamsBashforthIntegrator(final int nSteps,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance) throws IllegalArgumentException {  super(METHOD_NAME,nSteps,nSteps,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree,Predicate filter,Schema nodeSchema,Schema edgeSchema){  checkGroupExists(group);  String ngroup=PrefuseLib.getGroupName(group,Graph.NODES);  String egroup=PrefuseLib.getGroupName(group,Graph.EDGES);  VisualTable nt, et;  nt=addTable(ngroup,tree.getNodeTable(),filter,nodeSchema);  et=addTable(egroup,tree.getEdgeTable(),filter,edgeSchema);  VisualTree vt=new VisualTree(nt,et,tree.getNodeKeyField(),tree.getEdgeSourceField(),tree.getEdgeTargetField());  vt.setVisualization(this);  vt.setGroup(group);  addDataGroup(group,vt,tree);  TupleManager ntm=new TupleManager(nt,vt,TableNodeItem.class);  TupleManager etm=new TupleManager(et,vt,TableEdgeItem.class);  nt.setTupleManager(ntm);  et.setTupleManager(etm);  vt.setTupleManagers(ntm,etm);  return vt;}  }
class C{  public DnDTransferItem(long modelId,List<DnDTransferComponent> components){  this(false,modelId,components);}  }
class C{  public void uploadNewFile(Context context,Account account,String[] localPaths,String[] remotePaths,String[] mimeTypes,Integer behaviour,Boolean createRemoteFolder,int createdBy){  Intent intent=new Intent(context,FileUploader.class);  intent.putExtra(FileUploader.KEY_ACCOUNT,account);  intent.putExtra(FileUploader.KEY_LOCAL_FILE,localPaths);  intent.putExtra(FileUploader.KEY_REMOTE_FILE,remotePaths);  intent.putExtra(FileUploader.KEY_MIME_TYPE,mimeTypes);  intent.putExtra(FileUploader.KEY_LOCAL_BEHAVIOUR,behaviour);  intent.putExtra(FileUploader.KEY_CREATE_REMOTE_FOLDER,createRemoteFolder);  intent.putExtra(FileUploader.KEY_CREATED_BY,createdBy);  context.startService(intent);}  }
class C{  public static String fieldNameToMethodName(String methodPrefix,String fieldName,boolean ignoreFirstLetterCase){  String methodName=null;  if (fieldName != null && fieldName.length() > 0) {    if (ignoreFirstLetterCase) {      methodName=methodPrefix + fieldName;    } else {      methodName=methodPrefix + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);    }  } else {    methodName=methodPrefix;  }  return methodName;}  }
class C{  public static FixedProxySelector parseProxySettings(String proxyVar){  if (proxyVar == null || proxyVar.trim().length() == 0) {    return null;  }  try {    if (proxyVar.indexOf(":/") == -1) {      proxyVar="http://" + proxyVar;    }    URL url=new URL(proxyVar);    String host=cleanIPv6(url.getHost());    int port=url.getPort();    if (port == -1) {      port=DEFAULT_PROXY_PORT;    }    return new FixedProxySelector(host.trim(),port);  } catch (  MalformedURLException e) {    Logger.log(ProxyUtil.class,Logger.LogLevel.WARNING,"Cannot parse Proxy Settings {0}",proxyVar);    return null;  }}  }
class C{  private void validateIntervalFeature() throws InvalidGenomicCoordsException {  if (!chrom.trim().equals(chrom)) {    System.err.println("Chrom name must not start or end with whitespaces. Got '" + chrom + "'");    throw new InvalidGenomicCoordsException();  }  if (from < 1 || to < 1 || (from > to)) {    System.err.println("Invalid coordinates: " + from + " "+ to);    throw new InvalidGenomicCoordsException();  }  if (this.strand != '+' && this.strand != '-' && this.strand != '.') {    System.err.println("Invalid strand char " + this.strand);    throw new InvalidGenomicCoordsException();  }}  }
class C{  @Inject public ReportingHandler(Injector injector){  this.injector=injector;}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  public String renderAsString(String combinedName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  String resourceName=ScreenFactory.getResourceNameFromCombined(combinedName);  String screenName=ScreenFactory.getScreenNameFromCombined(combinedName);  return this.render(resourceName,screenName,true);}  }
class C{  Uuid landlordUuid(){  return landlordUuid;}  }
class C{  private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){  String stringId=String.valueOf(id);  database.beginTransaction();  final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null);  if (cursor != null && cursor.moveToFirst()) {    int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);    int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex);    int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek;    if (Math.abs(weekDiff) >= NUM_WEEKS) {      deleteEntry(database,stringId);      if (bumpCount) {        createNewPlayedEntry(database,id);      }    } else     if (weekDiff != 0) {      int[] playCounts=new int[NUM_WEEKS];      if (weekDiff > 0) {        for (int i=0; i < NUM_WEEKS - weekDiff; i++) {          playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i));        }      } else       if (weekDiff < 0) {        for (int i=0; i < NUM_WEEKS + weekDiff; i++) {          playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff));        }      }      if (bumpCount) {        playCounts[0]++;      }      float score=calculateScore(playCounts);      if (score < .01f) {        deleteEntry(database,stringId);      } else {        ContentValues values=new ContentValues(NUM_WEEKS + 2);        values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);        values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);        for (int i=0; i < NUM_WEEKS; i++) {          values.put(getColumnNameForWeek(i),playCounts[i]);        }        database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});      }    } else     if (bumpCount) {      ContentValues values=new ContentValues(2);      int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE);      float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);      values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);      values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1);      database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});    }    cursor.close();  } else   if (bumpCount) {    createNewPlayedEntry(database,id);  }  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  @Override public void readAttributes(DataSourceAttributeListInterface attributeData){  if (attributeData == null) {    return;  }  List<DataSourceAttributeData> valueMap=new ArrayList<DataSourceAttributeData>();  SimpleFeatureCollection featureCollection=dataSourceInfo.getFeatureCollection();  if (featureCollection != null) {    SimpleFeatureIterator iterator=featureCollection.features();    if (iterator.hasNext()) {      SimpleFeature feature=iterator.next();      List<Object> attributes=feature.getAttributes();      for (int i=0; i < attributes.size(); i++) {        Name fieldName=fieldNameMap.get(i);        DataSourceAttributeData data=new DataSourceAttributeData(fieldName,fieldTypeMap.get(i),attributes.get(i));        valueMap.add(data);      }    }  }  attributeData.setData(valueMap);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public String computeConsensus(){  System.err.println("Computing consensus:");  final List<Pair<Integer,Integer>> list=new LinkedList<>();  for (int row=0; row < getNumberOfSequences(); row++) {    final Lane lane=getLane(row);    Pair<Integer,Integer> pair=new Pair<>(lane.getFirstNonGapPosition(),row);    list.add(pair);    pair=new Pair<>(lane.getLastNonGapPosition() + 1,row);    list.add(pair);  }  final Pair<Integer,Integer>[] array=(Pair<Integer,Integer>[])list.toArray(new Pair[list.size()]);  Arrays.sort(array);  ProgressPercentage progress=new ProgressPercentage();  progress.setCancelable(false);  progress.setMaximum(array.length + 2);  StringBuilder buf=new StringBuilder();  final int firstPos=array.length > 0 ? array[0].get1() : getLength();  for (int col=1; col <= firstPos; col++) {    buf.append('-');  }  progress.incrementProgress();  final Set<Integer> activeRows=new HashSet<>();  for (int i=0; i < array.length; i++) {    progress.incrementProgress();    int pos=array[i].get1();    while (true) {      int row=array[i].get2();      if (activeRows.contains(row))       activeRows.remove(row); else       activeRows.add(row);      if (i + 1 < array.length && array[i + 1].get1() == pos) {        i++;        progress.incrementProgress();      } else       break;    }    final int nextPos=(i + 1 < array.length ? array[i + 1].get1() : getLength());    if (debug)     System.err.println("Active rows: " + Basic.toString(activeRows,","));    if (activeRows.size() > 0) {      for (int col=pos; col < nextPos; col++) {        if (debug)         System.err.println("col: " + col);        Map<Character,Integer> char2count=new HashMap<>();        for (        final int row : activeRows) {          final Lane lane=getLane(row);          char ch=lane.charAt(col);          if (debug)           System.err.println("row: " + row + " ch="+ ch);          if (debug)           System.err.println("row: " + lane.getFirstNonGapPosition() + " - "+ lane.getLastNonGapPosition());          if (Character.isLetter(ch) || ch == ' ') {            Integer count=char2count.get(ch);            if (count == null)             char2count.put(ch,1); else             char2count.put(ch,count + 1);          }        }        Character best=null;        int bestCount=0;        for (        Character ch : char2count.keySet()) {          if (char2count.get(ch) > bestCount) {            best=ch;            bestCount=char2count.get(ch);          }        }        if (best != null) {          if (bestCount >= char2count.keySet().size() / 2)           best=Character.toUpperCase(best); else           best=Character.toLowerCase(best);          buf.append(best);        } else         buf.append('-');      }    } else {      for (int col=pos; col < nextPos; col++) {        buf.append('-');      }    }  }  int lastPos=array.length > 0 ? array[array.length - 1].get1() : getLength();  for (int col=lastPos; col < lastPos; col++) {    buf.append('-');  }  progress.incrementProgress();  progress.close();  return buf.toString();}  }
class C{  @Override public void normalize(){  if (isNormalized()) {    return;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  ChildNode kid;  for (kid=firstChild; kid != null; kid=kid.nextSibling) {    kid.normalize();  }  isNormalized(true);}  }
class C{  public static List<String> split(String str,String delim){  List<String> splitList=null;  StringTokenizer st=null;  if (str == null)   return splitList;  if (delim != null)   st=new StringTokenizer(str,delim); else   st=new StringTokenizer(str);  if (st != null && st.hasMoreTokens()) {    splitList=new LinkedList<String>();    while (st.hasMoreTokens())     splitList.add(st.nextToken());  }  return splitList;}  }
class C{  public S1Interval expanded(double radius){  if (isEmpty()) {    return this;  }  if (getLength() + 2 * radius >= 2 * S2.M_PI - 1e-15) {    return full();  }  double lo=Math.IEEEremainder(lo() - radius,2 * S2.M_PI);  double hi=Math.IEEEremainder(hi() + radius,2 * S2.M_PI);  if (lo == -S2.M_PI) {    lo=S2.M_PI;  }  return new S1Interval(lo,hi);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public static List<? extends ImportModule> performImport(@NonNull GradleImport importer,@NonNull Collection<EclipseProject> projects){  List<EclipseImportModule> modules=Lists.newArrayList();  List<EclipseImportModule> replacedByDependencies=Lists.newArrayList();  for (  EclipseProject project : projects) {    EclipseImportModule module=new EclipseImportModule(importer,project);    module.initialize();    if (module.isReplacedWithDependency()) {      replacedByDependencies.add(module);    } else {      modules.add(module);    }  }  for (  EclipseImportModule replaced : replacedByDependencies) {    assert replaced.getReplaceWithDependencies() != null;    EclipseProject project=replaced.getProject();    for (    EclipseImportModule module : modules) {      if (module.getProject().getAllLibraries().contains(project)) {        module.addDependencies(replaced.getReplaceWithDependencies());      }    }  }  for (  EclipseImportModule module : modules) {    module.removeJarDependencies();  }  Collections.sort(modules);  return modules;}  }
class C{  public void loadDataStringFromFile(String sFilename){  try {    Histogram.loadDataStringFromFile(sFilename);  } catch (  IOException ioe) {    ioe.printStackTrace();    Histogram.setDataString("");    Graph.setDataString("");  }}  }
class C{  public ItemToMaterialCursor queryItemsForMaterial(long material_item_id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Selection="itm." + S.COLUMN_ITEM_TO_MATERIAL_MATERIAL_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + material_item_id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="itm.amount DESC";  qh.Limit=null;  return new ItemToMaterialCursor(wrapJoinHelper(builderItemToMaterial(),qh));}  }
class C{  public double distanceSquared(Location o){  if (o == null) {    throw new IllegalArgumentException("Cannot measure distance to a null location");  } else   if (o.getWorld() == null || getWorld() == null) {    throw new IllegalArgumentException("Cannot measure distance to a null world");  } else   if (o.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and "+ o.getWorld().getName());  }  return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyNull(String propertyName){  return property(propertyName,isNull());}  }
class C{  @Deployment public void testSignalThrowAndCatchInSameTransaction(){  String fileExistsVar="fileexists";  FileExistsMock.getInstance().removeFile();  ProcessInstance firstProcessInstance=runtimeService.startProcessInstanceByKey("signalBoundaryProcess");  assertNotNull(firstProcessInstance);  Task firstTask=taskService.createTaskQuery().singleResult();  assertEquals("Add a file",firstTask.getName());  Map<String,Object> vars=runtimeService.getVariables(firstTask.getExecutionId());  assertEquals(false,vars.get(fileExistsVar));  ProcessInstance secondProcessInstance=runtimeService.startProcessInstanceByKey("signalBoundaryProcess");  assertNotNull(secondProcessInstance);  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  Task secondTask=taskService.createTaskQuery().processInstanceId(secondProcessInstance.getProcessInstanceId()).singleResult();  assertEquals("Add a file",secondTask.getName());  vars=runtimeService.getVariables(secondTask.getExecutionId());  assertEquals(false,vars.get(fileExistsVar));  taskService.claim(firstTask.getId(),"user");  FileExistsMock.getInstance().touchFile();  taskService.complete(firstTask.getId());  List<Task> usingTask=taskService.createTaskQuery().taskName("Use the file").list();  assertEquals(1,usingTask.size());}  }
class C{  public boolean isCellularExperimentEnabled(){  return mSharedPreferences.getBoolean(PREF_CELLULAR_EXPERIMENT,false);}  }
class C{  public void press(int... keys){  for (  int key : keys) {    press(key);  }}  }
class C{  public void clear(){  fDepth=0;}  }
class C{  protected GroupsIsMemberQueryWithExtended groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathLess(String path,Comparable<?> value){  return path(path,less(value));}  }
class C{  public Builder intoDependencies(@Nullable SetMultimap<String,String> dependencies){  myDependencies=dependencies;  return this;}  }
class C{  public static synchronized ExamplePointInterface createExamplePoint(Object object){  if (examplePointImpl == null) {    examplePointImpl=new ExamplePointImpl();  }  return examplePointImpl;}  }
class C{  public static AlarmCacheObject createTestAlarm2(){  AlarmCacheObject alarm1=new AlarmCacheObject();  alarm1.setId(Long.valueOf(2));  alarm1.setFaultFamily("fault family 2");  alarm1.setFaultMember("fault member 2");  alarm1.setFaultCode(2);  AlarmCondition condition=AlarmCondition.fromConfigXML("<AlarmCondition class=\"cern.c2mon.server.common.alarm.ValueAlarmCondition\">" + "<alarm-value type=\"Boolean\">false</alarm-value></AlarmCondition>");  alarm1.setCondition(condition);  alarm1.setInfo("alarm info");  alarm1.setState(AlarmCondition.ACTIVE);  alarm1.setTimestamp(new Timestamp(System.currentTimeMillis() - 2000));  return alarm1;}  }
class C{  public int numberOfBins(){  return m_nbins;}  }
class C{  public void restartReopenThread(){  if (reopenThread != null) {    reopenThread.close();  }  if (reopenThreadPrimary != null) {    reopenThreadPrimary.close();  }  if (nrtPrimaryNode != null) {    assert manager == null;    assert searcherManager != null;    assert nrtReplicaNode == null;    reopenThreadPrimary=new ControlledRealTimeReopenThread<IndexSearcher>(writer,searcherManager,indexState.maxRefreshSec,indexState.minRefreshSec);    reopenThreadPrimary.setName("LuceneNRTPrimaryReopen-" + name);    reopenThreadPrimary.start();  } else   if (manager != null) {    if (reopenThread != null) {      reopenThread.close();    }    reopenThread=new ControlledRealTimeReopenThread<SearcherAndTaxonomy>(writer,manager,indexState.maxRefreshSec,indexState.minRefreshSec);    reopenThread.setName("LuceneNRTReopen-" + name);    reopenThread.start();  }}  }
class C{  public SignatureAttr(String s){  sig=new AsciiCP(s);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean contains(String voiceName){  return (getVoice(voiceName) != null);}  }
class C{  private static int changeIndexSign(final int index){  return -index - 1;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void remainder(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){  final double rem=FastMath.IEEEremainder(lhs[lhsOffset],rhs[rhsOffset]);  final double k=FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);  result[resultOffset]=rem;  for (int i=1; i < getSize(); ++i) {    result[resultOffset + i]=lhs[lhsOffset + i] - k * rhs[rhsOffset + i];  }}  }
class C{  public VideoReorderVideosQuery reorderVideos(UserActor actor,int ownerId,int videoId){  return new VideoReorderVideosQuery(getClient(),actor,ownerId,videoId);}  }
class C{  private Index(ByteBuffer bb) throws BufferUnderflowException, MaryConfigurationException {  assert bb != null : "null argument";  load(bb);}  }
class C{  private boolean videoMatch(VideoFormat vf1,VideoFormat vf2){  if (vf1 instanceof RGBFormat && vf2 instanceof RGBFormat) {    RGBFormat rgbf1=(RGBFormat)vf1;    RGBFormat rgbf2=(RGBFormat)vf2;    return rgbf1.getBitsPerPixel() == rgbf2.getBitsPerPixel();  }  return vf1.getEncoding().equals(vf2.getEncoding());}  }
class C{  public SlowAvailableExpressions(Body b){  SlowAvailableExpressionsAnalysis analysis=new SlowAvailableExpressionsAnalysis(new ExceptionalUnitGraph(b));{    unitToPairsAfter=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToPairsBefore=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsAfter=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsBefore=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);    for (    Unit s : b.getUnits()) {      FlowSet<Value> set=analysis.getFlowBefore(s);      List<UnitValueBoxPair> pairsBefore=new ArrayList<UnitValueBoxPair>();      List<UnitValueBoxPair> pairsAfter=new ArrayList<UnitValueBoxPair>();      Chain<EquivalentValue> equivsBefore=new HashChain<EquivalentValue>();      Chain<EquivalentValue> equivsAfter=new HashChain<EquivalentValue>();      for (      Value v : set) {        Stmt containingStmt=analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        EquivalentValue ev=new EquivalentValue(v);        pairsBefore.add(p);        if (!equivsBefore.contains(ev))         equivsBefore.add(ev);      }      unitToPairsBefore.put(s,pairsBefore);      unitToEquivsBefore.put(s,equivsBefore);      for (      Value v : analysis.getFlowAfter(s)) {        Stmt containingStmt=analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        EquivalentValue ev=new EquivalentValue(v);        pairsAfter.add(p);        if (!equivsAfter.contains(ev))         equivsAfter.add(ev);      }      unitToPairsAfter.put(s,pairsAfter);      unitToEquivsAfter.put(s,equivsAfter);    }  }}  }
class C{  public void entryUnmatchedSA(EntryUnmatchedPacket packet) throws SAException, EntryDeletedException {  Context context=null;  try {    context=_cacheManager.getCacheContext();    context.setOperationID(packet.getOperationID());    context.setOperationVisibilityTime(packet.getCreationTime());    if (!_cacheManager.getTemplatesManager().anyNotifyUnmatchedTemplates())     return;    try {      context.setFromReplication(packet.isFromReplication());      NotifyContextsHolder notifyContextHolder=new NotifyContextsHolder(packet.getEntryHolder(),packet.getNewEntryHolder(),context.getOperationID(),NotifyActionType.NOTIFY_UNMATCHED);      _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);    }  finally {      context.setFromReplication(false);    }  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0d,0.00396825396825,0.103174603175,.5,0.896825396825,0.996031746032,1,1};}  }
class C{  public boolean addOnItemClickListener(OnItemClickListener itemClickListener){  return clickListeners.add(itemClickListener);}  }
class C{  public <T>String makeStringLiteral(T value){  return (value != null) ? ("\"" + makeStringValue(value) + "\"") : this.literalDQGeneralDefault;}  }
class C{  private void createColumns(Table table,TableLayout layout){  TableColumn col;  col=new TableColumn(table,SWT.NONE);  col.setResizable(false);  layout.addColumnData(new ColumnWeightData(1,true));  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("SvnPropertiesView.propertyName"));  layout.addColumnData(new ColumnWeightData(60,true));  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("SvnPropertiesView.propertyValue"));  layout.addColumnData(new ColumnWeightData(120,true));}  }
class C{  protected PhotosGetCommentsQueryWithExtended photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  public void addSplit(String splitLabel){  if (mDisabled)   return;  long now=SystemClock.elapsedRealtime();  mSplits.add(now);  mSplitLabels.add(splitLabel);}  }
class C{  public boolean isShowOnlyMinMaxEnabled(){  return mShowOnlyMinMax;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public static Zmat o(Zmat A,Zmat B) throws JampackException {  if (A.nrow != B.nrow || A.ncol != B.ncol)   throw new JampackException("Matrices not conformable for subtraction");  Zmat C=new Zmat(A.nrow,A.ncol);  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {    C.re[i][j]=A.re[i][j] - B.re[i][j];    C.im[i][j]=A.im[i][j] - B.im[i][j];  }  return C;}  }
class C{  private void resetData(){  mId=-1;  mRemotePath=null;  mParentId=0;  mLocalPath=null;  mMimeType=null;  mLength=0;  mCreationTimestamp=0;  mModifiedTimestamp=0;  mModifiedTimestampAtLastSyncForData=0;  mLastSyncDateForProperties=0;  mLastSyncDateForData=0;  mFavorite=false;  mNeedsUpdating=false;  mEtag=null;  mShareByLink=false;  mPublicLink=null;  mPermissions=null;  mRemoteId=null;  mNeedsUpdateThumbnail=false;  mIsDownloading=false;  mEtagInConflict=null;  mShareWithSharee=false;}  }
class C{  public static BufferedReader createBufferedReaderFromResource(final String name) throws IOException {  final InputStream resourceAsStream;  resourceAsStream=StatisticalReferenceDatasetFactory.class.getResourceAsStream(name);  if (resourceAsStream == null) {    throw new IOException("could not find resource " + name);  }  return new BufferedReader(new InputStreamReader(resourceAsStream));}  }
class C{  private void initData(){  this.adapter=new DownloadAdapter(this);}  }
class C{  public static XMLInputSource resolveDocument(XSDDescription desc,Hashtable locationPairs,XMLEntityResolver entityResolver) throws IOException {  String loc=null;  if (desc.getContextType() == XSDDescription.CONTEXT_IMPORT || desc.fromInstance()) {    String namespace=desc.getTargetNamespace();    String ns=namespace == null ? XMLSymbols.EMPTY_STRING : namespace;    LocationArray tempLA=(LocationArray)locationPairs.get(ns);    if (tempLA != null)     loc=tempLA.getFirstLocation();  }  if (loc == null) {    String[] hints=desc.getLocationHints();    if (hints != null && hints.length > 0)     loc=hints[0];  }  String expandedLoc=XMLEntityManager.expandSystemId(loc,desc.getBaseSystemId(),false);  desc.setLiteralSystemId(loc);  desc.setExpandedSystemId(expandedLoc);  return entityResolver.resolveEntity(desc);}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  startActivity(new Intent(CaptureActivity.this,ResultActivity.class).putExtras(bundle));}  }
class C{  public AbortPreparedTransactionSpaceOperationRequest(){}  }
class C{  public ChangeReport onSubEquipmentUnitRemove(SubEquipmentUnitRemove subEquipmentUnitRemove){  log.debug("onSubEquipmentUnitRemove - entering onSubEquipmentUnitRemove()..");  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  ChangeReport changeReport=new ChangeReport(subEquipmentUnitRemove);  changeReport.setState(CHANGE_STATE.SUCCESS);  EquipmentConfiguration parentEquipmentConfiguration=configuration.getEquipmentConfiguration(subEquipmentUnitRemove.getParentEquipmentId());  if (parentEquipmentConfiguration == null) {    changeReport.appendError("Parent Equipment unit id: " + subEquipmentUnitRemove.getParentEquipmentId() + " for SubEquipment unit "+ subEquipmentUnitRemove.getSubEquipmentId()+ " is unknown");    changeReport.setState(CHANGE_STATE.FAIL);    return changeReport;  }  SubEquipmentConfiguration subEquipmentConfiguration=parentEquipmentConfiguration.getSubEquipmentConfiguration(subEquipmentUnitRemove.getSubEquipmentId());  if (subEquipmentConfiguration == null) {    changeReport.appendWarn("SubEquipment unit id: " + subEquipmentUnitRemove.getSubEquipmentId() + " is unknown");  } else {    parentEquipmentConfiguration.getSubEquipmentConfigurations().remove(subEquipmentConfiguration.getId());  }  return changeReport;}  }
class C{  private static String prefixForTimestamp(DateTime timestamp){  return String.format("monsoon-%04d%02d%02d-%02d%02d",timestamp.getYear(),timestamp.getMonthOfYear(),timestamp.getDayOfMonth(),timestamp.getHourOfDay(),timestamp.getMinuteOfHour());}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  private static void extractSimpleAttributes(SimpleFeatureTypeBuilder b,Document doc,Map<String,List<String>> namespacePrefixes,List<DataSourceFieldInterface> processedFieldList,List<String> geometryList){  if (geometryList == null) {    return;  }  if (processedFieldList == null) {    return;  }  if (doc == null) {    return;  }  List<NodeList> completeNodeList=getNodeList(doc,namespacePrefixes,OGC_NAMESPACE,PROPERTY_NAME);  boolean addField=false;  for (  NodeList nodeList : completeNodeList) {    for (int index=0; index < nodeList.getLength(); index++) {      Node node=nodeList.item(index);      String fieldName=node.getTextContent();      if (!fieldExists(processedFieldList,fieldName)) {        Class<?> fieldType=String.class;        Node parent=node.getParentNode();        NamespaceHelper namespace=new NamespaceHelper(parent);        addField=true;        if (namespace.isElement(namespacePrefixes.get(OGC_NAMESPACE),FUNCTION)) {          Node parentAgain=parent.getParentNode();          if (parentAgain != null) {            NamespaceHelper geometryNamespace=new NamespaceHelper(parentAgain);            if (geometryNamespace.isElement(namespacePrefixes.get(SLD_NAMESPACE),GEOMETRY_FIELD)) {              addField=false;            }          }          if (addField) {            Element e=(Element)parent;            String functionName=e.getAttribute(FUNCTION_NAME);            Class<?> tmpFieldType=FunctionManager.getInstance().getFunctionType(functionName);            if (tmpFieldType != null) {              fieldType=tmpFieldType;            }          }        } else         if (namespace.isElement(namespacePrefixes.get(SLD_NAMESPACE),GEOMETRY_FIELD)) {          addField=false;          geometryList.add(fieldName);        }        if (addField) {          DataSourceFieldInterface field=new DataSourceField(fieldName,fieldType);          processedFieldList.add(field);          b.add(fieldName,fieldType);        }      }    }  }}  }
class C{  public VlcSession(Context context,Handler serviceHandler){  super(context,serviceHandler);  Log.d(TAG,"Session created (" + mSessionNumber + ")");  SharedPreferences sharedPreferences=context.getSharedPreferences(Constants.PREFERENCE_TVHEADEND,Context.MODE_PRIVATE);  ArrayList<String> options=new ArrayList<>();  options.add("--http-reconnect");  options.add("--network-caching=2000");  if (sharedPreferences.getBoolean(Constants.KEY_DEINTERLACE_ENABLED,false)) {    String method=sharedPreferences.getString(Constants.KEY_DEINTERLACE_METHOD,null);    Log.d(TAG,"Using VLC deinterlace mode: " + method);    options.add("--video-filter=deinterlace");    options.add("--deinterlace=-1");    options.add("--deinterlace-mode=" + method);  }  mLibVLC=new LibVLC(options);  String userAgent=getUserAgent(mContext);  mLibVLC.setUserAgent(userAgent,userAgent);}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  public EqIOException(final String descr){  super(descr);}  }
class C{  static StatisticsResult areStatisticsAuthorized(){  final StatisticsConnectionService service=new StatisticsConnectionService();  final String serviceUrl=service.getServiceUrl();  if (serviceUrl == null) {    return new StatisticsResult(StatisticsResult.ResultCode.ERROR_IN_CONFIG,"ERROR");  }  if (!service.isTransmissionPermitted()) {    return new StatisticsResult(StatisticsResult.ResultCode.NOT_PERMITTED_SERVER,"NOT_PERMITTED");  }  return new StatisticsResult(StatisticsResult.ResultCode.SEND,"OK");}  }
class C{  public RemoteEvent dequeue(){  Uuid uuid=_readyEvents.poll();  if (uuid == null)   return null;  SingleProducer producer=getProducer(uuid);  return producer.popNextReadyEvent();}  }
class C{  public EmailBuilder withBody(EmailBody body){  this.body=body;  return this;}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry,String eventId) throws JobManagerException {  String dataId=null;  try {    GenericValue runtimeData=delegator.makeValue("RuntimeData");    runtimeData.set("runtimeInfo",XmlSerializer.serialize(context));    runtimeData=delegator.createSetNextSeqId(runtimeData);    dataId=runtimeData.getString("runtimeDataId");  } catch (  GenericEntityException ee) {    throw new JobManagerException(ee.getMessage(),ee);  }catch (  SerializeException se) {    throw new JobManagerException(se.getMessage(),se);  }catch (  IOException ioe) {    throw new JobManagerException(ioe.getMessage(),ioe);  }  schedule(jobName,poolName,serviceName,dataId,startTime,frequency,interval,count,endTime,maxRetry,eventId);}  }
class C{  public Builder maxZoom(Number maxZoom){  this.maxZoom=maxZoom;  return this;}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  @Override public void invalidateView(){  mDelegate.invalidateView();}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public static JScrollPane newTableScrollPane(JComponent comp){  return new TableScrollPane(comp);}  }
class C{  public int lastIndexOf(int offset,short value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  private boolean processKeyUp(int keyCode){  if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) {    dismiss();    return true;  } else   if (keyCode == KeyEvent.KEYCODE_TAB) {    if (mInKbMode) {      if (isTypedTimeFullyLegal()) {        finishKbMode(true);      }      return true;    }  } else   if (keyCode == KeyEvent.KEYCODE_ENTER) {    if (mInKbMode) {      if (!isTypedTimeFullyLegal()) {        return true;      }      finishKbMode(false);    }    onTimeSet(mTimePicker,mTimePicker.getHours(),mTimePicker.getMinutes());    return true;  } else   if (keyCode == KeyEvent.KEYCODE_DEL) {    if (mInKbMode) {      if (!mTypedTimes.isEmpty()) {        int deleted=deleteLastTypedKey();        String deletedKeyStr;        if (deleted == getAmOrPmKeyCode(HALF_DAY_1)) {          deletedKeyStr=mAmText;        } else         if (deleted == getAmOrPmKeyCode(HALF_DAY_2)) {          deletedKeyStr=mPmText;        } else {          deletedKeyStr=String.format("%d",getValFromKeyCode(deleted));        }        Utils.tryAccessibilityAnnounce(mTimePicker,String.format(mDeletedKeyFormat,deletedKeyStr));        updateDisplay(true);      }    }  } else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourMode && (keyCode == getAmOrPmKeyCode(HALF_DAY_1) || keyCode == getAmOrPmKeyCode(HALF_DAY_2)))) {    if (!mInKbMode) {      if (mTimePicker == null) {        Log.e(TAG,"Unable to initiate keyboard mode, TimePicker was null.");        return true;      }      mTypedTimes.clear();      tryStartingKbMode(keyCode);      return true;    }    if (addKeyIfLegal(keyCode)) {      updateDisplay(false);    }    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_USER_KICKED(String value0){  return new SM_SYSTEM_MESSAGE(1300624,value0);}  }
class C{  public GroupsSetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.setCallbackSettings",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public static void actions(Context context,Api api,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){  GoogleApiClientActions.create(context.getApplicationContext(),new ApiDefinition(api),onClientConnected,onError);}  }
class C{  public NewsfeedGetBannedQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200389,value0,skillname);}  }
class C{  protected final void fireColumnEvent(int idx,int prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public static void deletePermit(String permitId,@Nullable AirMapCallback<Void> callback){  PilotService.deletePermit(permitId,callback);}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  @Deprecated public void onFailure(Throwable error,String content){  onFailure(error);}  }
class C{  public static Map<String,String> strToMap(String str,String delim){  return strToMap(str,delim,false);}  }
class C{  public static ProbeItemDescriptor continuousLineFillItem(String name,String description,ItemValueFormatter formatter){  return continuousItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,DEFAULT_COLOR);}  }
class C{  @NotNull private static ImmutableCollection<String> findAllDependencies(@NotNull GradleBuildModel buildModel){  HashSet<String> existingDependencies=Sets.newHashSet();  for (  ArtifactDependencyModel dependency : buildModel.dependencies().artifacts()) {    existingDependencies.add(dependency.group().value() + ":" + dependency.name().value());  }  ImmutableList.Builder<String> dependenciesBuilder=ImmutableList.builder();  RepositoryUrlManager repositoryUrlManager=RepositoryUrlManager.get();  for (  SupportLibrary library : SupportLibrary.values()) {    GradleCoordinate libraryCoordinate=library.getGradleCoordinate("+");    if (!existingDependencies.contains(libraryCoordinate.getId())) {      GradleCoordinate coordinate=repositoryUrlManager.resolveDynamicCoordinate(libraryCoordinate,buildModel.getProject());      if (coordinate != null) {        dependenciesBuilder.add(coordinate.toString());      }    }  }  return dependenciesBuilder.build();}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  @Override public int compareTo(Histogram o){  int cmp=0;  final Iterator<Bucket> iter=buckets_.iterator(), o_iter=o.buckets_.iterator();  while (cmp == 0 && iter.hasNext() && o_iter.hasNext()) {    final Bucket next=iter.next(), o_next=o_iter.next();    cmp=Double.compare(next.getRange().getFloor(),o_next.getRange().getFloor());    if (cmp == 0)     cmp=Double.compare(next.getRange().getCeil(),o_next.getRange().getCeil());    if (cmp == 0)     cmp=Double.compare(next.getEvents(),o_next.getEvents());  }  if (cmp == 0)   cmp=(iter.hasNext() ? 1 : (o_iter.hasNext() ? -1 : 0));  return cmp;}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  this.meta=((SortKeyStepMeta)smi);  this.data=((SortKeyStepData)sdi);  return super.init(smi,sdi);}  }
class C{  private void requestMoveOperation(Intent data){  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);  ArrayList<OCFile> files=data.getParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES);  getFileOperationsHelper().moveFiles(files,folderToMoveAt);}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  public void addModifier(Modifier node){  List<Modifier> list=(parent == null || state == null) ? getModifierListNoTransform() : getModifierList();  list.addChild(node);}  }
class C{  private void stopTimer(){  if (taskId != -1) {    plugin.getServer().getScheduler().cancelTask(taskId);    taskId=-1;  }}  }
class C{  public TObjectShortHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static boolean isSSN(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedSSN=stripCharsInBag(s,SSNDelimiters);  return (isInteger(normalizedSSN) && normalizedSSN.length() == digitsInSocialSecurityNumber);}  }
class C{  public ActionList(long duration){  super(duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  public void toServer(){  OpenModLoader.getSidedHandler().getClientPlayer().connection.sendPacket(new PacketWrapper(channel,new Packet(this)));}  }
class C{  private void formWindowClosed(java.awt.event.WindowEvent evt){  saveSettings();  System.exit(0);}  }
class C{  private static boolean inKingSectionLikeHash(String key,String value){  String hashValue=(String)kingSectionLikeHash.get(key);  if (hashValue != null) {    return (hashValue.equals(value));  } else {    return false;  }}  }
class C{  RevealBuilder(@NonNull final View viewToReveal){  this.mViewToReveal=viewToReveal;}  }
class C{  public static short indicator(final short x){  return (x >= ZS) ? PS : NS;}  }
class C{  public SlickForm withDefaultFields(){  FormField userField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_user).withHint(mContext.getString(R.string.form_field_username));  FormField emailField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_email).withHint(mContext.getString(R.string.form_field_email));  FormField passField=new FormField(mContext).withType(PASSWORD).withIcon(R.drawable.ic_slick_lock).withHint(mContext.getString(R.string.form_field_password));  this.formFields.add(userField);  this.formFields.add(emailField);  this.formFields.add(passField);  return this;}  }
class C{  private int readCounter() throws DataFallbackException {  final int counter;  openCounterDataInputStream();  try {    String line;    line=dInput.readLine();    if (line != null) {      counter=new Integer(line).intValue();      goToLine(counter);      if (LOG.isDebugEnabled())       LOG.debug("The counter file " + counterFile.getName() + " has been read");    } else {      throw new DataFallbackException("readCounter() - The counter could not be read, the counter file is empty");    }  } catch (  IOException e) {    LOG.error("Exception is: " + e.getMessage());    throw new DataFallbackException("readCounter() - The counter could not be read " + e.getMessage());  } finally {    closeCounterDataInputStream();  }  return counter;}  }
class C{  public boolean removeChild(Node n){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public Value max(Value num){  return new AggregationFunction(num,AggregationType.MAXIMUM);}  }
class C{  public Matrix zoom(float scaleX,float scaleY,float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(scaleX,scaleY,x,y);  return save;}  }
class C{  public EncounterResult encounterNormalPokemon() throws LoginFailedException, RemoteServerException {  return AsyncHelper.toBlocking(encounterNormalPokemonAsync());}  }
class C{  public MarketGetCategoriesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  boolean canSendSurroundings(@Nullable URL baseContentViewUrl){  if (isUserUndecided())   return false;  if (isPromoAvailable()) {    return isBasePageHTTP(baseContentViewUrl);  }  return true;}  }
class C{  public static double distance(Vector3D v1,Vector3D v2){  return v1.distance(v2);}  }
class C{  public void loadRefAnnotations() throws IOException {  numberOfRefAnnotations=0;  refAnnotationIndexForTaxonomy=-1;  try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){    for (int b=0; b < blockTypeRank.length; b++) {      if (getBlockType(b) == BlockType.megan_ref_annotations) {        ins.seek(getLocationOfBlockInFile(b));        refAnnotationNames[numberOfRefAnnotations]=ins.readNullTerminatedBytes();        if (refAnnotationNames[numberOfRefAnnotations].equals(Classification.Taxonomy))         refAnnotationIndexForTaxonomy=numberOfRefAnnotations;        int[] annotations=refAnnotations[numberOfRefAnnotations]=new int[getNumberOfReferences()];        for (int i=0; i < getNumberOfReferences(); i++) {          annotations[i]=ins.readInt();        }        numberOfRefAnnotations++;      }    }  } }  }
class C{  public Activity cancel(String key){  Activity a=get(key);  if (a != null)   a.cancel();  return a;}  }
class C{  private boolean clip(float denom,float numer,float[] t){  if (denom > 0.0f) {    if (numer > denom * t[1]) {      return false;    }    if (numer > denom * t[0]) {      t[0]=numer / denom;    }    return true;  } else   if (denom < 0.0f) {    if (numer > denom * t[0]) {      return false;    }    if (numer > denom * t[1]) {      t[1]=numer / denom;    }    return true;  } else {    return numer <= 0.0;  }}  }
class C{  protected long hopToTime(ByteBuffer bb,long currentTimeInSamples,long targetTimeInSamples) throws IOException, IllegalArgumentException {  assert bb != null;  assert currentTimeInSamples >= 0;  assert targetTimeInSamples >= currentTimeInSamples : "Cannot hop back from time " + currentTimeInSamples + " to time "+ targetTimeInSamples;  if (currentTimeInSamples == targetTimeInSamples) {    return currentTimeInSamples;  }  int byteBefore=bb.position();  long timeBefore=currentTimeInSamples;  while (currentTimeInSamples <= targetTimeInSamples) {    timeBefore=currentTimeInSamples;    byteBefore=bb.position();    long skippedDuration=skipNextDatagram(bb);    currentTimeInSamples+=skippedDuration;  }  bb.position(byteBefore);  return timeBefore;}  }
class C{  public boolean more() throws JSONException {  next();  if (end()) {    return false;  }  back();  return true;}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  @POST @Path("applications/{applicationName}/pages/{pageName}/users/{userID}") @Produces(APPLICATION_JSON) @ApiOperation(value="Return bucket assignments for a user for all the experiments associated with a page",notes="The mutual exclusion and segmentation rules apply") @Timed public Response postBatchAssignmentForPage(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("pageName") @ApiParam("Page Name") Page.Name pageName,@PathParam("userID") @ApiParam(value="User(customer) ID") final User.ID userID,@QueryParam("createAssignment") @DefaultValue("true") @ApiParam(value="conditional to generate an assignment if one doesn't exist",defaultValue="true") final boolean createAssignment,@QueryParam("ignoreSamplingPercent") @DefaultValue("false") @ApiParam(value="whether the sampling percent for the experiment should be ignored, " + "forcing the user into the experiment (if eligible)",defaultValue="false") final boolean ignoreSamplingPercent,@QueryParam("context") @DefaultValue("PROD") @ApiParam(value="context for the experiment, eg QA, PROD") final Context context,@ApiParam(value="Segmentation Profile") final SegmentationProfile segmentationProfile,@javax.ws.rs.core.Context final HttpHeaders headers){  List<Map> assignmentsFromPage=assignments.doPageAssignments(applicationName,pageName,userID,context,createAssignment,ignoreSamplingPercent,headers,segmentationProfile);  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put("assignments",assignmentsFromPage).build()).build();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public SiteAdminGrid activatePage(String title){  selectPageByTitle(title);  activateSelectedPage();  return this;}  }
class C{  protected LinkedList<Diff> diff_bisect(String text1,String text2,long deadline){  int text1_length=text1.length();  int text2_length=text2.length();  int max_d=(text1_length + text2_length + 1) / 2;  int v_offset=max_d;  int v_length=2 * max_d;  int[] v1=new int[v_length];  int[] v2=new int[v_length];  for (int x=0; x < v_length; x++) {    v1[x]=-1;    v2[x]=-1;  }  v1[v_offset + 1]=0;  v2[v_offset + 1]=0;  int delta=text1_length - text2_length;  boolean front=(delta % 2 != 0);  int k1start=0;  int k1end=0;  int k2start=0;  int k2end=0;  for (int d=0; d < max_d; d++) {    if (System.currentTimeMillis() > deadline) {      break;    }    for (int k1=-d + k1start; k1 <= d - k1end; k1+=2) {      int k1_offset=v_offset + k1;      int x1;      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {        x1=v1[k1_offset + 1];      } else {        x1=v1[k1_offset - 1] + 1;      }      int y1=x1 - k1;      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {        x1++;        y1++;      }      v1[k1_offset]=x1;      if (x1 > text1_length) {        k1end+=2;      } else       if (y1 > text2_length) {        k1start+=2;      } else       if (front) {        int k2_offset=v_offset + delta - k1;        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {          int x2=text1_length - v2[k2_offset];          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }    for (int k2=-d + k2start; k2 <= d - k2end; k2+=2) {      int k2_offset=v_offset + k2;      int x2;      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {        x2=v2[k2_offset + 1];      } else {        x2=v2[k2_offset - 1] + 1;      }      int y2=x2 - k2;      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {        x2++;        y2++;      }      v2[k2_offset]=x2;      if (x2 > text1_length) {        k2end+=2;      } else       if (y2 > text2_length) {        k2start+=2;      } else       if (!front) {        int k1_offset=v_offset + delta - k2;        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {          int x1=v1[k1_offset];          int y1=v_offset + x1 - k1_offset;          x2=text1_length - x2;          if (x1 >= x2) {            return diff_bisectSplit(text1,text2,x1,y1,deadline);          }        }      }    }  }  LinkedList<Diff> diffs=new LinkedList<Diff>();  diffs.add(new Diff(Operation.DELETE,text1));  diffs.add(new Diff(Operation.INSERT,text2));  return diffs;}  }
class C{  public void addLimitLine(LimitLine l){  mLimitLines.add(l);  if (mLimitLines.size() > 6) {    Log.e("MPAndroiChart","Warning! You have more than 6 LimitLines on your axis, do you really want " + "that?");  }}  }
class C{  public void animShow(final View v){  if (v.getVisibility() == View.GONE) {    v.setVisibility(View.VISIBLE);  }  ObjectAnimator.ofFloat(v,"alpha",0,1).setDuration(300).start();}  }
class C{  public int hours(){  return this.hours;}  }
class C{  public Map.Entry<K,V> firstEntry(){  for (; ; ) {    Node<K,V> n=findFirst();    if (n == null)     return null;    AbstractMap.SimpleImmutableEntry<K,V> e=n.createSnapshot();    if (e != null)     return e;  }}  }
class C{  public CompletableFuture<?> optimizeOldFiles(){synchronized (this) {    if (optimizeOldFiles)     return CompletableFuture.completedFuture(null);    CompletableFuture<?> task=new CompletableFuture<>();    Thread thr=new Thread(null);    thr.setDaemon(true);    thr.start();    pendingTasks.add(task);    optimizeOldFiles=true;    task.whenComplete(null);    return task;  }}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  public static void validateFields(Iterable<String> fields,CriteriaMap<?> criteriaMap,ErrorType errorType){  if (fields == null || criteriaMap == null || errorType == null) {    return;  }  for (  String field : fields) {    QueryBuilder.ComplexSearchCriteria filterCriteria=QueryBuilder.filterSearchCriteriaPreProcessor(field);    expect(criteriaMap.getCriteriaHolderUnchecked(filterCriteria.getGlobalSearchCriteria()).isPresent(),equalTo(true)).verify(errorType,formattedSupplier("Field '{}' cannot be used for calculating data for widget.",field));  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){  LOG.d(TAG,"Incoming Result. Request code = " + requestCode);  super.onActivityResult(requestCode,resultCode,intent);  cordovaInterface.onActivityResult(requestCode,resultCode,intent);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_UNSUMMON_FOLLOWER(int value0){  return new SM_SYSTEM_MESSAGE(1200011,calculateNameId(value0));}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private ImportReport createUser(User user,HttpServletResponse response) throws Exception {  user.getUserCredentials().getCogsDimensionConstraints().addAll(currentUserService.getCurrentUser().getUserCredentials().getCogsDimensionConstraints());  user.getUserCredentials().getCatDimensionConstraints().addAll(currentUserService.getCurrentUser().getUserCredentials().getCatDimensionConstraints());  MetadataImportParams importParams=new MetadataImportParams();  importParams.setImportStrategy(ImportStrategy.CREATE);  importParams.addObject(user);  ImportReport importReport=importService.importMetadata(importParams);  if (importReport.getStatus() == Status.OK && importReport.getStats().getCreated() == 1) {    userGroupService.addUserToGroups(user,IdentifiableObjectUtils.getUids(user.getGroups()));  }  return importReport;}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  public boolean isApplicable(){  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();}  }
class C{  public String substringData(int offset,int count) throws DOMException {  if (needsSyncData()) {    synchronizeData();  }  int length=data.length();  if (count < 0 || offset < 0 || offset > length - 1) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);    throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);  }  int tailIndex=Math.min(offset + count,length);  return data.substring(offset,tailIndex);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public boolean isItemSet(){  return getItemSet() != null;}  }
class C{  public void merge(final Frequency<? extends T> other) throws NullArgumentException {  MathUtils.checkNotNull(other);  Iterator<? extends Map.Entry<? extends T,Long>> iter=other.entrySetIterator();  while (iter.hasNext()) {    final Map.Entry<? extends T,Long> entry=iter.next();    incrementValue(entry.getKey(),entry.getValue().longValue());  }}  }
class C{  public synchronized boolean hasCustomProperties(){  Properties prop=getCustomProperties(false);  return prop != null && !prop.isEmpty();}  }
class C{  public NewsfeedGetQuery filters(NewsfeedGetFilter... value){  return unsafeParam("filters",value);}  }
class C{  public static int hsb(float h,float s,float b){  return Color.HSBtoRGB(h,s,b);}  }
class C{  public Vector2f negate(){  return new Vector2f(-x,-y);}  }
class C{  private void requestCollection(){  String[] keys=model.getBrowsableDataKey().split(",");  if (keys[1].equals("curated")) {    ((CollectionService)model.getService()).requestACuratedCollections(keys[2],this);  } else {    ((CollectionService)model.getService()).requestACollections(keys[1],this);  }}  }
class C{  @Override public IEntryPacket clone(){  IEntryPacket packet=super.clone();  if (_fixedProperties != null)   packet.setFieldsValues(_fixedProperties.clone());  return packet;}  }
class C{  public <RES>Partial<RES,ARG> as(Class<RES> dummy){  return new Partial<>();}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_preview_photo_photoView:    if (showPreview) {      showPreview=false;      hideWidget();      hideIcons();    } else {      showPreview=true;      showWidget();      showIcons();    }  break;}}  }
class C{  private void editRayAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxRay) {      SandboxRay ray=(SandboxRay)node.getUserObject();synchronized (Simulation.LOCK) {        SandboxRay nRay=EditRayDialog.show(ControlUtilities.getParentWindow(this),ray);        this.simulation.getRays().remove(ray);        this.simulation.getRays().add(nRay);        node.setUserObject(nRay);      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ElementArrayValue fullCopy(){  ElementArrayValue tree=(ElementArrayValue)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void longPulling(ClientSession client,Map<String,String> pullingConfigs,HttpServletRequest req){  final AsyncContext asyncContext=req.startAsync();  asyncContext.setTimeout(0L);  longPullingScheduler.submit(new LongPullingTask(client,pullingConfigs,asyncContext));}  }
class C{  public void onNavigationEvent(int navigationEvent,Bundle extras){}  }
class C{  private void createBaseLayoutTab(LayoutTab layoutTab){  if (mTabModelSelector == null)   return;  int baseTabId=mTabModelSelector.getCurrentTabId();  if (baseTabId == Tab.INVALID_TAB_ID)   return;  mBaseTab=createLayoutTab(baseTabId,mTabModelSelector.isIncognitoSelected(),NO_CLOSE_BUTTON,NO_TITLE);  assert mBaseTab != null;  mBaseTab.setScale(1.f);  mBaseTab.setBorderScale(1.f);  mBaseTab.setBorderAlpha(0.f);  mLayoutTabs=new LayoutTab[]{mBaseTab};}  }
class C{  private void fillQName(QName toFill,String uri,String localpart,String raw){  if (!fStringsInternalized) {    uri=(uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;    localpart=(localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;    raw=(raw != null) ? fSymbolTable.addSymbol(raw) : XMLSymbols.EMPTY_STRING;  } else {    if (uri != null && uri.length() == 0) {      uri=null;    }    if (localpart == null) {      localpart=XMLSymbols.EMPTY_STRING;    }    if (raw == null) {      raw=XMLSymbols.EMPTY_STRING;    }  }  String prefix=XMLSymbols.EMPTY_STRING;  int prefixIdx=raw.indexOf(':');  if (prefixIdx != -1) {    prefix=fSymbolTable.addSymbol(raw.substring(0,prefixIdx));  }  toFill.setValues(prefix,localpart,raw,uri);}  }
class C{  public AemToolbar newComponent(){  click(MenuOption.NEW);  return this;}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof SearchInterval) {      final SearchInterval interval=(SearchInterval)data;      min=interval.getMin();      max=interval.getMax();      start=interval.getStartValue();      continue;    }    if (data instanceof UnivariateObjectiveFunction) {      function=((UnivariateObjectiveFunction)data).getObjectiveFunction();      continue;    }    if (data instanceof GoalType) {      goal=(GoalType)data;      continue;    }  }}  }
class C{  public BoardGetTopicsQueryWithExtended preview(BoardGetTopicsPreview value){  return unsafeParam("preview",value);}  }
class C{  public static String unicodeNotation(int value){  String result;  result=Integer.toHexString(value).toUpperCase();  if (result.length() < 4) {    result="0000".substring(result.length()) + result;  }  result=UNICODE_PREFIX + result;  return (result);}  }
class C{  @Override @Transactional(value="cacheTransactionManager",propagation=Propagation.REQUIRED) public void doCreateAlarm(final ConfigurationElement element) throws IllegalAccessException {  Alarm alarm=null;  alarmCache.acquireWriteLockOnKey(element.getEntityId());  try {    LOGGER.trace("Creating alarm " + element.getEntityId());    alarm=alarmFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    try {      alarmDAO.insert(alarm);      alarmCache.putQuiet(alarm);    } catch (    Exception e) {      LOGGER.error("Exception caught while loading creating alarm with id " + element.getEntityId(),e);      throw new UnexpectedRollbackException("Unexpected exception while creating an Alarm " + element.getEntityId() + ": rolling back the creation",e);    }  }  finally {    alarmCache.releaseWriteLockOnKey(element.getEntityId());  }  try {    tagConfigGateway.addAlarmToTag(alarm.getTagId(),alarm.getId());  } catch (  Exception e) {    LOGGER.error("Exception caught while adding new Alarm " + alarm.getId() + " to Tag "+ alarm.getId(),e);    alarmCache.remove(alarm.getId());    tagConfigGateway.removeAlarmFromTag(alarm.getTagId(),alarm.getId());    throw new UnexpectedRollbackException("Unexpected exception while creating a Alarm " + alarm.getId() + ": rolling back the creation",e);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void publish(final Object event){  final Collection<Consumer<?>> matchedConsumers=getConsumersForType(event);  for (  final Consumer<?> consumer : matchedConsumers) {    final Object filter=consumerFilters.get(consumer);    try {      if (filter == null) {        notifyConsumer((Consumer<Object>)consumer,event);      } else       if (event instanceof IFilterableEvent && filter.equals(((IFilterableEvent)event).getFilter())) {        notifyConsumer((Consumer<Object>)consumer,event);      }    } catch (    final ClassCastException e) {      logger.warn("Consumer {} can't accept events of type = {}",consumer,event.getClass(),e);    }  }}  }
class C{  public static int versionCompare(String current,String newVersion){  if (current.startsWith("v"))   current=current.substring(1);  if (current.contains("-"))   current=current.substring(0,current.indexOf("-"));  if (newVersion.startsWith("v"))   newVersion=newVersion.substring(1);  if (newVersion.contains("-"))   newVersion=newVersion.substring(0,newVersion.indexOf("-"));  String[] vals1=current.split("\\.");  String[] vals2=newVersion.split("\\.");  int i=0;  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {    i++;  }  if (i < vals1.length && i < vals2.length) {    int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));    return Integer.signum(diff);  }  return Integer.signum(vals1.length - vals2.length);}  }
class C{  @ApiMethod(path="{type}/",verb=ApiVerb.DELETE,description="Gets and deletes entries from space that matches the query.",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value="/{type}",method=RequestMethod.DELETE,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> deleteByQuery(@ApiPathParam(name="type",description=TYPE_DESCRIPTION) @PathVariable String type,@ApiQueryParam(name="query") @RequestParam(value=QUERY_PARAM) String query,@ApiQueryParam(name="max",description="The maximum number of entries to return. Default is Integer.MAX_VALUE") @RequestParam(value=MAX_PARAM,required=false) Integer max){  if (logger.isLoggable(Level.FINE))   logger.fine("creating take query with type: " + type + " and query: "+ query);  GigaSpace gigaSpace=ControllerUtils.xapCache.get();  SQLQuery<Object> sqlQuery=new SQLQuery<Object>(type,query);  int maxSize=(max == null ? maxReturnValues : max.intValue());  Object[] docs;  try {    docs=gigaSpace.takeMultiple(sqlQuery,maxSize);  } catch (  DataAccessException e) {    throw translateDataAccessException(gigaSpace,e,type);  }  if (docs == null) {    docs=new Object[]{};  }  try {    Map<String,Object> result=new HashMap<String,Object>();    result.put("status","success");    result.put("data",ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(docs),ArrayList.class));    return result;  } catch (  IOException e) {    throw new RestException(e.getMessage());  }}  }
class C{  private void handleConnectError(int retry,String host,int port,SocketChannel sockChannel,ClosedSelectorException e){  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"retrying connection due to closed selector exception: connecting to " + host + ":"+ port+ ", connect timeout="+ _config.getSocketConnectTimeout()+ " keepalive="+ LRMIUtilities.KEEP_ALIVE_MODE,e);  try {    sockChannel.close();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Failed to close socket: connecting to " + host + ":"+ port+ ", connect timeout="+ _config.getSocketConnectTimeout()+ " keepalive="+ LRMIUtilities.KEEP_ALIVE_MODE,ex);  }  if (retry + 1 == SELECTOR_BUG_CONNECT_RETRY)   throw e;}  }
class C{  public static void enableFullscreenFlags(Resources resources,Context context,int resControlContainerHeight){  ContentApplication.initCommandLine(context);  CommandLine commandLine=CommandLine.getInstance();  if (commandLine.hasSwitch(ChromeSwitches.DISABLE_FULLSCREEN))   return;  TypedValue threshold=new TypedValue();  resources.getValue(R.dimen.top_controls_show_threshold,threshold,true);  commandLine.appendSwitchWithValue(ContentSwitches.TOP_CONTROLS_SHOW_THRESHOLD,threshold.coerceToString().toString());  resources.getValue(R.dimen.top_controls_show_threshold,threshold,true);  commandLine.appendSwitchWithValue(ContentSwitches.TOP_CONTROLS_HIDE_THRESHOLD,threshold.coerceToString().toString());}  }
class C{  public static void shutDown(){  isShutDown=true;  JobPoller.getInstance().stop();}  }
class C{  private void displayColour(){  Graphics2D g2=image.createGraphics();  g2.setColor(colour);  g2.fillRect(0,0,BasePanel.WIDGET_STANDARD_WIDTH,BasePanel.WIDGET_HEIGHT);  g2.setColor(ColourUtils.getTextColour(colour));  String htmlColour=ColourUtils.fromColour(colour);  int width=g2.getFontMetrics().stringWidth(htmlColour);  int height=g2.getFontMetrics().getHeight();  int x=(this.getWidth() / 2) - (width / 2);  int y=this.getHeight() - ((this.getHeight() / 2) - (height / 2));  g2.drawString(htmlColour,x,y);  setContentAreaFilled(false);  setOpaque(true);  setBorderPainted(false);  repaint();}  }
class C{  public void add(float f){  data.add(f);}  }
class C{  public static boolean isSignedFloat(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Float.parseFloat(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public SortedTupleIterator(Iterator iter,int size,Comparator c){  m_tuples=new ArrayList(size);  init(iter,c);}  }
class C{  public void add(GraphicPanelFieldManager fieldConfigManager){  if (fieldConfigManager != null) {    Map<FieldIdEnum,FieldConfigBase> componentMapToAdd=fieldConfigManager.fieldConfigMap.get(fieldConfigManager.panelId);    Map<FieldIdEnum,FieldConfigBase> componentMap=this.fieldConfigMap.get(fieldConfigManager.panelId);    if (componentMap == null) {      Map<FieldIdEnum,FieldConfigBase> value=fieldConfigManager.fieldConfigMap.get(fieldConfigManager.panelId);      this.fieldConfigMap.put(fieldConfigManager.panelId,value);    } else {      for (      FieldIdEnum fieldId : componentMapToAdd.keySet()) {        FieldConfigBase dataToAdd=componentMapToAdd.get(fieldId);        componentMap.put(fieldId,dataToAdd);      }    }    Map<GroupIdEnum,GroupConfigInterface> groupMapToAdd=fieldConfigManager.groupMap.get(fieldConfigManager.panelId);    Map<GroupIdEnum,GroupConfigInterface> thisGroupMap=this.groupMap.get(fieldConfigManager.panelId);    if (thisGroupMap == null) {      Map<GroupIdEnum,GroupConfigInterface> value=fieldConfigManager.groupMap.get(fieldConfigManager.panelId);      this.groupMap.put(fieldConfigManager.panelId,value);    } else {      for (      GroupIdEnum groupId : groupMapToAdd.keySet()) {        GroupConfigInterface dataToAdd=groupMapToAdd.get(groupId);        thisGroupMap.put(groupId,dataToAdd);      }    }  }}  }
class C{  public ContinousQuery(String typeName,String sqlExpression){  super(typeName,sqlExpression);}  }
class C{  @Override public ImageWritable transform(ImageWritable image,Random random){  if (image == null) {    return null;  }  opencv_core.Mat mat=converter.convert(image.getFrame());  opencv_core.Mat result=new opencv_core.Mat();  resize(mat,result,new opencv_core.Size(newWidth,newHeight));  return new ImageWritable(converter.convert(result));}  }
class C{  @SuppressWarnings("unused") @MainThread public static <X,Z>ThinrBuilder<X,Z,Z> task(@NonNull Context context,@NonNull final String name,@NonNull final Class<X> targetType,@NonNull final Class<Z> paramAndReturnType){  checkMainThread();  Thinr<X,Z,Z> thinr=new Thinr<>(context.getApplicationContext());  thinr.name=name;  return thinr;}  }
class C{  public void actionPerformed(ActionEvent ev){  final ClusterViewer viewer=getViewer();  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();  int number=Math.min(max,viewer.getPcoaTab().getTriplotSize());  String result=JOptionPane.showInputDialog(viewer.getFrame(),"Number of tri-plot vectors (0-" + max + "): ",number);  if (result != null && Basic.isInteger(result))   executeImmediately("set triplotSize=" + Basic.parseInt(result) + ";");}  }
class C{  private void detectEncoding(char[] cbuf,int off,int len) throws IOException {  int size=len;  StringBuffer xmlProlog=xmlPrologWriter.getBuffer();  if (xmlProlog.length() + len > BUFFER_SIZE) {    size=BUFFER_SIZE - xmlProlog.length();  }  xmlPrologWriter.write(cbuf,off,size);  if (xmlProlog.length() >= 5) {    if (xmlProlog.substring(0,5).equals("<?xml")) {      int xmlPrologEnd=xmlProlog.indexOf("?>");      if (xmlPrologEnd > 0) {        Matcher m=ENCODING_PATTERN.matcher(xmlProlog.substring(0,xmlPrologEnd));        if (m.find()) {          encoding=m.group(1).toUpperCase();          encoding=encoding.substring(1,encoding.length() - 1);        } else {          encoding=defaultEncoding;        }      } else {        if (xmlProlog.length() >= BUFFER_SIZE) {          encoding=defaultEncoding;        }      }    } else {      encoding=defaultEncoding;    }    if (encoding != null) {      xmlPrologWriter=null;      writer=new OutputStreamWriter(out,encoding);      writer.write(xmlProlog.toString());      if (len > size) {        writer.write(cbuf,off + size,len - size);      }    }  }}  }
class C{  public SLDDataFlavour(Class<?> representationClass,String humanPresentableName){  super(representationClass,humanPresentableName);}  }
class C{  public MarketAddAlbumQuery(VkApiClient client,UserActor actor,int ownerId,String title){  super(client,"market.addAlbum",AddAlbumResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  title(title);}  }
class C{  public void removeThrottle(AdHocThrottleEndpoint endpoint){  try {    _throttleMap.remove(endpoint.toString());  } catch (  Exception e) {    _log.warn("Failed to remove throttle for {} {}",endpoint.getMethod(),endpoint.getPath(),e);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {  try {    checkNotNull(inStream);    Properties properties=new Properties();    properties.load(inStream);    return (create(properties));  }  finally {    if (inStream != null) {      inStream.close();    }  }}  }
class C{  public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue){  return addColumnDouble(name,minAllowedValue,maxAllowedValue,false,false);}  }
class C{  public static CipherText encrypt(byte[] input,byte[] iv){  byte[] arr2=new byte[256];  byte[] arr3;  CipherText output;  if (iv.length != 32) {    return null;  }  for (int j=0; j < 8; j++) {    for (int i=0; i < 32; i++) {      arr2[32 * j + i]=rotl8(iv[i],j);    }  }  output=new CipherText(input,iv);  for (int i=0; i < output.content.size(); ++i) {    byte[] current=output.content.get(i);    for (int j=0; j < 256; j++) {      current[j]^=arr2[j];    }    arr3=sub_9E9D8(current);    for (int k=0; k < 256; ++k)     arr2[k]=arr3[k];    for (int k=0; k < 256; ++k)     current[k]=arr3[k];  }  return output;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  if (fAnnotationDepth != -1) {    schemaDOM.characters(text);  }}  }
class C{  public static boolean hasImportStatic(String fqClassName,String memberName,PsiElement context){  final PsiFile file=context.getContainingFile();  if (!(file instanceof PsiJavaFile)) {    return false;  }  final PsiJavaFile javaFile=(PsiJavaFile)file;  final PsiImportList importList=javaFile.getImportList();  if (importList == null) {    return false;  }  final PsiImportStaticStatement[] importStaticStatements=importList.getImportStaticStatements();  for (  PsiImportStaticStatement importStaticStatement : importStaticStatements) {    if (importStaticStatement.isOnDemand()) {      PsiClass psiClass=ClassUtils.findClass(fqClassName,context);      if (psiClass != null && psiClass.equals(importStaticStatement.resolveTargetClass())) {        return true;      }      continue;    }    final String name=importStaticStatement.getReferenceName();    if (!memberName.equals(name)) {      continue;    }    final PsiJavaCodeReferenceElement importReference=importStaticStatement.getImportReference();    if (importReference == null) {      continue;    }    final PsiElement qualifier=importReference.getQualifier();    if (qualifier == null) {      continue;    }    final String qualifierText=qualifier.getText();    if (fqClassName.equals(qualifierText)) {      return true;    }  }  return false;}  }
class C{  public static ServiceClient createServiceClient(SSLContext sslContext,int requestPayloadSizeLimit){  ServiceClient serviceClient;  try {    serviceClient=NettyHttpServiceClient.create(ServiceClientFactory.class.getCanonicalName(),Executors.newFixedThreadPool(4),Executors.newScheduledThreadPool(1));    if (requestPayloadSizeLimit > 0) {      serviceClient.setRequestPayloadSizeLimit(requestPayloadSizeLimit);    }    serviceClient.setSSLContext(sslContext);    serviceClient.start();    return serviceClient;  } catch (  URISyntaxException e) {    throw new RuntimeException("Failed to create ServiceClient",e);  }}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public int decrement(){  lock.lock();  if (value != 0) {    --value;  } else {    value=Integer.MAX_VALUE;  }  int newValue=value;  lock.unlock();  return newValue;}  }
class C{  public Well44497a(int seed){  super(K,seed);}  }
class C{  public static TextBlock newLine(){  return new TextBlock(ImmutableList.of(""));}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    if (browsablePresenter.isBrowsable()) {      browsablePresenter.visitParentView();    }  toolbarPresenter.touchNavigatorIcon(this);break;case R.id.activity_collection_creatorBar:toolbarPresenter.touchToolbar(this);break;case R.id.activity_collection_touchBar:User u=User.buildUser((Collection)editResultPresenter.getEditKey());Mysplash.getInstance().setUser(u);Intent intent=new Intent(this,UserActivity.class);if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {startActivity(intent);overridePendingTransition(R.anim.activity_in,0);} else {View v=avatarImage;ActivityOptionsCompat options=ActivityOptionsCompat.makeSceneTransitionAnimation(this,Pair.create(v,getString(R.string.transition_user_avatar)));ActivityCompat.startActivity(this,intent,options.toBundle());}break;}}  }
class C{  @SuppressWarnings("deprecation") public static HystrixCommand.Setter buildSetter(HystrixSetter hs){  HystrixCommand.Setter setter=HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hs.getCommandGroupKey()));  setter=setter.andCommandKey(HystrixCommandKey.Factory.asKey(hs.getCommandKey()));  setter=setter.andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(hs.getThreadPoolKey()));  setter=setter.andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationThreadTimeoutInMilliseconds(hs.getEitTimeout()).withExecutionTimeoutInMilliseconds(hs.getEtimeout()).withCircuitBreakerRequestVolumeThreshold(hs.getCbRequests()).withCircuitBreakerSleepWindowInMilliseconds(hs.getCbSleepWindow()).withCircuitBreakerErrorThresholdPercentage(hs.getCbErrorRate()).withFallbackIsolationSemaphoreMaxConcurrentRequests(hs.getFismRequests()));  setter=setter.andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter().withCoreSize(hs.getThreadPoolCoreSize()).withQueueSizeRejectionThreshold(hs.getThreadPoolQueueSize()));  return setter;}  }
class C{  private Properties parseProxyList(String proxyString) throws ProxyException {  Properties p=new Properties();  if (proxyString.indexOf('=') == -1) {    p.setProperty("default",proxyString);  } else {    try {      proxyString=proxyString.replace(';','\n');      p.load(new ByteArrayInputStream(proxyString.getBytes("ISO-8859-1")));    } catch (    IOException e) {      Logger.log(getClass(),LogLevel.ERROR,"Error reading IE settings as properties: {0}",e);      throw new ProxyException(e);    }  }  return p;}  }
class C{  public void success(String message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private void scrollToCenter(){  View nearestToCenterView=findCurrentCenterView();  if (nearestToCenterView != null) {    shiftToCenterCardScroller.setTargetPosition(getPosition(nearestToCenterView));    startSmoothScroll(shiftToCenterCardScroller);  }}  }
class C{  public final boolean canSetDate(String field){  return m_table.canSetDate(field);}  }
class C{  public boolean findFirst(String regularExpression){  return findAndUncollapseNext(regularExpression,false,false) > 0;}  }
class C{  private void generateLegalTimesTree(){  int k0=KeyEvent.KEYCODE_0;  int k1=KeyEvent.KEYCODE_1;  int k2=KeyEvent.KEYCODE_2;  int k3=KeyEvent.KEYCODE_3;  int k4=KeyEvent.KEYCODE_4;  int k5=KeyEvent.KEYCODE_5;  int k6=KeyEvent.KEYCODE_6;  int k7=KeyEvent.KEYCODE_7;  int k8=KeyEvent.KEYCODE_8;  int k9=KeyEvent.KEYCODE_9;  mLegalTimesTree=new Node();  if (mIs24HourMode) {    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    minuteFirstDigit.addChild(minuteSecondDigit);    Node firstDigit=new Node(k0,k1);    mLegalTimesTree.addChild(firstDigit);    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    Node thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    secondDigit=new Node(k6,k7,k8,k9);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    firstDigit=new Node(k2);    mLegalTimesTree.addChild(firstDigit);    secondDigit=new Node(k0,k1,k2,k3);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    secondDigit=new Node(k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteSecondDigit);    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(minuteFirstDigit);  } else {    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));    Node firstDigit=new Node(k1);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    Node secondDigit=new Node(k0,k1,k2);    firstDigit.addChild(secondDigit);    secondDigit.addChild(ampm);    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    thirdDigit.addChild(fourthDigit);    fourthDigit.addChild(ampm);    thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    secondDigit=new Node(k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);  }}  }
class C{  private WriteEntryResult write(Context context,IEntryPacket entryPacket,Transaction txn,long lease,int modifiers,boolean fromReplication,boolean origin,SpaceContext sc,boolean reInsertedEntry,boolean fromWriteMultiple) throws TransactionException, UnusableEntryException, UnknownTypeException, RemoteException {  context.setFromReplication(fromReplication);  context.setOrigin(origin);  context.setOperationID(entryPacket.getOperationID());  setFromGatewayIfNeeded(sc,context);  IServerTypeDesc serverTypeDesc=_typeManager.loadServerTypeDesc(entryPacket);  final String packetUid=entryPacket.getUID();  if (_isLocalCache) {    if (packetUid == null)     throw new IllegalArgumentException("Write operation requires non-null object UID when using local cache. Object=" + entryPacket.toString());    if (entryPacket.getVersion() <= 0)     throw new IllegalArgumentException("Write operation requires object version greater than 0 when using local cache. Object=" + entryPacket.toString());  }  if (!fromReplication) {    if (isPartitionedSpace() && ProtectiveMode.isWrongRoutingUsageProtectionEnabled()) {      if (entryPacket.getRoutingFieldValue() == null && serverTypeDesc.getTypeDesc().getRoutingPropertyName() != null && !serverTypeDesc.getTypeDesc().isAutoGenerateRouting())       throwNoRoutingProvidedWhenNeeded(serverTypeDesc,"writing"); else       if (entryPacket.getRoutingFieldValue() != null)       checkEntryRoutingValueMatchesCurrentPartition(entryPacket,serverTypeDesc,"written");    }    if (ProtectiveMode.isTypeWithoutIdProtectionEnabled() && entryPacket.getID() == null && !serverTypeDesc.getTypeDesc().isAutoGenerateId() && serverTypeDesc.getTypeDesc().getObjectType() != EntryType.EXTERNAL_ENTRY && !ServerTypeDesc.isEntry(serverTypeDesc) && !ProtectiveMode.shouldIgnoreTypeWithoutIdProtectiveMode(serverTypeDesc.getTypeName()))     throw new ProtectiveModeException("Cannot introduce a type named '" + serverTypeDesc.getTypeName() + "' without an id property defined. Having a type without an id property would prevent modifying (update/change) objects of that type after they were written to the space. (you can disable this protection, though it is not recommended, by setting the following system property: "+ ProtectiveMode.TYPE_WITHOUT_ID+ "=false)");  }  final XtnEntry txnEntry=initTransactionEntry(txn,sc,fromReplication);  if (!fromReplication && !_isLocalCache && !context.isFromGateway()&& !Modifiers.contains(modifiers,Modifiers.OVERRIDE_VERSION)) {    entryPacket.setVersion(1);  }  final long current=SystemTime.timeMillis();  final String entryUid=getOrCreateUid(entryPacket);  IEntryHolder eHolder=EntryHolderFactory.createEntryHolder(serverTypeDesc,entryPacket,_entryDataType,entryUid,LeaseManager.toAbsoluteTime(lease,current),txnEntry,current,(_cacheManager.isOffHeapDataSpace() && serverTypeDesc.getTypeDesc().isBlobstoreEnabled() && !UpdateModifiers.isUpdateOnly(modifiers)));  if (!reInsertedEntry && _filterManager._isFilter[FilterOperationCodes.BEFORE_WRITE])   _filterManager.invokeFilters(FilterOperationCodes.BEFORE_WRITE,sc,eHolder);  WriteEntryResult writeResult=null;  EntryAlreadyInSpaceException entryInSpaceEx=null;  try {    writeResult=_coreProcessor.handleDirectWriteSA(context,eHolder,serverTypeDesc,fromReplication,origin,reInsertedEntry,packetUid != null,!fromWriteMultiple,modifiers);  } catch (  EntryAlreadyInSpaceException ex) {    entryInSpaceEx=ex;  }catch (  SAException ex) {    throw new EngineInternalSpaceException(ex.toString(),ex);  }  if (entryInSpaceEx != null && txnEntry != null && packetUid != null && !fromReplication) {    IEntryHolder currentEh=_cacheManager.getEntryByUidFromPureCache(eHolder.getUID());    ServerTransaction sv=currentEh != null ? currentEh.getWriteLockTransaction() : null;    if (sv != null && (currentEh.getWriteLockOperation() == SpaceOperations.TAKE_IE || currentEh.getWriteLockOperation() == SpaceOperations.TAKE) && sv.equals(txnEntry.m_Transaction)) {      if (!eHolder.getClassName().equals(currentEh.getClassName())) {        throw new InternalSpaceException("take + write under same transaction: must have the same classname, UID=" + currentEh.getUID() + " originalClass="+ currentEh.getClassName()+ " newname="+ eHolder.getClassName(),entryInSpaceEx);      }      entryPacket.setVersion(0);      try {        AnswerPacket ap=update(context,entryPacket,txn,lease,0,sc,fromReplication,false,UpdateModifiers.UPDATE_OR_WRITE,null,null).m_AnswerPacket;        if (ap.m_EntryPacket == null)         throw new InternalSpaceException("take + write under same transaction: update returned no result, UID=" + currentEh.getUID() + " Class="+ currentEh.getClassName(),entryInSpaceEx);      } catch (      EntryNotInSpaceException ex) {        throw new TransactionException("Transaction [" + txnEntry.m_Transaction + "] became inactive while operation is performing.",ex);      }catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }      entryInSpaceEx=null;      writeResult=context.getWriteResult();    }  }  if (entryInSpaceEx != null)   throw entryInSpaceEx;  if (!reInsertedEntry && _filterManager._isFilter[FilterOperationCodes.AFTER_WRITE])   _filterManager.invokeFilters(FilterOperationCodes.AFTER_WRITE,sc,eHolder);  if (context.isSyncReplFromMultipleOperation()) {    performReplIfChunkReached(context);    if (context.getReplicationContext() != null) {      writeResult.setSyncReplicationLevel(context.getReplicationContext().getCompleted());    }  } else   if (txn == null) {    int level=performReplication(context);    writeResult.setSyncReplicationLevel(level);  }  return writeResult;}  }
class C{  public AsyncHttpResponseHandler(){  if (Looper.myLooper() != null) {    handler=new ResponderHandler(this);  }}  }
class C{  private static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (rqsW == 0 || rqsH == 0)   return 1;  if (height > rqsH || width > rqsW) {    final int heightRatio=Math.round((float)height / (float)rqsH);    final int widthRatio=Math.round((float)width / (float)rqsW);    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;  }  return inSampleSize;}  }
class C{  public boolean rerun_jb(){  return soot.PhaseOptions.getBoolean(options,"rerun-jb");}  }
class C{  private boolean isOptionDisabled(UrlFilterRuleOption option){  loadRuleProperties();  return disabledOptions != null && disabledOptions.contains(option);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/bpmn/callactivity/CallActivity.testTwoSubProcesses.bpmn20.xml","org/activiti/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml"}) public void testTwoSubProcesses(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("callTwoSubProcesses");  List<ProcessInstance> instanceList=runtimeService.createProcessInstanceQuery().list();  assertNotNull(instanceList);  assertEquals(3,instanceList.size());  List<Task> taskList=taskService.createTaskQuery().list();  assertNotNull(taskList);  assertEquals(2,taskList.size());  runtimeService.deleteProcessInstance(processInstance.getId(),"Test cascading");  instanceList=runtimeService.createProcessInstanceQuery().list();  assertNotNull(instanceList);  assertEquals(0,instanceList.size());  taskList=taskService.createTaskQuery().list();  assertNotNull(taskList);  assertEquals(0,taskList.size());}  }
class C{  public int hashCode(){  return MarshalledWrapper.class.hashCode() ^ instance.hashCode();}  }
class C{  private boolean isPropelDefined(){  if (!this.hasPropelChecked) {    this.hasPropel=(PhpIndex.getInstance(holder.getProject()).getClassesByName("Propel").size() > 0);    this.hasPropelChecked=true;  }  return this.hasPropel;}  }
class C{  public void addObserver(AppMenuObserver observer){  mObservers.add(observer);}  }
class C{  public T put(final int key,final T value){  int index=findInsertionIndex(key);  T previous=missingEntries;  boolean newMapping=true;  if (index < 0) {    index=changeIndexSign(index);    previous=values[index];    newMapping=false;  }  keys[index]=key;  states[index]=FULL;  values[index]=value;  if (newMapping) {    ++size;    if (shouldGrowTable()) {      growTable();    }    ++count;  }  return previous;}  }
class C{  protected void cancelling(Conversation conversation){}  }
class C{  public static Response post(String url,JSON params){  return post(url,"application/x-javascript; charset=UTF8",null,params);}  }
class C{  int awaitTransmitComplete(long timeout,TimeUnit unit) throws Exception {  return Await.result(transmitComplete,Duration.fromTimeUnit(timeout,unit));}  }
class C{  public AirMapAirportProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  public ArenaQuestCursor queryArenaQuests(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_ARENA_QUESTS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new ArenaQuestCursor(wrapJoinHelper(builderArenaQuest(),qh));}  }
class C{  public boolean canSetFloat(){  return canSet(float.class);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  PrefData prefData=(PrefData)undoRedoObject.getNewValue();  setPrefData(prefData);}  }
class C{  public void destroySpace(String spaceName) throws DestroyedFailedException, RemoteException {  if (spaceName == null)   throw new IllegalArgumentException("The spaceName parameter can not be null.");synchronized (_lock) {    String fullSpaceName=JSpaceUtilities.createFullSpaceName(_containerName,spaceName);    if (_containerEntry != null && _spaceName.equals(spaceName)) {      try {        _containerEntry.getSpaceImpl().shutdown(true,false);      } catch (      RemoteException ex) {        if (_logger.isLoggable(Level.WARNING))         _logger.log(Level.WARNING,"Failed to destroy <" + spaceName + "> space",ex);        throw new DestroyedFailedException("Failed to destroy <" + spaceName + "> space",ex);      }      String sourceDCacheConfigName=JProperties.getSpaceProperty(fullSpaceName,Constants.DCache.CONFIG_NAME_PROP,"");      String fileName=sourceDCacheConfigName + FILE_SUFFIX_EXTENTION;      String sourceDCacheConfigFile=m_configDirectory + File.separator + fileName;      if (!fileName.equals(DCACHE_CONFIG_FILE_DEFAULT))       new File(sourceDCacheConfigFile).delete();      JProperties.removeSpaceProperties(fullSpaceName);      if (m_rootContainerElement != null) {        NodeList spaceNodeList=m_rootContainerElement.getElementsByTagName(spaceName);        if (spaceNodeList.getLength() != 0) {          for (int i=0; i < spaceNodeList.getLength(); ) {            Node parent=spaceNodeList.item(i).getParentNode();            parent.removeChild(spaceNodeList.item(i));          }        }      }      File sf=new File(m_configDirectory + File.separator + spaceName+ ".xml");      sf.delete();      if (_logger.isLoggable(Level.INFO))       _logger.info("The <" + spaceName + "> space of <"+ _containerName+ "> container was destroyed successfully.");      try {        updateContainerXML();      } catch (      Exception ex) {        if (_logger.isLoggable(Level.WARNING))         _logger.log(Level.WARNING,"Fail to update " + _containerName + " container XML",ex);      }      if (isJMXEnabled())       com.j_spaces.jmx.JMXProvider.unregisterSpaceMBean(spaceName,_containerName);    } else     throw new DestroyedFailedException("Space <" + spaceName + "> does not exist in <"+ _containerName+ "> container.");  }}  }
class C{  private void initialize(){  setBackgroundResource(R.drawable.rounded);}  }
class C{  Reaper(){  super("File Reaper");  setPriority(Thread.MAX_PRIORITY);  setDaemon(true);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public boolean isPrintHeader(){  return m_printHeader;}  }
class C{  public void showLoading(List<Integer> skipIds){  switchState(LOADING,null,null,null,null,null,skipIds);}  }
class C{  public long putIfAbsent(short key,long value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  private void normalize(float[] v){  double norm=Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);  v[0]/=norm;  v[1]/=norm;  v[2]/=norm;}  }
class C{  public static void rgba8888ToColor(Color color,int value){  color.r=((value & 0xff000000) >>> 24) / 255f;  color.g=((value & 0x00ff0000) >>> 16) / 255f;  color.b=((value & 0x0000ff00) >>> 8) / 255f;  color.a=((value & 0x000000ff)) / 255f;}  }
class C{  public static void addSubscriber(Workflow workflow,Observer workflowSubscriber){  SUBSCRIBERS.put(workflow,workflowSubscriber);}  }
class C{  public PollsGetByIdQuery isBoard(Boolean value){  return unsafeParam("is_board",value);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @Override public int available() throws IOException {  int av=super.available();  if (av <= 0)   return av;  return 2 * av / inputChannels;}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public static String addToCartBulkRequirements(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String catalogId=CatalogWorker.getCurrentCatalogId(request);  result=cartHelper.addToCartBulkRequirements(catalogId,paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  @Override public void endExternalSubset(Augmentations augs) throws XNIException {  fReadingExternalDTD=false;}  }
class C{  private static byte[] stringToTypeStringPattern(String s){  byte[] origBytes=s.getBytes();  int length=origBytes.length;  byte[] result=new byte[length + 2];  result[0]=(byte)'L';  for (int i=0; i < length; i++) {    result[i + 1]=origBytes[i];  }  result[length + 1]=(byte)';';  return result;}  }
class C{  protected AccountRegisterDeviceQuery deviceId(String value){  return unsafeParam("device_id",value);}  }
class C{  private static int findFreePort(){  ServerSocket socket=null;  try {    socket=new ServerSocket(0);    socket.setReuseAddress(true);    int port=socket.getLocalPort();    try {      socket.close();    } catch (    IOException e) {    }    return port;  } catch (  Exception e) {  } finally {    if (socket != null) {      try {        socket.close();      } catch (      IOException e) {        throw new RuntimeException(e);      }    }  }  return 2181;}  }
class C{  public Optional<Double> mean(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new MeanMapReduce(statisticsResourceTypes,dataType));  Map<String,Map<String,Double>> mean=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  Map<String,Double> meanPair=mean.get(MeanMapReduce.MEMORY_KEY);  return Optional.of(meanPair.get(MeanMapReduce.SUM) / meanPair.get(MeanMapReduce.COUNT));}  }
class C{  public void load(){  dimensionLoader.loadDimensionDictionary(dictionaries.getDimensionDictionary());  metricLoader.loadMetricDictionary(dictionaries.getMetricDictionary());  tableLoader.loadTableDictionary(dictionaries);  LOG.info("Initialized ConfigurationLoader");  LOG.info(dictionaries.toString());}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public String languageGuesser(String fileName,List<String> codeLines){  String[] split=fileName.split("\\.");  String extension=split[split.length - 1].toLowerCase();  if ("txt".equals(extension)) {    return "Text";  }  Object[] matching=classifier.stream().filter(null).toArray();  if (matching.length == 0) {    return "Unknown";  }  if (matching.length == 1) {    return ((Classifier)matching[0]).language;  }  String languageGuess="";  int bestKeywords=0;  for (  Object c : matching) {    Classifier classifier=(Classifier)c;    int matchingKeywords=0;    for (    String line : codeLines) {      for (      String keyword : classifier.keywords) {        matchingKeywords+=StringUtils.countMatches(line,keyword);      }    }    if (matchingKeywords > bestKeywords) {      bestKeywords=matchingKeywords;      languageGuess=classifier.language;    }  }  if (languageGuess == null || languageGuess.trim().equals("")) {    languageGuess="Unknown";  }  return languageGuess;}  }
class C{  public void showMetrics(){  timer.show("JavaStreamingAudioPlayer");}  }
class C{  public boolean hasNext(){  if (enable) {    if (done)     return false;    if (next != null)     return true;    try {      next=queue.take();    } catch (    InterruptedException e) {      done=true;      next=null;      return false;    }    if (next == sentinel) {      done=true;      next=null;      return false;    } else     return true;  } else   return iterator.hasNext();}  }
class C{  public static void debugInfo(String msg){  debugInfo(DEFAULT_TAG,msg);}  }
class C{  private void startPrecaching(){  Log.v(TAG,"Start precaching");  prepareNativeLibraries();  sIsPrecaching=true;  acquirePrecachingWakeLock();  mPrecacheLauncher.start();}  }
class C{  private boolean queryUseStaticCatalog(){  String staticCatalog=System.getProperty(pStatic);  if (staticCatalog == null) {    if (resources == null)     readProperties();    if (resources == null)     return defaultUseStaticCatalog;    try {      staticCatalog=resources.getString("static-catalog");    } catch (    MissingResourceException e) {      return defaultUseStaticCatalog;    }  }  if (staticCatalog == null) {    return defaultUseStaticCatalog;  }  return (staticCatalog.equalsIgnoreCase("true") || staticCatalog.equalsIgnoreCase("yes") || staticCatalog.equalsIgnoreCase("1"));}  }
class C{  public void select(StyleWrapper styleWrapper){  originalStyleWrapper=styleWrapper;  showSelectedStyle(styleWrapper);}  }
class C{  public static String[] tokenizeToStringArray(String str,String delimiters){  return tokenizeToStringArray(str,delimiters,true,true);}  }
class C{  @Autowired public ProcessMessageSender(final ConfigurationController configurationController){  this.configurationController=configurationController;}  }
class C{  private boolean resizeAndSaveImage(File targetFile,int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);  DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();  ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,ImageDownloader.Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);  Bitmap bmp=decoder.decode(decodingInfo);  if (bmp != null && configuration.processorForDiscCache != null) {    log(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);    bmp=configuration.processorForDiscCache.process(bmp);    if (bmp == null) {      L.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL,memoryCacheKey);    }  }  if (bmp != null) {    OutputStream os=new BufferedOutputStream(new FileOutputStream(targetFile),BUFFER_SIZE);    try {      bmp.compress(configuration.imageCompressFormatForDiscCache,configuration.imageQualityForDiscCache,os);    }  finally {      IoUtils.closeSilently(os);    }    bmp.recycle();  }  return true;}  }
class C{  public AdaptableList(IAdaptable[] newChildren){  this(newChildren.length);  for (int i=0; i < newChildren.length; i++) {    children.add(newChildren[i]);  }}  }
class C{  private ThriftWriter openThriftWriter(String filePath) throws IOException {  ThriftWriter thriftWriter=new ThriftWriter(filePath,true);  thriftWriter.open();  return thriftWriter;}  }
class C{  public void writeChar(char value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeChar(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public DataReadOnlyException(){  super();}  }
class C{  public static String returnSuccess(HttpServletRequest request,HttpServletResponse response){  return "success";}  }
class C{  public void hideAllBudges(){  for (  RelativeLayout badge : badgeList) {    if (badge.getVisibility() == VISIBLE)     BadgeHelper.hideBadge(badge);  }  badgeSaveInstanceHashMap.clear();}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  private void centerControls(){  GridLayoutManager layout=(GridLayoutManager)myPanel.getLayout();  int height=(int)Math.floor(myGradlePath.getPreferredSize().getHeight() * 3);  layout.setMargin(new Insets(height,16,0,0));}  }
class C{  public static void markAll(JTextComponent pane,Pattern pattern,SimpleMarker marker){  SyntaxDocument sDoc=ActionUtils.getSyntaxDocument(pane);  if (sDoc == null || pattern == null) {    return;  }  Matcher matcher=sDoc.getMatcher(pattern);  while (matcher.find()) {    markText(pane,matcher.start(),matcher.end(),marker);  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/SignalThrowingEventListenerTest.globalSignalDefinedInProcessDefinition.bpmn20.xml","org/activiti/engine/test/api/event/SignalThrowingEventListenerTest.globalSignalExternalProcess.bpmn20.xml"}) public void testGlobalSignalDefinedInProcessDefinition() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("globalSignalProcess");  assertNotNull(processInstance);  ProcessInstance externalProcess=runtimeService.startProcessInstanceByKey("globalSignalProcessExternal");  assertNotNull(processInstance);  externalProcess=runtimeService.createProcessInstanceQuery().processInstanceId(externalProcess.getId()).singleResult();  assertNotNull(externalProcess);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.setAssignee(task.getId(),"kermit");  externalProcess=runtimeService.createProcessInstanceQuery().processInstanceId(externalProcess.getId()).singleResult();  assertNull(externalProcess);  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  assertEquals("kermit",task.getAssignee());}  }
class C{  public static long gymDefense(final PokemonId pokemonId,final PokemonMove move1,final PokemonMove move2,final int attackIV,final int defenseIV,final int staminaIV){  final PokemonMeta meta=PokemonMetaRegistry.getMeta(pokemonId);  final double gymDefense=PokemonCalculationUtils.weaveDps(pokemonId,move1,move2,MOVE_2_ADDITIONAL_DELAY) * (meta.getBaseAttack() + attackIV) * PokemonCalculationUtils.tankiness(pokemonId,defenseIV,staminaIV);  return Math.round(gymDefense);}  }
class C{  @Override public void nextBytes(byte[] bytes){  randomGenerator.nextBytes(bytes);}  }
class C{  @Override protected void onProceeding(){  AndroidFacet facet=getModel().getFacet();  Module module=getModel().getModule();  SourceProvider sourceSet=getModel().getSourceSet().getValue();  AndroidProjectPaths paths=getModel().getPaths();  assert paths != null;  File moduleRoot=paths.getModuleRoot();  if (moduleRoot == null) {    getLog().error(String.format("%s failure: can't create files because module root is not found. Please report this error.",getTitle()));    return;  }  for (  RowEntry rowEntry : myParameterRows.values()) {    rowEntry.accept();  }  Map<String,Object> templateValues=getModel().getTemplateValues();  templateValues.clear();  templateValues.put(ATTR_IS_NEW_PROJECT,false);  templateValues.put(ATTR_PACKAGE_NAME,myPackageName.get());  templateValues.put(ATTR_SOURCE_PROVIDER_NAME,sourceSet.getName());  for (  Parameter parameter : myParameterRows.keySet()) {    ObservableValue<?> property=myParameterRows.get(parameter).getProperty();    if (property != null) {      templateValues.put(parameter.id,property.get());    }  }  try {    templateValues.put(ATTR_DEBUG_KEYSTORE_SHA1,KeystoreUtils.sha1(getDebugKeystore(facet)));  } catch (  Exception e) {    getLog().info("Could not compute SHA1 hash of debug keystore.",e);    templateValues.put(ATTR_DEBUG_KEYSTORE_SHA1,"");  }  AndroidPlatform platform=AndroidPlatform.getInstance(getModel().getModule());  if (platform != null) {    templateValues.put(ATTR_BUILD_API,platform.getTarget().getVersion().getFeatureLevel());    templateValues.put(ATTR_BUILD_API_STRING,getBuildApiString(platform.getTarget().getVersion()));  }  templateValues.put(ATTR_PROJECT_OUT,FileUtil.toSystemIndependentName(moduleRoot.getAbsolutePath()));  String packageAsDir=myPackageName.get().replace('.',File.separatorChar);  File srcDir=paths.getSrcDirectory();  if (srcDir != null) {    srcDir=new File(srcDir,packageAsDir);    templateValues.put(ATTR_SRC_DIR,getRelativePath(moduleRoot,srcDir));    templateValues.put(ATTR_SRC_OUT,FileUtil.toSystemIndependentName(srcDir.getAbsolutePath()));  }  File testDir=paths.getTestDirectory();  if (testDir != null) {    testDir=new File(testDir,packageAsDir);    templateValues.put(ATTR_TEST_DIR,getRelativePath(moduleRoot,testDir));    templateValues.put(ATTR_TEST_OUT,FileUtil.toSystemIndependentName(testDir.getAbsolutePath()));  }  File resDir=paths.getResDirectory();  if (resDir != null) {    templateValues.put(ATTR_RES_DIR,getRelativePath(moduleRoot,resDir));    templateValues.put(ATTR_RES_OUT,FileUtil.toSystemIndependentName(resDir.getPath()));  }  File manifestDir=paths.getManifestDirectory();  if (manifestDir != null) {    templateValues.put(ATTR_MANIFEST_DIR,getRelativePath(moduleRoot,manifestDir));    templateValues.put(ATTR_MANIFEST_OUT,FileUtil.toSystemIndependentName(manifestDir.getPath()));  }  File aidlDir=paths.getAidlDirectory();  if (aidlDir != null) {    templateValues.put(ATTR_AIDL_DIR,getRelativePath(moduleRoot,aidlDir));    templateValues.put(ATTR_AIDL_OUT,FileUtil.toSystemIndependentName(aidlDir.getPath()));  }  String applicationPackage=AndroidPackageUtils.getPackageForApplication(getModel().getFacet());  if (!myPackageName.get().equals(applicationPackage)) {    templateValues.put(ATTR_APPLICATION_PACKAGE,AndroidPackageUtils.getPackageForApplication(facet));  }  AndroidModuleInfo moduleInfo=AndroidModuleInfo.get(facet);  AndroidVersion minSdkVersion=moduleInfo.getMinSdkVersion();  String minSdkName=minSdkVersion.getApiString();  templateValues.put(ATTR_MIN_API,minSdkName);  templateValues.put(ATTR_TARGET_API,moduleInfo.getTargetSdkVersion().getApiLevel());  templateValues.put(ATTR_MIN_API_LEVEL,minSdkVersion.getFeatureLevel());  templateValues.put(ATTR_IS_LIBRARY_MODULE,facet.isLibraryProject());  templateValues.put(PROJECT_LOCATION_ID,module.getProject().getBasePath());  String moduleName=new File(module.getModuleFilePath()).getParentFile().getName();  templateValues.put(FormFactorUtils.ATTR_MODULE_NAME,moduleName);}  }
class C{  private void generateProvisionMethodForProviderOrLazy(NewBindingKey key,TypeElement referencingClass,String suffix){  ClassName injectorClassName=getInjectorFor(key,referencingClass);  TypeSpec anonymousTypeSpec=createAnonymousBuiltinTypeForUniqueBinding(injectorClassName,key,referencingClass);  MethodSpec.Builder methodSpecBuilder=MethodSpec.methodBuilder(getProvisionMethodName(key) + suffix).addModifiers(suffix.isEmpty() ? Modifier.PUBLIC : Modifier.PRIVATE).returns(key.getTypeName()).addStatement("return $L",anonymousTypeSpec);  Builder componentSpecBuilder=getInjectorTypeSpecBuilder(getInjectorFor(key,referencingClass));  componentSpecBuilder.addMethod(methodSpecBuilder.build());}  }
class C{  public void disableCrashUploading(){  mCrashUploadingEnabled=false;}  }
class C{  public ReversedLinesFileReader(final File file,final int blockSize,final Charset encoding) throws IOException {  this.blockSize=blockSize;  this.encoding=encoding;  randomAccessFile=new RandomAccessFile(file,"r");  totalByteLength=randomAccessFile.length();  int lastBlockLength=(int)(totalByteLength % blockSize);  if (lastBlockLength > 0) {    totalBlockCount=totalByteLength / blockSize + 1;  } else {    totalBlockCount=totalByteLength / blockSize;    if (totalByteLength > 0) {      lastBlockLength=blockSize;    }  }  currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);  Charset charset=Charsets.toCharset(encoding);  CharsetEncoder charsetEncoder=charset.newEncoder();  float maxBytesPerChar=charsetEncoder.maxBytesPerChar();  if (maxBytesPerChar == 1f) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-8")) {    byteDecrement=1;  } else   if (charset == Charset.forName("Shift_JIS")) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-16BE") || charset == Charset.forName("UTF-16LE")) {    byteDecrement=2;  } else   if (charset == Charset.forName("UTF-16")) {    throw new UnsupportedEncodingException("For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)");  } else {    throw new UnsupportedEncodingException("Encoding " + encoding + " is not supported yet (feel free to submit a patch)");  }  newLineSequences=new byte[][]{"\r\n".getBytes(encoding),"\n".getBytes(encoding),"\r".getBytes(encoding)};  avoidNewlineSplitBufferSize=newLineSequences[0].length;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public Calculable(String id,double value){  setId(id);  setValue(value);  setWhen(System.currentTimeMillis());}  }
class C{  boolean shouldShowErrorCodeInBar(){  return !(ChromeVersionInfo.isStableBuild() || ChromeVersionInfo.isBetaBuild());}  }
class C{  private void removeOMADownloadFromSharedPrefs(long downloadId){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  for (  String omaDownload : omaDownloads) {    OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);    if (entry.mDownloadId == downloadId) {      omaDownloads.remove(omaDownload);      storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads);      return;    }  }}  }
class C{  private File findSettingsFile(String context){  File userDir=new File(PlatformUtil.getUserHomeDir());  StringBuilder path=new StringBuilder();  String[] parts=context.split("/");  for (  String part : parts) {    path.append(part);    path.append(File.separator);  }  File settingsFile=new File(userDir,".gconf" + File.separator + path.toString()+ "%gconf.xml");  if (!settingsFile.exists()) {    Logger.log(getClass(),LogLevel.WARNING,"Gnome settings: {0} not found.",settingsFile);    return null;  }  return settingsFile;}  }
class C{  public boolean isSingleResult(){  return _results.getFieldNames().length == 1 && _results.getFieldValues().length == 1;}  }
class C{  protected DfpDec(final DfpField factory){  super(factory);}  }
class C{  public void init$Children(){}  }
class C{  public static Iterator tuples(TupleSet ts,Predicate p){  if (p == null)   return ts.tuples();  Iterator iter=null;  if (ts instanceof Table) {    Table t=(Table)ts;    IntIterator ii=getOptimizedIterator(t,p);    if (ii != null)     iter=t.tuples(ii);  }  if (iter == null) {    iter=new FilterIterator(ts.tuples(),p);  }  return iter;}  }
class C{  public final boolean isAlternatingUiMode(){  return (myAlternate & CFG_UI_MODE) != 0;}  }
class C{  public boolean isTreeDataUpdated(){  return treeDataUpdated;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SELL_TO_NPC_NO_INTEREST_IN(String value0){  return new SM_SYSTEM_MESSAGE(1300387,value0);}  }
class C{  @NotNull public NlConfigurationToolbarFixture requireDevice(@NotNull String id){  Wait.seconds(30).expecting("configuration to be updated").until(null);  return this;}  }
class C{  public static int divideToFloor(int numerator,int denominator){  Double result=Math.floor((double)numerator / denominator);  return result.intValue();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_CHANNELCHAT_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400225,value0);}  }
class C{  public void removeUnlocked(IObjectInfo<T> oi){  remove_impl((ObjectInfo<T>)oi);}  }
class C{  private BookKeeperClientBuilder(){}  }
class C{  public void restartBookies() throws Exception {  restartBookies(null);}  }
class C{  public static void mc2b(double mc[],double b[],int m,double a){  b[m]=mc[m];  for (m--; m >= 0; m--) {    b[m]=mc[m] - a * b[m + 1];  }}  }
class C{  private void logResponse(MessageResponse response) throws Exception {  Logging cloudantLogging=new Logging();  String intent="<no intent>";  String confidence="<no confidence>";  if (!response.getIntents().isEmpty() && response.getIntents().get(0) != null) {    intent=response.getIntents().get(0).getIntent();    confidence=response.getIntents().get(0).getConfidence().toString();  }  String entity=response.getEntities().size() > 0 ? "Entity: " + response.getEntities().get(0).getEntity() + " Value:"+ response.getEntities().get(0).getValue() : "<no entity>";  String convoOutput=(String)(response.getOutput().get("text") != null ? response.getOutput().get("text").toString() : "<no response>");  String convoId=(String)(response.getContext().get("conversation_id") != null ? (response.getContext().get("conversation_id")).toString() : "<no conversation id>");  String retrieveAndRankOutput=(String)(response.getOutput().get("CEPayload") != null ? response.getOutput().get("CEPayload").toString() : "<no payload>");  cloudantLogging.log(response.getInputText(),intent,confidence,entity,convoOutput,convoId,retrieveAndRankOutput);}  }
class C{  public static Schema subsetSchema(Schema schema,List<String> fieldNames){  return subsetSchema(schema,fieldNames,null);}  }
class C{  public StreamMessage createStreamMessage() throws JMSException {  ensureOpen();  GSStreamMessageImpl streamMsg=new GSStreamMessageImpl(this);  return streamMsg;}  }
class C{  public DynamicTemplateParameterContext addParameter(DynamicParameterConcatType dynamicParameter,ContextInfo contextInfo,boolean skip){  if (skip) {    return this;  }  String paramName=dynamicParameter.getName().trim();  String paramValue=dynamicParameter.getValue().trim();  if (dynamicParameter.isConcat() != null && dynamicParameter.isConcat()) {    appendParameter(paramName,paramValue,dynamicParameter.isDeleteOnExit(),dynamicParameter.isConcatWhitespace(),contextInfo);  } else   if (dynamicParameter.getAdd() != null) {    incrementParameter(paramName,dynamicParameter.getAdd(),contextInfo);  } else {    addParameter(paramName,paramValue,dynamicParameter.isDeleteOnExit(),contextInfo);  }  return this;}  }
class C{  protected boolean isSideChannelActive(){  return System.getenv(SIDECHANNEL_AUTH_ENV_NAME) != null;}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  public void unLock(File targetFile){  File lockFile=new File(targetFile.getParentFile().getAbsolutePath().concat("/lock"));  if (!lockFile.exists()) {    return;  }  if (this.mRefCountMap.containsKey(lockFile.getAbsolutePath())) {    FileLockCount fileLockCount=this.mRefCountMap.get(lockFile.getAbsolutePath());    if (fileLockCount != null) {      java.nio.channels.FileLock fileLock=fileLockCount.mFileLock;      RandomAccessFile randomAccessFile=fileLockCount.fOs;      FileChannel fileChannel=fileLockCount.fChannel;      try {        if (RefCntDec(lockFile.getAbsolutePath()) <= 0) {          if (fileLock != null && fileLock.isValid()) {            fileLock.release();          }          if (randomAccessFile != null) {            randomAccessFile.close();          }          if (fileChannel != null) {            fileChannel.close();          }        }      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  TranslateDao.createTable(db,ifNotExists);}  }
class C{  public boolean intersectWhere(Triangle t,Vector3f loc){  return intersectWhere(t.get(0),t.get(1),t.get(2),loc);}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffMental_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200816,skillcaster,skillname);}  }
class C{  public CommonWebView(Context context,AttributeSet attrs){  super(context,attrs);  initSelf();}  }
class C{  public void discard(ServiceRegistrar proxy){  if (proxy == null)   return;  ProxyReg reg=findReg(proxy);  if (reg != null) {synchronized (discoveredSet) {      reg.discard();      reg.commDiscard=true;    }  }}  }
class C{  public int calculateLocalSwapSize(int vmswapsize,int videoswapsize,int hostvmcount){  int i=((vmswapsize + videoswapsize) * hostvmcount) / 1024;  i+=(Host.getThirdpartylocalstorage() / 1024);  return i;}  }
class C{  protected void addLogSegmentToCache(String name,LogSegmentMetadata metadata){  logSegmentCache.add(name,metadata);  if (!metadata.isInProgress() && (lastLedgerRollingTimeMillis < metadata.getCompletionTime())) {    lastLedgerRollingTimeMillis=metadata.getCompletionTime();  }  if (reportGetSegmentStats) {    long ts=System.currentTimeMillis();    if (metadata.isInProgress()) {      long elapsedMillis=ts - metadata.getFirstTxId();      long elapsedMicroSec=TimeUnit.MILLISECONDS.toMicros(elapsedMillis);      if (elapsedMicroSec > 0) {        if (elapsedMillis > metadataLatencyWarnThresholdMillis) {          LOG.warn("{} received inprogress log segment in {} millis: {}",new Object[]{getFullyQualifiedName(),elapsedMillis,metadata});        }        getInprogressSegmentStat.registerSuccessfulEvent(elapsedMicroSec);      } else {        negativeGetInprogressSegmentStat.registerSuccessfulEvent(-elapsedMicroSec);      }    } else {      long elapsedMillis=ts - metadata.getCompletionTime();      long elapsedMicroSec=TimeUnit.MILLISECONDS.toMicros(elapsedMillis);      if (elapsedMicroSec > 0) {        if (elapsedMillis > metadataLatencyWarnThresholdMillis) {          LOG.warn("{} received completed log segment in {} millis : {}",new Object[]{getFullyQualifiedName(),elapsedMillis,metadata});        }        getCompletedSegmentStat.registerSuccessfulEvent(elapsedMicroSec);      } else {        negativeGetCompletedSegmentStat.registerSuccessfulEvent(-elapsedMicroSec);      }    }  }}  }
class C{  public SimpleObjectProperty<TestCaseStatus> statusProperty(){  return this.statusProperty;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_Rejected_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400100,value0);}  }
class C{  private OpEnum(String name){  this.name=name;  map.put(name,this);}  }
class C{  public void addEvidence(Decision dPrv,String sFinalCategory){  String sSuggestedCategory=(String)dPrv.FinalDecision;  DocumentNGramGraph dDoc=(DocumentNGramGraph)dPrv.Document;  if (sFinalCategory != null) {    if (Repository.existsObject(sFinalCategory,INSECTDB.CATEGORY_TYPE)) {      NamedDocumentNGramGraph cCat=(NamedDocumentNGramGraph)Repository.loadObject(sFinalCategory,INSECTDB.CATEGORY_TYPE);      double dCatDocs=CategoryEvidenceCount.getValue(cCat.getName());      cCat.merge(dDoc,dCatDocs == 0 ? 1.0 : (dCatDocs / ++dCatDocs));      CategoryEvidenceCount.increaseValue(cCat.getName(),1.0);      Repository.saveObject(cCat,sFinalCategory,INSECTDB.CATEGORY_TYPE);    } else {      NamedDocumentNGramGraph cCat=new NamedDocumentNGramGraph();      cCat.setName(sFinalCategory);      cCat.setDataString(dDoc.getDataString());      Repository.saveObject(cCat,sFinalCategory,INSECTDB.CATEGORY_TYPE);    }    if (!sFinalCategory.equals(sSuggestedCategory)) {      NamedDocumentNGramGraph cCat=(NamedDocumentNGramGraph)Repository.loadObject(sSuggestedCategory,INSECTDB.CATEGORY_TYPE);      if (cCat != null) {        cCat.degrade(dDoc);        Repository.saveObject(cCat,sSuggestedCategory,INSECTDB.CATEGORY_TYPE);      }    }  }}  }
class C{  @Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){  this.vendorOptionVersionsList=vendorOptionVersionsList;}  }
class C{  public DeferredFileOutputStream(int threshold,String prefix,String suffix,File directory){  this(threshold,null,prefix,suffix,directory);  if (prefix == null) {    throw new IllegalArgumentException("Temporary file prefix is missing");  }}  }
class C{  public void download(String remoteFileName,File localFile) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  download(remoteFileName,localFile,0,null);}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public static void showLogin(Activity activity,int requestCode){  Intent intent=new Intent(activity,LoginActivity.class);  activity.startActivityForResult(intent,requestCode);}  }
class C{  @Nullable public static String validate(String pattern){  String error=checkPatternForError(pattern);  if (error != null) {    return "Invalid glob pattern: " + error;  }  return null;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static boolean isValueConstantValued(Value op){  if (op instanceof PhiExpr) {    Iterator<Value> argsIt=((PhiExpr)op).getValues().iterator();    Constant firstConstant=null;    while (argsIt.hasNext()) {      Value arg=argsIt.next();      if (!(arg instanceof Constant))       return false;      if (firstConstant == null)       firstConstant=(Constant)arg; else       if (!firstConstant.equals(arg))       return false;    }    return true;  }  return Evaluator.isValueConstantValued(op);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TObjectIntHashMap)) {    return false;  }  TObjectIntHashMap that=(TObjectIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  AbortRecord(ParticipantHandle[] parts){  if (parts == null)   throw new IllegalArgumentException("AbortRecord: must specify " + "a non-null parts array");  this.parts=parts;}  }
class C{  public void addGlobalAttributeGroupDecl(XSAttributeGroupDecl decl){  fGlobalAttrGrpDecls.put(decl.fName,decl);  decl.setNamespaceItem(this);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void close() throws IOException {  if (io != null) {    try {      io.close();    }  finally {      io=null;    }  }}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public void clear(){  fDepth=0;}  }
class C{  public SecurityContext(SecurityContext securityContext){  this.authenticationToken=securityContext.getAuthenticationToken();  this.auditDetails=securityContext.getAuditDetails();}  }
class C{  private static int resolvePoolSize(int poolSize){  if (poolSize == 0)   return Runtime.getRuntime().availableProcessors();  return poolSize;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @deprecated public DictionaryBasedBreakIterator(InputStream compiledRules,InputStream dictionaryStream) throws IOException {  this.fRData=RBBIDataWrapper.get(compiledRules);  this.dictionary=new BreakDictionary(dictionaryStream);}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !"".equals(label)) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float xOffset=l.getLineWidth() + l.getXOffset();      float yOffset=Utils.convertDpToPixel(2f) + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public void connect(){  if (listeners.isEmpty()) {    AirMapLog.i("TrafficService","No listeners, not connecting");    return;  }  AirMapLog.i("TrafficService","Connecting to Traffic Service");  if (connectionState == ConnectionState.Connecting) {    return;  }  connectionState=ConnectionState.Connecting;  allTraffic.clear();  AirMap.getCurrentFlight(currentFlightCallback);}  }
class C{  private ReferencedEnvelope calculateBounds(){  ReferencedEnvelope bounds=null;  try {    bounds=featureList.getBounds();    if (bounds == null) {      bounds=featureList.getFeatures().getBounds();    }    if (bounds.getCoordinateReferenceSystem() == null) {      bounds=ReferencedEnvelope.create(bounds,DefaultGeographicCRS.WGS84);    }    if (bounds != null) {      Unit<?> unit=CRSUtilities.getUnit(bounds.getCoordinateReferenceSystem().getCoordinateSystem());      double width;      double height;      if (unit == NonSI.DEGREE_ANGLE) {        width=(bounds.getWidth() < BOUNDINGBOX_BUFFER_THRESHOLD_ANGLE) ? BOUNDINGBOX_BUFFER_MIN_ANGLE : (bounds.getWidth() * BOUNDINGBOX_BUFFER_ANGLE);        height=(bounds.getHeight() < BOUNDINGBOX_BUFFER_THRESHOLD_ANGLE) ? BOUNDINGBOX_BUFFER_MIN_ANGLE : (bounds.getHeight() * BOUNDINGBOX_BUFFER_ANGLE);      } else {        width=(bounds.getWidth() < BOUNDINGBOX_BUFFER_THRESHOLD_LINEAR) ? BOUNDINGBOX_BUFFER_MIN_LINEAR : (bounds.getWidth() * BOUNDINGBOX_BUFFER_LINEAR);        height=(bounds.getHeight() < BOUNDINGBOX_BUFFER_THRESHOLD_LINEAR) ? BOUNDINGBOX_BUFFER_MIN_LINEAR : (bounds.getHeight() * BOUNDINGBOX_BUFFER_LINEAR);      }      bounds.expandBy(width,height);    }  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);  }  return bounds;}  }
class C{  public static GeometryTypeEnum determineGeometryType(GeometryDescriptor geometryDescriptor,SimpleFeatureCollection simpleFeatureCollection){  if (geometryDescriptor == null) {    return GeometryTypeEnum.UNKNOWN;  }  if (simpleFeatureCollection == null) {    return GeometryTypeEnum.UNKNOWN;  }  Class<?> bindingType=geometryDescriptor.getType().getBinding();  if (bindingType == Geometry.class) {    Name geometryName=geometryDescriptor.getName();    SimpleFeatureIterator iterator=simpleFeatureCollection.features();    List<GeometryTypeEnum> geometryFeatures=new ArrayList<GeometryTypeEnum>();    while (iterator.hasNext()) {      SimpleFeature feature=iterator.next();      Object value=feature.getAttribute(geometryName);      if (value != null) {        GeometryTypeEnum geometryType=GeometryTypeMapping.getGeometryType(value.getClass());        if (!geometryFeatures.contains(geometryType)) {          geometryFeatures.add(geometryType);        }      }    }    return (combineGeometryType(geometryFeatures));  } else {    return GeometryTypeMapping.getGeometryType(bindingType);  }}  }
class C{  public float[] evaluate(List<String> taggedSentences){  DataFrame dataset=createDataFrame(taggedSentences);  return evaluate(dataset);}  }
class C{  @Override public Pair<Aggregation,Aggregation> nest(){  String nestingName=this.getName();  Aggregation outer=this.getAggregation().withFieldName(nestingName);  return new ImmutablePair<>(outer,this);}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  @Override public void onConnected(Bundle connectionHint){  initializeUI();  startLocationUpdates();}  }
class C{  private int findFreeSlot(){  byte[] bitMap=this.getBitMap();  for (int i=0; i < this.numEntries; i++) {    int byteOffset=i / 8;    int bitOffset=7 - (i % 8);    byte mask=(byte)(1 << bitOffset);    byte value=(byte)(bitMap[byteOffset] & mask);    if (value == 0) {      return i;    }  }  return -1;}  }
class C{  public TShortObjectHashMap(int initialCapacity,float loadFactor,TShortHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  protected GroupsIsMemberQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new ZipfDistribution(10,1);}  }
class C{  @PreAuthorize("hasRole('ALL') or hasRole('F_SYSTEM_SETTING')") @ResponseStatus(HttpStatus.NO_CONTENT) @RequestMapping(value="/{key}",method=RequestMethod.POST) public void updateStaticContent(@PathVariable("key") String key,@RequestParam(value="file",required=true) MultipartFile file) throws WebMessageException, IOException {  if (file == null || file.isEmpty()) {    throw new WebMessageException(WebMessageUtils.badRequest("Missing parameter 'file'"));  }  MimeType mimeType=MimeTypeUtils.parseMimeType(file.getContentType());  if (!mimeType.isCompatibleWith(MimeTypeUtils.IMAGE_PNG)) {    throw new WebMessageException(new WebMessage(Status.WARNING,HttpStatus.UNSUPPORTED_MEDIA_TYPE));  }  if (!KEY_WHITELIST_MAP.containsKey(key)) {    throw new WebMessageException(WebMessageUtils.badRequest("This key is not supported."));  }  File out=null;  try {    out=locationManager.getFileForWriting(key + ".png","static");  } catch (  LocationManagerException e) {    throw new WebMessageException(WebMessageUtils.error(e.getMessage()));  }  try {    file.transferTo(out);  } catch (  IOException e) {    throw new WebMessageException(WebMessageUtils.error("Could not save file."));  }}  }
class C{  public Cursor queryASBSessions(SQLiteDatabase db){  return db.rawQuery("SELECT * FROM " + S.TABLE_ASB_SETS,null);}  }
class C{  void onSaveFast(DataSupport baseObj) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  ignoreAssociations=true;  onSave(baseObj);}  }
class C{  @Deployment(resources="org/activiti/engine/test/api/event/ActivityEventsTest.testActivityMessageEventsInEventSubprocess.bpmn20.xml") public void testActivityMessageEventsInEventSubprocessForCancel() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().messageEventSubscriptionName("messageName").singleResult();  assertNotNull(executionWithMessage);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertEquals("Wait",task.getName());  taskService.complete(task.getId());  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("catchMessage",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_CANCELLED,messageEvent.getType());  assertEquals("catchMessage",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("messageName",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);}  }
class C{  private boolean checkForIssue164378(@Nullable Throwable throwable){  if (isIssue164378(throwable)) {    RenderProblem.Html problem=RenderProblem.create(ERROR);    HtmlBuilder builder=problem.getHtmlBuilder();    addHtmlForIssue164378(throwable,myModule,getLinkManager(),builder,true);    addMessage(problem);    return true;  }  return false;}  }
class C{  public double[] computePercentFactorPerSampleForTransposedChart(DefaultChartData chartData,String[] series){  final double[] percentFactorPerSample=new double[series.length];  for (int i=0; i < series.length; i++) {    double value=chartData.getTotalForSeriesIncludingDisabledAttributes(series[i]);    percentFactorPerSample[i]=(value == 0 ? 0 : 100 / value);  }  return percentFactorPerSample;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_COMPLETE(){  return new SM_SYSTEM_MESSAGE(1300612);}  }
class C{  public AudioEditAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  protected synchronized void beforeSpaceModeChange(SpaceMode newMode){  if (_logger.isLoggable(Level.FINER))   _logger.finer("Invoking beforeSpaceModeChange event, new mode " + newMode);  Queue<ISpaceModeListener> remoteListeners=new LinkedList<ISpaceModeListener>();  for (Iterator<ISpaceModeListener> iter=_primarySpaceModeListeners.iterator(); iter.hasNext(); ) {    ISpaceModeListener listener=iter.next();    try {      SpaceInitializationIndicator.setInitializer();      if (LRMIUtilities.isRemoteProxy(listener)) {        if (_logger.isLoggable(Level.FINEST))         _logger.finest("located remote listener for beforeSpaceModeChange, adding to asynchronous dispatch queue [" + listener.toString() + "]");        remoteListeners.add(listener);        continue;      }      listener.beforeSpaceModeChange(newMode);    } catch (    DirectPersistencyRecoveryException dpe) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,dpe.getMessage());      }      throw dpe;    }catch (    Exception rex) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"Failed to invoke method ISpaceModeListener.beforeSpaceModeChange(...) implemented by listener [" + listener + "]. Action Taken: Unregistered listener",rex);      }      _primarySpaceModeListeners.removeListener(listener);    } finally {      SpaceInitializationIndicator.unsetInitializer();    }  }  if (remoteListeners.size() > 0)   dispatchBeforeEventToRemoteListeners(remoteListeners,newMode);  if (_logger.isLoggable(Level.FINEST))   _logger.finest("completed invoking synchronous beforeSpaceModeChange event with mode " + newMode);}  }
class C{  public static InventoryType toBukkit(cn.nukkit.inventory.InventoryType nukkit){  return nukkitToBukkit.get(nukkit);}  }
class C{  public UrlManager(Context context){  mContext=context;  mNotificationManager=NotificationManagerCompat.from(context);  mPwsClient=new PwsClient();}  }
class C{  public boolean canCreate(){  return count < capacity;}  }
class C{  public SelectOperator(QueryOperator source,List<String> columns,boolean count,String averageColumn,String sumColumn) throws QueryPlanException {  super(OperatorType.SELECT);  this.columns=columns;  this.indices=new ArrayList<Integer>();  this.countValue=0;  this.sumValue=0;  this.averageCountValue=0;  this.averageSumValue=0;  this.averageColumnIndex=-1;  this.sumColumnIndex=-1;  this.sumColumn=sumColumn;  this.averageColumn=averageColumn;  this.hasCount=count;  this.hasAggregate=this.hasCount || averageColumn != null || sumColumn != null;  this.setSource(source);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200894,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  synchronized void ignoreTextChanges(){  mIgnoreTextChanges=true;}  }
class C{  public static Predicate<Integer> inRange(Integer lower,Integer upper){  return null;}  }
class C{  public void fling(int velocityX){  if (getChildCount() > 0) {    int width=getWidth() - getPaddingRight() - getPaddingLeft();    int right=getChildAt(0).getWidth();    mScroller.fling(getScrollX(),getScrollY(),velocityX,0,0,Math.max(0,right - width),0,0,width / 2,0);    ViewCompat.postInvalidateOnAnimation(this);  }}  }
class C{  public static String buildTestPageUrl(final Class<?> type){  return FILE_PROTOCOL + findResourcePath(type);}  }
class C{  public int search(byte[] text,int start){  int M=pattern.length;  int N=text.length;  int skip;  for (int i=start; i <= N - M; i+=skip) {    skip=0;    for (int j=M - 1; j >= 0; j--) {      if (pattern[j] != text[i + j]) {        skip=Math.max(1,j - right[text[i + j]]);        break;      }    }    if (skip == 0)     return i;  }  return N;}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  private boolean isPercentageDelta(String string){  String s=string.trim();  if (s.length() < 3)   return false;  return s.substring(s.length() - 1).equals("%") && isNumberDelta(s.substring(0,s.length() - 1));}  }
class C{  private static int toEven(float value){  int i=Math.round(value);  return (i % 2 == 1) ? i - 1 : i;}  }
class C{  static final LinkedVertexHull mergePointPoint(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertex leftRoot=left.root;  LinkedVertex rightRoot=right.root;  leftRoot.next=rightRoot;  leftRoot.prev=rightRoot;  rightRoot.next=leftRoot;  rightRoot.prev=leftRoot;  LinkedVertexHull hull=new LinkedVertexHull();  hull.root=leftRoot;  hull.leftMost=leftRoot;  hull.rightMost=rightRoot;  hull.size=2;  return hull;}  }
class C{  public void triggerAction(Map<String,String> postProperties,String commandUrl,String successMessage) throws IOException {  HttpPost request=new HttpPost(String.format(commandUrl,authorIp));  List<BasicNameValuePair> params=new ArrayList<>();  postProperties.entrySet().stream().forEach(null);  request.setEntity(new UrlEncodedFormEntity(params,Consts.UTF_8));  sender.sendCrxRequest(request,successMessage);}  }
class C{  public boolean empties_as_allocs(){  return soot.PhaseOptions.getBoolean(options,"empties-as-allocs");}  }
class C{  public BrowsableImplementor(BrowsableModel model,BrowsableView view){  this.model=model;  this.view=view;}  }
class C{  public LmdbException(final String message){  super(message);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public String tableName(){  return tblName;}  }
class C{  public int hashCode(){  int hashval=0;  for (  Constant c : vals.values())   hashval+=c.hashCode();  return hashval;}  }
class C{  public boolean hasObservers(){  return observers.get().length != 0;}  }
class C{  public static Predicate<EmailData> toAddress(final String address){  return null;}  }
class C{  private void checkAndWriteDictionaryChunkToFile() throws IOException {  if (oneDictionaryChunkList.size() >= dictionary_one_chunk_size) {    writeDictionaryFile();    createChunkList();  }}  }
class C{  protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);  this.mc.getTextureManager().bindTexture(INVENTORY_BACKGROUND);  int i=this.guiLeft;  int j=this.guiTop;  this.drawTexturedModalRect(i,j,0,0,this.xSize,this.ySize);  drawEntityOnScreen(i + 51,j + 75,30,(float)(i + 51) - this.oldMouseX,(float)(j + 75 - 50) - this.oldMouseY,this.mc.thePlayer);}  }
class C{  public boolean isAvoidFirstLastClippingEnabled(){  return mAvoidFirstLastClipping;}  }
class C{  public HumanTime y(int n){  delta+=YEAR * Math.abs(n);  return this;}  }
class C{  public Name(){}  }
class C{  private void checkIsInitialized(){  Preconditions.checkNotNull(boxDropExporterConfig,getClass().getSimpleName() + " must be initialized first");}  }
class C{  public NoDataException(Localizable specific){  super(specific);}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  private void internalCreateLabel(int xPos,String label){  JLabel lblLabel=new JLabel(label);  lblLabel.setBounds(xPos + 5,0,BasePanel.LABEL_WIDTH,BasePanel.WIDGET_HEIGHT);  lblLabel.setHorizontalAlignment(SwingConstants.TRAILING);  add(lblLabel);}  }
class C{  @PickTriggerResult public int fromCamera(){  final File outputFile=this.createCameraImageFile();  if (outputFile == null) {    return PickTriggerResult.TRIGGER_PICK_ERR_CAM_FILE;  }  return this.triggerPick(this.prepareCameraIntent(this.createCameraImageUri(outputFile)),QiPick.REQ_CAMERA);}  }
class C{  public static boolean createCompactionRequiredFile(String metaFolderPath,CompactionType compactionType){  String statusFile;  if (compactionType.equals(CompactionType.MINOR_COMPACTION)) {    statusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;  } else {    statusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;  }  try {    if (!FileFactory.isFileExist(statusFile,FileFactory.getFileType(statusFile))) {      if (FileFactory.createNewFile(statusFile,FileFactory.getFileType(statusFile))) {        LOGGER.info("successfully created a compaction required file - " + statusFile);        return true;      } else {        LOGGER.error("Not able to create a compaction required file - " + statusFile);        return false;      }    } else {      LOGGER.info("Compaction request file : " + statusFile + " already exist.");    }  } catch (  IOException e) {    LOGGER.error("Exception in creating the compaction request file " + e.getMessage());  }  return false;}  }
class C{  public PhotosEditQuery caption(String value){  return unsafeParam("caption",value);}  }
class C{  @SuppressWarnings("rawtypes") public static void main(String args[]){  if (args.length < 1) {    System.out.println("Error: Must have 1 parameter: config filename");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  try {    ClientGlobal.init(args[0]);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    file_ids=new java.util.concurrent.ConcurrentLinkedQueue();    for (int i=0; i < 10; i++) {      (new UploadThread(i)).start();    }    for (int i=0; i < 20; i++) {      (new DownloadThread(i)).start();    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public double length(){  return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));}  }
class C{  public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  @Override public final void readFully(byte ba[],int off,int len) throws IOException {  dis.readFully(ba,off,len);}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testTaskVariableEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.setVariableLocal(task.getId(),"testVariable","The value");  taskService.setVariableLocal(task.getId(),"testVariable","Updated value");  taskService.removeVariableLocal(task.getId(),"testVariable");  assertEquals(3,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals("The value",event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals("Updated value",event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals(null,event.getVariableValue());  listener.clearEventsReceived();}  }
class C{  public static NumberPadTimePickerDialog newInstance(OnTimeSetListener callback){  NumberPadTimePickerDialog ret=new NumberPadTimePickerDialog();  ret.setOnTimeSetListener(callback);  ret.mThemeDark=false;  ret.mThemeSetAtRuntime=false;  return ret;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAMESHOP_NOT_ENOUGH_CASH(String value0){  return new SM_SYSTEM_MESSAGE(901706,value0);}  }
class C{  protected static Boolean checkFullSecureOrStandard(HttpServletRequest request,WebSiteProperties webSiteProps,ConfigXMLReader.RequestMap requestMap,Boolean interWebapp,Boolean fullPath,Boolean secure){  if (interWebapp == null) {    interWebapp=Boolean.FALSE;  }  if ((Boolean.TRUE.equals(secure) && (Boolean.TRUE.equals(fullPath) || request == null || !request.isSecure())) || ((webSiteProps == null || webSiteProps.getEnableHttps()) && requestMap != null && requestMap.securityHttps && (request == null || !request.isSecure() || Boolean.TRUE.equals(fullPath))) || ((webSiteProps == null || webSiteProps.getEnableHttps()) && secure == null && Boolean.TRUE.equals(fullPath) && request != null && request.isSecure())) {    return Boolean.TRUE;  } else   if (Boolean.TRUE.equals(fullPath) || (requestMap != null && (Boolean.FALSE.equals(secure) && !requestMap.securityHttps && request != null && request.isSecure())) || (requestMap == null && (Boolean.FALSE.equals(secure) && request != null && request.isSecure()))) {    return Boolean.FALSE;  } else {    return null;  }}  }
class C{  protected void clearCategories(){  for (  CategoryComponent category : categories) {    TableSubHeader subheader=category.getElement();    if (subheader != null) {      subheader.removeFromParent();    }  }  categories.clear();}  }
class C{  public static AccountOperationResponseCode delete(String email){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      pm.deletePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  protected boolean edgeCheck(Edge e,boolean throwException){  if (!e.isValid()) {    if (throwException) {      throw new IllegalArgumentException("Edge must be valid.");    }    return false;  }  if (e.getGraph() != this) {    if (throwException) {      throw new IllegalArgumentException("Edge must be part of this Graph.");    }    return false;  }  return true;}  }
class C{  public static Map<String,Object> map(Object... objects){  if (objects.length % 2 != 0) {    throw new ActivitiIllegalArgumentException("The input should always be even since we expect a list of key-value pairs!");  }  Map<String,Object> map=new HashMap<String,Object>();  for (int i=0; i < objects.length; i+=2) {    map.put((String)objects[i],objects[i + 1]);  }  return map;}  }
class C{  public SpaceTypeDescriptorContainer(){}  }
class C{  public void stopRecordingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.stopRecording();  }}  }
class C{  private boolean jumpToPage(int position,boolean smooth){  if (mShowWelcomePage && !didAcceptTermsOfService()) {    return position == 0;  }  if (position >= mPagerAdapter.getCount()) {    completeFirstRunExperience();    return false;  }  mPager.setCurrentItem(position,smooth);  return true;}  }
class C{  @Frame("$cq") public AemRichText click(final RtButton button){  if (!buttonSelected(button)) {    bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  }  return this;}  }
class C{  private void printLeafNodes(Node node,DataOutput out,PrintWriter pw) throws IOException {  Node nextNode;  if (node.getNumberOfNodes() > 1) {    assert node instanceof DecisionNode;    DecisionNode decNode=(DecisionNode)node;    for (int i=0; i < decNode.getNumberOfDaugthers(); i++) {      nextNode=decNode.getDaughter(i);      printLeafNodes(nextNode,out,pw);    }  } else {    assert node instanceof LeafNode;    LeafNode leaf=(LeafNode)node;    if (leaf.getUniqueLeafId() == 0)     return;    LeafType leafType=leaf.getLeafNodeType();    if (leafType == LeafType.FeatureVectorLeafNode) {      leafType=LeafType.IntArrayLeafNode;    }    if (out != null) {      out.writeInt(leafType.ordinal());    }    if (pw != null) {      pw.print("id" + leaf.getUniqueLeafId() + " "+ leafType);    }switch (leaf.getLeafNodeType()) {case IntArrayLeafNode:      int data[]=((IntArrayLeafNode)leaf).getIntData();    if (out != null)     out.writeInt(data.length);  if (pw != null)   pw.print(" " + data.length);for (int i=0; i < data.length; i++) {  if (out != null)   out.writeInt(data[i]);  if (pw != null)   pw.print(" " + data[i]);}break;case FloatLeafNode:float stddev=((FloatLeafNode)leaf).getStDeviation();float mean=((FloatLeafNode)leaf).getMean();if (out != null) {out.writeFloat(stddev);out.writeFloat(mean);}if (pw != null) {pw.print(" 1 " + stddev + " "+ mean);}break;case IntAndFloatArrayLeafNode:case StringAndFloatLeafNode:int data1[]=((IntAndFloatArrayLeafNode)leaf).getIntData();float floats[]=((IntAndFloatArrayLeafNode)leaf).getFloatData();if (out != null) out.writeInt(data1.length);if (pw != null) pw.print(" " + data1.length);for (int i=0; i < data1.length; i++) {if (out != null) {out.writeInt(data1[i]);out.writeFloat(floats[i]);}if (pw != null) pw.print(" " + data1[i] + " "+ floats[i]);}break;case FeatureVectorLeafNode:FeatureVector fv[]=((FeatureVectorLeafNode)leaf).getFeatureVectors();if (out != null) out.writeInt(fv.length);if (pw != null) pw.print(" " + fv.length);for (int i=0; i < fv.length; i++) {if (out != null) out.writeInt(fv[i].getUnitIndex());if (pw != null) pw.print(" " + fv[i].getUnitIndex());}break;case PdfLeafNode:throw new IllegalArgumentException("Writing of pdf leaf nodes not yet implemented");}if (pw != null) pw.println();}}  }
class C{  @Override public final Node namedItem(String name){  if (name == null)   throw new NullPointerException("HTM013 Argument 'name' is null.");  return namedItem(_topLevel,name);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public VideoGetCommentsQuery startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public static SourceDataTag fromConfigXML(final org.w3c.dom.Element domElement){  Long id=Long.valueOf(domElement.getAttribute("id"));  String name=domElement.getAttribute("name");  boolean control=domElement.getAttribute("control").equals("true");  SourceDataTag result=new SourceDataTag(id,name,control);  NodeList fields=domElement.getChildNodes();  int fieldsCount=fields.getLength();  for (int i=0; i < fieldsCount; i++) {    Node fieldNode=fields.item(i);    String fieldName;    String fieldValueString=null;    if (fieldNode.getNodeType() == 1) {      fieldName=fieldNode.getNodeName();      if (fieldNode.getFirstChild() != null) {        fieldValueString=fieldNode.getFirstChild().getNodeValue();      }      if (fieldName.equals("data-type")) {        result.dataType=fieldValueString;      } else       if (fieldName.equals("mode")) {        result.mode=Short.parseShort(fieldValueString);      } else       if (fieldName.equals("DataTagAddress")) {        result.address=DataTagAddress.fromConfigXML((org.w3c.dom.Element)fieldNode);      } else       if (fieldName.equals("min-value") || fieldName.equals("max-value")) {        String dataType=fieldNode.getAttributes().item(0).getNodeValue();        Number value=(Number)TypeConverter.cast(fieldValueString,dataType);        if (fieldName.equals("min-value")) {          result.minValue=value;        } else {          result.maxValue=value;        }      }    }  }  return result;}  }
class C{  private void Canvas_Ring(Canvas canvas){  int center=getWidth() / 2;  int radius=center - 32;  paint.setColor(dashColor);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(dashWidth);  paint.setAntiAlias(true);  canvas.drawCircle(center,center,radius,paint);  Bitmap bitmap=BitmapFactory.decodeResource(getResources(),dashIcon);  int bitmap_width=bitmap.getWidth();  canvas.drawBitmap(bitmap,center - bitmap_width / 2,radius - (dashProWidth * 3),paint);  String str=dashTitle + "";  paint.setStrokeWidth(0);  paint.setTextSize(dashTitleSize);  paint.setTypeface(Typeface.SANS_SERIF);  paint.setColor(dashTitleColor);  float textWidth=paint.measureText(str);  canvas.drawText(str,center - textWidth / 2,center + 80,paint);  double warning=dashProMax * 0.8;  if (dashProgress > warning) {    paint.setColor(getResources().getColor(R.color.lava));  } else {    paint.setColor(dasProColor);  }  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(dashProWidth);  paint.setAntiAlias(true);  paint.setStrokeCap(Paint.Cap.ROUND);  RectF rectF=new RectF(center - radius,center - radius,center + radius,center + radius);  canvas.drawArc(rectF,90,360 * (dashProgress / dashProMax),false,paint);  paint.setColor(getResources().getColor(R.color.background_floating_material_dark));  paint.setStyle(Paint.Style.FILL);  paint.setAntiAlias(true);  canvas.drawCircle(center,getHeight() - 32,10,paint);}  }
class C{  public SandboxRay(String name,double direction){  super(direction);  this.name=name;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201142,value0);}  }
class C{  public static Object convertStringToObject(String objectString) throws IOException {  if (objectString == null) {    return null;  }  byte[] bytes=Base64.decodeBase64(objectString.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));  ByteArrayInputStream bais=null;  GZIPInputStream gis=null;  ObjectInputStream ois=null;  try {    bais=new ByteArrayInputStream(bytes);    gis=new GZIPInputStream(bais);    ois=new ObjectInputStream(gis);    return ois.readObject();  } catch (  ClassNotFoundException e) {    throw new IOException("Could not read object",e);  } finally {    try {      if (ois != null) {        ois.close();      }      if (gis != null) {        gis.close();      }      if (bais != null) {        bais.close();      }    } catch (    IOException e) {      LOG.error(e);    }  }}  }
class C{  public void deviceAdded(ZWaveNode node){  if (controllerHandler.getOwnNodeId() == node.getNodeId() || node.getNodeId() == 0 || node.getNodeId() > 232) {    return;  }  logger.debug("NODE {}: Device discovery completed",node.getNodeId());  ThingUID bridgeUID=controllerHandler.getThing().getUID();  ZWaveProduct foundProduct=null;  for (  ZWaveProduct product : ZWaveConfigProvider.getProductIndex()) {    if (product == null) {      continue;    }    logger.debug("NODE {}: Checking {}",node.getNodeId(),product.getThingTypeUID());    if (product.match(node) == true) {      foundProduct=product;      break;    }  }  ThingUID thingUID=new ThingUID(new ThingTypeUID(ZWaveBindingConstants.ZWAVE_THING),bridgeUID,String.format("node%d",node.getNodeId()));  Map<String,Object> properties=new HashMap<>(11);  if (discoveryServiceCallback != null && discoveryServiceCallback.getExistingDiscoveryResult(thingUID) != null) {    logger.debug("NODE {}: Device already known - properties will be updated.",node.getNodeId());    properties=discoveryServiceCallback.getExistingDiscoveryResult(thingUID).getProperties();  }  String label=String.format("Z-Wave Node %d",node.getNodeId());  if (foundProduct == null) {    logger.warn("NODE {}: Device discovery could not resolve to a thingType! {}:{}:{}::{}",node.getNodeId(),String.format("%04X",node.getManufacturer()),String.format("%04X",node.getDeviceType()),String.format("%04X",node.getDeviceId()),node.getApplicationVersion());    if (node.getManufacturer() != Integer.MAX_VALUE) {      label+=String.format(" (%04X:%04X:%04X:%s)",node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion());    }  } else {    logger.debug("NODE {}: Device discovery resolved to thingType {}",node.getNodeId(),foundProduct.getThingTypeUID());    ThingType thingType=ZWaveConfigProvider.getThingType(foundProduct.getThingTypeUID());    label+=String.format(": %s",thingType.getLabel());  }  properties.put(ZWaveBindingConstants.PROPERTY_NODEID,Integer.toString(node.getNodeId()));  if (node.getManufacturer() != Integer.MAX_VALUE) {    properties.put(ZWaveBindingConstants.PROPERTY_MANUFACTURER,Integer.toString(node.getManufacturer()));    properties.put(ZWaveBindingConstants.PROPERTY_DEVICETYPE,Integer.toString(node.getDeviceType()));    properties.put(ZWaveBindingConstants.PROPERTY_DEVICEID,Integer.toString(node.getDeviceId()));  }  properties.put(ZWaveBindingConstants.PROPERTY_VERSION,node.getApplicationVersion());  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_BASIC,node.getDeviceClass().getBasicDeviceClass().toString());  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_GENERIC,node.getDeviceClass().getGenericDeviceClass().toString());  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_SPECIFIC,node.getDeviceClass().getSpecificDeviceClass().toString());  properties.put(ZWaveBindingConstants.PROPERTY_LISTENING,Boolean.toString(node.isListening()));  properties.put(ZWaveBindingConstants.PROPERTY_FREQUENT,Boolean.toString(node.isFrequentlyListening()));  properties.put(ZWaveBindingConstants.PROPERTY_BEAMING,Boolean.toString(node.isBeaming()));  properties.put(ZWaveBindingConstants.PROPERTY_ROUTING,Boolean.toString(node.isRouting()));  DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withProperties(properties).withBridge(bridgeUID).withLabel(label).build();  thingDiscovered(discoveryResult);  return;}  }
class C{  public static String htmlify(String text){  text=htmlLinks(text);  text=htmlNewline(text);  return text;}  }
class C{  private void parseSnippet(SnippetKind snippetKind,String header){  TokenStream tokens=new TokenStream(header);  String name=tokens.expect(IDENTIFIER);  List<String> paramList=Lists.newArrayList();  Set<String> usedParamNames=Sets.newHashSet();  tokens.expect("(");  if (!tokens.has(")")) {    for (; ; ) {      String param=tokens.expect(IDENTIFIER);      if (!usedParamNames.add(param)) {        error("duplicate parameter '%s'",param);      }      if (param != null) {        paramList.add(param);      }      if (tokens.has(",")) {        tokens.next();      } else {        break;      }    }  }  tokens.expect(")");  List<Elem> elems=ImmutableList.of();  Layout layout=Layout.DEFAULT;  if (snippetKind != SnippetKind.ABSTRACT) {    layout=parseLayout(tokens);    tokens.checkAtEnd();    elems=parseUntil(layout.groupKind() == Doc.GroupKind.VERTICAL ? 0 : -1,layout,END_COMMAND);  } else {    tokens.checkAtEnd();  }  Location location=Location.create(input.getPath(),input.lineNo);  String fullName=snippetKind == SnippetKind.PRIVATE ? Context.makePrivateSnippetName(location,name) : name;  Snippet old=snippetSet.get(fullName,paramList.size());  Snippet snippet=Snippet.create(location,fullName,snippetKind,old,layout,paramList,elems);  snippetSet.add(snippet);  if (snippetKind == SnippetKind.OVERRIDE && old == null) {    error("no previous snippet '%s' to override",snippet.displayName());  }  if (old != null) {    if (snippetKind != SnippetKind.OVERRIDE) {      error("must use '@override name(...) ...' to override snippet '%s'",old.displayName());    } else     if (old.location().inputName().equals(snippet.location().inputName())) {      error("cannot override snippet '%s' defined in the same source at line %s",old.displayName(),old.location().lineNo());    } else     if (!old.location().inputName().startsWith(snippet.location().inputName())) {      error("snippet '%s' cannot be overridden from here since it is not in the extension " + "path.%n Current path: %s%n Original path: %s, line %s",snippet.displayName(),snippet.location().inputName(),old.location().inputName(),old.location().lineNo());    }  }}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public boolean isLineVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    enabled=(obj instanceof Rule) && (geometryType == GeometryTypeEnum.LINE);  }  return enabled;}  }
class C{  public boolean didTouchContent(){  return mHasContentBeenTouched;}  }
class C{  public void deleteAvd(@NotNull AvdInfo info){  if (!initIfNecessary()) {    return;  }  myAvdManager.deleteAvd(info,SDK_LOG);}  }
class C{  public XMLParser(final Class classToBeBound,final String schema) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schema));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schema));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public static Value noLocal(Value val){  if (val != null && !isLocal(val))   return val; else   return null;}  }
class C{  public static void compareNodes(Node expected,Node actual,boolean trimEmptyTextNodes) throws Exception {  if (trimEmptyTextNodes) {    trimEmptyTextNodes(expected);    trimEmptyTextNodes(actual);  }  if (expected.getNodeType() != actual.getNodeType()) {    throw new Exception("Different types of nodes: " + expected + " "+ actual);  }  if (expected instanceof Document) {    Document expectedDoc=(Document)expected;    Document actualDoc=(Document)actual;    compareNodes(expectedDoc.getDocumentElement(),actualDoc.getDocumentElement(),false);  } else   if (expected instanceof Element) {    Element expectedElement=(Element)expected;    Element actualElement=(Element)actual;    if (!expectedElement.getLocalName().equals(actualElement.getLocalName())) {      throw new Exception("Element names do not match: " + expectedElement.getLocalName() + " "+ actualElement.getLocalName());    }    String expectedNS=expectedElement.getNamespaceURI();    String actualNS=actualElement.getNamespaceURI();    if ((expectedNS == null && actualNS != null) || (expectedNS != null && !expectedNS.equals(actualNS))) {      throw new Exception("Element namespaces names do not match: " + expectedNS + " "+ actualNS);    }    String elementName="{" + expectedElement.getNamespaceURI() + "}"+ actualElement.getLocalName();    NamedNodeMap expectedAttrs=expectedElement.getAttributes();    NamedNodeMap actualAttrs=actualElement.getAttributes();    if (countNonNamespaceAttributes(expectedAttrs) != countNonNamespaceAttributes(actualAttrs)) {      throw new Exception(elementName + ": Number of attributes do not match up: " + countNonNamespaceAttributes(expectedAttrs)+ " "+ countNonNamespaceAttributes(actualAttrs));    }    for (int i=0; i < expectedAttrs.getLength(); i++) {      Attr expectedAttr=(Attr)expectedAttrs.item(i);      if (expectedAttr.getName().startsWith("xmlns")) {        continue;      }      Attr actualAttr=null;      actualAttr=(Attr)actualAttrs.getNamedItem(expectedAttr.getName());      if (actualAttr == null) {        throw new Exception(elementName + ": No attribute found:" + expectedAttr);      }      if (!expectedAttr.getValue().equals(actualAttr.getValue())) {        throw new Exception(elementName + ": Attribute values do not match: " + expectedAttr.getValue()+ " "+ actualAttr.getValue());      }    }    NodeList expectedChildren=expectedElement.getChildNodes();    NodeList actualChildren=actualElement.getChildNodes();    if (expectedChildren.getLength() != actualChildren.getLength()) {      throw new Exception(elementName + ": Number of children do not match up: " + expectedChildren.getLength()+ " "+ actualChildren.getLength());    }    for (int i=0; i < expectedChildren.getLength(); i++) {      Node expectedChild=expectedChildren.item(i);      Node actualChild=actualChildren.item(i);      compareNodes(expectedChild,actualChild,false);    }  } else   if (expected instanceof Text) {    String expectedData=((Text)expected).getData().trim();    String actualData=((Text)actual).getData().trim();    if (!expectedData.equals(actualData)) {      throw new Exception("Text does not match: " + expectedData + " "+ actualData);    }  }}  }
class C{  @Override public double[] analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  int len=frame.length;  int middle=len / 2 + len % 2;  System.arraycopy(frame,middle,real,0,len - middle);  System.arraycopy(frame,0,real,real.length - middle,middle);  if (real.length > frame.length)   Arrays.fill(real,len - middle,real.length - middle,0);  FFT.realTransform(real,false);  return FFT.computePhaseSpectrum_FD(real);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  protected MarketGetByIdQueryWithExtended itemIds(List<String> value){  return unsafeParam("item_ids",value);}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer fetchSize(int fetchSize){  this.fetchSize=fetchSize;  return this;}  }
class C{  public Builder extractionFolder(File extractionFolder){  this.extractionFolder=extractionFolder;  return this;}  }
class C{  public static String composeConnectionName(final String clientId,final List<String> serverURIs){  return composeConnectionName(clientId,serverURIsToString(serverURIs));}  }
class C{  public boolean isVerticalGuideline(){  if (mConstraintWidget instanceof Guideline) {    Guideline g=(Guideline)mConstraintWidget;    return g.getOrientation() == Guideline.VERTICAL;  }  return false;}  }
class C{  private String validated(String permissionString) throws InvalidPermissionStringException {  _permissionResolver.resolvePermission(permissionString);  return permissionString;}  }
class C{  public Pair whichCatchableAs(RefType catcher){  if (INSTRUMENTING) {    Manager.v().removesOfAnySubType++;  }  FastHierarchy h=Scene.v().getOrMakeFastHierarchy();  Set<RefLikeType> caughtIncluded=null;  Set<AnySubType> caughtExcluded=null;  Set<RefLikeType> uncaughtIncluded=null;  Set<AnySubType> uncaughtExcluded=null;  if (INSTRUMENTING) {    Manager.v().removesFromSearch++;  }  for (  AnySubType exclusion : exceptionsExcluded) {    RefType exclusionBase=exclusion.getBase();    if (catcher.getSootClass().isPhantom() && exclusionBase.equals(catcher))     return new Pair(ThrowableSet.Manager.v().EMPTY,this);    if (h.canStoreType(catcher,exclusionBase)) {      return new Pair(ThrowableSet.Manager.v().EMPTY,this);    } else     if (h.canStoreType(exclusionBase,catcher)) {      caughtExcluded=addExceptionToSet(exclusion,caughtExcluded);    } else {      uncaughtExcluded=addExceptionToSet(exclusion,uncaughtExcluded);    }  }  for (  RefLikeType inclusion : exceptionsIncluded) {    if (inclusion instanceof RefType) {      if (catcher.getSootClass().isPhantom()) {        if (inclusion.equals(catcher))         caughtIncluded=addExceptionToSet(inclusion,caughtIncluded); else         uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);      } else       if (h.canStoreType(inclusion,catcher)) {        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);      } else {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);      }    } else {      RefType base=((AnySubType)inclusion).getBase();      if (catcher.getSootClass().isPhantom()) {        if (base.equals(catcher))         caughtIncluded=addExceptionToSet(inclusion,caughtIncluded); else {          if (base.getClassName().equals("java.lang.Throwable"))           caughtIncluded=addExceptionToSet(catcher,caughtIncluded);          uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);        }      } else       if (h.canStoreType(base,catcher)) {        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);      } else       if (h.canStoreType(catcher,base)) {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);        uncaughtExcluded=addExceptionToSet(AnySubType.v(catcher),uncaughtExcluded);        caughtIncluded=addExceptionToSet(AnySubType.v(catcher),caughtIncluded);      } else {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);      }    }  }  ThrowableSet caughtSet=Manager.v().registerSetIfNew(caughtIncluded,caughtExcluded);  ThrowableSet uncaughtSet=Manager.v().registerSetIfNew(uncaughtIncluded,uncaughtExcluded);  return new Pair(caughtSet,uncaughtSet);}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public void removeIndexExperimentsToUser(User.ID userID,Experiment.ID experimentID,Context context,Application.Name appName){  String CQL="delete from experiment_user_index " + "where user_id = ? and experiment_id = ? and context = ? and app_name = ?";  try {    PreparedCqlQuery<User.ID,String> query=driver.getKeyspace().prepareQuery(keyspace.experimentUserIndexCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(userID,UserIDSerializer.get()).withByteBufferValue(experimentID,ExperimentIDSerializer.get()).withStringValue(context.getContext()).withByteBufferValue(appName,ApplicationNameSerializer.get());    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not delete index from experiment_user_index for user: " + userID + "to experiment: "+ experimentID,e);  }}  }
class C{  public SerialMessage allOffMessage(){  logger.debug("NODE {}: Switch All - Creating All Off message.",getNode().getNodeId());  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_OFF};  result.setMessagePayload(newPayload);  return result;}  }
class C{  public void unlockFlushing(){  flushLock.unlock();}  }
class C{  private static boolean isPaymentTypeRecurse(GenericValue paymentType,String inputTypeId) throws GenericEntityException {  String parentTypeId=paymentType.getString("parentTypeId");  if (parentTypeId == null) {    return false;  }  if (parentTypeId.equals(inputTypeId)) {    return true;  }  return isPaymentTypeRecurse(paymentType.getRelatedOne("ParentPaymentType",false),inputTypeId);}  }
class C{  private static final String toXml(Transform t){  StringBuilder sb=new StringBuilder();  sb.append("<Transform>").append(XmlGenerator.toXml(t.getTranslation(),"Translation")).append("<Rotation>").append(Math.toDegrees(t.getRotation())).append("</Rotation>").append("</Transform>");  return sb.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201263,skillcaster,skilltarget,skillname);}  }
class C{  public float[] generateTransformedValuesCandle(ICandleDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    CandleEntry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getHigh() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public static void zkCreateFullPathOptimistic(ZooKeeperClient zkc,String path,byte[] data,final List<ACL> acl,final CreateMode createMode) throws ZooKeeperClient.ZooKeeperConnectionException, KeeperException, InterruptedException {  try {    Await.result(zkAsyncCreateFullPathOptimistic(zkc,path,data,acl,createMode));  } catch (  ZooKeeperClient.ZooKeeperConnectionException zkce) {    throw zkce;  }catch (  KeeperException ke) {    throw ke;  }catch (  InterruptedException ie) {    throw ie;  }catch (  RuntimeException rte) {    throw rte;  }catch (  Exception exc) {    throw new RuntimeException("Unexpected Exception",exc);  }}  }
class C{  public int updateScrollOffset(int scrollOffset){  return mTicklableLayoutManager != null ? mTicklableLayoutManager.updateScrollOffset(scrollOffset) : scrollOffset;}  }
class C{  protected MessagesGetChatUsersQueryWithChatIds chatIds(Integer... value){  return unsafeParam("chat_ids",value);}  }
class C{  private boolean isValidAnnouncement(String name){  return LegionConfig.ANNOUNCEMENT_PATTERN.matcher(name.replaceAll("\\r\\n","")).matches();}  }
class C{  public static String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String uri){  RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());  return rh.makeLinkAuto(request,response,uri,null,null,null,null,null,null,null);}  }
class C{  public void reset(){  super.clear();  fContextType=CONTEXT_INITIALIZE;  fLocationHints=null;  fTriggeringComponent=null;  fEnclosedElementName=null;  fAttributes=null;}  }
class C{  public void delete(Config config){  configDao.unBindApp(config);  configDao.unIndex(config);  configDao.delete(config.getId());}  }
class C{  public static int update(String table,String sets,String where,Object[] whereArgs,String db){  StringBuilder sql=new StringBuilder();  sql.append("update ").append(table).append(" set ").append(sets);  if (where != null) {    sql.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    if (X.isEmpty(db)) {      c=getConnection();    } else {      c=getConnection(db);    }    if (c == null)     return -1;    p=c.prepareStatement(sql.toString());    int order=1;    if (whereArgs != null) {      for (int i=0; i < whereArgs.length; i++) {        Object o=whereArgs[i];        setParameter(p,order++,o);      }    }    return p.executeUpdate();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(whereArgs),e);  } finally {    close(c,p,r);  }  return 0;}  }
class C{  public VOGeoServerContrastEnhancementNormalizeOverall(Class<?> panelId,RasterSymbolizerDetails parentPanel){  super(panelId,"geoserver/GeoServerContrastEnhancementNormalizeOverall.xml",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_OVERALL,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_OVERALL,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_OVERALL);}  }
class C{  private BSPTree<Euclidean1D> nextInternalNode(BSPTree<Euclidean1D> node){  if (childAfter(node).getCut() != null) {    return leafAfter(node).getParent();  }  while (isAfterParent(node)) {    node=node.getParent();  }  return node.getParent();}  }
class C{  private static int writeMatches(IReadBlock readBlock,Writer w) throws IOException {  int countMatches=0;  String readHeader=readBlock.getReadHeader();  if (readHeader.startsWith(">"))   readHeader=readHeader.substring(1);  w.write("\nQuery=" + readHeader + "\n");  final String readSequence=readBlock.getReadSequence();  if (readSequence != null)   w.write("\t(" + readSequence.length() + " letters)\n");  w.write("\n");  if (readBlock.getNumberOfAvailableMatchBlocks() == 0)   w.write(" ***** No hits found ******\n"); else {    for (    IMatchBlock matchBlock : readBlock.getMatchBlocks()) {      w.write(matchBlock.getText() + "\n");      countMatches++;    }  }  return countMatches;}  }
class C{  public String toString(){  String sRes="[";  Iterator iIter=iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sRes+=oNext.toString();    if (iIter.hasNext())     sRes+="|";  }  sRes+="]";  return sRes;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300966,value0);}  }
class C{  private void inspectDuplicatedConditions(LinkedList<PsiElement> objAllConditions,If ifStatement){  LinkedList<PsiElement> objParentConditions=new LinkedList<PsiElement>();  PsiElement objParent=ifStatement.getParent();  while (null != objParent && !(objParent instanceof PhpFile)) {    if (objParent instanceof If) {      LinkedList<PsiElement> tempList=ExpressionSemanticUtil.getConditions(((If)objParent).getCondition(),null);      if (null != tempList) {        objParentConditions.addAll(tempList);        tempList.clear();      }      for (      ElseIf objParentElseIf : ((If)objParent).getElseIfBranches()) {        tempList=ExpressionSemanticUtil.getConditions(objParentElseIf.getCondition(),null);        if (null != tempList) {          objParentConditions.addAll(tempList);          tempList.clear();        }      }    }    objParent=objParent.getParent();  }  for (  PsiElement objExpression : objAllConditions) {    if (null == objExpression) {      continue;    }    int intOuterIndex=objAllConditions.indexOf(objExpression);    objAllConditions.set(intOuterIndex,null);    PsiElement variableCandidate=objExpression;    if (variableCandidate instanceof UnaryExpression) {      final PsiElement notOperatorCandidate=((UnaryExpression)variableCandidate).getOperation();      if (null != notOperatorCandidate && notOperatorCandidate.getNode().getElementType() == PhpTokenTypes.opNOT) {        PsiElement invertedValue=((UnaryExpression)variableCandidate).getValue();        invertedValue=ExpressionSemanticUtil.getExpressionTroughParenthesis(invertedValue);        if (null == invertedValue) {          continue;        }        variableCandidate=invertedValue;      }    }    if (variableCandidate instanceof Variable || variableCandidate instanceof ConstantReference || variableCandidate instanceof FieldReference) {      continue;    }    for (    PsiElement objInnerLoopExpression : objAllConditions) {      if (null == objInnerLoopExpression) {        continue;      }      boolean isDuplicate=PsiEquivalenceUtil.areElementsEquivalent(objInnerLoopExpression,objExpression);      if (isDuplicate) {        holder.registerProblem(objInnerLoopExpression,strProblemDescriptionDuplicateConditions,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);        int intInnerIndex=objAllConditions.indexOf(objInnerLoopExpression);        objAllConditions.set(intInnerIndex,null);      }    }    for (    PsiElement objOuterScopeExpression : objParentConditions) {      if (null == objOuterScopeExpression) {        continue;      }      boolean isDuplicate=PsiEquivalenceUtil.areElementsEquivalent(objOuterScopeExpression,objExpression);      if (isDuplicate) {        holder.registerProblem(objExpression,strProblemDescriptionDuplicateConditions,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);        int intOuterScopeIndex=objParentConditions.indexOf(objOuterScopeExpression);        objParentConditions.set(intOuterScopeIndex,null);      }    }  }  objParentConditions.clear();}  }
class C{  public <T>T insertComponent(Class<T> componentClass){  By componentLocator=getComponentLocator(componentClass);  int componentTypeCount=currentScope.findElements(componentLocator).size();  openInsertWindow().insertComponent(componentClass);  wait.withTimeout(Timeouts.SMALL).until(null);  return pageObjectInjector.inject(componentClass,getComponentScope(componentClass,componentTypeCount),currentFrame);}  }
class C{  public static <T>Response<T> startRequestSync(Cache<CacheEntity> cache,IParserRequest<T> request){  return NoHttp.startRequestSync(RestProtocol.getInstance(cache,OkHttpRestConnection.getInstance()),request);}  }
class C{  public static String escapeHTML(String string){  if (string == null) {    return null;  }  StringBuilder sb=new StringBuilder();  boolean lastCharacterWasSpace=false;  char[] chars=string.toCharArray();  for (  char c : chars) {    if (c == ' ') {      if (lastCharacterWasSpace) {        lastCharacterWasSpace=false;        sb.append("&nbsp;");      } else {        lastCharacterWasSpace=true;        sb.append(" ");      }    } else {      lastCharacterWasSpace=false;switch (c) {case '<':        sb.append("&lt;");      break;case '>':    sb.append("&gt;");  break;case '&':sb.append("&amp;");break;case '"':sb.append("&quot;");break;default :sb.append(c);break;}}}return sb.toString();}  }
class C{  public static String readString(){  return scanner.next();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  PrinterJob job=PrinterJob.getPrinterJob();  PageFormat pageFormat=job.pageDialog(new PageFormat());  ProgramProperties.setPageFormat(pageFormat);}  }
class C{  private void sendBroadcastNewDownload(DownloadFileOperation download,String linkedToRemotePath){  Intent added=new Intent(getDownloadAddedMessage());  added.putExtra(ACCOUNT_NAME,download.getAccount().name);  added.putExtra(EXTRA_REMOTE_PATH,download.getRemotePath());  added.putExtra(EXTRA_FILE_PATH,download.getSavePath());  added.putExtra(EXTRA_LINKED_TO_PATH,linkedToRemotePath);  sendStickyBroadcast(added);}  }
class C{  @Override public void publish(long lo,long hi){  sequencer.publish(lo,hi);}  }
class C{  public Sentence(String[] tokens,String[] tags){  this.tokens=tokens;  this.lemmas=tokens;  this.tags=tags;  position=new int[tokens.length];  for (int i=0; i < tokens.length; i++) {    position[i]=i;  }}  }
class C{  private void abortLoading(){  if (thread == null)   return;  if (thread.isAlive()) {    thread.interrupt();    try {      thread.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  @Nullable @Deprecated public File findDataFile(String name){  Path file=Paths.get(name);  if (file.isAbsolute()) {    return Files.exists(file) ? file.toFile() : null;  }  for (  String path : Splitter.on(File.pathSeparator).split(dataPath)) {    file=Paths.get(path,name);    if (Files.exists(file)) {      return file.toFile();    }  }  return null;}  }
class C{  public UsersSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  BiDiagonalTransformer(RealMatrix matrix){  final int m=matrix.getRowDimension();  final int n=matrix.getColumnDimension();  final int p=FastMath.min(m,n);  householderVectors=matrix.getData();  main=new double[p];  secondary=new double[p - 1];  cachedU=null;  cachedB=null;  cachedV=null;  if (m >= n) {    transformToUpperBiDiagonal();  } else {    transformToLowerBiDiagonal();  }}  }
class C{  public static String elapsedTimeDisplay(Date dateStart,Date dateEnd){  long diff=dateEnd.getTime() - dateStart.getTime();  long diffMinutes=diff / (60 * 1000) % 60;  long diffHours=diff / (60 * 60 * 1000);  String mins=Long.toString(diffMinutes);  if (mins.length() == 1) {    mins="0" + mins;  }  return Long.toString(diffHours) + ":" + mins;}  }
class C{  @Override public void add(int location,MODEL object){  int insertPosition=calcInsertPosition(location);  if (insertPosition == getItemCount()) {    mItems.add(object);  } else {    mItems.add(insertPosition,object);  }  notifyIfNeed();}  }
class C{  private boolean isMaintainAspectRatio(){  return preferences.getBoolean("SplashMaintainAspectRatio",false);}  }
class C{  public SessionInitializationException(String userMessage,String logMessage,Throwable cause){  super(logMessage,cause);  this.userMessage=userMessage;}  }
class C{  public void adjust(boolean horizontal,boolean vertical){  if (horizontal) {    int newXValue=(int)Math.round(xFactor * (scrollBarX.getMaximum() - scrollBarX.getMinimum()) - xPortionOfVisible * scrollBarX.getVisibleAmount());    scrollBarX.setValue(newXValue);  }  if (vertical) {    int newYValue=(int)Math.round(yFactor * (scrollBarY.getMaximum() - scrollBarY.getMinimum()) - yPortionOfVisible * scrollBarY.getVisibleAmount());    scrollBarY.setValue(newYValue);  }}  }
class C{  @Override public boolean dispatch(boolean complete) throws IOException, XNIException {  setScannerState(SCANNER_STATE_PROLOG);  setDispatcher(fPrologDispatcher);  try {    if (fEntityScanner.skipString("<?xml")) {      fMarkupDepth++;      if (XMLChar.isName(fEntityScanner.peekChar())) {        fStringBuffer.clear();        fStringBuffer.append("xml");        if (fNamespaces) {          while (XMLChar.isNCName(fEntityScanner.peekChar())) {            fStringBuffer.append((char)fEntityScanner.scanChar());          }        } else {          while (XMLChar.isName(fEntityScanner.peekChar())) {            fStringBuffer.append((char)fEntityScanner.scanChar());          }        }        String target=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);        scanPIData(target,fString);      } else {        scanXMLDeclOrTextDecl(false);      }    }    fEntityManager.fCurrentEntity.mayReadChunks=true;    return true;  } catch (  MalformedByteSequenceException e) {    fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return false;  }catch (  CharConversionException e) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return false;  }catch (  EOFException e) {    reportFatalError("PrematureEOF",null);    return false;  }}  }
class C{  private boolean canRecreateLegion(Player activePlayer,Legion legion){  if (!isBrigadeGeneral(activePlayer)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ONLY_MASTER_CAN_DISPERSE);    return false;  } else   if (!legion.isDisbanding()) {    return false;  }  return true;}  }
class C{  public int size(){  return _count;}  }
class C{  public void testWithScore3() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {text: 'the wind is howling like this swirling storm inside', id: 0, boost: 1.0}}");  send("addDocument","{fields: {text: 'I am one with the wind and sky', id: 1, boost: 2.0}}");  send("search","{queryText: wind, sort: {fields: [{field: id, reverse: true}]}, retrieveFields: [id, scoreboost, logboost]}");  assertEquals(2,getInt("totalHits"));  assertEquals(1,getInt("hits[0].fields.id"));  assertEquals(0,getInt("hits[1].fields.id"));  assertEquals(0.861380339f,getFloat("hits[0].fields.scoreboost"),.0001f);  assertEquals(0.16823316f,getFloat("hits[1].fields.scoreboost"),.0001f);  assertEquals(.6931f,getFloat("hits[0].fields.logboost"),.0001f);  assertEquals(0.0f,getFloat("hits[1].fields.logboost"),.0001f);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public static String id(long hash){  return H32.toString(hash);}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  mCameraResolution=findCloselySize(ScreenUtils.getScreenWidth(mContext),ScreenUtils.getScreenHeight(mContext),parameters.getSupportedPreviewSizes());  Log.e(TAG,"Setting preview size: " + mCameraResolution.width + "-"+ mCameraResolution.height);  mPictureResolution=findCloselySize(ScreenUtils.getScreenWidth(mContext),ScreenUtils.getScreenHeight(mContext),parameters.getSupportedPictureSizes());  Log.e(TAG,"Setting picture size: " + mPictureResolution.width + "-"+ mPictureResolution.height);}  }
class C{  private static Object[] concatenate(Object[] a,Object[] b){  int aLen=a.length;  int bLen=b.length;  Object[] newArray=new Object[aLen + bLen];  System.arraycopy(a,0,newArray,0,aLen);  System.arraycopy(b,0,newArray,aLen,bLen);  return newArray;}  }
class C{  public Builder tap(Boolean tap){  this.tap=tap;  return this;}  }
class C{  public void animateY(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  private ZonelessTimeGrain mergeTimeGrains(ZonelessTimeGrain timeGrain1,ZonelessTimeGrain timeGrain2){  if (timeGrain1 == null) {    return timeGrain2;  } else   if (timeGrain2 == null || timeGrain1.equals(timeGrain2)) {    return timeGrain1;  } else {    String message=String.format("Cannot merge mismatched time grains %s and %s",timeGrain1,timeGrain2);    LOG.error(message);    throw new IllegalArgumentException(message);  }}  }
class C{  public void show(){  DecimalFormat df=new DecimalFormat(" ##0.00;-##0.00");  double binWidth=(m_max - m_min) / m_nbins;  System.out.println(" bin range        height");  for (int i=0; i < m_nbins; i++) {    double binLowEdge=m_min + i * binWidth;    double binHighEdge=binLowEdge + binWidth;    System.out.println(df.format(binLowEdge) + " to " + df.format(binHighEdge)+ "   "+ df.format(m_hist[i]));  }}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static boolean isGoRight(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_6));}  }
class C{  public ResourcesPoet addDimension(String name,String value){  Element bool=document.createElement("dimen");  bool.setAttribute("name",name);  bool.appendChild(document.createTextNode(value));  resourceElement.appendChild(bool);  return this;}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  private static boolean hasVerticalConstraints(@NotNull ConstraintWidget widget){  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  ConstraintAnchor baseline=widget.getAnchor(ConstraintAnchor.Type.BASELINE);  return (top != null && top.isConnected()) || (bottom != null && bottom.isConnected()) || (baseline != null && baseline.isConnected());}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public synchronized void animatePanAndZoomToAbs(final Point2D p,double scale,long duration){  m_transact.panAndZoom(p,scale,duration);}  }
class C{  private void createColumns(Table table,TableLayout layout){  SelectionListener headerListener=getColumnListener();  TableColumn col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("ChangePathsTableProvider.action"));  col.addSelectionListener(headerListener);  layout.addColumnData(new ColumnWeightData(10,true));  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("ChangePathsTableProvider.path"));  col.addSelectionListener(headerListener);  layout.addColumnData(new ColumnWeightData(45,true));  table.setSortColumn(col);  col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  col.setText(Policy.bind("ChangePathsTableProvider.description"));  col.addSelectionListener(headerListener);  layout.addColumnData(new ColumnWeightData(50,true));}  }
class C{  public static boolean isCompositeDimensionalObject(String expression){  return expression != null && COMPOSITE_DIM_OBJECT_PATTERN.matcher(expression).matches();}  }
class C{  public static <K,V>Type<MapEntry<K,V>> concreteEntryType(Type<? extends Map<K,V>> mapType){  Type<?> type=TypeFactory.valueOf(MapEntry.class,mapType.getActualTypeArguments());  return (Type<MapEntry<K,V>>)type;}  }
class C{  public static double median(final double[] values){  final int len=values.length;  final double[] sortedValues=Arrays.copyOf(values,len);  Arrays.sort(sortedValues);  if (len % 2 == 0) {    return ((double)sortedValues[len / 2] + (double)sortedValues[len / 2 - 1]) / 2;  } else {    return (double)sortedValues[len / 2];  }}  }
class C{  public static void showInternalError(Object parentIgnored,String message){  showNotification(title,"Internal error: " + message,Mode.error,Pos.BOTTOM_LEFT,60000);}  }
class C{  public BuildLookupElement[] resolvePackageLookupElements(FileLookupData lookupData){  String relativePath=lookupData.filePathFragment;  File file=resolveWorkspaceRelativePath(relativePath);  FileAttributeProvider provider=FileAttributeProvider.getInstance();  String pathFragment="";  if (file == null || (!provider.isDirectory(file) && !relativePath.endsWith("/"))) {    relativePath=PathUtil.getParentPath(relativePath);    file=resolveWorkspaceRelativePath(relativePath);    pathFragment=StringUtil.trimStart(lookupData.filePathFragment.substring(relativePath.length()),"/");  }  if (file == null || !provider.isDirectory(file)) {    return BuildLookupElement.EMPTY_ARRAY;  }  VirtualFile vf=getFileSystem().findFileByPath(file.getPath());  if (vf == null || !vf.isDirectory()) {    return BuildLookupElement.EMPTY_ARRAY;  }  BuildLookupElement[] uniqueLookup=new BuildLookupElement[1];  while (true) {    VirtualFile[] children=vf.getChildren();    if (children == null || children.length == 0) {      return uniqueLookup[0] != null ? uniqueLookup : BuildLookupElement.EMPTY_ARRAY;    }    List<VirtualFile> validChildren=Lists.newArrayListWithCapacity(children.length);    for (    VirtualFile child : children) {      ProgressManager.checkCanceled();      if (child.getName().startsWith(pathFragment) && lookupData.acceptFile(child)) {        validChildren.add(child);      }    }    if (validChildren.isEmpty()) {      return uniqueLookup[0] != null ? uniqueLookup : BuildLookupElement.EMPTY_ARRAY;    }    if (validChildren.size() > 1) {      return uniqueLookup[0] != null ? uniqueLookup : lookupsForFiles(validChildren,lookupData);    }    uniqueLookup[0]=lookupForFile(validChildren.get(0),lookupData);    pathFragment="";    vf=validChildren.get(0);  }}  }
class C{  public PageObjectContext peek(){  return deque.peek();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200363,num0,skillname);}  }
class C{  public static boolean removeCount(Context context){  return applyCount(context,0);}  }
class C{  public TypeInferencer(ParserFactory template){  m_template=template;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationPolicy copy=(ReplicationPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public TimeParser(){  this(DateFormat.getTimeInstance(DateFormat.SHORT));}  }
class C{  public static void init(Configuration conf){  ROOT=conf.getString("repo.path","/opt/repo");}  }
class C{  public Container(float x,float y){  super(x,y);}  }
class C{  public static boolean isPotentiallyEncryptedBytes(byte[] bytes){  checkNotNull(bytes,"bytes");  try {    return bytes.length != 0 && bytes.length % Cipher.getInstance(CIPHER).getBlockSize() == 0;  } catch (  Throwable t) {    throw Throwables.propagate(t);  }}  }
class C{  public synchronized void closeFolder(boolean expunge){  try {    if (folder != null && folder.isOpen()) {      folder.close(expunge);    }  } catch (  MessagingException e) {    throw new EmailException(format("Error while closing mailbox folder %s",folder.getName()),e);  }}  }
class C{  @NonNull public static Observable<LoginResult> loginWithButton(@NonNull final LoginButton loginButton){  checkNotNull(loginButton,"loginButton == null");  ReactiveFB.checkInit();  return Observable.create(new LoginWithButtonOnSubscribe(loginButton));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NONE_REPEATABLE(String value0){  return new SM_SYSTEM_MESSAGE(1300599,value0);}  }
class C{  void generateLocalizedFilesWithLocaleMaping(Repository repository,FileMatch sourceFileMatch) throws CommandException {  logger.debug("Generate localzied files with locale mapping");  for (  Map.Entry<String,String> localeMapping : localeMappings.entrySet()) {    String outputBcp47tag=localeMapping.getKey();    RepositoryLocale repositoryLocale=getRepositoryLocaleForOutputBcp47Tag(outputBcp47tag);    LocalizedAssetBody localizedAsset=getLocalizedAsset(repository,sourceFileMatch,repositoryLocale,outputBcp47tag);    writeLocalizedAssetToTargetDirectory(localizedAsset,sourceFileMatch);  }}  }
class C{  private void appendText(CommentTokenizer tokenizer,StringBuilder builder){  while (tokenizer.hasNext() && tokenizer.peekNext().kind == TokenKind.TEXT) {    String text=tokenizer.pollNext().text;    if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n' && !text.equals(NEW_LINE)) {      builder.append(' ');    }    builder.append(text);  }}  }
class C{  public void readData(InputStream ins) throws IOException {  Set<String> attributesOfInterest=new HashSet<>();  attributesOfInterest.addAll(Arrays.asList(knownAttributes));  Map<String,Integer> attribute2column=new HashMap<>();  Map<Integer,String> column2attribute=new HashMap<>();  BufferedReader r=new BufferedReader(new InputStreamReader(ins));  String aLine;  int numberOfTokens=0;  while ((aLine=r.readLine()) != null) {    if (aLine.length() > 0) {      if (aLine.startsWith("## Columns:")) {        String[] tokens=aLine.split("\t");        for (int i=1; i < tokens.length; i++) {          String label=tokens[i];          if (label.startsWith("\""))           label=label.substring(1,tokens[i].length() - 1);          attribute2column.put(label,i - 1);          if (attributesOfInterest.contains(label)) {            column2attribute.put(i - 1,label);            attributes.add(label);          }        }        numberOfTokens=tokens.length - 1;      } else       if (!aLine.startsWith("#")) {        String[] tokens=aLine.split("\t");        if (tokens.length < numberOfTokens)         System.err.println("Too few tokens in line: " + aLine); else         if (tokens.length > numberOfTokens)         System.err.println("Too many tokens in line: " + aLine); else {          Integer taxonId=Integer.parseInt(tokens[attribute2column.get("Taxonomy ID")]);          for (int i=0; i < tokens.length; i++) {            if (attributesOfInterest.contains(column2attribute.get(i))) {              String state=Basic.capitalizeWords(tokens[i].trim());              if (state.length() == 0 || (state.equals("-") && i != attribute2column.get("Gram Stain")))               state="Unknown";              if ((state.equals("_") && i == attribute2column.get("Gram Stain")))               state="-";              if (state.equalsIgnoreCase("n"))               state="No";              Set<String> states=attribute2states.get(column2attribute.get(i));              if (states == null) {                states=new HashSet<>();                attribute2states.put(column2attribute.get(i),states);              }              states.add(state);              String key=column2attribute.get(i) + ":" + state;              Set<Integer> taxa=attributeAndState2taxa.get(key);              if (taxa == null) {                taxa=new HashSet<>();                attributeAndState2taxa.put(key,taxa);              }              Set<String> attributeAndStates=tax2attributeAndState.get(taxonId);              if (attributeAndStates == null) {                attributeAndStates=new HashSet<>();                tax2attributeAndState.put(taxonId,attributeAndStates);              }              attributeAndStates.add(key);              taxa.add(taxonId);            }          }        }      }    }  }  cleanStates();}  }
class C{  private String generateChartHtml(Chart chart,User user) throws IOException {  JFreeChart jFreechart=chartService.getJFreeChart(chart,new Date(),null,i18nManager.getI18nFormat(),user);  return uploadImage(chart.getUid(),ChartUtils.getChartAsPngByteArray(jFreechart,578,440));}  }
class C{  public ZoomPanOptions build(){  ZoomPanOptions options=new ZoomPanOptions();  options.animate=this.animate;  options.pan=this.pan;  options.zoom=this.zoom;  options.reset=this.reset;  return options;}  }
class C{  public int numNodes(){  return numNodes;}  }
class C{  public boolean isCaseSensitive(){  return caseSensitive;}  }
class C{  private static BufferedImage toBufferedImage(Image img){  if (img instanceof BufferedImage) {    return (BufferedImage)img;  }  int width=img.getWidth(null);  int height=img.getHeight(null);  BufferedImage bimage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D bGr=bimage.createGraphics();  bGr.drawImage(img,0,0,null);  bGr.dispose();  return bimage;}  }
class C{  private String determineLastKnownUrl(){  int tabId=determineTabId();  String url=mTabModel.getCurrentUrlForDocument(tabId);  if (TextUtils.isEmpty(url))   url=determineInitialUrl(tabId);  return url;}  }
class C{  @Override public void populateField(String value){  if (textField != null) {    textField.setText(value);    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  public VideoSaveQuery save(UserActor actor){  return new VideoSaveQuery(getClient(),actor);}  }
class C{  public CompletableFuture<Void> clearBacklog(){  log.info("[{}] Clearing backlog on all cursors in the topic.",topic);  List<CompletableFuture<Void>> futures=Lists.newArrayList();  List<String> cursors=getSubscriptions().keys();  cursors.addAll(getReplicators().keys());  for (  String cursor : cursors) {    futures.add(clearBacklog(cursor));  }  return FutureUtil.waitForAll(futures);}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(Scanner.color.RESULT_POINTS);    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  @Override public void innerDelete(){  Collection<? extends Concept> subSet=subTypes();  Collection<? extends Concept> instanceSet=instances();  subSet.remove(this);  if (subSet.isEmpty() && instanceSet.isEmpty()) {    deleteNode();  } else {    throw new ConceptException(ErrorMessage.CANNOT_DELETE.getMessage(toString()));  }}  }
class C{  @Override public void toggleSelection(T photo){  if (selectedPhotos.contains(photo)) {    selectedPhotos.remove(photo);  } else {    selectedPhotos.add(photo);  }}  }
class C{  @JsonValue public String toJson(){  return jsonName;}  }
class C{  private static void addColumnDimensions(Expression expression,Set<CarbonDimension> filterDimensions){  if (null != expression && expression instanceof ColumnExpression && ((ColumnExpression)expression).isDimension()) {    filterDimensions.add(((ColumnExpression)expression).getDimension());    return;  }  for (  Expression child : expression.getChildren()) {    addColumnDimensions(child,filterDimensions);  }}  }
class C{  public void renameLocals(){  update();  newLocals=new HashMap<String,Local>();  newLocalsToOldLocal=new HashMap<Local,Local>();  assignmentCounters=new int[origLocals.size()];  namingStacks=new Stack[origLocals.size()];  for (int i=0; i < namingStacks.length; i++)   namingStacks[i]=new Stack<Integer>();  List<Block> heads=cfg.getHeads();  if (heads.isEmpty())   return;  if (heads.size() != 1)   throw new RuntimeException("Assertion failed:  Only one head expected.");  Block entry=heads.get(0);  renameLocalsSearch(entry);}  }
class C{  private void drawText(Canvas canvas,int index,Paint paint,String text){  if (isIllegalIndex(index)) {    return;  }  int x=getXByIndex(index);  int y=getYByIndex(index);  float top=cellHeight + (y - 1) * cellHeight;  float bottom=top + cellHeight;  float baseline=RenderUtil.getBaseline(top,bottom,paint);  float startX=RenderUtil.getStartX(cellWidth * (x - 1) + cellWidth * 0.5f,paint,text);  canvas.drawText(text,startX,baseline,paint);}  }
