class C{  public void onPackageAppeared(String packageName,int reason){}  }
class C{  public T caseN4SetterDeclaration(N4SetterDeclaration object){  return null;}  }
class C{  private static final Set<File> encode(String src){  if (src == null || src.length() == 0)   return new HashSet<File>();  StringTokenizer tokenizer=new StringTokenizer(src,";");  int size=tokenizer.countTokens();  Set<File> set=new HashSet<File>();  for (int i=0; i < size; i++)   set.add(new File(tokenizer.nextToken()));  return set;}  }
class C{  public InverseGammaDistributionModel(Variable<Double> shape){  super(INVERSE_GAMMA_DISTRIBUTION_MODEL);  this.shape=shape;  addVariable(shape);  shape.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));}  }
class C{  public static void writeln(){  writelnWithFlush(true);}  }
class C{  public CompetitiveTrainer(CompetitiveNetwork network){  super(network);  this.network=network;  this.setIteration(0);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DataStatusEvent - ");  if (m_AD_Message != null)   sb.append(m_AD_Message);  if (m_info != null)   sb.append(" ").append(m_info);  sb.append(" : ").append(getMessage());  return sb.toString();}  }
class C{  public boolean isPrivKeyUsePassphrase(){  return privKeyUsePassphrase;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    updateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void add(IMultiPoint pt){  if (inProgress) {    throw new ConcurrentModificationException("Can't add point while iterator in progress");  }  points.add(pt);}  }
class C{  private void createCallgraph(){  final DirectedGraph<ICallgraphNode,ICallgraphEdge> graph=m_module.getContent().getNativeCallgraph();  final List<FunctionBlock> blocks=new ArrayList<FunctionBlock>();  final List<FunctionEdge> edges=new ArrayList<FunctionEdge>();  final HashMap<ICallgraphNode,FunctionBlock> blockMap=new HashMap<ICallgraphNode,FunctionBlock>();  final HashMap<INaviFunction,Function> functionMap=new HashMap<INaviFunction,Function>();  for (  final Function function : m_functions) {    functionMap.put(function.getNative(),function);  }  for (  final ICallgraphNode block : graph.getNodes()) {    final FunctionBlock newBlock=new FunctionBlock(functionMap.get(block.getFunction()));    blockMap.put(block,newBlock);    blocks.add(newBlock);  }  for (  final ICallgraphEdge edge : graph.getEdges()) {    final FunctionBlock source=blockMap.get(edge.getSource());    final FunctionBlock target=blockMap.get(edge.getTarget());    edges.add(new FunctionEdge(source,target));  }  m_callgraph=new Callgraph(blocks,edges);}  }
class C{  protected CategoricalTable(String variable,Map<Value,Double> headTable){  this.variable=variable;  this.table=headTable;}  }
class C{  public synchronized boolean isEmpty(){  return list.isEmpty();}  }
class C{  public void resolveFields(){  LinkedHashMap<String,AnnotatedField> foundFields=new LinkedHashMap<String,AnnotatedField>();  _addFields(foundFields,_class);  if (foundFields.isEmpty()) {    _fields=Collections.emptyList();  } else {    _fields=new ArrayList<AnnotatedField>(foundFields.size());    _fields.addAll(foundFields.values());  }}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] data=new double[numFeatures];  double[] labels=new double[numClasses];  int numChanges=0;  if (!instance.classIsMissing()) {    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      data[j + num_features]=1 - data[j];    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      labels[j + num_classes]=1 - labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      matchA=ART_Calculate_Match(data,weightsA[currentCategory]);      if (sumArray(weightsB[currentCategory]) == 0) {        matchB=1;      } else {        matchB=ART_Calculate_Match(labels,weightsB[currentCategory]);      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories - 1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            for (int j=0; j < data.length; j++) {              weightsA[currentCategory][j]=data[j];              sweightsA[currentCategory]+=data[j];            }            for (int j=0; j < weightsB[currentCategory].length; j++) {              weightsB[currentCategory][j]=labels[j];            }            String s=Arrays.toString(labels);            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector v=new Vector();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      for (int j=0; j < data.length; j++) {        weightsA[numCategories - 1][j]=data[j];      }      for (int j=0; j < weightsB[numCategories - 1].length; j++) {        weightsB[numCategories - 1][j]=labels[j];      }      String s=Arrays.toString(labels);      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories - 1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector v=new Vector();        v.add(numCategories - 1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  public DateStart(ICalDate startDate){  super(startDate);}  }
class C{  private void populateDbOptions(String dbProduct,Element dbOptionsElement,Map<String,String> dbOptionsMap){  NodeList dbOptions=dbOptionsElement.getElementsByTagName("dbOption");  for (int i=0; i < dbOptions.getLength(); i++) {    Element dbOption=(Element)dbOptions.item(i);    if (!dbProduct.equalsIgnoreCase(dbOption.getAttribute("db"))) {      continue;    }    dbOptionsMap.put(dbOption.getAttribute("name"),dbOption.getAttribute("value"));  }}  }
class C{  public void visitUnaryProduction(Nonterminal a,UnaryProduction p){  Nonterminal arg=p.getNonterminal();  if (isRecursive(arg)) {    throw new RuntimeException("Unary production is recursive!");  }  RE re1=getRE(p.getNonterminal());  RE cur=RE.mkUnOp(p.getOperation(),re1);  try {    addTerm(cur);  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getSource() == m_defaultButton) {    m_matrix.initialize();    matrixChanged();  } else   if (e.getSource() == m_openButton) {    openMatrix();  } else   if (e.getSource() == m_saveButton) {    saveMatrix();  } else   if ((e.getSource() == m_classesField) || (e.getSource() == m_resizeButton)) {    try {      int newNumClasses=Integer.parseInt(m_classesField.getText());      if (newNumClasses > 0 && newNumClasses != m_matrix.size()) {        setValue(new CostMatrix(newNumClasses));      }    } catch (    Exception ex) {    }  }}  }
class C{  public void addAll(double[] vals,double[] wghts){  values.add(vals);  weights.add(wghts);}  }
class C{  @Override public int glQueryMatrixxOES(IntBuffer mantissa,IntBuffer exponent){  return mGL10Ext.glQueryMatrixxOES(mantissa,exponent);}  }
class C{  public String port(){  return this.port;}  }
class C{  javax.cache.Cache<Integer,Integer> createJsr107CacheWithBuilder(String cacheName){  CachingProvider cachingProvider=Caching.getCachingProvider();  cacheManager=cachingProvider.getCacheManager();  TCacheFactory cacheFactory=cacheManager.unwrap(TCacheFactory.class);  Builder<Integer,Integer> builder=cacheFactory.builder();  builder.setEvictionClass(new EvictByNumber());  javax.cache.Cache<Integer,Integer> cache=cacheManager.createCache(cacheName,builder);  cacheManager.enableManagement(cacheName,true);  return cache;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 182) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public Vector3d fma(Vector3fc a,Vector3fc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  z+=a.z() * b.z();  return this;}  }
class C{  public boolean isIgnoreComments(){  return ignoreComments;}  }
class C{  protected ServiceActivatorImpl(){  super();}  }
class C{  public static TrieStructure createForDictReverse(Dictionary aDict){  TrieStructure t=new TrieStructure();  for (  String word : aDict.getAll()) {    t.addWord(new StringBuffer(word).reverse().toString());  }  return t;}  }
class C{  public void testBug4311() throws Exception {  try {    int lowValue=-8388608;    int highValue=8388607;    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4311");    this.stmt.executeUpdate("CREATE TABLE testBug4311 (low MEDIUMINT, high MEDIUMINT)");    this.stmt.executeUpdate("INSERT INTO testBug4311 VALUES (" + lowValue + ", "+ highValue+ ")");    PreparedStatement pStmt=this.conn.prepareStatement("SELECT low, high FROM testBug4311");    this.rs=pStmt.executeQuery();    assertTrue(this.rs.next());    assertTrue(this.rs.getInt(1) == lowValue);    assertTrue(this.rs.getInt(2) == highValue);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4311");  }}  }
class C{  @Override public void clearLightControls(){  deactivateLight();  for (int i=lightControlList.size() - 1; i >= 0; i--) {    lightControlList.remove(i);  }}  }
class C{  public PolygonRenderer(int polyType){  m_polyType=polyType;}  }
class C{  public final static byte[] decode(char[] sArr){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i]] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i]] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++]];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.230 -0500",hash_original_method="623A6326FEE6BEAC4C71D9EAB23D5BE9",hash_generated_method="5D6C62E5010CBE21FE3E33B342C82583") public final int readInt() throws IOException {  readFully(scratch,0,SizeOf.INT);  return Memory.peekInt(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public Path conf(){  return root.resolve("conf");}  }
class C{  public void sendNotification(Notification notification){  if (notification.getSequenceNumber() < 1) {synchronized (this) {      notification.setSequenceNumber(this.sequenceNumber++);    }  }  broadcaster.sendNotification(notification);}  }
class C{  public void iterate(){  State state=getState();switch (state) {case initialState:    System.err.println("State " + state + " is not implemented.");  System.exit(5);break;case inHiveWithoutInfo:doStateInHiveWithoutInfo();break;case inHiveWithInfo:doStateInHiveWithInfo();break;case leaveHive:doStateLeaveHive();break;case danceFollowing:System.err.println("State " + state + " is not implemented.");System.exit(5);break;case dancing:doStateDancing();break;case foraging:doStateForaging();break;case searching:doStateSearching();break;case returnWithInfo:System.err.println("State " + state + " is not implemented.");System.exit(5);break;case returnWithInfoAndLoad:doStateReturnWithInfoAndLoad();break;case unloadQueue:doStateUnloadQueue();break;case scouting:doStateScouting();break;case returnWithoutInfo:doStateReturnWithoutInfo();break;case dead:doStateDead();break;case terminated:doStateTerminated();break;default :System.err.println("iterate(): State " + state + " is not implemented.");System.exit(5);break;}}  }
class C{  public MutableBoolean(final Boolean value){  super();  this.value=value.booleanValue();}  }
class C{  public LongIteratorSpliterator(java8.util.PrimitiveIterator.OfLong iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public void writeText(char text[],int off,int len) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  if (off < 0 || off > text.length || len < 0 || len > text.length) {    throw new IndexOutOfBoundsException();  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text,off,len);  } else {    HtmlUtils.writeText(writer,true,true,buffer,text,off,len);  }}  }
class C{  public static Coordinate jitter(VertexStore.Vertex v){  double lat=v.getLat();  lat+=(v.index % 7 - 3.5) * 1e-5;  double lon=v.getLon();  lon+=(v.index % 11 - 5.5) * 1e-5;  return new Coordinate(lon,lat);}  }
class C{  private boolean decodeNoValue(int startIndex){  if (mWspData[startIndex] == 0) {    mDataLength=1;    return true;  } else {    return false;  }}  }
class C{  public static boolean isTimeout(Exception e){  if (DB.isPostgreSQL())   return isSQLState(e,"57014");  return isErrorCode(e,1013);}  }
class C{  public Item peek(){  return isEmpty() ? null : stack.get(stack.size() - 1);}  }
class C{  @Override public void removeAcceptedOffer(Offer offer){  this.acceptedOffers.remove(offer);  textAdapter.removeCardOffer(offer);}  }
class C{  public double[] asRadiansArray(){  return new double[]{this.getMinLatitude().radians,this.getMaxLatitude().radians,this.getMinLongitude().radians,this.getMaxLongitude().radians};}  }
class C{  public static BlobEntry selectBlobEntryForStoring(){  String selectEntry=RepositoryLocationChooser.selectEntry(null,null,true);  return createBlobEntry(selectEntry);}  }
class C{  final Name internalGetSuperclass(){  supportedOnlyIn2();  return this.optionalSuperclassName;}  }
class C{  public void runTest() throws Throwable {  Document doc;  int nodeType;  doc=(Document)load("hc_staff",false);  nodeType=(int)doc.getNodeType();  assertEquals("nodeDocumentNodeTypeAssert1",9,nodeType);}  }
class C{  public boolean hasStatement(Statement st,Resource... contexts) throws RepositoryException {  if (isAllContext(contexts) && st.getContext() == null) {    return super.hasStatement(st,isIncludeInferred(),getReadContexts());  } else {    return super.hasStatement(st,isIncludeInferred(),contexts);  }}  }
class C{  public static void main(final String[] args){  final StackedBarChartExample demo=new StackedBarChartExample("Stacked Bar Chart Demo 4");  demo.pack();  RefineryUtilities.centerFrameOnScreen(demo);  demo.setVisible(true);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TASK_ID;case 2:  return TASK_NAME;case 3:return CLASS_NAME;case 4:return METHOD;case 5:return MODULE_CODE;case 6:return PRIORITY;case 7:return IS_CONCURRENT;case 8:return TASK_STATE;case 9:return LAST_EXECUTE_TIME;case 10:return NEXT_EXCUTE_DATE;case 11:return OPERATOR_ID;case 12:return CREATE_TIME;default :return null;}}  }
class C{  public static int capacity(int expSize){  if (expSize < 3)   return expSize + 1;  if (expSize < (1 << 30))   return expSize + expSize / 3;  return Integer.MAX_VALUE;}  }
class C{  private Set<EgDemandDetails> createAllDmdDetails(final List<Installment> instList,final HashMap<Installment,TaxCalculationInfo> instTaxMap){  LOGGER.debug("Entered into createAllDmdDeatails");  final Set<EgDemandDetails> dmdDetSet=new HashSet<EgDemandDetails>();  for (  final Installment inst : instList) {    final TaxCalculationInfo taxCalcInfo=instTaxMap.get(inst);    final Map<String,BigDecimal> taxMap=taxCalculator.getMiscTaxesForProp(taxCalcInfo.getUnitTaxCalculationInfos());    for (    final Map.Entry<String,BigDecimal> tax : taxMap.entrySet()) {      final EgDemandReason egDmdRsn=propertyTaxUtil.getDemandReasonByCodeAndInstallment(tax.getKey(),inst);      dmdDetSet.add(createDemandDetails(tax.getValue(),egDmdRsn,inst));    }  }  LOGGER.debug("createAllDmdDeatails: dmdDetSet: " + dmdDetSet);  return dmdDetSet;}  }
class C{  public boolean isSetGetResponse(){  return this.getResponse != null;}  }
class C{  public MethodNotFoundException(String message){  super(message);}  }
class C{  private void beginMyTurn(){  target=null;  if (!clientgui.bv.isMovingUnits()) {    clientgui.setDisplayVisible(true);  }  clientgui.bv.clearFieldofF();  selectEntity(clientgui.getClient().getFirstEntityNum());  GameTurn turn=clientgui.getClient().getMyTurn();  if ((turn instanceof GameTurn.TriggerAPPodTurn) && (null != ce())) {    disableButtons();    TriggerAPPodDialog dialog=new TriggerAPPodDialog(clientgui.getFrame(),ce());    dialog.setVisible(true);    attacks.removeAllElements();    Enumeration<TriggerAPPodAction> actions=dialog.getActions();    while (actions.hasMoreElements()) {      attacks.addElement(actions.nextElement());    }    ready();  } else   if ((turn instanceof GameTurn.TriggerBPodTurn) && (null != ce())) {    disableButtons();    TriggerBPodDialog dialog=new TriggerBPodDialog(clientgui,ce(),((GameTurn.TriggerBPodTurn)turn).getAttackType());    dialog.setVisible(true);    attacks.removeAllElements();    Enumeration<TriggerBPodAction> actions=dialog.getActions();    while (actions.hasMoreElements()) {      attacks.addElement(actions.nextElement());    }    ready();  } else {    setNextEnabled(true);    butDone.setEnabled(true);    clientgui.getBoardView().select(null);  }  setupButtonPanel();}  }
class C{  private static Integer decryptInteger(String encrypted,ServletContext context) throws ServletException {  String encryptedParts[]=encrypted.split("\\|");  if (encryptedParts.length != 3) {    throw new ServletException("Invalid encrypted string.");  }  String password=context.getInitParameter("SampleSetIDEncryptionPassword");  Decoder decoder=Base64.getDecoder();  byte ciphertext[]=decoder.decode(encryptedParts[0]);  byte iv[]=decoder.decode(encryptedParts[1]);  byte salt[]=decoder.decode(encryptedParts[2]);  byte plainbytes[];  try {    SecretKeyFactory factory=SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");    KeySpec spec=new PBEKeySpec(password.toCharArray(),salt,65536,256);    SecretKey tmp=factory.generateSecret(spec);    SecretKey secret=new SecretKeySpec(tmp.getEncoded(),"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    cipher.init(Cipher.DECRYPT_MODE,secret,new IvParameterSpec(iv));    plainbytes=cipher.doFinal(ciphertext);  } catch (  Exception ex) {    throw new ServletException(ex);  }  return ByteBuffer.wrap(plainbytes).asIntBuffer().get();}  }
class C{  public ImportTask(T importItem){  super();  if (importItem == null) {    throw new java.lang.ExceptionInInitializerError("Null ImportItem.");  }  this.importItem=importItem;  notifyCreated();}  }
class C{  private void addExternalLinks(Element entry,Book book){  if (currentProfile.getGenerateExternalLinks()) {    if (logger.isTraceEnabled())     logger.trace("addExternalLinks: ADDING external links to book " + book);    String url;    if (logger.isTraceEnabled())     logger.trace("addExternalLinks: add the GoodReads book link");    if (Helper.isNotNullOrEmpty(book.getIsbn())) {      url=currentProfile.getGoodreadIsbnUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,book.getIsbn()),Localization.Main.getText("bookentry.goodreads")));      url=currentProfile.getGoodreadReviewIsbnUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,book.getIsbn()),Localization.Main.getText("bookentry.goodreads.review")));    } else {      url=currentProfile.getGoodreadTitleUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(book.getTitle())),Localization.Main.getText("bookentry.goodreads")));    }    if (logger.isTraceEnabled())     logger.trace("addExternalLinks: add the Wikipedia book link");    url=currentProfile.getWikipediaUrl();    if (Helper.isNotNullOrEmpty(url)) {      entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,currentProfile.getWikipediaLanguage(),FeedHelper.urlEncode(book.getTitle())),Localization.Main.getText("bookentry.wikipedia")));    }    if (logger.isTraceEnabled())     logger.trace("addExternalLinks: Add Librarything book link");    if (Helper.isNotNullOrEmpty(book.getIsbn())) {      url=currentProfile.getLibrarythingIsbnUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,book.getIsbn()),Localization.Main.getText("bookentry.librarything")));    } else     if (Helper.isNotNullOrEmpty(book.getTitle())) {      url=currentProfile.getLibrarythingTitleUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(book.getTitle()),FeedHelper.urlEncode(book.getMainAuthor().getName())),Localization.Main.getText("bookentry.librarything")));    }    if (logger.isTraceEnabled())     logger.trace("addExternalLinks: Add Amazon book link");    if (Helper.isNotNullOrEmpty(book.getIsbn())) {      url=currentProfile.getAmazonIsbnUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,book.getIsbn()),Localization.Main.getText("bookentry.amazon")));    } else     if (book.getMainAuthor() != null && Helper.isNotNullOrEmpty(book.getTitle())) {      url=currentProfile.getAmazonTitleUrl();      if (Helper.isNotNullOrEmpty(url))       entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(book.getTitle()),FeedHelper.urlEncode(book.getMainAuthor().getName())),Localization.Main.getText("bookentry.amazon")));    }    if (currentProfile.getIncludeAuthorInBookDetails() && book.hasAuthor()) {      if (logger.isTraceEnabled())       logger.trace("addExternalLinksy: add the GoodReads author link");      for (      Author author : book.getAuthors()) {        url=currentProfile.getGoodreadAuthorUrl();        if (Helper.isNotNullOrEmpty(url))         entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(author.getName())),Localization.Main.getText("bookentry.goodreads.author",author.getName())));      }      if (logger.isTraceEnabled())       logger.trace("addExternalLinks: add the Wikipedia author link");      for (      Author author : book.getAuthors()) {        url=currentProfile.getWikipediaUrl();        if (Helper.isNotNullOrEmpty(url))         entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(currentProfile.getWikipediaUrl(),currentProfile.getWikipediaLanguage(),FeedHelper.urlEncode(author.getName())),Localization.Main.getText("bookentry.wikipedia.author",author.getName())));      }      if (logger.isTraceEnabled())       logger.trace("addExternalLinks: add the LibraryThing author link");      for (      Author author : book.getAuthors()) {        url=currentProfile.getLibrarythingAuthorUrl();        if (Helper.isNotNullOrEmpty(url))         entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(currentProfile.getLibrarythingAuthorUrl(),FeedHelper.urlEncode(author.getSort().replace(",","").replace(" ",""))),Localization.Main.getText("bookentry.librarything.author",author.getName())));      }      if (logger.isTraceEnabled())       logger.trace("addExternalLinks: add the Amazon author link");      for (      Author author : book.getAuthors()) {        url=currentProfile.getAmazonAuthorUrl();        if (Helper.isNotNullOrEmpty(url))         entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(author.getName())),Localization.Main.getText("bookentry.amazon.author",author.getName())));      }      if (logger.isTraceEnabled())       logger.trace("addExternalLinks: add the ISFDB author link");      for (      Author author : book.getAuthors()) {        url=currentProfile.getIsfdbAuthorUrl();        if (Helper.isNotNullOrEmpty(url))         entry.addContent(FeedHelper.getRelatedHtmlLink(MessageFormat.format(url,FeedHelper.urlEncode(author.getName())),Localization.Main.getText("bookentry.isfdb.author",author.getName())));      }    }  }}  }
class C{  public AboveRegionParser(Element element) throws RegionException {  String xAxisValue=element.getAttributeValue("x");  if (xAxisValue != null && !Numbers.isDecimal(xAxisValue)) {    throw new InvalidRegionAttributeException("x",element);  }  String yAxisValue=element.getAttributeValue("y");  if (yAxisValue != null && !Numbers.isDecimal(yAxisValue)) {    throw new InvalidRegionAttributeException("y",element);  }  String zAxisValue=element.getAttributeValue("z");  if (zAxisValue != null && !Numbers.isDecimal(zAxisValue)) {    throw new InvalidRegionAttributeException("z",element);  }  min=new Vector(Numbers.parseDouble(xAxisValue,Double.NEGATIVE_INFINITY),Numbers.parseDouble(yAxisValue,Double.NEGATIVE_INFINITY),Numbers.parseDouble(zAxisValue,Double.NEGATIVE_INFINITY));}  }
class C{  public ToStringBuilder append(final String fieldName,final long value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public CConnectionDialog(){  this(null);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public List<List<Position>> buildContourLines(double value,Sector sector,double altitude){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.assembleContourCells(value);  this.traverseContourCells();  double maxLat=sector.getMaxLatitude().degrees;  double minLon=sector.getMinLongitude().degrees;  double deltaLat=sector.getDeltaLatDegrees();  double deltaLon=sector.getDeltaLonDegrees();  List<List<Position>> result=new ArrayList<List<Position>>();  for (  List<double[]> coordList : this.contourList) {    ArrayList<Position> positionList=new ArrayList<Position>();    for (    double[] coord : coordList) {      double s=coord[0] / (this.width - 1);      double t=coord[1] / (this.height - 1);      double lat=maxLat - t * deltaLat;      double lon=minLon + s * deltaLon;      positionList.add(Position.fromDegrees(lat,lon,altitude));    }    result.add(positionList);  }  this.clearContourCells();  return result;}  }
class C{  public boolean is_applicable(String package_name){  for (  UpdateSourceEntry pe : _entries) {    Matcher m=Pattern.compile(pe.get_applicable_packages()).matcher(package_name);    if (m.find()) {      return true;    }  }  return false;}  }
class C{  public static AbsListViewAttacher with(final AbsListView absListView,final MugenCallbacks callbacks){  return new AbsListViewAttacher(absListView,callbacks);}  }
class C{  public Task<HostRestRep> deactivate(URI id,boolean detachStorage,boolean deactivateBootVolume){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("detach_storage",detachStorage).queryParam("deactivate_boot_volume",deactivateBootVolume).build(id);  return postTaskURI(deactivateUri);}  }
class C{  public synchronized Object removeCachedStylesheet(Object key){  return _cache.remove(key);}  }
class C{  @Override public void emitErrorMessage(String msg){}  }
class C{  AdminResponse sendAndWait(RegionAdminRequest msg) throws CacheException {  msg.setRegionName(getFullPath());  try {    return vm.sendAndWait(msg);  } catch (  RuntimeAdminException ex) {    Throwable cause=ex.getRootCause();    if (cause instanceof CacheException) {      throw (CacheException)cause;    } else     if (cause instanceof CacheRuntimeException) {      throw (CacheRuntimeException)cause;    } else {      throw ex;    }  }}  }
class C{  protected void createDefaultExceptionRequest(){}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  public boolean isPostActual(){  Object oo=get_Value(COLUMNNAME_PostActual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void putBundle(String key,Bundle value){  unparcel();  mMap.put(key,value);}  }
class C{  private void writePacketOutForPacketIn(IOFSwitch sw,OFPacketIn packetInMessage,OFPort egressPort){  OFMessageUtils.writePacketOutForPacketIn(sw,packetInMessage,egressPort);  counterPacketOut.increment();}  }
class C{  public static <T extends Event>T testWriteReadXml(final String eventsFile,final T event){  EventWriterXML writer=new EventWriterXML(eventsFile);  writer.handleEvent(event);  writer.closeFile();  assertTrue(new File(eventsFile).exists());  EventsManager events=EventsUtils.createEventsManager();  EventsCollector collector=new EventsCollector();  events.addHandler(collector);  new MatsimEventsReader(events).readFile(eventsFile);  assertEquals("there must be 1 event.",1,collector.getEvents().size());  Event readEvent=collector.getEvents().iterator().next();  assertEquals("event has wrong class.",event.getClass(),readEvent.getClass());  Map<String,String> writtenAttributes=event.getAttributes();  Map<String,String> readAttributes=readEvent.getAttributes();  for (  Map.Entry<String,String> attribute : writtenAttributes.entrySet()) {    assertEquals("attribute '" + attribute.getKey() + "' is different after reading the event.",attribute.getValue(),readAttributes.get(attribute.getKey()));  }  return (T)readEvent;}  }
class C{  public void removeNotify(){  if (parserManager != null) {    parserManager.stopParsing();  }  super.removeNotify();}  }
class C{  public K key(){  return key;}  }
class C{  public double slope(){  return beta;}  }
class C{  public MosaicTransferNotification(final Account sender,final Account recipient,final MosaicId mosaicId,final Quantity quantity){  super(NotificationType.MosaicTransfer);  this.sender=sender;  this.recipient=recipient;  this.mosaicId=mosaicId;  this.quantity=quantity;}  }
class C{  public void scrollComponentToVisible(Component c){  if (isScrollable()) {    if (c != null) {      Rectangle r=c.getVisibleBounds();      if (c.getParent() != null) {        Form f=getComponentForm();        if (f != null && f.getInvisibleAreaUnderVKB() == 0 && f.findFirstFocusable() == c) {          if (r == c.getBounds() && !Display.getInstance().isTouchScreenDevice()) {            scrollRectToVisible(new Rectangle(0,0,c.getX() + Math.min(c.getWidth(),getWidth()),c.getY() + Math.min(c.getHeight(),getHeight())),this);            return;          }        }      }      boolean moveToVisible=true;      boolean large=c.getVisibleBounds().getSize().getHeight() > getHeight() || c.getVisibleBounds().getSize().getWidth() > getWidth();      if (large) {        int x=getScrollX();        int y=getScrollY();        int w=getWidth();        int h=getHeight();        boolean visible=contains(c) && Rectangle.intersects(c.getAbsoluteX(),c.getAbsoluteY(),c.getWidth(),c.getHeight(),getAbsoluteX() + x,getAbsoluteY() + y,w,h);        moveToVisible=!visible;      }      if (moveToVisible) {        scrollRectToVisible(r.getX(),r.getY(),Math.min(r.getSize().getWidth(),getWidth()),Math.min(r.getSize().getHeight(),getHeight()),c);      }    }  }}  }
class C{  public void close(){  if (container != null) {    for (    SolrCore c : container.getCores()) {      if (c.getOpenCount() > 1)       throw new RuntimeException("SolrCore.getOpenCount()==" + c.getOpenCount());    }  }  if (container != null) {    container.shutdown();    container=null;  }}  }
class C{  public static int updateLyricEncoding(ContentResolver resolver,String path,String encoding){  Lyric lyric=LyricUtils.parseLyric(new File(path),encoding);  ContentValues values=new ContentValues();  values.put(Constants.Column.TITLE,lyric.title);  values.put(Constants.Column.ARTIST,lyric.artist);  values.put(Constants.Column.ALBUM,lyric.album);  values.put(Constants.Column.LENGTH,lyric.length);  values.put(Constants.Column.ENCODING,encoding);  values.put(Constants.Column.ENCODING_CHANGED,1);  return resolver.update(Constants.CONTENT_URI,values,Constants.Column.PATH + "= ?",new String[]{path});}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public Object removeMultiKey(Object key1,Object key2){  int hashCode=hash(key1,key2);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  AbstractHashedMap.HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2)) {      Object oldValue=entry.getValue();      map.removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  @Check public void checkMemberRedefinitions(N4ClassifierDefinition n4ClassifierDefinition){  if (!(n4ClassifierDefinition.getDefinedType() instanceof TClassifier)) {    return;  }  TClassifier tClassifier=(TClassifier)n4ClassifierDefinition.getDefinedType();  getContext().put(TClassifier.class,tClassifier);  RuleEnvironment g=RuleEnvironmentExtensions.newRuleEnvironment(tClassifier);  getContext().put(RuleEnvironment.class,g);  ParameterizedTypeRef classTypeRef=TypeUtils.createTypeRef(tClassifier);  getContext().put(TYPE_VAR_CONTEXT,classTypeRef);  MemberCube memberCube=createMemberValidationList();  final boolean isClass=tClassifier instanceof TClass;  final Map<ParameterizedTypeRef,MemberList<TMember>> nonAccessibleAbstractMembersBySuperTypeRef=new HashMap<>();  for (  Entry<NameStaticPair,MemberMatrix> entry : memberCube.entrySet()) {    MemberMatrix mm=entry.getValue();    Collection<TMember> membersMissingOverrideAnnotation=new HashSet<>();    if (isClass) {      constraints_67_MemberOverride_checkEntry(mm,membersMissingOverrideAnnotation);    }    if (mm.hasImplemented()) {      if (holdConstraints_68_Consumption(mm)) {        constraints_69_Implementation(mm,membersMissingOverrideAnnotation);      }    }    constraints_60_InheritedConsumedCovariantSpecConstructor(tClassifier,mm);    constraints_66_NonOverride(mm);    constraints_42_45_46_AbstractMember(mm,nonAccessibleAbstractMembersBySuperTypeRef);    unusedGenericTypeVariable(mm);    checkUnpairedAccessorConsumption(mm,n4ClassifierDefinition);    checkUnpairedAccessorFilling(mm,n4ClassifierDefinition);    messageMissingOverrideAnnotation(mm,membersMissingOverrideAnnotation);  }  final boolean foundImpossibleExtendsImplements=!nonAccessibleAbstractMembersBySuperTypeRef.isEmpty();  if (foundImpossibleExtendsImplements) {    messageImpossibleExtendsImplements(n4ClassifierDefinition,nonAccessibleAbstractMembersBySuperTypeRef);  }  if (!foundImpossibleExtendsImplements) {    constraints_41_AbstractClass(tClassifier,memberCube);  }}  }
class C{  public MemberSelectTree buildPrimValueMethodAccess(Tree expr){  TypeMirror boxedType=InternalUtils.typeOf(expr);  TypeElement boxedElement=(TypeElement)((DeclaredType)boxedType).asElement();  assert TypesUtils.isBoxedPrimitive(boxedType);  TypeMirror unboxedType=modelTypes.unboxedType(boxedType);  String primValueName=unboxedType.toString() + "Value";  Symbol.MethodSymbol primValueMethod=null;  for (  ExecutableElement method : ElementFilter.methodsIn(elements.getAllMembers(boxedElement))) {    Name methodName=method.getSimpleName();    if (methodName.contentEquals(primValueName) && method.getParameters().size() == 0) {      primValueMethod=(Symbol.MethodSymbol)method;    }  }  assert primValueMethod != null : "no *Value method declared for boxed type";  Type.MethodType methodType=(Type.MethodType)primValueMethod.asType();  JCTree.JCFieldAccess primValueAccess=(JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)expr,primValueMethod);  primValueAccess.setType(methodType);  return primValueAccess;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.598 -0500",hash_original_method="CE7AFD5926883ED0297E0E8EC7A7D731",hash_generated_method="39DC581202F3DDC089AFACD3A40F9668") private void expandWellKnownMimeType(){  if (stringValue == null) {    int binaryContentType=(int)unsigned32bit;    stringValue=WELL_KNOWN_MIME_TYPES.get(binaryContentType);  } else {    unsigned32bit=-1;  }}  }
class C{  final int compare(MarkData o1,MarkData o2){  if (o1.index < o2.index) {    return -1;  } else   if (o1.index > o2.index) {    return 1;  } else {    return 0;  }}  }
class C{  public Rule(Literal[] literals,int prediction){  super();  this.literals=new Literal[literals.length];  for (int i=0; i < literals.length; i++) {    this.literals[i]=literals[i];  }  this.prediction=prediction;}  }
class C{  public YearMonthDay addWrapFieldToCopy(int valueToAdd){  int[] newValues=iYearMonthDay.getValues();  newValues=getField().addWrapField(iYearMonthDay,iFieldIndex,newValues,valueToAdd);  return new YearMonthDay(iYearMonthDay,newValues);}  }
class C{  public Diagnostic withCheque(Cheque cheque){  this.setCheque(cheque);  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","wust");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("IVolRepHdrFormat[");  buffer.append("ver = ").append(ver);  buffer.append(", loc = ").append(loc);  buffer.append(", repType = ").append(repType);  buffer.append(", os = ").append(os);  buffer.append(", dirFmt = ").append(dirFmt);  buffer.append(", local = ").append(local);  buffer.append(", flags = ").append(flags);  buffer.append(", source = ").append(source);  buffer.append("]");  return buffer.toString();}  }
class C{  public EclipsePreferencesAdapter(IScopeContext context,String qualifier){  fContext=context;  fQualifier=qualifier;}  }
class C{  private boolean userWantsToConvert(){  if (m_userHasBeenAskedAboutConversion)   return true;  m_userHasBeenAskedAboutConversion=true;  return (JOptionPane.showConfirmDialog(this,"This experiment has settings that are too advanced\n" + "to be represented in the simple setup mode.\n" + "Do you want the experiment to be converted,\n"+ "losing some of the advanced settings?\n","Confirm conversion",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION);}  }
class C{  public void reverse(){  double tmp;  int limit=size / 2;  int j=size - 1;  double[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public static TypingStrategy retrieveTypingStrategy(TypeRef typeRef){  if (typeRef != null && !typeRef.eIsProxy()) {    return typeRef.getTypingStrategy();  }  return TypingStrategy.DEFAULT;}  }
class C{  public CUdeviceptr(){}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static void main(String[] args) throws Exception {  GUILauncher.launchApplication(Experimenter.class,"MEKA Experimenter",true,args);}  }
class C{  public boolean match(EnumConstantDeclaration node,Object other){  if (!(other instanceof EnumConstantDeclaration)) {    return false;  }  EnumConstantDeclaration o=(EnumConstantDeclaration)other;  return (safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeListMatch(node.modifiers(),o.modifiers()) && safeSubtreeMatch(node.getName(),o.getName())&& safeSubtreeListMatch(node.arguments(),o.arguments())&& safeSubtreeMatch(node.getAnonymousClassDeclaration(),o.getAnonymousClassDeclaration()));}  }
class C{  public NoIdCursorWrapper(Cursor c,int idColumnIndex){  super(c);  this.idColumnIndex=idColumnIndex;}  }
class C{  private String keyToBackupKey(Key key){  return Base64.encodeToString(Key.toByteArray(key),Base64.NO_WRAP);}  }
class C{  public int length(){  return m_length;}  }
class C{  public void processCommand(){  final Project project=DefaultProjectFactory.getInstance().getDefaultProject();  final CheckoutProvider.Listener listener=ProjectLevelVcsManager.getInstance(project).getCompositeCheckoutListener();  try {    launchApplicationWindow();    final SimpleCheckoutController controller=new SimpleCheckoutController(project,listener,gitUrl,ref);    controller.showModalDialog();  } catch (  Throwable t) {    logger.warn("VSTS commandline checkout failed due to an unexpected error",t);    VcsNotifier.getInstance(project).notifyError(TfPluginBundle.message(TfPluginBundle.KEY_CHECKOUT_DIALOG_TITLE),TfPluginBundle.message(TfPluginBundle.KEY_CHECKOUT_ERRORS_UNEXPECTED,t.getMessage()));  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private GregorianCalendar read(Date date) throws Exception {  GregorianCalendar calendar=new GregorianCalendar();  if (date != null) {    calendar.setTime(date);  }  return calendar;}  }
class C{  private AnnotatedTypeVariable createAnnotatedTypeVar(final TypeVariable typeVariable,final AnnotatedTypeFactory typeFactory){  return (AnnotatedTypeVariable)typeFactory.getAnnotatedType(typeVariable.asElement());}  }
class C{  public NTRUEncryptionParameters(int N,int q,int df1,int df2,int df3,int dm0,int db,int c,int minCallsR,int minCallsMask,boolean hashSeed,byte[] oid,boolean sparse,boolean fastFp,Digest hashAlg){  this.N=N;  this.q=q;  this.df1=df1;  this.df2=df2;  this.df3=df3;  this.db=db;  this.dm0=dm0;  this.c=c;  this.minCallsR=minCallsR;  this.minCallsMask=minCallsMask;  this.hashSeed=hashSeed;  this.oid=oid;  this.sparse=sparse;  this.fastFp=fastFp;  this.polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT;  this.hashAlg=hashAlg;  init();}  }
class C{  public boolean leftClick(MapMouseEvent mme){  return false;}  }
class C{  public static byte[] newBytes(int len){  if (len == 0) {    return EMPTY_BYTES;  }  try {    return new byte[len];  } catch (  OutOfMemoryError e) {    Error e2=new OutOfMemoryError("Requested memory: " + len);    e2.initCause(e);    throw e2;  }}  }
class C{  public ServiceCall<Answers> convertDocumentToAnswer(File document,String mediaType,JsonObject customConfig){  Request request=createConversionRequest(document,mediaType,ConversionTarget.ANSWER_UNITS,customConfig);  return createServiceCall(request,ResponseConverterUtils.getObject(Answers.class));}  }
class C{  public Builder removeUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.removeUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  public String[] searchForRpfFiles(String[] startDirs){  RpfFileSearch search=new RpfFileSearch();  for (int i=0; i < startDirs.length; i++) {    search.handleEntry(startDirs[i]);  }  return search.getFiles();}  }
class C{  public BillingApplicationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public Response updateGroup(GroupEntity group){  return restClient.put("groups/" + group.getName(),group,new HashMap<String,String>());}  }
class C{  public final String[] split(CharSequence input){  return this.pattern.split(input);}  }
class C{  public static boolean hasImportStatic(String fqClassName,String memberName,PsiElement context){  final PsiFile file=context.getContainingFile();  if (!(file instanceof PsiJavaFile)) {    return false;  }  final PsiJavaFile javaFile=(PsiJavaFile)file;  final PsiImportList importList=javaFile.getImportList();  if (importList == null) {    return false;  }  final PsiImportStaticStatement[] importStaticStatements=importList.getImportStaticStatements();  for (  PsiImportStaticStatement importStaticStatement : importStaticStatements) {    if (importStaticStatement.isOnDemand()) {      PsiClass psiClass=ClassUtils.findClass(fqClassName,context);      if (psiClass != null && psiClass.equals(importStaticStatement.resolveTargetClass())) {        return true;      }      continue;    }    final String name=importStaticStatement.getReferenceName();    if (!memberName.equals(name)) {      continue;    }    final PsiJavaCodeReferenceElement importReference=importStaticStatement.getImportReference();    if (importReference == null) {      continue;    }    final PsiElement qualifier=importReference.getQualifier();    if (qualifier == null) {      continue;    }    final String qualifierText=qualifier.getText();    if (fqClassName.equals(qualifierText)) {      return true;    }  }  return false;}  }
class C{  static int convertUnits(String units,int defaultSuffix){  if (units == null) {    return -1;  }  int factor=1;  int i=0;  boolean suffixFound=false;  for (; i < CSSElement.CSS_LENGTH_SUFFIX.length; i++) {    if (units.endsWith(CSSElement.CSS_LENGTH_SUFFIX[i])) {      factor=CSS_LENGTH_FACTORS[i];      units=units.substring(0,units.length() - 2);      suffixFound=true;      break;    }  }  if (!suffixFound) {    i=defaultSuffix;    factor=CSS_LENGTH_FACTORS[i];  }  try {    int result=(int)(Float.parseFloat(units) * factor);    if ((i == LENGTH_SUFFIX_EM) || (i == LENGTH_SUFFIX_EX)) {      result+=VAL_EX;    }    return result;  } catch (  NumberFormatException nfe) {    return -1;  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static int toRGB(ColorSpace colorSpace,float... components){  float[] rgb=colorSpace.toRGB(components);  if (rgb[0] < 0f || rgb[1] < 0f || rgb[2] < 0f || rgb[0] > 1f || rgb[1] > 1f || rgb[2] > 1f) {    return 0;  }  return 0xff000000 | ((int)(rgb[0] * 255f) << 16) | ((int)(rgb[1] * 255f) << 8)| (int)(rgb[2] * 255f);}  }
class C{  protected T cache(T value){  if (value != null) {    cache.put(value.getId(),value);  }  return value;}  }
class C{  private void buildIterator(){  if (rowIterator != null) {    SolrDocumentListIterator documentListIterator=(SolrDocumentListIterator)rowIterator;    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {      SolrDocumentList solrDocumentList=doQuery(documentListIterator.getStart() + documentListIterator.getSize());      if (solrDocumentList != null) {        rowIterator=new SolrDocumentListIterator(solrDocumentList);      }    }  } else {    SolrDocumentList solrDocumentList=doQuery(0);    if (solrDocumentList != null) {      rowIterator=new SolrDocumentListIterator(solrDocumentList);    }    return;  }}  }
class C{  private void fillFieldValues(){  dotSizeField.setText(Integer.toString(model.getDotSize()));  autoRange.setSelected(model.isAutoRange());  autoDomain.setSelected(model.isAutoRange());  showHistory.setSelected(model.isShowHistory());  maxRangeField.setText(Double.toString(model.getUpperRangeBoundary()));  minRangeField.setText(Double.toString(model.getLowerRangeBoundary()));  maxDomainField.setText(Double.toString(model.getUpperDomainBoundary()));  minDomainField.setText(Double.toString(model.getLowerDomainBoundary()));  setIndicatorColor();}  }
class C{  public SipTransactionContext sendSipMessage(SipMessage message) throws PayloadException, NetworkException {  return sendSipMessage(message,null);}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (getNumNodes() <= 0) {    return null;  }  curSerialNodeIndex++;  if (curSerialNodeIndex >= getNumNodes()) {    curSerialNodeIndex=0;  }  if (getMustInit(curSerialNodeIndex)) {    setMustInit(curSerialNodeIndex,false);    AbstractMRMessage m=getNode(curSerialNodeIndex).createInitPacket();    if (m != null) {      log.debug("send init message: " + m);      m.setTimeout(2000);      return m;    }  }  if (getNode(curSerialNodeIndex).mustSend()) {    log.debug("request write command to send");    AbstractMRMessage m=getNode(curSerialNodeIndex).createOutPacket();    getNode(curSerialNodeIndex).resetMustSend();    m.setTimeout(500);    return m;  }  if (getNode(curSerialNodeIndex).getSensorsActive()) {    SerialMessage m=SerialMessage.getPoll(getNode(curSerialNodeIndex).getNodeAddress());    if (curSerialNodeIndex >= getNumNodes()) {      curSerialNodeIndex=0;    }    return m;  } else {    return null;  }}  }
class C{  @Override public boolean isFieldSeparatorAtStart(){  return super.isFieldSeparatorAtStart();}  }
class C{  public boolean isStreetName(){  return isStreetName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.221 -0400",hash_original_method="1A7FE62B9009FCF7C5788DAE3284B8C2",hash_generated_method="685C73591268352675F49EAA0A1B1056") public byte[] encode(byte[] bytes){  return encodeQuotedPrintable(PRINTABLE_CHARS,bytes);}  }
class C{  public static ProgressDialogFragment newInstance(int indeterminateDrawable,String message){  ProgressDialogFragment f=new ProgressDialogFragment();  Bundle args=new Bundle();  args.putInt("indeterminateDrawable",indeterminateDrawable);  args.putString("message",message);  f.setArguments(args);  return f;}  }
class C{  public static void add(List<String> options,String[] superOptions){  options.addAll(Arrays.asList(superOptions));}  }
class C{  public void deleteLoginFailedIP(String ip){  client.delete(String.class,CONFIG_DELETE_BLOCK_IP,ip);}  }
class C{  public TIntByteHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void moveWay(final Way way,final int deltaLatE7,final int deltaLonE7){  if (way.getNodes() == null) {    Log.d("StorageDelegator","moveWay way " + way.getOsmId() + " has no nodes!");    return;  }  dirty=true;  try {    HashSet<Node> nodes=new HashSet<Node>(way.getNodes());    for (    Node nd : nodes) {      undo.save(nd);      apiStorage.insertElementSafe(nd);      nd.setLat(nd.getLat() + deltaLatE7);      nd.setLon(nd.getLon() + deltaLonE7);      nd.updateState(OsmElement.STATE_MODIFIED);    }    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  protected HttpURLConnection openHttpConnection(URL url,Map<String,String> properties) throws NetworkException {  try {    HttpURLConnection cnx=(HttpURLConnection)url.openConnection();    for (    Entry<String,String> header : properties.entrySet()) {      cnx.setRequestProperty(header.getKey(),header.getValue());    }    cnx.setRequestProperty("User-Agent",SipUtils.userAgentString());    return cnx;  } catch (  IOException e) {    throw new NetworkException("Failed to open http connection with url : " + url,e);  }}  }
class C{  public void maxlon(double parsed){  maxlon=parsed;}  }
class C{  private void removeNotChargedParametersAndValues(XParameterData parameterData,List<XParameterIdData> notChargedParameters,Map<XParameterIdData,Set<XParameterPeriodValue>> notChargedParameterValues){  parameterData.getIdData().removeAll(notChargedParameters);  for (  XParameterIdData parameterIdData : parameterData.getIdData()) {    Set<XParameterPeriodValue> notChargedParValueSet=notChargedParameterValues.get(parameterIdData);    if (notChargedParValueSet != null) {      parameterIdData.getPeriodValues().removeAll(notChargedParValueSet);    }  }}  }
class C{  private void validateSearchParameters(Map<String,List<String>> params,String[] criterias){  String nonVolumeKey=null;  boolean found=false;  if (!isValidSearch(params,criterias)) {    throw APIException.badRequests.invalidParameterSearchMissingParameter(getResourceClass().getName(),Arrays.toString(criterias));  }  for (  Map.Entry<String,List<String>> entry : params.entrySet()) {    found=false;    for (    String search : criterias) {      if (entry.getKey().equals(search)) {        found=true;      }    }    if (!found) {      nonVolumeKey=entry.getKey();    }  }  if (nonVolumeKey != null) {    throw APIException.badRequests.parameterForSearchCouldNotBeCombinedWithAnyOtherParameter(getResourceClass().getName(),Arrays.toString(criterias),nonVolumeKey);  }}  }
class C{  protected static void validateNodes(StatementSpecCompiled statementSpec,StatementContext statementContext,StreamTypeService typeService,ViewResourceDelegateUnverified viewResourceDelegate){  EngineImportService engineImportService=statementContext.getEngineImportService();  ExprEvaluatorContextStatement evaluatorContextStmt=new ExprEvaluatorContextStatement(statementContext,false);  String intoTableName=statementSpec.getIntoTableSpec() == null ? null : statementSpec.getIntoTableSpec().getName();  if (statementSpec.getFilterRootNode() != null) {    ExprNode optionalFilterNode=statementSpec.getFilterRootNode();    try {      ExprValidationContext validationContext=new ExprValidationContext(typeService,engineImportService,statementContext.getStatementExtensionServicesContext(),viewResourceDelegate,statementContext.getSchedulingService(),statementContext.getVariableService(),statementContext.getTableService(),evaluatorContextStmt,statementContext.getEventAdapterService(),statementContext.getStatementName(),statementContext.getStatementId(),statementContext.getAnnotations(),statementContext.getContextDescriptor(),false,false,true,false,intoTableName,false);      optionalFilterNode=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.FILTER,optionalFilterNode,validationContext);      if (optionalFilterNode.getExprEvaluator().getType() != boolean.class && optionalFilterNode.getExprEvaluator().getType() != Boolean.class) {        throw new ExprValidationException("The where-clause filter expression must return a boolean value");      }      statementSpec.setFilterExprRootNode(optionalFilterNode);      List<ExprAggregateNode> aggregateNodes=new LinkedList<ExprAggregateNode>();      ExprAggregateNodeUtil.getAggregatesBottomUp(optionalFilterNode,aggregateNodes);      if (!aggregateNodes.isEmpty()) {        throw new ExprValidationException("An aggregate function may not appear in a WHERE clause (use the HAVING clause)");      }    } catch (    ExprValidationException ex) {      log.debug(".validateNodes Validation exception for filter=" + ExprNodeUtility.toExpressionStringMinPrecedenceSafe(optionalFilterNode),ex);      throw new EPStatementException("Error validating expression: " + ex.getMessage(),ex,statementContext.getExpression());    }  }  if ((statementSpec.getOutputLimitSpec() != null) && ((statementSpec.getOutputLimitSpec().getWhenExpressionNode() != null) || (statementSpec.getOutputLimitSpec().getAndAfterTerminateExpr() != null))) {    try {      EventType outputLimitType=OutputConditionExpressionFactory.getBuiltInEventType(statementContext.getEventAdapterService());      StreamTypeService typeServiceOutputWhen=new StreamTypeServiceImpl(new EventType[]{outputLimitType},new String[]{null},new boolean[]{true},statementContext.getEngineURI(),false);      ExprValidationContext validationContext=new ExprValidationContext(typeServiceOutputWhen,engineImportService,statementContext.getStatementExtensionServicesContext(),null,statementContext.getSchedulingService(),statementContext.getVariableService(),statementContext.getTableService(),evaluatorContextStmt,statementContext.getEventAdapterService(),statementContext.getStatementName(),statementContext.getStatementId(),statementContext.getAnnotations(),statementContext.getContextDescriptor(),false,false,false,false,intoTableName,false);      ExprNode outputLimitWhenNode=statementSpec.getOutputLimitSpec().getWhenExpressionNode();      if (outputLimitWhenNode != null) {        outputLimitWhenNode=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.OUTPUTLIMIT,outputLimitWhenNode,validationContext);        statementSpec.getOutputLimitSpec().setWhenExpressionNode(outputLimitWhenNode);        if (JavaClassHelper.getBoxedType(outputLimitWhenNode.getExprEvaluator().getType()) != Boolean.class) {          throw new ExprValidationException("The when-trigger expression in the OUTPUT WHEN clause must return a boolean-type value");        }        EPStatementStartMethodHelperValidate.validateNoAggregations(outputLimitWhenNode,"An aggregate function may not appear in a OUTPUT LIMIT clause");      }      if (statementSpec.getOutputLimitSpec().getAndAfterTerminateExpr() != null) {        if (statementSpec.getOutputLimitSpec().getRateType() != OutputLimitRateType.WHEN_EXPRESSION && statementSpec.getOutputLimitSpec().getRateType() != OutputLimitRateType.TERM) {          throw new ExprValidationException("A terminated-and expression must be used with the OUTPUT WHEN clause");        }        ExprNode validated=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.OUTPUTLIMIT,statementSpec.getOutputLimitSpec().getAndAfterTerminateExpr(),validationContext);        statementSpec.getOutputLimitSpec().setAndAfterTerminateExpr(validated);        if (JavaClassHelper.getBoxedType(validated.getExprEvaluator().getType()) != Boolean.class) {          throw new ExprValidationException("The terminated-and expression must return a boolean-type value");        }        EPStatementStartMethodHelperValidate.validateNoAggregations(validated,"An aggregate function may not appear in a terminated-and clause");      }      validateThenSetAssignments(statementSpec.getOutputLimitSpec().getThenExpressions(),validationContext);      validateThenSetAssignments(statementSpec.getOutputLimitSpec().getAndAfterTerminateThenExpressions(),validationContext);    } catch (    ExprValidationException ex) {      throw new EPStatementException("Error validating expression: " + ex.getMessage(),statementContext.getExpression());    }  }  for (int outerJoinCount=0; outerJoinCount < statementSpec.getOuterJoinDescList().length; outerJoinCount++) {    OuterJoinDesc outerJoinDesc=statementSpec.getOuterJoinDescList()[outerJoinCount];    if (outerJoinDesc.getOptLeftNode() != null) {      UniformPair<Integer> streamIdPair=validateOuterJoinPropertyPair(statementContext,outerJoinDesc.getOptLeftNode(),outerJoinDesc.getOptRightNode(),outerJoinCount,typeService,viewResourceDelegate);      if (outerJoinDesc.getAdditionalLeftNodes() != null) {        Set<Integer> streamSet=new HashSet<Integer>();        streamSet.add(streamIdPair.getFirst());        streamSet.add(streamIdPair.getSecond());        for (int i=0; i < outerJoinDesc.getAdditionalLeftNodes().length; i++) {          UniformPair<Integer> streamIdPairAdd=validateOuterJoinPropertyPair(statementContext,outerJoinDesc.getAdditionalLeftNodes()[i],outerJoinDesc.getAdditionalRightNodes()[i],outerJoinCount,typeService,viewResourceDelegate);          if ((!streamSet.contains(streamIdPairAdd.getFirst()) || (!streamSet.contains(streamIdPairAdd.getSecond())))) {            String message="Outer join ON-clause columns must refer to properties of the same joined streams" + " when using multiple columns in the on-clause";            throw new EPStatementException("Error validating expression: " + message,statementContext.getExpression());          }        }      }    }  }}  }
class C{  private void addUpdateMenuItem(ModelMenuItem modelMenuItem,List<ModelMenuItem> menuItemList,Map<String,ModelMenuItem> menuItemMap){  ModelMenuItem existingMenuItem=menuItemMap.get(modelMenuItem.getName());  if (existingMenuItem != null) {    ModelMenuItem mergedMenuItem=existingMenuItem.mergeOverrideModelMenuItem(modelMenuItem);    int existingItemIndex=menuItemList.indexOf(existingMenuItem);    menuItemList.set(existingItemIndex,mergedMenuItem);    menuItemMap.put(modelMenuItem.getName(),mergedMenuItem);  } else {    menuItemList.add(modelMenuItem);    menuItemMap.put(modelMenuItem.getName(),modelMenuItem);  }}  }
class C{  public void doMultiActionPacketOut(byte[] packetData,IOFSwitch sw,Set<OFPort> ports,FloodlightContext cntx){  if (ports == null)   return;  if (packetData == null || packetData.length <= 0)   return;  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  for (  OFPort p : ports) {    actions.add(sw.getOFFactory().actions().output(p,0));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(OFPort.ZERO);  pob.setData(packetData);  if (log.isTraceEnabled()) {    log.trace("write broadcast packet on switch-id={} " + "interaces={} packet-data={} packet-out={}",new Object[]{sw.getId(),ports,packetData,pob.build()});  }  sw.write(pob.build(),LogicalOFMessageCategory.MAIN);}  }
class C{  @ResponseBody @RequestMapping(value="/user/{login}",method=RequestMethod.GET) public User findByLogin(@PathVariable String login) throws ServiceException, CheckException {  return this.userService.findByLogin(login);}  }
class C{  public static CtClass toCtClass(String desc,ClassPool cp) throws NotFoundException {  CtClass[] clazz=new CtClass[1];  int res=toCtClass(cp,desc,0,clazz,0);  if (res >= 0)   return clazz[0]; else {    return cp.get(desc.replace('/','.'));  }}  }
class C{  static ProcessStatus runCommand(List<String> command){  long timeout=900000;  ProcessBuilder randoopBuilder=new ProcessBuilder(command);  randoopBuilder.redirectErrorStream(true);  TimeLimitProcess p=null;  try {    p=new TimeLimitProcess(randoopBuilder.start(),timeout,true);  } catch (  IOException e) {    fail("Exception starting process: " + e);  }  int exitValue=-1;  try {    exitValue=p.waitFor();  } catch (  InterruptedException e) {    fail("Exception running process: " + e);  }  List<String> outputLines=new ArrayList<>();  try (BufferedReader rdr=new BufferedReader(new InputStreamReader(p.getInputStream()))){    String line=rdr.readLine();    while (line != null) {      outputLines.add(line);      line=rdr.readLine();    }  } catch (  IOException e) {    fail("Exception getting output " + e);  }  if (p.timed_out()) {    for (    String line : outputLines) {      System.out.println(line);    }    assert !p.timed_out() : "Process timed out after " + p.timeout_msecs() + " msecs";  }  return new ProcessStatus(command,exitValue,outputLines);}  }
class C{  int priorityValue(int state){  int value=0;switch (state) {case AbstractValue.UNKNOWN:    value++;case AbstractValue.DIFF:  value++;case AbstractValue.EDITED:value++;case AbstractValue.FROMFILE:value++;default :return value;}}  }
class C{  public static void paint3Deffect(Graphics2D g2D,Rectangle r,boolean round,boolean out){  GradientPaint topPaint=null;  if (out)   topPaint=new GradientPaint(r.x,r.y,COL_1TOP,r.x,r.y + r.height / 2,COL_1END); else   topPaint=new GradientPaint(r.x,r.y,COL_2END,r.x,r.y + r.height / 2,COL_2TOP);  g2D.setPaint(topPaint);  RectangularShape topRec=null;  if (round)   topRec=new RoundRectangle2D.Float(r.x,r.y,r.width,r.height / 2,15,15); else   topRec=new Rectangle(r.x,r.y,r.width,r.height / 2);  g2D.fill(topRec);  GradientPaint endPaint=null;  if (out)   endPaint=new GradientPaint(r.x,r.y + r.height / 2,COL_2TOP,r.x,r.y + r.height,COL_2END); else   endPaint=new GradientPaint(r.x,r.y + r.height / 2,COL_1END,r.x,r.y + r.height,COL_1TOP);  g2D.setPaint(endPaint);  RectangularShape endRec=null;  if (round)   endRec=new RoundRectangle2D.Float(r.x,r.y + r.height / 2,r.width,r.height / 2,15,15); else   endRec=new Rectangle(r.x,r.y + r.height / 2,r.width,r.height / 2);  g2D.fill(endRec);}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  @Override public boolean apply(NodeRenderingProperty property){  if (!property.isVisible) {    return false;  }  GL2 gl=scene.gl;  gl.glPushMatrix();  gl.glPushName(property.shapeId);  property.shape.setTranslation(property.positionX * GLScene.FACTOR,property.positionY * GLScene.FACTOR,0f);  property.shape.setScale(property.size,property.size * property.ratio,property.size);  if (property.isFilled) {    gl.glColor4f(property.fillColor.getRed() / 255f,property.fillColor.getGreen() / 255f,property.fillColor.getBlue() / 255f,property.fillColor.getAlpha() / 255f);    property.shape.fill(gl);  }  if (property.strokeWidth > 0.0f) {    gl.glLineWidth(property.strokeWidth);    gl.glColor4f(property.strokeColor.getRed() / 255f,property.strokeColor.getGreen() / 255f,property.strokeColor.getBlue() / 255f,property.strokeColor.getAlpha() / 255f);    property.shape.draw(gl);  }  Rectangle2D bounds=property.shape.getDrawingBounds();  updateDrawingBounds(bounds);  gl.glPopName();  if (property.isTextVisible) {    paintLabel(property);  }  if (property.hasCollapsedNodeUnder) {    double centerX=property.positionX + property.size / 2;    double centerY=property.positionY + property.size / 2;    double halfWidth=0.7;    double halfHeight=4;    gl.glBegin(GL2.GL_QUADS);    gl.glColor4f(1f,1f,1f,0.5f);    gl.glVertex2d(centerX - halfWidth,centerY + halfHeight);    gl.glVertex2d(centerX + halfWidth,centerY + halfHeight);    gl.glVertex2d(centerX + halfWidth,centerY - halfHeight);    gl.glVertex2d(centerX - halfWidth,centerY - halfHeight);    gl.glVertex2d(centerX - halfHeight,centerY + halfWidth);    gl.glVertex2d(centerX - halfWidth,centerY + halfWidth);    gl.glVertex2d(centerX - halfWidth,centerY - halfWidth);    gl.glVertex2d(centerX - halfHeight,centerY - halfWidth);    gl.glVertex2d(centerX + halfWidth,centerY + halfWidth);    gl.glVertex2d(centerX + halfHeight,centerY + halfWidth);    gl.glVertex2d(centerX + halfHeight,centerY - halfWidth);    gl.glVertex2d(centerX + halfWidth,centerY - halfWidth);    gl.glVertex3d(0,0,0);    gl.glEnd();  }  gl.glPopMatrix();  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public void test_initWithKey() throws Exception {  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/ECB/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES);  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES);    fail();  } catch (  InvalidKeyException expected) {  }}  }
class C{  protected long link(OutputStream out) throws IOException {  if (data == null || data.units == null) {    return 0;  }  boolean hasChanged=(oemConfiguration == null) ? false : oemConfiguration.hasChanged();  flex2.compiler.common.Configuration config=null;  if (hasChanged) {    OEMConfiguration tempOEMConfiguration;    tempOEMConfiguration=OEMUtil.getLinkerConfiguration(oemConfiguration.getLinkerOptions(),oemConfiguration.keepLinkReport(),oemConfiguration.keepSizeReport(),OEMUtil.getLogger(logger,messages),mimeMappings,resolver,data.configuration,oemConfiguration.newLinkerOptionsAfterCompile,data.includes,data.excludes);    if (tempOEMConfiguration == null) {      clean(false,false,false,false,false,true);      return 0;    }    config=tempOEMConfiguration.configuration;  } else {    config=data.configuration;  }  long size=0;  try {    OEMUtil.init(OEMUtil.getLogger(logger,messages),mimeMappings,meter,resolver,cc);    ApplicationCompilerConfiguration appConfig=(ApplicationCompilerConfiguration)data.configuration;    VirtualFile projector=appConfig.getProjector();    PostLink postLink=null;    if (config.optimize() && !config.debug()) {      postLink=new PostLink(config);    }    if (projector != null && projector.getName().endsWith("avmplus.exe")) {      ConsoleApplication temp=data.app;      data.app=LinkerAPI.linkConsole(data.units,postLink,config);      size=encodeConsoleProjector(projector,out);      if (hasChanged && temp != null) {        data.app=temp;      }    } else {      SimpleMovie temp=data.movie;      data.movie=(FlexMovie)LinkerAPI.link(data.units,postLink,config);      size=(projector == null) ? encode(out) : encodeProjector(projector,out);      if (hasChanged && temp != null) {        data.movie=temp;      }    }  } catch (  LinkerException ex) {    assert ThreadLocalToolkit.errorCount() > 0;  }catch (  Throwable t) {    if (Trace.error) {      t.printStackTrace();    }    ThreadLocalToolkit.logError(t.getLocalizedMessage());  } finally {    OEMUtil.clean();  }  return size;}  }
class C{  public static byte[] removeAllInstancesOf(byte[] inputScript,byte[] chunkToRemove){  UnsafeByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(inputScript.length);  int cursor=0;  while (cursor < inputScript.length) {    boolean skip=equalsRange(inputScript,cursor,chunkToRemove);    int opcode=inputScript[cursor++] & 0xFF;    int additionalBytes=0;    if (opcode >= 0 && opcode < OP_PUSHDATA1) {      additionalBytes=opcode;    } else     if (opcode == OP_PUSHDATA1) {      additionalBytes=(0xFF & inputScript[cursor]) + 1;    } else     if (opcode == OP_PUSHDATA2) {      additionalBytes=((0xFF & inputScript[cursor]) | ((0xFF & inputScript[cursor + 1]) << 8)) + 2;    } else     if (opcode == OP_PUSHDATA4) {      additionalBytes=((0xFF & inputScript[cursor]) | ((0xFF & inputScript[cursor + 1]) << 8) | ((0xFF & inputScript[cursor + 1]) << 16)| ((0xFF & inputScript[cursor + 1]) << 24)) + 4;    }    if (!skip) {      try {        bos.write(opcode);        bos.write(Arrays.copyOfRange(inputScript,cursor,cursor + additionalBytes));      } catch (      IOException e) {        throw new RuntimeException(e);      }    }    cursor+=additionalBytes;  }  return bos.toByteArray();}  }
class C{  private RoleDefinition createRoleDefinition(String roleID,TechnicalProduct technicalProduct) throws Exception {  RoleDefinition roleDefinition=new RoleDefinition();  roleDefinition.setTechnicalProduct(technicalProduct);  roleDefinition.setRoleId(roleID);  mgr.persist(roleDefinition);  mgr.flush();  return roleDefinition;}  }
class C{  public boolean sendEMail(MUser from,MUser to,String subject,String message,File attachment,boolean isHtml){  EMail email=createEMail(from,to,subject,message,isHtml);  if (email == null)   return false;  if (attachment != null)   email.addAttachment(attachment);  InternetAddress emailFrom=email.getFrom();  try {    return sendEmailNow(from,to,email);  } catch (  Exception ex) {    log.severe(getName() + " - from " + emailFrom+ " to "+ to+ ": "+ ex.getLocalizedMessage());    return false;  }}  }
class C{  private void validateConfiguration(SessionConfiguration configuration){  String nullError="%s must not be null";  String sampleError="Please update your %s in the gradle.properties of the project before " + "using the Uber SDK Sample app. For a more secure storage location, " + "please investigate storing in your user home gradle.properties ";  checkNotNull(configuration,String.format(nullError,"SessionConfiguration"));  checkNotNull(configuration.getClientId(),String.format(nullError,"Client ID"));  checkNotNull(configuration.getRedirectUri(),String.format(nullError,"Redirect URI"));  checkState(!configuration.getClientId().equals("insert_your_client_id_here"),String.format(sampleError,"Client ID"));  checkState(!configuration.getRedirectUri().equals("insert_your_redirect_uri_here"),String.format(sampleError,"Redirect URI"));}  }
class C{  protected boolean isHttpSeparator(char ch){  return (HTTP_SEPARATORS.indexOf(ch) >= 0);}  }
class C{  @Override public void displayView(View viewToDisplay){  log.debug("Displaying view '" + viewToDisplay + "'");  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.navigateAwayFromView(getCurrentView());  }  setCurrentView(viewToDisplay);  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.displayView(getCurrentView());  }}  }
class C{  public BlockAmount(final long amount){  super(amount,BlockAmount.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("amount must be non-negative");  }}  }
class C{  public StringSendPacket send(String str,SendListener listener){  if (str == null)   throw new NullPointerException("Send string can't be null.");  StringSendPacket entity=null;  try {    entity=new StringSendPacket(str,listener);    send(entity);  } catch (  Exception e) {    e.printStackTrace();  }  return entity;}  }
class C{  protected void paintPlainLine(int lineIndex,Graphics g,int x,int y){  super.drawLine(lineIndex,g,x,y);}  }
class C{  public RangeQueryBuilder gte(String from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  public ExpandedNameTable(){  m_capacity=m_initialCapacity;  m_threshold=(int)(m_capacity * m_loadFactor);  m_table=new HashEntry[m_capacity];  initExtendedTypes();}  }
class C{  public String(byte[] data,int start,int length,final String encoding) throws UnsupportedEncodingException {  if (encoding == null) {    throw new NullPointerException();  }  if (start >= 0 && 0 <= length && length <= data.length - start) {    offset=0;    Charset charset=getCharset(encoding);    int result;    CharBuffer cb;    try {      cb=charset.decode(ByteBuffer.wrap(data,start,length));    } catch (    Exception e) {      cb=CharBuffer.wrap("\u003f".toCharArray());    }    if ((result=cb.length()) > 0) {      value=cb.array();      count=result;    } else {      count=0;      value=new char[0];    }  } else {    throw new StringIndexOutOfBoundsException();  }}  }
class C{  public XBLOMHandlerGroupElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void start(){  startTime=System.currentTimeMillis();}  }
class C{  public static String generateRedirectUrlQueryStringParameters(String samlRequest,String samlResponse,String relayState,String sigAlg,String signature) throws UnsupportedEncodingException {  StringBuilder sb=new StringBuilder();  appendOptionalParameter(sb,SamlUtils.SAML_REQUEST_PARAMETER,samlRequest,false);  appendOptionalParameter(sb,SamlUtils.SAML_RESPONSE_PARAMETER,samlResponse,false);  appendOptionalParameter(sb,SamlUtils.RELAY_STATE_PARAMETER,relayState,false);  appendOptionalParameter(sb,SamlUtils.SIGNATURE_ALGORITHM_PARAMETER,sigAlg,false);  appendOptionalParameter(sb,SamlUtils.SIGNATURE_PARAMETER,signature,false);  return sb.toString();}  }
class C{  private boolean isValidAuthorityHostNoTld(String authority){  Perl5Util authorityMatcher=new Perl5Util();  if (authority != null && authorityMatcher.match("/^([a-zA-Z\\d\\-\\.]*)(:\\d*)?(.*)?/",authority)) {    String host=authorityMatcher.group(1);    if (host.indexOf('.') > 0) {      DomainValidator domainValidator=DomainValidator.getInstance();      String patchedHost=host + ".com";      if (!domainValidator.isValid(patchedHost)) {        return false;      }      String port=authorityMatcher.group(2);      if (!isValidPort(port)) {        return false;      }      String extra=authorityMatcher.group(3);      return GenericValidator.isBlankOrNull(extra);    } else {      return false;    }  } else {    return false;  }}  }
class C{  @Override public void seriesChanged(SeriesChangeEvent event){  fireTableDataChanged();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void test() throws Exception {  goOn=true;  thrown=null;  long sGetRBCount=getRBcount.get();  long sSetRBCount=setRBcount.get();  long sSetRBNameCount=setRBNameCount.get();  long sCheckCount=checkCount.get();  long sNextLong=nextLong.get();  long sIgnoreLogCount=ignoreLogCount.get();  List<Thread> threads=new ArrayList<>();  for (  Class<? extends ResourceBundle> type : classes) {    threads.add(new SetRB(type));    threads.add(new SetRBName(type));  }  for (int i=0; i < READERS; i++) {    threads.add(new GetRB());  }  threads.add(new DeadlockDetector());  threads.add(0,new Stopper(TIME));  for (  Thread t : threads) {    t.start();  }  for (  Thread t : threads) {    try {      t.join();    } catch (    Exception x) {      fail(x);    }  }  if (thrown != null) {    throw thrown;  }  System.out.println("Passed: " + (nextLong.longValue() - sNextLong) + " unique loggers created");  System.out.println("\t " + (getRBcount.get() - sGetRBCount) + " loggers tested by "+ READERS+ " Thread(s),");  System.out.println("\t " + (setRBcount.get() - sSetRBCount) + " resource bundles set by "+ classes.size()+ " Thread(s),");  System.out.println("\t " + (setRBNameCount.get() - sSetRBNameCount) + " resource bundle names set by "+ classes.size()+ " Thread(s),");  System.out.println("\t " + (ignoreLogCount.get() - sIgnoreLogCount) + " log messages emitted by other GetRB threads were ignored"+ " to ensure MT test consistency,");  System.out.println("\t ThreadMXBean.findDeadlockedThreads called " + (checkCount.get() - sCheckCount) + " times by 1 Thread.");}  }
class C{  void postExceptionFromThread(Exception e){  m_exceptionThrown=e;  ;synchronized (this) {    notifyAll();  }}  }
class C{  public CassandraVersioner(final Session session){  this.session=session;  createSchemaVersion();}  }
class C{  public void deactivate(){  checked=false;  setIcon(Icons.getImageIcon("tape.png"));  WorldScenePanel worldScenePanel=Dert.getWorldView().getScenePanel();  worldScenePanel.getInputHandler().setTapeMeasure(null);  TapeMeasure tape=World.getInstance().getTapeMeasure();  tape.setDialog(null);  dialog.close();}  }
class C{  public void testRanking() throws Exception {  final int numDocs=atLeast(100);  final int maxTopN=5;  final int maxSentenceLength=10;  final int maxNumSentences=20;  Directory dir=newDirectory();  indexAnalyzer=new MockAnalyzer(random(),MockTokenizer.SIMPLE,true);  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document document=new Document();  Field id=new StringField("id","",Field.Store.NO);  Field body=new Field("body","",fieldType);  document.add(id);  document.add(body);  for (int i=0; i < numDocs; i++) {    StringBuilder bodyText=new StringBuilder();    int numSentences=TestUtil.nextInt(random(),1,maxNumSentences);    for (int j=0; j < numSentences; j++) {      bodyText.append(newSentence(random(),maxSentenceLength));    }    body.setStringValue(bodyText.toString());    id.setStringValue(Integer.toString(i));    iw.addDocument(document);  }  IndexReader ir=iw.getReader();  IndexSearcher searcher=newSearcher(ir);  for (int i=0; i < numDocs; i++) {    checkDocument(searcher,i,maxTopN);  }  iw.close();  ir.close();  dir.close();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTwilightArea(zone);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.965 -0500",hash_original_method="6107CD4B76D912ACDA57642552743C0C",hash_generated_method="FF9200DAB9E02B346F47DEFB7ACA80DD") private RawContacts(){}  }
class C{  public boolean removeMode(String mode){  if (modes != null) {    return modes.remove(mode);  } else {    return false;  }}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public final E elementAt(int index){  return get(index);}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  void ensurePadding(){  final int N=mLayerState.mNum;  if (mPaddingL != null && mPaddingL.length >= N) {    return;  }  mPaddingL=new int[N];  mPaddingT=new int[N];  mPaddingR=new int[N];  mPaddingB=new int[N];}  }
class C{  public ReRouteVehicles(LeastCostPathCalculator router,Network network,TravelTime travelTime){  super();  this.router=router;  this.network=network;  this.travelTime=travelTime;}  }
class C{  public static FieldInfo of(Enum<?> enumValue){  try {    FieldInfo result=FieldInfo.of(enumValue.getClass().getField(enumValue.name()));    Preconditions.checkArgument(result != null,"enum constant missing @Value or @NullValue annotation: %s",enumValue);    return result;  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e);  }}  }
class C{  public static XMLTree create(String rootName){  return from(String.format(ROOT_TEMPLATE,rootName,rootName));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.694 -0500",hash_original_method="F20A814E25CC4DCEEFFCCD4E0DFF5916",hash_generated_method="4071720A7A7F32E488953DEEA8D01995") public final void send(TFTPPacket packet) throws IOException {  _socket_.send(packet.newDatagram());}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public ByteBufferBitVector(final ByteBuffer b){  this(b,0,b == null ? 0 : b.capacity() * 8);}  }
class C{  public void updateContext(Context newContext){  context=newContext;}  }
class C{  public OFMirrorGetVendorDataRequest(byte tableIndex,int netMask){  super(BSN_GET_MIRRORING_REQUEST,tableIndex,netMask);}  }
class C{  private MobileSessionCtx(HttpServletRequest request,int W_Store_ID){  log.info(request.getContextPath() + " (" + request.getRemoteAddr()+ " - "+ request.getLocale()+ ") #"+ counter);  ctx=new Properties();  setLanguage(request);  HttpSession session=request.getSession(false);  ServletContext sc=session.getServletContext();  Enumeration en=sc.getInitParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    String value=sc.getInitParameter(key);    ctx.setProperty(key,value);    log.config(key + "=" + value);  }  setWStore(W_Store_ID);  ctx=getDefaults();  ctx.put(CTX_SERVER_CONTEXT,request.getServerName() + request.getContextPath());  session.setAttribute("ctx",ctx);  log.fine("#" + ctx.size());}  }
class C{  public void didCommit(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:27.726 -0500",hash_original_method="FE64C515B6E8C2636E66195448D35A64",hash_generated_method="DF1124E6ECD8BECEB7DCB4164CF0A34C") public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port,int timeoutMs) throws SocketException, SocketTimeoutException {  try {    return connectErrno(fd,inetAddress,port,timeoutMs);  } catch (  ErrnoException errnoException) {    throw new ConnectException(connectDetail(inetAddress,port,timeoutMs,errnoException),errnoException);  }catch (  SocketException ex) {    throw ex;  }catch (  SocketTimeoutException ex) {    throw ex;  }catch (  IOException ex) {    throw new SocketException(ex);  }}  }
class C{  public double[] toEulerAngles(){  double[] ret=new double[3];  ret[0]=Math.atan2(2 * points[1] * getW() - 2 * points[0] * points[2],1 - 2 * (points[1] * points[1]) - 2 * (points[2] * points[2]));  ret[1]=Math.asin(2 * points[0] * points[1] + 2 * points[2] * getW());  ret[2]=Math.atan2(2 * points[0] * getW() - 2 * points[1] * points[2],1 - 2 * (points[0] * points[0]) - 2 * (points[2] * points[2]));  return ret;}  }
class C{  public void equalIntervals(Node node,int numCategories){  if (node instanceof DiscreteVariable)   return;  String name=node.getName();  int i=sourceDataSet.getVariables().indexOf(node);  double[] data=sourceDataSet.getDoubleData().getColumn(i).toArray();  double max=StatUtils.max(data);  double min=StatUtils.min(data);  double interval=(max - min) / numCategories;  double[] breakpoints=new double[numCategories - 1];  for (int g=0; g < numCategories - 1; g++) {    breakpoints[g]=min + (g + 1) * interval;  }  List<String> categories=new DiscreteVariable(name,numCategories).getCategories();  ContinuousDiscretizationSpec spec=new ContinuousDiscretizationSpec(breakpoints,categories);  spec.setMethod(ContinuousDiscretizationSpec.EVENLY_DISTRIBUTED_INTERVALS);  specs.put(node,spec);}  }
class C{  public static Number parseDecimal(String text){  text=text.replace("_","");  int length=text.length();  char type='x';  if (isNumericTypeSpecifier(text.charAt(length - 1),true)) {    type=Character.toLowerCase(text.charAt(length - 1));    text=text.substring(0,length - 1);    length-=1;  }  BigDecimal value=new BigDecimal(text);switch (type) {case 'f':    if (value.compareTo(MAX_FLOAT) <= 0 && value.compareTo(MIN_FLOAT) >= 0) {      return new Float(text);    }  throw new NumberFormatException("out of range");case 'd':if (value.compareTo(MAX_DOUBLE) <= 0 && value.compareTo(MIN_DOUBLE) >= 0) {  return new Double(text);}throw new NumberFormatException("out of range");case 'g':default :return value;}}  }
class C{  public void testCountGroupByEmpty(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).groupBy("intField").having("intField = 3");  final List<MockModel> list=from.execute();  final boolean exists=from.exists();  assertFalse(exists);  assertFalse(list.size() > 0);}  }
class C{  public void testPosZero(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void hotspot(String group,String handle,int x1,int y1,int x2,int y2){  this.group(group).hotspot(handle,x1,y1,x2,y2);}  }
class C{  public CInsertAndOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Insert AND");  m_tree=tree;  m_parent=parent;}  }
class C{  public Metadata(){  directoryMap=new HashMap();  directoryList=new ArrayList();}  }
class C{  public void dummyConvertYUV420ImageToPackedNV21(byte[] dataCopy,final int w,final int h){  final int y_size=w * h;  final int data_offset=w * h;  for (int i=0; i < y_size; i++) {    dataCopy[i]=(byte)((((i % w) * 255) / w) & 255);    dataCopy[i]=0;  }  for (int i=0; i < h / 2; i++) {    for (int j=0; j < w / 2; j++) {      int offset=data_offset + w * i + j * 2;      dataCopy[offset]=(byte)((255 * i) / (h / 2) & 255);      dataCopy[offset + 1]=(byte)((255 * j) / (w / 2) & 255);    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void requestRedraw(VisualizationTask task,Visualization vis){  updateQueue.add(vis);  synchronizedRedraw();}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.554 -0400",hash_original_method="010EB4E68D4169840D612501A178DC5A",hash_generated_method="BF88707516C13A89332BB74417756DF5") public static Tailer create(File file,TailerListener listener,long delayMillis){  return create(file,listener,delayMillis,false);}  }
class C{  public void println(java.lang.String x){  return;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  public void fireGroupUpdated(final Group groups){  for (int i=0, n=groupListeners.size(); i < n; i++) {    groupListeners.get(i).groupUpdated(groups);  }}  }
class C{  public void testSimpleRemoteDeployment() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-test/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public void removeSelectionPath(TreePath path){  this.getSelectionModel().removeSelectionPath(path);}  }
class C{  @Override public void parse(final Cookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (value == null) {    throw new MalformedCookieException("Missing value for max-age attribute");  }  int age=-1;  try {    age=Integer.parseInt(value);  } catch (  final NumberFormatException e) {    age=-1;  }  if (age < 0) {    throw new MalformedCookieException("Invalid max-age attribute.");  }  cookie.setExpiryDate(new Date(System.currentTimeMillis() + age * 1000L));}  }
class C{  public void removeRow(final int rowToRemoveIndex,boolean fireEvent){  if (getRowCount() <= 1) {    return;  }  rowData.remove(rowToRemoveIndex);  if (fireEvent) {    this.fireTableRowsDeleted(rowToRemoveIndex,rowToRemoveIndex);  }}  }
class C{  protected void wrapUp(){  Integer currentCommandIndex=this.getCurrentCommandIndex(_args);  List maskingViews=(List)_keyMap.get(Constants.MASKING_VIEWS);  _logger.info("ExportProcessor current index is " + currentCommandIndex);  _logger.info("ExportProcessor maskingViews size is " + maskingViews.size());  if ((maskingViews != null) && (maskingViews.size() == (currentCommandIndex + 1))) {    _logger.info("this is the last time ExportProcessor will be called, cleaning up...");    handlePersistence(true);    URI storageSystemUri=(URI)_keyMap.get(Constants.SYSTEMID);    DiscoveryUtils.markInActiveUnManagedExportMask(storageSystemUri,_allCurrentUnManagedExportMaskUris,_dbClient,_partitionManager);  } else {    _logger.info("no need to wrap up yet...");  }}  }
class C{  private void updateElementVarStructureFromParent(ConstraintVariable2 v){  if (elemStructure(v) != ParametricStructure.NONE && fTCModel.getElementVariables(v).size() > 0) {    ParametricStructure t=elemStructure(v);    for (Iterator<CollectionElementVariable2> iterator=fTCModel.getElementVariables(v).values().iterator(); iterator.hasNext(); ) {      CollectionElementVariable2 typeVar=iterator.next();      int declarationTypeVariableIndex=typeVar.getDeclarationTypeVariableIndex();      if (declarationTypeVariableIndex != CollectionElementVariable2.NOT_DECLARED_TYPE_VARIABLE_INDEX)       updateStructureOfVar(typeVar,t.getParameters()[declarationTypeVariableIndex],TypeOperator.Equals);    }  }}  }
class C{  public boolean isEmptyMacAddress(){  for (int i=0; i < macAddress.length; i++) {    if (macAddress[i] != (byte)0x00) {      return false;    }  }  return true;}  }
class C{  public String valueSparseString(int indexOfIndex) throws Exception {  return valueSparse(indexOfIndex);}  }
class C{  public CaseInsensitiveIntMap(){  _keys=new char[256][];  _values=new int[256];  _mask=_keys.length - 1;  _size=0;}  }
class C{  private static int handleDpadHorizontal(int iconIdx,int cntX,int cntY,int[][] matrix,int increment,boolean isRtl){  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int newIconIndex=NOOP;  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIdx) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadHorizontal: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIdx));  }  for (int x=xPos + increment; 0 <= x && x < cntX; x+=increment) {    if ((newIconIndex=inspectMatrix(x,yPos,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) {      return newIconIndex;    }  }  int nextYPos1;  int nextYPos2;  boolean haveCrossedAllAppsColumn1=false;  boolean haveCrossedAllAppsColumn2=false;  int x=-1;  for (int coeff=1; coeff < cntY; coeff++) {    nextYPos1=yPos + coeff * increment;    nextYPos2=yPos - coeff * increment;    x=xPos + increment * coeff;    if (inspectMatrix(x,nextYPos1,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn1=true;    }    if (inspectMatrix(x,nextYPos2,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn2=true;    }    for (; 0 <= x && x < cntX; x+=increment) {      int offset1=haveCrossedAllAppsColumn1 && x < cntX - 1 ? increment : 0;      newIconIndex=inspectMatrix(x,nextYPos1 + offset1,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }      int offset2=haveCrossedAllAppsColumn2 && x < cntX - 1 ? -increment : 0;      newIconIndex=inspectMatrix(x,nextYPos2 + offset2,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }    }  }  if (iconIdx == PIVOT) {    if (isRtl) {      return increment < 0 ? NEXT_PAGE_FIRST_ITEM : PREVIOUS_PAGE_LAST_ITEM;    }    return increment < 0 ? PREVIOUS_PAGE_LAST_ITEM : NEXT_PAGE_FIRST_ITEM;  }  return newIconIndex;}  }
class C{  public static <K,V>CacheConcurrentLIRS<K,V> newInstance(int maxMemory,int averageMemory,int segmentCount,int stackMoveDistance){  return new CacheConcurrentLIRS<K,V>(maxMemory,averageMemory,segmentCount,stackMoveDistance);}  }
class C{  public static void flush(){  getLog().flushBuffer();}  }
class C{  public GraphicAttributes(String prefix,Properties props){  super(prefix,props);}  }
class C{  public static final <T>List<T> findCycleInDirectedGraph(T startNode,Function<T,Iterable<T>> getNextNodes){  final RecursionGuard<T> guard=new RecursionGuard<>();  guard.tryNext(startNode);  return findCycleInDirectedGraph(startNode,getNextNodes,guard);}  }
class C{  public java.util.TimeZone toTimeZone(){  String id=getID();  if (id.length() == 6 && (id.startsWith("+") || id.startsWith("-"))) {    return java.util.TimeZone.getTimeZone("GMT" + getID());  }  return new java.util.SimpleTimeZone(iWallOffset,getID());}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.378 -0500",hash_original_method="22E432D55E87D9B082CFCE15ABC7A111",hash_generated_method="4B41BA1002EC2475651508F5034D86F3") public HCSparseArray(){  this(10);}  }
class C{  public double totalStability(){  double stability=excessOfMass();  double cstab=0.;  for (  TempCluster child : children) {    cstab+=Math.abs(child.totalStability());  }  return stability > cstab ? stability : -cstab;}  }
class C{  public synchronized AttributeSet removeAttribute(AttributeSet old,Object name){  if ((old.getAttributeCount() - 1) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttribute(name);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttribute(name);  return ma;}  }
class C{  public void testRuleBackRefHost() throws IOException, ServletException, InvocationTargetException {  Condition c=new Condition();  c.setType("server-name");  c.setValue("^([^.]+)\\.domain\\.com");  NormalRule rule=new NormalRule();  rule.setFrom("^/(.*)");  rule.setTo("/%1/$1");  rule.setToType("redirect");  rule.setToLast("true");  rule.addCondition(c);  rule.initialise(null);  MockRequest request=new MockRequest("/from");  request.setServerName("server.domain.com");  RewrittenUrl rewrittenUrl=rule.matches(request.getRequestURI(),request,response);  assertEquals("Should have replaced back reference","/server/from",rewrittenUrl.getTarget());  assertTrue(rule.isToContainsBackReference());}  }
class C{  public static URI buildUri(URI baseUri,String... path){  String query=null;  String buildPath=null;  if (path == null || path.length == 0) {    return baseUri;  }  for (  String p : path) {    if (p == null) {      continue;    }    final int indexOfFirstQueryChar=p.indexOf(UriUtils.URI_QUERY_CHAR);    if (indexOfFirstQueryChar >= 0) {      if (indexOfFirstQueryChar < p.length() - 1) {        final String curQuery=p.substring(indexOfFirstQueryChar + 1,p.length());        if (query == null) {          query=curQuery;        } else {          query+=curQuery;        }      }      p=p.substring(0,indexOfFirstQueryChar);    }    p=normalizeUriPath(p);    if (buildPath == null) {      buildPath=p;    } else {      buildPath+=p;    }  }  try {    return new URI(baseUri.getScheme(),baseUri.getUserInfo(),baseUri.getHost(),baseUri.getPort(),buildPath,query,null).normalize();  } catch (  Throwable e) {    Utils.log(Utils.class,Utils.class.getSimpleName(),Level.SEVERE,"Failure building uri %s, %s: %s",baseUri,path,Utils.toString(e));  }  return null;}  }
class C{  public boolean wasInitialized(){  return isInitialized;}  }
class C{  public void doDelete(){  hexEditControl.deleteSelected();}  }
class C{  public static Number minus(Number left,Character right){  return NumberNumberMinus.minus(left,Integer.valueOf(right));}  }
class C{  @RpcMethod public UpgradeResponse upgrade() throws InterruptedException, RpcException {  SyncHandler<UpgradeResponse,AgentControl.AsyncClient.upgrade_call> syncHandler=new SyncHandler<>();  upgrade(syncHandler);  syncHandler.await();  return ResponseValidator.checkUpgradeResponse(syncHandler.getResponse());}  }
class C{  public void updateDataset(DatasetPath datasetPath){  this.abstractObjectName=datasetPath.abstractPath;  this.partitionStart=datasetPath.partitionStart;  this.partitionEnd=datasetPath.partitionEnd;  this.partitionType=datasetPath.partitionType;  this.layoutId=datasetPath.layoutId;}  }
class C{  public ObjectFactory(){}  }
class C{  static public Comparator<RawComparable> makeComparator(String name){  return TFileMeta.makeComparator(name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void storeResourcesConfig(String clusterName,ResourceType resourceType,Map<String,TungstenProperties> resourceList) throws ConfigurationException {  if (getClusterHome() == null) {    throw new ConfigurationException("No cluster.home found from which to configure cluster resources.");  }  for (  TungstenProperties props : resourceList.values()) {    storeResourceConfig(clusterName,resourceType,props);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(2);  ((Element)testNode).setAttribute("class","Y\u03b1");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  state=streetAttr.getSpecified();  assertTrue("acronymClassSpecified",state);}  }
class C{  public SmallerOp_ createSmallerOp_(){  SmallerOp_Impl smallerOp_=new SmallerOp_Impl();  return smallerOp_;}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<BlockPair>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_FOR___TRACE_FOR_1:    setTrace_for_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public AbstractProblem(int numberOfVariables,int numberOfObjectives){  this(numberOfVariables,numberOfObjectives,0);}  }
class C{  @Inline static void compilePutfieldBarrierDouble(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.doubleFieldWriteBarrierMethod);}  }
class C{  public HashMap functionUseageCounts(){  HashMap counts=new HashMap();  if (parsedGeneExpressions == null)   parseGenes();  for (int i=0; i < parsedGeneExpressions.length; i++)   parsedGeneExpressions[i].functionUseageCounts(counts);  return counts;}  }
class C{  public static <T>T eachLine(Path self,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(self,1,closure);}  }
class C{  public static String removeNonNumeric(String text){  return text.replaceAll("[^0-9]","");}  }
class C{  public static void sort(AbstractList array,int[] indices){  for (int i=0; i < indices.length; i++) {    indices[i]=i;  }  int temp;  int j, n=array.size();  for (j=n / 2; j > 0; j--) {    adjust(array,indices,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=indices[0];    indices[0]=indices[j];    indices[j]=temp;    adjust(array,indices,1,j);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ;    if (name.equals("MovementDate"))     p_MovementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("IgnorePrevProduction"))     ignorePrevProduction="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_MovementDate == null)   p_MovementDate=Env.getContextAsDate(getCtx(),"#Date");  if (p_MovementDate == null)   p_MovementDate=new Timestamp(System.currentTimeMillis());  p_C_OrderLine_ID=getRecord_ID();}  }
class C{  public java.util.List createHeaders(String headers) throws java.text.ParseException {  if (headers == null)   throw new NullPointerException("null arg!");  StringMsgParser smp=new StringMsgParser();  SIPHeader shdr=smp.parseSIPHeader(headers);  if (shdr instanceof SIPHeaderList)   return (SIPHeaderList)shdr; else   throw new ParseException("List of headers of this type is not allowed in a message",0);}  }
class C{  private static PortfolioCommands processPortfolioMenuCommand(String cmd){  if (cmd.equals("list") || cmd.equals("l")) {    return FinancePortfoliosClient.PortfolioCommands.QUERY_FEED;  } else   if (cmd.equals("show") || cmd.equals("s")) {    return FinancePortfoliosClient.PortfolioCommands.QUERY_ENTRY;  } else   if (cmd.equals("create") || cmd.equals("c")) {    return FinancePortfoliosClient.PortfolioCommands.CREATE;  } else   if (cmd.equals("update") || cmd.equals("u")) {    return FinancePortfoliosClient.PortfolioCommands.UPDATE;  } else   if (cmd.equals("delete") || cmd.equals("d")) {    return FinancePortfoliosClient.PortfolioCommands.DELETE;  } else   if (cmd.equals("back") || cmd.equals("b")) {    return FinancePortfoliosClient.PortfolioCommands.BACK;  } else   if (cmd.equals("positions") || cmd.equals("p")) {    return FinancePortfoliosClient.PortfolioCommands.POSITIONS;  } else   if (cmd.equals("quit") || cmd.equals("q")) {    return FinancePortfoliosClient.PortfolioCommands.QUIT;  } else {    return FinancePortfoliosClient.PortfolioCommands.HELP;  }}  }
class C{  @Override public int hashCode(){  int hash=7 ^ maxInStreams ^ maxOutStreams;  return hash;}  }
class C{  public void addDirect(StreetSegment streetSegment,ZonedDateTime fromTimeDateZD){  Itinerary itinerary=new Itinerary(streetSegment,access.size(),fromTimeDateZD);  access.add(streetSegment);  this.itinerary.add(itinerary);}  }
class C{  private final void movePieceNotPawn(int from,int to){  final int piece=squares[from];  hashKey^=psHashKeys[piece][from];  hashKey^=psHashKeys[piece][to];  hashKey^=psHashKeys[Piece.EMPTY][from];  hashKey^=psHashKeys[Piece.EMPTY][to];  squares[from]=Piece.EMPTY;  squares[to]=piece;  final long sqMaskF=1L << from;  final long sqMaskT=1L << to;  pieceTypeBB[piece]&=~sqMaskF;  pieceTypeBB[piece]|=sqMaskT;  if (Piece.isWhite(piece)) {    whiteBB&=~sqMaskF;    whiteBB|=sqMaskT;    if (piece == Piece.WKING)     wKingSq=to;  } else {    blackBB&=~sqMaskF;    blackBB|=sqMaskT;    if (piece == Piece.BKING)     bKingSq=to;  }  psScore1[piece]+=Evaluate.psTab1[piece][to] - Evaluate.psTab1[piece][from];  psScore2[piece]+=Evaluate.psTab2[piece][to] - Evaluate.psTab2[piece][from];}  }
class C{  @Override protected BaseTypeValidator createTypeValidator(){  return new KeyForTypeValidator(checker,this,atypeFactory);}  }
class C{  public void addChangeEventListener(Executor executor,WalletChangeEventListener listener){  changeListeners.add(new ListenerRegistration<WalletChangeEventListener>(listener,executor));}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void testGetterInheritance() throws Exception {  ObjectMapper m=new ObjectMapper();  Map<String,Object> result=writeAndMap(m,new SubClassBean());  assertEquals(3,result.size());  assertEquals(Integer.valueOf(1),result.get("x"));  assertEquals(Integer.valueOf(2),result.get("y"));  assertEquals(Integer.valueOf(3),result.get("z"));}  }
class C{  public void testLessOrEqual(){  m_Filter=getFilter("ATT2 <= 4");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(8,result.numInstances());}  }
class C{  @Override public ConfigBuilder newChild(){  return new ConfigBuilderImpl(new HashMap<>(_map));}  }
class C{  public boolean isModernTls(){  return modernTls;}  }
class C{  public static Short valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseShort(string,radix));}  }
class C{  public static void markAsFailed(ModelClient modelClient,DataObject target,String message,Exception e){  if (target instanceof DiscoveredSystemObject) {    DiscoveredSystemObject obj=(DiscoveredSystemObject)target;    obj.setDiscoveryStatus(DataCollectionJobStatus.ERROR.name());    obj.setLastDiscoveryStatusMessage(message);    obj.setLastDiscoveryRunTime(System.currentTimeMillis());    modelClient.save(obj);  }}  }
class C{  public int findClosest(List<BloomFilter<E>> bfList){  if (bfList.isEmpty())   return -1;  double minDistance=this.computeDistance(bfList.get(0));  int minIndex=0;  double currentDistance;  for (int i=1; i < bfList.size(); i++) {    currentDistance=this.computeDistance(bfList.get(i));    if (currentDistance < minDistance) {      minDistance=currentDistance;      minIndex=i;    }  }  return minIndex;}  }
class C{  @Deprecated public NetworkRestRep create(URI virtualArrayId,NetworkCreate input){  return client.post(NetworkRestRep.class,input,PathConstants.NETWORK_BY_VARRAY_URL,virtualArrayId);}  }
class C{  public boolean requiresNetwork(){  return mProperties.mRequiresNetwork;}  }
class C{  public static String generateAlias(String description,int unique){  return generateAliasRoot(description) + Integer.toString(unique) + '_';}  }
class C{  public Media createMedia(InputStream stream,String mimeType,Runnable onCompletion) throws IOException {  return impl.createMedia(stream,mimeType,onCompletion);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedOverflow=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,negatedOverflow));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedOverflow);}  }
class C{  public void insertRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public int taskSize(){  return tasks.size();}  }
class C{  public static <T>int linearSearch(List<? extends T> list,Comparator<T> comparator,T key,int initialGuess){  int guess=initialGuess;  if (guess >= list.size()) {    guess=list.size() - 1;  }  int comparison=comparator.compare(list.get(guess),key);  if (comparison == 0) {    return guess;  }  if (comparison < 0) {    guess++;    while (guess < list.size()) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison > 0) {        return -(guess + 1);      }      guess++;    }    return -(list.size() + 1);  } else {    guess--;    while (guess >= 0) {      comparison=comparator.compare(list.get(guess),key);      if (comparison == 0) {        return guess;      }      if (comparison < 0) {        return -(guess + 2);      }      guess--;    }    return -1;  }}  }
class C{  public BurpCertificate generateSelfSignedCertificate() throws CertificateEncodingException, InvalidKeyException, IllegalStateException, NoSuchAlgorithmException, SignatureException, NoSuchProviderException, InvalidKeySpecException, IOException {  if (privateKey == null || publicKey == null) {    generateKeyPair();  }  burpCertificate=new BurpCertificate(generateX509Certificate(privateKey));  burpCertificate.setPrivateKey(privateKey);  burpCertificate.setPublicKey(publicKey);  burpCertificate.setSource("Self signed");  return burpCertificate;}  }
class C{  public Event(String title,String description,String website,String startDate,String endDate,String calendarUrl,String baseUrl) throws MalformedURLException {  this.setTitle(title);  this.setDescription(description);  this.setWebsite(website);  this.setStartDate(startDate);  this.setEndDate(endDate);  this.setCalendarUrl(calendarUrl);  this.setBaseUrl(baseUrl);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  public boolean addSlot(boolean right,int slot){  if (!active || right != this.right) {    return false;  } else   if (slots.contains(slot)) {    return false;  } else {    slots.add(slot);    return true;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"260030");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfArgAssert","260030 North Ave. Dallas, Texas 98551",childData);}  }
class C{  public Define(String functionName,Class<?> returnType,String variableName,Class<?> variableType){  this(functionName,returnType,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  public NmeaReader createFileReader(File file){  return new NmeaFileReader(file);}  }
class C{  @Override public void onCreate(){  super.onCreate();  registeredShieldsIDs=new ArrayList<>();}  }
class C{  public boolean isDebugging(){  return debugging;}  }
class C{  public LocalDateTime withEra(int era){  return withLocalMillis(getChronology().era().set(getLocalMillis(),era));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ContextData contextData(){  return contextData;}  }
class C{  @TargetApi(21) public Dot(final Context context,final AttributeSet attrs,final int defStyleAttr,final int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  init(attrs,defStyleAttr,defStyleRes);}  }
class C{  private int applySegments(NewElement newElement,Element relatedToNew,int prevElementCloseRight,int level){  final int levelTextLength=level * SPACES_IN_TAB;  final int beforeOpenLeft=1 + prevElementCloseRight + levelTextLength;  final Element parent=relatedToNew.getParent();  if (parent.text == null) {    parent.text=new LinkedList<>();  }  parent.text.add(new Segment(prevElementCloseRight + 1,beforeOpenLeft));  final int openRight=beforeOpenLeft + openTagLength(newElement);  relatedToNew.start=new Segment(beforeOpenLeft + 1,openRight);  if (relatedToNew.isVoid()) {    relatedToNew.end=relatedToNew.start;    return openRight;  }  int childRight=openRight;  if (newElement.hasChildren()) {    final Iterator<NewElement> newChIt=newElement.getChildren().iterator();    final Iterator<Element> chIt=relatedToNew.getChildren().iterator();    while (newChIt.hasNext()) {      childRight=applySegments(newChIt.next(),chIt.next(),childRight,level + 1);    }  } else {    relatedToNew.text=new LinkedList<>();  }  int beforeCloseLeft;  if (newElement.hasChildren()) {    beforeCloseLeft=childRight + levelTextLength + 1;  } else {    beforeCloseLeft=childRight + newElement.getText().length();  }  relatedToNew.text.add(new Segment(childRight + 1,beforeCloseLeft));  relatedToNew.end=new Segment(beforeCloseLeft + 1,beforeCloseLeft + closeTagLength(newElement));  return relatedToNew.end.right;}  }
class C{  @Override public int hashCode(){  return columnName.toLowerCase().hashCode();}  }
class C{  private static CharBuffer grow(CharBuffer buf){  char[] copy=Arrays.copyOf(buf.array(),buf.capacity() * 2);  CharBuffer bigger=CharBuffer.wrap(copy);  bigger.position(buf.position());  bigger.limit(buf.limit());  return bigger;}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  if (caretLineY > -1) {    g.setColor(getCaretMarkerColor());    g.fillRect(0,caretLineY,getWidth(),2);  }}  }
class C{  public List<A> appendList(ListBuffer<A> x){  return appendList(x.toList());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean equals(Object o1,Object o2){  if (o1 == null) {    return o2 == null;  }  return o1.equals(o2);}  }
class C{  public void collectionPhase(short phaseId,boolean primary){  VM.assertions.fail("Collector has not implemented collectionPhase");}  }
class C{  protected Component createTab(String title,Image icon){  RadioButton b=new RadioButton(title != null ? title : "",icon);  radioGroup.add(b);  b.setToggle(true);  b.setTextPosition(BOTTOM);  if (radioGroup.getButtonCount() == 1) {    b.setSelected(true);  }  if (textPosition != -1) {    b.setTextPosition(textPosition);  }  if (b.getIcon() == null && !getUIManager().isThemeConstant("TabEnableAutoImageBool",true)) {    Image d=getUIManager().getThemeImageConstant("TabUnselectedImage");    if (d != null) {      b.setIcon(d);      d=getUIManager().getThemeImageConstant("TabSelectedImage");      if (d != null) {        b.setRolloverIcon(d);        b.setPressedIcon(d);      }    }  }  return b;}  }
class C{  public void testIssue1318() throws Exception {  HtmlPage page=getPage("/faces/composite/issue1318.xhtml");  HtmlSubmitInput button=(HtmlSubmitInput)getInputContainingGivenId(page,"form:arg:n1:n2:command");  assertNotNull(button);  page=button.click();  String message="Action invoked: form:arg:n1:n2:command, arg1: Hello, arg2: World!";  assertTrue(page.asText().contains(message));}  }
class C{  private void quadFullScreenVbo(){  this.vbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public static int readAmount(InputStream is,byte[] buf,int offset,int length) throws IOException {  int read=0;  int len;  while (read < length && (len=is.read(buf,offset + read,length - read)) > 0) {    read+=len;  }  return read;}  }
class C{  public boolean addMember(Principal p){  return true;}  }
class C{  public HelloRequest(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect HelloRequest");  }}  }
class C{  @Override public void paintChildren(Graphics g){  if (npBackground == null)   npBackground=NPIconFactory.getInstance().getFixTipBg();  if (npBackground != null)   npBackground.draw((Graphics2D)g,0,0,this.getWidth(),this.getHeight());  super.paintChildren(g);}  }
class C{  public static String toString(final URI uri,final String encoding) throws IOException {  return IOUtils.toString(uri,Charsets.toCharset(encoding));}  }
class C{  public final synchronized boolean isRegistered(){  return _registered;}  }
class C{  public static Typeface walkwayBold(Context context){  return FontSourceProcessor.process(R.raw.walkway_bold,context);}  }
class C{  public static File[] filesOverRetention(File dir,String prefix,int retention){  return filesOverRetentionAndInactive(dir,prefix,retention,null);}  }
class C{  public static HistoryEvent createRemoved(Recordable recordable,String referrer){  return createRemoved(System.currentTimeMillis(),recordable,referrer);}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public String first(){  scroll(0);  return (null);}  }
class C{  public static final int[] toIntArray(double z[],double t){  int u[]=new int[z.length];  for (int j=0; j < z.length; j++) {    u[j]=(z[j] >= t) ? 1 : 0;  }  return u;}  }
class C{  public static void main(String[] args){  TestTopOption tester=new TestTopOption();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  synchronized static void computePRF(byte[] out,byte[] secret,byte[] str_byts,byte[] seed) throws GeneralSecurityException {  if (sha_mac == null) {    init();  }  SecretKeySpec keyMd5;  SecretKeySpec keySha1;  if ((secret == null) || (secret.length == 0)) {    secret=new byte[8];    keyMd5=new SecretKeySpec(secret,"HmacMD5");    keySha1=new SecretKeySpec(secret,"HmacSHA1");  } else {    int length=secret.length >> 1;    int offset=secret.length & 1;    keyMd5=new SecretKeySpec(secret,0,length + offset,"HmacMD5");    keySha1=new SecretKeySpec(secret,length,length + offset,"HmacSHA1");  }  if (logger != null) {    logger.println("secret[" + secret.length + "]: ");    logger.printAsHex(16,""," ",secret);    logger.println("label[" + str_byts.length + "]: ");    logger.printAsHex(16,""," ",str_byts);    logger.println("seed[" + seed.length + "]: ");    logger.printAsHex(16,""," ",seed);    logger.println("MD5 key:");    logger.printAsHex(16,""," ",keyMd5.getEncoded());    logger.println("SHA1 key:");    logger.printAsHex(16,""," ",keySha1.getEncoded());  }  md5_mac.init(keyMd5);  sha_mac.init(keySha1);  int pos=0;  md5_mac.update(str_byts);  byte[] hash=md5_mac.doFinal(seed);  while (pos < out.length) {    md5_mac.update(hash);    md5_mac.update(str_byts);    md5_mac.update(seed);    if (pos + md5_mac_length < out.length) {      md5_mac.doFinal(out,pos);      pos+=md5_mac_length;    } else {      System.arraycopy(md5_mac.doFinal(),0,out,pos,out.length - pos);      break;    }    hash=md5_mac.doFinal(hash);  }  if (logger != null) {    logger.println("P_MD5:");    logger.printAsHex(md5_mac_length,""," ",out);  }  pos=0;  sha_mac.update(str_byts);  hash=sha_mac.doFinal(seed);  byte[] sha1hash;  while (pos < out.length) {    sha_mac.update(hash);    sha_mac.update(str_byts);    sha1hash=sha_mac.doFinal(seed);    for (int i=0; (i < sha_mac_length) & (pos < out.length); i++) {      out[pos++]^=sha1hash[i];    }    hash=sha_mac.doFinal(hash);  }  if (logger != null) {    logger.println("PRF:");    logger.printAsHex(sha_mac_length,""," ",out);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:36.846 -0500",hash_original_method="3AF156F2799514C47B044D45A77C4F43",hash_generated_method="87FA002C4A38DB8B9913B90D43B60586") @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  ensureList();}  }
class C{  @Override protected boolean isAffected(Collection<QualifiedName> namesImportedByCandidate,IResourceDescription descriptionFromDelta){  if (descriptionFromDelta != null) {    for (    IEObjectDescription desc : descriptionFromDelta.getExportedObjects())     if (namesImportedByCandidate.contains(desc.getName()))     return true;  }  return false;}  }
class C{  public void addQueueListener(QueueListener queueListener){synchronized (queueListeners) {    if (!queueListeners.contains(queueListener)) {      queueListeners.add(queueListener);    }  }}  }
class C{  protected void scanChar(){  if (bp < buflen) {    ch=buf[++bp];    if (ch == '\\') {      convertUnicode();    }  }}  }
class C{  public static RecordEventForSubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForSubscriptionResponse object=new RecordEventForSubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"recordEventForSubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RecordEventForSubscriptionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ZoneOffset) {    return totalSeconds == ((ZoneOffset)obj).totalSeconds;  }  return false;}  }
class C{  protected synchronized Object _remove(int location){  Object ret=super.remove(location);  if (ret != null) {    String id=((LinkProperties)((OMGeometry)ret).getAttribute(OMGraphic.APP_OBJECT)).getProperty(LPC_GRAPHICID);    if (id != null) {      hash.remove(id.intern());      if (Debug.debugging("link")) {        Debug.output("LinkOMGraphicList: Removing graphic " + id);      }    }  }  return ret;}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"ktable-kafka-stream");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.Long().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KTable<String,Long> longs_table=builder.table("longs-table");  longs_table.to("longs-table-out");  longs_table.toStream().to("longs-stream-out");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");  producerConfig.put("value.serializer","org.apache.kafka.common.serialization.LongSerializer");  KafkaProducer<String,Long> producer=new KafkaProducer<String,Long>(producerConfig);  Random rng=new Random(12345L);  String[] keys={"A"};  Long[] values={1L,2L,3L};  try {    while (true) {      String key=keys[rng.nextInt(keys.length)];      Long value=values[rng.nextInt(values.length)];      producer.send(new ProducerRecord<String,Long>("longs-table",key,value));      Thread.sleep(1000L);    }  } catch (  InterruptedException e) {    producer.close();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  ClassFields fields(int i){  return fields.get(i);}  }
class C{  public Connection createConnection() throws IOException, TimeoutException {  return createConnection(null);}  }
class C{  public static void removeAppender(FileAppender a){  A.notNull(a,"a");  fileAppenders.remove(a);}  }
class C{  public boolean isOffScreen(){  return centerY > TOP_Y;}  }
class C{  public static final int sign(double x){  return (x < 0d) ? -1 : 1;}  }
class C{  public FilteredNavigationRecordRequestImpl(final String facetName,final String field,final boolean multiValue,final List<Pair<String,String>> rangeValues){  this.facetName=facetName;  this.field=field;  this.multiValue=multiValue;  this.rangeValue=rangeValues != null && !rangeValues.isEmpty();  this.rangeValues=rangeValues;}  }
class C{  public static void assertEqual(double expected,double actual,double maxRelativeError){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  if (expected != actual) {    assertRelativeErrorNotExceeded(expected,actual,maxRelativeError);  }}  }
class C{  protected RequiredRuntimeLibraryDependencyImpl(){  super();}  }
class C{  @Override public int compareTo(final Fraction other){  if (this == other) {    return 0;  }  if (numerator == other.numerator && denominator == other.denominator) {    return 0;  }  final long first=(long)numerator * (long)other.denominator;  final long second=(long)other.numerator * (long)denominator;  if (first == second) {    return 0;  } else   if (first < second) {    return -1;  } else {    return 1;  }}  }
class C{  public boolean match(String text,int start,int end){  if (null == text)   throw new IllegalArgumentException();  if (start > end)   return false;  if (fIgnoreWildCards)   return (end - start == fLength) && fPattern.regionMatches(fIgnoreCase,0,text,start,fLength);  int segCount=fSegments.length;  if (segCount == 0 && (fHasLeadingStar || fHasTrailingStar))   return true;  if (start == end)   return fLength == 0;  if (fLength == 0)   return start == end;  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  int tCurPos=start;  int bound=end - fBound;  if (bound < 0)   return false;  int i=0;  String current=fSegments[i];  int segLength=current.length();  if (!fHasLeadingStar) {    if (!regExpRegionMatches(text,start,current,0,segLength)) {      return false;    } else {      ++i;      tCurPos=tCurPos + segLength;    }  }  if ((fSegments.length == 1) && (!fHasLeadingStar) && (!fHasTrailingStar)) {    return tCurPos == end;  }  while (i < segCount) {    current=fSegments[i];    int currentMatch;    int k=current.indexOf(fSingleWildCard);    if (k < 0) {      currentMatch=textPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    } else {      currentMatch=regExpPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    }    tCurPos=currentMatch + current.length();    i++;  }  if (!fHasTrailingStar && tCurPos != end) {    int clen=current.length();    return regExpRegionMatches(text,end - clen,current,0,clen);  }  return i == segCount;}  }
class C{  @SuppressWarnings({"unchecked"}) private void inheritValues(Values fromParent){  Object[] table=this.table;  for (int i=table.length - 2; i >= 0; i-=2) {    Object k=table[i];    if (k == null || k == TOMBSTONE) {      continue;    }    Reference<InheritableThreadLocal<?>> reference=(Reference<InheritableThreadLocal<?>>)k;    InheritableThreadLocal key=reference.get();    if (key != null) {      table[i + 1]=key.childValue(fromParent.table[i + 1]);    } else {      table[i]=TOMBSTONE;      table[i + 1]=null;      fromParent.table[i]=TOMBSTONE;      fromParent.table[i + 1]=null;      tombstones++;      fromParent.tombstones++;      size--;      fromParent.size--;    }  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public void incl(int x){  Assert.check(currentState != BitsState.UNKNOWN);  Assert.check(x >= 0,"Value of x " + x);  sizeTo((x >>> wordshift) + 1);  bits[x >>> wordshift]=bits[x >>> wordshift] | (1 << (x & wordmask));  currentState=BitsState.NORMAL;}  }
class C{  public static void openFileInEditor(String filePath,TaskRepository taskRepository){  Repository repository=AppraisePluginUtils.getGitRepoForRepository(taskRepository);  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();  String fullPath=new Path(repository.getWorkTree().getAbsolutePath()).append(filePath).toOSString();  File file=new File(fullPath);  if (!file.exists()) {    AppraiseUiPlugin.logError("File to open not found: " + fullPath);    return;  }  IWorkbenchPage page=window.getActivePage();  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IFile fileResource=root.getFileForLocation(new Path(file.getAbsolutePath()));  if (fileResource != null) {    try {      IDE.openEditor(page,fileResource,OpenStrategy.activateOnOpen());    } catch (    PartInitException e) {      AppraiseUiPlugin.logError("Failed to open editor for " + filePath,e);    }  } else {    IFileStore store=EFS.getLocalFileSystem().getStore(new Path(file.getAbsolutePath()));    try {      IDE.openEditor(page,new FileStoreEditorInput(store),EditorsUI.DEFAULT_TEXT_EDITOR_ID);    } catch (    PartInitException e) {      AppraiseUiPlugin.logError("Failed to open editor for " + filePath,e);    }  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public TermQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthOptionPaneUI();}  }
class C{  public static double[][] multiply(final double[][] A,final double[][] B){  int aRows=A.length;  int aCols=A[0].length;  int bRows=B.length;  int bCols=B[0].length;  if (aCols != bRows)   throw new IllegalArgumentException(" A.cols (" + aCols + ") != B.rows ("+ bRows+ ") ");  double C[][]=new double[aRows][bCols];  for (int i=0; i < aRows; i++) {    for (int k=0; k < aCols; k++) {      for (int j=0; j < bCols; j++) {        C[i][j]+=A[i][k] * B[k][j];      }    }  }  return C;}  }
class C{  public static String tokenInfoFlagsToString(long flags){  return tokenInfoFlags.toString(flags);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    final double log2=0.301029995663981;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z) / log2);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DelegatingServletOutputStream(OutputStream targetStream){  this.targetStream=targetStream;}  }
class C{  protected void enhanceCoordinate(Matcher matcher,Coordinate loc){}  }
class C{  public String toString(){  return toShortString();}  }
class C{  public static int min(int[] a){  int min=Integer.MAX_VALUE;  for (int i=0; i < a.length; i++) {    if (a[i] < min)     min=a[i];  }  return min;}  }
class C{  public Object fromRaw(final Object rawValue,final String requiredType,final ImpExColumn impExColumn){  if (rawValue != null) {    return String.valueOf(rawValue);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.511 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public static void writeTransitLines2Shape(String shapeFileOutName,TransitSchedule transitSchedule,Collection<Id> lines2write,Map<Id,SortedMap<String,Object>> attributes,String targetCoordinateSystem){  if (!(attributes == null) && (attributes.size() > 0)) {    for (    SortedMap<String,Object> m : attributes.values()) {      initLineFeatureType("transitLines",m,targetCoordinateSystem);      break;    }  } else {    initLineFeatureType("transitLines",null,targetCoordinateSystem);  }  write(createRouteFeatures(transitSchedule,lines2write,attributes),shapeFileOutName);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public static void init(Context context,final String client_id){  if (context == null)   throw new IllegalArgumentException("context cannot be null");  if (client_id == null)   throw new IllegalArgumentException("client_id cannot be null");  Soundroid.client_id=client_id;  final OkHttpClient okHttpClient=new OkHttpClient.Builder().addInterceptor(new AuthInterceptor(Soundroid.client_id)).build();  final Retrofit retrofit=new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create()).baseUrl(ENDPOINT).client(okHttpClient).build();  soundcloudService=retrofit.create(SoundcloudService.class);}  }
class C{  public boolean add(Object attrVal){  values.addElement(attrVal);  return true;}  }
class C{  public void afterToggleProtection(){  notifySelectionChangedListeners();}  }
class C{  @Override public synchronized Transaction onClose(final Consumer<Transaction> consumer){  throw new UnsupportedOperationException("Threaded transactions are open when created and in manual mode");}  }
class C{  public void addTuple(Map<K,V> tuple,Map<K,MutableDouble> map){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    if (!doprocessKey(e.getKey()) || (e.getValue() == null)) {      continue;    }    MutableDouble val=map.get(e.getKey());    if (val == null) {      val=new MutableDouble(0.0);      map.put(cloneKey(e.getKey()),val);    }    val.add(e.getValue().doubleValue());  }}  }
class C{  public AISBinderContext(AkibanInformationSchema ais,String defaultSchemaName){  this.ais=ais;  this.defaultSchemaName=defaultSchemaName;  properties=new Properties();  properties.put("database",defaultSchemaName);  initParser();  setBinderAndTypeComputer(new AISBinder(ais,defaultSchemaName),new FunctionsTypeComputer(TypesRegistryServiceImpl.createRegistryService()));}  }
class C{  private static AnnotationType inferTargetMetaInfo(Attribute.Compound a,Symbol s){  return AnnotationType.DECLARATION;}  }
class C{  public ToStringBuilder append(short value){  style.append(buffer,null,value);  return this;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case MappingPackage.MAPPING_MODEL:    return createMappingModel();case MappingPackage.INFO_MODEL_MAPPING_MODEL:  return createInfoModelMappingModel();case MappingPackage.INFO_MODEL_MAPPING_RULE:return createInfoModelMappingRule();case MappingPackage.INFOMODEL_SOURCE:return createInfomodelSource();case MappingPackage.INFO_MODEL_PROPERTY_SOURCE:return createInfoModelPropertySource();case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE:return createInfoModelAttributeSource();case MappingPackage.FUNCTION_BLOCK_MAPPING_MODEL:return createFunctionBlockMappingModel();case MappingPackage.FUNCTION_BLOCK_MAPPING_RULE:return createFunctionBlockMappingRule();case MappingPackage.FUNCTION_BLOCK_SOURCE:return createFunctionBlockSource();case MappingPackage.FUNCTION_BLOCK_PROPERTY_SOURCE:return createFunctionBlockPropertySource();case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE:return createFunctionBlockAttributeSource();case MappingPackage.CONFIGURATION_SOURCE:return createConfigurationSource();case MappingPackage.STATUS_SOURCE:return createStatusSource();case MappingPackage.OPERATION_SOURCE:return createOperationSource();case MappingPackage.EVENT_SOURCE:return createEventSource();case MappingPackage.ENTITY_MAPPING_MODEL:return createEntityMappingModel();case MappingPackage.ENTITY_MAPPING_RULE:return createEntityMappingRule();case MappingPackage.ENTITY_SOURCE:return createEntitySource();case MappingPackage.ENTITY_PROPERTY_SOURCE:return createEntityPropertySource();case MappingPackage.ENTITY_ATTRIBUTE_SOURCE:return createEntityAttributeSource();case MappingPackage.ENUM_MAPPING_MODEL:return createEnumMappingModel();case MappingPackage.ENUM_MAPPING_RULE:return createEnumMappingRule();case MappingPackage.ENUM_SOURCE:return createEnumSource();case MappingPackage.ENUM_PROPERTY_SOURCE:return createEnumPropertySource();case MappingPackage.ENUM_ATTRIBUTE_SOURCE:return createEnumAttributeSource();case MappingPackage.DATA_TYPE_MAPPING_MODEL:return createDataTypeMappingModel();case MappingPackage.TARGET:return createTarget();case MappingPackage.REFERENCE_TARGET:return createReferenceTarget();case MappingPackage.STEREO_TYPE_TARGET:return createStereoTypeTarget();case MappingPackage.ATTRIBUTE:return createAttribute();case MappingPackage.SOURCE:return createSource();case MappingPackage.FAULT_SOURCE:return createFaultSource();case MappingPackage.MAPPING_RULE:return createMappingRule();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public DateRangeBuilder addRange(String key,Object from,Object to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  public IGameMove bestMove(IGameState s,IPlayer player,IPlayer opponent){  this.state=s.copy();  int alpha=MoveEvaluation.minimum();  int beta=MoveEvaluation.maximum();  IGameState copy=null;  if (debug != null) {    copy=state.copy();    debug.visitNode(new Legend("AlphaBeta (ply:" + ply + ", player:"+ player+ ")"));    debugHome=new Stack<AlphaBetaDebugNode>();    debugGame=new Stack<IGameState>();    debugGame.push(copy);    debugHome.push(new AlphaBetaDebugNode(alpha,beta));    debug.visitNode(debugGame.peek());    debug.markStart(debugGame.peek());    debug.visitNode(debugHome.peek());    debug.visitEdge(debugGame.peek(),debugHome.peek());  }  IGameMove response=null;  for (Iterator<IGameMove> it=player.validMoves(state).iterator(); it.hasNext(); ) {    IGameMove move=it.next();    move.execute(state);    state.incrementCounter();    if (debug != null) {      debugGame.push(state.copy());      debug.visitNode(debugGame.peek());      debug.visitEdge(debugHome.peek(),debugGame.peek());    }    int score=-alphabeta(ply - 1,opponent,player,alpha,beta);    move.undo(state);    debugGame.pop();    if (score > alpha) {      alpha=score;      response=move;    }    if (alpha >= beta) {      if (debug != null) {        AlphaBetaDebugNode mmn=debugHome.pop();        mmn.value(alpha);        AlphaPrune apn=new AlphaPrune();        debug.visitNode(apn);        debug.visitEdge(mmn,apn);      }      return response;    }  }  if (debug != null) {    AlphaBetaDebugNode mmn=debugHome.pop();    mmn.value(alpha);    debugGame.pop();  }  return response;}  }
class C{  public static int[] parseCIDR(String cidr){  int ret[]=new int[2];  String[] parts=cidr.split("/");  if (parts.length == 1) {    throw new IllegalArgumentException("CIDR mask bits must be specified.");  }  String cidrPrefix=parts[0].trim();  int cidrMaskBits=0;  if (parts.length == 2) {    try {      cidrMaskBits=Integer.parseInt(parts[1].trim());    } catch (    Exception e) {      throw new NumberFormatException("CIDR mask bits must be specified as a number(0 ~ 32).");    }    if (cidrMaskBits < 0 || cidrMaskBits > 32) {      throw new NumberFormatException("CIDR mask bits must be 0 <= value <= 32.");    }  }  ret[0]=IPv4.toIPv4Address(cidrPrefix);  ret[1]=cidrMaskBits;  return ret;}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void paint(Graphics g){  Graphics2D g2D=(Graphics2D)g;  Dimension size=getPreferredSize();  Rectangle clipBounds=g2D.getClipBounds();  int w=size.width;  int h=size.height;  g2D.setPaint(Color.white);  g2D.fill3DRect(1,1,w - 2,h - 2,true);  if (m_timePanel == null)   return;  int headerHeight=m_timePanel.getHeaderHeight();  g2D.setStroke(VScheduleTimePanel.getStroke(true));  for (int i=1; i < m_timePanel.getSlotCount(); i++) {    g2D.setPaint(Color.gray);    int yy=m_timePanel.getSlotYStart(i);    g2D.drawLine(1,yy,w - 2,yy);  }  g2D.setStroke(VScheduleTimePanel.getStroke(false));  for (int i=0; i < m_noDays; i++) {    Rectangle where=new Rectangle(i * m_dayWidth,0,m_dayWidth,headerHeight);    if (!where.intersects(clipBounds))     continue;    CompiereUtils.paint3Deffect(g2D,where,false,true);    g2D.setPaint(Color.blue);    TextLayout layout=new TextLayout(getHeading(i),g2D.getFont(),g2D.getFontRenderContext());    float hh=layout.getAscent() + layout.getDescent();    layout.draw(g2D,where.x + (m_dayWidth - layout.getAdvance()) / 2,((where.height - hh) / 2) + layout.getAscent());    g2D.setPaint(Color.black);    int xEnd=(i + 1) * m_dayWidth;    g2D.drawLine(xEnd,1,xEnd,h - 1);  }  for (int i=0; m_slots != null && i < m_slots.length; i++) {    if (!m_where[i].intersects(clipBounds))     continue;    g2D.setColor(m_slots[i].getColor(true));    g2D.fill(m_where[i]);    String string=m_slots[i].getInfoNameDescription();    AttributedString as=new AttributedString(string);    as.addAttribute(TextAttribute.FONT,g2D.getFont());    as.addAttribute(TextAttribute.FOREGROUND,m_slots[i].getColor(false));    int startIt=string.indexOf('(');    int endIt=string.lastIndexOf(')');    if (startIt != -1 && endIt != -1)     as.addAttribute(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE,startIt,endIt);    AttributedCharacterIterator aci=as.getIterator();    LineBreakMeasurer measurer=new LineBreakMeasurer(aci,g2D.getFontRenderContext());    float wrappingWidth=m_where[i].width - (2 * MARGIN);    float curY=m_where[i].y + MARGIN;    TextLayout layout=null;    int yEnd=m_where[i].y + m_where[i].height;    while (measurer.getPosition() < aci.getEndIndex() && curY < yEnd) {      layout=measurer.nextLayout(wrappingWidth);      curY+=layout.getAscent();      if (curY < yEnd)       layout.draw(g2D,m_where[i].x + MARGIN,curY);    }  }  g2D.setPaint(Color.black);  g2D.setStroke(VScheduleTimePanel.getStroke(false));  g2D.drawLine(1,1,1,h - 1);  g2D.drawLine(1,1,w - 1,1);  g2D.drawLine(1,headerHeight,w - 1,headerHeight);  g2D.setStroke(VScheduleTimePanel.getStroke(false));  g2D.drawLine(w - 1,1,w - 1,h - 1);  g2D.drawLine(1,h - 1,w - 1,h - 1);}  }
class C{  protected List<String> createEntity(JSONArray entities) throws AtlasServiceException {  LOG.debug("Creating entities: {}",entities);  JSONObject response=callAPI(API.CREATE_ENTITY,entities.toString());  List<String> results=extractEntityResult(response).getCreatedEntities();  LOG.debug("Create entities returned results: {}",results);  return results;}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  public static boolean isStatusSuccess(int status){  return (status >= 200 && status < 300);}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  public IntroFragmentModel(IntroFragment fragment){  this.fragment=fragment;}  }
class C{  public MutableString(){  this(2);}  }
class C{  @Override public void onEvent(ProjectEvent event){  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {    update(event);  }}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__BODY:setBody((Block)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__LOK:set_lok((LocalArgumentsVariable)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:setDefinedType((Type)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends FormalParameter>)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__GENERATOR:setGenerator((Boolean)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:setDeclaredAsync((Boolean)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.FUNCTION_DECLARATION__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DateTimeFormatterBuilder appendMonthOfYear(int minDigits){  return appendDecimal(DateTimeFieldType.monthOfYear(),minDigits,2);}  }
class C{  public synchronized boolean remove(final CacheKey key,final EncodedImage encodedImage){  Preconditions.checkNotNull(key);  Preconditions.checkNotNull(encodedImage);  Preconditions.checkArgument(EncodedImage.isValid(encodedImage));  final EncodedImage oldValue=mMap.get(key);  if (oldValue == null) {    return false;  }  CloseableReference<PooledByteBuffer> oldRef=oldValue.getByteBufferRef();  CloseableReference<PooledByteBuffer> ref=encodedImage.getByteBufferRef();  try {    if (oldRef == null || ref == null || oldRef.get() != ref.get()) {      return false;    }    mMap.remove(key);  }  finally {    CloseableReference.closeSafely(ref);    CloseableReference.closeSafely(oldRef);    EncodedImage.closeSafely(oldValue);  }  logStats();  return true;}  }
class C{  public static String createLinkHeader(Page<?> page,URI uri){  requireNonNull(page,"Required non-null page");  requireNonNull(uri,"Required non-null uri");  final ArrayList<Pair<String,Page.PageRef>> pageRefs=new ArrayList<>(4);  pageRefs.add(Pair.of("first",page.getFirstPageRef()));  pageRefs.add(Pair.of("last",page.getLastPageRef()));  if (page.hasPreviousPage()) {    pageRefs.add(Pair.of("prev",page.getPreviousPageRef()));  }  if (page.hasNextPage()) {    pageRefs.add(Pair.of("next",page.getNextPageRef()));  }  final UriBuilder ub=UriBuilder.fromUri(uri);  return pageRefs.stream().map(null).collect(joining(LINK_HEADER_SEPARATOR));}  }
class C{  @Override public void updateClassifier(Instance inst) throws Exception {  if (inst.classIsMissing()) {    return;  }  if (m_root == null) {    m_root=newLearningNode();  }  LeafNode l=m_root.leafForInstance(inst,null,null);  HNode actualNode=l.m_theNode;  if (actualNode == null) {    actualNode=new ActiveHNode();    l.m_parentNode.setChild(l.m_parentBranch,actualNode);  }  if (actualNode instanceof LearningNode) {    actualNode.updateNode(inst);    if (actualNode instanceof ActiveHNode) {      double totalWeight=actualNode.totalWeight();      if (totalWeight - ((ActiveHNode)actualNode).m_weightSeenAtLastSplitEval > m_gracePeriod) {        trySplit((ActiveHNode)actualNode,l.m_parentNode,l.m_parentBranch);        ((ActiveHNode)actualNode).m_weightSeenAtLastSplitEval=totalWeight;      }    }  }}  }
class C{  public void initialize() throws IOException {  cache.initialize();}  }
class C{  public DataTruncation(int index,boolean parameter,boolean read,int dataSize,int transferSize,Throwable cause){  super(THE_REASON,read ? THE_SQLSTATE_READ : THE_SQLSTATE_WRITE,THE_ERROR_CODE,cause);  this.index=index;  this.parameter=parameter;  this.read=read;  this.dataSize=dataSize;  this.transferSize=transferSize;}  }
class C{  private boolean backtrackForMonotoneWithPrevious(Featurizable<IString,String> f){  int indexLeftCurrentPhrase=fStart(f) - 1;  if (indexLeftCurrentPhrase < 0) {    return (f.prior == null);  } else   if (f.prior == null) {    return false;  }  if (fStart(f) < fStart(f.prior))   return false;  int indexRightPreviousPhrase=fEnd(f.prior) + 1;  if (indexRightPreviousPhrase - 1 == indexLeftCurrentPhrase)   return true;  CoverageSet fCoverage=f.derivation.sourceCoverage;  for (int i=indexRightPreviousPhrase; i <= indexLeftCurrentPhrase; ++i) {    if (!fCoverage.get(i))     return false;  }  if (fCoverage.nextClearBit(0) > indexLeftCurrentPhrase && fCoverage.nextSetBit(fEnd(f) + 1) < 0)   return true;  Featurizable<IString,String> tmp_f=f.prior;  tmpCoverage.clear();  boolean foundAdjPhrase=false;  while (true) {    if (fEnd(tmp_f) == indexLeftCurrentPhrase)     foundAdjPhrase=true;    int fStart=fStart(tmp_f);    int fEnd=fEnd(tmp_f);    tmpCoverage.set(fStart,fEnd + 1);    if (foundAdjPhrase && contiguous(tmpCoverage))     break;    if (fStart > indexLeftCurrentPhrase)     return false;    tmp_f=tmp_f.prior;    if (tmp_f == null)     return false;  }  return true;}  }
class C{  public static List execute(ExecutablePool pool,String region,List keys,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestListOpImpl(region,keys,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOnQueuesAndReturnPrimaryResult(op);}  }
class C{  public DNSOutgoing(int flags){  this(flags,true,DNSConstants.MAX_MSG_TYPICAL);}  }
class C{  protected static boolean isMarketplaceLogin(HttpServletRequest httpRequest){  if (isMarketplaceRequest(httpRequest)) {    return true;  }  String loginType=(String)httpRequest.getAttribute(Constants.REQ_ATTR_SERVICE_LOGIN_TYPE);  return Constants.REQ_ATTR_LOGIN_TYPE_MPL.equals(loginType);}  }
class C{  public Ends(){  super("text_information.ends");}  }
class C{  public String toString(@Nullable AbstractBlockChain chain){  StringBuilder s=new StringBuilder();  s.append("  ").append(getHashAsString()).append('\n');  if (hasConfidence())   s.append("  confidence: ").append(getConfidence()).append('\n');  if (isTimeLocked()) {    s.append("  time locked until ");    if (lockTime < LOCKTIME_THRESHOLD) {      s.append("block ").append(lockTime);      if (chain != null) {        s.append(" (estimated to be reached at ").append(Utils.dateTimeFormat(chain.estimateBlockTime((int)lockTime))).append(')');      }    } else {      s.append(Utils.dateTimeFormat(lockTime * 1000));    }    s.append('\n');  }  if (isOptInFullRBF()) {    s.append("  opts into full replace-by-fee\n");  }  if (inputs.size() == 0) {    s.append("  INCOMPLETE: No inputs!\n");    return s.toString();  }  if (isCoinBase()) {    String script;    String script2;    try {      script=inputs.get(0).getScriptSig().toString();      script2=outputs.get(0).getScriptPubKey().toString();    } catch (    ScriptException e) {      script="???";      script2="???";    }    s.append("     == COINBASE TXN (scriptSig ").append(script).append(")  (scriptPubKey ").append(script2).append(")\n");    return s.toString();  }  for (  TransactionInput in : inputs) {    s.append("     ");    s.append("in   ");    try {      Script scriptSig=in.getScriptSig();      s.append(scriptSig);      if (in.getValue() != null)       s.append(" ").append(in.getValue().toFriendlyString());      s.append("\n          ");      s.append("outpoint:");      final TransactionOutPoint outpoint=in.getOutpoint();      s.append(outpoint.toString());      final TransactionOutput connectedOutput=outpoint.getConnectedOutput();      if (connectedOutput != null) {        Script scriptPubKey=connectedOutput.getScriptPubKey();        if (scriptPubKey.isSentToAddress() || scriptPubKey.isPayToScriptHash()) {          s.append(" hash160:");          s.append(Utils.HEX.encode(scriptPubKey.getPubKeyHash()));        }      }      if (in.hasSequence()) {        s.append("\n          sequence:").append(Long.toHexString(in.getSequenceNumber()));        if (in.isOptInFullRBF())         s.append(", opts into full RBF");      }    } catch (    Exception e) {      s.append("[exception: ").append(e.getMessage()).append("]");    }    s.append('\n');  }  for (  TransactionOutput out : outputs) {    s.append("     ");    s.append("out  ");    try {      Script scriptPubKey=out.getScriptPubKey();      s.append(scriptPubKey);      s.append(" ");      s.append(out.getValue().toFriendlyString());      if (!out.isAvailableForSpending()) {        s.append(" Spent");      }      if (out.getSpentBy() != null) {        s.append(" by ");        s.append(out.getSpentBy().getParentTransaction().getHashAsString());      }    } catch (    Exception e) {      s.append("[exception: ").append(e.getMessage()).append("]");    }    s.append('\n');  }  final Coin fee=getFee();  if (fee != null) {    final int size=unsafeBitcoinSerialize().length;    s.append("     fee  ").append(fee.multiply(1000).divide(size).toFriendlyString()).append("/kB, ").append(fee.toFriendlyString()).append(" for ").append(size).append(" bytes\n");  }  if (purpose != null)   s.append("     prps ").append(purpose).append('\n');  return s.toString();}  }
class C{  public static void printEnvironment(){  printEnvironment(System.err);}  }
class C{  static public void main(String[] args) throws ParseException {  Vector paths=parse(args[0]);  for (int i=0; i < paths.size(); i++) {    if (i != 0)     System.out.println("---");    Path path=(Path)paths.elementAt(i);    if (path.isRoot())     System.out.println("/");    for (int j=0; j < path.getNames().size(); j++)     System.out.println(path.getNames().elementAt(j));  }}  }
class C{  public UmlStateMachineModelFactory(String location){  Assert.notNull(location,"Location must be set");  this.location=location;}  }
class C{  public void put(K key,V val){synchronized (this) {    if (map.containsKey(key))     return;    Map<K,V> map0=new HashMap<>(map);    map0.put(key,val);    map=map0;  }}  }
class C{  public static String toCamelCase(String s){  return s.substring(0,1).toLowerCase() + s.substring(1);}  }
class C{  public static BigInteger binomial(int n,int t){  BigInteger result=ONE;  if (n == 0) {    if (t == 0) {      return result;    }    return ZERO;  }  if (t > (n >>> 1)) {    t=n - t;  }  for (int i=1; i <= t; i++) {    result=(result.multiply(BigInteger.valueOf(n - (i - 1)))).divide(BigInteger.valueOf(i));  }  return result;}  }
class C{  public static void reveal(View v){  int cx=v.getWidth() / 2;  int cy=v.getHeight() / 2;  int finalRadius=Math.max(v.getWidth(),v.getHeight());  Animator anim=null;  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {    anim=android.view.ViewAnimationUtils.createCircularReveal(v,cx,cy,0,finalRadius);  }  v.setVisibility(View.VISIBLE);  anim.setDuration(400);  anim.setInterpolator(new AccelerateDecelerateInterpolator());  anim.start();}  }
class C{  void _m10(float m10){  this.m10=m10;}  }
class C{  public void afterProcessViewEvent(@Observes AfterProcessViewEvent event){  if (request.getAttribute(SCOPE_ID) != null) {    String scopeId=(String)request.getAttribute(SCOPE_ID);    HttpSession session=request.getSession();    final String sessionKey=SCOPE_ID + "-" + scopeId;    Map<String,Object> scopeMap=(Map<String,Object>)session.getAttribute(sessionKey);    if (null != scopeMap) {      scopeMap.entrySet().stream().forEach(null);      scopeMap.clear();      session.removeAttribute(sessionKey);    }  }}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void configure(JobConf conf){  this.conf=conf;  timestamp=System.currentTimeMillis();}  }
class C{  public byte[] readSector(int sectorNumber,byte[] buffer) throws IOException {  if (buffer == null || buffer.length != sectorLength) {    buffer=new byte[sectorLength];  }  readSector(sectorNumber,buffer,0);  return buffer;}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public static void registerPluginAnalysisEngines(DetectorFactoryCollection detectorFactoryCollection,IAnalysisCache analysisCache) throws IOException {  for (Iterator<Plugin> i=detectorFactoryCollection.pluginIterator(); i.hasNext(); ) {    Plugin plugin=i.next();    Class<? extends IAnalysisEngineRegistrar> engineRegistrarClass=plugin.getEngineRegistrarClass();    if (engineRegistrarClass != null) {      try {        IAnalysisEngineRegistrar engineRegistrar=engineRegistrarClass.newInstance();        engineRegistrar.registerAnalysisEngines(analysisCache);      } catch (      InstantiationException e) {        IOException ioe=new IOException("Could not create analysis engine registrar for plugin " + plugin.getPluginId());        ioe.initCause(e);        throw ioe;      }catch (      IllegalAccessException e) {        IOException ioe=new IOException("Could not create analysis engine registrar for plugin " + plugin.getPluginId());        ioe.initCause(e);        throw ioe;      }    }  }}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <V>V removeMeta(int key){synchronized (this) {    if (data == null || data.length <= key)     return null;    V old=(V)data[key];    data[key]=null;    return old;  }}  }
class C{  public String resolveType(ContentResolver resolver){  if (mType != null) {    return mType;  }  if (mData != null) {    if ("content".equals(mData.getScheme())) {      return resolver.getType(mData);    }  }  return null;}  }
class C{  protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (predictorMissing) {    print(" predictor");    if (classMissing) {      print(" and");    }  }  if (classMissing) {    print(" class");  }  print(" values");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("missing");  accepts.add("value");  accepts.add("train");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  public NetworkPermission(String name,String actions){  super(name,actions);}  }
class C{  public Integer findRuleByMaxVersion(final Strategy strategy) throws PersistentModelException {  return m_ruleHome.findByMaxVersion(strategy);}  }
class C{  public static long log(@Nullable IgniteLogger log,String msg,Class<?> clazz,long start){  final long end=U.currentTimeMillis();  log0(log,end,String.format("[%s]: %s, duration: %s",clazz.getSimpleName(),msg,formatDuration(end - start)));  return end;}  }
class C{  public ZkDataTraversalException(String message){  super(message);}  }
class C{  private void saveDynamicActions(FacesContext context,StateContext stateContext,Map<String,Object> stateMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletPartialStateManagementStrategy.saveDynamicActions");  }  List<ComponentStruct> actions=stateContext.getDynamicActions();  HashMap<String,UIComponent> componentMap=stateContext.getDynamicComponents();  if (actions != null) {    List<Object> savedActions=new ArrayList<>(actions.size());    for (    ComponentStruct action : actions) {      UIComponent component=componentMap.get(action.clientId);      if (component == null && context.isProjectStage(ProjectStage.Development)) {        LOGGER.log(Level.WARNING,"Unable to save dynamic action with clientId ''{0}'' because the UIComponent cannot be found",action.clientId);      }      if (component != null) {        savedActions.add(action.saveState(context));      }    }    stateMap.put(DYNAMIC_ACTIONS,savedActions);  }}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public void initialize(Context context,boolean is24HourMode,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int color=res.getColor(R.color.blue);  TypedArray attrArray=getContext().getTheme().obtainStyledAttributes(R.styleable.DateTimePicker);  int attrCount=attrArray.getIndexCount();  for (int i=0; i < attrCount; i++) {    int attr=attrArray.getIndex(i);switch (attr) {case R.styleable.DateTimePicker_hightlightedTextColor:      ColorStateList stateList=attrArray.getColorStateList(attr);    color=stateList.getColorForState(new int[]{android.R.attr.state_selected},stateList.getDefaultColor());  break;}}mPaint.setColor(color);mPaint.setAntiAlias(true);mSelectionAlpha=SELECTED_ALPHA;mIs24HourMode=is24HourMode;if (is24HourMode) {mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier_24HourMode));} else {mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier));mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.ampm_circle_radius_multiplier));}mHasInnerCircle=hasInnerCircle;if (hasInnerCircle) {mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_inner));mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_outer));} else {mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_normal));}mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.selection_radius_multiplier));mAnimationRadiusMultiplier=1;mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));mInvalidateUpdateListener=new InvalidateUpdateListener();setSelection(selectionDegrees,isInnerCircle,false);mIsInitialized=true;}  }
class C{  private InferenceResult inferFromAssignmentEqualities(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){  Set<FIsA> afInitialAssignmentConstraints=createInitialAssignmentConstraints(assignedTo,boxedReturnType,typeFactory,targets);  Set<TUConstraint> tuInitialAssignmentConstraints=afToTuConstraints(afInitialAssignmentConstraints,targets);  ConstraintMap initialAssignmentConstraints=constraintMapBuilder.build(targets,tuInitialAssignmentConstraints,typeFactory);  return equalitiesSolver.solveEqualities(targets,initialAssignmentConstraints,typeFactory);}  }
class C{  private static int[] craftSuppliers(int[][] costs){  int len=costs.length;  int suppliers[]=new int[len];  for (int i=0; i < len; i++) {    suppliers[i]=1;  }  return suppliers;}  }
class C{  protected ZkWriteCommand updateStateNew(ClusterState clusterState,final ZkNodeProps message){  String collectionName=message.getStr(ZkStateReader.COLLECTION_PROP);  if (!checkCollectionKeyExistence(message))   return ZkStateWriter.NO_OP;  String sliceName=message.getStr(ZkStateReader.SHARD_ID_PROP);  if (collectionName == null || sliceName == null) {    log.error("Invalid collection and slice {}",message);    return ZkStateWriter.NO_OP;  }  DocCollection collection=clusterState.getCollectionOrNull(collectionName);  Slice slice=collection != null ? collection.getSlice(sliceName) : null;  if (slice == null) {    log.error("No such slice exists {}",message);    return ZkStateWriter.NO_OP;  }  return updateState(clusterState,message);}  }
class C{  private void testServlet(String urlPath) throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + urlPath);  InputStream responseStream=url.openConnection().getInputStream();  BufferedReader responseReader=new BufferedReader(new InputStreamReader(responseStream));  String response=responseReader.readLine();  Assert.assertEquals("Servlet is now ready",response);}  }
class C{  public static void updateSigninManagerFirstRunCheckDone(Context context){  SigninManager manager=SigninManager.get(context);  if (manager.isSignInAllowed())   return;  if (!FirstRunStatus.getFirstRunFlowComplete(context))   return;  if (!getFirstRunFlowSignInComplete(context))   return;  manager.onFirstRunCheckDone();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void modifyReplicationPolicy(String id,IsilonSyncPolicy syncPolicy) throws IsilonException {  modify(_baseUrl.resolve(URI_REPLICATION_POLICIES),id,"policies",syncPolicy);}  }
class C{  public static String bytesToSize(final long bytes,final int precision){  final double kilobyte=1024;  final double megabyte=kilobyte * 1024;  final double gigabyte=megabyte * 1024;  final double terabyte=gigabyte * 1024;  if (bytes >= 0 && bytes < kilobyte) {    return bytes + " B";  } else   if (bytes >= kilobyte && bytes < megabyte) {    return round(bytes / kilobyte,precision) + " KB";  } else   if (bytes >= megabyte && bytes < gigabyte) {    return round(bytes / megabyte,precision) + " MB";  } else   if (bytes >= gigabyte && bytes < terabyte) {    return round(bytes / gigabyte,precision) + " GB";  } else   if (bytes >= terabyte) {    return round(bytes / terabyte,precision) + " TB";  } else {    return bytes + " B";  }}  }
class C{  public static int executeUpdate(String sql,String trxName,int timeOut){  return executeUpdate(sql,null,false,trxName,timeOut);}  }
class C{  public void exit(long t){  if (mRingRadius.isActive()) {    mRingRadius.stop();  }  mFocusState=FocusState.STATE_FADE_OUT;  mExitStartMillis=computeExitStartTimeMs(t,mExitDurationMillis);}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpInputStream rtpStream,RtpStreamListener rtpStreamListener) throws NetworkException {  try {    if (logger.isActivated()) {      logger.debug("Prepare session");    }    inputStream=new MediaCaptureStream(format,player);    inputStream.open();    if (logger.isActivated()) {      logger.debug("Input stream: " + inputStream.getClass().getName());    }    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    if (logger.isActivated()) {      logger.debug("Output stream: " + outputStream.getClass().getName());    }    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    if (logger.isActivated()) {      logger.debug("New processor");    }    processor=new Processor(inputStream,outputStream,codecChain);    if (logger.isActivated()) {      logger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append("!").toString(),e);  }}  }
class C{  public EntropyCalculatorGaussian(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___MULTIPLICITY_1:    getMultiplicity_1().clear();  return;case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___ROLE_NAME_1:setRoleName_1(ROLE_NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){  while (left <= right && Float.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    float ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Float.floatToRawIntBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    float ak=a[k];    if (ak != 0.0f) {      break;    }    if (Float.floatToRawIntBits(ak) < 0) {      a[k]=0.0f;      a[++p]=-0.0f;    }  }}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public static FreeFormPointSet fromCsv(File filename) throws IOException {  CsvReader reader=new CsvReader(filename.getAbsolutePath(),',',Charset.forName("UTF8"));  reader.readHeaders();  int nCols=reader.getHeaderCount();  while (reader.readRecord()) {    if (reader.getColumnCount() != nCols) {      LOG.error("CSV record {} has the wrong number of fields.",reader.getCurrentRecord());      return null;    }  }  int nRecs=(int)reader.getCurrentRecord() + 1;  reader.close();  reader=new CsvReader(filename.getAbsolutePath(),',',Charset.forName("UTF8"));  FreeFormPointSet ret=new FreeFormPointSet(nRecs);  reader.readHeaders();  if (reader.getHeaderCount() != nCols) {    LOG.error("Number of headers changed.");    return null;  }  int latCol=-1;  int lonCol=-1;  int[][] properties=new int[nCols][ret.capacity];  for (int c=0; c < nCols; c++) {    String header=reader.getHeader(c);    if (header.equalsIgnoreCase("lat") || header.equalsIgnoreCase("latitude")) {      latCol=c;    } else     if (header.equalsIgnoreCase("lon") || header.equalsIgnoreCase("longitude")) {      lonCol=c;    } else {      ret.getOrCreatePropertyForId(header);      properties[c]=ret.properties.get(header);    }  }  if (latCol < 0 || lonCol < 0) {    LOG.error("CSV file did not contain a latitude or longitude column.");    throw new IOException();  }  ret.lats=new double[nRecs];  ret.lons=new double[nRecs];  while (reader.readRecord()) {    int rec=(int)reader.getCurrentRecord();    for (int c=0; c < nCols; c++) {      if (c == latCol || c == lonCol) {        continue;      }      int[] prop=properties[c];      int mag=Integer.parseInt(reader.get(c));      prop[rec]=mag;    }    ret.lats[rec]=Double.parseDouble(reader.get(latCol));    ret.lons[rec]=Double.parseDouble(reader.get(lonCol));  }  ret.capacity=nRecs;  return ret;}  }
class C{  @Override public void run(){  amIActive=true;  String accumHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double channelizationThreshold=0;  double backValue=0;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      accumHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      channelizationThreshold=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().equals("nodata")) {        flag=true;      } else {        backValue=Double.parseDouble(args[i]);      }    }  }  if ((accumHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(accumHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (flag) {      backValue=noData;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",accumHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    double[] data=null;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > channelizationThreshold && data[col] != noData) {          output.setValue(row,col,1);        } else {          output.setValue(row,col,backValue);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void prepareCorpses(){  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("-6_kanmararn_city");  final Corpse tom=new Corpse("youngsoldiernpc",5,47);  tom.setStage(4);  tom.setName("Tom");  tom.setKiller("a Dwarven patrol");  zone.add(tom);  final CorpseRefiller tomRefiller=new CorpseRefiller(tom,"leather legs","You see torn leather legs that are heavily covered with blood.");  tomRefiller.start();  final Corpse charles=new Corpse("youngsoldiernpc",94,5);  charles.setStage(3);  charles.setName("Charles");  charles.setKiller("a Dwarven patrol");  zone.add(charles);  final CorpseRefiller charlesRefiller=new CorpseRefiller(charles,"note","You read: \"IOU 250 money. (signed) McPegleg\"");  charlesRefiller.start();  final Corpse peter=new Corpse("youngsoldiernpc",11,63);  peter.setStage(2);  peter.setName("Peter");  peter.setKiller("a Dwarven patrol");  zone.add(peter);  final CorpseRefiller peterRefiller=new CorpseRefiller(peter,"scale armor","You see a slightly rusty scale armor. It is heavily deformed by several strong hammer blows.");  peterRefiller.start();}  }
class C{  public boolean isBranch(){switch (getOpcode()) {case IFNULL:case IFNONNULL:case IFNE:case IFEQ:case IFLT:case IFGE:case IFGT:case IFLE:case IF_ICMPEQ:case IF_ICMPNE:case IF_ICMPLT:case IF_ICMPGE:case IF_ICMPGT:case IF_ICMPLE:case IF_ACMPEQ:case IF_ACMPNE:case JSR:case JSR_W:case GOTO:case GOTO_W:    return true;}return false;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public Frequency_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public IndicatorViewState(File indicatorFile,JsonObject jsonObject,SecuritySpecModel spec,IndicatorViewState oldState){  this.jsonObject=jsonObject;  this.spec=spec;  computeMethodMap(jsonObject);  computeDefaultVisibilityMap(jsonObject);  computeVisibilityMapFromDefault(oldState);  computeDefaultLabelDisplayMap(jsonObject);  computeLabelDisplayMapFromDefault(oldState);  computeDefaultFilters(indicatorFile,jsonObject);  computeFiltersFromDefault(oldState);  indicatorType=Utils.getFieldValueAsString(jsonObject,"indicator-type");  if (indicatorType == null) {    String fileName=indicatorFile.getName();    int pos=fileName.indexOf(".");    indicatorType=fileName.substring(0,pos).replace('_',' ');  }}  }
class C{  DVariable extractVariable(DMessage msg,String name){  int oType=msg.getWord();  int flags=(int)msg.getDWord();  return extractAtom(msg,name,oType,flags);}  }
class C{  public VerletSpring2D lockB(boolean s){  isBLocked=s;  return this;}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(env));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/assets/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/scripts/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public void updateCrosshairY(double candidateY){  updateCrosshairY(candidateY,0);}  }
class C{  public static void handle(Throwable t){  try {    boolean shouldShutdown=!Environment.isCompetition();    exception_fms_count++;    if (exception_fms_start == 0)     exception_fms_start=System.currentTimeMillis();    String fn="crash-" + dateFormat.format(new Date());    File file=new File(crashDir,fn + ".txt");    SplitStream split=new SplitStream(System.err,new FileOutputStream(file));    PrintStream out=new PrintStream(split);    out.println("**** CRASH LOG ****");    if (!shouldShutdown && exception_fms_count > 10 && exception_fms_start < 10000) {      out.println("NOTICE: More than 10 Exceptions have occured in 10 seconds. This is a good sign there is something majorly wrong, and even though you are connected to FMS, we're going to shut down anyway. Goodbye, World.");      shouldShutdown=true;    } else     if (!shouldShutdown)     out.println("NOTICE: Your robot is connected to FMS! To save your robot, we won't shut down your robot unless this exception is repeated.");    out.println("Your robot has crashed. Following is a crash log and more details.");    out.println("This log has been saved to: " + file.getCanonicalPath());    out.println("This log will also be duplicated to USB devices, with the filename: " + fn + ".txt");    out.println(Assets.getAscii("crash"));    for (    CrashInfoProvider provider : providers) {      String info=provider.getCrashInfoPre(t);      if (info != null)       out.println("\t" + provider.getCrashInfoPre(t) + "\n");    }    t.printStackTrace(out);    out.println();    out.println("Crash Information: ");    for (    CrashInfoProvider provider : providers) {      try {        out.println("\t" + provider.getName() + ": ");        List<String> info=provider.getCrashInfo(t);        if (info != null)         for (        String s : info) {          out.println("\t\t" + s);        }        out.println();      } catch (      Throwable e) {        out.println("Provider: " + provider.getClass().getCanonicalName() + " could not finalize output. ("+ e.getLocalizedMessage()+ ")");      }    }    out.println();    out.println("*******************");    out.flush();    out.close();    File recentLog=SysLogProxy.recentOut;    File cpFile=new File(crashDir,fn + "-FULL.txt");    Files.copy(recentLog.toPath(),cpFile.toPath());    duplicate(cpFile);    duplicate(file);    if (shouldShutdown)     Toast.getToast().shutdownCrash();  } catch (  Exception e) {  }}  }
class C{  public static ObjectAnimator fade(View view,float from,float to,int duration,AnimatorListenerAdapter listener){  ObjectAnimator alpha=ObjectAnimator.ofFloat(view,"alpha",from,to);  alpha.setDuration(duration);  if (listener != null) {    alpha.addListener(listener);  }  alpha.start();  return alpha;}  }
class C{  public Machine findByName(String machineName) throws IOException, InterruptedException, MachineDoesntExistException {  String[] mameCommandLine={"-listxml",machineName};  InputStream is;  MameXmlContainer ms=null;  try {    is=this.mame.executeAndReturnStdoutAsInputStream(mameCommandLine);    ms=JAXB.unmarshal(is,MameXmlContainer.class);  } catch (  MameExecutionException|DataBindingException e) {    throw (MachineDoesntExistException)new MachineDoesntExistException(String.format("The machine '%s' doesn't exist or is not " + "supported by the provided Mame version:",machineName)).initCause(e);  }  Machine machine=null;  Set<Machine> subMachines=new HashSet<>();  for (  Machine m : ms.getMachines()) {    if (m.getName().equals(machineName.toLowerCase())) {      machine=m;      String parentMachineName=m.getRomof();      if (parentMachineName != null) {        m.setParentMachine(this.findByName(parentMachineName));      }    } else {      subMachines.add(m);    }  }  if (machine == null) {    throw new RuntimeException(String.format("Unhandled case: Mame returned no errors while searching " + "for machine %s but the machine has not been found " + "on the XML content",machineName));  }  machine.setSubMachines(subMachines);  return machine;}  }
class C{  public boolean containsCheckedExceptions() throws ClassNotFoundException {  for (ThrownExceptionIterator i=iterator(); i.hasNext(); ) {    ObjectType type=i.next();    if (!Hierarchy.isUncheckedException(type)) {      return true;    }  }  return false;}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDeltaX=computeScrollDeltaToGetChildRectOnScreenX(mTempRect);  int scrollDeltaY=computeScrollDeltaToGetChildRectOnScreenY(mTempRect);  if (scrollDeltaY != 0 || scrollDeltaX != 0) {    scrollBy(scrollDeltaX,scrollDeltaY);  }}  }
class C{  public int oom_score_adj() throws IOException {  return Integer.parseInt(read("oom_score_adj"));}  }
class C{  public SocketFlow priority(int priority){  if (priority != NORMAL_PRIORITY && priority != HIGH_PRIORITY) {    throw new IllegalArgumentException("invalid priority");  }  this.priority=priority;  return this;}  }
class C{  @Override public void cleanup(){  _logger.info("Stopping the Plugin Thread and clearing Resources");  releaseResources();}  }
class C{  private HttpHandler secureHandler(final HttpHandler toWrap,SecurityRealm securityRealm){  HttpHandler handler=toWrap;  handler=new AuthenticationCallHandler(handler);  handler=new AuthenticationConstraintHandler(handler);  RealmIdentityManager idm=new RealmIdentityManager(securityRealm);  Set<AuthMechanism> mechanisms=securityRealm.getSupportedAuthenticationMechanisms();  List<AuthenticationMechanism> undertowMechanisms=new ArrayList<AuthenticationMechanism>(mechanisms.size());  undertowMechanisms.add(wrap(new CachedAuthenticatedSessionMechanism(),null));  for (  AuthMechanism current : mechanisms) {switch (current) {case DIGEST:      List<DigestAlgorithm> digestAlgorithms=Collections.singletonList(DigestAlgorithm.MD5);    List<DigestQop> digestQops=Collections.singletonList(DigestQop.AUTH);  undertowMechanisms.add(wrap(new DigestAuthenticationMechanism(digestAlgorithms,digestQops,securityRealm.getName(),"Monitor",new SimpleNonceManager()),current));break;case PLAIN:undertowMechanisms.add(wrap(new BasicAuthenticationMechanism(securityRealm.getName()),current));break;case LOCAL:break;}}handler=new AuthenticationMechanismsHandler(handler,undertowMechanisms);handler=new SecurityInitialHandler(AuthenticationMode.PRO_ACTIVE,idm,handler);handler=new PredicateHandler(null,handler,toWrap);return handler;}  }
class C{  public static String concatenate(Object[] array){  return join(array,"");}  }
class C{  private void addElementNameEvidenceElementToOverrideTarget(ProcessRemarkService prs,ProcessRemark pr){  EvidenceElement ee=prs.getEvidenceElement(ProcessRemarkService.DEFAULT_EVIDENCE,ELEMENT_NAME_VALUE_KEY);  pr.addElement(ee);}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  private TypeArgument[] parseTypeArguments(){  List<TypeArgument> tas=new ArrayList<>(3);  assert (current() == '<');  if (current() != '<') {    throw error("expected '<'");  }  advance();  tas.add(parseTypeArgument());  while (current() != '>') {    tas.add(parseTypeArgument());  }  advance();  return tas.toArray(new TypeArgument[tas.size()]);}  }
class C{  public ResponseOnSingleTask(){  super();}  }
class C{  public Long deleteRoomsOrganisationByID(long rooms_organisation_id){  try {    Rooms_Organisation rOrg=this.getRoomsOrganisationById(rooms_organisation_id);    return this.deleteRoomsOrganisation(rOrg);  } catch (  Exception ex2) {    log.error("[deleteRoomsOrganisationByID] ",ex2);  }  return null;}  }
class C{  public void testRemoteListenForOldest() throws Exception {  remoteListenForOldest(ignite1);  stopGrid(1);  ignite1=startGrid(1);  MSG_CNT.set(0);  remoteListenForOldest(ignite2);}  }
class C{  public static SoapMessageImpl createRequest(String fileName) throws Exception {  return createRequest(QUERY_DIR,fileName);}  }
class C{  static OptMachineCodeMap create(IR ir,int machineCodeSize){  final boolean DUMP_MAPS=ir.options.PRINT_GC_MAPS && (!ir.options.hasMETHOD_TO_PRINT() || (ir.options.hasMETHOD_TO_PRINT() && ir.options.fuzzyMatchMETHOD_TO_PRINT(ir.method.toString())));  final boolean DUMP_MAP_SIZES=false;  if (DUMP_MAPS) {    VM.sysWrite("Creating final machine code map for " + ir.method + "\n");  }  MachineCodeOffsets mcOffsets=ir.MIRInfo.mcOffsets;  final OptMachineCodeMap map=generateMCInformation(ir.MIRInfo.gcIRMap,DUMP_MAPS,mcOffsets);  if (DUMP_MAP_SIZES) {    map.recordStats(ir.method,map.size(),machineCodeSize << ArchConstants.getLogInstructionWidth(),DUMP_MAP_SIZES);  }  if (DUMP_MAPS) {    VM.sysWrite("Final Machine code information:\n");    map.dumpMCInformation(DUMP_MAPS);    for (Instruction i=ir.firstInstructionInCodeOrder(); i != null; i=i.nextInstructionInCodeOrder()) {      VM.sysWriteln(mcOffsets.getMachineCodeOffset(i) + "\t" + i);    }  }  return map;}  }
class C{  private void updatePlaylistTag(int i,ViewHolder tag){  final SearchEntry entry=mSortedPlaylists.get(i);  final Playlist playlist=ProviderAggregator.getDefault().retrievePlaylist(entry.ref,entry.identifier);  final Resources res=tag.vRoot.getResources();  if (playlist != null && playlist.equals(tag.content)) {    return;  }  if (playlist != null && (playlist.isLoaded() || playlist.getName() != null)) {    tag.tvTitle.setText(playlist.getName());    tag.tvSubtitle.setText(res.getQuantityString(R.plurals.xx_songs,playlist.getSongsCount()));    tag.content=playlist;    tag.sourceLogo=PluginsLookup.getDefault().getCachedLogo(tag.vRoot.getResources(),playlist);    tag.ivSource.setImageDrawable(tag.sourceLogo);    tag.ivOverflow.setOnClickListener(mOverflowPlaylistClickListener);  } else {    tag.tvTitle.setText(R.string.loading);    tag.tvSubtitle.setText(null);    tag.ivSource.setImageDrawable(null);    tag.albumArtImageView.setDefaultArt();    tag.ivOverflow.setOnClickListener(null);  }}  }
class C{  public void onEvent(Event e){  log.config("");  if (e.getTarget().equals(multiCurrency))   loadBPartner(); else   if (e.getTarget().equals(allocateButton)) {    allocateButton.setEnabled(false);    saveData();    loadBPartner();    allocateButton.setEnabled(true);  }}  }
class C{  public void calculateSelection(){  dataStatus.setText(calculateSelection(miniTable));  bGenerate.setEnabled(m_noSelected != 0);}  }
class C{  public final void init(int keysize,SecureRandom random){  if (serviceIterator == null) {    spi.engineInit(keysize,random);    return;  }  RuntimeException failure=null;  KeyGeneratorSpi mySpi=spi;  do {    try {      mySpi.engineInit(keysize,random);      initType=I_SIZE;      initKeySize=keysize;      initParams=null;      initRandom=random;      return;    } catch (    RuntimeException e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi,false);    }  } while (mySpi != null);  throw failure;}  }
class C{  public LatLng toLatLng(){  double UTM_F0=0.9996;  double a=RefEll.WGS84.getMaj();  double eSquared=RefEll.WGS84.getEcc();  double ePrimeSquared=eSquared / (1.0 - eSquared);  double e1=(1 - Math.sqrt(1 - eSquared)) / (1 + Math.sqrt(1 - eSquared));  double x=easting - 500000.0;  ;  double y=northing;  int zoneNumber=lngZone;  char zoneLetter=latZone;  double longitudeOrigin=(zoneNumber - 1.0) * 6.0 - 180.0 + 3.0;  if ((zoneLetter - 'N') < 0) {    y-=10000000.0;  }  double m=y / UTM_F0;  double mu=m / (a * (1.0 - eSquared / 4.0 - 3.0 * eSquared * eSquared / 64.0 - 5.0 * Math.pow(eSquared,3.0) / 256.0));  double phi1Rad=mu + (3.0 * e1 / 2.0 - 27.0 * Math.pow(e1,3.0) / 32.0) * Math.sin(2.0 * mu) + (21.0 * e1 * e1 / 16.0 - 55.0 * Math.pow(e1,4.0) / 32.0) * Math.sin(4.0 * mu) + (151.0 * Math.pow(e1,3.0) / 96.0) * Math.sin(6.0 * mu);  double n=a / Math.sqrt(1.0 - eSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));  double t=Math.tan(phi1Rad) * Math.tan(phi1Rad);  double c=ePrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);  double r=a * (1.0 - eSquared) / Math.pow(1.0 - eSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad),1.5);  double d=x / (n * UTM_F0);  double latitude=(phi1Rad - (n * Math.tan(phi1Rad) / r) * (d * d / 2.0 - (5.0 + (3.0 * t) + (10.0 * c) - (4.0 * c * c) - (9.0 * ePrimeSquared)) * Math.pow(d,4.0) / 24.0 + (61.0 + (90.0 * t) + (298.0 * c)+ (45.0 * t * t) - (252.0 * ePrimeSquared) - (3.0 * c * c)) * Math.pow(d,6.0) / 720.0)) * (180.0 / Math.PI);  double longitude=longitudeOrigin + ((d - (1.0 + 2.0 * t + c) * Math.pow(d,3.0) / 6.0 + (5.0 - (2.0 * c) + (28.0 * t) - (3.0 * c * c) + (8.0 * ePrimeSquared) + (24.0 * t * t)) * Math.pow(d,5.0) / 120.0) / Math.cos(phi1Rad)) * (180.0 / Math.PI);  return new LatLng(latitude,longitude);}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  @Bean public CacheManager findClientAppUserCacheManager(){  CacheBuilder<Object,Object> cacheBuilder=CacheBuilder.newBuilder().expireAfterWrite(1,TimeUnit.MINUTES).maximumSize(1000);  GuavaCacheManager cacheManager=new GuavaCacheManager("findClientAppUser");  cacheManager.setCacheBuilder(cacheBuilder);  return cacheManager;}  }
class C{  public ST(){  st=new TreeMap<Key,Value>();}  }
class C{  public void waitForRollover(){  final int count=rolloverCompletions.get();  while (rolloverCompletions.get() == count) {    try {      Thread.sleep(100L);    } catch (    final InterruptedException e) {    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.WORD___SINGULAR_1:    return getSingular_1();case UmplePackage.WORD___PLURAL_1:  return getPlural_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ZKAddress(String address){  Matcher matcher=Pattern.compile(ADDRESS_REGEX).matcher(address);  if (!matcher.matches()) {    throw new ZKAddressException(address);  }  for (int i=0; i < matcher.groupCount() + 1; i++) {    matcherMap.put(i,matcher.group(i));  }  setUser(matcherMap.getOrDefault(1,""));  setPassword(matcherMap.getOrDefault(2,""));  setAddress(matcherMap.getOrDefault(3,""));  setPort(matcherMap.getOrDefault(4,""));  setZkNode(matcherMap.getOrDefault(5,""));}  }
class C{  public boolean mayReconnect(){  return mayReconnect;}  }
class C{  protected void stopSpin(){  if (spinning) {    try {      spinLimiter.acquire();    } catch (    InterruptedException e) {      throw new ActiveMQInterruptedException(e);    }    spinning=false;  }}  }
class C{  public Property secondOfMinute(){  return new Property(this,getChronology().secondOfMinute());}  }
class C{  public float min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  float min=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    min=Math.min(min,_data[_pos]);  }  return min;}  }
class C{  public static int missilesHit(int missiles){  return Compute.missilesHit(missiles,0);}  }
class C{  public static void passMockSleep(){  mockSleepQueue.offer(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:07.249 -0500",hash_original_method="CB913E335DEA23070E332AEE6AD401FB",hash_generated_method="6011C7E32F9FE962048F224607A5A908") public void close() throws IOException {  impl.close();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testFloatValue(){  LongAdder ai=new LongAdder();  assertEquals(0.0f,ai.floatValue());  ai.increment();  assertEquals(1.0f,ai.floatValue());}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  @RequestMapping(value="/SAML2/SSO") public void ssoDefaultTenantBindingError(Locale locale,HttpServletResponse response) throws IOException {  logger.info("SSO binding error! The client locale is " + locale.toString() + ", DEFAULT tenant");  sendError(locale,response,"Binding");}  }
class C{  public boolean checkUserOutdated(){  if (forgeOutdated) {    con.disconnect(BungeeCord.getInstance().getTranslation("connect_kick_outdated_forge"));  }  return forgeOutdated;}  }
class C{  @Override public final void preTearDown() throws Exception {  closeCacheFeeder();  vm1.invoke(null);  vm0.invoke(null);}  }
class C{  public T caseText(Text object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.557 -0500",hash_original_method="518F03C8AA7D2E41BBC9B0EF8F2349B8",hash_generated_method="5A7552EC791FF4AAA30DF294A908AC9F") protected void pollState(){  pollingContext=new int[1];  pollingContext[0]=0;switch (cm.getRadioState()) {case RADIO_UNAVAILABLE:    newSS.setStateOutOfService();  newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;pollStateDone();break;case RADIO_OFF:newSS.setStateOff();newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;pollStateDone();break;case SIM_NOT_READY:case SIM_LOCKED_OR_ABSENT:case SIM_READY:if (DBG) log("Radio Technology Change ongoing, setting SS to off");newSS.setStateOff();newCellLoc.setStateInvalid();setSignalStrengthDefaultValues();mGotCountryCode=false;break;default :pollingContext[0]++;cm.getOperator(obtainMessage(EVENT_POLL_STATE_OPERATOR_CDMA,pollingContext));pollingContext[0]++;cm.getVoiceRegistrationState(obtainMessage(EVENT_POLL_STATE_REGISTRATION_CDMA,pollingContext));break;}}  }
class C{  public static void e(String msg,Throwable thr){  log(LEVEL.ERROR,null,msg,thr);}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup viewGroup){  final View itemLayout=mInflater.inflate(R.layout.contact_list_item,viewGroup,false);  final ViewHolder holder=new ViewHolder();  holder.text1=(TextView)itemLayout.findViewById(android.R.id.text1);  holder.text2=(TextView)itemLayout.findViewById(android.R.id.text2);  holder.icon=(QuickContactBadge)itemLayout.findViewById(android.R.id.icon);  itemLayout.setTag(holder);  return itemLayout;}  }
class C{  public EntityMigrationBuilder addManyAssociation(String association,String... defaultReferences){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new AddManyAssociation(association,defaultReferences)));  return this;}  }
class C{  void stopTask(String processName){  trace("kill process: " + processName);  Process p=tasks.remove(processName);  if (p == null) {    return;  }  p.destroy();}  }
class C{  public void xor(LongBitSet other){  assert other.numWords <= numWords : "numWords=" + numWords + ", other.numWords="+ other.numWords;  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    bits[pos]^=other.bits[pos];  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SDO;}  }
class C{  public void prompt(){  setVisible(true);}  }
class C{  public static int ProcessOptions(Vector untabInputVec,IntPair curLoc){  String curLine=GotoNextNonSpace(untabInputVec,curLoc);  if (curLine.substring(curLoc.two).startsWith("options")) {    curLoc.two=curLoc.two + 7;    curLine=GotoNextNonSpace(untabInputVec,curLoc);    if (!curLine.substring(curLoc.two).startsWith("(")) {      curLoc.one=untabInputVec.size();      PcalDebug.reportError("`PlusCal options' not followed by '('");      return trans.STATUS_EXIT_WITH_ERRORS;    }    curLoc.two++;    curLine=GotoNextNonSpace(untabInputVec,curLoc);    Vector argsVec=new Vector();    while (curLoc.one < untabInputVec.size() && (curLine.charAt(curLoc.two) != ')')) {      if (curLine.charAt(curLoc.two) == ',') {        curLoc.two++;      } else {        int endOfArg=NextDelimiterCol(curLine,curLoc.two);        argsVec.addElement(curLine.substring(curLoc.two,endOfArg));        curLoc.two=endOfArg;      }      curLine=GotoNextNonSpace(untabInputVec,curLoc);    }    if (!(curLoc.one < untabInputVec.size())) {      PcalDebug.reportError("No closing ')' found in options statement");      return trans.STATUS_EXIT_WITH_ERRORS;    }    curLoc.two++;    curLine=GotoNextNonSpace(untabInputVec,curLoc);    argsVec.addElement("");    String[] argsArray=new String[argsVec.size()];    for (int i=0; i < argsArray.length; i++) {      argsArray[i]=(String)argsVec.elementAt(i);    }    int status=trans.parseAndProcessArguments(argsArray);    if (status != trans.STATUS_OK) {      return status;    }  }  return trans.STATUS_OK;}  }
class C{  public ExpressionParserBuilder withModules(List<ExpressionParserModule> modules){  for (  ExpressionParserModule module : modules) {    addModule(module);  }  return this;}  }
class C{  public static ErrLoggingEvent fromLog4jLogEvent(Log4jLogEvent log4jLogEvent){  ErrLoggingEvent erLoggingEvent=new ErrLoggingEvent();  erLoggingEvent.setCategoryName(log4jLogEvent.getLoggerName());  erLoggingEvent.setLevel(log4jLogEvent.getLevel().toString());  erLoggingEvent.setRenderedMessage(log4jLogEvent.getMessage().getFormattedMessage());  erLoggingEvent.setThreadName(log4jLogEvent.getThreadName());  erLoggingEvent.setTimeStamp(log4jLogEvent.getTimeMillis());  erLoggingEvent.setTimeStampDate(new Date(log4jLogEvent.getTimeMillis()));  if (log4jLogEvent.getThrownProxy() != null) {    erLoggingEvent.setThrowableInfo(ErThrowableInformation.fromThrowableProxy(log4jLogEvent.getThrownProxy()));  }  return erLoggingEvent;}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new Exception("No input instance format defined");  }  addNoise(getInputFormat(),m_RandomSeed,m_Percent,m_AttIndex.getIndex(),m_UseMissing);  for (int i=0; i < getInputFormat().numInstances(); i++) {    push((Instance)getInputFormat().instance(i).copy());  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public synchronized Collection<X509Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException {  if (debug != null) {    debug.println("LDAPCertStore.engineGetCertificates() selector: " + String.valueOf(selector));  }  if (selector == null) {    selector=new X509CertSelector();  }  if (!(selector instanceof X509CertSelector)) {    throw new CertStoreException("LDAPCertStore needs an X509CertSelector " + "to find certs");  }  X509CertSelector xsel=(X509CertSelector)selector;  int basicConstraints=xsel.getBasicConstraints();  String subject=xsel.getSubjectAsString();  String issuer=xsel.getIssuerAsString();  HashSet<X509Certificate> certs=new HashSet<>();  if (debug != null) {    debug.println("LDAPCertStore.engineGetCertificates() basicConstraints: " + basicConstraints);  }  if (subject != null) {    if (debug != null) {      debug.println("LDAPCertStore.engineGetCertificates() " + "subject is not null");    }    LDAPRequest request=new LDAPRequest(subject);    if (basicConstraints > -2) {      request.addRequestedAttribute(CROSS_CERT);      request.addRequestedAttribute(CA_CERT);      request.addRequestedAttribute(ARL);      if (prefetchCRLs) {        request.addRequestedAttribute(CRL);      }    }    if (basicConstraints < 0) {      request.addRequestedAttribute(USER_CERT);    }    if (basicConstraints > -2) {      certs.addAll(getMatchingCrossCerts(request,xsel,null));      if (debug != null) {        debug.println("LDAPCertStore.engineGetCertificates() after " + "getMatchingCrossCerts(subject,xsel,null),certs.size(): " + certs.size());      }      certs.addAll(getCertificates(request,CA_CERT,xsel));      if (debug != null) {        debug.println("LDAPCertStore.engineGetCertificates() after " + "getCertificates(subject,CA_CERT,xsel),certs.size(): " + certs.size());      }    }    if (basicConstraints < 0) {      certs.addAll(getCertificates(request,USER_CERT,xsel));      if (debug != null) {        debug.println("LDAPCertStore.engineGetCertificates() after " + "getCertificates(subject,USER_CERT, xsel),certs.size(): " + certs.size());      }    }  } else {    if (debug != null) {      debug.println("LDAPCertStore.engineGetCertificates() subject is null");    }    if (basicConstraints == -2) {      throw new CertStoreException("need subject to find EE certs");    }    if (issuer == null) {      throw new CertStoreException("need subject or issuer to find certs");    }  }  if (debug != null) {    debug.println("LDAPCertStore.engineGetCertificates() about to " + "getMatchingCrossCerts...");  }  if ((issuer != null) && (basicConstraints > -2)) {    LDAPRequest request=new LDAPRequest(issuer);    request.addRequestedAttribute(CROSS_CERT);    request.addRequestedAttribute(CA_CERT);    request.addRequestedAttribute(ARL);    if (prefetchCRLs) {      request.addRequestedAttribute(CRL);    }    certs.addAll(getMatchingCrossCerts(request,null,xsel));    if (debug != null) {      debug.println("LDAPCertStore.engineGetCertificates() after " + "getMatchingCrossCerts(issuer,null,xsel),certs.size(): " + certs.size());    }    certs.addAll(getCertificates(request,CA_CERT,xsel));    if (debug != null) {      debug.println("LDAPCertStore.engineGetCertificates() after " + "getCertificates(issuer,CA_CERT,xsel),certs.size(): " + certs.size());    }  }  if (debug != null) {    debug.println("LDAPCertStore.engineGetCertificates() returning certs");  }  return certs;}  }
class C{  public static BoundSize parseBoundSize(String s,boolean isGap,boolean isHor){  if (s.length() == 0 || s.equals("null") || s.equals("n"))   return null;  String cs=s;  boolean push=false;  if (s.endsWith("push")) {    push=true;    int l=s.length();    s=s.substring(0,l - (s.endsWith(":push") ? 5 : 4));    if (s.length() == 0)     return new BoundSize(null,null,null,true,cs);  }  String[] sizes=toTrimmedTokens(s,':');  String s0=sizes[0];  if (sizes.length == 1) {    boolean hasEM=s0.endsWith("!");    if (hasEM)     s0=s0.substring(0,s0.length() - 1);    UnitValue uv=parseUnitValue(s0,null,isHor);    return new BoundSize(((isGap || hasEM) ? uv : null),uv,(hasEM ? uv : null),push,cs);  } else   if (sizes.length == 2) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),null,push,cs);  } else   if (sizes.length == 3) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),parseUnitValue(sizes[2],null,isHor),push,cs);  } else {    throw new IllegalArgumentException("Min:Preferred:Max size section must contain 0, 1 or 2 colons. '" + cs + "'");  }}  }
class C{  private void before() throws Exception {  initSecondary();  if (passPrimaryConfiguration) {    Configuration primaryFsCfg=configuration(primaryCfgScheme,primaryCfgAuthority,skipEmbed,skipLocShmem);    primaryConfFullPath=writeConfiguration(primaryFsCfg,PRIMARY_CFG_PATH);  } else   primaryConfFullPath=null;  CachingHadoopFileSystemFactory fac=new CachingHadoopFileSystemFactory();  fac.setConfigPaths(primaryConfFullPath);  fac.setUri(primaryFsUriStr);  HadoopFileSystemFactoryDelegate facDelegate=HadoopDelegateUtils.fileSystemFactoryDelegate(fac);  facDelegate.start();  primaryFs=(FileSystem)facDelegate.get(null);  primaryFsUri=primaryFs.getUri();}  }
class C{  public UserPrincipal principal(){  return who;}  }
class C{  public Weeks multipliedBy(int scalar){  return Weeks.weeks(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  throw new UnsupportedOperationException();}  }
class C{  public void add(String key,Serializable value){  List<Serializable> entries=data.get(key);  if (entries == null) {    entries=new ArrayList<Serializable>();    data.put(key,entries);  }  entries.add(value);}  }
class C{  public ExecutionContextImpl(){  super();}  }
class C{  public static SetExpression discreteRange(String propertyName,int from,int to){  return new SetExpression(Operator.IN,propertyName,from <= to ? range(from,to) : range(to,from));}  }
class C{  public boolean isQueryMax(int noRecords){  int max=getMaxQueryRecords();  return max > 0 && noRecords > max;}  }
class C{  public ZoomEvent(Object source,int type,float amount){  super(source);switch (type) {case RELATIVE:case ABSOLUTE:    break;default :  throw new IllegalArgumentException("Invalid type: " + type);}this.type=type;this.amount=amount;}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex mood=memory.createVertex(getClass());  Vertex property=mood.getRelationship(Primitive.ENABLED);  if (property != null) {    setEnabled((Boolean)property.getData());  }  mood.internalRemoveRelationships(Primitive.ENABLED);  memory.save();  saveProperties();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("LifecycleException:  ");  if (message != null) {    sb.append(message);    if (throwable != null) {      sb.append(":  ");    }  }  if (throwable != null) {    sb.append(throwable.toString());  }  return (sb.toString());}  }
class C{  @SuppressWarnings("unchecked") private List<CategorizedProblem> doValidateReturnTypes(MethodDeclaration node,SingleVariableDeclaration lastParameter,ITypeBinding[] parameterTypes,IMethodBinding dependentMethod){  ITypeBinding asyncCallbackParam=parameterTypes[parameterTypes.length - 1];  if (asyncCallbackParam.isParameterizedType()) {    ITypeBinding[] typeArguments=asyncCallbackParam.getTypeArguments();    ITypeBinding syncReturnTypeBinding=dependentMethod.getReturnType();    ITypeBinding typeBinding=syncReturnTypeBinding;    if (syncReturnTypeBinding.isPrimitive()) {      String qualifiedWrapperTypeName=JavaASTUtils.getWrapperTypeName(syncReturnTypeBinding.getQualifiedName());      typeBinding=node.getAST().resolveWellKnownType(qualifiedWrapperTypeName);    }    boolean compatible=false;    if (typeBinding != null) {      compatible=canAssign(typeArguments[0],typeBinding);    }    if (!compatible) {      ParameterizedType parameterizedType=(ParameterizedType)lastParameter.getType();      List<Type> types=parameterizedType.typeArguments();      CategorizedProblem problem=RemoteServiceProblemFactory.newAsyncCallbackTypeArgumentMismatchOnAsync(types.get(0),typeArguments[0],syncReturnTypeBinding);      if (problem != null) {        return Collections.singletonList(problem);      }    }  }  return Collections.emptyList();}  }
class C{  @Override void resolve(ReferenceType refType) throws InvalidTypeException, NoSuchFieldException {  if (!(refType instanceof ClassType)) {    throw new InvalidTypeException();  }  Field field=refType.fieldByName(fieldId);  if (field == null) {    throw new NoSuchFieldException(fieldId);  }  setRequest(refType.virtualMachine().eventRequestManager().createAccessWatchpointRequest(field));}  }
class C{  static String xadesElement(String name){  return PREFIX_XADES + name;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:33.387 -0500",hash_original_method="F409EF3C8ADBC3E8580AA402C114DFFB",hash_generated_method="41F7EC398DC90091D42CE2C67E6D63FC") public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  public void addOutfitChanger(final SpeakerNPC npc,final OutfitChangerBehaviour behaviour,final String command){  addOutfitChanger(npc,behaviour,command,true,true);}  }
class C{  static void fillBaseFields(VOSubscription voSubscription,Subscription subscription){  fillIdentifyingFields(voSubscription,subscription);  voSubscription.setCreationDate(subscription.getCreationDate());  voSubscription.setActivationDate(subscription.getActivationDate());  voSubscription.setDeactivationDate(subscription.getDeactivationDate());  voSubscription.setTimeoutMailSent(subscription.isTimeoutMailSent());  voSubscription.setStatus(subscription.getStatus());  if (subscription.getUserGroup() != null) {    voSubscription.setUnitKey(subscription.getUserGroup().getKey());    voSubscription.setUnitName(subscription.getUserGroup().getName());  }}  }
class C{  public void rerollInitiative(){  rerolled=true;  rerollInitiativeB.setEnabled(false);  clientgui.getClient().sendRerollInitiativeRequest();}  }
class C{  public RestResult delete(String path){  HttpDelete httpDelete=new HttpDelete(formatUrl(path));  return executeRequest(httpDelete);}  }
class C{  protected void doPaint(Graphics2D g,JComponent c,int width,int height,Object[] extendedCacheKeys){  Color color=(c == null) ? Color.BLACK : c.getBackground();  BufferedImage img1=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);  BufferedImage img2=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=(Graphics2D)img1.getGraphics();  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.setColor(color);  g2.fillRoundRect(2,0,26,26,RADIUS,RADIUS);  g2.dispose();  InnerShadowEffect effect=new InnerShadowEffect();  effect.setDistance(1);  effect.setSize(3);  effect.setColor(getLighter(color,2.1f));  effect.setAngle(90);  effect.applyEffect(img1,img2,IMG_SIZE,IMG_SIZE);  g2=(Graphics2D)img2.getGraphics();  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.setClip(0,28,IMG_SIZE,1);  g2.setColor(getLighter(color,0.90f));  g2.drawRoundRect(2,1,25,25,RADIUS,RADIUS);  g2.dispose();  if (width != IMG_SIZE || height != IMG_SIZE) {    ImageScalingHelper.paint(g,0,0,width,height,img2,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);  } else {    g.drawImage(img2,0,0,c);  }  img1=null;  img2=null;}  }
class C{  public void readTree(final EvolutionState state,final LineNumberReader reader) throws IOException {  int linenumber=reader.getLineNumber();  String s=reader.readLine();  if (s == null)   state.output.fatal("Reading Line " + linenumber + ": "+ "No Tree found."); else {    GPInitializer initializer=((GPInitializer)state.initializer);    child=GPNode.readRootedTree(linenumber,new DecodeReturn(s),constraints(initializer).treetype,constraints(initializer).functionset,this,0,state);  }}  }
class C{  public void changeColor(){  mCubeRenderer.changeColor();}  }
class C{  @Override public void release(){  mGraphicOverlay.clear();}  }
class C{  public final void mulTransposeRight(GMatrix m1,GMatrix m2){  int i, j, k;  if (m1.nCol != m2.nCol || nCol != m2.nRow || nRow != m1.nRow) {    throw new MatrixSizeException();  }  if (m1 == this || m2 == this) {    double[][] tmp=new double[nRow][nCol];    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        tmp[i][j]=0.0;        for (k=0; k < m1.nCol; k++) {          tmp[i][j]+=m1.values[i][k] * m2.values[j][k];        }      }    }    values=tmp;  } else {    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        values[i][j]=0.0;        for (k=0; k < m1.nCol; k++) {          values[i][j]+=m1.values[i][k] * m2.values[j][k];        }      }    }  }}  }
class C{  public void addOperation(Operation operation){  operations.add(operation);}  }
class C{  public boolean processErrorOrFailure(Response response,Request request){  return false;}  }
class C{  private StorageUnitNotificationRegistration createStorageUnitNotificationFromEntity(StorageUnitNotificationRegistrationEntity storageUnitNotificationRegistrationEntity){  StorageUnitNotificationRegistration storageUnitNotificationRegistration=new StorageUnitNotificationRegistration();  storageUnitNotificationRegistration.setId(storageUnitNotificationRegistrationEntity.getId());  storageUnitNotificationRegistration.setStorageUnitNotificationRegistrationKey(new NotificationRegistrationKey(storageUnitNotificationRegistrationEntity.getNamespace().getCode(),storageUnitNotificationRegistrationEntity.getName()));  storageUnitNotificationRegistration.setStorageUnitEventType(storageUnitNotificationRegistrationEntity.getNotificationEventType().getCode());  StorageUnitNotificationFilter filter=new StorageUnitNotificationFilter();  storageUnitNotificationRegistration.setStorageUnitNotificationFilter(filter);  filter.setNamespace(storageUnitNotificationRegistrationEntity.getBusinessObjectDefinition().getNamespace().getCode());  filter.setBusinessObjectDefinitionName(storageUnitNotificationRegistrationEntity.getBusinessObjectDefinition().getName());  filter.setBusinessObjectFormatUsage(storageUnitNotificationRegistrationEntity.getUsage());  filter.setBusinessObjectFormatFileType(storageUnitNotificationRegistrationEntity.getFileType() != null ? storageUnitNotificationRegistrationEntity.getFileType().getCode() : null);  filter.setBusinessObjectFormatVersion(storageUnitNotificationRegistrationEntity.getBusinessObjectFormatVersion());  filter.setStorageName(storageUnitNotificationRegistrationEntity.getStorage() != null ? storageUnitNotificationRegistrationEntity.getStorage().getName() : null);  filter.setNewStorageUnitStatus(storageUnitNotificationRegistrationEntity.getNewStorageUnitStatus() != null ? storageUnitNotificationRegistrationEntity.getNewStorageUnitStatus().getCode() : null);  filter.setOldStorageUnitStatus(storageUnitNotificationRegistrationEntity.getOldStorageUnitStatus() != null ? storageUnitNotificationRegistrationEntity.getOldStorageUnitStatus().getCode() : null);  List<JobAction> jobActions=new ArrayList<>();  storageUnitNotificationRegistration.setJobActions(jobActions);  for (  NotificationActionEntity notificationActionEntity : storageUnitNotificationRegistrationEntity.getNotificationActions()) {    if (notificationActionEntity instanceof NotificationJobActionEntity) {      NotificationJobActionEntity notificationJobActionEntity=(NotificationJobActionEntity)notificationActionEntity;      JobAction jobAction=new JobAction();      jobActions.add(jobAction);      jobAction.setNamespace(notificationJobActionEntity.getJobDefinition().getNamespace().getCode());      jobAction.setJobName(notificationJobActionEntity.getJobDefinition().getName());      jobAction.setCorrelationData(notificationJobActionEntity.getCorrelationData());    }  }  storageUnitNotificationRegistration.setNotificationRegistrationStatus(storageUnitNotificationRegistrationEntity.getNotificationRegistrationStatus().getCode());  return storageUnitNotificationRegistration;}  }
class C{  @Override public boolean supportsCorrelatedSubqueries(){  debugCodeCall("supportsCorrelatedSubqueries");  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.964 -0500",hash_original_method="1125B7EE847DE2E2B1EF071157DFEBB7",hash_generated_method="91FF2462936B2093B1C2376FD1913350") public static void printLoadedClasses(int flags){  VMDebug.printLoadedClasses(flags);}  }
class C{  Element renameElementAndImportChild(Element source,Document targetDocument,String newName){  Element newElement=targetDocument.createElement(newName);  NamedNodeMap namedNodeMap=source.getAttributes();  for (int iAttr=0; iAttr < namedNodeMap.getLength(); iAttr++) {    Node node=namedNodeMap.item(iAttr);    newElement.setAttribute(node.getNodeName(),node.getNodeValue());  }  NodeList listofChilds=source.getChildNodes();  for (int iChild=0; iChild < listofChilds.getLength(); iChild++) {    Node node=listofChilds.item(iChild);    newElement.appendChild(targetDocument.importNode(node,true));  }  return newElement;}  }
class C{  public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (pos >= contentLength) {    return -1;  }  pos++;  return this.in.read();}  }
class C{  public void deletedDocument(int commitWithin){  _scheduleCommitWithinIfNeeded(commitWithin);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  NdefRecord other=(NdefRecord)obj;  if (!Arrays.equals(mId,other.mId))   return false;  if (!Arrays.equals(mPayload,other.mPayload))   return false;  if (mTnf != other.mTnf)   return false;  return Arrays.equals(mType,other.mType);}  }
class C{  public static boolean save(String targetDir,String filename,String textToSave){  return FileHelper.save(targetDir,filename,textToSave);}  }
class C{  private void establecerElementosBusqueda(HttpServletRequest request){  String pFondoID=request.getParameter("fondo");  String pCodigo=request.getParameter("codigo");  String pTitulo=request.getParameter("tituloBuscar");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionSeriesBI serieBI=getGestionSeriesBI(request);  List series=serieBI.findSeriesSeleccionables(pFondoID,pCodigo,pTitulo);  CollectionUtils.transform(series,SerieToPO.getInstance(services));  request.setAttribute(ValoracionConstants.LISTA_SERIES_KEY,series);}  }
class C{  public int availablePermits(){  return sync.getPermits();}  }
class C{  private synchronized void _setRunning(boolean b){  m_run=b;}  }
class C{  public static String evaluateModel(Classifier classifier,String[] options) throws Exception {  return weka.classifiers.evaluation.Evaluation.evaluateModel(classifier,options);}  }
class C{  public int count(){  return this.numberOfAddedElements;}  }
class C{  @Override public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException {  for (  String s : getVarParams().keySet()) {    Expression paramExpr=getVarParam(s);    if (paramExpr instanceof FunctionCallIdentifier)     raiseValidateError("UDF function call not supported as parameter to built-in function call",false);    paramExpr.validateExpression(ids,constVars,conditional);  }  String outputName=getTempName();  DataIdentifier output=new DataIdentifier(outputName);  this.setOutput(output);switch (this.getOpCode()) {case GROUPEDAGG:    validateGroupedAgg(output,conditional);  break;case CDF:case INVCDF:case PNORM:case QNORM:case PT:case QT:case PF:case QF:case PCHISQ:case QCHISQ:case PEXP:case QEXP:validateDistributionFunctions(output,conditional);break;case RMEMPTY:validateRemoveEmpty(output,conditional);break;case REPLACE:validateReplace(output,conditional);break;case ORDER:validateOrder(output,conditional);break;case TRANSFORM:validateTransform(output,conditional);break;case TRANSFORMAPPLY:validateTransformApply(output,conditional);break;case TRANSFORMDECODE:validateTransformDecode(output,conditional);break;case TRANSFORMMETA:validateTransformMeta(output,conditional);break;case TOSTRING:validateCastAsString(output,conditional);break;default :if (getOpCode() == ParameterizedBuiltinFunctionOp.TRANSFORMENCODE) raiseValidateError("Parameterized function " + getOpCode() + " requires a multi-assignment statement "+ "for data and metadata.",false,LanguageErrorCodes.UNSUPPORTED_EXPRESSION); else raiseValidateError("Unsupported parameterized function " + getOpCode(),false,LanguageErrorCodes.UNSUPPORTED_EXPRESSION);}return;}  }
class C{  public ReferredByHeader createReferredByHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferredBy referredBy=new ReferredBy();  referredBy.setAddress(address);  return referredBy;}  }
class C{  public void fixToggleVisibility(){  int lim=window.getContentPane().getComponentCount();  for (int i=0; i < lim; i++) {    Component c=window.getContentPane().getComponent(i);    if (c instanceof SplitPane) {      ((SplitPane)c).sizeDefault();    }  }}  }
class C{  public TableView(final Context context,final AttributeSet attributes,final int styleAttributes){  super(context,attributes,styleAttributes);  setOrientation(LinearLayout.VERTICAL);  setAttributes(attributes);  setupTableHeaderView(attributes);  setupTableDataView(attributes,styleAttributes);}  }
class C{  public synchronized void removeActionListener(ActionListener listener){  actionListeners.removeElement(listener);}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.451 -0500",hash_original_method="9C68345D80E74B8E583DD83B51C68973",hash_generated_method="23CE4BE721FB71F983A94D76D7BC97E8") public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void addBindingListener(BindingListener l){  bindingListenerList.add(BindingListener.class,l);}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}") @Produces(APPLICATION_JSON) public SecretDetailResponseV2 secretInfo(@Auth AutomationClient automationClient,@PathParam("name") String name){  SecretSeriesAndContent secret=secretDAO.getSecretByName(name).orElseThrow(null);  return SecretDetailResponseV2.builder().series(secret.series()).checksum(secret.content().hmac()).expiry(secret.content().expiry()).build();}  }
class C{  public final CC y(String y){  return corrPos(y,1);}  }
class C{  public static GetAlarms parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetAlarms object=new GetAlarms();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getAlarms".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetAlarms)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lastAlarmId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setLastAlarmId(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setLastAlarmId(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static WsSecuritySignature createWsSecuritySignatureCertificate(HolderOfKeyConfig config){  return new WsSecuritySignatureCertificate(config);}  }
class C{  public FastDoubleBuffer append(double[] array){  return append(array,0,array.length);}  }
class C{  @Override public Rect evaluate(float fraction,Rect startValue,Rect endValue){  return new Rect(startValue.left + (int)((endValue.left - startValue.left) * fraction),startValue.top + (int)((endValue.top - startValue.top) * fraction),startValue.right + (int)((endValue.right - startValue.right) * fraction),startValue.bottom + (int)((endValue.bottom - startValue.bottom) * fraction));}  }
class C{  public ClientParamsStack(ClientParamsStack stack,HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  this((aparams != null) ? aparams : stack.getApplicationParams(),(cparams != null) ? cparams : stack.getClientParams(),(rparams != null) ? rparams : stack.getRequestParams(),(oparams != null) ? oparams : stack.getOverrideParams());}  }
class C{  public MessageToSelf(Lifeline caller,Lifeline callee,SequenceDiagram diagram,MessageData data){  super(caller,callee,diagram,data);}  }
class C{  private static void stableStringSort(String[] arr,int start,int end){  stableStringSort(arr,arr,new String[end],start,end,0);}  }
class C{  public void addItemAtIndex(T item,int index){  if (index <= items.size()) {    items.add(index,item);    fireDataChangedEvent(DataChangedListener.ADDED,index);  }}  }
class C{  private void storePosition(){  Env.APP_SETTINGS.set(Settings.STORED_WINDOW_POSITION_X,getX());  Env.APP_SETTINGS.set(Settings.STORED_WINDOW_POSITION_Y,getY());}  }
class C{  public void testRandomHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,a,100 * RANDOM_MULTIPLIER,8192);}  }
class C{  protected void fillKernelOrdinates(ComplexArray ordinates,double bandWidth){  final int length=ordinates.length;  final double a=1.0 / (Math.sqrt(2.0 * Math.PI) * bandWidth);  final double precision=-0.5 / (bandWidth * bandWidth);  for (int i=0; i < length; i++) {    final double x=ordinates.real[i];    ordinates.real[i]=a * Math.exp(x * x * precision);  }}  }
class C{  public Response doGet(final Request req) throws Exception {  return new Response(HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,req.method);}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,TupleExpr last){  double lowestCardinality=Double.MAX_VALUE;  TupleExpr result=expressions.get(0);  expressions=getExprsWithSameVars(expressions,last);  for (  TupleExpr tupleExpr : expressions) {    double cardinality=cardinalityMap.get(tupleExpr);    if (cardinality < lowestCardinality) {      lowestCardinality=cardinality;      result=tupleExpr;    }  }  return result;}  }
class C{  public static void buildJSPResolver(FacesCompositeELResolver composite,ApplicationAssociate associate){  if (associate == null) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"associate");    throw new NullPointerException(message);  }  if (composite == null) {    String message=MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"composite");    throw new NullPointerException(message);  }  FacesContext facesContext=FacesContext.getCurrentInstance();  if (Util.getFacesConfigXmlVersion(facesContext).equals("2.3") || Util.getWebXmlVersion(facesContext).equals("4.0")) {    javax.enterprise.inject.spi.BeanManager beanManager=Util.getCdiBeanManager(facesContext);    if (beanManager != null) {      composite.add(beanManager.getELResolver());    } else {      throw new FacesException("Unable to find CDI BeanManager");    }    composite.add(FLASH_RESOLVER);    composite.addRootELResolver(MANAGED_BEAN_RESOLVER);    composite.addPropertyELResolver(RESOURCE_RESOLVER);    composite.addRootELResolver(FACES_BUNDLE_RESOLVER);    addELResolvers(composite,associate.getELResolversFromFacesConfig());    addVariableResolvers(composite,FacesCompositeELResolver.ELResolverChainType.JSP,associate);    addPropertyResolvers(composite,associate);    composite.add(associate.getApplicationELResolvers());  } else {    composite.addRootELResolver(IMPLICIT_JSP_RESOLVER);    composite.add(FLASH_RESOLVER);    composite.addRootELResolver(MANAGED_BEAN_RESOLVER);    composite.addPropertyELResolver(RESOURCE_RESOLVER);    composite.addRootELResolver(FACES_BUNDLE_RESOLVER);    addELResolvers(composite,associate.getELResolversFromFacesConfig());    addVariableResolvers(composite,FacesCompositeELResolver.ELResolverChainType.JSP,associate);    addPropertyResolvers(composite,associate);    composite.add(associate.getApplicationELResolvers());  }}  }
class C{  public void updateUI(){  super.updateUI();  setBackground(new Color(255,255,255,0));  setWrapStyleWord(true);  setHighlighter(null);  setEditable(false);  LookAndFeel.installBorder(this,"Label.border");  LookAndFeel.installColorsAndFont(this,"Label.background","Label.foreground","Label.font");  if (resizeHandler != null) {    resizeHandler.componentResized(null);  }  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);  if (policy != null) {    GUIUtils.restrictSize(this,policy);  }}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  int numTokens=tokenizer.countTokens();  type=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  where1=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  where2=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  if (numTokens > 5) {    for (int i=5; i <= numTokens - 1; i++) {      nextToken=nextToken + "," + tokenizer.nextToken();    }    orderBy=nextToken.substring(1,nextToken.length() - 1);  } else {    orderBy=nextToken.substring(1,nextToken.length() - 1);  }  macroId=Integer.parseInt(tokenizer.nextToken());}  }
class C{  protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);  producibleTypes=getProducibleTypes(exchange,producibleTypes);  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();  for (  MediaType acceptable : acceptableTypes) {    for (    MediaType producible : producibleTypes) {      if (acceptable.isCompatibleWith(producible)) {        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));      }    }  }  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);  MediaType.sortBySpecificityAndQuality(result);  for (  MediaType mediaType : compatibleMediaTypes) {    if (mediaType.isConcrete()) {      return mediaType;    } else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {      return MediaType.APPLICATION_OCTET_STREAM;    }  }  return null;}  }
class C{  public void writeVerifyTypeInfo(int tag,int data){  output.write(tag);  if (tag == StackMap.OBJECT || tag == StackMap.UNINIT)   write16bit(data);}  }
class C{  public TabbedInspector(Object[] objects,GUIState state,String name,String title,String[] tabNames){  if (objects == null)   throw new RuntimeException("Objects array provided is null.");  Properties[] properties=new SimpleProperties[objects.length];  for (int i=0; i < objects.length; i++)   properties[i]=Properties.getProperties(objects[i]);  buildTabbedInspector(properties,state,name,title,tabNames);}  }
class C{  public static void checkPermissions(IDiscordClient client,IChannel channel,EnumSet<Permissions> required) throws MissingPermissionsException {  checkPermissions(client.getOurUser(),channel,required);}  }
class C{  @Override public void processEvent(World world){  DTNHost host=world.getNodeByAddress(this.fromAddr);  if (id.equals(StandardEventsReader.ALL_MESSAGES_ID)) {    List<String> ids=new ArrayList<String>();    for (    Message m : host.getMessageCollection()) {      ids.add(m.getId());    }    for (    String nextId : ids) {      host.deleteMessage(nextId,drop);    }  } else {    host.deleteMessage(id,drop);  }}  }
class C{  public void insert(final int insIndex,final byte[] key,final byte[] val,final boolean rawRecord){  keys.insert(insIndex,key);  vals.insert(insIndex,val);  if (hasRawRecords()) {    System.arraycopy(rawRecords,insIndex,rawRecords,insIndex + 1,vals.nvalues - insIndex - 1);    rawRecords[insIndex]=rawRecord;  } else {    assert !rawRecord;  }  if (hasDeleteMarkers()) {    System.arraycopy(deleteMarkers,insIndex,deleteMarkers,insIndex + 1,vals.nvalues - insIndex - 1);    deleteMarkers[insIndex]=false;  }  if (hasVersionTimestamps()) {    System.arraycopy(versionTimestamps,insIndex,versionTimestamps,insIndex + 1,vals.nvalues - insIndex - 1);    versionTimestamps[insIndex]=0;  }}  }
class C{  public void exceptionOccured(Spy spy,String methodCall,Exception e,String sql,long execTime){  String classType=spy.getClassType();  Integer spyNo=spy.getConnectionNumber();  String header=spyNo + ". " + classType+ "."+ methodCall;  if (sql == null) {    jdbcLogger.error(header,e);    sqlOnlyLogger.error(header,e);    sqlTimingLogger.error(header,e);  } else {    sql=processSql(sql);    jdbcLogger.error(header + " " + sql,e);    if (sqlOnlyLogger.isDebugEnabled()) {      sqlOnlyLogger.error(getDebugInfo() + nl + spyNo+ ". "+ sql,e);    } else {      sqlOnlyLogger.error(header + " " + sql,e);    }    if (sqlTimingLogger.isDebugEnabled()) {      sqlTimingLogger.error(getDebugInfo() + nl + spyNo+ ". "+ sql+ " {FAILED after "+ execTime+ " msec}",e);    } else {      sqlTimingLogger.error(header + " FAILED! " + sql+ " {FAILED after "+ execTime+ " msec}",e);    }  }}  }
class C{  public static VOReport toVOReport(Report report,String reportUrlTemplate,LocalizerFacade facade){  VOReport voReport=new VOReport();  String reportName=report.getReportName();  voReport.setReportName(reportName);  reportUrlTemplate=ReportEngineUrl.replace(reportUrlTemplate,ReportEngineUrl.KEY_REPORTNAME,reportName);  reportUrlTemplate=ReportEngineUrl.replace(reportUrlTemplate,ReportEngineUrl.KEY_LOCALE,facade.getLocale());  voReport.setReportURLTemplate(reportUrlTemplate);  String localizedReportName=facade.getText(report.getKey(),LocalizedObjectTypes.REPORT_DESC);  voReport.setLocalizedReportName(localizedReportName);  return voReport;}  }
class C{  public boolean isExact(){  return estimateEnum == EstimateEnum.Exact;}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeUrl(bytes);}  }
class C{  public static void schedule(Context context){  if (isJobScheduled(context,JOB_ID)) {    Timber.d("This job has already been scheduled, ending");    JobScheduler scheduler=(JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);    scheduler.cancel(JOB_ID);  }  if (!UserPrefHelper.get(context).getBoolean(R.string.pref_key_enable_syncing)) {    return;  }  Timber.d("Scheduling");  UserPrefHelper helper=UserPrefHelper.get(context);  ComponentName comp=new ComponentName(context,PodcastSyncJobService.class);  JobInfo.Builder builder=new JobInfo.Builder(JOB_ID,comp).setPersisted(true).setRequiresDeviceIdle(false).setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY).setRequiresCharging(false).setPeriodic(helper.getStringAsInt(R.string.pref_key_syncing_period) * 60_000);  JobInfo job=builder.build();  JobScheduler scheduler=(JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);  scheduler.schedule(job);}  }
class C{  protected void buildMarkerGroup(){  if (startMarker != null && startMarkerProxy == null) {    startMarkerProxy=buildStartMarkerProxy();  }  if (middleMarker != null && middleMarkerProxies == null) {    middleMarkerProxies=buildMiddleMarkerProxies();  }  if (endMarker != null && endMarkerProxy == null) {    endMarkerProxy=buildEndMarkerProxy();  }  CompositeGraphicsNode group=new CompositeGraphicsNode();  List children=group.getChildren();  if (startMarkerProxy != null) {    children.add(startMarkerProxy);  }  if (middleMarkerProxies != null) {    for (int i=0; i < middleMarkerProxies.length; i++) {      children.add(middleMarkerProxies[i]);    }  }  if (endMarkerProxy != null) {    children.add(endMarkerProxy);  }  markerGroup=group;}  }
class C{  private static Pair<String,String> postIndexedRRX(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  instructions.add(ReilHelpers.createBsh(baseOffset++,bt,"C",wd,String.valueOf(31),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,bt,String.valueOf(-1),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public CalendarEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  public void addField(GridField field){  log.fine("(" + m_tableName + ") - "+ field.getColumnName());  if (m_open) {    log.log(Level.SEVERE,"Table already open - ignored: " + field.getColumnName());    return;  }  if (!MRole.getDefault(m_ctx,false).isColumnAccess(m_AD_Table_ID,field.getAD_Column_ID(),true)) {    log.fine("No Column Access " + field.getColumnName());    return;  }  if (field.isKey())   m_indexKeyColumn=m_fields.size();  if (field.getColumnName().equals("IsActive"))   m_indexActiveColumn=m_fields.size(); else   if (field.getColumnName().equals("Processed"))   m_indexProcessedColumn=m_fields.size(); else   if (field.getColumnName().equals("AD_Client_ID"))   m_indexClientColumn=m_fields.size(); else   if (field.getColumnName().equals("AD_Org_ID"))   m_indexOrgColumn=m_fields.size();  m_fields.add(field);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.051 -0500",hash_original_method="914BD43FF0612F84BA345FA6F486595C",hash_generated_method="A561E003CE14A65B9914402F4DEBD08B") final public boolean isRemoving(){  return mRemoving;}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public Shape hexagon(float x,float y,float height){  float width=height / 2;  m_path.reset();  m_path.moveTo(x,y + 0.5f * height);  m_path.lineTo(x + 0.5f * width,y);  m_path.lineTo(x + 1.5f * width,y);  m_path.lineTo(x + 2.0f * width,y + 0.5f * height);  m_path.lineTo(x + 1.5f * width,y + height);  m_path.lineTo(x + 0.5f * width,y + height);  m_path.closePath();  return m_path;}  }
class C{  public void onObtain(Player player){  getAndCheckAchievementsInCategory(player,Category.OBTAIN);}  }
class C{  void clearKeyStoreInfo(){  this.keyStoreName=null;  this.keyStoreType=null;  this.keyStoreProvider=null;  this.keyStorePwdURL=null;  this.keyStore=null;}  }
class C{  public MutableInt(){  super();}  }
class C{  protected static void logHierarchy(final Configuration c,int level){  if (LOG.isLoggable(Level.FINER)) {    StringBuilder space=new StringBuilder();    for (int i=0; i < level; i++) {      space.append("-");    }    LOG.finer(space + " " + c.getDescription()+ "("+ c.getHierarchy()+ ").");    for (    Configuration sub : c.getSubConfigurations()) {      logHierarchy(sub,level + 1);    }  }}  }
class C{  public CuboidRegion(Vector pos1,Vector pos2){  this(null,pos1,pos2);}  }
class C{  public ToStringBuilder append(int[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public boolean isShowReturnLink(){  return showReturnLink;}  }
class C{  public AsyncMessageHeader(AsyncMessageHeader other){  __isset_bitfield=other.__isset_bitfield;  this.transactionId=other.transactionId;}  }
class C{  @Override public String toString(){  return title;}  }
class C{  @Override public void onListTouch(MotionEvent event){  if (mCheckSlideToHide && (event.getY() > mMessageListView.getHeight())) {    mCheckSlideToHide=false;    MXCActionBarActivity.dismissKeyboard(getActivity());  }}  }
class C{  public String format(String zkUrl){  List<ZKAddress> addressList=parser.validateZkUrl(zkUrl);  StringBuilder builder=new StringBuilder();  addressList.forEach(null);  builder.deleteCharAt(0);  return builder.toString();}  }
class C{  @SuppressWarnings("unchecked") private void downloadSelectedFiles(){  int totalCount=0;  ArrayList<FormDetails> filesToDownload=new ArrayList<FormDetails>();  SparseBooleanArray sba=getListView().getCheckedItemPositions();  for (int i=0; i < getListView().getCount(); i++) {    if (sba.get(i,false)) {      HashMap<String,String> item=(HashMap<String,String>)getListAdapter().getItem(i);      filesToDownload.add(mFormNamesAndURLs.get(item.get(FORMDETAIL_KEY)));    }  }  totalCount=filesToDownload.size();  Collect.getInstance().getActivityLogger().logAction(this,"downloadSelectedFiles",Integer.toString(totalCount));  if (totalCount > 0) {    showDialog(PROGRESS_DIALOG);    mDownloadFormsTask=new DownloadFormsTask();    mDownloadFormsTask.setDownloaderListener(this);    mDownloadFormsTask.execute(filesToDownload);  } else {    Toast.makeText(getApplicationContext(),R.string.noselect_error,Toast.LENGTH_SHORT).show();  }}  }
class C{  public ShortcutCell(ShortcutCellAppearance<String> appearance){  super(appearance);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 174) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public IAgentVisualization createVisual(IVisualAgent agent){  if (agent instanceof Bee) {    return new AgentVisualization2DCube(agent);  }  return new AgentVisualization2DSpheric(agent);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CASE_CLAUSE__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be encoded using Q codec");  }}  }
class C{  private void jbInit() throws Exception {  bImport.setToolTipText(Msg.getMsg(Env.getCtx(),"Import"));  bImport.addActionListener(this);  bExport.setToolTipText(Msg.getMsg(Env.getCtx(),"Export"));  bExport.addActionListener(this);  bBold.setToolTipText(Msg.getMsg(Env.getCtx(),"Bold"));  bItalic.setToolTipText(Msg.getMsg(Env.getCtx(),"Italic"));  bUnderline.setToolTipText(Msg.getMsg(Env.getCtx(),"Underline"));  toolBar.add(bImport,null);  toolBar.add(bExport,null);  toolBar.addSeparator();  toolBar.add(bBold,null);  toolBar.add(bItalic,null);  toolBar.add(bUnderline,null);  toolBar.addSeparator();  editorPane.setContentType("text/html");  setJMenuBar(menuBar);  createMenuBar();  mainPanel.setLayout(mainLayout);  getContentPane().add(mainPanel,BorderLayout.CENTER);  mainPanel.add(toolBar,BorderLayout.NORTH);  mainPanel.add(editorScrollPane,BorderLayout.CENTER);  editorScrollPane.setPreferredSize(new Dimension(600,600));  editorScrollPane.getViewport().add(editorPane,null);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  public byte[] toWireBytes(Transaction t) throws IOException {  WireFormat.ArrayWriter writer=new WireFormat.ArrayWriter();  toWire(t,writer);  return writer.toByteArray();}  }
class C{  public static IPackageFragmentRoot createJarPackageFragmentRootFrom(File file,JavaProject project){  if (file == null) {    return null;  }  IPath resourcePath=new Path(file.getPath());  try {    IClasspathEntry entry=project.getClasspathEntryFor(resourcePath);    if (entry != null) {      return project.getPackageFragmentRoot(file);    }  } catch (  JavaModelException e) {  }  return null;}  }
class C{  @Pure public static MethodReference findOrCreate(TypeReference tRef,Atom mn,Atom md){  return MemberReference.findOrCreate(tRef,mn,md).asMethodReference();}  }
class C{  public UniformDiscrete(){  this(0,10);}  }
class C{  void replaceLastChild(State state){  assert hasChildren() : "No outgoing transitions.";  states[states.length - 1]=state;}  }
class C{  public static <T1,T2,R>Function2<T1,T2,R> memoizeBiFunction(Function2<T1,T2,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  public BlockingObservableAssert<T> emitsSingleValue(T value){  isNotNull();  valuesCountIs(1);  assertThat(getBlockingObservableExecutor().getValuesEmitted().get(0)).isEqualTo(value);  return this;}  }
class C{  public Call(String method,Object[] args){  serviceMethodName=method;  arguments=args;}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  private static int roundBits(int bitsRequired){  int index=Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE,bitsRequired);  if (index < 0) {    return SUPPORTED_BITS_PER_VALUE[-index - 1];  } else {    return bitsRequired;  }}  }
class C{  public void toByteArray(byte[] dst,int pos){  byte[] src=mId;  for (int i=0; i < 16; ++i) {    dst[pos + i]=src[i];  }}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  public void onDescriptorRead(String address,int status,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,ParcelUuid descrUuid,byte[] value){  if (DBG)   Log.d(TAG,"onDescriptorRead() - Device=" + address + " UUID="+ charUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid(),charInstId);  if (characteristic == null)   return;  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(descrUuid.getUuid());  if (descriptor == null)   return;  if (status == 0)   descriptor.setValue(value);  if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && mAuthRetry == false) {    try {      mAuthRetry=true;      mService.readDescriptor(mClientIf,address,srvcType,srvcInstId,srvcUuid,charInstId,charUuid,descrUuid,AUTHENTICATION_MITM);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  mAuthRetry=true;  try {    mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public XMLString trim(){  return new XString(str().trim());}  }
class C{  @Timed @ExceptionMetered @DELETE @Path("{name}") public Response deleteGroup(@Auth AutomationClient automationClient,@PathParam("name") String name){  Group group=groupDAO.getGroup(name).orElseThrow(null);  groupDAO.deleteGroup(group);  auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_DELETE,automationClient.getName(),group.getName()));  return Response.noContent().build();}  }
class C{  static void checkMemCapacity(int k,long n,boolean compact,long memCapBytes){  int metaPre=Family.QUANTILES.getMaxPreLongs() + 2;  int retainedItems=computeRetainedItems(k,n);  int reqBufBytes;  if (compact) {    reqBufBytes=(metaPre + retainedItems) << 3;  } else {    int totLevels=Util.computeNumLevelsNeeded(k,n);    reqBufBytes=(totLevels == 0) ? (metaPre + retainedItems) << 3 : (metaPre + (2 + totLevels) * k) << 3;  }  if (memCapBytes < reqBufBytes) {    throw new SketchesArgumentException("Possible corruption: Memory capacity too small: " + memCapBytes + " < "+ reqBufBytes);  }}  }
class C{  public Vector3f crossLocal(Vector3f v){  return crossLocal(v.x,v.y,v.z);}  }
class C{  public static void validateParticipantIdsEqual(String expectedParticipantId,String actualParticipantId) throws CryptoException {  if (!expectedParticipantId.equals(actualParticipantId)) {    throw new CryptoException("Received payload from incorrect partner (" + actualParticipantId + "). Expected to receive payload from "+ expectedParticipantId+ ".");  }}  }
class C{  private static boolean matchIntlPrefixAndCC(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;case 1:case 3:case 5:if (isISODigit(c)) state=6; else if (isNonSeparator(c)) return false;break;case 6:case 7:if (isISODigit(c)) state++; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;}}return state == 6 || state == 7 || state == 8;}  }
class C{  public TaskErrorMeta(TaskErrorType type,String details,Throwable throwable){  this.type=type;  this.errorTime=PcDateUtils.getNowDateTimeStrStandard();  this.details=details;  this.throwable=throwable;}  }
class C{  public double tds(final Double2D d1,final Double2D d2){  double dx=tdx(d1.x,d2.x);  double dy=tdy(d1.y,d2.y);  return (dx * dx + dy * dy);}  }
class C{  static <E>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  public static DAOStrategyManager newInstance(String displayName){  final DAOStrategyManager returnInstance=new DAOStrategyManager();  returnInstance.setDisplayName(displayName);  return returnInstance;}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public BerInputStream(InputStream in) throws IOException {  this(in,BUF_INCREASE_SIZE);}  }
class C{  public static Bitmap decodeBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public static void createTypeInstanceReference(final Connection connection,final int moduleId,final long address,final int position,final int expressionId,final int typeInstanceId) throws CouldntSaveDataException {  Preconditions.checkNotNull(connection,"Error: connection argument can not be null");  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater than zero");  Preconditions.checkArgument(position >= 0,"Error: position must be larger or equal to zero");  Preconditions.checkArgument(expressionId > 0,"Error: expression id must be larger or equal to zero");  Preconditions.checkArgument(typeInstanceId >= 0,"Error: type instance id must be larger or equal to zero");  final String query=" { call create_expression_type_instance(?, ?, ?, ?, ?) } ";  try {    final CallableStatement procedure=connection.prepareCall(query);    try {      procedure.setInt(1,moduleId);      procedure.setLong(2,address);      procedure.setInt(3,position);      procedure.setInt(4,expressionId);      procedure.setInt(5,typeInstanceId);      procedure.execute();    }  finally {      procedure.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  private GenerateMBeanHTML(PrintWriter pw){  this.pw=pw;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitCharMemberValue(this);}  }
class C{  public Element addAttribute(String attribute_name,Object attribute_value){  getElementHashEntry().put(attribute_name,attribute_value);  return (this);}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public String convertIteratorOfStatementToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  public CloseAction(){  super(CLOSE_CMD);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForHtmlTag instance=new ForHtmlTag();  String value="<div>";  String expected="&lt;div&gt;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public void keyPressed(KeyEvent e){  if (e.isAltDown() || e.isControlDown() || e.isMetaDown()|| e.isShiftDown()) {    return;  }  if ((e.getKeyCode() == accelerateKey) || (e.getKeyCode() == accelerateKey1)) {    accelerate1();  } else   if (e.getKeyCode() == accelerateKey2) {    accelerate10();  } else   if ((e.getKeyCode() == decelerateKey) || (e.getKeyCode() == decelerateKey1)) {    decelerate1();  } else   if (e.getKeyCode() == decelerateKey2) {    decelerate10();  } else   if (e.getKeyCode() == forwardKey) {    if (forwardButton.isEnabled()) {      forwardButton.doClick();    }  } else   if (e.getKeyCode() == reverseKey) {    if (reverseButton.isEnabled()) {      reverseButton.doClick();    }  } else   if (e.getKeyCode() == stopKey) {    if (speedSlider.isEnabled() || (speedSpinner != null && speedSpinner.isEnabled())) {      stop();    }  } else   if (e.getKeyCode() == idleKey) {    if (speedSlider.isEnabled() || (speedSpinner != null && speedSpinner.isEnabled())) {      speedSlider.setValue(0);    }  }}  }
class C{  static public PVector fromAngle(float angle){  return fromAngle(angle,null);}  }
class C{  public CpcLocalRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  private String chooseSignInRPSite(IdmAccessor idmAccessor,HttpServletRequest request,HttpServletResponse response,Locale locale) throws SamlServiceException {  Validate.notNull(idmAccessor,"idmAccessor");  Validate.notNull(request,"request");  Validate.notNull(response,"response");  String tenant=idmAccessor.getTenant();  Validate.notNull(tenant,"tenant");  String rp_selected=request.getParameter(Shared.RELAY_STATE_PARAMETER);  if (rp_selected != null && !rp_selected.isEmpty()) {    String rpID;    try {      rpID=URLDecoder.decode(rp_selected,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new SamlServiceException("Failed in URL-decoding RelayState: " + rp_selected,e);    }    log.debug("IDP_Initiated response has relay state which will be used for" + " identifying Relying Party. RelyingPartyID: " + rpID);    return rpID;  }  rp_selected=request.getHeader(Shared.RP_SELECTION_ENTITYID);  if (rp_selected != null && !rp_selected.isEmpty()) {    log.debug("IDP_Initiated response has \"CastleRPSelection\" header which will be used for identifying Relying Party.");    return rp_selected;  }  Collection<RelyingParty> rpCollection=idmAccessor.getRelyingParties(tenant);  Iterator<RelyingParty> it=rpCollection.iterator();  if (rpCollection.size() == 1) {    return it.next().getUrl();  }  List<String> rpEntityIdList=new ArrayList<String>();  List<String> rpNameList=new ArrayList<String>();  while (it.hasNext()) {    RelyingParty rp=it.next();    rpEntityIdList.add(rp.getUrl());    rpNameList.add(rp.getName());  }  request.setAttribute(RPSelectionParam_RPNameList,rpNameList);  request.setAttribute(RPSelectionParam_RPEntityIDList,rpEntityIdList);  String samlResponseStr=request.getParameter(Shared.SAML_RESPONSE_PARAMETER);  request.setAttribute(RPSelectionParam_SAMLResponse,StringEscapeUtils.escapeJavaScript(samlResponseStr));  request.setAttribute(RPSelectionParam_DialogTittle,messageSource.getMessage("ChooseService.Title",null,locale));  RequestDispatcher dispatcher=request.getRequestDispatcher(RPSelectionJSP);  try {    dispatcher.forward(request,response);  } catch (  Exception e) {    throw new SamlServiceException("Failed in dispatch request to RPSelection.jsp",e);  }  return null;}  }
class C{  public static Style createProxyStyle(Style... styles){  Style s=new Style();  s.proxyTo=styles;  return s;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.982 -0500",hash_original_method="9C8F11B1DE9667C53D0EB2C6FF74CC89",hash_generated_method="11BB745E9210EA37F0419F6FA283CA8A") public String encodeBody(){  this.parameters.setSeparator(Separators.COMMA);  return this.scheme + SP + parameters.encode();}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  @POST @Path("job/{noteId}") @ZeppelinApi public Response runNoteJobs(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {  LOG.info("run note jobs {} ",noteId);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  try {    note.runAll();  } catch (  Exception ex) {    LOG.error("Exception from run",ex);    return new JsonResponse<>(Status.PRECONDITION_FAILED,ex.getMessage() + "- Not selected or Invalid Interpreter bind").build();  }  return new JsonResponse<>(Status.OK).build();}  }
class C{  public IntIteratorSpliterator(java8.util.PrimitiveIterator.OfInt iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public Calendar(){  this(System.currentTimeMillis());}  }
class C{  @Override public String toString(){  return name;}  }
class C{  private boolean isSame(final String a,final String b){  if (a == null && b == null) {    return true;  } else   if (a == null || b == null) {    return false;  } else {    return a.equalsIgnoreCase(b);  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public EditableOMPoint(){  createGraphic(null);}  }
class C{  public JavaClass readFromClassPath(String classFile) throws IOException {  Thread thread=Thread.currentThread();  ClassLoader loader=thread.getContextClassLoader();  InputStream is=loader.getResourceAsStream(classFile);  try {    return parse(is);  }  finally {    is.close();  }}  }
class C{  public static int msToBytes(int ms,int sampleRate,int channels){  return (int)(((long)ms) * sampleRate * channels / 500);}  }
class C{  private void addUpperPlotData(List<CpuInformationData> cpuData){  for (  CpuInformationData data : cpuData) {    float cpuAverage=data.getTotalCpuUsage() / data.getCount();    cpuUsage.add(data.getTimeStamp().getTime(),cpuAverage,data.getMinCpuUsage(),data.getMaxCpuUsage(),false);  }  cpuUsage.fireSeriesChanged();}  }
class C{  public void hide(){  reset();  moveSpring().setCurrentValue(1);  moveSpring().setEndValue(0);}  }
class C{  public boolean isConnected(String clientHandle){  MqttConnection client=getConnection(clientHandle);  return client.isConnected();}  }
class C{  public User(int contextId,String name,int id){  super();  this.id=id;  if (this.id >= ID_SOURCE)   ID_SOURCE=this.id + 1;  this.contextId=contextId;  this.name=name;}  }
class C{  private boolean isInUse(String imageName){  Object multi=loadedResources.getResourceObject(imageName);  if (multi instanceof EditableResources.MultiImage) {    EditableResources.MultiImage m=(EditableResources.MultiImage)multi;    for (    com.codename1.ui.Image i : m.getInternalImages()) {      if (isInUse(i)) {        return true;      }    }    return false;  }  com.codename1.ui.Image resourceValue=loadedResources.getImage(imageName);  return isInUse(resourceValue);}  }
class C{  @Override public void process(ArrayList<K> tuple){  for (  K k : tuple) {    item.emit(cloneKey(k));  }}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public final String toString(){  StringBuffer sb=new StringBuffer();  if (getCodeset() != null) {    if (doctype != null)     sb.append(doctype.toString(getCodeset()));    sb.append(html.toString(getCodeset()));    return (sb.toString());  } else {    if (doctype != null)     sb.append(doctype.toString());    sb.append(html.toString());    return (sb.toString());  }}  }
class C{  public T caseAnonymous_action_2_(Anonymous_action_2_ object){  return null;}  }
class C{  public void line(int deltaX,int deltaY) throws IOException {  if (outstandingChanges) {    flushChangeRecords();  }  int numBits=OutStream.determineSignedBitSize(deltaX);  int dyBits=OutStream.determineSignedBitSize(deltaY);  if (dyBits > numBits) {    numBits=dyBits;  }  if (numBits < 2) {    numBits=2;  }  out.writeUBits(2,3);  out.writeUBits(4,numBits - 2);  if (deltaX != 0 && deltaY != 0) {    out.writeUBits(1,1);    out.writeSBits(numBits,deltaX);    out.writeSBits(numBits,deltaY);  } else {    out.writeUBits(1,0);    if (deltaY != 0) {      out.writeUBits(1,1);      out.writeSBits(numBits,deltaY);    } else {      out.writeUBits(1,0);      out.writeSBits(numBits,deltaX);    }  }}  }
class C{  public boolean existsInducingPath(Node node1,Node node2){  return GraphUtils.existsInducingPath(node1,node2,this);}  }
class C{  public LongMemberValue(int index,ConstPool cp){  super('J',cp);  this.valueIndex=index;}  }
class C{  public boolean onItemUse(ItemStack p_77648_1_,EntityPlayer p_77648_2_,World p_77648_3_,int p_77648_4_,int p_77648_5_,int p_77648_6_,int p_77648_7_,float p_77648_8_,float p_77648_9_,float p_77648_10_){  if (p_77648_3_.getBlock(p_77648_4_,p_77648_5_,p_77648_6_) == Blocks.jukebox && p_77648_3_.getBlockMetadata(p_77648_4_,p_77648_5_,p_77648_6_) == 0) {    if (p_77648_3_.isRemote) {      return true;    } else {      ((BlockJukebox)Blocks.jukebox).func_149926_b(p_77648_3_,p_77648_4_,p_77648_5_,p_77648_6_,p_77648_1_);      p_77648_3_.playAuxSFXAtEntity((EntityPlayer)null,1005,p_77648_4_,p_77648_5_,p_77648_6_,Item.getIdFromItem(this));      --p_77648_1_.stackSize;      return true;    }  } else {    return false;  }}  }
class C{  @JavascriptInterface public void showAbout(){  DialogUtil.showCustomDialog(getActivity(),getFragmentManager(),getString(R.string.action_about),"about_gank_app.html","app");}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0) {    OutputStreamWriter out=new OutputStreamWriter(System.out);    encode(System.in,out);    out.flush();    return;  }  decode(new InputStreamReader(System.in),System.out);  System.out.flush();}  }
class C{  public int format(String... args) throws UsageException {  CommandLineOptions parameters=processArgs(args);  if (parameters.version()) {    for (    String line : VERSION) {      errWriter.println(line);    }    return 0;  }  if (parameters.help()) {    throw new UsageException();  }  JavaFormatterOptions options=JavaFormatterOptions.builder().style(parameters.aosp() ? Style.AOSP : Style.GOOGLE).build();  if (parameters.stdin()) {    return formatStdin(parameters,options);  } else {    return formatFiles(parameters,options);  }}  }
class C{  public void pushContext(){  Context2 parentContext=currentContext;  currentContext=parentContext.getChild();  if (currentContext == null) {    currentContext=new Context2(parentContext);  } else {    currentContext.setParent(parentContext);  }}  }
class C{  public Ruleset(String description){  this.description=description;}  }
class C{  void notifyHeaderRowNotFound(){  createBubbleWindow(headerRowSpinner,BubbleStyle.ERROR,"io.dataimport.step.csv.format_specification.header_row_not_found");}  }
class C{  public static LagGraph serializableInstance(){  return new LagGraph();}  }
class C{  public void testSubtractMathContextEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.23121247898749E+41";  int cScale=-27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(15,RoundingMode.CEILING);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public static double weightedRMS(double sumOfProducts,double sumOfSquaredProducts){  return sumOfProducts / sumOfSquaredProducts;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public boolean sendNiResponse(int notifId,int userResponse){  try {    return mService.sendNiResponse(notifId,userResponse);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in sendNiResponse: ",e);    return false;  }}  }
class C{  public static byte[] rotate180(byte[] data,int imageWidth,int imageHeight){  int n=imageWidth * imageHeight;  byte[] yuv=new byte[n];  int i=n - 1;  for (int j=0; j < n; j++) {    yuv[i]=data[j];    i--;  }  return yuv;}  }
class C{  public MailOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public LMDirichletSimilarity(CollectionModel collectionModel,float mu){  super(collectionModel);  this.mu=mu;}  }
class C{  public void selectMapElement(MapElement mapElement){  if (mapElement == null) {    tree.setSelectionPath(null);    return;  }  DefaultMutableTreeNode treeNode=null;  if (mapElement instanceof Landmark) {    int n=landmarksNode.getChildCount();    for (int i=0; i < n; ++i) {      DefaultMutableTreeNode dmtn=(DefaultMutableTreeNode)landmarksNode.getChildAt(i);      if ((MapElement)dmtn.getUserObject() == mapElement) {        treeNode=dmtn;        break;      }    }    if (treeNode != null) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,landmarksNode,treeNode}));    }  } else   if (mapElement instanceof Tool) {    int n=toolsNode.getChildCount();    for (int i=0; i < n; ++i) {      DefaultMutableTreeNode dmtn=(DefaultMutableTreeNode)toolsNode.getChildAt(i);      if ((MapElement)dmtn.getUserObject() == mapElement) {        treeNode=dmtn;        break;      }    }    if (treeNode != null) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,toolsNode,treeNode}));    }  } else   if (mapElement instanceof LineSet) {    int n=lineSetsNode.getChildCount();    for (int i=0; i < n; ++i) {      DefaultMutableTreeNode dmtn=(DefaultMutableTreeNode)lineSetsNode.getChildAt(i);      if ((MapElement)dmtn.getUserObject() == mapElement) {        treeNode=dmtn;        break;      }    }    if (treeNode != null) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,lineSetsNode,treeNode}));    }  }}  }
class C{  protected PromisifyExpressionImpl(){  super();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("%d ",firstZero));  for (int i=0; i < Math.max(INITIAL_LENGTH,bits.length()); i++) {    sb.append(bits.get(i) ? "x" : ".");  }  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.TITLE_MASK; else   newMask=newMask & (~Agent.TITLE_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,s,a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  private static String resovlePropConfigFile(String prop){  if (prop != null && prop.startsWith("file://")) {    try {      String filePath=prop.substring(7);      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"UTF-8"));      StringBuffer sb=new StringBuffer();      String str=br.readLine();      while (str != null) {        sb.append(str);        str=br.readLine();      }      return sb.toString();    } catch (    IOException e) {      System.err.println("read classpath failed!");      throw new RuntimeException(" read classpath failed ",e);    }  }  return prop;}  }
class C{  public boolean smoothScrollToSection(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){  if (mTargetFastScrollPosition != info.fastScrollToItem.position) {    mTargetFastScrollPosition=info.fastScrollToItem.position;    smoothSnapToPosition(scrollY,availableScrollHeight,info);    return true;  }  return false;}  }
class C{  public static boolean isValidLocation(final Location test){  return isValidLocation(test,true);}  }
class C{  private void makeRoom(){  if (size <= MAX_SIZE) {    return;  }  indexFiles();  int removals=size - MAX_SIZE;  Iterator<File> i=accessOrder.values().iterator();  do {    delete(i.next());    i.remove();  } while (--removals > 0);}  }
class C{  protected void resetChildrenPaths(TreePath parentPath){  removeMapping(this);  if (parentPath == null)   path=new TreePath(getUserObject()); else   path=parentPath.pathByAddingChild(getUserObject());  addMapping(this);  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((TreeStateNode)getChildAt(counter)).resetChildrenPaths(path);}  }
class C{  private String formatDate(final Object date){  return DateFormatUtils.format(((Date)date).getTime(),"yyyy-MM-dd") + "T" + DateFormatUtils.format(((Date)date).getTime(),"HH:mm:ss")+ "Z";}  }
class C{  protected boolean nodeAncestorOf(Node node1,Node node2){  if (node2 == null || node1 == null) {    return false;  }  Node parent=getParentNode(node2);  while (parent != null && parent != node1) {    parent=getParentNode(parent);  }  return (parent == node1);}  }
class C{  public DownloadTask(String url,Path toFile){  this(url,toFile,null,null);}  }
class C{  public void test_execCreatedJarWithManifest() throws IOException, InterruptedException {  File jarFile=File.createTempFile("cts_dalvikExecTest_",".jar");  jarFile.deleteOnExit();  Manifest manifest=new Manifest();  Attributes attrs=manifest.getMainAttributes();  attrs.put(Attributes.Name.MANIFEST_VERSION,"3.1415962");  attrs.put(Attributes.Name.MAIN_CLASS,"dalvikExecTest.HelloWorld");  attrs.put(Attributes.Name.CLASS_PATH,jarFile.getName());  JarOutputStream jarOut=new JarOutputStream(new FileOutputStream(jarFile),manifest);  jarOut.putNextEntry(new JarEntry("classes.dex"));  Streams.copy(Support_Resources.getResourceStream("cts_dalvikExecTest_classes.dex"),jarOut);  jarOut.putNextEntry(new JarEntry("dalvikExecTest/myResource"));  jarOut.write("This Resource contains some text.".getBytes());  jarOut.close();  String res;  res=execDalvik(jarFile.getAbsolutePath(),"dalvikExecTest.HelloWorld");  assertEquals("Hello Android World!","Hello Android World!\n",res);  res=execDalvik(jarFile.getAbsolutePath(),"dalvikExecTest.ResourceDumper");  assertTrue("Android Resource Dumper started",res.contains("Android Resource Dumper started"));  assertTrue("This Resource contains some text.",res.contains("This Resource contains some text."));  JarFile jarIn=new JarFile(jarFile);  manifest=jarIn.getManifest();  attrs=manifest.getMainAttributes();  assertEquals("MANIFEST_VERSION must match!","3.1415962",attrs.get(Attributes.Name.MANIFEST_VERSION));  assertEquals("MAIN_CLASS must match!","dalvikExecTest.HelloWorld",attrs.get(Attributes.Name.MAIN_CLASS));  assertEquals("CLASS_PATH must match!",jarFile.getName(),attrs.get(Attributes.Name.CLASS_PATH));}  }
class C{  public static void trustAllHttpsCertificates(){  if (isDeprecatedSSLProtocol()) {    __trustAllHttpsCertificates();  } else {    _trustAllHttpsCertificates();  }}  }
class C{  public String format(double val){  DecimalFormat df=getDoubleFormat();  if (df != null) {    return df.format(val);  }  return Double.toString(val);}  }
class C{  public static void experimenterFromString(OFFlowMod.Builder fmb,String inst,Logger log){}  }
class C{  public boolean isPrimitive(){  return true;}  }
class C{  private Calendar parse(final Class sourceType,final Class targetType,final String value) throws Exception {  Exception firstEx=null;  for (  String pattern : this.patterns) {    try {      DateFormat format=this.getFormat(pattern);      Calendar calendar=this.parse(sourceType,targetType,value,format);      return calendar;    } catch (    Exception ex) {      if (firstEx == null) {        firstEx=ex;      }    }  }  if (this.patterns.length > 1) {    throw new ConversionException("Error converting '" + this.toString(sourceType) + "' to '"+ this.toString(targetType)+ "' using  patterns '"+ this.displayPatterns+ "'");  } else {    throw firstEx;  }}  }
class C{  ArrayList<Pedestrian> populate(SillyPeds sp,int numPeds){  ArrayList<Pedestrian> peds=new ArrayList<Pedestrian>();  ArrayList<Tile> randomTiles=new ArrayList<Tile>(this.validTiles);  Random rng=new Random();  Collections.shuffle(randomTiles,rng);  assert validTiles.size() >= numPeds : "not enough valid tiles";  for (int i=0; i < numPeds; i++) {    Tile t=randomTiles.get(i);    Pedestrian p=new Pedestrian(sp,this,t);    t.addPed(p);    peds.add(p);    sp.schedule.scheduleOnce(p,(int)(1 + t.baseheight));  }  return peds;}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  @Override public boolean onMenuItemSelected(int featureId,MenuItem item){  if (super.onMenuItemSelected(featureId,item)) {    return true;  }switch (featureId) {case Window.FEATURE_OPTIONS_PANEL:    return mFragments.dispatchOptionsItemSelected(item);case Window.FEATURE_CONTEXT_MENU:  return mFragments.dispatchContextItemSelected(item);default :return false;}}  }
class C{  public byte[] encryptViaKek(byte[] content){  return cryptoViaKek(content,Cipher.ENCRYPT_MODE);}  }
class C{  public List<AgentKey> sort(@Nullable List<String> agentKeys) throws AgentException {  List<AgentKey> sorted=new ArrayList<>();  Set<String> pending=new HashSet<>();  if (agentKeys != null) {    for (    String agentKey : agentKeys) {      if (agentKey != null) {        doSort(AgentKeyImpl.parse(agentKey),sorted,pending);      }    }  }  return sorted;}  }
class C{  private boolean isIncluded(final HttpServletRequest request){  String uri=(String)request.getAttribute("javax.servlet.include.request_uri");  boolean includeRequest=!(uri == null);  if (includeRequest && log.isDebugEnabled()) {    log.debug("{} resulted in an include request. This is unusable, because" + "the response will be assembled into the overrall response. Not gzipping.",request.getRequestURL());  }  return includeRequest;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public ErrorMessage(ErrorMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }  if (other.isSetType()) {    this.type=other.type;  }}  }
class C{  public static ModifierKeyword toKeyword(String keyword){  return (ModifierKeyword)KEYWORDS.get(keyword);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void pushRegister(int registerNumber) throws IOException {  pushValues.add(new Byte((byte)registerNumber));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String description,PortProvider portProvider,String... fileExtensions){  return makeFileParameterType(parameterHandler,parameterName,description,portProvider,false,fileExtensions);}  }
class C{  public Doctype addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public <T extends Node>T addLabeled(String text,T ctrl,int span){  add(new Label(text));  return add(ctrl,span);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.276 -0500",hash_original_method="35BDC5101A4DE38616FDCE6EF4D8CA10",hash_generated_method="35BDC5101A4DE38616FDCE6EF4D8CA10") Arguments(String args[]) throws IllegalArgumentException {  parseArgs(args);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static <T extends GenericDeclaration>TypeVariableImpl<T> make(T decl,String name,FieldTypeSignature[] bs,GenericsFactory f){  if (!((decl instanceof Class) || (decl instanceof Method) || (decl instanceof Constructor))) {    throw new AssertionError("Unexpected kind of GenericDeclaration" + decl.getClass().toString());  }  return new TypeVariableImpl<T>(decl,name,bs,f);}  }
class C{  private double diffAvgNoNegative(long v1,long v2,long ts1,long ts2,long uptime,boolean avg,int adjustment){  long diff=v1 - v2;  long interval=ts1 - ts2;  if (diff < 0) {    diff=uptime > 0 ? v1 : 0;    interval=uptime > 0 ? uptime * 1000 : 0;  }  if (!avg || diff == 0)   return diff;  return ((double)(diff * adjustment)) / (double)interval;}  }
class C{  public void onFragmentPlayPause(Movie movie,int position,Boolean playPause){  mVideoView.setVideoPath(movie.getVideoUrl());  if (position == 0 || mPlaybackState == LeanbackPlaybackState.IDLE) {    setupCallbacks();    mPlaybackState=LeanbackPlaybackState.IDLE;  }  if (playPause && mPlaybackState != LeanbackPlaybackState.PLAYING) {    mPlaybackState=LeanbackPlaybackState.PLAYING;    if (position > 0) {      mVideoView.seekTo(position);      mVideoView.start();    }  } else {    mPlaybackState=LeanbackPlaybackState.PAUSED;    mVideoView.pause();  }  updatePlaybackState(position);  updateMetadata(movie);}  }
class C{  public void clearPreferences(){  PreferenceManager.getDefaultSharedPreferences(App.getInstance()).edit().clear().commit();}  }
class C{  public void testKeyPairGenerator09() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i],validProvider);    assertEquals("Incorrect algorithm",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());    assertEquals("Incorrect provider",kpg.getProvider(),validProvider);  }}  }
class C{  @Override public void next(int frames) throws IOException {  next(frames,true);}  }
class C{  public int tag(){  return tag;}  }
class C{  public boolean isConsistentHashOwner(final String key){  final NodeAddress owner=getConsistentHashOwner(key);  return clusterPeer.localAddress().equals(owner);}  }
class C{  public void test_ticket_1202b() throws Exception {  new TestHelper("ticket-1202-group05","ticket-1202-group05.rq","ticket-1202-group05.ttl","ticket-1202-group05.srx").runTest();}  }
class C{  public UserTokenPolicy findUserTokenPolicy(String policyId){  if (UserIdentityTokens == null)   return null;  for (  UserTokenPolicy policy : UserIdentityTokens)   if (policy != null) {    final String p=policy.getPolicyId();    if (p != null && p.equals(policyId))     return policy;  }  return null;}  }
class C{  public static IBrowserDescriptor createBrowserDescriptor(String browserName,String browserLocation){  assert browserName != null;  assert browserLocation != null;  IBrowserDescriptorWorkingCopy browserWc=BrowserManager.getInstance().createExternalWebBrowser();  browserWc.setName(browserName);  if (Platform.OS_MACOSX.equals(Platform.getOS())) {    browserWc.setLocation("/usr/bin/open");    browserWc.setParameters("-a \"" + browserLocation + "\" %URL%");  } else {    browserWc.setLocation(browserLocation);    browserWc.setParameters("%URL%");  }  return browserWc.save();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.d(TAG,"onCreate()");  super.onCreate(savedInstanceState);  setContentView(R.layout.download_image_activity);  mLoadingProgressBar=(ProgressBar)findViewById(R.id.progressBar_loading);}  }
class C{  @LargeTest public void testCameraPairwiseScenario17() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MIN,WhiteBalance.INCANDESCENT,SceneMode.AUTO,PictureSize.SMALL,Geotagging.OFF);}  }
class C{  protected void logout(HttpSecurity http) throws Exception {  http.logout().logoutSuccessHandler(logoutSuccessHandler).invalidateHttpSession(true).deleteCookies("JSESSIONID");}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public LinkedList<Patch> patch_make(String text1,LinkedList<Diff> diffs){  if (text1 == null || diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Patch> patches=new LinkedList<Patch>();  if (diffs.isEmpty()) {    return patches;  }  Patch patch=new Patch();  int char_count1=0;  int char_count2=0;  String prepatch_text=text1;  String postpatch_text=text1;  for (  Diff aDiff : diffs) {    if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {      patch.start1=char_count1;      patch.start2=char_count2;    }switch (aDiff.operation) {case INSERT:      patch.diffs.add(aDiff);    patch.length2+=aDiff.text.length();  postpatch_text=postpatch_text.substring(0,char_count2) + aDiff.text + postpatch_text.substring(char_count2);break;case DELETE:patch.length1+=aDiff.text.length();patch.diffs.add(aDiff);postpatch_text=postpatch_text.substring(0,char_count2) + postpatch_text.substring(char_count2 + aDiff.text.length());break;case EQUAL:if (aDiff.text.length() <= 2 * Patch_Margin && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {patch.diffs.add(aDiff);patch.length1+=aDiff.text.length();patch.length2+=aDiff.text.length();}if (aDiff.text.length() >= 2 * Patch_Margin) {if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);patch=new Patch();prepatch_text=postpatch_text;char_count1=char_count2;}}break;}if (aDiff.operation != Operation.INSERT) {char_count1+=aDiff.text.length();}if (aDiff.operation != Operation.DELETE) {char_count2+=aDiff.text.length();}}if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);}return patches;}  }
class C{  public void addColor(ColorRGB color){  this.listOfColors.add(color);  observeForChanges(color);  fireUpdate(this);}  }
class C{  boolean equalImports(LocalSymbolTableImports other){  return Arrays.equals(myImports,other.myImports);}  }
class C{  @Override public void write(String str,int off,int len) throws IOException {  if (len <= 0) {    return;  }  if (charsSinceNewline > 0) {    if (str.charAt(off) != CARRIAGE_RETURN) {      super.write(NEWLINEC,0,NEWLINEC.length);      charsSinceNewline=0;    } else {      int nonnl=countNonNewline(str,off + 1,len - 1);      if (nonnl < charsSinceNewline) {        super.write(CARRIAGE_RETURN);        while (charsSinceNewline > 0) {          final int n=Math.min(charsSinceNewline,WHITESPACE.length());          super.write(WHITESPACE,0,n);          charsSinceNewline-=n;        }      } else {        charsSinceNewline=0;      }    }  }  charsSinceNewline=tailingNonNewline(str,off,len);  super.write(str,off,len);  flush();}  }
class C{  public Object clone(){  try {    GridBagConstraints c=(GridBagConstraints)super.clone();    c.insets=(Insets)insets.clone();    return c;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void httpRequest(HttpRequestEvent e) throws IOException {  e.getWriter().write(e.getRequest());}  }
class C{  @Override public int byteLength(){  return 1 + 1 + LongPacker.getByteLength(value);}  }
class C{  public void testCcd(){  Node a=new ContinuousVariable("A");  Node b=new ContinuousVariable("B");  Node x=new ContinuousVariable("X");  Node y=new ContinuousVariable("Y");  Graph graph=new EdgeListGraph();  graph.addNode(a);  graph.addNode(b);  graph.addNode(x);  graph.addNode(y);  graph.addDirectedEdge(a,x);  graph.addDirectedEdge(b,y);  graph.addDirectedEdge(x,y);  graph.addDirectedEdge(y,x);  IndTestDSep test=new IndTestDSep(graph);  Ccd ccd=new Ccd(test);  Graph outPag=ccd.search();  boolean b0=PagUtils.graphInPagStep0(outPag,graph);  if (!b0) {    fail();  }  boolean b1=PagUtils.graphInPagStep1(outPag,graph);  if (!b1) {    fail();  }  boolean b2=PagUtils.graphInPagStep2(outPag,graph);  if (!b2) {    fail();  }  boolean b3=PagUtils.graphInPagStep3(outPag,graph);  if (!b3) {    fail();  }  boolean b4=PagUtils.graphInPagStep4(outPag,graph);  if (!b4) {    fail();  }  boolean b5=PagUtils.graphInPagStep5(outPag,graph);  if (!b5) {    fail();  }}  }
class C{  private void parseBAMEA(Element meaTag,Entity entity){  if (!(entity instanceof BattleArmor)) {    warning.append("Found a BA MEA tag but Entity is not " + "BattleArmor!\n");    return;  }  String meaMountLocString=meaTag.getAttribute(BA_MEA_MOUNT_LOC);  String manipTypeName=meaTag.getAttribute(BA_MEA_TYPE_NAME);  if (meaMountLocString.length() == 0) {    warning.append("antiPersonnelMount tag does not specify " + "a baMeaMountLoc!\n");    return;  }  EquipmentType manipType=null;  if (manipTypeName.length() > 0) {    manipType=EquipmentType.get(manipTypeName);  }  Mounted mountedManip=null;  int meaMountLoc=Integer.parseInt(meaMountLocString);  boolean foundMea=false;  for (  Mounted m : entity.getEquipment()) {    if (m.getBaMountLoc() != meaMountLoc) {      continue;    }    if (m.getType().hasFlag(MiscType.F_BA_MEA)) {      foundMea=true;      break;    }  }  if (!foundMea) {    warning.append("No modular equipment mount found in specified " + "location! Location: " + meaMountLoc + "\n");    return;  }  if (meaMountLoc == BattleArmor.MOUNT_LOC_LARM) {    mountedManip=((BattleArmor)entity).getLeftManipulator();  } else   if (meaMountLoc == BattleArmor.MOUNT_LOC_RARM) {    mountedManip=((BattleArmor)entity).getRightManipulator();  }  if (mountedManip != null) {    entity.getEquipment().remove(mountedManip);    entity.getMisc().remove(mountedManip);  }  if (manipType == null) {    return;  }  try {    int baMountLoc=mountedManip.getBaMountLoc();    mountedManip=entity.addEquipment(manipType,mountedManip.getLocation());    mountedManip.setBaMountLoc(baMountLoc);  } catch (  LocationFullException ex) {    ex.printStackTrace();  }}  }
class C{  public static void updateTileEntityField(TileEntity te,String field){  try {    if (NetworkManager_updateTileEntityField == null)     NetworkManager_updateTileEntityField=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("updateTileEntityField",TileEntity.class,String.class);    if (instance == null)     instance=getInstance();    NetworkManager_updateTileEntityField.invoke(instance,te,field);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void addItems(Collection<Item> itemsToAdd){  if (itemsToAdd == null)   return;  for (  Item i : itemsToAdd) {    addItem(i);  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("zero",null));}  }
class C{  public void fillUpAllCoresForShard(SolrCore bestReplica,Map<String,String> coreToNodeMap){  for (  String core : coreToNodeMap.keySet()) {    String currentCore=core;    logger.info("Using " + bestReplica.name + " for "+ currentCore);    coreToBestReplicaMappingByHealth.put(currentCore,bestReplica);  }}  }
class C{  @Override public TextAnnotation createTextAnnotation(String corpusId,String textId,String text) throws IllegalArgumentException {  Tokenizer.Tokenization tokenization=tokenizer.tokenizeTextSpan(text);  return new TextAnnotation(corpusId,textId,text,tokenization.getCharacterOffsets(),tokenization.getTokens(),tokenization.getSentenceEndTokenIndexes());}  }
class C{  public void testGenerateHighest() throws Exception {  final int NUM_RESULTS=2;  ArrayList<URLCrawlDatum> list=new ArrayList<URLCrawlDatum>();  for (int i=0; i <= 100; i++) {    list.add(createURLCrawlDatum("http://aaa/" + pad(i),1,i));  }  createCrawlDB(list);  Path generatedSegment=generateFetchlist(NUM_RESULTS,conf,false);  Path fetchlist=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  ArrayList<URLCrawlDatum> l=readContents(fetchlist);  Collections.sort(l,new ScoreComparator());  assertEquals(NUM_RESULTS,l.size());  assertEquals("http://aaa/100",(l.get(0).url.toString()));  assertEquals("http://aaa/099",(l.get(1).url.toString()));}  }
class C{  private void assertExecutable() throws ModbusException {  if (request == null || transport == null) {    throw new ModbusException("Assertion failed, transaction not executable");  }}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.SINGLE_ASSOCIATION_END___MULTIPLICITY_1:    return ((InternalEList<?>)getMultiplicity_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void medianPos(int i,mxGraphHierarchyModel model){  boolean downwardSweep=(i % 2 == 0);  if (downwardSweep) {    for (int j=model.maxRank; j > 0; j--) {      rankMedianPosition(j - 1,model,j);    }  } else {    for (int j=0; j < model.maxRank - 1; j++) {      rankMedianPosition(j + 1,model,j);    }  }}  }
class C{  private void logAuth(Auth auth){  try {    if (log.isDebugEnabled()) {      Marshaller marshaller=getContext().createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);      marshaller.setProperty(Marshaller.JAXB_ENCODING,"UTF-8");      StringWriter sw=new StringWriter();      marshaller.marshal(auth,sw);      log.debug(sw.toString());    }  } catch (  Exception e) {    log.error("Error while logging auth",e);  }}  }
class C{  public void testIntersect() throws Exception {  for (int i=0; i < numIterations; i++) {    String reg=AutomatonTestUtil.randomRegexp(random());    Automaton automaton=new RegExp(reg,RegExp.NONE).toAutomaton();    CompiledAutomaton ca=new CompiledAutomaton(automaton,Operations.isFinite(automaton),false);    TermsEnum te=MultiFields.getTerms(reader,"field").intersect(ca,null);    Automaton expected=Operations.determinize(Operations.intersection(termsAutomaton,automaton),DEFAULT_MAX_DETERMINIZED_STATES);    TreeSet<BytesRef> found=new TreeSet<>();    while (te.next() != null) {      found.add(BytesRef.deepCopyOf(te.term()));    }    Automaton actual=Operations.determinize(Automata.makeStringUnion(found),DEFAULT_MAX_DETERMINIZED_STATES);    assertTrue(Operations.sameLanguage(expected,actual));  }}  }
class C{  public ConnectionClosedException(String message){  super(message);}  }
class C{  public SwingFormFactory(){}  }
class C{  public String expressionTipText(){  return "The regular expression to match the attribute names against.";}  }
class C{  public LuaValue show(U view,Varargs varargs){  final CharSequence text=LuaViewUtil.getText(varargs.optvalue(2,NIL));  return view.show(text);}  }
class C{  private void doUUID(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  buildAndCommitResponse(resp,HTTP_OK,MIME_TEXT_PLAIN,UUID.randomUUID().toString());}  }
class C{  protected void smartIndentAfterNewLine(IDocument document,DocumentCommand command){  int docLength=document.getLength();  if (command.offset == -1 || docLength == 0) {    return;  }  try {    int p=(command.offset == docLength ? command.offset - 1 : command.offset);    int line=document.getLineOfOffset(p);    StringBuffer buf=new StringBuffer(command.text);    if (command.offset < docLength && document.getChar(command.offset) == '}') {      int indLine=findMatchingOpenBracket(document,line,command.offset,0);      if (indLine == -1) {        indLine=line;      }      buf.append(getIndentOfLine(document,indLine));    } else {      int start=document.getLineOffset(line);      int whiteend=findEndOfWhiteSpace(document,start,command.offset);      buf.append(document.get(start,whiteend - start));      if (getBracketCount(document,start,command.offset,true) > 0) {        buf.append(getIndentToken());      }    }    command.text=buf.toString();  } catch (  BadLocationException e) {    GWTPluginLog.logError(e);  }}  }
class C{  public ServiceAlreadyExistsException(String message){  super(message);}  }
class C{  public ArbitraryLengthPath(Scope scope,Var subjVar,TupleExpr pathExpression,Var objVar,Var conVar,long minLength){  setScope(scope);  setSubjectVar(subjVar);  setPathExpression(pathExpression);  setObjectVar(objVar);  setContextVar(conVar);  setMinLength(minLength);}  }
class C{  protected void checkBoundaryCompatibility(){  if (from instanceof String && to instanceof String) {    final String start=from.toString();    final String end=to.toString();    if (start.length() != end.length()) {      throw new IllegalArgumentException("Incompatible Strings for Range: different length");    }    final int length=start.length();    int i;    for (i=0; i < length; i++) {      if (start.charAt(i) != end.charAt(i)) {        break;      }    }    if (i < length - 1) {      throw new IllegalArgumentException("Incompatible Strings for Range: String#next() will not reach the expected value");    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public ConfigExceptionLocation(String location,String msg){  super(location + msg);  _location=location;}  }
class C{  private void insertEpilogue(Instruction ret){  if (ir.compiledMethod.isSaveVolatile()) {    restoreVolatileRegisters(ret);  }  restoreNonVolatiles(ret);  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register temp=phys.getTemp();  Register FP=phys.getFP();  ret.insertBefore(MIR_Load.create(PPC_LAddr,A(temp),A(FP),IC(STACKFRAME_RETURN_ADDRESS_OFFSET.toInt() + frameSize)));  ret.insertBefore(MIR_Move.create(PPC_MTSPR,A(phys.getLR()),A(phys.getTemp())));  ret.insertBefore(MIR_Binary.create(PPC_ADDI,A(FP),A(FP),IC(frameSize)));}  }
class C{  public Object clone(){  SyntaxScheme shcs=null;  try {    shcs=(SyntaxScheme)super.clone();  } catch (  CloneNotSupportedException cnse) {    cnse.printStackTrace();    return null;  }  shcs.styles=new Style[Token.NUM_TOKEN_TYPES];  for (int i=0; i < Token.NUM_TOKEN_TYPES; i++) {    Style s=styles[i];    if (s != null) {      shcs.styles[i]=(Style)s.clone();    }  }  return shcs;}  }
class C{  public boolean isActive(){  return isOpen() && this.c != null;}  }
class C{  public void abort(){  aborted=true;  if (waitingThread != null)   waitingThread.interrupt();}  }
class C{  protected void preprocessType(Type t){  typePreprocessor.visit(t);}  }
class C{  public Task<BlockConsistencyGroupRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  BuiltInProjectNode(final Node parent,final IN4JSProject project){  super(parent);  checkNotNull(project,"project");  checkArgument(project.exists(),"Project '" + project.getProjectId() + "' does not exist.");  this.project=project;}  }
class C{  public cudaResourceViewDesc(){}  }
class C{  public GridNode(String id){  this.id=id;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc,h.itf);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public ObjectMatrix1D assign(ObjectMatrix1D source){  if (!(source instanceof DenseObjectMatrix1D)) {    return super.assign(source);  }  DenseObjectMatrix1D other=(DenseObjectMatrix1D)source;  if (other == this)   return this;  checkSize(other);  if (isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  if (haveSharedCells(other)) {    ObjectMatrix1D c=other.copy();    if (!(c instanceof DenseObjectMatrix1D)) {      return super.assign(source);    }    other=(DenseObjectMatrix1D)c;  }  final Object[] elems=this.elements;  final Object[] otherElems=other.elements;  if (elements == null || otherElems == null)   throw new InternalError();  int s=this.stride;  int ys=other.stride;  int index=index(0);  int otherIndex=other.index(0);  for (int k=size; --k >= 0; ) {    elems[index]=otherElems[otherIndex];    index+=s;    otherIndex+=ys;  }  return this;}  }
class C{  public T1 v1(){  return v1;}  }
class C{  public static void assertContainerRam(Set<PackingPlan.ContainerPlan> containerPlans,long maxRamforResources){  for (  PackingPlan.ContainerPlan containerPlan : containerPlans) {    Assert.assertTrue(String.format("Container with id: %d requires more RAM (%d) than" + " the maximum RAM allowed (%d)",containerPlan.getId(),containerPlan.getRequiredResource().getRam(),maxRamforResources),containerPlan.getRequiredResource().getRam() <= maxRamforResources);  }}  }
class C{  public TermVectorsRequest parent(String parent){  if (routing == null) {    routing=parent;  }  return this;}  }
class C{  @Ignore @Test public void javabeanTester(){  JavaBeanTester.builder(DisconnectedLogDestination.class).loadData().test();}  }
class C{  public void disconnectPort(XpaPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected XpaPortController");  }  controller=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatedocumentfragment.class,args);}  }
class C{  public static Validator<String> custom(Predicate<String> predicate){  return custom(predicate,null);}  }
class C{  public FastNondominatedSorting(){  super();}  }
class C{  public void send(JetstreamMessage msg) throws Exception {  if (msg == null) {    throw new Exception("Null object being passed in");  }  Request req=new ZKSendMessageRequest(this,msg);  if (!m_requestQueue.offer(req))   LOGGER.warn("Request Queue is Full..");}  }
class C{  public XMLClassifier() throws Exception {  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int removeDuplicates(int[] A){  if (A == null)   return 0;  int n=A.length;  if (n <= 2)   return n;  int len=2, i=2;  while (i < n) {    if (A[i] != A[len - 2])     A[len++]=A[i];    i++;  }  return len;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private AttrAccept(final String val){  super(val);  encodings=val.split("[\\s,]+");}  }
class C{  @SuppressWarnings("unused") private void clearAllSlots(){  slots.stream().forEach(null);}  }
class C{  public ReceivingOrder(String ordId){  super(ordId);}  }
class C{  public static String description(ObjectReference ref){  ReferenceType clazz=ref.referenceType();  long id=ref.uniqueID();  if (clazz == null) {    return toHex(id);  } else {    return "(" + clazz.name() + ")"+ toHex(id);  }}  }
class C{  public sun.net.ftp.FtpClient enablePassiveMode(boolean passive){  return this;}  }
class C{  public NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodeset();}  }
class C{  public ResponseFuture request(Object request,int timeout) throws RemotingException {  return client.request(request,timeout);}  }
class C{  public void transform(Transform m){  if (m != null && !m.isIdentity()) {    m.transformPoints(2,points,0,points,0,pointSize / 2);  }}  }
class C{  public boolean print_debug(){  return soot.PhaseOptions.getBoolean(options,"print-debug");}  }
class C{  public boolean isPortrait(){  return impl.isPortrait();}  }
class C{  public void updateTitle(){  setTitle(TITLE_STRING + " " + VERSION_STRING+ " - "+ username+ " - "+ getUserTableModel().getRowCount()+ " users");}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(" Instruction: ").append(inst.getBytecodeIndex()).append(", ").append(inst);  for (  RegSpillListElement elem : regSpillList) {    buf.append(elem).append("  ");  }  buf.append("\n");  return buf.toString();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.453 -0500",hash_original_method="76BE8FDE36BAF0086F9828D261C3B7B9",hash_generated_method="89A0EA0F4EC0324074E4DA97776F9D16") synchronized boolean testAndSetIsDialogTerminatedEventDelivered(){  boolean retval=this.dialogTerminatedEventDelivered;  this.dialogTerminatedEventDelivered=true;  return retval;}  }
class C{  private boolean isOneOf(char ch,final char[] charray){  boolean result=false;  for (  char element : charray) {    if (ch == element) {      result=true;      break;    }  }  return result;}  }
class C{  public Webserver(String port) throws IOException {  this(Integer.parseInt(port));}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultTableXYDataset)) {    return false;  }  DefaultTableXYDataset that=(DefaultTableXYDataset)obj;  if (this.autoPrune != that.autoPrune) {    return false;  }  if (this.propagateEvents != that.propagateEvents) {    return false;  }  if (!this.intervalDelegate.equals(that.intervalDelegate)) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public boolean isFullyZoomedOutY(){  if (mScaleY > mMinScaleY || mMinScaleY > 1f)   return false; else   return true;}  }
class C{  public Wine runForeground(String executableToRun) throws CancelException {  runForeground(executableToRun,null,null);  return this;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append(ARFF_RELATION).append(" ").append(Utils.quote(m_RelationName)).append("\n\n");  for (int i=0; i < numAttributes(); i++) {    text.append(attribute(i)).append("\n");  }  text.append("\n").append(ARFF_DATA).append("\n");  text.append(stringWithoutHeader());  return text.toString();}  }
class C{  public BaseDownloadTask create(final String url){  return new DownloadTask(url);}  }
class C{  public static double trimTo3Digits(final double value){  return ((long)(1e3d * value)) / 1e3d;}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public boolean match(InfixExpression node,Object other){  if (!(other instanceof InfixExpression)) {    return false;  }  InfixExpression o=(InfixExpression)other;  if (node.hasExtendedOperands() && o.hasExtendedOperands()) {    if (!safeSubtreeListMatch(node.extendedOperands(),o.extendedOperands())) {      return false;    }  }  if (node.hasExtendedOperands() != o.hasExtendedOperands()) {    return false;  }  return (node.getOperator().equals(o.getOperator()) && safeSubtreeMatch(node.getLeftOperand(),o.getLeftOperand()) && safeSubtreeMatch(node.getRightOperand(),o.getRightOperand()));}  }
class C{  public void refresh(){  if (browser != null) {    if (!browser.isDisposed())     browser.refresh();  } else {    if (errorText != null && errorText.getControl() != null && !errorText.getControl().isDisposed())     errorText.refresh();  }  try {    Thread.sleep(50);  } catch (  Exception ignore) {  }}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public static final String crypt(String original){  java.util.Random randomGenerator=new java.util.Random();  int numSaltChars=saltChars.length;  String salt;  salt=(new StringBuffer()).append(saltChars[Math.abs(randomGenerator.nextInt()) % numSaltChars]).append(saltChars[Math.abs(randomGenerator.nextInt()) % numSaltChars]).toString();  return crypt(salt,original);}  }
class C{  public String modifyLocation(Cluster srcCluster,Cluster destCluster,String srcLocation){  Path srcPath=new Path(srcLocation);  String scheme=srcPath.toUri().getScheme();  if (scheme != null) {    if (scheme.equals("s3n") || scheme.equals("s3a")) {      return srcLocation;    }  }  Path destPath;  if (srcPath.toString().startsWith(srcCluster.getFsRoot().toString() + "/")) {    String relativePath=FsUtils.getRelativePath(srcCluster.getFsRoot(),srcPath);    destPath=new Path(destCluster.getFsRoot(),relativePath);  } else {    destPath=new Path(destCluster.getFsRoot(),srcPath.toUri().getPath());  }  return destPath.toString();}  }
class C{  public static boolean isOrb(Object obj){  return (proxy == null) ? false : proxy.isOrb(obj);}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  private void initCardPanel(){  CardLayout cl=(CardLayout)connectionPanelHolder.getLayout();  cl.show(connectionPanelHolder,cbConnectionType.getSelectedItem().toString());  connectionPanelHolder.setPreferredSize(getSelectedPanel().getPreferredSize());  mainPanel.revalidate();  mainPanel.repaint();  parentWindow.pack();}  }
class C{  private void initializeFocusManager(){  if (mFocusManager != null) {    mFocusManager.removeMessages();  } else {    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];    mMirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);    String[] defaultFocusModes=mActivity.getResources().getStringArray(R.array.pref_camera_focusmode_default_array);synchronized (this) {      if (mFocusManager == null) {        mFocusManager=new FocusOverlayManager(mPreferences,defaultFocusModes,mInitialParams,this,mMirror,mActivity.getMainLooper(),mUI != null ? mUI.getFocusRing() : null);      }    }  }}  }
class C{  public void emitInvokevirtual(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokevirtual);  if (!alive)   return;  emit2(meth);  state.pop(argsize + 1);  state.push(mtype.getReturnType());}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5);}  }
class C{  protected void initErrorReporting(){}  }
class C{  private void assembleResourceLoaderInitializers(){  if (resourceLoaderInitializersActive) {    return;  }  Vector resourceLoaderNames=rsvc.getConfiguration().getVector(RuntimeConstants.RESOURCE_LOADER);  for (int i=0; i < resourceLoaderNames.size(); i++) {    String loaderID=resourceLoaderNames.get(i) + "." + RuntimeConstants.RESOURCE_LOADER;    ExtendedProperties loaderConfiguration=rsvc.getConfiguration().subset(loaderID);    if (loaderConfiguration == null) {      rsvc.warn("ResourceManager : No configuration information for resource loader named '" + resourceLoaderNames.get(i) + "'. Skipping.");      continue;    }    loaderConfiguration.setProperty(RESOURCE_LOADER_IDENTIFIER,resourceLoaderNames.get(i));    sourceInitializerList.add(loaderConfiguration);  }  resourceLoaderInitializersActive=true;}  }
class C{  public void createCashBasedJournalEntriesAndReversalsForSavings(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal){  int accountTypeToDebitId=accountTypeToBeDebited;  int accountTypeToCreditId=accountTypeToBeCredited;  if (isReversal) {    accountTypeToDebitId=accountTypeToBeCredited;    accountTypeToCreditId=accountTypeToBeDebited;  }  createJournalEntriesForSavings(office,currencyCode,accountTypeToDebitId,accountTypeToCreditId,savingsProductId,paymentTypeId,loanId,transactionId,transactionDate,amount);}  }
class C{  public void test_getInnerCause02_find_subclass(){  Throwable cause=new IOException();  Throwable t=new Throwable(cause);  assertTrue(cause == getInnerCause(t,Exception.class));}  }
class C{  @Override protected Graph copy(String newName,Consumer<Map<Node,Node>> duplicationMapCallback){  AllowAssumptions allowAssumptions=AllowAssumptions.from(assumptions != null);  StructuredGraph copy=new StructuredGraph(newName,method,entryBCI,allowAssumptions,speculationLog,useProfilingInfo);  if (allowAssumptions == AllowAssumptions.YES && assumptions != null) {    copy.assumptions.record(assumptions);  }  copy.hasUnsafeAccess=hasUnsafeAccess;  copy.setGuardsStage(getGuardsStage());  copy.isAfterFloatingReadPhase=isAfterFloatingReadPhase;  copy.hasValueProxies=hasValueProxies;  Map<Node,Node> replacements=Node.newMap();  replacements.put(start,copy.start);  Map<Node,Node> duplicates=copy.addDuplicates(getNodes(),this,this.getNodeCount(),replacements);  if (duplicationMapCallback != null) {    duplicationMapCallback.accept(duplicates);  }  return copy;}  }
class C{  private void fill(int index,LinkedList<Integer> h){  h=new LinkedList<>(h);  int t=h.indexOf(this.choiceLocal[index]);  Integer newVal=h.get(t + 1);  this.choiceLocal[index]=newVal;  h.remove(newVal);  for (int i=index + 1; i < getNumObjects(); i++) {    this.choiceLocal[i]=h.get(i - index - 1);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @After public void tearDown(){  if (null != targetDir && targetDir.exists()) {    File[] files=targetDir.listFiles();    if (null != files) {      for (      File file : files) {        file.delete();      }    }    targetDir.delete();  }}  }
class C{  public void sort(double[] array){  sort(DoubleList.unmodifiableView(array,array.length));}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.remote_service_started);  Notification notification=new Notification(R.drawable.stat_sample,text,System.currentTimeMillis());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  notification.setLatestEventInfo(this,getText(R.string.remote_service_label),text,contentIntent);  mNM.notify(R.string.remote_service_started,notification);}  }
class C{  public SafeCalendar(int year,int month,int day,int hour,int minute,int second){  this(year,month,day,hour,minute);  set(SECOND,second);}  }
class C{  private ResponseCode(final int codeClass,final int codeDetail){  this.codeClass=codeClass;  this.codeDetail=codeDetail;  this.value=codeClass << 5 | codeDetail;}  }
class C{  public static final AuthnProviderParamsToValidate mapToValidateCommon(AuthnProviderBaseParam param,AuthnProvider provider){  AuthnProviderParamsToValidate authnToValidate=new AuthnProviderParamsToValidate();  if (provider == null) {    authnToValidate.setManagerDN(param.getManagerDn());    authnToValidate.setManagerPwd(param.getManagerPassword());    authnToValidate.setSearchBase(param.getSearchBase());    authnToValidate.setGroupAttr(param.getGroupAttribute());    authnToValidate.setMode(param.getMode());  } else {    authnToValidate.setManagerDN((param.getManagerDn() == null) ? provider.getManagerDN() : param.getManagerDn());    authnToValidate.setManagerPwd((param.getManagerPassword() == null) ? provider.getManagerPassword() : param.getManagerPassword());    authnToValidate.setSearchBase((param.getSearchBase() == null) ? provider.getSearchBase() : param.getSearchBase());    authnToValidate.setGroupAttr((param.getGroupAttribute() == null) ? provider.getGroupAttribute() : param.getGroupAttribute());    authnToValidate.setMode((param.getMode() == null) ? provider.getMode() : param.getMode());  }  return authnToValidate;}  }
class C{  public AmqpMessage pullImmediate() throws IOException {  return pull(0,TimeUnit.MILLISECONDS);}  }
class C{  private void checkDuplicate(){  KeyboardShortcut ks=this.getDuplicate();  if (ks != null) {    this.setFieldValue(FIELD_INFO,MessageFormat.format(Constant.messages.getString("keyboard.dialog.warning.dup"),ks.getName()));  } else {    this.setFieldValue(FIELD_INFO,"");  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T doGenerate(final Class<T> clazz){  PojoClass pojoClass=PojoClassFactory.getPojoClass(clazz);  if (!pojoClass.isInterface()) {    throw ReflectionException.getInstance(String.format("[%s] is not an interface, can't create a proxy for concrete or abstract types.",pojoClass.getName()));  }  return (T)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{pojoClass.getClazz()},RandomReturnInvocationHandler.getInstance());}  }
class C{  private void copyDirectory(File source,File target) throws IOException {  int counter=0;  target.mkdirs();  File[] files=source.listFiles();  for (  File file : files) {    if (file.isDirectory()) {      copyDirectory(file,new File(target,file.getName()));    } else {      if ((new File(target,file.getName())).exists()) {        continue;      } else {        FileReader inReader=new FileReader(file);        FileWriter outWriter=new FileWriter(new File(target,file.getName()));        BufferedReader in=new BufferedReader(inReader);        BufferedWriter out=new BufferedWriter(outWriter);        int c;        while ((c=in.read()) != -1) {          out.write(c);        }        in.close();        out.close();        counter++;      }    }  }  if (counter > 0) {    System.out.println(counter + " of " + files.length+ " files copied.");  }}  }
class C{  public void writeLine(float[] column){  String str=Float.toString(column[0]);  for (int i=1; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  @Deprecated public AvsResponse stopRecording() throws IOException, AvsException {  mIsRecording=false;synchronized (mLock) {    if (mAudioRecord != null) {      mAudioRecord.stop();      mAudioRecord.release();    }  }  return completePost();}  }
class C{  public void updateView(int position,int viewType,T data,Bundle extra){}  }
class C{  public WellSource(){  put("class","source");  put("name","well_source");  setMenu("Make a wish|Use");  setDescription("You see a wishing well. Something in it catches your eye.");  setResistance(0);}  }
class C{  public static void isCIDR(String network) throws IllegalArgumentException {  String[] hostMask=network.split("/");  if (hostMask.length != 2) {    throw new IllegalArgumentException("subnetAddress is not a CIDR");  }  isValidInetAddress(hostMask[0]);  if (Integer.parseUnsignedInt(hostMask[1]) > 32) {    throw new IllegalArgumentException("CIDR mask may not be larger than 32");  }}  }
class C{  protected String encodeBody(){  return eventType;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);    if (m_tracer != null)     super.fireCDATAEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  @Override EventRequest resolveEventRequest(ReferenceType refType) throws NoSuchFieldException {  Field field=refType.fieldByName(fieldId);  EventRequestManager em=refType.virtualMachine().eventRequestManager();  EventRequest wp=em.createAccessWatchpointRequest(field);  wp.setSuspendPolicy(suspendPolicy);  wp.enable();  return wp;}  }
class C{  public Builder snackbarCallback(SnackbarCallback snackbarCallback){  this.snackbarCallback=snackbarCallback;  return this;}  }
class C{  @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  private void updateButtonsState(ISelection selection){  removeButton.setEnabled(!selection.isEmpty());  duplicateButton.setEnabled(!selection.isEmpty());}  }
class C{  public RollingResourceAppender(Layout layout,Resource res,Charset charset,boolean append,long maxFileSize,int maxBackupIndex,int timeout,RetireListener listener) throws IOException {  super(layout,res,charset,append,timeout,listener);  this.maxFileSize=maxFileSize;  this.maxBackupIndex=maxBackupIndex;}  }
class C{  public boolean contains(int s){  runTo(-1);  return super.contains(s);}  }
class C{  public static String encrypt(String password){  return encrypt(password,true);}  }
class C{  private double[] computeLocalJointEntropyUsingPreviousObservations(double states1[][],double states2[][],boolean isOurPreviousObservations){  int timeSteps=states1.length;  double[] localJoint=new double[timeSteps];  double prob;  for (int b=0; b < totalObservations; b++) {    if (isOurPreviousObservations) {      prob=mvkeJoint.getProbability(sourceObservations[b],destObservations[b],b);    } else {      prob=mvkeJoint.getProbability(sourceObservations[b],destObservations[b]);    }    localJoint[b]=0.0;    if (prob > 0.0) {      localJoint[b]=-Math.log(prob) / Math.log(2.0);    }    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ localJoint[b]);    }  }  return localJoint;}  }
class C{  public void processKeyEvent(KeyEvent e){  MenuElement[] sel2=new MenuElement[0];  sel2=selection.toArray(sel2);  int selSize=sel2.length;  MenuElement[] path;  if (selSize < 1) {    return;  }  for (int i=selSize - 1; i >= 0; i--) {    MenuElement elem=sel2[i];    MenuElement[] subs=elem.getSubElements();    path=null;    for (int j=0; j < subs.length; j++) {      if (subs[j] == null || !subs[j].getComponent().isShowing() || !subs[j].getComponent().isEnabled()) {        continue;      }      if (path == null) {        path=new MenuElement[i + 2];        System.arraycopy(sel2,0,path,0,i + 1);      }      path[i + 1]=subs[j];      subs[j].processKeyEvent(e,path,this);      if (e.isConsumed()) {        return;      }    }  }  path=new MenuElement[1];  path[0]=sel2[0];  path[0].processKeyEvent(e,path,this);  if (e.isConsumed()) {    return;  }}  }
class C{  public static void loadConfigFile(String fileName) throws IOException {  loadConfigFile(new File(fileName));}  }
class C{  public AlgorithmException(Algorithm algorithm){  this(algorithm,null,null);}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public void logWarning(Throwable t){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  t.printStackTrace(new PrintStream(bs));  logger.warning(logPrefix + bs.toString());}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public MultipartRequest(){  setPost(true);  setWriteRequest(true);  boundary=Long.toString(System.currentTimeMillis(),16);  setContentType("multipart/form-data; boundary=" + boundary);}  }
class C{  public AccessorTuple(String name,boolean _static){  this.name=name;  this._static=_static;}  }
class C{  public void addVMProxyArg(VMProxyArg vmpa){  String key=vmpa.getContextReference();  if (vmpa.isConstant()) {    localcontext.put(key,vmpa.getObject(wrappedContext));  } else {    vmproxyhash.put(key,vmpa);  }}  }
class C{  static <T>IntStream makeInt(AbstractPipeline<?,Integer,?> upstream){  return new OfInt(upstream);}  }
class C{  public void delete() throws IOException {  if (ResponseCache.getDefault() == this) {    ResponseCache.setDefault(null);  }  delegate.getCache().delete();}  }
class C{  protected MyAbstractList(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return false;}  }
class C{  private void logVMMessageInfo(String s){  if (blather)   rsvc.info(s);}  }
class C{  protected void addNamespacePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ScopedElement_namespace_feature"),getString("_UI_PropertyDescriptor_description","_UI_ScopedElement_namespace_feature","_UI_ScopedElement_type"),SGraphPackage.Literals.SCOPED_ELEMENT__NAMESPACE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void testAbsolute(){  performTest(5,5);}  }
class C{  public String redirectToLogin(){  return OUTCOME_PREVIOUS;}  }
class C{  public void draw(Shape s){  Shape shape=((ShapeTransformer)transformer).transform(s);  delegate.draw(shape);}  }
class C{  public static void renderJsfJsIfNecessary(FacesContext context) throws IOException {  if (isJsfJsInstalled(context)) {    return;  }  ResourceHandler resourceHandler=context.getApplication().getResourceHandler();  if (resourceHandler.isResourceRendered(context,JSF_SCRIPT_RESOURCE_NAME,JSF_SCRIPT_LIBRARY_NAME)) {    return;  }  Resource resource=resourceHandler.createResource(JSF_SCRIPT_RESOURCE_NAME,JSF_SCRIPT_LIBRARY_NAME);  ResponseWriter writer=context.getResponseWriter();  writer.write('\n');  writer.startElement("script",null);  writer.writeAttribute("type","text/javascript",null);  writer.writeAttribute("src",((resource != null) ? resource.getRequestPath() : ""),null);  writer.endElement("script");  writer.append('\r');  writer.append('\n');  resourceHandler.markResourceRendered(context,JSF_SCRIPT_RESOURCE_NAME,JSF_SCRIPT_LIBRARY_NAME);}  }
class C{  public void finish(){  nextLine();  out.flush();}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("editorClosing".equals(e.getPropertyName())) {    this.firePropertyChange("editorClosing",null,getName());  } else   if ("closeFrame".equals(e.getPropertyName())) {    this.firePropertyChange("closeFrame",null,null);    this.firePropertyChange("editorClosing",true,true);  } else   if ("updatedBayesImWizardTab".equals(e.getPropertyName())) {    this.updatedBayesImWizardTab=((Integer)(e.getNewValue()));  }}  }
class C{  public boolean correctHeatSinks(StringBuffer buff){  if ((aero.getHeatType() != Aero.HEAT_SINGLE) && (aero.getHeatType() != Aero.HEAT_DOUBLE)) {    buff.append("Invalid heatsink type!  Valid types are " + Aero.HEAT_SINGLE + " and "+ Aero.HEAT_DOUBLE+ ".  Found "+ aero.getHeatType()+ ".");  }  if (aero.getEntityType() == Entity.ETYPE_CONV_FIGHTER) {    int maxWeapHeat=countHeatEnergyWeapons();    int heatDissipation=0;    if (aero.getHeatType() == Aero.HEAT_DOUBLE) {      buff.append("Conventional fighters may only use single " + "heatsinks!");      return false;    }    heatDissipation=aero.getHeatSinks();    if (maxWeapHeat > heatDissipation) {      buff.append("Conventional fighters must be able to " + "dissipate all heat from energy weapons! \n" + "Max energy heat: " + maxWeapHeat + ", max dissipation: "+ heatDissipation);      return false;    } else {      return true;    }  } else {    return true;  }}  }
class C{  PageRecord addPageRecord(Integer pageNumber,PDFPage page,PDFParser parser){  PageRecord rec=new PageRecord();  rec.value=page;  rec.generator=parser;  pages.put(pageNumber,new SoftReference<Record>(rec));  return rec;}  }
class C{  public static EventType createEventType(StatementContext statementContext,StatViewAdditionalProps additionalProps,int streamNum){  Map<String,Object> schemaMap=new HashMap<String,Object>();  schemaMap.put(ViewFieldEnum.SIZE_VIEW__SIZE.getName(),long.class);  StatViewAdditionalProps.addCheckDupProperties(schemaMap,additionalProps,ViewFieldEnum.SIZE_VIEW__SIZE);  String outputEventTypeName=statementContext.getStatementId() + "_sizeview_" + streamNum;  return statementContext.getEventAdapterService().createAnonymousMapType(outputEventTypeName,schemaMap,false);}  }
class C{  public LocalDate withEra(int era){  return withLocalMillis(getChronology().era().set(getLocalMillis(),era));}  }
class C{  private void unionEmail(String email1,String email2,Set union){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        union.add(email2);      } else       if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  }}  }
class C{  @Override protected void computeTime(){  if (!isLenient()) {    if (originalFields == null) {      originalFields=new int[FIELD_COUNT];    }    for (int field=0; field < FIELD_COUNT; field++) {      int value=internalGet(field);      if (isExternallySet(field)) {        if (value < getMinimum(field) || value > getMaximum(field)) {          throw new IllegalArgumentException(getFieldName(field));        }      }      originalFields[field]=value;    }  }  int fieldMask=selectFields();  int year=isSet(YEAR) ? internalGet(YEAR) : EPOCH_YEAR;  int era=internalGetEra();  if (era == BCE) {    year=1 - year;  } else   if (era != CE) {    throw new IllegalArgumentException("Invalid era");  }  if (year <= 0 && !isSet(ERA)) {    fieldMask|=ERA_MASK;    setFieldsComputed(ERA_MASK);  }  long timeOfDay=0;  if (isFieldSet(fieldMask,HOUR_OF_DAY)) {    timeOfDay+=(long)internalGet(HOUR_OF_DAY);  } else {    timeOfDay+=internalGet(HOUR);    if (isFieldSet(fieldMask,AM_PM)) {      timeOfDay+=12 * internalGet(AM_PM);    }  }  timeOfDay*=60;  timeOfDay+=internalGet(MINUTE);  timeOfDay*=60;  timeOfDay+=internalGet(SECOND);  timeOfDay*=1000;  timeOfDay+=internalGet(MILLISECOND);  long fixedDate=timeOfDay / ONE_DAY;  timeOfDay%=ONE_DAY;  while (timeOfDay < 0) {    timeOfDay+=ONE_DAY;    --fixedDate;  }  calculateFixedDate: {    long gfd, jfd;    if (year > gregorianCutoverYear && year > gregorianCutoverYearJulian) {      gfd=fixedDate + getFixedDate(gcal,year,fieldMask);      if (gfd >= gregorianCutoverDate) {        fixedDate=gfd;        break calculateFixedDate;      }      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);    } else     if (year < gregorianCutoverYear && year < gregorianCutoverYearJulian) {      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);      if (jfd < gregorianCutoverDate) {        fixedDate=jfd;        break calculateFixedDate;      }      gfd=jfd;    } else {      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);      gfd=fixedDate + getFixedDate(gcal,year,fieldMask);    }    if (isFieldSet(fieldMask,DAY_OF_YEAR) || isFieldSet(fieldMask,WEEK_OF_YEAR)) {      if (gregorianCutoverYear == gregorianCutoverYearJulian) {        fixedDate=jfd;        break calculateFixedDate;      } else       if (year == gregorianCutoverYear) {        fixedDate=gfd;        break calculateFixedDate;      }    }    if (gfd >= gregorianCutoverDate) {      if (jfd >= gregorianCutoverDate) {        fixedDate=gfd;      } else {        if (calsys == gcal || calsys == null) {          fixedDate=gfd;        } else {          fixedDate=jfd;        }      }    } else {      if (jfd < gregorianCutoverDate) {        fixedDate=jfd;      } else {        if (!isLenient()) {          throw new IllegalArgumentException("the specified date doesn't exist");        }        fixedDate=jfd;      }    }  }  long millis=(fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;  TimeZone zone=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  int tzMask=fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (zone instanceof ZoneInfo) {      ((ZoneInfo)zone).getOffsetsByWall(millis,zoneOffsets);    } else {      int gmtOffset=isFieldSet(fieldMask,ZONE_OFFSET) ? internalGet(ZONE_OFFSET) : zone.getRawOffset();      zone.getOffsets(millis - gmtOffset,zoneOffsets);    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }  }  millis-=zoneOffsets[0] + zoneOffsets[1];  time=millis;  int mask=computeFields(fieldMask | getSetStateFields(),tzMask);  if (!isLenient()) {    for (int field=0; field < FIELD_COUNT; field++) {      if (!isExternallySet(field)) {        continue;      }      if (originalFields[field] != internalGet(field)) {        String s=originalFields[field] + " -> " + internalGet(field);        System.arraycopy(originalFields,0,fields,0,fields.length);        throw new IllegalArgumentException(getFieldName(field) + ": " + s);      }    }  }  setFieldsNormalized(mask);}  }
class C{  public MutableDouble(final Number value){  super();  this.value=value.doubleValue();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  protected static EncodedStringValue parseEncodedStringValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  EncodedStringValue returnValue=null;  int charset=0;  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  pduDataStream.reset();  if (first < TEXT_MIN) {    parseValueLength(pduDataStream);    charset=parseShortInteger(pduDataStream);  }  byte[] textString=parseWapString(pduDataStream,TYPE_TEXT_STRING);  try {    if (0 != charset) {      returnValue=new EncodedStringValue(charset,textString);    } else {      returnValue=new EncodedStringValue(textString);    }  } catch (  Exception e) {    return null;  }  return returnValue;}  }
class C{  private Note newNoteWithParagraph(String noteName,String parText){  Note note1=newNote(noteName);  addParagraphWithText(note1,parText);  return note1;}  }
class C{  public boolean addAvf(OwlClass targetClass){  targetClass.addAvfRestriction(this);  return avfClasses.add(targetClass);}  }
class C{  public static boolean occlusionTest(IMultipart part,Iterable<? extends IMultipart> others){  return occlusionTest(part,null,others);}  }
class C{  public boolean isAppendTransients(){  return this.appendTransients;}  }
class C{  public int size(){  return n;}  }
class C{  public SList(){  size=0;  sentinel=new Node(null,null);}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> coll){  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (next.compareTo(candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  protected void deleteEdgeMatcher(){  GraphEdgeMatcherDescriptor set=(GraphEdgeMatcherDescriptor)((IStructuredSelection)setsList.getSelection()).getFirstElement();  edgeMatchers.remove(set);  edgeMatcherContentProvider.remove(set);  setDirtyState(true);}  }
class C{  public static boolean isValid(@Nullable Fluid fluid){  return fluid != null;}  }
class C{  protected String createLabelText(){  String label=this.getGraphicLabel();  String text=this.getText();  if (label == null && text == null) {    return null;  }  StringBuilder sb=new StringBuilder();  if (!WWUtil.isEmpty(label)) {    sb.append(label).append("\n");  }  if (!WWUtil.isEmpty(text)) {    sb.append(text);  }  return sb.toString();}  }
class C{  public static double varp(double[] a){  if (a.length == 0)   return Double.NaN;  double avg=mean(a);  double sum=0.0;  for (int i=0; i < a.length; i++) {    sum+=(a[i] - avg) * (a[i] - avg);  }  return sum / a.length;}  }
class C{  public void generateAtom(XmlWriter w) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);  if (version != null) {    attrs.add(new XmlWriter.Attribute("version",version));  }  if (uri != null) {    attrs.add(new XmlWriter.Attribute("uri",uri));  }  w.simpleElement(Namespaces.atomNs,"generator",attrs,name);}  }
class C{  public boolean isIntersect(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer._ATT_FILTER).equals(XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT);}  }
class C{  public boolean isEveryOutputSpent(){  maybeParse();  for (  TransactionOutput output : outputs) {    if (output.isAvailableForSpending())     return false;  }  return true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public <T>T run(long timeout,TimeUnit unit,Consumer<Result<T>> task){  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(this)){    ResultFuture<T> future=new ResultFuture<>();    task.accept(future);    return future.get(timeout,unit);  } }  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x4C34F553,version=271) public boolean sceUsbCamGetLensDirection(){  return lensDirectionAtYou;}  }
class C{  protected void fireTupleEvent(Table t,int start,int end,int type){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    Tuple[] tuples=new Tuple[end - start + 1];    for (int i=0, r=start; r <= end; ++r, ++i) {      tuples[i]=t.getTuple(r);    }    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      if (type == EventConstants.INSERT) {        tsl.tupleSetChanged(this,tuples,EMPTY_ARRAY);      } else {        tsl.tupleSetChanged(this,EMPTY_ARRAY,tuples);      }    }  }}  }
class C{  public void testSerialization() throws Exception {  LinkedBlockingDeque q=populatedDeque(SIZE);  ByteArrayOutputStream bout=new ByteArrayOutputStream(10000);  ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(bout));  out.writeObject(q);  out.close();  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());  ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(bin));  LinkedBlockingDeque r=(LinkedBlockingDeque)in.readObject();  assertEquals(q.size(),r.size());  while (!q.isEmpty())   assertEquals(q.remove(),r.remove());}  }
class C{  public BandPassBuilder order(int order){  mOrder=order;  return this;}  }
class C{  public void testMoveFile() throws Exception {  create(igfs,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public PasswordQualityConfig(boolean enabled,boolean minimumQualityEnforced,int minimumQuality){  this.enabled=enabled;  this.enforced=minimumQualityEnforced;  this.minimumQuality=minimumQuality;}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  private void initialize(){  if (!cacheDir.exists()) {    cacheDir.mkdirs();  }  File[] files=cacheDir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    File file=files[i];    if (file.length() == 0) {      file.delete();    } else {      CacheSpan span=CacheSpan.createCacheEntry(file);      if (span == null) {        file.delete();      } else {        addSpan(span);      }    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static String clearActionsToString(OFInstructionClearActions inst,Logger log){  return "";}  }
class C{  public void applyChartSettings(PieChart chart){  chart.setScaleX(SCALE_FACTOR);  chart.setScaleY(SCALE_FACTOR);  chart.setCenterTextSize(CENTER_TEXT_SIZE);  chart.setUsePercentValues(false);  chart.setDrawSliceText(false);  chart.setDescription("");  chart.getLegend().setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);  Context context=mApplication.getApplicationContext();  TypedValue typedValue=new TypedValue();  context.getTheme().resolveAttribute(android.R.attr.textAppearanceSmall,typedValue,true);  int[] textSizeAttr=new int[]{android.R.attr.textSize};  TypedArray a=context.obtainStyledAttributes(typedValue.data,textSizeAttr);  float textSize=a.getDimension(0,-1);  a.recycle();  chart.getLegend().setTextSize(mApplication.convertPixelsToDp(textSize));}  }
class C{  public void testWriteEmptyIndexFieldAndDeleteWithPartitionAndTimeSeries() throws Exception {  EntityDefinition entityDefinition=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  hbase.createTable(entityDefinition.getTable(),entityDefinition.getColumnFamily());  EntityDefinition ed=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  if (ed == null) {    EntityDefinitionManager.registerEntity(TestLogAPIEntity.class);    ed=EntityDefinitionManager.getEntityDefinitionByEntityClass(TestLogAPIEntity.class);  }  String[] partitions=ed.getPartitions();  String[] newPart=new String[2];  newPart[0]="cluster";  newPart[1]="datacenter";  ed.setPartitions(newPart);  boolean isTimeSeries=ed.isTimeSeries();  ed.setTimeSeries(true);  long now=System.currentTimeMillis();  try {    List<TestLogAPIEntity> list=new ArrayList<TestLogAPIEntity>();    TestLogAPIEntity e=new TestLogAPIEntity();    e.setField1(1);    e.setField2(2);    e.setField3(3);    e.setField4(4L);    e.setField5(5.0);    e.setField6(5.0);    e.setField7("7");    e.setTags(new HashMap<String,String>());    e.getTags().put("cluster","test4UT");    e.getTags().put("datacenter","dc1");    e.setTimestamp(now);    list.add(e);    GenericEntityWriter writer=new GenericEntityWriter(ed.getService());    List<String> result=writer.write(list);    Assert.assertNotNull(result);    List<byte[]> indexRowkeys=new ArrayList<byte[]>();    IndexDefinition[] indexDefs=ed.getIndexes();    for (    IndexDefinition index : indexDefs) {      byte[] indexRowkey=index.generateIndexRowkey(e);      indexRowkeys.add(indexRowkey);    }    byte[][] qualifiers=new byte[9][];    qualifiers[0]="a".getBytes();    qualifiers[1]="b".getBytes();    qualifiers[2]="c".getBytes();    qualifiers[3]="d".getBytes();    qualifiers[4]="e".getBytes();    qualifiers[5]="f".getBytes();    qualifiers[6]="g".getBytes();    qualifiers[7]="cluster".getBytes();    qualifiers[8]="datacenter".getBytes();    UniqueIndexLogReader reader=new UniqueIndexLogReader(indexDefs[0],indexRowkeys,qualifiers,null);    reader.open();    InternalLog log=reader.read();    Assert.assertNotNull(log);    TaggedLogAPIEntity newEntity=HBaseInternalLogHelper.buildEntity(log,ed);    Assert.assertEquals(TestLogAPIEntity.class,newEntity.getClass());    TestLogAPIEntity e1=(TestLogAPIEntity)newEntity;    Assert.assertEquals(e.getField1(),e1.getField1());    Assert.assertEquals(e.getField2(),e1.getField2());    Assert.assertEquals(e.getField3(),e1.getField3());    Assert.assertEquals(e.getField4(),e1.getField4());    Assert.assertEquals(e.getField5(),e1.getField5(),0.001);    Assert.assertEquals(e.getField6(),e1.getField6());    Assert.assertEquals(e.getField7(),e1.getField7());    Assert.assertEquals("test4UT",e1.getTags().get("cluster"));    Assert.assertEquals("dc1",e1.getTags().get("datacenter"));    Assert.assertEquals(now,e1.getTimestamp());    log=reader.read();    Assert.assertNotNull(log);    newEntity=HBaseInternalLogHelper.buildEntity(log,ed);    Assert.assertEquals(TestLogAPIEntity.class,newEntity.getClass());    e1=(TestLogAPIEntity)newEntity;    Assert.assertEquals(e.getField1(),e1.getField1());    Assert.assertEquals(e.getField2(),e1.getField2());    Assert.assertEquals(e.getField3(),e1.getField3());    Assert.assertEquals(e.getField4(),e1.getField4());    Assert.assertEquals(e.getField5(),e1.getField5(),0.001);    Assert.assertEquals(e.getField6(),e1.getField6());    Assert.assertEquals(e.getField7(),e1.getField7());    Assert.assertEquals("test4UT",e1.getTags().get("cluster"));    Assert.assertEquals("dc1",e1.getTags().get("datacenter"));    Assert.assertEquals(now,e1.getTimestamp());    log=reader.read();    Assert.assertNull(log);    reader.close();    GenericDeleter deleter=new GenericDeleter(ed.getTable(),ed.getColumnFamily());    deleter.delete(list);    reader=new UniqueIndexLogReader(indexDefs[0],indexRowkeys,qualifiers,null);    reader.open();    log=reader.read();    Assert.assertNull(log);    reader.close();  }  finally {    ed.setPartitions(partitions);    ed.setTimeSeries(isTimeSeries);  }  hbase.deleteTable(entityDefinition.getTable());}  }
class C{  @Override public void actionPerformed(ActionEvent e){  FileDialog fc=new FileDialog(frame);  fc.setDirectory(defaultpath);  fc.setMode(mode);  final String curr=textfield.getText();  if (curr != null && curr.length() > 0) {    fc.setFile(curr);  }  fc.setVisible(true);  String filename=fc.getFile();  if (filename != null) {    textfield.setText(new File(fc.getDirectory(),filename).getPath());  }  fc.setVisible(false);  fc.dispose();  textfield.requestFocus();  fireEditingStopped();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void postProcess(){  Iterator cells;  System.out.println("-----Assigning Cell Types, and Parents to equivalent-origin cells");  cells=cell_dictionary.values().iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    if (cell.official_name.equals("P0"))     P0=cell;    if (cell.parent == null && !cell.official_name.equals("P0") && cell.num_equivalence_origin == 0)     System.out.println("Whoa!  This ain't right: " + cell.official_name + "Has no parent.");    if (cell.parent == null && cell.num_equivalence_origin == 0)     roots.add(cell);    if (cell.num_equivalence_origin != 0) {      cell.type=Cell.cell_type_postembryonic_dual_origin;      cell.parent=cell.equivalence_origin[0];      if (cell.parent.equivalence_fate[0] != cell)       cell.parent.equivalence_fate[0].parent=cell.equivalence_origin[1]; else       cell.parent.equivalence_fate[1].parent=cell.equivalence_origin[1];    } else     if (cell.official_name.equals("P0") || cell.official_name.equals("P1'") || cell.official_name.equals("P2'")|| cell.official_name.equals("AB")|| cell.official_name.equals("P3'")|| cell.official_name.equals("P4'"))     cell.type=Cell.cell_type_preembryonic_unknown_position; else     if (cell.official_name.equals("Z3") || cell.official_name.equals("Z2"))     cell.type=Cell.cell_type_postembryonic_unknown_position; else     if (cell.birthday < Cell.post_embryonic_birthday)     cell.type=Cell.cell_type_postembryonic; else     cell.type=Cell.cell_type_preembryonic;  }  System.out.println("-----Assigning Birthdays and Deaths");  cells=roots.iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    cell.postProcessBirthday(true);  }  cells=roots.iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    cell.postProcessDeathDay(true);  }  System.out.println("-----Assigning Locations");  cells=roots.iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    cell.postProcessLocation(true);  }  cells=roots.iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    cell.modifyLocations(-30.0,-20.0,-20.0);  }  cells=roots.iterator();  while (cells.hasNext()) {    Cell cell=(Cell)cells.next();    cell.setVolume(1.0f);  }  System.out.println("-----Finished PostProcessing");}  }
class C{  protected OMGeometryList createMGRSRectangles(LatLonPoint llp,int accuracy,int numRects){  return createMGRSRectangles(llp,accuracy,numRects,Ellipsoid.WGS_84);}  }
class C{  public Threads createThreads(){  return mAdapter.create(Threads.class);}  }
class C{  public ConvertMemberTypeDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.CONVERT_MEMBER_TYPE,project,description,comment,arguments,flags);}  }
class C{  protected TypeRefImpl(){  super();}  }
class C{  public HashCodeBuilder append(byte[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  private void addExpr(RexNode expr,String name){  convertedInputExprs.add(expr);  if ((name == null) && (expr instanceof RexInputRef)) {    final int i=((RexInputRef)expr).getIndex();    name=bb.root.getRowType().getFieldList().get(i).getName();  }  if (convertedInputExprNames.contains(name)) {    name=null;  }  convertedInputExprNames.add(name);}  }
class C{  public void paintChart(Graphics g,AbstractChart chart,Rectangle bounds,int absX,int absY){  c.g=g;  c.bounds=bounds;  c.absoluteX=absX;  c.absoluteY=absY;  chart.draw(c,bounds.getX(),bounds.getY(),bounds.getWidth(),bounds.getHeight(),new Paint());}  }
class C{  public static CEndlessProgressDialog showEndless(final Window parent,final String description,final CEndlessHelperThread thread){  final CEndlessProgressDialog dlg=new CEndlessProgressDialog(parent,Constants.DEFAULT_WINDOW_TITLE,description,thread);  CIconInitializer.initializeWindowIcons(dlg);  thread.start();  dlg.setVisible(true);  return dlg;}  }
class C{  private void cleanup(){  userScheduler.shutdown();  userThreads.shutdown();}  }
class C{  @Override public int hashCode(){  return new Double(average).hashCode();}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  if (string != null) {    sb.append("str->");    sb.append(string);    sb.append(System.getProperty("line.separator"));  } else   if (pi != null) {    sb.append("pi->");    sb.append(pi.toString(0));    sb.append(System.getProperty("line.separator"));  } else   if (element != null) {    sb.append(System.getProperty("line.separator"));    sb.append(element.toString(++ident));  }  return sb.toString();}  }
class C{  private synchronized void notifyPanListeners(){  for (  PanListener listener : mPanListeners) {    listener.panApplied();  }}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public boolean visible(){  return mVisible;}  }
class C{  public QueueBuilder<T> withUnit(Unit unit){  if (memoryManager != null) {    throw new IllegalStateException("Can not change unit after the memory manager initalized");  }  this.unit=unit;  return this;}  }
class C{  protected void stopClassification(){  if (isRunning()) {    stop();    startBusy("Evaluation interrupted!");  }}  }
class C{  public void mark(){  fReadCount=0;}  }
class C{  private int gType(Geometry geom){  return OraGeom.gType(dimension(geom),lrsDim(geom),OraGeom.geomType(geom));}  }
class C{  public SQLDataException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void addInterface(Class<?> i){  getDtoInterfaces().add(createDtoImplTemplate(i));}  }
class C{  public SingleStepReply(final int packetId,final int errorCode,final long threadId,final RelocatedAddress address,final RegisterValues registerValues){  super(packetId,errorCode);  this.threadId=threadId;  this.address=address;  this.registerValues=registerValues;}  }
class C{  FormatToken parseFormatToken(int offset){  this.startIndex=offset;  this.i=offset;  return parseArgumentIndexAndFlags(new FormatToken());}  }
class C{  public NSArray(int length){  array=new NSObject[length];}  }
class C{  public StateBuilder newState(){  return new StateBuilder();}  }
class C{  @Override @NoOptCompile @BaselineNoRegisters @BaselineSaveLSRegisters @Unpreemptible public void run(){  rvmThread.collectorContext.run();}  }
class C{  protected static boolean compare(Vector<FieldContainer> vector1,Vector<FieldContainer> vector2){  return vector1.size() == vector2.size() && vector1.containsAll(vector2);}  }
class C{  public Parser() throws IOException, RefererParserException {  this(Parser.class.getResourceAsStream(REFERERS_YAML_PATH));}  }
class C{  public void onInit(int status){  if ((tts != null) && (status == TextToSpeech.SUCCESS)) {    Log.v(TAG,"TTS engine initialized with success");    if ((messages != null) && (messages.size() > 0)) {      Log.v(TAG,"Start TTS session: play " + messages.size() + " messages");      tts.speak(messages.get(0),TextToSpeech.QUEUE_FLUSH,null);      if (messages.size() > 1) {        for (int i=1; i < messages.size(); i++) {          tts.speak(messages.get(i),TextToSpeech.QUEUE_ADD,null);        }      }      while (tts.isSpeaking()) {        try {          Thread.sleep(500);        } catch (        Exception e) {        }      }      Log.v(TAG,"Exit TTS session");      this.stopSelf();    }  }}  }
class C{  public AssertStatement newAssertStatement(){  return new AssertStatement(this);}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  public void finish(){  cancel();  mHandleQueue.add(false);  if (mFuture != null) {    mFuture.cancel(true);    mFuture=null;  }}  }
class C{  public MockUpnpServiceConfiguration(){  this(false,false);}  }
class C{  protected void initPort(){  String portParam=getInitParameter("port");  setPort((portParam == null) ? DEFAULT_PORT : Integer.parseInt(portParam));  if (isDebug()) {    log("port: " + getPort());  }}  }
class C{  private static float project(float value,float minFrom,float maxFrom,float minTo,float maxTo){  return (value - minFrom) / (maxFrom - minFrom) * (maxTo - minTo) + minTo;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix06.class,args);}  }
class C{  public static boolean isPrivate(int mod){  return (mod & PRIVATE) != 0;}  }
class C{  public ISchedulingRule charsetRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return null;  return resource.getProject();}  }
class C{  private static void findPhoneNumber(String text,String[] matches){  int[] results=Utils.findNanpPhoneNumbers(text);  assertEquals(0,results.length % 2);  if (results.length / 2 != matches.length) {    fail("Text '" + text + "': expected "+ matches.length+ " matches, found "+ results.length / 2);  }  for (int i=0; i < results.length / 2; i++) {    CharSequence seq=text.subSequence(results[i * 2],results[i * 2 + 1]);    assertEquals(matches[i],seq);  }}  }
class C{  public void testDisconnect_UnconnectedClosed() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  assertEquals(this.channel1,this.channel1.disconnect());  assertFalse(this.channel1.isConnected());}  }
class C{  protected void readOplog(){  primaryClient.execute("read from oplog on '" + replicaSet + "'",null);}  }
class C{  public void addValue(String key,double val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  private static Control emptyPlaceholder(Composite parent){  return new Label(parent,NONE);}  }
class C{  @Override public Properties trackUserFindsCourses(){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.properties.putValue(Keys.NAME,Values.USER_FIND_COURSES);  aEvent.setAppNameContext();  aEvent.properties=addCategoryToBiEvents(aEvent.properties,Values.USER_ENGAGEMENT,Values.COURSE_DISCOVERY);  tracker.track(Events.FIND_COURSES,aEvent.properties);  return aEvent.properties;}  }
class C{  public void receiveResultqueryAssociatedCapabilityForLun(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForLunResponse result){}  }
class C{  @POST @RolesAllowed("user") @GenerateLink(rel=LINK_REL_UPDATE_CURRENT_USER_PROFILE) @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public ProfileDescriptor updateCurrent(@Description("attributes to update") Map<String,String> updates,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException {  if (updates == null || updates.isEmpty()) {    throw new ConflictException("Attributes to update required");  }  final User user=userDao.getById(currentUser().getId());  final Profile profile=profileDao.getById(user.getId());  profile.getAttributes().putAll(updates);  profileDao.update(profile);  logEventUserUpdateProfile(user,profile.getAttributes());  return toDescriptor(profile,context);}  }
class C{  @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.remote_service_binding);  Button button=(Button)findViewById(R.id.bind);  button.setOnClickListener(mBindListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mKillButton=(Button)findViewById(R.id.kill);  mKillButton.setOnClickListener(mKillListener);  mKillButton.setEnabled(false);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");}  }
class C{  public static ReferencedEnvelope tile2boundingBox(final int x,final int y,final int zoom,int srid){  ReferencedEnvelope referencedEnvelope;switch (srid) {case 4326:    referencedEnvelope=new ReferencedEnvelope(tile2lon(x,zoom),tile2lon(x + 1,zoom),tile2lat(y + 1,zoom),tile2lat(y,zoom),CRS_4326);  break;case 3857:case 900913:referencedEnvelope=new ReferencedEnvelope(tile2xMercator(x,zoom),tile2xMercator(x + 1,zoom),tile2yMercator(y + 1,zoom),tile2yMercator(y,zoom),CRS_3857);break;default :throw new IllegalArgumentException(srid + " is not allowed please use 4326, 900913 or 3857");}return referencedEnvelope;}  }
class C{  protected void parseURI(String uriString) throws URISyntaxException {  String s=uriString;  int index=s.indexOf(FRAGMENT_SEPARATOR);  if (index != -1) {    setFragment(s.substring(index + 1),false);    s=s.substring(0,index);  }  index=s.indexOf(SCHEME_SEPARATOR);  if (index != -1) {    String scheme=s.substring(0,index);    if (isValidScheme(scheme)) {      setScheme(scheme);      s=s.substring(index + 1);    }  }  parseSchemeSpecificPart(s,false);}  }
class C{  protected void listOwnRecipes(HttpServletResponse response) throws IOException {  String redirectUrl="recipeList";  response.sendRedirect(response.encodeRedirectURL(redirectUrl));}  }
class C{  public void loadData(boolean readNumbersAsStrings){  BufferedReader streamReader=null;  Vector<Vector<Object>> records=new Vector<Vector<Object>>();  try {    Object token=null;    boolean header_read=false;    if (!headersExist) {      header_read=true;      headerRecord=new Vector<Object>();    }    URL csvURL=infoUrl;    streamReader=new BufferedReader(new InputStreamReader(csvURL.openStream()));    CSVTokenizer csvt=new CSVTokenizer(streamReader,readNumbersAsStrings);    int count=0;    token=csvt.token();    while (!csvt.isEOF(token)) {      count++;      Vector<Object> rec_line=new Vector<Object>();      while (!csvt.isNewline(token)) {        rec_line.addElement(token);        token=csvt.token();        if (csvt.isEOF(token))         break;      }      if (header_read) {        records.addElement(rec_line);      } else       if (headersExist) {        headerRecord=rec_line;        header_read=true;      }      if (Debug.debugging("csv")) {        Debug.output("CSVFile.read: " + rec_line);      }      token=csvt.token();    }    csvt.close();  } catch (  java.io.IOException ioe) {    throw new com.bbn.openmap.util.HandleError(ioe);  }catch (  ArrayIndexOutOfBoundsException aioobe) {    throw new com.bbn.openmap.util.HandleError(aioobe);  }catch (  ClassCastException cce) {    throw new com.bbn.openmap.util.HandleError(cce);  }catch (  NullPointerException npe) {    Debug.error("CSVFile can't open: " + infoUrl + ", check URL notation.");  }  infoRecords=records;  if (Debug.debugging("csv")) {    Debug.output("CSVFile: read in " + infoRecords.size() + " records");  }}  }
class C{  public boolean isTaxCorrectionDiscount(){  return getTaxCorrectionType().equals(TAXCORRECTIONTYPE_DiscountOnly) || getTaxCorrectionType().equals(TAXCORRECTIONTYPE_Write_OffAndDiscount);}  }
class C{  public static void writeArchive(File dest,File... input) throws IOException {  try (DataOutputStream output=new DataOutputStream(new FileOutputStream(dest))){    output.writeInt(VERSION);    output.writeInt(input.length);    final byte[] buf=new byte[4096];    for (    File f : input) {      final byte[] nameBytes=f.getName().getBytes();      final int nameSize=nameBytes.length;      final FileHeader header=new FileHeader(nameSize,f.length());      output.writeInt(header.mNameSize);      output.writeLong(header.mFileSize);      output.write(nameBytes);      try (FileInputStream fis=new FileInputStream(f)){        int len;        while ((len=fis.read(buf)) > 0) {          output.write(buf,0,len);        }      }     }  } }  }
class C{  public MockHttpURLConnection addHeader(String name,String value){  Preconditions.checkNotNull(name);  Preconditions.checkNotNull(value);  if (headers.containsKey(name)) {    headers.get(name).add(value);  } else {    List<String> values=new ArrayList<String>();    values.add(value);    headers.put(name,values);  }  return this;}  }
class C{  public boolean hasTransparency(){  return super.hasElement(Transparency.KEY);}  }
class C{  private ArrayList<VOPricedRole> definePricedProductRoles(ArrayList<VORoleDefinition> roleDefs){  VOPricedRole ppr=new VOPricedRole();  ppr.setRole(roleDefs.get(0));  ppr.setPricePerUser(BigDecimal.valueOf(33L));  VOPricedRole ppr2=new VOPricedRole();  ppr2.setRole(roleDefs.get(1));  ppr2.setPricePerUser(BigDecimal.valueOf(66L));  ArrayList<VOPricedRole> pricedRoles=new ArrayList<>();  pricedRoles.add(ppr);  pricedRoles.add(ppr2);  return pricedRoles;}  }
class C{  public String requestStatistics(){  if (interval > 0) {synchronized (sbmutex) {      return sb.toString();    }  } else {    sb.setLength(0);    makeStringBuffer(sb);    return sb.toString();  }}  }
class C{  public static boolean isImmediateAssignment(String[] frame){  return frame.length > 4 && frame[3].equals("06") && frame[4].equals("3f");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mPreview != null) {    mPreview.release();  }}  }
class C{  public BitmapSize scale(float scale){  return new BitmapSize((int)(width * scale),(int)(height * scale));}  }
class C{  public final boolean isOnKeyRelease(){  return onKeyRelease;}  }
class C{  public ApproximationSetCollector(double[] epsilon){  this(null,epsilon);}  }
class C{  public static IOptimizableFuncExpr chooseFirstOptFuncExpr(Index chosenIndex,AccessMethodAnalysisContext analysisCtx){  List<Pair<Integer,Integer>> indexExprs=analysisCtx.getIndexExprs(chosenIndex);  int firstExprIndex=indexExprs.get(0).first;  return analysisCtx.matchedFuncExprs.get(firstExprIndex);}  }
class C{  private HistogramTableModel parseNextClassHistogram(BufferedReader bis) throws IOException {  boolean finished=false;  boolean found=false;  HistogramTableModel classHistogram=new HistogramTableModel();  int maxLinesCounter=0;  boolean isNormalBis=bis == getBis();  while (bis.ready() && !finished) {    String line=(isNormalBis) ? getNextLine().trim() : bis.readLine().trim();    if (!found && !line.equals("")) {      if (line.startsWith("num   #instances    #bytes  class name")) {        found=true;      } else       if (maxLinesCounter >= getMaxCheckLines()) {        finished=true;      } else {        maxLinesCounter++;      }    } else     if (found) {      if (line.startsWith("Total ")) {        String newLine=line.replaceAll("(\\s)+",";");        String[] elems=newLine.split(";");        classHistogram.setBytes(Long.parseLong(elems[2]));        classHistogram.setInstances(Long.parseLong(elems[1]));        finished=true;      } else       if (!line.startsWith("-------")) {        String newLine=line.replaceAll("<no name>","<no-name>");        newLine=newLine.replaceAll("(\\s)+",";");        String[] elems=newLine.split(";");        if (elems.length == 4) {          classHistogram.addEntry(elems[3].trim(),Integer.parseInt(elems[2].trim()),Integer.parseInt(elems[1].trim()));        } else {          classHistogram.setIncomplete(true);          finished=true;        }      }    }  }  return (classHistogram);}  }
class C{  public static void close(OutputStream output){  try {    if (output != null) {      output.close();    }  } catch (  IOException ioe) {  }}  }
class C{  public static TextMap fromString(String text){  final int textLength=text.length();  final ArrayList<Integer> lines=new ArrayList<>();  lines.add(0);  int offset=0;  while (offset < text.length()) {    final int nlIndex=text.indexOf('\n',offset);    if (nlIndex >= 0) {      offset=nlIndex + 1;      lines.add(offset);    } else {      break;    }  }  lines.add(Integer.MAX_VALUE);  final int[] nlOffsets=new int[lines.size()];  for (int line=0; line < lines.size(); line++) {    nlOffsets[line]=lines.get(line);  }  final boolean finalNL=textLength > 0 && (textLength == nlOffsets[nlOffsets.length - 2]);  return new TextMap(nlOffsets,textLength,finalNL);}  }
class C{  public boolean isStartCharacter(char c){  return this.isOpeningCharacter(c,true);}  }
class C{  public String createExport(IsilonExport exp) throws IsilonException {  return create(_baseUrl.resolve(URI_NFS_EXPORTS),"Export",exp);}  }
class C{  public void putFloat(String key,float value){  preferences.edit().putFloat(key,value).apply();}  }
class C{  private void enforceRemovedRule(int ruleId){  if (ruleId2FlowName.containsKey(ruleId)) {    for (    String flowName : ruleId2FlowName.get(ruleId)) {      storageSource.deleteRowAsync("controller_staticflowtableentry",flowName);      logger.debug("ACL flow(id:{}) is removed.",flowName);    }    ruleId2FlowName.remove(ruleId);  }  ruleId2Dpid.remove(ruleId);  deny2Allow.remove(ruleId);}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  private void addToRuleList(ConcreteRule<TK,FV> rule,Map<CoverageSet,List<List<ConcreteRule<TK,FV>>>> ruleLists,int modelId){  List<List<ConcreteRule<TK,FV>>> ruleList=ruleLists.computeIfAbsent(rule.sourceCoverage,null);  if (modelId >= ruleList.size()) {    for (int i=0; i <= modelId; ++i) {      ruleList.add(new ArrayList<>());    }  }  ruleList.get(modelId).add(rule);}  }
class C{  private Substitution<ReferenceType> selectSubstitution(List<TypeVariable> typeParameters,Substitution<ReferenceType> substitution){  List<Substitution<ReferenceType>> substitutionList;  substitutionList=collectSubstitutions(typeParameters,substitution);  if (substitutionList.isEmpty()) {    return null;  }  return Randomness.randomMember(substitutionList);}  }
class C{  @Override protected synchronized void handleAssumptionViolation(AssumptionViolatedException e){  super.handleAssumptionViolation(e);}  }
class C{  public void add(double value){  if (!isAllocated)   allocate();  values.add(value);  this.isSorted=false;}  }
class C{  public void close(){  _client.destroy();}  }
class C{  void add(TimerTask task){  if (size + 1 == queue.length)   queue=Arrays.copyOf(queue,2 * queue.length);  queue[++size]=task;  fixUp(size);}  }
class C{  protected void initializeFab(){  mFab=(FloatingActionButton)getActivity().findViewById(R.id.fab);  mFab.setImageResource(R.drawable.fab_add);  ViewCompat.animate(mFab).scaleX(1f).scaleY(1f).alpha(1f).setDuration(100).setStartDelay(300L).start();}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
