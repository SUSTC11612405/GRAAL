class C{  @Override public void onCommit(List<? extends IndexCommit> list) throws IOException {  List<IndexCommitWrapper> wrapperList=wrap(list);  deletionPolicy.onCommit(wrapperList);  updateCommitPoints(wrapperList);  cleanReserves();}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public FrameBlock readTransformMetaDataFromPath(String metapath) throws IOException {  return readTransformMetaDataFromPath(null,metapath,TfUtils.TXMTD_SEP);}  }
class C{  public AmqpConnection createConnection() throws Exception {  if (username == null && password != null) {    throw new IllegalArgumentException("Password must be null if user name value is null");  }  NettyTransport transport=NettyTransportFactory.createTransport(remoteURI);  AmqpConnection connection=new AmqpConnection(transport,username,password);  connection.setMechanismRestriction(mechanismRestriction);  connection.setAuthzid(authzid);  connection.setOfferedCapabilities(getOfferedCapabilities());  connection.setOfferedProperties(getOfferedProperties());  connection.setStateInspector(getStateInspector());  return connection;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null == m_entities) {    m_entities=new Vector();  }  try {    systemId=SystemIDResolver.getAbsoluteURI(systemId,getDocumentBaseURI());  } catch (  Exception e) {    throw new org.xml.sax.SAXException(e);  }  m_entities.addElement(publicId);  m_entities.addElement(systemId);  m_entities.addElement(notationName);  m_entities.addElement(name);}  }
class C{  private static void testRead() throws Exception {  StringBuilder sb=new StringBuilder();  sb.setLength(4);  for (int x=0; x < 1000; x++) {    try (FileInputStream fis=new FileInputStream(blah)){      FileChannel fc=fis.getChannel();      long offset=generator.nextInt(10000);      long expectedResult=offset / CHARS_PER_LINE;      offset=expectedResult * CHARS_PER_LINE;      MappedByteBuffer b=fc.map(MapMode.READ_ONLY,offset,100);      for (int i=0; i < 4; i++) {        byte aByte=b.get(i);        sb.setCharAt(i,(char)aByte);      }      int result=Integer.parseInt(sb.toString());      if (result != expectedResult) {        err.println("I expected " + expectedResult);        err.println("I got " + result);        throw new Exception("Read test failed");      }    }   }}  }
class C{  @Override protected void determineActiveAttributes(){  super.determineActiveAttributes();  this.dashedAttributes.copy(this.getActiveShapeAttributes());  this.dashedAttributes.setOutlineStipplePattern(this.getOutlineStipplePattern());  this.dashedAttributes.setOutlineStippleFactor(this.getOutlineStippleFactor());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected S_VarImpl(){  super();}  }
class C{  protected void add(String type,String info){  String seperator=SEPERATOR;  if (start(type)) {    text=new StringBuilder();    text.append(timestamp());    text.append(type);    text.append(": ");    seperator="";  }  text.append(seperator);  text.append(info);  length++;  if (length >= MAX_LENGTH) {    close();  }}  }
class C{  public static PatternEveryExpr everyFilter(Filter filter,String tagName){  PatternExpr inner=new PatternFilterExpr(filter,tagName);  return new PatternEveryExpr(inner);}  }
class C{  public boolean intersects(LongBitSet other){  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    if ((bits[pos] & other.bits[pos]) != 0)     return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:03.220 -0500",hash_original_method="1EA9CE9DE6197B4051F39E120F823C8E",hash_generated_method="93559F9E76B147DE214A12BD25014E3C") public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value,int start,int end){  if (attribute == null) {    throw new NullPointerException();  }  if (start < 0 || end > text.length() || start >= end) {    throw new IllegalArgumentException();  }  if (value == null) {    return;  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    ranges.add(new Range(start,end,value));    attributeMap.put(attribute,ranges);    return;  }  ListIterator<Range> it=ranges.listIterator();  while (it.hasNext()) {    Range range=it.next();    if (end <= range.start) {      it.previous();      break;    } else     if (start < range.end || (start == range.end && value.equals(range.value))) {      Range r1=null, r3;      it.remove();      r1=new Range(range.start,start,range.value);      r3=new Range(end,range.end,range.value);      while (end > range.end && it.hasNext()) {        range=it.next();        if (end <= range.end) {          if (end > range.start || (end == range.start && value.equals(range.value))) {            it.remove();            r3=new Range(end,range.end,range.value);            break;          }        } else {          it.remove();        }      }      if (value.equals(r1.value)) {        if (value.equals(r3.value)) {          it.add(new Range(r1.start < start ? r1.start : start,r3.end > end ? r3.end : end,r1.value));        } else {          it.add(new Range(r1.start < start ? r1.start : start,end,r1.value));          if (r3.start < r3.end) {            it.add(r3);          }        }      } else {        if (value.equals(r3.value)) {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,r3.end > end ? r3.end : end,r3.value));        } else {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,end,value));          if (r3.start < r3.end) {            it.add(r3);          }        }      }      return;    }  }  it.add(new Range(start,end,value));}  }
class C{  public DotNode(int i,int j,Trie trieNode,ArrayList<SuperNode> antSuperNodes,SourcePath srcPath){  this.i=i;  this.j=j;  this.trieNode=trieNode;  this.antSuperNodes=antSuperNodes;  this.srcPath=srcPath;}  }
class C{  static byte[] encryptData(byte[] password,int size,byte[] data){  try {    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);    c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);    c.update(new byte[]{(byte)(size >> 24),(byte)(size >> 16),(byte)(size >> 8),(byte)(size)});    return c.doFinal(data);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e);  }}  }
class C{  public static String generateSUM(String columna,String alias){  StringBuffer sql=new StringBuffer(" SUM(").append(columna).append(") AS ").append(alias).append(" ");  return sql.toString();}  }
class C{  public AuthInfo(String username,String token,UUID uuid,Map<String,String> properties,String userType){  Objects.requireNonNull(username);  Objects.requireNonNull(token);  Objects.requireNonNull(uuid);  Objects.requireNonNull(properties);  Objects.requireNonNull(userType);  this.username=username;  this.token=token;  this.uuid=uuid;  this.properties=properties;  this.userType=userType;}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  @SuppressWarnings("unchecked") public final T timeout(TimeValue timeout){  this.timeout=timeout;  return (T)this;}  }
class C{  protected void fireTreeNodesRemoved(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesRemoved(e);    }  }}  }
class C{  public void incomingPanConnection(BluetoothAdapter adapter,BluetoothDevice device){  connectPanOrIncomingPanConnection(adapter,device,false);}  }
class C{  public boolean updateCellValue(@NotNull DBDAttributeBinding attr,@NotNull ResultSetRow row,@Nullable Object value){  return updateCellValue(attr,row,value,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.396 -0500",hash_original_method="4F2019AF1701903E5EF27732AE7CF8E2",hash_generated_method="16E2097032ADBC16FC2957CA6B31353D") public static String extractPostDialPortion(String phoneNumber){  if (phoneNumber == null)   return null;  int trimIndex;  StringBuilder ret=new StringBuilder();  trimIndex=indexOfLastNetworkChar(phoneNumber);  for (int i=trimIndex + 1, s=phoneNumber.length(); i < s; i++) {    char c=phoneNumber.charAt(i);    if (isNonSeparator(c)) {      ret.append(c);    }  }  return ret.toString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static long parseDateValue(String s,int start,int end){  if (s.charAt(start) == '+') {    start++;  }  int s1=s.indexOf('-',start + 1);  int s2=s.indexOf('-',s1 + 1);  if (s1 <= 0 || s2 <= s1) {    throw new IllegalArgumentException(s);  }  int year=Integer.parseInt(s.substring(start,s1));  int month=Integer.parseInt(s.substring(s1 + 1,s2));  int day=Integer.parseInt(s.substring(s2 + 1,end));  if (!isValidDate(year,month,day)) {    throw new IllegalArgumentException(year + "-" + month+ "-"+ day);  }  return dateValue(year,month,day);}  }
class C{  @Override public boolean onQueryTextChange(String query){  queryText=query;  if (TextUtils.isEmpty(query)) {    this.contactAdapter.load(true);  } else {    this.contactAdapter.query(query);  }  return true;}  }
class C{  protected void processResourceCharacteristicsRequest(SimEvent ev){  setDatacenterIdsList(CloudSim.getCloudResourceList());  setDatacenterCharacteristicsList(new HashMap<Integer,DatacenterCharacteristics>());  Log.printConcatLine(CloudSim.clock(),": ",getName(),": Cloud Resource List received with ",getDatacenterIdsList().size()," resource(s)");  for (  Integer datacenterId : getDatacenterIdsList()) {    sendNow(datacenterId,CloudSimTags.RESOURCE_CHARACTERISTICS,getId());  }}  }
class C{  @Override public void send(final Serializable msg,final INode to){  if (shutdown) {    return;  }  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"Sending" + msg + " to:"+ to);  }  final MessageHeader header=new MessageHeader(to,node,msg);  final SocketChannel socketChannel=nodeToChannel.get(to);  if (socketChannel == null) {    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"no channel for node:" + to + " dropping message:"+ msg);    }    return;  }  nioSocket.send(socketChannel,header);}  }
class C{  public ListFigure(){  this(null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent1");  publicId=entityNode.getPublicId();  assertNull("entityGetPublicIdNullAssert",publicId);}  }
class C{  default String renderName(Generator gen,M model){  return model.getName() + nameSuffix();}  }
class C{  public static byte[] fromReadableText(String text){  String[] tokens=text.split("\\\\x");  byte[] ret=new byte[tokens.length - 1];  for (int i=1; i < tokens.length; ++i) {    int x=Bytes.toBinaryFromHex((byte)tokens[i].charAt(0));    x=x << 4;    int y=Bytes.toBinaryFromHex((byte)tokens[i].charAt(1));    ret[i - 1]=(byte)(x + y);  }  return ret;}  }
class C{  private void refreshData(){  if (updateCmrPropertiesJob.cancel()) {    updateCmrPropertiesJob.schedule();  }}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  @Override public void close() throws IOException {  closeStartIfNecessary();  writer.close();}  }
class C{  public GrainField2DView(){  super();  setSpriteAlignment(HorizontalAlignment.LEFT,VerticalAlignment.BOTTOM);}  }
class C{  private String combineSelectionAndWhere(String selection,final String where){  if (TextUtils.isEmpty(where)) {    return selection;  } else   if (TextUtils.isEmpty(selection)) {    return where;  }  return String.format("(%s) AND (%s)",where,selection);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public GulpProcess(ExecutorService executorService,File workDir,String baseURL){  super();  this.executorService=executorService;  this.workDir=workDir;  this.baseURL=baseURL;  this.downloadPlugin=new HttpDownloadPlugin();}  }
class C{  protected <S>MethodVault<S> newMethod(Method method){  if (!Modifier.isAbstract(method.getModifiers())) {    throw new IllegalStateException(String.valueOf(method));  } else   if (method.getName().startsWith("create")) {    Method target=assetMethod(method);    if (target != null) {      return newCreateMethod(target);    } else {      return newCreateMethodDTO(method);    }  } else   if (method.getName().startsWith("delete")) {    Method target=assetMethod(method);    if (target != null) {      return newDeleteMethod(target);    } else {      return newDeleteMethodDTO(method);    }  } else {    return new MethodVaultNull<>(method.getName() + " " + getClass().getName());  }}  }
class C{  public static boolean isUniqueContraintError(Exception e){  if (DB.isPostgreSQL())   return isSQLState(e,"23505");  return isErrorCode(e,1);}  }
class C{  public LogLoss(){  this(1e-15);}  }
class C{  public Enumeration<String> attributes(){  return getElementHashEntry().keys();}  }
class C{  public Builder(DTEDDirectoryHandler dirHandler){  dirHandlers=new ArrayList<DTEDDirectoryHandler>();  dirHandlers.add(dirHandler);}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof IntArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  IntArrayList other=(IntArrayList)otherObj;  if (size() != other.size())   return false;  int[] theElements=elements();  int[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public void add(int value){  ensureCapacity(size + 1);  data[size++]=value;}  }
class C{  void handleImage(Image img,Component cmp,boolean bgUnselected,boolean bgSelected,boolean bgPressed){  boolean bg=false;  if (bgUnselected) {    cmp.getUnselectedStyle().setBgImage(img);    bg=true;  }  if (bgSelected) {    cmp.getSelectedStyle().setBgImage(img);    bg=true;  }  if (bgPressed) {    if (cmp instanceof HTMLLink) {      ((HTMLLink)cmp).getPressedStyle().setBgImage(img);    }    bg=true;  }  if (bg) {    cmp.repaint();    return;  }  Label label=(Label)cmp;  label.setText("");  int width=label.getPreferredW() - label.getStyle().getPadding(Component.LEFT) - label.getStyle().getPadding(Component.RIGHT);  int height=label.getPreferredH() - label.getStyle().getPadding(Component.TOP) - label.getStyle().getPadding(Component.BOTTOM);  if (width != 0) {    if (height == 0) {      height=img.getHeight() * width / img.getWidth();    }  } else   if (height != 0) {    if (width == 0) {      width=img.getWidth() * height / img.getHeight();    }  }  if (width != 0) {    img=img.scaled(width,height);    width+=label.getStyle().getPadding(Component.LEFT) + label.getStyle().getPadding(Component.RIGHT);    height+=label.getStyle().getPadding(Component.TOP) + label.getStyle().getPadding(Component.BOTTOM);    label.setPreferredSize(new Dimension(width,height));  }  label.setIcon(img);  htmlC.revalidate();  if (label.getClientProperty(HTMLComponent.CLIENT_PROPERTY_IMG_BORDER) == null) {    label.getUnselectedStyle().setBorder(null);  } else {    int borderSize=((Integer)label.getClientProperty(HTMLComponent.CLIENT_PROPERTY_IMG_BORDER)).intValue();    label.getUnselectedStyle().setPadding(borderSize,borderSize,borderSize,borderSize);    label.getSelectedStyle().setPadding(borderSize,borderSize,borderSize,borderSize);  }}  }
class C{  public static StringPart createStringPart(final String name,final String value){  final StringPart stringPart=new StringPart(name,value);  stringPart.setTransferEncoding(null);  stringPart.setContentType(null);  return stringPart;}  }
class C{  public Builder headerLayout(int headerLayoutId){  mOptions.headerLayout=headerLayoutId;  return this;}  }
class C{  public void cleanUpNullReferences(){  final Iterator<Map.Entry<Object,Object>> iterator=cache.entrySet().iterator();  while (iterator.hasNext()) {    final Map.Entry<Object,Object> entry=iterator.next();    Object entryVal=entry.getValue();    if (entryVal != null && ((SoftReference)entryVal).get() == null)     cache.remove(entry.getKey(),entryVal);  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static final void normalize(Vector3d v,double length){  if ((v.x == 0.0) && (v.y == 0.0) && (v.z == 0.0))   return;  v.scale(1 / length);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  stack.getUIMgrSafe().setNameForIRCode(getLong(stack),s);  return null;}  }
class C{  public static Connection enlistConnection(XAConnection xacon) throws GenericTransactionException {  if (xacon == null) {    return null;  }  try {    XAResource resource=xacon.getXAResource();    TransactionUtil.enlistResource(resource);    return xacon.getConnection();  } catch (  SQLException e) {    throw new GenericTransactionException("SQL error, could not enlist connection in transaction even though transactions are available",e);  }}  }
class C{  public boolean regionMatches(boolean ignoreCase,int toffset,java.lang.String other,int ooffset,int len){  return false;}  }
class C{  private Boolean isFileShareAlert(Hashtable<String,String> notification){  Boolean isFileShareAlert=Boolean.FALSE;  return isFileShareAlert;}  }
class C{  private SpecializedMethodManager(){}  }
class C{  public Hashtable<NamedBean,ArrayList<NamedBean>> discoverValidBeanPairs(LayoutEditor editor,Class<?> T,int pathMethod){  LayoutBlockManager lbm=InstanceManager.getDefault(LayoutBlockManager.class);  Hashtable<NamedBean,ArrayList<NamedBean>> retPairs=new Hashtable<NamedBean,ArrayList<NamedBean>>();  ArrayList<FacingProtecting> beanList=generateBlocksWithBeans(editor,T);  for (  FacingProtecting fp : beanList) {    for (    Block block : fp.getProtectingBlocks()) {      if (log.isDebugEnabled()) {        try {          log.debug("\nSource " + fp.getBean().getDisplayName());          log.debug("facing " + fp.getFacing().getDisplayName());          log.debug("protecting " + block.getDisplayName());        } catch (        java.lang.NullPointerException e) {        }      }      LayoutBlock lFacing=lbm.getLayoutBlock(fp.getFacing());      LayoutBlock lProtecting=lbm.getLayoutBlock(block);      NamedBean source=fp.getBean();      try {        retPairs.put(source,discoverPairDest(source,lProtecting,lFacing,beanList,pathMethod));      } catch (      JmriException ex) {        log.error(ex.toString());      }    }  }  return retPairs;}  }
class C{  public void addVariant(OrientedVariant v){  assert v.getStart() > mTemplatePosition;  final Allele a=v.allele();  if (a == null) {    return;  }  if (a.getStart() == a.getEnd() && a.nt().length == 0) {    return;  }  mLastVariantEnd=a.getEnd();  if (mNextVariant == null) {    mNextVariant=v;  } else {    mVariants.add(v);  }  assert integrity();}  }
class C{  public void threadAssertNull(Object x){  if (x != null) {    threadFailed=true;    assertNull(x);  }}  }
class C{  public synchronized BaseType createPrototype() throws CouldntSaveDataException {  final BaseType prototypeType=instantiateType(null,0,false,null,BaseTypeCategory.FUNCTION_PROTOTYPE);  notifyTypeAdded(prototypeType);  return prototypeType;}  }
class C{  private void checkWrittenJsonStream(Object data,Map<String,Object> meta,String contextURL,String expectedEntityPath) throws IOException, ODataRenderException {  JsonWriter writer=new JsonWriter(odataUri,entityDataModel);  String jsonStream;  if (data instanceof List) {    jsonStream=writer.writeFeed((List<?>)data,contextURL,meta);  } else {    jsonStream=writer.writeEntry(data,contextURL);  }  assertEquals(prettyPrintJson(readContent(expectedEntityPath)),prettyPrintJson(jsonStream));}  }
class C{  public boolean hasOperator(){  for (int i=0; i < size(); i++) {    if (isOperator(i)) {      return true;    } else     if (getArgument(i) instanceof MathFunction && ("^".equals(((MathFunction)getArgument(i)).getName()))) {      return true;    }  }  return false;}  }
class C{  static private Collection<URL> readURLs(final File file) throws IOException {  final Collection<URL> urls=new LinkedList<URL>();  if (file.isDirectory()) {    final File[] files=file.listFiles();    for (    File f : files) {      if (f.isHidden())       continue;      urls.addAll(readURLsFromFile(f));    }  } else {    urls.addAll(readURLsFromFile(file));  }  return urls;}  }
class C{  @TargetApi(16) private static int isSmallWidget(AppWidgetManager appWidgetManager,int appWidgetId){  int size;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    Bundle options=appWidgetManager.getAppWidgetOptions(appWidgetId);    size=options.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);  } else {    AppWidgetProviderInfo appWidgetInfo=appWidgetManager.getAppWidgetInfo(appWidgetId);    size=appWidgetInfo.minWidth;  }  int n=2;  while (70 * n - 30 < size) {    ++n;  }  int columns=n - 1;  if (columns < 4)   return 1; else   return 0;}  }
class C{  @Override public boolean canBeTypeOf(final IScope s,final Object c){  return type.canBeTypeOf(s,c);}  }
class C{  protected void fireMenuCanceled(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuCanceled");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuCanceled(menuEvent);      }    }  }}  }
class C{  @NoInline private static void throwNewNullPointerException(){  throw new NullPointerException();}  }
class C{  public void receiveErrorqueryStoragePorts(java.lang.Exception e){}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(TemplateLoaderUtils.getClassNameForToString(this));  sb.append("(Map { ");  int cnt=0;  for (Iterator it=templates.keySet().iterator(); it.hasNext(); ) {    cnt++;    if (cnt != 1) {      sb.append(", ");    }    if (cnt > 10) {      sb.append("...");      break;    }    sb.append(StringUtil.jQuote(it.next()));    sb.append("=...");  }  if (cnt != 0) {    sb.append(' ');  }  sb.append("})");  return sb.toString();}  }
class C{  void togglePause(boolean pause){synchronized (sigLock) {    paused=pause;    if (paused) {      signalSchedulingChange(0);    } else {      sigLock.notifyAll();    }  }}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public boolean likeMessage(String message,boolean like){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    int likedStatus=like ? FALSE : TRUE;    Cursor c=db.rawQuery("SELECT " + COL_LIKES + " FROM "+ TABLE+ " WHERE "+ COL_DELETED+ "="+ FALSE+ " AND "+ COL_LIKED+ "="+ likedStatus+ " AND "+ COL_MESSAGE+ " ='"+ Utils.makeTextSafeForSQL(message)+ "';",null);    c.moveToFirst();    if (c.getCount() > 0) {      int likes=c.getInt(c.getColumnIndex(COL_LIKES)) + (like ? 1 : -1);      c.close();      likes=Math.max(0,likes);      db.execSQL("UPDATE " + TABLE + " SET "+ COL_LIKED+ "="+ (like ? TRUE : FALSE)+ ","+ COL_LIKES+ "="+ likes+ " WHERE "+ COL_DELETED+ " ="+ FALSE+ " AND "+ COL_LIKED+ "="+ likedStatus+ " AND "+ COL_MESSAGE+ " ='"+ Utils.makeTextSafeForSQL(message)+ "';");      return true;    }  }  log.debug("Message was not edited, either message or database is null. [" + message + "]");  return false;}  }
class C{  public static boolean isParityErr(String fn){  ArrayList<String> temp=General.readFile(file.getAbsolutePath() + "_" + timeslot+ "S");  for (int i=0; i < temp.size(); i++) {    if (General.RGX_PARITY.matcher(temp.get(i)).matches()) {      Matcher recup_err=General.RGX_PARITY.matcher(temp.get(i));      if (recup_err.find()) {        if (recup_err.group(1).equals(fn))         ;        return true;      }    }  }  return false;}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  public static void testXml() throws Exception {  NSObject x=PropertyListParser.parse(new File("test-files/test1.plist"));  NSDictionary d=(NSDictionary)x;  assertTrue(d.count() == 5);  assertTrue(d.objectForKey("keyA").toString().equals("valueA"));  assertTrue(d.objectForKey("key&B").toString().equals("value&B"));  assertTrue(((NSDate)d.objectForKey("date")).getDate().equals(new Date(1322472090000L)));  assertTrue(Arrays.equals(((NSData)d.objectForKey("data")).bytes(),new byte[]{0x00,0x00,0x00,0x04,0x10,0x41,0x08,0x20,(byte)0x82}));  NSArray a=(NSArray)d.objectForKey("array");  assertTrue(a.count() == 4);  assertTrue(a.objectAtIndex(0).equals(new NSNumber(true)));  assertTrue(a.objectAtIndex(1).equals(new NSNumber(false)));  assertTrue(a.objectAtIndex(2).equals(new NSNumber(87)));  assertTrue(a.objectAtIndex(3).equals(new NSNumber(3.14159)));  PropertyListParser.saveAsXML(x,new File("test-files/out-testXml.plist"));  NSObject y=PropertyListParser.parse(new File("test-files/out-testXml.plist"));  assertTrue(x.equals(y));}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public boolean mergeTemplate(String templateName,String encoding,Context context,Writer writer) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception {  Template template=ri.getTemplate(templateName,encoding);  if (template == null) {    ri.error("Velocity.parseTemplate() failed loading template '" + templateName + "'");    return false;  } else {    template.merge(context,writer);    return true;  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case N4mfPackage.PROJECT_DESCRIPTION:    return createProjectDescription();case N4mfPackage.EXEC_MODULE:  return createExecModule();case N4mfPackage.TESTED_PROJECTS:return createTestedProjects();case N4mfPackage.INIT_MODULES:return createInitModules();case N4mfPackage.IMPLEMENTED_PROJECTS:return createImplementedProjects();case N4mfPackage.PROJECT_DEPENDENCIES:return createProjectDependencies();case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES:return createProvidedRuntimeLibraries();case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES:return createRequiredRuntimeLibraries();case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION:return createSimpleProjectDescription();case N4mfPackage.TESTED_PROJECT:return createTestedProject();case N4mfPackage.DECLARED_VERSION:return createDeclaredVersion();case N4mfPackage.SOURCE_FRAGMENT:return createSourceFragment();case N4mfPackage.MODULE_FILTER:return createModuleFilter();case N4mfPackage.BOOTSTRAP_MODULE:return createBootstrapModule();case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT:return createExtendedRuntimeEnvironment();case N4mfPackage.PROJECT_REFERENCE:return createProjectReference();case N4mfPackage.SIMPLE_PROJECT_DEPENDENCY:return createSimpleProjectDependency();case N4mfPackage.MODULE_FILTER_SPECIFIER:return createModuleFilterSpecifier();case N4mfPackage.REQUIRED_RUNTIME_LIBRARY_DEPENDENCY:return createRequiredRuntimeLibraryDependency();case N4mfPackage.PROVIDED_RUNTIME_LIBRARY_DEPENDENCY:return createProvidedRuntimeLibraryDependency();case N4mfPackage.PROJECT_DEPENDENCY:return createProjectDependency();case N4mfPackage.VERSION_CONSTRAINT:return createVersionConstraint();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public StampedLock(){  state=ORIGIN;}  }
class C{  public void doTestSynchRecover() throws JMSException {  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  MessageConsumer consumer=session.createConsumer(dest);  connection.start();  MessageProducer producer=session.createProducer(dest);  producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);  producer.send(session.createTextMessage("First"));  producer.send(session.createTextMessage("Second"));  TextMessage message=(TextMessage)consumer.receive(1000);  assertEquals("First",message.getText());  assertFalse(message.getJMSRedelivered());  message.acknowledge();  message=(TextMessage)consumer.receive(1000);  assertEquals("Second",message.getText());  assertFalse(message.getJMSRedelivered());  session.recover();  message=(TextMessage)consumer.receive(2000);  assertEquals("Second",message.getText());  assertTrue(message.getJMSRedelivered());  message.acknowledge();}  }
class C{  public MockUpnpService(MockUpnpServiceConfiguration configuration){  this(false,configuration);}  }
class C{  public void appendGroup(Element group,DOMGroupManager groupManager){  topLevelGroup.appendChild(group);synchronized (groupManagers) {    int nManagers=groupManagers.size();    for (int i=0; i < nManagers; i++) {      DOMGroupManager gm=(DOMGroupManager)groupManagers.get(i);      if (gm != groupManager)       gm.recycleCurrentGroup();    }  }}  }
class C{  private void intStream(){  int[] ints=new int[]{10,20,30,40,50};  IntStream intStream=IntStream.of(ints);  intStream.forEach(null);  IntStream intStream2=IntStream.of(10,20,30,40,50);  intStream2.forEach(null);}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  private void run(){  log.info("Creating plans from trips...");  log.warn("This program does not currenlty handle auto-access/egress transit trips. Please contact author for details.");  householdCoords=new HashMap<String,Coord>();  int completedPlans=0;  int currentPct=0;  for (  Person P : scenario.getPopulation().getPersons().values()) {    boolean skipPerson=false;    boolean isEmployed=false;    if (unusableTripChains.contains(P.getId()))     continue;    if (chainsWithNoZones.contains(P.getId()))     continue;    if (personsWithMixedModeTrips.contains(P.getId()))     continue;    ArrayList<Trip> pTrips=new ArrayList<CreatePlansFromTrips.Trip>();    for (    Id i : personTripsMap.get(P.getId()))     pTrips.add(trips.get(i));    sortTrips(pTrips);    Plan p=PopulationUtils.createPlan();    Trip T=null;    HashMap<String,Coord> workplaceZoneMap=new HashMap<String,Coord>();    HashMap<String,Coord> schoolZoneMap=new HashMap<String,Coord>();    for (int i=0; i < pTrips.size(); i++) {      T=pTrips.get(i);      if ((zones.getLocation(Id.create(T.zone_o,Zone.class)) == null) || (zones.getLocation(Id.create(T.zone_d,Zone.class)) == null)) {        skipPerson=true;        continue;      }      String act_o=T.act_o;      if (act_o.equals("W"))       isEmployed=true;      Coord c;      if (act_o.equals("H")) {        if (householdCoords.containsKey(personHouseholdMap.get(P.getId()))) {          c=householdCoords.get(personHouseholdMap.get(P.getId()));        } else {          c=getRandomCoordInZone(Id.create(T.zone_o,Zone.class));          householdCoords.put(personHouseholdMap.get(P.getId()),c);        }      } else       if (act_o.equals("W")) {        String workZone=T.zone_o;        if (!workplaceZoneMap.containsKey(workZone))         workplaceZoneMap.put(workZone,getRandomCoordInZone(Id.create(T.zone_o,Zone.class)));        c=workplaceZoneMap.get(workZone);      } else       if (act_o.equals("S")) {        String schoolZone=T.zone_o;        if (!schoolZoneMap.containsKey(schoolZone))         schoolZoneMap.put(schoolZone,getRandomCoordInZone(Id.create(T.zone_o,Zone.class)));        c=schoolZoneMap.get(schoolZone);      } else {        c=getRandomCoordInZone(Id.create(T.zone_o,Zone.class));      }      final String type1=act_o;      final Coord coord=c;      Activity act=PopulationUtils.createAndAddActivityFromCoord(p,type1,coord);      act.setEndTime(convertTime(T.start_time));      int type;      Leg leg=null;      try {        type=Integer.parseInt(T.type);      } catch (      NumberFormatException e) {        log.error("'Type' field incorrectly formatted for person \"" + P.getId().toString() + "\"! Type must be an integer.");        skipPerson=true;        continue;      }      if (type == 0) {        leg=PopulationUtils.createLeg(TransportMode.car);      } else       if (type == 1) {        leg=PopulationUtils.createLeg(TransportMode.pt);      } else       if (type == 2) {        continue;      } else {        log.error("Type \"" + type + "\" not recognized!");        continue;      }      if (leg != null)       p.addLeg(leg);    }    if (T == null) {      log.error("Trip is null!!! Why is this?!");    }    String act_d=T.act_d;    Coord c;    if (act_d.equals("H")) {      if (householdCoords.containsKey(personHouseholdMap.get(P.getId()))) {        c=householdCoords.get(personHouseholdMap.get(P.getId()));      } else {        c=getRandomCoordInZone(Id.create(T.zone_d,Zone.class));        householdCoords.put(personHouseholdMap.get(P.getId()),c);      }    } else     if (act_d.equals("W")) {      String workZone=T.zone_d;      if (!workplaceZoneMap.containsKey(workZone))       workplaceZoneMap.put(workZone,getRandomCoordInZone(Id.create(T.zone_d,Zone.class)));      c=workplaceZoneMap.get(workZone);    } else     if (act_d.equals("S")) {      String schoolZone=T.zone_d;      if (!schoolZoneMap.containsKey(schoolZone))       schoolZoneMap.put(schoolZone,getRandomCoordInZone(Id.create(T.zone_d,Zone.class)));      c=schoolZoneMap.get(schoolZone);    } else {      c=getRandomCoordInZone(Id.create(T.zone_d,Zone.class));    }    p.addActivity(PopulationUtils.createActivityFromCoord(act_d,c));    if (!skipPerson) {      Person q=P;      PersonUtils.setEmployed(q,isEmployed);      P.addPlan(p);      completedPlans++;      int pct=completedPlans * 100 / (scenario.getPopulation().getPersons().size() - chainsWithNoZones.size() - unusableTripChains.size());      if ((pct % 5) == 0 && pct != currentPct) {        log.info("..." + completedPlans + " plans completed ("+ pct+ "%)...");        currentPct=pct;      }    }  }  log.info(completedPlans + " plans successfully completed.");  List<Id> personsToRemove=new ArrayList<Id>();  for (  Person P : scenario.getPopulation().getPersons().values())   if (P.getSelectedPlan() == null)   personsToRemove.add(P.getId());  for (  Id i : personsToRemove)   scenario.getPopulation().getPersons().remove(i);  log.info(personsToRemove.size() + " blank persons removed from population.");  log.info("FINAL POPULATION SIZE: " + scenario.getPopulation().getPersons().size());}  }
class C{  @Override public boolean isAuthorizationStale(String header){  return false;}  }
class C{  public double variance(){  throw new RuntimeException("Not yet implemented");}  }
class C{  public static TypedOperation parse(String descr) throws OperationParseException {  String errorPrefix="Error parsing " + descr + " as description for field getter statement: ";  int openParPos=descr.indexOf('(');  int closeParPos=descr.indexOf(')');  if (openParPos < 0) {    String msg=errorPrefix + " expecting parentheses.";    throw new OperationParseException(msg);  }  String prefix=descr.substring(0,openParPos);  int lastDotPos=prefix.lastIndexOf('.');  assert lastDotPos > 0 : "should be a period after the classname: " + descr;  String classname=prefix.substring(0,lastDotPos);  String opname=prefix.substring(lastDotPos + 1);  assert opname.equals("<get>") : "expecting <get>, saw " + opname;  if (closeParPos < 0) {    String msg=errorPrefix + " no closing parentheses found.";    throw new OperationParseException(msg);  }  String fieldname=descr.substring(openParPos + 1,closeParPos);  AccessibleField accessibleField=FieldParser.parse(descr,classname,fieldname);  ClassOrInterfaceType classType=accessibleField.getDeclaringType();  Type fieldType;  fieldType=Type.forType(accessibleField.getRawField().getGenericType());  List<Type> getInputTypeList=new ArrayList<>();  if (!accessibleField.isStatic()) {    getInputTypeList.add(classType);  }  return new TypedClassOperation(new FieldGet(accessibleField),classType,new TypeTuple(getInputTypeList),fieldType);}  }
class C{  public static void verify(RRset rrset,RRSIGRecord rrsig,DNSKEYRecord key) throws DNSSECException {  if (!matches(rrsig,key))   throw new KeyMismatchException(key,rrsig);  Date now=new Date();  if (now.compareTo(rrsig.getExpire()) > 0)   throw new SignatureExpiredException(rrsig.getExpire(),now);  if (now.compareTo(rrsig.getTimeSigned()) < 0)   throw new SignatureNotYetValidException(rrsig.getTimeSigned(),now);  verify(key.getPublicKey(),rrsig.getAlgorithm(),digestRRset(rrsig,rrset),rrsig.getSignature());}  }
class C{  public void readData() throws IOException {  DecimalFormat df=new DecimalFormat();  DecimalFormatSymbols dfs=new DecimalFormatSymbols(Locale.ENGLISH);  df.setDecimalFormatSymbols(dfs);  _leis.skipBytes(2);  _records=new ArrayList<List<Object>>(_rowCount);  for (int r=0; r <= _rowCount - 1; r++) {    ArrayList<Object> record=new ArrayList<Object>(_columnCount);    for (int c=0; c <= _columnCount - 1; c++) {      int length=_lengths[c];      if (length == -1)       length=255;      int type=_types[c];      int numDecSpaces=_decimalCounts[c];      df.setMaximumFractionDigits(numDecSpaces);      String cell=_leis.readString(length);      try {        record.add(c,DbfTableModel.getObjectForType(cell,type,df,length));      } catch (      ParseException pe) {        if (Debug.debugging("shape")) {          Debug.error("DbfInputStream:  error parsing column " + c + ", row "+ r+ ", expected number and got "+ cell);        }        record.add(c,DbfTableModel.appendWhitespaceOrTrim(null,length));      }    }    _records.add(record);    _leis.skipBytes(1);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.356 -0500",hash_original_method="D6F064C21D8F72C9BE34FD8563F8D233",hash_generated_method="C03CE451C689F3424295E47270350D88") public void delete(long key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  private int resolveResourceValue(String value,int defaultValue){  ResourceValue resource=getResourceValue(value);  if (resource != null) {    Integer id=null;    if (mPlatformFile || resource.isFramework()) {      id=Bridge.getResourceId(resource.getResourceType(),resource.getName());    } else {      id=mContext.getProjectCallback().getResourceId(resource.getResourceType(),resource.getName());    }    if (id != null) {      return id;    }  }  return defaultValue;}  }
class C{  public boolean pageScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  if (down) {    mTempRect.top=getScrollY() + height;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.top + height > view.getBottom()) {        mTempRect.top=view.getBottom() - height;      }    }  } else {    mTempRect.top=getScrollY() - height;    if (mTempRect.top < 0) {      mTempRect.top=0;    }  }  mTempRect.bottom=mTempRect.top + height;  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:    setKeyType((PropertyType)null);  return;case DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:setValueType((PropertyType)null);return;}super.eUnset(featureID);}  }
class C{  public static SortedSet<String> metadata(final Map<MetaKey,String> metadata,String namespace,String key){  final SortedSet<String> result=new TreeSet<>();  if (namespace.isEmpty()) {    namespace=null;  }  if (key.isEmpty()) {    key=null;  }  for (  final Map.Entry<MetaKey,String> entry : metadata.entrySet()) {    if (namespace != null && !namespace.equals(entry.getKey().getNamespace())) {      continue;    }    if (key != null && !key.equals(entry.getKey().getKey())) {      continue;    }    result.add(entry.getValue());  }  return result;}  }
class C{  public JavaMigrationResolver(ClassLoader classLoader,ScriptsLocation location){  this.location=location;  this.classLoader=classLoader;}  }
class C{  public static SourceUnit create(String name,String source,int tolerance){  CompilerConfiguration configuration=new CompilerConfiguration();  configuration.setTolerance(tolerance);  return new SourceUnit(name,source,configuration,null,new ErrorCollector(configuration));}  }
class C{  @Override public V putIfAbsent(final K s,final V v){synchronized (this) {    V o=this.levelB.get(s);    if (o != null)     return o;    o=this.levelA.get(s);    if (o != null)     return o;    this.levelA.put(s,v);    assert (this.levelA.size() <= this.cacheSize);    return null;  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().sequence(t.get2(),0L,false);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public static <C extends Comparable<?>>Range<C> upTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  @Deprecated public void start(List<String> urls,OnFileDownloadStatusListener onFileDownloadStatusListener){  DownloadStatusConfiguration.Builder builder=new Builder();  builder.addListenUrls(urls);  builder.configAutoRelease(true);  registerDownloadStatusListener(onFileDownloadStatusListener,builder.build());  start(urls);}  }
class C{  private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {  String msg="timestamp";  if (debug != null)   debug.println("---checking " + msg + ":"+ date.toString()+ "...");  try {    cert.checkValidity(date);  } catch (  CertificateExpiredException e) {    throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.EXPIRED);  }catch (  CertificateNotYetValidException e) {    throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.NOT_YET_VALID);  }  if (debug != null)   debug.println(msg + " verified.");}  }
class C{  private static boolean isCharsetAllowed(String userAgent){  try {    String version=Config.semverize(userAgent.substring(userAgent.indexOf('/') + 1));    if (Version.valueOf(version).greaterThanOrEqualTo(Version.forIntegers(2,1,0))) {      return true;    }  } catch (  Exception e) {    return false;  }  return false;}  }
class C{  public KMP(char[] pattern,int R){  this.R=R;  this.pattern=new char[pattern.length];  for (int j=0; j < pattern.length; j++)   this.pattern[j]=pattern[j];  int m=pattern.length;  dfa=new int[R][m];  dfa[pattern[0]][0]=1;  for (int x=0, j=1; j < m; j++) {    for (int c=0; c < R; c++)     dfa[c][j]=dfa[c][x];    dfa[pattern[j]][j]=j + 1;    x=dfa[pattern[j]][x];  }}  }
class C{  protected boolean matchWord(){  IDocument doc=fText.getDocument();  try {    int pos=curPos;    char c;    while (pos >= 0) {      c=doc.getChar(pos);      if (!Character.isJavaIdentifierPart(c))       break;      --pos;    }    startPos=pos;    pos=curPos;    int length=doc.getLength();    while (pos < length) {      c=doc.getChar(pos);      if (!Character.isJavaIdentifierPart(c))       break;      ++pos;    }    endPos=pos;    return true;  } catch (  BadLocationException x) {    log.debug(x);  }  return false;}  }
class C{  public Config createConfigWithPackingDetails(Config runtime,PackingPlan packing){  Config ytruntime;  ytruntime=Config.newBuilder().putAll(runtime).put(Keys.componentRamMap(),packing.getComponentRamDistribution()).put(Keys.numContainers(),1 + packing.getContainers().size()).build();  return ytruntime;}  }
class C{  public HolderLong(){}  }
class C{  public boolean reset(String name) throws ReplicatorException, InterruptedException {  UniversalDataSource ds=manager.find(name);  if (ds == null) {    return false;  } else {    ds.clear();    return true;  }}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public int postFiles(File[] files,int startIndexInArgs,OutputStream out,String type){  reset();  int filesPosted=0;  for (  File srcFile : files) {    if (srcFile.isDirectory() && srcFile.canRead()) {      filesPosted+=postDirectory(srcFile,out,type);    } else     if (srcFile.isFile() && srcFile.canRead()) {      filesPosted+=postFiles(new File[]{srcFile},out,type);    } else {      File parent=srcFile.getParentFile();      if (parent == null)       parent=new File(".");      String fileGlob=srcFile.getName();      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);      File[] fileList=parent.listFiles(ff);      if (fileList == null || fileList.length == 0) {        warn("No files or directories matching " + srcFile);        continue;      }      filesPosted+=postFiles(fileList,out,type);    }  }  return filesPosted;}  }
class C{  @Override public void acceptDataPoint(ChartEvent e){  if (e.getReset()) {    m_xCount=0;    m_max=1;    m_min=0;  }  if (m_outputFrame != null) {    boolean refresh=false;    if (e.getLegendText() != null & e.getLegendText() != m_legendText) {      m_legendText=e.getLegendText();      refresh=true;    }    if (e.getMin() != m_min || e.getMax() != m_max) {      m_oldMax=m_max;      m_oldMin=m_min;      m_max=e.getMax();      m_min=e.getMin();      refresh=true;      m_yScaleUpdate=true;    }    if (refresh) {      m_legendPanel.repaint();      m_scalePanel.repaint();    }    acceptDataPoint(e.getDataPoint());  }  m_xCount++;}  }
class C{  public CAddressSpaceLoaderReporter(final ListenerProvider<IAddressSpaceListener> listeners){  m_listeners=listeners;}  }
class C{  boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    if (mSelectedPosition != 0) {      int position=lookForSelectablePosition(0,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_TOP;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    if (mSelectedPosition < mItemCount - 1) {      int position=lookForSelectablePosition(mItemCount - 1,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_BOTTOM;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  private void removeSummerRomance(Audit audit){  Set<RelatedContent> relatedContentSet=(Set<RelatedContent>)contentDataService.getRelatedContentFromAudit(audit);  for (  RelatedContent relatedContent : relatedContentSet) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug(" deleteContentRelationShip between of " + ((Content)relatedContent).getURI());      contentDataService.deleteContentRelationShip(((Content)relatedContent).getId());    }  }}  }
class C{  @Override public void onClick(final View view){  final String rssiValue=mRssiView.getText().toString();  boolean valid=true;  int rssi=1000;  if (TextUtils.isEmpty(rssiValue))   valid=false;  try {    rssi=Integer.parseInt(rssiValue);  } catch (  final NumberFormatException e) {    valid=false;  }  if (rssi < -127 || rssi > 20)   valid=false;  if (valid) {    final UpdateFragment parentFragment=(UpdateFragment)getParentFragment();    parentFragment.writeNewRssi(rssi);    dismiss();  } else {    mRssiView.setError(getText(R.string.update_dialog_rssi_error));    mRssiView.requestFocus();  }}  }
class C{  @SuppressWarnings({"UnusedParameters"}) protected void beginMoveEntries(BufferedImage oldBackingImage,BufferedImage newBackingImage){  if (this.g != null)   this.g.dispose();  this.g=newBackingImage.createGraphics();  this.g.setComposite(AlphaComposite.Src);}  }
class C{  public JMXServerErrorException(String s,Error err){  super(s);  cause=err;}  }
class C{  public ObdFileFilter(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.418 -0500",hash_original_method="955F0BB80223C58E153B47499A5DD4B3",hash_generated_method="FDD563AA40ECE31E69BC2E5E22861B16") private static void dualPivotQuicksort(char[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  char ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    char t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    char t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    char t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    char t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    char t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  char pivot1=ae2;  a[e2]=a[left];  char pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public static void stop(){  List<String> w=new ArrayList<>(connectionPools.keySet());  for (  String str : w) {    try {      unbind(str);    } catch (    NameNotFoundException ex) {    }  }}  }
class C{  public static final String numberToState(int stateNumber){  if (stateNumber == NUMBER_OF_MISSING_STATE) {    return "Missing";  }  if (stateNumber == NUMBER_OF_OMITTED_STATE) {    return "Omitted";  }  int[] array=new int[3];  if (3 != NUMBER_OF_PROVERS) {    Activator.getDefault().logDebug("Method ColorPredicate.numberToState must be reimplemented" + " when number of provers changes");  }  for (int i=0; i < PROVER_STATUSES[0].length; i++) {    array[0]=i;    for (int j=0; j < PROVER_STATUSES[1].length; j++) {      array[1]=j;      for (int k=0; k < PROVER_STATUSES[2].length; k++) {        array[2]=k;        if (numberOfState(array) == stateNumber) {          return "(" + PROVER_STATUSES[0][i] + ", "+ PROVER_STATUSES[1][j]+ ", "+ PROVER_STATUSES[2][k]+ ")";        }      }    }  }  return "No state with number " + stateNumber;}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return new SparseDoubleMatrix2D(rows,columns);}  }
class C{  private void deleteOwnControl(RisikoMassnahmenUmsetzung risikoMassnahmenUmsetzung){  ArrayList<MassnahmenUmsetzung> arrListMassnahmenUmsetzungen=(ArrayList<MassnahmenUmsetzung>)getRiskAnalysisWizard().getAllMassnahmenUmsetzungen();  try {    if (arrListMassnahmenUmsetzungen.contains(risikoMassnahmenUmsetzung)) {      arrListMassnahmenUmsetzungen.remove(risikoMassnahmenUmsetzung);      RisikoMassnahmeHome.getInstance().initRisikoMassnahmeUmsetzung(risikoMassnahmenUmsetzung);      RisikoMassnahmeHome.getInstance().remove(risikoMassnahmenUmsetzung.getRisikoMassnahme());    }  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.AdditionalSecurityMeasuresPage_22);  }}  }
class C{  protected void append(StringBuilder dest,String content,int start,int end){  if (escape) {    for (int i=start; i < end; i++) {      char ch=content.charAt(i);switch (ch) {case '&':        dest.append("&amp;");      break;case '<':    dest.append("&lt;");  break;case '>':dest.append("&gt;");break;case '"':dest.append("&quot;");break;case '\'':dest.append("&#x27;");break;case '/':dest.append("&#x2F;");break;default :if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A) {dest.append(ch);} else if (ch < 0xff) {dest.append("&#");dest.append((int)ch);dest.append(";");} else {dest.append(ch);}}}} else {dest.append(content,start,end);}}  }
class C{  @Override public void send(final Destination destination,final Message message) throws JMSException {  session.lock();  try {    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message);    }    checkState();    producer.send(destination,message);    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  @Override public int countWaitingReferences(){  return maxIndex;}  }
class C{  private void resolveConflicts(final ConflictDescription[] descriptions){  final List<ConflictResolution> resolutionList=new ArrayList<ConflictResolution>();  final MultipleConflictResolutionDialog resolveDialog=new MultipleConflictResolutionDialog(getShell(),descriptions);  if (resolveDialog.open() != IDialogConstants.OK_ID) {    return;  }  for (int i=0; i < descriptions.length; i++) {    final ConflictResolution resolution=resolveDialog.getResolution(descriptions[i]);    if (resolution != null) {      resolutionList.add(resolution);    }  }  final ConflictResolution[] resolutions=resolutionList.toArray(new ConflictResolution[resolutionList.size()]);  final ResolveConflictsCommand resolver=new ResolveConflictsCommand(repository,resolutions);  UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(new ResourceChangingCommand(resolver));  resolutionFinished(resolutions,resolver.getStatuses());}  }
class C{  public void testNonTrivialDeleteByQuery() throws Exception {  clearIndex();  assertU(add(doc("id","101","text","red apple")));  assertU(add(doc("id","102","text","purple grape")));  assertU(add(doc("id","103","text","green grape")));  assertU(add(doc("id","104","text","green pear")));  assertU(add(doc("id","105","text","yellow banana")));  assertU(add(doc("id","106","text","red cherry")));  assertU(commit());  assertQ(req("id:[100 TO 110]"),"//*[@numFound='6']");  assertQ(req("*:*"),"//*[@numFound='6']");  assertQ(req("text:red"),"//*[@numFound='2']");  assertQ(req("-text:red"),"//*[@numFound='4']");  assertQ(req("text:grape"),"//*[@numFound='2']");  assertQ(req("-text:grape"),"//*[@numFound='4']");  assertQ(req("-text:red -text:grape"),"//*[@numFound='2']");  assertQ(req("{!lucene q.op=AND df=text}grape green"),"//*[@numFound='1']","//int[@name='id'][.='103']");  assertQ(req("-_val_:\"{!lucene q.op=AND df=text}grape green\""),"//*[@numFound='5']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='104']","//int[@name='id'][.='105']","//int[@name='id'][.='106']");  assertU(delQ("-*:*"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='6']");  assertU(delQ("-text:grape -text:red"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='4']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='103']","//int[@name='id'][.='106']");  assertU(delQ("{!term f=id}106"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='3']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='103']");  assertU(delQ("-_val_:\"{!lucene q.op=AND df=text}grape green\""));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='1']","//int[@name='id'][.='103']");  assertU(delQ("-text:doesnotexist"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='0']");}  }
class C{  public void roaming(){  addArg("roaming");}  }
class C{  public static String layoutCompoundLabel(JComponent c,FontMetrics fm,String[] text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  boolean orientationIsLeftToRight=true;  int hAlign=horizontalAlignment;  int hTextPos=horizontalTextPosition;  if (c != null) {    if (!(c.getComponentOrientation().isLeftToRight())) {      orientationIsLeftToRight=false;    }  }switch (horizontalAlignment) {case LEADING:    hAlign=(orientationIsLeftToRight) ? LEFT : RIGHT;  break;case TRAILING:hAlign=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}switch (horizontalTextPosition) {case LEADING:hTextPos=(orientationIsLeftToRight) ? LEFT : RIGHT;break;case TRAILING:hTextPos=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}return layoutCompoundLabel(fm,text,icon,verticalAlignment,hAlign,verticalTextPosition,hTextPos,viewR,iconR,textR,textIconGap);}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public static boolean writeStateToFile(File file,long state,double lnL){  OutputStream fileOut=null;  try {    fileOut=new FileOutputStream(file);    PrintStream out=new PrintStream(fileOut);    int[] rngState=MathUtils.getRandomState();    out.print("rng");    for (int i=0; i < rngState.length; i++) {      out.print("\t");      out.print(rngState[i]);    }    out.println();    out.print("\nstate\t");    out.println(state);    out.print("lnL\t");    out.println(lnL);    for (    Parameter parameter : Parameter.CONNECTED_PARAMETER_SET) {      out.print(parameter.getParameterName());      out.print("\t");      out.print(parameter.getDimension());      for (int dim=0; dim < parameter.getDimension(); dim++) {        out.print("\t");        out.print(parameter.getParameterValue(dim));      }      out.println();    }    for (    Model model : Model.CONNECTED_MODEL_SET) {      if (model instanceof TreeModel) {        out.print(model.getModelName());        out.print("\t");        out.println(((TreeModel)model).getNewick());      }    }    out.close();    fileOut.close();  } catch (  IOException ioe) {    System.err.println("Unable to write file: " + ioe.getMessage());    return false;  }  return true;}  }
class C{  @Override void incrementTakeSidePutPermits(){  if (this.haContainer instanceof HAContainerMap && isPrimary()) {synchronized (this.permitMon) {      ++this.takeSidePutPermits;      this.permitMon.notify();    }  }}  }
class C{  int parseHour(String source,char patternChar,int offset) throws ParseException {  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;  return parseNumber(source,offset,"hour",min,max) - min;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:53.024 -0500",hash_original_method="B936C5375D6639A303C6027641033901",hash_generated_method="0D91481D29B7299D61A329B8CF47B660") public final boolean checkTag(int identifier){  return this.constrId == identifier;}  }
class C{  public SingleSampleTTest(double mean){  super(1);  this.mean=mean;}  }
class C{  public void dispose(){  mRunButton.setSelected(false);  super.dispose();}  }
class C{  public void resetToFreshlyCreated(){  if (!isFreshlyCreated()) {    Set<SessionNode> _parents=new HashSet<>(this.parents);    Set<SessionNode> _children=new HashSet<>(this.children);    for (    SessionNode _parent : _parents) {      removeParent(_parent);    }    for (    SessionNode a_children : _children) {      removeChild(a_children);    }    destroyModel();    this.parents=new HashSet<>();    this.children=new HashSet<>();    this.sessionSupport=null;    this.sessionHandler=null;  }}  }
class C{  public static CalculationType newInstance(String value){  final CalculationType returnInstance=new CalculationType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){  onSuccess(statusCode,response);}  }
class C{  public static int hash(byte[] data,int offset,int length,int seed){  return hash(ByteBuffer.wrap(data,offset,length),seed);}  }
class C{  public NamespaceSupport(){  reset();}  }
class C{  boolean isUsingStaticIp(int netId){  WifiConfiguration config=mConfiguredNetworks.get(netId);  if (config != null && config.ipAssignment == IpAssignment.STATIC) {    return true;  }  return false;}  }
class C{  public boolean containsAll(Collection<?> c){  for (  Object o : c)   if (!contains(o))   return false;  return true;}  }
class C{  private void saveSelection(){  if (m_changed && m_gridController != null) {    int row=m_gridController.getTable().getSelectedRow();    if (row >= 0)     m_C_ValidCombination_ID=((Integer)m_mTab.getValue(row,"C_ValidCombination_ID")).intValue();    log.config("(" + row + ") - "+ m_C_ValidCombination_ID);  }}  }
class C{  @Override public long addFile(String fileName,InputStream inputStream,long fileSize) throws IOException, NameTakenException, InternalException {  try {    String imagePath=getImageFilePath(fileName);    logger.info("write to {}",imagePath);    try (NfcFileOutputStream outputStream=nfcClient.putFile(imagePath,fileSize)){      for (int i=0; i < fileSize; i++) {        outputStream.write(inputStream.read());      }    }     return fileSize;  }  finally {    if (inputStream != null) {      inputStream.close();    }  }}  }
class C{  public void add(T item,int position){  getList().add(position,item);  notifyItemInserted(position);  notifyItemRangeChanged(position,getItemCount());}  }
class C{  protected BaseInterval(ReadableInstant start,ReadableDuration duration){  super();  iChronology=DateTimeUtils.getInstantChronology(start);  iStartMillis=DateTimeUtils.getInstantMillis(start);  long durationMillis=DateTimeUtils.getDurationMillis(duration);  iEndMillis=FieldUtils.safeAdd(iStartMillis,durationMillis);  checkInterval(iStartMillis,iEndMillis);}  }
class C{  public Descending(int col){  super(col);}  }
class C{  public void putGeneralString(String s) throws IOException {  writeString(s,DerValue.tag_GeneralString,"ASCII");}  }
class C{  public static BlockPair createFakeBlock(BlockStore blockStore,StoredBlock previousStoredBlock,long version,long timeSeconds,int height,Transaction... transactions){  try {    Block previousBlock=previousStoredBlock.getHeader();    Address to=new ECKey().toAddress(previousBlock.getParams());    Block b=previousBlock.createNextBlock(to,version,timeSeconds,height);    for (    Transaction tx : transactions) {      tx.getConfidence().setSource(TransactionConfidence.Source.NETWORK);      b.addTransaction(tx);    }    b.solve();    BlockPair pair=new BlockPair();    pair.block=b;    pair.storedBlock=previousStoredBlock.build(b);    blockStore.put(pair.storedBlock);    blockStore.setChainHead(pair.storedBlock);    return pair;  } catch (  VerificationException e) {    throw new RuntimeException(e);  }catch (  BlockStoreException e) {    throw new RuntimeException(e);  }}  }
class C{  public void print(TagString s,double x,double y,double superscriptCorrection){  fontFamilyStack=new Stack<String>();  this.clearedText=new StringBuffer();  this.attributes=new Vector<AttributeEntry>();  this.superscriptCorrection=superscriptCorrection;  parse(s);  while (tags.size() > 0) {    closeTag((String)tags.keys().nextElement());  }  AttributedString attributedString=new AttributedString(clearedText.toString(),FontUtilities.getAttributes(graphics.getFont()));  for (int i=0; i < attributes.size(); i++) {    ((AttributeEntry)attributes.elementAt(i)).apply(attributedString);  }  graphics.drawString(attributedString.getIterator(),(float)x,(float)y);}  }
class C{  public void load(List<PolicyQualifierInfo> policyQualifierInfo){  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());  data=new Object[policyQualifierInfoArray.length][1];  int i=0;  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {    data[i][0]=policyQualInfo;    i++;  }  fireTableDataChanged();}  }
class C{  public void add(String str){  curr.next=new Entry(str,Entry.NUL);  curr=curr.next;  count++;}  }
class C{  public void sort(int[] A,int low,int high){  if (low < high) {    int middle=low + (high - low) / 2;    sort(A,low,middle);    sort(A,middle + 1,high);    merge(A,low,middle,high);  }}  }
class C{  public static Type unionOfCaseTypes(TypeDeclaration td){  List<Type> caseTypes=td.getCaseTypes();  Unit unit=td.getUnit();  if (caseTypes == null) {    return unit.getAnythingType();  }  List<Type> list=new ArrayList<Type>(caseTypes.size() + 1);  list.addAll(caseTypes);  UnionType it=new UnionType(unit);  it.setCaseTypes(list);  return it.getType();}  }
class C{  @Override public double[] clusterPriors(){  double[] n=new double[m_priors.length];  System.arraycopy(m_priors,0,n,0,n.length);  return n;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public boolean matches(VacuumEnvironmentState state,Agent agent){  if (!this.getAgentLocation().equals(state.getAgentLocation(agent))) {    return false;  }  if (!this.getLocationState().equals(state.getLocationState(this.getAgentLocation()))) {    return false;  }  return true;}  }
class C{  public GraphicAttributes(Properties props){  super(props);}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  final float bottom=(width / targetAspectRatio) + top;  return bottom;}  }
class C{  @Override public void clipRect(int x,int y,int width,int height){}  }
class C{  private synchronized void addNodejsInstalls(IConfigurationElement[] cf,List<IEmbeddedNodejs> list){  for (  IConfigurationElement ce : cf) {    try {      list.add(new NodejsInstall(ce));      Trace.trace(Trace.EXTENSION_POINT,"  Loaded nodeJSInstall: " + ce.getAttribute("id"));    } catch (    Throwable t) {      Trace.trace(Trace.SEVERE,"  Could not load nodeJSInstall: " + ce.getAttribute("id"),t);    }  }}  }
class C{  public double[][][] computeLocalFromPreviousObservations(int timeSeries[][][]){  int timeSteps=timeSeries.length;  int agentRows=timeSeries[0].length;  int agentColumns=timeSeries[0][0].length;  double[][][] localPredictive=new double[timeSteps][agentRows][agentColumns];  if (timeSteps < k + (k - 1)) {    return localPredictive;  }  average=0;  max=0;  min=0;  int[][] prevVal=new int[agentRows][agentColumns];  int[][] nextVal=new int[agentRows][agentColumns];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      prevVal[r][c]=0;      nextVal[r][c]=0;      for (int p=0; p < k; p++) {        prevVal[r][c]*=numDiscreteValues;        prevVal[r][c]+=timeSeries[p][r][c];        nextVal[r][c]*=numDiscreteValues;        nextVal[r][c]+=timeSeries[k - 1 + p][r][c];      }    }  }  double logTerm=0.0;  for (int t=k; t < timeSteps - (k - 1); t++) {    for (int r=0; r < agentRows; r++) {      for (int c=0; c < agentColumns; c++) {        nextVal[r][c]-=maxShiftedValue[timeSeries[t - 1][r][c]];        nextVal[r][c]*=numDiscreteValues;        nextVal[r][c]+=timeSeries[k - 1 + t][r][c];        logTerm=((double)jointCount[nextVal[r][c]][prevVal[r][c]]) / ((double)nextCount[nextVal[r][c]] * (double)prevCount[prevVal[r][c]]);        logTerm*=(double)observations;        localPredictive[t][r][c]=Math.log(logTerm) / log_base;        average+=localPredictive[t][r][c];        if (localPredictive[t][r][c] > max) {          max=localPredictive[t][r][c];        } else         if (localPredictive[t][r][c] < min) {          min=localPredictive[t][r][c];        }        prevVal[r][c]-=maxShiftedValue[timeSeries[t - k][r][c]];        prevVal[r][c]*=numDiscreteValues;        prevVal[r][c]+=timeSeries[t][r][c];      }    }  }  average=average / (double)(agentRows * agentColumns * (timeSteps - k - (k - 1)));  return localPredictive;}  }
class C{  public OutlierResult run(Relation<V> relation){  final DBIDs ids=relation.getDBIDs();  ArrayList<ArrayDBIDs> subspaceIndex=buildOneDimIndexes(relation);  Set<HiCSSubspace> subspaces=calculateSubspaces(relation,subspaceIndex,rnd.getSingleThreadedRandom());  if (LOG.isVerbose()) {    LOG.verbose("Number of high-contrast subspaces: " + subspaces.size());  }  List<DoubleRelation> results=new ArrayList<>();  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Calculating Outlier scores for high Contrast subspaces",subspaces.size(),LOG) : null;  for (  HiCSSubspace dimset : subspaces) {    if (LOG.isVerbose()) {      LOG.verbose("Performing outlier detection in subspace " + dimset);    }    ProxyDatabase pdb=new ProxyDatabase(ids);    pdb.addRelation(new ProjectedView<>(relation,new NumericalFeatureSelection<V>(dimset)));    OutlierResult result=outlierAlgorithm.run(pdb);    results.add(result.getScores());    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double sum=0.0;    for (    DoubleRelation r : results) {      final double s=r.doubleValue(iditer);      if (!Double.isNaN(s)) {        sum+=s;      }    }    scores.putDouble(iditer,sum);    minmax.put(sum);  }  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());  DoubleRelation scoreres=new MaterializedDoubleRelation("HiCS","HiCS-outlier",scores,relation.getDBIDs());  return new OutlierResult(meta,scoreres);}  }
class C{  public void testSingleMultiLineStringManyPointRoundTrip() throws SQLException {  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(1000);  pgc.setGenerationAlgorithm(LineStringGenerator.HORZ);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiLineString pt=(MultiLineString)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiLineString pt2=(MultiLineString)or.read(st);  assertTrue("The input MultiLineString is not the same as the output MultiLineString",pt.equals(pt2));}  }
class C{  private void mergeServiceUsers(List<User> users,List<ServiceUser> updatedUsers){  for (  ServiceUser updatedUser : updatedUsers) {    for (    User user : users) {      if (user.getUserId().equals(updatedUser.getUserId())) {        user.setApplicationUserId(updatedUser.getApplicationUserId());        break;      }    }  }}  }
class C{  public boolean shouldAllowRequest(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowRequest(url);      if (result != null) {        return result;      }    }  }  if (url.startsWith("blob:") || url.startsWith("data:") || url.startsWith("about:blank")) {    return true;  }  if (url.startsWith("https://ssl.gstatic.com/accessibility/javascript/android/")) {    return true;  }  if (url.startsWith("file://")) {    return !url.contains("/app_webview/");  }  return false;}  }
class C{  public static void readBodyMap(ActiveMQBuffer message,TypedProperties map){  message.resetReaderIndex();  map.decode(message);}  }
class C{  protected void clearParameters(Object preparedStatement){  QueryInformation queryAndParameters=preparedStatements.getIfPresent(preparedStatement);  if (null == queryAndParameters) {    if (LOG.isDebugEnabled()) {      LOG.debug("Could not get the prepared statement from the cache to clear the parameters! Prepared Statement:" + preparedStatement);    }    return;  }  queryAndParameters.clearParameters();}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  private void analyzeIfNullBranch(BasicBlock basicBlock,InstructionHandle lastHandle) throws DataflowAnalysisException {  Location location=new Location(lastHandle,basicBlock);  IsNullValueFrame frame=invDataflow.getFactAtLocation(location);  if (!frame.isValid()) {    return;  }  IsNullValue top=frame.getTopValue();  int lineNumber=getLineNumber(method,lastHandle);  if (lineNumber < 0) {    return;  }  if (!(top.isDefinitelyNull() || top.isDefinitelyNotNull())) {    if (DEBUG) {      System.out.println("Line " + lineNumber + " undetermined");    }    undeterminedBranchSet.set(lineNumber);    return;  }  short opcode=lastHandle.getInstruction().getOpcode();  boolean definitelySame=top.isDefinitelyNull();  if (opcode != Constants.IFNULL) {    definitelySame=!definitelySame;  }  if (definitelySame) {    if (DEBUG) {      System.out.println("Line " + lineNumber + " always same");    }    definitelySameBranchSet.set(lineNumber);  } else {    if (DEBUG) {      System.out.println("Line " + lineNumber + " always different");    }    definitelyDifferentBranchSet.set(lineNumber);  }  RedundantBranch redundantBranch=new RedundantBranch(location,lineNumber,top);  boolean wantNull=(opcode == Constants.IFNULL);  int infeasibleEdgeType=(wantNull == top.isDefinitelyNull()) ? EdgeTypes.FALL_THROUGH_EDGE : EdgeTypes.IFCMP_EDGE;  Edge infeasibleEdge=invDataflow.getCFG().getOutgoingEdgeWithType(basicBlock,infeasibleEdgeType);  redundantBranch.setInfeasibleEdge(infeasibleEdge);  if (DEBUG) {    System.out.println("Adding redundant branch: " + redundantBranch);  }  redundantBranchList.add(redundantBranch);}  }
class C{  public void finish() throws IOException {  if (!finished) {    endBlock();    try {      index.encode(out);      encodeStreamFooter();    } catch (    IOException e) {      exception=e;      throw e;    }    finished=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:16.259 -0500",hash_original_method="92638E1F733B540A4060D31FD00C2E43",hash_generated_method="4F508BD3E138E2D5ABBA2AFA4E75FC11") public boolean isAnonymous(){  if (keyExchange == KEY_EXCHANGE_DH_anon || keyExchange == KEY_EXCHANGE_DH_anon_EXPORT || keyExchange == KEY_EXCHANGE_ECDH_anon) {    return true;  }  return false;}  }
class C{  public static void registerEntity(Class<? extends TaggedLogAPIEntity> clazz) throws IllegalArgumentException {  registerEntity(createEntityDefinition(clazz));}  }
class C{  public void pullImage(DockerImagePullStrategy pullStrategy,String imageName) throws InterruptedException {  LOG.info("Pulling image {} with {} strategy...",imageName,pullStrategy);  final List<Image> images=getDockerCli().listImagesCmd().withShowAll(true).exec();  NameParser.ReposTag repostag=NameParser.parseRepositoryTag(imageName);  final String fullImageName=repostag.repos + ":" + (repostag.tag.isEmpty() ? "latest" : repostag.tag);  boolean hasImage=Iterables.any(images,null);  boolean pull=hasImage ? pullStrategy.pullIfExists(imageName) : pullStrategy.pullIfNotExists(imageName);  if (pull) {    LOG.info("Pulling image '{}' {}. This may take awhile...",imageName,hasImage ? "again" : "since one was not found");    long startTime=System.currentTimeMillis();    getDockerCli().pullImageCmd(imageName).exec(new PullImageResultCallback()).awaitSuccess();    long pullTime=System.currentTimeMillis() - startTime;    LOG.info("Finished pulling image '{}', took {} ms",imageName,pullTime);  }}  }
class C{  protected void updateMatrix(int size,double[] scratch,DBIDArrayIter ij,PointerHierarchyRepresentationBuilder builder,double mindist,int x,int y,final int sizex,final int sizey){  final int xbase=triangleSize(x), ybase=triangleSize(y);  int j=0;  for (; j < y; j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    final int yb=ybase + j;    scratch[yb]=linkage.combine(sizex,scratch[xbase + j],sizey,scratch[yb],sizej,mindist);  }  j++;  int jbase=triangleSize(j);  for (; j < x; jbase+=j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    final int jb=jbase + y;    scratch[jb]=linkage.combine(sizex,scratch[xbase + j],sizey,scratch[jb],sizej,mindist);  }  jbase+=j++;  for (; j < size; jbase+=j++) {    if (builder.isLinked(ij.seek(j))) {      continue;    }    final int sizej=builder.getSize(ij);    scratch[jbase + y]=linkage.combine(sizex,scratch[jbase + x],sizey,scratch[jbase + y],sizej,mindist);  }}  }
class C{  protected Anonymous_extendedStateMachine_1_Impl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.536 -0400",hash_original_method="5CFC5B6B1EB8619DEC60F6B82F3081E9",hash_generated_method="170A64221F00215B2CD270A529F3E477") @Override public void reset() throws IOException {  in.reset();  lineNumber=markedLineNumber;  lastChar=markedLastChar;}  }
class C{  public byte[] toBytes(){  byte[] returnBytes=new byte[bytesLength];  System.arraycopy(bytes,0,returnBytes,0,bytesLength);  return returnBytes;}  }
class C{  private void displayPackageFilePath(String pckg){  try {    PackageInfo info=mPm.getPackageInfo(pckg,0,0);    if (info != null && info.applicationInfo != null) {      System.out.print("package:");      System.out.println(info.applicationInfo.sourceDir);    }  } catch (  RemoteException e) {    System.err.println(e.toString());    System.err.println(PM_NOT_RUNNING_ERR);  }}  }
class C{  public String open(String gamePreset){  gameInput.setText(gamePreset);  loadFavorites();  save=false;  setVisible(true);  if (save) {    return gameInput.getText().trim();  }  return null;}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  list.add(ActionType.USE.getRepresentation());}  }
class C{  static final int resizeStamp(int n){  return Integer.numberOfLeadingZeros(n) | (1 << (RESIZE_STAMP_BITS - 1));}  }
class C{  @Override public boolean hasInstance(Scriptable instance){  return (instance instanceof XML || instance instanceof XMLList);}  }
class C{  @Override public Request<Void> importArchive(String workspaceId,ProjectReference projectReference,InputStream archiveInputStream){  checkNotNull(workspaceId);  checkNotNull(projectReference);  checkNotNull(archiveInputStream);  final Invocation request=getWebTarget().path(workspaceId).path("import").path(projectReference.name()).request().buildPost(entity(archiveInputStream,"application/zip"));  return new SimpleRequest<>(request,Void.class,getAuthenticationManager());}  }
class C{  public static boolean isSuperCall(MethodInvocationTree tree){  return isNamedMethodCall("super",tree);}  }
class C{  public static void notify(Object obj){synchronized (obj) {    obj.notify();  }}  }
class C{  public CsvReader(Reader reader){  this(new BufferedReader(reader));}  }
class C{  public SelectedTag(int tagID,Tag[] tags){  HashSet<Integer> ID=new HashSet<Integer>();  HashSet<String> IDStr=new HashSet<String>();  for (int i=0; i < tags.length; i++) {    ID.add(new Integer(tags[i].getID()));    IDStr.add(tags[i].getIDStr());  }  if (ID.size() != tags.length)   throw new IllegalArgumentException("The IDs are not unique!");  if (IDStr.size() != tags.length)   throw new IllegalArgumentException("The ID strings are not unique!");  for (int i=0; i < tags.length; i++) {    if (tags[i].getID() == tagID) {      m_Selected=i;      m_Tags=tags;      return;    }  }  throw new IllegalArgumentException("Selected tag is not valid");}  }
class C{  public IllegalThreadStateException(@Nullable String s){  super(s);}  }
class C{  public DtoProductCategoryServiceImpl(final GenericService<ProductCategory> productCategoryGenericService,final GenericService<Product> productService,final GenericService<Category> categoryService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,productCategoryGenericService,adaptersRepository);  this.productService=productService;  this.categoryService=categoryService;}  }
class C{  public Boolean isTrustAnchor(){  return trustAnchor;}  }
class C{  public String toStringLatex(){  List<List<String>> table=toStringMatrix();  StringBuilder sb=new StringBuilder();  for (int i=0; i < table.size(); i++) {    List<String> row=table.get(i);    for (int j=0; j < row.size(); j++) {      String value=row.get(j);      if ((i == 0 || j == 0) && !value.isEmpty()) {        sb.append("\\textbf{").append(value).append("} ");      } else {        sb.append(value);        sb.append(" ");      }      if (j < row.size() - 1) {        sb.append("& ");      }    }    sb.append("\\\\\n");  }  return sb.toString();}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    try {      if (len <= 0) {        if (len < 0) {          throw new IndexOutOfBoundsException();        } else         if ((off < 0) || (off > cbuf.length)) {          throw new IndexOutOfBoundsException();        }        return 0;      }      int avail=buf.length - pos;      if (avail > 0) {        if (len < avail)         avail=len;        System.arraycopy(buf,pos,cbuf,off,avail);        pos+=avail;        off+=avail;        len-=avail;      }      if (len > 0) {        len=super.read(cbuf,off,len);        if (len == -1) {          return (avail == 0) ? -1 : avail;        }        return avail + len;      }      return avail;    } catch (    ArrayIndexOutOfBoundsException e) {      throw new IndexOutOfBoundsException();    }  }}  }
class C{  private void testGetStorage(boolean useSsl) throws IOException, JAXBException, URISyntaxException {  dataBridgeWebClient.regServerAccessParamsDto.setUseSsl(useSsl);  String expectedStorageName="testStorage";  Storage storage=dataBridgeWebClient.getStorage(expectedStorageName);  assertNotNull("storage is null",storage);  assertEquals("storage name",expectedStorageName,storage.getName());}  }
class C{  public Matrix4 toNormalMatrix(){  val[M03]=0;  val[M13]=0;  val[M23]=0;  return inv().tra();}  }
class C{  public static String decodeMySQLString(byte[] bytes,final int offset,final int width,final FieldDef fieldDef){  ByteBuffer buff=byteBufferForMySQLString(bytes,offset,width,fieldDef);  return decodeString(buff,fieldDef.column().getCharsetName());}  }
class C{  public ArrayOfDoublesSetOperationBuilder(){  nomEntries_=DEFAULT_NOMINAL_ENTRIES;  numValues_=DEFAULT_NUMBER_OF_VALUES;  seed_=DEFAULT_UPDATE_SEED;}  }
class C{  void applyEditorValueAndDeactivate(){  Object newValue=doGetValue();  markDirty();  boolean isValid=isCorrect(newValue);  setValueValid(isValid);  if (!isValid) {    setErrorMessage(MessageFormat.format(getErrorMessage(),comboBox.getText()));  }  fireApplyEditorValue();  deactivate();}  }
class C{  synchronized public void stopWarrant(boolean abort){  if (_nextSignal != null) {    _nextSignal.removePropertyChangeListener(this);    _nextSignal=null;  }  super.stopWarrant(abort);}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  public W put(K key,V subKey,W value){  Map<V,W> map=maps.get(key);  if (map == null) {    map=new HashMap<V,W>();    maps.put(key,map);  }  return map.put(subKey,value);}  }
class C{  public StreamSource(Reader reader){  setReader(reader);}  }
class C{  @Override public void removeEventListener2(IOneToOneChatListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mOneToOneChatEventBroadcaster.removeOneToOneChatEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void removeElementWithParentWithLangAttr(ElementHandler<Element> elementHandler){  ElementHandler elementWithParentWithLang=new ElementHandlerImpl();  for (  Element el : elementHandler.get()) {    if (isElementHasParentWithLang(el)) {      elementWithParentWithLang.add(el);    }  }  elementHandler.removeAll(elementWithParentWithLang);}  }
class C{  protected void warnShortLong(String id){  log.warn("Roster entry \"" + id + "\" should be saved again to store the short/long address value");}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null) {    for (Node<E> x=last; x != null; x=x.prev) {      if (x.item == null) {        unlink(x);        return true;      }    }  } else {    for (Node<E> x=last; x != null; x=x.prev) {      if (o.equals(x.item)) {        unlink(x);        return true;      }    }  }  return false;}  }
class C{  void draw(Canvas canvas,Paint paint){  if (mCachedPath == null) {    makePath();  }  canvas.drawPath(mCachedPath,paint);}  }
class C{  public static void addOreSmelting(String input,String output,float xp){  if (!OreDictionary.getOres(output).isEmpty())   for (  ItemStack stack : OreDictionary.getOres(input))   FurnaceRecipes.instance().addSmeltingRecipe(stack,OreDictionary.getOres(output).get(0),xp);}  }
class C{  public static String removePattern(final String source,final String regex){  return replacePattern(source,regex,StringUtils.EMPTY);}  }
class C{  public TFloatIntIterator(TFloatIntHashMap map){  super(map);  _map=map;}  }
class C{  public DetailsResponse details(String packageName) throws IOException {  ResponseWrapper responseWrapper=executeGETRequest(DETAILS_URL,new String[][]{{"doc",packageName}});  return responseWrapper.getPayload().getDetailsResponse();}  }
class C{  public CTRSP800DRBG(BlockCipher engine,int keySizeInBits,int securityStrength,EntropySource entropySource,byte[] personalizationString,byte[] nonce){  _entropySource=entropySource;  _engine=engine;  _keySizeInBits=keySizeInBits;  _seedLength=keySizeInBits + engine.getBlockSize() * 8;  _isTDEA=isTDEA(engine);  if (securityStrength > 256) {    throw new IllegalArgumentException("Requested security strength is not supported by the derivation function");  }  if (getMaxSecurityStrength(engine,keySizeInBits) < securityStrength) {    throw new IllegalArgumentException("Requested security strength is not supported by block cipher and key size");  }  if (entropySource.entropySize() < securityStrength) {    throw new IllegalArgumentException("Not enough entropy for security strength required");  }  byte[] entropy=entropySource.getEntropy();  CTR_DRBG_Instantiate_algorithm(entropy,nonce,personalizationString);}  }
class C{  public R2Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet){  this(problem,subdivisions,referenceSet,new ChebychevUtility());}  }
class C{  public static void sendMail(Context mContext,String mailID){  Uri uri=Uri.parse("mailto:" + mailID);  Intent intent=new Intent(Intent.ACTION_SENDTO,uri);  mContext.startActivity(intent);}  }
class C{  public OneSheeldDevice(String address,boolean isTypePlus){  checkBluetoothAddress(address);  this.name=address;  this.address=address;  this.isPaired=false;  this.isTypePlus=isTypePlus;  initialize();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Request(UncachedId id,Id<Person> passengerId,double pickupTime,Id<Link> pickupLinkId,Id<Link> dropoffLinkId){  this.id=id;  this.pickupTime=pickupTime;  this.pickupLinkId=pickupLinkId;  this.dropoffLinkId=dropoffLinkId;  this.passengerId=passengerId;}  }
class C{  public UnregisterNodesResponse UnregisterNodes(RequestHeader RequestHeader,NodeId... NodesToUnregister) throws ServiceFaultException, ServiceResultException {  UnregisterNodesRequest req=new UnregisterNodesRequest(RequestHeader,NodesToUnregister);  return (UnregisterNodesResponse)channel.serviceRequest(req);}  }
class C{  void triggerAction(){  Component cmp=(Component)htmlC.getInputFields().get(id);  if (cmp != null) {    htmlC.selectComponent(cmp);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.IF_STATEMENT__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.IF_STATEMENT__IF_STMT:setIfStmt((Statement)null);return;case N4JSPackage.IF_STATEMENT__ELSE_STMT:setElseStmt((Statement)null);return;}super.eUnset(featureID);}  }
class C{  public Object parse(File file,String charset){  return parseFile(file,charset);}  }
class C{  public static void closeOutStream(OutputStream out){  try {    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Nullable private ClusterNode findNodeInHistory(UUID nodeId){  for (long topVer=cctx.discovery().topologyVersion() - 1; topVer > 0; topVer--) {    Collection<ClusterNode> top=cctx.discovery().topology(topVer);    if (top == null)     break;    for (    ClusterNode node : top)     if (F.eq(node.id(),nodeId))     return node;  }  return null;}  }
class C{  String formatDateAndTime(Long unixTime){  final Date date=new Date(unixTime);  final SimpleDateFormat format=defaultDateAndTimeFormat.get();  return format.format(date);}  }
class C{  public void testDateMissingFacet() throws Exception {  checkSortMissingFacet("datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  public CViewCommentDialog(final Window parent,final String title,final String name,final String description){  super(parent,title,ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(parent,"IE01632: Parent argument can't be null");  Preconditions.checkNotNull(name,"IE01633: Name argument can't be null");  new CDialogEscaper(this);  final JPanel panel=new JPanel(new BorderLayout());  panel.setBorder(new EmptyBorder(10,10,10,10));  final JPanel upperPanel=new JPanel(new BorderLayout());  final JPanel namePanel=new JPanel(new BorderLayout());  final JLabel nameLabel=new JLabel("Name");  nameLabel.setBorder(new EmptyBorder(0,0,0,10));  namePanel.add(nameLabel,BorderLayout.WEST);  m_nameField=new JTextField(name);  namePanel.add(m_nameField,BorderLayout.CENTER);  namePanel.setBorder(new EmptyBorder(5,5,5,5));  upperPanel.add(namePanel,BorderLayout.NORTH);  m_descriptionField=new CLimitedInputPane(description == null ? "" : description);  m_descriptionField.setEditable(true);  m_descriptionField.setBorder(new LineBorder(Color.BLACK));  final JScrollPane descriptionPane=new JScrollPane(m_descriptionField);  descriptionPane.setBorder(new EmptyBorder(5,5,5,5));  upperPanel.add(descriptionPane,BorderLayout.CENTER);  panel.add(upperPanel,BorderLayout.CENTER);  final CPanelTwoButtons okcancel=new CPanelTwoButtons(this,"OK","Cancel");  panel.add(okcancel,BorderLayout.SOUTH);  getContentPane().add(panel,BorderLayout.CENTER);  setSize(350,350);  GuiHelper.centerChildToParent(parent,this,true);  final InputMap windowImap=getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(HotKeys.APPLY_HK.getKeyStroke(),"APPLY");  getRootPane().getActionMap().put("APPLY",CActionProxy.proxy(new ApplyAction()));}  }
class C{  private void cleanTable(){  lock.lock();  try {    Reference<? extends TransactionConfidence> ref;    while ((ref=referenceQueue.poll()) != null) {      WeakConfidenceReference txRef=(WeakConfidenceReference)ref;      table.remove(txRef.hash);    }  }  finally {    lock.unlock();  }}  }
class C{  public static void load(InputStream in) throws IOException {  if (in != null) {    prp.load(in);  }  try {    prp.putAll((java.util.Map)System.getProperties().clone());  } catch (  SecurityException se) {    if (log.level > 1)     log.println("SecurityException: jcifs will ignore System properties");  }}  }
class C{  public NotificationChain basicSetTestedProjects(TestedProjects newTestedProjects,NotificationChain msgs){  TestedProjects oldTestedProjects=testedProjects;  testedProjects=newTestedProjects;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS,oldTestedProjects,newTestedProjects);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void testSharedMode() throws Exception {  processTest(DeploymentMode.SHARED);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new MotifOptionPaneUI();}  }
class C{  private URI createLinkToFolder(AppContext userContext,NavigationQuery query,NavigationItem item){  return createNavigationQuery(userContext,query).build(item.getSelfRef());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.577 -0500",hash_original_method="8BAE9456243623A59719FE55D09576AF",hash_generated_method="98A8D0F0B5B9C9B0B8D3A0903AFD90DB") public void removeProtocolCommandListener(ProtocolCommandListener listener){  __listeners.removeListener(listener);}  }
class C{  protected List<String> parametersToStringList(List<Parameter> parameters){  List<String> list=new ArrayList<>();  for (  Parameter parameter : parameters) {    list.add(String.format("\"%s\"=\"%s\"",parameter.getName(),parameter.getValue()));  }  return list;}  }
class C{  private boolean shouldClearSelection(AccessibilityNodeInfoCompat node){  return !AccessibilityNodeInfoUtils.nodeMatchesClassByType(node,EditText.class);}  }
class C{  public static void clearRegistry(){  fieldPrefixes.clear();}  }
class C{  public void testGreaterOrEqual(){  m_Filter=getFilter("ATT2 >= 4");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(14,result.numInstances());}  }
class C{  public Iterator<String> iterator(){  return map.getIterator();}  }
class C{  public BorderEditor(Border border,EditableResources resources){  initComponents();  originalBorder=border;  this.resources=resources;  if (resources.getImageResourceNames() == null || resources.getImageResourceNames().length < 1) {    borderType.removeItem("Image");    borderType.removeItem("Horizontal Image");    borderType.removeItem("Vertical Image");  } else {    ResourceEditorView.initImagesComboBox(topLeft,resources,false,false,true);    ResourceEditorView.initImagesComboBox(top,resources,false,false,true);    ResourceEditorView.initImagesComboBox(topRight,resources,false,false,true);    ResourceEditorView.initImagesComboBox(left,resources,false,false,true);    ResourceEditorView.initImagesComboBox(right,resources,false,false,true);    ResourceEditorView.initImagesComboBox(bottomRight,resources,false,false,true);    ResourceEditorView.initImagesComboBox(bottomLeft,resources,false,false,true);    ResourceEditorView.initImagesComboBox(bottom,resources,false,false,true);    ResourceEditorView.initImagesComboBox(center,resources,false,true,true);  }  JComponent[] all=new JComponent[]{arcHeight,arcWidth,bottom,bottomLeft,bottomRight,center,changeHighlightColor,changeLineColor,changeSecondaryHighlightColor,changeSecondaryShadowColor,changeShadowColor,highlightColor,imageMode,left,lineColor,thickness,raisedBorder,right,secondaryHighlightColor,secondaryShadowColor,shadowColor,top,topLeft,topRight,themeColors,imageBorderPreview,roundBorderSettings};  colorComponents.add(changeHighlightColor);  colorComponents.add(changeLineColor);  colorComponents.add(changeSecondaryHighlightColor);  colorComponents.add(changeSecondaryShadowColor);  colorComponents.add(changeShadowColor);  colorComponents.add(highlightColor);  colorComponents.add(lineColor);  colorComponents.add(secondaryHighlightColor);  colorComponents.add(secondaryShadowColor);  colorComponents.add(shadowColor);  colorComponents.add(bottom);  colorComponents.add(bottomLeft);  colorComponents.add(bottomRight);  colorComponents.add(left);  colorComponents.add(right);  colorComponents.add(topRight);  comboSelectionEnabled=new JComponent[][]{all,all,{changeHighlightColor,changeSecondaryHighlightColor,changeSecondaryShadowColor,changeShadowColor,highlightColor,raisedBorder,secondaryHighlightColor,secondaryShadowColor,shadowColor,themeColors},{changeHighlightColor,changeShadowColor,highlightColor,raisedBorder,shadowColor,themeColors},{lineColor,changeLineColor,themeColors,thickness},{arcHeight,arcWidth,lineColor,changeLineColor,themeColors},{bottom,bottomLeft,bottomRight,center,imageMode,left,right,top,topLeft,topRight,imageBorderPreview},{center,left,right},{bottom,center,top},{lineColor,roundBorderSettings}};  arcWidth.setModel(new SpinnerNumberModel(1,1,100,1));  arcHeight.setModel(new SpinnerNumberModel(1,1,100,1));  thickness.setModel(new SpinnerNumberModel(1,1,100,1));  opacity.setModel(new SpinnerNumberModel(255,0,255,1));  shadowBlur.setModel(new SpinnerNumberModelThatWorks(10.0,1,100,1));  shadowOpacity.setModel(new SpinnerNumberModel(0,0,255,1));  ;  shadowSpread.setModel(new SpinnerNumberModel(10,0,255,1));  ;  shadowX.setModel(new SpinnerNumberModelThatWorks(0.5,0,1,0.01));  ;  shadowY.setModel(new SpinnerNumberModelThatWorks(0.5,0,1,0.01));  ;  strokeOpacity.setModel(new SpinnerNumberModel(255,0,255,1));  strokeThickness.setModel(new SpinnerNumberModelThatWorks(0.0,0,30,0.5));  okButton.setPreferredSize(cancelButton.getPreferredSize());  ((AbstractDocument)highlightColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  new ButtonColorIcon(highlightColor,changeHighlightColor);  ((AbstractDocument)lineColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  new ButtonColorIcon(lineColor,changeLineColor);  ((AbstractDocument)shadowColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  new ButtonColorIcon(shadowColor,changeShadowColor);  ((AbstractDocument)secondaryHighlightColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  new ButtonColorIcon(secondaryHighlightColor,changeSecondaryHighlightColor);  ((AbstractDocument)secondaryShadowColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  new ButtonColorIcon(secondaryShadowColor,changeSecondaryShadowColor);  new ButtonColorIcon(strokeColor,strokeColorPicker);  new ButtonColorIcon(backgroundColor,backgroundColorPicker);  ((AbstractDocument)strokeColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  ((AbstractDocument)backgroundColor.getDocument()).setDocumentFilter(new ColorDocmentFilter());  boolean fourColorBorder=false;  if (border != null) {    if (border instanceof RoundBorder) {      borderType.setSelectedIndex(borderType.getItemCount() - 1);      jTabbedPane1.setSelectedIndex(2);    } else {      jTabbedPane1.setEnabledAt(2,false);switch (Accessor.getType(border)) {case Accessor.TYPE_EMPTY:        borderType.setSelectedIndex(1);      break;case Accessor.TYPE_LINE:    borderType.setSelectedIndex(4);  break;case Accessor.TYPE_ROUNDED:case Accessor.TYPE_ROUNDED_PRESSED:borderType.setSelectedIndex(5);break;case Accessor.TYPE_ETCHED_RAISED:raisedBorder.setSelected(true);case Accessor.TYPE_ETCHED_LOWERED:borderType.setSelectedIndex(3);break;case Accessor.TYPE_BEVEL_RAISED:raisedBorder.setSelected(true);case Accessor.TYPE_BEVEL_LOWERED:borderType.setSelectedIndex(2);fourColorBorder=true;break;case Accessor.TYPE_IMAGE:borderType.setSelectedIndex(6);break;case Accessor.TYPE_IMAGE_HORIZONTAL:borderType.setSelectedIndex(7);break;case Accessor.TYPE_IMAGE_VERTICAL:borderType.setSelectedIndex(8);break;}}}if (border != null) {if (border instanceof RoundBorder) {RoundBorder rb=(RoundBorder)border;backgroundColor.setText(Integer.toHexString(rb.getColor()));opacity.setValue(rb.getOpacity());isRectangle.setSelected(rb.isRectangle());shadowBlur.setValue(rb.getShadowBlur());shadowOpacity.setValue(rb.getShadowOpacity());shadowSpread.setValue(rb.getShadowSpread());shadowX.setValue(rb.getShadowX());shadowY.setValue(rb.getShadowY());strokeColor.setText(Integer.toHexString(rb.getStrokeColor()));strokeOpacity.setValue(rb.getStrokeOpacity());strokeThickness.setValue(rb.getStrokeThickness());strokeMillimeter.setSelected(rb.isStrokeMM());} else {arcHeight.setValue(new Integer(Math.max(1,Accessor.getArcHeight(border))));arcWidth.setValue(new Integer(Math.max(1,Accessor.getArcWidth(border))));highlightColor.setText(Integer.toHexString(Accessor.getColorA(border)));lineColor.setText(Integer.toHexString(Accessor.getColorA(border)));thickness.setValue(new Integer(Math.max(1,Accessor.getThickness(border))));secondaryShadowColor.setText(Integer.toHexString(Accessor.getColorD(border)));if (fourColorBorder) {secondaryHighlightColor.setText(Integer.toHexString(Accessor.getColorB(border)));shadowColor.setText(Integer.toHexString(Accessor.getColorC(border)));} else {secondaryHighlightColor.setText(Integer.toHexString(Accessor.getColorC(border)));shadowColor.setText(Integer.toHexString(Accessor.getColorB(border)));}themeColors.setSelected(Accessor.isThemeColors(border));Image[] images=Accessor.getImages(border);if (images != null) {if (images.length == 9) {String[] imageNames=new String[9];for (int iter=0; iter < 9; iter++) {imageNames[iter]=findImageName(images[iter]);if (imageNames[iter] == null && iter < 8) {imageMode.setSelected(true);topLeft.setSelectedItem(images[4]);top.setSelectedItem(images[0]);center.setSelectedItem(images[8]);updateBorder();return;}}imageMode.setSelected(false);top.setSelectedItem(images[0]);bottom.setSelectedItem(images[1]);left.setSelectedItem(images[2]);right.setSelectedItem(images[3]);topLeft.setSelectedItem(images[4]);topRight.setSelectedItem(images[5]);bottomLeft.setSelectedItem(images[6]);bottomRight.setSelectedItem(images[7]);center.setSelectedItem(images[8]);} else {String[] imageNames=new String[3];for (int iter=0; iter < 3; iter++) {imageNames[iter]=findImageName(images[iter]);}if (Accessor.getType(border) == Accessor.TYPE_IMAGE_HORIZONTAL) {left.setSelectedItem(images[0]);right.setSelectedItem(images[1]);center.setSelectedItem(images[2]);} else {top.setSelectedItem(images[0]);bottom.setSelectedItem(images[1]);center.setSelectedItem(images[2]);}}}}}updateBorder();}  }
class C{  public List<Property> toProperties(){  return new ArrayList<Property>(properties);}  }
class C{  private void addSign(String name,String url,String title,String caption){  Entity oldSign=playerSigns.get(name);  if (oldSign != null) {    zone.remove(oldSign);  }  PopupImage sign=new PopupImage(url,title,caption);  sign.setEntityClass("notice");  positionSign(sign);  playerSigns.put(name,sign);}  }
class C{  public void deletePendingAchievementDetails(DBTransaction transaction,String charname) throws SQLException {  String query="DELETE FROM pending_achievement " + "WHERE charname = '[charname]';";  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("charname",charname);  transaction.execute(query,parameters);}  }
class C{  NativeObject(long address){  this.allocationAddress=address;  this.address=address;}  }
class C{  public PassageScorer(float k1,float b,float pivot){  this.k1=k1;  this.b=b;  this.pivot=pivot;}  }
class C{  protected void drawPrimaryLine(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,ValueAxis domainAxis,ValueAxis rangeAxis,Rectangle2D dataArea){  if (item == 0) {    return;  }  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  if (Double.isNaN(y1) || Double.isNaN(x1)) {    return;  }  double x0=dataset.getXValue(series,item - 1);  double y0=dataset.getYValue(series,item - 1);  if (Double.isNaN(y0) || Double.isNaN(x0)) {    return;  }  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double transX0=domainAxis.valueToJava2D(x0,dataArea,xAxisLocation);  double transY0=rangeAxis.valueToJava2D(y0,dataArea,yAxisLocation);  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double transY1=rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);  if (Double.isNaN(transX0) || Double.isNaN(transY0) || Double.isNaN(transX1)|| Double.isNaN(transY1)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  boolean visible;  if (orientation == PlotOrientation.HORIZONTAL) {    state.workingLine.setLine(transY0,transX0,transY1,transX1);  } else   if (orientation == PlotOrientation.VERTICAL) {    state.workingLine.setLine(transX0,transY0,transX1,transY1);  }  visible=LineUtilities.clipLine(state.workingLine,dataArea);  if (visible) {    drawFirstPassShape(g2,pass,series,item,state.workingLine);  }}  }
class C{  @Override public Iterator<S2CellId> iterator(){  return cellIds.iterator();}  }
class C{  public static boolean isSamePackageMember(Class<?> class1,Class<?> class2){  if (class1 == class2)   return true;  if (!isSamePackage(class1,class2))   return false;  if (getOutermostEnclosingClass(class1) != getOutermostEnclosingClass(class2))   return false;  return true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private TaskList startMirrors(URI id,NativeContinuousCopyCreate copy){  String taskId=UUID.randomUUID().toString();  int count=1;  if (copy.getCount() != null) {    count=copy.getCount();  }  Volume sourceVolume=queryVolumeResource(id);  BlockServiceUtils.validateNotAnInternalBlockObject(sourceVolume,false);  checkForPendingTasks(Arrays.asList(sourceVolume.getTenant().getURI()),Arrays.asList(sourceVolume));  if (count <= 0) {    throw APIException.badRequests.invalidParameterRangeLessThanMinimum("count",count,1);  }  ArgValidator.checkEntity(sourceVolume,id,isIdEmbeddedInURL(id));  validateContinuousCopyName(copy.getName(),count,sourceVolume);  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  VirtualPool sourceVPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());  validateMirrorCount(sourceVolume,sourceVPool,count);  if (storageSystem != null && storageSystem.checkIfVmax3()) {    BlockServiceUtils.validateVMAX3ActiveSnapSessionsExists(sourceVolume.getId(),_dbClient,MIRRORS);  }  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,count);  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,sourceVolume.getCapacity());  capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,sourceVolume.getThinlyProvisioned());  capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_VOLUME_PRE_ALLOCATE_SIZE,sourceVolume.getThinVolumePreAllocationSize());  BlockServiceApi serviceApi=null;  if ((storageSystem != null) && (DiscoveredDataObject.Type.vplex.name().equals(storageSystem.getSystemType()))) {    serviceApi=getBlockServiceImpl(storageSystem.getSystemType());  } else {    serviceApi=getBlockServiceImpl("mirror");  }  return serviceApi.startNativeContinuousCopies(storageSystem,sourceVolume,sourceVPool,capabilities,copy,taskId);}  }
class C{  public void pushStylesheet(Stylesheet s){  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;  m_stylesheets.push(s);}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  if (patch.nextPageLink == null) {    current.nextPageLink=null;  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public static int gcd(int u,int v){  return BigInteger.valueOf(u).gcd(BigInteger.valueOf(v)).intValue();}  }
class C{  public static File findJavaExecutable(File vmInstallLocation){  for (int i=0; i < fgCandidateJavaFiles.length; i++) {    for (int j=0; j < fgCandidateJavaLocations.length; j++) {      File javaFile=new File(vmInstallLocation,fgCandidateJavaLocations[j] + fgCandidateJavaFiles[i]);      if (javaFile.isFile()) {        return javaFile;      }    }  }  return null;}  }
class C{  public TextEvent(Object source,int id){  super(source,id);}  }
class C{  public OrganizationHeader createOrganizationHeader(String organization) throws ParseException {  if (organization == null)   throw new NullPointerException("bad organization arg");  Organization o=new Organization();  o.setOrganization(organization);  return o;}  }
class C{  public DoubleVector normalize(){  return divide(norm());}  }
class C{  public String toString(){  return "SlideLogic";}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  @Override public Object onClockTick() throws Exception {  bitNumberBeingTransferred++;  if (bitNumberBeingTransferred == getNumBits() + getIntervalTimeInSclk()) {    bitNumberBeingTransferred=0;    if (getMod1Fdpx() == MOD1_FDPX_RX_MASK) {      if (isEnSet() && isMod0RxeSet()) {        targetDevice.readHalfDuplex();        if (isMod0RxeSet()) {          return null;        }      }    } else {      Integer value=read();      if (value != null) {        super.valueReady(value);        if (isMod1TxeSet()) {          return null;        }      }    }    platform.getMasterClock().remove(this);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.768 -0500",hash_original_method="2C7305D6C3442E9FCBF185523D5AEB72",hash_generated_method="84DFB7AAE1500AF170EDF98A6AEE0A26") public RowBuilder add(Object columnValue){  this.addTaint(columnValue.getTaint());  this.addTaint(columnValue.toString().getTaint());  if (index == endIndex) {    throw new CursorIndexOutOfBoundsException("No more columns left.");  }  data[index++]=columnValue;  return this;}  }
class C{  protected EnricherImpl(){  super();}  }
class C{  public static boolean viaAny(final X500Principal p1,final X500Principal p2){  return viaEquals(p1,p2) || viaName(p1,p2);}  }
class C{  private static DefaultSampleValues parseTfhd(DefaultSampleValues extendsDefaults,ParsableByteArray tfhd){  tfhd.setPosition(ATOM_HEADER_SIZE);  int fullAtom=tfhd.readInt();  int flags=parseFullAtomFlags(fullAtom);  tfhd.skip(4);  if ((flags & 0x01) != 0) {    tfhd.skip(8);  }  int defaultSampleDescriptionIndex=((flags & 0x02) != 0) ? tfhd.readUnsignedIntToInt() - 1 : extendsDefaults.sampleDescriptionIndex;  int defaultSampleDuration=((flags & 0x08) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.duration;  int defaultSampleSize=((flags & 0x10) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.size;  int defaultSampleFlags=((flags & 0x20) != 0) ? tfhd.readUnsignedIntToInt() : extendsDefaults.flags;  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  public void testDoubleReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoublePoint("value",30.1));  doc.add(new StoredField("value",30.1));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",-1.3));  doc.add(new StoredField("value",-1.3));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333333));  doc.add(new StoredField("value",4.2333333333333));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333332));  doc.add(new StoredField("value",4.2333333333332));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public void changedUpdate(DocumentEvent e){}  }
class C{  public long cacheStoreSessionCreate(long storePtr){  enter();  try {    return PlatformCallbackUtils.cacheStoreSessionCreate(envPtr,storePtr);  }  finally {    leave();  }}  }
class C{  public final PdfFileInformation readPdfFileMetadata(final PdfObject metadataObj,final PdfObjectReader currentPdfFile){  final PdfFileReader objectReader=currentPdfFile.getObjectReader();  final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile.getObjectReader());  final DecryptionFactory decryption=objectReader.getDecryptionObject();  final PdfObject infoObject=objectReader.getInfoObject();  if (infoObject != null && (!(decryption != null && (decryption.getBooleanValue(PDFflags.IS_FILE_ENCRYPTED) || decryption.getBooleanValue(PDFflags.IS_PASSWORD_SUPPLIED))))) {    readInformationObject(infoObject,objectDecoder);  }  if (metadataObj != null) {    final String objectRef=new String(metadataObj.getUnresolvedData());    final MetadataObject oldMetaDataObj=new MetadataObject(objectRef);    objectReader.readObject(oldMetaDataObj);    rawData=oldMetaDataObj.getDecodedStream();    if (rawData != null) {      int count=rawData.length;      while (count > 1) {        if (rawData[count - 1] == '>') {          break;        }        count--;      }      if (count > 0) {        final byte[] trimmedVersion=new byte[count];        System.arraycopy(rawData,0,trimmedVersion,0,count);        rawData=trimmedVersion;      }    }  }  return this;}  }
class C{  protected void writeTableAlterStmt(Table table,StringBuilder ddl){  ddl.append("ALTER TABLE ");  ddl.append(getFullyQualifiedTableNameShorten(table));  println(ddl);  printIndent(ddl);}  }
class C{  public void deleteTopic(String name) throws Exception {  if (usingJNDI) {    System.setProperty("MQJMS_PURGE_ON_DELETE","yes");    unbind(name);  } else {  }}  }
class C{  public synchronized void close() throws IOException {  closed=true;  super.close();}  }
class C{  public DateConverter(){  this(false);}  }
class C{  public Mesh3D computeSurfaceMesh(Mesh3D mesh,final float iso){  if (mesh == null) {    mesh=new TriangleMesh("isosurface-" + iso);  } else {    mesh.clear();  }  isoValue=iso;  float offsetZ=centreOffset.z;  for (int z=0; z < resZ1; z++) {    int sliceOffset=sliceRes * z;    float offsetY=centreOffset.y;    for (int y=0; y < resY1; y++) {      float offsetX=centreOffset.x;      int offset=resX * y + sliceOffset;      for (int x=0; x < resX1; x++) {        final int cellIndex=getCellIndex(x,y,z);        if (cellIndex > 0 && cellIndex < 255) {          final int edgeFlags=MarchingCubesIndex.edgesToCompute[cellIndex];          if (edgeFlags > 0 && edgeFlags < 255) {            int edgeOffsetIndex=offset * 3;            float offsetData=volume.getVoxelAt(offset);            float isoDiff=isoValue - offsetData;            if ((edgeFlags & 1) > 0) {              if (edgeVertices[edgeOffsetIndex] == null) {                float t=isoDiff / (volume.getVoxelAt(offset + 1) - offsetData);                edgeVertices[edgeOffsetIndex]=new Vec3D(offsetX + t * cellSize.x,y * cellSize.y + centreOffset.y,z * cellSize.z + centreOffset.z);              }            }            if ((edgeFlags & 2) > 0) {              if (edgeVertices[edgeOffsetIndex + 1] == null) {                float t=isoDiff / (volume.getVoxelAt(offset + resX) - offsetData);                edgeVertices[edgeOffsetIndex + 1]=new Vec3D(x * cellSize.x + centreOffset.x,offsetY + t * cellSize.y,z * cellSize.z + centreOffset.z);              }            }            if ((edgeFlags & 4) > 0) {              if (edgeVertices[edgeOffsetIndex + 2] == null) {                float t=isoDiff / (volume.getVoxelAt(offset + sliceRes) - offsetData);                edgeVertices[edgeOffsetIndex + 2]=new Vec3D(x * cellSize.x + centreOffset.x,y * cellSize.y + centreOffset.y,offsetZ + t * cellSize.z);              }            }          }        }        offsetX+=cellSize.x;        offset++;      }      offsetY+=cellSize.y;    }    offsetZ+=cellSize.z;  }  final int[] face=new int[16];  for (int z=0; z < resZ1; z++) {    int sliceOffset=sliceRes * z;    for (int y=0; y < resY1; y++) {      int offset=resX * y + sliceOffset;      for (int x=0; x < resX1; x++) {        final int cellIndex=getCellIndex(x,y,z);        if (cellIndex > 0 && cellIndex < 255) {          int n=0;          int edgeIndex;          final int[] cellTriangles=MarchingCubesIndex.cellTriangles[cellIndex];          while ((edgeIndex=cellTriangles[n]) != -1) {            int[] edgeOffsetInfo=MarchingCubesIndex.edgeOffsets[edgeIndex];            face[n]=((x + edgeOffsetInfo[0]) + resX * (y + edgeOffsetInfo[1]) + sliceRes * (z + edgeOffsetInfo[2])) * 3 + edgeOffsetInfo[3];            n++;          }          for (int i=0; i < n; i+=3) {            final Vec3D va=edgeVertices[face[i + 1]];            final Vec3D vb=edgeVertices[face[i + 2]];            final Vec3D vc=edgeVertices[face[i]];            if (va != null && vb != null && vc != null) {              mesh.addFace(va,vb,vc);            }          }        }        offset++;      }    }  }  return mesh;}  }
class C{  private void moveParametersToHighRegisters(){  int paramWidth=ssaMeth.getParamWidth();  BasicRegisterMapper mapper=new BasicRegisterMapper(ssaMeth.getRegCount());  int regCount=ssaMeth.getRegCount();  for (int i=0; i < regCount; i++) {    if (i < paramWidth) {      mapper.addMapping(i,regCount - paramWidth + i,1);    } else {      mapper.addMapping(i,i - paramWidth,1);    }  }  if (DEBUG) {    System.out.printf("Moving %d registers from 0 to %d\n",paramWidth,regCount - paramWidth);  }  ssaMeth.mapRegisters(mapper);}  }
class C{  private void addJarClasses(final Path location){  try (final JarFile jarFile=new JarFile(location.toFile())){    final Enumeration<JarEntry> entries=jarFile.entries();    while (entries.hasMoreElements()) {      final String entryName=entries.nextElement().getName();      if (entryName.endsWith(".class"))       classes.add(convertToQualifiedName(entryName));    }  } catch (  IOException e) {    throw new IllegalArgumentException("Could not read jar-file '" + location + "', reason: "+ e.getMessage());  }}  }
class C{  public SchemaReceiver createSchemaReceiver(String namespaceUri,PropertyMap properties){  if (!SchemaImpl.NVDL_URI.equals(namespaceUri))   return null;  return new SchemaReceiverImpl(properties);}  }
class C{  public Boolean isUsbRecommended(){  return usbRecommended;}  }
class C{  @Override public NamedList<Object> request(final SolrRequest request,String collection) throws SolrServerException, IOException {  Exception ex=null;  ServerWrapper[] serverList=aliveServerList;  int maxTries=serverList.length;  Map<String,ServerWrapper> justFailed=null;  long timeAllowedNano=getTimeAllowedInNanos(request);  long timeOutTime=System.nanoTime() + timeAllowedNano;  for (int attempts=0; attempts < maxTries; attempts++) {    if (isTimeExceeded(timeAllowedNano,timeOutTime)) {      break;    }    int count=counter.incrementAndGet() & Integer.MAX_VALUE;    ServerWrapper wrapper=serverList[count % serverList.length];    try {      return wrapper.client.request(request,collection);    } catch (    SolrException e) {      throw e;    }catch (    SolrServerException e) {      if (e.getRootCause() instanceof IOException) {        ex=e;        moveAliveToDead(wrapper);        if (justFailed == null)         justFailed=new HashMap<>();        justFailed.put(wrapper.getKey(),wrapper);      } else {        throw e;      }    }catch (    Exception e) {      throw new SolrServerException(e);    }  }  for (  ServerWrapper wrapper : zombieServers.values()) {    if (isTimeExceeded(timeAllowedNano,timeOutTime)) {      break;    }    if (wrapper.standard == false || justFailed != null && justFailed.containsKey(wrapper.getKey()))     continue;    try {      NamedList<Object> rsp=wrapper.client.request(request,collection);      zombieServers.remove(wrapper.getKey());      addToAlive(wrapper);      return rsp;    } catch (    SolrException e) {      throw e;    }catch (    SolrServerException e) {      if (e.getRootCause() instanceof IOException) {        ex=e;      } else {        throw e;      }    }catch (    Exception e) {      throw new SolrServerException(e);    }  }  if (ex == null) {    throw new SolrServerException("No live SolrServers available to handle this request");  } else {    throw new SolrServerException("No live SolrServers available to handle this request",ex);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.766 -0500",hash_original_method="9EE7DD01E1AB6B0D269DB58A7544C17D",hash_generated_method="BFBDCEA5D01AFD36373F651333FF5A41") private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  public boolean intersects2DIncomplete(Polygon other){  assert (this.getDimensionality() == 2);  assert (other.getDimensionality() == 2);  for (  double[] v : this.points) {    if (other.containsPoint2D(v)) {      return true;    }  }  for (  double[] v : other.points) {    if (this.containsPoint2D(v)) {      return true;    }  }  return false;}  }
class C{  private boolean isPositionedOnRelevantEndBezel(final @NonNull MotionEvent event){  if (isLandscape) {    return event.getRawY() + mBezelGestureSpanPixels >= mScreenHeight;  } else {    return event.getRawX() + mBezelGestureSpanPixels >= mScreenWidth;  }}  }
class C{  protected void sequence_AnnotatedScriptElement_ClassExtendsClause_ClassImplementsList_Members_N4ClassDeclaration_TypeVariables(ISerializationContext context,N4ClassDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void debug(final Throwable throwable){  final StringWriter errors=new StringWriter();  throwable.printStackTrace(new PrintWriter(errors));  debugLogger.accept(errors.toString());}  }
class C{  @Procedure @Description("apoc.couchbase.namedParamsQuery(nodes, bucket, statement, paramNames, paramValues) yield queryResult - executes a N1QL statement with named parameters.") public Stream<CouchbaseQueryResult> namedParamsQuery(@Name("nodes") List<String> nodes,@Name("bucket") String bucket,@Name("statement") String statement,@Name("paramNames") List<String> paramNames,@Name("paramValues") List<Object> paramValues){  Stream<CouchbaseQueryResult> result=null;  try (CouchbaseConnection couchbaseConnection=CouchbaseManager.getConnection(nodes,bucket)){    List<JsonObject> statementResult=couchbaseConnection.executeParametrizedStatement(statement,paramNames,paramValues);    if (statementResult != null) {      result=Stream.of(CouchbaseUtils.convertToCouchbaseQueryResult(statementResult));    }  }   return result;}  }
class C{  private void addBombardmentSources(){  final PlayerID attacker=m_bridge.getPlayerID();  final ITripleAPlayer remotePlayer=getRemotePlayer();  final Match<Unit> ownedAndCanBombard=new CompositeMatchAnd<>(Matches.unitCanBombard(attacker),Matches.unitIsOwnedBy(attacker));  final Map<Territory,Collection<IBattle>> adjBombardment=getPossibleBombardingTerritories();  final Iterator<Territory> territories=adjBombardment.keySet().iterator();  final boolean shoreBombardPerGroundUnitRestricted=isShoreBombardPerGroundUnitRestricted(getData());  while (territories.hasNext()) {    final Territory t=territories.next();    if (!m_battleTracker.hasPendingBattle(t,false)) {      Collection<IBattle> battles=adjBombardment.get(t);      battles=Match.getMatches(battles,Matches.BattleIsAmphibious);      if (!battles.isEmpty()) {        final Collection<Unit> bombardUnits=t.getUnits().getMatches(ownedAndCanBombard);        final List<Unit> ListedBombardUnits=new ArrayList<>();        ListedBombardUnits.addAll(bombardUnits);        sortUnitsToBombard(ListedBombardUnits,attacker);        final Iterator<Unit> bombarding=ListedBombardUnits.iterator();        if (!bombardUnits.isEmpty()) {          if (!remotePlayer.selectShoreBombard(t)) {            continue;          }        }        while (bombarding.hasNext()) {          final Unit u=bombarding.next();          final IBattle battle=selectBombardingBattle(u,t,battles);          if (battle != null) {            if (shoreBombardPerGroundUnitRestricted) {              if (battle.getAmphibiousLandAttackers().size() <= battle.getBombardingUnits().size()) {                battles.remove(battle);                break;              }            }            battle.addBombardingUnit(u);          }        }      }    }  }}  }
class C{  public static final void putCreatePlaylistEntryRequest(JSONObject createObject) throws JSONException {  mPlaylistEntriesMutationsArray.put(new JSONObject().put("create",createObject));}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String streamHeadsHeader=null;  String elevationModifiedHeader=null;  String correctedDemHeader=null;  List<StreamHead> streamHeadList=new ArrayList<>();  int counter=0;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      streamHeadsHeader=args[i];    } else     if (i == 2) {      elevationModifiedHeader=args[i];    } else     if (i == 3) {      correctedDemHeader=args[i];    } else     if (i == 4) {      maxRadius=Double.parseDouble(args[i]);    }  }  if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    streamHeads=new WhiteboxRaster(streamHeadsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    elevationModified.setPreferredPalette("blueyellow.pal");    elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    elevationModified.setZUnits("dimensionless");    correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    correctedDEM.setPreferredPalette("blueyellow.pal");    correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    correctedDEM.setZUnits("dimensionless");    if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) {      showFeedback("Input images must have the same dimensions.");      return;    }    updateProgress("Loop 1 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          elevationModified.setValue(row,col,0);        } else {          elevationModified.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (streamHeads.getValue(row,col) == 1) {          streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col)));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    streamHeadList=OrderStreamHeads(streamHeadList);    updateProgress("Loop 3 of 4:",0);    for (    StreamHead streamHead : streamHeadList) {      CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord());      counter=counter + 1;      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / streamHeadList.size());      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (elevationModified.getValue(row,col) != noData) {          correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col));        } else {          correctedDEM.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    elevationModified.addMetadataEntry("Created on " + new Date());    correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    correctedDEM.addMetadataEntry("Created on " + new Date());    dem.close();    streamHeads.close();    elevationModified.close();    correctedDEM.close();    returnData(correctedDemHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int compareTo(GenericEntity that){  if (that == null)   return -1;  int tempResult=this.entityName.compareTo(that.entityName);  if (tempResult != 0)   return tempResult;  Iterator<ModelField> pkIter=getModelEntity().getPksIterator();  while (pkIter.hasNext()) {    ModelField curField=pkIter.next();    tempResult=compareToFields(that,curField.getName());    if (tempResult != 0)     return tempResult;  }  Iterator<ModelField> nopkIter=getModelEntity().getNopksIterator();  while (nopkIter.hasNext()) {    ModelField curField=nopkIter.next();    if (!curField.getIsAutoCreatedInternal()) {      tempResult=compareToFields(that,curField.getName());      if (tempResult != 0)       return tempResult;    }  }  return tempResult;}  }
class C{  public static Validator<CharSequence> beginsWithUppercaseLetter(@NonNull final CharSequence errorMessage){  return new BeginsWithUppercaseLetterValidator(errorMessage);}  }
class C{  public static String prefixZero(final long value,final int paddingSize){  final String prefixedValue=String.format("%0" + paddingSize + "d",value);  return prefixedValue;}  }
class C{  void decodeOtherPages(){  final int pageCount=pageData.getPageCount();  if (debugLayout) {    System.out.println("decodeOtherPages called");  }  multiDisplayOptions.setIsGeneratingOtherPages(true);  int page=multiDisplayOptions.getStartViewPage(), originalStart=multiDisplayOptions.getStartViewPage(), originalEnd=multiDisplayOptions.getEndViewPage() + 1;  int firstFacing=1, lastFacing=1;  if (multiDisplayOptions.isTurnoverOn() && displayView == FACING) {    firstFacing=originalStart - 2;    lastFacing=firstFacing + 6;    if (firstFacing < 1) {      firstFacing=1;    }    if (lastFacing > pageCount + 1) {      lastFacing=pageCount + 1;    }  }  int facingCount=lastFacing - firstFacing;  resetPageCaches(multiDisplayOptions.getStartViewPage(),multiDisplayOptions.getEndViewPage() + 1);  if (debugLayout) {    System.out.println("decoding ------START " + originalStart + " END="+ originalEnd+ " display.isGeneratingOtherPages="+ multiDisplayOptions.isIsGeneratingOtherPages());    System.out.println(multiDisplayOptions.getStartViewPage() + " " + multiDisplayOptions.getEndViewPage());  }  while (multiDisplayOptions.isIsGeneratingOtherPages()) {    if ((originalStart != multiDisplayOptions.getStartViewPage()) && (originalEnd != multiDisplayOptions.getEndViewPage())) {      if (debugLayout) {        System.out.println("Worker detected change to page range to " + multiDisplayOptions.getStartViewPage() + ' '+ multiDisplayOptions.getEndViewPage());      }      page=multiDisplayOptions.getStartViewPage();      originalEnd=multiDisplayOptions.getEndViewPage() + 1;      if (page == 0) {        page++;      }      originalStart=page;      if (multiDisplayOptions.isTurnoverOn() && displayView == FACING) {        firstFacing=originalStart - 2;        lastFacing=firstFacing + 6;        if (firstFacing < 1) {          firstFacing=1;        }        if (lastFacing > pageCount + 1) {          lastFacing=pageCount + 1;        }        facingCount=lastFacing - firstFacing;      }      resetPageCaches(originalStart,originalEnd);    }    if (multiDisplayOptions.isTurnoverOn() && displayView == FACING && facingCount == 0) {      break;    }    if ((!multiDisplayOptions.isTurnoverOn() || displayView != FACING) && page == originalEnd) {      break;    }    if (originalStart > originalEnd) {      break;    }    if (page > 0 && page < pdf.getPageCount() + 1) {      decodeMorePages(page,originalStart,originalEnd);    }    if (displayView == FACING && multiDisplayOptions.isTurnoverOn()) {      int leftPage=multiDisplayOptions.getPageNumber();      if (multiDisplayOptions.isSeparateCover() && (leftPage & 1) == 1) {        leftPage--;      }      if (!multiDisplayOptions.isSeparateCover() && (leftPage & 1) == 0) {        leftPage--;      }      int ref=page - leftPage + 2;      if (!(ref > 1 && ref < 4)) {        if (ref > 1) {          ref-=2;        }        int[] pageW=multiDisplayOptions.getPageW();        int[] pageH=multiDisplayOptions.getPageH();        if (ref < 4 && ref > -1 && facingDragCachedImages[ref] == null) {          final BufferedImage image=new BufferedImage(pageW[page],pageH[page],BufferedImage.TYPE_INT_ARGB);          final Graphics2D pg=(Graphics2D)image.getGraphics();          final int displayRotation=display.getDisplayRotation();          pg.rotate(displayRotation * Math.PI / 180);          try {switch (displayRotation) {case 90:              pg.translate(0,-pageW[page]);            pg.drawImage(pdf.getPageAsImage(page),0,0,pageH[page] + 1,pageW[page] + 1,null);          break;case 180:        pg.translate(-pageW[page],-pageH[page]);      pg.drawImage(pdf.getPageAsImage(page),0,0,pageW[page] + 1,pageH[page] + 1,null);    break;case 270:  pg.translate(-pageH[page],0);pg.drawImage(pdf.getPageAsImage(page),0,0,pageH[page] + 1,pageW[page] + 1,null);break;default :pg.drawImage(pdf.getPageAsImage(page),0,0,pageW[page] + 1,pageH[page] + 1,null);break;}} catch (final Exception e) {LogWriter.writeLog("Exception: " + e.getMessage());}facingDragCachedImages[ref]=image;}}}facingCount--;page++;if (multiDisplayOptions.isTurnoverOn() && displayView == FACING && page == lastFacing) {page=firstFacing;}}if (debugLayout) {System.out.println("decodeOtherPageinins------ENDED");}}  }
class C{  protected void sequence_ArrayBindingPattern(ISerializationContext context,BindingPattern semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <T>Substitution<T> forArgs(List<TypeVariable> parameters,List<T> arguments){  if (parameters.size() != arguments.size()) {    throw new IllegalArgumentException("number of parameters and arguments must agree");  }  Substitution<T> s=new Substitution<>();  for (int i=0; i < parameters.size(); i++) {    s.put(parameters.get(i),arguments.get(i));  }  return s;}  }
class C{  public static ImageTypeSpecifier createFromRenderedImage(RenderedImage image){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  if (image instanceof BufferedImage) {    int bufferedImageType=((BufferedImage)image).getType();    if (bufferedImageType != BufferedImage.TYPE_CUSTOM) {      return getSpecifier(bufferedImageType);    }  }  return new ImageTypeSpecifier(image);}  }
class C{  public boolean addJars(String[] jarNames,byte[][] jarBytes,String[] groups){  boolean success=true;  try {    if (groups == null) {      groups=new String[]{SharedConfiguration.CLUSTER_CONFIG};    }    Region<String,Configuration> configRegion=getConfigurationRegion();    for (    String group : groups) {      Configuration configuration=configRegion.get(group);      if (configuration == null) {        configuration=new Configuration(group);        writeConfig(configuration);      }      configuration.addJarNames(jarNames);      configRegion.put(group,configuration);      String groupDir=FilenameUtils.concat(configDirPath,group);      writeJarFiles(groupDir,jarNames,jarBytes);    }  } catch (  Exception e) {    success=false;    logger.info(e.getMessage(),e);  }  return success;}  }
class C{  public VcfInfoDoubleAnnotator(AbstractDerivedAnnotation annotation,int decimalPlaces){  assert annotation != null && annotation.getType().getClassType() == Double.class;  mAnnotation=annotation;  mDecimalPlaces=decimalPlaces;}  }
class C{  public void testPoll(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll());  }  assertNull(q.poll());}  }
class C{  public byte[] createJarFromName(final String className) throws IOException {  return createJarFromClassContent(className,"public class " + className + "{}");}  }
class C{  public Name paramName(int i){  return names.fromString("x" + i);}  }
class C{  void write(JavaFileObject file,byte[] bytes){  OutputStream out=null;  try {    out=file.openOutputStream();    out.write(bytes,0,bytes.length);  } catch (  IOException e) {    error("Error writing file: " + e);  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {        error("Error closing file: " + e);      }    }  }}  }
class C{  public void addListener(final IZyGraphDisplaySettingsListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public int systemNotResponding(String msg) throws RemoteException {  Log.i(TAG,String.format("System is not responding: %s",msg));  return 1;}  }
class C{  public void addActionListener(ActionListener al){  btnClearCodes.addActionListener(al);  btnReadCodes.addActionListener(al);  btnReadPending.addActionListener(al);  btnReadPermanent.addActionListener(al);}  }
class C{  private Serializable saveState(final boolean saveUndo){  final MoveExtendedDelegateState state=new MoveExtendedDelegateState();  state.superState=super.saveState();  state.m_needToInitialize=m_needToInitialize;  state.m_needToDoRockets=m_needToDoRockets;  state.m_PUsLost=m_PUsLost;  return state;}  }
class C{  public static boolean parseBoolean(char[] text,int offset,int length,boolean defaultValue){  if (text == null || length == 0) {    return defaultValue;  }  if (length == 1) {    return text[offset] != '0';  }  if (length == 2) {    return !(text[offset] == 'n' && text[offset + 1] == 'o');  }  if (length == 3) {    return !(text[offset] == 'o' && text[offset + 1] == 'f' && text[offset + 2] == 'f');  }  if (length == 5) {    return !(text[offset] == 'f' && text[offset + 1] == 'a' && text[offset + 2] == 'l' && text[offset + 3] == 's' && text[offset + 4] == 'e');  }  return true;}  }
class C{  public ArrayList<Media> formatForApp(ArrayList<Media> existingList){  ArrayList<LinkedTreeMap<String,Object>> movies=new ArrayList<>();  if (downloads != null) {    movies=downloads;  }  for (  LinkedTreeMap<String,Object> item : movies) {    Movie movie=new Movie(sMediaProvider,null);    movie.imdbId=(String)item.get("ImdbCode");    movie.videoId=movie.imdbId.substring(2);    int existingItem=isInResults(existingList,movie.videoId);    if (existingItem == -1) {      movie.title=(String)item.get("MovieTitleClean");      String yearStr=item.get("MovieYear").toString();      Double year=Double.parseDouble(yearStr);      movie.year=Integer.toString(year.intValue());      movie.rating=item.get("MovieRating").toString();      movie.genre=StringUtils.uppercaseFirst(item.get("Genre").toString().split(",")[0]);      movie.image=(String)item.get("CoverImage");      movie.headerImage=(String)item.get("CoverImage");      movie.trailer=null;      String runtimeStr=item.get("Runtime").toString();      Double runtime=0d;      if (!runtimeStr.isEmpty())       runtime=Double.parseDouble(runtimeStr);      movie.runtime=Integer.toString(runtime.intValue());      movie.synopsis=(String)item.get("Synopsis");      movie.certification=null;      movie.fullImage=movie.image;      Media.Torrent torrent=new Media.Torrent();      torrent.seeds=0;      torrent.peers=0;      torrent.hash=null;      torrent.url=(String)item.get("TorrentUrl");      movie.torrents.put(item.get("Quality").toString(),torrent);      existingList.add(movie);    }  }  return existingList;}  }
class C{  public String toShortString(StringBuilder sb){  sb.setLength(0);  sb.append('[');  sb.append(left);  sb.append(',');  sb.append(top);  sb.append("][");  sb.append(right);  sb.append(',');  sb.append(bottom);  sb.append(']');  return sb.toString();}  }
class C{  public int bookkeep(){  Ui.Task t=ui.pushTask("bookkeeping","Updating database");  Set<Set<Revision>> testedHeadEquivalences=new LinkedHashSet<>();  for (  MigrationConfig config : context.migrationConfigs().values()) {    bookkeepMigration(testedHeadEquivalences,config.getName(),config.getFromRepository(),config.getToRepository());  }  ui.popTask(t,"");  db.write();  return 0;}  }
class C{  public IssuingDistributionPoint(DistributionPointName distributionPoint,ReasonFlags onlySomeReasons){  this.distributionPoint=distributionPoint;  this.onlySomeReasons=onlySomeReasons;}  }
class C{  public static boolean isBetweenInclusive(long min,long i,long max){  return (i >= min) && (i <= max);}  }
class C{  public void add(String category,String[] titles,double[] values){  mCategories.add(category);  mTitles.add(titles);  mValues.add(values);}  }
class C{  public boolean isDirectEmbeddableCollection(){  return false;}  }
class C{  public synchronized void populateDataFromFile(String fileName,Tradingday tradingday) throws Exception {  DBTableLookupServiceProvider.clearLookup();  try (FileReader fileReader=new FileReader(fileName);BufferedReader bufferedReader=new BufferedReader(fileReader)){    if ((fileName == null) || fileName.equals("")) {      return;    }    Integer chartDays=ConfigProperties.getPropAsInt("trade.backfill.duration");    if (!ChartDays.newInstance(chartDays).isValid())     chartDays=new Integer(2);    String tierDefault=ConfigProperties.getPropAsString("trade.tier.default");    if (!Tier.newInstance(tierDefault).isValid())     tierDefault=null;    Integer barSize=ConfigProperties.getPropAsInt("trade.backfill.barsize");    if (!BarSize.newInstance(barSize).isValid())     barSize=new Integer(300);    Integer riskAmount=ConfigProperties.getPropAsInt("trade.risk");    String strategyName=ConfigProperties.getPropAsString("trade.strategy.default");    if (!DAOStrategy.newInstance(strategyName).isValid())     strategyName=DAOStrategy.newInstance().getCode();    Strategy strategy=(Strategy)DAOStrategy.newInstance(strategyName).getObject();    Portfolio portfolio=(Portfolio)DAOPortfolio.newInstance().getObject();    String strLine="";    while ((strLine=bufferedReader.readLine()) != null) {      Tradestrategy tradestrategy=Tradingdays.parseContractLine(strLine);      if (null != tradestrategy) {        Contract contract=this.getContract(tradestrategy.getContract().getSymbol());        if (null != contract) {          tradestrategy.setContract(contract);        }        if (null == tradestrategy.getTradingday()) {          if (null == tradingday) {            throw new PersistentModelException("Please select a Tradingday");          }          tradestrategy.setTradingday(tradingday);        } else {          Tradingday currTradingday=this.getTradingday(tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose());          if (null != currTradingday) {            if (null != tradestrategy.getTradingday().getMarketGap() && null == currTradingday.getMarketGap()) {              currTradingday.setMarketGap(tradestrategy.getTradingday().getMarketGap());            }            if (null != tradestrategy.getTradingday().getMarketBias() && null == currTradingday.getMarketBias()) {              currTradingday.setMarketBias(tradestrategy.getTradingday().getMarketBias());            }            if (null != tradestrategy.getTradingday().getMarketBar() && null == currTradingday.getMarketBar()) {              currTradingday.setMarketBar(tradestrategy.getTradingday().getMarketBar());            }            tradestrategy.setTradingday(currTradingday);          }        }        if (TradingCalendar.isHoliday(tradestrategy.getTradingday().getOpen())) {          continue;        }        tradestrategy.setRiskAmount(new BigDecimal(riskAmount));        tradestrategy.setBarSize(barSize);        tradestrategy.setChartDays(chartDays);        tradestrategy.setTier(tierDefault);        tradestrategy.setTrade(true);        tradestrategy.setDirty(true);        tradestrategy.setStrategy(strategy);        tradestrategy.setPortfolio(portfolio);        if (!tradestrategy.getTradingday().existTradestrategy(tradestrategy))         tradestrategy.getTradingday().addTradestrategy(tradestrategy);        if (!this.containsTradingday(tradestrategy.getTradingday())) {          this.add(tradestrategy.getTradingday());        }        Collections.sort(tradestrategy.getTradingday().getTradestrategies(),Tradestrategy.DATE_ORDER_ASC);      }    }  } catch (  Exception ex) {    throw new PersistentModelException(1,200,ex.getMessage());  }}  }
class C{  public String login(int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  log.info("AD_User_ID=" + AD_User_ID);  m_AD_User_ID=AD_User_ID;  m_AD_Role_ID=AD_Role_ID;  return null;}  }
class C{  public boolean isSOTrx(){  return m_vo.IsSOTrx;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  @Override public void skip(InH3Amp in){  int ch=read();switch (ch) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:case 0x30:case 0x31:case 0x32:case 0x33:case 0x34:case 0x35:case 0x36:case 0x37:case 0x38:case 0x39:case 0x3a:case 0x3b:case 0x3c:case 0x3d:case 0x3e:case 0x3f:    return;case 0x40:case 0x41:case 0x42:case 0x43:case 0x44:case 0x45:case 0x46:case 0x47:case 0x48:case 0x49:case 0x4a:case 0x4b:case 0x4c:case 0x4d:case 0x4e:case 0x4f:case 0x50:case 0x51:case 0x52:case 0x53:case 0x54:case 0x55:case 0x56:case 0x57:case 0x58:case 0x59:case 0x5a:case 0x5b:case 0x5c:case 0x5d:case 0x5e:case 0x5f:case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:  readLong(0,0);return;case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:skipString(ch - 0x80);return;case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:skipString((int)readLong(ch - 0xa0,5));return;case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:skip(ch - 0xc0);return;case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:skip((int)readLong(ch - 0xc8,3));return;case 0xd0:readDefinition(in);skip(in);return;case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:{int id=ch - 0xd0;in.serializer(id).skip(this,in);return;}case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:{int id=(int)readLong(ch - 0xe0,4);in.serializer(id).skip(this,in);}case 0xf0:case 0xf1:case 0xf2:return;case 0xf3:skip(8);return;case 0xf4:skip(4);return;default :throw error(L.l("Unexpected opcode 0x{0} while skipping",Integer.toHexString(ch)));}}  }
class C{  public void readConfigFile(String configfile) throws FileNotFoundException, IOException {  final Properties props=new Properties();  props.load(new FileInputStream(configfile));  for (  String key : props.stringPropertyNames()) {    fileProps.put(key,props.getProperty(key));  }}  }
class C{  int parens_length(int i){  return (int)(parens[i] >>> 32);}  }
class C{  public ExceptionWithContext(String message,Object... formatArgs){  this(null,message,formatArgs);}  }
class C{  public FilteredExperienceDelayHandler(final Scenario scenario,final int noOfTimeBins){  this(scenario,noOfTimeBins,null,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups.");}  }
class C{  @Provides @Singleton SQLiteDatabase provideDatabase(){  return mDevOpenHelper.getWritableDatabase();}  }
class C{  public Bidi createLineBidi(int lineStart,int lineLimit){  AttributedString astr=new AttributedString("");  Bidi newBidi=new Bidi(astr.getIterator());  return bidiBase.setLine(this,bidiBase,newBidi,newBidi.bidiBase,lineStart,lineLimit);}  }
class C{  public ObjectNotFoundException(String message){  super(message);}  }
class C{  public void write(Writer writer) throws TransformerException {  write(writer,(Integer)null);}  }
class C{  @NotNull @ObjectiveCName("revokeAdminCommandWithGid:withUid:") public Command<Void> revokeAdmin(final int gid,final int uid){  return null;}  }
class C{  public void traceObjectFoundThroughKnown(){  say(this.toString(),": object found through known");}  }
class C{  public void fireSelectedDataChanged(String from){  System.err.println("fireSelectedDataChanged from " + from);  Object[][] sel=getSelectedFullData();  System.err.println("selected full data :");  System.err.println(Array.cat(_parametersNames));  if (sel.length > 0) {    System.err.println(Array.cat(getSelectedFullData()));  }  sel=getSelectedProjectedData();  System.err.println("selected projected data :");switch (_dimension) {case 0:    System.err.println("No axis selected");  break;case 1:System.err.println(Array.cat(new String[]{getSelectedXAxis()}));break;case 2:System.err.println(Array.cat(new String[]{getSelectedXAxis(),getSelectedYAxis()}));break;case 3:System.err.println(Array.cat(new String[]{getSelectedXAxis(),getSelectedYAxis(),getSelectedZAxis()}));break;}if (sel.length > 0) {System.err.println(Array.cat(sel));}System.err.println("Done.");}  }
class C{  private boolean existsAnnotatedConversion(Class<?> clazz){  return exists(Annotation.getConversionMethods(clazz));}  }
class C{  public Key(){  super();}  }
class C{  public void generateCode(){  if ((this.bits & ASTNode.HasBeenGenerated) != 0)   return;  this.bits|=ASTNode.HasBeenGenerated;  if (this.ignoreFurtherInvestigation) {    return;  }  try {    if (this.memberTypes != null) {      for (int i=0, max=this.memberTypes.length; i < max; i++) {        TypeDeclaration memberType=this.memberTypes[i];        memberType.generateCode(this.scope);      }    }    if (this.methods != null) {      for (int i=0, max=this.methods.length; i < max; i++) {        this.methods[i].generateCode(this.scope);      }    }    if (this.ignoreFurtherInvestigation) {      throw new AbortType(this.scope.referenceCompilationUnit().compilationResult,null);    }  } catch (  AbortType e) {    if (this.binding == null)     return;  }}  }
class C{  @Override public void autoSetInternal(){  initializeInternal(squadsize * squadn,LOC_INFANTRY);}  }
class C{  public void registerService(boolean allowTimeout,Service serviceImplementation){  addService(allowTimeout,serviceImplementation);}  }
class C{  public static double clock(){  return clock;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.202 -0400",hash_original_method="4EF9EE3D70949EF568D3A2DBCC1401FD",hash_generated_method="AAD85570F2499962FDE019677025A7FB") public LockableFileWriter(File file,boolean append) throws IOException {  this(file,append,null);}  }
class C{  public Matrix4x3d add(Matrix4x3dc other){  return add(other,this);}  }
class C{  Result run(DbInterface db) throws Exception {  try {switch (type) {case CONNECT:      db.connect();    result=new Result("connect");  break;case RESET:db.reset();result=new Result("reset");break;case DISCONNECT:db.disconnect();result=new Result("disconnect");break;case END:db.end();result=new Result("disconnect");break;case CREATE_TABLE:db.createTable(table);result=new Result("createTable");break;case DROP_TABLE:db.dropTable(table);result=new Result("dropTable");break;case CREATE_INDEX:db.createIndex(index);result=new Result("createIndex");break;case DROP_INDEX:db.dropIndex(index);result=new Result("dropIndex");break;case INSERT:result=db.insert(table,columns,values);break;case SELECT:result=select(db);break;case DELETE:result=db.delete(table,condition);break;case UPDATE:result=db.update(table,columns,values,condition);break;case AUTOCOMMIT_ON:db.setAutoCommit(true);result=new Result("setAutoCommit true");break;case AUTOCOMMIT_OFF:db.setAutoCommit(false);result=new Result("setAutoCommit false");break;case COMMIT:db.commit();result=new Result("commit");break;case ROLLBACK:db.rollback();result=new Result("rollback");break;default :throw new AssertionError("type=" + type);}} catch (SQLException e) {result=new Result("",e);}return result;}  }
class C{  private void removeSpuriousFiles(){  LLog.i("in removeSpuriousFiles");  List<File> files=new ArrayList<>();  File[] listOfFiles=systemCacheDir.listFiles();  if (listOfFiles != null) {    files.addAll(Arrays.asList(listOfFiles));  }  listOfFiles=downloadDataDir.listFiles();  if (listOfFiles != null) {    files.addAll(Arrays.asList(listOfFiles));  }  if (files.size() == 0) {    return;  }  Cursor cursor=contentResolver.query(downloadsUriProvider.getAllDownloadsUri(),new String[]{DownloadContract.Downloads.COLUMN_DATA},null,null,null);  try {    if (cursor != null) {      while (cursor.moveToNext()) {        String filename=cursor.getString(0);        if (!TextUtils.isEmpty(filename)) {          LLog.v("in removeSpuriousFiles, preserving file " + filename);          files.remove(new File(filename));        }      }    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  final int myUid=android.os.Process.myUid();  for (  File file : files) {    final String path=file.getAbsolutePath();    LLog.v("deleting spurious file " + path);    if (file.delete()) {      LLog.v("spurious file deleted");    }  }}  }
class C{  public PolygonRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter,Integer partitions){  this.setRawPolygonRDD(spark.textFile(InputLocation,partitions).map(new PolygonFormatMapper(Offset,Splitter)));}  }
class C{  @Override public VertexProperty readVertexProperty(final InputStream inputStream,final Function<Attachable<VertexProperty>,VertexProperty> vertexPropertyAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @Override public boolean hasMoreElements(){  return (!queue.isEmpty() && (queue.peek()).hasMoreElements());}  }
class C{  @Override public Map.Entry<Object,V> next(){  goNext();  return new MapEntry(lastPos,allowModify);}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  serializer.startTag(CtsXmlResultReporter.ns,TAG);  serializer.attribute(CtsXmlResultReporter.ns,"name",getName());  serializer.attribute(CtsXmlResultReporter.ns,"priority","");  for (  Test t : mChildTestMap.values()) {    t.serialize(serializer);  }  serializer.endTag(CtsXmlResultReporter.ns,TAG);}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source){  this.domainAxis.resizeRange(factor);}  }
class C{  @Override public AccessToken refreshAccessToken() throws IOException {  if (createScopedRequired()) {    throw new IOException("AppEngineCredentials requires createScoped call before use.");  }  try {    Object accessTokenResult=getAccessTokenResult.invoke(appIdentityService,scopes);    String accessToken=(String)getAccessToken.invoke(accessTokenResult);    Date expirationTime=(Date)getExpirationTime.invoke(accessTokenResult);    return new AccessToken(accessToken,expirationTime);  } catch (  Exception e) {    throw new IOException("Could not get the access token.",e);  }}  }
class C{  private void applyForegroundColor(Color color,Control control,List exclusions){  if (!exclusions.contains(control)) {    control.setForeground(color);  }  if (control instanceof Composite) {    Control[] children=((Composite)control).getChildren();    for (int i=0; i < children.length; i++) {      applyForegroundColor(color,children[i],exclusions);    }  }}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public static Sampler MIRRORED_REPEAT_LINEAR(RenderScript rs){  if (rs.mSampler_MIRRORED_REPEAT_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.MIRRORED_REPEAT);    b.setWrapT(Value.MIRRORED_REPEAT);    rs.mSampler_MIRRORED_REPEAT_LINEAR=b.create();  }  return rs.mSampler_MIRRORED_REPEAT_LINEAR;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.OBJECT_PROPERTY_TYPE__TYPE:    return type != null;}return super.eIsSet(featureID);}  }
class C{  private TypeScriptUIImageResource(){}  }
class C{  public boolean canUndo(){  return hexEditControl != null && hexEditControl.canUndo();}  }
class C{  public final Object createCIMPath(final Argument arg,final Map<String,Object> keyMap,int index){  String[] items=arg.getValue().toString().split(":");  CIMObjectPath path=CimObjectPathCreator.createInstance(items[1],items[0]);  return path;}  }
class C{  private static String toUid(Object obj){  return obj.getClass().getName() + "@" + obj.hashCode();}  }
class C{  public CMemorySectionBox(){  setFont(GuiHelper.MONOSPACED_FONT);}  }
class C{  public CModulesTable(){  super(new CModulesTableModel(),new CMemoryModulesTableHelp());  setDefaultRenderer(Object.class,m_renderer);}  }
class C{  @Override public void init(AuthenticationManagerBuilder auth) throws Exception {  auth.jdbcAuthentication().dataSource(dataSource).withUser("dave").password("secret").roles("USER");  auth.jdbcAuthentication().dataSource(dataSource).withUser("anil").password("password").roles("ADMIN");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE:    return definedType != null;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DECLARED_DYNAMIC:  return declaredDynamic != DECLARED_DYNAMIC_EDEFAULT;case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__ALIAS:return ALIAS_EDEFAULT == null ? alias != null : !ALIAS_EDEFAULT.equals(alias);}return super.eIsSet(featureID);}  }
class C{  private void doStepWalking(){  if ((hive.distanceToSphere(this,true) + this.getSphereRadius()) >= hive.getSphereRadius()) {    headTo(hive);    forward();  } else {    turnBy(Math.toRadians(45 - r.nextDouble() * 90),Math.toRadians(45 - r.nextDouble() * 90));    forward();  }}  }
class C{  public Object[] completeAndClearBuffer(Object[] lastChunk,int lastChunkEntries){  int totalSize=lastChunkEntries + _bufferedEntryCount;  Object[] result=new Object[totalSize];  _copyTo(result,totalSize,lastChunk,lastChunkEntries);  return result;}  }
class C{  public boolean clear(final NaviNode node){  final IZyNodeRealizer realizer=node.getRealizer();  boolean update=false;  for (  final ZyLineContent line : realizer.getNodeContent()) {    update|=line.clearHighlighting(1);  }  m_lastHoveredLine=null;  return update;}  }
class C{  private void loadConfig(Context ctx) throws Exception {  SocialAuthConfig config=new SocialAuthConfig();  Resources resources=ctx.getResources();  AssetManager assetManager=resources.getAssets();  InputStream inputStream=null;  boolean fileExist;  try {    inputStream=assetManager.open("oauth_consumer.properties");    fileExist=true;  } catch (  Exception e) {    fileExist=false;    Log.d("SocialAuthAdapter","oauth_consumer.properties not found");  }  if (fileExist) {    config.load(inputStream);    socialAuthManager.setSocialAuthConfig(config);  } else {    for (    String key : authMap.keySet()) {      config.addProviderConfig(key,authMap.get(key));    }    socialAuthManager.setSocialAuthConfig(config);  }}  }
class C{  protected List<String> enumConstantsOf(Dbms dbms,Table table,String columnName) throws SQLException {  final DbmsType dbmsType=dbmsTypeOf(dbmsHandlerComponent,dbms);  final DatabaseNamingConvention naming=dbmsType.getDatabaseNamingConvention();  final String sql=String.format("show columns from %s where field=%s;",naming.fullNameOf(table),naming.quoteField(columnName));  try (final Connection conn=getConnection(dbms);final PreparedStatement ps=conn.prepareStatement(sql);final ResultSet rs=ps.executeQuery()){    if (rs.next()) {      final String fullResult=rs.getString(2);      if (fullResult.startsWith("enum('") && fullResult.endsWith("')")) {        final String middle=fullResult.substring(5,fullResult.length() - 1);        return Stream.of(middle.split(",")).map(null).filter(null).collect(toList());      } else {        throw new SpeedmentException("Unexpected response (" + fullResult + ").");      }    } else {      throw new SpeedmentException("Expected an result.");    }  } }  }
class C{  public static Map<String,String> allNamespaces(SOAPElement ele){  Map<String,String> nsList=new TreeMap<String,String>();  log.trace("Starting Namespace Lookup in " + ele.getNodeName());  allNamespaces(ele,nsList);  log.trace("Namespace Lookup done: " + nsList);  return nsList;}  }
class C{  public MatrixSizeException(){}  }
class C{  public void packagePrivateMethod(){}  }
class C{  public static void tagNode(final JFrame parent,final NaviNode node,final CTag tag){  try {    node.getRawNode().tagNode(tag);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00131: " + "Could not tag node";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The selected node could not be tagged with the tag '%s'.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The node remains untagged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public String computeDotty(FlowNetwork<?> fn,boolean includeCut){  DoubleLinkedList<EdgeInfo> mincut=null;  if (includeCut) {    mincut=fn.getMinCut();  }  dd.rank("LR");  assignVertices(fn);  dd.markStart(get(fn.sourceIndex));  dd.markGoal(get(fn.sinkIndex));  for (int i=0; i < fn.numVertices; i++) {    for (int j=0; j < fn.numVertices; j++) {      EdgeInfo ei=fn.edge(i,j);      if (ei != null) {        String label="\"" + ei.getFlow() + "/"+ ei.capacity;        if (ei.cost > 0) {          label+="@" + ei.cost;        }        label+="\"";        dd.visitEdge(get(i),get(j),label);      }      if (includeCut) {        if (mincut.contains(ei) != null) {          dd.markEdge(get(i),get(j));        }      }    }  }  return (dd.getInputString());}  }
class C{  public static void hideSoftKeyboard(Activity activity){  InputMethodManager inputMethodManager=(InputMethodManager)activity.getSystemService(Activity.INPUT_METHOD_SERVICE);  if (activity.getCurrentFocus() != null) {    inputMethodManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  public int size(){  return selectors.size();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.SPLITTER__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.SPLITTER__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testSetF17(){  boolean f17=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF17(f17);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  @Override public void clear(){  for (int i=0; i < segments.length; ++i)   segments[i].clear();}  }
class C{  public static void assertBalanceCreditNotification(final Notification notification,final Account expectedAccount,final Amount expectedAmount){  final BalanceAdjustmentNotification n=(BalanceAdjustmentNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.BalanceCredit));  Assert.assertThat(n.getAccount(),IsEqual.equalTo(expectedAccount));  Assert.assertThat(n.getAmount(),IsEqual.equalTo(expectedAmount));}  }
class C{  private void visualizeTree(String code,int numTransfers){  RouteTree routeTree=new RouteTree(network,code,numTransfers,finishedTrips,stops);  Window window=new Window("Bus Stop: " + code + " ("+ numTransfers+ " transfers"+ ")",routeTree);  window.setVisible(true);}  }
class C{  private void createUserAndLicense(String userName,final long subscriptionCreationTime,final Date creationDate) throws Exception {  List<RoleDefinition> roleDefinitionLists=technicalProduct.getRoleDefinitions();  PlatformUser user=new PlatformUser();  user.setUserId(userName);  user.setOrganization(supplierAndProvider);  user.setEmail("user_1@user_1.com");  user.setStatus(UserAccountStatus.ACTIVE);  user.setLocale("en");  mgr.persist(user);  user=mgr.find(user);  UsageLicense license=new UsageLicense();  license.setAssignmentDate(subscriptionCreationTime);  license.setSubscription(subscription);  license.setUser(user);  license.setRoleDefinition(roleDefinitionLists.get(0));  updateHistoryModDate(license,creationDate);  mgr.flush();  mgr.persist(license);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  private boolean isSymmetricRec(TreeNode root){  if (root == null)   return true;  return helper(root.left,root.right);}  }
class C{  public static Query cspq(Term prefix){  PrefixQuery query=new PrefixQuery(prefix);  query.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  return query;}  }
class C{  public static boolean isVplexVolume(BlockObject blockObject,DbClient dbClient){  UnManagedVolume volume=getUnManagedVolumeForBlockObject(blockObject,dbClient);  if (null == volume) {    String message="could not locate an UnManagedVolume for BlockObject " + blockObject.getLabel() + ". This means that the volume was marked ingested before all its replicas were ingested.";    _logger.error(message);    throw IngestionException.exceptions.generalException(message);  }  return isVplexVolume(volume);}  }
class C{  public void registerAll(Model model,Object source){  registerFunctions(model,source);  registerTemplates(model);}  }
class C{  public boolean is_action(){  return true;}  }
class C{  public E2LSH(List<V> vecs,double radius,double eps,int w,int k,double delta,DistanceMetric dm){  this(vecs,radius,eps,w,k,delta,dm,dm.getAccelerationCache(vecs));}  }
class C{  public void killRPEntity(final RPEntity entity,final Entity killer){  entityToKill.add(new Pair<RPEntity,Entity>(entity,killer));}  }
class C{  public static ComponentUI createUI(final JComponent x){  return new AquaOptionPaneUI();}  }
class C{  static boolean verifyZipFile(File file){  try {    ZipFile zipFile=new ZipFile(file);    try {      zipFile.close();      return true;    } catch (    IOException e) {      Log.w(TAG,"Failed to close zip file: " + file.getAbsolutePath());    }  } catch (  ZipException ex) {    Log.w(TAG,"File " + file.getAbsolutePath() + " is not a valid zip file.",ex);  }catch (  IOException ex) {    Log.w(TAG,"Got an IOException trying to open zip file: " + file.getAbsolutePath(),ex);  }  return false;}  }
class C{  final void printTotalMicro(){  printMicro(totalCount);}  }
class C{  public static <T extends Annotation>boolean hasAnnotation(Class<?> cls,Class<T> annCls){  return getAnnotation(cls,annCls) != null;}  }
class C{  public DSASigner(){  this.kCalculator=new RandomDSAKCalculator();}  }
class C{  @Deprecated public RegionFactory(Properties distributedSystemProperties,String regionAttributesId) throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create(),regionAttributesId);}  }
class C{  public void write(char text[],int offset,int length){  if ((offset < 0) || (offset > text.length) || (length < 0)|| ((offset + length) > text.length)|| ((offset + length) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (length == 0) {    return;  }  buffer.append(text,offset,length);}  }
class C{  @Override public void perform(IR ir) throws OptimizingCompilerException {  for (  VariableMapElement elm : ir.MIRInfo.osrVarMap.list) {    for (    MethodVariables mvar : elm.mvars) {      for (      LocalRegPair tuple : mvar.tupleList) {        Operand op=tuple.operand;        if (op.isRegister()) {          Register sym_reg=((RegisterOperand)op).getRegister();          setRealPosition(ir,tuple,sym_reg);          if (VM.BuildFor32Addr && (tuple.typeCode == LongTypeCode)) {            LocalRegPair other=tuple._otherHalf;            Operand other_op=other.operand;            if (VM.VerifyAssertions)             VM._assert(other_op.isRegister());            Register other_reg=((RegisterOperand)other_op).getRegister();            setRealPosition(ir,other,other_reg);          }        } else         if (op.isIntConstant()) {          setTupleValue(tuple,ICONST,((IntConstantOperand)op).value);          if (VM.BuildFor32Addr && (tuple.typeCode == LongTypeCode)) {            LocalRegPair other=tuple._otherHalf;            Operand other_op=other.operand;            if (VM.VerifyAssertions)             VM._assert(other_op.isIntConstant());            setTupleValue(other,ICONST,((IntConstantOperand)other_op).value);          }        } else         if (op.isAddressConstant()) {          setTupleValue(tuple,ACONST,((AddressConstantOperand)op).value.toWord());        } else         if (VM.BuildFor64Addr && op.isLongConstant()) {          setTupleValue(tuple,LCONST,Word.fromLong(((LongConstantOperand)op).value));        } else {          throw new OptimizingCompilerException("LinearScan","Unexpected operand type at ",op.toString());        }      }    }  }}  }
class C{  public void killContainer(String container) throws IOException {  killContainer(container,9);}  }
class C{  public void mkrgn(String command) throws Exception {  try {    String name=command;    AttributesFactory fac=new AttributesFactory(this.currRegion.getAttributes());    Region nr=this.currRegion.createSubregion(name,fac.create());    regionDefaultAttrMap.put(nr.getFullPath(),fac.create());  } catch (  Exception e) {    throw new Exception(" failed in mkrgn " + command);  }}  }
class C{  public static int numChars(Font font){  int numChars=0;  CMap cmap=FontUtils.getUCSCMap(font);  for (  int charId : cmap) {    if (cmap.glyphId(charId) != CMapTable.NOTDEF) {      numChars++;    }  }  return numChars;}  }
class C{  public static Map<String,String> readStringValues(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readStringValues(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    return readStringValues(userRoot,hkey,key);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  public int compareLocationValues(int componentIndex1,int segmentIndex1,double segmentFraction1){  if (componentIndex < componentIndex1)   return -1;  if (componentIndex > componentIndex1)   return 1;  if (segmentIndex < segmentIndex1)   return -1;  if (segmentIndex > segmentIndex1)   return 1;  if (segmentFraction < segmentFraction1)   return -1;  if (segmentFraction > segmentFraction1)   return 1;  return 0;}  }
class C{  private static void registerRecipeClasses(){  RecipeSorter.register("testmod3:shapelesscutting",ShapelessCuttingRecipe.class,SHAPELESS,"after:minecraft:shapeless");  RecipeSorter.register("testmod3:shapedarmourupgrade",ShapedArmourUpgradeRecipe.class,SHAPED,"after:forge:shapedore before:minecraft:shapeless");  RecipeSorter.register("testmod3:shapelessnbt",ShapelessNBTRecipe.class,SHAPELESS,"after:forge:shapelessore");}  }
class C{  public static String md5(final String text){  if (text == null) {    throw new IllegalArgumentException("String was null");  } else   if (text.length() == 0) {    throw new IllegalArgumentException("String was 0 length");  }  try {    return md5(new ByteArrayInputStream(text.getBytes()));  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public TriangleMesh pointTowards(ReadonlyVec3D dir,ReadonlyVec3D forward){  return transform(Quaternion.getAlignmentQuat(dir,forward).toMatrix4x4(matrix),true);}  }
class C{  public static Object moveObject(Address toAddress,Object fromObj,int numBytes,RVMArray type){  return JavaHeader.moveObject(toAddress,fromObj,numBytes,type);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  new SettingsDialog().setVisible(true);}  }
class C{  public Drawer build(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  mMaterialize=new MaterializeBuilder().withActivity(mActivity).withRootView(mRootView).withFullscreen(mFullscreen).withSystemUIHidden(mSystemUIHidden).withTranslucentStatusBar(mTranslucentStatusBar).withTranslucentStatusBarProgrammatically(mTranslucentStatusBarProgrammatically).withTranslucentNavigationBar(mTranslucentNavigationBar).withTranslucentNavigationBarProgrammatically(mTranslucentNavigationBarProgrammatically).withContainer(mDrawerLayout).withStatusBarColor(mStatusBarColor).withStatusBarColorRes(mStatusBarColorRes).build();  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  private CGlobalInstructionLineCommentSynchronizer(){}  }
class C{  public static void main(String[] args){  try {    readArgs(args);    setLookAndFeel();    app=new JTSTestBuilder();    app.initFrame();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void addCertificates(Store certStore) throws CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));}  }
class C{  protected void sequence_CastingFunction_Function(ISerializationContext context,Function semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static void reOrganizeType(QueryColumnImpl column){  if ((column.type == Types.OTHER) && !column.typeChecked) {    column.typeChecked=true;    if (column.size() > 0) {      checkOther(column,column.data[0]);      for (int i=1; i < column.size(); i++) {switch (column.type) {case Types.NULL:          checkOther(column,column.data[i]);        break;case Types.TIMESTAMP:      checkDate(column,column.data[i]);    break;case Types.BOOLEAN:  checkBoolean(column,column.data[i]);break;case Types.DOUBLE:checkDouble(column,column.data[i]);break;case Types.VARCHAR:checkBasic(column,column.data[i]);break;default :break;}}}}}  }
class C{  public synchronized void pan(double dx,double dy){  m_tmpPoint.setLocation(dx,dy);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  double panx=m_tmpPoint.getX();  double pany=m_tmpPoint.getY();  m_tmpPoint.setLocation(0,0);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  panx-=m_tmpPoint.getX();  pany-=m_tmpPoint.getY();  panAbs(panx,pany);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean removeKeyChainEventListener(KeyChainEventListener listener){  return keyChainGroup.removeEventListener(listener);}  }
class C{  public ToStringBuilder append(float[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public static void sync(File fullFile) throws IOException {  if (fullFile == null || !fullFile.exists())   throw new FileNotFoundException("File does not exist " + fullFile);  boolean success=false;  int retryCount=0;  IOException exc=null;  while (!success && retryCount < 5) {    retryCount++;    RandomAccessFile file=null;    try {      try {        file=new RandomAccessFile(fullFile,"rw");        file.getFD().sync();        success=true;      }  finally {        if (file != null)         file.close();      }    } catch (    IOException ioe) {      if (exc == null)       exc=ioe;      try {        Thread.sleep(5);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();      }    }  }  if (!success)   throw exc;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYAreaRenderer2 clone=(XYAreaRenderer2)super.clone();  clone.legendArea=ShapeUtilities.clone(this.legendArea);  return clone;}  }
class C{  public String locked(){  addActionError(getText("manage.home.resource.locked"));  return execute();}  }
class C{  private static byte[] transform(final InputStream body) throws IOException {  final ByteArrayOutputStream res=new ByteArrayOutputStream();  final JsonReader rdr=Json.createReader(body);  try {    final JsonObject obj=rdr.readObject();    final JsonWriter wrt=Json.createWriterFactory(Collections.singletonMap(JsonGenerator.PRETTY_PRINTING,true)).createWriter(res);    try {      wrt.writeObject(obj);    }  finally {      wrt.close();    }  } catch (  final JsonException ex) {    throw new IOException(ex);  } finally {    rdr.close();  }  return res.toByteArray();}  }
class C{  public static boolean isAllBlank(String... strings){  for (  String string : strings) {    if (isBlank(string) == false) {      return false;    }  }  return true;}  }
class C{  public InvalidKeyException(){  super();}  }
class C{  public boolean isIgmpEnabled(){  return igmpEnabled;}  }
class C{  public final TBPar positiveClosure(){  TBPar tps=new TBPar(this.size() * 2);  for (int i=0; i < this.size(); i++) {    tps.addElement(this.elementAt(i));  }  TBPar res=new TBPar(this.size() * 2);  while (tps.size() > 0) {    LiveExprNode ln=tps.exprAt(tps.size() - 1);    tps.removeLastElement();    if (ln instanceof LNNeg) {      tps.addElement(((LNNeg)ln).getBody());    } else     if (ln instanceof LNNext) {      res.addElement(ln);      tps.addElement(((LNNext)ln).getBody());    } else     if (ln instanceof LNEven) {      res.addElement(ln);      res.addElement(new LNNext(ln));      tps.addElement(((LNEven)ln).getBody());    } else     if (ln instanceof LNAll) {      res.addElement(ln);      res.addElement(new LNNext(ln));      tps.addElement(((LNAll)ln).getBody());    } else     if (ln instanceof LNConj) {      LNConj lnc=(LNConj)ln;      for (int i=0; i < lnc.getCount(); i++) {        tps.addElement(lnc.getBody(i));      }      res.addElement(ln);    } else     if (ln instanceof LNDisj) {      LNDisj lnd=(LNDisj)ln;      for (int i=0; i < lnd.getCount(); i++) {        tps.addElement(lnd.getBody(i));      }      res.addElement(ln);    } else     if (ln instanceof LNState) {      res.addElement(ln);    } else     if (ln instanceof LNBool) {      res.addElement(ln);    } else {      Assert.fail(EC.TLC_LIVE_ENCOUNTERED_ACTIONS);    }  }  return res;}  }
class C{  public final Double3D subtract(Double3D other){  return new Double3D(x - other.x,y - other.y,z - other.z);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public boolean isModuleStarted(final String folder){  return folderExtModHandlerMap.containsKey(folder);}  }
class C{  public Sound(String name,SoundPool soundPool,int handle){  mName=name;  mSoundPool=soundPool;  mHandle=handle;}  }
class C{  public boolean isShowLegendItem(){  return mShowLegendItem;}  }
class C{  @NonNull public static <T>Optional<T> fromNullable(@Nullable T value){  if (value != null) {    return new Optional<>(value);  } else {    return absent();  }}  }
class C{  private static String unformatNullString(final String string){  if (TextUtils.isEmpty(string)) {    return null;  }  return string;}  }
class C{  public boolean contains(long value){  return lastIndexOf(value) >= 0;}  }
class C{  private Base64(){}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int i=0;  for (i=0; i < len; i++) {    int ch=is.read();    if (ch < 0)     return i == 0 ? -1 : i;switch (ch) {case -1:      return i == 0 ? -1 : i;case 130:    cbuf[off + i]=',';  break;case 131:cbuf[off + i]='f';break;case 132:cbuf[off + i]='"';break;case 133:cbuf[off + i]=(char)8230;break;case 134:cbuf[off + i]='+';break;case 135:cbuf[off + i]='+';break;case 136:cbuf[off + i]='^';break;case 137:cbuf[off + i]=(char)8240;break;case 138:cbuf[off + i]='S';break;case 139:cbuf[off + i]='<';break;case 140:cbuf[off + i]='O';break;case 145:case 146:cbuf[off + i]='\'';break;case 147:case 148:cbuf[off + i]=(char)'"';break;case 149:cbuf[off + i]=(char)'*';break;case 150:case 151:cbuf[off + i]=(char)'-';break;case 152:cbuf[off + i]=(char)'~';break;case 153:cbuf[off + i]=(char)8482;break;case 154:cbuf[off + i]='s';break;case 155:cbuf[off + i]='>';break;case 156:cbuf[off + i]='o';break;case 376:cbuf[off + i]='Y';break;default :cbuf[off + i]=(char)ch;}}return i;}  }
class C{  public BasicBlock deepestCommonAncestor(BasicBlock a,BasicBlock b){  DominatorTreeNode n_a=dominatorInfoMap[a.getNumber()];  DominatorTreeNode n_b=dominatorInfoMap[b.getNumber()];  while (n_a != n_b) {    if (n_a.getDepth() > n_b.getDepth()) {      n_a=(DominatorTreeNode)n_a.getParent();    } else {      n_b=(DominatorTreeNode)n_b.getParent();    }  }  return n_a.getBlock();}  }
class C{  public ReadPrefReadWriteLockManager(){  super();}  }
class C{  public static final String stringEncodeFromMortonLong(long hashedVal,final int level){  hashedVal=BitUtil.flipFlop(hashedVal);  StringBuilder geoHash=new StringBuilder();  short precision=0;  final short msf=(XGeoUtils.BITS << 1) - 5;  long mask=31L << msf;  do {    geoHash.append(BASE_32[(int)((mask & hashedVal) >>> (msf - (precision * 5)))]);    mask>>>=5;  } while (++precision < level);  return geoHash.toString();}  }
class C{  private PlatformListenable processClosures(long taskPtr,BinaryRawReaderEx reader,boolean broadcast,boolean affinity){  PlatformAbstractTask task;  int size=reader.readInt();  if (size == 1) {    if (broadcast) {      PlatformBroadcastingSingleClosureTask task0=new PlatformBroadcastingSingleClosureTask(platformCtx,taskPtr);      task0.job(nextClosureJob(task0,reader));      task=task0;    } else     if (affinity) {      PlatformBalancingSingleClosureAffinityTask task0=new PlatformBalancingSingleClosureAffinityTask(platformCtx,taskPtr);      task0.job(nextClosureJob(task0,reader));      task0.affinity(reader.readString(),reader.readObjectDetached(),platformCtx.kernalContext());      task=task0;    } else {      PlatformBalancingSingleClosureTask task0=new PlatformBalancingSingleClosureTask(platformCtx,taskPtr);      task0.job(nextClosureJob(task0,reader));      task=task0;    }  } else {    if (broadcast)     task=new PlatformBroadcastingMultiClosureTask(platformCtx,taskPtr); else     task=new PlatformBalancingMultiClosureTask(platformCtx,taskPtr);    Collection<PlatformJob> jobs=new ArrayList<>(size);    for (int i=0; i < size; i++)     jobs.add(nextClosureJob(task,reader));    if (broadcast)     ((PlatformBroadcastingMultiClosureTask)task).jobs(jobs); else     ((PlatformBalancingMultiClosureTask)task).jobs(jobs);  }  platformCtx.kernalContext().task().setThreadContext(TC_SUBGRID,computeForPlatform.clusterGroup().nodes());  return executeNative0(task);}  }
class C{  public static ClientBuilder builder(){  return new FeignJaxRsClientBuilder(ClientConfig.builder().build());}  }
class C{  public final void appendElements(Collection<? extends E> toAppend){  addAll(toAppend);}  }
class C{  private void performHeaderSwap(long headerId){  if (headerId == RecyclerView.NO_ID) {    clearStickyHeader();    return;  }  int headerPosition=getHeaderPosition(adapter,headerId);  if (headerPosition == RecyclerView.NO_POSITION) {    return;  }  updateHeader(headerId,headerPosition);}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.date().print(this);}  }
class C{  private static long nanosFromCalendar(Calendar cal){  int h=cal.get(Calendar.HOUR_OF_DAY);  int m=cal.get(Calendar.MINUTE);  int s=cal.get(Calendar.SECOND);  int millis=cal.get(Calendar.MILLISECOND);  return ((((((h * 60L) + m) * 60) + s) * 1000) + millis) * 1000000;}  }
class C{  public static int px2sp(Context context,float pxValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(pxValue / fontScale + 0.5f);}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public void remove(Type producedType){  Map<TypeDeclaration,Type> cache=superTypes.get(producedType);  if (cache != null) {    cache.clear();    superTypes.remove(producedType);  }  int hashCode=producedType.hashCode();  for (  Map<TypeDeclaration,Type> cacheValues : superTypes.values()) {    Iterator<Entry<TypeDeclaration,Type>> iterator=cacheValues.entrySet().iterator();    while (iterator.hasNext()) {      Entry<TypeDeclaration,Type> entry=iterator.next();      if (entry.getValue() != NULL_VALUE && !entry.getValue().isUnknown() && entry.getValue().hashCode() == hashCode && entry.getValue().equals(producedType))       iterator.remove();    }  }}  }
class C{  public Builder withSessionTimeout(Duration sessionTimeout){  Assert.argNot(sessionTimeout.isNegative() || sessionTimeout.isZero(),"sessionTimeout must be positive");  Assert.argNot(sessionTimeout.toMillis() <= electionTimeout.toMillis(),"sessionTimeout must be greater than electionTimeout");  this.sessionTimeout=Assert.notNull(sessionTimeout,"sessionTimeout");  return this;}  }
class C{  public void registerListener(final TeleportListener listener){  if (listener == null) {    logger.error("Trying to notify null-object",new Throwable());    return;  }  listeners.add(listener);}  }
class C{  public Stat addUsageInfo(DDStatsCapacityInfo statsCapInfo,Map<String,Object> keyMap,String fsNativeGuid,DataDomainClient ddClient){  Stat stat=zeroRecordGenerator.injectattr(keyMap,fsNativeGuid,null);  if (stat != null) {    try {      DbClient dbClient=(DbClient)keyMap.get(Constants.dbClient);      long measurementTimePeriodInSec=0;      DDStatsIntervalQuery granularity=(DDStatsIntervalQuery)keyMap.get(Constants._Granularity);switch (granularity) {case hour:        measurementTimePeriodInSec=HOUR_IN_SECONDS;      break;case day:    measurementTimePeriodInSec=DAY_IN_SECONDS;  break;case week:measurementTimePeriodInSec=WEEK_IN_SECONDS;break;}stat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));stat.setTimeInMillis(statsCapInfo.getCollectionEpoch() * 1000);long used=statsCapInfo.getLogicalCapacity().getUsed();long total=statsCapInfo.getLogicalCapacity().getTotal();long preCompressionBytesWritten=0;long postCompressionBytesWritten=0;float compressionFactor=1;if ((statsCapInfo != null) && (statsCapInfo.getDataWritten() != null)) {preCompressionBytesWritten=statsCapInfo.getDataWritten().getPreCompWritten();postCompressionBytesWritten=statsCapInfo.getDataWritten().getPostCompWritten();compressionFactor=statsCapInfo.getDataWritten().getCompressionFactor();}keyMap.put(Constants._FilePreCompressionBytesWritten,preCompressionBytesWritten);keyMap.put(Constants._FilePostCompressionBytesWritten,postCompressionBytesWritten);keyMap.put(Constants._CompressionRatio,compressionFactor);stat.setAllocatedCapacity(used);stat.setBandwidthIn(preCompressionBytesWritten);statsColumnInjector.injectColumns(stat,dbClient);_log.debug(String.format("Stat: %s: %s: provisioned(): used(%s)",stat.getResourceId(),fsNativeGuid,used));} catch (DatabaseException ex) {_log.error("Query to db failed for FileShare id {}, skipping recording usage stat.",stat.getResourceId(),ex);}}return stat;}  }
class C{  private void addChannel(Channel channel){  mTableFilterHeader.setAdaptiveChoices(false);  int index=mChannelModel.addChannel(channel);  mTableFilterHeader.setAdaptiveChoices(true);  if (index >= 0) {    int translatedIndex=mChannelTable.convertRowIndexToView(index);    mChannelTable.setRowSelectionInterval(translatedIndex,translatedIndex);    mChannelTable.scrollRectToVisible(new Rectangle(mChannelTable.getCellRect(translatedIndex,0,true)));  }}  }
class C{  public TypeExpressionsUiModule(AbstractUIPlugin plugin){  super(plugin);}  }
class C{  public boolean isTransacted(){  return transacted;}  }
class C{  public static String replaceOnce(String text,char repl,char with){  return replace(text,repl,with,1);}  }
class C{  @Override protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class<?> cl=null;  try {    cl=loadClassImpl(name,resolve);  } catch (  ClassNotFoundException e) {    throw new ClassNotFoundException(e.getMessage() + " (in " + this+ ")",e);  }catch (  NoClassDefFoundError e) {    log().finer(e.toString() + " (in " + this+ ")");    throw e;  }  if (cl != null)   return cl; else {    ClassNotFoundException exn=new ClassNotFoundException(name + " (in " + this+ ")");    throw exn;  }}  }
class C{  public boolean isSet(String name){  String[] value=super.getHeader(name);  return (value != null && value.length != 0);}  }
class C{  private void removeSiblings(TreePath path,TreePath[] paths){  if (path.getPathCount() == 1) {    for (int counter=paths.length - 1; counter >= 0; counter--) {      paths[counter]=null;    }    treeModel.setRoot(null);  } else {    TreePath parent=path.getParentPath();    MutableTreeNode parentNode=(MutableTreeNode)parent.getLastPathComponent();    ArrayList<TreePath> toRemove=new ArrayList<TreePath>();    for (int counter=paths.length - 1; counter >= 0; counter--) {      if (paths[counter] != null && paths[counter].getParentPath().equals(parent)) {        toRemove.add(paths[counter]);        paths[counter]=null;      }    }    int rCount=toRemove.size();    for (int counter=paths.length - 1; counter >= 0; counter--) {      if (paths[counter] != null) {        for (int rCounter=rCount - 1; rCounter >= 0; rCounter--) {          if ((toRemove.get(rCounter)).isDescendant(paths[counter])) {            paths[counter]=null;          }        }      }    }    if (rCount > 1) {      Collections.sort(toRemove,new PositionComparator());    }    int[] indices=new int[rCount];    Object[] removedNodes=new Object[rCount];    for (int counter=rCount - 1; counter >= 0; counter--) {      removedNodes[counter]=(toRemove.get(counter)).getLastPathComponent();      indices[counter]=treeModel.getIndexOfChild(parentNode,removedNodes[counter]);      parentNode.remove(indices[counter]);    }    treeModel.nodesWereRemoved(parentNode,indices,removedNodes);  }}  }
class C{  @Override public boolean acceptsURL(String url){  if (url != null) {    if (url.startsWith(Constants.START_URL)) {      return true;    }  }  return false;}  }
class C{  public Record(boolean record){  super();  addParameterToRequest("record",record);}  }
class C{  public E remove(int key){synchronized (this) {    Object[] arr=array;    if (arr.length <= key) {      return null;    }    E prev=(E)arr[key];    if (prev != null) {      arr[key]=null;      array=arr;      size--;    }    return prev;  }}  }
class C{  private List<Type> parseTypeList(List<Map<String,Object>> types,List<TypeParameter> typeParams){  List<Type> ts=new ArrayList<Type>(types.size());  for (  Map<String,Object> st : types) {    ts.add(getTypeFromJson(st,null,typeParams));  }  return ts;}  }
class C{  public int transcribe(IPoint[] hull,int offset,int num){  int idx=offset;  for (int i=0; i < num; i++) {    hull[idx++]=points.get(i);  }  return idx;}  }
class C{  public void dataRefreshAll(boolean fireStatusEvent,int rowToRetained){  log.info("");  m_inserting=false;  dataIgnore();  String retainedWhere=null;  if (rowToRetained >= 0) {    retainedWhere=getWhereClause(rowToRetained);  }  close(false);  if (retainedWhere != null) {    if (m_whereClause != null && m_whereClause.trim().length() > 0) {      m_whereClause="((" + m_whereClause + ") OR ("+ retainedWhere+ ")) ";    }    open(m_maxRows);  } else {    open(m_maxRows);  }  m_rowData=null;  m_changed=false;  m_rowChanged=-1;  m_inserting=false;  fireTableDataChanged();  if (fireStatusEvent)   fireDataStatusIEvent(DATA_REFRESH_MESSAGE,"");}  }
class C{  public static Operator toOperator(String token){  return (Operator)CODES.get(token);}  }
class C{  public AsyncApnsClient(InputStream certificate,String password,boolean production,int maxRequestsQueued,Semaphore semaphore,String defaultTopic) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {  this.defaultTopic=defaultTopic;  this.client=Utils.buildClient(certificate,password,production);  setMaxConnections(1);  client.setMaxRequestsQueuedPerDestination(maxRequestsQueued);  if (production) {    gateway=Constants.ENDPOINT_PRODUCTION;  } else {    gateway=Constants.ENDPOINT_SANDBOX;  }  this.semaphore=semaphore;}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  public void columns(String coldata[]){  column=coldata;  ncolumns=column.length;}  }
class C{  public boolean waitForInvocation(int timeoutMs){  return waitForInvocation(timeoutMs,200);}  }
class C{  public TGA.ImageTGA tgaInfo(){  return tgaInfo;}  }
class C{  private void copyIn(Object[] toCopyIn,int first,int n){  int limit=first + n;  if (limit > toCopyIn.length)   throw new IndexOutOfBoundsException();  Object[] newElements=copyOfRange(toCopyIn,first,limit,Object[].class);synchronized (this) {    setArray(newElements);  }}  }
class C{  public static boolean isExposeFilesystem(){  return exposeFilesystem;}  }
class C{  public static Method resolveMethod(Class<?> clazz,String name,Object[] args){  Method[] methods=Utilities.joinArrays(clazz.getMethods(),clazz.getDeclaredMethods(),Method.class);  int i;  for (i=0; i < methods.length; i++) {    Method m=methods[i];    if (m.getName().equals(name)) {      Class<?>[] classes=m.getParameterTypes();      if (args == null) {        if (classes.length == 0) {          return m;        }      } else {        boolean match=args.length == classes.length;        for (int j=0; match && j < args.length; j++) {          match=classes[j].isAssignableFrom(args[j].getClass()) || primitiveClasses.get(classes[j]) == args[j].getClass();        }        if (match) {          return m;        }      }    }  }  return null;}  }
class C{  @Override public double[][] rankedAttributes() throws Exception {  int i, j;  if (m_attributeList == null || m_attributeMerit == null) {    throw new Exception("Search must be performed before a ranked " + "attribute list can be obtained");  }  int[] ranked=Utils.sort(m_attributeMerit);  double[][] bestToWorst=new double[ranked.length][2];  for (i=ranked.length - 1, j=0; i >= 0; i--) {    bestToWorst[j++][0]=ranked[i];  }  for (i=0; i < bestToWorst.length; i++) {    int temp=((int)bestToWorst[i][0]);    bestToWorst[i][0]=m_attributeList[temp];    bestToWorst[i][1]=m_attributeMerit[temp];  }  if (m_numToSelect > bestToWorst.length) {    throw new Exception("More attributes requested than exist in the data");  }  if (m_numToSelect <= 0) {    if (m_threshold == -Double.MAX_VALUE) {      m_calculatedNumToSelect=bestToWorst.length;    } else {      determineNumToSelectFromThreshold(bestToWorst);    }  }  return bestToWorst;}  }
class C{  private int calculateCRC(ByteBuffer buf){  buf.get();  int c=0xFFFF;  for (int i=0; i < definition.payloadLength + HEADER_LENGTH - 1; i++) {    c=MAVLinkCRC.accumulateCRC(buf.get(),c);  }  c=MAVLinkCRC.accumulateCRC(definition.extraCRC,c);  return c;}  }
class C{  private PeriodType withFieldRemoved(int indicesIndex,String name){  int fieldIndex=iIndices[indicesIndex];  if (fieldIndex == -1) {    return this;  }  DurationFieldType[] types=new DurationFieldType[size() - 1];  for (int i=0; i < iTypes.length; i++) {    if (i < fieldIndex) {      types[i]=iTypes[i];    } else     if (i > fieldIndex) {      types[i - 1]=iTypes[i];    }  }  int[] indices=new int[8];  for (int i=0; i < indices.length; i++) {    if (i < indicesIndex) {      indices[i]=iIndices[i];    } else     if (i > indicesIndex) {      indices[i]=(iIndices[i] == -1 ? -1 : iIndices[i] - 1);    } else {      indices[i]=-1;    }  }  return new PeriodType(getName() + name,types,indices);}  }
class C{  public DataFormatMatcher findFormat(byte[] fullInputData) throws IOException {  return _findFormat(new InputAccessor.Std(fullInputData));}  }
class C{  @SuppressWarnings("ManualArrayToCollectionCopy") public void addSurrogateIds(Collection<IgniteUuid> col){  if (surrogateIds == null) {    surrogateIds=new IgniteUuid[ids.length];    for (int i=lastExistingIdx + 1; i < surrogateIds.length; i++)     surrogateIds[i]=IgniteUuid.randomUuid();  }  for (int i=lastExistingIdx + 1; i < surrogateIds.length; i++)   col.add(surrogateIds[i]);}  }
class C{  public void insertTextAtIndex(int index,String s){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.insertTextAtIndex(index,s);  }}  }
class C{  public boolean equals(Object v){  try {    ReadonlyVec2D vv=(ReadonlyVec2D)v;    return (x == vv.x() && y == vv.y());  } catch (  NullPointerException e) {    return false;  }catch (  ClassCastException e) {    return false;  }}  }
class C{  public boolean displayToken(String newToken){  return false;}  }
class C{  private int indexOf(String containerPath,String relativePath){  int length=this.containerPaths.length, index=(containerPath.hashCode() & 0x7FFFFFFF) % length;  String currentContainerPath;  while ((currentContainerPath=this.containerPaths[index]) != null) {    if (currentContainerPath.equals(containerPath)) {      String currentRelativePath=this.relativePaths[index];      if (encloses(currentRelativePath,relativePath,index))       return index;    }    if (++index == length) {      index=0;    }  }  return -1;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public Collection<T> values(){  HashSet<T> set=new HashSet<T>();  set.addAll(container.values());  set.addAll(cache.values());  return set;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public boolean isEmpty(){  return window.isEmpty();}  }
class C{  public OperaHouse(){  super();}  }
class C{  public String toString(){  return "UnsupportedDurationField[" + getName() + ']';}  }
class C{  @Override protected void onPause(){  super.onPause();  LocalBroadcastManager.getInstance(this).unregisterReceiver(mUploadResultReceiver);}  }
class C{  public static void print(String[][] m){  System.out.println("\n-------------");  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      System.out.print("|" + m[i][j]);    }    System.out.println("|\n-------------");  }}  }
class C{  public MyFirstMockAccessibilityService(){  sInstance=this;}  }
class C{  public CFilterModulesAction(final JTextField filterField){  super("Filter by module count");  m_filterField=filterField;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ARGUMENT__SPREAD:    return spread != SPREAD_EDEFAULT;case N4JSPackage.ARGUMENT__EXPRESSION:  return expression != null;}return super.eIsSet(featureID);}  }
class C{  private Iterable<TypeDescriptor> descriptors(){  return descs.values();}  }
class C{  @SuppressWarnings("StringEquality") public static void writeProperties(DataOutput out,@Nullable Map<String,String> props) throws IOException {  if (props != null) {    out.writeInt(props.size());    for (    Map.Entry<String,String> entry : props.entrySet()) {      String key=entry.getKey();      if (key == PROP_PERMISSION)       out.writeByte(PROP_PERMISSION_IDX); else       if (key == PROP_PREFER_LOCAL_WRITES)       out.writeByte(PROP_PREFER_LOCAL_WRITES_IDX); else       if (key == PROP_USER_NAME)       out.writeByte(PROP_USER_NAME_IDX); else       if (key == PROP_GROUP_NAME)       out.writeByte(PROP_GROUP_NAME_IDX); else {        out.writeByte(PROP_IDX);        U.writeString(out,key);      }      U.writeString(out,entry.getValue());    }  } else   out.writeInt(-1);}  }
class C{  protected void fillFaceToolBar(JToolBar faceTB,ButtonGroup bg){  for (  EditToolLoader loader : loaderList) {    String[] classnames=loader.getEditableClasses();    for (int i=0; i < classnames.length; i++) {      ImageIcon icon=loader.getIcon(classnames[i]);      JToggleButton btn=new JToggleButton(icon,false);      btn.setToolTipText(loader.getPrettyName(classnames[i]));      btn.setFocusable(false);      btn.setActionCommand(classnames[i]);      btn.addActionListener(this);      bg.add(btn);      faceTB.add(btn);    }  }}  }
class C{  public SpkacSubject(String cn,String ou,String o,String l,String st,String c){  this.cn=cn;  this.ou=ou;  this.o=o;  this.l=l;  this.st=st;  this.c=c;}  }
class C{  public boolean isMemAnti(){  return (flags & MEM_ANTI) != 0;}  }
class C{  public static ConstantNode forPrimitive(Stamp stamp,Constant constant){  if (stamp instanceof IntegerStamp) {    PrimitiveConstant primitive=(PrimitiveConstant)constant;    assert primitive.getJavaKind().isNumericInteger() && stamp.getStackKind() == primitive.getJavaKind().getStackKind();    IntegerStamp istamp=(IntegerStamp)stamp;    return forIntegerBits(istamp.getBits(),primitive);  } else   if (stamp instanceof FloatStamp) {    PrimitiveConstant primitive=(PrimitiveConstant)constant;    assert primitive.getJavaKind().isNumericFloat() && stamp.getStackKind() == primitive.getJavaKind();    return forConstant(primitive,null);  } else {    assert !(stamp instanceof AbstractObjectStamp);    return new ConstantNode(constant,stamp.constant(constant,null));  }}  }
class C{  public void queryForCustomDayAudits(DateTime dateTime,String filename){  System.out.println("\n\n -> Querying Audits");  ExecutorService executor=Executors.newFixedThreadPool(100);  AuditQueryResult result=new AuditQueryResult(filename);  try {    _dbClient.queryTimeSeries(AuditLogTimeSeries.class,dateTime,TimeSeriesMetadata.TimeBucket.HOUR,result,executor);    System.out.println(" --- Job Exceution for Querying Audits completed ---\n\n");    return;  } catch (  DatabaseException e) {    System.err.println("Exception Query " + e);    log.error("Exception Query ",e);  }}  }
class C{  private static void multipleSenders(Context context,HashMap<Long,ArrayList<MessageItem>> conversations,Set<Long> oldThreads,NotificationCompat.Builder builder){  Set<Long> threadIds=conversations.keySet();  for (  long threadId : threadIds) {    if (!oldThreads.contains(threadId)) {      ConversationPrefsHelper conversationPrefs=new ConversationPrefsHelper(context,threadId);      Integer privateNotification=conversationPrefs.getPrivateNotificationsSetting();      if (conversations.get(threadId).size() == 1) {        singleMessage(context,conversations.get(threadId),threadId,copyBuilder(builder),conversationPrefs,privateNotification);      } else {        singleSender(context,conversations.get(threadId),threadId,copyBuilder(builder),conversationPrefs,privateNotification);      }    }  }}  }
class C{  private void processTags(String id){  int is=id.indexOf("<description><![CDATA[");  int ie=id.indexOf("]]></description>");  description=id.substring(is + "<description><![CDATA[".length(),ie);  int index=id.indexOf("]]></return>");  int endCDATABefore;  int begin;  if (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<return><![CDATA[",endCDATABefore) + "<return><![CDATA[".length();    returnTag=id.substring(begin,index);  }  index=id.indexOf("]]></return>",index + 12);  if (index > 0)   ThreadLocalToolkit.getLogger().logError("More than one @return found in " + this.fullname + ".");  index=id.indexOf("]]></param>");  if (index >= 0)   paramTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<param><![CDATA[",endCDATABefore);    paramTags.add(id.substring(begin + "<param><![CDATA[".length(),index));    index=id.indexOf("]]></param>",index + "]]></param>".length());  }  index=id.indexOf("]]></inheritDoc>");  hasInheritTag=index > 0 ? true : false;  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<inheritDoc><![CDATA[",endCDATABefore) + "<inheritDoc><![CDATA[".length();    inheritDocTagLocation=id.substring(begin,index).trim();  }  index=id.indexOf("]]></inheritDoc>",index + 16);  if (index > 0)   ThreadLocalToolkit.getLogger().logError("More than one @inheritDoc found in " + this.fullname + ".");  index=id.indexOf("]]></author>");  if (index >= 0)   authorTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<author><![CDATA[",endCDATABefore);    authorTags.add(id.substring(begin + "<author><![CDATA[".length(),index));    index=id.indexOf("]]></author>",index + "]]></author>".length());  }  index=id.indexOf("]]></copy>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<copy><![CDATA[",endCDATABefore) + "<copy><![CDATA[".length();    copyTag=id.substring(begin,index);  }  index=id.indexOf("]]></default>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<default><![CDATA[",endCDATABefore) + "<default><![CDATA[".length();    defaultTag=id.substring(begin,index);  }  index=id.indexOf("]]></event>");  if (index >= 0)   eventTags=new ArrayList<String>();  while (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<event><![CDATA[",endCDATABefore);    eventTags.add(id.substring(begin + "<event><![CDATA[".length(),index));    index=id.indexOf("]]></event>",index + "]]></event>".length());  }  index=id.indexOf("]]></eventType>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<eventType><![CDATA[",endCDATABefore) + "<eventType><![CDATA[".length();    eventTypeTag=id.substring(begin,index);  }  index=id.indexOf("]]></example>");  if (index >= 0)   exampleTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<example><![CDATA[",endCDATABefore);    exampleTags.add(id.substring(begin + "<example><![CDATA[".length(),index));    index=id.indexOf("]]></example>",index + "]]></example>".length());  }  index=id.indexOf("]]></helpid>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<helpid><![CDATA[",endCDATABefore) + "<helpid><![CDATA[".length();    helpidTag=id.substring(begin,index);  }  index=id.indexOf("]]></includeExample>");  if (index >= 0)   includeExampleTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<includeExample><![CDATA[",endCDATABefore);    includeExampleTags.add(id.substring(begin + "<includeExample><![CDATA[".length(),index));    index=id.indexOf("]]></includeExample>",index + "]]></includeExample>".length());  }  index=id.indexOf("]]></internal>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<internal><![CDATA[",endCDATABefore) + "<internal><![CDATA[".length();    internalTag=id.substring(begin,index);  }  index=id.indexOf("]]></langversion>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<langversion><![CDATA[",endCDATABefore) + "<langversion><![CDATA[".length();    langversionTag=id.substring(begin,index);  }  index=id.indexOf("]]></playerversion>");  if (index >= 0)   playerversionTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<playerversion><![CDATA[",endCDATABefore);    playerversionTags.add(id.substring(begin + "<playerversion><![CDATA[".length(),index));    index=id.indexOf("]]></playerversion>",index + "]]></playerversion>".length());  }  hasPrivateTag=id.indexOf("]]></private>") > 0 ? true : false;  index=id.indexOf("]]></productversion>");  if (index >= 0)   productversionTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<productversion><![CDATA[",endCDATABefore);    productversionTags.add(id.substring(begin + "<productversion><![CDATA[".length(),index));    index=id.indexOf("]]></productversion>",index + "]]></productversion>".length());  }  index=id.indexOf("]]></since>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<since><![CDATA[",endCDATABefore) + "<since><![CDATA[".length();    sinceTag=id.substring(begin,index);  }  hasReviewTag=id.indexOf("]]></review>") > 0 ? true : false;  index=id.indexOf("]]></see>");  if (index >= 0)   seeTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<see><![CDATA[",endCDATABefore);    String see=id.substring(begin + "<see><![CDATA[".length(),index);    if (see.indexOf('<') >= 0)     ThreadLocalToolkit.getLogger().logError("Do not use html in @see. Offending text: " + see + " Located at "+ this.fullname+ ".");    seeTags.add(see);    index=id.indexOf("]]></see>",index + "]]></see>".length());  }  index=id.indexOf("]]></throws>");  if (index >= 0)   throwsTags=new ArrayList<String>();  while (index >= 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<throws><![CDATA[",endCDATABefore);    throwsTags.add(id.substring(begin + "<throws><![CDATA[".length(),index));    index=id.indexOf("]]></throws>",index + "]]></throws>".length());  }  index=id.indexOf("]]></tiptext>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<tiptext><![CDATA[",endCDATABefore) + "<tiptext><![CDATA[".length();    tiptextTag=id.substring(begin,index);  }  index=id.indexOf("]]></toolversion>");  if (index > 0) {    endCDATABefore=id.substring(0,index).lastIndexOf("]]>");    begin=id.indexOf("<toolversion><![CDATA[",endCDATABefore) + "<toolversion><![CDATA[".length();    toolversionTag=id.substring(begin,index);  }  index=id.indexOf("]]></");  while (index >= 0) {    int beginTag=index + "]]></".length();    int endTag=id.indexOf(">",beginTag);    String tagName=(id.substring(beginTag,endTag)).intern();    if (!matchesAnyTag(tagName)) {      if (tagName.indexOf("!") != -1) {        ThreadLocalToolkit.getLogger().logError("Unexpected symbol ! (" + tagName + ") found in "+ this.fullname+ ".");      }      if (tagName.indexOf(":") != -1) {        ThreadLocalToolkit.getLogger().logError("Unexpected symbol : (" + tagName + ") found in "+ this.fullname+ ".");      }      if (customTags == null)       customTags=new LinkedHashMap<String,String>();      endCDATABefore=id.substring(0,index).lastIndexOf("]]>");      String tag="<" + tagName + "><![CDATA[";      begin=id.indexOf(tag,endCDATABefore) + tag.length();      customTags.put(tagName,id.substring(begin,index));    }    index=id.indexOf("]]></",endTag + 1);  }}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  @Override public boolean removeFromWorld(){  NPCList.get().remove("Paul Sheriff");  zone.remove(npc);  board.remove();  return true;}  }
class C{  public void addLunUniqueId(java.lang.String param){  if (localLunUniqueId == null) {    localLunUniqueId=new java.lang.String[]{};  }  localLunUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localLunUniqueId);  list.add(param);  this.localLunUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static String readSharedPreference(Context context,String key,String default_value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    return settings.getString(key,default_value);  } catch (  Exception e) {    return default_value;  }}  }
class C{  @Override public String toString(){  return clause;}  }
class C{  public EventFieldList clone(){  EventFieldList result=new EventFieldList();  result.ClientHandle=ClientHandle;  result.EventFields=EventFields == null ? null : EventFields.clone();  return result;}  }
class C{  public static ODataUri createODataUriEntityKeys(String serviceRoot,String entitySetName,KeyValuePair... keyValuePairs){  scala.Option<EntityPath> noEntityPath=scala.Option.apply(null);  KeyPredicate keyPredicate=createKeyPredicate(keyValuePairs);  KeyPredicatePath keyPredicatePath=new KeyPredicatePath(keyPredicate,noEntityPath);  scala.Option<String> noString=scala.Option.apply(null);  scala.Option<PathSegment> keyPredicatePathOption=scala.Option.apply(keyPredicatePath);  EntityCollectionPath entityCollectionPath=new EntityCollectionPath(noString,keyPredicatePathOption);  scala.Option<EntityCollectionPath> entityCollectionPathOption=scala.Option.apply(entityCollectionPath);  EntitySetPath entitySetPath=new EntitySetPath(entitySetName,entityCollectionPathOption);  List<QueryOption> queryOptions=new ArrayList<>();  ResourcePathUri resourcePathUri=new ResourcePathUri(entitySetPath,asScalaList(queryOptions));  return new ODataUri(serviceRoot,resourcePathUri);}  }
class C{  public void removePlayersMonsters(){  for (  final Creature creature : spawnedCreatures) {    final StendhalRPZone monsterZone=creature.getZone();    if (monsterZone != null) {      monsterZone.remove(creature);    }  }}  }
class C{  public void intersectWith(LockSet other){  for (int i=0; i < array.length; i+=2) {    int valueNumber=array[i];    if (valueNumber < 0) {      break;    }    int myLockCount=array[i + 1];    if (myLockCount <= 0) {      continue;    }    int otherLockCount=other.getLockCount(valueNumber);    if (otherLockCount <= 0) {      array[i + 1]=0;    }  }}  }
class C{  public static IndependenceFacts serializableInstance(){  return new IndependenceFacts();}  }
class C{  private void updatePreferredSize(){  int maxRight=0;  int maxBottom=0;  for (  Component component : getComponents()) {    if (component.isVisible() && !(component instanceof JInternalFrame.JDesktopIcon) && (!(component instanceof JInternalFrame) || (!((JInternalFrame)component).isMaximum()))) {      Point location=component.getLocation();      Dimension size=component.getSize();      maxRight=Math.max(maxRight,location.x + size.width);      maxBottom=Math.max(maxBottom,location.y + size.height);    }  }  maxRight=Math.max(maxRight,originalWidth);  maxBottom=Math.max(maxBottom,originalHeight);  Dimension size=new Dimension(maxRight + 5,maxBottom + 5);  super.setPreferredSize(size);  setSize(size);  revalidate();}  }
class C{  protected void paintLabel(Geo originGeo,double distance,Graphics graphics,MapBean theMap){  Geo ringGeo=originGeo.offset(distance,Math.PI);  OMText text=new OMText(ringGeo.getLatitude(),ringGeo.getLongitude(),getLabelFor(distance),OMText.JUSTIFY_CENTER);  text.putAttribute(OMGraphicConstants.NO_ROTATE,Boolean.TRUE);  text.setBaseline(OMText.BASELINE_BOTTOM);  prepareLabel(text);  text.generate(theMap.getRotatedProjection());  text.render(graphics);}  }
class C{  public void updateConfiguration(){  if (updateConfigTask != null)   updateConfigTask.reschedule(500,TimeUnit.MILLISECONDS);}  }
class C{  @Override protected Class<?> findClass(String classname) throws ClassNotFoundException {  File cpath=new File(Switchboard.getSwitchboard().getAppPath(SwitchboardConstants.HTROOT_PATH,SwitchboardConstants.HTROOT_PATH_DEFAULT),classname + ".class");  return loadClass(cpath);}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.141 -0500",hash_original_method="E9C60CA998422120B69758A8DCF01F28",hash_generated_method="705D1A74421F2CE0B06ECF5B002BB479") public void copy2DRangeFrom(int xoff,int yoff,Bitmap data){  mRS.validate();  validateBitmapFormat(data);  validate2DRange(xoff,yoff,data.getWidth(),data.getHeight());  mRS.nAllocationData2D(getIDSafe(),xoff,yoff,mSelectedLOD,mSelectedFace.mID,data);}  }
class C{  public static EntityIterator newEntityIterator(Cursor cursor,ContentProviderClient provider){  return new EntityIteratorImpl(cursor,provider);}  }
class C{  public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(StdDraw.frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  public static final StringBuilder trim(final StringBuilder content_buffer){  char c;  final int length=content_buffer.length();  for (int i=length - 1; i > -1; i--) {    c=content_buffer.charAt(i);    if (c == ' ') {      content_buffer.deleteCharAt(i);    } else {      i=-1;    }  }  return content_buffer;}  }
class C{  protected void validate(){  if (major < 0)   throw new IllegalArgumentException("negative major: " + major);  if (minor < 0)   throw new IllegalArgumentException("negative minor: " + minor);  if (micro < 0)   throw new IllegalArgumentException("negative micro: " + micro);  if (QUALIFIER_PATTERN.matcher(qualifier).matches() == false)   throw new IllegalArgumentException("Invalid qualifier, it must be " + PATTERN + ": "+ qualifier);}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockDamage(BlockDamageEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_BREAK)) {    Block evaluating=event.getBlock();    if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,evaluating,event.getPlayer())) {      if (event.isCancelled()) {        event.setCancelled(false);      }      break;    }  }}  }
class C{  protected void shuffleMessages(List<Message> messages){  if (messages.size() <= 1) {    return;  }  Random rng=new Random(SimClock.getIntTime());  Collections.shuffle(messages,rng);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover-test") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Deprecated public TaskList failoverTest(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() != 1) {    throw APIException.badRequests.failoverCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {    throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.FAILOVER_TEST.getRestOp());  }  ArgValidator.checkFieldUriType(copy.getCopyID(),Volume.class,"id");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER_TEST.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);    copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER_TEST.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public static Class findEnum(Class target){  if (target.isPrimitive()) {    return null;  }  while (target != Object.class) {    if (target.isEnum()) {      return target;    }    target=target.getSuperclass();  }  return null;}  }
class C{  public void paint(Graphics g){  int len=highlights.size();  for (int i=0; i < len; i++) {    HighlightInfo info=highlights.elementAt(i);    if (!(info instanceof LayeredHighlightInfo)) {      Rectangle a=component.getBounds();      Insets insets=component.getInsets();      a.x=insets.left;      a.y=insets.top;      a.width-=insets.left + insets.right;      a.height-=insets.top + insets.bottom;      for (; i < len; i++) {        info=highlights.elementAt(i);        if (!(info instanceof LayeredHighlightInfo)) {          Highlighter.HighlightPainter p=info.getPainter();          p.paint(g,info.getStartOffset(),info.getEndOffset(),a,component);        }      }    }  }}  }
class C{  public void togglePlayback(){switch (mState) {case STATE_STOPPED:case STATE_PAUSED:    play();  break;case STATE_PLAYING:pause();break;default :break;}}  }
class C{  public void validateTokenRequest(String uid,String signature,String timestamp,String stringToSign) throws DataAccessException, UnauthorizedException {  if (!Utilities.isTimestampValid(timestamp)) {    throw new UnauthorizedException("Invalid timestamp: " + timestamp);  }  log.info(String.format("Timestamp [ %s ] is valid",timestamp));  DeviceInfo device=deviceAuthenticator.getDeviceInfo(uid);  if (device == null) {    throw new UnauthorizedException("Couldn't find device: " + uid);  }  if (!validateSignature(stringToSign,device.getKey(),signature)) {    log.info("String to sign: " + stringToSign);    throw new UnauthorizedException("Invalid signature: " + signature);  }  log.info("Signature matched!!!");}  }
class C{  public JmsConnectionFactoryScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public static FileWriterRetentionConfig newConfig(int fileCount,long aggregateFileSize,long ageSec,long periodMsec){  return new FileWriterRetentionConfig(fileCount,aggregateFileSize,ageSec,periodMsec);}  }
class C{  public static double quantile(double q,double[] x,int count){  int[] indices=new int[count];  HeapSort.sort(x,indices);  return quantile(q,x,indices);}  }
class C{  public void performMaintenance(long now,long deadlineMicros){  updateStats(now);  ServiceHostState hostState=this.host.getStateNoCloning();  int pauseServiceCount=0;  long memoryLimitHighMB=this.host.getServiceMemoryLimitMB(ServiceHost.ROOT_PATH,MemoryLimitType.HIGH_WATERMARK);  long memoryInUseMB=hostState.serviceCount * ServiceHost.DEFAULT_SERVICE_INSTANCE_COST_BYTES;  memoryInUseMB/=(1024 * 1024);  boolean shouldPause=memoryLimitHighMB <= memoryInUseMB;  for (  Service service : this.attachedServices.values()) {    if (service.hasOption(ServiceOption.FACTORY)) {      continue;    }    ServiceDocument s=this.cachedServiceStates.get(service.getSelfLink());    Long lastAccessTime=this.persistedServiceLastAccessTimes.get(service.getSelfLink());    boolean cacheCleared=s == null;    if (s != null) {      if (!ServiceHost.isServiceIndexed(service)) {        if (s.documentExpirationTimeMicros > 0 && s.documentExpirationTimeMicros < now) {          stopService(service,true,null);        }        continue;      }      if (service.hasOption(ServiceOption.TRANSACTION_PENDING)) {        continue;      }      if (lastAccessTime == null) {        lastAccessTime=s.documentUpdateTimeMicros;      }      long cacheClearDelayMicros=hostState.serviceCacheClearDelayMicros;      if (ServiceHost.isServiceImmutable(service)) {        cacheClearDelayMicros=0;      }      if ((cacheClearDelayMicros + lastAccessTime) < now) {        clearCachedServiceState(service,null,null,true);        cacheCleared=true;      }    }    if (lastAccessTime == null && ServiceHost.isServiceIndexed(service)) {      continue;    }    if (lastAccessTime != null && hostState.lastMaintenanceTimeUtcMicros - lastAccessTime < service.getMaintenanceIntervalMicros() * 2) {      continue;    }    if (service.hasOption(ServiceOption.PERIODIC_MAINTENANCE)) {      continue;    }    if (!service.hasOption(ServiceOption.FACTORY_ITEM)) {      continue;    }    if (!service.hasOption(ServiceOption.ON_DEMAND_LOAD)) {      continue;    }    if (this.host.isServiceStarting(service,service.getSelfLink())) {      continue;    }    if (this.host.hasPendingServiceAvailableCompletions(service.getSelfLink())) {      this.host.log(Level.INFO,"Pending available completions, skipping pause/stop on %s",service.getSelfLink());      continue;    }    boolean hasSoftState=hasServiceSoftState(service);    if (cacheCleared && !hasSoftState) {      stopService(service,false,null);      continue;    }    if (!shouldPause && !cacheCleared) {      continue;    }    if (!cacheCleared) {      clearCachedServiceState(service,null,null);      if (!hasSoftState) {        stopService(service,false,null);        continue;      }    }    String factoryPath=UriUtils.getParentPath(service.getSelfLink());    if (factoryPath != null) {      this.serviceFactoriesWithPauseResume.add(factoryPath);    }    pauseServiceCount++;    pauseService(service);    if (deadlineMicros < Utils.getSystemNowMicrosUtc()) {      break;    }  }  if (hostState.serviceCount < 0) {synchronized (hostState) {      hostState.serviceCount=this.attachedServices.size();    }  }  if (pauseServiceCount == 0) {    return;  }  this.host.log(Level.FINE,"Attempt pause on %d services, attached: %d, cached: %d, persistedServiceLastAccessTimes: %d",pauseServiceCount,hostState.serviceCount,this.cachedServiceStates.size(),this.persistedServiceLastAccessTimes.size());}  }
class C{  public void persist(final Tradingday detachedInstance) throws Exception {  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Tradingday tradingday=null;    if (null == detachedInstance.getIdTradingDay()) {      tradingday=this.findTradingdayByOpenCloseDate(detachedInstance.getOpen(),detachedInstance.getClose());      if (null == tradingday) {        entityManager.persist(detachedInstance);      } else {        detachedInstance.setIdTradingDay(tradingday.getIdTradingDay());        detachedInstance.setVersion(tradingday.getVersion());        tradingday=entityManager.merge(detachedInstance);      }      entityManager.getTransaction().commit();    } else {      tradingday=entityManager.merge(detachedInstance);      entityManager.getTransaction().commit();      detachedInstance.setVersion(tradingday.getVersion());    }    for (    Tradestrategy tradestrategy : detachedInstance.getTradestrategies()) {      if (tradestrategy.getTradeOrders().isEmpty() && tradestrategy.isDirty()) {        entityManager.getTransaction().begin();        if (null != tradingday) {          tradestrategy.setTradingday(tradingday);        }        Strategy strategy=this.findStrategyByName(tradestrategy.getStrategy().getName());        if (null != strategy) {          tradestrategy.setStrategy(strategy);        }        Contract contract=this.findContractByUniqueKey(tradestrategy.getContract().getSecType(),tradestrategy.getContract().getSymbol(),tradestrategy.getContract().getExchange(),tradestrategy.getContract().getCurrency(),tradestrategy.getContract().getExpiry());        if (null != contract) {          tradestrategy.setContract(contract);        }        if (null == tradestrategy.getIdTradeStrategy()) {          entityManager.persist(tradestrategy);          entityManager.getTransaction().commit();        } else {          Tradestrategy instance=entityManager.merge(tradestrategy);          entityManager.getTransaction().commit();          tradestrategy.setVersion(instance.getVersion());        }        tradestrategy.setDirty(false);      }    }    entityManager.getTransaction().begin();    List<Tradestrategy> tradestrategies=findTradestrategyByIdTradingday(detachedInstance.getIdTradingDay());    for (    Tradestrategy tradestrategy : tradestrategies) {      boolean exists=false;      for (      Tradestrategy newTradestrategy : detachedInstance.getTradestrategies()) {        if (newTradestrategy.equals(tradestrategy)) {          exists=true;          break;        }      }      if (!exists) {        if (tradestrategy.getTradeOrders().isEmpty()) {          entityManager.remove(tradestrategy);        } else {          throw new Exception("The following Contract:" + tradestrategy.getContract().getSymbol() + " Strategy:"+ tradestrategy.getStrategy().getName()+ " already exists with trades. \n Please delete orders before removing.");        }      }    }    entityManager.getTransaction().commit();    detachedInstance.setDirty(false);  } catch (  Exception re) {    EntityManagerHelper.logError("Error saving Tradingdays: " + re.getMessage(),re);    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public Iterator<String> iterator(){  return this.keySet().iterator();}  }
class C{  private static String unescape(String text){  return text.replace("&lt;","<").replace("&gt;",">").replace("&amp;","&");}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("HTML","");  } else {    state=domImpl.hasFeature("XML","");  }  assertTrue("hasFeatureBlank",state);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2,LinkedList<Diff> diffs){  return patch_make(text1,diffs);}  }
class C{  private synchronized void userHasLeft(){  List<String> rooms=joinedRooms.get(connection);  if (rooms == null) {    return;  }  rooms.remove(room);  cleanup();}  }
class C{  @Override protected void initListeners(){  this.startBT.setOnClickListener(this);}  }
class C{  public PacketExtensionFilter(String elementName,String namespace){  this.elementName=elementName;  this.namespace=namespace;}  }
class C{  private void completeTaskAsUnsupported(TaskCompleter completer){  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  String methodName=stackTrace[2].getMethodName();  ServiceCoded code=DeviceControllerErrors.scaleio.operationIsUnsupported(methodName);  completer.error(dbClient,code);}  }
class C{  protected void onCompactDone(){}  }
class C{  public void testGetName() throws Exception {  assertEquals("did not get correct name of resource","jdbc/someConnection",resource.getName());}  }
class C{  public void insert(Envelope itemEnv,Object item){  if (itemEnv.isNull()) {    return;  }  super.insert(itemEnv,item);}  }
class C{  public void checkBytes(int start,int end){  if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {    checkIndexD(start,end - start);  }}  }
class C{  public static boolean isInImmersiveMode(Context context){  try {    int immersive=android.provider.Settings.System.getInt(context.getContentResolver(),"immersive_mode");    if (immersive == 1) {      return true;    }  } catch (  Exception e) {  }  return false;}  }
class C{  private void myFinish(){  if (BuildConfig.DEBUG)   Log.v("myFinish()");  if (inbox) {    ManageNotification.clearAll(getApplicationContext());  } else {    Intent intent=new Intent(getApplicationContext(),SmsPopupUtilsService.class);    intent.setAction(SmsPopupUtilsService.ACTION_UPDATE_NOTIFICATION);    if (replying) {      intent.putExtras(smsPopupPager.getActiveMessage().toBundle());      intent.putExtra(SmsMmsMessage.EXTRAS_REPLYING,replying);    }    WakefulBroadcastReceiver.startWakefulService(getApplicationContext(),intent);  }  ReminderService.cancelReminder(getApplicationContext());  finish();}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  public static boolean macAddressExist(String macAddress){  for (  ArpInfo arpInfo : fetchArpList()) {    if (arpInfo.getMacAddress().toLowerCase().equals(macAddress.toLowerCase()))     return true;  }  return false;}  }
class C{  @Override protected void sendFunctionGroup2(){  XNetMessage msg=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),5,f5);  queueMessage(msg,THROTTLEFUNCSENT);  XNetMessage msg1=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),6,f6);  queueMessage(msg1,THROTTLEFUNCSENT);  XNetMessage msg2=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),7,f7);  queueMessage(msg2,THROTTLEFUNCSENT);  XNetMessage msg3=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),8,f8);  queueMessage(msg3,THROTTLEFUNCSENT);}  }
class C{  public static String createStringFromC(Address stringAddress){  if (VM.fullyBooted) {    try {      String encoding=System.getProperty("file.encoding");      CharsetDecoder csd=Charset.forName(encoding).newDecoder();      csd.onMalformedInput(CodingErrorAction.REPLACE);      csd.onUnmappableCharacter(CodingErrorAction.REPLACE);      ByteBuffer bbuf=java.nio.JikesRVMSupport.newDirectByteBuffer(stringAddress,strlen(stringAddress));      return createString(csd,bbuf);    } catch (    Exception ex) {    }  }  byte[] tmp=createByteArrayFromC(stringAddress);  return StringUtilities.asciiBytesToString(tmp);}  }
class C{  public AssertionValidationExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  @NonNull private static ShortMessage processRunningMessage(final int status,final int data1,@NonNull final DataInput midiDataInputStream) throws InvalidMidiDataException, IOException {  final ShortMessage shortMessage;switch (status & ShortMessage.MASK_EVENT) {case ShortMessage.NOTE_OFF:case ShortMessage.NOTE_ON:case ShortMessage.POLY_PRESSURE:case ShortMessage.CONTROL_CHANGE:case ShortMessage.PITCH_BEND:    shortMessage=new ShortMessage();  shortMessage.setMessage(status,data1,midiDataInputStream.readUnsignedByte());break;case ShortMessage.PROGRAM_CHANGE:case ShortMessage.CHANNEL_PRESSURE:shortMessage=new ShortMessage();shortMessage.setMessage(status,data1,0);break;default :throw new InvalidMidiDataException(String.format("Invalid data: %02x %02x",status,data1));}return shortMessage;}  }
class C{  public PreferenceBuilder<PreferenceClass> defValue(PreferenceClass defaultValue){  this.defaultValue=defaultValue;  return this;}  }
class C{  public final void printLatin1(char[] buffer,int offset,int length) throws IOException {  StreamImpl source=_source;  if (source == null) {    return;  }  byte[] writeBuffer=_writeBuffer;  int writeLength=_writeLength;  while (true) {    int sublen=Math.min(length,writeBuffer.length - writeLength);    for (int i=sublen - 1; i >= 0; i--) {      char ch=buffer[offset + i];      if (ch < 0x100) {        writeBuffer[writeLength + i]=(byte)ch;      } else {        writeBuffer[writeLength + i]=LATIN1[ch];      }    }    if (length == sublen) {      _writeLength=writeLength + sublen;      return;    }    writeLength+=sublen;    offset+=sublen;    length-=sublen;    source.write(writeBuffer,0,writeLength,false);    _position+=writeLength;    _isFlushRequired=true;    writeLength=0;  }}  }
class C{  private void drawCalendar(int year,Month month){  drawCalendar(YearMonth.of(year,month));}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private int updateLastTokensBelow(int line,int numLines,int previousTokenType){  int firstLine=line;  int end=numLines;  while (line < end) {    setSharedSegment(line);    int oldTokenType=lastTokensOnLines.get(line);    int newTokenType=tokenMaker.getLastTokenTypeOnLine(s,previousTokenType);    if (oldTokenType == newTokenType) {      fireChangedUpdate(new DefaultDocumentEvent(firstLine,line,DocumentEvent.EventType.CHANGE));      return line;    }    lastTokensOnLines.setUnsafe(line,newTokenType);    previousTokenType=newTokenType;    line++;  }  if (line > firstLine) {    fireChangedUpdate(new DefaultDocumentEvent(firstLine,line,DocumentEvent.EventType.CHANGE));  }  return line;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe class index\n" + "\t(default: last)","c",1,"-c <class index>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public AbstractPreferencePagePresenter(String title){  this(title,DEFAULT_CATEGORY,null);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  protected UnknownResolverVariableException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  public Function lookup(Class<?> functionClass,String name,Class<?>... paramTypes){  List<Method> functionMethods=new ArrayList<Method>();  addFunctionMethods(functionClass,functionMethods);  Collections.sort(functionMethods,new PolymorphicComparator());  for (  Method fMethod : functionMethods) {    FunctionMethod fAnno=fMethod.getAnnotation(FunctionMethod.class);    if ((name.equals(fMethod.getName())) || name.equals(fAnno.value())) {      if (isCallable(paramTypes,fMethod.getParameterTypes())) {        return createFunction(functionClass,fMethod);      }    }  }  return null;}  }
class C{  public static Byte toByte(String str) throws PageException {  return new Byte(toByteValue(str));}  }
class C{  public void dispose(){  m_tracesPanel.dispose();}  }
class C{  public static boolean is32Bits(File file) throws IOException {  return isArchitecture(file,PEFile.Architecture.I386);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.373 -0500",hash_original_method="BB0C5A7042ADC1F8FC4BAA64EBFD2B52",hash_generated_method="F53F34D04C3A7CD07CB3E8669CAB776D") public int length(){  return nameValuePairs.size();}  }
class C{  public ElementsByTagNameNS(String ns,String ln){  namespaceURI=ns;  localName=ln;}  }
class C{  protected void fireChanged(){  ChangeEvent e=new ChangeEvent(this);  for (  ChangeListener listener : listeners) {    listener.stateChanged(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.GENERATOR_ENTRY__ELEMENT_REF:    setElementRef((EObject)null);  return;case SGenPackage.GENERATOR_ENTRY__FEATURES:getFeatures().clear();return;case SGenPackage.GENERATOR_ENTRY__CONTENT_TYPE:setContentType(CONTENT_TYPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void finished(){  if (!finished)   throw new AssertionError("FlatBuffers: you can only access the serialized buffer after it has been" + " finished by FlatBufferBuilder.finish().");}  }
class C{  public static boolean isNumber(String s){  if (s.length() == 0) {    return false;  }  for (  char c : s.toCharArray()) {    if (!Character.isDigit(c)) {      return false;    }  }  return true;}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public PFont(Typeface font,int size,boolean smooth){  this(font,size,smooth,null);}  }
class C{  public CFilterTreeModel(final ITreeNode<CTag> rootTag){  this.rootTag=rootTag;  createTree(rootTag);}  }
class C{  @Deprecated public UpdateRequest script(String script,ScriptService.ScriptType scriptType,@Nullable Map<String,Object> scriptParams){  this.script=new Script(script,scriptType,null,scriptParams);  return this;}  }
class C{  public void test6(){  final JPanel panel=new JPanel(new GridLayoutManager(2,1,new Insets(0,0,0,0),0,500));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn2,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(558,preferredSize.height);  } else {    assertEquals(540,preferredSize.height);  }  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public Timezone(TimeZone timezone){  this(UtcOffset.parse(timezone),timezone.getID());}  }
class C{  public Builder addPhotos(@Nullable final List<SharePhoto> photos){  if (photos != null) {    for (    SharePhoto photo : photos) {      this.addPhoto(photo);    }  }  return this;}  }
class C{  public ScriptExecutionEvent(Script source,Type type){  this(source,type,null);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static FlexibleSpaceFragment newInstance(){  return new FlexibleSpaceFragment();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAfterCode_();}  }
class C{  public void removeSettingsListener(String name){  removeSettingsListener(name,null);}  }
class C{  public static double RAErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfAbsoluteError=dv.getDependentVariableSumOfAbsoluteError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    error=result - expectedResult;    sumOfAbsoluteError+=Math.abs(error);  }  if (dvSumOfAbsoluteError == 0.0) {    dvSumOfAbsoluteError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of error for dependent variable is 0 in RAE fitness calculation. Adjusting to avoid division by zero.");  }  return (sumOfAbsoluteError / dvSumOfAbsoluteError);}  }
class C{  public Tick(String text,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  ParamChecks.nullNotPermitted(textAnchor,"textAnchor");  ParamChecks.nullNotPermitted(rotationAnchor,"rotationAnchor");  this.text=text;  this.textAnchor=textAnchor;  this.rotationAnchor=rotationAnchor;  this.angle=angle;}  }
class C{  SearchCallback(Callback<TimelineResult<Tweet>> cb){  this.cb=cb;}  }
class C{  public void init() throws IOException, JMException {  proxy=ScanManager.register();  ((NotificationEmitter)proxy).addNotificationListener(listener,null,null);}  }
class C{  public void clipRect(int x,int y,int width,int height){  mGraphics.clipRect(x,y,width,height);}  }
class C{  @Deprecated public static boolean isArrayByteBase64(final byte[] arrayOctet){  return isBase64(arrayOctet);}  }
class C{  String evaluateSlotName(String name){  Map<String,String> params=new HashMap<String,String>();  Calendar calendar=Calendar.getInstance();  int year=calendar.get(Calendar.YEAR);  params.put("year",Integer.toString(year).substring(2));  calendar.add(Calendar.MONTH,-2);  year=calendar.get(Calendar.YEAR);  params.put("seasonyear",Integer.toString(year).substring(2));  return StringUtils.substitute(name,params);}  }
class C{  public boolean isComplete(){  return numNT == 0;}  }
class C{  public XsdParser(String xsdName){  try {    Resource[] resources=ResourceUtils.getResources("classpath*:**/" + xsdName);    if (resources.length < 1) {      throw new IllegalStateException("No XSD found with name \"" + xsdName + "\"");    }    setDocument(resources[0].getInputStream());  } catch (  IOException e) {    throw new IllegalStateException("Error reading resource \"" + xsdName + "\"",e);  }}  }
class C{  public void add(String geomFuncClassname) throws ClassNotFoundException {  Class geomFuncClass=null;  geomFuncClass=this.getClass().getClassLoader().loadClass(geomFuncClassname);  add(geomFuncClass);}  }
class C{  public String serverId(){  return selfServer().getId();}  }
class C{  public static GraphRequest newUpdateOpenGraphObjectRequest(AccessToken accessToken,JSONObject openGraphObject,Callback callback){  if (openGraphObject == null) {    throw new FacebookException("openGraphObject cannot be null");  }  String path=openGraphObject.optString("id");  if (path == null) {    throw new FacebookException("openGraphObject must have an id");  }  Bundle bundle=new Bundle();  bundle.putString(OBJECT_PARAM,openGraphObject.toString());  return new GraphRequest(accessToken,path,bundle,HttpMethod.POST,callback);}  }
class C{  @Override public void C(final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.C() called from=" + formObj.getObjectRefAsString());  }  if (Ccalled.get(formObj.getObjectRefAsString()) != null) {    return;  }  Ccalled.put(formObj.getObjectRefAsString(),"1");  javascript.execute(formObj,PdfDictionary.C2,ActionHandler.FOCUS_EVENT,' ');  Ccalled.remove(formObj.getObjectRefAsString());}  }
class C{  public void putAdditionalParam(String key,TemplateModel value){  if (additionalParams == null)   additionalParams=new HashMap<>();  additionalParams.put(key,value);}  }
class C{  private void layoutComponents(){  setLayout(new BorderLayout());  add("Center",new JScrollPane(editorTable));}  }
class C{  public Parameter_ createParameter_(){  Parameter_Impl parameter_=new Parameter_Impl();  return parameter_;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CropTransformation(float widthRatio,float heightRatio,float aspectRatio,GravityHorizontal gravityHorizontal,GravityVertical gravityVertical){  mWidthRatio=widthRatio;  mHeightRatio=heightRatio;  mAspectRatio=aspectRatio;  mGravityHorizontal=gravityHorizontal;  mGravityVertical=gravityVertical;}  }
class C{  @Override public void endElement(String ns,String ln,String qn){}  }
class C{  void stopTone(){  if (audioTrack != null && audioTrack.getState() == AudioTrack.PLAYSTATE_PLAYING) {    audioTrack.stop();    audioTrack.release();    isPlaying=false;  }}  }
class C{  private boolean isBleEnabled(){  final BluetoothManager bm=(BluetoothManager)getSystemService(BLUETOOTH_SERVICE);  final BluetoothAdapter ba=bm.getAdapter();  return ba != null && ba.isEnabled();}  }
class C{  public static double footToMeter(double foot){  return 0.305 * foot;}  }
class C{  private static Drawing createDrawing(){  DefaultDrawing drawing=new DefaultDrawing();  drawing.addInputFormat(new SerializationInputOutputFormat());  drawing.addOutputFormat(new SerializationInputOutputFormat());  return drawing;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  return false;}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  RenderableLayer symbolLayer=new RenderableLayer("Symbols");  getWorldWindow().getLayers().addLayer(symbolLayer);  SparseArray<String> modifiers=new SparseArray<String>();  modifiers.put(ModifiersUnits.Q_DIRECTION_OF_MOVEMENT,"235");  Placemark drone=new Placemark(Position.fromDegrees(32.4520,63.44553,3000),MilStd2525.getPlacemarkAttributes("SFAPMFQM--GIUSA",modifiers,null));  symbolLayer.addRenderable(drone);  modifiers.clear();  modifiers.put(ModifiersUnits.Q_DIRECTION_OF_MOVEMENT,"90");  modifiers.put(ModifiersUnits.AJ_SPEED_LEADER,"0.1");  Placemark launcher=new Placemark(Position.fromDegrees(32.4014,63.3894,0),MilStd2525.getPlacemarkAttributes("SHGXUCFRMS----G",modifiers,null));  symbolLayer.addRenderable(launcher);  modifiers.clear();  modifiers.put(ModifiersUnits.C_QUANTITY,"200");  modifiers.put(ModifiersUnits.G_STAFF_COMMENTS,"FOR REINFORCEMENTS");  modifiers.put(ModifiersUnits.H_ADDITIONAL_INFO_1,"ADDED SUPPORT FOR JJ");  modifiers.put(ModifiersUnits.V_EQUIP_TYPE,"MACHINE GUN");  modifiers.put(ModifiersUnits.W_DTG_1,"30140000ZSEP97");  Placemark machineGun=new Placemark(Position.fromDegrees(32.3902,63.4161,0),MilStd2525.getPlacemarkAttributes("SFGPEWRH--MTUSG",modifiers,null));  symbolLayer.addRenderable(machineGun);  getWorldWindow().requestRedraw();  statusText.setText("");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WFLine[");  sb.append(getAD_WF_Node_ID()).append("->").append(getAD_WF_Next_ID());  sb.append("]");  return sb.toString();}  }
class C{  public void updateLong(String columnName,long x) throws SQLException {  updateLong(findColumn(columnName),x);}  }
class C{  private void renderTagTreeNode(final CTagTreeNode node){  final CTag tag=node.getTag().getObject();  setToolTipText(buildToolTip(tag));}  }
class C{  public static OkHttpClient noSecretsClient(){  String password="ponies";  KeyStore keyStore=keyStoreFromResource("clients/noSecretsClient.p12",password);  KeyStore trustStore=keyStoreFromResource("dev_and_test_truststore.p12",password);  return HttpClients.builder().withClientCert(keyStore,password).addRequestInterceptors(new AuthHelper.AcceptRequestInterceptor(MediaType.APPLICATION_JSON)).build(trustStore);}  }
class C{  public void process(Trace trace,Node node,Direction direction,Map<String,?> headers,Object[] values){  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager/Processor/Action[" + handler.getAction() + "]: process trace="+ trace+ " node="+ node+ " direction="+ direction+ " headers="+ headers+ " values="+ values);    if (values != null) {      for (int i=0; i < values.length; i++) {        log.finest("        [value " + i + "] = "+ values[i]);      }    }  }  if (handler.isUsesHeaders() || handler.isUsesContent()) {    if (handler.isUsesHeaders() && (headers == null || headers.isEmpty())) {      if (log.isLoggable(Level.FINEST)) {        log.finest("ProcessManager/Processor/Action[" + handler.getAction() + "]: uses headers but not supplied");      }      return;    }    if (handler.isUsesContent() && (values == null || values.length == 0)) {      if (log.isLoggable(Level.FINEST)) {        log.finest("ProcessManager/Processor/Action[" + handler.getAction() + "]: uses content values but not supplied");      }      return;    }  }  try {    handler.process(trace,node,direction,headers,values);  } catch (  Throwable t) {    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processorDescription);    pi.setAction(actionDescription);    pi.setSeverity(Severity.Error);    pi.setDescription(t.getMessage());    node.getIssues().add(pi);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void applyAnimation(Animation animation){  if (mCreatedOttLayer != null) {    ImageView drawnImageView=(ImageView)mCreatedOttLayer.getChildAt(0);    drawnImageView.startAnimation(animation);  }}  }
class C{  public UpdatePodBuilder name(String name){  Objects.requireNonNull(name);  if (name.indexOf('.') >= 0) {    throw new IllegalArgumentException(name);  }  _name=name;  return this;}  }
class C{  public OIDCException(final String message){  super(message);}  }
class C{  public ReplaceableString(StringBuffer buf){  this.buf=buf;}  }
class C{  public void testThreeNodesEventsAfterFollowerKill() throws Throwable {  testEventsAfterFollowerKill(3);}  }
class C{  public static Vector3 subtract(Vector3 a,Vector3 b){  return new Vector3(a.getX() - b.getX(),a.getY() - b.getY(),a.getZ() - b.getZ());}  }
class C{  public void onSwapRead(boolean hit){  swapGets.incrementAndGet();  if (hit)   swapHits.incrementAndGet(); else   swapMisses.incrementAndGet();  if (delegate != null)   delegate.onSwapRead(hit);}  }
class C{  private void flashSelectedProperty(ThemeModel model,String key){}  }
class C{  public synchronized void warning(String s,Parameter p1,Parameter p2){  println("WARNING:\n" + s,ALL_MESSAGE_LOGS,true);  if (p1 != null)   println("PARAMETER: " + p1,ALL_MESSAGE_LOGS,true);  if (p2 != null && p1 != null)   println("     ALSO: " + p2,ALL_MESSAGE_LOGS,true); else   println("PARAMETER: " + p2,ALL_MESSAGE_LOGS,true);}  }
class C{  private void insertNewTracks(Collection<File> driveFiles) throws IOException {  for (  File driveFile : driveFiles) {    if (driveFile == null) {      return;    }    updateTrack(-1L,driveFile);  }}  }
class C{  @Override public String toString(){  return "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS[" + createString(",") + "]";}  }
class C{  static public void assertSameSolutions(final IBindingSet[] expected,final IRunningQuery runningQuery){  assertSameSolutions(expected,runningQuery.iterator(),runningQuery);}  }
class C{  public static void appendToOid(int l,SnmpOid source,SnmpOid dest){  dest.append(source);}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  public void removeExceptionMessages(ExceptionCode code){  Vector<ExceptionMessage> remove=new Vector<ExceptionMessage>();  int i;  int nbrMessages=m_exceptionMessages.size();  for (i=0; i < nbrMessages; i++) {    ExceptionMessage msg=m_exceptionMessages.elementAt(i);    if (msg.getExceptionCode().equals(code)) {      remove.addElement(msg);    }  }  int removeSize=remove.size();  for (i=0; i < removeSize; i++) {    removeExceptionMessage(remove.elementAt(i));  }}  }
class C{  protected void validateParameterList(NameValuePair[] param){}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mNum=getArguments() != null ? getArguments().getInt("num") : 1;}  }
class C{  public static ReilInstruction createAnd(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_AND,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  private void encodeThis() throws IOException {  if (names == null || names.isEmpty()) {    this.extensionValue=null;    return;  }  DerOutputStream os=new DerOutputStream();  names.encode(os);  this.extensionValue=os.toByteArray();}  }
class C{  @Override public int acceptInitialRead(byte[] buffer,int offset,int length) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  protected void assertEval(String... input){  evalAndCompare(input);}  }
class C{  protected void fireInsertUpdate(DocumentEvent e){  Element lineMap=getDefaultRootElement();  DocumentEvent.ElementChange change=e.getChange(lineMap);  Element[] added=change == null ? null : change.getChildrenAdded();  int numLines=lineMap.getElementCount();  int line=lineMap.getElementIndex(e.getOffset());  int previousLine=line - 1;  int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);  if (added != null && added.length > 0) {    Element[] removed=change.getChildrenRemoved();    int numRemoved=removed != null ? removed.length : 0;    int endBefore=line + added.length - numRemoved;    for (int i=line; i < endBefore; i++) {      setSharedSegment(i);      int tokenType=tokenMaker.getLastTokenTypeOnLine(s,previousTokenType);      lastTokensOnLines.add(i,tokenType);      previousTokenType=tokenType;    }    updateLastTokensBelow(endBefore,numLines,previousTokenType);  } else {    updateLastTokensBelow(line,numLines,previousTokenType);  }  super.fireInsertUpdate(e);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DefaultPassageFormatter(){  this("<b>","</b>","... ",false);}  }
class C{  public void removeRow(WorkspaceComponent component){  data.remove(component);  fireTableStructureChanged();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecify where to insert the ID. First and last\n" + "\tare valid indexes.(default first)","C",1,"-C <index>"));  result.addElement(new Option("\tName of the new attribute.\n" + "\t(default = 'ID')","N",1,"-N <name>"));  return result.elements();}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  formatter.beginMergeWhenMatched(writer);  if (matched) {    writer.write("when matched");  } else {    writer.write("when not matched");  }  if (optionalCondition != null) {    writer.write(" and ");    optionalCondition.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }  for (  OnMergeMatchedAction action : actions) {    formatter.beginMergeAction(writer);    action.toEPL(writer);  }}  }
class C{  private static void blur(int[] srcPixels,int[] dstPixels,int width,int height,float[] kernel,int radius){  float a;  float r;  float g;  float b;  int ca;  int cr;  int cg;  int cb;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      a=r=g=b=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset];        float blurFactor=kernel[radius + i];        a+=blurFactor * ((pixel >> 24) & 0xFF);        r+=blurFactor * ((pixel >> 16) & 0xFF);        g+=blurFactor * ((pixel >> 8) & 0xFF);        b+=blurFactor * ((pixel) & 0xFF);      }      ca=(int)(a + 0.5f);      cr=(int)(r + 0.5f);      cg=(int)(g + 0.5f);      cb=(int)(b + 0.5f);      dstPixels[index]=((ca > 255 ? 255 : ca) << 24) | ((cr > 255 ? 255 : cr) << 16) | ((cg > 255 ? 255 : cg) << 8)| (cb > 255 ? 255 : cb);      index+=height;    }  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  public ArrayList<YouTubeVideo> readAll(){  final String SELECT_QUERY_ORDER_DESC="SELECT * FROM " + tableName + " ORDER BY "+ YouTubeVideoEntry.COLUMN_ENTRY_ID+ " DESC";  SQLiteDatabase db=dbHelper.getReadableDatabase();  ArrayList<YouTubeVideo> list=new ArrayList<>();  Cursor c=db.rawQuery(SELECT_QUERY_ORDER_DESC,null);  while (c.moveToNext()) {    String videoId=c.getString(c.getColumnIndexOrThrow(YouTubeVideoEntry.COLUMN_VIDEO_ID));    String title=c.getString(c.getColumnIndexOrThrow(YouTubeVideoEntry.COLUMN_TITLE));    String duration=c.getString(c.getColumnIndexOrThrow(YouTubeVideoEntry.COLUMN_DURATION));    String thumbnailUrl=c.getString(c.getColumnIndexOrThrow(YouTubeVideoEntry.COLUMN_THUMBNAIL_URL));    String viewsNumber=c.getString(c.getColumnIndexOrThrow(YouTubeVideoEntry.COLUMN_VIEWS_NUMBER));    list.add(new YouTubeVideo(videoId,title,thumbnailUrl,duration,viewsNumber));  }  c.close();  return list;}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:28.772 -0500",hash_original_method="F53F9B39BB318705FAF6F47512F2ECB5",hash_generated_method="49E70B7A760FCEC75D209A01D89AE40A") public boolean updateMessageOnIccEf(int index,int status,byte[] pdu){  if (DBG)   log("updateMessageOnIccEf: index=" + index + " status="+ status+ " ==> "+ "("+ Arrays.toString(pdu)+ ")");  enforceReceiveAndSend("Updating message on SIM");synchronized (mLock) {    mSuccess=false;    Message response=mHandler.obtainMessage(EVENT_UPDATE_DONE);    if (status == STATUS_ON_ICC_FREE) {      mPhone.mCM.deleteSmsOnSim(index,response);    } else {      byte[] record=makeSmsRecordData(status,pdu);      mPhone.getIccFileHandler().updateEFLinearFixed(IccConstants.EF_SMS,index,record,null,response);    }    try {      mLock.wait();    } catch (    InterruptedException e) {      log("interrupted while trying to update by index");    }  }  return mSuccess;}  }
class C{  public SingleClassSelectionDialog(){  super(false);  setTitle("Choose a super class");}  }
class C{  public Basket(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void doStateDancing(){  dancingTime--;  if (dancingTime <= 0) {    setState(State.inHiveWithInfo);  }  goInHive();}  }
class C{  public Builder context(@NonNull final Context context){  mContext=context;  return this;}  }
class C{  public static String padLeft(final String s,final int length){  final int pad=length - s.length();  return pad > 0 ? getSpaceString(pad) + s : s;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.212 -0400",hash_original_method="066F7EF0ED4C419E80BC64545B6A36C8",hash_generated_method="434A6F336832B2A3901763B95116DFE7") public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  protected void scrubClass(final Class<?> testCaseClass) throws IllegalAccessException {  final Field[] fields=getClass().getDeclaredFields();  for (  Field field : fields) {    final Class<?> fieldClass=field.getDeclaringClass();    if (testCaseClass.isAssignableFrom(fieldClass) && !field.getType().isPrimitive() && (field.getModifiers() & Modifier.FINAL) == 0) {      try {        field.setAccessible(true);        field.set(this,null);      } catch (      Exception e) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }      if (field.get(this) != null) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }    }  }}  }
class C{  protected boolean isAuthProcess(HttpServletRequest request){  boolean result=false;  result=(getUseLdap(request).booleanValue() && getUsingOSAuth(request).booleanValue()) || StringUtils.isNotEmpty(getName(request));  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix07.class,args);}  }
class C{  public MikheevLearner(Parameters p){  this("");}  }
class C{  @Override public void onPropertiesChanged(Bundle properties){  super.onPropertiesChanged(properties);  mLowBitAmbient=properties.getBoolean(PROPERTY_LOW_BIT_AMBIENT,false);  mBurnInProtection=properties.getBoolean(PROPERTY_BURN_IN_PROTECTION,false);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"onPropertiesChanged: low-bit ambient = " + mLowBitAmbient + ", "+ "burn-in protection = "+ mBurnInProtection);  }}  }
class C{  public void updateAccountValue(String key,String value,String currency,String accountNumber){synchronized (key) {    _log.debug("updateAccountValue Account#: " + accountNumber + " Key:"+ key+ " Value:"+ value+ " Currency:"+ currency);    if (m_accountRequests.containsKey(accountNumber)) {      Account account=m_accountRequests.get(accountNumber);      if (key.equals(TWSBrokerModel.ACCOUNTTYPE)) {        account.setAccountType(value);        account.setDirty(true);      }      if (account.getCurrency().equals(currency)) {        if (key.equals(TWSBrokerModel.AVAILABLE_FUNDS)) {          account.setAvailableFunds(new BigDecimal(value));          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.BUYING_POWER)) {          account.setBuyingPower(new BigDecimal(value));          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.CASH_BALANCE)) {          account.setCashBalance(new BigDecimal(value));          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.CURRENCY)) {          account.setCurrency(value);          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.GROSS_POSITION_VALUE) || key.equals(TWSBrokerModel.STOCK_MKT_VALUE)) {          account.setGrossPositionValue(new BigDecimal(value));          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.REALIZED_P_L)) {          account.setRealizedPnL(new BigDecimal(value));          account.setDirty(true);        }        if (key.equals(TWSBrokerModel.UNREALIZED_P_L)) {          account.setUnrealizedPnL(new BigDecimal(value));          account.setDirty(true);        }      }    }  }}  }
class C{  public static final double labelCardinality(int Y[][]){  int N=Y.length;  int L=Y[0].length;  double sum=0.0;  for (int i=0; i < N; i++) {    for (int j=0; j < L; j++) {      sum+=Y[i][j];    }  }  return (double)sum / (double)N;}  }
class C{  public Transformer newTransformer(Source source) throws TransformerConfigurationException {  try {    Templates tmpl=newTemplates(source);    if (tmpl == null)     return null;    Transformer transformer=tmpl.newTransformer();    transformer.setURIResolver(m_uriResolver);    return transformer;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public boolean isUseBias(){  return useBias;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SVGOMUseElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  protected void onOptionSelected(final EnumSet<DialogOption> selectedOptions){  showProgressDialog();  clearBrowsingData(selectedOptions);}  }
class C{  public BatchInterrupted(String reason,int totalCount,int successCount,int errorCount){  this.reason=reason;  this.totalCount=totalCount;  this.successCount=successCount;  this.errorCount=errorCount;  if (totalCount < (successCount - errorCount)) {    throw new IllegalArgumentException("total < success + error. total = " + totalCount + " success="+ successCount+ " error="+ errorCount);  }}  }
class C{  public void sendToDimension(AbstractPacket message,int dimensionId){  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.DIMENSION);  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(dimensionId);  this.channels.get(Side.SERVER).writeAndFlush(message);}  }
class C{  public boolean is2DArea(){  return m_is2DArea;}  }
class C{  private static void run(String benchmark,int threads,boolean client,CacheAtomicityMode atomicityMode,CacheWriteSynchronizationMode writeSyncMode) throws Exception {  String simpleClsName=JmhCacheBenchmark.class.getSimpleName();  String output=simpleClsName + "-" + benchmark+ "-"+ threads+ "-threads"+ "-"+ (client ? "client" : "data")+ "-"+ atomicityMode+ "-"+ writeSyncMode;  JmhIdeBenchmarkRunner.create().forks(1).threads(threads).warmupIterations(10).measurementIterations(60).benchmarks(simpleClsName + "." + benchmark).output(output + ".jmh.log").profilers(GCProfiler.class).jvmArguments("-Xms4g","-Xmx4g","-XX:+UnlockCommercialFeatures","-XX:+FlightRecorder","-XX:StartFlightRecording=delay=30s,dumponexit=true,settings=alloc,filename=" + output + ".jfr",JmhIdeBenchmarkRunner.createProperty(PROP_ATOMICITY_MODE,atomicityMode),JmhIdeBenchmarkRunner.createProperty(PROP_WRITE_SYNC_MODE,writeSyncMode),JmhIdeBenchmarkRunner.createProperty(PROP_DATA_NODES,2),JmhIdeBenchmarkRunner.createProperty(PROP_CLIENT_MODE,client)).run();}  }
class C{  public User build(){  User user=new User(this);  if (user.getAge() > 25) {    throw new IllegalArgumentException("Age cannot be more than 25!");  }  return user;}  }
class C{  public Long deleteUserById(String SID,Long userId) throws AxisFault {  return getUserServiceProxy().deleteUserById(SID,userId);}  }
class C{  public void displayMech(Entity en){  pi.setEntity(en);  onResize();  update();}  }
class C{  public OpenDeclarationAction(IResource targetResource,IRegion targetLocation,String hyperlinkLabel,IRegion hyperlinkLocation){  super();  this.resource=targetResource;  this.location=targetLocation;  this.label=hyperlinkLabel;  this.hyperlinkLocation=hyperlinkLocation;}  }
class C{  public static Iterator<String> lineIterator(String input){  return new LineIterator(input);}  }
class C{  public static List<Integer> rangeList(int i,int j){  List<Integer> l=new ArrayList<Integer>(j - i);  for (int k=i; k < j; k++) {    l.add(k);  }  return l;}  }
class C{  public ParserException(final String msg){  super(msg);}  }
class C{  private View fillFromMiddle(int childrenLeft,int childrenRight){  int width=childrenRight - childrenLeft;  int position=reconcileSelectedPosition();  View sel=makeAndAddView(position,childrenLeft,true,mListPadding.top,true);  mFirstPosition=position;  int selWidth=sel.getMeasuredWidth();  if (selWidth <= width) {    sel.offsetLeftAndRight((width - selWidth) / 2);  }  fillBeforeAndAfter(sel,position);  if (!mStackFromRight) {    correctTooWide(getChildCount());  } else {    correctTooSmall(getChildCount());  }  return sel;}  }
class C{  public void testGetPathContextWhenContextAlreadySetupAndNoTomcatContextXml() throws Exception {  TomcatWAR war=new TomcatWAR(getResourcePath(PACKAGE_PATH + "tomcat-empty.war"));  war.setContext("context");  assertEquals("context",war.getContext());}  }
class C{  public final void removeActivity(final int index){  if ((index % 2 != 0) || (index < 0) || (index > getPlanElements().size() - 1))   ; else   if (getPlanElements().size() == 1)   ; else {    if (index == 0) {      getPlanElements().remove(index + 1);      getPlanElements().remove(index);    } else     if (index == getPlanElements().size() - 1) {      getPlanElements().remove(index);      getPlanElements().remove(index - 1);    } else {      Leg prev_leg=(Leg)getPlanElements().get(index - 1);      prev_leg.setDepartureTime(Time.UNDEFINED_TIME);      prev_leg.setTravelTime(Time.UNDEFINED_TIME);      prev_leg.setTravelTime(Time.UNDEFINED_TIME - prev_leg.getDepartureTime());      prev_leg.setRoute(null);      getPlanElements().remove(index + 1);      getPlanElements().remove(index);    }  }}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!getVariables().contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  return this;}  }
class C{  private void renderLoadDetails(LoadDistribution distribution,int ypos){  int yPos2=ypos;  Map<Task,List<Load>> task2loads=distribution.getSeparatedTaskLoads();  ResourceAssignment[] assignments=distribution.getResource().getAssignments();  for (int i=0; i < assignments.length; i++) {    ResourceAssignment assignment=assignments[i];    List<Load> nextLoads=task2loads.get(assignment.getTask());    yPos2+=getConfig().getRowHeight();    if (nextLoads == null) {      continue;    }    buildTasksLoadsRectangles(nextLoads,yPos2);  }}  }
class C{  public boolean isSupplyVoltageEnabled(){  return ByteUtils.getBit(this.analogChannelMask,8);}  }
class C{  @RequestMapping(value="/namespaceIamRoleAuthorizations/namespaces/{namespace}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_DELETE) public NamespaceIamRoleAuthorization deleteNamespaceIamRoleAuthorization(@PathVariable("namespace") String namespace){  return namespaceIamRoleAuthorizationService.deleteNamespaceIamRoleAuthorization(namespace);}  }
class C{  public boolean osMkDirs(){  return mCurrent.mkdirs() || mCurrent.isDirectory();}  }
class C{  public KMLSimpleField(String namespaceURI){  super(namespaceURI);}  }
class C{  protected void subdivide(Line2D src,Line2D left,Line2D right){  double x1=src.getX1();  double y1=src.getY1();  double x2=src.getX2();  double y2=src.getY2();  double mx=x1 + (x2 - x1) / 2.0;  double my=y1 + (y2 - y1) / 2.0;  if (left != null) {    left.setLine(x1,y1,mx,my);  }  if (right != null) {    right.setLine(mx,my,x2,y2);  }}  }
class C{  @Override public Config config(){  return _config;}  }
class C{  public BallTree(Instances insts){  super(insts);  if (getMeasurePerformance())   m_Stats=m_TreeStats=new TreePerformanceStats();}  }
class C{  public String outputString(Element element,boolean strip){  StringWriter buff=new StringWriter();  String name=element.getName();  try {    outputElementContent(element,buff);  } catch (  IOException e) {  }  return buff.toString();}  }
class C{  public final int capacity(){  return m_Objects.length;}  }
class C{  private void hideSoftKeyboard(){  if (this.getCurrentFocus() != null) {    try {      InputMethodManager imm=(InputMethodManager)this.getSystemService(Context.INPUT_METHOD_SERVICE);      imm.hideSoftInputFromWindow(this.getCurrentFocus().getApplicationWindowToken(),0);    } catch (    RuntimeException e) {    }  }}  }
class C{  public static void createErrorDialog(final String title,final String message){  final Alert alert=new Alert(AlertType.ERROR);  alert.setTitle(title);  alert.setContentText(message);  alert.setHeaderText(null);  alert.showAndWait();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ChannelNumberAttribute))   return false;  if (obj == this)   return true;  ChannelNumberAttribute att=(ChannelNumberAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.channelNumber != channelNumber)   return false;  return true;}  }
class C{  public int match_main(String text,String pattern,int loc){  if (text == null || pattern == null) {    throw new IllegalArgumentException("Null inputs. (match_main)");  }  loc=Math.max(0,Math.min(loc,text.length()));  if (text.equals(pattern)) {    return 0;  } else   if (text.length() == 0) {    return -1;  } else   if (loc + pattern.length() <= text.length() && text.substring(loc,loc + pattern.length()).equals(pattern)) {    return loc;  } else {    return match_bitap(text,pattern,loc);  }}  }
class C{  public ExternalRoom findRoom(String roomNbr){  ExternalRoom room=null;  Iterator r=getRooms().iterator();  while (r.hasNext()) {    ExternalRoom rm=(ExternalRoom)r.next();    if ((roomNbr.trim()).equalsIgnoreCase(rm.getRoomNumber().trim())) {      room=rm;      break;    }  }  return room;}  }
class C{  public void onNodeLeft(UUID nodeId){  for (  ThreadFinishSync threadSync : threadMap.values())   threadSync.onNodeLeft(nodeId);}  }
class C{  public boolean isAuthAttempted(){  return authAttempted;}  }
class C{  protected Relation<?>[] alignColumns(ObjectBundle pack){  Relation<?>[] targets=new Relation<?>[pack.metaLength()];  long[] used=BitsUtil.zero(relations.size());  for (int i=0; i < targets.length; i++) {    SimpleTypeInformation<?> meta=pack.meta(i);    for (int j=BitsUtil.nextClearBit(used,0); j >= 0 && j < relations.size(); j=BitsUtil.nextClearBit(used,j + 1)) {      Relation<?> relation=relations.get(j);      if (relation.getDataTypeInformation().isAssignableFromType(meta)) {        targets[i]=relation;        BitsUtil.setI(used,j);        break;      }    }    if (targets[i] == null) {      targets[i]=addNewRelation(meta);      BitsUtil.setI(used,relations.size() - 1);    }  }  return targets;}  }
class C{  private static void createSuperForwarder(ClassNode targetNode,MethodNode forwarder,final Map<String,ClassNode> genericsSpec){  List<ClassNode> interfaces=new ArrayList<ClassNode>(Traits.collectAllInterfacesReverseOrder(targetNode,new LinkedHashSet<ClassNode>()));  String name=forwarder.getName();  Parameter[] forwarderParameters=forwarder.getParameters();  LinkedHashSet<ClassNode> traits=new LinkedHashSet<ClassNode>();  List<MethodNode> superForwarders=new LinkedList<MethodNode>();  for (  ClassNode node : interfaces) {    if (Traits.isTrait(node)) {      MethodNode method=node.getDeclaredMethod(name,forwarderParameters);      if (method != null) {        traits.add(node);        superForwarders.add(method);      }    }  }  for (  MethodNode superForwarder : superForwarders) {    doCreateSuperForwarder(targetNode,superForwarder,traits.toArray(new ClassNode[traits.size()]),genericsSpec);  }}  }
class C{  @SuppressWarnings("unchecked") public void copyDataToStorage() throws IOException, SerializationException, BusinessException {  storageData=new StorageData();  storageData.setName("Test");  List<DefaultData> data=Collections.singletonList(mock(DefaultData.class));  Collection<AbstractDataProcessor> processors=Collections.singleton(mock(AbstractDataProcessor.class));  storageManager=spy(storageManager);  long platformIdent=10L;  Collection<Long> elementIds=mock(Collection.class);  when(storageDataDao.getDataFromIdList(elementIds,platformIdent)).thenReturn(data);  storageManager.copyDataToStorage(storageData,elementIds,platformIdent,processors,false);  verify(storageDataDao,times(1)).getDataFromIdList(elementIds,platformIdent);  verify(storageManager,times(1)).writeToStorage(storageData,data,processors,true);  storageManager.copyDataToStorage(storageData,elementIds,platformIdent,processors,false);  verify(storageDataDao,times(2)).getDataFromIdList(elementIds,platformIdent);  verify(storageManager,times(2)).writeToStorage(storageData,data,processors,true);  assertThat(storageManager.isStorageClosed(storageData),is(true));}  }
class C{  static private Long computeInitiatorCountInMask(ExportMask mask,String portId){  long count=0L;  if (mask.getZoningMap() != null) {    for (    AbstractChangeTrackingSet<String> portSet : mask.getZoningMap().values()) {      if (portSet.contains(portId)) {        count++;      }    }  } else   if (mask.getInitiators() != null) {    count=mask.getInitiators().size();  }  return count;}  }
class C{  public static void load(URI uri,Object holder){  try {    load(uri.toURL(),holder);  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  public void reset(){  pp=1;  indices.clear();}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  protected static float[] createGaussianKernel(int radius){  if (radius < 1) {    throw new IllegalArgumentException("Radius must be >= 1");  }  float[] data=new float[radius * 2 + 1];  float sigma=radius / 3.0f;  float twoSigmaSquare=2.0f * sigma * sigma;  float sigmaRoot=(float)Math.sqrt(twoSigmaSquare * Math.PI);  float total=0.0f;  for (int i=-radius; i <= radius; i++) {    float distance=i * i;    int index=i + radius;    data[index]=(float)Math.exp(-distance / twoSigmaSquare) / sigmaRoot;    total+=data[index];  }  for (int i=0; i < data.length; i++) {    data[i]/=total;  }  return data;}  }
class C{  default Task<?> start(){  return Task.done();}  }
class C{  Verb normalizeVerb(final String word){  final String trimmedWord=trimWord(word);  final Grammar.Verb verb=Grammar.normalizeRegularVerb(trimmedWord);  if (verb != null) {    WordEntry entry=words.get(verb.word);    if ((entry == null) && trimmedWord.endsWith("e") && !verb.word.endsWith("e")) {      entry=words.get(verb.word + "e");    }    if (entry != null) {      return new Verb(verb,entry);    }  }  return null;}  }
class C{  public boolean isOracle(){  return Database.DB_ORACLE.equals(m_type);}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  mappedElementEClass=createEClass(MAPPED_ELEMENT);  createEReference(mappedElementEClass,MAPPED_ELEMENT__SOURCE_ELEMENT);  executionFlowEClass=createEClass(EXECUTION_FLOW);  createEReference(executionFlowEClass,EXECUTION_FLOW__STATES);  createEReference(executionFlowEClass,EXECUTION_FLOW__NODES);  createEReference(executionFlowEClass,EXECUTION_FLOW__REGIONS);  createEReference(executionFlowEClass,EXECUTION_FLOW__HISTORY_VECTOR);  createEReference(executionFlowEClass,EXECUTION_FLOW__ENTRY_ACTION);  createEReference(executionFlowEClass,EXECUTION_FLOW__EXIT_ACTION);  createEReference(executionFlowEClass,EXECUTION_FLOW__STATIC_INIT_SEQUENCE);  executionNodeEClass=createEClass(EXECUTION_NODE);  createEReference(executionNodeEClass,EXECUTION_NODE__REACTIONS);  createEAttribute(executionNodeEClass,EXECUTION_NODE__SIMPLE_NAME);  createEReference(executionNodeEClass,EXECUTION_NODE__REACT_SEQUENCE);  executionStateEClass=createEClass(EXECUTION_STATE);  createEAttribute(executionStateEClass,EXECUTION_STATE__LEAF);  createEReference(executionStateEClass,EXECUTION_STATE__ENTRY_ACTION);  createEReference(executionStateEClass,EXECUTION_STATE__EXIT_ACTION);  executionScopeEClass=createEClass(EXECUTION_SCOPE);  createEReference(executionScopeEClass,EXECUTION_SCOPE__STATE_VECTOR);  createEReference(executionScopeEClass,EXECUTION_SCOPE__SUB_SCOPES);  createEReference(executionScopeEClass,EXECUTION_SCOPE__SUPER_SCOPE);  createEReference(executionScopeEClass,EXECUTION_SCOPE__ENTER_SEQUENCES);  createEReference(executionScopeEClass,EXECUTION_SCOPE__EXIT_SEQUENCE);  createEReference(executionScopeEClass,EXECUTION_SCOPE__INIT_SEQUENCE);  executionRegionEClass=createEClass(EXECUTION_REGION);  createEReference(executionRegionEClass,EXECUTION_REGION__DEEP_ENTER_SEQUENCE);  createEReference(executionRegionEClass,EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE);  createEReference(executionRegionEClass,EXECUTION_REGION__HISTORY_VECTOR);  createEReference(executionRegionEClass,EXECUTION_REGION__NODES);  executionEntryEClass=createEClass(EXECUTION_ENTRY);  executionExitEClass=createEClass(EXECUTION_EXIT);  executionChoiceEClass=createEClass(EXECUTION_CHOICE);  executionSynchronizationEClass=createEClass(EXECUTION_SYNCHRONIZATION);  reactionEClass=createEClass(REACTION);  createEReference(reactionEClass,REACTION__CHECK);  createEReference(reactionEClass,REACTION__EFFECT);  createEAttribute(reactionEClass,REACTION__TRANSITION);  stateVectorEClass=createEClass(STATE_VECTOR);  createEAttribute(stateVectorEClass,STATE_VECTOR__SIZE);  createEAttribute(stateVectorEClass,STATE_VECTOR__OFFSET);  timeEventEClass=createEClass(TIME_EVENT);  createEAttribute(timeEventEClass,TIME_EVENT__PERIODIC);  stepEClass=createEClass(STEP);  createEAttribute(stepEClass,STEP__COMMENT);  createEReference(stepEClass,STEP__CALLER);  sequenceEClass=createEClass(SEQUENCE);  createEReference(sequenceEClass,SEQUENCE__STEPS);  checkEClass=createEClass(CHECK);  createEReference(checkEClass,CHECK__CONDITION);  createEReference(checkEClass,CHECK__REFS);  checkRefEClass=createEClass(CHECK_REF);  createEReference(checkRefEClass,CHECK_REF__CHECK);  ifEClass=createEClass(IF);  createEReference(ifEClass,IF__CHECK);  createEReference(ifEClass,IF__THEN_STEP);  createEReference(ifEClass,IF__ELSE_STEP);  executionEClass=createEClass(EXECUTION);  createEReference(executionEClass,EXECUTION__STATEMENT);  enterStateEClass=createEClass(ENTER_STATE);  createEReference(enterStateEClass,ENTER_STATE__STATE);  exitStateEClass=createEClass(EXIT_STATE);  createEReference(exitStateEClass,EXIT_STATE__STATE);  callEClass=createEClass(CALL);  createEReference(callEClass,CALL__STEP);  scheduleTimeEventEClass=createEClass(SCHEDULE_TIME_EVENT);  createEReference(scheduleTimeEventEClass,SCHEDULE_TIME_EVENT__TIME_EVENT);  createEReference(scheduleTimeEventEClass,SCHEDULE_TIME_EVENT__TIME_VALUE);  unscheduleTimeEventEClass=createEClass(UNSCHEDULE_TIME_EVENT);  createEReference(unscheduleTimeEventEClass,UNSCHEDULE_TIME_EVENT__TIME_EVENT);  stateSwitchEClass=createEClass(STATE_SWITCH);  createEReference(stateSwitchEClass,STATE_SWITCH__CASES);  createEAttribute(stateSwitchEClass,STATE_SWITCH__STATE_CONFIGURATION_IDX);  createEReference(stateSwitchEClass,STATE_SWITCH__HISTORY_REGION);  stateCaseEClass=createEClass(STATE_CASE);  createEReference(stateCaseEClass,STATE_CASE__STATE);  createEReference(stateCaseEClass,STATE_CASE__STEP);  saveHistoryEClass=createEClass(SAVE_HISTORY);  createEReference(saveHistoryEClass,SAVE_HISTORY__REGION);  createEAttribute(saveHistoryEClass,SAVE_HISTORY__DEEP);  historyEntryEClass=createEClass(HISTORY_ENTRY);  createEReference(historyEntryEClass,HISTORY_ENTRY__INITIAL_STEP);  createEAttribute(historyEntryEClass,HISTORY_ENTRY__DEEP);  createEReference(historyEntryEClass,HISTORY_ENTRY__REGION);  createEReference(historyEntryEClass,HISTORY_ENTRY__HISTORY_STEP);  traceEClass=createEClass(TRACE);  traceNodeExecutedEClass=createEClass(TRACE_NODE_EXECUTED);  createEReference(traceNodeExecutedEClass,TRACE_NODE_EXECUTED__NODE);  reactionFiredEClass=createEClass(REACTION_FIRED);  createEReference(reactionFiredEClass,REACTION_FIRED__REACTION);  traceReactionWillFireEClass=createEClass(TRACE_REACTION_WILL_FIRE);  createEReference(traceReactionWillFireEClass,TRACE_REACTION_WILL_FIRE__REACTION);  traceStateEnteredEClass=createEClass(TRACE_STATE_ENTERED);  createEReference(traceStateEnteredEClass,TRACE_STATE_ENTERED__STATE);  traceStateExitedEClass=createEClass(TRACE_STATE_EXITED);  createEReference(traceStateExitedEClass,TRACE_STATE_EXITED__STATE);  traceBeginRunCycleEClass=createEClass(TRACE_BEGIN_RUN_CYCLE);  traceEndRunCycleEClass=createEClass(TRACE_END_RUN_CYCLE);}  }
class C{  public synchronized Tradestrategy findByTradeOrderId(Integer idTradeOrder){  try {    Tradestrategy tradestrategy=null;    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradeOrder instance=entityManager.find(TradeOrder.class,idTradeOrder);    if (null != instance) {      tradestrategy=instance.getTradestrategy();      tradestrategy.getContract();    }    entityManager.getTransaction().commit();    return tradestrategy;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public DataTypeException(){  super();}  }
class C{  public static GenericEntity createGenericEntity(ModelEntity modelEntity){  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(modelEntity);  return newEntity;}  }
class C{  public DateTimeParserBucket(long instantLocal,Chronology chrono,Locale locale,Integer pivotYear,int defaultYear){  super();  chrono=DateTimeUtils.getChronology(chrono);  iMillis=instantLocal;  iZone=chrono.getZone();  iChrono=chrono.withUTC();  iLocale=(locale == null ? Locale.getDefault() : locale);  iPivotYear=pivotYear;  iDefaultYear=defaultYear;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.288 -0500",hash_original_method="85CC613BF9709593CA039307E2227217",hash_generated_method="F999AB1DA8ED0568D23A16ABFD90AFE4") private Object doExchange(Object item,boolean timed,long nanos){  droidsafeData.add(item);  return droidsafeData.getFirst();}  }
class C{  @Deprecated public static Uri createPersonInMyContactsGroup(ContentResolver resolver,ContentValues values){  Uri contactUri=resolver.insert(People.CONTENT_URI,values);  if (contactUri == null) {    Log.e(TAG,"Failed to create the contact");    return null;  }  if (addToMyContactsGroup(resolver,ContentUris.parseId(contactUri)) == null) {    resolver.delete(contactUri,null,null);    return null;  }  return contactUri;}  }
class C{  void f(){}  }
class C{  public PrettyPrinter(){  this(new OutputFormatter());}  }
class C{  public void testDefaults() throws Exception {  CommonGramsFilterFactory factory=(CommonGramsFilterFactory)tokenFilterFactory("CommonGrams");  CharArraySet words=factory.getCommonWords();  assertTrue("words is null and it shouldn't be",words != null);  assertTrue(words.contains("the"));  Tokenizer tokenizer=new MockTokenizer(MockTokenizer.WHITESPACE,false);  tokenizer.setReader(new StringReader("testing the factory"));  TokenStream stream=factory.create(tokenizer);  assertTokenStreamContents(stream,new String[]{"testing","testing_the","the","the_factory","factory"});}  }
class C{  public TradeStateChangeEvent(int partnerId,TradeState userTradeState,TradeState partnerTradeState){  super(Events.TRADE_STATE_CHANGE);  put("partner_id",partnerId);  put("user_trade_state",userTradeState.toString());  put("partner_trade_state",partnerTradeState.toString());}  }
class C{  private void updateMask(AttributedCharacterIterator iterator){  if (iterator != null) {    validMask=true;    this.iterator=iterator;    if (literalMask == null) {      literalMask=new BitSet();    } else {      for (int counter=literalMask.length() - 1; counter >= 0; counter--) {        literalMask.clear(counter);      }    }    iterator.first();    while (iterator.current() != CharacterIterator.DONE) {      Map attributes=iterator.getAttributes();      boolean set=isLiteral(attributes);      int start=iterator.getIndex();      int end=iterator.getRunLimit();      while (start < end) {        if (set) {          literalMask.set(start);        } else {          literalMask.clear(start);        }        start++;      }      iterator.setIndex(start);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.428 -0500",hash_original_method="8B073BF3F8F00875CF9B653567C3900A",hash_generated_method="782E43CE43B7326AF0F4F50C66FB2FDB") @Override protected void makeFinished(){  byte[] verify_data;  if (serverHello.server_version[1] == 1) {    verify_data=new byte[12];    computerVerifyDataTLS("client finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.client,verify_data);  }  clientFinished=new Finished(verify_data);  send(clientFinished);  if (isResuming) {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  } else {    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("server finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.server);    }    status=NEED_UNWRAP;  }}  }
class C{  @Override public VFSClient vfs(){  return new DefaultVFSClient(url,authenticationManager);}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  private void finish(PartitionReader p){  try {    if (p.isLost() || !m_zkConnector.isZkConnected()) {      Exception ex=new PartitionLostException(m_consumerId.toString(),p.getTopic(),p.getPartition());      LOGGER.error("Error occurs when finish partition",ex);      onException(p,ex);    } else {      BatchResponse res=onStreamTermination(p);      if (res != null)       handleResponse(p,0,res);    }  } catch (  Throwable e) {    LOGGER.error("Error occurs when finish partition " + p.getId(),e);    registerError(e);  } finally {    unsubscribePartition(p);  }}  }
class C{  public boolean contains(String key){  Node x=get(root,key,0);  if (x == null)   return false;  return x.isString;}  }
class C{  void proceedTLSReceived() throws Exception {  SSLContext context=this.config.getCustomSSLContext();  KeyStore ks=null;  KeyManager[] kms=null;  PasswordCallback pcb=null;  if (config.getCallbackHandler() == null) {    ks=null;  } else   if (context == null) {    if (config.getKeystoreType().equals("NONE")) {      ks=null;      pcb=null;    } else     if (config.getKeystoreType().equals("PKCS11")) {      try {        Constructor<?> c=Class.forName("sun.security.pkcs11.SunPKCS11").getConstructor(InputStream.class);        String pkcs11Config="name = SmartCard\nlibrary = " + config.getPKCS11Library();        ByteArrayInputStream config=new ByteArrayInputStream(pkcs11Config.getBytes());        Provider p=(Provider)c.newInstance(config);        Security.addProvider(p);        ks=KeyStore.getInstance("PKCS11",p);        pcb=new PasswordCallback("PKCS11 Password: ",false);        this.config.getCallbackHandler().handle(new Callback[]{pcb});        ks.load(null,pcb.getPassword());      } catch (      Exception e) {        ks=null;        pcb=null;      }    } else     if (config.getKeystoreType().equals("Apple")) {      ks=KeyStore.getInstance("KeychainStore","Apple");      ks.load(null,null);    } else {      ks=KeyStore.getInstance(config.getKeystoreType());      try {        pcb=new PasswordCallback("Keystore Password: ",false);        config.getCallbackHandler().handle(new Callback[]{pcb});        ks.load(new FileInputStream(config.getKeystorePath()),pcb.getPassword());      } catch (      Exception e) {        ks=null;        pcb=null;      }    }    KeyManagerFactory kmf=KeyManagerFactory.getInstance("SunX509");    try {      if (pcb == null) {        kmf.init(ks,null);      } else {        kmf.init(ks,pcb.getPassword());        pcb.clearPassword();      }      kms=kmf.getKeyManagers();    } catch (    NullPointerException npe) {      kms=null;    }  }  if (context == null) {    context=SSLContext.getInstance("TLS");    context.init(kms,new javax.net.ssl.TrustManager[]{new ServerTrustManager(getServiceName(),config)},new java.security.SecureRandom());  }  Socket plain=socket;  socket=context.getSocketFactory().createSocket(plain,plain.getInetAddress().getHostAddress(),plain.getPort(),true);  socket.setSoTimeout(0);  socket.setKeepAlive(true);  initReaderAndWriter();  ((SSLSocket)socket).startHandshake();  usingTLS=true;  packetWriter.setWriter(writer);  packetWriter.openStream();}  }
class C{  public void showDialog(Project project){  this.project=project;  view.setRemoveDeleteRefs(false);  view.setFetchAllBranches(true);  updateRemotes();}  }
class C{  public static ChangedAddressAttribute createChangedAddressAttribute(TransportAddress address){  ChangedAddressAttribute attribute=new ChangedAddressAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public static char[] resize(char buffer[],int newSize){  char temp[]=new char[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.REGULAR_EXPRESSION_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public void addAppOffer(Offer offer){  appOffers.add(offer);}  }
class C{  public void clearExports(){  if (exportedSymbols != null) {    exportedSymbols.clear();  }}  }
class C{  public void testHasProperty(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  assertTrue(instance.hasProperty(STRING_PROPERTY));  assertTrue(instance.hasProperty(INDEXED_PROPERTY));  assertTrue(instance.hasProperty(MAPPED_STRING));  assertTrue(instance.hasProperty(MAPPED_INDEXED));  assertFalse(instance.hasProperty(NOT_A_PROPERTY));}  }
class C{  public AdeDirectoriesManagerImpl(String outputPath,String analysisOutputPath,String tempPath) throws AdeException {  m_outputHome=new File(outputPath);  FileUtils.createDirs(m_outputHome);  m_traceHome=new File(m_outputHome,"trace");  m_traceHomeCreated=false;  if (analysisOutputPath != null && !analysisOutputPath.isEmpty()) {    m_analysisHome=new File(analysisOutputPath);  } else {    m_analysisHome=new File(outputPath,"analysis_adhoc");  }  FileUtils.createDirs(m_analysisHome);  m_modelHome=new File(m_outputHome,"models");  FileUtils.createDirs(m_modelHome);  if (tempPath != null && !tempPath.isEmpty()) {    m_tempHome=new File(tempPath);  } else {    m_tempHome=new File(m_outputHome,"temp");  }  FileUtils.createDirs(m_tempHome);  m_statsHome=new File(m_outputHome,"stats");  FileUtils.createDir(m_statsHome);}  }
class C{  public void unregisterPreferenceChangeListener(PreferenceChangeListener preferenceChangeListener){  mListeners.remove(preferenceChangeListener);}  }
class C{  private static List retrieveLoggers(){  List loggerNames=XRLog.listRegisteredLoggers();  List loggers=new ArrayList(loggerNames.size());  Iterator it=loggerNames.iterator();  while (it.hasNext()) {    final String ln=(String)it.next();    loggers.add(Logger.getLogger(ln));  }  return loggers;}  }
class C{  public static Drawable generateBgDrawable(@Tag String tag,float radii,float borderWidth,@ColorInt int pressColor,@ColorInt int defaultColor){  float[] outRadii;  if (tag.equalsIgnoreCase(TAG_LEFT)) {    outRadii=new float[]{radii,radii,0,0,0,0,radii,radii};  } else   if (tag.equalsIgnoreCase(TAG_RIGHT)) {    outRadii=new float[]{0,0,radii,radii,radii,radii,0,0};  } else   if (tag.equalsIgnoreCase(TAG_THIS)) {    outRadii=new float[]{radii,radii,radii,radii,radii,radii,radii,radii};  } else {    outRadii=new float[]{radii,radii,radii,radii,radii,radii,radii,radii};  }  RectF inset=new RectF(borderWidth,borderWidth,borderWidth,borderWidth);  Shape roundRectShape=new RoundRectShape(outRadii,inset,null);  ShapeDrawable shopDrawablePress=new ShapeDrawable(roundRectShape);  shopDrawablePress.getPaint().setColor(pressColor);  Shape roundRectShapeNormal=new RoundRectShape(outRadii,inset,null);  ShapeDrawable shopDrawableNormal=new ShapeDrawable(roundRectShapeNormal);  shopDrawableNormal.getPaint().setColor(defaultColor);  StateListDrawable bgStateDrawable=new StateListDrawable();  bgStateDrawable.addState(new int[]{android.R.attr.state_pressed},shopDrawablePress);  bgStateDrawable.addState(new int[]{},shopDrawableNormal);  return bgStateDrawable;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private static void mergeTables(Hashtable<String,int[]> newTable,Hashtable<String,int[]> mainTable){  for (  String key : mainTable.keySet()) {    int[] values=mainTable.get(key);    int[] newValues=newTable.get(key);    for (int i=0; i < mainTable.get(key).length; ++i) {      values[i]+=newValues[i];    }  }}  }
class C{  public _MergeOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  protected List<List<T>> splitData(Iterable<T> data,int dataSize){  List<List<T>> splits=new ArrayList<>();  int size=(int)Math.ceil((double)dataSize / numFolds);  int current=0;  List<T> l=new ArrayList<>();  for (  T item : data)   l.add(item);  for (int i=0; i < numFolds; i++) {    int start=current;    int end=Math.min(current + size,dataSize);    splits.add(l.subList(start,end));    current=end;  }  return splits;}  }
class C{  private static void rotateActivity(Activity activity){  activity.setRequestedOrientation(activity.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);}  }
class C{  public void initTab(int index){  GridTab mTab=m_tabs.get(index);  if (initTabs.contains(mTab))   return;  mTab.initTab(false);  if (mTab.getLinkColumnName().length() == 0) {    ArrayList<String> parents=mTab.getParentColumnNames();    if (parents.size() == 0)     ; else     if (parents.size() == 1)     mTab.setLinkColumnName((String)parents.get(0)); else {      for (int i=0; i < index; i++) {        GridTab tab=(GridTab)m_tabs.get(i);        String tabKey=tab.getKeyColumnName();        for (int j=0; j < parents.size(); j++) {          String parent=(String)parents.get(j);          if (parent.equals(tabKey)) {            mTab.setLinkColumnName(parent);            break;          }          if (tabKey.equals(""))           for (int k=0; k < tab.getParentColumnNames().size(); k++)           if (parent.equals(tab.getParentColumnNames().get(k))) {            mTab.setLinkColumnName(parent);            break;          }        }      }    }  }  mTab.setLinkColumnName(null);  initTabs.add(mTab);}  }
class C{  public String string() throws IOException {  close();  BytesArray bytesArray=bytes().toBytesArray();  return new String(bytesArray.array(),bytesArray.arrayOffset(),bytesArray.length(),Charsets.UTF_8);}  }
class C{  public static Color reduceColorBrightness(Color color){  int r, g, b;  float[] hsb=new float[3];  r=color.getRed();  g=color.getGreen();  b=color.getBlue();  Color.RGBtoHSB(r,g,b,hsb);  hsb[2]*=0.80f;  hsb[1]*=0.85f;  return Color.getHSBColor(hsb[0],hsb[1],hsb[2]);}  }
class C{  private double countsToHotness(double numCounts){  if (VM.VerifyAssertions)   VM._assert(numCounts <= totalCountsTaken);  return numCounts / totalCountsTaken;}  }
class C{  private void showFootView(){  if (loadmoreView != null) {    loadmoreView.setVisibility(View.VISIBLE);  }}  }
class C{  public void fireConnectionErrorOccured(SQLException ex){  ConnectionEvent event=new ConnectionEvent(this,ex);  for (  ConnectionEventListener listener : connectionEventListeners) {    listener.connectionErrorOccurred(event);  }}  }
class C{  public SessionTracker(Context context,Session.StatusCallback callback,Session session,boolean startTracking){  this.callback=new CallbackWrapper(callback);  this.session=session;  this.receiver=new ActiveSessionBroadcastReceiver();  this.broadcastManager=LocalBroadcastManager.getInstance(context);  if (startTracking) {    startTracking();  }}  }
class C{  @Override public void put(String name,double value){  emulatedFields.put(name,value);}  }
class C{  public void testDefaults() throws Exception {  Similarity sim=getSimilarity("sim3text");  assertEquals(DefaultSimilarity.class,sim.getClass());  ;}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " destination: "+ new Rectangle(dx1,dy1,dx2,dy2)+ " source: "+ new Rectangle(sx1,sy1,sx2,sy2)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);}  }
class C{  public String typeName(){  return "double";}  }
class C{  @Override public boolean handleMouseClick(Point2D.Double p,MouseEvent evt,DrawingView view){  return false;}  }
class C{  public void addElements(final int index,final char a[],final int offset,final int length){  ensureIndex(index);  CharArrays.ensureOffsetLength(a,offset,length);  grow(size + length);  System.arraycopy(this.a,index,this.a,index + length,size - index);  System.arraycopy(a,offset,this.a,index,length);  size+=length;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getResolutionOptions();  }  return null;}  }
class C{  public Pkcs12SignatureToken(String password,String pkcs12FilePath){  this(password.toCharArray(),new File(pkcs12FilePath));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.454 -0500",hash_original_method="CD6FA0D10C84692422449C0C5D320E8A",hash_generated_method="EA2B9D548D02D5504810B69D3A228AC6") public void rewind(){  count=0;}  }
class C{  public boolean isPremptive(){  return isPremptive;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void testForgetAllPeers(){  List<Peer> newPeers=new ArrayList<Peer>();  newPeers.add(randomWifiP2pPeer());  newPeers.add(randomWifiP2pPeer());  newPeers.add(randomWifiP2pPeer());  newPeers.add(newPeers.get(0));  int addedCount=manager.addPeers(newPeers);  manager.forgetAllPeers();  assertEquals("After forgetAllPeers, the peer list is not empty",manager.getPeers().size(),0);}  }
class C{  public final CC skip(){  setSkip(1);  return this;}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      if (usesDefaultDeflater) {        def.end();      }      in.close();    }  finally {      in=null;    }  }}  }
class C{  private void fillList(Node node){  if (node == mRootNode) {    mSearchNodes=new ArrayList<Node>();  } else {    if ((mTagName == null) || node.getNodeName().equals(mTagName)) {      mSearchNodes.add(node);    }  }  node=node.getFirstChild();  while (node != null) {    if (mDeepSearch) {      fillList(node);    } else {      if ((mTagName == null) || node.getNodeName().equals(mTagName)) {        mSearchNodes.add(node);      }    }    node=node.getNextSibling();  }}  }
class C{  public byte[] revisionHash(){  return revHash;}  }
class C{  public CAppendNotOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Append NOT");  m_tree=tree;  m_parent=parent;}  }
class C{  public void onGetCharacteristic(String address,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,int charProps){  if (DBG)   Log.d(TAG,"onGetCharacteristic() - Device=" + address + " UUID="+ charUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service != null) {    service.addCharacteristic(new BluetoothGattCharacteristic(service,charUuid.getUuid(),charInstId,charProps,0));  }}  }
class C{  public void collapsePath(TreePath path){  setExpandedState(path,false);}  }
class C{  public RemoveAction(){  this(null,ID);}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  protected final IStatus unshelve(Shelveset shelveset,final ItemSpec[] itemSpecs,final boolean deleteShelveset,final boolean restoreData,final boolean autoResolveConflicts){  final UnshelveCommand unshelveCommand=new UnshelveCommand(repository,shelveset,itemSpecs,deleteShelveset,autoResolveConflicts);  final ICommandExecutor commandExecutor=getCommandExecutor();  commandExecutor.setCommandFinishedCallback(UICommandFinishedCallbackFactory.getDefaultNoErrorDialogCallback());  final IStatus unshelveStatus=getCommandExecutor().execute(new ResourceChangingCommand(unshelveCommand));  if (!unshelveStatus.isOK()) {    String title;    final String shelveName=shelveset.getName();    if (unshelveStatus.getSeverity() == IStatus.ERROR) {      final String titleFormat=Messages.getString("AbstractUnshelveTask.ErrorUnshelvingFormat");      title=MessageFormat.format(titleFormat,shelveName);    } else {      final String titleFormat=Messages.getString("AbstractUnshelveTask.WarningUnshelvingFormat");      title=MessageFormat.format(titleFormat,shelveName);    }    ErrorDialog.openError(getShell(),title,null,unshelveStatus);    if (unshelveCommand.hasUnresolvedConflicts()) {      final ConflictResolutionTask conflictTask=new ConflictResolutionTask(getShell(),repository,null);      conflictTask.run();    }    return unshelveStatus;  }  shelveset=unshelveCommand.getShelveset();  Check.notNull(shelveset,"shelveset");  final RefreshPendingChangesCommand refreshPendingChangesCommand=new RefreshPendingChangesCommand(repository);  getCommandExecutor().execute(refreshPendingChangesCommand);  if (unshelveCommand.hasConflicts()) {    final ConflictDescription[] conflicts=unshelveCommand.getConflictDescriptions();    final ConflictResolutionTask conflictTask=new ConflictResolutionTask(getShell(),repository,conflicts);    conflictTask.run();  }  if (restoreData) {    PendingChangesHelpers.afterUnshelve(shelveset);  }  CodeMarkerDispatch.dispatch(CODEMARKER_UNSHELVE_FINISHED);  return Status.OK_STATUS;}  }
class C{  private static boolean determineRPTargetMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,List<RPVPlexMigration> potentialMigrations,StringBuffer notSuppReasonBuff,DbClient dbClient){  boolean invalidMigration=false;  if (currentVpool.getProtectionVarraySettings() == null || newVpool.getProtectionVarraySettings() == null || (currentVpool.getProtectionVarraySettings().size() != newVpool.getProtectionVarraySettings().size())) {    notSuppReasonBuff.append("RP Targets are mismatched.");    return true;  }  for (  Map.Entry<String,String> entry : currentVpool.getProtectionVarraySettings().entrySet()) {    String targetVarrayId=entry.getKey();    if (newVpool.getProtectionVarraySettings().containsKey(targetVarrayId)) {      String currentProtectionVarraySettingsId=entry.getValue();      String newProtectionVarraySettingsId=newVpool.getProtectionVarraySettings().get(targetVarrayId);      VpoolProtectionVarraySettings currentProtectionVarraySetting=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(currentProtectionVarraySettingsId));      VpoolProtectionVarraySettings newProtectionVarraySetting=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(newProtectionVarraySettingsId));      String currentTargetVpoolId=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getVirtualPool());      if (currentTargetVpoolId.equals(NullColumnValueGetter.getNullStr())) {        currentTargetVpoolId=currentVpool.getId().toString();      }      VirtualPool currentTargetVpool=dbClient.queryObject(VirtualPool.class,URI.create(currentTargetVpoolId));      String newTargetVpoolId=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getVirtualPool());      if (newTargetVpoolId.equals(NullColumnValueGetter.getNullStr())) {        newTargetVpoolId=newVpool.getId().toString();      }      VirtualPool newTargetVpool=dbClient.queryObject(VirtualPool.class,URI.create(newTargetVpoolId));      if (!currentTargetVpoolId.equals(newTargetVpoolId)) {        if (VirtualPool.vPoolSpecifiesHighAvailability(currentTargetVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newTargetVpool)) {          potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.TARGET,URI.create(targetVarrayId),currentTargetVpool,newTargetVpool));        } else {          notSuppReasonBuff.append("No RP Target migration detected, so RP Target virtual pools must match.");          invalidMigration=true;          break;        }      }      invalidMigration=determineRPTargetJournalMigration(volume,currentTargetVpool,newTargetVpool,potentialMigrations,notSuppReasonBuff,dbClient,currentProtectionVarraySetting,newProtectionVarraySetting,targetVarrayId);      if (invalidMigration) {        break;      }    } else {      notSuppReasonBuff.append("Target virtual arrays do not match.");      invalidMigration=true;      break;    }  }  return invalidMigration;}  }
class C{  private static SelectResults sizeSortedUnion(SelectResults small,SelectResults large,ExecutionContext contextOrNull){  boolean smallModifiable=small.isModifiable() && (isBag(small) || !isBag(large));  boolean largeModifiable=large.isModifiable() && (isBag(large) || !isBag(small));  if (largeModifiable) {    try {      for (Iterator itr=small.iterator(); itr.hasNext(); ) {        Object element=itr.next();        int count=small.occurrences(element);        if (large.occurrences(element) < count) {          large.add(element);        }      }      return large;    } catch (    UnsupportedOperationException e1) {    }  }  if (smallModifiable) {    try {      for (Iterator itr=large.iterator(); itr.hasNext(); ) {        Object element=itr.next();        int count=large.occurrences(element);        if (small.occurrences(element) < count) {          small.add(element);        }      }      return small;    } catch (    UnsupportedOperationException e2) {    }  }  SelectResults rs;  if (contextOrNull != null) {    rs=contextOrNull.isDistinct() ? new ResultsSet(large) : new ResultsBag(large,contextOrNull.getCachePerfStats());  } else {    rs=new ResultsBag(large,null);  }  for (Iterator itr=small.iterator(); itr.hasNext(); ) {    Object element=itr.next();    rs.add(element);  }  return rs;}  }
class C{  public static ExplainCounts countDistributedOperations(Program rtprog){  ExplainCounts counts=new ExplainCounts();  if (OptimizerUtils.isSparkExecutionMode())   Explain.countCompiledInstructions(rtprog,counts,false,true,true); else   Explain.countCompiledInstructions(rtprog,counts,true,true,false);  return counts;}  }
class C{  public NodeActionFilter(int actionMask){  mAction=actionMask;}  }
class C{  public static int computeRow(double tileDelta,double latitude){  int row=(int)Math.floor((latitude + 90) / tileDelta);  if (latitude == 90) {    row-=1;  }  return row;}  }
class C{  public void increment(){  value++;}  }
class C{  static void register(final Object value){  if (value != null) {    final Map<Object,Object> m=getRegistry();    if (m == null) {      REGISTRY.set(new WeakHashMap<Object,Object>());    }    getRegistry().put(value,null);  }}  }
class C{  protected Expression or(int opPos) throws TransformerException {  return compileOperation(new Or(),opPos);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    Key privateKey=keyStore.getKey(alias,password.toCharArray());    Certificate[] certs=keyStore.getCertificateChain(alias);    certs=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(certs));    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("RenameKeyPairAction.NewEntryAlias.Title"),alias);    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    String newAlias=dGetAlias.getAlias();    if (newAlias == null) {      return;    }    if (newAlias.equalsIgnoreCase(alias)) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("RenameKeyPairAction.RenameAliasIdentical.message"),alias),res.getString("RenameKeyPairAction.RenameEntry.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    if (keyStore.containsAlias(newAlias)) {      String message=MessageFormat.format(res.getString("RenameKeyPairAction.OverWriteEntry.message"),newAlias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("RenameKeyPairAction.RenameEntry.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return;      }      keyStore.deleteEntry(newAlias);      newState.removeEntryPassword(newAlias);    }    keyStore.setKeyEntry(newAlias,privateKey,password.toCharArray(),certs);    newState.setEntryPassword(newAlias,new Password(password));    keyStore.deleteEntry(alias);    newState.removeEntryPassword(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public static int[] select(int[] data,int fromIndex,int length){  int[] returnData=new int[length];  System.arraycopy(data,fromIndex,returnData,0,length);  return returnData;}  }
class C{  public boolean isValidated(int[][] split,Object validationData){  return true;}  }
class C{  public static void addOreWeightNether(String ore,int weight){  if (ore.contains("Nether") && OreDictionary.getOres(ore.replace("Nether","")).size() == 0)   return;  oreWeightsNether.put(ore,weight);}  }
class C{  public boolean hasFamilyName(){  return super.hasElement(FamilyName.KEY);}  }
class C{  protected void indexPolygons(InputStream is,long ptr,List<Entry> entries){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  int result;  int shapeType;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int recBufSize=100000;  byte recBuf[]=new byte[recBufSize];  ESRIBoundingBox polyBounds;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Shapefile SpatialIndex Found " + nRecords + " records");          logger.fine("Shapefile SpatialIndex recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        shapeType=readLEInt(recBuf,0);        if (shapeType != SHAPE_TYPE_NULL) {          polyBounds=readBox(recBuf,4);        } else {          polyBounds=new ESRIBoundingBox();        }        ptr+=recLengthBytes + 8;        Entry entry=new Entry(polyBounds.min.x,polyBounds.min.y,polyBounds.max.x,polyBounds.max.y,(int)recOffset);        entries.add(entry);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  private final void locateArtifacts() throws MojoExecutionException {  checkerJar=PathUtils.getFrameworkJar("checker",checkerFrameworkVersion,artifactFactory,artifactResolver,remoteArtifactRepositories,localRepository);  javacJar=PathUtils.getFrameworkJar("compiler",checkerFrameworkVersion,artifactFactory,artifactResolver,remoteArtifactRepositories,localRepository);  final String jdkVersionStr=PluginUtil.getJdkJarPrefix();  jdkJar=PathUtils.getFrameworkJar(jdkVersionStr,checkerFrameworkVersion,artifactFactory,artifactResolver,remoteArtifactRepositories,localRepository);}  }
class C{  void updateDrawerState(@State int activeState,View activeDrawer){  final int leftState=mDragHelper.getViewDragState();  final int state;  if (leftState == STATE_DRAGGING) {    state=STATE_DRAGGING;  } else   if (leftState == STATE_SETTLING) {    state=STATE_SETTLING;  } else {    state=STATE_IDLE;  }  if (activeDrawer != null && activeState == STATE_IDLE) {    final LayoutParams lp=(LayoutParams)activeDrawer.getLayoutParams();    if (lp.onScreen == 0) {      dispatchOnDrawerClosed(activeDrawer);    } else     if (lp.onScreen == 1) {      dispatchOnDrawerOpened(activeDrawer);    }  }  if (state != mDrawerState) {    mDrawerState=state;    if (mListener != null) {      mListener.onDrawerStateChanged(state);    }  }}  }
class C{  public synchronized BaseType createAtomicType(final String name,final int size,final boolean signed) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE02778: Type name can not be null.");  Preconditions.checkArgument(size >= 0,"Size can not be negative.");  final BaseType newType=instantiateType(name,size,signed,null,BaseTypeCategory.ATOMIC);  notifyTypeAdded(newType);  return newType;}  }
class C{  public Object invokeMethod(String methodName){  return getProxyBuilder().invokeMethod(methodName,null);}  }
class C{  @LocalData @Test public void ensureOldValid(){  final TopLevelItem item=j.getInstance().getItem("test-job");  assertThat(item,notNullValue());  final FreeStyleProject project=(FreeStyleProject)item;  final GitHubPRRepository prRepository=project.getAction(GitHubPRRepository.class);  assertThat(project,notNullValue());  assertThat(prRepository.getFullName(),is("KostyaSha-auto/test"));  final Map<Integer,GitHubPRPullRequest> pulls=prRepository.getPulls();  assertThat(pulls.size(),is(1));  final GitHubPRPullRequest pullRequest=pulls.get(1);  assertThat(pullRequest,notNullValue());  assertThat(pullRequest.getTitle(),is("Update README.md"));  assertThat(pullRequest.getHeadRef(),is("KostyaSha-auto-patch-1"));  assertThat(pullRequest.isMergeable(),is(true));  assertThat(pullRequest.getBaseRef(),is("master"));  assertThat(pullRequest.getUserLogin(),is("KostyaSha-auto"));  assertThat(pullRequest.getSourceRepoOwner(),is("KostyaSha-auto"));  assertThat(pullRequest.getLabels(),Matchers.<String>empty());  final GitHubPRTrigger trigger=project.getTrigger(GitHubPRTrigger.class);  assertThat(trigger,notNullValue());  assertThat(trigger.getTriggerMode(),is(CRON));  assertThat(trigger.getEvents(),hasSize(2));  assertThat(trigger.isPreStatus(),is(false));  assertThat(trigger.isCancelQueued(),is(false));  assertThat(trigger.isSkipFirstRun(),is(false));}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  protected GraphMaker createGraphMaker(ResolvedJavaMethod substitute,ResolvedJavaMethod original){  return new GraphMaker(this,substitute,original);}  }
class C{  public ListExpandedStyle(){  internalStyleId(LIST_STYLE);}  }
class C{  static String whichInitiates(String a,String b) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (a == null || b == null) {    return null;  }  if (a.compareTo(b) < 0) {    if (startsWithAOneBit(concatAndHash(a,b))) {      return a;    } else {      return b;    }  } else {    if (startsWithAOneBit(concatAndHash(b,a))) {      return b;    } else {      return a;    }  }}  }
class C{  public RippleDrawableFroyo(@NonNull ColorStateList color,@Nullable Drawable content,@Nullable Drawable mask){  this(new RippleState(null,null,null),null);  if (color == null) {    throw new IllegalArgumentException("RippleDrawable requires a non-null color");  }  if (content != null) {    addLayer(content,null,0,0,0,0,0);  }  if (mask != null) {    addLayer(mask,null,android.R.id.mask,0,0,0,0);  }  background=content;  setColor(color);  ensurePadding();  refreshPadding();  updateLocalState();}  }
class C{  public static void main(String[] args){  String raw="12:58:51.635 DEBUG dsp.fsk.P25MessageFramerinaryMessage message=BinaryMessage.load(raw);  mLog.debug("MSG: " + message.toString());  Trellis_3_4_Rate t=new Trellis_3_4_Rate();  t.decode(message,0,196);  mLog.debug("DEC: " + message.toString());  mLog.debug("Finished!");}  }
class C{  public Vector3D add(Vector3D a){  return (new Vector3D(x + a.x,y + a.y,z + a.z));}  }
class C{  public boolean isWithinRange(InetAddress addr,String category){  for (  NetMask mask : getCategoryRanges(category))   if (mask.isWithinMask(addr))   return true;  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(EPG.getInstance().getTimeTillUpdate());}  }
class C{  public static void sort(int[] keys,int[] values){  hybridsort(keys,values,0,keys.length - 1);}  }
class C{  public final CC sizeGroupX(String s){  hor.setSizeGroup(s);  return this;}  }
class C{  public boolean atEOFOfCurrentStream() throws IOException {  int ch=this.currentReader.pbReader.read();  if (ch < 0) {    return true;  } else {    this.currentReader.pbReader.unread(ch);    return false;  }}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected byte[] binaryToHex(byte[] digest) throws UnsupportedEncodingException {  StringBuffer digestString=new StringBuffer();  for (int i=0; i < digest.length; i++) {    if ((digest[i] & 0x000000ff) < 0x10) {      digestString.append("0" + Integer.toHexString(digest[i] & 0x000000ff));    } else {      digestString.append(Integer.toHexString(digest[i] & 0x000000ff));    }  }  return digestString.toString().getBytes(encoding);}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  private void buildOperationTitle(String title,String anchor,MarkupDocBuilder docBuilder){  if (config.getPathsGroupedBy() == GroupBy.AS_IS) {    docBuilder.sectionTitleWithAnchorLevel2(title,anchor);  } else {    docBuilder.sectionTitleWithAnchorLevel3(title,anchor);  }}  }
class C{  public PidFile(final File file) throws FileNotFoundException {  if (!file.exists() || !file.isFile()) {    throw new FileNotFoundException("Unable to find PID file '" + file + "'");  }  this.pidFile=file;}  }
class C{  @Override public void resetTask(){  super.startExecuting();  this.seeTime=0;  this.attackTime=-1;  this.entity.resetActiveHand();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.user);  ListView userList=(ListView)findViewById(R.id.list);  _adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,_users);  userList.setAdapter(_adapter);}  }
class C{  public final void sendInvite(String nick,String channel){  this.sendRawLine("INVITE " + nick + " :"+ channel);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.ENUM_LITERAL__NAME:    setName((String)newValue);  return;case DatatypePackage.ENUM_LITERAL__DESCRIPTION:setDescription((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Measurements(Properties props){  data=new HashMap<String,OneMeasurement>();  _props=props;  if (_props.getProperty(MEASUREMENT_TYPE,MEASUREMENT_TYPE_DEFAULT).compareTo("histogram") == 0) {    histogram=true;  } else {    histogram=false;  }}  }
class C{  public static <V>PropertyValuesHolder ofObject(Property property,TypeEvaluator<V> evaluator,V... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(property);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public long term(){  return term;}  }
class C{  public static double[][] solve(double[][] A,double[][] B){  final int rows=A.length, cols=A[0].length;  return (rows == cols ? (new LUDecomposition(A,rows,cols)).solve(B) : (new QRDecomposition(A,rows,cols)).solve(B));}  }
class C{  public static double nextDouble(final double startInclusive,final double endInclusive){  Validate.isTrue(endInclusive >= startInclusive,"Start value must be smaller or equal to end value.");  Validate.isTrue(startInclusive >= 0,"Both range values must be non-negative.");  if (startInclusive == endInclusive) {    return startInclusive;  }  return startInclusive + ((endInclusive - startInclusive) * RANDOM.nextDouble());}  }
class C{  public static void deleteAppTrackers(){  if (mTrackers != null && mTrackers.containsKey(TRACKER_APP)) {    Timber.d("Removing GA app tracker.");    mTrackers.remove(TRACKER_APP);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.506 -0500",hash_original_method="184BC201174779D42A7717E3FD838DBA",hash_generated_method="CA32CE77C096EB5AB9DD622B33FBFAE8") public static ProgramStore BLEND_ALPHA_DEPTH_TEST(RenderScript rs){  if (rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.LESS);    builder.setBlendFunc(BlendSrcFunc.SRC_ALPHA,BlendDstFunc.ONE_MINUS_SRC_ALPHA);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(true);    rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST=builder.create();  }  return rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST;}  }
class C{  public GridItemView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.mdGridItemViewStyle);}  }
class C{  private void updateStateTextView(String stateText,boolean displayState){  String text=mOtherMember.getName();  if (!TextUtils.isEmpty(stateText) && displayState) {    text+=" (" + stateText + ")";  }  mCallStateTextView.setText(text);}  }
class C{  public Point2D translateToTrueArenaCoords(Point2D point){  final double dpiScaleFactor=ShootOFFController.getDpiScaleFactorForScreen();  final Point2D origin=arenaPane.getArenaScreenOrigin();  return new Point2D(origin.getX() + (point.getX() * dpiScaleFactor),origin.getY() + (point.getY() * dpiScaleFactor));}  }
class C{  public void addException(Date exceptionDate){  addException(getTime(exceptionDate));}  }
class C{  public Tasks<BlockSnapshotRestRep> createForConsistencyGroup(URI consistencyGroupId,BlockConsistencyGroupSnapshotCreate input){  return postTasks(input,getByConsistencyGroupUrl(),consistencyGroupId);}  }
class C{  public void removeElementAt(int i){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeElementAt(i);}  }
class C{  public boolean equals(final Object obj){  return this == obj || obj instanceof ArtifactCoordinates && equals((ArtifactCoordinates)obj);}  }
class C{  long length(){  return length;}  }
class C{  private Connection handleNewPendingConnection(DistributedMember id,boolean sharedResource,boolean preserveOrder,Map m,PendingConnection pc,long startTime,long ackThreshold,long ackSAThreshold) throws IOException, DistributedSystemDisconnectedException {  Connection con=null;  try {    con=Connection.createSender(owner.getMembershipManager(),this,preserveOrder,id,sharedResource,startTime,ackThreshold,ackSAThreshold);    this.owner.stats.incSenders(sharedResource,preserveOrder);  }  finally {    if (con == null) {      this.owner.stats.incFailedConnect();synchronized (m) {        Object rmObj=m.remove(id);        if (rmObj != pc && rmObj != null) {          m.put(id,rmObj);        }      }      pc.notifyWaiters(null);    }  }synchronized (m) {    Object e=m.get(id);    if (e == pc) {      m.put(id,con);    } else     if (e == null) {      con.requestClose(LocalizedStrings.ConnectionTable_PENDING_CONNECTION_CANCELLED.toLocalizedString());      con=null;    } else {      if (e instanceof Connection) {        Connection newCon=(Connection)e;        if (!newCon.connected) {          if (con != null) {            con.requestClose(LocalizedStrings.ConnectionTable_PENDING_CONNECTION_CLOSED.toLocalizedString());            con=null;          }        } else {          if (con != null) {            con.requestClose(LocalizedStrings.ConnectionTable_SOMEONE_ELSE_CREATED_THE_CONNECTION.toLocalizedString());          }          con=newCon;        }      }    }  }  pc.notifyWaiters(con);  if (con != null && logger.isDebugEnabled()) {    logger.debug("handleNewPendingConnection {} myAddr={} theirAddr={}",con,getConduit().getLocalAddress(),con.remoteAddr);  }  return con;}  }
class C{  public void deteriorate(){  double propabilityForMeanExp=Rand.propabilityForMeanExp(MEAN_LIFETIME / 300 * this.getAttackRate());  if (Rand.flipCoin(propabilityForMeanExp) && getDeterioration() <= MAX_DETERIORATION) {    Logger.getLogger(getClass()).debug("The item" + this.getName() + "deteriorated from "+ this.getDeterioration()+ ".");  } else {    Logger.getLogger(getClass()).debug("The item" + this.getName() + "did not deteriorate from "+ this.getDeterioration()+ ".");  }}  }
class C{  public static double distancePointLine(Coordinate p,Coordinate A,Coordinate B){  if (A.x == B.x && A.y == B.y)   return p.distance(A);  double len2=(B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);  double r=((p.x - A.x) * (B.x - A.x) + (p.y - A.y) * (B.y - A.y)) / len2;  if (r <= 0.0)   return p.distance(A);  if (r >= 1.0)   return p.distance(B);  double s=((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2;  return Math.abs(s) * Math.sqrt(len2);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node commentNode;  NodeList nodeList;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("hc_staff",false);  nodeList=doc.getChildNodes();  for (int indexN10043=0; indexN10043 < nodeList.getLength(); indexN10043++) {    commentNode=(Node)nodeList.item(indexN10043);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      attrList=commentNode.getAttributes();      assertNull("existingCommentAttributesNull",attrList);    }  }  commentNode=doc.createComment("This is a comment");  attrList=commentNode.getAttributes();  assertNull("createdCommentAttributesNull",attrList);}  }
class C{  public boolean exists(){  return indexManager.getResourceLocator().locate(namespace,ITx.UNISOLATED) != null;}  }
class C{  private static Pair<List<ICallgraphNode>,Map<Integer,CCallgraphNode>> loadNodes(final CConnection connection,final int callgraphId,final Collection<INaviFunction> functions) throws SQLException {  final Map<IAddress,INaviFunction> functionMap=getFunctionMap(functions);  final List<ICallgraphNode> nodes=new ArrayList<ICallgraphNode>();  final String nodeQuery="SELECT nodes.id, function FROM " + CTableNames.NODES_TABLE + " AS nodes JOIN "+ CTableNames.FUNCTION_NODES_TABLE+ " AS function_nodes ON nodes.id = function_nodes.node_id WHERE nodes.view_id = "+ callgraphId;  final ResultSet nodeResult=connection.executeQuery(nodeQuery,true);  final HashMap<Integer,CCallgraphNode> nodeMap=new HashMap<Integer,CCallgraphNode>();  try {    while (nodeResult.next()) {      final int nodeId=nodeResult.getInt("id");      final IAddress functionAddress=PostgreSQLHelpers.loadAddress(nodeResult,"function");      final INaviFunction function=functionMap.get(functionAddress);      final CCallgraphNode cgnode=new CCallgraphNode(function);      nodeMap.put(nodeId,cgnode);      nodes.add(cgnode);    }  }  finally {    nodeResult.close();  }  return new Pair<List<ICallgraphNode>,Map<Integer,CCallgraphNode>>(nodes,nodeMap);}  }
class C{  @Override public void contextInitialized(ServletContextEvent servletContextEvent){  super.contextInitialized(servletContextEvent);  ServletContext servletContext=servletContextEvent.getServletContext();  RemotingServlet remotingServlet=new RemotingServlet();  try {    remotingServlet.init(new CubaServletConfig("remoting",servletContext));  } catch (  ServletException e) {    throw new RuntimeException("An error occurred while initializing remoting servlet",e);  }  ServletRegistration.Dynamic remotingReg=servletContext.addServlet("remoting",remotingServlet);  remotingReg.addMapping("/remoting/*");  remotingReg.setLoadOnStartup(0);  FilterRegistration.Dynamic filterReg=servletContext.addFilter("CoreSingleWarHttpFilter",new SetClassLoaderFilter());  filterReg.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),false,"/remoting/*");}  }
class C{  @Override public TestSolution checkAttributeOnlyContainsNonAlphanumericCharacters(String attributeContent,Node workingElement,TestSolution testSolution,String remarkMessage){  processRemarkService.addEvidenceElement("href");  if (NON_ALPHANUMERIC_PATTERN.matcher(attributeContent).matches()) {    addSourceCodeRemark(testSolution,workingElement,remarkMessage,attributeContent);    return testSolution;  } else {    return TestSolution.PASSED;  }}  }
class C{  private <T>MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type,Errors errors) throws ErrorsException {  int numErrorsBefore=errors.size();  Set<InjectionPoint> injectionPoints;  try {    injectionPoints=InjectionPoint.forInstanceMethodsAndFields(type);  } catch (  ConfigurationException e) {    errors.merge(e.getErrorMessages());    injectionPoints=e.getPartialValue();  }  List<SingleMemberInjector> injectors=getInjectors(injectionPoints,errors);  errors.throwIfNewErrors(numErrorsBefore);  EncounterImpl<T> encounter=new EncounterImpl<>(errors,injector.lookups);  for (  TypeListenerBinding typeListener : typeListenerBindings) {    if (typeListener.getTypeMatcher().matches(type)) {      try {        typeListener.getListener().hear(type,encounter);      } catch (      RuntimeException e) {        errors.errorNotifyingTypeListener(typeListener,type,e);      }    }  }  encounter.invalidate();  errors.throwIfNewErrors(numErrorsBefore);  return new MembersInjectorImpl<>(injector,type,encounter,injectors);}  }
class C{  public void write(File file,Integer indent) throws TransformerException, IOException {  write(file,indent,null);}  }
class C{  public void keyReleased(GraphicsNodeKeyEvent evt){  dispatchKeyboardEvent("keyup",evt);  isDown=false;}  }
class C{  public void logSummary(){  final String message=totalFoundErrors == 0 ? "No lint errors found." : String.format("Found %s errors in %s files.",totalFoundErrors,totalResourcesWithErrors);  log.info("----------------------------------------");  log.info(String.format("Total resources: %s",totalResources));  log.info(message);  log.info("----------------------------------------\n");}  }
class C{  public String removeConfig(String key){  return this.config.remove(key);}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  public static void slideInFromBottomAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){  alphaAnimator(animators,view,0f);  animators.add(ObjectAnimator.ofFloat(view,"translationY",recyclerView.getMeasuredHeight() >> 1,0));  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added BOTTOM Animator");}  }
class C{  private void computeTaintInfoForMethodFieldRefs(MethodOrMethodContext methodContext,Map<String,Set<CallLocationModel>> methodMap){  for (  Unit unit : methodContext.method().getActiveBody().getUnits()) {    Stmt stmt=(Stmt)unit;    if (stmt.containsFieldRef()) {      FieldRef fieldRef=stmt.getFieldRef();      String fieldName=fieldRef.getField().getName();      if (!fieldName.contains("$") && !fieldName.startsWith(UnmodeledGeneratedClasses.DUMMY_FIELD_PREFIX)) {        String name=fieldRefToString(fieldRef);        if (!name.startsWith("$") && !name.startsWith("_$")) {          String origName=name.replaceFirst("#\\d+","");          Set<CallLocationModel> vals=getTaints(methodContext,fieldRef);          if (!vals.isEmpty()) {            Set<CallLocationModel> infoVals=methodMap.get(origName);            if (infoVals == null) {              infoVals=new TreeSet<CallLocationModel>();              methodMap.put(origName,infoVals);            }            infoVals.addAll(vals);          }        }      }    }  }}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  if (!isVisible()) {    AxisState state=new AxisState(cursor);    List ticks=refreshTicks(g2,state,dataArea,edge);    state.setTicks(ticks);    return state;  }  AxisState state=drawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  createAndAddEntity(cursor,state,dataArea,edge,plotState);  return state;}  }
class C{  public boolean matchInetNetwork(InetAddress ip){  boolean sameNet=false;  for (Iterator<InetNetwork> iter=networks.iterator(); (!sameNet) && iter.hasNext(); ) {    InetNetwork network=iter.next();    sameNet=network.contains(ip);  }  return sameNet;}  }
class C{  public String toString(){  return "[" + x + ", "+ y+ ", "+ z+ "]";}  }
class C{  public boolean jimplify(cp_info constant_pool[],int this_class,BootstrapMethods_attribute bootstrap_methods_attribute,JimpleBody listBody){  this.bootstrap_methods_attribute=bootstrap_methods_attribute;  Util.v().setClassNameToAbbreviation(new HashMap());  Chain units=listBody.getUnits();  this.listBody=listBody;  this.units=units;  instructionToFirstStmt=new HashMap<Instruction,Stmt>();  instructionToLastStmt=new HashMap<Instruction,Stmt>();  jmethod=listBody.getMethod();  cm=Scene.v();  Set initialLocals=new ArraySet();  List parameterTypes=jmethod.getParameterTypes();{    Code_attribute ca=method.locate_code_attribute();    LocalVariableTable_attribute la=ca.findLocalVariableTable();    LocalVariableTypeTable_attribute lt=ca.findLocalVariableTypeTable();    Util.v().activeVariableTable=la;    Util.v().activeVariableTypeTable=lt;    Util.v().activeConstantPool=constant_pool;    Type thisType=RefType.v(jmethod.getDeclaringClass().getName());    boolean isStatic=Modifier.isStatic(jmethod.getModifiers());    int currentLocalIndex=0;{      if (!isStatic) {        String name;        if (!Util.v().useFaithfulNaming || la == null)         name="l0"; else {          name=la.getLocalVariableName(constant_pool,currentLocalIndex);          if (!Util.v().isValidJimpleName(name))           name="l0";        }        Local local=Jimple.v().newLocal(name,UnknownType.v());        local.setIndex(0);        listBody.getLocals().add(local);        currentLocalIndex++;        units.add(Jimple.v().newIdentityStmt(local,Jimple.v().newThisRef(jmethod.getDeclaringClass().getType())));      }    }{      Iterator typeIt=parameterTypes.iterator();      int argCount=0;      while (typeIt.hasNext()) {        String name;        Type type=(Type)typeIt.next();        if (!Util.v().useFaithfulNaming || la == null)         name="l" + currentLocalIndex; else {          name=la.getLocalVariableName(constant_pool,currentLocalIndex);          if (!Util.v().isValidJimpleName(name))           name="l" + currentLocalIndex;        }        Local local=Jimple.v().newLocal(name,UnknownType.v());        local.setIndex(currentLocalIndex);        initialLocals.add(local);        listBody.getLocals().add(local);        units.add(Jimple.v().newIdentityStmt(local,Jimple.v().newParameterRef(type,argCount)));        if (type.equals(DoubleType.v()) || type.equals(LongType.v())) {          currentLocalIndex+=2;        } else {          currentLocalIndex+=1;        }        argCount++;      }    }    Util.v().resetEasyNames();  }  jimplify(constant_pool,this_class);  return true;}  }
class C{  public URI(String nuri) throws MalformedURIException {  uri=nuri;  colonLocation=nuri.indexOf(':');  fragmentLocation=URIClassifier.getFragmentLocation(nuri);  if (colonLocation == -1 || colonLocation > fragmentLocation || colonLocation == 0)   throw new MalformedURIException("No scheme in URI \"" + uri + "\"",uri);}  }
class C{  private void addUnsolicited() throws NamingException {  if (debug) {    System.out.println("LdapCtx.addUnsolicited: " + this);  }  ensureOpen();synchronized (eventSupport) {    clnt.addUnsolicited(this);    unsolicited=true;  }}  }
class C{  private VisorQueryResult nextSqlPage(IgniteBiTuple<String,Integer> arg){  long start=U.currentTimeMillis();  ConcurrentMap<String,VisorQueryCursor<List<?>>> storage=ignite.cluster().nodeLocalMap();  String qryId=arg.get1();  VisorQueryCursor<List<?>> cur=storage.get(qryId);  if (cur == null)   throw new IgniteException("SQL query results are expired.");  List<Object[]> nextRows=VisorQueryUtils.fetchSqlQueryRows(cur,arg.get2());  boolean hasMore=cur.hasNext();  if (hasMore)   cur.accessed(true); else {    storage.remove(qryId);    cur.close();  }  return new VisorQueryResult(nextRows,hasMore,U.currentTimeMillis() - start);}  }
class C{  protected String metaOption(){  return "\tFull name of meta classifier, followed by options.\n" + "\t(default: \"weka.classifiers.rules.Zero\")";}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  if (caretLineY > -1) {    g.setColor(getCaretMarkerColor());    g.fillRect(0,caretLineY,getWidth(),2);  }}  }
class C{  private Rectangle2D[] splitVerticalBar(RectangularShape bar,double a,double b,double c){  Rectangle2D[] result=new Rectangle2D[4];  double x0=bar.getMinX();  double x1=Math.rint(x0 + (bar.getWidth() * a));  double x2=Math.rint(x0 + (bar.getWidth() * b));  double x3=Math.rint(x0 + (bar.getWidth() * c));  result[0]=new Rectangle2D.Double(bar.getMinX(),bar.getMinY(),x1 - x0,bar.getHeight());  result[1]=new Rectangle2D.Double(x1,bar.getMinY(),x2 - x1,bar.getHeight());  result[2]=new Rectangle2D.Double(x2,bar.getMinY(),x3 - x2,bar.getHeight());  result[3]=new Rectangle2D.Double(x3,bar.getMinY(),bar.getMaxX() - x3,bar.getHeight());  return result;}  }
class C{  public KeepAliveFilter(KeepAliveMessageFactory messageFactory,IdleStatus interestedIdleStatus,KeepAliveRequestTimeoutHandler policy,int keepAliveRequestInterval,int keepAliveRequestTimeout){  if (messageFactory == null) {    throw new IllegalArgumentException("messageFactory");  }  if (interestedIdleStatus == null) {    throw new IllegalArgumentException("interestedIdleStatus");  }  if (policy == null) {    throw new IllegalArgumentException("policy");  }  this.messageFactory=messageFactory;  this.interestedIdleStatus=interestedIdleStatus;  requestTimeoutHandler=policy;  setRequestInterval(keepAliveRequestInterval);  setRequestTimeout(keepAliveRequestTimeout);}  }
class C{  private ElementsOrAttributes(int flags){  this.flags=flags;}  }
class C{  public Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    return new Solution(initial,goal);  }  INodeSet open=StateStorageFactory.create(StateStorageFactory.QUEUE);  open.insert(initial.copy());  INodeSet closed=StateStorageFactory.create(closedStorage);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      numMoves++;      if (closed.contains(successor) != null) {        continue;      }      successor.storedData(new Transition(move,n));      if (successor.equals(goal)) {        numOpen=open.size();        numClosed=closed.size();        return new Solution(initial,successor);      }      open.insert(successor);    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,false);}  }
class C{  EnumVerticalRotation(int index,String name,EnumFacing facing,int numRotations){  this.index=index;  this.name=name;  this.facing=facing;  this.angle=numRotations * Math.toRadians(90);}  }
class C{  public boolean hasMainIngredient(){  return mainIngredient.size() > 0;}  }
class C{  public MapObject(Object id,Drawable drawable,int x,int y,boolean isTouchable,boolean isScalable){  this(id,drawable,x,y,0,0,isTouchable,isScalable);}  }
class C{  private static JFreeChart createBarChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createBarChart("Bar Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  public CoalesceExpression(){}  }
class C{  public Property minuteOfDay(){  return new Property(this,getChronology().minuteOfDay());}  }
class C{  private CompletableFuture<Connection> connect(){  if (selector.state() == AddressSelector.State.RESET && connection != null) {    if (connectFuture != null)     return connectFuture;    CompletableFuture<Connection> future=new CompletableFuture<>();    connectFuture=future;    connection.close().whenComplete(null);    return connectFuture.whenComplete(null);  }  if (connection != null)   return CompletableFuture.completedFuture(connection);  if (connectFuture != null)   return connectFuture;  connectFuture=new CompletableFuture<>();  connect(connectFuture);  return connectFuture.whenComplete(null);}  }
class C{  public static Integer parseInteger(JTextField tField){  try {    String text=tField.getText().replaceFirst("\\s+","");    return SimbrainConstants.LOCAL_FORMATTER.parse(text).intValue();  } catch (  NullPointerException|NumberFormatException|ParseException ex) {    return null;  }}  }
class C{  public Boolean isFixed(){  return fixed;}  }
class C{  public boolean match(String search,int i){  return match(new StringCharacterIterator(search),i);}  }
class C{  public static <T extends VerifiableEntity>Deserializer roundtripVerifiableEntity(final T originalEntity,final Account deserializedSigner){  final MockAccountLookup accountLookup=new MockAccountLookup();  accountLookup.setMockAccount(deserializedSigner);  return roundtripVerifiableEntity(originalEntity,accountLookup);}  }
class C{  public void showUnusualMapInfo(int bytesPerMap){  VM.sysWrite("-------------------------------------------------\n");  VM.sysWriteln("     numberUnusualMaps = ",numberUnusualMaps);  for (int i=0; i < numberUnusualMaps; i++) {    VM.sysWrite("-----------------\n");    VM.sysWrite("Unusual map #",i);    VM.sysWrite(":\n");    unusualMaps[i].showInfo();    VM.sysWrite("    -- reference Map:   ");    showAnUnusualMap(unusualMaps[i].getReferenceMapIndex(),bytesPerMap);    VM.sysWrite("\n");    VM.sysWrite("    -- non-reference Map:   ");    showAnUnusualMap(unusualMaps[i].getNonReferenceMapIndex(),bytesPerMap);    VM.sysWrite("\n");    VM.sysWrite("    -- returnAddress Map:   ");    showAnUnusualMap(unusualMaps[i].getReturnAddressMapIndex(),bytesPerMap);    VM.sysWrite("\n");  }  VM.sysWrite("------ extraUnusualMap:   ");  extraUnusualMap.showInfo();  showAnUnusualMap(extraUnusualMap.getReferenceMapIndex(),bytesPerMap);  showAnUnusualMap(extraUnusualMap.getNonReferenceMapIndex(),bytesPerMap);  showAnUnusualMap(extraUnusualMap.getReturnAddressMapIndex(),bytesPerMap);  VM.sysWrite("\n");}  }
class C{  static byte[] createBuffer(){  return new byte[8192];}  }
class C{  public Year(int year){  if ((year < Year.MINIMUM_YEAR) || (year > Year.MAXIMUM_YEAR)) {    throw new IllegalArgumentException("Year constructor: year (" + year + ") outside valid range.");  }  this.year=(short)year;  peg(Calendar.getInstance());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private boolean crossVariables(InferenceVariable inferenceVariable,List<PsiType> upperBounds,List<PsiType> lowerBounds,InferenceBound inferenceBound){  final InferenceBound oppositeBound=inferenceBound == InferenceBound.LOWER ? InferenceBound.UPPER : InferenceBound.LOWER;  boolean result=false;  for (  PsiType upperBound : upperBounds) {    final InferenceVariable inferenceVar=mySession.getInferenceVariable(upperBound);    if (inferenceVar != null && inferenceVariable != inferenceVar) {      for (      PsiType lowerBound : lowerBounds) {        result|=inferenceVar.addBound(lowerBound,inferenceBound);      }      for (      PsiType varUpperBound : inferenceVar.getBounds(oppositeBound)) {        result|=inferenceVariable.addBound(varUpperBound,oppositeBound);      }    }  }  return result;}  }
class C{  private void assertWriteLimit(int newWrPos) throws IllegalArgumentException {  int spaceReq;  int availSpace=getWriteRemaining();  if (newWrPos < write_pos) {    spaceReq=newWrPos + (array.length - write_pos);  } else {    spaceReq=newWrPos - write_pos;  }  if (spaceReq > availSpace) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int octetSort(int i1,int i2){  int[] ints1=ViewUtils.toInts(i1);  int[] ints2=ViewUtils.toInts(i2);  for (int i=0; i < 4; i++) {    if (ints1[i] < ints2[i]) {      return -1;    }  }  return 0;}  }
class C{  @Override public int read() throws IOException {  return m_InputStream.read();}  }
class C{  public void openThriftWriter(String filePath) throws IOException {  thriftWriter=new ThriftWriter(filePath,true);  thriftWriter.open();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void findModelClasses() throws MojoExecutionException {  try {    log.debug("Finding model classes.");    modelClasses=new HashSet<>();    for (    Resource resource : ResourceUtils.getResources(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(SystemPropertyUtils.resolvePlaceholders(modelJavaPackage)) + "/**/*.class")) {      if (resource.isReadable()) {        MetadataReader metadataReader=new CachingMetadataReaderFactory(new PathMatchingResourcePatternResolver()).getMetadataReader(resource);        Class<?> clazz=Class.forName(metadataReader.getClassMetadata().getClassName());        modelClasses.add(clazz);        log.debug("Found model class \"" + clazz.getName() + "\".");        if (clazz.getSimpleName().equals(modelErrorClassName)) {          log.debug("Found model error class \"" + clazz.getName() + "\".");          modelErrorClass=clazz;        }      }    }  } catch (  IOException|ClassNotFoundException e) {    throw new MojoExecutionException("Error finding model classes. Reason: " + e.getMessage(),e);  }}  }
class C{  public CongestionInfo(Scenario scenario){  this.scenario=scenario;  currentTimeBinEndTime=timeBinSize;}  }
class C{  public void destroy(){  Debug.message("app","OpenMapApplet.destroy()");  super.destroy();}  }
class C{  public static void addSentenceEmotesMeta(Vertex question,Vertex answer,String emotes,Network network){  if (emotes == null || emotes.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.EMOTION,network);  } else {    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.internalRemoveRelationships(Primitive.EMOTION);      List<String> words=Utils.getWords(emotes);      for (      String emote : words) {        EmotionalState.valueOf(emote.toUpperCase()).apply(meta);      }    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.internalRemoveRelationships(Primitive.EMOTION);          List<String> words=Utils.getWords(emotes);          for (          String emote : words) {            EmotionalState.valueOf(emote.toUpperCase()).apply(meta);          }        }      }    }  }}  }
class C{  public static synchronized int insertProviderAt(Provider provider,int position){  int size=providers.size();  if ((position < 1) || (position > size)) {    position=size + 1;  }  providers.add(position - 1,provider);  providersNames.put(provider.getName(),provider);  setNeedRefresh();  return position;}  }
class C{  private void initializeId(EntryEventImpl event){  this.id=event.getEventId();  if (this.id == null) {    throw new IllegalStateException(LocalizedStrings.GatewayEventImpl_NO_EVENT_ID_IS_AVAILABLE_FOR_THIS_GATEWAY_EVENT.toLocalizedString());  }}  }
class C{  public void initFromIds(ArrayList<Long> cellIds){  initRawIds(cellIds);  normalize();}  }
class C{  public void parseDmozFile(File dmozFile,int subsetDenom,boolean includeAdult,int skew,Pattern topicPattern,boolean snippet) throws IOException, SAXException, ParserConfigurationException {  SAXParserFactory parserFactory=SAXParserFactory.newInstance();  SAXParser parser=parserFactory.newSAXParser();  XMLReader reader=parser.getXMLReader();  RDFProcessor rp=new RDFProcessor(reader,subsetDenom,includeAdult,skew,topicPattern,snippet);  reader.setContentHandler(rp);  reader.setErrorHandler(rp);  LOG.info("skew = " + rp.hashSkew);  XMLCharFilter in=new XMLCharFilter(new BufferedReader(new InputStreamReader(new BufferedInputStream(new FileInputStream(dmozFile)),"UTF-8")));  try {    InputSource is=new InputSource(in);    reader.parse(is);  } catch (  Exception e) {    if (LOG.isErrorEnabled()) {      LOG.error("Failed to retieve the InputSource: ",e.toString());    }    System.exit(0);  } finally {    in.close();  }}  }
class C{  private boolean isIndexable(String term){  return (term.length() < 30) && (term.length() > 2);}  }
class C{  @Override public void clear(){  size=0;  list=null;}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Double(m_val));  return m_obj;}  }
class C{  public void refresh(){}  }
class C{  @Override final public long rangeCountExactWithDeleted(final byte[] fromKey,final byte[] toKey){  final LongAggregator handler=new LongAggregator();  final RangeCountProcedure proc=new RangeCountProcedure(true,true,fromKey,toKey);  submit(fromKey,toKey,proc,handler);  return handler.getResult();}  }
class C{  public String convertRelationalOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void sort(Attribute att){  sort(att.index());}  }
class C{  public boolean checkUpdateAfterCondition(EventBean[] newEvents,StatementContext statementContext){  return isAfterConditionSatisfied || checkAfterCondition(newEvents == null ? 0 : newEvents.length,statementContext);}  }
class C{  public boolean hasKilled(final String name){  return killRec.hasKilled(name);}  }
class C{  public static Range scale(Range base,double factor){  ParamChecks.nullNotPermitted(base,"base");  if (factor < 0) {    throw new IllegalArgumentException("Negative 'factor' argument.");  }  return new Range(base.getLowerBound() * factor,base.getUpperBound() * factor);}  }
class C{  public SPEA2(Problem problem,Initialization initialization,Variation variation,int numberOfOffspring,int k){  super(problem,new Population(),null,initialization);  this.variation=variation;  this.numberOfOffspring=numberOfOffspring;  fitnessEvaluator=new StrengthFitnessEvaluator(k);  fitnessComparator=new FitnessComparator(fitnessEvaluator.areLargerValuesPreferred());  selection=new TournamentSelection(fitnessComparator);}  }
class C{  public void test_syntax_update_bad_10() throws MalformedQueryException {  final String query="DELETE WHERE { _:a <:p> <:o> }";  negativeTest(query);}  }
class C{  public boolean isBOM(){  return m_isBOM;}  }
class C{  public void readFully(byte[] b,int off,int len){  if (SysProperties.CHECK && (len < 0 || len % Constants.FILE_BLOCK_SIZE != 0)) {    DbException.throwInternalError("unaligned read " + fileName + " len "+ len);  }  try {    FileUtils.readFully(file,ByteBuffer.wrap(b,off,len));  } catch (  IOException e) {    throw DbException.convertIOException(e,fileName);  }}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  public static boolean isStatic(int flags){  return (flags & AccStatic) != 0;}  }
class C{  private final boolean shouldProposeGenerics(){  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean registerDevice(String uid,String key,String username) throws DataAccessException {  DeviceInfo device=getDeviceInfo(uid);  if (device != null && !username.equals(device.getUsername())) {    return false;  }  storeDevice(uid,key,username);  return true;}  }
class C{  public Lambda(Node node,String[] variableNames,Class<?>[] variableTypes){  super(node.getReturnType(),variableTypes);  this.node=node;  this.variableNames=variableNames;  if (!node.isValid()) {    throw new IllegalArgumentException("lambda function is not valid");  }}  }
class C{  @Override public boolean init(final IScope scope){  if (!getSpecies().isInitOverriden()) {    _init_(scope);  } else {    scope.execute(getSpecies().getAction(ISpecies.initActionName),this,null);  }  return !scope.interrupted();}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  protected void closeCDATA() throws org.xml.sax.SAXException {  try {    m_writer.write(CDATA_DELIMITER_CLOSE);    m_cdataTagOpen=false;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public int[] time2LMST(long time){  int[] result=new int[4];  long marsTime=Math.round((time - epoch) / 1000f / toEarth);  result[0]=(int)(marsTime / (secondsInADay));  marsTime=(int)(marsTime % secondsInADay);  result[1]=Math.abs((int)(marsTime / secondsInAnHr));  marsTime=(int)(marsTime % secondsInAnHr);  result[2]=Math.abs((int)(marsTime / secondsInAMin));  result[3]=Math.abs((int)(marsTime % secondsInAMin));  return (result);}  }
class C{  public void receiveNotification(SipRequest notify,long timestamp) throws PayloadException {  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("New conference event notification received");  }  byte[] content=notify.getContentBytes();  if (content != null) {    try {      InputSource pidfInput=new InputSource(new ByteArrayInputStream(content));      ConferenceInfoParser confParser=new ConferenceInfoParser(pidfInput).parse();      ConferenceInfoDocument conference=confParser.getConferenceInfo();      if (conference != null) {        int maxParticipants=conference.getMaxUserCount();        if (maxParticipants > 0) {          if (logActivated) {            sLogger.debug("Set max number of participants to " + maxParticipants);          }          mSession.setMaxParticipants(maxParticipants);        }        Map<ContactId,ParticipantStatus> participants=new HashMap<ContactId,ParticipantStatus>();        Vector<User> users=conference.getUsers();        for (        User user : users) {          String phonenumber=user.getEntity();          ContactId contact;          PhoneNumber validPhoneNumber=ContactUtil.getValidPhoneNumberFromUri(phonenumber);          if (validPhoneNumber != null) {            contact=ContactUtil.createContactIdFromValidatedData(validPhoneNumber);          } else {            continue;          }          if (logActivated) {            sLogger.debug("Conference info notification for " + contact);          }          if (user.isMe() || contact.equals(ImsModule.getImsUserProfile().getUsername())) {            continue;          }          if (logActivated) {            sLogger.debug("User conference info: " + user);          }          participants.put(contact,getStatus(user));        }        if (!participants.isEmpty()) {          updateParticipantStatus(participants,timestamp);        }      }    } catch (    ParserConfigurationException e) {      throw new PayloadException("Can't parse XML notification",e);    }catch (    SAXException e) {      throw new PayloadException("Can't parse XML notification",e);    }catch (    ParseFailureException e) {      throw new PayloadException("Can't parse XML notification",e);    }  }  SubscriptionStateHeader stateHeader=(SubscriptionStateHeader)notify.getHeader(SubscriptionStateHeader.NAME);  if ((stateHeader != null) && stateHeader.getState().equalsIgnoreCase("terminated")) {    if (logActivated) {      sLogger.info("Conference event subscription has been terminated by server");    }    terminatedByServer();  }}  }
class C{  protected void relaxNode(final Node outNode,final Node toNode,final PseudoRemovePriorityQueue<Node> pendingNodes,final Person person,final Vehicle vehicle,int itID,Map<Id<Node>,DijkstraNodeData> nodeData){  DijkstraNodeData outData=getData(outNode,nodeData);  double currTime=outData.getTime();  double currCost=outData.getCost();  for (  Link l : outNode.getOutLinks().values()) {    relaxNodeLogic(l,pendingNodes,currTime,currCost,toNode,null,person,vehicle,itID,nodeData);  }}  }
class C{  @Interruptible public static void printStatsXml(){  Xml.begin();  Options.set.logXml();  VM.config.printConfigXml();  if (Options.printPhaseStats.getValue())   printPhasesXml();  printTotalsXml();  Xml.end();}  }
class C{  private void drawScaleMarks(Graphics2D g){  Envelope viewEnv=viewport.getViewEnv();  int viewMag=maxVisibleMagnitude();  double gridIncModel=Math.pow(10.0,viewMag);  double gridIncView=viewport.toView(gridIncModel);  if (3 * gridIncView > viewEnv.maxExtent()) {    gridIncView/=10.0;    viewMag-=1;  }  g.setColor(Color.BLACK);  double tickX=viewport.getWidthInView() - gridIncView;  int viewHeight=(int)viewport.getHeightInView();  while (tickX > 0) {    g.draw(new Line2D.Double(tickX,viewHeight + 1,tickX,viewHeight - TICK_LEN));    tickX-=gridIncView;  }  double tickY=viewport.getHeightInView() - gridIncView;  int viewWidth=(int)viewport.getWidthInView();  while (tickY > 0) {    g.draw(new Line2D.Double(viewWidth + 1,tickY,viewWidth - TICK_LEN,tickY));    tickY-=gridIncView;  }  g.drawString("10",viewWidth - 35,viewHeight - 1);  g.drawString(viewMag + "",viewWidth - 20,viewHeight - 8);}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  StackPane stateView=new StackPane();  stateViewCtrl=new EightPuzzleViewCtrl(stateView);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(stateView);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  return root;}  }
class C{  private void addToBuffer(String s){  if (bufferIndex < MESSAGE_BUFFER_SIZE) {    bufferIndex+=VM.strings.copyStringToChars(s,buffer,bufferIndex,MESSAGE_BUFFER_SIZE + 1);    if (bufferIndex == MESSAGE_BUFFER_SIZE + 1) {      overflow=true;      buffer[MESSAGE_BUFFER_SIZE]=OVERFLOW_MESSAGE_FIRST_CHAR;      bufferIndex--;    }  } else {    overflow=true;  }}  }
class C{  private boolean useAdvancedAntiAliasing(Map<String,Object> args) throws TranscoderException {  boolean useAdvanced=true;  boolean flashTypeAsName=true;  String advancedStr=(String)args.get(ADVANTIALIASING);  if (advancedStr == null) {    advancedStr=(String)args.get(FLASHTYPE);  } else {    flashTypeAsName=false;  }  if (advancedStr != null) {    if (advancedStr.equalsIgnoreCase("true")) {      useAdvanced=true;    } else     if (advancedStr.equalsIgnoreCase("false")) {      useAdvanced=false;    } else     if (flashTypeAsName) {      throw new BadFlashType();    } else {      throw new BadAdvancedAntiAliasing();    }  } else {    useAdvanced=fontsConfig.getFlashType();  }  return useAdvanced;}  }
class C{  private static ClassNode makeType(ClassNode cn,boolean usingClass){  if (usingClass) {    ClassNode clazzType=CLASS_Type.getPlainNodeReference();    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});    return clazzType;  } else {    return cn;  }}  }
class C{  public static boolean[] toBooleanArray(Double[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  private void checkIfArtifactIsAssignedToTarget(final TenantSecurityToken secruityToken,final org.eclipse.hawkbit.repository.model.Artifact artifact){  if (secruityToken.getControllerId() != null) {    checkByControllerId(artifact,secruityToken.getControllerId());  } else   if (secruityToken.getTargetId() != null) {    checkByTargetId(artifact,secruityToken.getTargetId());  } else {    LOG.info("anonymous download no authentication check for artifact {}",artifact);    return;  }}  }
class C{  public final boolean at(String str,CharSequence csq){  int i=index;  int length=csq.length();  for (int j=0; j < str.length(); ) {    if ((i >= length) || (str.charAt(j++) != csq.charAt(i++)))     return false;  }  return true;}  }
class C{  public boolean isContinuousLayout(){  return continuousLayout;}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public void testPortInUseAndContinue() throws CoreException, InterruptedException, ExecutionException, TimeoutException, IOException {  assertTrue(checkPortConflictUI("Yes"));}  }
class C{  public static String velocityGenerateCode(@Nullable PsiClass clazz,Collection<? extends PsiMember> selectedMembers,Collection<? extends PsiMember> selectedNotNullMembers,Map<String,String> params,Map<String,Object> contextMap,String templateMacro,int sortElements,boolean useFullyQualifiedName,boolean useAccessors) throws GenerateCodeException {  if (templateMacro == null) {    return null;  }  StringWriter sw=new StringWriter();  try {    VelocityContext vc=new VelocityContext();    logger.debug("Velocity Context - adding fields");    final List<FieldElement> fieldElements=ElementUtils.getOnlyAsFieldElements(selectedMembers,selectedNotNullMembers,useAccessors);    vc.put("fields",fieldElements);    if (fieldElements.size() == 1) {      vc.put("field",fieldElements.get(0));    }    PsiMember member=clazz != null ? clazz : ContainerUtil.getFirstItem(selectedMembers);    logger.debug("Velocity Context - adding methods");    vc.put("methods",ElementUtils.getOnlyAsMethodElements(selectedMembers));    logger.debug("Velocity Context - adding members (fields and methods)");    List<Element> elements=ElementUtils.getOnlyAsFieldAndMethodElements(selectedMembers,selectedNotNullMembers,useAccessors);    if (sortElements != 0) {      Collections.sort(elements,new ElementComparator(sortElements));    }    vc.put("members",elements);    if (clazz != null) {      ClassElement ce=ElementFactory.newClassElement(clazz);      vc.put("class",ce);      if (logger.isDebugEnabled())       logger.debug("Velocity Context - adding class: " + ce);      vc.put("classname",useFullyQualifiedName ? ce.getQualifiedName() : ce.getName());      vc.put("FQClassname",ce.getQualifiedName());    }    if (member != null) {      vc.put("java_version",PsiAdapter.getJavaVersion(member));      final Project project=member.getProject();      vc.put("settings",CodeStyleSettingsManager.getSettings(project));      vc.put("project",project);    }    vc.put("helper",GenerationHelper.class);    vc.put("StringUtil",StringUtil.class);    for (    String paramName : contextMap.keySet()) {      vc.put(paramName,contextMap.get(paramName));    }    if (logger.isDebugEnabled())     logger.debug("Velocity Macro:\n" + templateMacro);    VelocityEngine velocity=VelocityFactory.getVelocityEngine();    logger.debug("Executing velocity +++ START +++");    velocity.evaluate(vc,sw,GenerateToStringWorker.class.getName(),templateMacro);    logger.debug("Executing velocity +++ END +++");    if (vc.get("autoImportPackages") != null) {      params.put("autoImportPackages",(String)vc.get("autoImportPackages"));    }  } catch (  ProcessCanceledException e) {    throw e;  }catch (  Exception e) {    throw new GenerateCodeException("Error in Velocity code generator",e);  }  return StringUtil.convertLineSeparators(sw.getBuffer().toString());}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean isEmpty(){  return getDataLength() == 0;}  }
class C{  public JAMonEJBInterceptor(){  super("javax.ejb.EJBException");}  }
class C{  public void validatePath(){  if (generalPath == null) {    generalPath=toGeneralPath();  }}  }
class C{  public List parameters(){  return this.parameters;}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  protected void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {  super.bcsPreSerializationHook(oos);synchronized (services) {    oos.writeInt(serializable);    for (Iterator<Entry<Class<?>,BeanContextServicesSupport.BCSSServiceProvider>> iter=services.entrySet().iterator(); iter.hasNext(); ) {      Entry<Class<?>,BeanContextServicesSupport.BCSSServiceProvider> entry=iter.next();      if (((BCSSServiceProvider)entry.getValue()).getServiceProvider() instanceof Serializable) {        oos.writeObject(entry.getKey());        oos.writeObject(entry.getValue());      }    }  }}  }
class C{  public static Coin valueOf(final int coins,final int cents){  checkArgument(cents < 100);  checkArgument(cents >= 0);  checkArgument(coins >= 0);  final Coin coin=COIN.multiply(coins).add(CENT.multiply(cents));  return coin;}  }
class C{  public String toString(){  return "LLXY[" + super.toString() + "]";}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,Value arg1,Value arg2){  return new JInterfaceInvokeExpr(base,method,Arrays.asList(new Value[]{arg1,arg2}));}  }
class C{  public String describeReferenceTo(JavaThing target,Snapshot ss){  for (int i=0; i < statics.length; i++) {    JavaField f=statics[i].getField();    if (f.hasId()) {      JavaThing other=statics[i].getValue();      if (other == target) {        return "static field " + f.getName();      }    }  }  return super.describeReferenceTo(target,ss);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  load();  return super.modelToView(pos,a,b);}  }
class C{  protected SVGOMStopElement(){}  }
class C{  public static void luaMain(LuaValue mainChunk,String[] args){  Globals g=standardGlobals();  int n=args.length;  LuaValue[] vargs=new LuaValue[args.length];  for (int i=0; i < n; ++i)   vargs[i]=LuaValue.valueOf(args[i]);  LuaValue arg=LuaValue.listOf(vargs);  arg.set("n",n);  g.set("arg",arg);  mainChunk.initupvalue1(g);  mainChunk.invoke(LuaValue.varargsOf(vargs));}  }
class C{  public HttpServletResponse postExecute(HttpServletResponse response){  return response;}  }
class C{  public void testEquals(){  DefaultCategoryDataset d1=new DefaultCategoryDataset();  d1.setValue(23.4,"R1","C1");  DefaultCategoryDataset d2=new DefaultCategoryDataset();  d2.setValue(23.4,"R1","C1");  assertTrue(d1.equals(d2));  assertTrue(d2.equals(d1));  d1.setValue(36.5,"R1","C2");  assertFalse(d1.equals(d2));  d2.setValue(36.5,"R1","C2");  assertTrue(d1.equals(d2));  d1.setValue(null,"R1","C1");  assertFalse(d1.equals(d2));  d2.setValue(null,"R1","C1");  assertTrue(d1.equals(d2));}  }
class C{  public RatNum div(RatNum arg){  checkRep();  if (arg.isNaN()) {    checkRep();    return arg;  } else {    checkRep();    return new RatNum(this.numer * arg.denom,this.denom * arg.numer);  }}  }
class C{  private boolean addParticipant(SharedDeployment dep,GridDeploymentMetadata meta){  assert dep != null;  assert meta != null;  assert Thread.holdsLock(mux);  if (!checkModeMatch(dep,meta))   return false;  if (meta.participants() != null) {    for (    Map.Entry<UUID,IgniteUuid> e : meta.participants().entrySet()) {      if (ctx.discovery().node(e.getKey()) != null) {        dep.addParticipant(e.getKey(),e.getValue());        if (log.isDebugEnabled())         log.debug("Added new participant [nodeId=" + e.getKey() + ", clsLdrId="+ e.getValue()+ ", seqNum="+ e.getValue().localId()+ ']');      } else       if (log.isDebugEnabled())       log.debug("Skipped participant (node left?) [nodeId=" + e.getKey() + ", clsLdrId="+ e.getValue()+ ", seqNum="+ e.getValue().localId()+ ']');    }  }  if (dep.deployMode() == CONTINUOUS || meta.participants() == null) {    if (!dep.addParticipant(meta.senderNodeId(),meta.classLoaderId())) {      U.warn(log,"Failed to create shared mode deployment " + "(requested class loader was already undeployed, did sender node leave grid?) " + "[clsLdrId=" + meta.classLoaderId() + ", senderNodeId="+ meta.senderNodeId()+ ']');      return false;    }    if (log.isDebugEnabled())     log.debug("Added new participant [nodeId=" + meta.senderNodeId() + ", clsLdrId="+ meta.classLoaderId()+ ", seqNum="+ meta.sequenceNumber()+ ']');  }  return true;}  }
class C{  public static boolean decodeToFile(final String dataToDecode,final String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(Base64.PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public QName(String namespaceURI,String prefix,String localName){  this(namespaceURI,prefix,localName,false);}  }
class C{  public static String encodeUrl(final byte[] buf){  char[] b=new char[buf.length];  for (int iter=0; iter < buf.length; iter++) {    b[iter]=(char)buf[iter];  }  return encode(b,"%20");}  }
class C{  public Document parse(String input){  int lineStart=0;  int lineBreak;  while ((lineBreak=Parsing.findLineBreak(input,lineStart)) != -1) {    CharSequence line=Substring.of(input,lineStart,lineBreak);    incorporateLine(line);    if (lineBreak + 1 < input.length() && input.charAt(lineBreak) == '\r' && input.charAt(lineBreak + 1) == '\n') {      lineStart=lineBreak + 2;    } else {      lineStart=lineBreak + 1;    }  }  if (input.length() > 0 && (lineStart == 0 || lineStart < input.length())) {    incorporateLine(Substring.of(input,lineStart,input.length()));  }  return finalizeAndProcess();}  }
class C{  public void deleteCertificate(String alias) throws KeyStoreException {  appKeyStore.deleteEntry(alias);  keyStoreUpdated();}  }
class C{  @SuppressWarnings("unchecked") public <T>Class<T> resolveDeserializationType(final String type){  try {    if (type != null) {      final FieldBaseTypes baseType=FieldBaseTypes.valueOf(type);      return (Class<T>)baseType.getDeserializationType();    }  } catch (  final IllegalArgumentException e) {  }  return null;}  }
class C{  @Override public void put(String name,float value){  emulatedFields.put(name,value);}  }
class C{  boolean isZero(){  return (intLen == 0);}  }
class C{  public static final void message(String message){  logExpensive(Level.INFO,message);}  }
class C{  public final void testIsSatisfiedSucceeds(){  MinLengthConstraint minLengthConstraint=new MinLengthConstraint(2);  assertTrue(minLengthConstraint.isSatisfied("12"));}  }
class C{  public static void loadClass(Context cx,Scriptable thisObj,Object[] args,Function funObj) throws IllegalAccessException, InstantiationException {  Class<?> clazz=getClass(args);  if (!Script.class.isAssignableFrom(clazz)) {    throw reportRuntimeError("msg.must.implement.Script");  }  Script script=(Script)clazz.newInstance();  script.exec(cx,thisObj);}  }
class C{  public void update(){  double runUntil=SimClock.getTime() + this.updateInterval;  setNextEventQueue();  while (this.nextQueueEventTime <= runUntil) {    simClock.setTime(this.nextQueueEventTime);    ExternalEvent ee=this.nextEventQueue.nextEvent();    ee.processEvent(this);    updateHosts();    setNextEventQueue();  }  moveHosts(this.updateInterval);  simClock.setTime(runUntil);  updateHosts();  for (  UpdateListener ul : this.updateListeners) {    ul.updated(this.hosts);  }}  }
class C{  public TreeLoader(){}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {    if (ACTION_REQUEST_WITH_RESULT.equals(getIntent().getAction()) || ACTION_CHECK_WITH_RESULT.equals(getIntent().getAction())) {      finish();    }    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  public Fonseca2(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  private KrbAsReqBuilder resolve() throws KrbException, Asn1Exception, IOException {  if (ktab != null) {    rep.decryptUsingKeyTab(ktab,req,cname);  } else {    rep.decryptUsingPassword(password,req,cname);  }  if (rep.getPA() != null) {    if (paList == null || paList.length == 0) {      paList=rep.getPA();    } else {      int extraLen=rep.getPA().length;      if (extraLen > 0) {        int oldLen=paList.length;        paList=Arrays.copyOf(paList,paList.length + extraLen);        System.arraycopy(rep.getPA(),0,paList,oldLen,extraLen);      }    }  }  return this;}  }
class C{  @Override public void inc(long n){  MetricsContainer container=MetricsEnvironment.getCurrentContainer();  if (container != null) {    container.getCounter(name).inc(n);  }}  }
class C{  public static String[] toStringArray(double[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TENUM__LITERALS:    return ((InternalEList<?>)getLiterals()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.SAVE_HISTORY__REGION:    setRegion((ExecutionRegion)newValue);  return;case SexecPackage.SAVE_HISTORY__DEEP:setDeep((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected boolean checkTargetFileInFileSystem(){  return true;}  }
class C{  public VNXeCommandResult detachSnapSync(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_DETACH);  _url=urlBuilder.toString();  return postRequestSync(null);}  }
class C{  public boolean visit(TryStatement node){  return true;}  }
class C{  public void visitEpsilonProduction(Nonterminal a,EpsilonProduction p){  try {    addTerm(RE.empty);  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  public static void generateBinaryOperationFlags(final ITranslationEnvironment environment,final long nextOffset,final String result,final OperandSize resultSize,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(result,"Error: Argument result can't be null");  Preconditions.checkNotNull(resultSize,"Error: Argument resultSize can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final long baseOffset=nextOffset - instructions.size();  long offset=nextOffset;  generateSignFlagCode(environment,offset,result,resultSize,instructions);  offset=(baseOffset + instructions.size()) - 1;  instructions.add(ReilHelpers.createBisz(offset + 1,resultSize,result,OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createStr(offset + 2,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createStr(offset + 3,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));}  }
class C{  public boolean regionEqual(IgfsFileAffinityRange other){  return startOff == other.startOff && endOff == other.endOff;}  }
class C{  public ClassNode lookupClassNodeFor(String type){  for (  ClassNode cn : typeCheckingVisitor.getSourceUnit().getAST().getClasses()) {    if (cn.getName().equals(type))     return cn;  }  return null;}  }
class C{  public Element fullPath(ManagedObjectReference obj) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, FinderException {  List<ObjectContent> set=ancestrySet(obj);  Map<MoRef,Element> childToParent=new HashMap<>();  for (  ObjectContent cont : set) {    MoRef key=new MoRef(cont.getObj());    ManagedObjectReference parentRef=getParent(cont);    Element parent;    if (parentRef != null) {      parent=Element.make(parentRef,getName(cont));    } else {      parent=Element.make(cont.getObj(),getName(cont));    }    childToParent.put(key,parent);  }  MoRef next=new MoRef(obj);  List<String> path=new ArrayList<>();  while (true) {    Element parent=childToParent.get(next);    path.add(parent.path);    if (next.equals(new MoRef(parent.object))) {      break;    }    next=new MoRef(parent.object);  }  Collections.reverse(path);  StringBuilder sb=new StringBuilder();  for (  String s : path) {    sb.append('/');    sb.append(s);  }  return Element.make(obj,sb.toString());}  }
class C{  private static boolean validate(WarpScriptJavaFunction func){  if (null == func) {    return true;  }  return classLoadersFingerprints.containsKey(func.getClass().getClassLoader());}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public Position(int offset,int length){  Assert.isTrue(offset >= 0);  Assert.isTrue(length >= 0);  this.offset=offset;  this.length=length;}  }
class C{  public void writeTMRCAStatistics(XMLWriter writer){  List<Taxa> taxonSets;  Map<Taxa,Boolean> taxonSetsMono;  if (options.useStarBEAST) {    taxonSets=options.speciesSets;    taxonSetsMono=options.speciesSetsMono;    writer.writeComment("Species Sets");    writer.writeText("");    for (    Taxa taxa : taxonSets) {      writer.writeOpenTag(TMRCAStatisticParser.TMRCA_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"tmrca(" + taxa.getId() + ")")});      writer.writeOpenTag(TMRCAStatisticParser.MRCA);      writer.writeIDref(TaxaParser.TAXA,taxa.getId());      writer.writeCloseTag(TMRCAStatisticParser.MRCA);      writer.writeIDref(SpeciesTreeModelParser.SPECIES_TREE,SP_TREE);      writer.writeCloseTag(TMRCAStatisticParser.TMRCA_STATISTIC);      if (taxonSetsMono.get(taxa)) {        writer.writeOpenTag(MonophylyStatisticParser.MONOPHYLY_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"monophyly(" + taxa.getId() + ")")});        writer.writeOpenTag(MonophylyStatisticParser.MRCA);        writer.writeIDref(TaxaParser.TAXA,taxa.getId());        writer.writeCloseTag(MonophylyStatisticParser.MRCA);        writer.writeIDref(SpeciesTreeModelParser.SPECIES_TREE,SP_TREE);        writer.writeCloseTag(MonophylyStatisticParser.MONOPHYLY_STATISTIC);      }    }  } else {    taxonSets=options.taxonSets;    taxonSetsMono=options.taxonSetsMono;    writer.writeComment("Taxon Sets");    writer.writeText("");    for (    Taxa taxa : taxonSets) {      PartitionTreeModel treeModel=options.taxonSetsTreeModel.get(taxa);      writer.writeOpenTag(TMRCAStatisticParser.TMRCA_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"tmrca(" + treeModel.getPrefix() + taxa.getId()+ ")"),new Attribute.Default<Boolean>(TMRCAStatisticParser.STEM,options.taxonSetsIncludeStem.get(taxa))});      writer.writeOpenTag(TMRCAStatisticParser.MRCA);      writer.writeIDref(TaxaParser.TAXA,taxa.getId());      writer.writeCloseTag(TMRCAStatisticParser.MRCA);      writer.writeIDref(TreeModel.TREE_MODEL,treeModel.getPrefix() + TreeModel.TREE_MODEL);      writer.writeCloseTag(TMRCAStatisticParser.TMRCA_STATISTIC);      if (taxonSetsMono.get(taxa)) {        writer.writeOpenTag(MonophylyStatisticParser.MONOPHYLY_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"monophyly(" + taxa.getId() + ")")});        writer.writeOpenTag(MonophylyStatisticParser.MRCA);        writer.writeIDref(TaxaParser.TAXA,taxa.getId());        writer.writeCloseTag(MonophylyStatisticParser.MRCA);        writer.writeIDref(TreeModel.TREE_MODEL,treeModel.getPrefix() + TreeModel.TREE_MODEL);        writer.writeCloseTag(MonophylyStatisticParser.MONOPHYLY_STATISTIC);      }    }  }}  }
class C{  public void testVerifyWeblogicHomeWhenMissingDirectory() throws Exception {  this.container.setFileHandler(this.fileHandler);  try {    this.container.verifyWeblogicHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid WebLogic installation. The [" + WL_HOME + "/server/lib] directory doesn't "+ "exist. Make sure the WL_HOME directory you have specified "+ "points to the right location (It's currently pointing to ["+ WL_HOME+ "])",expected.getMessage());  }}  }
class C{  public void writeXML(XMLOutput xmlOutput,boolean withMessages) throws IOException {  xmlOutput.startTag("FindBugsSummary");  xmlOutput.addAttribute("timestamp",new SimpleDateFormat(TIMESTAMP_FORMAT,Locale.ENGLISH).format(analysisTimestamp));  xmlOutput.addAttribute("total_classes",String.valueOf(getNumClasses()));  xmlOutput.addAttribute("referenced_classes",String.valueOf(referencedClasses));  xmlOutput.addAttribute("total_bugs",String.valueOf(totalErrors[0]));  xmlOutput.addAttribute("total_size",String.valueOf(getCodeSize()));  xmlOutput.addAttribute("num_packages",String.valueOf(packageStatsMap.size()));  if (java_version != null) {    xmlOutput.addAttribute("java_version",java_version);  }  if (java_vm_version != null) {    xmlOutput.addAttribute("vm_version",java_vm_version);  }  Footprint delta=new Footprint(baseFootprint);  NumberFormat twoPlaces=NumberFormat.getInstance(Locale.ENGLISH);  twoPlaces.setMinimumFractionDigits(2);  twoPlaces.setMaximumFractionDigits(2);  twoPlaces.setGroupingUsed(false);  long cpuTime=delta.getCpuTime();  if (cpuTime >= 0) {    xmlOutput.addAttribute("cpu_seconds",twoPlaces.format(cpuTime / 1000000000.0));  }  long clockTime=delta.getClockTime();  if (clockTime >= 0) {    xmlOutput.addAttribute("clock_seconds",twoPlaces.format(clockTime / 1000.0));  }  long peakMemory=delta.getPeakMemory();  if (peakMemory >= 0) {    xmlOutput.addAttribute("peak_mbytes",twoPlaces.format(peakMemory / (1024.0 * 1024)));  }  xmlOutput.addAttribute("alloc_mbytes",twoPlaces.format(Runtime.getRuntime().maxMemory() / (1024.0 * 1024)));  long gcTime=delta.getCollectionTime();  if (gcTime >= 0) {    xmlOutput.addAttribute("gc_seconds",twoPlaces.format(gcTime / 1000.0));  }  BugCounts.writeBugPriorities(xmlOutput,totalErrors);  xmlOutput.stopTag(false);  if (withMessages && fileBugHashes != null) {    for (    String sourceFile : new TreeSet<String>(fileBugHashes.getSourceFiles())) {      xmlOutput.startTag("FileStats");      xmlOutput.addAttribute("path",sourceFile);      xmlOutput.addAttribute("bugCount",String.valueOf(fileBugHashes.getBugCount(sourceFile)));      xmlOutput.addAttribute("size",String.valueOf(fileBugHashes.getSize(sourceFile)));      String hash=fileBugHashes.getHash(sourceFile);      if (hash != null) {        xmlOutput.addAttribute("bugHash",hash);      }      xmlOutput.stopTag(true);    }  }  if (!OMIT_PACKAGE_STATS) {    for (    PackageStats stats : packageStatsMap.values()) {      stats.writeXML(xmlOutput);    }  }  getProfiler().writeXML(xmlOutput);  xmlOutput.closeTag("FindBugsSummary");}  }
class C{  private void updateProgressBars(int value){  ProgressBar circularProgressBar=getCircularProgressBar(true);  ProgressBar horizontalProgressBar=getHorizontalProgressBar(true);  final int features=getLocalFeatures();  if (value == PROGRESS_VISIBILITY_ON) {    if ((features & (1 << FEATURE_PROGRESS)) != 0) {      int level=horizontalProgressBar.getProgress();      int visibility=(horizontalProgressBar.isIndeterminate() || level < 10000) ? View.VISIBLE : View.INVISIBLE;      horizontalProgressBar.setVisibility(visibility);    }    if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {      circularProgressBar.setVisibility(View.VISIBLE);    }  } else   if (value == PROGRESS_VISIBILITY_OFF) {    if ((features & (1 << FEATURE_PROGRESS)) != 0) {      horizontalProgressBar.setVisibility(View.GONE);    }    if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {      circularProgressBar.setVisibility(View.GONE);    }  } else   if (value == PROGRESS_INDETERMINATE_ON) {    horizontalProgressBar.setIndeterminate(true);  } else   if (value == PROGRESS_INDETERMINATE_OFF) {    horizontalProgressBar.setIndeterminate(false);  } else   if (PROGRESS_START <= value && value <= PROGRESS_END) {    horizontalProgressBar.setProgress(value - PROGRESS_START);    if (value < PROGRESS_END) {      showProgressBars(horizontalProgressBar,circularProgressBar);    } else {      hideProgressBars(horizontalProgressBar,circularProgressBar);    }  } else   if (PROGRESS_SECONDARY_START <= value && value <= PROGRESS_SECONDARY_END) {    horizontalProgressBar.setSecondaryProgress(value - PROGRESS_SECONDARY_START);    showProgressBars(horizontalProgressBar,circularProgressBar);  }}  }
class C{  private void validateSourceVolumeHasExported(Volume requestedVolume){  URI id=requestedVolume.getId();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,requestedVolume.getStorageController());  if (storageSystem != null && DiscoveredDataObject.Type.hds.name().equals(storageSystem.getSystemType())) {    if (!requestedVolume.isVolumeExported(_dbClient)) {      throw APIException.badRequests.sourceNotExported(id);    }  }}  }
class C{  public SpringImporterAssembler(ApplicationContext context,Visibility defaultVisibility){  this.context=context;  this.defaultVisibility=defaultVisibility;}  }
class C{  private String toHexString(byte[] value){  int pos=0;  char[] c=new char[value.length * 2];  for (int i=0; i < value.length; i++) {    c[pos++]=HEX[value[i] >> 4 & 0xf];    c[pos++]=HEX[value[i] & 0xf];  }  return new String(c);}  }
class C{  AddressMessage(NetworkParameters params,byte[] payload,int offset,MessageSerializer setSerializer,int length) throws ProtocolException {  super(params,payload,offset,setSerializer,length);}  }
class C{  private static ChangeCorrectionProposal addGetterProposal(ProposalParameter context,int relevance){  IMethodBinding method=findGetter(context);  if (method != null) {    Expression mi=createMethodInvocation(context,method,null);    context.astRewrite.replace(context.accessNode,mi,null);    String label=CorrectionMessages.INSTANCE.GetterSetterCorrectionSubProcessor_replacewithgetter_description(ASTNodes.asString(context.accessNode));    Images image=Images.correction_change;    ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,context.astRewrite,relevance,context.document,image);    return proposal;  } else {  }  return null;}  }
class C{  public Preference inflate(XmlPullParser parser,@Nullable PreferenceGroup root){synchronized (mConstructorArgs) {    final AttributeSet attrs=Xml.asAttributeSet(parser);    mConstructorArgs[0]=mContext;    final Preference result;    try {      int type;      do {        type=parser.next();      } while (type != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT);      if (type != XmlPullParser.START_TAG) {        throw new InflateException(parser.getPositionDescription() + ": No start tag found!");      }      Preference xmlRoot=createItemFromTag(parser.getName(),attrs);      result=onMergeRoots(root,(PreferenceGroup)xmlRoot);      rInflate(parser,result,attrs);    } catch (    InflateException e) {      throw e;    }catch (    XmlPullParserException e) {      final InflateException ex=new InflateException(e.getMessage());      ex.initCause(e);      throw ex;    }catch (    IOException e) {      final InflateException ex=new InflateException(parser.getPositionDescription() + ": " + e.getMessage());      ex.initCause(e);      throw ex;    }    return result;  }}  }
class C{  @Nullable public AutoCompletionDecision handleAutoCompletionPossibility(@NotNull AutoCompletionContext context){  return null;}  }
class C{  private String saveAndMoveCursor(final String fileName,final LogFile headerRecord,final Cursor cursor){  try {    cursor.moveToPrevious();    File file=new File(fileName);    Writer bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),"UTF-8"),30 * 1024);    bw.write(XML_HEADER);    bw.write(logToXml(headerRecord.getManufacturer(),headerRecord.getModel(),headerRecord.getRevision(),headerRecord.getSwid(),headerRecord.getSwVersion(),mExportVersion));    long previousBeginId=0;    String previousEnd="";    int i=0;    while (i < WIFIS_PER_FILE && cursor.moveToNext()) {      final long beginId=Long.valueOf(cursor.getString(colBeginPosId));      final String currentBegin=positionToXml(cursor.getLong(colReqTimestamp),cursor.getDouble(colReqLon),cursor.getDouble(colReqLat),cursor.getDouble(colReqAlt),cursor.getDouble(colReqHead),cursor.getDouble(colReqSpeed),cursor.getDouble(colReqAcc),"begin");      final String currentEnd=positionToXml(cursor.getLong(colLastTimestamp),cursor.getDouble(colLastLon),cursor.getDouble(colLastLat),cursor.getDouble(colLastAlt),cursor.getDouble(colLastHead),cursor.getDouble(colLastSpeed),cursor.getDouble(colLastAcc),"end");      if (i == 0) {        bw.write(scanToXml(cursor.getLong(colTimestamp)));        bw.write(currentBegin);      } else {        if (beginId != previousBeginId) {          bw.write(previousEnd);          bw.write(CLOSE_SCAN_TAG);          bw.write(scanToXml(cursor.getLong(colTimestamp)));          bw.write(currentBegin);        }      }      bw.write(wifiToXml(cursor.getString(colBssid).replace(":",""),cursor.getString(colMd5Essid),cursor.getString(colSsid),cursor.getString(colCapa),cursor.getString(colLevel),cursor.getString(colFreq),mAnonymise));      previousBeginId=beginId;      previousEnd=currentEnd;      i++;    }    bw.write(previousEnd);    bw.write(CLOSE_SCAN_TAG);    bw.write(CLOSE_LOGFILE);    bw.close();    file=null;    bw=null;    return fileName;  } catch (  final IOException ioe) {    cursor.close();    Log.e(TAG,ioe.toString(),ioe);    return null;  }}  }
class C{  public String generateRequestUrlForTenant(LogoutRequest samlRequest,String relyingParty,SamlService service,String tenant){  String retval=null;  log.debug("generateRequestUrlForTenant, tenant " + tenant + ", request "+ samlRequest);  try {    Validate.notNull(this.idmAccessor);    Validate.isTrue(this.logoutRequest != null || this.logoutResponse != null);    Validate.notNull(this.getIssuerValue());    this.idmAccessor.setTenant(tenant);    String encodedRequest=service.encodeSAMLObject(samlRequest);    String toBeSigned=service.generateRedirectUrlQueryStringParameters(encodedRequest,null,this.getRelayState(),SignatureAlgorithm.RSA_SHA256.toString(),null);    log.debug("Message to sign " + toBeSigned);    String signature=service.signMessage(toBeSigned);    log.debug("Signature " + signature);    retval=samlRequest.getDestination();    Validate.notNull(retval);    String queryString=service.generateRedirectUrlQueryStringParameters(encodedRequest,null,this.getRelayState(),SignatureAlgorithm.RSA_SHA256.toString(),signature);    retval=retval + "?" + queryString;    log.debug("Generated URL " + retval);  } catch (  Exception e) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    retval=null;  }  return retval;}  }
class C{  private void addErrorNode(Node node){  if (errorNodes.get(node) != null) {    throw new IllegalArgumentException("Node already in map.");  }  List<Node> nodes=getGraph().getNodes();  Node error=errorNodes().get(node);  if (error == null) {    error=new GraphNode("E" + "_" + node.getName());    error.setCenter(node.getCenterX() + 50,node.getCenterY() + 50);    error.setNodeType(NodeType.ERROR);    errorNodes.put(node,error);  }  for (  Node possibleError : nodes) {    if (error.getName().equals(possibleError.getName())) {      moveAttachedBidirectedEdges(possibleError,node);      if (getGraph().containsNode(possibleError)) {        getGraph().removeNode(possibleError);      }      errorNodes.remove(node);      errorNodes.remove(possibleError);    }  }  getGraph().addNode(error);  errorNodes.put(node,error);  errorNodes.put(error,error);  addDirectedEdge(error,node);}  }
class C{  public static UnitThrowAnalysis v(){  return G.v().soot_toolkits_exceptions_UnitThrowAnalysis();}  }
class C{  void printDfns(IR ir){  System.out.println("DFNS: **** " + ir.getMethod() + "****");  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=inst.nextInstructionInCodeOrder()) {    System.out.println(getDFN(inst) + " " + inst);  }}  }
class C{  public VerletParticle2D unlock(){  clearVelocity();  isLocked=false;  return this;}  }
