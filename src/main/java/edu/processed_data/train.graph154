class C{  private boolean isTwoPaneLayoutUsed(){  return findViewById(R.id.article_detail_container) != null;}  }
class C{  public void testAddEjbRefByLink() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  EjbRef ejbRef=new EjbRef("MyEjb","com.wombat.MyEjb","com.wombat.MyEjbHome");  ejbRef.setEjbName("MyEjb");  WebXmlUtils.addEjbRef(webXml,ejbRef);  List<Element> nl=webXml.getTags(WebXmlType.EJB_LOCAL_REF);  Element n=(Element)nl.get(0);  assertEquals("ejb-local-ref",n.getName());  Element m=(Element)n.getChildren(WebXmlType.EJB_REF_NAME,n.getNamespace()).get(0);  assertEquals("ejb-ref-name",m.getName());  assertEquals("MyEjb",m.getText());  m=(Element)n.getChildren(WebXmlType.EJB_REF_TYPE,n.getNamespace()).get(0);  assertEquals("ejb-ref-type",m.getName());  assertEquals("Session",m.getText());  m=(Element)n.getChildren(WebXmlType.LOCAL,n.getNamespace()).get(0);  assertEquals("local",m.getName());  assertEquals("com.wombat.MyEjb",m.getText());  m=(Element)n.getChildren(WebXmlType.LOCAL_HOME,n.getNamespace()).get(0);  assertEquals("local-home",m.getName());  assertEquals("com.wombat.MyEjbHome",m.getText());  m=(Element)n.getChildren(WebXmlType.EJB_LINK,n.getNamespace()).get(0);  assertEquals("ejb-link",m.getName());  assertEquals("MyEjb",m.getText());}  }
class C{  public int lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public void endVisit(WildcardType node){}  }
class C{  public IndependenceTest indTestSubset(List vars){  throw new UnsupportedOperationException();}  }
class C{  private static int totalSeconds(int hours,int minutes,int seconds){  return hours * SECONDS_PER_HOUR + minutes * SECONDS_PER_MINUTE + seconds;}  }
class C{  public void respond(ResponseCode code,String payload){  Response response=new Response(code);  response.setPayload(payload);  response.getOptions().setContentFormat(MediaTypeRegistry.TEXT_PLAIN);  respond(response);}  }
class C{  public void unirPartesUDocExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  List listaUDocs=getListaUDocs(request);  ActionErrors errors=comprobacionesBasicas(formulario,listaUDocs,UNIR,request);  if (errors != null && !errors.isEmpty()) {    obtenerErrores(request,true).add(errors);    formulario.setUdocsSeleccionadas(null);  } else {    String[] idsSeleccionados=formulario.getIdsUdocsSeleccionadas();    String[] signaturasSeleccionadas=formulario.getSignaturasUdocSeleccionadas();    int[] posicionesSeleccionadas=formulario.getNuevasPosUdocsSeleccionadas();    String codigoElementoCuadro=null;    ServiceRepository servicio=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));    GestionCuadroClasificacionBI cuadroBI=servicio.lookupGestionCuadroClasificacionBI();    ElementoCuadroClasificacionVO elemento=cuadroBI.getElementoCuadroClasificacion(idsSeleccionados[0]);    if (elemento != null) {      codigoElementoCuadro=elemento.getCodigo();      List listaUDocsEliminadas=getListaUDocsEliminadas(request);      int posicionElementoNoEliminar=posicionesSeleccionadas[0];      for (int i=0; i < idsSeleccionados.length; i++) {        String signatura=signaturasSeleccionadas[i];        if (signatura.equals(codigoElementoCuadro)) {          posicionElementoNoEliminar=posicionesSeleccionadas[i];          break;        }      }      for (int i=posicionesSeleccionadas.length - 1; i >= 0; i--) {        int posicion=posicionesSeleccionadas[i];        if (posicionElementoNoEliminar != posicion) {          UDocEnUiDepositoVO udoc=(UDocEnUiDepositoVO)listaUDocs.get(posicion);          listaUDocsEliminadas.add(udoc);          listaUDocs.remove(posicion);        }      }      setListUDocs(request,listaUDocs);      setListUDocsEliminadas(request,listaUDocsEliminadas);      setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.TRUE);    }  }  setReturnActionFordward(request,mappings.findForward("organizacion_udocs"));}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  int startingPointInPart, endingPointInPart;  double[][] vertices;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=shapeType;    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPoly=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPoly.getPoints();    if (recPoly.getNumberOfHoles() == 0) {      output.addRecord(recPoly);    } else {      whitebox.geospatialfiles.shapefile.Polygon recPolygonOutput=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int numParts=recPoly.getNumParts() - recPoly.getNumberOfHoles();      int[] outParts=new int[numParts];      int[] inParts=recPoly.getParts();      int numPoints=recPoly.getNumPoints();      int numPartsIn=recPoly.getNumParts();      boolean[] isHole=recPoly.getPartHoleData();      int outPartNum=0;      for (int part=0; part < inParts.length; part++) {        if (!isHole[part]) {          outParts[outPartNum]=pnts.size();          startingPointInPart=inParts[part];          if (part < numPartsIn - 1) {            endingPointInPart=inParts[part + 1];          } else {            endingPointInPart=numPoints;          }          for (int p=startingPointInPart; p < endingPointInPart; p++) {            pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));          }          outPartNum++;        }      }      PointsList pl=new PointsList(pnts);      whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(outParts,pl.getPointsArray());      output.addRecord(wbPoly);    }  break;case POLYGONZ:PolygonZ recPolyZ=(PolygonZ)(record.getGeometry());vertices=recPolyZ.getPoints();if (recPolyZ.getNumberOfHoles() == 0) {output.addRecord(recPolyZ);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int numParts=recPolyZ.getNumParts() - recPolyZ.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyZ.getParts();int numPoints=recPolyZ.getNumPoints();int numPartsIn=recPolyZ.getNumParts();boolean[] isHole=recPolyZ.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  outParts[outPartNum]=pnts.size();  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));  }  outPartNum++;}}PointsList pl=new PointsList(pnts);double[] zArray=recPolyZ.getzArray();double[] zArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    zArrayOut[j]=zArray[p];    j++;  }}}double[] mArray=recPolyZ.getmArray();double[] mArrayOut=new double[pnts.size()];j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    mArrayOut[j]=mArray[p];    j++;  }}}PolygonZ wbPoly=new PolygonZ(outParts,pl.getPointsArray(),zArrayOut,mArrayOut);output.addRecord(wbPoly);}break;case POLYGONM:PolygonM recPolyM=(PolygonM)(record.getGeometry());vertices=recPolyM.getPoints();if (recPolyM.getNumberOfHoles() == 0) {output.addRecord(recPolyM);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<>();int numParts=recPolyM.getNumParts() - recPolyM.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyM.getParts();int numPoints=recPolyM.getNumPoints();int numPartsIn=recPolyM.getNumParts();boolean[] isHole=recPolyM.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {outParts[outPartNum]=pnts.size();startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));}outPartNum++;}}PointsList pl=new PointsList(pnts);double[] mArray=recPolyM.getmArray();double[] mArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {mArrayOut[j]=mArray[p];j++;}}}PolygonM wbPoly=new PolygonM(outParts,pl.getPointsArray(),mArrayOut);output.addRecord(wbPoly);}break;}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent event){  if (event.getAction() == MotionEvent.ACTION_UP) {    setAlpha(1.0f);  } else   if (event.getAction() == MotionEvent.ACTION_DOWN) {    setAlpha(0.6f);  }  return super.onTouchEvent(event);}  }
class C{  public boolean activateLaser(World world,int x,int z){  this.world=world;  return true;}  }
class C{  public static UnicodeEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new UnicodeEscaper(codepointLow,codepointHigh,false);}  }
class C{  public String addSymbol(String symbol){  int bucket=hash(symbol) % fTableSize;  int length=symbol.length();  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (symbol.charAt(i) != entry.characters[i]) {          continue OUTER;        }      }      return entry.symbol;    }  }  Entry entry=new Entry(symbol,fBuckets[bucket]);  fBuckets[bucket]=entry;  return entry.symbol;}  }
class C{  public final Mat22 invert(){  final float a=ex.x, b=ey.x, c=ex.y, d=ey.y;  final Mat22 B=new Mat22();  float det=a * d - b * c;  if (det != 0) {    det=1.0f / det;  }  B.ex.x=det * d;  B.ey.x=-det * b;  B.ex.y=-det * c;  B.ey.y=det * a;  return B;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_2__AND_OP_1:    return getAndOp_1();case UmplePackage.ANONYMOUS_LINKING_OP_2__CONSTRAINT_EXPR_1:  return getConstraintExpr_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Uri resizeAndImportImage(Context context,String sessionId,Uri uri,String mimeType) throws IOException {  String imagePath=uri.getPath();  String targetPath="/" + sessionId + "/upload/"+ imagePath;  targetPath=createUniqueFilename(targetPath);  int defaultImageWidth=600;  Bitmap bmp=getThumbnailFile(context,uri,defaultImageWidth);  File file=new File(targetPath);  FileOutputStream out=new FileOutputStream(file);  if (imagePath.endsWith(".png") || (mimeType != null && mimeType.contains("png")))   bmp.compress(Bitmap.CompressFormat.PNG,100,out); else   bmp.compress(Bitmap.CompressFormat.JPEG,90,out);  out.flush();  out.close();  bmp.recycle();  return vfsUri(targetPath);}  }
class C{  private void co_yield(boolean moreRemains) throws SAXException {  if (fNoMoreEvents)   return;  try {    Object arg=Boolean.FALSE;    if (moreRemains) {      arg=fCoroutineManager.co_resume(Boolean.TRUE,fSourceCoroutineID,fControllerCoroutineID);    }    if (arg == Boolean.FALSE) {      fNoMoreEvents=true;      if (fXMLReader != null)       throw new StopException();      fCoroutineManager.co_exit_to(Boolean.FALSE,fSourceCoroutineID,fControllerCoroutineID);    }  } catch (  NoSuchMethodException e) {    fNoMoreEvents=true;    fCoroutineManager.co_exit(fSourceCoroutineID);    throw new SAXException(e);  }}  }
class C{  private JythonUtils(){}  }
class C{  private void percolateDown(int cur){  int left=lChild(cur);  int right=rChild(cur);  int smallest;  if ((left < heap.size()) && (comp.compare(heap.elementAt(left),heap.elementAt(cur)) < 0)) {    smallest=left;  } else {    smallest=cur;  }  if ((right < heap.size()) && (comp.compare(heap.elementAt(right),heap.elementAt(smallest)) < 0)) {    smallest=right;  }  if (cur != smallest) {    swap(cur,smallest);    percolateDown(smallest);  }}  }
class C{  public void invalidateAll(){  cache.invalidateAll();}  }
class C{  public int fillWithTimeout(long timeout) throws IOException {  if (_readOffset < _readLength) {    return _readLength - _readOffset;  }  if (_readBuffer == null) {    _readOffset=0;    _readLength=0;    return -1;  }  _readOffset=0;  StreamImpl source=_source;  if (source == null) {    return -1;  }  int readLength=source.readTimeout(_readBuffer,0,_readBuffer.length,timeout);  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime) {      _readTime=CurrentTime.currentTime();    }    return readLength;  } else   if (readLength == READ_TIMEOUT) {    _readLength=0;    return 0;  } else {    _readLength=0;    return -1;  }}  }
class C{  public static boolean unsignedLongLessThan(long x1,long x2){  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);}  }
class C{  public AbstractCentralView(final String id,final long categoryId,final NavigationContext navigationContext){  super(id);  this.categoryId=categoryId;  this.navigationContext=navigationContext;}  }
class C{  public boolean isXmtBusy(){  if (controller == null) {    return false;  }  return (!controller.okToSend());}  }
class C{  public void remove(int index){  if (SysProperties.CHECK) {    if (index >= size) {      throw new ArrayIndexOutOfBoundsException("i=" + index + " size="+ size);    }  }  System.arraycopy(data,index + 1,data,index,size - index - 1);  size--;}  }
class C{  @RequestMapping(value="/weights/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> delete(@PathVariable Long id){  log.debug("REST request to delete Weight : {}",id);  weightRepository.delete(id);  weightSearchRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("weight",id.toString())).build();}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.162 -0500",hash_original_method="9458B5514F81355F9A651152E456CAE7",hash_generated_method="98FD5980451359CE86D0EDE2C1BE1722") @Override public void close() throws IOException {  buf=null;  InputStream localIn=in;  in=null;}  }
class C{  public boolean GetInstanceOption(){  return OptionInstance;}  }
class C{  public void testFpTypeOverrideSimple() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enable(DeserializationConfig.Feature.USE_BIG_DECIMAL_FOR_FLOATS);  BigDecimal dec=new BigDecimal("0.1");  Number result=m.readValue(dec.toString(),Number.class);  assertEquals(BigDecimal.class,result.getClass());  assertEquals(dec,result);  Object value=m.readValue(dec.toString(),Object.class);  assertEquals(BigDecimal.class,result.getClass());  assertEquals(dec,value);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof IntExpression)) {    return value == ((IntExpression)obj).value;  }  return false;}  }
class C{  protected void auditOp(OperationTypeEnum opType,boolean operationalStatus,String operationStage,Object... descparams){  URI tenantId;  URI username;  if (!hasValidUserInContext() && InterNodeHMACAuthFilter.isInternalRequest(_request)) {    tenantId=_permissionsHelper.getRootTenant().getId();    username=INTERNAL_DATASVC_USER;  } else {    tenantId=URI.create(getUserFromContext().getTenantId());    username=URI.create(getUserFromContext().getName());  }  _auditMgr.recordAuditLog(tenantId,username,getServiceType(),opType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  public static GraphRequest newUploadVideoRequest(AccessToken accessToken,Uri videoUri,Callback callback) throws FileNotFoundException {  if (Utility.isFileUri(videoUri)) {    return newUploadVideoRequest(accessToken,new File(videoUri.getPath()),callback);  } else   if (!Utility.isContentUri(videoUri)) {    throw new FacebookException("The video Uri must be either a file:// or content:// Uri");  }  Cursor cursor=FacebookSdk.getApplicationContext().getContentResolver().query(videoUri,null,null,null,null);  int nameIndex=cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);  cursor.moveToFirst();  String fileName=cursor.getString(nameIndex);  cursor.close();  Bundle parameters=new Bundle(1);  parameters.putParcelable(fileName,videoUri);  return new GraphRequest(accessToken,MY_VIDEOS,parameters,HttpMethod.POST,callback);}  }
class C{  private void accept(Object n){  if (n != null) {    NotificationLite.accept(actual,n);  }}  }
class C{  public static void reschedule(Timer timer,CountedTimerTask oldTask,CountedTimerTask newTask,int oldInterval,int newInterval){  long now=System.currentTimeMillis();  long lastRun=oldTask.scheduledExecutionTime();  long expired=now - lastRun;  if (DEBUG) {    System.err.println("computing timer delay: " + " oldInterval = " + oldInterval + " newInterval = "+ newInterval+ " samples = "+ oldTask.executionCount()+ " expired = "+ expired);  }  long delay=0;  if (oldTask.executionCount() > 0) {    long remainder=newInterval - expired;    delay=remainder >= 0 ? remainder : 0;  }  if (DEBUG) {    System.err.println("rescheduling sampler task: interval = " + newInterval + " delay = "+ delay);  }  timer.schedule(newTask,delay,newInterval);}  }
class C{  public boolean hasNext(){  ensureOpen();  saveState();  while (!sourceClosed) {    if (hasTokenInBuffer())     return revertState(true);    readInput();  }  boolean result=hasTokenInBuffer();  return revertState(result);}  }
class C{  public LightVehicleBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  @Override public boolean isEnabled(){  return app != null && app.isEnabled() && enabled;}  }
class C{  @Override public void clear(){  waitForCache();  mTotalSize.getAndSet(0);  super.clear();}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public void close() throws SQLException {  SQLExceptionChainBuilder<SQLException> chainBuilder=new SQLExceptionChainBuilder<>();synchronized (getSynchronizationObject()) {    try {      freeStatements();      if (metaData != null)       metaData.close();    } catch (    SQLException e) {      chainBuilder.append(e);    } finally {      metaData=null;      if (mc != null) {        if (!mc.inDistributedTransaction()) {          try {            txCoordinator.handleConnectionClose();          } catch (          SQLException e) {            chainBuilder.append(e);          } finally {            try {              setAutoCommit(true);            } catch (            SQLException e) {              if (!SQLStateConstants.SQL_STATE_CONNECTION_CLOSED.equals(e.getSQLState())) {                chainBuilder.append(e);              }            }          }        }        mc.close(this);        mc=null;      }    }    if (chainBuilder.hasException()) {      throw chainBuilder.getException();    }  }}  }
class C{  public void printString(char[] v,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    char ch=v[i + offset];    if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + ((ch >> 6) & 0x1f));      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + ((ch >> 12) & 0xf));      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  public static org.oscm.vo.VOCustomerService convertToApi(org.oscm.internal.vo.VOCustomerService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOCustomerService newVO=new org.oscm.vo.VOCustomerService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToApiVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.types.enumtypes.OfferingType.class));  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setOrganizationKey(oldVO.getOrganizationKey());  newVO.setOrganizationName(oldVO.getOrganizationName());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  public void addImage(Image image){  addProperty(image);}  }
class C{  protected void charError(String encoding) throws IOException {  throw new IOException(Messages.formatMessage("invalid.char",new Object[]{encoding}));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.893 -0500",hash_original_method="25FFBBE7056EE87BB826458DBC43764C",hash_generated_method="238DD3FC86386D3311138731220E8FD2") void _getChars(int start,int end,char[] buffer,int index){  buffer.addTaint(this.getTaintInt());}  }
class C{  public void removeAllHeaders(){  clientHeaderMap.clear();}  }
class C{  @Override public void onInsertComplete(int taskId,Object cookie,long insertRowId){}  }
class C{  protected AccessibleJComponent(){  super();}  }
class C{  public EchoStateNetwork(final Network network,Point2D initialPosition){  super(network);  this.initialPosition=initialPosition;  setLabel("Echo-State Network");}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "shouldRespectHighWaterMarkSettingAndSucceed":    settings.writeBufferHighWaterMark=64;  settings.writeBufferLowWaterMark=32;break;case "shouldReceiveFailureTimeOutOnScriptEval":settings.scriptEvaluationTimeout=200;break;case "shouldReceiveFailureTimeOutOnTotalSerialization":settings.serializedResponseTimeout=1;break;case "shouldBlockRequestWhenTooBig":settings.maxContentLength=1024;break;case "shouldBatchResultsByTwos":settings.resultIterationBatchSize=2;break;case "shouldWorkOverNioTransport":settings.channelizer=NioChannelizer.class.getName();break;case "shouldEnableSsl":case "shouldEnableSslButFailIfClientConnectsWithoutIt":settings.ssl=new Settings.SslSettings();settings.ssl.enabled=true;break;case "shouldEnableSslWithSslContextProgrammaticallySpecified":settings.ssl=new Settings.SslSettings();settings.ssl.enabled=true;settings.ssl.overrideSslContext(createServerSslContext());break;case "shouldStartWithDefaultSettings":return new Settings();case "shouldUseSimpleSandbox":settings.scriptEngines.get("gremlin-groovy").config=getScriptEngineConfForSimpleSandbox();break;case "shouldUseInterpreterMode":settings.scriptEngines.get("gremlin-groovy").config=getScriptEngineConfForInterpreterMode();break;case "shouldReceiveFailureTimeOutOnScriptEvalOfOutOfControlLoop":settings.scriptEngines.get("gremlin-groovy").config=getScriptEngineConfForTimedInterrupt();break;case "shouldUseBaseScript":settings.scriptEngines.get("gremlin-groovy").config=getScriptEngineConfForBaseScript();break;}return settings;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  @NotNull public QueryBuilder append(@NotNull String sql,Object... args){  return append(sql,asList(args));}  }
class C{  public ZipFile(File f) throws IOException {  this(f,null);}  }
class C{  public double calcAngleBetweenLines(Entry start1,Entry end1,Entry start2,Entry end2){  double angle1=calcAngleWithRatios(start1,end1);  double angle2=calcAngleWithRatios(start2,end2);  return Math.abs(angle1 - angle2);}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public boolean isClosed(){  return _lifecycle.getState().isDestroyed();}  }
class C{  @ObjectiveCName("answerCallWithCallId:") public void answerCall(long callId){  modules.getCallsModule().answerCall(callId);}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,Animator);  long duration=a.getInt(Animator_duration,0);  long startDelay=a.getInt(Animator_startOffset,0);  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  int valueFromIndex=Animator_valueFrom;  int valueToIndex=Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));  }  if (a.hasValue(Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));  }  final int resID=a.getResourceId(Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  public boolean hasResult(){  return (m_ResultSet != null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.174 -0500",hash_original_method="8940A54787C662CE81882AD52921A328",hash_generated_method="DFDF8FF00BF0958B04E666FD0BE08A59") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public boolean isImplements(String interfaceName){  for (  String className : implementNames) {    if (interfaceName.contains(className)) {      return true;    }  }  return false;}  }
class C{  public Builder withoutUserCredentials(){  this.userCredentials=null;  return this;}  }
class C{  public static String hex(byte[] bytes){  return Hex.hex(bytes);}  }
class C{  private boolean checkCondition(final Map<String,Object> paramMap){  String txnType=null;  String glCode=null;  BigDecimal txnAmt=null;  java.util.Date asondate=null;  java.util.Date fromdate=null;  try {    if (paramMap.get("txnAmt") != null)     txnAmt=(BigDecimal)paramMap.get("txnAmt");    if (paramMap.get("txnType") != null)     txnType=paramMap.get("txnType").toString();    if (paramMap.get("glcode") != null)     glCode=paramMap.get("glcode").toString();    if (paramMap.get(Constants.ASONDATE) != null)     asondate=(Date)paramMap.get(Constants.ASONDATE);    if (glCode == null)     throw new ValidationException(EMPTY_STRING,"glcode is null");    if (txnAmt == null)     throw new ValidationException(EMPTY_STRING,"txnAmt is null");    if (txnType == null)     throw new ValidationException(EMPTY_STRING,"txnType is null");    if (asondate == null)     throw new ValidationException(EMPTY_STRING,"As On Date is null");    final CChartOfAccounts coa=chartOfAccountsHibernateDAO.getCChartOfAccountsByGlCode(glCode);    if (coa.getBudgetCheckReq() != null && coa.getBudgetCheckReq()) {      final List<BudgetGroup> budgetHeadListByGlcode=getBudgetHeadByGlcode(coa);      if (budgetHeadListByGlcode == null || budgetHeadListByGlcode.size() == 0)       throw new ValidationException(EMPTY_STRING,"Budget Check failed: Budget not defined for the given combination.");      if (!isBudgetCheckingRequiredForType(txnType,budgetHeadListByGlcode.get(0).getBudgetingType().toString())) {        if (LOGGER.isDebugEnabled())         LOGGER.debug("No need to check budget for :" + glCode + " as the transaction type is "+ txnType);        return true;      }      paramMap.put("glcodeid",coa.getId());      final CFinancialYear finyear=financialYearHibDAO.getFinancialYearByDate(asondate);      if (finyear == null)       throw new ValidationException(EMPTY_STRING,"Financial Year is not defined for-" + asondate);      new SimpleDateFormat("dd-MMM-yyyy",Constants.LOCALE);      fromdate=finyear.getStartingDate();      paramMap.put("fromdate",fromdate);      paramMap.put(Constants.ASONDATE,finyear.getEndingDate());      paramMap.put("financialyearid",Long.valueOf(finyear.getId()));      paramMap.put(BUDGETHEADID,budgetHeadListByGlcode);      if (LOGGER.isDebugEnabled())       LOGGER.debug("************ BudgetCheck Details *********************");      final BigDecimal budgetedAmt=getBudgetedAmtForYear(paramMap);      if (LOGGER.isDebugEnabled())       LOGGER.debug(".............Budgeted Amount For the year............" + budgetedAmt);      if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.MANDATORY.toString()))       if (budgetedAmt.compareTo(BigDecimal.ZERO) == 0)       return false;      final BigDecimal actualAmt=getActualBudgetUtilizedForBudgetaryCheck(paramMap);      if (LOGGER.isDebugEnabled())       LOGGER.debug(".............Voucher Actual amount............" + actualAmt);      BigDecimal billAmt=getBillAmountForBudgetCheck(paramMap);      if (LOGGER.isDebugEnabled())       LOGGER.debug(".............Bill Actual amount............" + billAmt);      EgBillregister bill=null;      if (paramMap.get("bill") != null)       bill=(EgBillregister)persistenceService.find("from EgBillregister where id=? ",(Long)paramMap.get("bill"));      if (bill != null && bill.getEgBillregistermis().getBudgetaryAppnumber() != null) {        if (LOGGER.isDebugEnabled())         LOGGER.debug(".............Found BillId so subtracting txn amount......................" + txnAmt);        billAmt=billAmt.subtract(txnAmt);      }      if (LOGGER.isDebugEnabled())       LOGGER.debug(".......Recalculated Bill Actual amount............" + billAmt);      final BigDecimal diff=budgetedAmt.subtract(actualAmt).subtract(billAmt);      if (LOGGER.isDebugEnabled())       LOGGER.debug(".................diff amount..........................." + diff);      if (LOGGER.isDebugEnabled())       LOGGER.debug("************ BudgetCheck Details End****************");      if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.MANDATORY.toString())) {        if (txnAmt.compareTo(diff) <= 0) {          generateBanNumber(paramMap,bill);          return true;        } else         return false;      }      if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.ANTICIPATORY.toString())) {        generateBanNumber(paramMap,bill);        return true;      }    } else     return true;  } catch (  final ValidationException v) {    throw v;  }catch (  final Exception e) {    throw new ValidationException(EMPTY_STRING,e.getMessage());  }  return true;}  }
class C{  public static long monthLastDay(long monthMillis){  if (isNotTime(monthMillis)) {    return NO_TIME_MILLIS;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(monthMillis);  calendar.set(Calendar.DAY_OF_MONTH,calendar.getActualMaximum(Calendar.DAY_OF_MONTH));  long result=calendar.getTimeInMillis();  calendar.recycle();  return result;}  }
class C{  public void testUpdate6(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2='1'";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public HelpTipObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public void writeFragmentedUTF(String str) throws IOException {  if (str.length() <= MAX_LENGTH) {    writeLastUTFFragment(str);  } else {    writeUTFFragment(str.substring(0,MAX_LENGTH));    writeFragmentedUTF(str.substring(MAX_LENGTH));  }}  }
class C{  public KeyedValues(KeyedValues other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }}  }
class C{  public void qsort(final int left,final int right){  qsort2(left,right);  while (helpersWorking > 0) {  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.722 -0500",hash_original_method="11AFF6C7676FEB0968CBC8B8BF9C6A52",hash_generated_method="7B429BF57D2613ACA216D7C75DB980D2") public void write(byte buffer[]) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public LinkedList<TransactionOutput> calculateAllSpendCandidates(boolean excludeImmatureCoinbases){  lock.lock();  try {    LinkedList<TransactionOutput> candidates=Lists.newLinkedList();    for (    Transaction tx : Iterables.concat(unspent.values(),pending.values())) {      if (excludeImmatureCoinbases && !tx.isMature())       continue;      for (      TransactionOutput output : tx.getOutputs()) {        if (!output.isAvailableForSpending())         continue;        if (!output.isMine(this))         continue;        candidates.add(output);      }    }    return candidates;  }  finally {    lock.unlock();  }}  }
class C{  public UserProjectObject(int id){  this.id=id;}  }
class C{  public boolean adjustValue(K key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public int numNumericalValues(){  return numericalValues == null ? 0 : numericalValues.length();}  }
class C{  public static String crypt(final String text){  return crypt(text,"");}  }
class C{  private void validateSigningCert(Date issueInstant){  assert issueInstant != null;  final X509Certificate signingCert=signInfo.getSigningCertificate();  final TimePeriod signingCertValidity=new TimePeriod(signingCert.getNotBefore(),getExpiresTime(signingCert.getNotAfter()));  if (!signingCertValidity.contains(issueInstant)) {    throw new UnsupportedTokenLifetimeException(String.format("Signing certificate is not valid at %s, cert validity: %s",issueInstant,signingCertValidity));  }}  }
class C{  public void resetData(){  data.clear();  dataNames.clear();  dataSet.resetData(dataNames,data,bins);}  }
class C{  public static byte[] decodeBase64(String data){  byte[] bytes;  try {    bytes=data.getBytes("UTF-8");  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=data.getBytes();  }  bytes=Base64.decode(bytes,0,bytes.length,Base64.NO_OPTIONS);  return bytes;}  }
class C{  private void outputToRAW(final Path path,final Collection<Protein> proteins) throws IOException {  try (ProteinMatchesRAWResultWriter writer=new ProteinMatchesRAWResultWriter(path)){    writeProteinMatches(writer,proteins);  } }  }
class C{  public void destroyKey(Object key) throws ForceReattemptException {  if (logger.isDebugEnabled()) {    logger.debug(" destroying primary key {}",key);  }  @Released EntryEventImpl event=getPartitionedRegion().newDestroyEntryEvent(key,null);  try {    event.setEventId(new EventID(cache.getSystem()));    event.setRegion(this);    basicDestroy(event,true,null);    checkReadiness();  } catch (  EntryNotFoundException enf) {    if (getPartitionedRegion().isDestroyed()) {      getPartitionedRegion().checkReadiness();      if (isBucketDestroyed()) {        throw new ForceReattemptException("Bucket moved",new RegionDestroyedException(LocalizedStrings.PartitionedRegionDataStore_REGION_HAS_BEEN_DESTROYED.toLocalizedString(),getPartitionedRegion().getFullPath()));      }    }    throw enf;  }catch (  RegionDestroyedException rde) {    getPartitionedRegion().checkReadiness();    if (isBucketDestroyed()) {      throw new ForceReattemptException("Bucket moved while destroying key " + key,rde);    }  } finally {    event.release();  }  this.notifyEntriesRemoved();}  }
class C{  public static boolean hasTradestrategies(Tradingdays tradingdays){synchronized (tradingdays.getTradingdays()) {    for (    Tradingday tradingday : tradingdays.getTradingdays()) {      if (!tradingday.getTradestrategies().isEmpty()) {        return true;      }    }  }  return false;}  }
class C{  public static void dumpCursor(ICursor cursor){  dumpCursor(cursor,20);}  }
class C{  private void createLoanProductEntity(final String minimumDaysBetweenDisbursalAndFirstRepayment){  final String loanProductJSON=new LoanProductTestBuilder().withPrincipal(loanPrincipalAmount).withNumberOfRepayments(numberOfRepayments).withinterestRatePerPeriod(interestRatePerPeriod).withInterestRateFrequencyTypeAsYear().withMinimumDaysBetweenDisbursalAndFirstRepayment(minimumDaysBetweenDisbursalAndFirstRepayment).build(null);  this.loanProductId=this.loanTransactionHelper.getLoanProductId(loanProductJSON);}  }
class C{  protected void appendPayload(short s){  appendPayload(shortToByteArray(s));}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  @SuppressWarnings("SuspiciousNameCombination") public Ellipse transpose(){  return new Ellipse(new RotatedRect(new Point(rect.center.y,rect.center.x),new Size(rect.size.height,rect.size.width),rect.angle));}  }
class C{  private int receiveNonce() throws IOException {  Nonce nonceMessage=lengthValueRead(in,Nonce.class);  if (nonceMessage != null) {    return nonceMessage.nonce;  } else {    throw new IOException("Didn't get number from remote party.");  }}  }
class C{  public boolean isSuccessful(){  return success;}  }
class C{  public void close(){  if (acceptT != null) {    log("Closing AcceptThread" + acceptT);    acceptT.close();    acceptT=null;  }}  }
class C{  @Override public void run(){  if (inProgress) {    return;  }  Date ts=new Date();  LOG.info("Polling..." + new SimpleDateFormat().format(ts));  try {    inProgress=true;    String sessionID=MessageHelper.generateMessageId();    PollRequest request=messageFactory.get().createPollRequest().withMessageId(sessionID).withCollectionName(collection);    if (subscriptionId != null) {      request=request.withSubscriptionID(subscriptionId);    } else {      request=request.withPollParameters(messageFactory.get().createPollParametersType());    }    if (beginTime != null) {      Calendar gc=GregorianCalendar.getInstance();      gc.setTime(beginTime);      XMLGregorianCalendar gTime=null;      try {        gTime=DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)gc).normalize();      } catch (      DatatypeConfigurationException e) {        ErrorUtils.RuntimeErrors.ILLEGAL_STATE.throwRuntime("Unable to set the begin time due to",e);      }      gTime.setFractionalSecond(null);      LOG.info("Begin Time: " + gTime);      request.setExclusiveBeginTimestamp(gTime);    }    try {      PollResponse response=call(request,PollResponse.class);      LOG.info("Got Poll Response with " + response.getContentBlocks().size() + " blocks");      int numProcessed=0;      long avgTimeMS=0;      long timeStartedBlock=System.currentTimeMillis();      for (      ContentBlock block : response.getContentBlocks()) {        AnyMixedContentType content=block.getContent();        for (        Object o : content.getContent()) {          numProcessed++;          long timeS=System.currentTimeMillis();          String xml=null;          if (o instanceof Element) {            Element element=(Element)o;            xml=getStringFromDocument(element.getOwnerDocument());            if (LOG.isDebugEnabled() && Math.random() < 0.01) {              LOG.debug("Random Stix doc: " + xml);            }            for (            LookupKV<EnrichmentKey,EnrichmentValue> kv : extractor.extract(xml)) {              if (allowedIndicatorTypes.isEmpty() || allowedIndicatorTypes.contains(kv.getKey().type)) {                kv.getValue().getMetadata().put("source_type","taxii");                kv.getValue().getMetadata().put("taxii_url",endpoint.toString());                kv.getValue().getMetadata().put("taxii_collection",collection);                Put p=converter.toPut(columnFamily,kv.getKey(),kv.getValue());                HTableInterface table=getTable(hbaseTable);                table.put(p);                LOG.info("Found Threat Intel: " + kv.getKey() + " => "+ kv.getValue());              }            }          }          avgTimeMS+=System.currentTimeMillis() - timeS;        }        if ((numProcessed + 1) % 100 == 0) {          LOG.info("Processed " + numProcessed + " in "+ (System.currentTimeMillis() - timeStartedBlock)+ " ms, avg time: "+ avgTimeMS / content.getContent().size());          timeStartedBlock=System.currentTimeMillis();          avgTimeMS=0;          numProcessed=0;        }      }    } catch (    Exception e) {      LOG.error(e.getMessage(),e);      throw new RuntimeException("Unable to make request",e);    }  }  finally {    inProgress=false;    beginTime=ts;  }}  }
class C{  public static void removeIterator(final AccumuloStore store,final String iteratorName) throws StoreException {  try {    store.getConnection().tableOperations().removeIterator(store.getProperties().getTable(),iteratorName,EnumSet.of(IteratorScope.majc,IteratorScope.minc,IteratorScope.scan));  } catch (  AccumuloSecurityException|AccumuloException|TableNotFoundException|StoreException e) {    throw new StoreException("Unable remove iterator with Name: " + iteratorName);  }}  }
class C{  @Override protected int calculateWalk(){  return walkMP;}  }
class C{  @Override public void toWireHeader(WireFormat.Writer writer) throws IOException {  writer.writeUint32(version);  writer.writeHash(previousID);  writer.writeHash(merkleRoot);  writer.writeUint32(createTime);  writer.writeUint32(encodedDifficulty);  writer.writeUint32(nonce);}  }
class C{  public static void writeToNBT(ChunkCoords obj,NBTTagCompound tagRoot){  if (obj != null) {    NBTTagCompound coordsTag=new NBTTagCompound();    coordsTag.setInteger("dim",obj.dimension);    coordsTag.setInteger("xPos",obj.x);    coordsTag.setInteger("yPos",obj.y);    coordsTag.setInteger("zPos",obj.z);    tagRoot.setTag("chunkCoords",coordsTag);  }}  }
class C{  public EvictingQueueAppender(int maxSize){  this.maxSize=maxSize < 0 ? 0 : maxSize;  events=EvictingQueue.create(this.maxSize);}  }
class C{  protected TagValueImpl(){  super();}  }
class C{  public void refresh(){  Domain updatedDomain=frame.getSystem().getDomain();  if (updatedDomain.isEmpty()) {    editor.setEnabled(false);    editor.setToolTipText("No dialogue domain is selected");  } else {    editor.setEnabled(true);    editor.setToolTipText(null);  }  if (listModel.isChanged(updatedDomain)) {    listModel.updateDomain(updatedDomain);    if (!listModel.isEmpty() && !listModel.containsFile(shownFile)) {      shownFile=updatedDomain.getSourceFile();      rereadFile();    }  }}  }
class C{  public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);  if (cursor == null) {    return 0;  }  int quantity=0;  try {    while (cursor.moveToNext()) {      int stateIndex=cursor.getInt(2);      PurchaseState state=PurchaseState.valueOf(stateIndex);      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {        quantity+=1;      }    }    updatePurchasedItem(productId,quantity);  }  finally {    if (cursor != null) {      cursor.close();    }  }  return quantity;}  }
class C{  public static RoutingService.Builder buildRoutingService(String finagleNameStr){  if (!finagleNameStr.startsWith("serverset!") && !finagleNameStr.startsWith("inet!") && !finagleNameStr.startsWith("zk!")) {    throw new UnsupportedOperationException("Finagle Name format not supported for name: " + finagleNameStr);  }  return buildRoutingService(new NameServerSet(finagleNameStr),true);}  }
class C{  public Builder add(Element element,String name,int arraySize){  if (arraySize < 1) {    throw new RSIllegalArgumentException("Array size cannot be less than 1.");  }  if (mSkipPadding != 0) {    if (name.startsWith("#padding_")) {      mSkipPadding=0;      return this;    }  }  if (element.mVectorSize == 3) {    mSkipPadding=1;  } else {    mSkipPadding=0;  }  if (mCount == mElements.length) {    Element[] e=new Element[mCount + 8];    String[] s=new String[mCount + 8];    int[] as=new int[mCount + 8];    System.arraycopy(mElements,0,e,0,mCount);    System.arraycopy(mElementNames,0,s,0,mCount);    System.arraycopy(mArraySizes,0,as,0,mCount);    mElements=e;    mElementNames=s;    mArraySizes=as;  }  mElements[mCount]=element;  mElementNames[mCount]=name;  mArraySizes[mCount]=arraySize;  mCount++;  return this;}  }
class C{  public boolean hasNext(int index){  for (int p=0; p < mask.length; p++) {    if (mask[p]) {      if (index <= lastElementIndex[p]) {        return true;      }    }  }  return false;}  }
class C{  public String toString(){  String ret=getPortStr();  if (path != null)   ret+=path;  if (ref != null)   ret+="#" + ref;  return ret;}  }
class C{  private void formWindowOpened(java.awt.event.WindowEvent evt){  if (m_maximize == true) {    super.setVisible(true);    super.setExtendedState(JFrame.MAXIMIZED_BOTH);  }}  }
class C{  public UncheckedIOException(IOException cause){  super(Objects.requireNonNull(cause));}  }
class C{  private TransactionID(boolean rfc3489Compatibility){  transactionID=new byte[rfc3489Compatibility ? RFC3489_TRANSACTION_ID_LENGTH : RFC5389_TRANSACTION_ID_LENGTH];}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public boolean isPattern(){  return (_domain_pattern || _property_list_pattern || _property_value_pattern);}  }
class C{  public void createAccount(String username,String password,Map<String,String> attributes) throws XMPPException {  if (!supportsAccountCreation()) {    throw new XMPPException("Server does not support account creation.");  }  Registration reg=new Registration();  reg.setType(IQ.Type.SET);  reg.setTo(connection.getServiceName());  attributes.put("username",username);  attributes.put("password",password);  reg.setAttributes(attributes);  PacketFilter filter=new AndFilter(new PacketIDFilter(reg.getPacketID()),new PacketTypeFilter(IQ.class));  PacketCollector collector=connection.createPacketCollector(filter);  connection.sendPacket(reg);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from server.");  } else   if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }}  }
class C{  public NondominatedPopulation(Iterable<? extends Solution> iterable){  this();  addAll(iterable);}  }
class C{  public EntityMissile(World world,Pos3D start,Pos3D launcher,int explosiveId){  this(world);  explosiveID=explosiveId;  startPos=start;  launcherPos=launcher;  setPosition(startPos.xPos,startPos.yPos,startPos.zPos);  setRotation(0,90);}  }
class C{  public img addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static int clamp(int x,int min,int max){  if (x < min)   return min;  if (x > max)   return max;  return x;}  }
class C{  public boolean isBefore(long instant){  return (getMillis() < instant);}  }
class C{  public frame addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length){  addEmojis(context,text,emojiSize,index,length,false);}  }
class C{  public Builder withSortAscendingBy(String sortColumn){  builder.sortBy(sortColumn).ascending();  return this;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public void uninstallApplication(String packageName){  Toast.makeText(context,"Please wait, Application is being uninstalled.",Toast.LENGTH_LONG).show();  if (packageName != null && !packageName.contains(resources.getString(R.string.application_package_prefix))) {    packageName=resources.getString(R.string.application_package_prefix) + packageName;  }  if (isPackageInstalled(Constants.AGENT_PACKAGE_NAME)) {    CommonUtils.callAgentApp(context,Constants.Operation.UNINSTALL_APPLICATION,packageName,null);  } else {    Uri packageURI=Uri.parse(packageName);    Intent uninstallIntent=new Intent(Intent.ACTION_DELETE,packageURI);    uninstallIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(uninstallIntent);  }}  }
class C{  public void addEdgeData(String id,String description,String default_value,Function<E,String> edge_transformer){  if (edge_data.equals(Collections.EMPTY_MAP))   edge_data=new HashMap<String,GraphMLMetadata<E>>();  edge_data.put(id,new GraphMLMetadata<E>(description,default_value,edge_transformer));}  }
class C{  public static ExportMaskPlacementDescriptor create(URI tenantURI,URI projectURI,StorageSystem vplex,StorageSystem array,URI virtualArrayURI,Map<URI,Volume> volumeMap,Collection<Initiator> initiators){  ExportMaskPlacementDescriptor descriptor=new ExportMaskPlacementDescriptor(volumeMap);  descriptor.setTenant(tenantURI);  descriptor.setProject(projectURI);  descriptor.setVplex(vplex);  descriptor.setVirtualArray(virtualArrayURI);  descriptor.setBackendArray(array);  descriptor.setInitiators(initiators);  descriptor.exportMaskPolicy=new HashMap<>();  descriptor.equivalentMasks=new HashMap<>();  descriptor.volumeToAlternativeMasks=new HashMap<>();  return descriptor;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void colocateFileWrites(boolean colocateFileWrites){  this.colocateFileWrites=colocateFileWrites;}  }
class C{  public static void showFormattedError(String errorKey,Switch ignore,Object... args){  _callback.showFormattedError(errorKey,ignore,args);}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,Attachment struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.I64) {        struct.id=iprot.readI64();        struct.setIdIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.type=iprot.readString();    struct.setTypeIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.name=iprot.readString();struct.setNameIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.fileSize=iprot.readI64();struct.setFileSizeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.url=iprot.readString();struct.setUrlIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  public String mod(Object num,Object mod){  return Integer.toString(FunctionHandler.getInt(num) % FunctionHandler.getInt(mod));}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  Vector putElemNumber(ElemNumber numberElem){  Vector counters=new Vector();  this.put(numberElem,counters);  return counters;}  }
class C{  public void buildPanel(){  GridBagLayout gridBagLayout=new GridBagLayout();  gridBagLayout.columnWidths=new int[]{10,30,100,10};  gridBagLayout.rowHeights=new int[]{20,0,0,0,0,0,0,0,0};  gridBagLayout.columnWeights=new double[]{0.0,0.0,1.0,0.0};  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0};  setLayout(gridBagLayout);  lblDrawLayers=new JLabel("Draw Layers");  GridBagConstraints gbc_lblDrawLayers=new GridBagConstraints();  gbc_lblDrawLayers.anchor=GridBagConstraints.NORTHWEST;  gbc_lblDrawLayers.insets=new Insets(0,0,5,5);  gbc_lblDrawLayers.gridx=1;  gbc_lblDrawLayers.gridy=1;  add(lblDrawLayers,gbc_lblDrawLayers);  panel_2=new JPanel();  GridBagConstraints gbc_panel_2=new GridBagConstraints();  gbc_panel_2.gridwidth=2;  gbc_panel_2.anchor=GridBagConstraints.WEST;  gbc_panel_2.insets=new Insets(0,30,5,5);  gbc_panel_2.fill=GridBagConstraints.VERTICAL;  gbc_panel_2.gridx=1;  gbc_panel_2.gridy=2;  add(panel_2,gbc_panel_2);  panel_2.setLayout(new BoxLayout(panel_2,BoxLayout.Y_AXIS));  chckbxCellLayer=new JCheckBox("Cell Layer");  chckbxCellLayer.setSelected(true);  panel_2.add(chckbxCellLayer);  chckbxGenomeLayer=new JCheckBox("Genome Layer");  chckbxGenomeLayer.setSelected(true);  panel_2.add(chckbxGenomeLayer);  chckbxOrgHeadLayer=new JCheckBox("Org Head Layer");  chckbxOrgHeadLayer.setSelected(true);  panel_2.add(chckbxOrgHeadLayer);  chckbxOrgTailLayer=new JCheckBox("Org Tail Layer");  chckbxOrgTailLayer.setSelected(true);  panel_2.add(chckbxOrgTailLayer);  chckbxOutlineSeeds=new JCheckBox("Outline Seeds & Young");  panel_2.add(chckbxOutlineSeeds);}  }
class C{  @SuppressWarnings("unchecked") public static <T>UnaryOperator<T> identity(){  return (UnaryOperator<T>)IDENTITY;}  }
class C{  private static String callMethodAndLine(){  String result="at ";  StackTraceElement thisMethodStack=(new Exception()).getStackTrace()[2];  result+=thisMethodStack.getClassName() + "";  result+=thisMethodStack.getMethodName();  result+="(" + thisMethodStack.getFileName();  result+=":" + thisMethodStack.getLineNumber() + ")  ";  return result;}  }
class C{  public void initNodeTest(int whatToShow){  m_whatToShow=whatToShow;  calcScore();}  }
class C{  public LabelMaker(boolean fullColor){  mFullColor=fullColor;  mStrikeWidth=512;  mStrikeHeight=-1;}  }
class C{  public void joinGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.joinGroup(groupAddress,netInterface);}  }
class C{  public boolean parseGeoJSON(String jsonString){  try {    JsonParser parser=new JsonParser();    JsonElement json=parser.parse(jsonString);    return parseGeoJSON(json.getAsJsonObject());  } catch (  JsonSyntaxException e) {    e.printStackTrace();    return false;  }}  }
class C{  public void removeDatasource(String path){  if (StringUtils.isEmpty(path)) {    return;  }  List<Movie> moviesToRemove=new ArrayList<>();  for (int i=movieList.size() - 1; i >= 0; i--) {    Movie movie=movieList.get(i);    if (new File(path).equals(new File(movie.getDataSource()))) {      moviesToRemove.add(movie);    }  }  removeMovies(moviesToRemove);}  }
class C{  @Override public int hashCode(){  int result;  result=this.rowKeys.hashCode();  result=29 * result + this.columnKeys.hashCode();  result=29 * result + this.rows.hashCode();  return result;}  }
class C{  public static URL url(String path){  URL url=CLS_LDR.getResource(path);  if (url == null)   throw new RuntimeException("Failed to resolve resource URL by path: " + path);  return url;}  }
class C{  @Override protected int makePressColor(){  return Color.parseColor("#88DDDDDD");}  }
class C{  public static void main(final String[] args) throws Exception {  new DatabaseFactory().initializeDatabase();  SingletonRepository.getRPWorld();  final ItemDumper itemDumper=new ItemDumper();  itemDumper.dump();}  }
class C{  static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  public void addAlTemp(AlignmentTemplateInstance alTemp,boolean isConsistent){  int e1=alTemp.eStartPos(), e2=alTemp.eEndPos(), f1=alTemp.fStartPos(), f2=alTemp.fEndPos();  if (isConsistent) {    alGridCells[f1][e1].addTopLeft(alTemp);    alGridCells[f2][e1].addTopRight(alTemp);    alGridCells[f1][e2].addBottomLeft(alTemp);    alGridCells[f2][e2].addBottomRight(alTemp);  }  alTempList.add(alTemp);}  }
class C{  @Override public <T>T[] toArray(T[] a){  T[] result;  Iterator<T> iter;  Vector<T> list;  int i;  list=new Vector<T>();  iter=Utils.<Iterator<T>>cast(iterator());  while (iter.hasNext()) {    list.add(iter.next());  }  if (Array.getLength(a) != list.size()) {    result=Utils.<T[]>cast(Array.newInstance(a.getClass().getComponentType(),list.size()));  } else {    result=a;  }  for (i=0; i < list.size(); i++) {    result[i]=list.get(i);  }  return result;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("unchecked") final TypeLiteral<Provider<T>> providerType(){  return (TypeLiteral<Provider<T>>)get(Types.providerOf(getType()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.425 -0500",hash_original_method="D2172C6C42893F443ABBD625D7655BA2",hash_generated_method="FEE5FD6D1B8791B9F0B8835BB9FB17DF") public boolean isValueQuoted(){  return isQuotedString;}  }
class C{  public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {  int count=serializable;  while (count-- > 0) {    Object child=null;    BeanContextSupport.BCSChild bscc=null;    try {      child=ois.readObject();      bscc=(BeanContextSupport.BCSChild)ois.readObject();    } catch (    IOException ioe) {      continue;    }catch (    ClassNotFoundException cnfe) {      continue;    }synchronized (child) {      BeanContextChild bcc=null;      try {        bcc=(BeanContextChild)child;      } catch (      ClassCastException cce) {      }      if (bcc != null) {        try {          bcc.setBeanContext(getBeanContextPeer());          bcc.addPropertyChangeListener("beanContext",childPCL);          bcc.addVetoableChangeListener("beanContext",childVCL);        } catch (        PropertyVetoException pve) {          continue;        }      }      childDeserializedHook(child,bscc);    }  }}  }
class C{  public boolean isFormField(){  return formField;}  }
class C{  public static void sort(String[] a){  int n=a.length;  String[] aux=new String[n];  sort(a,0,n - 1,0,aux);}  }
class C{  @Override public UpdateAutoTimestamp loadValue(Date datastoreValue){  return UpdateAutoTimestamp.create(new DateTime(datastoreValue,UTC));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__TYPE:    if (resolve)     return getType();  return basicGetType();case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:return getParameterValues();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void initParams(AbstractConfiguration config){  this.inFlightQueueSize=config.getInt("mqtt.inflight.queue.size",0);  this.qos2QueueSize=config.getInt("mqtt.qos2.queue.size",0);  this.retainQueueSize=config.getInt("mqtt.retain.queue.size",0);}  }
class C{  public void initDocument() throws Exception {  InternalContextAdapterImpl ica=new InternalContextAdapterImpl(new VelocityContext());  try {    ica.pushCurrentTemplateName(name);    ((SimpleNode)data).init(ica,rsvc);  }  finally {    ica.popCurrentTemplateName();  }}  }
class C{  void discardLast(){  --lastUsed;}  }
class C{  private static long seekLB(RandomAccessFile raf,long x) throws IOException {  if (x <= 0)   return x;  raf.seek(x);  while (x > 0 && raf.read() >= 32) {    x--;    raf.seek(x);  }  if (x == 0)   return 0;  raf.seek(x);  return raf.read() >= 32 ? x : x + 1;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public Image applyMaskAutoScale(Object mask){  try {    int mWidth=((IndexedImage)mask).getWidth();    int mHeight=((IndexedImage)mask).getHeight();    if (mWidth != getWidth() || mHeight != getHeight()) {      return scaled(mWidth,mHeight).applyMask(mask);    }    return applyMask(mask);  } catch (  Throwable t) {    t.printStackTrace();  }  return this;}  }
class C{  public DeflaterOutputStream(OutputStream out,boolean syncFlush){  this(out,new Deflater(),512,syncFlush);  usesDefaultDeflater=true;}  }
class C{  public Line(int offset,int length){  this.offset=offset;  this.length=length;  this.delimiter=null;}  }
class C{  public String toString(){  return toDisplayString();}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthMenuBarUI();}  }
class C{  public static final boolean isIplIdentityReportMessage(LocoNetMessage m){  if ((m.getElement(0) == LnConstants.OPC_PEER_XFER) && (m.getElement(1) == LnConstants.RE_IPL_OP_LEN)) {    if (m.getElement(2) == LnConstants.RE_IPL_IDENTITY_OPERATION) {      if (m.getElement(3) == LnConstants.RE_IPL_OP_REPORT) {        return true;      }    }  }  return false;}  }
class C{  public boolean isPasswordOK(){  if (m_bpc == null || !WebUtil.exists(m_bpc.getPassword()))   return false;  return m_passwordOK;}  }
class C{  public void printin(){  writer.print(SPACES.substring(0,indent));}  }
class C{  private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override protected Object execute() throws Exception {  session.put("SCOPE","codenvy:*");  session.put("SUBSHELL","codenvy");  session.execute("removecommand * exit");  init();  return null;}  }
class C{  @Override public IBinder onBind(Intent intent){  return mAuthenticator.getIBinder();}  }
class C{  public ReferenceRegions(Map<String,MergedIntervals> map){  mSequences=map;}  }
class C{  public void update(NQueensBoard board){  int size=board.getSize();  if (queens.length != size * size) {    gridPane.getChildren().clear();    gridPane.getColumnConstraints().clear();    gridPane.getRowConstraints().clear();    queens=new Polygon[size * size];    RowConstraints c1=new RowConstraints();    c1.setPercentHeight(100.0 / size);    ColumnConstraints c2=new ColumnConstraints();    c2.setPercentWidth(100.0 / size);    for (int i=0; i < board.getSize(); i++) {      gridPane.getRowConstraints().add(c1);      gridPane.getColumnConstraints().add(c2);    }    for (int i=0; i < queens.length; i++) {      StackPane field=new StackPane();      queens[i]=createQueen();      field.getChildren().add(queens[i]);      int col=i % size;      int row=i / size;      field.setBackground(new Background(new BackgroundFill((col % 2 == row % 2) ? Color.WHITE : Color.LIGHTGRAY,null,null)));      gridPane.add(field,col,row);    }  }  double scale=0.2 * gridPane.getWidth() / gridPane.getColumnConstraints().size();  for (int i=0; i < queens.length; i++) {    Polygon queen=queens[i];    queen.setScaleX(scale);    queen.setScaleY(scale);    XYLocation loc=new XYLocation(i % size,i / size);    if (board.queenExistsAt(loc)) {      queen.setVisible(true);      queen.setFill(board.isSquareUnderAttack(loc) ? Color.RED : Color.BLACK);    } else {      queen.setVisible(false);    }  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean addTranslation(Map<String,Map<String,String>> translation,final String relFileName,final String sourceLngTxt,final String targetLngTxt){  boolean modified=false;  Map<String,String> transFile;  if (translation.containsKey(relFileName)) {    transFile=translation.get(relFileName);  } else {    transFile=new LinkedHashMap<String,String>();    translation.put(relFileName,transFile);    modified=true;  }  String oldLngTxt=transFile.put(sourceLngTxt,targetLngTxt);  if (oldLngTxt == null) {    modified=targetLngTxt != null;  } else   if (!oldLngTxt.equals(targetLngTxt)) {    modified=true;  }  return modified;}  }
class C{  protected void heapifyUp(Entry<E> entry){  while (true) {    if (entry.index == 0) {      break;    }    Entry<E> parentEntry=parent(entry);    if (compare(entry,parentEntry) <= 0) {      break;    }    swap(entry,parentEntry);  }}  }
class C{  public static boolean damageOrDechargeItem(ItemStack aStack,int aDamage,int aDecharge,EntityLivingBase aPlayer){  if (GT_Utility.isStackInvalid(aStack) || (aStack.getMaxStackSize() <= 1 && aStack.stackSize > 1))   return false;  if (aPlayer != null && aPlayer instanceof EntityPlayer && ((EntityPlayer)aPlayer).capabilities.isCreativeMode)   return true;  if (aStack.getItem() instanceof IDamagableItem) {    return ((IDamagableItem)aStack.getItem()).doDamageToItem(aStack,aDamage);  } else   if (GT_ModHandler.isElectricItem(aStack)) {    if (canUseElectricItem(aStack,aDecharge)) {      if (aPlayer != null && aPlayer instanceof EntityPlayer) {        return GT_ModHandler.useElectricItem(aStack,aDecharge,(EntityPlayer)aPlayer);      }      return GT_ModHandler.dischargeElectricItem(aStack,aDecharge,Integer.MAX_VALUE,true,false,true) >= aDecharge;    }  } else   if (aStack.getItem().isDamageable()) {    if (aPlayer == null) {      aStack.setItemDamage(aStack.getItemDamage() + aDamage);    } else {      aStack.damageItem(aDamage,aPlayer);    }    if (aStack.getItemDamage() >= aStack.getMaxDamage()) {      aStack.setItemDamage(aStack.getMaxDamage() + 1);      ItemStack tStack=GT_Utility.getContainerItem(aStack,true);      if (tStack != null) {        aStack.func_150996_a(tStack.getItem());        aStack.setItemDamage(tStack.getItemDamage());        aStack.stackSize=tStack.stackSize;        aStack.setTagCompound(tStack.getTagCompound());      }    }    return true;  }  return false;}  }
class C{  protected void drawCenterText(Canvas c){  SpannableString centerText=mChart.getCenterText();  if (mChart.isDrawCenterTextEnabled() && centerText != null) {    PointF center=mChart.getCenterCircleBox();    float innerRadius=mChart.isDrawHoleEnabled() && mChart.isHoleTransparent() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();    RectF holeRect=mRectBuffer[0];    holeRect.left=center.x - innerRadius;    holeRect.top=center.y - innerRadius;    holeRect.right=center.x + innerRadius;    holeRect.bottom=center.y + innerRadius;    RectF boundingRect=mRectBuffer[1];    boundingRect.set(holeRect);    float radiusPercent=mChart.getCenterTextRadiusPercent();    if (radiusPercent > 0.0) {      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);    }    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {      mCenterTextLastBounds.set(boundingRect);      mCenterTextLastValue=centerText;      float width=mCenterTextLastBounds.width();      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);    }    float layoutHeight=mCenterTextLayout.getHeight();    c.save();    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);    mCenterTextLayout.draw(c);    c.restore();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double noData;  int progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  String delimiter="\t";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassRangeStr=args[2].split(delimiter);  if (reclassRangeStr.length == 1) {    delimiter=";";    reclassRangeStr=args[2].split(delimiter);    if (reclassRangeStr.length == 1) {      delimiter=",";      reclassRangeStr=args[2].split(delimiter);      if (reclassRangeStr.length == 1) {        showFeedback("Unrecognized relcass string delimiter. Please use " + "a tab, semicolon, or comma to delimite relcass values.");        return;      }    }  }  if (reclassRangeStr[2].toLowerCase().equals("not specified")) {    blnAssignMode=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.459 -0400",hash_original_method="1AFF94373CE43938D77349C7E6B3F7D6",hash_generated_method="D6F7369E1EB1F73F9B63CDD923CEC241") private int handleR(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (index == value.length() - 1 && !slavoGermanic && contains(value,index - 2,2,"IE") && !contains(value,index - 4,2,"ME","MA")) {    result.appendAlternate('R');  } else {    result.append('R');  }  return charAt(value,index + 1) == 'R' ? index + 2 : index + 1;}  }
class C{  public HistoryReadValueId clone(){  HistoryReadValueId result=new HistoryReadValueId();  result.NodeId=NodeId;  result.IndexRange=IndexRange;  result.DataEncoding=DataEncoding;  result.ContinuationPoint=ContinuationPoint;  return result;}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodename.class,args);}  }
class C{  public static SemOptimizerEm serializableInstance(){  return new SemOptimizerEm();}  }
class C{  @GET @Path("void/illegal-argument") @View("hello.jsp") public void voidIllegalArgumentException(){  throw new IllegalArgumentException("the general error page should be displayed");}  }
class C{  public void add(ScrPfi scr){  if (scr != null) {    content.add(scr);  }}  }
class C{  @Override public boolean isValidJoin(Map<String,Object> row1,Map<String,Object> row2){  assert (false);  return false;}  }
class C{  private boolean checkReady(){  if (mStreetViewPanorama == null) {    Toast.makeText(this,R.string.panorama_not_ready,Toast.LENGTH_SHORT).show();    return false;  }  return true;}  }
class C{  private RotateStream(Path path){  _rolloverLog=new RolloverLogBase();  _rolloverLog.setPath(path);  _out=new WriteStream(_rolloverLog);  _queue=new RotateStreamQueue(this);}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  public static NumberAuto newInstance(double numberAutoAsDbl){  NumberAuto numberAuto=new NumberAuto();  numberAuto.numberAutoAsDbl=numberAutoAsDbl;  numberAuto.dataType=Type.DOUBLE;  return numberAuto;}  }
class C{  public ShowHiddenWorkingSetsDropDownAction(){  super(ImageRef.SHOW_HIDDEN_WORKING_SETS.asImageDescriptor().orNull());  setToolTipText("Show Hidden Working Sets");}  }
class C{  protected Partitioning(){}  }
class C{  protected void loadOrder(int C_Order_ID,boolean forInvoice,int M_Locator_ID){  loadTableOIS(getOrderData(C_Order_ID,forInvoice,M_Locator_ID));}  }
class C{  protected synchronized void drawMapOrig(){  if (lastDrawStarted > lastDrawMapReq) {    return;  }  lastDrawStarted=System.currentTimeMillis();  if (m_mapImage == null) {    return;  }  if (!m_dialog.isVisible()) {    return;  }  Graphics g=m_mapImage.getGraphics();  if (GUIPreferences.getInstance().getAntiAliasing()) {    ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  }  Color oldColor=g.getColor();  g.setColor(oldColor);  if (!minimized) {    roadHexIndexes.removeAllElements();    Graphics gg=terrainBuffer.getGraphics();    if (GUIPreferences.getInstance().getAntiAliasing()) {      ((Graphics2D)gg).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);    }    for (int j=0; j < m_board.getWidth(); j++) {      for (int k=0; k < m_board.getHeight(); k++) {        IHex h=m_board.getHex(j,k);        if (dirtyMap || dirty[j / 10][k / 10]) {          gg.setColor(terrainColor(h,j,k));          paintCoord(gg,j,k,true);        }        addRoadElements(h,j,k);      }    }    g.drawImage(terrainBuffer,0,0,this);    if (firstLOS != null) {      paintSingleCoordBorder(g,firstLOS.getX(),firstLOS.getY(),Color.red);    }    if (secondLOS != null) {      paintSingleCoordBorder(g,secondLOS.getX(),secondLOS.getY(),Color.red);    }    if (!roadHexIndexes.isEmpty()) {      paintRoads(g);    }    if (SHOW_NO_HEIGHT != heightDisplayMode) {      for (int j=0; j < m_board.getWidth(); j++) {        for (int k=0; k < m_board.getHeight(); k++) {          IHex h=m_board.getHex(j,k);          paintHeight(g,h,j,k);        }      }    }    if ((null != m_client) && (null != m_game)) {      if (IGame.Phase.PHASE_DEPLOYMENT == m_game.getPhase()) {        GameTurn turn=m_game.getTurn();        if ((turn != null) && (turn.getPlayerNum() == m_client.getLocalPlayer().getId())) {          Entity depEnt=m_bview.getDeployingEntity();          int dir;          if (depEnt != null && depEnt.getOwnerId() == turn.getPlayerNum()) {            dir=depEnt.getStartingPos();          } else {            dir=m_client.getLocalPlayer().getStartingPos();          }          for (int j=0; j < m_board.getWidth(); j++) {            for (int k=0; k < m_board.getHeight(); k++) {              if (m_board.isLegalDeployment(new Coords(j,k),dir)) {                paintSingleCoordBorder(g,j,k,Color.yellow);              }            }          }        }      }      if ((IGame.Phase.PHASE_FIRING == m_game.getPhase()) || (IGame.Phase.PHASE_PHYSICAL == m_game.getPhase())) {        for (Enumeration<EntityAction> iter=m_game.getActions(); iter.hasMoreElements(); ) {          EntityAction action=iter.nextElement();          if (action instanceof AttackAction) {            paintAttack(g,(AttackAction)action);          }        }      }      multiUnits.clear();      for (      Entity e : m_game.getEntitiesVector()) {        if (e.getPosition() == null) {          continue;        }        paintUnit(g,e);      }    }    clean();  }  if ((m_client != null) && (m_client.getArtilleryAutoHit() != null)) {    for (int i=0; i < m_client.getArtilleryAutoHit().size(); i++) {      drawAutoHit(g,m_client.getArtilleryAutoHit().get(i));    }  }  if (m_dialog instanceof JDialog) {    drawBtn(g);  }  repaint();}  }
class C{  public boolean isOpenStreetMapFillIsIn(){  return openStreetMapFillIsIn;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void seperateConver(){  Response init=get(RestAPI.initchat);  JsonPath jp=new JsonPath(init.asString());  this.setClientId(jp.get(SetupMethod.CLIENTID).toString());  this.setConversationId(jp.get(SetupMethod.CONVERSATIONID).toString());}  }
class C{  private void divide(DBIDArrayIter it,double[] data,ArrayList<DBIDs> idx,int start,int end,int depth,Mean mean){  final int count=end - start;  if (depth == 0) {    if (count > 0) {      ModifiableDBIDs out=DBIDUtil.newHashSet(count);      it.seek(start);      for (int i=count; i > 0; i--, it.advance()) {        out.add(it);      }      idx.add(out);    } else {      idx.add(DBIDUtil.EMPTYDBIDS);    }    return;  } else {    if (count > 0) {      mean.reset();      for (int i=start; i < end; i++) {        mean.put(data[i]);      }      final double m=mean.getMean();      int pos=Arrays.binarySearch(data,start,end,m);      if (pos >= 0) {        int opt=(start + end) >> 1;        while (Double.compare(data[pos],m) == 0) {          if (pos < opt) {            pos++;          } else           if (pos > opt) {            pos--;          } else {            break;          }        }      } else {        pos=(-pos - 1);      }      divide(it,data,idx,start,pos,depth - 1,mean);      divide(it,data,idx,pos,end,depth - 1,mean);    } else {      divide(it,data,idx,start,end,depth - 1,mean);      divide(it,data,idx,start,end,depth - 1,mean);    }  }}  }
class C{  private Object readResolve(){synchronized (levels) {    for (    Level level : levels) {      if (value != level.value) {        continue;      }      if (!name.equals(level.name)) {        continue;      }      if (Objects.equal(resourceBundleName,level.resourceBundleName)) {        return level;      }    }    levels.add(this);    return this;  }}  }
class C{  public void updateView(int tag,String className,ReadableMap props){  ViewManager viewManager=mViewManagers.get(className);  if (viewManager == null) {    throw new IllegalViewOperationException("Got unknown view type: " + className);  }  ReactShadowNode cssNode=mShadowNodeRegistry.getNode(tag);  if (cssNode == null) {    throw new IllegalViewOperationException("Trying to update non-existent view with tag " + tag);  }  if (props != null) {    ReactStylesDiffMap styles=new ReactStylesDiffMap(props);    cssNode.updateProperties(styles);    handleUpdateView(cssNode,className,styles);  }}  }
class C{  public void testBasic(){  int num=atLeast(200);  for (int i=0; i < num; i++) {    Automaton a=AutomatonTestUtil.randomAutomaton(random());    Automaton la=Operations.determinize(Operations.removeDeadStates(a),Integer.MAX_VALUE);    Automaton lb=MinimizationOperations.minimize(a,Integer.MAX_VALUE);    assertTrue(Operations.sameLanguage(la,lb));  }}  }
class C{  public void dumpClientState(){  Properties props=null;  if (comms != null && comms.getClientState() != null) {    props=comms.getClientState().getDebug();    log.fine(CLASS_NAME,"dumpClientState",dumpProperties(props,clientID + " : ClientState").toString());  }}  }
class C{  public void testConsumeExpiredQueue() throws Exception {  MessageProducer producer=createProducer(timeToLive);  consumerDestination=session.createQueue(getConsumerSubject());  producerDestination=session.createQueue(getProducerSubject());  MessageConsumer consumer=createConsumer();  connection.start();  for (int i=0; i < data.length; i++) {    Message message=session.createTextMessage(data[i]);    message.setStringProperty("stringProperty",data[i]);    message.setIntProperty("intProperty",i);    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.debug("About to send a queue message: " + message + " with text: "+ data[i]);      }    }    producer.send(producerDestination,message);  }  Thread.sleep(timeToLive + 1000);  assertNull(consumer.receive(1000));}  }
class C{  public void undo(){  for (  final ISelectionHistoryListener listener : m_listeners) {    try {      listener.startedUndo();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_graph.selectNodes(m_graph.getSelectedNodes(),false);  m_graph.selectNodes(getUndoSnapshot(true).getSelection(),true);  for (  final ISelectionHistoryListener listener : m_listeners) {    try {      listener.finishedUndo();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  @Override public Object create(SimpleObject obj,RequestContext context) throws ResponseException {  try {    logger.request(context,this,"create",obj);    Object result=createInner(obj);    logger.reply(context,this,"create",result);    return result;  } catch (  Exception e) {    logger.error(context,this,"create",e);    throw e;  }}  }
class C{  public boolean isEmpty(){  return getNodes().isEmpty();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.ENRICHER__PART:    setPart(PART_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  protected Entity_Impl(){  super();}  }
class C{  public ChiSquare(double freedom,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  Node(){  key=null;  next=prev=this;}  }
class C{  public BETitlePane(JRootPane root,BERootPaneUI ui){  this.rootPane=root;  rootPaneUI=ui;  state=-1;  installSubcomponents();  determineColors();  installDefaults();  setLayout(createLayout());}  }
class C{  public boolean isTraceResolution(){  return traceResolution;}  }
class C{  public ImageGraphicAttribute(Image image,int alignment,float originX,float originY){  super(alignment);  fImage=image;  fImageWidth=image.getWidth(null);  fImageHeight=image.getHeight(null);  fOriginX=originX;  fOriginY=originY;}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Graphics2D g2d=(Graphics2D)g;  Composite originalComposite=null;  if (getAlpha() < 1.0f) {    originalComposite=g2d.getComposite();    g2d.setComposite(getAlphaComposite());  }  Paint paint=getPaint();  if (paint == null)   g2d.setColor(c.getSelectionColor()); else   g2d.setPaint(paint);  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds; else     alloc=bounds.getBounds();    g2d.fillRect(alloc.x,alloc.y,alloc.width,alloc.height);    if (getAlpha() < 1.0f)     g2d.setComposite(originalComposite);    return alloc;  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();      if (roundedEdges) {        g2d.fillRoundRect(r.x,r.y,r.width,r.height,ARCWIDTH,ARCHEIGHT);      } else {        g2d.fillRect(r.x,r.y,r.width,r.height);      }      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);      return r;    } catch (    BadLocationException ble) {      ble.printStackTrace();    } finally {      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);    }  }  return null;}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.336 -0500",hash_original_method="F9ED2F3CC1A3E5AAFC55A34E4134AE5C",hash_generated_method="3042A9D3F410CF5B615273264EA8BCBD") public static XmlPullParser newPullParser(){  try {    KXmlParser parser=new KXmlParser();    parser.setFeature(XmlPullParser.FEATURE_PROCESS_DOCDECL,true);    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);    return parser;  } catch (  XmlPullParserException e) {    throw new AssertionError();  }}  }
class C{  public static String rtrimWildcardTokens(String input){  return rtrimWildcardTokens(input,DEFAULT_PATH_SEPARATOR);}  }
class C{  protected SelectedTag defaultClusterType(){  return new SelectedTag(SubspaceCluster.UNIFORM_RANDOM,SubspaceCluster.TAGS_CLUSTERTYPE);}  }
class C{  static List<RefCountChangeInfo> peekRefCountInfo(long address){  return getInstance().peekRefCountInfo(address);}  }
class C{  private AjaxResult(){}  }
class C{  public ScriptBuilder smallNum(int num){  return smallNum(chunks.size(),num);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return URL;default :  return null;}}  }
class C{  private void dynInit(){  Properties ctx=Env.getCtx();  m_AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  fieldAcctSchema=new VLookup("C_AcctSchema_ID",false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_C_AcctSchema_ID),DisplayType.TableDir));  fieldAcctSchema.addActionListener(this);  fieldAcctSchema.setValue(MClient.get(Env.getCtx()).getAcctSchema().getC_AcctSchema_ID());  Dimension dim=fieldAcctSchema.getPreferredSize();  dim.width=300;  fieldAcctSchema.setPreferredSize(dim);  fieldOrg=new VLookup("AD_Org_ID",false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_AD_Org_ID),DisplayType.TableDir));  if (fieldOrg.getValue() == null || ((Integer)fieldOrg.getValue()).intValue() != 0)   fieldOrg.setValue(Env.getAD_Org_ID(Env.getCtx()));  dim=fieldOrg.getPreferredSize();  dim.width=300;  fieldOrg.setPreferredSize(dim);  fieldBPartner=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  fieldProduct=new VLookup("M_Product_ID",false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_M_Product_ID),DisplayType.Search));  MLookup lookup;  try {    lookup=MLookupFactory.get(Env.getCtx(),m_WindowNo,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_Account_ID),DisplayType.TableDir,Env.getLanguage(Env.getCtx()),MFactAcct.COLUMNNAME_Account_ID,0,false,"C_ElementValue.IsSummary = 'N'");  } catch (  Exception e) {    lookup=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MFactAcct.Table_Name,MFactAcct.COLUMNNAME_Account_ID),DisplayType.TableDir);  }  fieldAccount=new VLookup("Account_ID",true,false,true,lookup);  dim=fieldAccount.getPreferredSize();  dim.width=300;  fieldAccount.setPreferredSize(dim);  m_sql=miniTable.prepareTable(new ColumnInfo[]{new ColumnInfo(Msg.translate(ctx,"Amt"),"abs(fa.amtacctdr-fa.amtacctcr)",BigDecimal.class),new ColumnInfo(Msg.translate(ctx,"AmtAcct"),"(fa.amtacctdr-fa.amtacctcr)",BigDecimal.class,true,true,null),new ColumnInfo("DR/CR","(CASE WHEN (fa.amtacctdr-fa.amtacctcr) < 0 THEN 'CR' ELSE 'DR' END)",String.class),new ColumnInfo(" ","fa.Fact_Acct_ID",IDColumn.class,false,false,null),new ColumnInfo(Msg.translate(ctx,"C_BPartner_ID"),"bp.Name",String.class),new ColumnInfo(Msg.translate(ctx,"DateAcct"),"fa.DateAcct",Timestamp.class),new ColumnInfo(Msg.translate(ctx,"GL_Category_ID"),"glc.Name",String.class),new ColumnInfo(Msg.translate(ctx,"M_Product_ID"),"p.Value",String.class),new ColumnInfo(Msg.translate(ctx,"Qty"),"Qty",BigDecimal.class),new ColumnInfo(Msg.translate(ctx,"Description"),"fa.Description",String.class),new ColumnInfo(Msg.translate(ctx,"MatchCode"),"r.MatchCode",String.class),new ColumnInfo(Msg.translate(ctx,"DateTrx"),"fa.DateTrx",Timestamp.class),new ColumnInfo(Msg.translate(ctx,"AD_Org_ID"),"o.Value",String.class)},"Fact_Acct fa" + " LEFT OUTER JOIN Fact_Reconciliation r ON (fa.Fact_Acct_ID=r.Fact_Acct_ID)" + " LEFT OUTER JOIN C_BPartner bp ON (fa.C_BPartner_ID=bp.C_BPartner_ID)"+ " LEFT OUTER JOIN AD_Org o ON (o.AD_Org_ID=fa.AD_Org_ID)"+ " LEFT OUTER JOIN M_Product p ON (p.M_Product_ID=fa.M_Product_ID)"+ " LEFT OUTER JOIN GL_Category glc ON (fa.GL_Category_ID=glc.GL_Category_ID)"," fa.AD_Client_ID=?",true,"fa");  miniTable.getModel().addTableModelListener(this);  miniTable.setColumnVisibility(miniTable.getColumnModel().getColumn(1),false);}  }
class C{  public static TStream<JsonObject> waterDetector(Topology topology,int wellId){  Random rNum=new Random();  TStream<Integer> temp=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> acidity=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> ecoli=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> lead=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> id=topology.poll(null,1,TimeUnit.SECONDS);  temp.tag("temperature","well" + wellId);  acidity.tag("acidity","well" + wellId);  ecoli.tag("ecoli","well" + wellId);  lead.tag("lead","well" + wellId);  id.tag("well" + wellId);  TStream<JsonObject> tempObj=temp.map(null);  TStream<JsonObject> acidityObj=acidity.map(null);  TStream<JsonObject> ecoliObj=ecoli.map(null);  TStream<JsonObject> leadObj=lead.map(null);  TStream<JsonObject> idObj=id.map(null);  HashSet<TStream<JsonObject>> set=new HashSet<TStream<JsonObject>>();  set.add(acidityObj);  set.add(acidityObj);  set.add(ecoliObj);  set.add(leadObj);  set.add(idObj);  TStream<JsonObject> allReadings=tempObj.union(set);  return allReadings;}  }
class C{  @Override public void xml(String xml){  if (Helper.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e("Invalid xml");  }}  }
class C{  private String findCurrentHistoryUser(){  if (sessionCtx == null) {    return "";  }  if (sessionCtx.getCallerPrincipal() == null) {    return "";  }  final PlatformUser user=getCurrentUserIfPresent();  if (user == null) {    return sessionCtx.getCallerPrincipal().getName();  }  OnBehalfUserReference onBehalf=user.getMaster();  long key;  if (onBehalf == null) {    key=user.getKey();  } else {    key=onBehalf.getMasterUser().getKey();  }  return String.valueOf(key);}  }
class C{  public BMPImageWriter(ImageWriterSpi originator){  super(originator);}  }
class C{  private static img createControlButtonImage(String name,String js_command,boolean enabled){  StringBuffer imgName=new StringBuffer("wf" + name);  if (!enabled)   imgName.append("D");  imgName.append("24.gif");  img img=new img(WebEnv.getImageDirectory(imgName.toString()),name);  if (enabled)   img.setAlt(Msg.getMsg(AD_Language,name));  img.setID("imgButton");  if (js_command != null && js_command.length() > 0 && enabled) {    img.setOnClick("document." + FORM_NAME + "."+ M_Command+ ".value='"+ name+ "';"+ js_command);  }  return img;}  }
class C{  public static String format(final boolean b){  return b ? "1" : "0";}  }
class C{  public static String toJSONString(Map map){  final StringWriter writer=new StringWriter();  try {    writeJSONString(map,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MFieldVO[");  sb.append(AD_Column_ID).append("-").append(ColumnName).append("]");  return sb.toString();}  }
class C{  public synchronized void close() throws IOException {  if (in == null)   return;  in.close();  in=null;  buf=null;}  }
class C{  @Override public boolean isPostOperation(){  return this.postOperation;}  }
class C{  public MutableString(final char[] a){  makeCompactMutableString(a.length);  System.arraycopy(a,0,array,0,array.length);}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    if (zzMarkedPosL > zzStartRead) {switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL - 1] : zzBufferL.charAt(zzMarkedPosL - 1))) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        zzAtBOL=true;      break;case '\r':    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=(zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n'; else     if (zzAtEOF)     zzAtBOL=false; else {      boolean eof=zzRefill();      zzMarkedPosL=zzMarkedPos;      zzEndReadL=zzEndRead;      zzBufferL=zzBuffer;      if (eof)       zzAtBOL=false; else       zzAtBOL=(zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';    }  break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {  zzInput=YYEOF;  break zzForAction;} else {  zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 39:{return FIXED;}case 44:break;case 1:{yybegin(IN_COMMENT);return COMMENT;}case 45:break;case 7:{yybegin(INIT);return ERROR;}case 46:break;case 10:{yybegin(PRE_INDENTED);myIndent=yylength();return chooseType();}case 47:break;case 26:{yybegin(INIT);return FOOTNOTE;}case 48:break;case 27:{yybegin(INIT);return CITATION;}case 49:break;case 4:{yybegin(INIT);return LINE;}case 50:break;case 18:{return LINE;}case 51:break;case 25:{return SUBSTITUTION;}case 52:break;case 17:{yybegin(IN_FOOTNOTE);return LINE;}case 53:break;case 16:{yybegin(QUOTED);return chooseType();}case 54:break;case 33:{return INTERPRETED;}case 55:break;case 9:{return COMMENT;}case 56:break;case 22:{yybegin(INIT);return COMMENT;}case 57:break;case 12:{yypushback(1);myIndent=0;myState=0;yybegin(INIT);}case 58:break;case 41:{return TITLE;}case 59:break;case 24:{yybegin(IN_VALUE);return ANONYMOUS_HYPERLINK;}case 60:break;case 3:{return chooseType();}case 61:break;case 15:{yybegin(PRE_QUOTED);return chooseType();}case 62:break;case 36:{yypushback(1);return FIELD;}case 63:break;case 32:{yypushback(1);yybegin(INIT);return REFERENCE_NAME;}case 64:break;case 35:{return ITALIC;}case 65:break;case 42:{return DIRECT_HYPERLINK;}case 66:break;case 8:{return WHITESPACE;}case 67:break;case 20:{yybegin(IN_LINEBEGIN);return WHITESPACE;}case 68:break;case 5:{yypushback(1);yybegin(INIT);}case 69:break;case 13:{if (yylength() >= myIndent) {yybegin(PRE_INDENTED);return chooseType();} else {myIndent=0;yypushback(yylength());yybegin(INIT);}}case 70:break;case 31:{yybegin(INIT);return HYPERLINK;}case 71:break;case 28:{String value=yytext().toString().trim();if ("python".equalsIgnoreCase(value)) {myState=1;yybegin(IN_INLINE);} else if ("django".equalsIgnoreCase(value) || "html+django".equalsIgnoreCase(value)) {myState=2;yybegin(IN_INLINE);} else if ("javascript".equalsIgnoreCase(value)) {myState=3;yybegin(IN_INLINE);} else {yybegin(INIT);}return LINE;}case 72:break;case 23:{yybegin(IN_VALUE);return CUSTOM_DIRECTIVE;}case 73:break;case 21:{yybegin(IN_LINE);return SPEC_SYMBOL;}case 74:break;case 6:{yybegin(INIT);return WHITESPACE;}case 75:break;case 19:{yypushback(1);yybegin(IN_LINE);}case 76:break;case 34:{yybegin(IN_INLINE);return LITERAL_BLOCK_START;}case 77:break;case 38:{yypushback(1);yybegin(INIT);return FIELD;}case 78:break;case 2:{yybegin(INDENTED);return chooseType();}case 79:break;case 43:{yybegin(IN_HIGHLIGHT);return CUSTOM_DIRECTIVE;}case 80:break;case 40:{return BOLD;}case 81:break;case 29:{yybegin(IN_EXPLISIT_MARKUP);return EXPLISIT_MARKUP_START;}case 82:break;case 37:{yybegin(IN_VALUE);return DIRECTIVE;}case 83:break;case 11:{yybegin(PRE_QUOTED);return SPEC_SYMBOL;}case 84:break;case 14:{yypushback(1);myState=0;yybegin(INIT);}case 85:break;case 30:{yypushback(1);return REFERENCE_NAME;}case 86:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void attributeAsClassAt(int columnIndex){  ((DataTableModel)getModel()).attributeAsClassAt(columnIndex);}  }
class C{  public int addLoad(int n,CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.booleanType || type == CtClass.charType || type == CtClass.byteType || type == CtClass.shortType || type == CtClass.intType)     addIload(n); else     if (type == CtClass.longType) {      addLload(n);      return 2;    } else     if (type == CtClass.floatType)     addFload(n); else     if (type == CtClass.doubleType) {      addDload(n);      return 2;    } else     throw new RuntimeException("void type?");  } else   addAload(n);  return 1;}  }
class C{  private void visitClass(final Class clazz){  Method[] methods=clazz.getDeclaredMethods();  for (  Method method : methods) {    Class<?>[] exceptionTypes=method.getExceptionTypes();    String[] exceptions=new String[exceptionTypes.length];    for (int i=0; i < exceptions.length; i++) {      exceptions[i]=BytecodeHelper.getClassInternalName(exceptionTypes[i]);    }    visitMethod(method.getModifiers(),method.getName(),BytecodeHelper.getMethodDescriptor(method.getReturnType(),method.getParameterTypes()),null,exceptions);  }  Constructor[] constructors=clazz.getDeclaredConstructors();  for (  Constructor method : constructors) {    Class<?>[] exceptionTypes=method.getExceptionTypes();    String[] exceptions=new String[exceptionTypes.length];    for (int i=0; i < exceptions.length; i++) {      exceptions[i]=BytecodeHelper.getClassInternalName(exceptionTypes[i]);    }    visitMethod(method.getModifiers(),"<init>",BytecodeHelper.getMethodDescriptor(Void.TYPE,method.getParameterTypes()),null,exceptions);  }  for (  Class intf : clazz.getInterfaces()) {    visitClass(intf);  }  Class superclass=clazz.getSuperclass();  if (superclass != null)   visitClass(superclass);  for (  Map.Entry<String,Boolean> entry : delegatedClosures.entrySet()) {    Boolean visited=entry.getValue();    if (!visited) {      String name=entry.getKey();      if (!"*".equals(name)) {        visitMethod(ACC_PUBLIC,name,"([Ljava/lang/Object;)Ljava/lang/Object;",null,null);      }    }  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolutionForCamera);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher){  this(cipher,new PKCS7Padding());}  }
class C{  public Builder refreshOnUp(boolean enabled){  mOptions.refreshOnUp=enabled;  return this;}  }
class C{  private void initGrain(){  for (int i=0; i < 8; i++) {    output=getOutput();    nfsr=shift(nfsr,getOutputNFSR() ^ lfsr[0] ^ output);    lfsr=shift(lfsr,getOutputLFSR() ^ output);  }  initialised=true;}  }
class C{  private BigInteger[] divideAndRemainderKnuth(BigInteger val){  BigInteger[] result=new BigInteger[2];  MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(this.mag), b=new MutableBigInteger(val.mag);  MutableBigInteger r=a.divideKnuth(b,q);  result[0]=q.toBigInteger(this.signum == val.signum ? 1 : -1);  result[1]=r.toBigInteger(this.signum);  return result;}  }
class C{  static public double k1e(double x) throws ArithmeticException {  double y;  if (x <= 0.0)   throw new ArithmeticException();  if (x <= 2.0) {    y=x * x - 2.0;    y=Math.log(0.5 * x) * i1(x) + Arithmetic.chbevl(y,A_k1,11) / x;    return (y * Math.exp(x));  }  return (Arithmetic.chbevl(8.0 / x - 2.0,B_k1,25) / Math.sqrt(x));}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  protected void append(int value){  mMessage.write(value);  mPosition++;}  }
class C{  @Override public void executeScriptFiles(List<String> scriptFilePaths){  for (  String scriptFilePath : scriptFilePaths) {    File scriptFile=new File(scriptFilePath);    if (scriptFile.exists()) {      try {        JvmLauncher java=createJvmLauncher(false);        addWlstArguments(java);        java.addAppArgument(scriptFile);        int result=java.execute();        if (result != 0) {          throw new ContainerException("Failure when invoking WLST script," + " java returned " + result);        }      } catch (      Exception e) {        throw new CargoException("Cannot execute WLST script.",e);      }    } else {      getLogger().warn(String.format("Script file %s doesn't exists.",scriptFilePath),this.getClass().getName());    }  }}  }
class C{  public synchronized String nextTemporaryMapName(){  return "temp." + temporaryMapId++;}  }
class C{  public void updateTimestamp(String columnName,Timestamp x) throws SQLException {  checkUpdatable();  getField(columnName).setTimestamp(x);}  }
class C{  protected ArrayModifiableDBIDs findSNNNeighbors(SimilarityQuery<O> snnInstance,DBIDRef queryObject){  ArrayModifiableDBIDs neighbors=DBIDUtil.newArray();  for (DBIDIter iditer=snnInstance.getRelation().iterDBIDs(); iditer.valid(); iditer.advance()) {    if (snnInstance.similarity(queryObject,iditer) >= epsilon) {      neighbors.add(iditer);    }  }  return neighbors;}  }
class C{  public void initialize() throws PayloadException {  try {    SipFactory sipFactory=SipFactory.getInstance();    SipUtils.HEADER_FACTORY=sipFactory.createHeaderFactory();    SipUtils.ADDR_FACTORY=sipFactory.createAddressFactory();    SipUtils.MSG_FACTORY=sipFactory.createMessageFactory();    Properties properties=new Properties();    properties.setProperty("javax2.sip.STACK_NAME",mLocalIpAddress);    properties.setProperty("gov2.nist.javax2.sip.THREAD_POOL_SIZE","1");    properties.setProperty("javax2.sip.OUTBOUND_PROXY",getOutboundProxy());    if (mSipTraceEnabled) {      boolean cleanLog=true;      File fs=new File(mSipTraceFile);      if (fs.exists()) {        cleanLog=fs.delete();      }      if (cleanLog) {        properties.setProperty("gov2.nist.javax2.sip.TRACE_LEVEL","DEBUG");        properties.setProperty("gov2.nist.javax2.sip.SERVER_LOG",mSipTraceFile);        properties.setProperty("gov2.nist.javax2.sip.LOG_MESSAGE_CONTENT","true");        properties.setProperty("gov2.nist.javax2.sip.LOG_STACK_TRACE_ON_MESSAGE_SEND","true");      }    }    if (mDefaultProtocol.equals(ListeningPoint.TLS)) {      properties.setProperty("gov2.nist.javax2.sip.TLS_CLIENT_PROTOCOLS","SSLv3, TLSv1");      if (KeyStoreManager.isOwnCertificateUsed(mRcsSettings)) {        properties.setProperty("javax2.net.ssl.keyStoreType",KeyStoreManager.getKeystoreType());        String keyStorePath=KeyStoreManager.getKeystore().getPath();        properties.setProperty("javax2.net.ssl.keyStore",keyStorePath);        properties.setProperty("javax2.net.ssl.keyStorePassword",KeyStoreManager.getKeystorePassword());        properties.setProperty("javax2.net.ssl.trustStore",keyStorePath);      } else {        properties.setProperty("gov2.nist.javax2.sip.NETWORK_LAYER","gov2.nist.core.net.SslNetworkLayer");      }    }    mSipStack=sipFactory.createSipStack(properties);    ListeningPoint udp=mSipStack.createListeningPoint(mLocalIpAddress,mListeningPort,ListeningPoint.UDP);    SipProvider udpSipProvider=mSipStack.createSipProvider(udp);    udpSipProvider.addSipListener(this);    mSipProviders.add(udpSipProvider);switch (mDefaultProtocol) {case ListeningPoint.TLS:      ListeningPoint tls=mSipStack.createListeningPoint(mLocalIpAddress,mListeningPort,ListeningPoint.TLS);    SipProvider tlsSipProvider=mSipStack.createSipProvider(tls);  tlsSipProvider.addSipListener(this);mSipProviders.add(tlsSipProvider);mDefaultSipProvider=tlsSipProvider;break;case ListeningPoint.TCP:{ListeningPoint tcp=mSipStack.createListeningPoint(mLocalIpAddress,mListeningPort,ListeningPoint.TCP);SipProvider tcpSipProvider=mSipStack.createSipProvider(tcp);tcpSipProvider.addSipListener(this);mSipProviders.add(tcpSipProvider);mDefaultSipProvider=tcpSipProvider;break;}default :{ListeningPoint tcp=mSipStack.createListeningPoint(mLocalIpAddress,mListeningPort,ListeningPoint.TCP);if (!mTcpFallback) {SipProvider tcpSipProvider=mSipStack.createSipProvider(tcp);tcpSipProvider.addSipListener(this);mSipProviders.add(tcpSipProvider);}mDefaultSipProvider=udpSipProvider;if (mTcpFallback) {mDefaultSipProvider.addListeningPoint(tcp);}break;}}if (sLogger.isActivated()) {if (mDefaultProtocol.equals(ListeningPoint.UDP)) sLogger.debug("Default SIP provider is UDP (TCP fallback=" + mTcpFallback + ")"); else sLogger.debug("Default SIP provider is ".concat(mDefaultProtocol));}mSipStack.start();} catch (TooManyListenersException|SipException|KeyStoreException e) {throw new PayloadException("Unable to instantiate SIP stack for localIpAddress : " + mLocalIpAddress + " with defaultProtocol : "+ mDefaultProtocol,e);}if (sLogger.isActivated()) {sLogger.debug("SIP stack initialized at " + mLocalIpAddress + ":"+ mListeningPort);}}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getLowestChildBottom();    final int end=(getBottom() - getTop()) - getListPaddingBottom();    int bottomOffset=end - lastBottom;    final int firstTop=getHighestChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < getListPaddingTop())) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,getListPaddingTop() - firstTop);      }      offsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int previousPosition=mFirstPosition - 1;        fillUp(previousPosition,getNextChildUpsBottom(previousPosition));        adjustViewsUpOrDown();      }    }  }}  }
class C{  @Override public final BufferedImage toBufferedImage(byte[] bytes,String format) throws IOException {  if (StringUtil.isEmpty(format))   format=ImageUtil.getFormat(bytes,null);  if ("psd".equalsIgnoreCase(format)) {    PSDReader reader=new PSDReader();    reader.read(new ByteArrayInputStream(bytes));    return reader.getImage();  }  if (JAIUtil.isSupportedReadFormat(format)) {    return JAIUtil.read(new ByteArrayInputStream(bytes),format);  }  BufferedImage img=ImageIO.read(new ByteArrayInputStream(bytes));  if (img == null && StringUtil.isEmpty(format))   return JAIUtil.read(new ByteArrayInputStream(bytes),null);  return img;}  }
class C{  @Override public boolean isLive(ObjectReference object){  return GenRC.isRCObject(object) && RCHeader.isLiveRC(object) || (!Space.isInSpace(GenRC.NURSERY,object) && super.isLive(object));}  }
class C{  protected long reallocate(long ptr,int cap){  return GridUnsafe.reallocateMemory(ptr,cap);}  }
class C{  public TunnelProxy() throws IOException {  this(1,10,0);}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsTextAreaUI();}  }
class C{  public static void endGC(){  if (!gatheringStats)   return;  if (phase < MAX_PHASES - 1) {    for (int c=0; c < counters; c++) {      counter[c].phaseChange(phase);    }    phase++;  } else   if (!exceededPhaseLimit) {    Log.writeln("Warning: number of GC phases exceeds MAX_PHASES");    exceededPhaseLimit=true;  }}  }
class C{  public StateMachineTransitionConfigurer<S,E> configureTransitions(){  return adapter.transitionBuilder;}  }
class C{  public static boolean isGeometryClass(Class<?> x){  if (x == null || GEOMETRY_CLASS == null) {    return false;  }  return GEOMETRY_CLASS.isAssignableFrom(x);}  }
class C{  protected static Vec4 CartesianToSpherical(double x,double y,double z){  double rho=Math.sqrt(x * x + y * y + z * z);  double longitude=Math.atan2(x,z);  double latitude=Math.asin(y / rho);  return new Vec4(rho,latitude,longitude);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x78E46415,version=150) public int sctrlHENFindDriver(String drvname){  return 0;}  }
class C{  private void confirmCommitted(long seqno,int waitMillis) throws InterruptedException, ExecutionException {  Future<ReplDBMSHeader> committed=pipeline.watchForCommittedSequenceNumber(seqno,false);  boolean reached=false;  try {    committed.get(waitMillis,TimeUnit.MILLISECONDS);    reached=true;    logger.info("Pipeline has committed base events through seqno=" + seqno);  } catch (  TimeoutException e) {    logger.error("Timed out waiting for seqno: " + seqno);  }catch (  ExecutionException e) {    throw e;  }  Assert.assertTrue("Expected to commit through seqno=" + seqno,reached);}  }
class C{  public BiomeGenerator addFeature(BiomeFeature feature){  this.biomeFeatures.add(feature);  return this;}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public CHM(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DFLT_LOAD_FACTOR) + 1,DFLT_INITIAL_CAP),DFLT_LOAD_FACTOR,DFLT_CONC_LVL);  putAll(m);}  }
class C{  public Bindings add(String property,JTextComponent c,String defaultValue){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,defaultValue));}  }
class C{  public SurroundWithWordSelection(){  super(GlobalTemplateVariables.WordSelection.NAME,"The selected word<br><br>Javadoc templates that contain this variable will also be shown in the 'Source &gt; " + "Surround With > ...' menu.");}  }
class C{  public static String mangleName(Method method,boolean isFull){  StringBuffer sb=new StringBuffer();  sb.append(method.getName());  Class[] params=method.getParameterTypes();  for (int i=0; i < params.length; i++) {    sb.append('_');    sb.append(mangleClass(params[i],isFull));  }  return sb.toString();}  }
class C{  public void update(byte[] b,int len){  int idx=0;  this.value=~this.value;  while (len > 0) {    this.value=table[((int)(this.value ^ b[idx])) & 0xff] ^ (this.value >>> 8);    idx++;    len--;  }  this.value=~this.value;}  }
class C{  public MemoryActivityViewerFrame(String title,boolean resizable,boolean closable,boolean maximizable,boolean iconifiable,int chip,EmulatorUI ui,int[] activityMap,int baseAddress,MemoryActivityViewerFrame parentFrame){  super(title,null,resizable,closable,maximizable,iconifiable,chip,ui);  this.isMaster=false;  this.parentFrame=parentFrame;  this.baseAddress=baseAddress;  getContentPane().add(new MemoryMapComponent(activityMap));  startTimer();}  }
class C{  public void addDelegateParent(DelegableParentAdapter<PARENT,CHILD> delegableParentAdapter){  delegableParentAdapter.setManager(this);  parentDelegates.put(delegableParentAdapter.getParentViewType(),delegableParentAdapter);}  }
class C{  public boolean checkZeroGradientNorm(final double gradientNorm,final Type ecType){  if (gradientNorm >= gradientNormEpsilon_)   return false;  this.ecType=Type.ZeroGradientNorm;  return true;}  }
class C{  private int computeIgnoredBitmapRetainedSize(Snapshot snapshot,Instance leakingInstance){  int bitmapRetainedSize=0;  ClassObj bitmapClass=snapshot.findClass("android.graphics.Bitmap");  for (  Instance bitmapInstance : bitmapClass.getInstancesList()) {    if (isIgnoredDominator(leakingInstance,bitmapInstance)) {      ArrayInstance mBufferInstance=fieldValue(classInstanceValues(bitmapInstance),"mBuffer");      if (mBufferInstance == null) {        continue;      }      long bufferSize=mBufferInstance.getTotalRetainedSize();      long bitmapSize=bitmapInstance.getTotalRetainedSize();      if (bitmapSize < bufferSize) {        bitmapSize+=bufferSize;      }      bitmapRetainedSize+=bitmapSize;    }  }  return bitmapRetainedSize;}  }
class C{  public ClientConnectionResponse(){  super();}  }
class C{  public void println(String message){  System.err.println(prefix + ": " + message);}  }
class C{  protected Map<String,PsiElement> configureByFile(@TestDataFile @NonNls String filePath,@NonNls String markerRegexp){  final String fullPath=getTestDataPath() + filePath;  final VirtualFile vFile=getVirtualFileByName(fullPath);  assertNotNull("file " + fullPath + " not found",vFile);  final String text;  try {    text=VfsUtil.loadText(vFile);  } catch (  IOException e) {    throw new RuntimeException(e);  }  String fileText=StringUtil.convertLineSeparators(text,"\n");  final String fileName=vFile.getName();  return configureByFileText(fileText,fileName,markerRegexp);}  }
class C{  public K progress(View view){  return progress((Object)view);}  }
class C{  public void fireMouseLocation(MouseEvent e){  int x=e.getX();  int y=e.getY();  Point2D llp=null;  Debug.message("mousemodedetail","CoordMouseMode: firing mouse location");  if (infoDelegator != null) {    if (e.getSource() instanceof MapBean) {      llp=((MapBean)e.getSource()).getCoordinates(e);    }    String infoLine;    infoLine=coordFormatter.createCoordinateInformationLine(x,y,llp,this);    InfoDisplayEvent info=new InfoDisplayEvent(this,infoLine,InformationDelegator.COORDINATE_INFO_LINE);    infoDelegator.requestInfoLine(info);  }}  }
class C{  public boolean isDirty(Instruction s,Register r){  HashSet<Register> set=dirtyMap.get(s);  if (set == null) {    return false;  } else {    return set.contains(r);  }}  }
class C{  public Session startSshSessionAndObtainSession(){  Session session=null;  try {    JSch jsch=new JSch();    if (sshMeta.getSshLoginType() == SshLoginType.KEY) {      String workingDir=System.getProperty("user.dir");      String privKeyAbsPath=workingDir + "/" + sshMeta.getPrivKeyRelativePath();      logger.debug("use privkey: path: " + privKeyAbsPath);      if (!PcFileNetworkIoUtils.isFileExist(privKeyAbsPath)) {        throw new RuntimeException("file not found at " + privKeyAbsPath);      }      if (sshMeta.isPrivKeyUsePassphrase() && sshMeta.getPassphrase() != null) {        jsch.addIdentity(privKeyAbsPath,sshMeta.getPassphrase());      } else {        jsch.addIdentity(privKeyAbsPath);      }    }    session=jsch.getSession(sshMeta.getUserName(),targetHost,sshMeta.getSshPort());    if (sshMeta.getSshLoginType() == SshLoginType.PASSWORD) {      session.setPassword(sshMeta.getPassword());    }    session.setConfig("StrictHostKeyChecking","no");  } catch (  Exception t) {    throw new RuntimeException(t);  }  return session;}  }
class C{  public int[] array(int index){  return buffers[index];}  }
class C{  public Mat dhtColumns(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dhtColumns();  return new Mat(dm.toArray());}  }
class C{  public boolean hasAnyLocalInfo(){  return hasAnyLocalInfo;}  }
class C{  protected SelectorMapping createChildSelectorMapping(int specificity){  return new SelectorMapping(specificity);}  }
class C{  public boolean isBinaryAvailable(Context context,String binaryName){  Installer installer;  try {    installer=new Installer(context);  } catch (  IOException ex) {    if (RootTools.debugMode) {      ex.printStackTrace();    }    return false;  }  return (installer.isBinaryInstalled(binaryName));}  }
class C{  public void stopSession(){  if (processor != null) {    processor.stopProcessing();  }  if (outputStream != null)   outputStream.close();}  }
class C{  public void run(String module,String version,String runClass,String... arguments){  setup(module,version);  try {    Class<?> klass=moduleClassLoader.loadClass(runClass);    invokeMain(klass,arguments);  } catch (  ClassNotFoundException|NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public boolean isFragmented(){  return (fragments != null && fragments.length > 0 && fragmentsSize > 0);}  }
class C{  public JBoss73xStandaloneLocalConfigurationCapability(){  super();}  }
class C{  public void showEmpty(View.OnClickListener onClickListener){  isEmptyViewBeingShown=true;  changeViewsVisibility();  if (onClickListener == null) {    viewEmptyTryAgainButton.setVisibility(View.GONE);  } else {    viewEmptyTryAgainButton.setVisibility(View.VISIBLE);    viewEmptyTryAgainButton.setOnClickListener(onClickListener);  }  setViewVisibility(viewEmpty,View.VISIBLE);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  @SuppressWarnings("unchecked") private Iterator<GridH2Row> doFind(@Nullable SearchRow first,boolean includeFirst,@Nullable SearchRow last){  ConcurrentNavigableMap<GridSearchRowPointer,GridH2Row> t=treeForRead();  return doFind0(t,first,includeFirst,last,threadLocalFilter());}  }
class C{  public CtClass makeClass(InputStream classfile,boolean ifNotFrozen) throws IOException, RuntimeException {  compress();  classfile=new BufferedInputStream(classfile);  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  if (ifNotFrozen)   checkNotFrozen(classname);  cacheCtClass(classname,clazz,true);  return clazz;}  }
class C{  public BitVector(BitVector bv){  int len=bv.word.length;  this.word=new long[len];  System.arraycopy(bv.word,0,this.word,0,len);}  }
class C{  public void addTodo(VTodo todo){  addComponent(todo);}  }
class C{  public void clear(){  mCategories.clear();  mTitles.clear();  mValues.clear();}  }
class C{  public boolean isLeaf(){  return this.children.isEmpty();}  }
class C{  public static void safeClose(InputStream in){  try {    if (in != null)     in.close();  } catch (  IOException e) {  }}  }
class C{  private void baseDados(int local){  lista=ControleDAO.getBanco().getLocalizacaoDAO().localizacoes(local);}  }
class C{  public void testBug20504139() throws Exception {  if (Util.isJdbc4()) {    return;  }  createFunction("testBug20504139f","(namef CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ', namef, '!')");  createFunction("`testBug20504139``f`","(namef CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ', namef, '!')");  createProcedure("testBug20504139p","(INOUT namep CHAR(50)) SELECT  CONCAT('Hello, ', namep, '!') INTO namep");  createProcedure("`testBug20504139``p`","(INOUT namep CHAR(50)) SELECT  CONCAT('Hello, ', namep, '!') INTO namep");  for (int testCase=0; testCase < 8; testCase++) {    boolean usePedantic=(testCase & 1) == 1;    boolean useInformationSchema=(testCase & 2) == 2;    boolean useFuncsInProcs=(testCase & 4) == 4;    String connProps=String.format("pedantic=%s,useInformationSchema=%s,getProceduresReturnsFunctions=%s",usePedantic,useInformationSchema,useFuncsInProcs);    System.out.printf("testBug20504139_%d: %s%n",testCase,connProps);    Connection testConn=getConnectionWithProps(connProps);    DatabaseMetaData dbmd=testConn.getMetaData();    ResultSet testRs=null;    try {      int i=1;      try {        for (        String name : new String[]{"testBug20504139f","testBug20504139`f"}) {          testRs=dbmd.getProcedureColumns(null,"",name,"%");          assertTrue(testRs.next());          assertEquals(testCase + "." + i+ ". expected function column name (empty)","",testRs.getString(4));          assertEquals(testCase + "." + i+ ". expected function column type (empty)",DatabaseMetaData.procedureColumnReturn,testRs.getInt(5));          assertTrue(testRs.next());          assertEquals(testCase + "." + i+ ". expected function column name","namef",testRs.getString(4));          assertEquals(testCase + "." + i+ ". expected function column type (empty)",DatabaseMetaData.procedureColumnIn,testRs.getInt(5));          assertFalse(testRs.next());          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("FUNCTION `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve function columns from database meta data.");        }        throw e;      }      i=1;      try {        for (        String name : new String[]{"testBug20504139p","testBug20504139`p"}) {          testRs=dbmd.getProcedureColumns(null,"",name,"%");          assertTrue(testRs.next());          assertEquals(testCase + "." + i+ ". expected procedure column name","namep",testRs.getString(4));          assertEquals(testCase + "." + i+ ". expected procedure column type (empty)",DatabaseMetaData.procedureColumnInOut,testRs.getInt(5));          assertFalse(testRs.next());          testRs.close();          i++;        }      } catch (      SQLException e) {        if (e.getMessage().matches("PROCEDURE `testBug20504139(:?`{2})?[fp]` does not exist")) {          fail(testCase + "." + i+ ". failed to retrieve procedure columns from database meta data.");        }        throw e;      }    }  finally {      testConn.close();    }  }}  }
class C{  public void go(File file,boolean append) throws IOException {  ICalWriter writer=new ICalWriter(file,append,getICalWriterConstructorVersion());  try {    go(writer);  }  finally {    writer.close();  }}  }
class C{  public static void deleteComment(BloggerService myService,String editLinkHref) throws ServiceException, IOException {  URL deleteUrl=new URL(editLinkHref);  myService.delete(deleteUrl);}  }
class C{  public byte[] peek() throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_peek");  try {    return firstElement();  }  finally {    time.stop();  }}  }
class C{  public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.fatalError(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @Override public void onTurnReached(final int currentTurn){  StendhalRPZone zone=getZone();  if (zone != null) {    logger.info("Storing chest in zone " + zone.getName() + " with "+ getSlot("content").size()+ " items while it's open.");    zone.storeToDatabase();  }  if (chestCloser()) {    SingletonRepository.getTurnNotifier().notifyInSeconds(60,this);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.017 -0500",hash_original_method="7165DC7A4A8D5E7DFBA683C58AA682D9",hash_generated_method="5EE318B3E04436ECB25706D9B5714E2F") public BasicLineParser(ProtocolVersion proto){  if (proto == null) {    proto=HttpVersion.HTTP_1_1;  }  this.protocol=proto;}  }
class C{  @Override public void dateOrTimeChanged(DateTimeChangeEvent event){  String messageStart="\n\nThe LocalDateTime in " + dateTimePickerName + " has changed from: (";  String fullMessage=messageStart + event.getOldDateTimeStrict() + ") to ("+ event.getNewDateTimeStrict()+ ").";  if (!panel.messageTextArea.getText().startsWith(messageStart)) {    panel.messageTextArea.setText("");  }  panel.messageTextArea.append(fullMessage);  DateChangeEvent dateEvent=event.getDateChangeEvent();  if (dateEvent != null) {    String dateChangeMessage="\nThe DatePicker value has changed from (" + dateEvent.getOldDate() + ") to ("+ dateEvent.getNewDate()+ ").";    panel.messageTextArea.append(dateChangeMessage);  }  TimeChangeEvent timeEvent=event.getTimeChangeEvent();  if (timeEvent != null) {    String timeChangeMessage="\nThe TimePicker value has changed from (" + timeEvent.getOldTime() + ") to ("+ timeEvent.getNewTime()+ ").";    panel.messageTextArea.append(timeChangeMessage);  }}  }
class C{  private boolean init(){  al.alGenSources(1,_source,0);  if (JoalAudioFactory.checkALError()) {    log.warn("Error creating JoalSource (" + this.getSystemName() + ")");    _source=null;    return false;  }  return true;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private void buildPointsArrays(){  int dX=endPoint.x - startPoint.x;  int dY=endPoint.y - startPoint.y;  double arrowLength=Math.sqrt(dX * dX + dY * dY);  double sin=dY / arrowLength;  double cos=dX / arrowLength;  this.addPoint(startPoint.x,startPoint.y);  this.addPoint((int)Math.round(startPoint.x + tailWidth * sin - tailLength * cos),(int)Math.round(startPoint.y - tailWidth * cos - tailLength * sin));  this.addPoint((int)Math.round(endPoint.x - headLength * cos + arrowWidthAtHead * sin),(int)Math.round(endPoint.y - headLength * sin - arrowWidthAtHead * cos));  this.addPoint((int)Math.round(endPoint.x - headLength * cos + headWidth * sin),(int)Math.round(endPoint.y - headLength * sin - headWidth * cos));  this.addPoint(endPoint.x,endPoint.y);  if (!halved) {    this.addPoint((int)Math.round(endPoint.x - headLength * cos - headWidth * sin),(int)Math.round(endPoint.y - headLength * sin + headWidth * cos));    this.addPoint((int)Math.round(endPoint.x - headLength * cos - arrowWidthAtHead * sin),(int)Math.round(endPoint.y - headLength * sin + arrowWidthAtHead * cos));    this.addPoint((int)Math.round(startPoint.x - tailWidth * sin - tailLength * cos),(int)Math.round(startPoint.y + tailWidth * cos - tailLength * sin));  }  hotArea.addPoint(startPoint.x,startPoint.y);  hotArea.addPoint((int)Math.round(startPoint.x + tailWidth * sin - tailLength * cos),(int)Math.round(startPoint.y - tailWidth * cos - tailLength * sin));  hotArea.addPoint((int)Math.round(endPoint.x - headLength * cos + arrowWidthAtHead * sin),(int)Math.round(endPoint.y - headLength * sin - arrowWidthAtHead * cos));  hotArea.addPoint((int)Math.round(endPoint.x - headLength * cos + headWidth * sin),(int)Math.round(endPoint.y - headLength * sin - headWidth * cos));  hotArea.addPoint(endPoint.x,endPoint.y);  hotArea.addPoint((int)Math.round(endPoint.x - headLength * cos - headWidth * sin),(int)Math.round(endPoint.y - headLength * sin + headWidth * cos));  hotArea.addPoint((int)Math.round(endPoint.x - headLength * cos - arrowWidthAtHead * sin),(int)Math.round(endPoint.y - headLength * sin + arrowWidthAtHead * cos));  hotArea.addPoint((int)Math.round(startPoint.x - tailWidth * sin - tailLength * cos),(int)Math.round(startPoint.y + tailWidth * cos - tailLength * sin));}  }
class C{  private void repaint(long delay){  if (container != null && fBounds != null) {    container.repaint(delay,fBounds.x,fBounds.y,fBounds.width,fBounds.height);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getW_ClickCount_ID() == 0)   setW_ClickCount_ID();  return true;}  }
class C{  protected final long memoryNeededForGrow(){  return neededSpaceForEnsuredSize(this.chunkcount + 1);}  }
class C{  public Set<N> nodes(){  rw.readLock().lock();  try {    return new HashSet<>(nodes);  }  finally {    rw.readLock().unlock();  }}  }
class C{  public static void addIPAddress(String ipAddress){  ipMap.put(ipAddress,System.currentTimeMillis());}  }
class C{  protected void checkParameterCount(int len){  int min=0, max=Integer.MAX_VALUE;switch (info.type) {case COALESCE:case CSVREAD:case LEAST:case GREATEST:    min=1;  break;case NOW:case CURRENT_TIMESTAMP:case RAND:max=1;break;case COMPRESS:case LTRIM:case RTRIM:case TRIM:case FILE_READ:case ROUND:case XMLTEXT:case TRUNCATE:min=1;max=2;break;case TO_CHAR:min=1;max=3;break;case REPLACE:case LOCATE:case INSTR:case SUBSTR:case SUBSTRING:case LPAD:case RPAD:min=2;max=3;break;case CONCAT:case CONCAT_WS:case CSVWRITE:min=2;break;case XMLNODE:min=1;max=4;break;case FORMATDATETIME:case PARSEDATETIME:min=2;max=4;break;case CURRVAL:case NEXTVAL:min=1;max=2;break;case DECODE:case CASE:min=3;break;default :DbException.throwInternalError("type=" + info.type);}boolean ok=(len >= min) && (len <= max);if (!ok) {throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,min + ".." + max);}}  }
class C{  private void regexMetaChar(boolean useBindPrms) throws Exception {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  RegionAttributes regionAttributes=attributesFactory.create();  Region region=cache.createRegion("pos",regionAttributes);  String[] values=new String[]{"active","act**ve","ac+t+ve","?act?ve","act)ve^","|+act(ve","act*+|ve","^+act.ve+^","act[]ve","act][ve","act^[a-z]ve","act/ve","inactive","acxtxve","ac(tiv)e","act()ive","act{}ive","act{ive"};  for (int i=0; i < values.length; i++) {    region.put(new Integer(i),values[i]);  }  region.put(new Integer(values.length + 1),"act%+ive");  region.put(new Integer(values.length + 2),"act_+ive");  QueryService qs=cache.getQueryService();  Query q;  SelectResults results;  for (int i=0; i < values.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos.values p where p like '" + values[i] + "'");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos.values p where p like $1");      results=(SelectResults)q.execute(new Object[]{values[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[i])) {      fail("Unexpected result. expected :" + values[i] + " for the like predicate: "+ values[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }  qs.createIndex("p",IndexType.FUNCTIONAL,"p","/pos.values p");  for (int i=0; i < values.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos.values p where p like '" + values[i] + "'");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos.values p where p like $1");      results=(SelectResults)q.execute(new Object[]{values[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[i])) {      fail("Unexpected result. expected :" + values[i] + " for the like predicate: "+ values[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }}  }
class C{  void clearResult(){  setDisplayString(CHARACTER_ZERO);  this.clearOnNextDigit=true;  this.displayMode=DISPLAY_MODE.INPUT;}  }
class C{  public AllocatedNodesList(File allocNodesFile,BTree btree) throws IOException {  if (allocNodesFile == null) {    throw new IllegalArgumentException("allocNodesFile must not be null");  }  if (btree == null) {    throw new IllegalArgumentException("btree muts not be null");  }  this.nioFile=new NioFile(allocNodesFile);  this.btree=btree;}  }
class C{  public int size(){  return buffer.size();}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.556 -0500",hash_original_method="9BDD4A9455BD1C7063AC3292F21A5391",hash_generated_method="E984B1AF0D90746A0523DDD96252ED83") public static boolean isFinalResponse(int rc){  return rc >= 200 && rc < 700;}  }
class C{  protected void clearFromCursor(){  if (cursor <= 0) {    selections.clear();  } else {    while (cursor < selections.size()) {      selections.remove(selections.size() - 1);    }  }}  }
class C{  public void filter(CharSequence constraint){  mItemAdapter.filter(constraint);}  }
class C{  protected void installListeners(JComponent c){  c.addPropertyChangeListener(this);}  }
class C{  public static void partition(DoubleArrayList list,int from,int to,DoubleArrayList splitters,IntArrayList splitIndexes){  partition(list.elements(),from,to,splitters.elements(),0,splitters.size() - 1,splitIndexes.elements());}  }
class C{  protected int drawMessageSize(){  int sizeDiff=sizeRange[0] == sizeRange[1] ? 0 : rng.nextInt(sizeRange[1] - sizeRange[0]);  return sizeRange[0] + sizeDiff;}  }
class C{  protected void addSocket(IceSocketWrapper socket){  Socket tcpSocket=socket.getTCPSocket();  TransportAddress remoteAddress=null;  if (tcpSocket != null) {    remoteAddress=new TransportAddress(tcpSocket.getInetAddress(),tcpSocket.getPort(),Transport.TCP);  }  addSocket(socket,remoteAddress);}  }
class C{  public CharBuffer deleteCharAt(int index){  int length=length();  if (index < 0 || length < index)   throw new StringIndexOutOfBoundsException();  if (index == length) {    return this;  }  int tail=length - index + 1;  char[] buffer=buffer();  for (int i=0; i < tail; i++)   buffer[index + i]=buffer[index + i + 1];  length(length - 1);  return this;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  protected boolean isEffectToggled(){  return isEffectToggled;}  }
class C{  public static void clear(){  if (bufferEntry != null) {    bufferEntry.clear();  }  bufferEntry=null;}  }
class C{  private View findReferenceChildClosestToStart(RecyclerView.State state){  return mShouldReverseLayout ? findLastReferenceChild(state.getItemCount()) : findFirstReferenceChild(state.getItemCount());}  }
class C{  public void testIOErrorWhileCreatingSocket(){  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().throwsException(new IOException()));  callAsync(rpcChannel,request,ErrorReason.IO_ERROR);  assertNull(callSync(rpcChannel,request,ErrorReason.IO_ERROR));}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mmt";  String parameter="1.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static void fail(String reason) throws RuntimeException {  throw new RuntimeException(reason);}  }
class C{  public Enumeration content(){  return table.elements();}  }
class C{  protected Object[] initializeRoots(){  getTreeElementMap().clear();  List<TreeElement<JsonElement,JsonElement>> roots=new ArrayList<TreeElement<JsonElement,JsonElement>>();  JsonArray rootArray=Utils.getChildrenArray(fInput);  if (rootArray != null) {    for (int i=0; i < rootArray.size(); i++) {      JsonElement rootElement=rootArray.get(i);      if (!Utils.isEmptyJsonObject(rootElement)) {        List<TreeElement<JsonElement,JsonElement>> visibleRoots=initializeTree(rootElement);        roots.addAll(visibleRoots);      }    }    roots=applyFilters(roots);    return roots.toArray();  }  return NO_CHILDREN;}  }
class C{  private Object executeConstant(SQL sql,Query qr,ZConstant constant,int row) throws PageException {switch (constant.getType()) {case ZConstant.COLUMNNAME:{      if (constant.getValue().equals(SQLPrettyfier.PLACEHOLDER_QUESTION)) {        int pos=sql.getPosition();        sql.setPosition(pos + 1);        if (sql.getItems().length <= pos)         throw new DatabaseException("invalid syntax for SQL Statement",null,sql,null);        return sql.getItems()[pos].getValueForCF();      }      return qr.getAt(ListUtil.last(constant.getValue(),".",true),row);    }case ZConstant.NULL:  return null;case ZConstant.NUMBER:return Caster.toDouble(constant.getValue());case ZConstant.STRING:return constant.getValue();case ZConstant.UNKNOWN:default :throw new DatabaseException("invalid constant value",null,sql,null);}}  }
class C{  public static Solenoid solenoid(int pcmID,int solenoidChannel){  return solenoidRegistrar.fetch(new SolenoidID(pcmID,solenoidChannel),Solenoid.class,null);}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  @Override public void onTabClicked(int position){}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  double weight=1;  int numPointsToUse=8;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double sumWeights;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  String attributeName=args[1];  firstLineHeader=Boolean.parseBoolean(args[2]);  outputHeader=args[3];  resolution=Double.parseDouble(args[4]);  weight=Double.parseDouble(args[5]);  if (!args[6].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[6]);  }  if (maxDist == Double.POSITIVE_INFINITY) {    showFeedback("Unspecified maximum distance.");    return;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        for (int r=0; r < inputShape.getNumberOfRecords(); r++) {          double[][] points=inputShape.getRecord(r).getGeometry().getPoints();          numPoints+=points.length;        }      } else {        nlines=countLinesInFile(pointFiles[i]);        if (firstLineHeader) {          numPoints+=nlines - 1;        } else {          numPoints+=nlines;        }      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        double[][] vertices;        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        ShapeType shapeType=inputShape.getShapeType();        String[] attributeFieldNames=inputShape.getAttributeTableFields();        int fieldNum=-1;        for (int q=0; q < attributeFieldNames.length; q++) {          String str=attributeFieldNames[q];          if (str.toLowerCase().trim().equals(attributeName.toLowerCase().trim())) {            fieldNum=q;            break;          }        }        boolean useZ=false;        boolean useM=false;        if (fieldNum < 0) {          if (attributeName.toLowerCase().trim().equals("z") && shapeType.getDimension() == ShapeTypeDimension.Z) {            useZ=true;          } else           if (attributeName.toLowerCase().trim().equals("m") && shapeType.getDimension() == ShapeTypeDimension.M) {            useM=true;          }        }        for (        ShapeFileRecord record : inputShape.records) {          int recNumber=record.getRecordNumber();          double[] zArray=null;          double[] mArray=null;switch (shapeType) {case POINT:            whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());          vertices=recPoint.getPoints();        break;case POINTZ:      PointZ recPointZ=(PointZ)record.getGeometry();    vertices=recPointZ.getPoints();  zArray=new double[]{recPointZ.getZ()};break;case POINTM:PointM recPointM=(PointM)record.getGeometry();vertices=recPointM.getPoints();mArray=new double[]{recPointM.getM()};break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)record.getGeometry();vertices=recMultiPoint.getPoints();break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)record.getGeometry();vertices=recMultiPointZ.getPoints();zArray=recMultiPointZ.getzArray();break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)record.getGeometry();vertices=recMultiPointM.getPoints();mArray=recMultiPointM.getmArray();break;default :showFeedback("Invalid shape type for interpolation.");return;}if (!useZ && !useM) {Object[] rowData=inputShape.getAttributeTable().getRecord(recNumber - 1);z=(double)rowData[fieldNum];for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useZ && zArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,zArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useM && mArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,mArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}}}} else {DataInputStream in=null;BufferedReader br=null;try {FileInputStream fstream=new FileInputStream(pointFiles[i]);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));String line;String[] str;lineNum=1;while ((line=br.readLine()) != null) {str=line.split(delimiter);if (str.length <= 1) {delimiter="\t";str=line.split(delimiter);if (str.length <= 1) {delimiter=" ";str=line.split(delimiter);if (str.length <= 1) {delimiter=",";str=line.split(delimiter);}}}if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {x=Double.parseDouble(str[0]);y=Double.parseDouble(str[1]);z=Double.parseDouble(str[2]);double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}lineNum++;nlines++;progress=(int)(100d * nlines / numPoints);updateProgress("Reading point data:",progress);}in.close();br.close();} catch (java.io.IOException e) {System.err.println("Error: " + e.getMessage());} finally {try {if (in != null || br != null) {in.close();br.close();}} catch (java.io.IOException ex) {}}}}west=minX - 0.5 * resolution;north=maxY + 0.5 * resolution;nrows=(int)(Math.ceil((north - minY) / resolution));ncols=(int)(Math.ceil((maxX - west) / resolution));south=north - nrows * resolution;east=west + ncols * resolution;fw=new FileWriter(outputHeader,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(ncols);out.println(str1);str1="Rows:\t" + Integer.toString(nrows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + noData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);out.close();WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");double northing, easting;double halfResolution=resolution / 2;double dist=0;for (row=0; row < nrows; row++) {for (col=0; col < ncols; col++) {easting=(col * resolution) + (west + halfResolution);northing=(north - halfResolution) - (row * resolution);double[] entry={northing,easting};results=pointsTree.neighborsWithinRange(entry,maxDist);sumWeights=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=Math.pow(Math.sqrt(results.get(i).distance),weight);sumWeights+=1 / dist;} else if (results.get(i).distance == 0) {break;}}if (sumWeights > 0) {z=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=1 / Math.pow(Math.sqrt(results.get(i).distance),weight);z+=(dist * results.get(i).value) / sumWeights;} else if (results.get(i).distance == 0) {z=results.get(i).value;break;}}image.setValue(row,col,z);} else {image.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (nrows - 1));updateProgress("Interpolating point data:",progress);}image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");image.addMetadataEntry("Created on " + new Date());image.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private static void dualPivotQuicksort(float[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  float ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    float t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    float t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    float t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    float t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    float t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  float pivot1=ae2;  a[e2]=a[left];  float pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  private static String[] tokenizeTag(String fullTagExpression){  fullTagExpression=fullTagExpression.replace("\\s+"," ").trim();  if (fullTagExpression.length() == 0) {    return null;  }  if (fullTagExpression.contains(SPACE)) {    fullTagExpression=fullTagExpression.substring(0,fullTagExpression.indexOf(SPACE));  }  return fullTagExpression.split("\\.");}  }
class C{  public SimpleString concat(final SimpleString toAdd){  byte[] bytes=new byte[data.length + toAdd.getData().length];  System.arraycopy(data,0,bytes,0,data.length);  System.arraycopy(toAdd.getData(),0,bytes,data.length,toAdd.getData().length);  return new SimpleString(bytes);}  }
class C{  protected PropertyTypeImpl(){  super();}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override protected void initImpl(Context context,TypedArray attrs){  initInflate(context,getLayoutInflateId());}  }
class C{  private List<VolumeDescriptor> createVolumeDescriptors(final SRDFRecommendation recommendation,final List<URI> volumeURIs,final VirtualPoolCapabilityValuesWrapper capabilities) throws ControllerException {  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  for (  URI volumeURI : volumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    VolumeDescriptor.Type volumeType=VolumeDescriptor.Type.SRDF_SOURCE;    if (recommendation.getVpoolChangeVolume() != null && recommendation.getVpoolChangeVolume().equals(volume.getId())) {      volumeType=VolumeDescriptor.Type.SRDF_EXISTING_SOURCE;      VolumeDescriptor desc=new VolumeDescriptor(volumeType,volume.getStorageController(),volume.getId(),volume.getPool(),null,capabilities,volume.getCapacity());      Map<String,Object> volumeParams=new HashMap<String,Object>();      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,recommendation.getVpoolChangeVolume());      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,recommendation.getVpoolChangeVpool());      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());      desc.setParameters(volumeParams);      descriptors.add(desc);      _log.info("Adding Source Volume Descriptor for: " + desc.toString());    } else {      if (volume.getPersonality() == null) {        throw APIException.badRequests.srdfVolumeMissingPersonalityAttribute(volume.getId());      }      if (volume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString())) {        volumeType=VolumeDescriptor.Type.SRDF_TARGET;      }      VolumeDescriptor desc=new VolumeDescriptor(volumeType,volume.getStorageController(),volume.getId(),volume.getPool(),null,capabilities,volume.getCapacity());      descriptors.add(desc);      if (volumeType == VolumeDescriptor.Type.SRDF_TARGET) {        SRDFRecommendation.Target target=recommendation.getVirtualArrayTargetMap().get(volume.getVirtualArray());        if (target != null) {          List<VolumeDescriptor> targetDescriptors=target.getDescriptors();          if (targetDescriptors == null) {            targetDescriptors=new ArrayList<VolumeDescriptor>();            target.setDescriptors(targetDescriptors);          }          targetDescriptors.add(desc);        }        _log.error("No target recommendation found in the recommendation virtualArrayTargetMap");      }      _log.info("Adding Non-Source Volume Descriptor for: " + desc.toString());    }  }  return descriptors;}  }
class C{  public static XmlPullParserFactory newInstance() throws XmlPullParserException {  return newInstance(null,null);}  }
class C{  public static java.sql.Time toSqlTime(String time){  java.util.Date newDate=toDate("1/1/1970",time);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  private boolean doesProviderExistForDomain(String domain){  URIQueryResultList providers=new URIQueryResultList();  try {    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAuthnProviderDomainConstraint(domain),providers);  } catch (  DatabaseException ex) {    _log.error("Could not query for authn providers to check for existing domain {}",domain,ex.getStackTrace());    throw ex;  }  return providers.iterator().hasNext();}  }
class C{  public static String hideTargetTagsDropHintScript(){  return TARGET_TAG_DROP_REMOVE_SCRIPT;}  }
class C{  public static void DSTORE_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.DSTORE_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static Scale percentiles(){  return scale(100);}  }
class C{  public ShortMemberValue(int index,ConstPool cp){  super('S',cp);  this.valueIndex=index;}  }
class C{  public static void testRandomConcurrentReadWriteThreads(IntToIntArrayMap map,ArrayList<Integer> defaultValue,int numReaders,Map<Integer,ArrayList<Integer>> keysToValueMap,Random random){  int maxWaitingTimeForThreads=100;  CountDownLatch readersDoneLatch=new CountDownLatch(numReaders);  List<IntToIntArrayMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  Iterator<Map.Entry<Integer,ArrayList<Integer>>> iterator=keysToValueMap.entrySet().iterator();  for (int i=0; i < numReaders; i++) {    readers.add(new IntToIntArrayMapReader(map,new CountDownLatch(0),readersDoneLatch,iterator.next().getKey(),random.nextInt(maxWaitingTimeForThreads)));  }  CountDownLatch writerDoneLatch=new CountDownLatch(keysToValueMap.size());  MapWriterInfo mapWriterInfo=new MapWriterInfo(keysToValueMap,new CountDownLatch(0),writerDoneLatch);  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<Callable<Integer>> allThreads=Lists.newArrayListWithCapacity(numReaders + 1);  allThreads.add(Executors.callable(new IntToIntArrayMapWriter(map,mapWriterInfo),1));  for (int i=0; i < numReaders; i++) {    allThreads.add(Executors.callable(readers.get(i),1));  }  Collections.shuffle(allThreads,random);  try {    List<Future<Integer>> results=executor.invokeAll(allThreads,10,TimeUnit.SECONDS);    for (    Future<Integer> result : results) {      assertTrue(result.isDone());      assertEquals(1,result.get().intValue());    }  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a thread was interrupted: ",e);  }catch (  ExecutionException e) {    throw new RuntimeException("Execution issue in an executor thread: ",e);  }  try {    readersDoneLatch.await();    writerDoneLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  IntToIntArrayMapReader reader : readers) {    IntIterator iter=map.get(reader.key);    ArrayList<Integer> expectedValue=new ArrayList<Integer>();    while (iter.hasNext()) {      expectedValue.add(iter.next());    }    assertTrue((reader.getValue().equals(defaultValue)) || (reader.getValue().equals(expectedValue)));  }}  }
class C{  public static double calculateSSR(Instances data,Attribute chosen,double slope,double intercept) throws Exception {  double ssr=0.0;  for (int i=0; i < data.numInstances(); i++) {    double yHat=slope * data.instance(i).value(chosen) + intercept;    double resid=data.instance(i).value(data.classIndex()) - yHat;    ssr+=resid * resid;  }  return ssr;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public static long cvSortOrderVal(String cvName){  final int MAX_CVMNUM_SPACE=1200;  String[] cvNumStrings=cvName.split("\\.");  long sortVal=0;  for (int i=0; i < (cvNumStrings.length); i++) {    sortVal=(sortVal * MAX_CVMNUM_SPACE) + Integer.parseInt(cvNumStrings[i]);  }  return sortVal;}  }
class C{  @Override public boolean standaloneSet(){  return standaloneSet;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }}  }
class C{  @Override public boolean equals(Object object){  if (object == null) {    return false;  }  if (object == this) {    return true;  }  if (super.equals(object) && object instanceof ShipNeedle) {    return true;  }  return false;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=stream.putFields();  fields.put("positivePrefix",ndf.getPositivePrefix());  fields.put("positiveSuffix",ndf.getPositiveSuffix());  fields.put("negativePrefix",ndf.getNegativePrefix());  fields.put("negativeSuffix",ndf.getNegativeSuffix());  fields.put("posPrefixPattern",(String)null);  fields.put("posSuffixPattern",(String)null);  fields.put("negPrefixPattern",(String)null);  fields.put("negSuffixPattern",(String)null);  fields.put("multiplier",ndf.getMultiplier());  fields.put("groupingSize",(byte)ndf.getGroupingSize());  fields.put("groupingUsed",ndf.isGroupingUsed());  fields.put("decimalSeparatorAlwaysShown",ndf.isDecimalSeparatorAlwaysShown());  fields.put("parseBigDecimal",ndf.isParseBigDecimal());  fields.put("roundingMode",roundingMode);  fields.put("symbols",symbols);  fields.put("useExponentialNotation",false);  fields.put("minExponentDigits",(byte)0);  fields.put("maximumIntegerDigits",ndf.getMaximumIntegerDigits());  fields.put("minimumIntegerDigits",ndf.getMinimumIntegerDigits());  fields.put("maximumFractionDigits",ndf.getMaximumFractionDigits());  fields.put("minimumFractionDigits",ndf.getMinimumFractionDigits());  fields.put("serialVersionOnStream",4);  stream.writeFields();}  }
class C{  public void end() throws IOException {  writeCode(0);  out.flush();  byte[] bytes=bout.toByteArray();  if (labels != null) {    if (jumps != null) {      fixupJumps(bytes);    }    if (skips != null) {      fixupSkips(bytes);    }  }  if (blocks != null) {    fixupBlocks(bytes);  }  writeBytes(bytes);}  }
class C{  @HLEFunction(nid=0x586DB82C,version=150) public int sceUsbActivate(int pid){  return sceUsbActivateWithCharging(pid,false);}  }
class C{  public ObjectNotFoundException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  protected FireworkEffectBuilder(FireworkEffectType type){  this.type=type;}  }
class C{  public Map<Integer,Double> compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP_REMOVE_DEVICE_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'GROUP_ID' INTEGER NOT NULL ,"+ "'BSSID' TEXT NOT NULL );");}  }
class C{  public MockResponse addHeader(String name,Object value){  return addHeader(name + ": " + String.valueOf(value));}  }
class C{  private void logInfo(String message){  if (this.getProject() != null) {    this.log(message,Project.MSG_INFO);  } else {    System.out.println(message);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 27:{        addToken(Token.PREPROCESSOR);      }case 30:    break;case 7:{    addNullToken();    return firstToken;  }case 31:break;case 24:{addToken(Token.LITERAL_CHAR);}case 32:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 33:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 9:{addToken(Token.WHITESPACE);}case 35:break;case 26:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 18:{addToken(Token.ERROR_CHAR);}case 37:break;case 25:{addToken(Token.ERROR_STRING_DOUBLE);}case 38:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 39:break;case 15:{addToken(Token.RESERVED_WORD);}case 40:break;case 5:{addToken(Token.SEPARATOR);}case 41:break;case 2:{addToken(Token.IDENTIFIER);}case 42:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 44:break;case 22:{addToken(Token.FUNCTION);}case 45:break;case 6:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 46:break;case 8:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 47:break;case 23:{addToken(Token.DATA_TYPE);}case 48:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 49:break;case 19:{addToken(Token.ERROR_CHAR);}case 50:break;case 20:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 4:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 579:break;case YYINITIAL:{addNullToken();return firstToken;}case 580:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 581:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public int length(){  return ref.length;}  }
class C{  public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  @Override public int read(byte b[],int off,int len) throws IOException {  return iis.read(b,off,len);}  }
class C{  public static BigInteger calculateGA(BigInteger p,BigInteger gx1,BigInteger gx3,BigInteger gx4){  return gx1.multiply(gx3).multiply(gx4).mod(p);}  }
class C{  private void couplingsUpdated(){  couplingList=new Vector(desktop.getWorkspace().getCouplingManager().getCouplings());  couplings.setListData(couplingList);}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  area=trimMargin(area);  drawBorder(g2,area);  return null;}  }
class C{  private boolean useTabHeading(SettingsItem parent){  if (parent.getType().equals(Type.SUB_GROUP)) {    return false;  } else   if (subGroupTabNameUsed) {    return false;  } else   if (useSubGroups) {    return false;  } else {    return true;  }}  }
class C{  private void fixEndWindowDequeueTimesBeforeDeactivate(){  long endWindowDequeueTime=System.currentTimeMillis();  for (  SweepableReservoir sr : inputs.values()) {    if (endWindowDequeueTimes.get(sr) == null) {      endWindowDequeueTimes.put(sr,endWindowDequeueTime);    }  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append(getClass().getName());  buf.append(", status: capacity=");  buf.append(capacity());  buf.append(" position=");  buf.append(position());  buf.append(" limit=");  buf.append(limit());  return buf.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.STATE_VECTOR;}  }
class C{  InetSocketAddress parseHostPortPair(String str) throws IOException {  str=str.trim();  if (str.isEmpty()) {    throw new IOException("No hostname:port pair given.");  }  int bracketBegin=str.indexOf('[');  if (bracketBegin == 0) {    int bracketEnd=str.indexOf(']');    if (bracketEnd < 0) {      throw new IOException("Found left bracket, but no corresponding " + "right bracket, in " + str);    }    String host=str.substring(bracketBegin + 1,bracketEnd);    int port=parseColonPort(str.substring(bracketEnd + 1));    return InetSocketAddress.createUnresolved(host,port);  } else   if (bracketBegin > 0) {    throw new IOException("Found a left bracket that wasn't at the " + "start of the host:port pair in " + str);  } else {    int colon=str.indexOf(':');    if (colon <= 0) {      throw new IOException("No port component found in " + str);    }    String host=str.substring(0,colon);    int port=parseColonPort(str.substring(colon));    return InetSocketAddress.createUnresolved(host,port);  }}  }
class C{  public CAddressSpacesTablePanel(final IFilteredTable<INaviAddressSpace> table){  super(table,new CAddressSpaceFilterCreator(),new CAddressSpaceFilterHelp());  addListener(m_fieldListener);}  }
class C{  public void addBucketReplication(AddBucketReplicationRequest addBucketReplicationRequest) throws OSSException, ClientException {  assertParameterNotNull(addBucketReplicationRequest,"addBucketReplicationRequest");  assertParameterNotNull(addBucketReplicationRequest.getTargetBucketName(),"targetBucketName");  assertParameterNotNull(addBucketReplicationRequest.getTargetBucketLocation(),"targetBucketLocation");  String bucketName=addBucketReplicationRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new LinkedHashMap<String,String>();  params.put(RequestParameters.SUBRESOURCE_REPLICATION,null);  params.put(RequestParameters.SUBRESOURCE_COMP,RequestParameters.COMP_ADD);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.POST).setBucket(bucketName).setParameters(params).setInputStreamWithLength(addBucketReplicationRequestMarshaller.marshall(addBucketReplicationRequest)).setOriginalRequest(addBucketReplicationRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public boolean query(int objectToQuery,long[][] hashFunctions){  for (  long[] h : hashFunctions) {    int i=hash(h,(long)objectToQuery);    if (!bitSet.get(i))     return false;  }  return true;}  }
class C{  public DeleteMessageBatchResult deleteMessageBatch(DeleteMessageBatchRequest deleteMessageBatchRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.deleteMessageBatch(deleteMessageBatchRequest);}  }
class C{  public int rtf(XPathContext support){  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    result=frag.getDocument();  }  return result;}  }
class C{  public static InputStream toInputStream(final CharSequence input){  return IOUtils.toInputStream(input,Charset.defaultCharset());}  }
class C{  public void delete(WebMediumConfig config){  config.addCredentials(this);  POST(this.url + "/delete-" + config.getType(),config.toXML());}  }
class C{  public EntityMissile(World world,Pos3D start,int id,float yaw,float pitch){  this(world);  explosiveID=id;  launcherPos=startPos=start;  missileType=MissileType.LAUNCHER;  protectionTime=0;  setPosition(startPos.xPos,startPos.yPos,startPos.zPos);  setRotation(yaw,pitch);}  }
class C{  public Language(String name,String AD_Language,Locale locale,Boolean decimalPoint,String javaDatePattern,MediaSize mediaSize){  if (name == null || AD_Language == null || locale == null)   throw new IllegalArgumentException("Language - parameter is null");  m_name=name;  m_AD_Language=AD_Language;  m_locale=locale;  m_decimalPoint=decimalPoint;  setDateFormat(javaDatePattern);  setMediaSize(mediaSize);}  }
class C{  @Override protected void addTrailerToOutput(byte[] msg,int offset,jmri.jmrix.AbstractMRMessage m){  if (m.getNumDataElements() == 0) {    return;  }  ((XNetMessage)m).setParity();  msg[offset - 1]=(byte)m.getElement(m.getNumDataElements() - 1);}  }
class C{  public Builder withDestination(String registrationId){  this.registrationIds.clear();  this.registrationIds.add(registrationId);  return this;}  }
class C{  void add(ZoneRec rec){  list.add(rec);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(this,newCp,classnames);  copier.visit();  return copier.getStackMap();}  }
class C{  public void remove(int index){  ensureMutableMessageList();  messages.remove(index);  if (builders != null) {    SingleFieldBuilder<MType,BType,IType> entry=builders.remove(index);    if (entry != null) {      entry.dispose();    }  }  onChanged();  incrementModCounts();}  }
class C{  public void equals() throws IOException {  print("equals",null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static RuntimeException assertFail(String message){  checkAssertion(false,message);  return new AssertFailedException(message);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int jobID=getInt(stack);  return (Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()) && Ministry.getInstance().cancelTranscodeJob(jobID)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void nioCopy(File source,File target,FilenameFilter filter) throws IOException {  copy(source,target,filter,true,true);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzers[]=new Analyzer[]{new WhitespaceAnalyzer(),new SimpleAnalyzer(),new StopAnalyzer(),new UnicodeWhitespaceAnalyzer()};  for (  Analyzer analyzer : analyzers) {    checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  }  IOUtils.close(analyzers);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SageTV.restart();  return Sage.MAC_OS_X ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.902 -0500",hash_original_method="00AE5F5A406478801ABD16E12F474E1A",hash_generated_method="4828E10B4D78E9B684F86709410BF1C4") private void readFont(){  int entryCount=mParcel.readInt();  for (int i=0; i < entryCount; i++) {    Font font=new Font();    font.ID=mParcel.readInt();    int nameLen=mParcel.readInt();    byte[] text=mParcel.createByteArray();    font.name=new String(text,0,nameLen);    if (mFontList == null) {      mFontList=new ArrayList<Font>();    }    mFontList.add(font);  }}  }
class C{  public SQLNonTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public ViewPropertyAnimator translationX(float value){  animateProperty(TRANSLATION_X,value);  return this;}  }
class C{  public void createDirectory(String path){  this.createDirectory(new File(path));}  }
class C{  public Cat birth(){  Cat cat=new Tom();  cats.add(cat);  return cat;}  }
class C{  public URL find(String classname){  return source.find(classname);}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  setContentView(R.layout.download_weather_activity);  mEditText=((EditText)findViewById(R.id.locationQuery));  super.onCreate(savedInstanceState,WeatherOps.class,this);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public Contract findContractById(final Integer id) throws PersistentModelException {  Contract instance=m_contractHome.findById(id);  if (null == instance)   throw new PersistentModelException("Contract not found for id: " + id);  return instance;}  }
class C{  private void useEntityFromPath(Player player,RPAction action){  Entity entity=EntityHelper.getEntityFromPath(player,action.getList(TARGET_PATH));  if (entity != null) {    if (entity.isContained() && !ItemAccessPermissions.mayAccessContainedEntity(player,entity)) {      return;    }    tryUse(player,entity);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (literal_1: ");  result.append(literal_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  public void pop(int fieldCnt){  idx=idx - fieldCnt * 2;}  }
class C{  private void drawHighFarOut(double aRadius,Graphics2D g2,double xx,double m){  double side=aRadius * 2;  g2.draw(new Line2D.Double(xx - side,m + side,xx + side,m + side));  g2.draw(new Line2D.Double(xx - side,m + side,xx,m));  g2.draw(new Line2D.Double(xx + side,m + side,xx,m));}  }
class C{  public void addSubTree(Node parent,int index,List<Node> children){  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);  getWrapper(parent).addChildren(index,nodeDescriptors);  List<Node> nodes=new ArrayList<>();  for (  NodeDescriptor child : nodeDescriptors) {    nodes.add(child.getNode());  }  if (!nodes.isEmpty()) {    fireEvent(new StoreAddEvent(index,nodes));  }}  }
class C{  public boolean isInterlaced(){  return interlaced;}  }
class C{  public int nextInt(int n){  if (n > 0) {    if ((n & -n) == n) {      return (int)((n * (long)next(31)) >> 31);    }    int bits, val;    do {      bits=next(31);      val=bits % n;    } while (bits - val + (n - 1) < 0);    return val;  }  throw new IllegalArgumentException();}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  private Uri updateUri(){  SimpleWeekView child=(SimpleWeekView)mListView.getChildAt(0);  if (child != null) {    int julianDay=child.getFirstJulianDay();    mFirstLoadedJulianDay=julianDay;  }  mTempTime.setJulianDay(mFirstLoadedJulianDay - 1);  long start=mTempTime.toMillis(true);  mLastLoadedJulianDay=mFirstLoadedJulianDay + (mNumWeeks + 2 * WEEKS_BUFFER) * 7;  mTempTime.setJulianDay(mLastLoadedJulianDay + 1);  long end=mTempTime.toMillis(true);  Uri.Builder builder=Instances.CONTENT_URI.buildUpon();  ContentUris.appendId(builder,start);  ContentUris.appendId(builder,end);  return builder.build();}  }
class C{  String runHgCommand(File workingDirectory,List<String> args) throws CommandException {  return cmd.runCommand(hgBinary.getPath(),ImmutableList.copyOf(args),workingDirectory == null ? null : workingDirectory.getAbsolutePath());}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of rows and columns of the array: ");  int row=input.nextInt();  int column=input.nextInt();  double[][] array=new double[row][column];  System.out.println("Enter the array:");  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      array[i][j]=input.nextDouble();    }  }  int[] location=locateLargest(array);  System.out.println("The location of the largest element is at (" + location[0] + ", "+ location[1]+ ")");}  }
class C{  public DataSource createExportMaskDataSource(String configName,Host host,Cluster cluster,StorageSystem storageSystem){  return createDataSource(configName,new DataObject[]{host,cluster,storageSystem});}  }
class C{  public QDate(long time){  this(_localTimeZone);  setGMTTime(time);}  }
class C{  public SeaGlassLookAndFeel(){  super();  registerStyles();}  }
class C{  private static List<String> generateSetMethodNames(final Field field){  final List<String> prefix=new LinkedList<String>();  prefix.add("set" + AttributeHelper.getAttributeName(field));  String fieldName=field.getName();  if (fieldName.length() > 2 && fieldName.startsWith("is") && Character.isUpperCase(fieldName.charAt(2)))   prefix.add("set" + fieldName.substring(2));  return prefix;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void registerRules(boolean reset){  if (reset) {    m_ForecastRules.clear();  }  ForecastRule rule=getForecastRuleFactory(DoubleExponentialSmoothing.class.getSimpleName());}  }
class C{  public StrTokenizer(final String input,final char delim,final char quote){  this(input,delim);  setQuoteChar(quote);}  }
class C{  public static Function<String,String> trunc(final int size){  if (size < 1) {    throw new IllegalArgumentException("Size must be >= 1");  }  return null;}  }
class C{  public CircularPositionArea(String sidc){  super(sidc);}  }
class C{  public void updateComboBox(JComboBox<Track> box){  box.removeAllItems();  box.addItem(null);  List<Track> tracks=getTrackByNameList(null);  for (  Track track : tracks) {    box.addItem(track);  }}  }
class C{  public static int displayMainMenu(Scanner input){  System.out.print("\nMain menu\n1: check balance\n2: withdraw" + "\n3: deposit\n4: exit\nEnter a choice: ");  return input.nextInt();}  }
class C{  public boolean isUnknown(){  return STATUS_Unknown.equals(m_status) || !(isDrafted() || isInvalid() || isInProgress()|| isNotApproved()|| isApproved()|| isWaiting()|| isCompleted()|| isReversed()|| isClosed()|| isVoided());}  }
class C{  public GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> iterator(@Nullable String spaceName){  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? new GridEmptyCloseableIterator<IgniteBiTuple<byte[],byte[]>>() : m.iterator();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.641 -0400",hash_original_method="03121A7AC3B4E7519E88953F37DA485C",hash_generated_method="CFD5B18414297C5D63F6DE9EDDF7232C") @Override public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public static Status declined(){  return create(DECLINED);}  }
class C{  public Vertex findReference(Vertex source){  Vertex result=null;  List<Relationship> relationships=source.getNetwork().findAllRelationshipsTo(source);  for (  Relationship relationship : relationships) {    if (!relationship.isInverse() && ((result == null) || (relationship.getSource().getConsciousnessLevel() > result.getConsciousnessLevel()))) {      result=relationship.getSource();    }  }  if (result != null) {    source.getNetwork().getBot().log(this,"Found reference",Level.FINER,source,result);  } else {    result=source.getNetwork().createVertex(Primitive.NULL);    source.getNetwork().getBot().log(this,"No references",Level.FINER,source);  }  return result;}  }
class C{  private String writeJson(Object data,Map<String,Object> meta) throws IOException, NoSuchFieldException, IllegalAccessException, ODataEdmException, ODataRenderException {  ByteArrayOutputStream stream=new ByteArrayOutputStream();  jsonGenerator=JSON_FACTORY.createGenerator(stream,JsonEncoding.UTF8);  jsonGenerator.writeStartObject();  entitySet=(data instanceof List) ? getEntitySet((List<?>)data) : getEntitySet(data);  jsonGenerator.writeStringField(CONTEXT,contextURL);  if (hasCountOption(odataUri) && data instanceof List && meta != null && meta.containsKey("count")) {    long count;    Object countObj=meta.get("count");    if (countObj instanceof Integer) {      count=((Integer)countObj).longValue();    } else {      count=(long)countObj;    }    jsonGenerator.writeNumberField(COUNT,count);  }  if (!(data instanceof List)) {    if (entitySet != null) {      jsonGenerator.writeStringField(ID,String.format("%s(%s)",getEntityName(entityDataModel,data),formatEntityKey(entityDataModel,data)));    } else {      jsonGenerator.writeStringField(ID,String.format("%s",getEntityName(entityDataModel,data)));    }  }  if (data instanceof List) {    marshallEntities((List<?>)data);  } else {    marshall(data,this.entityDataModel.getType(data.getClass()));  }  jsonGenerator.writeEndObject();  jsonGenerator.close();  return stream.toString(StandardCharsets.UTF_8.name());}  }
class C{  public void addMessageListener(ReleaseMessageListener listener){  if (!listeners.contains(listener)) {    listeners.add(listener);  }}  }
class C{  public boolean hasAlmanac(){  return mHasAlmanac;}  }
class C{  public ListContainersParams withSize(boolean size){  this.size=size;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private byte skipEntityForward(){  while (charIndex < length && (lastChar=text.charAt(charIndex++)) != ';') {  }  return Character.DIRECTIONALITY_WHITESPACE;}  }
class C{  public Timezone(UtcOffset offset){  super(offset);}  }
class C{  public MinMaxNormalizationModel(ExampleSet exampleSet,double min,double max,HashMap<String,Tupel<Double,Double>> attributeRanges){  super(exampleSet);  this.min=min;  this.max=max;  this.attributeRanges=attributeRanges;  attributeNames=new HashSet<String>();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (attribute.isNumerical()) {      attributeNames.add(attribute.getName());    }  }}  }
class C{  @NoWarning("NP_BOOLEAN_RETURN_NULL") public Boolean never_null(int n){  if (n > 2) {    return new Boolean(true);  } else {    return new Boolean(false);  }}  }
class C{  public static CMenuItem addMenu(ActionListener l,JPopupMenu popupMenu){  CMenuItem mi=new CMenuItem(Msg.getElement(Env.getCtx(),"AD_ChangeLog_ID"),s_icon);  mi.setActionCommand(CHANGE_LOG_COMMAND);  mi.addActionListener(l);  popupMenu.add(mi);  return mi;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  public long reset(){  long nowNS=System.nanoTime();  try {    return TimeValue.nsecToMSec(nowNS - startNS);  }  finally {    startNS=nowNS;  }}  }
class C{  private CnATreeElement deleteLinks(CnATreeElement element) throws CommandException {  CnALink[] downLinks=element.getLinksDown().toArray(new CnALink[element.getLinksDown().size()]);  for (int i=0; i < downLinks.length; i++) {    removeLink(downLinks[i]);  }  CnALink[] upLinks=element.getLinksUp().toArray(new CnALink[element.getLinksUp().size()]);  for (int i=0; i < upLinks.length; i++) {    removeLink(upLinks[i]);  }  return element;}  }
class C{  public static Tuple<Point2D.Double,Point2D.Double> scaleVector(final Point2D.Double start,final Point2D.Double end,double scaleFactor){  return calculateScaledVector(start,end,scaleFactor);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SESSION_IDS;case 2:  return PACKET;default :return null;}}  }
class C{  @Override public void addMouseListener(MouseListener l){  m_plotPanel.addMouseListener(l);}  }
class C{  private static String[] composeList(MessageFormat format,String[] list){  if (list.length <= 3)   return list;  String[] listItems={list[0],list[1]};  String newItem=format.format(listItems);  String[] newList=new String[list.length - 1];  System.arraycopy(list,2,newList,1,newList.length - 1);  newList[0]=newItem;  return composeList(format,newList);}  }
class C{  public boolean isPasteEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return true;}  }
class C{  public boolean homeBackKeyPressed(){  if (navSettingsVP.getVisibility() == View.VISIBLE) {    navSettingsVP.setVisibility(View.INVISIBLE);    sideBarVP.setVisibility(View.VISIBLE);    return false;  } else   if (navSettingsFromVP.getVisibility() == View.VISIBLE) {    navSettingsFromVP.setVisibility(View.INVISIBLE);    navSettingsVP.setVisibility(View.VISIBLE);    return false;  } else   if (navSettingsToVP.getVisibility() == View.VISIBLE) {    navSettingsToVP.setVisibility(View.INVISIBLE);    navSettingsVP.setVisibility(View.VISIBLE);    return false;  } else   if (navInstructionListVP.getVisibility() == View.VISIBLE) {    navInstructionListVP.setVisibility(View.INVISIBLE);    sideBarVP.setVisibility(View.VISIBLE);    return false;  } else   if (AppSettings.getAppSettings().getAppSettingsVP() != null && AppSettings.getAppSettings().getAppSettingsVP().getVisibility() == View.VISIBLE) {    AppSettings.getAppSettings().getAppSettingsVP().setVisibility(View.INVISIBLE);    sideBarVP.setVisibility(View.VISIBLE);    return false;  } else {    return true;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.959 -0500",hash_original_method="1BDECA037A3A41B230975E15C12C5086",hash_generated_method="7946A799974109CAE7A8BC2385A7E3F0") private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  mView.removeCallbacks(mAnimationStarter);  mView.post(mAnimationStarter);}  }
class C{  public boolean isRebootNeeded(){  return rebootNeeded;}  }
class C{  void onUrlFocusChanged(boolean hasFocus){  mUrlBarHasFocus=hasFocus;  if (mUrlBarHasFocus) {    mTrailingTextShownWhileFocused=mShowTrailingText || mTrailingTextView.getVisibility() == VISIBLE;    mTrailingTextHiddenWhileFocused=!mShowTrailingText && mTrailingTextView.getVisibility() == VISIBLE;    removeCallbacks(mTriggerHideRunnable);    removeCallbacks(mTriggerHideAnimationRunnable);    if (mTrailingTextAnimator != null && mTrailingTextAnimator.isRunning()) {      mTrailingTextAnimator.cancel();      mTrailingTextAnimator=null;    }    mShowTrailingText=false;  } else {    if (mTrailingTextShownWhileFocused) {      setTrailingTextVisible(true);      if (mTrailingTextHiddenWhileFocused) {        setTrailingTextVisible(false);      }    }  }}  }
class C{  public static void verifyKeyCertificateEntry(KeyCertificateEntry entryToVerify) throws SecurityException {  String signThis="Sign this to verify that the key and certificate match";  Signature signatureFactory=null;  byte[] signature;  PrivateKey key=null;  try {    if (!(entryToVerify.getCertificateChain()[0] instanceof X509Certificate)) {      throw SecurityException.fatals.certificateMustBeX509();    }    X509Certificate cert=(X509Certificate)entryToVerify.getCertificateChain()[0];    key=loadPrivateKeyFromBytes(entryToVerify.getKey());    signatureFactory=Signature.getInstance(cert.getSigAlgName());    signatureFactory.initSign(key);    signatureFactory.update(signThis.getBytes());    signature=signatureFactory.sign();    signatureFactory.initVerify(entryToVerify.getCertificateChain()[0].getPublicKey());    signatureFactory.update(signThis.getBytes());    if (!signatureFactory.verify(signature)) {      throw APIException.badRequests.keyCertificateVerificationFailed();    }  } catch (  NoSuchAlgorithmException e) {    throw APIException.badRequests.keyCertificateVerificationFailed(e);  }catch (  InvalidKeyException e) {    throw APIException.badRequests.keyCertificateVerificationFailed(e);  }catch (  SignatureException e) {    throw APIException.badRequests.keyCertificateVerificationFailed(e);  } finally {    SecurityUtil.clearSensitiveData(signatureFactory);    SecurityUtil.clearSensitiveData(key);  }}  }
class C{  protected void notifyConnectionError(Exception e){  shutdown(new Presence(Presence.Type.unavailable));  e.printStackTrace();  for (  ConnectionListener listener : getConnectionListeners()) {    try {      listener.connectionClosedOnError(e);    } catch (    Exception e2) {      e2.printStackTrace();    }  }}  }
class C{  public void testRenameFileParentRootSourceMissing() throws Exception {  IgfsPath file1=new IgfsPath("/file1");  IgfsPath file2=new IgfsPath("/file2");  create(igfsSecondary,null,paths(file1));  create(igfs,null,null);  igfs.rename(file1,file2);  checkExist(igfs,igfsSecondary,file2);  checkNotExist(igfs,igfsSecondary,file1);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable encoded");  }}  }
class C{  public boolean isExported(){  return (!ServiceStatus.unexported.name().equals(serviceStatus));}  }
class C{  public static Collection<VisorGridEvent> collectEvents(Ignite ignite,String evtOrderKey,String evtThrottleCntrKey,boolean all,IgniteClosure<Event,VisorGridEvent> evtMapper){  int[] evtTypes=all ? VISOR_ALL_EVTS : VISOR_NON_TASK_EVTS;  if (evtOrderKey.startsWith("CONSOLE_"))   evtTypes=concat(evtTypes,EVTS_DISCOVERY);  return collectEvents(ignite,evtOrderKey,evtThrottleCntrKey,evtTypes,evtMapper);}  }
class C{  public T caseSymbolTableEntry(SymbolTableEntry object){  return null;}  }
class C{  public void matchContext(final NodeIterator elements){  if (matchContext == null) {    return;  }  final CompiledPattern pattern=matchContext.getPattern();  final NodeIterator patternNodes=pattern.getNodes().clone();  final MatchResultImpl saveResult=matchContext.hasResult() ? matchContext.getResult() : null;  final List<PsiElement> saveMatchedNodes=matchContext.getMatchedNodes();  try {    matchContext.setResult(null);    matchContext.setMatchedNodes(null);    if (!patternNodes.hasNext())     return;    final MatchingHandler firstMatchingHandler=pattern.getHandler(patternNodes.current());    for (; elements.hasNext(); elements.advance()) {      final PsiElement elementNode=elements.current();      boolean matched=firstMatchingHandler.matchSequentially(patternNodes,elements,matchContext);      if (matched) {        MatchingHandler matchingHandler=matchContext.getPattern().getHandler(Configuration.CONTEXT_VAR_NAME);        if (matchingHandler != null) {          matched=((SubstitutionHandler)matchingHandler).handle(elementNode,matchContext);        }      }      final List<PsiElement> matchedNodes=matchContext.getMatchedNodes();      if (matched) {        dispatchMatched(matchedNodes,matchContext.getResult());      }      matchContext.setMatchedNodes(null);      matchContext.setResult(null);      patternNodes.reset();      if (matchedNodes != null && matchedNodes.size() > 0 && matched) {        elements.rewind();      }    }  }  finally {    matchContext.setResult(saveResult);    matchContext.setMatchedNodes(saveMatchedNodes);  }}  }
class C{  protected static void print(String s){  System.out.print(s);}  }
class C{  public IDPConfiguration(String alias,String entityID,X509Certificate signingCertificate,List<String> nameIDFormats,List<SingleSignOnService> singleSignOnServices,List<SingleLogoutService> singleLogoutServices){  this(alias,entityID,signingCertificate,nameIDFormats,singleSignOnServices,singleLogoutServices,600,true);}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  private void updateCheckedItems(){  for (  TableItem item : table.getItems()) {    Environment data=(Environment)item.getData();    item.setChecked(selectedIds.contains(data.getId()));  }}  }
class C{  public static <T>T newInstance(Class<T> c){  try {    return c.newInstance();  } catch (  IllegalAccessException e) {    throw new RuntimeException("Could not instantiate class " + c.getName(),e);  }catch (  InstantiationException e) {    throw new RuntimeException("Could not instantiate class " + c.getName() + " Does it have a public no-argument constructor?",e);  }catch (  NullPointerException e) {    throw new RuntimeException("Requested class was null",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.289 -0500",hash_original_method="99DC3611344E7F5F6B557A987ADB25FE",hash_generated_method="8561BB81A1CC84CFC1E6D202A95DD914") public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  handler.cancel();}  }
class C{  private void readTrailer15(PDFPassword password) throws IOException, PDFAuthenticationFailureException, EncryptionUnsupportedByProductException, EncryptionUnsupportedByPlatformException {  PDFDecrypter newDefaultDecrypter=null;  while (true) {    PDFObject xrefObj=readObject(-1,-1,IdentityDecrypter.getInstance());    PDFObject[] wNums=xrefObj.getDictionary().get("W").getArray();    int l1=wNums[0].getIntValue();    int l2=wNums[1].getIntValue();    int l3=wNums[2].getIntValue();    int entrySize=l1 + l2 + l3;    int size=xrefObj.getDictionary().get("Size").getIntValue();    byte[] strmbuf=xrefObj.getStream();    int strmEntries=strmbuf.length / entrySize;    int strmPos=0;    PDFObject idxNums=xrefObj.getDictionary().get("Index");    int[] idxArray;    if (idxNums == null) {      idxArray=new int[]{0,size};    } else {      PDFObject[] idxNumArr=idxNums.getArray();      idxArray=new int[idxNumArr.length];      for (int i=0; i < idxNumArr.length; i++) {        idxArray[i]=idxNumArr[i].getIntValue();      }    }    int idxLen=idxArray.length;    int idxPos=0;    while (idxPos < idxLen) {      int refstart=idxArray[idxPos++];      int reflen=idxArray[idxPos++];      if (refstart + reflen >= objIdx.length) {        PDFXref nobjIdx[]=new PDFXref[refstart + reflen];        System.arraycopy(objIdx,0,nobjIdx,0,objIdx.length);        objIdx=nobjIdx;      }      for (int refID=refstart; refID < refstart + reflen; refID++) {        int type=readNum(strmbuf,strmPos,l1);        strmPos+=l1;        int id=readNum(strmbuf,strmPos,l2);        strmPos+=l2;        int gen=readNum(strmbuf,strmPos,l3);        strmPos+=l3;        if (objIdx[refID] != null) {          continue;        }        if (type == 0) {          objIdx[refID]=new PDFXref(null);        } else         if (type == 1) {          objIdx[refID]=new PDFXref(id,gen);        } else {          objIdx[refID]=new PDFXref(id,gen,true);        }      }    }    HashMap<String,PDFObject> trailerdict=xrefObj.getDictionary();    if (root == null) {      root=trailerdict.get("Root");      if (root != null) {        root.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }    }    if (encrypt == null) {      encrypt=trailerdict.get("Encrypt");      if (encrypt != null) {        encrypt.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }      newDefaultDecrypter=PDFDecrypterFactory.createDecryptor(encrypt,trailerdict.get("ID"),password);    }    if (info == null) {      info=trailerdict.get("Info");      if (info != null) {        if (!info.isIndirect()) {          throw new PDFParseException("Info in trailer must be an indirect reference");        }        info.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }    }    PDFObject prevloc=trailerdict.get("Prev");    if (prevloc != null) {      buf.position(prevloc.getIntValue());    } else {      break;    }    if (root.getDictRef("Version") != null) {      processVersion(root.getDictRef("Version").getStringValue());    }  }  if (root == null) {    throw new PDFParseException("No /Root key found in trailer dictionary");  }  if (encrypt != null) {    PDFObject permissions=encrypt.getDictRef("P");    if (permissions != null && !newDefaultDecrypter.isOwnerAuthorised()) {      int perms=permissions != null ? permissions.getIntValue() : 0;      if (permissions != null) {        printable=(perms & 4) != 0;        saveable=(perms & 16) != 0;      }    }    defaultDecrypter=newDefaultDecrypter;  }  root.dereference();}  }
class C{  @Override public int hashCode(){  return new HashCodeBuilder(15,37).append(identifier).append(name).append(databaseName).toHashCode();}  }
class C{  public boolean isTickerRunning(){  return tickerRunning;}  }
class C{  @Override public void onCreateDatabase(CreateDatabaseEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    Set<WriteEntity> writeEntities=new HashSet<>();    writeEntities.add(new WriteEntity(event.getDatabase(),WriteType.INSERT));    run(readEntities,writeEntities,HiveOperation.THRIFT_CREATE_DATABASE);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void closeEnvironment(ClassLoader env){  reset();}  }
class C{  private ApplicationEnvironment(){  try {    if (System.getProperty(BootstrapProperties.IS_UBERJAR) != null) {      this.mode=Mode.UBERJAR;      if (!loadWildFlySwarmApplicationManifestFromClasspath()) {        loadWildFlySwarmApplicationManifestFromTCCL();      }    } else {      this.mode=Mode.CLASSPATH;      loadFractionManifestsFromClasspath();    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void sendNotices(ArrayList<String> list){  String subject=Msg.translate(getCtx(),"R_Request_ID") + " " + Msg.getMsg(getCtx(),"Updated")+ ": "+ getDocumentNo();  StringBuffer message=new StringBuffer();  int UpdatedBy=Env.getAD_User_ID(getCtx());  MUser from=MUser.get(getCtx(),UpdatedBy);  if (from != null)   message.append(Msg.translate(getCtx(),"UpdatedBy")).append(": ").append(from.getName());  if (getDateLastAction() != null)   message.append("\n").append(Msg.translate(getCtx(),"DateLastAction")).append(": ").append(getDateLastAction()); else   message.append("\n").append(Msg.translate(getCtx(),"Created")).append(": ").append(getCreated());  for (int i=0; i < list.size(); i++) {    String columnName=(String)list.get(i);    message.append("\n").append(Msg.getElement(getCtx(),columnName)).append(": ").append(get_DisplayValue(columnName,false)).append(" -> ").append(get_DisplayValue(columnName,true));  }  if (getDateNextAction() != null)   message.append("\n").append(Msg.translate(getCtx(),"DateNextAction")).append(": ").append(getDateNextAction());  message.append(SEPARATOR).append(getSummary());  if (getResult() != null)   message.append("\n----------\n").append(getResult());  message.append(getMailTrailer(null));  File pdf=createPDF();  log.finer(message.toString());  MClient client=MClient.get(getCtx());  if (from.getEMailUser() == null || from.getEMailUserPW() == null)   from=null;  int success=0;  int failure=0;  int notices=0;  ArrayList<Integer> userList=new ArrayList<Integer>();  final String sql="SELECT u.AD_User_ID, u.NotificationType, u.EMail, u.Name, MAX(r.AD_Role_ID) " + "FROM RV_RequestUpdates_Only ru" + " INNER JOIN AD_User u ON (ru.AD_User_ID=u.AD_User_ID OR u.AD_User_ID=?)"+ " LEFT OUTER JOIN AD_User_Roles r ON (u.AD_User_ID=r.AD_User_ID) "+ "WHERE ru.R_Request_ID=? "+ "GROUP BY u.AD_User_ID, u.NotificationType, u.EMail, u.Name";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getSalesRep_ID());    pstmt.setInt(2,getR_Request_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int AD_User_ID=rs.getInt(1);      String NotificationType=rs.getString(2);      if (NotificationType == null)       NotificationType=X_AD_User.NOTIFICATIONTYPE_EMail;      String email=rs.getString(3);      String Name=rs.getString(4);      int AD_Role_ID=rs.getInt(5);      if (rs.wasNull())       AD_Role_ID=-1;      if (AD_Role_ID == -1 && (getConfidentialTypeEntry().equals(CONFIDENTIALTYPE_Internal) || getConfidentialTypeEntry().equals(CONFIDENTIALTYPE_PrivateInformation)))       continue;      if (X_AD_User.NOTIFICATIONTYPE_None.equals(NotificationType)) {        log.config("Opt out: " + Name);        continue;      }      if ((X_AD_User.NOTIFICATIONTYPE_EMail.equals(NotificationType) || X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType)) && (email == null || email.length() == 0)) {        if (AD_Role_ID >= 0)         NotificationType=X_AD_User.NOTIFICATIONTYPE_Notice; else {          log.config("No EMail: " + Name);          continue;        }      }      if (X_AD_User.NOTIFICATIONTYPE_Notice.equals(NotificationType) && AD_Role_ID >= 0) {        log.config("No internal User: " + Name);        continue;      }      Integer ii=new Integer(AD_User_ID);      if (userList.contains(ii))       continue;      userList.add(ii);      MUser to=MUser.get(getCtx(),AD_User_ID);      if (X_AD_User.NOTIFICATIONTYPE_EMail.equals(NotificationType) || X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType)) {        if (client.sendEMail(from,to,subject,message.toString(),pdf)) {          success++;          if (m_emailTo.length() > 0)           m_emailTo.append(", ");          m_emailTo.append(to.getEMail());        } else {          log.warning("Failed: " + Name);          failure++;          NotificationType=X_AD_User.NOTIFICATIONTYPE_Notice;        }      }      if (X_AD_User.NOTIFICATIONTYPE_Notice.equals(NotificationType) || X_AD_User.NOTIFICATIONTYPE_EMailPlusNotice.equals(NotificationType)) {        int AD_Message_ID=834;        MNote note=new MNote(getCtx(),AD_Message_ID,AD_User_ID,X_R_Request.Table_ID,getR_Request_ID(),subject,message.toString(),get_TrxName());        if (note.save())         notices++;      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.info("EMail Success=" + success + ", Failure="+ failure+ " - Notices="+ notices);}  }
class C{  private int determineNumberOfDays(FixedWeekdayRelativeToFixed f){switch (f.getWhich()) {case SECOND:    return 7;case THIRD:  return 14;case FOURTH:return 21;default :return 0;}}  }
class C{  public void testSpans4(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(110,10));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(110,10));  GridBagConverter converter=new GridBagConverter();  converter.addComponent(button,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field1,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(220,preferredSize.width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(250,button.getWidth());  assertEquals(250,field1.getWidth());  assertEquals(250,field2.getWidth());}  }
class C{  protected boolean addArcMakesSense(BayesNet bayesNet,Instances instances,int iAttributeHead,int iAttributeTail){  if (iAttributeHead == iAttributeTail) {    return false;  }  if (isArc(bayesNet,iAttributeHead,iAttributeTail)) {    return false;  }  int nNodes=instances.numAttributes();  boolean[] bDone=new boolean[nNodes];  for (int iNode=0; iNode < nNodes; iNode++) {    bDone[iNode]=false;  }  bayesNet.getParentSet(iAttributeHead).addParent(iAttributeTail,instances);  for (int iNode=0; iNode < nNodes; iNode++) {    boolean bFound=false;    for (int iNode2=0; !bFound && iNode2 < nNodes; iNode2++) {      if (!bDone[iNode2]) {        boolean bHasNoParents=true;        for (int iParent=0; iParent < bayesNet.getParentSet(iNode2).getNrOfParents(); iParent++) {          if (!bDone[bayesNet.getParentSet(iNode2).getParent(iParent)]) {            bHasNoParents=false;          }        }        if (bHasNoParents) {          bDone[iNode2]=true;          bFound=true;        }      }    }    if (!bFound) {      bayesNet.getParentSet(iAttributeHead).deleteLastParent(instances);      return false;    }  }  bayesNet.getParentSet(iAttributeHead).deleteLastParent(instances);  return true;}  }
class C{  public static boolean addShapelessCraftingRecipe(ItemStack aResult,Object[] aRecipe){  return addShapelessCraftingRecipe(aResult,RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS | RecipeBits.BUFFERED,aRecipe);}  }
class C{  public BezierControlPointHandle(BezierFigure owner,int index,int coord){  this(owner,index,coord,owner);}  }
class C{  public void testTxPartitionedPessimisticRepeatableRead() throws Exception {  checkTx(PARTITIONED,PESSIMISTIC,REPEATABLE_READ);}  }
class C{  public byte[] encryptRaw(byte[] baseKey,int usage,byte[] ivec,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] output=encryptCTS(baseKey,usage,ivec,null,plaintext,start,len,false);  return output;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private byte[] tryDecodeHostToIPv6(String host){  String ip=host.substring(1,host.length() - 1);  List<String> parts=new ArrayList<String>(Arrays.asList(ip.split(":",-1)));  if (parts.size() < 3) {    return null;  }  String lastPart=parts.get(parts.size() - 1);  int zoneIndexStart=lastPart.lastIndexOf("%");  String lastPartWithoutZoneIndex=zoneIndexStart == -1 ? lastPart : lastPart.substring(0,zoneIndexStart);  byte[] ipv4Address=null;  if (!isHexSection(lastPartWithoutZoneIndex)) {    ipv4Address=tryDecodeHostToIPv4(lastPartWithoutZoneIndex);  }  byte[] bytes=new byte[16];  int totalSize=ipv4Address == null ? 8 : 6;  int numberOfFilledZeroes=0;  int size=ipv4Address == null ? parts.size() : parts.size() - 1;  for (int i=0; i < size; i++) {    int lenPart=parts.get(i).length();    if (lenPart == 0 && i != 0 && i != parts.size() - 1) {      numberOfFilledZeroes=totalSize - size;      for (int k=i; k < numberOfFilledZeroes + i; k++) {        System.arraycopy(sectionToTwoBytes(0),0,bytes,k * 2,2);      }    }    Integer section;    try {      section=lenPart == 0 ? 0 : Integer.parseInt(parts.get(i),16);    } catch (    NumberFormatException e) {      return null;    }    if (section > MAX_IPV6_PART || section < MIN_IP_PART) {      return null;    }    System.arraycopy(sectionToTwoBytes(section),0,bytes,(numberOfFilledZeroes + i) * 2,2);  }  if (ipv4Address != null) {    System.arraycopy(ipv4Address,IPV4_MAPPED_IPV6_START_OFFSET,bytes,IPV4_MAPPED_IPV6_START_OFFSET,NUMBER_BYTES_IN_IPV4);  }  return bytes;}  }
class C{  public void enableCache(int size){  if (size > 0)   this.objectCache=new LruCache<>(size);}  }
class C{  private void synchronizeTables(){  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"synchronizeTables",new Object[]{m_objectTypes,m_direction});  m_counterDrp=new Integer(0);  m_counterAdd=new Integer(0);  m_counterUpd=new Integer(0);  m_totalDrp=new Integer(0);  m_totalAdd=new Integer(0);  m_totalUpd=new Integer(0);  for (Iterator<String> tableIterator=m_objectList.iterator(); tableIterator.hasNext(); ) {    String key=tableIterator.next();    DBObject sourceObj=m_sourceMap.get(key);    DBObject targetObj=m_targetMap.get(key);    if (targetObj != null && sourceObj == null) {      if (targetObj.getCustomizationLevel() == s_parameters.CUSTOMNONE) {        if (targetObj.drop())         m_counterDrp=new Integer(m_counterDrp.intValue() + 1);        m_totalDrp=new Integer(m_totalDrp.intValue() + 1);      } else {        s_logger.log(Level.WARNING,"notDroppingCustomizedTable",new Object[]{m_objectType,targetObj.getName()});      }    }    if (targetObj != null && sourceObj != null) {      if (targetObj.update(sourceObj))       m_counterUpd=new Integer(m_counterUpd.intValue() + 1);      m_totalUpd=new Integer(m_totalUpd.intValue() + 1);    }    if (targetObj == null && sourceObj != null) {      if (sourceObj.create(m_target))       m_counterAdd=new Integer(m_counterAdd.intValue() + 1);      m_totalAdd=new Integer(m_totalAdd.intValue() + 1);    }  }  logResults();}  }
class C{  private void addCommonConnectionAttributes(){  buffer.append("    username='").append(ds.getUsername()).append("' \n");  buffer.append("    password='").append(ds.getPassword()).append("' \n");  if (ds.getUrl() != null) {    buffer.append("    url='" + ds.getUrl()).append("' \n");  }  buffer.append("    inactivity-timeout='30'");}  }
class C{  private static String padRight(String s,int minLength){  return String.format("%1$-" + minLength + "s",s);}  }
class C{  public Microsatellite(int[] pattern,int extRange,int unitLength){  this.unitLength=unitLength;  min=pattern[0];  max=pattern[0];  for (int i=1; i < pattern.length; i++) {    if (min > pattern[i] && (pattern[i] > 0)) {      min=pattern[i];    }    if (max < pattern[i] && (pattern[i] > 0)) {      max=pattern[i];    }  }  max=max + extRange * this.unitLength;  min=min - extRange * this.unitLength;  if ((max - min) % this.unitLength == 0) {    stateCount=(max - min) / this.unitLength + 1;  } else {    throw new IllegalArgumentException("Incorrect microsatellite unit length.");  }  ambiguousStateCount=stateCount + 1;}  }
class C{  public NodeRegistrationResponse registerNode(final String nodeProtocol,final String nodeHost,final int nodeServicePort,final int nodeAdminPort) throws RequiredInputMissingException, RemoteClientConnectionFailedException, IOException {  if (StringUtils.isBlank(nodeProtocol))   throw new RequiredInputMissingException("Missing required protocol");  if (StringUtils.isBlank(nodeHost))   throw new RequiredInputMissingException("Missing required host");  if (nodeServicePort < 1)   throw new RequiredInputMissingException("Missing valid service port");  if (nodeAdminPort < 1)   throw new RequiredInputMissingException("Missing valid admin port");  NodeRegistrationRequest message=new NodeRegistrationRequest(nodeProtocol,nodeHost,nodeServicePort,nodeAdminPort);  StringBuffer url=new StringBuffer(this.resourceManagerServiceBaseUrl).append("/nodes");  if (logger.isDebugEnabled())   logger.debug("Registering processing node [protocol=" + nodeProtocol + ", host="+ nodeHost+ ", servicePort="+ nodeServicePort+ ", adminPort="+ nodeAdminPort+ "] at resource manager "+ url.toString());  try {    final WebTarget webTarget=this.restClient.target(url.toString());    return webTarget.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(Entity.entity(message,MediaType.APPLICATION_JSON),NodeRegistrationResponse.class);  } catch (  Exception e) {    throw new RemoteClientConnectionFailedException("Failed to establish a connection with the remote resource manager [url=" + url.toString() + "]. Error: "+ e.getMessage());  }}  }
class C{  public boolean isOverwriteOrg(){  Object oo=get_Value(COLUMNNAME_OverwriteOrg);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected static boolean booleanProperty(String name,boolean dflt){  String val=property(name);  return val != null ? Boolean.parseBoolean(val) : dflt;}  }
class C{  public static Element BOOLEAN(RenderScript rs){  if (rs.mElement_BOOLEAN == null) {    rs.mElement_BOOLEAN=createUser(rs,DataType.BOOLEAN);  }  return rs.mElement_BOOLEAN;}  }
class C{  protected boolean isParentDisplayed(Node childNode){  Node parentNode=getParentNode(childNode);  return isTextElement((Element)parentNode);}  }
class C{  public MockIndexOutputWrapper(MockDirectoryWrapper dir,IndexOutput delegate,String name){  super("MockIndexOutputWrapper(" + delegate + ")",delegate.getName());  this.dir=dir;  this.name=name;  this.delegate=delegate;}  }
class C{  public boolean isReceipt(){  Object oo=get_Value(COLUMNNAME_IsReceipt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle alloc=a.getBounds();  alloc.height=metrics.getHeight();  alloc.width=1;  int p0=getStartOffset();  if (pos < p0 || pos > getEndOffset()) {    throw new BadLocationException("Position out of range",pos);  }  int testP=(b == Position.Bias.Forward) ? pos : Math.max(p0,pos - 1);  int line=0;  int[] lineEnds=getLineEnds();  if (lineEnds != null) {    line=findLine(testP - p0);    if (line > 0) {      p0+=lineEnds[line - 1];    }    alloc.y+=alloc.height * line;  }  if (pos > p0) {    Segment segment=SegmentCache.getSharedSegment();    loadText(segment,p0,pos);    alloc.x+=Utilities.getTabbedTextWidth(segment,metrics,alloc.x,WrappedPlainView.this,p0);    SegmentCache.releaseSharedSegment(segment);  }  return alloc;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public V11Statement(FbWireDatabase database){  super(database);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.467 -0500",hash_original_method="48D34D966FD8EAADA4B9042FB2D410CB",hash_generated_method="47C30919D1E228AF190D6E0D3F0530CF") private DateUtils(){}  }
class C{  boolean isParameterUpOrDowngradeValid(Parameter dbParameter,VOParameter targetParameter){  if (!dbParameter.getParameterDefinition().getParameterId().equals(targetParameter.getParameterDefinition().getParameterId())) {    return false;  }  if (dbParameter.getParameterDefinition().getModificationType() != targetParameter.getParameterDefinition().getModificationType()) {    return false;  }  boolean targetOneTime=targetParameter.getParameterDefinition().getModificationType().equals(ParameterModificationType.ONE_TIME);  return !(!dbParameter.isConfigurable() && !targetOneTime) || compareParameterValue(dbParameter,targetParameter);}  }
class C{  private void defineButtons(UIDefaults d){  d.put("Button.contentMargins",new InsetsUIResource(6,14,6,14));  d.put("Button.defaultButtonFollowsFocus",Boolean.FALSE);  d.put("buttonBorderBaseEnabled",new Color(0x709ad0));  d.put("buttonBorderBasePressed",new Color(0x4879bf));  d.put("buttonInteriorBaseEnabled",new Color(0xd5e8f7));  d.put("buttonInteriorBasePressed",new Color(0x6d8fba));  d.put("buttonInteriorBaseSelected",new Color(0x80a6d2));  d.put("buttonInteriorBasePressedSelected",new Color(0x7497c2));  d.put("texturedButtonBorderBaseEnabled",new Color(0x999999));  d.put("texturedButtonInteriorBaseEnabled",new Color(0xf0f0f0));  d.put("texturedButtonInteriorBasePressed",new Color(0x8eb3d2));  d.put("texturedButtonInteriorBaseSelected",new Color(0x98c1e2));  d.put("texturedButtonInteriorBasePressedSelected",new Color(0x7e9fba));  d.put("buttonBulletBottomEnabled",Color.BLACK);  d.put("buttonArrow",Color.BLACK);  String p="Button";  String c=PAINTER_PREFIX + "ButtonPainter";  d.put(p + ".States","Enabled,Pressed,Disabled,Focused,Default");  d.put(p + "[Default+Pressed].textForeground",new ColorUIResource(Color.black));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Default].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DEFAULT));  d.put(p + "[Default+Focused].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DEFAULT_FOCUSED));  d.put(p + "[Default+Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_DEFAULT));  d.put(p + "[Default+Focused+Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_DEFAULT_FOCUSED));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  p="ToggleButton";  d.put(p + ".contentMargins",new InsetsUIResource(6,14,6,14));  d.put(p + ".States","Enabled,Pressed,Disabled,Focused,Selected");  d.put(p + "[Selected].textForeground",new ColorUIResource(Color.black));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Default+Pressed].textForeground",new ColorUIResource(Color.black));  d.put(p + "[Focused+Selected].textForeground",new ColorUIResource(Color.black));  d.put(p + "[Disabled+Selected].textForeground",new ColorUIResource(new Color(0,0,0,0x80)));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Focused+Selected].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_SELECTED_FOCUSED));  d.put(p + "[Pressed+Selected].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_SELECTED));  d.put(p + "[Focused+Pressed+Selected].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_PRESSED_SELECTED_FOCUSED));  d.put(p + "[Disabled+Selected].backgroundPainter",new LazyPainter(c,ButtonPainter.Which.BACKGROUND_DISABLED_SELECTED));  p="CheckBox";  c=PAINTER_PREFIX + "CheckBoxPainter";  d.put(p + ".States","Enabled,Pressed,Disabled,Focused,Selected");  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_DISABLED));  d.put(p + "[Enabled].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_ENABLED));  d.put(p + "[Focused].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_FOCUSED));  d.put(p + "[Pressed].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_PRESSED));  d.put(p + "[Focused+Pressed].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_PRESSED_FOCUSED));  d.put(p + "[Selected].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_SELECTED));  d.put(p + "[Focused+Selected].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_SELECTED_FOCUSED));  d.put(p + "[Pressed+Selected].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_PRESSED_SELECTED));  d.put(p + "[Focused+Pressed+Selected].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_PRESSED_SELECTED_FOCUSED));  d.put(p + "[Disabled+Selected].iconPainter",new LazyPainter(c,CheckBoxPainter.Which.ICON_DISABLED_SELECTED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",18,18));  p="RadioButton";  c=PAINTER_PREFIX + "RadioButtonPainter";  d.put(p + ".States","Enabled,Pressed,Disabled,Focused,Selected");  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_DISABLED));  d.put(p + "[Enabled].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_ENABLED));  d.put(p + "[Focused].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_FOCUSED));  d.put(p + "[Pressed].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_PRESSED));  d.put(p + "[Focused+Pressed].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_PRESSED_FOCUSED));  d.put(p + "[Selected].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_SELECTED));  d.put(p + "[Focused+Selected].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_SELECTED_FOCUSED));  d.put(p + "[Pressed+Selected].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_PRESSED_SELECTED));  d.put(p + "[Focused+Pressed+Selected].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_PRESSED_SELECTED_FOCUSED));  d.put(p + "[Disabled+Selected].iconPainter",new LazyPainter(c,RadioButtonPainter.Which.ICON_DISABLED_SELECTED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",18,18));}  }
class C{  protected static String quoteMap(Map<String,Class<?>> map){  if (map == null) {    return "null";  }  if (map.size() == 0) {    return "new Map()";  }  return "new Map() /* " + map.toString() + " */";}  }
class C{  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder(com.wipro.ats.bdre.imcrawler.mr.Contents.Builder other){  return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder(other);}  }
class C{  public int numberOfOwningShards(){  int count=0;  for (  ShardRouting shardEntry : this) {    if (shardEntry.state() != ShardRoutingState.RELOCATING) {      count++;    }  }  return count;}  }
class C{  public void createPhysicalCopy(String baseVolumeName,String cloneName,String cloneCPG) throws Exception {  _log.info("3PARDriver: createPhysicalCopy enter");  String baseVolumeSnapCPG=cloneCPG;  String baseVolumeUserCPG=cloneCPG;  ClientResponse clientResp=null;  String payload=null;  String secondPayload=null;  payload="{\"action\":\"createPhysicalCopy\", \"parameters\": { \"destVolume\": \"" + cloneName + "\" , \"saveSnapshot\": "+ true+ "} }";  final String path=MessageFormat.format(URI_CREATE_VOLUME_CLONE,baseVolumeName);  _log.info(" 3PARDriver: createPhysicalCopy uri = {} payload {} secondPayload {}",path,payload,secondPayload);  try {    clientResp=post(path,payload);    if (clientResp == null || clientResp.getStatus() != 201) {      if (clientResp != null) {        String errResp=getResponseDetails(clientResp);        _log.info(" 3PARDriver: createPhysicalCopy destination clone volume absent, hence creating new volume for clone. Error Info : {}",errResp);      }      VolumeDetailsCommandResult volResult=null;      try {        volResult=getVolumeDetails(baseVolumeName);      } catch (      Exception e) {        _log.info("3PARDriver: createVolumeClone the specified volume {} for clone creation not found, its parent {}; continue with clone creation: {}.\n",baseVolumeName,cloneName,e.getMessage());      }      if (volResult != null) {        baseVolumeUserCPG=volResult.getUserCPG();        baseVolumeSnapCPG=volResult.getSnapCPG();        Boolean tpvv=true;        Boolean tdvv=false;        if (volResult.getProvisioningType() == 6) {          tdvv=true;          tpvv=false;        }        _log.info("3PARDriver: createVolumeClone base volume exists, id {}, baseVolumeSnapCPG {} , baseVolumeUserCPG {} , copyOf {}, copyType {} , name {}, volume type {} - ",baseVolumeName,baseVolumeSnapCPG,baseVolumeUserCPG,volResult.getCopyOf(),volResult.getCopyType(),volResult.getName(),volResult.getProvisioningType());        createVolume(cloneName,baseVolumeSnapCPG,tpvv,tdvv,volResult.getSizeMiB());        try {          volResult=getVolumeDetails(baseVolumeName);        } catch (        Exception e) {          _log.info("3PARDriver: createVolumeClone the specified clone volume {} not created successfully yet. error {}",cloneName,e.getMessage());        }        if (volResult != null) {          clientResp=post(path,payload);        } else {          _log.info("3PARDriver: createVolumeClone unable to find the newly created volume, volResult is null");        }      } else {        _log.info("3PARDriver: createVolumeClone base volume not found, volResult is null");      }    }    if (clientResp == null) {      _log.error("3PARDriver:There is no response from 3PAR");      throw new HP3PARException("There is no response from 3PAR");    } else     if (clientResp.getStatus() != 201) {      String errResp=getResponseDetails(clientResp);      _log.info("3PARDriver: createPhysicalCopy error resopnse : {} ",errResp);      throw new HP3PARException(errResp);    } else {      _log.info("3PARDriver: createPhysicalCopy success");    }  } catch (  Exception e) {    throw e;  } finally {    if (clientResp != null) {      clientResp.close();    }    _log.info("3PARDriver: createPhysicalCopy leave");  }}  }
class C{  public boolean append(Node child){  child.setParent(this);  return getParentList(this).add(child);}  }
class C{  private void robustInvert(){  final int dim=mean.length;  LUDecomposition lu=new LUDecomposition(covariance);  double det=lu.det();  if (!(det > 0.)) {    for (int i=0; i < dim; i++) {      covariance[i][i]+=SINGULARITY_CHEAT;    }    lu=new LUDecomposition(covariance);    det=lu.det();    if (!(det > 0.)) {      LOG.warning("Singularity cheat did not resolve zero determinant.");      det=1.;    }  }  normDistrFactor=1. / Math.sqrt(norm * det);  invCovMatr=lu.solve(identity(dim,dim));}  }
class C{  @Override public CloseableReference<Bitmap> createBitmap(int width,int height,Bitmap.Config bitmapConfig){  CloseableReference<PooledByteBuffer> jpgRef=mJpegGenerator.generate((short)width,(short)height);  try {    EncodedImage encodedImage=new EncodedImage(jpgRef);    encodedImage.setImageFormat(ImageFormat.JPEG);    try {      CloseableReference<Bitmap> bitmapRef=mPurgeableDecoder.decodeJPEGFromEncodedImage(encodedImage,bitmapConfig,jpgRef.get().size());      bitmapRef.get().eraseColor(Color.TRANSPARENT);      return bitmapRef;    }  finally {      EncodedImage.closeSafely(encodedImage);    }  }  finally {    jpgRef.close();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.481 -0500",hash_original_method="601D82D104A095ABBA912C73F2E0F835",hash_generated_method="A56786C9EEC3E634CDD3B76C435F31F8") private static Date cloneDate(Date date){  if (date == null) {    return null;  }  return (Date)date.clone();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Px<T> instance(){  return (Px<T>)INSTANCE;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String toCommaDelimitedStringInQuotes(Collection c){  StringBuffer result=new StringBuffer();  for (Iterator i=c.iterator(); i.hasNext(); ) {    Object o=i.next();    result.append(",'" + o.toString() + "'");  }  return result.substring(1);}  }
class C{  private void restoreFavorite(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking favorite " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackFavorite(buffer,dataSize);  cr.insert(LauncherSettings.Favorites.CONTENT_URI,values);}  }
class C{  public ElementRule(Class type,boolean optional){  this(type,null,null,(optional ? 0 : 1),1);}  }
class C{  public int size(){  return nbits;}  }
class C{  public JComponentWriterFileFilter(String extension,String description,JComponentWriter writer){  super(extension,description);  m_Writer=writer;}  }
class C{  public boolean hasRolloutReadPermission(){  return permissionService.hasPermission(SpPermission.ROLLOUT_MANAGEMENT);}  }
class C{  public static byte[] userFlagToBytes(String flag){  return Bytes.toBytes(PREFIX_UFLAGS + flag);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void startInstalledAppDetails(Context context,String packageName){  Intent intent=new Intent();  int sdkVersion=Build.VERSION.SDK_INT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));  } else {    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra((sdkVersion == Build.VERSION_CODES.FROYO ? "pkg" : "com.android.settings.ApplicationPkgName"),packageName);  }  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  protected void fireDOMActivateEvent(EventTarget target,int detailArg){  DocumentEvent docEvt=(DocumentEvent)((Element)target).getOwnerDocument();  DOMUIEvent uiEvt=(DOMUIEvent)docEvt.createEvent("UIEvents");  uiEvt.initUIEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMActivate",true,true,null,0);  target.dispatchEvent(uiEvt);}  }
class C{  @Deprecated public Configurable(){  this(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);}  }
class C{  public boolean isSymbol(int i){  return i >= 0 && i < size() && getArgument(i) instanceof MathCharacter && ((MathCharacter)getArgument(i)).isSymbol();}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(DBIDUtil.asInteger(id));}  }
class C{  public MoveTargetEdit(int offset){  super(offset,0);}  }
class C{  public T caseStateSpecification(StateSpecification object){  return null;}  }
class C{  public void printSessionId(String jobName,String sessionId){  Preconditions.checkArgument(!Strings.isNullOrEmpty(sessionId));  Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName));  String message=String.format("SauceOnDemandSessionID=%1$s job-name=%2$s",sessionId,jobName);  System.out.println(message);}  }
class C{  public static <T>Supplier<T> prevDupSupplier(final Cursor cursor,final DatabaseEntry key,final ByteArrayConverter<T> converter){  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public static TempBuffer create(){  return new TempBuffer(TempBuffers.create());}  }
class C{  @Override public void handleQuitRequestWith(GenericQuitEvent event,GenericQuitResponse response){  log.debug("Called");  if (event == null) {    log.warn("Received a null event");    return;  }  log.debug("Event class is {}",event.getClass().getSimpleName());  log.debug("Broadcasting to {} listener(s)",listeners.size());  for (  GenericQuitEventListener listener : listeners) {    listener.onQuitEvent(event,response);  }}  }
class C{  public void free(){  if (!allocatedMemory.isEmpty()) {    for (    SysMemInfo sysMemInfo : allocatedMemory) {      Memory.getInstance().memset(sysMemInfo.addr,(byte)-1,sysMemInfo.size);      Modules.SysMemUserForUserModule.free(sysMemInfo);    }    allocatedMemory.clear();    HLEModuleManager.getInstance().UnloadFlash0Module(this);  }}  }
class C{  @Override public void evaluate() throws Throwable {  try {    wrappedStatement.evaluate();  }  finally {    tearDownHql.runScript(testingHiveServer.getHiveContext());  }}  }
class C{  public void paste(int startIndex){  setCaretPosition(startIndex);  JTextComponent.this.paste();}  }
class C{  public void close(){  _client.close();}  }
class C{  private Map<String,Object> executeJob(String namespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String fileTypeCode,String partitionKey,String partitionValue,String subPartitionValues,String businessObjectFormatVersion,String businessObjectDataVersion) throws Exception {  List<FieldExtension> fieldExtensionList=new ArrayList<>();  if (namespace != null) {    fieldExtensionList.add(buildFieldExtension("namespace","${businessObjectDefinitionNamespace}"));  }  fieldExtensionList.add(buildFieldExtension("businessObjectDefinitionName","${businessObjectDefinitionName}"));  fieldExtensionList.add(buildFieldExtension("businessObjectFormatUsage","${businessObjectFormatUsage}"));  fieldExtensionList.add(buildFieldExtension("businessObjectFormatFileType","${businessObjectFormatFileType}"));  fieldExtensionList.add(buildFieldExtension("partitionKey","${partitionKey}"));  fieldExtensionList.add(buildFieldExtension("partitionValue","${partitionValue}"));  fieldExtensionList.add(buildFieldExtension("subPartitionValues","${subPartitionValues}"));  fieldExtensionList.add(buildFieldExtension("businessObjectFormatVersion","${businessObjectFormatVersion}"));  fieldExtensionList.add(buildFieldExtension("businessObjectDataVersion","${businessObjectDataVersion}"));  List<Parameter> parameters=new ArrayList<>();  if (namespace != null) {    parameters.add(buildParameter("businessObjectDefinitionNamespace",namespace));  }  parameters.add(buildParameter("businessObjectDefinitionName",businessObjectDefinitionName));  parameters.add(buildParameter("businessObjectFormatUsage",businessObjectFormatUsage));  parameters.add(buildParameter("businessObjectFormatFileType",fileTypeCode));  parameters.add(buildParameter("partitionKey",partitionKey));  parameters.add(buildParameter("partitionValue",partitionValue));  parameters.add(buildParameter("subPartitionValues",subPartitionValues));  parameters.add(buildParameter("businessObjectFormatVersion",businessObjectFormatVersion));  parameters.add(buildParameter("businessObjectDataVersion",businessObjectDataVersion));  String activitiXml=buildActivitiXml(IMPLEMENTATION,fieldExtensionList);  Job job=jobServiceTestHelper.createJobForCreateClusterForActivitiXml(activitiXml,parameters);  assertNotNull(job);  HistoricProcessInstance hisInstance=activitiHistoryService.createHistoricProcessInstanceQuery().processInstanceId(job.getId()).includeProcessVariables().singleResult();  return hisInstance.getProcessVariables();}  }
class C{  public ProfileManagerDialog(Frame parent,boolean modal){  super(parent,modal);  initComponents();  ProfileManager.getDefault().addPropertyChangeListener(ProfileManager.ACTIVE_PROFILE,null);  ProfileManager.getDefault().addPropertyChangeListener(Profile.NAME,null);  this.jScrollPane1.getVerticalScrollBar().addAdjustmentListener(null);}  }
class C{  private SolutionKey newSolutionKey(final Gearing gearing,final IBindingSet bs){  if (edgeVar == null || middleTerm.isConstant()) {    if (gearing.inVar != null && gearing.outVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.inVar),bs.get(gearing.outVar),bs.get(gearing.tVarOut)});    } else     if (gearing.inVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.inVar),bs.get(gearing.tVarOut)});    } else     if (gearing.outVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.outVar),bs.get(gearing.tVarOut)});    } else {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.tVarOut)});    }  } else {    final IConstant<?> edge=middleTerm.isConstant() ? (IConstant<?>)middleTerm : bs.get((IVariable<?>)middleTerm);    if (gearing.inVar != null && gearing.outVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.inVar),bs.get(gearing.outVar),bs.get(gearing.tVarOut),edge});    } else     if (gearing.inVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.inVar),bs.get(gearing.tVarOut),edge});    } else     if (gearing.outVar != null) {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.outVar),bs.get(gearing.tVarOut),edge});    } else {      return new SolutionKey(new IConstant<?>[]{bs.get(gearing.tVarOut),edge});    }  }}  }
class C{  public void startTransition(){  if (mViewToShow != null) {    ViewParent parent=mViewToShow.getParent();    ((ViewGroup)parent).removeView(mViewToShow);    addChildView(mViewToShow);    if (mViewToHide != null)     mViewToShow.setAlpha(0.0f);  }}  }
class C{  public Timeline pushPause(float time){  if (isBuilt)   throw new RuntimeException("You can't push anything to a timeline once it is started");  current.children.add(Tween.mark().delay(time));  return this;}  }
class C{  public AuthRequest authenticate(List discoveries,String returnToUrl,String realm) throws ConsumerException, MessageException {  DiscoveryInformation discovered=associate(discoveries);  return authenticate(discovered,returnToUrl,realm);}  }
class C{  synchronized public void createEmptyDB(){  mOpenHelper.createEmptyDB(mOpenHelper.getWritableDatabase());}  }
class C{  protected void flushCookieStore(){  throw new MustOverrideException();}  }
class C{  private static int startsWithLenient(String s,String match,int minChars,boolean acceptTrailing){  if (s.charAt(0) != match.charAt(0))   return -1;  if (minChars == -1)   minChars=match.length();  int sSz=s.length();  if (sSz < minChars)   return -1;  int mSz=match.length();  int sIx=0;  for (int mIx=0; mIx < mSz; sIx++, mIx++) {    while (sIx < sSz && (s.charAt(sIx) == ' ' || s.charAt(sIx) == '_'))     sIx++;    if (sIx >= sSz || s.charAt(sIx) != match.charAt(mIx))     return mIx >= minChars && (acceptTrailing || sIx >= sSz) && (sIx >= sSz || s.charAt(sIx - 1) == ' ') ? sIx : -1;  }  return sIx >= sSz || acceptTrailing || s.charAt(sIx) == ' ' ? sIx : -1;}  }
class C{  private void insertExceptionThrow(SsaInsn insn,RegisterSpec index,HashSet<SsaInsn> deletedInsns){  CstType exception=new CstType(Exceptions.TYPE_ArrayIndexOutOfBoundsException);  insertThrowingInsnBefore(insn,RegisterSpecList.EMPTY,null,RegOps.NEW_INSTANCE,exception);  SsaBasicBlock currBlock=insn.getBlock();  SsaBasicBlock newBlock=currBlock.insertNewSuccessor(currBlock.getPrimarySuccessor());  SsaInsn newInsn=newBlock.getInsns().get(0);  RegisterSpec newReg=RegisterSpec.make(ssaMeth.makeNewSsaReg(),exception);  insertPlainInsnBefore(newInsn,RegisterSpecList.EMPTY,newReg,RegOps.MOVE_RESULT_PSEUDO,null);  SsaBasicBlock newBlock2=newBlock.insertNewSuccessor(newBlock.getPrimarySuccessor());  SsaInsn newInsn2=newBlock2.getInsns().get(0);  CstNat newNat=new CstNat(new CstString("<init>"),new CstString("(I)V"));  CstMethodRef newRef=new CstMethodRef(exception,newNat);  insertThrowingInsnBefore(newInsn2,RegisterSpecList.make(newReg,index),null,RegOps.INVOKE_DIRECT,newRef);  deletedInsns.add(newInsn2);  SsaBasicBlock newBlock3=newBlock2.insertNewSuccessor(newBlock2.getPrimarySuccessor());  SsaInsn newInsn3=newBlock3.getInsns().get(0);  insertThrowingInsnBefore(newInsn3,RegisterSpecList.make(newReg),null,RegOps.THROW,null);  newBlock3.replaceSuccessor(newBlock3.getPrimarySuccessorIndex(),ssaMeth.getExitBlock().getIndex());  deletedInsns.add(newInsn3);}  }
class C{  public static HelpNode fromXml(String xml) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(new StringReader(xml)));}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.258 -0400",hash_original_method="34E090FC5E2F0D70541D5EF28EF411C0",hash_generated_method="86E463B7E3BC73EE1AF9E7024F121820") private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  public boolean isMinimizeOnBack(){  return menuBar.isMinimizeOnBack();}  }
class C{  public Class<?> importClass(String name) throws ClassNotFoundException {  throw new RuntimeException("Not implemented");}  }
class C{  public RouteGeneratorHTTP(String origin,String destination,ModeOption mode) throws ClientProtocolException, IllegalStateException, IOException, ParserConfigurationException, SAXException, NoRoutesException, URISyntaxException, BadAddressException {  super();  this.origin=origin;  this.destination=destination;  this.modeOption=mode;  routes=new ArrayList<Route>();  locate();}  }
class C{  public GrabPoint addGrabPoint(GrabPoint gp){  if (gp == null) {    com.bbn.openmap.util.Debug.error("OffsetGrabPoint: adding null grab point!");    return null;  }  if (offsetPoints == null) {    offsetPoints=new Hashtable<GrabPoint,Offset>();  }  offsetPoints.put(gp,new Offset(gp));  return gp;}  }
class C{  static protected boolean addFamily(java.awt.Frame frame,String type,String family,HashMap<String,NamedIcon> iconMap){  if (ItemPalette.getFamilyMaps(type) == null) {    HashMap<String,HashMap<String,NamedIcon>> typeMap=new HashMap<String,HashMap<String,NamedIcon>>();    _iconMaps.put(type,typeMap);  }  Iterator<String> iter=ItemPalette.getFamilyMaps(type).keySet().iterator();  if (familyNameOK(frame,type,family,iter)) {    getFamilyMaps(type).put(family,iconMap);    ImageIndexEditor.indexChanged(true);    return true;  }  return false;}  }
class C{  public static Map<String,Object> persistRootCompDoc(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String contentId=(String)context.get("contentId");  if (UtilValidate.isNotEmpty(contentId)) {    try {      EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error running serviceName persistContentAndAssoc",module);      return ServiceUtil.returnError(UtilProperties.getMessage(CoreEvents.err_resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));    }  }  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService("persistContentAndAssoc");  } catch (  GenericServiceException e) {    Debug.logError("Error getting model service for serviceName, 'persistContentAndAssoc'. " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale));  }  Map<String,Object> persistMap=modelService.makeValid(context,ModelService.IN_PARAM);  persistMap.put("userLogin",userLogin);  try {    Map<String,Object> persistContentResult=dispatcher.runSync("persistContentAndAssoc",persistMap);    if (ServiceUtil.isError(persistContentResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentAndAssoc"),locale),null,null,persistContentResult);    }    contentId=(String)persistContentResult.get("contentId");    result.putAll(persistContentResult);    Map<String,Object> contentRevisionMap=FastMap.newInstance();    contentRevisionMap.put("itemContentId",contentId);    contentRevisionMap.put("contentId",contentId);    contentRevisionMap.put("userLogin",userLogin);    Map<String,Object> persistRevResult=dispatcher.runSync("persistContentRevisionAndItem",contentRevisionMap);    if (ServiceUtil.isError(persistRevResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentRevisionAndItem"),locale),null,null,persistRevResult);    }    result.putAll(persistRevResult);    return result;  } catch (  GenericServiceException e) {    Debug.logError(e,"Error running serviceName, 'persistContentAndAssoc'. " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentAndAssoc"),locale) + e.toString());  }}  }
class C{  public StringBody(final String text,final Charset charset) throws UnsupportedEncodingException {  this(text,"text/plain",charset);}  }
class C{  public int hashCode(){  return sid.hashCode();}  }
class C{  public static boolean call(PageContext pc,String type,Object value,Object objPattern) throws PageException {  type=type.trim();  if (!"regex".equalsIgnoreCase(type) && !"regular_expression".equalsIgnoreCase(type))   throw new FunctionException(pc,"isValid",1,"type","wrong attribute count for type [" + type + "]");  return regex(Caster.toString(value,null),Caster.toString(objPattern));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private CGraphProximityBrowser(){}  }
class C{  public boolean toggleSuperPickAxe(){  superPickaxe=!superPickaxe;  return superPickaxe;}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return !glassPane.isVisible();}  }
class C{  protected static void preparePKCS12TokenAndKey(){  signingToken=new Pkcs12SignatureToken("password","src/main/resources/user_a_rsa.p12");  privateKey=signingToken.getKeys().get(0);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return UID;default :return null;}}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public long threadId(){  return getId();}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  protected BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatusImpl(BusinessObjectDataKey businessObjectDataKey,BusinessObjectDataStatusUpdateRequest request){  businessObjectDataHelper.validateBusinessObjectDataKey(businessObjectDataKey,true,true);  Assert.hasText(request.getStatus(),"A business object data status must be specified.");  request.setStatus(request.getStatus().trim());  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);  String previousBusinessObjectDataStatus=businessObjectDataEntity.getStatus().getCode();  businessObjectDataDaoHelper.updateBusinessObjectDataStatus(businessObjectDataEntity,request.getStatus());  BusinessObjectDataStatusUpdateResponse response=new BusinessObjectDataStatusUpdateResponse();  response.setBusinessObjectDataKey(businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity));  response.setStatus(businessObjectDataEntity.getStatus().getCode());  response.setPreviousStatus(previousBusinessObjectDataStatus);  return response;}  }
class C{  public static void convertToXml(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  saveAsXML(root,out);}  }
class C{  public Session createNonXAQueueSession(final boolean transacted,final int acknowledgeMode) throws JMSException {  checkClosed();  return createSessionInternal(false,transacted,acknowledgeMode,ActiveMQConnection.TYPE_QUEUE_CONNECTION);}  }
class C{  public void addUsers(org.oscm.xsd.User param){  if (localUsers == null) {    localUsers=new org.oscm.xsd.User[]{};  }  localUsersTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUsers);  list.add(param);  this.localUsers=(org.oscm.xsd.User[])list.toArray(new org.oscm.xsd.User[list.size()]);}  }
class C{  private int amountToScrollToNewFocus(int direction,View newFocus,int positionOfNewFocus){  int amountToScroll=0;  newFocus.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(newFocus,mTempRect);  if (direction == View.FOCUS_UP) {    if (mTempRect.top < mListPadding.top) {      amountToScroll=mListPadding.top - mTempRect.top;      if (positionOfNewFocus > 0) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  } else {    final int listBottom=getHeight() - mListPadding.bottom;    if (mTempRect.bottom > listBottom) {      amountToScroll=mTempRect.bottom - listBottom;      if (positionOfNewFocus < mItemCount - 1) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  }  return amountToScroll;}  }
class C{  public void addRecord(short platformID,short platformSpecificID,short languageID,short nameID,String value){  NameRecord rec=new NameRecord(platformID,platformSpecificID,languageID,nameID);  records.put(rec,value);}  }
class C{  public void addFailing(String name,Object... args){  list.add(Parameterization.failing(name,args));}  }
class C{  private Object invokeItemClickMethod(Object handler,String methodName,Object... params){  if (handler == null)   return null;  Method method=null;  try {    method=handler.getClass().getDeclaredMethod(methodName,AdapterView.class,View.class,int.class,long.class);    if (method != null)     return method.invoke(handler,params); else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    return basicSetOwningEnumeration(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public AVFrame remove_long(int i,int ref_mask){  AVFrame pic;  pic=long_ref[i];  if (pic != null) {    if (unreference_pic(pic,ref_mask) != 0) {      long_ref[i].long_ref=0;      long_ref[i]=null;      long_ref_count--;    }  }  return pic;}  }
class C{  MutableBigInteger(MutableBigInteger val){  intLen=val.intLen;  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);}  }
class C{  private String assembleExportMasksWorkflow(URI vplexURI,URI export,URI varrayUri,List<URI> initiators,Map<URI,Integer> blockObjectMap,Workflow workflow,String waitFor,String opId) throws Exception {  long startAssembly=new Date().getTime();  VPlexControllerUtils.cleanStaleExportMasks(_dbClient,vplexURI);  _log.info("TIMER: clean stale export masks took {} ms",new Date().getTime() - startAssembly);  StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);  ExportGroup exportGroup=getDataObject(ExportGroup.class,export,_dbClient);  _log.info("object map before filtering for this VPLEX: " + blockObjectMap);  Map<URI,Integer> filteredBlockObjectMap=new HashMap<URI,Integer>();  for (  URI boURI : blockObjectMap.keySet()) {    BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,boURI);    if (bo.getStorageController().equals(vplexURI)) {      filteredBlockObjectMap.put(bo.getId(),blockObjectMap.get(boURI));    }  }  blockObjectMap=filteredBlockObjectMap;  _log.info("object map after filtering for this VPLEX: " + blockObjectMap);  ExportUtils.validateExportGroupVolumeMap(exportGroup.getLabel(),blockObjectMap);  VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);  List<ExportMask> exportMasksToCreateOnDevice=new ArrayList<ExportMask>();  List<ExportMask> exportMasksToUpdateOnDevice=new ArrayList<ExportMask>();  Map<URI,List<Initiator>> exportMasksToUpdateOnDeviceWithInitiators=new HashMap<URI,List<Initiator>>();  Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts=new HashMap<URI,List<URI>>();  if (initiators == null) {    initiators=new ArrayList<URI>();    if (exportGroup.hasInitiators()) {      for (      String initiator : exportGroup.getInitiators()) {        initiators.add(URI.create(initiator));      }    }  }  Map<URI,List<Initiator>> hostInitiatorMap=VPlexUtil.makeHostInitiatorsMap(initiators,_dbClient);  Map<String,String> initiatorWwnToNameMap=null;  Set<ExportMask> sharedExportMasks=new HashSet<ExportMask>();  String lockName=null;  boolean lockAcquired=false;  try {    String vplexClusterId=ConnectivityUtil.getVplexClusterForVarray(varrayUri,vplexURI,_dbClient);    lockName=_vplexApiLockManager.getLockName(vplexURI,vplexClusterId);    String vplexClusterName=VPlexUtil.getVplexClusterName(varrayUri,vplexURI,client,_dbClient);    Map<String,String> targetPortToPwwnMap=VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName);    for (    URI hostUri : hostInitiatorMap.keySet()) {      _log.info("assembling export masks workflow, now looking at host URI: " + hostUri);      List<Initiator> inits=hostInitiatorMap.get(hostUri);      _log.info("this host contains these initiators: " + inits);      boolean foundMatchingStorageView=false;      boolean allPortsFromMaskMatchForVarray=true;      _log.info("attempting to locate an existing ExportMask for this host's initiators on VPLEX Cluster " + vplexClusterId);      Map<URI,ExportMask> vplexExportMasks=new HashMap<URI,ExportMask>();      allPortsFromMaskMatchForVarray=filterExportMasks(vplexExportMasks,inits,varrayUri,vplexSystem,vplexClusterId);      ExportMask sharedVplexExportMask=null;switch (vplexExportMasks.size()) {case 0:        sharedVplexExportMask=VPlexUtil.getExportMasksWithExistingInitiators(vplexURI,_dbClient,inits,varrayUri,vplexClusterId);      if (null != sharedVplexExportMask) {        sharedExportMasks.add(sharedVplexExportMask);        setupExistingExportMaskWithNewHost(blockObjectMap,vplexSystem,exportGroup,varrayUri,exportMasksToUpdateOnDevice,exportMasksToUpdateOnDeviceWithInitiators,exportMasksToUpdateOnDeviceWithStoragePorts,inits,sharedVplexExportMask,opId);        VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,sharedVplexExportMask.getMaskName());        _log.info("Refreshing ExportMask {}",sharedVplexExportMask.getMaskName());        VPlexControllerUtils.refreshExportMask(_dbClient,storageView,sharedVplexExportMask,targetPortToPwwnMap,_networkDeviceController);        foundMatchingStorageView=true;        break;      } else {        if (initiatorWwnToNameMap == null) {          _log.info("Reading all Initiator information into cache");          long start=new Date().getTime();          lockAcquired=_vplexApiLockManager.acquireLock(lockName,LockTimeoutValue.get(LockType.VPLEX_API_LIB));          if (!lockAcquired) {            throw VPlexApiException.exceptions.couldNotObtainConcurrencyLock(vplexSystem.getLabel());          }          initiatorWwnToNameMap=client.getInitiatorWwnToNameMap(vplexClusterName);          long elapsed=new Date().getTime() - start;          _log.info("TIMER: assembling the initiator wwn to name map took {} ms",elapsed);        }        _log.info("could not find an existing matching ExportMask in ViPR, " + "so ViPR will see if there is one already on the VPLEX system");        long start=new Date().getTime();        foundMatchingStorageView=checkForExistingStorageViews(client,targetPortToPwwnMap,initiatorWwnToNameMap,vplexSystem,vplexClusterName,inits,exportGroup,varrayUri,blockObjectMap,exportMasksToUpdateOnDevice,exportMasksToUpdateOnDeviceWithInitiators,exportMasksToUpdateOnDeviceWithStoragePorts,opId);        long elapsed=new Date().getTime() - start;        _log.info("TIMER: finding an existing storage view took {} ms and returned {}",elapsed,foundMatchingStorageView);        break;      }case 1:    ExportMask viprExportMask=vplexExportMasks.values().iterator().next();  _log.info("a valid ExportMask matching these initiators exists already in ViPR " + "for this VPLEX device, so ViPR will re-use it: " + viprExportMask.getMaskName());VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,viprExportMask.getMaskName());_log.info("Refreshing ExportMask {}",viprExportMask.getMaskName());VPlexControllerUtils.refreshExportMask(_dbClient,storageView,viprExportMask,targetPortToPwwnMap,_networkDeviceController);reuseExistingExportMask(blockObjectMap,vplexSystem,exportGroup,varrayUri,exportMasksToUpdateOnDevice,exportMasksToUpdateOnDeviceWithStoragePorts,inits,allPortsFromMaskMatchForVarray,viprExportMask,opId);foundMatchingStorageView=true;break;default :String message="Invalid Configuration: more than one VPLEX ExportMask " + "in this cluster exists in ViPR for these initiators " + inits;_log.error(message);throw new Exception(message);}if (!foundMatchingStorageView) {if (null == sharedVplexExportMask) {sharedVplexExportMask=VPlexUtil.getSharedExportMaskInDb(exportGroup,vplexURI,_dbClient,varrayUri,vplexClusterId,hostInitiatorMap);}if (null != sharedVplexExportMask) {_log.info(String.format("Shared export mask %s %s found for the export group %s %s which will be reused for initiators %s .",sharedVplexExportMask.getMaskName(),sharedVplexExportMask.getId(),exportGroup.getLabel(),exportGroup.getId(),inits.toString()));sharedExportMasks.add(sharedVplexExportMask);VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,sharedVplexExportMask.getMaskName());_log.info("Refreshing ExportMask {}",sharedVplexExportMask.getMaskName());VPlexControllerUtils.refreshExportMask(_dbClient,storageView,sharedVplexExportMask,targetPortToPwwnMap,_networkDeviceController);setupExistingExportMaskWithNewHost(blockObjectMap,vplexSystem,exportGroup,varrayUri,exportMasksToUpdateOnDevice,exportMasksToUpdateOnDeviceWithInitiators,exportMasksToUpdateOnDeviceWithStoragePorts,inits,sharedVplexExportMask,opId);} else {_log.info("did not find a matching existing storage view anywhere, so ViPR " + "will initialize a new one and push it to the VPLEX device");setupNewExportMask(blockObjectMap,vplexSystem,exportGroup,varrayUri,exportMasksToCreateOnDevice,inits,vplexClusterId,opId);}}}}  finally {if (lockAcquired) {_vplexApiLockManager.releaseLock(lockName);}}_dbClient.updateObject(exportGroup);_log.info("updating zoning if necessary for both new and updated export masks");String zoningStepId=handleZoningUpdate(export,initiators,blockObjectMap,workflow,waitFor,exportMasksToCreateOnDevice,exportMasksToUpdateOnDevice);String storageViewStepId=zoningStepId;_log.info("processing the export masks to be created");for (ExportMask exportMask : exportMasksToCreateOnDevice) {storageViewStepId=handleExportMaskCreate(blockObjectMap,workflow,vplexSystem,exportGroup,storageViewStepId,exportMask);}_log.info("processing the export masks to be updated");for (ExportMask exportMask : exportMasksToUpdateOnDevice) {boolean shared=false;if (sharedExportMasks.contains(exportMask)) {shared=true;}storageViewStepId=handleExportMaskUpdate(export,blockObjectMap,workflow,vplexSystem,exportMasksToUpdateOnDeviceWithInitiators,exportMasksToUpdateOnDeviceWithStoragePorts,storageViewStepId,exportMask,shared);}long elapsed=new Date().getTime() - startAssembly;_log.info("TIMER: export mask assembly took {} ms",elapsed);return storageViewStepId;}  }
class C{  @Override public void run(){  amIActive=true;  float progress=0;  String inputHeader=null;  String outputHeader=null;  double range=0;  double sill=0;  double nugget=0;  int numIterations=1000;  boolean fastMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      range=Double.parseDouble(args[i]);    } else     if (i == 3) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 4) {      fastMode=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int i, j, k, m, n;    int edge1, edge2;    double pnt1x=0, pnt1y=0, pnt2x=0, pnt2y=0;    double z;    int diagonalSize=0;    Random generator=new Random();    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    diagonalSize=(int)(Math.sqrt(rows * rows + cols * cols));    int filterHalfSize=(int)(range / (2 * image.getCellSizeX()));    int filterSize=filterHalfSize * 2 + 1;    int[] cellOffsets=new int[filterSize];    for (i=0; i < filterSize; i++) {      cellOffsets[i]=i - filterHalfSize;    }    double w=Math.sqrt(36d / (filterHalfSize * (filterHalfSize + 1) * filterSize));    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("blue_white_red.pal");    if (!fastMode) {      updateProgress("Loop 1 of 2: ",0);      for (i=0; i < numIterations; i++) {        double[] T=new double[diagonalSize + 2 * filterHalfSize];        for (j=0; j < diagonalSize; j++) {          T[j]=generator.nextGaussian();        }        double[] y=new double[diagonalSize];        for (j=0; j < diagonalSize; j++) {          z=0;          for (k=0; k < filterSize; k++) {            m=cellOffsets[k];            z+=m * T[j + filterHalfSize + m];          }          y[j]=w * z;        }        edge1=generator.nextInt(4);        edge2=edge1;        do {          edge2=generator.nextInt(4);        } while (edge2 == edge1);switch (edge1) {case 0:          pnt1x=0;        pnt1y=generator.nextDouble() * (rows - 1);      break;case 1:    pnt1x=generator.nextDouble() * (cols - 1);  pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}z=outputFile.getValue(row,col) + y[p];outputFile.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outputFile.getValue(row,col);value=(float)(z / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}} else {double[][] output=new double[rows][cols];updateProgress("Loop 1 of 2: ",0);for (i=0; i < numIterations; i++) {double[] T=new double[diagonalSize + 2 * filterHalfSize];for (j=0; j < diagonalSize; j++) {T[j]=generator.nextGaussian();}double[] y=new double[diagonalSize];for (j=0; j < diagonalSize; j++) {z=0;for (k=0; k < filterSize; k++) {m=cellOffsets[k];z+=m * T[j + filterHalfSize + m];}y[j]=w * z;}edge1=generator.nextInt(4);edge2=edge1;do {edge2=generator.nextInt(4);} while (edge2 == edge1);switch (edge1) {case 0:pnt1x=0;pnt1y=generator.nextDouble() * (rows - 1);break;case 1:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}output[row][col]+=y[p];}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {value=(float)(output[row][col] / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}}outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputFile.addMetadataEntry("Created on " + new Date());image.close();outputFile.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isWarnEnabled(){  return (getLogger().isLoggable(Level.WARNING));}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceCase_();}  }
class C{  @Override public void exceptionThrown(SQLException e,String sql){  System.out.println("Error executing " + sql);  e.printStackTrace();}  }
class C{  ConnectionTcp(long connId,PortTcp port,SocketBar socket){  _socket=socket;  _writeStream=new WriteStream();  _writeStream.reuseBuffer(true);  _readStream=new ReadStream();  _readStream.reuseBuffer(true);  _connectionId=connId;  _port=port;  _loader=port.classLoader();  Protocol protocol=port.protocol();  _protocol=protocol.newConnection(this);  _id=protocol.name() + "-" + _port.port()+ "-"+ _connectionId;  _inRef=port.services().newService(this).name(_id).ref();  _connProxy=_inRef.as(ConnectionTcpProxy.class);  _name=_id;  _pollHandle=port.createPollHandle(this);}  }
class C{  public boolean isLeftBlue(){  return (left == BeaconColor.BLUE_BRIGHT || left == BeaconColor.BLUE);}  }
class C{  private void showToast(@StringRes int resId){  hideToast();  mToast=Toast.makeText(this,resId,Toast.LENGTH_SHORT);  mToast.show();}  }
class C{  public void start(){  coordinatorStreamSystemProducer.register(CoordinatorStreamWriter.SOURCE);  coordinatorStreamSystemProducer.start();  log.info("Started coordinator stream writer.");}  }
class C{  @Override public void agentActed(Agent agent,Action action,Environment source){  showState();  notify((agent == null ? "User: " : "") + action.toString());}  }
class C{  public RegionDestroyedException(String s,String regionFullPath,Throwable ex){  super(s,ex);  this.regionFullPath=regionFullPath;}  }
class C{  public Uri persist(GenericPdu pdu,Uri uri,boolean createThreadId,boolean groupMmsEnabled,HashMap<Uri,InputStream> preOpenedFiles) throws MmsException {  if (uri == null) {    throw new MmsException("Uri may not be null.");  }  long msgId=-1;  try {    msgId=ContentUris.parseId(uri);  } catch (  NumberFormatException e) {  }  boolean existingUri=msgId != -1;  if (!existingUri && MESSAGE_BOX_MAP.get(uri) == null) {    throw new MmsException("Bad destination, must be one of " + "content://mms/inbox, content://mms/sent, " + "content://mms/drafts, content://mms/outbox, "+ "content://mms/temp.");  }synchronized (PDU_CACHE_INSTANCE) {    if (PDU_CACHE_INSTANCE.isUpdating(uri)) {      if (LOCAL_LOGV)       Log.v(TAG,"persist: " + uri + " blocked by isUpdating()");      try {        PDU_CACHE_INSTANCE.wait();      } catch (      InterruptedException e) {        Log.e(TAG,"persist1: ",e);      }    }  }  PDU_CACHE_INSTANCE.purge(uri);  PduHeaders header=pdu.getPduHeaders();  PduBody body=null;  ContentValues values=new ContentValues();  Set<Entry<Integer,String>> set;  set=ENCODED_STRING_COLUMN_NAME_MAP.entrySet();  for (  Entry<Integer,String> e : set) {    int field=e.getKey();    EncodedStringValue encodedString=header.getEncodedStringValue(field);    if (encodedString != null) {      String charsetColumn=CHARSET_COLUMN_NAME_MAP.get(field);      values.put(e.getValue(),toIsoString(encodedString.getTextString()));      values.put(charsetColumn,encodedString.getCharacterSet());    }  }  set=TEXT_STRING_COLUMN_NAME_MAP.entrySet();  for (  Entry<Integer,String> e : set) {    byte[] text=header.getTextString(e.getKey());    if (text != null) {      values.put(e.getValue(),toIsoString(text));    }  }  set=OCTET_COLUMN_NAME_MAP.entrySet();  for (  Entry<Integer,String> e : set) {    int b=header.getOctet(e.getKey());    if (b != 0) {      values.put(e.getValue(),b);    }  }  set=LONG_COLUMN_NAME_MAP.entrySet();  for (  Entry<Integer,String> e : set) {    long l=header.getLongInteger(e.getKey());    if (l != -1L) {      values.put(e.getValue(),l);    }  }  HashMap<Integer,EncodedStringValue[]> addressMap=new HashMap<Integer,EncodedStringValue[]>(ADDRESS_FIELDS.length);  for (  int addrType : ADDRESS_FIELDS) {    EncodedStringValue[] array=null;    if (addrType == PduHeaders.FROM) {      EncodedStringValue v=header.getEncodedStringValue(addrType);      if (v != null) {        array=new EncodedStringValue[1];        array[0]=v;      }    } else {      array=header.getEncodedStringValues(addrType);    }    addressMap.put(addrType,array);  }  HashSet<String> recipients=new HashSet<String>();  int msgType=pdu.getMessageType();  if ((msgType == PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND) || (msgType == PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF) || (msgType == PduHeaders.MESSAGE_TYPE_SEND_REQ)) {switch (msgType) {case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:      loadRecipients(PduHeaders.FROM,recipients,addressMap,false);    if (groupMmsEnabled) {      loadRecipients(PduHeaders.TO,recipients,addressMap,true);      loadRecipients(PduHeaders.CC,recipients,addressMap,true);    }  break;case PduHeaders.MESSAGE_TYPE_SEND_REQ:loadRecipients(PduHeaders.TO,recipients,addressMap,false);break;}long threadId=DUMMY_THREAD_ID;if (createThreadId && !recipients.isEmpty()) {threadId=Utils.getOrCreateThreadId(mContext,recipients);}values.put("thread_id",threadId);}long dummyId=System.currentTimeMillis();boolean textOnly=true;if (pdu instanceof MultimediaMessagePdu) {body=((MultimediaMessagePdu)pdu).getBody();if (body != null) {int partsNum=body.getPartsNum();if (partsNum > 2) {textOnly=false;}for (int i=0; i < partsNum; i++) {PduPart part=body.getPart(i);persistPart(part,dummyId,preOpenedFiles);String contentType=getPartContentType(part);if (contentType != null && !ContentType.APP_SMIL.equals(contentType) && !ContentType.TEXT_PLAIN.equals(contentType)) {textOnly=false;}}}}Uri res=null;if (existingUri) {res=uri;SqliteWrapper.update(mContext,mContentResolver,res,values,null,null);} else {res=SqliteWrapper.insert(mContext,mContentResolver,uri,values);if (res == null) {throw new MmsException("persist() failed: return null.");}msgId=ContentUris.parseId(res);}values=new ContentValues(1);values.put("mid",msgId);SqliteWrapper.update(mContext,mContentResolver,Uri.parse("content://mms/" + dummyId + "/part"),values,null,null);if (!existingUri) {res=Uri.parse(uri + "/" + msgId);}for (int addrType : ADDRESS_FIELDS) {EncodedStringValue[] array=addressMap.get(addrType);if (array != null) {persistAddress(msgId,addrType,array);}}return res;}  }
class C{  public final void init(boolean forEncryption,byte[] key){  WorkingKey=generateWorkingKey(key,forEncryption);  this.doEncrypt=forEncryption;}  }
class C{  public static void expandSelectionUp(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.expandSelectionUp(selectableGraph);  } else {    final Collection<INaviViewNode> rawNodes=GraphConverters.convert(graph.getSelectedNodes());    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getPredecessors(rawNodes,1)),true);  }}  }
class C{  public void displaySceneGraph(boolean display){  mDisplaySceneGraph=display;}  }
class C{  private void lazyClassInit(){  if (lazyInitDone)   return;synchronized (lazyInitLock) {    if (redirect != null) {      throw new GroovyBugError("lazyClassInit called on a proxy ClassNode, that must not happen." + "A redirect() call is missing somewhere!");    }    if (lazyInitDone)     return;    VMPluginFactory.getPlugin().configureClassNode(compileUnit,this);    lazyInitDone=true;  }}  }
class C{  public SecP224K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public AdjustmentEvent(Adjustable source,int id,int type,int value,boolean isAdjusting){  super(source,id);  adjustable=source;  this.adjustmentType=type;  this.value=value;  this.isAdjusting=isAdjusting;}  }
class C{  @Override public String describe(){  if (hasDescription()) {    return getDescription();  } else {    final String dest=getInfoString();    final String[] info=dest.split(",");    if (info.length == 2) {      if (info[0].equals("marriage")) {        return "You read: You are cordially invited to the marriage of " + info[1] + ". Please confirm what time and date you should attend, and then use this scroll to get to Fado Church.";      }      if (info[0].equals("honeymoon")) {        return "You see a scroll which will transport you out of the Fado Lovers Room, and back to Fado Hotel.";      }      return "An invitation to an event.";    }    return "An invitation to an event.";  }}  }
class C{  private void prepareVpoolPlacementPolicyData() throws Exception {  log.info("Preparing Virtual pools for VirtualPoolPlacementPolicyMigration");  VirtualPool blockVpool=new VirtualPool();  blockVpoolURI=URIUtil.createId(VirtualPool.class);  blockVpool.setId(blockVpoolURI);  blockVpool.setType(VirtualPool.Type.block.name());  _dbClient.createObject(blockVpool);  VirtualPool fileVpool=new VirtualPool();  fileVpoolURI=URIUtil.createId(VirtualPool.class);  fileVpool.setId(fileVpoolURI);  fileVpool.setType(VirtualPool.Type.file.name());  _dbClient.createObject(fileVpool);}  }
class C{  public void write(char buf[],int off,int len){  if (text != null) {    text.append(new String(buf,off,len));    if ((col+=len) > wrap)     println();  } else   super.write(buf,off,len);}  }
class C{  public void addMessage(String line){  isThereNewErrors=true;  if (m_numberOfParseErrorToKeepMax > 0) {    final String msgRep=getMessageRepresentation(line);    MessageStats msgStats=m_msgRepToMsgStatsMap.get(msgRep);    if (msgStats == null) {      msgStats=new MessageStats(msgRep);      m_msgRepToMsgStatsMap.put(msgStats.getMessageRepresentation(),msgStats);    }    msgStats.occurred();    cleanupMapIfNeeded();  }}  }
class C{  private List<Predicate> extractPredicates(MultivaluedMap<String,String> queryParams) throws ParseException {  List<Predicate> predicates=new ArrayList<>();  for (  MultivaluedMap.Entry<String,List<String>> entry : queryParams.entrySet()) {    String paramName=entry.getKey();    List<String> paramValues=entry.getValue();    Matcher matcher=Pattern.compile("filter\\[([^\\]]+)\\](\\[([^\\]]+)\\])?").matcher(paramName);    if (matcher.find()) {      final String[] keyParts=matcher.group(1).split("\\.");      if (keyParts.length < 2) {        throw new ParseException("Invalid filter format: " + paramName);      }      final Operator operator=(matcher.group(3) == null) ? Operator.IN : Operator.fromString(matcher.group(3));      List<Predicate.PathElement> path=getPath(keyParts);      Predicate.PathElement last=path.get(path.size() - 1);      final List<Object> values=new ArrayList<>();      if (operator.isParameterized()) {        for (        String valueParams : paramValues) {          for (          String valueParam : valueParams.split(",")) {            values.add(CoerceUtil.coerce(valueParam,last.getFieldType()));          }        }      }      Predicate predicate=new Predicate(path,operator,values);      predicates.add(predicate);    } else {      throw new ParseException("Invalid filter format: " + paramName);    }  }  return predicates;}  }
class C{  public Select<Model> having(String having){  this.having=having;  return this;}  }
class C{  @Override @Unpreemptible public int findCatchBlockForInstruction(Offset instructionOffset,RVMType exceptionType){  if (eTable == null) {    return -1;  } else {    return ExceptionTable.findCatchBlockForInstruction(eTable,instructionOffset,exceptionType);  }}  }
class C{  public void test_getCertificateChain(){  init(SERVER);  assertNull("Not NULL for NULL parameter",manager.getCertificateChain(null));  assertNull("Not NULL for empty parameter",manager.getCertificateChain(""));  assertNull("Not NULL for clientAlias_01 parameter",manager.getCertificateChain("clientAlias_01"));  assertNull("Not NULL for serverAlias_00 parameter",manager.getCertificateChain("serverAlias_00"));}  }
class C{  public boolean needsDefaultFormatter(){  if (mYAxisValueFormatter == null)   return true;  if (mYAxisValueFormatter instanceof DefaultValueFormatter)   return true;  return false;}  }
class C{  @Override @Unpreemptible public int findCatchBlockForInstruction(Offset instructionOffset,RVMType exceptionType){  if (eTable == null) {    return -1;  } else {    int catchOffset=ExceptionTable.findCatchBlockForInstruction(eTable,instructionOffset,exceptionType);    dealWithPossibleRemovalOfCatchBlockByTheOptCompiler(instructionOffset,exceptionType,catchOffset);    return catchOffset;  }}  }
class C{  public Shape createOpenRectangle(final int x,final int y,final int w,final int h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  return path;}  }
class C{  synchronized protected void onSliderVisibilityChanged(int streamType,int visible){  if (LOGD)   Log.d(TAG,"onSliderVisibilityChanged(stream=" + streamType + ", visi="+ visible+ ")");  boolean isVisible=(visible == 1);  for (int i=STREAMS.length - 1; i >= 0; i--) {    StreamResources streamRes=STREAMS[i];    if (streamRes.streamType == streamType) {      streamRes.show=isVisible;      if (!isVisible && (mActiveStreamType == streamType)) {        mActiveStreamType=-1;      }      break;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  String filterSize="3 x 3";  int numPixelsInFilter;  boolean reflectAtBorders=false;  int[] dX;  int[] dY;  double[] maskX;  double[] maskY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSize=args[i];    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.endsWith("3 x 3")) {      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      maskX=new double[]{1,2,1,0,-1,-2,-1,0};      maskY=new double[]{1,0,-1,-2,-1,0,1,2};    } else {      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};      maskX=new double[]{2,1,0,-1,-2,3,2,0,-2,-3,4,3,0,-3,-4,3,2,0,-2,-3,2,1,0,-1,-2};      maskY=new double[]{2,3,4,3,2,1,2,3,2,1,0,0,0,0,0,-1,-2,-3,-2,-1,-2,-3,-4,-3,-2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static Object parseConst(int tag,ByteBuffer buf,ConstantPool constPool){  int constIndex=buf.getShort() & 0xFFFF;switch (tag) {case 'B':    return Byte.valueOf((byte)constPool.getIntAt(constIndex));case 'C':  return Character.valueOf((char)constPool.getIntAt(constIndex));case 'D':return Double.valueOf(constPool.getDoubleAt(constIndex));case 'F':return Float.valueOf(constPool.getFloatAt(constIndex));case 'I':return Integer.valueOf(constPool.getIntAt(constIndex));case 'J':return Long.valueOf(constPool.getLongAt(constIndex));case 'S':return Short.valueOf((short)constPool.getIntAt(constIndex));case 'Z':return Boolean.valueOf(constPool.getIntAt(constIndex) != 0);case 's':return constPool.getUTF8At(constIndex);default :throw new AnnotationFormatError("Invalid member-value tag in annotation: " + tag);}}  }
class C{  public synchronized void addRow(Object[] row){  addRow((Object)row);}  }
class C{  private boolean save(){  int index=getSelectedIndex();  if (index == -1)   return false;  log.config("DocAction=" + s_value[index]);  m_mTab.setValue("DocAction",s_value[index]);  return true;}  }
class C{  public static Funnel<Integer> integerFunnel(){  return IntegerFunnel.INSTANCE;}  }
class C{  public Rubberband(Point anchor){  if (anchor == null) {    throw new NullPointerException("Anchor point must not be null.");  }  this.anchor=anchor;  int width=1;  int cap=BasicStroke.CAP_ROUND;  int join=BasicStroke.JOIN_BEVEL;  int miterlimit=0;  float[] dash=new float[]{2,2,4,2};  float dashphase=0.0f;  stroke=new BasicStroke(width,cap,join,miterlimit,dash,dashphase);  setLocation(anchor);  setSize(0,0);}  }
class C{  private Segment valueSegment(Attribute attribute,String oldValue){  final Element owner=attribute.getElement();  final byte[] name=attribute.getName().getBytes();  final byte[] value=oldValue.getBytes();  final int attrLeft=indexOfAttributeName(xml,name,owner.start.left + owner.getName().length());  final int valueLeft=indexOf(xml,value,attrLeft + name.length);  return new Segment(valueLeft,valueLeft + value.length - 1);}  }
class C{  public RangeQueryBuilder from(long from){  this.from=from;  return this;}  }
class C{  protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {  byte a, b, c;  if (len == 1) {    a=data[offset];    b=0;    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write('=');    outStream.write('=');  } else   if (len == 2) {    a=data[offset];    b=data[offset + 1];    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write('=');  } else {    a=data[offset];    b=data[offset + 1];    c=data[offset + 2];    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write(pem_array[c & 0x3F]);  }}  }
class C{  public void sortPods(){  Collections.sort(pods);}  }
class C{  public Domain(){  settings=new Settings();  models=new LinkedList<Model>();  initState=new DialogueState();  parameters=new BNetwork();  importedFiles=new ArrayList<File>();}  }
class C{  private void replaceArmour(final ItemStack stack,final EntityLivingBase entity){  final NBTTagCompound stackTagCompound=ItemStackUtils.getOrCreateTagCompound(stack);  final NBTTagList replacedArmour=new NBTTagList();  final Set<ItemStack> replacements=new HashSet<>(replacementItems);  Constants.ARMOUR_SLOTS.stream().filter(null).forEach(null);  stackTagCompound.setTag(KEY_REPLACED_ARMOUR,replacedArmour);}  }
class C{  public void closeForWrites(){  throw new UnsupportedOperationException();}  }
class C{  public FullSyncRequestMessage(FullSyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public K expire(long expire){  this.expire=expire;  return self();}  }
class C{  private void locationUpdated(Intent intent){  Log.v(TAG,ACTION_LOCATION_UPDATED);  Location location=intent.getParcelableExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED);  if (location != null) {    LatLng latLngLocation=new LatLng(location.getLatitude(),location.getLongitude());    Utils.storeLocation(this,latLngLocation);    LocalBroadcastManager.getInstance(this).sendBroadcast(intent);  }}  }
class C{  public int lengthUnknownElement(){  int result=0;  Node n=this.constructionElement.getFirstChild();  while (n != null) {    if ((n.getNodeType() == Node.ELEMENT_NODE) && !n.getNamespaceURI().equals(Constants.SignatureSpecNS)) {      result++;    }    n=n.getNextSibling();  }  return result;}  }
class C{  public static int showYesNoQuestion(final Component parent,final String msg){  return showYesNoQuestionWithCheckbox(parent,msg,null).first();}  }
class C{  public void removeAnnotation(int index){  mAnnotations.remove(index);  mStringXY.removeByIndex(index);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  boolean continueInput=true;  do {    System.out.print("Enter annual interest rate, for example, 8.25: ");    double annualInterestRate=input.nextDouble();    System.out.print("Enter number of years as an integer: ");    int numberOfYeras=input.nextInt();    System.out.print("Enter loan amount, for example, 120000.95: ");    double loanAmount=input.nextDouble();    try {      Loan loan=new Loan(annualInterestRate,numberOfYeras,loanAmount);      continueInput=false;      System.out.printf("The loan was created on %s\n" + "The monthly payment is %.2f\nTne total payment is %.2f\n",loan.getLoanDate().toString(),loan.getMonthlyPayment(),loan.getTotalPayment());    } catch (    IllegalArgumentException ex) {      System.out.println(ex.getMessage());    }  } while (continueInput);}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public String toStringKey(){  String result;  int i;  result="<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n" + "   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    result+="   <tr>" + "<td><b>(" + (i + 1) + ")</b></td>"+ "<td>"+ removeFilterName(m_ColNames[i])+ "</td>"+ "</tr>\n";  }  result+="</table>\n";  return result;}  }
class C{  static public String generateOTPFromText(byte[] secret,byte[] text,int codeDigits,boolean addChecksum,int truncationOffset) throws InvalidKeyException, NoSuchAlgorithmException {  String result=null;  final int digits=addChecksum ? (codeDigits + 1) : codeDigits;  final byte[] hash=hmac_sha1(secret,text);  int offset=hash[hash.length - 1] & 0xf;  if ((0 <= truncationOffset) && (truncationOffset < (hash.length - 4))) {    offset=truncationOffset;  }  final int binary=((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8)| (hash[offset + 3] & 0xff);  int otp=binary % DIGITS_POWER[codeDigits];  if (addChecksum) {    otp=(otp * 10) + calcChecksum(otp,codeDigits);  }  result=Integer.toString(otp);  while (result.length() < digits) {    result="0" + result;  }  return result;}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:24.384 -0400",hash_original_method="543A4E4207D46955001B65E3AC416795",hash_generated_method="2EE7E03CBF0E974160BD192726514A54") public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  public FitzhughNagumoRulePanel(){  super();  this.add(tabbedPane);  tfA=createTextField(null,null);  tfB=createTextField(null,null);  tfC=createTextField(null,null);  tfIbg=createTextField(null,null);  tfThreshold=createTextField(null,null);  mainTab.addItem("A (Recovery Rate): ",tfA);  mainTab.addItem("B (Rec. Voltage Dependence): ",tfB);  mainTab.addItem("C (Rec. Self Dependence): ",tfC);  mainTab.addItem("Background Current (nA)",tfIbg);  mainTab.addItem("Spike threshold",tfThreshold);  mainTab.addItem("Add noise: ",getAddNoise());  tabbedPane.add(mainTab,"Properties");  tabbedPane.add(this.getNoisePanel(),"Noise");}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    DataFilter interpolator=new MeanInterpolator();    DataSet newDataSet=interpolator.filter(dataSet);    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  private Object updateInner(String uuid,SimpleObject simpleObject) throws ResponseException {  Patient patient=patientService.getPatientByUuid(uuid);  if (patient == null) {    throw new ObjectNotFoundException();  }  applyEdits(patient,simpleObject);  return patientToJson(patient);}  }
class C{  public double dotProduct(final Vector v){  return this.x * v.x + this.y * v.y + this.z * v.z;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public static String resolveBodyByLanguage(String language,BodyOwner owner){  try {    return owner.getBodies().get(owner.getLanguages().indexOf(language)).trim();  } catch (  Exception e) {    return null;  }}  }
class C{  public void print(boolean isSource,PrintWriter out){  int[] sa=isSource ? this.srcSuffixArray : this.tgtSuffixArray;  int[] bitext=isSource ? this.srcBitext : this.tgtBitext;  for (int i=0; i < sa.length; ++i) {    StringBuilder sb=new StringBuilder();    sb.append(i).append(": ");    for (int corpusPos=sa[i]; bitext[corpusPos] >= 0; ++corpusPos) {      if (corpusPos != sa[i])       sb.append(" ");      sb.append(vocabulary.get(bitext[corpusPos]));    }    out.println(sb.toString());  }  out.flush();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double flowDir;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputHeader=args[0];    outputHeader=args[1];    outputType=args[2].toLowerCase();    logTransform=Boolean.parseBoolean(args[3]);    if ((inputHeader == null) || (outputHeader == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    pointer=new WhiteboxRaster(inputHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            currentDepth=0;            somethingDone=true;            DinfAccum(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=pointer.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static List<BatchResponse> postBatchRequestsWithoutEnclosingTransaction(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final String jsonifiedBatchRequests){  final String response=Utils.performServerPost(requestSpec,responseSpec,BATCH_API_URL,jsonifiedBatchRequests,null);  return BatchHelper.fromJsonString(response);}  }
class C{  @Override public void dispatch(){  Result<InputStreamClient> result=_result;  if (result != null) {    result.ok(_is);  }}  }
class C{  public static String replace(String original,String oldSubstring,String newSubstring,boolean all){  StringBuffer b=new StringBuffer(original);  replace(b,oldSubstring,newSubstring,all);  return b.toString();}  }
class C{  ArrayCell(HeapVariable<?> key){  this.key=key;}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public static byte[] decodeBase64(final String base64String){  return new Base64().decode(base64String);}  }
class C{  private Number toNumber(Class sourceType,Class targetType,String value){  if (targetType.equals(Byte.class)) {    return new Byte(value);  }  if (targetType.equals(Short.class)) {    return new Short(value);  }  if (targetType.equals(Integer.class)) {    return new Integer(value);  }  if (targetType.equals(Long.class)) {    return new Long(value);  }  if (targetType.equals(Float.class)) {    return new Float(value);  }  if (targetType.equals(Double.class)) {    return new Double(value);  }  if (targetType.equals(BigDecimal.class)) {    return new BigDecimal(value);  }  if (targetType.equals(BigInteger.class)) {    return new BigInteger(value);  }  String msg=toString(getClass()) + " cannot handle conversion from '" + toString(sourceType)+ "' to '"+ toString(targetType)+ "'";  throw new ConversionException(msg);}  }
class C{  public DecisionTree(int maxDepth,int minSamples,PruningMethod pruningMethod,double testProportion){  setMaxDepth(maxDepth);  setMinSamples(minSamples);  setPruningMethod(pruningMethod);  setTestProportion(testProportion);}  }
class C{  public int size(){  return internalMap.size();}  }
class C{  public Builder style(int style){  this.style=style;  return this;}  }
class C{  synchronized void resumeThread(){  assert !exiting;  Trace.trace(Item.SCHED_DETAIL,"%s: resumeThread",getName());  isCurrent=true;  setQueue(null);  model.setCurrent(this);  notify();}  }
class C{  public TransitionList(final List<Transition> transitions){  this.transitions=transitions;}  }
class C{  public void stopSpinning(){  isSpinning=false;  progress=0;  postInvalidate();}  }
class C{  private void version(Contact field,Annotation type) throws Exception {  Label label=support.getLabel(field,type);  if (version != null) {    throw new AttributeException("Multiple version annotations in %s",type);  }  version=label;}  }
class C{  public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int c1=r.read();    char c=(char)c1;    boolean is32BitChar=Character.isHighSurrogate(c);    int c2=is32BitChar ? r.read() : -1;    String s=is32BitChar ? new StringBuffer().append(c).append((char)c2).toString() : null;    if (!is32BitChar && c1 >= 0x80 && c1 <= 0x9F)     c1=theWinMap[c1 - 0x80];    if (!is32BitChar && c1 == '\r') {      c1=r.read();      if (c1 != '\n') {        unread(r,c1);        c1='\n';      }    }    if (!is32BitChar && c1 == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!!is32BitChar && !(c1 >= 0x20 || c1 == '\n' || c1 == '\t' || c1 == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (!is32BitChar && statetable[i + 1] == c1) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(c1) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;if (s != null) save(s,c1,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(s,c1,h);break;case A_ENTITY:mark();if (theState == S_ENT && c == '#') {theNextState=S_NCR;save(s,c1,h);break;} else if (theState == S_NCR && (c == 'x' || c == 'X')) {theNextState=S_XNCR;save(s,c1,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(c)) {save(s,c1,h);break;} else if (theState == S_NCR && Character.isDigit(c)) {save(s,c1,h);break;} else if (theState == S_XNCR && (Character.isDigit(c) || "abcdefABCDEF".indexOf(c) != -1)) {save(s,c1,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (is32BitChar || c1 != ';') {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}} else {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(s,c1,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(s,c1,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(s,c1,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,c1);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  public Object realExecute() throws ExecutionException {  Vector<SemanticNode> assumes=new Vector<SemanticNode>();  SemanticNode goal=null;  LevelNode goalStep=null;  String nullReason="[This string should never be displayed]";  Vector<SemanticNode> contextAssumptions=new Vector<SemanticNode>();  Vector<LevelNode> contextSteps=new Vector<LevelNode>();  Vector<String> contextSources=new Vector<String>();  if (this.windowShell != null) {    if (!this.windowShell.isDisposed()) {      System.out.println("Command called when being executed.");      return null;    }  }  if (existDirtyModules()) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","There is an unsaved module.");    return null;  }  Spec spec=Activator.getSpecManager().getSpecLoaded();  if (spec == null || spec.getStatus() != IParseConstants.PARSED) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The spec status must be \"parsed\" to execute this command.");    return null;  }  if (editor == null) {    Activator.getDefault().logDebug("2nd call of getTLAEditorWithFocus returned null");    return null;  }  editorIFile=((FileEditorInput)editor.getEditorInput()).getFile();  if (editor.isDirty()) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The module is dirty; this should not happen.");    return null;  }  this.state=new DecompositionState();  state.hasChanged=false;  state.goalDefinitions=new StringSet();  state.assumpDefinitions=new HashSet<String>();  Location selectedLocation=EditorUtil.getLocationAt(doc,offset,selection.getLength());  TheoremNode[] allTheorems=moduleNode.getTheorems();  theorem=null;  int i=0;  String moduleFile=moduleNode.stn.getFilename();  while ((theorem == null) & (i < allTheorems.length)) {    if (allTheorems[i].stn.getFilename().equals(moduleFile) && EditorUtil.lineLocationContainment(selectedLocation,allTheorems[i].stn.getLocation())) {      theorem=allTheorems[i];    }    i++;  }  if (theorem == null) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The cursor is not in a theorem.");    return null;  }  goal=theorem.getTheorem();  if (goal instanceof AssumeProveNode) {    goal=((AssumeProveNode)goal).getProve();  }  goalStep=theorem;  this.declaredIdentifiers=ResourceHelper.declaredSymbolsInScopeSet(this.moduleNode,theorem.stn.getLocation());  step=theorem;  boolean notDone=true;  proofLevel=-1;  proof=step.getProof();  while (notDone && (proof != null) && (proof instanceof NonLeafProofNode)) {    LevelNode[] pfsteps=((NonLeafProofNode)proof).getSteps();    LevelNode foundLevelNode=null;    i=0;    proofLevel=-1;    while ((foundLevelNode == null) && (i < pfsteps.length)) {      if ((proofLevel == -1) && !(pfsteps[i] instanceof DefStepNode) && !(pfsteps[i] instanceof InstanceNode)) {        proofLevel=stepLevel(pfsteps[i]);      }      String currStepName=null;      if (pfsteps[i] instanceof TheoremNode) {        currStepName=getStepName((TheoremNode)pfsteps[i]);      }      if (EditorUtil.lineLocationContainment(selectedLocation,pfsteps[i].stn.getLocation())) {        foundLevelNode=pfsteps[i];        if (pfsteps[i] instanceof TheoremNode) {          TheoremNode thmNode=(TheoremNode)pfsteps[i];          ProofNode pfNode=thmNode.getProof();          boolean isChosenStep=(pfNode == null) || (pfNode instanceof LeafProofNode);          if (!thmNode.isSuffices()) {            if (thmNode.getTheorem() instanceof AssumeProveNode) {              SemanticNode[] assumptions=((AssumeProveNode)thmNode.getTheorem()).getAssumes();              for (int j=0; j < assumptions.length; j++) {                if (assumptions[j] instanceof NewSymbNode) {                  declaredIdentifiers.add(((NewSymbNode)assumptions[j]).getOpDeclNode().getName().toString());                } else {                  if (!(assumptions[j] instanceof AssumeProveNode)) {                    if (isChosenStep) {                      assumes.addElement(assumptions[j]);                    } else {                      contextAssumptions.addElement(assumptions[j]);                      contextSteps.addElement(thmNode);                      contextSources.addElement(currStepName);                    }                  }                }              }              goal=((AssumeProveNode)thmNode.getTheorem()).getProve();              goalStep=thmNode;            } else {              SemanticNode newGoalSemNode=thmNode.getTheorem();              if (newGoalSemNode instanceof OpApplNode) {                OpApplNode newGoal=(OpApplNode)newGoalSemNode;                UniqueString goalOpName=newGoal.getOperator().getName();                if (goalOpName == ASTConstants.OP_pfcase) {                  if (isChosenStep) {                    assumes.addElement(newGoal.getArgs()[0]);                  } else {                    contextAssumptions.addElement(newGoal.getArgs()[0]);                    contextSteps.addElement(thmNode);                    contextSources.addElement(currStepName);                  }                } else                 if (goalOpName == ASTConstants.OP_pick) {                  goal=null;                  nullReason="PICK";                } else                 if (goalOpName == ASTConstants.OP_have) {                  goal=null;                  nullReason="HAVE";                } else                 if (goalOpName == ASTConstants.OP_take) {                  goal=null;                  nullReason="TAKE";                } else                 if (goalOpName == null) {                  goal=null;                  nullReason="weird";                } else                 if (goalOpName == ASTConstants.OP_qed) {                } else {                  goal=newGoal;                  goalStep=thmNode;                }              } else {                goal=null;                nullReason="weird";              }            }          } else {            goal=null;            nullReason="SUFFICES";          }        } else {          goal=null;          nullReason="weird";        }      } else {        if (pfsteps[i] instanceof TheoremNode) {          TheoremNode node=(TheoremNode)pfsteps[i];          if (node.isSuffices()) {            if (node.getTheorem() instanceof AssumeProveNode) {              goal=((AssumeProveNode)node.getTheorem()).getProve();              goalStep=node;              SemanticNode[] assumptions=((AssumeProveNode)node.getTheorem()).getAssumes();              for (int j=0; j < assumptions.length; j++) {                if (assumptions[j] instanceof NewSymbNode) {                  declaredIdentifiers.add(((NewSymbNode)assumptions[j]).getOpDeclNode().getName().toString());                } else {                  if (!(assumptions[j] instanceof AssumeProveNode)) {                    contextAssumptions.addElement(assumptions[j]);                    contextSteps.addElement(node);                    contextSources.addElement(currStepName);                  }                }              }            } else {              goal=(SemanticNode)node.getTheorem();              goalStep=node;              if (!(goal instanceof OpApplNode)) {                goal=null;                nullReason="weird";              }            }          } else           if (node.getTheorem() instanceof OpApplNode) {            OpApplNode oanode=(OpApplNode)node.getTheorem();            String operatorName=oanode.getOperator().getName().toString();            if (operatorName.equals("$Pick") || operatorName.equals("$Witness") || operatorName.equals("$Take")) {              FormalParamNode[] fp=oanode.getUnbdedQuantSymbols();              if (operatorName.equals("$Pick")) {                contextAssumptions.addElement(oanode.getArgs()[0]);                contextSteps.addElement(node);                contextSources.addElement(currStepName);              }              if (!operatorName.equals("$Witness")) {                if (fp != null) {                  for (int j=0; j < fp.length; j++) {                    declaredIdentifiers.add(fp[j].getName().toString());                  }                } else {                  FormalParamNode[][] fpn=oanode.getBdedQuantSymbolLists();                  for (int j=0; j < fpn.length; j++) {                    for (int k=0; k < fpn[j].length; k++) {                      declaredIdentifiers.add(fpn[j][k].getName().toString());                    }                  }                }                if (operatorName.equals("$Take")) {                  goal=null;                  nullReason="TAKE";                }              } else {                goal=null;                nullReason="WITNESS";              }            } else             if (operatorName.equals("$Have")) {              goal=null;              nullReason="HAVE";              contextAssumptions.addElement(oanode.getArgs()[0]);              contextSteps.addElement(node);              contextSources.addElement(currStepName);            } else             if (!operatorName.equals("$Pfcase")) {              contextAssumptions.addElement(oanode);              contextSteps.addElement(node);              contextSources.addElement(currStepName);            }          }        }        if (pfsteps[i] instanceof DefStepNode) {          OpDefNode[] defs=((DefStepNode)pfsteps[i]).getDefs();          for (int j=0; j < defs.length; j++) {            declaredIdentifiers.add(defs[j].getName().toString());          }        }        if (pfsteps[i] instanceof InstanceNode) {          ResourceHelper.addDeclaredSymbolsInScopeSet(declaredIdentifiers,((InstanceNode)pfsteps[i]).getModule(),ResourceHelper.infiniteLoc);        }      }      i++;    }    if (foundLevelNode == null) {      notDone=false;    } else     if (!(foundLevelNode instanceof TheoremNode)) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The cursor is in a non-provable step.");      return null;    } else {      step=(TheoremNode)foundLevelNode;      proof=step.getProof();    }  }  if ((proof != null) && !(proof instanceof LeafProofNode)) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","You have selected a step that already has a non-leaf proof.");    return null;  }  if (step == theorem) {    if (step.getTheorem() instanceof AssumeProveNode) {      SemanticNode[] assumptions=((AssumeProveNode)step.getTheorem()).getAssumes();      for (int j=0; j < assumptions.length; j++) {        if (assumptions[j] instanceof NewSymbNode) {          declaredIdentifiers.add(((NewSymbNode)assumptions[j]).getOpDeclNode().getName().toString());          assumes.addElement(assumptions[j]);        } else {          if (!(assumptions[j] instanceof AssumeProveNode)) {            assumes.addElement(assumptions[j]);          }        }      }      goal=((AssumeProveNode)step.getTheorem()).getProve();      goalStep=step;    } else {      SemanticNode newGoalSemNode=step.getTheorem();      if (newGoalSemNode instanceof OpApplNode) {        OpApplNode newGoal=(OpApplNode)newGoalSemNode;        UniqueString goalOpName=newGoal.getOperator().getName();        if (goalOpName == ASTConstants.OP_pfcase) {          goal=newGoal.getArgs()[0];        } else         if (goalOpName == ASTConstants.OP_pick) {          goal=null;          nullReason="PICK";        } else         if (goalOpName == null) {          goal=null;          nullReason="weird";        } else         if (goalOpName == ASTConstants.OP_qed) {        } else {          goal=newGoal;          goalStep=step;        }      } else {        goal=null;        nullReason="weird";      }    }  } else {    if (theorem.getTheorem() instanceof AssumeProveNode) {      SemanticNode[] thmAssumps=((AssumeProveNode)theorem.getTheorem()).getAssumes();      int k=0;      for (int j=0; j < thmAssumps.length; j++) {        if (thmAssumps[j] instanceof NewSymbNode) {          declaredIdentifiers.add(((NewSymbNode)thmAssumps[j]).getOpDeclNode().getName().toString());        } else {          contextAssumptions.insertElementAt(thmAssumps[j],k);          contextSteps.insertElementAt(theorem.getTheorem(),k);          contextSources.insertElementAt(null,k);          k++;        }      }    }  }  if (goal == null) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot decompose because goal is from a " + nullReason + " step.");    return null;  }  int level=this.proofLevel;  if (level < 0) {    level=0;  }  proofLevelString="<" + (level + 1) + ">";  SyntaxTreeNode nd=(SyntaxTreeNode)step.stn;  if (step == theorem) {    stepNumber=null;  } else {    stepNumber=nd.getHeirs()[0].image.toString();    if (stepNumber.indexOf('>') == stepNumber.length() - 1) {      stepNumber=null;    } else {      i=stepNumber.indexOf('>') + 1;      while ((i < stepNumber.length() && (Character.isLetterOrDigit(stepNumber.charAt(i)) || (stepNumber.charAt(i) == '_')))) {        i++;      }      if (i < stepNumber.length()) {        stepNumber=stepNumber.substring(0,i);      }    }  }  stepColumn=nd.getLocation().beginColumn();  try {    stepRep=new NodeRepresentation(doc,step);  } catch (  BadLocationException e) {    e.printStackTrace();    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1479 of NewDecomposeProofHandler.");    return null;  }  state.assumeReps=new Vector<NodeRepresentation>();  for (i=0; i < contextAssumptions.size(); i++) {    NodeRepresentation contextStepRep=null;    try {      contextStepRep=new NodeRepresentation(doc,contextSteps.elementAt(i));    } catch (    BadLocationException e) {      e.printStackTrace();      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1544 of NewDecomposeProofHandler.");      return null;    }    NodeRepresentation nodeRep=contextStepRep.subNodeRep(contextAssumptions.elementAt(i),state.assumeReps,null,null,null,true);    nodeRep.contextStepName=contextSources.elementAt(i);    if ((nodeRep.decomposition != null) && (nodeRep.nodeSubtype != NodeRepresentation.IMPLIES_TYPE) && (nodeRep.nodeSubtype != NodeRepresentation.FORALL_TYPE)) {      nodeRep.initialPosition=state.assumeReps.size();      state.assumeReps.addElement(nodeRep);      state.numberOfContextAssumptions++;    }  }  hasAssumes=false;  if (assumes.size() > 0) {    hasAssumes=true;  }  for (i=0; i < assumes.size(); i++) {    NodeRepresentation nodeRep=stepRep.subNodeRep(assumes.elementAt(i),state.assumeReps,null,null,null,true);    nodeRep.contextStepName=this.stepNumber;    nodeRep.initialPosition=state.assumeReps.size();    state.assumeReps.addElement(nodeRep);  }  state.firstAddedAssumption=state.assumeReps.size();  NodeRepresentation goalStepRep=null;  try {    goalStepRep=new NodeRepresentation(doc,goalStep);  } catch (  BadLocationException e) {    e.printStackTrace();    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1583 of NewDecomposeProofHandler.");    return null;  }  state.goalRep=goalStepRep.subNodeRep(goal,null,null,null,null,false);  state.goalRep.initialPosition=Integer.MAX_VALUE - 42;  state.goalRep.fromGoal=true;  editorIFile.setReadOnly(true);  raiseWindow();  return null;}  }
class C{  private void checkRequiredFields(SimpleObject simpleObject,String[] requiredFields){  List<String> missingFields=new ArrayList<>();  for (  String requiredField : requiredFields) {    if (!simpleObject.containsKey(requiredField)) {      missingFields.add(requiredField);    }  }  if (!missingFields.isEmpty()) {    throw new InvalidObjectDataException("JSON object lacks required fields: " + StringUtils.join(missingFields,","));  }}  }
class C{  public Select.SelectForExample SELECT(){  return TestLogyyyymm.SELECT().selectForExample(this.example);}  }
class C{  public Element writeToXML(Element parent,Object o,String name) throws Exception {  String classname;  Element node;  Hashtable<String,PropertyDescriptor> memberlist;  Enumeration<String> enm;  Object member;  String memberName;  Method method;  PropertyDescriptor desc;  boolean primitive;  int array;  int i;  Object obj;  String tmpStr;  node=null;  if (DEBUG) {    trace(new Throwable(),name);  }  if (o == null) {    node=addElement(parent,name,"" + null,false,0,true);    return node;  }  obj=null;  array=0;  if (o.getClass().isArray()) {    array=Utils.getArrayDimensions(o);  }  if (array > 0) {    classname=Utils.getArrayClass(o.getClass()).getName();    primitive=isPrimitiveArray(o.getClass());  } else {    desc=null;    if (parent != null) {      desc=determineDescriptor(parent.getAttribute(ATT_CLASS),name);    }    if (desc != null) {      primitive=desc.getPropertyType().isPrimitive();    } else {      primitive=o.getClass().isPrimitive();    }    if (primitive) {      classname=desc.getPropertyType().getName();    } else {      obj=o;      classname=o.getClass().getName();    }  }  if ((parent != null) && (!parent.getAttribute(ATT_ARRAY).equals("")) && (!parent.getAttribute(ATT_ARRAY).equals(VAL_NO))&& (stringToBoolean(parent.getAttribute(ATT_PRIMITIVE)))) {    primitive=true;    classname=parent.getAttribute(ATT_CLASS);    obj=null;  }  if (obj != null) {    classname=overrideClassname(obj);  } else {    classname=overrideClassname(classname);  }  node=addElement(parent,name,classname,primitive,array);  if (array > 0) {    for (i=0; i < Array.getLength(o); i++) {      invokeWriteToXML(node,Array.get(o,i),Integer.toString(i));    }  } else {    if (primitive) {      node.appendChild(node.getOwnerDocument().createTextNode(o.toString()));    } else {      memberlist=getDescriptors(o);      if (memberlist.size() == 0) {        if (!o.toString().equals("")) {          tmpStr=o.toString();          tmpStr=tmpStr.replaceAll("&","&amp;").replaceAll("\"","&quot;").replaceAll("'","&apos;").replaceAll("<","&lt;").replaceAll(">","&gt;");          tmpStr=tmpStr.replaceAll("\n","&#10;").replaceAll("\r","&#13;").replaceAll("\t","&#9;");          if (o instanceof java.io.File) {            tmpStr=tmpStr.replace('\\','/');          }          node.appendChild(node.getOwnerDocument().createTextNode(tmpStr));        }      } else {        enm=memberlist.keys();        while (enm.hasMoreElements()) {          memberName=enm.nextElement().toString();          if ((m_Properties.isIgnored(memberName)) || (m_Properties.isIgnored(getPath(node) + "." + memberName)) || (m_Properties.isIgnored(o,getPath(node) + "." + memberName))) {            continue;          }          if (!m_Properties.isAllowed(o,memberName)) {            continue;          }          desc=memberlist.get(memberName);          method=desc.getReadMethod();          member=method.invoke(o,(Object[])null);          invokeWriteToXML(node,member,memberName);        }      }    }  }  return node;}  }
class C{  @Override public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot){  if (useManualBV) {    return manualBV;  }  bvText=new StringBuffer("<HTML><BODY><CENTER><b>Battle Value Calculations For ");  bvText.append(getChassis());  bvText.append(" ");  bvText.append(getModel());  bvText.append("</b></CENTER>");  bvText.append(nl);  bvText.append("<b>Defensive Battle Rating Calculation:</b>");  bvText.append(nl);  bvText.append(startTable);  double dbv=0;  double obv=0;  dbv+=getTotalArmor() * 2.5;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total Armor (" + getTotalArmor() + ") x 2.5");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(getTotalArmor() * 2.5);  bvText.append(endColumn);  bvText.append(endRow);  dbv+=getTotalInternal() * 1.5;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total I.S. Points (" + getTotalInternal() + ") x 1.5");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(getTotalInternal() * 1.5);  bvText.append(endColumn);  bvText.append(endRow);  double dEquipmentBV=0;  double amsBV=0;  double amsAmmoBV=0;  for (  Mounted mounted : getAmmo()) {    AmmoType atype=(AmmoType)mounted.getType();    if (atype.getAmmoType() == AmmoType.T_AMS) {      amsAmmoBV+=atype.getBV(this);    }  }  for (  Mounted mounted : getEquipment()) {    EquipmentType etype=mounted.getType();    if (mounted.isDestroyed()) {      continue;    }    if (((etype instanceof WeaponType) && etype.hasFlag(WeaponType.F_AMS)) || ((etype instanceof MiscType) && (etype.hasFlag(MiscType.F_ECM) || etype.hasFlag(MiscType.F_VIRAL_JAMMER_DECOY) || etype.hasFlag(MiscType.F_VIRAL_JAMMER_HOMING)|| etype.hasFlag(MiscType.F_BAP)))) {      dEquipmentBV+=etype.getBV(this);    }    if (etype instanceof WeaponType) {      WeaponType wtype=(WeaponType)etype;      if (wtype.hasFlag(WeaponType.F_AMS) && (wtype.getAmmoType() == AmmoType.T_AMS)) {        amsBV+=etype.getBV(this);      }    }  }  if (amsAmmoBV > 0) {    dEquipmentBV+=Math.min(amsBV,amsAmmoBV);  }  dbv+=dEquipmentBV;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total Equipment BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(dEquipmentBV);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(dbv);  bvText.append(endColumn);  double tmmRan=Compute.getTargetMovementModifier(getRunMP(false,true,true),false,false,game).getValue();  final int jumpMP=getJumpMP(false);  final int tmmJumped=(jumpMP > 0) ? Compute.getTargetMovementModifier(jumpMP,true,false,game).getValue() : 0;  final int umuMP=getActiveUMUCount();  final int tmmUMU=(umuMP > 0) ? Compute.getTargetMovementModifier(umuMP,false,false,game).getValue() : 0;  double tmmFactor=1 + (Math.max(tmmRan,Math.max(tmmJumped,tmmUMU)) / 10.0) + 0.1;  tmmFactor=Math.round(tmmFactor * 1000) / 1000.0;  dbv*=tmmFactor;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Target Movement Modifer For Run");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(tmmRan);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Target Movement Modifer For Jumping");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(tmmJumped);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Target Movement Modifer For UMUs");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(tmmUMU);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Multiply by Defensive Movement Factor of ");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(tmmFactor);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(" x ");  bvText.append(tmmFactor);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Defensive Battle Value");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("= ");  bvText.append(dbv);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("<b>Offensive Battle Rating Calculation:</b>");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  double weaponBV=0;  boolean hasTargComp=hasTargComp();  Map<String,Double> weaponsForExcessiveAmmo=new HashMap<String,Double>();  for (  Mounted mounted : getWeaponList()) {    WeaponType wtype=(WeaponType)mounted.getType();    double dBV=wtype.getBV(this);    String name=wtype.getName();    if (mounted.isDestroyed()) {      continue;    }    if (wtype.hasFlag(WeaponType.F_AMS)) {      continue;    }    if (mounted.getLinkedBy() != null) {      Mounted mLinker=mounted.getLinkedBy();      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS)) {        dBV*=1.2;        name=name.concat(" with Artemis IV");      }      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS_V)) {        dBV*=1.3;        name=name.concat(" with Artemis V");      }      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_APOLLO)) {        dBV*=1.15;        name=name.concat(" with Apollo");      }      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_RISC_LASER_PULSE_MODULE)) {        dBV*=1.25;      }    }    if (wtype.hasFlag(WeaponType.F_DIRECT_FIRE) && hasTargComp) {      dBV*=1.25;      name=name.concat(" with Targeting Computer");    }    weaponBV+=dBV;    bvText.append(startRow);    bvText.append(startColumn);    bvText.append(name);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(dBV);    bvText.append(endColumn);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(endRow);    if (!(wtype.hasFlag(WeaponType.F_ENERGY) || wtype.hasFlag(WeaponType.F_ONESHOT) || wtype.hasFlag(WeaponType.F_INFANTRY)|| (wtype.getAmmoType() == AmmoType.T_NA))) {      String key=wtype.getAmmoType() + ":" + wtype.getRackSize();      if (!weaponsForExcessiveAmmo.containsKey(key)) {        weaponsForExcessiveAmmo.put(key,wtype.getBV(this));      } else {        weaponsForExcessiveAmmo.put(key,wtype.getBV(this) + weaponsForExcessiveAmmo.get(key));      }    }  }  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total Weapons BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(weaponBV);  bvText.append(endColumn);  bvText.append(endRow);  double ammoBV=0;  double tagBV=0;  Map<String,Double> ammo=new HashMap<String,Double>();  ArrayList<String> keys=new ArrayList<String>();  for (  Mounted mounted : getAmmo()) {    AmmoType atype=(AmmoType)mounted.getType();    if (mounted.getUsableShotsLeft() == 0) {      continue;    }    if (atype.getAmmoType() == AmmoType.T_AMS) {      continue;    }    if (mounted.getLocation() == Entity.LOC_NONE) {      continue;    }    if ((atype.getMunitionType() == AmmoType.M_SEMIGUIDED) || (atype.getMunitionType() == AmmoType.M_HOMING)) {      IPlayer tmpP=getOwner();      if (tmpP.hasTAG()) {        tagBV+=atype.getBV(this);      } else       if ((tmpP.getTeam() != IPlayer.TEAM_NONE) && (game != null)) {        for (Enumeration<Team> e=game.getTeams(); e.hasMoreElements(); ) {          Team m=e.nextElement();          if (m.getId() == tmpP.getTeam()) {            if (m.hasTAG(game)) {              tagBV+=atype.getBV(this);            }            break;          }        }      }    }    String key=atype.getAmmoType() + ":" + atype.getRackSize();    if (!keys.contains(key)) {      keys.add(key);    }    if (!ammo.containsKey(key)) {      ammo.put(key,atype.getProtoBV(mounted.getUsableShotsLeft()));    } else {      ammo.put(key,atype.getProtoBV(mounted.getUsableShotsLeft()) + ammo.get(key));    }  }  for (  String key : keys) {    if (weaponsForExcessiveAmmo.containsKey(key) && (ammo.get(key) > weaponsForExcessiveAmmo.get(key))) {      ammoBV+=weaponsForExcessiveAmmo.get(key);    } else {      ammoBV+=ammo.get(key);    }  }  weaponBV+=ammoBV;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total Ammo BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(ammoBV);  bvText.append(endColumn);  bvText.append(endRow);  double oEquipmentBV=0;  boolean hasMiscEq=false;  for (  Mounted mounted : getMisc()) {    MiscType mtype=(MiscType)mounted.getType();    if (mounted.isDestroyed()) {      continue;    }    if (mtype.hasFlag(MiscType.F_ECM) || mtype.hasFlag(MiscType.F_AP_POD) || mtype.hasFlag(MiscType.F_VIRAL_JAMMER_DECOY)|| mtype.hasFlag(MiscType.F_VIRAL_JAMMER_HOMING)|| mtype.hasFlag(MiscType.F_BAP)|| mtype.hasFlag(MiscType.F_TARGCOMP)) {      continue;    }    oEquipmentBV+=mtype.getBV(this);    bvText.append(startRow);    bvText.append(startColumn);    bvText.append(mtype.getName());    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(mtype.getBV(this));    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(endColumn);    bvText.append(endRow);    hasMiscEq=true;  }  weaponBV+=oEquipmentBV;  if (hasMiscEq) {    bvText.append(startRow);    bvText.append(startColumn);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append("-------------");    bvText.append(endColumn);    bvText.append(endRow);  }  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Total Equipment BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(oEquipmentBV);  bvText.append(endColumn);  bvText.append(endRow);  double speedFactor=Math.pow(1 + ((((double)getRunMP(false,true,true) + (Math.round(Math.max(jumpMP,umuMP) / 2.0))) - 5) / 10),1.2);  speedFactor=Math.round(speedFactor * 100) / 100.0;  obv=weaponBV * speedFactor;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(weaponBV);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Multiply by Speed Factor of ");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(speedFactor);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(" x ");  bvText.append(speedFactor);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append("Offensive Battle Value");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("= ");  bvText.append(obv);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("<b>Extra Battle Rating Calculation:</b>");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  double xbv=0.0;  xbv+=tagBV;  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Tag BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(tagBV);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  bvText.append("Extra Battle Value");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("= ");  bvText.append(xbv);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("<b>Final BV Calculation:</b>");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Deffensive BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(dbv);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Offensive BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(obv);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Extra BV");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(xbv);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  int finalBV;  if (useGeometricMeanBV()) {    finalBV=(int)Math.round((2 * Math.sqrt(obv * dbv)) + xbv);    if (finalBV == 0) {      finalBV=(int)Math.round(dbv + obv);    }    bvText.append("Geometric Mean (2Sqrt(O*D) + X");    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append("= ");    bvText.append(finalBV);  } else {    finalBV=(int)Math.round(dbv + obv + xbv);    bvText.append("Sum");    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append(endColumn);    bvText.append(startColumn);    bvText.append("= ");    bvText.append(finalBV);  }  bvText.append(endColumn);  bvText.append(endRow);  double pilotFactor=1;  if (!ignorePilot) {    pilotFactor=getCrew().getBVSkillMultiplier(game);  }  bvText.append(startRow);  bvText.append(startColumn);  bvText.append("Multiply by Pilot Factor of ");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(pilotFactor);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(" x ");  bvText.append(pilotFactor);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(startRow);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("-------------");  bvText.append(endColumn);  bvText.append(endRow);  int retVal=(int)Math.round((finalBV) * pilotFactor);  bvText.append("<b>Final Battle Value</b>");  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append(endColumn);  bvText.append(startColumn);  bvText.append("= ");  bvText.append(retVal);  bvText.append(endColumn);  bvText.append(endRow);  bvText.append(endTable);  return retVal;}  }
class C{  public void clear(){  Arrays.fill(state,FREE);  Arrays.fill(values,null);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  public boolean contains(int x,int y){  return contains((double)x,(double)y);}  }
class C{  public boolean hasReturn3m(){  return getReturn3m() != null;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String render(final String template,final VelocityContext context){  StringWriter writer=new StringWriter();  velocityEngine.evaluate(context,writer,"TemplateName",template);  return writer.toString();}  }
class C{  public void testRenameOpenFile() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  InputStream is=Files.newInputStream(dir.resolve("stillopen"));  try {    Files.move(dir.resolve("stillopen"),dir.resolve("target"),StandardCopyOption.ATOMIC_MOVE);    fail("should have gotten exception");  } catch (  IOException e) {    assertTrue(e.getMessage().contains("access denied"));  }  is.close();}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  Set<Map.Entry<String,TableOption>> entries=mapOFOptions.entrySet();  Iterator<Map.Entry<String,TableOption>> iterator=entries.iterator();  while (iterator.hasNext()) {    Map.Entry<String,TableOption> entry=iterator.next();    builder.append(entry.getValue().toString());    builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);  }  return builder.toString();}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);  assertNotNull("mTestFragment is null",mTestFragment);}  }
class C{  public String isRelation(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"isRelation",objectName);  String result=null;synchronized (myRelMBeanObjName2RelIdMap) {    String relId=myRelMBeanObjName2RelIdMap.get(objectName);    if (relId != null) {      result=relId;    }  }  return result;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public final GF2nPolynomial remainder(GF2nPolynomial b) throws RuntimeException, ArithmeticException {  GF2nPolynomial[] result=new GF2nPolynomial[2];  result=divide(b);  return result[1];}  }
class C{  private boolean constraints_41_AbstractClass(TClassifier classifier,MemberCube memberCube){  List<TMember> abstractMembers=null;  if (!classifier.isAbstract() && classifier instanceof TClass) {    for (    Entry<NameStaticPair,MemberMatrix> entry : memberCube.entrySet()) {      MemberMatrix mm=entry.getValue();      MemberList<TMember> l=new MemberList<>();      Iterators.addAll(l,mm.actuallyInheritedAndMixedMembers());      for (SourceAwareIterator iter=mm.actuallyInheritedAndMixedMembers(); iter.hasNext(); ) {        TMember m=iter.next();        if (m.isAbstract()) {          if (abstractMembers == null) {            abstractMembers=new ArrayList<>();          }          abstractMembers.add(m);        }      }    }  }  if (abstractMembers != null) {    messageMissingImplementations(abstractMembers);    return false;  }  return true;}  }
class C{  private void stopForegroundCompat(int id){  if (mStopForeground != null) {    try {      mStopForeground.invoke(this,Boolean.TRUE);    } catch (    InvocationTargetException e) {      L.d("Unable to invoke stopForeground");    }catch (    IllegalAccessException e) {      L.d("Unable to invoke stopForeground");    }    return;  }  mNM.cancel(id);  if (mSetForeground != null) {    try {      mSetForeground.invoke(this,Boolean.FALSE);    } catch (    IllegalAccessException e) {      L.d("Unable to invoke setForeground");    }catch (    InvocationTargetException e) {      L.d("Unable to invoke setForeground");    }  }}  }
class C{  public void test_ticket_1202a() throws Exception {  new TestHelper("ticket-1202-group03","ticket-1202-group03.rq","ticket-1202-group03.ttl","ticket-1202-group03.srx").runTest();}  }
class C{  public void closeAllConnections(){  this.pcClient.closeAllConnections();}  }
class C{  public static boolean hasSPINRDF(Resource command){  StmtIterator it=command.listProperties();  try {    while (it.hasNext()) {      Statement o=it.next();      if (!RDF.type.equals(o.getPredicate()) && !SP.text.equals(o.getPredicate()) && !SPIN.thisUnbound.equals(o.getPredicate())) {        return true;      }    }    return false;  }  finally {    it.close();  }}  }
class C{  public Object encode(Object value) throws EncoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return encode((String)value);  } else {    throw new EncoderException("Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");  }}  }
class C{  private void provideDocumentCreationTime(JCas jcas,Date documentCreationTime) throws DocumentCreationTimeMissingException {  if (documentCreationTime == null) {    if (documentType == DocumentType.NEWS) {      throw new DocumentCreationTimeMissingException();    }    if (documentType == DocumentType.COLLOQUIAL) {      throw new DocumentCreationTimeMissingException();    }  } else {    SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy.MM.dd'T'HH:mm");    String formattedDCT=dateFormatter.format(documentCreationTime);    Dct dct=new Dct(jcas);    dct.setValue(formattedDCT);    dct.addToIndexes();  }}  }
class C{  protected void println(StringBuilder ddl){  ddl.append(LINE_SEPARATOR);}  }
class C{  public static boolean isEnabled(){  return loggerImpl.isEnabled();}  }
class C{  public void write16bit(int value){  output.write((value >>> 8) & 0xff);  output.write(value & 0xff);}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount());    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (!this.isThereOpenPosition()) {      _log.info("No open position so Cancel Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod);      this.cancel();      return;    }    if (this.isThereOpenPosition() && !this.isPositionCovered()) {      _log.info("Open position submit Stop/Tgt orders Symbol: " + getSymbol() + " Time:"+ startPeriod);      double riskAmount=0;      if (null == this.getOpenPositionOrder().getStopPrice()) {        riskAmount=Math.abs(this.getTradestrategy().getRiskAmount().doubleValue() / this.getOpenPositionOrder().getFilledQuantity().doubleValue());      } else {        riskAmount=Math.abs(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue() - this.getOpenPositionOrder().getStopPrice().doubleValue());      }      String action=Action.BUY;      int buySellMultipliter=1;      if (Side.BOT.equals(getOpenTradePosition().getSide())) {        action=Action.SELL;        buySellMultipliter=-1;      }      double stop=this.getOpenPositionOrder().getAverageFilledPrice().doubleValue() + (riskAmount * 1 * buySellMultipliter);      Money auxPrice=addPennyAndRoundStop(stop,this.getOpenTradePosition().getSide(),action,-0.01);      this.createOrder(this.getTradestrategy().getContract(),action,OrderType.STP,null,auxPrice,this.getOpenPositionOrder().getFilledQuantity(),null,false,true);    }    if (!currentCandleItem.getLastUpdateDate().isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(2))) {      cancelOrdersClosePosition(true);      _log.info("PositionManagerStrategy 15:58:00 done: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error Position Manager exception: " + ex.getMessage(),ex);    error(1,30,"Error  Position Manager exception: " + ex.getMessage());  }}  }
class C{  @Override protected void fillHeader(Header head){  try {    Standard.context(UndefinedData.class);    head.setXtension("UNKNOWN");    head.setBitpix(BasicHDU.BITPIX_BYTE);    head.setNaxes(1);    head.addValue(NAXISn.n(1),this.data.length);    head.addValue(PCOUNT,0);    head.addValue(GCOUNT,1);    head.addValue(EXTEND,true);  } catch (  HeaderCardException e) {    LOG.log(Level.SEVERE,"Unable to create unknown header",e);  } finally {    Standard.context(null);  }}  }
class C{  public T caseAnonymous_constraintBody_1_(Anonymous_constraintBody_1_ object){  return null;}  }
class C{  public Matrix submatrix(int rmin,int cmin,int rmax,int cmax){  Matrix result=new Matrix(rmax - rmin,cmax - cmin);  for (int r=rmin; r < rmax; r++) {    for (int c=cmin; c < cmax; c++) {      result.data[r - rmin][c - cmin]=data[r][c];    }  }  return result;}  }
class C{  public static int popParameterInt(){  return parametersInteger.pop();}  }
class C{  public static double[] toDoubleArray(byte[] data,int offset,int length){  double[] result=new double[length / 8];  byte[] tmp=new byte[8];  for (int i=0; i < result.length; i++) {    System.arraycopy(data,i * 8 + offset,tmp,0,8);    result[i]=toDouble(tmp);  }  return result;}  }
class C{  public boolean loadVariables(){  String file=readFile();  if (file == null) {    return false;  }  JSONObject jo;  try {    boolean loadMap=false;    jo=new JSONObject(file);    setTravelMode(jo.getString("travelMode"));    setWeighting(jo.getString("weighting"));    setRoutingAlgorithms(jo.getString("routingAlgorithms"));    setDirectionsON(jo.getBoolean("directionsON"));    setAdvancedSetting(jo.getBoolean("advancedSetting"));    setZoomLevelMax(jo.getInt("zoomLevelMax"));    setZoomLevelMin(jo.getInt("zoomLevelMin"));    setLastZoomLevel(jo.getInt("lastZoomLevel"));    double la=jo.getDouble("latitude");    double lo=jo.getDouble("longitude");    if (la != 0 && lo != 0) {      setLastLocation(new LatLong(la,lo));    }    String coun=jo.getString("country");    if (coun != "") {      setCountry(jo.getString("country"));      loadMap=true;    }    setMapDirectory(jo.getString("mapDirectory"));    setMapsFolder(new File(jo.getString("mapsFolderAbsPath")));    setSportCategoryIndex(jo.getInt("sportCategoryIndex"));    setDownloadStatus(jo.getInt("mapDownloadStatus"));    setMapLastModified(jo.getString("mapLastModified"));    setMapFinishedPercentage(jo.getInt("mapFinishedPercentage"));    setPausedMapName(jo.getString("pausedMapName"));    if (getPausedMapName() != "") {      loadMap=false;    }    if (!hasUnfinishedDownload()) {      resetDownloadMapVariables();    }    return loadMap;  } catch (  JSONException e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean isCancelled(){synchronized (LAYERWORKER_LOCK) {    return layerWorkerQueue;  }}  }
class C{  @Override public int hashCode(){  return new HashCodeBuilder(15,51).append(getIdentifier()).append(getName()).append(getDatabaseName()).append(getCategory()).append(getEntries()).toHashCode();}  }
class C{  protected void onUpdateComplete(int token,Object cookie,int result){}  }
class C{  private static void initialize(){  register=new ImageRegistry();  keys=new HashSet<String>();  Bundle bundle=Platform.getBundle(Activator.PLUGIN_ID);  URL url=bundle.getEntry(ICONS_ENTRY);  try {    url=FileLocator.toFileURL(url);  } catch (  Exception e) {    e.printStackTrace();  }  File file=new File(url.getPath());  for (  File f : file.listFiles()) {    if (!f.isFile()) {      continue;    }    String name=f.getName().trim().toLowerCase();    for (    String extesion : ICONS_EXTS) {      if (name.endsWith(extesion)) {        break;      }    }    String key=name.substring(0,name.indexOf('.'));    URL fullPathString=bundle.getEntry(ICONS_ENTRY + "/" + name);    ImageDescriptor des=ImageDescriptor.createFromURL(fullPathString);    register.put(key,des);    keys.add(key);  }}  }
class C{  protected synchronized void clearChanged(){  changed=false;}  }
class C{  public static boolean isDistributedCacheUsed(String str){  String[] parts=str.split(Instruction.INSTRUCTION_DELIM);  for (  String inst : parts) {    String opcode=getOpCode(inst);    if (opcode.equalsIgnoreCase(AppendM.OPCODE) || opcode.equalsIgnoreCase(MapMult.OPCODE) || opcode.equalsIgnoreCase(MapMultChain.OPCODE)|| opcode.equalsIgnoreCase(PMMJ.OPCODE)|| opcode.equalsIgnoreCase(UAggOuterChain.OPCODE)|| opcode.equalsIgnoreCase(GroupedAggregateM.OPCODE)|| isDistQuaternaryOpcode(opcode)|| BinaryM.isOpcode(opcode)) {      return true;    }  }  return false;}  }
class C{  private static void groupedAggregateKahanPlus(MatrixBlock groups,MatrixBlock target,MatrixBlock weights,MatrixBlock result,int numGroups,AggregateOperator aggop,int cl,int cu) throws DMLRuntimeException {  boolean rowVector=(target.getNumRows() == 1 && target.getNumColumns() > 1);  int numCols=(!rowVector) ? target.getNumColumns() : 1;  double w=1;  if (target.isEmptyBlock(false))   return;  int numCols2=cu - cl;  KahanObject[][] buffer=new KahanObject[numGroups][numCols2];  for (int i=0; i < numGroups; i++)   for (int j=0; j < numCols2; j++)   buffer[i][j]=new KahanObject(aggop.initialValue,0);  if (rowVector) {    if (target.sparse) {      if (!target.sparseBlock.isEmpty(0)) {        int pos=target.sparseBlock.pos(0);        int len=target.sparseBlock.size(0);        int[] aix=target.sparseBlock.indexes(0);        double[] avals=target.sparseBlock.values(0);        for (int j=pos; j < pos + len; j++) {          int g=(int)groups.quickGetValue(aix[j],0);          if (g > numGroups)           continue;          if (weights != null)           w=weights.quickGetValue(aix[j],0);          aggop.increOp.fn.execute(buffer[g - 1][0],avals[j] * w);        }      }    } else {      for (int i=0; i < target.getNumColumns(); i++) {        double d=target.denseBlock[i];        if (d != 0) {          int g=(int)groups.quickGetValue(i,0);          if (g > numGroups)           continue;          if (weights != null)           w=weights.quickGetValue(i,0);          aggop.increOp.fn.execute(buffer[g - 1][0],d * w);        }      }    }  } else {    if (target.sparse) {      SparseBlock a=target.sparseBlock;      for (int i=0; i < groups.getNumRows(); i++) {        int g=(int)groups.quickGetValue(i,0);        if (g > numGroups)         continue;        if (!a.isEmpty(i)) {          int pos=a.pos(i);          int len=a.size(i);          int[] aix=a.indexes(i);          double[] avals=a.values(i);          int j=(cl == 0) ? pos : a.posFIndexGTE(i,cl);          j=(j >= 0) ? j : len;          for (; j < pos + len && aix[j] < cu; j++) {            if (weights != null)             w=weights.quickGetValue(aix[j],0);            aggop.increOp.fn.execute(buffer[g - 1][aix[j] - cl],avals[j] * w);          }        }      }    } else {      double[] a=target.denseBlock;      for (int i=0, aix=0; i < groups.getNumRows(); i++, aix+=numCols) {        int g=(int)groups.quickGetValue(i,0);        if (g > numGroups)         continue;        for (int j=cl; j < cu; j++) {          double d=a[aix + j];          if (d != 0) {            if (weights != null)             w=weights.quickGetValue(i,0);            aggop.increOp.fn.execute(buffer[g - 1][j - cl],d * w);          }        }      }    }  }  for (int i=0; i < numGroups; i++)   for (int j=0; j < numCols2; j++)   result.appendValue(i,j + cl,buffer[i][j]._sum);}  }
class C{  public void tryToDeleteImageSharings(){  mImageSharingDeleteOperationHandler.post(new ImageSharingDeleteTask(mImageSharingService,this,mLocalContentResolver));}  }
class C{  public void validateDerivedPKClassId(String attributeName,String expectedType,String referenceClassName){  if (m_pkClassIDs.containsKey(attributeName)) {    String actualType=m_pkClassIDs.get(attributeName);    if (actualType.equals(expectedType)) {      m_pkClassIDs.remove(attributeName);    } else {      throw ValidationException.invalidDerivedCompositePKAttribute(referenceClassName,getPKClassName(),attributeName,expectedType,actualType);    }  }}  }
class C{  protected void prepareDataSet(){  dataSet1=Arrays.asList(new String[]{"a","b","c"});  dataSet2=Arrays.asList(new String[]{"d","e","f"});  dataSet3=Arrays.asList(new String[]{"b","c","a","d"});}  }
class C{  public static long ttlForLoad(ExpiryPolicy plc){  if (plc != null) {    long ttl=toTtl(plc.getExpiryForCreation());    if (ttl == TTL_NOT_CHANGED)     ttl=TTL_ETERNAL;    return ttl;  } else   return TTL_ETERNAL;}  }
class C{  public boolean hasOrder(){  return order != null;}  }
class C{  public OpacityFilter(int opacity){  setOpacity(opacity);}  }
class C{  public static String encode(final float f){  return "f" + Integer.toString(Float.floatToIntBits(f)) + "|"+ String.valueOf(f)+ "|";}  }
class C{  public void addHistory(){  MSERGrowthHistory newHist=new MSERGrowthHistory(size,greyLevel,head);  if (history != null) {    history.parent=newHist;  }  for (  MSERGrowthHistory toAdd : historiesToLinkToParent) {    toAdd.parent=newHist;  }  historiesToLinkToParent.clear();  history=newHist;}  }
class C{  public byte[] generateSignedData(ContentSignerParameters params,boolean omitContent,boolean applyTimestamp) throws NoSuchAlgorithmException, CertificateException, IOException {  if (params == null) {    throw new NullPointerException();  }  String signatureAlgorithm=params.getSignatureAlgorithm();  X509Certificate[] signerChain=params.getSignerCertificateChain();  byte[] signature=params.getSignature();  byte[] content=(omitContent == true) ? null : params.getContent();  URI tsaURI=null;  if (applyTimestamp) {    tsaURI=params.getTimestampingAuthority();    if (tsaURI == null) {      tsaURI=getTimestampingURI(params.getTimestampingAuthorityCertificate());      if (tsaURI == null) {        throw new CertificateException("Subject Information Access extension not found");      }    }  }  String tSADigestAlg="SHA-256";  if (params instanceof JarSignerParameters) {    tSADigestAlg=((JarSignerParameters)params).getTSADigestAlg();  }  return PKCS7.generateSignedData(signature,signerChain,content,params.getSignatureAlgorithm(),tsaURI,params.getTSAPolicyID(),tSADigestAlg);}  }
class C{  public int nextNode(){  int nextNode=DTM.NULL;  AxesWalker walker=wi().getLastUsedWalker();  while (true) {    if (null == walker)     break;    nextNode=walker.getNextNode();    if (DTM.NULL == nextNode) {      walker=walker.m_prevWalker;    } else {      if (walker.acceptNode(nextNode) != DTMIterator.FILTER_ACCEPT) {        continue;      }      if (null == walker.m_nextWalker) {        wi().setLastUsedWalker(walker);        break;      } else {        AxesWalker prev=walker;        walker=walker.m_nextWalker;        walker.setRoot(nextNode);        walker.m_prevWalker=prev;        continue;      }    }  }  return nextNode;}  }
class C{  public boolean isPaused(){  if (step) {    step=false;    return false;  }  if (SimClock.getTime() >= this.playUntilTime) {    this.setPaused(true);  }  return this.paused;}  }
class C{  private void useFilteredFromEntries(LimitSizeEntryList entries){  LimitSizeEntryList filteredEntries=filterEntries(entries);  this.currentEntries=filteredEntries;  this.filteredEntries=filteredEntries;}  }
class C{  private void checkExistsParent(int parentDivId) throws Exception {  int idx;  FolderTokenDivider div=null;  if (parentDivId == FolderBaseDefs.CLF_ROOT_ID)   return;  idx=m_dividers.findIndexById(parentDivId);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_INVALID_PARENT,FolderBaseError.EM_INVALID_PARENT);  }  div=m_dividers.get(idx);  if (div.isRemove()) {    throw new IeciTdException(FolderBaseError.EC_INVALID_PARENT,FolderBaseError.EM_INVALID_PARENT);  }}  }
class C{  private static void cleanupResources() throws SolrServerException, IOException {  try {    final CollectionAdminRequest.Delete deleteCollectionRequest=new CollectionAdminRequest.Delete();    deleteCollectionRequest.setCollectionName(COLLECTION_NAME);    System.out.println("Deleting collection...");    deleteCollectionRequest.process(solrClient);    System.out.println("Collection deleted.");  }  finally {    try {      System.out.println("Deleting configuration...");      service.deleteSolrClusterConfiguration(SOLR_CLUSTER_ID,CONFIG_NAME).execute();      System.out.println("Configuration deleted.");    }  finally {      System.out.println("Closing Solr client...");      solrClient.close();      System.out.println("Clients closed.");    }  }}  }
class C{  private String parseSearchTemplate(String searchurltemplate,String query,int start,int rows){  String tmps=searchurltemplate.replaceAll("\\?}","}");  tmps=tmps.replace("{startIndex}",Integer.toString(start));  tmps=tmps.replace("{startPage}","");  tmps=tmps.replace("{count}",Integer.toString(rows));  tmps=tmps.replace("{language}","");  tmps=tmps.replace("{inputEncoding}",StandardCharsets.UTF_8.name());  tmps=tmps.replace("{outputEncoding}",StandardCharsets.UTF_8.name());  return tmps.replace("{searchTerms}",query);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsTextFieldUI();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.369 -0500",hash_original_method="7EBA5C9ECD25887AF5B543E5839AFD7E",hash_generated_method="3391E4ABB388AC16FD6FF8639A129B78") public Name(byte[] encoding) throws IOException {  DerInputStream in=new DerInputStream(encoding);  if (in.getEndOffset() != encoding.length) {    throw new IOException("Wrong content length");  }  ASN1.decode(in);  this.rdn=(List<List<AttributeTypeAndValue>>)in.content;}  }
class C{  void notifySupplicantStateChange(int networkId,WifiSsid wifiSsid,String BSSID,SupplicantState newState){  mStateMachine.sendMessage(mStateMachine.obtainMessage(SUPPLICANT_STATE_CHANGE_EVENT,new StateChangeResult(networkId,wifiSsid,BSSID,newState)));}  }
class C{  public static <T>Optional<T> toOptional(Observable<T> observable){  T element=observable.toBlocking().singleOrDefault(null);  return Optional.fromNullable(element);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.EXECUTION__STATEMENT:    return getStatement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static IOException tryToClose(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException e) {      if (sLogger.isActivated()) {        sLogger.debug(new StringBuilder("Failed to close the stream, Message=").append(e.getMessage()).toString());      }      return e;    }  }  return null;}  }
class C{  private String findAttributes(final String rawFont){  String result=rawFont;  int ptr=rawFont.indexOf(',');  if (ptr == -1) {    ptr=rawFont.indexOf('-');  }  if (ptr == -1) {    ptr=rawFont.lastIndexOf(' ');  }  if (ptr == -1) {    for (int i=(rawFont.length() - 1); i >= 0; i--) {      final int pt=rawFont.codePointAt(i);      if (pt >= 0x30 && pt <= 0x39) {        if (i < (rawFont.length() - 1)) {          ptr=i - 1;        }        break;      }    }  }  if (ptr != -1) {    final String fontAttributes=rawFont.substring(ptr + 1,rawFont.length()).toLowerCase();    result=rawFont.substring(0,ptr);    family=result;    boolean isFontExists=false;    for (    final String k : fontMappings.keySet()) {      if (k.startsWith(family)) {        isFontExists=true;      }    }    if (isFontExists || !isFontEmbedded) {      if (fontAttributes.contains("heavy")) {        weight="900";      } else       if (fontAttributes.endsWith("black")) {        weight="bolder";      } else       if (fontAttributes.contains("light")) {        weight="lighter";      } else       if (fontAttributes.contains("condensed")) {        weight="100";      } else       if (fontAttributes.contains("bold")) {        weight="bold";      }      if (fontAttributes.equals("it") || fontAttributes.contains("italic") || fontAttributes.contains("kursiv")|| fontAttributes.contains("oblique")) {        style="italic";      }    }  }  return result;}  }
class C{  public byte[] build(){  addTable(Tag.head,headBuilder.build());  TreeSet<Integer> tags=new TreeSet<Integer>(tables.keySet());  int nTables=tables.size();  int size=FONT_HEADER_BASE_SIZE + FONT_HEADER_PER_TABLE_SIZE * nTables;  for (  Map.Entry<Integer,ReadableFontData> entry : tables.entrySet()) {    ReadableFontData data=entry.getValue();    if (data != null) {      size+=(entry.getValue().length() + TABLE_ALIGN - 1) & -TABLE_ALIGN;    }  }  byte[] buf=new byte[size];  putUlong(buf,0,OPENTYPE_VERSION_1_0);  putUshort(buf,4,nTables);  int entrySelector=0;  int searchRange=searchRange(nTables);  putUshort(buf,6,searchRange * FONT_HEADER_PER_TABLE_SIZE);  putUshort(buf,8,log2(searchRange));  putUshort(buf,10,(nTables - searchRange) * FONT_HEADER_PER_TABLE_SIZE);  int headerOffset=FONT_HEADER_BASE_SIZE;  int offset=FONT_HEADER_BASE_SIZE + FONT_HEADER_PER_TABLE_SIZE * nTables;  for (  Integer tag : tags) {    ReadableFontData data=tables.get(tag);    putUlong(buf,headerOffset,tag.intValue());    int checksum=0;    putUlong(buf,headerOffset + 4,checksum);    if (data == null) {      putUlong(buf,headerOffset + 8,0);      putUlong(buf,headerOffset + 12,0);    } else {      putUlong(buf,headerOffset + 8,offset);      int length=data.length();      putUlong(buf,headerOffset + 12,length);      data.readBytes(0,buf,offset,length);      offset+=(length + TABLE_ALIGN - 1) & -TABLE_ALIGN;    }    headerOffset+=FONT_HEADER_PER_TABLE_SIZE;  }  return buf;}  }
class C{  public void addSkinPart(String fieldName,Boolean required){  if (skinParts == null) {    skinParts=new HashMap<String,Boolean>();  }  skinParts.put(fieldName,required);}  }
class C{  private static int GetArrayLength(JNIEnvironment env,int arrayJREF){  if (traceJNI)   VM.sysWrite("JNI called: GetArrayLength  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object theArray=env.getJNIRef(arrayJREF);    RVMType arrayType=Magic.getObjectType(theArray);    return arrayType.isArrayType() ? Magic.getArrayLength(theArray) : -1;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return -1;  }}  }
class C{  public static boolean removeBeanOrFolder(String path,Object bean){  return removeBeanOrFolder(getResourcePath(path,bean));}  }
class C{  public ProblemException(Problem problem,String message){  super(message);  this.problem=problem;}  }
class C{  public static int mix(final int salt,final int in){  short v0=hi16(in);  short v1=lo16(in);  v0+=((v1 << 2) + 0 ^ v1) + (salt ^ (v1 >>> 3)) + 1;  v1+=((v0 << 2) + 2 ^ v0) + (salt ^ (v0 >>> 3)) + 3;  return result(v0,v1);}  }
class C{  @SuppressWarnings("unchecked") private static <T>T unmarshal(JAXBContext ctx,String strData,boolean flgWhitespaceAware) throws Exception {  UnmarshallerHandler uh=ctx.createUnmarshaller().getUnmarshallerHandler();  XMLReader xr=XMLReaderFactory.createXMLReader();  xr.setContentHandler(flgWhitespaceAware ? new WhitespaceAwareUnmarshallerHandler(uh) : uh);  xr.setErrorHandler(new DefaultHandler());  xr.parse(new InputSource(new StringReader(strData)));  return (T)uh.getResult();}  }
class C{  public List<String> order(CheServicesEnvironmentImpl composeEnvironment) throws IllegalArgumentException {  Map<String,Integer> weights=weightMachines(composeEnvironment.getServices());  return sortByWeight(weights);}  }
class C{  public AreaChart(){  firstMultiplier=0.33f;  secondMultiplier=1 - firstMultiplier;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public AnimatableLengthOrIdentValue(AnimationTarget target,short type,float v,short pcInterp){  super(target,type,v,pcInterp);}  }
class C{  Cursor query(final boolean distinct,final String table,final String[] columns,final String selection,final String[] selectionArgs,final String groupBy,final String having,final String orderBy,final String limit){  final SQLiteDatabase database=getReadableDatabase();  return database.query(distinct,table,columns,selection,selectionArgs,groupBy,having,orderBy,limit);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private void swap(int i,int j){  float tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  @DSComment("Animation class") @DSSafe(DSCat.ANDROID_ANIMATION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.659 -0500",hash_original_method="D25B7AF36D80C3FC72EA4BF2A0177D1E",hash_generated_method="064165BD6D85884EDB47418B01A2DFE7") public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == null) {    String msg=Logging.getMessage("nullValue.PropertyNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.getChangeSupport().firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public int addGraph(FilterGraph graph){  GraphHandle graphHandle=new GraphHandle(graph);  mGraphs.add(graphHandle);  return mGraphs.size() - 1;}  }
class C{  public static QueryPlanIndex[] buildIndexSpec(QueryGraph queryGraph,EventType[] typePerStream,String[][][] indexedStreamsUniqueProps){  int numStreams=queryGraph.getNumStreams();  QueryPlanIndex[] indexSpecs=new QueryPlanIndex[numStreams];  for (int streamIndexed=0; streamIndexed < numStreams; streamIndexed++) {    List<QueryPlanIndexItem> indexesSet=new ArrayList<QueryPlanIndexItem>();    for (int streamLookup=0; streamLookup < numStreams; streamLookup++) {      if (streamIndexed == streamLookup) {        continue;      }      QueryGraphValue value=queryGraph.getGraphValue(streamLookup,streamIndexed);      QueryGraphValuePairHashKeyIndex hashKeyAndIndexProps=value.getHashKeyProps();      String[] hashIndexProps=hashKeyAndIndexProps.getIndexed();      List<QueryGraphValueEntryHashKeyed> hashKeyProps=hashKeyAndIndexProps.getKeys();      CoercionDesc indexCoercionTypes=CoercionUtil.getCoercionTypesHash(typePerStream,streamLookup,streamIndexed,hashKeyProps,hashIndexProps);      Class[] hashCoercionTypeArr=indexCoercionTypes.getCoercionTypes();      QueryGraphValuePairRangeIndex rangeAndIndexProps=value.getRangeProps();      String[] rangeIndexProps=rangeAndIndexProps.getIndexed();      List<QueryGraphValueEntryRange> rangeKeyProps=rangeAndIndexProps.getKeys();      CoercionDesc rangeCoercionTypes=CoercionUtil.getCoercionTypesRange(typePerStream,streamIndexed,rangeIndexProps,rangeKeyProps);      Class[] rangeCoercionTypeArr=rangeCoercionTypes.getCoercionTypes();      if (hashIndexProps.length == 0 && rangeIndexProps.length == 0) {        QueryGraphValuePairInKWSingleIdx singles=value.getInKeywordSingles();        if (!singles.getKey().isEmpty()) {          String indexedProp=singles.getIndexed()[0];          QueryPlanIndexItem indexItem=new QueryPlanIndexItem(new String[]{indexedProp},null,null,null,false);          checkDuplicateOrAdd(indexItem,indexesSet);        }        List<QueryGraphValuePairInKWMultiIdx> multis=value.getInKeywordMulti();        if (!multis.isEmpty()) {          QueryGraphValuePairInKWMultiIdx multi=multis.get(0);          for (          ExprNode propIndexed : multi.getIndexed()) {            ExprIdentNode identNode=(ExprIdentNode)propIndexed;            QueryPlanIndexItem indexItem=new QueryPlanIndexItem(new String[]{identNode.getResolvedPropertyName()},null,null,null,false);            checkDuplicateOrAdd(indexItem,indexesSet);          }        }        continue;      }      boolean unique=false;      QueryPlanIndexUniqueHelper.ReducedHashKeys reduced=QueryPlanIndexUniqueHelper.reduceToUniqueIfPossible(hashIndexProps,hashCoercionTypeArr,hashKeyProps,indexedStreamsUniqueProps[streamIndexed]);      if (reduced != null) {        hashIndexProps=reduced.getPropertyNames();        hashCoercionTypeArr=reduced.getCoercionTypes();        unique=true;        rangeIndexProps=new String[0];        rangeCoercionTypeArr=new Class[0];      }      QueryPlanIndexItem proposed=new QueryPlanIndexItem(hashIndexProps,hashCoercionTypeArr,rangeIndexProps,rangeCoercionTypeArr,unique);      checkDuplicateOrAdd(proposed,indexesSet);    }    if (indexesSet.isEmpty()) {      indexesSet.add(new QueryPlanIndexItem(null,null,null,null,false));    }    indexSpecs[streamIndexed]=QueryPlanIndex.makeIndex(indexesSet);  }  return indexSpecs;}  }
class C{  public UntypedResultSet process(final ConsistencyLevel cl,final ConsistencyLevel serialConsistencyLevel,final String query,final Object... values) throws RequestExecutionException, RequestValidationException, InvalidRequestException {  return process(cl,serialConsistencyLevel,query,new Long(0),values);}  }
class C{  private String strToN(String str){  if (str.length() == 0)   return null; else   return str;}  }
class C{  public Node addControlFlowCorrelationId(String id){  this.correlationIds.add(new CorrelationIdentifier(Scope.ControlFlow,id));  return this;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (obj instanceof Size) {    Size other=(Size)obj;    return mWidth == other.mWidth && mHeight == other.mHeight;  }  return false;}  }
class C{  public void init(RuntimeServices rs,InternalContextAdapter context,Node node) throws Exception {  super.init(rs,context,node);  int i=node.jjtGetNumChildren();  if (argumentNamesArray.length != i) {    rsvc.error("VM #" + macroName + ": error : too "+ ((argumentNamesArray.length > i) ? "few" : "many")+ " arguments to macro. Wanted "+ argumentNamesArray.length+ " got "+ i);    return;  }  for (i=0; i < argumentNamesArray.length; i++) {    args[i]=new VMProxyArg(rsvc,argumentNamesArray[i],node.jjtGetChild(i));  }  return;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void removeForeignKey(ForeignKey foreignKey){  if (foreignKey != null) {    foreignKeys.remove(foreignKey);  }}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin()).map(null).orElseGet(null);}  }
class C{  @Override public boolean isTranslatableInto(final IType<?> l){  return type.isTranslatableInto(l.getType()) && contentsType.isTranslatableInto(l.getContentType()) && keyType.isTranslatableInto(l.getKeyType());}  }
class C{  private long resetUidValidity() throws IOException {  long timestamp=System.currentTimeMillis();  setUidValidity(timestamp);  return timestamp;}  }
class C{  public static SendPing parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SendPing object=new SendPing();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"sendPing".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (SendPing)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","arg").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setArg(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public WorldWindow createWorldWindow(){  this.wwd=new WorldWindow(getContext());  this.wwd.getLayers().addLayer(new BackgroundLayer());  this.wwd.getLayers().addLayer(new BlueMarbleLandsatLayer());  return this.wwd;}  }
class C{  public java.sql.Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  checkClosed();  StatementImpl stmt=new StatementImpl(getMultiHostSafeProxy(),this.database);  stmt.setResultSetType(resultSetType);  stmt.setResultSetConcurrency(resultSetConcurrency);  return stmt;}  }
class C{  public ElemTemplateElement removeChild(ElemTemplateElement childETE){  if (childETE == null || childETE.m_parentNode != this)   return null;  if (childETE == m_firstChild)   m_firstChild=childETE.m_nextSibling; else {    ElemTemplateElement prev=childETE.getPreviousSiblingElem();    prev.m_nextSibling=childETE.m_nextSibling;  }  childETE.m_parentNode=null;  childETE.m_nextSibling=null;  return childETE;}  }
class C{  public String lookupPrefix(String uri){  String foundPrefix=null;  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefix=prefix;      break;    }  }  return foundPrefix;}  }
class C{  protected void generateAdapter(){  String holderClassName=Utils.getViewHolderClassName();  StringBuilder holderBuilder=new StringBuilder();  StringBuilder generator=new StringBuilder();  generator.append("public " + holderClassName + "(android.view.View rootView) {\n");  String rootViewName="rootView";  holderBuilder.append("public " + "android.view.View " + rootViewName + ";\n");  generator.append("this." + rootViewName + " = "+ rootViewName+ ";\n");  for (  Element element : mElements) {    if (!element.used) {      continue;    }    holderBuilder.append("public " + element.name + " "+ element.getFieldName()+ ";\n");    generator.append("this." + element.getFieldName() + " = ("+ element.name+ ") "+ rootViewName+ ".findViewById("+ element.getFullID()+ ");\n");  }  generator.append("}\n");  holderBuilder.append(generator.toString());  PsiClass viewHolder=mFactory.createClassFromText(holderBuilder.toString(),mClass);  viewHolder.setName(holderClassName);  mClass.add(viewHolder);  mClass.addBefore(mFactory.createKeyword("public",mClass),mClass.findInnerClassByName(holderClassName,true));  mClass.addBefore(mFactory.createKeyword("static",mClass),mClass.findInnerClassByName(holderClassName,true));}  }
class C{  public GMSMember(String i,int p){  udpPort=p;  try {    inetAddr=InetAddress.getByName(i);  } catch (  UnknownHostException e) {  }}  }
class C{  public IndexData.EntryCursor cursor(Object[] startRow,boolean startInclusive,Object[] endRow,boolean endInclusive) throws IOException {  return getIndexData().cursor(startRow,startInclusive,endRow,endInclusive);}  }
class C{  public ImagePortrayal3D(Image image,boolean oriented,boolean opaque){  float width=image.getWidth(null);  float height=image.getHeight(null);  if (width > height) {    width=width / height;    height=1.0f;  } else {    height=height / width;    width=1.0f;  }  float[] vertices=new float[]{width / 2,-height / 2,0f,width / 2,height / 2,0f,-width / 2,height / 2,0f,-width / 2,-height / 2,0f};  QuadArray geometry=new QuadArray(4,QuadArray.COORDINATES | QuadArray.TEXTURE_COORDINATE_2);  geometry.setCoordinates(0,vertices);  geometry.setTextureCoordinate(0,0,new TexCoord2f(1,1));  geometry.setTextureCoordinate(0,1,new TexCoord2f(1,0));  geometry.setTextureCoordinate(0,2,new TexCoord2f(0,0));  geometry.setTextureCoordinate(0,3,new TexCoord2f(0,1));  Appearance appearance=appearanceForImage(image,opaque);  PolygonAttributes pa=new PolygonAttributes();  pa.setCullFace(oriented ? PolygonAttributes.CULL_BACK : PolygonAttributes.CULL_NONE);  appearance.setPolygonAttributes(pa);  if (oriented)   shape=new OrientedShape3D(geometry,appearance,OrientedShape3D.ROTATE_ABOUT_POINT,new Point3f(0,0,0)); else   shape=new Shape3D(geometry,appearance);}  }
class C{  public static boolean isPlugin(final Class<?> pluginClass){  return (getInstance().getPlugger(pluginClass) != null);}  }
class C{  public String suffixMeanTipText(){  return "The suffix for the 'mean' statistic.";}  }
class C{  public GeneralException(Throwable nested){  super(nested);}  }
class C{  public void fillWithNumber(TextView view,FakerNumericComponent component){  validateNotNullableView(view);  validateIfIsATextView(view);  validateNotNullableFakerComponent(component);  view.setText(String.valueOf(component.randomNumber()));}  }
class C{  public boolean isLeaf(){  return children.isEmpty();}  }
class C{  protected void initializeModel(){  if (model != null) {    return;  }  model=CoreModel.getInstance();}  }
class C{  private static float calcSum(float[] vals){  float sum=0f;  for (  float f : vals)   sum+=f;  return sum;}  }
class C{  public void insert(T object,int index){synchronized (mLock) {    mObjects.add(index,object);  }  if (mNotifyOnChange)   notifyItemInserted(index);}  }
class C{  protected final void fillBufferRow(ByteBuffer bbuf,int wid,int row,LayerType layerType){switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:case field:  FloatBuffer fbuf=bbuf.asFloatBuffer();fbuf.position(row * wid);for (int c=0; c < wid; ++c) {fbuf.put(Float.NaN);}break;case colorimage:IntBuffer ibuf=bbuf.asIntBuffer();ibuf.position(row * wid);for (int c=0; c < wid; ++c) {ibuf.put(0);}break;case grayimage:bbuf.position(row * wid);for (int c=0; c < wid; ++c) {bbuf.put((byte)0);}break;}bbuf.rewind();}  }
class C{  public ExemptionMechanismException(String msg){  super(msg);}  }
class C{  protected History(){}  }
class C{  public void addVolumesToConsistencyGroup(StorageSystem storage,final List<URI> blockObjects,CIMObjectPath cgPath) throws Exception {  String[] blockObjectNames=getBlockObjectNativeIds(blockObjects);  CIMObjectPath[] members=_cimPath.getVolumePaths(storage,blockObjectNames);  @SuppressWarnings("rawtypes") CIMArgument[] addMembersInput=getAddMembersInputArguments(cgPath,members);  callReplicationSvc(storage,ADD_MEMBERS,addMembersInput,new CIMArgument[5]);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void drawText(String text,int x,int y,Paint p){  mDrawableList.add(new CText(text,x,y,p));  invalidate();}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> tailSet(E start){  return tailSet(start,true);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    if (expression != null) {      expression.visit(v);    }    if (statements != null) {      for (      AstNode s : statements) {        s.visit(v);      }    }  }}  }
class C{  private static boolean supportsAVX2(TargetDescription target){  AMD64 arch=(AMD64)target.arch;  return arch.getFeatures().contains(CPUFeature.AVX2);}  }
class C{  public NamedThreadPoolExecutor(String poolName,int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> queue,ThreadFactory factory,RejectedExecutionHandler handler){  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,queue,new NamedThreadFactory(poolName,factory));  setPoolName(poolName);}  }
class C{  public Activity cancel(String key){  Activity a=get(key);  if (a != null)   a.cancel();  return a;}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void testComputeSignificanceDoesntAlterAverage() throws Exception {  TransferEntropyCalculatorMultiVariateKraskov teCalc=new TransferEntropyCalculatorMultiVariateKraskov();  String kraskov_K="4";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKraskov.PROP_KRASKOV_ALG_NUM,"2");  teCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testComputeSignificanceDoesntAlterAverage(teCalc,2,100,1);}  }
class C{  @Override public Object clone(){  Object clone=null;  try {    clone=super.clone();  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }  return clone;}  }
class C{  @Override public void start(){  paused=false;}  }
class C{  public void sendError(String message) throws IOException {  if (buffering && buffer.size() > 0) {    writeMessage(new ProtocolMessage(buffer));    buffer.clear();  }  writeMessage(new ProtocolNOK(message));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRANSACTION_ID;default :  return null;}}  }
class C{  private synchronized void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {synchronized (BeanContext.globalHierarchyLock) {    ois.defaultReadObject();    initialize();    bcsPreDeserializationHook(ois);    if (serializable > 0 && this.equals(getBeanContextPeer()))     readChildren(ois);    deserialize(ois,bcmListeners=new ArrayList(1));  }}  }
class C{  private static void fillTableWithRandomValues(ExampleTable exampleTable,ExampleSet baseSet,RandomGenerator random){  DataRowReader reader=exampleTable.getDataRowReader();  Attribute[] attributes=exampleTable.getAttributes();  while (reader.hasNext()) {    DataRow dataRow=reader.next();    for (int i=0; i < attributes.length; i++) {      if (attributes[i] != null) {        if (!attributes[i].isNominal()) {          double min=baseSet.getStatistics(attributes[i],Statistics.MINIMUM);          double max=baseSet.getStatistics(attributes[i],Statistics.MAXIMUM);          if (max > min) {            dataRow.set(attributes[i],random.nextDoubleInRange(min,max));          } else {            dataRow.set(attributes[i],random.nextDouble() * 2 - 1);          }        } else {          dataRow.set(attributes[i],0);        }      }    }  }}  }
class C{  private void checkString(String haystack,String needle){  assertTrue("Expected argument \"" + needle + "\", got \""+ haystack+ "\"",haystack.contains(needle));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private int handleCH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && contains(value,index,4,"CHAE")) {    result.append('K','X');    return index + 2;  } else   if (conditionCH0(value,index)) {    result.append('K');    return index + 2;  } else   if (conditionCH1(value,index)) {    result.append('K');    return index + 2;  } else {    if (index > 0) {      if (contains(value,0,2,"MC")) {        result.append('K');      } else {        result.append('X','K');      }    } else {      result.append('X');    }    return index + 2;  }}  }
class C{  private static String toNodeName(String field){  return field.toLowerCase().replace("_","-");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.758 -0500",hash_original_method="ED7A18359C5B9AABC2BE5A464505FE51",hash_generated_method="BD2B820681D76473966AF9335AF89156") public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  private JackrabbitAccessControlList installActions(AceBean aceBean,Principal principal,JackrabbitAccessControlList acl,Session session,AccessControlManager acMgr,AcInstallationHistoryPojo history) throws RepositoryException, SecurityException {  final Map<String,Boolean> actionMap=aceBean.getActionMap();  if (actionMap.isEmpty()) {    return acl;  }  final CqActions cqActions=new CqActions(session);  final Collection<String> inheritedAllows=cqActions.getAllowedActions(aceBean.getJcrPath(),Collections.singleton(principal));  cqActions.installActions(aceBean.getJcrPath(),principal,actionMap,inheritedAllows);  final JackrabbitAccessControlList newAcl=AccessControlUtils.getAccessControlList(session,aceBean.getJcrPath());  final RestrictionsHolder restrictions=getRestrictions(aceBean,session,acl);  if (!aceBean.getRestrictions().isEmpty()) {    addAdditionalRestriction(aceBean,acl,newAcl,restrictions);  }  return newAcl;}  }
class C{  private void computeCriterionResult(CriterionStatistics crs){  if (crs.getNbOfFailed() > 0) {    crs.setCriterionResult(TestSolution.FAILED);  } else   if (crs.getNbOfNmi() > 0) {    crs.setCriterionResult(TestSolution.NEED_MORE_INFO);  } else   if (crs.getNbOfNotTested() > 0) {    crs.setCriterionResult(TestSolution.NOT_TESTED);  } else   if (crs.getNbOfPassed() > 0) {    crs.setCriterionResult(TestSolution.PASSED);  } else   if (crs.getNbOfNa() > 0) {    crs.setCriterionResult(TestSolution.NOT_APPLICABLE);  } else {    crs.setCriterionResult(TestSolution.NEED_MORE_INFO);  }}  }
class C{  public Optional<ChangeEdit> byChange(ChangeControl ctl) throws AuthException, IOException {  if (!ctl.getUser().isIdentifiedUser()) {    throw new AuthException("Authentication required");  }  IdentifiedUser u=ctl.getUser().asIdentifiedUser();  Change change=ctl.getChange();  try (Repository repo=gitManager.openRepository(change.getProject())){    int n=change.currentPatchSetId().get();    String[] refNames=new String[n];    for (int i=n; i > 0; i--) {      refNames[i - 1]=RefNames.refsEdit(u.getAccountId(),change.getId(),new PatchSet.Id(change.getId(),i));    }    Ref ref=repo.getRefDatabase().firstExactRef(refNames);    if (ref == null) {      return Optional.empty();    }    try (RevWalk rw=new RevWalk(repo)){      RevCommit commit=rw.parseCommit(ref.getObjectId());      PatchSet basePs=getBasePatchSet(ctl,ref);      return Optional.of(new ChangeEdit(u,change,ref,commit,basePs));    }   } }  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  protected void fireTreeNodesChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesChanged(e);    }  }}  }
class C{  private static synchronized void createTimerStorageFactory(){  if (null == singleton) {    singleton=new TimerStorageFactory();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public void connectionErrorOccurred(ConnectionEvent ce){  PrintWriter externalLog=((FBManagedConnection)ce.getSource()).getLogWriter();  try {    ((FBManagedConnection)ce.getSource()).destroy();  } catch (  ResourceException e) {    if (externalLog != null)     externalLog.println("Exception closing unmanaged connection: " + e);  }}  }
class C{  public void testRotateMapViewInTrackDetailActivity(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  EndToEndTestUtils.startRecording();  for (int i=0; (System.currentTimeMillis() - startTime) < TEST_DURATION_IN_MILLISECONDS; i++) {    EndToEndTestUtils.sendGps(10,i * 10);    EndToEndTestUtils.rotateCurrentActivity();    Log.d(TAG,String.format("Totate %d times in %d minutes!",i,(System.currentTimeMillis() - startTime) / 1000 / 60));  }}  }
class C{  public static WebSocketFrame createCloseFrame(int closeCode,String reason){  return createCloseFrame().setCloseFramePayload(closeCode,reason);}  }
class C{  public PathSegment(int type,Point2D start,Point2D end,double[] coords){  this.type=type;  this.start=start;  this.end=end;  this.coords=new double[6];  System.arraycopy(coords,0,this.coords,0,6);}  }
class C{  public void delete(@Nonnull final String username){  final URI uri=getTarget(username);  LOGGER.debug("DELETE {}",uri);  try (Timer.Context context=deleteTimer.time()){    client.target(uri).request().delete();  } catch (  Exception e) {    LOGGER.warn("Unable to delete notifications for {}",username,e);  }}  }
class C{  public static void mergeNodes(TreeNode master,TreeNode slave){  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)master;  DefaultMutableTreeNode slaveNode=(DefaultMutableTreeNode)slave;  int masterCnt=masterNode.getChildCount();  while (slaveNode.getChildCount() > 0) {    DefaultMutableTreeNode slaveNodeChild=(DefaultMutableTreeNode)slaveNode.getFirstChild();    for (int m=0; m < masterCnt; m++) {      DefaultMutableTreeNode masterAtM=(DefaultMutableTreeNode)masterNode.getChildAt(m);      if (doCustomMerge(slaveNodeChild,masterAtM)) {        slaveNodeChild=null;        break;      }      if (MergeHelpUtilities.compareNames(masterAtM,slaveNodeChild) == 0) {        if (MergeHelpUtilities.haveEqualID(masterAtM,slaveNodeChild)) {          MergeHelpUtilities.mergeNodes(DEFAULT_MERGE_TYPE,masterAtM,slaveNodeChild);          slaveNodeChild.removeFromParent();          slaveNodeChild=null;          break;        }        MergeHelpUtilities.markNodes(masterAtM,slaveNodeChild);        masterNode.add(slaveNodeChild);        MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,slaveNodeChild);        slaveNodeChild=null;        break;      }    }    if (slaveNodeChild != null) {      masterNode.add(slaveNodeChild);      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,slaveNodeChild);    }  }  slaveNode.removeFromParent();  slaveNode=null;}  }
class C{  public Actor create() throws Exception {  return creator.create();}  }
class C{  public boolean isInitializerOfHoistedVariable(ExpressionStatement element){  return isTaggedAs(Tag.initializerOfHoistedVariable,element);}  }
class C{  public SsaRenamer(SsaMethod ssaMeth){  ropRegCount=ssaMeth.getRegCount();  this.ssaMeth=ssaMeth;  nextSsaReg=ropRegCount;  threshold=0;  startsForBlocks=new RegisterSpec[ssaMeth.getBlocks().size()][];  ssaRegToLocalItems=new ArrayList<LocalItem>();  if (DEBUG) {    ssaRegToRopReg=new IntList(ropRegCount);  }  RegisterSpec[] initialRegMapping=new RegisterSpec[ropRegCount];  for (int i=0; i < ropRegCount; i++) {    initialRegMapping[i]=RegisterSpec.make(i,Type.VOID);    if (DEBUG) {      ssaRegToRopReg.add(i);    }  }  startsForBlocks[ssaMeth.getEntryBlockIndex()]=initialRegMapping;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public static void assumeNoIbmJdk(){  assumeFalse(System.getProperty("java.vendor").contains("IBM"));}  }
class C{  protected void fireMenuDragMouseDragged(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseDragged(event);    }  }}  }
class C{  public CSVReader(Reader reader,char separator){  this(reader,separator,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public void delete(){  if (table.leadSelectionIndex == -1 || table.anchorSelectionIndex == -1) {    UIManager.getLookAndFeel().provideErrorFeedback(table);    return;  }  int start=table.getSmallestSelectionIndex();  int end=table.getLargestSelectionIndex();  int len=end - start + 1;  removeBytes(start,len);}  }
class C{  private void placeCartsAndTargets(){  StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("0_ados_forest_w2");  ChatCondition c=constructHayCartsNotYetCompletedCondition();  String cartDescription="You see a straw cart. Can you manage to push it to Karl's barn?";  Block cartOne=new Block(true,"hay_cart");  cartOne.setPosition(87,100);  cartOne.setDescription(cartDescription);  Block cartTwo=new Block(true,"hay_cart");  cartOne.setPosition(79,106);  cartTwo.setDescription(cartDescription);  ChatAction a=new MultipleActions(new IncrementQuestAction(QUEST_SLOT,1,-1),new ResetBlockChatAction(cartOne),new ResetBlockChatAction(cartTwo));  zone.add(cartOne);  zone.add(cartTwo);  BlockTarget targetOne=new BlockTarget();  targetOne.setPosition(64,75);  targetOne.setDescription("You see a plain point on the ground. Something heavy stood here before.");  targetOne.setCondition(c);  targetOne.setAction(a);  BlockTarget targetTwo=new BlockTarget();  targetTwo.setPosition(65,75);  targetTwo.setDescription("You see a plain point on the ground. Something heavy stood here before.");  targetTwo.setAction(a);  targetTwo.setCondition(c);  zone.add(targetOne);  zone.add(targetTwo);}  }
class C{  public static BufferedImage parseTga(final byte[] data){  final int width=(data[12] & 0xff) | (data[13] & 0xff) << 8;  final int height=(data[14] & 0xff) | (data[15] & 0xff) << 8;  final BufferedImage bufferedImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  int pos=18;  int x1=Integer.MAX_VALUE, y1=Integer.MAX_VALUE, x2=Integer.MIN_VALUE, y2=Integer.MIN_VALUE;  for (int y=0; y < height; y++)   for (int x=0; x < width; x++) {    final int rgb=(data[pos + 2] & 0xff) << 16 | (data[pos + 1] & 0xff) << 8 | (data[pos] & 0xff);    if (rgb != 0) {      bufferedImage.setRGB(x,y,rgb);      if (x < x1)       x1=x;      if (x > x2)       x2=x;      if (y < y1)       y1=y;      if (y > y2)       y2=y;    }    pos+=3;  }  return bufferedImage.getSubimage(x1,y1,x2 - x1 + 1,y2 - y1 + 1);}  }
class C{  public void reject(final Exchange exchange,final Message message){  if (message.getType() == Type.ACK || message.getType() == Type.RST) {    throw new IllegalArgumentException("Cannot reject a " + message.getType());  } else {    sendEmptyMessage(exchange,EmptyMessage.newRST(message));  }}  }
class C{  public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:54.247 -0500",hash_original_method="1F98B5A7DF8A473B65EF18728E66E33F",hash_generated_method="3342564FB32C3524D4DD0EC8938A96C6") public static String radioTechnologyToString(int rt){  String rtString;switch (rt) {case 0:    rtString="Unknown";  break;case 1:rtString="GPRS";break;case 2:rtString="EDGE";break;case 3:rtString="UMTS";break;case 4:rtString="CDMA-IS95A";break;case 5:rtString="CDMA-IS95B";break;case 6:rtString="1xRTT";break;case 7:rtString="EvDo-rev.0";break;case 8:rtString="EvDo-rev.A";break;case 9:rtString="HSDPA";break;case 10:rtString="HSUPA";break;case 11:rtString="HSPA";break;case 12:rtString="EvDo-rev.B";break;case 13:rtString="eHRPD";break;case 14:rtString="LTE";break;case 15:rtString="HSPAP";break;default :rtString="Unexpected";Log.w(LOG_TAG,"Unexpected radioTechnology=" + rt);break;}return rtString + ":" + rt;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type_1: ");  result.append(type_1);  result.append(", code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  private void unlockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);    setAutoFlash(mPreviewRequestBuilder);    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  public String handleException(AbstractExplorerTab tab,String msg,Throwable t){  String result;  result=ExceptionUtils.handleException(tab,msg,t,false);  log(null,result);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.614 -0500",hash_original_method="5FB2AC2DAB8927FC79F4C27D714B8493",hash_generated_method="B6B7B84B337EEC41B6A7400A1AB00FA3") public static int prefixLengthToNetmaskInt(int prefixLength) throws IllegalArgumentException {  if (prefixLength < 0 || prefixLength > 32) {    throw new IllegalArgumentException("Invalid prefix length (0 <= prefix <= 32)");  }  int value=0xffffffff << (32 - prefixLength);  return Integer.reverseBytes(value);}  }
class C{  public static synchronized void cancel(TimerTask task){  if (task == null) {    return;  }  task.cancel();  usageCount.decrementAndGet();  if (usageCount.get() == 0) {    timer.cancel();    timer=null;  }}  }
class C{  public DataSizeAction(String group,String field,int bins){  this(group,field,bins,Constants.LINEAR_SCALE);}  }
class C{  public static boolean populateContract(Contract contractDetails,Contract transientContract) throws ParseException {  boolean changed=false;  if (CoreUtils.nullSafeComparator(transientContract.getSymbol(),contractDetails.getSymbol()) == 0) {    if (CoreUtils.nullSafeComparator(transientContract.getLocalSymbol(),contractDetails.getLocalSymbol()) != 0) {      transientContract.setLocalSymbol(contractDetails.getLocalSymbol());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getIdContractIB(),contractDetails.getIdContractIB()) != 0) {      transientContract.setIdContractIB(contractDetails.getIdContractIB());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getPrimaryExchange(),contractDetails.getPrimaryExchange()) != 0) {      transientContract.setPrimaryExchange(contractDetails.getPrimaryExchange());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getExchange(),contractDetails.getExchange()) != 0) {      transientContract.setExchange(contractDetails.getExchange());      changed=true;    }    if (null != contractDetails.getExpiry()) {      if (CoreUtils.nullSafeComparator(transientContract.getExpiry(),contractDetails.getExpiry()) != 0) {        transientContract.setExpiry(contractDetails.getExpiry());        changed=true;      }    }    if (CoreUtils.nullSafeComparator(transientContract.getSecIdType(),contractDetails.getSecIdType()) != 0) {      transientContract.setSecIdType(contractDetails.getSecIdType());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getLongName(),contractDetails.getLongName()) != 0) {      transientContract.setLongName(contractDetails.getLongName());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getCurrency(),contractDetails.getCurrency()) != 0) {      transientContract.setCurrency(contractDetails.getCurrency());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getCategory(),contractDetails.getCategory()) != 0) {      transientContract.setCategory(contractDetails.getCategory());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getIndustry(),contractDetails.getIndustry()) != 0) {      transientContract.setIndustry(contractDetails.getIndustry());      changed=true;    }    Money minTick=new Money(contractDetails.getMinTick());    if (CoreUtils.nullSafeComparator(minTick,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getMinTick(),minTick.getBigDecimalValue()) != 0) {      transientContract.setMinTick(minTick.getBigDecimalValue());      changed=true;    }    Money priceMagnifier=new Money(contractDetails.getPriceMagnifier());    if (CoreUtils.nullSafeComparator(priceMagnifier,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getPriceMagnifier(),priceMagnifier.getBigDecimalValue()) != 0) {      transientContract.setPriceMagnifier(priceMagnifier.getBigDecimalValue());      changed=true;    }    Money multiplier=new Money(contractDetails.getPriceMultiplier());    if (CoreUtils.nullSafeComparator(multiplier,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getPriceMultiplier(),multiplier.getBigDecimalValue()) != 0) {      transientContract.setPriceMultiplier(multiplier.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getSubCategory(),contractDetails.getSubCategory()) != 0) {      transientContract.setSubCategory(contractDetails.getSubCategory());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getTradingClass(),contractDetails.getTradingClass()) != 0) {      transientContract.setTradingClass(contractDetails.getTradingClass());      changed=true;    }  }  return changed;}  }
class C{  public void test_webapp_structure_status() throws Exception {  doGET(m_serviceURL + "/status");}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int r=0; r < n; r++) {    for (int c=0; c < n; c++) {      if (board[r][c]) {        sb.append("Q");      } else {        sb.append(".");      }    }    sb.append("\n");  }  return sb.toString();}  }
class C{  public final AC grow(){  return grow(100f,curIx);}  }
class C{  public StandardJavaElementContentProvider(){  this(false);}  }
class C{  public Property era(){  return new Property(this,getChronology().era());}  }
class C{  public ArgumentParser(final String[] args){  this(args,false);}  }
class C{  protected void showHistory(int record_id){  log.info("");  int M_Product_ID=record_id;  if (M_Product_ID <= 0)   return;  int M_Warehouse_ID=((Integer)fWarehouse_ID.getValue()).intValue();  int M_AttributeSetInstance_ID=m_M_AttributeSetInstance_ID;  if (m_M_AttributeSetInstance_ID < 0)   M_AttributeSetInstance_ID=0;  InvoiceHistory ih=new InvoiceHistory(this,0,M_Product_ID,M_Warehouse_ID,M_AttributeSetInstance_ID);  ih.setVisible(true);  ih=null;}  }
class C{  void xrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nyx=(float)(yx * ct + zx * st);  float Nyy=(float)(yy * ct + zy * st);  float Nyz=(float)(yz * ct + zz * st);  float Nyo=(float)(yo * ct + zo * st);  float Nzx=(float)(zx * ct - yx * st);  float Nzy=(float)(zy * ct - yy * st);  float Nzz=(float)(zz * ct - yz * st);  float Nzo=(float)(zo * ct - yo * st);  yo=Nyo;  yx=Nyx;  yy=Nyy;  yz=Nyz;  zo=Nzo;  zx=Nzx;  zy=Nzy;  zz=Nzz;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener e){  getPropertyChangeSupport().addPropertyChangeListener(e);}  }
class C{  public static String toCamelCase(String input,boolean firstCharUppercase,char separator){  int length=input.length();  StringBuilder sb=new StringBuilder(length);  boolean upperCase=firstCharUppercase;  for (int i=0; i < length; i++) {    char ch=input.charAt(i);    if (ch == separator) {      upperCase=true;    } else     if (upperCase) {      sb.append(Character.toUpperCase(ch));      upperCase=false;    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  private static PipelineOp addExistsSubquery(PipelineOp left,final SubqueryRoot subqueryRoot,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final FilterExistsModeEnum filterExistsMode=subqueryRoot.getFilterExistsMode();switch (filterExistsMode) {case VectoredSubPlan:    return addExistsSubqueryFast(left,subqueryRoot,doneSet,ctx);case SubQueryLimitOne:  return addExistsSubquerySubquery(left,subqueryRoot,doneSet,ctx);default :throw new UnsupportedOperationException(QueryHints.FILTER_EXISTS + "=" + filterExistsMode);}}  }
class C{  public final void joinChannel(String channel){  this.sendRawLine("JOIN " + channel);}  }
class C{  public CGPoint inverseTransform(CGPoint src,CGPoint dst) throws NoninvertibleTransformException {  double det=getDeterminant();  if (Math.abs(det) < ZERO) {    throw new NoninvertibleTransformException("Determinant is zero");  }  if (dst == null) {    dst=CGPoint.zero();  }  double x=src.x - m02;  double y=src.y - m12;  dst.x=(float)((x * m11 - y * m01) / det);  dst.y=(float)((y * m00 - x * m10) / det);  return dst;}  }
class C{  public void test_ticket_1202n() throws Exception {  new TestHelper("ticket-1202-additional2","ticket-1202-additional2.rq","ticket-1202-additional2.ttl","ticket-1202-additional2.srx").runTest();}  }
class C{  synchronized V remove(long key,int hash){  int index=hash & mask;  Entry<V> e=entries[index];  if (e == null) {    return null;  }  V old;  if (e.key == key) {    old=e.value;    entries[index]=e.mapNext;  } else {    Entry<V> last;    do {      last=e;      e=e.mapNext;      if (e == null) {        return null;      }    } while (e.key != key);    old=e.value;    last.mapNext=e.mapNext;  }  mapSize--;  usedMemory-=e.memory;  if (e.stackNext != null) {    removeFromStack(e);  }  if (e.isHot()) {    e=queue.queueNext;    if (e != queue) {      removeFromQueue(e);      if (e.stackNext == null) {        addToStackBottom(e);      }    }  } else {    removeFromQueue(e);  }  pruneStack();  return old;}  }
class C{  public final void writeLong(long v) throws IOException {  write((int)(v >>> 56) & 0xFF);  write((int)(v >>> 48) & 0xFF);  write((int)(v >>> 40) & 0xFF);  write((int)(v >>> 32) & 0xFF);  write((int)(v >>> 24) & 0xFF);  write((int)(v >>> 16) & 0xFF);  write((int)(v >>> 8) & 0xFF);  write((int)(v) & 0xFF);}  }
class C{  public boolean isFederatedNamespace(){  return this.isFederatedNamespace;}  }
class C{  public static NameMatcher<JobKey> jobNameEquals(String compareTo){  return NameMatcher.nameEquals(compareTo);}  }
class C{  public static byte[] readStream(InputStream stream){  ByteArrayOutputStream rawBuffer=new ByteArrayOutputStream();  try {    int nRead;    byte[] data=new byte[1024 * 16];    while ((nRead=stream.read(data,0,data.length)) != -1) {      rawBuffer.write(data,0,nRead);    }    rawBuffer.flush();    rawBuffer.close();  } catch (  IOException e) {    log.warning("Error reading audio stream: " + e);  }  return rawBuffer.toByteArray();}  }
class C{  public static SpawnEggRefl fromItemStack(ItemStack item) throws Exception {  if (item == null)   throw new IllegalArgumentException("Item cannot be null");  if (item.getType() != Material.MONSTER_EGG)   throw new IllegalArgumentException("Item is not a monster egg");  Class<?> NMSItemStackClass=ReflUtil.getNMSClass("ItemStack");  Class<?> craftItemStackClass=ReflUtil.getOBCClass("inventory.CraftItemStack");  Method asNMSCopyMethod=ReflUtil.getMethodCached(craftItemStackClass,"asNMSCopy",ItemStack.class);  Object stack=asNMSCopyMethod.invoke(null,item);  Object tagCompound=ReflUtil.getMethodCached(NMSItemStackClass,"getTag").invoke(stack);  if (tagCompound != null) {    Method tagGetCompound=ReflUtil.getMethodCached(tagCompound.getClass(),"getCompound",String.class);    Object entityTag=tagGetCompound.invoke(tagCompound,"EntityTag");    Method tagGetString=ReflUtil.getMethodCached(entityTag.getClass(),"getString",String.class);    @SuppressWarnings("deprecation") EntityType type=EntityType.fromName((String)tagGetString.invoke(entityTag,"id"));    if (type != null) {      return new SpawnEggRefl(type);    } else {      throw new IllegalArgumentException("Unable to parse type from item");    }  } else {    throw new IllegalArgumentException("Item is lacking tag compound");  }}  }
class C{  private void createHeading(String heading){  getSection().setText(heading);}  }
class C{  private void clearComposeState(){  m_composeState=null;}  }
class C{  public void removeFromTags(String removeTag){  tags.remove(removeTag);  firePropertyChange(TAG,null,removeTag);  firePropertyChange(TAGS_AS_STRING,null,removeTag);}  }
class C{  public List<Object> parse(Insert insert,QueryState state) throws SQLException {  if (!insert.getColumns().isPresent())   throw new SQLException("Unable to insert data without column references");  if (insert.getQuery().getQueryBody() == null)   throw new SQLException("Unable to insert data without any values");  if (!(insert.getQuery().getQueryBody() instanceof Values))   throw new SQLException("Unable to insert data from a query, use ... VALUES (...)");  List<String> fields=insert.getColumns().get();  List<Object> values=insert.getQuery().getQueryBody().accept(this,state);  if (state.hasException())   throw state.getException();  for (  String field : fields)   state.getHeading().add(new Column(field));  return values;}  }
class C{  public void awakeFromCheckpoint(){  AsynchronousSteppable[] b=asynchronousRegistry();  final int len=b.length;  for (int x=0; x < len; x++)   b[x].resume(true);}  }
class C{  protected void initBatchBuffer(){  try {    if (!isIncremental()) {      m_BatchBuffer=m_Loader.getDataSet();    } else {      m_BatchBuffer=null;    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Iterator tuples(IntIterator rows){  return m_tuples.iterator(rows);}  }
class C{  public void reset(){  super.reset();  m_SumLeaves=m_SumSqLeaves=m_LeafCount=0;  m_MinLeaves=Integer.MAX_VALUE;  m_MaxLeaves=Integer.MIN_VALUE;  m_SumIntNodes=m_SumSqIntNodes=m_IntNodeCount=0;  m_MinIntNodes=Integer.MAX_VALUE;  m_MaxIntNodes=Integer.MIN_VALUE;}  }
class C{  public static void copy(final String source,final String destination){  BufferedInputStream from=null;  BufferedOutputStream to=null;  try {    from=new BufferedInputStream(new FileInputStream(source));    to=new BufferedOutputStream(new FileOutputStream(destination));  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " copying file");  }  copy(from,to);}  }
class C{  public static int putInt(byte[] bytes,int offset,int val){  if (bytes.length - offset < SIZEOF_INT) {    throw new IllegalArgumentException("Not enough room to put an int at" + " offset " + offset + " in a "+ bytes.length+ " byte array");  }  for (int i=offset + 3; i > offset; i--) {    bytes[i]=(byte)val;    val>>>=8;  }  bytes[offset]=(byte)val;  return offset + SIZEOF_INT;}  }
class C{  public static double length2(double x1,double y1,double x2,double y2){  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);}  }
class C{  private String readAttributeName(boolean returnLowerCase){  skipWhitespace();  int c=find(ATTRIBUTE_NAME_TERMINATORS);  String forSubstring=returnLowerCase ? inputLowerCase : input;  String result=pos < c ? forSubstring.substring(pos,c) : null;  pos=c;  return result;}  }
class C{  @Override public <T extends MediaEntity>void export(List<T> tvShowsToExport,Path exportDir) throws Exception {  LOGGER.info("preparing tv show export; using " + properties.getProperty("name"));  engine.registerNamedRenderer(new NamedDateRenderer());  engine.registerNamedRenderer(new TvShowFilenameRenderer());  engine.registerNamedRenderer(new ArtworkCopyRenderer(exportDir));  if (!Files.exists(exportDir)) {    try {      Files.createDirectories(exportDir);    } catch (    Exception e) {      throw new Exception("error creating export directory");    }  }  Path listExportFile=null;  if (fileExtension.equalsIgnoreCase("html")) {    listExportFile=exportDir.resolve("index.html");  }  if (fileExtension.equalsIgnoreCase("xml")) {    listExportFile=exportDir.resolve("tvshows.xml");  }  if (fileExtension.equalsIgnoreCase("csv")) {    listExportFile=exportDir.resolve("tvshows.csv");  }  if (listExportFile == null) {    throw new Exception("error creating tv show list file");  }  String episodeTemplateFile=properties.getProperty("episode");  String episodeTemplate="";  if (StringUtils.isNotBlank(episodeTemplateFile)) {    episodeTemplate=Utils.readFileToString(templateDir.resolve(episodeTemplateFile));  }  LOGGER.info("generating tv show list");  Utils.deleteFileSafely(listExportFile);  Map<String,Object> root=new HashMap<>();  root.put("tvShows",new ArrayList<>(tvShowsToExport));  String output=engine.transform(listTemplate,root);  Utils.writeStringToFile(listExportFile,output);  LOGGER.info("movie list generated: " + listExportFile);  if (StringUtils.isNotBlank(detailTemplate)) {    for (    MediaEntity me : tvShowsToExport) {      TvShow show=(TvShow)me;      Path showDir=exportDir.resolve(getFilename(show));      if (Files.isDirectory(showDir)) {        Utils.deleteDirectoryRecursive(showDir);      }      Files.createDirectory(showDir);      Path detailsExportFile=showDir.resolve("tvshow." + fileExtension);      root=new HashMap<>();      root.put("tvShow",show);      output=engine.transform(detailTemplate,root);      Utils.writeStringToFile(detailsExportFile,output);      if (StringUtils.isNotBlank(episodeTemplate)) {        for (        TvShowEpisode episode : show.getEpisodes()) {          List<MediaFile> mfs=episode.getMediaFiles(MediaFileType.VIDEO);          if (!mfs.isEmpty()) {            Path seasonDir=showDir.resolve(TvShowRenamer.generateSeasonDir("",episode));            if (!Files.isDirectory(seasonDir)) {              Files.createDirectory(seasonDir);            }            String episodeFileName=getFilename(episode) + "." + fileExtension;            Path episodeExportFile=seasonDir.resolve(episodeFileName);            root=new HashMap<>();            root.put("episode",episode);            output=engine.transform(episodeTemplate,root);            Utils.writeStringToFile(episodeExportFile,output);          }        }      }    }  }  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(templateDir)){    for (    Path path : directoryStream) {      if (Utils.isRegularFile(path)) {        if (path.getFileName().toString().endsWith(".jmte") || path.getFileName().toString().endsWith("template.conf")) {          continue;        }        Files.copy(path,exportDir.resolve(path.getFileName()),StandardCopyOption.REPLACE_EXISTING);      } else       if (Files.isDirectory(path)) {        Utils.copyDirectoryRecursive(path,exportDir.resolve(path.getFileName()));      }    }  } catch (  IOException ex) {    LOGGER.error("could not copy resources: ",ex);  }}  }
class C{  public OpenForReadResult openForRead(Uri uri) throws IOException {  return openForRead(uri,false);}  }
class C{  public static int findAAvailablePort(int start,int end){  int finalPort=-1;  for (int i=0; i < 20; ++i) {    int port=start + (int)(Math.random() * (end - start));    if (available(port)) {      finalPort=port;      break;    }  }  return finalPort;}  }
class C{  private float[] applyScaleXEffect(float offset,float pointerY){  float curveFactor=0;  curveFactor=offset;  for (int i=0; i < 6; i++)   for (int j=0; j < 51; j++) {    if (mDirection == TouchDisableView.DIRECTION_RIGHT) {      meshVerts[i * 102 + 2 * j]=meshVerts[i * 102 + 2 * j] * (0.4f + 0.6f * offset * offset* offset* offset);      meshVerts[i * 102 + 2 * j]=meshVerts[i * 102 + 2 * j] * (1 + (1 - curveFactor) * (meshVerts[i * 102 + 2 * j + 1] - pointerY) * (meshVerts[i * 102 + 2 * j + 1] - pointerY) / 5000 / width / curveFactor);    } else {      meshVerts[i * 102 + 2 * j]=width - (width - meshVerts[i * 102 + 2 * j]) * (0.4f + 0.6f * offset * offset* offset* offset);      meshVerts[i * 102 + 2 * j]=width - (width - meshVerts[i * 102 + 2 * j]) * (1 + (1 - curveFactor) * (meshVerts[i * 102 + 2 * j + 1] - pointerY) * (meshVerts[i * 102 + 2 * j + 1] - pointerY) / 5000 / width / curveFactor);    }  }  return meshVerts;}  }
class C{  public TourGuide motionType(MotionType motionType){  mMotionType=motionType;  return this;}  }
class C{  public static String xmlNode(String name,String attributes,String content,boolean indent){  String start=attributes == null ? name : name + attributes;  if (content == null) {    return "<" + start + "/>\n";  }  if (indent && content.indexOf('\n') >= 0) {    content="\n" + indent(content);  }  return "<" + start + ">"+ content+ "</"+ name+ ">\n";}  }
class C{  public static TestAssertion assertionFromValues(final int ordinal,final RuleId ruleId,final Status status,final String message,final Location location){  return TestAssertionImpl.fromValues(ordinal,ruleId,status,message,location);}  }
class C{  public boolean isRemoteSourceSupported(){  return remoteSourceSupported;}  }
class C{  public void compress(byte[] dest,byte[] src,int destoffs,int srcoffs,int len){  for (int i=0; i < len; i++) {    int d=0;    for (int j=0; j < 8; j++) {      if (srcoffs >= src.length)       return;      int inlevel=src[srcoffs++];      boolean curbit=(inlevel > level || (inlevel == level && level == 127));      d=(curbit ? (d >> 1) + 128 : d >> 1);      ctx_update(curbit);    }    dest[destoffs++]=(byte)d;  }}  }
class C{  public static void updateSingleNodeDebuggerHighlighting(final ZyGraph graph,final UnrelocatedAddress address,final NaviNode node){  Preconditions.checkNotNull(graph,"IE01192: Graph argument can not be null");  Preconditions.checkNotNull(address,"IE01216: Address argument can not be null");  final INaviViewNode rawNode=node.getRawNode();  if (rawNode instanceof ICodeNode) {    final INaviCodeNode codeNode=(INaviCodeNode)rawNode;    updateDebuggerHighlighting(graph,address,node,codeNode);  } else   if (rawNode instanceof INaviFunctionNode) {    final INaviFunctionNode functionNode=(INaviFunctionNode)rawNode;    updateDebuggerHighlighting(address,node,functionNode);  }}  }
class C{  public GPathResult parents(){  throw new GroovyRuntimeException("parents() not implemented yet");}  }
class C{  public void close(){}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_DATA2\"";  db.execSQL(sql);}  }
class C{  public Builder backgroundColor(int backgroundColor){  this.backgroundColor=backgroundColor;  return this;}  }
class C{  public static Map<String,Object> fedexShipRequest(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String shipmentId=(String)context.get("shipmentId");  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");  String resource=(String)shipmentGatewayConfig.get("configProps");  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexGatewayNotAvailable",locale));  }  String templateLocation=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"templateShipment",resource,"shipment.fedex.template.ship.location");  if (UtilValidate.isEmpty(templateLocation)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateLocationNotFound",UtilMisc.toMap("templateLocation",templateLocation),locale));  }  String accountNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessAccountNbr",resource,"shipment.fedex.access.accountNbr");  if (UtilValidate.isEmpty(accountNumber)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexAccountNumberNotFound",locale));  }  String meterNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessMeterNumber",resource,"shipment.fedex.access.meterNumber");  if (UtilValidate.isEmpty(meterNumber)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMeterNumberNotFound",UtilMisc.toMap("meterNumber",meterNumber),locale));  }  String weightUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.uom",delegator);  if (UtilValidate.isEmpty(weightUomId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotFound",locale));  } else   if (!("WT_lb".equals(weightUomId) || "WT_kg".equals(weightUomId))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotValid",locale));  }  String dimensionsUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.dimension.uom",delegator);  if (UtilValidate.isEmpty(dimensionsUomId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotFound",locale));  } else   if (!("LEN_in".equals(dimensionsUomId) || "LEN_cm".equals(dimensionsUomId))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotValid",locale));  }  String labelImageType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"labelImageType",resource,"shipment.fedex.labelImageType");  if (UtilValidate.isEmpty(labelImageType)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotFound",locale));  } else   if (!("PDF".equals(labelImageType) || "PNG".equals(labelImageType))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotValid",locale));  }  String dropoffType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultDropoffType",resource,"shipment.fedex.default.dropoffType");  if (UtilValidate.isEmpty(dropoffType)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexDropoffTypeNotFound",locale));  }  try {    Map<String,Object> shipRequestContext=FastMap.newInstance();    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();    if (UtilValidate.isEmpty(shipment)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + shipmentId);    }    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).queryOne();    if (UtilValidate.isEmpty(shipmentRouteSegment)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");    if (!"FEDEX".equals(carrierPartyId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));    }    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentStatusNotStarted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));    }    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");    GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("shipmentMethodTypeId",shipmentMethodTypeId,"partyId","FEDEX","roleTypeId","CARRIER").queryOne();    if (UtilValidate.isEmpty(carrierShipmentMethod)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentCarrierShipmentMethodNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"carrierPartyId",carrierPartyId,"shipmentMethodTypeId",shipmentMethodTypeId),locale));    }    if (UtilValidate.isEmpty(carrierShipmentMethod.getString("carrierServiceCode"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNoCarrieServiceCode",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),locale));    }    String service=carrierShipmentMethod.getString("carrierServiceCode");    boolean isGroundService=service.equals("FEDEXGROUND") || service.equals("GROUNDHOMEDELIVERY");    String carrierCode=isGroundService ? "FDXG" : "FDXE";    String currencyCode=null;    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {      currencyCode=shipmentRouteSegment.getString("currencyUomId");    } else     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {      currencyCode=shipment.getString("currencyUomId");    } else {      currencyCode=EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);    }    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress",false);    if (UtilValidate.isEmpty(originPostalAddress)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else     if (UtilValidate.isEmpty(originPostalAddress.getString("address1")) || UtilValidate.isEmpty(originPostalAddress.getString("city")) || UtilValidate.isEmpty(originPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(originPostalAddress.getString("countryGeoId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotComplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo",false);    if (UtilValidate.isEmpty(originCountryGeo)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String originAddressCountryCode=originCountryGeo.getString("geoCode");    String originAddressStateOrProvinceCode=null;    if (originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US")) {      if (UtilValidate.isEmpty(originPostalAddress.getString("stateProvinceGeoId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginStateProvinceGeoIdRequired",UtilMisc.toMap("contactMechId",originPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",originPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();      originAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");    }    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber",false);    if (UtilValidate.isEmpty(originTelecomNumber)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String originContactPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !(originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US"))) {      originContactPhoneNumber=originTelecomNumber.getString("countryCode") + originContactPhoneNumber;    }    originContactPhoneNumber=originContactPhoneNumber.replaceAll("[^+\\d]","");    GenericValue partyFrom=null;    GenericValue originFacility=shipment.getRelatedOne("OriginFacility",false);    if (UtilValidate.isEmpty(originFacility)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOriginFacilityRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else {      partyFrom=originFacility.getRelatedOne("OwnerParty",false);      if (UtilValidate.isEmpty(partyFrom)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOwnerPartyRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"facilityId",originFacility.getString("facilityId")),locale));      }    }    String originContactKey="PERSON".equals(partyFrom.getString("partyTypeId")) ? "OriginContactPersonName" : "OriginContactCompanyName";    String originContactName=PartyHelper.getPartyName(partyFrom,false);    if (UtilValidate.isEmpty(originContactName)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyFromHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue destinationPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress",false);    if (UtilValidate.isEmpty(destinationPostalAddress)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else     if (UtilValidate.isEmpty(destinationPostalAddress.getString("address1")) || UtilValidate.isEmpty(destinationPostalAddress.getString("city")) || UtilValidate.isEmpty(destinationPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(destinationPostalAddress.getString("countryGeoId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressIncomplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue destinationCountryGeo=destinationPostalAddress.getRelatedOne("CountryGeo",false);    if (UtilValidate.isEmpty(destinationCountryGeo)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String destinationAddressCountryCode=destinationCountryGeo.getString("geoCode");    String destinationAddressStateOrProvinceCode=null;    if (destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US")) {      if (UtilValidate.isEmpty(destinationPostalAddress.getString("stateProvinceGeoId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestStateProvinceGeoIdNotFound",UtilMisc.toMap("contactMechId",destinationPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",destinationPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();      destinationAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");    }    GenericValue destinationTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber",false);    if (UtilValidate.isEmpty(destinationTelecomNumber)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String destinationContactPhoneNumber=destinationTelecomNumber.getString("areaCode") + destinationTelecomNumber.getString("contactNumber");    if (UtilValidate.isNotEmpty(destinationTelecomNumber.getString("countryCode")) && !(destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US"))) {      destinationContactPhoneNumber=destinationTelecomNumber.getString("countryCode") + destinationContactPhoneNumber;    }    destinationContactPhoneNumber=destinationContactPhoneNumber.replaceAll("[^+\\d]","");    String destinationPartyId=shipment.getString("partyIdTo");    if (UtilValidate.isEmpty(destinationPartyId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue partyTo=EntityQuery.use(delegator).from("Party").where("partyId",destinationPartyId).queryOne();    String destinationContactKey="PERSON".equals(partyTo.getString("partyTypeId")) ? "DestinationContactPersonName" : "DestinationContactCompanyName";    String destinationContactName=PartyHelper.getPartyName(partyTo,false);    if (UtilValidate.isEmpty(destinationContactName)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String homeDeliveryType=null;    Timestamp homeDeliveryDate=null;    if ("GROUNDHOMEDELIVERY".equals(service)) {      homeDeliveryType=shipmentRouteSegment.getString("homeDeliveryType");      if (UtilValidate.isNotEmpty(homeDeliveryType)) {        if (!(homeDeliveryType.equals("DATECERTAIN") || homeDeliveryType.equals("EVENING") || homeDeliveryType.equals("APPOINTMENT"))) {          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryTypeInvalid",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));        }      }      homeDeliveryDate=shipmentRouteSegment.getTimestamp("homeDeliveryDate");      if (UtilValidate.isEmpty(homeDeliveryDate)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      } else       if (homeDeliveryDate.before(UtilDateTime.nowTimestamp())) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateBeforeCurrentDate",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }    }    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"),false);    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    if (shipmentPackageRouteSegs.size() != 1) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMultiplePackagesNotSupported",locale));    }    shipRequestContext.put("AccountNumber",accountNumber);    shipRequestContext.put("MeterNumber",meterNumber);    shipRequestContext.put("CarrierCode",carrierCode);    shipRequestContext.put("ShipDate",UtilDateTime.nowTimestamp());    shipRequestContext.put("ShipTime",UtilDateTime.nowTimestamp());    shipRequestContext.put("DropoffType",dropoffType);    shipRequestContext.put("Service",service);    shipRequestContext.put("WeightUnits",weightUomId.equals("WT_kg") ? "KGS" : "LBS");    shipRequestContext.put("CurrencyCode",currencyCode);    shipRequestContext.put("PayorType","SENDER");    shipRequestContext.put(originContactKey,originContactName);    shipRequestContext.put("OriginContactPhoneNumber",originContactPhoneNumber);    shipRequestContext.put("OriginAddressLine1",originPostalAddress.getString("address1"));    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {      shipRequestContext.put("OriginAddressLine2",originPostalAddress.getString("address2"));    }    shipRequestContext.put("OriginAddressCity",originPostalAddress.getString("city"));    if (UtilValidate.isNotEmpty(originAddressStateOrProvinceCode)) {      shipRequestContext.put("OriginAddressStateOrProvinceCode",originAddressStateOrProvinceCode);    }    shipRequestContext.put("OriginAddressPostalCode",originPostalAddress.getString("postalCode"));    shipRequestContext.put("OriginAddressCountryCode",originAddressCountryCode);    shipRequestContext.put(destinationContactKey,destinationContactName);    shipRequestContext.put("DestinationContactPhoneNumber",destinationContactPhoneNumber);    shipRequestContext.put("DestinationAddressLine1",destinationPostalAddress.getString("address1"));    if (UtilValidate.isNotEmpty(destinationPostalAddress.getString("address2"))) {      shipRequestContext.put("DestinationAddressLine2",destinationPostalAddress.getString("address2"));    }    shipRequestContext.put("DestinationAddressCity",destinationPostalAddress.getString("city"));    if (UtilValidate.isNotEmpty(destinationAddressStateOrProvinceCode)) {      shipRequestContext.put("DestinationAddressStateOrProvinceCode",destinationAddressStateOrProvinceCode);    }    shipRequestContext.put("DestinationAddressPostalCode",destinationPostalAddress.getString("postalCode"));    shipRequestContext.put("DestinationAddressCountryCode",destinationAddressCountryCode);    shipRequestContext.put("LabelType","2DCOMMON");    shipRequestContext.put("LabelImageType",labelImageType);    if (UtilValidate.isNotEmpty(homeDeliveryType)) {      shipRequestContext.put("HomeDeliveryType",homeDeliveryType);    }    if (homeDeliveryDate != null) {      shipRequestContext.put("HomeDeliveryDate",homeDeliveryDate);    }    boolean hasBillingWeight=false;    BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal("billingWeight");    String billingWeightUomId=shipmentRouteSegment.getString("billingWeightUomId");    if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {      hasBillingWeight=true;      if (billingWeightUomId == null) {        Debug.logWarning("Shipment Route Segment missing billingWeightUomId in shipmentId " + shipmentId + ", assuming default shipment.fedex.weightUomId of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);        billingWeightUomId=weightUomId;      }      if (!billingWeightUomId.equals(weightUomId)) {        Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",billingWeightUomId,"uomIdTo",weightUomId,"originalValue",billingWeight));        if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {          Debug.logWarning("Unable to convert billing weights for shipmentId " + shipmentId,module);          hasBillingWeight=false;        } else {          billingWeight=(BigDecimal)results.get("convertedValue");        }      }    }    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage",false);      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType",false);      String packaging=null;      if (UtilValidate.isEmpty(shipmentBoxType)) {        packaging=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultPackagingType",resource,"shipment.fedex.default.packagingType");        if (UtilValidate.isEmpty(packaging)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeNotConfigured",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));        }        Debug.logWarning("Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has no packaging type set - defaulting to "+ packaging,module);      } else {        packaging=shipmentBoxType.getString("shipmentBoxTypeId");      }      GenericValue carrierShipmentBoxType=EntityQuery.use(delegator).from("CarrierShipmentBoxType").where("partyId","FEDEX","shipmentBoxTypeId",packaging).queryOne();      if (UtilValidate.isEmpty(carrierShipmentBoxType)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeInvalid",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));      } else       if (UtilValidate.isEmpty(carrierShipmentBoxType.getString("packagingTypeCode"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeMissing",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));      }      packaging=carrierShipmentBoxType.getString("packagingTypeCode");      BigDecimal dimensionsLength=null;      BigDecimal dimensionsWidth=null;      BigDecimal dimensionsHeight=null;      if (shipmentBoxType != null) {        dimensionsLength=shipmentBoxType.getBigDecimal("boxLength");        dimensionsWidth=shipmentBoxType.getBigDecimal("boxWidth");        dimensionsHeight=shipmentBoxType.getBigDecimal("boxHeight");        String boxDimensionsUomId=null;        GenericValue boxDimensionsUom=shipmentBoxType.getRelatedOne("DimensionUom",false);        if (!UtilValidate.isEmpty(boxDimensionsUom)) {          boxDimensionsUomId=boxDimensionsUom.getString("uomId");        } else {          Debug.logWarning("Packaging type for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId+ " is missing dimensionUomId, assuming default shipment.default.dimension.uom of "+ dimensionsUomId+ " from "+ shipmentPropertiesFile,module);          boxDimensionsUomId=dimensionsUomId;        }        if (dimensionsLength != null && dimensionsLength.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsLength));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert length for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsLength=null;            } else {              dimensionsLength=(BigDecimal)results.get("convertedValue");            }          }        }        if (dimensionsWidth != null && dimensionsWidth.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsWidth));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert width for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsWidth=null;            } else {              dimensionsWidth=(BigDecimal)results.get("convertedValue");            }          }        }        if (dimensionsHeight != null && dimensionsHeight.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsHeight));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert height for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsHeight=null;            } else {              dimensionsHeight=(BigDecimal)results.get("convertedValue");            }          }        }      }      BigDecimal packageWeight=null;      if (!hasBillingWeight) {        if (UtilValidate.isNotEmpty(shipmentPackage.getString("weight"))) {          packageWeight=shipmentPackage.getBigDecimal("weight");        } else {          try {            packageWeight=new BigDecimal(EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.value",delegator));          } catch (          NumberFormatException ne) {            Debug.logWarning("Default shippable weight not configured (shipment.default.weight.value), assuming 1.0" + weightUomId,module);            packageWeight=BigDecimal.ONE;          }        }        String packageWeightUomId=shipmentPackage.getString("weightUomId");        if (UtilValidate.isEmpty(packageWeightUomId)) {          Debug.logWarning("Shipment Route Segment missing weightUomId in shipmentId " + shipmentId + ", assuming shipment.default.weight.uom of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);          packageWeightUomId=weightUomId;        }        if (!packageWeightUomId.equals(weightUomId)) {          Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",packageWeightUomId,"uomIdTo",weightUomId,"originalValue",packageWeight));          if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {            return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageCannotBeConverted",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));          } else {            packageWeight=(BigDecimal)results.get("convertedValue");          }        }      }      BigDecimal weight=hasBillingWeight ? billingWeight : packageWeight;      if (weight == null || weight.compareTo(BigDecimal.ZERO) < 0) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageNotAvailable",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));      }      shipRequestContext.put("CustomerReference",shipmentId + ":" + shipmentRouteSegmentId+ ":"+ shipmentPackage.getString("shipmentPackageSeqId"));      shipRequestContext.put("DropoffType",dropoffType);      shipRequestContext.put("Packaging",packaging);      if (UtilValidate.isNotEmpty(dimensionsUomId) && dimensionsLength != null && dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsWidth != null && dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsHeight != null && dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0) {        shipRequestContext.put("DimensionsUnits",dimensionsUomId.equals("LEN_in") ? "IN" : "CM");        shipRequestContext.put("DimensionsLength",dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).toString());        shipRequestContext.put("DimensionsWidth",dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).toString());        shipRequestContext.put("DimensionsHeight",dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).toString());      }      shipRequestContext.put("Weight",weight.setScale(1,BigDecimal.ROUND_UP).toString());    }    StringWriter outWriter=new StringWriter();    try {      FreeMarkerWorker.renderTemplateAtLocation(templateLocation,shipRequestContext,outWriter);    } catch (    Exception e) {      String errorMessage="Cannot confirm Fedex shipment: Failed to render Fedex XML Ship Request Template [" + templateLocation + "].";      Debug.logError(e,errorMessage,module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateError",UtilMisc.toMap("templateLocation",templateLocation,"errorString",e.getMessage()),locale));    }    String fDXShipRequestString=outWriter.toString();    String fDXShipReplyString=null;    try {      fDXShipReplyString=sendFedexRequest(fDXShipRequestString,delegator,shipmentGatewayConfigId,resource,locale);      if (Debug.verboseOn()) {        Debug.logVerbose(fDXShipReplyString,module);      }    } catch (    FedexConnectException e) {      String errorMessage="Error sending Fedex request for FDXShipRequest: ";      Debug.logError(e,errorMessage,module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateSendingError",UtilMisc.toMap("errorString",e.toString()),locale));    }    return handleFedexShipReply(fDXShipReplyString,shipmentRouteSegment,shipmentPackageRouteSegs,locale);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",e.toString()),locale));  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",se.toString()),locale));  }}  }
class C{  public TestConfiguration build(){  return new ImmutableTestConfiguration(diagnosticFiles,testSourceFiles,new ArrayList<>(processors),options.getOptions(),shouldEmitDebugInfo);}  }
class C{  public boolean intersects(Cuboid other){  return (other.max.getX() >= min.getX() && other.min.getX() < max.getX()) ? ((other.max.getY() >= min.getY() && other.min.getY() < max.getY()) ? other.max.getZ() >= min.getZ() && other.min.getZ() < max.getZ() : false) : false;}  }
class C{  @Override public void restoreState(FacesContext facesContext,Object state){  Object[] stateArray=(Object[])state;  behaviorId=(String)stateArray[0];}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (!closeIt())   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  return true;}  }
class C{  protected ChunkSeqReaderPng createChunkSeqReader(){  return new ChunkSeqReaderPng(false);}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public RedoAction(Application app,@Nullable View view){  super(app,view);  labels.configureAction(this,ID);}  }
class C{  public void testContainsIncorrect() throws Exception {  String a="LINESTRING (1 0, 0 2, 0 0, 2 2)";  String b="LINESTRING (0 0, 2 2)";  assertTrue(!a.contains(b));}  }
class C{  public boolean isVisible(TreePath path){  if (path != null) {    TreePath parentPath=path.getParentPath();    if (parentPath != null)     return isExpanded(parentPath);    return true;  }  return false;}  }
class C{  @Override public String toString(){  return "Entry, xIndex: " + mXIndex + " val (sum): "+ getVal();}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  if (bands != null) {    if (bands.length != 1)     throw new RasterFormatException("MultiPixelPackedSampleModel has " + "only one band.");  }  SampleModel sm=createCompatibleSampleModel(width,height);  return sm;}  }
class C{  @Override public final boolean shouldPerform(OptOptions options){  return options.SSA;}  }
class C{  public static String generateNativeGuidForPhysicalNAS(String systemNativeGuid,String pNasName){  return String.format("%s" + PHYSICAL_NAS + "+%s",systemNativeGuid,pNasName);}  }
class C{  public void update(byte aByte){  int a, b;  a=(int)aByte;  for (int count=7; count >= 0; count--) {    a=a << 1;    b=(a >>> 8) & 1;    if ((value & 0x8000) != 0) {      value=((value << 1) + b) ^ 0x1021;    } else {      value=(value << 1) + b;    }  }  value=value & 0xffff;  return;}  }
class C{  public Task<HostRestRep> createHost(URI tenantId,HostCreateParam input){  return createHost(tenantId,input,false);}  }
class C{  private void cmd_process(){  if (m_format == null) {    FDialog.error(m_WindowNo,this,"FileImportNoFormat");    return;  }  log.config(m_format.getName());  int row=0;  int imported=0;  for (row=0; row < m_data.size(); row++)   if (m_format.updateDB(Env.getCtx(),m_data.get(row).toString(),null))   imported++;  FDialog.info(m_WindowNo,this,"FileImportR/I",row + " / " + imported+ "#");  SessionManager.getAppDesktop().closeActiveWindow();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @ApiMethod(httpMethod="POST") public final Offer insertOffer(final Offer offer,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(offer).now();  return offer;}  }
class C{  public static int addGas(ItemStack itemStack,GasStack stack){  if (itemStack != null && itemStack.getItem() instanceof IGasItem && ((IGasItem)itemStack.getItem()).canReceiveGas(itemStack,stack.getGas())) {    return ((IGasItem)itemStack.getItem()).addGas(itemStack,stack.copy());  }  return 0;}  }
class C{  public EntityReference createEntityReference(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public Object clone(){  return (html.clone());}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public DeleteMutation(Object key,String table,PersistenceController ctrl){  super(table,ctrl);  this.key=key;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof LongBitSet)) {    return false;  }  LongBitSet other=(LongBitSet)o;  if (numBits != other.numBits) {    return false;  }  return Arrays.equals(bits,other.bits);}  }
class C{  public static boolean equals(byte[] first,byte[] second,int secondStartIndex,int secondEndIndex){  if (first == null) {    throw new IllegalArgumentException("first must not be null");  }  if (second == null) {    throw new IllegalArgumentException("second must not be null");  }  if (secondStartIndex >= secondEndIndex) {    throw new IllegalArgumentException("secondStartIndex must be smaller than secondEndIndex");  }  if (second.length < secondEndIndex) {    throw new IllegalArgumentException("secondStartIndex must be smaller than secondEndIndex");  }  if (first.length < secondEndIndex) {    return false;  }  int len=secondEndIndex - secondStartIndex;  for (int i=0; i < len; i++) {    if (first[i] != second[secondStartIndex + i]) {      return false;    }  }  return true;}  }
class C{  @Override public synchronized boolean isAfterLast() throws SQLException {  return super.isAfterLast();}  }
class C{  static Throwable cause(Throwable e){  while (e.getCause() != null && (e instanceof InstantiationException || e instanceof InvocationTargetException || e.getClass().equals(RuntimeExceptionConfig.class))) {    e=e.getCause();  }  return e;}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.057 -0500",hash_original_method="CEE54B5A4214CACDA44FA719AFBE18BD",hash_generated_method="479211C586724C2B02DAEA765B5A2A07") public synchronized StringBuffer append(char ch){  append0(ch);  return this;}  }
class C{  public void addTask(GenericClusterRequest task){  tasksById.put(task.taskId,task);  tasksAwaitingDelivery.add(task);}  }
class C{  public void put(String key,Object value){  this.json.put(key,value);  if (this.parent != null && this.credential.isPersistent())   this.parent.commit();}  }
class C{  public void move(java.awt.event.MouseEvent e){}  }
class C{  public int countEntries(){  int size=0;  if (entriesFromStorage == null)   return 0;  for (  String ofswitch : entriesFromStorage.keySet())   size+=entriesFromStorage.get(ofswitch).size();  return size;}  }
class C{  boolean _scheduleOnce(Key key,final Steppable event){  double time=this.time;  double t=key.time;  if (t == time && t != AFTER_SIMULATION)   t=key.time=Double.longBitsToDouble(Double.doubleToRawLongBits(t) + 1L);  if (sealed || t >= AFTER_SIMULATION) {    return false;  } else   if (t < EPOCH)   throw new IllegalArgumentException("For the Steppable...\n\n" + event + "\n\n...the time provided ("+ t+ ") is < EPOCH ("+ EPOCH+ ")"); else   if (t != t)   throw new IllegalArgumentException("For the Steppable...\n\n" + event + "\n\n...the time provided ("+ t+ ") is NaN"); else   if (t < time)   throw new IllegalArgumentException("For the Steppable...\n\n" + event + "\n\n...the time provided ("+ t+ ") is less than the current time ("+ time+ ")"); else   if (event == null)   throw new IllegalArgumentException("The provided Steppable is null");  queue.add(event,key);  return true;}  }
class C{  private static RsForward forward(final Response rsp){  return new RsForward(rsp,"/domains");}  }
class C{  public static ForceReplyBuilder builder(){  return new ForceReplyBuilder();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public TsvWriterWrapper(File baseOutput,SdfReaderWrapper reader,boolean gzip) throws IOException {  this(baseOutput,reader,gzip,EXTS);}  }
class C{  private EnumConstantDeclaration generateEnumConstant(VariableDeclarator var){  final NameExpr baseClass=new NameExpr(baseClassName);  final Expression parentAccessor;  if (parentClassName.isPresent()) {    parentAccessor=new FieldAccessExpr(baseClass,parentClassName.get());  } else {    parentAccessor=baseClass;  }  EnumConstantDeclaration enumConstant=new EnumConstantDeclaration(null,var.getId().getName(),Collections.singletonList(new FieldAccessExpr(parentAccessor,var.getId().getName())),null);  if (var.hasComment() && var.getComment() instanceof JavadocComment) {    enumConstant.setJavaDoc(new JavadocComment(var.getComment().getContent()));  }  return enumConstant;}  }
class C{  public boolean hasCustomProperties(){  return hasRepeatingExtension(CustomProperty.class);}  }
class C{  private void errorsToHTML(Errors errors,PrintWriter writer){  if (errors != null && errors.hasErrors()) {    writer.print("<ol>");    for (    final String text : errors.getTexts()) {      writer.print("<li>");      writer.print(StringEscapeUtils.escapeHtml4(text));      writer.print("</li>");    }    writer.print("</ol>");  }}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  public synchronized void saveCommitPoint(Long indexCommitGen){  AtomicInteger reserveCount=savedCommits.get(indexCommitGen);  if (reserveCount == null)   reserveCount=new AtomicInteger();  reserveCount.incrementAndGet();  savedCommits.put(indexCommitGen,reserveCount);}  }
class C{  public LongTermCredential(byte[] username,byte[] password){  this.username=(username == null) ? null : username.clone();  this.password=(password == null) ? null : password.clone();}  }
class C{  public static List<JobStep> createJobSteps(final Job job){  Config.INSTANCE.logger.debug("Building steps.");  List<JobStep> job_step_list=new ArrayList<>();  final String step_sql=Config.INSTANCE.sql.getProperty("sql.jobstepbuilder.build_step");  try (final PreparedStatement statement=Database.INSTANCE.getMainConnection().prepareStatement(step_sql)){    statement.setInt(1,job.getJobId());    try (final ResultSet resultSet=statement.executeQuery()){      while (resultSet.next()) {        JobStep job_step=new JobStepBuilder().setJob(job).setStepId(resultSet.getInt("jstid")).setStepName(resultSet.getString("jstname")).setStepDescription(resultSet.getString("jstdesc")).setStepType(StepType.convertTo(resultSet.getString("jstkind"))).setCode(resultSet.getString("jstcode")).setConnectionString(resultSet.getString("jstconnstr")).setDatabaseName(resultSet.getString("jstdbname")).setOnError(OnError.convertTo(resultSet.getString("jstonerror"))).createJobStep();        job_step_list.add(job_step);      }    }   } catch (  final SQLException e) {    Config.INSTANCE.logger.error("An error occurred getting job steps.");    Config.INSTANCE.logger.error(e.getMessage());  }  return job_step_list;}  }
class C{  protected void editExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.CAMPOS_TABLA_EDIT_INFORMACION,request);  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List listaTipoNorma=descripcionService.makeListTipoNorma();  setInTemporalSession(request,DescripcionConstants.LISTA_TIPO_NORMAS_KEY,listaTipoNorma);  List listaAreas=descripcionService.getAreasByTipoNorma(Integer.parseInt(camposTablaForm.getTipoNorma()));  setInTemporalSession(request,DescripcionConstants.LISTA_AREAS_KEY,listaAreas);  setReturnActionFordward(request,mapping.findForward("edit"));}  }
class C{  public void pushDrawListHead(PspGeList list){synchronized (drawListQueue) {    int arraySize=drawListQueue.size();    if (arraySize > 0) {      PspGeList[] array=drawListQueue.toArray(new PspGeList[arraySize]);      ConcurrentLinkedQueue<PspGeList> newQueue=new ConcurrentLinkedQueue<PspGeList>();      PspGeList[] newArray=new PspGeList[arraySize + 1];      newArray[0]=list;      for (int i=0; i < arraySize; i++) {        newArray[i + 1]=array[i];        newQueue.add(newArray[i]);      }      drawListQueue=newQueue;    } else {      drawListQueue.add(list);    }  }}  }
class C{  @Override protected void tearDown() throws Exception {  Espresso.unregisterIdlingResources(videoPlayerIdlingResource);  super.tearDown();}  }
class C{  public Vertex evaluateEquation(String code,Vertex speaker,Vertex target,boolean debug,Network network){  Vertex equation=parseEquationForEvaluation(code,speaker,target,debug,network);  Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();  return equation.applyQuotient(variables,network);}  }
class C{  public static byte[] decode(String s){  char[] a=s.toCharArray();  if (a.length > 2 && a[0] == 'X' && a[1] == '\'' && a[a.length - 1] == '\'') {    byte[] result=new byte[(a.length - 3) / 2];    for (int i=2, k=0; i < a.length - 1; i+=2, k++) {      byte tmp;switch (a[i]) {case '0':        tmp=0;      break;case '1':    tmp=1;  break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]=(byte)(tmp << 4);switch (a[i + 1]) {case '0':tmp=0;break;case '1':tmp=1;break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]|=tmp;}return result;}byte[] result=new byte[a.length - 1];int i=0;int shift=s.charAt(i++);int j=0;while (i < s.length()) {int c;if ((c=s.charAt(i++)) == 1) {if ((c=s.charAt(i++)) == 1) {c=0;} else if (c == 2) {c=1;} else if (c == 3) {c='\'';} else {throw new IllegalArgumentException("invalid string passed to decoder: " + j);}}result[j++]=(byte)((c + shift) & 0xff);}int outLen=j;if (result.length != outLen) {result=byteCopy(result,0,outLen,new byte[outLen]);}return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE:    return definedType != null;}return super.eIsSet(featureID);}  }
class C{  public void test_getCharLjava_lang_ObjectI(){  char[] x={1};  char ret=0;  boolean thrown=false;  try {    ret=Array.getChar(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getChar(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getChar(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getChar(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public boolean check(final char c){  List<LetterNode<V>> newList=new ArrayList<LetterNode<V>>();  newList.add(root);  LetterNode<V> current;  hits.clear();  int size=this.currentList.size();  for (int i=0; i < size; i++) {    current=this.currentList.get(i);    current=current.get(c);    if (current != null) {      newList.add(current);      if (current.isKeyword()) {        hits.add(current);      }    }  }  this.currentList=newList;  return !hits.isEmpty();}  }
class C{  public synchronized void addListener(final ViewManagerListener listener){  listeners.addListener(listener);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  for (int i=0; i < this.terms.size(); i++) {    buf.append(this.terms.get(i));    if (i < this.terms.size() - 1) {      buf.append(" + ");    }  }  return buf.toString();}  }
class C{  public synchronized CloseableReference<Bitmap> convertToBitmapReference(){  Preconditions.checkNotNull(mBitmapReference,"Cannot convert a closed static bitmap");  return detachBitmapReference();}  }
class C{  public static Constraint<CharSequence> minLength(final int minLength){  return new MinLengthConstraint(minLength);}  }
class C{  public int accuracy(){  return accuracy;}  }
class C{  @Deprecated public static void publishInstallAsync(final Context context,final String applicationId){  publishInstallAsync(context,applicationId,null);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  convertInstance(instance);  return true;}  }
class C{  protected void addToDocument(GlobalFeature feature,Document document,String featureFieldName){  if (run == 0) {  } else   if (run == 1) {    if (representativesID.contains(docCount) && feature.getClass().getCanonicalName().equals(featureClass.getCanonicalName())) {      representatives.add(feature);    }  } else   if (run == 2) {    if (feature.getClass().getCanonicalName().equals(featureClass.getCanonicalName())) {      int[] hashes=getHashes(feature);      document.add(new TextField(featureFieldName + "_hash",createDocumentString(hashes,hashes.length),Field.Store.YES));      document.add(new TextField(featureFieldName + "_hash_q",createDocumentString(hashes,10),Field.Store.YES));    }    document.add(new StoredField(featureFieldName,feature.getByteArrayRepresentation()));  }}  }
class C{  public static boolean isOnlyLettersAndDigits(String password){  for (int i=0; i < password.length(); i++) {    if (!Character.isLetterOrDigit(password.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public InternalFileServiceClient(){}  }
class C{  public ParticleString3D(VerletPhysics3D physics,Vec3D pos,Vec3D step,int num,float mass,float strength){  this.physics=physics;  particles=new ArrayList<VerletParticle3D>(num);  links=new ArrayList<VerletSpring3D>(num - 1);  float len=step.magnitude();  VerletParticle3D prev=null;  pos=pos.copy();  for (int i=0; i < num; i++) {    VerletParticle3D p=new VerletParticle3D(pos.copy(),mass);    particles.add(p);    physics.particles.add(p);    if (prev != null) {      VerletSpring3D s=createSpring(prev,p,len,strength);      links.add(s);      physics.addSpring(s);    }    prev=p;    pos.addSelf(step);  }}  }
class C{  @Override public GitHubPRCause apply(final GHPullRequest remotePR){  final GitHubPRCause gitHubPRCause=from(trigger.getEvents()).transform(toCause(remotePR)).filter(notNull()).first().orNull();  if (gitHubPRCause == null || gitHubPRCause.isSkip()) {    return null;  } else {    return gitHubPRCause;  }}  }
class C{  public QueryService addCriteria(String ldpath){  queryServiceDTO.getCriteria().add(new Criteria(ldpath,Comparison.EQ));  return this;}  }
class C{  public void closePath(){  if (typeSize == 0 || types[typeSize - 1] != PathIterator.SEG_CLOSE) {    checkBuf(0,true);    types[typeSize++]=PathIterator.SEG_CLOSE;    dirty=true;  }}  }
class C{  public Connection newConnection() throws RemoteException {  TCPConnection conn;  do {    conn=null;synchronized (freeList) {      int elementPos=freeList.size() - 1;      if (elementPos >= 0) {        checkConnectPermission();        conn=freeList.get(elementPos);        freeList.remove(elementPos);      }    }    if (conn != null) {      if (!conn.isDead()) {        TCPTransport.tcpLog.log(Log.BRIEF,"reuse connection");        return conn;      }      this.free(conn,false);    }  } while (conn != null);  return (createConnection());}  }
class C{  protected int parseNewConf(final byte[] result) throws ProtocolException, CommandException {  final int res=ByteArray.byteArrayToInt(result,0);  boolean ret=false;  if (res == Proto.OK) {    final int confLen=ByteArray.byteArrayToInt(result,4);    if (confLen > 0) {      if (Cfg.DEBUG) {        Check.log(TAG + " Info: got NewConf");      }      ret=Protocol.saveNewConf(result,0);      if (ret) {        if (Cfg.DEBUG) {          Check.log(TAG + " (parseNewConf): RELOADING");        }        ret=Core.self().reloadConf();      } else {        if (Cfg.DEBUG) {          Check.log(TAG + " (parseNewConf): ERROR RELOADING");        }      }    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " Error (parseNewConf): empty conf");      }    }    if (ret) {      return Proto.OK;    } else {      return Proto.ERROR;    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: no new conf: ");    }    return Proto.NO;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseNewConf: " + res);    }    throw new ProtocolException();  }}  }
class C{  @Category(FlakyTest.class) @Test public void testPeriodicAckSendByClientPrimaryFailover() throws Exception {  IgnoredException.addIgnoredException("java.net.ConnectException");  createEntries();  setClientServerObserverForBeforeSendingClientAck();  server1.invoke(null);  LogWriterUtils.getLogWriter().info("Entering waitForServerUpdate");  waitForServerUpdate();  LogWriterUtils.getLogWriter().info("Entering waitForCallback");  waitForCallback();  LogWriterUtils.getLogWriter().info("Entering waitForClientAck");  waitForClientAck();  server2.invoke(null);}  }
class C{  public final void put(final String key,final boolean value){  super.put(key,Boolean.toString(value));}  }
class C{  private static int appendIntersectionTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  if (start >= string.length - 1) {    throw new IllegalArgumentException();  }  char c=string[start];  if (c != C_INTERSECTION) {    throw new IllegalArgumentException();  }  start=appendClassTypeSignature(string,start + 1,fullyQualifyTypeNames,buffer);  if (start < string.length - 1) {    start++;    if (string[start] != C_COLON) {      throw new IllegalArgumentException("should be a colon at this location");    }    while (string[start] == C_COLON) {      buffer.append(" | ");      start=appendClassTypeSignature(string,start + 1,fullyQualifyTypeNames,buffer);      if (start == string.length - 1) {        return start;      } else       if (start > string.length - 1) {        throw new IllegalArgumentException("Should be at the end");      }      start++;    }  }  return start;}  }
class C{  @Override public void close() throws java.io.IOException {  flush();  super.close();  buffer=null;  out=null;}  }
class C{  public Week(Date time,TimeZone zone,Locale locale){  ParamChecks.nullNotPermitted(time,"time");  ParamChecks.nullNotPermitted(zone,"zone");  ParamChecks.nullNotPermitted(locale,"locale");  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR);  if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {    this.week=1;    this.year=(short)(calendar.get(Calendar.YEAR) + 1);  } else {    this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);    int yyyy=calendar.get(Calendar.YEAR);    if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {      yyyy--;    }    this.year=(short)yyyy;  }  peg(calendar);}  }
class C{  private void mapSessionToUser(RequestAndResponse requestAndResponse,String userId){  requestAndResponse.request.getSession().setAttribute(sessionUserIdAttribute,userId);}  }
class C{  private static Node locateAttrParent(Element elem,Node attr){  Node parent=null;  Attr check=elem.getAttributeNode(attr.getNodeName());  if (check == attr)   parent=elem;  if (null == parent) {    for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) {      if (Node.ELEMENT_NODE == node.getNodeType()) {        parent=locateAttrParent((Element)node,attr);        if (null != parent)         break;      }    }  }  return parent;}  }
class C{  public void testConstrStringExponentIntegerMax(){  String a="-238768.787678287e2147483647";  int aScale=-2147483638;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected void revalidate(){  if (!valid) {    Attr attr=element.getAttributeNodeNS(namespaceURI,localName);    if (attr == null) {      unitType=SVGAngle.SVG_ANGLETYPE_UNSPECIFIED;      value=0;    } else {      parse(attr.getValue());    }    valid=true;  }}  }
class C{  public void updateSelectedWorkingSets(){  projectInfo.setSelectedWorkingSets(getSelectedWorkingSets());}  }
class C{  protected Object mapObject(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  JsonToken t=jp.getCurrentToken();  if (t == JsonToken.START_OBJECT) {    t=jp.nextToken();  }  if (t != JsonToken.FIELD_NAME) {    return new LinkedHashMap<String,Object>(4);  }  String field1=jp.getText();  jp.nextToken();  Object value1=deserialize(jp,ctxt);  if (jp.nextToken() != JsonToken.FIELD_NAME) {    LinkedHashMap<String,Object> result=new LinkedHashMap<String,Object>(4);    result.put(field1,value1);    return result;  }  String field2=jp.getText();  jp.nextToken();  Object value2=deserialize(jp,ctxt);  if (jp.nextToken() != JsonToken.FIELD_NAME) {    LinkedHashMap<String,Object> result=new LinkedHashMap<String,Object>(4);    result.put(field1,value1);    result.put(field2,value2);    return result;  }  LinkedHashMap<String,Object> result=new LinkedHashMap<String,Object>();  result.put(field1,value1);  result.put(field2,value2);  do {    String fieldName=jp.getText();    jp.nextToken();    result.put(fieldName,deserialize(jp,ctxt));  } while (jp.nextToken() != JsonToken.END_OBJECT);  return result;}  }
class C{  public IEEE802154Message(String m,int l){  super(m);  setBinary(true);  setTimeout(5000);  byte b[]=jmri.util.StringUtil.bytesFromHexString(m);  if (b.length == 0) {    _nDataChars=0;    _dataChars=null;    return;  }  _nDataChars=b.length;  _dataChars=new int[_nDataChars];  for (int i=0; i < b.length; i++) {    setElement(i,b[i]);  }}  }
class C{  public ImmutableLocation add(IntVector v){  return new ImmutableLocation(x + v.x,y + v.y,z + v.z,w);}  }
class C{  public static void writeSkinToFile(String filename){  File filePath=new File(Configuration.skinsDir(),filename);  try (Writer output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filePath)))){    output.write(SKIN_HEADER);    for (    String component : skinSpecs.keySet()) {      writeSkinComponent(component,output);    }    if (udSpec != null) {      writeUnitDisplaySkinSpec(output);    }    output.write(SKIN_FOOTER);    output.close();  } catch (  IOException e) {    System.out.println(e.getMessage());    e.printStackTrace();  }}  }
class C{  public void delete(){  if (this.framebuffer != null)   this.framebuffer.deleteFramebuffer();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isReversal(){  return m_reversal;}  }
class C{  @Override protected String createContextToken(WAR deployable){  StringBuilder contextTokenValue=new StringBuilder();  contextTokenValue.append("<Context");  contextTokenValue.append(" path=\"");  if (!"".equals(deployable.getContext()) && !"/".equals(deployable.getContext())) {    contextTokenValue.append("/" + deployable.getContext());  }  contextTokenValue.append("\"");  contextTokenValue.append(" docBase=\"");  contextTokenValue.append(new File(deployable.getFile()).getAbsolutePath());  contextTokenValue.append("\"");  contextTokenValue.append(" reloadable=\"");  contextTokenValue.append(getPropertyValue(TomcatPropertySet.CONTEXT_RELOADABLE));  contextTokenValue.append("\"");  contextTokenValue.append(getExtraContextAttributes());  contextTokenValue.append(">");  contextTokenValue.append(getExtraClasspathToken(deployable));  contextTokenValue.append("</Context>");  return contextTokenValue.toString();}  }
class C{  public void abortSharing() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSharingInf.abortSharing();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:return basicSetDeclaredName(null,msgs);case N4JSPackage.N4_FIELD_DECLARATION__EXPRESSION:return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public TwitterListTimeline build(){  if (!(listId == null ^ slug == null)) {    throw new IllegalStateException("must specify either a list id or slug/owner pair");  }  if (slug != null && ownerId == null && ownerScreenName == null) {    throw new IllegalStateException("slug/owner pair must set owner via ownerId or ownerScreenName");  }  return new TwitterListTimeline(tweetUi,listId,slug,ownerId,ownerScreenName,maxItemsPerRequest,includeRetweets);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void remove() throws RecurrenceInfoException {  List<RecurrenceRule> rulesList=new ArrayList<RecurrenceRule>();  rulesList.addAll(rRulesList);  rulesList.addAll(eRulesList);  try {    for (    RecurrenceRule rule : rulesList)     rule.remove();    info.remove();  } catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException(rre.getMessage(),rre);  }catch (  GenericEntityException gee) {    throw new RecurrenceInfoException(gee.getMessage(),gee);  }}  }
class C{  public SetMonitoringModeResponse SetMonitoringMode(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,MonitoringMode MonitoringMode,UnsignedInteger... MonitoredItemIds) throws ServiceFaultException, ServiceResultException {  SetMonitoringModeRequest req=new SetMonitoringModeRequest(RequestHeader,SubscriptionId,MonitoringMode,MonitoredItemIds);  return (SetMonitoringModeResponse)channel.serviceRequest(req);}  }
class C{  public SqlDateConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public String cancelTriggerProcesses() throws SaaSApplicationException {  if (triggerProcessList != null) {    List<Long> keys=new ArrayList<Long>();    for (    TriggerProcess triggerProcess : triggerProcessList) {      if (triggerProcess.isSelected()) {        keys.add(Long.valueOf(triggerProcess.getKey()));      }    }    try {      getTriggerService().cancelActions(keys,null);    } catch (    ObjectNotFoundException e) {      triggerProcessList=null;      throw new ConcurrentModificationException();    }    triggerProcessList=null;    if (keys.size() > 0) {      addMessage(null,FacesMessage.SEVERITY_INFO,TRIGGER_PROCESS_CANCELED);    }  }  return OUTCOME_REFRESH;}  }
class C{  public static final long countDocs(SolrClient c) throws Exception {  return c.query(params("q","*:*","rows","0")).getResults().getNumFound();}  }
class C{  private LoggerSettings(Logger logger){  this.additive=logger.getAdditivity();  Enumeration<?> appenders=logger.getAllAppenders();  this.appenders=new ArrayList<>();  while (appenders.hasMoreElements()) {    Object appender=appenders.nextElement();    if (appender instanceof Appender) {      this.appenders.add((Appender)appender);    } else {      throw new RuntimeException("getAllAppenders of " + logger + " contained an object that is not an Appender");    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","dzu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private String noJsonFileMessage(){  IProject project=getProject();  return "No indicator (.json) files found in the droidsafe output directory\n\n  " + DroidsafePluginUtilities.getProjectOutputDir(project);}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public static void println(StringBuilder buf,int width,String data,String indent){  for (  String line : FormatUtil.splitAtLastBlank(data,width - indent.length())) {    buf.append(indent);    buf.append(line);    if (!line.endsWith(FormatUtil.NEWLINE)) {      buf.append(FormatUtil.NEWLINE);    }  }}  }
class C{  public static long sizeOf(Struct sct){  Iterator<Entry<Key,Object>> it=sct.entryIterator();  Entry<Key,Object> e;  long size=0;  while (it.hasNext()) {    e=it.next();    size+=SizeOf.size(e.getKey());    size+=SizeOf.size(e.getValue());  }  return size;}  }
class C{  public JSONNode addPrimitive(String name,Integer value){  return add(name,value,NodeType.PRIMITIVE);}  }
class C{  public Rectangle(float x,float y,float width,float height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
