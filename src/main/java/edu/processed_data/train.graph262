class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " " + E+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(v + ": ");    for (    DirectedEdge e : adj[v]) {      s.append(e + "  ");    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  public static ValueTimestamp fromMillis(long ms){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long nanos=DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,nanos);}  }
class C{  public static ValueExp value(int val){  return new NumericValueExp((long)val);}  }
class C{  private void parseModeConfig(final Node node,final ConfigSettings config){  String name;  Integer value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING)) {      value=Integer.parseInt(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING,value);    } else     if (name.equals(KEY_COUNTER_FULL_REVISION)) {      value=Integer.parseInt(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.COUNTER_FULL_REVISION,value);    }  }}  }
class C{  public void componentResized(ComponentEvent e){  ((ComponentListener)a).componentResized(e);  ((ComponentListener)b).componentResized(e);}  }
class C{  public static void markEvent(String metricKey){  SharedMetricRegistries.getOrCreate("okapi").meter(metricKey).mark();}  }
class C{  public boolean isInMigration(){  return inMigration;}  }
class C{  public void reportFocusChangedSerialized(boolean focused,boolean inTouchMode){  try {    mClient.windowFocusChanged(focused,inTouchMode);  } catch (  RemoteException e) {  }  if (mFocusCallbacks != null) {    final int N=mFocusCallbacks.beginBroadcast();    for (int i=0; i < N; i++) {      IWindowFocusObserver obs=mFocusCallbacks.getBroadcastItem(i);      try {        if (focused) {          obs.focusGained(mWindowId.asBinder());        } else {          obs.focusLost(mWindowId.asBinder());        }      } catch (      RemoteException e) {      }    }    mFocusCallbacks.finishBroadcast();  }}  }
class C{  public FlyweightEntity(String name){  this.name=name;}  }
class C{  public static void main(String[] args) throws Exception {  System.exit(compile(args));}  }
class C{  public static Hours hoursIn(ReadableInterval interval){  if (interval == null) {    return Hours.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.hours());  return Hours.hours(amount);}  }
class C{  public static Capabilities extractCapabilities(SipMessage msg){  Capabilities.CapabilitiesBuilder capaBuilder=new Capabilities.CapabilitiesBuilder();  Set<String> tags=msg.getFeatureTags();  boolean ipCall_RCSE=false;  boolean ipCall_3GPP=false;  for (  String tag : tags) {    if (tag.contains(FeatureTags.FEATURE_3GPP_VIDEO_SHARE)) {      capaBuilder.setVideoSharing(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_IMAGE_SHARE)) {      capaBuilder.setImageSharing(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_CHAT)) {      capaBuilder.setImSession(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_FT)) {      capaBuilder.setFileTransferMsrp(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_FT_HTTP)) {      capaBuilder.setFileTransferHttp(true);    } else     if (tag.contains(FeatureTags.FEATURE_OMA_IM)) {      capaBuilder.setImSession(true).setFileTransferMsrp(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_PRESENCE_DISCOVERY)) {      capaBuilder.setPresenceDiscovery(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_SOCIAL_PRESENCE)) {      capaBuilder.setSocialPresence(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_GEOLOCATION_PUSH)) {      capaBuilder.setGeolocationPush(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_FT_THUMBNAIL)) {      capaBuilder.setFileTransferThumbnail(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_IP_VOICE_CALL)) {      if (ipCall_3GPP) {        capaBuilder.setIpVoiceCall(true);      } else {        ipCall_RCSE=true;      }    } else     if (tag.contains(FeatureTags.FEATURE_3GPP_IP_VOICE_CALL)) {      if (ipCall_RCSE) {        capaBuilder.setIpVoiceCall(true);      } else {        ipCall_3GPP=true;      }    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_IP_VIDEO_CALL)) {      capaBuilder.setIpVideoCall(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_FT_SF)) {      capaBuilder.setFileTransferStoreForward(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_GC_SF)) {      capaBuilder.setGroupChatStoreForward(true);    } else     if (tag.contains(FeatureTags.FEATURE_RCSE_IARI_EXTENSION + ".ext") || tag.contains(FeatureTags.FEATURE_RCSE_IARI_EXTENSION + ".mnc") || tag.contains(FeatureTags.FEATURE_RCSE_ICSI_EXTENSION + ".gsma")) {      String serviceId=extractServiceId(tag);      if (!"gsma.rcs.extension".equals(serviceId)) {        capaBuilder.addExtension(serviceId);      }    } else     if (tag.contains(FeatureTags.FEATURE_SIP_AUTOMATA)) {      capaBuilder.setSipAutomata(true);    }  }  byte[] content=msg.getContentBytes();  if (content != null) {    SdpParser parser=new SdpParser(content);    Vector<MediaDescription> mediaVideo=parser.getMediaDescriptions("video");    Vector<String> videoCodecs=new Vector<>();    for (int i=0; i < mediaVideo.size(); i++) {      MediaDescription desc=mediaVideo.get(i);      MediaAttribute attr=desc.getMediaAttribute("rtpmap");      if (attr != null) {        String rtpmap=attr.getValue();        String encoding=rtpmap.substring(rtpmap.indexOf(desc.mPayload) + desc.mPayload.length() + 1);        String codec=encoding.toLowerCase().trim();        int index=encoding.indexOf("/");        if (index != -1) {          codec=encoding.substring(0,index);        }        if (MediaRegistry.isCodecSupported(codec)) {          videoCodecs.add(codec);        }      }    }    if (videoCodecs.size() == 0) {      capaBuilder.setVideoSharing(false);    }    Vector<MediaDescription> mediaImage=parser.getMediaDescriptions("message");    Vector<String> imgFormats=new Vector<>();    for (int i=0; i < mediaImage.size(); i++) {      MediaDescription desc=mediaImage.get(i);      MediaAttribute attr=desc.getMediaAttribute("accept-types");      if (attr != null) {        String[] types=attr.getValue().split(" ");        for (        String fmt : types) {          if ((fmt != null) && MimeManager.getInstance().isMimeTypeSupported(fmt)) {            imgFormats.addElement(fmt);          }        }      }    }    if (imgFormats.size() == 0) {      capaBuilder.setImageSharing(false);    }  }  long timestamp=System.currentTimeMillis();  capaBuilder.setTimestampOfLastResponse(timestamp);  capaBuilder.setTimestampOfLastRequest(timestamp);  return capaBuilder.build();}  }
class C{  public static void write(float x){  write(Float.floatToRawIntBits(x));}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    ElemTemplateElement elem=null;    try {      elem=(ElemTemplateElement)classObject.newInstance();      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public BooleanArrayList(){  this(10);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sinh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RadialMenuOverlay(Context context,int menuId,boolean useNodeProvider){  super(context,menuId);  mMenu=new RadialMenu(context,this);  mMenuView=new RadialMenuView(context,mMenu,useNodeProvider);  setContentView(mMenuView);}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void report(String label,long start,long end,int iter,int rept){  if (timing) {    System.out.println(label + ": " + (end - start) / 1000 + "us" + "  (" + (end - start) / (iter * rept) + "ns per call)");  } else {    System.out.println(label + ": done");  }}  }
class C{  public GroupCommand(String name,int matches,int nGroups){  _name=name;  _matches=matches;  _ngroups=nGroups;}  }
class C{  public boolean isNegative(){  return years < 0 || months < 0 || days < 0 || hours < 0 || minutes < 0 || seconds < 0 || milliseconds < 0;}  }
class C{  public void clearDirtyFlag(){  dirty=false;}  }
class C{  private String convertIntToString(int value){  if (value <= 9) {    return "0" + String.valueOf(value);  } else {    return String.valueOf(value);  }}  }
class C{  private void publish(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_pub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  public static String toString(final URL url) throws IOException {  return IOUtils.toString(url,Charset.defaultCharset());}  }
class C{  public static String objectToString(Object o,boolean convertArrayContents,int maxArrayElements){  if (o == null || o == Token.NOT_AVAILABLE) {    return "null";  } else   if (o instanceof CachedDeserializable) {    CachedDeserializable cd=(CachedDeserializable)o;    return cd.getStringForm();  } else   if (convertArrayContents && o.getClass().isArray()) {    Class<?> eClass=o.getClass();    if (eClass == byte[].class) {      return arrayToString((byte[])o,maxArrayElements);    } else     if (eClass == boolean[].class) {      return arrayToString((boolean[])o,maxArrayElements);    } else     if (eClass == char[].class) {      return arrayToString((char[])o,maxArrayElements);    } else     if (eClass == short[].class) {      return arrayToString((short[])o,maxArrayElements);    } else     if (eClass == int[].class) {      return arrayToString((int[])o,maxArrayElements);    } else     if (eClass == long[].class) {      return arrayToString((long[])o,maxArrayElements);    } else     if (eClass == float[].class) {      return arrayToString((float[])o,maxArrayElements);    } else     if (eClass == double[].class) {      return arrayToString((double[])o,maxArrayElements);    } else {      return arrayToString((Object[])o,maxArrayElements);    }  } else {    return o.toString();  }}  }
class C{  public EnumRowStatus(SnmpInt valueIndex) throws IllegalArgumentException {  this(valueIndex.intValue());}  }
class C{  private byte[] concat(byte[]... arrays){  int lastPos=0;  byte[] combined=new byte[combinedLength(arrays)];  for (  byte[] array : arrays) {    System.arraycopy(array,0,combined,lastPos,array.length);    lastPos+=array.length;  }  return combined;}  }
class C{  public Instant(){  super();  iMillis=DateTimeUtils.currentTimeMillis();}  }
class C{  public static int readMediumInt(IoBuffer in){  byte[] bytes=new byte[3];  in.get(bytes);  int val=0;  val+=bytes[0] * 256 * 256;  val+=bytes[1] * 256;  val+=bytes[2];  if (val < 0) {    val+=256;  }  return val;}  }
class C{  public Iterator items(Predicate filter){  int size=m_visual.size();  if (size == 0) {    return Collections.EMPTY_LIST.iterator();  } else   if (size == 1) {    Iterator it=m_visual.keySet().iterator();    return items((String)it.next(),filter);  } else {    CompositeIterator iter=new CompositeIterator(m_visual.size());    Iterator it=m_visual.keySet().iterator();    for (int i=0; it.hasNext(); ) {      String group=(String)it.next();      if (!PrefuseLib.isChildGroup(group)) {        iter.setIterator(i++,items(group,filter));      }    }    return iter;  }}  }
class C{  @LargeTest public void testThumbnailListVGAImage() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int imageItemDuration=10000;  final int startTime=0;  final int endTime=0;  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename,imageItemDuration,renderingMode);  final int outWidth=mediaImageItem.getWidth() / 2;  final int outHeight=mediaImageItem.getHeight() / 2;  final Bitmap thumbNailBmp[]=mediaImageItem.getThumbnailList(outWidth,outHeight,startTime,endTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  public static void dumpThreads(@Nullable IgniteLogger log){  ThreadMXBean mxBean=ManagementFactory.getThreadMXBean();  final Set<Long> deadlockedThreadsIds=getDeadlockedThreadIds(mxBean);  if (deadlockedThreadsIds.size() == 0)   warn(log,"No deadlocked threads detected."); else   warn(log,"Deadlocked threads detected (see thread dump below) " + "[deadlockedThreadsCnt=" + deadlockedThreadsIds.size() + ']');  ThreadInfo[] threadInfos=mxBean.dumpAllThreads(mxBean.isObjectMonitorUsageSupported(),mxBean.isSynchronizerUsageSupported());  GridStringBuilder sb=new GridStringBuilder("Thread dump at ").a(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss z").format(new Date(U.currentTimeMillis()))).a(NL);  for (  ThreadInfo info : threadInfos) {    printThreadInfo(info,sb,deadlockedThreadsIds);    sb.a(NL);    if (info.getLockedSynchronizers() != null && info.getLockedSynchronizers().length > 0) {      printSynchronizersInfo(info.getLockedSynchronizers(),sb);      sb.a(NL);    }  }  sb.a(NL);  warn(log,sb.toString());}  }
class C{  protected synchronized void buildCache(){  TopologicalSort.DirectedGraph<EventListenerNode> graph=new TopologicalSort.DirectedGraph<>();  unsortedListeners.forEach(null);  unsortedListeners.forEach(null);  sortedListeners=TopologicalSort.topologicalSort(graph);}  }
class C{  public DateTime(long value){  this.value=value;}  }
class C{  public Boolean isVPMCSupported(){  return vpmcSupported;}  }
class C{  public void speakToEntity(String phrase){  currentlyHeardPhrases.add(phrase);}  }
class C{  private static void writeSetting(final CConnection connection,final int containerId,final String key,final String value,final String table) throws CouldntSaveDataException {  String id_column="";  if (table.equalsIgnoreCase(CTableNames.MODULE_SETTINGS_TABLE)) {    id_column="module_id";  } else {    id_column="project_id";  }  final String deleteQuery="DELETE FROM " + table + " WHERE "+ id_column+ " = "+ containerId+ " AND \"name\" = \'"+ key+ "\'";  final String insertQuery="INSERT INTO " + table + " VALUES(\'"+ containerId+ "\',\'"+ key+ "\',"+ value+ ")";  try {    PostgreSQLHelpers.beginTransaction(connection);    connection.executeUpdate(deleteQuery,true);    connection.executeUpdate(insertQuery,true);    PostgreSQLHelpers.endTransaction(connection);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException("E00058: Could not update setting on " + table);  }}  }
class C{  public void sendSiteNetworkBrokenMail(Site site){  String to=getMailAddressOfUser("root");  if (to == null || to.isEmpty()) {    log.warn("Can't send mail alert, no email address for root user");    return;  }  Map<String,String> parameters=Maps.newHashMap();  parameters.put("standbyName",site.getName());  String title=String.format("ATTENTION - %s network is broken",site.getName());  String content=MailHelper.readTemplate("StandbySiteBroken.html");  content=MailHelper.parseTemplate(parameters,content);  getMailHelper().sendMailMessage(to,title,content);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.213 -0500",hash_original_method="680DEAF903653AA5E9334EFF44E1FB26",hash_generated_method="4616CEC4A7D9ECDAB77031EC98E7681D") public void cubicTo(float x1,float y1,float x2,float y2,float x3,float y3){  isSimplePath=false;  addTaint(x1 + x2 + y1+ y2);}  }
class C{  public void endConnection(){  AuthenticationUtils.endSession();}  }
class C{  public void update(){  if (currentlyHeardPhrases != null) {    currentlyHeardPhrases.clear();  }}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  public PnSignalingParams(MediaConstraints pcConstraints,MediaConstraints videoConstraints,MediaConstraints audioConstraints){  this.iceServers=PnSignalingParams.defaultIceServers();  this.pcConstraints=(pcConstraints == null) ? defaultPcConstraints() : pcConstraints;  this.videoConstraints=(videoConstraints == null) ? defaultVideoConstraints() : videoConstraints;  this.audioConstraints=(audioConstraints == null) ? defaultAudioConstraints() : audioConstraints;}  }
class C{  @DSModeled(DSC.SAFE) public String toShortString(StringBuilder sb){  sb.append(1);  return sb.toString();}  }
class C{  public void flush() throws IOException {  flushCache();  this.out.flush();}  }
class C{  private static String unescapeForEncodeUriCompatability(String str){  return str.replace("%21","!").replace("%7E","~").replace("%27","'").replace("%28","(").replace("%29",")").replace("%3B",";").replace("%2F","/").replace("%3F","?").replace("%3A",":").replace("%40","@").replace("%26","&").replace("%3D","=").replace("%2B","+").replace("%24","$").replace("%2C",",").replace("%23","#");}  }
class C{  public void loadToolboxContents(InputStream source){  mToolboxCategory=BlocklyXmlHelper.loadToolboxFromXml(source,mBlockFactory);}  }
class C{  public Variant(int id,String seq,int start,int end,Allele[] alleles,boolean phased){  super(seq,start,end);  mId=id;  mPhased=phased;  mAlleles=alleles;}  }
class C{  public ClusterJoinRequestMessage(ClusterJoinRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetNode()) {    this.node=new Node(other.node);  }}  }
class C{  public static FDBigInteger valueOfPow52(int p5,int p2){  if (p5 != 0) {    if (p2 == 0) {      return big5pow(p5);    } else     if (p5 < SMALL_5_POW.length) {      int pow5=SMALL_5_POW[p5];      int wordcount=p2 >> 5;      int bitcount=p2 & 0x1f;      if (bitcount == 0) {        return new FDBigInteger(new int[]{pow5},wordcount);      } else {        return new FDBigInteger(new int[]{pow5 << bitcount,pow5 >>> (32 - bitcount)},wordcount);      }    } else {      return big5pow(p5).leftShift(p2);    }  } else {    return valueOfPow2(p2);  }}  }
class C{  private boolean removeConvertedNodes(AbstractNode node){  boolean nodeRemoved=false;  Iterator<AbstractNode> it=node.getChildren().iterator();  while (it.hasNext()) {    FilterJoinNode child=(FilterJoinNode)it.next();    if (child.getState().equals(FilterJoinNode.State.CONVERTED)) {      it.remove();      nodeRemoved|=true;    } else {      nodeRemoved|=this.removeConvertedNodes(child) ? true : false;    }  }  return nodeRemoved;}  }
class C{  String constructComponentName(){synchronized (PopupMenu.class) {    return base + nameCounter++;  }}  }
class C{  public long readLittleEndianLong(){  return (data[position++] & 0xFFL) | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 24 | (data[position++] & 0xFFL) << 32 | (data[position++] & 0xFFL) << 40 | (data[position++] & 0xFFL) << 48 | (data[position++] & 0xFFL) << 56;}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  public DataSource createIsilonUnmanagedFileSystemLocationsDataSource(StorageSystem storageSystem){  return createDataSource(CustomConfigConstants.ISILON_UNMANAGED_FILE_SYSTEM_LOCATIONS,new DataObject[]{storageSystem});}  }
class C{  public static final Instances[] partition(Instances data,int numFolds){  Instances[] rt=new Instances[2];  int splits=data.numInstances() * (numFolds - 1) / numFolds;  rt[0]=new Instances(data,0,splits);  rt[1]=new Instances(data,splits,data.numInstances() - splits);  return rt;}  }
class C{  private static void showDirectoryCreationError(final String directory){  final String message="E00001: " + "Could not create the settings directory";  final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not create the settings directory '%s'.",directory),new String[]{"Your user account does not have sufficient rights to create this directory"},new String[]{"Changes to the global settings will not be saved","The error log file can not be stored"});  NaviErrorDialog.show(null,message,description);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EtchedBorder(int etchType){  this(etchType,null,null);}  }
class C{  public void removeIndex(int idx){  indices.remove(idx);}  }
class C{  boolean isCreated(){  return getWindow() != 0;}  }
class C{  protected void addSpecificationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_SpecificationElement_specification_feature"),getString("_UI_PropertyDescriptor_description","_UI_SpecificationElement_specification_feature","_UI_SpecificationElement_type"),SGraphPackage.Literals.SPECIFICATION_ELEMENT__SPECIFICATION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isSolaris(){  return _isSolaris;}  }
class C{  private Instances defineDataset(Random random) throws Exception {  boolean[] attList_Irr;  int[] attList_Num;  ArrayList<Attribute> attributes=new ArrayList<Attribute>();  Attribute attribute;  ArrayList<String> nominalValues=new ArrayList<String>(2);  nominalValues.add("false");  nominalValues.add("true");  ArrayList<String> classValues=new ArrayList<String>(getNumClasses());  Instances dataset;  attList_Irr=defineIrrelevant(random);  setAttList_Irr(attList_Irr);  attList_Num=defineNumeric(random);  for (int i=0; i < getNumAttributes(); i++) {    if (attList_Num[i] == Attribute.NUMERIC) {      attribute=new Attribute("a" + i);    } else {      attribute=new Attribute("a" + i,nominalValues);    }    attributes.add(attribute);  }  for (int i=0; i < getNumClasses(); i++) {    classValues.add("c" + i);  }  attribute=new Attribute("class",classValues);  attributes.add(attribute);  dataset=new Instances(getRelationNameToUse(),attributes,getNumExamplesAct());  dataset.setClassIndex(getNumAttributes());  Instances format=new Instances(dataset,0);  setDatasetFormat(format);  return dataset;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.149 -0500",hash_original_method="0E90E85A66154559EA3C98CC7177C34F",hash_generated_method="12507F578F76F1D4B4C4275405456B5F") public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  public void readNodesRepeated(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    final String[] parts=line.split(";");    Node node=NetworkUtils.createNode(Id.createNodeId(parts[columnsIndices[0]]));    node.setCoord(new Coord(Double.parseDouble(parts[columnsIndices[1]]),Double.parseDouble(parts[columnsIndices[2]])));    Id<Node> repeated=null;    for (    Id<Node> idB : nodesRep.keySet())     if (network.getNodes().get(idB).getCoord().equals(node.getCoord()))     repeated=idB;    if (repeated != null)     nodesRep.get(repeated).add(node.getId()); else {      List<Id<Node>> reps=new ArrayList<Id<Node>>();      reps.add(node.getId());      nodesRep.put(node.getId(),reps);      network.addNode(node);    }    line=reader.readLine();  }}  }
class C{  public void init(ActionListener doneAction){  _update=false;  _supressDragging=true;  _bottom1Panel=new JPanel();  addShowButtonToBottom();  addUpdateButtonToBottom(doneAction);  initIconFamiliesPanel();  add(_iconFamilyPanel);  add(_bottom1Panel);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public static final Object escapeSQL(String sql,boolean serverSupportsConvertFn,MySQLConnection conn) throws java.sql.SQLException {  boolean replaceEscapeSequence=false;  String escapeSequence=null;  if (sql == null) {    return null;  }  int beginBrace=sql.indexOf('{');  int nextEndBrace=(beginBrace == -1) ? (-1) : sql.indexOf('}',beginBrace);  if (nextEndBrace == -1) {    return sql;  }  StringBuilder newSql=new StringBuilder();  EscapeTokenizer escapeTokenizer=new EscapeTokenizer(sql);  byte usesVariables=StatementImpl.USES_VARIABLES_FALSE;  boolean callingStoredFunction=false;  while (escapeTokenizer.hasMoreTokens()) {    String token=escapeTokenizer.nextToken();    if (token.length() != 0) {      if (token.charAt(0) == '{') {        if (!token.endsWith("}")) {          throw SQLError.createSQLException("Not a valid escape sequence: " + token,conn.getExceptionInterceptor());        }        if (token.length() > 2) {          int nestedBrace=token.indexOf('{',2);          if (nestedBrace != -1) {            StringBuilder buf=new StringBuilder(token.substring(0,1));            Object remainingResults=escapeSQL(token.substring(1,token.length() - 1),serverSupportsConvertFn,conn);            String remaining=null;            if (remainingResults instanceof String) {              remaining=(String)remainingResults;            } else {              remaining=((EscapeProcessorResult)remainingResults).escapedSql;              if (usesVariables != StatementImpl.USES_VARIABLES_TRUE) {                usesVariables=((EscapeProcessorResult)remainingResults).usesVariables;              }            }            buf.append(remaining);            buf.append('}');            token=buf.toString();          }        }        String collapsedToken=removeWhitespace(token);        if (StringUtils.startsWithIgnoreCase(collapsedToken,"{escape")) {          try {            StringTokenizer st=new StringTokenizer(token," '");            st.nextToken();            escapeSequence=st.nextToken();            if (escapeSequence.length() < 3) {              newSql.append(token);            } else {              escapeSequence=escapeSequence.substring(1,escapeSequence.length() - 1);              replaceEscapeSequence=true;            }          } catch (          java.util.NoSuchElementException e) {            newSql.append(token);          }        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{fn")) {          int startPos=token.toLowerCase().indexOf("fn ") + 3;          int endPos=token.length() - 1;          String fnToken=token.substring(startPos,endPos);          if (StringUtils.startsWithIgnoreCaseAndWs(fnToken,"convert")) {            newSql.append(processConvertToken(fnToken,serverSupportsConvertFn,conn));          } else {            newSql.append(fnToken);          }        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{d")) {          int startPos=token.indexOf('\'') + 1;          int endPos=token.lastIndexOf('\'');          if ((startPos == -1) || (endPos == -1)) {            newSql.append(token);          } else {            String argument=token.substring(startPos,endPos);            try {              StringTokenizer st=new StringTokenizer(argument," -");              String year4=st.nextToken();              String month2=st.nextToken();              String day2=st.nextToken();              String dateString="'" + year4 + "-"+ month2+ "-"+ day2+ "'";              newSql.append(dateString);            } catch (            java.util.NoSuchElementException e) {              throw SQLError.createSQLException("Syntax error for DATE escape sequence '" + argument + "'","42000",conn.getExceptionInterceptor());            }          }        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{ts")) {          processTimestampToken(conn,newSql,token);        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{t")) {          processTimeToken(conn,newSql,token);        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{call") || StringUtils.startsWithIgnoreCase(collapsedToken,"{?=call")) {          int startPos=StringUtils.indexOfIgnoreCase(token,"CALL") + 5;          int endPos=token.length() - 1;          if (StringUtils.startsWithIgnoreCase(collapsedToken,"{?=call")) {            callingStoredFunction=true;            newSql.append("SELECT ");            newSql.append(token.substring(startPos,endPos));          } else {            callingStoredFunction=false;            newSql.append("CALL ");            newSql.append(token.substring(startPos,endPos));          }          for (int i=endPos - 1; i >= startPos; i--) {            char c=token.charAt(i);            if (Character.isWhitespace(c)) {              continue;            }            if (c != ')') {              newSql.append("()");            }            break;          }        } else         if (StringUtils.startsWithIgnoreCase(collapsedToken,"{oj")) {          newSql.append(token);        } else {          newSql.append(token);        }      } else {        newSql.append(token);      }    }  }  String escapedSql=newSql.toString();  if (replaceEscapeSequence) {    String currentSql=escapedSql;    while (currentSql.indexOf(escapeSequence) != -1) {      int escapePos=currentSql.indexOf(escapeSequence);      String lhs=currentSql.substring(0,escapePos);      String rhs=currentSql.substring(escapePos + 1,currentSql.length());      currentSql=lhs + "\\" + rhs;    }    escapedSql=currentSql;  }  EscapeProcessorResult epr=new EscapeProcessorResult();  epr.escapedSql=escapedSql;  epr.callingStoredFunction=callingStoredFunction;  if (usesVariables != StatementImpl.USES_VARIABLES_TRUE) {    if (escapeTokenizer.sawVariableUse()) {      epr.usesVariables=StatementImpl.USES_VARIABLES_TRUE;    } else {      epr.usesVariables=StatementImpl.USES_VARIABLES_FALSE;    }  }  return epr;}  }
class C{  public void updateAsciiStream(String columnLabel,java.io.InputStream x) throws SQLException {}  }
class C{  private void completeOrCancelFolderNaming(boolean cancel){  if (!cancel && !TextUtils.isEmpty(mFolderNamer.getText())) {    String name=mFolderNamer.getText().toString();    long id=addFolderToCurrent(mFolderNamer.getText().toString());    descendInto(name,id);  }  setShowFolderNamer(false);  mAddNewFolder.setVisibility(View.GONE);  mAddSeparator.setVisibility(View.VISIBLE);  getInputMethodManager().hideSoftInputFromWindow(mFolderNamer.getWindowToken(),0);}  }
class C{  public Base64InputStream(final String encodedString){  this.buf=this.decode(encodedString);  this.pos=0;  this.count=this.buf.length;}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public ShardId shardId(){  return this.shardId;}  }
class C{  protected boolean hasMethod(T model,String method,int params){  requireNonNull(model);  requireNonNull(method);  requireNonNull(params);  Method found=null;  for (  Method m : model.getMethods()) {    if (method.equals(m.getName()) && m.getFields().size() == params) {      found=m;      break;    }  }  return found != null;}  }
class C{  public static Predicate<String> startsWith(final String pattern){  Objects.requireNonNull(pattern,"The pattern must not be null");  return null;}  }
class C{  private void updateSignature(Signature signature,Random clientRandom,Random serverRandom) throws SignatureException {  signature.update(clientRandom.getRandomBytes());  signature.update(serverRandom.getRandomBytes());switch (curveType) {case EXPLICIT_PRIME:case EXPLICIT_CHAR2:    break;case NAMED_CURVE:  updateSignatureForNamedCurve(signature);break;default :LOGGER.log(Level.WARNING,MSG_UNKNOWN_CURVE_TYPE,curveType);break;}}  }
class C{  protected Message tryAllMessages(Connection con,List<Message> messages){  for (  Message m : messages) {    int retVal=startTransfer(m,con);    if (retVal == RCV_OK) {      return m;    } else     if (retVal > 0) {      return null;    }  }  return null;}  }
class C{  public String shortestMatch(String input){  TrieNode node=root;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     return null;    if (node.isTerminal())     return input.substring(0,i + 1);  }  return null;}  }
class C{  public NamedThreadPoolExecutor(String poolName,int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> queue){  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,queue,new NamedThreadFactory(poolName));  setPoolName(poolName);}  }
class C{  public static DataInMemory loadDelayQuality(File directory,IndexFile index,DataFileIndex seqIndex,long start,long end) throws IOException {  final PointerLoader point=new PointerLoader(directory,index,seqIndex,start,end);  final SequenceLoader seq;  final QualityLoader qual;  if (start < end) {    point.loadPointers();    seq=new SequenceLoader(point);    qual=new QualityLoader(point);    seq.loadSequenceData();  } else {    seq=new SequenceLoader(point);    qual=new QualityLoader(point);  }  return new DataInMemory(point.mPointers,point.mSequenceChecksums,point.mQualityChecksums,seq.mSequenceData,qual);}  }
class C{  public final String toString(String indentationPrefix){  return indentationPrefix + toString();}  }
class C{  public void addProxyToMap(ObjectName objectName,RegionMXBean proxy,FederationComponent newState){  mapOfProxy.put(objectName,proxy);  setSize=mapOfProxy.keySet().size();  updateRegion(newState,null);}  }
class C{  public static void register(final CounterSetFormat format){  formats.add(format);}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  protected Node newNode(){  return new SVGOMSolidColorElement();}  }
class C{  public void postActionEvent(){  fireActionPerformed();}  }
class C{  public static void deleteFile(String filePath) throws IOException {  try {    File file=new File(filePath);    file.delete();  } catch (  Exception e) {    log.error("Failed to delete {}.",filePath,e);  }}  }
class C{  private void checkFileReopening(FileObject fileObject,boolean addToHistory) throws FilerException {  for (  FileObject veteran : fileObjectHistory) {    if (fileManager.isSameFile(veteran,fileObject)) {      if (lint)       log.warning("proc.file.reopening",fileObject.getName());      throw new FilerException("Attempt to reopen a file for path " + fileObject.getName());    }  }  if (addToHistory)   fileObjectHistory.add(fileObject);}  }
class C{  public SloRequestSettings(String spAlias,String idpAlias,Boolean isSigned,String subject,String nameIDFormat,String sessionIndex,String relayState){  this.spAlias=spAlias;  this.idpAlias=idpAlias;  this.isSigned=isSigned;  this.subject=subject;  this.nameIDFormat=nameIDFormat;  this.sessionIndex=sessionIndex;  this.setRelayState(relayState);}  }
class C{  private int findVertex(S2Point p){  if (vertexToIndex == null) {    vertexToIndex=new HashMap<S2Point,Integer>();    for (int i=1; i <= numVertices; i++) {      vertexToIndex.put(vertex(i),i);    }  }  Integer index=vertexToIndex.get(p);  if (index == null) {    return -1;  } else {    return index;  }}  }
class C{  public int hashCode(){  if (!isHashCodeChosen) {    if (name != null & type != null)     fixedHashCode=name.hashCode() + 19 * type.hashCode(); else     if (name != null)     fixedHashCode=name.hashCode(); else     if (type != null)     fixedHashCode=type.hashCode(); else     fixedHashCode=1;    isHashCodeChosen=true;  }  return fixedHashCode;}  }
class C{  public static void skipFully(Reader reader,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=reader.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public static String findPathJar(Class<?> context) throws IllegalStateException {  if (context == null) {    context=DynamicJarPathFinder.class;  }  String rawName=context.getName();  String classFileName;{    int idx=rawName.lastIndexOf('.');    classFileName=(idx == -1 ? rawName : rawName.substring(idx + 1)) + ".class";  }  String uri=context.getResource(classFileName).toString();  if (uri.startsWith("file:")) {    throw new IllegalStateException("This class has been loaded from a directory and not from a jar file.");  }  if (!uri.startsWith("jar:file:")) {    int idx=uri.indexOf(':');    String protocol=idx == -1 ? "(unknown)" : uri.substring(0,idx);    throw new IllegalStateException("This class has been loaded remotely via the " + protocol + " protocol. Only loading from a jar on the local file system is supported.");  }  int idx=uri.indexOf('!');  if (idx == -1) {    throw new IllegalStateException("You appear to have loaded this class from a local jar file, but I can't make sense of the URL!");  }  try {    String fileName=URLDecoder.decode(uri.substring("jar:file:".length(),idx),Charset.defaultCharset().name());    return new File(fileName).getAbsolutePath();  } catch (  UnsupportedEncodingException e) {    throw new InternalError("default charset doesn't exist. Your VM is borked.");  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Format: " + getFormat()+ "\n");  buf.append(indent + "Count : " + getCount()+ "\n");  for (Iterator i=records.keySet().iterator(); i.hasNext(); ) {    NameRecord rec=(NameRecord)i.next();    buf.append(indent + " platformID: " + rec.platformID);    buf.append(" platformSpecificID: " + rec.platformSpecificID);    buf.append(" languageID: " + rec.languageID);    buf.append(" nameID: " + rec.nameID + "\n");    buf.append(indent + "  " + records.get(rec)+ "\n");  }  return buf.toString();}  }
class C{  public CloseableStaticBitmap(CloseableReference<Bitmap> bitmapReference,QualityInfo qualityInfo,int rotationAngle){  mBitmapReference=Preconditions.checkNotNull(bitmapReference.cloneOrNull());  mBitmap=mBitmapReference.get();  mQualityInfo=qualityInfo;  mRotationAngle=rotationAngle;}  }
class C{  public boolean hasPools(){  return _poolHashTable.size() > 0;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.295 -0500",hash_original_method="4027197A668FB712D0A5A09027B96247",hash_generated_method="9253179FA8FD9943E9EC8B7E0F2095E8") public Criteria(Criteria criteria){  mHorizontalAccuracy=criteria.mHorizontalAccuracy;  mVerticalAccuracy=criteria.mVerticalAccuracy;  mSpeedAccuracy=criteria.mSpeedAccuracy;  mBearingAccuracy=criteria.mBearingAccuracy;  mPowerRequirement=criteria.mPowerRequirement;  mAltitudeRequired=criteria.mAltitudeRequired;  mBearingRequired=criteria.mBearingRequired;  mSpeedRequired=criteria.mSpeedRequired;  mCostAllowed=criteria.mCostAllowed;}  }
class C{  public List<Properties> findAvailableProperties(String uri) throws IOException {  _resourcesNotLoaded.clear();  String fulluri=_path + uri;  List<Properties> properties=new ArrayList<>();  Enumeration<URL> resources=getResources(fulluri);  while (resources.hasMoreElements()) {    URL url=resources.nextElement();    try {      Properties props=loadProperties(url);      properties.add(props);    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(url.toExternalForm());    }  }  return properties;}  }
class C{  private Boolean isInsideCITemplate(Page page){  SourceCode sc=page.getSourceCode();  if (!(sc instanceof PageSourceCode))   return null;  PageSource psc=((PageSourceCode)sc).getPageSource();  String src=psc.getDisplayPath();  return Constants.isComponentExtension(ResourceUtil.getExtension(src,""));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.716 -0500",hash_original_method="388DE5D31708B68044E586CE034D55F9",hash_generated_method="85827F502261E6A1AE0E28DC01409AA6") public static String makeKey(String host,int port,String transport){  return new StringBuffer(host).append(":").append(port).append("/").append(transport).toString().toLowerCase();}  }
class C{  public static IChange removeText(IXtextDocument doc,int offset,int length,boolean removeEntireLineIfEmpty) throws BadLocationException {  if (!removeEntireLineIfEmpty) {    return new Replacement(getURI(doc),offset,length,"");  } else {    final IRegion linesRegion=DocumentUtilN4.getLineInformationOfRegion(doc,offset,length,true);    final String lines=doc.get(linesRegion.getOffset(),linesRegion.getLength());    final int offsetRelative=offset - linesRegion.getOffset();    final String lineAfterRemoval=removeSubstring(lines,offsetRelative,length);    final boolean isEmptyAfterRemoval=lineAfterRemoval.trim().isEmpty();    if (isEmptyAfterRemoval) {      return new Replacement(getURI(doc),linesRegion.getOffset(),linesRegion.getLength(),"");    } else {      return new Replacement(getURI(doc),offset,length,"");    }  }}  }
class C{  public boolean isEnabled(LintCategory lc){  return values.contains(lc);}  }
class C{  public ODataVersion(){}  }
class C{  protected final String configInfo(String name,Object val){  assert name != null;  return "Using parameter [" + name + '='+ val+ ']';}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  public String changeStatus(String status){  UriBuilder builder=client.uriBuilder(PathConstants.IPSEC_URL);  addQueryParam(builder,STATUS_PARAM,status);  return client.postURI(String.class,builder.build());}  }
class C{  public void startSession(){  if (processor != null) {    processor.startProcessing();  }}  }
class C{  public static void main(String... a) throws Exception {  System.setProperty("h2.useThreadContextClassLoader","true");  TestBase.createCaller().init().test();}  }
class C{  public void testSynonyms() throws Exception {  SynonymQuery expected=new SynonymQuery(new Term("field","dogs"),new Term("field","dog"));  QueryBuilder builder=new QueryBuilder(new MockSynonymAnalyzer());  assertEquals(expected,builder.createBooleanQuery("field","dogs"));  assertEquals(expected,builder.createPhraseQuery("field","dogs"));  assertEquals(expected,builder.createBooleanQuery("field","dogs",BooleanClause.Occur.MUST));  assertEquals(expected,builder.createPhraseQuery("field","dogs"));}  }
class C{  public EventAttribute(final String name,final String description,final ScalarType type){  this.name=name;  this.description=description;  this.type=type;}  }
class C{  public static void main(final String[] args){  if (args.length != 1) {    throw new IllegalArgumentException("Configuration File ist missing.");  }  try {    ConfigSettings config=readConfiguration(args[0]);    new DiffToolThread(config).run();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Map<String,Map<String,Flt>> retrieveTerms(int docNum,String[] fields,Map<String,Map<String,Flt>> fieldToTermFreqMap) throws IOException {  if (fieldToTermFreqMap == null) {    fieldToTermFreqMap=new HashMap<String,Map<String,Flt>>();  }  if (fields == null || fields.length == 0) {    return fieldToTermFreqMap;  }  final Fields vectors=ir.getTermVectors(docNum);  final Document document=ir.document(docNum);  for (  String fieldName : fields) {    Map<String,Flt> termFreqMap=null;    if (fieldToTermFreqMap.containsKey(fieldName)) {      termFreqMap=fieldToTermFreqMap.get(fieldName);    } else {      termFreqMap=new HashMap<String,Flt>();      fieldToTermFreqMap.put(fieldName,termFreqMap);    }    Terms vector=null;    if (vectors != null) {      vector=vectors.terms(fieldName);    }    if (vector == null || isPayloadField(fieldName)) {      IndexableField docFields[]=document.getFields(fieldName);      for (      IndexableField field : docFields) {        final String stringValue=field.stringValue();        if (stringValue != null) {          addTermWeights(new StringReader(stringValue),termFreqMap,fieldName);        }      }    } else {      addTermWeights(termFreqMap,vector);    }  }  return fieldToTermFreqMap;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    OPENLOG.E(e.toString());    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();    OPENLOG.E(e.toString());  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public List<Integer> grayCode(int n){  List<Integer> results=new ArrayList<Integer>();  results.add(0);  for (int i=0; i < n; i++) {    int inc=1 << i;    for (int j=results.size() - 1; j >= 0; j--) {      results.add(results.get(j) + inc);    }  }  return results;}  }
class C{  public ChannelEvent(Channel channel,Event event){  mChannel=channel;  mEvent=event;}  }
class C{  public String encodeBody(){  return text != null ? Integer.toString(code) + SP + agent+ SP+ DOUBLE_QUOTE+ text+ DOUBLE_QUOTE : Integer.toString(code) + SP + agent;}  }
class C{  public static void main(String[] args){  try {    InetAddress.getLocalHost();  } catch (  UnknownHostException ignored) {    return;  }  int jmxPort=IgniteSystemProperties.getInteger(IGNITE_JMX_PORT,-1);  if (jmxPort != -1) {    System.out.println(jmxPort);    return;  }  RandomAccessFile ra=null;  FileLock lock=null;  try {    File file=new File(System.getProperty("java.io.tmpdir"),"ignite.lastport.tmp");    file.setReadable(true,false);    file.setWritable(true,false);    ra=new RandomAccessFile(file,"rw");    lock=ra.getChannel().lock();    ra.seek(0);    String startPortStr=ra.readLine();    int startPort=MIN_PORT;    if (startPortStr != null && !startPortStr.isEmpty()) {      try {        startPort=Integer.valueOf(startPortStr) + 1;        if (startPort < MIN_PORT || startPort > MAX_PORT)         startPort=MIN_PORT;      } catch (      NumberFormatException ignored) {      }    }    int port=findPort(startPort);    ra.setLength(0);    ra.writeBytes(String.valueOf(port));    System.out.println(port);  } catch (  IOException ignored) {  } finally {    if (lock != null)     try {      lock.release();    } catch (    IOException ignored) {    }    if (ra != null)     try {      ra.close();    } catch (    IOException ignored) {    }  }}  }
class C{  @Override public Instance mergeInstance(Instance inst){  int[] indices=new int[numValues() + inst.numValues()];  int m=0;  for (int j=0; j < numValues(); j++) {    indices[m++]=index(j);  }  for (int j=0; j < inst.numValues(); j++) {    if (inst.valueSparse(j) != 0) {      indices[m++]=numAttributes() + inst.index(j);    }  }  if (m != indices.length) {    int[] newInd=new int[m];    System.arraycopy(indices,0,newInd,0,m);    indices=newInd;  }  return new BinarySparseInstance(1.0,indices,numAttributes() + inst.numAttributes());}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  put(key,Boolean.valueOf(value));  return this;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static CompactSketch intersect(CompactSketch skA,CompactSketch skB){  final short seedHash=checkOrderedAndSeedHash(skA,skB);  long thetaLong=Math.min(skA.getThetaLong(),skB.getThetaLong());  int indexA=0;  int indexB=0;  int outCount=0;  long[] cacheA=skA.getCache();  long[] cacheB=skB.getCache();  long[] outCache=new long[Math.min(cacheA.length,cacheB.length)];  while ((indexA < cacheA.length) && (indexB < cacheB.length)) {    long hashA=cacheA[indexA];    long hashB=cacheB[indexB];    if (hashA >= thetaLong || hashB >= thetaLong) {      break;    }    if (hashA == hashB) {      outCache[outCount++]=hashA;      ++indexA;      ++indexB;    } else     if (hashA < hashB) {      ++indexA;    } else {      ++indexB;    }  }  boolean empty=skA.isEmpty() || skB.isEmpty();  return new HeapCompactOrderedSketch(Arrays.copyOf(outCache,outCount),empty,seedHash,outCount,thetaLong);}  }
class C{  public static void shareToMessenger(Activity activity,int requestCode,ShareToMessengerParams shareToMessengerParams){  if (!MessengerUtils.hasMessengerInstalled(activity)) {    MessengerUtils.openMessengerInPlayStore(activity);    return;  }  Set<Integer> allAvailableVersions=getAllAvailableProtocolVersions(activity);  if (allAvailableVersions.contains(PROTOCOL_VERSION_20150314)) {    shareToMessenger20150314(activity,requestCode,shareToMessengerParams);  } else {    MessengerUtils.openMessengerInPlayStore(activity);  }}  }
class C{  public LogarithmicRenderer2D(){}  }
class C{  public TemplateException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testGetWarContextWhenContextAlreadySetupAndJBossWebXml() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-context.war"));  war.setContext("context");  assertEquals("testcontext",war.getContext());}  }
class C{  public boolean isCreateTopLevel(){  return JavaRefactoringDescriptorUtil.getBoolean(fArguments,CREATE_TOP_LEVEL,true);}  }
class C{  public static <T>FutureW<T> ofError(final Throwable error){  final CompletableFuture<T> cf=new CompletableFuture<>();  cf.completeExceptionally(error);  return FutureW.<T>of(cf);}  }
class C{  public static JCExpression skipParens(JCExpression tree){  while (tree.hasTag(PARENS)) {    tree=((JCParens)tree).expr;  }  return tree;}  }
class C{  @SuppressWarnings("unchecked") public final T index(String index){  this.index=index;  return (T)this;}  }
class C{  protected void updateFunctionGroup5(int fns){  this.f21=((fns & CbusConstants.CBUS_F21) == CbusConstants.CBUS_F21);  this.f22=((fns & CbusConstants.CBUS_F22) == CbusConstants.CBUS_F22);  this.f23=((fns & CbusConstants.CBUS_F23) == CbusConstants.CBUS_F23);  this.f24=((fns & CbusConstants.CBUS_F24) == CbusConstants.CBUS_F24);  this.f25=((fns & CbusConstants.CBUS_F25) == CbusConstants.CBUS_F25);  this.f26=((fns & CbusConstants.CBUS_F26) == CbusConstants.CBUS_F26);  this.f27=((fns & CbusConstants.CBUS_F27) == CbusConstants.CBUS_F27);  this.f28=((fns & CbusConstants.CBUS_F28) == CbusConstants.CBUS_F28);}  }
class C{  public InlineQueryResultCachedGifBuilder gifFileId(String gifFileId){  this.gif_file_id=gifFileId;  return this;}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_ResultProducer != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  m_Keys.add(key);  m_Results.add(result);}  }
class C{  public boolean isParcelBasedAccessibility(){  return parcelBasedAccessibility;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  double scaleMin=0;  double scaleMax=1;  double imageMin=0;  double imageMax=1;  double imageRange=1;  double[] data=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  String[] constraints=args[1].split(";");  outputHeader=args[2];  String commonScale=args[3];  if (commonScale.equals("0-1")) {    scaleMin=0;    scaleMax=1;  } else   if (commonScale.equals("0-100")) {    scaleMin=0;    scaleMax=100;  } else   if (commonScale.equals("0-255")) {    scaleMin=0;    scaleMax=255;  }  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ArrayList<Boolean> costFactor=new ArrayList<Boolean>();    ArrayList<String> imageFiles=new ArrayList<String>();    ArrayList<Double> weights=new ArrayList<Double>();    for (a=0; a < dataSplit.length; a+=3) {      if (!dataSplit[a + 1].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {        costFactor.add(Boolean.parseBoolean(dataSplit[a]));        imageFiles.add(dataSplit[a + 1].trim());        weights.add(Double.parseDouble(dataSplit[a + 2]));        sumOfWeights+=weights.get(numImages);        numImages++;      }    }    if (numImages < 2) {      showFeedback("At least two factor images must be specified.");      return;    }    for (a=0; a < numImages; a++) {      d=weights.get(a) / sumOfWeights;      weights.set(a,d);    }    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMin=image.getMinimumValue();      imageMax=image.getMaximumValue();      imageRange=imageMax - imageMin;      Boolean boolCost=costFactor.get(i);      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (!boolCost) {                d=(data[col] - imageMin) / imageRange * scaleMax;                output.setValue(row,col,z + d * weight);              } else {                d=(1 - (data[col] - imageMin) / imageRange) * scaleMax;                output.setValue(row,col,z + d * weight);              }            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    for (i=0; i < constraints.length; i++) {      image=new WhiteboxRaster(constraints[i].trim(),"r");      noData=image.getNoDataValue();      if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {        showFeedback("All input images must have the same dimensions (rows and columns).");        return;      }      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData && data[col] <= 0) {            if (output.getValue(row,col) != outputNoData) {              output.setValue(row,col,scaleMin);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean contains(final float[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  private void createContents(){  shell=new Shell();  shell.setSize(600,450);  shell.setText(getText());  shell.setLayout(new GridLayout(1,false));}  }
class C{  public void deleteSelectedObjects(){  final List<Object> deletedObjects=new ArrayList<Object>();  for (  PNode selectedNode : getSelection()) {    if (selectedNode instanceof NeuronNode) {      NeuronNode selectedNeuronNode=(NeuronNode)selectedNode;      final Neuron neuron=selectedNeuronNode.getNeuron();      network.removeNeuron(neuron);      deletedObjects.add(neuron);    } else     if (selectedNode instanceof SynapseNode) {      SynapseNode selectedSynapseNode=(SynapseNode)selectedNode;      network.removeSynapse(selectedSynapseNode.getSynapse());      deletedObjects.add(selectedSynapseNode.getSynapse());    } else     if (selectedNode instanceof TextNode) {      TextNode selectedTextNode=(TextNode)selectedNode;      network.deleteText(selectedTextNode.getTextObject());      deletedObjects.add(selectedTextNode.getTextObject());    } else     if (selectedNode instanceof InteractionBox) {      if (selectedNode.getParent() instanceof NeuronGroupNode) {        network.removeGroup(((NeuronGroupNode)selectedNode.getParent()).getNeuronGroup());      } else       if (selectedNode.getParent() instanceof SynapseGroupNode) {        network.removeGroup(((SynapseGroupNode)selectedNode.getParent()).getSynapseGroup());      } else       if (selectedNode.getParent() instanceof SubnetworkNode) {        network.removeGroup(((SubnetworkNode)selectedNode.getParent()).getSubnetwork());      }    }  }}  }
class C{  private static void encode(int val,byte[] bytes,int offset){  NumericUtils.intToSortableBytes(val,bytes,offset);}  }
class C{  public static void checkForExportRuleToModify(HashMap<String,ExportRule> sourceExportRuleMap,HashMap<String,ExportRule> targetExportRuleMap,List<ExportRule> exportRulesToModify){  for (  String secFlavour : sourceExportRuleMap.keySet()) {    if (targetExportRuleMap.get(secFlavour) != null) {      boolean isExportRuleToModify=false;      ExportRule sourceExportRule=sourceExportRuleMap.get(secFlavour);      ExportRule targetExportRule=targetExportRuleMap.get(secFlavour);      if (isEndPointsDifferent(sourceExportRule.getReadWriteHosts(),targetExportRule.getReadWriteHosts())) {        isExportRuleToModify=true;        targetExportRule.setReadWriteHosts(sourceExportRule.getReadWriteHosts());      }      if (isEndPointsDifferent(sourceExportRule.getReadOnlyHosts(),targetExportRule.getReadOnlyHosts())) {        isExportRuleToModify=true;        targetExportRule.setReadOnlyHosts(sourceExportRule.getReadOnlyHosts());      }      if (isEndPointsDifferent(sourceExportRule.getRootHosts(),targetExportRule.getRootHosts())) {        isExportRuleToModify=true;        targetExportRule.setRootHosts(sourceExportRule.getRootHosts());      }      if (sourceExportRule.getAnon() != null && !sourceExportRule.getAnon().equals(targetExportRule.getAnon())) {        isExportRuleToModify=true;        targetExportRule.setAnon(sourceExportRule.getAnon());      }      if (isExportRuleToModify) {        exportRulesToModify.add(targetExportRule);      }    }  }}  }
class C{  @VisibleForTesting RevisionMetadata parseMetadata(String log){  if (Strings.isNullOrEmpty(log.trim())) {    return null;  }  List<String> split=Splitter.on(LOG_DELIMITER).limit(5).splitToList(log);  ImmutableList.Builder<Revision> parentBuilder=ImmutableList.<Revision>builder();  for (  String parent : Splitter.on(' ').omitEmptyStrings().split(split.get(3))) {    parentBuilder.add(Revision.create(parent,headCloneSupplier.get().getRepositoryName()));  }  DateTime date=GIT_DATE_FMT.parseDateTime(split.get(2));  return RevisionMetadata.builder().id(split.get(0)).author(split.get(1)).date(date).description(split.get(4)).withParents(parentBuilder.build()).build();}  }
class C{  public ExcelResultSetConfiguration(){}  }
class C{  public Collection<Measure> M(){  ArrayList<Measure> measures=new ArrayList<Measure>();  try {    List<Metric> metrics=DomainHierarchyManager.INSTANCE.getHierarchy(universe.getProject().getId(),domain,true).getMetrics(universe.getContext());    for (    Metric m : metrics) {      measures.add(new Measure(this,m));    }  } catch (  ComputingException|InterruptedException e) {  }  return measures;}  }
class C{  public final Attribute attribute(String name){  for (int i=0; i < numAttributes(); i++) {    if (attribute(i).name().equals(name)) {      return attribute(i);    }  }  return null;}  }
class C{  public CompanySerializer(){}  }
class C{  String processTemplate(final List<String> mailTemplateChain,final String shopCode,final String locale,final String fileName,final String ext,final Map<String,Object> model){  return processTemplate(mailTemplateChain,shopCode,locale,fileName,ext,model,false);}  }
class C{  public DNetscapeCaRevocationUrl(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeCaRevocationUrl.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public void testGetF20Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF20Momentary();  assertEquals(expResult,result);}  }
class C{  public Triple(Node x,Node y,Node z){  if (x == null || y == null || z == null) {    throw new NullPointerException();  }  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Override public void onInvokeV(String signature,boolean isNative,Object caller){}  }
class C{  public void deferOnDragEnd(){  mDeferOnDragEnd=true;}  }
class C{  protected void computeAxisValues(float min,float max){  float yMin=min;  float yMax=max;  int labelCount=mYAxis.getLabelCount();  double range=Math.abs(yMax - yMin);  if (labelCount == 0 || range <= 0) {    mYAxis.mEntries=new float[]{};    mYAxis.mEntryCount=0;    return;  }  double rawInterval=range / labelCount;  double interval=Utils.roundToNextSignificant(rawInterval);  double intervalMagnitude=Math.pow(10,(int)Math.log10(interval));  int intervalSigDigit=(int)(interval / intervalMagnitude);  if (intervalSigDigit > 5) {    interval=Math.floor(10 * intervalMagnitude);  }  if (mYAxis.isShowOnlyMinMaxEnabled()) {    mYAxis.mEntryCount=2;    mYAxis.mEntries=new float[2];    mYAxis.mEntries[0]=yMin;    mYAxis.mEntries[1]=yMax;  } else {    double first=Math.ceil(yMin / interval) * interval;    double last=Utils.nextUp(Math.floor(yMax / interval) * interval);    double f;    int i;    int n=0;    for (f=first; f <= last; f+=interval) {      ++n;    }    mYAxis.mEntryCount=n;    if (mYAxis.mEntries.length < n) {      mYAxis.mEntries=new float[n];    }    for (f=first, i=0; i < n; f+=interval, ++i) {      mYAxis.mEntries[i]=(float)f;    }  }  if (interval < 1) {    mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval));  } else {    mYAxis.mDecimals=0;  }}  }
class C{  public static String formatTime(double time){  boolean negative=false;  if (time < 0) {    negative=true;    time*=-1;  }  int hours=(int)time / 3600;  int minutes=(int)(time - (hours * 3600)) / 60;  int seconds=(int)time - (hours * 3600) - (minutes * 60);  String hoursString=hours + "";  String minutesString=minutes + "";  String secondsString=seconds + "";  while (minutesString.length() < 2) {    minutesString="0" + minutesString;  }  while (secondsString.length() < 2) {    secondsString="0" + secondsString;  }  return (negative ? "-" : "") + (hours == 0 ? "" : hoursString + ":") + minutesString+ ":"+ secondsString;}  }
class C{  public InvalidContentTypeFromServerProxy(){  requestFileName="proxyemulator.query";  responseFile="getstate.query";  responseContentType="oih";}  }
class C{  public static void loadCompilationUnits(Configuration configuration,FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,ResourceBundlePath bundlePath,List sources,List<CompilationUnit> units,int[] checksums,Map<QName,Long> swcDefSignatureChecksums,Map<String,Long> swcFileChecksums,RandomAccessFile f,String cacheName) throws IOException {  loadCompilationUnits(configuration,fileSpec,sourceList,sourcePath,resources,bundlePath,sources,units,checksums,swcDefSignatureChecksums,swcFileChecksums,null,f,cacheName,null);}  }
class C{  public boolean isComplete(){  return completed;}  }
class C{  private String parseToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  while (hasChar()) {    ch=chars[pos];    if (isOneOf(ch,terminators)) {      break;    }    i2++;    pos++;  }  return getToken(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.573 -0400",hash_original_method="AA41ECB0FD8460C872351D9420D4F3BB",hash_generated_method="436E622957C5CA1B703588F15453314A") @Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {  if (uri == null || responseHeaders == null) {    throw new IllegalArgumentException();  }  List<HttpCookie> cookies=parseCookie(responseHeaders);  for (  HttpCookie cookie : cookies) {    if (cookie.getDomain() == null) {      cookie.setDomain(uri.getHost());    }    if (cookie.getPath() == null) {      cookie.setPath(pathToCookiePath(uri.getPath()));    } else     if (!HttpCookie.pathMatches(cookie,uri)) {      continue;    }    if ("".equals(cookie.getPortlist())) {      cookie.setPortlist(Integer.toString(uri.getEffectivePort()));    } else     if (cookie.getPortlist() != null && !HttpCookie.portMatches(cookie,uri)) {      continue;    }    if (policy.shouldAccept(uri,cookie)) {      store.add(uri,cookie);    }  }}  }
class C{  public static char[] subarray(final char[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  char[] subarray=new char[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public AbstractRStarTreeNode(int capacity,boolean isLeaf,Class<? super E> eclass){  super(capacity,isLeaf,eclass);}  }
class C{  public SQLException(String theReason,String theSQLState,int theErrorCode,Throwable theCause){  this(theReason,theSQLState,theCause);  vendorCode=theErrorCode;}  }
class C{  public static boolean allDisabled(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  checkArguments(debuggerProvider,rows);  for (  final int row : rows) {    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(debuggerProvider,row);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    if (manager.getBreakpointStatus(BreakpointType.REGULAR,breakpointIndex) != BreakpointStatus.BREAKPOINT_DISABLED) {      return false;    }  }  return true;}  }
class C{  private static byte[] convertToBytes(char[] pass){  if (enc == null) {synchronized (Password.class) {      enc=sun.misc.SharedSecrets.getJavaIOAccess().charset().newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE);    }  }  byte[] ba=new byte[(int)(enc.maxBytesPerChar() * pass.length)];  ByteBuffer bb=ByteBuffer.wrap(ba);synchronized (enc) {    enc.reset().encode(CharBuffer.wrap(pass),bb,true);  }  if (bb.position() < ba.length) {    ba[bb.position()]='\n';  }  return ba;}  }
class C{  @Override public boolean locatorsUpdateCopy(){  debugCodeCall("locatorsUpdateCopy");  return false;}  }
class C{  public int pop(){  pointer--;  if (pointer >= 0) {    return stack[pointer];  }  throw new RuntimeException("Popped an empty stack!");}  }
class C{  public void writeExternal(ObjectOutput os) throws IOException {  if (os instanceof ObjectOutputStream) {    ObjectOutputStream oos=(ObjectOutputStream)os;    FastBufferedDataOutputStream fos=new FastBufferedDataOutputStream(oos);    writeHeaderAndPayload(fos);    fos.flush();  } else {    writeHeaderAndPayload(os);  }}  }
class C{  private String stripPOSFromSupersense(String sense){  final int index=sense.indexOf(".") + 1;  if (index != 0) {    return sense.substring(index);  } else {    return sense;  }}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private void initializeLayout(){  JPanel sliderPanel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=5;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.anchor=GridBagConstraints.CENTER;  gbc.insets=new Insets(5,5,5,5);  sliderPanel.add(ratioSlider,gbc);  gbc.insets=new Insets(5,5,0,5);  gbc.gridx=1;  gbc.gridy=1;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.NONE;  JPanel inTfPanel=new JPanel(new FlowLayout());  Dimension iRatioSize=iRatio.getPreferredSize();  iRatioSize.width=40;  iRatio.setPreferredSize(iRatioSize);  inTfPanel.add(new JLabel("% Inhibitory"));  inTfPanel.add(iRatio);  sliderPanel.add(inTfPanel,gbc);  gbc.gridx=2;  gbc.gridwidth=1;  gbc.weightx=0;  JPanel blank=new JPanel();  blank.setPreferredSize(new Dimension(60,10));  blank.setMinimumSize(new Dimension(60,10));  sliderPanel.add(blank,gbc);  gbc.gridx=3;  gbc.weightx=0;  gbc.gridwidth=1;  JPanel exTfPanel=new JPanel(new FlowLayout());  Dimension eRatioSize=eRatio.getPreferredSize();  eRatioSize.width=40;  eRatio.setPreferredSize(eRatioSize);  exTfPanel.add(new JLabel("% Excitatory"));  exTfPanel.add(eRatio);  sliderPanel.add(exTfPanel,gbc);  gbc.gridx=4;  gbc.gridwidth=1;  gbc.weightx=0;  gbc.fill=GridBagConstraints.NONE;  sliderPanel.add(warning,gbc);  warning.setVisible(false);  if (!creationPanel) {    gbc.gridwidth=1;    gbc.fill=GridBagConstraints.NONE;    gbc.anchor=GridBagConstraints.EAST;    gbc.gridx=4;    gbc.gridy=2;    gbc.insets=new Insets(10,5,5,10);    sliderPanel.add(sliderApply,gbc);  }  Border sliderBorder=BorderFactory.createTitledBorder("Inhibitory/Excitatory Ratio");  sliderPanel.setBorder(sliderBorder);  this.setLayout(new BorderLayout());  this.add(sliderPanel,BorderLayout.NORTH);  if (RandBehavior.FORCE_OFF != randomizerState) {    this.add(Box.createVerticalStrut(10),BorderLayout.CENTER);    JPanel dualRandomizerPanel=new JPanel();    dualRandomizerPanel.setLayout(new BoxLayout(dualRandomizerPanel,BoxLayout.X_AXIS));    Box inBox=Box.createVerticalBox();    Box exBox=Box.createVerticalBox();    inBox.setAlignmentY(Component.TOP_ALIGNMENT);    inBox.add(inhibitoryRandomizerPanel);    inBox.add(Box.createVerticalGlue());    inBox.add(new JPanel());    exBox.setAlignmentY(Component.TOP_ALIGNMENT);    exBox.add(excitatoryRandomizerPanel);    exBox.add(Box.createVerticalGlue());    exBox.add(new JPanel());    dualRandomizerPanel.add(inBox);    dualRandomizerPanel.add(Box.createHorizontalStrut(5));    dualRandomizerPanel.add(exBox);    this.add(dualRandomizerPanel,BorderLayout.SOUTH);  }}  }
class C{  protected static Object[] concatenate(Object[] a1,Object[] a2){  int a1Len=a1.length;  int a2Len=a2.length;  if (a1Len == 0)   return a2;  if (a2Len == 0)   return a1;  Object[] res=new Object[a1Len + a2Len];  System.arraycopy(a1,0,res,0,a1Len);  System.arraycopy(a2,0,res,a1Len,a2Len);  return res;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void flushWriter(Writer wr){  if (wr != null) {    try {      wr.flush();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static MHRConcept forValue(Properties ctx,String value){  if (Util.isEmpty(value,true)) {    return null;  }  int AD_Client_ID=Env.getAD_Client_ID(ctx);  final String key=AD_Client_ID + "#" + value;  MHRConcept concept=s_cacheValue.get(key);  if (concept != null) {    return concept;  }  final String whereClause=COLUMNNAME_Value + "=? AND AD_Client_ID IN (?,?)";  concept=new Query(ctx,Table_Name,whereClause,null).setParameters(new Object[]{value,0,AD_Client_ID}).setOnlyActiveRecords(true).setOrderBy("AD_Client_ID DESC").first();  if (concept != null) {    s_cacheValue.put(key,concept);    s_cache.put(concept.get_ID(),concept);  }  return concept;}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (globalConfig.isDiskCacheEnabled() && (mDiskLruCache == null || mDiskLruCache.isClosed())) {      File diskCacheDir=new File(globalConfig.getDiskCachePath());      if (diskCacheDir.exists() || diskCacheDir.mkdirs()) {        long availableSpace=OtherUtils.getAvailableSpace(diskCacheDir);        long diskCacheSize=globalConfig.getDiskCacheSize();        diskCacheSize=availableSpace > diskCacheSize ? diskCacheSize : availableSpace;        try {          mDiskLruCache=LruDiskCache.open(diskCacheDir,1,1,diskCacheSize);          mDiskLruCache.setFileNameGenerator(globalConfig.getFileNameGenerator());          LogUtils.d("create disk cache success");        } catch (        Throwable e) {          mDiskLruCache=null;          LogUtils.e("create disk cache error",e);        }      }    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.076 -0500",hash_original_method="0FDB9C61F8AE07052D8F8CD615F49E1D",hash_generated_method="2493344E11F7398B57B9AAA7979140BA") public void parse(final SetCookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (value == null) {    throw new MalformedCookieException("Missing value for version attribute");  }  int version=-1;  try {    version=Integer.parseInt(value);  } catch (  NumberFormatException e) {    version=-1;  }  if (version < 0) {    throw new MalformedCookieException("Invalid cookie version.");  }  cookie.setVersion(version);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTATION_LIST___IS_EXPORTED:    return isExported();case N4JSPackage.ANNOTATION_LIST___IS_EXPORTED_AS_DEFAULT:  return isExportedAsDefault();case N4JSPackage.ANNOTATION_LIST___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.ANNOTATION_LIST___IS_TOPLEVEL:return isToplevel();}return super.eInvoke(operationID,arguments);}  }
class C{  public String maxBoostingIterationsTipText(){  return "Sets the maximum number of iterations for LogitBoost. Default value is 500, for very small/large " + "datasets a lower/higher value might be preferable.";}  }
class C{  public GetProperties(int playerId,String... properties){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("properties",properties);}  }
class C{  private byte[] encodePKIPATH() throws CertificateEncodingException {  ListIterator<X509Certificate> li=certs.listIterator(certs.size());  try {    DerOutputStream bytes=new DerOutputStream();    while (li.hasPrevious()) {      X509Certificate cert=li.previous();      if (certs.lastIndexOf(cert) != certs.indexOf(cert)) {        throw new CertificateEncodingException("Duplicate Certificate");      }      byte[] encoded=cert.getEncoded();      bytes.write(encoded);    }    DerOutputStream derout=new DerOutputStream();    derout.write(DerValue.tag_SequenceOf,bytes);    return derout.toByteArray();  } catch (  IOException ioe) {    throw new CertificateEncodingException("IOException encoding " + "PkiPath data: " + ioe,ioe);  }}  }
class C{  private boolean isText(Contact contact){  Annotation label=contact.getAnnotation();  if (label instanceof Text) {    return true;  }  return false;}  }
class C{  static void enhanceFirstSplittedTerritoryConnectionsWithSymmetryClosure(final Map<String,Set<String>> landWaterTerritoyConnections,final Map<String,Set<String>> waterLandTerritoyConnections){  for (  final Entry<String,Set<String>> terrConn : waterLandTerritoyConnections.entrySet()) {    final String waterTerr=terrConn.getKey();    for (    final String landTerr : terrConn.getValue()) {      final Set<String> waterTerrs=landWaterTerritoyConnections.get(landTerr);      if (waterTerrs == null) {        final Set<String> newWaterTerrs=Sets.newLinkedHashSet();        newWaterTerrs.add(waterTerr);        landWaterTerritoyConnections.put(landTerr,newWaterTerrs);      } else {        waterTerrs.add(waterTerr);      }    }  }}  }
class C{  private void addNaturalCollections(Document doc,Eml eml) throws DocumentException {  if (!eml.getCollections().isEmpty() || !eml.getTemporalCoverages().isEmpty() || !eml.getSpecimenPreservationMethods().isEmpty()|| !eml.getJgtiCuratorialUnits().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    for (    org.gbif.metadata.eml.Collection collection : eml.getCollections()) {      if (exists(collection.getParentCollectionId()) || exists(collection.getCollectionName()) || exists(collection.getCollectionId())) {        p.add(new Phrase(getText("rtf.collections.description"),fontTitle));        p.add(Chunk.NEWLINE);        p.add(Chunk.NEWLINE);        if (exists(collection.getParentCollectionId())) {          p.add(new Phrase(getText("rtf.collections.parent") + ": ",fontTitle));          p.add(collection.getParentCollectionId());          p.add(Chunk.NEWLINE);        }        if (exists(collection.getCollectionName())) {          p.add(new Phrase(getText("rtf.collections.name") + ": ",fontTitle));          p.add(collection.getCollectionName());          p.add(Chunk.NEWLINE);        }        if (exists(collection.getCollectionId())) {          p.add(new Phrase(getText("rtf.collections.identifier") + ": ",fontTitle));          p.add(collection.getCollectionId());          p.add(Chunk.NEWLINE);        }      }    }    for (    TemporalCoverage coverage : eml.getTemporalCoverages()) {      if (coverage.getType() == TemporalCoverageType.FORMATION_PERIOD) {        p.add(new Phrase(getText("rtf.collections.formatPeriod") + ": ",fontTitle));        p.add(coverage.getFormationPeriod());        p.add(Chunk.NEWLINE);      }    }    for (    TemporalCoverage coverage : eml.getTemporalCoverages()) {      if (coverage.getType() == TemporalCoverageType.LIVING_TIME_PERIOD) {        p.add(new Phrase(getText("rtf.collections.livingPeriod") + ": ",fontTitle));        p.add(coverage.getLivingTimePeriod());        p.add(Chunk.NEWLINE);      }    }    for (    String preservationMethod : eml.getSpecimenPreservationMethods()) {      if (exists(preservationMethod)) {        p.add(new Phrase(getText("rtf.collections.specimen") + ": ",fontTitle));        VocabularyConcept vocabConcept=vocabManager.get(Constants.VOCAB_URI_PRESERVATION_METHOD).findConcept(preservationMethod);        if (exists(vocabConcept)) {          p.add(vocabConcept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle());        } else {          p.add(preservationMethod.replace("\r\n","\n"));        }        p.add(Chunk.NEWLINE);      }    }    for (    JGTICuratorialUnit unit : eml.getJgtiCuratorialUnits()) {      p.add(new Phrase(getText("rtf.collections.curatorial") + ": ",fontTitle));      if (unit.getType() == JGTICuratorialUnitType.COUNT_RANGE) {        p.add("Between " + unit.getRangeStart() + " and "+ unit.getRangeEnd());      }      if (unit.getType() == JGTICuratorialUnitType.COUNT_WITH_UNCERTAINTY) {        p.add(unit.getRangeMean() + " " + getText("rtf.collections.curatorial.text")+ " "+ unit.getUncertaintyMeasure());      }      p.add(" (" + unit.getUnitType() + ")");      p.add(Chunk.NEWLINE);    }    if (!p.isEmpty()) {      doc.add(p);    }    p.clear();  }}  }
class C{  private void reverseAfter(int i){  int start=i + 1;  int end=n - 1;  while (start < end) {    int t=index[start];    index[start]=index[end];    index[end]=t;    start++;    end--;  }}  }
class C{  @Override public void onClick(View v){  SmartSimpleDraweeView.this.getHierarchy().setProgressBarImage(new ProgressBarDrawable());  SmartSimpleDraweeView.this.getHierarchy().setActualImageScaleType(ScalingUtils.ScaleType.FOCUS_CROP);  SmartSimpleDraweeView.super.setImageURI(uri);}  }
class C{  public boolean equals(String anotherString){  int n=m_length;  if (n == anotherString.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != anotherString.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public static void escapeJava(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,false);}  }
class C{  public void changeAbbrHistoryRecords(String oldAbbr,String newAbbr){  leagueRecords.changeAbbrRecords(userTeam.abbr,newAbbr);  userTeamRecords.changeAbbrRecords(userTeam.abbr,newAbbr);  changeAbbrWinStreaks(userTeam.abbr,newAbbr);  userTeam.winStreak.changeAbbr(newAbbr);  userTeam.yearStartWinStreak.changeAbbr(newAbbr);  for (  String[] yr : leagueHistory) {    for (int i=0; i < yr.length; ++i) {      if (yr[i].split(" ")[0].equals(oldAbbr)) {        yr[i]=newAbbr + " " + yr[i].split(" ")[1];      }    }  }  for (int i=0; i < heismanHistory.size(); ++i) {    String p=heismanHistory.get(i);    if (p.split(" ")[4].equals(oldAbbr)) {      heismanHistory.set(i,p.split(" ")[0] + " " + p.split(" ")[1]+ " "+ p.split(" ")[2]+ " "+ p.split(" ")[3]+ " "+ newAbbr+ " "+ p.split(" ")[5]);    }  }}  }
class C{  public void resetConfigParameters(){  ArrayList<ContentProviderOperation> operations=new ArrayList<>();  for (  Map.Entry<String,Object> entry : RcsSettingsData.sSettingsKeyDefaultValue.entrySet()) {    operations.add(buildContentProviderOp(entry.getKey(),entry.getValue()));  }  try {    mCache.clear();    mLocalContentResolver.applyBatch(RcsSettingsData.CONTENT_URI,operations);  } catch (  OperationApplicationException e) {    sLogger.error("Reset existing configuration failed",e);  }}  }
class C{  public String sqlMetadata_triggerDefinitions(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_triggerDefinitions(catalogName,schemaName);}  }
class C{  boolean hasError(){  return hasError;}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  isCurrentlyLoading=true;  parentEngine.bridge.reset();  parentEngine.client.onPageStarted(url);}  }
class C{  public void addHandler(String handlerPath,ElementHandler handler){  handlers.put(handlerPath,handler);}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    jbInit();    frame.getContentPane().add(panel,BorderLayout.CENTER);  } catch (  Exception ex) {    log.log(Level.SEVERE,"VTreeMaintenance.init",ex);  }}  }
class C{  public ExecutionHelper(final ExecutorService service,final long timeout,final TimeUnit unit){  if (service == null) {    throw new IllegalArgumentException();  }  if (timeout <= 0L) {    throw new IllegalArgumentException();  }  if (unit == null) {    throw new IllegalArgumentException();  }  this.service=service;  this.timeout=timeout;  this.unit=unit;}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint,int indent) throws IOException {  this.write(xml,prettyPrint,indent,true);}  }
class C{  public void testTwoNodeSequentialEvent() throws Throwable {  testSequentialEvent(2);}  }
class C{  public PartitionNotAvailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void export(Drawable component,String mimeType,File file,Rectangle2D documentBounds){  FileOutputStream destination;  try {    destination=new FileOutputStream(file);  } catch (  FileNotFoundException ex) {    ex.printStackTrace();    return;  }  DrawableWriter writer=DrawableWriterFactory.getInstance().get(mimeType);  try {    writer.write(component,destination,documentBounds.getX(),documentBounds.getY(),documentBounds.getWidth(),documentBounds.getHeight());  } catch (  IOException ex) {    ex.printStackTrace();  } finally {    try {      destination.close();    } catch (    IOException ex2) {      ex2.printStackTrace();    }  }}  }
class C{  public ConfigurableAnalyzerFactory(final FullTextIndex<?> fullTextIndex){  delegate=new NeedsConfiguringAnalyzerFactory(this,fullTextIndex);}  }
class C{  public ProLogWindow(final TripleAFrame frame){  super(frame);  initComponents();}  }
class C{  public FieldDeclaration newFieldDeclaration(VariableDeclarationFragment fragment){  if (fragment == null) {    throw new IllegalArgumentException();  }  FieldDeclaration result=new FieldDeclaration(this);  result.fragments().add(fragment);  return result;}  }
class C{  public void shutdown(){  running.set(false);}  }
class C{  public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int ch=r.read();    if (ch >= 0x80 && ch <= 0x9F)     ch=theWinMap[ch - 0x80];    if (ch == '\r') {      ch=r.read();      if (ch != '\n') {        unread(r,ch);        ch='\n';      }    }    if (ch == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!(ch >= 0x20 || ch == '\n' || ch == '\t' || ch == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (statetable[i + 1] == ch) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(ch) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ENTITY:mark();char ch1=(char)ch;if (theState == S_ENT && ch1 == '#') {theNextState=S_NCR;save(ch,h);break;} else if (theState == S_NCR && (ch1 == 'x' || ch1 == 'X')) {theNextState=S_XNCR;save(ch,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(ch1)) {save(ch,h);break;} else if (theState == S_NCR && Character.isDigit(ch1)) {save(ch,h);break;} else if (theState == S_XNCR && (Character.isDigit(ch1) || "abcdefABCDEF".indexOf(ch1) != -1)) {save(ch,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (ch != ';') {unread(r,ch);theCurrentColumn--;}} else {unread(r,ch);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(ch,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(ch,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(ch,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,ch);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  public void addProperty(String property,Number value){  add(property,createJsonElement(value));}  }
class C{  public void initializeCellNumberFormatIds(int count){  cellNumberFormatIds=new int[count];}  }
class C{  @Override public void prepare(){  createPiedPiper();}  }
class C{  protected Expression string(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.String(),opPos);}  }
class C{  public boolean isSelectedWinner(){  Object oo=get_Value(COLUMNNAME_IsSelectedWinner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int size(){  return size;}  }
class C{  public LabelWrapper(){  this(10);}  }
class C{  public SecurityException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  public String toString(){  return "SimTime: " + clockTime;}  }
class C{  protected static void propagate_all_lookaheads() throws internal_error {  for (Enumeration st=all(); st.hasMoreElements(); ) {    ((lalr_state)st.nextElement()).propagate_lookaheads();  }}  }
class C{  protected void sequence_IntersectionTypeExpression_IntersectionTypeExpressionOLD_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void prepareFramebuffer(int width,int height){  GlUtil.checkGlError("start");  int[] values=new int[1];  GLES20.glGenTextures(1,values,0);  GlUtil.checkGlError("glGenTextures");  mOffscreenTexture=values[0];  Log.i(TAG,"prepareFramebuffer mOffscreenTexture:" + mOffscreenTexture);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mOffscreenTexture);  GlUtil.checkGlError("glBindTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  GLES20.glGenFramebuffers(1,values,0);  GlUtil.checkGlError("glGenFramebuffers");  mFramebuffer=values[0];  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFramebuffer);  GlUtil.checkGlError("glBindFramebuffer " + mFramebuffer);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mOffscreenTexture,0);  int status=GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER);  if (status != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Framebuffer not complete, status=" + status);  }  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);  GlUtil.checkGlError("glBindFramebuffer");}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public static void DefaultObjectWrapperFactory_clearInstanceCache(){  DefaultObjectWrapperBuilder.clearInstanceCache();}  }
class C{  @Override public void handleMessageEvent(StunMessageEvent ev){  Message msg=ev.getMessage();  if (logger.isLoggable(Level.FINEST)) {    logger.finest("Received a message on " + ev.getLocalAddress() + " of type:"+ (int)msg.getMessageType());  }  if (msg instanceof Request) {    logger.finest("parsing request");    TransactionID serverTid=ev.getTransactionID();    StunServerTransaction sTran=getServerTransaction(serverTid);    if (sTran != null) {      logger.finest("found an existing transaction");      try {        sTran.retransmitResponse();        logger.finest("Response retransmitted");      } catch (      Exception ex) {        logger.log(Level.WARNING,"Failed to retransmit a stun response",ex);      }      if (!Boolean.getBoolean(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS)) {        return;      }    } else {      logger.finest("existing transaction not found");      sTran=new StunServerTransaction(this,serverTid,ev.getLocalAddress(),ev.getRemoteAddress());      try {        sTran.start();      } catch (      OutOfMemoryError t) {        logger.info("STUN transaction thread start failed:" + t);        return;      }synchronized (serverTransactions) {        serverTransactions.put(serverTid,sTran);        maybeStartServerTransactionExpireThread();      }    }    try {      validateRequestAttributes(ev);    } catch (    Exception exc) {      logger.log(Level.FINE,"Failed to validate msg: " + ev,exc);      return;    }    try {      eventDispatcher.fireMessageEvent(ev);    } catch (    Throwable t) {      Response error;      logger.log(Level.INFO,"Received an invalid request.",t);      Throwable cause=t.getCause();      if (((t instanceof StunException) && ((StunException)t).getID() == StunException.TRANSACTION_ALREADY_ANSWERED) || ((cause instanceof StunException) && ((StunException)cause).getID() == StunException.TRANSACTION_ALREADY_ANSWERED)) {        return;      }      if (t instanceof IllegalArgumentException) {        error=createCorrespondingErrorResponse(msg.getMessageType(),ErrorCodeAttribute.BAD_REQUEST,t.getMessage());      } else {        error=createCorrespondingErrorResponse(msg.getMessageType(),ErrorCodeAttribute.SERVER_ERROR,"Oops! Something went wrong on our side :(");      }      try {        sendResponse(serverTid.getBytes(),error,ev.getLocalAddress(),ev.getRemoteAddress());      } catch (      Exception exc) {        logger.log(Level.FINE,"Couldn't send a server error response",exc);      }    }  } else   if (msg instanceof Response) {    TransactionID tid=ev.getTransactionID();    StunClientTransaction tran=clientTransactions.remove(tid);    if (tran != null) {      tran.handleResponse(ev);    } else {      logger.fine("Dropped response - no matching client tran found for" + " tid " + tid + "\n"+ "all tids in stock were "+ clientTransactions.keySet());    }  } else   if (msg instanceof Indication) {    eventDispatcher.fireMessageEvent(ev);  }}  }
class C{  public static <T>void assertIterator(List<T> expected,Iterator<T> it,boolean terminating){  List<T> actual=new ArrayList<T>();  while (it.hasNext() && (terminating || actual.size() < expected.size())) {    actual.add(it.next());  }  assertEquals(expected,actual);}  }
class C{  public static List<Plan> chop(Plan plan){  List<Plan> segments=new ArrayList<>();  double cumTime=0.0;  Coord lastLocation=null;  Plan currentPlan=PopulationUtils.createPlan();  for (int i=0; i < plan.getPlanElements().size(); i+=2) {    Activity act=(Activity)plan.getPlanElements().get(i);    double startTime;    double endTime;    double distance;    double travelTime=0.0;    if (i == 0) {      startTime=0.0;      endTime=act.getEndTime();    } else {      distance=CoordUtils.calcEuclideanDistance(lastLocation,act.getCoord()) * CROWFLY_FACTOR;      travelTime=distance / AVERAGE_SPEED;      startTime=cumTime + travelTime;      if (i == plan.getPlanElements().size() - 1) {        endTime=Time.UNDEFINED_TIME;      } else {        endTime=startTime + act.getMaximumDuration();      }    }    if (startTime > Time.MIDNIGHT) {      if (i == 0) {        LOG.error("First activity should start on the first day.");      } else {        double tFraction=(Time.MIDNIGHT - cumTime) / travelTime;        Coord c1=lastLocation;        Coord c2=act.getCoord();        double xCut=c1.getX() + (c2.getX() - c1.getX()) * tFraction;        double yCut=c1.getY() + (c2.getY() - c1.getY()) * tFraction;        Coord cCut=CoordUtils.createCoord(xCut,yCut);        Leg leg=(Leg)plan.getPlanElements().get(i - 1);        currentPlan.addLeg(leg);        Activity cutActivityEnd=PopulationUtils.createActivityFromCoord("chopEnd",cCut);        currentPlan.addActivity(cutActivityEnd);        Plan segment=PopulationUtils.createPlan();        PopulationUtils.copyFromTo(currentPlan,segment);        segments.add(segment);        currentPlan=PopulationUtils.createPlan();        Activity cutActivityStart=PopulationUtils.createActivityFromCoord("chopStart",cCut);        cutActivityStart.setEndTime(Time.parseTime("00:01:00"));        currentPlan.addActivity(cutActivityStart);        lastLocation=cCut;        cumTime=0.0;      }      if (i == plan.getPlanElements().size() - 1) {        Leg leg=(Leg)plan.getPlanElements().get(i - 1);        currentPlan.addLeg(leg);        currentPlan.addActivity(act);        Plan segment=PopulationUtils.createPlan();        PopulationUtils.copyFromTo(currentPlan,segment);        segments.add(segment);        currentPlan=PopulationUtils.createPlan();      }    } else {      if (endTime > Time.MIDNIGHT) {        Leg leg=(Leg)plan.getPlanElements().get(i - 1);        currentPlan.addLeg(leg);        Activity endPortion=PopulationUtils.createActivityFromCoord(act.getType(),act.getCoord());        endPortion.setStartTime(startTime);        currentPlan.addActivity(endPortion);        endPortion.setMaximumDuration(Time.UNDEFINED_TIME);        Plan segment=PopulationUtils.createPlan();        PopulationUtils.copyFromTo(currentPlan,segment);        segments.add(segment);        currentPlan=PopulationUtils.createPlan();        Activity startPortion=PopulationUtils.createActivityFromCoord(act.getType(),act.getCoord());        startPortion.setEndTime(endTime - Time.MIDNIGHT);        currentPlan.addActivity(startPortion);        lastLocation=act.getCoord();        cumTime=startPortion.getEndTime();      } else {        if (i == 0) {          cumTime=act.getEndTime();        } else {          Leg leg=(Leg)plan.getPlanElements().get(i - 1);          currentPlan.addLeg(leg);          cumTime=endTime;        }        currentPlan.addActivity(act);        lastLocation=act.getCoord();      }    }    if (i == plan.getPlanElements().size() - 1) {      if (currentPlan.getPlanElements().size() >= 3) {        Plan segment=PopulationUtils.createPlan();        PopulationUtils.copyFromTo(currentPlan,segment);        segments.add(segment);      }    }  }  if (segmentCountMap.containsKey(segments.size())) {    int oldCount=segmentCountMap.get(segments.size());    segmentCountMap.put(segments.size(),oldCount + 1);  } else {    segmentCountMap.put(segments.size(),1);  }  return segments;}  }
class C{  public static short readShort(){  short x=0;  for (int i=0; i < 2; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  mac_material_header[0]=type;  mac_material_header[3]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_header[4]=(byte)(0x0000FF & content.length);  decMac.update(read_seq_num);  decMac.update(mac_material_header);  decMac.update(data,0,content.length);  byte[] mac_value=decMac.doFinal();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public static int parseMajorJavaVersion(String version){  String jvmVersion=version;  if (jvmVersion.startsWith("1.")) {    jvmVersion=jvmVersion.substring(2);  }  int separator=jvmVersion.indexOf('.');  if (separator > 0) {    jvmVersion=jvmVersion.substring(0,separator);  }  separator=jvmVersion.indexOf('-');  if (separator > 0) {    jvmVersion=jvmVersion.substring(0,separator);  }  return Integer.parseInt(jvmVersion);}  }
class C{  public static Counter<String> readWeightsPlain(String filename) throws IOException {  LineNumberReader reader=new LineNumberReader(new FileReader(filename));  Counter<String> wts=new ClassicCounter<String>();  for (String line; (line=reader.readLine()) != null; ) {    String[] input=line.split(" ");    if (input.length != 2) {      reader.close();      throw new IOException("Illegal input in weight file " + filename + ": "+ line);    }    wts.setCount(input[0],Double.parseDouble(input[1]));  }  reader.close();  return wts;}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder title(String title){  this.title=title;  return this;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=(operation == null) ? 0 : operation.hashCode();  result+=prime * ((text == null) ? 0 : text.hashCode());  return result;}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public static String cappedFloat(double val){  if (val >= Integer.MAX_VALUE) {    return OVER + ".0";  } else   if (val <= Integer.MIN_VALUE) {    return UNDER + ".0";  }  return Utils.realFormat(val,1);}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  @SuppressFBWarnings("LI_LAZY_INIT_UPDATE_STATIC") static void refreshLastKnownLocation(Context context,long maxAge){  ThreadUtils.assertOnUiThread();  if (sListener != null)   return;  LocationManager locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  Location location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);  if (location == null || getLocationAge(location) > maxAge) {    String provider=LocationManager.NETWORK_PROVIDER;    if (locationManager.isProviderEnabled(provider)) {      sListener=new SelfCancelingListener(locationManager);      locationManager.requestSingleUpdate(provider,sListener,null);    }  }}  }
class C{  public Packet(Packet other){  if (other.isSetMessageType()) {    this.messageType=other.messageType;  }  if (other.isSetSwPortTuple()) {    this.swPortTuple=new SwitchPortTuple(other.swPortTuple);  }  if (other.isSetData()) {    this.data=org.apache.thrift.TBaseHelper.copyBinary(other.data);    ;  }}  }
class C{  public static int putInt(ByteBuffer buf,int offset,int val){  if (littleEndian) {    val=Integer.reverseBytes(val);  }  if (buf.isDirect()) {    theUnsafe.putInt(((DirectBuffer)buf).address() + offset,val);  } else {    theUnsafe.putInt(buf.array(),offset + buf.arrayOffset() + BYTE_ARRAY_BASE_OFFSET,val);  }  return offset + Bytes.SIZEOF_INT;}  }
class C{  public String toString(){  String s="KeyIdentifier [\n";  HexDumpEncoder encoder=new HexDumpEncoder();  s+=encoder.encodeBuffer(octetString);  s+="]\n";  return (s);}  }
class C{  public static DspProvidersFragment newInstance(){  return new DspProvidersFragment();}  }
class C{  @Override public void validate(final IDescription d){  final IExpressionDescription fDesc=d.getFacet(EQUATION_LEFT);  final IExpression func=fDesc.getExpression();  final IExpressionDescription eDesc=d.getFacet(EQUATION_RIGHT);  final IExpression expr=eDesc.getExpression();  final boolean isFunction=func instanceof IOperator && orderNames.containsKey(func.getName());  if (!isFunction) {    d.error("The left-hand member of an equation should be a variable or a call to the diff() or diff2() operators",IGamlIssue.UNKNOWN_BINARY,fDesc.getTarget());    return;  }  final IType<?> type=((IOperator)func).arg(0).getType();  if (!type.isTranslatableInto(Types.FLOAT)) {    d.error("The variable of the left-hand member of an equation is expected to be of type float",IGamlIssue.WRONG_TYPE,fDesc.getTarget());    return;  }  if (expr == null || !expr.getType().isTranslatableInto(Types.FLOAT)) {    d.error("The right-hand member of an equation is expected to be of type float",IGamlIssue.WRONG_TYPE,eDesc.getTarget());  }}  }
class C{  public static IDownloaderService CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=right.checkAssignOp(env,ctx,vset,exp,this);  if (right.type.inMask(TM_NUMBER)) {    type=right.type;  } else {    if (!right.type.isType(TC_ERROR)) {      env.error(where,"invalid.arg.type",right.type,opNames[op]);    }    type=Type.tError;  }  updater=right.getUpdater(env,ctx);  return vset;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  return "java.util.ServiceLoader[" + service.getName() + "]";}  }
class C{  public void addNewEntry(String nameValuePairs) throws IOException, ServiceException {  ListEntry newEntry=new ListEntry();  setEntryContentsFromString(newEntry,nameValuePairs);  service.insert(listFeedUrl,newEntry);  out.println("Added!");}  }
class C{  public VerticalGridLayout(){  this(1,0,0,0);}  }
class C{  protected void assertContains(String result,String contains){  if (result.indexOf(contains) < 0) {    fail(result + " does not contain: " + contains);  }}  }
class C{  @Override public void done(){  if (done)   return;  if (!deflater.finished()) {    deflater.finish();    while (!deflater.finished())     deflate();  }  done=true;  if (idatChunkWriter != null)   idatChunkWriter.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ASSIGNMENT_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.ASSIGNMENT_EXPRESSION__OP:setOp((AssignmentOperator)newValue);return;case N4JSPackage.ASSIGNMENT_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public TIntLongHashMap(){}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @DSModeled(DSC.SPEC) public static void modelActivity(android.app.Activity activity){  ContextImpl context=new ContextImpl();  if (mApplication != null)   activity.setApplication(mApplication);  Bundle b=new Bundle();  activity.performCreate(b,context);  activity.droidsafeOnResume();  activity.droidsafeOnStop();  activity.droidsafeOnDestroy();}  }
class C{  private static InsnList popMethodResult(AbstractInsnNode invokeInsnNode){  Validate.notNull(invokeInsnNode);  Type returnType=getReturnTypeOfInvocation(invokeInsnNode);  InsnList ret=new InsnList();switch (returnType.getSort()) {case Type.LONG:case Type.DOUBLE:    ret.add(new InsnNode(Opcodes.POP2));  break;case Type.VOID:break;case Type.METHOD:throw new IllegalStateException();default :ret.add(new InsnNode(Opcodes.POP));break;}return ret;}  }
class C{  HugeEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;  bits=new long[(enums.length + BIT_IN_LONG - 1) / BIT_IN_LONG];}  }
class C{  public Matrix4x3d reflection(double nx,double ny,double nz,double px,double py,double pz){  double invLength=1.0 / Math.sqrt(nx * nx + ny * ny + nz * nz);  double nnx=nx * invLength;  double nny=ny * invLength;  double nnz=nz * invLength;  return reflection(nnx,nny,nnz,-nnx * px - nny * py - nnz * pz);}  }
class C{  public DataPoint(int NFE,double value){  super();  this.NFE=NFE;  this.value=value;}  }
class C{  public static ComponentUI createUI(JComponent component){  return new IdeaMenuUI();}  }
class C{  public boolean intersects(float x,float y,float w,float h){  tx().transform(intersectionTestPoint.set(x,y),intersectionTestPoint);  tx().transform(intersectionTestSize.set(w,h),intersectionTestSize);  float ix=intersectionTestPoint.x, iy=intersectionTestPoint.y;  float iw=intersectionTestSize.x, ih=intersectionTestSize.y;  if (scissorDepth > 0) {    Rectangle scissor=scissors.get(scissorDepth - 1);    return scissor.intersects((int)ix,(int)iy,(int)iw,(int)ih);  }  float tw=target.width(), th=target.height();  return (ix + iw > 0) && (ix < tw) && (iy + ih > 0)&& (iy < th);}  }
class C{  @SuppressWarnings("try") protected StructuredGraph buildInitialGraph(final ResolvedJavaMethod methodToParse,Object[] args){  final StructuredGraph graph=new StructuredGraph(methodToParse,AllowAssumptions.NO,NO_PROFILING_INFO);  graph.disableUnsafeAccessTracking();  try (Scope s=Debug.scope("buildInitialGraph",graph)){    MetaAccessProvider metaAccess=replacements.providers.getMetaAccess();    Plugins plugins=new Plugins(replacements.graphBuilderPlugins);    GraphBuilderConfiguration config=GraphBuilderConfiguration.getSnippetDefault(plugins);    if (args != null) {      plugins.prependParameterPlugin(new ConstantBindingParameterPlugin(args,metaAccess,replacements.snippetReflection));    }    IntrinsicContext initialIntrinsicContext=null;    if (method.getAnnotation(Snippet.class) == null) {      initialIntrinsicContext=new IntrinsicContext(substitutedMethod,method,replacements.bytecodeProvider,INLINE_AFTER_PARSING);    } else {      ResolvedJavaMethod original=substitutedMethod != null ? substitutedMethod : method;      initialIntrinsicContext=new IntrinsicContext(original,method,replacements.bytecodeProvider,INLINE_AFTER_PARSING);    }    createGraphBuilder(metaAccess,replacements.providers.getStampProvider(),replacements.providers.getConstantReflection(),replacements.providers.getConstantFieldProvider(),config,OptimisticOptimizations.NONE,initialIntrinsicContext).apply(graph);    new CanonicalizerPhase().apply(graph,new PhaseContext(replacements.providers));  } catch (  Throwable e) {    throw Debug.handle(e);  }  return graph;}  }
class C{  public Class<? extends IssueUtil> bindIssueUtil(){  return N4JSIssue.Util.class;}  }
class C{  public boolean writeMyRasterToFile(String filename,String filetype){  log.info("Writing raster image to " + filename);  boolean b=false;  File f1=new File(filename);  try {    b=ImageIO.write(this.bufferedImage,filetype,f1);  } catch (  IOException e1) {    e1.printStackTrace();  }  if (b) {    log.info("   ... file written sucessfully.");  } else   log.warn("   ... file was unsucessfully written.");  return b;}  }
class C{  public Insert values(Object... values){  valuesToInsert.add(Arrays.asList(values));  query=null;  defaultValues=false;  invalidateCompileCache();  return this;}  }
class C{  private void send(String callId,final String message){  if (message == null) {    throw new RuntimeException("You cannot send `null` messages");  }  try {    Timber.d("-->" + message);synchronized (mConnection) {      RequestBody request=RequestBody.create(WebSocket.TEXT,message);      mConnection.sendMessage(request);    }  } catch (  Exception e) {    final Listener listener=mListeners.remove(callId);    if (listener != null) {      if (listener instanceof ResultListener) {        ((ResultListener)listener).onError(new MeteorException(e));      }    }    if (mCallback != null) {      mCallback.onException(e);    }  }}  }
class C{  public BayesUpdaterEditor(RowSummingExactWrapper wrapper){  this((UpdaterWrapper)wrapper);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.703 -0500",hash_original_method="D894692E4046265C2E05884CCE780235",hash_generated_method="6916F058183D4D399BA9F3CB802F64B9") public boolean isAcceptable(List<GeneralName> names){  if (permitted_names == null) {    prepareNames();  }  boolean[] types_presented=new boolean[9];  boolean[] permitted_found=new boolean[9];  for (  GeneralName name : names) {    int type=name.getTag();    if (excluded_names[type] != null) {      for (int i=0; i < excluded_names[type].size(); i++) {        if (excluded_names[type].get(i).isAcceptable(name)) {          return false;        }      }    }    if ((permitted_names[type] != null) && (!permitted_found[type])) {      types_presented[type]=true;      for (int i=0; i < permitted_names[type].size(); i++) {        if (permitted_names[type].get(i).isAcceptable(name)) {          permitted_found[type]=true;        }      }    }  }  for (int type=0; type < 9; type++) {    if (types_presented[type] && !permitted_found[type]) {      return false;    }  }  return true;}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  protected void createTextFile(String infile,Charset charsetInfile,String toDir,String outfile,Map<String,String> variables) throws NullPointerException, IOException {  createTextFile(infile,charsetInfile,toDir,outfile,VeriniceCharset.CHARSET_DEFAULT,variables);}  }
class C{  public static final long queryLastRmqId(ContentResolver resolver){  Cursor cursor=resolver.query(Imps.LastRmqId.CONTENT_URI,PROJECTION,null,null,null);  long retVal=0;  try {    if (cursor.moveToFirst()) {      retVal=cursor.getLong(cursor.getColumnIndexOrThrow(RMQ_ID));    }  }  finally {    cursor.close();  }  return retVal;}  }
class C{  public boolean hasErrors(){  return fError;}  }
class C{  public void append(int key,byte value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    byte[] nvalues=new byte[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  protected boolean isFormatValid(String pattern,String value){  boolean valid=true;  if (pattern == null || pattern.length() == 0) {    return true;  }  if (value == null || value.length() == 0) {    return false;  }  if (value.length() != pattern.length()) {    return false;  }  value=value.trim();  char[] input=value.toCharArray();  char[] fmtpattern=pattern.toCharArray();  for (int i=0; i < fmtpattern.length; ++i) {    if (fmtpattern[i] == 'A') {      if (!(Character.isLetter(input[i]))) {        valid=false;      }    } else     if (fmtpattern[i] == '9') {      if (!(Character.isDigit(input[i]))) {        valid=false;      }    } else     if (fmtpattern[i] == '#') {      if ((!(Character.isDigit(input[i]))) && (!(Character.isLetter(input[i])))) {        valid=false;      }    } else {      if (!(fmtpattern[i] == input[i])) {        valid=false;      }    }  }  return valid;}  }
class C{  public RealBuffer(float[] samples){  super(samples);}  }
class C{  public DOMSignContext(KeySelector ks,Node parent,Node nextSibling){  if (ks == null) {    throw new NullPointerException("key selector cannot be null");  }  if (parent == null) {    throw new NullPointerException("parent cannot be null");  }  if (nextSibling == null) {    throw new NullPointerException("nextSibling cannot be null");  }  setKeySelector(ks);  this.parent=parent;  this.nextSibling=nextSibling;}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  protected static void fail(int exitCode){  System.exit(exitCode);}  }
class C{  public <T>T read(Class<? extends T> type,InputNode source) throws Exception {  return read(type,source,true);}  }
class C{  public boolean save(IMiniTable miniTable,String trxName){  int C_BankStatement_ID=((Integer)getGridTab().getValue("C_BankStatement_ID")).intValue();  MBankStatement bs=new MBankStatement(Env.getCtx(),C_BankStatement_ID,trxName);  log.config(bs.toString());  for (int i=0; i < miniTable.getRowCount(); i++) {    if (((Boolean)miniTable.getValueAt(i,0)).booleanValue()) {      Timestamp trxDate=(Timestamp)miniTable.getValueAt(i,1);      KeyNamePair pp=(KeyNamePair)miniTable.getValueAt(i,2);      int C_Payment_ID=pp.getKey();      pp=(KeyNamePair)miniTable.getValueAt(i,3);      int C_Currency_ID=pp.getKey();      BigDecimal TrxAmt=(BigDecimal)miniTable.getValueAt(i,5);      log.fine("Line Date=" + trxDate + ", Payment="+ C_Payment_ID+ ", Currency="+ C_Currency_ID+ ", Amt="+ TrxAmt);      MBankStatementLine bsl=new MBankStatementLine(bs);      bsl.setDateAcct(bs.getStatementDate());      bsl.setStatementLineDate(bs.getStatementDate());      bsl.setValutaDate(trxDate);      bsl.setPayment(new MPayment(Env.getCtx(),C_Payment_ID,trxName));      bsl.setTrxAmt(TrxAmt);      bsl.setStmtAmt(TrxAmt);      bsl.setC_Currency_ID(bankAccount.getC_Currency_ID());      if (!bsl.save())       log.log(Level.SEVERE,"Line not created #" + i);    }  }  return true;}  }
class C{  public static void verifyTokenType(AccessToken token,TokenType type,StringManager sm,IDiagnosticsLogger log){  if (!type.getJsonName().equals(token.getTokenType())) {    log.error("JWT was expected to have the token type '{}', but was '{}'",type.getJsonName(),token.getTokenType());    throw new InvalidTokenException(sm.getString("auth.ite.bad.type"));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected JvmMemPoolTableMeta createJvmMemPoolTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemPoolTableMeta(mib,objectserver);}  }
class C{  public XYSplineRenderer(){  this(5,FillType.NONE);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public void createPictScenario06() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-22 10:00:00"));  String supplierAdminId="Pict06Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict06SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("0.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("10.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  String customerAdminId="Pict06Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict06CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceUnitTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_06",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceUnitTempl,TestPriceModel.EXAMPLE_PICT06_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VOServiceDetails serviceProRataTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_06_Upgrade",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  VOServiceDetails serviceProRata=serviceSetup.savePriceModelForCustomer(serviceProRataTempl,TestPriceModel.EXAMPLE_PICT06_RATA_HOUR,customer);  serviceProRata=serviceSetup.activateMarketableService(serviceProRata);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceUnitTempl,serviceProRataTempl);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_06",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-23 10:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 08:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 09:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 09:30:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceProRata);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 10:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 11:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(upgradedSubDetails.getPriceModel(),new BigDecimal("1000.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),upgradedSubDetails,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-26 22:00:00"));  subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-27 02:30:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceProRata);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-10-27 02:40:00"),"FILE_DOWNLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-27 22:00:00"));  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  upgradedSubDetails=subscrSetup.addUser(customerAdmin,role,upgradedSubDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-10-29 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_06",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_06",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_06",customer);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.ENTER_STATE__STATE:    setState((ExecutionState)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public CqlMigrationResolver(ClassLoader classLoader,ScriptsLocation location,String encoding){  this.scanner=new Scanner(classLoader);  this.location=location;  this.encoding=encoding;}  }
class C{  public COptionRenderer(){  setOpaque(true);}  }
class C{  public void add(Tool item){  add(item,-1);}  }
class C{  public int lastIndexOf(E e,int index){  Object[] elements=array;  return lastIndexOf(e,elements,index);}  }
class C{  private void createAccount(){  createAccount(m_tblData);  if (listCreated.length() > 0) {    FDialog.info(form.getWindowNo(),form,"ChargeCreated",listCreated.toString());  }  if (listRejected.length() > 0) {    FDialog.error(form.getWindowNo(),form,"ChargeNotCreated",listRejected.toString());  }  return;}  }
class C{  @Override public String toString(){  return toString(FitsFactory.current());}  }
class C{  public void drawHorizontal(Canvas c,RecyclerView parent){  final int top=parent.getPaddingTop();  final int bottom=parent.getHeight() - parent.getPaddingBottom();  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    final int left=child.getRight() + params.rightMargin + mInsets;    final int right=left + mDivider.getIntrinsicWidth();    mDivider.setBounds(left,top,right,bottom);    mDivider.draw(c);  }}  }
class C{  final boolean isTransient(){  return Modifier.isTransient(getModifiers());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void switchSetup(){  int retVal;  retVal=m_SetupFileChooser.showOpenDialog(this);  if (retVal != JFileChooser.APPROVE_OPTION) {    return;  }  m_DbUtils.initialize(m_SetupFileChooser.getSelectedFile());  m_URL=m_DbUtils.getDatabaseURL();  m_User=m_DbUtils.getUsername();  m_Password=m_DbUtils.getPassword();  m_TextURL.setText(m_URL);}  }
class C{  public TechnicalServiceOperationException(){}  }
class C{  public LatestComputation(UnitGraph unitGraph,DelayabilityAnalysis delayed,Map equivRhsMap,BoundedFlowSet set){  unitToLatest=new HashMap<Unit,FlowSet>(unitGraph.size() + 1,0.7f);  Iterator unitIt=unitGraph.iterator();  while (unitIt.hasNext()) {    Unit currentUnit=(Unit)unitIt.next();    FlowSet delaySet=(FlowSet)delayed.getFlowBefore(currentUnit);    FlowSet succCompSet=(FlowSet)set.topSet();    List succList=unitGraph.getSuccsOf(currentUnit);    Iterator succIt=succList.iterator();    while (succIt.hasNext()) {      Unit successor=(Unit)succIt.next();      succCompSet.intersection((FlowSet)delayed.getFlowBefore(successor),succCompSet);    }    if (equivRhsMap.get(currentUnit) != null)     succCompSet.remove(equivRhsMap.get(currentUnit));    FlowSet latest=(FlowSet)delaySet.emptySet();    delaySet.difference(succCompSet,latest);    unitToLatest.put(currentUnit,latest);  }}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  public ByteSizeValue indexingBufferSize(){  return indexingBuffer;}  }
class C{  public BigDecimal addQuantity(final BigDecimal quantity){  final BigDecimal notNullQty=MoneyUtils.notNull(quantity,BigDecimal.ZERO);  if (MoneyUtils.isFirstBiggerThanSecond(notNullQty,BigDecimal.ZERO)) {    this.quantity=this.quantity.add(notNullQty);  }  return getQty();}  }
class C{  @BeforeMethod public void initMethod(){  storageIndexQuery=new StorageIndexQuery();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:54.300 -0500",hash_original_method="9BCA23D068820B6DD53DFB45DB9457FF",hash_generated_method="4DCAA6F929DA376DF7A4284EEB73B52E") public void fillInNotifierBundle(Bundle m){  m.putInt("state",mState);  m.putBoolean("roaming",Boolean.valueOf(mRoaming));  m.putString("operator-alpha-long",mOperatorAlphaLong);  m.putString("operator-alpha-short",mOperatorAlphaShort);  m.putString("operator-numeric",mOperatorNumeric);  m.putBoolean("manual",Boolean.valueOf(mIsManualNetworkSelection));  m.putInt("radioTechnology",mRadioTechnology);  m.putBoolean("cssIndicator",mCssIndicator);  m.putInt("networkId",mNetworkId);  m.putInt("systemId",mSystemId);  m.putInt("cdmaRoamingIndicator",mCdmaRoamingIndicator);  m.putInt("cdmaDefaultRoamingIndicator",mCdmaDefaultRoamingIndicator);  m.putBoolean("emergencyOnly",Boolean.valueOf(mIsEmergencyOnly));}  }
class C{  public void stop(int id){synchronized (sLock) {    if (mLock != null) {      if (mLock.isHeld()) {        mLock.release();      }      mLock=null;    }    Stream stream=id == 0 ? mAudioStream : mVideoStream;    if (stream != null) {      stream.stop();    }  }}  }
class C{  @DSComment("IO/Stream accessing") @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.933 -0500",hash_original_method="3845FBBF6C0965A8BD527CE35C72F9CE",hash_generated_method="FBEDB0427C9F5135E9A7874A797C5A41") @Override public void write(byte[] buffer,int off,int nbytes) throws IOException {  super.write(buffer,off,nbytes);  crc.update(buffer,off,nbytes);}  }
class C{  protected synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=findLoadedClass(name);  if (c == null)   c=findClass(name);  if (c == null)   throw new ClassNotFoundException(name);  if (resolve)   resolveClass(c);  return c;}  }
class C{  protected void calculate3DColors(){  mTopColors=new ArrayList<ArrayList<Integer>>();  mSideColors=new ArrayList<ArrayList<Integer>>();  float[] hsv=new float[3];  for (int i=0; i < mCt.getColors().size(); i++) {    ArrayList<Integer> colors=mCt.getDataSetColors(i);    ArrayList<Integer> topColors=new ArrayList<Integer>();    ArrayList<Integer> sideColors=new ArrayList<Integer>();    for (int j=0; j < colors.size(); j++) {      int c=colors.get(j);      Color.colorToHSV(c,hsv);      hsv[1]=hsv[1] - 0.1f;      hsv[2]=hsv[2] + 0.1f;      c=Color.HSVToColor(hsv);      topColors.add(c);      c=colors.get(j);      Color.colorToHSV(c,hsv);      hsv[1]=hsv[1] + 0.1f;      hsv[2]=hsv[2] - 0.1f;      c=Color.HSVToColor(hsv);      sideColors.add(c);    }    mTopColors.add(topColors);    mSideColors.add(sideColors);  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tFull class name of filter to use, followed\n" + "\tby filter options.\n" + "\teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"","F",1,"-F <filter specification>"));  newVector.addAll(Collections.list(super.listOptions()));  if (getFilter() instanceof OptionHandler) {    newVector.addElement(new Option("","",0,"\nOptions specific to filter " + getFilter().getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)getFilter()).listOptions()));  }  return newVector.elements();}  }
class C{  public static double[] normalize(double[] values,boolean scaleUp){  double[] normalizedValues=new double[values.length];  double max=Math.max(Math.abs(values[0]),Math.abs(values[1]));  for (int i=2; i < values.length; i++) {    max=Math.max(Math.abs(values[i]),max);  }  if (max < 1 && scaleUp == false) {    for (int i=0; i < values.length; i++) {      normalizedValues[i]=values[i];    }  } else {    for (int i=0; i < values.length; i++) {      normalizedValues[i]=values[i] / max;    }  }  return normalizedValues;}  }
class C{  private T takeFrom(TenantThrottler throttler){  if (throttler != null) {    Retro.setTenant(throttler.tenantId);    return throttler.take();  } else {    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.712 -0500",hash_original_method="2CA180C614EC01706903EAD38F06E97B",hash_generated_method="8688346755F07E40936A0E7E989988A5") public void init(byte[] password,byte[] salt){  super.init(password,salt,1);}  }
class C{  protected void sequence_ClassicFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void sendKeys(int... keys){  final int count=keys.length;  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i++) {    try {      instrumentation.sendKeyDownUpSync(keys[i]);    } catch (    SecurityException e) {    }  }  instrumentation.waitForIdleSync();}  }
class C{  public static String stripCharsInBag(String s,String bag){  int i;  StringBuilder stringBuilder=new StringBuilder("");  for (i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (bag.indexOf(c) == -1)     stringBuilder.append(c);  }  return stringBuilder.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.654 -0500",hash_original_method="F9C5D984693E715CACA8B421F6CE6BD8",hash_generated_method="1E88F458374AD4516F7A9850FC969AC0") public final boolean isBold(){  return 1 == ((getStyle() & BOLD) + 0);}  }
class C{  public static final String normalize(String originalString){  return originalString == null ? null : EncodingHelper.removeAccents(originalString.trim()).toLowerCase().replace("-"," ").replace("."," ").replace("\""," ").replace("'"," ").replace(';',' ');}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TCLASSIFIER__AST_ELEMENT:    return astElement != null;case TypesPackage.TCLASSIFIER__DECLARED_COVARIANT_CONSTRUCTOR:  return declaredCovariantConstructor != DECLARED_COVARIANT_CONSTRUCTOR_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private static boolean validateGenOptions(Project project,GenerationOptionsImpl genOptions){  final Collection<String> EMPTY=Collections.emptyList();  Collection<String> conflicts=EMPTY;  for (  ModuleChunk chunk : genOptions.getModuleChunks()) {    final ChunkCustomCompilerExtension[] customeCompilers=chunk.getCustomCompilers();    if (customeCompilers.length > 1) {      if (conflicts == EMPTY) {        conflicts=new LinkedList<String>();      }      conflicts.add(chunk.getName());    }  }  if (!conflicts.isEmpty()) {    StringBuilder msg=new StringBuilder();    for (    String conflictingChunk : conflicts) {      msg.append(CompilerBundle.message("generate.ant.build.custom.compiler.conflict.message.row",conflictingChunk));    }    int rc=Messages.showOkCancelDialog(project,CompilerBundle.message("generate.ant.build.custom.compiler.conflict.message",msg.toString()),CompilerBundle.message("generate.ant.build.custom.compiler.conflict.title"),Messages.getErrorIcon());    if (rc != Messages.OK) {      return false;    }  }  return true;}  }
class C{  public MailMessage clearAttachments(){  attachments.clear();  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addInitNextForTE(List<SimpleTLCState> trace,TraceExpressionInformationHolder[] expressionData,String initId,String nextId){  if (trace.size() > 0) {    Iterator<SimpleTLCState> it=trace.iterator();    SimpleTLCState currentState=it.next();    cfgBuffer.append(COMMENT).append("INIT definition").append(CR);    cfgBuffer.append("INIT").append(CR);    cfgBuffer.append(initId).append(CR);    tlaBuffer.append(COMMENT).append("TRACE INIT definition").append(IModelConfigurationConstants.TRACE_EXPLORE_INIT).append(CR);    tlaBuffer.append(initId).append(DEFINES_CR);    SimpleTLCVariable[] vars=currentState.getVars();    for (int i=0; i < vars.length; i++) {      SimpleTLCVariable var=vars[i];      tlaBuffer.append(var.getVarName()).append(EQ).append(L_PAREN).append(CR).append(var.getValueAsString()).append(CR).append(R_PAREN);      if (i != vars.length - 1) {        tlaBuffer.append(TLA_AND).append(CR);      }    }    if (expressionData != null) {      for (int i=0; i < expressionData.length; i++) {        TraceExpressionInformationHolder expressionInfo=expressionData[i];        tlaBuffer.append(TLA_AND).append(CR).append(expressionInfo.getVariableName()).append(EQ).append(L_PAREN).append(CR);        if (expressionInfo.getLevel() == 2) {          tlaBuffer.append(TRACE_NA);        } else {          tlaBuffer.append(expressionInfo.getExpression());        }        tlaBuffer.append(CR).append(R_PAREN);      }    }    tlaBuffer.append(CR).append(SEP).append(CR).append(CR);    cfgBuffer.append(COMMENT).append("NEXT definition").append(CR);    cfgBuffer.append("NEXT").append(CR);    cfgBuffer.append(nextId).append(CR);    tlaBuffer.append(COMMENT).append("TRACE NEXT definition").append(IModelConfigurationConstants.TRACE_EXPLORE_NEXT).append(CR);    tlaBuffer.append(nextId).append(DEFINES_CR);    SimpleTLCState nextState=null;    boolean isSingleState;    if (it.hasNext()) {      nextState=(SimpleTLCState)it.next();      isSingleState=false;    } else {      nextState=currentState;      isSingleState=true;    }    while (nextState != null) {      if (nextState.isBackToState()) {        nextState=(SimpleTLCState)trace.get(nextState.getStateNumber() - 1);      } else       if (nextState.isStuttering()) {        nextState=currentState;      }      tlaBuffer.append(L_PAREN);      SimpleTLCVariable[] currentStateVars=currentState.getVars();      SimpleTLCVariable[] nextStateVars=nextState.getVars();      for (int i=0; i < currentStateVars.length; i++) {        SimpleTLCVariable currentStateVar=currentStateVars[i];        tlaBuffer.append(currentStateVar.getVarName()).append(EQ).append(L_PAREN).append(CR).append(currentStateVar.getValueAsString()).append(CR).append(R_PAREN).append(TLA_AND).append(CR);      }      if (isSingleState) {        tlaBuffer.append("FALSE").append(CR).append(TLA_AND).append(CR);      }      for (int i=0; i < currentStateVars.length; i++) {        SimpleTLCVariable nextStateVar=nextStateVars[i];        tlaBuffer.append(nextStateVar.getVarName()).append(PRIME).append(EQ).append(L_PAREN).append(CR).append(nextStateVar.getValueAsString()).append(CR).append(R_PAREN);        if (i != currentStateVars.length - 1) {          tlaBuffer.append(TLA_AND).append(CR);        }      }      if (expressionData != null) {        for (int i=0; i < expressionData.length; i++) {          TraceExpressionInformationHolder expressionInfo=expressionData[i];          tlaBuffer.append(TLA_AND).append(CR).append(expressionInfo.getVariableName()).append(PRIME).append(EQ).append(L_PAREN).append(CR).append(expressionInfo.getExpression()).append(CR).append(R_PAREN);          if (expressionInfo.getLevel() < 2) {            tlaBuffer.append(PRIME);          }        }      }      tlaBuffer.append(R_PAREN);      if (it.hasNext()) {        tlaBuffer.append(CR).append(TLA_OR).append(CR);      }      currentState=nextState;      if (it.hasNext()) {        nextState=(SimpleTLCState)it.next();      } else {        nextState=null;      }    }    tlaBuffer.append(CR).append(SEP).append(CR).append(CR);  }}  }
class C{  private static void loadNoSchedulerInfo(AppResult result){  result.scheduler=null;  result.workflowDepth=0;  result.jobExecId="";  result.jobDefId="";  result.flowExecId="";  result.flowDefId="";  result.jobExecUrl="";  result.jobDefUrl="";  result.flowExecUrl="";  result.flowDefUrl="";  result.jobName="";}  }
class C{  private boolean textSentence(char[] buffer,int start,int stop,float boxWidth,float spaceWidth){  float runningX=0;  int lineStart=start;  int wordStart=start;  int index=start;  while (index <= stop) {    if ((buffer[index] == ' ') || (index == stop)) {      float wordWidth=textWidthImpl(buffer,wordStart,index);      if (runningX + wordWidth > boxWidth) {        if (runningX != 0) {          index=wordStart;          textSentenceBreak(lineStart,index);          while ((index < stop) && (buffer[index] == ' ')) {            index++;          }        } else {          do {            index--;            if (index == wordStart) {              return false;            }            wordWidth=textWidthImpl(buffer,wordStart,index);          } while (wordWidth > boxWidth);          textSentenceBreak(lineStart,index);        }        lineStart=index;        wordStart=index;        runningX=0;      } else       if (index == stop) {        textSentenceBreak(lineStart,index);        index++;      } else {        runningX+=wordWidth + spaceWidth;        wordStart=index + 1;        index++;      }    } else {      index++;    }  }  return true;}  }
class C{  private PropertyDescriptor mergePropertyDescriptor(IndexedPropertyDescriptor ipd,PropertyDescriptor pd){  PropertyDescriptor result=null;  Class<?> propType=pd.getPropertyType();  Class<?> ipropType=ipd.getIndexedPropertyType();  if (propType.isArray() && propType.getComponentType() == ipropType) {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=new IndexedPropertyDescriptor(pd,ipd);    } else {      result=new IndexedPropertyDescriptor(ipd,pd);    }  } else   if ((ipd.getReadMethod() == null) && (ipd.getWriteMethod() == null)) {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=new PropertyDescriptor(pd,ipd);    } else {      result=new PropertyDescriptor(ipd,pd);    }  } else {    if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {      result=ipd;    } else {      result=pd;      Method write=result.getWriteMethod();      Method read=result.getReadMethod();      if (read == null && write != null) {        read=findMethod(result.getClass0(),GET_PREFIX + NameGenerator.capitalize(result.getName()),0);        if (read != null) {          try {            result.setReadMethod(read);          } catch (          IntrospectionException ex) {          }        }      }      if (write == null && read != null) {        write=findMethod(result.getClass0(),SET_PREFIX + NameGenerator.capitalize(result.getName()),1,new Class<?>[]{FeatureDescriptor.getReturnType(result.getClass0(),read)});        if (write != null) {          try {            result.setWriteMethod(write);          } catch (          IntrospectionException ex) {          }        }      }    }  }  return result;}  }
class C{  public Bundler putFloat(String key,float value){  bundle.putFloat(key,value);  return this;}  }
class C{  public void removeResourceBundle(String resourceBundle){  resourceBundles.remove(resourceBundle);}  }
class C{  protected void runTestOnData(Instances data){  int numeric=0;  for (int n=0; n < data.numAttributes(); n++) {    if (data.attribute(n).isNumeric())     numeric++;  }  for (int n=0; n < data.numInstances(); n++) {    try {      AlgVector v=new AlgVector(data.instance(n));      assertEquals((n + 1) + ": length differs",numeric,v.numElements());      int index=0;      for (int i=0; i < data.numAttributes(); i++) {        if (!data.attribute(i).isNumeric())         continue;        assertEquals((n + 1) + "/" + (i + 1)+ ": value differs",data.instance(n).value(i),v.getElement(index));        index++;      }      Instance inst=v.getAsInstance(data,new Random(1));      for (int i=0; i < data.numAttributes(); i++) {        if (!data.attribute(i).isNumeric())         continue;        assertEquals((n + 1) + "/" + (i + 1)+ ": returned value differs",data.instance(n).value(i),inst.value(i));      }    } catch (    Exception e) {      if (!(e instanceof IllegalArgumentException))       fail(e.toString());    }  }}  }
class C{  public SaveAction(final GuiComponent guiComponent){  super("Save...");  if (guiComponent == null) {    throw new IllegalArgumentException("component must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("Save.png"));  this.putValue(this.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(SHORT_DESCRIPTION,"Save this component");  this.guiComponent=guiComponent;}  }
class C{  public void droidsafeSetContext(Context activity){  mActivity=(Activity)activity;  onAttach(mActivity);}  }
class C{  public static float svgToUserSpace(String s,String attr,short d,Context ctx){  try {    return org.apache.flex.forks.batik.parser.UnitProcessor.svgToUserSpace(s,attr,d,ctx);  } catch (  ParseException pEx) {    throw new BridgeException(getBridgeContext(ctx),ctx.getElement(),pEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,s,pEx});  }}  }
class C{  public InternalFileServiceClient(String server){  setServer(server);}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  private void sendValuesToScatteredJobs(JobRecord job,VariableRecord variable,InputUpdateEvent event) throws EventHandlerException {  List<LinkRecord> links=linkService.findBySourceAndDestinationType(job.getId(),event.getPortId(),LinkPortType.INPUT,event.getContextId());  List<Event> events=new ArrayList<>();  for (  LinkRecord link : links) {    VariableRecord destinationVariable=variableService.find(link.getDestinationJobId(),link.getDestinationJobPort(),LinkPortType.INPUT,event.getContextId());    Event updateInputEvent=new InputUpdateEvent(event.getContextId(),destinationVariable.getJobId(),destinationVariable.getPortId(),variable.getValue(),event.getPosition());    events.add(updateInputEvent);  }  for (  Event subevent : events) {    eventProcessor.send(subevent);  }}  }
class C{  public static GridLayout createMarginlessGridLayout(int columns,boolean areColumnsSameSize){  GridLayout result=new GridLayout(columns,areColumnsSameSize);  result.marginLeft=0;  result.marginTop=0;  result.marginRight=0;  result.marginBottom=0;  result.horizontalSpacing=0;  result.verticalSpacing=0;  result.marginHeight=0;  result.marginWidth=0;  return result;}  }
class C{  private void scheduleIdleTimeout(Connection conn){  if (conn == null) {    return;  }  if (this.owner.idleConnectionTimeout != 0) {    try {synchronized (this) {        if (!this.closed) {          IdleConnTT task=new IdleConnTT(conn);          conn.setIdleTimeoutTask(task);          this.getIdleConnTimer().scheduleAtFixedRate(task,this.owner.idleConnectionTimeout,this.owner.idleConnectionTimeout);        }      }    } catch (    IllegalStateException e) {      if (conn.isClosing()) {        return;      }      logger.debug("Got an illegal state exception: {}",e.getMessage(),e);      owner.getCancelCriterion().checkCancelInProgress(null);      Throwable cause=owner.getShutdownCause();      if (cause == null) {        cause=e;      }      throw new DistributedSystemDisconnectedException(LocalizedStrings.ConnectionTable_THE_DISTRIBUTED_SYSTEM_IS_SHUTTING_DOWN.toLocalizedString(),cause);    }  }}  }
class C{  public static void rollbackConnectionQuiet(@Nullable Connection rsrc){  if (rsrc != null)   try {    rsrc.rollback();  } catch (  SQLException ignored) {  }}  }
class C{  private WorkbenchServlet findWorkbenchServlet(final HttpServletRequest req,final HttpServletResponse resp) throws ServletException {  WorkbenchServlet servlet=null;  final String server=findServer(req,resp);  if (servlets.containsKey(server)) {    servlet=servlets.get(server);  } else {    if (isServerFixed() || this.serverValidator.isValidServer(server)) {synchronized (servlets) {        if (servlets.containsKey(server)) {          servlet=servlets.get(server);        } else {          final Map<String,String> params=new HashMap<String,String>(3);          params.put(SERVER_PARAM,server);          params.put(CookieHandler.COOKIE_AGE_PARAM,this.cookies.getMaxAge());          params.put(TRANSFORMATIONS,this.config.getInitParameter(TRANSFORMATIONS));          final ServletConfig cfg=new BasicServletConfig(server,config,params);          servlet=new WorkbenchServlet();          servlet.init(cfg);          servlets.put(server,servlet);        }      }    }  }  return servlet;}  }
class C{  public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  protected void sequence_Primary(ISerializationContext context,Array semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String format(long millis){  return String.format("%02d:%02d.%03ds",millis / 60000,(millis % 60000) / 1000,(millis % 1000));}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public static MetadataContext forAlt(AltFormat format){  return forContext(format,null,null);}  }
class C{  public static Bitmap scale(Bitmap src,int dw,int dh){  Bitmap res=Bitmap.createBitmap(dw,dh,Bitmap.Config.ARGB_8888);  scale(src,res);  return res;}  }
class C{  public void normalise(Collection<String> condVars){  Map<Assignment,Double> totals=new HashMap<Assignment,Double>();  for (  Assignment a : matrix.keySet()) {    Assignment cond=a.getTrimmed(condVars);    double prob=totals.getOrDefault(cond,0.0);    totals.put(cond,prob + matrix.get(a)[0]);  }  for (  Entry<Assignment,double[]> e : matrix.entrySet()) {    Assignment cond=e.getKey().getTrimmed(condVars);    double[] old=e.getValue();    e.setValue(new double[]{old[0] / totals.get(cond),old[1]});  }}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    debugCodeCall("isReadOnly");    checkClosed();    getReadOnly=prepareCommand("CALL READONLY()",getReadOnly);    ResultInterface result=getReadOnly.executeQuery(0,false);    result.next();    boolean readOnly=result.currentRow()[0].getBoolean().booleanValue();    return readOnly;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void checkCompleted(CompletionStage<?> stage){  if (!stage.toCompletableFuture().isDone()) {    throw new IllegalStateException("future was not completed");  }}  }
class C{  public Pair E(){  char d2=(char)(diagonal + 1);  return new Pair(d2,row);}  }
class C{  public static void initServiceCache(Map<String,IBinder> cache){  if (sCache.size() != 0) {    throw new IllegalStateException("setServiceCache may only be called once");  }  sCache.putAll(cache);}  }
class C{  public MicroservicesRunner deploy(Object... microservice){  checkState();  msRegistry.addService(microservice);  return this;}  }
class C{  private void checkProviderVersion(CIMInstance softwareInstance,StorageProvider provider) throws SMIPluginException {  String instanceVersion=String.format("%s.%s.%s.%s",getCIMPropertyValue(softwareInstance,MAJORVERSION),getCIMPropertyValue(softwareInstance,MINORVERSION),getCIMPropertyValue(softwareInstance,REVISIONNUMBER),getCIMPropertyValue(softwareInstance,BUILD_NUMBER));  provider.setVersionString(getCIMPropertyValue(softwareInstance,VERSIONSTRING));  String minimumSupportedVersion=ControllerUtils.getPropertyValueFromCoordinator(coordinator,isIBMInstance(softwareInstance) ? Constants.IBMXIV_PROVIDER_VERSION : Constants.PROVIDER_VERSION);  _logger.info("Verifying version details : Minimum Supported Version {} - Discovered Provider Version {}",minimumSupportedVersion,instanceVersion);  if (instanceVersion.indexOf(BLOCKED_VER802) == 0) {    provider.setCompatibilityStatus(CompatibilityStatus.INCOMPATIBLE.toString());    _dbClient.persistObject(provider);    String msg=String.format("Provider version %s is not supported.",BLOCKED_VER802);    _logger.warn(msg);    throw new SMIPluginException(msg,SMIPluginException.ERRORCODE_PROVIDER_NOT_SUPPORTED);  }  if (VersionChecker.verifyVersionDetails(minimumSupportedVersion,instanceVersion) < 0) {    provider.setCompatibilityStatus(CompatibilityStatus.INCOMPATIBLE.toString());    _dbClient.persistObject(provider);    String msg=String.format("Provider version %s is not supported. Should be a minimum of %s",instanceVersion,minimumSupportedVersion);    _logger.warn(msg);    throw new SMIPluginException(msg,SMIPluginException.ERRORCODE_PROVIDER_NOT_SUPPORTED);  } else {    provider.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.toString());    provider.setDescription(getCIMPropertyValue(softwareInstance,DESCRIPTION));    provider.setManufacturer(getCIMPropertyValue(softwareInstance,MANFACTURER));    _dbClient.persistObject(provider);  }}  }
class C{  public boolean isExternal(){  return this.external;}  }
class C{  public static void CF10(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double hj;  double N=2.0;  double a=1.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    hj=4.0 * yj * yj - Math.cos(8.0 * PI * yj) + 1.0;    if (j % 3 == 1) {      sum1+=hj;      count1++;    } else     if (j % 3 == 2) {      sum2+=hj;      count2++;    } else {      sum3+=hj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0)) - 1.0;}  }
class C{  public UnicodeReader(InputStream in,String defaultEncoding) throws IOException {  byte bom[]=new byte[BOM_SIZE];  String encoding;  int unread;  PushbackInputStream pushbackStream=new PushbackInputStream(in,BOM_SIZE);  int n=pushbackStream.read(bom,0,bom.length);  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else   if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else {    encoding=defaultEncoding;    unread=n;  }  if (unread > 0) {    pushbackStream.unread(bom,(n - unread),unread);  } else   if (unread < -1) {    pushbackStream.unread(bom,0,0);  }  if (encoding == null) {    reader=new InputStreamReader(pushbackStream);  } else {    reader=new InputStreamReader(pushbackStream,encoding);  }}  }
class C{  public TriggerBuilder<T> withPriority(int triggerPriority){  this.priority=triggerPriority;  return this;}  }
class C{  public RetrieveAndRank(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public ParallelTaskBuilder saveResponseHeaders(ResponseHeaderMeta responseHeaderMeta){  this.httpMeta.setResponseHeaderMeta(responseHeaderMeta);  return this;}  }
class C{  public void close(){  this._stats.close();}  }
class C{  @SuppressWarnings("unchecked") public synchronized Reference<? extends T> poll(){  if (head == null) {    return null;  }  Reference<? extends T> ret;  ret=head;  if (head == head.queueNext) {    head=null;  } else {    head=head.queueNext;  }  ret.queueNext=null;  return ret;}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public void onAttachFragment(Fragment fragment){  fragmentName=fragment.toString();  try {    listener=(DomoticzFragmentListener)fragment;  } catch (  ClassCastException e) {    throw new ClassCastException(fragment.toString() + " must implement DomoticzFragmentListener");  }}  }
class C{  private InitializeDeploymentMigrationWorkflowService.State buildValidStartState(@Nullable InitializeDeploymentMigrationWorkflowService.TaskState.TaskStage startStage,@Nullable InitializeDeploymentMigrationWorkflowService.TaskState.SubStage startSubStage) throws Throwable {  InitializeDeploymentMigrationWorkflowService.State startState=new InitializeDeploymentMigrationWorkflowService.State();  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  startState.sourceLoadBalancerAddress="lbLink1";  startState.destinationDeploymentId="deployment1";  startState.taskPollDelay=1;  if (null != startStage) {    startState.taskState=new InitializeDeploymentMigrationWorkflowService.TaskState();    startState.taskState.stage=startStage;    startState.taskState.subStage=startSubStage;    if (TaskState.TaskStage.STARTED == startStage) {switch (startSubStage) {case CONTINOUS_MIGRATE_DATA:case UPLOAD_VIBS:        startState.sourceZookeeperQuorum="quorum";case PAUSE_DESTINATION_SYSTEM:      startState.sourceDeploymentId="deployment1";    break;}}}return startState;}  }
class C{  public static final byte[] toByteArray(int i){  byte[] baTemp=new byte[4];  baTemp[3]=(byte)i;  baTemp[2]=(byte)(i >> 8);  baTemp[1]=(byte)(i >> 16);  baTemp[0]=(byte)(i >> 24);  return baTemp;}  }
class C{  public BinaryMessage(int size,boolean[] bitsToPreload){  this(size);  int pointer=0;  while (!this.isFull() && pointer < bitsToPreload.length) {    try {      this.add(bitsToPreload[pointer]);    } catch (    BitSetFullException e) {      e.printStackTrace();    }    pointer++;  }}  }
class C{  public void connect(){  Platform.getExtensionRegistry().addRegistryChangeListener(this,RefactoringCore.ID_PLUGIN);}  }
class C{  protected Messages(){}  }
class C{  public static RuntimeException wrap(Throwable t,String message){  return new UncheckedException(message,t);}  }
class C{  public void failIfNotConnected(boolean failIfNotConnected){  this.policy.failIfNotConnected=failIfNotConnected;}  }
class C{  @Nullable private StructuredRecord parseRequest(Matcher logMatcher,int[] indices){  String request=logMatcher.group(indices[0]);  Matcher requestMatcher=REQUEST_PAGE_PATTERN.matcher(request);  if (!requestMatcher.matches() || requestMatcher.groupCount() < 2) {    LOG.debug("Couldn't parse uri because request does not match request pattern, request: {}",request);    return null;  }  String uri=requestMatcher.group(2);  long ts=System.currentTimeMillis();  try {    ts=sdfStrftime.parse(logMatcher.group(indices[1])).getTime();  } catch (  ParseException e) {    LOG.debug("Couldn't parse time from the input record, using current timestamp instead. Exception: {}",e.getMessage());  }  String ip=logMatcher.group(indices[2]);  UserAgentStringParser parser=UADetectorServiceFactory.getResourceModuleParser();  ReadableUserAgent userAgent=parser.parse(logMatcher.group(indices[3]));  String browser=userAgent.getFamily().getName();  String device=userAgent.getDeviceCategory().getCategory().getName();  int httpStatus=Integer.parseInt(logMatcher.group(indices[4]));  return StructuredRecord.builder(LOG_SCHEMA).set("uri",uri).set("ip",ip).set("browser",browser).set("device",device).set("httpStatus",httpStatus).set("ts",ts).build();}  }
class C{  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public static Message mapToMessage(Map<String,String> map){  if (map == null || map.isEmpty())   return null;  int type=Integer.parseInt(map.get("type"));  if (type == MqttMessageType.PUBLISH.value()) {    byte[] bytes=new byte[0];    if (map.get("payload") != null)     try {      bytes=map.get("payload").getBytes("ISO-8859-1");    } catch (    UnsupportedEncodingException ignore) {    }    int pid=Integer.parseInt(map.getOrDefault("packetId","0"));    return new Message<>(new MqttFixedHeader(MqttMessageType.PUBLISH,BooleanUtils.toBoolean(map.getOrDefault("dup","0"),"1","0"),MqttQoS.valueOf(Integer.parseInt(map.getOrDefault("qos","0"))),BooleanUtils.toBoolean(map.getOrDefault("retain","0"),"1","0"),0),new MqttAdditionalHeader(MqttVersion.valueOf(map.getOrDefault("version",MqttVersion.MQTT_3_1_1.toString())),map.get("clientId"),map.get("userName"),null),pid > 0 ? MqttPublishVariableHeader.from(map.get("topicName"),pid) : MqttPublishVariableHeader.from(map.get("topicName")),new MqttPublishPayload(bytes));  } else   if (type == MqttMessageType.PUBREL.value()) {    return new Message<>(new MqttFixedHeader(MqttMessageType.PUBREL,false,MqttQoS.AT_LEAST_ONCE,false,0),new MqttAdditionalHeader(MqttVersion.valueOf(map.getOrDefault("version",MqttVersion.MQTT_3_1_1.toString())),map.get("clientId"),map.get("userName"),null),MqttPacketIdVariableHeader.from(Integer.parseInt(map.getOrDefault("packetId","0"))),null);  } else {    throw new IllegalArgumentException("Invalid in-flight MQTT message type: " + MqttMessageType.valueOf(type));  }}  }
class C{  public AsyncResult TranslateBrowsePathsToNodeIdsAsync(RequestHeader RequestHeader,BrowsePath... BrowsePaths){  TranslateBrowsePathsToNodeIdsRequest req=new TranslateBrowsePathsToNodeIdsRequest(RequestHeader,BrowsePaths);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public SVGOMSymbolElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public TXTRecord(Name name,int dclass,long ttl,String string){  super(name,Type.TXT,dclass,ttl,string);}  }
class C{  public void drawDomainTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){  Paint bandPaint=getDomainTickBandPaint();  if (bandPaint != null) {    boolean fillBand=false;    ValueAxis xAxis=getDomainAxis();    double previous=xAxis.getLowerBound();    Iterator iterator=ticks.iterator();    while (iterator.hasNext()) {      ValueTick tick=(ValueTick)iterator.next();      double current=tick.getValue();      if (fillBand) {        getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,current);      }      previous=current;      fillBand=!fillBand;    }    double end=xAxis.getUpperBound();    if (fillBand) {      getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,end);    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  for (int i=0; i < segments.length; ++i) {    segments[i].setTable(new HashEntry[1]);  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getInt(EventRouter.HIDE_WAIT_TIME,5000));}  }
class C{  public void assignToThread(Class requestType,int offset){  threadAssignements.put(requestType.getName(),new Integer(offset));}  }
class C{  public ClearSelectionAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  VectorSpeciesCGP s=(VectorSpeciesCGP)species;  if (!(s.mutationProbability > 0.0))   return;  MersenneTwisterFast rng=state.random[thread];  for (int x=0; x < genome.length; x++)   if (rng.nextBoolean(s.mutationProbability))   genome[x]=rng.nextFloat();}  }
class C{  @Override public void accept(int value){  ++count;  sum+=value;  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  protected Marker(Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){  ParamChecks.nullNotPermitted(paint,"paint");  ParamChecks.nullNotPermitted(stroke,"stroke");  if (alpha < 0.0f || alpha > 1.0f) {    throw new IllegalArgumentException("The 'alpha' value must be in the range 0.0f to 1.0f");  }  this.paint=paint;  this.stroke=stroke;  this.outlinePaint=outlinePaint;  this.outlineStroke=outlineStroke;  this.alpha=alpha;  this.labelFont=new Font("SansSerif",Font.PLAIN,9);  this.labelPaint=Color.black;  this.labelBackgroundColor=new Color(100,100,100,100);  this.labelAnchor=RectangleAnchor.TOP_LEFT;  this.labelOffset=new RectangleInsets(3.0,3.0,3.0,3.0);  this.labelOffsetType=LengthAdjustmentType.CONTRACT;  this.labelTextAnchor=TextAnchor.CENTER;  this.listenerList=new EventListenerList();}  }
class C{  public AuthResult link(Account.Id to,AuthRequest who) throws AccountException, OrmException, IOException {  try (ReviewDb db=schema.open()){    AccountExternalId.Key key=id(who);    AccountExternalId extId=getAccountExternalId(db,key);    if (extId != null) {      if (!extId.getAccountId().equals(to)) {        throw new AccountException("Identity in use by another account");      }      update(db,who,extId);    } else {      extId=createId(to,who);      extId.setEmailAddress(who.getEmailAddress());      db.accountExternalIds().insert(Collections.singleton(extId));      if (who.getEmailAddress() != null) {        Account a=db.accounts().get(to);        if (a.getPreferredEmail() == null) {          a.setPreferredEmail(who.getEmailAddress());          db.accounts().update(Collections.singleton(a));        }      }      if (who.getEmailAddress() != null) {        byEmailCache.evict(who.getEmailAddress());        byIdCache.evict(to);      }    }    return new AuthResult(to,key,false);  } }  }
class C{  private static String exceptionToString(Throwable t){  StringWriter stringWriter=new StringWriter();  PrintWriter writer=new PrintWriter(stringWriter);  t.printStackTrace(writer);  return stringWriter.toString();}  }
class C{  public Coord4D step(ForgeDirection side){  return translate(side.offsetX,side.offsetY,side.offsetZ);}  }
class C{  public void println(int x){  m_Owner.append(x + m_LineFeed);}  }
class C{  public void unlockRead(long stamp){  long s, m;  WNode h;  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS) || (stamp & ABITS) == 0L || (m=s & ABITS) == 0L || m == WBIT)     throw new IllegalMonitorStateException();    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        break;      }    } else     if (tryDecReaderOverflow(s) != 0L)     break;  }}  }
class C{  @Override public SQLXML createSQLXML() throws SQLException {  throw unsupported("SQLXML");}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public static void main(String[] args){  try {    ProgressDialog dialog=new ProgressDialog();    dialog.setVisible(true);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Deprecated protected String actorIdentity(){  return reference.id.toString();}  }
class C{  public void traverseSupertypesDepthFirst(ClassDescriptor start,SupertypeTraversalVisitor visitor) throws ClassNotFoundException {  this.traverseSupertypesDepthFirstHelper(start,visitor,new HashSet<ClassDescriptor>());}  }
class C{  public boolean isLastInChain(){  return lastInChain;}  }
class C{  public PermissionSetResource(User user){  this.user=user;}  }
class C{  public void produceEvent(LogConnection conn,long seqno,String shardId,Timestamp ts) throws ReplicatorException, InterruptedException {  produceEvent(conn,seqno,(short)0,true,shardId,ts);}  }
class C{  public void sendKeyDownUpSync(int key){  sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,key));  sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,key));}  }
class C{  public synchronized static void clearAllInternalObjectCaches(){  if (defaultObjectCache != null) {    defaultObjectCache.clearAll();    defaultObjectCache=null;  }}  }
class C{  @Override public int hashCode(){  return -3 * expression.hashCode();}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  protected void process(String algorithmName,Properties properties) throws IOException {  TimingProblem timingProblem=new TimingProblem(problem);  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm(algorithmName,properties,timingProblem);  if (!properties.containsKey("maxEvaluations")) {    throw new FrameworkException("maxEvaluations not defined");  }  int maxEvaluations=(int)Double.parseDouble(properties.getProperty("maxEvaluations"));  long startTime=System.nanoTime();  while (!algorithm.isTerminated() && (algorithm.getNumberOfEvaluations() < maxEvaluations)) {    algorithm.step();  }  long endTime=System.nanoTime();  NondominatedPopulation result=algorithm.getResult();  algorithm.terminate();  if (properties.containsKey("epsilon")) {    TypedProperties typedProperties=new TypedProperties(properties);    double[] epsilon=typedProperties.getDoubleArray("epsilon",null);    result=EpsilonHelper.convert(result,epsilon);  }  Properties timingData=new Properties();  timingData.setProperty("EvaluationTime",Double.toString(timingProblem.getTime()));  timingData.setProperty("TotalTime",Double.toString((endTime - startTime) / 1e9));  output.append(new ResultEntry(result,timingData));}  }
class C{  public static <W>void createKneserNeyLmFromTextFiles(final List<String> files,final WordIndexer<W> wordIndexer,final int lmOrder,final File arpaOutputFile,final ConfigOptions opts){  final TextReader<W> reader=new TextReader<W>(files,wordIndexer);  KneserNeyLmReaderCallback<W> kneserNeyReader=new KneserNeyLmReaderCallback<W>(wordIndexer,lmOrder,opts);  reader.parse(kneserNeyReader);  kneserNeyReader.parse(new KneserNeyFileWritingLmReaderCallback<W>(arpaOutputFile,wordIndexer));}  }
class C{  public static void main(String args[]){  int Y[][]=new int[][]{{0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}};  double P[][]=new double[][]{{0,0.7,0.8,0.9,0,0,0,0,0,0.7,0,0,0,0,0},{0,0,0,0.6,0.7,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0.8,0,0,0,0,0,0.8,0,0},{0,0.7,0,0,0,0,0,0,0,0,0,0,0,0,0}};  int Ypred[][]=new int[][]{{0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}};  System.out.println("0.533333333... = " + P_FmacroAvgD(Y,Ypred));  System.out.println("LD = " + L_LevenshteinDistance(Y,Ypred));  System.out.println("MA = \n" + curveDataMacroAveraged(Y,P));}  }
class C{  public void testGetWarContextWhenInvalidFile(){  try {    new JBossWAR("some/invalid/file");    fail("Should have thrown a ContainerException because the file doesn't exist");  } catch (  ContainerException expected) {    assertEquals("Failed to parse JBoss WAR file in [some/invalid/file]",expected.getMessage());  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NEW_NODE_ID;case 3:return NODE_STORE;default :return null;}}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getKey_();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("RegexValidator{");  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(patterns[i].pattern());  }  buffer.append("}");  return buffer.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress=0;  double z, w, wN;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double largeValue=Float.MAX_VALUE;  double smallValue=0.0001;  boolean somethingDone;  int loopNum=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  smallValue=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double noDataOutput=-32768.0;    WhiteboxRaster output;    if (smallValue < 0.01 && smallValue > 0) {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,largeValue);    } else {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,largeValue);    }    output.setNoDataValue(noDataOutput);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      if (row == 0 || row == (rows - 1)) {        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,noDataOutput);          }        }      } else {        for (col=0; col < cols; col++) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }        for (col=cols - 1; col >= 0; col--) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1:",progress);    }    i=0;    do {      loopNum++;      somethingDone=false;switch (i) {case 0:        for (row=1; row < (rows - 1); row++) {          for (col=1; col < (cols - 1); col++) {            z=DEM.getValue(row,col);            w=output.getValue(row,col);            if (w > z) {              for (n=0; n < 8; n++) {                wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;                if (z == noData && wN == noDataOutput) {                  w=noDataOutput;                  output.setValue(row,col,w);                }                if (wN < w) {                  if (wN > z) {                    output.setValue(row,col,wN);                    w=wN;                  } else {                    output.setValue(row,col,z);                    break;                  }                  somethingDone=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + loopNum + ":",progress);        }      break;case 1:    for (row=(rows - 2); row >= 1; row--) {      for (col=(cols - 2); col >= 1; col--) {        z=DEM.getValue(row,col);        w=output.getValue(row,col);        if (w > z) {          for (n=0; n < 8; n++) {            wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;            if (z == noData && wN == noDataOutput) {              w=noDataOutput;              output.setValue(row,col,w);            }            if (wN < w) {              if (wN > z) {                output.setValue(row,col,wN);                w=wN;              } else {                output.setValue(row,col,z);                break;              }              somethingDone=true;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * (rows - row) / (rows - 1));      updateProgress("Loop " + loopNum + ":",progress);    }  break;case 2:for (row=1; row < (rows - 1); row++) {  for (col=(cols - 2); col >= 1; col--) {    z=DEM.getValue(row,col);    w=output.getValue(row,col);    if (w > z) {      for (n=0; n < 8; n++) {        wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;        if (z == noData && wN == noDataOutput) {          w=noDataOutput;          output.setValue(row,col,w);        }        if (wN < w) {          if (wN > z) {            output.setValue(row,col,wN);            w=wN;          } else {            output.setValue(row,col,z);            break;          }          somethingDone=true;        }      }    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(int)(100f * row / (rows - 1));  updateProgress("Loop " + loopNum + ":",progress);}break;case 3:for (row=(rows - 2); row >= 1; row--) {for (col=1; col < (cols - 1); col++) {z=DEM.getValue(row,col);w=output.getValue(row,col);if (w > z) {  for (n=0; n < 8; n++) {    wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;    if (z == noData && wN == noDataOutput) {      w=noDataOutput;      output.setValue(row,col,w);    }    if (wN < w) {      if (wN > z) {        output.setValue(row,col,wN);        w=wN;      } else {        output.setValue(row,col,z);        break;      }      somethingDone=true;    }  }}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}break;}i++;if (i > 3) {i=0;}} while (somethingDone);loopNum++;double zN;dX=new int[]{-1,0,1,1,-1};dY=new int[]{-1,-1,-1,0,0};for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}loopNum++;dX=new int[]{-1,0,1,1,-1};dY=new int[]{1,1,1,0,0};for (row=rows - 1; row >= 0; row--) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.flush();output.findMinAndMaxVals();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean mouseClicked(MouseEvent e){  if (selectedGraphic != null) {switch (e.getClickCount()) {case 1:      if (Debug.debugging("cachelayer")) {        Debug.output("CacheLayer: Show Info: " + selectedGraphic.getAttribute(OMGraphic.INFOLINE));      }    break;case 2:  if (Debug.debugging("cachelayer")) {    Debug.output("CacheLayer: Request URL: " + selectedGraphic);  }break;default :break;}return true;} else {return false;}}  }
class C{  GridNioSslHandler(GridNioSslFilter parent,GridNioSession ses,SSLEngine engine,boolean directBuf,ByteOrder order,IgniteLogger log) throws SSLException {  assert parent != null;  assert ses != null;  assert engine != null;  assert log != null;  this.parent=parent;  this.ses=ses;  this.order=order;  this.directBuf=directBuf;  this.log=log;  sslEngine=engine;  if (ses.meta(SSL_ENGINE.ordinal()) == null)   sslEngine.beginHandshake(); else {    sslEngine=ses.meta(SSL_ENGINE.ordinal());    handshakeFinished=true;    initHandshakeComplete=true;  }  handshakeStatus=sslEngine.getHandshakeStatus();  int netBufSize=sslEngine.getSession().getPacketBufferSize() + 50;  outNetBuf=directBuf ? ByteBuffer.allocateDirect(netBufSize) : ByteBuffer.allocate(netBufSize);  outNetBuf.order(order);  inNetBuf=directBuf ? ByteBuffer.allocateDirect(netBufSize) : ByteBuffer.allocate(netBufSize);  inNetBuf.order(order);  outNetBuf.position(0);  outNetBuf.limit(0);  int appBufSize=Math.max(sslEngine.getSession().getApplicationBufferSize() + 50,netBufSize * 2);  appBuf=directBuf ? ByteBuffer.allocateDirect(appBufSize) : ByteBuffer.allocate(appBufSize);  appBuf.order(order);  if (log.isDebugEnabled())   log.debug("Started SSL session [netBufSize=" + netBufSize + ", appBufSize="+ appBufSize+ ']');}  }
class C{  private void reduceMapSpray(HashMap<String,HashMap<String,HashSet<Integer>>> map){  Predicate<Integer> duplicate=null;  map.entrySet().removeIf(null);}  }
class C{  public static String toString(final byte[] b,int off,int len){  if (b == null) {    return null;  }  if (len == 0) {    return "";  }  try {    return new String(b,off,len,UTF8_ENCODING);  } catch (  UnsupportedEncodingException e) {    LOG.error("UTF-8 not supported?",e);    return null;  }}  }
class C{  public void installNativeTheme(){  if (nativeThemeAvailable) {    try {      InputStream is=getResourceAsStream(getClass(),"/blackberry_theme.res");      Resources r=Resources.open(is);      UIManager.getInstance().setThemeProps(r.getTheme(r.getThemeResourceNames()[0]));      is.close();    } catch (    IOException ex) {      ex.printStackTrace();    }  }}  }
class C{  protected void replaceFirstEventToSend(){  eventsToSend.remove(eventsToSend.first());  SendableEvent theEvent=read();  if (theEvent != null) {    eventsToSend.add(theEvent);  }}  }
class C{  public HessianOutput(){}  }
class C{  public ModbusSerialListener(SerialParameters params){  serialCon=new SerialConnection(params);}  }
class C{  public static void join() throws InterruptedException {  if (defaultClient != null) {    defaultClient.join();  }}  }
class C{  public ProductReview writeReview(ProductReview review,Long productKey) throws NonUniqueBusinessKeyException, ConcurrentModificationException, OperationNotPermittedException, ObjectNotFoundException {  ArgumentValidator.notNull("review",review);  ArgumentValidator.notNull("productKey",productKey);  Product product=loadProduct(productKey.longValue());  initFeedback(product);  boolean update=review.getKey() != 0;  if (update) {    updatedReview(review);  } else {    createReview(review,product);  }  product.getProductFeedback().updateAverageRating();  return review;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public void defineWidth(int motionType,int startTime,int duration,int start,int end){  width=createMotion(motionType,startTime,duration,start,end);}  }
class C{  public boolean isRedeployMode(){  return scenario.equals(PropertyConstants.REDEPLOY_MODE) ? true : false;}  }
class C{  public void removeCartItem(int index,LocalDispatcher dispatcher) throws CartItemModifyException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  if (index < 0)   return;  if (cartLines.size() <= index)   return;  ShoppingCartItem item=cartLines.remove(index);  item.setQuantity(BigDecimal.ZERO,dispatcher,this);}  }
class C{  private void initDatabase(String databaseType){  try {    for (int i=0; i < Database.DB_NAMES.length; i++) {      if (Database.DB_NAMES[i].equals(databaseType)) {        m_dbTarget=(AdempiereDatabase)Database.DB_CLASSES[i].newInstance();        break;      }    }  } catch (  Exception e) {    log.severe(e.toString());    e.printStackTrace();  }  if (m_dbTarget == null)   throw new IllegalStateException("No database: " + databaseType);  m_dbSource=DB.getDatabase();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static boolean isAffectedByAngelECM(Entity ae,Coords a,Coords b,List<ECMInfo> allECMInfo){  ECMInfo ecmInfo=getECMEffects(ae,a,b,true,allECMInfo);  return (ecmInfo != null) && ecmInfo.isAngelECM();}  }
class C{  @Deprecated public static void dumpStack(String msg,PrintStream out){  new Exception(msg).printStackTrace(out);}  }
class C{  public final boolean isWatchingFor(@NonNull String eventKey){  return eventMap.containsKey(eventKey);}  }
class C{  public NotificationChain basicSetOwner(N4ClassifierDefinition newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,N4JSPackage.N4_MEMBER_DECLARATION__OWNER,msgs);  return msgs;}  }
class C{  @Override protected void installViewListeners(View p){  super.installViewListeners(p);  Action redoActionInView=p.getActionMap().get(ID);  if (redoActionInView != null && redoActionInView != this) {    redoActionInView.addPropertyChangeListener(redoActionPropertyListener);  }}  }
class C{  public void addPCData(Reader reader,String systemID,int lineNr){  int bufSize=2048;  int sizeRead=0;  StringBuffer str=new StringBuffer(bufSize);  char[] buf=new char[bufSize];  for (; ; ) {    if (sizeRead >= bufSize) {      bufSize*=2;      str.ensureCapacity(bufSize);    }    int size;    try {      size=reader.read(buf);    } catch (    IOException e) {      break;    }    if (size < 0) {      break;    }    str.append(buf,0,size);    sizeRead+=size;  }  IXMLElement elt=this.prototype.createElement(null,systemID,lineNr);  elt.setContent(str.toString());  if (!this.stack.empty()) {    IXMLElement top=(IXMLElement)this.stack.peek();    top.addChild(elt);  }}  }
class C{  public static String urlDecode(String encoded){  int length=encoded.length();  byte[] buff=new byte[length];  int j=0;  for (int i=0; i < length; i++) {    char ch=encoded.charAt(i);    if (ch == '+') {      buff[j++]=' ';    } else     if (ch == '%') {      buff[j++]=(byte)Integer.parseInt(encoded.substring(i + 1,i + 3),16);      i+=2;    } else {      if (SysProperties.CHECK) {        if (ch > 127 || ch < ' ') {          throw new IllegalArgumentException("Unexpected char " + (int)ch + " decoding "+ encoded);        }      }      buff[j++]=(byte)ch;    }  }  String s=new String(buff,0,j,Constants.UTF8);  return s;}  }
class C{  public static void main(String[] args) throws IgniteException {  Ignition.start(configuration());}  }
class C{  public BindException(){}  }
class C{  protected void cleanupGraph(MethodScope methodScope){  assert verifyEdges(methodScope);}  }
class C{  public boolean isOverUnderPayment(){  Object oo=get_Value(COLUMNNAME_IsOverUnderPayment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static final Criterion address(AddressType type,String address){  return new HeaderCriterion(type.name(),new AddressOperator(address));}  }
class C{  protected CCJumpBy(float time,CGPoint pos,float h,int j){  super(time);  startPosition=CGPoint.make(0,0);  delta=CGPoint.make(pos.x,pos.y);  height=h;  jumps=j;}  }
class C{  public byte readByte() throws IOException {  byte v=dataInput.readByte();  offset+=1;  available-=1;  return v;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AUTO_TRANSITION___AUTO_TRANSITION_BLOCK_1:    return autoTransitionBlock_1 != null && !autoTransitionBlock_1.isEmpty();case UmplePackage.AUTO_TRANSITION___ACTIVITY_1:  return activity_1 != null && !activity_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unchecked") protected Object populate(Object obj) throws Exception {  Map map=PropertiesHelper.convertBundleToMap(rb);  BeanUtils.copyProperties(obj,map);  return obj;}  }
class C{  private void performZoom(MotionEvent event){  if (event.getPointerCount() >= 2) {    OnChartGestureListener l=mChart.getOnChartGestureListener();    float totalDist=spacing(event);    if (totalDist > 10f) {      PointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);      if (mTouchMode == PINCH_ZOOM) {        float scale=totalDist / mSavedDist;        float scaleX=(mChart.isScaleXEnabled()) ? scale : 1f;        float scaleY=(mChart.isScaleYEnabled()) ? scale : 1f;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(scaleX,scaleY,t.x,t.y);        if (l != null)         l.onChartScale(event,scaleX,scaleY);      } else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {        float xDist=getXDist(event);        float scaleX=xDist / mSavedXDist;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(scaleX,1f,t.x,t.y);        if (l != null)         l.onChartScale(event,scaleX,1f);      } else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {        float yDist=getYDist(event);        float scaleY=yDist / mSavedYDist;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(1f,scaleY,t.x,t.y);        if (l != null)         l.onChartScale(event,1f,scaleY);      }    }  }}  }
class C{  public static boolean hasUsableWrench(EntityPlayer player,int x,int y,int z){  ItemStack tool=player.getCurrentEquippedItem();  if (tool.getItem() instanceof IMekWrench && ((IMekWrench)tool.getItem()).canUseWrench(player,x,y,z)) {    return true;  }  if (isBCWrench(tool.getItem()) && ((IToolWrench)tool.getItem()).canWrench(player,x,y,z)) {    return true;  }  if (isCoFHHammer(tool.getItem()) && ((IToolHammer)tool.getItem()).isUsable(tool,player,x,y,z)) {    return true;  }  return false;}  }
class C{  public boolean scheduleOnceIn(final double delta,final Steppable event){synchronized (lock) {    return _scheduleOnce(new Key(time + delta,0),event);  }}  }
class C{  private Fraction addSub(final Fraction fraction,final boolean isAdd){  if (fraction == null) {    throw new IllegalArgumentException("The fraction must not be null");  }  if (numerator == 0) {    return isAdd ? fraction : fraction.negate();  }  if (fraction.numerator == 0) {    return this;  }  final int d1=greatestCommonDivisor(denominator,fraction.denominator);  if (d1 == 1) {    final int uvp=mulAndCheck(numerator,fraction.denominator);    final int upv=mulAndCheck(fraction.numerator,denominator);    return new Fraction(isAdd ? addAndCheck(uvp,upv) : subAndCheck(uvp,upv),mulPosAndCheck(denominator,fraction.denominator));  }  final BigInteger uvp=BigInteger.valueOf(numerator).multiply(BigInteger.valueOf(fraction.denominator / d1));  final BigInteger upv=BigInteger.valueOf(fraction.numerator).multiply(BigInteger.valueOf(denominator / d1));  final BigInteger t=isAdd ? uvp.add(upv) : uvp.subtract(upv);  final int tmodd1=t.mod(BigInteger.valueOf(d1)).intValue();  final int d2=tmodd1 == 0 ? d1 : greatestCommonDivisor(tmodd1,d1);  final BigInteger w=t.divide(BigInteger.valueOf(d2));  if (w.bitLength() > 31) {    throw new ArithmeticException("overflow: numerator too large after multiply");  }  return new Fraction(w.intValue(),mulPosAndCheck(denominator / d1,fraction.denominator / d2));}  }
class C{  public String globalInfo(){  return "Save static images (such as those produced by " + "ModelPerformanceChart) to a file.";}  }
class C{  public SpamAssassinInvoker(String spamdHost,int spamdPort){  this.spamdHost=spamdHost;  this.spamdPort=spamdPort;}  }
class C{  public static BindingSet singleResult(TupleQueryResult result) throws QueryEvaluationException {  BindingSet singleResult=null;  if (result.hasNext()) {    singleResult=result.next();  }  result.close();  return singleResult;}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  if (delegate != null) {    return delegate.scan(clazz);  }  return null;}  }
class C{  @Nullable IndexMetaData loadIndexState(String index) throws IOException {  return indexStateFormat.loadLatestState(logger,nodeEnv.indexPaths(new Index(index)));}  }
class C{  public DTLZ4(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  @Override public int hashCode(){  int hash=3;  hash=17 * hash + (this.value != null ? this.value.hashCode() : 0);  hash=17 * hash + (this.weak ? 1 : 0);  return hash;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  private int findWindowPosition(String window){  int loc=windowOrder.indexOf(window);  if (loc != -1) {    int i=0;    for (    Component c : panel.getComponents()) {      if (c instanceof ManagedWindow) {        String name=c.getName();        if (loc < windowOrder.indexOf(name)) {          return i;        }      }      i++;    }  } else {    windowOrder.add(window);    fireWindowOrderChanged();  }  return panel.getComponentCount();}  }
class C{  public ASN1Primitive toASN1Primitive(){  if (issuerSerial != null) {    return issuerSerial.toASN1Primitive();  }  return new DERTaggedObject(false,0,rKeyID);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public DNetscapeCertificateType(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeCertificateType.Title"));  initComponents();}  }
class C{  public int writeToMessage(byte[] byteArray,int offset,int length){  int remaining=length;  while (this.length + remaining > capacity) {    if (!this.messageBuffer.expandMessage(this)) {      return -1;    }  }  int bytesToCopy=Math.min(remaining,this.capacity - this.length);  System.arraycopy(byteArray,offset,this.sharedArray,this.offset + this.length,bytesToCopy);  this.length+=bytesToCopy;  return bytesToCopy;}  }
class C{  public static List<FeaturesExtractor> loadExtractors(Path pluginsConfigPath,ProcessingResult result){  File pluginsConfigFile=pluginsConfigPath.toFile();  if (pluginsConfigFile.exists() && pluginsConfigFile.canRead()) {    try (FileInputStream fis=new FileInputStream(pluginsConfigFile)){      PluginsCollectionConfig pluginsCollectionConfig=PluginsCollectionConfig.fromXml(fis);      return getAllExtractors(pluginsCollectionConfig,result);    } catch (    IOException|JAXBException e) {      LOGGER.log(Level.WARNING,"Problem loading Feature Extraction plugins from: " + pluginsConfigFile,e);      result.addErrorMessage(e.getMessage());    }  }  return Collections.emptyList();}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  void readARC() throws IOException {  Debug.message("e00","E00: read ARC");  arcs=new OMGraphicList();  int narc=1;  int[] header=new int[7];  double[] coords=new double[4];  while (true) {    String S=isr.readLine();    if (S == null)     return;    parseString(S,header,10);    if (header[0] == -1)     break;    int n=header[6];    double[] llpoints=new double[2 * n];    int k=0;    for (int j=0; j < n; j++) {      S=isr.readLine();      if (S == null)       return;      parseString(S,coords);      llpoints[k++]=coords[1];      llpoints[k++]=coords[0];      if (++j >= n)       break;      llpoints[k++]=coords[3];      llpoints[k++]=coords[2];    }    OMPoly P=new OMPoly(llpoints,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_STRAIGHT);    P.setLinePaint(getArcPaint(0));    if (SelectArcColor != null)     P.setSelectPaint(SelectArcColor);    arcs.add(P);    P.putAttribute(OMGraphic.APP_OBJECT,new E00Data(narc++));  }}  }
class C{  private Paint createGraphicDropShadowGradient(Shape s){  Rectangle2D b=s.getBounds2D();  float midX=(float)b.getCenterX();  float y1=(float)b.getMinY();  float y2=(float)b.getMaxY();  return createGradient(midX,y1,midX,y2,new float[]{0f,0.43f,0.57f,1f},new Color[]{graphicDropShadow1,graphicDropShadow2,graphicDropShadow3,graphicDropShadow4});}  }
class C{  @Override public BezierPath clone(){  BezierPath that=(BezierPath)super.clone();  for (int i=0, n=this.size(); i < n; i++) {    that.set(i,(Node)this.get(i).clone());  }  return that;}  }
class C{  private static boolean isOctal(final byte c){  return '0' <= c && c <= '7';}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public LocationConfiguration keepTracking(boolean track){  this.keepTracking=track;  return this;}  }
class C{  public boolean nullsAreSortedLow() throws SQLException {  return gdsHelper.compareToVersion(2,0) >= 0;}  }
class C{  public void add(IoServiceListener listener){  if (listener != null) {    listeners.add(listener);  }}  }
class C{  protected void warmUp() throws Exception {  try {    System.out.print("Warm-up period (10 iterations)");    for (int i=0; i < 10; i++) {      doOneIteration();      System.out.print(".");    }    System.out.println();    System.out.println("Warm-up period ends");    System.out.println("\nUnits for this test are transactions/sec.");  } catch (  Exception ex) {    ex.printStackTrace();    throw ex;  }}  }
class C{  protected void retrieveFromListExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idFicha=request.getParameter("idFicha");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  FichaVO fichaVO=descripcionService.getFicha(idFicha);  setInTemporalSession(request,"fichaVO",fichaVO);  setReturnActionFordward(request,mapping.findForward("retrieveFromList"));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tNumber of trees to build.\n\t(default 100)","I",1,"-I <number of trees>"));  newVector.addElement(new Option("\tNumber of features to consider (<1=int(log_2(#predictors)+1)).\n\t(default 0)","K",1,"-K <number of features>"));  newVector.addElement(new Option("\tSeed for random number generator.\n" + "\t(default 1)","S",1,"-S"));  newVector.addElement(new Option("\tThe maximum depth of the trees, 0 for unlimited.\n" + "\t(default 0)","depth",1,"-depth <num>"));  newVector.addElement(new Option("\tDon't calculate the out of bag error.","O",0,"-O"));  newVector.addElement(new Option("\tPrint the individual trees in the output","print",0,"-print"));  newVector.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @SuppressWarnings("unchecked") public static <T,U>Stream<U> ofType(final Stream<T> stream,final Class<? extends U> type){  return stream.filter(null).map(null);}  }
class C{  public RE concat(RE y){  return mkConcat(this,y);}  }
class C{  public void render(Camera camera,final Matrix4 vpMatrix,final Matrix4 projMatrix,final Matrix4 vMatrix,final Matrix4 parentMatrix,Material sceneMaterial){  if (!mIsVisible && !mRenderChildrenAsBatch)   return;  Material material=sceneMaterial == null ? mMaterial : sceneMaterial;  preRender();  boolean modelMatrixWasRecalculated=onRecalculateModelMatrix(parentMatrix);  mMVMatrix.setAll(vMatrix).multiply(mMMatrix);  mMVPMatrix.setAll(vpMatrix).multiply(mMMatrix);  if (mGeometry.hasBoundingBox())   mGeometry.getBoundingBox().transform(getModelMatrix());  if (mGeometry.hasBoundingSphere())   mGeometry.getBoundingSphere().transform(getModelMatrix());  mIsInFrustum=true;  if (mFrustumTest && mGeometry.hasBoundingBox()) {    BoundingBox bbox=mGeometry.getBoundingBox();    if (!camera.getFrustum().boundsInFrustum(bbox)) {      mIsInFrustum=false;    }  }  if (!mIsContainerOnly && mIsInFrustum) {    mPMatrix=projMatrix;    if (mDoubleSided) {      GLES20.glDisable(GLES20.GL_CULL_FACE);    } else {      GLES20.glEnable(GLES20.GL_CULL_FACE);      if (mBackSided) {        GLES20.glCullFace(GLES20.GL_FRONT);      } else {        GLES20.glCullFace(GLES20.GL_BACK);        GLES20.glFrontFace(GLES20.GL_CCW);      }    }    if (mEnableBlending) {      GLES20.glEnable(GLES20.GL_BLEND);      GLES20.glBlendFunc(mBlendFuncSFactor,mBlendFuncDFactor);    }    if (!mEnableDepthTest)     GLES20.glDisable(GLES20.GL_DEPTH_TEST); else {      GLES20.glEnable(GLES20.GL_DEPTH_TEST);      GLES20.glDepthFunc(GLES20.GL_LESS);    }    GLES20.glDepthMask(mEnableDepthMask);    if (!mIsPartOfBatch) {      if (material == null) {        RajLog.e("[" + this.getClass().getName() + "] This object can't render because there's no material attached to it.");        throw new RuntimeException("This object can't render because there's no material attached to it.");      }      material.useProgram();      setShaderParams(camera);      material.bindTextures();      if (mGeometry.hasTextureCoordinates())       material.setTextureCoords(mGeometry.getTexCoordBufferInfo());      if (mGeometry.hasNormals())       material.setNormals(mGeometry.getNormalBufferInfo());      if (mMaterial.usingVertexColors())       material.setVertexColors(mGeometry.getColorBufferInfo());      material.setVertices(mGeometry.getVertexBufferInfo());    }    material.setCurrentObject(this);    if (mOverrideMaterialColor) {      material.setColor(mColor);    }    material.applyParams();    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);    material.setMVPMatrix(mMVPMatrix);    material.setModelMatrix(mMMatrix);    material.setModelViewMatrix(mMVMatrix);    if (mIsVisible) {      GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,mGeometry.getIndexBufferInfo().bufferHandle);      GLES20.glDrawElements(mDrawingMode,mGeometry.getNumIndices(),mElementsBufferType,0);      GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);    }    if (!mIsPartOfBatch && !mRenderChildrenAsBatch && sceneMaterial == null) {      material.unbindTextures();    }    material.unsetCurrentObject(this);    if (mEnableBlending) {      GLES20.glDisable(GLES20.GL_BLEND);    }    if (mDoubleSided) {      GLES20.glEnable(GLES20.GL_CULL_FACE);    } else     if (mBackSided) {      GLES20.glCullFace(GLES20.GL_BACK);    }    if (!mEnableDepthTest) {      GLES20.glEnable(GLES20.GL_DEPTH_TEST);      GLES20.glDepthFunc(GLES20.GL_LESS);    }  }  if (mShowBoundingVolume) {    if (mGeometry.hasBoundingBox())     mGeometry.getBoundingBox().drawBoundingVolume(camera,vpMatrix,projMatrix,vMatrix,mMMatrix);    if (mGeometry.hasBoundingSphere())     mGeometry.getBoundingSphere().drawBoundingVolume(camera,vpMatrix,projMatrix,vMatrix,mMMatrix);  }  for (int i=0, j=mChildren.size(); i < j; i++) {    Object3D child=mChildren.get(i);    if (mRenderChildrenAsBatch || mIsPartOfBatch) {      child.setPartOfBatch(true);    }    if (modelMatrixWasRecalculated)     child.markModelMatrixDirty();    child.render(camera,vpMatrix,projMatrix,vMatrix,mMMatrix,sceneMaterial);  }  if (mRenderChildrenAsBatch && sceneMaterial == null) {    material.unbindTextures();  }}  }
class C{  public boolean equals(Object rawElement){  try {    return this.equalsXMLElement((IXMLElement)rawElement);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public CoderResult error(){  assert error != null;  return error;}  }
class C{  @Override public boolean storesUpperCaseIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  public boolean hasVariable(String id){  return this.environment.containsKey(id);}  }
class C{  public FilterJoinBuilder types(String... types){  this.types=types;  return this;}  }
class C{  private int notifyUsers(Collection<Integer> users,String subject,String message,Collection<File> attachments){  int countMail=0;  for (  int user_id : users) {    MUser user=MUser.get(getCtx(),user_id);    if (user.isNotificationEMail()) {      if (m_client.sendEMailAttachments(user_id,subject,message,attachments)) {        countMail++;      }    }    if (user.isNotificationNote()) {      Trx trx=null;      try {        trx=Trx.get(Trx.createTrxName("AP_NU"),true);        int AD_Message_ID=52244;        MNote note=new MNote(getCtx(),AD_Message_ID,user_id,trx.getTrxName());        note.setClientOrg(m_model.getAD_Client_ID(),m_model.getAD_Org_ID());        note.setTextMsg(message);        note.saveEx();        MAttachment attachment=new MAttachment(getCtx(),MNote.Table_ID,note.getAD_Note_ID(),trx.getTrxName());        for (        File f : attachments) {          attachment.addEntry(f);        }        attachment.setTextMsg(message);        attachment.saveEx();        countMail++;        trx.commit();      } catch (      Throwable e) {        if (trx != null)         trx.rollback();      } finally {        if (trx != null)         trx.close();      }    }  }  return countMail;}  }
class C{  public void testIntValuePositive3(){  byte aBytes[]={56,13,78,-12,-5,56,100};  int sign=1;  int resInt=-184862620;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public ExpandAnimation(View view,int duration){  setDuration(duration);  mAnimatedView=view;  mViewLayoutParams=(LayoutParams)view.getLayoutParams();  mIsVisibleAfter=(view.getVisibility() == View.VISIBLE);  mMarginStart=mViewLayoutParams.bottomMargin;  mMarginEnd=(mMarginStart == 0 ? (0 - view.getHeight()) : 0);  view.setVisibility(View.VISIBLE);}  }
class C{  @SafeVarargs private final <U>SimpleReactStream<U> reactI(final Supplier<U>... actions){  return new SimpleReactStreamImpl<U>(this,Stream.of(actions).map(null));}  }
class C{  @Override public Iterator<java.util.Map.Entry<K,V>> iterator(){  return entrySet().iterator();}  }
class C{  public static List<StatementCoverageTestFitness> retrieveCoverageGoals(){  if (!called)   computeGoals();  return goals;}  }
class C{  public void insertFront(Item x){  insert(x,0);}  }
class C{  public void print(CtClass clazz){  CtMethod[] methods=clazz.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    print(methods[i]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.581 -0500",hash_original_method="6B9B1F7769DAE5AF421D5FA08BCA9A98",hash_generated_method="449E8B21CEE3A99021CC17A6ED943528") public static final HashSet readThisSetXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  HashSet set=new HashSet();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      set.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return set;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  public void alignSheetWithFab(View fab){  int[] fabCoords=new int[2];  fab.getLocationOnScreen(fabCoords);  int[] sheetCoords=new int[2];  sheet.getLocationOnScreen(sheetCoords);  int leftDiff=sheetCoords[0] - fabCoords[0];  int rightDiff=(sheetCoords[0] + sheet.getWidth()) - (fabCoords[0] + fab.getWidth());  int topDiff=sheetCoords[1] - fabCoords[1];  int bottomDiff=(sheetCoords[1] + sheet.getHeight()) - (fabCoords[1] + fab.getHeight());  ViewGroup.MarginLayoutParams sheetLayoutParams=(ViewGroup.MarginLayoutParams)sheet.getLayoutParams();  if (rightDiff != 0) {    float sheetX=sheet.getX();    if (rightDiff <= sheetX) {      sheet.setX(sheetX - rightDiff - sheetLayoutParams.rightMargin);      revealXDirection=RevealXDirection.LEFT;    } else     if (leftDiff != 0 && leftDiff <= sheetX) {      sheet.setX(sheetX - leftDiff + sheetLayoutParams.leftMargin);      revealXDirection=RevealXDirection.RIGHT;    }  }  if (bottomDiff != 0) {    float sheetY=sheet.getY();    if (bottomDiff <= sheetY) {      sheet.setY(sheetY - bottomDiff - sheetLayoutParams.bottomMargin);      revealYDirection=RevealYDirection.UP;    } else     if (topDiff != 0 && topDiff <= sheetY) {      sheet.setY(sheetY - topDiff + sheetLayoutParams.topMargin);      revealYDirection=RevealYDirection.DOWN;    }  }}  }
class C{  public static Collection<Attribute> createTrickleUpdate(Collection<LocalCandidate> localCandidates){  List<Attribute> trickleUpdate=null;  if (localCandidates == null || localCandidates.size() == 0) {    trickleUpdate=new ArrayList<>(1);    trickleUpdate.add(sdpFactory.createAttribute(END_OF_CANDIDATES,null));    return trickleUpdate;  }  trickleUpdate=new ArrayList<>(localCandidates.size() + 1);  String streamName=null;  for (  LocalCandidate candidate : localCandidates) {    streamName=candidate.getParentComponent().getParentStream().getName();    trickleUpdate.add(new CandidateAttribute(candidate));  }  trickleUpdate.add(0,sdpFactory.createAttribute(MID,streamName));  return trickleUpdate;}  }
class C{  private boolean isLeafForElement(CnATreeElement node,int depth){  Set<Edge> allEdgesOfNode=dataGraph.getGraph().edgesOf(node);  boolean isLeaf=true;  for (  Edge edge : allEdgesOfNode) {    CnATreeElement target=edge.getSource() == node ? edge.getTarget() : edge.getSource();    CnATreeElement source=edge.getSource() != node ? edge.getTarget() : edge.getSource();    isLeaf&=!filter.edgeFilter(edge,source,target,depth);  }  return isLeaf;}  }
class C{  public static void printWarning(int errorCode,String parameters,Throwable e){  recorder.record(errorCode,parameters,e);  DebugPrinter.print("entering printWarning(int, String, Exception) with errorCode " + errorCode);  if (TLCGlobals.warn) {    String message=getMessage(WARNING,errorCode,new String[]{parameters});    if (instance.warningHistory.put(message) == null) {      ToolIO.out.println(message);    }    DebugPrinter.print("printing stacktrace in printError(int, Throwable, boolean)");    e.printStackTrace(ToolIO.out);  }  DebugPrinter.print("leaving printWarning(int, String[])");}  }
class C{  Iterator<HeapVariable<Object>> enumerateExposedHeapVariables(){  ArrayList<HeapVariable<Object>> v=new ArrayList<HeapVariable<Object>>();  for (Iterator<HeapVariable<Object>> e=getHeapVariables(); e.hasNext(); ) {    HeapVariable<Object> H=e.next();    if (isExposedOnExit(H)) {      v.add(H);    }  }  return v.iterator();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Builder includeTimerFields(Set<String> fields){  this.includeTimerFields=fields;  return this;}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  private boolean skipNextIF(){  Assert.isTrue(fToken == Symbols.TokenELSE);  while (true) {    nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:      skipScope();    break;case Symbols.TokenIF:  return true;case Symbols.TokenELSE:skipNextIF();break;case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:return false;}}}  }
class C{  public void destroy(){  state=State.DESTROYED;  if (password != null) {    Arrays.fill(password,(char)0);  }}  }
class C{  public void centralizeContent(){  int measuredWidth=getMeasuredWidth();  int measuredHeight=getMeasuredHeight();  int scaledContentWidth=getScaledContentWidth();  int scaledContentHeight=getScaledContentHeight();  if (SHOW_LOGS)   Logger.d(TAG,"centralizeContent, measuredWidth " + measuredWidth + ", measuredHeight "+ measuredHeight+ ", scaledContentWidth "+ scaledContentWidth+ ", scaledContentHeight "+ scaledContentHeight);  mContentX=0;  mContentY=0;  if (SHOW_LOGS)   Logger.d(TAG,"centerVideo, mContentX " + mContentX + ", mContentY "+ mContentY);  updateMatrixScaleRotate();}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final INaviProject project){  Preconditions.checkNotNull(provider,"IE00400: Provider argument can not be null");  Preconditions.checkNotNull(project,"IE00401: Project argument can not be null");  Preconditions.checkArgument(project.inSameDatabase(provider),"IE00402: Project is not part of this database");}  }
class C{  public int findIndexOfValue(String value){  final CharSequence[] entryValues=getEntryValues();  if (value != null && entryValues != null) {    for (int i=entryValues.length - 1; i >= 0; --i) {      if (value.equals(entryValues[i])) {        return i;      }    }  }  return -1;}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public static boolean isDigits(String str){  if ((str == null) || (str.length() == 0)) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isDigit(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void endElement(String name) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  dontEscape=false;  if (closeStart) {    writer.write(">");    closeStart=false;  }  writer.write("</");  writer.write(name);  writer.write(">");}  }
class C{  protected void addDocumentLayer(KMLRoot document){  KMLController controller=new KMLController(document);  RenderableLayer kmlLayer=new RenderableLayer();  kmlLayer.setName((String)document.getField(AVKey.DISPLAY_NAME));  kmlLayer.addRenderable(controller);  this.wwd.getModel().getLayers().add(kmlLayer);}  }
class C{  public void refreshRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static void resourceToFile(String resourceName,File output) throws IOException {  output.getParentFile().mkdirs();  InputStream in=ResourceUtil.class.getResourceAsStream(resourceName);  OutputStream out=new FileOutputStream(output);  IOUtil.transfer(in,out);}  }
class C{  public @Nullable String chooseEngineClientAlias(String[] keyType,Principal[] issuers,@Nullable SSLEngine engine){  return null;}  }
class C{  public StreamResponseMessage process(StreamRequestMessage requestMsg){  log.fine("Processing stream request message: " + requestMsg);  try {    syncProtocol=getProtocolFactory().createReceivingSync(requestMsg);  } catch (  ProtocolCreationException ex) {    log.warning("Processing stream request failed - " + Exceptions.unwrap(ex).toString());    return new StreamResponseMessage(UpnpResponse.Status.NOT_IMPLEMENTED);  }  log.fine("Running protocol for synchronous message processing: " + syncProtocol);  syncProtocol.run();  StreamResponseMessage responseMsg=syncProtocol.getOutputMessage();  if (responseMsg == null) {    log.finer("Protocol did not return any response message");    return null;  }  log.finer("Protocol returned response: " + responseMsg);  return responseMsg;}  }
class C{  public T pop(){  return list.removeLast();}  }
class C{  public static GeoTimeSerie mergeViaEncoders(List<GeoTimeSerie> series) throws IOException {  GTSEncoder encoder=new GTSEncoder(0L);  try {    for (int i=0; i < series.size(); i++) {      GeoTimeSerie gts=series.get(i);      if (0 == i) {        encoder.setMetadata(gts.getMetadata());      }      encoder.encode(gts);    }  } catch (  IOException ioe) {    throw new IOException(ioe);  }  return encoder.getDecoder(true).decode();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.591 -0500",hash_original_method="6B8A416F4757BDF00BB53E081B0C9027",hash_generated_method="407CEFCA9B87D47157A714D5BD5826AC") public Object clone(){  TelURLImpl retval=(TelURLImpl)super.clone();  if (this.telephoneNumber != null)   retval.telephoneNumber=(TelephoneNumber)this.telephoneNumber.clone();  return retval;}  }
class C{  public void testUnpackFromCorrectBag() throws InvalidAdviceException {  Object[][] t1={{"dsifji2oj","23498ngnjs"}};  Object[][] t2={{"dsfj9","u1h32jbn4l1  '"}};  Object[][] t3={{"24oi23n","022l;'][   "}};  Object[][] t4={{"0m0lkj34","hh2h2n  jds "}};  BaggageAPIForTest baggage=new BaggageAPIForTest().put("bag1",t1).put("bag2",t2).put("bag3",t3).put("bag4",t4);{    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack("bag1","pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2","23498ngnjs","dsifji2oj","ooowoowq");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }{    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack("bag2","pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2","u1h32jbn4l1  '","dsfj9","ooowoowq");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }{    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack("bag3","pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2","022l;'][   ","24oi23n","ooowoowq");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }{    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack("bag4","pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2","hh2h2n  jds ","0m0lkj34","ooowoowq");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }}  }
class C{  public CheckerInfo(final String label,final Class<? extends SourceChecker> checker){  this(label,checker.getCanonicalName(),checkerToQuals(checker));}  }
class C{  public T caseTrigger(Trigger object){  return null;}  }
class C{  static boolean mergeImpl(SQLiteDatabase db,String key,String value) throws JSONException {  String oldValue=getItemImpl(db,key);  String newValue;  if (oldValue == null) {    newValue=value;  } else {    JSONObject oldJSON=new JSONObject(oldValue);    JSONObject newJSON=new JSONObject(value);    deepMergeInto(oldJSON,newJSON);    newValue=oldJSON.toString();  }  return setItemImpl(db,key,newValue);}  }
class C{  public void endVisit(DoStatement node){}  }
class C{  protected void waitForShutdownSignal() throws InterruptedException {  if (mutexWaiting == null) {    mutexWaiting=new Object();  }  try {synchronized (mutexWaiting) {      mutexWaiting.wait();    }  } catch (  InterruptedException e) {    if (!shutdown) {      throw e;    }  }}  }
class C{  boolean isEverything(ExpressionVisitor visitor){  if (visitor.getType() == ExpressionVisitor.GET_DEPENDENCIES) {    if (sequence != null) {      visitor.getDependencies().add(sequence);    }  }  if (defaultExpression != null && !defaultExpression.isEverything(visitor)) {    return false;  }  return !(checkConstraint != null && !checkConstraint.isEverything(visitor));}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  flushPending();  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public final void addElements(int value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  private StorageHADomain findStorageHADomainByNameInDB(DbClient dbClient,StorageSystem storageSystem,String directorName){  URIQueryResultList results=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStorageHADomainConstraint(storageSystem.getId()),results);  Iterator<StorageHADomain> directorIterator=dbClient.queryIterativeObjects(StorageHADomain.class,results,true);  while (directorIterator.hasNext()) {    StorageHADomain director=directorIterator.next();    if (director.getAdapterName().equals(directorName)) {      return director;    }  }  log.warn("Could not find StorageHADomain with adapterName '{}' for StorageSystem {}",directorName,storageSystem.getNativeGuid());  return null;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void destroy(){}  }
class C{  public void initAPI(String buildVersionString,int jobPoolSize,int temporaryJobMaxAgeInSeconds){  this.buildVersionString=buildVersionString;  AnalysisJobServiceBaseImpl.getInstance().initJobsGC(temporaryJobMaxAgeInSeconds);  FacetJobServiceBaseImpl.getInstance().initJobsGC(temporaryJobMaxAgeInSeconds);  StateServiceBaseImpl.getInstance().initGC(temporaryJobMaxAgeInSeconds);  AuthServiceImpl.getInstance().initGC();  DataStoreEventBus.getInstance().subscribe(MetaModelObserver.getInstance());  GlobalEventPublisher.getInstance().start(System.currentTimeMillis());  DataStoreEventBus.getInstance().subscribe(GlobalEventPublisher.getInstance());}  }
class C{  private boolean rejectExistingPatientCreation(){  String reject=Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_REJECT_EXIST_PATIENT_CREATE,XformConstants.DEFAULT_REJECT_EXIST_PATIENT_CREATE);  return !("false".equalsIgnoreCase(reject));}  }
class C{  public boolean isAborted(){  return STATE_Aborted.equals(m_state);}  }
class C{  protected void fireMenuDragMouseEntered(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseEntered(event);    }  }}  }
class C{  private int handleAEIOUY(DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('A');  }  return index + 1;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  double smallNumber=-999999.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      output.setNoDataValue(noData);    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        value=Double.valueOf(allRecords[record.getRecordNumber() - 1][assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        if (!partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,value));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      pq.add(new RowPriorityGridCell(row,col,value));                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      for (part=0; part < numParts; part++) {        if (partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,smallNumber));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      z=output.getValue(row,col);                      if (z == value) {                        pq.add(new RowPriorityGridCell(row,col,smallNumber));                      }                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          if (cell.z == smallNumber) {            output.setValue(cell.row,cell.col,backgroundValue);          } else {            output.setValue(cell.row,cell.col,cell.z);          }          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    if (numCellsToWrite > 0) {      do {        cell=pq.poll();        if (cell.z == smallNumber) {          output.setValue(cell.row,cell.col,backgroundValue);        } else {          output.setValue(cell.row,cell.col,cell.z);        }        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized void releaseXMLReader(XMLReader reader){  if (m_readers.get() == reader && reader != null) {    m_inUse.remove(reader);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xA720937C,version=271) public int sceUsbCamStillCancelInput(){  return 0;}  }
class C{  private GHMockRule addSetup(Runnable setup){  setups.add(setup);  return this;}  }
class C{  private String intChannel2Float(int colorValue){  double fColor=(double)colorValue / (double)255;  String floatColor=String.format("%.4f",fColor);  return floatColor;}  }
class C{  private ObjectRange(Comparable smaller,Comparable larger,Boolean reverse){  if (smaller == null) {    throw new IllegalArgumentException("Must specify a non-null value for the 'from' index in a Range");  }  if (larger == null) {    throw new IllegalArgumentException("Must specify a non-null value for the 'to' index in a Range");  }  if (reverse == null) {    final boolean computedReverse=areReversed(smaller,larger);    if (computedReverse) {      final Comparable temp=larger;      larger=smaller;      smaller=temp;    }    this.reverse=computedReverse;  } else {    this.reverse=reverse;  }  if (smaller instanceof Short) {    smaller=((Short)smaller).intValue();  } else   if (smaller instanceof Float) {    smaller=((Float)smaller).doubleValue();  }  if (larger instanceof Short) {    larger=((Short)larger).intValue();  } else   if (larger instanceof Float) {    larger=((Float)larger).doubleValue();  }  if (smaller instanceof Integer && larger instanceof Long) {    smaller=((Integer)smaller).longValue();  } else   if (larger instanceof Integer && smaller instanceof Long) {    larger=((Integer)larger).longValue();  }  if (smaller.getClass() == larger.getClass() || (smaller instanceof Number && larger instanceof Number)) {    this.from=smaller;    this.to=larger;  } else {    final Comparable tempfrom=normaliseStringType(smaller);    final Comparable tempto=normaliseStringType(larger);    if (tempfrom instanceof Number && tempto instanceof Number) {      this.from=tempfrom;      this.to=tempto;    } else {      final Comparable start=this.reverse ? larger : smaller;      if (start instanceof String || start instanceof Number) {        throw new IllegalArgumentException("Incompatible Argument classes for ObjectRange " + smaller.getClass() + ", "+ larger.getClass());      }      this.from=smaller;      this.to=larger;    }  }  checkBoundaryCompatibility();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void addCpuUsage(float cpuUsage){  this.totalCpuUsage+=cpuUsage;}  }
class C{  public static final void applyTransform(GL2 gl,Transform t){  Vector2 tr=t.getTranslation();  gl.glTranslated(tr.x,tr.y,0.0);  gl.glRotated(Math.toDegrees(t.getRotation()),0.0,0.0,1.0);}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public RegularExpressionAdapterFactory(){  if (modelPackage == null) {    modelPackage=RegularExpressionPackage.eINSTANCE;  }}  }
class C{  public int peek(){  return elements[size - 1];}  }
class C{  public void playFileForEvent(String fileName,MessageReceivedEvent event) throws Exception {  SoundFile fileToPlay=getSoundFileById(fileName);  if (event != null) {    Guild guild=event.getGuild();    if (guild == null) {      guild=getUsersGuild(event.getAuthor().getUsername());    }    if (guild != null) {      if (fileToPlay != null) {        try {          moveToUserIdsChannel(event,guild);        } catch (        SoundPlaybackException e) {          event.getAuthor().getPrivateChannel().sendMessage(e.getLocalizedMessage());        }        File soundFile=new File(fileToPlay.getSoundFileLocation());        playFile(soundFile,guild);      } else {        event.getAuthor().getPrivateChannel().sendMessage("Could not find sound to play. Requested sound: " + fileName + ".");      }    } else {      event.getAuthor().getPrivateChannel().sendMessage("I can not find a voice channel you are connected to.");      LOG.warn("no guild to play to.");    }  }}  }
class C{  public DetailHolder(View itemView){  super(itemView);  label=(TextView)itemView.findViewById(R.id.label);  content=(TextView)itemView.findViewById(R.id.content);}  }
class C{  public WorkingSetComparator(){  fIsOtherWorkingSetOnTop=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.813 -0500",hash_original_method="293A98A7728721725813AFA29BD3A029",hash_generated_method="1A9288452227195915AFBE2EAC7AB1E4") public AvoidXfermode(int opColor,int tolerance,Mode mode){  if (tolerance < 0 || tolerance > 255) {    throw new IllegalArgumentException("tolerance must be 0..255");  }  native_instance=nativeCreate(opColor,tolerance,mode.nativeInt);}  }
class C{  public static double log2Binomial(double a,double b){  if (Utils.gr(b,a)) {    throw new ArithmeticException("Can't compute binomial coefficient.");  }  return (lnFactorial(a) - lnFactorial(b) - lnFactorial(a - b)) / log2;}  }
class C{  protected static void loadStandardFontWidth(final String fontName){  final Integer fileNumber=standardFileList.get(fontName);  if (fileNumber != null && standardFontLoaded.get(fileNumber) == null) {    try {      loadStandardFont(fileNumber);    } catch (    final Exception e) {      LogWriter.writeLog("[PDF] " + e + " problem reading lookup table for pdf font "+ fontName+ ' '+ fontName);    }  }}  }
class C{  public static void error(CompilationUnitDeclaration cud,String message,Throwable ex){  ProblemReporter.error(message,ex);  if (cud != null)   EclipseAST.addProblemToCompilationResult(cud.getFileName(),cud.compilationResult,false,message + " - See error log.",0,0);}  }
class C{  public static Builder builder(ReconfigureRequest request){  return new Builder(request);}  }
class C{  public List<Dimension> readAll(AppContext ctx,DomainPK domainPk){  try {    ProjectPK projectPk=new ProjectPK(ctx.getCustomerId(),domainPk.getProjectId());    Domain domain=ProjectManager.INSTANCE.getDomain(ctx,domainPk);    DomainHierarchy domainHierarchy=DomainHierarchyManager.INSTANCE.getHierarchy(projectPk,domain,true);    return domainHierarchy.getDimensions(ctx);  } catch (  InterruptedException|ComputingException|ScopeException e) {    throw new APIException(e,true);  }}  }
class C{  public void testCertStore18() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect parameters",((CollectionCertStoreParameters)certS.getCertStoreParameters()).getCollection(),((CollectionCertStoreParameters)dParams).getCollection());    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  public void testLargeSampleOnly(){  int rightFiles=20;  String rightExtension=".txt";  createFile(rightFiles,rightExtension);  int wrongFiles=20;  String wrongExtention=".abc";  createFile(wrongFiles,wrongExtention);  MyFileFilter txtFilter=new MyFileFilter(rightExtension);  MyFileSampler textSampler=new MyFileSampler(textInputFolder.getAbsolutePath());  int numberToSample=2 * rightFiles;  List<File> files=textSampler.sampleFiles(numberToSample,txtFilter);  assertEquals("Incorrect number of files sampled.",rightFiles,files.size());  assertEquals("Files should not have been copied.",0,textOutputFolder.listFiles().length);}  }
class C{  public int findColumn(String columnName) throws SQLException {  return crsInternal.findColumn(columnName);}  }
class C{  @Override public V remove(Object key){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && eq(k,e.get())) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return null;}  }
class C{  protected CCTurnOffTiles(int s,ccGridSize gridSize,float d){  super(gridSize,d);  seed=s;  rand=new Random();  tilesOrder=null;}  }
class C{  private void startGame(String[] args){  gamePlayers.clear();  remotePlayers.clear();  ArrayList<String> gameArgs=new ArrayList<String>();  gameType=args[0];  gameArgs.add("-type" + args[0]);  if (debugOutput)   gameArgs.add("-debug");  for (int i=1; i < args.length; i++) {    if (!args[i].startsWith("-")) {      if (args[i].equalsIgnoreCase(Player.RANDOM_AI)) {        args[i]=this.getRandomAI(args);      }      gamePlayers.add(args[i]);      gameArgs.add(allPlayers.get(args[i]));    } else {      gameArgs.add(args[i]);    }  }  waitingPlayers=new CountDownLatch(1);  isStarted=true;  gt=new Thread(new GameStarter(gameArgs.toArray(new String[0])));  gt.start();}  }
class C{  @ObjectiveCName("sendLocationWithPeer:withLongitude:withLatitude:withStreet:withPlace:") public void sendLocation(@NotNull Peer peer,@NotNull Double longitude,@NotNull Double latitude,@Nullable String street,@Nullable String place){  modules.getMessagesModule().sendLocation(peer,longitude,latitude,street,place);}  }
class C{  public byte[] hashName(Name name) throws NoSuchAlgorithmException {  return NSEC3Record.hashName(name,hashAlg,iterations,salt);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  public boolean checkFks(boolean insertDummy) throws GenericEntityException {  ModelEntity model=this.getModelEntity();  Iterator<ModelRelation> relItr=model.getRelationsIterator();  while (relItr.hasNext()) {    ModelRelation relation=relItr.next();    if ("one".equalsIgnoreCase(relation.getType())) {      Map<String,Object> fields=new HashMap<String,Object>();      for (      ModelKeyMap keyMap : relation.getKeyMaps()) {        fields.put(keyMap.getRelFieldName(),this.get(keyMap.getFieldName()));      }      EntityFieldMap ecl=EntityCondition.makeCondition(fields);      long count=this.getDelegator().findCountByCondition(relation.getRelEntityName(),ecl,null,null);      if (count == 0) {        if (insertDummy) {          GenericValue newValue=this.getDelegator().makeValue(relation.getRelEntityName());          boolean allFieldsSet=true;          for (          ModelKeyMap mkm : relation.getKeyMaps()) {            if (this.get(mkm.getFieldName()) != null) {              newValue.set(mkm.getRelFieldName(),this.get(mkm.getFieldName()));              if (Debug.infoOn())               Debug.logInfo("Set [" + mkm.getRelFieldName() + "] to - "+ this.get(mkm.getFieldName()),module);            } else {              allFieldsSet=false;            }          }          if (allFieldsSet) {            if (Debug.infoOn())             Debug.logInfo("Creating place holder value : " + newValue,module);            newValue.put(ModelEntity.CREATE_STAMP_FIELD,this.get(ModelEntity.CREATE_STAMP_FIELD));            newValue.put(ModelEntity.CREATE_STAMP_TX_FIELD,this.get(ModelEntity.CREATE_STAMP_TX_FIELD));            newValue.put(ModelEntity.STAMP_FIELD,this.get(ModelEntity.STAMP_FIELD));            newValue.put(ModelEntity.STAMP_TX_FIELD,this.get(ModelEntity.STAMP_TX_FIELD));            newValue.setIsFromEntitySync(true);            newValue.checkFks(true);            newValue.create();          }        } else {          return false;        }      }    }  }  return true;}  }
class C{  @HLEFunction(nid=0x42778A9F,version=150) public int __sceSasInit(@CanBeNull TPointer sasCore,int grain,int maxVoices,int outputMode,int sampleRate){  checkSasAddressGood(sasCore.getAddress());  if (grain < 0x40 || grain > 0x800 || (grain & 0x1F) != 0) {    return SceKernelErrors.ERROR_SAS_INVALID_GRAIN;  }  if (sampleRate != 44100) {    return SceKernelErrors.ERROR_SAS_INVALID_SAMPLE_RATE;  }  if (maxVoices <= 0 || maxVoices > PSP_SAS_VOICES_MAX) {    return SceKernelErrors.ERROR_SAS_INVALID_MAX_VOICES;  }  if (outputMode != PSP_SAS_OUTPUTMODE_STEREO && outputMode != PSP_SAS_OUTPUTMODE_MONO) {    return SceKernelErrors.ERROR_SAS_INVALID_OUTPUT_MODE;  }  if (sasCoreUid != -1) {    SceUidManager.releaseUid(sasCoreUid,sasCodeUidPurpose);  }  sasCore.clear(0xE20);  sasCoreUid=SceUidManager.getNewUid(sasCodeUidPurpose);  sasCore.setValue32(0,sasCoreUid);  grainSamples=grain;  this.outputMode=outputMode;  for (int i=0; i < voices.length; i++) {    voices[i].setSampleRate(sampleRate);  }  return 0;}  }
class C{  default SimpleReactStream<T> toSimpleReact(final SimpleReact reactor){  return reactor.ofAsync(this);}  }
class C{  public SeekableXZInputStream(SeekableInputStream in) throws IOException {  this(in,-1);}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public SerializerRegistry registerAbstract(Class<?> abstractType,Class<? extends TypeSerializer> serializer){  return registerAbstract(abstractType,calculateTypeId(abstractType),new DefaultTypeSerializerFactory(serializer));}  }
class C{  public static boolean isRewritableBatch(String queryString,boolean noBackslashEscapes){  LexState state=LexState.Normal;  char lastChar='\0';  boolean singleQuotes=false;  boolean endingSemicolon=false;  char[] query=queryString.toCharArray();  int queryLength=query.length;  for (int i=0; i < queryLength; i++) {    if (state == LexState.Escape)     state=LexState.String;    char car=query[i];switch (car) {case '*':      if (state == LexState.Normal && lastChar == '/')       state=LexState.SlashStarComment;    break;case '/':  if (state == LexState.SlashStarComment && lastChar == '*') {    state=LexState.Normal;  } else   if (state == LexState.Normal && lastChar == '/') {    state=LexState.EOLComment;  }break;case '#':if (state == LexState.Normal) state=LexState.EOLComment;break;case '-':if (state == LexState.Normal && lastChar == '-') {state=LexState.EOLComment;}break;case ';':if (state == LexState.Normal) {endingSemicolon=true;}break;case '\n':if (state == LexState.EOLComment) {state=LexState.Normal;}break;case '"':if (state == LexState.Normal) {state=LexState.String;singleQuotes=false;} else if (state == LexState.String && !singleQuotes) {state=LexState.Normal;}break;case '\'':if (state == LexState.Normal) {state=LexState.String;singleQuotes=true;} else if (state == LexState.String && singleQuotes) {state=LexState.Normal;}break;case '\\':if (noBackslashEscapes) {break;}if (state == LexState.String) state=LexState.Escape;break;case '`':if (state == LexState.Backtick) {state=LexState.Normal;} else if (state == LexState.Normal) {state=LexState.Backtick;}break;default :if (state == LexState.Normal && endingSemicolon && ((byte)car >= 40)) {endingSemicolon=false;}break;}lastChar=car;}return state != LexState.EOLComment && !endingSemicolon;}  }
class C{  @Nullable public static Schema validateOutputSchemaAndInputSchemaIfPresent(String outputSchemaString,String rowKeyField,PipelineConfigurer pipelineConfigurer){  Schema inputSchema=pipelineConfigurer.getStageConfigurer().getInputSchema();  if (inputSchema == null && outputSchemaString == null) {    return null;  }  Schema outputSchema;  if (outputSchemaString == null) {    outputSchema=inputSchema;  } else {    try {      outputSchema=Schema.parseJson(outputSchemaString);    } catch (    IOException e) {      throw new IllegalArgumentException("Unable to parse output schema : " + e.getMessage(),e);    }  }  validateSchemaFieldsAreSimple(outputSchema);  if (inputSchema != null) {    validateOutputSchemaIsSubsetOfInputSchema(inputSchema,outputSchema);  }  return outputSchema;}  }
class C{  public SQLNonTransientException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @Override public void abortMultipartUpload(AbortMultipartUploadRequest abortMultipartUploadRequest,AmazonS3Client s3Client){}  }
class C{  public SootMethod resolveSetter(String attrName,SootClass myClass){  for (  SetterEntry entry : setterList) {    if (!entry.attr.equals(attrName)) {      continue;    }    SootClass parentClass=Scene.v().getSootClass(entry.className);    if (!Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(myClass,parentClass)) {      continue;    }    SootMethod parentSetter=Scene.v().getMethod(entry.setterMethod);    SootMethod setter=Scene.v().getActiveHierarchy().resolveConcreteDispatch(myClass,parentSetter);    return setter;  }  return null;}  }
class C{  public void deleteLogicalSwitch(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(LOGICAL_SWITCHS_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  @ObjectiveCName("changeAudioAutoDownloadEnabled:") public void changeAudioAutoDownloadEnabled(boolean val){  modules.getSettingsModule().setAudioAutoDownloadEnabled(val);}  }
class C{  public void testValueOfIntegerMin(){  long longVal=Integer.MIN_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-128,0,0,0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public MultivariateTable(Assignment uniqueValue){  this.headVars=uniqueValue.getVariables();  this.table=new HashMap<Assignment,Double>();  this.table.put(uniqueValue,1.0);}  }
class C{  public boolean isShadowsEnabled(){  return null == shadowsEnabled ? _shadowsEnabled : shadowsEnabled.get();}  }
class C{  public static String leftPad(String original,int length,char padChar){  if (original.length() >= length) {    return original;  }  return stringOfChar(padChar,length - original.length()) + original;}  }
class C{  public void fatal(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.FATAL,null,msg,arg0,arg1,arg2,null);}  }
class C{  public Builder widthRes(int drawerWidthRes){  if (activity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.drawerWidth=activity.getResources().getDimensionPixelSize(drawerWidthRes);  return this;}  }
class C{  public Set<Statement> findTransitiveProperty(Resource subj,URI prop,Value obj,Resource... contxts) throws InferenceEngineException {  if (transitivePropertySet.contains(prop)) {    Set<Statement> sts=new HashSet();    boolean goUp=subj == null;    chainTransitiveProperty(subj,prop,obj,(goUp) ? (obj) : (subj),sts,goUp,contxts);    return sts;  } else   return null;}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,limit,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void checkName(final String name) throws JMSException {  checkWrite();  if (name == null) {    throw ActiveMQJMSClientBundle.BUNDLE.nameCannotBeNull();  }  if (name.equals("")) {    throw ActiveMQJMSClientBundle.BUNDLE.nameCannotBeEmpty();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void checkConf(Conf conf){  checkConfLocal(conf);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TINTERFACE__EXTERNAL:    return external != EXTERNAL_EDEFAULT;case TypesPackage.TINTERFACE__SUPER_INTERFACE_REFS:  return superInterfaceRefs != null && !superInterfaceRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void detectStackingInformation(){  this.stacking=Utils.getStackingNumber(this.filename);  if (this.stacking == 0) {    this.stacking=Utils.getStackingNumber(FilenameUtils.getBaseName(getPath()));  }  this.stackingMarker=Utils.getStackingMarker(this.filename);  if (this.stackingMarker.isEmpty()) {    this.stackingMarker=Utils.getFolderStackingMarker(FilenameUtils.getBaseName(getPath()));  }}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void addObservations(int states[][]){  int rows=states.length;  int columns=states[0].length;  observations+=(rows - k) * columns;  int prevVal, nextVal;  for (int r=k; r < rows; r++) {    for (int c=0; c < columns; c++) {      nextVal=states[r][c];      prevVal=0;      int multiplier=1;      for (int p=1; p <= k; p++) {        prevVal+=states[r - p][c] * multiplier;        multiplier*=base;      }      jointCount[nextVal][prevVal]++;      prevCount[prevVal]++;      nextCount[nextVal]++;    }  }}  }
class C{  public SubjectKeyIdentifier(byte[] keyIdentifier){  this.keyIdentifier=keyIdentifier;}  }
class C{  public OpenLongObjectHashMap(){  this(defaultCapacity);}  }
class C{  private TimerData createTimerDataForRootInvocation(InvocationSequenceData invocationData){  TimerData timerData=new TimerData();  timerData.setPlatformIdent(invocationData.getPlatformIdent());  timerData.setMethodIdent(invocationData.getMethodIdent());  timerData.setTimeStamp(invocationData.getTimeStamp());  timerData.setDuration(invocationData.getDuration());  timerData.calculateMax(invocationData.getDuration());  timerData.calculateMin(invocationData.getDuration());  timerData.increaseCount();  double exclusiveTime=invocationData.getDuration() - computeNestedDuration(invocationData);  timerData.setExclusiveDuration(exclusiveTime);  timerData.calculateExclusiveMax(exclusiveTime);  timerData.calculateExclusiveMin(exclusiveTime);  timerData.increaseExclusiveCount();  timerData.finalizeData();  return timerData;}  }
class C{  public Lucene62Codec(Mode mode){  super("Lucene62");  this.storedFieldsFormat=new Lucene50StoredFieldsFormat(Objects.requireNonNull(mode));}  }
class C{  @Override public String execute(){  List<String> args=new ArrayList<String>();  if (username == null) {    log.warn("Username not specified, notifying user that it's a required field.");    args.add(getText("user.username"));    addActionError(getText("errors.requiredField",args.toArray(new String[]{})));    return INPUT;  }  if (log.isDebugEnabled()) {    log.debug("Processing Password Hint...");  }  try {    User user=userManager.getUserByUsername(username);    String hint=user.getPasswordHint();    if (hint == null || hint.trim().equals("")) {      log.warn("User '" + username + "' found, but no password hint exists.");      addActionError(getText("login.passwordHint.missing"));      return INPUT;    }    StringBuffer msg=new StringBuffer();    msg.append("Your password hint is: ").append(hint);    msg.append("\n\nLogin at: ").append(RequestUtil.getAppURL(getRequest()));    mailMessage.setTo(user.getEmail());    String subject='[' + getText("webapp.name") + "] "+ getText("user.passwordHint");    mailMessage.setSubject(subject);    mailMessage.setText(msg.toString());    mailEngine.send(mailMessage);    args.add(username);    args.add(user.getEmail());    saveMessage(getText("login.passwordHint.sent",args.toArray(new String[]{})));  } catch (  Exception e) {    log.warn("Username '" + username + "' not found in database.");    args.add(username);    addActionError(getText("login.passwordHint.error",args.toArray(new String[]{})));    return INPUT;  }  return SUCCESS;}  }
class C{  public HttpResponse addContactToRevokedList(ContactId contact) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Add " + contact + " to revoked list");  }  String url="/resource-lists/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/index/~~/resource-lists/list%5B@name=%22rcs_revokedcontacts%22%5D/entry%5B@uri=%22"+ Uri.encode(PhoneUtils.formatContactIdToUri(contact).toString())+ "%22%5D";  String content="<entry uri='" + contact + "'></entry>";  return sendRequestToXDMS(new HttpPutRequest(url,content,"application/xcap-el+xml"));}  }
class C{  public void startDocument() throws IOException {  _write("<?xml version='1.0'");  if (_charEncoding != null) {    _write(" encoding='" + _charEncoding + "'");  }  _writeLn("?>");}  }
class C{  protected void init(){  mGestureDetector=new GestureDetector(mContext,new CalendarGestureListener());  mSelectedDay=new Time();  mSelectedDay.setToNow();}  }
class C{  protected void listadoconsultasenelaboracionverExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser userVO=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(userVO));  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  Collection consultas=consultasService.getConsultasAbiertasXUsuarioConsultor(userVO.getId());  CollectionUtils.transform(consultas,ConsultaToPO.getInstance(request.getLocale(),services));  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_LISTADO_CONSULTAS_VER,request);  request.setAttribute(ConsultasConstants.LISTA_CONSULTAS_KEY,consultas);  request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_LISTADO_VER_ELABORACION);  setReturnActionFordward(request,mapping.findForward("listado_consulta"));}  }
class C{  public Builder b(){  this.withBorder=true;  return this;}  }
class C{  static public double factorial(int k){  if (k < 0)   throw new IllegalArgumentException();  int length1=longFactorials.length;  if (k < length1)   return longFactorials[k];  int length2=doubleFactorials.length;  if (k < length1 + length2)   return doubleFactorials[k - length1]; else   return Double.POSITIVE_INFINITY;}  }
class C{  private VolleyErrorHelper(){}  }
class C{  @Override public void updateTimestamp(String columnLabel,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private ExprToken scanToken(){  _lastIndexStart=_index;  ExprToken token=scanTokenImpl();  _lastToken=token;  _lastIndexEnd=_index;  return token;}  }
class C{  public void keyPressed(KeyEvent e){  if (isNavigationKey(e)) {    prefix="";    typedString="";    lastTime=0L;  }}  }
class C{  @Bean public Binding bindDeadLetterQueueToLwm2mExchange(){  return BindingBuilder.bind(deadLetterQueue()).to(exchangeDeadLetter());}  }
class C{  public void testComponentTransienceRestoration() throws Exception {  HtmlPage page=getPage("/faces/component02.jsp");  HtmlSubmitInput submit=(HtmlSubmitInput)getInputContainingGivenId(page,"submit");  try {    submit.click();  } catch (  Exception ioe) {    fail("No exception should have been thrown: " + ioe.getMessage());  }}  }
class C{  public Symbol(Integer address,String rawText,String[][] registerLabels) throws ParsingException {  this.address=address;  this.rawText=rawText;  String cleanText=rawText.replaceAll("/\\*.*?\\*/","");  if (cleanText.contains("(")) {    this.name=StringUtils.substringBefore(cleanText,"(").trim();    this.comment=StringUtils.substringAfter(cleanText,"(");    if (!comment.contains(")")) {      throw new ParsingException("Invalid symbol '" + cleanText + "' : no closing parenthesis");    }    comment=StringUtils.substringBefore(comment,")").trim();    String cleanComment=comment.replaceAll("/\\*.*?\\*/","");    String[] paramStrings=StringUtils.split(cleanComment,',');    for (    String paramString : paramStrings) {      Parameter parameter=new Parameter(paramString,registerLabels);      addParameter(parameter);    }  } else {    this.name=cleanText;  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public boolean process(String arg){  if (arg.equals("help")) {    printHelp();    return true;  }  if (arg.equals("printOptions")) {    printOptions();    return true;  }  if (arg.length() == 0) {    printHelp();    return true;  }  int split=arg.indexOf('=');  if (split == -1) {    System.err.println("  Illegal option specification!\n  \"" + arg + "\" must be specified as a name-value pair in the form of option=value");    return false;  }  String name=arg.substring(0,split);  String value=arg.substring(split + 1);  Option o=getOption(name);  if (o == null)   return false;switch (o.getType()) {case Option.BOOLEAN_OPTION:    if (value.equals("true")) {      ((BooleanOption)o).setValue(true);      return true;    } else     if (value.equals("false")) {      ((BooleanOption)o).setValue(false);      return true;    }  return false;case Option.INT_OPTION:try {  int ival=Integer.parseInt(value);  ((IntOption)o).setValue(ival);  return true;} catch (NumberFormatException nfe) {}return false;case Option.ADDRESS_OPTION:try {int ival=Integer.parseInt(value,16);((AddressOption)o).setValue(ival);return true;} catch (NumberFormatException nfe) {}return false;case Option.FLOAT_OPTION:try {float fval=Float.parseFloat(value);((FloatOption)o).setValue(fval);return true;} catch (NumberFormatException nfe) {}return false;case Option.STRING_OPTION:((StringOption)o).setValue(value);return true;case Option.ENUM_OPTION:((EnumOption)o).setValue(value);return true;case Option.PAGES_OPTION:try {char last=value.charAt(value.length() - 1);int factor=1;switch (last) {case 'g':case 'G':factor*=1024;case 'm':case 'M':factor*=1024;case 'k':case 'K':factor*=1024;value=value.substring(0,value.length() - 1);}int ival=Integer.parseInt(value);((PagesOption)o).setBytes(Extent.fromIntZeroExtend(ival * factor));return true;} catch (NumberFormatException nfe) {}catch (IndexOutOfBoundsException nfe) {}return false;case Option.MICROSECONDS_OPTION:try {int ival=Integer.parseInt(value);((MicrosecondsOption)o).setMicroseconds(ival);return true;} catch (NumberFormatException nfe) {}return false;case ENUM_SET_OPTION:((EnumSetOption)o).setValue(value);return true;case INT_SET_OPTION:try {((IntSetOption)o).setValue(parseIntSet(value));} catch (NumberFormatException nfe) {return false;}return true;case WORD_SET_OPTION:((WordSetOption)o).setValue(parseWordSet(value));return true;}return false;}  }
class C{  public static void reset(Context context){  Logger.debug(HostMonitor.class.getSimpleName(),"reset configuration");  context.getSharedPreferences(PREFS_FILE_NAME,Context.MODE_PRIVATE).edit().clear().apply();  Util.setBroadcastReceiverEnabled(context,ConnectivityReceiver.class,false);  Logger.debug(HostMonitor.class.getSimpleName(),"cancelling scheduled checks");  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.cancel(getPeriodicCheckIntent(context));}  }
class C{  private Object executeNEQ(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) != 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public ISchedulingRule modifyRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).modifyRule(resource);}  }
class C{  public Packet pollResult(){  return resultQueue.poll();}  }
class C{  public void verifyLeadingWhitespaceBeforeBracket(ParserRuleContext ctx,String construct,String message,int numSpace){  Token left=ParseTreeUtil.getStopTokenForNode(ParseTreeUtil.getLeftNode(ctx));  Token openingParenthesis=ParseTreeUtil.getStartTokenForNode(ctx.getChild(0));  if (checkLeftSpaces(left,openingParenthesis,numSpace)) {    Location illegalWhitespaceLocation=ListenerUtil.getTokenEndLocation(left);    printer.error(rule,construct + message,illegalWhitespaceLocation);  }}  }
class C{  public LazyPrimMST(EdgeWeightedGraph G){  mst=new Queue<Edge>();  pq=new MinPQ<Edge>();  marked=new boolean[G.V()];  for (int v=0; v < G.V(); v++)   if (!marked[v])   prim(G,v);  assert check(G);}  }
class C{  public void present(Name name,int type,Tokenizer tokenizer) throws IOException {  newPrereq(Record.fromString(name,type,dclass,0,tokenizer,origin));}  }
class C{  private boolean isNotColliding(double p_179926_1_,double p_179926_3_,double p_179926_5_,double p_179926_7_){  double d0=(p_179926_1_ - this.parentEntity.posX) / p_179926_7_;  double d1=(p_179926_3_ - this.parentEntity.posY) / p_179926_7_;  double d2=(p_179926_5_ - this.parentEntity.posZ) / p_179926_7_;  AxisAlignedBB axisalignedbb=this.parentEntity.getEntityBoundingBox();  for (int i=1; i < p_179926_7_; ++i) {    axisalignedbb=axisalignedbb.offset(d0,d1,d2);    if (!this.parentEntity.worldObj.getCollisionBoxes(this.parentEntity,axisalignedbb).isEmpty()) {      return false;    }  }  return true;}  }
class C{  public void init(){  _initialized=true;}  }
class C{  public int positionOfMark(){  if (!report_pos)   return -1;  if (textMarkPos == -1)   return textMarkPos + startSourcePos;  return textMarkPos + startSourcePos;}  }
class C{  public String decrypt(String value){  if (value == null || value.length() == 0)   return value;  boolean isEncrypted=value.startsWith(ENCRYPTEDVALUE_START) && value.endsWith(ENCRYPTEDVALUE_END);  if (isEncrypted)   value=value.substring(ENCRYPTEDVALUE_START.length(),value.length() - ENCRYPTEDVALUE_END.length());  byte[] data=convertHexString(value);  if (data == null) {    if (isEncrypted) {      log.info("Failed");      return null;    }    return value;  }  if (m_cipher == null)   initCipher();  if (m_cipher != null && value != null && value.length() > 0) {    try {      AlgorithmParameters ap=m_cipher.getParameters();      m_cipher.init(Cipher.DECRYPT_MODE,m_key,ap);      byte[] out=m_cipher.doFinal(data);      String retValue=new String(out,"UTF8");      return retValue;    } catch (    Exception ex) {      log.info("Failed decrypting " + ex.toString());    }  }  return null;}  }
class C{  private Point2D transform(double h,double a){  double r=-Math.toRadians(getAngle(a));  return new Point2D.Double(h * Math.cos(r),h * Math.sin(r));}  }
class C{  public void close(){  length=0;}  }
class C{  private void adjustAttributes(final ViewNode node,final CNaviViewNode newNode){  newNode.setBorderColor(node.getBorderColor());  newNode.setColor(node.getColor());}  }
class C{  @Override public String toString(){  String result;  if (valid) {    result="Output File: " + outputFile.getAbsolutePath() + '\n';    if (signMode) {      result+="Keystore: " + keyStorePath + '\n'+ "Alias: "+ alias+ '\n';    } else {      result+=".pfx File:" + keyFilePath + '\n';    }  } else {    return invalidMessage;  }  result+="Reason: \"" + reason + "\"\n"+ "Location: "+ location+ '\n';  if (canEncrypt()) {    result+="Encrypt PDF" + '\n';  }  if (canFlatten()) {    result+="Flatten PDF" + '\n';  }  if (certifyMode != ItextFunctions.NOT_CERTIFIED) {    result+="Certify PDF" + '\n';  }  return result;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSVAMethod public String(AbstractStringBuilder sb){  addTaint(sb.getTaintInt());}  }
class C{  private void addCommunicationPortInfo(){  @SuppressWarnings("unchecked") Enumeration<CommPortIdentifier> portIDs=CommPortIdentifier.getPortIdentifiers();  ArrayList<CommPortIdentifier> ports=new ArrayList<CommPortIdentifier>();  while (portIDs.hasMoreElements()) {    CommPortIdentifier id=portIDs.nextElement();    if (id.getPortType() != CommPortIdentifier.PORT_PARALLEL) {      ports.add(id);    }  }  addString(String.format(" Found %s serial ports",ports.size()));  for (  CommPortIdentifier id : ports) {    SerialPortFriendlyName port=PortNameMapper.getPortNameMap().get(id.getName());    if (port == null) {      port=new SerialPortFriendlyName(id.getName(),null);      PortNameMapper.getPortNameMap().put(id.getName(),port);    }    addString(" Port: " + port.getDisplayName() + (id.isCurrentlyOwned() ? " - in use by: " + id.getCurrentOwner() : " - not in use")+ "   ");  }}  }
class C{  public void recv() throws IOException {  if (this.socket != null) {synchronized (getCommBuffer()) {      read();    }  } else {    throw new IOException(LocalizedStrings.Message_DEAD_CONNECTION.toLocalizedString());  }}  }
class C{  @Override public boolean deleteLeftWord(){  mInputConnection.beginBatchEdit();  if (mInputConnection.getSelectedText(0) != null) {    mInputConnection.commitText("",0);  } else {    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);    if (beforeCursor != null) {      int beforeCursorLength=beforeCursor.length();      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);      int lastIndex=0;      while (m.find()) {        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();      }      if (lastIndex > 0) {        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);      } else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {        mInputConnection.deleteSurroundingText(beforeCursorLength,0);      }    }  }  mInputConnection.endBatchEdit();  return true;}  }
class C{  public StringBuffer computeIndentation(int offset,boolean assumeOpeningBrace){  StringBuffer reference=getReferenceIndentation(offset,assumeOpeningBrace);  if (fAlign != JavaHeuristicScanner.NOT_FOUND) {    try {      IRegion line=fDocument.getLineInformationOfOffset(fAlign);      int lineOffset=line.getOffset();      return createIndent(lineOffset,fAlign,false);    } catch (    BadLocationException e) {      return null;    }  }  if (reference == null)   return null;  return createReusingIndent(reference,fIndent);}  }
class C{  public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  private String createWorkflowStepForRestoreNativeSnapshotSession(Workflow workflow,StorageSystem parentSystem,URI snapSessionURI,String waitFor,Workflow.Method rollbackMethod){  URI parentSystemURI=parentSystem.getId();  Workflow.Method restoreMethod=new Workflow.Method(RESTORE_SNAP_SESSION_METHOD_NAME,parentSystemURI,snapSessionURI,Boolean.FALSE);  workflow.createStep(RESTORE_SNAP_SESSION_STEP,String.format("Restore snapshot session %s",snapSessionURI),waitFor,parentSystemURI,parentSystem.getSystemType(),BlockDeviceController.class,restoreMethod,rollbackMethod,null);  _log.info("Created workflow step to restore snapshot session {}",snapSessionURI);  return RESTORE_SNAP_SESSION_STEP;}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  private void cancelTransactionsForAddress(TransportAddress localAddr,TransportAddress remoteAddr){  List<StunClientTransaction> clientTransactionsToCancel=null;synchronized (clientTransactions) {    Iterator<StunClientTransaction> clientTransactionsIter=clientTransactions.values().iterator();    while (clientTransactionsIter.hasNext()) {      StunClientTransaction tran=clientTransactionsIter.next();      if (tran.getLocalAddress().equals(localAddr) && (remoteAddr == null || remoteAddr.equals(tran.getRemoteAddress()))) {        clientTransactionsIter.remove();        if (clientTransactionsToCancel == null) {          clientTransactionsToCancel=new LinkedList<>();        }        clientTransactionsToCancel.add(tran);      }    }  }  if (clientTransactionsToCancel != null) {    for (    StunClientTransaction tran : clientTransactionsToCancel)     tran.cancel();  }  List<StunServerTransaction> serverTransactionsToExpire=null;synchronized (serverTransactions) {    Iterator<StunServerTransaction> serverTransactionsIter=serverTransactions.values().iterator();    while (serverTransactionsIter.hasNext()) {      StunServerTransaction tran=serverTransactionsIter.next();      TransportAddress listenAddr=tran.getLocalListeningAddress();      TransportAddress sendingAddr=tran.getSendingAddress();      if (listenAddr.equals(localAddr) || (sendingAddr != null && sendingAddr.equals(localAddr))) {        if (remoteAddr == null || remoteAddr.equals(tran.getRequestSourceAddress())) {          serverTransactionsIter.remove();          if (serverTransactionsToExpire == null) {            serverTransactionsToExpire=new LinkedList<>();          }          serverTransactionsToExpire.add(tran);        }      }    }  }  if (serverTransactionsToExpire != null) {    for (    StunServerTransaction tran : serverTransactionsToExpire)     tran.expire();  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public SalsaInternalState(BipartiteGraph bipartiteGraph,SalsaStats salsaStats,int expectedNodesToHit){  super(salsaStats,expectedNodesToHit);  this.bipartiteGraph=bipartiteGraph;}  }
class C{  public SAML2AuthnRequestException(){}  }
class C{  public boolean containsCRL(){  return this.lengthCRL() > 0;}  }
class C{  final void push(final Object object){  stack.add(object);}  }
class C{  public CacheConfiguration cacheConfiguration(String name){  DynamicCacheDescriptor desc=registeredCaches.get(maskNull(name));  if (desc == null)   throw new IllegalStateException("Cache doesn't exist: " + name); else   return desc.cacheConfiguration();}  }
class C{  public RowSet(final Row rowdef,final Row.Entry exportedCollectionRowEnvironment){  super(rowdef,exportedCollectionRowEnvironment);  assert rowdef.objectOrder != null;}  }
class C{  private AbstractBeginNode createBlockTarget(double probability,BciBlock block,FrameStateBuilder stateAfter){  FixedNode target=createTarget(probability,block,stateAfter);  AbstractBeginNode begin=BeginNode.begin(target);  assert !(target instanceof DeoptimizeNode && begin instanceof BeginStateSplitNode && ((BeginStateSplitNode)begin).stateAfter() != null) : "We are not allowed to set the stateAfter of the begin node," + " because we have to deoptimize to a bci _before_ the actual if, so that the interpreter can update the profiling information.";  return begin;}  }
class C{  protected synchronized void updateSpecificNameList(char subType){  if (sysNameList != null) {    for (    String sysName : sysNameList) {      NamedBean b=getBySystemName(sysName);      if (b != null) {        b.removePropertyChangeListener(this);      }    }  }  sysNameList=getManager().getSystemNameList(subType);  sysNameList.stream().forEach(null);}  }
class C{  public void appendEnvironmentReport(Node container,Document factory,Hashtable h){  if ((null == container) || (null == factory)) {    return;  }  try {    Element envCheckNode=factory.createElement("EnvironmentCheck");    envCheckNode.setAttribute("version","$Revision: 468646 $");    container.appendChild(envCheckNode);    if (null == h) {      Element statusNode=factory.createElement("status");      statusNode.setAttribute("result","ERROR");      statusNode.appendChild(factory.createTextNode("appendEnvironmentReport called with null Hashtable!"));      envCheckNode.appendChild(statusNode);      return;    }    boolean errors=false;    Element hashNode=factory.createElement("environment");    envCheckNode.appendChild(hashNode);    for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(FOUNDCLASSES)) {          Vector v=(Vector)h.get(keyStr);          errors|=appendFoundJars(hashNode,factory,v,keyStr);        } else {          if (keyStr.startsWith(ERROR)) {            errors=true;          }          Element node=factory.createElement("item");          node.setAttribute("key",keyStr);          node.appendChild(factory.createTextNode((String)h.get(keyStr)));          hashNode.appendChild(node);        }      } catch (      Exception e) {        errors=true;        Element node=factory.createElement("item");        node.setAttribute("key",keyStr);        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));        hashNode.appendChild(node);      }    }    Element statusNode=factory.createElement("status");    statusNode.setAttribute("result",(errors ? "ERROR" : "OK"));    envCheckNode.appendChild(statusNode);  } catch (  Exception e2) {    System.err.println("appendEnvironmentReport threw: " + e2.toString());    e2.printStackTrace();  }}  }
class C{  private void stopProtectionSystem(ProtectionSystem protectionSystem) throws InternalException {  ProtectionController controller=getProtectionController(protectionSystem.getSystemType());  controller.disconnect(protectionSystem.getId());}  }
class C{  public double distance(Vector2i v){  return Math.sqrt(distanceSquared(v));}  }
class C{  private CModule createModule(final INaviRawModule rawModule) throws CouldntLoadDataException, CouldntSaveDataException {  final CModule newModule=m_provider.createModule(rawModule);  m_modules.add(newModule);  return newModule;}  }
class C{  @JavascriptInterface public void clickThanksWords(){  MobclickAgent.onEvent(getActivity(),"link_click_donate");  DialogUtil.showAboutDonate((AppCompatActivity)getActivity());}  }
class C{  private void removeLoco(String message){  Consist consist;  List<String> headerAndLoco=Arrays.asList(message.split("<:>"));  if (log.isDebugEnabled()) {    log.debug("remove loco string: " + message);  }  try {    List<String> headerData=Arrays.asList(headerAndLoco.get(0).split("<;>"));    consist=manager.getConsist(stringToDcc(headerData.get(1)));    List<String> locoData=Arrays.asList(headerAndLoco.get(1).split("<;>"));    DccLocoAddress loco=stringToDcc(locoData.get(0));    if (checkForBroadcastAddress(loco)) {      return;    }    if (consist.contains(loco)) {      consist.remove(loco);      if (log.isDebugEnabled()) {        log.debug("Remove loco: " + loco + ", from consist: "+ headerData.get(1));      }    }  } catch (  NullPointerException e) {    log.warn("removeLoco error for message: " + message);    return;  }  writeFile();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void deleteDir(File dir) throws IOException {  if (!dir.isDirectory()) {    throw new IOException("Not a directory " + dir);  }  File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    File file=files[i];    if (file.isDirectory()) {      deleteDir(file);    } else {      boolean deleted=file.delete();      if (!deleted) {        throw new IOException("Unable to delete file" + file);      }    }  }  dir.delete();}  }
class C{  protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){  Variable var=new Variable();  var.setQName(uniquePseudoVarName);  var.setIsGlobal(isGlobal);  if (isGlobal) {    ElemTemplateElement elem=getElemFromExpression(wi);    StylesheetRoot root=elem.getStylesheetRoot();    Vector vars=root.getVariablesAndParamsComposed();    var.setIndex(vars.size() - 1);  }  AxesWalker walker=wi.getFirstWalker();  for (int i=0; i < numSteps; i++) {    assertion(null != walker,"Walker should not be null!");    walker=walker.getNextWalker();  }  if (null != walker) {    FilterExprWalker few=new FilterExprWalker(wi);    few.setInnerExpression(var);    few.exprSetParent(wi);    few.setNextWalker(walker);    walker.setPrevWalker(few);    wi.setFirstWalker(few);    return wi;  } else {    FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var);    feis.exprSetParent(wi.exprGetParent());    return feis;  }}  }
class C{  @Override public boolean isOutboundDone(){  return writer.isOutboundDone();}  }
class C{  @OnMessage public void onMessage(final String message){}  }
class C{  public Boolean isRTSPStreaming(){  return rtspStreaming;}  }
class C{  private void retrieveTracks(SearchQuery query,ArrayList<Track> tracks){  String queryLikeSelection="%" + query.textQuery + "%";  String[] trackSelectionArgs=new String[]{queryLikeSelection,queryLikeSelection,queryLikeSelection};  Cursor cursor=null;  try {    cursor=providerUtils.getTrackCursor(TRACK_SELECTION_QUERY,trackSelectionArgs,TRACK_SELECTION_ORDER);    if (cursor != null) {      tracks.ensureCapacity(cursor.getCount());      while (cursor.moveToNext()) {        tracks.add(providerUtils.createTrack(cursor));      }    }  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public final void prepareADF(ADF a,GPProblem problem){  if (a.children.length > arguments.length) {    GPData[] newarguments=new GPData[a.children.length];    System.arraycopy(arguments,0,newarguments,0,arguments.length);    for (int x=arguments.length; x < newarguments.length; x++)     newarguments[x]=(GPData)(problem.input.clone());    arguments=newarguments;  }  adf=a;}  }
class C{  private LineString readLineStringText() throws IOException, ParseException {  return geometryFactory.createLineString(getCoordinates());}  }
class C{  public boolean isValid(){  for (  InteroperableMasterPackage interoperableMasterPackage : this.interoperableMasterPackages) {    if (!interoperableMasterPackage.isValid()) {      return false;    }  }  return true;}  }
class C{  private void update(){  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  int steps=0;synchronized (this.btnStep) {    steps=this.steps;    this.steps=0;  }  if (!this.isPaused()) {    double elapsedTime=diff / NANO_TO_BASE;    boolean stepped=this.simulation.getWorld().update(elapsedTime);    if (this.simulation instanceof CompiledSimulation) {      CompiledSimulation cs=(CompiledSimulation)this.simulation;      cs.update(elapsedTime,stepped);    }  } else   if (steps > 0) {    this.simulation.getWorld().step(steps);    if (this.simulation instanceof CompiledSimulation) {      CompiledSimulation cs=(CompiledSimulation)this.simulation;      cs.update(steps * this.simulation.getWorld().getStep().getDeltaTime(),true);    }  }  if (this.simulation instanceof CompiledSimulation) {    CompiledSimulation cs=(CompiledSimulation)this.simulation;    if (cs.isChanged()) {      this.pnlSimulation.setSimulation(cs);      if (this.selectBodyAction.isActive()) {        Body b=this.selectBodyAction.getObject();        boolean exists=false;        int bSize=cs.getWorld().getBodyCount();        for (int i=0; i < bSize; i++) {          Body q=cs.getWorld().getBody(i);          if (b == q) {            exists=true;            break;          }        }        if (!exists) {          this.selectBodyAction.end();          this.selectedBodyJoint=null;        }      }    }  }  this.updateFps(diff);}  }
class C{  @Deprecated public static String encode(String s,BitSet safeOctets,boolean plusForSpace){  try {    return encode(s,"UTF-8",safeOctets,plusForSpace);  } catch (  UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  public GammaDistributionModel(GammaParameterizationType parameterization,Variable<Double> shape,Variable<Double> parameter2,double offset){  super(GAMMA_DISTRIBUTION_MODEL);  this.offset=offset;  this.parameterization=parameterization;  this.shape=shape;  addVariable(shape);  shape.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));switch (parameterization) {case ShapeScale:    this.scale=parameter2;  addVariable(scale);scale.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));rate=null;mean=null;break;case ShapeRate:this.rate=parameter2;addVariable(rate);rate.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));scale=null;mean=null;break;case ShapeMean:this.mean=parameter2;addVariable(mean);mean.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));scale=null;rate=null;break;case OneParameter:scale=null;rate=null;mean=null;break;default :throw new IllegalArgumentException("Unknown parameterization type");}}  }
class C{  public String toDebugString(){  String info="ABOUT ATTRIBUTE: " + about + "\n"+ "TITLE: "+ title+ "\n"+ "LINK: "+ link+ "\n"+ "DESCRIPTION: "+ description+ "\n"+ "DATE: "+ getDate();  return info;}  }
class C{  public void requestConcurrentCollection(){  concurrentCollection=true;}  }
class C{  protected boolean isOperator(char c){  if ('=' == c)   return true; else   if ('<' == c)   return true; else   if ('>' == c)   return true; else   if ('|' == c)   return true; else   if ('(' == c)   return true; else   if (')' == c)   return true; else   if ('+' == c)   return true; else   if ('-' == c)   return true; else   if ('*' == c)   return true; else   if ('/' == c)   return true; else   if ('!' == c)   return true; else   if (',' == c)   return true; else   if ('?' == c)   return true; else   if ('#' == c)   return true; else   if ('@' == c)   return true; else   if ('~' == c)   return true; else   if ('&' == c)   return true; else   if ('^' == c)   return true; else   if ('!' == c)   return true; else   return false;}  }
class C{  public static Range<Long> valueOfLong(String str){  return Range.valueOf(str,null);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public Vec3D scaleSelf(float s){  x*=s;  y*=s;  z*=s;  return this;}  }
class C{  private void process2(final File file) throws InterruptedException {  if (file.isHidden()) {    return;  }  if (file.isDirectory()) {    if (log.isInfoEnabled())     log.info("Scanning directory: " + file);    final File[] files=filter == null ? file.listFiles() : file.listFiles(filter);    for (    final File f : files) {      process2(f);    }  } else {    accept(file);  }}  }
class C{  public Vector3 sub(Vector3 a_vec){  return this.sub(a_vec.x,a_vec.y,a_vec.z);}  }
class C{  @Step("Asserting element {1} containes text {2} after {3} seconds") public static void assertElementContainsAfter(AugmentedFunctions driver,By by,String text,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  Preconditions.checkArgument(!Strings.isNullOrEmpty(text));  try {    driver.findElementContainAfter(by,text,timeoutInSeconds);  } catch (  TimeoutException e) {    throw new AssertionError(String.format("Element %s does not contain %s after %s seconds",by,text,timeoutInSeconds),e);  }}  }
class C{  public ArrayConverterTestCase(String name){  super(name);}  }
class C{  public boolean checkSlot(@Nonnull IInventory inv,@Nullable ItemStack expected,int src){  final ItemStack actual=inv.getStackInSlot(src);  if (expected == null) {    if (actual != null)     return false;  } else {    if (!checkItemEquality(actual,expected))     return false;  }  return true;}  }
class C{  public NullnessAnalysis(UnitGraph graph){  super(graph);  doAnalysis();}  }
class C{  public boolean isCumulative(){  return cumulative;}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"DistTXPhaseOneCommitReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"DistTXPhaseOneCommitReplyMessage processor not found");    }    return;  }  processor.process(this);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public IgniteInternalFuture<GridNearTxPrepareResponse> prepareAsync(@Nullable Collection<IgniteTxEntry> reads,@Nullable Collection<IgniteTxEntry> writes,Map<IgniteTxKey,GridCacheVersion> verMap,long msgId,IgniteUuid nearMiniId,Map<UUID,Collection<UUID>> txNodes,boolean last){  GridDhtTxPrepareFuture fut=prepFut;  long timeout=remainingTime();  if (fut == null) {    init();    if (!PREP_FUT_UPD.compareAndSet(this,null,fut=new GridDhtTxPrepareFuture(cctx,this,timeout,nearMiniId,verMap,last,needReturnValue()))) {      GridDhtTxPrepareFuture f=prepFut;      assert f.nearMiniId().equals(nearMiniId) : "Wrong near mini id on existing future " + "[futMiniId=" + f.nearMiniId() + ", miniId="+ nearMiniId+ ", fut="+ f+ ']';      if (timeout == -1)       f.onError(timeoutException());      return chainOnePhasePrepare(f);    }  } else {    assert fut.nearMiniId().equals(nearMiniId) : "Wrong near mini id on existing future " + "[futMiniId=" + fut.nearMiniId() + ", miniId="+ nearMiniId+ ", fut="+ fut+ ']';    return chainOnePhasePrepare(fut);  }  if (state() != PREPARING) {    if (!state(PREPARING)) {      if (state() == PREPARED && isSystemInvalidate())       fut.complete();      if (setRollbackOnly()) {        if (timeout == -1)         fut.onError(new IgniteTxTimeoutCheckedException("Transaction timed out and was rolled back: " + this)); else         fut.onError(new IgniteCheckedException("Invalid transaction state for prepare [state=" + state() + ", tx="+ this+ ']'));      } else       fut.onError(new IgniteTxRollbackCheckedException("Invalid transaction state for prepare [state=" + state() + ", tx="+ this+ ']'));      return fut;    }  }  try {    if (reads != null) {      for (      IgniteTxEntry e : reads)       addEntry(msgId,e);    }    if (writes != null) {      for (      IgniteTxEntry e : writes)       addEntry(msgId,e);    }    userPrepare();    cctx.mvcc().addFuture(fut);    if (isSystemInvalidate())     fut.complete(); else     fut.prepare(reads,writes,txNodes);  } catch (  IgniteTxTimeoutCheckedException|IgniteTxOptimisticCheckedException e) {    fut.onError(e);  }catch (  IgniteCheckedException e) {    setRollbackOnly();    fut.onError(new IgniteTxRollbackCheckedException("Failed to prepare transaction: " + this,e));    try {      rollback();    } catch (    IgniteTxOptimisticCheckedException e1) {      if (log.isDebugEnabled())       log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e="+ e1+ ']');      fut.onError(e);    }catch (    IgniteCheckedException e1) {      U.error(log,"Failed to rollback transaction: " + this,e1);    }  }  return chainOnePhasePrepare(fut);}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  private void drawToggleButton(final Point buttonSize){  this.gc.setBackground(IGamaColors.WHITE.color());  if (!this.selection) {    this.gc.fillRectangle(3,3,buttonSize.x / 2,buttonSize.y);  } else {    this.gc.fillRectangle(buttonSize.x / 2,3,buttonSize.x / 2 + 2,buttonSize.y - 1);  }  this.gc.setForeground(this.buttonBorderColor);  if (!this.selection) {    this.gc.drawRoundRectangle(2,2,buttonSize.x / 2,buttonSize.y,3,3);  } else {    this.gc.drawRoundRectangle(buttonSize.x / 2,2,buttonSize.x / 2 + 2,buttonSize.y,3,3);  }}  }
class C{  public GenericValue queryOne() throws GenericEntityException {  GenericValue result=EntityUtil.getOnly(queryList());  return result;}  }
class C{  public OpenPlotAction(final GuiComponent component){  super("Open...");  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;}  }
class C{  public static byte[] fromBase58(String s) throws HyperLedgerException {  try {    boolean leading=true;    int lz=0;    BigInteger b=BigInteger.ZERO;    for (    char c : s.toCharArray()) {      if (leading && c == '1') {        ++lz;      } else {        leading=false;        b=b.multiply(BigInteger.valueOf(58));        b=b.add(BigInteger.valueOf(r58[c]));      }    }    byte[] encoded=b.toByteArray();    if (encoded[0] == 0) {      if (lz > 0) {        --lz;      } else {        byte[] e=new byte[encoded.length - 1];        System.arraycopy(encoded,1,e,0,e.length);        encoded=e;      }    }    byte[] result=new byte[encoded.length + lz];    System.arraycopy(encoded,0,result,lz,encoded.length);    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new HyperLedgerException("Invalid character in address");  }catch (  Exception e) {    throw new HyperLedgerException(e);  }}  }
class C{  @Override public int isNullable(int column) throws SQLException {  try {    debugCodeCall("isNullable",column);    checkColumnIndex(column);    return result.getNullable(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Builder eventId(UUID eventId){  this.eventId=eventId;  return this;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("endElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName);  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  int lastNode=m_previous;  m_previous=m_parents.pop();  if (DTM.NULL == lastNode)   m_firstch.setElementAt(DTM.NULL,m_previous); else   m_nextsib.setElementAt(DTM.NULL,lastNode);  popShouldStripWhitespace();}  }
class C{  private void completePerMinCalculations(){  final int initialPerMinCalcExclLoops=initialPerMinCalcExclTime * 16;  for (  final User u : users) {    u.apm=calculatePerMinute(u.apmActions,u.lastCmdLoop - initialPerMinCalcExclLoops);    u.spm=calculatePerMinute((double)u.spmActions,u.lastCmdLoop - initialPerMinCalcExclLoops);  }}  }
class C{  public static String UTF8toUTF16(byte[] utf8,int offset,int len){  char[] out=new char[len];  int n=UTF8toUTF16(utf8,offset,len,out,0);  return new String(out,0,n);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public static Builder builder(){  return new Builder(new VoteRequest());}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  private void displayInternalServerError(){  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_registration_error),getResources().getString(R.string.error_for_all_unknown_registration_failures),getResources().getString(R.string.button_ok),registrationFailedOKBtnClickListerner);}  }
class C{  static public Locator northEast(){  return northEast(false);}  }
class C{  public ObjectStreamField(String name,Class<?> type){  this(name,type,false);}  }
class C{  public void assignContactFromPhone(String phoneNumber,boolean lazyLookup){  assignContactFromPhone(phoneNumber,lazyLookup,new Bundle());}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  PatternEntry other=(PatternEntry)obj;  boolean result=chars.equals(other.chars);  return result;}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public SQLScript(SelectUniversal select,QueryMapper mapper){  this.select=select;  this.mapper=mapper;}  }
class C{  public Commafier(final Iterable<? extends Object> elements,final String separator){  m_separator=separator;  for (  final Object element : elements) {    append(element);  }}  }
class C{  public static String addLineBreaks(String text,int maxWidth){  StringBuilder sbAll=new StringBuilder();  if (text != null && text.length() > maxWidth) {    String[] wordArray=text.split("\\s");    StringBuilder sbLine=new StringBuilder();    for (    String word : wordArray) {      if ((sbLine.length() + word.length()) > maxWidth) {        if (sbAll.length() > 0) {          sbAll.append("\n");        }        sbAll.append(sbLine.toString());        sbLine=new StringBuilder();      }      if (sbLine.length() > 0) {        sbLine.append(" ");      }      sbLine.append(word);    }    if (sbLine.length() > 0) {      sbAll.append("\n").append(sbLine.toString());    }  } else {    sbAll.append(text);  }  return sbAll.toString();}  }
class C{  public SuspendThreadParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SUSPEND_THREAD_SUCC);}  }
class C{  public void clearReferences(){  refMap.clear();  refId=0;}  }
class C{  public static final String createXMLMessage(String msgKey,Object args[]){  return createMsg(XMLBundle,msgKey,args);}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (listenerList == null) {    listenerList=new Vector<PropertyChangeListener>();  }  listenerList.add(listener);}  }
class C{  public boolean isFile(String path){  try {    ZipEntry entry=getZipEntry(path);    return entry != null && !entry.isDirectory();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }  return false;}  }
class C{  public EqualsResult append(final Object lhs,final Object rhs){  if (!isEqual) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  final Class<?> lhsClass=lhs.getClass();  if (!lhsClass.isArray()) {    if (lhs instanceof String || lhs instanceof str) {      isEqual=lhs.toString().equals(rhs.toString());    } else {      isEqual=lhs.equals(rhs);    }  } else   if (lhs.getClass() != rhs.getClass()) {    this.setEquals(false);  } else   if (lhs instanceof long[]) {    append((long[])lhs,(long[])rhs);  } else   if (lhs instanceof int[]) {    append((int[])lhs,(int[])rhs);  } else   if (lhs instanceof short[]) {    append((short[])lhs,(short[])rhs);  } else   if (lhs instanceof char[]) {    append((char[])lhs,(char[])rhs);  } else   if (lhs instanceof byte[]) {    append((byte[])lhs,(byte[])rhs);  } else   if (lhs instanceof double[]) {    append((double[])lhs,(double[])rhs);  } else   if (lhs instanceof float[]) {    append((float[])lhs,(float[])rhs);  } else   if (lhs instanceof boolean[]) {    append((boolean[])lhs,(boolean[])rhs);  } else {    append((Object[])lhs,(Object[])rhs);  }  return this;}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (AcelaAddress.convertSystemNameToAlternate(systemName));}  }
class C{  public boolean downloadUrlToStream(String urlString,OutputStream outputStream){  disableConnectionReuseIfNecessary();  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  BufferedInputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return true;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {    }  }  return false;}  }
class C{  public int flux(final int range){  return this.count.get() >= 10000 ? range >> 1 : (range * this.count.get() / 10000) >> 1;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  private static void exitWholeStack(ThreadProfiler ti,MethodGroup[] globalMethods_){  int depth_=ti.depth;  long t=System.nanoTime();  while (depth_ > 0) {    depth_--;    long netTime=t - ti.startTimes[depth_];    MethodGroup m=ti.stack[depth_];    m.hits++;    m.netTime+=netTime;    if (depth_ > 0) {      MethodGroup pm=ti.stack[depth_ - 1];      pm.addChildTime(m,netTime);    }  }}  }
class C{  private ResumptionAction(String name){  this.name=name;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.JAPANESE_DATE_TYPE,this);}  }
class C{  public IntArray(int capacity){  data=new int[capacity];}  }
class C{  public static void deleteInstruction(final JFrame parent,final ZyGraph graph,final NaviNode node,final INaviInstruction instruction){  if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(parent,String.format("Do you really want to delete the instruction '%s' from the code node?",instruction.getInstructionString()))) {    final INaviCodeNode rawNode=(INaviCodeNode)node.getRawNode();    if (!rawNode.hasInstruction(instruction)) {      CMessageBox.showError(parent,"The instruction is not part of the code node");      return;    }    if (Iterables.size(rawNode.getInstructions()) == 1) {      connectParentsWithChildren(graph.getRawView(),node.getRawNode());      graph.deleteNodes(Lists.newArrayList(node));    } else {      ((INaviCodeNode)node.getRawNode()).removeInstruction(instruction);    }  }}  }
class C{  public DateTime toDateTime(TimeOfDay time,DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  long instant=DateTimeUtils.currentTimeMillis();  instant=chrono.set(this,instant);  if (time != null) {    instant=chrono.set(time,instant);  }  return new DateTime(instant,chrono);}  }
class C{  public static ImageSource resource(int resId){  return new ImageSource(resId);}  }
class C{  static public Automaton complement(Automaton a,int maxDeterminizedStates){  a=totalize(determinize(a,maxDeterminizedStates));  int numStates=a.getNumStates();  for (int p=0; p < numStates; p++) {    a.setAccept(p,!a.isAccept(p));  }  return removeDeadStates(a);}  }
class C{  public VasaProviderInfo initializeVasaProviderInfo(){  final String methodName="initializeVasaProviderInfo(): ";  log.debug(methodName + "Entry");  VendorModel[] vms=new VendorModel[1];  vms[0]=new VendorModel();  vms[0].setVendorId(Constants.VASA_BOURNE_PROVIDER_VENDOR_NAME);  vms[0].setModelId(Constants.VASA_BOURNE_PROVIDER_VENDOR_MODEL);  _vpInfo=new VasaProviderInfo();  _vpInfo.setVasaApiVersion(FaultUtil.getVasaApiVersion());  log.debug(methodName + "vasa api version: " + _vpInfo.getVasaApiVersion());  _vpInfo.setName(Constants.VASA_BOURNE_PROVIDER_NAME);  log.debug(methodName + "vasa provider name: " + _vpInfo.getName());  _vpInfo.setVasaProviderVersion(Constants.VASA_BOURNE_PROVIDER_VERSION);  log.debug(methodName + "vasa provider version: " + _vpInfo.getVasaProviderVersion());  _vpInfo.setDefaultSessionTimeoutInSeconds(SessionContext.DEFAULT_SESSION_TIMEOUT);  log.debug(methodName + "default session time out (in seconds): " + _vpInfo.getDefaultSessionTimeoutInSeconds());  String namespace=Constants.VASA_BOURNE_PROVIDER_NAMESPACE;  _vpInfo.setDefaultNamespace(namespace);  log.debug(methodName + "defaultNameSpace: " + _vpInfo.getDefaultNamespace());  _vpInfo.setSupportedVendorModel(vms);  log.debug(methodName + "Exit");  return _vpInfo;}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.831 -0500",hash_original_method="C323B602CD06AD973DC5FDF71A366294",hash_generated_method="79746B066B86222CEF2617E74A625A3E") @DSVerified @DSSpec(DSCat.IO) public static final long copyStream(InputStream source,OutputStream dest) throws CopyStreamException {  return copyStream(source,dest,DEFAULT_COPY_BUFFER_SIZE);}  }
class C{  public boolean isCached(String dataset,String dbFile){  return IOUtils.exists(dbFile) && getMap(dataset).size() > 0;}  }
class C{  synchronized private void sync(){  final List<A> newRecent=new ArrayList<A>();  final List<A> oldRecent;synchronized (recentLock) {    oldRecent=recent;    recent=newRecent;  }  for (  final A x : oldRecent)   all.put(x,time);}  }
class C{  public void writeParameter(String parameterId,String parameterColumn,String fileName,int burnin,XMLWriter writer){  ArrayList<Attribute.Default> attributes=new ArrayList<Attribute.Default>();  attributes.add(new Attribute.Default<String>(XMLParser.ID,parameterId));  attributes.add(new Attribute.Default<String>("parameterColumn",parameterColumn));  attributes.add(new Attribute.Default<String>("fileName",fileName));  attributes.add(new Attribute.Default<String>("burnin","" + burnin));  Attribute[] attrArray=new Attribute[attributes.size()];  for (int i=0; i < attrArray.length; i++) {    attrArray[i]=attributes.get(i);  }  writer.writeTag(ParameterParser.PARAMETER,attrArray,true);}  }
class C{  public static CheckBox checkBox(String text,String tip,boolean sel){  CheckBox ch=new CheckBox(text);  ch.setSelected(sel);  tooltip(ch,tip);  return ch;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public void exportContext(){  ContextExportDialog exportDialog=new ContextExportDialog(View.getSingleton().getMainFrame());  exportDialog.setVisible(true);}  }
class C{  public void addBitmap(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,LinkProperties properties) throws IOException {  LinkBitmap.write(lt,ln,offset_x1,offset_y1,w,h,bytes,properties,link.dos);}  }
class C{  private void saveInstantUploadVideoPathOnPreferences(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  SharedPreferences.Editor editor=appPrefs.edit();  editor.putString("instant_video_upload_path",mUploadVideoPath);  editor.commit();}  }
class C{  protected void init(){  try {    Connection conn=null;    Trx trx=p_vo.getTrxName() == null ? null : Trx.get(p_vo.getTrxName(),true);    if (trx != null) {      conn=trx.getConnection();    } else {      if (p_vo.getResultSetConcurrency() == ResultSet.CONCUR_UPDATABLE)       m_conn=DB.getConnectionRW(); else       m_conn=DB.getConnectionRO();      conn=m_conn;    }    if (conn == null)     throw new DBException("No Connection");    p_stmt=conn.prepareCall(p_vo.getSql(),p_vo.getResultSetType(),p_vo.getResultSetConcurrency());    return;  } catch (  Exception e) {    log.log(Level.SEVERE,p_vo.getSql(),e);    throw new DBException(e);  }}  }
class C{  public static String decodeEndpointOperation(String endpoint,boolean stripped){  int ind=endpoint.indexOf('[');  if (ind != -1) {    if (stripped) {      return endpoint.substring(ind + 1,endpoint.length() - 1);    }    return endpoint.substring(ind);  }  return null;}  }
class C{  public GeometryCollection createGeometryCollection(Geometry[] geometries){  return new GeometryCollection(geometries,this);}  }
class C{  static public final float sin(float radians){  return Sin.table[(int)(radians * radToIndex) & SIN_MASK];}  }
class C{  public void testColocated() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=false;  check();}  }
class C{  public static Object muxArray(Object src,int[] dims,Class<?> componentType){  int len=getLength(dims);  Object dst=Array.newInstance(componentType,len);  muxArray(src,dims,dst);  return dst;}  }
class C{  public static CreateServiceSessionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateServiceSessionResponseE object=new CreateServiceSessionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","createServiceSessionResponse").equals(reader.getName())) {          object.setCreateServiceSessionResponse(CreateServiceSessionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean isPHDRImageMetadataItemKey(byte[] key){  return Arrays.equals(key,KLVPacket.PHDR_IMAGE_METADATA_ITEM_KEY);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ENTRY;}  }
class C{  public int add(E element){  final Counter c0=mMap.get(element);  final Counter c;  if (c0 == null) {    c=new Counter();    mMap.put(element,c);  } else {    c=c0;  }  c.increment();  mTotalCount++;  return c.count();}  }
class C{  static public String[] trim(String[] array){  String[] outgoing=new String[array.length];  for (int i=0; i < array.length; i++) {    if (array[i] != null) {      outgoing[i]=array[i].replace('\u00A0',' ').trim();    }  }  return outgoing;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:28.615 -0400",hash_original_method="7A085DF6BD6668C8BAB6FA85FCE819EE",hash_generated_method="6F4CBF1221FA064EF4FC8CD549A07F79") public HttpParams copy(){  HttpParams clone=this.local.copy();  return new DefaultedHttpParams(clone,this.defaults);}  }
class C{  protected boolean doReset() throws AdeException {  System.out.println("Deleting the content of Database Tables");  super.doReset(a_ade.getDataStore());  new TableManagerExt().deleteAll();  m_dataStore.deleteAllContent();  return true;}  }
class C{  public ImageDownloadService(String url,Component targetList,int targetOffset,String targetKey){  this.targetList=targetList;  this.targetKey=targetKey;  this.targetOffset=targetOffset;  init(url);  setDuplicateSupported(true);}  }
class C{  public void stateChanged(ChangeEvent e){  setVolumeValue();}  }
class C{  AttrContext dup(Scope scope){  AttrContext info=new AttrContext();  info.scope=scope;  info.staticLevel=staticLevel;  info.isSelfCall=isSelfCall;  info.selectSuper=selectSuper;  info.pendingResolutionPhase=pendingResolutionPhase;  info.lint=lint;  info.enclVar=enclVar;  info.returnResult=returnResult;  info.defaultSuperCallSite=defaultSuperCallSite;  info.isSerializable=isSerializable;  info.preferredTreeForDiagnostics=preferredTreeForDiagnostics;  return info;}  }
class C{  private void restoreWidget(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking widget " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Widget widget=unpackProto(new Widget(),buffer,dataSize);  if (DEBUG)   Log.d(TAG,"unpacked " + widget.provider);  if (widget.icon.data != null) {    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);    if (icon == null) {      Log.w(TAG,"failed to unpack widget icon for " + key.name);    } else {      mIconCache.preloadIcon(ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi,widget.label,mUserSerial,mIdp);    }  }  widgetSizes.add(widget.provider + "#" + 1+ ","+ 1);}  }
class C{  Verifier(){  messages=new ArrayList<>(4);}  }
class C{  public SocketReader(final Socket socket) throws IOException {  Preconditions.checkNotNull(socket,"IE00745: Socket can not be null");  m_InputStream=new BufferedInputStream(socket.getInputStream());}  }
class C{  public static void configurePermissiveSSL(AbstractHttpClient httpClient) throws GeneralSecurityException {  if (httpClient == null) {    throw new IllegalArgumentException("null httpClient argument is not allowed");  }  SSLContext sslContext;  try {    sslContext=SSLContext.getInstance("SSL");    sslContext.init(null,new TrustManager[]{new PermissiveX509TrustManager(null)},null);    SSLSocketFactory socketFactory=new SupportedSSLSocketFactory(sslContext);    socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);    Scheme sch=new Scheme("https",socketFactory,443);    httpClient.getConnectionManager().getSchemeRegistry().register(sch);  } catch (  GeneralSecurityException ex) {    throw new GeneralSecurityException("Error updating https scheme with permissive settings",ex);  }}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public void resetChildrenOnKeyListeners(){  int childCount=getChildCount();  for (int j=0; j < childCount; ++j) {    getChildAt(j).setOnKeyListener(null);  }}  }
class C{  protected void writeToXML(IAnalyzedInterval analyzedInterval,Interval jaxbInterval,Marshaller marshaller) throws AdeException {  outFile=getIntervalV2XMLFile(analyzedInterval);  File tempOutputFile=new File(outFile.getParent(),outFile.getName() + ".tmp");  FileOutputStream fos=null;  if (m_verbose) {    System.out.println("saving xml in " + outFile.getAbsolutePath());  }  OutputStreamWriter xmlStreamWriter;  try {    File parentdir=outFile.getParentFile();    parentdir.mkdirs();    fos=new FileOutputStream(tempOutputFile);    xmlStreamWriter=new OutputStreamWriter(fos,"UTF-8");    xmlStreamWriter.write("<?xml version='1.0' encoding='UTF-8' ?> \n");    xmlStreamWriter.write("<?xml-stylesheet href='" + XSL_FILENAME + "' type='text/xsl' ?> \n");  } catch (  IOException e) {    throw new AdeInternalException("Failed to create xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  }  try {    marshaller.marshal(jaxbInterval,xmlStreamWriter);    xmlStreamWriter.close();    xmlStreamWriter=null;    if (outFile.exists()) {      outFile.delete();    }    if (!tempOutputFile.renameTo(outFile)) {      s_logger.error("failed to rename " + tempOutputFile.getName() + " to "+ outFile.getName());      throw new IOException("failed to rename " + tempOutputFile.getName() + " to "+ outFile.getName());    }  } catch (  JAXBException|IOException e) {    throw new AdeInternalException("Failed to write xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  } finally {    try {      if (fos != null) {        fos.close();      }    } catch (    IOException e) {      s_logger.error("Failed to close xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);    }    org.apache.commons.io.FileUtils.deleteQuietly(tempOutputFile);  }}  }
class C{  private static boolean isNalStartCode(byte[] data,int index){  if (data.length - index <= NAL_START_CODE.length) {    return false;  }  for (int j=0; j < NAL_START_CODE.length; j++) {    if (data[index + j] != NAL_START_CODE[j]) {      return false;    }  }  return true;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private CharSequence insertGrouping(CharSequence s){  StringBuilder result=new StringBuilder(s.length() + s.length() / 3);  int digitsLength=s.length();  int i=0;  if (s.charAt(0) == '-') {    --digitsLength;    ++i;    result.append('-');  }  int headLength=digitsLength % 3;  if (headLength == 0) {    headLength=3;  }  result.append(s,i,i + headLength);  i+=headLength;  for (; i < s.length(); i+=3) {    result.append(localeData.groupingSeparator);    result.append(s,i,i + 3);  }  return result;}  }
class C{  @Override public void close(){  finish();}  }
class C{  public synchronized void fastForward(long fastForwardTime){  fastForwardTo(currentTrackTime + fastForwardTime);}  }
class C{  public static void serialize(String xmlString,Writer w){  serialize(asStreamSource(xmlString),w);}  }
class C{  public GridCacheEntryRedeployException(String msg){  super(msg);}  }
class C{  public static boolean isSupported(final int type){  return TYPE_TO_CONSTRUCTOR_MAP.containsKey(type);}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void pushCommentsAndReviews() throws Exception {  try (Git git=new Git(repo)){    RefSpec spec=new RefSpec(DEVTOOLS_PUSH_REFSPEC);    PushCommand pushCommand=git.push();    pushCommand.setRefSpecs(spec);    pushCommand.call();  } }  }
class C{  @Override protected Object convertToType(final Class targetType,final Object value) throws Throwable {  Class sourceType=value.getClass();  if (value instanceof Number) {    return this.toNumber(sourceType,targetType,(Number)value);  }  if (value instanceof Boolean) {    return this.toNumber(sourceType,targetType,((Boolean)value).booleanValue() ? NumberConverter.ONE : NumberConverter.ZERO);  }  if (value instanceof Date && Long.class.equals(targetType)) {    return new Long(((Date)value).getTime());  }  if (value instanceof Calendar && Long.class.equals(targetType)) {    return new Long(((Calendar)value).getTime().getTime());  }  String stringValue=value.toString().trim();  if (stringValue.length() == 0) {    return this.handleMissing(targetType);  }  Number number=null;  if (this.useLocaleFormat) {    NumberFormat format=this.getFormat();    number=this.parse(sourceType,targetType,stringValue,format);  } else {    number=this.toNumber(sourceType,targetType,stringValue);  }  return this.toNumber(sourceType,targetType,number);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.137 -0500",hash_original_method="7A8DE3D3022A3669E75EC61B4D0B5F19",hash_generated_method="DEA02F1853780F13659D188767E49E7A") public AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null arg eventType");  AllowEvents allowEvents=new AllowEvents();  allowEvents.setEventType(eventType);  return allowEvents;}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean includeDisabled=true;  if (curNumberOfParameters == 2) {    includeDisabled=evalBool(stack.pop());  }  return Wizard.getInstance().searchForChannel(getString(stack),includeDisabled);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.IMPORT__IMPORT_URI:    return IMPORT_URI_EDEFAULT == null ? importURI != null : !IMPORT_URI_EDEFAULT.equals(importURI);}return super.eIsSet(featureID);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void addStat(EnumSpellStat stat,int val){  int curr=stats.get(stat);  setStat(stat,val + curr);}  }
class C{  private void readDrawingElement(IXMLElement elem) throws IOException {  for (  IXMLElement child : elem.getChildren()) {    if (child.getNamespace() == null || child.getNamespace().equals(DRAWING_NAMESPACE)) {      String name=child.getName();      if (name.equals("page")) {        readPageElement(child);      }    }  }}  }
class C{  static byte[] passwordHashStage1(String password) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance("SHA-1");  StringBuilder cleansedPassword=new StringBuilder();  int passwordLength=password.length();  for (int i=0; i < passwordLength; i++) {    char c=password.charAt(i);    if ((c == ' ') || (c == '\t')) {      continue;    }    cleansedPassword.append(c);  }  return md.digest(StringUtils.getBytes(cleansedPassword.toString()));}  }
class C{  public String printTreesTipText(){  return "Print the individual trees in the output";}  }
class C{  public boolean updatePriority(String message,int priority){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_LIKES+ "="+ priority+ " WHERE "+ COL_MESSAGE+ "='"+ Utils.makeTextSafeForSQL(message)+ "';");    log.debug("Message priority changed in the store.");    return true;  }  log.debug("Message was not edited, either message or database is null. [" + message + "]");  return false;}  }
class C{  public DefaultRequest itemName(String value){  setString(ITEM_NAME,value);  return this;}  }
class C{  public static int assertSameDimensionality(SpatialComparable box1,SpatialComparable box2){  final int dim=box1.getDimensionality();  if (dim != box2.getDimensionality()) {    throw new IllegalArgumentException("The spatial objects do not have the same dimensionality!");  }  return dim;}  }
class C{  public void test3TouchAtEndpoint() throws Exception {  String a="MULTILINESTRING ((0 1, 1 1, 2 1),   (0 0, 1 0, 2 1),  (0 2, 1 2, 2 1))";  runIsSimpleTest(a,BoundaryNodeRule.MOD2_BOUNDARY_RULE,true,new Coordinate(2,1));  runIsSimpleTest(a,BoundaryNodeRule.ENDPOINT_BOUNDARY_RULE,true,new Coordinate(2,1));}  }
class C{  public static int findNextWordStart(String s,int startIndex){  int i=startIndex;  for (; i < s.length(); i++) {    char currChar=s.charAt(i);    if (Character.isLetterOrDigit(currChar)) {      return i;    }  }  return i;}  }
class C{  public static boolean isEmptyListFollowedBy(BashPsiBuilder builder,IElementType token){  return isEmptyListFollowedBy(builder,TokenSet.create(token));}  }
class C{  public MockCli(final File outDir){  mOutDir=outDir;}  }
class C{  public static double earthDiameter(double latitude){  return SloppyMath.earthDiameter(latitude) * 1000;}  }
class C{  @Override public void read(MessageHandler handler) throws IOException {  unpacker.unpackStructHeader();  int type=unpacker.unpackStructSignature();switch (type) {case MSG_RUN:    unpackRunMessage(handler);  break;case MSG_DISCARD_ALL:unpackDiscardAllMessage(handler);break;case MSG_PULL_ALL:unpackPullAllMessage(handler);break;case MSG_RECORD:unpackRecordMessage(handler);break;case MSG_SUCCESS:unpackSuccessMessage(handler);break;case MSG_FAILURE:unpackFailureMessage(handler);break;case MSG_IGNORED:unpackIgnoredMessage(handler);break;case MSG_INIT:unpackInitMessage(handler);break;case MSG_RESET:unpackResetMessage(handler);break;default :throw new IOException("Unknown message type: " + type);}}  }
class C{  public CCreateDebuggerDescriptionAction(final JFrame parent,final IDatabase database,final String name,final String host,final int port,final INodeSelectionUpdater updater){  super("Create Debugger");  m_parent=Preconditions.checkNotNull(parent,"IE01861: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01862: Database argument can not be null");  m_name=Preconditions.checkNotNull(name,"IE01863: Name argument can not be null");  m_host=Preconditions.checkNotNull(host,"IE01864: Host argument can not be null");  m_port=port;  m_updater=updater;  putValue(MNEMONIC_KEY,(int)"HK_MENU_CREATE_DEBUGGER_DESCRIPTION".charAt(0));}  }
class C{  @SuppressWarnings("unused") public List<String> addInitiatorDetails(URI initiatorId){  List<String> result=Lists.newArrayList();  Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);  if (initiator != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.addInitiatorDetails",initiator.getInitiatorPort()));    List<ExportGroup> exportGroups=ComputeSystemHelper.findExportsByHost(_dbClient,initiator.getHost().toString());    for (    ExportGroup export : exportGroups) {      List<URI> updatedInitiators=StringSetUtil.stringSetToUriList(export.getInitiators());      List<Initiator> validInitiator=ComputeSystemHelper.validatePortConnectivity(_dbClient,export,Lists.newArrayList(initiator));      if (!validInitiator.isEmpty()) {        boolean update=false;        for (        Initiator initiatorObj : validInitiator) {          if (!updatedInitiators.contains(initiator.getId())) {            updatedInitiators.add(initiator.getId());            update=true;          }        }        if (update) {          List<BlockObjectDetails> volumeDetails=getBlockObjectDetails(initiator.getHost(),export.getVolumes());          result.addAll(getVolumeInitiatorDetails(volumeDetails,true));        }      }    }  }  return result;}  }
class C{  private void initPanel(final ITreeNode<CTag> rootTag){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Tag Condition"));  createTree(rootTag);  final JScrollPane pane=new JScrollPane(m_tagTree);  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  final JPanel anyTagPanel=new JPanel();  anyTagPanel.add(m_anyTagBox);  mainPanel.add(pane,BorderLayout.CENTER);  mainPanel.add(m_anyTagBox,BorderLayout.SOUTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof QueuedJobCount);}  }
class C{  void cancelConditionalPressed(ActionEvent e){  if (_pickTables != null) {    _pickTables.dispose();    _pickTables=null;  }  if (_editActionFrame != null) {    cleanUpAction();  }  if (_editVariableFrame != null) {    cleanUpVariable();  }  try {    _curLogix.activateLogix();  } catch (  NumberFormatException nfe) {    if (log.isDebugEnabled()) {      log.error("NumberFormatException on activation of Logix " + nfe);    }    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,rbx.getString("Error4") + nfe.toString() + rbx.getString("Error7"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);  }  inEditConditionalMode=false;  if (editConditionalFrame != null) {    editConditionalFrame.dispose();    editConditionalFrame=null;  }  if (editLogixFrame != null) {    editLogixFrame.setVisible(true);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean isNumeral(){  return (type != null) && type.isNumeral();}  }
class C{  public void deleteIndexStore(String reason,IndexMetaData metaData,ClusterState clusterState,boolean closed) throws IOException {  if (nodeEnv.hasNodeFile()) {synchronized (this) {      String indexName=metaData.getIndex();      if (indices.containsKey(indexName)) {        String localUUid=indices.get(indexName).getIndexService().indexUUID();        throw new IllegalStateException("Can't delete index store for [" + indexName + "] - it's still part of the indices service ["+ localUUid+ "] ["+ metaData.getIndexUUID()+ "]");      }      if (clusterState.metaData().hasIndex(indexName) && (clusterState.nodes().localNode().masterNode() == true)) {        final IndexMetaData index=clusterState.metaData().index(indexName);        throw new IllegalStateException("Can't delete closed index store for [" + indexName + "] - it's still part of the cluster state ["+ index.getIndexUUID()+ "] ["+ metaData.getIndexUUID()+ "]");      }    }    Index index=new Index(metaData.getIndex());    final Settings indexSettings=buildIndexSettings(metaData);    deleteIndexStore(reason,index,indexSettings,closed);  }}  }
class C{  private static void addQueryFields(Document doc,Node parent,Collection<PojoField> fields){  if (!fields.isEmpty()) {    Element prop=addProperty(doc,parent,"fields",null);    Element map=addElement(doc,prop,"util:map","map-class","java.util.LinkedHashMap");    for (    PojoField field : fields)     addElement(doc,map,"entry","key",field.javaName(),"value",GeneratorUtils.boxPrimitiveType(field.javaTypeName()));  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.FEATURE_PARAMETER_VALUE;}  }
class C{  @RequestMapping(value="/authentication",method=RequestMethod.POST,produces="application/json") public @ResponseBody String authenticate(@RequestParam Map<String,String> credentials){  JSONObject jsonResponse=new JSONObject();  try {    String command=credentials.get("command");    String username=credentials.get("username");    String password=credentials.get("password");    if ("signup".equals(command)) {      try {        this.auth.register(username,password,false);        MainController main_controller=new MainController();        main_controller.newUserSetup(username);      } catch (      AuthenticationException e) {        LOGGER.warn(e.getLocalizedMessage());        jsonResponse.put("status","exception");        jsonResponse.put("result",e.getLocalizedMessage());        return jsonResponse.toString();      }    } else     if ("login".equals(command)) {      boolean bLogin=this.auth.login(username,password);      if (!bLogin) {        jsonResponse.put("status","exception");        jsonResponse.put("result","Invalid Login!");        return jsonResponse.toString();      }    } else {      throw new AuthenticationException("Invalid Request!");    }    jsonResponse.put("status","good");  } catch (  Exception e) {    LOGGER.warn(e.getLocalizedMessage());    jsonResponse.put("status","exception");    jsonResponse.put("result",e.getLocalizedMessage());  }  return jsonResponse.toString();}  }
class C{  public boolean removeTask(int taskId,int flags) throws SecurityException {  try {    return ActivityManagerNative.getDefault().removeTask(taskId,flags);  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Deprecated @Override public void recycle(){  LOG.trace("enter EntityEnclosingMethod.recycle()");  clearRequestBody();  requestContentLength=InputStreamRequestEntity.CONTENT_LENGTH_AUTO;  repeatCount=0;  chunked=false;  super.recycle();}  }
class C{  void selectComponent(Component cmp){  getComponentForm().setFocused(cmp);  getComponentForm().scrollComponentToVisible(cmp);  if (cmp instanceof RadioButton) {    ((RadioButton)cmp).setSelected(true);  } else   if (cmp instanceof CheckBox) {    CheckBox cb=((CheckBox)cmp);    cb.setSelected(!cb.isSelected());  }}  }
class C{  public MlBayesIm(BayesPm bayesPm,int initializationMethod) throws IllegalArgumentException {  this(bayesPm,null,initializationMethod);}  }
class C{  @SideOnly(Side.CLIENT) protected void rotateForRendering(){  final int rotation=Port.ROTATION[facing.ordinal()];  GlStateManager.translate(0.5f,0.5f,0);  GlStateManager.rotate(90 * rotation,0,0,Face.toEnumFacing(getFace()).getFrontOffsetY());  GlStateManager.translate(-0.5f,-0.5f,0);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public boolean gameWon(char mark){  if (mark == EMPTY) {    return false;  }  for (int c=0; c <= MaxC; c++) {    boolean victory=true;    if (cells[c][0] != mark)     continue;    for (int r=1; r <= MaxR; r++) {      if (cells[c][r] != cells[c][0]) {        victory=false;      }    }    if (victory)     return true;  }  for (int r=0; r <= MaxR; r++) {    boolean victory=true;    if (cells[0][r] != mark)     continue;    for (int c=1; c <= MaxC; c++) {      if (cells[c][r] != cells[0][r]) {        victory=false;      }    }    if (victory)     return true;  }  if (cells[0][0] == mark) {    boolean victory=true;    for (int i=1; i <= MaxC; i++) {      if (cells[i][i] != cells[0][0]) {        victory=false;      }    }    if (victory)     return true;  }  if (cells[0][cells.length - 1] == mark) {    boolean victory=true;    for (int i=1; i <= MaxC; i++) {      if (cells[i][cells.length - i - 1] != cells[0][cells.length - 1]) {        victory=false;      }    }    if (victory)     return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    int totalNumCells=rows * cols;    double[] x=new double[totalNumCells];    double[] y=new double[totalNumCells];    double[] z=new double[totalNumCells];    double[] data;    int cellNum=0;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          x[cellNum]=image.getXCoordinateFromColumn(col);          y[cellNum]=image.getYCoordinateFromRow(row);          z[cellNum]=data[col];          cellNum++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    String inputHeaderShort=image.getShortHeaderFile();    image.close();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean compareHistory(double[] series1,int t1,double[] series2,int t2){  for (int i=1; i <= k; i++) {    if (Math.abs(series1[t1 - i] - series2[t2 - i]) > epsDest) {      return false;    }  }  return true;}  }
class C{  private String convertToViewIdToFlowOrNodeId(FacesContext ctx,CaseStruct caseStruct){  String viewId=caseStruct.navCase.getToViewId(ctx);  return viewId.substring(viewId.lastIndexOf('/') + 1);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static PageBtreeNode create(PageBtreeIndex index,int pageId,int parentPageId){  PageBtreeNode p=new PageBtreeNode(index,pageId,index.getPageStore().createData());  index.getPageStore().logUndo(p,null);  p.parentPageId=parentPageId;  p.writeHead();  p.start=p.data.length() + 4;  p.rows=SearchRow.EMPTY_ARRAY;  if (p.pageStoreInternalCount) {    p.rowCount=0;  }  return p;}  }
class C{  private static int indexOf(final String s,final char searchChar,final int beginIndex,final int endIndex){  for (int i=beginIndex; i < endIndex; i++) {    if (s.charAt(i) == searchChar) {      return i;    }  }  return -1;}  }
class C{  private void startFailbackChecker(){  activeMQServer.getScheduledPool().scheduleAtFixedRate(new FailbackChecker(),1000L,1000L,TimeUnit.MILLISECONDS);}  }
class C{  public PowerHost findHostForVm(Vm vm){  for (  PowerHost host : this.<PowerHost>getHostList()) {    if (host.isSuitableForVm(vm)) {      return host;    }  }  return null;}  }
class C{  public InlineQueryResultCachedDocumentBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  @RequestProcessing(value="/admin/product/{productId}",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateProduct(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String productId) throws Exception {  final JSONObject product=productQueryService.getProduct(productId);  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    product.put(name,value);    if (name.equals(Product.PRODUCT_STATUS) || name.equals(Product.PRODUCT_COUNT)) {      product.put(name,Integer.valueOf(value));    }    if (name.equals(Product.PRODUCT_CATEGORY)) {      final String category=value;      if (StringUtils.isBlank(category) || StringUtils.length(category) > 20) {        final AbstractFreeMarkerRenderer renderer=new SkinRenderer();        context.setRenderer(renderer);        renderer.setTemplateName("admin/error.ftl");        final Map<String,Object> dataModel=renderer.getDataModel();        dataModel.put(Keys.MSG,langPropsService.get("invalidProductCategoryLabel"));        filler.fillHeaderAndFooter(request,response,dataModel);        return;      }    }  }  productMgmtService.updateProduct(product);  response.sendRedirect(Latkes.getServePath() + "/admin/products");}  }
class C{  private void fillLabel(String sql,int parameter){  log.fine(sql + "; Parameter=" + parameter);  String retValue=DB.getSQLValueString(null,sql,parameter);  if (retValue != null)   label.setText(retValue);}  }
class C{  protected Template handleRequest(HttpServletRequest request,HttpServletResponse response,Context ctx) throws Exception {  Template t=handleRequest(ctx);  if (t == null) {    throw new Exception("handleRequest(Context) returned null - no template selected!");  }  return t;}  }
class C{  private void handleWillCloseWhenClosed(XMethod xmethod,Obligation deletedObligation){  if (deletedObligation == null) {    if (DEBUG_ANNOTATIONS) {      System.out.println("Method " + xmethod.toString() + " is marked @WillCloseWhenClosed, "+ "but its parameter is not an obligation");    }    return;  }  Obligation createdObligation=null;  if ("<init>".equals(xmethod.getName())) {    createdObligation=database.getFactory().getObligationByType(xmethod.getClassDescriptor());  } else {    Type returnType=Type.getReturnType(xmethod.getSignature());    if (returnType instanceof ObjectType) {      try {        createdObligation=database.getFactory().getObligationByType((ObjectType)returnType);      } catch (      ClassNotFoundException e) {        reporter.reportMissingClass(e);        return;      }    }  }  if (createdObligation == null) {    if (DEBUG_ANNOTATIONS) {      System.out.println("Method " + xmethod.toString() + " is marked @WillCloseWhenClosed, "+ "but its return type is not an obligation");    }    return;  }  database.addEntry(new MatchMethodEntry(xmethod,ObligationPolicyDatabaseActionType.DEL,ObligationPolicyDatabaseEntryType.STRONG,deletedObligation));  database.addEntry(new MatchMethodEntry(xmethod,ObligationPolicyDatabaseActionType.ADD,ObligationPolicyDatabaseEntryType.STRONG,createdObligation));}  }
class C{  @Override public boolean supportsStoredFunctionsUsingCallSyntax(){  debugCodeCall("supportsStoredFunctionsUsingCallSyntax");  return true;}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void deleteMax(){  if (isEmpty())   throw new NoSuchElementException("BST underflow");  if (!isRed(root.left) && !isRed(root.right))   root.color=RED;  root=deleteMax(root);  if (!isEmpty())   root.color=BLACK;}  }
class C{  boolean checkRequestParameters(final RestRequest request,final RestChannel channel){  if (channel.detailedErrorsEnabled() == false && request.paramAsBoolean("error_trace",false)) {    try {      XContentBuilder builder=channel.newErrorBuilder();      builder.startObject().field("error","error traces in responses are disabled.").endObject().string();      RestResponse response=new BytesRestResponse(BAD_REQUEST,builder);      response.addHeader("Content-Type","application/json");      channel.sendResponse(response);    } catch (    IOException e) {      logger.warn("Failed to send response",e);    }    return false;  }  return true;}  }
class C{  @Override @SuppressWarnings("unchecked") public void write(TextWriterStream out,String label,Pair<?,?> object) throws IOException {  if (object != null) {    Object first=object.getFirst();    if (first != null) {      TextWriterWriterInterface<Object> tw=(TextWriterWriterInterface<Object>)out.getWriterFor(first);      if (tw == null) {        throw new IOException("No handler for database object itself: " + first.getClass().getSimpleName());      }      tw.write(out,label,first);    }    Object second=object.getSecond();    if (second != null) {      TextWriterWriterInterface<Object> tw=(TextWriterWriterInterface<Object>)out.getWriterFor(second);      if (tw == null) {        throw new IOException("No handler for database object itself: " + second.getClass().getSimpleName());      }      tw.write(out,label,second);    }  }}  }
class C{  public SnmpIpAddress(long addr){  int address=(int)addr;  byte[] ipaddr=new byte[4];  ipaddr[0]=(byte)((address >>> 24) & 0xFF);  ipaddr[1]=(byte)((address >>> 16) & 0xFF);  ipaddr[2]=(byte)((address >>> 8) & 0xFF);  ipaddr[3]=(byte)(address & 0xFF);  buildFromByteArray(ipaddr);}  }
class C{  public static int dpToPx(int dp){  return Math.round(dp * Application.mainActivity.getResources().getDisplayMetrics().density);}  }
class C{  public static JSONValue value(String string){  return string == null ? NULL : new JSONString(string);}  }
class C{  public ExtensionHttpSessions(){  super(NAME);  initialize();}  }
class C{  private void decodeParms(String parms,Properties p) throws InterruptedException {  if (parms == null)   return;  StringTokenizer st=new StringTokenizer(parms,"&");  while (st.hasMoreTokens()) {    String e=st.nextToken();    int sep=e.indexOf('=');    if (sep >= 0)     p.put(decodePercent(e.substring(0,sep)).trim(),decodePercent(e.substring(sep + 1)));  }}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer analyzer=new ClassicAnalyzer();  checkRandomData(random(),analyzer,100 * RANDOM_MULTIPLIER,8192);  analyzer.close();}  }
class C{  public void handleEvent(Event evt){  Object[] defs=importRemovedListener.toBeRemoved.toArray();  importRemovedListener.toBeRemoved.clear();  for (int i=0; i < defs.length; i++) {    XBLOMDefinitionElement def=(XBLOMDefinitionElement)defs[i];    DefinitionRecord defRec=(DefinitionRecord)definitions.get(def,importElement);    removeDefinition(defRec);  }}  }
class C{  public static boolean isWddx(Object o){  if (!(o instanceof String))   return false;  String str=o.toString();  if (!(str.indexOf("wddxPacket") > 0))   return false;  WDDXConverter converter=new WDDXConverter(TimeZone.getDefault(),false,true);  try {    converter.deserialize(Caster.toString(o),true);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public void testMergeSameFilterWithInitParamInTwoDocuments() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "    <init-param>"+ "      <param-name>fparamName</param-name>"+ "      <param-value>fparamValue</param-value>"+ "    </init-param>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "    <init-param>"+ "      <param-name>fparamName</param-name>"+ "      <param-value>fparamValue</param-value>"+ "    </init-param>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  List<String> filterInitParamNames=WebXmlUtils.getFilterInitParamNames(srcWebXml,"f1");  assertTrue(filterInitParamNames.size() == 1);  assertEquals("fparamName",filterInitParamNames.get(0));  List<String> filterMappings=WebXmlUtils.getFilterMappings(srcWebXml,"f1");  assertEquals(1,filterMappings.size());  assertEquals("/f1mapping1",filterMappings.get(0));}  }
class C{  public void onDisconnect(HeaderSet request,HeaderSet reply){}  }
class C{  public EnvironmentId(Scope scope,String category,String name){  if (scope == null) {    throw new IllegalArgumentException("Null scope isn't allowed.");  }  if (name == null) {    throw new IllegalArgumentException("Null name isn't allowed.");  }  this.scope=scope;  this.category=category;  this.name=name;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  this.keysize=(keysize + 7) / 8;  this.engineInit(random);}  }
class C{  public IllegalComponentStateException(){  super();}  }
class C{  public MemoryImageSource(int w,int h,int pix[],int off,int scan){  initialize(w,h,ColorModel.getRGBdefault(),(Object)pix,off,scan,null);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  public void clear(int i){  int addr=i >> ADDRESS_BITS;  if (addr >= data.length) {    return;  }  data[addr]&=~getBitMask(i);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) static int compareComparables(Class<?> kc,Object k,Object x){  return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x));}  }
class C{  public ClientSettings(ClientSettingsMessage msg){  this(msg.getLocale(),msg.getViewDistance(),msg.getChatFlags(),msg.isChatColors(),msg.getSkinFlags(),msg.getHand());}  }
class C{  public int base(){  return base;}  }
class C{  protected Map<String,String> createResourceMap(KMLModel model){  Map<String,String> map=new HashMap<String,String>();  KMLResourceMap resourceMap=model.getResourceMap();  if (resourceMap == null)   return Collections.emptyMap();  for (  KMLAlias alias : resourceMap.getAliases()) {    if (alias != null && !WWUtil.isEmpty(alias.getSourceRef()) && !WWUtil.isEmpty(alias.getTargetHref())) {      map.put(alias.getSourceRef(),alias.getTargetHref());    }  }  return map.size() > 0 ? map : Collections.<String,String>emptyMap();}  }
class C{  public static BigDecimal createBigDecimal(String val){  BigDecimal bd=new BigDecimal(val);  return bd;}  }
class C{  public int size(){  return tuple.length;}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,int size,boolean resizeBuffer){  newData.rewind();  GLES20.glBindBuffer(bufferInfo.target,bufferInfo.bufferHandle);  if (resizeBuffer) {    bufferInfo.buffer=newData;    GLES20.glBufferData(bufferInfo.target,size * bufferInfo.byteSize,newData,bufferInfo.usage);  } else {    GLES20.glBufferSubData(bufferInfo.target,index * bufferInfo.byteSize,size * bufferInfo.byteSize,newData);  }  GLES20.glBindBuffer(bufferInfo.target,0);}  }
class C{  private static boolean isSupportedAddMirrorsVirtualPoolChangeForVplexDistributed(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedAddMirrorsVirtualPoolChangeForVplexDistributed from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  boolean supported=false;  if (newVpool.getMaxNativeContinuousCopies() > 0 && newVpool.getMirrorVirtualPool() != null) {    String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,HIGH_AVAILABILITY,PROTECTION_VARRAY_SETTINGS,FAST_EXPANSION,ACLS,INACTIVE,DRIVE_TYPE,ARRAY_INFO,PROVISIONING_TYPE,PROTOCOLS};    String[] contain=new String[]{MATCHED_POOLS,ASSIGNED_STORAGE_POOLS};    Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,contain);    if (!changes.isEmpty()) {      notSuppReasonBuff.append("These target virtual pool differences are invalid: ");      fillInNotSupportedReasons(changes,notSuppReasonBuff);      return false;    }    supported=true;  }  VirtualPool currentHaVpool=VirtualPool.getHAVPool(currentVpool,dbClient);  if (currentHaVpool == null) {    currentHaVpool=currentVpool;  }  VirtualPool newHaVpool=VirtualPool.getHAVPool(newVpool,dbClient);  if (currentHaVpool != null && newHaVpool != null) {    if (newHaVpool.getMaxNativeContinuousCopies() > 0 && newHaVpool.getMirrorVirtualPool() != null) {      String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,PROTECTION_VARRAY_SETTINGS,FAST_EXPANSION,ACLS,INACTIVE,DRIVE_TYPE,ARRAY_INFO,PROVISIONING_TYPE,PROTOCOLS};      String[] contain=new String[]{MATCHED_POOLS,ASSIGNED_STORAGE_POOLS};      Map<String,Change> changes=analyzeChanges(currentHaVpool,newHaVpool,include,null,contain);      if (!changes.isEmpty()) {        notSuppReasonBuff.append("These target virtual pool differences are invalid: ");        fillInNotSupportedReasons(changes,notSuppReasonBuff);        return false;      }      supported=true;    }  }  return supported;}  }
class C{  private String cleanToken(String token){  token=token.replace("(","");  token=token.replace(")","");  token=token.replace("[","");  token=token.replace("]","");  token=token.replace("!","");  token=token.replace("?","");  token=token.replace(",","");  token=token.replace(".","");  token=token.replace(":","");  token=token.replace(";","");  return token;}  }
class C{  private PackageUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean isAddNoise(){  return addNoise;}  }
class C{  protected final void resolveClass(Class<?> clazz){}  }
class C{  public Filter createFilter(){  FilterImpl filter=new FilterImpl();  return filter;}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  private void processAnsiCommand_D(){  moveCursorBackward(getAnsiParameter(0));}  }
class C{  public void updateLastCommitSeqno(ReplDBMSHeader header,long appliedLatency) throws ReplicatorException {  try {    if (lowSeqno == Long.MIN_VALUE) {      ReplDBMSHeader lowHeader=lastCommitSeqno();      if (lowHeader == null)       lowSeqno=-1; else       lowSeqno=lowHeader.getSeqno();      if (logger.isDebugEnabled())       logger.debug("Fetching low seqno for task: " + lowSeqno);    }    if (header.getSeqno() >= lowSeqno) {      if (logger.isDebugEnabled())       logger.debug("Updating last committed event header: " + header.getSeqno());      commitSeqnoUpdate.setLong(1,header.getSeqno());      commitSeqnoUpdate.setShort(2,header.getFragno());      commitSeqnoUpdate.setBoolean(3,header.getLastFrag());      commitSeqnoUpdate.setString(4,header.getSourceId());      commitSeqnoUpdate.setLong(5,header.getEpochNumber());      commitSeqnoUpdate.setString(6,header.getEventId());      commitSeqnoUpdate.setLong(7,Math.max(appliedLatency,0));      commitSeqnoUpdate.setTimestamp(8,new Timestamp(System.currentTimeMillis()));      commitSeqnoUpdate.setString(9,header.getShardId());      commitSeqnoUpdate.setTimestamp(10,header.getExtractedTstamp());      commitSeqnoUpdate.setInt(11,taskId);      commitSeqnoUpdate.executeUpdate();    } else {      if (lowSeqnoWarning) {        if (logger.isDebugEnabled())         logger.debug("Skipping update of last committed event header: seqno=" + header.getSeqno() + " lowSeqno="+ lowSeqno);      } else {        logger.warn("Skipping attempted update of last committed event header to avoid resetting restart point: seqno=" + header.getSeqno() + " lowSeqno="+ lowSeqno);        lowSeqnoWarning=true;      }    }  } catch (  SQLException e) {    throw new ReplicatorException("Unable to update last commit seqno: " + e.getMessage(),e);  }}  }
class C{  private void showPreviewLettering(){  overlayLabel.setText(PREVIW_LETTERING);  overlayLabel.setFont(PREVIW_LETTERING_FONT);  overlayLabel.setForeground(DataImportWizardUtils.getPreviewFontColor());  overlayLabel.setIcon(null);}  }
class C{  public void init(Stage.Context context,String groupName,String prefix,List<Stage.ConfigIssue> issues){  if (!trustStorePath.isEmpty()) {    if (Files.notExists(Paths.get(trustStorePath))) {      issues.add(context.createConfigIssue(groupName,prefix + "trustStorePath",Errors.HTTP_04,trustStorePath));    }    if (trustStorePassword.isEmpty()) {      issues.add(context.createConfigIssue(groupName,prefix + "trustStorePassword",Errors.HTTP_05));    }  }  if (!keyStorePath.isEmpty()) {    if (Files.notExists(Paths.get(keyStorePath))) {      issues.add(context.createConfigIssue(groupName,prefix + "keyStorePath",Errors.HTTP_04,keyStorePath));    }    if (keyStorePassword.isEmpty()) {      issues.add(context.createConfigIssue(groupName,prefix + "keyStorePassword",Errors.HTTP_05));    }  }}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  @Override public void find(byte[] tableKey,Object arg,Result<byte[]> result){  TableKraken table=_tableManager.getTable(tableKey);  if (table == null) {    throw new QueryException(L.l("'{0}' is an unknown table.",Hex.toShortHex(tableKey)));  }  String sql="select_local table_key from kraken_meta_table where table_name=?";  QueryBuilderKraken builder=QueryParserKraken.parse(_tableManager,sql);  QueryKraken query=builder.build();  query.findOne(result.then(null),arg);}  }
class C{  private Object _deserializeStruct(Element elStruct) throws ConverterException {  String type=elStruct.getAttribute("type");  Struct struct=new StructImpl();  NodeList list=elStruct.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      Element var=(Element)node;      Element value=getChildElement((Element)node);      if (value != null) {        struct.setEL(var.getAttribute("name"),_deserialize(value));      }    }  }  if (struct.size() == 0 && type != null && type.length() > 0) {    return "";  }  return struct;}  }
class C{  public FunctionBlockAttributeSource createFunctionBlockAttributeSource(){  FunctionBlockAttributeSourceImpl functionBlockAttributeSource=new FunctionBlockAttributeSourceImpl();  return functionBlockAttributeSource;}  }
class C{  private UCrop basisConfig(@NonNull UCrop uCrop){switch (mRadioGroupAspectRatio.getCheckedRadioButtonId()) {case R.id.radio_origin:    uCrop=uCrop.useSourceImageAspectRatio();  break;case R.id.radio_square:uCrop=uCrop.withAspectRatio(1,1);break;case R.id.radio_dynamic:break;default :try {float ratioX=Float.valueOf(mEditTextRatioX.getText().toString().trim());float ratioY=Float.valueOf(mEditTextRatioY.getText().toString().trim());if (ratioX > 0 && ratioY > 0) {uCrop=uCrop.withAspectRatio(ratioX,ratioY);}} catch (NumberFormatException e) {Log.i(TAG,String.format("Number please: %s",e.getMessage()));}break;}if (mCheckBoxMaxSize.isChecked()) {try {int maxWidth=Integer.valueOf(mEditTextMaxWidth.getText().toString().trim());int maxHeight=Integer.valueOf(mEditTextMaxHeight.getText().toString().trim());if (maxWidth > 0 && maxHeight > 0) {uCrop=uCrop.withMaxResultSize(maxWidth,maxHeight);}} catch (NumberFormatException e) {Log.e(TAG,"Number please",e);}}return uCrop;}  }
class C{  protected boolean epsClose(double minDist,double minDist2){  return min(minDist / minDist2,minDist2 / minDist) > (1 - eps) && max(minDist / minDist2,minDist2 / minDist) < (1 + eps);}  }
class C{  public static int copyStream(InputStream sourceStream,OutputStream destinationStream) throws IOException {  int bytesRead=0;  int totalBytes=0;  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  while (bytesRead >= 0) {    bytesRead=sourceStream.read(buffer,0,buffer.length);    if (bytesRead > 0) {      destinationStream.write(buffer,0,bytesRead);    }    totalBytes+=bytesRead;  }  destinationStream.flush();  destinationStream.close();  return totalBytes;}  }
class C{  public ArrayColormap(int[] map){  this.map=map;}  }
class C{  public IndexedLRUCache(int capacity,CacheResourceManager<T> resourceManager){  this.capacity=capacity;  this.resourceManager=resourceManager;}  }
class C{  public void MPV_common_defaults(){  this.y_dc_scale_table=this.c_dc_scale_table=ff_mpeg1_dc_scale_table;  this.chroma_qscale_table=ff_default_chroma_qscale_table;  this.progressive_frame=1;  this.progressive_sequence=1;  this.picture_structure=PICT_FRAME;  this.coded_picture_number=0;  this.picture_number=0;  this.input_picture_number=0;  this.picture_in_gop_number=0;  this.f_code=1;  this.b_code=1;}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static long nextHighestPowerOfTwo(long v){  v--;  v|=v >> 1;  v|=v >> 2;  v|=v >> 4;  v|=v >> 8;  v|=v >> 16;  v|=v >> 32;  v++;  return v;}  }
class C{  protected boolean shouldBeConflated(Conflatable event){  boolean retVal=event.shouldBeConflated();  if (event instanceof ClientMarkerMessageImpl) {    return retVal;  }switch (this.clientConflation) {case HandShake.CONFLATION_OFF:    return false;case HandShake.CONFLATION_ON:  if (event instanceof HAEventWrapper) {    ClientUpdateMessage cum=(ClientUpdateMessage)this.haContainer.get(event);    if (cum != null) {      retVal=cum.isUpdate();    }    break;  }if (event instanceof ClientUpdateMessage) {  retVal=((ClientUpdateMessage)event).isUpdate();  break;}break;case HandShake.CONFLATION_DEFAULT:return retVal;default :throw new InternalGemFireError("Invalid clientConflation");}return retVal;}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMVKernElement(prefix,(AbstractDocument)doc);}  }
class C{  public int columns(){  return columns;}  }
class C{  private void resetCombo(){  Object oldChoice=null;  if (requestors != null) {    oldChoice=requestors.getSelectedItem();    ActionListener[] actions=requestors.getActionListeners();    for (int loop=0; loop < actions.length; loop++) {      requestors.removeActionListener(actions[loop]);    }    requestors.removeAllItems();    for (    DrawingToolRequestor requestor : drawingToolRequestors) {      requestors.addItem(requestor.getName());    }    if (oldChoice != null) {      requestors.setSelectedItem(oldChoice);    }    for (int loop=0; loop < actions.length; loop++) {      requestors.addActionListener(actions[loop]);    }    setCurrentRequestor((String)requestors.getSelectedItem());  }  createButton.setEnabled(drawingToolRequestors != null && !drawingToolRequestors.isEmpty());}  }
class C{  public void updateControllerConnections(IOFSwitchBackend sw,OFControllerRole role1,OFBsnControllerConnectionState state1,String uri1,OFControllerRole role2,OFBsnControllerConnectionState state2,String uri2){  OFBsnControllerConnection connection1=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role1).setState(state1).setUri(uri1).build();  OFBsnControllerConnection connection2=factory.buildBsnControllerConnection().setAuxiliaryId(OFAuxId.MAIN).setRole(role2).setState(state2).setUri(uri2).build();  List<OFBsnControllerConnection> connections=new ArrayList<OFBsnControllerConnection>();  connections.add(connection1);  connections.add(connection2);  OFBsnControllerConnectionsReply reply=factory.buildBsnControllerConnectionsReply().setConnections(connections).build();  sw.updateControllerConnections(reply);}  }
class C{  protected void onEntranceTransitionEnd(){}  }
class C{  public Quaternionf rotate(float angleX,float angleY,float angleZ,Quaternionf dest){  double thetaX=angleX * 0.5;  double thetaY=angleY * 0.5;  double thetaZ=angleZ * 0.5;  double thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  double s;  double dqX, dqY, dqZ, dqW;  if (thetaMagSq * thetaMagSq / 24.0f < 1E-8f) {    dqW=1.0 - thetaMagSq / 2.0;    s=1.0 - thetaMagSq / 6.0;  } else {    double thetaMag=Math.sqrt(thetaMagSq);    dqW=Math.cos(thetaMag);    s=Math.sin(thetaMag) / thetaMag;  }  dqX=thetaX * s;  dqY=thetaY * s;  dqZ=thetaZ * s;  dest.set((float)(w * dqX + x * dqW + y * dqZ - z * dqY),(float)(w * dqY - x * dqZ + y * dqW + z * dqX),(float)(w * dqZ + x * dqY - y * dqX + z * dqW),(float)(w * dqW - x * dqX - y * dqY - z * dqZ));  return dest;}  }
class C{  private Set<Integer> findValues(String string){  Set<Integer> results=new TreeSet<Integer>();  for (  String str : string.split(",")) {    if (!str.equals("")) {      results.add(findValue(str));    }  }  return results;}  }
class C{  Object processAVT_QNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  try {    avt=new AVT(handler,uri,name,rawName,value,owner);    if (avt.isSimple()) {      int indexOfNSSep=value.indexOf(':');      if (indexOfNSSep >= 0) {        String prefix=value.substring(0,indexOfNSSep);        if (!XML11Char.isXML11ValidNCName(prefix)) {          handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);          return null;        }      }      String localName=(indexOfNSSep < 0) ? value : value.substring(indexOfNSSep + 1);      if ((localName == null) || (localName.length() == 0) || (!XML11Char.isXML11ValidNCName(localName))) {        handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);        return null;      }    }  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  return avt;}  }
class C{  public int copyLinesFrom(MInvoice otherInvoice,boolean counter,boolean setOrder){  if (isProcessed() || isPosted() || otherInvoice == null)   return 0;  MInvoiceLine[] fromLines=otherInvoice.getLines(false);  int count=0;  for (int i=0; i < fromLines.length; i++) {    MInvoiceLine line=new MInvoiceLine(getCtx(),0,get_TrxName());    MInvoiceLine fromLine=fromLines[i];    if (counter)     PO.copyValues(fromLine,line,getAD_Client_ID(),getAD_Org_ID()); else     PO.copyValues(fromLine,line,fromLine.getAD_Client_ID(),fromLine.getAD_Org_ID());    line.setC_Invoice_ID(getC_Invoice_ID());    line.setInvoice(this);    line.set_ValueNoCheck("C_InvoiceLine_ID",I_ZERO);    if (!setOrder)     line.setC_OrderLine_ID(0);    line.setRef_InvoiceLine_ID(0);    line.setM_InOutLine_ID(0);    line.setA_Asset_ID(0);    line.setM_AttributeSetInstance_ID(0);    line.setS_ResourceAssignment_ID(0);    if (getC_BPartner_ID() != otherInvoice.getC_BPartner_ID())     line.setTax();    if (counter) {      line.setRef_InvoiceLine_ID(fromLine.getC_InvoiceLine_ID());      if (fromLine.getC_OrderLine_ID() != 0) {        MOrderLine peer=new MOrderLine(getCtx(),fromLine.getC_OrderLine_ID(),get_TrxName());        if (peer.getRef_OrderLine_ID() != 0)         line.setC_OrderLine_ID(peer.getRef_OrderLine_ID());      }      line.setM_InOutLine_ID(0);      if (fromLine.getM_InOutLine_ID() != 0) {        MInOutLine peer=new MInOutLine(getCtx(),fromLine.getM_InOutLine_ID(),get_TrxName());        if (peer.getRef_InOutLine_ID() != 0)         line.setM_InOutLine_ID(peer.getRef_InOutLine_ID());      }    }    line.setProcessed(false);    if (line.save(get_TrxName()))     count++;    if (counter) {      fromLine.setRef_InvoiceLine_ID(line.getC_InvoiceLine_ID());      fromLine.save(get_TrxName());    }    line.copyLandedCostFrom(fromLine);    line.allocateLandedCosts();  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Line difference - From=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static MBeanServerBuilder newBuilder(Class<?> builderClass){  try {    final Object abuilder=builderClass.newInstance();    return (MBeanServerBuilder)abuilder;  } catch (  RuntimeException x) {    throw x;  }catch (  Exception x) {    final String msg="Failed to instantiate a MBeanServerBuilder from " + builderClass + ": "+ x;    throw new JMRuntimeException(msg,x);  }}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("fetchSizeTest1","id int, test varchar(100)");  createTable("fetchSizeTest2","id int, test varchar(100)");  createTable("fetchSizeTest3","id int, test varchar(100)");  createTable("fetchSizeTest4","id int, test varchar(100)");}  }
class C{  public T caseTFunction(TFunction object){  return null;}  }
class C{  private String extractUrl(String sharedUrl){  String finalUrl;  finalUrl=sharedUrl.trim();  String[] possible_urls=finalUrl.split(" ");  for (  String url : possible_urls) {    if (NetworkManager.isUrl(url)) {      finalUrl=url;      break;    }  }  finalUrl=finalUrl.substring(finalUrl.lastIndexOf(" ") + 1);  finalUrl=finalUrl.substring(finalUrl.lastIndexOf("\n") + 1);  if (NetworkManager.isUrl("http://" + finalUrl) && !NetworkManager.isUrl(finalUrl)) {    finalUrl="http://" + finalUrl;  }  if (finalUrl.contains("&utm_source=")) {    finalUrl=finalUrl.substring(0,finalUrl.indexOf("&utm_source="));  }  if (finalUrl.contains("?utm_source=")) {    finalUrl=finalUrl.substring(0,finalUrl.indexOf("?utm_source="));  }  if (finalUrl.contains("#xtor=RSS-")) {    finalUrl=finalUrl.substring(0,finalUrl.indexOf("#xtor=RSS-"));  }  return finalUrl;}  }
class C{  public OuterInnerDirectionalGraph add(int outerStream,int innerStream){  checkArgs(outerStream,innerStream);  Set<Integer> innerSet=streamToInnerMap.get(outerStream);  if (innerSet == null) {    innerSet=new HashSet<Integer>();    streamToInnerMap.put(outerStream,innerSet);  }  if (innerSet.contains(innerStream)) {    throw new IllegalArgumentException("Inner stream already in collection");  }  innerSet.add(innerStream);  return this;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public OrderMoves(int n){  int k=n * (n + 1) / 2;  this.weights=new int[k];  int half=n / 2;  for (int i=0; i < k; i++) {    weights[i]=half + 1;  }  int idx=0;  int base=0;  for (int i=0; i < half; i++) {    base++;    for (int j=0; j <= i; j++) {      weights[idx++]=base;    }  }  int offset=-1;  int adjust=0;  if (n % 2 == 1) {    adjust=1;  }  idx=k - 1;  for (int i=half - 1; i >= 0; i--) {    offset++;    for (int j=0; j <= i; j++) {      weights[idx--]=1 + j + offset;    }    idx-=(offset + adjust);    for (int j=0; j <= i; j++) {      weights[idx--]=half - j;    }  }}  }
class C{  public Line(Line line){  if (line == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","constructor","missingLine"));  }  this.origin.set(line.origin);  this.direction.set(line.direction);}  }
class C{  public BackgroundPainter(String imageLocation,boolean fixed,boolean tile){  this(Toolkit.getDefaultToolkit().getImage(IOLib.urlFromString(imageLocation)),fixed,tile);}  }
class C{  public boolean isHasVariables(){  return hasVariables;}  }
class C{  public String toString(){  return this.sequenceBO.toString();}  }
class C{  @Override protected void generatePseudoKingCastlingMoves(long fromBB,PriorityMoveList moves){  FischerRandomUtils.generatePseudoKingCastlingMoves(this,fromBB,moves,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person p=getPerson(stack);  return (p != null) ? p.getDateOfBirth() : "";}  }
class C{  private String convertToXML(final Set<BillReceiptInfo> billReceipts){  final XStream xStream=new XStream(new DomDriver());  xStream.registerConverter(new BillReceiptInfoConverter());  xStream.registerConverter(new ReceiptAccountInfoConverter());  xStream.registerConverter(new ReceiptInstrumentInfoConverter());  xStream.alias("Bill-Receipt",BillReceiptInfoImpl.class);  return xStream.toXML(billReceipts);}  }
class C{  private void writeChartToKmz(final String filename,final JFreeChart chart) throws IOException {  byte[] img;  img=ChartUtilities.encodeAsPNG(chart.createBufferedImage(CHARTWIDTH,CHARTHEIGHT));  this.writer.addNonKMLFile(img,filename);}  }
class C{  NodeRepresentation pathToNodeRep(Vector<Integer> vec){  NodeRepresentation result=null;  int i=vec.size() - 1;  int idx=vec.elementAt(i).intValue();  if (idx == -1) {    return state.goalRep;  }  ;  result=state.assumeReps.elementAt(idx);  i--;  while (i >= 0) {    int idx1=vec.elementAt(i).intValue();    i--;    int idx2=vec.elementAt(i).intValue();    result=result.children.elementAt(idx1).elementAt(idx2);    i--;  }  return result;}  }
class C{  public static boolean isSecurityManagerEnabled(){  return System.getSecurityManager() != null;}  }
class C{  public void loadResource(String resource) throws ParserConfigurationException, SAXException, IOException {  URL filePath=getClass().getClassLoader().getResource(resource);  loadFile(URLDecoder.decode(filePath.getFile(),"UTF-8"));}  }
class C{  @Override public final void preTearDown() throws Exception {  vm0.invoke(null);  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  cache=null;  hrq=null;  opThreads=null;}  }
class C{  public static List<Milestone> findMilestones(Long projectId,State state){  return findMilestones(projectId,state,DEFAULT_SORTER,Direction.ASC);}  }
class C{  protected SVGOMFEFuncAElement(){}  }
class C{  private ShortCutUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  protected void drawPlainText(String text,int x,int y,int w,int h,Map<String,Object> style){  if (g.hitClip(x,y,w,h)) {    mxLighweightTextPane textRenderer=mxLighweightTextPane.getSharedInstance();    if (mxUtils.getString(style,mxConstants.STYLE_WHITE_SPACE,"nowrap").equals("wrap") && textRenderer != null && rendererPane != null) {      textRenderer.setText(text);      SimpleAttributeSet sas=new SimpleAttributeSet();      Object align=mxUtils.getString(style,mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER);      int scAlign=(align.equals(mxConstants.ALIGN_LEFT)) ? StyleConstants.ALIGN_LEFT : (align.equals(mxConstants.ALIGN_RIGHT)) ? StyleConstants.ALIGN_RIGHT : StyleConstants.ALIGN_CENTER;      StyleConstants.setAlignment(sas,scAlign);      StyleConstants.setForeground(sas,mxUtils.getStyleFontColor(style,Color.black));      Font font=g.getFont();      StyleConstants.setFontFamily(sas,font.getFamily());      StyleConstants.setFontSize(sas,font.getSize());      StyleConstants.setItalic(sas,font.isItalic());      StyleConstants.setBold(sas,font.isBold());      ((StyledDocument)textRenderer.getDocument()).setParagraphAttributes(0,textRenderer.getDocument().getLength(),sas,true);      rendererPane.paintComponent(g,textRenderer,rendererPane,x,(int)(y + mxConstants.LABEL_INSET * scale),w,h,false);    } else {      AffineTransform at=g.getTransform();      boolean horizontal=mxUtils.isTrue(style,mxConstants.STYLE_HORIZONTAL,true);      if (!horizontal) {        g.rotate(-Math.PI / 2,x + w / 2,y + h / 2);        g.translate(w / 2 - h / 2,h / 2 - w / 2);      }      FontMetrics fm=g.getFontMetrics();      y+=2 * fm.getMaxAscent() - fm.getHeight() + mxConstants.LABEL_INSET * scale;      Object align=mxUtils.getString(style,mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER);      if (align.equals(mxConstants.ALIGN_LEFT)) {        x+=mxConstants.LABEL_INSET;      } else       if (align.equals(mxConstants.ALIGN_RIGHT)) {        x-=mxConstants.LABEL_INSET;      }      Color fontColor=mxUtils.getStyleFontColor(style,Color.black);      g.setColor(fontColor);      String[] lines=text.split("\n");      for (int i=0; i < lines.length; i++) {        int dx=0;        if (align.equals(mxConstants.ALIGN_CENTER)) {          int sw=fm.stringWidth(lines[i]);          if (horizontal) {            dx=(w - sw) / 2;          } else {            dx=(h - sw) / 2;          }        } else         if (align.equals(mxConstants.ALIGN_RIGHT)) {          int sw=fm.stringWidth(lines[i]);          dx=((horizontal) ? w : h) - sw;        }        g.drawString(lines[i],x + dx,y);        y+=fm.getHeight() + mxConstants.LINESPACING;      }      g.setTransform(at);    }  }}  }
class C{  public void releaseExternalResources(){  if (!isClosed.get()) {    logger.info("Releasing all ParallelClient resources... ");    ActorConfig.shutDownActorSystemForce();    httpClientStore.shutdown();    tcpSshPingResourceStore.shutdown();    taskManager.cleanWaitTaskQueue();    taskManager.cleanInprogressJobMap();    isClosed.set(true);    logger.info("Have released all ParallelClient resources " + "(actor system + async+sync http client + task queue)" + "\nNow safe to stop your application.");  } else {    logger.debug("NO OP. ParallelClient resources have already been released.");  }}  }
class C{  public void handle(StateContext state,SubCollectionRelationshipContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  protected Expression bool(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.Bool(),opPos);}  }
class C{  public static String saveImageCropToPath(Bitmap bitmap,int x1,int y1,int x2,int y2,String directoryPath,String imageName){  if (y2 - y1 > bitmap.getHeight())   y2=bitmap.getHeight() + y1;  if (x2 - x1 > bitmap.getWidth())   x2=bitmap.getWidth() + x1;  Bitmap cropBitmap=Bitmap.createBitmap(bitmap,x1,y1,x2 - x1,y2 - y1);  String fullPath=null;  try {    File fileDir=new File(directoryPath);    if (!fileDir.exists())     fileDir.mkdir();    File imageFile=new File(directoryPath,imageName);    FileOutputStream fos=new FileOutputStream(imageFile);    cropBitmap.compress(Bitmap.CompressFormat.JPEG,80,fos);    fos.flush();    fos.close();    fullPath=imageFile.getPath();  } catch (  IOException e) {    Log.d(IMAGE_HELPER,e.toString());  }  cropBitmap.recycle();  return fullPath;}  }
class C{  public synchronized Pointer<Double> dft(Pointer<Double> in,boolean forward){  assert in.getValidElements() % 2 == 0;  int length=(int)in.getValidElements() / 2;  CLBuffer<Double> inBuf=context.createDoubleBuffer(CLMem.Usage.Input,in,true);  CLBuffer<Double> outBuf=context.createDoubleBuffer(CLMem.Usage.Output,length * 2);  kernel.setArgs(inBuf,outBuf,length,forward ? 1 : -1);  CLEvent dftEvt=kernel.enqueueNDRange(queue,new int[]{length});  return outBuf.read(queue,dftEvt);}  }
class C{  public Iterable<LatestCellValueColumn> latestCellValue(){  return null;}  }
class C{  public String subject(){  return subject;}  }
class C{  protected void init(Refactoring refactoring) throws CoreException {}  }
class C{  @SuppressWarnings("unused") public void printTrie(TrieNode node,char[] prefix,int index,String debugPrefix){  LinkedList<TrieNode> children=node.getChildren();  LogUtils.log(this,Log.DEBUG,"%1$s: current Prefix %2$s",debugPrefix,new String(prefix));  LogUtils.log(this,Log.DEBUG,"%1$s: children size %2$d",debugPrefix,children.size());  for (  TrieNode child : children) {    LogUtils.log(this,Log.INFO,"%1$s: Prefix children %2$c : %3$d",debugPrefix,(char)child.getContent(),child.getCount());  }  for (  TrieNode child : children) {    char content=(char)child.getContent();    prefix[index]=content;    printTrie(child,prefix,index + 1,debugPrefix + "-");  }  if (index > 0) {    prefix[index - 1]=' ';  }}  }
class C{  public boolean contains(int value){  return contains(new Integer(value).toString());}  }
class C{  public static String escapeForLike(String value){  return escapeForLike(value,ESCAPE_CHARACTER);}  }
class C{  public NetObjectList(){  super();}  }
class C{  public CheCompilationUnitResolver(INameEnvironment environment,IErrorHandlingPolicy policy,CompilerOptions compilerOptions,ICompilerRequestor requestor,IProblemFactory problemFactory,IProgressMonitor monitor,boolean fromJavaProject){  super(environment,policy,compilerOptions,requestor,problemFactory,monitor,fromJavaProject);}  }
class C{  public FluentTriFunction<T1,T2,T3,R> visitEvent(final Consumer<R> eventConsumer,final Consumer<Throwable> errorConsumer){  return FluentFunctions.of(null);}  }
class C{  private static void updateInvalidAndMatchedPoolsForVpool(VirtualPool vpool,List<StoragePool> matchedPools,List<StoragePool> storagePools,DbClient dbClient){  URI currentVpoolId=vpool.getId();  StringSet newMatchedPools=new StringSet();  StringSet newInvalidPools=new StringSet();  if (null != vpool.getMatchedStoragePools()) {    newMatchedPools.addAll(vpool.getMatchedStoragePools());  }  if (null != vpool.getInvalidMatchedPools()) {    newInvalidPools.addAll(vpool.getInvalidMatchedPools());  }  for (  StoragePool pool : storagePools) {    String poolIdStr=pool.getId().toString();    URIQueryResultList queryResult=new URIQueryResultList();    dbClient.queryByConstraint(ContainmentConstraint.Factory.getMatchedPoolVirtualPoolConstraint(pool.getId()),queryResult);    Iterator<URI> oldMatchedVpoolItr=queryResult.iterator();    if (!oldMatchedVpoolItr.hasNext()) {      if (matchedPools.contains(pool)) {        _logger.debug("New pool found {}",poolIdStr);        newMatchedPools.add(poolIdStr);        removeInvalidPools(vpool,newInvalidPools,poolIdStr);      }    }    if (matchedPools.contains(pool)) {      while (oldMatchedVpoolItr.hasNext()) {        URI oldMatchedVpoolURI=oldMatchedVpoolItr.next();        removeInvalidPools(vpool,newInvalidPools,poolIdStr);        if (!currentVpoolId.equals(oldMatchedVpoolURI)) {          _logger.debug("Adding pool {}",poolIdStr);          newMatchedPools.add(poolIdStr);        }      }    } else {      if (newMatchedPools.contains(poolIdStr)) {        _logger.debug("pool {} became invalid now.",poolIdStr);        newMatchedPools.remove(poolIdStr);        newInvalidPools.add(poolIdStr);      }    }  }  _logger.info(MessageFormatter.arrayFormat("Updating VPool {} with Matched Pools:{}, Invalid pools:{}",new Object[]{vpool.getId(),newMatchedPools.size(),newInvalidPools.size()}).getMessage());  vpool.addMatchedStoragePools(newMatchedPools);  vpool.addInvalidMatchedPools(newInvalidPools);}  }
class C{  private void clearNotificationInternal(){  Log.v(TAG,ACTION_CLEAR_NOTIFICATION);  NotificationManagerCompat.from(this).cancel(Constants.MOBILE_NOTIFICATION_ID);}  }
class C{  public void close() throws IOException {  in.close();  monitor.close();}  }
class C{  public void add(Parameter parameter){  Object key=parameter.getKey();  if (key != null) {    parameters.put(key,parameter);  }}  }
class C{  public void testPeek(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());  populatedQueue(SIZE,storedQueue);  int initialSize=storedQueue.size();  assertNotNull(storedQueue.peek());  assertEquals(initialSize,storedQueue.size());}  }
class C{  private int syncContactNames(Context context){  final ContentResolver contentResolver=context.getContentResolver();  final Cursor cursor=contentResolver.query(ContactNotifications.CONTENT_URI,null,null,null,null);  if (cursor == null) {    return 0;  }  if (cursor.getCount() == 0) {    return 0;  }  int count=0;  int updatedCount=0;  String id;  String contactName;  String contactLookup;  String contactId;  while (cursor.moveToNext()) {    count++;    id=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications._ID));    contactName=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_NAME));    contactId=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_ID));    contactLookup=cursor.getString(cursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_LOOKUPKEY));    ContactIdentification contactInfo=SmsPopupUtils.getPersonNameByLookup(context,contactLookup,contactId);    if (contactInfo != null) {      boolean runUpdate=false;      ContentValues vals=new ContentValues();      if (contactName == null || !contactName.equals(contactInfo.contactName)) {        vals.put(ContactNotifications.CONTACT_NAME,contactInfo.contactName);        runUpdate=true;      }      if (contactId == null || !contactId.equals(contactInfo.contactId)) {        vals.put(ContactNotifications.CONTACT_ID,contactInfo.contactId);        runUpdate=true;      }      if (contactLookup == null || !contactLookup.equals(contactInfo.contactLookup)) {        vals.put(ContactNotifications.CONTACT_LOOKUPKEY,contactInfo.contactLookup);        runUpdate=true;      }      if (runUpdate && 1 == contentResolver.update(ContactNotifications.buildContactUri(id),vals,null,null)) {        updatedCount++;      }    }  }  if (cursor != null) {    cursor.close();  }  if (BuildConfig.DEBUG)   Log.v("Sync Contacts: " + updatedCount + " / "+ count);  return updatedCount;}  }
class C{  public boolean deleteHostPort(final String xivSystem,final String hostName,final String hostPort,final String hostPortType,final Boolean forceDelete) throws Exception {  final String instanceURL=MessageFormat.format(HOST_PORT_INSTANCE_URL,xivSystem,hostPortType,hostName,hostPort);  boolean deleteSuccessful=false;  if (findAvailability(instanceURL)) {    if (forceDelete || !findAvailability(MessageFormat.format(EXPORT_VOLUME_URL + SEARCH_URL,xivSystem,HOST,hostName))) {      ResponseValidator failureStatus=executePOSTRequest(xivSystem,instanceURL,DELETE_BODY);      deleteSuccessful=true;      if (failureStatus.isFailed()) {        throw XIVRestException.exceptions.hostPortDeleteFailure(xivSystem,hostName,hostPort,failureStatus.toString());      }    } else {      _log.warn("There are some more Volume exported to Host {}. Skipping Host Port deletion.",hostName);    }  } else {    throw XIVRestException.exceptions.instanceUnavailableForDelete(xivSystem,HOSTPORT,hostName + SEPARATOR + hostPort);  }  return deleteSuccessful;}  }
class C{  public CIDFontType2(String baseName,PDFObject fontObj,PDFFontDescriptor descriptor) throws IOException {  super(baseName,fontObj,descriptor);  parseWidths(fontObj);  PDFObject systemInfoObj=fontObj.getDictRef("CIDSystemInfo");  PDFObject mapObj=fontObj.getDictRef("CIDToGIDMap");  if (mapObj != null && (mapObj.getType() == PDFObject.STREAM)) {    cidToGidMap=mapObj.getStreamBuffer();  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  VolumeSeries clone=(VolumeSeries)super.clone();  return clone;}  }
class C{  public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (authority != null) {    uri.append("//");    AUTHORITY_ENCODER.appendEncoded(uri,authority);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public final double calculateIntervalLikelihood(DemographicFunction demoFunction,double width,double timeOfPrevCoal,int lineageCount){  return calculateIntervalLikelihood(demoFunction,width,timeOfPrevCoal,lineageCount,COALESCENT);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  put(key,stream,name,contentType,autoCloseInputStreams);}  }
class C{  private static void finalizeSettings(Settings.Builder output,Terminal terminal,Path configDir){  List<String> forcedSettings=new ArrayList<>();  for (  String setting : output.internalMap().keySet()) {    if (setting.startsWith("force.")) {      forcedSettings.add(setting);    }  }  for (  String forcedSetting : forcedSettings) {    String value=output.remove(forcedSetting);    output.put(forcedSetting.substring("force.".length()),value);  }  output.replacePropertyPlaceholders();  if (output.get("name") == null) {    String name=System.getProperty("name");    if (name != null) {      output.put("name",name);    }  }  if (output.get(ClusterName.SETTING) == null) {    output.put(ClusterName.SETTING,ClusterName.DEFAULT.value());  }  String v=output.get(Settings.SETTINGS_REQUIRE_UNITS);  if (v != null) {    Settings.setSettingsRequireUnits(Booleans.parseBoolean(v,true));  }  replacePromptPlaceholders(output,terminal);  if (output.get("name") == null) {    String name=output.get("node.name");    if (name == null || name.isEmpty()) {      name=randomNodeName(configDir);    }    output.put("name",name);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (m_Train.equalHeaders(instance.dataset()) == false)   throw new Exception("Incompatible instance types\n" + m_Train.equalHeadersMsg(instance.dataset()));  if (instance.classIsMissing())   return;  m_Train.add(instance);  update_m_Attributes();}  }
class C{  public OAuthRsaSha1Signer(byte[] privateKeyBytes) throws OAuthException {  if (privateKeyBytes == null) {    throw new OAuthException("Private key bytes cannot be null");  } else   if (privateKeyBytes.length == 0) {    throw new OAuthException("Private key bytes cannot be empty");  }  try {    setPrivateKey(RsaSha1PrivateKeyHelper.getPrivateKey(privateKeyBytes));  } catch (  NoSuchAlgorithmException e) {    throw new OAuthException("Invalid private key",e);  }catch (  InvalidKeySpecException e) {    throw new OAuthException("Invalid private key",e);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__EXECUTE_CLAUSE_1:    getExecuteClause_1().clear();  getExecuteClause_1().addAll((Collection<? extends ExecuteClause_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_WHEN_1:getTraceWhen_1().clear();getTraceWhen_1().addAll((Collection<? extends TraceWhen_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_FOR_1:getTraceFor_1().clear();getTraceFor_1().addAll((Collection<? extends TraceFor_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_PERIOD_1:getTracePeriod_1().clear();getTracePeriod_1().addAll((Collection<? extends TracePeriod_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_DURING_1:getTraceDuring_1().clear();getTraceDuring_1().addAll((Collection<? extends TraceDuring_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_CASE_ACTIVATION_1:getTraceCaseActivation_1().clear();getTraceCaseActivation_1().addAll((Collection<? extends TraceCaseActivation_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_RECORD_1:getTraceRecord_1().clear();getTraceRecord_1().addAll((Collection<? extends TraceRecord_>)newValue);return;case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_LEVEL_1:getTraceLevel_1().clear();getTraceLevel_1().addAll((Collection<? extends TraceLevel_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void scale(final double scale){  this.scale=scale;  for (int i=0; i < unscaledCvt.length; i++) {    cvt[i]=(int)((scale * unscaledCvt[i]) + 0.5);  }}  }
class C{  private BasicCondition(BasicCondition condition,Assignment grounding){  variable=condition.variable;  if (variable.isUnderspecified()) {    variable=Template.create(variable.fillSlots(grounding));  }  relation=condition.relation;  templateValue=condition.templateValue;  groundValue=condition.groundValue;  if (!templateValue.getSlots().isEmpty()) {    templateValue=Template.create(templateValue.fillSlots(grounding));    if (!templateValue.isUnderspecified()) {      groundValue=ValueFactory.create(templateValue.toString());    }  }}  }
class C{  BufferedImage subImages(BufferedImage img1,BufferedImage img2){  if (img1.getHeight() != img2.getHeight() || img1.getWidth() != img2.getWidth()) {    throw new RuntimeException("Different sizes");  }  BufferedImage ret=new BufferedImage(img1.getWidth(),img1.getHeight(),img1.getType());  for (int x=0; x < ret.getWidth(); x++) {    for (int y=0; y < ret.getHeight(); y++) {      ret.setRGB(x,y,subPixels(img1.getRGB(x,y),img2.getRGB(x,y)));    }  }  return ret;}  }
class C{  public void sortByEigenValue(Comparator<Double> cmp){  if (isComplex())   throw new ArithmeticException("Eigen values can not be sorted due to complex results");  IndexTable it=new IndexTable(DoubleList.unmodifiableView(d,d.length),cmp);  for (int i=0; i < d.length; i++) {    RowColumnOps.swapCol(V,i,it.index(i));    double tmp=d[i];    d[i]=d[it.index(i)];    d[it.index(i)]=tmp;    it.swap(i,it.index(i));  }}  }
class C{  public static BaseUIPropertyCodes newInstance(String code){  BaseUIPropertyCodes returnInstance=null;  returnInstance=new BaseUIPropertyCodes();  returnInstance.setValue(code);  return returnInstance;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Deprecated public void put(Collection<Double> data){  for (  Double value : data) {    this.put(value.doubleValue());  }}  }
class C{  protected void logTimeout(){}  }
class C{  public <B>ReaderTValue<T,B> flatMapT(final Function<? super R,ReaderTValue<T,B>> mapper){  return of(run.bind(null));}  }
class C{  public static boolean stateSetMatches(int[] stateSpec,int state){  int stateSpecSize=stateSpec.length;  for (int i=0; i < stateSpecSize; i++) {    int stateSpecState=stateSpec[i];    if (stateSpecState == 0) {      return true;    }    if (stateSpecState > 0) {      if (state != stateSpecState) {        return false;      }    } else {      if (state == -stateSpecState) {        return false;      }    }  }  return true;}  }
class C{  protected void invalidateTransactionLifetimeObjects(){  invalidateSavepoints();  storedProcedureMetaData=null;}  }
class C{  public static boolean parseReadHandle(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  IElementType nextTokenType=b.lookAhead(1);  if (CONVERTABLE_TOKENS.contains(currentTokenType) && nextTokenType == OPERATOR_GT_NUMERIC) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(HANDLE);    return true;  }  return false;}  }
class C{  public void rollback(){  try {    transaction.rollback();  }  finally {    endTransaction();  }}  }
class C{  void encryptBlock(byte[] plain,int plainOffset,byte[] cipher,int cipherOffset){  expandedKey=key1;  decrypting=false;  cipherBlock(plain,plainOffset,buf1,0);  expandedKey=key2;  decrypting=true;  cipherBlock(buf1,0,buf2,0);  expandedKey=key3;  decrypting=false;  cipherBlock(buf2,0,cipher,cipherOffset);}  }
class C{  public Track queue(AudioInputStream stream) throws IOException {  Track track=new Track(stream);  queue(track);  return track;}  }
class C{  public static void handleRemoveNode(ReactShadowNode node){  node.removeAllNativeChildren();}  }
class C{  private Point2D rotate(Point2D a,Point2D center,double angle){  double resultX=center.getX() + (a.getX() - center.getX()) * Math.cos(angle) - (a.getY() - center.getY()) * Math.sin(angle);  double resultY=center.getY() + (a.getX() - center.getX()) * Math.sin(angle) + (a.getY() - center.getY()) * Math.cos(angle);  return new Point2D(resultX,resultY);}  }
class C{  public void assertTrue(boolean value,String errorMessage){  TestUtils.assertTrue(value,errorMessage);}  }
class C{  @Override public boolean isEmpty(){  return count == 0;}  }
class C{  public void removeVcenterCluster(URI clusterId,URI datacenterId,String stepId){  log.info("removeVcenterCluster {} {}",clusterId,datacenterId);  Cluster cluster=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    cluster=_dbClient.queryObject(Cluster.class,clusterId);    vcenterController.removeVcenterCluster(datacenterId,clusterId);    log.info("Remove vCenter cluster success");    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VcenterControllerException e) {    log.warn("VcenterControllerException when trying to removeVcenterCluster: " + e.getMessage(),e);    if (e.getCause() instanceof VcenterObjectNotFoundException) {      log.info("did not find the datacenter or cluster, considering success");      WorkflowStepCompleter.stepSucceded(stepId);    } else {      log.error("failure " + e);      WorkflowStepCompleter.stepFailed(stepId,e);    }  }catch (  InternalException e) {    log.error("InternalException when trying to removeVcenterCluster: " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,e);  }catch (  Exception e) {    log.error("unexpected exception " + e);    ServiceCoded serviceCoded=ComputeSystemControllerException.exceptions.unableToRemoveVcenterCluster(cluster != null ? cluster.getLabel() : clusterId.toString(),e);    WorkflowStepCompleter.stepFailed(stepId,serviceCoded);  }}  }
class C{  public UUID subjectId(){  return subjId;}  }
class C{  private static void uaRIMinLt(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminLt(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminLt(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  private void paintCloseHover(Graphics2D g,JComponent c,int width,int height){  paintClose(g,c,width,height,hover);}  }
class C{  public final int ordering(){  if (m_AttributeMetaInfo == null) {    return ORDERING_ORDERED;  }  return m_AttributeMetaInfo.m_Ordering;}  }
class C{  protected byte[] wrap(){  byte[] res=recordProtocol.wrap(ContentType.ALERT,alert,0,2);  return res;}  }
class C{  public static boolean isValidEmergencyContact(Context context,Uri contactUri){  return contactUri != null && contactExists(context,contactUri);}  }
class C{  protected void restoreSelectedWidgetsStyle(){  for (  Widget widget : context.selectedWidgets) {    SavedWidgetInfo info=savedWidgetInfoMap.get(widget);    widget.getElement().getStyle().setProperty("margin",info.initialDraggableMargin);  }}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType,int scale) throws SQLException {  super.registerOutParameter(parameterIndex,translateAndCheckSqlType(sqlType),scale);}  }
class C{  public PersonUser findPersonUserByObjectId(String tenantName,String UserObjectId) throws Exception {  return getService().findPersonUserByObjectId(tenantName,UserObjectId,this.getServiceContext());}  }
class C{  public boolean close(){  Preconditions.checkState(!m_closed,"IE00203: Module content was closed before.");  if (!m_functions.close()) {    return false;  }  if (!m_viewContainer.close()) {    return false;  }  m_closed=true;  return true;}  }
class C{  VcfRecord[] mergeRecords(VcfRecord[] records,VcfHeader[] headers,VcfHeader destHeader,Set<String> unmergeableFormatFields,boolean preserveFormats){  assert records.length == headers.length;  final MultiMap<Integer,VcfRecord> recordSets=new MultiMap<>(true);  final MultiMap<Integer,VcfHeader> headerSets=new MultiMap<>(true);  for (int i=0; i < records.length; i++) {    recordSets.put(records[i].getLength(),records[i]);    headerSets.put(records[i].getLength(),headers[i]);  }  final ArrayList<VcfRecord> ret=new ArrayList<>();  for (  Integer key : recordSets.keySet()) {    final Collection<VcfRecord> recs=recordSets.get(key);    final Collection<VcfHeader> heads=headerSets.get(key);    final VcfRecord[] recsArray=recs.toArray(new VcfRecord[recs.size()]);    final VcfHeader[] headsArray=heads.toArray(new VcfHeader[heads.size()]);    final VcfRecord merged=mergeRecordsWithSameRef(recsArray,headsArray,destHeader,unmergeableFormatFields,!preserveFormats);    if (merged != null) {      ret.add(merged);    } else {      final VcfRecord[] recHolder=new VcfRecord[1];      final VcfHeader[] headHolder=new VcfHeader[1];      for (int i=0; i < recsArray.length; i++) {        recHolder[0]=recsArray[i];        headHolder[0]=headsArray[i];        ret.add(mergeRecordsWithSameRef(recHolder,headHolder,destHeader,unmergeableFormatFields,!preserveFormats));      }    }  }  return ret.toArray(new VcfRecord[ret.size()]);}  }
class C{  private void initResourceBundle(UIDefaults table){  table.addResourceBundle("com.sun.swing.internal.plaf.metal.resources.metal");}  }
class C{  @Override public Experiment read(File file){  try {    return (Experiment)SerializationHelper.read(file.getAbsolutePath());  } catch (  Exception e) {    handleException("Failed to read experiment from: " + file,e);    return null;  }}  }
class C{  private static Classifier.Visibility parseClassifierVisibility(String str){switch (str) {case "pub":    return Classifier.Visibility.PUBLIC;case "pub@":  return Classifier.Visibility.PUBLIC_INTERNAL;case "proj":return Classifier.Visibility.PROJECT;case "priv":return Classifier.Visibility.PRIVATE;default :throw new IllegalArgumentException("Unexpected type visibility: '" + str + "'");}}  }
class C{  public static boolean isDebuggingEnabled(){  return isDebuggingEnabled;}  }
class C{  private String createIconXML(String iconResourceName){  return "<icon name='" + iconResourceName + "'/>";}  }
class C{  public void attachRequestHandle(RequestHandle requestHandle){  if (false) {    Log.v(LOGTAG,"TestEventHandler.attachRequestHandle(): " + "requestHandle: " + requestHandle);  }  mRequestHandle=requestHandle;}  }
class C{  public static void copyResourcesToDirectory(JarFile fromJar,String jarDir,String destDir) throws IOException {  for (Enumeration<JarEntry> entries=fromJar.entries(); entries.hasMoreElements(); ) {    JarEntry entry=entries.nextElement();    if (entry.getName().startsWith(jarDir + "/") && !entry.isDirectory()) {      File dest=new File(destDir + "/" + entry.getName().substring(jarDir.length() + 1));      File parent=dest.getParentFile();      if (parent != null) {        parent.mkdirs();      }      FileOutputStream out=new FileOutputStream(dest);      InputStream in=fromJar.getInputStream(entry);      try {        byte[] buffer=new byte[8 * 1024];        int s=0;        while ((s=in.read(buffer)) > 0) {          out.write(buffer,0,s);        }      } catch (      IOException e) {        throw new IOException("Could not copy asset from jar file",e);      } finally {        try {          in.close();        } catch (        IOException ignored) {        }        try {          out.close();        } catch (        IOException ignored) {        }      }    }  }}  }
class C{  public boolean isPriority(){  return _isPriority;}  }
class C{  private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  public void resetMustSend(){  for (int i=0; i < outputBytes[nodeType]; i++) {    if (outputByteChanged[i]) {      return;    }  }  super.resetMustSend();}  }
class C{  public void write(BufferedRandomAccessFile raf) throws IOException {  int len=this.word.length;  raf.writeNat(len);  for (int i=0; i < len; i++) {    raf.writeLong(this.word[i]);  }}  }
class C{  public ProcessImage addProcessImage(int unitId,ProcessImage processImage){  return processImages.put(unitId,processImage);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  Util.notNull("clazz",clazz);  PersistenceUnitHandler handler=null;  ArrayList<PersistenceUnit> fieldAnnotations=new ArrayList<>();  ArrayList<Field> fields=new ArrayList<>();  for (  Field field : clazz.getDeclaredFields()) {    PersistenceUnit fieldAnnotation=field.getAnnotation(PersistenceUnit.class);    if (fieldAnnotation != null) {      fieldAnnotations.add(fieldAnnotation);      fields.add(field);    }  }  ArrayList<PersistenceUnit> methodAnnotations=new ArrayList<>();  ArrayList<Method> methods=new ArrayList<>();  for (  Method method : clazz.getDeclaredMethods()) {    PersistenceUnit methodAnnotation=method.getAnnotation(PersistenceUnit.class);    if (methodAnnotation != null) {      methodAnnotations.add(methodAnnotation);      methods.add(method);    }  }  if (!fieldAnnotations.isEmpty() || !methodAnnotations.isEmpty()) {    handler=new PersistenceUnitHandler(methods.toArray(new Method[0]),methodAnnotations.toArray(new PersistenceUnit[0]),fields.toArray(new Field[0]),fieldAnnotations.toArray(new PersistenceUnit[0]));  }  return handler;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void putUnsignedInt(ByteBuffer bb,long v,int offset){  bb.putInt(offset,(int)(v & 0xffffffffL));}  }
class C{  public final void lazySet(double newValue){  set(newValue);}  }
class C{  public ObjectParameter(OptionID optionID,Class<?> restrictionClass,boolean optional){  super(optionID,restrictionClass,optional);}  }
class C{  public ActionFilter[] filters(){  return filters;}  }
class C{  public void error(String message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  final public void evictAll(final boolean clearRefs){  if (clearRefs) {    while (!isEmpty()) {      evict();    }  } else {    final int size=size();    for (int n=0; n < size; n++) {      final T ref=get(n);      if (listener != null) {        listener.evicted(this,ref);      }    }  }}  }
class C{  public boolean hasPlayerMovedAway(){  Player player=SingletonRepository.getRuleProcessor().getPlayer(playerName);  if (player == null) {    return true;  }  if (!player.getZone().getName().equals(zoneName)) {    return true;  }  if (player.getX() != x) {    return true;  }  if (player.getY() != y) {    return true;  }  return false;}  }
class C{  private void calculateInsertionCostOnFirstRow(RegexGraph graph,final double[][][] matrix){  final int FIRST_ROW=0;  matrix[FIRST_ROW][0][0]=0;  matrix[FIRST_ROW][0][1]=0;  matrix[FIRST_ROW][0][2]=0;  for (int col=1; col < graph.getNumberOfColumns(); col++) {    double min=Double.MAX_VALUE;    for (    GraphTransition t : graph.getIncomingTransitions(FIRST_ROW,col)) {      assert t.type.equals(GraphTransition.TransitionType.INSERTION) || t.type.equals(GraphTransition.TransitionType.PHANTOM);      assert t.fromRow == 0;      int otherCol=graph.getColumn(t.fromState);      if (col == otherCol) {        continue;      }      double otherCost=matrix[FIRST_ROW][otherCol][2];      min=Math.min(min,getSubPathCost(otherCost,t.cost));    }    matrix[FIRST_ROW][col][0]=Double.MAX_VALUE;    matrix[FIRST_ROW][col][1]=Double.MAX_VALUE;    matrix[FIRST_ROW][col][2]=min;  }}  }
class C{  public void mergeFromOsmPois(List<Poi> remotePois,Box box){  List<Poi> toMergePois=new ArrayList<>();  Map<String,Poi> remotePoisMap=new HashMap<>();  for (  Poi poi : remotePois) {    remotePoisMap.put(poi.getBackendId(),poi);  }  List<Poi> localPois=poiDao.queryForAllInRect(box);  Map<String,Poi> localPoisMap=new ConcurrentHashMap<>();  for (  Poi localPoi : localPois) {    localPoisMap.put(localPoi.getBackendId(),localPoi);  }  for (  Poi remotePoi : remotePois) {    Poi localPoi=localPoisMap.remove(remotePoi.getBackendId());    Long localVersion=-1L;    if (localPoi != null && localPoi.getVersion() != null) {      localVersion=Long.valueOf(localPoi.getVersion());    }    if (Long.valueOf(remotePoi.getVersion()) > localVersion) {      if (localPoi != null) {        remotePoi.setId(localPoi.getId());      }      toMergePois.add(remotePoi);    }  }  poiDao.delete(localPoisMap.values());  savePois(toMergePois);}  }
class C{  public void delete(){  if (originalEntry != null) {    try {      originalEntry.delete();    } catch (    ServiceException e) {      SpreadsheetApiDemo.showErrorBox(e);    }catch (    IOException e) {      SpreadsheetApiDemo.showErrorBox(e);    }  }  originalEntry=null;  newContents=null;}  }
class C{  public CommunicationException(){  super();}  }
class C{  public static Date add(final Date inputDate,final int addType,final int addAmount){  return DateUtils.add(inputDate,addType,addAmount);}  }
class C{  public FileSystemResource(String location){  this.location=new File(location);}  }
class C{  private static GatewayReceiver createGatewayReceiver(Cache cache,GatewayReceiverFunctionArgs gatewayReceiverCreateArgs){  GatewayReceiverFactory gatewayReceiverFactory=cache.createGatewayReceiverFactory();  Integer startPort=gatewayReceiverCreateArgs.getStartPort();  if (startPort != null) {    gatewayReceiverFactory.setStartPort(startPort);  }  Integer endPort=gatewayReceiverCreateArgs.getEndPort();  if (endPort != null) {    gatewayReceiverFactory.setEndPort(endPort);  }  String bindAddress=gatewayReceiverCreateArgs.getBindAddress();  if (bindAddress != null) {    gatewayReceiverFactory.setBindAddress(bindAddress);  }  Integer maxTimeBetweenPings=gatewayReceiverCreateArgs.getMaximumTimeBetweenPings();  if (maxTimeBetweenPings != null) {    gatewayReceiverFactory.setMaximumTimeBetweenPings(maxTimeBetweenPings);  }  Integer socketBufferSize=gatewayReceiverCreateArgs.getSocketBufferSize();  if (socketBufferSize != null) {    gatewayReceiverFactory.setSocketBufferSize(socketBufferSize);  }  Boolean manualStart=gatewayReceiverCreateArgs.isManualStart();  if (manualStart != null) {    gatewayReceiverFactory.setManualStart(manualStart);  }  String[] gatewayTransportFilters=gatewayReceiverCreateArgs.getGatewayTransportFilters();  if (gatewayTransportFilters != null) {    for (    String gatewayTransportFilter : gatewayTransportFilters) {      Class gatewayTransportFilterKlass=forName(gatewayTransportFilter,CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER);      gatewayReceiverFactory.addGatewayTransportFilter((GatewayTransportFilter)newInstance(gatewayTransportFilterKlass,CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER));    }  }  return gatewayReceiverFactory.create();}  }
class C{  public void shouldHandleRejectedRetryExecution() throws Throwable {  ScheduledExecutorService executor=Executors.newSingleThreadScheduledExecutor();  AtomicInteger counter=new AtomicInteger();  @SuppressWarnings("unchecked") FailsafeFuture<String> future=Failsafe.with(new RetryPolicy().retryWhen(null).retryOn(Exception.class)).with(executor).get(null);  Thread.sleep(150);  executor.shutdownNow();  assertThrows(null,ExecutionException.class,RejectedExecutionException.class);  assertEquals(counter.get(),1,"Callable should have been executed before executor was shutdown");}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  public long inc(){  lock.lock();  try {    final long c=this.counter.incrementAndGet();    if (c <= 0)     throw new IllegalStateException(toString());    if (log.isDebugEnabled())     log.debug(toString());    return c;  }  finally {    lock.unlock();  }}  }
class C{  public static Object max(Collection coll,Comparator comp){  if (comp == null) {    return max(coll);  }  Iterator i=coll.iterator();  Object candidate=i.next();  while (i.hasNext()) {    Object next=i.next();    if (comp.compare(next,candidate) > 0)     candidate=next;  }  return candidate;}  }
