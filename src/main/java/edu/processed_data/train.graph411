class C{  public IStatementBuffer<S> newStatementBuffer(){  return newStatementBuffer(null);}  }
class C{  public void startDTD(String arg0,String arg1,String arg2) throws SAXException {}  }
class C{  public void addPrimaryKeyField(String fieldName,Class type){  FieldDefinition fieldDef=new FieldDefinition(fieldName,type);  fieldDef.setIsPrimaryKey(true);  addField(fieldDef);}  }
class C{  public int lastViewablePageIndex(){  return getSwipeToDismiss() ? Math.abs(lastPageIndex() - 1) : lastPageIndex();}  }
class C{  ExpectedExceptionCheck(Throwable exception,int statementIndex,String catchClassName){  super(exception,statementIndex,catchClassName);}  }
class C{  public static Color parseColor(String colorString) throws NumberFormatException {  return parseColor(colorString,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node childNode;  Node textNode;  NodeList textList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  childNode=employeeList.item(1);  textNode=childNode.getFirstChild();  textList=textNode.getChildNodes();  assertSize("nodelistIndexGetLengthOfEmptyListAssert",0,textList);}  }
class C{  public void endCreateCQSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(createCQSendInProgressId,-1);  int endCreateCQSendId;  if (failed) {    endCreateCQSendId=createCQSendFailedId;  } else {    endCreateCQSendId=createCQSendId;  }  this.sendStats.incInt(endCreateCQSendId,1);  this.stats.incLong(createCQSendDurationId,duration);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return (true);  }  if (!(obj instanceof ServicePermission)) {    return (false);  }  ServicePermission p=(ServicePermission)obj;  return ((action_mask == p.action_mask) && getName().equals(p.getName()));}  }
class C{  public final void writeBytes(String str) throws IOException {  int strlen=str.length();  if (strlen > 0) {    if (this.buffer.hasArray()) {      int pos=this.buffer.position();      str.getBytes(0,strlen,this.buffer.array(),this.buffer.arrayOffset() + pos);      this.buffer.position(pos + strlen);    } else {      byte[] bytes=new byte[strlen];      str.getBytes(0,strlen,bytes,0);      this.buffer.put(bytes);    }  }}  }
class C{  public static InputSource createInputSource(String s){  try {    return new InputSource(new ByteArrayInputStream(s.getBytes("UTF-8")));  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean add(String subtype){  if (subtype == null || this.contains(subtype)) {    return false;  }  _entrySet.add(new SubTypeEntry(subtype));  return true;}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={0};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private void startUnsubscriptionForMonitoring(Set<String> passiveProvidersChangeSet){  for (  String smisProviderUri : passiveProvidersChangeSet) {    if (_connectionFactory.unsubscribeSMIProviderConnection(smisProviderUri)) {      ACTIVE_SMIS_PROVIDERS_CACHE.remove(smisProviderUri);      _logger.info("Cleared existing subscription for the passive SMI-S Provider :{}",smisProviderUri);    } else {      _logger.error("Un Subscription to the passive SMIS provider {} is failed. " + "Controller will try to un-subscribe in the next scheduled cycle",smisProviderUri);    }  }}  }
class C{  public static void offsetNeuronGroup(NeuronGroup group1,NeuronGroup group2,Direction direction,double amount){  double targetX=0;  double targetY=0;  if (direction == Direction.NORTH) {    targetX=group1.getCenterX();    targetY=group1.getCenterY() - (group1.getHeight() / 2) - amount- (group2.getHeight() / 2);  } else   if (direction == Direction.SOUTH) {    targetX=group1.getCenterX();    targetY=group1.getCenterY() + (group1.getHeight() / 2) + amount+ (group2.getHeight() / 2);  } else   if (direction == Direction.EAST) {    targetX=group1.getCenterX() + (group1.getWidth() / 2) + amount+ (group2.getWidth() / 2);    targetY=group1.getCenterY();  } else   if (direction == Direction.WEST) {    targetX=group1.getCenterX() - (group1.getWidth() / 2) - amount- (group2.getWidth() / 2);    targetY=group1.getCenterY();  }  double offsetX=targetX - group2.getCenterX();  double offsetY=targetY - group2.getCenterY();  group2.offset(offsetX,offsetY);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Node findNode(String id){  List<Node> list=sqlTemplate.query(getSql("selectNodePrefixSql","findNodeSql"),new NodeRowMapper(),id);  return (Node)getFirstEntry(list);}  }
class C{  public Boolean isPackingList(){  return packingList;}  }
class C{  @SuppressWarnings("unchecked") public void updateTarget(final Target updatedTarget){  if (updatedTarget != null) {    final Item item=getItem(updatedTarget.getTargetIdName());    item.getItemProperty(SPUILabelDefinitions.VAR_NAME).setValue(updatedTarget.getName());    item.getItemProperty(SPUILabelDefinitions.LAST_QUERY_DATE).setValue(updatedTarget.getTargetInfo().getLastTargetQuery());    item.getItemProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_BY).setValue(UserDetailsFormatter.loadAndFormatLastModifiedBy(updatedTarget));    item.getItemProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_DATE).setValue(SPDateTimeUtil.getFormattedDate(updatedTarget.getLastModifiedAt()));    item.getItemProperty(SPUILabelDefinitions.VAR_DESC).setValue(updatedTarget.getDescription());    item.getItemProperty(SPUILabelDefinitions.VAR_TARGET_STATUS).setValue(updatedTarget.getTargetInfo().getUpdateStatus());  }}  }
class C{  public static void runSearch(FlagConfig flagConfig) throws IllegalArgumentException {  if (flagConfig == null) {    throw new NullPointerException("flagConfig cannot be null");  }  if (flagConfig.remainingArgs == null) {    throw new IllegalArgumentException("No query terms left after flag parsing!");  }  String[] queryArgs=flagConfig.remainingArgs;  VectorStore queryVecReader=null;  VectorStore boundVecReader=null;  VectorStore elementalVecReader=null, semanticVecReader=null, predicateVecReader=null;  VectorStore searchVecReader=null;  try {    if (!flagConfig.elementalvectorfile().equals("elementalvectors") && !flagConfig.semanticvectorfile().equals("semanticvectors") && !flagConfig.elementalpredicatevectorfile().equals("predicatevectors")) {      VerbatimLogger.info("Opening elemental query vector store from file: " + flagConfig.elementalvectorfile() + "\n");      VerbatimLogger.info("Opening semantic query vector store from file: " + flagConfig.semanticvectorfile() + "\n");      VerbatimLogger.info("Opening predicate query vector store from file: " + flagConfig.elementalpredicatevectorfile() + "\n");      if (flagConfig.elementalvectorfile().equals("deterministic")) {        if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.ORTHOGRAPHIC))         elementalVecReader=new VectorStoreOrthographical(flagConfig); else         if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.CONTENTHASH))         elementalVecReader=new VectorStoreDeterministic(flagConfig); else         VerbatimLogger.info("Please select either -elementalmethod orthographic OR -elementalmethod contenthash depending upon the deterministic approach you would like used.");      } else {        elementalVecReader=new VectorStoreRAM(flagConfig);        ((VectorStoreRAM)elementalVecReader).initFromFile(flagConfig.elementalvectorfile());      }      semanticVecReader=new VectorStoreRAM(flagConfig);      ((VectorStoreRAM)semanticVecReader).initFromFile(flagConfig.semanticvectorfile());      predicateVecReader=new VectorStoreRAM(flagConfig);      ((VectorStoreRAM)predicateVecReader).initFromFile(flagConfig.elementalpredicatevectorfile());    } else {      VerbatimLogger.info("Opening query vector store from file: " + flagConfig.queryvectorfile() + "\n");      if (flagConfig.queryvectorfile().equals("deterministic")) {        if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.ORTHOGRAPHIC))         queryVecReader=new VectorStoreOrthographical(flagConfig); else         if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.CONTENTHASH))         queryVecReader=new VectorStoreDeterministic(flagConfig); else         VerbatimLogger.info("Please select either -elementalmethod orthographic OR -elementalmethod contenthash depending upon the deterministic approach you would like used.");      } else {        queryVecReader=new VectorStoreRAM(flagConfig);        ((VectorStoreRAM)queryVecReader).initFromFile(flagConfig.queryvectorfile());      }    }    if (flagConfig.boundvectorfile().length() > 0) {      VerbatimLogger.info("Opening second query vector store from file: " + flagConfig.boundvectorfile() + "\n");      boundVecReader=new VectorStoreRAM(flagConfig);      ((VectorStoreRAM)boundVecReader).initFromFile(flagConfig.boundvectorfile());    }    if (flagConfig.queryvectorfile().equals(flagConfig.searchvectorfile()) || flagConfig.searchvectorfile().isEmpty()) {      searchVecReader=queryVecReader;    } else {      VerbatimLogger.info("Opening search vector store from file: " + flagConfig.searchvectorfile() + "\n");      searchVecReader=new VectorStoreRAM(flagConfig);      ((VectorStoreRAM)searchVecReader).initFromFile(flagConfig.searchvectorfile());    }    if (!flagConfig.luceneindexpath().isEmpty()) {      try {        luceneUtils=new LuceneUtils(flagConfig);      } catch (      IOException e) {        logger.warning("Couldn't open Lucene index at " + flagConfig.luceneindexpath() + ". Will continue without term weighting.");      }    }  } catch (  IOException e) {    e.printStackTrace();  }  try {    BufferedReader queryReader=new BufferedReader(new FileReader(new File(queryArgs[0])));    String queryString=queryReader.readLine();    int qcnt=0;    while (queryString != null) {      ArrayList<String> queryTerms=new ArrayList<String>();      qcnt++;      if (!flagConfig.searchtype().equals(pitt.search.semanticvectors.Search.SearchType.ANALOGY)) {        StandardAnalyzer analyzer=new StandardAnalyzer(new CharArraySet(new ArrayList<String>(),true));        TokenStream stream=analyzer.tokenStream(null,new StringReader(queryString));        CharTermAttribute cattr=stream.addAttribute(CharTermAttribute.class);        stream.reset();        while (stream.incrementToken()) {          String term=cattr.toString();          if ((luceneUtils != null && !luceneUtils.stoplistContains(term)) || luceneUtils == null) {            if (!flagConfig.matchcase())             term=term.toLowerCase();            queryTerms.add(term);          }        }        stream.end();        stream.close();        analyzer.close();      } else       queryTerms.add(queryString);      queryArgs=queryTerms.toArray(new String[0]);      VectorSearcher vecSearcher=null;      LinkedList<SearchResult> results;      String[] splitArgs=null;      boolean allTermsRepresented=true;      VerbatimLogger.info("Searching term vectors, searchtype " + flagConfig.searchtype() + "\n");      try {switch (flagConfig.searchtype()) {case SUM:          vecSearcher=new VectorSearcher.VectorSearcherCosine(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);        break;case SUBSPACE:      vecSearcher=new VectorSearcher.VectorSearcherSubspaceSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);    break;case MAXSIM:  vecSearcher=new VectorSearcher.VectorSearcherMaxSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case MINSIM:vecSearcher=new VectorSearcher.VectorSearcherMinSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case BOUNDPRODUCT:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundProduct(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundProduct(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case BOUNDPRODUCTSUBSPACE:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundProductSubSpace(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundProductSubSpace(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case BOUNDMINIMUM:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundMinimum(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundMinimum(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case PERMUTATION:vecSearcher=new VectorSearcher.VectorSearcherPerm(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case BALANCEDPERMUTATION:vecSearcher=new VectorSearcher.BalancedVectorSearcherPerm(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case ANALOGY:splitArgs=queryArgs[0].split(" ");for (String searchTerm : splitArgs) if (!queryVecReader.containsVector(searchTerm)) allTermsRepresented=false;vecSearcher=new VectorSearcher.AnalogySearcher(queryVecReader,searchVecReader,luceneUtils,flagConfig,splitArgs);break;case LUCENE:vecSearcher=new VectorSearcher.VectorSearcherLucene(luceneUtils,flagConfig,queryArgs);break;case PRINTQUERY:Vector queryVector=CompoundVectorBuilder.getQueryVector(queryVecReader,luceneUtils,flagConfig,queryArgs);System.out.println(queryVector.toString());break;default :throw new IllegalArgumentException("Unknown search type: " + flagConfig.searchtype());}} catch (ZeroVectorException zve) {logger.info(zve.getMessage());}results=new LinkedList<SearchResult>();try {if (!allTermsRepresented) System.out.println("0: Missing term(s)"); else results=vecSearcher.getNearestNeighbors(flagConfig.numsearchresults());} catch (Exception e) {}int cnt=0;if (results.size() > 0) {VerbatimLogger.info("Search output follows ...\n");for (SearchResult result : results) {boolean printResult=true;if (flagConfig.searchtype() == Search.SearchType.ANALOGY) {for (String searchTerm : splitArgs) {if (result.getObjectVector().getObject().toString().equals(searchTerm)) printResult=false;}}if (printResult) {if (flagConfig.treceval() != -1) {System.out.println(String.format("%s\t%s\t%s\t%s\t%f\t%s",qcnt,"Q0",result.getObjectVector().getObject().toString(),++cnt,result.getScore(),"DEFAULT"));} else System.out.println(String.format("%f:%s",result.getScore(),result.getObjectVector().getObject().toString()));if (flagConfig.searchtype() == Search.SearchType.ANALOGY) {break;}}}}queryString=queryReader.readLine();}queryReader.close();} catch (FileNotFoundException e1) {e1.printStackTrace();}catch (IOException e) {e.printStackTrace();}}  }
class C{  public boolean isPatchSetLocked(ReviewDb db) throws OrmException {  if (getChange().getStatus() == Change.Status.MERGED) {    return false;  }  for (  PatchSetApproval ap : approvalsUtil.byPatchSet(db,this,getChange().currentPatchSetId())) {    LabelType type=getLabelTypes().byLabel(ap.getLabel());    if (type != null && ap.getValue() == 1 && type.getFunctionName().equalsIgnoreCase("PatchSetLock")) {      return true;    }  }  return false;}  }
class C{  private void importNamed(DiagnosticPosition pos,Symbol tsym,Env<AttrContext> env){  if (tsym.kind == TYP && chk.checkUniqueImport(pos,tsym,env.toplevel.namedImportScope))   env.toplevel.namedImportScope.enter(tsym,tsym.owner.members());}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public double[] column(){  double scale=scale();  double[] y=lp.dual();  for (int i=0; i < m; i++)   y[i]/=scale;  return y;}  }
class C{  public JCheckBoxMenuItem createJCheckBoxMenuItem(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JCheckBoxMenuItem result;  result=new JCheckBoxMenuItem(getSpecializedString(name + TEXT_SUFFIX,specialization));  initializeJMenuItem(result,name,specialization);  try {    result.setSelected(getSpecializedBoolean(name + SELECTED_SUFFIX,specialization));  } catch (  MissingResourceException e) {  }  return result;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WLocation.init");}  }
class C{  public void onUploadCompletion(){  final TargetBulkUpload targetBulkUpload=managementUIState.getTargetTableFilters().getBulkUpload();  final String targetCountLabel=getFormattedCountLabelValue(targetBulkUpload.getSucessfulUploadCount(),targetBulkUpload.getFailedUploadCount());  getTargetsCountLabel().setVisible(true);  getTargetsCountLabel().setCaption(targetCountLabel);  getBulkUploader().getUpload().setEnabled(true);  closeButton.setEnabled(true);  minimizeButton.setEnabled(false);}  }
class C{  public static void create_app(PackageManager pacman,String package_name){  if (pacman == null) {    Log.e(MainActivity.TAG,"[InstalledApp.create_app] pacman is null. " + "Cannot obtain app information.");    return;  }  try {    PackageInfo pi=pacman.getPackageInfo(package_name,PackageManager.GET_SIGNATURES);    _create_application(pacman,pi);  } catch (  PackageManager.NameNotFoundException e) {    Log.v(MainActivity.TAG,"[InstalledApp.create_app] Trying to create" + package_name + ", but no package on the system exists by that name.");  }}  }
class C{  public Builder mutable(){  return new Builder(this);}  }
class C{  void addEncoder(final MediaEncoder encoder){  if (encoder instanceof MediaVideoEncoder) {    if (mVideoEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mVideoEncoder=encoder;  } else   if (encoder instanceof MediaAudioEncoder) {    if (mAudioEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mAudioEncoder=encoder;  } else   throw new IllegalArgumentException("unsupported encoder");  mEncoderCount=(mVideoEncoder != null ? 1 : 0) + (mAudioEncoder != null ? 1 : 0);}  }
class C{  protected boolean findLine(int pos){  if (pos == Position.NOPOS)   return false;  try {    if (buf == null && refBuf != null)     buf=refBuf.get();    if (buf == null) {      buf=initBuf(fileObject);      lineStart=0;      line=1;    } else     if (lineStart > pos) {      lineStart=0;      line=1;    }    int bp=lineStart;    while (bp < bufLen && bp < pos) {switch (buf[bp++]) {case CR:        if (bp < bufLen && buf[bp] == LF)         bp++;      line++;    lineStart=bp;  break;case LF:line++;lineStart=bp;break;}}return bp <= bufLen;} catch (IOException e) {log.directError("source.unavailable");buf=new char[0];return false;}}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public boolean start(){  threadChecker.checkIsOnValidThread();  Log.d(TAG,"start" + AppRTCUtils.getThreadInfo());  if (!initDefaultSensor()) {    return false;  }  sensorManager.registerListener(this,proximitySensor,SensorManager.SENSOR_DELAY_NORMAL);  return true;}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NodeList applyTo(String xpathSpec,Element elem){  return new NodeList(XPathCache.getXPath(xpathSpec).applyTo(elem),false);}  }
class C{  public ScalingMethods(){  try {    URL url=getClass().getResource("images/BB.jpg");    picture=ImageIO.read(url);    scaleW=(int)(SCALE_FACTOR * picture.getWidth());    scaleH=(int)(SCALE_FACTOR * picture.getHeight());    setPreferredSize(new Dimension(PADDING + (5 * (scaleW + PADDING)),scaleH + (2 * PADDING)));  } catch (  Exception e) {    System.out.println("Problem reading image file: " + e);    System.exit(0);  }}  }
class C{  @Override public Map<String,Long> accumulate(Map<String,Long> accumulatedValue,CompletionCandidate input){  accumulatedValue.put(input.getValue(),input.getCount());  return accumulatedValue;}  }
class C{  public Nystrom(KernelTrick k,int basisSize){  this(k,basisSize,SamplingMethod.UNIFORM,1e-5,false);}  }
class C{  public static void mergeSort(short[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  short aux[]=(short[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex);}  }
class C{  protected void processCloudletPause(int cloudletId,int userId,int vmId,int containerId,boolean ack){  boolean status=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().cloudletPause(cloudletId);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (status) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(userId,CloudSimTags.CLOUDLET_PAUSE_ACK,data);  }}  }
class C{  public void testGetLinkTravelTime_FilterDefaultModes(){  Network network=NetworkUtils.createNetwork();  TravelTimeCalculatorConfigGroup config=new TravelTimeCalculatorConfigGroup();  config.setTraveltimeBinSize(900);  config.setFilterModes(true);  TravelTimeCalculator ttc=new TravelTimeCalculator(network,config);  Node n1=network.getFactory().createNode(Id.create(1,Node.class),new Coord(0,0));  Node n2=network.getFactory().createNode(Id.create(2,Node.class),new Coord(1000,0));  Node n3=network.getFactory().createNode(Id.create(3,Node.class),new Coord(2000,0));  network.addNode(n1);  network.addNode(n2);  network.addNode(n3);  Link link1=network.getFactory().createLink(Id.create(1,Link.class),n1,n2);  Link link2=network.getFactory().createLink(Id.create(2,Link.class),n2,n3);  network.addLink(link1);  network.addLink(link2);  Id<Person> agId1=Id.create(1510,Person.class);  Id<Person> agId2=Id.create(1511,Person.class);  Id<Vehicle> vehId1=Id.create(1980,Vehicle.class);  Id<Vehicle> vehId2=Id.create(1981,Vehicle.class);  ttc.handleEvent(new VehicleEntersTrafficEvent(90,agId1,link1.getId(),vehId1,TransportMode.car,1.0));  ttc.handleEvent(new VehicleEntersTrafficEvent(100,agId2,link1.getId(),vehId2,TransportMode.walk,1.0));  ttc.handleEvent(new LinkLeaveEvent(100,vehId1,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(100,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(110,vehId2,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(110,vehId2,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(200,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(410,vehId2,link2.getId()));  Assert.assertEquals("Filtering analyzed transport modes is enabled, but no modes set. Therefore, use default (=car)",100.0,ttc.getLinkTravelTimes().getLinkTravelTime(link2,200,null,null),1e-8);}  }
class C{  public boolean hasThumbnail(){  return hasExtension(SidewikiThumbnail.class);}  }
class C{  public void test_commonTest_01(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLSessionContext slsc=ssl.engineGetClientSessionContext();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLSessionContext slsc=ssl.engineGetServerSessionContext();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLServerSocketFactory sssf=ssl.engineGetServerSocketFactory();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLSocketFactory ssf=ssl.engineGetSocketFactory();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  public final void rotZ(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=cosAngle;  this.m01=-sinAngle;  this.m02=0.0;  this.m10=sinAngle;  this.m11=cosAngle;  this.m12=0.0;  this.m20=0.0;  this.m21=0.0;  this.m22=1.0;}  }
class C{  protected boolean isArrayContentDetail(){  return arrayContentDetail;}  }
class C{  public static String unicode2html(final String text,final boolean amp){  return unicode2html(text,amp,true);}  }
class C{  public static final DataFlavor selectBestTextFlavor(DataFlavor[] availableFlavors){  if (availableFlavors == null || availableFlavors.length == 0) {    return null;  }  if (textFlavorComparator == null) {    textFlavorComparator=new TextFlavorComparator();  }  DataFlavor bestFlavor=(DataFlavor)Collections.max(Arrays.asList(availableFlavors),textFlavorComparator);  if (!bestFlavor.isFlavorTextType()) {    return null;  }  return bestFlavor;}  }
class C{  public static List<DataflowPackage> stageClasspathElements(Collection<String> classpathElements,String stagingPath){  return stageClasspathElements(classpathElements,stagingPath,Sleeper.DEFAULT);}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public int appendData(DataSource dataSource,int length,boolean allowEndOfInput) throws IOException {  length=prepareForAppend(length);  int bytesAppended=dataSource.read(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),length);  if (bytesAppended == C.RESULT_END_OF_INPUT) {    if (allowEndOfInput) {      return C.RESULT_END_OF_INPUT;    }    throw new EOFException();  }  lastAllocationOffset+=bytesAppended;  totalBytesWritten+=bytesAppended;  return bytesAppended;}  }
class C{  public InternalError(String message){  super(message);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforerefchildnonexistent.class,args);}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2,splitSize=2) @Override public long findMaximumInEnumeration(Enumeration<Long> input){  assert input != null;  assert input.hasMoreElements();  System.out.println(">>>");  System.out.println("Find maximum in enumeration: " + input);  System.out.println(">>>");  long maximum=input.nextElement();  while (input.hasMoreElements()) {    Long val=input.nextElement();    if (val > maximum)     maximum=val;  }  return maximum;}  }
class C{  public static void requestPermission(AppCompatActivity activity,int requestId,String permission,boolean finishActivity){  if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {    PermissionUtils.RationaleDialog.newInstance(requestId,finishActivity).show(activity.getSupportFragmentManager(),"dialog");  } else {    ActivityCompat.requestPermissions(activity,new String[]{permission},requestId);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildGoldsmith(zone);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  if (processor == null) {    return;  }  if (debugReleaseOrphanedGrant()) {    waitToProcessDLockResponse(dm);  }  if (keeper.retrieve(processor.getProcessorId()) != null) {    super.process(dm,processor);  }  if (!this.processed) {    if (this.responseCode == GRANT) {      logger.warn(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_NO_PROCESSOR_FOUND_FOR_DLOCKRESPONSEMESSAGE__0,this));      releaseOrphanedGrant(dm);    } else {      logger.info(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_NO_PROCESSOR_FOUND_FOR_DLOCKRESPONSEMESSAGE__0,this));    }  }}  }
class C{  public T caseTimeEvent(TimeEvent object){  return null;}  }
class C{  public static byte[] copyOfRange(byte[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  byte[] copy=new byte[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public BaseDateTime(){  this(DateTimeUtils.currentTimeMillis(),ISOChronology.getInstance());}  }
class C{  public void endPhase(int phase){  if (compileTimes != null && phase >= PREPROCESS && phase <= POSTPROCESS) {    compileTimes[phase].invocationCount++;    compileTimes[phase].totalTime+=System.currentTimeMillis() - startTime;  }}  }
class C{  private static boolean hasSource(ITypeRoot je){  if (je == null || !je.exists())   return false;  try {    return je.getBuffer() != null;  } catch (  JavaModelException ex) {    LOG.error(ex.getMessage(),ex);  }  return false;}  }
class C{  private static DecimalFormat createFormatter(PrecisionModel precisionModel){  int decimalPlaces=precisionModel.getMaximumSignificantDigits();  DecimalFormatSymbols symbols=new DecimalFormatSymbols();  symbols.setDecimalSeparator('.');  String fmtString="0" + (decimalPlaces > 0 ? "." : "") + stringOfChar('#',decimalPlaces);  return new DecimalFormat(fmtString,symbols);}  }
class C{  private void initializeNoxItemMargin(TypedArray attributes){  float noxItemMarginDefaultValue=getResources().getDimension(R.dimen.default_nox_item_margin);  float noxItemMargin=attributes.getDimension(R.styleable.nox_item_margin,noxItemMarginDefaultValue);  noxConfig.setNoxItemMargin(noxItemMargin);}  }
class C{  public XYLocation north(){  return new XYLocation(xCoOrdinate,yCoOrdinate - 1);}  }
class C{  public PanningImageRenderPolicy(){  super();}  }
class C{  public static MosaicDefinition createMosaicDefinition(final int id,final MosaicProperties properties){  return createMosaicDefinition(generateRandomAccount(),createMosaicId(id),properties);}  }
class C{  public MosaicDefinitionSupplyPair(final Deserializer deserializer){  this.mosaicDefinition=deserializer.readObject("mosaicDefinition",null);  this.supply=Supply.readFrom(deserializer,"supply");}  }
class C{  public NType merge(NType a,NType b) throws MergeFailed {  if (a != null && b == null)   return a;  if (a == null && b != null)   return b;  if (a == null && b == null)   return null;  if (a.equals(b))   return a;  try {    return Dispatcher.dispatch(getClass(),this,"accept",a,b);  } catch (  NoSuchMethodException e) {    throw new MergeFailed("a and b are of different NType",a,b);  }}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public ManagerRegistrationMessageListener(final MailService mailService,final MailComposer mailComposer,final RegistrationMessage objectMessage){  this.mailService=mailService;  this.mailComposer=mailComposer;  this.objectMessage=objectMessage;}  }
class C{  public IntToIntPairConcurrentHashMap(int expectedNumNodes,double loadFactor,int defaultReturnValue,StatsReceiver statsReceiver){  this.scopedStatsReceiver=statsReceiver.scope(this.getClass().getName());  this.loadFactor=loadFactor;  int arraySize=(int)(expectedNumNodes / loadFactor);  this.numKeySlotsAllocated=Math.max(Integer.highestOneBit(arraySize - 1) << 1,8);  BigIntArray array=new ShardedBigIntArray(numKeySlotsAllocated * NUM_INTS_PER_KEY,ShardedBigIntArray.PREFERRED_EDGES_PER_SHARD,defaultReturnValue,scopedStatsReceiver);  int bitMask=numKeySlotsAllocated - 1;  int maxNumKeysToStore=(int)(loadFactor * numKeySlotsAllocated);  this.readerAccessibleInfo=new ReaderAccessibleInfo(array,bitMask,maxNumKeysToStore);  this.defaultReturnValue=defaultReturnValue;  numStoredKeysCounter=scopedStatsReceiver.counter("numStoredKeys");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @NoInline @Interruptible public static IMT newIMT(){  if (!VM.runningVM) {    return IMT.allocate();  }  return (IMT)newRuntimeTable(IMT_METHOD_SLOTS,RVMType.IMTType);}  }
class C{  public Object clone(){  try {    @SuppressWarnings("unchecked") FastArrayList<E> v=(FastArrayList<E>)super.clone();    v.elementData=Arrays.copyOf(elementData,size);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static Date parseDateStrictly(final String str,final Locale locale,final String... parsePatterns) throws ParseException {  return parseDateWithLeniency(str,null,parsePatterns,false);}  }
class C{  final public boolean isVisible(){  return isAdded() && !isHidden() && mView != null && mView.getWindowToken() != null && mView.getVisibility() == View.VISIBLE;}  }
class C{  public Element store(){  Element e=new Element(Xml.LOCATION);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.OPS,Integer.toString(getLocationOps()));  e.setAttribute(Xml.DIR,Integer.toString(getTrainDirections()));  e.setAttribute(Xml.SWITCH_LIST,isSwitchListEnabled() ? Xml.TRUE : Xml.FALSE);  if (!Setup.isSwitchListRealTime()) {    e.setAttribute(Xml.SWITCH_LIST_STATE,Integer.toString(getSwitchListState()));  }  if (!getDefaultPrinterName().equals(NONE)) {    e.setAttribute(Xml.PRINTER_NAME,getDefaultPrinterName());  }  if (!getTrainIconEast().equals(new Point())) {    e.setAttribute(Xml.EAST_TRAIN_ICON_X,Integer.toString(getTrainIconEast().x));    e.setAttribute(Xml.EAST_TRAIN_ICON_Y,Integer.toString(getTrainIconEast().y));  }  if (!getTrainIconWest().equals(new Point())) {    e.setAttribute(Xml.WEST_TRAIN_ICON_X,Integer.toString(getTrainIconWest().x));    e.setAttribute(Xml.WEST_TRAIN_ICON_Y,Integer.toString(getTrainIconWest().y));  }  if (!getTrainIconNorth().equals(new Point())) {    e.setAttribute(Xml.NORTH_TRAIN_ICON_X,Integer.toString(getTrainIconNorth().x));    e.setAttribute(Xml.NORTH_TRAIN_ICON_Y,Integer.toString(getTrainIconNorth().y));  }  if (!getTrainIconSouth().equals(new Point())) {    e.setAttribute(Xml.SOUTH_TRAIN_ICON_X,Integer.toString(getTrainIconSouth().x));    e.setAttribute(Xml.SOUTH_TRAIN_ICON_Y,Integer.toString(getTrainIconSouth().y));  }  if (_reader != null) {    e.setAttribute(Xml.READER,_reader.getDisplayName());  }  String[] types=getTypeNames();  if (Control.backwardCompatible) {    StringBuffer buf=new StringBuffer();    for (    String type : types) {      if (CarTypes.instance().containsName(type) || EngineTypes.instance().containsName(type)) {        buf.append(type + "%%");      }    }    e.setAttribute(Xml.CAR_TYPES,buf.toString());  }  Element eTypes=new Element(Xml.TYPES);  for (  String type : types) {    if (EngineTypes.instance().containsName(type)) {      Element eType=new Element(Xml.LOCO_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    } else     if (CarTypes.instance().containsName(type)) {      Element eType=new Element(Xml.CAR_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    }  }  e.addContent(eTypes);  if (getPhysicalLocation() != null && !getPhysicalLocation().equals(PhysicalLocation.Origin)) {    e.setAttribute(Xml.PHYSICAL_LOCATION,getPhysicalLocation().toString());  }  e.setAttribute(Xml.COMMENT,getComment());  e.setAttribute(Xml.SWITCH_LIST_COMMENT,getSwitchListComment());  List<Track> tracks=getTrackByIdList();  for (  Track track : tracks) {    e.addContent(track.store());  }  return e;}  }
class C{  public DelphiSourceSanitizer(String fileName) throws IOException {  super(fileName);}  }
class C{  public static boolean namespaceIsRelative(String namespaceValue){  return !namespaceIsAbsolute(namespaceValue);}  }
class C{  public void incUnprocessedEventsRemovedByPrimary(){  this.stats.incInt(unprocessedEventsRemovedByPrimaryId,1);  decUnprocessedEventMapSize();}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public Builder parameter(String name,String value){  if (!validParamNameChars.containsOnly(name)) {    throw Messages.INSTANCE.getIllegalArgumentException(23);  }  if (value == null) {    parameters.remove(name);  } else {    parameters.put(name,value);  }  return this;}  }
class C{  public static String generateNoteExcerpt(String content){  if (content.contains("\n"))   return truncateString(removeMarkDown(content.replaceFirst("^.*\n","")),200).replace("\n","   "); else   return "";}  }
class C{  @Transient public boolean isValidDebuggee(){  SyncResult result=checkSyncStashState();  return result.isValidDebuggee();}  }
class C{  public SelectArtyAutoHitHexDisplay(ClientGUI clientgui){  super(clientgui);  clientgui.getClient().getGame().addGameListener(this);  clientgui.getBoardView().addBoardViewListener(this);  setupStatusBar(Messages.getString("SelectArtyAutoHitHexDisplay.waitingArtillery"));  p=clientgui.getClient().getLocalPlayer();  artyAutoHitHexes.setPlayerID(p.getId());  buttons=new HashMap<ArtyAutoHitCommand,MegamekButton>((int)(ArtyAutoHitCommand.values().length * 1.25 + 0.5));  for (  ArtyAutoHitCommand cmd : ArtyAutoHitCommand.values()) {    String title=Messages.getString("SelectArtyAutoHitHexDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    newButton.setEnabled(false);    buttons.put(cmd,newButton);  }  numButtonGroups=(int)Math.ceil((buttons.size() + 0.0) / buttonsPerGroup);  butDone.setText(Messages.getString("SelectArtyAutoHitHexDisplay.Done"));  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();  registerKeyCommands();}  }
class C{  public Ping(){  super(Type.SYSTEM);}  }
class C{  public TreeNode(TreeNode<T> parent,T content){  this(parent,content,0);}  }
class C{  public DefaultPDUSender(PDUComposer pduComposer){  this.pduComposer=pduComposer;}  }
class C{  private int hitToCaret(TextHitInfo hit){  int hitIndex=hit.getCharIndex();  if (hitIndex < 0) {    return textLine.isDirectionLTR() ? 0 : characterCount;  } else   if (hitIndex >= characterCount) {    return textLine.isDirectionLTR() ? characterCount : 0;  }  int visIndex=textLine.logicalToVisual(hitIndex);  if (hit.isLeadingEdge() != textLine.isCharLTR(hitIndex)) {    ++visIndex;  }  return visIndex;}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final Calendar value,final boolean includeTime) throws XMLStreamException {  if (value == null) {    return;  }  writer.writeStartElement(elementName);  writer.writeCharacters(XMLConvert.toString(value,includeTime));  writer.writeEndElement();}  }
class C{  public void prune() throws Exception {  double errorsLargestBranch;  double errorsLeaf;  double errorsTree;  int indexOfLargestBranch;  C45PruneableClassifierTree largestBranch;  int i;  if (!m_isLeaf) {    for (i=0; i < m_sons.length; i++)     son(i).prune();    indexOfLargestBranch=localModel().distribution().maxBag();    if (m_subtreeRaising) {      errorsLargestBranch=son(indexOfLargestBranch).getEstimatedErrorsForBranch((Instances)m_train);    } else {      errorsLargestBranch=Double.MAX_VALUE;    }    errorsLeaf=getEstimatedErrorsForDistribution(localModel().distribution());    errorsTree=getEstimatedErrors();    if (Utils.smOrEq(errorsLeaf,errorsTree + 0.1) && Utils.smOrEq(errorsLeaf,errorsLargestBranch + 0.1)) {      m_sons=null;      m_isLeaf=true;      m_localModel=new NoSplit(localModel().distribution());      return;    }    if (Utils.smOrEq(errorsLargestBranch,errorsTree + 0.1)) {      largestBranch=son(indexOfLargestBranch);      m_sons=largestBranch.m_sons;      m_localModel=largestBranch.localModel();      m_isLeaf=largestBranch.m_isLeaf;      newDistribution(m_train);      prune();    }  }}  }
class C{  public MapBackedRegistry(){  this(new HashMap<K,V>());}  }
class C{  public PrintTranscoder(){  super();  hints.put(KEY_MEDIA,VALUE_MEDIA_PRINT);}  }
class C{  private void skipEntry() throws ParsingException, IOException {  while (lookahead != ';') {switch (lookahead) {case StreamTokenizer.TT_NUMBER:      throw new ParsingException(st.lineno(),";",ResourcesMgr.getString("number.") + String.valueOf(st.nval));case StreamTokenizer.TT_EOF:    throw new ParsingException(ResourcesMgr.getString("expected.read.end.of.file."));default :  lookahead=st.nextToken();}}}  }
class C{  protected void refreshAll(){  if (ce() == null) {    return;  }  clientgui.bv.redrawEntity(ce());  clientgui.mechD.displayEntity(ce());  clientgui.mechD.showPanel("weapons");  clientgui.mechD.wPan.selectFirstWeapon();  updateTarget();}  }
class C{  public static String toStringTree(Tree t,TreeTextProvider nodeTextProvider){  if (t == null)   return "null";  String s=Utils.escapeWhitespace(nodeTextProvider.getText(t),false);  if (t.getChildCount() == 0)   return s;  StringBuilder buf=new StringBuilder();  buf.append("(");  s=Utils.escapeWhitespace(nodeTextProvider.getText(t),false);  buf.append(s);  buf.append(' ');  for (int i=0; i < t.getChildCount(); i++) {    if (i > 0)     buf.append(' ');    buf.append(toStringTree(t.getChild(i),nodeTextProvider));  }  buf.append(")");  return buf.toString();}  }
class C{  protected HeaderParser(String header){  this.lexer=new Lexer("command_keywordLexer",header);}  }
class C{  protected void sequence_TypeRefWithModifiers_UnionTypeExpression_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean deleteResultFiles(){  String tmp2=getSubmissionID() + getUsername();  File zipfile=new File(JPLAG_RESULTS_DIRECTORY + File.separator + tmp2+ ".zip");  File resultdir=new File(JPLAG_RESULTS_DIRECTORY + File.separator + tmp2);  try {    zipfile.delete();    if (resultdir.exists())     deleteDir(resultdir);  } catch (  SecurityException ex) {    System.out.println("Not allowed to delete zipped result file!");    return false;  }  return true;}  }
class C{  public void tagGeneratorFont(byte[] data) throws IOException {  if (tags != null) {    tags.tagGeneratorFont(data);  }}  }
class C{  public void reset(){  thrust=0;  weight=0;  drillingPower=0f;  for (  FuelType type : FuelType.values()) {    setFuelAmount(type,0);    setFuelRate(type,0);    setFuelCapacity(type,0);  }  fuelLiquid=0;  pilotSeatPos.x=-1;  clearEngineLocations();  passengerSeats.clear();  statTags.clear();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  titleAttr.setValue("Tomorrow");  firstChild.setNodeValue("impl reused node");  value=titleAttr.getValue();  assertEquals("attrValue","Tomorrow",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Tomorrow",value);  firstChild=titleAttr.getLastChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Tomorrow",value);  otherChild=firstChild.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);}  }
class C{  static RemoteClass forClass(BatchEnvironment env,ClassDoc implClass){  RemoteClass remoteClass=new RemoteClass(env,implClass);  if (remoteClass.init()) {    return remoteClass;  } else {    return null;  }}  }
class C{  public static <T,P>T detectWithIfNone(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter,T ifNone){  T result=Iterate.detectWith(iterable,predicate,parameter);  return result == null ? ifNone : result;}  }
class C{  public static void cleanupRuntimeProgram(Program prog,String[] outputs){  Map<String,FunctionProgramBlock> funcMap=prog.getFunctionProgramBlocks();  if (funcMap != null && !funcMap.isEmpty()) {    for (    Entry<String,FunctionProgramBlock> e : funcMap.entrySet()) {      FunctionProgramBlock fpb=e.getValue();      for (      ProgramBlock pb : fpb.getChildBlocks())       rCleanupRuntimeProgram(pb,outputs);    }  }  for (  ProgramBlock pb : prog.getProgramBlocks())   rCleanupRuntimeProgram(pb,outputs);}  }
class C{  public String toString(){  return _toString;}  }
class C{  public List<Node> listAvailableTerminals(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if ((node.getNumberOfArguments() == 0) && type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  return result;}  }
class C{  public Cursor select(SQLiteDatabase db,String... columns){  return db.query(mTable.name,columns,mCondition,mArgs,mGroupBy,null,mOrderBy,null);}  }
class C{  protected void onStartOpen(int position,int action,boolean right){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onStartOpen(position,action,right);  }}  }
class C{  public KeywordObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public List rows(int offset,int maxRows) throws SQLException {  return rows(getSql(),getParameters(),offset,maxRows);}  }
class C{  public boolean isWritable(){  return writable;}  }
class C{  public void show(Component invoker,int x,int y){  super.show(invoker,x,y);  againMenuItem.setEnabled(searchString != null);  String selectedText=ref.getSelectedText();  copyMenuItem.setEnabled(selectedText != null && selectedText.length() > 0);  selectNoneMenuItem.setEnabled(copyMenuItem.isEnabled());}  }
class C{  public boolean omitArticle(Article.ArticleField field,Article a){  boolean ret=false;switch (field) {case unread:    if (a.isUnread)     ret=true;  break;case updated:if (a.updated != null) {  if (lastUpdated.compareTo(a.updated) >= 0) {    omittedArticles.add(a.id);    ret=true;  }}default :break;}return ret;}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxTagWrappingITCase.class));}  }
class C{  public Vector divide(int n){  return new Vector(x / n,y / n,z / n);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  static String binaryNameOf(ClassDoc cl){  String flat=cl.name().replace('.','$');  String packageName=cl.containingPackage().name();  return packageName.equals("") ? flat : packageName + "." + flat;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void createAccountsMenu(Column column){  JComponent label=createMenuTitle("Accounts");  column.addComponent(label);  JMenuItem item=createMenuItem("Change Password","changepassword");  column.addComponent(item);  item=createMenuItem("Merge Accounts","merge");  column.addComponent(item);  item=createMenuItem("Login History","loginhistory");  column.addComponent(item);}  }
class C{  @Deprecated public void correctlySpends(Transaction txContainingThis,long scriptSigIndex,Script scriptPubKey) throws ScriptException {  correctlySpends(txContainingThis,scriptSigIndex,scriptPubKey,ALL_VERIFY_FLAGS);}  }
class C{  public TriXWriter(OutputStream out){  this(new XMLWriter(out));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.943 -0500",hash_original_method="7C3BADEB42DA2C878C6C5ABCBE524429",hash_generated_method="8CDB4A3364B8F2209625D9813B166F22") private boolean processSetUpIdleModeText(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process SetUpIdleModeText");  TextMessage textMsg=new TextMessage();  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.TEXT_STRING,ctlvs);  if (ctlv != null) {    textMsg.text=ValueParser.retrieveTextString(ctlv);  }  if (textMsg.text != null) {    ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);    if (ctlv != null) {      iconId=ValueParser.retrieveIconId(ctlv);      textMsg.iconSelfExplanatory=iconId.selfExplanatory;    }  }  mCmdParams=new DisplayTextParams(cmdDet,textMsg);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  @Interruptible public static void printTotals(){  Log.writeln("============================ MMTk Statistics Totals ============================");  printColumnNames();  Log.write(phase / 2);  Log.write("\t");  for (int c=0; c < counters; c++) {    if (counter[c].mergePhases()) {      counter[c].printTotal();      Log.write("\t");    } else {      counter[c].printTotal(true);      Log.write("\t");      counter[c].printTotal(false);      Log.write("\t");    }  }  Log.writeln();  Log.write("Total time: ");  Plan.totalTime.printTotal();  Log.writeln(" ms");  Log.writeln("------------------------------ End MMTk Statistics -----------------------------");}  }
class C{  public void componentResized(ComponentEvent e){}  }
class C{  public static void writeTimeout(HttpServletResponse response){  response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);}  }
class C{  public InitialTransition(State<S,E> target,Collection<Action<S,E>> actions){  super(null,target,actions,null,TransitionKind.INITIAL,null,null,null);}  }
class C{  public void validateInput(){  if (DBG)   log("Signal before validate=" + this);  mGsmSignalStrength=mGsmSignalStrength >= 0 ? mGsmSignalStrength : 99;  mCdmaDbm=mCdmaDbm > 0 ? -mCdmaDbm : -120;  mCdmaEcio=(mCdmaEcio > 0) ? -mCdmaEcio : -160;  mEvdoDbm=(mEvdoDbm > 0) ? -mEvdoDbm : -120;  mEvdoEcio=(mEvdoEcio >= 0) ? -mEvdoEcio : -1;  mEvdoSnr=((mEvdoSnr > 0) && (mEvdoSnr <= 8)) ? mEvdoSnr : -1;  mLteSignalStrength=(mLteSignalStrength >= 0) ? mLteSignalStrength : 99;  mLteRsrp=((mLteRsrp >= 44) && (mLteRsrp <= 140)) ? -mLteRsrp : SignalStrength.INVALID;  mLteRsrq=((mLteRsrq >= 3) && (mLteRsrq <= 20)) ? -mLteRsrq : SignalStrength.INVALID;  mLteRssnr=((mLteRssnr >= -200) && (mLteRssnr <= 300) && !(mLteRsrq == SignalStrength.INVALID && mLteRssnr == -1)) ? mLteRssnr : SignalStrength.INVALID;  mTdScdmaRscp=((mTdScdmaRscp >= 25) && (mTdScdmaRscp <= 120)) ? -mTdScdmaRscp : SignalStrength.INVALID;  if (DBG)   log("Signal after validate=" + this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static <N extends ASTNode>void replace(final N n,final N with,final ASTRewrite r){  r.replace(n,with,null);}  }
class C{  @Override public void onGetUserIdResponse(final GetUserIdResponse getUserIdResponse){  Log.v(TAG,"onGetUserIdResponse recieved: Response -" + getUserIdResponse);  Log.v(TAG,"RequestId:" + getUserIdResponse.getRequestId());  Log.v(TAG,"IdRequestStatus:" + getUserIdResponse.getUserIdRequestStatus());  new GetUserIdAsyncTask().execute(getUserIdResponse);}  }
class C{  @Override public final void preTearDown() throws Exception {  vm0.invoke(null);  vm1.invoke(null);}  }
class C{  Set<ProjectMethod> findProjectMethods(final List<Instruction> instructions){  final Set<ProjectMethod> projectMethods=new HashSet<>();  addProjectMethods(instructions,projectMethods);  return projectMethods;}  }
class C{  private MoveOption[] fifthPass(CEntity self,List<Entity> enemy_array){  MoveOption[] move_array=self.pass.values().toArray(new MoveOption[0]);  self.pass.clear();  if (self.engaged) {    for (    MoveOption option : move_array) {      option.setState();      GAAttack temp=this.bestAttack(option);      if (temp != null) {        option.damage=(option.damage + temp.getFittestChromosomesFitness()) / 2;      } else {        option.damage/=2;      }      for (int e=0; e < enemy_array.size(); e++) {        Entity en=enemy_array.get(e);        CEntity enemy=centities.get(en);        if (!enemy.canMove()) {          option.setThreat(enemy,(option.getThreat(enemy) + attackUtility(enemy.current,self)) / 2);          if (debug) {            option.tv.add(option.getThreat(enemy) + " Revised Threat " + e+ " \n");          }          if (!option.isPhysical) {            if (temp != null) {              option.setDamage(enemy,(option.getDamage(enemy) + temp.getDamageUtility(enemy)) / 2);            } else {              option.setDamage(enemy,option.getMinDamage(enemy));            }            if (debug) {              option.tv.add(option.getDamage(enemy) + " Revised Damage " + e+ " \n");            }            if (option.getFinalCoords().distance(enemy.current.getFinalCoords()) == 1) {              PhysicalOption p=PhysicalCalculator.getBestPhysicalAttack(option.getEntity(),enemy.getEntity(),game);              if (p != null) {                option.setDamage(enemy,option.getDamage(enemy) + p.expectedDmg);                if (debug) {                  option.tv.add(p.expectedDmg + " Physical Damage " + e+ " \n");                }              }              p=PhysicalCalculator.getBestPhysicalAttack(enemy.getEntity(),option.getEntity(),game);              if (p != null) {                option.setThreat(enemy,option.getThreat(enemy) + (.5 * p.expectedDmg));                if (debug) {                  option.tv.add((.5 * p.expectedDmg) + " Physical Threat " + e+ " \n");                }              }            }          }        } else         if (!option.isPhysical) {          if (temp != null) {            option.setDamage(enemy,((2 * option.getDamage(enemy)) + temp.getDamageUtility(enemy)) / 3);          } else {            option.setDamage(enemy,option.getMinDamage(enemy));          }        } else {          option.setDamage(enemy,option.getDamage(enemy) / Math.sqrt((double)enemy.bv / (double)self.bv));          option.damage=option.getDamage(enemy);        }      }      option.threat=0;      for (      DamageInfo damageInfo : option.damageInfos.values()) {        option.threat+=damageInfo.threat;      }      if (debug) {        option.tv.add(option.threat + " Revised Threat Utility\n");        option.tv.add(option.damage + " Revised Damage Utility\n");      }    }  }  Arrays.<MoveOption>sort(move_array,new MoveOption.WeightedComparator(1,1));  self.current.setState();  return move_array;}  }
class C{  public final byte[] fetchBytes(String url){  return fetchBytes(url,null,timeout);}  }
class C{  public void unselectAll(){  List<SelectableWrapper<T>> selectionList=selectable.getSelectionList();  List<SelectableWrapper<T>> filteredData=selectable.getFilteredData();  for (  SelectableWrapper<T> wrapper : selectionList) {    if (filteredData.contains(wrapper)) {      wrapper.setSelected(false);    }  }}  }
class C{  public void addHtmlLink(String htmlUri,String lang,String title){  Link link=new Link();  link.setRel(Link.Rel.ALTERNATE);  link.setType(Link.Type.HTML);  link.setHref(htmlUri);  if (lang != null) {    link.setHrefLang(lang);  }  if (title != null) {    link.setTitle(title);  }  state.links.add(link);}  }
class C{  void touch(long qAddr,long addr){  lock.lock();  try {    entry(qAddr,addr);    if (qAddr != tail) {      long prev=previous(qAddr);      long next=next(qAddr);      if (prev != 0)       next(prev,next); else {        assert qAddr == head;        head=next;      }      if (next != 0)       previous(next,prev);      next(tail,qAddr);      next(qAddr,0);      previous(qAddr,tail);      tail=qAddr;    }  }  finally {    lock.unlock();  }}  }
class C{  @SuppressWarnings("unused") public final void selectAll(){  for (int i=0; i < realmResults.size(); i++)   selectedPositions.add(i);  notifyDataSetChanged();}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  private void fireProcessUpdate(final WorkflowAnnotation anno){  ExecutionUnit process=anno.getProcess();  if (process != null) {    process.getEnclosingOperator().rename(process.getEnclosingOperator().getName());  }}  }
class C{  protected static void fetchData(OrderDetails details){  details.catalogService=CatalogServiceUtils.getCatalogService(details.order.getCatalogService());  if (details.executionState != null) {    details.affectedResources=Lists.newArrayList();    for (    String affectedResourceId : details.executionState.getAffectedResources()) {      ResourceDetails resourceDetails=AffectedResources.resourceDetails(affectedResourceId);      if (resourceDetails != null) {        details.affectedResources.add(resourceDetails);      }    }    Collections.sort(details.affectedResources,RESOURCE_COMPARATOR);  }}  }
class C{  protected void addGateway(String guid,IPv4Address ip){  if (ip.getInt() != 0) {    if (log.isDebugEnabled()) {      log.debug("Adding {} as gateway for GUID {}",ip.toString(),guid);    }    guidToGateway.put(guid,ip);    if (vNetsByGuid.get(guid) != null)     vNetsByGuid.get(guid).setGateway(ip.toString());    if (gatewayToGuid.containsKey(ip)) {      Set<String> gSet=gatewayToGuid.get(ip);      gSet.add(guid);    } else {      Set<String> gSet=Collections.synchronizedSet(new HashSet<String>());      gSet.add(guid);      gatewayToGuid.put(ip,gSet);    }  }}  }
class C{  public static boolean containsOnlyNonCrLfPrintableAscii(final String... values){  if (values == null) {    return true;  }  return containsOnlyNonCrLfPrintableAscii(Arrays.asList(values));}  }
class C{  private final void error(String message,CharSequence identifier){  if (badHtmlHandler != Handler.DO_NOTHING) {    badHtmlHandler.handle(message + " : " + identifier);  }}  }
class C{  public ProjectExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void afterIndexShardStarted(IndexShard indexShard){  try {    discoveryService.putShardRoutingState(indexShard.shardId().getIndex(),ShardRoutingState.STARTED);    updateRoutingTable("shard [" + indexShard.shardId().getIndex() + "][0] started",indexShard.shardId().getIndex());  } catch (  IOException e) {    logger.error("Unexpected error",e);  }}  }
class C{  public void run(){  System.out.print(id + " ");}  }
class C{  public ToStringBuilder append(boolean value){  style.append(buffer,null,value);  return this;}  }
class C{  public CounterMark(long lastEmitted,Instant startTime){  this.lastEmitted=lastEmitted;  this.startTime=startTime;}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public boolean hasError(){  return hasSoftError() || hasHardError();}  }
class C{  protected double computeDefaultWavelength(Globe globe){  double perimeter=0;  int count=0;  Position first=null;  Position prev=null;  for (  Position pos : this.positions) {    if (prev != null) {      Angle dist=LatLon.greatCircleDistance(pos,prev);      perimeter+=dist.radians;    } else {      first=pos;    }    prev=pos;    count+=1;  }  if (prev != null && !prev.equals(first)) {    Angle dist=LatLon.greatCircleDistance(first,prev);    perimeter+=dist.radians;  }  double complexity=Math.sqrt(count / 3.0);  perimeter=perimeter * globe.getRadius();  return perimeter / (complexity * DEFAULT_NUM_WAVES);}  }
class C{  public synchronized long skip(long n) throws IOException {  if (disableBuffering) {    long v=getInIfOpen().skip(n);    totalBytesRead+=v;    fireProgress();    return v;  }  getBufIfOpen();  if (n <= 0) {    return 0;  }  long avail=count - pos;  if (avail <= 0) {    if (markpos < 0) {      return getInIfOpen().skip(n);    }    fill();    avail=count - pos;    if (avail <= 0) {      return 0;    }  }  long skipped=(avail < n) ? avail : n;  pos+=skipped;  totalBytesRead+=(int)skipped;  fireProgress();  lastActivityTime=System.currentTimeMillis();  return skipped;}  }
class C{  @RequestMapping(value="/_search/points/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<Points> search(@PathVariable String query){  return StreamSupport.stream(pointsSearchRepository.search(queryString(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  private static void xtestRandomFromTo(long from,long to,int times){  System.out.println("from=" + from + ", to="+ to);  java.util.Random randomJava=new java.util.Random();  RandomEngine random=new MersenneTwister();  int _from=(int)from, _to=(int)to;  cern.colt.Timer timer=new cern.colt.Timer().start();  for (int j=0, i=times; --i >= 0; j++) {    System.out.print(" " + random.raw());    if (j % 8 == 7)     System.out.println();  }  timer.stop().display();  System.out.println("Good bye.\n");}  }
class C{  private static int countElementOccurrence(Object element,Object[] array){  int count=0;  for (int i=0; i < array.length; ++i) {    Object arrayElement=array[i];    if (arrayElement != null && element != null) {      if (arrayElement.equals(element)) {        count++;      }    }  }  return count;}  }
class C{  public Intersection splitRoad(Road road,RoadPoint rp){  RoadPoint[] pointsBefore=road.getPointsBefore(rp);  RoadPoint[] pointsAfter=road.getPointsAfter(rp);  Intersection newIntersection=findIntersection(rp.getLocation(),null);  Intersection firstIntersection=road.getFirstIntersection();  Intersection secondIntersection=road.getSecondIntersection();  road.setIntersections(firstIntersection,newIntersection);  road.setRoadPoints(pointsBefore);  secondIntersection.removeRoad(road);  newIntersection.addRoad(road);  Road newRoad=createRoad(-1,null,newIntersection,secondIntersection,road.getRoadClass());  newRoad.setRoadPoints(pointsAfter);  return newIntersection;}  }
class C{  public boolean isHigh(){  return value != null && value >= 1 && value <= 4;}  }
class C{  protected int takeStep(int i1,int i2,double alpha2,double alpha2Star,double phi2) throws Exception {  if (i1 == i2) {    return 0;  }  double C1=m_C * m_data.instance(i1).weight();  double C2=m_C * m_data.instance(i2).weight();  double alpha1=m_alpha[i1];  double alpha1Star=m_alphaStar[i1];  double phi1=m_error[i1];  double k11=m_kernel.eval(i1,i1,m_data.instance(i1));  double k12=m_kernel.eval(i1,i2,m_data.instance(i1));  double k22=m_kernel.eval(i2,i2,m_data.instance(i2));  double eta=-2 * k12 + k11 + k22;  if (eta < 0) {    return 0;  }  double gamma=alpha1 - alpha1Star + alpha2 - alpha2Star;  double alpha1old=alpha1;  double alpha1Starold=alpha1Star;  double alpha2old=alpha2;  double alpha2Starold=alpha2Star;  double deltaPhi=phi2 - phi1;  if (findOptimalPointOnLine(i1,alpha1,alpha1Star,C1,i2,alpha2,alpha2Star,C2,gamma,eta,deltaPhi)) {    alpha1=m_alpha[i1];    alpha1Star=m_alphaStar[i1];    alpha2=m_alpha[i2];    alpha2Star=m_alphaStar[i2];    double dAlpha1=alpha1 - alpha1old - (alpha1Star - alpha1Starold);    double dAlpha2=alpha2 - alpha2old - (alpha2Star - alpha2Starold);    for (int j=0; j < m_nInstances; j++) {      if ((j != i1) && (j != i2)) {        m_error[j]+=dAlpha1 * m_kernel.eval(i1,j,m_data.instance(i1)) + dAlpha2 * m_kernel.eval(i2,j,m_data.instance(i2));      }    }    m_error[i1]+=dAlpha1 * k11 + dAlpha2 * k12;    m_error[i2]+=dAlpha1 * k12 + dAlpha2 * k22;    double b1=Double.MAX_VALUE;    double b2=Double.MAX_VALUE;    if ((0 < alpha1 && alpha1 < C1) || (0 < alpha1Star && alpha1Star < C1) || (0 < alpha2 && alpha2 < C2)|| (0 < alpha2Star && alpha2Star < C2)) {      if (0 < alpha1 && alpha1 < C1) {        b1=m_error[i1] - m_epsilon;      } else       if (0 < alpha1Star && alpha1Star < C1) {        b1=m_error[i1] + m_epsilon;      }      if (0 < alpha2 && alpha2 < C2) {        b2=m_error[i2] - m_epsilon;      } else       if (0 < alpha2Star && alpha2Star < C2) {        b2=m_error[i2] + m_epsilon;      }      if (b1 < Double.MAX_VALUE) {        m_b=b1;        if (b2 < Double.MAX_VALUE) {          m_b=(b1 + b2) / 2.0;        }      } else       if (b2 < Double.MAX_VALUE) {        m_b=b2;      }    } else     if (m_b == 0) {      m_b=(m_error[i1] + m_error[i2]) / 2.0;    }    return 1;  } else {    return 0;  }}  }
class C{  public MapObject(Object id,Drawable drawable,Point position,boolean isTouchable,boolean isScalable){  this(id,drawable,position.x,position.y,0,0,isTouchable,isScalable);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.845 -0500",hash_original_method="41D1BD0CB95E0A52108020867995148C",hash_generated_method="7A4B3DC99CABF4731A85D90FA89CB1F3") private void clearInterruptsForTaskRun(){  if (runStateLessThan(ctl.get(),STOP) && Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))   Thread.currentThread().interrupt();}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    float[] tmp=new float[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  public static void forceAllToNotCompleteState(){  binaryLongReferences.forEach(null);  binaryLongReferences=null;}  }
class C{  public static boolean isLibraryOntology(Graph graph,URI baseURI){  if (baseURI != null) {    if (SP.BASE_URI.equals(baseURI.toString()) || SPIN.BASE_URI.equals(baseURI.toString())) {      return true;    } else {      Node ontology=NodeFactory.createURI(baseURI.toString());      return graph.contains(ontology,RDF.type.asNode(),SPIN.LibraryOntology.asNode());    }  } else {    return false;  }}  }
class C{  public void doDoubleClickAction(Graph graph){  List<Node> nodes=graph.getNodes();  String newName=chooseNewVariableName(nodes);  if (super.getModelNode() != null) {    super.getModelNode().setName(newName);  }}  }
class C{  public static String defaultString(Object obj,String defaultString){  return (obj == null) ? defaultString : obj.toString();}  }
class C{  public static void pushToDAS(TraceEvent traceEvent,String dasUrl){  Future<?> future=executorService.submit(null);  future.isDone();}  }
class C{  void addIndependentIterators(RuntimeIterator itr){  this.indpndntItrs.add(itr);}  }
class C{  @Override protected void packageClassifier(File dir,JarOutputStream modelStream) throws IOException {  super.packageClassifier(dir,modelStream);  for (  File file : dir.listFiles()) {    if (file.getName().equals("tree-kernel.obj")) {      String tkName=file.getName().substring(0,file.getName().length() - 4);      JarStreams.putNextJarEntry(modelStream,tkName,file);    }  }  JarStreams.putNextJarEntry(modelStream,"model.libsvm",getModelFile(dir));}  }
class C{  public OracleExtractException(Throwable cause){  super(cause);}  }
class C{  private void saveData() throws IOException {  DataModel dataModel;  if (this.dataEditor != null) {    dataModel=getDataEditor().getDataModelList();  } else {    dataModel=searchEditor.getDataModel();  }  if (dataModel == null) {    return;  }  if (dataModel instanceof DataSet) {    File file=EditorUtils.getSaveFile("data","txt",getDataEditor(),false,"Save Data...");    if (file == null) {      return;    }    char delimiter='\t';    if (file.getName().endsWith(".csv")) {      delimiter=',';    }    PrintWriter out;    try {      out=new PrintWriter(new FileOutputStream(file));    } catch (    IOException e) {      throw new IllegalArgumentException("Output file could not be opened: " + file);    }    DataSet dataSet=(DataSet)dataModel;    if (dataSet.isContinuous()) {      DataWriter.writeRectangularData(dataSet,out,delimiter);    } else     if (dataSet.isDiscrete()) {      DataWriter.writeRectangularData(dataSet,out,delimiter);    } else {      DataWriter.writeRectangularData(dataSet,out,delimiter);    }    out.close();  } else   if (dataModel instanceof ICovarianceMatrix) {    File file=EditorUtils.getSaveFile("data","txt",getDataEditor(),false,"Save Data...");    if (file == null) {      return;    }    PrintWriter out;    try {      out=new PrintWriter(new FileOutputStream(file));    } catch (    IOException e) {      throw new IllegalArgumentException("Output file could not be opened: " + file);    }    DataWriter.writeCovMatrix((ICovarianceMatrix)dataModel,out,nf);    out.close();  } else   if (dataModel instanceof DataModelList) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Pick the name of the first file, e.g. data.txt." + " A series of files will be generated based on this name, e.g. data1.txt, data2.txt, etc.");    File file=EditorUtils.getSaveFile("data","txt",getDataEditor(),false,"Save Data...");    if (file == null) {      return;    }    char delimiter='\t';    if (file.getName().endsWith(".csv")) {      delimiter=',';    }    DataModelList list=(DataModelList)dataModel;    String[] tokens=file.getName().split(".txt");    String base=tokens[0];    for (int i=0; i < list.size(); i++) {      DataModel _dataModel=list.get(i);      if (_dataModel == null)       throw new NullPointerException("Null data model.");      if (_dataModel instanceof DataSet) {        PrintWriter out;        try {          File file1=new File(file.getParent() + "/" + base+ "."+ (i + 1)+ ".txt");          System.out.println(file1);          out=new PrintWriter(new FileOutputStream(file1));        } catch (        IOException e) {          throw new IllegalArgumentException("Output file could not be opened: " + file);        }        DataSet dataSet=(DataSet)((DataModelList)dataModel).get(i);        if (dataSet.isContinuous()) {          DataWriter.writeRectangularData(dataSet,out,delimiter);        } else         if (dataSet.isDiscrete()) {          DataWriter.writeRectangularData(dataSet,out,delimiter);        } else {          DataWriter.writeRectangularData(dataSet,out,delimiter);        }        out.close();      }    }  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Sorry, don't know how to save that.");  }}  }
class C{  public void testGetTimestamp(){  assertNull(new CodeSigner(cpath,null).getTimestamp());  assertSame(new CodeSigner(cpath,ts).getTimestamp(),ts);}  }
class C{  @Scheduled(fixedDelay=10000) public void deleteLongRunningChecks(){  List<Check> checks=checkService.findAll();  for (  Check check : checks) {    if (check.getCheckState() == CheckState.RUNNING) {      Calendar calendar=new GregorianCalendar();      calendar.add(Calendar.MINUTE,-configurationService.find().getTooLongRunningCheckMinutes());      Date dateTooOld=calendar.getTime();      if (check.getStartDate().before(dateTooOld)) {        checkService.abort(check.getId(),"check too long");      }    }  }}  }
class C{  public TimeSpanConverter(){  this(Locale.getDefault());}  }
class C{  public static boolean canPlayerAffordTradingFee(Player player,int price){  BigDecimal fee=calculateFee(player,price);  List<Item> allEquipped=player.getAllEquipped("money");  int ownedMoney=0;  for (  Item item : allEquipped) {    Money m=(Money)item;    ownedMoney+=m.getQuantity();  }  return fee.intValue() <= ownedMoney;}  }
class C{  private DataMatrix computeAnalysisSimple(DashboardAnalysis analysis,boolean optimize,boolean forceBeyondLimit) throws ScopeException, ComputingException, SQLScopeException, InterruptedException, RenderingException {  DataMatrix result=null;  for (  MeasureGroup group : analysis.getGroups()) {    DataMatrix dm=computeAnalysisSimpleForGroup(analysis,group,optimize,forceBeyondLimit);    if (dm != null) {      if (result == null) {        result=dm;      } else {        result=result.merge(dm);      }    }  }  return result;}  }
class C{  public boolean isHole(){  return (depth & 1) != 0;}  }
class C{  public StringBuffer(int capacity){  super(capacity);}  }
class C{  @DELETE @Path("/{clientId}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("clientId") String clientId){  try {    getIDMClient().deleteOIDCClient(this.tenant,clientId);  } catch (  NoSuchTenantException|NoSuchOIDCClientException e) {    log.debug("Failed to delete an OIDC client '{}' from tenant '{}' due to missing tenant or an OIDC client",clientId,this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException|InvalidPrincipalException e) {    log.debug("Failed to delete an OIDC client '{}' from tenant '{}' due to a client side error",clientId,this.tenant,e);    throw new BadRequestException(this.sm.getString("res.oidcclient.delete.failed",clientId,this.tenant),e);  }catch (  Exception e) {    log.error("Failed to delete an OIDC client '{}' from tenant '{}' due to a server side error",clientId,this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  public DigicoreVehicleReader(){}  }
class C{  public void start(Servant servant,String[] args,String iorFile,String naming,boolean runORB){  ORB orb=initORB(args);  POA poa=null;  if (Debug.debugging("corbadetail")) {    listServices(orb);  }  try {    org.omg.CORBA.Object raw=orb.resolve_initial_references("RootPOA");    poa=POAHelper.narrow(raw);    poa.the_POAManager().activate();  } catch (  Exception error) {    Debug.error("Error getting root POA: " + error);    error.printStackTrace();    return;  }  try {    poa.activate_object(servant);  } catch (  Exception e) {    Debug.error("Caught exception activating POA object: \n" + e.getMessage());  }  try {    writeIOR(iorFile,servant._this_object());  } catch (  IOException ioe) {    Debug.error("CORBASupport caught IOException writing IOR file to " + iorFile);  }  setUpNamingService(naming,servant._this_object());  Debug.output(servant.toString() + " is ready.");  if (runORB) {    orb.run();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.981 -0500",hash_original_method="962436894D889C4038B1520A1ECBED33",hash_generated_method="66F7DBB494564B9F17917A6AA602DF50") private void stopSharedTimer(){  if (DebugFlags.J_WEB_CORE_JAVA_BRIDGE) {    Log.v(LOGTAG,"stopSharedTimer removing all timers");  }  removeMessages(TIMER_MESSAGE);  mHasInstantTimer=false;  mHasDeferredTimers=false;}  }
class C{  private String computeCssUriForExternalServer(final String cssUri){  String exernalServerCssUri=cssUri;  try {    final String serverHost=cssUri.replace(new URL(cssUri).getPath(),StringUtils.EMPTY);    exernalServerCssUri=serverHost + ServletContextUriLocator.PREFIX;    LOG.debug("using {} host as cssUri",exernalServerCssUri);  } catch (  final MalformedURLException e) {  }  return exernalServerCssUri;}  }
class C{  private void insertTrackWithLocations(Track track){  providerUtils.insertTrack(track);  providerUtils.bulkInsertTrackPoint(track.getLocations().toArray(new Location[0]),track.getLocations().size(),track.getId());}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public ShardIterator activeInitializingShardsIt(int seed){  if (allInitializingShards.isEmpty()) {    return new PlainShardIterator(shardId,shuffler.shuffle(activeShards,seed));  }  ArrayList<ShardRouting> ordered=new ArrayList<>(activeShards.size() + allInitializingShards.size());  ordered.addAll(shuffler.shuffle(activeShards,seed));  ordered.addAll(allInitializingShards);  return new PlainShardIterator(shardId,ordered);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public Message deserialize(String json) throws IOException {  String type;  try {    JSONObject jsonObject=new JSONObject(json);    type=jsonObject.getString(Message.FIELD_TYPE);  } catch (  JSONException e) {    throw new IOException(e);  }  CustomMessageDeserializer cqb=typeToCustomQueryBuilder.get(type);  if (cqb == null) {    throw new IOException("The query type " + type + " does not have a corresponding deserializer.");  }  CustomMessageValidator cqv=typeToCustomQueryValidator.get(type);  Object context=deserializationContext.get(typeToClass.get(type));  Message data=cqb.deserialize(json,typeToClass.get(type),context);  LOG.debug("{}",data);  if (data == null || !(cqv != null && cqv.validate(data,context))) {    return null;  }  data.setType(type);  return data;}  }
class C{  @DebugLog public static void checkDownloadedLanguage(Context context,ServerUtil serverUtil,boolean forceDownload,boolean fromService){  SharedPrefUtil mSharedPrefs=new SharedPrefUtil(context);  String downloadedLanguage=mSharedPrefs.getDownloadedLanguage();  String activeLanguage=UsefulBits.getActiveLanguage(context);  if (serverUtil == null)   serverUtil=new ServerUtil(context);  if (mSharedPrefs.getSavedLanguage() == null || forceDownload) {    Log.d(TAG,"Downloading language files. Forced: " + forceDownload);    mSharedPrefs.getLanguageStringsFromServer(activeLanguage.toLowerCase(),serverUtil);    if (mSharedPrefs.isDebugEnabled()) {      if (forceDownload && !fromService) {        showSimpleToast(context,"Language files downloaded because it was forced",Toast.LENGTH_SHORT);      } else       if (!fromService)       showSimpleToast(context,"Language files downloaded because there were none",Toast.LENGTH_SHORT);    }  } else {    long dateMillis=mSharedPrefs.getSavedLanguageDate();    String dateStr=UsefulBits.getFormattedDate(context,dateMillis);    Log.d(TAG,"Language files are dated: " + dateStr);    if (mSharedPrefs.isDebugEnabled() && !fromService)     showSimpleToast(context,"Language files are dated: " + dateStr,Toast.LENGTH_SHORT);    if (!downloadedLanguage.equalsIgnoreCase(activeLanguage)) {      if (mSharedPrefs.isDebugEnabled() && !fromService)       showSimpleToast(context,"Downloaded language files did not match the preferred language",Toast.LENGTH_SHORT);      Log.d(TAG,"Downloaded language files did not match the preferred language:" + newLine() + "Current downloaded language: "+ downloadedLanguage+ newLine()+ "Active language: "+ activeLanguage+ newLine()+ "Downloading the correct language");      mSharedPrefs.getLanguageStringsFromServer(activeLanguage.toLowerCase(),serverUtil);    }  }}  }
class C{  public synchronized boolean generate(Projection proj){  if ((proj.getScale() <= getVisibleScale()) || (getVisibleScale() == -1)) {    this.renderText=true;  } else {    this.renderText=false;  }  return super.generate(proj);}  }
class C{  private boolean isValidTuple(Tuple tp,int statWindow,long curTime,long maxTimeToKeepInSec){  if (tp.getValue() < 0)   return false;  logger.debug("Checking tuple [" + tp.toString() + "], "+ "current timestamp ["+ curTime+ "], "+ "time difference ["+ (curTime - tp.timestamp) / 1000 + "] s");  if ((curTime - maxTimeToKeepInSec * 1000) > tp.getTimestamp()) {    logger.debug("Removing an expired tuple [" + tp.toString() + "], current timestamp ["+ curTime+ "]");    return false;  } else   if ((curTime - tp.getTimestamp()) > statWindow * 1000 + 1) {    if (tp.getEvaluateCount() < 2)     logger.warn("Delete un-evaluated tuple [" + tp.toString() + "] of application "+ appId+ " with current timestamp ["+ curTime+ "] while the evaluation count is "+ tp.getEvaluateCount()); else     logger.debug("Expired tuple [" + tp.toString() + "]  with current timestamp ["+ curTime+ "] while the evaluation count is "+ tp.getEvaluateCount());    return false;  }  return true;}  }
class C{  static byte[] toBytes(String source){  try {    return source.getBytes("UTF8");  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  private static void copy(InputStream in,OutputStream out) throws IOException {synchronized (in) {synchronized (out) {      byte[] buffer=new byte[256];      while (true) {        int bytesRead=in.read(buffer);        if (bytesRead == -1)         break;        out.write(buffer,0,bytesRead);      }    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ycxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  void updateDistributedDeviceComponent(VPlexDistributedDeviceComponentInfo componentInfo) throws VPlexApiException {  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.VPLEX_PATH);  uriBuilder.append(componentInfo.getPath());  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Distributed device component request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw VPlexApiException.exceptions.updateDistDeviceComponentFailureStatus(componentInfo.getPath(),String.valueOf(status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,componentInfo);    s_logger.info("Updated Distributed Device Component Info {}",componentInfo.toString());  } catch (  Exception e) {    throw VPlexApiException.exceptions.failedUpdateDistDeviceComponentInfo(componentInfo.getPath(),e);  }}  }
class C{  private static long mixGamma(long z){  z=(z ^ (z >>> 33)) * 0xff51afd7ed558ccdL;  z=(z ^ (z >>> 33)) * 0xc4ceb9fe1a85ec53L;  z=(z ^ (z >>> 33)) | 1L;  int n=Long.bitCount(z ^ (z >>> 1));  return (n < 24) ? z ^ 0xaaaaaaaaaaaaaaaaL : z;}  }
class C{  public static char[] clone(char[] array){  if (array == null) {    return null;  }  return (char[])array.clone();}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public boolean isClusterInstallDone(){  return allNodesDone;}  }
class C{  public void error(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public void testDoConfigureSetsDefaultAdminServer() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"//weblogic:admin-server-name",config);}  }
class C{  public void onDetach(){  for (  MvpPresenter<? super Delegated> presenter : mPresenters) {    presenter.detachView(mDelegated);  }  mIsAttached=false;  for (  MvpDelegate<?> childDelegate : mChildDelegates) {    childDelegate.onDetach();  }}  }
class C{  protected OMGraphic objectToOMGraphic(Object obj){  if (obj instanceof OMGraphic) {    return (OMGraphic)obj;  } else {    return null;  }}  }
class C{  @RequestMapping("/start") ResponseEntity<String> start(@RequestParam(value="name",defaultValue="simulated") final String name,@RequestParam(value="amount",defaultValue="20") final int amount,@RequestParam(value="tenant",defaultValue="DEFAULT") final String tenant,@RequestParam(value="api",defaultValue="dmf") final String api,@RequestParam(value="endpoint",defaultValue="http://localhost:8080") final String endpoint,@RequestParam(value="polldelay",defaultValue="1800") final int pollDelay,@RequestParam(value="gatewaytoken",defaultValue="") final String gatewayToken) throws MalformedURLException {  final Protocol protocol;switch (api.toLowerCase()) {case "dmf":    protocol=Protocol.DMF_AMQP;  break;case "ddi":protocol=Protocol.DDI_HTTP;break;default :return ResponseEntity.badRequest().body("query param api only allows value of 'dmf' or 'ddi'");}if (protocol == Protocol.DMF_AMQP && isDmfDisabled()) {return ResponseEntity.badRequest().body("The AMQP interface has been disabled, to use DMF protocol you need to enable the AMQP interface via '" + CONFIGURATION_PREFIX + ".enabled=true'");}for (int i=0; i < amount; i++) {final String deviceId=name + i;repository.add(deviceFactory.createSimulatedDeviceWithImmediatePoll(deviceId,tenant,protocol,pollDelay,new URL(endpoint),gatewayToken));}return ResponseEntity.ok("Updated " + amount + " "+ protocol+ " connected targets!");}  }
class C{  public static Filtrate with(FragmentActivity activity,OnRateListener rateListener){  if (activity == null) {    throw new IllegalArgumentException("Activity can not be null.");  }  Filtrate instance=new Filtrate(activity);  instance.mActivity=activity;  instance.mRateListener=rateListener;  instance.mPrefs=instance.mActivity.getSharedPreferences(PREF_FILENAME,Context.MODE_PRIVATE);  instance.mPrefEditor=instance.mPrefs.edit();  return instance;}  }
class C{  public static String createRequest(HttpServletRequest request,Properties ctx){  String l_szTrxName=null;  String l_szReturn=null;  boolean l_bSuccess=true;  BigDecimal l_bdAmt=getParameterAsBD(request,"RequestAmt");  int l_nOrgID=getParameterAsInt(request,"AD_Org_ID");  int l_nRoleID=getParameterAsInt(request,"AD_Role_ID");  int l_nRReqTypeID=getParameterAsInt(request,"R_RequestType_ID");  int l_nRGroupID=getParameterAsInt(request,"R_Group_ID");  int l_nRCategoryID=getParameterAsInt(request,"R_Category_ID");  int l_nRReqRelID=getParameterAsInt(request,"R_RequestRelated_ID");  int l_nRStatusID=getParameterAsInt(request,"R_Status_ID");  int l_nRResolID=getParameterAsInt(request,"R_Resolution_ID");  int l_nBPartnerID=getParameterAsInt(request,"C_BPartner_ID");  int l_nUserID=getParameterAsInt(request,"AD_User_ID");  int l_nProjectID=getParameterAsInt(request,"C_Project_ID");  int l_nAssetID=getParameterAsInt(request,"A_Asset_ID");  int l_nOrderID=getParameterAsInt(request,"C_Order_ID");  int l_nInvoiceID=getParameterAsInt(request,"C_Invoice_ID");  int l_nProductID=getParameterAsInt(request,"M_Product_ID");  int l_nPaymentID=getParameterAsInt(request,"C_Payment_ID");  int l_nInOutID=getParameterAsInt(request,"M_InOut_ID");  int l_nRMAID=getParameterAsInt(request,"M_RMA_ID");  int l_nCampaignID=getParameterAsInt(request,"C_Campaign_ID");  MRequest newRequest=new MRequest(ctx,0,l_szTrxName);  newRequest.setAD_Org_ID(l_nOrgID);  newRequest.setDueType(getParameterAsString(request,"DueType"));  newRequest.setR_RequestType_ID(l_nRReqTypeID);  newRequest.setR_Group_ID(l_nRGroupID);  newRequest.setR_Category_ID(l_nRCategoryID);  newRequest.setR_RequestRelated_ID(l_nRReqRelID);  newRequest.setR_Status_ID(l_nRStatusID);  newRequest.setR_Resolution_ID(l_nRResolID);  newRequest.setPriority(getParameterAsString(request,"Priority"));  newRequest.setPriorityUser(getParameterAsString(request,"PriorityUser"));  newRequest.setSummary(getParameterAsString(request,"Summary"));  newRequest.setConfidentialType(getParameterAsString(request,"ConfidentialType"));  newRequest.setIsInvoiced(getParameterAsBool(request,"IsInvoiced"));  newRequest.setConfidentialTypeEntry(getParameterAsString(request,"ConfidentialTypeEntry"));  newRequest.setAD_Role_ID(l_nRoleID);  newRequest.setC_BPartner_ID(l_nBPartnerID);  newRequest.setAD_User_ID(l_nUserID);  newRequest.setC_Project_ID(l_nProjectID);  newRequest.setA_Asset_ID(l_nAssetID);  newRequest.setC_Order_ID(l_nOrderID);  newRequest.setC_Invoice_ID(l_nInvoiceID);  newRequest.setM_Product_ID(l_nProductID);  newRequest.setC_Payment_ID(l_nPaymentID);  newRequest.setM_InOut_ID(l_nInOutID);  newRequest.setM_RMA_ID(l_nRMAID);  newRequest.setRequestAmt(l_bdAmt);  newRequest.setC_Campaign_ID(l_nCampaignID);  l_bSuccess&=newRequest.save();  if (l_bSuccess) {    try {      DB.commit(true,l_szTrxName);      l_szReturn="" + newRequest.get_ID();    } catch (    Exception e) {      l_szReturn=e.getMessage();    }  }  return l_szReturn;}  }
class C{  public static int indexOfIgnoreCase(String str,String substring){  return indexOfIgnoreCase(str,substring,Locale.getDefault());}  }
class C{  public static boolean isValidCharacterDataChar(int c){  return (c >= 32 && c <= 55295) || (c >= 57344 && c <= 65533) || (c >= 65536 && c <= 1114111)|| c == 9 || c == 10 || c == 13;}  }
class C{  public StorageUnitEntity createDatabaseEntitiesForBusinessObjectDataDdlTesting(String partitionValue,String s3KeyPrefix){  List<SchemaColumn> schemaColumns=new ArrayList<>();  schemaColumns.add(new SchemaColumn(AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,"DATE",AbstractServiceTest.NO_COLUMN_SIZE,AbstractServiceTest.COLUMN_REQUIRED,AbstractServiceTest.NO_COLUMN_DEFAULT_VALUE,AbstractServiceTest.NO_COLUMN_DESCRIPTION));  schemaColumns.add(new SchemaColumn(AbstractServiceTest.COLUMN_NAME,"NUMBER",AbstractServiceTest.COLUMN_SIZE,AbstractServiceTest.NO_COLUMN_REQUIRED,AbstractServiceTest.COLUMN_DEFAULT_VALUE,AbstractServiceTest.COLUMN_DESCRIPTION));  List<SchemaColumn> partitionColumns=schemaColumns.subList(0,1);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,AbstractServiceTest.NO_PARTITION_KEY_GROUP,AbstractServiceTest.NO_ATTRIBUTES,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumns,partitionColumns);  if (partitionValue != null) {    BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(businessObjectFormatEntity,partitionValue,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    StorageEntity storageEntity=storageDaoTestHelper.createStorageEntity(AbstractServiceTest.STORAGE_NAME,StoragePlatformEntity.S3,Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE)));    return storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity,businessObjectDataEntity,StorageUnitStatusEntity.ENABLED,s3KeyPrefix);  }  return null;}  }
class C{  public Builder clearExtensions(){  localeBuilder.clearExtensions();  return this;}  }
class C{  public static int nextPrime(int n){  if (n < 0) {    throw new IllegalArgumentException();  }  if (n == 2) {    return 2;  }  n|=1;  if (n == 1) {    return 2;  }  if (isPrime(n)) {    return n;  }  final int rem=n % 3;  if (0 == rem) {    n+=2;  } else   if (1 == rem) {    n+=4;  }  while (true) {    if (isPrime(n)) {      return n;    }    n+=2;    if (isPrime(n)) {      return n;    }    n+=4;  }}  }
class C{  public void add(double value){  add(value,1.0d);}  }
class C{  public WeaponAttackAction assignAPDS(List<WeaponHandler> vAttacks){  if (getEntity() == null) {    return null;  }  List<WeaponAttackAction> vAttacksInArc=new Vector<>(vAttacks.size());  for (  WeaponHandler wr : vAttacks) {    boolean isInArc=Compute.isInArc(getEntity().getGame(),getEntity().getId(),getEntity().getEquipmentNum(this),getEntity().getGame().getEntity(wr.waa.getEntityId()));    boolean isInRange=getEntity().getPosition().distance(wr.getWaa().getTarget(getEntity().getGame()).getPosition()) <= 3;    if (isInArc && isInRange) {      vAttacksInArc.add(wr.waa);    }  }  WeaponAttackAction waa=Compute.getHighestExpectedDamage(getEntity().getGame(),vAttacksInArc,true);  if (waa != null) {    waa.addCounterEquipment(this);    return waa;  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void dropTxtMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropTxtMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_TEXT);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public void removeSpec(final Spec spec,final IProgressMonitor aMonitor){  removeSpec(spec,aMonitor,true);}  }
class C{  private static void copyUpperToLowerTriangle(MatrixBlock ret){  double[] c=ret.denseBlock;  final int m=ret.rlen;  final int n=ret.clen;  for (int i=0, uix=0; i < m; i++, uix+=n)   for (int j=i + 1, lix=j * n + i; j < n; j++, lix+=n)   c[lix]=c[uix + j];}  }
class C{  private void scan(Contact contact){  namespace(contact);  scope(contact);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.389 -0500",hash_original_method="0D1F30EAFED4844CCCD5A55529B3095A",hash_generated_method="441EA7E9E201C102C45720B53E5CE668") static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));}  }
class C{  private void verifyConsistencyGroupMigration(BlockConsistencyGroup consistencyGroup,String... types) throws Exception {  log.info("Verifying BlockConsistencyGroup migration for " + consistencyGroup.getLabel());  Assert.assertTrue("The BlockConsistencyGroup.type field should be null.",consistencyGroup.getType().equals(NullColumnValueGetter.getNullStr()));  for (  String type : types) {    Assert.assertNotNull("The " + type + " BlockConsistencyGroup.types field should be populated.",consistencyGroup.getTypes());    Assert.assertTrue("The BlockConsistencyGroup.types field for " + consistencyGroup.getLabel() + " should contain "+ type,consistencyGroup.getTypes().contains(type));    Assert.assertTrue("The local array BlockConsistencyGroup.deviceName field should be null.",consistencyGroup.getDeviceName().equals(NullColumnValueGetter.getNullStr()));  }}  }
class C{  public void addMessageListener(BrokerChangeListener listener){  this.listenerList.add(BrokerChangeListener.class,listener);}  }
class C{  public DoubleMatrix1D viewColumn(int column){  checkColumn(column);  int viewSize=this.rows;  int viewZero=this.rowZero;  int viewStride=this.rowStride;  int[] viewOffsets=this.rowOffsets;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  return new SelectedSparseDoubleMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster streams;  String outputHeader=null;  String streamsHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  int x, y;  int minX=0;  int minY=0;  double minDist=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  streamsHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || streamsHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    streams=new WhiteboxRaster(streamsHeader,"r");    rows=streams.getNumberRows();    cols=streams.getNumberColumns();    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(streams.getCellSizeX() + streams.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=streams.getRowFromYCoordinate(vertices[0][1]);outletCol=streams.getColumnFromXCoordinate(vertices[0][0]);minDist=99999999;minX=outletCol;minY=outletRow;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - outletCol) * (x - outletCol) + (y - outletRow) * (y - outletRow);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}outletX=streams.getXCoordinateFromColumn(minX);outletY=streams.getYCoordinateFromRow(minY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {minDist=99999999;minX=col;minY=row;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - col) * (x - col) + (y - row) * (y - row);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}output.setValue(minY,minX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();streams.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isSecured(Class<?> clazz){  if (clazz == Object.class) {    return false;  }  if (isSecuredEl(clazz)) {    return true;  }  for (  Method m : clazz.getMethods()) {    if (isSecuredEl(m)) {      return true;    }  }  return false;}  }
class C{  public T caseScript_IM(Script_IM object){  return null;}  }
class C{  public boolean isCachedMemory(){  return false;}  }
class C{  @SuppressWarnings("static-access") public String sqlADAction_purgeSystemRecords(String vendorName,String catalogName,String schemaName,String localTableName,ArrayList<String> localColumnNames,ArrayList<String> foreignTableNames,ArrayList<String> foreignColumnNames,boolean hasClientID,ArrayList<String> customEntities,String specialClause){  ArrayList<String> conditions=new ArrayList<String>();  if (hasClientID) {    conditions.add(new StringBuffer("lcltbl.ad_client_id = ").append(s_parameters.SYSTEMCLIENTID).toString());  }  if (specialClause != null && specialClause.length() > 0) {    conditions.add(specialClause);  }  if (customEntities != null && customEntities.size() > 0) {    StringBuffer entityClause=new StringBuffer();    for (int i=0; i < customEntities.size(); i++) {      if (i == 0)       entityClause.append("entitytype NOT IN ("); else       entityClause.append(", ");      entityClause.append("'").append(customEntities.get(i)).append("'");    }    entityClause.append(") ");    conditions.add(entityClause.toString());  }  for (int i=0; i < foreignColumnNames.size(); i++) {    String foreignTableName=foreignTableNames.get(i);    String foreignColumnName=normalizeColumnName(vendorName,foreignColumnNames.get(i));    String localColumnName=normalizeColumnName(vendorName,localColumnNames.get(i));    String subQuery=sql_select(vendorName,catalogName,schemaName,foreignTableName,"frntbl",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList(new StringBuffer("lcltbl.").append(localColumnName).append(" = frntbl.").append(foreignColumnName).toString())),null,false);    conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  }  return sql_delete(vendorName,catalogName,schemaName,localTableName,"lcltbl",conditions,null);}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public static String printCpuInfo(){  String info=FileUtil.getFileOutputString(CPU_INFO_PATH);  return info;}  }
class C{  public LineBorder(){  this(Color.black,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));}  }
class C{  public static int clamp(int value,int minValue,int maxValue){  return Math.max(minValue,Math.min(value,maxValue));}  }
class C{  public List<Certificate> localCertificates(){  return localCertificates;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType, outputShapeType=ShapeType.POLYLINE;  int[] parts={0};  double psi=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  MinimizationCriterion minimizationCriteria=MinimizationCriterion.AREA;  if (args[1].toLowerCase().contains("peri")) {    minimizationCriteria=MinimizationCriterion.PERIMETER;  }  String outputFile=args[2];  if (args[3].toLowerCase().contains("true")) {    outputShapeType=ShapeType.POLYGON;  } else {    outputShapeType=ShapeType.POLYLINE;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    DBFField fields[]=new DBFField[4];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("SHRT_AXIS");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("LNG_AXIS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    fields[3]=new DBFField();    fields[3].setName("ELONGATION");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(10);    fields[3].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    MinimumBoundingRectangle mbr=new MinimumBoundingRectangle(minimizationCriteria);    int recordNum;    if (shapeType.getBaseType() == ShapeType.POLYGON || shapeType.getBaseType() == ShapeType.POLYLINE) {      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        mbr.setCoordinates(vertices);        double[][] points=mbr.getBoundingBox();        Object[] rowData=new Object[4];        rowData[0]=(double)recordNum;        rowData[1]=mbr.getShortAxisLength();        rowData[2]=mbr.getLongAxisLength();        rowData[3]=mbr.getElongationRatio();        Geometry poly;        if (outputShapeType == ShapeType.POLYLINE) {          poly=new PolyLine(parts,points);        } else {          poly=new Polygon(parts,points);        }        output.addRecord(poly,rowData);        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      ArrayList<Double> pointsX=new ArrayList<>();      ArrayList<Double> pointsY=new ArrayList<>();      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        int numVertices=vertices.length;        for (i=0; i < numVertices; i++) {          pointsX.add(vertices[i][0]);          pointsY.add(vertices[i][1]);        }        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          if (cancelOp) {            cancelOperation();            return;          }        }        oldProgress=progress;      }      vertices=new double[pointsX.size()][2];      for (i=0; i < vertices.length; i++) {        vertices[i][0]=pointsX.get(i);        vertices[i][1]=pointsY.get(i);      }      mbr.setCoordinates(vertices);      double[][] points=mbr.getBoundingBox();      Object[] rowData=new Object[4];      rowData[0]=1.0d;      rowData[1]=mbr.getShortAxisLength();      rowData[2]=mbr.getLongAxisLength();      rowData[3]=mbr.getElongationRatio();      Geometry poly;      if (outputShapeType == ShapeType.POLYLINE) {        poly=new PolyLine(parts,points);      } else {        poly=new Polygon(parts,points);      }      output.addRecord(poly,rowData);    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Collection<Facet> computeDomainFacets(Domain domain,DashboardSelection sel) throws ScopeException, InterruptedException, ComputingException {  DomainHierarchy hierarchy=universe.getDomainHierarchy(domain,true);  List<Facet> facets=new ArrayList<>();  HashSet<String> names=new HashSet<>();  for (  DimensionIndex index : hierarchy.getDimensionIndexes()) {    IDomain image=index.getAxis().getDefinitionSafe().getImageDomain();    if (!hierarchy.isSegment(index) && checkHasRole(universe,index.getDimension()) && !image.isInstanceOf(IDomain.OBJECT)) {      if (index.isVisible()) {        Facet facet=computeDimensionFacets(domain,index,sel,null,offset,size);        if (names.contains(facet.getName())) {          facet.setName(facet.getName() + " (" + index.getDimensionPath()+ ")");        }        facets.add(facet);        names.add(facet.getName());      }    }  }  Facet goalFacet=SegmentManager.createSegmentFacet(universe,hierarchy,domain,sel);  if (goalFacet != null && !goalFacet.getItems().isEmpty())   facets.add(goalFacet);  Collections.sort(facets,facetsComparator);  return facets;}  }
class C{  public CompiledScript compile(String script) throws ScriptException {  return compile(new StringReader(script));}  }
class C{  public void doProperties(){  try {    for (    Tradingday tradingday : m_tradingdays.getTradingdays()) {      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        m_brokerModel.onContractDetails(tradestrategy.getContract());      }    }  } catch (  BrokerModelException ex) {    this.setErrorMessage("Could not disconnect From TWS",ex.getMessage(),ex);  }}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public Socks5(InetAddress inetAddress,int port){  this(new InetSocketAddress(inetAddress,port));}  }
class C{  public void appendOnlyFirst(String s){  if (index == 0) {    builder.append(s);  }}  }
class C{  @Override public boolean isCurrency(int column) throws SQLException {  try {    debugCodeCall("isCurrency",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void write(byte[] b,int off,int len){  if (SysProperties.CHECK && (len < 0 || len % Constants.FILE_BLOCK_SIZE != 0)) {    DbException.throwInternalError("unaligned write " + fileName + " len "+ len);  }  try {    FileUtils.writeFully(file,ByteBuffer.wrap(b,off,len));  } catch (  IOException e) {    closeFileSilently();    throw DbException.convertIOException(e,fileName);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GREATER_OP___GREATER_OP_1:    return GREATER_OP_1_EDEFAULT == null ? greaterOp_1 != null : !GREATER_OP_1_EDEFAULT.equals(greaterOp_1);}return super.eIsSet(featureID);}  }
class C{  private void animateItemWidth(){  float newItemWidth;  if (mColorItems.isEmpty()) {    newItemWidth=0f;  } else {    newItemWidth=getMeasuredWidth() / (float)mColorItems.size();  }  if (mItemWidthAnimator.isRunning()) {    mItemWidthAnimator.cancel();  }  mItemWidthAnimator.setFloatValues(mItemWidth,newItemWidth);  mItemWidthAnimator.start();}  }
class C{  public void testNothing(){}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"RestartService")).start();}  }
class C{  public static ClassificationDataSet readC(int classification_target,Path path,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  BufferedReader br=Files.newBufferedReader(path,Charset.defaultCharset());  ClassificationDataSet ret=readC(classification_target,br,delimiter,lines_to_skip,comment,cat_cols);  br.close();  return ret;}  }
class C{  public Pattern indexContentMustMatchPattern(){  if (this.indexcontentmustmatch == null) {    final String r=get(CrawlAttribute.INDEXING_CONTENT_MUSTMATCH.key);    try {      this.indexcontentmustmatch=(r == null || r.equals(CrawlProfile.MATCH_ALL_STRING)) ? CrawlProfile.MATCH_ALL_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.indexcontentmustmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.indexcontentmustmatch;}  }
class C{  public static void main(String[] args) throws Exception {  new ARFFConverter().start(args);}  }
class C{  public static String parse(final BluetoothGattCharacteristic characteristic){  int offset=0;  final int flags=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset++);  final boolean value16bit=(flags & HEART_RATE_VALUE_FORMAT) > 0;  int value=characteristic.getIntValue(value16bit ? BluetoothGattCharacteristic.FORMAT_UINT16 : BluetoothGattCharacteristic.FORMAT_UINT8,offset++);  if (value16bit)   offset++;  final StringBuilder builder=new StringBuilder();  builder.append("Template Measurement: ").append(value).append(" bpm");  return builder.toString();}  }
class C{  public static void openZipFile(String zipFileName,File toDir,boolean deleteAfter){  if (zipFileName != null) {    try {      InputStream in;      if (!toDir.exists()) {        toDir.mkdirs();      }      URL zipurl=PropUtils.getResourceOrFileOrURL(zipFileName);      if (zipurl != null) {        in=new BufferedInputStream(zipurl.openStream());        if (logger.isLoggable(Level.FINE)) {          logger.fine(" unzipping " + zipFileName);        }        ZipInputStream zin=new ZipInputStream(in);        ZipEntry e;        while ((e=zin.getNextEntry()) != null) {          if (e.isDirectory()) {            new File(toDir,e.getName()).mkdirs();          } else {            if (logger.isLoggable(Level.FINE)) {              logger.fine(" unzipping " + e.getName());            }            unzip(zin,new File(toDir,e.getName()));          }        }        zin.close();        if (deleteAfter) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("unzipping complete, deleting zip file");          }          File file=new File(zipurl.getFile());          if (file.exists()) {            file.delete();          }        } else         if (logger.isLoggable(Level.FINE)) {          logger.fine("unzipping complete, leaving zip file");        }        return;      }    } catch (    FileNotFoundException e1) {      e1.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_enum_1_();}  }
class C{  private boolean isEmpty(String value){  return value.length() == 0;}  }
class C{  public int size(){  return content.size();}  }
class C{  public ChartEvent(Object source,Vector<String> legendText,double min,double max,double[] dataPoint,boolean reset){  super(source);  m_legendText=legendText;  m_max=max;  m_min=min;  m_dataPoint=dataPoint;  m_reset=reset;}  }
class C{  public VarMap(){}  }
class C{  public void upload(String message){  try {    this.send(message);  } catch (  NotYetConnectedException ex) {    Log.e(TAG,ex.getLocalizedMessage());  }}  }
class C{  public void readButtonActionPerformed(){  idBox.setSelectedIndex(0);  memo.getLnTrafficController().sendLocoNetMessage(createReadPacket());}  }
class C{  public CircularQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public void push(final DigestURL url,final int crawldepth,final CrawlProfile profile,final FailCategory failCategory,String anycause,final int httpcode){  assert failCategory.store || httpcode == -1 : "failCategory=" + failCategory.name();  if (anycause == null)   anycause="unknown";  final String reason=anycause + ((httpcode >= 0) ? " (http return code = " + httpcode + ")" : "");  if (!reason.startsWith("double"))   log.info(url.toNormalform(true) + " - " + reason);  if (!this.cache.containsKey(ASCII.String(url.hash()))) {    CollectionConfiguration.FailDoc failDoc=new CollectionConfiguration.FailDoc(url,profile == null ? null : profile.collections(),failCategory.name() + " " + reason,failCategory.failType,httpcode,crawldepth);    if (this.sb.index.fulltext().getDefaultConnector() != null && failCategory.store && !RobotsTxt.isRobotsURL(url)) {      try {        SolrDocument olddoc=this.sb.index.fulltext().getDefaultConnector().getDocumentById(ASCII.String(failDoc.getDigestURL().hash()),CollectionSchema.httpstatus_i.getSolrFieldName());        if (olddoc == null || olddoc.getFieldValue(CollectionSchema.httpstatus_i.getSolrFieldName()) == null || ((Integer)olddoc.getFieldValue(CollectionSchema.httpstatus_i.getSolrFieldName())) == 200) {          SolrInputDocument errorDoc=failDoc.toSolr(this.sb.index.fulltext().getDefaultConfiguration());          this.sb.index.fulltext().getDefaultConnector().add(errorDoc);        }      } catch (      final IOException e) {        ConcurrentLog.warn("SOLR","failed to send error " + url.toNormalform(true) + " to solr: "+ e.getMessage());      }    }synchronized (this.cache) {      this.cache.put(ASCII.String(url.hash()),failDoc);    }    checkStackSize();  }}  }
class C{  private ProcessDefinition createProcessDefinition(String namespace,String jobName,String activitiJobXml){  String activitiIdString=jobDefinitionHelper.buildActivitiIdString(namespace,jobName);  Deployment deployment=activitiRepositoryService.createDeployment().name(activitiIdString).addString(activitiIdString + ACTIVITI_DEPLOY_XML_SUFFIX,activitiJobXml).deploy();  return activitiRepositoryService.createProcessDefinitionQuery().deploymentId(deployment.getId()).list().get(0);}  }
class C{  public static String[] trimItems(String[] arr){  for (int i=0; i < arr.length; i++) {    arr[i]=arr[i].trim();  }  return arr;}  }
class C{  public void updateLong(int columnIndex,long x) throws SQLException {  throw new NotUpdatable();}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("Alert.alert: " + level + " "+ description);  }  this.alert[0]=level;  this.alert[1]=description;}  }
class C{  private ReadWriteLockManager(final ICheckpointProtocol index){  if (this.readOnly=index.isReadOnly()) {    this.readLock=READ_ONLY_LOCK;    this.writeLock=null;  } else {    final ReadWriteLock readWriteLock=new ReentrantReadWriteLock(false);    this.readLock=new WrappedReadLock(readWriteLock.readLock());    this.writeLock=new WrappedWriteLock(readWriteLock.writeLock());  }}  }
class C{  public final boolean hasAction(String action){  return action != null && mActions.contains(action);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public void testGetName(){  String expectedReturn="REQUESTED-ADDRESS-FAMILY";  String actualReturn=requestedAddressFamilyAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  private void commandPartChannel(String channel){  if (channel == null || channel.isEmpty()) {    g.printLine("No channel to leave.");  } else {    closeChannel(channel);  }}  }
class C{  public SyntaxScheme(Font baseFont){  styles=new Style[Token.NUM_TOKEN_TYPES];  restoreDefaults(baseFont);}  }
class C{  public RatedSorter(boolean ascending){  super(ascending);}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  protected TestEvent(final String sessionId){  this.sessionId=checkNotNull(sessionId,"sessionId");}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();case CREATE_TIME:  return isSetCreateTime();case UPDATE_TIME:return isSetUpdateTime();case OPERATION:return isSetOperation();case STATUS:return isSetStatus();case SRC_PATH:return isSetSrcPath();case SRC_CLUSTER:return isSetSrcCluster();case SRC_DB:return isSetSrcDb();case SRC_TABLE:return isSetSrcTable();case SRC_PARTITIONS:return isSetSrcPartitions();case SRC_MODIFIED_TIME:return isSetSrcModifiedTime();case RENAME_TO_DB:return isSetRenameToDb();case RENAME_TO_TABLE:return isSetRenameToTable();case RENAME_TO_PATH:return isSetRenameToPath();case EXTRAS:return isSetExtras();case WAITING_ON_JOBS:return isSetWaitingOnJobs();}throw new IllegalStateException();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String fieldName;  int fieldNum=0;  String assignmentType;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double xCoord, yCoord, value, z;  int progress;  double cellSize=-1.0;  int rows;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  boolean useRecID=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  fieldName=args[2];  assignmentType=args[3].toLowerCase();  if (args[4].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[4]);  }  if (!args[5].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[5]);  }  baseFileHeader=args[6];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    if (input.getShapeType() != ShapeType.POINT && input.getShapeType() != ShapeType.POINTZ && input.getShapeType() != ShapeType.POINTM && input.getShapeType() != ShapeType.MULTIPOINT && input.getShapeType() != ShapeType.MULTIPOINTZ && input.getShapeType() != ShapeType.MULTIPOINTM) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (int i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(fieldName)) {        fieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (fieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      rows=output.getNumberRows();      cols=output.getNumberColumns();    }    double[][] geometry;    if (assignmentType.equals("minimum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            value=Double.valueOf(data[fieldNum].toString());            z=output.getValue(row,col);            if (z == backgroundValue || z < value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("maximum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue || z > value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("sum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            } else {              output.setValue(row,col,value + z);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("first")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("last")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            output.setValue(row,col,value);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("mean")) {    } else     if (assignmentType.equals("range")) {    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int stringToInt(String str){  return stringToInt(str,0);}  }
class C{  public static void enable(long period,TimeUnit unit){  enable(Metrics.defaultRegistry(),period,unit);}  }
class C{  @Override public void buildStructure(BayesNet bayesNet,Instances instances) throws Exception {  m_BayesNet=bayesNet;  m_bInitAsNaiveBayes=true;  m_nMaxNrOfParents=2;  super.buildStructure(bayesNet,instances);  int nNrOfAtts=instances.numAttributes();  int nClassNode=instances.classIndex();  int[] link1=new int[nNrOfAtts - 1];  int[] link2=new int[nNrOfAtts - 1];  boolean[] linked=new boolean[nNrOfAtts];  int nBestLinkNode1=-1;  int nBestLinkNode2=-1;  double fBestDeltaScore=0.0;  int iLinkNode1;  for (iLinkNode1=0; iLinkNode1 < nNrOfAtts; iLinkNode1++) {    if (iLinkNode1 != nClassNode) {      for (int iLinkNode2=0; iLinkNode2 < nNrOfAtts; iLinkNode2++) {        if ((iLinkNode1 != iLinkNode2) && (iLinkNode2 != nClassNode)) {          double fScore=calcScoreWithExtraParent(iLinkNode1,iLinkNode2);          if ((nBestLinkNode1 == -1) || (fScore > fBestDeltaScore)) {            fBestDeltaScore=fScore;            nBestLinkNode1=iLinkNode2;            nBestLinkNode2=iLinkNode1;          }        }      }    }  }  link1[0]=nBestLinkNode1;  link2[0]=nBestLinkNode2;  linked[nBestLinkNode1]=true;  linked[nBestLinkNode2]=true;  for (int iLink=1; iLink < nNrOfAtts - 2; iLink++) {    nBestLinkNode1=-1;    for (iLinkNode1=0; iLinkNode1 < nNrOfAtts; iLinkNode1++) {      if (iLinkNode1 != nClassNode) {        for (int iLinkNode2=0; iLinkNode2 < nNrOfAtts; iLinkNode2++) {          if ((iLinkNode1 != iLinkNode2) && (iLinkNode2 != nClassNode) && (linked[iLinkNode1] || linked[iLinkNode2])&& (!linked[iLinkNode1] || !linked[iLinkNode2])) {            double fScore=calcScoreWithExtraParent(iLinkNode1,iLinkNode2);            if ((nBestLinkNode1 == -1) || (fScore > fBestDeltaScore)) {              fBestDeltaScore=fScore;              nBestLinkNode1=iLinkNode2;              nBestLinkNode2=iLinkNode1;            }          }        }      }    }    link1[iLink]=nBestLinkNode1;    link2[iLink]=nBestLinkNode2;    linked[nBestLinkNode1]=true;    linked[nBestLinkNode2]=true;  }  boolean[] hasParent=new boolean[nNrOfAtts];  for (int iLink=0; iLink < nNrOfAtts - 2; iLink++) {    if (!hasParent[link1[iLink]]) {      bayesNet.getParentSet(link1[iLink]).addParent(link2[iLink],instances);      hasParent[link1[iLink]]=true;    } else {      if (hasParent[link2[iLink]]) {        throw new Exception("Bug condition found: too many arrows");      }      bayesNet.getParentSet(link2[iLink]).addParent(link1[iLink],instances);      hasParent[link2[iLink]]=true;    }  }}  }
class C{  public static void sendDirect(final PacketOutputStream writer,byte[] sqlBytes) throws IOException, QueryException {  writer.sendDirect(sqlBytes,0,sqlBytes.length,Packet.COM_QUERY);}  }
class C{  public int readBit() throws IOException {  return readFromCurrent(1);}  }
class C{  private static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  int halfWidth=width >> 1;  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN_REVERSE.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=height - 1; i > 0; i-=rowStep) {    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[1],i);      result[4]=new ResultPoint(loc[0],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[1],i);        result[5]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN_REVERSE.length];  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[0],i);        result[6]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[0],i);        result[7]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  private static void updateParseCache(String key,Long value){  if (value == null) {    return;  }  if (parseCache.size() > CACHE_SIZE) {    parseCache.clear();  }  parseCache.put(key,value);}  }
class C{  static int decode2ByteInt(byte[] data,int pos){  return (((data[pos] & 0xFF) << 8) | (data[pos + 1] & 0xFF));}  }
class C{  @Override protected void doPost(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (req.getRequestURI().endsWith("/namespace")) {    doCreateNamespace(req,resp);    return;  } else   if (req.getRequestURI().endsWith("/prepareProperties")) {    doPrepareProperties(req,resp);    return;  }  final String namespace=getNamespace(req);  if (req.getRequestURI().endsWith(ConnectOptions.urlEncode(namespace) + "/textIndex")) {    doRebuildTextIndex(req,resp,namespace);    return;  }  m_restServlet.doPost(req,resp);}  }
class C{  public void writeToLuceneStream(IndexOutput outputStream,int k){  if (isSparse) {    elementalToSemantic();  }  long[] bitArray=bitSet.getBits();  for (int i=0; i < k / 64; i++) {    try {      outputStream.writeLong(bitArray[i]);    } catch (    IOException e) {      logger.severe("Couldn't write binary vector to lucene output stream.");      e.printStackTrace();    }  }}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (valueToConvert instanceof BigDecimal) {    return valueToConvert.toString();  }  throw new IllegalArgumentException("The source object must be of type: " + getSourceType().getName());}  }
class C{  public static AndroidCheckinRequest generateAndroidCheckinRequest(){  return AndroidCheckinRequest.newBuilder().setId(0).setCheckin(AndroidCheckinProto.newBuilder().setBuild(AndroidBuildProto.newBuilder().setId("google/angler/angler:6.0.1/MTC19T/2741993:user/release-keys").setProduct("angler").setCarrier("Google").setRadio("angler-03.61").setBootloader("angler-03.51").setClient("android-google").setTimestamp(new Date().getTime() / 1000).setGoogleServices(16).setDevice("angler").setSdkVersion(23).setModel("angler").setManufacturer("Huawei").setBuildProduct("angler").setOtaInstalled(false)).setLastCheckinMsec(0).setCellOperator("310260").setSimOperator("310260").setRoaming("mobile-notroaming").setUserNumber(0)).setLocale("en_US").setTimeZone("Europe/Amsterdam").setVersion(3).setDeviceConfiguration(getDeviceConfigurationProto()).setFragment(0).build();}  }
class C{  public synchronized float recordSuccess(){  ringBitSet.setNextBit(false);  return getFailureRate();}  }
class C{  static Change normalizeCompositeChange(final CompositeChange change){  for (  final Change childChange : change.getChildren()) {    if (childChange instanceof NullChange) {      change.remove(childChange);    }  }  return change.getChildren().length > 0 ? change : new NullChange();}  }
class C{  public int compare(DataPoint o1,DataPoint o2){  double difference=o1.get(dimension) - o2.get(dimension);  if (difference < 0) {    return -1;  } else   if (difference > 0) {    return 1;  } else {    return 0;  }}  }
class C{  public PerfDataBuffer(VmIdentifier vmid) throws MonitorException {  File f=new File(vmid.getURI());  String mode=vmid.getMode();  try {    FileChannel fc=new RandomAccessFile(f,mode).getChannel();    ByteBuffer bb=null;    if (mode.compareTo("r") == 0) {      bb=fc.map(FileChannel.MapMode.READ_ONLY,0L,(int)fc.size());    } else     if (mode.compareTo("rw") == 0) {      bb=fc.map(FileChannel.MapMode.READ_WRITE,0L,(int)fc.size());    } else {      throw new IllegalArgumentException("Invalid mode: " + mode);    }    fc.close();    createPerfDataBuffer(bb,0);  } catch (  FileNotFoundException e) {    throw new MonitorException("Could not find " + vmid.toString());  }catch (  IOException e) {    throw new MonitorException("Could not read " + vmid.toString());  }}  }
class C{  public IValueExpression subject(){  return subject;}  }
class C{  public static String toString(String methodSignature,String methodName,String[] parameterNames,boolean fullyQualifyTypeNames,boolean includeReturnType){  return toString(methodSignature,methodName,parameterNames,fullyQualifyTypeNames,includeReturnType,false);}  }
class C{  public LwM2mPath(int objectId,int objectInstanceId,int resourceId,int resourceInstanceId){  this.objectId=objectId;  this.objectInstanceId=objectInstanceId;  this.resourceId=resourceId;  this.resourceInstanceId=resourceInstanceId;}  }
class C{  private void updateColor(){  try {    BreakpointConditionParser.evaluate(inputField.getText());    inputField.setBackground(Color.WHITE);  } catch (  final InvalidFormulaException e) {    inputField.setBackground(Color.RED);  }}  }
class C{  public Object[] toArray(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    Object[] a=new Object[count];    int n=items.length - takeIndex;    if (count <= n) {      System.arraycopy(items,takeIndex,a,0,count);    } else {      System.arraycopy(items,takeIndex,a,0,n);      System.arraycopy(items,0,a,n,count - n);    }    return a;  }  finally {    lock.unlock();  }}  }
class C{  private void sendUnknownCommand(Player player){  Messages.UNKNOWN_COMMAND.send(player);}  }
class C{  @Override public String toString(){  if (!isQueryValid())   return null;  StringBuilder builder=new StringBuilder().append("Find all ").append(Ruqus.getClassData().visibleNameOf(queryClass));  if (!conditions.isEmpty()) {    builder.append(" where ");    for (int i=0; i < conditions.size(); i++) {      Condition previous=i - 1 >= 0 ? conditions.get(i - 1) : null;      Condition current=conditions.get(i);      Condition next=i + 1 < conditions.size() ? conditions.get(i + 1) : null;      String conditionPart=current.makeReadableString(previous,next);      builder.append(conditionPart);      if (next == null) {        builder.append(".");        continue;      }      if (isNoneOf(current,BEGIN_GROUP,NOT) && isNoneOf(next,END_GROUP))       builder.append(" ");      if (isNoneOf(current,BEGIN_GROUP,NOT,OR) && isAnyOf(next,NORMAL,NO_ARGS,BEGIN_GROUP,NOT))       builder.append("and ");    }  } else   builder.append(".");  if (!sortFields.isEmpty())   builder.append(" Sort the results by ").append(getSortString());  return builder.toString();}  }
class C{  private static int sumRowSumGtLeColSumLtGe(double value,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int ix=Arrays.binarySearch(bv,value);  int cnt=0;  if (ix >= 0) {    while (ix > 0 && value == bv[ix - 1])     --ix;    ix++;  }  cnt=bv.length - Math.abs(ix) + 1;  if ((bOp.fn instanceof LessThan) || (bOp.fn instanceof GreaterThan))   cnt=bv.length - cnt;  return cnt;}  }
class C{  public final void testValidateWhenValidationSucceeds(){  ValidationListenerImplementation validationListener1=new ValidationListenerImplementation();  ValidationListenerImplementation validationListener2=new ValidationListenerImplementation();  CharSequence errorMessage="errorMessage";  Validator<CharSequence> validator=Validators.notEmpty(errorMessage);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidationListener(validationListener1);  abstractValidateableView.addValidationListener(validationListener1);  abstractValidateableView.addValidationListener(validationListener2);  abstractValidateableView.removeValidationListener(validationListener2);  abstractValidateableView.addValidator(validator);  abstractValidateableView.getView().setText("text");  assertTrue(abstractValidateableView.validate());  assertNull(abstractValidateableView.getError());  assertTrue(validationListener1.hasOnValidationSuccessBeenCalled());  assertFalse(validationListener2.hasOnValidationSuccessBeenCalled());  assertFalse(abstractValidateableView.isActivated());  assertFalse(abstractValidateableView.getView().isActivated());}  }
class C{  protected void registerSimpleListener(){  settingsGui.registerListener(MOVE_ROTATION_NOISE_KEY,this);  settingsGui.registerListener(MOVE_DISTANCE_NOISE_KEY,this);  settingsGui.registerListener(RANGE_READING_NOISE_KEY,this);  settingsGui.registerListener(MIN_MOVE_DISTANCE_KEY,this);  settingsGui.registerListener(MAX_MOVE_DISTANCE_KEY,this);  settingsGui.registerListener(BAD_DELTA_KEY,this);}  }
class C{  public SourcePackage(SourcePackageBO sourcePackageBO,List<GenericTrack> genericTracks,GenericDescriptor genericDescriptor){  super(sourcePackageBO);  this.sourcePackageBO=sourcePackageBO;  this.genericTracks=genericTracks;  this.genericDescriptor=genericDescriptor;}  }
class C{  public boolean inFanInOfSomeNode(final Synapse synapse){  boolean ret=false;  for (  Neuron neuron : neuronList) {    if (neuron.getFanIn().contains(synapse)) {      ret=true;    }  }  return ret;}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public static boolean isCompilationConstant(Object value){  return CompilerDirectives.inInterpreter();}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName(),getMask(actions));}  }
class C{  @Bean public ViewResolver reactViewResolver(){  ScriptTemplateViewResolver viewResolver=new ScriptTemplateViewResolver();  viewResolver.setPrefix("templates/");  viewResolver.setSuffix(".ejs");  return viewResolver;}  }
class C{  public void addUndoPoint() throws Exception {  if (!ExplorerDefaults.get("enableUndo","true").equalsIgnoreCase("true")) {    return;  }  if (m_Instances != null) {    File tempFile=File.createTempFile("weka",SerializedInstancesLoader.FILE_EXTENSION);    tempFile.deleteOnExit();    if (!ExplorerDefaults.get("undoDirectory","%t").equalsIgnoreCase("%t")) {      String dir=ExplorerDefaults.get("undoDirectory","%t");      File undoDir=new File(dir);      if (undoDir.exists()) {        String fileName=tempFile.getName();        File newFile=new File(dir + File.separator + fileName);        if (undoDir.canWrite()) {          newFile.deleteOnExit();          tempFile=newFile;        } else {          System.err.println("Explorer: it doesn't look like we have permission" + " to write to the user-specified undo directory " + "'" + dir + "'");        }      } else {        System.err.println("Explorer: user-specified undo directory '" + dir + "' does not exist!");      }    }    ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));    oos.writeObject(m_Instances);    oos.flush();    oos.close();    if (m_tempUndoFiles[m_tempUndoIndex] != null) {      m_tempUndoFiles[m_tempUndoIndex].delete();    }    m_tempUndoFiles[m_tempUndoIndex]=tempFile;    if (++m_tempUndoIndex >= m_tempUndoFiles.length) {      m_tempUndoIndex=0;    }    m_UndoBut.setEnabled(true);  }}  }
class C{  @EventHandler public void onPlayerChangeContainer(PlayerContainerChangeStateEvent event){  PlayerContainerData newData=event.getNewData();  if (newData.getMatchThread() != null) {    scoreboards.get(newData.getMatchThread().getCurrentMatch()).updatePlayer(event.getPlayer(),newData);  }}  }
class C{  private void createImage(final String mapName){  m_image=Toolkit.getDefaultToolkit().createImage(mapName);  Util.ensureImageLoaded(m_image);}  }
class C{  private String returnTypeFromProtoIndex(int idx){  ProtoIdItem protoId=mProtoIds[idx];  return mStrings[mTypeIds[protoId.returnTypeIdx].descriptorIdx];}  }
class C{  public boolean matches(Utterance utterance){  final CharSequence text=StringBuilderUtils.getAggregateText(utterance.getSpoken());  for (  CharSequenceFilter textFilter : mTextFilters) {    if (!textFilter.matches(text)) {      return false;    }  }  return true;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  Vector<DerValue> v=new Vector<>();  DerOutputStream temp=new DerOutputStream();  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),ctime.asn1Encode()));  temp.putInteger(BigInteger.valueOf(cusec));  v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp.toByteArray()));  if (subKey != null) {    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),subKey.asn1Encode()));  }  if (seqNumber != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));    v.addElement(new DerValue(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),temp.toByteArray()));  }  DerValue der[]=new DerValue[v.size()];  v.copyInto(der);  temp=new DerOutputStream();  temp.putSequence(der);  DerOutputStream out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x1B),temp);  return out.toByteArray();}  }
class C{  public Sound(@Nonnull URL url) throws NullPointerException {  if (url == null) {    throw new NullPointerException();  }  this.url=url;  try {    this.clip=AudioSystem.getClip();    streaming=this.needStreaming();    if (!streaming) {      this.clip.open(AudioSystem.getAudioInputStream(this.url));    }  } catch (  URISyntaxException ex) {    streaming=false;  }catch (  IOException ex) {    log.error("Unable to open {}",url);  }catch (  LineUnavailableException ex) {    log.error("Unable to provide audio playback",ex);  }catch (  UnsupportedAudioFileException ex) {    log.error("{} is not a recognised audio format",url);  }}  }
class C{  public static boolean isDiscover(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first4digs.equals("6011")))   return isCreditCard(cc);  return false;}  }
class C{  public Vector transform2D(double angle,double aboutX,double aboutZ,double translateX,double translateZ){  angle=Math.toRadians(angle);  double x=this.x - aboutX;  double z=this.z - aboutZ;  double x2=x * Math.cos(angle) - z * Math.sin(angle);  double z2=x * Math.sin(angle) + z * Math.cos(angle);  return new Vector(x2 + aboutX + translateX,y,z2 + aboutZ + translateZ);}  }
class C{  private void notifyPlayerAboutReachedAchievements(Player player,List<Achievement> achievementsToNotifyAbout){  for (  Achievement achievement : achievementsToNotifyAbout) {    notifyPlayerAboutReachedAchievement(player,achievement);  }}  }
class C{  public PodAppBuilder(){  _podName="pod";  PodConfigLocal podLocal=_podContainer.getPodLocal(_podName);  for (  PathImpl path : podLocal.getClassPath()) {    if (!path.exists()) {      continue;    }    if (path.getTail().endsWith(".jar")) {      new SimpleLoader(_classLoader,path).init();    } else     if (path.isDirectory()) {      new CompilingLoader(_classLoader,path).init();    }  }  getPodApp().initConstructor();}  }
class C{  public static String bytesToUtf8(final byte[] ba){  return bytesToEncoding(ba,"UTF8");}  }
class C{  public static Map<String,String> parseErrorAttributes(String parsedMessage){  try {    JSONValue message=JSONParser.parseStrict(parsedMessage).isObject().get("attributes");    return toMap(message.isObject().toString());  } catch (  Exception e) {    return Collections.emptyMap();  }}  }
class C{  public void invalidateUi(){  if (Looper.getMainLooper() == Looper.myLooper()) {    invalidate();  } else {    postInvalidate();  }}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(Color.parseColor("#52ce90"));  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  private void processDependencies(GridField changedField){  String columnName=changedField.getColumnName();  for (  GridField field : m_mFields) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }  for (  GridField field : m_mFields2) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }}  }
class C{  public static HashMap<String,String> parseMap(String s){  HashMap<String,String> map=New.hashMap();  for (int i=0, size=s.length(); i < size; ) {    int startKey=i;    i=s.indexOf(':',i);    if (i < 0) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);    }    String key=s.substring(startKey,i++);    StringBuilder buff=new StringBuilder();    while (i < size) {      char c=s.charAt(i++);      if (c == ',') {        break;      } else       if (c == '\"') {        while (i < size) {          c=s.charAt(i++);          if (c == '\\') {            if (i == size) {              throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);            }            c=s.charAt(i++);          } else           if (c == '\"') {            break;          }          buff.append(c);        }      } else {        buff.append(c);      }    }    map.put(key,buff.toString());  }  return map;}  }
class C{  public static int placeQueens(){  return (int)(Math.random() * 64);}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  private void paintRestorePressed(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintPressed(g,c,width,height);}  }
class C{  private static String loadContents(Object fileData) throws IOException {  String path=Draft3FileValueHelper.getPath(fileData);  InputStream is=null;  try {    File file=new File(path);    is=new FileInputStream(file);    byte[] buffer=new byte[Math.min(CONTENTS_NUMBER_OF_BYTES,(int)file.length())];    is.read(buffer);    return new String(buffer,"UTF-8");  }  finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private void newline(){  print(System.lineSeparator());}  }
class C{  public boolean isClosedOk(){  return m_closedByOk;}  }
class C{  public static boolean ccc4FEqual(ccColor4F a,ccColor4F b){  return a.r == b.r && a.g == b.g && a.b == b.b && a.a == b.a;}  }
class C{  public static void log(final String msg){  if (DEBUG) {    System.out.println("Comparator:" + msg);  }}  }
class C{  @Override public String toString(){  if (!m_ModelBuilt) {    return "Linear Regression: No model built yet.";  }  if (m_Minimal) {    return "Linear Regression: Model built.";  }  try {    StringBuilder text=new StringBuilder();    int column=0;    boolean first=true;    text.append("\nLinear Regression Model\n\n");    text.append(m_TransformedData.classAttribute().name() + " =\n\n");    for (int i=0; i < m_TransformedData.numAttributes(); i++) {      if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {        if (!first) {          text.append(" +\n");        } else {          first=false;        }        text.append(Utils.doubleToString(m_Coefficients[column],12,4) + " * ");        text.append(m_TransformedData.attribute(i).name());        column++;      }    }    text.append(" +\n" + Utils.doubleToString(m_Coefficients[column],12,4));    if (m_outputAdditionalStats) {      int maxAttLength=0;      for (int i=0; i < m_TransformedData.numAttributes(); i++) {        if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {          if (m_TransformedData.attribute(i).name().length() > maxAttLength) {            maxAttLength=m_TransformedData.attribute(i).name().length();          }        }      }      maxAttLength+=3;      if (maxAttLength < "Variable".length() + 3) {        maxAttLength="Variable".length() + 3;      }      text.append("\n\nRegression Analysis:\n\n" + Utils.padRight("Variable",maxAttLength) + "  Coefficient     SE of Coef        t-Stat");      column=0;      for (int i=0; i < m_TransformedData.numAttributes(); i++) {        if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {          text.append("\n" + Utils.padRight(m_TransformedData.attribute(i).name(),maxAttLength));          text.append(Utils.doubleToString(m_Coefficients[column],12,4));          text.append("   " + Utils.doubleToString(m_StdErrorOfCoef[column],12,5));          text.append("   " + Utils.doubleToString(m_TStats[column],12,5));          column++;        }      }      text.append(Utils.padRight("\nconst",maxAttLength + 1) + Utils.doubleToString(m_Coefficients[column],12,4));      text.append("   " + Utils.doubleToString(m_StdErrorOfCoef[column],12,5));      text.append("   " + Utils.doubleToString(m_TStats[column],12,5));      text.append("\n\nDegrees of freedom = " + Integer.toString(m_df));      text.append("\nR^2 value = " + Utils.doubleToString(m_RSquared,5));      text.append("\nAdjusted R^2 = " + Utils.doubleToString(m_RSquaredAdj,5));      text.append("\nF-statistic = " + Utils.doubleToString(m_FStat,5));    }    return text.toString();  } catch (  Exception e) {    return "Can't print Linear Regression!";  }}  }
class C{  private VarSymbol makeSyntheticVar(long flags,Name name,Type type,Symbol owner){  return new VarSymbol(flags | SYNTHETIC,name,type,owner);}  }
class C{  private EvaluationStrategies(){}  }
class C{  public static int equalsOne(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    if (src.equals(dest[i])) {      return i;    }  }  return -1;}  }
class C{  private void basicPutGrantToken(DLockGrantToken grantToken){  this.grantTokens.put(grantToken.getName(),grantToken);  dlock.getStats().incGrantTokens(1);}  }
class C{  public T transformer(Transformer transformer){  trans=transformer;  return self();}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return TypesPackage.PARAMETER__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (baseFeatureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:  return TypesPackage.PARAMETER__ANNOTATIONS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void removeScriptingListeners(Node node){  if (node.getNodeType() == Node.ELEMENT_NODE) {    removeScriptingListenersOn((Element)node);  }  for (Node n=node.getFirstChild(); n != null; n=n.getNextSibling()) {    removeScriptingListeners(n);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.122 -0500",hash_original_method="757B0B5247A462A428C431641FB2F7EC",hash_generated_method="01D5C22C4DBCD3465D3B96462517B329") public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHORIZATION);  ProxyAuthorization proxyAuth=new ProxyAuthorization();  super.parse(proxyAuth);  return proxyAuth;}  }
class C{  public void testPalyndrome3() throws Exception {  query=new PhraseQuery(0,"field","one","two","three");  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals("phrase found with exact phrase scorer",1,hits.length);  float score0=hits[0].score;  QueryUtils.check(random(),query,searcher);  searcher.explain(query,0);  query=new PhraseQuery(4,"field","one","two","three");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  float score1=hits[0].score;  assertEquals("exact scorer and sloppy scorer score the same when slop does not matter",score0,score1,SCORE_COMP_THRESH);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(4,"palindrome","one","two","three");  hits=searcher.search(query,1000).scoreDocs;  searcher.explain(query,0);  assertEquals("just sloppy enough",1,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(4,"palindrome","three","two","one");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  QueryUtils.check(random(),query,searcher);}  }
class C{  public void filterInputEvent(InputEvent event,int policyFlags) throws RemoteException {  if (SYSTRACE) {    Trace.traceBegin(Trace.TRACE_TAG_INPUT,"filterInputEvent");  }  try {    if (((event.getSource() & InputDevice.SOURCE_TOUCHSCREEN) != InputDevice.SOURCE_TOUCHSCREEN) || !(event instanceof MotionEvent)) {      sendInputEvent(event,policyFlags);      return;    }    if (DEBUG_INPUT) {      Slog.d(TAG,"Received event: " + event + ", policyFlags=0x"+ Integer.toHexString(policyFlags));    }    MotionEvent motionEvent=(MotionEvent)event;    final int deviceId=event.getDeviceId();    if (deviceId != mDeviceId) {      processDeviceSwitch(deviceId,motionEvent,policyFlags);    } else {      if ((policyFlags & WindowManagerPolicy.FLAG_PASS_TO_USER) == 0) {synchronized (mLock) {          clearAndResetStateLocked(false,true);        }      }      processMotionEvent(motionEvent,policyFlags);    }  }  finally {    event.recycle();    if (SYSTRACE) {      Trace.traceEnd(Trace.TRACE_TAG_INPUT);    }  }}  }
class C{  private static void ensureRedirectUriIsAuthorized(final AuthorizationRequest authorizationRequest,final ClientDetailsEntity client){  if (!Strings.isNullOrEmpty(authorizationRequest.getRedirectUri())) {    boolean found=false;    final Iterator<String> it=client.getRedirectUris().iterator();    while (!found && it.hasNext()) {      found=it.next().equals(authorizationRequest.getRedirectUri());    }    if (!found) {      throw new OIDCException("Redirect uri in the authorization request " + authorizationRequest.getRedirectUri() + " is not registered for client "+ client.getClientId());    }  }}  }
class C{  protected int doTransfer(byte[] buffer){  int length=-1;  try {    length=source.read(buffer);    if (length > 0) {      destination.write(buffer,0,length);      destination.flush();      for (int i=0; i < pipeListeners.size(); i++) {        pipeListeners.get(i).onTransfer(this,buffer,length);      }    }  } catch (  IOException e) {    for (int i=0; i < pipeListeners.size(); i++) {      pipeListeners.get(i).onError(this,e);    }    stop();  }  return length;}  }
class C{  public void offerToHead(T item,double count){  Counter<T> c=new Counter<T>(item,count);  counterList.addFirst(c);  counterMap.put(c.item,c);}  }
class C{  public ImmutableTriple(final L left,final M middle,final R right){  super();  this.left=left;  this.middle=middle;  this.right=right;}  }
class C{  public boolean isValidName(final String name){  if (name == null) {    return false;  }  if (name.trim().isEmpty()) {    return false;  }  for (  Perspective perspective : perspectives.values()) {    if (perspective.getName().toLowerCase().equals(name.toLowerCase())) {      return false;    }  }  return true;}  }
class C{  public void init(CipherParameters key) throws IllegalArgumentException {  if (!(key instanceof RSAKeyParameters)) {    throw new IllegalArgumentException("RSA key required");  }  this.key=(RSAKeyParameters)key;}  }
class C{  public void addItem(Treeitem treeitem){  Object value=treeitem.getValue();  if (value != null) {    int Node_ID=Integer.valueOf(value.toString());    if (barDBupdate(true,Node_ID)) {      String label=treeitem.getLabel().trim();      ToolBarButton btnFavItem=new ToolBarButton(String.valueOf(Node_ID));      btnFavItem.setLabel(label);      btnFavItem.setImage(treeitem.getImage());      btnFavItem.setDraggable(DELETE_FAV_DROPPABLE);      btnFavItem.addEventListener(Events.ON_CLICK,this);      btnFavItem.addEventListener(Events.ON_DROP,this);      bxFav.appendChild(btnFavItem);      bxFav.removeChild(lblMsg);      bxFav.invalidate();    } else {      if (DBException.isUniqueContraintError(CLogger.retrieveException()))       FDialog.error(0,this,"BookmarkExist",null);    }  }}  }
class C{  public boolean next() throws Exception {  if (m_Classifier instanceof IterativeClassifier)   return ((IterativeClassifier)m_Classifier).next(); else   throw new Exception("Classifier: " + getClassifierSpec() + " is not an IterativeClassifier");}  }
class C{  public DERGeneralizedTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Record))   return false;  Record other=(Record)o;  return (name == null ? other.name == null : name.equals(other.name)) && (type == null ? other.type == null : type.equals(other.type)) && (location == null ? other.location == null : location.equals(other.location))&& (metadata == null ? other.metadata == null : metadata.equals(other.metadata))&& (registration == null ? other.registration == null : registration.equals(other.registration))&& (status == null ? other.status == null : status.equals(other.status));}  }
class C{  public static boolean startDocumentPrint(int type,MPrintFormat customPrintFormat,int Record_ID,String printerName){  ReportEngine re=ReportEngine.get(Env.getCtx(),type,Record_ID);  if (re == null) {    CLogger log=CLogger.getCLogger(ServerReportCtl.class);    log.warning("NoDocPrintFormat");    return false;  }  if (customPrintFormat != null) {    re.setPrintFormat(customPrintFormat);  }  if (re.getPrintFormat() != null) {    MPrintFormat format=re.getPrintFormat();    if (format.getJasperProcess_ID() > 0) {      boolean result=runJasperProcess(Record_ID,re,true,printerName);      return (result);    } else {      createOutput(re,printerName);      ReportEngine.printConfirm(type,Record_ID);    }  }  return true;}  }
class C{  public ClientConnection(String urlstring) throws IOException {  this(urlstring,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String lineup=getString(stack);  EPG epg=EPG.getInstance();  long provID=epg.getProviderIDForEPGDSName(lineup);  long serverProvID;  if (lineup != null && lineup.endsWith(SDRipper.SOURCE_LABEL)) {    if (provID != 0) {      EPGDataSource ds=epg.getSourceForProviderID(provID);      if (ds != null)       ds.setEnabled(true);    } else {      SDAccountLineup accountLineup=SDRipper.getAccountLineup(lineup.substring(0,lineup.length() - SDRipper.SOURCE_LABEL.length()));      if (accountLineup == null)       return Boolean.FALSE;      provID=SDRipper.getHashFromAccountLineup(accountLineup);      if (provID == 0)       return Boolean.FALSE;      int newDataSourceID=Wizard.getInstance().getNextWizID();      while (epg.getSourceForID(newDataSourceID) != null)       newDataSourceID=Wizard.getInstance().getNextWizID();      SDRipper DataSource=new SDRipper(newDataSourceID);      DataSource.setName(lineup);      DataSource.setProviderID(provID);      DataSource.setLineupID(accountLineup.getLineup());      DataSource.setEnabled(true);      epg.addDataSource(DataSource);    }  } else   if (((serverProvID=epg.getCachedProviderIDForName(lineup)) != 0 && provID != serverProvID) || provID == 0) {    provID=serverProvID;    if (provID == 0)     return Boolean.FALSE;    EPGDataSource oldEPGDS=epg.getSourceForProviderID(provID);    if (oldEPGDS != null) {      oldEPGDS.setName(lineup);      NetworkClient.distributeRecursivePropertyChange("epg_data_sources/");    } else {      int newDSID=Wizard.getInstance().getNextWizID();      while (epg.getSourceForID(newDSID) != null)       newDSID=Wizard.getInstance().getNextWizID();      String customDS=Sage.get("epg/custom_data_source_class","");      if (customDS.length() > 0) {        Class epgClass=Class.forName(customDS);        java.lang.reflect.Constructor cstr=epgClass.getDeclaredConstructor(Integer.TYPE);        EPGDataSource ds=(EPGDataSource)cstr.newInstance(newDSID);        ds.setName(lineup);        ds.setProviderID(provID);        ds.setEnabled(true);        epg.addDataSource(ds);      } else {        EPGDataSource ds=new WarlockRipper(newDSID);        ds.setName(lineup);        ds.setProviderID(provID);        ds.setEnabled(true);        epg.addDataSource(ds);      }    }  } else {    EPGDataSource ds=epg.getSourceForProviderID(provID);    if (ds != null)     ds.setEnabled(true);  }  getCapDevInput(stack).setProvider(provID);  Scheduler.getInstance().kick(false);  return Boolean.TRUE;}  }
class C{  public static void main(String[] args){  new Dert(args);}  }
class C{  public String text(){  NodeList list=root.getChildNodes();  if (list.getLength() == 1)   return list.item(0).getNodeValue();  StringBuilder sb=new StringBuilder();  for (int i=0; i < list.getLength(); i++) {    sb.append(text(list.item(i)));  }  return sb.toString();}  }
class C{  public void useProgram(){  if (mIsDirty) {    createShaders();  }  GLES20.glUseProgram(mProgramHandle);}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final boolean[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public AllocationExplanation add(ShardId shardId,NodeExplanation nodeExplanation){  List<NodeExplanation> list=explanations.get(shardId);  if (list == null) {    list=new ArrayList<>();    explanations.put(shardId,list);  }  list.add(nodeExplanation);  return this;}  }
class C{  public AccionesBusqueda(){  super();}  }
class C{  public String chooseEngineClientAlias(String[] keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  public static void addState(String v){  add(v);}  }
class C{  @Override public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrInputDocument doc : docs)   ur=this.shards.server4write(doc).add(doc);  return ur;}  }
class C{  public LogStream print(float f){  if (ps != null) {    indent();    lineBuffer.append(f);  }  return this;}  }
class C{  public javax.crypto.SecretKey engineLookupAndResolveSecretKey(Element element,String BaseURI,StorageResolver storage){  return null;}  }
class C{  public List<Object> parseRow() throws FormatException {  List<Object> retval=new ArrayList<Object>(getColumnCount());  return parseRow(retval) ? retval : null;}  }
class C{  @Override public boolean equals(Object otherObject){  if (otherObject == this) {    return true;  }  if (otherObject == null) {    return false;  }  if (!(otherObject instanceof Coords)) {    return false;  }  CubeCoords otherCubeCoordinate=(CubeCoords)otherObject;  if (otherCubeCoordinate.cubeX != cubeX) {    return false;  }  if (otherCubeCoordinate.cubeY != cubeY) {    return false;  }  if (otherCubeCoordinate.cubeZ != cubeZ) {    return false;  }  return true;}  }
class C{  public ClassReference(String className,int type,List<String> attributeNames){  this.className=className;  this.type=type;  this.attributeNames=attributeNames;}  }
class C{  void quit(){  setVisible(false);}  }
class C{  public Builder apply(Action action){  ActionNode next=new ActionNode(action,currentDelayMs);  previousNode.setNext(next);  previousNode=next;  currentDelayMs=0;  return this;}  }
class C{  public static Test suite(final TestMode testMode){  return suite(getTemporaryJournal(),testMode);}  }
class C{  public static Object[] flatten(Object[] array){  final List<Object> list=new ArrayList<Object>();  if (array != null) {    for (    Object o : array) {      if (o instanceof Object[]) {        for (        Object oR : flatten((Object[])o)) {          list.add(oR);        }      } else {        list.add(o);      }    }  }  return list.toArray();}  }
class C{  public LSEnvironment(){}  }
class C{  private boolean select(JFormattedTextField ftf,AttributedCharacterIterator iterator,DateFormat.Field field){  int max=ftf.getDocument().getLength();  iterator.first();  do {    Map attrs=iterator.getAttributes();    if (attrs != null && attrs.containsKey(field)) {      int start=iterator.getRunStart(field);      int end=iterator.getRunLimit(field);      if (start != -1 && end != -1 && start <= max && end <= max) {        ftf.select(start,end);      }      return true;    }  } while (iterator.next() != CharacterIterator.DONE);  return false;}  }
class C{  public static short parseShort(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return 0;}  }
class C{  public SearchSourceBuilder aggregation(AbstractAggregationBuilder aggregation){  if (aggregations == null) {    aggregations=new ArrayList<>();  }  aggregations.add(aggregation);  return this;}  }
class C{  public void testMoveRenameDirectorySourceParentRootDestinationMissingPartially() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,paths(DIR_NEW),null);  igfs.rename(dir,SUBSUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  public Instances generateExamples(Random random,Instances format) throws Exception {  Instance example=null;  if (format == null) {    throw new Exception("Dataset format not defined.");  }  int cNum=0;  for (Enumeration<Cluster> enm=new WekaEnumeration<Cluster>(m_ClusterList); enm.hasMoreElements(); cNum++) {    Cluster cl=enm.nextElement();    double stdDev=cl.getStdDev();    int instNum=cl.getInstNum();    double[] center=cl.getCenter();    String cName="c" + cNum;    for (int i=0; i < instNum; i++) {      example=generateInstance(format,random,stdDev,center,cName);      if (example != null) {        example.setDataset(format);      }      format.add(example);    }  }  return (format);}  }
class C{  public String toString(){  return String.format("model '%s[%s]'",name,index);}  }
class C{  public TreeNode parseXMLDocument(String uri,InputSource is,boolean validate) throws JasperException {  Document document=null;  ClassLoader currentLoader=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setNamespaceAware(true);    DocumentBuilder builder=factory.newDocumentBuilder();    builder.setEntityResolver(entityResolver);    builder.setErrorHandler(errorHandler);    document=builder.parse(is);    document.setDocumentURI(uri);    if (validate) {      Schema schema=getSchema(document);      if (schema != null) {        schema.newValidator().validate(new DOMSource(document));      }    }  } catch (  ParserConfigurationException ex) {    throw new JasperException(Localizer.getMessage("jsp.error.parse.xml",uri),ex);  }catch (  SAXParseException ex) {    throw new JasperException(Localizer.getMessage("jsp.error.parse.xml.line",uri,Integer.toString(ex.getLineNumber()),Integer.toString(ex.getColumnNumber())),ex);  }catch (  SAXException sx) {    throw new JasperException(Localizer.getMessage("jsp.error.parse.xml",uri),sx);  }catch (  IOException io) {    throw new JasperException(Localizer.getMessage("jsp.error.parse.xml",uri),io);  } finally {    Thread.currentThread().setContextClassLoader(currentLoader);  }  return (convert(null,document.getDocumentElement()));}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void closeWrite() throws IOException {  OutputStream os=_os;  _os=null;  os.close();}  }
class C{  protected void vertexTexture(float u,float v){  if (textureImage == null) {    throw new RuntimeException("You must first call texture() before " + "using u and v coordinates with vertex()");  }  if (textureMode == IMAGE) {    u/=(float)textureImage.width;    v/=(float)textureImage.height;  }  textureU=u;  textureV=v;}  }
class C{  public void addOffset(int o,int x,int d){  if (force_defaults || x != d) {    addOffset(x);    slot(o);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagname.class,args);}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  float f=(float)this.particleAge / (float)this.particleMaxAge;  this.motionY-=0.03D;  try {    this.moveEntity(this.motionX,this.motionY,this.motionZ);  } catch (  Exception e) {    this.setExpired();  }  this.motionX*=0.9990000128746033D;  this.motionY*=0.9990000128746033D;  this.motionZ*=0.9990000128746033D;  if (this.isCollided) {    this.motionX*=0.699999988079071D;    this.motionY*=0.699999988079071D;  }}  }
class C{  private void useGame(){  closeAction=CloseAction.GAME;  setVisible(false);}  }
class C{  public int size(){  return size;}  }
class C{  public static boolean isNative(int flags){  return (flags & AccNative) != 0;}  }
class C{  public int count(){  return m_nodes.size();}  }
class C{  public static String notEmpty(String value,String name,String info){  if (value == null) {    throw new IllegalArgumentException(name + " cannot be null" + (info == null ? "" : ", " + info));  }  return notEmptyIfNotNull(value,name,info);}  }
class C{  public void toBack(){  moveToBack();}  }
class C{  public int numAnnotations(){  return ByteArray.readU16bit(info,0);}  }
class C{  public static String utf8BytesToString(byte[] bytes,int start,int length){  char[] chars=localBuffer.get();  if (chars == null || chars.length < length) {    chars=new char[length];    localBuffer.set(chars);  }  int outAt=0;  for (int at=start; length > 0; ) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        length--;        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      length-=2;      if (length < 0) {        return throwBadUtf8(v0,at);      }      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    length-=3;    if (length < 0) {      return throwBadUtf8(v0,at);    }    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}return new String(chars,0,outAt);}  }
class C{  static public boolean isNaturalDocOrder(int analysis){  if (canCrissCross(analysis) || isSet(analysis,BIT_NAMESPACE) || walksFilteredList(analysis))   return false;  if (walksInDocOrder(analysis))   return true;  return false;}  }
class C{  public void initOptions(){  skipWarning=QuestionsHandler.SKIP_FIRST_DOWNLOAD_WARNING.getValue();  CHECK_BOX.setSelected(DialogOption.parseInt(skipWarning) != DialogOption.YES);}  }
class C{  public BlockingClientManager(SocketFactory socketFactory){  this.socketFactory=checkNotNull(socketFactory);}  }
class C{  protected void pause(int H1,int H2) throws Exception {  if (stopRequested) {    throw new Exception("Sort Algorithm");  }  parent.pause(H1,H2);}  }
class C{  @SuppressLint("NewApi") private void hideDayFieldIfNotInFormat(FormEntryPrompt prompt){  String appearance=prompt.getQuestion().getAppearanceAttr();  if (appearance == null) {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    } else {      return;    }  } else   if ("month-year".equals(appearance)) {    hideDay=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("year".equals(appearance)) {    hideMonth=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("no-calendar".equals(appearance)) {    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    }  }  if (hideMonth || hideDay) {    for (    Field datePickerDialogField : this.mDatePicker.getClass().getDeclaredFields()) {      if ("mDayPicker".equals(datePickerDialogField.getName()) || "mDaySpinner".equals(datePickerDialogField.getName())) {        datePickerDialogField.setAccessible(true);        Object dayPicker=new Object();        try {          dayPicker=datePickerDialogField.get(this.mDatePicker);        } catch (        Exception e) {          e.printStackTrace();        }        ((View)dayPicker).setVisibility(View.GONE);      }      if (hideMonth) {        if ("mMonthPicker".equals(datePickerDialogField.getName()) || "mMonthSpinner".equals(datePickerDialogField.getName())) {          datePickerDialogField.setAccessible(true);          Object monthPicker=new Object();          try {            monthPicker=datePickerDialogField.get(this.mDatePicker);          } catch (          Exception e) {            e.printStackTrace();          }          ((View)monthPicker).setVisibility(View.GONE);        }      }    }  }}  }
class C{  public LaunchExternalCompareToolCommand(final ExternalTool tool,final String originalPath,final String modifiedPath,final String ancestorPath,final String originalLabel,final String modifiedLabel,final String ancestorLabel){  Check.notNull(tool,"tool");  Check.notNull(originalPath,"originalPath");  Check.notNull(modifiedPath,"modifiedPath");  this.tool=tool;  this.originalPath=originalPath;  this.modifiedPath=modifiedPath;  this.originalLabel=(originalLabel != null) ? originalLabel : "";  this.modifiedLabel=(modifiedLabel != null) ? modifiedLabel : "";}  }
class C{  private String deleteSnapshotSteps(Workflow workflow,String waitFor,Set<URI> volumeURIs,List<Volume> volumes,boolean isRemoveAll){  log.info("START delete snapshot steps");  URI storage=volumes.get(0).getStorageController();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);  Set<String> repGroupNames=ControllerUtils.getSnapshotReplicationGroupNames(volumes,_dbClient);  if (repGroupNames.isEmpty()) {    return waitFor;  }  for (  String repGroupName : repGroupNames) {    List<URI> snapList=getSnapshotsToBeRemoved(volumeURIs,repGroupName);    if (!isRemoveAll) {      URI cgURI=volumes.get(0).getConsistencyGroup();      waitFor=removeSnapshotsFromReplicationGroupStep(workflow,waitFor,storageSystem,cgURI,snapList,repGroupName);    }    log.info("Adding delete snapshot steps");    waitFor=_blockDeviceController.deleteSnapshotStep(workflow,waitFor,storage,storageSystem,snapList,isRemoveAll);  }  return waitFor;}  }
class C{  public boolean isUnloadedClassLoader(){  return false;}  }
class C{  private LineData generateDataLine(int cnt){  ArrayList<Entry> e1=new ArrayList<Entry>();  for (int i=0; i < 12; i++) {    e1.add(new Entry((int)(Math.random() * 65) + 40,i));  }  LineDataSet d1=new LineDataSet(e1,"New DataSet " + cnt + ", (1)");  d1.setLineWidth(2.5f);  d1.setCircleSize(4.5f);  d1.setHighLightColor(Color.rgb(244,117,117));  d1.setDrawValues(false);  ArrayList<Entry> e2=new ArrayList<Entry>();  for (int i=0; i < 12; i++) {    e2.add(new Entry(e1.get(i).getVal() - 30,i));  }  LineDataSet d2=new LineDataSet(e2,"New DataSet " + cnt + ", (2)");  d2.setLineWidth(2.5f);  d2.setCircleSize(4.5f);  d2.setHighLightColor(Color.rgb(244,117,117));  d2.setColor(ColorTemplate.VORDIPLOM_COLORS[0]);  d2.setCircleColor(ColorTemplate.VORDIPLOM_COLORS[0]);  d2.setDrawValues(false);  ArrayList<LineDataSet> sets=new ArrayList<LineDataSet>();  sets.add(d1);  sets.add(d2);  LineData cd=new LineData(getMonths(),sets);  return cd;}  }
class C{  public void addStats(long affectedRows,long insertId,boolean moreResultAvailable){  this.insertId[currentStat]=insertId;  this.affectedRows[currentStat++]=(int)affectedRows;  setMoreResultAvailable(moreResultAvailable);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void arcConnect(final int cx,final int cy,final int arcRadius,final double angle1,final double angle2,final boolean in,final Long colorLine,final int intensityLine,final Long colorDot,final int intensityDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled,final String message,final Long colorMessage,final int intensityMessage){  final double a1=PI180 * angle1;  final double a2=PI180 * angle2;  final int x1=cx + (int)(arcRadius * Math.cos(a1));  final int y1=cy - (int)(arcRadius * Math.sin(a1));  final int x2=cx + (int)(arcRadius * Math.cos(a2));  final int y2=cy - (int)(arcRadius * Math.sin(a2));  if (in) {    line(x1,y1,x2,y2,colorLine,intensityLine,colorDot,intensityDot,dotDist,dotPos,dotRadius,dotFilled);  } else {    line(x2,y2,x1,y1,colorLine,intensityLine,colorDot,intensityDot,dotDist,dotPos,dotRadius,dotFilled);  }  if (message != null && message.length() > 0) {    this.setColor(colorMessage);    int xm=(x1 + 5 * x2) / 6;    int ym=(y1 + 5 * y2) / 6;    if (ym < cy)     ym+=6; else     ym-=6;    if (xm < cx)     xm+=6; else     xm-=6;    if (xm > cx)     xm-=6 * message.length();    PrintTool.print(this,xm,ym,0,message.toUpperCase(),-1,false,intensityMessage);  }}  }
class C{  public void addDebugInfo(String name,Object val){  if (debugInfo == null) {    debugInfo=new SimpleOrderedMap<>();  }  debugInfo.add(name,val);}  }
class C{  private void openDashboardTabInNewActivityStack(){  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(DASHBOARD_URL));  intent.setPackage(getActivity().getPackageName());  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  private BasicUserNameMapper create(@Nullable Map<String,String> dictionary,boolean useDfltUsrName,@Nullable String dfltUsrName){  BasicUserNameMapper mapper=new BasicUserNameMapper();  mapper.setMappings(dictionary);  mapper.setUseDefaultUserName(useDfltUsrName);  mapper.setDefaultUserName(dfltUsrName);  return mapper;}  }
class C{  @Override public byte[] encodeSortKeyBytes(String value){  byte[] bytes=collator.get().getCollationKey(value).toByteArray();  return Arrays.copyOf(bytes,bytes.length - 1);}  }
class C{  public boolean select(Viewer viewer,Object parent,Object element){  if (element instanceof IPackageFragment || element instanceof IPackageFragmentRoot || element instanceof IFile) {    return false;  } else   if (element instanceof IFolder) {    IFolder folder=(IFolder)element;    return select(folder.getProject(),folder);  } else   if (element instanceof IProject) {    return select((IProject)element,(IProject)element);  } else   if (element instanceof IJavaProject) {    return select(((IJavaProject)element).getProject(),((IJavaProject)element).getProject());  }  return true;}  }
class C{  public WebFigure(Element e,int w,int h,String src,Element caption){  super(e,w,h,src);  figCaption=caption;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void emitMapPut(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getMapPutterName(fieldName));  builder.append("(String k, ");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".put(k, v);\n");  builder.append("    }\n\n");}  }
class C{  public CollectionCertStore(CertStoreParameters params) throws InvalidAlgorithmParameterException {  super(params);  if (!(params instanceof CollectionCertStoreParameters))   throw new InvalidAlgorithmParameterException("parameters must be CollectionCertStoreParameters");  coll=((CollectionCertStoreParameters)params).getCollection();}  }
class C{  public vec3 normalized(){  float x=this.m[0];  float y=this.m[1];  float z=this.m[2];  float s=1.0f / (float)Math.sqrt(x * x + y * y + z * z);  vec3 result=new vec3(x * s,y * s,z * s);  return result;}  }
class C{  public Double GetMedian(List<Double> values){  int count=values.size();  double median;  double m1;  double m2;  if ((count % 2) == 1) {    median=values.get((int)(count / 2));  } else   if (count > 0) {    m1=values.get(count / 2);    m2=values.get((count / 2) - 1);    median=(m1 + m2) / 2;  } else {    median=0;  }  return median;}  }
class C{  public static boolean hasUTF16LEBom(@NotNull byte[] bom){  return ArrayUtil.startsWith(bom,UTF16LE_BOM);}  }
class C{  public Object clone(){  try {    LiveRef newRef=(LiveRef)super.clone();    return newRef;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public void addGatewaySenderId(String gatewaySenderId){  if (gatewaySenderId == null) {    throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_GATEWAY_SENDER_ID_IS_NULL.toLocalizedString());  }synchronized (this.regionAttributes) {    this.regionAttributes.addGatewaySenderId(gatewaySenderId);  }}  }
class C{  public boolean isStaticInitializer(){  return getName().equals(nameClinit);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void testToEngineeringStringNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-501";  BigDecimal aNumber=new BigDecimal(a);  String result="-123.80964839238475457356735674573563567890295784902768787678287E-471";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public static boolean isPhoneStorageSupported(){  return true;}  }
class C{  public boolean isAutoTorchEnabled(){  return autoTorchEnabled;}  }
class C{  public boolean dataDelete(int row){  log.info("Row=" + row);  if (row < 0)   return false;  if (m_readOnly) {    fireDataStatusEEvent("AccessCannotDelete","",true);    return false;  }  if (!m_deleteable) {    fireDataStatusEEvent("AccessNotDeleteable","",true);    return false;  }  if (m_indexProcessedColumn > 0 && !m_tableName.startsWith("I_")) {    Boolean processed=(Boolean)getValueAt(row,m_indexProcessedColumn);    if (processed != null && processed.booleanValue()) {      fireDataStatusEEvent("CannotDeleteTrx","",true);      return false;    }  }  MSort sort=(MSort)m_sort.get(row);  Object[] rowData=getDataAtRow(row);  MTable table=MTable.get(m_ctx,m_AD_Table_ID);  PO po=null;  int Record_ID=getKeyID(m_rowChanged);  if (Record_ID != -1)   po=table.getPO(Record_ID,null); else   po=table.getPO(getWhereClause(rowData),null);  if (po != null) {    boolean ok=false;    try {      ok=po.delete(false);    } catch (    Throwable t) {      log.log(Level.SEVERE,"Delete",t);    }    if (!ok) {      ValueNamePair vp=CLogger.retrieveError();      if (vp != null)       fireDataStatusEEvent(vp); else       fireDataStatusEEvent("DeleteError","",true);      return false;    }  } else {    StringBuffer sql=new StringBuffer("DELETE ");    sql.append(m_tableName).append(" WHERE ").append(getWhereClause(rowData));    int no=0;    PreparedStatement pstmt=null;    try {      pstmt=DB.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE,null);      no=pstmt.executeUpdate();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql.toString(),e);      String msg="DeleteError";      if (DBException.isChildRecordFoundError(e))       msg="DeleteErrorDependent";      fireDataStatusEEvent(msg,e.getLocalizedMessage(),true);      return false;    } finally {      DB.close(pstmt);      pstmt=null;    }    if (no != 1) {      log.log(Level.SEVERE,"Number of deleted rows = " + no);      return false;    }  }  if (m_virtual) {    m_virtualBuffer.remove(sort.index);  } else {    m_buffer.remove(sort.index);  }  m_rowCount--;  m_sort.remove(row);  if (!m_virtual) {    for (int i=0; i < m_sort.size(); i++) {      MSort ptr=(MSort)m_sort.get(i);      if (ptr.index > sort.index)       ptr.index--;    }  }  m_changed=false;  m_rowChanged=-1;  fireTableRowsDeleted(row,row);  fireDataStatusIEvent("Deleted","");  log.fine("Row=" + row + " complete");  return true;}  }
class C{  public ECKey(BigInteger privKey){  this(privKey,(byte[])null);}  }
class C{  @Override public synchronized void release(IndexCommit commit) throws IOException {  super.release(commit);  boolean success=false;  try {    persist();    success=true;  }  finally {    if (!success) {      try {        incRef(commit);      } catch (      Exception e) {      }    }  }}  }
class C{  public Map<Integer,Set<String>> showTopology() throws NetworkDeviceControllerException {  Map<Integer,Set<String>> peerDevicesMap=new HashMap<Integer,Set<String>>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.show.topology.cmd"),10000,prompts,buf);  String[] lines=getLines(buf);  Integer vsanId=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.show.topology.vsan.match"),MDSDialogProperties.getString("MDSDialog.show.topology.peer.ip.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      vsanId=new Integer(groups[0]);    break;case 1:  Set<String> peerDevicesIpAddr=peerDevicesMap.get(vsanId);if (peerDevicesIpAddr == null) {  peerDevicesIpAddr=Sets.newHashSet();  peerDevicesMap.put(vsanId,peerDevicesIpAddr);}String peerDevice=groups[0] + groups[2];peerDevicesIpAddr.add(peerDevice);break;}}return peerDevicesMap;}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  public static String encodeValue(Instance x,int indices[]){  String v="";  for (int j=0; j < indices.length; j++) {    v+=x.stringValue(indices[j]) + "+";  }  v=v.substring(0,v.length() - 1);  return v;}  }
class C{  @Override public int hashCode(){  return (int)((this.latlon & Integer.MAX_VALUE) >> 1) + (int)(this.latlon >> 33);}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public void onOtaspChanged(int otaspMode){}  }
class C{  public static boolean checkSelfPermission(Context context,String permission){  return ContextCompat.checkSelfPermission(context,permission) != android.content.pm.PackageManager.PERMISSION_GRANTED;}  }
class C{  public static RegressionDataSet readR(int numeric_target_column,Path path,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return readR(numeric_target_column,path,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  @DSComment("no information leakage") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.616 -0500",hash_original_method="613628CBB35065AE6B36DA8B5C0D3152",hash_generated_method="E07D13A40AAA8AE3C1C1A83EBE240501") public void close(){  isClosed=true;  impl.close();}  }
class C{  public TechnicalServiceOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void readToToken(int tok) throws CoreException {  int curr=0;  do {    curr=readNext(false);  } while (curr != tok);}  }
class C{  private ITypeBinding extractElementType(AST ast){  if (fExpressionType.isArray()) {    return Bindings.normalizeForDeclarationUse(fExpressionType.getElementType(),ast);  }  IMethodBinding iteratorMethodBinding=Bindings.findMethodInHierarchy(fExpressionType,"iterator",new ITypeBinding[]{});  IMethodBinding iteratorNextMethodBinding=Bindings.findMethodInHierarchy(iteratorMethodBinding.getReturnType(),"next",new ITypeBinding[]{});  ITypeBinding currentElementBinding=iteratorNextMethodBinding.getReturnType();  return Bindings.normalizeForDeclarationUse(currentElementBinding,ast);}  }
class C{  public DoubleVector timesEquals(double s){  for (int i=0; i < size(); i++) {    V[i]*=s;  }  return this;}  }
class C{  public ArrayGeneratorBuilder<String> ofStrings(Source<String> source){  return new ArrayGeneratorBuilder<String>(source,String.class);}  }
class C{  public static ZyLabelContent buildContent(final INaviEdge edge){  final ZyLabelContent content=new ZyLabelContent(null);  ZyNodeBuilder.addCommentLines(content,edge,edge.getLocalComment(),edge.getGlobalComment());  return content;}  }
class C{  private JPanel createButtonPanel(){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));  panel.add(Box.createHorizontalGlue());  panel.add(Box.createHorizontalGlue());  JButton okButton=new JButton(ok);  JButton cancelButton=new JButton(cancel);  JButton helpButton=new JButton(help);  Dimension d=new Dimension(Math.max(cancelButton.getPreferredSize().width,70),cancelButton.getPreferredSize().height);  okButton.setPreferredSize(d);  cancelButton.setPreferredSize(d);  helpButton.setPreferredSize(d);  getRootPane().setDefaultButton(okButton);  panel.add(okButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(cancelButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(helpButton);  return panel;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createPolicy(@Context final HttpServletRequest httpServletRequest,@QueryParam("org") String orgId,@QueryParam("space") String spaceId,String jsonString){  try {    logger.info("Received JSON String of policy content: " + jsonString);    PolicyManager policyManager=PolicyManagerImpl.getInstance();    AutoScalerPolicy policy=PolicyParser.parse(jsonString);    policy.setOrgId(orgId);    policy.setSpaceId(spaceId);    generatePolicyFromJsonString(policy,jsonString);    String policyId=policyManager.createPolicy(policy);    logger.info("Generate policy with id: " + policyId + " for policy content : "+ jsonString);    JSONObject response=new JSONObject();    response.put("policyId",policyId);    return RestApiResponseHandler.getResponse(Status.CREATED,response);  } catch (  IOException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_parse_JSON_error,e,httpServletRequest.getLocale());  }catch (  DataStoreException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_database_error,e,httpServletRequest.getLocale());  }}  }
class C{  public long cardinality(){  return BitUtil.pop_array(bits,0,numWords);}  }
class C{  public void call(String method,Object[] args) throws IOException {  int length=args != null ? args.length : 0;  startCall(method,length);  for (int i=0; i < length; i++)   writeObject(args[i]);  completeCall();}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  public void clearPendingDownloadNotifications(){  if (mSharedPrefs.contains(DOWNLOAD_NOTIFICATION_IDS)) {    Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);    for (    String id : downloadIds) {      int notificationId=parseNotificationId(id);      if (notificationId > 0) {        mDownloadNotifier.cancelNotification(notificationId);        Log.w(TAG,"Download failed: Cleared download id:" + id);      }    }    mSharedPrefs.edit().remove(DOWNLOAD_NOTIFICATION_IDS).apply();  }  if (mSharedPrefs.contains(PENDING_OMA_DOWNLOADS)) {    Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);    for (    String omaDownload : omaDownloads) {      OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);      clearPendingOMADownload(entry.mDownloadId,entry.mInstallNotifyURI);    }  }}  }
class C{  public boolean sharedUsePrepare(){  return urlParser.getOptions().useServerPrepStmts && !urlParser.getOptions().rewriteBatchedStatements;}  }
class C{  public static boolean isSnapshotFullCopySupported(URI blockSnapURI,DbClient dbClient){  BlockSnapshot blockObj=dbClient.queryObject(BlockSnapshot.class,blockSnapURI);  StorageSystem storage=dbClient.queryObject(StorageSystem.class,blockObj.getStorageController());  return (storage != null && (storage.deviceIsType(Type.openstack) || storage.deviceIsType(Type.vnxblock) || storage.deviceIsType(Type.ibmxiv)|| storage.deviceIsType(Type.vmax)));}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public void testFirst() throws Exception {  int upper=10;  SingleIndex index=getIndex("first",upper);  assertEquals(0,index.getIndex());  assertEquals("first",index.getSingleIndex());}  }
class C{  public int resumeDownload(long... ids){  initResumeMethod();  if (resumeDownload == null) {    return -1;  }  try {    return (Integer)resumeDownload.invoke(downloadManager,ids);  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public static boolean isStub(Object obj){  return (proxy == null) ? false : proxy.isStub(obj);}  }
class C{  public List<Service> locateAllServices(String service,String version,String tag,String endpointKey){  return _coordinator.locateAllServices(service,version,tag,endpointKey);}  }
class C{  public SnapshotsStatusRequest(String repository){  this.repository=repository;}  }
class C{  public void writeStartComponent(String componentName) throws IOException {  if (generator == null) {    init();  }  componentEnded=false;  if (!stack.isEmpty()) {    Info parent=stack.getLast();    if (!parent.wroteEndPropertiesArray) {      generator.writeEndArray();      parent.wroteEndPropertiesArray=true;    }    if (!parent.wroteStartSubComponentsArray) {      generator.writeStartArray();      parent.wroteStartSubComponentsArray=true;    }  }  generator.writeStartArray();  generator.writeString(componentName);  generator.writeStartArray();  stack.add(new Info());}  }
class C{  public void removeMovie(Movie movie){  Path imageFile=movie.getPathNIO().resolve("movieset-fanart.jpg");  if (Files.exists(imageFile)) {    Utils.deleteFileSafely(imageFile);  }  imageFile=movie.getPathNIO().resolve("movieset-poster.jpg");  if (Files.exists(imageFile)) {    Utils.deleteFileSafely(imageFile);  }  if (movie.getMovieSet() != null) {    movie.setMovieSet(null);    movie.saveToDb();  }synchronized (movies) {    movies.remove(movie);    movieIds.remove(movie.getDbId());    MovieSetArtworkHelper.updateArtwork(this);    saveToDb();  }  firePropertyChange("movies",null,movies);  firePropertyChange("removedMovie",null,movie);}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances data){  double minResult;  BinC45Split[] currentModel;  BinC45Split bestModel=null;  NoSplit noSplitModel=null;  double averageInfoGain=0;  int validModels=0;  boolean multiVal=true;  Distribution checkDistribution;  double sumOfWeights;  int i;  try {    checkDistribution=new Distribution(data);    noSplitModel=new NoSplit(checkDistribution);    if (Utils.sm(checkDistribution.total(),2 * m_minNoObj) || Utils.eq(checkDistribution.total(),checkDistribution.perClass(checkDistribution.maxClass()))) {      return noSplitModel;    }    Enumeration<Attribute> enu=data.enumerateAttributes();    while (enu.hasMoreElements()) {      Attribute attribute=enu.nextElement();      if ((attribute.isNumeric()) || (Utils.sm(attribute.numValues(),(0.3 * m_allData.numInstances())))) {        multiVal=false;        break;      }    }    currentModel=new BinC45Split[data.numAttributes()];    sumOfWeights=data.sumOfWeights();    for (i=0; i < data.numAttributes(); i++) {      if (i != (data).classIndex()) {        currentModel[i]=new BinC45Split(i,m_minNoObj,sumOfWeights,m_useMDLcorrection);        currentModel[i].buildClassifier(data);        if (currentModel[i].checkModel()) {          if ((data.attribute(i).isNumeric()) || (multiVal || Utils.sm(data.attribute(i).numValues(),(0.3 * m_allData.numInstances())))) {            averageInfoGain=averageInfoGain + currentModel[i].infoGain();            validModels++;          }        }      } else {        currentModel[i]=null;      }    }    if (validModels == 0) {      return noSplitModel;    }    averageInfoGain=averageInfoGain / validModels;    minResult=0;    for (i=0; i < data.numAttributes(); i++) {      if ((i != (data).classIndex()) && (currentModel[i].checkModel())) {        if ((currentModel[i].infoGain() >= (averageInfoGain - 1E-3)) && Utils.gr(currentModel[i].gainRatio(),minResult)) {          bestModel=currentModel[i];          minResult=currentModel[i].gainRatio();        }      }    }    if (Utils.eq(minResult,0)) {      return noSplitModel;    }    bestModel.distribution().addInstWithUnknown(data,bestModel.attIndex());    if (!m_doNotMakeSplitPointActualValue) {      bestModel.setSplitPoint(m_allData);    }    return bestModel;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().openStream();  }}  }
class C{  public void off(){  this.on=false;}  }
class C{  public TenantOrgRestRep createTenant(String name,String domain,String attributeName,String attributeValue){  UserMappingAttributeParam userMappingAttributeParam=new UserMappingAttributeParam();  userMappingAttributeParam.setKey(attributeName);  List<String> valueList=new ArrayList<String>();  valueList.add(attributeValue);  userMappingAttributeParam.setValues(valueList);  List<UserMappingAttributeParam> userMappingAttributeParamList=new ArrayList<UserMappingAttributeParam>();  userMappingAttributeParamList.add(userMappingAttributeParam);  UserMappingParam userMappingParam=new UserMappingParam();  userMappingParam.setDomain(domain);  userMappingParam.setAttributes(userMappingAttributeParamList);  List<UserMappingParam> userMappingList=new ArrayList<UserMappingParam>();  userMappingList.add(userMappingParam);  TenantCreateParam tenantInput=new TenantCreateParam();  tenantInput.setLabel(name);  tenantInput.setUserMappings(userMappingList);  return viPRCoreClient.tenants().create(tenantInput);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Loader(String dir){  this.dir=dir;}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverPortGroups(StorageSystem system,StringSet fileSharingProtocols) throws VNXFileCollectionException, VNXException {  HashMap<String,List<StorageHADomain>> portGroups=new HashMap<String,List<StorageHADomain>>();  List<StorageHADomain> newPortGroups=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingPortGroups=new ArrayList<StorageHADomain>();  boolean isNfsCifsSupported=false;  List<PhysicalNAS> newNasServers=new ArrayList<PhysicalNAS>();  List<PhysicalNAS> existingNasServers=new ArrayList<PhysicalNAS>();  _logger.info("Start port group discovery for storage system {}",system.getId());  List<VNXDataMover> dataMovers=getPortGroups(system);  _logger.debug("Number movers found: {}",dataMovers.size());  for (  VNXDataMover mover : dataMovers) {    StorageHADomain portGroup=null;    if (null == mover) {      _logger.debug("Null data mover in list of port groups.");      continue;    }    if (mover.getRole().equals(DM_ROLE_STANDBY)) {      _logger.debug("Found standby data mover");      continue;    }    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,mover.getName(),NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    Iterator<URI> iter=results.iterator();    while (iter.hasNext()) {      StorageHADomain tmpGroup=_dbClient.queryObject(StorageHADomain.class,iter.next());      if (tmpGroup != null && !tmpGroup.getInactive() && tmpGroup.getStorageDeviceURI().equals(system.getId())) {        portGroup=tmpGroup;        _logger.debug("Found duplicate {} ",mover.getName());      }    }    List<VNXCifsServer> cifsServers=getCifServers(system,String.valueOf(mover.getId()),"false");    CifsServerMap cifsServersMap=new CifsServerMap();    for (    VNXCifsServer cifsServer : cifsServers) {      _logger.info("Cifs Server {} for {} ",cifsServer.getName(),mover.getName());      NasCifsServer nasCifsServer=new NasCifsServer();      nasCifsServer.setId(cifsServer.getId());      nasCifsServer.setInterfaces(cifsServer.getInterfaces());      nasCifsServer.setMoverIdIsVdm(cifsServer.getMoverIdIsVdm());      nasCifsServer.setName(cifsServer.getName());      nasCifsServer.setType(cifsServer.getType());      nasCifsServer.setDomain(cifsServer.getDomain());      cifsServersMap.put(cifsServer.getName(),nasCifsServer);    }    StringSet protocols=new StringSet();    protocols.add(StorageProtocol.File.NFS.name());    protocols.add(StorageProtocol.File.CIFS.name());    if (portGroup == null) {      portGroup=new StorageHADomain();      portGroup.setId(URIUtil.createId(StorageHADomain.class));      portGroup.setNativeGuid(adapterNativeGuid);      portGroup.setStorageDeviceURI(system.getId());      portGroup.setAdapterName(mover.getName());      portGroup.setVirtual(false);      portGroup.setName((Integer.toString(mover.getId())));      portGroup.setFileSharingProtocols(protocols);      _logger.info("Found data mover {} at {}",mover.getName(),mover.getId());      newPortGroups.add(portGroup);    } else {      portGroup.setFileSharingProtocols(protocols);      existingPortGroups.add(portGroup);    }    PhysicalNAS existingNas=findPhysicalNasByNativeId(system,String.valueOf(mover.getId()));    if (existingNas != null) {      existingNas.setProtocols(protocols);      existingNas.setCifsServersMap(cifsServersMap);      existingNasServers.add(existingNas);    } else {      PhysicalNAS physicalNas=createPhysicalNas(system,mover);      if (physicalNas != null) {        physicalNas.setProtocols(protocols);        physicalNas.setCifsServersMap(cifsServersMap);        newNasServers.add(physicalNas);      }    }  }  if (existingNasServers != null && !existingNasServers.isEmpty()) {    _logger.info("discoverPortGroups - modified PhysicalNAS servers size {}",existingNasServers.size());    _dbClient.persistObject(existingNasServers);  }  if (newNasServers != null && !newNasServers.isEmpty()) {    _logger.info("discoverPortGroups - new PhysicalNAS servers size {}",newNasServers.size());    _dbClient.createObject(newNasServers);  }  fileSharingProtocols.add(StorageProtocol.File.NFS.name());  fileSharingProtocols.add(StorageProtocol.File.CIFS.name());  _logger.info("Port group discovery for storage system {} complete.",system.getId());  for (  StorageHADomain newDomain : newPortGroups) {    _logger.info("New Storage Domain : {} : {}",newDomain.getNativeGuid(),newDomain.getAdapterName() + ":" + newDomain.getId());  }  for (  StorageHADomain domain : existingPortGroups) {    _logger.info("Old Storage Domain : {} : {}",domain.getNativeGuid(),domain.getAdapterName() + ":" + domain.getId());  }  portGroups.put(NEW,newPortGroups);  portGroups.put(EXISTING,existingPortGroups);  return portGroups;}  }
class C{  public static void translateM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[12 + mi]+=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z;  }}  }
class C{  private void convertJoinGroup(final AST2BOpContext context,final StaticAnalysis sa,final QueryBase query,final JoinGroupNode group,final Set<IVariable<?>> exogenousVars){{    final IGroupMemberNode[] members=group.toArray(new IGroupMemberNode[]{});    boolean optimizationApplicable=false;    for (int i=0; i < members.length && !optimizationApplicable; i++) {      IGroupMemberNode t=members[i];      optimizationApplicable|=t instanceof IBindingProducerNode && !(t instanceof AssignmentNode) && !(t instanceof JoinGroupNode && ((JoinGroupNode)t).isOptional());    }    if (!optimizationApplicable)     return;  }  final String mainSolutionSetName="--nsr-" + context.nextId();  final List<JoinGroupNode> complexGroups=new LinkedList<JoinGroupNode>();{    final NamedSubqueryRoot nsr=new NamedSubqueryRoot(QueryType.SELECT,mainSolutionSetName);    sa.getQueryRoot().getNamedSubqueriesNotNull().add(nsr);    final JoinGroupNode whereClause=new JoinGroupNode();    nsr.setWhereClause(whereClause);{      for (      FilterNode f : sa.getPreFilters(group)) {        whereClause.addChild(f);      }      for (      FilterNode f : sa.getJoinFilters(group)) {        whereClause.addChild(f);      }    }    final IGroupMemberNode[] members=group.toArray(new IGroupMemberNode[]{});    for (    IGroupMemberNode t : members) {      if (t instanceof StatementPatternNode || t instanceof NamedSubqueryInclude || t instanceof SubqueryRoot|| t instanceof ServiceNode|| t instanceof UnionNode|| t instanceof ArbitraryLengthPathNode|| t instanceof BindingsClause) {        group.removeChild(t);        whereClause.addChild(t);      } else       if (t instanceof FilterNode) {      } else       if (t instanceof AssignmentNode) {      } else       if (t instanceof JoinGroupNode) {        final JoinGroupNode childGroup=(JoinGroupNode)t;        if (childGroup.isOptional()) {          complexGroups.add(childGroup);        } else {          group.removeChild(t);          whereClause.addChild(childGroup);        }      } else {        throw new AssertionError("Not expecting: " + t + " in "+ group);      }    }{      final Set<IVariable<?>> groupVars=sa.getSpannedVariables(whereClause,new LinkedHashSet<IVariable<?>>());      final Set<IVariable<?>> afterVars=sa.getSpannedVariables((BOp)group,new LinkedHashSet<IVariable<?>>());      if (query.getProjection() != null) {        final ProjectionNode tmp=query.getProjection();        tmp.getSelectExprVars(afterVars);      }      final Set<IVariable<?>> projectedVars=new LinkedHashSet<IVariable<?>>();      projectedVars.addAll(groupVars);      projectedVars.retainAll(afterVars);      final ProjectionNode projection=new ProjectionNode();      for (      IVariable<?> v : projectedVars) {        projection.addProjectionVar(new VarNode(v.getName()));      }      nsr.setProjection(projection);    }  }  final List<Set<IVariable<?>>> complexGroupsDefiniteVars=new ArrayList<Set<IVariable<?>>>(complexGroups.size());  for (int i=0; i < complexGroups.size(); i++) {    final Set<IVariable<?>> cur=new HashSet<IVariable<?>>();    sa.getDefinitelyProducedBindings(complexGroups.get(i),cur,true);    complexGroupsDefiniteVars.add(i,cur);  }  String precedingSolutionName=mainSolutionSetName;  for (int i=0; i < complexGroups.size(); i++) {    final JoinGroupNode childGroup=complexGroups.get(i);    final String solutionSetName="--nsr-" + context.nextId();    final NamedSubqueryRoot nsr=new NamedSubqueryRoot(QueryType.SELECT,solutionSetName);    sa.getQueryRoot().getNamedSubqueriesNotNull().add(nsr);    final JoinGroupNode whereClause=new JoinGroupNode();    nsr.setWhereClause(whereClause);    final NamedSubqueryInclude mainInclude=new NamedSubqueryInclude(precedingSolutionName);    whereClause.addChild(mainInclude);    whereClause.addChild(childGroup);    final NamedSubqueryInclude anInclude=new NamedSubqueryInclude(solutionSetName);    if (group.replaceWith(childGroup,anInclude) != 1)     throw new AssertionError();{      final Set<IVariable<?>> projectedVars=sa.getProjectedVars(anInclude,whereClause,query,exogenousVars,new LinkedHashSet<IVariable<?>>());      final Set<IVariable<?>> joinVarCandidates=complexGroupsDefiniteVars.get(i);      final Set<IVariable<?>> subsequentGroupDefiniteVars=new HashSet<IVariable<?>>();      for (int j=i + 1; j < complexGroupsDefiniteVars.size(); j++) {        subsequentGroupDefiniteVars.addAll(complexGroupsDefiniteVars.get(j));      }      joinVarCandidates.retainAll(subsequentGroupDefiniteVars);      projectedVars.addAll(joinVarCandidates);      final ProjectionNode projection=new ProjectionNode();      for (      IVariable<?> v : projectedVars) {        projection.addProjectionVar(new VarNode(v.getName()));      }      nsr.setProjection(projection);      if (i != complexGroups.size() - 1) {        if (!group.removeArg(anInclude))         throw new AssertionError();      }    }    precedingSolutionName=solutionSetName;  }}  }
class C{  public String byteCountToDisplaySize(long bytes,boolean isSI){  int unit=isSI ? 1000 : 1024;  if (bytes < unit) {    return bytes + " B";  }  int numberToFormat=(int)(Math.log(bytes) / Math.log(unit));  String prefix=(isSI ? SI_UNITS_INDEX : BINARY_UNITS_INDEX).charAt(numberToFormat - 1) + (isSI ? "" : "i");  return String.format("%.1f %sB",bytes / Math.pow(unit,numberToFormat),prefix);}  }
class C{  private void handleReceived(String[] args){  String[] values=args[3].split("&&");  if (values.length == 1) {    String[] temp=values[0].split(",");    sub.assertValue(new Tuple<>(temp[0],temp[1]));  } else   if (values.length > 1) {    List<Tuple<String,String>> assertList=new ArrayList<>();    for (    String v : values) {      String[] vals=v.split(",");      assertList.add(new Tuple<>(vals[0],vals[1]));    }    sub.assertValues(assertList);  }}  }
class C{  public ElementType type(){  return theType;}  }
class C{  public boolean applyAVM() throws SolverTimeoutException {  ExpressionExecutor exprExecutor=new ExpressionExecutor();  log.debug("Trying to remove characters");  boolean improvement=false;  checkpointVar(DistanceEstimator.getDistance(cnstr));  String oldString=strVar.getConcreteValue();  boolean improved=true;  while (improved && oldString.length() > 0) {    if (isFinished()) {      throw new SolverTimeoutException();    }    String newStr=oldString.substring(0,oldString.length() - 1);    strVar.setConcreteValue(newStr);    log.debug("Current attempt: " + newStr);    improved=false;    double newDist=DistanceEstimator.getDistance(cnstr);    if (newDist <= checkpointDistance) {      log.debug("Distance improved or did not increase, keeping change");      checkpointVar(newDist);      improvement=true;      improved=true;      oldString=newStr;      if (newDist == 0) {        return true;      }    } else {      log.debug("Distance did not improve, reverting change");      restoreVar();    }  }  log.debug("Trying to replace characters");  if (doStringAVM(oldString)) {    improvement=true;    oldString=strVar.getConcreteValue();  }  if (checkpointDistance == 0.0) {    return true;  }  log.debug("Trying to add characters");  checkpointVar(DistanceEstimator.getDistance(cnstr));  improved=true;  while (improved) {    if (isFinished()) {      throw new SolverTimeoutException();    }    improved=false;    char charToInsert=Randomness.nextChar();    String newStr=oldString + charToInsert;    strVar.setConcreteValue(newStr);    double newDist=DistanceEstimator.getDistance(cnstr);    log.debug("Adding: " + newStr + ": "+ newDist);    if (distImpr(newDist)) {      improvement=true;      improved=true;      checkpointVar(newDist);      if (checkpointDistance == 0.0) {        log.debug("Search seems successful, stopping at " + checkpointDistance + "/"+ newDist);        return true;      }      doCharacterAVM(newStr.length() - 1);      oldString=strVar.getConcreteValue();    } else {      restoreVar();    }  }  Set<StringValue> delimiters=getTokenDelimiters(cnstr);  for (  StringValue delimiter : delimiters) {    if (isFinished()) {      throw new SolverTimeoutException();    }    improved=true;    String delimiterStr=(String)delimiter.accept(exprExecutor,null);    while (improved) {      if (isFinished()) {        throw new SolverTimeoutException();      }      improved=false;      char charToInsert=Randomness.nextChar();      String newStr=oldString + delimiterStr + charToInsert;      strVar.setConcreteValue(newStr);      double newDist=DistanceEstimator.getDistance(cnstr);      log.debug("Adding: " + newStr + ": "+ newDist);      if (distImpr(newDist)) {        improvement=true;        improved=true;        checkpointVar(newDist);        if (checkpointDistance == 0.0) {          log.debug("Search seems successful, stopping at " + checkpointDistance + "/"+ newDist);          return true;        }        doCharacterAVM(newStr.length() - 1);        oldString=strVar.getConcreteValue();      } else {        restoreVar();      }    }  }  return improvement;}  }
class C{  @ViewDebug.ExportedProperty(category="progress") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  if (isAttribute) {    if (elementNameTable == null)     elementNameTable=new Hashtable();    table=elementNameTable;  } else {    if (attributeNameTable == null)     attributeNameTable=new Hashtable();    table=attributeNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute || defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=qName.intern();    name[2]=name[1];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null) {      return null;    }    name[0]=uri;    name[1]=local.intern();    name[2]=qName.intern();  }  table.put(name[2],name);  tablesDirty=true;  return name;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public SourcePosition(File file,JCTree sourceElement,Position position){  super();  this.file=file;  this.endPosition=this.startPosition=position;  this.sourceElement=sourceElement;}  }
class C{  public void defineFillStyle(Symbol image,Transform matrix,boolean clipped){  ImageFill fill=new ImageFill(image,matrix,clipped);  elements.add(fill);}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){  CertPathValidator validatorLocal=null;  CertificateFactory factoryLocal=null;  KeyStore rootKeyStoreLocal=null;  TrustedCertificateStore trustedCertificateStoreLocal=null;  TrustedCertificateIndex trustedCertificateIndexLocal=null;  X509Certificate[] acceptedIssuersLocal=null;  Exception errLocal=null;  try {    validatorLocal=CertPathValidator.getInstance("PKIX");    factoryLocal=CertificateFactory.getInstance("X509");    if ("AndroidCAStore".equals(keyStore.getType())) {      rootKeyStoreLocal=keyStore;      trustedCertificateStoreLocal=new TrustedCertificateStore();      acceptedIssuersLocal=null;      trustedCertificateIndexLocal=new TrustedCertificateIndex();    } else {      rootKeyStoreLocal=null;      trustedCertificateStoreLocal=null;      acceptedIssuersLocal=acceptedIssuers(keyStore);      trustedCertificateIndexLocal=new TrustedCertificateIndex(trustAnchors(acceptedIssuersLocal));    }  } catch (  Exception e) {    errLocal=e;  }  if (manager != null) {    this.pinManager=manager;  } else {    try {      pinManager=new CertPinManager(trustedCertificateStoreLocal);    } catch (    PinManagerException e) {      throw new SecurityException("Could not initialize CertPinManager",e);    }  }  this.rootKeyStore=rootKeyStoreLocal;  this.trustedCertificateStore=trustedCertificateStoreLocal;  this.validator=validatorLocal;  this.factory=factoryLocal;  this.trustedCertificateIndex=trustedCertificateIndexLocal;  this.acceptedIssuers=acceptedIssuersLocal;  this.err=errLocal;}  }
class C{  public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){  this.paintSequence=paintSequence;  this.fillPaintSequence=DEFAULT_FILL_PAINT_SEQUENCE;  this.outlinePaintSequence=outlinePaintSequence;  this.strokeSequence=strokeSequence;  this.outlineStrokeSequence=outlineStrokeSequence;  this.shapeSequence=shapeSequence;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.THIS_TYPE_REF_STRUCTURAL;}  }
class C{  public static TreeMaker instance(Context context){  TreeMaker instance=context.get(treeMakerKey);  if (instance == null)   instance=new TreeMaker(context);  return instance;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public boolean do_tlo(){  return soot.PhaseOptions.getBoolean(options,"do-tlo");}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public static List<Initiator> findUserAddedInisFromExistingIniListInMask(List<Initiator> existingInitiators,URI excludeUnmanagedMask,DbClient dbClient){  List<Initiator> userAddedInis=new ArrayList<Initiator>();  for (  Initiator initiator : existingInitiators) {    List<URI> unManagedMaskUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedExportMaskKnownInitiatorConstraint(initiator.getInitiatorPort()));    if (null == unManagedMaskUris || unManagedMaskUris.isEmpty()) {      _logger.info("UnManaged Masks Empty, adding initiator {}..{} to userAddedList",initiator.getId(),initiator.getInitiatorPort());      userAddedInis.add(initiator);    } else {      unManagedMaskUris.remove(excludeUnmanagedMask);      if (unManagedMaskUris.isEmpty()) {        userAddedInis.add(initiator);      }      List<UnManagedExportMask> unManagedMasks=dbClient.queryObject(UnManagedExportMask.class,unManagedMaskUris);      for (      UnManagedExportMask unManagedMask : unManagedMasks) {        ExportMask exportMask=getExportsMaskAlreadyIngested(unManagedMask,dbClient);        if (null != exportMask && exportMask.getCreatedBySystem()) {          _logger.info("ViPR created/ingested Export Mask {} found for unmanaged mask, adding initiator {}..{} to userAddedList",new Object[]{exportMask.getMaskName(),initiator.getId(),initiator.getInitiatorPort()});          exportMask.addToUserCreatedInitiators(initiator);          exportMask.addToExistingInitiatorsIfAbsent(initiator);          exportMask.addInitiator(initiator);          dbClient.updateAndReindexObject(exportMask);          userAddedInis.add(initiator);        } else {          _logger.info("UnManaged Mask {} doesn't have any ViPR created export masks, skipping initiator from user added list",unManagedMask.getMaskName(),initiator.getId());        }      }    }  }  _logger.info("User Added Initiators found {}",Joiner.on(",").join(userAddedInis));  return userAddedInis;}  }
class C{  public VOConfigurationSetting(ConfigurationKey informationId,String contextId,String value){  this.informationId=informationId;  this.contextId=contextId;  this.value=value;}  }
class C{  public void clear(){  defaultRemoveGraphs.clear();  defaultInsertGraph=null;  defaultGraphs.clear();  namedGraphs.clear();}  }
class C{  public void markLightingDirty(){synchronized (mFrameTaskQueue) {    mLightsDirty=true;  }}  }
class C{  public RegexpChunkParser(list<RegexpChunkRule> rules,String chunk_label,String root_label,int trace){  this._rules=rules;  this._trace=trace;  this._chunk_label=chunk_label;  this._root_label=root_label;}  }
class C{  @Override protected void onDetachedFromWindow(){  super.onDetachedFromWindow();  String text=getText().toString();  if (text.length() > 0) {    mCacheMap.put(mRememberId,text);    if (mCacheDataList.isEmpty() || !text.equals(mCacheDataList.get(0))) {      mCacheDataList.add(0,text);    }  }  for (int i=1; i < mCacheDataList.size(); ++i) {    mCacheMap.put(mRememberId + i,mCacheDataList.get(i));  }}  }
class C{  public static void writeStringToStream(String string,OutputStream stream,Charset charset) throws IOException {  OutputStreamWriter osw=new OutputStreamWriter(stream,charset);  try {    osw.append(string);    osw.flush();  }  finally {    osw.close();  }}  }
class C{  @Override public void recordFailure(Throwable throwable){  if (circuitBreakerConfig.getExceptionPredicate().test(throwable)) {    stateReference.get().recordFailure();  }}  }
class C{  public ObjectFactory(){}  }
class C{  protected static void copyOrMove(File sourceLocation,File targetLocation,boolean move) throws IOException {  String[] children;  int i;  InputStream in;  OutputStream out;  byte[] buf;  int len;  if (sourceLocation.isDirectory()) {    if (!targetLocation.exists())     targetLocation.mkdir();    children=sourceLocation.list();    for (i=0; i < children.length; i++) {      copyOrMove(new File(sourceLocation,children[i]),new File(targetLocation,children[i]),move);    }    if (move)     sourceLocation.delete();  } else {    in=new FileInputStream(sourceLocation);    if (targetLocation.isDirectory())     out=new FileOutputStream(targetLocation.getAbsolutePath() + File.separator + sourceLocation.getName()); else     out=new FileOutputStream(targetLocation);    buf=new byte[1024];    while ((len=in.read(buf)) > 0)     out.write(buf,0,len);    in.close();    out.close();    if (move)     sourceLocation.delete();  }}  }
class C{  private static void buildAddress(final INaviInstruction instruction,final StringBuffer line,final List<CStyleRunData> styleRun,final INodeModifier modifier){  final String normalAddress=instruction.getAddress().toHexString();  final String address=modifier == null ? normalAddress : modifier.getAddress(instruction);  line.append(address);  if (address.equals(normalAddress)) {    styleRun.add(new CStyleRunData(0,address.length(),ConfigManager.instance().getColorSettings().getAddressColor()));  } else {    styleRun.add(new CStyleRunData(0,address.length(),Color.RED));  }  line.append(PADDING_AFTER_ADDRESS);}  }
class C{  public static String transferIndex(final SeedDB seeds,final Seed targetSeed,final ReferenceContainerCache<WordReference> indexes,final HandleSet urlRefs,final Segment segment,final boolean gzipBody,final int timeout){  if (Network.log.isFine()) {    Iterator<WordReference> eenum;    Reference entry;    for (    final ReferenceContainer<WordReference> ic : indexes) {      eenum=ic.entries();      while (eenum.hasNext()) {        entry=eenum.next();        if (!urlRefs.has(entry.urlhash())) {          Network.log.fine("DEBUG transferIndex: to-send url hash '" + ASCII.String(entry.urlhash()) + "' is not contained in urlCache");        }      }    }  }  Map<String,String> in=transferRWI(targetSeed,indexes,gzipBody,timeout);  if (in == null) {    String errorCause="no connection from transferRWI";    seeds.peerActions.peerDeparture(targetSeed,errorCause);    return errorCause;  }  String result=in.get("result");  if (result == null) {    String errorCause="no result from transferRWI";    seeds.peerActions.peerDeparture(targetSeed,errorCause);    return errorCause;  }  if (!(result.equals("ok"))) {    targetSeed.setFlagAcceptRemoteIndex(false);    seeds.addConnected(targetSeed);    return result;  }  String uhss=in.get("unknownURL");  if (uhss == null) {    return "no unknownURL tag in response";  }  uhss=uhss.trim();  if (uhss.isEmpty() || uhss.equals(",")) {    return null;  }  final String[] uhs=CommonPattern.COMMA.split(uhss);  if (uhs.length == 0) {    return null;  }  EventChannel.channels(EventChannel.DHTSEND).addMessage(new RSSMessage("Sent " + indexes.size() + " RWIs "+ indexes.toString()+ " to "+ targetSeed.getName()+ "/["+ targetSeed.hash+ "], "+ uhs.length+ " URLs there unknown","",targetSeed.hash));  in=transferURL(targetSeed,uhs,urlRefs,segment,gzipBody,timeout);  if (in == null) {    return "no connection from transferURL";  }  result=in.get("result");  if (result == null) {    String errorCause="no result from transferURL";    seeds.peerActions.peerDeparture(targetSeed,errorCause);    return errorCause;  }  if (!result.equals("ok")) {    targetSeed.setFlagAcceptRemoteIndex(false);    seeds.addConnected(targetSeed);    return result;  }  EventChannel.channels(EventChannel.DHTSEND).addMessage(new RSSMessage("Sent " + uhs.length + " URLs to peer "+ targetSeed.getName()+ "/["+ targetSeed.hash+ "]","",targetSeed.hash));  return null;}  }
class C{  public String toString(){  return getName() + " " + getDescriptor();}  }
class C{  public void uninstall(){  if (presenter != null)   presenter.setCanceled(true);  if (styledTextXtextAdapter != null) {    if (calculator != null) {      if (styledTextXtextAdapter.getXtextDocument() != null)       styledTextXtextAdapter.getXtextDocument().removeModelListener(this);      sourceViewer.removeTextInputListener(this);    }    styledTextXtextAdapter=null;  }  sourceViewer=null;  presenter=null;}  }
class C{  public boolean isChanged(){  return m_nCurrentEditAction != m_nSavedPointer;}  }
class C{  public boolean isLigature(){  return gm.isLigature();}  }
class C{  public NioSocketSession(IoService service,IoProcessor<NioSession> processor,SocketChannel channel){  super(processor,service,channel);  config=new SessionConfigImpl();  this.config.setAll(service.getSessionConfig());}  }
class C{  public WrappedByteBuffer put(byte v){  _autoExpand(1);  _buf.put(v);  return this;}  }
class C{  public static byte[] toByteArray(char[] carr,String charset) throws UnsupportedEncodingException {  return new String(carr).getBytes(charset);}  }
class C{  public void testOverlappingPolygonsHolesRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  Polygon[] pt=new Polygon[4];  STRUCT[] st=new STRUCT[8];  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  pg.setNumberHoles(4);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Polygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    Polygon pt2=(Polygon)or.read(st[i]);    assertTrue("The input polygon is not the same as the output polygon",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  public Jonas5xRuntimeConfiguration(){  super();  setProperty(JonasPropertySet.JONAS_UNDEPLOY_IGNORE_VERSION,"false");}  }
class C{  public DecryptionFactory(final byte[] id,final Certificate certificate,final PrivateKey key){  this.ID=id;  this.certificate=certificate;  this.key=key;}  }
class C{  public static Map<String,Object> initLowLevelCode(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> products=EntityQuery.use(delegator).from("Product").orderBy("isVirtual DESC").queryList();    Long zero=Long.valueOf(0);    List<GenericValue> allProducts=FastList.newInstance();    for (    GenericValue product : products) {      product.set("billOfMaterialLevel",zero);      allProducts.add(product);    }    delegator.storeAll(allProducts);    Debug.logInfo("Low Level Code set to 0 for all the products",module);    for (    GenericValue product : products) {      try {        Map<String,Object> depthResult=dispatcher.runSync("updateLowLevelCode",UtilMisc.<String,Object>toMap("productIdTo",product.getString("productId"),"alsoComponents",Boolean.valueOf(false),"alsoVariants",Boolean.valueOf(false)));        Debug.logInfo("Product [" + product.getString("productId") + "] Low Level Code ["+ depthResult.get("lowLevelCode")+ "]",module);      } catch (      Exception exc) {        Debug.logWarning(exc.getMessage(),module);      }    }  } catch (  Exception e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningInitLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  return result;}  }
class C{  @Override public byte[] dataToRGBByteArray(final byte[] data,final int w,final int h){  final int imgSize=w * h;  for (int i=0; i < imgSize * 3; i+=3) {    final float cl=(data[i] & 255) * C4;    final float ca=(data[i + 1] & 255) - C5;    final float cb=(data[i + 2] & 255) - C5;    convertToRGB(cl,ca,cb);    data[i]=(byte)r;    data[i + 1]=(byte)g;    data[i + 2]=(byte)b;  }  return data;}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder duration(int duration){  this.duration=duration;  return this;}  }
class C{  public BindingValidator(){}  }
class C{  public final double mean(){  long count=0;  double mean=0;  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      mean+=fieldx[y];      count++;    }  }  return (count == 0 ? 0 : mean / count);}  }
class C{  public CompositeAction(){  super(null,0);}  }
class C{  private void buildGui(final Class<? extends IPage<?>> defaultPageClass){  final List<IPage<?>> pageList=new ArrayList<>();  pageList.add(new AboutPage());  pageList.add(new ComponentsPage());  pageList.add(new WelcomePage());  pageList.add(new NewsPage());  pageList.add(new LicensePage());  pageList.add(new TipsPage());  pageList.add(new RegInfoPage());  pageList.add(new AvailExtModsPage());  pageList.add(new LogsPage());  pageList.add(new SysInfoPage());  IPage<?> defaultPage=null;  if (defaultPageClass != null)   for (  final IPage<?> page : pageList)   if (page.getClass().equals(defaultPageClass)) {    defaultPage=page;    break;  }  final MultiPageComp multiPageComp=new MultiPageComp(pageList,defaultPage,getLayeredPane());  cp.addCenter(multiPageComp);  getRootPane().setDefaultButton(addCloseButton("_OK"));}  }
class C{  private static byte[] max(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) > (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  protected void mergeTemplate(Template template,Context context,HttpServletResponse response) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, IOException, UnsupportedEncodingException, Exception {  ServletOutputStream output=response.getOutputStream();  VelocityWriter vw=null;  String encoding=response.getCharacterEncoding();  try {    vw=(VelocityWriter)writerPool.get();    if (vw == null) {      vw=new VelocityWriter(new OutputStreamWriter(output,encoding),4 * 1024,true);    } else {      vw.recycle(new OutputStreamWriter(output,encoding));    }    template.merge(context,vw);  }  finally {    try {      if (vw != null) {        vw.flush();        vw.recycle(null);        writerPool.put(vw);      }    } catch (    Exception e) {    }  }}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:34.815 -0500",hash_original_method="B943BA9A516C7D27398DA677689F619E",hash_generated_method="AF61DDA6338265B622ECA4BC7473512D") public int dispatchWapPdu(byte[] pdu){  if (false)   Log.d(LOG_TAG,"Rx: " + IccUtils.bytesToHexString(pdu));  int index=0;  int transactionId=pdu[index++] & 0xFF;  int pduType=pdu[index++] & 0xFF;  int headerLength=0;  if ((pduType != WspTypeDecoder.PDU_TYPE_PUSH) && (pduType != WspTypeDecoder.PDU_TYPE_CONFIRMED_PUSH)) {    if (false)     Log.w(LOG_TAG,"Received non-PUSH WAP PDU. Type = " + pduType);    return Intents.RESULT_SMS_HANDLED;  }  pduDecoder=new WspTypeDecoder(pdu);  if (pduDecoder.decodeUintvarInteger(index) == false) {    if (false)     Log.w(LOG_TAG,"Received PDU. Header Length error.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }  headerLength=(int)pduDecoder.getValue32();  index+=pduDecoder.getDecodedDataLength();  int headerStartIndex=index;  if (pduDecoder.decodeContentType(index) == false) {    if (false)     Log.w(LOG_TAG,"Received PDU. Header Content-Type error.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }  String mimeType=pduDecoder.getValueString();  long binaryContentType=pduDecoder.getValue32();  index+=pduDecoder.getDecodedDataLength();  byte[] header=new byte[headerLength];  System.arraycopy(pdu,headerStartIndex,header,0,header.length);  byte[] intentData;  if (mimeType != null && mimeType.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {    intentData=pdu;  } else {    int dataIndex=headerStartIndex + headerLength;    intentData=new byte[pdu.length - dataIndex];    System.arraycopy(pdu,dataIndex,intentData,0,intentData.length);  }  if (pduDecoder.seekXWapApplicationId(index,index + headerLength - 1)) {    index=(int)pduDecoder.getValue32();    pduDecoder.decodeXWapApplicationId(index);    String wapAppId=pduDecoder.getValueString();    if (wapAppId == null) {      wapAppId=Integer.toString((int)pduDecoder.getValue32());    }    String contentType=((mimeType == null) ? Long.toString(binaryContentType) : mimeType);    if (false)     Log.v(LOG_TAG,"appid found: " + wapAppId + ":"+ contentType);    try {      boolean processFurther=true;      IWapPushManager wapPushMan=mWapConn.getWapPushManager();      if (wapPushMan == null) {        if (false)         Log.w(LOG_TAG,"wap push manager not found!");      } else {        Intent intent=new Intent();        intent.putExtra("transactionId",transactionId);        intent.putExtra("pduType",pduType);        intent.putExtra("header",header);        intent.putExtra("data",intentData);        intent.putExtra("contentTypeParameters",pduDecoder.getContentParameters());        int procRet=wapPushMan.processMessage(wapAppId,contentType,intent);        if (false)         Log.v(LOG_TAG,"procRet:" + procRet);        if ((procRet & WapPushManagerParams.MESSAGE_HANDLED) > 0 && (procRet & WapPushManagerParams.FURTHER_PROCESSING) == 0) {          processFurther=false;        }      }      if (!processFurther) {        return Intents.RESULT_SMS_HANDLED;      }    } catch (    RemoteException e) {      if (false)       Log.w(LOG_TAG,"remote func failed...");    }  }  if (false)   Log.v(LOG_TAG,"fall back to existing handler");  if (mimeType == null) {    if (false)     Log.w(LOG_TAG,"Header Content-Type error.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }  String permission;  if (mimeType.equals(WspTypeDecoder.CONTENT_TYPE_B_MMS)) {    permission="android.permission.RECEIVE_MMS";  } else {    permission="android.permission.RECEIVE_WAP_PUSH";  }  Intent intent=new Intent(Intents.WAP_PUSH_RECEIVED_ACTION);  intent.setType(mimeType);  intent.putExtra("transactionId",transactionId);  intent.putExtra("pduType",pduType);  intent.putExtra("header",header);  intent.putExtra("data",intentData);  intent.putExtra("contentTypeParameters",pduDecoder.getContentParameters());  mSmsDispatcher.dispatch(intent,permission);  return Activity.RESULT_OK;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.FUNCTION_DECLARATION__BODY:  return body != null;case N4JSPackage.FUNCTION_DECLARATION__LOK:return _lok != null;case N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:return definedType != null;case N4JSPackage.FUNCTION_DECLARATION__FPARS:return fpars != null && !fpars.isEmpty();case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:return returnTypeRef != null;case N4JSPackage.FUNCTION_DECLARATION__GENERATOR:return generator != GENERATOR_EDEFAULT;case N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:return declaredAsync != DECLARED_ASYNC_EDEFAULT;case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();case N4JSPackage.FUNCTION_DECLARATION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  private static char parseEscapedSequence(StringCharacterIterator iterator) throws UnsupportedEncodingException {  char c=iterator.next();switch (c) {case '\\':case '"':case 'b':case 'n':case 'r':case 't':    return c;case 'U':case 'u':{    String unicodeValue=new String(new char[]{iterator.next(),iterator.next(),iterator.next(),iterator.next()});    return (char)Integer.parseInt(unicodeValue,16);  }default :{  String num=new String(new char[]{c,iterator.next(),iterator.next()});  return (char)Integer.parseInt(num,8);}}}  }
class C{  public static long readVLong(final byte[] buffer,final int offset) throws IOException {  byte firstByte=buffer[offset];  int len=WritableUtils.decodeVIntSize(firstByte);  if (len == 1) {    return firstByte;  }  long i=0;  for (int idx=0; idx < len - 1; idx++) {    byte b=buffer[offset + 1 + idx];    i=i << 8;    i=i | (b & 0xFF);  }  return (WritableUtils.isNegativeVInt(firstByte) ? ~i : i);}  }
class C{  public void edit(Object plotCanvas){  String _label=JOptionPane.showInputDialog((PlotCanvas)plotCanvas,"Choose axis label",label);  if (_label != null) {    setLegend(_label);  }}  }
class C{  public synchronized void progressValue(int value){  if (this.progressDialog != null) {    this.progressDialog.setProgress(value);  }}  }
class C{  public Namespaces intern(Namespaces ns){  Namespaces n=get(ns);  if (n == null) {    put(ns,ns);    n=ns;  }  return n;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  void lockedQuery(Object lowerBoundKey,int lowerBoundOperator,Object upperBoundKey,int upperBoundOperator,Collection results,Set keysToRemove,ExecutionContext context) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  lowerBoundKey=TypeUtils.indexKeyFor(lowerBoundKey);  upperBoundKey=TypeUtils.indexKeyFor(upperBoundKey);  boolean lowerBoundInclusive=lowerBoundOperator == OQLLexerTokenTypes.TOK_GE;  boolean upperBoundInclusive=upperBoundOperator == OQLLexerTokenTypes.TOK_LE;  int limit=-1;  Boolean applyLimit=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_LIMIT_AT_INDEX);  if (applyLimit != null && applyLimit.booleanValue()) {    limit=((Integer)context.cacheGet(CompiledValue.RESULT_LIMIT)).intValue();  }  Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);  List orderByAttrs=null;  boolean asc=true;  boolean multiColOrderBy=false;  if (orderByClause != null && orderByClause.booleanValue()) {    orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);    CompiledSortCriterion csc=(CompiledSortCriterion)orderByAttrs.get(0);    asc=!csc.getCriterion();    multiColOrderBy=orderByAttrs.size() > 1;  }  if (isEmpty()) {    return;  }  lowerBoundKey=getPdxStringForIndexedPdxKeys(lowerBoundKey);  upperBoundKey=getPdxStringForIndexedPdxKeys(upperBoundKey);  if (keysToRemove == null) {    keysToRemove=new HashSet();  }  CloseableIterator<IndexStoreEntry> iterator=null;  try {    if (asc) {      iterator=indexStore.iterator(lowerBoundKey,lowerBoundInclusive,upperBoundKey,upperBoundInclusive,keysToRemove);    } else {      iterator=indexStore.descendingIterator(lowerBoundKey,lowerBoundInclusive,upperBoundKey,upperBoundInclusive,keysToRemove);    }    addToResultsFromEntries(lowerBoundKey,upperBoundKey,lowerBoundOperator,upperBoundOperator,iterator,results,null,null,context,null,null,true,multiColOrderBy ? -1 : limit);  }  finally {    if (iterator != null) {      iterator.close();    }  }}  }
class C{  public int value(){  return (int)scalar.val[2];}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 15:02:00.239 -0400",hash_original_method="2CC55E2F385232BCD097C19E9A10379E",hash_generated_method="FA8CEC8DA0E9EBF40DD9D327F34E15F2") public static boolean startActivities(Context context,Intent[] intents,Bundle options){  final int version=Build.VERSION.SDK_INT;  if (version >= 16) {    ContextCompatJellybean.startActivities(context,intents,options);    return true;  } else   if (version >= 11) {    ContextCompatHoneycomb.startActivities(context,intents);    return true;  }  return false;}  }
class C{  public Stream<T> takeWhile(Predicate<? super T> predicate){  requireNonNull(predicate);  if (predicate.test(element)) {    return this;  } else {    return empty();  }}  }
class C{  public RemoteAddressServiceImpl(final GenericDTOService<AddressDTO> addressDTOGenericDTOService){  super(addressDTOGenericDTOService);  this.dtoAddressService=(DtoAddressService)addressDTOGenericDTOService;}  }
class C{  public void forEach(Allocation ain,Allocation aout){  forEach(0,ain,aout,null);}  }
class C{  public Alias(Object object,CharSequence alias){  this.object=object;  this.alias=alias;}  }
class C{  public int hashCode(){  if (myhash == -1) {    myhash=timestamp.hashCode() + signerCertPath.hashCode();  }  return myhash;}  }
class C{  public void openPopup(){  if (settings == null) {    return;  }  if (!isEnabled()) {    return;  }  if (!dateTextField.hasFocus()) {    dateTextField.requestFocusInWindow();  }  LocalDate selectedDateForCalendar=lastValidDate;  DatePicker thisDatePicker=this;  calendarPanel=new CalendarPanel(thisDatePicker);  if (selectedDateForCalendar != null) {    calendarPanel.setSelectedDate(selectedDateForCalendar);  }  popup=new CustomPopup(calendarPanel,SwingUtilities.getWindowAncestor(this),this,settings.getBorderCalendarPopup());  int defaultX=toggleCalendarButton.getLocationOnScreen().x + toggleCalendarButton.getBounds().width - popup.getBounds().width - 2;  int defaultY=toggleCalendarButton.getLocationOnScreen().y + toggleCalendarButton.getBounds().height + 2;  zSetPopupLocation(popup,defaultX,defaultY,this,dateTextField,2,6);  popup.show();  calendarPanel.requestFocus();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tracecase_deact_name_1: ");  result.append(tracecase_deact_name_1);  result.append(')');  return result.toString();}  }
class C{  protected final void release(){  MsgIdGenerator.release(this.msgId);  this.buffer.clear();  this.overflowBuf=null;  Buffers.releaseSenderBuffer(this.buffer,this.stats);}  }
class C{  public boolean isOpsModePossible(){  return true;}  }
class C{  private void traversePostOrder(Tree tree){  traversePostOrder(tree,tree.getRoot());}  }
class C{  public Boolean isChrgsApldInd(){  return chrgsApldInd;}  }
class C{  public ColumnId(TableId tableId,String columnName){  this.tableId=tableId;  this.columnName=columnName;  assert this.tableId != null;  assert this.columnName != null;  this.id=columnId(this.tableId,this.columnName);}  }
class C{  public boolean isInBitmapMemoryCache(final Uri uri){  Predicate<CacheKey> bitmapCachePredicate=predicateForUri(uri);  return mBitmapMemoryCache.contains(bitmapCachePredicate);}  }
class C{  public void registerDriversForReferenceNotification(AbstractDriver[] drivers){  this.registeredDrivers=drivers;}  }
class C{  @Override public final synchronized Set<Map.Entry<K,V>> entrySet(){  final Set<Map.Entry<K,V>> m=new HashSet<Map.Entry<K,V>>();  for (  final Map.Entry<K,V> entry : this.levelA.entrySet())   m.add(entry);  for (  final Map.Entry<K,V> entry : this.levelB.entrySet())   m.add(entry);  return m;}  }
class C{  public static void reconfigureLogging(final String pkg,final String name){  config.privateReconfigureLogging(pkg,name);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void run(){  try {    AbstractMessage clientMsg=ServerMessaging.receiveMsgProto(clientSocket);    if (clientMsg == null) {      ServerMessaging.sendSimpleResponseProto(ServerErr.MALFORMED_CLIENT_MSG_ERR,clientSocket);    } else     if (clientMsg instanceof Registration) {      handleRegistrationProto((Registration)clientMsg);    } else     if (clientMsg instanceof CommitmentReq) {      handleCommitmentReqProto((CommitmentReq)clientMsg);    } else     if (clientMsg instanceof KeyLookup) {      handleKeyLookupProto((KeyLookup)clientMsg);    } else     if (clientMsg instanceof ULNChangeReq) {      handleULNChangeProto((ULNChangeReq)clientMsg);    } else     if (clientMsg instanceof SignedULNChangeReq) {      handleSignedULNChangeProto((SignedULNChangeReq)clientMsg);    } else {      ServerMessaging.sendSimpleResponseProto(ServerErr.MALFORMED_CLIENT_MSG_ERR,clientSocket);    }  } catch (  IOException e) {    Logging.error("Error connecting to client: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public static Parser<Character,Character> chr(char c){  return satisfy(c);}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    put(key,value);  }  return this;}  }
class C{  private void drag(VelocityTracker vt,int startX,int endX,int startY,int endY,int steps,long startime,int duration,Interpolator interpolator){  addMotionEvent(vt,startX,startY,startime,MotionEvent.ACTION_DOWN);  float dt=duration / (float)steps;  int distX=endX - startX;  int distY=endY - startY;  for (int i=1; i < steps - 1; i++) {    float ii=interpolator.getInterpolation(i / (float)steps);    int x=(int)(startX + distX * ii);    int y=(int)(startY + distY * ii);    long time=startime + (int)(i * dt);    addMotionEvent(vt,x,y,time,MotionEvent.ACTION_MOVE);  }  addMotionEvent(vt,endX,endY,startime + duration,MotionEvent.ACTION_UP);}  }
class C{  public static String quote(String s){  int slashEIndex=s.indexOf("\\E");  if (slashEIndex == -1)   return "\\Q" + s + "\\E";  StringBuilder sb=new StringBuilder(s.length() * 2);  sb.append("\\Q");  int current=0;  while ((slashEIndex=s.indexOf("\\E",current)) != -1) {    sb.append(s.substring(current,slashEIndex));    current=slashEIndex + 2;    sb.append("\\E\\\\E\\Q");  }  sb.append(s.substring(current,s.length()));  sb.append("\\E");  return sb.toString();}  }
class C{  public List<AVA> avas(){  List<AVA> list=avaList;  if (list == null) {    list=Collections.unmodifiableList(Arrays.asList(assertion));    avaList=list;  }  return list;}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  @Override public void add(int location,KnownShield object){  throw new UnsupportedOperationException();}  }
class C{  public RingBufferIterator(RingBuffer<E> ringBuffer){  RingBuffer<E> clonedBuffer=ringBuffer.clone();  this.elements=clonedBuffer.getElements();  this.lastElementIndex=clonedBuffer.getLastElement();  this.elementCursor=this.lastElementIndex;}  }
class C{  @Override public void addToWorld(){  fillQuestInfo("Kill Enemy Army","Despot Halb Errvl has a vendetta against any army who opposes him.",true);  step_1();}  }
class C{  public String stacktrace(){  return stacktrace;}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  String action=intent.getAction();  if (action.equals(NOTIFICATION_INTENT_CANCEL)) {    if (isPlaying())     stop();    mNotificationManager.cancel(NOTIFICATION_ID);  } else   if (action.equals(NOTIFICATION_INTENT_PLAY_PAUSE)) {    if (isPlaying())     pause(); else     play(mStreamURL);  }  return START_NOT_STICKY;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public Pyramid(Position centerPosition,double height,double width){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0 || width <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=width / 2;  this.verticalRadius=height / 2;  this.eastWestRadius=width / 2;  this.setUpGeometryCache();}  }
class C{  protected void processFile(String fileName) throws Exception {  processFile(fileName,getSystemIdForFileName(fileName));}  }
class C{  static public void writeURL(Writer out,String text,char[] textBuff,String queryEncoding) throws IOException, UnsupportedEncodingException {  int length=text.length();  if (length >= 16) {    text.getChars(0,length,textBuff,0);    writeURL(out,textBuff,0,length,queryEncoding);  } else {    for (int i=0; i < length; i++) {      char ch=text.charAt(i);      if ((ch < 33) || (ch > 126)) {        if (ch == ' ') {          out.write('+');        } else {          textBuff[i]=ch;          encodeURIString(out,textBuff,"UTF-8",i,i + 1);        }      } else       if (ch == '"') {        out.write("%22");      } else       if (ch == '?') {        out.write('?');        encodeURIString(out,text,queryEncoding,i + 1);        return;      } else {        out.write(ch);      }    }  }}  }
class C{  @Override public String toString(){  return getKey() + "=" + getValue();}  }
class C{  @Override public void reset() throws IOException {  in.reset();  lineNumber=markedLineNumber;  lastChar=markedLastChar;}  }
class C{  public static boolean testPointCircle(float pX,float pY,float centerX,float centerY,float radiusSquared){  float dx=pX - centerX;  float dy=pY - centerY;  float dx2=dx * dx;  float dy2=dy * dy;  return dx2 + dy2 <= radiusSquared;}  }
class C{  public DGetPassword(JDialog parent,String title,Dialog.ModalityType modality){  super(parent,title,modality);  initComponents();}  }
class C{  @Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {  if (args.length < 5)   throw new WrongUsageException("commands.testmod3.rotatevector.usage");  final double x=parseDouble(args[0]), y=parseDouble(args[1]), z=parseDouble(args[2]);  final Vector3d inputVector=new Vector3d(x,y,z);  final EnumFacing.Axis axis=EnumFacing.Axis.byName(args[3].toLowerCase(Locale.ENGLISH));  if (axis == null)   throw new WrongUsageException("commands.testmod3.rotatevector.invalid_axis");  final int degrees=parseInt(args[4]);  final Matrix3d rotationMatrix=VectorUtils.getRotationMatrix(axis,Math.toRadians(degrees));  rotationMatrix.transform(inputVector);  sender.addChatMessage(new TextComponentTranslation("commands.testmod3.rotatevector.result",inputVector.getX(),inputVector.getY(),inputVector.getZ()));}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  protected void printWay(MapWay way,DefaultEntityViewInfo pInfo,boolean asArea){  List<MapNode> nodes=getWayNodes(way);  if (nodes != null) {    boolean asOneway=false;    NameInfo textInfo=null;    if (scale >= pInfo.minNameScale * displayFactor) {      asOneway=way.isOneway();      if (way.getName() != null && pInfo.nameColor != null) {        textInfo=new NameInfo(way.getName(),pInfo.nameColor,pInfo.printOrder);      }    }    printLine(imageBdr,nodes,pInfo,asArea,asOneway,textInfo);  }}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[34];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 16; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 34; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  protected static void restValidateResponses(final PwmRequest pwmRequest,final SetupResponsesBean setupResponsesBean) throws IOException, ServletException, PwmUnrecoverableException, ChaiUnavailableException {  final Date startTime=new Date();  final PwmSession pwmSession=pwmRequest.getPwmSession();  final PwmApplication pwmApplication=pwmRequest.getPwmApplication();  final String responseModeParam=pwmRequest.readParameterAsString("responseMode");  final SetupResponsesBean.SetupData setupData="helpdesk".equalsIgnoreCase(responseModeParam) ? setupResponsesBean.getHelpdeskResponseData() : setupResponsesBean.getResponseData();  boolean success=true;  String userMessage=Message.getLocalizedMessage(pwmSession.getSessionStateBean().getLocale(),Message.Success_ResponsesMeetRules,pwmApplication.getConfig());  try {    final Map<Challenge,String> responseMap=readResponsesFromJsonRequest(pwmRequest,setupData);    final int minRandomRequiredSetup=setupData.getMinRandomSetup();    pwmApplication.getCrService().validateResponses(setupData.getChallengeSet(),responseMap,minRandomRequiredSetup);    generateResponseInfoBean(pwmRequest,setupData.getChallengeSet(),responseMap,Collections.<Challenge,String>emptyMap());  } catch (  PwmDataValidationException e) {    success=false;    userMessage=e.getErrorInformation().toUserStr(pwmSession,pwmApplication);  }  final ValidationResponseBean validationResponseBean=new ValidationResponseBean(userMessage,success);  final RestResultBean restResultBean=new RestResultBean(validationResponseBean);  LOGGER.trace(pwmRequest,"completed rest validate response in " + TimeDuration.fromCurrent(startTime).asCompactString() + ", result="+ JsonUtil.serialize(restResultBean));  pwmRequest.outputJsonResult(restResultBean);}  }
class C{  private static String createIdFromJndiLocationIfNotNull(String jndiLocation){  String id=null;  if (jndiLocation != null) {    id=createIdFromJndiLocation(jndiLocation);  }  return id;}  }
class C{  public EntityClassifier<C> addRule(String attName,String attValue,C eclass){  EntityClassifier<C> result=new EntityClassifier<C>();  result.setDefaultEntityClass(eclass);  RuleGroup<C> rg=null;  if (!rules.isEmpty()) {    RuleGroup<C> last=rules.get(rules.size() - 1);    if (last.attName.equals(attName))     rg=last;  }  if (rg == null) {    rg=new RuleGroup<C>(attName);    rules.add(rg);  }  if (attValue == null)   rg.defaultSubClassifier=result; else {    int i=0;    while (i < rg.attValueRules.size() && attValue.compareTo(rg.attValueRules.get(i).attValue) > 0)     i++;    rg.attValueRules.add(i,new Rule<C>(attValue,result));  }  return result;}  }
class C{  public void updateVisibleLayers(){  Vector<LayerInfo> visibleLayers=Landscape.getInstance().getLayerManager().getVisibleLayers();  for (int i=0; i < visibleLayers.size(); ++i)   layer[i].set(visibleLayers.get(i));  adjustBlendFactors(1,-1);}  }
class C{  @Override public void insert(Address start,Extent extent,int descriptor,Space space){  Extent e=Extent.zero();  while (e.LT(extent)) {    int index=getChunkIndex(start.plus(e));    if (descriptorMap[index] != 0) {      Log.write("Conflicting virtual address request for space \"");      Log.write(space.getName());      Log.write("\" at ");      Log.writeln(start.plus(e));      Space.printVMMap();      VM.assertions.fail("exiting");    }    descriptorMap[index]=descriptor;    VM.barriers.objectArrayStoreNoGCBarrier(spaceMap,index,space);    e=e.plus(VMLayoutConstants.BYTES_IN_CHUNK);  }}  }
class C{  public InputMethodJFrame(String title,InputContext context){  super(title);  if (JFrame.isDefaultLookAndFeelDecorated()) {    this.setUndecorated(true);    this.getRootPane().setWindowDecorationStyle(JRootPane.NONE);  }  if (context != null) {    this.inputContext=context;  }  setFocusableWindowState(false);}  }
class C{  protected void selectAndAdd(Node node,CssSelector cssSelector,List<Node> result){  if (node.getNodeType() != Node.NodeType.ELEMENT) {    return;  }  boolean matched=cssSelector.accept(node);  if (matched) {    if (result.contains(node)) {      return;    }    result.add(node);  }}  }
class C{  public static int[] toIntArray(Number[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  public static Vector weightedSuperposition(Vector left,double leftWeight,Vector right,double rightWeight){  if ((left.getVectorType() != right.getVectorType()) || (left.getDimension() != right.getDimension())) {    throw new IncompatibleVectorsException(String.format("Incompatible vectors:\n%s\n%s",left.toString(),right.toString()));  }switch (left.getVectorType()) {case REAL:case COMPLEX:    Vector superposition=VectorFactory.createZeroVector(left.getVectorType(),left.getDimension());  superposition.superpose(left,leftWeight,null);superposition.superpose(right,rightWeight,null);superposition.normalize();return superposition;case BINARY:return BinaryVectorUtils.weightedSuperposition((BinaryVector)left,leftWeight,(BinaryVector)right,rightWeight);default :throw new IncompatibleVectorsException("Type not recognized: " + left.getVectorType());}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.RELATIONAL_EXPRESSION__LHS:    return getLhs();case N4JSPackage.RELATIONAL_EXPRESSION__OP:  return getOp();case N4JSPackage.RELATIONAL_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected void createShapes(DrawContext dc){  this.paths=new Path[5];  this.paths[0]=this.createPath(Arrays.asList(this.position1,this.position3));  this.paths[1]=this.createPath(Arrays.asList(this.position2,this.position4));  List<Position> positions=this.computeArrowheadPositions(dc,this.position1,this.position3);  this.paths[2]=createPath(positions);  positions=this.computeArrowheadPositions(dc,this.position2,this.position4);  this.paths[3]=createPath(positions);  positions=this.computeBasePositions(dc,this.position1,this.position2,this.position3);  this.paths[4]=createPath(positions);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  @Override public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  public PAssertedIdentityHeader createPAssertedIdentityHeader(Address address) throws NullPointerException, ParseException {  if (address == null)   throw new NullPointerException("null address!");  PAssertedIdentity assertedIdentity=new PAssertedIdentity();  assertedIdentity.setAddress(address);  return assertedIdentity;}  }
class C{  protected PartitionedState(Supplier<S> initialState){  this.initialState=initialState;}  }
class C{  public static boolean isForeignKeyConstraintViolation(Throwable e){  if (throwableContainsMessage(e,"ORA-02291") || throwableContainsMessage(e,"ORA-02292") || throwableContainsMessage(e,"violates foreign key constraint")|| throwableContainsMessage(e,"Referential integrity constraint violation")|| throwableContainsMessage(e,"SQLITE_CONSTRAINT")) {    return true;  }  return false;}  }
class C{  public Box(){  this(null);}  }
class C{  public String print(SAXParseException ex){  StringBuffer sb=new StringBuffer();  sb.append("Exception: " + ex.getMessage());  sb.append("failed at column : " + ex.getColumnNumber() + " on line "+ ex.getLineNumber());  sb.append("entity:\n" + ex.getPublicId() + "\n"+ ex.getSystemId());  return sb.toString();}  }
class C{  protected double shorter(double[] rawTarget,double min){  double minsq=min * min;  double maxV=minsq;  for (int i=0; i < this.max; i++) {    double d=rawTarget[i] - cached[i];    if ((maxV-=d * d) < 0) {      return -1;    }  }  return Math.sqrt(minsq - maxV);}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createXYStepAreaChart("Step Chart","Domain","Range",dataset);}  }
class C{  private void validateBSTAttributes(BinarySecurityTokenType bst,ReferenceType reference){  assert reference != null;  if (bst == null) {    throwTokenUnavailable("BST missing");  }  if (!bst.getId().equalsIgnoreCase(reference.getURI().substring(1))) {    throwTokenUnavailable("BST ID mismatch");  }  if (!reference.getValueType().equalsIgnoreCase(bst.getValueType())) {    throwTokenUnavailable("BST value type mismatch");  }  if (!bst.getEncodingType().equalsIgnoreCase(B64_ENCODING_TYPE)) {    throwTokenUnavailable("Unknown BST encoding");  }}  }
class C{  public static void deleteBreakpoints(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  Preconditions.checkNotNull(debuggerProvider,"IE01886: Debugger provider argument can not be null");  Preconditions.checkNotNull(rows,"IE02253: Rows argument can't be null");  final ArrayList<Pair<IDebugger,BreakpointAddress>> addresses=new ArrayList<Pair<IDebugger,BreakpointAddress>>();  for (  final int row : rows) {    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(debuggerProvider,row);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    addresses.add(new Pair<IDebugger,BreakpointAddress>(breakpoint.first(),manager.getBreakpoint(BreakpointType.REGULAR,breakpointIndex).getAddress()));  }  for (  final Pair<IDebugger,BreakpointAddress> p : addresses) {    final BreakpointManager manager=p.first().getBreakpointManager();    final BreakpointAddress address=p.second();    manager.setBreakpointStatus(Sets.newHashSet(address),BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DELETING);  }}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private synchronized void centerOnHexSoftStep(long deltaTime){  if (isSoftCentering) {    waitTimer+=deltaTime;    if (waitTimer < 20)     return;    waitTimer=0;    Point2D newCenter=new Point2D.Double(oldCenter.getX() + (softCenterTarget.getX() - oldCenter.getX()) / SOFT_CENTER_SPEED,oldCenter.getY() + (softCenterTarget.getY() - oldCenter.getY()) / SOFT_CENTER_SPEED);    centerOnPointRel(newCenter.getX(),newCenter.getY());    oldCenter=newCenter;    if (softCenterTarget.distance(newCenter) < 0.0005) {      stopSoftCentering();      pingMinimap();    }  }}  }
class C{  private static void fixPrng(){  if (!prngFixed.get()) {synchronized (PrngFixes.class) {      if (!prngFixed.get()) {        PrngFixes.apply();        prngFixed.set(true);      }    }  }}  }
class C{  private void validateBusinessObjectFormatSchema(Schema schema,String partitionKey){  if (schema != null) {    Assert.notNull(schema.getNullValue(),"A schema null value can not be null.");    schema.setPartitionKeyGroup(schema.getPartitionKeyGroup() == null ? null : schema.getPartitionKeyGroup().trim());    Assert.isTrue(!CollectionUtils.isEmpty(schema.getColumns()),"A schema must have at least one column.");    LinkedHashMap<String,SchemaColumn> schemaEqualityValidationMap=new LinkedHashMap<>();    validateSchemaColumns(schema.getColumns(),schemaEqualityValidationMap);    validateSchemaColumns(schema.getPartitions(),schemaEqualityValidationMap);    if (!CollectionUtils.isEmpty(schema.getPartitions())) {      SchemaColumn schemaColumn=schema.getPartitions().get(0);      if (!partitionKey.equalsIgnoreCase(schemaColumn.getName())) {        throw new IllegalArgumentException(String.format("Partition key \"%s\" does not match the first schema partition column name \"%s\".",partitionKey,schemaColumn.getName()));      }    }  }}  }
class C{  boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mRequestInformation && isValidType(mInfoType));}  }
class C{  public PacketInfo(GlobalHeader globalHeader,PacketHeader packetHeader,PcapPacket packet,Ipv4Packet ipv4Packet,TcpPacket tcpPacket,UdpPacket udpPacket){  this.packetHeader=packetHeader;  this.packet=packet;  this.ipv4Packet=ipv4Packet;  this.tcpPacket=tcpPacket;  this.udpPacket=udpPacket;  this.globalHeader=globalHeader;}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public MarginalDistribution(ProbDistribution condDistrib,MultivariateDistribution uncondDistrib){  this.condDistrib=condDistrib;  this.uncondDistrib=uncondDistrib;}  }
class C{  private static void checkName(String name) throws IOException {  if (name.contains("..")) {    File file=new File(name);    while (file != null) {      if (file.getName().equals("..")) {        throw new IOException("Cannot unzip file containing an entry with " + "\"..\" in the name: " + name);      }      file=file.getParentFile();    }  }}  }
class C{  protected double tokenToDouble(List recordList,int index,double def){  try {    Object obj=recordList.get(index);    if (obj instanceof Double) {      return ((Double)obj).doubleValue();    }  } catch (  Exception e) {  }  return def;}  }
class C{  @GET @Path("search/gremlin") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) @InterfaceAudience.Private public Response searchUsingGremlinQuery(@QueryParam("query") String gremlinQuery){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"MetadataDiscoveryResource.searchUsingGremlinQuery(" + gremlinQuery + ")");    }    gremlinQuery=ParamChecker.notEmpty(gremlinQuery,"gremlinQuery cannot be null or empty");    final List<Map<String,String>> results=discoveryService.searchByGremlin(gremlinQuery);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.QUERY,gremlinQuery);    response.put(AtlasClient.QUERY_TYPE,QUERY_TYPE_GREMLIN);    JSONArray list=new JSONArray();    for (    Map<String,String> result : results) {      list.put(new JSONObject(result));    }    response.put(AtlasClient.RESULTS,list);    response.put(AtlasClient.COUNT,list.length());    return Response.ok(response).build();  } catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get entity list for gremlinQuery {}",gremlinQuery,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get entity list for gremlinQuery {}",gremlinQuery,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  private String entryProtocolsDiffer(List<VNXFileExport> exports){  HashSet<String> protocols=new HashSet<>();  for (  VNXFileExport exp : exports) {    protocols.add(exp.getProtocol());  }  if (protocols.size() == 1) {    return protocols.iterator().next();  }  return null;}  }
class C{  public static HierarchicalAggregateEntity sort(HierarchicalAggregateEntity result,List<SortOption> sortOptions){  SortedSet<Map.Entry<String,HierarchicalAggregateEntity>> tmp=sortByValue(result,sortOptions);  result.setSortedList(tmp);  result.setChildren(null);  for (  Map.Entry<String,HierarchicalAggregateEntity> entry : tmp) {    sort(entry.getValue(),sortOptions);  }  return result;}  }
class C{  protected void acceptConnection(Socket sock) throws IOException, ConnectionException {  Connection connection=null;  InetAddress connAddress=sock.getInetAddress();  boolean finishedConnecting=false;  Connection conn=null;  try {    conn=Connection.createReceiver(this,sock);    this.owner.getCancelCriterion().checkCancelInProgress(null);    finishedConnecting=true;  } catch (  IOException ex) {    this.owner.getCancelCriterion().checkCancelInProgress(ex);    logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectionTable_FAILED_TO_ACCEPT_CONNECTION_FROM_0_BECAUSE_1,new Object[]{(connAddress != null ? connAddress : "unavailable address"),ex}));    throw ex;  }catch (  ConnectionException ex) {    this.owner.getCancelCriterion().checkCancelInProgress(ex);    logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectionTable_FAILED_TO_ACCEPT_CONNECTION_FROM_0_BECAUSE_1,new Object[]{(connAddress != null ? connAddress : "unavailable address"),ex}));    throw ex;  } finally {    if (conn != null && !finishedConnecting) {      closeCon(LocalizedStrings.ConnectionTable_CANCEL_AFTER_ACCEPT.toLocalizedString(),conn);      conn=null;    }  }  if (conn != null) {synchronized (this.receivers) {      this.owner.stats.incReceivers();      if (this.closed) {        closeCon(LocalizedStrings.ConnectionTable_CONNECTION_TABLE_NO_LONGER_IN_USE.toLocalizedString(),conn);        return;      }      this.receivers.add(conn);    }    if (logger.isDebugEnabled()) {      logger.debug("Accepted {} myAddr={} theirAddr={}",conn,getConduit().getLocalAddress(),conn.remoteAddr);    }  }}  }
class C{  public static Layer layerUnderPoint(Layer root,float x,float y){  Point p=new Point(x,y);  root.transform().inverseTransform(p,p);  p.x+=root.originX();  p.y+=root.originY();  return layerUnderPoint(root,p);}  }
class C{  private static boolean determineRPSourceJournalMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,List<RPVPlexMigration> potentialMigrations,StringBuffer notSuppReasonBuff,DbClient dbClient){  boolean invalidMigration=false;  String currentSourceJournalVarrayId=NullColumnValueGetter.getStringValue(currentVpool.getJournalVarray());  String currentSourceJournalVpoolId=NullColumnValueGetter.getStringValue(currentVpool.getJournalVpool());  String newSourceJournalVarrayId=NullColumnValueGetter.getStringValue(newVpool.getJournalVarray());  String newSourceJournalVpoolId=NullColumnValueGetter.getStringValue(newVpool.getJournalVpool());  if (currentSourceJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    currentSourceJournalVarrayId=volume.getVirtualArray().toString();  }  if (currentSourceJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    currentSourceJournalVpoolId=currentVpool.getId().toString();  }  VirtualPool currentSourceJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(currentSourceJournalVpoolId));  if (newSourceJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    newSourceJournalVpoolId=newVpool.getId().toString();  }  VirtualPool newSourceJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(newSourceJournalVpoolId));  if (newSourceJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    if (newSourceJournalVpool.getVirtualArrays() != null && newSourceJournalVpool.getVirtualArrays().contains(volume.getVirtualArray().toString())) {      newSourceJournalVarrayId=volume.getVirtualArray().toString();    }  }  if (!currentSourceJournalVpoolId.equals(newSourceJournalVpoolId)) {    if (currentSourceJournalVarrayId.equals(newSourceJournalVarrayId) && VirtualPool.vPoolSpecifiesHighAvailability(currentSourceJournalVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newSourceJournalVpool)) {      potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.METADATA,Volume.PersonalityTypes.SOURCE,URI.create(currentSourceJournalVarrayId),currentSourceJournalVpool,newSourceJournalVpool));    } else {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Source Journal virtual pool / virtual array.");      invalidMigration=true;    }  } else {    if (!currentSourceJournalVarrayId.equals(newSourceJournalVarrayId)) {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Source Journal virtual array.");      invalidMigration=true;    }  }  return invalidMigration;}  }
class C{  public void addPoints(EsriLayer layer){  ArrayList tabularData0=new ArrayList();  tabularData0.add(0,"first value");  tabularData0.add(1,new Double(10.54));  layer.addRecord(new EsriPoint(30.0f,-90.0f),tabularData0);  ArrayList tabularData1=new ArrayList();  tabularData1.add(0,"second value");  tabularData1.add(1,new Double(20.54));  layer.addRecord(new EsriPoint(45.0f,-70.0f),tabularData1);  ArrayList tabularData2=new ArrayList();  tabularData2.add(0,"third value");  tabularData2.add(1,new Double(30.54));  layer.addRecord(new EsriPoint(35.0f,-120.0f),tabularData2);}  }
class C{  private static String humanHelper(int flags,int mask,int what){  StringBuffer sb=new StringBuffer(80);  int extra=flags & ~mask;  flags&=mask;  if ((flags & ACC_PUBLIC) != 0) {    sb.append("|public");  }  if ((flags & ACC_PRIVATE) != 0) {    sb.append("|private");  }  if ((flags & ACC_PROTECTED) != 0) {    sb.append("|protected");  }  if ((flags & ACC_STATIC) != 0) {    sb.append("|static");  }  if ((flags & ACC_FINAL) != 0) {    sb.append("|final");  }  if ((flags & ACC_SYNCHRONIZED) != 0) {    if (what == CONV_CLASS) {      sb.append("|super");    } else {      sb.append("|synchronized");    }  }  if ((flags & ACC_VOLATILE) != 0) {    if (what == CONV_METHOD) {      sb.append("|bridge");    } else {      sb.append("|volatile");    }  }  if ((flags & ACC_TRANSIENT) != 0) {    if (what == CONV_METHOD) {      sb.append("|varargs");    } else {      sb.append("|transient");    }  }  if ((flags & ACC_NATIVE) != 0) {    sb.append("|native");  }  if ((flags & ACC_INTERFACE) != 0) {    sb.append("|interface");  }  if ((flags & ACC_ABSTRACT) != 0) {    sb.append("|abstract");  }  if ((flags & ACC_STRICT) != 0) {    sb.append("|strictfp");  }  if ((flags & ACC_SYNTHETIC) != 0) {    sb.append("|synthetic");  }  if ((flags & ACC_ANNOTATION) != 0) {    sb.append("|annotation");  }  if ((flags & ACC_ENUM) != 0) {    sb.append("|enum");  }  if ((flags & ACC_CONSTRUCTOR) != 0) {    sb.append("|constructor");  }  if ((flags & ACC_DECLARED_SYNCHRONIZED) != 0) {    sb.append("|declared_synchronized");  }  if ((extra != 0) || (sb.length() == 0)) {    sb.append('|');    sb.append(Hex.u2(extra));  }  return sb.substring(1);}  }
class C{  public void play(String url,int expectedKBitSecRate) throws Exception {  declaredBitRate=-1;  if (url.indexOf(':') > 0) {    URLConnection cn=openConnection(url);    InputStream is=null;    try {      if (responseCodeCheckEnabled)       checkResponseCode(cn);      processHeaders(cn);      is=getInputStream(cn);      play(is,expectedKBitSecRate != -1 ? expectedKBitSecRate : declaredBitRate);    }  finally {      try {        is.close();      } catch (      Throwable t) {      }      if (cn instanceof HttpURLConnection) {        try {          ((HttpURLConnection)cn).disconnect();        } catch (        Throwable t) {        }      }    }  } else {    processFileType(url);    InputStream is=new FileInputStream(url);    try {      play(is,expectedKBitSecRate);    }  finally {      try {        is.close();      } catch (      Throwable t) {      }    }  }}  }
class C{  public int length(){  return values.size();}  }
class C{  public boolean hasMoreElements(){  return p < chars.length;}  }
class C{  public SupportAdapter(Context context,List<CoffeeEntry> objects){  super(context,R.layout.support_entry,objects);}  }
class C{  public static Object toVoid(Object o,Object defaultValue){  if (o == null)   return null; else   if (o instanceof String && o.toString().length() == 0)   return null; else   if (o instanceof Number && ((Number)o).intValue() == 0)   return null; else   if (o instanceof Boolean && ((Boolean)o).booleanValue() == false)   return null; else   if (o instanceof ObjectWrap)   return toVoid(((ObjectWrap)o).getEmbededObject((defaultValue)),defaultValue);  return defaultValue;}  }
class C{  private Object readResolve(){  return object;}  }
class C{  public static void assertVocabulary(Analyzer a,InputStream vocOut) throws IOException {  BufferedReader vocReader=new BufferedReader(new InputStreamReader(vocOut,StandardCharsets.UTF_8));  String inputLine=null;  while ((inputLine=vocReader.readLine()) != null) {    if (inputLine.startsWith("#") || inputLine.trim().length() == 0)     continue;    String words[]=inputLine.split("\t");    BaseTokenStreamTestCase.checkOneTerm(a,words[0],words[1]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.980 -0500",hash_original_method="DF41E3115CE6BC840253482EC4390D2C",hash_generated_method="A3BD9EAD3B73D5EA83D6E511CE564A22") @Override public void onAnimationUpdate(ValueAnimator animation){  boolean alphaHandled=false;  mView.invalidateParentCaches();  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    mView.invalidate(false);  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      if (values.mNameConstant == ALPHA) {        alphaHandled=mView.setAlphaNoInvalidation(value);      } else {        setValue(values.mNameConstant,value);      }    }  }  if ((propertyMask & TRANSFORM_MASK) != 0) {    mView.mTransformationInfo.mMatrixDirty=true;    mView.mPrivateFlags|=View.DRAWN;  }  mView.invalidate(alphaHandled);}  }
class C{  private static void test_init(Configuration config){  createInstance(config);  int expectedFiles=config.expectedFiles;  int actualFiles=OPTIMIZED_DIR.listFiles().length;  assertEquals(expectedFiles,actualFiles);}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  final I_M_Requisition req=GridTabWrapper.create(mTab.getParentTab(),I_M_Requisition.class);  final I_M_RequisitionLine line=GridTabWrapper.create(mTab,I_M_RequisitionLine.class);  setPrice(ctx,WindowNo,req,line);  MProduct product=MProduct.get(ctx,M_Product_ID);  line.setC_UOM_ID(product.getC_UOM_ID());  line.setM_AttributeSetInstance_ID(product.getM_AttributeSetInstance_ID());  return "";}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @RequestMapping(value="/content/container/{containerId}/application/{applicationName}",method=RequestMethod.GET) public void displayContentFile(@PathVariable final String applicationName,@PathVariable final String containerId,@RequestParam("path") final String path,@RequestParam("fileName") final String fileName,HttpServletRequest request,HttpServletResponse response) throws ServiceException, CheckException, IOException {  downloadOrEditFile(applicationName,containerId,path,fileName,request,response,true);}  }
class C{  public ExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.menu_main,menu);  return true;}  }
class C{  public boolean forceTableCompaction(String keyspace,TableReference tableRef){  boolean status=tryTableCompactionInternal(keyspace,tableRef);  int retries=0;  while (!status && retries < RETRY_TIMES) {    retries++;    log.info("Failed to compact, retrying in {} seconds for {} time(s)",RETRY_INTERVAL_IN_SECONDS,retries);    try {      TimeUnit.SECONDS.sleep(RETRY_INTERVAL_IN_SECONDS);    } catch (    InterruptedException e) {      log.error("Sleep interrupted while trying to compact",e);    }    status=tryTableCompactionInternal(keyspace,tableRef);  }  if (!status) {    log.error("Failed to compact after {} retries.",RETRY_INTERVAL_IN_SECONDS);  }  return status;}  }
class C{  public void boardChangedHex(BoardEvent b){}  }
class C{  public void updateFlowgraphSettings(final ZyGraphViewSettings settings){  updateGraphSettings(flowGraphSettings,settings);}  }
class C{  public void createTopLevelClasses(boolean lenient) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder parser=factory.newDocumentBuilder();  Document asDocConfig=parser.parse(new File(asDocConfigPath));  Document domObject=parser.parse(new File(topLevelXmlPath));  TopLevelClassesGenerator topLevelClassesGenerator=new TopLevelClassesGenerator(asDocConfig,domObject);  topLevelClassesGenerator.initialize();  topLevelClassesGenerator.generate();  topLevelClassesGenerator.writeOutputFiles(ditaOutputDir,outputDir,lenient);}  }
class C{  public StreamDeletedException(){  super("Transaction failed due to underlying stream being deleted.");  this.stream=null;}  }
class C{  public CleanUpContext(ICompilationUnit unit,CompilationUnit ast){  Assert.isLegal(unit != null);  fUnit=unit;  fAst=ast;}  }
class C{  public boolean hasEvictionHeap(){  return this.evictionHeapSet;}  }
class C{  private int maxIntersection(Map<Integer,ModifiableDBIDs> candidates,DBIDs set,ModifiableDBIDs result){  Integer maxDim=null;  for (  Integer nextDim : candidates.keySet()) {    DBIDs nextSet=candidates.get(nextDim);    ModifiableDBIDs nextIntersection=DBIDUtil.intersection(set,nextSet);    if (result.size() < nextIntersection.size()) {      result=nextIntersection;      maxDim=nextDim;    }  }  return maxDim;}  }
class C{  private CompletableFuture<Void> apply(ConnectEntry entry){  ServerSessionContext session=executor().context().sessions().getSession(entry.getClient());  if (session != null) {    session.setConnectIndex(entry.getIndex());    session.trust();    session.setTimestamp(entry.getTimestamp());    session.setKeepAliveIndex(entry.getIndex());  }  return CompletableFuture.completedFuture(null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    if (resolve)     return getDefinedType();  return basicGetDefinedType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public long numBits(){  return (firstFunction != null ? firstFunction.numBits() : 0) + secondFunction.numBits() + transform.numBits()+ remap.length * (long)Long.SIZE;}  }
class C{  public static boolean isAlphanumeric(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isLetterOrDigit(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  protected VariableDeclarationOrBindingImpl(){  super();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private void offsetChildrenTopAndBottom(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetTopAndBottom(offset);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      getChildAt(i).invalidate();    }  }}  }
class C{  private void divideLabel(){  int width;  int startPos;  int currentPos;  int lastPos;  int endPos;  line.clear();  FontMetrics fm=this.getFontMetrics(this.getFont());  startPos=0;  currentPos=startPos;  lastPos=currentPos;  endPos=(labelText.length() - 1);  while (currentPos < endPos) {    width=0;    while ((width < maxAllowed) && (currentPos < endPos) && (labelText.charAt(currentPos) != NEW_LINE)) {      lastPos=currentPos;      currentPos=getPosition(labelText,currentPos,WHITE_SPACE,FOUND);      width=fm.stringWidth(labelText.substring(startPos,currentPos));    }    if (labelText.charAt(currentPos) == NEW_LINE) {      lastPos=currentPos;    }    if (currentPos == endPos && width <= maxAllowed) {      lastPos=currentPos;      String s=labelText.substring(startPos);      line.addElement(s);    } else {      if (lastPos == startPos) {        lastPos=startPos + breakWord(labelText.substring(startPos,currentPos),fm);      }      String s=labelText.substring(startPos,lastPos);      line.addElement(s);    }    startPos=getPosition(labelText,lastPos,SPACES,NOT_FOUND);    currentPos=startPos;  }  numLines=line.size();  lineWidth=new int[numLines];}  }
class C{  private String appendTrailingDots(String string){  return string + "...";}  }
class C{  @Override public ImmutableSortedSet<K> keySet(){  return keySet;}  }
class C{  public CF6(){  this(10);}  }
class C{  public static String printEvent(EventBean theEvent){  StringWriter writer=new StringWriter();  PrintWriter buf=new PrintWriter(writer);  printEvent(buf,theEvent);  return writer.toString();}  }
class C{  ParseResult(Throwable throwable){  this(Optional.empty(),singletonList(new Problem(throwable.getMessage(),Optional.empty(),Optional.of(throwable))),Optional.empty(),Optional.empty());}  }
class C{  public void addPieSegment(int dataIndex,float value,float startAngle,float angle){  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.870 -0500",hash_original_method="C3125C30E3D98768E8F5C485FA3194CB",hash_generated_method="EA1580208D6B423B3C4AF18EA717A072") static boolean useChromiumHttpStack(){  if (sUseChromiumHttpStack == null) {    sUseChromiumHttpStack=nativeUseChromiumHttpStack();  }  return sUseChromiumHttpStack;}  }
class C{  public static boolean hasMethod(Class<?> clazz,String methodName,Class<?>... paramTypes){  return (getMethodIfAvailable(clazz,methodName,paramTypes) != null);}  }
class C{  public float noise(float x){  return noise(x,0f,0f);}  }
class C{  public TenantConfigurationValueBuilder<T> lastModifiedAt(final Long lastModifiedAt){  this.configuration.lastModifiedAt=lastModifiedAt;  return this;}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void cut(){  if (editable) {    copy();    setSelectedText("");  }}  }
class C{  public WorkListItem nextItem(){  return workList.removeFirst();}  }
class C{  @Override public boolean match(String host,final int port,String path,final boolean secure,final Cookie cookie){  LOG.trace("enter CookieSpecBase.match(" + "String, int, String, boolean, Cookie");  if (host == null) {    throw new IllegalArgumentException("Host of origin may not be null");  }  if (host.trim().equals("")) {    throw new IllegalArgumentException("Host of origin may not be blank");  }  if (port < 0) {    throw new IllegalArgumentException("Invalid port: " + port);  }  if (path == null) {    throw new IllegalArgumentException("Path of origin may not be null.");  }  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (path.trim().equals("")) {    path=PATH_DELIM;  }  host=host.toLowerCase();  if (cookie.getDomain() == null) {    LOG.warn("Invalid cookie state: domain not specified");    return false;  }  if (cookie.getPath() == null) {    LOG.warn("Invalid cookie state: path not specified");    return false;  }  final boolean notExpired=(cookie.getExpiryDate() == null || cookie.getExpiryDate().after(new Date()));  if (!notExpired) {    LOG.warn("  !!!Cookie has expired on: " + cookie.getExpiryDate());  }  final boolean domainsMatch=(domainMatch(host,cookie.getDomain()));  if (!domainsMatch) {    LOG.warn("  !!!Cookie domain '" + cookie.getDomain() + "' does not match to the host's domain '"+ host+ "'");  }  final boolean pathsMatch=(pathMatch(path,cookie.getPath()));  if (!pathsMatch) {    LOG.warn("  !!!Cookie path '" + cookie.getPath() + "' does not match to the host's path '"+ path+ "'");  }  final boolean securitiesMatch=(cookie.getSecure() ? secure : true);  if (!securitiesMatch) {    LOG.warn("  !!!Cookie security '" + cookie.getSecure() + "' does not match to the protocol's security '"+ secure+ "'");  }  return notExpired && domainsMatch && pathsMatch&& securitiesMatch;}  }
class C{  public boolean isCreateTab(){  if (createTab == null) {    return false;  } else {    return createTab;  }}  }
class C{  public Vector3f(float x,float y,float z){  this.points[0]=x;  this.points[1]=y;  this.points[2]=z;}  }
class C{  protected DocTermOrds(String field,int maxTermDocFreq,int indexIntervalBits){  this.field=field;  this.maxTermDocFreq=maxTermDocFreq;  this.indexIntervalBits=indexIntervalBits;  indexIntervalMask=0xffffffff >>> (32 - indexIntervalBits);  indexInterval=1 << indexIntervalBits;}  }
class C{  public Connection(String clientHandle,String clientId,String host,int port,Context context,MqttAndroidClient client,boolean sslConnection){  this.clientHandle=clientHandle;  this.clientId=clientId;  this.host=host;  this.port=port;  this.context=context;  this.client=client;  this.sslConnection=sslConnection;  history=new ArrayList<String>();  StringBuffer sb=new StringBuffer();  sb.append("Client: ");  sb.append(clientId);  sb.append(" created");  addAction(sb.toString());}  }
class C{  public double computeAverageLocal(int states[][],int[] sourceOffsets){  initialise();  addObservations(states,sourceOffsets);  return computeAverageLocalOfObservations();}  }
class C{  public void init(){  StringTokenizer st=new StringTokenizer(getCondition(),", ",false);  senderHosts=new java.util.HashSet<String>();  while (st.hasMoreTokens()) {    senderHosts.add(st.nextToken().toLowerCase(Locale.US));  }  senderHosts=Collections.unmodifiableCollection(senderHosts);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case ERROR:  return isSetError();case TYPE:return isSetType();}throw new IllegalStateException();}  }
class C{  public DataLogicPromotions(){  m_PromotionRow=new Row(new Field(m_PromotionFieldNames[0],m_PromotionFieldDataTypes[0],m_PromotionFieldFormat[0]),new Field(m_PromotionFieldNames[1],m_PromotionFieldDataTypes[1],m_PromotionFieldFormat[1],true,true,true),new Field(m_PromotionFieldNames[2],m_PromotionFieldDataTypes[2],m_PromotionFieldFormat[2]),new Field(m_PromotionFieldNames[3],m_PromotionFieldDataTypes[3],m_PromotionFieldFormat[3]),new Field(m_PromotionFieldNames[4],m_PromotionFieldDataTypes[4],m_PromotionFieldFormat[4]),new Field(m_PromotionFieldNames[5],m_PromotionFieldDataTypes[5],m_PromotionFieldFormat[5]));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static IBoard combine(int width,int height,int sheetWidth,int sheetHeight,IBoard[] boards,List<Boolean> isRotated,int medium){  int resultWidth=width * sheetWidth;  int resultHeight=height * sheetHeight;  IHex[] resultData=new IHex[resultWidth * resultHeight];  boolean roadsAutoExit=true;  boolean boardListContainsBackground=false;  for (int i=0; i < sheetHeight; i++) {    for (int j=0; j < sheetWidth; j++) {      IBoard b=boards[i * sheetWidth + j];      if ((b.getWidth() != width) || (b.getHeight() != height)) {        throw new IllegalArgumentException("board is the wrong size, expected " + width + "x"+ height+ ", got "+ b.getWidth()+ "x"+ b.getHeight());      }      copyBoardInto(resultData,resultWidth,j * width,i * height,boards[i * sheetWidth + j]);      if (boards[i * sheetWidth + j].getRoadsAutoExit() == false) {        roadsAutoExit=false;      }      boardListContainsBackground|=b.hasBoardBackground();    }  }  IBoard result=new Board();  result.setRoadsAutoExit(roadsAutoExit);  result.newData(resultWidth,resultHeight,resultData);  if (boardListContainsBackground) {    result.setNumBoardsHeight(sheetHeight);    result.setNumBoardsWidth(sheetWidth);    result.setSubBoardHeight(height);    result.setSubBoardWidth(width);    ListIterator<Boolean> flipIt=isRotated.listIterator();    for (    IBoard b : boards) {      boolean flip=flipIt.next();      result.addBackgroundPath(b.getBackgroundPath(),flip,flip);    }  }  result.setType(medium);  return result;}  }
class C{  public static void resizeArchive(String sourcePath,ConsolFun consolFun,int numSteps,int newRows,boolean saveBackup) throws IOException {  String destPath=Util.getTmpFilename();  resizeArchive(sourcePath,destPath,consolFun,numSteps,newRows);  copyFile(destPath,sourcePath,saveBackup);}  }
class C{  public static void pushParameter(byte o){  parametersByte.push(o);}  }
class C{  public boolean areEntityCapsSupported(String jid){  if (jid == null)   return false;  try {    DiscoverInfo result=sdm.discoverInfo(jid);    return result.containsFeature(NAMESPACE);  } catch (  XMPPException e) {    return false;  }}  }
class C{  public OpenIntDoubleHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredTypeAccessModifier: ");  result.append(declaredTypeAccessModifier);  result.append(", declaredProvidedByRuntime: ");  result.append(declaredProvidedByRuntime);  result.append(')');  return result.toString();}  }
class C{  public void runTests() throws IOException {  List<List<String>> tests=new ArrayList<>();  List<String> test=new ArrayList<>();  String line=reader.readLine();  while (line != null) {switch (line) {case "!":      tests.add(test);    test=new ArrayList<>();  break;default :test.add(line);break;}line=reader.readLine();}tests.add(test);tests=tests.subList(1,tests.size());for (List<String> t : tests) {TestThread thread=new TestThread(t);thread.start();thread.join();}}  }
class C{  private String maskIPAddress(String oldText){  String[] textTokens=oldText.split("\\s+");  int tokenCount=textTokens.length;  String newText=oldText;  String delims="[:|=|<|>|(|)|\\[|\\]]";  for (int j=0; j < tokenCount; j++) {    String[] strippedToken=textTokens[j].split(delims);    int strippedTokenCount=strippedToken.length;    for (int k=0; k < strippedTokenCount; k++) {      if (isIpAddress(strippedToken[k])) {        newText=newText.replace(strippedToken[k],localHost);      }    }  }  return newText;}  }
class C{  public boolean readBooleanFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Boolean)getPrimitive(node)).booleanValue();}  }
class C{  @SuppressWarnings({"unused","unchecked"}) private void registerRenamedHeapPhis(IR ir){  SSADictionary ssa=ir.HIRInfo.dictionary;  for (Enumeration<BasicBlock> e1=ir.getBasicBlocks(); e1.hasMoreElements(); ) {    BasicBlock bb=e1.nextElement();    for (Enumeration<Instruction> e2=ssa.getAllInstructions(bb); e2.hasMoreElements(); ) {      Instruction s=e2.nextElement();      if (Phi.conforms(s)) {        if (ssa.defsHeapVariable(s)) {          int n=Phi.getNumberOfValues(s);          HeapOperand<Object>[] uses=new HeapOperand[n];          for (int i=0; i < n; i++) {            uses[i]=(HeapOperand)Phi.getValue(s,i);          }          ssa.replaceUses(s,uses);        }      }    }  }}  }
class C{  public String correct(String aWord){  if ((aWord.length() < 2) || isNumber(aWord)) {    return aWord;  }  boolean isUpper=isUpperCase(aWord.charAt(0));  String word=aWord.toLowerCase();  String correction=cachedCorrections.get(word);  if (correction == null) {    correction=getBestCandidate(word);    cachedCorrections.put(word,correction);  }  char[] buffer=correction.toCharArray();  if (isUpper) {    buffer[0]=toUpperCase(buffer[0]);  }  return new String(buffer);}  }
class C{  public static synchronized boolean executeAtomicTransaction(AtomicTransaction at){  boolean transactionOk=false;  logger.trace("executeAtomicTransaction() -->entry");  final Connection c=getConnection();  if (c == null) {    logger.error("executeAtomicTransaction() <--exit (Connection unavailable)");    return false;  }  try {    startTransaction(c);    transactionOk=at.beginAtomicTransaction(c);  } catch (  Throwable t) {    surfaceThrowable("executeAtomicTransaction() failed",t);  } finally {    try {      endTransaction(c,transactionOk);    } catch (    Throwable t) {      logger.error("Error encountered ending the transaction.",t);    }    cleanup(c);  }  logger.trace("executeAtomicTransaction() <--exit: " + transactionOk);  return transactionOk;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.168 -0500",hash_original_method="30E90F3B75611917E8432C24A0A6175A",hash_generated_method="7D407CF6AA77E71DBBA3D6EC3B90ECC0") public Builder(RenderScript rs){  mRS=rs;  mSlots=new Slot[MAX_TEXTURE];  mPointSpriteEnable=false;}  }
class C{  public static boolean hasDeadStatesToAccept(Automaton a){  BitSet reachableFromInitial=getLiveStatesFromInitial(a);  BitSet reachableFromAccept=getLiveStatesToAccept(a);  reachableFromAccept.andNot(reachableFromInitial);  return reachableFromAccept.isEmpty() == false;}  }
class C{  public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fAttributesProxy.setAttributes(attributes);      fDocumentHandler.startElement(element.rawname,fAttributesProxy);    }    if (fContentHandler != null) {      if (fNamespaces) {        startNamespaceMapping();        int len=attributes.getLength();        if (!fNamespacePrefixes) {          for (int i=len - 1; i >= 0; --i) {            attributes.getName(i,fQName);            if ((fQName.prefix == XMLSymbols.PREFIX_XMLNS) || (fQName.rawname == XMLSymbols.PREFIX_XMLNS)) {              attributes.removeAttributeAt(i);            }          }        } else         if (!fXMLNSURIs) {          for (int i=len - 1; i >= 0; --i) {            attributes.getName(i,fQName);            if ((fQName.prefix == XMLSymbols.PREFIX_XMLNS) || (fQName.rawname == XMLSymbols.PREFIX_XMLNS)) {              fQName.prefix="";              fQName.uri="";              fQName.localpart="";              attributes.setName(i,fQName);            }          }        }      }      fAugmentations=augs;      String uri=element.uri != null ? element.uri : "";      String localpart=fNamespaces ? element.localpart : "";      fAttributesProxy.setAttributes(attributes);      fContentHandler.startElement(uri,localpart,element.rawname,fAttributesProxy);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public boolean equals(Object obj){  return obj != null && obj instanceof CtMethod && ((CtMethod)obj).getStringRep().equals(getStringRep());}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  this.sendRequest(patch);}  }
class C{  public boolean isIncludeNullsSalesRegion(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsSalesRegion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected TestResult createTestResult(){  return new TestResult();}  }
class C{  private void configXAxisListPreference(){  @SuppressWarnings("deprecation") ListPreference listPreference=(ListPreference)findPreference(getString(R.string.chart_x_axis_key));  String value=PreferencesUtils.getString(this,R.string.chart_x_axis_key,PreferencesUtils.CHART_X_AXIS_DEFAULT);  String[] values=getResources().getStringArray(R.array.chart_x_axis_values);  String[] options=getResources().getStringArray(R.array.chart_x_axis_options);  configureListPreference(listPreference,options,options,values,value,null);}  }
class C{  public static File portraitImagesDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_PORTRAIT_IMAGES);}  }
class C{  public static final String country(String code){  return mapping.get(code.toLowerCase());}  }
class C{  void trackMotionScroll(int deltaX){  if (getChildCount() == 0) {    return;  }  boolean toLeft=deltaX < 0;  int limitedDeltaX=getLimitedMotionScrollAmount(toLeft,deltaX);  if (limitedDeltaX != deltaX) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenLeftAndRight(limitedDeltaX);  detachOffScreenChildren(toLeft);  if (toLeft) {    fillToGalleryRight();  } else {    fillToGalleryLeft();  }  mRecycler.clear();  setSelectionToCenterChild();  final View selChild=mSelectedChild;  if (selChild != null) {    final int childLeft=selChild.getLeft();    final int childCenter=selChild.getWidth() / 2;    final int galleryCenter=getWidth() / 2;    mSelectedCenterOffset=childLeft + childCenter - galleryCenter;  }  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  synchronized protected void timeout(){  log.debug("Throttle request (RLOC) timed out");  failedThrottleRequest(_dccAddr,"Throttle request (RLOC) timed out");  throttleRequestTimer.stop();}  }
class C{  public void printUsage(PrintWriter pw,int width,String cmdLineSyntax){  int argPos=cmdLineSyntax.indexOf(' ') + 1;  printWrapped(pw,width,defaultSyntaxPrefix.length() + argPos,defaultSyntaxPrefix + cmdLineSyntax);}  }
class C{  private static void addELResolvers(CompositeELResolver target,List<ELResolver> resolvers){  if (resolvers != null && !resolvers.isEmpty()) {    for (    ELResolver resolver : resolvers) {      target.add(resolver);    }  }}  }
class C{  public GDE3(Problem problem,NondominatedSortingPopulation population,DominanceComparator comparator,DifferentialEvolutionSelection selection,DifferentialEvolution variation,Initialization initialization){  super(problem,population,null,initialization);  this.comparator=comparator;  this.selection=selection;  this.variation=variation;}  }
class C{  TypeSubstitution(final INaviOperandTreeNode node,final BaseType baseType,final List<TypeMember> memberPath,final int expressionId,final int position,final int offset,final IAddress address){  this.baseType=Preconditions.checkNotNull(baseType,"Error: Base type argument for type substitution can not be null.");  this.memberPath=Preconditions.checkNotNull(memberPath,"Error: Member path can not be null.");  this.expressionId=expressionId;  Preconditions.checkArgument(position >= 0,"Error: Position argument for type substitution can not be negative.");  this.position=position;  Preconditions.checkArgument(offset >= 0,"Error: Offset argument for type substitution can not be negative.");  this.offset=offset;  this.node=Preconditions.checkNotNull(node,"IE02802: Node argument for type substitution can not be null.");  this.address=Preconditions.checkNotNull(address,"Error: Address argument for type sbustitution can not be null.");}  }
class C{  public String toExternalForm(){  CookieSpec spec=null;  if (getVersion() > 0) {    spec=CookiePolicy.getCookieSpec(CookiePolicy.DEFAULT);  } else {    spec=CookiePolicy.getCookieSpec(CookiePolicy.NETSCAPE);  }  return spec.formatCookie(this);}  }
class C{  public void incrementGeneratedTokens(String tenant) throws Exception {  getService().incrementGeneratedTokens(tenant,this.getServiceContext());}  }
class C{  @LargeTest public void testServerDropConnection_body() throws Exception {  byte[] blobData=generateData(25000,DataType.TEXT);  final MockResponse resp=buildResponse(HTTP_OK,blobData);  resp.setHeader("Content-Length","50000");  enqueueResponse(resp);  long dlRequest=doCommonStandardEnqueue();  waitForDownloadOrTimeout(dlRequest);  Cursor cursor=getCursor(dlRequest);  try {    verifyInt(cursor,DownloadManager.COLUMN_STATUS,DownloadManager.STATUS_FAILED);    verifyInt(cursor,DownloadManager.COLUMN_REASON,DownloadManager.ERROR_CANNOT_RESUME);  }  finally {    cursor.close();  }  assertEquals(1,mReceiver.numDownloadsCompleted());}  }
class C{  public void reportNewSolvingTime(long solvingTimeMillis){  totalSolvingTimeMillis+=solvingTimeMillis;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodetype.class,args);}  }
class C{  public void testReset(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  ai.accumulate(2.0);  assertEquals(2.0,ai.get());  ai.reset();  assertEquals(0.0,ai.get());}  }
class C{  public static String formatDate(Date date){  return DateFormat.getDateInstance(DateFormat.DEFAULT).format(date);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  @Override public void charWrite(ObjectReference src,Address slot,char value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.charWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public void backOff(BackOffContext backOffContext){  ExponentialBackOffContext context=(ExponentialBackOffContext)backOffContext;  try {    long sleepTime=context.getSleepAndIncrement();    sleeper.sleep(sleepTime);  } catch (  InterruptedException e) {    throw new Error("Thread interrupted while sleeping",e);  }}  }
class C{  protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException {  boolean matchFound;  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if ((m_tokenChar == '\'') || (m_tokenChar == '"')) {    appendOp(2,OpCodes.OP_LITERAL);    Literal();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '$') {    nextToken();    appendOp(2,OpCodes.OP_VARIABLE);    QName();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '(') {    nextToken();    appendOp(2,OpCodes.OP_GROUP);    Expr();    consumeExpected(')');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if ((null != m_token) && ((('.' == m_tokenChar) && (m_token.length() > 1) && Character.isDigit(m_token.charAt(1))) || Character.isDigit(m_tokenChar))) {    appendOp(2,OpCodes.OP_NUMBERLIT);    Number();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (lookahead('(',1) || (lookahead(':',1) && lookahead('(',3))) {    matchFound=FunctionCall();  } else {    matchFound=false;  }  return matchFound;}  }
class C{  public static boolean eqParamTypes(String desc1,String desc2){  if (desc1.charAt(0) != '(')   return false;  for (int i=0; true; ++i) {    char c=desc1.charAt(i);    if (c != desc2.charAt(i))     return false;    if (c == ')')     return true;  }}  }
class C{  public IIOException(String message){  super(message);}  }
class C{  public boolean isInt(String key){  Object val=get(key);  return val instanceof Integer;}  }
class C{  public Craft(){  super();}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  final Entity ae=game.getEntity(attackerId);  int targetId=Entity.NONE;  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;    targetId=target.getTargetId();  }  if (ae == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  }  if (te == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't target a null entity!");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(te.getPosition());  if (attHex == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Entity #" + ae.getId() + " does not know its position.");  }  if (targHex == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Entity #" + te.getId() + " does not know its position.");  }  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  boolean inSameBuilding=Compute.isInSameBuilding(game,ae,te);  final boolean targetInBuilding=Compute.isInBuilding(game,te);  Building bldg=null;  if (targetInBuilding) {    bldg=game.getBoard().getBuildingAt(te.getPosition());  }  ToHitData toHit=null;  if (ae.equals(te)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't target yourself");  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Non-mechs can't push");  }  if (ae.entityIsQuad()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is a quad");  }  if (!(te instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is not a mech");  }  if (ae.getArmsFlipped()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Arms are flipped to the rear. Can not push.");  }  if (Entity.NONE != te.getTransportId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is a passenger.");  }  if (Entity.NONE != te.getSwarmTargetId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is swarming a Mek.");  }  if (ae.isLocationBad(Mech.LOC_RARM) || ae.isLocationBad(Mech.LOC_LARM)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No/minimal arms");  }  if (ae.weaponFiredFrom(Mech.LOC_RARM) || ae.weaponFiredFrom(Mech.LOC_LARM)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from arm this turn");  }  if (ae.getPosition().distance(target.getPosition()) > 1) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");  }  if (attackerElevation != targetElevation) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not at same elevation");  }  if (te.hasDisplacementAttack() && !te.isPushing()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is making a charge/DFA attack");  }  if (te.isPushing() && (te.getDisplacementAttack().getTargetId() != ae.getId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is pushing another mech");  }  if (ae.isTargetOfDisplacementAttack() && (ae.findTargetedDisplacement().getEntityId() != target.getTargetId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is the target of another push/charge/DFA");  }  if (te.isTargetOfDisplacementAttack() && (te.findTargetedDisplacement().getEntityId() != ae.getId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is the target of another push/charge/DFA");  }  if (te.isAirborne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Cannot push an airborne target.");  }  if (!target.getPosition().equals(ae.getPosition().translated(ae.getFacing()))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not directly ahead of feet");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if (te.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is prone");  }  if (targetInBuilding) {    if (!Compute.isInBuilding(game,ae)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is inside building");    } else     if (!game.getBoard().getBuildingAt(ae.getPosition()).equals(bldg)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is inside differnt building");    }  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can not push a building (well, you can, but it won't do anything).");  }  if ((target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) || (target.getTargetType() == Targetable.TYPE_HEX_IGNITE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid attack");  }  int base=ae.getCrew().getPiloting() - 1;  toHit=new ToHitData(base,"base");  toHit.append(Compute.getAttackerMovementModifier(game,attackerId));  toHit.append(Compute.getTargetMovementModifier(game,targetId));  toHit.append(Compute.getAttackerTerrainModifier(game,attackerId));  toHit.append(Compute.getTargetTerrainModifier(game,te,0,inSameBuilding));  if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM)) {    toHit.addModifier(2,"Right Shoulder destroyed");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM)) {    toHit.addModifier(2,"Left Shoulder destroyed");  }  if (ae.isSpotting()) {    toHit.addModifier(+1,"attacker is spotting");  }  if ((te.height() > 0) && (te.getElevation() == -1) && (targHex.terrainLevel(Terrains.WATER) == te.height())) {    toHit.addModifier(3,"target has partial cover");  }  toHit.append(Compute.getImmobileMod(te));  Compute.modifyPhysicalBTHForAdvantages(ae,te,toHit,game);  if (te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  toHit.append(nightModifiers(game,target,null,ae,false));  if (((Mech)ae).getCockpitType() == Mech.COCKPIT_TORSO_MOUNTED) {    int sensorHits=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_HEAD);    int sensorHits2=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_CT);    if ((sensorHits + sensorHits2) == 3) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Sensors Completely Destroyed for Torso-Mounted Cockpit");    } else     if (sensorHits == 2) {      toHit.addModifier(4,"Head Sensors Destroyed for Torso-Mounted Cockpit");    }  }  if (game.getOptions().booleanOption(OptionsConstants.AGM_TAC_OPS_PHYSICAL_ATTACK_PSR)) {    if (ae.getWeightClass() == EntityWeightClass.WEIGHT_LIGHT) {      toHit.addModifier(-2,"Weight Class Attack Modifier");    } else     if (ae.getWeightClass() == EntityWeightClass.WEIGHT_MEDIUM) {      toHit.addModifier(-1,"Weight Class Attack Modifier");    }  }  if (((Mech)ae).hasIndustrialTSM()) {    toHit.addModifier(2,"industrial TSM");  }  return toHit;}  }
class C{  private void openMatrix(){  int returnVal=m_fileChooser.showOpenDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File selectedFile=m_fileChooser.getSelectedFile();    Reader reader=null;    try {      reader=new BufferedReader(new FileReader(selectedFile));      m_matrix=new CostMatrix(reader);      reader.close();      matrixChanged();    } catch (    Exception ex) {      JOptionPane.showMessageDialog(this,"Error reading file '" + selectedFile.getName() + "':\n"+ ex.getMessage(),"Load failed",JOptionPane.ERROR_MESSAGE);      System.out.println(ex.getMessage());    }  }}  }
class C{  public Builder removeEmails(){  this.emails.clear();  return this;}  }
class C{  public void clearChoices(){  if (mCheckedStates != null) {    mCheckedStates.clear();  }  if (mCheckedIdStates != null) {    mCheckedIdStates.clear();  }  mCheckedCount=0;  updateOnScreenCheckedViews();}  }
class C{  EdgePair(String st,String end){  this.startKey=st;  this.endKey=end;  this.marked=false;}  }
class C{  public DownFileDao(Context context){  openHelper=new MyDBHelper(context);}  }
class C{  @Override public boolean test(final Array params){  for (int i=0; i < params.size(); ++i) {    if (params.get(i) <= 0.0) {      return false;    }  }  return true;}  }
class C{  void registerSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  if (mSpringRegistry.containsKey(spring.getId())) {    throw new IllegalArgumentException("spring is already registered");  }  mSpringRegistry.put(spring.getId(),spring);}  }
class C{  private int handleZ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    result.append('J');    index+=2;  } else {    if (contains(value,index + 1,2,"ZO","ZI","ZA") || (slavoGermanic && (index > 0 && charAt(value,index - 1) != 'T'))) {      result.append("S","TS");    } else {      result.append('S');    }    index=charAt(value,index + 1) == 'Z' ? index + 2 : index + 1;  }  return index;}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  V readValueUnderLock(HashEntry<K,V> e){  lock();  try {    return e.value;  }  finally {    unlock();  }}  }
class C{  public static int addDataPageRow(ByteBuffer dataPage,int rowSize,JetFormat format,int rowFlags){  int rowSpaceUsage=getRowSpaceUsage(rowSize,format);  short freeSpaceInPage=dataPage.getShort(format.OFFSET_FREE_SPACE);  dataPage.putShort(format.OFFSET_FREE_SPACE,(short)(freeSpaceInPage - rowSpaceUsage));  short rowCount=dataPage.getShort(format.OFFSET_NUM_ROWS_ON_DATA_PAGE);  dataPage.putShort(format.OFFSET_NUM_ROWS_ON_DATA_PAGE,(short)(rowCount + 1));  short rowLocation=findRowEnd(dataPage,rowCount,format);  rowLocation-=rowSize;  dataPage.putShort(getRowStartOffset(rowCount,format),(short)(rowLocation | rowFlags));  dataPage.position(rowLocation);  return rowCount;}  }
class C{  private void goBack(){  if (this.inAppWebView.canGoBack()) {    this.inAppWebView.goBack();  }}  }
class C{  private Tag createTagFromEntity(TagEntity tagEntity){  Tag tag=new Tag();  tag.setId(tagEntity.getId());  tag.setTagKey(new TagKey(tagEntity.getTagType().getCode(),tagEntity.getTagCode()));  tag.setDisplayName(tagEntity.getDisplayName());  tag.setDescription(tagEntity.getDescription());  tag.setUserId(tagEntity.getCreatedBy());  tag.setUpdatedTime(HerdDateUtils.getXMLGregorianCalendarValue(tagEntity.getUpdatedOn()));  TagEntity parentTagEntity=tagEntity.getParentTagEntity();  if (parentTagEntity != null) {    tag.setParentTagKey(new TagKey(parentTagEntity.getTagType().getCode(),parentTagEntity.getTagCode()));  }  return tag;}  }
class C{  public MCAFile applyFile(MCAFile file){  return file;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:44.104 -0500",hash_original_method="3D3F7D0269EE9A4A0E6B970CD7AB0599",hash_generated_method="50571D3BC1ED74E3C9E79E72C232E208") @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  private FileDownloadInfo.NetworkState checkIsNetworkTypeAllowed(FileDownloadInfo downloadInfo,int networkType){  if (downloadInfo.getTotalBytes() <= 0) {    return FileDownloadInfo.NetworkState.OK;  }  if (networkType == ConnectivityManager.TYPE_WIFI) {    return FileDownloadInfo.NetworkState.OK;  }  Long maxBytesOverMobile=systemFacade.getMaxBytesOverMobile();  if (maxBytesOverMobile != null && downloadInfo.getTotalBytes() > maxBytesOverMobile) {    return FileDownloadInfo.NetworkState.UNUSABLE_DUE_TO_SIZE;  }  if (downloadInfo.isRecommendedSizeLimitBypassed()) {    Long recommendedMaxBytesOverMobile=systemFacade.getRecommendedMaxBytesOverMobile();    if (recommendedMaxBytesOverMobile != null && downloadInfo.getTotalBytes() > recommendedMaxBytesOverMobile) {      return FileDownloadInfo.NetworkState.RECOMMENDED_UNUSABLE_DUE_TO_SIZE;    }  }  return FileDownloadInfo.NetworkState.OK;}  }
class C{  public Vault withRetries(final int maxRetries,final int retryIntervalMilliseconds){  this.vaultConfig.setMaxRetries(maxRetries);  this.vaultConfig.setRetryIntervalMilliseconds(retryIntervalMilliseconds);  return this;}  }
class C{  public boolean addMainTask(TmmThreadPool newTask){  boolean result=false;  newTask.addListener(this);  newTask.setState(TaskState.QUEUED);  mainTaskExecutor.execute(newTask);  return result;}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public MockVerifiableEntity(final Account signer,final int customField){  super(TYPE,VERSION,TIMESTAMP,signer);  this.customField=customField;}  }
class C{  public FastHexaValueGridPortrayal2D(String valueName,boolean immutableField){  super(valueName);  setImmutableField(immutableField);}  }
class C{  private void generateTagHandlerDestroy(){  if (!isPoolingEnabled || tagHandlerPoolNames.isEmpty()) {    return;  }  out.printil("public void _jspDestroy() {");  out.pushIndent();  for (  String tagHandlerPoolName : tagHandlerPoolNames) {    out.printin(tagHandlerPoolName);    out.println(".release();");  }  out.popIndent();  out.printil("}");  out.println();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.338 -0500",hash_original_method="EAAB05CCE538933E6B2EE13894209916",hash_generated_method="7DBB32C2688BD2CE21DBADCCA8BA1E3D") public static boolean isUnicodeIdentifierStart(int codePoint){  return isUnicodeIdentifierStartImpl(codePoint);}  }
class C{  public int parseArguments(String[] arguments) throws ArgumentException {  int[] optionIndex=new int[arguments.length];  for (int i=0; i < optionIndex.length; i++) {    optionIndex[i]=-1;  }  for (int i=0; i < options.length; i++) {    Option option=options[i];    int index=findArgument(arguments,option.label);    if (index != -1) {      if (optionIndex[index] != -1) {        throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");      }      String arg=arguments[index].substring(option.label.length() + 1);      optionIndex[index]=i;      option.isAvailable=true;      if (option instanceof IntegerArrayOption) {        IntegerArrayOption o=(IntegerArrayOption)option;        o.values=new int[o.count];        int k=index;        int j=0;        while (j < o.count) {          if (arg.length() > 0) {            StringTokenizer tokenizer=new StringTokenizer(arg,",\t ");            while (tokenizer.hasMoreTokens()) {              String token=tokenizer.nextToken();              if (token.length() > 0) {                try {                  o.values[j]=Integer.parseInt(token);                } catch (                NumberFormatException nfe) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ token);                }                if (o.values[j] > o.maxValue || o.values[j] < o.minValue) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ token);                }                j++;              }            }          }          k++;          if (j < o.count) {            if (k >= arguments.length) {              throw new ArgumentException("Argument, " + arguments[index] + " is missing one or more values: expecting "+ o.count+ " integers");            }            if (optionIndex[k] != -1) {              throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");            }            arg=arguments[k];            optionIndex[k]=i;          }        }      } else       if (option instanceof IntegerOption) {        IntegerOption o=(IntegerOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting an integer");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        try {          o.value=Integer.parseInt(arg);        } catch (        NumberFormatException nfe) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ arg);        }        if (o.value > o.maxValue || o.value < o.minValue) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ arg);        }      } else       if (option instanceof LongOption) {        LongOption o=(LongOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting a long integer");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        try {          o.value=Long.parseLong(arg);        } catch (        NumberFormatException nfe) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ arg);        }        if (o.value > o.maxValue || o.value < o.minValue) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad long integer value: "+ arg);        }      } else       if (option instanceof RealArrayOption) {        RealArrayOption o=(RealArrayOption)option;        if (o.count >= 0) {          final int count=o.count;          o.values=new double[count];          int k=index;          int j=0;          while (j < count) {            if (arg.length() > 0) {              StringTokenizer tokenizer=new StringTokenizer(arg,",\t ");              while (tokenizer.hasMoreTokens()) {                String token=tokenizer.nextToken();                if (token.length() > 0) {                  try {                    o.values[j]=Double.parseDouble(token);                  } catch (                  NumberFormatException nfe) {                    throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                  }                  if (o.values[j] > o.maxValue || o.values[j] < o.minValue) {                    throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                  }                  j++;                }              }            }            k++;            if (j < count) {              if (k >= arguments.length) {                throw new ArgumentException("Argument, " + arguments[index] + " is missing one or more values: expecting "+ count+ " integers");              }              if (optionIndex[k] != -1) {                throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");              }              arg=arguments[k];              optionIndex[k]=i;            }          }        } else {          double[] values=new double[100];          index+=1;          arg=arguments[index];          optionIndex[index]=i;          int j=0;          if (arg.length() > 0) {            StringTokenizer tokenizer=new StringTokenizer(arg,",\t ");            while (tokenizer.hasMoreTokens()) {              String token=tokenizer.nextToken();              if (token.length() > 0) {                try {                  values[j]=Double.parseDouble(token);                } catch (                NumberFormatException nfe) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                }                if (values[j] > o.maxValue || values[j] < o.minValue) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                }                j++;              }            }          }          o.values=new double[j];          System.arraycopy(values,0,o.values,0,j);        }      } else       if (option instanceof RealOption) {        RealOption o=(RealOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting a real number");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        try {          o.value=Double.parseDouble(arg);        } catch (        NumberFormatException nfe) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ arg);        }        if (o.value > o.maxValue || o.value < o.minValue) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ arg);        }      } else       if (option instanceof StringOption) {        StringOption o=(StringOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting a string");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        o.value=arg;        if (o.options != null) {          boolean found=false;          for (          String option1 : o.options) {            if ((!caseSensitive && option1.equalsIgnoreCase(o.value)) || option1.equals(o.value)) {              found=true;              break;            }          }          if (!found) {            throw new ArgumentException("Argument, " + arguments[index] + " has a bad string value: "+ arg);          }        }      } else {      }    }  }  int n=0;  int i=arguments.length - 1;  while (i >= 0 && optionIndex[i] == -1 && !arguments[i].startsWith(ARGUMENT_CHARACTER)) {    n++;    i--;  }  leftoverArguments=new String[n];  for (i=0; i < n; i++) {    leftoverArguments[i]=arguments[arguments.length - n + i];  }  for (i=0; i < arguments.length - n; i++) {    if (optionIndex[i] == -1) {      throw new ArgumentException("Unrecognized argument: " + arguments[i]);    }  }  return n;}  }
class C{  private void rushAttempt(Team offense,Team defense,PlayerRB selRB,double RB1pref,double RB2pref,int yardsGain){  selRB.statsRushAtt++;  selRB.statsRushYards+=yardsGain;  offense.teamRushYards+=yardsGain;  if (gamePoss) {    homeYards+=yardsGain;    if (RB1pref > RB2pref) {      HomeRB1Stats[0]++;      HomeRB1Stats[1]+=yardsGain;    } else {      HomeRB2Stats[0]++;      HomeRB2Stats[1]+=yardsGain;    }  } else {    awayYards+=yardsGain;    if (RB1pref > RB2pref) {      AwayRB1Stats[0]++;      AwayRB1Stats[1]+=yardsGain;    } else {      AwayRB2Stats[0]++;      AwayRB2Stats[1]+=yardsGain;    }  }}  }
class C{  public SoapMessage(SOAPMessage message,String soapAction) throws ParserException, SoapFaultException {  assert message != null;  assert soapAction != null;  log.debug("Creating SoapMessage from SOAPMessage");  parseForSOAPFault(message);  this.message=message;  this.body=parseBody(message);  this.header=null;  this.action=soapAction;}  }
class C{  public Jerry css(String propertyName,String value){  propertyName=StringUtil.fromCamelCase(propertyName,'-');  for (  Node node : nodes) {    String styleAttrValue=node.getAttribute("style");    Map<String,String> styles=createPropertiesMap(styleAttrValue,';',':');    if (value.length() == 0) {      styles.remove(propertyName);    } else {      styles.put(propertyName,value);    }    styleAttrValue=generateAttributeValue(styles,';',':');    node.setAttribute("style",styleAttrValue);  }  return this;}  }
class C{  public void flush() throws IOException {  _out.flush();}  }
class C{  public StandardHeader(final String id){  super(id);}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  @Override public boolean removeDirectionalNodeConnection(UUID startNode,UUID endNode){  return graphServer.removeEdge(startNode,endNode);}  }
class C{  public IconifyAction(){  super(UIManager.getString("BETitlePane.iconifyButtonText",getLocale()));}  }
class C{  protected int depth(){  if (isLeaf()) {    return 1;  } else {    return 1 + max(l.depth(),r.depth());  }}  }
class C{  @Deprecated public static boolean isRebaseInTheProgress(VirtualFile root){  return getRebaseDir(root) != null;}  }
class C{  public void jmp(){  super.b(0);}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  public void await() throws InterruptedException {  lock.lock();  try {    while (!isDone) {      done.await();    }  }  finally {    isDone=false;    lock.unlock();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.719 -0500",hash_original_method="216CA9BCEE6B2216E69E554CBCCBB21C",hash_generated_method="179E52FF784C1E5BDEE0266C9CB06A11") public HeaderIterator iterator(){  return new BasicListHeaderIterator(this.headers,null);}  }
class C{  @Override public String globalInfo(){  return "Uses the stopwords located in the specified file (ignored _if " + "pointing to a directory). One stopword per line. Lines " + "starting with '#' are considered comments and ignored.";}  }
class C{  public static <T>T fromByteArray(byte[] serialized,Coder<T> coder){  ByteArrayInputStream bais=new ByteArrayInputStream(serialized);  try {    return coder.decode(bais,new Coder.Context(true));  } catch (  IOException e) {    throw new IllegalStateException("Error decoding bytes for coder: " + coder,e);  }}  }
class C{  public AccountHeaderBuilder withTypeface(@NonNull Typeface typeface){  this.mTypeface=typeface;  return this;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  int C_Invoice_ID=Env.getContextAsInt(ctx,WindowNo,"C_Invoice_ID");  int C_Order_ID=Env.getContextAsInt(ctx,WindowNo,"C_Order_ID");  int C_DocType_ID=Env.getContextAsInt(ctx,WindowNo,"C_DocType_ID");  log.fine("Payment_DocType - C_Invoice_ID=" + C_Invoice_ID + ", C_DocType_ID="+ C_DocType_ID);  MDocType dt=null;  if (C_DocType_ID != 0) {    dt=MDocType.get(ctx,C_DocType_ID);    Env.setContext(ctx,WindowNo,"IsSOTrx",dt.isSOTrx() ? "Y" : "N");  }  if (C_Invoice_ID != 0) {    MInvoice inv=new MInvoice(ctx,C_Invoice_ID,null);    if (dt != null) {      if (inv.isSOTrx() != dt.isSOTrx())       return "PaymentDocTypeInvoiceInconsistent";    }  }  if (C_Order_ID != 0) {    MOrder ord=new MOrder(ctx,C_Order_ID,null);    if (dt != null) {      if (ord.isSOTrx() != dt.isSOTrx())       return "PaymentDocTypeInvoiceInconsistent";    }  }  return "";}  }
class C{  private void unselectButton(){  m_ParentButton.setSelected(false);  putValue(Action.NAME,"Unfreeze Proximitry Browsing. Selection changes will change graph visibility");  putValue(Action.SHORT_DESCRIPTION,"Frozen Proximitry Browsing. Selection changes do not change graph visibility");  m_ParentButton.setIcon(new ImageIcon(CMain.class.getResource("data/viewnavi_up.jpg")));  m_ParentButton.setRolloverIcon(new ImageIcon(CMain.class.getResource("data/viewnavi_hover.jpg")));  m_ParentButton.setPressedIcon(new ImageIcon(CMain.class.getResource("data/viewlock_down.jpg")));}  }
class C{  private void testWKB(){  ValueGeometry geom3d=ValueGeometry.get("POLYGON ((67 13 6, 67 18 5, 59 18 4, 59 13 6,  67 13 6))",27572);  ValueGeometry copy=ValueGeometry.get(geom3d.getBytes());  assertEquals(6,copy.getGeometry().getCoordinates()[0].z);  assertEquals(5,copy.getGeometry().getCoordinates()[1].z);  assertEquals(4,copy.getGeometry().getCoordinates()[2].z);  copy=ValueGeometry.get(geom3d.getBytes());  assertEquals(27572,copy.getGeometry().getSRID());}  }
class C{  public NFA(String regexp){  this.regexp=regexp;  m=regexp.length();  Stack<Integer> ops=new Stack<Integer>();  graph=new Digraph(m + 1);  for (int i=0; i < m; i++) {    int lp=i;    if (regexp.charAt(i) == '(' || regexp.charAt(i) == '|')     ops.push(i); else     if (regexp.charAt(i) == ')') {      int or=ops.pop();      if (regexp.charAt(or) == '|') {        lp=ops.pop();        graph.addEdge(lp,or + 1);        graph.addEdge(or,i);      } else       if (regexp.charAt(or) == '(')       lp=or; else       assert false;    }    if (i < m - 1 && regexp.charAt(i + 1) == '*') {      graph.addEdge(lp,i + 1);      graph.addEdge(i + 1,lp);    }    if (regexp.charAt(i) == '(' || regexp.charAt(i) == '*' || regexp.charAt(i) == ')')     graph.addEdge(i,i + 1);  }  if (ops.size() != 0)   throw new IllegalArgumentException("Invalid regular expression");}  }
class C{  public void internalInit(GemFireCacheImpl c) throws CacheException {  _internalInit(c);}  }
class C{  private static int hashMember(final String name,final Object value){  final int part1=name.hashCode() * 127;  if (value.getClass().isArray()) {    return part1 ^ arrayMemberHash(value.getClass().getComponentType(),value);  }  if (value instanceof Annotation) {    return part1 ^ hashCode((Annotation)value);  }  return part1 ^ value.hashCode();}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  private void checkConnectivity() throws StopRequestException {  final NetworkState networkUsable=networkChecker.checkCanUseNetwork(originalDownloadInfo);  if (networkUsable != NetworkState.OK) {    int status=DownloadStatus.WAITING_FOR_NETWORK;    if (networkUsable == NetworkState.UNUSABLE_DUE_TO_SIZE) {      status=DownloadStatus.QUEUED_FOR_WIFI;      notifyPauseDueToSize(true);    } else     if (networkUsable == NetworkState.RECOMMENDED_UNUSABLE_DUE_TO_SIZE) {      status=DownloadStatus.QUEUED_FOR_WIFI;      notifyPauseDueToSize(false);    }    throw new StopRequestException(status,networkUsable.name());  }}  }
class C{  public static DeterministicKey createMasterPrivateKey(byte[] seed) throws HDDerivationException {  checkArgument(seed.length > 8,"Seed is too short and could be brute forced");  byte[] i=HDUtils.hmacSha512(HDUtils.createHmacSha512Digest("Bitcoin seed".getBytes()),seed);  checkState(i.length == 64,i.length);  byte[] il=Arrays.copyOfRange(i,0,32);  byte[] ir=Arrays.copyOfRange(i,32,64);  Arrays.fill(i,(byte)0);  DeterministicKey masterPrivKey=createMasterPrivKeyFromBytes(il,ir);  Arrays.fill(il,(byte)0);  Arrays.fill(ir,(byte)0);  masterPrivKey.setCreationTimeSeconds(Utils.currentTimeSeconds());  return masterPrivKey;}  }
class C{  public AccountHeaderBuilder withCloseDrawerOnProfileListClick(boolean closeDrawerOnProfileListClick){  this.mCloseDrawerOnProfileListClick=closeDrawerOnProfileListClick;  return this;}  }
class C{  public void testDescendingIteratorRemove(){  final LinkedBlockingDeque q=new LinkedBlockingDeque();  for (int iters=0; iters < 100; ++iters) {    q.add(new Integer(3));    q.add(new Integer(2));    q.add(new Integer(1));    Iterator it=q.descendingIterator();    assertEquals(it.next(),new Integer(1));    it.remove();    assertEquals(it.next(),new Integer(2));    it=q.descendingIterator();    assertEquals(it.next(),new Integer(2));    assertEquals(it.next(),new Integer(3));    it.remove();    assertFalse(it.hasNext());    q.remove();  }}  }
class C{  public WriteReachedAchievementCommand(Integer id,String title,Category category,String playerName){  this.id=id;  this.playerName=playerName;}  }
class C{  @Override public final void sample(){  long count=_count.getAndSet(0);  long time=_time.getAndSet(0);  if (count == 0)   _value=0; else   _value=time / (double)count;}  }
class C{  private void handleVPlexAssociatedVolumes(StringSet associatedVolumeIds){  List<URI> associatedVolumeURIs=StringSetUtil.stringSetToUriList(associatedVolumeIds);  List<Volume> associatedVolumes=dbClient.queryObject(Volume.class,associatedVolumeURIs);  Iterator<Volume> associatedVolumesIter=associatedVolumes.iterator();  while (associatedVolumesIter.hasNext()) {    Volume associatedVolume=associatedVolumesIter.next();    associatedVolume.addInternalFlags(Flag.INTERNAL_OBJECT);    log.info("Marked VPLEX backend volume (id={}) as internal object",associatedVolume.getId().toString());  }  dbClient.persistObject(associatedVolumes);}  }
class C{  public static String gitTime(Date time){  long t=time.getTime() / 1000;  return Long.toString(t);}  }
class C{  public User checkClientUser(long id,boolean exceptionIfInvalidStatus) throws NotActivatedUserException, BannedUserException, Exception {  UserExt user=universal.selectOne(new SelectUserById(id));  if (user == null)   return null;  try {    checkStatus(user,id);  } catch (  ValidationException e) {    if (exceptionIfInvalidStatus)     throw e; else     return null;  }  return user.getUser();}  }
class C{  public int loca(int index){  return this.getLocaList().get(index);}  }
class C{  public void validate(ElemTemplateElement elem,StylesheetHandler handler) throws SAXException {  String msg="";  while (elem != null) {    if (elem instanceof ElemExsltFuncResult && elem.getNextSiblingElem() != null && !(elem.getNextSiblingElem() instanceof ElemFallback)) {      msg="func:result has an illegal following sibling (only xsl:fallback allowed)";      handler.error(msg,new SAXException(msg));    }    if ((elem instanceof ElemApplyImport || elem instanceof ElemApplyTemplates || elem instanceof ElemAttribute|| elem instanceof ElemCallTemplate|| elem instanceof ElemComment|| elem instanceof ElemCopy|| elem instanceof ElemCopyOf|| elem instanceof ElemElement|| elem instanceof ElemLiteralResult|| elem instanceof ElemNumber|| elem instanceof ElemPI|| elem instanceof ElemText|| elem instanceof ElemTextLiteral|| elem instanceof ElemValueOf) && !(ancestorIsOk(elem))) {      msg="misplaced literal result in a func:function container.";      handler.error(msg,new SAXException(msg));    }    ElemTemplateElement nextElem=elem.getFirstChildElem();    while (nextElem == null) {      nextElem=elem.getNextSiblingElem();      if (nextElem == null)       elem=elem.getParentElem();      if (elem == null || elem instanceof ElemExsltFunction)       return;    }    elem=nextElem;  }}  }
class C{  public List<RegSpillListElement> regSpillList(){  return regSpillList;}  }
class C{  @Override public void step(MessageLogger logger){  env.step();}  }
class C{  public static boolean readBoolean(SharedPreferences preferences,String key,boolean defaultValue){  return preferences.getBoolean(key,defaultValue);}  }
class C{  public CorsServiceBuilder allowRequestMethods(final HttpMethod... methods){  requireNonNull(methods,"methods");  for (int i=0; i < methods.length; i++) {    if (methods[i] == null) {      throw new NullPointerException("methods[" + i + ']');    }  }  Collections.addAll(allowedRequestMethods,methods);  return this;}  }
class C{  public boolean filterEquals(Intent other){  if (other == null) {    return false;  }  if (mAction != other.mAction) {    if (mAction != null) {      if (!mAction.equals(other.mAction)) {        return false;      }    } else {      if (!other.mAction.equals(mAction)) {        return false;      }    }  }  if (mData != other.mData) {    if (mData != null) {      if (!mData.equals(other.mData)) {        return false;      }    } else {      if (!other.mData.equals(mData)) {        return false;      }    }  }  if (mType != other.mType) {    if (mType != null) {      if (!mType.equals(other.mType)) {        return false;      }    } else {      if (!other.mType.equals(mType)) {        return false;      }    }  }  if (mPackage != other.mPackage) {    if (mPackage != null) {      if (!mPackage.equals(other.mPackage)) {        return false;      }    } else {      if (!other.mPackage.equals(mPackage)) {        return false;      }    }  }  if (mComponent != other.mComponent) {    if (mComponent != null) {      if (!mComponent.equals(other.mComponent)) {        return false;      }    } else {      if (!other.mComponent.equals(mComponent)) {        return false;      }    }  }  if (mCategories != other.mCategories) {    if (mCategories != null) {      if (!mCategories.equals(other.mCategories)) {        return false;      }    } else {      if (!other.mCategories.equals(mCategories)) {        return false;      }    }  }  return true;}  }
class C{  public ConcurrentStack(final int size,final SpinPolicy spinPolicy){  int stackSize=1;  while (stackSize < size)   stackSize<<=1;  this.size=stackSize;  stack=new AtomicReferenceArray<N>(stackSize);switch (spinPolicy) {case BLOCKING:    stackNotFullCondition=new StackNotFull();  stackNotEmptyCondition=new StackNotEmpty();break;case SPINNING:stackNotFullCondition=new SpinningStackNotFull();stackNotEmptyCondition=new SpinningStackNotEmpty();break;case WAITING:default :stackNotFullCondition=new WaitingStackNotFull();stackNotEmptyCondition=new WaitingStackNotEmpty();}}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void addStorable(String name,DOMStorable prototype){  nameToPrototypeMap.put(name,prototype);  classToNameMap.put(prototype.getClass(),name);}  }
class C{  public void loadAIMLFileAsLog(InputStream stream,String encoding,int maxSize,boolean pin){  String text=Utils.loadTextFile(stream,encoding,MAX_FILE_SIZE);  loadAIMLAsLog(text,pin);}  }
class C{  public boolean isArrayLike(){  TypeRef _elementType=this.getElementType();  return (_elementType != null);}  }
class C{  @Override public int hashCode(){  int result;  result=(this.period != null ? this.period.hashCode() : 0);  result=29 * result + (this.value != null ? this.value.hashCode() : 0);  return result;}  }
class C{  public Boolean isSpbmEnabled(){  return spbmEnabled;}  }
class C{  public synchronized void run(){  final long end=System.currentTimeMillis() + timeout;  long now;  while (watch && (end > (now=System.currentTimeMillis()))) {    try {      wait(end - now);    } catch (    InterruptedException ignored) {    }  }  if (watch) {    try {      cancellable.cancel();    } catch (    Exception e) {      LOG.error(e.getMessage(),e);    }    watch=false;  }}  }
class C{  public static boolean ipAddressExist(String ipAddress){  for (  ArpInfo arpInfo : fetchArpList()) {    if (arpInfo.getIpAddress().toLowerCase().equals(ipAddress.toLowerCase()))     return true;  }  return false;}  }
class C{  private void write(String plain) throws Exception {  buffer.write(result);  buffer.clear();  result.write(plain);}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public static boolean parseBoolean(String s){  char ch=s.length() > 0 ? s.charAt(0) : 0;  return (ch == '1' || ch == 't' || ch == 'T');}  }
class C{  public int startScan(Target target,User user,Object[] customConfigurations){  return startScan(createDisplayName(target,customConfigurations),target,user,customConfigurations);}  }
class C{  public MixedItemSection(String name,DexFile file,int alignment,SortType sort){  super(name,file,alignment);  this.items=new ArrayList<OffsettedItem>(100);  this.interns=new HashMap<OffsettedItem,OffsettedItem>(100);  this.sort=sort;  this.writeSize=-1;}  }
class C{  public static byte[] serializeToCompressedByteArray(Object value){  try {    ByteArrayOutputStream buffer=new ByteArrayOutputStream();    try (ObjectOutputStream oos=new ObjectOutputStream(new SnappyOutputStream(buffer))){      oos.writeObject(value);    }     return buffer.toByteArray();  } catch (  IOException exn) {    throw new IllegalArgumentException("unable to serialize " + value,exn);  }}  }
class C{  public QueryParser(String f,Analyzer a){  this(new FastCharStream(new StringReader("")));  init(f,a);}  }
class C{  private static Set<String> duplicateFields(Class cls){  Set<String> all=new HashSet<>();  Set<String> duplicates=new HashSet<>();  for (Class<?> c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {    for (    Field f : c.getDeclaredFields()) {      if (serializeField(f)) {        String name=f.getName();        if (!all.add(name))         duplicates.add(name);      }    }  }  return duplicates;}  }
class C{  public void register(ClientSession session){  parent=session.onEvent(event,this);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  String pntrType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  pntrType=args[2].toLowerCase();  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum_black_background.pal");    if ((pntrType.equals("d8") || (pntrType.equals("rho8")))) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pntr.getValue(row,col) != noData) {            z=0;            for (i=0; i < 8; i++) {              if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {                z++;              }            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (pntrType.equals("dinf")) {      double flowDir;      double[] startFD=new double[]{180,225,270,315,0,45,90,135};      double[] endFD=new double[]{270,315,360,45,90,135,180,225};      int c;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            c=0;            for (i=0; i < 8; i++) {              flowDir=pntr.getValue(row + dY[i],col + dX[i]);              if (flowDir != noData) {                if (i != 3) {                  if (flowDir > startFD[i] && flowDir < endFD[i]) {                    c++;                  }                } else {                  if (flowDir > startFD[i] || flowDir < endFD[i]) {                    c++;                  }                }              }            }            output.setValue(row,col,c);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SIPRequest createBYERequest(boolean switchHeaders){  RequestLine requestLine=(RequestLine)this.requestLine.clone();  requestLine.setMethod("BYE");  return this.createSIPRequest(requestLine,switchHeaders);}  }
class C{  private void notifyDownstreamOfStart(final SessionNode sessionNode){  SessionSupport sessionSupport=new SessionSupport(this);  sessionSupport.addSessionListener(sessionNode.getSessionHandler());  sessionSupport.fireExecutionStarted();}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  public void addMessageListener(PacketListener listener){  connection.addPacketListener(listener,messageFilter);  connectionListeners.add(listener);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress;  double z, zn, previousZ;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxDist=0;  int subgridSize=0;  int neighbourhoodMaxDist=0;  int neighbourhoodSubgridSize=0;  boolean isLowest;  double aSmallValue;  int a, r, c, i, j, k, n, cn, rn;  int numNoFlowCells;  double largeVal=Float.MAX_VALUE;  int visitedCells;  boolean atLeastOneSourceCell;  boolean flag;  int b=0;  double costAccumVal;  double cost1, cost2;  double newcostVal;  double maxCost=largeVal;  boolean useMaxCost=false;  boolean solutionFound;  double[] dist=new double[8];  int[] backLinkDir={4,5,6,7,0,1,2,3};  int numUnsolvedCells=0;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodMaxDist=Integer.parseInt(args[2]);  neighbourhoodSubgridSize=2 * neighbourhoodMaxDist + 1;  if (!args[3].toLowerCase().equals("not specified")) {    maxCost=Double.parseDouble(args[3]);    useMaxCost=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  Long startTime=System.currentTimeMillis();  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    String shortName=DEM.getShortHeaderFile();    double cellSizeX=DEM.getCellSizeX();    double cellSizeY=DEM.getCellSizeY();    double minCellSize=Math.min(cellSizeX,cellSizeY);    double diagCellSize=Math.sqrt(cellSizeX * cellSizeX + cellSizeY * cellSizeY);    dist[0]=diagCellSize / minCellSize;    dist[1]=cellSizeX / minCellSize;    dist[2]=diagCellSize / minCellSize;    dist[3]=cellSizeY / minCellSize;    dist[4]=diagCellSize / minCellSize;    dist[5]=cellSizeX / minCellSize;    dist[6]=diagCellSize / minCellSize;    dist[7]=cellSizeY / minCellSize;    FileUtilities.copyFile(new File(inputHeader),new File(outputHeader));    FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(outputHeader.replace(".dep",".tas")));    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw");    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    if (args.length == 5 && !args[4].toLowerCase().equals("not specified")) {      aSmallValue=Double.parseDouble(args[4]);    }    double[][] LNDecrementValue=new double[neighbourhoodSubgridSize][neighbourhoodSubgridSize];    for (r=0; r < neighbourhoodSubgridSize; r++) {      for (c=0; c < neighbourhoodSubgridSize; c++) {        j=Math.abs(c - neighbourhoodMaxDist);        k=Math.abs(r - neighbourhoodMaxDist);        LNDecrementValue[r][c]=(j + k) * aSmallValue;      }    }    DEM.close();    ArrayList<DepGridCell> pq2=new ArrayList<>();    updateProgress("Loop 1 of 2:",-1);    for (row=1; row < (rows - 1); row++) {      for (col=1; col < (cols - 1); col++) {        z=output.getValue(row,col);        if (z != noData) {          isLowest=true;          for (a=0; a < 8; a++) {            cn=col + dX[a];            rn=row + dY[a];            zn=output.getValue(rn,cn);            if (zn < z && zn != noData) {              isLowest=false;              break;            }          }          if (isLowest) {            pq2.add(new DepGridCell(row,col,z));          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    numNoFlowCells=pq2.size();    int oneHundredthOfNumNoFlowCells=(int)(numNoFlowCells / 100);    updateProgress("Loop 2 of 2:",-1);    Long startTimeLoop2=System.currentTimeMillis();    DepGridCell cell=new DepGridCell(-1,-1,largeVal);    visitedCells=0;    n=0;    progress=0;    do {      cell=pq2.get(visitedCells);      col=cell.col;      row=cell.row;      z=cell.z;      isLowest=true;      for (a=0; a < 8; a++) {        cn=col + dX[a];        rn=row + dY[a];        zn=output.getValue(rn,cn);        if (zn < z && zn != noData) {          isLowest=false;          break;        }      }      if (isLowest) {        maxDist=neighbourhoodMaxDist;        subgridSize=neighbourhoodSubgridSize;        double[][] cost=new double[subgridSize][subgridSize];        double[][] accumulatedcost=new double[subgridSize][subgridSize];        int[][] backLink=new int[subgridSize][subgridSize];        atLeastOneSourceCell=false;        for (r=-maxDist; r <= maxDist; r++) {          for (c=-maxDist; c <= maxDist; c++) {            zn=output.getValue(row + r,col + c);            j=c + maxDist;            k=r + maxDist;            if ((zn + LNDecrementValue[k][j]) < z && zn != noData) {              cost[k][j]=0;              accumulatedcost[k][j]=0;              atLeastOneSourceCell=true;            } else             if ((zn + LNDecrementValue[k][j]) >= z) {              cost1=(zn - z) + LNDecrementValue[k][j];              if (cost1 <= maxCost) {                cost[k][j]=cost1;              } else {                cost[k][j]=largeVal;              }              accumulatedcost[k][j]=largeVal;            } else {              cost[k][j]=noData;              accumulatedcost[k][j]=noData;            }            backLink[k][j]=(int)noData;          }        }        cost[maxDist][maxDist]=0;        accumulatedcost[maxDist][maxDist]=largeVal;        if (atLeastOneSourceCell) {          PriorityQueue<CostDistCell> activeCellList=new PriorityQueue<>(maxDist * 4);          for (r=0; r < subgridSize; r++) {            for (c=0; c < subgridSize; c++) {              if (accumulatedcost[r][c] == largeVal) {                cost1=cost[r][c];                for (a=0; a < 8; a++) {                  cn=c + dX[a];                  rn=r + dY[a];                  if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                    if (accumulatedcost[rn][cn] == 0) {                      cost2=cost[rn][cn];                      newcostVal=(cost1 + cost2) / 2 * dist[a];                      activeCellList.add(new CostDistCell(r,c,newcostVal,a));                    }                  }                }              }            }          }          if (activeCellList.size() > 0) {            do {              CostDistCell cdCell=activeCellList.poll();              if (cdCell != null) {                r=cdCell.row;                c=cdCell.col;                costAccumVal=cdCell.aCost;                if (accumulatedcost[r][c] > costAccumVal) {                  accumulatedcost[r][c]=costAccumVal;                  backLink[r][c]=cdCell.backLink;                  cost1=cost[r][c];                  for (a=0; a < 8; a++) {                    cn=c + dX[a];                    rn=r + dY[a];                    if (cn >= 0 && cn < subgridSize && rn >= 0 && rn < subgridSize) {                      cost2=cost[rn][cn];                      newcostVal=costAccumVal + (cost1 + cost2) / 2 * dist[a];                      if (newcostVal < accumulatedcost[rn][cn]) {                        activeCellList.add(new CostDistCell(rn,cn,newcostVal,backLinkDir[a]));                      }                    }                  }                }              } else {                activeCellList.clear();              }            } while (activeCellList.size() > 0);            solutionFound=true;            if (useMaxCost) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  if (cost[r][c] == largeVal) {                    solutionFound=false;                  }                } else {                  flag=false;                }              } while (flag);            }            if (solutionFound) {              c=maxDist;              r=maxDist;              previousZ=z;              b=0;              flag=true;              do {                b=backLink[r][c];                if (b >= 0) {                  c=c + dX[b];                  r=r + dY[b];                  col=col + dX[b];                  row=row + dY[b];                  zn=output.getValue(row,col);                  if (zn > (previousZ - aSmallValue)) {                    output.setValue(row,col,previousZ - aSmallValue);                  }                  previousZ=output.getValue(row,col);                } else {                  flag=false;                }              } while (flag);            } else {              numUnsolvedCells++;            }          } else {            numUnsolvedCells++;          }        } else {          numUnsolvedCells++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      visitedCells++;      n++;      if (n == oneHundredthOfNumNoFlowCells || (visitedCells % 500 == 0)) {        if (n == oneHundredthOfNumNoFlowCells) {          n=0;          progress++;        }        long secPassed=(System.currentTimeMillis() - startTimeLoop2) / 1000;        long secRemaining=(long)(secPassed * ((double)numNoFlowCells / visitedCells) - secPassed);        String timeRemaining=String.format("%02d:%02d:%02d:%02d",secRemaining / 86400,(secRemaining % 86400) / 3600,(secRemaining % 3600) / 60,(secRemaining % 60));        updateProgress("Solved " + df.format((visitedCells - numUnsolvedCells)) + " pits (Est. time remaining "+ timeRemaining+ "):",progress);      }    } while (visitedCells < numNoFlowCells);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    Long endTime=System.currentTimeMillis();    returnData(outputHeader);    String results="Depression Breaching Results:\n";    results+="Input DEM:\t" + shortName + "\n";    results+="Output DEM:\t" + output.getShortHeaderFile() + "\n";    results+="Solved Pit Cells:\t" + df.format(visitedCells - numUnsolvedCells);    results+="\nUnsolved Pit Cells:\t" + df.format(numUnsolvedCells);    results+="\nMax distance:\t" + neighbourhoodMaxDist;    if (useMaxCost) {      results+="\nMax Elev. Decrement:\t" + maxCost;    }    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    results+="\nDuration:\t" + duration;    returnData(results);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void reset() throws IOException {  packer.reset(out);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  this.back();  return c;}  }
class C{  public synchronized void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null || changeSupport == null) {    return;  }  changeSupport.removePropertyChangeListener(propertyName,listener);}  }
class C{  private void doFinish(String containerName,String filename,IProgressMonitor monitor) throws CoreException, IOException {  monitor.beginTask("Creating " + filename,1);  monitor.setTaskName("Creating file...");  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IResource resource=root.findMember(new Path(containerName));  if (!resource.exists() || !(resource instanceof IContainer)) {    throwCoreException("Container \"" + containerName + "\" does not exist.");  }  IContainer container=(IContainer)resource;  final IFile file=container.getFile(new Path(filename));  ObjectXmlPersist persist=new ObjectXmlPersist(XStreamFactory.getSharedRefXStream());  persist.save(file.getLocationURI(),Collections.EMPTY_LIST);  monitor.worked(1);}  }
class C{  public XMLString newstr(char[] string,int start,int length){  return new XStringForChars(string,start,length);}  }
class C{  public GBC insets(int left,int top,int right,int bottom){  insets=new Insets(top,left,bottom,right);  return this;}  }
class C{  private static int base64toInt(char c){  int result;  if (c >= base64ToInt.length)   result=-1; else   result=base64ToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public ResponseEntity<Product> defaultProduct(int productId){  LOG.warn("Using fallback method for product-service");  return util.createResponse(new Product(productId,"Fallback Name",-1),HttpStatus.OK);}  }
class C{  void scrollHorizontal(int x){  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("Scrolling horizontally by " + y);  }  int w=getListWidth();  w-=((2 * SPACE) + (2 * MARGIN));  int h=height - (SCROLLBAR_AREA + (2 * MARGIN));  hsb.setValue(hsb.getValue() + x);  int options=PAINT_ITEMS | PAINT_HSCROLL;  Rectangle source=null;  Point distance=null;  if (x < 0) {    source=new Rectangle(MARGIN + SPACE,MARGIN,w + x,h);    distance=new Point(-x,0);    options|=COPY_AREA;  } else   if (x > 0) {    source=new Rectangle(MARGIN + SPACE + x,MARGIN,w - x,h);    distance=new Point(-x,0);    options|=COPY_AREA;  }  repaint(vsb.getValue(),lastItemDisplayed(),options,source,distance);}  }
class C{  private void restoreSystemKeymaps(UIDefaults table){  String[] keys={"EditorPane.focusInputMap","FormattedTextField.focusInputMap","PasswordField.focusInputMap","TextArea.focusInputMap","TextField.focusInputMap","TextPane.focusInputMap"};  int modifier=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();  for (  String key : keys) {    Object value=table.get(key);    if (value instanceof InputMapUIResource) {      InputMapUIResource map=(InputMapUIResource)value;      remapKey(map,KeyEvent.VK_X,KeyEvent.CTRL_DOWN_MASK,modifier);      remapKey(map,KeyEvent.VK_C,KeyEvent.CTRL_DOWN_MASK,modifier);      remapKey(map,KeyEvent.VK_V,KeyEvent.CTRL_DOWN_MASK,modifier);      remapKey(map,KeyEvent.VK_A,KeyEvent.CTRL_DOWN_MASK,modifier);    } else {      Logger.getLogger(StyledLookAndFeel.class).error("Can not modify resource: " + key);    }  }}  }
class C{  public void dispose(){  for (  final LifecycleListener listener : listeners) {    listener.dispose();  }}  }
class C{  public Builder scheme(String scheme){  this.scheme=scheme;  return this;}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  private static int med3(double[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  private void populateScreenShotsView(){  ArrayList<IMediaObject> mediaObjects=new ArrayList<>();  if (videos != null) {    for (    GetAppMeta.Media.Video video : videos) {      mediaObjects.add(new Video(video.thumbnail,video.url));    }  }  if (screenshots != null) {    for (    GetAppMeta.Media.Screenshot screenshot : screenshots) {      mediaObjects.add(new Screenshot(screenshot.url,screenshot.getOrientation()));    }  }  ScreenshotsAdapter adapter=new ScreenshotsAdapter(glide,mediaObjects);  mScreenshotsList.addItemDecoration(new DividerItemDecoration(AptoideUtils.getPixels(getActivity(),5)));  mScreenshotsList.setLayoutManager(new LinearLayoutManager(getActivity(),LinearLayoutManager.HORIZONTAL,false));  mScreenshotsList.setNestedScrollingEnabled(false);  mScreenshotsList.setAdapter(adapter);  if (mediaObjects.isEmpty()) {    mScreenshotsList.setVisibility(View.GONE);  }}  }
class C{  public static CommonTransitions createUncover(int type,boolean forward,int duration){  CommonTransitions t=new CommonTransitions(TYPE_UNCOVER);  t.slideType=type;  t.forward=forward;  t.speed=duration;  t.position=0;  return t;}  }
class C{  public HeldLocksGrant(BigInteger grantId){  this.grantId=Preconditions.checkNotNull(grantId);  creationDateMs=System.currentTimeMillis();  expirationDateMs=-1;  lockMap=LockCollections.of();  lockTimeout=null;  versionId=null;}  }
class C{  public TranscoderOutput(Writer writer){  this.writer=writer;}  }
class C{  public ConfigurationException(String message,String affectedConfigurationKey){  this(message);  affectedKey=affectedConfigurationKey;}  }
class C{  public void prepend(String s){  content=s + content;}  }
class C{  protected static void fail(){  System.exit(1);}  }
class C{  void stop(boolean cancel){  assert startGuard.get();  stop0(cancel);}  }
class C{  void addColumn(Column column){  columns.add(column);}  }
class C{  private int decodeSpectrum(float[] output){  int subbandVlcIndex[]=new int[32];  int sfIndex[]=new int[32];  int mantissas[]=new int[128];  int numSubbands=br.read(5);  int codingMode=br.read(1);  for (int i=0; i <= numSubbands; i++) {    subbandVlcIndex[i]=br.read(3);  }  for (int i=0; i <= numSubbands; i++) {    if (subbandVlcIndex[i] != 0) {      sfIndex[i]=br.read(6);    }  }  int i;  for (i=0; i <= numSubbands; i++) {    int first=subband_tab[i];    int last=subband_tab[i + 1];    int subbandSize=last - first;    if (subbandVlcIndex[i] != 0) {      readQuantSpectralCoeffs(subbandVlcIndex[i],codingMode,mantissas,subbandSize);      float scaleFactor=ff_atrac_sf_table[sfIndex[i]] * inv_max_quant[subbandVlcIndex[i]];      for (int j=0; first < last; first++, j++) {        output[first]=mantissas[j] * scaleFactor;      }    } else {      Arrays.fill(output,first,first + subbandSize,0f);    }  }  Arrays.fill(output,subband_tab[i],SAMPLES_PER_FRAME,0f);  return numSubbands;}  }
class C{  private void buildChosenAnimation(int childIndex){  List<Animator> fadeOutTextTopAnimatorList=new ArrayList<>();  List<Animator> closeToBottomImageAnimatorList=new ArrayList<>();  for (int i=0; i < childIndex; i++) {    View view=mMenuWrapper.getChildAt(i);    resetVerticalAnimation(view,true);    closeToBottomImageAnimatorList.add(AnimatorUtils.rotationCloseVertical(view));    fadeOutTextTopAnimatorList.add(AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(i),mContext.getResources().getDimension(R.dimen.text_right_translation)));  }  AnimatorSet closeToBottom=new AnimatorSet();  closeToBottom.playSequentially(closeToBottomImageAnimatorList);  AnimatorSet fadeOutTop=new AnimatorSet();  fadeOutTop.playSequentially(fadeOutTextTopAnimatorList);  List<Animator> fadeOutTextBottomAnimatorList=new ArrayList<>();  List<Animator> closeToTopAnimatorObjects=new ArrayList<>();  for (int i=getItemCount() - 1; i > childIndex; i--) {    View view=mMenuWrapper.getChildAt(i);    resetVerticalAnimation(view,false);    closeToTopAnimatorObjects.add(AnimatorUtils.rotationCloseVertical(view));    fadeOutTextBottomAnimatorList.add(AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(i),mContext.getResources().getDimension(R.dimen.text_right_translation)));  }  AnimatorSet closeToTop=new AnimatorSet();  closeToTop.playSequentially(closeToTopAnimatorObjects);  AnimatorSet fadeOutBottom=new AnimatorSet();  fadeOutBottom.playSequentially(fadeOutTextBottomAnimatorList);  resetSideAnimation(mMenuWrapper.getChildAt(childIndex));  ObjectAnimator closeToRight=AnimatorUtils.rotationCloseToRight(mMenuWrapper.getChildAt(childIndex));  closeToRight.addListener(mChosenItemFinishAnimatorListener);  AnimatorSet fadeOutChosenText=AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(childIndex),mContext.getResources().getDimension(R.dimen.text_right_translation));  AnimatorSet imageFullAnimatorSet=new AnimatorSet();  imageFullAnimatorSet.play(closeToBottom).with(closeToTop);  AnimatorSet textFullAnimatorSet=new AnimatorSet();  textFullAnimatorSet.play(fadeOutTop).with(fadeOutBottom);  if (closeToBottomImageAnimatorList.size() >= closeToTopAnimatorObjects.size()) {    imageFullAnimatorSet.play(closeToBottom).before(closeToRight);    textFullAnimatorSet.play(fadeOutTop).before(fadeOutChosenText);  } else {    imageFullAnimatorSet.play(closeToTop).before(closeToRight);    textFullAnimatorSet.play(fadeOutBottom).before(fadeOutChosenText);  }  AnimatorSet fullAnimatorSet=new AnimatorSet();  fullAnimatorSet.playTogether(imageFullAnimatorSet,textFullAnimatorSet);  fullAnimatorSet.setDuration(mAnimationDurationMilis);  fullAnimatorSet.setInterpolator(new HesitateInterpolator());  fullAnimatorSet.start();}  }
class C{  protected void evaluate(String filePath) throws FormatException {  try {    int latSlash=filePath.lastIndexOf("/");    if (latSlash > 1) {      if (DEBUG) {        Debug.output("Have lat index of " + latSlash);      }      String lonSearch=filePath.substring(0,latSlash);      if (DEBUG) {        Debug.output("Searching for lon index in " + lonSearch);      }      int lonSlash=lonSearch.lastIndexOf("/");      if (lonSlash > 1) {        filename=filePath.substring(latSlash + 1);        String latString=filename.toUpperCase();        if (DEBUG) {          Debug.output("have lat " + latString);        }        int dotIndex=latString.indexOf(".");        if (dotIndex > 0) {          lat=Double.parseDouble(latString.substring(1,dotIndex));          if (latString.charAt(0) == 'S') {            lat*=-1;          }          subDirs=filePath.substring(lonSlash + 1,latSlash);          String dd=filePath.substring(0,lonSlash + 1);          if (dd.length() > 0) {            dtedDir=dd;          }          String lonString=subDirs.toUpperCase();          if (DEBUG) {            Debug.output("have lon " + lonString);          }          lon=Double.parseDouble(lonString.substring(1));          if (lonString.charAt(0) == 'W') {            lon*=-1;          }          level=(int)Integer.parseInt(filePath.substring(filePath.length() - 1));          if (DEBUG) {            Debug.output("have level " + level);          }          return;        }      }    }  } catch (  NumberFormatException nfe) {  }  throw new FormatException("StandardDTEDNameTranslator couldn't convert " + filePath + " to valid parameters");}  }
class C{  private void calculateDiscount(){  m_discountSchema=false;  if (m_C_BPartner_ID == 0 || m_M_Product_ID == 0)   return;  int M_DiscountSchema_ID=0;  BigDecimal FlatDiscount=null;  String sql="SELECT COALESCE(p.M_DiscountSchema_ID,g.M_DiscountSchema_ID)," + " COALESCE(p.PO_DiscountSchema_ID,g.PO_DiscountSchema_ID), p.FlatDiscount " + "FROM C_BPartner p"+ " INNER JOIN C_BP_Group g ON (p.C_BP_Group_ID=g.C_BP_Group_ID) "+ "WHERE p.C_BPartner_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_C_BPartner_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      M_DiscountSchema_ID=rs.getInt(m_isSOTrx ? 1 : 2);      FlatDiscount=rs.getBigDecimal(3);      if (FlatDiscount == null)       FlatDiscount=Env.ZERO;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (M_DiscountSchema_ID == 0)   return;  MDiscountSchema sd=MDiscountSchema.get(Env.getCtx(),M_DiscountSchema_ID);  if (sd.get_ID() == 0)   return;  m_discountSchema=true;  m_PriceStd=sd.calculatePrice(m_Qty,m_PriceStd,m_M_Product_ID,m_M_Product_Category_ID,FlatDiscount);}  }
class C{  private void handle200OK(SipTransactionContext ctx){  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }}  }
class C{  public static boolean isDtoGetter(Method method){  if (method.isAnnotationPresent(DelegateTo.class)) {    return false;  }  if (method.getParameterTypes().length > 0) {    return false;  }  String methodName=method.getName();  return methodName.startsWith("get") || (methodName.startsWith("is") && ((method.getReturnType() == Boolean.class || method.getReturnType() == boolean.class)));}  }
class C{  public static int reverse(int number){  String reverse="";  String n=number + "";  for (int i=n.length() - 1; i >= 0; i--) {    reverse+=n.charAt(i);  }  return Integer.parseInt(reverse);}  }
class C{  public KeyBinding(KeyStroke key,String actionName){  this.key=key;  this.actionName=actionName;}  }
class C{  @Inject DefaultManagementService(WardenService wardenService,MonitorService monitorService,SchedulingService schedulingService,UserService userService,AuditService auditService,HistoryService historyService,AlertService alertService,SystemConfiguration config){  super(config);  requireArgument(wardenService != null,"Warden service cannot be null.");  requireArgument(monitorService != null,"Monitor service cannot be null.");  requireArgument(schedulingService != null,"Scheduling service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  requireArgument(historyService != null,"History service cannot be null.");  requireArgument(alertService != null,"Alert service cannot be null.");  _userService=userService;  _wardenService=wardenService;  _monitorService=monitorService;  _schedulingService=schedulingService;  _auditService=auditService;  _historyService=historyService;  _alertService=alertService;}  }
class C{  public static Control createEmptySpace(Composite parent){  return createEmptySpace(parent,1);}  }
class C{  @Override public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public Long lpush(final byte[] key,final byte[]... strings){  checkIsInMulti();  client.lpush(key,strings);  return client.getIntegerReply();}  }
class C{  public static float checkArgumentInRange(float value,float lower,float upper,String valueName){  if (Float.isNaN(value)) {    throw new IllegalArgumentException(valueName + " must not be NaN");  } else   if (value < lower) {    throw new IllegalArgumentException(String.format("%s is out of range of [%f, %f] (too low)",valueName,lower,upper));  } else   if (value > upper) {    throw new IllegalArgumentException(String.format("%s is out of range of [%f, %f] (too high)",valueName,lower,upper));  }  return value;}  }
class C{  public CopiesSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Copies value < 1 specified");  }}  }
class C{  public Quagliarella(){  this(16);}  }
class C{  protected Vector<ExtensionFileFilter> filterNonCoreSaverFileFilters(Vector<ExtensionFileFilter> list){  Vector<ExtensionFileFilter> result;  int i;  ExtensionFileFilter filter;  AbstractSaver saver;  if (!getCoreConvertersOnly()) {    result=list;  } else {    result=new Vector<ExtensionFileFilter>();    for (i=0; i < list.size(); i++) {      filter=list.get(i);      saver=ConverterUtils.getSaverForExtension(filter.getExtensions()[0]);      if (ConverterUtils.isCoreFileSaver(saver.getClass().getName())) {        result.add(filter);      }    }  }  return result;}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  final void remove(LocalRegion region,DiskEntry entry) throws RegionClearedException {  getDiskStore().remove(region,entry,false,false);}  }
class C{  public static float noise(float x,float y){  float n0, n1, n2;  float s=(x + y) * F2;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  float t=(i + j) * G2;  float X0=i - t;  float Y0=j - t;  float x0=x - X0;  float y0=y - Y0;  int i1, j1;  if (x0 > y0) {    i1=1;    j1=0;  } else {    i1=0;    j1=1;  }  float x1=x0 - i1 + G2;  float y1=y0 - j1 + G2;  float x2=x0 - 1.0f + 2.0f * G2;  float y2=y0 - 1.0f + 2.0f * G2;  int ii=i & 255;  int jj=j & 255;  int gi0=permMod12[ii + perm[jj] & 0xFF] & 0xFF;  int gi1=permMod12[ii + i1 + perm[jj + j1] & 0xFF] & 0xFF;  int gi2=permMod12[ii + 1 + perm[jj + 1] & 0xFF] & 0xFF;  float t0=0.5f - x0 * x0 - y0 * y0;  if (t0 < 0.0f)   n0=0.0f; else {    t0*=t0;    n0=t0 * t0 * dot(grad3[gi0],x0,y0);  }  float t1=0.5f - x1 * x1 - y1 * y1;  if (t1 < 0.0f)   n1=0.0f; else {    t1*=t1;    n1=t1 * t1 * dot(grad3[gi1],x1,y1);  }  float t2=0.5f - x2 * x2 - y2 * y2;  if (t2 < 0.0f)   n2=0.0f; else {    t2*=t2;    n2=t2 * t2 * dot(grad3[gi2],x2,y2);  }  return 70.0f * (n0 + n1 + n2);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void flushInternal() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public static void unpack(HashMap<String,Object> object,String key,Object value){  String[] split=key.split("\\.");  HashMap lobj=object;  for (int cur=0; cur < split.length; cur++) {    String current=split[cur];    if (!(lobj.containsKey(current) && lobj.get(current) instanceof HashMap)) {      lobj.put(current,new HashMap<String,Object>());    }    if (cur == split.length - 1) {      lobj.put(current,value);    } else     lobj=(HashMap)lobj.get(current);  }}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.316 -0500",hash_original_method="6EBE295547BE775A36E1A6AF2206E2F5",hash_generated_method="1B9C28878E8B0179B8E0E1BDD4CDED62") public void drawTextRun(char[] text,int index,int count,int contextIndex,int contextCount,float x,float y,int dir,Paint paint){  if (text == null) {    throw new NullPointerException("text is null");  }  if (paint == null) {    throw new NullPointerException("paint is null");  }  if ((index | count | text.length - index - count) < 0) {    throw new IndexOutOfBoundsException();  }  if (dir != DIRECTION_LTR && dir != DIRECTION_RTL) {    throw new IllegalArgumentException("unknown dir: " + dir);  }  native_drawTextRun(mNativeCanvas,text,index,count,contextIndex,contextCount,x,y,dir,paint.mNativePaint);}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public Instances trainCV(int numFolds,int numFold,Random random){  Instances train=trainCV(numFolds,numFold);  train.randomize(random);  return train;}  }
class C{  public static Double makeDoubleForLocale(String s){  if (WWUtil.isEmpty(s)) {    return null;  }  try {    return NumberFormat.getInstance().parse(s.trim()).doubleValue();  } catch (  ParseException e) {    return null;  }}  }
class C{  public void findAndUndo(Object someObj){  super.findAndUndo(someObj);  if (someObj instanceof TimeBoundsProvider) {    removeTimeBoundsProvider((TimeBoundsProvider)someObj);  }}  }
class C{  @Override public void hide(){  if (localLOGV)   Log.v(TAG,"HIDE: " + this);  mHandler.post(mHide);}  }
class C{  public boolean isRunning(){  return this.serverSocket != null;}  }
class C{  public Builder rawScores(boolean includeRaw){  this.rawScores=includeRaw;  return this;}  }
class C{  public byte[] decrypt(byte[] key) throws Exception {  return decrypt(this.encrypted,key);}  }
class C{  public void busHasStopped(int busID,Coord busStop,Path nextPath){  Iterator<BusTravellerMovement> iterator=travellers.values().iterator();  while (iterator.hasNext()) {    BusTravellerMovement traveller=(BusTravellerMovement)iterator.next();    if (traveller.getLocation() != null) {      if ((traveller.getLocation()).equals(busStop)) {        if (traveller.getState() == BusTravellerMovement.STATE_WAITING_FOR_BUS) {          Path path=new Path(nextPath);          traveller.enterBus(path);        }      }    }  }}  }
class C{  private void insertOrder(String orderId,String productId,PurchaseState state,long purchaseTime,String developerPayload){  ContentValues values=new ContentValues();  values.put(HISTORY_ORDER_ID_COL,orderId);  values.put(HISTORY_PRODUCT_ID_COL,productId);  values.put(HISTORY_STATE_COL,state.ordinal());  values.put(HISTORY_PURCHASE_TIME_COL,purchaseTime);  values.put(HISTORY_DEVELOPER_PAYLOAD_COL,developerPayload);  mDb.replace(PURCHASE_HISTORY_TABLE_NAME,null,values);}  }
class C{  public float smallestAngleBetween(Vector2f otherVector){  float dotProduct=dot(otherVector);  float angle=FastMath.acos(dotProduct);  return angle;}  }
class C{  public static String updateAssociatedAffiliate(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  GenericValue party=null;  java.net.URL ecommercePropertiesUrl=null;  try {    ecommercePropertiesUrl=((ServletContext)request.getAttribute("servletContext")).getResource("/WEB-INF/ecommerce.properties");  } catch (  java.net.MalformedURLException e) {    Debug.logWarning(e,module);  }  String store=UtilProperties.getPropertyValue(ecommercePropertiesUrl,"affiliate.store.customer");  if (store == null || store.toUpperCase().startsWith("N"))   return "success";  String storeOnClick=UtilProperties.getPropertyValue(ecommercePropertiesUrl,"affiliate.store.onclick");  if (storeOnClick == null || storeOnClick.toUpperCase().startsWith("N"))   return "success";  try {    party=userLogin == null ? null : userLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,module);  }  if (party != null) {    String currentAffiliateId=getId(party,"AFFILIATE");    if (UtilValidate.isEmpty(currentAffiliateId)) {      String affiliateId=(String)request.getSession().getAttribute(AFFILIATE_ID);      if (UtilValidate.isNotEmpty(affiliateId)) {        GenericValue partyRelationship=delegator.makeValue("PartyRelationship",UtilMisc.toMap("partyIdFrom",party.getString("partyId"),"partyIdTo",affiliateId,"roleTypeIdFrom","CUSTOMER","roleTypeIdTo","AFFILIATE"));        partyRelationship.set("fromDate",UtilDateTime.nowTimestamp());        partyRelationship.set("partyRelationshipTypeId","SALES_AFFILIATE");        try {          delegator.create(partyRelationship);          if (Debug.infoOn())           Debug.logInfo("Affiliate for user " + party.getString("partyId") + " set to "+ affiliateId,module);        } catch (        GenericEntityException gee) {          Debug.logWarning(gee,module);        }      } else {        Debug.logInfo("No affiliate in session or already associated with user " + userLogin.getString("partyId"),module);        return "success";      }    } else {      request.getSession().setAttribute(AFFILIATE_ID,currentAffiliateId);    }    return "success";  } else {    Debug.logWarning("Cannot associate affiliate since not logged in yet",module);    return "success";  }}  }
class C{  protected Clustering<?> findSingleClustering(Result result){  List<Clustering<? extends Model>> clusterresults=ResultUtil.getClusteringResults(result);  assertTrue("No unique clustering found in result.",clusterresults.size() == 1);  Clustering<? extends Model> clustering=clusterresults.get(0);  return clustering;}  }
class C{  public WaterSpringSource(){  put("class","source");  put("name","water_source");  setMenu("Fill|Use");  setDescription("You see some bubbles in the water. Seems like you found a spring.");  setResistance(0);}  }
class C{  private static void transferLocalCodeNodeComments(final INaviCodeNode node,final INaviCodeNode newNode1,final INaviCodeNode newNode2){  newNode1.getComments().initializeLocalCodeNodeComment(node.getComments().getLocalCodeNodeComment());  for (  final INaviInstruction naviInstruction : node.getInstructions()) {    if (newNode1.hasInstruction(naviInstruction)) {      newNode1.getComments().initializeLocalInstructionComment(naviInstruction,node.getComments().getLocalInstructionComment(naviInstruction));    } else {      newNode2.getComments().initializeLocalInstructionComment(naviInstruction,node.getComments().getLocalInstructionComment(naviInstruction));    }  }}  }
class C{  public Object loadFromFile(final File file) throws XMLException, FileNotFoundException {  if (file == null) {    throw new FileNotFoundException("Cannot load a null file");  } else   if (!file.exists()) {    throw new FileNotFoundException("Cannot load the file from " + file.getAbsolutePath());  }  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(file);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot unmarshal the XML from " + file.getAbsolutePath(),e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot unmarshal the XML from " + file.getAbsolutePath(),e);  }  return readObject;}  }
class C{  static <O extends Entity>Query<EntityHandle<O>> none(Class<O> objectType){  return new None<>(objectType);}  }
class C{  boolean subTree(Node r1,Node r2){  if (r1 == null)   return false;  if (r1.value == r2.value) {    if (matchTree(r1,r2))     return true;  }  return (subTree(r1.left,r2) || subTree(r1.right,r2));}  }
class C{  public void makeReadOnly(){  m_readOnly=true;}  }
class C{  @Override public void error(String format,Object argA,Object argB){  if (logger.isLoggable(Level.SEVERE)) {    FormattingTuple ft=MessageFormatter.format(format,argA,argB);    log(SELF,Level.SEVERE,ft.getMessage(),ft.getThrowable());  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeObject(toString());  s.writeBoolean(valuesCaseSensitive);}  }
class C{  public void write(char[] cbuf,int off,int len) throws java.io.IOException {  return;}  }
class C{  @Override @Deprecated public void shutdown(){  throw new UnsupportedOperationException();}  }
class C{  private void init(){  data.backgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  data.backgroundPaint.setColor(data.tagColor);  data.circlePaint=new Paint(Paint.ANTI_ALIAS_FLAG);  data.circlePaint.setColor(data.tagCircleColor);  data.trianglePaint=new Paint(Paint.ANTI_ALIAS_FLAG);  data.trianglePaint.setColor(data.tagColor);  data.trianglePaint.setStyle(Paint.Style.FILL);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.STATECHART__LOCAL_REACTIONS:    return getLocalReactions();case SGraphPackage.STATECHART__SCOPES:  return getScopes();case SGraphPackage.STATECHART__NAMESPACE:return getNamespace();case SGraphPackage.STATECHART__REGIONS:return getRegions();case SGraphPackage.STATECHART__NAME:return getName();case SGraphPackage.STATECHART__DOCUMENTATION:return getDocumentation();case SGraphPackage.STATECHART__DOMAIN_ID:return getDomainID();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void release(){  this.conn=null;}  }
class C{  public void uninitialized(int pos,int offset){}  }
class C{  public String angleNL(String label,Angle angle){  if (angle == null) {    String msg=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return this.angle(label,angle) + NL;}  }
class C{  public static ConfigurateTranslator instance(){  return instance;}  }
class C{  public boolean addAll(int index,Collection c){  int numNew=c.size();synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    if (numNew == 0)     return false;    int numMoved=len - index;    Object[] newElements;    if (numMoved == 0)     newElements=copyOf(elements,len + numNew); else {      newElements=new Object[len + numNew];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + numNew,numMoved);    }    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      newElements[index++]=e;    }    setArray(newElements);    return true;  }}  }
class C{  protected boolean handleGesture(int descriptor,MouseEvent e){  Debug.message("link","LinkLayer: handleGesture:");  try {    LinkOMGraphicList graphics=getGraphicList();    OMGraphic gesGraphic=null;    if (graphics == null) {      Debug.message("link","LinkLayer: null graphics list.");    } else {      if (e == null) {        graphics.deselect();        return false;      }      gesGraphic=graphics.selectClosest(e.getX(),e.getY(),distanceLimit);    }    String id=null;    if (gesGraphic != null) {      boolean tellServer=graphicGestureReaction(gesGraphic,descriptor,e);      if (!tellServer) {        repaint();        return true;      }      descriptor=LinkUtil.setMask(descriptor,GRAPHIC_ID_MASK);      id=((LinkProperties)gesGraphic.getAttribute(OMGraphic.APP_OBJECT)).getProperty(LPC_GRAPHICID);    } else {      fireRequestInfoLine("");    }    if (!LinkUtil.isMask(getGestureDescriptor(),SERVER_NOTIFICATION_MASK)) {      return false;    }    Point2D llpoint=getProjection().inverse(e.getX(),e.getY());    ClientLink l=linkManager.getLink(false);    if (l == null) {      Debug.message("link","LinkLayer: unable to get link in handleGesture().");      return false;    }synchronized (l) {      if (id != null) {        args.setProperty(LPC_GRAPHICID,id);      } else {        args.remove(LPC_GRAPHICID);      }      LinkActionRequest.write(descriptor,e,(float)llpoint.getY(),(float)llpoint.getX(),args,l);    }    linkManager.finLink();    return false;  } catch (  IOException ioe) {    System.err.println("LinkLayer: IOException contacting server during gesture handling!");    System.err.println(ioe);    linkManager.resetLink();    return false;  }}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  public void installSlide(){  if (slide.method == Slide.SLIDE_DOWNLOAD_METHOD_HTTP && slide.hasFlag(Slide.POST_DOWNLOAD_EXECUTE)) {    downloadSlide();  }}  }
class C{  static Object convertJavaTimeToJavaSql(Object x){  if (x instanceof LocalDate) {    return Date.valueOf((LocalDate)x);  } else   if (x instanceof LocalDateTime) {    return Timestamp.valueOf((LocalDateTime)x);  } else   if (x instanceof LocalTime) {    return Time.valueOf((LocalTime)x);  }  return x;}  }
class C{  synchronized private void outputBufferedChunk(){  if (smallChunks == null || chunkSize == 0) {    return;  }  if (smallChunks.size() == 1) {    outputChunk(smallChunks.get(0));    chunkSize=0;    smallChunks=null;    return;  }  final IBindingSet[] chunk=new IBindingSet[chunkSize];  int destPos=0;  for (  IBindingSet[] e : smallChunks) {    System.arraycopy(e,0,chunk,destPos,e.length);    destPos+=e.length;  }  outputChunk(chunk);  chunkSize=0;  smallChunks=null;}  }
class C{  public ClusterState(Set<String> liveNodes,Map<String,CollectionRef> collectionStates,Integer znodeVersion){  this.znodeVersion=znodeVersion;  this.liveNodes=new HashSet<>(liveNodes.size());  this.liveNodes.addAll(liveNodes);  this.collectionStates=new LinkedHashMap<>(collectionStates);  this.immutableCollectionStates=Collections.unmodifiableMap(collectionStates);}  }
class C{  public boolean hasUsername(){  return hasExtension(GphotoUsername.class);}  }
class C{  public final int compareTo(E o){  return ordinal - ((Enum)o).ordinal;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_2__TRACER_ARGUMENT_1:    return TRACER_ARGUMENT_1_EDEFAULT == null ? tracerArgument_1 != null : !TRACER_ARGUMENT_1_EDEFAULT.equals(tracerArgument_1);}return super.eIsSet(featureID);}  }
class C{  protected void add(Edge edge){  edges.add(edge);  add(edge.getDirEdge(0));  add(edge.getDirEdge(1));}  }
class C{  protected Vec4[] computeBezierControlPoints(DrawContext dc,Vec4 start,Vec4 end,double curvature){  Globe globe=dc.getGlobe();  Vec4 dir=end.subtract3(start);  double length=dir.getLength3();  dir=dir.normalize3();  Vec4 normal=globe.computeSurfaceNormalAtPoint(start).normalize3();  Vec4 perpendicular=dir.cross3(normal).multiply3(length * curvature);  double[] coefficients={0.2,-0.6,0.2,0};  Vec4[] controlPoints=new Vec4[coefficients.length + 2];  controlPoints[0]=start;  controlPoints[controlPoints.length - 1]=end;  double delta=length / (coefficients.length + 1);  for (int i=0; i < coefficients.length; i++) {    controlPoints[i + 1]=start.add3(dir.multiply3((i + 1) * delta)).add3(perpendicular.multiply3(coefficients[i]));  }  return controlPoints;}  }
class C{  private Region<String,String> createServerRegion(String name,DataPolicy dataPolicy,Compressor compressor) throws IOException {  Region<String,String> region=getCache().<String,String>createRegionFactory().setDataPolicy(dataPolicy).setCloningEnabled(true).setCompressor(compressor).create(name);  CacheServer server=getCache().addCacheServer();  server.setPort(0);  server.start();  return region;}  }
class C{  public void solicitardesdereservaconsultaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionConsultasBI service=services.lookupGestionConsultasBI();  String idConsulta=request.getParameter("idconsulta");  try {    service.solicitarEntregaReserva(idConsulta);  } catch (  ConsultaActionNotAllowedException panae) {    ActionErrors errors=ExceptionMapper.getErrorsExcepcion(request,panae);    ErrorsTag.saveErrors(request,errors);  }  setReturnActionFordward(request,verConsultaBeforeCreate(idConsulta));  if (request.getAttribute(ConsultasConstants.LISTA_NO_DISPONIBLES) == null)   setReturnActionFordward(request,verConsultaBeforeCreate(idConsulta)); else   setReturnActionFordward(request,verNoDisponiblesAutorizadas());}  }
class C{  public void endWithNewline(){  custom("endWithNewline",null);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  protected BasicWWTexture initializeTexture(){  Object imageSource=this.getIconImageSource();  if (imageSource instanceof String || imageSource instanceof URL) {    URL imageURL=WorldWind.getDataFileStore().requestFile(imageSource.toString());    if (imageURL != null) {      this.texture=new BasicWWTexture(imageURL,true);    }  } else   if (imageSource != null) {    this.texture=new BasicWWTexture(imageSource,true);    return this.texture;  }  return null;}  }
class C{  public static String toMd5(byte[] b){  StringBuilder sb=new StringBuilder(b.length * 2);  for (  byte a : b) {    sb.append(HEX_DIGITS[(a & 0xf0) >>> 4]);    sb.append(HEX_DIGITS[a & 0x0f]);  }  return sb.toString();}  }
class C{  public static int intHash(String ipString){  int val=0;  String[] strs=ipString.split("[^\\p{XDigit}]");  int len=strs.length;  if (len >= 4) {    val=intVal(strs[0]);    val<<=8;    val|=intVal(strs[1]);    val<<=8;    val|=intVal(strs[2]);    val<<=8;    val|=intVal(strs[3]);  }  return val;}  }
class C{  public UUID verifierNodeId(){  return verifierNodeId;}  }
class C{  public static Term[] ta(String[] s){  Term[] t=new Term[s.length];  for (int i=0; i < s.length; i++) {    t[i]=new Term(FIELD,s[i]);  }  return t;}  }
class C{  protected List<TestEntry> entries(int entries,long term){  List<TestEntry> result=new ArrayList<>();  for (int i=0; i < entries; i++) {    try (TestEntry entry=serverContext.getLog().create(TestEntry.class)){      result.add(entry.setTerm(term));    }   }  return result;}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public static Bitmap blur(Context context,Bitmap bitmap){  int width=Math.round(bitmap.getWidth() / 2);  int height=Math.round(bitmap.getHeight() / 2);  Bitmap bitmapIn=null;  Bitmap bitmapOut=null;  try {    bitmapIn=Bitmap.createScaledBitmap(bitmap,width,height,false);    bitmapOut=Bitmap.createBitmap(bitmapIn);    RenderScript rs=RenderScript.create(context);    ScriptIntrinsicBlur intrinsicBlur=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    Allocation allocationIn=Allocation.createFromBitmap(rs,bitmapIn);    Allocation allocationOut=Allocation.createFromBitmap(rs,bitmapOut);    intrinsicBlur.setRadius(6);    intrinsicBlur.setInput(allocationIn);    intrinsicBlur.forEach(allocationOut);    allocationOut.copyTo(bitmapOut);  } catch (  Exception e) {    Log.e(BitmapUtil.class.getSimpleName(),"Error creating blurred image",e);  } finally {    if (bitmapIn != null && bitmapIn != bitmap && bitmapIn != bitmapOut) {      bitmapIn.recycle();    }  }  return bitmapOut;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void zAdjustTableRowHeightIfNeeded(JTable table){  if (!autoAdjustMinimumTableRowHeight) {    return;  }  if ((table.getRowHeight() < minimumRowHeightInPixels)) {    table.setRowHeight(minimumRowHeightInPixels);  }}  }
class C{  public MessageChannel createMessageChannel(HostPort targetHostPort) throws UnknownHostException {  return new UDPMessageChannel(targetHostPort.getInetAddress(),targetHostPort.getPort(),sipStack,this);}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  public boolean isTeleportOutAllowed(int x,int y){  return teleRules.isOutAllowed(x,y);}  }
class C{  public HBaseMailboxSessionMapperFactory(Configuration conf,UidProvider uidProvider,ModSeqProvider modSeqProvider,MessageId.Factory messageIdFactory){  this.conf=conf;  this.uidProvider=uidProvider;  this.modSeqProvider=modSeqProvider;  this.messageIdFactory=messageIdFactory;  HBaseAdmin hbaseAdmin=null;  try {    hbaseAdmin=new HBaseAdmin(conf);    HTableDescriptor desc=null;    HColumnDescriptor hColumnDescriptor=null;    if (!hbaseAdmin.tableExists(MAILBOXES_TABLE)) {      desc=new HTableDescriptor(MAILBOXES_TABLE);      hColumnDescriptor=new HColumnDescriptor(MAILBOX_CF);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hbaseAdmin.createTable(desc);    }    if (!hbaseAdmin.tableExists(MESSAGES_TABLE)) {      desc=new HTableDescriptor(MESSAGES_TABLE);      hColumnDescriptor=new HColumnDescriptor(MESSAGES_META_CF);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hColumnDescriptor=new HColumnDescriptor(MESSAGE_DATA_HEADERS_CF);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hColumnDescriptor=new HColumnDescriptor(MESSAGE_DATA_BODY_CF);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hbaseAdmin.createTable(desc);    }    if (!hbaseAdmin.tableExists(SUBSCRIPTIONS_TABLE)) {      desc=new HTableDescriptor(SUBSCRIPTIONS_TABLE);      hColumnDescriptor=new HColumnDescriptor(SUBSCRIPTION_CF);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hbaseAdmin.createTable(desc);    }  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    IOUtils.cleanup(null,hbaseAdmin);  }}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public Zoom(AbstractChart chart,boolean in,float rate){  super(chart);  mZoomIn=in;  setZoomRate(rate);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.197 -0500",hash_original_method="214B52CD6256D7D6465E310658C00D6D",hash_generated_method="EEF6520D91E3440168864A15718B79F3") public void startTest(Test test){  final int count=test.countTestCases();synchronized (this) {    fRunTests+=count;  }  for (Enumeration e=cloneListeners().elements(); e.hasMoreElements(); ) {    ((TestListener)e.nextElement()).startTest(test);  }}  }
class C{  public TintEffect(int color){  this.mTint=color;}  }
class C{  public RequestParams(Map<String,String> source){  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  @Override protected boolean isHostOverUtilized(PowerHost host){  PowerHostUtilizationHistory _host=(PowerHostUtilizationHistory)host;  double upperThreshold=0;  try {    upperThreshold=1 - getSafetyParameter() * getHostUtilizationIqr(_host);  } catch (  IllegalArgumentException e) {    return getFallbackVmAllocationPolicy().isHostOverUtilized(host);  }  addHistoryEntry(host,upperThreshold);  double totalRequestedMips=0;  for (  Vm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > upperThreshold;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_period_1: ");  result.append(trace_period_1);  result.append(')');  return result.toString();}  }
class C{  private void seekToInternal(long positionUs){  lastSeekPositionUs=positionUs;  downstreamPositionUs=positionUs;  Arrays.fill(pendingDiscontinuities,true);  chunkSource.seek();  restartFrom(positionUs);}  }
class C{  public static String checkNull(String string1,String string2,String string3,String string4){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   if (string3 != null)   return string3; else   if (string4 != null)   return string4; else   return "";}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  int i=0;  int rows, cols;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double crispness=0;  double z=0;  float progress=0;  int col, row;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z < 0 || z > 1) {            showFeedback("This tool should only be used with " + "membership probability images containing " + "values that range from 0 to 1.");            break;          }          imageTotal+=z;          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          imageTotalDeviation+=(z - imageAverage) * (z - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the image total squared deviation:",(int)progress);    }    image.close();    double denominator;    denominator=Math.pow(imageTotal * (1 - imageAverage),2) + Math.pow(imageAverage,2) * (imageN - imageTotal);    crispness=imageTotalDeviation / denominator;    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr="CRISPNESS INDEX";    retstr=retstr + "\nInput image:\t" + inputHeader;    retstr=retstr + "\nCrispness (C):\t" + df.format(crispness);    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  return "Marginal distribution with " + condDistrib.toString() + " and "+ uncondDistrib.toString();}  }
class C{  public void tickSnapshotEnd(int reqId){  _log.debug("tickSnapshotEnd: " + reqId);}  }
class C{  @Override public int add(E element,int occurrences){  throw new UnsupportedOperationException();}  }
class C{  public void testSocket_ActionsBeforeConnect() throws IOException {  assertFalse(this.channel1.isConnected());  DatagramSocket s=this.channel1.socket();  assertSocketActionBeforeConnect(s);}  }
class C{  public HoltLinearModelBuilder alpha(double alpha){  this.alpha=alpha;  return this;}  }
class C{  private String prepareServiceVisibilityRestriction(boolean currentUserAnonymous){  StringBuffer buffer=new StringBuffer();  buffer.append(" AND EXISTS");  buffer.append("     (SELECT m");  buffer.append("       FROM marketplace AS m");  buffer.append("            LEFT JOIN catalogentry AS ce ON m.tkey = ce.marketplace_tkey");  buffer.append("       WHERE m.marketplaceid = :marketplaceId");  buffer.append("         AND ce.visibleincatalog = true");  buffer.append("         AND (ce.product_tkey = p.tkey OR (p.type = 'CUSTOMER_TEMPLATE' AND ce.product_tkey = p.template_tkey))");  if (currentUserAnonymous) {    buffer.append("     AND ce.anonymousvisible = true");  }  buffer.append("     )");  if (parameterInvisibleSet) {    buffer.append(" AND p.tkey NOT IN (:" + PARAM_INVISIBLESERVICE_KEYSET + ") ");  }  return buffer.toString();}  }
class C{  public HashMap(Map m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAllForCreate(m);}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  protected KMLAbstractStyleSelector(String namespaceURI){  super(namespaceURI);}  }
class C{  static void writeOffset(ZoneOffset offset,DataOutput out) throws IOException {  final int offsetSecs=offset.getTotalSeconds();  int offsetByte=offsetSecs % 900 == 0 ? offsetSecs / 900 : 127;  out.writeByte(offsetByte);  if (offsetByte == 127) {    out.writeInt(offsetSecs);  }}  }
class C{  private void popFrame(){  frameStack.pop();}  }
class C{  private Set<GroupDTO> searchGroups(String tenantName,SearchCriteria criteria,int limit) throws Exception {  Set<Group> groups=getIDMClient().findGroupsByName(tenantName,criteria,limit);  return GroupMapper.getGroupDTOs(groups);}  }
class C{  public static int sizeOf(int type){switch (type) {case MatDataTypes.miINT8:    return miSIZE_INT8;case MatDataTypes.miUINT8:  return miSIZE_UINT8;case MatDataTypes.miINT16:return miSIZE_INT16;case MatDataTypes.miUINT16:return miSIZE_UINT16;case MatDataTypes.miINT32:return miSIZE_INT32;case MatDataTypes.miUINT32:return miSIZE_UINT32;case MatDataTypes.miDOUBLE:return miSIZE_DOUBLE;default :return 1;}}  }
class C{  public TimezoneAssignment(TimeZone timezone,VTimezone component){  String id=ValuedProperty.getValue(component.getTimezoneId());  if (id == null || id.trim().length() == 0) {    throw Messages.INSTANCE.getIllegalArgumentException(14);  }  this.timezone=timezone;  this.component=component;  this.globalId=null;}  }
class C{  public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThanOrEqual(this);  return this.num() <= obj2.num();}  }
class C{  public RequestMessage build(){  return requestMessage;}  }
class C{  public ToStringBuilder append(final double value){  style.append(buffer,null,value);  return this;}  }
class C{  private boolean eqd(final double a,final double b){  return ((int)(a * this.converge_eq_factor)) == ((int)(b * this.converge_eq_factor));}  }
class C{  public String toXML(int indent){  final StringBuffer xml=new StringBuffer();  final String tabs=StringUtils.repeat(" ",indent);  xml.append(tabs + "<Configuracion_Parametros_Sistemas_Externos>");  if (listaParametros != null) {    for (Iterator it=listaParametros.entrySet().iterator(); it.hasNext(); ) {      xml.append(Constants.NEWLINE);      xml.append(tabs + "  " + "<parametro>");      Map.Entry par=(Map.Entry)it.next();      xml.append(Constants.NEWLINE);      xml.append(tabs + "       <id>");      xml.append((String)par.getKey());      xml.append("</id>");      xml.append(Constants.NEWLINE);      xml.append(tabs + "       <valor>");      xml.append((String)par.getValue());      xml.append("</valor>");      xml.append(Constants.NEWLINE);      xml.append(tabs + "  " + "</parametro>");    }  }  xml.append(Constants.NEWLINE);  xml.append(tabs + "</Configuracion_Parametros_Sistemas_Externos>");  xml.append(Constants.NEWLINE);  return xml.toString();}  }
class C{  public PDFFile(ByteBuffer buf) throws IOException {  this(buf,null);}  }
class C{  public boolean hasSubstitutedReturnType(){  return this.returnType != this.originalMethod.returnType;}  }
class C{  LambdaFormBuffer insertParameter(int pos,Name param){  assert (param.isParam());  insertName(pos,param,true);  return this;}  }
class C{  public WordLemma_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_partOfSpeech=jcas.getRequiredFeatureDE(casType,"partOfSpeech","uima.cas.String",featOkTst);  casFeatCode_partOfSpeech=(null == casFeat_partOfSpeech) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_partOfSpeech).getCode();  casFeat_lemmaForm=jcas.getRequiredFeatureDE(casType,"lemmaForm","uima.cas.String",featOkTst);  casFeatCode_lemmaForm=(null == casFeat_lemmaForm) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_lemmaForm).getCode();}  }
class C{  public boolean isVerified(){  Object oo=get_Value(COLUMNNAME_IsVerified);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea){  if (!isDomainGridlinesVisible()) {    return;  }  CategoryAnchor anchor=getDomainGridlinePosition();  RectangleEdge domainAxisEdge=getDomainAxisEdge();  CategoryDataset dataset=getDataset();  if (dataset == null) {    return;  }  CategoryAxis axis=getDomainAxis();  if (axis != null) {    int columnCount=dataset.getColumnCount();    for (int c=0; c < columnCount; c++) {      double xx=axis.getCategoryJava2DCoordinate(anchor,c,columnCount,dataArea,domainAxisEdge);      CategoryItemRenderer renderer1=getRenderer();      if (renderer1 != null) {        renderer1.drawDomainGridline(g2,this,dataArea,xx);      }    }  }}  }
class C{  public void onDestroy(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onDestroy();    }  }}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  private void takeScreenshot(){  getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_POWER));  getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_VOLUME_DOWN));  getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_VOLUME_DOWN));  getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_POWER));}  }
class C{  void sendNetworkPartitionMessage(NetView view){  List<InternalDistributedMember> recipients=new ArrayList<>(view.getMembers());  recipients.remove(localAddress);  NetworkPartitionMessage msg=new NetworkPartitionMessage(recipients);  try {    services.getMessenger().send(msg);  } catch (  RuntimeException e) {    logger.debug("unable to send network partition message - continuing",e);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportLine[").append(get_ID()).append(" - ").append(getName()).append(" - ").append(getDescription()).append(", SeqNo=").append(getSeqNo()).append(", AmountType=").append(getPAAmountType()).append(", PeriodType=").append(getPAPeriodType()).append(" - LineType=").append(getLineType());  if (isLineTypeCalculation())   sb.append(" - Calculation=").append(getCalculationType()).append(" - ").append(getOper_1_ID()).append(" - ").append(getOper_2_ID()); else   sb.append(" - SegmentValue - PostingType=").append(getPostingType()).append(", AmountType=").append(getPAAmountType()).append(", PeriodType=").append(getPAPeriodType());  sb.append("]");  return sb.toString();}  }
class C{  protected void parse(PDFObject obj) throws IOException {  PDFObject nObj=obj.getDictRef("N");  if (nObj == null) {    throw new PDFParseException("Exponent required for function type 2!");  }  setN(nObj.getFloatValue());  PDFObject cZeroObj=obj.getDictRef("C0");  if (cZeroObj != null) {    PDFObject[] cZeroAry=cZeroObj.getArray();    float[] cZero=new float[cZeroAry.length];    for (int i=0; i < cZeroAry.length; i++) {      cZero[i]=cZeroAry[i].getFloatValue();    }    setC0(cZero);  }  PDFObject cOneObj=obj.getDictRef("C1");  if (cOneObj != null) {    PDFObject[] cOneAry=cOneObj.getArray();    float[] cOne=new float[cOneAry.length];    for (int i=0; i < cOneAry.length; i++) {      cOne[i]=cOneAry[i].getFloatValue();    }    setC1(cOne);  }}  }
class C{  private boolean checkCollision(HitBox box1,HitBox box2){  return box2.getMaxXWorld() >= box1.getMinXWorld() && box2.getMaxYWorld() >= box1.getMinYWorld() && box2.getMinXWorld() <= box1.getMaxXWorld() && box2.getMinYWorld() <= box1.getMaxYWorld();}  }
class C{  public void selectAll(){  Document doc=getDocument();  if (doc != null) {    setCaretPosition(0);    moveCaretPosition(doc.getLength());  }}  }
class C{  public static void logInfo(ILog log,String message,Object... args){  message=MessageFormat.format(message,args);  log(log,IStatus.INFO,IStatus.OK,message,null);}  }
class C{  private int calcDesiredMaximumLength(int tabCount){  FontMetrics metrics=getFontMetrics();  int fontHeight=metrics.getHeight();  Insets tabAreaInsets=getTabAreaInsets(fontHeight);  Point corner=new Point(tabAreaRect.x + tabAreaInsets.left,tabAreaRect.y + tabAreaInsets.top);  int offset=orientation.getOrthogonalOffset(corner);  int thickness=(orientation == ControlOrientation.HORIZONTAL) ? maxTabWidth : maxTabHeight;  int position=0;  int maxTabLength=0;  for (int i=0; i < tabCount; i++) {    int length=(orientation == ControlOrientation.HORIZONTAL) ? calculateTabWidth(TOP,i,metrics) : calculateTabHeight(LEFT,i,fontHeight);    rects[i].setBounds(orientation.createBounds(position,offset,length,thickness));    maxTabLength=Math.max(maxTabLength,length);    position+=length;  }  if (orientation == ControlOrientation.HORIZONTAL) {    maxTabWidth=maxTabLength;  } else {    maxTabHeight=maxTabLength;  }  return position;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.113 -0500",hash_original_method="CE1956BD7F5F63F118F54E2B606E5A97",hash_generated_method="7A674EE026F6110E466C3758BCF5001A") public synchronized StringBuffer insert(int index,char ch){  insert0(index,ch);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.765 -0400",hash_original_method="5F192DCF259BEB4C8D9ED2CF41E6957A",hash_generated_method="E5B0F7A0DBFAB9F5E2564264E3CCCB83") public PrefixFileFilter(String[] prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The array of prefixes must not be null");  }  this.prefixes=new String[prefixes.length];  System.arraycopy(prefixes,0,this.prefixes,0,prefixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private void ungroupComponents(Collection<IDIYComponent<?>> components){  Iterator<Set<IDIYComponent<?>>> groupIterator=currentProject.getGroups().iterator();  while (groupIterator.hasNext()) {    Set<IDIYComponent<?>> group=groupIterator.next();    group.removeAll(components);    if (group.isEmpty()) {      groupIterator.remove();    }  }}  }
class C{  public boolean hasDocValues(){  return hasDocValues;}  }
class C{  public synchronized int indexOf(IAudioProvider provider){  return providers.indexOf(provider);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.201 -0400",hash_original_method="913EB251B42955AE0E1F4AA1A22D7BEC",hash_generated_method="77279E905A13E5C82C8FD18634D0822C") public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public boolean offer(E o){  if (o == null) {    throw new NullPointerException("o == null");  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  private double computeOverallProbability(SortedSet<TokenProbabilityStrength> tokenProbabilityStrengths,Map<String,Double> workCorpus){  double p=1.0;  double np=1.0;  double tempStrength=0.5;  int count=MAX_INTERESTING_TOKENS;  Iterator<TokenProbabilityStrength> iterator=tokenProbabilityStrengths.iterator();  while ((iterator.hasNext()) && (count-- > 0 || tempStrength >= INTERESTINGNESS_THRESHOLD)) {    TokenProbabilityStrength tps=iterator.next();    tempStrength=tps.strength;    double theDoubleValue=DEFAULT_TOKEN_PROBABILITY;    Double theDoubleObject=workCorpus.get(tps.token);    if (theDoubleObject != null) {      theDoubleValue=theDoubleObject;    }    p*=theDoubleValue;    np*=(1.0 - theDoubleValue);  }  return (p / (p + np));}  }
class C{  static void closeCompositionArea(){  if (compositionArea != null) {synchronized (compositionAreaLock) {      compositionAreaOwner=null;      compositionArea.setHandlerInfo(null,null);      compositionArea.setText(null,null);    }  }}  }
class C{  public void init() throws ServletException {  super.init();  bookUseCase=new BookUseCase();  factory=TransformerFactory.newInstance();}  }
class C{  private void initView(){  View.inflate(getContext(),R.layout.vector_pending_call_view,this);  mCallDescriptionTextView=(TextView)findViewById(R.id.pending_call_room_name_textview);  mCallDescriptionTextView.setVisibility(View.GONE);  mCallStatusTextView=(TextView)findViewById(R.id.pending_call_status_textview);  mCallStatusTextView.setVisibility(View.GONE);  mUIHandler=new Handler(Looper.getMainLooper());}  }
class C{  public static double convertHHMMInteger(int hhmm){  int h=hhmm / 100;  int m=hhmm - (h * 100);  double seconds=Math.abs(h) * 3600 + m * 60;  return seconds;}  }
class C{  public boolean confirmUpdateChanges(Component parent,AddOnChangesResult changes){  return confirmChanges(parent,changes,true);}  }
class C{  public boolean isImAlwaysOn(){  return readBoolean(RcsSettingsData.IM_CAPABILITY_ALWAYS_ON);}  }
class C{  public ProxyDistribution(){}  }
class C{  public StatementPattern(Var subject,Var predicate,Var object){  this(Scope.DEFAULT_CONTEXTS,subject,predicate,object);}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final GraphPatternGroup<? extends IGroupMemberNode> group,final PropertyPathInfo ppInfo,final ZeroLengthPathNode zlpNode,final PropertyPathNode ppNode){  zlpNode.setLeft(ppInfo.s);  zlpNode.setRight(ppInfo.o);  group.addArg(getPositionOfNodeInGroup(ppNode,group),zlpNode);}  }
class C{  public java.sql.ResultSet executeQuery(String sql) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    MySQLConnection locallyScopedConn=this.connection;    this.retrieveGeneratedKeys=false;    resetCancelledState();    checkNullOrEmptyQuery(sql);    setupStreamingTimeout(locallyScopedConn);    if (this.doEscapeProcessing) {      Object escapedSqlResult=EscapeProcessor.escapeSQL(sql,locallyScopedConn.serverSupportsConvertFn(),this.connection);      if (escapedSqlResult instanceof String) {        sql=(String)escapedSqlResult;      } else {        sql=((EscapeProcessorResult)escapedSqlResult).escapedSql;      }    }    char firstStatementChar=StringUtils.firstAlphaCharUc(sql,findStartOfStatement(sql));    if (sql.charAt(0) == '/') {      if (sql.startsWith(PING_MARKER)) {        doPingInstead();        return this.results;      }    }    checkForDml(sql,firstStatementChar);    implicitlyCloseAllOpenResults();    CachedResultSetMetaData cachedMetaData=null;    if (useServerFetch()) {      this.results=createResultSetUsingServerFetch(sql);      return this.results;    }    CancelTask timeoutTask=null;    String oldCatalog=null;    try {      if (locallyScopedConn.getEnableQueryTimeouts() && this.timeoutInMillis != 0 && locallyScopedConn.versionMeetsMinimum(5,0,0)) {        timeoutTask=new CancelTask(this);        locallyScopedConn.getCancelTimer().schedule(timeoutTask,this.timeoutInMillis);      }      if (!locallyScopedConn.getCatalog().equals(this.currentCatalog)) {        oldCatalog=locallyScopedConn.getCatalog();        locallyScopedConn.setCatalog(this.currentCatalog);      }      Field[] cachedFields=null;      if (locallyScopedConn.getCacheResultSetMetadata()) {        cachedMetaData=locallyScopedConn.getCachedMetaData(sql);        if (cachedMetaData != null) {          cachedFields=cachedMetaData.fields;        }      }      locallyScopedConn.setSessionMaxRows(this.maxRows);      statementBegins();      this.results=locallyScopedConn.execSQL(this,sql,this.maxRows,null,this.resultSetType,this.resultSetConcurrency,createStreamingResultSet(),this.currentCatalog,cachedFields);      if (timeoutTask != null) {        if (timeoutTask.caughtWhileCancelling != null) {          throw timeoutTask.caughtWhileCancelling;        }        timeoutTask.cancel();        locallyScopedConn.getCancelTimer().purge();        timeoutTask=null;      }synchronized (this.cancelTimeoutMutex) {        if (this.wasCancelled) {          SQLException cause=null;          if (this.wasCancelledByTimeout) {            cause=new MySQLTimeoutException();          } else {            cause=new MySQLStatementCancelledException();          }          resetCancelledState();          throw cause;        }      }    }  finally {      this.statementExecuting.set(false);      if (timeoutTask != null) {        timeoutTask.cancel();        locallyScopedConn.getCancelTimer().purge();      }      if (oldCatalog != null) {        locallyScopedConn.setCatalog(oldCatalog);      }    }    this.lastInsertId=this.results.getUpdateID();    if (cachedMetaData != null) {      locallyScopedConn.initializeResultsMetadataFromCache(sql,cachedMetaData,this.results);    } else {      if (this.connection.getCacheResultSetMetadata()) {        locallyScopedConn.initializeResultsMetadataFromCache(sql,null,this.results);      }    }    return this.results;  }}  }
class C{  public boolean validate(Class type,InputNode source) throws Exception {  return validate(type,source,true);}  }
class C{  public boolean isInterfaceConfigured(){  return mImsProxyAddr != null;}  }
class C{  public void send(){  long start=conn.bytesSent();  Packet packet=new Packet(Packet.COMMAND_SENDING_BOARD,board);  conn.send(packet);  System.out.print("Bytes sent: ");  System.out.print(conn.bytesSent() - start);  System.out.print(", total sent: ");  System.out.println(conn.bytesSent());}  }
class C{  public boolean insert(int val){  Integer v=val;  boolean flag=list.contains(v);  list.add(v);  return !flag;}  }
class C{  public DateEnd(Date endDate,boolean hasTime){  super(endDate,hasTime);}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(tuple,null);}  }
class C{  public void testHash32ByteArrayIntInt(){  Hasher hasher=new Murmur2Hasher(0x71b4954d);  for (int i=0; i < input.length; i++) {    int hash=hasher.hash32(input[i]);    if (hash != results32_seed[i])     fail(String.format("Unexpected hash32 result for example %d: 0x%08x instead of 0x%08x",i,hash,results32_seed[i]));  }}  }
class C{  public JpaRepositoryState(String machineId,JpaRepositoryState parentState,String state,boolean initial){  this(machineId,parentState,state,initial,null,null,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    return ownedMembersRaw != null && !ownedMembersRaw.isEmpty();case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:  return typeVars != null && !typeVars.isEmpty();case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY:return typingStrategy != TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override void releaseReadLock(){  this.lock.unlock();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  retval=titleAttr.replaceChild(textNode,firstChild);  value=titleAttr.getValue();  assertEquals("attrValue","terday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","terday",value);}  }
class C{  public void store(final String name,final IOObject object){  this.storageMap.put(name,object);}  }
class C{  public Sequence(int N){  x=new double[N];}  }
class C{  public ItemTool(String toolClass,Set<Block> effective){  setMaxStackSize(1);  setHasSubtypes(true);  this.effectiveBlocks=effective;  this.toolClass=toolClass;}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder id(String id){  this.id=id;  return this;}  }
class C{  public static void spooky4(final BitVector bv,final long seed,final long[] tuple){  long h0, h1, h2, h3;  h0=seed;  h1=seed;  h2=ARBITRARY_BITS;  h3=ARBITRARY_BITS;  final int length=(int)bv.length();  int remaining=length;  int pos=0;  while (remaining >= Long.SIZE * 4) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    h2=Long.rotateLeft(h2,50);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,52);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,30);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,41);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,54);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,48);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,38);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,37);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,62);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,34);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,5);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,36);    h1+=h2;    h3^=h1;    h0+=bv.getLong(pos + 2 * Long.SIZE,pos + 3 * Long.SIZE);    h1+=bv.getLong(pos + 3 * Long.SIZE,pos + 4 * Long.SIZE);    remaining-=4 * Long.SIZE;    pos+=4 * Long.SIZE;  }  if (remaining >= Long.SIZE * 2) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    remaining-=2 * Long.SIZE;    pos+=2 * Long.SIZE;    h2=Long.rotateLeft(h2,50);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,52);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,30);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,41);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,54);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,48);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,38);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,37);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,62);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,34);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,5);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,36);    h1+=h2;    h3^=h1;  }  if (remaining > Long.SIZE) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,length);  } else   if (remaining > 0) {    h2+=bv.getLong(pos,length);  } else {    h2+=ARBITRARY_BITS;    h3+=ARBITRARY_BITS;  }  h0+=length;  h3^=h2;  h2=Long.rotateLeft(h2,15);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,52);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,26);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,51);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,28);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,9);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,47);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,54);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,32);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,25);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,63);  h1+=h0;switch (tuple.length) {case 4:    tuple[3]=h3;case 3:  tuple[2]=h2;case 2:tuple[1]=h1;case 1:tuple[0]=h0;}}  }
class C{  public String buildTaskWorkflowVariableName(String activitiId,String variableName){  return activitiId + TASK_VARIABLE_MARKER + variableName;}  }
class C{  public DataSet simulateData(int sampleSize,long seed,boolean latentDataSaved){  RandomUtil random=RandomUtil.getInstance();  long _seed=random.getSeed();  random.setSeed(seed);  DataSet dataSet=simulateData(sampleSize,latentDataSaved);  random.revertSeed(_seed);  return dataSet;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.819 -0500",hash_original_method="A455FCC07C61C67A7FE9747C69B01A43",hash_generated_method="97E0A65B85BCC2FE20B9CD43D8DBD87A") public float measureText(String text,int start,int end){  if (text == null) {    throw new IllegalArgumentException("text cannot be null");  }  if ((start | end | (end - start)| (text.length() - end)) < 0) {    throw new IndexOutOfBoundsException();  }  if (text.length() == 0 || start == end) {    return 0f;  }  if (!mHasCompatScaling) {    return native_measureText(text,start,end);  }  final float oldSize=getTextSize();  setTextSize(oldSize * mCompatScaling);  float w=native_measureText(text,start,end);  setTextSize(oldSize);  return w * mInvCompatScaling;}  }
class C{  public void addGeneratedSequence(Sequence sequence){  gralComponents.add(sequence);}  }
class C{  private String convertLessThanOneThousand(int number,int w){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100][w];    number/=100;  } else {    soFar=numNames[number % 10][w];    number/=10;    if (soFar.compareTo("") == 0) {      soFar=tensNames[number % 10];    } else {      soFar=tensNames[number % 10] + concat + soFar;    }    number/=10;  }  if (number == 0)   return soFar;  return hundredNames[number] + soFar;}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryMetadataFileReader) {    dictionaryMetadataFileReader.close();    dictionaryMetadataFileReader=null;  }}  }
class C{  private void loading(Canvas canvas){  Point currentPoint=triPoints.get(0);  Point nextPoint;  for (int i=0; i < TRI_POINT_NUMBER; i++) {    Point p=triPoints.get(i);    p.x=(x - 3 * radius / 4) + triStep * i;    p.y=y + calculateTri(TIME_STEP * i,currentTime);  }  for (int i=1; i < TRI_POINT_NUMBER; i++) {    nextPoint=triPoints.get(i);    triPath.reset();    triPath.moveTo(currentPoint.x,currentPoint.y);    triPath.lineTo(nextPoint.x,nextPoint.y);    canvas.drawCircle(nextPoint.x,nextPoint.y,smallRadius,smallPaint);    canvas.drawPath(triPath,triPaint);    currentPoint=nextPoint;  }  textPath.moveTo(x - textSize,y + textY);  textPath.lineTo(x + textSize,y + textY);  canvas.drawTextOnPath((int)progress + "%",textPath,0,0,textPaint);  currentTime=(int)(currentTime + TIME_STEP);  float sweepAngle=(progress / PROGRESS * ANGLE);  canvas.drawArc(oval,270,0 - sweepAngle,false,loadingPaint);  postInvalidateDelayed(DURATION);}  }
class C{  public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  public Map buildMap(Map other){  return new HashMap(other);}  }
class C{  public JCExpression This(Type t){  return Ident(new VarSymbol(FINAL,names._this,t,t.tsym));}  }
class C{  public TennisBall(int ttl){  this(ttl,true);}  }
