class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void markRemoteFilesNonCached(Collection<Integer> rfIds){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    ContentValues cv=new ContentValues(1);    cv.put("cached",0);    for (    String ids : StringSupport.convertListToString(rfIds,1000)) {      db.update(TABLE_REMOTEFILES,cv,"id in (" + ids + ")",null);    }    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testIntegerDivide() throws Exception {  assertScript("assert 4.intdiv(3) == 1");}  }
class C{  public void clearCredentialsProvider(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  private QueryTask buildAvailabilityZoneQuery(final State state){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(AvailabilityZoneService.State.class));  QueryTask.Query stateClause=new QueryTask.Query().setTermPropertyName(AvailabilityZoneService.State.FIELD_NAME_STATE).setTermMatchValue(AVAILABILITY_ZONE_STATE_PENDING_DELETE);  Long durationInMicros=Utils.getNowMicrosUtc() - state.availabilityZoneExpirationAgeInMicros;  QueryTask.NumericRange range=QueryTask.NumericRange.createLessThanRange(durationInMicros);  range.precisionStep=Integer.MAX_VALUE;  QueryTask.Query timeClause=new QueryTask.Query().setTermPropertyName(DOCUMENT_UPDATE_TIME_MICROS).setNumericRange(range);  QueryTask.QuerySpecification spec=new QueryTask.QuerySpecification();  spec.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  spec.query.addBooleanClause(kindClause).addBooleanClause(timeClause).addBooleanClause(stateClause);  return QueryTask.create(spec).setDirect(true);}  }
class C{  void extract(InputStream in,String files[]) throws IOException {  ZipInputStream zis=new ZipInputStream(in);  ZipEntry e;  Set<ZipEntry> dirs=newDirSet();  while ((e=zis.getNextEntry()) != null) {    if (files == null) {      dirs.add(extractFile(zis,e));    } else {      String name=e.getName();      for (      String file : files) {        if (name.startsWith(file)) {          dirs.add(extractFile(zis,e));          break;        }      }    }  }  updateLastModifiedTime(dirs);}  }
class C{  @Override public Object take() throws CacheException, InterruptedException {  throw new UnsupportedOperationException();}  }
class C{  public MalformedCookieException(){  super();}  }
class C{  public ModeledUser(){}  }
class C{  public HeadPhaseBuilder<S> findFirst(){  pipelineBuilder().appendFindFirst(null,elementClass,null,null,null);  return new HeadPhaseBuilder<>(pipelineBuilder());}  }
class C{  private void loadGeneralConf(){  logger.info("Loading configuration file " + GENERAL_CONF);  _generalConf=new Configuration();  _generalConf.addResource(this.getClass().getClassLoader().getResourceAsStream(GENERAL_CONF));}  }
class C{  public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public void updateDataset(final ArrayList<Conversation.ConversationElement> list,long id){  Log.d(TAG,"updateDataset, list size: " + list.size() + " - mId: "+ id);  if (list.size() == mTexts.size()) {    if (id != 0) {      notifyDataSetChanged();    }    return;  }  int lastPos=mTexts.size();  int newItems=list.size() - lastPos;  if (lastPos == 0 || newItems < 0) {    mTexts.clear();    mTexts.addAll(list);    notifyDataSetChanged();  } else {    for (int i=lastPos; i < list.size(); i++)     mTexts.add(list.get(i));    notifyItemRangeInserted(lastPos,newItems);  }}  }
class C{  public int count(){  return n;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.101 -0500",hash_original_method="5A46FF78EB6898EF0CABAC45E530C34E",hash_generated_method="94A775708A149FBFAB5E574EC9E989E8") private boolean readExternalId(boolean requireSystemName,boolean assignFields) throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == 'S') {    read(SYSTEM);  } else   if (c == 'P') {    read(PUBLIC);    skip();    if (assignFields) {      publicId=readQuotedId(true);    } else {      readQuotedId(false);    }  } else {    return false;  }  skip();  if (!requireSystemName) {    int delimiter=peekCharacter();    if (delimiter != '"' && delimiter != '\'') {      return true;    }  }  if (assignFields) {    systemId=readQuotedId(true);  } else {    readQuotedId(false);  }  return true;}  }
class C{  public void clear(){  mNodes.clear();  mReason=null;}  }
class C{  public void test_doAs_01(){  Subject subj=new Subject();  PrivilegedAction<Object> pa=new myPrivilegedAction();  PrivilegedAction<Object> paNull=null;  try {    Object obj=Subject.doAs(null,pa);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAs(subj,pa);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAs(subj,paNull);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static void showTermsAndConditions(Context context){  final Intent intent=new Intent(context,TermsAndConditionsRequest.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);  intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);  context.startActivity(intent);}  }
class C{  public void entering(String sourceClass,String sourceMethod){  logp(Level.FINER,sourceClass,sourceMethod,"ENTRY");}  }
class C{  static void close(String[] args){  Bootstrap.stop();}  }
class C{  static List<File> load(Context context,ApplicationInfo applicationInfo,File dexDir,boolean forceReload) throws IOException {  Log.i(TAG,"PatchDexExtractor.load(" + applicationInfo.sourceDir + ", "+ forceReload+ ")");  final File sourceApk=new File(applicationInfo.sourceDir);  long currentCrc=getZipCrc(sourceApk);  List<File> files;  if (!forceReload && !isModified(context,sourceApk,currentCrc)) {    try {      files=loadExistingExtractions(context,sourceApk,dexDir);    } catch (    IOException ioe) {      Log.w(TAG,"Failed to reload existing extracted secondary dex files," + " falling back to fresh extraction",ioe);      files=performExtractions(sourceApk,dexDir);      putStoredApkInfo(context,getTimeStamp(sourceApk),currentCrc,files.size() + 1);    }  } else {    Log.i(TAG,"Detected that extraction must be performed.");    files=performExtractions(sourceApk,dexDir);    putStoredApkInfo(context,getTimeStamp(sourceApk),currentCrc,files.size() + 1);  }  Log.i(TAG,"load found " + files.size() + " secondary dex files");  return files;}  }
class C{  protected void doLogOobResponseOutbound(String serviceName,int correlationId,Message oobResponse){  if (rpcLogger != null) {    rpcLogger.logOobResponse(serverInfo,clientInfo,oobResponse,serviceName,correlationId,System.currentTimeMillis());  }}  }
class C{  public static CCMenuItemSprite item(CCNode normalSprite,CCNode selectedSprite){  return new CCMenuItemSprite(normalSprite,selectedSprite,null,null,null);}  }
class C{  public UF3(){  this(30);}  }
class C{  public void enable(Feature f){  _featureFlags|=f.getMask();}  }
class C{  public int XToTileX(int x){  return XToTileX(x,getTileGridXOffset(),getTileWidth());}  }
class C{  public void sendPacket(XBeePacket packet) throws IOException {  this.sendPacket(packet.getByteArray());}  }
class C{  public Context createContext(String path,String docBase){  return new Context(invoke(embeddedCreateContext,path,new File(docBase).getAbsolutePath()));}  }
class C{  public void encode(DerOutputStream outStrm) throws CRLException {  try {    if (revokedCert == null) {      DerOutputStream tmp=new DerOutputStream();      serialNumber.encode(tmp);      if (revocationDate.getTime() < YR_2050) {        tmp.putUTCTime(revocationDate);      } else {        tmp.putGeneralizedTime(revocationDate);      }      if (extensions != null)       extensions.encode(tmp,isExplicit);      DerOutputStream seq=new DerOutputStream();      seq.write(DerValue.tag_Sequence,tmp);      revokedCert=seq.toByteArray();    }    outStrm.write(revokedCert);  } catch (  IOException e) {    throw new CRLException("Encoding error: " + e.toString());  }}  }
class C{  private static void testClass(Class<?> aClass,boolean isSelfTest) throws Exception {  List<Method> methods=Arrays.asList(aClass.getDeclaredMethods());  for (  Method m : methods) {    if (m.isSynthetic()) {      continue;    }    int modifiers=m.getModifiers();    if (Modifier.isPublic(modifiers) && !Modifier.isSynchronized(modifiers)) {      try {        testMethod(aClass,m);      } catch (      TestFailedException e) {        if (isSelfTest) {          String methodName=e.getMethod().getName();switch (methodName) {case "should_pass":            throw new RuntimeException("Test failed: self-test failed.  The 'should_pass' method did not pass the synchronization test. Check the test code.");case "should_fail":          break;default :        throw new RuntimeException("Test failed: something is amiss with the test. A TestFailedException was generated on a call to " + methodName + " which we didn't expect to test in the first place.");    }  } else {    throw new RuntimeException("Test failed: the method " + e.getMethod().toString() + " should be synchronized, but isn't.");  }}}}}  }
class C{  void addInstanceField(FieldObj field){  instanceFields.put(field.name,field);}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.ENUM__ENUMS:    getEnums().clear();  getEnums().addAll((Collection<? extends EnumLiteral>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static LazyReact parallelBuilder(final int parallelism){  return LazyReact.builder().executor(Executors.newFixedThreadPool(parallelism)).retrier(new RetryBuilder().parallelism(parallelism)).build();}  }
class C{  public IndexOutput createVerifyingOutput(String fileName,final StoreFileMetaData metadata,final IOContext context) throws IOException {  IndexOutput output=directory().createOutput(fileName,context);  boolean success=false;  try {    if (metadata.hasLegacyChecksum()) {      logger.debug("create legacy adler32 output for {}",fileName);      output=new LegacyVerification.Adler32VerifyingIndexOutput(output,metadata.checksum(),metadata.length());    } else     if (metadata.checksum() == null) {      logger.debug("create legacy length-only output for {}",fileName);      output=new LegacyVerification.LengthVerifyingIndexOutput(output,metadata.length());    } else {      assert metadata.writtenBy() != null;      assert metadata.writtenBy().onOrAfter(Version.LUCENE_4_8);      output=new LuceneVerifyingIndexOutput(metadata,output);    }    success=true;  }  finally {    if (success == false) {      IOUtils.closeWhileHandlingException(output);    }  }  return output;}  }
class C{  public NotificationChain basicSetDefault(Expression newDefault,NotificationChain msgs){  Expression oldDefault=default_;  default_=newDefault;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.ARGUMENT_DEFINITION__DEFAULT,oldDefault,newDefault);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public TrieST(){}  }
class C{  public List<ITLRestRep> listExports(URI id){  ITLRestRepList response=client.get(ITLRestRepList.class,getIdUrl() + "/exports",id);  return defaultList(response.getExportList());}  }
class C{  PolicyEntry(CodeSource cs,List<PolicyParser.PrincipalEntry> principals){  this.codesource=cs;  this.permissions=new ArrayList<Permission>();  this.principals=principals;}  }
class C{  public void cancel(){  request.cancel();}  }
class C{  public static void main(String[] args){  try {    ProgressDialog dialog=new ProgressDialog();    dialog.setVisible(true);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:55.701 -0400",hash_original_method="1E38E3E53E7B1BE68FC8A7D4B4A93B2F",hash_generated_method="751B87B1A58A0F43E560EF564530B06E") public Iterator<Object> iterator(){  return mAttributes.values().iterator();}  }
class C{  public StatusBarFX(final Color newColor){  masterColor=newColor;  initialiseStatus("");}  }
class C{  public static OCAType newInstance(String value){  final OCAType returnInstance=new OCAType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public int read() throws IOException {  long next=pointer + 1;  long pos=readUntil(next);  if (pos >= next) {    cache.seek(pointer++);    return cache.read();  } else {    return -1;  }}  }
class C{  private void startRecording(){  uploader.prepare();  STTIAudioConsumer audioConsumer=new STTIAudioConsumer(uploader);  audioCaptureThread=new AudioCaptureThread(SpeechConfiguration.SAMPLE_RATE,audioConsumer);  audioCaptureThread.start();}  }
class C{  public static boolean isLeftTurn(IPoint p1,IPoint p2,IPoint p3){  return (p2.getX() - p1.getX()) * (p3.getY() - p1.getY()) - (p2.getY() - p1.getY()) * (p3.getX() - p1.getX()) > 0;}  }
class C{  public MqttSecurityException(int reasonCode,Throwable cause){  super(reasonCode,cause);}  }
class C{  private void localServerInternal() throws Exception {  int messages=MSGS;  Ignite ignite=grid(SERVER_NODE_IDX);  LATCH=new CountDownLatch(messages);  ClusterGroup grp=grid(SERVER_NODE_IDX).cluster().forLocal();  UUID opId=registerListener(grp);  try {    for (int i=0; i < messages; i++)     sendMessage(ignite,grp,value(i));    assertTrue(LATCH.await(10,TimeUnit.SECONDS));  }  finally {    ignite.message().stopRemoteListen(opId);  }}  }
class C{  public FieldAnalysisRequest addFieldType(String fieldTypeName){  if (fieldTypes == null) {    fieldTypes=new LinkedList<>();  }  fieldTypes.add(fieldTypeName);  return this;}  }
class C{  public static Geo center(Geo[] poly){  return center(poly,new Geo());}  }
class C{  @Override public void onDetach(){synchronized (mThread) {    mProgressBar=null;    mReady=false;    mThread.notify();  }  super.onDetach();}  }
class C{  public ExponentialGrowthModel(Parameter N0Parameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  this(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL,N0Parameter,growthRateParameter,units,usingGrowthRate);}  }
class C{  public static void capturePhoto(ActionListener response){  Display.getInstance().capturePhoto(response);}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  public Jobs subset(String[] jobIds){  final List<Job> subsetResult=new ArrayList<Job>();  for (  String jobId : jobIds) {    Job job=jobMap.get(jobId);    if (job.isAnalysis()) {      subsetResult.add(job);    }  }  return new Jobs(subsetResult);}  }
class C{  public ToneAnalyzer(String versionDate,String username,String password){  this(versionDate);  setUsernameAndPassword(username,password);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;default :return false;}}  }
class C{  static public String quoteString(String value,boolean force){  StringBuffer sb=new StringBuffer();  int len=value.length();  boolean didEscape=false;  for (int i=0; i < len; i++) {    char ch=value.charAt(i);    if (isHttpCtlChar(ch) || isHttpSeparatorChar(ch)) {      sb.append('\\');      didEscape=true;    }    sb.append(ch);  }  return (didEscape || force) ? "\"" + sb.toString() + "\"" : sb.toString();}  }
class C{  public EaseIn(){}  }
class C{  @Override public Boolean sismember(final String key,final String member){  checkIsInMultiOrPipeline();  client.sismember(key,member);  return client.getIntegerReply() == 1;}  }
class C{  public CPluginDialog(final JFrame parent,final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final ConfigManager configFile){  super(parent,"Plugins",true);  Preconditions.checkNotNull(registry,"IE02058: Plugin Registry can't be null");  Preconditions.checkNotNull(configFile,"IE02059: Config file can't be null");  new CDialogEscaper(this);  setLayout(new BorderLayout());  final JPanel mainPanel=new JPanel(new BorderLayout());  final JPanel sortPanel=new JPanel(new GridBagLayout());  final JButton upButton=new JButton(CActionProxy.proxy(new MoveUpAction()));  final JButton downButton=new JButton(CActionProxy.proxy(new MoveDownAction()));  final InternalListener<T> listener=new InternalListener<T>(configFile);  final GridBagConstraints gbConstraints=new GridBagConstraints();  gbConstraints.insets=new Insets(3,3,3,3);  gbConstraints.gridx=0;  gbConstraints.gridy=0;  gbConstraints.weighty=1.0;  gbConstraints.weightx=1.0;  gbConstraints.gridheight=1;  gbConstraints.gridwidth=1;  sortPanel.add(upButton,gbConstraints);  gbConstraints.gridy=1;  sortPanel.add(downButton,gbConstraints);  final JPanel leftPanel=new JPanel(new GridBagLayout());  final JPanel rightPanel=new JPanel(new BorderLayout());  pluginDescriptionTextArea=new JTextArea();  pluginDescriptionTextArea.setEditable(false);  pluginDescriptionTextArea.setLineWrap(true);  pluginDescriptionTextArea.setWrapStyleWord(true);  rightPanel.add(new JScrollPane(pluginDescriptionTextArea),BorderLayout.CENTER);  pluginList=new PluginListBox<T>(registry,configFile);  pluginList.addListSelectionListener(listener);  final GridBagConstraints gbConstraints2=new GridBagConstraints();  gbConstraints2.insets=new Insets(3,3,3,3);  gbConstraints2.gridx=0;  gbConstraints2.gridy=0;  gbConstraints2.gridheight=1;  gbConstraints2.gridwidth=1;  gbConstraints2.anchor=GridBagConstraints.NORTH;  leftPanel.add(sortPanel,gbConstraints2);  gbConstraints2.weighty=1.0;  gbConstraints2.weightx=1.0;  gbConstraints2.insets=new Insets(3,3,3,3);  gbConstraints2.fill=GridBagConstraints.BOTH;  gbConstraints2.gridx=1;  gbConstraints2.gridy=0;  gbConstraints2.gridheight=1;  gbConstraints2.gridwidth=2;  leftPanel.add(new JScrollPane(pluginList),gbConstraints2);  final JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,leftPanel,rightPanel);  mainPanel.add(splitPane);  final GridBagConstraints gbConstraints3=new GridBagConstraints();  gbConstraints3.insets=new Insets(3,3,3,3);  gbConstraints3.gridx=1;  gbConstraints3.gridy=0;  gbConstraints3.ipadx=400;  gbConstraints3.ipady=200;  gbConstraints3.gridheight=1;  gbConstraints3.gridwidth=1;  gbConstraints3.anchor=GridBagConstraints.NORTH;  gbConstraints3.fill=GridBagConstraints.BOTH;  add(mainPanel,BorderLayout.CENTER);  final CPanelTwoButtons panel=new CPanelTwoButtons(listener,"OK","Cancel");  getRootPane().setDefaultButton(panel.getFirstButton());  add(panel,BorderLayout.SOUTH);  setSize(600,400);  setLocationRelativeTo(parent);}  }
class C{  private JPanel createNormalityTestDialog(Node selected){  DataSet dataSet=(DataSet)dataEditor.getSelectedDataModel();  QQPlot qqPlot=new QQPlot(dataSet,selected);  NormalityTestEditorPanel editorPanel=new NormalityTestEditorPanel(qqPlot,dataSet);  JTextArea display=new JTextArea(NormalityTests.runNormalityTests(dataSet,(ContinuousVariable)qqPlot.getSelectedVariable()),20,65);  display.setEditable(false);  editorPanel.addPropertyChangeListener(new NormalityTestListener(display));  Box box=Box.createHorizontalBox();  box.add(display);  box.add(Box.createHorizontalStrut(3));  box.add(editorPanel);  box.add(Box.createHorizontalStrut(5));  box.add(Box.createHorizontalGlue());  Box vBox=Box.createVerticalBox();  vBox.add(Box.createVerticalStrut(15));  vBox.add(box);  vBox.add(Box.createVerticalStrut(5));  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(vBox,BorderLayout.CENTER);  return panel;}  }
class C{  public Gallagher(int numberOfVariables,double[][] rotation,double[][] xLocal,double[][] arrScales,double[] peaks){  super(numberOfVariables);  this.rotation=rotation;  this.xLocal=xLocal;  this.arrScales=arrScales;  this.peaks=peaks;}  }
class C{  public boolean isValid(){  return this.length >= this.minLength && !this.characterClasses.contains(CharacterClass.INVALID) && this.characterClasses.size() >= this.minCharacterClassCount;}  }
class C{  protected void clearEvents(){}  }
class C{  private VecsStoreFactory(String serverName,String userName,String userPassword){  _isIPC=(serverName == null);  _serverName=(serverName == null) ? LOCALHOST : serverName;  _userName=(userName == null) ? LOCALUSER : userName;  _userPassword=userPassword;}  }
class C{  public DProviderInfo(JDialog parent,Dialog.ModalityType modality){  super(parent,modality);  initComponents();}  }
class C{  private static boolean eq(float v1,float v2){  return v1 == v2;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_POINTER_ATTRIBUTE_CONTEXT:    return "CU_POINTER_ATTRIBUTE_CONTEXT";case CU_POINTER_ATTRIBUTE_MEMORY_TYPE:  return "CU_POINTER_ATTRIBUTE_MEMORY_TYPE";case CU_POINTER_ATTRIBUTE_DEVICE_POINTER:return "CU_POINTER_ATTRIBUTE_DEVICE_POINTER";case CU_POINTER_ATTRIBUTE_HOST_POINTER:return "CU_POINTER_ATTRIBUTE_HOST_POINTER";case CU_POINTER_ATTRIBUTE_P2P_TOKENS:return "CU_POINTER_ATTRIBUTE_P2P_TOKENS";}return "INVALID CUpointer_attribute: " + n;}  }
class C{  @Override public void write(String str){  builder.append(str);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public OutlineNode(String title){  this.title=title;}  }
class C{  private RdeImportUtils createRdeImportUtils(){  return new RdeImportUtils(ofy(),new SystemClock(),importBucketName,new GcsUtils(GCS_SERVICE,ConfigModule.provideGcsBufferSize()));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.146 -0400",hash_original_method="9885A8D8E166C211280B71A198245DDA",hash_generated_method="E8C178F9BC4F744C815BC004DC198F2A") @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (android.os.Build.VERSION.SDK_INT < 5 && keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {    onBackPressed();    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  public void yypushback(final int number){  if (number > yylength()) {    zzScanError(ZZ_PUSHBACK_2BIG);  }  zzMarkedPos-=number;}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  public void println(boolean x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POINT;    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      vertices=new double[0][0];switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}for (i=0; i < vertices.length; i++) {x=vertices[i][0];y=vertices[i][1];Object[] rowData=new Object[numOutputFields];rowData[0]=(double)recordNum - 1;System.arraycopy(attData,0,rowData,1,numInputFields);output.addRecord(new whitebox.geospatialfiles.shapefile.Point(x,y),rowData);}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public static boolean isUUID(Object obj){  return isUUId(obj);}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public Vector2d sub(Vector2dc v){  x-=v.x();  y-=v.y();  return this;}  }
class C{  public CouplingMenuProducer(final String menuName,final Workspace workspace,final PotentialProducer producer){  super(menuName);  this.workspace=workspace;  this.producer=producer;  updateMenu();}  }
class C{  public static byte[] hash(byte[] input,int offset,int length){  MessageDigest digest=newDigest();  digest.update(input,offset,length);  return digest.digest();}  }
class C{  private boolean createOrders(){  int runAD_Org_ID=m_run.getAD_Org_ID();  if (runAD_Org_ID == 0)   runAD_Org_ID=Env.getAD_Org_ID(getCtx());  MOrg runOrg=MOrg.get(getCtx(),runAD_Org_ID);  int runC_BPartner_ID=runOrg.getLinkedC_BPartner_ID(get_TrxName());  boolean counter=!m_run.isCreateSingleOrder() && runC_BPartner_ID > 0 && !m_docType.isSOTrx();  MBPartner runBPartner=counter ? new MBPartner(getCtx(),runC_BPartner_ID,get_TrxName()) : null;  if (!counter || runBPartner == null || runBPartner.get_ID() != runC_BPartner_ID)   counter=false;  if (counter)   log.info("RunBP=" + runBPartner + " - "+ m_docType);  log.info("Single=" + m_run.isCreateSingleOrder() + " - "+ m_docType+ ",SO="+ m_docType.isSOTrx());  log.fine("Counter=" + counter + ",C_BPartner_ID="+ runC_BPartner_ID+ ","+ runBPartner);  MBPartner bp=null;  MOrder singleOrder=null;  MProduct product=null;  if (m_run.isCreateSingleOrder()) {    bp=new MBPartner(getCtx(),m_run.getC_BPartner_ID(),get_TrxName());    if (bp.get_ID() == 0)     throw new IllegalArgumentException("Business Partner not found - C_BPartner_ID=" + m_run.getC_BPartner_ID());    if (!p_IsTest) {      singleOrder=new MOrder(getCtx(),0,get_TrxName());      singleOrder.setC_DocTypeTarget_ID(m_docType.getC_DocType_ID());      singleOrder.setC_DocType_ID(m_docType.getC_DocType_ID());      singleOrder.setIsSOTrx(m_docType.isSOTrx());      singleOrder.setBPartner(bp);      if (m_run.getC_BPartner_Location_ID() != 0)       singleOrder.setC_BPartner_Location_ID(m_run.getC_BPartner_Location_ID());      singleOrder.setDateOrdered(m_DateOrdered);      singleOrder.setDatePromised(p_DatePromised);      if (!singleOrder.save()) {        log.log(Level.SEVERE,"Order not saved");        return false;      }      m_counter++;    }  }  int lastC_BPartner_ID=0;  int lastC_BPartner_Location_ID=0;  MOrder order=null;  for (int i=0; i < m_details.length; i++) {    MDistributionRunDetail detail=m_details[i];    if (m_run.isCreateSingleOrder())     order=singleOrder; else     if (lastC_BPartner_ID != detail.getC_BPartner_ID() || lastC_BPartner_Location_ID != detail.getC_BPartner_Location_ID()) {      order=null;    }    lastC_BPartner_ID=detail.getC_BPartner_ID();    lastC_BPartner_Location_ID=detail.getC_BPartner_Location_ID();    if (order == null) {      bp=new MBPartner(getCtx(),detail.getC_BPartner_ID(),get_TrxName());      if (!p_IsTest) {        order=new MOrder(getCtx(),0,get_TrxName());        order.setC_DocTypeTarget_ID(m_docType.getC_DocType_ID());        order.setC_DocType_ID(m_docType.getC_DocType_ID());        order.setIsSOTrx(m_docType.isSOTrx());        if (counter && bp.getAD_OrgBP_ID_Int() > 0) {          log.fine("Counter - From_BPOrg=" + bp.getAD_OrgBP_ID_Int() + "-"+ bp+ ", To_BP="+ runBPartner);          order.setAD_Org_ID(bp.getAD_OrgBP_ID_Int());          MOrgInfo oi=MOrgInfo.get(getCtx(),bp.getAD_OrgBP_ID_Int(),get_TrxName());          if (oi.getM_Warehouse_ID() > 0)           order.setM_Warehouse_ID(oi.getM_Warehouse_ID());          order.setBPartner(runBPartner);        } else {          log.fine("From_Org=" + runAD_Org_ID + ", To_BP="+ bp);          order.setAD_Org_ID(runAD_Org_ID);          order.setBPartner(bp);          if (detail.getC_BPartner_Location_ID() != 0)           order.setC_BPartner_Location_ID(detail.getC_BPartner_Location_ID());        }        order.setDateOrdered(m_DateOrdered);        order.setDatePromised(p_DatePromised);        if (!order.save()) {          log.log(Level.SEVERE,"Order not saved");          return false;        }      }    }    if (product == null || product.getM_Product_ID() != detail.getM_Product_ID())     product=MProduct.get(getCtx(),detail.getM_Product_ID());    if (p_IsTest) {      addLog(0,null,detail.getActualAllocation(),bp.getName() + " - " + product.getName());      continue;    }    MOrderLine line=new MOrderLine(order);    if (counter && bp.getAD_OrgBP_ID_Int() > 0)     ; else {      line.setC_BPartner_ID(detail.getC_BPartner_ID());      if (detail.getC_BPartner_Location_ID() != 0)       line.setC_BPartner_Location_ID(detail.getC_BPartner_Location_ID());    }    line.setProduct(product);    line.setQty(detail.getActualAllocation());    line.setPrice();    if (!line.save()) {      log.log(Level.SEVERE,"OrderLine not saved");      return false;    }    addLog(0,null,detail.getActualAllocation(),order.getDocumentNo() + ": " + bp.getName()+ " - "+ product.getName());  }  order=null;  return true;}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service,ClassLoader loader){  return new ServiceLoader<>(service,loader);}  }
class C{  public static void skipMethods(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  @Override public void decrypt(long[] buffer){  int nLen=buffer.length;  for (int nI=0; nI < nLen; nI++)   buffer[nI]=decryptBlock(buffer[nI]);}  }
class C{  public final void writeAnnotation(AnnotatedOutput out){  if (dataMap.size() == 0) {    return;  }  out.annotate(0,"\nstatistics:\n");  TreeMap<String,Data> sortedData=new TreeMap<String,Data>();  for (  Data data : dataMap.values()) {    sortedData.put(data.name,data);  }  for (  Data data : sortedData.values()) {    data.writeAnnotation(out);  }}  }
class C{  private AssignmentProposition[][] weightedSampleWithReplacement(int N,AssignmentProposition[][] S,double[] W){  AssignmentProposition[][] newS=new AssignmentProposition[N][this.dbn.getX_0().size()];  double[] normalizedW=Util.normalize(W);  for (int i=0; i < N; i++) {    int sample=(Integer)ProbUtil.sample(randomizer.nextDouble(),sampleIndexes,normalizedW);    for (int idx=0; idx < S_tp1[i].length; idx++) {      AssignmentProposition ap=S_tp1[sample][idx];      newS[i][idx]=new AssignmentProposition(ap.getTermVariable(),ap.getValue());    }  }  return newS;}  }
class C{  public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,WidgetPreviewLoader loader){  InvariantDeviceProfile profile=LauncherAppState.getInstance().getInvariantDeviceProfile();  mInfo=info;  mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));  int hSpan=Math.min(info.spanX,profile.numColumns);  int vSpan=Math.min(info.spanY,profile.numRows);  mWidgetDims.setText(String.format(mDimensionsFormatString,hSpan,vSpan));  mWidgetPreviewLoader=loader;}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverNasServers(StorageSystem system,VNXeApiClient client,Map<String,URI> nasServerIdMap,StringSet arraySupportedProtocols) throws VNXeException {  HashMap<String,List<StorageHADomain>> allNasServers=new HashMap<String,List<StorageHADomain>>();  List<StorageHADomain> newNasServers=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingNasServers=new ArrayList<StorageHADomain>();  List<VirtualNAS> newVirtualNas=new ArrayList<VirtualNAS>();  List<VirtualNAS> existingVirtualNas=new ArrayList<VirtualNAS>();  boolean isNFSSupported=false;  boolean isCIFSSupported=false;  boolean isBothSupported=false;  _logger.info("Start NasServer discovery for storage system {}",system.getId());  List<VNXeNasServer> nasServers=client.getNasServers();  List<VNXeCifsServer> cifsServers=client.getCifsServers();  List<VNXeNfsServer> nfsServers=client.getNfsServers();  for (  VNXeNasServer nasServer : nasServers) {    StorageHADomain haDomain=null;    if (null == nasServer) {      _logger.debug("Null data mover in list of port groups.");      continue;    }    if ((nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) || nasServer.getIsReplicationDestination()) {      _logger.debug("Found a replication destination NasServer");      continue;    }    if (nasServer.getIsSystem()) {      continue;    }    StringSet protocols=new StringSet();    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nasServer.getName(),NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    Iterator<URI> it=results.iterator();    if (it.hasNext()) {      StorageHADomain tmpDomain=_dbClient.queryObject(StorageHADomain.class,it.next());      if (tmpDomain.getStorageDeviceURI().equals(system.getId())) {        haDomain=tmpDomain;        _logger.debug("Found duplicate {} ",nasServer.getName());      }    }    if (cifsServers != null && !cifsServers.isEmpty()) {      for (      VNXeCifsServer cifsServer : cifsServers) {        if (cifsServer.getNasServer().getId().equals(nasServer.getId())) {          protocols.add(StorageProtocol.File.CIFS.name());          isCIFSSupported=true;          break;        }      }    }    if (nfsServers != null && !nfsServers.isEmpty()) {      for (      VNXeNfsServer nfsServer : nfsServers) {        if (nfsServer.getNasServer() != null) {          if (nfsServer.getNasServer().getId().equals(nasServer.getId())) {            protocols.add(StorageProtocol.File.NFS.name());            isNFSSupported=true;            break;          }        }      }    }    if (protocols.size() == 2) {      isBothSupported=true;    }    if (haDomain == null) {      haDomain=new StorageHADomain();      haDomain.setId(URIUtil.createId(StorageHADomain.class));      haDomain.setNativeGuid(adapterNativeGuid);      haDomain.setStorageDeviceURI(system.getId());      haDomain.setAdapterName(nasServer.getName());      haDomain.setName(nasServer.getName());      haDomain.setSerialNumber(nasServer.getId());      newNasServers.add(haDomain);    } else {      existingNasServers.add(haDomain);    }    haDomain.setFileSharingProtocols(protocols);    haDomain.setVirtual(true);    nasServerIdMap.put(nasServer.getId(),haDomain.getId());    CifsServerMap cifsServersMap=new CifsServerMap();    for (    VNXeCifsServer cifsServer : cifsServers) {      if (cifsServer.getNasServer().getId().equals(nasServer.getId())) {        _logger.info("Cifs Server {} for {} ",cifsServer.getName(),nasServer.getName());        if (!cifsServer.getFileInterfaces().isEmpty()) {          _logger.info("{} has CIFS Enabled since interfaces are found ",nasServer.getName(),cifsServer.getName() + ":" + cifsServer.getFileInterfaces());          protocols.add(StorageProtocol.File.CIFS.name());          NasCifsServer nasCifsServer=new NasCifsServer();          nasCifsServer.setId(cifsServer.getId());          nasCifsServer.setMoverIdIsVdm(true);          nasCifsServer.setName(cifsServer.getName());          nasCifsServer.setDomain(cifsServer.getDomain());          cifsServersMap.put(cifsServer.getName(),nasCifsServer);        }      }    }    VirtualNAS vNas=findvNasByNativeId(system,nasServer.getId());    if (vNas == null) {      vNas=new VirtualNAS();      vNas.setId(URIUtil.createId(VirtualNAS.class));      String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nasServer.getId(),NativeGUIDGenerator.VIRTUAL_NAS);      vNas.setNativeGuid(nasNativeGuid);      vNas.setStorageDeviceURI(system.getId());      vNas.setNasName(nasServer.getName());      vNas.setNativeId(nasServer.getId());      newVirtualNas.add(vNas);    } else {      existingVirtualNas.add(vNas);    }    vNas.setProtocols(protocols);    vNas.setNasState(VirtualNasState.LOADED.name());    vNas.setCifsServersMap(cifsServersMap);  }  if (existingVirtualNas != null && !existingVirtualNas.isEmpty()) {    _logger.info("discoverNasServers - modified VirtualNAS servers size {}",existingVirtualNas.size());    _dbClient.updateObject(existingVirtualNas);  }  if (newVirtualNas != null && !newVirtualNas.isEmpty()) {    _logger.info("discoverNasServers - new VirtualNAS servers size {}",newVirtualNas.size());    _dbClient.createObject(newVirtualNas);  }  if (isBothSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS.name());    arraySupportedProtocols.add(StorageProtocol.File.CIFS.name());  } else   if (isNFSSupported && isCIFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS_OR_CIFS.name());  } else   if (isNFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS.name());  } else   if (isCIFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.CIFS.name());  }  _logger.info("NasServer discovery for storage system {} complete.",system.getId());  for (  StorageHADomain newDomain : newNasServers) {    _logger.info("New NasServer : {} : {}",newDomain.getNativeGuid(),newDomain.getId());  }  for (  StorageHADomain domain : existingNasServers) {    _logger.info("Existing NasServer : {} : {}",domain.getNativeGuid(),domain.getId());  }  allNasServers.put(NEW,newNasServers);  allNasServers.put(EXISTING,existingNasServers);  return allNasServers;}  }
class C{  public static void stopApplication(){  Platform.exit();  System.exit(1);}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint8(certificate_types.length);  for (int i=0; i < certificate_types.length; i++) {    out.write(certificate_types[i]);  }  int authoritiesLength=0;  for (int i=0; i < certificate_authorities.length; i++) {    authoritiesLength+=encoded_principals[i].length + 2;  }  out.writeUint16(authoritiesLength);  for (int i=0; i < certificate_authorities.length; i++) {    out.writeUint16(encoded_principals[i].length);    out.write(encoded_principals[i]);  }}  }
class C{  public void deleteRow(int selectedRow){  Integer orderKey=((Quantity)this.getValueAt(selectedRow,1)).getIntegerValue();  for (  final TradeOrder tradeOrder : getData().getTradeOrders()) {    if (CoreUtils.nullSafeComparator(tradeOrder.getOrderKey(),orderKey) == 0) {      getData().getTradeOrders().remove(tradeOrder);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSeparatorBorder(context,g,x,y,w,h);}  }
class C{  public Boolean isOnlineStandby(){  return onlineStandby;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private String randomTerm(){  if (random().nextBoolean()) {    return TEST_TERMS[random().nextInt(TEST_TERMS.length)];  } else {    return TestUtil.randomUnicodeString(random());  }}  }
class C{  public static <T>int detectIndex(List<T> list,Predicate<? super T> predicate){  int size=list.size();  for (int i=0; i < size; i++) {    if (predicate.accept(list.get(i))) {      return i;    }  }  return -1;}  }
class C{  public File huntForTheScriptFile(String input){  return GroovyMain.searchForGroovyScriptFile(input);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.858 -0500",hash_original_method="9771398A54E019F3216B0B27CED1676A",hash_generated_method="4A11C834A65CDACD5BA1233CAF7AF5D1") public static boolean isOID(String alias){  return ObjectIdentifier.isOID(normalize(alias));}  }
class C{  public void animateIn(){  animate(IN);}  }
class C{  public void clear(){  int index1=delegate.size() - 1;  delegate.removeAllElements();  if (index1 >= 0) {    fireIntervalRemoved(this,0,index1);  }}  }
class C{  public static void run(String scheduleFile,String networkFile,String coordinateSystem,String outputFolder){  setLogLevels();  log.info("Reading schedule...");  TransitSchedule schedule=ScheduleTools.readTransitSchedule(scheduleFile);  log.info("Reading network...");  Network network=NetworkTools.readNetwork(networkFile);  log.info("Run TransitScheduleValidator...");  TransitScheduleValidator.ValidationResult v=TransitScheduleValidator.validateAll(schedule,network);  TransitScheduleValidator.printResult(v);  log.info("Start plausibility check...");  PlausibilityCheck check=new PlausibilityCheck(schedule,network,coordinateSystem);  check.runCheck();  if (!outputFolder.endsWith("/")) {    outputFolder=outputFolder + "/";  }  new File(outputFolder).mkdir();  new File(outputFolder + "shp/").mkdir();  new File(outputFolder + "shp/schedule/").mkdir();  new File(outputFolder + "shp/warnings/").mkdir();  check.writeCsv(outputFolder + "allPlausibilityWarnings.csv");  check.writeResultShapeFiles(outputFolder + "shp/warnings/");  ScheduleShapeFileWriter schedule2shp=new ScheduleShapeFileWriter(schedule,network,coordinateSystem);  schedule2shp.routes2Polylines(outputFolder + "shp/schedule/TransitRoutes.shp");  schedule2shp.stopFacilities2Shapes(outputFolder + "shp/schedule/StopFacilities.shp",outputFolder + "shp/schedule/StopFacilities_refLinks.shp");  StopFacilityHistogram histogram=new StopFacilityHistogram(schedule);  histogram.createCsv(outputFolder + "stopfacilities.csv");  histogram.createPng(outputFolder + "stopfacilities_histogram.png");}  }
class C{  protected void readHeader() throws IOException {  header=new byte[ShapeUtils.SHAPE_FILE_HEADER_LENGTH];  raf.seek(0);  raf.read(header,0,ShapeUtils.SHAPE_FILE_HEADER_LENGTH);  int fileCode=ShapeUtils.readBEInt(header,0);  if (fileCode != SHAPE_FILE_CODE) {    throw new IOException("Invalid file code, " + "probably not a shape file");  }  fileVersion=ShapeUtils.readLEInt(header,28);  if (fileVersion != SHAPE_FILE_VERSION) {    throw new IOException("Unable to read shape files with version " + fileVersion);  }  fileLength=ShapeUtils.readBEInt(header,24);  fileLength*=2;  fileShapeType=ShapeUtils.readLEInt(header,32);  fileBounds=ShapeUtils.readBox(header,36);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.108 -0500",hash_original_method="F8E48B54378C41D41344A45EFE5DEAF0",hash_generated_method="74983045D137E9350FBFD97EE97DADED") public DHParameterSpec(BigInteger p,BigInteger g){  this.p=p;  this.g=g;  this.l=0;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    while (m_worker != null && m_worker.isAlive())     m_worker.interrupt();    dispose();  }}  }
class C{  public String tailFile(File file,boolean problemsOnly) throws IOException {  byte buffer[]=new byte[128000];  int readSize=buffer.length;  RandomAccessFile f=new RandomAccessFile(file,"r");  long length=f.length();  if (length < readSize) {    readSize=(int)length;  }  long seekOffset=length - readSize;  f.seek(seekOffset);  if (readSize != f.read(buffer,0,readSize)) {    throw new EOFException("Failed to read " + readSize + " bytes from "+ file.getAbsolutePath());  }  f.close();  int msgStart=-1;  int msgEnd=readSize;  for (int i=readSize - 1; i >= 0; i--) {    if (buffer[i] == '[' && (buffer[i + 1] == 's' || buffer[i + 1] == 'e' || buffer[i + 1] == 'w') && i > 0 && (buffer[i - 1] == '\n' || buffer[i - 1] == '\r')) {      msgStart=i;      break;    }  }  if (msgStart == -1) {    if (problemsOnly) {      return null;    }    for (int i=readSize - 3; i >= 0; i--) {      if (buffer[i] == '\n' || buffer[i] == '\r') {        msgStart=(buffer[i] == '\n') ? (i + 1) : (i + 2);        break;      }    }    if (msgStart == -1) {      msgStart=0;    }  } else {    for (int i=msgStart + 1; i < readSize; i++) {      if (buffer[i] == '[' && (buffer[i - 1] == '\n' || buffer[i - 1] == '\r')) {        msgEnd=i;        break;      }    }  }  for (int i=msgStart; i < msgEnd; i++) {    if (buffer[i] == '\n' || buffer[i] == '\r') {      buffer[i]=' ';    }  }  return new String(buffer,msgStart,msgEnd - msgStart);}  }
class C{  public CastCorrectionProposal(String label,ICompilationUnit targetCU,Expression nodeToCast,ITypeBinding castType,int relevance){  super(label,targetCU,null,relevance,JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CAST));  fNodeToCast=nodeToCast;  fCastType=castType;  setCommandId(ADD_CAST_ID);}  }
class C{  protected boolean isConnectionOpen(Socket socket){  return isConnectionOpen(socket," ".getBytes());}  }
class C{  private void materialize(DatasetDescription aDataset) throws IOException {  Path root=resolve(aDataset);  Collection<ArtifactDescription> artifacts=aDataset.getArtifacts().values();  boolean reload=false;  packageValidationLoop:   for (  ArtifactDescription artifact : artifacts) {    Path cachedFile=resolve(aDataset,artifact);    if (!Files.exists(cachedFile)) {      continue;    }    if (artifact.getSha1() != null) {      String actual=getDigest(cachedFile,"SHA1");      if (!artifact.getSha1().equals(actual)) {        LOG.info("Local SHA1 hash mismatch on [" + cachedFile + "] - expected ["+ artifact.getSha1()+ "] - actual ["+ actual+ "]");        reload=true;        break packageValidationLoop;      } else {        LOG.info("Local SHA1 hash verified on [" + cachedFile + "] - ["+ actual+ "]");      }    }  }  if (reload) {    LOG.info("Clearing local cache for [" + root + "]");    FileUtils.deleteQuietly(root.toFile());  }  for (  ArtifactDescription artifact : artifacts) {    Path cachedFile=resolve(aDataset,artifact);    if (Files.exists(cachedFile)) {      continue;    }    if (artifact.getText() != null) {      Files.createDirectories(cachedFile.getParent());      LOG.info("Creating [" + cachedFile + "]");      try (Writer out=Files.newBufferedWriter(cachedFile,StandardCharsets.UTF_8)){        out.write(artifact.getText());      }     }    if (artifact.getUrl() != null) {      Files.createDirectories(cachedFile.getParent());      MessageDigest sha1;      try {        sha1=MessageDigest.getInstance("SHA1");      } catch (      NoSuchAlgorithmException e) {        throw new IOException(e);      }      URL source=new URL(artifact.getUrl());      LOG.info("Fetching [" + cachedFile + "]");      URLConnection connection=source.openConnection();      connection.setRequestProperty("User-Agent","Java");      try (InputStream is=connection.getInputStream()){        DigestInputStream sha1Filter=new DigestInputStream(is,sha1);        Files.copy(sha1Filter,cachedFile);        if (artifact.getSha1() != null) {          String sha1Hex=new String(Hex.encodeHex(sha1Filter.getMessageDigest().digest()));          if (!artifact.getSha1().equals(sha1Hex)) {            String message="SHA1 mismatch. Expected [" + artifact.getSha1() + "] but got ["+ sha1Hex+ "].";            LOG.error(message);            throw new IOException(message);          }        }      }     }  }  Path postActionCompleteMarker=resolve(aDataset).resolve(".postComplete");  if (!Files.exists(postActionCompleteMarker)) {    for (    ArtifactDescription artifact : artifacts) {      Path cachedFile=resolve(aDataset,artifact);      List<ActionDescription> actions=artifact.getActions();      if (actions != null && !actions.isEmpty()) {        try {          for (          ActionDescription action : actions) {            LOG.info("Post-download action [" + action.getAction() + "]");            Class<? extends Action_ImplBase> implClass=actionRegistry.get(action.getAction());            if (implClass == null) {              throw new IllegalStateException("Unknown or unsupported action [" + action.getAction() + "]");            }            Action_ImplBase impl=implClass.newInstance();            impl.apply(action,aDataset,artifact,cachedFile);          }        } catch (        IllegalStateException e) {          throw e;        }catch (        IOException e) {          throw e;        }catch (        Exception e) {          throw new IllegalStateException(e);        }      }    }    Files.createFile(postActionCompleteMarker);  }}  }
class C{  private static void verifyAttributes(Class<?> clazz,List<Attribute> attributes) throws NoSuchFieldException {  for (  Attribute attribute : attributes) {    try {      clazz.getDeclaredField(attribute.getName());    } catch (    SecurityException e) {      throw e;    }catch (    NoSuchFieldException e) {      Class<?> superclass=clazz.getSuperclass();      boolean founded=false;      while (superclass != Object.class && !founded) {        try {          superclass.getDeclaredField(attribute.getName());          founded=true;        } catch (        NoSuchFieldException e1) {        }        superclass=superclass.getSuperclass();      }      if (!founded)       throw e;    }  }}  }
class C{  protected ImplementedProjectsImpl(){  super();}  }
class C{  private static String nameTrim(String in){  in=in.trim();  if (in.startsWith("'") || in.startsWith("\""))   in=in.substring(1);  if (in.endsWith("'") || in.startsWith("\""))   in=in.substring(0,in.length() - 1);  return in.trim();}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public static List<String> convertToList(String vars){  List<String> resultList=new ArrayList<String>();  String[] resultArray=vars.split(STRING_LIST_SEPARATOR);  for (  String var : resultArray) {    var=var.trim();    if (var.length() > 0) {      resultList.add(var);    }  }  return resultList;}  }
class C{  public ClassDefinitionBuilder defs(JCTree statement){  if (statement != null) {    this.defs.append(statement);  }  return this;}  }
class C{  public static void close() throws IllegalStateException {  Realm realm=realmCache.get();  if (realm == null) {    throw new IllegalStateException("realm already closed");  }  realm.close();  realmCache.set(null);}  }
class C{  public void finish() throws IOException {  if (!this.wroteLastChunk) {    flushCache();    writeClosingChunk();    this.wroteLastChunk=true;  }}  }
class C{  public ExistsRequest source(Map querySource){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(querySource);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + querySource + "]",e);  }}  }
class C{  public void markValid(){  getElement().setAttribute("success","");  getElement().removeAttribute("error");}  }
class C{  public String subtype(){  return subtype;}  }
class C{  protected void applyToXYAnnotation(XYAnnotation annotation){  ParamChecks.nullNotPermitted(annotation,"annotation");  if (annotation instanceof XYTextAnnotation) {    XYTextAnnotation xyta=(XYTextAnnotation)annotation;    xyta.setFont(this.smallFont);    xyta.setPaint(this.itemLabelPaint);  }}  }
class C{  private void performZoom(MotionEvent event){  if (event.getPointerCount() >= 2) {    OnChartGestureListener l=mChart.getOnChartGestureListener();    float totalDist=spacing(event);    if (totalDist > 10f) {      PointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);      if (mTouchMode == PINCH_ZOOM) {        float scale=totalDist / mSavedDist;        float scaleX=(mChart.isScaleXEnabled()) ? scale : 1f;        float scaleY=(mChart.isScaleYEnabled()) ? scale : 1f;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(scaleX,scaleY,t.x,t.y);        if (l != null)         l.onChartScale(event,scaleX,scaleY);      } else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {        float xDist=getXDist(event);        float scaleX=xDist / mSavedXDist;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(scaleX,1f,t.x,t.y);        if (l != null)         l.onChartScale(event,scaleX,1f);      } else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {        float yDist=getYDist(event);        float scaleY=yDist / mSavedYDist;        mMatrix.set(mSavedMatrix);        mMatrix.postScale(1f,scaleY,t.x,t.y);        if (l != null)         l.onChartScale(event,1f,scaleY);      }    }  }}  }
class C{  protected String printDist(double[] dist) throws Exception {  StringBuffer text=new StringBuffer();  if (m_Instances.classAttribute().isNominal()) {    for (int i=0; i < m_Instances.numClasses(); i++) {      text.append(m_Instances.classAttribute().value(i) + "\t");    }    text.append("\n");    for (int i=0; i < m_Instances.numClasses(); i++) {      text.append(dist[i] + "\t");    }    text.append("\n");  }  return text.toString();}  }
class C{  public java.lang.StringBuilder deleteCharAt(int index){  return null;}  }
class C{  protected void addTimeEventPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_UnscheduleTimeEvent_timeEvent_feature"),getString("_UI_PropertyDescriptor_description","_UI_UnscheduleTimeEvent_timeEvent_feature","_UI_UnscheduleTimeEvent_type"),SexecPackage.Literals.UNSCHEDULE_TIME_EVENT__TIME_EVENT,true,false,true,null,null,null));}  }
class C{  public Vertex midPoint(Vertex a){  double xm=(p.x + a.getX()) / 2.0;  double ym=(p.y + a.getY()) / 2.0;  double zm=(p.z + a.getZ()) / 2.0;  return new Vertex(xm,ym,zm);}  }
class C{  public TacticalGraphicSymbol(String sidc,Position position){  super(position);  init(sidc);}  }
class C{  public void test_initLjava_security_KeyStore_02() throws Exception {  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  trustMF[0].init(ks);}  }
class C{  protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,TransactionAttribute txAttr,String joinpointIdentification,TransactionStatus status){  TransactionInfo txInfo=new TransactionInfo(tm,txAttr,joinpointIdentification);  if (txAttr != null) {    if (logger.isTraceEnabled()) {      logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]");    }    txInfo.newTransactionStatus(status);  } else {    if (logger.isTraceEnabled())     logger.trace("Don't need to create transaction for [" + joinpointIdentification + "]: This method isn't transactional.");  }  txInfo.bindToThread();  return txInfo;}  }
class C{  public void delete(long key){  int i=Arrays.binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  public static UnicodeSpec parse(String s){  UnicodeSpec spec=null;  String[] tokens=null;  try {    tokens=tokenSeparator.split(s,REQUIRED_FIELDS);    spec=new UnicodeSpec();    spec.setCodePoint(parseCodePoint(tokens[FIELD_VALUE]));    spec.setName(parseName(tokens[FIELD_NAME]));    spec.setGeneralCategory(parseGeneralCategory(tokens[FIELD_CATEGORY]));    spec.setBidiCategory(parseBidiCategory(tokens[FIELD_BIDI]));    spec.setCombiningClass(parseCombiningClass(tokens[FIELD_CLASS]));    spec.setDecomposition(parseDecomposition(tokens[FIELD_DECOMPOSITION]));    spec.setDecimalValue(parseDecimalValue(tokens[FIELD_DECIMAL]));    spec.setDigitValue(parseDigitValue(tokens[FIELD_DIGIT]));    spec.setNumericValue(parseNumericValue(tokens[FIELD_NUMERIC]));    spec.setMirrored(parseMirrored(tokens[FIELD_MIRRORED]));    spec.setOldName(parseOldName(tokens[FIELD_OLDNAME]));    spec.setComment(parseComment(tokens[FIELD_COMMENT]));    spec.setUpperMap(parseUpperMap(tokens[FIELD_UPPERCASE]));    spec.setLowerMap(parseLowerMap(tokens[FIELD_LOWERCASE]));    spec.setTitleMap(parseTitleMap(tokens[FIELD_TITLECASE]));  } catch (  Exception e) {    spec=null;    System.out.println("Error parsing spec line.");  }  return spec;}  }
class C{  public void writeBit(final int bit) throws EncodingException {  if (bit != 0 && bit != 1) {    throw ErrorFactory.createEncodingException(ErrorKeys.DIFFTOOL_ENCODING_VALUE_OUT_OF_RANGE,"bit value out of range: " + bit);  }  this.buffer|=bit << (7 - this.bufferLength);  this.bufferLength++;  if (bufferLength == 8) {    write(buffer);    this.bufferLength=0;    this.buffer=0;  }}  }
class C{  public void logout(){  Presence presence=new Presence(Presence.Type.unavailable);  presence.setTo(entityJID);  presence.setFrom(connection.getUser());  connection.sendPacket(presence);}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static boolean testRayAar(float originX,float originY,float dirX,float dirY,float minX,float minY,float maxX,float maxY){  float invDirX=1.0f / dirX, invDirY=1.0f / dirY;  float tNear, tFar, tymin, tymax;  if (invDirX >= 0.0f) {    tNear=(minX - originX) * invDirX;    tFar=(maxX - originX) * invDirX;  } else {    tNear=(maxX - originX) * invDirX;    tFar=(minX - originX) * invDirX;  }  if (invDirY >= 0.0f) {    tymin=(minY - originY) * invDirY;    tymax=(maxY - originY) * invDirY;  } else {    tymin=(maxY - originY) * invDirY;    tymax=(minY - originY) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return false;  tNear=tymin > tNear || Float.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Float.isNaN(tFar) ? tymax : tFar;  return tNear < tFar && tFar >= 0.0f;}  }
class C{  public boolean checkSignals(JmriJFrame frame,LayoutEditor panel){  if (panel == null) {    log.error("Null Layout Editor panel on call to 'checkSignals'");    return false;  }  if (initializationNeeded) {    initializeBlocks();  }  Block eBlock=getEntryBlock();  ArrayList<EntryPoint> epList=getListOfForwardBlockEntryPoints(eBlock);  if (epList.size() > 0) {  }  return true;}  }
class C{  final public static boolean hemisphere_clip(float phi1,float lambda0,float phi,float lambda){  return (GreatCircle.sphericalDistance(phi1,lambda0,phi,lambda) <= MoreMath.HALF_PI);}  }
class C{  protected <T>ResponseEntity<T> send(final ClientHttpRequest request,final Class<T> responseType){  return send(request,responseType,Collections.<String,Object>emptyMap());}  }
class C{  public static void zero(Address start,long size){  Clock.stop();  Trace.trace(Item.MEMORY,"zero(%s,%d)\n",start.toString(),size);  if (size < 0) {    System.out.printf("start: %s, size: %d %n",start,size);  }  assert (size >= 0) : "Can't zero negative size: int to long conversion gone wrong ?";  assert (size % BYTES_IN_WORD == 0) : "Must zero word rounded bytes";  Clock.start();  MemoryPage page=getPage(start);  Address pageAddress=start;  for (int i=0; i < size; i+=BYTES_IN_INT) {    Address curAddr=start.plus(i);    if (!onSamePage(pageAddress,curAddr)) {      page=getPage(curAddr);      pageAddress=curAddr;    }    page.setInt(curAddr,0);    Clock.tick();  }}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  private IMAPStore connect() throws MessagingException {  final Configuration config=Configuration.root();  Set<String> missingKeys=getMissingKeys(config,IMAP_HOST_KEY,IMAP_USER_KEY,IMAP_PASSWORD_KEY);  if (missingKeys.size() > 0) {    throw new IllegalStateException("Cannot connect to the IMAP server because these are" + " not configured: " + missingKeys);  }  Properties props=new Properties();  String s=config.getBoolean(IMAP_SSL_KEY,false) ? "s" : "";  props.setProperty("mail.store.protocol","imap" + s);  Session session=getDefaultInstance(props,null);  store=(IMAPStore)session.getStore();  store.connect(config.getString(IMAP_HOST_KEY),config.getString(IMAP_USER_KEY),config.getString(IMAP_PASSWORD_KEY));  return store;}  }
class C{  public void reset(){  super.reset();  fmod.reset();}  }
class C{  public static MethodOperand STATIC(RVMMethod target){  MethodOperand ans=new MethodOperand(target.getMemberRef(),target,STATIC);  return ans;}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  @Override protected void append(E eventObject){  if (!isStarted()) {    return;  }  if (evWarnError != null) {    ILoggingEvent ev=((ILoggingEvent)eventObject);    if (ev.getLevel().equals(Level.ERROR) || ev.getLevel().equals(Level.WARN)) {      evWarnError.newEventWithFlush(new WarnErrorEvent(ev.getFormattedMessage(),ev.getLevel(),ev.getThreadName(),ev.getLoggerName()));    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE:    return delegationBaseType != null;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:  return delegationSuperClassSteps != DELEGATION_SUPER_CLASS_STEPS_EDEFAULT;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET:return delegationTarget != null;case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return delegationTargetIsAbstract != DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.389 -0500",hash_original_method="6A31F6EEFC7A56081588A72CFCF2411E",hash_generated_method="C3EFCEFD670D6F541200D7B9FEC157C9") public boolean shouldOverrideUrlLoading(String url){  ResultTransport<Boolean> res=new ResultTransport<Boolean>(false);  Message msg=obtainMessage(OVERRIDE_URL);  msg.getData().putString("url",url);  msg.obj=res;synchronized (this) {    sendMessage(msg);    try {      wait();    } catch (    InterruptedException e) {      Log.e(LOGTAG,"Caught exception while waiting for overrideUrl");      Log.e(LOGTAG,Log.getStackTraceString(e));    }  }  return res.getResult().booleanValue();}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  StringBuffer sb=new StringBuffer();  int length=s.length();  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public Object call(Context cx,Scriptable scope,Scriptable thisObj,Object[] args){  return Undefined.instance;}  }
class C{  public void removeTableModelListener(TableModelListener l){  listeners.remove(l);}  }
class C{  public static void createCommentNode(final JFrame parent,final INaviView view,final INaviViewNode node){  Preconditions.checkNotNull(parent,"IE02128: Parent argument can not be null");  Preconditions.checkNotNull(view,"IE02129: View argument can not be null");  Preconditions.checkNotNull(node,"IE01726: Node argument can not be null");  final CTextNode source=view.getContent().createTextNode(null);  final CNaviViewEdge edge=view.getContent().createEdge(source,node,EdgeType.TEXTNODE_EDGE);  final DialogTextNodeComment dlg=new DialogTextNodeComment(parent,source);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  final List<IComment> newComment=dlg.getComment();  if (newComment == null) {    view.getContent().deleteEdge(edge);    view.getContent().deleteNode(source);  }}  }
class C{  @SuppressWarnings("unchecked") public Vertex parseElement(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  List<String> comments=getComments(stream);  stream.skipWhitespace();  boolean bracket=false;  if (stream.peek() == '(') {    bracket=true;    stream.skip();    stream.skipWhitespace();  }  try {    String token=stream.peekWord();    if (token == null) {      throw new SelfParseException("Unexpected end, element expected",stream);    }    token=token.toLowerCase();    if (token.equals(FUNCTION)) {      token=EQUATION;    }    if (OPERATORS.contains(token)) {      Vertex equation=parseOperator(stream,elements,debug,network);      if (debug) {        for (        String comment : comments) {          equation.addRelationship(Primitive.COMMENT,network.createVertex(comment));        }      }      if (debug) {        String source=stream.currentLine();        int lineNumber=stream.currentLineNumber();        equation.addRelationship(Primitive.SOURCE,network.createVertex(source));        equation.addRelationship(Primitive.LINE_NUMBER,network.createVertex(lineNumber));      }      return equation;    } else     if (TYPES.contains(token)) {      stream.nextWord();      if (token.equals(VAR)) {        token=VARIABLE;      } else {        ensureNext(':',stream);      }      if (token.equals(FORMULA)) {        return parseFormula(null,stream,elements,debug,network);      }      if (token.equals(PATTERN)) {        ensureNext('"',stream);        return network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);      }      Long id=null;      if (Character.isDigit(stream.peek())) {        String idText=stream.nextWord();        try {          id=Long.valueOf(idText);        } catch (        NumberFormatException exception) {          throw new SelfParseException("Invalid id: " + idText,stream);        }      }      boolean isPrimitiveShortCut=false;      boolean isInstanceShortCut=false;      char peek=stream.peek();      if ('#' == peek) {        isPrimitiveShortCut=true;        stream.skip();        peek=stream.peek();      } else       if ('^' == peek) {        isInstanceShortCut=true;        stream.skip();        peek=stream.peek();      }      String name=null;      if ((id == null) || (peek == ':')) {        if (id != null) {          stream.skip();        }        name=stream.nextWord();      }      Vertex vertex=null;      Map<String,Vertex> elementsForType=elements.get(token);      if (name != null) {        if (elementsForType != null) {          vertex=elementsForType.get(name);          if (vertex != null) {            return vertex;          }        }      }      if (id != null) {        vertex=network.findById(id);        if (vertex == null) {          throw new SelfParseException("Id element reference not found: " + id,stream);        }        if ((elementsForType != null) && (name != null)) {          elementsForType.put(name,vertex);        }        return vertex;      }      if (token.equals(STATE)) {        vertex=network.createInstance(Primitive.STATE);        vertex.setName(name);      } else       if (token.equals(VARIABLE)) {        vertex=network.createInstance(Primitive.VARIABLE);        vertex.setName(name);        if (isPrimitiveShortCut) {          vertex.addRelationship(Primitive.MEANING,new Primitive(name));        }        if (isInstanceShortCut) {          Vertex meaning=network.createInstance(Primitive.VARIABLE);          meaning.addRelationship(Primitive.INSTANTIATION,new Primitive(name));          vertex.addRelationship(Primitive.MEANING,meaning);        }      } else       if (token.equals(EQUATION)) {        vertex=network.createInstance(Primitive.EQUATION);        vertex.setName(name);      } else {        throw new SelfParseException("Invalid element: " + token,stream);      }      if (name != null) {        elementsForType=elements.get(token);        if (elementsForType != null) {          elementsForType.put(name,vertex);        }      }      return vertex;    }    char next=stream.peek();    try {      if (next == '#') {        stream.skip();        String data=stream.upToAny(PRIMITIVE_TOKENS);        return network.createVertex(new Primitive(data));      } else       if (next == '"') {        stream.skip();        String data=stream.nextQuotesExcludeDoubleQuote();        return network.createVertex(data);      } else       if (Character.isDigit(next) || next == '-' || next == '+') {        String data=stream.nextWord();        return network.createVertex(new BigInteger(data));      } else {        String dataType=stream.upTo('(',false,true);        if (dataType.isEmpty()) {          throw new SelfParseException("Invalid element: " + stream.nextWord(),stream);        }        String word=stream.nextWord();        if (word.equals("(")) {          throw new SelfParseException("Invalid element: " + dataType,stream);        }        word=stream.nextWord();        if (word.equals("\"")) {          throw new SelfParseException("Invalid element: " + dataType,stream);        }        String dataValue=stream.upTo('"',false,true);        ensureNext('"',stream);        while ('"' == stream.peek()) {          dataValue=dataValue + "\"" + stream.upTo('"',false,true);          ensureNext('"',stream);        }        ensureNext(')',stream);        Object data=null;        if (dataType.equalsIgnoreCase("DATE")) {          data=Utils.parseDate(dataValue);        } else         if (dataType.equalsIgnoreCase("TIME")) {          data=Utils.parseTime(dataValue);        } else         if (dataType.equalsIgnoreCase("TIMESTAMP")) {          data=Utils.parseTimestamp(dataValue);        } else {          Class<Object> typeClass=(Class<Object>)Class.forName(dataType);          data=typeClass.getConstructor(String.class).newInstance(dataValue);        }        return network.createVertex(data);      }    } catch (    SelfParseException exception) {      throw exception;    }catch (    Exception exception) {      throw new SelfParseException("Invalid data: " + next,stream,exception);    }  }  finally {    if (bracket) {      stream.skipWhitespace();      ensureNext(')',stream);    }  }}  }
class C{  public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public OMBitmap(){  super(RENDERTYPE_UNKNOWN,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);}  }
class C{  public EsriPolygonList(int initialCapacity,int capacityIncrement){  super(initialCapacity);}  }
class C{  public static Object invokeStatic(String clazz,String methodName) throws NoSuchMethodException {  try {    return invokeStatic(Class.forName(clazz),methodName);  } catch (  ClassNotFoundException e) {    throw new NoSuchMethodException("class " + clazz + " not found");  }}  }
class C{  public void stop(BundleContext context) throws Exception {  super.stop(context);  plugin=null;}  }
class C{  private void parseToken(Node node){  String token=null;  String tokenValidity=null;  Node tokenChild=node.getFirstChild();  if (tokenChild != null) {    do {      if (token == null) {        if ((token=getValueByParamName("token",tokenChild,TYPE_TXT)) != null) {          provisioningInfo.setToken(token);          continue;        }      }      if (tokenValidity == null) {        if ((tokenValidity=getValueByParamName("validity",tokenChild,TYPE_INT)) != null) {          provisioningInfo.setTokenValidity(Long.parseLong(tokenValidity));        }      }    } while ((tokenChild=tokenChild.getNextSibling()) != null);  }}  }
class C{  private void initializeDriverProperties(Properties info) throws SQLException {  initializeProperties(info);  String exceptionInterceptorClasses=getExceptionInterceptors();  if (exceptionInterceptorClasses != null && !"".equals(exceptionInterceptorClasses)) {    this.exceptionInterceptor=new ExceptionInterceptorChain(exceptionInterceptorClasses);  }  this.usePlatformCharsetConverters=getUseJvmCharsetConverters();  this.log=LogFactory.getLogger(getLogger(),LOGGER_INSTANCE_NAME,getExceptionInterceptor());  if (getProfileSql() || getUseUsageAdvisor()) {    this.eventSink=ProfilerEventHandlerFactory.getInstance(getMultiHostSafeProxy());  }  if (getCachePreparedStatements()) {    createPreparedStatementCaches();  }  if (getNoDatetimeStringSync() && getUseTimezone()) {    throw SQLError.createSQLException("Can't enable noDatetimeStringSync and useTimezone configuration properties at the same time",SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,getExceptionInterceptor());  }  if (getCacheCallableStatements()) {    this.parsedCallableStatementCache=new LRUCache(getCallableStatementCacheSize());  }  if (getAllowMultiQueries()) {    setCacheResultSetMetadata(false);  }  if (getCacheResultSetMetadata()) {    this.resultSetMetadataCache=new LRUCache(getMetadataCacheSize());  }  if (getSocksProxyHost() != null) {    setSocketFactoryClassName("com.mysql.jdbc.SocksProxySocketFactory");  }}  }
class C{  public static String fromIPv4Address(int ipAddress){  StringBuffer sb=new StringBuffer();  int result=0;  for (int i=0; i < 4; ++i) {    result=(ipAddress >> ((3 - i) * 8)) & 0xff;    sb.append(Integer.valueOf(result).toString());    if (i != 3)     sb.append(".");  }  return sb.toString();}  }
class C{  private void convertToResourceAndCheckConfigurationMatches(String configuration,DataSourceFixture dataSourceFixture,String resourceType){  Resource resource=converter.convertToResource(dataSourceFixture.buildDataSource(),resourceType,"driver-name");  checkConfigurationMatchesResource(configuration,resource);}  }
class C{  public AttributeStats attributeStats(int index){  AttributeStats result=new AttributeStats();  if (attribute(index).isNominal()) {    result.nominalCounts=new int[attribute(index).numValues()];    result.nominalWeights=new double[attribute(index).numValues()];  }  if (attribute(index).isNumeric()) {    result.numericStats=new weka.experiment.Stats();  }  result.totalCount=numInstances();  double[] attVals=attributeToDoubleArray(index);  int[] sorted=Utils.sort(attVals);  int currentCount=0;  double currentWeight=0;  double prev=Double.NaN;  for (int j=0; j < numInstances(); j++) {    Instance current=instance(sorted[j]);    if (current.isMissing(index)) {      result.missingCount=numInstances() - j;      break;    }    if (current.value(index) == prev) {      currentCount++;      currentWeight+=current.weight();    } else {      result.addDistinct(prev,currentCount,currentWeight);      currentCount=1;      currentWeight=current.weight();      prev=current.value(index);    }  }  result.addDistinct(prev,currentCount,currentWeight);  result.distinctCount--;  return result;}  }
class C{  public T caseScriptElement(ScriptElement object){  return null;}  }
class C{  public void initialize(ModelValidationEngine engine,MClient client){  if (client != null) {    m_AD_Client_ID=client.getAD_Client_ID();    log.info(client.toString());  } else {    log.info("Initializing global validator: " + this.toString());  }  engine.addModelChange(MOrder.Table_Name,this);  engine.addDocValidate(MOrder.Table_Name,this);}  }
class C{  private void formatTo(StringBuilder buf,List<?> params){  for (  Object p : params) {    if (p instanceof String) {      formatTo(buf,(String)p);    } else {      LOG.warning("Incorrect object type: " + p.getClass());    }  }}  }
class C{  public boolean hasPremultipliedAlpha(){  return premultipliedAlpha;}  }
class C{  public synchronized boolean skip(ReplDBMSEvent event) throws InterruptedException {  return stage.getProgressTracker().skip(event);}  }
class C{  public final CC shrinkY(float w){  ver.setShrink(new Float(w));  return this;}  }
class C{  public static void dumpMemoryRange(final JFrame parent,final IDebugger debugger,final IDataProvider dataProvider,final IAddress offset,final int size){  checkArguments(parent,debugger,offset);  final Pair<Integer,File> result=showSaveDialog(parent);  if (result.first() == JFileChooser.APPROVE_OPTION) {    loadAll(parent,debugger,offset,size);    if (dataProvider.hasData(offset.toLong(),size)) {      try {        final byte[] data=dataProvider.getData(offset.toLong(),size);        FileUtils.writeBinaryFile(result.second(),data);        CMessageBox.showInformation(parent,String.format("Memory data was successfully written to %s",result.second()));      } catch (      final IOException e) {        final String innerMessage="E00151: " + "Could not write memory data to the target file";        final String innerDescription=CUtilityFunctions.createDescription(String.format("The memory data of the selected range could not be written to the file '%s'.",result.second().getAbsolutePath()),new String[]{"You do not have sufficient rights to write to the file.","Another program locks the selected file.","The disk is full."},new String[]{"The memory data was not written to the file."});        NaviErrorDialog.show(parent,innerMessage,innerDescription,e);      }    } else {      final String innerMessage="E00152: " + "Could not read memory";      final String innerDescription=CUtilityFunctions.createDescription("The memory section to be dumped could not be read.",new String[]{"There was a problem with the database connection."},new String[]{"The memory data could not be read and the output file was not written."});      NaviErrorDialog.show(parent,innerMessage,innerDescription);    }  }}  }
class C{  private boolean testFENParseError(String fen){  boolean wasError;  wasError=false;  try {    TextIO.readFEN(fen);  } catch (  ChessParseError err) {    wasError=true;  }  return wasError;}  }
class C{  public static IStatus makeCommittable(IResource resource,Object context){  return makeCommittable(new IResource[]{resource},context);}  }
class C{  public static boolean isBodyAABBEnabled(){  return bodyAABBEnabled;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public FileVirtualPoolRestRep updateFileVirtualPool(@PathParam("id") URI id,FileVirtualPoolUpdateParam param){  VirtualPool cos=null;  ArgValidator.checkFieldUriType(id,VirtualPool.class,"id");  cos=_dbClient.queryObject(VirtualPool.class,id);  ArgValidator.checkEntity(cos,id,isIdEmbeddedInURL(id));  if (!cos.getType().equals(VirtualPool.Type.file.name())) {    throw APIException.badRequests.unexpectedValueForProperty("VPool type",VirtualPool.Type.file.name(),cos.getType());  }  VirtualPoolUtil.validateFileVirtualPoolUpdateParams(cos,param,_dbClient);  URIQueryResultList resultList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVirtualPoolFileshareConstraint(id),resultList);  for (Iterator<URI> fileShareItr=resultList.iterator(); fileShareItr.hasNext(); ) {    FileShare fileShare=_dbClient.queryObject(FileShare.class,fileShareItr.next());    if (!fileShare.getInactive() && checkAttributeValuesChanged(param,cos)) {      throw APIException.badRequests.vPoolUpdateNotAllowed("FileShares");    }  }  populateCommonVirtualPoolUpdateParams(cos,param);  if (null != param.getSystemType()) {    if (cos.getArrayInfo() != null && cos.getArrayInfo().containsKey(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {      for (      String systemType : cos.getArrayInfo().get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {        cos.getArrayInfo().remove(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,systemType);      }    }    if (!(VirtualPool.SystemType.NONE.name().equalsIgnoreCase(param.getSystemType()) || VirtualPool.SystemType.isFileTypeSystem(param.getSystemType()))) {      throw APIException.badRequests.invalidSystemType("File");    }    if (cos.getArrayInfo() == null) {      cos.setArrayInfo(new StringSetMap());    }    cos.getArrayInfo().put(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,param.getSystemType());  }  if (null != param.getProtection()) {    updateFileProtectionParamsForVirtualPool(cos,param.getProtection());  }  if (null != param.getLongTermRetention()) {    cos.setLongTermRetention(param.getLongTermRetention());  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(cos,_dbClient,_coordinator,errorMessage);  if (null != cos.getMatchedStoragePools() || null != cos.getInvalidMatchedPools()) {    ImplicitUnManagedObjectsMatcher.matchVirtualPoolsWithUnManagedFileSystems(cos,_dbClient);  }  _dbClient.updateAndReindexObject(cos);  recordOperation(OperationTypeEnum.UPDATE_VPOOL,VPOOL_UPDATED_DESCRIPTION,cos);  return toFileVirtualPool(cos,VirtualPool.getFileRemoteProtectionSettings(cos,_dbClient));}  }
class C{  public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){  if (_existingVolumes == null) {    _existingVolumes=new StringMap();  }  for (  String wwn : volumeWWNs.keySet()) {    String normalizedWWN=BlockObject.normalizeWWN(wwn);    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;      Integer hlu=volumeWWNs.get(normalizedWWN);      if (hlu != null) {        hluStr=hlu.toString();      }      _existingVolumes.put(normalizedWWN,hluStr);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcHeaderFile=whiteboxHeaderFile.replace(".dep",".hdr");      arcDataFile=whiteboxHeaderFile.replace(".dep",".flt");      (new File(arcHeaderFile)).delete();      (new File(arcDataFile)).delete();      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,WhiteboxRaster.DataType.FLOAT,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File arcFile=new File(arcDataFile);      dataFile.renameTo(arcFile);      boolean success=createHeaderFile(wbr,arcHeaderFile);      if (!success) {        showFeedback("ArcGIS header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ElementCreatorImpl blacklistElements(ElementKey<?,?>... elementKeys){synchronized (registry) {    for (    ElementKey<?,?> elementKey : elementKeys) {      addElement(elementKey).setVisible(false);    }  }  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.191 -0500",hash_original_method="B9A3EF31E8BF5F99FCCA686BC6658BE3",hash_generated_method="C1E09FF5BD1174485EE8889FAFA5A650") public void sendPointerSync(MotionEvent event){  validateNotAppThread();  try {    (IWindowManager.Stub.asInterface(ServiceManager.getService("window"))).injectPointerEvent(event,true);  } catch (  RemoteException e) {  }}  }
class C{  public static <T>LazyQueueX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public long defaultWriteTimeoutMillis(){  return getOrElse(DEFAULT_WRITE_TIMEOUT_MILLIS,DEFAULT_DEFAULT_WRITE_TIMEOUT_MILLIS);}  }
class C{  public IVector(int c){  vector=new int[Math.max(defaultCapacity,c)];}  }
class C{  private void sendNotification(String message){  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,MainActivity.class),0);  Bitmap largeIcon=BitmapFactory.decodeResource(this.getResources(),R.drawable.art_storm);  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.art_clear).setLargeIcon(largeIcon).setContentTitle("Weather Alert!").setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setPriority(NotificationCompat.PRIORITY_HIGH);  mBuilder.setContentIntent(contentIntent);  mNotificationManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  public static final List toIndicesSet(int x[]){  List<Integer> y_list=new ArrayList<Integer>();  for (int j=0; j < x.length; j++) {    if (x[j] > 0) {      y_list.add(j);    }  }  return y_list;}  }
class C{  public void removeFromInactiveList(DownloadInfoRunnable downloadInfoRunnable){  mInactiveList.remove(downloadInfoRunnable);}  }
class C{  @Override public boolean isImage(){  try {    final String path=getURI().getPath();    if (path != null) {      return (patternImage.matcher(path).find());    }  } catch (  URIException e) {    log.error(e.getMessage(),e);  }  return false;}  }
class C{  public static Sequence createSequenceForPrimitive(Object value){  if (value == null)   throw new IllegalArgumentException("value is null");  Type type=Type.forValue(value);  if (!TypedOperation.isNonreceiverType(type)) {    throw new IllegalArgumentException("value is not a (boxed) primitive or String");  }  if (type.isBoxedPrimitive()) {    type=((NonParameterizedType)type).toPrimitive();  }  if (type.equals(JavaTypes.STRING_TYPE) && !Value.stringLengthOK((String)value)) {    throw new IllegalArgumentException("value is a string of length > " + GenInputsAbstract.string_maxlen);  }  return new Sequence().extend(TypedOperation.createPrimitiveInitialization(type,value));}  }
class C{  static Varargs byte_(Varargs args){  LuaString s=args.checkstring(1);  int l=s.m_length;  int posi=posrelat(args.optint(2,1),l);  int pose=posrelat(args.optint(3,posi),l);  int n, i;  if (posi <= 0)   posi=1;  if (pose > l)   pose=l;  if (posi > pose)   return NONE;  n=(int)(pose - posi + 1);  if (posi + n <= pose)   error("string slice too long");  LuaValue[] v=new LuaValue[n];  for (i=0; i < n; i++)   v[i]=valueOf(s.luaByte(posi + i - 1));  return varargsOf(v);}  }
class C{  private static String layoutMenuItem(SeaGlassContext context,FontMetrics fm,SeaGlassContext accContext,String text,FontMetrics fmAccel,String acceleratorText,Icon icon,Icon checkIcon,Icon arrowIcon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewRect,Rectangle iconRect,Rectangle textRect,Rectangle acceleratorRect,Rectangle checkIconRect,Rectangle arrowIconRect,int textIconGap,int menuItemGap,boolean useCheckAndArrow){  SeaGlassPopupMenuUI popupUI=null;  JComponent b=context.getComponent();  Container parent=b.getParent();  if (parent instanceof JPopupMenu) {    popupUI=(SeaGlassPopupMenuUI)SeaGlassLookAndFeel.getUIOfType(((JPopupMenu)parent).getUI(),SeaGlassPopupMenuUI.class);  }  context.getStyle().getGraphicsUtils(context).layoutText(context,fm,text,icon,horizontalAlignment,verticalAlignment,horizontalTextPosition,verticalTextPosition,viewRect,iconRect,textRect,textIconGap);  if ((acceleratorText == null) || acceleratorText.equals("")) {    acceleratorRect.width=acceleratorRect.height=0;    acceleratorText="";  } else {    SynthStyle style=accContext.getStyle();    acceleratorRect.width=style.getGraphicsUtils(accContext).computeStringWidth(accContext,fmAccel.getFont(),fmAccel,acceleratorText);    acceleratorRect.height=fmAccel.getHeight();  }  if (useCheckAndArrow) {    if (checkIcon != null) {      checkIconRect.width=SeaGlassIcon.getIconWidth(checkIcon,context);      checkIconRect.height=SeaGlassIcon.getIconHeight(checkIcon,context);    } else {      checkIconRect.width=checkIconRect.height=0;    }    if (arrowIcon != null) {      arrowIconRect.width=SeaGlassIcon.getIconWidth(arrowIcon,context);      arrowIconRect.height=SeaGlassIcon.getIconHeight(arrowIcon,context);    } else {      arrowIconRect.width=arrowIconRect.height=0;    }  }  Rectangle labelRect=iconRect.union(textRect);  if (SeaGlassLookAndFeel.isLeftToRight(context.getComponent())) {    textRect.x+=menuItemGap;    iconRect.x+=menuItemGap;    acceleratorRect.x=viewRect.x + viewRect.width - arrowIconRect.width - menuItemGap - acceleratorRect.width;    if (useCheckAndArrow) {      checkIconRect.x=viewRect.x + menuItemGap;      textRect.x+=menuItemGap + checkIconRect.width;      iconRect.x+=menuItemGap + checkIconRect.width;      arrowIconRect.x=viewRect.x + viewRect.width - menuItemGap - arrowIconRect.width;    }    if (popupUI != null) {      int thisTextOffset=popupUI.adjustTextOffset(textRect.x - viewRect.x);      textRect.x=thisTextOffset + viewRect.x;      if (icon != null) {        if (horizontalTextPosition == SwingConstants.TRAILING || horizontalTextPosition == SwingConstants.RIGHT) {          int thisIconOffset=popupUI.adjustIconOffset(iconRect.x - viewRect.x);          iconRect.x=thisIconOffset + viewRect.x;        } else         if (horizontalTextPosition == SwingConstants.LEADING || horizontalTextPosition == SwingConstants.LEFT) {          iconRect.x=textRect.x + textRect.width + menuItemGap;        } else {          int maxIconValue=popupUI.adjustIconOffset(0);          iconRect.x=Math.max(textRect.x + textRect.width / 2 - iconRect.width / 2,maxIconValue + viewRect.x);        }      }    }  } else {    textRect.x-=menuItemGap;    iconRect.x-=menuItemGap;    acceleratorRect.x=viewRect.x + arrowIconRect.width + menuItemGap;    if (useCheckAndArrow) {      checkIconRect.x=viewRect.x + viewRect.width - menuItemGap - checkIconRect.width;      textRect.x-=menuItemGap + checkIconRect.width;      iconRect.x-=menuItemGap + checkIconRect.width;      arrowIconRect.x=viewRect.x + menuItemGap;    }    if (popupUI != null) {      int thisTextOffset=viewRect.x + viewRect.width - textRect.x - textRect.width;      thisTextOffset=popupUI.adjustTextOffset(thisTextOffset);      textRect.x=viewRect.x + viewRect.width - thisTextOffset - textRect.width;      if (icon != null) {        if (horizontalTextPosition == SwingConstants.TRAILING || horizontalTextPosition == SwingConstants.LEFT) {          int thisIconOffset=viewRect.x + viewRect.width - iconRect.x - iconRect.width;          thisIconOffset=popupUI.adjustIconOffset(thisIconOffset);          iconRect.x=viewRect.x + viewRect.width - thisIconOffset - iconRect.width;        } else         if (horizontalTextPosition == SwingConstants.LEADING || horizontalTextPosition == SwingConstants.RIGHT) {          iconRect.x=textRect.x - menuItemGap - iconRect.width;        } else {          int maxIconValue=popupUI.adjustIconOffset(0);          iconRect.x=textRect.x + textRect.width / 2 - iconRect.width / 2;          if (iconRect.x + iconRect.width > viewRect.x + viewRect.width - maxIconValue) {            iconRect.x=iconRect.x=viewRect.x + viewRect.width - maxIconValue - iconRect.width;          }        }      }    }  }  acceleratorRect.y=labelRect.y + (labelRect.height / 2) - (acceleratorRect.height / 2);  if (useCheckAndArrow) {    arrowIconRect.y=labelRect.y + (labelRect.height / 2) - (arrowIconRect.height / 2);    checkIconRect.y=labelRect.y + (labelRect.height / 2) - (checkIconRect.height / 2);  }  return text;}  }
class C{  public String write(Long value){  return value.toString();}  }
class C{  public ZipShort(int value){  this.value=value;}  }
class C{  public boolean start(OutputStream os){  if (os == null)   return false;  boolean ok=true;  closeStream=false;  out=os;  try {    writeString("GIF89a");  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int i=0;  for (i=0; i < len; i++) {    int ch1=is.read();    int ch2=is.read();    if (ch2 < 0)     return i == 0 ? -1 : i;    cbuf[off + i]=(char)((ch2 << 8) + ch1);  }  return i;}  }
class C{  public void push(double x){  double delta, deltaN, deltaN2, term1;  long n1=entries;  entries++;  delta=x - mean1;  deltaN=delta / entries;  deltaN2=deltaN * deltaN;  term1=delta * deltaN * n1;  mean1+=deltaN;  mean4+=term1 * deltaN2 * (entries * entries - 3 * entries + 3) + 6 * deltaN2 * mean2 - 4 * deltaN * mean3;  mean3+=term1 * deltaN * (entries - 2) - 3 * deltaN * mean2;  mean2+=term1;}  }
class C{  private void startParameter(Attributes atts){  String name=atts.getValue(NAME);  String description=atts.getValue(DESCRIPTION);  String type=atts.getValue(TYPE);  pw.println("<tr valign=\"top\">");  pw.println("  <td></td>");  pw.println("  <td width=\"10\"></td>");  pw.println("  <td>" + name + "</td>");  pw.println("  <td>" + type + "</td>");  pw.println("  <td colspan=\"2\">" + description + "</td>");  pw.println("</tr>");}  }
class C{  @Dev public TriggerInListCondition(final List<String> trigger){  triggers=new TriggerList(trigger);}  }
class C{  public void readFromFileSystem(final File propertyFileLocation) throws ConfigurationException {  properties=readPropertyFileFromFileSystem(propertyFileLocation);}  }
class C{  private void drawCircleDown(@NonNull Canvas canvas,float step,float radius){  canvas.drawCircle(xCoordinate + step,getMeasuredHeight() / 2,bounceDotRadius - radius,endPaint);}  }
class C{  public static void debug(final String message){  debugLogger.accept(message);}  }
class C{  @Override public void deleteRow() throws SQLException {  try {    debugCodeCall("deleteRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    getUpdatableRow().deleteRow(result.currentRow());    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public NewAppStateVisualPanel1(){  initComponents();}  }
class C{  protected final void writeOut(byte[] data,int offset,int length) throws IOException {  if (raf != null) {    raf.write(data,offset,length);  } else {    out.write(data,offset,length);  }}  }
class C{  public String fetchWeatherCurrentByLocation(Double longitude,Double latitude,Integer userId,String language,String units){  String cityFound;  String responseToUser;  try {    String completURL=BASEURL + CURRENTPATH + "?lat="+ URLEncoder.encode(latitude + "","UTF-8")+ "&lon="+ URLEncoder.encode(longitude + "","UTF-8")+ CURRENTPARAMS.replace("@language@",language).replace("@units@",units)+ APIIDEND;    ;    CloseableHttpClient client=HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();    HttpGet request=new HttpGet(completURL);    CloseableHttpResponse response=client.execute(request);    HttpEntity ht=response.getEntity();    BufferedHttpEntity buf=new BufferedHttpEntity(ht);    String responseString=EntityUtils.toString(buf,"UTF-8");    JSONObject jsonObject=new JSONObject(responseString);    if (jsonObject.getInt("cod") == 200) {      cityFound=jsonObject.getString("name") + " (" + jsonObject.getJSONObject("sys").getString("country")+ ")";      saveRecentWeather(userId,cityFound,jsonObject.getInt("id"));      responseToUser=String.format(LocalisationService.getInstance().getString("weatherCurrent",language),cityFound,convertCurrentWeatherToString(jsonObject,language,units,null));    } else {      BotLogger.warn(LOGTAG,jsonObject.toString());      responseToUser=LocalisationService.getInstance().getString("cityNotFound",language);    }  } catch (  Exception e) {    BotLogger.error(LOGTAG,e);    responseToUser=LocalisationService.getInstance().getString("errorFetchingWeather",language);  }  return responseToUser;}  }
class C{  public boolean isCellEditable(EventObject anEvent){  return true;}  }
class C{  public void reset(){  if (state == State.READ) {    throw new IllegalStateException("Iterator has not been marked or the mark has been invalidated");  }  replayIterator=replayBuffer.iterator();  state=State.REPLAY;}  }
class C{  public StackedAreaChart(String group,String field,String[] columns,double threshold){  super(group);  this.columns=columns;  baseline=new double[columns.length];  peaks=new double[columns.length];  poly=new float[4 * columns.length];  m_field=field;  m_start=PrefuseLib.getStartField(field);  m_end=PrefuseLib.getEndField(field);  setThreshold(threshold);  m_model=new NumberRangeModel(0,1,0,1);}  }
class C{  public Map<String,Object> memberDefaults(){  return memberDefaults;}  }
class C{  @Override public boolean isDone(){  for (  TestSuiteFitnessFunction fitness : fitnessFunctions) {    if (fitness.isMaximizationFunction() || fitness.getFitness(suite) != 0.0)     return false;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void assignToProduct(DataService mgr,Category category,Product product,Marketplace mp) throws NonUniqueBusinessKeyException, ObjectNotFoundException {  CatalogEntry ce=new CatalogEntry();  ce.setProduct(product);  ce.setMarketplace(mp);  ce.setAnonymousVisible(true);  mgr.persist(ce);  assignToCatalogEntry(mgr,category,ce);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void renumberLines(int step){  int number=step;  MDDOrderLine[] lines=getLines(true,null);  for (int i=0; i < lines.length; i++) {    MDDOrderLine line=lines[i];    line.setLine(number);    line.save(get_TrxName());    number+=step;  }  m_lines=null;}  }
class C{  public OMText(double lt,double ln,float offX,float offY,String aString,Font font,int just){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  lat=lt;  lon=ln;  point=new Point((int)offX,(int)offY);  setData(aString);  f=font;  justify=just;}  }
class C{  public WordPair_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_Word1=jcas.getRequiredFeatureDE(casType,"Word1","uima.cas.String",featOkTst);  casFeatCode_Word1=(null == casFeat_Word1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Word1).getCode();  casFeat_Word2=jcas.getRequiredFeatureDE(casType,"Word2","uima.cas.String",featOkTst);  casFeatCode_Word2=(null == casFeat_Word2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Word2).getCode();  casFeat_Pos1=jcas.getRequiredFeatureDE(casType,"Pos1","de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.pos.POS",featOkTst);  casFeatCode_Pos1=(null == casFeat_Pos1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Pos1).getCode();  casFeat_Pos2=jcas.getRequiredFeatureDE(casType,"Pos2","de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.pos.POS",featOkTst);  casFeatCode_Pos2=(null == casFeat_Pos2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Pos2).getCode();  casFeat_Token1=jcas.getRequiredFeatureDE(casType,"Token1","de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token",featOkTst);  casFeatCode_Token1=(null == casFeat_Token1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Token1).getCode();  casFeat_Token2=jcas.getRequiredFeatureDE(casType,"Token2","de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token",featOkTst);  casFeatCode_Token2=(null == casFeat_Token2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Token2).getCode();}  }
class C{  public Command handleFlowRemoved(IOFSwitch sw,OFFlowRemoved msg,FloodlightContext cntx){  long cookie=msg.getCookie();  if (AppCookie.extractApp(cookie) == STATIC_FLOW_APP_ID) {    if (msg.getReason() != OFFlowRemoved.OFFlowRemovedReason.OFPRR_DELETE)     log.error("Got a FlowRemove message for a infinite " + "timeout flow: {} from switch {}",msg,sw);    return Command.STOP;  }  return Command.CONTINUE;}  }
class C{  public ExchangeRate(){  this.rate_=Constants.NULL_REAL;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log10(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DelegatingDatagramSocket() throws SocketException {  this(null,new InetSocketAddress(0));}  }
class C{  public static Sector warpImageWithWorldFile(BufferedImage sourceImage,AVList worldFileParams,BufferedImage destImage){  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.SourceImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (worldFileParams == null) {    String message=Logging.getMessage("nullValue.ParamsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (destImage == null) {    String message=Logging.getMessage("nullValue.DestinationImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Matrix imageToGeographic=Matrix.fromImageToGeographic(worldFileParams);  if (imageToGeographic == null) {    String message=Logging.getMessage("WorldFile.UnrecognizedValues","");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  List<LatLon> corners=computeImageCorners(sourceImage.getWidth(),sourceImage.getHeight(),imageToGeographic);  Sector destSector=Sector.boundingSector(corners);  if (Sector.isSector(corners) && destSector.isSameSector(corners)) {    getScaledCopy(sourceImage,destImage);  } else {    Matrix transform=Matrix.IDENTITY;    transform=transform.multiply(Matrix.fromGeographicToImage(worldFileParams));    transform=transform.multiply(Matrix.fromImageToGeographic(destImage.getWidth(),destImage.getHeight(),destSector));    warpImageWithTransform(sourceImage,destImage,transform);  }  return destSector;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4mfPackage.SOURCE_FRAGMENT___COMPARE_BY_FRAGMENT_TYPE__SOURCEFRAGMENT:    return compareByFragmentType((SourceFragment)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  boolean unrecoverableError(){  if (messager.errorRaised())   return true;  for (  JCDiagnostic d : deferredDiagnosticHandler.getDiagnostics()) {switch (d.getKind()) {case WARNING:      if (werror)       return true;    break;case ERROR:  if (fatalErrors || !d.isFlagSet(RECOVERABLE))   return true;break;}}return false;}  }
class C{  public boolean isModified(){  return false;}  }
class C{  @RpcMethod public void upgrade(AsyncMethodCallback<AgentControl.AsyncClient.upgrade_call> handler) throws RpcException {  ensureClient();  UpgradeRequest upgradeRequest=new UpgradeRequest();  clientProxy.setTimeout(UPGRADE_TIMEOUT_MS);  logger.info("upgrade target: {}, request {}",getHostIp(),upgradeRequest);  try {    clientProxy.upgrade(upgradeRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  private void incUsage(int amount){  if (amount < 0 && !this.destroyed) {    Assert.assertTrue(this.usageCount - amount >= 0,amount + " cannot be subtracted from usageCount " + this.usageCount);  }  this.usageCount+=amount;}  }
class C{  public void offer(ByteBuffer buf) throws BufferOverflowException {  if (getWriteableBytesRemaining() < buf.remaining())   throw new BufferOverflowException();  if (!buf.hasRemaining())   return;  flushWriteChunk();  bytesWritten+=buf.remaining();  list.addLast(buf);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___IS_PROVIDED_BY_RUNTIME:    return isProvidedByRuntime();case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___GET_TYPE_ACCESS_MODIFIER:  return getTypeAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public static void loadAppProperties() throws IOException {  ConfigProperties.loadDeploymentProperties(m_AppConfigLoad,PROPERTIES_PROPERTY_FILE);}  }
class C{  public void write(PrintWriter outfile){  setBuckets();  fillHistogram();  writeToPrintWriter(outfile);}  }
class C{  @Ignore @Test public void test_DR_PGS_2NODES_1NODESDOWN_Validate_Receiver() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  Thread.sleep(60000);  ;  AsyncInvocation inv1=vm4.invokeAsync(null);  Wait.pause(1000);  AsyncInvocation inv2=vm5.invokeAsync(null);  try {    inv1.join();    inv2.join();  } catch (  Exception e) {    Assert.fail("UnExpected Exception",e);  }  Integer size=(Integer)vm4.invoke(null);  LogWriterUtils.getLogWriter().info("The size of the queue is in vm4 " + size);  vm4.invoke(null);  size=(Integer)vm4.invoke(null);  LogWriterUtils.getLogWriter().info("The size of the queue is in vm4 " + size);  vm2.invoke(null);}  }
class C{  public Digraph digraph(){  return graph;}  }
class C{  protected TransitionSpecificationImpl(){  super();}  }
class C{  final long now(){  return System.nanoTime();}  }
class C{  public AuthorizationDataEntry(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x00) {    adType=der.getData().getBigInteger().intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x01) {    adData=der.getData().getOctetString();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public static short parseCoordinateSystem(Element e,String attr,String coordinateSystem,BridgeContext ctx){  if (SVG_USER_SPACE_ON_USE_VALUE.equals(coordinateSystem)) {    return USER_SPACE_ON_USE;  } else   if (SVG_OBJECT_BOUNDING_BOX_VALUE.equals(coordinateSystem)) {    return OBJECT_BOUNDING_BOX;  } else {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,coordinateSystem});  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, TransformerException {  try {    stream.defaultReadObject();  } catch (  ClassNotFoundException cnfe) {    throw new TransformerException(cnfe);  }}  }
class C{  private void testGetS3KeyPrefix(String namespace,List<String> subPartitionValues,Integer businessObjectDataVersion,String storageName,boolean useSsl) throws Exception {  dataBridgeWebClient.regServerAccessParamsDto.setUseSsl(useSsl);  DataBridgeBaseManifestDto manifest=getUploaderInputManifestDto();  manifest.setNamespace(namespace);  manifest.setSubPartitionValues(subPartitionValues);  manifest.setStorageName(storageName);  Boolean createNewVersion=false;  S3KeyPrefixInformation s3KeyPrefix=dataBridgeWebClient.getS3KeyPrefix(manifest,businessObjectDataVersion,createNewVersion);  assertNotNull("s3KeyPrefix is null",s3KeyPrefix);}  }
class C{  public void handleRequest(){synchronized (this) {    waitingCount++;  }}  }
class C{  @SuppressWarnings("unchecked") public Object clone(){  try {    HashSet<E> newSet=(HashSet<E>)super.clone();    newSet.map=(HashMap<E,Object>)map.clone();    return newSet;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static double invSqrtQuick(final double value){  if (USE_JDK_MATH) {    return 1 / Math.sqrt(value);  }  return Double.longBitsToDouble(0x5FE6EB50C7B537A9L - (Double.doubleToRawLongBits(value) >> 1));}  }
class C{  @Deprecated public static String encodePostBody(Bundle parameters,String boundary){  if (parameters == null)   return "";  StringBuilder sb=new StringBuilder();  for (  String key : parameters.keySet()) {    Object parameter=parameters.get(key);    if (!(parameter instanceof String)) {      continue;    }    sb.append("Content-Disposition: form-data; name=\"" + key + "\"\r\n\r\n"+ (String)parameter);    sb.append("\r\n" + "--" + boundary + "\r\n");  }  return sb.toString();}  }
class C{  public static List<VOConfigurationSetting> toVOConfigurationSettings(List<ConfigurationSetting> settings){  List<VOConfigurationSetting> result=new ArrayList<VOConfigurationSetting>();  for (  ConfigurationSetting setting : settings) {    result.add(toValueObject(setting));  }  return result;}  }
class C{  public static Accountable namedAccountable(String description,long bytes){  return namedAccountable(description,Collections.<Accountable>emptyList(),bytes);}  }
class C{  public long snapshotSize(){  return snapshotBytes;}  }
class C{  public synchronized CodeTemplate removeTemplate(String id){  if (id == null) {    throw new IllegalArgumentException("id cannot be null");  }  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate template=(CodeTemplate)i.next();    if (id.equals(template.getID())) {      i.remove();      return template;    }  }  return null;}  }
class C{  @Override public void addDeviceKey(KeyPair deviceKey,String deviceName){  try {    X509Certificate certChain=CryptCore.createSelfSignedX509Certificate(deviceKey.getPrivate(),deviceKey.getPublic(),this);    this.keyStore.setKeyEntry(deviceName,deviceKey.getPrivate(),KeyConstants.OPEN_KEYSTORE_PASSWORD,new java.security.cert.Certificate[]{certChain});  } catch (  KeyStoreException e) {    logger.error("Could not add device key for device " + deviceName + " to identity's keystore",e);  }}  }
class C{  public ValueNumber createFreshValue(){  ValueNumber result=ValueNumber.createValueNumber(getNumValuesAllocated());  allocatedValueList.add(result);  return result;}  }
class C{  private synchronized int readRecordLength() throws IOException {  if (in.getPos() >= end) {    return -1;  }  int length=in.readInt();  if (sync != null && length == SYNC_ESCAPE) {    in.readFully(syncCheck);    if (!Arrays.equals(sync,syncCheck)) {      throw new IOException("File is corrupt!");    }    syncSeen=true;    if (in.getPos() >= end) {      return -1;    }    length=in.readInt();  } else {    syncSeen=false;  }  return length;}  }
class C{  public synchronized void mark(int readlimit){}  }
class C{  public void unread(){  filePosition--;}  }
class C{  public void addPopupMenuListener(PopupMenuListener l){  listenerList.add(PopupMenuListener.class,l);}  }
class C{  @Override public boolean nullsAreSortedAtEnd(){  debugCodeCall("nullsAreSortedAtEnd");  return false;}  }
class C{  public static String readResourceToStringChecked(Class<?> clazz,String fn) throws IOException {  try (InputStream stream=getResourceAsStream(clazz,fn)){    return IOUtils.toString(asReaderUTF8Lenient(stream));  } }  }
class C{  public static ComponentUI createUI(JComponent pane){  return new StyledTabbedPaneUI(StyleUtil.getStyle());}  }
class C{  public CacheContinuousQueryEntry handle(CacheContinuousQueryEntry e){  assert e != null;  if (e.isFiltered()) {    Long last=buf.lastx();    Long first=buf.firstx();    if (last != null && first != null && last - first >= MAX_BUFF_SIZE) {      NavigableSet<Long> prevHoles=buf.subSet(first,true,last,true);      GridLongList filteredEvts=new GridLongList((int)(last - first));      int size=0;      Long cntr;      while ((cntr=prevHoles.pollFirst()) != null) {        filteredEvts.add(cntr);        ++size;      }      filteredEvts.truncate(size,true);      e.filteredEvents(filteredEvts);      return e;    }    if (lastFiredCntr.get() > e.updateCounter() || e.updateCounter() == 1)     return e; else {      buf.add(e.updateCounter());      if (lastFiredCntr.get() > e.updateCounter() && buf.contains(e.updateCounter())) {        buf.remove(e.updateCounter());        return e;      } else       return null;    }  } else {    long prevVal=updateFiredCounter(e.updateCounter());    if (prevVal == -1)     return e; else {      NavigableSet<Long> prevHoles=buf.subSet(prevVal,true,e.updateCounter(),true);      GridLongList filteredEvts=new GridLongList((int)(e.updateCounter() - prevVal));      int size=0;      Long cntr;      while ((cntr=prevHoles.pollFirst()) != null) {        filteredEvts.add(cntr);        ++size;      }      filteredEvts.truncate(size,true);      e.filteredEvents(filteredEvts);      return e;    }  }}  }
class C{  public TsDagToPag(Graph dag){  this.dag=dag;  int numLags=1;  List<Node> variables=dag.getNodes();  List<Integer> laglist=new ArrayList<>();  IKnowledge knowledge=new Knowledge2();  int lag;  for (  Node node : variables) {    String varName=node.getName();    String tmp;    if (varName.indexOf(':') == -1) {      lag=0;      laglist.add(lag);    } else {      tmp=varName.substring(varName.indexOf(':') + 1,varName.length());      lag=Integer.parseInt(tmp);      laglist.add(lag);    }  }  numLags=Collections.max(laglist);  for (  Node node : variables) {    String varName=node.getName();    String tmp;    if (varName.indexOf(':') == -1) {      lag=0;      laglist.add(lag);    } else {      tmp=varName.substring(varName.indexOf(':') + 1,varName.length());      lag=Integer.parseInt(tmp);      laglist.add(lag);    }    knowledge.addToTier(numLags - lag,node.getName());  }  this.setKnowledge(knowledge);}  }
class C{  private void scanNumber(int pos,int radix){  this.radix=radix;  int digitRadix=(radix == 8 ? 10 : radix);  boolean seendigit=false;  if (reader.digit(pos,digitRadix) >= 0) {    seendigit=true;    scanDigits(pos,digitRadix);  }  if (radix == 16 && reader.ch == '.') {    scanHexFractionAndSuffix(pos,seendigit);  } else   if (seendigit && radix == 16 && (reader.ch == 'p' || reader.ch == 'P')) {    scanHexExponentAndSuffix(pos);  } else   if (digitRadix == 10 && reader.ch == '.') {    reader.putChar(true);    scanFractionAndSuffix(pos);  } else   if (digitRadix == 10 && (reader.ch == 'e' || reader.ch == 'E' || reader.ch == 'f' || reader.ch == 'F' || reader.ch == 'd' || reader.ch == 'D')) {    scanFractionAndSuffix(pos);  } else {    if (reader.ch == 'l' || reader.ch == 'L') {      reader.scanChar();      tk=TokenKind.LONGLITERAL;    } else {      tk=TokenKind.INTLITERAL;    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override public void close(){  this.cluster.disconnect();}  }
class C{  public static double stdDev(double[] array,double mean){  return stdDev(array,mean,array.length);}  }
class C{  private static CompiledMethod optCompile(NormalMethod method,CompilationPlan plan) throws OptimizingCompilerException {  if (VM.BuildForOptCompiler) {    if (VM.VerifyAssertions) {      VM._assert(compilationInProgress,"Failed to acquire compilationInProgress \"lock\"");    }    Callbacks.notifyMethodCompile(method,CompiledMethod.OPT);    long start=0;    CompiledMethod cm=null;    try {      if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {        start=Time.nanoTime();      }      cm=OptimizingCompiler.compile(plan);    }  finally {      if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {        long end=Time.nanoTime();        if (cm != null) {          double compileTime=Time.nanosToMillis(end - start);          cm.setCompilationTime(compileTime);          record(OPT_COMPILER,method,cm);        }      }    }    return cm;  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return null;  }}  }
class C{  public final int size(){  if (GWT.isScript()) {    return jsArray.size();  } else {    return javaArray.size();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static long[] pattern(char c){  if (c >= 'A' && c <= 'Z') {    return LETTERS[c - 'A'];  }  if (c >= 'a' && c <= 'z') {    return LETTERS[c - 'a'];  } else   if (c >= '0' && c <= '9') {    return NUMBERS[c - '0'];  } else {    return ERROR_GAP;  }}  }
class C{  private void activatePerspective(final PerspectiveType perspective){  removeAll();  add(perspective == PerspectiveType.StandardPerspective ? m_standardBottomPanel : m_debugBottomPanel);  updateUI();}  }
class C{  public Vector4f fma(float a,Vector4fc b){  x+=a * b.x();  y+=a * b.y();  z+=a * b.z();  w+=a * b.w();  return this;}  }
class C{  public CoordFloatString(int tuplecount,int tuplesize,BinaryFile input) throws FormatException {  tcount=tuplecount;  tsize=tuplesize;  int totallen=tcount * tsize;  vals=new double[totallen];  try {    input.readFloatArray(vals,0,totallen);  } catch (  EOFException e) {    throw new FormatException("CoordFloatString EOFException");  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  SVGOMElement e=(SVGOMElement)n;  e.prefix=prefix;  e.initializeAllLiveAttributes();  return n;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return Boolean.valueOf(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsCreateDirectory(getString(stack)) == MiniClientSageRenderer.FS_RV_SUCCESS);  } else   return Boolean.valueOf(getFile(stack).mkdirs());}  }
class C{  @Override protected int calcAttackValue(){  int av=0;  AmmoType atype=(AmmoType)ammo.getType();  if (atype.hasFlag(AmmoType.F_AR10_KILLER_WHALE)) {    av=4;  } else   if (atype.hasFlag(AmmoType.F_AR10_WHITE_SHARK)) {    av=3;  } else {    av=2;  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return av;}  }
class C{  public String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public void addChannel(Channel channel) throws IllegalArgumentException {  if (channel == null) {    throw new IllegalArgumentException("Cannot add null channel.");  }  this.subChannels.add(channel);  channel.setParent(this);}  }
class C{  private static void populateAccessRequest(AccessRequest accessRequest){  accessRequest.setAccessLicenseNumber(props.getProperty(LICENSE_NUMBER));  accessRequest.setUserId(props.getProperty(USER_NAME));  accessRequest.setPassword(props.getProperty(PASSWORD));}  }
class C{  public static JavacTool create(){  return new JavacTool();}  }
class C{  @NotNull private String formatMessage(@NotNull final String path){  String pattern=path;  if (ROOT_FOLDER.equals(pattern)) {    return constant.addToIndexAllChanges();  }  if (pattern.length() > 50) {    pattern=pattern.substring(0,50) + "...";  }  if (getExplorerSelection().getHeadElement() instanceof FolderReferenceNode) {    return constant.addToIndexFolder(pattern).asString();  } else {    return constant.addToIndexFile(pattern).asString();  }}  }
class C{  public static int deserializeInt(byte[] buffer){  Preconditions.checkArgument(buffer.length == Type.INTEGER.getByteSize());  return deserializeInt(buffer,new MutableInt(0));}  }
class C{  private boolean isLockGrantorVersion(DLockGrantor dlockGrantor,long grantorVersion){  if (dlockGrantor == null) {    return false;  }  return dlockGrantor.getVersionId() == grantorVersion;}  }
class C{  public boolean isAssignableFrom(Type type){  return javaClass.isAssignableFrom(type.javaClass());}  }
class C{  @Override public void execute(JobExecutionContext context) throws JobExecutionException {  JobDataMap map=context.getJobDetail().getJobDataMap();  AlertService alertService=(AlertService)map.get("AlertService");  AuditService auditService=(AuditService)map.get("AuditService");  if (map.containsKey(LOCK_TYPE)) {    lockType=(LockType)map.get(LOCK_TYPE);  }  if (map.containsKey(CRON_JOB)) {    job=(CronJob)map.get(CRON_JOB);  }  try {    if (!alertService.isDisposed()) {      if (LockType.ALERT_SCHEDULING.equals(lockType)) {        alertService.enqueueAlerts(Arrays.asList(new Alert[]{Alert.class.cast(job)}));      } else {        throw new SystemException("Unsupported lock type " + lockType);      }    }  } catch (  Exception ex) {    auditService.createAudit("Could not enqueue scheduled job. " + ex.getMessage(),JPAEntity.class.cast(job));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void processAction(ContactsExample example,ContactsExampleParameters parameters) throws IOException, ServiceException {  Actions action=parameters.getAction();  System.err.println("Executing action: " + action);switch (action) {case LIST:    example.listEntries(parameters);  break;case QUERY:example.queryEntries(parameters);break;case ADD:example.addEntry(parameters);break;case DELETE:example.deleteEntry(parameters);break;case UPDATE:example.updateEntry(parameters);break;default :System.err.println("No such action");}}  }
class C{  public SuggestRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  static public void processHTTPRequest(HttpServletRequest request,HttpServletResponse response,ServletContext servletContext) throws ServletException, IOException {  String usertoken=request.getParameter(Constants.USERTOKEN);  String instanceId=request.getParameter(Constants.INSTANCE_ID);  String bssId=request.getParameter(Constants.CM_ID);  String subKey=request.getParameter(Constants.SUB_KEY);  String userId=BssClient.resolveUsertoken(request.getSession(),usertoken,instanceId,subKey,bssId);  if (userId == null || userId.length() == 0) {    logger.error("Error: missing userId!");    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    return;  }  String forward=wsProxyInfo.getForward();  logger.debug("Forward to " + forward);  RequestDispatcher rd=servletContext.getRequestDispatcher(forward);  rd.forward(request,response);}  }
class C{  public static Boolean isDecimalQuantityOrderAllowed(Delegator delegator,String productId,String productStoreId) throws GenericEntityException {  if (UtilValidate.isEmpty(productStoreId)) {    return Boolean.TRUE;  }  String allowDecimalStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache(true).queryOne().getString("orderDecimalQuantity");  String allowDecimalProduct=EntityQuery.use(delegator).from("Product").where("productId",productId).cache(true).queryOne().getString("orderDecimalQuantity");  if ("N".equals(allowDecimalProduct) || (UtilValidate.isEmpty(allowDecimalProduct) && "N".equals(allowDecimalStore))) {    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public Trie lookup(char ch){  int i=Arrays.binarySearch(childMap,ch);  return i >= 0 ? children[i] : null;}  }
class C{  public boolean isPendingOMADownload(long downloadId){  return mPendingOMADownloads.get(downloadId) != null;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  protected void pickContainedVertices(VisualizationViewer<V,E> vv,Point2D down,Point2D out,boolean clear){  Layout<V,E> layout=vv.getGraphLayout();  PickedState<V> pickedVertexState=vv.getPickedVertexState();  Rectangle2D pickRectangle=new Rectangle2D.Double();  pickRectangle.setFrameFromDiagonal(down,out);  if (pickedVertexState != null) {    if (clear) {      pickedVertexState.clear();    }    GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();    Collection<V> picked=pickSupport.getVertices(layout,pickRectangle);    for (    V v : picked) {      pickedVertexState.pick(v,true);    }  }}  }
class C{  private List<CopycatServer> createServers(int live,int total) throws Throwable {  List<CopycatServer> servers=new ArrayList<>();  for (int i=0; i < total; i++) {    members.add(nextMember(Member.Type.ACTIVE));  }  for (int i=0; i < live; i++) {    CopycatServer server=createServer(members.get(i));    server.bootstrap(members.stream().map(null).collect(Collectors.toList())).thenRun(null);    servers.add(server);  }  await(30000 * live,live);  return servers;}  }
class C{  public boolean isShutdown(){  return scheduler.isShutdown() && checkExecutor.isShutdown() && serverSocketExecutor.isShutdown();}  }
class C{  public IndexBasedQuery(HGIndex<Object,Object> index,ScanType scanType){  this.index=index;  this.scanType=scanType;}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  return encode(pString,getDefaultCharset());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public InterpreterGroup(){  getId();  allInterpreterGroups.put(id,this);}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  g.drawLine(0,0,100,100);}  }
class C{  public void handleOnRequestDenied(){  _denyCounter++;}  }
class C{  public void performSetPosition(Node node,double lon,double lat){  if (node != null) {    createCheckpoint(R.string.undo_action_movenode);    int lonE7=(int)(lon * 1E7d);    int latE7=(int)(lat * 1E7d);    getDelegator().updateLatLon(node,latE7,lonE7);    viewBox.moveTo(lonE7,latE7);    map.invalidate();  }}  }
class C{  public static byte[] readData(String resourcePath) throws IOException {  InputStream is=MessageSigner.class.getResourceAsStream(resourcePath);  if (is == null) {    throw new IOException(String.format("Can't open resource \"%s\"",resourcePath));  }  DataInputStream dis=new DataInputStream(is);  byte[] data=new byte[dis.available()];  dis.readFully(data);  dis.close();  return data;}  }
class C{  public void loadPreviewImage(JLabel bp,Entity entity){  IPlayer player=client.getGame().getPlayer(entity.getOwnerId());  loadPreviewImage(bp,entity,player);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  TextTransfer textTransfer=new TextTransfer();  textTransfer.setClipboardContents(sendBitcoinPanel.getAddress());}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  private void actionDelete() throws PageException {  checkFile(pageContext,securityManager,file,serverPassword,false,false,false,false);  setACL(pageContext,file,acl);  try {    if (!file.delete())     throw new ApplicationException("can't delete file [" + file + "]");  } catch (  Throwable t) {    throw new ApplicationException(t.getMessage());  }}  }
class C{  protected void handleExpandControlClick(TreePath path,int mouseX,int mouseY){  toggleExpandState(path);}  }
class C{  public void clearCurrentTopology(){  this.clear();  linksUpdated=true;  dtLinksUpdated=true;  tunnelPortsUpdated=true;  createNewInstance("startup");  lastUpdateTime=new Date();}  }
class C{  private void searchJarPath(File file,List<String> paths){  if (file.getName().toLowerCase().endsWith(".jar") && file.isFile()) {    try {      JarInputStream jis;      JarEntry je;      jis=new JarInputStream(new BufferedInputStream(new FileInputStream(file)));      je=jis.getNextJarEntry();      while (je != null) {        if (je.getName().startsWith(helproot)) {          String[] name=je.getName().split("/");          if (name.length > 1) {            addToList(paths,name[1]);          }        }        je=jis.getNextJarEntry();      }      jis.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public FIXRuntimeException(String message){  super(message);}  }
class C{  public boolean isDuplicate(){  return (PickerUtilities.isSameLocalDate(newDate,oldDate));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String attr;  String namespaceURI;  String localName;  String prefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  ((Element)testAddr).removeAttributeNS("http://www.nist.gov","local1");  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  addrAttr=((Element)testAddr).getAttributeNodeNS("http://www.nist.gov","local1");  attr=((Element)testAddr).getAttributeNS("http://www.nist.gov","local1");  namespaceURI=addrAttr.getNamespaceURI();  localName=addrAttr.getLocalName();  prefix=testAddr.getPrefix();  assertEquals("attr","FALSE",attr);  assertEquals("uri","http://www.nist.gov",namespaceURI);  assertEquals("lname","local1",localName);  assertEquals("prefix","emp",prefix);}  }
class C{  void error(String msg){  System.err.println(msg);  errors++;}  }
class C{  public Range(String str) throws NumberFormatException {  if (str.indexOf("-") != str.lastIndexOf("-")) {    throw new Error("Ranges with negative values not supported");  }  if (str.substring(1).contains("-")) {    String[] vals=str.split("-");    this.min=Double.parseDouble(vals[0]);    this.max=Double.parseDouble(vals[1]);  } else {    this.min=this.max=Double.parseDouble(str);  }  checkRangeValidity(min,max);}  }
class C{  public static ExternalSortable[] readArrayOfExternalSortable(InputStream in,ExternalSortable ex) throws IOException {  Vector A=new Vector();  int i=0;  try {    do {      A.addElement(ex.read(in));      i++;    } while (true);  } catch (  IOException e) {  }  ExternalSortable[] eA=new ExternalSortable[i];  for (int j=0; j < i; j++)   eA[j]=(ExternalSortable)A.elementAt(j);  return eA;}  }
class C{  public void irvineHash(byte[] buff,int length){  irvineHash(buff,0,length);}  }
class C{  public NoSystemException(String message){  super(message);}  }
class C{  private Multimap<Class<?>,Subscriber> findAllSubscribers(Object listener){  Multimap<Class<?>,Subscriber> methodsInListener=HashMultimap.create();  Class<?> clazz=listener.getClass();  for (  Method method : getAnnotatedMethods(clazz)) {    Class<?>[] parameterTypes=method.getParameterTypes();    Class<?> eventType=parameterTypes[0];    methodsInListener.put(eventType,Subscriber.create(bus,listener,method));  }  return methodsInListener;}  }
class C{  public void start() throws AdminException {  DistributionLocator[] locs=getDistributionLocators();  for (int i=0; i < locs.length; i++) {    locs[i].start();  }  for (int i=0; i < locs.length; i++) {    try {      if (!locs[i].waitToStart(TIMEOUT_MS)) {        throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_0_DID_NOT_START_AFTER_1_MS.toLocalizedString(new Object[]{locs[i],Integer.valueOf(TIMEOUT_MS)}));      }    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_INTERRUPTED_WHILE_WAITING_FOR_0_TO_START.toLocalizedString(locs[i]),ex);    }  }  CacheServer[] servers=getCacheServers();  for (int i=0; i < servers.length; i++) {    servers[i].start();  }  for (int i=0; i < servers.length; i++) {    try {      if (!servers[i].waitToStart(TIMEOUT_MS)) {        throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_0_DID_NOT_START_AFTER_1_MS.toLocalizedString(new Object[]{servers[i],Integer.valueOf(TIMEOUT_MS)}));      }    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_INTERRUPTED_WHILE_WAITING_FOR_0_TO_START.toLocalizedString(servers[i]),ex);    }  }}  }
class C{  public TestEndedEvent(final String sessionId,final String testId,final TestResult result){  super(sessionId);  this.testId=testId;  this.result=result;}  }
class C{  public String tagName(){  return element.tagName();}  }
class C{  public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuffer b=new StringBuffer(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  public String save() throws SaaSApplicationException {  Properties properties=getBrandManagementService().loadMessageProperties(getMarketplaceBean().getMarketplaceId(),locale);  if (privacypolicy != null) {    validateTextLength(KEY_PRIVACY_POLICY_ERROR_MSG,privacypolicy);  } else {    privacypolicy="";  }  properties.put(KEY_PRIVACY_POLICY,privacypolicy);  if (terms != null) {    validateTextLength(KEY_TERMS_ERROR_MSG,terms);  } else {    terms="";  }  properties.put(KEY_TERMS,terms);  if ((imprint == null) || (imprint.equals(getImprintDescription()))) {    properties.put(KEY_IMPRINT,"");  } else {    properties.put(KEY_IMPRINT,imprint);  }  Map<String,Properties> propertiesMap;  propertiesMap=new HashMap<>();  propertiesMap.put(getLocale(),properties);  try {    getBrandManagementService().saveMessageProperties(propertiesMap,getMarketplaceBean().getMarketplaceId());  } catch (  SaaSApplicationException e) {    marketplaceBean.checkMarketplaceDropdownAndMenuVisibility(e);    throw e;  }  resetBundles();  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_TRANSLATIONS_SAVED,new Object[]{"3","1"});  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.518 -0500",hash_original_method="77399CB88844FFACF599E547771813AB",hash_generated_method="95AE91D261F621CEFE3540302C0B4D7E") public AllocationBuilder addVertexAllocation(Allocation a) throws IllegalStateException {  if (mVertexTypeCount >= mVertexTypes.length) {    throw new IllegalStateException("Max vertex types exceeded.");  }  mVertexTypes[mVertexTypeCount]=new Entry();  mVertexTypes[mVertexTypeCount].a=a;  mVertexTypeCount++;  return this;}  }
class C{  public static boolean testSphereSphere(Vector3fc centerA,float radiusSquaredA,Vector3fc centerB,float radiusSquaredB){  return testSphereSphere(centerA.x(),centerA.y(),centerA.z(),radiusSquaredA,centerB.x(),centerB.y(),centerB.z(),radiusSquaredB);}  }
class C{  synchronized boolean lockExclusive(){  if (sharedLockCount > 0 || isLockedExclusive) {    return false;  }  isLockedExclusive=true;  return true;}  }
class C{  @Deprecated public static void create(MClient client){  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(client.getCtx(),client.getAD_Client_ID());  String trxName=client.get_TrxName();  String trxNameUsed=trxName;  Trx trx=null;  if (trxName == null) {    trxNameUsed=Trx.createTrxName("Cost");    trx=Trx.get(trxNameUsed,true);  }  boolean success=true;  String sql="SELECT * FROM M_Product p " + "WHERE AD_Client_ID=?" + " AND EXISTS (SELECT * FROM M_CostDetail cd "+ "WHERE p.M_Product_ID=cd.M_Product_ID AND Processed='N')";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,trxNameUsed);    pstmt.setInt(1,client.getAD_Client_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MProduct product=new MProduct(client.getCtx(),rs,trxNameUsed);      for (int i=0; i < ass.length; i++) {        BigDecimal cost=getCurrentCost(product,0,ass[i],0,0,null,Env.ONE,0,false,trxNameUsed);        s_log.info(product.getName() + " = " + cost);      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);    success=false;  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  if (trx != null) {    if (success)     trx.commit(); else     trx.rollback();    trx.close();  }}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  boolean result=(status.mState != State.CANCEL);  return result;}  }
class C{  public void initialize(Language language,DocumentType typeToProcess,OutputType outputType,String configPath){  initialize(language,typeToProcess,outputType,configPath,POSTagger.TREETAGGER);}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  boolean checkClosedForWrite(){  return checkClosed(true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.451 -0500",hash_original_method="67D061371E16CEF717EF2A58AA73F6CB",hash_generated_method="EF5DB267C8A8988D02B3BB6553CAEF03") public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public void clear(){  this.boxed=null;}  }
class C{  public void printString(char[] v,int strOffset,int length) throws IOException {  int offset=_offset;  byte[] buffer=_buffer;  for (int i=0; i < length; i++) {    if (SIZE <= offset + 16) {      _offset=offset;      flushBuffer();      offset=_offset;    }    char ch=v[i + strOffset];    if (ch < 0x80)     buffer[offset++]=(byte)(ch); else     if (ch < 0x800) {      buffer[offset++]=(byte)(0xc0 + ((ch >> 6) & 0x1f));      buffer[offset++]=(byte)(0x80 + (ch & 0x3f));    } else {      buffer[offset++]=(byte)(0xe0 + ((ch >> 12) & 0xf));      buffer[offset++]=(byte)(0x80 + ((ch >> 6) & 0x3f));      buffer[offset++]=(byte)(0x80 + (ch & 0x3f));    }  }  _offset=offset;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTSidPrimaryGroupPrincipal))   return false;  return super.equals(o);}  }
class C{  public MessageId(String value) throws PDUStringException {  StringValidator.validateString(value,StringParameter.MESSAGE_ID);  this.value=value;}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static CronScheduleBuilder atHourAndMinuteOnGivenDaysOfWeek(int hour,int minute,Integer... daysOfWeek){  if (daysOfWeek == null || daysOfWeek.length == 0)   throw new IllegalArgumentException("You must specify at least one day of week.");  for (  int dayOfWeek : daysOfWeek)   DateBuilder.validateDayOfWeek(dayOfWeek);  DateBuilder.validateHour(hour);  DateBuilder.validateMinute(minute);  String cronExpression=String.format("0 %d %d ? * %d",minute,hour,daysOfWeek[0]);  for (int i=1; i < daysOfWeek.length; i++)   cronExpression=cronExpression + "," + daysOfWeek[i];  return cronScheduleNoParseException(cronExpression);}  }
class C{  @Override public int estimateOutputSize(final int inLen){  int outSize=0;  int frames=0;  int totalContent=bytesToFrameLen_;  if (inLen >= 0) {    totalContent+=inLen;  }  frames=totalContent / frameSize_;  outSize+=(frameSize_ * frames);  final int leftover=totalContent % frameSize_;  outSize+=leftover;  frames+=1;  outSize+=frames * (nonceLen_ + tagLenBytes_);  outSize+=frames * (Integer.SIZE / Byte.SIZE);  outSize+=Integer.SIZE / Byte.SIZE;  outSize+=Integer.SIZE / Byte.SIZE;  return outSize;}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  RelevanceModel.UserRelevanceModel<U,I> urm=relModel.getModel(recommendation.getUser());  List<Tuple2od<I>> items=recommendation.getItems();  int r=range(0,items.size()).limit(cutoff).filter(null).findFirst().orElse(-1);  if (r == -1) {    return 0;  } else {    return 1 / (1.0 + r);  }}  }
class C{  public static Typeface recognition(Context context){  sRecognition=getFontFromRes(R.raw.recognition,context);  return sRecognition;}  }
class C{  public int size(){  return ccl.size();}  }
class C{  public void removeRolesUsuario(String idUsuario,String[] roles){  StringBuffer qual=new StringBuffer("WHERE 1=1 ");  if (idUsuario != null)   qual.append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_USUARIO,idUsuario));  if (roles != null)   qual.append(" AND ").append(DBUtils.generateInTokenField(CAMPO_ID_ROL,roles));  deleteVO(qual.toString(),TABLE_NAME);}  }
class C{  public String currentTimeMilis(){  return Long.toString(System.currentTimeMillis());}  }
class C{  public EditableOMScalingRaster(){  createGraphic(null);}  }
class C{  public boolean isEnabled(){  return m_Enabled;}  }
class C{  public void test_getP(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid P",p,params.getP());}  }
class C{  public Address minus(long v){  return null;}  }
class C{  public static boolean save(String targetDir,String filename,String textToSave){  File dir=new File(targetDir);  if (!(dir.exists() || dir.mkdirs())) {    System.err.println("Error: couldn't create directory " + targetDir + "!");    return false;  }  File file=new File(targetDir + "/" + filename);  file.delete();  try {    BufferedWriter out=new BufferedWriter(new FileWriter(file));    out.write(textToSave);    out.close();    System.out.println("Created file " + file.getAbsolutePath());  } catch (  IOException e) {    return false;  }  return true;}  }
class C{  public AbstractGuacamoleTunnel(){  readerLock=new ReentrantLock();  writerLock=new ReentrantLock();}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset data,int row,int column,int pass){  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  if (!(data instanceof StatisticalCategoryDataset)) {    throw new IllegalArgumentException("Requires StatisticalCategoryDataset.");  }  StatisticalCategoryDataset statData=(StatisticalCategoryDataset)data;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,visibleRow,row,column);  } else   if (orientation == PlotOrientation.VERTICAL) {    drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,statData,visibleRow,row,column);  }}  }
class C{  public boolean isDrawSliceTextEnabled(){  return mDrawXLabels;}  }
class C{  public String[][] extractArrayData(JsonObject obj,String array_item,String... keys){  JsonArray items=obj.get(array_item).getAsJsonArray();  String[][] listOfObjects=new String[items.size()][keys.length];  for (int i=0; i < items.size(); i++) {    JsonObject data=items.get(i).getAsJsonObject();    for (int j=0; j < keys.length; j++) {      listOfObjects[i][j]=data.get(keys[j]).toString();    }  }  return listOfObjects;}  }
class C{  private void refreshImage(){synchronized (this) {    state=(state | LOADING_FLAG | RELOAD_IMAGE_FLAG| WIDTH_FLAG| HEIGHT_FLAG) ^ (WIDTH_FLAG | HEIGHT_FLAG | RELOAD_IMAGE_FLAG);    image=null;    width=height=0;  }  try {    loadImage();    updateImageSize();  }  finally {synchronized (this) {      state=(state | LOADING_FLAG) ^ LOADING_FLAG;    }  }}  }
class C{  protected double peekDistance(){  return (numties > 0) ? kdist : heap.peekKey();}  }
class C{  public static byte[] unrollLegacyLegacyQualities(final byte[] samQualities,byte[] gq,final String gc){  final int overlap=gq.length;  final int gslength=overlap * 2;  if (overlap == 0) {    return samQualities;  } else {    if (gc == null) {      return null;    }    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    int lastCigarPos=0;    int readPos=0;    int attPos=0;    int att2Pos=0;    while (true) {      final int cigarPos=nextCigarPos(gc,lastCigarPos);      if (cigarPos == -1) {        break;      }      final int cigarLen=stringToInt(gc,lastCigarPos,cigarPos);      if (cigarLen == 0) {        return null;      }      if (gc.charAt(cigarPos) == 'S') {        baos.write(samQualities,readPos,cigarLen);        lastCigarPos=cigarPos + 1;        readPos=readPos + cigarLen;      } else {        final int consumed=cigarLen * 2;        if (attPos + consumed > gslength) {          return null;        }        baos.write(samQualities,readPos,cigarLen);        baos.write(gq,att2Pos,cigarLen);        att2Pos=att2Pos + cigarLen;        attPos=attPos + consumed;        lastCigarPos=cigarPos + 1;        readPos+=cigarLen;      }    }    if (readPos != samQualities.length || lastCigarPos != gc.length() || attPos != gslength) {      return null;    }    return baos.toByteArray();  }}  }
class C{  public static IndexType createScan(){  IndexType type=new IndexType();  type.scan=true;  return type;}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @SuppressWarnings("unchecked") public static CreateLiveChannelResult parseCreateLiveChannel(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    CreateLiveChannelResult result=new CreateLiveChannelResult();    List<String> publishUrls=new ArrayList<String>();    List<Element> publishElems=root.getChild("PublishUrls").getChildren("Url");    for (    Element urlElem : publishElems) {      publishUrls.add(urlElem.getText());    }    result.setPublishUrls(publishUrls);    List<String> playUrls=new ArrayList<String>();    List<Element> playElems=root.getChild("PlayUrls").getChildren("Url");    for (    Element urlElem : playElems) {      playUrls.add(urlElem.getText());    }    result.setPlayUrls(playUrls);    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean isAdjacentAndEmpty(int fromR,int fromC,int toR,int toC){  if (board[toR][toC] != EmptyMark) {    return false;  }  int dR=Math.abs(fromR - toR);  int dC=Math.abs(fromC - toC);  if ((dC == +1 && dR == 0) || (dC == 0 && dR == +1)) {    return true;  }  return false;}  }
class C{  @Override public void pause(boolean toPause){  isPaused=toPause;}  }
class C{  public final AC shrink(float w){  return shrink(w,curIx);}  }
class C{  public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  Generator<IPoint> unif=new UniformGenerator();  int idx=0;  for (  IPoint p : unif.generate(size / 4)) {    points[idx++]=new TwoDPoint(p.getX(),p.getY() + maxValue);  }  for (  IPoint p : unif.generate(size / 4)) {    points[idx++]=new TwoDPoint(p.getX() + maxValue,p.getY());  }  for (  IPoint p : unif.generate(size / 4)) {    points[idx++]=new TwoDPoint(p.getX(),p.getY() - maxValue);  }  for (  IPoint p : unif.generate(size / 4)) {    points[idx++]=new TwoDPoint(p.getX() - maxValue,p.getY());  }  int ct=1;  while (idx < size) {    points[idx++]=new TwoDPoint(0,ct++);  }  return points;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void generatePaymentList(){  if (paymentHeaderList.size() != 0) {    BigDecimal fundAmt=new BigDecimal("0");    String fndIdPre=paymentHeaderList.get(0).getFundId().toString();    int lastInd;    final int size=paymentHeaderList.size();    paymentHeaderListFnd=new ArrayList<ConcurrenceReportData>();    for (    final ConcurrenceReportData row : paymentHeaderList) {      if (row.getFundId().toString().equalsIgnoreCase(fndIdPre)) {        paymentHeaderListFnd.add(row);        fundAmt=fundAmt.add(row.getAmount());      } else {        final Fund fundNm=(Fund)persistenceService.find("from Fund where id=?",Integer.valueOf(fndIdPre));        paymentHeaderListFnd.add(new ConcurrenceReportData(new String(fundNm.getName()),fundAmt,"Total"));        grandTol=grandTol.add(fundAmt);        fundAmt=BigDecimal.ZERO;        fndIdPre=row.getFundId().toString();        paymentHeaderListFnd.add(row);        fundAmt=fundAmt.add(row.getAmount());      }      lastInd=paymentHeaderList.indexOf(row);      if (lastInd == size - 1) {        final Fund fundNm=(Fund)persistenceService.find("from Fund where id=?",Integer.valueOf(fndIdPre));        paymentHeaderListFnd.add(new ConcurrenceReportData(new String(fundNm.getName()),fundAmt,"Total"));        grandTol=grandTol.add(fundAmt);        setGrandTol(grandTol);      }    }  }}  }
class C{  public static ValueTimestamp fromMillisNanos(long ms,int nanos){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long timeNanos=nanos + DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,timeNanos);}  }
class C{  public void inline(TestCase test){  this.test=test;  TestCaseExecutor executor=TestCaseExecutor.getInstance();  executor.addObserver(this);  executor.execute(test);  executor.removeObserver(this);  removeUnusedVariables(test);  assert (test.isValid());}  }
class C{  public boolean isAuthorable(Session session){  boolean authorable=false;  JackrabbitSession js=(JackrabbitSession)session;  try {    Group authors=(Group)js.getUserManager().getAuthorizable(PublickConstants.GROUP_ID_AUTHORS);    User user=(User)js.getUserManager().getAuthorizable(js.getUserID());    authorable=user.isAdmin() || authors.isMember(user);  } catch (  RepositoryException e) {    LOGGER.error("Could not determine group membership",e);  }  return authorable;}  }
class C{  @Override public int hashCode(){  return zeroDigit + positiveSign + negativeSign+ decimalSeparator;}  }
class C{  ProblemBuilder withProblem(String problemName){  this.problemName=problemName;  this.problemClass=null;  this.problemInstance=null;  return this;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public Path addFileExtension(String extension){  if (isRoot() || isEmpty() || hasTrailingSeparator())   return this;  int len=segments.length;  String[] newSegments=new String[len];  System.arraycopy(segments,0,newSegments,0,len - 1);  newSegments[len - 1]=segments[len - 1] + '.' + extension;  return new Path(device,newSegments,separators);}  }
class C{  public static int nextSetBit(long v,int start){  if (start >= Long.SIZE) {    return -1;  }  long cur=v & (LONG_ALL_BITS << start);  if (cur == 0) {    return -1;  }  return Long.numberOfTrailingZeros(cur);}  }
class C{  public Diagnostic analyzeResourceProblems(Resource resource,Exception exception){  if (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {    BasicDiagnostic basicDiagnostic=new BasicDiagnostic(Diagnostic.ERROR,"com.github.lbroudoux.dsl.eip.editor",0,getString("_UI_CreateModelError_message",resource.getURI()),new Object[]{exception == null ? (Object)resource : exception});    basicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource,true));    return basicDiagnostic;  } else   if (exception != null) {    return new BasicDiagnostic(Diagnostic.ERROR,"com.github.lbroudoux.dsl.eip.editor",0,getString("_UI_CreateModelError_message",resource.getURI()),new Object[]{exception});  } else {    return Diagnostic.OK_INSTANCE;  }}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  @Override public boolean supportsCustomEditor(){  return true;}  }
class C{  private void moveSizeWithFreeAspectRatio(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin){switch (mType) {case TOP_LEFT:    adjustTop(rect,y,bounds,snapMargin,0,false,false);  adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case TOP_RIGHT:adjustTop(rect,y,bounds,snapMargin,0,false,false);adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case BOTTOM_LEFT:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case BOTTOM_RIGHT:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case LEFT:adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case TOP:adjustTop(rect,y,bounds,snapMargin,0,false,false);break;case RIGHT:adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case BOTTOM:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);break;default :break;}}  }
class C{  public Vertex processConversational(Vertex input,Vertex sentence,Vertex conversation,Map<Vertex,Vertex> variables,Network network,LanguageState state){  Vertex response=null;  boolean checkUnderstanding=true;  if (!this.checkExactMatchFirst) {    response=processUnderstanding(input,sentence,this.conversationMatchPercentage,variables,network);    checkUnderstanding=false;  }  Relationship relationship=null;  if (response == null) {    relationship=bestResponse(0.1f,input,sentence,null,null,network);    if (relationship != null) {      response=relationship.getTarget();    }  }  if ((response == null) && this.checkExactMatchFirst) {    response=processUnderstanding(input,sentence,this.conversationMatchPercentage,variables,network);    checkUnderstanding=false;  }  boolean hadResponse=response != null;  if (response != null) {    log("Question known response",Level.FINE,response);  } else {    log("No known response, checking question patterns",Level.FINE,sentence);    relationship=matchPattern(sentence,null,input,variables,network,this.conversationMatchPercentage);    if (relationship != null) {      response=relationship.getTarget();      log("Question pattern match",Level.FINE,response);    } else {      log("No known response, checking similar questions",Level.FINE,sentence);      relationship=findResponseMatch(sentence,null,input,network,this.conversationMatchPercentage);      if (relationship != null) {        response=relationship.getTarget();        log("Conversation similar question match response",Level.FINE,response);      } else       if ((state == LanguageState.Answering) || (state == LanguageState.Discussion)) {        Vertex language=network.createVertex(getPrimitive());        List<Relationship> defaultResponses=language.orderedRelationships(Primitive.RESPONSE);        if (defaultResponses == null) {          if (this.synthesizeResponse) {            response=synthesizeResponse(input,sentence,conversation,false,variables,network);          }          if (response == null) {            this.wasMimic=true;            log("Conversation mimic",Level.FINE,sentence);            response=sentence;          }        } else {          this.wasMimic=true;          response=getDefaultResponse(defaultResponses,input,sentence,conversation,variables,network);        }      }    }  }  if ((response != null) && (conversation != null)) {    Vertex newResponse=checkDuplicateOrOffensiveResponse(response,sentence,conversation,input,variables,network,!hadResponse,checkUnderstanding);    if (response == newResponse && relationship != null && relationship.hasMeta()) {      Vertex topic=relationship.getMeta().getRelationship(Primitive.TOPIC);      if (topic != null && !topic.instanceOf(Primitive.PATTERN)) {        log("Conversation topic",Level.FINE,topic);        conversation.setRelationship(Primitive.TOPIC,topic);      }    }    response=newResponse;  }  return response;}  }
class C{  private void updateGenericElements(final AbstractAttributeStatisticsModel model){  String attLabel=model.getAttribute().getName();  String attRole=model.getExampleSetOrNull().getAttributes().getRole(model.getAttribute()).getSpecialName();  String valueTypeString=Ontology.ATTRIBUTE_VALUE_TYPE.mapIndexToDisplayName(model.getAttribute().getValueType());  String construction=model.getConstruction();  construction=construction == null ? "-" : construction;  labelAttHeader.setText(attRole == null || attRole.isEmpty() ? " " : Character.toUpperCase(attRole.charAt(0)) + attRole.substring(1));  labelAttHeader.setForeground(AttributeGuiTools.getColorForAttributeRole(mapAttributeRoleName(),ColorScope.BORDER));  panelAttName.setBorder(BorderFactory.createMatteBorder(0,0,0,1,AttributeGuiTools.getColorForAttributeRole(mapAttributeRoleName(),ColorScope.CONTENT)));  labelAttName.setText(attLabel);  labelAttName.setToolTipText(attLabel);  labelAttType.setText(valueTypeString);  labelAttType.setIcon(null);  labelStatsMissing.setText(Tools.formatIntegerIfPossible(model.getNumberOfMissingValues(),0));  labelStatsMissing.setToolTipText(labelStatsMissing.getText());  labelStatsConstruction.setText(construction);  labelStatsConstruction.setToolTipText(labelStatsConstruction.getText());}  }
class C{  private void processNewPort(long sw,short p){  if (isLinkDiscoverySuppressed(sw,p)) {    return;  }  IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);  if (iofSwitch == null)   return;  if (autoPortFastFeature && iofSwitch.isFastPort(p)) {    return;  }  NodePortTuple npt=new NodePortTuple(sw,p);  discover(sw,p);  if (!iofSwitch.isFastPort(p)) {    addToQuarantineQueue(npt);  } else {    addToMaintenanceQueue(npt);  }}  }
class C{  public static String trimTrailingWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder buf=new StringBuilder(str);  while (buf.length() > 0 && Character.isWhitespace(buf.charAt(buf.length() - 1))) {    buf.deleteCharAt(buf.length() - 1);  }  return buf.toString();}  }
class C{  public void redraw(){  myTable.redraw();}  }
class C{  public OMCircle[] createCircles(){  OMCircle[] circles;  OMText[] t;  int i;  double rad;  String value;  if (intervalUnits == null) {    int noUnitInterval=interval - 1;    circles=new OMCircle[noUnitInterval];    t=new OMText[noUnitInterval];    for (i=0; i < noUnitInterval; i++) {      rad=(i + 1) * radius / (noUnitInterval + 1);      circles[i]=new OMCircle(LatLonPoint.getDouble(center),rad,Length.RADIAN,-1);      value=((i + 1) + "/" + (noUnitInterval + 1));      t[i]=new OMText(center.getY() + Length.DECIMAL_DEGREE.fromRadians(rad),center.getX(),value,OMText.JUSTIFY_CENTER);    }  } else {    double realDistanceInterval=intervalUnits.toRadians(interval);    int number=(int)(radius / realDistanceInterval);    circles=new OMCircle[number];    t=new OMText[number + 1];    for (i=0; i < number; i++) {      rad=(i + 1) * realDistanceInterval;      circles[i]=new OMCircle(LatLonPoint.getDouble(center),rad,Length.RADIAN,-1);      value=(form.format((double)(i + 1) * interval) + " " + intervalUnits.getAbbr());      t[i]=new OMText(center.getY() + Length.DECIMAL_DEGREE.fromRadians(rad),center.getX(),value,OMText.JUSTIFY_CENTER);    }    value=(form.format((double)intervalUnits.fromRadians(radius)) + " " + intervalUnits.getAbbr());    t[i]=new OMText(center.getY() + Length.DECIMAL_DEGREE.fromRadians(radius),center.getX(),value,OMText.JUSTIFY_CENTER);  }  labels=t;  return circles;}  }
class C{  public VisibilityAnimator(String group){  super(group);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.787 -0500",hash_original_method="B1B6242CCE1D87F8A8E3C9512E1007D6",hash_generated_method="5E7A8D8150BC51025C552D5F98850988") public static Bitmap decodeStream(InputStream is){  return decodeStream(is,null,null);}  }
class C{  public DistributedUpdateProcessor(SolrQueryRequest req,SolrQueryResponse rsp,AtomicUpdateDocumentMerger docMerger,UpdateRequestProcessor next){  super(next);  this.rsp=rsp;  this.next=next;  this.docMerger=docMerger;  this.idField=req.getSchema().getUniqueKeyField();  this.updateHandler=req.getCore().getUpdateHandler();  this.ulog=updateHandler.getUpdateLog();  this.vinfo=ulog == null ? null : ulog.getVersionInfo();  versionsStored=this.vinfo != null && this.vinfo.getVersionField() != null;  returnVersions=req.getParams().getBool(UpdateParams.VERSIONS,false);  this.req=req;  DistributedUpdateProcessorFactory.addParamToDistributedRequestWhitelist(this.req,UpdateParams.UPDATE_CHAIN,TEST_DISTRIB_SKIP_SERVERS,VERSION_FIELD);  CoreDescriptor coreDesc=req.getCore().getCoreDescriptor();  this.zkEnabled=coreDesc.getCoreContainer().isZooKeeperAware();  zkController=req.getCore().getCoreDescriptor().getCoreContainer().getZkController();  if (zkEnabled) {    cmdDistrib=new SolrCmdDistributor(coreDesc.getCoreContainer().getUpdateShardHandler());  }  cloudDesc=coreDesc.getCloudDescriptor();  if (cloudDesc != null) {    collection=cloudDesc.getCollectionName();  } else {    collection=null;  }  boolean shouldClone=false;  UpdateRequestProcessor nextInChain=next;  while (nextInChain != null) {    Class<? extends UpdateRequestProcessor> klass=nextInChain.getClass();    if (klass != LogUpdateProcessorFactory.LogUpdateProcessor.class && klass != RunUpdateProcessor.class && klass != TolerantUpdateProcessor.class) {      shouldClone=true;      break;    }    nextInChain=nextInChain.next;  }  cloneRequiredOnLeader=shouldClone;}  }
class C{  public void test3026341(){  XYShapeRenderer renderer=new XYShapeRenderer();  assertNull(renderer.findRangeBounds(null));  XYSeriesCollection dataset=new XYSeriesCollection();  XYSeries series=new XYSeries("S1");  series.add(1.0,null);  dataset.addSeries(series);  Range r=renderer.findRangeBounds(dataset);  assertNull(r);  r=renderer.findDomainBounds(dataset);  assertEquals(r.getLowerBound(),1.0,EPSILON);  assertEquals(r.getUpperBound(),1.0,EPSILON);  dataset.removeAllSeries();  r=renderer.findDomainBounds(dataset);  assertNull(r);}  }
class C{  @SuppressWarnings("unchecked") public List<Product> read(List<Long> ids){  if ((ids == null) || ids.isEmpty())   return ImmutableList.of();  String facet="";  String logic_op="";  for (  Long id : ids) {    facet+=" " + logic_op + " p.id="+ id;    logic_op="or";  }  return (List<Product>)find("from " + entityClass.getName() + " p WHERE "+ facet);}  }
class C{  public static long findSmallestDelayedAllocationSetting(Settings settings,ClusterState state){  long nextDelaySetting=Long.MAX_VALUE;  for (  ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {    if (shard.primary() == false) {      IndexMetaData indexMetaData=state.metaData().index(shard.getIndex());      long delayTimeoutSetting=shard.unassignedInfo().getAllocationDelayTimeoutSetting(settings,indexMetaData.getSettings());      if (delayTimeoutSetting > 0 && delayTimeoutSetting < nextDelaySetting) {        nextDelaySetting=delayTimeoutSetting;      }    }  }  return nextDelaySetting == Long.MAX_VALUE ? 0l : nextDelaySetting;}  }
class C{  private boolean isIvrVsan(int vsanId) throws NetworkDeviceControllerException {  List<IvrVsanConfiguration> ivrVsansList=showIvrVsanTopology();  for (  IvrVsanConfiguration ivrVsans : ivrVsansList) {    if (ivrVsans.isIvrVsan(vsanId)) {      return true;    }  }  return false;}  }
class C{  public AggregateTransactionValidationExtension(final Collection<TransactionValidationExtension<TTransaction>> extensions){  this.extensions=extensions;}  }
class C{  private WikibaseUris uris(){  return WikibaseUris.getURISystem();}  }
class C{  @Override public boolean isFrozen(){  return frozen;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_11:    getAnonymous_constantDeclaration_1_1().clear();  return;case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_21:getAnonymous_constantDeclaration_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void restoreFromStream(final ByteArrayInputStream bis) throws IOException, ClassNotFoundException {  final ObjectInput os=new ObjectInputStream(bis);  final int size=(Integer)os.readObject();  max_size=size;  items=new Object[size];  Object nextObject;  Integer type;  for (int i=0; i < size; i++) {    type=(Integer)os.readObject();    if (type.compareTo(BASICSTROKE) == 0) {      final float w=os.readFloat();      final int current_line_cap_style=os.readInt();      final int current_line_join_style=os.readInt();      final float mitre_limit=os.readFloat();      final float[] current_line_dash_array=(float[])os.readObject();      final float current_line_dash_phase=os.readFloat();      nextObject=new BasicStroke(w,current_line_cap_style,current_line_join_style,mitre_limit,current_line_dash_array,current_line_dash_phase);    } else     if (type.compareTo(RECT) == 0) {      final float x=os.readFloat();      final float y=os.readFloat();      final float w=os.readFloat();      final float h=os.readFloat();      nextObject=new Rectangle2D.Float(x,y,w,h);    } else     if (type.compareTo(BUFFERED_IMAGE) == 0) {      final byte[] bytes=(byte[])os.readObject();      nextObject=DefaultImageHelper.read(bytes);    } else     if (type.compareTo(GENERAL_PATH) == 0) {      nextObject=PathSerializer.deserializePath(os);    } else     if (type.compareTo(T1GLYPH) == 0) {      final T1Glyph glyph=(T1Glyph)os.readObject();      final int count=(Integer)os.readObject();      final GeneralPath[] paths=new GeneralPath[count];      for (int j=0; j < count; j++) {        paths[j]=PathSerializer.deserializePath(os);      }      final Vector_Path vp=new Vector_Path();      vp.set(paths);      vp.setCurrent_item(paths.length);      glyph.setPaths(vp);      nextObject=glyph;    } else     if (type.compareTo(TTGLYPH) == 0) {      final TTGlyph glyph=(TTGlyph)os.readObject();      final int count=(Integer)os.readObject();      final GeneralPath[] paths=new GeneralPath[count];      for (int j=0; j < count; j++) {        paths[j]=PathSerializer.deserializePath(os);      }      final Vector_Path vp=new Vector_Path();      vp.set(paths);      vp.setCurrent_item(paths.length);      glyph.setPaths(vp);      nextObject=glyph;    } else     if (type.compareTo(T3GLYPH) == 0) {      nextObject=new T3Glyph(os);    } else     if (type.compareTo(TEXTUREDPAINT) == 0) {      final byte[] bytes=(byte[])os.readObject();      final BufferedImage img=DefaultImageHelper.read(bytes);      final float x=os.readFloat();      final float y=os.readFloat();      final float w=os.readFloat();      final float h=os.readFloat();      final Rectangle2D anchor=new Rectangle2D.Float(x,y,w,h);      nextObject=new PdfTexturePaint(img,anchor);    } else     if (type.compareTo(AREA) == 0) {      final GeneralPath path=PathSerializer.deserializePath(os);      nextObject=new Area(path);    } else {      nextObject=os.readObject();    }    items[i]=nextObject;  }}  }
class C{  public PlatformCache withSkipStore(){  if (cache.delegate().skipStore())   return this;  return copy(rawCache.withSkipStore(),keepBinary);}  }
class C{  public SimpleSystemPermissionSet(){}  }
class C{  void addVariablePressed(ActionEvent e){  if (alreadyEditingActionOrVariable()) {    return;  }  if (LRouteTableAction.LOGIX_INITIALIZER.equals(_curLogix.getSystemName())) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("Error49"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return;  }  _showReminder=true;  ConditionalVariable variable=new ConditionalVariable();  _variableList.add(variable);  _newItem=true;  int size=_variableList.size();  if (size > 1) {    if (_logicType == Conditional.ALL_OR) {      variable.setOpern(Conditional.OPERATOR_OR);    } else {      variable.setOpern(Conditional.OPERATOR_AND);    }  }  size--;  _variableTableModel.fireTableRowsInserted(size,size);  makeEditVariableWindow(size);  appendToAntecedent(variable);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  for (  DataSource source : getData()) {    dataUpdated(source);  }}  }
class C{  public OkapiBM25(double k1,double b){  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException("coefficient k1 must be a non negative constant, not " + k1);  this.k1=k1;  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException("coefficient b must be in the range [0,1], not " + b);  this.b=b;}  }
class C{  private static List<PlatformDotNetAffinityFunction> affinityFunctions(IgniteConfiguration cfg){  List<PlatformDotNetAffinityFunction> res=new ArrayList<>();  CacheConfiguration[] cacheCfg=cfg.getCacheConfiguration();  if (cacheCfg != null) {    for (    CacheConfiguration ccfg : cacheCfg) {      if (ccfg.getAffinity() instanceof PlatformDotNetAffinityFunction)       res.add((PlatformDotNetAffinityFunction)ccfg.getAffinity());    }  }  return res;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.218 -0400",hash_original_method="8B8A830F7C70BB7BFDEF3AFD01FB8C27",hash_generated_method="0DC04B8B7AB8E6E5E3D3252E6E10AEA4") public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public void rotate(int[] nums,int k){  if (nums == null || nums.length == 0)   return;  if (nums.length == 1 || k == 0 || k == nums.length)   return;  int len=nums.length;  k%=len;  int idx=0;  int tmp=nums[idx];  int tmp2;  for (int i=0, j=0; i < len; i++) {    idx=(idx + k) % len;    tmp2=nums[idx];    nums[idx]=tmp;    tmp=tmp2;    if (idx == j) {      idx=++j;      tmp=nums[idx];    }  }}  }
class C{  public static Options createCommandLineOptions(){  Option numNodes=OptionBuilder.withArgName("int").hasArg().withType(Number.class).withDescription("use this number of nodes in the simulation").create("nn");  Option numAdversaries=OptionBuilder.withArgName("int").hasArg().withType(Number.class).withDescription("use this number of adversaries in the simulation").create("na");  Option authorship=OptionBuilder.withArgName("author").hasArg().withDescription("use author with the given popularity in the simulation (popular,unpopular,adversarial,random)").create("author");  Option stationaryJammers=OptionBuilder.withArgName("int").hasArg().withDescription("How many stationary jammers to use").create("jamStationary");  Option optimalJammers=new Option("jamOpt","Should stationary jammers use optimal placement?");  Option jamRadius=OptionBuilder.withArgName("double").hasArg().withDescription("Radius of jammer(s)").create("radius");  Option mobileJammers=OptionBuilder.withArgName("int").hasArg().withDescription("How many mobile jammers to use").create("jamMobile");  Options options=new Options();  options.addOption(numNodes);  options.addOption(numAdversaries);  options.addOption(authorship);  options.addOption(stationaryJammers);  options.addOption(optimalJammers);  options.addOption(mobileJammers);  options.addOption(jamRadius);  return options;}  }
class C{  public boolean isContentIdentical(){  return contentIdentical;}  }
class C{  @Override public void log(LogRecord record){  if (record == null)   return;  Level recordLevel=record.getLevel();  if (!isLoggable(recordLevel))   return;  for (Logger ptr=this; ptr != null; ptr=ptr.getParent()) {    Handler handlers[]=ptr.getHandlers();    if (handlers != null) {      for (int i=0; i < handlers.length; i++) {        handlers[i].publish(record);      }    }    if (!ptr.getUseParentHandlers())     break;  }}  }
class C{  public boolean grabAnimationLock(){  if (globalAnimationLock) {    return false;  }  globalAnimationLock=true;  return true;}  }
class C{  private void pivot(int p) throws ArithmeticException {  double inversePivot=1 / rows[p][p];  double r;  int n=rows.length;  int m=rows[0].length;  for (int i=p + 1; i < n; i++) {    r=inversePivot * rows[i][p];    for (int j=p; j < m; j++)     rows[i][j]-=rows[p][j] * r;  }  return;}  }
class C{  public String toString(Object value){  return toPrettyString(value);}  }
class C{  public void mountAuth(String authBackend){  Assert.hasText(authBackend,"AuthBackend must not be empty");  adminOperations.authMount(authBackend,VaultMount.create(authBackend));}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public String toString(){  return new String(getType() + " Control");}  }
class C{  public Region(int line,int bcol,int width){  this.begin=new PCalLocation(line,bcol);  this.end=new PCalLocation(line,bcol + width);}  }
class C{  public Ed25519FieldElement(final int[] values){  if (values.length != 10) {    throw new IllegalArgumentException("Invalid 2^25.5 bit representation.");  }  this.values=values;}  }
class C{  public RegisterType(Class clase,QName name,boolean bDh){  mClase=clase;  mQName=name;  mDh=bDh;}  }
class C{  public static boolean isLeftToRight(LC lc,ContainerWrapper container){  if (lc != null && lc.getLeftToRight() != null)   return lc.getLeftToRight();  return container == null || container.isLeftToRight();}  }
class C{  protected DenseFloatMatrix1D generateNGramVector(String[] docterms,short[] positions,DenseFloatMatrix1D[] localindexvectors,int start,int end,int focus){  DenseFloatMatrix1D vec1, vec2;  int termId1, termId2;  int ngramSize=end - start;  if (ngramSize == 2) {    if (start == focus) {      termId1=positions[start + 1];      vec1=localindexvectors[termId1];      vec1=utils.rotateVector(vec1,1);    } else {      termId1=positions[start];      vec1=localindexvectors[termId1];      vec1=utils.rotateVector(vec1,-1);    }    return vec1;  }  if (ngramSize == 3) {    if (start == focus) {      vec1=get2Gram(docterms,positions,localindexvectors,start + 1);      vec1=utils.rotateVector(vec1,1);    } else     if ((start + 1) == focus) {      termId1=positions[start];      vec1=utils.rotateVector(localindexvectors[termId1],-1);      termId2=positions[start + 2];      vec2=utils.rotateVector(localindexvectors[termId2],1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else {      vec1=get2Gram(docterms,positions,localindexvectors,start);      vec1=utils.rotateVector(vec1,-1);    }    return vec1;  }  if (ngramSize == 4) {    if (start == focus) {      vec1=get3Gram(docterms,positions,localindexvectors,start + 1);      vec1=utils.rotateVector(vec1,1);    } else     if ((start + 1) == focus) {      termId1=positions[start];      vec1=utils.rotateVector(localindexvectors[termId1],-1);      vec2=get2Gram(docterms,positions,localindexvectors,start + 2);      vec2=utils.rotateVector(vec2,1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else     if ((start + 2) == focus) {      termId2=positions[start + 3];      vec1=get2Gram(docterms,positions,localindexvectors,start);      vec1=utils.rotateVector(vec1,-1);      vec2=utils.rotateVector(localindexvectors[termId2],1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else {      vec1=get3Gram(docterms,positions,localindexvectors,start);      vec1=ngrams3.get(start);      vec1=utils.rotateVector(vec1,-1);    }    return vec1;  }  if (ngramSize == 5) {    if (start == focus) {      vec1=get4Gram(docterms,positions,localindexvectors,start + 1);      vec1=utils.rotateVector(vec1,1);    } else     if ((start + 1) == focus) {      termId1=positions[start];      vec1=utils.rotateVector(localindexvectors[termId1],-1);      vec2=get3Gram(docterms,positions,localindexvectors,start + 2);      vec2=utils.rotateVector(vec2,1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else     if ((start + 2) == focus) {      vec1=get2Gram(docterms,positions,localindexvectors,start);      vec1=utils.rotateVector(vec1,-1);      vec2=get2Gram(docterms,positions,localindexvectors,start + 3);      vec2=utils.rotateVector(vec2,1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else     if ((start + 3) == focus) {      termId2=positions[start + 4];      vec1=get3Gram(docterms,positions,localindexvectors,start);      vec1=utils.rotateVector(vec1,-1);      vec2=utils.rotateVector(localindexvectors[termId2],1);      vec1=utils.doConvolveFFT(vec1,vec2);    } else {      vec1=get4Gram(docterms,positions,localindexvectors,start);      vec1=utils.rotateVector(vec1,-1);    }    return vec1;  }  termId1=positions[start];  if (start == focus)   vec1=phi; else   vec1=localindexvectors[termId1];  for (int pos=start + 1; pos < end; pos++) {    termId1=positions[pos];    if (pos == focus)     vec2=phi; else     vec2=localindexvectors[termId1];    vec1=utils.scrambleVector(vec1,Permute1);    vec2=utils.scrambleVector(vec2,Permute2);    vec1=utils.doConvolveFFT(vec1,vec2);  }  return vec1;}  }
class C{  public EqualsBuilder appendSuper(final boolean superEquals){  if (isEquals == false) {    return this;  }  isEquals=superEquals;  return this;}  }
class C{  public CoalesceAnimation3D(CoalesceConfig rootConfig){  mCoalesceObjects=Collections.synchronizedList(new CopyOnWriteArrayList<CoalesceConfig>());  mThetaRanges=Collections.synchronizedList(new CopyOnWriteArrayList<Double>());  mTransformable3D=rootConfig.object;  mCoalesceObjects.add(rootConfig);  mThetaRanges.add(rootConfig.spiral.calculateThetaForRadius(rootConfig.endProximity));}  }
class C{  public VolumeGroupRestRep createApplication(VolumeGroupCreateParam input){  return client.post(VolumeGroupRestRep.class,input,APP_SUPPORT_CREATE_APP_URL);}  }
class C{  @SuppressWarnings("unchecked") public void addValue(Object v,float b){  if (value == null) {    if (v instanceof Collection) {      Collection<Object> c=new ArrayList<>(3);      for (      Object o : (Collection<Object>)v) {        c.add(o);      }      setValue(c,b);    } else {      setValue(v,b);    }    return;  }  boost*=b;  Collection<Object> vals=null;  if (value instanceof Collection) {    vals=(Collection<Object>)value;  } else {    vals=new ArrayList<>(3);    vals.add(value);    value=vals;  }  if (v instanceof Iterable) {    for (    Object o : (Iterable<Object>)v) {      vals.add(o);    }  } else   if (v instanceof Object[]) {    for (    Object o : (Object[])v) {      vals.add(o);    }  } else {    vals.add(v);  }}  }
class C{  public static boolean deleteAll(){  return hawkFacade.deleteAll();}  }
class C{  final public MutableString replace(final char c,final String s){  final int length=length();  char[] a=array;  int i, j, l, newLength=length;  if (s.length() == 0)   throw new IllegalArgumentException("You cannot use the empty string as a replacement");  i=length;  boolean found=false;  while (i-- != 0)   if (a[i] == c) {    newLength+=s.length() - 1;    found=true;  }  if (!found)   return this;  expand(newLength);  a=array;  i=newLength;  j=length;  while (j-- != 0) {    if (a[j] == c) {      l=s.length();      s.getChars(0,l,array,i-=l);    } else     a[--i]=a[j];  }  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  private void finish(){  Activity container=getActivity();  container.finish();}  }
class C{  public void notifyListeners(ClusterResourceNotification notification) throws ResourceNotificationException {  if (notification == null)   return;  for (  ResourceNotificationListener listener : listeners) {    listener.notify(notification);  }}  }
class C{  public int count(){  return count;}  }
class C{  public ObjectNotFoundException(String message){  super(message);}  }
class C{  protected void comprobarFecha(String valor,Fecha fecha){  if (StringUtils.isBlank(valor)) {  }}  }
class C{  public SelectMergeSourceTargetWizardPage(final TFSRepository repository,final String sourcePath,final ImageHelper imageHelper){  super(NAME);  setTitle(Messages.getString("SelectMergeSourceTargetWizardPage.PageTitle"));  setDescription(Messages.getString("SelectMergeSourceTargetWizardPage.PageDescription"));  this.sourcePath=sourcePath;  this.imageHelper=imageHelper;  this.repository=repository;}  }
class C{  public static <TK,FV>ConcreteRule<TK,FV> makeSyntheticRule(Sequence<TK> source,Sequence<TK> target,CoverageSet sourceCoverage,String[] phraseScoreNames,Scorer<FV> scorer,FeatureExtractor<TK,FV> featurizer,double cnt_f_e,int cnt_e,int cnt_f,InputProperties inputProperties,Sequence<TK> sourceSequence,int sourceInputId,PhraseAlignment align){  float[] scores=new float[phraseScoreNames.length];  scores[0]=(float)(Math.log(cnt_f_e) - Math.log(cnt_e));  scores[1]=scores[0];  scores[2]=(float)(Math.log(cnt_f_e) - Math.log(cnt_f));  scores[3]=scores[2];  if (scores.length > FeatureTemplate.DENSE.getNumFeatures()) {    scores[4]=cnt_f_e > 1 ? (float)Math.log(cnt_f_e) : 0.0f;    scores[5]=cnt_f_e <= 1 ? -1.0f : 0.0f;  }  Rule<TK> abstractRule=new Rule<>(scores,phraseScoreNames,target,source,align,PHRASE_TABLE_NAME);  ConcreteRule<TK,FV> rule=new ConcreteRule<>(abstractRule,sourceCoverage,featurizer,scorer,sourceSequence,sourceInputId,inputProperties);  return rule;}  }
class C{  public void closeFile(){  closeFile(true);}  }
class C{  public void paint(Graphics g){  paintList(g,markedOccurrences);  super.paint(g);  paintList(g,parserHighlights);}  }
class C{  public Cuboid contract(CuboidDirection dir){  Cuboid face=getFace(dir.opposite());switch (dir) {case Down:    while (face.containsOnly(0) && face.getLowerY() > this.getLowerY()) {      face=face.shift(CuboidDirection.Down,1);    }  return new Cuboid(this.worldName,this.x1,this.y1,this.z1,this.x2,face.getUpperY(),this.z2);case Up:while (face.containsOnly(0) && face.getUpperY() < this.getUpperY()) {  face=face.shift(CuboidDirection.Up,1);}return new Cuboid(this.worldName,this.x1,face.getLowerY(),this.z1,this.x2,this.y2,this.z2);case North:while (face.containsOnly(0) && face.getLowerX() > this.getLowerX()) {face=face.shift(CuboidDirection.North,1);}return new Cuboid(this.worldName,this.x1,this.y1,this.z1,face.getUpperX(),this.y2,this.z2);case South:while (face.containsOnly(0) && face.getUpperX() < this.getUpperX()) {face=face.shift(CuboidDirection.South,1);}return new Cuboid(this.worldName,face.getLowerX(),this.y1,this.z1,this.x2,this.y2,this.z2);case East:while (face.containsOnly(0) && face.getLowerZ() > this.getLowerZ()) {face=face.shift(CuboidDirection.East,1);}return new Cuboid(this.worldName,this.x1,this.y1,this.z1,this.x2,this.y2,face.getUpperZ());case West:while (face.containsOnly(0) && face.getUpperZ() < this.getUpperZ()) {face=face.shift(CuboidDirection.West,1);}return new Cuboid(this.worldName,this.x1,this.y1,face.getLowerZ(),this.x2,this.y2,this.z2);default :throw new IllegalArgumentException("Invalid direction " + dir);}}  }
class C{  protected void paint(SynthContext context,Graphics g){  Border vpBorder=scrollpane.getViewportBorder();  if (vpBorder != null) {    Rectangle r=scrollpane.getViewportBorderBounds();    vpBorder.paintBorder(scrollpane,g,r.x,r.y,r.width,r.height);  }}  }
class C{  private int[] compute_interpolation() throws IOException {  assert (envelope_data != null);  if (image == null || num == null) {    compute_tables();  }  assert (num != null);  assert (image != null);  int Nz=Constants.PreProcParam.N_z;  int Nx=Constants.PreProcParam.N_x;  make_interpolation(envelope_data,N_samples,ScanConversion.indexData,ScanConversion.indexImg,ScanConversion.weight,ScanConversion.numPixels,image);  for (int i=0; i < Nz; i++) {    for (int j=0; j < Nx; j++) {      num[j * Nz + i]=image[j + Nx * i];    }  }  return num;}  }
class C{  static public void logError(String msg){  AnalysisContext currentAnalysisContext2=currentAnalysisContext();  if (currentAnalysisContext2 == null) {    return;  }  currentAnalysisContext2.logAnError(msg);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public BufferedImagePixelMatrixEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public void parse(TagHandler handler) throws IOException {  this.handler=handler;  try {    try {      handler.setDecoderDictionary(dict);      header=decodeHeader();      handler.header(header);      decodeTags(handler);      handler.finish();    } catch (    FatalParseException e) {    } finally {      if (swfIn != null)       swfIn.close();    }  }  finally {    if (swdIn != null)     swdIn.close();  }}  }
class C{  static public EdgeSample cutoffJoin(final QueryEngine queryEngine,final JoinGraph joinGraph,final int limit,final IPredicate<?>[] path,final IConstraint[] constraints,final boolean pathIsComplete,final SampleBase sourceSample) throws Exception {  return AST2BOpRTO.cutoffJoin(queryEngine,joinGraph,limit,path,constraints,pathIsComplete,sourceSample);}  }
class C{  public void testLongitudeQuantization() throws Exception {  final double LONGITUDE_DECODE=360.0D / (0x1L << 32);  Random random=random();  for (int i=0; i < 10000; i++) {    int encoded=random.nextInt();    double min=MIN_LON_INCL + (encoded - (long)Integer.MIN_VALUE) * LONGITUDE_DECODE;    double decoded=decodeLongitude(encoded);    assertEquals(min,decoded,0.0D);    assertEquals(encoded,encodeLongitude(decoded));    assertEquals(encoded,encodeLongitudeCeil(decoded));    if (encoded != Integer.MAX_VALUE) {      double max=min + LONGITUDE_DECODE;      assertEquals(max,decodeLongitude(encoded + 1),0.0D);      assertEquals(encoded + 1,encodeLongitude(max));      assertEquals(encoded + 1,encodeLongitudeCeil(max));      double minEdge=Math.nextUp(min);      double maxEdge=Math.nextDown(max);      assertEquals(encoded,encodeLongitude(minEdge));      assertEquals(encoded + 1,encodeLongitudeCeil(minEdge));      assertEquals(encoded,encodeLongitude(maxEdge));      assertEquals(encoded + 1,encodeLongitudeCeil(maxEdge));      long minBits=NumericUtils.doubleToSortableLong(minEdge);      long maxBits=NumericUtils.doubleToSortableLong(maxEdge);      for (int j=0; j < 100; j++) {        double value=NumericUtils.sortableLongToDouble(TestUtil.nextLong(random,minBits,maxBits));        assertEquals(encoded,encodeLongitude(value));        assertEquals(encoded + 1,encodeLongitudeCeil(value));      }    }  }}  }
class C{  public boolean contains(final CreatureRespawnPoint point){  if (point == null) {    return false;  }  final IRPZone entityZone=point.getZone();  return zone.equals(entityZone) && shape.contains(point.getX(),point.getY());}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public XTIFFEncodeParam(){  initialize();}  }
class C{  public static void removeCachedTeXFormula(Object o) throws ParseException {  if (o != null && o instanceof CachedTeXFormula) {    cache.remove((CachedTeXFormula)o);  }}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  CacheEntry oldTable[]=table;  int newCapacity=oldCapacity * 2 + 1;  CacheEntry newTable[]=new CacheEntry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newTable;  for (int i=oldCapacity; i-- > 0; ) {    for (CacheEntry old=oldTable[i]; old != null; ) {      CacheEntry e=old;      old=old.next;      if (e.check() != null) {        int index=(e.hash & 0x7FFFFFFF) % newCapacity;        e.next=newTable[index];        newTable[index]=e;      } else       count--;    }  }}  }
class C{  public void removeConfig(String lockName,String siteId,String configKInd,String configId) throws Exception {  InterProcessLock lock=acquireLock(lockName);  try {    Configuration config=coordinator.queryConfiguration(siteId,configKInd,configId);    if (config != null) {      coordinator.removeServiceConfiguration(siteId,config);      log.debug("removed config successfully");    } else {      log.debug("config " + configId + " of kind "+ configKInd+ " was not removed since it could not be found");    }  }  finally {    releaseLock(lock);  }}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public void checkUser(User user) throws BadRequestException {  if (user == null) {    throw new BadRequestException("User required");  }  if (isNullOrEmpty(user.getName())) {    throw new BadRequestException("User name required");  }  if (!isValidName(user.getName())) {    throw new BadRequestException("Username must contain only letters and digits");  }  if (isNullOrEmpty(user.getEmail())) {    throw new BadRequestException("User email required");  }  if (user.getPassword() != null) {    checkPassword(user.getPassword());  }}  }
class C{  @Override public void write(final int i) throws IOException {}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Inline static void compilePutfieldBarrierCharImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.charFieldWriteBarrierMethod);}  }
class C{  public XmlHandler overrideGlobal(Class<?> aClass,Global global){  deleteGlobal(aClass);  addGlobal(aClass,global);  return this;}  }
class C{  public void switchState(final boolean showAnimation){  if (showAnimation) {    final int childCount=getChildCount();    for (int i=0; i < childCount; i++) {      bindChildAnimation(getChildAt(i),i,300);    }  }  mExpanded=!mExpanded;  if (!showAnimation) {    requestLayout();  }  invalidate();}  }
class C{  public void testSelectLargeResultSet(){  String stmtText="select id, mycol3, mycol2 from " + SupportBean_S0.class.getName() + ".win:keepall() as s0,"+ " sql:MyDB ['select mycol3, mycol2 from mytesttable_large'] as s1 where s0.id = s1.mycol3";  EPStatement statement=epServiceRetained.getEPAdministrator().createEPL(stmtText);  listener=new SupportUpdateListener();  statement.addListener(listener);  long startTime=System.currentTimeMillis();  for (int i=0; i < 200; i++) {    int num=i + 1;    String col2=Integer.toString(Math.round((float)num / 10));    SupportBean_S0 bean=new SupportBean_S0(num);    epServiceRetained.getEPRuntime().sendEvent(bean);    EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),new String[]{"id","mycol3","mycol2"},new Object[]{num,num,col2});  }  long endTime=System.currentTimeMillis();  log.info("delta=" + (endTime - startTime));  assertTrue(endTime - startTime < 500);  assertFalse(listener.isInvoked());}  }
class C{  public boolean containsKey(Object key1,Object key2,Object key3){  int hashCode=hash(key1,key2,key3);  AbstractHashedMap.HashEntry entry=map.data[map.hashIndex(hashCode,map.data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public void reset(int index){  mCurrentColors[index]=COLOR_SCHEME.mDefaultColors[index];}  }
class C{  public void printArguments(Vertex equation,Primitive type,String[] tokens,boolean reverse,boolean newLine,boolean unravel,Writer writer,String indent,List<Vertex> variables,List<Vertex> equations,Set<Vertex> elements,boolean space,Network network) throws IOException {  List<Relationship> arguments=equation.orderedRelationships(type);  if (arguments != null) {    boolean needsBrackets=!unravel;    if ((arguments.size() == 1) || (tokens != null)) {      needsBrackets=false;    }    if (arguments.size() == 1) {      newLine=false;    } else     if (arguments.size() > 3) {      newLine=true;    }    if (!unravel && space) {      writer.write(" ");    }    if (needsBrackets) {      writer.write("(");    }    int size=arguments.size();    for (int index=0; index < size; index++) {      if (newLine && (!unravel || (index > 0))) {        writer.write("\r\n");        writer.write(indent);        writer.write("\t");        writer.write("\t");      }      Vertex argument=null;      if (reverse) {        argument=arguments.get(size - index - 1).getTarget();      } else {        argument=arguments.get(index).getTarget();      }      if (argument.instanceOf(Primitive.VARIABLE) && !elements.contains(argument)) {        variables.add(argument);        elements.add(argument);      }      boolean isEquation=argument.instanceOf(Primitive.EQUATION);      if (!unravel && !needsBrackets && isEquation) {        writer.write("(");      }      printElement(argument,writer,indent,equations,variables,elements,network);      if (!unravel && !needsBrackets && isEquation) {        writer.write(")");      }      if (index < (size - 1)) {        if (tokens != null) {          writer.write(" ");          writer.write(tokens[index]);          writer.write(" ");        } else {          if (unravel) {            writer.write(";");          } else {            writer.write(",");          }          if (!newLine) {            writer.write(" ");          }        }      }    }    if (!unravel && newLine) {      writer.write("\r\n");      writer.write(indent);      writer.write("\t");    }    if (needsBrackets) {      writer.write(")");    }  }}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  private void angularWatch(String name,String noteId,AngularObjectWatcher watcher){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  if (registry.get(name,noteId,null) != null) {    registry.get(name,noteId,null).addWatcher(watcher);  }}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,@Nullable Throwable t){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  state.taskState.subStage=subStage;  if (null != t) {    state.taskState.failure=Utils.toServiceErrorResponse(t);  }  return state;}  }
class C{  public Object touch(int row){  if (row < 1 || row > size)   return NullSupportHelper.full() ? null : "";  Object o=data[row - 1];  if (o != null)   return o;  return setEL(row,new StructImpl());}  }
class C{  private boolean saveSelection(){  log.info("");  MAttributeSet as=m_masi.getMAttributeSet();  if (as == null)   return true;  m_changed=false;  String mandatory="";  if (!m_productWindow && as.isLot()) {    log.fine("Lot=" + fieldLotString.getText());    String text=fieldLotString.getText();    m_masi.setLot(text);    if (as.isLotMandatory() && (text == null || text.length() == 0))     mandatory+=" - " + Msg.translate(Env.getCtx(),"Lot");    m_changed=true;  }  if (!m_productWindow && as.isSerNo()) {    log.fine("SerNo=" + fieldSerNo.getText());    String text=fieldSerNo.getText();    m_masi.setSerNo(text);    if (as.isSerNoMandatory() && (text == null || text.length() == 0))     mandatory+=" - " + Msg.translate(Env.getCtx(),"SerNo");    m_changed=true;  }  if (!m_productWindow && as.isGuaranteeDate()) {    log.fine("GuaranteeDate=" + fieldGuaranteeDate.getValue());    Date gDate=fieldGuaranteeDate.getValue();    Timestamp ts=gDate != null ? new Timestamp(gDate.getTime()) : null;    m_masi.setGuaranteeDate(ts);    if (as.isGuaranteeDateMandatory() && ts == null)     mandatory+=" - " + Msg.translate(Env.getCtx(),"GuaranteeDate");    m_changed=true;  }  if (m_changed || m_masi.getM_AttributeSetInstance_ID() == 0) {    m_masi.save();    m_M_AttributeSetInstance_ID=m_masi.getM_AttributeSetInstance_ID();    m_M_AttributeSetInstanceName=m_masi.getDescription();  }  if (m_M_AttributeSetInstance_ID > 0) {    MAttribute[] attributes=as.getMAttributes(!m_productASI);    for (int i=0; i < attributes.length; i++) {      if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attributes[i].getAttributeValueType())) {        Listbox editor=(Listbox)m_editors.get(i);        ListItem item=editor.getSelectedItem();        MAttributeValue value=item != null ? (MAttributeValue)item.getValue() : null;        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && value == null)         mandatory+=" - " + attributes[i].getName();        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      } else       if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributes[i].getAttributeValueType())) {        NumberBox editor=(NumberBox)m_editors.get(i);        BigDecimal value=editor.getValue();        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && value == null)         mandatory+=" - " + attributes[i].getName();        if (value != null && value.scale() == 0)         value=value.setScale(1,BigDecimal.ROUND_HALF_UP);        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      } else {        Textbox editor=(Textbox)m_editors.get(i);        String value=editor.getText();        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && (value == null || value.length() == 0))         mandatory+=" - " + attributes[i].getName();        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      }    }    m_changed=true;  }  if (m_changed) {    m_masi.setDescription();    m_masi.save();  }  m_M_AttributeSetInstance_ID=m_masi.getM_AttributeSetInstance_ID();  m_M_AttributeSetInstanceName=m_masi.getDescription();  if (mandatory.length() > 0) {    FDialog.error(m_WindowNo,this,"FillMandatory",mandatory);    return false;  }  return true;}  }
class C{  public void writeBytes(long ptr,byte[] arr,int off,int len){  GridUnsafe.copyMemory(arr,GridUnsafe.BYTE_ARR_OFF + off,null,ptr,len);}  }
class C{  protected void addPressed(ActionEvent e){  editMode=false;  duplicateMode=false;  if ((sectionManager.getSystemNameList().size()) > 0) {    addEditPressed();  } else {    javax.swing.JOptionPane.showMessageDialog(null,rbx.getString("Message21"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public List<Interval> insertB(List<Interval> intervals,Interval newInterval){  int i=0;  while (i < intervals.size() && intervals.get(i).end < newInterval.start) {    i++;  }  while (i < intervals.size() && intervals.get(i).start <= newInterval.end) {    newInterval=new Interval(Math.min(intervals.get(i).start,newInterval.start),Math.max(intervals.get(i).end,newInterval.end));    intervals.remove(i);  }  intervals.add(i,newInterval);  return intervals;}  }
class C{  public static long rotateLeft(long v,int distance){  return (v << distance) | (v >>> -distance);}  }
class C{  public synchronized void addAttack(AttackAction aa){  Entity ae=game.getEntity(aa.getEntityId());  Targetable t=game.getTarget(aa.getTargetType(),aa.getTargetId());  if ((ae == null) || (t == null) || (t.getTargetType() == Targetable.TYPE_INARC_POD)|| (t.getPosition() == null)|| (ae.getPosition() == null)) {    return;  }  repaint(100);  for (  AttackSprite sprite : attackSprites) {    if ((sprite.getEntityId() == aa.getEntityId()) && (sprite.getTargetId() == aa.getTargetId())) {      if (aa instanceof WeaponAttackAction) {        WeaponAttackAction waa=(WeaponAttackAction)aa;        if (aa.getTargetType() != Targetable.TYPE_HEX_ARTILLERY) {          sprite.addWeapon(waa);        } else         if (waa.getEntity(game).getOwner().getId() == localPlayer.getId()) {          sprite.addWeapon(waa);        }      }      if (aa instanceof KickAttackAction) {        sprite.addWeapon((KickAttackAction)aa);      }      if (aa instanceof PunchAttackAction) {        sprite.addWeapon((PunchAttackAction)aa);      }      if (aa instanceof PushAttackAction) {        sprite.addWeapon((PushAttackAction)aa);      }      if (aa instanceof ClubAttackAction) {        sprite.addWeapon((ClubAttackAction)aa);      }      if (aa instanceof ChargeAttackAction) {        sprite.addWeapon((ChargeAttackAction)aa);      }      if (aa instanceof DfaAttackAction) {        sprite.addWeapon((DfaAttackAction)aa);      }      if (aa instanceof ProtomechPhysicalAttackAction) {        sprite.addWeapon((ProtomechPhysicalAttackAction)aa);      }      if (aa instanceof SearchlightAttackAction) {        sprite.addWeapon((SearchlightAttackAction)aa);      }      return;    }  }  if (aa instanceof WeaponAttackAction) {    WeaponAttackAction waa=(WeaponAttackAction)aa;    if (aa.getTargetType() != Targetable.TYPE_HEX_ARTILLERY) {      attackSprites.add(new AttackSprite(this,aa));    } else     if (waa.getEntity(game).getOwner().getId() == localPlayer.getId()) {      attackSprites.add(new AttackSprite(this,aa));    }  } else {    attackSprites.add(new AttackSprite(this,aa));  }}  }
class C{  public Collection<V> filter(Collection<K> request){  Collection<V> rv=new ArrayList<V>();  for (Iterator<K> iter=request.iterator(); iter.hasNext(); ) {    K key=iter.next();    V val=get(key);    if (val != null) {      rv.add(val);      iter.remove();    }  }  return rv;}  }
class C{  public LiveRef(ObjID objID,int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf){  this(objID,TCPEndpoint.getLocalEndpoint(port,csf,ssf),true);}  }
class C{  @Override public void projectionChanged(ProjectionEvent pevent){  mapBean.setProjection(pevent.getProjection());}  }
class C{  private void hideGpxTaskDialog(){  if (mSaveGpxProgress != null) {    mSaveGpxProgress.dismiss();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns01.class,args);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isEmpty(){  return 0 == size();}  }
class C{  public static String time(){  final long TIME_ZONE_OFFSET=-4;  long totalTime=System.currentTimeMillis();  totalTime/=1000;  String currentMinuteAndSecond="";  for (int i=0; i < 2; i++) {    currentMinuteAndSecond=(totalTime % 60 < 10 ? ":0" + totalTime % 60 : ":" + totalTime % 60) + currentMinuteAndSecond;    totalTime/=60;  }  String setAmOrPm="";  long currentHour=totalTime % 24;  if (currentHour == 0)   currentHour=24;  if (currentHour > 12) {    currentHour-=12;    setAmOrPm=" PM";  } else   setAmOrPm=" AM";  currentHour+=TIME_ZONE_OFFSET;  return currentHour + currentMinuteAndSecond + setAmOrPm;}  }
class C{  static String globToRegexp(String globExp){  StringBuilder dst=new StringBuilder();  char[] src=globExp.toCharArray();  int i=0;  while (i < src.length) {    char c=src[i++];switch (c) {case '*':      dst.append("[^/]*");    break;case '?':  dst.append("[^/]");break;case '.':case '+':case '{':case '}':case '(':case ')':case '|':case '^':case '$':dst.append('\\').append(c);break;case '\\':i=doubleSlashes(dst,src,i);break;default :dst.append(c);break;}}return dst.toString();}  }
class C{  public final char readChar() throws IOException {  r.readFully(w,0,2);  return (char)((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public Keccak512(){}  }
class C{  public static RE mkOption(RE arg){  if (arg == empty) {    return empty;  }  if (arg.op == ReOp.STAR) {    return arg;  }  if (arg.op == ReOp.PLUS) {    return mkStar(arg.unaryArg);  }  RE res=new RE(ReOp.OPTION);  res.unaryArg=arg;  return res;}  }
class C{  private void labelHelper(Instruction s,BasicBlock b){  Enumeration<BasicBlock> e=b.getIn();  boolean newHandler=!e.hasMoreElements();  while (!newHandler && e.hasMoreElements()) {    if (!(e.nextElement().isExceptionHandlerEquivalent(b)))     newHandler=true;  }  if (newHandler)   registerDef(s,b,exceptionState);}  }
class C{  public void endElement(String name) throws SAXException {}  }
class C{  public void run(){  try {    serverSocket.setSoTimeout(100);  } catch (  SocketException e) {    Logger.panic(getClass().getName(),null,e);    System.exit(1);  }  while (shouldLive) {    try {      socket=serverSocket.accept();      new ConnectionHandler(socket).start();      yield();    } catch (    InterruptedIOException e) {    }catch (    IOException e) {      Logger.error(getClass().getName(),null,e);    }  }  try {    serverSocket.close();  } catch (  IOException e) {    Logger.panic(getClass().getName(),null,e);    System.exit(1);  }  serverSocket=null;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (!eventName.equals("instance") && !eventName.equals("dataSet")) {    return false;  }  if (m_listenee instanceof DataSource) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      return ec.eventGeneratable(eventName);    }  }  if (m_listenee instanceof TrainingSetProducer) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      if (!eventName.equals("dataSet")) {        return false;      }      if (!ec.eventGeneratable("trainingSet")) {        return false;      }    }  }  if (m_listenee instanceof TestSetProducer) {    if (m_listenee instanceof EventConstraints) {      EventConstraints ec=(EventConstraints)m_listenee;      if (!eventName.equals("dataSet")) {        return false;      }      if (!ec.eventGeneratable("testSet")) {        return false;      }    }  }  return true;}  }
class C{  public void onBlockPlacedBy(World world,BlockPos pos,IBlockState state,EntityLivingBase entity,ItemStack stack){}  }
class C{  public WebViewSoundCloudAuthenticator(String clientId,String redirectUri,Activity context,int requestCode){  super(clientId,redirectUri);  this.context=context;  this.requestCode=requestCode;}  }
class C{  private String encodePath(String path){  StringBuilder buf=new StringBuilder(path.length());  for (int i=0; i < path.length(); i++) {    char c=path.charAt(i);switch (c) {case ' ':{        buf.append("%20");        break;      }case '%':{      buf.append("%25");      break;    }case ';':{    buf.append("%3B");    break;  }default :{  buf.append(c);}}}return buf.toString();}  }
class C{  public static void sendPlainTextErrorResponse(HttpServletResponse response,int status,String message) throws IOException {  byte[] messageBytes=message.getBytes("UTF-8");  response.setStatus(status);  response.setContentType(MimeTypes.TEXT_PLAIN_UTF_8);  response.setContentLength(messageBytes.length);  response.getOutputStream().write(messageBytes);}  }
class C{  static public void addLeadHandles(Figure f,Collection<Handle> handles){  handles.add(new NullHandle(f,new RelativeLocator(0f,0f)));  handles.add(new NullHandle(f,new RelativeLocator(0f,1f)));  handles.add(new NullHandle(f,new RelativeLocator(1f,0f)));  handles.add(new NullHandle(f,new RelativeLocator(1f,1f)));}  }
class C{  public void undo(){  ((ArffTableModel)getModel()).undo();}  }
class C{  public boolean isAllUpperCase(){  return (mCapsCount > 0) && (mCapsCount == size());}  }
class C{  public Boolean isIpv6LinkLocalAutoConfigurationSettable(){  return ipv6LinkLocalAutoConfigurationSettable;}  }
class C{  public DistributedDataManagerImpl(ZkConnection conn,String basePath,long maxNodes){  _zkClient=conn.curator();  if (StringUtils.isEmpty(basePath) || !basePath.startsWith("/") || (basePath.length() < 2)|| basePath.endsWith("/")) {    throw new IllegalArgumentException("basePath must be at least 2 characters long and start with (but not end with) /");  }  _basePath=basePath;  _maxNodes=maxNodes;  _log.info("{}: Manager constructed with node limit of {}",_basePath,_maxNodes);  ensureCacheStarted();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ServerSpace newGCspyServerSpace(ServerInterpreter serverInterpreter,String serverName,String driverName,String title,String blockInfo,int tileNum,String unused,boolean mainSpace){  return factory.newGCspyServerSpace(serverInterpreter,serverName,driverName,title,blockInfo,tileNum,unused,mainSpace);}  }
class C{  public boolean isEmpty(){  processQueue();  return hash.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.140 -0500",hash_original_method="11AFF6C7676FEB0968CBC8B8BF9C6A52",hash_generated_method="506047B26931C7FFF38435DA1DD16290") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public synchronized void write(byte buffer[]) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public synchronized void onContactsChanged(boolean isEmpty){  if (isContactsEmpty.get() != isEmpty) {    context.getPreferences().putBool("app.contacts.empty",isEmpty);    isContactsEmpty.change(isEmpty);  }  if (!isEmpty) {    if (isAppEmpty.get()) {      context.getPreferences().putBool("app.empty",false);      isAppEmpty.change(false);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void appendInt(int x){  elems=ArrayUtils.ensureCapacity(elems,length + 3);  elems[length]=(byte)((x >> 24) & 0xFF);  elems[length + 1]=(byte)((x >> 16) & 0xFF);  elems[length + 2]=(byte)((x >> 8) & 0xFF);  elems[length + 3]=(byte)((x) & 0xFF);  length=length + 4;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("hashAlg: 0x");  buffer.append(Functions.toFullHexString(hashAlg));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("mgf: 0x");  buffer.append(Functions.toFullHexString(mgf));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("sLen: ");  buffer.append(sLen);  return buffer.toString();}  }
class C{  public ClassLoaderInjector(Module module){  injector=Guice.createInjector(module);}  }
class C{  public static boolean inBounds(double min,double max,double value){  return (value < max) && (value > min);}  }
class C{  private NumberObjectDataSet(NumberObjectDataSet dataSet){  name=dataSet.name;  variables=new LinkedList<>(dataSet.variables);  data=new Number[dataSet.data.length][dataSet.data[0].length];  for (int i=0; i < dataSet.data.length; i++) {    System.arraycopy(dataSet.data[i],0,data[i],0,dataSet.data[0].length);  }  selection=new HashSet<>(dataSet.selection);  knowledge=dataSet.knowledge.copy();}  }
class C{  public void drawCapOutline(DrawContext dc,ShapeData shapeData){  this.prepareToDrawOutline(dc,this.getActiveCapAttributes(),defaultAttributes);  GL2 gl=dc.getGL().getGL2();  for (  ExtrudedBoundaryInfo boundary : shapeData) {    if (!dc.isPickingMode() && this.mustApplyLighting(dc,this.getActiveCapAttributes()))     gl.glNormalPointer(GL.GL_FLOAT,0,boundary.capNormalBuffer.rewind());    IntBuffer indices=boundary.capEdgeIndices;    gl.glVertexPointer(3,GL.GL_FLOAT,0,boundary.capVertexBuffer.rewind());    gl.glDrawElements(GL.GL_LINES,indices.limit(),GL.GL_UNSIGNED_INT,indices.rewind());  }}  }
class C{  @Override public boolean canLock(){  for (int i=0; i < _outputTurnoutList.size(); i++) {    if (_outputTurnoutList.get(i).getTurnout().canLock(Turnout.CABLOCKOUT)) {      return true;    }  }  return false;}  }
class C{  public boolean allowsUnsignedKeychange(){  return this.allowUnsignedKeychange;}  }
class C{  public byte[] readByteArray(int len) throws WireParseException {  require(len);  byte[] out=new byte[len];  System.arraycopy(array,pos,out,0,len);  pos+=len;  return out;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return isOptional();  } else {    if (validationRegexPattern == null) {      return true;    }    return validationRegexPattern.matcher(value).matches();  }}  }
class C{  public void close() throws IOException {  is.close();}  }
class C{  public String fetchWeatherForecastByLocation(Double longitude,Double latitude,Integer userId,String language,String units){  String cityFound;  String responseToUser;  try {    String completURL=BASEURL + FORECASTPATH + "?lat="+ URLEncoder.encode(latitude + "","UTF-8")+ "&lon="+ URLEncoder.encode(longitude + "","UTF-8")+ FORECASTPARAMS.replace("@language@",language).replace("@units@",units)+ APIIDEND;    ;    CloseableHttpClient client=HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();    HttpGet request=new HttpGet(completURL);    CloseableHttpResponse response=client.execute(request);    HttpEntity ht=response.getEntity();    BufferedHttpEntity buf=new BufferedHttpEntity(ht);    String responseString=EntityUtils.toString(buf,"UTF-8");    JSONObject jsonObject=new JSONObject(responseString);    if (jsonObject.getInt("cod") == 200) {      cityFound=jsonObject.getJSONObject("city").getString("name") + " (" + jsonObject.getJSONObject("city").getString("country")+ ")";      saveRecentWeather(userId,cityFound,jsonObject.getJSONObject("city").getInt("id"));      responseToUser=String.format(LocalisationService.getInstance().getString("weatherForcast",language),cityFound,convertListOfForecastToString(jsonObject,language,units,true));    } else {      BotLogger.warn(LOGTAG,jsonObject.toString());      responseToUser=LocalisationService.getInstance().getString("cityNotFound",language);    }  } catch (  Exception e) {    BotLogger.error(LOGTAG,e);    responseToUser=LocalisationService.getInstance().getString("errorFetchingWeather",language);  }  return responseToUser;}  }
class C{  protected Expression numberlit(int opPos){  opPos=getFirstChildPos(opPos);  return (XNumber)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  public Logo(byte[] data,ImageType type){  super(data,type);}  }
class C{  public PrincipalImpl(InetAddress address){  add=new InetAddress[1];  add[0]=address;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  BasicType parameterType(int n){  return parameter(n).type;}  }
class C{  protected PacketCollector(Connection conection,PacketFilter packetFilter){  this(conection,packetFilter,SmackConfiguration.getPacketCollectorSize());}  }
class C{  public boolean addAll(Collection c){  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  final public TermNode s(){  return (TermNode)get(0);}  }
class C{  public boolean isTranslation(){  return (type == TYPE_TRANSLATION);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getFileForAiring(getAir(stack));}  }
class C{  Set<Source> cachedSources(){  Set<Source> result=new HashSet<Source>();  for (  SwcScript swcScript : def2script.values()) {    CompilationUnit compilationUnit=swcScript.getCompilationUnit();    if (compilationUnit != null) {      Source source=compilationUnit.getSource();      if ((source != null) && (source.getCompilationUnit() != null) && (source.isInternal() || source.getCompilationUnit().hasTypeInfo)) {        result.add(source);      }    }  }  return result;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public void changedUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    return;  }  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(e.getOffset() + e.getLength());  }}  }
class C{  public ListHashTableReporter(ListHashTable<V> ht){  this.table=ht;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Bootique args(Collection<String> args){  if (args != null) {    this.args=Bootique.mergeArrays(this.args,Bootique.toArray(args));  }  return this;}  }
class C{  public static String signalStrengthJSON(SignalStrength signalStrength){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  try {    json.put("provider",SIGNAL_STRENGTH);    json.put("type",SIGNAL_STRENGTH);    json.put("timestamp",calendar.getTimeInMillis());    json.put("cdmaDbm",signalStrength.getCdmaDbm());    json.put("cdmaEcio",signalStrength.getCdmaEcio());    json.put("evdoDbm",signalStrength.getEvdoDbm());    json.put("evdoEcio",signalStrength.getEvdoEcio());    json.put("evdoSnr",signalStrength.getEvdoSnr());    json.put("gsmBitErrorRate",signalStrength.getGsmBitErrorRate());    json.put("gsmSignalStrength",signalStrength.getGsmSignalStrength());    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      json.put("level",signalStrength.getLevel());    }    json.put("isGSM",signalStrength.isGsm());  } catch (  JSONException exc) {    logJSONException(exc);  }  return json.toString();}  }
class C{  private boolean uploadLog(MessageModel eventData,String url){  String content=eventData.data;  if (!TextUtils.isEmpty(content) && deviceHelper.isNetworkAvailable()) {    try {      JSONObject object=new JSONObject(content);      object.put(MessageUtils.DEVICE_DATA,getDeviceJSONObject());      content=object.toString();      if (Ln.DebugMode) {        Toast.makeText(context,"Server address : " + url,Toast.LENGTH_SHORT).show();      }      PostResult post=NetworkHelper.uploadLog(url,content,getAppKey());      String responseMsg=post.getResponseMsg();      Ln.e("error",post.getResponseMsg());      if (responseMsg.equals("\"status\":200")) {        post.setSuccess(true);      }      if (post != null && post.isSuccess()) {        boolean success=parseResponseData(post.getResponseMsg());        if (success) {          if (Ln.DebugMode) {            Toast.makeText(context,"Send msg successfully!",Toast.LENGTH_SHORT).show();          }          MessageUtils.deleteManyMsg(context,eventData.idList);        } else {          if (Ln.DebugMode) {            Toast.makeText(context,"Fail to send msg !",Toast.LENGTH_SHORT).show();          }        }        return success;      } else {        Ln.e("error",post.getResponseMsg());      }    } catch (    Exception e) {      Ln.d("ServiceHelper == ","uploadLog == ",e);    }  }  return false;}  }
class C{  public boolean isClosed(){  return this.stats.isClosed();}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.ENTRY;}  }
class C{  public static int[] maxIndex(double[][] M){  int[] maxI=new int[M[0].length];  for (int j=0; j < maxI.length; j++) {    maxI[j]=0;    for (int i=1; i < M.length; i++)     if (M[i][j] > M[maxI[j]][j])     maxI[j]=i;  }  return maxI;}  }
class C{  public void test_Constructor02(){  try {    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters((List)null);    fail();  } catch (  NullPointerException expected) {  }  List lsEmpty=new ArrayList<String>();  try {    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(lsEmpty);    fail();  } catch (  IllegalArgumentException expected) {  }  List lsFiled=new ArrayList<String>();  lsFiled.add("Parameter1");  lsFiled.add("Parameter2");  new KeyStoreBuilderParameters(lsFiled);}  }
class C{  public Object peek(int n) throws EmptyStackException {  int m=(size() - n) - 1;  if (m < 0) {    throw new EmptyStackException();  } else {    return get(m);  }}  }
class C{  public String globalInfo(){  return "The class that splits a KDTree node based on the median value of " + "a dimension in which the node's points have the widest spread.\n\n" + "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private void applyViewOptions(OptionsParam options){  if (getView() == null) {    return;  }  getBreakPanel().setButtonsLocation(options.getViewParam().getBrkPanelViewOption());  getBreakPanel().setButtonMode(options.getParamSet(BreakpointsParam.class).getButtonMode());}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  static public void fail(){  fail(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributensurinull.class,args);}  }
class C{  private void updateCropViewRect(float touchX,float touchY){  mTempRect.set(mCropViewRect);switch (mCurrentTouchCornerIndex) {case 0:    mTempRect.set(touchX,touchY,mCropViewRect.right,mCropViewRect.bottom);  break;case 1:mTempRect.set(mCropViewRect.left,touchY,touchX,mCropViewRect.bottom);break;case 2:mTempRect.set(mCropViewRect.left,mCropViewRect.top,touchX,touchY);break;case 3:mTempRect.set(touchX,mCropViewRect.top,mCropViewRect.right,touchY);break;case 4:mTempRect.offset(touchX - mPreviousTouchX,touchY - mPreviousTouchY);if (mTempRect.left > getLeft() && mTempRect.top > getTop() && mTempRect.right < getRight() && mTempRect.bottom < getBottom()) {mCropViewRect.set(mTempRect);updateGridPoints();postInvalidate();}return;}boolean changeHeight=mTempRect.height() >= mCropRectMinSize;boolean changeWidth=mTempRect.width() >= mCropRectMinSize;mCropViewRect.set(changeWidth ? mTempRect.left : mCropViewRect.left,changeHeight ? mTempRect.top : mCropViewRect.top,changeWidth ? mTempRect.right : mCropViewRect.right,changeHeight ? mTempRect.bottom : mCropViewRect.bottom);if (changeHeight || changeWidth) {updateGridPoints();postInvalidate();}}  }
class C{  public FilterJoinBuilder path(String path){  this.path=path;  return this;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.WWW_AUTHENTICATE);    WWWAuthenticate wwwAuthenticate=new WWWAuthenticate();    super.parse(wwwAuthenticate);    return wwwAuthenticate;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static ParameterizedTypeImpl make(Class<?> rawType,Type[] actualTypeArguments,Type ownerType){  return new ParameterizedTypeImpl(rawType,actualTypeArguments,ownerType);}  }
class C{  @SuppressWarnings("unchecked") @Test public void clearEmptyComponents(){  IBufferTreeComponent<DefaultData> component1=Mockito.mock(IBufferTreeComponent.class);  when(component1.clearEmptyComponents()).thenReturn(true);  IBufferTreeComponent<DefaultData> component2=Mockito.mock(IBufferTreeComponent.class);  when(component2.clearEmptyComponents()).thenReturn(false);  Map<Object,ITreeComponent<DefaultData,DefaultData>> componentMap=MapUtils.putAll(new HashMap<Object,IBufferTreeComponent<DefaultData>>(),new Object[]{"c1",component1,"c2",component2});  when(branch.getComponentMap()).thenReturn(componentMap);  boolean isClear=branch.clearEmptyComponents();  assertThat(isClear,is(false));  assertThat(componentMap,not(hasValue((ITreeComponent<DefaultData,DefaultData>)component1)));  assertThat(componentMap,hasValue((ITreeComponent<DefaultData,DefaultData>)component2));  when(component2.clearEmptyComponents()).thenReturn(true);  isClear=branch.clearEmptyComponents();  assertThat(isClear,is(true));  assertThat(componentMap.values(),is(empty()));}  }
class C{  public static String replace(String str,String old_str,String new_str){  int o=0;  StringBuilder buf=new StringBuilder();  for (int i=str.indexOf(old_str); i > -1; i=str.indexOf(old_str,i + 1)) {    if (i > o) {      buf.append(str.substring(o,i));    }    buf.append(new_str);    o=i + old_str.length();  }  buf.append(str.substring(o,str.length()));  return buf.toString();}  }
class C{  private int mulsub(int[] q,int[] a,int x,int len,int offset){  long xLong=x & LONG_MASK;  long carry=0;  offset+=len;  for (int j=len - 1; j >= 0; j--) {    long product=(a[j] & LONG_MASK) * xLong + carry;    long difference=q[offset] - product;    q[offset--]=(int)difference;    carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  }  return (int)carry;}  }
class C{  @Override public void meet(StatementPattern node){  Value predicate=node.getPredicateVar().getValue();  if (MATCHES.equals(predicate)) {    matchesPatterns.add(node);  } else   if (QUERY.equals(predicate)) {    queryPatterns.add(node);  } else   if (PROPERTY.equals(predicate)) {    propertyPatterns.add(node);  } else   if (SCORE.equals(predicate)) {    scorePatterns.add(node);  } else   if (SNIPPET.equals(predicate)) {    snippetPatterns.add(node);  } else   if (TYPE.equals(predicate)) {    Value object=node.getObjectVar().getValue();    if (LUCENE_QUERY.equals(object)) {      typePatterns.add(node);    }  }}  }
class C{  @SuppressWarnings("unchecked") @Test public void clearParameters(){  List<String> parameterTypes=Mockito.mock(List.class);  Mockito.when(parameterTypes.size()).thenReturn(0);  Mockito.when(rsc.getParameterTypes()).thenReturn(parameterTypes);  Mockito.when(rsc.getTargetMethodName()).thenReturn("clearParameters");  Object[] parameters=new Object[0];  Object object=new Object();  preparedStatementParameterHook.beforeBody(0,0,object,parameters,rsc);  preparedStatementParameterHook.firstAfterBody(0,0,object,parameters,null,rsc);  preparedStatementParameterHook.secondAfterBody(coreService,0,0,object,parameters,null,rsc);  Mockito.verify(statementStorage,Mockito.times(1)).clearParameters(object);  Mockito.verifyNoMoreInteractions(statementStorage);  Mockito.verifyZeroInteractions(coreService);}  }
class C{  public static long[] interleaveBits(byte[] coords,int iter){  final int numdim=coords.length;  final long[] bitset=BitsUtil.zero(numdim);  final long mask=1L << 7 - iter;  for (int dim=0; dim < numdim; dim++) {    if ((coords[dim] & mask) != 0) {      BitsUtil.setI(bitset,dim);    }  }  return bitset;}  }
class C{  public var addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void writeTags() throws IOException {  writer.writeComment("===================== HTML 4.0 basic tags ======================");  Map<String,ComponentBean> componentsByComponentFamily=GeneratorUtil.getComponentFamilyComponentMap(configBean);  Map<String,ArrayList<RendererBean>> renderersByComponentFamily=GeneratorUtil.getComponentFamilyRendererMap(configBean,propManager.getProperty(PropertyManager.RENDERKIT_ID));  String targetPackage=propManager.getProperty(PropertyManager.TARGET_PACKAGE);  for (  Map.Entry entry : renderersByComponentFamily.entrySet()) {    String componentFamily=(String)entry.getKey();    List<RendererBean> renderers=(List<RendererBean>)entry.getValue();    for (Iterator<RendererBean> rendererIter=renderers.iterator(); rendererIter.hasNext(); ) {      RendererBean renderer=rendererIter.next();      String rendererType=renderer.getRendererType();      writer.startElement("tag");      String tagName=makeTldTagName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType));      if (tagName == null) {        throw new IllegalStateException("Could not determine tag name");      }      writer.startElement("name");      writer.writeText(tagName);      writer.closeElement();      if (GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)) == null) {        throw new IllegalStateException("Could not determine tag class name");      }      writer.startElement("tag-class");      writer.writeText(targetPackage + '.' + GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)));      writer.closeElement();      writer.startElement("body-content");      writer.writeText(getBodyContent(tagName));      writer.closeElement();      DescriptionBean description=renderer.getDescription("");      if (description != null) {        String descriptionText=description.getDescription().trim();        if (descriptionText != null) {          writer.startElement("description");          StringBuffer sb=new StringBuffer();          sb.append("<![CDATA[");          sb.append(descriptionText);          sb.append("]]>\n");          writer.writeText(sb.toString());          writer.closeElement();        }      }      ComponentBean component=componentsByComponentFamily.get(componentFamily);      PropertyBean[] properties=component.getProperties();      PropertyBean property;      for (int i=0, len=properties.length; i < len; i++) {        if (null == (property=properties[i])) {          continue;        }        if (!property.isTagAttribute()) {          continue;        }        writer.startElement("attribute");        writer.startElement("name");        writer.writeText(property.getPropertyName());        writer.closeElement();        writer.startElement("required");        writer.writeText(property.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        writer.startElement("rtexprvalue");        writer.writeText(getRtexprvalue(tagName,property.getPropertyName()));        writer.closeElement();        description=property.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        writer.closeElement();      }      AttributeBean[] attributes=renderer.getAttributes();      AttributeBean attribute;      for (int i=0, len=attributes.length; i < len; i++) {        if (null == (attribute=attributes[i])) {          continue;        }        if (!attribute.isTagAttribute()) {          continue;        }        if (attributeShouldBeExcluded(renderer,attribute.getAttributeName())) {          continue;        }        writer.startElement("attribute");        writer.startElement("name");        writer.writeText(attribute.getAttributeName());        writer.closeElement();        writer.startElement("required");        writer.writeText(attribute.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        writer.startElement("rtexprvalue");        writer.writeText(getRtexprvalue(tagName,attribute.getAttributeName()));        writer.closeElement();        description=attribute.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        writer.closeElement();      }      writer.startElement("attribute");      writer.startElement("name");      writer.writeText("binding");      writer.closeElement();      writer.startElement("required");      writer.writeText("false");      writer.closeElement();      writer.startElement("rtexprvalue");      writer.writeText("false");      writer.closeElement();      writer.startElement("description");      writer.writeText("The value binding expression linking this component to a property in a backing bean");      writer.closeElement(3);    }  }  String tagDef=loadOptionalTags();  if (tagDef != null) {    writer.write(tagDef);  }}  }
class C{  @Implementation public boolean performAction(int action){  if (mPerformedActionList == null) {    mPerformedActionList=new LinkedList<>();  }  mPerformedActionList.add(new Integer(action));  return true;}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  protected void sequence_Block(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isForgeUser(){  return fmlTokenInHandshake || clientModList != null;}  }
class C{  public static void assumeTrue(boolean assumption,String message) throws TestAbortedException {  assumeTrue(null,null);}  }
class C{  private String cleanInput(String input){  if (input == null) {    return null;  }  input=input.trim();  if (input.length() == 0) {    return null;  }  return input.toUpperCase();}  }
class C{  public FluxHandleFuseable(Publisher<? extends T> source,BiConsumer<? super T,SynchronousSink<R>> handler){  super(source);  this.handler=Objects.requireNonNull(handler,"handler");}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  void compile(List<String> opts,List<File> files) throws Exception {  System.err.println("javac: " + opts + " "+ files);  List<String> args=new ArrayList<String>();  args.addAll(opts);  for (  File f : files)   args.add(f.getPath());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  int rc=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]),pw);  pw.flush();  if (sw.getBuffer().length() > 0)   System.err.println(sw.toString());  if (rc != 0)   throw new Exception("compilation failed: rc=" + rc);}  }
class C{  public boolean isCanContainPTZ(){  return canContainPTZ;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + lambda+ ")";}  }
class C{  @Override public String toString(){  return "not (" + exp + ")";}  }
class C{  public int selectNumCalendars(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    int count=0;    ps=conn.prepareStatement(rtp(SELECT_NUM_CALENDARS));    rs=ps.executeQuery();    if (rs.next()) {      count=rs.getInt(1);    }    return count;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  protected void drawLine(int p0,int p1,Graphics g,int x,int y){  Element lineMap=getElement();  Element line=lineMap.getElement(lineMap.getElementIndex(p0));  Element elem;  try {    if (line.isLeaf()) {      drawText(line,p0,p1,g,x,y);    } else {      int idx=line.getElementIndex(p0);      int lastIdx=line.getElementIndex(p1);      for (; idx <= lastIdx; idx++) {        elem=line.getElement(idx);        int start=Math.max(elem.getStartOffset(),p0);        int end=Math.min(elem.getEndOffset(),p1);        x=drawText(elem,start,end,g,x,y);      }    }  } catch (  BadLocationException e) {    throw new StateInvariantError("Can't render: " + p0 + ","+ p1);  }}  }
class C{  public JarInfo() throws IonException {  Enumeration<URL> manifestUrls;  try {    manifestUrls=getClass().getClassLoader().getResources(MANIFEST_FILE);  } catch (  IOException e) {    throw new IonException("Unable to load manifests.",e);  }  List<Manifest> manifests=new ArrayList<Manifest>();  while (manifestUrls.hasMoreElements()) {    try {      manifests.add(new Manifest(manifestUrls.nextElement().openStream()));    } catch (    IOException e) {      continue;    }  }  loadBuildProperties(manifests);}  }
class C{  public boolean dataDelete(){  log.fine("#" + m_vo.TabNo + " - row="+ m_currentRow);  boolean retValue=m_mTable.dataDelete(m_currentRow);  setCurrentRow(m_currentRow,true);  fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_DELETE));  return retValue;}  }
class C{  @Override public Eval<Boolean> allMatch(final Predicate<? super T> predicate){  return Eval.later(null);}  }
class C{  public ContMoveAndStrengthenOnlinePlayers(){  StendhalRPWorld rpWorld=SingletonRepository.getRPWorld();  for (  IRPZone irpZone : rpWorld) {    StendhalRPZone irpZone2=(StendhalRPZone)irpZone;    if (!irpZone2.getName().startsWith("int")) {      zones.add(irpZone2);    }  }}  }
class C{  public void add(FactLine line){  m_lines.add(line);}  }
class C{  static int sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler,int edgeTreatmentFlags) throws org.xml.sax.SAXException {  boolean processingLeadingWhitespace=((edgeTreatmentFlags & SUPPRESS_LEADING_WS) != 0);  boolean seenWhitespace=((edgeTreatmentFlags & CARRY_WS) != 0);  int currPos=start;  int limit=start + length;  if (processingLeadingWhitespace) {    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (currPos == limit) {      return edgeTreatmentFlags;    }  }  while (currPos < limit) {    int startNonWhitespace=currPos;    for (; currPos < limit && !XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startNonWhitespace != currPos) {      if (seenWhitespace) {        handler.characters(SINGLE_SPACE,0,1);        seenWhitespace=false;      }      handler.characters(ch,startNonWhitespace,currPos - startNonWhitespace);    }    int startWhitespace=currPos;    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startWhitespace != currPos) {      seenWhitespace=true;    }  }  return (seenWhitespace ? CARRY_WS : 0) | (edgeTreatmentFlags & SUPPRESS_TRAILING_WS);}  }
class C{  public synchronized void dump(){  for (  Map.Entry<Thread,ThreadStatus> entry : mThreadStatus.entrySet()) {    Log.v(TAG,"[Dump] Thread " + entry.getKey() + " ("+ entry.getKey().getId()+ ")'s status is "+ entry.getValue());  }}  }
class C{  public static boolean hasThreeTen(){  try {    Class.forName("org.threeten.bp.LocalDate");    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public static ComponentGroup enclose(Component... cmp){  ComponentGroup c=new ComponentGroup();  for (  Component cc : cmp) {    c.add(cc);  }  return c;}  }
class C{  public boolean isDynamic(){  return this.mass.getType() != MassType.INFINITE;}  }
class C{  public boolean addRestrictingRange(int dimension,Range range){  Range existing=delimiters.get(dimension);  if (existing == null) {    delimiters.put(dimension,range);    return true;  } else {    if (existing.contains(range) && !existing.equals(range)) {      delimiters.put(dimension,range);      return true;    }  }  return false;}  }
class C{  private static Boolean aclPermission(String principalName,Principal.Type principalType,AccessControlList accessControlList,BasicPermissions p){  Principal principal=DtoFactory.newDto(Principal.class).withName(principalName).withType(principalType);  Set<String> perms=accessControlList.getPermissions(principal);  return (perms == null) ? null : Boolean.valueOf(perms.contains(p.value()) || perms.contains(BasicPermissions.ALL.value()));}  }
class C{  private void proceedSkipTestUsingByteArrayBufferingType(CipherInputStream ciIn2,int blockNum) throws IOException {  int index=blockNum * SAVE;  int len1=ciIn2.read(outputText,index,SAVE);  index+=len1;  int len2=0;  int totalRead=len1;  while (len1 != SAVE && len2 != -1) {    len2=ciIn2.read(outputText,index,SAVE - len1);    len1+=len2;    index+=len2;    totalRead+=len2;  }  if (totalRead != SAVE) {    throw new RuntimeException("Read bytes number " + totalRead + " does not equal to given number "+ SAVE);  }}  }
class C{  private void showRegularMessage(SocialFactory.SOCIAL_SOURCE_TYPE socialType){  LinearLayout messageLayout=(LinearLayout)findViewById(R.id.message_layout);  TextView messageView=(TextView)findViewById(R.id.message_body);  String socialTypeString="";  String signUpSuccessString="";  if (socialType == SocialFactory.SOCIAL_SOURCE_TYPE.TYPE_FACEBOOK) {    socialTypeString=getString(R.string.facebook_text);    signUpSuccessString=getString(R.string.sign_up_with_facebook_ok);  } else {    socialTypeString=getString(R.string.google_text);    signUpSuccessString=getString(R.string.sign_up_with_google_ok);  }  StringBuilder sb=new StringBuilder();  CharSequence extraInfoPrompt=ResourceUtil.getFormattedString(getResources(),R.string.sign_up_with_social_ok,"platform_name",environment.getConfig().getPlatformName());  sb.append(signUpSuccessString.replace(socialTypeString,"<b><strong>" + socialTypeString + "</strong></b>")).append("<br>").append(extraInfoPrompt);  Spanned result=Html.fromHtml(sb.toString());  messageView.setText(result);  messageLayout.setVisibility(View.VISIBLE);}  }
class C{  public boolean hasSubElement(String name){  if (subElements == null) {    return false;  }  return subElements.containsKey(name);}  }
class C{  public static IMethodBinding findOverriddenMethodInHierarchy(ITypeBinding type,IMethodBinding binding){  IMethodBinding method=findOverriddenMethodInType(type,binding);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findOverriddenMethodInHierarchy(superClass,binding);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findOverriddenMethodInHierarchy(interfaces[i],binding);    if (method != null)     return method;  }  return null;}  }
class C{  protected boolean startingMultiLineComment(String content,int startOffset,int endOffset) throws BadLocationException {  if (!getMultiLineComment()) {    return false;  }  int index=indexOf(content,getMultiLineCommentStart(),startOffset);  if ((index < 0) || (index > endOffset)) {    return false;  } else {    setInsideMultiLineComment(true);    return true;  }}  }
class C{  public CFilterByEdgesAction(final JTextField filterField){  super("Filter by edge count");  m_filterField=filterField;}  }
class C{  @Override public void mouseClicked(MouseEvent event){  if (SwingUtilities.isRightMouseButton(event)) {    JPopupMenu contextMenu=new JPopupMenu();    if (event.getComponent() == mWaterfallPanel) {      contextMenu.add(new PauseItem(mWaterfallPanel,"Pause"));    }    long frequency=mOverlayPanel.getFrequencyFromAxis(event.getX());    if (event.getComponent() == mOverlayPanel) {      ArrayList<Channel> channels=mOverlayPanel.getChannelsAtFrequency(frequency);      for (      Channel channel : channels) {        JMenu channelMenu=ChannelUtils.getContextMenu(mChannelModel,mChannelProcessingManager,channel,SpectralDisplayPanel.this);        if (channelMenu != null) {          contextMenu.add(channelMenu);        }      }      if (!channels.isEmpty()) {        contextMenu.add(new JSeparator());      }    }    JMenu frequencyMenu=new JMenu(sCURSOR_FORMAT.format((float)frequency / 1000000.0f));    JMenu decoderMenu=new JMenu("Add Decoder");    for (    DecoderType type : DecoderType.getPrimaryDecoders()) {      decoderMenu.add(new DecoderItem(type,frequency));    }    frequencyMenu.add(decoderMenu);    contextMenu.add(frequencyMenu);    contextMenu.add(new JSeparator());    JMenu colorMenu=new JMenu("Color");    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.CHANNEL_CONFIG));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.CHANNEL_CONFIG_PROCESSING));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.CHANNEL_CONFIG_SELECTED));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_CURSOR));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_LINE));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_BACKGROUND));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_GRADIENT_BOTTOM));    colorMenu.add(new ColorSettingMenuItem(mSettingsManager,ColorSettingName.SPECTRUM_GRADIENT_TOP));    contextMenu.add(colorMenu);    JMenu displayMenu=new JMenu("Display");    contextMenu.add(displayMenu);    if (event.getComponent() != mWaterfallPanel) {      JMenu averagingMenu=new JMenu("Averaging");      averagingMenu.add(new AveragingItem(mSpectrumPanel,4));      displayMenu.add(averagingMenu);      JMenu channelDisplayMenu=new JMenu("Channel");      channelDisplayMenu.add(new ChannelDisplayItem(mOverlayPanel,ChannelDisplay.ALL));      channelDisplayMenu.add(new ChannelDisplayItem(mOverlayPanel,ChannelDisplay.ENABLED));      channelDisplayMenu.add(new ChannelDisplayItem(mOverlayPanel,ChannelDisplay.NONE));      displayMenu.add(channelDisplayMenu);    }    JMenu fftWidthMenu=new JMenu("FFT Width");    displayMenu.add(fftWidthMenu);    for (    DFTSize width : DFTSize.values()) {      fftWidthMenu.add(new DFTSizeItem(SpectralDisplayPanel.this,width));    }    JMenu frameRateMenu=new JMenu("Frame Rate");    displayMenu.add(frameRateMenu);    frameRateMenu.add(new FrameRateItem(mDFTProcessor,14));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,16));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,18));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,20));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,25));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,30));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,40));    frameRateMenu.add(new FrameRateItem(mDFTProcessor,50));    JMenu fftWindowType=new JMenu("Window Type");    displayMenu.add(fftWindowType);    for (    WindowType type : WindowType.values()) {      fftWindowType.add(new FFTWindowTypeItem(mDFTProcessor,type));    }    if (event.getComponent() != mWaterfallPanel) {      JMenu smoothingMenu=new JMenu("Smoothing");      if (mSpectrumPanel.getSmoothingType() != SmoothingType.NONE) {        smoothingMenu.add(new SmoothingItem(mSpectrumPanel,5));        smoothingMenu.add(new JSeparator());      }      smoothingMenu.add(new SmoothingTypeItem(mSpectrumPanel,SmoothingType.GAUSSIAN));      smoothingMenu.add(new SmoothingTypeItem(mSpectrumPanel,SmoothingType.TRIANGLE));      smoothingMenu.add(new SmoothingTypeItem(mSpectrumPanel,SmoothingType.RECTANGLE));      smoothingMenu.add(new SmoothingTypeItem(mSpectrumPanel,SmoothingType.NONE));      displayMenu.add(smoothingMenu);    }    JMenuItem zoomMenu=new JMenu("Zoom");    double windowOffset=(double)event.getX() / (double)getWidth();    zoomMenu.add(new ZoomItem(frequency,windowOffset));    contextMenu.add(zoomMenu);    if (contextMenu != null) {      if (event.getComponent() == mOverlayPanel) {        contextMenu.show(mOverlayPanel,event.getX(),event.getY());      } else {        contextMenu.show(mWaterfallPanel,event.getX(),event.getY());      }    }  }}  }
class C{  public static void assertNotSame(Object expected,Object actual){  Assert.assertNotSame(expected,actual);}  }
class C{  RSAPrivateKey(long hCryptProv,long hCryptKey,int keyLength){  super(hCryptProv,hCryptKey,keyLength);}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.forReference(parsedFormatInfo.getDataMask());  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  public JToolbarSeparator(){  setMaximumSize(new Dimension(15,Integer.MAX_VALUE));}  }
class C{  private ExpressionEvaluator compute(ExpressionEvaluator subexpressionEvaluator){  String expressionString=null;  try {    expressionString=subexpressionEvaluator.getStringFunction().call();  } catch (  ExpressionParsingException e) {    throw e;  }catch (  Exception e) {    throw new ExpressionParsingException(e);  }  if (expressionString == null) {    return new SimpleExpressionEvaluator((String)null,ExpressionType.STRING);  }  try {    return parser.parseToEvaluator(expressionString);  } catch (  ExpressionParsingException|ExpressionException e) {    throw new SubexpressionEvaluationException(getFunctionName(),expressionString,e);  }}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public <V1>TreeMap<K,V1> mapValues(Function<? super V,? extends V1> function){  return new TreeMap<>(ord,root.mapValues(function));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.706 -0500",hash_original_method="0C44DD211AEDE4F8875A759BF8E8E48B",hash_generated_method="BC517FA24EACE7A695FB011A5D82F875") private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  public String findLongestContiguous(String s,int M){  if (s == null || s.length() <= M)   return s;  Map<Character,Integer> map=new HashMap<>();  String res="";  int start=0;  int end=0;  while (start <= end && end < s.length()) {    char c=s.charAt(end);    map.put(c,map.containsKey(c) ? map.get(c) + 1 : 1);    while (map.size() > M) {      char toRemove=s.charAt(start);      if (map.containsKey(toRemove))       map.put(toRemove,map.get(toRemove) - 1);      if (!map.containsKey(toRemove) || map.get(toRemove) <= 0)       map.remove(toRemove);      start++;    }    String temp=s.substring(start,end + 1);    if (res.length() < temp.length()) {      res=temp;    }    end++;  }  return res;}  }
class C{  public WebXmlElement createFilterElement(DescriptorType docType,String theFilterName,String theFilterClass){  Filter filterElement=(Filter)docType.getTagByName(WebXmlType.FILTER).create();  filterElement.setFilterName(theFilterName);  filterElement.setFilterClass(theFilterClass);  return filterElement;}  }
class C{  @Override public void notifyShutdown(ShutdownEvent event){  ParkingOccupancyBins pob=parkingBookKeeper.getParkingOccupancyMaintainer().getParkingOccupancyBins().get(Id.create(36,ActivityFacility.class));  assertEquals(3,pob.getOccupancy(38000));  pob=parkingBookKeeper.getParkingOccupancyMaintainer().getParkingOccupancyBins().get(Id.create(1,ActivityFacility.class));  assertEquals(3,pob.getOccupancy(0));  ParkingCapacityFullLogger pcfl=parkingBookKeeper.getParkingOccupancyMaintainer().getParkingCapacityFullTimes().get(Id.create(36,ActivityFacility.class));  assertEquals(true,pcfl.isParkingFullAtTime(38000));  assertEquals(false,pcfl.isParkingFullAtTime(0));  pcfl=parkingBookKeeper.getParkingOccupancyMaintainer().getParkingCapacityFullTimes().get(Id.create(1,ActivityFacility.class));  assertEquals(true,pcfl.isParkingFullAtTime(0));  assertEquals(false,pcfl.isParkingFullAtTime(38000));  ParkingArrivalDepartureLog pal=parkingBookKeeper.getParkingOccupancyMaintainer().getParkingArrivalDepartureLog().get(Id.create(1,Person.class));  assertEquals(2,pal.getParkingArrivalDepartureList().size());}  }
class C{  private DefinitionsSpec buildDefinitionsSpec(StaticDefinitions staticDefs){  DefinitionsSpec definitionsSpec=new DefinitionsSpec();  definitionsSpec.setNamespace(staticDefs.getNamespace());  for (  StaticDefinitions dependency : staticDefs.getDependentStaticDefinitions()) {    definitionsSpec.addImport(dependency.getNamespace());  }  for (  Class<?> innerClass : staticDefs.getOrder()) {    if (definesEnum(innerClass)) {      definitionsSpec.add(buildEnumSpec(staticDefs,innerClass));    }  }  for (  Class<?> innerClass : staticDefs.getOrder()) {    if (definesEntity(innerClass)) {      definitionsSpec.add(buildEntitySpec(staticDefs,innerClass));    }  }  resolveRelations(staticDefs,definitionsSpec);  postProcess(staticDefs,definitionsSpec);  definitionsSpec.verify();  registry.add(definitionsSpec);  return definitionsSpec;}  }
class C{  public static long toLongPow2(double d,int n){  long bits=Double.doubleToLongBits(d);  boolean isNegative=(bits >> 63) != 0;  int exp=((int)(bits >> 52)) & 0x7FF;  long m=bits & 0x000fffffffffffffL;  if (exp == 0x7FF)   throw new ArithmeticException("Cannot convert to long (Infinity or NaN)");  if (exp == 0) {    if (m == 0)     return 0L;    return toLongPow2(d * 18014398509481984L,n - 54);  }  m|=0x0010000000000000L;  long shift=exp - 1023L - 52 + n;  if (shift <= -64)   return 0L;  if (shift >= 11)   throw new ArithmeticException("Cannot convert to long (overflow)");  m=(shift >= 0) ? m << shift : (m >> -shift) + ((m >> -(shift + 1)) & 1);  return isNegative ? -m : m;}  }
class C{  public Object transform(Object vo){  DepositoElectronicoPO po=new DepositoElectronicoPO(services);  POUtils.copyVOProperties(po,vo);  return po;}  }
class C{  public static Word parsePOSBracketForm(String text,Word previous){  if (text.charAt(0) != '(' || text.charAt(text.length() - 1) != ')')   return null;  String[] tokens=text.split(" ");  if (tokens.length != 2)   return null;  return new Word(tokens[1].substring(0,tokens[1].length() - 1),tokens[0].substring(1),previous);}  }
class C{  @Override public void updateBlob(String columnLabel,Blob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createBlob(x.getBinaryStream(),-1);    }    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void filterOutInteriorOrExteriorZones(final Set<StendhalRPZone> zonesInRegion,final Boolean exterior){  final Set<StendhalRPZone> removals=new HashSet<StendhalRPZone>();  for (  StendhalRPZone zone : zonesInRegion) {    if (exterior) {      if (zone.isInterior()) {        removals.add(zone);      }    } else {      if (!zone.isInterior()) {        removals.add(zone);      }    }  }  zonesInRegion.removeAll(removals);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public static void printUsageAndExit(){  System.err.println("Usage: java " + SequenceSimulator.class.getName() + " <nr of instantiations>");  System.err.println("where <nr of instantiations> is the number of instantiations to be replciated");  System.exit(0);}  }
class C{  public void testGB18030() throws Exception {  this.rs=this.stmt.executeQuery("show collation like 'gb18030_chinese_ci'");  if (!this.rs.next()) {    return;  }  String[][] str=new String[][]{{"C4EEC5ABBDBFA1A4B3E0B1DABBB3B9C520A1A4CBD5B6ABC6C2","\u5FF5\u5974\u5A07\u00B7\u8D64\u58C1\u6000\u53E4 \u00B7\u82CF\u4E1C\u5761"},{"B4F3BDADB6ABC8A5A3ACC0CBCCD4BEA1A1A2C7A7B9C5B7E7C1F7C8CBCEEFA1A3","\u5927\u6C5F\u4E1C\u53BB\uFF0C\u6D6A\u6DD8\u5C3D\u3001\u5343\u53E4\u98CE\u6D41\u4EBA\u7269\u3002"},{"B9CAC0DDCEF7B1DFA3ACC8CBB5C0CAC7A1A2C8FDB9FAD6DCC0C9B3E0B1DAA1A3","\u6545\u5792\u897F\u8FB9\uFF0C\u4EBA\u9053\u662F\u3001\u4E09\u56FD\u5468\u90CE\u8D64\u58C1\u3002"},{"C2D2CAAFB1C0D4C6A3ACBEAACCCEC1D1B0B6A3ACBEEDC6F0C7A7B6D1D1A9A1A3","\u4E71\u77F3\u5D29\u4E91\uFF0C\u60CA\u6D9B\u88C2\u5CB8\uFF0C\u5377\u8D77\u5343\u5806\u96EA\u3002"},{"BDADC9BDC8E7BBADA3ACD2BBCAB1B6E0C9D9BAC0BDDCA3A1","\u6C5F\u5C71\u5982\u753B\uFF0C\u4E00\u65F6\u591A\u5C11\u8C6A\u6770\uFF01"},{"D2A3CFEBB9ABE8AAB5B1C4EAA3ACD0A1C7C7B3F5BCDEC1CBA3ACD0DBD7CBD3A2B7A2A1A3","\u9065\u60F3\u516C\u747E\u5F53\u5E74\uFF0C\u5C0F\u4E54\u521D\u5AC1\u4E86\uFF0C\u96C4\u59FF\u82F1\u53D1\u3002"},{"D3F0C9C8C2DABDEDA3ACCCB8D0A6BCE4A1A2E9C9E9D6BBD2B7C9D1CCC3F0A1A3","\u7FBD\u6247\u7EB6\u5DFE\uFF0C\u8C08\u7B11\u95F4\u3001\u6A2F\u6A79\u7070\u98DE\u70DF\u706D\u3002"},{"B9CAB9FAC9F1D3CEA3ACB6E0C7E9D3A6D0A6CED2A1A2D4E7C9FABBAAB7A2A1A3","\u6545\u56FD\u795E\u6E38\uFF0C\u591A\u60C5\u5E94\u7B11\u6211\u3001\u65E9\u751F\u534E\u53D1\u3002"},{"C8CBBCE4C8E7C3CEA3ACD2BBE9D7BBB9F5AABDADD4C2A1A3","\u4EBA\u95F4\u5982\u68A6\uFF0C\u4E00\u6A3D\u8FD8\u9179\u6C5F\u6708\u3002"},{"5373547483329330","SsTt\uC23F"},{"8239AB318239AB358239AF3583308132833087348335EB39","\uB46C\uB470\uB498\uB7B5\uB7F3\uD47C"},{"97339631973396339733A6359831C0359831C536","\uD85A\uDC1F\uD85A\uDC21\uD85A\uDCC3\uD864\uDD27\uD864\uDD5A"},{"9835CF329835CE359835F336","\uD869\uDD6A\uD869\uDD63\uD869\uDED6"},{"833988318339883283398539","\uF45A\uF45B\uF444"},{"823398318233973582339A3882348A32","\u4460\u445A\u447B\u48C8"},{"8134D5318134D6328134D832","\u1817\u1822\u1836"},{"4A7320204B82339A35646566","Js  K\u4478def"},{"8130883281308833","\u00CE\u00CF"},{"E05FE06A777682339230","\u90F7\u9107wv\u4423"},{"814081418139FE30","\u4E02\u4E04\u3499"},{"81308130FEFE","\u0080\uE4C5"},{"E3329A35E3329A34","\uDBFF\uDFFF\uDBFF\uDFFE"}};  HashMap<String,String> expected=new HashMap<String,String>();  Connection con=getConnectionWithProps("characterEncoding=GB18030");  Statement st=con.createStatement();  ResultSet rset=st.executeQuery("show variables like 'character_set_client'");  rset.next();  assertEquals("gb18030",rset.getString(2));  rset=st.executeQuery("show variables like 'character_set_connection'");  rset.next();  assertEquals("gb18030",rset.getString(2));  rset=st.executeQuery("show variables like 'collation_connection'");  rset.next();  assertEquals("gb18030_chinese_ci",rset.getString(2));  st.executeUpdate("DROP TABLE IF EXISTS testGB18030");  st.executeUpdate("CREATE TABLE testGB18030(C VARCHAR(100) CHARACTER SET gb18030)");  PreparedStatement pst=null;  pst=con.prepareStatement("INSERT INTO testGB18030 VALUES(?)");  for (int i=0; i < str.length; i++) {    expected.put(str[i][0],str[i][1]);    pst.setString(1,str[i][1]);    pst.addBatch();  }  pst.executeBatch();  rset=st.executeQuery("SELECT c, HEX(c), CONVERT(c USING utf8mb4) FROM testGB18030");  int resCount=0;  while (rset.next()) {    resCount++;    String hex=rset.getString(2);    assertTrue("HEX value " + hex + " for char "+ rset.getString(1)+ " is unexpected",expected.containsKey(hex));    assertEquals(expected.get(hex),rset.getString(1));    assertEquals(expected.get(hex),rset.getString(3));  }  assertEquals(str.length,resCount);  st.executeUpdate("TRUNCATE TABLE testGB18030");  st.executeUpdate("INSERT INTO testGB18030 VALUES(0xFE39FE39FE38FE38),(0xFE39FE38A976)");  rset=st.executeQuery("SELECT c, HEX(c), CONVERT(c USING utf8mb4) FROM testGB18030");  while (rset.next()) {    String hex=rset.getString(2);    if ("FE39FE39FE38FE38".equals(hex)) {      assertEquals("\uFFFD\uFFFD",rset.getString(1));      assertEquals("??",rset.getString(3));    } else     if ("FE39FE38A976".equals(hex)) {      assertEquals("\uFFFD\uFE59",rset.getString(1));      assertEquals("?\uFE59",rset.getString(3));    } else {      fail("HEX value " + hex + " unexpected");    }  }  st.executeUpdate("DROP TABLE IF EXISTS testGB18030");  con.close();}  }
class C{  boolean isInterrupted(){  return vmdata.isInterrupted();}  }
class C{  public void characters(char[] ch,int start,int length) throws SAXException {  try {    if (elemType == null) {      return;    }    if (gatherMode) {      gatherBuffer.add(new Object[]{elemType,new String(ch,start,length)});    } else {      elemType.characters(ch,start,length);    }  } catch (  SAXException saxex) {    throw saxex;  }catch (  Exception ex) {    throw new SAXException(ex);  }}  }
class C{  public static Set<String> flattenPaths(Object value){  Set<String> paths=new HashSet<>();  if (value == null) {    return paths;  } else   if (SBSchemaHelper.isFileFromValue(value)) {    paths.add(getPath(value));    List<Map<String,Object>> secondaryFiles=getSecondaryFiles(value);    if (secondaryFiles != null) {      paths.addAll(flattenPaths(secondaryFiles));    }    return paths;  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      paths.addAll(flattenPaths(subvalue));    }    return paths;  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      paths.addAll(flattenPaths(subvalue));    }  }  return paths;}  }
class C{  public final int _parent2(int identity){  if (identity < m_blocksize)   return m_parent_map0[identity]; else   return m_parent_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public final void headTo(Tuple3d p){  double angle=Geometric.angle(this.location,p);  turnTo(Math.toDegrees(angle));}  }
class C{  public boolean validateUpdate(boolean update){  boolean valid=true;  if (unlimited.getSelection()) {    if (update) {      sensorConfig.setStringLength(0);    }  } else {    try {      int length=Integer.parseInt(value.getText());      if (length <= 0) {        valid=false;      } else {        if (update) {          sensorConfig.setStringLength(length);        }      }    } catch (    NumberFormatException e) {      valid=false;    }  }  return valid;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (attribute: ");  result.append(attribute);  result.append(')');  return result.toString();}  }
class C{  protected void showBalloon(Balloon balloon,Object balloonObject,Point point){  if (balloon instanceof ScreenBalloon)   ((ScreenBalloon)balloon).setScreenLocation(point); else   if (balloon instanceof GlobeBalloon) {    Position position=this.getBalloonPosition(balloonObject,point);    if (position != null) {      GlobeBalloon globeBalloon=(GlobeBalloon)balloon;      globeBalloon.setPosition(position);      globeBalloon.setAltitudeMode(this.getBalloonAltitudeMode(balloonObject));    }  }  if (this.mustAdjustPosition(balloon))   this.adjustPosition(balloon,point);  this.balloon=balloon;  this.balloon.setVisible(true);}  }
class C{  public boolean addNode(ServiceNode node){  try {    return nodes.add(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public static boolean readEmptyListFollowedBy(BashPsiBuilder builder,IElementType token){  return readEmptyListFollowedBy(builder,TokenSet.create(token));}  }
class C{  private void makeDictForNewSegment(KylinConfig conf,CubeInstance cube,CubeSegment newSeg,List<CubeSegment> mergingSegments) throws IOException {  HashSet<TblColRef> colsNeedMeringDict=new HashSet<TblColRef>();  HashSet<TblColRef> colsNeedCopyDict=new HashSet<TblColRef>();  DictionaryManager dictMgr=DictionaryManager.getInstance(conf);  CubeDesc cubeDesc=cube.getDescriptor();  for (  TblColRef col : cubeDesc.getAllColumnsNeedDictionaryBuilt()) {    String dictTable=dictMgr.decideSourceData(cubeDesc.getModel(),col).getTable();    if (cubeDesc.getFactTable().equalsIgnoreCase(dictTable)) {      colsNeedMeringDict.add(col);    } else {      colsNeedCopyDict.add(col);    }  }  for (  TblColRef col : colsNeedMeringDict) {    logger.info("Merging fact table dictionary on : " + col);    List<DictionaryInfo> dictInfos=new ArrayList<DictionaryInfo>();    for (    CubeSegment segment : mergingSegments) {      logger.info("Including fact table dictionary of segment : " + segment);      if (segment.getDictResPath(col) != null) {        DictionaryInfo dictInfo=dictMgr.getDictionaryInfo(segment.getDictResPath(col));        if (dictInfo != null && !dictInfos.contains(dictInfo)) {          dictInfos.add(dictInfo);        } else {          logger.warn("Failed to load DictionaryInfo from " + segment.getDictResPath(col));        }      }    }    mergeDictionaries(dictMgr,newSeg,dictInfos,col);  }  for (  TblColRef col : colsNeedCopyDict) {    String path=mergingSegments.get(0).getDictResPath(col);    newSeg.putDictResPath(col,path);  }}  }
class C{  public void addPreferencesButton(){  JButton prefsButton=new JButton("Prefs");  prefsButton.setHideActionText(true);  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));  buttonPanel.add(prefsButton);}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale){  this(pattern,timeZone,locale,null);}  }
class C{  public static String urlEncode(String s,boolean doNotEncodeSlashOrColon){  try {    String result=s;    if (doNotEncodeSlashOrColon) {      result=result.replace("/","HERELIESASLASH_ICIUNSLASH");      result=result.replace(":","HERELIESACOLON_ICIUNSLASH");    }    result=URLEncoder.encode(result,"utf-8");    result=result.replace("+","%20");    if (doNotEncodeSlashOrColon) {      result=result.replace("HERELIESASLASH_ICIUNSLASH","/");      result=result.replace("HERELIESACOLON_ICIUNSLASH",":");    }    return result;  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  public StringTokenizer(String str,String delim){  this(str,delim,false);}  }
class C{  public void commitChanges(SynapseGroup synapseGroup){  double percentExcitatory=Utils.doubleParsable(eRatio) / 100;  if (!Double.isNaN(percentExcitatory))   synapseGroup.setExcitatoryRatio(percentExcitatory);  excitatoryRandomizerPanel.commitChanges();  inhibitoryRandomizerPanel.commitChanges();  synapseGroup.setExcitatoryRandomizer(exRandomizer);  synapseGroup.setInhibitoryRandomizer(inRandomizer);}  }
class C{  public static int binarySearchFromTo(short[] list,short key,int from,int to){  short midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public CSVReaderBuilder withKeepCarriageReturn(boolean keepCR){  this.keepCR=keepCR;  return this;}  }
class C{  public ForbiddenClassException(Class<?> type){  super(type == null ? "null" : type.getName());}  }
class C{  public boolean hasLockGrantorVersion(){  return this.lockGrantorVersion > -1;}  }
class C{  public void sendDialogOpened(final String name,final Map<String,String> properties){  final PropertyMapBuilder builder=new PropertyMapBuilder(properties);  final String pageName=String.format(TfsTelemetryConstants.DIALOG_PAGE_VIEW_NAME_FORMAT,name);  logger.debug(String.format("sendDialogOpened(%s, %s)",pageName,builder.toString()));  if (telemetryClient != null) {    final PageViewTelemetry telemetry=new PageViewTelemetry(pageName);    telemetry.getProperties().putAll(builder.build());    telemetryClient.trackPageView(telemetry);  }}  }
class C{  protected static Bitmap createBitmapAndGcIfNecessary(int width,int height){  try {    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    System.gc();    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  }}  }
class C{  @Override public String toString(){  return header.toString();}  }
class C{  public static void initPathPortalCheck(){  if (_errorDialog != null) {    _hasErrors=false;    _textArea=null;    _errorDialog.dispose();  }}  }
class C{  @Override @LogMessageDocs({@LogMessageDoc(level="ERROR",message="Could not push empty message",explanation="An empty message was sent to the packet streamer",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG),@LogMessageDoc(level="ERROR",message="queue for session {sessionId} is null",explanation="The queue for the packet streamer session " + "is missing",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG)}) public int pushMessageSync(Message msg) throws org.apache.thrift.TException {  if (msg == null) {    log.error("Could not push empty message");    return 0;  }  List<String> sessionids=msg.getSessionIDs();  for (  String sid : sessionids) {    SessionQueue pQueue=null;    if (!msgQueues.containsKey(sid)) {      pQueue=new SessionQueue();      msgQueues.put(sid,pQueue);    } else {      pQueue=msgQueues.get(sid);    }    log.debug("pushMessageSync: SessionId: " + sid + " Receive a message, "+ msg.toString()+ "\n");    ByteBuffer bb=ByteBuffer.wrap(msg.getPacket().getData());    BlockingQueue<ByteBuffer> queue=pQueue.getQueue();    if (queue != null) {      if (!queue.offer(bb)) {        log.error("Failed to queue message for session: " + sid);      } else {        log.debug("insert a message to session: " + sid);      }    } else {      log.error("queue for session {} is null",sid);    }  }  return 1;}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public <T extends DataObject>void purge(URI id,Class<T> type) throws DatabaseException {  T dataObj=_dbClient.queryObject(type,id);  if (dataObj != null) {    if (!dataObj.getInactive()) {      dataObj.setInactive(true);      _dbClient.persistObject(dataObj);    }    Set<URI> cleared=new HashSet<URI>();    purge(dataObj,cleared);    _log.info("Deactivated db_object: type = {}, id = {}",type.toString(),id);  }}  }
class C{  public boolean isInProgress(){  return STATUS_InProgress.equals(m_status);}  }
class C{  public static int[][] createSparseMatrixWithPivotColumn(CellLayout iconLayout,int pivotX,int pivotY){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  int[][] matrix=createFullMatrix(iconLayout.getCountX() + 1,iconLayout.getCountY());  for (int i=0; i < iconParent.getChildCount(); i++) {    View cell=iconParent.getChildAt(i);    if (!cell.isFocusable()) {      continue;    }    int cx=((CellLayout.LayoutParams)cell.getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)cell.getLayoutParams()).cellY;    if (pivotX < 0) {      matrix[cx - pivotX][cy]=i;    } else {      matrix[cx][cy]=i;    }  }  if (pivotX < 0) {    matrix[0][pivotY]=PIVOT;  } else {    matrix[pivotX][pivotY]=PIVOT;  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void actionPerformed(ActionEvent e){  if (caret != null) {    caret.copy();  }}  }
class C{  public SigmoidalRule(){  super();}  }
class C{  public void testActiveJoinLate() throws Throwable {  testServerJoinLate(Member.Type.ACTIVE,CopycatServer.State.FOLLOWER);}  }
class C{  public Iterator<EscapeTarget> escapeTargetIterator(BasicBlock sourceBlock){  List<EscapeTarget> escapeTargetList=escapeTargetListMap.get(sourceBlock);  if (escapeTargetList == null) {    escapeTargetList=Collections.emptyList();  }  return escapeTargetList.iterator();}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public void addTrapezoid(float x,float y,float z,int w,int h,int d,float scale,float bottomScale,int dir){  float f4=x + w;  float f5=y + h;  float f6=z + d;  x-=scale;  y-=scale;  z-=scale;  f4+=scale;  f5+=scale;  f6+=scale;  int m=(mirror ? -1 : 1);  if (mirror) {    float f7=f4;    f4=x;    x=f7;  }  float[] v={x,y,z};  float[] v1={f4,y,z};  float[] v2={f4,f5,z};  float[] v3={x,f5,z};  float[] v4={x,y,f6};  float[] v5={f4,y,f6};  float[] v6={f4,f5,f6};  float[] v7={x,f5,f6};switch (dir) {case MR_RIGHT:    v[1]-=bottomScale;  v[2]-=bottomScale;v3[1]+=bottomScale;v3[2]-=bottomScale;v4[1]-=bottomScale;v4[2]+=bottomScale;v7[1]+=bottomScale;v7[2]+=bottomScale;break;case MR_LEFT:v1[1]-=bottomScale;v1[2]-=bottomScale;v2[1]+=bottomScale;v2[2]-=bottomScale;v5[1]-=bottomScale;v5[2]+=bottomScale;v6[1]+=bottomScale;v6[2]+=bottomScale;break;case MR_FRONT:v[0]-=m * bottomScale;v[1]-=bottomScale;v1[0]+=m * bottomScale;v1[1]-=bottomScale;v2[0]+=m * bottomScale;v2[1]+=bottomScale;v3[0]-=m * bottomScale;v3[1]+=bottomScale;break;case MR_BACK:v4[0]-=m * bottomScale;v4[1]-=bottomScale;v5[0]+=m * bottomScale;v5[1]-=bottomScale;v6[0]+=m * bottomScale;v6[1]+=bottomScale;v7[0]-=m * bottomScale;v7[1]+=bottomScale;break;case MR_TOP:v[0]-=m * bottomScale;v[2]-=bottomScale;v1[0]+=m * bottomScale;v1[2]-=bottomScale;v4[0]-=m * bottomScale;v4[2]+=bottomScale;v5[0]+=m * bottomScale;v5[2]+=bottomScale;break;case MR_BOTTOM:v2[0]+=m * bottomScale;v2[2]-=bottomScale;v3[0]-=m * bottomScale;v3[2]-=bottomScale;v6[0]+=m * bottomScale;v6[2]+=bottomScale;v7[0]-=m * bottomScale;v7[2]+=bottomScale;break;}float[] qValues=new float[]{Math.abs((v[0] - v1[0]) / (v3[0] - v2[0])),Math.abs((v[0] - v1[0]) / (v4[0] - v5[0])),Math.abs((v4[0] - v5[0]) / (v7[0] - v6[0])),Math.abs((v3[0] - v2[0]) / (v7[0] - v6[0])),Math.abs((v[1] - v3[1]) / (v1[1] - v2[1])),Math.abs((v4[1] - v7[1]) / (v5[1] - v6[1])),Math.abs((v[1] - v3[1]) / (v4[1] - v7[1])),Math.abs((v1[1] - v2[1]) / (v5[1] - v6[1])),Math.abs((v[2] - v4[2]) / (v1[2] - v5[2])),Math.abs((v[2] - v4[2]) / (v3[2] - v7[2])),Math.abs((v1[2] - v5[2]) / (v2[2] - v6[2])),Math.abs((v3[2] - v7[2]) / (v2[2] - v6[2]))};addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private int handleR(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (index == value.length() - 1 && !slavoGermanic && contains(value,index - 2,2,"IE") && !contains(value,index - 4,2,"ME","MA")) {    result.appendAlternate('R');  } else {    result.append('R');  }  return charAt(value,index + 1) == 'R' ? index + 2 : index + 1;}  }
class C{  private void eagerTerminalOperator(){  movies.stream().filter(null).map(null).forEach(null);}  }
class C{  public void removeCertificate(BurpCertificate burpCertificate){  @SuppressWarnings("unchecked") Enumeration<DefaultMutableTreeNode> en=rootNode.depthFirstEnumeration();  while (en.hasMoreElements()) {    DefaultMutableTreeNode foundNode=en.nextElement();    if (foundNode.getUserObject() instanceof BurpCertificate) {      if (foundNode.getUserObject() == burpCertificate) {        foundNode.removeFromParent();      }    }  }}  }
class C{  protected void checkNode(Node arg){  if (isReadonly()) {    throw createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,"readonly.node.map",new Object[]{});  }  if (getOwnerDocument() != arg.getOwnerDocument()) {    throw createDOMException(DOMException.WRONG_DOCUMENT_ERR,"node.from.wrong.document",new Object[]{new Integer(arg.getNodeType()),arg.getNodeName()});  }  if (arg.getNodeType() == ATTRIBUTE_NODE && ((Attr)arg).getOwnerElement() != null) {    throw createDOMException(DOMException.WRONG_DOCUMENT_ERR,"inuse.attribute",new Object[]{arg.getNodeName()});  }}  }
class C{  public static void i(String msg){  if (null == msg || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.I)) {    Log.i(getDefaultTag(),msg);  }  if (allowFileLogPrint(LogLevel.I)) {    FileLogHelper.getInstance().logToFile(msg,null,getDefaultTag(),LogLevel.I);  }}  }
class C{  boolean beginProcess(DM dm,TransactionId txIdent,TXRmtEvent txEvent) throws CacheClosedException {  if (logger.isDebugEnabled()) {    logger.debug("begin processing TXCommitMessage {} for region {}",txIdent,this.regionPath);  }  try {    if (!hookupRegion(dm)) {      return false;    }    if (msg.isAckRequired() && (this.r == null || !this.r.getScope().isDistributed())) {      if (logger.isDebugEnabled()) {        logger.debug("Received unneeded commit data for region {}",this.regionPath);      }      this.msg.addProcessingException(new RegionDestroyedException(LocalizedStrings.TXCommitMessage_REGION_NOT_FOUND.toLocalizedString(),this.regionPath));      this.r=null;      return false;    }    this.needsUnlock=this.r.lockGII();    this.r.txLRUStart();    this.needsLRUEnd=true;    if (this.r.isInitialized()) {      this.txEvent=txEvent;    }  } catch (  RegionDestroyedException e) {    this.msg.addProcessingException(e);    if (logger.isDebugEnabled()) {      logger.debug("Received unneeded commit data for region {} because the region was destroyed.",this.regionPath,e);    }    this.r=null;  }  return this.r != null;}  }
class C{  public static void runTrialOneHelper(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector,int ratio){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  MultiThreadQuickSort<Integer> qs=new MultiThreadQuickSort<Integer>(ar);  qs.setThresholdRatio(ratio);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public Subtract(){  super(Number.class,Number.class,Number.class);}  }
class C{  private static void byte2hex(byte b,StringBuffer buf){  char[] hexChars={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  int high=((b & 0xf0) >> 4);  int low=(b & 0x0f);  buf.append(hexChars[high]);  buf.append(hexChars[low]);}  }
class C{  public RootDoc rootDoc(){  return rootDoc;}  }
class C{  public void removeSelectionRows(int[] rows){  TreeUI ui=getUI();  if (ui != null && rows != null) {    int numRows=rows.length;    TreePath[] paths=new TreePath[numRows];    for (int counter=0; counter < numRows; counter++)     paths[counter]=ui.getPathForRow(this,rows[counter]);    removeSelectionPaths(paths);  }}  }
class C{  HGTransaction createTransaction(HGTransaction parent,HGTransactionConfig config){  HGStorageTransaction storageTx=config.isNoStorage() || !enabled ? null : factory.createTransaction(getContext(),config,parent);  ActiveTransactionsRecord activeRecord=mostRecentRecord.getRecordForNewTransaction();  if (enabled) {    HGTransaction result=new HGTransaction(getContext(),parent,activeRecord,storageTx,config.isReadonly());    if (txMonitor != null)     txMonitor.transactionCreated(result);    return result;  } else   return new HGTransaction(getContext(),parent,activeRecord,new VanillaTransaction(),config.isReadonly());}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.IS_A__SINGLE_IS_A1:    return singleIsA_1 != null && !singleIsA_1.isEmpty();case UmplePackage.IS_A__MULTIPLE_IS_A1:  return multipleIsA_1 != null && !multipleIsA_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void tagFrameLabel(String label) throws IOException {  startTag(TAG_FRAMELABEL,true);  out.writeString(label);  completeTag();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.722 -0400",hash_original_method="9268E855F2CAF6B32CC0A84C097AA89C",hash_generated_method="E7E2D7319E6E880137A7CB4A7F146950") public FileWriterWithEncoding(String filename,String encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  public String convertN4ModifierToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Deprecated public String createMarkedExperimentTree(int indent,String mark,Operator markOperator){  return createMarkedProcessTree(indent,mark,markOperator);}  }
class C{  public static Trigger tempBefore(String name){  Trigger trigger=before(name);  trigger.isTemp=true;  return trigger;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.772 -0500",hash_original_method="968DC873065A180C45D5B3688E2E9998",hash_generated_method="D656DF762F4FE5EF04E4DB97CB0F038F") public boolean isInfoEnabled(){  return (getLogger().isLoggable(Level.INFO));}  }
class C{  @Override public ChanceNode copy(){  ChanceNode cn=new ChanceNode(nodeId,distrib.copy());  if (cachedValues != null) {    cn.cachedValues=new HashSet<Value>(cachedValues);  }  return cn;}  }
class C{  public JavaCompletionProposalImpl(String replacementString,int replacementOffset,int replacementLength,Images image,StyledString displayString,int relevance,boolean inJavadoc){  this(replacementString,replacementOffset,replacementLength,image,displayString,relevance,inJavadoc,null);}  }
class C{  @Override public void endElement(String uri,String localName,String name){  final String postorderText=mPostorderTextStack.pop();  if (postorderText.length() > 0) {    fixWhiteSpace();  }  mOutputBuilder.append(postorderText);}  }
class C{  protected void removeCommand(Command cmd){  int behavior=getCommandBehavior();  if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || behavior == Display.COMMAND_BEHAVIOR_ICS) {    int i=commands.indexOf(cmd);    if (i > -1) {      commands.removeElementAt(i);      Button b=findCommandComponent(cmd);      if (b != null && b.getParent() != null) {        b.getParent().removeComponent(b);      }      if (getCommandCount() > 0) {        setLayout(new GridLayout(1,getCommandCount()));      }    }    return;  }  commands.removeElement(cmd);  updateCommands();}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeByteArray(mData);}  }
class C{  public void increaseThis(){  polynomial.increaseThis();}  }
class C{  public static BigInteger calculateX2s(BigInteger q,BigInteger x2,BigInteger s){  return x2.multiply(s).mod(q);}  }
class C{  private void cmd_export(){  if (fPaymentRule.getSelectedItem() == null)   return;  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  try {    File tempFile=File.createTempFile("paymentExport",".txt");    int no=0;    StringBuffer err=new StringBuffer("");    if (m_PaymentExportClass == null || m_PaymentExportClass.trim().length() == 0) {      m_PaymentExportClass="org.compiere.util.GenericPaymentExport";    }    PaymentExport custom=null;    try {      Class<?> clazz=Class.forName(m_PaymentExportClass);      custom=(PaymentExport)clazz.newInstance();      no=custom.exportToFile(m_checks,tempFile,err);    } catch (    ClassNotFoundException e) {      no=-1;      err.append("No custom PaymentExport class " + m_PaymentExportClass + " - "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }catch (    Exception e) {      no=-1;      err.append("Error in " + m_PaymentExportClass + " check log, "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }    if (no >= 0) {      Filedownload.save(new FileInputStream(tempFile),"plain/text","paymentExport.txt");      FDialog.info(m_WindowNo,form,"Saved",Msg.getMsg(Env.getCtx(),"NoOfLines") + "=" + no);      if (FDialog.ask(m_WindowNo,form,"VPayPrintSuccess?")) {        MPaySelectionCheck.confirmPrint(m_checks,m_batch);      }    } else {      FDialog.error(m_WindowNo,form,"Error",err.toString());    }    dispose();  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);  }}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,tex);  glDrawArrays(GL_TRIANGLES,0,6);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,0);  glBindBuffer(GL_ARRAY_BUFFER,0);  glUseProgram(0);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public Label(Image icon,String uiid){  this("",uiid);  this.icon=icon;  if (icon != null && icon.requiresDrawImage()) {    legacyRenderer=true;  }  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  public IndexTable(int size){  index=new IntList(size);  ListUtils.addRange(index,0,size,1);}  }
class C{  public SE8cSignalHead(NamedBeanHandle<Turnout> lowTO,NamedBeanHandle<Turnout> highTO){  super(makeSystemName(lowTO,highTO));  this.lowTurnout=lowTO;  this.highTurnout=highTO;  systemName=makeSystemName(lowTO,highTO);  init();}  }
class C{  public void v(String msg){  if (enabledModules[mModule] == Log.VERBOSE) {    Log.v(mTag,msg);  }}  }
class C{  public int findColumn(String columnName) throws SQLException {  if (columnName == null || columnName.equals("")) {    throw new SQLException("Empty string does not identify column.",SQLStateConstants.SQL_STATE_INVALID_COLUMN);  }  if (columnName.startsWith("\"") && columnName.endsWith("\"")) {    columnName=columnName.substring(1,columnName.length() - 1);    for (int i=0; i < rowDescriptor.getCount(); i++) {      if (columnName.equals(rowDescriptor.getFieldDescriptor(i).getFieldName())) {        return ++i;      }    }    for (int i=0; i < rowDescriptor.getCount(); i++) {      if (columnName.equals(rowDescriptor.getFieldDescriptor(i).getOriginalName())) {        return ++i;      }    }  } else {    for (int i=0; i < rowDescriptor.getCount(); i++) {      if (columnName.equalsIgnoreCase(rowDescriptor.getFieldDescriptor(i).getFieldName())) {        return ++i;      }    }    for (int i=0; i < rowDescriptor.getCount(); i++) {      if (columnName.equalsIgnoreCase(rowDescriptor.getFieldDescriptor(i).getOriginalName())) {        return ++i;      }    }  }  throw new SQLException("Column name " + columnName + " not found in result set.",SQLStateConstants.SQL_STATE_INVALID_COLUMN);}  }
class C{  protected JComponent createJMenuComponent(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  if (name.equals(SEPARATOR)) {    buttonGroup=null;    return new JSeparator();  }  String type=getSpecializedString(name + TYPE_SUFFIX,specialization);  JComponent item=null;  if (type.equals(TYPE_RADIO)) {    if (buttonGroup == null) {      buttonGroup=new ButtonGroup();    }  } else {    buttonGroup=null;  }  if (type.equals(TYPE_MENU)) {    item=createJMenu(name,specialization);  } else   if (type.equals(TYPE_ITEM)) {    item=createJMenuItem(name,specialization);  } else   if (type.equals(TYPE_RADIO)) {    item=createJRadioButtonMenuItem(name,specialization);    buttonGroup.add((AbstractButton)item);  } else   if (type.equals(TYPE_CHECK)) {    item=createJCheckBoxMenuItem(name,specialization);  } else {    throw new ResourceFormatException("Malformed resource",bundle.getClass().getName(),name + TYPE_SUFFIX);  }  return item;}  }
class C{  public void save(){  Configuration conf=getConfig();  if (conf == null) {    throw new IllegalStateException("No configuration has been set.");  }  this.saveTo(conf);}  }
class C{  private double[][] findBasis(Relation<V> database,ORCLUSCluster cluster,int dim){  PCAResult pcares=pca.processIds(cluster.objectIDs,database);  return pcares.getEigenPairs().reverseEigenVectors(dim);}  }
class C{  public static int overhead(){  if (STORE_ALL_VALUE_FORMS) {    return StoreAllCachedDeserializable.MEM_OVERHEAD;  } else   if (PREFER_DESERIALIZED) {    return VMCachedDeserializable.MEM_OVERHEAD;  } else {    return PreferBytesCachedDeserializable.MEM_OVERHEAD;  }}  }
class C{  public void addHeaderField(String name,String value){  writer.append(name + ": " + value).append(LINE_FEED);  writer.flush();}  }
class C{  public void testBitArray(){  BitArray bits=BitArray.allocate(1024);  for (int i=0; i < 1024; i++) {    assertFalse(bits.get(i));  }  for (int i=0; i < 64; i++) {    bits.set(i);  }  for (int i=64; i < 1024; i++) {    assertFalse(bits.get(i));  }  for (int i=0; i < 1024; i++) {    bits.set(i);  }  assertEquals(bits.count(),1024);  for (int i=0; i < 1024; i++) {    assertTrue(bits.get(i));  }}  }
class C{  private SocketRpcProtos.Response createRpcResponse(Message response,boolean callbackInvoked,SocketRpcController socketController){  Builder responseBuilder=SocketRpcProtos.Response.newBuilder();  if (response != null) {    responseBuilder.setCallback(true).setResponseProto(response.toByteString());  } else {    responseBuilder.setCallback(callbackInvoked);  }  if (socketController.failed()) {    responseBuilder.setError(socketController.errorText());    responseBuilder.setErrorReason(ErrorReason.RPC_FAILED);  }  return responseBuilder.build();}  }
class C{  public static void checkNotNull(String valueToCheck,String key){  if (valueToCheck == null) {    throw new RuntimeException("Could not find the setting for '" + key + "'.");  }}  }
class C{  static public String hexEncode(byte[] aInput){  StringBuffer result=new StringBuffer();  final char[] digits={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  for (int idx=0; idx < aInput.length; ++idx) {    byte b=aInput[idx];    result.append(digits[(b & 0xf0) >> 4]);    result.append(digits[b & 0x0f]);  }  return result.toString();}  }
class C{  public SpreadsheetFeed(){  super(SpreadsheetEntry.class);  getCategories().add(SpreadsheetEntry.CATEGORY);}  }
class C{  private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  public final void clear(){  _next=null;  _tail=0;  _head=0;  _bufferCount=0;}  }
class C{  public final double calcDistance(final Coord coord){  double x=coord.getX();  double y=coord.getY();  double minX=this.min.getX();  double minY=this.min.getY();  double maxX=this.max.getX();  double maxY=this.max.getY();  if ((minX <= x) && (x <= maxX) && (minY <= y)&& (y <= maxY)) {    return 0.0;  } else   if ((x < minX) && (maxY < y)) {    Coord refPt=new Coord(minX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (maxY < y)) {    Coord refPt=new Coord(x,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (maxY < y)) {    Coord refPt=new Coord(maxX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(minX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(maxX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (y < minY)) {    Coord refPt=new Coord(minX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (y < minY)) {    Coord refPt=new Coord(x,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (y < maxY)) {    Coord refPt=new Coord(maxX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else {    throw new RuntimeException("This should never happen!");  }}  }
class C{  public boolean isThrottleTakenOverMessage(){  return (this.getElement(0) == XNetConstants.LOCO_INFO_RESPONSE && this.getElement(1) == XNetConstants.LOCO_NOT_AVAILABLE);}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  private void populateWorksheetList(SpreadsheetEntry spreadsheet){  if (retrieveWorksheetList(spreadsheet)) {    fillWorksheetListBox(spreadsheet.getTitle().getPlainText());  }}  }
class C{  @Nullable public static PsiElement expandNamedElementBody(@NotNull PsiNamedElement element){  if (element instanceof PyClass || element instanceof PyFunction) {    return element;  } else   if (element instanceof PyTargetExpression && element.getParent() instanceof PyAssignmentStatement) {    return element.getParent();  }  return null;}  }
class C{  private static final void removeQueuedThreadsWithDependency(String... ids){  Iterator<ProgressThread> iterator=queuedThreads.iterator();  Set<String> cancelledThreads=new HashSet<>();  while (iterator.hasNext()) {    ProgressThread pg=iterator.next();    if (!Collections.disjoint(Arrays.asList(ids),pg.getDependencies())) {      iterator.remove();      cancelledThreads.add(pg.getID());    }  }  if (!cancelledThreads.isEmpty()) {    removeQueuedThreadsWithDependency(cancelledThreads.toArray(new String[cancelledThreads.size()]));  }}  }
class C{  public void rotate(double angle,double px,double py){  getTransformConcat(CGAffineTransform.makeRotation(angle,px,py));}  }
class C{  public boolean isSubscriptionLimitReached(){  return subscriptionLimitReached;}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public FunctionEdge(final FunctionBlock source,final FunctionBlock target){  super(source,target);  FunctionBlock.link(source,target);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.050 -0500",hash_original_method="93CEFEE99BA727186FFD22BEC1D0D072",hash_generated_method="2A8D554863F54BC85029412975D5A381") public void finish(int resultCode,Bundle results){  if (mAutomaticPerformanceSnapshots) {    endPerformanceSnapshot();  }  if (mPerfMetrics != null) {    results.putAll(mPerfMetrics);  }  mThread.finishInstrumentation(resultCode,results);}  }
class C{  public boolean isSearchable(int column) throws SQLException {  return true;}  }
class C{  public void compose(@NotNull StringBuffer buf,@NotNull RefEntity refEntity,@NotNull HTMLComposer composer){}  }
class C{  public void grantMembership(String jid) throws XMPPException {  changeAffiliationByAdmin(jid,"member",null);}  }
class C{  public IntersectRegionParser(@NonNull Match match,Element element) throws RegionException {  for (  Element subRegionElement : element.getChildren()) {    regions.add(Cardinal.getModule(RegionModule.class).getRegion(match,subRegionElement));  }  if (regions.isEmpty()) {    throw new MissingRegionPropertyException("No sub-regions specified for intersect region",element);  }}  }
class C{  @Override public void visitLdcInsn(Object constant){  super.visitLdcInsn(constant);  notNull(constant);  if (constant instanceof Integer) {    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[LDC],I_V);  } else   if (constant instanceof Float) {    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[LDC],F_V);  } else   if (constant instanceof String) {    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[LDC],G_V);  } else   if (constant instanceof Type) {    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[LDC],"(Ljava/lang/Class;)V");  } else {    mv.visitInsn(DUP2);    if (constant instanceof Long)     mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[20],J_V); else     if (constant instanceof Double)     mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[20],D_V); else     check(false);  }}  }
class C{  public static String toHex(ModbusMessage msg){  BytesOutputStream byteOutputStream=new BytesOutputStream(Modbus.MAX_MESSAGE_LENGTH);  String ret="-1";  try {    msg.writeTo(byteOutputStream);    ret=toHex(byteOutputStream.getBuffer(),0,byteOutputStream.size());  } catch (  IOException ex) {    logger.debug("Hex conversion error {}",ex);  }  return ret;}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  public void delete(){  removeDirectory(new File(this.dataSetPath));}  }
class C{  public HttpServer() throws IOException {  this(DEFAULT_PORT);}  }
class C{  @TargetApi(Build.VERSION_CODES.CUPCAKE) @Override protected void tearDown() throws Exception {  solo.finishOpenedActivities();  super.tearDown();}  }
class C{  public void startWaveDetection(WaveListener waveListener){  startLibrarySensorDetection(new WaveDetector(waveListener),waveListener);}  }
class C{  public TwoEpochDemographicModel(String name,DemographicModel demo1,DemographicModel demo2,Parameter transitionTimeParameter,Type units){  super(name);  this.demo1=demo1;  addModel(demo1);  for (int i=0; i < demo1.getVariableCount(); i++) {    addVariable((Parameter)demo1.getVariable(i));  }  this.demo2=demo2;  addModel(demo2);  for (int i=0; i < demo2.getVariableCount(); i++) {    addVariable((Parameter)demo2.getVariable(i));  }  this.transitionTimeParameter=transitionTimeParameter;  addVariable(transitionTimeParameter);  setUnits(units);}  }
class C{  public SchemaCommand(Session session,Schema schema){  super(session);  this.schema=schema;}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof TvShowEpisode) {    TvShowEpisode episode=(TvShowEpisode)getUserObject();    if (episode.getEpisode() >= 0) {      return episode.getEpisode() + ". " + episode.getTitle();    } else {      return episode.getTitle();    }  }  return super.toString();}  }
class C{  private boolean ensureWarArgumentExistenceInCertainCases(ILaunchConfiguration configuration) throws CoreException {  IJavaProject javaProject=getJavaProject(configuration);  if (javaProject != null) {    IProject project=javaProject.getProject();    boolean isWebApp=WebAppUtilities.isWebApp(project);    if ((isWebApp && !WebAppUtilities.hasManagedWarOut(project)) || (!isWebApp && WarArgumentProcessor.doesMainTypeTakeWarArgument(configuration))) {      List<String> args=LaunchConfigurationProcessorUtilities.parseProgramArgs(configuration);      WarParser parser=WarArgumentProcessor.WarParser.parse(args,javaProject);      if (!(parser.isSpecifiedWithWarArg || parser.isWarDirValid)) {        IPath warDir=WebAppUtilities.getWarOutLocationOrPrompt(project);        if (warDir == null) {          return false;        }        WarArgumentProcessor warArgProcessor=new WarArgumentProcessor();        warArgProcessor.setWarDirFromLaunchConfigCreation(warDir.toOSString());        ILaunchConfigurationWorkingCopy wc=configuration.getWorkingCopy();        LaunchConfigurationProcessorUtilities.updateViaProcessor(warArgProcessor,wc);        wc.doSave();      }    }  }  return true;}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  FixedAllocator(final RWStore store,final int size){  m_diskAddr=0;  m_store=store;  m_size=size;  m_bitSize=calcBitSize(true,size,cMinAllocation,cModAllocation);  allocBlockRange=32 * m_bitSize;  final int numBlocks=254 / (m_bitSize + 1);  m_allocBlocks=new ArrayList<AllocBlock>(numBlocks);  for (int i=0; i < numBlocks; i++) {    m_allocBlocks.add(new AllocBlock(0,m_bitSize,this));  }  m_freeTransients=0;  m_freeBits=32 * m_bitSize * numBlocks;}  }
class C{  @Override final public boolean isInline(){  return true;}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  return new XMLStringDefault(m_str.trim());}  }
class C{  private void warpStraightLines(){  PathMeasure pmTemp=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    if (lineRifts[i].isStraight()) {      pmTemp.setPath(lineRifts[i],false);      lineRifts[i].setStartLength(pmTemp.getLength() / 2);      float[] pos=new float[2];      pmTemp.getPosTan(pmTemp.getLength() / 2,pos,null);      int xRandom=(int)(pos[0] + Utils.nextInt(-Utils.dp2px(1),Utils.dp2px(1)));      int yRandom=(int)(pos[1] + Utils.nextInt(-Utils.dp2px(1),Utils.dp2px(1)));      lineRifts[i].reset();      lineRifts[i].moveTo(0,0);      lineRifts[i].lineTo(xRandom,yRandom);      lineRifts[i].lineToEnd();    }  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  @SuppressWarnings("unchecked") private <T extends Element>Set<T> castElementSet(Object obj){  return (Set<T>)obj;}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2,boolean alternate){  return doubleMetaphone(value1,alternate).equals(doubleMetaphone(value2,alternate));}  }
class C{  public static void removeIOSApp(String appName){  Process p=null;  try {    String[] cmdRemoveApp={"ssh","-p","2222","root@localhost","rm","-r","/User/Applications/" + appName};    p=Runtime.getRuntime().exec(cmdRemoveApp);    p.waitFor();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public SearchBuilder<T> filter(ResourceFilter<T> addFilter){  if (filter == null) {    filter=addFilter;  } else   if (addFilter != null) {    filter=new FilterChain<T>(filter).and(addFilter);  }  return this;}  }
class C{  public int size(){  return size;}  }
class C{  public Period(Date startDate,Duration duration){  this((startDate == null) ? null : new ICalDate(startDate),duration);}  }
class C{  public static Object newInstance(Class<?> cl,int[] dims){  if (dims.length == 0) {    dims=new int[]{1};  }  return Array.newInstance(cl,dims);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/exports") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep export(@PathParam("id") URI id,FileSystemExportParam param) throws InternalException {  _log.info("Snapshot Export request recieved {}",id);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  ArgValidator.checkEntity(snap,id,true);  if (!param.getPermissions().equals(FileShareExport.Permissions.ro.name())) {    throw APIException.badRequests.snapshotExportPermissionReadOnly();  }  ArgValidator.checkFieldValueFromEnum(param.getSecurityType(),"type",EnumSet.allOf(FileShareExport.SecurityTypes.class));  ArgValidator.checkFieldValueFromEnum(param.getProtocol(),"protocol",EnumSet.allOf(StorageProtocol.File.class));  FileService.validateIpInterfacesRegistered(param.getEndpoints(),_dbClient);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  StoragePort sport=_fileScheduler.placeFileShareExport(fs,param.getProtocol(),param.getEndpoints());  String path=snap.getPath();  String mountPath=snap.getMountPath();  _log.info("Check whether there is a NFS Export already for the path {}",path);  FSExportMap exportMap=snap.getFsExports();  if (exportMap != null) {    Iterator it=snap.getFsExports().keySet().iterator();    boolean exportExists=false;    while (it.hasNext()) {      String fsExpKey=(String)it.next();      FileExport fileExport=snap.getFsExports().get(fsExpKey);      _log.info("Snap export key {} does it exist ? {}",fsExpKey + ":" + fileExport.getPath(),exportExists);      if (fileExport.getPath().equalsIgnoreCase(path)) {        exportExists=true;        _log.info("Snap export key {} exist {}",fsExpKey + ":" + fileExport.getPath(),exportExists);        break;      }    }    if (exportExists) {      throw APIException.badRequests.snapshotHasExistingExport();    }  }  verifyFileSnapshotExports(snap,param,path);  FileShareExport export=new FileShareExport(param.getEndpoints(),param.getSecurityType(),param.getPermissions(),param.getRootUserMapping(),param.getProtocol(),sport.getPortGroup(),sport.getPortNetworkId(),path,mountPath,param.getSubDirectory(),param.getComments());  _log.info("FileSnapExport --- FileSnap id: " + id + ", Clients: "+ export.getClients()+ ", StoragePort:"+ sport.getPortName()+ ", StoragePort :"+ export.getStoragePort()+ ", SecurityType: "+ export.getSecurityType()+ ", Permissions: "+ export.getPermissions()+ ", Root user mapping: "+ export.getRootUserMapping()+ ",Protocol: "+ export.getProtocol()+ ",path:"+ export.getPath()+ ",mountPath:"+ export.getMountPath());  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.EXPORT_FILE_SNAPSHOT);  FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.export(device.getId(),snap.getId(),Arrays.asList(export),task);  auditOp(OperationTypeEnum.EXPORT_FILE_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snap.getId().toString(),device.getId().toString(),export.getClients(),param.getSecurityType(),param.getPermissions(),param.getRootUserMapping(),param.getProtocol());  return toTask(snap,task,op);}  }
class C{  public long readUI32() throws IOException {  synchBits();  long ui32=in.read();  if (ui32 < 0) {    throw new IOException("Unexpected end of input");  }  long val=in.read();  if (val < 0) {    throw new IOException("Unexpected end of input");  }  ui32+=val << 8;  val=in.read();  if (val < 0) {    throw new IOException("Unexpected end of input");  }  ui32+=val << 16;  val=in.read();  if (val < 0) {    throw new IOException("Unexpected end of input");  }  ui32+=val << 24;  bytesRead+=4;  return ui32;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void updateFunctions(){  functionsPanel.removeAll();  functionsPanel.setLayout(functionButtonsLayout);  functionCategoryTaskPanes=new HashMap<>();  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.weightx=1;  gbc.gridx=0;  gbc.gridy=0;  int totalFunctionCount=0;  Map<String,List<FunctionDescription>> filteredModel=functionModel.getFilteredModel();  String filterName=functionModel.getFilterNameString();  boolean searchStringGiven=!filterName.isEmpty();  for (  String functionGroup : filteredModel.keySet()) {    boolean perfectMatch=false;    JXTaskPane functionCategoryTaskPane=new JXTaskPane();    functionCategoryTaskPane.setName(functionGroup);    List<FunctionDescription> list=functionModel.getFilteredModel(functionGroup);    totalFunctionCount+=list.size();    for (    FunctionDescription function : list) {      final FunctionDescriptionPanel funcDescPanel=new FunctionDescriptionPanel(function);      funcDescPanel.registerObserver(functionObserver);      functionCategoryTaskPane.add(funcDescPanel);      if (!perfectMatch && searchStringGiven) {        String functionName=function.getDisplayName().split("\\(")[0];        if (filterName.toLowerCase(Locale.ENGLISH).equals(functionName.toLowerCase(Locale.ENGLISH)) || filterName.toLowerCase(Locale.ENGLISH).equals(function.getDisplayName().toLowerCase(Locale.ENGLISH))) {          perfectMatch=true;        }      }    }    functionCategoryTaskPane.setTitle(functionGroup);    functionCategoryTaskPane.setAnimated(false);    if (filteredModel.keySet().size() == 1) {      functionCategoryTaskPane.setCollapsed(false);    } else {      functionCategoryTaskPane.setCollapsed(true);    }    if (perfectMatch) {      functionCategoryTaskPane.setCollapsed(false);    }    functionCategoryTaskPanes.put(functionGroup,functionCategoryTaskPane);    gbc.ipady=10;    functionsPanel.add(functionCategoryTaskPane,gbc);    gbc.gridy+=1;  }  if (totalFunctionCount <= MAX_NMBR_FUNCTIONS_SHOWN) {    for (    JXTaskPane taskPane : functionCategoryTaskPanes.values()) {      taskPane.setCollapsed(false);    }  }  if (filteredModel.isEmpty()) {    gbc.ipady=10;    functionsPanel.add(new JLabel(MESSAGE_NO_RESULTS),gbc);  }  functionsPanel.revalidate();}  }
class C{  @RpcMethod public DeleteVmResponse deleteVm(String vmId,List<String> diskIdsToDetach) throws InterruptedException, RpcException {  SyncHandler<DeleteVmResponse,Host.AsyncClient.delete_vm_call> syncHandler=new SyncHandler<>();  deleteVm(vmId,diskIdsToDetach,syncHandler);  syncHandler.await();  logger.info("finished delete_vm {}, target {}",vmId,getHostIp());  return ResponseValidator.checkDeleteVmResponse(syncHandler.getResponse());}  }
class C{  private void initSVGGraphics(Graphics2D graphics){  this.graphics2D=graphics;  relativeClipRegion=new Rectangle(viewBox.x,viewBox.y,viewBox.width,viewBox.height);  stroke=new BasicStroke(swtGraphics.getLineWidth(),BasicStroke.CAP_SQUARE,BasicStroke.JOIN_ROUND,0,null,0);  LineAttributes lineAttributes=new LineAttributes(1);  swtGraphics.getLineAttributes(lineAttributes);  setLineAttributes(lineAttributes);  setFillRule(swtGraphics.getFillRule());  setAdvanced(swtGraphics.getAdvanced());  getGraphics2D().setStroke(stroke);}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public BayesNet(){  super();  setNumAttributes(defaultNumAttributes());  setNumArcs(defaultNumArcs());  setCardinality(defaultCardinality());}  }
class C{  public Builder toUri(Context ctxt,Uri output,boolean updateMediaStore){  JPEGWriter jpeg=(JPEGWriter)result.findProcessorByTag(JPEGWriter.class.getCanonicalName());  if (jpeg == null) {    jpeg=new JPEGWriter(ctxt);    append(jpeg);  }  result.getProperties().putParcelable(JPEGWriter.PROP_OUTPUT,output);  result.getProperties().putBoolean(JPEGWriter.PROP_UPDATE_MEDIA_STORE,updateMediaStore);  return (this);}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  @SuppressWarnings("deprecation") public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.LightManager.class)) {    return true;  }  if (type.equals(jmri.ClockControl.class)) {    return true;  }  if (type.equals(jmri.CommandStation.class)) {    return true;  }  if (type.equals(jmri.ConsistManager.class)) {    return true;  }  return false;}  }
class C{  public void add(Permission permission){  if (!(permission instanceof ExecPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  permissions.addElement(permission);}  }
class C{  public static void main(final String[] args) throws IOException, InterruptedException {  String projectId=System.getProperty("projectId");  if (projectId == null || projectId.isEmpty()) {    System.err.println("The projectId property must be set.");    System.exit(1);  }  System.out.printf("projectId: %s\n",projectId);  String queryString=System.getProperty("query");  if (queryString == null || queryString.isEmpty()) {    System.out.println("The query property was not set, using default.");    queryString=DEFAULT_QUERY;  }  System.out.printf("query: %s\n",queryString);  String useBatchString=System.getProperty("useBatchMode");  if (useBatchString == null || useBatchString.isEmpty()) {    useBatchString="false";  }  boolean useBatchMode=Boolean.parseBoolean(useBatchString);  System.out.printf("useBatchMode: %b\n",useBatchMode);  String waitTimeString=System.getProperty("waitTime");  if (waitTimeString == null || waitTimeString.isEmpty()) {    waitTimeString="1000";  }  long waitTime=Long.parseLong(waitTimeString);  System.out.printf("waitTime: %d (milliseconds)\n",waitTime);  String useLegacySqlString=System.getProperty("useLegacySql");  if (useLegacySqlString == null || useLegacySqlString.isEmpty()) {    useLegacySqlString="false";  }  boolean useLegacySql=Boolean.parseBoolean(useLegacySqlString);  Iterator<GetQueryResultsResponse> pages=run(projectId,queryString,useBatchMode,waitTime,useLegacySql);  while (pages.hasNext()) {    BigQueryUtils.printRows(pages.next().getRows(),System.out);  }}  }
class C{  public void artifactRepository(File file){  addArg("artifactRepository",FileMisc.asUrl(file));}  }
class C{  @Override public Set<Statement> gather(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Statement e){  return Collections.singleton(e);}  }
class C{  public synchronized void disconnect(Exception cause){  this.disconnected=true;  this.disconnectCompleted=false;  try {    groupOrderedSenderSem.release();  } catch (  Error e) {  }  try {    groupUnorderedSenderSem.release();  } catch (  Error e) {  }  this.conduit.stop(cause);  this.disconnectCompleted=true;}  }
class C{  private int charClass(char c){switch (c) {case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':    return CharacterClass.alphanumeric.ordinal();case '+':case '$':case '-':case '_':case '@':case '.':case '&':case '=':case ';':case '/':case '#':case '?':case ':':  return CharacterClass.special.ordinal();case ' ':case '\t':case '\n':case '\r':return CharacterClass.space.ordinal();default :return CharacterClass.illegal.ordinal();}}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  public void open(String stream){  setTitle("Races with " + stream + " - SpeedRunsLive");  currentStream=stream;  selection.setData(null);  setVisible(true);}  }
class C{  public XMLX509Certificate itemCertificate(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509CERTIFICATE,i);  if (e != null) {    return new XMLX509Certificate(e,this.baseURI);  }  return null;}  }
class C{  private void queueAlarm(Alarm alarm,TransactionBuilder builder,BluetoothGattCharacteristic characteristic){  Calendar calendar=alarm.getAlarmCal();  int daysMask=0;  int maxAlarms=5;  if (alarm.getIndex() >= maxAlarms) {    if (alarm.isEnabled()) {      GB.toast(getContext(),"Only 5 alarms are currently supported.",Toast.LENGTH_LONG,GB.WARN);    }    return;  }  if (alarm.isEnabled()) {    daysMask=alarm.getRepetitionMask();  }  byte[] alarmMessage=new byte[]{(byte)0x2,(byte)(128 + alarm.getIndex()),(byte)calendar.get(Calendar.HOUR_OF_DAY),(byte)calendar.get(Calendar.MINUTE),(byte)daysMask};  builder.write(characteristic,alarmMessage);}  }
class C{  private void rescalePriors(ExampleSet exampleSet,double[] classPriors){  double[] weights=new double[2];  for (int i=0; i < weights.length; i++) {    weights[i]=1.0d / (weights.length * classPriors[i]);  }  Iterator<Example> exRead=exampleSet.iterator();  while (exRead.hasNext()) {    Example example=exRead.next();    example.setWeight(weights[(int)example.getLabel()]);  }}  }
class C{  private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch,@NotNull final String baseBranch,@NotNull Collection<GitRepository> repositories){  final List<String> mergedToBranches=getMergedToBranches(unmergedBranch);  final Map<GitRepository,List<GitCommit>> history=new HashMap<GitRepository,List<GitCommit>>();  for (  GitRepository repository : getRepositories()) {    if (repositories.contains(repository)) {      history.put(repository,getUnmergedCommits(repository,unmergedBranch,baseBranch));    } else {      history.put(repository,Collections.<GitCommit>emptyList());    }  }  return myUiHandler.showBranchIsNotFullyMergedDialog(myProject,history,unmergedBranch,mergedToBranches,baseBranch);}  }
class C{  public StatusServlet(){  this(new BaleenStatus());}  }
class C{  protected boolean updateToManyRelation(String fieldName,Set<PersistentResource> resourceIdentifiers,Set<PersistentResource> mine){  Set<PersistentResource> requested;  Set<PersistentResource> updated;  Set<PersistentResource> deleted;  Set<PersistentResource> added;  if (resourceIdentifiers == null) {    throw new InvalidEntityBodyException("Bad relation data");  }  if (resourceIdentifiers.isEmpty()) {    requested=new LinkedHashSet<>();  } else {    requested=resourceIdentifiers;  }  deleted=Sets.difference(mine,requested);  updated=Sets.difference(Sets.union(mine,requested),Sets.intersection(mine,requested));  added=Sets.difference(updated,deleted);  checkSharePermission(added);  Collection collection=(Collection)this.getValueUnchecked(fieldName);  if (collection == null) {    this.setValue(fieldName,mine);  }  deleted.stream().forEach(null);  added.stream().forEach(null);  if (!updated.isEmpty()) {    this.markDirty();  }  return !updated.isEmpty();}  }
class C{  @Override public boolean isCurrency(int column) throws SQLException {  try {    debugCodeCall("isCurrency",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static double log1p(final double x){  if (x == -1) {    return Double.NEGATIVE_INFINITY;  }  if (x == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  }  if (x > 1e-6 || x < -1e-6) {    final double xpa=1 + x;    final double xpb=-(xpa - 1 - x);    final double[] hiPrec=new double[2];    final double lores=log(xpa,hiPrec);    if (Double.isInfinite(lores)) {      return lores;    }    final double fx1=xpb / xpa;    final double epsilon=0.5 * fx1 + 1;    return epsilon * fx1 + hiPrec[1] + hiPrec[0];  } else {    final double y=(x * F_1_3 - F_1_2) * x + 1;    return y * x;  }}  }
class C{  public void makeFullScreen(){  this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  if (Build.VERSION.SDK_INT < 19) {    this.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);  } else {    this.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE);  }}  }
class C{  @Override public void closeHALog(final IRootBlockView rootBlock) throws FileNotFoundException, IOException {  final Lock lock=m_stateLock.writeLock();  lock.lock();  try {    if (rootBlock == null)     throw new IllegalArgumentException();    if (m_rootBlock == null)     throw new IllegalStateException();    if (haLog.isInfoEnabled())     haLog.info("rootBlock=" + rootBlock);    final long expectedCommitCounter=this.m_rootBlock.getCommitCounter() + 1;    if (expectedCommitCounter != rootBlock.getCommitCounter()) {      throw new IllegalStateException("CommitCounter: expected=" + expectedCommitCounter + ", actual="+ rootBlock.getCommitCounter());    }    if (!this.m_rootBlock.getUUID().equals(rootBlock.getUUID())) {      throw new IllegalStateException("Store UUID: expected=" + (m_rootBlock.getUUID()) + ", actual="+ rootBlock.getUUID());    }    if (doubleSync) {      flush();    }    writeRootBlock(rootBlock.isRootBlock0(),rootBlock);    flush();    m_state.committed();    close();  }  finally {    lock.unlock();  }}  }
class C{  public static boolean isEqualIgnoringCaseAndUnderscores(@NotNull String s1,@NotNull String s2){  int index1=0;  int index2=0;  int length1=s1.length();  int length2=s2.length();  while (index1 < length1 && index2 < length2) {    char nameChar=s1.charAt(index1++);    if (nameChar == '_')     continue;    char memberNameChar=s2.charAt(index2++);    if (memberNameChar == '_') {      index1--;      continue;    }    if (toLowerCase(nameChar) != toLowerCase(memberNameChar))     return false;  }  while (index1 < length1 && s1.charAt(index1) == '_')   index1++;  while (index2 < length2 && s2.charAt(index2) == '_')   index2++;  return index1 == length1 && index2 == length2;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 2218) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static String joinOptions(String[] optionArray){  String optionString="";  for (int i=0; i < optionArray.length; i++) {    if (optionArray[i].equals("")) {      continue;    }    if (optionArray[i].indexOf(' ') != -1) {      optionString+='"' + optionArray[i] + '"';    } else {      optionString+=optionArray[i];    }    optionString+=" ";  }  return optionString.trim();}  }
class C{  public void onSwapRemove(){  onSwapRemove(1);}  }
class C{  public void keyRepeated(int keyCode){  keyPressed(keyCode);  keyReleased(keyCode);}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  offset++;  byte family=attributeValue[offset++];  char port=((char)((attributeValue[offset++] << 8) | (attributeValue[offset++] & 0xFF)));  byte address[]=null;  if (family == ADDRESS_FAMILY_IPV6) {    address=new byte[16];  } else {    address=new byte[4];  }  System.arraycopy(attributeValue,offset,address,0,address.length);  try {    setAddress(new TransportAddress(address,port,Transport.UDP));  } catch (  UnknownHostException e) {    throw new StunException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.144 -0500",hash_original_method="09220D6F0F0E5ED3096951AEB948E338",hash_generated_method="166AC376709BDDAC5DCE7B2AB2EF199D") public boolean isUsbMassStorageConnected(){  try {    return mMountService.isUsbMassStorageConnected();  } catch (  Exception ex) {    Log.e(TAG,"Failed to get UMS connection state",ex);  }  return false;}  }
class C{  public static double range(double number,double from) throws ExpressionException {  if (number >= from)   return number;  throw new ExpressionException("number must be greater than [" + from + "] now "+ number+ "");}  }
class C{  public static void close() throws Exception {  boolean mustbeClose=mustbeClose();  Connection jdbcConn=(Connection)m_tJdbc.get();  m_tJdbc.set(null);  m_tMustBeClosed.set(null);  try {    if ((jdbcConn != null) && mustbeClose)     jdbcConn.close();  } catch (  Exception e) {    throw new IeciTdException(DbError.EC_NOT_CLOSED_CONN,DbError.EM_NOT_CLOSED_CONN);  }}  }
class C{  public static final List<String> check(Class<? extends Transformation>[] transformations){  final List<String> errMsgs=new ArrayList<>();  for (int idx=0; idx < transformations.length; idx++) {    final Class<? extends Transformation> currT=transformations[idx];    final Class<? extends Transformation>[] before=Arrays.copyOf(transformations,idx);    final Class<? extends Transformation>[] after=Arrays.copyOfRange(transformations,idx + 1,transformations.length);    for (    Annotation ann : currT.getAnnotations()) {      final String errMsg=check(currT,ann,before,after);      if (errMsg != null)       errMsgs.add(errMsg);    }  }  return errMsgs;}  }
class C{  public void testEventDispatchingUponIncomingRequests() throws Exception {  stunStack.addRequestListener(requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  requestCollector.waitForRequest();  assertTrue("No MessageEvents have been dispatched",requestCollector.receivedRequests.size() == 1);}  }
class C{  private void drawDiamond(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size;  path[2]=x - size;  path[3]=y;  path[4]=x;  path[5]=y + size;  path[6]=x + size;  path[7]=y;  drawPath(canvas,path,paint,true);}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentWidth() > 10 && !mViewPortHandler.isFullyZoomedOutY()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentBottom());    if (!mYAxis.isInverted()) {      yMin=(float)p2.y;      yMax=(float)p1.y;    } else {      yMin=(float)p1.y;      yMax=(float)p2.y;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  public static boolean postTalkback(final String subject,final int timeout,final String postData){  final String user=System.getProperty("user.name");  final String machine=Environment.getHostName();  final String expiry=License.getExpirationDate();  final String fullsubject=License.getOrganisation() + "/" + user+ ", "+ subject+ ", "+ Environment.getVersion();  final String url=sTalkbackURL + "?user=" + urlEscape(user)+ "&machine="+ urlEscape(machine)+ "&expiry="+ urlEscape(expiry)+ "&subject="+ urlEscape(fullsubject)+ "&d="+ (License.isDeveloper() ? "1" : "0");  return doPost(url,"application/x-www-form-urlencoded",postData,timeout);}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  DataFlavor[] flavors=getTransferDataFlavors();  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public void permute(int[] permutation){  if (permutation.length != getDimension() / 64) {    throw new IllegalArgumentException("Binary vector of dimension " + getDimension() + " must have permutation of length "+ getDimension() / 64 + " not " + permutation.length);  }  long[] coordinates=bitSet.getBits();  long[] newCoordinates=new long[coordinates.length];  for (int i=0; i < coordinates.length; ++i) {    int positionToAdd=i;    positionToAdd=permutation[positionToAdd];    newCoordinates[i]=coordinates[positionToAdd];  }  bitSet=new FixedBitSet(newCoordinates,getDimension());}  }
class C{  public void release(FileLock lock) throws IOException {  checkOpen();  StructFlock flock=new StructFlock();  flock.l_type=(short)F_UNLCK;  flock.l_whence=(short)SEEK_SET;  flock.l_start=lock.position();  flock.l_len=translateLockLength(lock.size());  try {    Libcore.os.fcntlFlock(fd,F_SETLKW64,flock);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }  removeLock(lock);}  }
class C{  protected void paintSegment(Graphics g,Coord[] segment,Tile tile){  super.paintSegment(g,segment,tile);  int pointsNo=segment.length;  for (int i=1; i < pointsNo; i++) {    Coord start=segment[i - 1];    Coord end=segment[i];    Point s=tile.pointPosition(start);    Point e=tile.pointPosition(end);    int noOfSegments=calculateLength(s,e) / arrowSegmentLength;    if (noOfSegments == 0 && calculateLength(s,e) > minArrowSementLength) {      noOfSegments=1;    }    for (int j=1; j <= noOfSegments; j++) {      if (j == 1) {        double div=1.0 / noOfSegments;        drawArrow(g,new Point(s.getX(),s.getY()),new Point((int)(div * e.getX() + s.getX() * (1 - div)),(int)(div * e.getY() + s.getY() * (1 - div))));      } else       if (j == noOfSegments) {        double div=(noOfSegments - 1) / (noOfSegments * 1.0);        drawArrow(g,new Point((int)(div * e.getX() + s.getX() * (1 - div)),(int)(div * e.getY() + s.getY() * (1 - div))),new Point(e.getX(),e.getY()));      } else {        double div=((j - 1) * 1.0) / noOfSegments;        double div2=(j * 1.0) / noOfSegments;        drawArrow(g,new Point((int)(div * e.getX() + s.getX() * (1 - div)),(int)(div * e.getY() + s.getY() * (1 - div))),new Point((int)(div2 * e.getX() + s.getX() * (1 - div2)),(int)(div2 * e.getY() + s.getY() * (1 - div2))));      }    }  }}  }
class C{  private boolean startClass(ProcessInfo pi,Trx trx,boolean managedTrx){  log.info(pi.getClassName());  return ProcessUtil.startJavaProcess(getCtx(),pi,trx,managedTrx);}  }
class C{  public boolean contains(double rX,double rY){  return x <= rX && y <= rY && x + size.getWidth() >= rX && y + size.getHeight() >= rY;}  }
class C{  public void receiveGroupChatInvitation(GroupChatSession session){  ContactId remote=session.getRemoteContact();  if (sLogger.isActivated()) {    sLogger.info("Group chat invitation from " + remote + " (display="+ session.getRemoteDisplayName()+ ")");  }  String chatId=session.getContributionID();  GroupChatImpl groupChat=getOrCreateGroupChat(chatId);  session.addListener(groupChat);}  }
class C{  public void perform(IR ir){  if (ir.hasReachableExceptionHandlers()) {    throw new OperationNotImplementedException("IR with exception handlers");  }  DominatorSystem system=new DominatorSystem(ir);  if (DEBUG) {    System.out.print("Solving...");  }  if (DEBUG) {    System.out.println(system);  }  system.solve();  if (DEBUG) {    System.out.println("done");  }  DF_Solution solution=system.getSolution();  if (DEBUG) {    System.out.println("Dominator Solution :" + solution);  }  if (DEBUG) {    System.out.print("Updating blocks ...");  }  updateBlocks(solution);  if (DEBUG) {    System.out.println("done.");  }  if (ir.options.PRINT_DOMINATORS) {    printDominators(ir);  }}  }
class C{  public NumberFormatException(String s){  super(s);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void recreatePhotonMapTexture(){  glDeleteTextures(this.photonMapTexture);  createPhotonMapTexture();}  }
class C{  public static String expandUserHomeDirectory(String fileName){  if (fileName.startsWith("~") && (fileName.length() == 1 || fileName.startsWith("~/"))) {    String userDir=SysProperties.USER_HOME;    fileName=userDir + fileName.substring(1);  }  return fileName;}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  public static List<LatLon> computeImageCorners(int imageWidth,int imageHeight,Matrix imageToGeographic){  if (imageWidth < 1 || imageHeight < 1) {    String message=Logging.getMessage("generic.InvalidImageSize",imageWidth,imageHeight);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (imageToGeographic == null) {    String message=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  ArrayList<LatLon> corners=new ArrayList<LatLon>();  Vec4 vec=new Vec4(0,imageHeight,1).transformBy3(imageToGeographic);  corners.add(LatLon.fromDegrees(vec.y,vec.x));  vec=new Vec4(imageWidth,imageHeight,1).transformBy3(imageToGeographic);  corners.add(LatLon.fromDegrees(vec.y,vec.x));  vec=new Vec4(imageWidth,0,1).transformBy3(imageToGeographic);  corners.add(LatLon.fromDegrees(vec.y,vec.x));  vec=new Vec4(0,0,1).transformBy3(imageToGeographic);  corners.add(LatLon.fromDegrees(vec.y,vec.x));  return corners;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public int size(){  return size;}  }
class C{  private void validateInitiatorNetworkRegistered(Initiator initiator,URI virtualArray){  NetworkLite network=BlockStorageScheduler.getInitiatorNetwork(initiator,_dbClient);  if (network != null && !RegistrationStatus.REGISTERED.name().equalsIgnoreCase(network.getRegistrationStatus())) {    throw APIException.badRequests.invalidParameterInitiatorBelongsToDeregisteredNetwork(initiator,network.getId());  }}  }
class C{  @Override public String storeArrived(String clientHandle,String topic,MqttMessage message){  db=mqttDb.getWritableDatabase();  traceHandler.traceDebug(TAG,"storeArrived{" + clientHandle + "}, {"+ message.toString()+ "}");  byte[] payload=message.getPayload();  int qos=message.getQos();  boolean retained=message.isRetained();  boolean duplicate=message.isDuplicate();  ContentValues values=new ContentValues();  String id=java.util.UUID.randomUUID().toString();  values.put(MqttServiceConstants.MESSAGE_ID,id);  values.put(MqttServiceConstants.CLIENT_HANDLE,clientHandle);  values.put(MqttServiceConstants.DESTINATION_NAME,topic);  values.put(MqttServiceConstants.PAYLOAD,payload);  values.put(MqttServiceConstants.QOS,qos);  values.put(MqttServiceConstants.RETAINED,retained);  values.put(MqttServiceConstants.DUPLICATE,duplicate);  values.put(MTIMESTAMP,System.currentTimeMillis());  try {    db.insertOrThrow(ARRIVED_MESSAGE_TABLE_NAME,null,values);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onUpgrade",e);    throw e;  }  int count=getArrivedRowCount(clientHandle);  traceHandler.traceDebug(TAG,"storeArrived: inserted message with id of {" + id + "} - Number of messages in database for this clientHandle = "+ count);  return id;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.RANGE_CONSTRAINT__LOWER_BOUND:    return getLowerBound();case TypesPackage.RANGE_CONSTRAINT__UPPER_BOUND:  return getUpperBound();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static UTMPoint LLtoUTM(LatLonPoint llpoint,Ellipsoid ellip,UTMPoint utmPoint,int zoneNumber,boolean isNorthern){  double a=ellip.radius;  double k0=0.9996;  double eccSquared=ellip.eccsq;  double eccPrimeSquared=(eccSquared) / (1 - eccSquared);  double eccSquared2=eccSquared * eccSquared;  double eccSquared3=eccSquared2 * eccSquared;  double N, T, C, A, M;  double LatRad=llpoint.getRadLat();  double LongRad=llpoint.getRadLon();  double LongOrigin=(zoneNumber - 1) * 6 - 180 + 3;  double LongOriginRad=Math.toRadians(LongOrigin);  double tanLatRad=Math.tan(LatRad);  double sinLatRad=Math.sin(LatRad);  double cosLatRad=Math.cos(LatRad);  N=a / Math.sqrt(1 - eccSquared * sinLatRad * sinLatRad);  T=tanLatRad * tanLatRad;  C=eccPrimeSquared * cosLatRad * cosLatRad;  A=cosLatRad * (LongRad - LongOriginRad);  M=a * ((1 - eccSquared / 4 - 3 * eccSquared2 / 64 - 5 * eccSquared3 / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared2 / 32 + 45 * eccSquared3 / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared2 / 256 + 45 * eccSquared3 / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared3 / 3072) * Math.sin(6 * LatRad));  double UTMEasting=(k0 * N * (A + (1 - T + C) * A * A* A / 6.0d + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A* A* A* A / 120.0d) + 500000.0d);  double UTMNorthing=(k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A* A* A / 24.0d + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A* A* A* A* A / 720.0d)));  if (!isNorthern) {    UTMNorthing+=10000000.0f;  }  if (utmPoint == null) {    utmPoint=new UTMPoint();  }  utmPoint.northing=UTMNorthing;  utmPoint.easting=UTMEasting;  utmPoint.zone_number=zoneNumber;  utmPoint.zone_letter=isNorthern ? 'N' : 'S';  return utmPoint;}  }
class C{  public static void checkUnmanagedVolumePartiallyDiscovered(UnManagedVolume unManagedVolume,URI unManagedVolumeUri) throws IngestionException {  if (null == unManagedVolume || null == unManagedVolume.getVolumeCharacterstics() || null == unManagedVolume.getVolumeInformation()) {    _logger.warn("UnManaged Volume {} partially discovered, hence not enough " + "information available to validate neither " + "virtualPool nor other criterias.  Skipping Ingestion",unManagedVolumeUri);    throw IngestionException.exceptions.unmanagedVolumePartiallyIngested(unManagedVolumeUri.toString());  }}  }
class C{  public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  double delta=Math.PI * 2;  delta=delta / (size + 1);  for (int i=0; i < size; i++) {    points[i]=new TwoDPoint(radius * Math.cos(i * delta),radius * Math.sin(i * delta));  }  return points;}  }
class C{  private SSLEngineResult unwrap() throws SSLException {  if (appBuffer == null) {    appBuffer=IoBuffer.allocate(inNetBuffer.remaining());  } else {    appBuffer.expand(inNetBuffer.remaining());  }  SSLEngineResult res;  Status status=null;  HandshakeStatus handshakeStatus=null;  do {    res=sslEngine.unwrap(inNetBuffer.buf(),appBuffer.buf());    status=res.getStatus();    handshakeStatus=res.getHandshakeStatus();    if (status == SSLEngineResult.Status.BUFFER_OVERFLOW) {      appBuffer.capacity(appBuffer.capacity() << 1);      appBuffer.limit(appBuffer.capacity());      continue;    }  } while (((status == SSLEngineResult.Status.OK) || (status == SSLEngineResult.Status.BUFFER_OVERFLOW)) && ((handshakeStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) || (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP)));  return res;}  }
class C{  public boolean containsAbstract(){  return method(ABSTRACT) != null || setter(ABSTRACT) != null || getter(ABSTRACT) != null;}  }
class C{  public SharedObjectPermissionSet(Collection<String> identifiers){  super(getPermissions(identifiers));}  }
class C{  private Flag(int bitPosition){  if (bitPosition < 0 || bitPosition > 63) {    throw new IllegalArgumentException(bitPosition + " is out of bounds for a long bit mask");  }  this.mask=1 << bitPosition;}  }
class C{  public DefaultEntity(Element parent,String name,String text){  super(name,text);  this.parent=parent;}  }
class C{  public static WebSocketFrame createContinuationFrame(String payload){  return createContinuationFrame().setPayload(payload);}  }
class C{  public boolean contains(EventPoint ep){  BalancedBinaryNode<EventPoint,EventPoint> bn=events.getEntry(ep);  return (bn != null);}  }
class C{  public SpeedTestReport(final SpeedTestMode speedTestMode,final float progressPercent,final long startTime,final long reportTime,final long tempPacketSize,final long totalPacketSize,final BigDecimal transferRateOctet,final BigDecimal transferRateBit,final int requestNum){  this.mSpeedTestMode=speedTestMode;  this.mProgressPercent=progressPercent;  this.mStartTime=startTime;  this.mReportTime=reportTime;  this.mTempPacketSize=tempPacketSize;  this.mTotalPacketSize=totalPacketSize;  this.mTransferRateOctet=transferRateOctet;  this.mTransferRateBit=transferRateBit;  this.mRequestNum=requestNum;}  }
class C{  public MessageEvent(int from,int to,String id,double time){  super(time);  this.fromAddr=from;  this.toAddr=to;  this.id=id;}  }
class C{  private boolean isInputCleared(){  return inputField.getValue().equals("");}  }
class C{  @FromString public static Hours parseHours(String periodStr){  if (periodStr == null) {    return Hours.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Hours.hours(p.getHours());}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public itemNode(View itemView){  super(itemView);  name=(TextView)itemView.findViewById(R.id.tx_name);  mTimelineView=(TimelineView)itemView.findViewById(R.id.time_marker);}  }
class C{  private void takeCondBranch(BasicBlock source,Instruction cb,IR ir){  if (DEBUG)   VM.sysWrite("Eliminating definitely taken branch " + cb + "\n");  BasicBlock deadBB=source.nextBasicBlockInCodeOrder();  Instruction next=cb.nextInstructionInCodeOrder();  if (Goto.conforms(next)) {    deadBB=next.getBranchTarget();    next.remove();  }  Goto.mutate(cb,GOTO,cb.getBranchTarget().makeJumpTarget());  source.recomputeNormalOut(ir);  if (!source.pointsOut(deadBB)) {    SSA.purgeBlockFromPHIs(source,deadBB);  }}  }
class C{  @Override public void init(Bundle savedInstanceState){  setTitle(R.string.normal_sliding_activity);  setPrimaryColors(getResources().getColor(R.color.normal_sliding_activity_primary),getResources().getColor(R.color.normal_sliding_activity_primary_dark));  setContent(R.layout.activity_content);  Intent intent=getIntent();  if (intent.getBooleanExtra(SampleActivity.ARG_USE_EXPANSION,false)) {    expandFromPoints(intent.getIntExtra(SampleActivity.ARG_EXPANSION_LEFT_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_TOP_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_WIDTH,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_HEIGHT,0));  }}  }
class C{  public static GT_Tool_Item constructElectricSawItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aToolQuality,float aToolStrength,int aEnergyConsumptionPerBlockBreak,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_SawIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aToolQuality,aToolStrength,aEnergyConsumptionPerBlockBreak,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    return basicSetTitle(null,msgs);case DomPackage.INLINE_TAG__VALUES:  return ((InternalEList<?>)getValues()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public String upperBoundMinSupportTipText(){  return "Upper bound for minimum support as a fraction or number of instances. " + "Start iteratively decreasing " + "minimum support from this value.";}  }
class C{  public void appendInt(int s){  if (_length + 4 > _capacity)   ensureCapacity(_length + 4);  _buffer[_length++]=(byte)(s >> 24);  _buffer[_length++]=(byte)(s >> 16);  _buffer[_length++]=(byte)(s >> 8);  _buffer[_length++]=(byte)s;}  }
class C{  private XMLAttribute findAttribute(String name,String namespace){  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    boolean found=attr.getName().equals(name);    if (namespace == null) {      found&=(attr.getNamespace() == null);    } else {      found&=namespace.equals(attr.getNamespace());    }    if (found) {      return attr;    }  }  return null;}  }
class C{  public static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public Conversion from(String... fields){  conversion.from=join(",",fields);  return this;}  }
class C{  void paintSkin(Graphics g,Rectangle r,State state){  paintSkin(g,r.x,r.y,r.width,r.height,state);}  }
class C{  public void testCase8(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aBytes);  BigInteger bNumber=new BigInteger(bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static DateTimeFormatter weekyearWeekDay(){  return Constants.wwd;}  }
class C{  private LocationRequest createSanitizedRequest(LocationRequest request,int resolutionLevel){  LocationRequest sanitizedRequest=new LocationRequest(request);  if (resolutionLevel < RESOLUTION_LEVEL_FINE) {switch (sanitizedRequest.getQuality()) {case LocationRequest.ACCURACY_FINE:      sanitizedRequest.setQuality(LocationRequest.ACCURACY_BLOCK);    break;case LocationRequest.POWER_HIGH:  sanitizedRequest.setQuality(LocationRequest.POWER_LOW);break;}if (sanitizedRequest.getInterval() < LocationFudger.FASTEST_INTERVAL_MS) {sanitizedRequest.setInterval(LocationFudger.FASTEST_INTERVAL_MS);}if (sanitizedRequest.getFastestInterval() < LocationFudger.FASTEST_INTERVAL_MS) {sanitizedRequest.setFastestInterval(LocationFudger.FASTEST_INTERVAL_MS);}}if (sanitizedRequest.getFastestInterval() > sanitizedRequest.getInterval()) {request.setFastestInterval(request.getInterval());}return sanitizedRequest;}  }
class C{  public AccessibleJTabbedPane(){  super();  JTabbedPane.this.model.addChangeListener(this);}  }
class C{  public void checkHeaders() throws ParseException {  String prefix="Missing a required header : ";  if (getCSeq() == null) {    throw new ParseException(prefix + CSeqHeader.NAME,0);  }  if (getTo() == null) {    throw new ParseException(prefix + ToHeader.NAME,0);  }  if (this.callIdHeader == null || this.callIdHeader.getCallId() == null || callIdHeader.getCallId().equals("")) {    throw new ParseException(prefix + CallIdHeader.NAME,0);  }  if (getFrom() == null) {    throw new ParseException(prefix + FromHeader.NAME,0);  }  if (getViaHeaders() == null) {    throw new ParseException(prefix + ViaHeader.NAME,0);  }  if (getMaxForwards() == null) {    throw new ParseException(prefix + MaxForwardsHeader.NAME,0);  }  if (getTopmostVia() == null)   throw new ParseException("No via header in request! ",0);  if (getMethod().equals(Request.NOTIFY)) {    if (getHeader(SubscriptionStateHeader.NAME) == null)     throw new ParseException(prefix + SubscriptionStateHeader.NAME,0);    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  } else   if (getMethod().equals(Request.PUBLISH)) {    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  }  if (requestLine.getMethod().equals(Request.INVITE) || requestLine.getMethod().equals(Request.SUBSCRIBE) || requestLine.getMethod().equals(Request.REFER)) {    if (this.getContactHeader() == null) {      if (this.getToTag() == null)       throw new ParseException(prefix + ContactHeader.NAME,0);    }    if (requestLine.getUri() instanceof SipUri) {      String scheme=((SipUri)requestLine.getUri()).getScheme();      if ("sips".equalsIgnoreCase(scheme)) {        SipUri sipUri=(SipUri)this.getContactHeader().getAddress().getURI();        if (!sipUri.getScheme().equals("sips")) {          throw new ParseException("Scheme for contact should be sips:" + sipUri,0);        }      }    }  }  if (this.getContactHeader() == null && (this.getMethod().equals(Request.INVITE) || this.getMethod().equals(Request.REFER) || this.getMethod().equals(Request.SUBSCRIBE))) {    throw new ParseException("Contact Header is Mandatory for a SIP INVITE",0);  }  if (requestLine != null && requestLine.getMethod() != null && getCSeq().getMethod() != null && requestLine.getMethod().compareTo(getCSeq().getMethod()) != 0) {    throw new ParseException("CSEQ method mismatch with  Request-Line ",0);  }}  }
class C{  public ParseRequest(String url,RequestMethod requestMethod){  super(url,requestMethod);}  }
class C{  public boolean isHigher(AccessLevelType other){  if (other == null) {    throw new NullPointerException("other AccessLevelType cannot be null");  }switch (this) {case ADMIN:    return other == MODIFY_SECRETS_BUT_NOT_MEMBERSHIP || other == READONLY;case MODIFY_SECRETS_BUT_NOT_MEMBERSHIP:  return other == READONLY;case READONLY:return false;default :throw new IllegalArgumentException("Bug: unsupported access level: " + this);}}  }
class C{  public boolean undo(INode n){  FreeCellNode state=(FreeCellNode)n;  int ct=num;  int idx=0;  while (ct-- > 0) {    cards[idx++]=state.cols[toCol].remove();  }  while (idx-- > 0) {    state.cols[fromCol].add(cards[idx]);  }  return true;}  }
class C{  public long tick(long timeUnits){  if (head == null) {    return 0L;  } else   if (head.delay >= timeUnits) {    head.delay-=timeUnits;    return 0L;  } else {    long leftover=timeUnits - head.delay;    head.delay=0L;    return leftover;  }}  }
class C{  public static void main(String[] args){  String usage="java org.apache.lucene.demo.IndexFiles" + " [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\n\n" + "This indexes the documents in DOCS_PATH, creating a Lucene index"+ "in INDEX_PATH that can be searched with SearchFiles";  String indexPath="index";  String docsPath=null;  boolean create=true;  for (int i=0; i < args.length; i++) {    if ("-index".equals(args[i])) {      indexPath=args[i + 1];      i++;    } else     if ("-docs".equals(args[i])) {      docsPath=args[i + 1];      i++;    } else     if ("-update".equals(args[i])) {      create=false;    }  }  if (docsPath == null) {    System.err.println("Usage: " + usage);    System.exit(1);  }  final Path docDir=Paths.get(docsPath);  if (!Files.isReadable(docDir)) {    System.out.println("Document directory '" + docDir.toAbsolutePath() + "' does not exist or is not readable, please check the path");    System.exit(1);  }  Date start=new Date();  try {    System.out.println("Indexing to directory '" + indexPath + "'...");    Directory dir=FSDirectory.open(Paths.get(indexPath));    Analyzer analyzer=new StandardAnalyzer();    IndexWriterConfig iwc=new IndexWriterConfig(analyzer);    if (create) {      iwc.setOpenMode(OpenMode.CREATE);    } else {      iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);    }    IndexWriter writer=new IndexWriter(dir,iwc);    indexDocs(writer,docDir);    writer.close();    Date end=new Date();    System.out.println(end.getTime() - start.getTime() + " total milliseconds");  } catch (  IOException e) {    System.out.println(" caught a " + e.getClass() + "\n with message: "+ e.getMessage());  }}  }
class C{  public static String writeImage(Context ctx,byte[] imageData){  final String FILE_NAME="photograph.jpeg";  File dir=null;  String filePath=null;  OutputStream imageFileOS;  dir=getStorageDirectory(ctx,null);  File f=new File(dir,FILE_NAME);  try {    imageFileOS=new FileOutputStream(f);    imageFileOS.write(imageData);    imageFileOS.flush();    imageFileOS.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }  filePath=f.getAbsolutePath();  return filePath;}  }
class C{  public Certificate engineGetCertificate(String alias){  Certificate cert=null;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null) {    if (entry instanceof TrustedCertEntry) {      cert=((TrustedCertEntry)entry).cert;    } else     if ((entry instanceof PrivateKeyEntry) && (((PrivateKeyEntry)entry).chain != null)) {      cert=((PrivateKeyEntry)entry).chain[0];    }  }  return cert;}  }
class C{  public static String show(IJavaProject javaProject,boolean isExternal){  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();  try {    IProject project=javaProject.getProject();    WebAppUtilities.verifyIsWebApp(project);    IFolder warFolder=WebAppUtilities.getWarSrc(project);    if (warFolder.exists()) {      WebAppHostPageSelectionDialog dialog=new WebAppHostPageSelectionDialog(shell,javaProject,warFolder,isExternal);      if (dialog.open() == OK) {        Object[] result=dialog.getResult();        IFile htmlFile=dialog.getSelectedFile(result);        try {          WebAppProjectProperties.setLaunchConfigExternalUrlPrefix(project,dialog.getExternalUrlPrefix());        } catch (        BackingStoreException e) {          GWTPluginLog.logError(e);        }        return dialog.getUrl(warFolder,htmlFile);      }    }  } catch (  CoreException e) {    CorePluginLog.logError(e);  }  return null;}  }
class C{  public boolean isSetNodeStore(){  return this.nodeStore != null;}  }
class C{  public static Map<String,Object> handleFedexShipReply(String fDXShipReplyString,GenericValue shipmentRouteSegment,List<GenericValue> shipmentPackageRouteSegs,Locale locale) throws GenericEntityException {  List<Object> errorList=FastList.newInstance();  GenericValue shipmentPackageRouteSeg=shipmentPackageRouteSegs.get(0);  Document fdxShipReplyDocument=null;  try {    fdxShipReplyDocument=UtilXml.readXmlDocument(fDXShipReplyString,false);  } catch (  Exception e) {    String errorMessage="Error parsing the FDXShipReply: " + e.toString();    Debug.logError(e,errorMessage,module);  }  if (UtilValidate.isEmpty(fdxShipReplyDocument)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateParsingError",locale));  }  Element rootElement=fdxShipReplyDocument.getDocumentElement();  handleErrors(rootElement,errorList,locale);  if (UtilValidate.isNotEmpty(errorList)) {    return ServiceUtil.returnError(errorList);  }  Element trackingElement=UtilXml.firstChildElement(rootElement,"Tracking");  String trackingNumber=UtilXml.childElementValue(trackingElement,"TrackingNumber");  Element labelElement=UtilXml.firstChildElement(rootElement,"Labels");  String encodedImageString=UtilXml.childElementValue(labelElement,"OutboundLabel");  if (UtilValidate.isEmpty(encodedImageString)) {    Debug.logError("Cannot find FDXShipReply label. FDXShipReply document is: " + fDXShipReplyString,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateLabelNotFound",UtilMisc.toMap("shipmentPackageRouteSeg",shipmentPackageRouteSeg,"fDXShipReplyString",fDXShipReplyString),locale));  }  byte[] labelBytes=Base64.base64Decode(encodedImageString.getBytes());  if (labelBytes != null) {    shipmentPackageRouteSeg.setBytes("labelImage",labelBytes);  } else {    Debug.logInfo("Failed to either decode returned FedEx label or no data found in Labels/OutboundLabel.",module);  }  shipmentPackageRouteSeg.set("trackingCode",trackingNumber);  shipmentPackageRouteSeg.set("labelHtml",encodedImageString);  shipmentPackageRouteSeg.store();  shipmentRouteSegment.set("trackingIdNumber",trackingNumber);  shipmentRouteSegment.put("carrierServiceStatusId","SHRSCS_CONFIRMED");  shipmentRouteSegment.store();  return ServiceUtil.returnSuccess(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentConfirmed",locale));}  }
class C{  public final void testGetP(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(1,dps.getP().intValue());}  }
class C{  protected void write(long offset,byte[] b) throws IOException {  rafile.seek(offset);  rafile.write(b);}  }
class C{  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader,String collection,int timeoutInMs){  long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutInMs,TimeUnit.MILLISECONDS);  boolean success=false;  while (System.nanoTime() < timeout) {    success=true;    ClusterState clusterState=zkStateReader.getClusterState();    if (clusterState != null) {      Set<String> collections;      if (collection != null) {        collections=Collections.singleton(collection);      } else {        collections=clusterState.getCollections();      }      for (      String coll : collections) {        DocCollection docCollection=clusterState.getCollection(coll);        Collection<Slice> slices=docCollection.getSlices();        for (        Slice slice : slices) {          if (slice.getState().equals(Slice.ACTIVE)) {            Collection<Replica> replicas=slice.getReplicas();            for (            Replica replica : replicas) {              boolean live=clusterState.liveNodesContain(replica.getNodeName());              String state=replica.getStr(ZkStateReader.STATE_PROP);              if (!live || !state.equals(ZkStateReader.ACTIVE)) {                success=false;              }            }          }        }      }      if (!success) {        try {          Thread.sleep(TIMEOUT_POLL_MS);        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();          throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted");        }      }    }  }  return success;}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View)&& PROXY_PROPERTIES.containsKey(mPropertyName)) {      setProperty(PROXY_PROPERTIES.get(mPropertyName));    }    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public void initComponents() throws Exception {}  }
class C{  public ShareDialog(Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);  ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);}  }
class C{  public Element svgText(double x,double y,String text){  return SVGUtil.svgText(document,x,y,text);}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static ClientId fromJson(Map<String,Object> json) throws IOException {  Object rawDetail=null;  rawDetail=json.get(FIELD_TYPE_INSTALLED);  if (rawDetail == null) {    rawDetail=json.get(FIELD_TYPE_WEB);  }  if (rawDetail == null || !(rawDetail instanceof Map<?,?>)) {    throw new IOException("Unable to parse Client ID JSON. Expecting top-level field '" + FIELD_TYPE_WEB + "' or '"+ FIELD_TYPE_INSTALLED+ "' of collection type");  }  @SuppressWarnings("unchecked") Map<String,Object> detail=(Map<String,Object>)rawDetail;  String clientId=OAuth2Utils.validateString(detail,FIELD_CLIENT_ID,JSON_PARSE_ERROR);  if (clientId == null || clientId.length() == 0) {    throw new IOException("Unable to parse ClientId. Field '" + FIELD_CLIENT_ID + "' is required.");  }  String clientSecret=OAuth2Utils.validateOptionalString(detail,FIELD_CLIENT_SECRET,JSON_PARSE_ERROR);  return new ClientId(clientId,clientSecret);}  }
class C{  private void init(String xmlPath) throws MalformedURLException, IOException {  XML xml=new XML(true,xmlPath);  if (!xml.isInheritedMapped(configuredClass))   Error.classNotMapped(configuredClass);  for (  Class<?> classe : getClasses(xml)) {    relationalManyToOneMapper.put(classe.getName(),new JMapper(configuredClass,classe,ChooseConfig.DESTINATION,xmlPath));    relationalOneToManyMapper.put(classe.getName(),new JMapper(classe,configuredClass,ChooseConfig.SOURCE,xmlPath));  }}  }
class C{  public static ClusterNode youngest(Collection<ClusterNode> c,@Nullable IgnitePredicate<ClusterNode> p){  ClusterNode youngest=null;  long maxOrder=Long.MIN_VALUE;  for (  ClusterNode n : c) {    if ((p == null || p.apply(n)) && n.order() > maxOrder) {      youngest=n;      maxOrder=n.order();    }  }  return youngest;}  }
class C{  public void resetLabelsToSkip(){  mIsAxisModulusCustom=false;}  }
class C{  protected void waitForMsgs(AsyncSubscriptionImpl sub) throws InterruptedException {  boolean closed;  long delivered=0L;  long max;  Message msg;  MessageHandler mcb;  BlockingQueue<Message> mch;  while (true) {    sub.lock();    try {      mch=sub.getChannel();      while (mch.size() == 0 && !sub.isClosed()) {        sub.pCond.await();      }      msg=mch.poll();      if (msg != null) {        sub.pMsgs--;        sub.pBytes-=(msg.getData() == null ? 0 : msg.getData().length);      }      mcb=sub.msgHandler;      max=sub.max;      closed=sub.isClosed();      if (!closed) {        sub.delivered++;        delivered=sub.delivered;      }    }  finally {      sub.unlock();    }    if (closed) {      break;    }    if (msg != null && (max <= 0 || delivered <= max)) {      mcb.onMessage(msg);    }    if (max > 0 && delivered >= max) {      mu.lock();      try {        removeSub(sub);      }  finally {        mu.unlock();      }      break;    }  }}  }
class C{  protected Array<Actor> parse(){  actors=GdxArrays.newArray(Actor.class);  invokePreListeners(actors);  final StringBuilder builder=new StringBuilder();  while (templateReader.hasNextCharacter()) {    final char character=templateReader.nextCharacter();    if (character == syntax.getArgumentOpening()) {      processArgument();    } else     if (character == syntax.getTagOpening()) {      if (isNextCharacterCommentOpening()) {        processComment();        continue;      }      if (currentParentTag != null) {        currentParentTag.handleDataBetweenTags(builder);      }      Strings.clearBuilder(builder);      processTag(builder);    } else {      builder.append(character);    }  }  if (currentParentTag != null) {    throwError('"' + currentParentTag.getTagName() + "\" tag was never closed.");  }  invokePortListeners(actors);  return actors;}  }
class C{  @Override public void end(){  super.end();  if (!m_endBaseStepsFinished) {    m_endBaseStepsFinished=true;    triggerWhenTriggerAttachments(TriggerAttachment.AFTER);  }  m_startBaseStepsFinished=false;  m_endBaseStepsFinished=false;}  }
class C{  public void testGenericStringIntMap() throws Exception {  ObjectMapper mapper=new ObjectMapper();  String JSON="{ \"a\" : 1, \"b\" : 2, \"c\" : -99 }";  Map<String,Integer> result=mapper.readValue(JSON,new TypeReference<Map<String,Integer>>(){  });  assertNotNull(result);  assertTrue(result instanceof Map<?,?>);  assertEquals(3,result.size());  assertEquals(Integer.valueOf(-99),result.get("c"));  assertEquals(Integer.valueOf(2),result.get("b"));  assertEquals(Integer.valueOf(1),result.get("a"));  assertNull(result.get(""));}  }
class C{  public ConfigHelper(Class<D> destinationClass,Class<S> sourceClass){  this(destinationClass,sourceClass,annotationToXml(destinationClass,sourceClass));}  }
class C{  public static boolean isNullOrEmpty(String s,boolean trim){  return s == null || (trim ? s.trim().length() == 0 : s.length() == 0);}  }
class C{  public static String formatNumber(double value){  if (Double.isNaN(value)) {    return "?";  }  return formatNumber(value,numberOfFractionDigits,false);}  }
class C{  public static double[] remove(double[] buffer,int offset,int length){  int len2=buffer.length - length;  double temp[]=new double[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.384 -0400",hash_original_method="4B8C8480512DA051CE22C87157965AAC",hash_generated_method="4593F14C511CEE77F80A935A25D5C37A") @DSSource(DSSourceKind.ENCODED) public byte[] decode(byte[] bytes) throws DecoderException {  return decodeUrl(bytes);}  }
class C{  private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  public boolean exportVolume(final String xivSystem,final String exportType,final String exportName,final String volumeName,final String lunID,final boolean isSnapshot) throws Exception {  final String instanceURL=isSnapshot ? SNAPSHOT_INSTANCE_URL : VOLUME_INSTANCE_URL;  checkAvailability(MessageFormat.format(instanceURL,xivSystem,volumeName));  boolean isAvailable=findAvailability(MessageFormat.format(EXPORT_VOLUME_INSTANCE_URL,xivSystem,exportType.toLowerCase(),exportName,volumeName));  if (isAvailable) {    _log.info("Volume {} already already exported to {} {} on XIV {}. Skipping Export!",volumeName,exportType,exportName,xivSystem);  } else {    String body=null;    if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {      body=MessageFormat.format(EXPORT_VOLUME_TO_CLUSTER_BODY,exportName,volumeName,lunID);    } else {      body=MessageFormat.format(EXPORT_VOLUME_TO_HOST_BODY,exportName,volumeName,lunID);    }    ResponseValidator failureStatus=executePOSTRequest(xivSystem,MessageFormat.format(EXPORT_VOLUME_URL,xivSystem),body);    if (failureStatus.isFailed()) {      throw XIVRestException.exceptions.volumeExportToClusterFailure(xivSystem,exportName,volumeName,failureStatus.toString());    }  }  return isAvailable;}  }
class C{  private int itemCount(TreeItem treeItem){  int count=1;  TreeItem[] children=treeItem.getItems();  for (  TreeItem element : children) {    count+=itemCount(element);  }  return count;}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  public void seleccionarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedaElementosForm frm=(BusquedaElementosForm)form;  getInvocationStack(request).getLastReturnPoint(request).removeInTemporalSession(request,FondosConstants.ELEMENTOS_SELECCIONADOS_BUSQUEDA_KEY);  String[] idsElementosSeleccionados=frm.getSelectedElem();  PrecondicionesBusquedaFondosGenerica precondiciones=(PrecondicionesBusquedaFondosGenerica)getFromTemporalSession(request,FondosConstants.PRECONDICIONES_BUSQUEDA_KEY);  getInvocationStack(request).goToLastReturnPoint(request);  getInvocationStack(request).getLastReturnPoint(request).setInTemporalSession(request,FondosConstants.ELEMENTOS_SELECCIONADOS_BUSQUEDA_KEY,idsElementosSeleccionados);  setReturnActionFordward(request,mappings.findForward(precondiciones.getForwardRetorno()));}  }
class C{  protected void dropEngines(PrintWriter file,List<Engine> engineList,RouteLocation rl,boolean isManifest){  boolean printHeader=Setup.isPrintHeadersEnabled();  for (  Engine engine : engineList) {    if (engine.getRouteDestination() == rl) {      if (printHeader) {        printDropEngineHeader(file,isManifest);        printHeader=false;      }      dropEngine(file,engine,isManifest);    }  }}  }
class C{  public FunctionInvocationTargetException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public ObjectId(Date time){  this(time,_genmachine,_nextInc.getAndIncrement());}  }
class C{  private void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet,QName attributeSetsNames[]) throws TransformerException {  if (null != attributeSetsNames) {    int nNames=attributeSetsNames.length;    for (int i=0; i < nNames; i++) {      QName qname=attributeSetsNames[i];      java.util.List attrSets=stylesheet.getAttributeSetComposed(qname);      if (null != attrSets) {        int nSets=attrSets.size();        for (int k=nSets - 1; k >= 0; k--) {          ElemAttributeSet attrSet=(ElemAttributeSet)attrSets.get(k);          attrSet.execute(transformer);        }      } else {        throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_ATTRIB_SET,new Object[]{qname}),this);      }    }  }}  }
class C{  protected Route(){}  }
class C{  public void echoCmd(boolean echoCmd){  this.echoCmd=echoCmd;}  }
class C{  private void inventoryDeleteMigrationSource(URI sourceVolumeURI,Volume virtualVolume){  if (NullColumnValueGetter.isNullURI(sourceVolumeURI)) {    return;  }  Volume sourceVolume=_dbClient.queryObject(Volume.class,sourceVolumeURI);  try {    if (sourceVolume == null || sourceVolume.getInactive()) {      return;    }    URI storageSystemToRemove=sourceVolume.getStorageController();    ExportUtils.cleanBlockObjectFromExports(sourceVolumeURI,true,_dbClient);    _dbClient.markForDeletion(sourceVolume);    if (!NullColumnValueGetter.isNullURI(virtualVolume.getConsistencyGroup()) && (virtualVolume.getAssociatedVolumes() != null && !virtualVolume.getAssociatedVolumes().isEmpty())) {      Volume srcAssocVolume=VPlexUtil.getVPLEXBackendVolume(virtualVolume,true,_dbClient,false);      if (srcAssocVolume != null && srcAssocVolume.getStorageController().equals(storageSystemToRemove)) {        storageSystemToRemove=null;      }      Volume haAssocVolume=VPlexUtil.getVPLEXBackendVolume(virtualVolume,false,_dbClient,false);      if (haAssocVolume != null && haAssocVolume.getStorageController().equals(storageSystemToRemove)) {        storageSystemToRemove=null;      }      if (storageSystemToRemove != null) {        BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,virtualVolume.getConsistencyGroup());        StringSet cgNames=cg.getSystemConsistencyGroups().get(storageSystemToRemove.toString());        if (cgNames != null) {          for (          String cgName : cgNames) {            cg.removeSystemConsistencyGroup(storageSystemToRemove.toString(),cgName);          }          _dbClient.updateObject(cg);        }      }    }  } catch (  Exception ex) {    _log.info("Unable to inventory delete migration source volume after commit: " + sourceVolume.getLabel(),ex);  }}  }
class C{  public void addPoint(Point2D point){  points.add(point);}  }
class C{  public OpenWorkspaceComponentListAction(final SimbrainDesktop desktop){  super("Open component list");  this.desktop=desktop;  putValue(SHORT_DESCRIPTION,"Open component list");}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  public OrdinalStatisticalTest(int numberOfGroups,Comparator<RankedObservation> comparator){  super();  this.numberOfGroups=numberOfGroups;  this.comparator=comparator;  data=new ArrayList<RankedObservation>();}  }
class C{  private byte[] decrypt(final byte[] bytes) throws IOException {  try {    return this.create(Cipher.DECRYPT_MODE).doFinal(bytes);  } catch (  final BadPaddingException ex) {    throw new IOException(ex);  }catch (  final IllegalBlockSizeException ex) {    throw new IOException(ex);  }}  }
class C{  public LocalDate withYearOfEra(int yearOfEra){  return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(),yearOfEra));}  }
class C{  public TitlePaneCloseButtonWindowModifiedState(){  super("WindowModified");}  }
class C{  public static boolean isArgumentless(@Nullable String packageName,@NotNull String subName){  return false;}  }
class C{  public TaskList restoreApplicationSnapshot(URI id,VolumeGroupSnapshotOperationParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RESTORE_SNAPSHOT_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public List<CatalogServiceRestRep> findByCatalogCategory(URI catalogCategoryId){  CatalogServiceList response=client.get(CatalogServiceList.class,PathConstants.CATALOG_SUB_SERVICES_URL,catalogCategoryId);  return getByRefs(response.getCatalogServices());}  }
class C{  public static boolean isRecommended(String seasonPattern,String filePattern){  int epCnt=count(filePattern,episodeNumbers);  int titleCnt=count(filePattern,episodeTitles);  int seCnt=count(filePattern,seasonNumbers);  int seFolderCnt=count(seasonPattern,seasonNumbers);  if (epCnt != 1 || titleCnt != 1 || seCnt > 1 || seFolderCnt > 1 || (seCnt + seFolderCnt) == 0) {    LOGGER.debug("Too many/less episode/season/title replacer patterns");    return false;  }  int epPos=getPatternPos(filePattern,episodeNumbers);  int sePos=getPatternPos(filePattern,seasonNumbers);  int titlePos=getPatternPos(filePattern,episodeTitles);  if (sePos > epPos) {    LOGGER.debug("Season pattern should be before episode pattern!");    return false;  }  if (titleCnt == 1 && seCnt == 1) {    if (titlePos < epPos && titlePos > sePos) {      LOGGER.debug("Title should not be between season/episode pattern");      return false;    }  }  return true;}  }
class C{  public static synchronized ApiService processClass(ClassDoc classDoc,String baseUrl,boolean isDataService){  ApiService apiService=new ApiService();  apiService.packageName=classDoc.containingPackage().name();  apiService.javaClassName=classDoc.name();  apiService.description=classDoc.commentText();  apiService.path=baseUrl;  addDefaultPermissions(classDoc,apiService);  addDeprecated(classDoc,apiService);  TemporaryCleanup.applyCleanups(apiService);  List<String> methodsAdded=Lists.newArrayList();  ClassDoc currentClass=classDoc;  while (currentClass != null && currentClass.containingPackage().name().startsWith("com.emc")) {    for (    MethodDoc method : currentClass.methods()) {      if (isApiMethod(method) && !isInternalMethod(method) && !methodBlackList.contains(apiService.getFqJavaClassName() + "::" + method.name())&& !methodBlackList.contains(apiService.javaClassName + "::" + method.name())) {        ApiMethod apiMethod=MethodProcessor.processMethod(apiService,method,apiService.path,isDataService);        if (!apiMethod.brief.toLowerCase().startsWith("internal")) {          apiService.addMethod(apiMethod);        }      }      methodsAdded.add(method.name());    }    currentClass=currentClass.superclass();  }  return apiService;}  }
class C{  public int count(){  rw.readLock().lock();  try {    return nodes.size();  }  finally {    rw.readLock().unlock();  }}  }
class C{  public static String filter(String data){  return data;}  }
class C{  public void expandTree(final int level){  expandNode((TreeNode)tree.getModel().getRoot(),new TreePath(tree.getModel().getRoot()),level);}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  Position aircraft=new Position(34.0158333,-118.4513056,2500);  Position airport=new Position(33.9424368,-118.4081222,38.7);  Globe globe=wwd.getGlobe();  double heading=aircraft.greatCircleAzimuth(airport);  double distanceRadians=aircraft.greatCircleDistance(airport);  double distance=distanceRadians * globe.getRadiusAt(aircraft.latitude,aircraft.longitude);  double altitude=aircraft.altitude - airport.altitude;  double range=Math.sqrt(altitude * altitude + distance * distance);  double tilt=Math.toDegrees(Math.atan(distance / aircraft.altitude));  LookAt lookAt=new LookAt();  lookAt.set(airport.latitude,airport.longitude,airport.altitude,WorldWind.ABSOLUTE,range,heading,tilt,0);  wwd.getNavigator().setAsLookAt(globe,lookAt);  return wwd;}  }
class C{  public GridLayout(String group,int nrows,int ncols){  super(group);  rows=nrows;  cols=ncols;  analyze=false;}  }
class C{  public void propertyChange(PropertyChangeEvent event){  if (getSourceViewer() != null) {    setInput(getEditorInput());  }}  }
class C{  @Override public void transactionAborted(){  for (  BigdataGraphListener listener : listeners) {    listener.transactionAborted();  }}  }
class C{  void validate(SunGraphics2D sg2d){  Region clip=sg2d.getCompClip();  setBounds(clip.getLoX(),clip.getLoY(),clip.getHiX(),clip.getHiY(),sg2d.strokeHint);  validateSurface(sg2d);}  }
class C{  private boolean handleHorizontalFocusWithinListItem(int direction){  if (direction != View.FOCUS_LEFT && direction != View.FOCUS_RIGHT) {    throw new IllegalArgumentException("direction must be one of" + " {View.FOCUS_LEFT, View.FOCUS_RIGHT}");  }  final int numChildren=getChildCount();  if (mItemsCanFocus && numChildren > 0 && mSelectedPosition != INVALID_POSITION) {    final View selectedView=getSelectedView();    if (selectedView != null && selectedView.hasFocus() && selectedView instanceof ViewGroup) {      final View currentFocus=selectedView.findFocus();      final View nextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)selectedView,currentFocus,direction);      if (nextFocus != null) {        currentFocus.getFocusedRect(mTempRect);        offsetDescendantRectToMyCoords(currentFocus,mTempRect);        offsetRectIntoDescendantCoords(nextFocus,mTempRect);        if (nextFocus.requestFocus(direction,mTempRect)) {          return true;        }      }      final View globalNextFocus=FocusFinder.getInstance().findNextFocus((ViewGroup)getRootView(),currentFocus,direction);      if (globalNextFocus != null) {        return isViewAncestorOf(globalNextFocus,this);      }    }  }  return false;}  }
class C{  public static boolean isEnum(int flags){  return (flags & AccEnum) != 0;}  }
class C{  public ToggleButtonModel(){}  }
class C{  public MaximumDistance(){  super();}  }
class C{  public BufferedSOAPRequestEntity(final SOAPRequestEntity entity){  delegate=entity;}  }
class C{  public CaseBuilder elseExpr(Object value){  if (ended) {    throw new IllegalStateException("Can't call elseExpr() after calling end()");  }  this.elseValue=value;  return this;}  }
class C{  private MoveOption[] secondPass(CEntity self,int friends,List<Entity> enemy_array,ArrayList<Entity> entities){  MoveOption[] move_array=self.pass.values().toArray(new MoveOption[0]);  self.pass.clear();  for (int j=0; (j < move_array.length) && (friends > 2); j++) {    MoveOption option=move_array[j];    for (int e=0; e < enemy_array.size(); e++) {      Entity en=enemy_array.get(e);      CEntity enemy=centities.get(en);      for (      Entity other : entities) {        if (other.isEnemyOf(self.entity)) {          continue;        }        MoveOption foption=centities.get(other).current;        double threat_divisor=1;        MoveOption.DamageInfo di=option.getDamageInfo(enemy,true);        if (foption.getDamageInfo(enemy,false) != null) {          option.damage+=(enemy.canMove() ? .1 : .2) * di.damage;          threat_divisor+=foption.getCEntity().canMove() ? .4 : .6;        }        option.threat-=di.threat;        di.threat/=threat_divisor;        option.threat+=di.threat;      }    }  }  return move_array;}  }
class C{  public void shuffle(){  Random r=new Random();  int num=count;  while (num > 1) {    int value=r.nextInt(num);    num--;    String temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";  db.execSQL(sql);}  }
class C{  private void addManagedSystem(ISource S) throws AdeException {  logger.trace(String.format("addManagedSystem(%s) -->entry",S.getSourceId()));  boolean addOk;  try {    logger.info(String.format("addManagedSystem(%s) -->executeBatch",S.getSourceId()));    addOk=executeBatch(getSqlForAdd(S));  } catch (  AdeException e) {    throw e;  }catch (  Throwable t) {    final String msg=String.format("addManagedSystem(%s) caught unexpected throwable: %s",S.getSourceId(),t.getMessage());    logger.error(msg);    throw new AdeInternalException(msg,t);  }  if (!addOk) {    final String msg=String.format("addManagedSystem(%s) unexpected (sql) failure",S.getSourceId());    logger.error(msg);    throw new AdeInternalException(msg);  }  logger.trace("addManagedSystem() <-- exit");}  }
class C{  public int insert(DatabaseType databaseType,DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  KeyHolder keyHolder=null;  if (idField != null) {    boolean assignId;    if (idField.isAllowGeneratedIdInsert() && !idField.isObjectsFieldValueDefault(data)) {      assignId=false;    } else {      assignId=true;    }    if (idField.isSelfGeneratedId() && idField.isGeneratedId()) {      if (assignId) {        idField.assignField(data,idField.generateId(),false,objectCache);      }    } else     if (idField.isGeneratedIdSequence() && databaseType.isSelectSequenceBeforeInsert()) {      if (assignId) {        assignSequenceId(databaseConnection,data,objectCache);      }    } else     if (idField.isGeneratedId()) {      if (assignId) {        keyHolder=new KeyHolder();      }    } else {    }  }  try {    if (tableInfo.isForeignAutoCreate()) {      for (      FieldType fieldType : tableInfo.getFieldTypes()) {        if (!fieldType.isForeignAutoCreate()) {          continue;        }        Object foreignObj=fieldType.extractRawJavaFieldValue(data);        if (foreignObj != null && fieldType.getForeignIdField().isObjectsFieldValueDefault(foreignObj)) {          fieldType.createWithForeignDao(foreignObj);        }      }    }    Object[] args=getFieldObjects(data);    Object versionDefaultValue=null;    if (versionFieldTypeIndex >= 0 && args[versionFieldTypeIndex] == null) {      FieldType versionFieldType=argFieldTypes[versionFieldTypeIndex];      versionDefaultValue=versionFieldType.moveToNextValue(null);      args[versionFieldTypeIndex]=versionFieldType.convertJavaFieldToSqlArgValue(versionDefaultValue);    }    int rowC;    try {      rowC=databaseConnection.insert(statement,args,argFieldTypes,keyHolder);    } catch (    SQLException e) {      logger.debug("insert data with statement '{}' and {} args, threw exception: {}",statement,args.length,e);      if (args.length > 0) {        logger.trace("insert arguments: {}",(Object)args);      }      throw e;    }    logger.debug("insert data with statement '{}' and {} args, changed {} rows",statement,args.length,rowC);    if (args.length > 0) {      logger.trace("insert arguments: {}",(Object)args);    }    if (rowC > 0) {      if (versionDefaultValue != null) {        argFieldTypes[versionFieldTypeIndex].assignField(data,versionDefaultValue,false,null);      }      if (keyHolder != null) {        Number key=keyHolder.getKey();        if (key == null) {          throw new SQLException("generated-id key was not set by the update call");        }        if (key.longValue() == 0L) {          throw new SQLException("generated-id key must not be 0 value");        }        assignIdValue(data,key,"keyholder",objectCache);      }      if (objectCache != null && foreignCollectionsAreAssigned(tableInfo.getForeignCollections(),data)) {        Object id=idField.extractJavaFieldValue(data);        objectCache.put(clazz,id,data);      }    }    return rowC;  } catch (  SQLException e) {    throw SqlExceptionUtil.create("Unable to run insert stmt on object " + data + ": "+ statement,e);  }}  }
class C{  public void update(){  mUpdateRequired=true;}  }
class C{  public void assertReflectionSettersRejectNull(Message.Builder builder) throws Exception {  try {    builder.setField(f("optional_string"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_bytes"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_enum"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_message"),(TestAllTypes.NestedMessage)null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.setField(f("optional_nested_message"),(TestAllTypes.NestedMessage.Builder)null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_string"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_bytes"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_nested_enum"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  try {    builder.addRepeatedField(f("repeated_nested_message"),null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public static String hashStrings(String... strings) throws BaleenException {  StringBuilder hash=new StringBuilder();  StringBuilder concat=new StringBuilder();  for (  String s : strings) {    if (s != null)     concat.append(s);  }  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.reset();    byte[] buffer=concat.toString().getBytes(StandardCharsets.UTF_8);    md.update(buffer);    byte[] digest=md.digest();    for (int i=0; i < digest.length; i++) {      hash.append(Integer.toString((digest[i] & 0xff) + 0x100,16).substring(1));    }  } catch (  NoSuchAlgorithmException e) {    throw new BaleenException("Can't get MessageDigest instance for constructing hashes",e);  }  return hash.toString();}  }
class C{  public void trimToSize(int maxSize){  while (true) {    String key;    Object value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Object> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  public static void reverse(int[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    int tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  public AllocLocationModel(String clz,int line,IAllocNode node){  super(clz,line);  fromAPI=!Project.v().isSrcClass(clz);  Object expr=node.getNewExpr();  if (expr != null && expr instanceof NewExpr)   type=((NewExpr)expr).getType().toString();  Set<Edge> callEdges=MethodCallsOnAlloc.v().getCalls(node);  if (callEdges != null) {    for (    Edge callEdge : callEdges) {      CallLocationModel callLine=CallLocationModel.get(callEdge);      if (callLine != null) {        String className=callLine.getClz();        if (Project.v().isSrcClass(className)) {          callsOnAlloc.add(callLine);        }      }    }    Collections.sort(callsOnAlloc);  }  ;}  }
class C{  private void shiftSegment(Segment segment,int leftBound,int offset){  if (segment.left > leftBound) {    segment.left+=offset;    segment.right+=offset;  }}  }
class C{  public boolean exists(World world){  return world.getChunkProvider() == null || world.getChunkProvider().chunkExists(xCoord >> 4,zCoord >> 4);}  }
class C{  private void fillFieldValues(){  cbDecayFunction.setSelectedItem(smellSource.getDecayFunction());  tfDispersion.setText(Double.toString(smellSource.getDispersion()));  tfPeak.setText(Double.toString(smellSource.getPeak()));  updateStimulusPanel();  rbAddNoise.setSelected(smellSource.isAddNoise());  jsNoiseLevel.setValue((int)(smellSource.getNoiseLevel() * 100));  if (smellSource.isAddNoise()) {    jsNoiseLevel.setEnabled(true);  } else {    jsNoiseLevel.setEnabled(false);  }  randomUpper=Double.parseDouble(stimulusVals[0].getText());  randomLower=Double.parseDouble(stimulusVals[0].getText());  for (int i=0; i < valArray.length; i++) {    if ((Double.parseDouble(stimulusVals[i].getText())) > randomUpper) {      randomUpper=Double.parseDouble(stimulusVals[i].getText());    }    if ((Double.parseDouble(stimulusVals[i].getText()) < randomLower)) {      randomLower=Double.parseDouble(stimulusVals[i].getText());    }  }  randomUpper=Math.rint(randomUpper);  randomLower=Math.rint(randomLower);  tfStimulusNum.setText(Integer.toString(valArray.length));  tfRandomUpper.setText(Double.toString(randomUpper));  tfRandomLower.setText(Double.toString(randomLower));}  }
class C{  public static void generate(Cache cache,PrintWriter pw,boolean useSchema,String version){  (new CacheXmlGenerator(cache,useSchema,version,true)).generate(pw);}  }
class C{  private void disposeCodec(IoSession session){  disposeEncoder(session);  disposeDecoder(session);  disposeDecoderOut(session);}  }
class C{  private ChatAction createAction(String action) throws CompilationFailedException {  final GroovyShell interp=createGroovyShell();  String code="import games.stendhal.server.entity.npc.action.*;\r\n" + action;  ChatAction created=(ChatAction)interp.evaluate(code);  return created;}  }
class C{  private static boolean writeMifareClassic1KBlock(MfReaderWriter reader,MfAccess access,MfBlock block) throws CardException {  boolean written=false;  try {    reader.writeBlock(access,block);    written=true;  } catch (  IOException ioe) {    if (ioe.getCause() instanceof CardException) {      throw (CardException)ioe.getCause();    }  }  return written;}  }
class C{  boolean pageScroll(int direction){  int nextPage=-1;  if (direction == FOCUS_UP) {    nextPage=Math.max(0,mSelectedPosition - getChildCount());  } else   if (direction == FOCUS_DOWN) {    nextPage=Math.min(mItemCount - 1,mSelectedPosition + getChildCount());  }  if (nextPage >= 0) {    setSelectionInt(nextPage);    invokeOnItemScrollListener();    awakenScrollBars();    return true;  }  return false;}  }
class C{  private static void verifyMapsAndData(){  try {    HARegion r1=(HARegion)hrq.getRegion();    assertNotNull(" Did not expect the HARegion to be null but it is",r1);    for (int i=1; i < 11; i++) {      assertNotNull(" Did not expect the entry to be null but it is",r1.get(new Long(i)));    }    assertNotNull(" Did not expect the HARegionQueue to be null but it is",hrq);    Map conflationMap=hrq.getConflationMapForTesting();    assertTrue(" Did not expect the conflationMap size to be 0 but it is",conflationMap.size() > 0);    Map internalMap=(Map)conflationMap.get("HARegionQueueDUnitTest_region");    assertNotNull(" Did not expect the internalMap to be null but it is",internalMap);    for (int i=1; i < 11; i++) {      assertTrue(" Did not expect the entry not to be equal but it is",internalMap.get("key" + i).equals(new Long(i)));    }    Map eventMap=hrq.getEventsMapForTesting();    assertNotNull(" Did not expect the result (DACE object) to be null but it is",eventMap.get(new ThreadIdentifier(new byte[]{1},1)));    Set counterSet=hrq.getCurrentCounterSet(new EventID(new byte[]{1},1,1));    assertTrue(" excpected the counter set size to be 10 but it is not so",counterSet.size() == 10);    long i=1;    Iterator iterator=counterSet.iterator();    while (iterator.hasNext()) {      assertTrue(((Long)iterator.next()).longValue() == i);      i++;    }    assertTrue(hrq.getLastDispatchedSequenceId(new EventID(new byte[]{1},1,1)) == -1);    Thread.sleep(7500);    for (int j=1; j < 11; j++) {      assertNull("expected the entry to be null since expiry time exceeded but it is not so",r1.get(new Long(j)));    }    internalMap=(Map)hrq.getConflationMapForTesting().get("HARegionQueueDUnitTest_region");    assertNotNull(" Did not expect the internalMap to be null but it is",internalMap);    assertTrue("internalMap (conflation) should have been emptry since expiry of all entries has been exceeded but it is not so",internalMap.isEmpty());    assertTrue("eventMap should have been emptry since expiry of all entries has been exceeded but it is not so",eventMap.isEmpty());    assertTrue("counter set should have been emptry since expiry of all entries has been exceeded but it is not so",counterSet.isEmpty());  } catch (  Exception ex) {    fail("failed while region.put()",ex);  }}  }
class C{  public DistributedLogClientBuilder clientId(ClientId clientId){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientId=clientId;  return newBuilder;}  }
class C{  public JobKOctets(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public void clearCaches(){  node2String.clear();  string2Query.clear();  string2Update.clear();}  }
class C{  public List<FunctionDesc> listAllFunctions(){  List<FunctionDesc> functions=new ArrayList<FunctionDesc>();  for (  MeasureDesc m : measures) {    functions.add(m.getFunction());  }  return functions;}  }
class C{  CDATAReader(IXMLReader reader){  this.reader=reader;  this.savedChar=0;  this.atEndOfData=false;}  }
class C{  public CPassword(String text){  super(text);  init();}  }
class C{  private void makeRecurringEventView() throws Exception {  handleTableCreation("recurring event data view",bigquery().query(RECURRING_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).put("DEST_DATASET",bigquery().getDatasetId()).build(),bigquery().buildDestinationTable("RecurringEventData").description("Synthetic view of recurring billing event recurrence data.").type(TableType.VIEW).build()));}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.381 -0400",hash_original_method="3B17BBAD3F2EB7B5AD570704422B04DF",hash_generated_method="E4595D1150620DB6A28E6C23D90EB3DE") @Override public int read() throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  int result=in.read();  pos++;  return result;}  }
class C{  public SaaSSystemException(String arg0){  super(arg0);  genId();}  }
class C{  public AbstractGeneralShape(){  this.modelPosition=Position.ZERO;}  }
class C{  public static final boolean sqAttacked(Position pos,int sq){  if (pos.whiteMove) {    if ((BitBoard.knightAttacks[sq] & pos.pieceTypeBB[Piece.BKNIGHT]) != 0)     return true;    if ((BitBoard.kingAttacks[sq] & pos.pieceTypeBB[Piece.BKING]) != 0)     return true;    if ((BitBoard.wPawnAttacks[sq] & pos.pieceTypeBB[Piece.BPAWN]) != 0)     return true;    long occupied=pos.whiteBB | pos.blackBB;    long bbQueen=pos.pieceTypeBB[Piece.BQUEEN];    if ((BitBoard.bishopAttacks(sq,occupied) & (pos.pieceTypeBB[Piece.BBISHOP] | bbQueen)) != 0)     return true;    if ((BitBoard.rookAttacks(sq,occupied) & (pos.pieceTypeBB[Piece.BROOK] | bbQueen)) != 0)     return true;  } else {    if ((BitBoard.knightAttacks[sq] & pos.pieceTypeBB[Piece.WKNIGHT]) != 0)     return true;    if ((BitBoard.kingAttacks[sq] & pos.pieceTypeBB[Piece.WKING]) != 0)     return true;    if ((BitBoard.bPawnAttacks[sq] & pos.pieceTypeBB[Piece.WPAWN]) != 0)     return true;    long occupied=pos.whiteBB | pos.blackBB;    long bbQueen=pos.pieceTypeBB[Piece.WQUEEN];    if ((BitBoard.bishopAttacks(sq,occupied) & (pos.pieceTypeBB[Piece.WBISHOP] | bbQueen)) != 0)     return true;    if ((BitBoard.rookAttacks(sq,occupied) & (pos.pieceTypeBB[Piece.WROOK] | bbQueen)) != 0)     return true;  }  return false;}  }
class C{  public void copyTexturesTo(Material material) throws TextureException {  int num=mTextureList.size();  for (int i=0; i < num; ++i)   material.addTexture(mTextureList.get(i));}  }
class C{  public static int runCommand(List<String> commands) throws Exception {  String command=commands.toString().replace(","," ");  System.out.println("Executing the following command \n" + command);  ProcessBuilder processBuilder=new ProcessBuilder(commands);  final Process process=processBuilder.start();  BufferedReader errorStream=new BufferedReader(new InputStreamReader(process.getErrorStream()));  BufferedReader outStream=new BufferedReader(new InputStreamReader(process.getInputStream()));  String errorLine;  StringBuilder errors=new StringBuilder();  String outLines;  while ((errorLine=errorStream.readLine()) != null) {    errors.append(errorLine).append("\n");  }  while ((outLines=outStream.readLine()) != null) {    System.out.println(outLines);  }  errorLine=errors.toString();  System.err.println(errorLine);  int exitStatus=process.exitValue();  if (exitStatus != 0 && errorLine != null && errorLine.isEmpty()) {    throw new RuntimeException(errorLine);  }  return exitStatus;}  }
class C{  public static boolean isContainerStopped(InspectContainerResponse.ContainerState state){  if (state.getRunning() || state.getPaused()) {    return false;  }  boolean hasStarted=isDockerTimestampNonEmpty(state.getStartedAt());  boolean hasFinished=isDockerTimestampNonEmpty(state.getFinishedAt());  return hasStarted && hasFinished;}  }
class C{  public void createUISharedContext(Context context){  if (session != null) {    uiContexts.put(context.getIndex(),context.duplicate());  }}  }
class C{  public void putIA5String(String s) throws IOException {  writeString(s,DerValue.tag_IA5String,"ASCII");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static IFilledList<ICallgraphView> loadModuleCallgraphs(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final ITagManager nodeTagManager,final ViewType viewType) throws CouldntLoadDataException {  PostgreSQLViewsLoader.checkArguments(provider,module,viewTagManager);  final String query="SELECT * FROM load_module_call_graphs(?, ?)";  try {    final CConnection connection=provider.getConnection();    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    statement.setObject(2,viewType == ViewType.Native ? "native" : "non-native",Types.OTHER);    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=PostgreSQLModuleViewsLoader.loadTags(connection,module,viewTagManager);    return new FilledList<ICallgraphView>(processQueryResults(resultSet,module,tags,nodeTagManager,provider,new ArrayList<CView>(),viewType,GraphType.CALLGRAPH));  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public static JsonElement parse(JsonReader reader) throws JsonParseException {  boolean isEmpty=true;  try {    reader.peek();    isEmpty=false;    return TypeAdapters.JSON_ELEMENT.read(reader);  } catch (  EOFException e) {    if (isEmpty) {      return JsonNull.INSTANCE;    }    throw new JsonSyntaxException(e);  }catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  @Override public void run(int connId,String[] args){  boolean doBlind=server.getGame().getOptions().booleanOption("double_blind");  int playerArg=server.isPassworded() ? 2 : 1;  if (!doBlind) {    server.sendServerChat(connId,"Double Blind rules not in effect.");    return;  }  if (server.isPassworded() && (args.length < 2 || !server.isPassword(args[1]))) {    server.sendServerChat(connId,"The password is incorrect.  " + "Usage: /seeall <password> <id#>");  } else   try {    int playerId;    String give_take;    boolean has_see_all;    if (args.length <= playerArg) {      playerId=connId;    } else {      playerId=Integer.parseInt(args[playerArg]);    }    has_see_all=server.getPlayer(playerId).getSeeAll();    if (has_see_all) {      give_take=" no longer has";    } else {      give_take=" has been granted";    }    if (playerId == connId) {      server.sendServerChat(server.getPlayer(playerId).getName() + give_take + " vision of the entire map");    } else {      server.sendServerChat(server.getPlayer(playerId).getName() + give_take + " vision of the entire map by "+ server.getPlayer(connId).getName());    }    server.getPlayer(playerId).setSeeAll(!has_see_all);    server.sendEntities(playerId);  } catch (  ArrayIndexOutOfBoundsException ex) {    server.sendServerChat("/seeall : seeall failed.  " + "Type /who for a list of players with id #s.");  }catch (  NumberFormatException ex) {    server.sendServerChat("/seeall : seeall failed.  " + "Type /who for a list of players with id #s.");  }catch (  NullPointerException ex) {    server.sendServerChat("/seeall : seeall failed.  " + "Type /who for a list of players with id #s.");  }}  }
class C{  public void testFilter() throws Exception {  Subcollection sc=new Subcollection(NutchConfiguration.create());  sc.setWhiteList("www.nutch.org\nwww.apache.org");  sc.setBlackList("jpg\nwww.apache.org/zecret/");  assertEquals("http://www.apache.org/index.html",sc.filter("http://www.apache.org/index.html"));  assertEquals(null,sc.filter("http://www.apache.org/zecret/index.html"));  assertEquals(null,sc.filter("http://www.apache.org/img/image.jpg"));  assertEquals(null,sc.filter("http://www.google.com/"));}  }
class C{  public static void throwAtomikosJMSException(String msg,Throwable cause) throws AtomikosJMSException {  LOGGER.logWarning(msg,cause);  throw new AtomikosJMSException(msg,cause);}  }
class C{  public UnauthorizedException(String message,Response response){  super(HttpStatus.UNAUTHORIZED,message,response);}  }
class C{  public ToStringBuilder reflectionAppendArray(Object array){  this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(),null,array);  return this;}  }
class C{  public static boolean needToUseAgent(){  return Properties.REPLACE_CALLS || Properties.VIRTUAL_FS || Properties.RESET_STATIC_FIELDS|| Properties.VIRTUAL_NET;}  }
class C{  @Override public void onBindViewHolder(VH holder,int position){  mItemManger.updateConvertView(holder,position);}  }
class C{  public DataMatrix glitterAnalysis(final DashboardAnalysis analysis,String key) throws ComputingException, InterruptedException {  final AnalysisCompute compute=new AnalysisCompute(analysis.getUniverse());  try {    return compute.computeAnalysis(analysis);  } catch (  ScopeException|SQLScopeException|RenderingException e) {    throw new ComputingException(e.getLocalizedMessage(),e);  }}  }
class C{  public void update(ListaDescrVO listaDescriptora){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,listaDescriptora.getId())).toString();  if (logger.isDebugEnabled())   logger.debug("Se va a modificar la lista descriptora: " + listaDescriptora);  updateVO(qual,TABLE_NAME,COLS_DEFS,listaDescriptora);}  }
class C{  public static boolean checkProjectName(String name){  return PROJECT_NAME.test(name);}  }
class C{  static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  throw new ComparisonFailure(message,expected,actual);}  }
class C{  public static long physToMem(float value,int cnvID){  return (cnvFactors[cnvID][cnvSystem].physToMem(value).longValue());}  }
class C{  public static boolean validateQualityFormatFlags(CFlags flags,String format){  if (format.equals(FASTQ_FORMAT)) {    if (!flags.isSet(CommonFlags.QUALITY_FLAG)) {      flags.setParseMessage("--" + CommonFlags.QUALITY_FLAG + " is required for \"fastq\" format.");      return false;    }  } else {    if (flags.isSet(CommonFlags.QUALITY_FLAG)) {      flags.setParseMessage("--" + CommonFlags.QUALITY_FLAG + " is only allowed for \"fastq\" format.");      return false;    }  }  return true;}  }
class C{  public void startHttpsServer() throws IOException, NoSuchAlgorithmException {  httpsServer=com.sun.net.httpserver.HttpsServer.create(new InetSocketAddress(0),0);  httpsServer.createContext("/test6614957/",new MyHandler());  httpsServer.setHttpsConfigurator(new HttpsConfigurator(SSLContext.getDefault()));  httpsServer.start();}  }
class C{  private void updateCellWidths(){  int oldCellWidth=cellWidth;  cellWidth=RHS_BORDER_WIDTH;  if (textArea != null) {    Font font=getFont();    if (font != null) {      FontMetrics fontMetrics=getFontMetrics(font);      int count=0;      int lineCount=textArea.getLineCount();      while (lineCount >= 10) {        lineCount=lineCount / 10;        count++;      }      cellWidth+=fontMetrics.charWidth('9') * (count + 1) + 5;    }  }  if (cellWidth != oldCellWidth) {    revalidate();  }}  }
class C{  public void addDescription(String description){  if (description == null || description.length() == 0)   return;  String descr=getDescription();  if (descr == null || descr.length() == 0)   setDescription(description); else   setDescription(descr + " - " + description);}  }
class C{  public void moveControlPoint(ControlPoint point){  moveControlPoint(point,null);}  }
class C{  public Vector3d mulDirection(Matrix4x3dc mat){  return mulDirection(mat,this);}  }
class C{  public StopWatch(){  setPadding(new Insets(5,15,5,15));  clear();  text.setFont(Font.font(30));  getChildren().add(text);  animation=new Timeline(new KeyFrame(Duration.millis(1000),null));  animation.setCycleCount(Timeline.INDEFINITE);}  }
class C{  public void addSelectionListener(final SelectionListener listener){  this.checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.listOfSelectionListeners.add(listener);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void addSubLabel(Comparable category,String label){  this.sublabels.put(category,label);}  }
class C{  protected void emit_S_Set_LessThanSignHyphenMinusKeyword_2_1_or_ValueKeyword_2_0(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void saveGraphVizInput(String strFileName){  String strInput=buildGraphVizInput();  File f=new File(strFileName);  FileOutputStream fos;  try {    fos=new FileOutputStream(f);    fos.write(strInput.getBytes());  } catch (  FileNotFoundException e) {    System.err.println("File " + f.getAbsolutePath() + " not found.");    e.printStackTrace();  }catch (  IOException e) {    System.err.println("IOException: " + e.getMessage());    e.printStackTrace();  }  saveLegendToFile(strFileName + ".legend.txt");  try {    File fDotExe=new File("dot");    if (fDotExe.canExecute()) {      String[] cmdarray={"dot","-Tpng","-o" + strFileName + ".png",strFileName};      Runtime.getRuntime().exec(cmdarray);    } else {      System.err.println("dot.exe is not accessible! Could not create png file.");    }  } catch (  IOException e) {    System.err.println("Could not run dot.exe on created dot input");    e.printStackTrace();  }}  }
class C{  protected double updateCloudetProcessingWithoutSchedulingFutureEvents(){  if (CloudSim.clock() > getLastProcessTime()) {    return updateCloudetProcessingWithoutSchedulingFutureEventsForce();  }  return 0;}  }
class C{  public static String normalizeMac(String mac) throws IllegalArgumentException {  mac=mac.replaceAll("[:-]","");  mac=mac.toLowerCase();  return mac;}  }
class C{  private void showAuthenticationError(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_authentication_failed),getResources().getString(R.string.button_ok),null);}  }
class C{  public SignatureData clone(){  SignatureData result=new SignatureData();  result.Algorithm=Algorithm;  result.Signature=Signature;  return result;}  }
class C{  private void showLatLonPicker(String geoUri){  final Intent intent=new Intent();  intent.setAction(Intent.ACTION_PICK);  final Uri parseUri=Uri.parse(geoUri);  intent.setData(parseUri);  intent.putExtra(EXTRA_TITLE,getString(R.string.geo_picker_title));  SelectedItems calculatedSelectedFotosIds=new SelectedItems();  GeoPickHistory history=getHistory();  if (history != null) {    history.addKeysTo(calculatedSelectedFotosIds);  }  if (mSelectedItems != null) {    calculatedSelectedFotosIds.addAll(Arrays.asList(mSelectedItems.getIds()));  }  if (calculatedSelectedFotosIds.size() > 0) {    intent.putExtra(EXTRA_SELECTED_ITEM_IDS,calculatedSelectedFotosIds.toString());  }  try {    this.startActivityForResult(intent,RESULT_ID);  } catch (  ActivityNotFoundException ex) {    Toast.makeText(this,R.string.geo_picker_err_not_found,Toast.LENGTH_LONG).show();  }}  }
class C{  public void angularObjectUpdate(AngularObject object){  sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.ANGULAR_OBJECT_UPDATE,gson.toJson(object)));}  }
class C{  public mxCell(Object value){  this(value,null,null);}  }
class C{  public String generateRecoverToken(String userEmail){  String uuid=UUID.randomUUID().toString();  storage.put(uuid,userEmail);  return uuid;}  }
class C{  public CommunicationException(String explanation){  super(explanation);}  }
class C{  public boolean isRequest(){  return is(REQUEST);}  }
class C{  public LocalRouteRepository(){  routes=new HashMap<String,Route>();}  }
class C{  public void updateNewUrlLoading(int pageTransType,boolean isRedirect,boolean hasUserGesture,long lastUserInteractionTime,int lastCommittedEntryIndex){  long prevNewUrlLoadingTime=mLastNewUrlLoadingTime;  mLastNewUrlLoadingTime=SystemClock.elapsedRealtime();  int pageTransitionCore=pageTransType & PageTransition.CORE_MASK;  boolean isNewLoadingStartedByUser=false;  boolean isFromIntent=pageTransitionCore == PageTransition.LINK && (pageTransType & PageTransition.FROM_API) != 0;  if (!isRedirect) {    if ((pageTransType & PageTransition.FORWARD_BACK) != 0) {      isNewLoadingStartedByUser=true;    } else     if (pageTransitionCore != PageTransition.LINK) {      isNewLoadingStartedByUser=true;    } else     if (prevNewUrlLoadingTime == INVALID_TIME || isFromIntent || lastUserInteractionTime > prevNewUrlLoadingTime) {      isNewLoadingStartedByUser=true;    }  }  if (isNewLoadingStartedByUser) {    if (isFromIntent && mInitialIntent != null) {      mInitialNavigationType=NAVIGATION_TYPE_FROM_INTENT;    } else {      clearIntentHistory();      if (pageTransitionCore == PageTransition.TYPED) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_USER_TYPING;      } else       if (pageTransitionCore == PageTransition.RELOAD || (pageTransType & PageTransition.FORWARD_BACK) != 0) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_RELOAD;      } else       if (pageTransitionCore == PageTransition.LINK && !hasUserGesture) {        mInitialNavigationType=NAVIGATION_TYPE_FROM_LINK_WITHOUT_USER_GESTURE;      } else {        mInitialNavigationType=NAVIGATION_TYPE_OTHER;      }    }    mIsOnEffectiveRedirectChain=false;    mLastCommittedEntryIndexBeforeStartingNavigation=lastCommittedEntryIndex;    mShouldNotOverrideUrlLoadingUntilNewUrlLoading=false;  } else   if (mInitialNavigationType != NAVIGATION_TYPE_NONE) {    mIsOnEffectiveRedirectChain=true;  }}  }
class C{  public static void clearAll(){  get().clear();  save();}  }
class C{  public CompiledScript compile(Reader script) throws ScriptException {  throw new Error("unimplemented");}  }
class C{  public void startLiteFragment(LiteFragment f){  mManager.addToBackStack(f);}  }
class C{  private static void updateAllUIs(){  Class uiClass=UIManager.getLookAndFeel().getClass();  if (uiClass.getPackage().equals(DesktopProperty.class.getPackage())) {    XPStyle.invalidateStyle();  }  Frame appFrames[]=Frame.getFrames();  for (  Frame appFrame : appFrames) {    updateWindowUI(appFrame);  }}  }
class C{  protected static int[] computePowers(int base,int numPowers){  int[] powers=new int[numPowers];  powers[0]=1;  for (int i=1; i < numPowers; i++) {    powers[i]+=base * powers[i - 1];  }  return powers;}  }
class C{  private void reorder(Entity entity,int newPosition){  RPSlot slot=entity.getContainerSlot();  if (slot.size() == 1) {    return;  }  newPosition=Math.min(newPosition,slot.size() - 1);  List<RPObject> objectsCopy=new ArrayList<RPObject>(slot.size());  for (  RPObject obj : slot) {    objectsCopy.add(obj);  }  int idx=objectsCopy.indexOf(entity);  if (idx == newPosition) {    return;  }  objectsCopy.remove(entity);  objectsCopy.add(newPosition,entity);  slot.clear();  for (  RPObject obj : objectsCopy) {    slot.addPreservingId(obj);  }  SlotOwner parent=entity.getContainerOwner();  if (parent instanceof Entity) {    ((Entity)parent).notifyWorldAboutChanges();  }}  }
class C{  public void generateCurrentQueueName(String currentQueueNamePrefix){  if (validateTestCreds()) {    ListQueuesResult list=sqs.listQueues(currentQueueNamePrefix);    for (    String url : list.getQueueUrls()) {      sqs.deleteQueue(url);    }  }  this.currentQueueName=currentQueueNamePrefix + System.currentTimeMillis();}  }
class C{  public OriginalDumpVersion(Timestamp timestamp){  pageIdRevMap=new HashMap<Integer,Long>();  disambiguations=new HashSet<Integer>();  textIdPageIdMap=new HashMap<Integer,Integer>();  pPageIdNameMap=new HashMap<Integer,String>();  cPageIdNameMap=new HashMap<Integer,String>();  pNamePageIdMap=new HashMap<String,Integer>();  cNamePageIdMap=new HashMap<String,Integer>();  rPageIdNameMap=new HashMap<Integer,String>();}  }
class C{  public String toString(){  return "RemoteUpdateVO[test=" + Test + "-"+ TableName+ "]";}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public void addAll(T... items){  ArrayList<T> values=this.mObjects;  for (  T item : items) {    values.add(item);  }  this.mObjects=values;}  }
class C{  @Override public void closeElement(){  current=current.getParentNode();}  }
class C{  public void testConsumeExpiredTopic() throws Exception {  MessageProducer producer=createProducer(timeToLive);  consumerDestination=session.createTopic(getConsumerSubject());  producerDestination=session.createTopic(getProducerSubject());  MessageConsumer consumer=createConsumer();  connection.start();  for (int i=0; i < data.length; i++) {    Message message=session.createTextMessage(data[i]);    message.setStringProperty("stringProperty",data[i]);    message.setIntProperty("intProperty",i);    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.debug("About to send a topic message: " + message + " with text: "+ data[i]);      }    }    producer.send(producerDestination,message);  }  Thread.sleep(timeToLive + 1000);  assertNull(consumer.receive(1000));}  }
class C{  protected StringBuffer renderOptions(StringBuffer sb,int width,Options options,int leftPad,int descPad){  final String lpad=createPadding(leftPad);  final String dpad=createPadding(descPad);  int max=0;  StringBuffer optBuf;  List prefixList=new ArrayList();  List optList=options.helpOptions();  Collections.sort(optList,getOptionComparator());  for (Iterator i=optList.iterator(); i.hasNext(); ) {    Option option=(Option)i.next();    optBuf=new StringBuffer(8);    if (option.getOpt() == null) {      optBuf.append(lpad).append("   " + defaultLongOptPrefix).append(option.getLongOpt());    } else {      optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());      if (option.hasLongOpt()) {        optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());      }    }    if (option.hasArg()) {      if (option.hasArgName()) {        optBuf.append(" <").append(option.getArgName()).append(">");      } else {        optBuf.append(' ');      }    }    prefixList.add(optBuf);    max=(optBuf.length() > max) ? optBuf.length() : max;  }  int x=0;  for (Iterator i=optList.iterator(); i.hasNext(); ) {    Option option=(Option)i.next();    optBuf=new StringBuffer(prefixList.get(x++).toString());    if (optBuf.length() < max) {      optBuf.append(createPadding(max - optBuf.length()));    }    optBuf.append(dpad);    int nextLineTabStop=max + descPad;    if (option.getDescription() != null) {      optBuf.append(option.getDescription());    }    renderWrappedText(sb,width,nextLineTabStop,optBuf.toString());    if (i.hasNext()) {      sb.append(defaultNewLine);    }  }  return sb;}  }
class C{  public static <T>T min(T[] self){  return min((Iterable<T>)toList(self));}  }
class C{  @RequestMapping(value="/stub/admin/collections/{collection_id}/collections",method=RequestMethod.GET) public ResponseEntity<?> subCollections(@PathVariable(value="collection_id") Long id){  try {    return new ResponseEntity<>(this.getSubCollectionsWithProductsIds(this.getCollection(id)),HttpStatus.OK);  } catch (  AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public static String someStaticMethod(TestModel instance,TestModel anotherInstance){  return "Blah";}  }
class C{  public int delMin(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  int min=pq[1];  exch(1,n--);  sink(1);  assert min == pq[n + 1];  qp[min]=-1;  keys[min]=null;  pq[n + 1]=-1;  return min;}  }
class C{  private static <T>T mergeValue(T first,T second){  return first == null ? second : first;}  }
class C{  public static boolean is17OrHigher(IJavaProject project){  return is17OrHigher(getSourceCompliance(project));}  }
class C{  public ConnectedEvent(Object source){  super(source,CONNECTED);}  }
class C{  private boolean isEmpty(String value){  if (value != null) {    return value.length() == 0;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CommentDTO(){  super();}  }
class C{  public Spider addPipeline(Pipeline pipeline){  checkIfRunning();  this.pipelines.add(pipeline);  return this;}  }
