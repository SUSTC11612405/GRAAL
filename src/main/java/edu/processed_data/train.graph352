class C{  public void readBytes(byte[] buff,int off,int len) throws IOException {  in.readFully(buff,off,len);}  }
class C{  public Container(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);  String slotName=get("slot_name");  if (slotName == null) {    slotName=DEFAULT_SLOT_NAME;  }  RPSlot slot=new ContainerItemSlot(DEFAULT_SLOT_NAME,slotName);  addSlot(slot);  determineSlotCapacity(slot);}  }
class C{  public static boolean isImageBigEnough(int width,int height,ResizeOptions resizeOptions){  if (resizeOptions == null) {    return getAcceptableSize(width) >= BitmapUtil.MAX_BITMAP_SIZE && getAcceptableSize(height) >= (int)BitmapUtil.MAX_BITMAP_SIZE;  } else {    return getAcceptableSize(width) >= resizeOptions.width && getAcceptableSize(height) >= resizeOptions.height;  }}  }
class C{  private StartupMode checkStartupMode(Configuration config) throws IOException {  StartupMode bootMode=checkStartupModeOnDisk(config);  if (bootMode != null) {    return bootMode;  }  if (checkConfigBool(config,Constants.STARTUPMODE_RESTORE_REINIT)) {    _log.info("Found geodbrestore config: {}",Constants.STARTUPMODE_RESTORE_REINIT);    GeodbRestoreMode mode=new GeodbRestoreMode(config);    mode.setCoordinator(_coordinator);    mode.setSchemaUtil(_schemaUtil);    mode.setDbDir(dbDir);    return mode;  }  if (checkConfigBool(config,Constants.REINIT_DB)) {    _log.info("Found reinit config: {}",Constants.REINIT_DB);    DbReinitMode mode=new DbReinitMode(config);    mode.setCoordinator(_coordinator);    mode.setSchemaUtil(_schemaUtil);    mode.setDbDir(dbDir);    return mode;  }  List<String> obsoletePeers=checkConfigList(config,Constants.OBSOLETE_CASSANDRA_PEERS);  if (!obsoletePeers.isEmpty()) {    ObsoletePeersCleanupMode mode=new ObsoletePeersCleanupMode(config);    mode.setCoordinator(_coordinator);    mode.setSchemaUtil(_schemaUtil);    mode.setObsoletePeers(obsoletePeers);    return mode;  } else {    NormalMode mode=new NormalMode(config);    mode.setCoordinator(_coordinator);    mode.setSchemaUtil(_schemaUtil);    return mode;  }}  }
class C{  public static ValueTimestampTimeZone fromDateValueAndNanos(long dateValue,long timeNanos,short timeZoneOffsetMins){  return (ValueTimestampTimeZone)Value.cache(new ValueTimestampTimeZone(dateValue,timeNanos,timeZoneOffsetMins));}  }
class C{  private boolean checkAndReset(Class<?> c){  try {    Method m=c.getMethod("randoop_checkAndReset");    m.setAccessible(true);    return (boolean)m.invoke(null);  } catch (  NoSuchMethodException e) {    throw new Error("Cannot find instrumentation method: " + e);  }catch (  SecurityException e) {    throw new Error("Security error when accessing instrumentation method: " + e);  }catch (  IllegalAccessException e) {    throw new Error("Cannot access instrumentation method: " + e);  }catch (  IllegalArgumentException e) {    throw new Error("Bad argument to instrumentation method: " + e);  }catch (  InvocationTargetException e) {    throw new Error("Bad invocation of instrumentation method: " + e);  }}  }
class C{  public void testDeleteIfExists() throws IOException {  InfoStreamListener stream=new InfoStreamListener("deleteIfExists");  Path dir=wrap(createTempDir(),stream);  Files.createFile(dir.resolve("foobar"));  Files.deleteIfExists(dir.resolve("foobar"));  assertTrue(stream.sawMessage());  Files.deleteIfExists(dir.resolve("foobar"));}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  private FacetResult drillDown() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  DrillDownQuery q=new DrillDownQuery(config);  q.add("Publish Date","2010");  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,q,10,fc);  Facets facets=new FastTaxonomyFacetCounts(taxoReader,config,fc);  FacetResult result=facets.getTopChildren(10,"Author");  indexReader.close();  taxoReader.close();  return result;}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  @Override public void dropBlockAsItemWithChance(World worldIn,BlockPos pos,IBlockState state,float chance,int fortune){  super.dropBlockAsItemWithChance(worldIn,pos,state,chance,fortune);}  }
class C{  public void removeValue(String key){  if (mEditor != null) {    mEditor.remove(key).commit();  }}  }
class C{  void createEdges(Integer[] v){  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[0],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[0],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[2]);  graph.addEdge(new Double(Math.random()),v[1],v[2]);}  }
class C{  private GridClientFactory(){}  }
class C{  public XPathExpressionException(Throwable cause){  super(cause);}  }
class C{  public NotificationChain basicSetExtendedRuntimeEnvironment(ExtendedRuntimeEnvironment newExtendedRuntimeEnvironment,NotificationChain msgs){  ExtendedRuntimeEnvironment oldExtendedRuntimeEnvironment=extendedRuntimeEnvironment;  extendedRuntimeEnvironment=newExtendedRuntimeEnvironment;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT,oldExtendedRuntimeEnvironment,newExtendedRuntimeEnvironment);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException ignored) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  Bundle bundle=new Bundle();  if (name != null && !name.isEmpty()) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        int phoneTypeColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && !number.isEmpty()) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          int type=phonesCursor.getInt(phoneTypeColumn);          bundle.putInt(Contents.PHONE_TYPE_KEYS[foundPhone],type);          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && !data.isEmpty()) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && !email.isEmpty()) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  public Ed25519GroupElement toCached(){  return this.toCoordinateSystem(CoordinateSystem.CACHED);}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  DHParameterSpec params;  if (key instanceof javax.crypto.interfaces.DHPublicKey) {    if (DHPublicKeySpec.class.isAssignableFrom(keySpec)) {      javax.crypto.interfaces.DHPublicKey dhPubKey=(javax.crypto.interfaces.DHPublicKey)key;      params=dhPubKey.getParams();      return keySpec.cast(new DHPublicKeySpec(dhPubKey.getY(),params.getP(),params.getG()));    } else     if (X509EncodedKeySpec.class.isAssignableFrom(keySpec)) {      return keySpec.cast(new X509EncodedKeySpec(key.getEncoded()));    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } else   if (key instanceof javax.crypto.interfaces.DHPrivateKey) {    if (DHPrivateKeySpec.class.isAssignableFrom(keySpec)) {      javax.crypto.interfaces.DHPrivateKey dhPrivKey=(javax.crypto.interfaces.DHPrivateKey)key;      params=dhPrivKey.getParams();      return keySpec.cast(new DHPrivateKeySpec(dhPrivKey.getX(),params.getP(),params.getG()));    } else     if (PKCS8EncodedKeySpec.class.isAssignableFrom(keySpec)) {      return keySpec.cast(new PKCS8EncodedKeySpec(key.getEncoded()));    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } else {    throw new InvalidKeySpecException("Inappropriate key type");  }}  }
class C{  public boolean isLast() throws SQLException {  int saveCursorPos=cursorPos;  int saveAbsoluteCursorPos=absolutePos;  boolean saveShowDeleted=getShowDeleted();  setShowDeleted(true);  internalLast();  if (cursorPos == saveCursorPos) {    setShowDeleted(saveShowDeleted);    return true;  } else {    setShowDeleted(saveShowDeleted);    cursorPos=saveCursorPos;    absolutePos=saveAbsoluteCursorPos;    return false;  }}  }
class C{  private static void checkTypeSafe(Collection<?> c){  try {    Role r;    for (    Object o : c)     r=(Role)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static <S extends HasDragResizeMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragResizeMoveEvent event=new DragResizeMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private CombinedDomainXYPlot createPlot(){  XYDataset data1=createDataset1();  XYItemRenderer renderer1=new StandardXYItemRenderer();  NumberAxis rangeAxis1=new NumberAxis("Range 1");  XYPlot subplot1=new XYPlot(data1,null,rangeAxis1,renderer1);  subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);  XYTextAnnotation annotation=new XYTextAnnotation("Hello!",50.0,10000.0);  annotation.setFont(new Font("SansSerif",Font.PLAIN,9));  annotation.setRotationAngle(Math.PI / 4.0);  subplot1.addAnnotation(annotation);  XYDataset data2=createDataset2();  XYItemRenderer renderer2=new StandardXYItemRenderer();  NumberAxis rangeAxis2=new NumberAxis("Range 2");  rangeAxis2.setAutoRangeIncludesZero(false);  XYPlot subplot2=new XYPlot(data2,null,rangeAxis2,renderer2);  subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  CombinedDomainXYPlot plot=new CombinedDomainXYPlot(new NumberAxis("Domain"));  plot.setGap(10.0);  plot.add(subplot1,1);  plot.add(subplot2,1);  plot.setOrientation(PlotOrientation.VERTICAL);  return plot;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.452 -0500",hash_original_method="C5A6CD560F9FCF717C5BAB266CC5E4CD",hash_generated_method="DC34FEB9C0F826D88D02DAD3B9F71847") public static int charToGsm(char c,boolean throwException) throws EncodeException {  int ret;  ret=sCharsToGsmTables[0].get(c,-1);  if (ret == -1) {    ret=sCharsToShiftTables[0].get(c,-1);    if (ret == -1) {      if (throwException) {        throw new EncodeException(c);      } else {        return sCharsToGsmTables[0].get(' ',' ');      }    } else {      return GSM_EXTENDED_ESCAPE;    }  }  return ret;}  }
class C{  @VisibleForTesting public static void saveCookies(CookieManager cookieManager,Path path){  List<HttpCookie> cookies=cookieManager.getCookieStore().getCookies();  List<JsonCookie> jsonCookies=cookies.stream().map(null).collect(toList());  try (BufferedWriter writer=Files.newBufferedWriter(path,CREATE)){    Files.setPosixFilePermissions(path,ImmutableSet.of(OWNER_READ,OWNER_WRITE));    writer.write(mapper.writeValueAsString(jsonCookies));  } catch (  IOException e) {    throw Throwables.propagate(e);  }}  }
class C{  public boolean checkFromTag(SIPResponse sipResponse){  String originalFromTag=((SIPRequest)this.getRequest()).getFromTag();  if (this.defaultDialog != null) {    if (originalFromTag == null ^ sipResponse.getFrom().getTag() == null) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("From tag mismatch -- dropping response");      return false;    }    if (originalFromTag != null && !originalFromTag.equalsIgnoreCase(sipResponse.getFrom().getTag())) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("From tag mismatch -- dropping response");      return false;    }  }  return true;}  }
class C{  public Boolean isIpmiSupported(){  return ipmiSupported;}  }
class C{  public boolean isNearlyEqualTo(IntVector v,double tolerance){  return Math.abs(v.x - x) < tolerance && Math.abs(v.y - y) < tolerance && Math.abs(v.z - z) < tolerance;}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public BreakStatement newBreakStatement(){  return new BreakStatement(this);}  }
class C{  private static boolean isLocalUdpPortFree(int port){  try {    DatagramConnection conn=NetworkRessourceManager.createDatagramConnection();    conn.open(port);    conn.close();    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public static void appendFieldValue(StringBuilder sb,String value,int length){  if (sb == null) {    String msg=Logging.getMessage("nullValue.StringBuilderIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length < 0) {    String msg=Logging.getMessage("generic.LengthIsInvalid",length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (value != null && value.length() > 0)   sb.append(value,0,value.length() < length ? value.length() : length);  for (int i=(value != null ? value.length() : 0); i < length; i++) {    sb.append(UNUSED_POSITION_CODE);  }}  }
class C{  public ArrayLongCompressed(long[] longs,int offset,int length){  long mask=0x0;  for (int i=0; i < length; i++) {    mask|=longs[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,longs[offset + i]);  }}  }
class C{  private boolean valueChangeTrigger(ActionEvent e){  boolean result=false;  Object obj=e.getSource();  String command=e.getActionCommand();  if (obj.getClass().getSimpleName().equalsIgnoreCase("JComboBox")) {    if (command.equalsIgnoreCase("comboBoxChanged"))     result=true;  } else {    result=true;  }  return result;}  }
class C{  public CodedExceptionWithHttpStatus(int status,String faultCode,String faultMessage){  super(faultCode,faultMessage);  this.status=status;}  }
class C{  private static ObjectMapper customizeObjectMapper(){  ObjectMapper mapper=new ObjectMapper();  mapper.registerModule(new Jdk8Module());  mapper.registerModule(new GuavaModule());  mapper.registerModule(new LogbackModule());  mapper.registerModule(new GuavaExtrasModule());  mapper.registerModule(new FuzzyEnumModule());  mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());  mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  return mapper;}  }
class C{  Cubic[] calcNaturalCubic(int n,int[] x){  float[] gamma=new float[n + 1];  float[] delta=new float[n + 1];  float[] D=new float[n + 1];  int i;  gamma[0]=1.0f / 2.0f;  for (i=1; i < n; i++) {    gamma[i]=1 / (4 - gamma[i - 1]);  }  gamma[n]=1 / (2 - gamma[n - 1]);  delta[0]=3 * (x[1] - x[0]) * gamma[0];  for (i=1; i < n; i++) {    delta[i]=(3 * (x[i + 1] - x[i - 1]) - delta[i - 1]) * gamma[i];  }  delta[n]=(3 * (x[n] - x[n - 1]) - delta[n - 1]) * gamma[n];  D[n]=delta[n];  for (i=n - 1; i >= 0; i--) {    D[i]=delta[i] - gamma[i] * D[i + 1];  }  Cubic[] C=new Cubic[n];  for (i=0; i < n; i++) {    C[i]=new Cubic((float)x[i],D[i],3 * (x[i + 1] - x[i]) - 2 * D[i] - D[i + 1],2 * (x[i] - x[i + 1]) + D[i] + D[i + 1]);  }  return C;}  }
class C{  public ProjectBuildException(Throwable cause){  super(cause);}  }
class C{  private void go(){  ((FrameLayout)this.getParent()).removeView(this);  int[] is=new int[origCards.size()];  for (int i=0; i < origCards.size(); i++)   is[i]=origCards.get(i);  top.handle(new Event(Event.EType.CARDORDER).setObject(new EventObject(is)));}  }
class C{  @Override public void onScroll(AbsListView view,int firstVisibleItem,int endFadeItem){  if (mTransparentEnabled && firstVisibleItem <= endFadeItem) {    View v=view.getChildAt(0);    int top=(v == null) ? 0 : v.getTop();    int delta=top + mEndFadePosition;    setTitleBarTranslate(interpolate(delta));  }}  }
class C{  public FixedClock(){  this(0L);}  }
class C{  public static InputStream istream(String f){  return istream(new File(f));}  }
class C{  public void onLoadTaskFinish(BitmapDrawable drawable,ImageLoadHandler handler){  mFlag&=~STATUS_LOADING;  if (null == handler) {    return;  }  int errorCode=mFlag & ERROR_CODE_MASK;  if (errorCode > 0) {    onLoadError(errorCode,handler);    return;  }  if (null != mImageTaskStatistics) {    mImageTaskStatistics.s5_beforeShow();  }  if (mFirstImageViewHolder == null) {    handler.onLoadFinish(this,null,drawable);  } else {    ImageViewHolder holder=mFirstImageViewHolder;    do {      final CubeImageView imageView=holder.getImageView();      if (null != imageView) {        imageView.onLoadFinish();        handler.onLoadFinish(this,imageView,drawable);      }    } while ((holder=holder.mNext) != null);  }  if (null != mImageTaskStatistics) {    mImageTaskStatistics.s6_afterShow(ImageProvider.getBitmapSize(drawable));    ImagePerformanceStatistics.onImageLoaded(this,mImageTaskStatistics);  }}  }
class C{  public void applyTemplates(Element element,String mode) throws Exception {  Mode mod=ruleManager.getMode(mode);  for (int i=0, size=element.nodeCount(); i < size; i++) {    Node node=element.node(i);    mod.fireRule(node);  }}  }
class C{  public static float popParameterFloat(){  return parametersFloat.pop();}  }
class C{  private static void quickSort(int[] data,final int start,final int end,IntegerComparator comp){  final int len=end - start;  final int last=end - 1;  if (len < INSERTION_THRESHOLD) {    insertionSort(data,start,end,comp);    return;  }  final int seventh=(len >> 3) + (len >> 6) + 1;  final int m3=(start + end) >> 1;  final int m2=m3 - seventh;  final int m1=m2 - seventh;  final int m4=m3 + seventh;  final int m5=m4 + seventh;  sort5(data,m1,m2,m3,m4,m5,comp);  final int lpivot=data[m2];  final int rpivot=data[m4];  data[m2]=data[start];  data[m4]=data[last];  final boolean tied=comp.compare(lpivot,rpivot) == 0;  int left=start + 1;  int right=last - 1;  for (int k=left; k <= right; k++) {    final int tmp=data[k];    final int c=comp.compare(tmp,lpivot);    if (c == 0) {      continue;    } else     if (c < 0) {      data[k]=data[left];      data[left]=tmp;      left++;    } else     if (tied || comp.compare(tmp,rpivot) > 0) {      while (true) {        final int tmp2=data[right];        if (comp.compare(tmp2,rpivot) > 0 && k < right) {          right--;        } else {          break;        }      }      data[k]=data[right];      data[right]=tmp;      right--;      if (comp.compare(data[k],lpivot) < 0) {        final int tmp2=data[k];        data[k]=data[left];        data[left]=tmp2;        left++;      }    }  }  data[start]=data[left - 1];  data[left - 1]=lpivot;  data[last]=data[right + 1];  data[right + 1]=rpivot;  quickSort(data,start,left - 1,comp);  if (!tied) {    quickSort(data,left,right + 1,comp);  }  quickSort(data,right + 2,end,comp);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Process execute(final List commands,final String[] envp,final File dir) throws IOException {  return Runtime.getRuntime().exec(stringify(commands),envp,dir);}  }
class C{  public synchronized void removeListener(Object listener){  if (listeners != null) {    listeners.remove(listener);  }}  }
class C{  protected void resultToJSON(JSONBuffer re,String name){  String[] parts=name.split("/");  Result cur=baseResult;  int partpos=0;{    for (; partpos < parts.length; partpos++) {      boolean found=false;      for (Hierarchy.Iter<Result> iter=hier.iterChildren(cur); iter.valid(); iter.advance()) {        Result child=iter.get();        if (child.getLongName().equals(parts[partpos]) || child.getShortName().equals(parts[partpos])) {          cur=child;          found=true;          break;        }      }      if (!found) {        break;      }    }    if (cur == null) {      re.appendKeyValue("error","result not found.");      return;    }  }  if (parts.length == partpos + 1 && "children".equals(parts[partpos])) {    re.appendKeyArray("children");    for (Hierarchy.Iter<Result> iter=hier.iterChildren(cur); iter.valid(); iter.advance()) {      Result child=iter.get();      re.startHash();      re.appendKeyValue("name",child.getShortName());      re.appendKeyValue("type",child.getClass().getSimpleName());      re.closeHash();    }    re.closeArray();    return;  }  if (cur instanceof Database && parts.length == partpos + 1) {    DBID id=stringToDBID(parts[partpos]);    if (id != null) {      bundleToJSON(re,id);      return;    } else {      re.appendKeyValue("error","Object not found");      return;    }  }  if (cur instanceof Relation && parts.length == partpos + 1) {    Relation<?> rel=(Relation<?>)cur;    DBID id=stringToDBID(parts[partpos]);    if (id != null) {      Object data=rel.get(id);      re.appendKeyValue("data",data);    } else {      re.appendKeyValue("error","Object not found");      return;    }  }  if (cur instanceof NeighborSetPredicate && parts.length == partpos + 1) {    NeighborSetPredicate pred=(NeighborSetPredicate)cur;    DBID id=stringToDBID(parts[partpos]);    if (id != null) {      DBIDs neighbors=pred.getNeighborDBIDs(id);      re.appendKeyValue("DBID",id);      re.appendKeyArray("neighbors");      for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {        re.appendString(iter.toString());      }      re.closeArray();      return;    } else {      re.appendKeyValue("error","Object not found");      return;    }  }  if (cur instanceof OutlierResult) {    OutlierResult or=(OutlierResult)cur;    if (parts.length >= partpos + 1) {      if ("table".equals(parts[partpos])) {        int offset=0;        int pagesize=100;        if (parts.length >= partpos + 2) {          offset=Integer.valueOf(parts[partpos + 1]);        }        if (parts.length >= partpos + 3) {          pagesize=Integer.valueOf(parts[partpos + 2]);        }        re.appendKeyHash("paging");        re.appendKeyValue("offset",offset);        re.appendKeyValue("pagesize",pagesize);        re.closeHash();        if (LOG.isDebuggingFiner()) {          re.appendNewline();        }        OutlierScoreMeta meta=or.getOutlierMeta();        outlierMetaToJSON(re,meta);        re.appendKeyArray("scores");        DoubleRelation scores=or.getScores();        DBIDIter iter=or.getOrdering().order(scores.getDBIDs()).iter();        for (int i=0; i < offset && iter.valid(); i++) {          iter.advance();        }        for (int i=0; i < pagesize && iter.valid(); i++, iter.advance()) {          re.startHash();          bundleToJSON(re,iter);          final double val=scores.doubleValue(iter);          if (!Double.isNaN(val)) {            re.appendKeyValue("score",val);          }          re.closeHash();        }        re.closeArray();        return;      }    }  }  re.appendKeyValue("error","unknown query");}  }
class C{  public ImageSharing shareImage(ContactId contact,Uri file) throws RcsServiceNotRegisteredException, RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    tryToGrantUriPermissionToStackServices(file);    IImageSharing sharingIntf=mApi.shareImage(contact,file);    if (sharingIntf != null) {      return new ImageSharing(sharingIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue06.class,args);}  }
class C{  @SuppressWarnings("unchecked") public void init(int[][] matrix){  f2e=new TreeSet[matrix[0].length - 1];  for (int i=0; i < f2e.length; ++i)   f2e[i]=new TreeSet<Integer>();  e2f=new TreeSet[matrix.length - 1];  for (int i=0; i < e2f.length; ++i)   e2f[i]=new TreeSet<Integer>();  for (int i=1; i < matrix.length; ++i)   for (int j=1; j < matrix[0].length; ++j)   if (matrix[i][j] != 0) {    e2f[i - 1].add(j - 1);    f2e[j - 1].add(i - 1);  }}  }
class C{  public void grabarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ServiceRepository servicios=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestorEstructuraDepositoBI depositoBI=servicios.lookupGestorEstructuraDepositoBI();  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  List listaUDocs=getListaUDocs(request);  List listaUDocsEliminadas=getListaUDocsEliminadas(request);  depositoBI.organizarUDocsEnUInst(listaUDocs,listaUDocsEliminadas,formulario.getSignaturaui());  setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.TRUE);  goBackExecuteLogic(mappings,form,request,response);}  }
class C{  public void rotateImage(RotateDegrees degrees){  int angle=degrees.getValue();  Matrix matrix=new Matrix();  matrix.postRotate(angle);  mBitmap=Bitmap.createBitmap(mBitmap,0,0,mBitmap.getWidth(),mBitmap.getHeight(),matrix,true);  setImageBitmap(mBitmap);}  }
class C{  public synchronized void selectNextPlayer(){  clientgui.getClient().sendNextPlayer();}  }
class C{  @Override public void valueChange(ValueChangeEvent e){  String name=e.getPropertyName();  Object value=e.getNewValue();  log.config(name + "=" + value);  if (value == null)   return;}  }
class C{  public static GraphRequest newStatusUpdateRequest(AccessToken accessToken,String message,Callback callback){  return newStatusUpdateRequest(accessToken,message,(String)null,null,callback);}  }
class C{  public HexCharset(boolean caps){  super(caps ? "HEX" : "hex",new String[]{"HEX"});  codes=caps ? codeHEX : codehex;}  }
class C{  public boolean isWin2000(){  return System.getProperty("os.name").indexOf("2000") >= 0;}  }
class C{  public int size(){  return patterns.size();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void preProcess() throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  m_ResultProducer.setResultListener(this);  m_ResultProducer.preProcess();}  }
class C{  void hide(){  ensureOldPopupsHidden();  if (painter != null) {    painter.clear();  }  setHideComponent(null,null);  inner=null;  row=-1;}  }
class C{  private String createAircraftSymbolCode(String country,String airportUse){  String identity;  if (friends.contains(country)) {    identity="F";  } else   if (neutrals.contains(country)) {    identity="N";  } else   if (hostiles.contains(country)) {    identity="H";  } else {    identity="U";  }  String type;switch (airportUse) {case Airport.MILITARY:case Airport.JOINT:    type="MF";  break;case Airport.CIVILIAN:case Airport.OTHER:type="CF";break;default :type="--";}return "S" + identity + "AP"+ type+ "----**"+ country+ "*";}  }
class C{  public GoogleRelayedCandidateDatagramSocket(GoogleRelayedCandidate relayedCandidate,GoogleTurnCandidateHarvest turnCandidateHarvest,String username) throws SocketException {  super((SocketAddress)null);  socketDelegate=new GoogleRelayedCandidateDelegate(turnCandidateHarvest,username);  this.relayedCandidate=relayedCandidate;  this.turnCandidateHarvest=turnCandidateHarvest;  logger.finest("Create new GoogleRelayedCandidateDatagramSocket");}  }
class C{  public List<String> all(String localName){  List<String> childrenText=new ArrayList<String>();  for (  Element child : children()) {    if (localName.equals(child.getLocalName()) && XCAL_NS.equals(child.getNamespaceURI())) {      String text=child.getTextContent();      childrenText.add(text);    }  }  return childrenText;}  }
class C{  public static NonNullRange intersection(NonNullRange first,NonNullRange second){  return new NonNullRange(Math.max(first.begin,second.begin),Math.min(first.end,second.end));}  }
class C{  public RenameVirtualMethodProcessor(IMethod method){  super(method);  fOriginalMethod=getMethod();}  }
class C{  public boolean isFinished(){  return mCursor.isAfterLast();}  }
class C{  public InlineMenuRowBuilder removeLast(){  List<InlineMenuButton> buttons=buttons();  if (buttons.size() != 0)   buttons.remove(buttons.size() - 1);  return this;}  }
class C{  public void handlePanRequest(Properties requestProperties,OutputStream out) throws IOException, MapRequestFormatException {  Proj projection=ImageServerUtils.createOMProjection(requestProperties,defaultProjection);  String contentType=HttpConnection.CONTENT_PLAIN;  String response;  float panAzmth;  try {    panAzmth=Float.parseFloat(requestProperties.getProperty(AZIMUTH));    projection.pan(panAzmth);  } catch (  Exception exc) {    Debug.output("MSH: Invalid Azimuth");  }  response=Math.round(projection.getCenter().getY() * 100.0) / 100.0 + ":" + Math.round(projection.getCenter().getX() * 100.0) / 100.0;  HttpConnection.writeHttpResponse(out,contentType,response);}  }
class C{  private boolean isSubViewExisting(ISubView subView,Class<?> subViewClass){  if (subViewClass.isInstance(subView)) {    return true;  } else   if (subView instanceof AbstractCompositeSubView) {    AbstractCompositeSubView compositeSubView=(AbstractCompositeSubView)subView;    for (    ISubView viewInCompositeSubView : compositeSubView.getSubViews()) {      if (isSubViewExisting(viewInCompositeSubView,subViewClass)) {        return true;      }    }  }  return false;}  }
class C{  public void testGetF3Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF3Momentary();  assertEquals(expResult,result);}  }
class C{  public URI expandURI(URI uri){  String node=uri.getHost();  _logger.debug("Expand uri: " + uri);  URI newUri=null;  if (uri.getHost().compareToIgnoreCase("localhost") == 0) {    return uri;  }  if (node.indexOf('.') > 0 || node.indexOf(':') > 0) {    return uri;  }  try {    String ip=getConnectableInternalAddress(node);    newUri=new URI(uri.getScheme(),uri.getUserInfo(),ip,uri.getPort(),uri.getPath(),uri.getQuery(),uri.getFragment());    _logger.debug("New expanded uri: " + newUri);  } catch (  Exception e) {    _logger.error("Failed expanding URI. ",e);    return uri;  }  return newUri;}  }
class C{  public static boolean contains(final double[] array,final double valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  @Override protected void onNfcStateDisabled(){  toast(getString(R.string.nfcAvailableDisabled));}  }
class C{  public static Collection<String> names(Flags flags){  final Collection<String> results=new ArrayList<String>();  if (flags.contains(Flags.Flag.ANSWERED)) {    results.add(ANSWERED_OUTPUT_CAPITALISED);  }  if (flags.contains(Flags.Flag.DELETED)) {    results.add(DELETED_OUTPUT_CAPITALISED);  }  if (flags.contains(Flags.Flag.DRAFT)) {    results.add(DRAFT_OUTPUT_CAPITALISED);  }  if (flags.contains(Flags.Flag.FLAGGED)) {    results.add(FLAGGED_OUTPUT_CAPITALISED);  }  if (flags.contains(Flags.Flag.RECENT)) {    results.add(RECENT_OUTPUT_CAPITALISED);  }  if (flags.contains(Flags.Flag.SEEN)) {    results.add(SEEN_OUTPUT_CAPITALISED);  }  String[] userFlags=flags.getUserFlags();  Collections.addAll(results,userFlags);  if (flags.contains(Flags.Flag.USER)) {    results.add(USER_OUTPUT_CAPITALISED);  }  return results;}  }
class C{  public boolean isAdAvailable(int position,int fetchedAdsCount){  if (fetchedAdsCount == 0)   return false;  int adIndex=getAdIndex(position);  int firstAdPos=getOffsetValue();  return position >= firstAdPos && adIndex >= 0 && adIndex < getLimitOfAds() && adIndex < fetchedAdsCount;}  }
class C{  protected void drawDrawingNonvolatileBuffered(Graphics2D g){  Rectangle vr=getVisibleRect();  Point shift=new Point(0,0);  if (bufferedArea.contains(vr) || bufferedArea.width >= vr.width && bufferedArea.height >= vr.height) {    shift.x=bufferedArea.x - vr.x;    shift.y=bufferedArea.y - vr.y;    if (shift.x > 0) {      dirtyArea.add(new Rectangle(bufferedArea.x - shift.x,vr.y,shift.x + bufferedArea.width - vr.width,bufferedArea.height));    } else     if (shift.x < 0) {      dirtyArea.add(new Rectangle(bufferedArea.x + vr.width,vr.y,-shift.x + bufferedArea.width - vr.width,bufferedArea.height));    }    if (shift.y > 0) {      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y - shift.y,bufferedArea.width,shift.y + bufferedArea.height - vr.height));    } else     if (shift.y < 0) {      dirtyArea.add(new Rectangle(vr.x,bufferedArea.y + vr.height,bufferedArea.width,-shift.y + bufferedArea.height - vr.height));    }    bufferedArea.x=vr.x;    bufferedArea.y=vr.y;  } else {    bufferedArea.setBounds(vr);    dirtyArea.setBounds(vr);    if (drawingBufferNV != null && (drawingBufferNV.getWidth() != vr.width || drawingBufferNV.getHeight() != vr.height)) {      drawingBufferNV.flush();      drawingBufferNV=null;    }  }  int valid=(drawingBufferNV == null) ? VolatileImage.IMAGE_INCOMPATIBLE : VolatileImage.IMAGE_OK;switch (valid) {case VolatileImage.IMAGE_INCOMPATIBLE:    try {      drawingBufferNV=getGraphicsConfiguration().createCompatibleImage(vr.width,vr.height,Transparency.TRANSLUCENT);    } catch (    OutOfMemoryError e) {      drawingBufferNV=null;    }  dirtyArea.setBounds(bufferedArea);break;}if (drawingBufferNV == null) {drawDrawing(g);return;}if (!dirtyArea.isEmpty()) {Graphics2D gBuf=drawingBufferNV.createGraphics();setViewRenderingHints(gBuf);gBuf.setComposite(AlphaComposite.Src);if (shift.x != 0 || shift.y != 0) {gBuf.copyArea(Math.max(0,-shift.x),Math.max(0,-shift.y),drawingBufferNV.getWidth() - Math.abs(shift.x),drawingBufferNV.getHeight() - Math.abs(shift.y),shift.x,shift.y);shift.x=shift.y=0;}gBuf.translate(-bufferedArea.x,-bufferedArea.y);gBuf.clip(dirtyArea);gBuf.setBackground(new Color(0x0,true));gBuf.clearRect(dirtyArea.x,dirtyArea.y,dirtyArea.width,dirtyArea.height);gBuf.setComposite(AlphaComposite.SrcOver);drawDrawing(gBuf);gBuf.dispose();}g.drawImage(drawingBufferNV,bufferedArea.x,bufferedArea.y,null);dirtyArea.setSize(-1,-1);}  }
class C{  public void combine(EvolutionState state,Fitness[] runs,Fitness finalFitness){  finalFitness.setToMeanOf(state,runs);}  }
class C{  private static void addFileSystemDetail1(StringSetMap filesystemInformation,FileShare filesystem,FileSystemObjectProperties key) throws Exception {  String value=PropertySetterUtil.extractValueFromStringSet(key.toString(),filesystemInformation);  PropertySetterUtil.addPropertyIntoObject(key,value,filesystem);}  }
class C{  @Override final public void ISTORE_0(){  Assertions.check(false);}  }
class C{  private void startConversion(String directory,String inputFile,String networkFile,String populationFile,String outputFile){  this.idPool=DgIdPool.readFromFile(directory + "id_conversions.txt");  this.idConverter=new DgIdConverter(idPool);  KS2015RouteXMLParser routeParser=new KS2015RouteXMLParser(this.idConverter);  routeParser.readFile(directory + inputFile);  this.btuComsWithRoutes=routeParser.getComsWithRoutes();  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  (new MatsimNetworkReader(scenario.getNetwork())).readFile(directory + networkFile);  this.network=scenario.getNetwork();  (new PopulationReader(scenario)).readFile(directory + populationFile);  this.population=scenario.getPopulation();  this.popWithRoutes=ScenarioUtils.createScenario(ConfigUtils.createConfig()).getPopulation();  convertAndAddRoutesToPlans();  MatsimWriter popWriter=new PopulationWriter(this.popWithRoutes,this.network);  popWriter.write(outputFile);  log.info("plans file with btu routes written to " + outputFile);}  }
class C{  public static void pairwiseMultiply(double[] a,double[] b,double[] result){  if (a.length != b.length) {    throw new RuntimeException();  }  for (int i=0; i < result.length; i++) {    result[i]=a[i] * b[i];  }}  }
class C{  private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {  if (blockSize_S < 1 || blockSize_L < 1) {    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + " or blockSize_L: "+ blockSize_L);  }  int s=r.read(blockSize_S);  int l=r.read(blockSize_L);  ByteArrayOutputStream output=new ByteArrayOutputStream();  for (int i=0; i < l; i++) {    output.write(r.readByte());  }  DiffPart part=new DiffPart(DiffAction.INSERT);  part.setStart(s);  part.setText(output.toString(WIKIPEDIA_ENCODING));  return part;}  }
class C{  public static boolean containsError(PsiElement element){  return PsiUtilCore.hasErrorElementChild(element);}  }
class C{  public GenericProxyFactory timeoutMillis(long timeoutMillis){  this.timeoutMillis=timeoutMillis;  return this;}  }
class C{  protected synchronized Map.Entry<String,byte[]> resolveIVConflict(File subdir,String filename){  logger.warn("Invalid sidecar file length detected, trying to resolve problem.");  Map.Entry<String,byte[]> ret=null;  if (filename.length() > IV_SIDECAR_FILE_LEN) {    try {      String part=filename.substring(0,IV_SIDECAR_FILE_LEN);      if ((ret=splitFilename(part)) == null) {        throw new Exception();      }      if (!Files.exists(Paths.get(subdir.getAbsolutePath() + File.separator + part))) {        Files.move(Paths.get(subdir.getAbsolutePath() + File.separator + filename),Paths.get(subdir.getAbsolutePath() + File.separator + part),StandardCopyOption.REPLACE_EXISTING);      }      File[] invalidIVs=subdir.listFiles(new CleanupIVFilter(part));      for (int j=0; j < invalidIVs.length; j++) {        Files.delete(invalidIVs[j].toPath());      }    } catch (    Exception e2) {      logger.error("Unable to resolve problem for potential sidecar file " + filename,e2);    }  } else {    logger.error("Unable to resolve problem for potential sidecar file " + filename);  }  return ret;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.734 -0500",hash_original_method="03A9192B11B1B736885F96C916CDF0FD",hash_generated_method="5B1061F01B494E85EEEDD7C8238270A5") public void close() throws IOException {  __client._closeOutputStream();}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    double[] tmp=new double[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  public void write(String message){  try {    m_fw.write(message);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void removeListener(final PropertyChangeListener listener){  pcs.removePropertyChangeListener(listener);}  }
class C{  public static Validator<String> regEx(Pattern pattern,BiFunction<String,StringRegExValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringRegExValidator.create(pattern),exception);}  }
class C{  int awaitTransmitComplete(long timeout,TimeUnit unit) throws Exception {  return Await.result(transmitComplete,Duration.fromTimeUnit(timeout,unit));}  }
class C{  public static void write(OutputStream stream,Instances data) throws Exception {  DataSink sink;  sink=new DataSink(stream);  sink.write(data);}  }
class C{  public void onReqAllOpenOrders(){}  }
class C{  public void invokeHookCleanup(){  for (  ITaskHook taskHook : taskHooks) {    taskHook.cleanup();  }}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:    return eInternalContainer().eInverseRemove(this,SGenPackage.FEATURE_TYPE__PARAMETERS,FeatureType.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public AttachmentView(Context context,AttributeSet attributeSet,int defaultStyle){  super(context,attributeSet,defaultStyle);}  }
class C{  private String tweakNativeLaunchUri(String uri,boolean forDebugging,LaunchInfo launchInfo) throws IOException, FileNotFoundException {  if (launchInfo.isHttpOrAbout()) {    boolean modify=(getPreference(PREF_URI_MODIFICATION) != 0);    if (modify && forDebugging && !launchInfo.isAbout()) {      uri=URLHelper.escapeSpace(uri);      URLHelper urlHelper=new URLHelper(uri);      Map<String,String> params=urlHelper.getParameterMap();      params.put("debug","true");      urlHelper.setParameterMap(params);      uri=urlHelper.getURL();    }  } else {    File f=null;    if (uri.startsWith("file:")) {      try {        f=new File(new URI(uri));      } catch (      URISyntaxException e) {        IOException ioe=new IOException(e.getMessage());        ioe.initCause(e);        throw ioe;      }    } else {      f=new File(uri);    }    if (f != null && f.exists()) {      uri=f.getAbsolutePath();    } else {      throw new FileNotFoundException(uri);    }  }  return uri;}  }
class C{  public boolean contains(File file,String fileContent){  if (exists(file)) {    String content=readFileContent(file);    return content != null && content.equals(fileContent);  }  return false;}  }
class C{  @Override protected boolean hasDisallowedEOL(){  return SemicolonInjectionHelper.hasDisallowedEOL(this);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean doHeartbeat(TungstenProperties props) throws Exception {  String initScript=properties.getString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT);  if (initScript != null)   props.setString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT,initScript);  return openReplicator.heartbeat(props);}  }
class C{  public SelectManyCollectionITCase(String name){  super(name);}  }
class C{  public static void updateBadgeCount(Context context,int badgeValue){  try {    mBadgeValue=badgeValue;    ShortcutBadger.setBadge(context,badgeValue);  } catch (  Exception e) {    Log.e(LOG_TAG,"## updateBadgeCount(): Exception Msg=" + e.getMessage());  }}  }
class C{  public final void testHashCodeEqualsObject(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue((c1.hashCode() == c2.hashCode()) && c1.equals(c2));  assertFalse(cert.equals(c1));}  }
class C{  public boolean isNullAllowed(){  return isNullAllowed;}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public String toCommandLine() throws Exception {  return toCommandLine(getDocument().getDocumentElement());}  }
class C{  private void checkNested(boolean registered) throws Exception {  startUp(registered);  cache1.put(1,new EnumHolder(EnumType.ONE));  validateNested(1,EnumType.ONE,registered);}  }
class C{  public String saveData(int m_WindowNo,Object date,IMiniTable payment,IMiniTable invoice,String trxName){  if (m_noInvoices + m_noPayments == 0)   return "";  int AD_Client_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_Client_ID");  int AD_Org_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_Org_ID");  int C_BPartner_ID=m_C_BPartner_ID;  int C_Order_ID=0;  int C_CashLine_ID=0;  Timestamp DateTrx=(Timestamp)date;  int C_Currency_ID=m_C_Currency_ID;  if (AD_Org_ID == 0) {    throw new AdempiereException("@Org0NotAllowed@");  }  log.config("Client=" + AD_Client_ID + ", Org="+ AD_Org_ID+ ", BPartner="+ C_BPartner_ID+ ", Date="+ DateTrx);  int pRows=payment.getRowCount();  ArrayList<Integer> paymentList=new ArrayList<Integer>(pRows);  ArrayList<BigDecimal> amountList=new ArrayList<BigDecimal>(pRows);  BigDecimal paymentAppliedAmt=Env.ZERO;  paymentList=payment.getSelectedKeys();  for (int i=0; i < pRows; i++) {    if (payment.isRowChecked(i)) {      BigDecimal PaymentAmt=(BigDecimal)payment.getValueAt(i,i_payment);      amountList.add(PaymentAmt);      paymentAppliedAmt=paymentAppliedAmt.add(PaymentAmt);      log.fine("C_Payment_ID=" + payment.getRowKey(i) + " - PaymentAmt="+ PaymentAmt);    }  }  log.config("Number of Payments=" + paymentList.size() + " - Total="+ paymentAppliedAmt);  int iRows=invoice.getRowCount();  MAllocationHdr alloc=new MAllocationHdr(Env.getCtx(),true,DateTrx,C_Currency_ID,Env.getContext(Env.getCtx(),"#AD_User_Name"),trxName);  alloc.setAD_Org_ID(AD_Org_ID);  alloc.saveEx();  int invoiceLines=0;  BigDecimal unmatchedApplied=Env.ZERO;  for (int i=0; i < iRows; i++) {    if (invoice.isRowChecked(i)) {      invoiceLines++;      int C_Invoice_ID=((IDColumn)invoice.getValueAt(i,invoice.getKeyColumnIndex())).getRecord_ID();      BigDecimal AppliedAmt=(BigDecimal)invoice.getValueAt(i,i_applied);      BigDecimal DiscountAmt=(BigDecimal)invoice.getValueAt(i,i_discount);      BigDecimal WriteOffAmt=(BigDecimal)invoice.getValueAt(i,i_writeOff);      BigDecimal OverUnderAmt=((BigDecimal)invoice.getValueAt(i,i_open)).subtract(AppliedAmt).subtract(DiscountAmt).subtract(WriteOffAmt);      log.config("Invoice #" + i + " - AppliedAmt="+ AppliedAmt);      for (int j=0; j < paymentList.size() && AppliedAmt.signum() != 0; j++) {        int C_Payment_ID=((Integer)paymentList.get(j)).intValue();        BigDecimal PaymentAmt=(BigDecimal)amountList.get(j);        if (PaymentAmt.signum() == AppliedAmt.signum()) {          log.config(".. with payment #" + j + ", Amt="+ PaymentAmt);          BigDecimal amount=AppliedAmt;          if (amount.abs().compareTo(PaymentAmt.abs()) > 0)           amount=PaymentAmt;          MAllocationLine aLine=new MAllocationLine(alloc,amount,DiscountAmt,WriteOffAmt,OverUnderAmt);          aLine.setDocInfo(C_BPartner_ID,C_Order_ID,C_Invoice_ID);          aLine.setPaymentInfo(C_Payment_ID,C_CashLine_ID);          aLine.saveEx();          DiscountAmt=Env.ZERO;          WriteOffAmt=Env.ZERO;          AppliedAmt=AppliedAmt.subtract(amount);          PaymentAmt=PaymentAmt.subtract(amount);          log.fine("Allocation Amount=" + amount + " - Remaining  Applied="+ AppliedAmt+ ", Payment="+ PaymentAmt);          amountList.set(j,PaymentAmt);        }      }      if (AppliedAmt.signum() == 0 && DiscountAmt.signum() == 0 && WriteOffAmt.signum() == 0)       continue; else {        int C_Payment_ID=0;        MAllocationLine aLine=new MAllocationLine(alloc,AppliedAmt,DiscountAmt,WriteOffAmt,OverUnderAmt);        aLine.setDocInfo(C_BPartner_ID,C_Order_ID,C_Invoice_ID);        aLine.setPaymentInfo(C_Payment_ID,C_CashLine_ID);        aLine.saveEx();        log.fine("Allocation Amount=" + AppliedAmt);        unmatchedApplied=unmatchedApplied.add(AppliedAmt);      }    }  }  for (int i=0; i < paymentList.size(); i++) {    BigDecimal payAmt=(BigDecimal)amountList.get(i);    if (payAmt.signum() == 0)     continue;    int C_Payment_ID=((Integer)paymentList.get(i)).intValue();    log.fine("Payment=" + C_Payment_ID + ", Amount="+ payAmt);    MAllocationLine aLine=new MAllocationLine(alloc,payAmt,Env.ZERO,Env.ZERO,Env.ZERO);    aLine.setDocInfo(C_BPartner_ID,0,0);    aLine.setPaymentInfo(C_Payment_ID,0);    aLine.saveEx();    unmatchedApplied=unmatchedApplied.subtract(payAmt);  }  if (m_C_Charge_ID > 0 && unmatchedApplied.compareTo(Env.ZERO) != 0) {    BigDecimal chargeAmt=totalDiff;    MAllocationLine aLine=new MAllocationLine(alloc,chargeAmt.negate(),Env.ZERO,Env.ZERO,Env.ZERO);    aLine.set_CustomColumn("C_Charge_ID",m_C_Charge_ID);    aLine.setC_BPartner_ID(m_C_BPartner_ID);    if (!aLine.save(trxName)) {      log.log(Level.SEVERE,"Allocation Line not saved - Charge=" + m_C_Charge_ID);    }    unmatchedApplied=unmatchedApplied.add(chargeAmt);  }  if (unmatchedApplied.signum() != 0)   log.log(Level.SEVERE,"Allocation not balanced -- out by " + unmatchedApplied);  if (alloc.get_ID() != 0) {    if (!alloc.processIt(DocAction.ACTION_Complete))     throw new AdempiereException("Cannot complete allocation: " + alloc.getProcessMsg());    alloc.saveEx();  }  for (int i=0; i < iRows; i++) {    if (invoice.isRowChecked(i)) {      int C_Invoice_ID=((IDColumn)invoice.getValueAt(i,invoice.getKeyColumnIndex())).getRecord_ID();      String sql="SELECT invoiceOpen(C_Invoice_ID, 0) " + "FROM C_Invoice WHERE C_Invoice_ID=?";      BigDecimal open=DB.getSQLValueBD(trxName,sql,C_Invoice_ID);      if (open != null && open.signum() == 0) {        sql="UPDATE C_Invoice SET IsPaid='Y' " + "WHERE C_Invoice_ID=" + C_Invoice_ID;        int no=DB.executeUpdate(sql,trxName);        log.config("Invoice #" + i + " is paid - updated="+ no);      } else       log.config("Invoice #" + i + " is not paid - "+ open);    }  }  for (int i=0; i < paymentList.size(); i++) {    int C_Payment_ID=((Integer)paymentList.get(i)).intValue();    MPayment pay=new MPayment(Env.getCtx(),C_Payment_ID,trxName);    if (pay.testAllocation())     pay.saveEx();    log.config("Payment #" + i + (pay.isAllocated() ? " not" : " is")+ " fully allocated");  }  paymentList.clear();  amountList.clear();  return alloc.getDocumentNo();}  }
class C{  public RedirectException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public boolean isChanged(){  if (m_change) {    ListItem listitem=lstLocator.getSelectedItem();    MLocator l=(MLocator)listitem.getValue();    if (l != null)     return l.getM_Locator_ID() == m_M_Locator_ID;  }  return m_change;}  }
class C{  public void deleteTag(final Tag tag) throws CouldntDeleteException {  Preconditions.checkNotNull(tag,"Error: Tag argument can not be null");  try {    m_manager.deleteTag(tag.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public synchronized OMDist<OMGeometry> findClosest(double x,double y,float limit,boolean resetSelect){  OMDist<OMGeometry> omd=new OMDist<OMGeometry>();  float currentDistance=Float.MAX_VALUE;  if (!isVisible()) {    omd.omg=null;  } else {    if (resetSelect)     deselect();    currentDistance=_distance(x,y);  }  if (currentDistance < limit) {    omd.omg=this;    omd.d=currentDistance;  }  return omd;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Set<List<String>> parse(String[] args){  int numOfFields=Integer.parseInt(args[2]);  Set<List<String>> wisbValues=new HashSet<>();  int i=3 + numOfFields;  while (i < args.length) {    List<String> fields=new ArrayList<>();    for (int j=0; j < numOfFields; j++) {      fields.add(args[i + j]);    }    wisbValues.add(fields);    i+=numOfFields;  }  return wisbValues;}  }
class C{  public void testEmptyString(){  int[] zeroArray=new int[0];  IntegerConverter intConverter=new IntegerConverter();  checkArray("Empty String",zeroArray,new ArrayConverter(int[].class,intConverter,-1).convert(int[].class,""));  assertEquals("Default String",null,new ArrayConverter(int[].class,intConverter).convert(String.class,null));}  }
class C{  private ReplaceTokens createLogLevelToken(){  ReplaceTokens.Token tokenLogLevel=new ReplaceTokens.Token();  tokenLogLevel.setKey(TOKEN_KEY_LOGLEVEL);  String logLevel=getPropertyValue(GeneralPropertySet.LOGGING);  String joLogLevel;  if (LoggingLevel.LOW.equalsLevel(logLevel)) {    joLogLevel="1";  } else   if (LoggingLevel.HIGH.equalsLevel(logLevel)) {    joLogLevel="5";  } else {    joLogLevel="2";  }  tokenLogLevel.setValue(joLogLevel);  ReplaceTokens replacePort=new ReplaceTokens();  replacePort.addConfiguredToken(tokenLogLevel);  return replacePort;}  }
class C{  public void update(SimulationThread agentThread){  if (agentThread.isCanceled()) {    frame.setStatus("Task canceled.");    isPrepared=false;  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    frame.setStatus("Task completed.");  }}  }
class C{  protected FunctionNode unary(final SimpleNode node,final URI functionURI) throws VisitorException {  return new FunctionNode(functionURI,null,new ValueExpressionNode[]{left(node)});}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    super.restoreState(stateInXml);  } catch (  Exception e) {  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  RestorableSupport.StateObject screenPointStateObj=restorableSupport.getStateObject("screenPoint");  if (screenPointStateObj != null) {    Double xState=restorableSupport.getStateValueAsDouble(screenPointStateObj,"x");    Double yState=restorableSupport.getStateValueAsDouble(screenPointStateObj,"y");    if (xState != null && yState != null)     setScreenPoint(new Point(xState.intValue(),yState.intValue()));  }}  }
class C{  public static Color fromBGR(final int blue,final int green,final int red) throws IllegalArgumentException {  return new Color(red,green,blue);}  }
class C{  public final void moveLast() throws BasicException {  saveData();  if (m_bd.getSize() > 0) {    baseMoveTo(m_bd.getSize() - 1);  }}  }
class C{  public boolean sendNoOp() throws IOException {  return FTPReply.isPositiveCompletion(noop());}  }
class C{  public E removeLast(){  if (size == 0)   return null; else   if (size == 1) {    Node<E> temp=head;    head=tail=null;    size=0;    return temp.element;  } else {    Node<E> current=head;    for (int i=0; i < size - 2; i++)     current=current.next;    Node<E> temp=tail;    tail=current;    tail.next=null;    size--;    return temp.element;  }}  }
class C{  protected boolean isEnabledAllowed(){  if (getParent() == null) {    return true;  }  Boolean value=getParent().getOverrides().getEnabled(this);  return (value == null) ? true : value.booleanValue();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DistTxPrecommitResponse val,ReplySender replySender) throws RemoteOperationException {  Assert.assertTrue(recipient != null,"DistTXPhaseOneCommitReplyMessage NULL reply message");  DistTXPrecommitReplyMessage m=new DistTXPrecommitReplyMessage(processorId,val);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  public synchronized static WorkflowStateConstant toStateConstant(String name){  WorkflowStateConstant c=constantPool.get(name.intern());  if (c == null)   throw new RuntimeException("Unknown state constant: " + name);  return c;}  }
class C{  public TypeScriptBrowserInformationControlInput(TypeScriptBrowserInformationControlInput previous,String html,int leadingImageWidth){  super(previous);  Assert.isNotNull(html);  fHtml=html;  fLeadingImageWidth=leadingImageWidth;}  }
class C{  public void toEPL(StringWriter writer){  writer.append("@");  writer.append(name);  if (attributes.isEmpty()) {    return;  }  if (attributes.size() == 1) {    if (attributes.get(0).getName() == null || attributes.get(0).getName().equals("value")) {      writer.append("(");      toEPL(writer,attributes.get(0).getValue());      writer.append(")");      return;    }  }  String delimiter="";  writer.append("(");  for (  AnnotationAttribute attribute : attributes) {    if (attribute.getValue() == null) {      return;    }    writer.append(delimiter);    writer.append(attribute.getName());    writer.append("=");    toEPL(writer,attribute.getValue());    delimiter=",";  }  writer.append(")");}  }
class C{  public void visitAutomatonProduction(Nonterminal a,AutomatonProduction p){  try {    Automaton automaton=p.getAutomaton();    RE newRE=AutomataUtil.convertAutomata(automaton);    newRE.meta=(String)automaton.getInfo();    addTerm(newRE);  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  public int flags(){  return Integer.parseInt(fields[8]);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(10);  format((getYear() + 1900),4,sb);  sb.append('-');  format((getMonth() + 1),2,sb);  sb.append('-');  format(getDate(),2,sb);  return sb.toString();}  }
class C{  public boolean equals(Object object){  boolean isEqual=false;  if (object instanceof DefineFont1 && super.equals(object)) {    DefineFont1 defineFont=(DefineFont1)object;    if (equals(defineFont.fontInfo,this.fontInfo) && Arrays.equals(defineFont.glyphShapeTable,this.glyphShapeTable)) {      isEqual=true;    }  }  return isEqual;}  }
class C{  public SQLNonTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private DocTax[] loadTaxes(){  ArrayList<DocTax> list=new ArrayList<DocTax>();  String sql="SELECT it.C_Tax_ID, t.Name, t.Rate, it.TaxBaseAmt, it.TaxAmt, t.IsSalesTax " + "FROM C_Tax t, C_InvoiceTax it " + "WHERE t.C_Tax_ID=it.C_Tax_ID AND it.C_Invoice_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,getTrxName());    pstmt.setInt(1,get_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Tax_ID=rs.getInt(1);      String name=rs.getString(2);      BigDecimal rate=rs.getBigDecimal(3);      BigDecimal taxBaseAmt=rs.getBigDecimal(4);      BigDecimal amount=rs.getBigDecimal(5);      boolean salesTax="Y".equals(rs.getString(6));      DocTax taxLine=new DocTax(C_Tax_ID,name,rate,taxBaseAmt,amount,salesTax);      log.fine(taxLine.toString());      list.add(taxLine);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return null;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  DocTax[] tl=new DocTax[list.size()];  list.toArray(tl);  return tl;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private void checkDuplicateNamesDuringAdd(Entity entity){  if (duplicateNameHash.get(entity.getShortName()) == null) {    duplicateNameHash.put(entity.getShortName(),new Integer(1));  } else {    int count=duplicateNameHash.get(entity.getShortName()).intValue();    count++;    duplicateNameHash.put(entity.getShortName(),new Integer(count));    entity.duplicateMarker=count;    entity.generateShortName();    entity.generateDisplayName();  }}  }
class C{  private void showSubMenus(ViewGroup viewGroup){  if (viewGroup == null)   return;  int childCount=viewGroup.getChildCount();  for (int i=0; i < childCount; i++) {    View view=viewGroup.getChildAt(i);    animateViewDirection(view,mScreenHeight,0,mTension,mFriction);  }}  }
class C{  private void makeRequest(WebTarget target) throws StageException {  hasher=HF.newHasher();  final Invocation.Builder invocationBuilder=target.request().property(OAuth1ClientSupport.OAUTH_PROPERTY_ACCESS_TOKEN,authToken).headers(resolveHeaders());  if (conf.requestBody != null && !conf.requestBody.isEmpty() && conf.httpMethod != HttpMethod.GET) {    final String requestBody=bodyEval.eval(bodyVars,conf.requestBody,String.class);    hasher.putString(requestBody,Charset.forName(conf.dataFormatConfig.charset));    response=invocationBuilder.method(conf.httpMethod.getLabel(),Entity.json(requestBody));  } else {    response=invocationBuilder.method(conf.httpMethod.getLabel());  }  currentParameterHash=hasher.hash().toString();}  }
class C{  private boolean isVisibleOf(View view){  return view.getVisibility() == View.VISIBLE;}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public void testBug21544() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testBug21544","(foo_id INT NOT NULL, stuff LONGTEXT, PRIMARY KEY (foo_id))","INNODB");  Connection infoSchemConn=null;  Properties props=new Properties();  props.setProperty("useInformationSchema","true");  props.setProperty("jdbcCompliantTruncation","false");  infoSchemConn=getConnectionWithProps(props);  try {    this.rs=infoSchemConn.getMetaData().getColumns(null,null,"testBug21544",null);    while (this.rs.next()) {      this.rs.getInt("COLUMN_SIZE");    }  }  finally {    if (infoSchemConn != null) {      infoSchemConn.close();    }  }}  }
class C{  @Override protected void entityInit(){  if (wrapped != null) {    wrapped.events.publish(new Stateful.LoadEvent());    prevPosX=posX;    prevPosY=posY;    prevPosZ=posZ;    prevRotationYaw=rotationYaw;    prevRotationPitch=rotationPitch;    setPosition(posX,posY,posZ);  }}  }
class C{  @SuppressWarnings({"deprecation"}) public static void throwExceptionAlt(Throwable throwable){  if (throwable instanceof RuntimeException) {    throw (RuntimeException)throwable;  }  Thread.currentThread().stop(throwable);}  }
class C{  public static XContentBuilder contentBuilder(XContentType type) throws IOException {  if (type == XContentType.JSON) {    return JsonXContent.contentBuilder();  } else   if (type == XContentType.SMILE) {    return SmileXContent.contentBuilder();  } else   if (type == XContentType.YAML) {    return YamlXContent.contentBuilder();  } else   if (type == XContentType.CBOR) {    return CborXContent.contentBuilder();  }  throw new IllegalArgumentException("No matching content type for " + type);}  }
class C{  public void testNumberOfGeneratedTokens(){  String s;  String[] result;  s="HOWEVER, the egg only got larger and larger, and more and more human";  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{s});    assertEquals("number of tokens differ (1)",13,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }  s="The planet Mars, I scarcely need remind the reader, revolves about the sun at a mean distance of 140,000,000 miles";  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{s});    assertEquals("number of tokens differ (2)",19,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }}  }
class C{  public static Image createFromRGB(int[] argb,int width,int height,boolean jpeg){  Image i=Image.createImage(argb,width,height);  ImageIO io=ImageIO.getImageIO();  if (io != null) {    String format;    if (jpeg) {      if (!io.isFormatSupported(ImageIO.FORMAT_JPEG)) {        return i;      }      format=ImageIO.FORMAT_JPEG;    } else {      if (!io.isFormatSupported(ImageIO.FORMAT_PNG)) {        return i;      }      format=ImageIO.FORMAT_PNG;    }    try {      ByteArrayOutputStream bo=new ByteArrayOutputStream();      io.save(i,bo,format,0.9f);      Util.cleanup(bo);      EncodedImage enc=EncodedImage.create(bo.toByteArray());      enc.width=width;      enc.height=height;      if (jpeg) {        enc.opaque=true;        enc.opaqueChecked=true;      }      enc.cache=Display.getInstance().createSoftWeakRef(i);      return enc;    } catch (    IOException err) {      err.printStackTrace();    }  }  return i;}  }
class C{  public CHelpSaveFormattedField(final DefaultFormatterFactory factory,final IHelpInformation information){  super(factory);  m_information=information;}  }
class C{  private double prediction(Instance inst){  double[] normalizedInstance=normalizedInstance(inst);  double normalizedPrediction=prediction(normalizedInstance);  return denormalizedPrediction(normalizedPrediction);}  }
class C{  protected PrimitiveTypeImpl(){  super();}  }
class C{  public Builder tag(String tag){  this.tag=tag;  return this;}  }
class C{  public void putOctetString(byte[] octets) throws IOException {  write(DerValue.tag_OctetString,octets);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  public InviteSnackbarBuilder withDelay(int seconds){  this.mDelay=seconds;  return this;}  }
class C{  public BufferedImageCachableRed(BufferedImage bi){  super((CachableRed)null,new Rectangle(bi.getMinX(),bi.getMinY(),bi.getWidth(),bi.getHeight()),bi.getColorModel(),bi.getSampleModel(),bi.getMinX(),bi.getMinY(),null);  this.bi=bi;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  int requested=zzBuffer.length - zzEndRead - zzFinalHighSurrogate;  int totalRead=0;  while (totalRead < requested) {    int numRead=zzReader.read(zzBuffer,zzEndRead + totalRead,requested - totalRead);    if (numRead == -1) {      break;    }    totalRead+=numRead;  }  if (totalRead > 0) {    zzEndRead+=totalRead;    if (totalRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;        if (totalRead == 1) {          return true;        }      }    }    return false;  }  return true;}  }
class C{  public final double infoGain(){  return m_infoGain;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public static Label createLabel(Composite parent,String text,Font font,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(font);  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.357 -0500",hash_original_method="3559A91588B2C9F9707F9FC4DC3F7539",hash_generated_method="BDC5422584671C8096A4799FA99AA589") public void queryAvailableBandMode(Message response){  RILRequest rr=RILRequest.obtain(RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE,response);  if (RILJ_LOGD)   riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));  send(rr);}  }
class C{  @Override public IBinder onBind(Intent intent){  return mMessenger.getBinder();}  }
class C{  private static Map<String,String> asMap(final Iterable<String> args){  final Map<String,String> map=new HashMap<>(0);  final Pattern ptn=Pattern.compile("--([a-z\\-]+)(=.+)?");  for (  final String arg : args) {    final Matcher matcher=ptn.matcher(arg);    if (!matcher.matches()) {      throw new IllegalStateException(String.format("can't parse this argument: '%s'",arg));    }    final String value=matcher.group(2);    if (value == null) {      map.put(matcher.group(1),"");    } else {      map.put(matcher.group(1),value.substring(1));    }  }  return map;}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  super.startElement(elementNamespaceURI,elementLocalName,elementName);}  }
class C{  public SimpleArrayMap(SimpleArrayMap map){  this();  if (map != null) {    putAll(map);  }}  }
class C{  private void unsubscribe(){  Log.i(TAG,"Unsubscribing.");  Nearby.Messages.unsubscribe(mGoogleApiClient,mMessageListener);}  }
class C{  public static String escapeLdapFilter(final String input){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < input.length(); i++) {    char curChar=input.charAt(i);switch (curChar) {case '\\':      sb.append("\\5c");    break;case '*':  sb.append("\\2a");break;case '(':sb.append("\\28");break;case ')':sb.append("\\29");break;case '\u0000':sb.append("\\00");break;default :sb.append(curChar);}}return sb.toString();}  }
class C{  protected MetaBuilder(final ItemMeta meta){  this.meta=meta.clone();}  }
class C{  public static void createElement(SOAPElement parent,String name,String value) throws Exception {  parent.addChildElement(name).setTextContent(value);}  }
class C{  public boolean isOffer(){  return (DOCSUBTYPESO_Proposal.equals(getDocSubTypeSO()) || DOCSUBTYPESO_Quotation.equals(getDocSubTypeSO())) && DOCBASETYPE_SalesOrder.equals(getDocBaseType());}  }
class C{  public void test_serviceAlias(){  final URI serviceURI1=new URIImpl("http://www.bigdata.com/myService/" + getName() + "/"+ UUID.randomUUID());  final URI serviceURI2=new URIImpl("http://www.bigdata.com/myService2/" + getName() + "/"+ UUID.randomUUID());  final RemoteServiceOptions options=new RemoteServiceOptions();  final RemoteServiceFactoryImpl serviceFactory=new RemoteServiceFactoryImpl(options);  try {    assertNull(ServiceRegistry.getInstance().get(serviceURI1));    assertNull(ServiceRegistry.getInstance().get(serviceURI2));    ServiceRegistry.getInstance().add(serviceURI1,serviceFactory);    assertNotNull(ServiceRegistry.getInstance().get(serviceURI1));    assertNull(ServiceRegistry.getInstance().get(serviceURI2));    assertTrue(serviceFactory == ServiceRegistry.getInstance().get(serviceURI1));    try {      ServiceRegistry.getInstance().addAlias(serviceURI1,serviceURI1);      fail("Expecting: " + IllegalStateException.class);    } catch (    IllegalStateException ex) {      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);    }    ServiceRegistry.getInstance().addAlias(serviceURI1,serviceURI2);    assertNotNull(ServiceRegistry.getInstance().get(serviceURI1));    assertNotNull(ServiceRegistry.getInstance().get(serviceURI2));    assertTrue(serviceFactory == ServiceRegistry.getInstance().get(serviceURI1));    assertTrue(serviceFactory == ServiceRegistry.getInstance().get(serviceURI2));    try {      ServiceRegistry.getInstance().addAlias(serviceURI1,serviceURI2);      fail("Expecting: " + IllegalStateException.class);    } catch (    IllegalStateException ex) {      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);    }  }  finally {    ServiceRegistry.getInstance().remove(serviceURI1);    ServiceRegistry.getInstance().remove(serviceURI2);  }  assertNull(ServiceRegistry.getInstance().get(serviceURI1));  assertNull(ServiceRegistry.getInstance().get(serviceURI2));  try {    ServiceRegistry.getInstance().addAlias(serviceURI1,serviceURI2);  }  finally {    ServiceRegistry.getInstance().remove(serviceURI2);  }}  }
class C{  CSVValue addValue(String column,String value){  CSVValue v=new CSVValue();  v.setValue(value);  columns.put(column,new SimpleObjectProperty<>(v));  return v;}  }
class C{  public String optionsTipTextHTML(){  return "<html><ul><li>No options for this renderer</li></ul></html>";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.SEQUENCE__ELEMENTS:    return elements != null && !elements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean isSetSyncValueResponse(){  return this.syncValueResponse != null;}  }
class C{  @Override public synchronized boolean isClosed(){  return !CloseableReference.isValid(mBufRef);}  }
class C{  synchronized ParameterDatabase _getLocation(String parameter){  if (parameter == null)   return null;  if (checked)   return null;  checked=true;  String result=getProperty(parameter);  if (result == null) {    int size=parents.size();    ParameterDatabase loc=null;    for (int x=0; x < size; x++) {      loc=((ParameterDatabase)(parents.elementAt(x)))._getLocation(parameter);      if (loc != null) {        return loc;      }    }    return null;  } else   return this;}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInMonths(int intervalInMonths){  validateInterval(intervalInMonths);  this.interval=intervalInMonths;  this.intervalUnit=IntervalUnit.MONTH;  return this;}  }
class C{  public void addListener(final IProcessListener listener){  listeners.addListener(listener);}  }
class C{  public ByteArrayList(int initialCapacity){  this(new byte[initialCapacity]);  setSizeRaw(0);}  }
class C{  protected long __getCategoryHibernateId(int pageID){  long hibernateID=-1;  if (idMapCategories.containsKey(pageID)) {    return idMapCategories.get(pageID);  }  Session session=this.__getHibernateSession();  session.beginTransaction();  Object retObjectPage=session.createQuery("select cat.id from Category as cat where cat.pageId = :pageId").setParameter("pageId",pageID,IntegerType.INSTANCE).uniqueResult();  session.getTransaction().commit();  if (retObjectPage != null) {    hibernateID=(Long)retObjectPage;    idMapCategories.put(pageID,hibernateID);  }  return hibernateID;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attreffectivevalue.class,args);}  }
class C{  public Dimension compute(int rectWidth,int rectHeight,int containerWidth,int containerHeight){  if (rectWidth < 0) {    String message=Logging.getMessage("generic.InvalidWidth",rectWidth);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (rectHeight < 0) {    String message=Logging.getMessage("generic.InvalidHeight",rectHeight);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (containerWidth < 0) {    String message=Logging.getMessage("generic.InvalidWidth",containerWidth);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (containerHeight < 0) {    String message=Logging.getMessage("generic.InvalidHeight",containerHeight);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double aspectRatio;  if (rectHeight != 0)   aspectRatio=(double)rectWidth / rectHeight; else   aspectRatio=0;  String xMode=this.getWidthMode();  String yMode=this.getHeightMode();  double width, height;  if (NATIVE_DIMENSION.equals(xMode) && NATIVE_DIMENSION.equals(yMode) || NATIVE_DIMENSION.equals(xMode) && MAINTAIN_ASPECT_RATIO.equals(yMode) || MAINTAIN_ASPECT_RATIO.equals(xMode) && NATIVE_DIMENSION.equals(yMode) || MAINTAIN_ASPECT_RATIO.equals(xMode) && MAINTAIN_ASPECT_RATIO.equals(yMode)) {    width=rectWidth;    height=rectHeight;  } else   if (MAINTAIN_ASPECT_RATIO.equals(xMode)) {    height=computeSize(this.heightParam,this.heightUnits,containerHeight);    width=height * aspectRatio;  } else   if (MAINTAIN_ASPECT_RATIO.equals(yMode)) {    width=computeSize(this.widthParam,this.widthUnits,containerWidth);    if (aspectRatio != 0)     height=width / aspectRatio; else     height=0;  } else {    if (NATIVE_DIMENSION.equals(xMode))     width=rectWidth; else     width=computeSize(this.widthParam,this.widthUnits,containerWidth);    if (NATIVE_DIMENSION.equals(yMode))     height=rectHeight; else     height=computeSize(this.heightParam,this.heightUnits,containerHeight);  }  return new Dimension((int)width,(int)height);}  }
class C{  public static double gaussian(){  double r, x, y;  do {    x=uniform(-1.0,1.0);    y=uniform(-1.0,1.0);    r=x * x + y * y;  } while (r >= 1 || r == 0);  return x * Math.sqrt(-2 * Math.log(r) / r);}  }
class C{  static public JSONArray parse(String source){  try {    return new JSONArray(new JSONTokener(source));  } catch (  Exception e) {    return null;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void windowOpened(WindowEvent e){}  }
class C{  @Override public Integer put(Float key,Integer value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public static MLAlgorithmEvaluator newMLAlgorithmEvaluator(MLAlgorithm algorithm) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  return (MLAlgorithmEvaluator)Class.forName(algorithm.getEvaluator()).newInstance();}  }
class C{  static float linearToDB(float linear){  float dB=(float)(Math.log((double)((linear == 0.0) ? 0.0001 : linear)) / Math.log(10.0) * 20.0);  return dB;}  }
class C{  public void backToPaymentProductScreen(View view){  this.finish();}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public Map loadXPathEList(final String filename){  BufferedReader br=null;  try {    if (!(new File(filename)).exists()) {      System.out.println("Elist (" + filename + ") doesn't exist -- exclude list turned off");    }    br=new BufferedReader(new FileReader(filename));    String line;    String regEx=null;    while ((line=br.readLine()) != null) {      _xpathEList.put(line.trim(),null);    }  } catch (  IOException ex) {    ex.printStackTrace();  } finally {    if (br != null) {      try {        br.close();      } catch (      Exception ex) {      }      br=null;    }  }  return _xpathEList;}  }
class C{  public void traverseChildren(Consumer<List<ParseTreeNode>> consumer){  if (children != null && !children.isEmpty()) {    consumer.accept(children);    children.forEach(null);  }}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  public boolean hasCollections(){  return super.hasElement(Collection.KEY);}  }
class C{  public Vector3f crossLocal(float otherX,float otherY,float otherZ){  float tempx=(y * otherZ) - (z * otherY);  float tempy=(z * otherX) - (x * otherZ);  z=(x * otherY) - (y * otherX);  x=tempx;  y=tempy;  return this;}  }
class C{  public boolean visit(ReplaceEdit edit){  return visitNode(edit);}  }
class C{  public static void initialize(Context context){  if (instance == null) {    AndroidPermissionService androidPermissionService=new AndroidPermissionService();    IntentProvider intentProvider=new IntentProvider();    instance=new DexterInstance(context,androidPermissionService,intentProvider);  }}  }
class C{  private static OFActionSetDlSrc decode_set_src_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetDlSrc();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public boolean isProductPurchased(String productIdentifier){  return purchasedProductIdentifiers.contains(productIdentifier);}  }
class C{  private int nextAvailableIdx(Collection<Integer> startedGrids,int maxTopSize,Random rnd){  while (true) {    int idx=rnd.nextInt(maxTopSize);    if (!startedGrids.contains(idx))     return idx;  }}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  return m_weights[attribute];}  }
class C{  private boolean isTouchExplorationEnabled(){  android.view.accessibility.AccessibilityManager accessibilityManager=getAccessibilityManager();  return accessibilityManager.isTouchExplorationEnabled();}  }
class C{  @SuppressWarnings("UnusedReturnValue") public long addNoteAndSync(String content){  DBNote note=new DBNote(0,0,Calendar.getInstance(),NoteUtil.generateNoteTitle(content),content,DBStatus.LOCAL_EDITED);  long id=addNote(note);  getNoteServerSyncHelper().scheduleSync(true);  return id;}  }
class C{  protected static float value(Object element){  return ((Number)element).floatValue();}  }
class C{  public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void stateChanged(ChangeEvent e){}  }
class C{  public void writeAlignment(int length) throws IOException {  out.write(ZERO_PADDING,0,(4 - length) & 3);}  }
class C{  private ByExpressionBuilder parseBy(){  ByExpressionBuilder by=new ByExpressionBuilder();  int x=_parseIndex;  Token token=scanToken();  if (token == null)   throw new IllegalStateException(L.l("expected field name at {0} in {1}",x,_method.getName()));  do {switch (token) {case IDENTIFIER:{        StringBuilder sb=new StringBuilder();        sb.append(_lexeme);        while (peekToken() == Token.IDENTIFIER) {          token=scanToken();          sb.append(_lexeme);        }        String term=fieldTerm(sb.toString());        by.addField(term);        break;      }case AND:{      by.addAnd();      break;    }case EQ:case NE:case LT:case LE:case GT:case GE:  by.term(token);break;case GREATER:{if (peekToken() == Token.THAN) {  scanToken();  by.term(Token.GT);} else if (peekToken() == Token.EQ) {  scanToken();  by.term(Token.GE);} else {  by.term(Token.GT);}break;}case LESS:{if (peekToken() == Token.THAN) {scanToken();by.term(Token.LT);} else if (peekToken() == Token.EQ) {scanToken();by.term(Token.LE);} else {by.term(Token.LT);}break;}case NOT:{if (peekToken() == Token.EQ) {scanToken();by.term(Token.NE);} else {by.term(Token.NE);}break;}case OR:{by.addOr();break;}default :{throw new IllegalStateException(_method.getName());}}} while ((token=scanToken()) != Token.EOF);return by;}  }
class C{  public void add(T object){  add(object,1);}  }
class C{  @Override public void updateClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  public boolean hasConsumesMismatch(){  return !this.partialMatches.stream().filter(null).findAny().isPresent();}  }
class C{  public void callObjectAsync(String key,Callback<JSObject> callback){  callAsync(key,callback);}  }
class C{  public final CC pad(String pad){  setPadding(pad != null ? ConstraintParser.parseInsets(pad,false) : null);  return this;}  }
class C{  public static String toCsvString(Object... elements){  StringBuilder line=new StringBuilder();  int last=elements.length - 1;  for (int i=0; i < elements.length; i++) {    if (elements[i] == null) {      if (i != last) {        line.append(FIELD_SEPARATOR);      }      continue;    }    String field=elements[i].toString();    int ndx=field.indexOf(FIELD_SEPARATOR);    if (ndx == -1) {      ndx=field.indexOf(FIELD_QUOTE);    }    if (ndx == -1) {      if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) {        ndx=1;      }    }    if (ndx == -1) {      ndx=StringUtil.indexOfChars(field,SPECIAL_CHARS);    }    if (ndx != -1) {      line.append(FIELD_QUOTE);    }    field=StringUtil.replace(field,StringPool.QUOTE,DOUBLE_QUOTE);    line.append(field);    if (ndx != -1) {      line.append(FIELD_QUOTE);    }    if (i != last) {      line.append(FIELD_SEPARATOR);    }  }  return line.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    nodeMap=docType.getNotations();    assertNotNull("notationsNotNull",nodeMap);    newNode=nodeMap.getNamedItem("notation1");    assertNotNull("notationNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  public void listAllTables() throws IOException, ServiceException {  TableFeed feed=service.getFeed(tablesFeedUrl,TableFeed.class);  for (  TableEntry entry : feed.getEntries()) {    printTable(entry);  }  if (feed.getEntries().size() == 0) {    out.println("No tables yet!  Use the table demo to create one.");  }}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 4) {    Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());    MatsimNetworkReader matsimNetworkReader=new MatsimNetworkReader(scenario.getNetwork());    matsimNetworkReader.readFile(args[0]);    Network network=scenario.getNetwork();    if (args[1].equals("-l"))     changePropertiesPerLinkCSVFile(network,args[2]); else     if (args[1].equals("-g"))     changePropertiesGroupLinksCSVFile(network,args[2]);    NetworkWriter networkWriter=new NetworkWriter(network);    networkWriter.write(args[3]);  }}  }
class C{  public void registerDataSent(long platformIdent){  AgentStatusData agentStatusData=agentStatusDataMap.get(platformIdent);  if (null != agentStatusData) {    agentStatusData.setLastDataSendTimestamp(System.currentTimeMillis());  }}  }
class C{  private UUID createMaxTimeUUID(long maxTime){  long time;  long timeToUse=(maxTime * 10000) + 0x01b21dd213814000L + 9999;  time=timeToUse << 32;  time|=(timeToUse & 0xFFFF00000000L) >> 16;  time|=0x1000 | ((timeToUse >> 48) & 0x0FFF);  return new UUID(time,0xffffffffffffffffL);}  }
class C{  public void windowClosed(WindowEvent e){  ((WindowListener)a).windowClosed(e);  ((WindowListener)b).windowClosed(e);}  }
class C{  @Override public void clearInitiative(boolean bUseInitComp){  getInitiative().clear();  TurnOrdered.rollInitiative(players,bUseInitComp);}  }
class C{  public static boolean beenDone(TimeUnit timeUnit,long amount,String tag){  return beenDone(timeUnit,amount,tag,moreThan(0));}  }
class C{  public StrTokenizer(char[] input,char delim){  this(input);  setDelimiterChar(delim);}  }
class C{  public Chunk(int position,List<T> lines){  this.position=position;  this.lines=lines;}  }
class C{  public static Shape generatePolygon(int sides,int outsideRadius,boolean normalize){  return generatePolygon(sides,outsideRadius,0,normalize);}  }
class C{  public boolean isNews(){  Object oo=get_Value(COLUMNNAME_IsNews);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List<Type> updateMockedMethods() throws ConstructionFailedException {  logger.debug("Executing updateMockedMethods. Parameter size: " + parameters.size());  List<Type> list=new ArrayList<>();  assert !super.parameters.contains(null);  assert mockedMethods.size() == methodParameters.size();  List<VariableReference> copy=new ArrayList<>(super.parameters);  assert copy.size() == super.parameters.size();  super.parameters.clear();  mockedMethods.clear();  Map<String,int[]> mpCopy=new LinkedHashMap<>();  List<MethodDescriptor> executed=listener.getCopyOfMethodDescriptors();  int mdIndex=0;  for (  MethodDescriptor md : executed) {    mockedMethods.add(md);    if (!md.shouldBeMocked() || md.getCounter() == 0) {      mpCopy.put(md.getID(),null);      continue;    }    int added=0;    logger.debug("Method called on mock object: " + md.getMethod());    int[] minMax=methodParameters.get(md.getID());    int existingParameters;    if (minMax == null) {      minMax=new int[]{-1,-1};      existingParameters=0;    } else {      assert minMax[1] >= minMax[0] && minMax[0] >= 0;      assert minMax[1] < copy.size() : "Max=" + minMax[1] + " but n="+ copy.size();      existingParameters=1 + (minMax[1] - minMax[0]);    }    assert existingParameters <= Properties.FUNCTIONAL_MOCKING_INPUT_LIMIT;    if (existingParameters > md.getCounter()) {      minMax[1]-=(existingParameters - md.getCounter());    }    if (existingParameters > 0) {      for (int i=minMax[0]; i <= minMax[1]; i++) {        super.parameters.add(copy.get(i));        added++;      }    }    if (existingParameters < md.getCounter()) {      for (int i=existingParameters; i < md.getCounter() && i < Properties.FUNCTIONAL_MOCKING_INPUT_LIMIT; i++) {        GenericClass calleeClass=new GenericClass(retval.getGenericClass());        Type returnType=md.getGenericMethodFor(calleeClass).getGeneratedType();        assert !returnType.equals(Void.TYPE);        logger.debug("Return type: " + returnType + " for retval "+ retval.getGenericClass());        list.add(returnType);        super.parameters.add(null);        added++;      }    }    minMax[0]=mdIndex;    minMax[1]=(mdIndex + added - 1);    assert minMax[1] >= minMax[0] && minMax[0] >= 0;    assert super.parameters.size() == minMax[1] + 1;    mpCopy.put(md.getID(),minMax);    mdIndex+=added;  }  methodParameters.clear();  methodParameters.putAll(mpCopy);  for (  MethodDescriptor md : mockedMethods) {    if (!methodParameters.containsKey(md.getID())) {      methodParameters.put(md.getID(),null);    }  }  return list;}  }
class C{  public void updateLine(float lat_1,float lon_1,int x1,int y1,int x2,int y2,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkLine.write(lat_1,lon_1,x1,y1,x2,y2,properties,link.dos);}  }
class C{  private static void verifyGetRectPointDistance(S2LatLngRect a,S2LatLng p){  S1Angle distance1=bruteForceRectPointDistance(a,p.normalized());  S1Angle distance2=a.getDistance(p.normalized());  assertEquals(distance1.radians(),distance2.radians(),1e-10);}  }
class C{  public static void clear(int WindowNo,Container c,String ParseString,boolean condition){  if (!condition)   return;  clear(WindowNo,c,ParseString);  if (WindowNo == 0)   log.log(Level.SEVERE,"WIndowNo == 0");}  }
class C{  public synchronized void removeBatchClustererListener(BatchClustererListener cl){  m_batchClustererListeners.remove(cl);}  }
class C{  private boolean noContainment(GPNode inner1,GPNode inner2){  GPNodeParent current=inner1;  while (current != null && current instanceof GPNode) {    if (current == inner2)     return false;    current=((GPNode)current).parent;  }  current=inner2;  while (current != null && current instanceof GPNode) {    if (current == inner1)     return false;    current=((GPNode)current).parent;  }  return true;}  }
class C{  public void finalize(){}  }
class C{  public byte[] toByteArray(){  ByteBuffer buff=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  writeTo(buff);  return buff.array();}  }
class C{  public static double asinh(double value){  boolean negateResult=false;  if (value < 0.0) {    value=-value;    negateResult=true;  }  double result;  if (value < ASINH_LOG1P_THRESHOLD) {    final double x=value;    final double x2=x * x;    final double argLog1p=x * (1 + 0.5 * x * (1 + (0.5 - 1) / 2 * x2 * (1 + (0.5 - 2) / 3 * x2 * (1 + (0.5 - 3) / 4 * x2 * (1 + (0.5 - 4) / 5 * x2)))));    result=log1p(argLog1p);  } else   if (value < ASINH_ACOSH_SQRT_ELISION_THRESHOLD) {    result=log(value + sqrt(value * value + 1.0));  } else {    result=LOG_2 + log(value);  }  return negateResult ? -result : result;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public DesktopIconPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  public void scale(float scaleX,float scaleY,float scaleZ){  transformMatrix.scale(scaleX,scaleY,scaleZ);  matrixDirty=true;}  }
class C{  public void cancel(){  if (mAnimator != null && mAnimator.isRunning()) {    mAnimator.cancel();  }  if (mTimer != null) {    mTimer.cancel();    mTimer.purge();    cleanupAnimation();  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public DailyTimeIntervalScheduleBuilder withInterval(int timeInterval,IntervalUnit unit){  if (unit == null || !(unit.equals(IntervalUnit.SECOND) || unit.equals(IntervalUnit.MINUTE) || unit.equals(IntervalUnit.HOUR)))   throw new IllegalArgumentException("Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).");  validateInterval(timeInterval);  this.interval=timeInterval;  this.intervalUnit=unit;  return this;}  }
class C{  public void pause(){  if (isPaused)   return;  oldAnimationInterval_=animationInterval_;  setAnimationInterval(1 / 4.0);  isPaused=true;}  }
class C{  @GET @Path("") @ApiOperation(value="Get all Dimensions for the Domain (including child dimensions).") public List<Dimension> readAll(@PathParam("projectId") String projectId,@PathParam("domainId") String domainId) throws ComputingException, InterruptedException {  return delegate.readAll(userContext,new DomainPK(userContext.getCustomerId(),projectId,domainId));}  }
class C{  private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final int lastBottom=getScrollChildBottom();    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    final int firstTop=getScrollChildTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      tryOffsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        int newFirstTop=getScrollChildTop();        fillUp(mFirstPosition - 1,getFillChildTop());        adjustViewsUpOrDown();      }    }  }}  }
class C{  public void write(int b) throws IOException {  cache[cachePosition]=(byte)b;  cachePosition++;  if (cachePosition == cache.length)   flushCache();}  }
class C{  void skip(){  if (index < chars.length)   index++;}  }
class C{  private static void classifyExpr(LiveExprNode ln,OSExprPem pem){  if (ln instanceof LNEven) {    LiveExprNode ln1=((LNEven)ln).getBody();    if (ln1 instanceof LNAll) {      LiveExprNode ln2=((LNAll)ln1).getBody();      if (ln2.getLevel() < 3) {        pem.EAAction.addElement(ln2);        return;      }    }  } else   if (ln instanceof LNAll) {    LiveExprNode ln1=((LNAll)ln).getBody();    if (ln1 instanceof LNEven) {      LiveExprNode ln2=((LNEven)ln1).getBody();      int level=ln2.getLevel();      if (level <= 1) {        pem.AEState.addElement(ln2);        return;      }      if (level == 2) {        pem.AEAction.addElement(ln2);        return;      }    }  }  if (ln.containAction()) {    Assert.fail(EC.TLC_LIVE_WRONG_FORMULA_FORMAT);  }  pem.tfs.addElement(ln);}  }
class C{  @ConstructorProperties({"outsideBorder","insideBorder"}) public CompoundBorder(Border outsideBorder,Border insideBorder){  this.outsideBorder=outsideBorder;  this.insideBorder=insideBorder;}  }
class C{  private String readCatalog(String input) throws SAXException, IOException, ParserConfigurationException, DOMException, XPathExpressionException, RemoteRepositoryException {  _log.debug("Reading catalog: {}",input);  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();  dbFactory.setExpandEntityReferences(false);  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();  Document doc=dBuilder.parse(new InputSource(new StringReader(input)));  XPath xPath=XPathFactory.newInstance().newXPath();  Element downloadUpdatesElement=(Element)xPath.compile("//downloadUpdatesOUT").evaluate(doc,XPathConstants.NODE);  if (null == downloadUpdatesElement) {    throw SyssvcException.syssvcExceptions.remoteRepoError(MessageFormat.format("Invalid catalog recieved from {0} catalog: {1}",_repo,input));  }  String hasErrors=downloadUpdatesElement.getElementsByTagName("hasErrors").item(0).getTextContent();  if (Boolean.parseBoolean(hasErrors)) {    String errorMessage=downloadUpdatesElement.getElementsByTagName("errorString").item(0).getTextContent();    throw SyssvcException.syssvcExceptions.remoteRepoError(MessageFormat.format("Error receiving catalog from {0} error: {1}",_repo,errorMessage));  }  String encodedCatalog=downloadUpdatesElement.getElementsByTagName("encodedXML").item(0).getTextContent();  return new String(Base64.decodeBase64(encodedCatalog.getBytes("UTF-8")),"UTF-8");}  }
class C{  public JCTree.JCCompilationUnit parse(JavaFileObject filename){  JavaFileObject prev=log.useSource(filename);  try {    JCTree.JCCompilationUnit t=parse(filename,readSource(filename));    if (t.endPositions != null)     log.setEndPosTable(filename,t.endPositions);    return t;  }  finally {    log.useSource(prev);  }}  }
class C{  public void reset(){  index=0;  isFull=false;}  }
class C{  protected SVGOMStyleElement(){}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value){  try {    this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));  } catch (  IOException e) {    throw new IllegalArgumentException("error encoding value: " + e);  }}  }
class C{  public DifferentialEvolution(int dim,int popSize){  dimension=dim;  populationSize=popSize;  numFun=0;  currentPopulation=new double[populationSize][dimension];  nextPopulation=new double[populationSize][dimension];  costs=new double[populationSize];  trialVector=new double[dimension];  numr=3;  r=new int[numr];}  }
class C{  public int compareTo(MutableDouble anotherMutableDouble){  double thisVal=this.d;  double anotherVal=anotherMutableDouble.d;  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));}  }
class C{  public Shape transform(Shape shape){  GeneralPath newPath=new GeneralPath();  float[] coords=new float[6];  for (PathIterator iterator=shape.getPathIterator(null); iterator.isDone() == false; iterator.next()) {    int type=iterator.currentSegment(coords);switch (type) {case PathIterator.SEG_MOVETO:      Point2D p=transform(new Point2D.Float(coords[0],coords[1]));    newPath.moveTo((float)p.getX(),(float)p.getY());  break;case PathIterator.SEG_LINETO:p=transform(new Point2D.Float(coords[0],coords[1]));newPath.lineTo((float)p.getX(),(float)p.getY());break;case PathIterator.SEG_QUADTO:p=transform(new Point2D.Float(coords[0],coords[1]));Point2D q=transform(new Point2D.Float(coords[2],coords[3]));newPath.quadTo((float)p.getX(),(float)p.getY(),(float)q.getX(),(float)q.getY());break;case PathIterator.SEG_CUBICTO:p=transform(new Point2D.Float(coords[0],coords[1]));q=transform(new Point2D.Float(coords[2],coords[3]));Point2D r=transform(new Point2D.Float(coords[4],coords[5]));newPath.curveTo((float)p.getX(),(float)p.getY(),(float)q.getX(),(float)q.getY(),(float)r.getX(),(float)r.getY());break;case PathIterator.SEG_CLOSE:newPath.closePath();break;}}return newPath;}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public OperationStateException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void start(){  Futures.getUnchecked(startAsync());}  }
class C{  protected void readEntityFromNBT(NBTTagCompound par1NBTTagCompound){}  }
class C{  void write(){  clearAttributes();  if (termAttribute.length() < buffer.length()) {    termAttribute.resizeBuffer(buffer.length());  }  char termbuffer[]=termAttribute.buffer();  buffer.getChars(0,buffer.length(),termbuffer,0);  termAttribute.setLength(buffer.length());  if (hasIllegalOffsets) {    offsetAttribute.setOffset(savedStartOffset,savedEndOffset);  } else {    offsetAttribute.setOffset(startOffset,endOffset);  }  posIncAttribute.setPositionIncrement(position(true));  typeAttribute.setType(savedType);  accumPosInc=0;}  }
class C{  static public Timestamp addDays(Timestamp day,int offset){  if (offset == 0) {    return day;  }  if (day == null) {    day=new Timestamp(System.currentTimeMillis());  }  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if (offset == 0)   return new Timestamp(cal.getTimeInMillis());  cal.add(Calendar.DAY_OF_YEAR,offset);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public Object eval(String script) throws ScriptException {  return eval(script,context);}  }
class C{  public boolean isRecoveryRunning(){  return recoveryRunning;}  }
class C{  public static void insertFilter(JsonObject baseObj,JsonObject filter){  if (baseObj.has(FILTER_FIELD_NAME)) {    JsonObject currFilters=baseObj.remove(FILTER_FIELD_NAME).getAsJsonObject();    JsonObject iterFilter=currFilters;    while (iterFilter.has(LISTENER_FIELD_NAME)) {      iterFilter=currFilters.get(LISTENER_FIELD_NAME).getAsJsonObject();    }    iterFilter.add(LISTENER_FIELD_NAME,filter);    baseObj.add(FILTER_FIELD_NAME,currFilters);  } else {    baseObj.add(FILTER_FIELD_NAME,filter);  }}  }
class C{  public MarketplaceShareResultEvaluator(Document xml,String currency){  super(xml);  setCurrency(currency);}  }
class C{  private Collector feignCtrlP(int offset){  Collector collector=new Collector(myFixture.getProject(),myFixture.getFile(),offset);  PyParameterInfoHandler handler=new PyParameterInfoHandler();  final PyArgumentList parameterOwner=handler.findElementForParameterInfo(collector);  collector.setParameterOwner(parameterOwner);  if (collector.getParameterOwner() != null) {    Assert.assertEquals("Collected one analysis result",1,collector.myItems.length);    handler.updateParameterInfo((PyArgumentList)collector.getParameterOwner(),collector);    handler.updateUI((CallArgumentsMapping)collector.getItemsToShow()[0],collector);  }  return collector;}  }
class C{  public void testDoConfigureSetsDefaultConfigurationVersion() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"//weblogic:configuration-version",config);}  }
class C{  public void moveCartItem(int fromIndex,int toIndex){  if (toIndex < fromIndex) {    cartLines.add(toIndex,cartLines.remove(fromIndex));  } else   if (toIndex > fromIndex) {    cartLines.add(toIndex - 1,cartLines.remove(fromIndex));  }}  }
class C{  @NotNull @ObjectiveCName("editGroupThemeCommandWithGid:withTheme:") public Command<Void> editGroupTheme(final int gid,final String theme){  return null;}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public static <T>Map<ReferenceTarget,T> filterToSingle(Multimap<ReferenceTarget,T> referentMap,Function<Collection<T>,T> convert){  final Map<ReferenceTarget,T> singleMap=new HashMap<>(referentMap.size());  referentMap.asMap().entrySet().stream().forEach(null);  return singleMap;}  }
class C{  public Quaterniond rotate(double angleX,double angleY,double angleZ,Quaterniond dest){  double thetaX=angleX * 0.5;  double thetaY=angleY * 0.5;  double thetaZ=angleZ * 0.5;  double thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  double s;  double dqX, dqY, dqZ, dqW;  if (thetaMagSq * thetaMagSq / 24.0 < 1E-8f) {    dqW=1.0 - thetaMagSq / 2.0;    s=1.0 - thetaMagSq / 6.0;  } else {    double thetaMag=Math.sqrt(thetaMagSq);    dqW=Math.cos(thetaMag);    s=Math.sin(thetaMag) / thetaMag;  }  dqX=thetaX * s;  dqY=thetaY * s;  dqZ=thetaZ * s;  dest.set(w * dqX + x * dqW + y * dqZ - z * dqY,w * dqY - x * dqZ + y * dqW + z * dqX,w * dqZ + x * dqY - y * dqX + z * dqW,w * dqW - x * dqX - y * dqY - z * dqZ);  return dest;}  }
class C{  protected SelectedDenseDoubleMatrix2D(int rows,int columns,double[] elements,int rowZero,int columnZero,int rowStride,int columnStride,int[] rowOffsets,int[] columnOffsets,int offset){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public static void addRequestHeader(String key,String value){  BatchComputeRequest.setCommonHeader(key,value);}  }
class C{  public boolean hasTargetReadPermission(){  return permissionService.hasPermission(SpPermission.READ_TARGET);}  }
class C{  public ChannelBinding(byte[] appData){  this(null,null,appData);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static _LabelChildOption fromString(final String value) throws SOAPSerializationException {  return (_LabelChildOption)Enumeration.fromString(value,_LabelChildOption.VALUES_TO_INSTANCES);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public JCBHandle(T t){  item=t;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ACTIVE_DEFINITION___ACTIVE_1:    return active_1 != ACTIVE_1_EDEFAULT;case UmplePackage.ACTIVE_DEFINITION___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ACTIVE_DEFINITION___CODE_1:return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);}return super.eIsSet(featureID);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void visualizeWeightsAsLanes(Network network,Map<Id<Link>,Double> weightMap){  for (  Map.Entry<Id<Link>,Double> w : weightMap.entrySet()) {    network.getLinks().get(w.getKey()).setNumberOfLanes(w.getValue());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static RouteBuilder patch(String path){  return builder().patch(path);}  }
class C{  public int size(){  return position;}  }
class C{  @SuppressWarnings("unchecked") public static Set<Boolean> toSet(boolean[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  boolean state;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  state=domesticAttr.getSpecified();  assertTrue("acronymTitleSpecified",state);}  }
class C{  public void testAddTwo(){  String one="one";  assertTrue(set.add(one));  assertFalse(set.add(one));  assertTrue(set.contains(one));  assertEquals(1,set.size());}  }
class C{  public boolean isNaN(){  return Double.isNaN(value);}  }
class C{  public FunctionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static Object convert(final String[] values,final Class clazz){  return ConverterBean.getInstance().convert(values,clazz);}  }
class C{  private void ensureCapacity(int size){  int countRegs=interference.size();  interference.ensureCapacity(size);  for (int i=countRegs; i < size; i++) {    interference.add(SetFactory.makeInterferenceSet(size));  }}  }
class C{  protected Object createNode(Object name,Map attributes,Object value){  Object node;  Factory factory=getProxyBuilder().resolveFactory(name,attributes,value);  if (factory == null) {    LOG.log(Level.WARNING,"Could not find match for name '" + name + "'");    throw new MissingMethodExceptionNoStack((String)name,Object.class,new Object[]{attributes,value});  }  getProxyBuilder().getContext().put(CURRENT_FACTORY,factory);  getProxyBuilder().getContext().put(CURRENT_NAME,String.valueOf(name));  getProxyBuilder().preInstantiate(name,attributes,value);  try {    node=factory.newInstance(getProxyBuilder().getChildBuilder(),name,value,attributes);    if (node == null) {      LOG.log(Level.WARNING,"Factory for name '" + name + "' returned null");      return null;    }    if (LOG.isLoggable(Level.FINE)) {      LOG.fine("For name: " + name + " created node: "+ node);    }  } catch (  Exception e) {    throw new RuntimeException("Failed to create component for '" + name + "' reason: "+ e,e);  }  getProxyBuilder().postInstantiate(name,attributes,node);  getProxyBuilder().handleNodeAttributes(node,attributes);  return node;}  }
class C{  public Boolean isFullDay(){  return isFullDay;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Integer(0); else   return new Integer(uiMgr.getRootPanel().getWidth());}  }
class C{  private long read32(byte[] buffer,int offset){  byte b0=buffer[offset];  byte b1=buffer[offset + 1];  byte b2=buffer[offset + 2];  byte b3=buffer[offset + 3];  int i0=((b0 & 0x80) == 0x80 ? (b0 & 0x7F) + 0x80 : b0);  int i1=((b1 & 0x80) == 0x80 ? (b1 & 0x7F) + 0x80 : b1);  int i2=((b2 & 0x80) == 0x80 ? (b2 & 0x7F) + 0x80 : b2);  int i3=((b3 & 0x80) == 0x80 ? (b3 & 0x7F) + 0x80 : b3);  return ((long)i0 << 24) + ((long)i1 << 16) + ((long)i2 << 8)+ (long)i3;}  }
class C{  private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  public JSONException(final String message){  super(message);}  }
class C{  public static void main(String args[]) throws Exception {  String data=args[0];  MessageSigner ms=new MessageSigner("private-key.pem");  String signature=ms.sign(data);  logger.log(Level.INFO,"Request: {0}",data);  logger.log(Level.INFO,"Response: {0}",signature);}  }
class C{  public boolean isCostFrozen(){  Object oo=get_Value(COLUMNNAME_IsCostFrozen);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Element store(){  Element e=new Element(Xml.ITEM);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.SEQUENCE_ID,Integer.toString(getSequenceId()));  e.setAttribute(Xml.NAME,getActionName());  e.setAttribute(Xml.ACTION_CODE,"0x" + Integer.toHexString(getActionCode()));  e.setAttribute(Xml.HALT_FAIL,isHaltFailureEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ACTION_RAN,isActionRan() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ACTION_SUCCESSFUL,isActionSuccessful() ? Xml.TRUE : Xml.FALSE);  if (getTrain() != null) {    e.setAttribute(Xml.TRAIN_ID,getTrain().getId());    if (getRouteLocation() != null) {      e.setAttribute(Xml.ROUTE_LOCATION_ID,getRouteLocation().getId());    }  }  if (getAutomationToRun() != null) {    e.setAttribute(Xml.AUTOMATION_ID,getAutomationToRun().getId());  }  if (getGotoAutomationItem() != null) {    e.setAttribute(Xml.GOTO_AUTOMATION_ID,getGotoAutomationItem().getId());  }  if (getTrainSchedule() != null) {    e.setAttribute(Xml.TRAIN_SCHEDULE_ID,getTrainSchedule().getId());  }  if (!getMessage().equals(NONE) || !getMessageFail().equals(NONE)) {    Element eMessages=new Element(Xml.MESSAGES);    e.addContent(eMessages);    Element eMessageOk=new Element(Xml.MESSAGE_OK);    eMessageOk.setAttribute(Xml.MESSAGE,getMessage());    Element eMessageFail=new Element(Xml.MESSAGE_FAIL);    eMessageFail.setAttribute(Xml.MESSAGE,getMessageFail());    eMessages.addContent(eMessageOk);    eMessages.addContent(eMessageFail);  }  return e;}  }
class C{  private int execute(List<?> requests,int maxRequestsPerBulk) throws SQLException {  int result=0;  BulkRequestBuilder bulkReq=client.prepareBulk();  for (  Object req : requests) {    if (req instanceof IndexRequest)     bulkReq.add((IndexRequest)req); else     if (req instanceof UpdateRequest)     bulkReq.add((UpdateRequest)req); else     if (req instanceof DeleteRequest)     bulkReq.add((DeleteRequest)req); else     if (req instanceof IndexRequestBuilder)     bulkReq.add((IndexRequestBuilder)req); else     if (req instanceof UpdateRequestBuilder)     bulkReq.add((UpdateRequestBuilder)req); else     if (req instanceof DeleteRequestBuilder)     bulkReq.add((DeleteRequestBuilder)req); else     throw new SQLException("Type " + req.getClass() + " cannot be added to a bulk request");    if (bulkReq.numberOfActions() > maxRequestsPerBulk) {      result+=bulkReq.get().getItems().length;      bulkReq=client.prepareBulk();    }  }  if (bulkReq.numberOfActions() > 0) {    result+=bulkReq.get().getItems().length;  }  return result;}  }
class C{  private static int determineType(InputStream is) throws IOException {  byte[] magicBytes=new byte[8];  int b;  long index=-1;  boolean bom=false;  do {    if (is.markSupported())     is.mark(16);    b=is.read();    index++;    bom=index < 3 && ((index == 0 && b == 0xEF) || (bom && ((index == 1 && b == 0xBB) || (index == 2 && b == 0xBF))));  } while (b != -1 && b == ' ' || b == '\t' || b == '\r' || b == '\n' || b == '\f' || bom);  magicBytes[0]=(byte)b;  int read=is.read(magicBytes,1,7);  int type=determineType(new String(magicBytes,0,read));  if (is.markSupported())   is.reset();  return type;}  }
class C{  public int rtf(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public static boolean looksLikeABGAttachment(String val){  return "scroll".equals(val) || "fixed".equals(val);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREENRXNEWS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NEWSLIST\" TEXT,"+ "\"TYPE\" TEXT);");}  }
class C{  private boolean readExternalId(boolean requireSystemName,boolean assignFields) throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == 'S') {    read(SYSTEM);  } else   if (c == 'P') {    read(PUBLIC);    skip();    if (assignFields) {      publicId=readQuotedId(true);    } else {      readQuotedId(false);    }  } else {    return false;  }  skip();  if (!requireSystemName) {    int delimiter=peekCharacter();    if (delimiter != '"' && delimiter != '\'') {      return true;    }  }  if (assignFields) {    systemId=readQuotedId(true);  } else {    readQuotedId(false);  }  return true;}  }
class C{  public ContentValues buildContentValues(File formDefFile) throws IllegalArgumentException {  ContentValues updateValues=new ContentValues();  HashMap<String,String> fields=null;  try {    fields=FileUtils.parseXML(formDefFile);  } catch (  RuntimeException e) {    throw new IllegalArgumentException(formDefFile.getName() + " :: " + e.toString());  }  String title=fields.get(FileUtils.TITLE);  String version=fields.get(FileUtils.VERSION);  String formid=fields.get(FileUtils.FORMID);  String submission=fields.get(FileUtils.SUBMISSIONURI);  String base64RsaPublicKey=fields.get(FileUtils.BASE64_RSA_PUBLIC_KEY);  Long now=Long.valueOf(System.currentTimeMillis());  updateValues.put(FormsColumns.DATE,now);  if (title != null) {    updateValues.put(FormsColumns.DISPLAY_NAME,title);  } else {    throw new IllegalArgumentException(Collect.getInstance().getString(R.string.xform_parse_error,formDefFile.getName(),"title"));  }  if (formid != null) {    updateValues.put(FormsColumns.JR_FORM_ID,formid);  } else {    throw new IllegalArgumentException(Collect.getInstance().getString(R.string.xform_parse_error,formDefFile.getName(),"id"));  }  if (version != null) {    updateValues.put(FormsColumns.JR_VERSION,version);  }  if (submission != null) {    updateValues.put(FormsColumns.SUBMISSION_URI,submission);  }  if (base64RsaPublicKey != null) {    updateValues.put(FormsColumns.BASE64_RSA_PUBLIC_KEY,base64RsaPublicKey);  }  updateValues.put(FormsColumns.FORM_FILE_PATH,formDefFile.getAbsolutePath());  return updateValues;}  }
class C{  public String toString(){  return String.valueOf(simpleSelector) + condition;}  }
class C{  private Constituent createTreeConstituent(Tree<Pair<String,Integer>> depTree,double treeScore,String constituentLabel){  Pair<String,Integer> label=depTree.getLabel();  int start=label.getSecond();  int end=label.getSecond() + 1;  return createNewConstituent(start,end,constituentLabel,treeScore);}  }
class C{  public VNXeCommandJob modifyConsistencyGroupAsync(String id,LunGroupModifyParam param){  StringBuilder urlBld=new StringBuilder(URL_MODIFY1);  urlBld.append(id);  urlBld.append(URL_MODIFY2);  _url=urlBld.toString();  return postRequestAsync(param);}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("liberty",ContainerType.INSTALLED,ConfigurationType.STANDALONE,LibertyStandaloneLocalConfigurationCapability.class);}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    uriString=uriString.substring(7);  }  return uriString;}  }
class C{  public void tick(){  final long count=uncounted.sumThenReset();  double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  public CertificateList toASN1Structure(){  return x509CRL;}  }
class C{  @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public void afterRegionDestroy(RegionEvent revt){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected Instances process(Instances data){  if (getPostProcessor() == null) {    return data;  } else {    return getPostProcessor().process(data);  }}  }
class C{  public boolean isClusterUpgradable(){  return _coordinator.isClusterUpgradable();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.549 -0500",hash_original_method="F35E4DD8AE097731F5674B94681A91A4",hash_generated_method="190691A934291496E1915F4AC2ED5E60") public void print(char ch){  print(String.valueOf(ch));}  }
class C{  public AnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  public DitherFilter(){  rows=2;  cols=2;  matrix=ditherMagic4x4Matrix;  levels=6;  colorDither=true;}  }
class C{  public static @Local String newLocalNameFromBuffer(@NoLength char[] buf,int offset,int length){  return new String(buf,offset,length).intern();}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  @Override protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[0]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0]) && i >= 0 && i < mXAxis.getValues().size()) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (position[0] + width / 2.f > mViewPortHandler.contentRight())           position[0]=mViewPortHandler.contentRight() - (width / 2.f);        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (position[0] - width / 2.f < mViewPortHandler.contentLeft())           position[0]=mViewPortHandler.contentLeft() + (width / 2.f);        }      }      drawLabel(c,label,i,position[0],pos,anchor,labelRotationAngleDegrees);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.955 -0500",hash_original_method="AA5F5BF44F4DA05ED8C1D4957936AC31",hash_generated_method="15FC8A3B902B78037562F73229532457") public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  private void initAlignment(Alignment alignment,int[] treeIndex){  int numSeqs=alignment.getSequenceCount();  int numSites=alignment.getSiteCount();  DataType dataType=alignment.getDataType();  int numStates=dataType.getStateCount();  iAlignment=new IntMathVec[numSites];  int[] column=new int[numSeqs];  for (int i=0; i < numSites; i++) {    for (int j=0; j < numSeqs; j++) {      column[treeIndex[j]]=((alignment.getState(j,i) >= numStates) ? 0 : 1);    }    iAlignment[i]=new IntMathVec(column);  }}  }
class C{  public ConfirmDialog doYesNoBotherDialog(String title,String question){  ConfirmDialog confirm=new ConfirmDialog(frame,title,question,true);  confirm.setVisible(true);  return confirm;}  }
class C{  public void testPreconditions(){  StoreRetrieveData dataStorage=getDataStorage();  ArrayList<ToDoItem> items=null;  try {    items=dataStorage.loadFromFile();  } catch (  Exception e) {    fail("Couldn't read from data storage: " + e.getMessage());  }  assertEquals(0,items.size());}  }
class C{  private void shutdownPrivate(){  enableStatistics(false);  enableManagement(false);  listeners.shutdown();  String errorMsg=stopAndClear(MAX_SHUTDOWN_WAIT_MILLIS);  if (errorMsg != null) {    logger.error("Shutting down Cache " + id + " FAILED. Reason: "+ errorMsg);  } else {    logger.info("Shutting down Cache " + id + " OK");  }}  }
class C{  public long starttime(){  return Long.parseLong(fields[21]);}  }
class C{  public void testXformRetrievedFromServer(){}  }
class C{  private boolean checkReady(){  if (mMap == null) {    Toast.makeText(this,R.string.map_not_ready,Toast.LENGTH_SHORT).show();    return false;  }  return true;}  }
class C{  public final double doOperation() throws OperatorFailedException {  int randomSite=(int)(Math.random() * siteCount);  int currentCategory=(int)categoryParameter.getParameterValue(randomSite);  siteModel.subtractSitesInCategoryCount(currentCategory);  int[] temp=new int[categoryCount - 1];  int count=0;  for (int i=0; i < categoryCount; i++) {    if (i != currentCategory) {      temp[count]=i;      count++;    }  }  int newCategory=temp[(int)(Math.random() * temp.length)];  categoryParameter.setParameterValue(randomSite,newCategory);  siteModel.addSitesInCategoryCount(newCategory);  return 0.0;}  }
class C{  protected void processRecords(List records) throws IOException {  for (Iterator enumerator=records.iterator(); enumerator.hasNext(); ) {    ActionRecord rec=(ActionRecord)enumerator.next();    if (rec.blockDepth < blockDepth) {      blockDepth--;      actions.endBlock();    }    if (rec.label != null) {      actions.jumpLabel(rec.label);    }    int code=rec.code;    byte[] data=rec.data;    InStream in=(data != null && data.length > 0) ? new InStream(data) : null;switch (code) {case 0:      actions.end();    break;case GOTO_FRAME:  actions.gotoFrame(in.readUI16());break;case GET_URL:actions.getURL(in.readString(),in.readString());break;case NEXT_FRAME:actions.nextFrame();break;case PREVIOUS_FRAME:actions.prevFrame();break;case PLAY:actions.play();break;case STOP:actions.stop();break;case TOGGLE_QUALITY:actions.toggleQuality();break;case STOP_SOUNDS:actions.stopSounds();break;case WAIT_FOR_FRAME:actions.waitForFrame(in.readUI16(),rec.jumpLabel);break;case SET_TARGET:actions.setTarget(in.readString());break;case GOTO_LABEL:actions.gotoFrame(in.readString());break;case IF:actions.ifJump(rec.jumpLabel);break;case JUMP:actions.jump(rec.jumpLabel);break;case WAIT_FOR_FRAME_2:actions.waitForFrame(rec.jumpLabel);break;case POP:actions.pop();break;case PUSH:parsePush(data.length,in);break;case ADD:actions.add();break;case SUBTRACT:actions.substract();break;case MULTIPLY:actions.multiply();break;case DIVIDE:actions.divide();break;case EQUALS:actions.equals();break;case LESS:actions.lessThan();break;case AND:actions.and();break;case OR:actions.or();break;case NOT:actions.not();break;case STRING_EQUALS:actions.stringEquals();break;case STRING_LENGTH:actions.stringLength();break;case STRING_ADD:actions.concat();break;case STRING_EXTRACT:actions.substring();break;case STRING_LESS:actions.stringLessThan();break;case MB_STRING_EXTRACT:actions.substringMB();break;case MB_STRING_LENGTH:actions.stringLengthMB();break;case TO_INTEGER:actions.toInteger();break;case CHAR_TO_ASCII:actions.charToAscii();break;case ASCII_TO_CHAR:actions.asciiToChar();break;case MB_CHAR_TO_ASCII:actions.charMBToAscii();break;case MB_ASCII_TO_CHAR:actions.asciiToCharMB();break;case CALL:actions.call();break;case GET_VARIABLE:actions.getVariable();break;case SET_VARIABLE:actions.setVariable();break;case GET_URL_2:parseGetURL2(in.readUI8());break;case GOTO_FRAME_2:actions.gotoFrame(in.readUI8() != 0);break;case SET_TARGET_2:actions.setTarget();break;case GET_PROPERTY:actions.getProperty();break;case SET_PROPERTY:actions.setProperty();break;case CLONE_SPRITE:actions.cloneSprite();break;case REMOVE_SPRITE:actions.removeSprite();break;case START_DRAG:actions.startDrag();break;case END_DRAG:actions.endDrag();break;case TRACE:actions.trace();break;case GET_TIME:actions.getTime();break;case RANDOM_NUMBER:actions.randomNumber();break;case INIT_ARRAY:actions.initArray();break;case LOOKUP_TABLE:parseLookupTable(in);break;case CALL_FUNCTION:actions.callFunction();break;case CALL_METHOD:actions.callMethod();break;case DEFINE_FUNCTION:parseDefineFunction(in);break;case DEFINE_LOCAL_VAL:actions.defineLocalValue();break;case DEFINE_LOCAL:actions.defineLocal();break;case DEL_VAR:actions.deleteProperty();break;case DEL_THREAD_VARS:actions.deleteThreadVars();break;case ENUMERATE:actions.enumerate();break;case TYPED_EQUALS:actions.typedEquals();break;case GET_MEMBER:actions.getMember();break;case INIT_OBJECT:actions.initObject();break;case CALL_NEW_METHOD:actions.newMethod();break;case NEW_OBJECT:actions.newObject();break;case SET_MEMBER:actions.setMember();break;case GET_TARGET_PATH:actions.getTargetPath();break;case WITH:parseWith(in);break;case DUPLICATE:actions.duplicate();break;case RETURN:actions.returnValue();break;case SWAP:actions.swap();break;case REGISTER:actions.storeInRegister(in.readUI8());break;case MODULO:actions.modulo();break;case TYPEOF:actions.typeOf();break;case TYPED_ADD:actions.typedAdd();break;case TYPED_LESS_THAN:actions.typedLessThan();break;case CONVERT_TO_NUMBER:actions.convertToNumber();break;case CONVERT_TO_STRING:actions.convertToString();break;case INCREMENT:actions.increment();break;case DECREMENT:actions.decrement();break;case BIT_AND:actions.bitAnd();break;case BIT_OR:actions.bitOr();break;case BIT_XOR:actions.bitXor();break;case SHIFT_LEFT:actions.shiftLeft();break;case SHIFT_RIGHT:actions.shiftRight();break;case SHIFT_UNSIGNED:actions.shiftRightUnsigned();break;default :actions.unknown(code,data);break;}}}  }
class C{  public static Set<JavaClassAndMethod> resolveMethodCallTargets(ReferenceType receiverType,InvokeInstruction invokeInstruction,ConstantPoolGen cpg,boolean receiverTypeIsExact) throws ClassNotFoundException {  HashSet<JavaClassAndMethod> result=new HashSet<JavaClassAndMethod>();  if (invokeInstruction.getOpcode() == Constants.INVOKESTATIC) {    throw new IllegalArgumentException();  }  String methodName=invokeInstruction.getName(cpg);  String methodSig=invokeInstruction.getSignature(cpg);  if (receiverType instanceof ArrayType) {    JavaClass javaLangObject=AnalysisContext.currentAnalysisContext().lookupClass("java.lang.Object");    JavaClassAndMethod classAndMethod=findMethod(javaLangObject,methodName,methodSig,INSTANCE_METHOD);    if (classAndMethod != null) {      result.add(classAndMethod);    }    return result;  }  if (receiverType instanceof NullType) {    return Collections.<JavaClassAndMethod>emptySet();  }  AnalysisContext analysisContext=AnalysisContext.currentAnalysisContext();  String receiverClassName=((ObjectType)receiverType).getClassName();  JavaClass receiverClass=analysisContext.lookupClass(receiverClassName);  ClassDescriptor receiverDesc=DescriptorFactory.createClassDescriptorFromDottedClassName(receiverClassName);  JavaClassAndMethod upperBound=findMethod(receiverClass,methodName,methodSig,CONCRETE_METHOD);  if (upperBound == null) {    upperBound=findInvocationLeastUpperBound(receiverClass,methodName,methodSig,CONCRETE_METHOD,false);  }  if (upperBound != null) {    if (DEBUG_METHOD_LOOKUP) {      System.out.println("Adding upper bound: " + SignatureConverter.convertMethodSignature(upperBound.getJavaClass(),upperBound.getMethod()));    }    result.add(upperBound);  }  boolean virtualCall=(invokeInstruction.getOpcode() == Constants.INVOKEVIRTUAL || invokeInstruction.getOpcode() == Constants.INVOKEINTERFACE) && (upperBound == null || !upperBound.getJavaClass().isFinal() && !upperBound.getMethod().isFinal()) && !receiverTypeIsExact;  if (virtualCall) {    if (!"java.lang.Object".equals(receiverClassName)) {      Set<ClassDescriptor> subTypeSet=analysisContext.getSubtypes2().getSubtypes(receiverDesc);      for (      ClassDescriptor subtype : subTypeSet) {        XMethod concreteSubtypeMethod=findMethod(subtype,methodName,methodSig,false);        if (concreteSubtypeMethod != null && (concreteSubtypeMethod.getAccessFlags() & Constants.ACC_ABSTRACT) == 0) {          result.add(new JavaClassAndMethod(concreteSubtypeMethod));        }      }      if (false && subTypeSet.size() > 500) {        new RuntimeException(receiverClassName + " has " + subTypeSet.size()+ " subclasses, "+ result.size()+ " of which implement "+ methodName+ methodSig+ " "+ invokeInstruction).printStackTrace(System.out);      }    }  }  return result;}  }
class C{  public static String quoteIfNeeded(String s,String delim){  if (s == null)   return null;  if (s.length() == 0)   return "\"\"";  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '"' || c == '\'' || Character.isWhitespace(c) || delim.indexOf(c) >= 0) {      StringBuffer b=new StringBuffer(s.length() + 8);      quote(b,s);      return b.toString();    }  }  return s;}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  private String formatMessagePlaceHolders(String message){  int occurances=0;  while (message.matches(".*\\{[a-zA-Z]+\\}.*")) {    message=message.replaceFirst("\\{[a-zA-Z]+\\}","{" + occurances + "}");    occurances++;  }  return message;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public double maxExtent(){  if (isNull()) {    return 0.0;  }  return FastMath.max(getWidth(),FastMath.max(getHeight(),getDepth()));}  }
class C{  private void internalFlush(NextFilter nextFilter,IoSession session,IoBuffer buf) throws Exception {  IoBuffer tmp=null;synchronized (buf) {    buf.flip();    tmp=buf.duplicate();    buf.clear();  }  logger.debug("Flushing buffer: {}",tmp);  nextFilter.filterWrite(session,new DefaultWriteRequest(tmp));}  }
class C{  public static void addTraceObject(ObjectReference ref,int linkSpace){  VM.traceInterface.setLink(ref,objectLinks.get(linkSpace));  objectLinks.set(linkSpace,ref);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS_BY_NAME_AND_ACCESS:    setOwnedMembersByNameAndAccess((Map<NameAndAccess,? extends TMember>)newValue);  return;case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS:getOwnedMembers().clear();getOwnedMembers().addAll((Collection<? extends MT>)newValue);return;case TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR:setCallableCtor((TMethod)newValue);return;case TypesPackage.CONTAINER_TYPE__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public MultipurposeIDHandler(final String namespace,final int maxTextLen){  super(namespace);  this.maxTextLen=maxTextLen;}  }
class C{  public static boolean isThreadNeqCurrentThread(){  if (!checkCallerThread) {    return false;  }  if (currentThread == null) {    logger.error("CurrentThread has not been set!");    Map<Thread,StackTraceElement[]> map=Thread.getAllStackTraces();    for (    Thread t : map.keySet()) {      String msg="Thread: " + t + "\n";      for (      StackTraceElement e : map.get(t)) {        msg+=" -> " + e + "\n";      }      logger.error(msg);    }    currentThread=Thread.currentThread();  }  return Thread.currentThread() != currentThread;}  }
class C{  public String user(){  return usr;}  }
class C{  public static void validateNotNull(Object object,String message){  if (object == null) {    throw new NullPointerException(message);  }}  }
class C{  public static boolean isCompactFooter(short flags){  return isFlagSet(flags,FLAG_COMPACT_FOOTER);}  }
class C{  public IndependentDistribution createDiscrete(String headVar){  CategoricalTable.Builder probs=new CategoricalTable.Builder(headVar);  double incr=1.0 / samples.size();  for (  Assignment sample : samples) {    Value val=sample.getValue(headVar);    probs.incrementRow(val,incr);  }  return probs.build();}  }
class C{  public void like(Post post){  this.likes++;  String userName=post.getFrom() == null ? "anonymous" : post.getFrom().getName();  log("Liking:",Level.INFO,post.getCaption(),userName);  try {    if (getConnection() == null) {      connect();    }    getConnection().likePost(post.getId());  } catch (  Exception exception) {    if (exception.getMessage() != null && exception.getMessage().contains("authorized") && exception.getMessage().contains("endpoint")) {      this.errors=this.errors + 5;    }    this.errors++;    log(exception.toString(),Level.WARNING,post.getCaption());  }}  }
class C{  public ContentLengthInputStream(final InputStream in,final long contentLength){  super();  wrappedStream=in;  this.contentLength=contentLength;}  }
class C{  protected void updateUndoPositions(Vector positions){  for (int counter=positions.size() - 1; counter >= 0; counter--) {    UndoPosRef ref=(UndoPosRef)positions.elementAt(counter);    if (ref.rec.unused) {      positions.removeElementAt(counter);    } else     ref.resetLocation();  }}  }
class C{  public static void allUniqueIdsAreValid(String[] uniqueIds,boolean allowEmpty) throws InvalidArgument {  if (isEmpty(uniqueIds)) {    if (!allowEmpty) {      throw FaultUtil.InvalidArgument("UniqueId list cannot be empty");    }    return;  }  for (int i=0; i < uniqueIds.length; i++) {    uniqueIdIsValid(uniqueIds[i]);  }}  }
class C{  public void historicalDataComplete(Tradestrategy tradestrategy){  try {    _log.info("Symbol: " + tradestrategy.getContract().getSymbol() + " Candles  saved: "+ tradePersistentModel.findCandleCount(tradestrategy.getTradingday().getIdTradingDay(),tradestrategy.getContract().getIdContract()));  } catch (  PersistentModelException ex) {    _log.error("Error historicalDataComplete Msg: " + ex.getMessage());  }}  }
class C{  InvocationKey(boolean isSecure,CharSequence host,int port,byte[] uri,int uriLength){  _isSecure=isSecure;  if (host != null) {    CharBuffer cb=new CharBuffer();    cb.append(host);    _host=cb;  }  _port=port;  _uri=new byte[uriLength];  System.arraycopy(uri,0,_uri,0,uriLength);  _uriLength=uriLength;}  }
class C{  public synchronized int availableSize(){  int ret=0;  if (!destroyed) {    int count=0;    for (int i=0; i < connections.size(); i++) {      XPooledConnection xpc=(XPooledConnection)connections.get(i);      if (xpc.isAvailable())       count++;    }    ret=count;  }  return ret;}  }
class C{  public XYTitleAnnotation(double x,double y,Title title){  this(x,y,title,RectangleAnchor.CENTER);}  }
class C{  public SVGFeSpecularLightingElementBridge(){}  }
class C{  public static Command createUpdateFileCommand(Path fileToUpdate,String textToPutIntoFile,String replacementPattern){  return createCommand(getUpdateFileCommand(fileToUpdate,textToPutIntoFile,replacementPattern,true));}  }
class C{  public static void trace(String method,String fileName,Object o){  if (SysProperties.TRACE_IO) {    System.out.println("IOUtils." + method + " "+ fileName+ " "+ o);  }}  }
class C{  public final int indexOfValue(String value){  if (!isNominal() && !isString()) {    return -1;  }  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " searching uncompressed.");    }  }  Integer val=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.get(store);  if (val == null) {    return -1;  } else {    return val.intValue();  }}  }
class C{  TypeIdentifier analyze(final String rootType){  final String type=ResponseTypeNormalizer.normalizeResponseWrapper(rootType);  final TypeIdentifier identifier=TypeIdentifier.ofType(type);  if (!analyzedTypes.contains(type) && (isAssignableTo(type,COLLECTION) || !isJDKType(type))) {    analyzedTypes.add(type);    typeRepresentations.put(identifier,analyzeInternal(identifier,type));  }  return identifier;}  }
class C{  protected int readPEReference() throws IOException, XMLException {  nextChar();  if (current == -1) {    throw createXMLException("unexpected.eof");  }  if (!XMLUtilities.isXMLNameFirstCharacter((char)current)) {    throw createXMLException("invalid.parameter.entity");  }  do {    nextChar();  } while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));  if (current != ';') {    throw createXMLException("invalid.parameter.entity");  }  nextChar();  return LexicalUnits.PARAMETER_ENTITY_REFERENCE;}  }
class C{  public boolean add(final GPO owner,final Value value){  final Iterator<Value> values=values();  while (values.hasNext()) {    if (values.next().equals(value)) {      return false;    }  }  final LinkValue nv=new LinkValue(value);  nv.m_next=m_addedValues;  m_addedValues=nv;  m_size++;  return true;}  }
class C{  public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newXMLFilter(templates);}  }
class C{  public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuffer b=new StringBuffer(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"RSC");  translateAll(environment,instruction,"RSC",instructions);}  }
class C{  @SuppressWarnings("unchecked") @Deprecated public static <T extends Packet>void replacePacket(Class<T> original,Class<? extends T> custom,ProtocolDirection direction){  try {    Field map=EnumProtocol.class.getDeclaredField("h");    map.setAccessible(true);    BiMap protocolMap=((BiMap)((Map)map.get(EnumProtocol.PLAY)).get(direction.getNMS()));    Integer id=(Integer)protocolMap.inverse().get(original);    protocolMap.put(id,custom);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  void doAdd(SolrContentHandler handler,AddUpdateCommand template) throws IOException {  template.solrDoc=handler.newDocument();  processor.processAdd(template);}  }
class C{  @NoWarning(value="DM_DEFAULT_ENCODING") public void notBugs() throws IOException {  String a="foobar";  a.getBytes(Charset.forName("UTF-8"));  a.getBytes("UTF-8");  new String(new byte[]{},"UTF-8");  new String(new byte[]{},0,0,"UTF-8");  (new ByteArrayOutputStream()).toString("UTF-8");  new InputStreamReader(new FileInputStream(""),"UTF-8");  new OutputStreamWriter(new FileOutputStream(""),"UTF-8");  new PrintStream(new File(""),"UTF-8");  new PrintStream(new FileOutputStream(""),true,"UTF-8");  new PrintStream("","UTF-8");  new PrintWriter(new File(""),"UTF-8");  new PrintWriter("","UTF-8");  new Scanner(new FileInputStream(""),"UTF-8");  new Formatter("","UTF-8");  new Formatter(new File(""),"UTF-8");  new Formatter(new FileOutputStream(""),"UTF-8");  new StringBuilder().toString();  new ArrayList<Object>().toString();  List<String> failures=new ArrayList<String>();  failures.toString();}  }
class C{  protected SurfaceCircle createCircle(){  SurfaceCircle circle=new SurfaceCircle();  circle.setDelegateOwner(this.getActiveDelegateOwner());  circle.setAttributes(this.getActiveShapeAttributes());  return circle;}  }
class C{  public PropertySourceAbstract(Object sourceObject,Object object,boolean loadLazyProps){  this.sourceObject=sourceObject;  this.object=object;  this.loadLazyProps=loadLazyProps;}  }
class C{  public static <C extends Comparable<?>>Range<C> upTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  public UnionRegionParser(@NonNull Match match,Element element) throws RegionException {  for (  Element subRegionElement : element.getChildren()) {    regions.add(Cardinal.getModule(RegionModule.class).getRegion(match,subRegionElement));  }  if (regions.isEmpty()) {    throw new MissingRegionPropertyException("No sub-regions specified for union region",element);  }}  }
class C{  public boolean isAtLeast(VersionNumber other){  return this.compareTo(other) >= 0;}  }
class C{  public void cleanup(){  unbindList();}  }
class C{  public static void printPYDMLScript(String pydmlScriptFile){  try {    System.out.println("Running script: " + pydmlScriptFile + "\n");    System.out.println("******************* PYDML script *******************");    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(pydmlScriptFile)));    String content;    while ((content=in.readLine()) != null) {      System.out.println(content);    }    in.close();    System.out.println("**************************************************\n\n");  } catch (  IOException e) {    e.printStackTrace();    fail("unable to print pydml script: " + e.getMessage());  }}  }
class C{  public static void main(String[] args){  double[][] testfl={{1,0.95f,0.24f},{0.95f,1,0.95f},{0.24f,0.95f,1}};  PathFinder pf=new PathFinder(8,1,testfl);  double[][] pruned=pf.pruned();  int[][] changedatq=pf.changedatq();  System.out.println("pruned");  for (int x=0; x < pruned.length; x++) {    for (int y=0; y < pruned.length; y++) {      System.out.print(pruned[x][y] + ":" + changedatq[x][y]+ " ");    }    System.out.println();  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction tellall=new RPAction("tellall");  tellall.put("type","tellall");  tellall.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(tellall);  return true;}  }
class C{  public static String cellInfoWCDMAJSON(CellInfoWcdma cellInfo,boolean returnSignalStrength){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && cellInfo != null) {    try {      json.put("provider",CELLINFO_PROVIDER);      json.put("type",WCDMA);      json.put("timestamp",calendar.getTimeInMillis());      final CellIdentityWcdma identityWcdma=cellInfo.getCellIdentity();      json.put("cid",identityWcdma.getCid());      json.put("lac",identityWcdma.getLac());      json.put("mcc",identityWcdma.getMcc());      json.put("mnc",identityWcdma.getMnc());      json.put("psc",identityWcdma.getPsc());      if (returnSignalStrength) {        final JSONObject jsonSignalStrength=new JSONObject();        final CellSignalStrengthWcdma cellSignalStrengthWcdma=cellInfo.getCellSignalStrength();        jsonSignalStrength.put("asuLevel",cellSignalStrengthWcdma.getAsuLevel());        jsonSignalStrength.put("dbm",cellSignalStrengthWcdma.getDbm());        jsonSignalStrength.put("level",cellSignalStrengthWcdma.getLevel());        json.put("cellSignalStrengthWcdma",jsonSignalStrength);      }    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  private void generate(DiskWriteAttributes dwa) throws SAXException {  if (dwa == null) {    return;  }  long maxOplogSize=dwa.getMaxOplogSize();  String maxOplogSizeString;  if (maxOplogSize == DiskWriteAttributesImpl.getDefaultMaxOplogSizeLimit()) {    maxOplogSizeString="0";  } else {    maxOplogSizeString="" + maxOplogSize;  }{    AttributesImpl atts=new AttributesImpl();    if (dwa.isRollOplogs() != DiskWriteAttributesImpl.getDefaultRollOplogsValue()) {      atts.addAttribute("","",ROLL_OPLOG,"",String.valueOf(dwa.isRollOplogs()));    }    if (dwa.getMaxOplogSize() != DiskWriteAttributesImpl.getDefaultMaxOplogSize()) {      atts.addAttribute("","",MAX_OPLOG_SIZE,"",maxOplogSizeString);    }    handler.startElement("",DISK_WRITE_ATTRIBUTES,DISK_WRITE_ATTRIBUTES,atts);  }  if (dwa.isSynchronous()) {    handler.startElement("",SYNCHRONOUS_WRITES,SYNCHRONOUS_WRITES,EMPTY);    handler.endElement("",SYNCHRONOUS_WRITES,SYNCHRONOUS_WRITES);  } else {    AttributesImpl atts=new AttributesImpl();    if (dwa.getTimeInterval() != -1) {      atts.addAttribute("","",TIME_INTERVAL,"",String.valueOf(dwa.getTimeInterval()));    } else {      atts.addAttribute("","",TIME_INTERVAL,"","1000");    }    atts.addAttribute("","",BYTES_THRESHOLD,"",String.valueOf(dwa.getBytesThreshold()));    handler.startElement("",ASYNCHRONOUS_WRITES,ASYNCHRONOUS_WRITES,atts);    handler.endElement("",ASYNCHRONOUS_WRITES,ASYNCHRONOUS_WRITES);  }  handler.endElement("",DISK_WRITE_ATTRIBUTES,DISK_WRITE_ATTRIBUTES);}  }
class C{  static TBigInteger consBigInteger(int bitLength,int certainty,Random rnd){  if (bitLength <= 10) {    int rp[]=offsetPrimes[bitLength];    return BIprimes[rp[0] + rnd.nextInt(rp[1])];  }  int shiftCount=(-bitLength) & 31;  int last=(bitLength + 31) >> 5;  TBigInteger n=new TBigInteger(1,last,new int[last]);  last--;  do {    for (int i=0; i < n.numberLength; i++) {      n.digits[i]=rnd.nextInt();    }    n.digits[last]|=0x80000000;    n.digits[last]>>>=shiftCount;    n.digits[0]|=1;  } while (!isProbablePrime(n,certainty));  return n;}  }
class C{  private void processPropertyDescriptors(){  if (properties == null) {    properties=new TreeMap<>();  }  List<PropertyDescriptor> list;  PropertyDescriptor pd, gpd, spd;  IndexedPropertyDescriptor ipd, igpd, ispd;  Iterator<List<PropertyDescriptor>> it=pdStore.values().iterator();  while (it.hasNext()) {    pd=null;    gpd=null;    spd=null;    ipd=null;    igpd=null;    ispd=null;    list=it.next();    for (int i=0; i < list.size(); i++) {      pd=list.get(i);      if (pd instanceof IndexedPropertyDescriptor) {        ipd=(IndexedPropertyDescriptor)pd;        if (ipd.getIndexedReadMethod() != null) {          if (igpd != null) {            igpd=new IndexedPropertyDescriptor(igpd,ipd);          } else {            igpd=ipd;          }        }      } else {        if (pd.getReadMethod() != null) {          String pdName=pd.getReadMethod().getName();          if (gpd != null) {            String gpdName=gpd.getReadMethod().getName();            if (gpdName.equals(pdName) || !gpdName.startsWith(IS_PREFIX)) {              gpd=new PropertyDescriptor(gpd,pd);            }          } else {            gpd=pd;          }        }      }    }    for (int i=0; i < list.size(); i++) {      pd=list.get(i);      if (pd instanceof IndexedPropertyDescriptor) {        ipd=(IndexedPropertyDescriptor)pd;        if (ipd.getIndexedWriteMethod() != null) {          if (igpd != null) {            if (isAssignable(igpd.getIndexedPropertyType(),ipd.getIndexedPropertyType())) {              if (ispd != null) {                ispd=new IndexedPropertyDescriptor(ispd,ipd);              } else {                ispd=ipd;              }            }          } else {            if (ispd != null) {              ispd=new IndexedPropertyDescriptor(ispd,ipd);            } else {              ispd=ipd;            }          }        }      } else {        if (pd.getWriteMethod() != null) {          if (gpd != null) {            if (isAssignable(gpd.getPropertyType(),pd.getPropertyType())) {              if (spd != null) {                spd=new PropertyDescriptor(spd,pd);              } else {                spd=pd;              }            }          } else {            if (spd != null) {              spd=new PropertyDescriptor(spd,pd);            } else {              spd=pd;            }          }        }      }    }    pd=null;    ipd=null;    if (igpd != null && ispd != null) {      if ((gpd == spd) || (gpd == null)) {        pd=spd;      } else       if (spd == null) {        pd=gpd;      } else       if (spd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(gpd,(IndexedPropertyDescriptor)spd);      } else       if (gpd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(spd,(IndexedPropertyDescriptor)gpd);      } else {        pd=mergePropertyDescriptor(gpd,spd);      }      if (igpd == ispd) {        ipd=igpd;      } else {        ipd=mergePropertyDescriptor(igpd,ispd);      }      if (pd == null) {        pd=ipd;      } else {        Class<?> propType=pd.getPropertyType();        Class<?> ipropType=ipd.getIndexedPropertyType();        if (propType.isArray() && propType.getComponentType() == ipropType) {          pd=pd.getClass0().isAssignableFrom(ipd.getClass0()) ? new IndexedPropertyDescriptor(pd,ipd) : new IndexedPropertyDescriptor(ipd,pd);        } else         if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {          pd=pd.getClass0().isAssignableFrom(ipd.getClass0()) ? new PropertyDescriptor(pd,ipd) : new PropertyDescriptor(ipd,pd);        } else {          pd=ipd;        }      }    } else     if (gpd != null && spd != null) {      if (igpd != null) {        gpd=mergePropertyWithIndexedProperty(gpd,igpd);      }      if (ispd != null) {        spd=mergePropertyWithIndexedProperty(spd,ispd);      }      if (gpd == spd) {        pd=gpd;      } else       if (spd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(gpd,(IndexedPropertyDescriptor)spd);      } else       if (gpd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(spd,(IndexedPropertyDescriptor)gpd);      } else {        pd=mergePropertyDescriptor(gpd,spd);      }    } else     if (ispd != null) {      pd=ispd;      if (spd != null) {        pd=mergePropertyDescriptor(ispd,spd);      }      if (gpd != null) {        pd=mergePropertyDescriptor(ispd,gpd);      }    } else     if (igpd != null) {      pd=igpd;      if (gpd != null) {        pd=mergePropertyDescriptor(igpd,gpd);      }      if (spd != null) {        pd=mergePropertyDescriptor(igpd,spd);      }    } else     if (spd != null) {      pd=spd;    } else     if (gpd != null) {      pd=gpd;    }    if (pd instanceof IndexedPropertyDescriptor) {      ipd=(IndexedPropertyDescriptor)pd;      if (ipd.getIndexedReadMethod() == null && ipd.getIndexedWriteMethod() == null) {        pd=new PropertyDescriptor(ipd);      }    }    if ((pd == null) && (list.size() > 0)) {      pd=list.get(0);    }    if (pd != null) {      properties.put(pd.getName(),pd);    }  }}  }
class C{  public boolean isLowEndpointIncluded(){  return isLowEndpointIncluded;}  }
class C{  public static InputStream post(URL url,String[] cookies,Object[] parameters) throws IOException {  return new ClientHttpRequest(url).post(cookies,parameters);}  }
class C{  @Override public void onRxAction(RxAction action){switch (action.getType()) {case Actions.GET_USER:    GitUser user=action.get(Keys.USER);  users.put(user.getLogin(),user);break;default :return;}postChange(new RxStoreChange(ID,action));}  }
class C{  public final boolean equalsIgnoreCase(String a){  int len=a.length();  if (_length != len)   return false;  int offset=_offset;  char[] buffer=_buffer;  for (int i=0; i < len; i++) {    char ca=buffer[offset + i];    char cb=a.charAt(i);    if (ca == cb) {    } else     if (Character.toLowerCase(ca) != Character.toLowerCase(cb))     return false;  }  return true;}  }
class C{  public void keyReleased(KeyEvent e){  ((KeyListener)a).keyReleased(e);  ((KeyListener)b).keyReleased(e);}  }
class C{  public void handleMeta(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  if (target.equals(Constants.API_ENDPOINT_META)) {    baseRequest.setHandled(true);  } else {    return;  }  String token=request.getHeader(Constants.getHeader(Configuration.HTTP_HEADER_TOKENX));  String producer=Tokens.UUIDByIngressToken.get(token);  String owner=Tokens.OwnerByToken.get(token);  if (null == producer || null == owner) {    response.sendError(HttpServletResponse.SC_FORBIDDEN,"Invalid token.");    return;  }  boolean gzipped=false;  if (null != request.getHeader("Content-Type") && "application/gzip".equals(request.getHeader("Content-Type"))) {    gzipped=true;  }  BufferedReader br=null;  if (gzipped) {    GZIPInputStream is=new GZIPInputStream(request.getInputStream());    br=new BufferedReader(new InputStreamReader(is));  } else {    br=request.getReader();  }  while (true) {    String line=br.readLine();    if (null == line) {      break;    }    Metadata metadata=MetadataUtils.parseMetadata(line);    metadata.getLabels().put(Constants.PRODUCER_LABEL,producer);    metadata.getLabels().put(Constants.OWNER_LABEL,owner);    if (!MetadataUtils.validateMetadata(metadata)) {      response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Invalid metadata " + line);      return;    }    metadata.setSource(Configuration.INGRESS_METADATA_UPDATE_ENDPOINT);    this.directoryClient.register(metadata);  }  response.setStatus(HttpServletResponse.SC_OK);}  }
class C{  public boolean isAtMost(int major,int minor,int buildNumber){  return this.compareTo(new VersionNumber(major,minor,buildNumber)) <= 0;}  }
class C{  public int lastIndexOf(char c){  return lastIndexOf(c,_count);}  }
class C{  public byte[] wrap(byte[] in,int inOff,int inLen){  if (!forWrapping) {    throw new IllegalStateException("Not initialized for wrapping");  }  byte keyToBeWrapped[]=new byte[inLen];  System.arraycopy(in,inOff,keyToBeWrapped,0,inLen);  byte[] CKS=calculateCMSKeyChecksum(keyToBeWrapped);  byte[] WKCKS=new byte[keyToBeWrapped.length + CKS.length];  System.arraycopy(keyToBeWrapped,0,WKCKS,0,keyToBeWrapped.length);  System.arraycopy(CKS,0,WKCKS,keyToBeWrapped.length,CKS.length);  int blockSize=engine.getBlockSize();  if (WKCKS.length % blockSize != 0) {    throw new IllegalStateException("Not multiple of block length");  }  engine.init(true,paramPlusIV);  byte TEMP1[]=new byte[WKCKS.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(WKCKS,currentBytePos,TEMP1,currentBytePos);  }  byte[] TEMP2=new byte[this.iv.length + TEMP1.length];  System.arraycopy(this.iv,0,TEMP2,0,this.iv.length);  System.arraycopy(TEMP1,0,TEMP2,this.iv.length,TEMP1.length);  byte[] TEMP3=reverse(TEMP2);  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(true,param2);  for (int currentBytePos=0; currentBytePos != TEMP3.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  return TEMP3;}  }
class C{  private static void validateEventCountAtClient() throws Exception {  if (!proceedForValidation) {synchronized (Bug36853EventsExpiryDUnitTest.class) {      if (!proceedForValidation)       try {        LogWriterUtils.getLogWriter().info("Client2 going in wait before starting validation");        Bug36853EventsExpiryDUnitTest.class.wait(5000);      } catch (      InterruptedException e) {        fail("interrupted");      }    }  }  LogWriterUtils.getLogWriter().info("Starting validation on client2");  assertEquals("Puts recieved by client not equal to the puts done at server.",TOTAL_PUTS,putsRecievedByClient);  LogWriterUtils.getLogWriter().info("putsRecievedByClient = " + putsRecievedByClient);  LogWriterUtils.getLogWriter().info("Validation complete on client2");}  }
class C{  public void insertHeartbeatEvent(Node node,boolean isReload){  ISqlTransaction transaction=null;  try {    transaction=sqlTemplate.startSqlTransaction();    String tableName=TableConstants.getTableName(tablePrefix,TableConstants.SYM_NODE_HOST);    List<NodeGroupLink> links=engine.getConfigurationService().getNodeGroupLinksFor(parameterService.getNodeGroupId(),false);    for (    NodeGroupLink nodeGroupLink : links) {      if (nodeGroupLink.getDataEventAction() == NodeGroupLinkAction.P) {        Set<TriggerRouter> triggerRouters=engine.getTriggerRouterService().getTriggerRouterForTableForCurrentNode(nodeGroupLink,null,null,tableName,false);        if (triggerRouters != null && triggerRouters.size() > 0) {          Data data=createData(transaction,triggerRouters.iterator().next().getTrigger(),String.format(" t.node_id = '%s'",node.getNodeId()));          if (data != null) {            insertData(transaction,data);          } else {            log.warn("Not generating data/data events for table {} " + "because a trigger or trigger hist is not created yet.",tableName);          }        } else {          log.warn("Not generating data/data events for table {} " + "because a trigger or trigger hist is not created yet.",tableName);        }      }    }    transaction.commit();  } catch (  Error ex) {    if (transaction != null) {      transaction.rollback();    }    throw ex;  }catch (  RuntimeException ex) {    if (transaction != null) {      transaction.rollback();    }    throw ex;  } finally {    close(transaction);  }}  }
class C{  private List<String> buildTrainCommand(File trainingFile,String targetModelLocation,double paramC,int paramOrderE,int paramOrderT,double paramEpsilon,int paramB){  List<String> result=new ArrayList<>();  result.add(resolveSVMHmmLearnCommand());  result.add("-c");  result.add(String.format(Locale.ENGLISH,"%f",this.paramC));  result.add("--e");  result.add(Integer.toString(this.paramOrderE));  result.add("--t");  result.add(Integer.toString(this.paramOrderT));  result.add("-e");  result.add(String.format(Locale.ENGLISH,"%f",this.paramEpsilon));  result.add("--b");  result.add(Integer.toString(this.paramB));  result.add(trainingFile.getAbsolutePath());  result.add(targetModelLocation);  return result;}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  private static <T>Collection<T> equalsCollection(Collection<T> other){  return argThat(new EqualsCollection<>(other));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public List<JToolBar> createToolBars(Application a,@Nullable View pr){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  DrawView p=(DrawView)pr;  DrawingEditor editor;  if (p == null) {    editor=getSharedEditor();  } else {    editor=p.getEditor();  }  LinkedList<JToolBar> list=new LinkedList<JToolBar>();  JToolBar tb;  tb=new JToolBar();  addCreationButtonsTo(tb,editor);  tb.setName(labels.getString("window.drawToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAttributesButtonsTo(tb,editor);  tb.setName(labels.getString("window.attributesToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAlignmentButtonsTo(tb,editor);  tb.setName(labels.getString("window.alignmentToolBar.title"));  list.add(tb);  return list;}  }
class C{  void hideProgress(){  removeProgressView();  removeScreenshotView();}  }
class C{  public In(){  scanner=new Scanner(new BufferedInputStream(System.in),CHARSET_NAME);  scanner.useLocale(LOCALE);}  }
class C{  private static Resource findToolsJar(Config config,Log log,RefBoolean useOurOwn){  log.info("Instrumentation","looking for tools.jar");  String javaHome=System.getProperty("java.home");  Resource javaHomeFile=ResourcesImpl.getFileResourceProvider().getResource(javaHome);  Resource toolsJarFile=javaHomeFile.getRealResource("lib" + File.separator + "tools.jar");  if (toolsJarFile.exists()) {    useOurOwn.setValue(false);    return toolsJarFile;  }  log.info("Instrumentation","couldn't find tools.jar at: " + toolsJarFile.getAbsolutePath());  if (javaHomeFile.getAbsolutePath().endsWith(SEP + "jre")) {    javaHomeFile=javaHomeFile.getParentResource();    toolsJarFile=javaHomeFile.getRealResource("lib" + SEP + "tools.jar");    if (!toolsJarFile.exists()) {      log.info("Instrumentation","for IBM SDK couldn't find " + toolsJarFile.getAbsolutePath());    } else {      useOurOwn.setValue(false);      return toolsJarFile;    }  } else   if (System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0) {    if (javaHomeFile.getAbsolutePath().endsWith(SEP + "Home")) {      javaHomeFile=javaHomeFile.getParentResource();      toolsJarFile=javaHomeFile.getRealResource("Classes" + SEP + "classes.jar");      if (!toolsJarFile.exists()) {        log.info("Instrumentation","for Mac OS couldn't find " + toolsJarFile.getAbsolutePath());      } else {        useOurOwn.setValue(false);        return toolsJarFile;      }    }  }  try {    toolsJarFile=createToolsJar(config);  } catch (  IOException e) {    log.log(Log.LEVEL_INFO,"Instrumentation",e);  }  if (!toolsJarFile.exists()) {    log.info("Instrumentation","could not be created " + toolsJarFile.getAbsolutePath());    return null;  }  log.info("Instrumentation","found " + toolsJarFile.getAbsolutePath());  return toolsJarFile;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("AllocateOldest"))     p_AllocateOldest="Y".equals(para[i].getParameter()); else     if (name.equals("APAR"))     p_APAR=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  protected void PredicateExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_PREDICATE);  Expr();  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  protected List<ExecutionResult> runTestSuite(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite){  CurrentChromosomeTracker.getInstance().modification(suite);  List<ExecutionResult> results=new ArrayList<ExecutionResult>();  for (  ExecutableChromosome chromosome : suite.getTestChromosomes()) {    if (chromosome.isChanged() || chromosome.getLastExecutionResult() == null) {      ExecutionResult result=chromosome.executeForFitnessFunction(this);      if (result != null) {        results.add(result);        chromosome.setLastExecutionResult(result);        chromosome.setChanged(false);      }    } else {      results.add(chromosome.getLastExecutionResult());    }  }  suite.setChanged(false);  return results;}  }
class C{  public JobStatus(Job job){  this.jobId=job.jobId;  this.graphId=job.workerCategory.graphId;  this.workerCommit=job.workerCategory.workerVersion;  this.total=job.tasksById.size();  this.complete=job.completedTasks.size();  this.incomplete=job.tasksById.size() - job.completedTasks.size();  this.queued=job.tasksAwaitingDelivery.size();  this.redeliveryCount=job.redeliveryCount;}  }
class C{  private void handleBlindsClick(int idx,int action){  listener.onBlindClick(idx,action);}  }
class C{  public static <T>void invokeMethodByName(@NotNull T object,@NotNull String name,Class typeArg,Object arg) throws Exception {  Method method=object.getClass().getDeclaredMethod(name,typeArg);  method.setAccessible(true);  method.invoke(object,arg);}  }
class C{  public boolean asBoolean(){  return false;}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public double calcAngleWithRatios(Entry p1,Entry p2){  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  public void logError(String message){  getLog().log(new Status(IStatus.ERROR,pluginId,message));}  }
class C{  public static void main(String[] args){  new AsteroidsWithUI().createController();}  }
class C{  public static int hash(ByteBuffer buf,int seed){  ByteOrder byteOrder=buf.order();  buf.order(ByteOrder.LITTLE_ENDIAN);  int m=0x5bd1e995;  int r=24;  int h=seed ^ buf.remaining();  int k;  while (buf.remaining() >= 4) {    k=buf.getInt();    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }  if (buf.remaining() > 0) {    ByteBuffer finish=ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);    finish.put(buf).rewind();    h^=finish.getInt();    h*=m;  }  h^=h >>> 13;  h*=m;  h^=h >>> 15;  buf.order(byteOrder);  return h;}  }
class C{  public void overrideButtonClick(OnClickListener listener){  if (shotStateStore.hasShot()) {    return;  }  if (mEndButton != null) {    mEndButton.setOnClickListener(listener != null ? listener : this);  }  hasCustomClickListener=true;}  }
class C{  public boolean intersects(Plane plane){  if (plane == null) {    String msg=Logging.getMessage("nullValue.PlaneIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double dq1=plane.dot(this.center);  return dq1 <= this.radius;}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree){  return addTree(group,tree,null);}  }
class C{  public h1 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public String isValid(String newText){  int len=newText.length();  if (len > 1000) {    return LOCATION_IS_TOO_LONG;  }  return null;}  }
class C{  public static String removeAllEmojis(String emojiText){  for (  Emoji emoji : EmojiManager.data()) {    emojiText=emojiText.replace(emoji.getEmoji(),"");  }  return emojiText;}  }
class C{  public String toString(){  return value + " (" + locale+ ")";}  }
class C{  protected ScriptBuilder bigNum(int index,long num){  final byte[] data;  if (num == 0) {    data=new byte[0];  } else {    Stack<Byte> result=new Stack<Byte>();    final boolean neg=num < 0;    long absvalue=Math.abs(num);    while (absvalue != 0) {      result.push((byte)(absvalue & 0xff));      absvalue>>=8;    }    if ((result.peek() & 0x80) != 0) {      result.push((byte)(neg ? 0x80 : 0));    } else     if (neg) {      result.push((byte)(result.pop() | 0x80));    }    data=new byte[result.size()];    for (int byteIdx=0; byteIdx < data.length; byteIdx++) {      data[byteIdx]=result.get(byteIdx);    }  }  return addChunk(index,new ScriptChunk(data.length,data));}  }
class C{  public ByteTag(byte value){  super(TagType.BYTE);  this.value=value;}  }
class C{  public static OFGroup createMPLSForwardingL2Tag(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_L2_TAG << 24)| (OFDPAGroupType.MPLS_FORWARDING << 28));}  }
class C{  public void applyKeys(Metadata metadata){  List<Key> keys=getKeyList(metadata.getMetadataType());  for (  Key key : keys) {    key.applyKey(metadata);  }}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public static void writeConfigFile(File configFile,Class<?>[] classes) throws SQLException, IOException {  System.out.println("Writing configurations to " + configFile.getAbsolutePath());  writeConfigFile(new FileOutputStream(configFile),classes);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.223 -0500",hash_original_method="96E541304104A48A190119203B0E80D4",hash_generated_method="6C553C9F8EC00B5D20E97AAC6D8FB38C") public boolean isComplex(){  return getTaintBoolean();}  }
class C{  protected CharacterEscapeSequenceImpl(){  super();}  }
class C{  public static BufferedReader newReader(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  public void inputChanged(Viewer viewer,Object oldInput,Object newInput){}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderListener(AccountHeader.OnAccountHeaderListener onAccountHeaderListener){  this.mOnAccountHeaderListener=onAccountHeaderListener;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean saveAsXliff(final String targetLanguageCode,File xliffFile,Map<String,Map<String,String>> lng){  final String sourceLanguage="en";  OutputStreamWriter output;  try {    output=new OutputStreamWriter(new FileOutputStream(xliffFile),StandardCharsets.UTF_8.name());    output.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");    output.write("<xliff version='1.2' xmlns='urn:oasis:names:tc:xliff:document:1.2'> \n");    for (    String afilemap : lng.keySet()) {      output.write("<file original=\"" + afilemap + "\" "+ " source-language=\""+ sourceLanguage+ "\" ");      if (targetLanguageCode != null && !targetLanguageCode.isEmpty()) {        output.write(" target-language=\"" + targetLanguageCode + "\" ");      }      output.write(" datatype=\"html\">\n");      output.write("  <body>\n");      Map<String,String> txtmap=lng.get(afilemap);      for (      String source : txtmap.keySet()) {        String target=txtmap.get(source);        output.write("    <trans-unit id=\"" + Integer.toHexString(source.hashCode()) + "\" xml:space=\"preserve\" approved=\"no\"");        if (target == null || target.isEmpty()) {          output.write(" translate=\"yes\">\n");          output.write("       <source>" + toXmlStr(source) + "</source>\n");        } else {          output.write(">\n");          output.write("       <source>" + toXmlStr(source) + "</source>\n");          output.write("       <target" + (target.equals(source) ? "" : " state='translated'") + ">"+ toXmlStr(target)+ "</target>\n");        }        output.write("    </trans-unit>\n");      }      output.write("  </body>\n");      output.write("</file>\n\n");    }    output.write("</xliff>\n");    output.close();  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public void testForceFirstLetterWithKeep() throws Exception {  Reader reader=new StringReader("kitten");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","keep","kitten","forceFirstLetter","true").create(stream);  assertTokenStreamContents(stream,new String[]{"Kitten"});}  }
class C{  public void testLocalInfileWithUrl() throws Exception {  File infile=File.createTempFile("foo","txt");  infile.deleteOnExit();  String url=infile.toURL().toExternalForm();  FileWriter output=new FileWriter(infile);  output.write("Test");  output.flush();  output.close();  createTable("testLocalInfileWithUrl","(field1 LONGTEXT)");  Properties props=new Properties();  props.setProperty("allowUrlInLocalInfile","true");  Connection loadConn=getConnectionWithProps(props);  Statement loadStmt=loadConn.createStatement();  String charset=" CHARACTER SET " + CharsetMapping.getMysqlCharsetForJavaEncoding(((MySQLConnection)loadConn).getEncoding(),(com.mysql.jdbc.Connection)loadConn);  try {    loadStmt.executeQuery("LOAD DATA LOCAL INFILE '" + url + "' INTO TABLE testLocalInfileWithUrl"+ charset);  } catch (  SQLException sqlEx) {    sqlEx.printStackTrace();    throw sqlEx;  }  this.rs=this.stmt.executeQuery("SELECT * FROM testLocalInfileWithUrl");  assertTrue(this.rs.next());  assertTrue("Test".equals(this.rs.getString(1)));  int count=this.stmt.executeUpdate("DELETE FROM testLocalInfileWithUrl");  assertTrue(count == 1);  StringBuilder escapedPath=new StringBuilder();  String path=infile.getCanonicalPath();  for (int i=0; i < path.length(); i++) {    char c=path.charAt(i);    if (c == '\\') {      escapedPath.append('\\');    }    escapedPath.append(c);  }  loadStmt.execute("LOAD DATA LOCAL INFILE '" + escapedPath.toString() + "' INTO TABLE testLocalInfileWithUrl"+ charset);  this.rs=this.stmt.executeQuery("SELECT * FROM testLocalInfileWithUrl");  assertTrue(this.rs.next());  assertTrue("Test".equals(this.rs.getString(1)));  try {    loadStmt.execute("LOAD DATA LOCAL INFILE 'foo:///' INTO TABLE testLocalInfileWithUrl" + charset);  } catch (  SQLException sqlEx) {    assertTrue(sqlEx.getMessage() != null);    assertTrue(sqlEx.getMessage().indexOf("FileNotFoundException") != -1);  }}  }
class C{  public static Double toDouble(boolean b){  return new Double(b ? 1 : 0);}  }
class C{  public ToolbarArmedXYGraph(){  this(new XYGraph());}  }
class C{  static <T>ItemsSketch<T> copy(final ItemsSketch<T> sketch){  final ItemsSketch<T> qsCopy=ItemsSketch.getInstance(sketch.k_,sketch.comparator_);  qsCopy.n_=sketch.n_;  qsCopy.minValue_=sketch.getMinValue();  qsCopy.maxValue_=sketch.getMaxValue();  qsCopy.combinedBufferItemCapacity_=sketch.getCombinedBufferAllocatedCount();  qsCopy.baseBufferCount_=sketch.getBaseBufferCount();  qsCopy.bitPattern_=sketch.getBitPattern();  Object[] combBuf=sketch.getCombinedBuffer();  qsCopy.combinedBuffer_=Arrays.copyOf(combBuf,combBuf.length);  return qsCopy;}  }
class C{  public static boolean checkNetworkForSecondODPair(Network network){  return (network.getNodes().containsKey(Id.createNodeId(9)) && network.getNodes().containsKey(Id.createNodeId(10)) && network.getNodes().containsKey(Id.createNodeId(11))&& network.getNodes().containsKey(Id.createNodeId(12)));}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  private static int gallopRight(Object key,Object[] a,int base,int len,int hint,Comparator c){  assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public Persistence(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  public static double probToLogOdds(double prob){  if (gr(prob,1) || (sm(prob,0))) {    throw new IllegalArgumentException("probToLogOdds: probability must " + "be in [0,1] " + prob);  }  double p=SMALL + (1.0 - 2 * SMALL) * prob;  return Math.log(p / (1 - p));}  }
class C{  public boolean isLargestMaxZ(final PlanetModel planetModel){  if (maxZ == null)   return false;  return planetModel.getMaximumZValue() - maxZ < Vector.MINIMUM_RESOLUTION;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void refreshDashboard(){  ServerPushTemplate template=new ServerPushTemplate(desktop);  for (int i=0; i < dashboardPanels.size(); i++) {    Properties ctx=(Properties)template.getDesktop().getSession().getAttribute(SessionContextListener.SESSION_CTX);    if (ctx != null) {      ServerContext serverContext=ServerContext.getCurrentInstance();      if (serverContext == null) {        serverContext=ServerContext.newInstance();        serverContext.putAll(ctx);      } else {        String id=ctx.getProperty(SessionContextListener.SERVLET_SESSION_ID);        if (id == null || !id.equals(serverContext.getProperty(SessionContextListener.SERVLET_SESSION_ID))) {          serverContext.clear();          serverContext.putAll(ctx);        }      }    }    dashboardPanels.get(i).refresh(template);  }  Properties ctx=(Properties)template.getDesktop().getSession().getAttribute(SessionContextListener.SESSION_CTX);  if (ctx != null) {    ServerContext serverContext=ServerContext.getCurrentInstance();    if (serverContext == null) {      serverContext=ServerContext.newInstance();      serverContext.putAll(ctx);    } else {      String id=ctx.getProperty(SessionContextListener.SERVLET_SESSION_ID);      if (id == null || !id.equals(serverContext.getProperty(SessionContextListener.SERVLET_SESSION_ID))) {        serverContext.clear();        serverContext.putAll(ctx);      }    }  }  appDesktop.onServerPush(template);}  }
class C{  public void addMember(Environment env,MemberDefinition f){switch (f.getModifiers() & (M_PUBLIC | M_PRIVATE | M_PROTECTED)) {case M_PUBLIC:case M_PRIVATE:case M_PROTECTED:case 0:    break;default :  env.error(f.getWhere(),"inconsistent.modifier",f);if (f.isPublic()) {  f.subModifiers(M_PRIVATE | M_PROTECTED);} else {  f.subModifiers(M_PRIVATE);}break;}if (f.isStatic() && !isTopLevel() && !f.isSynthetic()) {if (f.isMethod()) {env.error(f.getWhere(),"static.inner.method",f,this);f.subModifiers(M_STATIC);} else if (f.isVariable()) {if (!f.isFinal() || f.isBlankFinal()) {env.error(f.getWhere(),"static.inner.field",f.getName(),this);f.subModifiers(M_STATIC);}} else {f.subModifiers(M_STATIC);}}if (f.isMethod()) {if (f.isConstructor()) {if (f.getClassDefinition().isInterface()) {env.error(f.getWhere(),"intf.constructor");return;}if (f.isNative() || f.isAbstract() || f.isStatic()|| f.isSynchronized()|| f.isFinal()) {env.error(f.getWhere(),"constr.modifier",f);f.subModifiers(M_NATIVE | M_ABSTRACT | M_STATIC| M_SYNCHRONIZED| M_FINAL);}} else if (f.isInitializer()) {if (f.getClassDefinition().isInterface()) {env.error(f.getWhere(),"intf.initializer");return;}}if ((f.getType().getReturnType()).isVoidArray()) {env.error(f.getWhere(),"void.array");}if (f.getClassDefinition().isInterface() && (f.isStatic() || f.isSynchronized() || f.isNative()|| f.isFinal()|| f.isPrivate()|| f.isProtected())) {env.error(f.getWhere(),"intf.modifier.method",f);f.subModifiers(M_STATIC | M_SYNCHRONIZED | M_NATIVE| M_FINAL| M_PRIVATE);}if (f.isTransient()) {env.error(f.getWhere(),"transient.meth",f);f.subModifiers(M_TRANSIENT);}if (f.isVolatile()) {env.error(f.getWhere(),"volatile.meth",f);f.subModifiers(M_VOLATILE);}if (f.isAbstract()) {if (f.isPrivate()) {env.error(f.getWhere(),"abstract.private.modifier",f);f.subModifiers(M_PRIVATE);}if (f.isStatic()) {env.error(f.getWhere(),"abstract.static.modifier",f);f.subModifiers(M_STATIC);}if (f.isFinal()) {env.error(f.getWhere(),"abstract.final.modifier",f);f.subModifiers(M_FINAL);}if (f.isNative()) {env.error(f.getWhere(),"abstract.native.modifier",f);f.subModifiers(M_NATIVE);}if (f.isSynchronized()) {env.error(f.getWhere(),"abstract.synchronized.modifier",f);f.subModifiers(M_SYNCHRONIZED);}}if (f.isAbstract() || f.isNative()) {if (f.getValue() != null) {env.error(f.getWhere(),"invalid.meth.body",f);f.setValue(null);}} else {if (f.getValue() == null) {if (f.isConstructor()) {  env.error(f.getWhere(),"no.constructor.body",f);} else {  env.error(f.getWhere(),"no.meth.body",f);}f.addModifiers(M_ABSTRACT);}}Vector arguments=f.getArguments();if (arguments != null) {int argumentLength=arguments.size();Type argTypes[]=f.getType().getArgumentTypes();for (int i=0; i < argTypes.length; i++) {Object arg=arguments.elementAt(i);long where=f.getWhere();if (arg instanceof MemberDefinition) {  where=((MemberDefinition)arg).getWhere();  arg=((MemberDefinition)arg).getName();}if (argTypes[i].isType(TC_VOID) || argTypes[i].isVoidArray()) {  env.error(where,"void.argument",arg);}}}} else if (f.isInnerClass()) {if (f.isVolatile() || f.isTransient() || f.isNative()|| f.isSynchronized()) {env.error(f.getWhere(),"inner.modifier",f);f.subModifiers(M_VOLATILE | M_TRANSIENT | M_NATIVE| M_SYNCHRONIZED);}if (f.getClassDefinition().isInterface() && (f.isPrivate() || f.isProtected())) {env.error(f.getWhere(),"intf.modifier.field",f);f.subModifiers(M_PRIVATE | M_PROTECTED);f.addModifiers(M_PUBLIC);ClassDefinition c=f.getInnerClass();c.subModifiers(M_PRIVATE | M_PROTECTED);c.addModifiers(M_PUBLIC);}} else {if (f.getType().isType(TC_VOID) || f.getType().isVoidArray()) {env.error(f.getWhere(),"void.inst.var",f.getName());return;}if (f.isSynchronized() || f.isAbstract() || f.isNative()) {env.error(f.getWhere(),"var.modifier",f);f.subModifiers(M_SYNCHRONIZED | M_ABSTRACT | M_NATIVE);}if (f.isStrict()) {env.error(f.getWhere(),"var.floatmodifier",f);f.subModifiers(M_STRICTFP);}if (f.isTransient() && isInterface()) {env.error(f.getWhere(),"transient.modifier",f);f.subModifiers(M_TRANSIENT);}if (f.isVolatile() && (isInterface() || f.isFinal())) {env.error(f.getWhere(),"volatile.modifier",f);f.subModifiers(M_VOLATILE);}if (f.isFinal() && (f.getValue() == null) && isInterface()) {env.error(f.getWhere(),"initializer.needed",f);f.subModifiers(M_FINAL);}if (f.getClassDefinition().isInterface() && (f.isPrivate() || f.isProtected())) {env.error(f.getWhere(),"intf.modifier.field",f);f.subModifiers(M_PRIVATE | M_PROTECTED);f.addModifiers(M_PUBLIC);}}if (!f.isInitializer()) {for (MemberDefinition f2=getFirstMatch(f.getName()); f2 != null; f2=f2.getNextMatch()) {if (f.isVariable() && f2.isVariable()) {env.error(f.getWhere(),"var.multidef",f,f2);return;} else if (f.isInnerClass() && f2.isInnerClass() && !f.getInnerClass().isLocal()&& !f2.getInnerClass().isLocal()) {env.error(f.getWhere(),"inner.class.multidef",f);return;}}}super.addMember(env,f);}  }
class C{  private void forEntryPoints(){  for (  MethodOrMethodContext momc : PTABridge.v().getReachableMethodContexts()) {    if (RCFG.isUserEntryPoint(momc)) {      logger.info("Found entry  point {}",momc);      CallChainBuilder cb=new CallChainBuilder(timeout,true);      CallChainInfo cci=cb.process_call_chain(null,momc);      cci.type="entry-point";      cci.link="as_entry_point";      cci.calculate_scores();      entry_points.add(cci);    }  }}  }
class C{  public void doCopy(){  jTextArea1.copy();}  }
class C{  public CompleteRecordingFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isAchieved()) {    if (getManualActual().signum() == 0)     setManualActual(Env.ONE);    if (getDateDoc() == null)     setDateDoc(new Timestamp(System.currentTimeMillis()));  }  return true;}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (globalConfig.isDiskCacheEnabled() && (mDiskLruCache == null || mDiskLruCache.isClosed())) {      File diskCacheDir=new File(globalConfig.getDiskCachePath());      if (diskCacheDir.exists() || diskCacheDir.mkdirs()) {        long availableSpace=OtherUtils.getAvailableSpace(diskCacheDir);        long diskCacheSize=globalConfig.getDiskCacheSize();        diskCacheSize=availableSpace > diskCacheSize ? diskCacheSize : availableSpace;        try {          mDiskLruCache=LruDiskCache.open(diskCacheDir,1,1,diskCacheSize);          mDiskLruCache.setFileNameGenerator(globalConfig.getFileNameGenerator());          LogUtils.d("create disk cache success");        } catch (        Throwable e) {          mDiskLruCache=null;          LogUtils.e("create disk cache error",e);        }      }    }  }}  }
class C{  public static double nextBurr2(double r,double k,int nr,RandomEngine randomGenerator){  double y, u;  u=randomGenerator.raw();  y=Math.exp(-Math.log(u) / r) - 1.0;switch (nr) {case 3:    return (Math.exp(-Math.log(y) / k));case 4:  y=Math.exp(k * Math.log(y)) + 1.0;y=k / y;return (y);case 5:y=Math.atan(-Math.log(y / k));return (y);case 6:y=-Math.log(y / k) / r;y=Math.log(y + Math.sqrt(y * y + 1.0));return (y);case 9:y=1.0 + 2.0 * u / (k * (1.0 - u));y=Math.exp(Math.log(y) / r) - 1.0;return Math.log(y);case 12:return Math.exp(Math.log(y) / k);}return 0;}  }
class C{  private PlacemarkType createPlacemark(final String stopid,final CountSimComparison csc,final double relativeError,final int timestep,PtCountsType type){  StringBuilder stringBuffer=new StringBuilder();  PlacemarkType placemark=kmlObjectFactory.createPlacemarkType();  stringBuffer.delete(0,stringBuffer.length());  stringBuffer.append(STOP);  stringBuffer.append(stopid);  placemark.setDescription(createPlacemarkDescription(stopid,csc,relativeError,timestep,type));  return placemark;}  }
class C{  public RelationalJMapper(final Class<T> configuredClass,String xmlPath){  this.configuredClass=configuredClass;  try {    init(xmlPath);  } catch (  MalformedURLException e) {    JmapperLog.ERROR(e);  }catch (  IOException e) {    JmapperLog.ERROR(e);  }catch (  ClassNotMappedException e) {    JmapperLog.ERROR(e);  }catch (  MappingErrorException e) {    JmapperLog.ERROR(e);  }}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public static Map<String,Object> scaleImage(BufferedImage bufImg,double imgHeight,double imgWidth,Map<String,Map<String,String>> dimensionMap,String sizeType,Locale locale){  BufferedImage bufNewImg;  double defaultHeight, defaultWidth, scaleFactor;  Map<String,Object> result=new LinkedHashMap<String,Object>();  if (dimensionMap.get(sizeType).containsKey("height")) {    defaultHeight=Double.parseDouble(dimensionMap.get(sizeType).get("height").toString());  } else {    defaultHeight=-1;  }  if (dimensionMap.get(sizeType).containsKey("width")) {    defaultWidth=Double.parseDouble(dimensionMap.get(sizeType).get("width").toString());  } else {    defaultWidth=-1;  }  if (defaultHeight == 0.0 || defaultWidth == 0.0) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.one_default_dimension_is_null",locale) + " : defaultHeight = " + defaultHeight+ " ; defaultWidth = "+ defaultWidth;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  if (defaultHeight == -1) {    scaleFactor=defaultWidth / imgWidth;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.width_scale_factor_is_null",locale) + "  (defaultWidth = " + defaultWidth+ "; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }  } else   if (defaultWidth == -1) {    scaleFactor=defaultHeight / imgHeight;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.height_scale_factor_is_null",locale) + "  (defaultHeight = " + defaultHeight+ "; imgHeight = "+ imgHeight;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }  } else   if (imgHeight > imgWidth) {    scaleFactor=defaultHeight / imgHeight;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.height_scale_factor_is_null",locale) + "  (defaultHeight = " + defaultHeight+ "; imgHeight = "+ imgHeight;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    if (defaultWidth < (imgWidth * scaleFactor)) {      scaleFactor=defaultWidth / imgWidth;    }  } else {    scaleFactor=defaultWidth / imgWidth;    if (scaleFactor == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ImageTransform.width_scale_factor_is_null",locale) + "  (defaultWidth = " + defaultWidth+ "; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    if (defaultHeight < (imgHeight * scaleFactor)) {      scaleFactor=defaultHeight / imgHeight;    }  }  if (scaleFactor == 0.0) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.final_scale_factor_is_null",locale) + " = " + scaleFactor;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  int bufImgType;  if (BufferedImage.TYPE_CUSTOM == bufImg.getType()) {    String errMsg=UtilProperties.getMessage(resource,"ImageTransform.unknown_buffered_image_type",locale);    Debug.logWarning(errMsg,module);    bufImgType=BufferedImage.TYPE_INT_ARGB_PRE;  } else {    bufImgType=bufImg.getType();  }  Image newImg=bufImg.getScaledInstance((int)(imgWidth * scaleFactor),(int)(imgHeight * scaleFactor),Image.SCALE_SMOOTH);  bufNewImg=ImageTransform.toBufferedImage(newImg,bufImgType);  result.put("responseMessage","success");  result.put("bufferedImage",bufNewImg);  result.put("scaleFactor",scaleFactor);  return result;}  }
class C{  public static boolean isRegularCharacter(int c){  return !(isWhiteSpace(c) || isDelimiter(c));}  }
class C{  public CrowdedScoringFunctionFactory(ScoringFunctionFactory delegate){  this.delegate=delegate;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:18.881 -0400",hash_original_method="E45D810E27DEB8EDDA67451B15978E84",hash_generated_method="A5B6C243EF046598C8D2E0E941E8B4F5") private Bitmap loadConstrainedBitmap(Uri uri,int maxSideLength) throws FileNotFoundException {  if (maxSideLength <= 0 || uri == null || mContext == null) {    throw new IllegalArgumentException("bad argument to getScaledBitmap");  }  BitmapFactory.Options opt=new BitmapFactory.Options();  opt.inJustDecodeBounds=true;  loadBitmap(uri,opt);  int w=opt.outWidth;  int h=opt.outHeight;  if (w <= 0 || h <= 0) {    return null;  }  int imageSide=Math.max(w,h);  int sampleSize=1;  while (imageSide > maxSideLength) {    imageSide>>>=1;    sampleSize<<=1;  }  if (sampleSize <= 0 || 0 >= (int)(Math.min(w,h) / sampleSize)) {    return null;  }  BitmapFactory.Options decodeOptions=null;synchronized (mLock) {    mDecodeOptions=new BitmapFactory.Options();    mDecodeOptions.inMutable=true;    mDecodeOptions.inSampleSize=sampleSize;    decodeOptions=mDecodeOptions;  }  try {    return loadBitmap(uri,decodeOptions);  }  finally {synchronized (mLock) {      mDecodeOptions=null;    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_VARIABLE__DECLARED_COVARIANT:    setDeclaredCovariant(DECLARED_COVARIANT_EDEFAULT);  return;case TypesPackage.TYPE_VARIABLE__DECLARED_CONTRAVARIANT:setDeclaredContravariant(DECLARED_CONTRAVARIANT_EDEFAULT);return;case TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND:setDeclaredUpperBound((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  @Override public double calculateLikelihood(List<BranchOperation> branchOperations,List<NodeOperation> nodeOperations,int rootNodeNumber) throws LikelihoodUnderflowException {  branchNormalization=rateTransformation.getNormalization();  int branchUpdateCount=0;  for (  BranchOperation op : branchOperations) {    branchUpdateIndices[branchUpdateCount]=op.getBranchNumber();    branchLengths[branchUpdateCount]=op.getBranchLength() * branchNormalization;    branchUpdateCount++;  }  if (!updateTipData.isEmpty()) {    if (updateTipData.getFirst() == -1) {      setAllTipData(flip);    } else {      while (!updateTipData.isEmpty()) {        int tipIndex=updateTipData.removeFirst();        setTipData(tipIndex,flip);      }    }  }  if (updateDiffusionModel) {    diffusionProcessDelegate.setDiffusionModels(cdi,flip);  }  if (branchUpdateCount > 0) {    diffusionProcessDelegate.updateDiffusionMatrices(cdi,branchUpdateIndices,branchLengths,branchUpdateCount,flip);  }  if (flip) {    for (    NodeOperation op : nodeOperations) {      partialBufferHelper.flipOffset(op.getNodeNumber());    }  }  int operationCount=nodeOperations.size();  int k=0;  for (  NodeOperation op : nodeOperations) {    int nodeNum=op.getNodeNumber();    operations[k + 0]=partialBufferHelper.getOffsetIndex(nodeNum);    operations[k + 1]=partialBufferHelper.getOffsetIndex(op.getLeftChild());    operations[k + 2]=diffusionProcessDelegate.getMatrixIndex(op.getLeftChild());    operations[k + 3]=partialBufferHelper.getOffsetIndex(op.getRightChild());    operations[k + 4]=diffusionProcessDelegate.getMatrixIndex(op.getRightChild());    k+=ContinuousDiffusionIntegrator.OPERATION_TUPLE_SIZE;  }  int[] degreesOfFreedom=null;  double[] outerProducts=null;  if (computeWishartStatistics) {    degreesOfFreedom=new int[numTraits];    outerProducts=new double[dimTrait * dimTrait * numTraits];    cdi.setWishartStatistics(degreesOfFreedom,outerProducts);  }  cdi.updatePartials(operations,operationCount,computeWishartStatistics);  double[] logLikelihoods=new double[numTraits];  rootProcessDelegate.calculateRootLogLikelihood(cdi,partialBufferHelper.getOffsetIndex(rootNodeNumber),logLikelihoods,computeWishartStatistics);  if (computeWishartStatistics) {    cdi.getWishartStatistics(degreesOfFreedom,outerProducts);    wishartStatistics=new WishartSufficientStatistics(degreesOfFreedom,outerProducts);  } else {    wishartStatistics=null;  }  double logL=0.0;  for (  double d : logLikelihoods) {    logL+=d;  }  updateDiffusionModel=false;  return logL;}  }
class C{  public short readShortLE() throws IOException {  inputStream.readFully(workSpace,0,2);  return (short)(((workSpace[1] & 0xff) << 8) | (workSpace[0] & 0xff));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tFull name of clusterer to use. eg:\n" + "\t\tweka.clusterers.EM\n" + "\tAdditional options after the '--'.\n"+ "\t(default: weka.clusterers.EM)","W",1,"-W <clusterer name>"));  newVector.addElement(new Option("\tThe range of attributes the clusterer should ignore." + "\n\t(the class attribute is automatically ignored)","I",1,"-I <att1,att2-att4,...>"));  return newVector.elements();}  }
class C{  public Complex divide(Complex secondComplex){  return new Complex((a * secondComplex.a + b * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)),(b * secondComplex.a - a * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)));}  }
class C{  private String expandAroundCenter(String s,int i,int j){  int l=i;  int r=j;  int n=s.length();  while (l >= 0 && r <= n - 1 && s.charAt(l) == s.charAt(r)) {    l--;    r++;  }  return s.substring(l + 1,r);}  }
class C{  void removeFromTree(){  if (mChildren != null) {    for (    Tab t : mChildren) {      t.setParent(null);    }  }  if (mParent != null) {    mParent.mChildren.remove(this);  }  mCapture=null;  deleteThumbnail();}  }
class C{  public void insertPush2(int opcode,JumpInsnNode position,InsnList list){  list.insertBefore(position,new InsnNode(Opcodes.DUP2));  MethodInsnNode sub=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"intSub",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,sub);  insertBranchIdPlaceholder(currentMethodNode,position);  MethodInsnNode push=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"pushPredicate",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE}),false);  list.insertBefore(position,push);}  }
class C{  public void keyTyped(KeyEvent evt){  int modifiers=evt.getModifiers();  char c=evt.getKeyChar();  if (c != KeyEvent.CHAR_UNDEFINED) {    if (c >= 0x20 && c != 0x7f) {      KeyStroke keyStroke=KeyStroke.getKeyStroke(Character.toUpperCase(c));      Object o=currentBindings.get(keyStroke);      if (o instanceof Hashtable) {        currentBindings=(Hashtable)o;        return;      } else       if (o instanceof ActionListener) {        currentBindings=bindings;        executeAction((ActionListener)o,evt.getSource(),String.valueOf(c));        return;      }      currentBindings=bindings;      if (grabAction != null) {        handleGrabAction(evt);        return;      }      if (repeat && Character.isDigit(c)) {        repeatCount*=10;        repeatCount+=(c - '0');        return;      }      executeAction(INSERT_CHAR,evt.getSource(),String.valueOf(evt.getKeyChar()));      repeatCount=0;      repeat=false;    }  }}  }
class C{  public Comment findComment(DbObject object){  if (object.getType() == DbObject.COMMENT) {    return null;  }  String key=Comment.getKey(object);  return comments.get(key);}  }
class C{  public CGAffineTransform preConcatenate(CGAffineTransform t){  return multiply(this,t);}  }
class C{  public TransactionTest(String name){  super(name);}  }
class C{  protected void report(String where){  if (!hints[DISABLE_OPENGL_ERRORS]) {    int err=pgl.getError();    if (err != 0) {      String errString=pgl.errorString(err);      String msg="OpenGL error " + err + " at "+ where+ ": "+ errString;      PGraphics.showWarning(msg);    }  }}  }
class C{  public boolean isStrictNullChecks(){  return strictNullChecks;}  }
class C{  public static void directErrors(String filename,boolean append,boolean alsoToErrStream){  errorAppend=append;  errorFile=new File(filename);  notifyErr=alsoToErrStream;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.492 -0500",hash_original_method="3B6DAA204E499460163C13A0179862F4",hash_generated_method="282C4815616568D494CFF50146B0716A") public int hashCode(){  return this.address.hashCode();}  }
class C{  public Cirque(){  super();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.834 -0500",hash_original_method="E45025BA49DB75441FB058D043F13559",hash_generated_method="70809E6D41784C91458DFE99BB274D58") private void disableDataCallInEmergencyCall(String dialString){  if (PhoneNumberUtils.isLocalEmergencyNumber(dialString,phone.getContext())) {    if (Phone.DEBUG_PHONE)     log("disableDataCallInEmergencyCall");    mIsInEmergencyCall=true;    phone.mDataConnectionTracker.setInternalDataEnabled(false);  }}  }
class C{  public String reverseStringB(String s){  return new StringBuilder(s).reverse().toString();}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(this.coefficient);  if (this.variables.length > 0) {    buf.append("*");  }  for (  int variable : this.variables) {    buf.append("(V");    buf.append(variable);    buf.append(")");  }  return buf.toString();}  }
class C{  protected CCMultiplexLayer(CCLayer... params){  layers=new ArrayList<CCLayer>();  layers.addAll(Arrays.asList(params));  enabledLayer=0;  addChild(layers.get(enabledLayer));}  }
class C{  public void addConnection(int connectionId,IAccessibilityServiceConnection connection){synchronized (sConnectionCache) {    sConnectionCache.put(connectionId,connection);  }}  }
class C{  private void addRandomSocialEdges(){  Bag people=socialNetwork.getAllNodes();  for (  Object person : people) {    for (int i=0; i < 5; i++) {      Object personB=null;      do {        personB=people.get(random.nextInt(people.numObjs));      } while (person == personB);      double buddiness=1.0;      socialNetwork.addEdge(person,personB,new Double(buddiness));    }  }}  }
class C{  public void color(Color color) throws IOException {  getCurrentStyle()[3]=color;}  }
class C{  public void println(long x){  out.println(x);}  }
class C{  public Y ge(String value){  if (value == null || value.trim().length() == 0) {    return super.ge((Long)null);  } else {    return super.ge(Long.parseLong(value.trim()));  }}  }
class C{  private void search(Episode episode,String token,XMLRPCCallback callback){  try {    XMLRPCClient client=new XMLRPCClient(new URL(mApiUrl),mUserAgent);    Map<String,String> option=new HashMap<>();    option.put("imdbid",episode.imdbId.replace("tt",""));    option.put("season",String.format(Locale.US,"%d",episode.season));    option.put("episode",String.format(Locale.US,"%d",episode.episode));    option.put("sublanguageid","all");    client.callAsync(callback,"SearchSubtitles",token,new Object[]{option});  } catch (  MalformedURLException e) {    e.printStackTrace();  }}  }
class C{  public DTLZ7(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE:    return "CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE";case CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE:  return "CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE";case CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE:return "CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE";}return "INVALID CUsharedconfig: " + n;}  }
class C{  public synchronized void addListener(TestListener listener){  fListeners.add(listener);}  }
class C{  public boolean canBeLongAddress(int address){  return ((address >= 0) && (address <= 10239));}  }
class C{  public boolean isCheckRequiredForGroup(final String groupName){  notNull(groupName);  return currentHash == null;}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    RhinoScriptBuilder builder=null;    if (scope == null) {      final InputStream initStream=LessCss.class.getResourceAsStream(SCRIPT_INIT);      builder=RhinoScriptBuilder.newClientSideAwareChain().evaluateChain(initStream,SCRIPT_INIT).evaluateChain(getScriptAsStream(),DEFAULT_LESS_JS);      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final IOException ex) {    throw new IllegalStateException("Failed reading javascript less.js",ex);  }catch (  final Exception e) {    LOG.error("Processing error:" + e.getMessage(),e);    throw new WroRuntimeException("Processing error",e);  }}  }
class C{  public boolean iAmTheOnlyOne(JmDNSImpl jmDNSImpl){  return false;}  }
class C{  public MatrixObject[] extractInputMatrices(ExecutionContext ec){  ArrayList<MatrixObject> inputmat=new ArrayList<MatrixObject>();  inputDataTypes=new DataType[inputVars.length];  for (int i=0; i < inputVars.length; i++) {    Data d=ec.getVariable(inputVars[i]);    inputDataTypes[i]=d.getDataType();    if (d.getDataType() == DataType.MATRIX) {      inputmat.add((MatrixObject)d);    } else     if (d.getDataType() == DataType.FRAME) {      FrameObject fo=(FrameObject)d;      MatrixObject mo=new MatrixObject(fo.getValueType(),fo.getFileName(),fo.getMetaData());      mo.setFileFormatProperties(fo.getFileFormatProperties());      inputmat.add(mo);    }  }  inputMatrices=inputmat.toArray(new MatrixObject[inputmat.size()]);  populateInputs();  return inputMatrices;}  }
class C{  private void addPosition(int offset,int length,SemanticHighlighting highlighting){  HighlightedPosition highlightedPosition=DtoFactory.getInstance().createDto(HighlightedPosition.class);  highlightedPosition.setLength(length);  highlightedPosition.setOffset(offset);  highlightedPosition.setType(highlighting.getType());  fAddedPositions.get().add(highlightedPosition);}  }
class C{  public static boolean loadStore(IPreferenceStore store,OS os,CommandDataList cmdDataList,MenuDataList menuDataList){  Command cmdProper=getProperCommand();  List<String> openCmdList=new ArrayList<String>();  List<String> runCmdList=new ArrayList<String>();  List<String> exploreCmdList=new ArrayList<String>();  List<String> copyPathList=new ArrayList<String>();  for (int instanceId=0; instanceId < 3; instanceId++) {    initializeDefaults(store,cmdProper,instanceId);    if (store.getBoolean(PreferenceEntry.preferenceTargetEnabled.getString(instanceId))) {      final String postfix=" (" + Version.v1_5.getName() + ")";      String IdStr=store.getString(PreferenceEntry.preferenceListString.getString(instanceId));      Command command=Command.valueOf(IdStr);      int position=menuDataList.size();      String openCmd=store.getString(PreferenceEntry.preferenceTargetOpen.getString(instanceId));      if (!openCmdList.contains(openCmd)) {        openCmdList.add(openCmd);        CommandData cmdDataOpen=new CommandData(null,PresetType.presetUser,os,command.getConsole(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryOpen,CommandType.commandTypeExecute,PrefsV1_4.migrateCommandVariables(openCmd));        cmdDataList.add(cmdDataOpen);        MenuData menuDataOpen=new MenuData(cmdDataOpen.getId(),true,MenuNameType.menuNameTypeOpenHere,null,cmdDataOpen.getId());        menuDataOpen.setPosition(position++);        menuDataOpen.setNamePattern(menuDataOpen.getNamePattern() + postfix);        menuDataOpen.setNameType(MenuNameType.menuNameTypeUser);        menuDataList.add(menuDataOpen);      }      String runCmd=store.getString(PreferenceEntry.preferenceTargetRun.getString(instanceId));      if (!runCmdList.contains(runCmd)) {        runCmdList.add(runCmd);        CommandData cmdDataRun=new CommandData(null,PresetType.presetUser,os,command.getConsole(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryRun,CommandType.commandTypeExecute,PrefsV1_4.migrateCommandVariables(runCmd));        cmdDataList.add(cmdDataRun);        MenuData menuDataRun=new MenuData(cmdDataRun.getId(),true,MenuNameType.menuNameTypeRunWith,null,cmdDataRun.getId());        menuDataRun.setPosition(position++);        menuDataRun.setNamePattern(menuDataRun.getNamePattern() + postfix);        menuDataRun.setNameType(MenuNameType.menuNameTypeUser);        menuDataList.add(menuDataRun);      }      String exploreCmd=store.getString(PreferenceEntry.preferenceTargetExplore.getString(instanceId));      if (!exploreCmdList.contains(exploreCmd)) {        exploreCmdList.add(exploreCmd);        CommandData cmdDataExplore=new CommandData(null,PresetType.presetUser,os,command.getExplorer(),ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryExplore,CommandType.commandTypeExecute,PrefsV1_4.migrateCommandVariables(exploreCmd));        cmdDataList.add(cmdDataExplore);        MenuData menuDataExplore=new MenuData(cmdDataExplore.getId(),true,MenuNameType.menuNameTypeShowIn,null,cmdDataExplore.getId());        menuDataExplore.setPosition(position++);        menuDataExplore.setNamePattern(menuDataExplore.getNamePattern() + postfix);        menuDataExplore.setNameType(MenuNameType.menuNameTypeUser);        menuDataList.add(menuDataExplore);      }      String copyPathCmd=store.getString(PreferenceEntry.preferenceTargetCopyPath.getString(instanceId));      if (!copyPathList.contains(copyPathCmd)) {        copyPathList.add(copyPathCmd);        CommandData cmdDataCopyPath=new CommandData(null,PresetType.presetUser,os,"Full Path",ResourceType.resourceTypeFileOrDirectory,false,null,Category.categoryClipboard,CommandType.commandTypeClipboard,PrefsV1_4.migrateCommandVariables(copyPathCmd));        cmdDataList.add(cmdDataCopyPath);        MenuData menuDataCopyPath=new MenuData(cmdDataCopyPath.getId(),true,MenuNameType.menuNameTypeCopyToClipboard,null,cmdDataCopyPath.getId());        menuDataCopyPath.setPosition(position++);        menuDataCopyPath.setNamePattern(menuDataCopyPath.getNamePattern() + postfix);        menuDataCopyPath.setNameType(MenuNameType.menuNameTypeUser);        menuDataList.add(menuDataCopyPath);      }    }  }  return true;}  }
class C{  @Deprecated public static boolean box(MethodVisitor mv,Class type){  if (ReflectionCache.getCachedClass(type).isPrimitive && type != void.class) {    String returnString="(" + BytecodeHelper.getTypeDescription(type) + ")Ljava/lang/Object;";    mv.visitMethodInsn(INVOKESTATIC,DTT_CLASSNAME,"box",returnString,false);    return true;  }  return false;}  }
class C{  public void translate(double dx,double dy,double dz){  Transform3D other=new Transform3D();  other.setTranslation(new Vector3d(dx,dy,dz));  transform(other);}  }
class C{  public final Instance lastInstance(){  return (Instance)m_Instances.lastElement();}  }
class C{  public Request header(String key,String value){  Objects.requireNonNull(key);  Objects.requireNonNull(value);  _headers.put(key,value);  return this;}  }
class C{  public StructType defineQueryResultType(String name,Map<String,IDataType> tempTypes,AttributeDefinition... attrDefs) throws AtlasException {  AttributeInfo[] infos=new AttributeInfo[attrDefs.length];  for (int i=0; i < attrDefs.length; i++) {    infos[i]=new AttributeInfo(this,attrDefs[i],tempTypes);  }  return new StructType(this,name,null,infos);}  }
class C{  static void analyzeDependencies(Path jarpath) throws Exception {  System.out.format("Analyzing %s%n",jarpath);  try (JarFile jf=new JarFile(jarpath.toFile())){    Enumeration<JarEntry> entries=jf.entries();    while (entries.hasMoreElements()) {      JarEntry e=entries.nextElement();      String name=e.getName();      if (name.endsWith(".class")) {        ClassFile cf=ClassFile.read(jf.getInputStream(e));        for (        Dependency d : finder.findDependencies(cf)) {          String origin=toClassName(d.getOrigin().getName());          String target=toClassName(d.getTarget().getName());          unknownRefs.remove(origin);          knownTypes.add(origin);          if (!knownTypes.contains(target)) {            Set<String> refs=unknownRefs.get(target);            if (refs == null) {              refs=new HashSet<>();              unknownRefs.put(target,refs);            }            refs.add(origin);          }        }      }    }  } }  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public final void initialiseStatus(final String current){  progress_size=0;  status=new JProgressBar();  if (masterColor != null) {    status.setForeground(masterColor);  }  status.setStringPainted(true);  status.setMaximum(progress_max_size);  status.setMinimum(0);  updateStatus(current,4);}  }
class C{  @Override public void keyTyped(KeyEvent e){}  }
class C{  private void findAndProcessRestControllers() throws MojoExecutionException {  try {    log.debug("Finding and processing REST controllers.");    for (    Resource resource : ResourceUtils.getResources(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + restJavaPackage.replace('.','/') + "/**/*.java")) {      if (resource.isReadable()) {        JavaClassSource javaClassSource=Roaster.parse(JavaClassSource.class,resource.getInputStream());        sourceMap.put(javaClassSource.getName(),javaClassSource);        log.debug("Found Java source class \"" + javaClassSource.getName() + "\".");      }    }    for (    Resource resource : ResourceUtils.getResources(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(SystemPropertyUtils.resolvePlaceholders(restJavaPackage)) + "/**/*.class")) {      if (resource.isReadable()) {        MetadataReader metadataReader=new CachingMetadataReaderFactory(new PathMatchingResourcePatternResolver()).getMetadataReader(resource);        Class<?> clazz=Class.forName(metadataReader.getClassMetadata().getClassName());        processRestControllerClass(clazz);      }    }  } catch (  ClassNotFoundException|IOException e) {    throw new MojoExecutionException("Error processing REST classes. Reason: " + e.getMessage(),e);  }}  }
class C{  static boolean isActive(JComponent c){  JRootPane rootPane=c.getRootPane();  if (rootPane != null) {    Component component=rootPane.getParent();    if (component instanceof Window) {      return ((Window)component).isActive();    }  }  return true;}  }
class C{  public static boolean instanceofFloatArray(Object o){  return getImplementation().instanceofFloatArray(o);}  }
class C{  public Object resolve(Object source) throws Exception {  if (resolve != null) {    return resolve.call(context,source);  }  return source;}  }
class C{  public float put(double key,float value){  float previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public Node selectFirst(String query){  List<Node> selectedNodes=select(query);  if (selectedNodes.isEmpty()) {    return null;  }  return selectedNodes.get(0);}  }
class C{  public void mergeContributionFromShard(int shardNumber,ResponseBuilder rb,NamedList<Object> value){  assert null != value : "can't merge in null data";  if (!shardHasContributed(shardNumber)) {    sourceShards.set(shardNumber);    count+=PivotFacetHelper.getCount(value);  }  List<NamedList<Object>> shardChildPivots=PivotFacetHelper.getPivots(value);  if (null == childPivot) {    childPivot=PivotFacetField.createFromListOfNamedLists(shardNumber,rb,this,shardChildPivots);  } else {    childPivot.contributeFromShard(shardNumber,rb,shardChildPivots);  }}  }
class C{  public String toString(){  return numerator + "/" + denominator;}  }
class C{  public static JDKToolLauncher createUsingTestJDK(String tool){  return new JDKToolLauncher(tool,false);}  }
class C{  public List<LDUpdate> applyUpdates(){  List<LDUpdate> appliedUpdates=new ArrayList<LDUpdate>();  LDUpdate update=null;  while (ldUpdates.peek() != null) {    try {      update=ldUpdates.take();    } catch (    Exception e) {      log.error("Error reading link discovery update.",e);    }    if (log.isDebugEnabled()) {      log.debug("Applying update: {}",update);    }switch (update.getOperation()) {case LINK_UPDATED:      addOrUpdateLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort(),update.getLatency(),update.getType());    break;case LINK_REMOVED:  removeLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort());break;case SWITCH_UPDATED:addOrUpdateSwitch(update.getSrc());break;case SWITCH_REMOVED:removeSwitch(update.getSrc());break;case TUNNEL_PORT_ADDED:addTunnelPort(update.getSrc(),update.getSrcPort());break;case TUNNEL_PORT_REMOVED:removeTunnelPort(update.getSrc(),update.getSrcPort());break;case PORT_UP:case PORT_DOWN:break;}appliedUpdates.add(update);}return (Collections.unmodifiableList(appliedUpdates));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void disableUserInteractions(View view){  view.setClickable(false);  if (view instanceof ViewGroup) {    ViewGroup viewGroup=(ViewGroup)view;    for (int i=0; i < viewGroup.getChildCount(); i++) {      disableUserInteractions(viewGroup.getChildAt(i));    }  }}  }
class C{  void authenticationFailed(){  authenticationFailed(null);}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  public AssociationClassContent_ createAssociationClassContent_(){  AssociationClassContent_Impl associationClassContent_=new AssociationClassContent_Impl();  return associationClassContent_;}  }
class C{  public static void write(float lt,float ln,int w,int h,int[] pix,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(COLORMODEL_DIRECT);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(pix.length);  for (int i=0; i < pix.length; i++) {    dos.writeInt(pix[i]);  }  properties.write(dos);}  }
class C{  @Override public int hashCode(){  if (hash == 0) {    char[] c=_uri;    if (c != null) {      for (int i=0, len=c.length; i < len; i++) {        hash=31 * hash + c[i];      }    }    c=_fragment;    if (c != null) {      for (int i=0, len=c.length; i < len; i++) {        hash=31 * hash + c[i];      }    }  }  return hash;}  }
class C{  public boolean isEnabledProxyOnly(){  return enabledProxyOnly;}  }
class C{  public StrBuilder insert(final int index,final float value){  return insert(index,String.valueOf(value));}  }
class C{  public void addMenuListener(MenuListener l){  listenerList.add(MenuListener.class,l);}  }
class C{  private static MPrintFormat copy(Properties ctx,int from_AD_PrintFormat_ID,int to_AD_PrintFormat_ID,int to_Client_ID){  s_log.info("From AD_PrintFormat_ID=" + from_AD_PrintFormat_ID + ", To AD_PrintFormat_ID="+ to_AD_PrintFormat_ID+ ", To Client_ID="+ to_Client_ID);  if (from_AD_PrintFormat_ID == 0)   throw new IllegalArgumentException("From_AD_PrintFormat_ID is 0");  MPrintFormat from=new MPrintFormat(ctx,from_AD_PrintFormat_ID,null);  MPrintFormat to=new MPrintFormat(ctx,to_AD_PrintFormat_ID,null);  MPrintFormat.copyValues(from,to);  if (to_AD_PrintFormat_ID == 0) {    if (to_Client_ID < 0)     to_Client_ID=Env.getAD_Client_ID(ctx);    to.setClientOrg(to_Client_ID,0);  }  to.setName(Util.replace(to.getName(),"** TEMPLATE **","").trim());  String sql="SELECT count(*) from AD_PrintFormat WHERE AD_Client_ID = ? AND AD_Table_ID = ? AND Name = ?";  String suggestedName=to.getName();  int count=0;  while (DB.getSQLValue(to.get_TrxName(),sql,to.getAD_Client_ID(),to.getAD_Table_ID(),suggestedName) > 0) {    count++;    suggestedName=to.getName() + " (" + count+ ")";  }  to.setName(suggestedName);  to.saveEx();  to.setItems(copyItems(from,to));  return to;}  }
class C{  public boolean downloadUrlToStream(String urlString,OutputStream outputStream){  disableConnectionReuseIfNecessary();  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  BufferedInputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return true;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {    }  }  return false;}  }
class C{  public void generateFromArchetype(@NotNull File workDir,@NotNull MavenArchetype archetype,MavenArtifact mavenArtifact) throws ServerException {  Map<String,String> archetypeProperties=new HashMap<>();  archetypeProperties.put("-DinteractiveMode","false");  archetypeProperties.put("-DarchetypeGroupId",archetype.getGroupId());  archetypeProperties.put("-DarchetypeArtifactId",archetype.getArtifactId());  archetypeProperties.put("-DarchetypeVersion",archetype.getVersion());  archetypeProperties.put("-DgroupId",mavenArtifact.getGroupId());  archetypeProperties.put("-DartifactId",mavenArtifact.getArtifactId());  archetypeProperties.put("-Dversion",mavenArtifact.getVersion());  if (archetype.getRepository() != null) {    archetypeProperties.put("-DarchetypeRepository",archetype.getRepository());  }  if (archetype.getProperties() != null) {    archetypeProperties.putAll(archetype.getProperties());  }  final CommandLine commandLine=createCommandLine(archetypeProperties);  try {    execute(commandLine.toShellCommand(),workDir);  } catch (  TimeoutException e) {    LOG.error(e.getMessage());  }catch (  IOException e) {    LOG.error(e.getMessage());  }catch (  InterruptedException e) {    LOG.error(e.getMessage());  }}  }
class C{  private boolean isRequiredFields(TextInputLayout emailWrapper,TextInputLayout passwordWrapper){  if (emailWrapper == null || passwordWrapper == null) {    Timber.e(new RuntimeException(),"Called isRequiredFields with null parameters.");    MsgUtils.showToast(getActivity(),MsgUtils.TOAST_TYPE_INTERNAL_ERROR,null,MsgUtils.ToastLength.LONG);    return false;  } else {    EditText email=emailWrapper.getEditText();    EditText password=passwordWrapper.getEditText();    if (email == null || password == null) {      Timber.e(new RuntimeException(),"Called isRequiredFields with null editTexts in wrappers.");      MsgUtils.showToast(getActivity(),MsgUtils.TOAST_TYPE_INTERNAL_ERROR,null,MsgUtils.ToastLength.LONG);      return false;    } else {      boolean isEmail=false;      boolean isPassword=false;      if (email.getText().toString().equalsIgnoreCase("")) {        emailWrapper.setErrorEnabled(true);        emailWrapper.setError(getString(R.string.Required_field));      } else {        emailWrapper.setErrorEnabled(false);        isEmail=true;      }      if (password.getText().toString().equalsIgnoreCase("")) {        passwordWrapper.setErrorEnabled(true);        passwordWrapper.setError(getString(R.string.Required_field));      } else {        passwordWrapper.setErrorEnabled(false);        isPassword=true;      }      if (isEmail && isPassword) {        return true;      } else {        Timber.e("Some fields are required.");        return false;      }    }  }}  }
class C{  private TreeNode removeUnNeededLevelsInTree(TreeNode node,TreeNode removedParent){  if (removedParent != null) {    node.setId(removedParent.getId() + currentProfile.getSplitTagsOn() + node.getId());  }  if (node.getData() != null) {    return node;  }  List<TreeNode> newChildren=new LinkedList<TreeNode>();  for (  TreeNode childNode : node.getChildren()) {    if (childNode.getData() == null && childNode.getChildren().size() <= 1) {      if (childNode.getChildren().size() == 0) {        int dummy=1;      } else {        TreeNode newChild=removeUnNeededLevelsInTree(childNode.getChildren().get(0),childNode);        if (newChild != null) {          newChild.setParent(node);          newChildren.add(newChild);        }      }    } else {      newChildren.add(removeUnNeededLevelsInTree(childNode,null));    }  }  node.setChildren(newChildren);  return node;}  }
class C{  public final boolean editPhoto(final long photoId,String description) throws AbelanaClientException, AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    EditPhotoRequest editPhotoRequest=new EditPhotoRequest();    editPhotoRequest.photoId=photoId;    editPhotoRequest.description=description;    try {      StatusResponse statusResponse=mBlockingStub.editPhoto(editPhotoRequest);      if (statusResponse.error != null && statusResponse.error.code.equals("403")) {        throw new AbelanaClientException(mContext.getString(R.string.abelana_auth_error_message));      }      return statusResponse.error == null;    } catch (    RuntimeException e) {      Log.e("AbelanaClient",e.getMessage());      throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));    }  } else {    throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));  }}  }
class C{  public static FetchStatsRequest create(String statisticsTypeName){  FetchStatsRequest m=new FetchStatsRequest();  m.statisticsTypeName=statisticsTypeName;  return m;}  }
class C{  public ClaimBuilder putBase64(String key,byte[] data){  return put(key,Base64Url.encode(data));}  }
class C{  @Override public Map<double[],Double> discretise(int nbBuckets){  int nbToPick=Math.min(nbBuckets,points.length);  Map<double[],Double> vals=Arrays.stream(points).distinct().limit(nbToPick).collect(Collectors.toMap(null,null));  return vals;}  }
class C{  public MigrateData(){  release252c();  PrintFormatUtil pfu=new PrintFormatUtil(Env.getCtx());  pfu.addMissingColumns((String)null);}  }
class C{  private void computeMethodMap(JsonObject jsonObj){  JsonArray childrenArray=Utils.getChildrenArray(jsonObj);  if (childrenArray != null) {    JsonArray newChildrenArray=new JsonArray();    boolean changed=false;    for (int i=0; i < childrenArray.size(); i++) {      JsonElement child=childrenArray.get(i);      newChildrenArray.add(child);      if (child.isJsonObject()) {        JsonObject childObj=child.getAsJsonObject();        computeMethodMap(childObj);        Set<MethodModel> methods=Utils.getMethodModels(spec,childObj);        if (!methods.isEmpty()) {          if (methods.size() > 1) {            changed=true;            int j=0;            for (            MethodModel method : methods) {              if (j > 0) {                JsonObject copy=copyWithContext(childObj,j + 1);                newChildrenArray.add(copy);                methodMap.put(copy,method);              }              j++;            }            childObj.addProperty(CONTEXT_PROP,Integer.valueOf(1));          }          methodMap.put(childObj,methods.iterator().next());        }      }    }    if (changed) {      jsonObj.remove(Utils.CHILDREN_PROP);      jsonObj.add(Utils.CHILDREN_PROP,newChildrenArray);    }  }}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] sourceValid,boolean[] destValid) throws Exception {  if (sourceValid.length != destValid.length) {    throw new Exception("Validity arrays must be of same length");  }  int lengthOfDestPastRequired=(k - 1) * k_tau + 1;  int lengthOfSourcePastRequired=(l - 1) * l_tau + 1;  int startTime=0;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  boolean previousWasOk=false;  for (int t=startTimeForFirstDestEmbedding; t < destValid.length - 1; t++) {    if (previousWasOk) {      if (destValid[t + 1] && sourceValid[t + 1 - delay]) {        continue;      } else {        previousWasOk=false;        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=t;        startAndEndTimePairs.add(timePair);        continue;      }    }    if (!destValid[t + 1]) {      continue;    }    boolean allOk=true;    for (int tBack=0; tBack < lengthOfDestPastRequired; tBack++) {      if (!destValid[t - tBack]) {        allOk=false;        break;      }    }    if (!allOk) {      continue;    }    allOk=true;    for (int tBack=delay - 1; tBack < delay - 1 + lengthOfSourcePastRequired; tBack++) {      if (!sourceValid[t - tBack]) {        allOk=false;        break;      }    }    if (!allOk) {      continue;    }    startTime=t - startTimeForFirstDestEmbedding;    previousWasOk=true;  }  if (previousWasOk) {    previousWasOk=false;    int[] timePair=new int[2];    timePair[0]=startTime;    timePair[1]=destValid.length - 1;    startAndEndTimePairs.add(timePair);  }  return startAndEndTimePairs;}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map){  Comparator<? super K> comparator=map.comparator();  if (comparator == null) {    comparator=(Comparator<? super K>)NATURAL_ORDER;  }  if (map instanceof ImmutableSortedMap) {    @SuppressWarnings("unchecked") ImmutableSortedMap<K,V> kvMap=(ImmutableSortedMap<K,V>)map;    if (!kvMap.isPartialView()) {      return kvMap;    }  }  return fromEntries(comparator,true,map.entrySet());}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public static IScope createScope(IScope outer,ISelectable selectable,Predicate<IEObjectDescription> filter,EClass type,boolean ignoreCase,ResourceSet resourceSet,IContainer container){  if (selectable == null || selectable.isEmpty())   return outer;  IScope scope=new UserDataAwareScope(outer,selectable,filter,type,ignoreCase,resourceSet,container);  return scope;}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public boolean isMatch(){  return (isExactMatch() || isUniqueAttrMatch());}  }
class C{  public int partNumber(){  return partNumber;}  }
class C{  public OperatorStack(ParseErrors pe){  PErrors=pe;  fcnOp=Operators.getOperator(UniqueString.uniqueStringOf("["));}  }
class C{  public static Throwable assertThrows(@Nullable IgniteLogger log,Callable<?> call,Class<? extends Throwable> cls,@Nullable String msg){  assert call != null;  assert cls != null;  try {    call.call();  } catch (  Throwable e) {    if (cls != e.getClass()) {      if (e.getClass() == CacheException.class && e.getCause() != null && e.getCause().getClass() == cls)       e=e.getCause(); else {        U.error(log,"Unexpected exception.",e);        fail("Exception class is not as expected [expected=" + cls + ", actual="+ e.getClass()+ ']',e);      }    }    if (msg != null && (e.getMessage() == null || !e.getMessage().contains(msg))) {      U.error(log,"Unexpected exception message.",e);      fail("Exception message is not as expected [expected=" + msg + ", actual="+ e.getMessage()+ ']',e);    }    if (log != null) {      if (log.isInfoEnabled())       log.info("Caught expected exception: " + e.getMessage());    } else     X.println("Caught expected exception: " + e.getMessage());    return e;  }  throw new AssertionError("Exception has not been thrown.");}  }
class C{  public CreateRequest(ContentFormat contentFormat,String path,LwM2mObjectInstance instance){  this(contentFormat,new LwM2mPath(path),instance.getId(),instance.getResources().values().toArray((new LwM2mResource[instance.getResources().size()])));}  }
class C{  private void loadInventory(){  if (items == null) {    PlayerInventory inv=player.getInventory();    items=inv.getContents();    this.size=inv.getSize();  }}  }
class C{  private void write(int integer,int width) throws JSONException {  try {    this.bitwriter.write(integer,width);    if (probe) {      log(integer,width);    }  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  @PUT @Path("/disablemonitorcountercollection") @Produces(MediaType.APPLICATION_JSON) @Description("Disables Argus system monitoring.") public Response disableMonitorCounterCollection(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.disableMonitorCounterCollection();  return Response.status(Status.OK).build();}  }
class C{  @Override public Attribute resolveToAttribute(String x,ActionAST node){  if (args != null) {    Attribute a=args.get(x);    if (a != null)     return a;  }  if (retvals != null) {    Attribute a=retvals.get(x);    if (a != null)     return a;  }  if (locals != null) {    Attribute a=locals.get(x);    if (a != null)     return a;  }  AttributeDict properties=getPredefinedScope(LabelType.RULE_LABEL);  return properties.get(x);}  }
class C{  private String readOneNote(Git git,String notesRef,String hash) throws GitClientException {  try (RevWalk walker=new RevWalk(git.getRepository())){    ShowNoteCommand cmd=git.notesShow();    cmd.setNotesRef(notesRef);    ObjectId ref=git.getRepository().resolve(hash);    RevCommit commit=walker.parseCommit(ref);    cmd.setObjectId(commit);    Note note=cmd.call();    if (note == null) {      return null;    }    return noteToString(repo,note);  } catch (  Exception e) {    throw new GitClientException(e);  }}  }
class C{  protected final void endNamespaceMapping() throws SAXException {  int count=fNamespaceContext.getDeclaredPrefixCount();  if (count > 0) {    for (int i=0; i < count; i++) {      fContentHandler.endPrefixMapping(fNamespaceContext.getDeclaredPrefixAt(i));    }  }}  }
class C{  public TLongFloatHashMap(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  public NodesStatsRequestBuilder clear(){  request.clear();  return this;}  }
class C{  public void testDeployEjbStatically() throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  Deployable ejb=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-ejb"),DeployableType.EJB);  getLocalContainer().getConfiguration().addDeployable(ejb);  getLocalContainer().start();  SampleHome home=jndiLookup("SampleEJB");  Sample sample=home.create();  assertTrue("Should have returned true",sample.isWorking());  getLocalContainer().stop();}  }
class C{  private boolean isLiteral(int index){  return getMaskCharacter(index).isLiteral();}  }
class C{  public static char[] lookup(String name){  return ENTITY_MAP.get(name);}  }
class C{  public CompileClassNotFound(Exception cause){  super(cause.getMessage());  _cause=cause;}  }
class C{  public void removeTexture(String textureKeyName){  if (textureKeyName == null)   return;  textures.remove(textureKeyName);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  String inputFilesString=null;  String outputFileSuffix="_HistoEqual";  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int rows=0;  int cols=0;  double z;  float progress=0;  long numCells=0;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFileSuffix=args[1];  numBins=Integer.parseInt(args[2]);  if ((inputFilesString == null) || (outputFileSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      image=new WhiteboxRaster(imageFiles[i],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      outputHeader=imageFiles[i].replace(".dep",outputFileSuffix + ".dep");      output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      double minValue=image.getMinimumValue();      double maxValue=image.getMaximumValue();      double binSize=(maxValue - minValue) / numBins;      long[] histogram=new long[numBins];      int binNum;      int numBinsLessOne=numBins - 1;      double[] data;      if (image.getDataScale() != WhiteboxRaster.DataScale.RGB) {        updateProgress("Loop 1 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              numCells++;              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 2:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 2 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              z=Math.round((cdf[binNum] - cdf[0]) / (numCells - cdf[0]) * numBinsLessOne);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 2:",(int)progress);        }      } else {        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.FLOAT,noData);        output.setPreferredPalette(image.getPreferredPalette());        output.setDataScale(WhiteboxRaster.DataScale.RGB);        double h, s, v;        int a, r, g, b;        minValue=99999999;        maxValue=-99999999;        float[] hsbvals=new float[3];        float[] rgbvals=new float[3];        updateProgress("Loop 1 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              if (v < minValue) {                minValue=v;              }              if (v > maxValue) {                maxValue=v;              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 3:",(int)progress);        }        binSize=(maxValue - minValue) / numBins;        histogram=new long[numBins];        numBinsLessOne=numBins - 1;        updateProgress("Loop 2 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              numCells++;              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 3:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 3 of 3:",0);        float val=0;        int rgb=0;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              z=data[col];              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              a=((int)data[col] >> 24) & 0xFF;              hsbvals=Color.RGBtoHSB(r,g,b,null);              v=hsbvals[2];              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              val=(float)((cdf[binNum] - cdf[0]) / (numCells - cdf[0]));              rgb=Color.HSBtoRGB(hsbvals[0],hsbvals[1],val);              r=(rgb >> 16) & 0xFF;              g=(rgb >> 8) & 0xFF;              b=rgb & 0xFF;              z=(double)((a << 24) | (b << 16) | (g << 8)| r);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 3 of 3:",(int)progress);        }      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      image.close();      output.close();      returnData(outputHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void triggerTimeout(List<TOMMessage> requestList){  ObjectOutputStream out=null;  ByteArrayOutputStream bos=new ByteArrayOutputStream();  int regency=lcManager.getNextReg();  requestsTimer.stopTimer();  requestsTimer.Enabled(false);  if (lcManager.getNextReg() == lcManager.getLastReg()) {    lcManager.setNextReg(lcManager.getLastReg() + 1);    regency=lcManager.getNextReg();    lcManager.setCurrentRequestTimedOut(requestList);    lcManager.addStop(regency,this.controller.getStaticConf().getProcessId());    addSTOPedRequestsToClientManager();    List<TOMMessage> messages=getRequestsToRelay();    try {      out=new ObjectOutputStream(bos);      if (messages != null && messages.size() > 0) {        byte[] serialized=bb.makeBatch(messages,0,0,controller);        out.writeBoolean(true);        out.writeObject(serialized);      } else {        out.writeBoolean(false);        System.out.println("(Synchronizer.triggerTimeout) Strange... did not include any request in my STOP message for regency " + regency);      }      byte[] payload=bos.toByteArray();      out.flush();      bos.flush();      out.close();      bos.close();      System.out.println("(Synchronizer.triggerTimeout) sending STOP message to install regency " + regency + " with "+ (messages != null ? messages.size() : 0)+ " request(s) to relay");      LCMessage stop=new LCMessage(this.controller.getStaticConf().getProcessId(),TOMUtil.STOP,regency,payload);      requestsTimer.setSTOP(regency,stop);      communication.send(this.controller.getCurrentViewOtherAcceptors(),stop);    } catch (    IOException ex) {      ex.printStackTrace();      java.util.logging.Logger.getLogger(TOMLayer.class.getName()).log(Level.SEVERE,null,ex);    } finally {      try {        out.close();        bos.close();      } catch (      IOException ex) {        ex.printStackTrace();        java.util.logging.Logger.getLogger(TOMLayer.class.getName()).log(Level.SEVERE,null,ex);      }    }  }  processOutOfContextSTOPs(regency);  startSynchronization(regency);}  }
class C{  public CptInvariantMarginalCalculator(BayesIm bayesIm,Evidence evidence){  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }  if (evidence.isIncompatibleWith(bayesIm)) {    throw new IllegalArgumentException("The variables for the given " + "Bayes IM and evidence must be compatible.");  }  this.bayesIm=bayesIm;  this.evidence=evidence;  this.updatedBayesIm=new UpdatedBayesIm(bayesIm,evidence);  this.storedMarginals=initStoredMarginals();}  }
class C{  static private String toUpperCaseFast(final String s){  boolean different=false;  final int mx=s.length();  char[] chars=new char[mx];  for (int i=0; i < mx; i++) {    char ch=s.charAt(i);    if ('a' <= ch && ch <= 'z') {      ch=(char)(ch + ('A' - 'a'));      different=true;    }    chars[i]=ch;  }  final String upper;  if (different)   upper=String.valueOf(chars); else   upper=s;  return upper;}  }
class C{  public KruskalWallisTest(int numberOfGroups){  super(numberOfGroups);  if (numberOfGroups <= 1) {    throw new IllegalArgumentException("requires two or more groups");  }}  }
class C{  public XPathType(String expression,Filter filter){  if (expression == null) {    throw new NullPointerException("expression cannot be null");  }  if (filter == null) {    throw new NullPointerException("filter cannot be null");  }  this.expression=expression;  this.filter=filter;  this.nsMap=Collections.emptyMap();}  }
class C{  public Node insertBefore(Node newChild,Node refChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  checkNode(refChild);  IIOMetadataNode newChildNode=(IIOMetadataNode)newChild;  IIOMetadataNode refChildNode=(IIOMetadataNode)refChild;  IIOMetadataNode previous=null;  IIOMetadataNode next=null;  if (refChild == null) {    previous=this.lastChild;    next=null;    this.lastChild=newChildNode;  } else {    previous=refChildNode.previousSibling;    next=refChildNode;  }  if (previous != null) {    previous.nextSibling=newChildNode;  }  if (next != null) {    next.previousSibling=newChildNode;  }  newChildNode.parent=this;  newChildNode.previousSibling=previous;  newChildNode.nextSibling=next;  if (this.firstChild == refChildNode) {    this.firstChild=newChildNode;  }  ++numChildren;  return newChildNode;}  }
class C{  public PortPairExtender(String name,InputPorts inPorts,OutputPorts outPorts,MetaData preconditionMetaData){  this.name=name;  this.inPorts=inPorts;  this.outPorts=outPorts;  this.preconditionMetaData=preconditionMetaData;  inPorts.registerPortExtender(this);  outPorts.registerPortExtender(this);}  }
class C{  @Override public void addDefaultKeyBindings(){  addKeyBinding("BACK_SPACE",BACKSPACE);  addKeyBinding("C+BACK_SPACE",BACKSPACE_WORD);  addKeyBinding("DELETE",DELETE);  addKeyBinding("C+DELETE",DELETE_WORD);  addKeyBinding("ENTER",INSERT_BREAK);  addKeyBinding("TAB",INSERT_TAB);  addKeyBinding("INSERT",OVERWRITE);  addKeyBinding("C+\\",TOGGLE_RECT);  addKeyBinding("HOME",HOME);  addKeyBinding("END",END);  addKeyBinding("S+HOME",SELECT_HOME);  addKeyBinding("S+END",SELECT_END);  addKeyBinding("C+HOME",DOCUMENT_HOME);  addKeyBinding("C+END",DOCUMENT_END);  addKeyBinding("CS+HOME",SELECT_DOC_HOME);  addKeyBinding("CS+END",SELECT_DOC_END);  addKeyBinding("PAGE_UP",PREV_PAGE);  addKeyBinding("PAGE_DOWN",NEXT_PAGE);  addKeyBinding("S+PAGE_UP",SELECT_PREV_PAGE);  addKeyBinding("S+PAGE_DOWN",SELECT_NEXT_PAGE);  addKeyBinding("LEFT",PREV_CHAR);  addKeyBinding("S+LEFT",SELECT_PREV_CHAR);  addKeyBinding("C+LEFT",PREV_WORD);  addKeyBinding("CS+LEFT",SELECT_PREV_WORD);  addKeyBinding("RIGHT",NEXT_CHAR);  addKeyBinding("S+RIGHT",SELECT_NEXT_CHAR);  addKeyBinding("C+RIGHT",NEXT_WORD);  addKeyBinding("CS+RIGHT",SELECT_NEXT_WORD);  addKeyBinding("UP",PREV_LINE);  addKeyBinding("S+UP",SELECT_PREV_LINE);  addKeyBinding("DOWN",NEXT_LINE);  addKeyBinding("S+DOWN",SELECT_NEXT_LINE);  addKeyBinding("C+ENTER",REPEAT);  addKeyBinding("C+C",CLIP_COPY);  addKeyBinding("C+V",CLIP_PASTE);  addKeyBinding("C+X",CLIP_CUT);  addKeyBinding("C+A",SELECT_ALL);  addKeyBinding("C+F",SEARCH_AND_REPLACE);}  }
class C{  public RecurrenceExceptionEntryLink(){  super(KEY);}  }
class C{  public byte[] Verify(byte[] message,byte[] signature){  int mdsize=messDigestOTS.getDigestSize();  byte[] hash=new byte[mdsize];  messDigestOTS.update(message,0,message.length);  hash=new byte[messDigestOTS.getDigestSize()];  messDigestOTS.doFinal(hash,0);  int size=((mdsize << 3) + (w - 1)) / w;  int logs=getLog((size << w) + 1);  int keysize=size + (logs + w - 1) / w;  int testKeySize=mdsize * keysize;  if (testKeySize != signature.length) {    return null;  }  byte[] testKey=new byte[testKeySize];  int c=0;  int counter=0;  int test;  if (8 % w == 0) {    int d=8 / w;    int k=(1 << w) - 1;    byte[] hlp=new byte[mdsize];    for (int i=0; i < hash.length; i++) {      for (int j=0; j < d; j++) {        test=hash[i] & k;        c+=test;        System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);        while (test < k) {          messDigestOTS.update(hlp,0,hlp.length);          hlp=new byte[messDigestOTS.getDigestSize()];          messDigestOTS.doFinal(hlp,0);          test++;        }        System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);        hash[i]=(byte)(hash[i] >>> w);        counter++;      }    }    c=(size << w) - c;    for (int i=0; i < logs; i+=w) {      test=c & k;      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      c>>>=w;      counter++;    }  } else   if (w < 8) {    int d=mdsize / w;    int k=(1 << w) - 1;    byte[] hlp=new byte[mdsize];    long big8;    int ii=0;    for (int i=0; i < d; i++) {      big8=0;      for (int j=0; j < w; j++) {        big8^=(hash[ii] & 0xff) << (j << 3);        ii++;      }      for (int j=0; j < 8; j++) {        test=(int)(big8 & k);        c+=test;        System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);        while (test < k) {          messDigestOTS.update(hlp,0,hlp.length);          hlp=new byte[messDigestOTS.getDigestSize()];          messDigestOTS.doFinal(hlp,0);          test++;        }        System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);        big8>>>=w;        counter++;      }    }    d=mdsize % w;    big8=0;    for (int j=0; j < d; j++) {      big8^=(hash[ii] & 0xff) << (j << 3);      ii++;    }    d<<=3;    for (int j=0; j < d; j+=w) {      test=(int)(big8 & k);      c+=test;      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      big8>>>=w;      counter++;    }    c=(size << w) - c;    for (int i=0; i < logs; i+=w) {      test=c & k;      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      c>>>=w;      counter++;    }  } else   if (w < 57) {    int d=(mdsize << 3) - w;    int k=(1 << w) - 1;    byte[] hlp=new byte[mdsize];    long big8, test8;    int r=0;    int s, f, rest, ii;    while (r <= d) {      s=r >>> 3;      rest=r % 8;      r+=w;      f=(r + 7) >>> 3;      big8=0;      ii=0;      for (int j=s; j < f; j++) {        big8^=(hash[j] & 0xff) << (ii << 3);        ii++;      }      big8>>>=rest;      test8=(big8 & k);      c+=test8;      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test8 < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test8++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      counter++;    }    s=r >>> 3;    if (s < mdsize) {      rest=r % 8;      big8=0;      ii=0;      for (int j=s; j < mdsize; j++) {        big8^=(hash[j] & 0xff) << (ii << 3);        ii++;      }      big8>>>=rest;      test8=(big8 & k);      c+=test8;      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test8 < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test8++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      counter++;    }    c=(size << w) - c;    for (int i=0; i < logs; i+=w) {      test8=(c & k);      System.arraycopy(signature,counter * mdsize,hlp,0,mdsize);      while (test8 < k) {        messDigestOTS.update(hlp,0,hlp.length);        hlp=new byte[messDigestOTS.getDigestSize()];        messDigestOTS.doFinal(hlp,0);        test8++;      }      System.arraycopy(hlp,0,testKey,counter * mdsize,mdsize);      c>>>=w;      counter++;    }  }  byte[] TKey=new byte[mdsize];  messDigestOTS.update(testKey,0,testKey.length);  TKey=new byte[messDigestOTS.getDigestSize()];  messDigestOTS.doFinal(TKey,0);  return TKey;}  }
class C{  private void maximize(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.MAXIMIZED_BOTH);  }}  }
class C{  @ToString public String toString(){  return "PT" + String.valueOf(getValue()) + "M";}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public void reset(){  mPrefEditor.putBoolean(PREF_KEY_SHOULD_MONITOR,true);  mPrefEditor.putInt(PREF_KEY_LAUNCH_COUNT,0);  mPrefEditor.putInt(PREF_KEY_SKIP_COUNT,0);  mPrefEditor.commit();}  }
class C{  static ClassNode boundUnboundedWildcards(ClassNode type){  if (type.isArray()) {    return boundUnboundedWildcards(type.getComponentType()).makeArray();  }  ClassNode target=type.redirect();  if (target == null || type == target || !isUsingGenericsOrIsArrayUsingGenerics(target))   return type;  ClassNode newType=type.getPlainNodeReference();  newType.setGenericsPlaceHolder(type.isGenericsPlaceHolder());  newType.setGenericsTypes(boundUnboundedWildcards(type.getGenericsTypes(),target.getGenericsTypes()));  return newType;}  }
class C{  private int trimToPowerOf2(int initialcapacity){  int capacity=1;  while (capacity < initialcapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  public ObjectIdentifier(int[] oid){  validateOid(oid);  this.oid=oid;}  }
class C{  public static boolean copyValues(PO to,PO from,String[] includeFields,String[] excludeFields){  int no=copyValues(to,from,includeFields,excludeFields,false);  return no >= 0;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws SAXException, ParserConfigurationException, IOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    parser.enableOptimization(1);    if (stream != null) {    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    if (stream != null) {    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  protected CSSParseException createCSSParseException(String key,Object[] params,int lineNumber){  return new CSSParseException(formatMessage(key,params),documentURI,lineNumber,scanner.getColumn());}  }
class C{  private static OFActionSetNwDst decode_set_dst_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwDst.Builder ab=OFFactories.getFactory(version).actions().buildSetNwDst();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.HEX_ESCAPE_SEQUENCE;}  }
class C{  public Builder put(Map<String,String> settings){  removeNonArraysFieldsIfNewSettingsContainsFieldAsArray(settings);  map.putAll(settings);  return this;}  }
class C{  public void dispose(){}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  char[] buff=new char[4096];  int nch;  boolean lastWasCR=false;  boolean isCRLF=false;  boolean isCR=false;  int last;  boolean wasEmpty=(doc.getLength() == 0);  AttributeSet attr=getInputAttributes();  while ((nch=in.read(buff,0,buff.length)) != -1) {    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          isCR=true;          if (counter == 0) {            doc.insertString(pos,"\n",attr);            pos++;          } else {            buff[counter - 1]='\n';          }        } else {          lastWasCR=true;        }      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1)) {        doc.insertString(pos,new String(buff,last,counter - last - 1),attr);        pos+=(counter - last - 1);      }      lastWasCR=false;      last=counter;      isCRLF=true;    }  break;default :if (lastWasCR) {  isCR=true;  if (counter == 0) {    doc.insertString(pos,"\n",attr);    pos++;  } else {    buff[counter - 1]='\n';  }  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) {doc.insertString(pos,new String(buff,last,nch - last - 1),attr);pos+=(nch - last - 1);}} else {doc.insertString(pos,new String(buff,last,nch - last),attr);pos+=(nch - last);}}}if (lastWasCR) {doc.insertString(pos,"\n",attr);isCR=true;}if (wasEmpty) {if (isCRLF) {doc.putProperty(EndOfLineStringProperty,"\r\n");} else if (isCR) {doc.putProperty(EndOfLineStringProperty,"\r");} else {doc.putProperty(EndOfLineStringProperty,"\n");}}}  }
class C{  public Action removeAction(String name){  Action a=getAction(name);  if (a != null) {    a.cancel();    m_actions.remove(name);    a.setVisualization(null);  }  return a;}  }
class C{  public static boolean hasVaryAll(Headers responseHeaders){  return varyFields(responseHeaders).contains("*");}  }
class C{  public ReadStreamOld(StreamImpl source){  init(source);}  }
class C{  public void removeTableModelListener(TableModelListener l){  if (getModel() != null)   ((DataTableModel)getModel()).removeTableModelListener(l);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JavaMethod findJavaMethod(Expression[] args){  load();  int parameterCount=args.length;  for (  JavaMethod m : javaMethods) {    int count=m.getParameterCount();    if (count == parameterCount || (m.isVarArgs() && count <= parameterCount + 1)) {      return m;    }  }  throw DbException.get(ErrorCode.METHOD_NOT_FOUND_1,getName() + " (" + className+ ", parameter count: "+ parameterCount+ ")");}  }
class C{  public static void checkGETStatusCodeWithAwait(final String request,final Integer statusCode){  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(String.valueOf(statusCode)));}  }
class C{  public void testLog(){  assert log.isInfoEnabled() == true;  if (log.isDebugEnabled())   log.debug("This is 'debug' message.");  log.info("This is 'info' message.");  log.warning("This is 'warning' message.");  log.warning("This is 'warning' message.",new Exception("It's a test warning exception"));  log.error("This is 'error' message.");  log.error("This is 'error' message.",new Exception("It's a test error exception"));}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'CommLock' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PACKAGE_NAME' TEXT,"+ "'IS_LOCKED' INTEGER,"+ "'IS_FAVITER_APP' INTEGER);");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_state_1_();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IndentPrinter(Writer out,String indent){  this(out,indent,true);}  }
class C{  public static String physToPhysFmtString(Float physVal,int cnvId,int decimals){  String result="";  if (decimals >= 0) {    decimalFormat=formats[decimals];    result=decimalFormat.format(physVal);  } else {    result=Conversions.memToString(physVal.longValue(),cnvId,decimals);  }  return (result);}  }
class C{  public String toHexString(){  return m_value.toString(16);}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,byte[] salt) throws GeneralSecurityException {  fixPrng();  KeySpec keySpec=new PBEKeySpec(password.toCharArray(),salt,PBE_ITERATION_COUNT,AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(PBE_ALGORITHM);  byte[] keyBytes=keyFactory.generateSecret(keySpec).getEncoded();  byte[] confidentialityKeyBytes=copyOfRange(keyBytes,0,AES_KEY_LENGTH_BITS / 8);  byte[] integrityKeyBytes=copyOfRange(keyBytes,AES_KEY_LENGTH_BITS / 8,AES_KEY_LENGTH_BITS / 8 + HMAC_KEY_LENGTH_BITS / 8);  SecretKey confidentialityKey=new SecretKeySpec(confidentialityKeyBytes,CIPHER);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  public void xaResume() throws XAException {  try {    if (LOGGER.isDebugEnabled()) {      LOGGER.logDebug("XAResource.start ( " + this.xidToHexString + " , XAResource.TMRESUME ) on resource "+ this.resourcename+ " represented by XAResource instance "+ this.xaresource);    }    this.xaresource.start(this.xid,XAResource.TMRESUME);    this.isXaSuspended=false;  } catch (  XAException xaerr) {    String msg=interpretErrorCode(this.resourcename,"resume",this.xid,xaerr.errorCode);    LOGGER.logWarning(msg,xaerr);    throw xaerr;  }}  }
class C{  private static int calculateSampleFactor(Options options,int reqWidth,int reqHeight){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    final int halfHeight=height / 2;    final int halfWidth=width / 2;    while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  private Set<String> parse(Reader stream) throws java.io.IOException {  Set<String> tokens=new HashSet<String>();  String token;  String header="";  while ((token=nextToken(stream)) != null) {    boolean endingLine=false;    if (token.length() > 0 && token.charAt(token.length() - 1) == '\n') {      endingLine=true;      token=token.substring(0,token.length() - 1);    }    if (token.length() > 0 && header.length() + token.length() < 90 && !allDigits(token)) {      if (token.equals("From:") || token.equals("Return-Path:") || token.equals("Subject:")|| token.equals("To:")) {        header=token;        if (!endingLine) {          continue;        }      }      token=header + token;      tokens.add(token);    }    if (endingLine) {      header="";    }  }  return tokens;}  }
class C{  public void allowSpendingUnconfirmedTransactions(){  setCoinSelector(AllowUnconfirmedCoinSelector.get());}  }
class C{  private BigInteger bigMultiplyPowerTen(int n){  if (n <= 0)   return this.inflated();  if (intCompact != INFLATED)   return bigTenToThe(n).multiply(intCompact); else   return intVal.multiply(bigTenToThe(n));}  }
class C{  public static void openURL(Component parent,String url){  openURL(parent,url,true);}  }
class C{  static public double normalize(double rawScore,double totalRawScore){  if (totalRawScore == 0d) {    return 0d;  }  return rawScore / totalRawScore;}  }
class C{  public OnLineStatistics(double n,double mean,double variance,double skew,double kurt){  if (n < 0)   throw new ArithmeticException("Can not have a negative set of weights");  this.n=n;  if (n != 0) {    this.mean=mean;    this.m2=variance * (n - 1);    this.m3=Math.pow(m2,3.0 / 2.0) * skew / Math.sqrt(n);    this.m4=(3 + kurt) * m2 * m2 / n;  } else   this.mean=m2=m3=m4=0;  min=max=null;}  }
class C{  COMMarkerSegment(Node node) throws IIOInvalidTreeException {  super(JPEG.COM);  if (node instanceof IIOMetadataNode) {    IIOMetadataNode ourNode=(IIOMetadataNode)node;    data=(byte[])ourNode.getUserObject();  }  if (data == null) {    String comment=node.getAttributes().getNamedItem("comment").getNodeValue();    if (comment != null) {      data=comment.getBytes();    } else {      throw new IIOInvalidTreeException("Empty comment node!",node);    }  }}  }
class C{  public int entrySize(Object key,Object value) throws IllegalArgumentException {  if (value == Token.TOMBSTONE) {    return 0;  }  int size=HeapLRUCapacityController.this.getPerEntryOverhead();  size+=sizeof(key);  size+=sizeof(value);  return size;}  }
class C{  public T remove(Object key){  return container.remove(key);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  departments="";}  }
class C{  public void updateDomaincookies(Boolean domainCookies) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  scope.setAttribute("setdomaincookies",Caster.toString(domainCookies,""));}  }
class C{  private boolean isAtRest(){  return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold && (getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold || mSpringTension == 0);}  }
class C{  private String separeMetaTagsContent(String content){  String result=Utils.pregMatch(content,Constants.METATAG_CONTENT_PATTERN,1);  return htmlDecode(result);}  }
class C{  public Matrix computeTranspose(){  int[][] result=new int[numColumns][(numRows + 31) >>> 5];  for (int i=0; i < numRows; i++) {    for (int j=0; j < numColumns; j++) {      int qs=j >>> 5;      int rs=j & 0x1f;      int b=(matrix[i][qs] >>> rs) & 1;      int qt=i >>> 5;      int rt=i & 0x1f;      if (b == 1) {        result[j][qt]|=1 << rt;      }    }  }  return new GF2Matrix(numRows,result);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void readSequenceLine(StringBuffer sequence,DataType dataType,String delimiters,String gapCharacters,String missingCharacters,String matchCharacters,String matchSequence) throws IOException, ImportException {  char ch=read();  try {    int n=0;    while (ch != '\r' && ch != '\n' && delimiters.indexOf(ch) == -1) {      if (hasComments) {        if (ch == lineComment) {          skipComments(ch);          break;        }        if (ch == startComment) {          skipComments(ch);          ch=read();        }      }      if (ch != ' ' && ch != '\t') {        char ch1=ch;        if (gapCharacters.indexOf(ch) != -1) {          ch1=DataType.GAP_CHARACTER;        } else         if (missingCharacters.indexOf(ch) != -1) {          ch1=DataType.UNKNOWN_CHARACTER;        } else         if (matchCharacters.indexOf(ch) != -1) {          if (matchSequence == null) {            throw new ImportException("Match character in first sequences");          }          if (n >= matchSequence.length()) {            throw new ImportException("Match sequences too short");          }          ch1=matchSequence.charAt(n);        }        sequence.append(ch1);        n++;      }      ch=read();    }    if (ch == '\r') {      if (next() == '\n')       read();    }    lastDelimiter=ch;    if (Character.isWhitespace((char)lastDelimiter)) {      ch=nextCharacter();      if (delimiters.indexOf(ch) != -1) {        lastDelimiter=readCharacter();      }    }  } catch (  EOFException e) {  }}  }
class C{  public void clearPref(){  try {    ((ClcJavaPreferenceStorage)modules.getPreferences()).getPref().clear();  } catch (  BackingStoreException e) {    logger.error("Cannot clear preferences",e);  }}  }
class C{  public static void require(final boolean condition,final String format,final Object... objects) throws RuntimeException {  if (!condition)   throw new LibraryException(String.format(format,objects));}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  private void readObject(){}  }
class C{  private void scanAndLock(Object key,int hash){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null || key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public String subtype(){  return subtype;}  }
class C{  private void toggleHeader(boolean visible,boolean force){  if ((force && visible) || (visible && mContainerHeader.getAlpha() == 0f)) {    fade.setFloatValues(mContainerHeader.getAlpha(),1f);    fade.start();  } else   if (force || (!visible && mContainerHeader.getAlpha() == 1f)) {    fade.setFloatValues(mContainerHeader.getAlpha(),0f);    fade.start();  }  if (getSupportActionBar() != null) {    getSupportActionBar().setDisplayShowTitleEnabled(!visible);  }}  }
class C{  @Override public void write(String str,int offset,int count){  String sub=str.substring(offset,offset + count);synchronized (lock) {    buf.append(sub);  }}  }
class C{  private void retrieveInfoUponOpen(){  if (this.connection == null)   return;  String sql=null;  if ("oracle".equalsIgnoreCase(this.db.getDbType()))   sql="select instance_number, version from v$instance"; else   if ("mysql".equalsIgnoreCase(this.db.getDbType()))   sql="show variables like 'version'"; else   return;  Statement stmt=null;  ResultSet rs=null;  try {    stmt=connection.createStatement();    rs=stmt.executeQuery(sql);    if (rs != null && rs.next()) {      if ("oracle".equalsIgnoreCase(this.db.getDbType())) {        this.instance_number=rs.getInt(1);        this.version=rs.getString(2);      } else       if ("mysql".equalsIgnoreCase(this.db.getDbType())) {        this.version=rs.getString("value");      }    }  } catch (  Exception ex) {    DBUtils.close(rs);    DBUtils.close(stmt);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'PICTURE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  private boolean conditionCH0(String value,int index){  if (index != 0) {    return false;  } else   if (!contains(value,index + 1,5,"HARAC","HARIS") && !contains(value,index + 1,3,"HOR","HYM","HIA","HEM")) {    return false;  } else   if (contains(value,0,5,"CHORE")) {    return false;  } else {    return true;  }}  }
class C{  public Vertex search(Vertex source,Vertex filter,Vertex vertex){  return search(source,filter,vertex,null,null,null,null);}  }
class C{  public void syncVdcConfigPostCheck(VdcPostCheckParam checkParam,String vdcName){  WebResource rRoot=createRequest(VDCCONFIG_POSTCHECK_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    addSignature(rRoot).post(checkParam);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(vdcName,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.failedToSedPostCheckRequest(vdcName,e);  }}  }
class C{  public SPX(int numberOfParents,int numberOfOffspring,double epsilon){  this.numberOfParents=numberOfParents;  this.numberOfOffspring=numberOfOffspring;  this.epsilon=epsilon;}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(1.5 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public ReplDBMSHeader lastCommitSeqno() throws ReplicatorException {  try {    ReplDBMSHeaderData header=null;    ResultSet res=null;    try {      lastSeqnoQuery.setInt(1,taskId);      res=lastSeqnoQuery.executeQuery();      if (res.next()) {        header=headerFromResult(res);      }    }  finally {      connectionManager.close(res);    }    return header;  } catch (  SQLException e) {    throw new ReplicatorException("Unable to retrieve last commit seqno: " + e.getMessage(),e);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void updateGroupStatus(List<String> members,String lootmode){  Set<String> oldGroupMembers=User.groupMembers;  if (members == null) {    User.groupMembers=null;  } else {    User.groupMembers=new HashSet<String>(members);  }  User.groupLootmode=lootmode;  for (  IEntity entity : GameObjects.getInstance()) {    if (entity instanceof Player) {      if (((oldGroupMembers != null) && oldGroupMembers.contains(entity.getName())) || ((User.groupMembers != null) && User.groupMembers.contains(entity.getName()))) {        ((Player)entity).fireChange(RPEntity.PROP_GROUP_MEMBERSHIP);      }    }  }}  }
class C{  public SnmpCounter(Long v) throws IllegalArgumentException {  super(v);}  }
class C{  public boolean isCellRenderer(){  return cellRenderer;}  }
class C{  InputStream openClassfile(String classname) throws NotFoundException {  ClassPathList list=pathList;  InputStream ins=null;  NotFoundException error=null;  while (list != null) {    try {      ins=list.path.openClassfile(classname);    } catch (    NotFoundException e) {      if (error == null)       error=e;    }    if (ins == null)     list=list.next; else     return ins;  }  if (error != null)   throw error; else   return null;}  }
class C{  private void performSendEvents(){  LicenseInfoListExt licenseList=null;  try {    licenseList=_licenseManager.getLicenseInfoListFromCoordinator();  } catch (  Exception e) {    _log.error("SendEventScheduler::performSendEvents(): getLicenseInfoListFromCoordinator exception: {}",e.getMessage());    return;  }  if (licenseList != null) {    for (    LicenseInfoExt licenseInfo : licenseList.getLicenseList()) {      _log.info("SendEventScheduler::run() getting LicenseInfoExt for {}",licenseInfo.getLicenseType());      try {        if (!licenseInfo.isTrialLicense()) {          if (_callHomeEventManager.doSendHeartBeat(licenseInfo)) {            sendHeartbeat(licenseInfo);          }          if (_licenseManager.isLicenseExpired(licenseInfo) && _callHomeEventManager.doSendLicenseExpiration(licenseInfo)) {            sendLicenseExpiration(licenseInfo);          }          LicenseType licType=licenseInfo.getLicenseType();          if (licType == LicenseType.OBJECTHDFS || licType == LicenseType.OBJECT || licType == LicenseType.HDFS) {            continue;          }        }      } catch (      Exception e) {        _log.error("SendEventScheduler::performSendEvents(): Exception: {}",e.getMessage());        continue;      }    }  }}  }
class C{  public TColor adjustRGB(float r,float g,float b){  return setRGB(new float[]{rgb[0] + r,rgb[1] + g,rgb[2] + b});}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.181 -0500",hash_original_method="DA3B5EC62F3E30804B07AD592D303E3E",hash_generated_method="C581C5630CD37B1611A79974E1D1D0BE") public ContentLengthHeader createContentLengthHeader(int contentLength) throws InvalidArgumentException {  if (contentLength < 0)   throw new InvalidArgumentException("bad contentLength");  ContentLength c=new ContentLength();  c.setContentLength(contentLength);  return c;}  }
class C{  @Nullable public static <T extends DBPNamedObject>List<T> findObjects(@Nullable Collection<T> theList,@Nullable String objectName){  if (theList != null && !theList.isEmpty()) {    List<T> result=new ArrayList<>();    for (    T object : theList) {      if (object.getName().equalsIgnoreCase(objectName)) {        result.add(object);      }    }    return result;  }  return null;}  }
class C{  private int firstDoc(int i4096){  long index=0;  while (i4096 < indices.length) {    index=indices[i4096];    if (index != 0) {      final int i64=Long.numberOfTrailingZeros(index);      return (i4096 << 12) | (i64 << 6) | Long.numberOfTrailingZeros(bits[i4096][0]);    }    i4096+=1;  }  return DocIdSetIterator.NO_MORE_DOCS;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VERSIONS;default :return null;}}  }
class C{  private long computeCheckSum(int lowBound,int highBound){  long sum=0;  for (int i=lowBound; i <= highBound - 4; i+=4) {    sum+=this.readULong(i);  }  int off=highBound & -4;  if (off < highBound) {    int b3=this.readUByte(off);    int b2=(off + 1 < highBound) ? this.readUByte(off + 1) : 0;    int b1=(off + 2 < highBound) ? this.readUByte(off + 2) : 0;    int b0=0;    sum+=(b3 << 24) | (b2 << 16) | (b1 << 8)| b0;  }  return sum;}  }
class C{  public String[][] convertToStringFrame(InputStream input,int rows,int cols) throws IOException {  String[][] ret=null;  try {    FrameReaderTextCell reader=(FrameReaderTextCell)FrameReaderFactory.createFrameReader(InputInfo.TextCellInputInfo);    FrameBlock mb=reader.readFrameFromInputStream(input,rows,cols);    ret=DataConverter.convertToStringFrame(mb);  } catch (  DMLRuntimeException rex) {    throw new IOException(rex);  }  return ret;}  }
class C{  public void tableChanged(WTableModelEvent event){  if ((event.getType() == WTableModelEvent.CONTENTS_CHANGED) && (event.getColumn() == WTableModelEvent.ALL_COLUMNS) && (event.getFirstRow() == WTableModelEvent.ALL_ROWS)) {    this.repaint();  } else   if ((event.getType() == WTableModelEvent.CONTENTS_CHANGED) && event.getFirstRow() != WTableModelEvent.ALL_ROWS && !m_readWriteColumn.isEmpty()) {    ListModelTable model=this.getModel();    if (event.getLastRow() > event.getFirstRow()) {      int[] indices=this.getSelectedIndices();      model.updateComponent(event.getFirstRow(),event.getLastRow());      if (indices != null && indices.length > 0) {        this.setSelectedIndices(indices);      }    } else {      boolean selected=false;      ListItem listItem=this.getItemAtIndex(event.getFirstRow());      if (listItem != null && listItem.isSelected()) {        selected=true;      }      model.updateComponent(event.getFirstRow());      listItem=this.getItemAtIndex(event.getFirstRow());      if (listItem != null && !listItem.isSelected() && selected) {        listItem.setSelected(true);      }    }  }  return;}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  try {    SQLEncoding[] encoding=this.sqlEncoder.encodeTask(task);    String s;    for (    SQLEncoding sql : encoding) {      s=sql.getQuery() + "\r\n";      this.output.write(s.getBytes(WIKIPEDIA_ENCODING));      this.output.flush();    }    if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {      if (this.sqlArchive.length() > LIMIT_SQL_ARCHIVE_SIZE) {        writeHeader();      }      if (!MODE_STATISTICAL_OUTPUT) {        System.out.println(task.toString());      }    } else {      System.out.println(task.toString());    }  } catch (  DecodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }catch (  EncodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }}  }
class C{  public static void registerCustom(byte type,IgniteOutClosure<Message> c){  assert c != null;  CUSTOM.put(type,c);}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Sequence";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Year",year);  bdr.addSimpleElement("Label",label);  bdr.addSimpleElement("Sequence",Integer.toString(sequence));  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public String toString(){  return state.toString();}  }
class C{  public synchronized void renameSchemaObject(Session session,SchemaObject obj,String newName){  obj.getSchema().rename(obj,newName);}  }
class C{  private void snap(){  mTranslateRect.set(mTempSrc);  mMatrix.mapRect(mTranslateRect);  float maxLeft=mAllowCrop ? mCropRect.left : 0.0f;  float maxRight=mAllowCrop ? mCropRect.right : getWidth();  float l=mTranslateRect.left;  float r=mTranslateRect.right;  final float translateX;  if (r - l < maxRight - maxLeft) {    translateX=maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;  } else   if (l > maxLeft) {    translateX=maxLeft - l;  } else   if (r < maxRight) {    translateX=maxRight - r;  } else {    translateX=0.0f;  }  float maxTop=mAllowCrop ? mCropRect.top : 0.0f;  float maxBottom=mAllowCrop ? mCropRect.bottom : getHeight();  float t=mTranslateRect.top;  float b=mTranslateRect.bottom;  final float translateY;  if (b - t < maxBottom - maxTop) {    translateY=maxTop + ((maxBottom - maxTop) - (b + t)) / 2;  } else   if (t > maxTop) {    translateY=maxTop - t;  } else   if (b < maxBottom) {    translateY=maxBottom - b;  } else {    translateY=0.0f;  }  if (Math.abs(translateX) > SNAP_THRESHOLD || Math.abs(translateY) > SNAP_THRESHOLD) {    mSnapRunnable.start(translateX,translateY);  } else {    mMatrix.postTranslate(translateX,translateY);    invalidate();  }}  }
class C{  public SimpleWizard(SimpleWizardInfo info,boolean subwizard){  this.info=info;  this.subwizard=subwizard;  info.setWizard(this);}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public static RegexpQueryBuilder regexpQuery(String name,String regexp){  return new RegexpQueryBuilder(name,regexp);}  }
class C{  public static boolean exists(final Context context,final String assetFilePath){  boolean bAssetOk=false;  try {    InputStream stream=context.getAssets().open(assetFilePath);    stream.close();    bAssetOk=true;  } catch (  Exception e) {  }  return bAssetOk;}  }
class C{  public static long readUnsignedVarintLong(ByteBuffer buffer) throws IOException {  long val=0;  int bits=0;  while (true) {    final int data=buffer.get();    val|=(data & 0x7F) << bits;    if ((data & 0x80) == 0) {      return val;    }    bits+=7;    if (bits > 63) {      throw new IOException("Variable length quantity is too long for expected integer.");    }  }}  }
class C{  public Interpreter(ConsoleInterface console){  this(console,null);}  }
class C{  public void writeHouseholds(String outputfolder){  outputfolder=outputfolder + (outputfolder.endsWith("/") ? "" : "/");  if (sc.getHouseholds() == null || sc.getHouseholds().getHouseholdAttributes() == null) {    throw new RuntimeException("Either no households or household attributes to write.");  } else {    LOG.info("Writing households to file... (" + sc.getHouseholds().getHouseholds().size() + ")");    HouseholdsWriterV10 hw=new HouseholdsWriterV10(sc.getHouseholds());    hw.setPrettyPrint(true);    hw.writeFile(outputfolder + "Households.xml");    LOG.info("Writing household attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getHouseholds().getHouseholdAttributes());    oaw.putAttributeConverter(IncomeImpl.class,new SAIncomeConverter());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "HouseholdAttributes.xml");  }}  }
class C{  public static void pasteItem(final Point p,final OdorWorldPanel parent){  OdorWorldEntity temp=getClipboardEntity();  if (temp != null) {  }  copyItem(temp);}  }
class C{  void clearCookies(){  log.trace("clearCookies: clear all cookies.");  cookies=new ArrayList<>();}  }
class C{  public boolean hasLinks(){  return hasRepeatingExtension(Link.class);}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  public void testConnectPan(){  int iterations=BluetoothTestRunner.sConnectPanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectPan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectPan(adapter,device);    mTestUtils.disconnectPan(adapter,device);  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  public void deleteAsync(final String id,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(id,responseCallback);}  }
class C{  public RepositoryMetaData(String name,String type,Settings settings){  this.name=name;  this.type=type;  this.settings=settings;}  }
class C{  @POST @Path("/{id}") @RolesAllowed({"system/admin"}) @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public ProfileDescriptor update(@PathParam("id") String profileId,Map<String,String> updates,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException {  if (updates == null || updates.isEmpty()) {    throw new ConflictException("Attributes to update required");  }  final Profile profile=profileDao.getById(profileId);  profile.getAttributes().putAll(updates);  profileDao.update(profile);  final User user=userDao.getById(profile.getUserId());  logEventUserUpdateProfile(user,profile.getAttributes());  return toDescriptor(profile,context);}  }
class C{  public Range(double lower,double upper){  if (lower > upper) {    String msg="Range(double, double): require lower (" + lower + ") <= upper ("+ upper+ ").";    throw new IllegalArgumentException(msg);  }  this.lower=lower;  this.upper=upper;}  }
class C{  private ReplaceTokens.Token createLoggingToken(){  String errorEnabled="true";  String warningEnabled="true";  String infoEnabled="true";  String debugEnabled="false";  String cargoLogLevel=getPropertyValue(GeneralPropertySet.LOGGING);  if (LoggingLevel.LOW.equalsLevel(cargoLogLevel)) {    warningEnabled="false";    infoEnabled="false";  } else   if (LoggingLevel.HIGH.equalsLevel(cargoLogLevel)) {    debugEnabled="true";  }  StringBuilder logging=new StringBuilder();  logging.append("<!-- cargo logging level: " + cargoLogLevel + " --> \n");  logging.append("<attribute name=\"errorEnabled\">" + errorEnabled + "</attribute>\n");  logging.append("<attribute name=\"warningEnabled\">" + warningEnabled + "</attribute>\n");  logging.append("<attribute name=\"infoEnabled\">" + infoEnabled + "</attribute>\n");  logging.append("<attribute name=\"debugEnabled\">" + debugEnabled + "</attribute>\n");  ReplaceTokens.Token tokenLogging=new ReplaceTokens.Token();  tokenLogging.setKey("cargo.jrun.logging");  tokenLogging.setValue(logging.toString());  return tokenLogging;}  }
class C{  public static void assertUtilityClassWellDefined(final Class<?> classObject) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {  assertTrue("class must be final",Modifier.isFinal(classObject.getModifiers()));  assertEquals("There must be only one constructor",1,classObject.getDeclaredConstructors().length);  final Constructor<?> constructor=classObject.getDeclaredConstructor();  if (constructor.isAccessible() || !Modifier.isPrivate(constructor.getModifiers())) {    fail("constructor is not private");  }  constructor.setAccessible(true);  constructor.newInstance();  constructor.setAccessible(false);  for (  final Method method : classObject.getMethods()) {    if (!Modifier.isStatic(method.getModifiers()) && method.getDeclaringClass().equals(classObject)) {      fail("there exists a non-static method:" + method);    }  }}  }
class C{  public void eliminarListasAcceso(String[] listasAcceso){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateORTokens(CAMPO_ID,listasAcceso));  deleteVO(qual.toString(),TABLE_NAME_LISTA_CONTROL);}  }
class C{  public void valueChanged(TreeSelectionEvent e){  TreeSelectionEvent newE;  newE=(TreeSelectionEvent)e.cloneWithSource(JTree.this);  fireValueChanged(newE);}  }
class C{  public void addAll(HyperLogLog other){  if (this.sizeof() != other.sizeof()) {    throw new RuntimeException("Cannot merge estimators of different sizes");  }  registerSet.merge(other.registerSet);}  }
class C{  public JSONArray put(Collection value){  this.put(new JSONArray(value));  return this;}  }
class C{  public boolean isVersion2(){  return hasParameter("openid.ns") && OPENID2_NS.equals(getParameterValue("openid.ns"));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  zone.setNoItemMoveMessage(attributes.get("message"));}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<String,GridCacheContext> t=stash.get();    return t.get2().logger(t.get1());  } catch (  IllegalStateException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  }}  }
class C{  public final long readLong() throws java.io.IOException {  return 0l;}  }
class C{  public XmlHandler fromXmlToAnnotationAll(Class<?>... classes){  for (  Class<?> classe : classes) {    fromXmlToAnnotation(classe);    for (    Class<?> inner : classe.getClasses())     if (inner.isMemberClass())     fromXmlToAnnotation(inner);  }  return this;}  }
class C{  public Option(String key,String name,HashMap<String,Object> values,String descriptionHtml){  super();  this.key=key;  this.name=name;  this.values=values;  this.descriptionHtml=descriptionHtml;}  }
class C{  public void execute() throws CqClosedException, RegionNotFoundException, CqException {  executeCqOnRedundantsAndPrimary(false);}  }
class C{  public JavaDBStorageEngine(String name,ConnectionPoolDataSource dataSource) throws PersistException {  super();  this.name=name;  this.dbTableName=name.replace('.','_');  this.dataSource=dataSource;  try {    initTable();  } catch (  SQLException sqle) {    throw new PersistException("Could not initialize persistent storage",sqle);  }}  }
class C{  private static LocalTime create(int hour,int minute,int second,int nanoOfSecond){  if ((minute | second | nanoOfSecond) == 0) {    return HOURS[hour];  }  return new LocalTime(hour,minute,second,nanoOfSecond);}  }
class C{  private boolean autoReconnect(int count){  if (!isClosed()) {    return false;  }  if (!autoReconnect) {    return false;  }  if (!cluster && !autoCommit) {    return false;  }  if (count > SysProperties.MAX_RECONNECT) {    return false;  }  lastReconnect++;  while (true) {    try {      embedded=connectEmbeddedOrServer(false);      break;    } catch (    DbException e) {      if (e.getErrorCode() != ErrorCode.DATABASE_IS_IN_EXCLUSIVE_MODE) {        throw e;      }      try {        Thread.sleep(500);      } catch (      Exception e2) {      }    }  }  if (embedded == this) {    embedded=null;  } else {    connectEmbeddedOrServer(true);  }  recreateSessionState();  if (eventListener != null) {    eventListener.setProgress(DatabaseEventListener.STATE_RECONNECTED,databaseName,count,SysProperties.MAX_RECONNECT);  }  return true;}  }
class C{  public void computePackageFragmentRoots(IClasspathEntry resolvedEntry,ObjectVector accumulatedRoots,HashSet rootIDs,IClasspathEntry referringEntry,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  String rootID=((ClasspathEntry)resolvedEntry).rootID();  if (rootIDs.contains(rootID))   return;  IPath projectPath=this.project.getFullPath();  IPath entryPath=resolvedEntry.getPath();  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IPackageFragmentRoot root=null;switch (resolvedEntry.getEntryKind()) {case IClasspathEntry.CPE_SOURCE:    if (projectPath.isPrefixOf(entryPath)) {      Object target=getTarget(entryPath,true);      if (target == null)       return;      if (target instanceof IFolder || target instanceof IProject) {        root=getPackageFragmentRoot((IResource)target);      }    }  break;case IClasspathEntry.CPE_LIBRARY:if (referringEntry != null && !resolvedEntry.isExported()) return;Object target=getTarget(entryPath,true);if (target == null) return;if (target instanceof IResource) {root=getPackageFragmentRoot((IResource)target,entryPath);} else if (target instanceof File) {if (isFile(target)) {root=new JarPackageFragmentRoot(entryPath,this);} else if (((File)target).isDirectory()) {throw new UnsupportedOperationException();}}break;case IClasspathEntry.CPE_PROJECT:if (!retrieveExportedRoots) return;if (referringEntry != null && !resolvedEntry.isExported()) return;IResource member=workspaceRoot.findMember(entryPath);if (member != null && member.getType() == IResource.PROJECT) {IProject requiredProjectRsc=(IProject)member;if (org.eclipse.jdt.internal.core.JavaProject.hasJavaNature(requiredProjectRsc)) {rootIDs.add(rootID);org.eclipse.jdt.internal.core.JavaProject requiredProject=(org.eclipse.jdt.internal.core.JavaProject)JavaCore.create(requiredProjectRsc);requiredProject.computePackageFragmentRoots(requiredProject.getResolvedClasspath(),accumulatedRoots,rootIDs,rootToResolvedEntries == null ? resolvedEntry : ((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry)referringEntry),retrieveExportedRoots,rootToResolvedEntries);}break;}}if (root != null) {accumulatedRoots.add(root);rootIDs.add(rootID);if (rootToResolvedEntries != null) rootToResolvedEntries.put(root,((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry)referringEntry));}}  }
class C{  private Solution parseSolution(String line){  String[] entries=line.trim().split("\\s+");  Solution solution=null;  if (entries.length < problem.getNumberOfObjectives()) {    error=true;    return null;  }  try {    if (entries.length == (problem.getNumberOfVariables() + problem.getNumberOfObjectives())) {      solution=problem.newSolution();      for (int i=0; i < problem.getNumberOfVariables(); i++) {        solution.setVariable(i,decode(solution.getVariable(i),entries[i]));      }    } else {      solution=new Solution(0,problem.getNumberOfObjectives());    }    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      solution.setObjective(i,Double.parseDouble(entries[entries.length - problem.getNumberOfObjectives() + i]));    }  } catch (  Exception e) {    e.printStackTrace();    error=true;    return null;  }  return solution;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowDivElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean lint(String s){  return isSet(XLINT_CUSTOM,s) || (isSet(XLINT) || isSet(XLINT_CUSTOM,"all")) && isUnset(XLINT_CUSTOM,"-" + s);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodevalue.class,args);}  }
class C{  public ResourceStatus(String type,String name,String state,TungstenProperties properties){  this.type=type;  this.name=name;  this.state=state;  this.properties=properties;}  }
class C{  @SuppressWarnings("unchecked") protected void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String method=null;  String name="";  String path="";  List<String> elementList=new ArrayList<String>();  List<FileItem> fileItemList=null;  String saasId="";  String userId="";  String instanceId="";  String contextPath=null;  HttpSession session=request.getSession();  method=request.getParameter(Constants.PARAM_METHOD);  if (method != null && method.equals(Constants.LOGOUT)) {    BssClient bssClient=new BssClient(request.getRemoteHost());    String logoutPath=bssClient.logoutUser((String)session.getAttribute(Constants.SAAS_ID));    response.sendRedirect(logoutPath);    session.invalidate();    return;  }  if (method != null && method.equals(Constants.METHOD_RESET)) {    File dir=new File(getRealRootPath(request));    String[] names=dir.list();    if (names != null) {      delete(request,dir,Arrays.asList(names));      response.getWriter().println("<html><body>Content of directory " + dir + " deleted!</body></html>");    }    return;  }  userId=(String)session.getAttribute(Constants.USER_ID);  saasId=(String)session.getAttribute(Constants.SAAS_ID);  instanceId=(String)session.getAttribute(Constants.INSTANCE_ID);  boolean flag=false;  if (flag) {    userId="admin";    saasId="saasId";    instanceId="instanceId";    File dir=new File(getRealRootPath(request),instanceId);    if (!dir.exists()) {      dir.mkdirs();    }  }  if (userId == null || userId.length() == 0 || saasId == null || saasId.length() == 0 || instanceId == null || instanceId.length() == 0) {    String usertoken=request.getParameter(Constants.USERTOKEN);    saasId=request.getParameter(Constants.SAAS_ID);    instanceId=request.getParameter(Constants.INSTANCE_ID);    contextPath=request.getParameter(Constants.CONTEXT_PATH);    BssClient bssClient=new BssClient(request.getRemoteHost());    if (usertoken != null && saasId != null) {      userId=bssClient.resolveUsertoken(usertoken,saasId);      session.setAttribute(Constants.USER_ID,userId);      session.setAttribute(Constants.SAAS_ID,saasId);      session.setAttribute(Constants.INSTANCE_ID,instanceId);    }  }  if (userId == null || userId.length() == 0 || saasId == null || saasId.length() == 0 || instanceId == null || instanceId.length() == 0) {    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    return;  }  if (contextPath != null) {    Properties props=BssClient.getProperties();    String baseUrl=props.getProperty("mybaseUrl");    if (baseUrl == null) {      response.sendRedirect(request.getContextPath() + contextPath);    } else {      response.sendRedirect(baseUrl + contextPath);    }    return;  }  boolean isMultipart=ServletFileUpload.isMultipartContent(request);  if (isMultipart) {    DiskFileItemFactory factory=new DiskFileItemFactory();    ServletFileUpload upload=new ServletFileUpload(factory);    try {      fileItemList=upload.parseRequest(request);      Iterator<FileItem> it=fileItemList.iterator();      while (it.hasNext()) {        FileItem item=it.next();        if (item.isFormField()) {          if (Constants.PARAM_METHOD.equals(item.getFieldName())) {            method=item.getString();          } else           if (Constants.PARAM_NAME.equals(item.getFieldName())) {            name=item.getString();          } else           if (Constants.PARAM_PATH.equals(item.getFieldName())) {            path=item.getString();          } else           if (Constants.PARAM_ELEMENT.equals(item.getFieldName())) {            elementList.add(item.getString());          }        }      }    } catch (    FileUploadException e1) {      addError(request,ERROR_UPLOAD);      e1.printStackTrace();    }  } else {    method=request.getParameter(Constants.PARAM_METHOD);    name=request.getParameter(Constants.PARAM_NAME);    path=request.getParameter(Constants.PARAM_PATH);    String[] elementArray=request.getParameterValues(Constants.PARAM_ELEMENT);    if (elementArray != null) {      Collections.addAll(elementList,request.getParameterValues(Constants.PARAM_ELEMENT));    }  }  request.setAttribute(Constants.PARAM_NAME,name);  File instanceRootPath=new File(getRealRootPath(request),instanceId);  if (!instanceRootPath.exists()) {    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    return;  }  if (path == null) {    path="";  }  while (path.endsWith("/") || path.endsWith("\\")) {    path=path.substring(0,path.length() - 1);  }  File dir=new File(instanceRootPath,path);  if (!isAccessible(request,dir)) {    path="";    dir=instanceRootPath;  } else   if (dir.getCanonicalPath().equals(instanceRootPath.getCanonicalPath())) {    path="";  } else {    String parentPath=path;    while (parentPath.length() > 0 && !parentPath.endsWith("/") && !parentPath.endsWith("\\")) {      parentPath=parentPath.substring(0,parentPath.length() - 1);    }    if (parentPath.length() > 0) {      parentPath=parentPath.substring(0,parentPath.length() - 1);    }    request.setAttribute(Constants.ATTRIBUTE_PARENT_PATH,URLEncoder.encode(parentPath,Constants.URL_ENCODING));  }  if (Constants.METHOD_COPY.equals(method)) {    copy(request,dir,name,elementList);  } else   if (Constants.METHOD_CREATE.equals(method)) {    if (isCreatePossible(instanceRootPath)) {      create(request,dir,name);    } else {      addError(request,ERROR_PARAM_FOLDER);    }  } else   if (Constants.METHOD_DELETE.equals(method)) {    delete(request,dir,elementList);  } else   if (Constants.METHOD_MOVE.equals(method)) {    move(request,dir,name,elementList);  } else   if (Constants.METHOD_RENAME.equals(method)) {    if (elementList.size() == 1) {      rename(request,dir,elementList.get(0),name);    }  } else   if (Constants.METHOD_UPLOAD.equals(method)) {    if (isUploadPossible(instanceRootPath)) {      upload(request,dir,fileItemList);    } else {      addError(request,ERROR_PARAM_FILE);    }  } else   if (Constants.METHOD_ZIP.equals(method) && elementList.size() == 1) {    ByteArrayOutputStream baos=zip(request,dir,elementList);    response.setContentType("application/zip");    Calendar cal=Calendar.getInstance();    SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");    sdf.format(cal.getTime());    response.setHeader("Content-Disposition","attachment;filename=\"" + sdf.format(cal.getTime()) + "-mmp.zip\"");    baos.writeTo(response.getOutputStream());    return;  } else   if (Constants.METHOD_GET.equals(method)) {    BssClient bssClient=new BssClient(request.getRemoteHost());    try {      bssClient.recordEvent(saasId,ProvisioningServiceSkeleton.EVENT_ID_FILE_DOWNLOAD,getUserId(request),MULTIPLIER);    } catch (    OrganizationAuthoritiesExceptionException e) {      addError(request,e.getMessage());    }catch (    ValidationExceptionException e) {      addError(request,e.getMessage());    }catch (    ObjectNotFoundExceptionException e) {      addError(request,e.getMessage());    }    String element=elementList.get(0);    File file=new File(dir,element);    response.setContentType(getContentType(file));    response.setHeader("Content-Disposition","attachment;filename=\"" + elementList + "\"");    FileInputStream in=null;    ServletOutputStream out=null;    byte[] buf=new byte[1024];    int len;    try {      in=new FileInputStream(file.getCanonicalFile());      out=response.getOutputStream();      while ((len=in.read(buf)) > 0) {        out.write(buf,0,len);      }    }  finally {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    }    return;  }  request.setAttribute(Constants.ATTRIBUTE_PATH,path);  File[] fileArray=dir.listFiles();  request.setAttribute(Constants.ATTRIBUTE_DIR_ELEMENTS,fileArray);  request.getRequestDispatcher(Constants.JSP_list).forward(request,response);}  }
class C{  private static void initializeTooltipDelay(){  final ToolTipManager toolTipManager=ToolTipManager.sharedInstance();  toolTipManager.setDismissDelay(60000);  toolTipManager.setInitialDelay(1000);  toolTipManager.setReshowDelay(1000);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntLongHashMap)) {    return false;  }  TIntLongHashMap that=(TIntLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public static void assertFailedU(String update){  assertFailedU(null,update);}  }
class C{  public static void w(String message,Throwable cause){  Log.w(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public void insertLocal(int index,int tag,int classInfo) throws BadBytecode {  byte[] data=new InsertLocal(this,index,tag,classInfo).doit();  this.set(data);}  }
class C{  public SegmentInfo(Directory dir,Version version,String name,int maxDoc,boolean isCompoundFile,Codec codec,Map<String,String> diagnostics,byte[] id,Map<String,String> attributes,Sort indexSort){  assert !(dir instanceof TrackingDirectoryWrapper);  this.dir=Objects.requireNonNull(dir);  this.version=Objects.requireNonNull(version);  this.name=Objects.requireNonNull(name);  this.maxDoc=maxDoc;  this.isCompoundFile=isCompoundFile;  this.codec=codec;  this.diagnostics=Objects.requireNonNull(diagnostics);  this.id=id;  if (id.length != StringHelper.ID_LENGTH) {    throw new IllegalArgumentException("invalid id: " + Arrays.toString(id));  }  this.attributes=Objects.requireNonNull(attributes);  this.indexSort=indexSort;}  }
class C{  public List<FunctionWrapper> compileFunctions(ImportStack importStack,Context context,List<?> objects){  List<FunctionWrapper> callbacks=new LinkedList<>();  for (  Object object : objects) {    List<FunctionWrapper> objectCallbacks=compileFunctions(importStack,context,object);    callbacks.addAll(objectCallbacks);  }  return callbacks;}  }
class C{  public long rangeCount(boolean exactCount){  return map.rangeCount(exactCount);}  }
class C{  public void close(){  mInterrupted=true;  mBuffer.close();  if (sLogger.isActivated()) {    sLogger.debug("Dummy source stream closed");  }}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  public OFMirrorGetVendorDataRequest(){  super(BSN_GET_MIRRORING_REQUEST);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NonLocalRegionEntry(RegionEntry re,LocalRegion br,boolean allowTombstones){  this.key=re.getKey();  if (allowTombstones && re.isTombstone()) {    this.value=Token.TOMBSTONE;  } else {    this.value=re.getValue(br);  }  Assert.assertTrue(this.value != Token.NOT_AVAILABLE,"getEntry did not fault value in from disk");  this.lastModified=re.getLastModified();  this.isRemoved=re.isRemoved();  VersionStamp stamp=re.getVersionStamp();  if (stamp != null) {    this.versionTag=stamp.asVersionTag();  }}  }
class C{  public void printClassificationAccuracy(String dataInput) throws Exception {  System.out.println("\nCalculating how many tuples were correctly classified...");  DataSource scource=new DataSource(dataInput);  Instances testCleaned=scource.getDataSet();  System.out.println("\nThe following tuples were wrongly classified: ");  int correctCount=0;  for (int j=0; j < testCleaned.numInstances(); j++) {    if (groundTruthInstancesSet.contains(testCleaned.instance(j).toString()))     correctCount++; else     System.out.println(testCleaned.instance(j).toString());  }  float percent=(correctCount * 100.0f) / testCleaned.numInstances();  System.out.println("\n" + percent + "%: "+ correctCount+ " out of "+ testCleaned.numInstances()+ " correctly classified.");}  }
class C{  @Override public boolean supportsSchemasInIndexDefinitions(){  debugCodeCall("supportsSchemasInIndexDefinitions");  return true;}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  private byte[][] readSubrs(byte[] d){  return readArray(d,"Subrs","index");}  }
class C{  void locked(Object key){  locked.add(key);}  }
class C{  protected Properties procline(String cmdline){  Vector v=tokenize(cmdline);  if (DEBUG_VERBOSE)   Debug.output("  parsed: " + v.toString());  Properties eventProps=new Properties();  String cmd=v.firstElement().toString();  int shape=nargs[4];  if (cmd.equals(NODE_OBJECT)) {    eventProps.put(COMMAND_FIELD,NODE_OBJECT);    eventProps.put(INDEX_FIELD,Integer.toString(nargs[1]));    eventProps.put(SHAPE_FIELD,Integer.toString(nargs[4]));    if (v.elementAt(4) instanceof String) {      String icon=(String)v.elementAt(4);      eventProps.put(SHAPE_FIELD,"11");      eventProps.put(ICON_FIELD,icon);      if (DEBUG)       Debug.output("NetMapReader: jimage  " + icon);    }    if (shape == NODE_DELETE) {      eventProps.put(SHAPE_FIELD,NODE_DELETE_STRING);    } else {      if (shape == NODE_MOVE) {        eventProps.put(SHAPE_FIELD,NODE_MOVE_STRING);        eventProps.put(TIME_FIELD,Integer.toString(nargs[8]));      } else {        eventProps.put(WIDTH_FIELD,Integer.toString(nargs[5]));        eventProps.put(HEIGHT_FIELD,Integer.toString(nargs[6]));        eventProps.put(STATUS_FIELD,Integer.toString(nargs[7]));        eventProps.put(MENU_FIELD,Integer.toString(nargs[8]));        eventProps.put(LABEL_FIELD,(String)v.elementAt(9));        eventProps.put(NAME_FIELD,(String)v.elementAt(11));        eventProps.put(JOFFSET_FIELD,Integer.toString(nargs[10]));      }      eventProps.put(POSX_FIELD,Integer.toString(nargs[2]));      eventProps.put(POSY_FIELD,Integer.toString(nargs[3]));      String elev=null;      if ((elev=getVal("elev=",cmdline)) != null) {        eventProps.put(ELEVATION_FIELD,elev);      }      String geo=null;      if ((geo=getVal("lat=",cmdline)) != null) {        eventProps.put(LAT_FIELD,geo);      }      if ((geo=getVal("lon=",cmdline)) != null) {        eventProps.put(LON_FIELD,geo);      }      if ((geo=getVal("ip=",cmdline)) != null) {        eventProps.put(IP_FIELD,geo);      }    }  } else   if (cmd.equals(NODE_OBJECT_STATUS)) {    eventProps.put(COMMAND_FIELD,NODE_OBJECT_STATUS);    eventProps.put(INDEX_FIELD,Integer.toString(nargs[1]));    eventProps.put(STATUS_FIELD,Integer.toString(nargs[2]));  } else   if (cmd.equals(LINK_OBJECT_STATUS)) {    eventProps.put(COMMAND_FIELD,LINK_OBJECT_STATUS);    eventProps.put(INDEX_FIELD,Integer.toString(nargs[1]));    eventProps.put(STATUS_FIELD,Integer.toString(nargs[2]));  } else   if (cmd.equals(LINK_OBJECT)) {    eventProps.put(COMMAND_FIELD,LINK_OBJECT);    eventProps.put(INDEX_FIELD,Integer.toString(nargs[1]));    eventProps.put(SHAPE_FIELD,Integer.toString(nargs[2]));    if (shape != -1) {      eventProps.put(STATUS_FIELD,Integer.toString(nargs[5]));      eventProps.put(LINK_NODE1_FIELD,Integer.toString(nargs[3]));      eventProps.put(LINK_NODE2_FIELD,Integer.toString(nargs[4]));    }  } else   if (cmd.equals(REFRESH)) {    eventProps.put(COMMAND_FIELD,REFRESH);  } else   if (cmd.equals(UPDATE)) {    eventProps.put(COMMAND_FIELD,UPDATE);  }  return eventProps;}  }
class C{  public CollectionDragControl(Map<Node,List<Node>> groups,Function<Node,VisualItem> adapter,Function<VisualItem,VisualItem> aggAdapter){  this.groups=Collections.unmodifiableMap(groups);  this.aggAdapter=aggAdapter;  this.adapter=adapter;  dragged=false;  selectedItem=null;}  }
class C{  public UF5(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  String read(File f) throws IOException {  byte[] bytes=new byte[(int)f.length()];  DataInputStream in=new DataInputStream(new FileInputStream(f));  try {    in.readFully(bytes);  }  finally {    in.close();  }  return new String(bytes);}  }
class C{  private static String encode(final byte[] binaryData){  LOG.trace("enter DigestScheme.encode(byte[])");  if (binaryData.length != 16) {    return null;  }  final char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    final int low=(binaryData[i] & 0x0f);    final int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  private void depthDec(int index){  if (--depths[index] < 0)   depths[index]=0;  depthCalc();}  }
class C{  public TFSRepository connectIfNecessary(final IProject project){  Check.notNull(project,"project");  waitForManagerStartup();  ProjectRepositoryData projectData;synchronized (projectDataLock) {    projectData=projectDataMap.get(project);    if (projectData == null) {      Boolean shouldConnect=shouldConnect(project);      if (shouldConnect == null) {        return null;      }      projectData=new ProjectRepositoryData();      projectDataMap.put(project,projectData);      projectClosedSet.remove(project);      if (shouldConnect.equals(Boolean.FALSE) && isAnyProjectOfStatus(ProjectRepositoryStatus.ONLINE)) {        shouldConnect=Boolean.TRUE;      } else       if (shouldConnect.equals(Boolean.TRUE) && isAnyProjectOfStatus(ProjectRepositoryStatus.OFFLINE)) {        shouldConnect=Boolean.FALSE;      }      if (shouldConnect == Boolean.FALSE) {        projectData.setStatus(ProjectRepositoryStatus.OFFLINE);        return null;      }      projectData.setStatus(ProjectRepositoryStatus.CONNECTING);    } else {synchronized (projectData) {        if (projectData.getStatus() == ProjectRepositoryStatus.INITIALIZING) {          return null;        } else         if (projectData.getStatus() != ProjectRepositoryStatus.CONNECTING) {          return projectData.getRepository();        }      }    }  }  return connectInternal(project,true,projectData);}  }
class C{  @Override public boolean pruneValues(double threshold){  return false;}  }
class C{  public final AssertSubscriber<T> await(){  if (cdl.getCount() == 0) {    return this;  }  try {    cdl.await();  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }  return this;}  }
class C{  public StringIndexOutOfBoundsException(java.lang.String s){  super(s);}  }
class C{  private void safeInitializeTrees(){  if (this.trees == null) {    trees=new ArrayList<>();    for (int i=0; i < this.getTextAnnotation().getNumberOfSentences(); i++) {      trees.add(null);    }  }}  }
class C{  public static boolean isVisaElectron(String cc){  String first6digs=cc.substring(0,6);  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first6digs.equals("417500") || first4digs.equals("4917") || first4digs.equals("4913")|| first4digs.equals("4508")|| first4digs.equals("4844")|| first4digs.equals("4027")))   return isCreditCard(cc);  return false;}  }
class C{  public void testClearBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public Word(String f){  this(f,null,null);}  }
class C{  public void removeAllContours(){  this.contours.removeAllContours();}  }
class C{  public static String quote(String string){  boolean quote=false;  if ((string.indexOf('\n') != -1) || (string.indexOf('\r') != -1) || (string.indexOf('\'') != -1)|| (string.indexOf('"') != -1)|| (string.indexOf('\\') != -1)|| (string.indexOf('\t') != -1)|| (string.indexOf('%') != -1)|| (string.indexOf('\u001E') != -1)) {    string=backQuoteChars(string);    quote=true;  }  if ((quote == true) || (string.indexOf('{') != -1) || (string.indexOf('}') != -1)|| (string.indexOf(',') != -1)|| (string.equals("?"))|| (string.indexOf(' ') != -1)|| (string.equals(""))) {    string=("'".concat(string)).concat("'");  }  return string;}  }
class C{  private final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey); else   msgKey="";  if (msg == null) {    throwex=true;    try {      msg=java.text.MessageFormat.format(MsgKey.BAD_MSGKEY,new Object[]{msgKey,m_resourceBundleName});    } catch (    Exception e) {      msg="The message key '" + msgKey + "' is not in the message class '"+ m_resourceBundleName+ "'";    }  } else   if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      throwex=true;      try {        fmsg=java.text.MessageFormat.format(MsgKey.BAD_MSGFORMAT,new Object[]{msgKey,m_resourceBundleName});        fmsg+=" " + msg;      } catch (      Exception formatfailed) {        fmsg="The format of message '" + msgKey + "' in message class '"+ m_resourceBundleName+ "' failed.";      }    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public boolean supportsSolr(){  return version() >= 1.041f;}  }
class C{  public void reset(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   genome[x]=randomValueFromClosedInterval((int)s.minGene(x),(int)s.maxGene(x),state.random[thread]);}  }
class C{  public SSLSessionCache(Context context){  File dir=context.getDir("sslcache",Context.MODE_PRIVATE);  SSLClientSessionCache cache=null;  try {    cache=FileClientSessionCache.usingDirectory(dir);  } catch (  IOException e) {    Log.w(TAG,"Unable to create SSL session cache in " + dir,e);  }  mSessionCache=cache;}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,V>();  }}  }
class C{  public static float random(float min,float max){  return (float)random((double)min,(double)max);}  }
class C{  @Override public String toString(){  int len=sessionId.length;  StringBuffer s=new StringBuffer(10 + 2 * len);  s.append("{");  for (int i=0; i < len; i++) {    s.append(0x0ff & sessionId[i]);    if (i != (len - 1))     s.append(", ");  }  s.append("}");  return s.toString();}  }
class C{  public Type box(Type t){  if (!t.isPrimitive()) {    throw new AssertionError("Cannot box non-primitive type: " + t);  }  return types.boxedClass(t).type;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object newInstance(Constructor c){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(classLoader);  try {    return c.newInstance(new Object[0]);  } catch (  InstantiationException e) {    throw new ContainerException("Tomcat reported an error: " + e.getMessage(),e);  }catch (  InvocationTargetException e) {    throw new ContainerException("Tomcat reported an error: " + e.getMessage(),e);  }catch (  IllegalAccessException e) {    throw new ContainerException("Tomcat reported an error: " + e.getMessage(),e);  } finally {    Thread.currentThread().setContextClassLoader(cl);  }}  }
class C{  public AnchorUpdateControl(Layout layout){  this(layout,null);}  }
class C{  @Override public String createElement(int element){  StringBuilder sb=new StringBuilder();  sb.append(element);  for (int i=0; i < 20; i++) {    sb.append(":this is a very cool element, it is element number ").append(i);  }  return sb.toString();}  }
class C{  protected LayerList createLayersFromProperties(String layerNames){  LayerList layers=new LayerList();  if (layerNames == null)   return null;  String[] names=layerNames.split(",");  for (  String name : names) {    try {      if (name.length() > 0) {        Layer l=(Layer)WorldWind.createComponent(name);        layers.add(l);      }    } catch (    Exception e) {      Logging.logger().log(Level.WARNING,Logging.getMessage("BasicModel.LayerNotFound",name),e);    }  }  return layers;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  void assertEnd(){  assertNull("Extra data after end",data.poll());}  }
class C{  public void testProvidesChecksum(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals(true,instance.providesChecksum());}  }
class C{  public void onSwap(String spaceName,Object key) throws IgniteSpiException {  assert enabled();  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to process swap event (grid is stopping).");  try {    getSpi().onSwap(spaceName,key);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  @Override public Vertex parseElement(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean includeBinary,boolean debug,Network network){  try {    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    Vertex element=parseElementByteCode(stream,dataStream,elements,includeBinary,debug,network);    if (element != null) {      return element;    }    Vertex expression=network.createVertex();    expression.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);    BinaryData byteCode=new BinaryData();    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    expression.setData(byteCode);    network.addVertex(expression);    return expression;  } catch (  IOException exception) {    throw new SelfParseException("IO Error",stream,exception);  }}  }
class C{  private String geAllVolumeNamesFromMap(Map<String,VPlexVirtualVolumeInfo> virtualVolumesToFind){  StringBuffer volumesBuffer=new StringBuffer();  if (!virtualVolumesToFind.isEmpty()) {    Set<String> volumeNames=virtualVolumesToFind.keySet();    for (    String volumeName : volumeNames) {      volumesBuffer.append(volumeName).append(" ");    }  }  return volumesBuffer.toString();}  }
class C{  public void newObject() throws IOException {  writeCode(NEW_OBJECT);}  }
class C{  @DSComment("Request/Change/Listen Android Manger") @DSSpec(DSCat.ANDROID_MANAGER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.308 -0500",hash_original_method="630BE7480BA2E95DA9CEC1F52BBE219A",hash_generated_method="77542B059D3E982AEC0DAA518F06E8CB") public boolean disableNetwork(int netId){  try {    return mService.disableNetwork(netId);  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void push(Operand r){  if (VM.VerifyAssertions)   opt_assert(r.instruction == null);  stack.push(r);}  }
class C{  private static int defaultMaximumDistance(final Entity entity,final int x,final int y){  int manhattan=Math.abs(x - entity.getX()) + Math.abs(y - entity.getY());  return Math.max(2 * manhattan,40);}  }
class C{  void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mAnimation=null;  } else {    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    mTransformation=new Transformation();    mAnimation=new AlphaAnimation(0.0f,1.0f);    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  private void fireActiveLineRangeEvent(int min,int max){  ActiveLineRangeEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActiveLineRangeListener.class) {      if (e == null) {        e=new ActiveLineRangeEvent(this,min,max);      }      ((ActiveLineRangeListener)listeners[i + 1]).activeLineRangeChanged(e);    }  }}  }
class C{  public Fragment(){  this(null,null);}  }
class C{  public static String map2AlgName(String oid){  checkCacheVersion();  String algUC=oid2AlgMap.get(oid);  if (algUC != null) {    return algAliasesMap.get(algUC);  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapOidToName(oid);  }  return null;}  }
class C{  public OrgTitle(String value){  this();  setValue(value);}  }
class C{  private void dropTriggers() throws SQLException {  String sql="select trigger_name from user_triggers order by trigger_name";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    m_dropTriggerStatements.add("DROP " + rs.getString("TRIGGER_NAME") + ";");  }  rs.close();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  void initDefaultVM(IVMInstallType vm){  fDefault=vm;}  }
class C{  public Object clone(){  try {    HashSet newSet=(HashSet)super.clone();    newSet.map=(HashMap)map.clone();    return newSet;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public ByteArray1D fromByteBuffer(ByteBuffer buffer){  if (!buffer.isDirect()) {    throw new UnsupportedOperationException("not direct");  }  ByteArray1D b=(ByteArray1D)LayoutType.getPrimArray1D(byte.class,UnsafeHelper.getDirectByteBufferLength(buffer));  Location loc=new Location(UnsafeHelper.getDirectByteBufferAddress(buffer));  b.bindLocation(loc);  return b;}  }
class C{  public static void call(final Runnable a,final Runnable b){  RuntimeException inner=null;  try {    a.run();  } catch (  final RuntimeException e) {    inner=e;  }  try {    b.run();  } catch (  final RuntimeException e) {    if (inner != null) {      e.addSuppressed(inner);    }    throw e;  }  if (inner != null) {    throw inner;  }}  }
class C{  private void init(){  SystemProperties props=SystemProperties.getInstance();  Path settingsFolder=props.getApplicationFolder("settings");  String defaultSettingsFile=props.get("settings.defaultFilename","settings.xml");  String settingsFile=props.get("settings.currentFilename",defaultSettingsFile);  load(settingsFolder.resolve(settingsFile));  refreshIcons();}  }
class C{  public boolean contains(Rectangle r1,Rectangle r2){  return r2.getY() + r2.getHeight() <= r1.getY() + r1.getHeight() && r2.getX() + r2.getWidth() <= r1.getX() + r1.getWidth() && r2.getX() > r1.getX() && r2.getY() > r1.getY();}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  public HttpMethod method(){  return method;}  }
class C{  public boolean contains(int location){  return location >= this.location && location < this.location + this.length;}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,Integer>();  }}  }
class C{  public Key<?> fixAnnotations(Key<?> key){  return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(),key.getAnnotation().annotationType());}  }
class C{  public void addAttributes(AttributeSet attr){  StyleContext context=StyleContext.this;  attributes=context.addAttributes(attributes,attr);  fireStateChanged();}  }
class C{  public Vertex createUniqueTemplate(Vertex formula,Network network){  try {    StringWriter writer=new StringWriter();    printTemplate(formula,writer,"",new ArrayList<Vertex>(),new ArrayList<Vertex>(),new HashSet<Vertex>(),network);    String source=writer.toString();    if (source.length() > AbstractNetwork.MAX_TEXT) {      return formula;    }    Vertex existingFormula=network.createVertex(source);    if (!existingFormula.instanceOf(Primitive.FORMULA)) {      for (Iterator<Relationship> iterator=formula.orderedAllRelationships(); iterator.hasNext(); ) {        Relationship relationship=iterator.next();        existingFormula.addRelationship(relationship.getType(),relationship.getTarget(),relationship.getIndex());      }    }    return existingFormula;  } catch (  IOException ignore) {    throw new BotException(ignore);  }}  }
class C{  public long numBits(){  return (firstFunction != null ? firstFunction.numBits() : 0) + secondFunction.numBits() + transform.numBits()+ remap.length * (long)Long.SIZE;}  }
class C{  public boolean isAbsoluteURI(){  return (_scheme != null);}  }
class C{  public List<User> _queryMessage_Readers(Long id){synchronized (this) {    if (message_ReadersQuery == null) {      QueryBuilder<User> queryBuilder=queryBuilder();      queryBuilder.where(Properties.Id.eq(null));      message_ReadersQuery=queryBuilder.build();    }  }  Query<User> query=message_ReadersQuery.forCurrentThread();  query.setParameter(0,id);  return query.list();}  }
class C{  private Color calculateColor(final float x,final float y){  final float cx;  final float cy;  if (DecoderOptions.isRunningOnMac) {    cx=scaling * (x + xstart);    cy=scaling * (y + ystart);  } else {    cx=scaling * (x + xstart);    cy=scaling * (pageHeight - (y + ystart));  }  final float[] values={cx,cy};  final float[] colValues=ShadingFactory.applyFunctions(function,values);  final int count=colValues.length;  shadingColorSpace.setColor(colValues,count);  return (Color)shadingColorSpace.getColor();}  }
class C{  private static void checkContentType(String contentType,String accept,String ext,boolean strict) throws PageException {  if (!StringUtil.isEmpty(ext,true)) {    ext=ext.trim().toLowerCase();    if (ext.startsWith("*."))     ext=ext.substring(2);    if (ext.startsWith("."))     ext=ext.substring(1);  } else   ext=null;  if (StringUtil.isEmpty(accept,true))   return;  MimeType mt=MimeType.getInstance(contentType), sub;  Array whishedTypes=ListUtil.listToArrayRemoveEmpty(accept,',');  int len=whishedTypes.size();  for (int i=1; i <= len; i++) {    String whishedType=Caster.toString(whishedTypes.getE(i)).trim().toLowerCase();    if (whishedType.equals("*"))     return;    if (ListUtil.len(whishedType,"/",true) == 2) {      sub=MimeType.getInstance(whishedType);      if (mt.match(sub))       return;    }    if (ext != null && !strict) {      if (whishedType.startsWith("*."))       whishedType=whishedType.substring(2);      if (whishedType.startsWith("."))       whishedType=whishedType.substring(1);      if (ext.equals(whishedType))       return;    }  }  throw new ApplicationException("The MIME type of the uploaded file [" + contentType + "] was not accepted by the server.","only this [" + accept + "] mime type are accepted");}  }
class C{  static void mergeInto(DoublesSketch source,DoublesSketch target){  HeapDoublesSketch src=(HeapDoublesSketch)source;  HeapDoublesSketch tgt=(HeapDoublesSketch)target;  int srcK=src.getK();  int tgtK=tgt.getK();  long srcN=src.getN();  long tgtN=tgt.getN();  if (srcK != tgtK) {    DoublesMergeImpl.downSamplingMergeInto(src,tgt);    return;  }  double[] srcLevels=src.getCombinedBuffer();  double[] srcBaseBuffer=srcLevels;  long nFinal=tgtN + srcN;  for (int i=0; i < src.getBaseBufferCount(); i++) {    tgt.update(srcBaseBuffer[i]);  }  DoublesUpdateImpl.maybeGrowLevels(nFinal,tgt);  double[] scratchBuf=new double[2 * tgtK];  long srcBitPattern=src.getBitPattern();  assert srcBitPattern == (srcN / (2L * srcK));  for (int srcLvl=0; srcBitPattern != 0L; srcLvl++, srcBitPattern>>>=1) {    if ((srcBitPattern & 1L) > 0L) {      DoublesUpdateImpl.inPlacePropagateCarry(srcLvl,srcLevels,((2 + srcLvl) * tgtK),scratchBuf,0,false,tgt);    }  }  tgt.n_=nFinal;  assert tgt.getN() / (2 * tgtK) == tgt.getBitPattern();  double srcMax=src.getMaxValue();  double srcMin=src.getMinValue();  double tgtMax=tgt.getMaxValue();  double tgtMin=tgt.getMinValue();  if (srcMax > tgtMax) {    tgt.maxValue_=srcMax;  }  if (srcMin < tgtMin) {    tgt.minValue_=srcMin;  }}  }
class C{  protected void addToQuarantineQueue(NodePortTuple npt){  if (quarantineQueue.contains(npt) == false) {    quarantineQueue.add(npt);  }}  }
class C{  public static CronScheduleBuilder monthlyOnDayAndHourAndMinute(int dayOfMonth,int hour,int minute){  DateBuilder.validateDayOfMonth(dayOfMonth);  DateBuilder.validateHour(hour);  DateBuilder.validateMinute(minute);  String cronExpression=String.format("0 %d %d %d * ?",minute,hour,dayOfMonth);  return cronScheduleNoParseException(cronExpression);}  }
class C{  public void addIncludedTax(BigDecimal amt){  m_includedTax=m_includedTax.add(amt);}  }
class C{  public static boolean propertyValueEquals(URL url,String name,String compareString){  String value=getPropertyValue(url,name);  if (value == null)   return false;  return value.trim().equals(compareString);}  }
class C{  public CallSpec<Void,HttpError> acceptContactRequest(String recipientId,String senderId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/users/{user_id}/contact_requests/{sender_id}/accept",false).pathParam("user_id",recipientId).pathParam("sender_id",senderId).responseAs(Void.class).build();}  }
class C{  public void addFixedNodeBefore(FixedWithNextNode node,FixedNode position){  add("add fixed node",null);}  }
class C{  public static boolean isCurrentlyFinal(RVMMethod callee,boolean searchSubclasses){  RVMClass klass=callee.getDeclaringClass();  if (klass.isInterface()) {    return false;  }  RVMClass[] subClasses=klass.getSubClasses();  if (subClasses.length == 0) {    return true;  } else   if (searchSubclasses) {    Stack<RVMClass> s=new Stack<RVMClass>();    for (    RVMClass subClass1 : subClasses) {      s.push(subClass1);    }    while (!s.isEmpty()) {      RVMClass subClass=s.pop();      if (subClass.findDeclaredMethod(callee.getName(),callee.getDescriptor()) != null) {        return false;      }      subClasses=subClass.getSubClasses();      for (      RVMClass subClass1 : subClasses) {        s.push(subClass1);      }    }    return true;  } else {    return false;  }}  }
class C{  public static final String associationPath(@Nonnull String alias,@Nonnull String propertyName){  return alias + "." + propertyName;}  }
class C{  public Iterator inEdges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(inEdgeRows(node.getRow()));}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public TCPConnectionHandler(AbstractModbusListener listener,TCPSlaveConnection connection){  this.listener=listener;  this.connection=connection;  transport=this.connection.getModbusTransport();}  }
class C{  public void hexSelected(BoardViewEvent b){}  }
class C{  public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  protected void handleHREF(RenderableImage image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  imageElement.setAttributeNS(XLINK_NAMESPACE_URI,XLINK_HREF_QNAME,image.toString());}  }
class C{  public boolean closeBlocksDrawer(){  if (mCloseable && mBlockListView.getVisibility() == View.VISIBLE) {    mBlockListView.setVisibility(View.GONE);    mActionButton.setVisibility(View.GONE);    mCategoryTabs.setSelectedCategory(null);    return true;  }  return false;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean keepCR){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace),keepCR,DEFAULT_VERIFY_READER);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.SOURCE_FRAGMENT__SOURCE_FRAGMENT_TYPE:    return sourceFragmentType != SOURCE_FRAGMENT_TYPE_EDEFAULT;case N4mfPackage.SOURCE_FRAGMENT__PATHS:  return paths != null && !paths.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void addPoint(final DataPoint point){  logger.debug("addPoint called");  checkDimension(point);  _addPoint(point);}  }
class C{  public ProgressBar(final JDialog w){  super(w,"Connecting...",true);  initializeComponents();  this.pack();  setLocationRelativeTo(w);}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mCdmaDbm);  dest.writeInt(mCdmaEcio);  dest.writeInt(mEvdoDbm);  dest.writeInt(mEvdoEcio);  dest.writeInt(mEvdoSnr);}  }
class C{  public PaymentChannelV1ServerState(TransactionBroadcaster broadcaster,Wallet wallet,ECKey serverKey,long minExpireTime){  super(broadcaster,wallet,serverKey,minExpireTime);  stateMachine.transition(State.WAITING_FOR_REFUND_TRANSACTION);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    if (resolve)     return getOwner();  return basicGetOwner();case DomPackage.SIMPLE_TYPE_REFERENCE__TYPE_NAME:return getTypeName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void pushLongAsDouble(FPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_LONG);  asm.emitSTFD(reg,spTopOffset - BYTES_IN_LONG,FP);  spTopOffset-=2 * BYTES_IN_STACKSLOT;}  }
class C{  private long currentTotalCpuTime(ThreadMXBean mgmt){  long rslt=0;  for (  long tid : mgmt.getAllThreadIds()) {    long t=mgmt.getThreadCpuTime(tid);    if (t != -1)     rslt+=t;  }  return rslt;}  }
class C{  public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  private void extractDataFromInvocation(EntityManager entityManager,InvocationSequenceData invData,InvocationSequenceData topInvocationParent){  double exclusiveDurationDelta=0d;  for (  InvocationSequenceData child : invData.getNestedSequences()) {    passToChainedProcessors(child,entityManager);    if (null != child.getTimerData()) {      exclusiveDurationDelta+=child.getTimerData().getDuration();    } else     if (null != child.getSqlStatementData()) {      exclusiveDurationDelta+=child.getSqlStatementData().getDuration();    } else {      exclusiveDurationDelta+=InvocationSequenceDataHelper.computeNestedDuration(child);    }    extractDataFromInvocation(entityManager,child,topInvocationParent);  }  processSqlStatementData(entityManager,invData,topInvocationParent);  processTimerData(entityManager,invData,topInvocationParent,exclusiveDurationDelta);  processExceptionSensorData(entityManager,invData,topInvocationParent);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:29.914 -0500",hash_original_method="4BE44702079F6982C8F2A1526F7D2A98",hash_generated_method="35BF11F5FF60BA87520630AA007991D9") protected void entryEvicted(K key,V value){}  }
class C{  private static void compareImage(final BufferedImage bi1,final BufferedImage bi2) throws IOException {  for (int i=0; i < SIZE; ++i) {    for (int j=0; j < SIZE; ++j) {      if (bi1.getRGB(i,j) != bi2.getRGB(i,j)) {        ImageIO.write(bi1,"png",new File("image1.png"));        ImageIO.write(bi2,"png",new File("image2.png"));        throw new RuntimeException("Failed: wrong text location");      }    }  }}  }
class C{  protected UnManagedVolume injectVolumeInformation(UnManagedVolume storageVolumeInfo,CIMInstance volumeInstance,Map<String,StringSet> volumeInformation){  if (null == volumeInformation) {    volumeInformation=new HashMap<String,StringSet>();  }  for (  SupportedVolumeInformation volumeInfo : SupportedVolumeInformation.values()) {    injectIntoVolumeInformationContainer(volumeInformation,volumeInfo.getInfoKey(),volumeInfo.getAlternateKey(),volumeInstance);  }  storageVolumeInfo.addVolumeInformation(volumeInformation);  return storageVolumeInfo;}  }
class C{  DistributedSystemHealthEvaluator(DistributedSystemHealthConfig config,DM dm){  super(null,dm);  this.config=config;  this.dm=dm;  this.dm.addMembershipListener(this);  StringBuffer sb=new StringBuffer();  sb.append("Distributed System ");  String desc=null;  if (dm instanceof DistributionManager) {    desc=((DistributionManager)dm).getDistributionConfigDescription();  }  if (desc != null) {    sb.append(desc);  } else {    DistributionConfig dsc=dm.getSystem().getConfig();    String locators=dsc.getLocators();    if (locators == null || locators.equals("")) {      sb.append("using multicast ");      sb.append(dsc.getMcastAddress());      sb.append(":");      sb.append(dsc.getMcastPort());    } else {      sb.append("using locators ");      sb.append(locators);    }  }  this.description=sb.toString();}  }
class C{  @SuppressWarnings("unchecked") protected void notifyMessage(XpaMessage m,XpaListener notMe){  Vector<XpaListener> v;synchronized (this) {    v=(Vector<XpaListener>)cmdListeners.clone();  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    XpaListener client=v.elementAt(i);    if (notMe != client) {      if (log.isDebugEnabled()) {        log.debug("notify client: " + client);      }      try {        client.message(m);      } catch (      Exception e) {        log.warn("notify: During dispatch to " + client + "\nException "+ e);      }    }  }}  }
class C{  public synchronized void resetLocalDevices(){  localDevices=null;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void onAsyncTaskCompleted(int aSuccessCount,int aTotalCount,long aTrackId){  successCount=aSuccessCount;  totalCount=aTotalCount;  trackId=aTrackId;  removeDialog(DIALOG_PROGRESS_ID);  showDialog(DIALOG_RESULT_ID);}  }
class C{  protected void fireTradeOrderCancelled(TradeOrder tradeOrder){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).tradeOrderCancelled(tradeOrder);    }  }}  }
class C{  public int graphType(){  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graphType(); else   return Drawable.NOT_DRAWABLE;}  }
class C{  @Deprecated protected InfoInvoice(Frame frame,boolean modal,int WindowNo,String value,boolean multiSelection,String whereClause){  this(frame,modal,WindowNo,0,value,multiSelection,true,whereClause);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public boolean isNormalized(){  return normalized;}  }
class C{  public ConfigReader(final Config config){  this.config=config;}  }
class C{  public Clustering<Model> run(Relation<V> relation){  final DBIDs ids=relation.getDBIDs();  if (ids.size() < minpts) {    Clustering<Model> result=new Clustering<>("DBSCAN Clustering","dbscan-clustering");    result.addToplevelCluster(new Cluster<Model>(ids,true,ClusterModel.CLUSTER));    return result;  }  double gridwidth=this.gridwidth;  if (gridwidth < 2. * epsilon) {    LOG.warning("Invalid grid width (less than 2*epsilon, recommended 10*epsilon). Increasing grid width automatically.");    gridwidth=2. * epsilon;  }  return new Instance<V>(getDistanceFunction(),epsilon,minpts,gridwidth).run(relation);}  }
class C{  private PriorityQueue<ScoreTerm> createQueue(Map<String,Int> words,String... fieldNames) throws IOException {  int numDocs=ir.numDocs();  final int limit=Math.min(maxQueryTerms,words.size());  FreqQ queue=new FreqQ(limit);  for (  String word : words.keySet()) {    int tf=words.get(word).x;    if (minTermFreq > 0 && tf < minTermFreq) {      continue;    }    String topField=fieldNames[0];    int docFreq=0;    for (    String fieldName : fieldNames) {      int freq=ir.docFreq(new Term(fieldName,word));      topField=(freq > docFreq) ? fieldName : topField;      docFreq=(freq > docFreq) ? freq : docFreq;    }    if (minDocFreq > 0 && docFreq < minDocFreq) {      continue;    }    if (docFreq > maxDocFreq) {      continue;    }    if (docFreq == 0) {      continue;    }    float idf=similarity.idf(docFreq,numDocs);    float score=tf * idf;    if (queue.size() < limit) {      queue.add(new ScoreTerm(word,topField,score,idf,docFreq,tf));    } else {      ScoreTerm term=queue.top();      if (term.score < score) {        term.update(word,topField,score,idf,docFreq,tf);        queue.updateTop();      }    }  }  return queue;}  }
class C{  protected final Object[] copyChildren(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  public String describe(){  return String.format("%s (%s)",getDevice().getName(),getDevice().getAddress());}  }
class C{  public TreeNode buildTree(int[] preorder,int[] inorder){  if (preorder == null || inorder == null)   return null;  return buildTree(preorder,inorder,0,preorder.length - 1,0,inorder.length - 1);}  }
class C{  public static boolean isDefaultContainerPath(String containerId,IPath path){  return isContainerPath(containerId,path) && (path.segmentCount() == 1 || path.segment(1).matches("v[0-9]{1,2}"));}  }
class C{  public boolean send(XmppMsg message,String to){  if (to == null) {    Log.i("Sending message \"" + message.toShortString() + "\"");  } else {    Log.i("Sending message \"" + message.toShortString() + "\" to "+ to);  }  Message msg;  MultiUserChat muc=null;  if (to == null) {    msg=new Message();  } else {    msg=new Message(to);    muc=mXmppMuc.getRoomViaRoomName(to);  }  msg.setFrom(mConnection.getUser());  msg.setBody(mSettings.formatResponses ? message.generateFmtTxt() : message.generateTxt());  try {    XHTMLManager.addBody(msg,message.generateXHTMLText());  } catch (  Exception e) {    Log.d("XHTMLManager error. Ex:" + e.getMessage());  }  msg.setType(muc == null ? Message.Type.chat : Message.Type.groupchat);  if (isConnected()) {    if (muc == null && to == null) {      return XmppMultipleRecipientManager.send(mConnection,msg);    } else     if (muc == null) {      try {        mConnection.sendStanza(msg);      } catch (      SmackException.NotConnectedException e) {        Log.e("Send message error. Ex:" + e.getMessage());        return false;      }    } else {      try {        muc.sendMessage(msg);      } catch (      Exception e) {        Log.e("Send message MUC error. Ex:" + e.getMessage());        return false;      }    }    return true;  } else {    boolean result=mClientOfflineMessages.addOfflineMessage(msg);    Log.d("Adding message: \"" + message.toShortString() + "\" to offline queue, because we are not connected. Status="+ statusString());    return result;  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean rightClickOff(OMGraphic omg,MouseEvent me){  if (DEBUG) {    Debug.output("rightClickOff(" + omg.getClass().getName() + ") at "+ me.getX()+ ", "+ me.getY());  }  return false;}  }
class C{  public GCP(){  super("Global Code Placement",new OptimizationPlanElement[]{new OptimizationPlanAtomicElement(new GCPPreparation()),new OptimizationPlanAtomicElement(new EnterSSA()),new OptimizationPlanAtomicElement(new GlobalCSE()),new OptimizationPlanAtomicElement(new EnterSSA()),new OptimizationPlanAtomicElement(new LICM()),new OptimizationPlanAtomicElement(new GCPFinalization())});}  }
class C{  private void pushFloat(FPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_FLOAT);  asm.emitSTFS(reg,spTopOffset - BYTES_IN_FLOAT,FP);  spTopOffset-=BYTES_IN_STACKSLOT;}  }
class C{  public PrincipalUser(PrincipalUser creator,String userName,String email){  super(creator);  setUserName(userName);  setEmail(email);}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public void addRuleInstances(Digester digester){  digester.addCallMethod("*/page-url","setPageUrl",0);  digester.addObjectCreate("*/window","javax.faces.component.UIForm");  digester.addObjectCreate("*/label","javax.faces.component.UIOutput");  digester.addObjectCreate("*/textbox","javax.faces.component.UIInput");  digester.addObjectCreate("*/checkbox","javax.faces.component.UISelectBoolean");  digester.addObjectCreate("*/radiogroup","javax.faces.component.UISelectOne");  digester.addObjectCreate("*/menupopup","javax.faces.component.UISelectOne");  digester.addObjectCreate("*/link","javax.faces.component.UICommand");  digester.addObjectCreate("*/button","javax.faces.component.UICommand");  digester.addObjectCreate("*/image","javax.faces.component.UIGraphic");  digester.addFactoryCreate("*/uicomponent",new UIComponentFactory());  ComponentRule cRule=new ComponentRule();  cRule.setBuildComponent(buildComponent);  digester.addRule("*/window",cRule);  digester.addRule("*/label",cRule);  digester.addRule("*/textbox",cRule);  digester.addRule("*/checkbox",cRule);  digester.addRule("*/radiogroup",cRule);  digester.addRule("*/menupopup",cRule);  digester.addRule("*/link",cRule);  digester.addRule("*/button",cRule);  digester.addRule("*/image",cRule);  ComponentNestedRule cnRule=new ComponentNestedRule();  cnRule.setBuildComponent(buildComponent);  digester.addRule("*/radio",cnRule);  digester.addRule("*/menuitem",cnRule);}  }
class C{  private static String keyUsageToString(boolean[] k){  String s="KeyUsage [\n";  try {    if (k[0]) {      s+="  DigitalSignature\n";    }    if (k[1]) {      s+="  Non_repudiation\n";    }    if (k[2]) {      s+="  Key_Encipherment\n";    }    if (k[3]) {      s+="  Data_Encipherment\n";    }    if (k[4]) {      s+="  Key_Agreement\n";    }    if (k[5]) {      s+="  Key_CertSign\n";    }    if (k[6]) {      s+="  Crl_Sign\n";    }    if (k[7]) {      s+="  Encipher_Only\n";    }    if (k[8]) {      s+="  Decipher_Only\n";    }  } catch (  ArrayIndexOutOfBoundsException ex) {  }  s+="]\n";  return (s);}  }
class C{  public final boolean linkChunk(Chunk chunk){  ChunkPos chunkPos=new ChunkPos(chunk.xPosition,chunk.zPosition);  if (!this.linkedChunks.contains(chunkPos)) {    ChunkDataBase chunkData=ChunkDataBase.forChunk(this.worldStorage,chunk);    if (chunkData != null && chunkData.linkSharedStorage(this)) {      if (this.linkedChunks.add(chunkPos)) {        this.setDirty(true);        return true;      }    }  }  return false;}  }
class C{  public void checkClientTrusted(final X509Certificate[] certs,final String authType){}  }
class C{  public UserNotice(NoticeReference noticeRef,DisplayText explicitText){  this.noticeRef=noticeRef;  this.explicitText=explicitText;}  }
class C{  public String simpleQueryForString(){  acquireReference();  try {    return getSession().executeForString(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  private void init_key(){  P=(int[])P_orig.clone();  S=(int[])S_orig.clone();}  }
class C{  public Element store(Object o){  SingleTurnoutSignalHead p=(SingleTurnoutSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  Element el=new Element("appearance");  el.setAttribute("defines","thrown");  el.addContent(getSignalColour(p.getOnAppearance()));  element.addContent(el);  el=new Element("appearance");  el.setAttribute("defines","closed");  el.addContent(getSignalColour(p.getOffAppearance()));  element.addContent(el);  el=new Element("turnoutname");  el.setAttribute("defines","aspect");  el.addContent(p.getOutput().getName());  element.addContent(el);  return element;}  }
class C{  @SuppressWarnings("unchecked") private void updateDemandDetailForReceiptCreate(final Set<ReceiptAccountInfo> accountDetails,final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("Entering method saveCollectionDetails");  BigDecimal rebateAmount=BigDecimal.ZERO;  for (  final ReceiptAccountInfo accInfo : accountDetails) {    if (accInfo.getDescription() != null) {      if (accInfo.getDescription().contains("REBATE")) {        rebateAmount=accInfo.getDrAmount();      }    }  }  LOGGER.info("saveCollectionDetails : Start get demandDetailList");  final List<EgDemandDetails> demandDetailList=persistenceService.findAllBy("select dmdet FROM EgDemandDetails dmdet " + "left join fetch dmdet.egDemandReason dmdRsn " + "left join fetch dmdRsn.egDemandReasonMaster dmdRsnMstr "+ "left join fetch dmdRsn.egInstallmentMaster installment WHERE dmdet.egDemand = ?",demand);  LOGGER.info("saveCollectionDetails : End get demandDetailList");  final Map<String,Map<String,EgDemandDetails>> installmentWiseDemandDetailsByReason=new HashMap<String,Map<String,EgDemandDetails>>();  Map<String,EgDemandDetails> demandDetailByReason=new HashMap<String,EgDemandDetails>();  EgDemandReason dmdRsn=null;  String installmentDesc=null;  Map<String,Installment> currInstallments=propertyTaxUtil.getInstallmentsForCurrYear(new Date());  for (  final EgDemandDetails dmdDtls : demandDetailList)   if (dmdDtls.getAmount().compareTo(BigDecimal.ZERO) > 0 || dmdDtls.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(DEMANDRSN_CODE_ADVANCE)) {    dmdRsn=dmdDtls.getEgDemandReason();    installmentDesc=dmdRsn.getEgInstallmentMaster().getDescription();    demandDetailByReason=new HashMap<String,EgDemandDetails>();    if (installmentWiseDemandDetailsByReason.get(installmentDesc) == null) {      demandDetailByReason.put(dmdRsn.getEgDemandReasonMaster().getReasonMaster(),dmdDtls);      installmentWiseDemandDetailsByReason.put(installmentDesc,demandDetailByReason);    } else     installmentWiseDemandDetailsByReason.get(installmentDesc).put(dmdRsn.getEgDemandReasonMaster().getReasonMaster(),dmdDtls);  } else   LOGGER.info("saveCollectionDetails - demand detail amount is zero " + dmdDtls);  LOGGER.info("saveCollectionDetails - installment demandDetails size = " + installmentWiseDemandDetailsByReason.size());  EgDemandDetails demandDetail=null;  for (  final ReceiptAccountInfo rcptAccInfo : accountDetails)   if (rcptAccInfo.getDescription() != null && !rcptAccInfo.getDescription().isEmpty())   if (rcptAccInfo.getCrAmount() != null && rcptAccInfo.getCrAmount().compareTo(BigDecimal.ZERO) == 1) {    final String[] desc=rcptAccInfo.getDescription().split("-",2);    final String reason=desc[0].trim();    final String instDesc=desc[1].trim();    if (reason.equalsIgnoreCase(DEMANDRSN_STR_ADVANCE)) {      demandDetail=installmentWiseDemandDetailsByReason.get(currInstallments.get(CURRENTYEAR_SECOND_HALF).getDescription()).get(reason);    } else {      demandDetail=installmentWiseDemandDetailsByReason.get(instDesc).get(reason);    }    if (rcptAccInfo.getGlCode().equalsIgnoreCase(PropertyTaxConstants.GLCODE_FOR_PENALTY)) {      if (demandDetail == null)       throw new ApplicationRuntimeException("Demand Details for reason " + reason + " and with installment "+ instDesc+ " is null "); else       demandDetail.addCollected(rcptAccInfo.getCrAmount());    } else     if (rcptAccInfo.getGlCode().equalsIgnoreCase(PropertyTaxConstants.GLCODE_FOR_ADVANCE)) {      if (demandDetail != null) {        demandDetail.setAmtCollected(demandDetail.getAmtCollected().add(rcptAccInfo.getCrAmount()));      } else {        demandDetail=insertAdvanceCollection(DEMANDRSN_CODE_ADVANCE,rcptAccInfo.getCrAmount(),currInstallments.get(CURRENTYEAR_SECOND_HALF));        demand.addEgDemandDetails(demandDetail);        persistenceService.getSession().flush();        if (installmentWiseDemandDetailsByReason.get(currInstallments.get(CURRENTYEAR_SECOND_HALF).getDescription()) == null) {          Map<String,EgDemandDetails> reasonAndDemandDetail=new HashMap<String,EgDemandDetails>();          reasonAndDemandDetail.put(DEMANDRSN_STR_ADVANCE,demandDetail);          installmentWiseDemandDetailsByReason.put(currInstallments.get(CURRENTYEAR_SECOND_HALF).getDescription(),reasonAndDemandDetail);        } else {          installmentWiseDemandDetailsByReason.get(currInstallments.get(CURRENTYEAR_SECOND_HALF).getDescription()).put(DEMANDRSN_STR_ADVANCE,demandDetail);        }      }    } else {      demandDetail.addCollectedWithOnePaisaTolerance(rcptAccInfo.getCrAmount());      if (rebateAmount.compareTo(BigDecimal.ZERO) > 0 && instDesc.equals(currInstallments.get(CURRENTYEAR_FIRST_HALF).getDescription()) && demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equals(DEMANDRSN_CODE_GENERAL_TAX)) {        demandDetail.setAmtRebate(rebateAmount);      }    }    persistCollectedReceipts(demandDetail,billRcptInfo.getReceiptNum(),totalAmount,billRcptInfo.getReceiptDate(),demandDetail.getAmtCollected());    LOGGER.info("Persisted demand and receipt details for tax : " + reason + " installment : "+ instDesc+ " with receipt No : "+ billRcptInfo.getReceiptNum()+ " for Rs. "+ rcptAccInfo.getCrAmount());  }  LOGGER.debug("Exiting method saveCollectionDetails");}  }
class C{  private GeneralPath toPath(Coordinate[] coordinates){  GeneralPath path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,coordinates.length);  if (coordinates.length > 0) {    path.moveTo((float)coordinates[0].x,(float)coordinates[0].y);    for (int i=0; i < coordinates.length; i++) {      path.lineTo((float)coordinates[i].x,(float)coordinates[i].y);    }  }  return path;}  }
class C{  public static double[] invVector(double[] inVector){  int m=inVector.length;  double[] outVector=new double[m];  for (int i=0; i < m; ++i) {    if (inVector[i] != 0) {      outVector[i]=1 / inVector[i];    } else {      outVector[i]=0;    }  }  return (outVector);}  }
class C{  public boolean hasTableId(){  return hasExtension(TableId.class);}  }
class C{  public static OutputStream newOutputStream(String fileName,boolean append) throws IOException {  return FilePath.get(fileName).newOutputStream(append);}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  private void checkCancellation(final GraphBuilderEvents event) throws LoadCancelledException {  if (!m_loadReporter.report(event)) {    throw new LoadCancelledException();  }}  }
class C{  public double dotProduct(final double x,final double y,final double z){  return this.x * x + this.y * y + this.z * z;}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public SootMethod resolveSpecialDispatch(SpecialInvokeExpr ie,SootMethod container){  SootMethod target=ie.getMethod();  if (target.getName().equals("<init>") || target.isPrivate())   return target; else   if (isSubclass(target.getDeclaringClass(),container.getDeclaringClass()))   return resolveConcreteDispatch(container.getDeclaringClass(),target); else   return target;}  }
class C{  private void removeAllTokens(){  if (tokens != null) {    for (    final Token token : tokens) {      if (token != null) {        zone.remove(token.getID());      }    }  }  tokens=null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_11:    return getAnonymous_invariant_1_1();case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_21:  return getAnonymous_invariant_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public NotificationChain basicSetRootElement(EObject newRootElement,NotificationChain msgs){  EObject oldRootElement=rootElement;  rootElement=newRootElement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT,oldRootElement,newRootElement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void render(Graphics2D g,double scale,Color color){  final int pr=4;  AffineTransform ot=g.getTransform();  AffineTransform lt=new AffineTransform();  lt.translate(this.transform.getTranslationX() * scale,this.transform.getTranslationY() * scale);  lt.rotate(this.transform.getRotation());  g.transform(lt);  for (  BodyFixture fixture : this.fixtures) {    this.renderFixture(g,scale,fixture,color);  }  Ellipse2D.Double ce=new Ellipse2D.Double(this.getLocalCenter().x * scale - pr * 0.5,this.getLocalCenter().y * scale - pr * 0.5,pr,pr);  g.setColor(Color.WHITE);  g.fill(ce);  g.setColor(Color.DARK_GRAY);  g.draw(ce);  g.setTransform(ot);}  }
class C{  protected boolean isSupportedContentType(String contentType){  if (contentType != null) {    for (int i=0; i < fLegalContentTypes.length; i++) {      if (fLegalContentTypes[i].equals(contentType))       return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.850 -0500",hash_original_method="B59B7F6BD479782A00EECCEFFFB6C78B",hash_generated_method="ACBF3CE7C2065A833780F667868D8FA6") public final int countDataAuthorities(){  return mDataAuthorities != null ? mDataAuthorities.size() : 0;}  }
class C{  public void checkLinks(final boolean mouseClicked,final PdfObjectReader pdfObjectReader,final double x,final double y){  final Map objs=currentGUI.getHotspots();  if (objs != null) {    ((AnnotationHandler)decode_pdf.getExternalHandler(Options.UniqueAnnotationHandler)).checkLinks(objs,mouseClicked,pdfObjectReader,(int)x,(int)y,currentGUI,commonValues);  }}  }
class C{  public void clear(){  super.clear();  header.before=header.after=header;}  }
class C{  boolean removedAt(int removedIndex){  if (isDetached())   return true;  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  final int len=items.length;  int cycleDiff=cycles - prevCycles;  if (removedIndex < takeIndex)   cycleDiff++;  final int removedDistance=(cycleDiff * len) + (removedIndex - prevTakeIndex);  int cursor=this.cursor;  if (cursor >= 0) {    int x=distance(cursor,prevTakeIndex,len);    if (x == removedDistance) {      if (cursor == putIndex)       this.cursor=cursor=NONE;    } else     if (x > removedDistance) {      this.cursor=cursor=dec(cursor);    }  }  int lastRet=this.lastRet;  if (lastRet >= 0) {    int x=distance(lastRet,prevTakeIndex,len);    if (x == removedDistance)     this.lastRet=lastRet=REMOVED; else     if (x > removedDistance)     this.lastRet=lastRet=dec(lastRet);  }  int nextIndex=this.nextIndex;  if (nextIndex >= 0) {    int x=distance(nextIndex,prevTakeIndex,len);    if (x == removedDistance)     this.nextIndex=nextIndex=REMOVED; else     if (x > removedDistance)     this.nextIndex=nextIndex=dec(nextIndex);  } else   if (cursor < 0 && nextIndex < 0 && lastRet < 0) {    this.prevTakeIndex=DETACHED;    return true;  }  return false;}  }
class C{  protected void writeBucketData(long windowId,long bucketId,Map<Slice,Bucket.BucketedValue> data) throws IOException {  Table<Long,Slice,Bucket.BucketedValue> timeBucketedKeys=TreeBasedTable.create(Ordering.<Long>natural(),managedStateContext.getKeyComparator());  for (  Map.Entry<Slice,Bucket.BucketedValue> entry : data.entrySet()) {    long timeBucketId=entry.getValue().getTimeBucket();    timeBucketedKeys.put(timeBucketId,entry.getKey(),entry.getValue());  }  for (  long timeBucket : timeBucketedKeys.rowKeySet()) {    BucketsFileSystem.MutableTimeBucketMeta tbm=getMutableTimeBucketMeta(bucketId,timeBucket);    if (tbm == null) {      tbm=new MutableTimeBucketMeta(bucketId,timeBucket);    }    addBucketName(bucketId);    long dataSize=0;    Slice firstKey=null;    FileAccess.FileWriter fileWriter;    String tmpFileName=getTmpFileName();    if (tbm.getLastTransferredWindowId() == -1) {      fileWriter=getWriter(bucketId,tmpFileName);      for (      Map.Entry<Slice,Bucket.BucketedValue> entry : timeBucketedKeys.row(timeBucket).entrySet()) {        Slice key=entry.getKey();        Slice value=entry.getValue().getValue();        dataSize+=key.length;        dataSize+=value.length;        fileWriter.append(key.toByteArray(),value.toByteArray());        if (firstKey == null) {          firstKey=key;        }      }    } else {      TreeMap<Slice,Slice> fileData=new TreeMap<>(managedStateContext.getKeyComparator());      FileAccess.FileReader fileReader=getReader(bucketId,getFileName(timeBucket));      fileReader.readFully(fileData);      fileReader.close();      for (      Map.Entry<Slice,Bucket.BucketedValue> entry : timeBucketedKeys.row(timeBucket).entrySet()) {        fileData.put(entry.getKey(),entry.getValue().getValue());      }      fileWriter=getWriter(bucketId,tmpFileName);      for (      Map.Entry<Slice,Slice> entry : fileData.entrySet()) {        Slice key=entry.getKey();        Slice value=entry.getValue();        dataSize+=key.length;        dataSize+=value.length;        fileWriter.append(key.toByteArray(),value.toByteArray());        if (firstKey == null) {          firstKey=key;        }      }    }    fileWriter.close();    rename(bucketId,tmpFileName,getFileName(timeBucket));    tbm.updateTimeBucketMeta(windowId,dataSize,firstKey);    updateTimeBuckets(tbm);  }  updateBucketMetaFile(bucketId);}  }
class C{  private float multilinearInterpolate(float[] encoded,int od){  float[] dists=new float[encoded.length];  for (int i=0; i < dists.length; i++) {    dists[i]=(float)(encoded[i] - Math.floor(encoded[i]));  }  int map=0;  float val=getSample(encoded,map,od);  float prev=val;  for (int i=0; i < dists.length; i++) {    int idx=0;    float largest=-1;    for (int c=0; c < dists.length; c++) {      if (dists[c] > largest) {        largest=dists[c];        idx=c;      }    }    map|=(0x1 << idx);    float cur=getSample(encoded,map,od);    val+=dists[idx] * (cur - prev);    prev=val;    dists[idx]=-1;  }  return val;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.847 -0500",hash_original_method="B28573F62D1F3D7B120AF5A59DF14509",hash_generated_method="5A20277F73B401E0A3A0B01C0673AEFE") public void dump(Printer pw,String prefix){  pw.println(prefix + "activity: " + activity);  pw.println(prefix + "cause: " + cause);  pw.println(prefix + "info: " + info);}  }
class C{  public TextTokens(final byte[] rawText){  content=rawText;  length=rawText.length;  currentCharPointer=0;}  }
class C{  public DoubleAdder(){}  }
class C{  protected boolean parseTag() throws IOException {  if (peekTag) {    peekTag=false;    return true;  }  int ch=skipWhitespace();  boolean isStartTag=true;  if (ch != '<')   throw expectedChar("'<'",ch);  ch=read();  if (ch == '/') {    isStartTag=false;    ch=is.read();  }  if (!isTagChar(ch))   throw expectedChar("tag",ch);  sbuf.setLength(0);  for (; isTagChar(ch); ch=read())   sbuf.append((char)ch);  if (ch != '>')   throw expectedChar("'>'",ch);  return isStartTag;}  }
class C{  public static void showDownloadStartingNotification(Context context,Episode episode,int queueSize,int level){  Notification.Builder builder=getBaseDownloadNotification(context,episode,queueSize,level);  builder.setProgress(0,0,true);  Notification notification=builder.build();  getNotificationManager(context).notify(NOTIFICATION_ID_DOWNLOADING,notification);}  }
class C{  public Boolean isDefaultAccessPolicy(){  return defaultAccessPolicy;}  }
class C{  public static final void checkSeedHashes(short seedHashA,short seedHashB){  if (seedHashA != seedHashB) {    throw new SketchesArgumentException("Incompatible Seed Hashes. " + seedHashA + ", "+ seedHashB);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.155 -0500",hash_original_method="A88E99F5157D576DA956A58D2E3E5765",hash_generated_method="9A600698D550F34B474DF10EC9B87548") public boolean pingBinder(){  return true;}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  public void stopProxy(long millissecond){  proxy.restart(millissecond);}  }
class C{  public void invite(String target,String channel){  checkArgument(StringUtils.isNotBlank(target),"Nick '%s' is blank",target);  checkArgument(StringUtils.isNotBlank(channel),"Channel '%s' is blank",channel);  bot.sendRaw().rawLine("INVITE " + target + " :"+ channel);}  }
class C{  public static int computeKeyDigest(SignalEvent event){  return computeKeyDigest(ModifierKeys.computeModifiers(event),KeyCodeMap.getKeyFromEvent(event));}  }
class C{  private void checkColumnsInDataSet(DataSet dataSet,int[] attributeColumns) throws UserError {  int numberOfAvailableColumns=dataSet.getNumberOfColumns();  for (  int attributeColumn : attributeColumns) {    if (attributeColumn >= numberOfAvailableColumns) {      throw new UserError(null,"data_import.specified_more_columns_than_exist",metaData.get(attributeColumn).getName(),attributeColumn);    }  }}  }
class C{  private View fillFromSelection(int selectedLeft,int childrenLeft,int childrenRight){  int fadingEdgeLength=getHorizontalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,selectedPosition);  final int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,selectedPosition);  sel=makeAndAddView(selectedPosition,selectedLeft,true,mListPadding.top,true);  if (sel.getRight() > rightSelectionPixel) {    final int spaceBefore=sel.getLeft() - leftSelectionPixel;    final int spaceAfter=sel.getRight() - rightSelectionPixel;    final int offset=Math.min(spaceBefore,spaceAfter);    sel.offsetLeftAndRight(-offset);  } else   if (sel.getLeft() < leftSelectionPixel) {    final int spaceBefore=leftSelectionPixel - sel.getLeft();    final int spaceAfter=rightSelectionPixel - sel.getRight();    final int offset=Math.min(spaceBefore,spaceAfter);    sel.offsetLeftAndRight(offset);  }  fillBeforeAndAfter(sel,selectedPosition);  if (!mStackFromRight) {    correctTooWide(getChildCount());  } else {    correctTooSmall(getChildCount());  }  return sel;}  }
class C{  @Override public int compare(BaseContentEntry<?> e1,BaseContentEntry<?> e2){  int compare=e1.getUpdated().compareTo(e2.getUpdated());  return forward ? compare : -compare;}  }
class C{  public void subtract(double value){  subtract(value,1);}  }
class C{  public boolean canRedo(){  return content != null && content.canRedo();}  }
class C{  public void branchConditionally(ConditionFlag condition,Label label){  if (label.isBound()) {    int offset=label.position() - position();    super.b(condition,offset);  } else {    label.addPatchAt(position());    emitInt(PatchLabelKind.BRANCH_CONDITIONALLY.encoding | condition.encoding << PatchLabelKind.INFORMATION_OFFSET);  }}  }
class C{  public void printPath(int index){  List<V> path=getPath(index);  System.out.print("A path form " + vertices.get(root) + " to "+ vertices.get(index)+ ": ");  for (int i=path.size() - 1; i >= 0; i--)   System.out.print(path.get(i) + " ");}  }
class C{  public void putInt(String key,int value){  unparcel();  mMap.put(key,value);}  }
class C{  JavaFileObject printSource(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  JavaFileObject outFile=fileManager.getJavaFileForOutput(CLASS_OUTPUT,cdef.sym.flatname.toString(),JavaFileObject.Kind.SOURCE,null);  if (inputFiles.contains(outFile)) {    log.error(cdef.pos(),"source.cant.overwrite.input.file",outFile);    return null;  } else {    BufferedWriter out=new BufferedWriter(outFile.openWriter());    try {      new Pretty(out,true).printUnit(env.toplevel,cdef);      if (verbose)       log.printVerbose("wrote.file",outFile);    }  finally {      out.close();    }    return outFile;  }}  }
class C{  public boolean loadLibraries(){synchronized (mLock) {    if (mLoadLibraries == false) {      return mLibrariesLoaded;    }    try {      for (      String name : mLibraryNames) {        SoLoader.loadLibrary(name);      }      initialNativeCheck();      mLibrariesLoaded=true;      mLibraryNames=null;    } catch (    UnsatisfiedLinkError error) {      Log.e(TAG,"Failed to load native lib: ",error);      mLinkError=error;      mLibrariesLoaded=false;    }    mLoadLibraries=false;    return mLibrariesLoaded;  }}  }
class C{  private void rollbackCurrentTx(){  try {    TxContext ctx=txCtx.get();    if (ctx != null) {      txCtx.remove();      Transaction tx=cache.tx();      if (tx != null)       tx.rollback();    }  } catch (  IgniteException e) {    log.error("Failed to rollback cache transaction.",e);  }}  }
class C{  private boolean pushableThroughJoin(AbstractBinaryJoinOperator join){  ILogicalExpression condition=join.getCondition().getValue();  if (condition.equals(ConstantExpression.TRUE)) {    boolean pushable=true;    for (    Mutable<ILogicalOperator> branchRef : join.getInputs()) {      AbstractLogicalOperator branch=(AbstractLogicalOperator)branchRef.getValue();      if (branch.getOperatorTag() == LogicalOperatorTag.AGGREGATE) {        pushable&=true;      } else       if (branch.getOperatorTag() == LogicalOperatorTag.INNERJOIN || branch.getOperatorTag() == LogicalOperatorTag.LEFTOUTERJOIN) {        AbstractBinaryJoinOperator childJoin=(AbstractBinaryJoinOperator)branch;        pushable&=pushableThroughJoin(childJoin);      } else {        pushable&=false;      }    }    return pushable;  }  return false;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.217 -0500",hash_original_method="A44D11CC3BE0C88F3640C82011E315A3",hash_generated_method="B0732E37E958B55BB10FAA52B3D5674C") public final char readChar() throws IOException {  return (char)readShort();}  }
class C{  public void close(){  Handler[] handlerArray=m_logger.getHandlers();  for (int i=0; i < handlerArray.length; i++) {    Handler h=handlerArray[i];    h.flush();    h.close();    m_logger.removeHandler(h);  }}  }
class C{  private Collection<GraphNode> computeRoots(Collection<GraphNode> universe){  DfsState dfsState=new DfsState(this);  for (  GraphNode node : universe) {    if (dfsState.isUnvisited(node)) {      dfsState.visitNode(node);    }  }  return dfsState.extractRoots();}  }
class C{  public void init(){  context.get().init(this);}  }
class C{  public void countPlans(){  this.scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  this.population=scenario.getPopulation();  MatsimRandom.reset(123);  new MatsimNetworkReader(scenario.getNetwork()).readFile(this.networkFile);  Network network=(Network)scenario.getNetwork();  new PopulationReader(scenario).readFile(this.plansFile);  final Population plans=(Population)scenario.getPopulation();  PopulationUtils.printPlansCount(plans);  System.out.println("done.");}  }
class C{  public synchronized void end(){  this.active=false;  this.beginPosition=null;}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  protected NamedElementImpl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:01.097 -0500",hash_original_method="82B36E212F934FE090A9654C18E5A390",hash_generated_method="F816459420EA4035B4330442762F9FDE") public SSLHandshakeException(String reason){  super(reason);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ModifiableDBIDs randomSample(DBIDs source,int k,RandomFactory rnd){  return randomSample(source,k,rnd.getSingleThreadedRandom());}  }
class C{  public DefaultKeyedValue(Comparable key,Number value){  ParamChecks.nullNotPermitted(key,"key");  this.key=key;  this.value=value;}  }
class C{  public void append(String str,int off,int len){  ensureCapacity(count + len);  str.getChars(off,len,buf,count);  count+=len;}  }
class C{  public SubExpression(final MemoryExpressionElement child){  this.child=child;}  }
class C{  public void addModel(ModelRenderer model,boolean inherit){  addModel(model,0F,0F,0F,inherit);}  }
class C{  private boolean isAppInstalled(String appIdentifier){  boolean appInstalled=false;  ArrayList<DeviceAppInfo> apps=new ArrayList<>(applicationManager.getInstalledApps().values());  for (  DeviceAppInfo appInfo : apps) {    if (appIdentifier.trim().equals(appInfo.getPackagename())) {      appInstalled=true;    }  }  return appInstalled;}  }
class C{  protected void doPrintFooter(){}  }
class C{  private Optional<FileInfo> openFile(File file){  try {    String nextPath=file.getPath();    PositionTracker tracker=DurablePositionTracker.getInstance(metaFile,nextPath);    if (!tracker.getTarget().equals(nextPath)) {      tracker.close();      deleteMetaFile();      tracker=DurablePositionTracker.getInstance(metaFile,nextPath);    }    Preconditions.checkState(tracker.getTarget().equals(nextPath),"Tracker target %s does not equal expected filename %s",tracker.getTarget(),nextPath);    ResettableInputStream in=new ResettableFileInputStream(file,tracker,ResettableFileInputStream.DEFAULT_BUF_SIZE,inputCharset,decodeErrorPolicy);    EventDeserializer deserializer=EventDeserializerFactory.getInstance(deserializerType,deserializerContext,in);    return Optional.of(new FileInfo(file,deserializer));  } catch (  FileNotFoundException e) {    logger.warn("Could not find file: " + file,e);    return Optional.absent();  }catch (  IOException e) {    logger.error("Exception opening file: " + file,e);    return Optional.absent();  }}  }
class C{  protected boolean isOnPipe(Player player){  return isOnPipe(player.getUniqueId());}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    finish();  break;case R.id.action_add_header:if (headerPosition < 0) {  headerPosition=0;}headerPosition++;mAdapter.addHeader("header " + headerPosition);mList.scrollToPosition(0);return true;case R.id.action_remove_header:if (headerPosition <= 0) {return true;}headerPosition--;mAdapter.removeHeader(headerPosition);mList.scrollToPosition(0);return true;case R.id.action_add_footer:if (footerPosition < 0) {footerPosition=0;}footerPosition++;mAdapter.addFooter("footer " + footerPosition);mList.scrollToPosition(mAdapter.getItemCount() - 1);return true;case R.id.action_remove_footer:if (footerPosition <= 0) {return true;}footerPosition--;mAdapter.removeFooter(footerPosition);mList.scrollToPosition(mAdapter.getItemCount() - 1);return true;case R.id.action_change_mode:mAdapter.changeMode(++mode);if (mode > YfListMode.MODE_EMPTY) {mode=YfListMode.MODE_DATA;}return true;case R.id.action_clear_data:mCurrentPage=1;headerPosition=0;footerPosition=0;mAdapter.removeAllHeader();mAdapter.removeAllFooters();mAdapter.setData(null);return true;case R.id.action_set_data:mCurrentPage=1;mData.clear();addDummyData();headerPosition=0;footerPosition=0;mAdapter.removeAllHeader();mAdapter.removeAllFooters();mAdapter.setData(mData);return true;case R.id.action_switch_list_and_grid:int type=managerType;type++;if (type > TYPE_GRID) {type=TYPE_LINEAR;}changeLayoutManage(type);mAdapter.notifyDataSetChanged();return true;}return super.onOptionsItemSelected(item);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.POINT__Z:    return basicSetZ(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.527 -0500",hash_original_method="20558DF6BFC1217A7001B14AA50A9A03",hash_generated_method="6723A7318B1D6DCC42575E420836DAC4") public void onRegistering(SipSession session){}  }
class C{  private void changeMethod(List<Node> nodes,ContinuousDiscretizationEditor.Method method){  for (  Node node : nodes) {    DiscretizationEditor editor=this.nodeEditors.get(node);    if (editor != null && editor instanceof ContinuousDiscretizationEditor) {      ((ContinuousDiscretizationEditor)editor).setMethod(method);    }  }}  }
class C{  public synchronized void releaseCommitLock(){  commitCount--;  notifyAll();}  }
class C{  private void redoTheLayout(){  if (treeState != null) {    treeState.invalidateSizes();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.025 -0500",hash_original_method="DC790BB84150038067F2702354A483B9",hash_generated_method="A4E2E3C8ACAED1C4B3F2370CA6F94C70") public static int gsmBcdByteToInt(byte b){  int ret=0;  if ((b & 0xf0) <= 0x90) {    ret=(b >> 4) & 0xf;  }  if ((b & 0x0f) <= 0x09) {    ret+=(b & 0xf) * 10;  }  return ret;}  }
class C{  public void testBigDecimal() throws Exception {  Map<String,Object> map=new HashMap<String,Object>();  String PI_STR="3.14159265";  map.put("pi",new BigDecimal(PI_STR));  String str=new ObjectMapper().writeValueAsString(map);  assertEquals("{\"pi\":3.14159265}",str);}  }
class C{  private static Map<String,Map<String,Double>> flattenFeatureStreamToMap(Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> stream){  Map<String,Map<String,Double>> outputFeatureMap=new HashMap<>();  stream.forEach(null);  return outputFeatureMap;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException();          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException();          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException();          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException();    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException();    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void addAnalysis(ChronixAnalysis analysis){  this.analyses.add(analysis);}  }
class C{  public void tagGeneratorCommand(byte[] data) throws IOException {  startTag(SWFConstants.TAG_TEMPLATECOMMAND,false);  out.write(data);  completeTag();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.347 -0500",hash_original_method="F0069BE3C05BFC7EED89F20634609A58",hash_generated_method="B0ABF2F4F9603A7E5FAE5331334206DB") public static boolean isUpperCase(int codePoint){  if ('A' <= codePoint && codePoint <= 'Z') {    return true;  }  if (codePoint < 128) {    return false;  }  return isUpperCaseImpl(codePoint);}  }
class C{  public String toString(){  return Double.toString(get());}  }
class C{  public void deleteRange(AugmentedNode<ILineSegment> left,AugmentedNode<ILineSegment> right){  AugmentedNode<ILineSegment> t;  if (left == null) {    t=getMinimumInTree();  } else {    t=successor(left);  }  while (t != right) {    state.deleteEntry(t);    if (left == null) {      t=getMinimumInTree();    } else {      t=successor(left);    }  }}  }
class C{  public DimensionOption(DimensionOption merge,DimensionOption option){  this.mandatorySelection=merge.mandatorySelection || option.mandatorySelection;  this.singleSelection=merge.singleSelection || option.singleSelection;  this.unmodifiableSelection=merge.unmodifiableSelection || option.unmodifiableSelection;  this.hidden=merge.hidden || option.hidden;  if (option.defaultSelection != null)   this.defaultSelection=option.defaultSelection;}  }
class C{  private int[] findNearestArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,boolean ignoreOccupied,int[] result,int[] resultSpan){  lazyInitTempRectStack();  pixelX-=(mCellWidth + mWidthGap) * (spanX - 1) / 2f;  pixelY-=(mCellHeight + mHeightGap) * (spanY - 1) / 2f;  final int[] bestXY=result != null ? result : new int[2];  double bestDistance=Double.MAX_VALUE;  final Rect bestRect=new Rect(-1,-1,-1,-1);  final Stack<Rect> validRegions=new Stack<Rect>();  final int countX=mCountX;  final int countY=mCountY;  if (minSpanX <= 0 || minSpanY <= 0 || spanX <= 0 || spanY <= 0 || spanX < minSpanX || spanY < minSpanY) {    return bestXY;  }  for (int y=0; y < countY - (minSpanY - 1); y++) {    inner:     for (int x=0; x < countX - (minSpanX - 1); x++) {      int ySize=-1;      int xSize=-1;      if (ignoreOccupied) {        for (int i=0; i < minSpanX; i++) {          for (int j=0; j < minSpanY; j++) {            if (mOccupied[x + i][y + j]) {              continue inner;            }          }        }        xSize=minSpanX;        ySize=minSpanY;        boolean incX=true;        boolean hitMaxX=xSize >= spanX;        boolean hitMaxY=ySize >= spanY;        while (!(hitMaxX && hitMaxY)) {          if (incX && !hitMaxX) {            for (int j=0; j < ySize; j++) {              if (x + xSize > countX - 1 || mOccupied[x + xSize][y + j]) {                hitMaxX=true;              }            }            if (!hitMaxX) {              xSize++;            }          } else           if (!hitMaxY) {            for (int i=0; i < xSize; i++) {              if (y + ySize > countY - 1 || mOccupied[x + i][y + ySize]) {                hitMaxY=true;              }            }            if (!hitMaxY) {              ySize++;            }          }          hitMaxX|=xSize >= spanX;          hitMaxY|=ySize >= spanY;          incX=!incX;        }        incX=true;        hitMaxX=xSize >= spanX;        hitMaxY=ySize >= spanY;      }      final int[] cellXY=mTmpPoint;      cellToCenterPoint(x,y,cellXY);      Rect currentRect=mTempRectStack.pop();      currentRect.set(x,y,x + xSize,y + ySize);      boolean contained=false;      for (      Rect r : validRegions) {        if (r.contains(currentRect)) {          contained=true;          break;        }      }      validRegions.push(currentRect);      double distance=Math.hypot(cellXY[0] - pixelX,cellXY[1] - pixelY);      if ((distance <= bestDistance && !contained) || currentRect.contains(bestRect)) {        bestDistance=distance;        bestXY[0]=x;        bestXY[1]=y;        if (resultSpan != null) {          resultSpan[0]=xSize;          resultSpan[1]=ySize;        }        bestRect.set(currentRect);      }    }  }  if (bestDistance == Double.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  recycleTempRects(validRegions);  return bestXY;}  }
class C{  public Endpoint(String endpointUrl,SecurityMode... modes){  if (modes == null || endpointUrl == null)   throw new IllegalArgumentException("null arg");  for (  SecurityMode m : modes) {    if (m == null)     throw new IllegalArgumentException("null arg");    hash=13 * hash + m.hashCode();  }  this.endpointUrl=endpointUrl;  this.modes=modes;  this.endpointConfiguration=EndpointConfiguration.defaults();  hash=13 * hash + endpointUrl.hashCode();}  }
class C{  public static int compare(double a,double b){  if (a < b)   return -1;  if (a > b)   return 1;  if (Double.isNaN(a)) {    if (Double.isNaN(b))     return 0;    return -1;  }  if (Double.isNaN(b))   return 1;  return 0;}  }
class C{  private static void recursiveDeepToString(final Object o,final StringBuilder str,final Set<String> dejaVu){  if (o == null) {    str.append("null");    return;  }  if (o instanceof String) {    str.append(o);    return;  }  final Class<?> oClass=o.getClass();  if (oClass.isArray()) {    if (oClass == byte[].class) {      str.append(Arrays.toString((byte[])o));    } else     if (oClass == short[].class) {      str.append(Arrays.toString((short[])o));    } else     if (oClass == int[].class) {      str.append(Arrays.toString((int[])o));    } else     if (oClass == long[].class) {      str.append(Arrays.toString((long[])o));    } else     if (oClass == float[].class) {      str.append(Arrays.toString((float[])o));    } else     if (oClass == double[].class) {      str.append(Arrays.toString((double[])o));    } else     if (oClass == boolean[].class) {      str.append(Arrays.toString((boolean[])o));    } else     if (oClass == char[].class) {      str.append(Arrays.toString((char[])o));    } else {      final String id=identityToString(o);      if (dejaVu.contains(id)) {        str.append(RECURSION_PREFIX).append(id).append(RECURSION_SUFFIX);      } else {        dejaVu.add(id);        final Object[] oArray=(Object[])o;        str.append('[');        boolean first=true;        for (        final Object current : oArray) {          if (first) {            first=false;          } else {            str.append(", ");          }          recursiveDeepToString(current,str,new HashSet<String>(dejaVu));        }        str.append(']');      }    }  } else   if (o instanceof Map && !(o instanceof Region)) {    final String id=identityToString(o);    if (dejaVu.contains(id)) {      str.append(RECURSION_PREFIX).append(id).append(RECURSION_SUFFIX);    } else {      dejaVu.add(id);      final Map<?,?> oMap=(Map<?,?>)o;      str.append('{');      boolean isFirst=true;      for (      final Object o1 : oMap.entrySet()) {        final Map.Entry<?,?> current=(Map.Entry<?,?>)o1;        if (isFirst) {          isFirst=false;        } else {          str.append(", ");        }        final Object key=current.getKey();        final Object value=current.getValue();        recursiveDeepToString(key,str,new HashSet<String>(dejaVu));        str.append('=');        recursiveDeepToString(value,str,new HashSet<String>(dejaVu));      }      str.append('}');    }  } else   if (o instanceof Collection && !(o instanceof EntriesSet)) {    final String id=identityToString(o);    if (dejaVu.contains(id)) {      str.append(RECURSION_PREFIX).append(id).append(RECURSION_SUFFIX);    } else {      dejaVu.add(id);      final Collection<?> oCol=(Collection<?>)o;      str.append('[');      boolean isFirst=true;      for (      final Object anOCol : oCol) {        if (isFirst) {          isFirst=false;        } else {          str.append(", ");        }        recursiveDeepToString(anOCol,str,new HashSet<String>(dejaVu));      }      str.append(']');    }  } else   if (o instanceof Date) {    final Date date=(Date)o;    final SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");    str.append(format.format(date));  } else {    try {      str.append(o.toString());    } catch (    final Throwable t) {      str.append(ERROR_PREFIX);      str.append(identityToString(o));      str.append(ERROR_SEPARATOR);      final String msg=t.getMessage();      final String className=t.getClass().getName();      str.append(className);      if (!className.equals(msg)) {        str.append(ERROR_MSG_SEPARATOR);        str.append(msg);      }      str.append(ERROR_SUFFIX);    }  }}  }
class C{  public ReplaceEdit(int offset,int length,String text){  super(offset,length);  fText=text;}  }
class C{  public final static int extractFlagsFromType2Message(byte[] msg){  byte[] flagsBytes=new byte[4];  System.arraycopy(msg,20,flagsBytes,0,4);  ByteUtilities.changeWordEndianess(flagsBytes,0,4);  return ByteUtilities.makeIntFromByte4(flagsBytes);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.829 -0500",hash_original_method="80042B52D4C8A465DC8857956BEE8BCA",hash_generated_method="36E83D420586B9E8BCB225354E372599") final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  public void removeContentLength(){  if (contentLength != -1) {    headers.removeAll("Content-Length");    contentLength=-1;  }}  }
class C{  public To(From from){  super(TO);  setAddress(from.address);  setParameters(from.parameters);}  }
class C{  Transform(Iterable<? extends Transform> parts){  QName compositeName=null;  Boolean compositeRequired=null;  Boolean compositeVisible=null;  VirtualValue compositeVirtualValue=null;  TransformKey compositeSource=null;  Path compositePath=null;  boolean compositeMoved=false;  for (  Transform part : parts) {    if (part.name != null) {      compositeName=part.name;    }    if (part.required != null) {      compositeRequired=part.required;    }    if (part.visible != null) {      compositeVisible=part.visible;    }    if (part.virtualValue != null) {      compositeVirtualValue=part.virtualValue;    }    if (part.source != null) {      compositeSource=part.source;    }    if (part.path != null) {      compositePath=part.path;    }    if (part.isMoved) {      compositeMoved=true;    }  }  this.name=compositeName;  this.required=compositeRequired;  this.visible=compositeVisible;  this.virtualValue=compositeVirtualValue;  this.source=compositeSource;  this.path=compositePath;  this.isMoved=compositeMoved;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrgetvalue2.class,args);}  }
class C{  public boolean isContentAreaFilled(){  return contentAreaFilled;}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  @Override public byte[] dataToRGBByteArray(final byte[] data,final int w,final int h){  int pixelCount=w * h * 4;  final int dataSize=data.length;  if (pixelCount > dataSize) {    pixelCount=dataSize - 3;  }  final byte[] output=JDeliHelper.convertCMYK2RGB(w,h,pixelCount,data);  if (output != null) {    return output;  } else {    return convertCMYK2RGBWithSimple(w,h,pixelCount,data);  }}  }
class C{  public ServerContext updateAuthenticationInfo(final String remoteUrl){  logger.info("Updating auth info for url " + remoteUrl);  AuthenticationInfo newAuthenticationInfo=null;  boolean promptUser=true;  final URI remoteUri=UrlHelper.createUri(remoteUrl);  ServerContext matchingContext=null;  for (  final ServerContext context : getAllServerContexts()) {    logger.info("auth info updateAuthenticationInfo compare " + context.getUri().getPath());    if (UrlHelper.haveSameAuthority(remoteUri,context.getUri())) {      remove(context.getKey());      logger.info("auth info updateAuthenticationInfo removed");      if (promptUser) {        logger.info("auth info updateAuthenticationInfo prompting");        final AuthenticationProvider authenticationProvider=getAuthenticationProvider(remoteUrl);        newAuthenticationInfo=AuthHelper.getAuthenticationInfoSynchronously(authenticationProvider,remoteUrl);        promptUser=false;      }      if (newAuthenticationInfo != null) {        logger.info("auth info updateAuthenticationInfo not null");        final ServerContextBuilder builder=new ServerContextBuilder(context);        builder.authentication(newAuthenticationInfo);        final ServerContext newContext=builder.build();        logger.info(context.getUri().toString() + "       " + remoteUrl);        if (StringUtils.equalsIgnoreCase(context.getUri().toString(),remoteUrl)) {          logger.info("The updated auth info created a context that matches the remote url");          add(newContext,true);          matchingContext=newContext;        } else {          logger.info("The updated auth info created a context that has a different remote url");          add(newContext,false);        }      }    }  }  logger.info("auth info updateAuthenticationInfo returning an updated context: " + (matchingContext == null ? "false" : "true"));  return matchingContext;}  }
class C{  Map<K,StatefulValue<K,V>> writeCache(){  return writeCache;}  }
class C{  public void begin(Attributes attributes){}  }
class C{  public int catchType(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.catchType;}  }
class C{  public static WallPostFragment newInstance(){  WallPostFragment f=new WallPostFragment();  return f;}  }
class C{  public static Map<String,Integer> createRuleIndexMap(String[] ruleNames){  return Utils.toMap(ruleNames);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  NamedNodeMap attributes;  Attr districtAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("lang");  districtAttr=testEmployee.setAttributeNode(newAttribute);  districtAttr=testEmployee.removeAttributeNode(newAttribute);  attributes=testEmployee.getAttributes();  districtAttr=(Attr)attributes.getNamedItem("lang");  assertNull("removed_item_null",districtAttr);}  }
class C{  @Override protected void doPost(WorkbenchRequest req,HttpServletResponse resp,String xslPath) throws Exception {  dropRepository(req.getParameter("id"));  resp.sendRedirect("../");}  }
class C{  public CompilerException(String message){  super(message);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static <Resp>Resp executeWithConnection(JedisPool jedisPool,Function<Jedis,Resp> func) throws Exception {  return executeWithConnection(jedisPool,-1,func);}  }
class C{  public static void rotationX(View v,float fromX,float toX,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.ROTATION_X,fromX,toX);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  public RuntimeClassPathImpl(Project proj){  super(proj);}  }
class C{  public DrawerBuilder withTranslucentStatusBarProgrammatically(boolean translucentStatusBarProgrammatically){  this.mTranslucentStatusBarProgrammatically=translucentStatusBarProgrammatically;  if (translucentStatusBarProgrammatically) {    this.mTranslucentStatusBar=true;  }  return this;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public double[] toArray(){  int pos=0;  double[] array=new double[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  private String createPayment(MBankStatementLine bsl) throws Exception {  if (bsl == null || bsl.getC_Payment_ID() != 0)   return "--";  log.fine(bsl.toString());  if (bsl.getC_Invoice_ID() == 0 && bsl.getC_BPartner_ID() == 0)   throw new AdempiereUserError("@NotFound@ @C_Invoice_ID@ / @C_BPartner_ID@");  MBankStatement bs=new MBankStatement(getCtx(),bsl.getC_BankStatement_ID(),get_TrxName());  MPayment payment=createPayment(bsl.getC_Invoice_ID(),bsl.getC_BPartner_ID(),bsl.getC_Currency_ID(),bsl.getStmtAmt(),bsl.getTrxAmt(),bs.getC_BankAccount_ID(),bsl.getStatementLineDate(),bsl.getDateAcct(),bsl.getDescription(),bsl.getAD_Org_ID());  if (payment == null)   throw new AdempiereSystemError("Could not create Payment");  bsl.setPayment(payment);  bsl.saveEx();  String retString="@C_Payment_ID@ = " + payment.getDocumentNo();  if (payment.getOverUnderAmt().signum() != 0)   retString+=" - @OverUnderAmt@=" + payment.getOverUnderAmt();  return retString;}  }
class C{  public StringMemberValue(ConstPool cp){  super('s',cp);  setValue("");}  }
class C{  protected TextEditorBasedStructureViewModel(final Editor editor){  this(editor,null);}  }
class C{  @Override public boolean start(){  if (!_lifecycle.toActive()) {    return false;  }  return true;}  }
class C{  public void addVariable(String key,String value){  m_envVars.put(key,value);}  }
class C{  public static void UF1(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    yj=yj * yj;    if (j % 2 == 0) {      sum2+=yj;      count2++;    } else {      sum1+=yj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;}  }
class C{  public EntryStream<K,V> distinctKeys(){  return distinct(null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void sequence_TAnnotation(ISerializationContext context,TAnnotation semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isMultiTouchSupported(){  try {    return CCDirector.sharedDirector().getActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH);  } catch (  Exception e) {  }  return false;}  }
class C{  public synchronized Vertex mostConsciousTargetOfType(Vertex classification){  Iterator<Relationship> relationships=allRelationships();  Vertex highest=null;  Vertex instantiation=this.network.createVertex(Primitive.INSTANTIATION);  while (relationships.hasNext()) {    Relationship relationship=relationships.next();    if (!relationship.isInverse() && (relationship.getTarget().hasRelationship(instantiation,classification)) && ((highest == null) || (relationship.getTarget().getConsciousnessLevel() > highest.getConsciousnessLevel()))) {      highest=relationship.getTarget();    }  }  return highest;}  }
class C{  private void fireMyEvent(VSDecoderEvent evt){  for (  VSDecoderListener l : listenerList.getListeners(VSDecoderListener.class)) {    l.eventAction(evt);  }}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  protected int[] attributeList(BitSet group){  int count=0;  for (int i=0; i < m_numAttribs; i++) {    if (group.get(i)) {      count++;    }  }  int[] list=new int[count];  count=0;  for (int i=0; i < m_numAttribs; i++) {    if (group.get(i)) {      list[count++]=i;    }  }  return list;}  }
class C{  public SHA256(){  super();}  }
class C{  public MusicVideosNavigatorView(){}  }
class C{  public static Query toQuery(Object o,boolean duplicate) throws PageException {  if (o instanceof Query) {    if (duplicate) {      Query src=(Query)o;      Query trg=new QueryImpl(src.getColumnNames(),src.getRowCount(),"query");      Collection.Key[] keys=src.getColumnNames();      QueryColumn[] columnsSrc=new QueryColumn[keys.length];      for (int i=0; i < columnsSrc.length; i++) {        columnsSrc[i]=src.getColumn(keys[i]);      }      keys=trg.getColumnNames();      QueryColumn[] columnsTrg=new QueryColumn[keys.length];      for (int i=0; i < columnsTrg.length; i++) {        columnsTrg[i]=trg.getColumn(keys[i]);      }      int i;      for (int row=trg.getRecordcount(); row > 0; row--) {        for (i=0; i < columnsTrg.length; i++) {          columnsTrg[i].set(row,columnsSrc[i].get(row,null));        }      }      return trg;    }    return (Query)o;  } else   if (o instanceof ObjectWrap) {    return toQuery(((ObjectWrap)o).getEmbededObject(),duplicate);  }  throw new CasterException(o,"query");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public long numCqsActive(){  return this.cqService.getCqServiceVsdStats().getNumCqsActive();}  }
class C{  public boolean isTrialLicense(License license) throws ELMLicenseException {  License fullLicense=buildLicenseObjectFromText(license.getLicenseText());  if (fullLicense != null) {    for (    LicenseFeature feature : fullLicense.getLicenseFeatures()) {      if (feature.getModelId().startsWith(LicenseConstants.VIPR_CONTROLLER) && feature.isTrialLicense()) {        return true;      }    }  }  return false;}  }
class C{  public boolean isMarkUserUndefinedSeen(){  return fieldMarkUserUndefinedSeen;}  }
class C{  public long startcode(){  return Long.parseLong(fields[25]);}  }
