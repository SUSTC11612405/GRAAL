class C{  @Override protected void validate(Resource resource,CheckMode mode,CancelIndicator monitor,IAcceptor<Issue> acceptor){  if (monitor.isCanceled() || n4jsCore.isNoValidate(resource.getURI())) {    return;  }  List<EObject> contents=resource.getContents();  if (!contents.isEmpty()) {    EObject firstElement=contents.get(0);    validate(resource,firstElement,mode,monitor,acceptor);  }}  }
class C{  @Override protected void doGet(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  List<JcrPackage> packages=packageService.getPackageList(request);  try {    JSONArray jsonArray=new JSONArray();    for (    JcrPackage jcrPackage : packages) {      final JSONObject json=getJsonFromJcrPackage(jcrPackage);      jsonArray.put(json);    }    response.setStatus(SlingHttpServletResponse.SC_OK);    writer.write(jsonArray.toString());  } catch (  JSONException|RepositoryException e) {    LOGGER.error("Could not write JSON",e);    response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {default :    return null;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.510 -0500",hash_original_method="BA8DA0A39FE3A34BE845FD360AA83761",hash_generated_method="69ED514E7589238E52E387503E561C4E") @DSSafe(DSCat.SAFE_OTHERS) public CopyStreamEvent(Object source,long totalBytesTransferred,int bytesTransferred,long streamSize){  super(source);  this.bytesTransferred=bytesTransferred;  this.totalBytesTransferred=totalBytesTransferred;  this.streamSize=streamSize;}  }
class C{  public static JsonValue value(int value){  return new JsonNumber(Integer.toString(value,10));}  }
class C{  public static float convertDpToPixel(float dp,Context context){  DisplayMetrics metrics=context.getResources().getDisplayMetrics();  return dp * (metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static File temp(){  return get().systemPaths().temp();}  }
class C{  private Object idToObject(final String attribute){  final String idString=get(attribute);  Object id;  try {    id=Integer.valueOf(idString);  } catch (  final NumberFormatException ex) {    id=idString;  }  return id;}  }
class C{  public RoutingInfo(String infoText){  this.text=infoText;}  }
class C{  private LinkedList<Paragraph> makeParagraphs(Node node){  ParagraphsExplorer pe=new ParagraphsExplorer();  node.traverse(pe);  return pe.getParagraphs();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TableColumnModel(final int columnCount){  this.columnWeights=new HashMap<>();  this.columnCount=columnCount;}  }
class C{  public static void updateSubscriptionTabContextMenu(final Tab tab,final MqttSubscription subscription){  logger.debug("Updating subscription tab context menu [{}, {}, {}]",subscription.getTopic(),subscription.getConnection().getConnectionStatus(),subscription.isActive());  tab.getGraphic().getStyleClass().remove(tab.getGraphic().getStyleClass().size() - 1);  if (subscription.isActive()) {    tab.getGraphic().getStyleClass().add("subscribed");    tab.getTooltip().setText("Status: " + "subscribed");  } else {    tab.getGraphic().getStyleClass().add("unsubscribed");    tab.getTooltip().setText("Status: " + "unsubscribed");  }  if (subscription.getConnection().getConnectionStatus().equals(ConnectionStatus.CONNECTED)) {    if (subscription.isActive()) {      tab.getContextMenu().getItems().get(0).setDisable(false);      tab.getContextMenu().getItems().get(1).setDisable(true);    } else {      tab.getContextMenu().getItems().get(0).setDisable(true);      tab.getContextMenu().getItems().get(1).setDisable(false);    }    tab.getContextMenu().getItems().get(2).setDisable(false);  } else {    tab.getContextMenu().getItems().get(0).setDisable(true);    tab.getContextMenu().getItems().get(1).setDisable(true);    tab.getContextMenu().getItems().get(2).setDisable(true);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean ascending=getBool(stack);  String technique=getString(stack);  MediaNode node=getMediaNode(stack);  if (node != null)   node.setSorter(VFSFactory.getInstance().getSorter(technique,ascending));  return null;}  }
class C{  public void invalidateTitleSortable(){  for (  TvShow tvShow : new ArrayList<>(tvShowList)) {    tvShow.clearTitleSortable();  }}  }
class C{  private boolean isCaptivePortal(InetAddress server){  HttpURLConnection urlConnection=null;  if (!mIsCaptivePortalCheckEnabled)   return false;  mUrl="http://" + server.getHostAddress() + "/generate_204";  if (DBG)   log("Checking " + mUrl);  try {    URL url=new URL(mUrl);    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setInstanceFollowRedirects(false);    urlConnection.setConnectTimeout(SOCKET_TIMEOUT_MS);    urlConnection.setReadTimeout(SOCKET_TIMEOUT_MS);    urlConnection.setUseCaches(false);    urlConnection.getInputStream();    return urlConnection.getResponseCode() != 204;  } catch (  IOException e) {    if (DBG)     log("Probably not a portal: exception " + e);    return false;  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }  }}  }
class C{  protected void assertNoException(final AbstractExceptionCase exceptionCase) throws Throwable {  assertExceptionOccurred(false,exceptionCase,null);}  }
class C{  public void parseVnSyllable(String syll){  strSyllable=syll;  strMainVowel="";  strSecondaryVowel="";  strFirstConsonant="";  strLastConsonant="";  iCurPos=0;  validViSyll=true;  parseFirstConsonant();  parseSecondaryVowel();  parseMainVowel();  parseLastConsonant();}  }
class C{  private void evaluateGraphQuery(final TupleResultBuilder builder,String xslPath,WorkbenchRequest req,HttpServletResponse resp,CookieHandler cookies,final GraphQuery query,boolean writeCookie,boolean paged,int offset,int limit) throws QueryEvaluationException, QueryResultHandlerException {  List<Statement> statements=Iterations.asList(query.evaluate());  if (writeCookie) {    cookies.addTotalResultCountCookie(req,resp,statements.size());  }  builder.transform(xslPath,"graph.xsl");  builder.start();  builder.variables("subject","predicate","object");  builder.link(Arrays.asList(INFO));  if (paged && writeCookie) {    int fromIndex=Math.min(0,offset);    statements=statements.subList(fromIndex,Math.max(fromIndex,Math.min(offset + limit,statements.size())));  }  for (  Statement statement : statements) {    builder.result(statement.getSubject(),statement.getPredicate(),statement.getObject(),statement.getContext());  }  builder.end();}  }
class C{  public QueryNextResponse QueryNext(RequestHeader RequestHeader,Boolean ReleaseContinuationPoint,byte[] ContinuationPoint) throws ServiceFaultException, ServiceResultException {  QueryNextRequest req=new QueryNextRequest(RequestHeader,ReleaseContinuationPoint,ContinuationPoint);  return (QueryNextResponse)channel.serviceRequest(req);}  }
class C{  public static Image createReflectedImage(final Image source){  if (source == null) {    return null;  }  if (source.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  final Rectangle sourceBounds=source.getBounds();  final Image newImage=new Image(source.getDevice(),new Rectangle(0,0,sourceBounds.width,(int)(sourceBounds.height * 1.5)));  final GC gc=new GC(newImage);  gc.setAdvanced(true);  gc.drawImage(source,0,0);  final Transform t=new Transform(source.getDevice());  t.setElements(1,0,0,-.5f,0,sourceBounds.height + sourceBounds.height / 2);  gc.setTransform(t);  gc.drawImage(source,0,0);  t.dispose();  gc.dispose();  final ImageData imgData=newImage.getImageData();  final int width=imgData.width;  final int height=imgData.height;  final byte[] alphaData=new byte[height * width];  final byte[] noAlpha=new byte[width];  for (int x=0; x < width; x++) {    noAlpha[x]=(byte)255;  }  for (int y=0; y < height; y++) {    final byte[] alphaRow=new byte[width];    if (y < sourceBounds.height) {      System.arraycopy(noAlpha,0,alphaData,y * width,width);    } else {      for (int x=0; x < width; x++) {        alphaRow[x]=(byte)(255 - 255 * y / height);      }      System.arraycopy(alphaRow,0,alphaData,y * width,width);    }  }  imgData.alphaData=alphaData;  newImage.dispose();  return new Image(source.getDevice(),imgData);}  }
class C{  public HBaseLogByRowkeyReader(String table,String columnFamily,boolean includingAllQualifiers,List<String> qualifiers){  this.table=table;  this.columnFamily=columnFamily;  if (qualifiers != null) {    this.outputQualifiers=new byte[qualifiers.size()][];    int i=0;    for (    String qualifier : qualifiers) {      this.outputQualifiers[i++]=qualifier.getBytes();    }  }  this.includingAllQualifiers=includingAllQualifiers;}  }
class C{  public static boolean isThrowableNested(){  return THROWABLE_CAUSE_METHOD != null;}  }
class C{  public float textAscent(){  if (textFont == null) {    defaultFontOrDeath("textAscent");  }  return textFont.ascent() * textSize;}  }
class C{  public char charAt(int pos){  int len=0;  for (int i=0; i < index; i++) {    int newlen=len + array[i].length();    if (pos < newlen) {      return array[i].charAt(pos - len);    }    len=newlen;  }  throw new IllegalArgumentException("Invalid char index");}  }
class C{  public static void tesWithFrame() throws Exception {  doTest(true);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public static SoapMessageImpl build(boolean isRpcEncoded,ClientId sender,ServiceId receiver,String userId,String queryId) throws Exception {  return build(isRpcEncoded,sender,receiver,userId,queryId,null);}  }
class C{  private static void ReleaseDoubleArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseDoubleArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    double[] sourceArray=(double[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if (releaseMode == 0 || releaseMode == 1) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_DOUBLE);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected void destroyEntry(HashEntry entry){  entry.next=null;  entry.key=null;  entry.value=null;}  }
class C{  private byte[] makeText(byte[] buffer,boolean prettyPrint) throws IOException {  IonReader in=makeIterator(buffer);  ByteArrayOutputStream out=new ByteArrayOutputStream();  IonTextWriterBuilder b=IonTextWriterBuilder.standard();  if (prettyPrint) {    b.withPrettyPrinting();  }  b.setInitialIvmHandling(SUPPRESS);  IonWriter tw=b.build(out);  tw.writeValues(in);  tw.close();  byte[] buf=out.toByteArray();  return buf;}  }
class C{  public StringBuffer(int length){}  }
class C{  private static <T>void readTableField(DatabaseTableConfig<T> config,String field,String value){  if (field.equals(FIELD_NAME_DATA_CLASS)) {    try {      @SuppressWarnings("unchecked") Class<T> clazz=(Class<T>)Class.forName(value);      config.setDataClass(clazz);    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("Unknown class specified for dataClass: " + value);    }  } else   if (field.equals(FIELD_NAME_TABLE_NAME)) {    config.setTableName(value);  }}  }
class C{  public static int numberOfLeadingZeros(long[] v){  for (int p=0, ip=v.length - 1; ; p++, ip--) {    if (p == v.length) {      return p * Long.SIZE;    }    if (v[ip] != 0) {      return Long.numberOfLeadingZeros(v[ip]) + p * Long.SIZE;    }  }}  }
class C{  public void initializePhiInput(PhiNode node,int index,ValueNode value){  add("set phi input",null);}  }
class C{  public void load(Element element,Object o){  LinkingLabel l=null;  String url=element.getChild("url").getText();  Editor editor=(Editor)o;  if (element.getAttribute("icon") != null) {    NamedIcon icon=null;    String name=element.getAttribute("icon").getValue();    if (name.equals("yes")) {      icon=getNamedIcon("icon",element,"LinkingLabel ",editor);    } else {      icon=NamedIcon.getIconByName(name);      if (icon == null) {        icon=editor.loadFailed("LinkingLabel",name);        if (icon == null) {          log.info("LinkingLabel icon removed for url= " + name);          return;        }      }    }    l=new LinkingLabel(icon,editor,url);    l.setPopupUtility(null);    try {      Attribute a=element.getAttribute("rotate");      if (a != null && icon != null) {        int rotation=element.getAttribute("rotate").getIntValue();        icon.setRotation(rotation,l);      }    } catch (    org.jdom2.DataConversionException e) {    }    if (name.equals("yes")) {      NamedIcon nIcon=loadIcon(l,"icon",element,"LinkingLabel ",editor);      if (nIcon != null) {        l.updateIcon(nIcon);      } else {        log.info("LinkingLabel icon removed for url= " + name);        return;      }    } else {      if (icon == null) {        log.info("LinkingLabel icon removed for url= " + name);        return;      } else {        l.updateIcon(icon);      }    }  } else   if (element.getAttribute("text") != null) {    l=new LinkingLabel(element.getAttribute("text").getValue(),editor,url);    loadTextInfo(l,element);  } else {    log.error("LinkingLabel is null!");    if (log.isDebugEnabled()) {      java.util.List<Attribute> attrs=element.getAttributes();      log.debug("\tElement Has " + attrs.size() + " Attributes:");      for (int i=0; i < attrs.size(); i++) {        Attribute a=attrs.get(i);        log.debug("\t\t" + a.getName() + " = "+ a.getValue());      }      java.util.List<Element> kids=element.getChildren();      log.debug("\tElementHas " + kids.size() + " children:");      for (int i=0; i < kids.size(); i++) {        Element e=kids.get(i);        log.debug("\t\t" + e.getName() + " = \""+ e.getValue()+ "\"");      }    }    editor.loadFailed();    return;  }  editor.putItem(l);  loadCommonAttributes(l,Editor.LABELS,element);}  }
class C{  public AttachmentExample(AttachmentObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getSize() != null) {    criteria.andSizeEqualTo(sample.getSize());  }  if (sample.getContentType() != null) {    criteria.andContentTypeEqualTo(sample.getContentType());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getTargetType() != null) {    criteria.andTargetTypeEqualTo(sample.getTargetType());  }  if (sample.getTargetId() != null) {    criteria.andTargetIdEqualTo(sample.getTargetId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  void doConstrainedMaxCScores(List<String> sentence,Grammar grammar,SophisticatedLexicon lexicon){  numSubStatesArray=grammar.numSubStates;  maxcScore=new double[length][length + 1][numStates];  maxcSplit=new int[length][length + 1][numStates];  maxcChild=new int[length][length + 1][numStates];  maxcLeftChild=new int[length][length + 1][numStates];  maxcRightChild=new int[length][length + 1][numStates];  double threshold=1.0e-2;  double logNormalizer=iScorePostU[0][length][0][0];  double thresh2=threshold * logNormalizer;  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      Arrays.fill(maxcSplit[start][end],-1);      Arrays.fill(maxcChild[start][end],-1);      Arrays.fill(maxcLeftChild[start][end],-1);      Arrays.fill(maxcRightChild[start][end],-1);      if (diff > 1) {        for (int pState=0; pState < numSubStatesArray.length; pState++) {          if (oScorePostU[start][end][pState] == null) {            continue;          }          BinaryRule[] parentRules=grammar.splitRulesWithP(pState);          int nParentStates=numSubStatesArray[pState];          for (int i=0; i < parentRules.length; i++) {            BinaryRule r=parentRules[i];            int lState=r.leftChildState;            int rState=r.rightChildState;            int narrowR=narrowRExtent[start][lState];            boolean iPossibleL=(narrowR < end);            if (!iPossibleL) {              continue;            }            int narrowL=narrowLExtent[end][rState];            boolean iPossibleR=(narrowL >= narrowR);            if (!iPossibleR) {              continue;            }            int min1=narrowR;            int min2=wideLExtent[end][rState];            int min=(min1 > min2 ? min1 : min2);            if (min > narrowL) {              continue;            }            int max1=wideRExtent[start][lState];            int max2=narrowL;            int max=(max1 < max2 ? max1 : max2);            if (min > max) {              continue;            }            double[][][] scores=r.getScores2();            int nLeftChildStates=numSubStatesArray[lState];            int nRightChildStates=numSubStatesArray[rState];            for (int split=min; split <= max; split++) {              double ruleScore=0;              if (iScorePostU[start][split][lState] == null)               continue;              if (iScorePostU[split][end][rState] == null)               continue;              for (int lp=0; lp < nLeftChildStates; lp++) {                double lIS=iScorePostU[start][split][lState][lp];                if (lIS < thresh2)                 continue;                for (int rp=0; rp < nRightChildStates; rp++) {                  if (scores[lp][rp] == null)                   continue;                  double rIS=iScorePostU[split][end][rState][rp];                  if (rIS < thresh2)                   continue;                  for (int np=0; np < nParentStates; np++) {                    double pOS=oScorePostU[start][end][pState][np];                    if (pOS < thresh2)                     continue;                    double ruleS=scores[lp][rp][np];                    if (ruleS == 0)                     continue;                    ruleScore+=(pOS * ruleS * lIS* rIS) / logNormalizer;                  }                }              }              double scale=1.0;              double leftChildScore=maxcScore[start][split][lState];              double rightChildScore=maxcScore[split][end][rState];              double gScore=ruleScore * leftChildScore * rightChildScore* scale;              if (gScore > maxcScore[start][end][pState]) {                maxcScore[start][end][pState]=gScore;                maxcSplit[start][end][pState]=split;                maxcLeftChild[start][end][pState]=lState;                maxcRightChild[start][end][pState]=rState;              }            }          }        }      } else {        for (int tag=0; tag < numSubStatesArray.length; tag++) {          if (allowedSubStates[start][end][tag] == null)           continue;          int nTagStates=numSubStatesArray[tag];          String word=sentence.get(start);          if (grammar.isGrammarTag(tag))           continue;          double[] lexiconScoreArray=lexicon.score(word,(short)tag,start,false,false);          double lexiconScores=0;          for (int tp=0; tp < nTagStates; tp++) {            double pOS=oScorePostU[start][end][tag][tp];            if (pOS < thresh2)             continue;            double ruleS=lexiconScoreArray[tp];            lexiconScores+=(pOS * ruleS) / logNormalizer;          }          double scale=1.0;          maxcScore[start][end][tag]=lexiconScores * scale;        }      }      double[] maxcScoreStartEnd=new double[numStates];      for (int i=0; i < numStates; i++) {        maxcScoreStartEnd[i]=maxcScore[start][end][i];      }      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (oScorePostU[start][end][pState] == null) {          continue;        }        UnaryRule[] unaries=grammar.getClosedSumUnaryRulesByParent(pState);        int nParentStates=numSubStatesArray[pState];        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          if (iScorePostU[start][end][cState] == null)           continue;          double[][] scores=ur.getScores2();          int nChildStates=numSubStatesArray[cState];          double ruleScore=0;          for (int cp=0; cp < nChildStates; cp++) {            double cIS=iScorePreU[start][end][cState][cp];            if (cIS < thresh2)             continue;            if (scores[cp] == null)             continue;            for (int np=0; np < nParentStates; np++) {              double pOS=oScorePreU[start][end][pState][np];              if (pOS < thresh2)               continue;              double ruleS=scores[cp][np];              if (ruleS == 0)               continue;              ruleScore+=(pOS * ruleS * cIS) / logNormalizer;            }          }          double scale=1.0;          double childScore=maxcScore[start][end][cState];          double gScore=ruleScore / unaryPenalty * childScore * scale;          if (gScore > maxcScoreStartEnd[pState]) {            maxcScoreStartEnd[pState]=gScore;            maxcChild[start][end][pState]=cState;          }        }      }      maxcScore[start][end]=maxcScoreStartEnd;    }  }}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public static boolean isAccountAvailable(){  if (EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.trackListActivity.getString(R.string.send_google_no_account_title),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {    EndToEndTestUtils.getButtonOnScreen(EndToEndTestUtils.trackListActivity.getString(R.string.generic_ok),false,true);    return false;  }  if (EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.trackListActivity.getString(R.string.send_google_choose_account_title),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {    EndToEndTestUtils.SOLO.clickOnText(ACCOUNT_1);    EndToEndTestUtils.getButtonOnScreen(EndToEndTestUtils.trackListActivity.getString(R.string.generic_ok),false,true);  }  if (EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.trackListActivity.getString(R.string.send_google_no_account_permission),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {    return false;  }  return true;}  }
class C{  public static EpisodesFragment newInstance(Bundle args){  EpisodesFragment fragment=new EpisodesFragment();  if (args != null) {    fragment.setArguments(args);  }  return fragment;}  }
class C{  public i addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  final boolean casRight(Index<V> cmp,Index<V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_traceDirective_1_();}  }
class C{  public LinkObject(String url){  this(url,null);}  }
class C{  public void queryGreaterThanCount(String type,int index,String value,int visibilityScope,CloudResponse<Integer> response){  try {    queryImpl(type,value,index,0,0,visibilityScope,2,0,false,true,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public QueueIndividual waitForIndividual(){  while (true) {synchronized (evaluatedIndividuals) {      if (evaluatedIndividualAvailable())       return (QueueIndividual)(evaluatedIndividuals.removeFirst());      debug("Waiting for individual to be evaluated.");      waitOnMonitor(evaluatedIndividuals);      debug("At least one individual has been finished.");    }  }}  }
class C{  public IElementType parsePackage(){  String tokenText=yytext().toString();  if (tokenText.length() > 4 && tokenText.charAt(3) == '\'' && tokenText.substring(0,3).equals("cmp")) {    yypushback(tokenText.length() - 3);    return getIdentifierToken();  } else   if (tokenText.length() > 3 && tokenText.charAt(2) == '\'' && PACKAGE_EXCEPTIONS.contains(tokenText.substring(0,2))) {    yypushback(tokenText.length() - 2);    return getIdentifierToken();  } else   if (tokenText.length() > 2 && tokenText.charAt(1) == '\'' && PACKAGE_EXCEPTIONS.contains(tokenText.substring(0,1))) {    yypushback(tokenText.length() - 1);    return getIdentifierToken();  }  Matcher m=AMBIGUOUS_PACKAGE_PATTERN.matcher(tokenText);  if (m.matches()) {    String packageIdentifier=m.group(1);    String identifier=m.group(2);    preparsedTokensList.clear();    int packageIdentifierEnd=getTokenStart() + packageIdentifier.length();    CustomToken barewordToken=new CustomToken(packageIdentifierEnd,getTokenEnd(),IDENTIFIER);    preparsedTokensList.add(barewordToken);    setTokenEnd(packageIdentifierEnd);    IElementType packageTokenType=parsePackageCanonical();    if (packageTokenType == PACKAGE_CORE_IDENTIFIER && RESERVED_TOKEN_TYPES.containsKey(identifier)) {      barewordToken.setTokenType(RESERVED_TOKEN_TYPES.get(identifier));    }    return packageTokenType;  } else {    throw new RuntimeException("Inappropriate package name " + tokenText);  }}  }
class C{  public Dataset toMetadataOnly(){  Dataset dataset=new Dataset();synchronized (m_meta) {    for (    DataKey key : getAllMetadataKeys()) {      MetadataMap meta=getMetadata(key);      dataset.addMetadata(key,meta);    }  }  dataset.setContext(m_context);  return dataset;}  }
class C{  public PanControl(boolean panOverItem){  this(LEFT_MOUSE_BUTTON,panOverItem);}  }
class C{  public void error(Throwable problem,String msg){  if (problem instanceof ThreadDeath)   throw (ThreadDeath)problem; else {    Runnable doWorkRunnable=new Error(problem,msg);    GUIMediator.safeInvokeLater(doWorkRunnable);  }}  }
class C{  private static GoogleJsonErrorContainer errorWithReasonAndStatus(String reason,int status){  ErrorInfo info=new ErrorInfo();  info.setReason(reason);  info.setDomain("global");  GoogleJsonError error=new GoogleJsonError();  error.setErrors(ImmutableList.of(info));  error.setCode(status);  GoogleJsonErrorContainer container=new GoogleJsonErrorContainer();  container.setError(error);  return container;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(0,"Mss. ");  childData=child.getData();  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);}  }
class C{  protected static String generateSmsPortForProvisioning(){  int minPort=10000;  int maxPort=40000;  return String.valueOf((new Random()).nextInt(maxPort - minPort) + minPort);}  }
class C{  public Boolean canExecute(String url){  return impl.canExecute(url);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void actionPerformed(ActionEvent e){  log.log(Level.FINE,"from: " + e.getSource() + " action: "+ e.getActionCommand());  boolean commit=!dryRun.isSelected();  Object o=tablePick.getValue();  int tableId=0;  if (o != null)   tableId=(Integer)o;  o=clientPick.getValue();  if (o != null)   clientId=((KeyNamePair)o).getKey();  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (tableId == 0 || clientId == 0) {      ADialog.error(m_WindowNo,this,"Error","Select client and base table for cascade delete.");    } else {      m_totalCount=0;      m_trx=Trx.get(Trx.createTrxName("delete"),true);      String errorMsg="";      try {        Enumeration<?> nodes=rootNode.breadthFirstEnumeration();        Stack<DeleteEntitiesModel> stack=new Stack<DeleteEntitiesModel>();        while (nodes.hasMoreElements()) {          stack.push((DeleteEntitiesModel)(((DefaultMutableTreeNode)nodes.nextElement()).getUserObject()));        }        while (!stack.empty()) {          DeleteEntitiesModel tableData=(DeleteEntitiesModel)stack.pop();          m_totalCount+=tableData.delete(m_trx);        }        if (commit)         m_trx.commit(true); else         m_trx.rollback(true);      } catch (      Exception ex) {        errorMsg=ex.getLocalizedMessage();        log.log(Level.WARNING,"Cascade delete failed.",ex);        m_totalCount=0;        m_trx.rollback();        ADialog.error(m_WindowNo,this,"DeleteError",errorMsg);        return;      } finally {        m_trx.close();      }      ADialog.info(m_WindowNo,this,"DeleteSuccess","Records deleted:" + " #" + m_totalCount);      dispose();    }  } else   if (e.getActionCommand().equals("comboBoxChanged")) {    if (clientId == 0) {      ADialog.error(m_WindowNo,this,"Error","Select client and base table for cascade delete.");      return;    }    MTable table=null;    if (tableId > 0)     table=MTable.get(Env.getCtx(),tableId); else     return;    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    confirmPanel.getOKButton().setEnabled(false);    DeleteEntitiesModel data=new DeleteEntitiesModel();    data.mandatoryLink=true;    data.tableName=table.getTableName();    data.joinColumn=table.getKeyColumns()[0];    data.whereClause=" " + data.tableName + ".AD_Client_ID = "+ clientId;    if (table.getTableName().equals("AD_User")) {      data.whereClause=data.whereClause + " AND NOT EXISTS (SELECT * FROM C_BPartner bp " + "WHERE AD_User.Link_BPartner_ID=bp.C_BPartner_ID "+ "AND (bp.IsEmployee='Y' OR bp.IsSalesRep='Y'))";    }    rootNode=new DefaultMutableTreeNode(data);    DefaultTreeModel model=(DefaultTreeModel)tree.getModel();    model.setRoot(rootNode);    createNodes(rootNode);    tree.expandRow(0);    confirmPanel.getOKButton().setEnabled(true);    setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public boolean isProcessing(){  return isProcessing;}  }
class C{  public static Date parseIso8601Date(String dateString) throws ParseException {  try {    return getIso8601DateFormat().parse(dateString);  } catch (  ParseException e) {    return getAlternativeIso8601DateFormat().parse(dateString);  }}  }
class C{  public synchronized void fine(String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINE,msg);  record.setParameters(params);  log(record);}  }
class C{  public TeleMissileTracker(){  missiles=new Hashtable<Integer,Integer>();}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  public static float convertDpToPixel(float dp){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertDpToPixel(...). Otherwise conversion does not take place.");    return dp;  }  DisplayMetrics metrics=mMetrics;  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  private void notifyLowMemory(){synchronized (mListeners) {    for (    MemoryListener listener : mListeners) {      listener.onLowMemory();    }  }}  }
class C{  private void parseResource(final Element resourceElement,final Collection<Resource> resources){  final String tagName=resourceElement.getTagName();  final String uri=resourceElement.getTextContent();  if (TAG_GROUP_REF.equals(tagName)) {    resources.addAll(getResourcesForGroup(uri));  }  if (getResourceType(resourceElement) != null) {    final Resource resource=createResource(resourceElement);    LOG.debug("\t\tadding resource: {}",resource);    resources.add(resource);  }}  }
class C{  private void doPress(JLabel label){  Component labelFor=label.getLabelFor();  if (labelFor != null && labelFor.isEnabled()) {    Component owner=label.getLabelFor();    if (owner instanceof Container && ((Container)owner).isFocusCycleRoot()) {      owner.requestFocus();    } else {      if (owner instanceof Container) {        Container container=(Container)owner;        if (container.isFocusCycleRoot()) {          FocusTraversalPolicy policy=container.getFocusTraversalPolicy();          Component comp=policy.getDefaultComponent(container);          if (comp != null) {            comp.requestFocus();            return;          }        }        Container rootAncestor=container.getFocusCycleRootAncestor();        if (rootAncestor != null) {          FocusTraversalPolicy policy=rootAncestor.getFocusTraversalPolicy();          Component comp=policy.getComponentAfter(rootAncestor,container);          if (comp != null && SwingUtilities.isDescendingFrom(comp,container)) {            comp.requestFocus();            return;          }        }      }      if (owner.isFocusable()) {        owner.requestFocus();        return;      }    }  }}  }
class C{  public RandomScoreFunctionBuilder seed(long seed){  this.seed=seed;  return this;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  String elementType=getElementType();  if (ELEMENTTYPE_UserDefined.equals(elementType) && isNaturalAccount())   setIsNaturalAccount(false);  X_AD_Tree tree=getTree();  if (tree == null)   return false;  String treeType=tree.getTreeType();  if (ELEMENTTYPE_UserDefined.equals(elementType)) {    if (X_AD_Tree.TREETYPE_User1.equals(treeType) || X_AD_Tree.TREETYPE_User2.equals(treeType))     ; else {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@TreeType@ <> @ElementType@ (U)"),false);      return false;    }  } else {    if (!X_AD_Tree.TREETYPE_ElementValue.equals(treeType)) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@TreeType@ <> @ElementType@ (A)"),false);      return false;    }  }  return true;}  }
class C{  public Object[] buildParameters(Object[] firstParameters,Method method,Class<? extends Annotation> annotationType){  int parametersLength=method.getParameterTypes().length;  if (firstParameters.length > 0 && parametersLength < 1) {    throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType));  }  int parametersToResolve=parametersLength - firstParameters.length;  Object[] additionalParameters=new Object[parametersToResolve];  for (int i=firstParameters.length; i < parametersLength; i++) {    additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i);  }  return concatenate(firstParameters,additionalParameters);}  }
class C{  private char normalizedHiragana(char c,char m){switch (m) {case HIRAGANA_ITERATION_MARK:    return isHiraganaDakuten(c) ? (char)(c - 1) : c;case HIRAGANA_VOICED_ITERATION_MARK:  return lookupHiraganaDakuten(c);default :return c;}}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  private Crumb createFilteredNavigationCrumb(final PageParameters base,final String key,final String value,final String displayValue,final String locale,final PageParameters pageParameters,final String brandPrefix,final String pricePrefix,final String queryPrefix,final String tagPrefix,final Map<String,I18NModel> attributeCodeName){  final PageParameters withoutCurrent=wicketUtil.getFilteredRequestParameters(pageParameters,key,value);  String linkName=getLinkNamePrefix(key,locale,brandPrefix,pricePrefix,queryPrefix,tagPrefix,attributeCodeName);  if (StringUtils.isNotBlank(linkName)) {    linkName+="::" + getLinkName(key,value,displayValue);  } else {    linkName=getLinkName(key,value,displayValue);  }  base.add(key,value);  return new Crumb(key,linkName,null,new PageParameters(base),withoutCurrent);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tLevel of Gaussian Noise wrt transformed target." + " (default 1)","L",1,"-L <double>"));  result.addElement(new Option("\tWhether to 0=normalize/1=standardize/2=neither. " + "(default 0=normalize)","N",1,"-N"));  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("","",0,"\nOptions specific to kernel " + getKernel().getClass().getName() + ":"));  result.addAll(Collections.list(((OptionHandler)getKernel()).listOptions()));  return result.elements();}  }
class C{  public static String toUnicode(String input,int flag){  int p=0, q=0;  StringBuffer out=new StringBuffer();  if (isRootLabel(input)) {    return ".";  }  while (p < input.length()) {    q=searchDots(input,p);    out.append(toUnicodeInternal(input.substring(p,q),flag));    if (q != (input.length())) {      out.append('.');    }    p=q + 1;  }  return out.toString();}  }
class C{  public void edit(){  ViewerDialog dialog;  int result;  Instances copy;  Instances newInstances;  final int classIndex=m_AttVisualizePanel.getColoringIndex();  copy=new Instances(m_Instances);  copy.setClassIndex(classIndex);  dialog=new ViewerDialog(null);  result=dialog.showDialog(copy);  if (result == ViewerDialog.APPROVE_OPTION) {    try {      addUndoPoint();    } catch (    Exception e) {      e.printStackTrace();    }    newInstances=dialog.getInstances();    if (m_Instances.classIndex() < 0)     newInstances.setClassIndex(-1);    setInstances(newInstances);  }}  }
class C{  public double calcRadius(TempNode n1,TempNode n2){  Instance p1=n1.anchor, p2=n2.anchor;  double radius=n1.radius + m_DistanceFunction.distance(p1,p2) + n2.radius;  return radius / 2;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean isLowerCase(){  return isLowerCase;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.482 -0500",hash_original_method="C07428EAC6D62CA3DF6F67489B512A7E",hash_generated_method="D4F0BB866FF91AE238790A8A6EE5AF88") public void putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  private String unshortenUrl(String shortURL){  if (!shortURL.startsWith(HTTP_PROTOCOL) && !shortURL.startsWith(HTTPS_PROTOCOL))   return "";  URLConnection urlConn=connectURL(shortURL);  urlConn.getHeaderFields();  String finalResult=urlConn.getURL().toString();  urlConn=connectURL(finalResult);  urlConn.getHeaderFields();  shortURL=urlConn.getURL().toString();  while (!shortURL.equals(finalResult)) {    finalResult=unshortenUrl(finalResult);  }  return finalResult;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(getTitle());  int length=getItemCount();  for (int k=0; k < length; k++) {    xySeries.add(k + 1,getMinimumValue(k));    xySeries.add(k + 1.000001,getMaximumValue(k));  }  return xySeries;}  }
class C{  void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  RefactoringHistoryManager(final IFileStore store,final String name){  Assert.isNotNull(store);  Assert.isTrue(name == null || !"".equals(name));  fHistoryStore=store;  fProjectName=name;}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent ev){  return true;}  }
class C{  public StempelFilter(TokenStream in,StempelStemmer stemmer,int minLength){  super(in);  this.stemmer=stemmer;  this.minLength=minLength;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.864 -0500",hash_original_method="32A53E9BB0DE153D2975EBB6ECC5F512",hash_generated_method="7AD58B097114E94B01E74084695DFF98") public int size(){  return mCapabilities.size();}  }
class C{  public CloudletSchedulerSpaceShared(){  super();  usedPes=0;  currentCpus=0;}  }
class C{  public DenseDoubleMatrix1D(double[] values){  this(values.length);  assign(values);}  }
class C{  public static boolean isPrimitive(String fullClassName){  return primitives.contains(fullClassName);}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createSecret(@Auth AutomationClient automationClient,@Valid CreateSecretRequestV2 request){  String name=request.name();  String user=automationClient.getName();  SecretBuilder builder=secretController.builder(name,request.content(),automationClient.getName(),request.expiry()).withDescription(request.description()).withMetadata(request.metadata()).withType(request.type());  Secret secret;  try {    secret=builder.create();  } catch (  DataAccessException e) {    logger.info(format("Cannot create secret %s",name),e);    throw new ConflictException(format("Cannot create secret %s.",name));  }  Map<String,String> extraInfo=new HashMap<>();  if (request.description() != null) {    extraInfo.put("description",request.description());  }  if (request.metadata() != null) {    extraInfo.put("metadata",request.metadata().toString());  }  extraInfo.put("expiry",Long.toString(request.expiry()));  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CREATE,user,name,extraInfo));  long secretId=secret.getId();  groupsToGroupIds(request.groups()).forEach(null);  UriBuilder uriBuilder=UriBuilder.fromResource(SecretResource.class).path(name);  return Response.created(uriBuilder.build()).build();}  }
class C{  @SuppressWarnings("unchecked") private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  this.latticeSourceId=ois.readLong();  this.score=ois.readDouble();  this.source=(Sequence<TK>)IStrings.tokenize(ois.readUTF());  this.translation=(Sequence<TK>)IStrings.tokenize(ois.readUTF());  this.f2eAlignment=ois.readUTF();  this.features=(FeatureValueCollection<FV>)ois.readObject();}  }
class C{  @Override public void respond(String response){  getUserHostmask().send().message(response);}  }
class C{  HeapArrayOfDoublesCompactSketch(final Memory mem){  this(mem,DEFAULT_UPDATE_SEED);}  }
class C{  public Individual newIndividual(final EvolutionState state,int thread){  GEIndividual gei=null;  if (initScheme != null && initScheme.equals("sensible")) {    GPIndividual gpi=(GPIndividual)gpspecies.newIndividual(state,thread);    gei=reverseMap(state,gpi,thread);  } else {    gei=(GEIndividual)super.newIndividual(state,thread);    gei.species=this;  }  return gei;}  }
class C{  public int hashCode(){  if (hash == 0) {    int hash0=11;    hash0=hash0 * 31 + field.hashCode();    hash0=hash0 * 31 + a.hashCode();    hash0=hash0 * 31 + b.hashCode();    if (seed != null) {      for (int i=0; i < seed.length; i++) {        hash0=hash0 * 31 + seed[i];      }    } else {      hash0=hash0 * 31;    }    hash=hash0;  }  return hash;}  }
class C{  public NumericLiteral createNumericLiteral(){  NumericLiteralImpl numericLiteral=new NumericLiteralImpl();  return numericLiteral;}  }
class C{  public SecureChannel createSecureChannel(ApplicationDescription applicationDescription) throws ServiceResultException {  String urls[]=applicationDescription.getDiscoveryUrls();  if (urls == null || urls.length == 0)   throw new ServiceResultException("application description does not contain any discovery url");  for (  String url : urls)   if (url.toLowerCase().startsWith("opc.tcp")) {    SecureChannel result=createSecureChannel(url,url);    return result;  }  for (  String url : urls)   if (url.toLowerCase().startsWith("https")) {    SecureChannel result=createSecureChannel(url,url);    return result;  }  throw new ServiceResultException("No suitable discover url was found");}  }
class C{  public void endDTD() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endDTD();}  }
class C{  @Override protected void initListeners(){}  }
class C{  private static void sendEventStreamAction(Context context,EventStreamService.StreamAction action){  Context appContext=context.getApplicationContext();  Log.d(LOG_TAG,"sendEventStreamAction " + action);  if (!isUserLogout(appContext)) {    Intent killStreamService=new Intent(appContext,EventStreamService.class);    killStreamService.putExtra(EventStreamService.EXTRA_STREAM_ACTION,action.ordinal());    appContext.startService(killStreamService);  } else {    Log.d(LOG_TAG,"## sendEventStreamAction(): \"" + action + "\" action not sent - user logged out");  }}  }
class C{  public void writeIndexAnnotation(AnnotatedOutput out,ItemType itemType,String intro){  throwIfNotPrepared();  TreeMap<String,OffsettedItem> index=new TreeMap<String,OffsettedItem>();  for (  OffsettedItem item : items) {    if (item.itemType() == itemType) {      String label=item.toHuman();      index.put(label,item);    }  }  if (index.size() == 0) {    return;  }  out.annotate(0,intro);  for (  Map.Entry<String,OffsettedItem> entry : index.entrySet()) {    String label=entry.getKey();    OffsettedItem item=entry.getValue();    out.annotate(0,item.offsetString() + ' ' + label+ '\n');  }}  }
class C{  private void demoteTail(CacheDataPage cacheDataPage) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  DataPageExtra dpExtra=cacheDataPage._extra;  setModified(cacheDataPage);  DataPageMain tailMain=dpMain.getChildTailPage();  CacheDataPage tailDataPage=new CacheDataPage(tailMain);  updateParentTail(cacheDataPage,tailDataPage,UpdateType.REMOVE);  Entry tailEntry=dpExtra._entryView.demoteTail();  dpExtra._totalEntrySize+=tailEntry.size();  dpExtra._entryPrefix=EMPTY_PREFIX;  tailMain.setParentPage(dpMain._pageNumber,false);}  }
class C{  public String startAppium() throws Exception {  String port=ap.getPort();  String chromePort=ap.getPort();  String bootstrapPort=ap.getPort();  String command="appium --session-override -p " + port + " --chromedriver-port "+ chromePort+ " -bp "+ bootstrapPort;  System.out.println(command);  String output=cp.runCommand(command);  System.out.println(output);  if (output.contains("not")) {    System.out.println("\nAppium is not installed");    System.exit(0);  }  return port;}  }
class C{  public static boolean isSolarisOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("solaris");}  }
class C{  protected String translateDescriptor(final String descriptor){  Type type=Type.getType(descriptor);  type=getMirrorType(type);  return type.getDescriptor();}  }
class C{  public void testMT() throws Exception {  tryMT(3);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double zFactor=1;  double z, zN;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double SS;  int N;  double tri;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          N=0;          SS=0;          for (i=0; i < 8; i++) {            zN=DEM.getValue(row + dY[i],col + dX[i]);            if (zN != noData) {              zN=zN * zFactor;              SS+=(zN - z) * (zN - z);              N++;            }          }          tri=Math.sqrt(SS / N);          output.setValue(row,col,tri);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Builder builder(PublishRequest request){  return new Builder(request);}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultProducer.postProcess();}  }
class C{  @Inline static void compilePutfieldBarrierBooleanImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.booleanFieldWriteBarrierMethod);}  }
class C{  public ScriptException(String s){  super(s);  fileName=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Matrix4d add4x3(Matrix4dc other){  return add4x3(other,this);}  }
class C{  public EssenceContainerData(EssenceContainerDataBO essenceContainerDataBO,GenericPackage genericPackage){  this.essenceContainerDataBO=essenceContainerDataBO;  this.genericPackage=genericPackage;}  }
class C{  public void deleteTransportNode(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(TRANSPORT_NODES_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  protected void showResults(){  this.showIntersections(firstIntersectionPositions);  this.showSightLines(sightLines);  this.getWwd().redraw();}  }
class C{  public StatelessToken(UserPrincipal principal,String password){  super();  this.userPrincipal=principal;  this.password=password;}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public String serialize(UserEntity userEntity){  String jsonString=gson.toJson(userEntity,UserEntity.class);  return jsonString;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  private static TerminalBindingCondition createWithCode(final String condition,final String message,final Integer code){  if (condition == null) {    throw (new IllegalArgumentException("condition may not be null"));  }  if (message == null) {    throw (new IllegalArgumentException("message may not be null"));  }  if (COND_TO_INSTANCE.get(condition) != null) {    throw (new IllegalStateException("Multiple definitions of condition: " + condition));  }  TerminalBindingCondition result=new TerminalBindingCondition(condition,message);  COND_TO_INSTANCE.put(condition,result);  if (code != null) {    if (CODE_TO_INSTANCE.get(code) != null) {      throw (new IllegalStateException("Multiple definitions of code: " + code));    }    CODE_TO_INSTANCE.put(code,result);  }  return result;}  }
class C{  protected DefaultPreserveAspectRatioHandler(){}  }
class C{  public void init(){  MySocketImpl socketImpl=new MySocketImpl();  MyDatagramSocketImpl dgramSocketImpl=new MyDatagramSocketImpl();  try {    MySocket socko=new MySocket(socketImpl);    MyDatagramSocket dsock=new MyDatagramSocket(dgramSocketImpl);  } catch (  IOException ioex) {    System.err.println(ioex);  }catch (  SecurityException sec) {    throw new RuntimeException("Failed. Creation of socket throwing SecurityException: ");  }}  }
class C{  public Context(ExternalModuleTable mt,Errors errs){  table=new Hashtable();  this.exMT=mt;  this.errors=errs;  this.lastPair=null;}  }
class C{  protected void restartRemoteBroker() throws Exception {  BrokerRegistry.getInstance().unbind("remotehost");  remoteConnector.stop();  remoteBroker.stop();  remotePersistenceAdapter.stop();  remotePersistenceAdapter=createRemotePersistenceAdapter(false);  remotePersistenceAdapter.start();  remoteBroker=createRemoteBroker(remotePersistenceAdapter);  remoteBroker.addConnector(getRemoteURI());  remoteBroker.start();  BrokerRegistry.getInstance().bind("remotehost",remoteBroker);}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);changed=true;return local;}  }
class C{  private void discard(){  if (mReviewId == 0) {    deleteDraft();  }  discardReview(false);}  }
class C{  public FacilitiesWriter(final CoordinateTransformation coordinateTransformation,final ActivityFacilities facilities){  this.coordinateTransformation=coordinateTransformation;  this.facilities=facilities;}  }
class C{  @Override public void close(){  out.close();}  }
class C{  public void printStatistics(final EvolutionState state,StatisticsData data){  int log=-6;  String sender;  EvolutionAgent agent=(EvolutionAgent)state;  sender=data.sender.name;  if (logtable.containsKey(sender))   log=((Integer)logtable.get(sender)).intValue(); else   log=addLog(state,sender);  if (log < 0) {    if (defaultlog < 0)     defaultlog=addLog(state,agent.getName());    state.output.message("Received a stats message from an unknown sender, will be logged to: " + ((Integer)logtable.get(new Integer(defaultlog))).intValue());    log=defaultlog;  }  state.output.println(data.toStringForHumans(),Output.V_NO_GENERAL,log);  if (store_best && data.finalStats) {    for (int i=0; i < data.best_of_run.length; i++)     storeIndividual(state,basefilename + data.sender.name.substring(data.sender.name.lastIndexOf(".")) + ".best",data.best_of_run[i]);  }}  }
class C{  private <T>Constructor<T> findFromStringConstructorByType(Class<T> cls){  try {    return cls.getDeclaredConstructor(String.class);  } catch (  NoSuchMethodException ex) {    try {      return cls.getDeclaredConstructor(CharSequence.class);    } catch (    NoSuchMethodException ex2) {      throw new IllegalArgumentException("Constructor not found",ex2);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.476 -0500",hash_original_method="8A74673B598B0BDC221AF89902C2BEC8",hash_generated_method="92139D8AC94846C0E57C2E010BA4FFCA") private static void packSmsChar(byte[] packedChars,int bitOffset,int value){  int byteOffset=bitOffset / 8;  int shift=bitOffset % 8;  packedChars[++byteOffset]|=value << shift;  if (shift > 1) {    packedChars[++byteOffset]=(byte)(value >> (8 - shift));  }}  }
class C{  public ChainingTextWriter caretEncoding(boolean enable){  this.caretEncoding=enable;  return this;}  }
class C{  public static Integer createCacheServer(){  CacheServer server1=cache.addCacheServer();  assertNotNull(server1);  server1.setPort(0);  try {    server1.start();  } catch (  IOException e) {    org.apache.geode.test.dunit.Assert.fail("Failed to start the Server",e);  }  assertTrue(server1.isRunning());  return new Integer(server1.getPort());}  }
class C{  private Hex(){}  }
class C{  public boolean maxValue(float val,float maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  boolean validateFree(SegmentKelp segment){  return true;}  }
class C{  private long checkKey(Key key){  CRC32 checksum=new CRC32();  checksum.update(key.type);  checksum.update((int)(key.id & 0xffff));  checksum.update((int)((key.id >> 32) & 0xffff));  if (!TextUtils.isEmpty(key.name)) {    checksum.update(key.name.getBytes());  }  return checksum.getValue();}  }
class C{  public void addAnnotation(String annotation,double x,double y){  mAnnotations.add(annotation);  while (mStringXY.get(x) != null) {    x+=getPadding(x);  }  mStringXY.put(x,y);}  }
class C{  public Expertise(String skill){  super(skill);}  }
class C{  private void exportChunk(OutputStream gcsStream,Collection<CommitLogManifest> chunk) throws IOException {  ImmutableList.Builder<Iterable<? extends ImmutableObject>> entities=new ImmutableList.Builder<>();  for (  CommitLogManifest manifest : chunk) {    entities.add(asList(manifest));    entities.add(ofy().load().type(CommitLogMutation.class).ancestor(manifest));  }  for (  ImmutableObject entity : concat(entities.build())) {    serializeEntity(entity,gcsStream);  }}  }
class C{  public static String toString(InputStream inputStream,boolean close) throws IOException {  if (inputStream == null) {    throw new NullPointerException("null inputstream");  }  String string;  StringBuilder outputBuilder=new StringBuilder();  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));    while (null != (string=reader.readLine())) {      outputBuilder.append(string).append('\n');    }  }  finally {    if (close) {      close(inputStream);    }  }  return outputBuilder.toString();}  }
class C{  public CompositeGraphicsNode(){}  }
class C{  public String toString(){  return image;}  }
class C{  public void yypushback(int number){  if (number > yylength()) {    zzScanError(ZZ_PUSHBACK_2BIG);  }  zzMarkedPos-=number;}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  VehiclesImpl(){  this.vehicleTypes=new LinkedHashMap<>();  this.builder=new VehiclesFactoryImpl();  this.vehicles=new LinkedHashMap<>();}  }
class C{  public String printInsts(int startIdx,int endIdx){  StringBuffer bf=new StringBuffer();  try {    bf.append("i: ");    for (int i=startIdx; i <= endIdx; i++) {      if (i == startIdx) {        bf.append("" + m_InstList[i]);      } else {        bf.append(", " + m_InstList[i]);      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }  return bf.toString();}  }
class C{  public DocumentCharacterIterator(IDocument document,int first) throws BadLocationException {  this(document,first,document.getLength());}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  private BigDecimal notNull(Money value){  if (null == value) {    return (new BigDecimal(0.0D));  } else {    return (value.getBigDecimalValue());  }}  }
class C{  public static void main(String[] args){  TestDocFileDir tester=new TestDocFileDir();  copyDir(SRC_DIR + FS + "pkg",".");  run(tester,ARGS0,TEST0,NEGATED_TEST0);  copyDir(SRC_DIR + FS + "pkg",BUG_ID + "-1");  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  @Pure public RVMMethod findInitializerMethod(Atom memberDescriptor){  if (VM.VerifyAssertions)   VM._assert(isResolved());  for (  RVMMethod method : getConstructorMethods()) {    if (method.getDescriptor() == memberDescriptor) {      return method;    }  }  return null;}  }
class C{  public double approxArea(){  if (level < 2) {    return averageArea(level);  }  double flatArea=0.5 * S2Point.crossProd(S2Point.sub(getVertex(2),getVertex(0)),S2Point.sub(getVertex(3),getVertex(1))).norm();  return flatArea * 2 / (1 + Math.sqrt(1 - Math.min(S2.M_1_PI * flatArea,1.0)));}  }
class C{  public void processIndication(Hashtable<String,String> notification){  if (_monitoringPropertiesLoader != null && _monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("Converting CimIndication into an Event");  }  try {    if (isStorageVolumeAlert(notification)) {      CIMVolumeAlertRecordableDeviceEvent vAlert=new CIMVolumeAlertRecordableDeviceEvent(_dbClient,_monitoringPropertiesLoader,notification);      _recordableEventManager.recordEvents(vAlert);    } else     if (isFileShareAlert(notification)) {      CIMFileShareAlertRecordableDeviceEvent fAlert=new CIMFileShareAlertRecordableDeviceEvent(_dbClient,_monitoringPropertiesLoader,notification);      _recordableEventManager.recordEvents(fAlert);    } else {      CIMOtherAlertRecordableDeviceEvent gAlert=new CIMOtherAlertRecordableDeviceEvent(_dbClient,_monitoringPropertiesLoader,notification);      _recordableEventManager.recordEvents(gAlert);    }  } catch (  Exception e) {    _logger.error("Exception occurred while proessing indication",e);  }}  }
class C{  public static boolean isFileExists(final String path){  if (TextUtils.isEmpty(path)) {    Log.e(FileUtils.class,"isFileExists(): Null or Empty parameter given");    return false;  }  final File fileToCheck=new File(path);  return fileToCheck.exists() && !fileToCheck.isDirectory();}  }
class C{  public FieldRefConstant addFieldRef(String className,String name,String type){  FieldRefConstant entry=getFieldRef(className,name,type);  if (entry != null)   return entry;  ClassConstant classEntry=addClass(className);  NameAndTypeConstant typeEntry=addNameAndType(name,type);  entry=new FieldRefConstant(this,_entries.size(),classEntry.getIndex(),typeEntry.getIndex());  addConstant(entry);  return entry;}  }
class C{  public ClusterUpdateSettingsRequest persistentSettings(String source){  this.persistentSettings=Settings.settingsBuilder().loadFromSource(source).build();  return this;}  }
class C{  public static int countGsmSeptetsUsingTables(CharSequence s,boolean use7bitOnly,int languageTable,int languageShiftTable){  int count=0;  int sz=s.length();  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0; i < sz; i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Rlog.w(TAG,"countGsmSeptets() string contains Escape character, skipping.");      continue;    }    if (charToLanguageTable.get(c,-1) != -1) {      count++;    } else     if (charToShiftTable.get(c,-1) != -1) {      count+=2;    } else     if (use7bitOnly) {      count++;    } else {      return -1;    }  }  return count;}  }
class C{  protected boolean afterDelete(boolean success){  if (success) {    deleteMatchInvCostDetail();    MInvoiceLine iLine=new MInvoiceLine(getCtx(),getC_InvoiceLine_ID(),get_TrxName());    int C_OrderLine_ID=iLine.getC_OrderLine_ID();    if (C_OrderLine_ID == 0) {      MInOutLine ioLine=new MInOutLine(getCtx(),getM_InOutLine_ID(),get_TrxName());      C_OrderLine_ID=ioLine.getC_OrderLine_ID();    }    if (C_OrderLine_ID == 0)     return success;    MMatchPO[] mPO=MMatchPO.get(getCtx(),C_OrderLine_ID,getC_InvoiceLine_ID(),get_TrxName());    for (int i=0; i < mPO.length; i++) {      if (mPO[i].getM_InOutLine_ID() == 0)       mPO[i].delete(true); else {        mPO[i].setC_InvoiceLine_ID(null);        mPO[i].saveEx();      }    }  }  return success;}  }
class C{  public void updateList(){  try {    sessions.clear();    Set<MultimediaMessagingSession> currentSessions=getMultimediaSessionApi().getMessagingSessions(MessagingSessionUtils.SERVICE_ID);    sessions=new ArrayList<>(currentSessions);    if (sessions.size() > 0) {      String[] items=new String[sessions.size()];      for (int i=0; i < items.length; i++) {        items[i]=getString(R.string.label_session,sessions.get(i).getSessionId());      }      setListAdapter(new ArrayAdapter<>(MessagingSessionList.this,android.R.layout.simple_list_item_1,items));    } else {      setListAdapter(null);    }  } catch (  RcsServiceException e) {    showExceptionThenExit(e);  }}  }
class C{  public String UseThis(String id,String context){  int i=0;  while (i < symtab.size()) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.id.equals(id) && se.context.equals(context) && (se.type == GLOBAL || se.type == PROCESSVAR || se.type == PROCEDUREVAR || se.type == PARAMETER))     break;    i=i + 1;  }  if (i == symtab.size())   return id; else   return ((SymTabEntry)symtab.elementAt(i)).useThis;}  }
class C{  public Vertex applySET(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex association=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex source=arguments.get(2).getTarget().applyQuotient(variables,network);  Vertex target=arguments.get(1).getTarget().applyQuotient(variables,network);  source.setRelationship(association,target);  network.getBot().log(this,"Setting relation",Level.FINER,source,association,target);  if (association.isPrimitive() && (association.is(Primitive.IT) || association.is(Primitive.HE) || association.is(Primitive.SHE))) {    return association;  }  return target;}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public static String formatTime(GlobalType.Time time){  return formatTime(time.hours,time.minutes,time.seconds);}  }
class C{  public Constraint createConstraint(){  ConstraintImpl constraint=new ConstraintImpl();  return constraint;}  }
class C{  public Node add(Node n){  nodeMap.put(n.getCoordinate(),n);  return n;}  }
class C{  @Override protected void closeDialogOk(){  super.closeDialogOk();  setDefaults();}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (uri != null) {    if (uri.equals(Constants.S_XSLNAMESPACEURL) || getStylesheet().containsExtensionElementURI(uri))     return true;    if (containsExcludeResultPrefix(prefix,uri))     return true;  }  return false;}  }
class C{  public FixedRateBond(final int settlementDays,final double faceAmount,final Schedule schedule,final double[] coupons,final DayCounter accrualDayCounter,final BusinessDayConvention paymentConvention){  this(settlementDays,faceAmount,schedule,coupons,accrualDayCounter,paymentConvention,100.0,new Date());}  }
class C{  private static void checkClosedList(List<Integer> closedList,int createFailureId){  List<Integer> expectedList=new ArrayList<Integer>(createFailureId);  for (int i=createFailureId - 1; i >= 0; i--)   expectedList.add(i);  if (!closedList.equals(expectedList))   throw new AssertionError("Closing sequence " + closedList + " != "+ expectedList);}  }
class C{  @ShouldBePure public boolean equals(String o){  return true;}  }
class C{  public Job createJob(String activitiXmlClasspathResourceName,List<Parameter> parameters) throws Exception {  jobDefinitionServiceTestHelper.createJobDefinition(activitiXmlClasspathResourceName);  return jobService.createAndStartJob(createJobCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,parameters));}  }
class C{  public ElkanKMeans(DistanceMetric dm){  this(dm,new Random());}  }
class C{  public ServerSocket createServerSocketUsingPortRange(InetAddress ba,int backlog,boolean isBindAddress,boolean useNIO,int tcpBufferSize,int[] tcpPortRange,boolean sslConnection) throws IOException {  ServerSocket socket=null;  int localPort=0;  int startingPort=0;  Random rand=new SecureRandom();  int portLimit=tcpPortRange[1];  int randPort=tcpPortRange[0] + rand.nextInt(tcpPortRange[1] - tcpPortRange[0] + 1);  startingPort=randPort;  localPort=startingPort;  while (true) {    if (localPort > portLimit) {      if (startingPort != 0) {        localPort=tcpPortRange[0];        portLimit=startingPort - 1;        startingPort=0;      } else {        throw new SystemConnectException(LocalizedStrings.TCPConduit_UNABLE_TO_FIND_FREE_PORT.toLocalizedString());      }    }    try {      if (useNIO) {        ServerSocketChannel channl=ServerSocketChannel.open();        socket=channl.socket();        InetSocketAddress addr=new InetSocketAddress(isBindAddress ? ba : null,localPort);        socket.bind(addr,backlog);      } else {        socket=this.createServerSocket(localPort,backlog,isBindAddress ? ba : null,tcpBufferSize,sslConnection);      }      break;    } catch (    java.net.SocketException ex) {      if (useNIO || SocketCreator.treatAsBindException(ex)) {        localPort++;      } else {        throw ex;      }    }  }  return socket;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  protected MediaType determineContentType(final MediaType defaultContentType){  MediaType contentType=getHeaders().getContentType();  if (contentType == null) {    if (isPost() || isPut()) {      OUT:       for (      final String name : getParameters().keySet()) {        for (        final Object value : getParameters().get(name)) {          if (value != null && !(value instanceof String)) {            contentType=MediaType.MULTIPART_FORM_DATA;            break OUT;          }        }      }      contentType=ObjectUtils.defaultIfNull(contentType,MediaType.APPLICATION_FORM_URLENCODED);    } else {    }  }  return ObjectUtils.defaultIfNull(contentType,defaultContentType);}  }
class C{  public static byte[] unPad(byte[] seq,boolean forward){  if (seq != null && seq.length == CG2_PADDED_LENGTH) {    final int pos=forward ? CG2_PAD_POSITION : CG2_PAD_POSITION_REV;    final byte[] result=new byte[seq.length - 1];    System.arraycopy(seq,0,result,0,pos);    System.arraycopy(seq,pos + 1,result,pos,seq.length - pos - 1);    return result;  } else {    return seq;  }}  }
class C{  private ArrayList<Album> parseAlbumData(String json){  ArrayList<Album> albums=new ArrayList<>();  try {    JsonNode jsonNode=this.objectMapper.readTree(json);    for (    JsonNode albumNode : jsonNode.get("albums")) {      JsonNode artistsNode=albumNode.get("artists");      if (artistsNode.size() >= 1) {        Artist artist=new Artist(artistsNode.get(0).get("name").asText());        Album album=new Album(albumNode.get("name").asText(),artist);        albums.add(album);      }    }  } catch (  IOException e) {    throw new RuntimeException("Failed to parse JSON",e);  }  return albums;}  }
class C{  public Iterator<VCardProperty> iterator(){  return properties.values().iterator();}  }
class C{  protected int hash(Object key1,Object key2,Object key3){  int h=0;  if (key1 != null) {    h^=key1.hashCode();  }  if (key2 != null) {    h^=key2.hashCode();  }  if (key3 != null) {    h^=key3.hashCode();  }  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public GenericDraweeHierarchy build(){  validate();  return new GenericDraweeHierarchy(this);}  }
class C{  public Range clone(){  Range result=new Range();  result.Low=Low;  result.High=High;  return result;}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public Acceptor(ServerCommunicationSystem communication,MessageFactory factory,ServerViewController controller){  this.communication=communication;  this.me=controller.getStaticConf().getProcessId();  this.factory=factory;  this.controller=controller;  try {    this.mac=Mac.getInstance(ServerConnection.MAC_ALGORITHM);  } catch (  NoSuchAlgorithmException ex) {    ex.printStackTrace();  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof UUID)) {    return false;  }  byte[] otherId=((UUID)o).mId;  byte[] thisId=mId;  for (int i=0; i < 16; ++i) {    if (otherId[i] != thisId[i]) {      return false;    }  }  return true;}  }
class C{  public static boolean isAuthenticated(){  return org.apache.shiro.SecurityUtils.getSubject().isAuthenticated();}  }
class C{  public boolean detailed(){  return detailed;}  }
class C{  public boolean returnToOriginalOutfit(){  removeOutfitExpireNotification();  final Outfit originalOutfit=getOriginalOutfit();  if (originalOutfit != null) {    if (originalOutfit.getDetail() > 0) {      final Outfit currentOutfit=getOutfit();      if (!currentOutfit.getDetail().equals(originalOutfit.getDetail())) {        originalOutfit.removeDetail();      }    }    remove("outfit_org");    setOutfit(originalOutfit,false);    for (    String part : RECOLORABLE_OUTFIT_PARTS) {      String tmp=part + "_orig";      String color=get("outfit_colors",tmp);      if (color != null) {        put("outfit_colors",part,color);        remove("outfit_colors",tmp);      } else       if (has("outfit_colors",part)) {        remove("outfit_colors",part);      }    }    return true;  }  return false;}  }
class C{  public void testJms() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/jms-war/test");  final String expected="Got queue!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private void updateZones(){  Calendar calendar=Calendar.getInstance();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Weather change: rain=" + rain.getValue() + "/"+ rain.getMax()+ ", temp="+ temperature.getValue()+ "/"+ temperature.getMax()+ ", fog="+ fog.getValue()+ "/"+ fog.getMax()+ ", thunder="+ thunder.getValue()+ "/"+ thunder.getMax());    LOGGER.debug("Weather on typical zone: " + describeWeather(calendar,Modifiers.getModifiers(WEATHER_KEYWORD)));    LOGGER.debug("Rain would be:" + describeRain(calendar,0).first());  }  for (  ZoneData zone : zones) {    updateAndNotify(zone,describeWeather(calendar,zone.getModifiers()));  }}  }
class C{  private ChangeFreq changeFrequencyFromUpdateFrequency(UpdateFrequencyType updateFrequency){  ChangeFreq response=null;  if (updateFrequency == UpdateFrequencyType.DAILY)   response=ChangeFreq.DAILY; else   if (updateFrequency == UpdateFrequencyType.WEEKLY)   response=ChangeFreq.WEEKLY; else   if (updateFrequency == UpdateFrequencyType.MONTHLY)   response=ChangeFreq.MONTHLY; else   if (updateFrequency == UpdateFrequencyType.YEARLY)   response=ChangeFreq.YEARLY; else   if (updateFrequency == UpdateFrequencyType.TERMINATED)   response=ChangeFreq.NEVER; else   if (updateFrequency == UpdateFrequencyType.UNKNOWN)   response=ChangeFreq.MONTHLY; else   response=ChangeFreq.MONTHLY;  return response;}  }
class C{  private IdentifierGeneratorFactory(){}  }
class C{  @Override public void onAlarm(Alarm alarm){  onDragOver(mDragObject,1);}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return true;}  }
class C{  public String guards(){  return soot.PhaseOptions.getString(options,"guards");}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public BlockChainScore add(final BlockChainScore score){  return new BlockChainScore(this.getRaw().add(score.getRaw()));}  }
class C{  public void clearForCacheClose(){  this.failoverMap.clear();  this.lastHistoryItem=0;  Arrays.fill(this.txHistory,null);}  }
class C{  public static <V,E>Graph<V,Collection<E>> foldHypergraphEdges(Hypergraph<V,E> h,Supplier<Graph<V,Collection<E>>> graph_factory){  Graph<V,Collection<E>> target=graph_factory.get();  for (  V v : h.getVertices())   target.addVertex(v);  for (  E e : h.getEdges()) {    ArrayList<V> incident=new ArrayList<V>(h.getIncidentVertices(e));    populateTarget(target,e,incident);  }  return target;}  }
class C{  protected void lock(){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("lock()");  }  lock.lock();}  }
class C{  public String runComplete(EvolutionState state){  return null;}  }
class C{  private void addFiles(List<File> files){  files.stream().flatMap(null).map(null).forEach(null);  maybePreload();}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  public void didReceiveData(byte[] data,int length){synchronized (mDataBuilder) {    mDataBuilder.append(data,0,length);  }}  }
class C{  @SuppressWarnings("unchecked") private <D extends ChronoLocalDate>D next(D date){  return (D)date.plus(1,ChronoUnit.DAYS);}  }
class C{  static public void swap(int[] array,int a,int b){  int tmp=array[a];  array[a]=array[b];  array[b]=tmp;}  }
class C{  static public List<ExportMask> sortMasksByEligibility(Map<ExportMask,ExportMaskPolicy> maskMap,ExportGroup exportGroup){  List<ExportMaskComparatorContainer> exportMaskContainerList=new ArrayList<ExportMaskComparatorContainer>();  for (  Map.Entry<ExportMask,ExportMaskPolicy> entry : maskMap.entrySet()) {    exportMaskContainerList.add(new ExportMaskComparatorContainer(entry.getKey(),entry.getValue(),exportGroup));  }  Collections.sort(exportMaskContainerList,new ExportMaskComparator());  List<ExportMask> sortedMasks=new ArrayList<ExportMask>();  for (  ExportMaskComparatorContainer container : exportMaskContainerList) {    ExportMaskPolicy policy=container.policy;    ExportMask mask=container.mask;    _log.info(String.format("Sorted ExportMasks by eligibility: %s { isSimple:%s, igType:%s, xpType:%s, localAutoTier:%s, autoTiers:%s }",mask.getMaskName(),policy.isSimpleMask(),policy.getIgType(),policy.getExportType(),policy.localTierPolicy,CommonTransformerFunctions.collectionToString(policy.getTierPolicies())));    sortedMasks.add(container.mask);  }  return sortedMasks;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private String matchDbConnection(Connection conn,Element dbMatchersElement) throws SQLException {  String dbProductName=conn.getMetaData().getDatabaseProductName();  NodeList dbMatchers=dbMatchersElement.getElementsByTagName("dbMatcher");  for (int i=0; i < dbMatchers.getLength(); i++) {    Element dbMatcher=(Element)dbMatchers.item(i);    String dbMatchName=dbMatcher.getAttribute("db");    Pattern dbProductPattern=Pattern.compile(dbMatcher.getAttribute("databaseProductName"),Pattern.CASE_INSENSITIVE);    if (dbProductPattern.matcher(dbProductName).find()) {      return dbMatchName;    }  }  return null;}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  public void startElement(String uri,String localName,String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  public static void verifyRequiredAuthInfoForResourceTransfer(Optional<AuthInfo> authInfo,EppResource existingResource) throws EppException {  if (!authInfo.isPresent()) {    throw new MissingTransferRequestAuthInfoException();  }  verifyOptionalAuthInfoForResource(authInfo,existingResource);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BREAK_STATEMENT__LABEL:    setLabel((LabelledStatement)null);  return;}super.eUnset(featureID);}  }
class C{  public void clear(){  refSet.clear();  countPoints=0;}  }
class C{  public final void removeFromClusters(String var){  clusters.remove(var);}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){switch (size) {case 0:    return emptyMap(comparator);case 1:  return of(comparator,entries[0].getKey(),entries[0].getValue());default :return fromEntries(comparator,false,entries,size);}}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.145 -0500",hash_original_method="26C129B43F046C683A3A546D94D7B25F",hash_generated_method="16550742F281D93BA8322B35FFE8DACF") public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public static FSDirectory newFSDirectory(String clazzName,Path path,LockFactory lf){  try {    final Class<? extends FSDirectory> clazz=loadFSDirectoryClass(clazzName);    return newFSDirectory(clazz,path,lf);  } catch (  ClassNotFoundException e) {    throw new IllegalArgumentException(FSDirectory.class.getSimpleName() + " implementation not found: " + clazzName,e);  }catch (  ClassCastException e) {    throw new IllegalArgumentException(clazzName + " is not a " + FSDirectory.class.getSimpleName()+ " implementation",e);  }catch (  NoSuchMethodException e) {    throw new IllegalArgumentException(clazzName + " constructor with " + Path.class.getSimpleName()+ " as parameter not found",e);  }catch (  Exception e) {    throw new IllegalArgumentException("Error creating " + clazzName + " instance",e);  }}  }
class C{  public String toString(){  return ("PrincipalImpl :" + add[0].toString());}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LevelRenderer)) {    return false;  }  LevelRenderer that=(LevelRenderer)obj;  if (this.itemMargin != that.itemMargin) {    return false;  }  if (this.maxItemWidth != that.maxItemWidth) {    return false;  }  return super.equals(obj);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TDoubleLongHashMap)) {    return false;  }  TDoubleLongHashMap that=(TDoubleLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public void showRerollButton(boolean show){  rerollInitiativeB.setVisible(show);}  }
class C{  private void addSamples(int[] curClass,int curDim,int samples,List<DataPoint> dataPoints,int[] dim){  if (curDim < dimensions.length - 1)   for (int i=0; i < dimensions[curDim + 1]; i++) {    int[] nextDim=Arrays.copyOf(dim,dim.length);    nextDim[curDim + 1]=i;    addSamples(curClass,curDim + 1,samples,dataPoints,nextDim);  } else {    for (int i=0; i < samples; i++) {      DenseVector dv=new DenseVector(dim.length);      for (int j=0; j < dim.length; j++)       dv.set(j,dim[j] + noiseSource.invCdf(rand.nextDouble()));      dataPoints.add(new DataPoint(dv,new int[]{curClass[0]},catDataInfo));    }    curClass[0]++;  }}  }
class C{  public static Object javaLangReferenceReadBarrier(Object obj){  if (NEEDS_JAVA_LANG_REFERENCE_GC_READ_BARRIER) {    ObjectReference result=Selected.Mutator.get().javaLangReferenceReadBarrier(ObjectReference.fromObject(obj));    return result.toObject();  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  @Override public Query parse() throws SyntaxError {  Query q=super.parse();  float boost=1f;  if (q instanceof BoostQuery) {    BoostQuery bq=(BoostQuery)q;    boost=bq.getBoost();    q=bq.getQuery();  }  if (q instanceof BooleanQuery == false) {    if (boost != 1f) {      q=new BoostQuery(q,boost);    }    return q;  }  BooleanQuery obq=(BooleanQuery)q;  Collection<Query> should=new ArrayList<>();  Collection<BooleanClause> prohibOrReq=new ArrayList<>();  BooleanQuery.Builder newqb=new BooleanQuery.Builder();  for (  BooleanClause clause : obq) {    if (clause.isProhibited() || clause.isRequired()) {      prohibOrReq.add(clause);    } else {      BooleanQuery.Builder bq=new BooleanQuery.Builder();      bq.add(clause);      should.add(bq.build());    }  }  if (should.size() > 0) {    DisjunctionMaxQuery dmq=new DisjunctionMaxQuery(should,tie);    newqb.add(dmq,BooleanClause.Occur.SHOULD);  }  for (  BooleanClause c : prohibOrReq) {    newqb.add(c);  }  Query newq=newqb.build();  if (boost != 1f) {    newq=new BoostQuery(newq,boost);  }  return newq;}  }
class C{  @Override public boolean remove(Object o){  for (; ; ) {    final long head=this.head.get();    if (headCursor.compareAndSet(head,head + 1)) {      for (; ; ) {        final long tail=this.tail.get();        if (tailCursor.compareAndSet(tail,tail + 1)) {          int n=0;          for (int i=0; i < size(); i++) {            final int slot=(int)((this.head.get() + i) & mask);            if (buffer[slot] != null && buffer[slot].equals(o)) {              n++;              for (int j=i; j > 0; j--) {                final int cSlot=(int)((this.head.get() + j - 1) & mask);                final int nextSlot=(int)((this.head.get() + j) & mask);                buffer[nextSlot]=buffer[cSlot];              }            }          }          if (n > 0) {            headCursor.set(head + n);            tailCursor.set(tail);            this.head.set(head + n);            queueNotFullCondition.signal();            return true;          } else {            tailCursor.set(tail);            headCursor.set(head);            return false;          }        }      }    }  }}  }
class C{  @DebugLog public static void copyToClipboard(Context mContext,String label,String text){  ClipboardManager clipboard=(ClipboardManager)mContext.getSystemService(Context.CLIPBOARD_SERVICE);  ClipData clip=ClipData.newPlainText(label,text);  clipboard.setPrimaryClip(clip);}  }
class C{  public void unFollowUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionUnfollow,userId);}  }
class C{  public MiniClientPowerManagement(){  super();  if (MiniClient.WINDOWS_OS)   sage.Native.loadLibrary("SageTVWin32");}  }
class C{  static void performThreeKeys(File keys3) throws java.io.FileNotFoundException {  keyWords=loadStringArray(keys3);  SpecialHashKeys3 sp=new SpecialHashKeys3();  trial_specialBuild(sp);  trial_search(sp,6021);  GPerfThree gperf=new GPerfThree();  trial_search(gperf,6021);  trial_JDK(6021,11);  trial_JDK(6021,keyWords.length * 4);  trial_JDK(6021,264240);  BalancedTreeSearch treeCollection=tree_build();  trial_search(treeCollection,6021);  LinearProbe probe=new LinearProbe(264240,1);  HashbasedSearch<String> keysLP=trial_build(264240,probe);  trial_search(keysLP,6021);  QuadraticProbe quadProbe=new QuadraticProbe(264240,0.5f,0.5f);  QuadraticProbe quadProbe2=new QuadraticProbe(264240,1,1);  HashbasedSearch<String> keysQP=trial_build(264240,quadProbe);  trial_search(keysQP,6021);  keysQP=trial_build(264240,quadProbe2);  trial_search(keysQP,6021);  float mult=15;  for (int i=0; i < 10; i++) {    int size=(int)(keyWords.length * mult);    LinearProbe lp=new LinearProbe(size,1);    HashbasedSearch<String> st=trial_build(size,lp);    trial_search(st,6021);    quadProbe=new QuadraticProbe(size,0.5f,0.5f);    quadProbe2=new QuadraticProbe(size,1,1);    keysQP=trial_build(size,quadProbe);    trial_search(keysQP,6021);    keysQP=trial_build(size,quadProbe2);    trial_search(keysQP,6021);    mult=mult - (mult - 1.0f) / 2.0f;  }  int[] bases=new int[]{6029,12263,24527,59053};  for (int p=0; p < bases.length; p++) {    System.out.println("Table Size:" + bases[p] + "\n");    for (int delta=1; delta < 10; delta++) {      LinearProbe lp=new LinearProbe(bases[p],delta);      trial_build(bases[p],lp);    }  }}  }
class C{  private void readSection(InputNode node,Object source,Section section) throws Exception {  readText(node,source,section);  readAttributes(node,source,section);  readElements(node,source,section);}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text") {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public static byte[] copyFromUtf8(final String text){  return text.getBytes(InternalNano.UTF_8);}  }
class C{  void onLoadFinished(){  if (mRestoreStartedAtMillis != -1 && mLastShowMillis >= mRestoreStartedAtMillis) {    long now=SystemClock.elapsedRealtime();    long restoreTime=now - mRestoreStartedAtMillis;    long perceivedRestoreTime=now - mLastShowMillis;    recordTabRestoreResult(true,restoreTime,perceivedRestoreTime,-1);  }  mRestoreStartedAtMillis=-1;}  }
class C{  public char first(){  pos=offset;  if (count != 0) {    return array[pos];  }  return DONE;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    response.setContentType("application/json");    String result=processPostRequest(request);    out=response.getWriter();    out.println(result);  } catch (  Exception ex) {    logger.error(ex.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(ex));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public final boolean isNative(){  return Modifier.isNative(getModifiers());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String prefixValue;  java.util.List prefixValues=new java.util.ArrayList();  prefixValues.add("_:");  prefixValues.add(":0");  prefixValues.add(":");  prefixValues.add("_::");  prefixValues.add("a:0:c");  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");  for (int indexN10050=0; indexN10050 < prefixValues.size(); indexN10050++) {    prefixValue=(String)prefixValues.get(indexN10050);{      boolean success=false;      try {        element.setPrefix(prefixValue);      } catch (      DOMException ex) {        success=(ex.code == DOMException.NAMESPACE_ERR);      }      assertTrue("throw_NAMESPACE_ERR",success);    }  }}  }
class C{  public DataSource<CloseableReference<CloseableImage>> fetchDecodedImage(ImageRequest imageRequest,Object callerContext){  try {    Producer<CloseableReference<CloseableImage>> producerSequence=mProducerSequenceFactory.getDecodedImageProducerSequence(imageRequest);    return submitFetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private String afterVoid(MInvoice invoice){  if (invoice.get_ValueAsBoolean("IsFixedAssetInvoice")) {    final String sql="SELECT A_Asset_Addition_ID " + "FROM A_Asset_Addition WHERE C_Invoice_ID=? ";    int A_Asset_Addition_ID=DB.getSQLValueEx(invoice.get_TrxName(),sql,invoice.get_ID());    MAssetAddition assetAdd=new MAssetAddition(invoice.getCtx(),A_Asset_Addition_ID,invoice.get_TrxName());    if (MAssetAddition.DOCSTATUS_Drafted.equals(assetAdd.getDocStatus()) || MAssetAddition.DOCSTATUS_InProgress.equals(assetAdd.getDocStatus()) || MAssetAddition.DOCSTATUS_Invalid.equals(assetAdd.getDocStatus())|| MAssetAddition.DOCSTATUS_Approved.equals(assetAdd.getDocStatus())|| MAssetAddition.DOCSTATUS_NotApproved.equals(assetAdd.getDocStatus())) {      if (!assetAdd.processIt(MAssetAddition.DOCACTION_Void)) {        log.warning("Asset Addition Process Failed: " + assetAdd + " - "+ assetAdd.getProcessMsg());        throw new IllegalStateException("Asset Addition Process Failed: " + assetAdd + " - "+ assetAdd.getProcessMsg());      }      assetAdd.saveEx();    }  }  return null;}  }
class C{  public void add(List list,Comparable rowKey,Comparable columnKey){  BoxAndWhiskerItem item=BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(list);  add(item,rowKey,columnKey);}  }
class C{  public Message replicate(){  Message m=new Message(from,to,id,size);  m.copyFrom(this);  return m;}  }
class C{  public UrlContextMenu(String url,boolean deleted,ContextMenuListener listener){  this.url=url;  this.listener=listener;  if (deleted) {    addItem("","Warning: Link may be malicious");    addSeparator();  }  addItem("open","Open link");  addItem("copy","Copy to clipboard");  Matcher m=channelFromUrl.matcher(url);  if (m.matches()) {    channel=m.group(1);    addSeparator();    addItem("join","Join #" + channel);  }}  }
class C{  @Override public void endWindow(){  if (doemit) {    mergedport.emit(result);  }}  }
class C{  public static String escapeJS(String str,char quotesUsed){  return escapeJS(str,quotesUsed,(CharsetEncoder)null);}  }
class C{  public void put(String key,Double value){  mValues.put(key,value);}  }
class C{  public void moveColumn(int columnIndex,int newIndex){  if ((columnIndex < 0) || (columnIndex >= getColumnCount()) || (newIndex < 0)|| (newIndex >= getColumnCount()))   throw new IllegalArgumentException("moveColumn() - Index out of range");  TableColumn aColumn;  if (columnIndex == newIndex) {    fireColumnMoved(new TableColumnModelEvent(this,columnIndex,newIndex));    return;  }  aColumn=tableColumns.elementAt(columnIndex);  tableColumns.removeElementAt(columnIndex);  boolean selected=selectionModel.isSelectedIndex(columnIndex);  selectionModel.removeIndexInterval(columnIndex,columnIndex);  tableColumns.insertElementAt(aColumn,newIndex);  selectionModel.insertIndexInterval(newIndex,1,true);  if (selected) {    selectionModel.addSelectionInterval(newIndex,newIndex);  } else {    selectionModel.removeSelectionInterval(newIndex,newIndex);  }  fireColumnMoved(new TableColumnModelEvent(this,columnIndex,newIndex));}  }
class C{  public static int uniform(int n){  if (n <= 0)   throw new IllegalArgumentException("Parameter N must be positive");  return random.nextInt(n);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.975 -0500",hash_original_method="656BABE23C68D82FE6D3AB319F560E81",hash_generated_method="AD96BCE3B23DB4C0476167B5645576D5") public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(DERObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(DERObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public String routing(){  return this.routing;}  }
class C{  public T caseAnonymous_beforeCode_2_(Anonymous_beforeCode_2_ object){  return null;}  }
class C{  public String toString(){  return ("NetMaskImpl :" + super.getAddress().toString() + "/"+ prefix);}  }
class C{  public void end(int page){  if (page >= pageAnimations.size() || page < 0)   return;  ArrayList<PageAnimation> pageAnimationsInPage=pageAnimations.get(page);  if (pageAnimationsInPage != null) {    for (    PageAnimation pageAnimation : pageAnimationsInPage) {      pageAnimation.end(onView);    }  }}  }
class C{  public boolean hasNeighborhood(){  return super.hasElement(Neighborhood.KEY);}  }
class C{  public static void main(String argv[]){  try {    String configFile=null;    String service=null;    String command=null;    Long seqno=null;    Long low=null;    Long high=null;    Long by=null;    Boolean pureSQL=null;    Boolean specs=null;    Boolean headersOnly=null;    Boolean json=null;    Boolean yesToQuestions=null;    String fileName=null;    String charsetName=null;    boolean hex=false;    boolean doChecksum=true;    TimeZone timezone=TimeZone.getTimeZone("UTC");    ArgvIterator argvIterator=new ArgvIterator(argv);    String curArg=null;    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-conf".equals(curArg))       configFile=argvIterator.next(); else       if ("-service".equals(curArg))       service=argvIterator.next(); else       if ("-seqno".equals(curArg))       seqno=Long.parseLong(argvIterator.next()); else       if ("-low".equals(curArg))       low=Long.parseLong(argvIterator.next()); else       if ("-high".equals(curArg))       high=Long.parseLong(argvIterator.next()); else       if ("-by".equals(curArg))       by=Long.parseLong(argvIterator.next()); else       if ("-sql".equals(curArg))       pureSQL=true; else       if ("-specs".equals(curArg))       specs=true; else       if ("-headers".equals(curArg))       headersOnly=true; else       if ("-json".equals(curArg))       json=true; else       if ("-y".equals(curArg))       yesToQuestions=true; else       if ("-charset".equals(curArg)) {        charsetName=argvIterator.next();        if (!Charset.isSupported(charsetName)) {          println("Unsupported charset " + charsetName + ". Using default.");          charsetName=null;        }      } else       if ("-timezone".equals(curArg)) {        String timezoneName=argvIterator.next();        if (timezoneName == null) {          println("Time zone name is missing");          fail();        }        TimeZone tz=TimeZone.getTimeZone(timezoneName);        if (!timezoneName.equals(tz.getID())) {          println("WARNING: Your time zone name does not match Java naming; using time zone: " + tz.getID());        }        timezone=tz;      } else       if ("-hex".equals(curArg)) {        hex=true;      } else       if ("-file".equals(curArg)) {        fileName=argvIterator.next();      } else       if ("-no-checksum".equals(curArg)) {        doChecksum=false;      } else       if (curArg.startsWith("-"))       fatal("Unrecognized option: " + curArg,null); else       command=curArg;    }    if (command == null) {      println("Command is missing!");      printHelp();      fail();    } else     if (THLCommands.HELP.equals(command)) {      printHelp();      succeed();    } else     if (json != null && json == true && headersOnly == null) {      println("Currently JSON output is supported only with -headers flag");      fail();    }    TimeZone.setDefault(timezone);    if (configFile == null) {      if (service == null) {        configFile=lookForConfigFile();        if (configFile == null) {          fatal("You must specify either a config file or a service name (-conf or -service)",null);        }      } else {        ReplicatorRuntimeConf runtimeConf=ReplicatorRuntimeConf.getConfiguration(service);        configFile=runtimeConf.getReplicatorProperties().getAbsolutePath();      }    }    if (THLCommands.INFO.equals(command)) {      THLManagerCtrl thlManager=new THLManagerCtrl(configFile,doChecksum);      thlManager.prepare(true);      InfoHolder info=thlManager.getInfo();      println("log directory = " + info.getLogDir());      println("log files = " + info.getLogFiles());      printLogsSize(info.getLogsSize());      println("min seq# = " + info.getMinSeqNo());      println("max seq# = " + info.getMaxSeqNo());      println("events = " + info.getEventCount());      printTHLFileInfo("oldest file",info.getOldestFile());      printTHLFileInfo("newest file",info.getNewestFile());      thlManager.release();    } else     if (THLCommands.LIST.equals(command)) {      THLManagerCtrl thlManager=new THLManagerCtrl(configFile,doChecksum);      if (fileName != null) {        thlManager.listEvents(fileName,getBoolOrFalse(pureSQL),getBoolOrFalse(headersOnly),getBoolOrFalse(json),charsetName,hex,getBoolOrFalse(specs));      } else       if (seqno == null)       thlManager.listEvents(low,high,by,getBoolOrFalse(pureSQL),getBoolOrFalse(headersOnly),getBoolOrFalse(json),charsetName,hex,getBoolOrFalse(specs)); else       thlManager.listEvents(seqno,seqno,by,getBoolOrFalse(pureSQL),getBoolOrFalse(headersOnly),getBoolOrFalse(json),charsetName,hex,getBoolOrFalse(specs));    } else     if (THLCommands.PURGE.equals(command)) {      THLManagerCtrl thlManager=new THLManagerCtrl(configFile,doChecksum);      thlManager.prepare(false);      if (!thlManager.diskLog.isWritable()) {        println("Fatal error:  The disk log is not writable and cannot be purged.");        println("If a replication service is currently running, please set the service");        println("offline first using 'trepctl -service svc offline'");        fail();      }      println("WARNING: The purge command will break replication if you delete all events or delete events that have not reached all slaves.");      boolean confirmed=true;      if (!getBoolOrFalse(yesToQuestions)) {        confirmed=false;        println("Are you sure you wish to delete these events [y/N]?");        if (readYes())         confirmed=true; else         println("Nothing done.");      }      if (confirmed) {        String log="Deleting events where";        if (seqno == null) {          if (low != null)           log+=" SEQ# >= " + low;          if (low != null && high != null)           log+=" and";          if (high != null)           log+=" SEQ# <=" + high;          println(log);          thlManager.purgeEvents(low,high);        } else {          log+=" SEQ# = " + seqno;          println(log);          thlManager.purgeEvents(seqno,seqno);        }      }      thlManager.release();    } else     if (THLCommands.SKIP.equals(command)) {      println("SKIP operation is no longer supported");      println("Please use 'trepctl online -skip-seqno N' to skip over a transaction");      return;    } else     if (command.equals("index")) {      THLManagerCtrl thlManager=new THLManagerCtrl(configFile,doChecksum);      thlManager.prepare(true);      thlManager.printIndex();      thlManager.release();    } else {      println("Unknown command: '" + command + "'");      printHelp();      fail();    }  } catch (  Throwable t) {    fatal("Fatal error: " + t.getMessage(),t);  }}  }
class C{  public static boolean isNewStatement(PsiElement element,boolean canBeAfterBrace){  PsiElement previousLeaf=getLeafByOffset(element.getTextRange().getStartOffset() - 1,element);  previousLeaf=PsiImplUtil.realPrevious(previousLeaf);  if (previousLeaf != null) {    if (canBeAfterBrace && GroovyTokenTypes.mLCURLY.equals(previousLeaf.getNode().getElementType())) {      return true;    }    if (GroovyTokenTypes.mCOLON.equals(previousLeaf.getNode().getElementType()) && previousLeaf.getParent() instanceof GrLabeledStatement) {      return true;    }  }  return (previousLeaf == null || SEPARATORS.contains(previousLeaf.getNode().getElementType()));}  }
class C{  public DTNHost createHost(Coord loc,String name){  MovementModel mmProto=new StationaryMovement(loc);  return createHost(mmProto,name);}  }
class C{  public FeatureGen(Maps maps,Dictionary dict){  this.maps=maps;  this.dict=dict;}  }
class C{  public DaitchMokotoffSoundexFilterFactory(Map<String,String> args){  super(args);  inject=getBoolean(args,INJECT,true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public BreitWigner(double mean,double gamma,double cut,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(mean,gamma,cut);}  }
class C{  @Gridify(taskClass=TestTask.class) private void gridify(){}  }
class C{  public boolean checkForDeviceCertificate(Device device) throws KeyStoreException {  if (keyStore == null || !keyStore.containsAlias(device.getId()) || !keyStore.isKeyEntry(device.getId())) {    return false;  }  X509Certificate deviceCertificate=(X509Certificate)keyStore.getCertificate(device.getId());  try {    deviceCertificate.checkValidity();  } catch (  CertificateExpiredException|CertificateNotYetValidException e) {    System.err.println("Device certificate expired or not yet valid");    return false;  }  Principal principal=deviceCertificate.getSubjectDN();  String name=getPrincipalAttributeValue(principal,"CN","");  Matcher matcher=DEVICE_PATTERN.matcher(name);  if (matcher.find()) {    if (matcher.groupCount() == 2) {      if (device.getId().equals(matcher.group(1))) {        setPrivateCertificate(deviceCertificate);        return true;      }    }  }  return false;}  }
class C{  public static void plotTestData(INDArray features,INDArray labels,INDArray predicted,INDArray backgroundIn,INDArray backgroundOut,int nDivisions){  double[] mins=backgroundIn.min(0).data().asDouble();  double[] maxs=backgroundIn.max(0).data().asDouble();  XYZDataset backgroundData=createBackgroundData(backgroundIn,backgroundOut);  JPanel panel=new ChartPanel(createChart(backgroundData,mins,maxs,nDivisions,createDataSetTest(features,labels,predicted)));  JFrame f=new JFrame();  f.add(panel);  f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  f.pack();  f.setTitle("Test Data");  f.setVisible(true);}  }
class C{  public void testSetF28(){  boolean f28=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF28(f28);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  private static String formatDate(Date date){  if (date == null) {    return "";  }  return new SimpleDateFormat(ISO_8601_DATE_FORMAT).format(date);}  }
class C{  public void collect(final UpdatedFiles updates,List<VcsException> exceptions){  try {    Set<String> paths=getUnmergedPaths();    addAll(updates,FileGroup.MERGED_WITH_CONFLICT_ID,paths);    TreeSet<String> updated=new TreeSet<String>();    TreeSet<String> created=new TreeSet<String>();    TreeSet<String> removed=new TreeSet<String>();    String revisionsForDiff=getRevisionsForDiff();    if (revisionsForDiff == null) {      return;    }    getChangedFilesExceptUnmerged(updated,created,removed,revisionsForDiff);    addAll(updates,FileGroup.UPDATED_ID,updated);    addAll(updates,FileGroup.CREATED_ID,created);    addAll(updates,FileGroup.REMOVED_FROM_REPOSITORY_ID,removed);  } catch (  VcsException e) {    exceptions.add(e);  }}  }
class C{  public boolean hasObservable(){  return !getAttributeValues(LinkFormat.OBSERVABLE).isEmpty();}  }
class C{  public void parse(Element element,ElementMetadata<?,?> metadata,Object value) throws ParseException {  Path bound=path.toAbsolute(metadata);  element=createFinalElement(path,element);  if (bound.selectsAttribute()) {    parseAttributeValue(element,bound.getSelectedElement(),bound.getSelectedAttributeKey(),bound.getSelectedAttribute(),value);  } else {    parseTextValue(element,bound.getSelectedElement(),value);  }}  }
class C{  public void stepInto() throws DebuggerException {  doStep(StepRequest.STEP_INTO);}  }
class C{  public int addRef(Object ref){  if (_refs == null)   _refs=new ArrayList();  _refs.add(ref);  return _refs.size() - 1;}  }
class C{  public int toInt(){  return value.toInt();}  }
class C{  public int hashCode(){  assert false : "hashCode not designed";  return 42;}  }
class C{  public void deletePrincipal(String tenantName,String principalName) throws Exception {  getService().deletePrincipal(tenantName,principalName,this.getServiceContext());}  }
class C{  public void testConfigGuess2() throws Exception {  CSVConfig expected=new CSVConfig();  expected.setDelimiter(';');  expected.setValueDelimiter(' ');  expected.setFill(CSVConfig.FILLRIGHT);  expected.setIgnoreValueDelimiter(false);  StringBuilder sb=new StringBuilder();  sb.append("1,2,3,4\n");  sb.append("abcd,1234,abcd,1234");  ByteArrayInputStream in=new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8));  CSVConfigGuesser guesser=new CSVConfigGuesser(in);  CSVConfig guessed=guesser.guess();  assertEquals(expected.isFixedWidth(),guessed.isFixedWidth());}  }
class C{  public SyntaxDocument(Properties props){  m_Self=this;  m_RootElement=m_Self.getDefaultRootElement();  m_Keywords=new HashMap<String,MutableAttributeSet>();  m_FontSize=DEFAULT_FONT_SIZE;  m_FontName=DEFAULT_FONT_FAMILY;  putProperty(DefaultEditorKit.EndOfLineStringProperty,"\n");  setup(props);}  }
class C{  private boolean checkItemAndWrite(StreamInfo info,Item item){  if (item.stream.equalsIgnoreCase(info.getStream())) {    if ((item.forOnline && info.getOnline()) || !item.forOnline && !info.getOnline()) {      write(item.file,makeContent(info,item.content));      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("rawtypes") private void processFileShareInfo(final List<Object> fsUsageList,final Map<String,Object> keyMap,final List<Stat> statList,DbClient dbClient) throws VNXFilePluginException {  final String serialId=keyMap.get(Constants._serialID).toString();  Iterator iterator=fsUsageList.iterator();  keyMap.put(Constants._TimeCollected,System.currentTimeMillis());  Map<String,Long> fsCapacityMap=new HashMap<String,Long>();  while (iterator.hasNext()) {    FileSystemSetUsageStats fsSetUsageStats=(FileSystemSetUsageStats)iterator.next();    List<Item> fsUsageItems=fsSetUsageStats.getItem();    _logger.info("Received {} fileShareUsage records at server time {}",fsUsageItems.size(),fsSetUsageStats.getTime());    for (    Item item : fsUsageItems) {      if (null == item.getFileSystem()) {        continue;      }      final String nativeGuid=NativeGUIDGenerator.generateNativeGuid(Type.vnxfile.toString(),serialId,item.getFileSystem());      Stat stat=_zeroRecordGenerator.injectattr(keyMap,nativeGuid,null);      if (null != stat) {        stat.setTimeInMillis((Long)keyMap.get(Constants._TimeCollected));        stat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));        injectProvisionedCapacity(stat,keyMap);        stat.setAllocatedCapacity(item.getSpaceUsed() * 1024);        _statsColumnInjector.injectColumns(stat,dbClient);        statList.add(stat);        DbClient client=(DbClient)keyMap.get(Constants.dbClient);        if (client != null) {          FileShare fileSystem=client.queryObject(FileShare.class,stat.getResourceId());          if (fileSystem != null) {            if (!fileSystem.getInactive() && fileSystem.getUsedCapacity() != stat.getAllocatedCapacity()) {              fileSystem.setUsedCapacity(stat.getAllocatedCapacity());              client.persistObject(fileSystem);            }          }        }      }      long totalSpace=item.getSpaceTotal();      String fsNativeId=item.getFileSystem();      fsCapacityMap.put(fsNativeId,Long.valueOf(totalSpace));      _logger.info("processFileShareInfo - FileSystem native id  {}  and file system total size{}",fsNativeId,String.valueOf(totalSpace));    }    _logger.info("Filesystems found - {} ",fsCapacityMap.size());    keyMap.put(VNXFileConstants.FILE_CAPACITY_MAP,fsCapacityMap);  }  _logger.info("No. of stat objects: {}",statList.size());}  }
class C{  @Override public String basePath(){  return "/wm/staticflowpusher";}  }
class C{  public EnclosingMethodAttr(String cls,String mtd,String dsc){  this.cls=cls;  this.mtd=mtd;  this.dsc=dsc;  clscp=new ClassCP(cls);  if (mtd != null && dsc != null)   ntcp=new NameTypeCP(mtd,dsc);}  }
class C{  public static void disposeOf(final Disposable... disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables) {      disposeOf(disposable);    }  }}  }
class C{  public static boolean hasInterface(Class<?> intf,Class<?> cls){  Class<?>[] intfs;  int i;  boolean result;  Class<?> currentclass;  result=false;  currentclass=cls;  do {    intfs=currentclass.getInterfaces();    for (i=0; i < intfs.length; i++) {      if (intfs[i].equals(intf)) {        result=true;        break;      }    }    if (!result) {      currentclass=currentclass.getSuperclass();      if ((currentclass == null) || (currentclass.equals(Object.class))) {        break;      }    }  } while (!result);  return result;}  }
class C{  public static final String timeStampGMT(long t){  return timeStamp(new Date(t),GMT);}  }
class C{  public static byte[] hash(byte[]... data){  try {    MessageDigest h=MessageDigest.getInstance(HASH_ALGORITHM);    for (    byte[] d : data) {      h.update(d);    }    return h.digest();  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException("The hash algorithm " + HASH_ALGORITHM + " is not available",e);  }}  }
class C{  protected static Stamp join(Stamp a,Stamp b){  Stamp ab=a.join(b);  Stamp ba=b.join(a);  Assert.assertEquals(ab,ba);  return ab;}  }
class C{  private float calculateScale(int x,int y){  final float centerX=getWidth() / 2f;  final float centerY=getHeight() / 2f;  final float maxDistance=(float)Math.sqrt(centerX * centerX + centerY * centerY);  final float deltaX=centerX - x;  final float deltaY=centerY - y;  final float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  final float scale=0.5f + (distance / maxDistance) * 0.5f;  return scale;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof LayerListener) {    logger.fine("LayerHandler found a LayerListener.");    addLayerListener((LayerListener)someObj);  }  if (someObj instanceof LayerConfigurationListener) {    logger.fine("LayerHandler found a LayerConfigurationListener.");    addLayerConfigurationListener((LayerConfigurationListener)someObj);  }  if (someObj instanceof Layer) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("LayerHandler found a Layer |" + ((Layer)someObj).getName() + "|"+ someObj.getClass().getName());    }    if (!hasLayer((Layer)someObj)) {      addLayer((Layer)someObj,0);    }  }  if (someObj instanceof PlugIn) {    PlugIn pi=(PlugIn)someObj;    if (pi.getComponent() == null) {      PlugInLayer pil=new PlugInLayer();      pil.setPlugIn(pi);      addLayer(pil,0);    }  }  if (someObj instanceof PropertyHandler) {    setPropertyHandler((PropertyHandler)someObj);  }}  }
class C{  @Override public int hashCode(){  int yearValue=year;  int monthValue=month;  int dayValue=day;  return (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));}  }
class C{  protected double computeDefaultWavelength(Globe globe){  double perimeter=0;  int count=0;  Vec4 first=null;  Vec4 prev=null;  for (  Position pos : this.positions) {    Vec4 current=globe.computePointFromPosition(pos);    if (prev != null) {      perimeter+=current.distanceTo3(prev);    } else {      first=current;    }    prev=current;    count+=1;  }  if (prev != null && !prev.equals(first)) {    perimeter+=prev.distanceTo3(first);  }  double complexity=Math.sqrt(count / 3.0);  return perimeter / (complexity * DEFAULT_NUM_WAVES);}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public static int codePointAt(net.sourceforge.retroweaver.harmony.runtime.java.lang.CharSequence seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 0 || index >= len) {    throw new IndexOutOfBoundsException();  }  char high=seq.charAt(index++);  if (index >= len) {    return high;  }  char low=seq.charAt(index);  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  public Builder readTimeout(final int readTimeout){  clientConfig.setReadTimeout(readTimeout);  return this;}  }
class C{  public static ScheduledReporter createSlf4jReporter(MetricRegistry metricRegistry,Map<String,Object> config){  String loggerName=(String)config.getOrDefault("logger","metrics:reporter");  return Slf4jReporter.forRegistry(metricRegistry).convertRatesTo(getRatesUnit(config)).convertDurationsTo(getDurationUnit(config)).outputTo(LoggerFactory.getLogger(loggerName)).build();}  }
class C{  public basefont addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public int read() throws IOException {  int pixel=0;  byte[] bitSet=new byte[8];  if (this.y == this.imgHeight) {    return -1;  }  for (int i=0; i < bitSet.length; i++) {    pixel=this.image.getRGB(this.x,this.y);    bitSet[i]=getCurrBitFromPixel(pixel);    this.currBit++;    if (this.currBit == (3 * this.channelBitsUsed)) {      this.currBit=0;      this.x++;      if (this.x == this.imgWidth) {        this.x=0;        this.y++;        if (this.y == this.imgHeight) {          return -1;        }      }    }  }  return ((bitSet[0] << 7) + (bitSet[1] << 6) + (bitSet[2] << 5)+ (bitSet[3] << 4)+ (bitSet[4] << 3)+ (bitSet[5] << 2)+ (bitSet[6] << 1)+ (bitSet[7] << 0));}  }
class C{  private void loadFromResource(String resource){  try {    loadFromStream(getClass().getResource(resource).openStream());  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void star(final JFrame parent,final INaviModule[] modules){  for (  final INaviModule module : modules) {    try {      module.getConfiguration().setStared(true);    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00062: " + "Module could not be stared";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The module '%s' could not be stared.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  protected static Boolean unlock_DTLS(Object key){  TXLockService dtls=TXLockService.getDTLS();  try {    ((TXLockServiceImpl)dtls).getInternalDistributedLockService().unlock(key);    return Boolean.TRUE;  } catch (  Exception e) {    return Boolean.FALSE;  }}  }
class C{  public void testWithNullValueDeserializedAsEmptyString(){  converterLookup.registerConverter(new ToAttributedValueConverter(Software.class,mapper,reflectionProvider,converterLookup,"name"),0);  final Software software=new Software(null,null);  final StringWriter writer=new StringWriter();  final CompactWriter compactWriter=new CompactWriter(writer);  new TreeMarshaller(compactWriter,converterLookup,mapper).start(software,null);  compactWriter.flush();  assertEquals("<software/>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  assertEquals("",((Software)new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null)).name);}  }
class C{  public void requestInitialized(ServletRequestEvent event){  FacesContext facesContext=FacesContext.getCurrentInstance();  if (facesContext instanceof InitFacesContext) {    InitFacesContext initFacesContext=(InitFacesContext)facesContext;    initFacesContext.releaseCurrentInstance();    initFacesContext.removeServletContextEntryForInitContext();  }  ApplicationAssociate.setCurrentInstance(getAssociate());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  getTypeArgs().addAll((Collection<? extends TypeRef>)newValue);return;case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET:setTarget((Expression)newValue);return;case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS:getArguments().clear();getArguments().addAll((Collection<? extends Argument>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void openWriter(KMZWriter writer){}  }
class C{  static Iterator<String> colorNameIterator(){  if (colorNames == null) {    loadColorNames();  }  return colorNames.keySet().iterator();}  }
class C{  public void testBug16224249() throws Exception {  Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);  String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY,"localhost");  String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");  String hostSpec=host;  if (!NonRegisteringDriver.isHostPropertiesList(host)) {    hostSpec=host + ":" + port;  }  String database=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);  removeHostRelatedProps(props);  props.remove(NonRegisteringDriver.DBNAME_PROPERTY_KEY);  StringBuilder configs=new StringBuilder();  for (  @SuppressWarnings("rawtypes") Map.Entry entry : props.entrySet()) {    configs.append(entry.getKey());    configs.append("=");    configs.append(entry.getValue());    configs.append("&");  }  String loadbalanceUrl=String.format("jdbc:mysql:loadbalance://%s,%s/%s?%s",hostSpec,hostSpec,database,configs.toString());  String failoverUrl=String.format("jdbc:mysql://%s,%s/%s?%s",hostSpec,"127.0.0.1:" + port,database,configs.toString());  Connection[] loadbalancedconnection=new Connection[]{new NonRegisteringDriver().connect(loadbalanceUrl,null),new NonRegisteringDriver().connect(loadbalanceUrl,null),new NonRegisteringDriver().connect(loadbalanceUrl,null)};  Connection[] failoverconnection=new Connection[]{new NonRegisteringDriver().connect(failoverUrl,null),new NonRegisteringDriver().connect(failoverUrl,null),new NonRegisteringDriver().connect(failoverUrl,null)};  Class<?> mysqlCls=null;  Class<?> jcls=failoverconnection[0].getClass();  ClassLoader jcl=jcls.getClassLoader();  if (jcl != null) {    mysqlCls=jcl.loadClass("com.mysql.jdbc.Connection");  } else {    mysqlCls=Class.forName("com.mysql.jdbc.Connection",true,null);  }  if ((mysqlCls != null) && (mysqlCls.isAssignableFrom(jcls))) {    Method abort=mysqlCls.getMethod("abortInternal",new Class[]{});    boolean hasAbortMethod=abort != null;    assertTrue("abortInternal() method should be found for connection class " + jcls,hasAbortMethod);  } else {    fail("com.mysql.jdbc.Connection interface IS NOT ASSIGNABE from connection class " + jcls);  }  System.out.println("Warming up");  for (int i=0; i < failoverconnection.length; i++) {    this.stmt=failoverconnection[i].createStatement();    this.pstmt=failoverconnection[i].prepareStatement("SELECT 1 FROM DUAL");    for (int j=0; j < 10000; j++) {      this.rs=this.pstmt.executeQuery();      this.rs=this.stmt.executeQuery("SELECT 1 FROM DUAL");    }  }  ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(12);  ScheduledFuture<?> f1=scheduler.schedule(new PollTask(failoverconnection[0],1),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f2=scheduler.schedule(new PollTask(failoverconnection[1],2),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f3=scheduler.schedule(new PollTask(failoverconnection[2],3),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f4=scheduler.schedule(new PollTask(loadbalancedconnection[0],4),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f5=scheduler.schedule(new PollTask(loadbalancedconnection[1],5),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f6=scheduler.schedule(new PollTask(loadbalancedconnection[2],6),500,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f7=scheduler.schedule(new CancelTask(failoverconnection[0],7),600,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f8=scheduler.schedule(new CancelTask(failoverconnection[1],8),600,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f9=scheduler.schedule(new CancelTask(failoverconnection[2],9),600,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f10=scheduler.schedule(new CancelTask(loadbalancedconnection[0],10),600,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f11=scheduler.schedule(new CancelTask(loadbalancedconnection[1],11),600,TimeUnit.MILLISECONDS);  ScheduledFuture<?> f12=scheduler.schedule(new CancelTask(loadbalancedconnection[2],12),600,TimeUnit.MILLISECONDS);  try {    while (f1.get(5,TimeUnit.SECONDS) != null || f2.get(5,TimeUnit.SECONDS) != null || f3.get(5,TimeUnit.SECONDS) != null || f4.get(5,TimeUnit.SECONDS) != null || f5.get(5,TimeUnit.SECONDS) != null || f6.get(5,TimeUnit.SECONDS) != null || f7.get(5,TimeUnit.SECONDS) != null || f8.get(5,TimeUnit.SECONDS) != null || f9.get(5,TimeUnit.SECONDS) != null || f10.get(5,TimeUnit.SECONDS) != null || f11.get(5,TimeUnit.SECONDS) != null || f12.get(5,TimeUnit.SECONDS) != null) {      System.out.println("waiting");    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }  if (this.testServerPrepStmtDeadlockCounter < 12) {    Map<Thread,StackTraceElement[]> tr=Thread.getAllStackTraces();    for (    StackTraceElement[] el : tr.values()) {      System.out.println();      for (      StackTraceElement stackTraceElement : el) {        System.out.println(stackTraceElement);      }    }  }  for (int i=0; i < failoverconnection.length; i++) {    try {      this.rs=failoverconnection[i].createStatement().executeQuery("SELECT 1");    } catch (    Exception e1) {      try {        this.rs=failoverconnection[i].createStatement().executeQuery("SELECT 1");        fail("Connection should be explicitly closed.");      } catch (      Exception e2) {        assertTrue(true);      }    }  }  scheduler.shutdown();}  }
class C{  protected void paintMatchedBracket(Graphics g){  RSyntaxTextArea rsta=(RSyntaxTextArea)textArea;  if (rsta.isBracketMatchingEnabled()) {    Rectangle match=rsta.match;    if (match != null) {      if (rsta.getAnimateBracketMatching()) {        g.setColor(rsta.getMatchedBracketBGColor());        g.fillRoundRect(match.x,match.y,match.width,match.height - 1,5,5);        g.setColor(rsta.getMatchedBracketBorderColor());        g.drawRoundRect(match.x,match.y,match.width,match.height - 1,5,5);      } else {        g.setColor(rsta.getMatchedBracketBGColor());        g.fillRect(match.x,match.y,match.width,match.height - 1);        g.setColor(rsta.getMatchedBracketBorderColor());        g.drawRect(match.x,match.y,match.width,match.height - 1);      }    }  }}  }
class C{  public BufferUnderflowException(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static byte[] dbKey(@NotNull byte[] password,Class requestor,String key){  return encryptKey(password,rawKey(requestor,key));}  }
class C{  protected void statusMessage(String message){  m_Log.statusMessage(message);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public final AC align(String side,int... indexes){  UnitValue al=ConstraintParser.parseAlignKeywords(side,true);  if (al == null)   al=ConstraintParser.parseAlignKeywords(side,false);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setAlign(al);  }  return this;}  }
class C{  private static String removeSubjectBlob(String subject){  String subj=subject;  while (subj.charAt(0) == OPEN_SQUARE_BRACKED) {    int length=subj.length();    subj=removeBlob(subject);    int i=0;    if (subj.length() > 0 && subj.charAt(i) == CLOSE_SQUARE_BRACKED) {      i++;    } else {      return subject;    }    while (subj.charAt(i) == WS) {      i++;    }    subj=subj.substring(i);    if (length == subj.length()) {      return subj;    }  }  return subj;}  }
class C{  protected void pickTextAndIcon(DrawContext dc,Iterable<NodeLayout> nodes){  GL2 gl=dc.getGL().getGL2();  try {    gl.glBegin(GL2.GL_QUADS);    for (    NodeLayout layout : nodes) {      Color color=dc.getUniquePickColor();      PickedObject pickedObject=new PickedObject(color.getRGB(),layout.node);      pickedObject.setValue(AVKey.HOT_SPOT,this.getFrame());      this.pickSupport.addPickableObject(pickedObject);      gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());      float minX=(float)layout.drawPoint.x;      float minY=(float)layout.drawPoint.y;      float maxX=(float)layout.screenBounds.getMaxX();      float maxY=(float)layout.screenBounds.getMaxY();      gl.glVertex2f(minX,maxY);      gl.glVertex2f(maxX,maxY);      gl.glVertex2f(maxX,minY);      gl.glVertex2f(minX,minY);    }  }  finally {    gl.glEnd();  }}  }
class C{  private int diff_cleanupSemanticScore(String one,String two){  if (one.length() == 0 || two.length() == 0) {    return 6;  }  char char1=one.charAt(one.length() - 1);  char char2=two.charAt(0);  boolean nonAlphaNumeric1=!Character.isLetterOrDigit(char1);  boolean nonAlphaNumeric2=!Character.isLetterOrDigit(char2);  boolean whitespace1=nonAlphaNumeric1 && Character.isWhitespace(char1);  boolean whitespace2=nonAlphaNumeric2 && Character.isWhitespace(char2);  boolean lineBreak1=whitespace1 && Character.getType(char1) == Character.CONTROL;  boolean lineBreak2=whitespace2 && Character.getType(char2) == Character.CONTROL;  boolean blankLine1=lineBreak1 && BLANKLINEEND.matcher(one).find();  boolean blankLine2=lineBreak2 && BLANKLINESTART.matcher(two).find();  if (blankLine1 || blankLine2) {    return 5;  } else   if (lineBreak1 || lineBreak2) {    return 4;  } else   if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {    return 3;  } else   if (whitespace1 || whitespace2) {    return 2;  } else   if (nonAlphaNumeric1 || nonAlphaNumeric2) {    return 1;  }  return 0;}  }
class C{  public boolean add(RegionDescriptionPerMember regionDescPerMember){  boolean isAdded=false;  if (regionDescPerMemberMap == null) {    regionDescPerMemberMap=new HashMap<String,RegionDescriptionPerMember>();    regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(),regionDescPerMember);    this.scope=regionDescPerMember.getScope();    this.dataPolicy=regionDescPerMember.getDataPolicy();    this.name=regionDescPerMember.getName();    isPartition=this.dataPolicy.withPartitioning();    isPersistent=this.dataPolicy.withPersistence();    isReplicate=this.dataPolicy.withReplication();    haslocalDataStorage=this.dataPolicy.withStorage();    isLocal=this.scope.isLocal();    isAccessor=regionDescPerMember.isAccessor();    this.cndRegionAttributes=new HashMap<String,String>();    this.cndRegionAttributes.putAll(regionDescPerMember.getNonDefaultRegionAttributes());    this.cndPartitionAttributes=new HashMap<String,String>();    this.cndPartitionAttributes.putAll(regionDescPerMember.getNonDefaultPartitionAttributes());    this.cndEvictionAttributes=new HashMap<String,String>();    this.cndEvictionAttributes.putAll(regionDescPerMember.getNonDefaultEvictionAttributes());    if (this.dataPolicy.equals(DataPolicy.EMPTY) && this.scope.equals(Scope.DISTRIBUTED_ACK)) {      isReplicatedProxy=true;    }    isAdded=true;  } else {    if (this.scope.equals(regionDescPerMember.getScope()) && this.name.equals(regionDescPerMember.getName()) && this.dataPolicy.equals(regionDescPerMember.getDataPolicy())&& this.isAccessor == regionDescPerMember.isAccessor()) {      regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(),regionDescPerMember);      findCommon(cndRegionAttributes,regionDescPerMember.getNonDefaultRegionAttributes());      findCommon(cndEvictionAttributes,regionDescPerMember.getNonDefaultEvictionAttributes());      findCommon(cndPartitionAttributes,regionDescPerMember.getNonDefaultPartitionAttributes());      isAdded=true;    }  }  return isAdded;}  }
class C{  private void writetermMatrixFiles() throws IOException {  File topicTermFile=new File(collectionDir,TOPIC_TERM_FILE);  File topicTermMatrixFile=new File(collectionDir,TOPIC_TERM_MATRIX_FILE);  File topicSummaryFile=new File(collectionDir,TOPIC_SUMMARY_FILE);  BufferedWriter writerTopicTerm=new BufferedWriter(new FileWriter(topicTermFile));  BufferedWriter writerTopicTermMatrix=new BufferedWriter(new FileWriter(topicTermMatrixFile));  BufferedWriter writerTopicTermShort=new BufferedWriter(new FileWriter(topicSummaryFile));  getLogger().info(String.format("Writing file '%s'.",topicTermFile));  getLogger().info(String.format("Writing file '%s'.",topicTermMatrixFile));  getLogger().info(String.format("Writing file '%s'.",topicSummaryFile));  Alphabet alphabet=model.getAlphabet();  for (int i=0; i < model.getSortedWords().size(); i++) {    writerTopicTerm.write("TOPIC " + i + ": ");    writerTopicTermShort.write("TOPIC " + i + ": ");    writerTopicTermMatrix.write("TOPIC " + i + ": ");    int count=0;    TreeSet<IDSorter> set=model.getSortedWords().get(i);    for (    IDSorter s : set) {      if (count <= maxTopicWords) {        writerTopicTermShort.write(alphabet.lookupObject(s.getID()) + ", ");      }      count++;      writerTopicTerm.write(alphabet.lookupObject(s.getID()) + ", ");      writerTopicTermMatrix.write(alphabet.lookupObject(s.getID()) + " (" + s.getWeight()+ "), ");    }    writerTopicTerm.newLine();    writerTopicTermShort.newLine();    writerTopicTermMatrix.newLine();  }  writerTopicTermMatrix.close();  writerTopicTerm.close();  writerTopicTermShort.close();}  }
class C{  public static String createTempFile(final String filename,final InputStream is) throws IOException {  if (is == null) {    throw new IOException("InputStream is null");  }  FileOutputStream fos=null;  File tempFile=null;  try {    String userHome=System.getProperty("user.home");    File f=new File(userHome + File.separator + "temp");    f.mkdirs();    if ((filename == null) || (filename.trim().equals(""))) {      tempFile=f.createTempFile("file1",".tmp");    } else {      tempFile=f.createTempFile(filename,"");    }    fos=new FileOutputStream(tempFile);    byte[] buffer=new byte[8192];    int bytesRead=0;    while ((bytesRead=is.read(buffer,0,8192)) != -1) {      fos.write(buffer,0,bytesRead);    }  }  finally {    if (fos != null) {      fos.close();      fos=null;    }  }  return tempFile.getCanonicalPath();}  }
class C{  public static boolean waitForTimestampSaved() throws Exception {  try {    return timestampSavedLatch.await(5,TimeUnit.SECONDS);  }  finally {    timestampSavedLatch=new CountDownLatch(1);  }}  }
class C{  public static boolean isConversionSupported(AudioFormat.Encoding targetEncoding,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetEncoding,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  public LimitTokenPositionFilter(TokenStream in,int maxTokenPosition){  this(in,maxTokenPosition,false);}  }
class C{  public IntIterator childEdgeRows(int node){  return super.outEdgeRows(node);}  }
class C{  public final void print(String string,int offset,int length) throws IOException {  if (string == null)   string="null";  int charsLength=CHARS_LENGTH;  char[] chars=_chars;  while (length > 0) {    int sublen=Math.min(length,charsLength);    string.getChars(offset,offset + sublen,chars,0);    print(chars,0,sublen);    length-=sublen;    offset+=sublen;  }}  }
class C{  @Override protected IMember resolveMember() throws JavaModelException {  char[] declarationSignature=fProposal.getDeclarationSignature();  if (declarationSignature == null)   return null;  String typeName=SignatureUtil.stripSignatureToFQN(String.valueOf(declarationSignature));  IType type=fJavaProject.findType(typeName);  if (type != null) {    String name=String.valueOf(fProposal.getName());    IField field=type.getField(name);    if (field.exists())     return field;  }  return null;}  }
class C{  public boolean isSummarySupported(){  return summarySupported;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public double[] sample(){  double[] centre=points[sampler.nextInt(points.length)];  double[] newPoint=new double[bandwidths.length];  double total=0.0;  double shift=0.0;  for (int i=0; i < centre.length; i++) {    newPoint[i]=(sampler.nextGaussian() * samplingDeviation[i]) + centre[i];    total+=newPoint[i];    if (newPoint[i] < shift) {      shift=newPoint[i];    }  }  if (isBounded) {    for (int i=0; i < centre.length; i++) {      newPoint[i]=(newPoint[i] - shift) / (total - shift * centre.length);    }  }  return newPoint;}  }
class C{  public SuballocatedIntVector(int blocksize,int numblocks){  for (m_SHIFT=0; 0 != (blocksize>>>=1); ++m_SHIFT)   ;  m_blocksize=1 << m_SHIFT;  m_MASK=m_blocksize - 1;  m_numblocks=numblocks;  m_map0=new int[m_blocksize];  m_map=new int[numblocks][];  m_map[0]=m_map0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  public static NbtTag readTagCompressed(InputStream in,NbtLimiter limiter) throws IOException {  try (NbtInputStream nbtIS=fromCompressed(in,limiter)){    return nbtIS.readTag(limiter);  } }  }
class C{  public DPolicyMappingChooser(JDialog parent,String title,PolicyMapping policyMapping){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(policyMapping);}  }
class C{  public boolean hasTimeout(){  if (test == null)   return false;  int size=test.size();  if (exceptions.containsKey(size)) {    if (exceptions.get(size) instanceof TestCaseExecutor.TimeoutExceeded) {      return true;    }  }  return false;}  }
class C{  private void write(String level,Object o){  String msg=getMsg(level,o).toString();  if (usingSystemOut || context == null) {    System.out.println(msg);  } else   if (usingSystemErr) {    System.err.println(msg);  } else {    context.log(msg);  }}  }
class C{  public double[] toArray(){  double[] result=new double[size()];  double[] set=_set;  byte[] states=_states;  for (int i=states.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      result[j++]=set[i];    }  }  return result;}  }
class C{  private void verifyCFG(String where){  final boolean VERIFY_CFG_EDGES=false;  int blockCountEstimate=getMaxBasicBlockNumber();  HashSet<BasicBlock> seenBlocks=new HashSet<BasicBlock>(blockCountEstimate);  HashSet<BasicBlock> origOutSet=null;  if (VERIFY_CFG_EDGES)   origOutSet=new HashSet<BasicBlock>();  for (BasicBlock cur=cfg.firstInCodeOrder(); cur != null; cur=(BasicBlock)cur.getNext()) {    for (Enumeration<BasicBlock> e=cur.getIn(); e.hasMoreElements(); ) {      BasicBlock pred=e.nextElement();      if (!pred.pointsOut(cur)) {        verror(where,pred + " is an inEdge of " + cur+ " but "+ cur+ " is not an outEdge of "+ pred);      }    }    for (Enumeration<BasicBlock> e=cur.getOut(); e.hasMoreElements(); ) {      BasicBlock succ=e.nextElement();      if (!succ.pointsIn(cur)) {        verror(where,succ + " is an outEdge of " + cur+ " but "+ cur+ " is not an inEdge of "+ succ);      }      if (VERIFY_CFG_EDGES && IRStage <= LIR)       origOutSet.add(succ);    }    if (VERIFY_CFG_EDGES && IRStage <= LIR) {      cur.recomputeNormalOut(this);      for (Enumeration<BasicBlock> e=cur.getOut(); e.hasMoreElements(); ) {        BasicBlock succ=e.nextElement();        if (!origOutSet.contains(succ) && !succ.isExit()) {          cur.printExtended();          verror(where,"An edge in the cfg was incorrect.  " + succ + " was not originally an out edge of "+ cur+ " but it was after calling recomputeNormalOut()");        }        origOutSet.remove(succ);      }      if (!origOutSet.isEmpty()) {        BasicBlock missing=origOutSet.iterator().next();        cur.printExtended();        verror(where,"An edge in the cfg was incorrect.  " + missing + " was originally an out edge of "+ cur+ " but not after calling recomputeNormalOut()");      }    }    seenBlocks.add(cur);  }  for (BasicBlock cur=cfg.firstInCodeOrder(); cur != null; cur=(BasicBlock)cur.getNext()) {    for (Enumeration<BasicBlock> e=cur.getIn(); e.hasMoreElements(); ) {      BasicBlock pred=e.nextElement();      if (!seenBlocks.contains(pred)) {        verror(where,"In Method " + method.getName() + ", "+ pred+ " is an inEdge of "+ cur+ " but it is not in the CFG!");      }    }    for (Enumeration<BasicBlock> e=cur.getOut(); e.hasMoreElements(); ) {      BasicBlock succ=e.nextElement();      if (!seenBlocks.contains(succ)) {        if (succ != cfg.exit()) {          verror(where,"In Method " + method.getName() + ", "+ succ+ " is an outEdge of "+ cur+ " but it is not in the CFG!");        }      }    }  }}  }
class C{  boolean ClosedStart(Token t){  return t.kind == IDENTIFIER || (t.kind >= op_57 && t.kind <= op_119) || t.kind == NUMBER_LITERAL || t.kind == LBR || t.kind == LSB || t.kind == LAB || t.kind == LBC || t.kind == LWB || t.kind == STRING_LITERAL || t.kind == WF || t.kind == SF;}  }
class C{  public DrawerBuilder withFooter(@LayoutRes int footerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (footerViewRes != -1) {    this.mFooterView=mActivity.getLayoutInflater().inflate(footerViewRes,null,false);  }  return this;}  }
class C{  public static PeriodType yearDay(){  PeriodType type=cYD;  if (type == null) {    type=new PeriodType("YearDay",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.days()},new int[]{0,-1,-1,1,-1,-1,-1,-1});    cYD=type;  }  return type;}  }
class C{  private BarData generateDataBar(int cnt){  ArrayList<BarEntry> entries=new ArrayList<BarEntry>();  for (int i=0; i < 12; i++) {    entries.add(new BarEntry((int)(Math.random() * 70) + 30,i));  }  BarDataSet d=new BarDataSet(entries,"New DataSet " + cnt);  d.setBarSpacePercent(20f);  d.setColors(ColorTemplate.VORDIPLOM_COLORS);  d.setHighLightAlpha(255);  BarData cd=new BarData(getMonths(),d);  return cd;}  }
class C{  public void recordOSRRecompilationDecision(ControllerPlan plan){  CompilationPlan cplan=plan.getCompPlan();  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("recompile with OSR " + "( at level " + cplan.options.getOptLevel() + " ) "+ cplan.method);  }}  }
class C{  protected void changeToVarRef(QName varName,ExpressionOwner owner,Vector paths,ElemTemplateElement psuedoVarRecipient){  Variable varRef=(paths == m_absPaths) ? new VariableSafeAbsRef() : new Variable();  varRef.setQName(varName);  if (paths == m_absPaths) {    StylesheetRoot root=(StylesheetRoot)psuedoVarRecipient;    Vector globalVars=root.getVariablesAndParamsComposed();    varRef.setIndex(globalVars.size() - 1);    varRef.setIsGlobal(true);  }  owner.setExpression(varRef);}  }
class C{  public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();  if (previousVariablesMap == null) {    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);  } else {    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);  }  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);}  }
class C{  public CProjectSaveProgressOperation(){  m_progressPanel.setMaximum(3);  m_progressPanel.start();  CGlobalProgressManager.instance().add(this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DeterministicKeyChain(DeterministicKey watchingKey){  checkArgument(watchingKey.isPubKeyOnly(),"Private subtrees not currently supported: if you got this key from DKC.getWatchingKey() then use .dropPrivate().dropParent() on it first.");  checkArgument(watchingKey.getPath().size() == getAccountPath().size(),"You can only watch an account key currently");  basicKeyChain=new BasicKeyChain();  this.seed=null;  rootKey=null;  addToBasicChain(watchingKey);  hierarchy=new DeterministicHierarchy(watchingKey);  initializeHierarchyUnencrypted(watchingKey);}  }
class C{  public void layerProtocol(HttpContext context,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (!this.tracker.isTunnelled()) {    throw new IllegalStateException("Protocol layering without a tunnel not supported.");  }  if (this.tracker.isLayered()) {    throw new IllegalStateException("Multiple protocol layering not supported.");  }  final HttpHost target=tracker.getTargetHost();  connOperator.updateSecureConnection(this.connection,target,context,params);  this.tracker.layerProtocol(this.connection.isSecure());}  }
class C{  private void startNewPeriod(IAnalyzedInterval ai) throws AdeException {  long m_oneIntervalEndTime=ai.getIntervalEndTime() - 1;  Date intervalEndDate=new Date(m_oneIntervalEndTime);  m_periodStartDate=PeriodUtils.getContainingPeriodStart(intervalEndDate);  m_periodFinder.setIntervalStartTime(m_periodStartDate.getTime());  m_cachedPeriod=m_periodFinder.getLastPeriod();  m_numIntervals=m_periodFinder.getIntervalsPerPeriod();  if (m_aiVec == null || m_aiVec.length != m_numIntervals) {    m_aiVec=new AnalyzedIntervalData[m_numIntervals];    for (int i=0; i < m_numIntervals; ++i) {      m_aiVec[i]=new AnalyzedIntervalData();    }  }  for (int i=0; i < m_numIntervals; ++i) {    m_aiVec[i].clear();  }  new ExtLoadAnalyzedIntervals().executeQuery();  new ExtLoadAnalyzedResultsExtIntervals().executeQuery();  m_periodDir=Ade.getAde().getConfigProperties().getOutputFilenameGenerator().getPeriodDir(ai.getInterval().getSource(),m_periodStartDate);  FileUtils.createDirs(m_periodDir);  createXsltDirectory(ai);  m_outputFileName=m_periodDir.getPath() + "/index.xml";  m_inPeriod=true;}  }
class C{  private double scaleFactorUsingEntropy(){  String debug="(KStarNumericAttribute.scaleFactorUsingEntropy)";  if (m_ClassType != Attribute.NOMINAL) {    System.err.println("Error: " + debug + " attribute class must be nominal!");    System.exit(1);  }  int j, itcount;  double lowest=-1.0, nextlowest=-1.0;  double root, up, bot, stepsize, delta;  double randscale;  double bestdiff, bestroot, currentdiff, lastdiff;  double bestpsum, bestminprob, scale=1.0;  KStarWrapper botvals=new KStarWrapper();  KStarWrapper upvals=new KStarWrapper();  KStarWrapper vals=new KStarWrapper();  m_Distances=new double[m_NumInstances];  for (j=0; j < m_NumInstances; j++) {    if (m_TrainSet.instance(j).isMissing(m_AttrIndex)) {      m_Distances[j]=-1.0;    } else {      m_Distances[j]=Math.abs(m_TrainSet.instance(j).value(m_AttrIndex) - m_Test.value(m_AttrIndex));      if ((m_Distances[j] + 1e-5) < nextlowest || nextlowest == -1.0) {        if ((m_Distances[j] + 1e-5) < lowest || lowest == -1.0) {          nextlowest=lowest;          lowest=m_Distances[j];        } else         if (Math.abs(m_Distances[j] - lowest) < 1e-5) {        } else {          nextlowest=m_Distances[j];        }      }      m_ActualCount++;    }  }  if (nextlowest == -1 || lowest == -1) {    scale=1.0;    m_SmallestProb=m_AverageProb=1.0;    return scale;  } else {    root=1.0 / (nextlowest - lowest);    bot=0.0 + ROOT_FINDER_ACCURACY / 2;    up=root * 8;    calculateEntropy(up,upvals);    calculateEntropy(bot,botvals);    randscale=botvals.randEntropy - upvals.randEntropy;    bestroot=root=bot;    bestdiff=currentdiff=FLOOR1;    bestpsum=botvals.avgProb;    bestminprob=botvals.minProb;    stepsize=(up - bot) / 20.0;    itcount=0;    while (true) {      itcount++;      lastdiff=currentdiff;      root+=Math.log(root + 1.0) * stepsize;      if (root <= bot) {        root=bot;        currentdiff=0.0;        delta=-1.0;      } else       if (root >= up) {        root=up;        currentdiff=0.0;        delta=-1.0;      } else {        calculateEntropy(root,vals);        vals.randEntropy=(vals.randEntropy - upvals.randEntropy) / randscale;        vals.actEntropy=(vals.actEntropy - upvals.actEntropy) / randscale;        currentdiff=vals.randEntropy - vals.actEntropy;        if (currentdiff < FLOOR1) {          currentdiff=FLOOR1;          if (stepsize < 0) {            bestdiff=currentdiff;            bestroot=bot;            bestpsum=botvals.avgProb;            bestminprob=botvals.minProb;            break;          }        }        delta=currentdiff - lastdiff;      }      if (currentdiff > bestdiff) {        bestdiff=currentdiff;        bestroot=root;        bestminprob=vals.minProb;        bestpsum=vals.avgProb;      }      if (delta < 0) {        if (Math.abs(stepsize) < ROOT_FINDER_ACCURACY) {          break;        } else {          stepsize/=-4.0;        }      }      if (itcount > ROOT_FINDER_MAX_ITER) {        break;      }    }    m_SmallestProb=bestminprob;    m_AverageProb=bestpsum;switch (m_MissingMode) {case M_DELETE:      m_MissingProb=0.0;    break;case M_NORMAL:  m_MissingProb=1.0;break;case M_MAXDIFF:m_MissingProb=m_SmallestProb;break;case M_AVERAGE:m_MissingProb=m_AverageProb;break;}scale=bestroot;}return scale;}  }
class C{  public void addModifier(GenericClass target,GenericAccessibleObject<?> call){  if (!modifiers.containsKey(target))   modifiers.put(target,new LinkedHashSet<>());  modifiers.get(target).add(call);}  }
class C{  public void testButtonConfig(final View v){  final Intent testActivity=new Intent(this,TestButtonConfig.class);  startActivity(testActivity);}  }
class C{  protected void runTests() throws Exception {  startToMain(target);  ReferenceType exceptionClass;  if (exceptionName == null) {    exceptionClass=null;  } else {    exceptionClass=findReferenceType(exceptionName);    if (exceptionName == null) {      throw new Exception("test failure - cannot find: " + exceptionName);    }  }  request=eventRequestManager().createExceptionRequest(exceptionClass,caught,uncaught);  request.addClassExclusionFilter("java.*");  request.addClassExclusionFilter("javax.*");  request.addClassExclusionFilter("sun.*");  request.addClassExclusionFilter("com.sun.*");  request.addClassExclusionFilter("com.oracle.*");  request.addClassExclusionFilter("oracle.*");  request.addClassExclusionFilter("jdk.internal.*");  request.setSuspendPolicy(suspendPolicy);  request.enable();  listenUntilVMDisconnect();}  }
class C{  private void doKamikazeSuicideAttacks(){  final GameData data=getData();  if (!games.strategy.triplea.Properties.getUseKamikazeSuicideAttacks(data)) {    return;  }  final Collection<PlayerID> enemies=Match.getMatches(data.getPlayerList().getPlayers(),Matches.isAtWar(m_player,data));  if (enemies.isEmpty()) {    return;  }  final Match<Unit> canBeAttackedDefault=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(m_player),Matches.UnitIsSea,Matches.UnitIsNotTransportButCouldBeCombatTransport,Matches.UnitIsNotSub);  final boolean onlyWhereThereAreBattlesOrAmphibious=games.strategy.triplea.Properties.getKamikazeSuicideAttacksOnlyWhereBattlesAre(data);  final Collection<Territory> pendingBattles=m_battleTracker.getPendingBattleSites(false);  final HashMap<PlayerID,Collection<Territory>> kamikazeZonesByEnemy=new HashMap<>();  for (  final Territory t : data.getMap().getTerritories()) {    final TerritoryAttachment ta=TerritoryAttachment.get(t);    if (ta == null) {      continue;    }    if (!ta.getKamikazeZone()) {      continue;    }    final PlayerID owner;    if (!games.strategy.triplea.Properties.getKamikazeSuicideAttacksDoneByCurrentTerritoryOwner(data)) {      owner=ta.getOriginalOwner();      if (owner == null) {        continue;      }    } else {      owner=t.getOwner();      if (owner == null) {        continue;      }    }    if (enemies.contains(owner)) {      if (Match.noneMatch(t.getUnits().getUnits(),Matches.unitIsOwnedBy(m_player))) {        continue;      }      if (onlyWhereThereAreBattlesOrAmphibious) {        if (!pendingBattles.contains(t)) {          if (!Matches.TerritoryIsWater.match(t)) {            continue;          }          boolean amphib=false;          final Collection<Territory> landNeighbors=data.getMap().getNeighbors(t,Matches.TerritoryIsLand);          for (          final Territory neighbor : landNeighbors) {            final IBattle battle=m_battleTracker.getPendingBattle(neighbor,false,BattleType.NORMAL);            if (battle == null) {              final Map<Territory,Collection<Unit>> whereFrom=m_battleTracker.getFinishedBattlesUnitAttackFromMap().get(neighbor);              if (whereFrom != null && whereFrom.containsKey(t)) {                amphib=true;                break;              }              continue;            }            if (battle.isAmphibious() && ((battle instanceof MustFightBattle && ((MustFightBattle)battle).getAmphibiousAttackTerritories().contains(t)) || (battle instanceof NonFightingBattle && ((NonFightingBattle)battle).getAmphibiousAttackTerritories().contains(t)))) {              amphib=true;              break;            }          }          if (amphib == false) {            continue;          }        }      }      Collection<Territory> currentTerrs=kamikazeZonesByEnemy.get(owner);      if (currentTerrs == null) {        currentTerrs=new ArrayList<>();      }      currentTerrs.add(t);      kamikazeZonesByEnemy.put(owner,currentTerrs);    }  }  if (kamikazeZonesByEnemy.isEmpty()) {    return;  }  for (  final Entry<PlayerID,Collection<Territory>> entry : kamikazeZonesByEnemy.entrySet()) {    final PlayerID currentEnemy=entry.getKey();    final PlayerAttachment pa=PlayerAttachment.get(currentEnemy);    if (pa == null) {      continue;    }    Match<Unit> canBeAttacked=canBeAttackedDefault;    final Set<UnitType> suicideAttackTargets=pa.getSuicideAttackTargets();    if (suicideAttackTargets != null) {      canBeAttacked=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(m_player),Matches.unitIsOfTypes(suicideAttackTargets));    }    final IntegerMap<Resource> resourcesAndAttackValues=pa.getSuicideAttackResources();    if (resourcesAndAttackValues.size() <= 0) {      continue;    }    final IntegerMap<Resource> playerResourceCollection=currentEnemy.getResources().getResourcesCopy();    final IntegerMap<Resource> attackTokens=new IntegerMap<>();    for (    final Resource possible : resourcesAndAttackValues.keySet()) {      final int amount=playerResourceCollection.getInt(possible);      if (amount > 0) {        attackTokens.put(possible,amount);      }    }    if (attackTokens.size() <= 0) {      continue;    }    final Collection<Territory> kamikazeZones=entry.getValue();    final HashMap<Territory,Collection<Unit>> possibleUnitsToAttack=new HashMap<>();    for (    final Territory t : kamikazeZones) {      final List<Unit> validTargets=t.getUnits().getMatches(canBeAttacked);      if (!validTargets.isEmpty()) {        possibleUnitsToAttack.put(t,validTargets);      }    }    final HashMap<Territory,HashMap<Unit,IntegerMap<Resource>>> attacks=getRemotePlayer(currentEnemy).selectKamikazeSuicideAttacks(possibleUnitsToAttack);    if (attacks == null || attacks.isEmpty()) {      continue;    }    for (    final Entry<Territory,HashMap<Unit,IntegerMap<Resource>>> territoryEntry : attacks.entrySet()) {      final Territory t=territoryEntry.getKey();      final Collection<Unit> possibleUnits=possibleUnitsToAttack.get(t);      if (possibleUnits == null || !possibleUnits.containsAll(territoryEntry.getValue().keySet())) {        throw new IllegalStateException("Player has chosen illegal units during Kamikaze Suicide Attacks");      }      for (      final IntegerMap<Resource> rMap : territoryEntry.getValue().values()) {        attackTokens.subtract(rMap);      }    }    if (!attackTokens.isPositive()) {      throw new IllegalStateException("Player has chosen illegal resource during Kamikaze Suicide Attacks");    }    for (    final Entry<Territory,HashMap<Unit,IntegerMap<Resource>>> territoryEntry : attacks.entrySet()) {      final Territory location=territoryEntry.getKey();      for (      final Entry<Unit,IntegerMap<Resource>> unitEntry : territoryEntry.getValue().entrySet()) {        final Unit unitUnderFire=unitEntry.getKey();        final IntegerMap<Resource> numberOfAttacks=unitEntry.getValue();        if (numberOfAttacks != null && numberOfAttacks.size() > 0 && numberOfAttacks.totalValues() > 0) {          fireKamikazeSuicideAttacks(unitUnderFire,numberOfAttacks,resourcesAndAttackValues,currentEnemy,location);        }      }    }  }}  }
class C{  private void ensureCapacity(int wordsRequired){  if (words.length < wordsRequired) {    int request=Math.max(2 * words.length,wordsRequired);    words=Arrays.copyOf(words,request);    sizeIsSticky=false;  }}  }
class C{  private boolean isSkipped(TypeElement type,Lang lang){  if (config == null) {    return false;  }  ArrayNode excludes=(ArrayNode)config.get("excludes");  for (  JsonNode exclude : excludes) {    if (exclude.get("package") == null) {      throw new IllegalStateException("Malformed configuration - Missing 'package' attribute in the 'codetrans" + ".config' file");    }    String pck=exclude.get("package").asText();    ArrayNode langs=(ArrayNode)exclude.get("langs");    if (type.getQualifiedName().toString().startsWith(pck) && isLanguageSkipped(langs,lang)) {      return true;    }  }  return false;}  }
class C{  private void readFromSourceStream(){  if (isClosed()) {    return;  }  FloatSampleBuffer lBuffer=historyBuffer;  historyBuffer=thisBuffer;  thisBuffer=lBuffer;  beforeReadFromSourceStream();  int oldSampleCount=thisBuffer.getSampleCount();  if (sourceFrameLength != AudioSystem.NOT_SPECIFIED && lBuffer.getSampleCount() + testInFramesRead > sourceFrameLength) {    long remaining=sourceFrameLength - testInFramesRead;    if (remaining <= 0) {      if (TDebug.TraceAudioConverter && DEBUG_STREAM) {        TDebug.out("Read more than allowed from source stream:" + " sourceFrameLength=" + sourceFrameLength + " samples, inFramesRead="+ testInFramesRead+ " samples.");      }      close();      return;    }    if (TDebug.TraceAudioConverter && DEBUG_STREAM) {      TDebug.out("Reading from source stream: change from " + lBuffer.getSampleCount() + " samples to"+ remaining+ " samples");    }    lBuffer.changeSampleCount((int)remaining,false);  }  if (sourceInput != null) {    readFromSourceInput();  } else {    readFromByteSourceStream();  }  int sampleCount=(lBuffer == null) ? 0 : lBuffer.getSampleCount();  testInFramesRead+=sampleCount;  if (TDebug.TraceAudioConverter && DEBUG_STREAM) {    String src=(sourceInput != null) ? "source input" : "source byte stream";    TDebug.out("Read " + sampleCount + " frames from "+ src+ " (requested="+ oldSampleCount+ "). Total="+ testInFramesRead);  }  double inc=outSamples2inSamples(1.0);  if (!thisBufferValid) {    thisBufferValid=true;    dPos=0.0;  } else {    double temp=dPos;    dPos-=oldSampleCount;    if (DEBUG_STREAM) {      TDebug.out("new dPos: " + temp + " - "+ oldSampleCount+ " = "+ dPos);    }    if ((dPos > inc || dPos < -inc) && ((int)dPos) != 0) {      if (DEBUG_STREAM_PROBLEMS) {        TDebug.out("Need to hard reset dPos=" + dPos + " !");      }      dPos=0.0;    }  }}  }
class C{  private void checkCache(CacheConfiguration locCfg,CacheConfiguration rmtCfg,ClusterNode rmtNode,DynamicCacheDescriptor desc) throws IgniteCheckedException {  ClusterNode locNode=ctx.discovery().localNode();  UUID rmt=rmtNode.id();  GridCacheAttributes rmtAttr=new GridCacheAttributes(rmtCfg);  GridCacheAttributes locAttr=new GridCacheAttributes(locCfg);  boolean isLocAff=CU.affinityNode(locNode,locCfg.getNodeFilter());  boolean isRmtAff=CU.affinityNode(rmtNode,rmtCfg.getNodeFilter());  CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"cacheMode","Cache mode",locAttr.cacheMode(),rmtAttr.cacheMode(),true);  if (rmtAttr.cacheMode() != LOCAL) {    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"interceptor","Cache Interceptor",locAttr.interceptorClassName(),rmtAttr.interceptorClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"atomicityMode","Cache atomicity mode",locAttr.atomicityMode(),rmtAttr.atomicityMode(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"cachePreloadMode","Cache preload mode",locAttr.cacheRebalanceMode(),rmtAttr.cacheRebalanceMode(),true);    boolean checkStore=isLocAff && isRmtAff;    if (checkStore)     CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"storeFactory","Store factory",locAttr.storeFactoryClassName(),rmtAttr.storeFactoryClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"cacheAffinity","Cache affinity",locAttr.cacheAffinityClassName(),rmtAttr.cacheAffinityClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"cacheAffinityMapper","Cache affinity mapper",locAttr.cacheAffinityMapperClassName(),rmtAttr.cacheAffinityMapperClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"affinityPartitionsCount","Affinity partitions count",locAttr.affinityPartitionsCount(),rmtAttr.affinityPartitionsCount(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"evictionFilter","Eviction filter",locAttr.evictionFilterClassName(),rmtAttr.evictionFilterClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"evictionPolicy","Eviction policy",locAttr.evictionPolicyClassName(),rmtAttr.evictionPolicyClassName(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"transactionManagerLookup","Transaction manager lookup",locAttr.transactionManagerLookupClassName(),rmtAttr.transactionManagerLookupClassName(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"defaultLockTimeout","Default lock timeout",locAttr.defaultLockTimeout(),rmtAttr.defaultLockTimeout(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"preloadBatchSize","Preload batch size",locAttr.rebalanceBatchSize(),rmtAttr.rebalanceBatchSize(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"swapEnabled","Swap enabled",locAttr.swapEnabled(),rmtAttr.swapEnabled(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeSynchronizationMode","Write synchronization mode",locAttr.writeSynchronization(),rmtAttr.writeSynchronization(),true);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeBehindBatchSize","Write behind batch size",locAttr.writeBehindBatchSize(),rmtAttr.writeBehindBatchSize(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeBehindEnabled","Write behind enabled",locAttr.writeBehindEnabled(),rmtAttr.writeBehindEnabled(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeBehindFlushFrequency","Write behind flush frequency",locAttr.writeBehindFlushFrequency(),rmtAttr.writeBehindFlushFrequency(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeBehindFlushSize","Write behind flush size",locAttr.writeBehindFlushSize(),rmtAttr.writeBehindFlushSize(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"writeBehindFlushThreadCount","Write behind flush thread count",locAttr.writeBehindFlushThreadCount(),rmtAttr.writeBehindFlushThreadCount(),false);    CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"evictMaxOverflowRatio","Eviction max overflow ratio",locAttr.evictMaxOverflowRatio(),rmtAttr.evictMaxOverflowRatio(),true);    if (locAttr.cacheMode() == PARTITIONED) {      CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"evictSynchronized","Eviction synchronized",locAttr.evictSynchronized(),rmtAttr.evictSynchronized(),true);      CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"nearEvictionPolicy","Near eviction policy",locAttr.nearEvictionPolicyClassName(),rmtAttr.nearEvictionPolicyClassName(),false);      CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"affinityIncludeNeighbors","Affinity include neighbors",locAttr.affinityIncludeNeighbors(),rmtAttr.affinityIncludeNeighbors(),true);      CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"affinityKeyBackups","Affinity key backups",locAttr.affinityKeyBackups(),rmtAttr.affinityKeyBackups(),true);      String locHashIdResolver=locAttr.affinityHashIdResolverClassName();      String rmtHashIdResolver=rmtAttr.affinityHashIdResolverClassName();      String defHashIdResolver=AffinityNodeAddressHashResolver.class.getName();      if (!((locHashIdResolver == null && rmtHashIdResolver == null) || (locHashIdResolver == null && rmtHashIdResolver.equals(defHashIdResolver)) || (rmtHashIdResolver == null && locHashIdResolver.equals(defHashIdResolver)))) {        CU.checkAttributeMismatch(log,rmtAttr.cacheName(),rmt,"cacheAffinity.hashIdResolver","Partitioned cache affinity hash ID resolver class",locHashIdResolver,rmtHashIdResolver,true);      }      if (locHashIdResolver == null && (rmtHashIdResolver != null && rmtHashIdResolver.equals(defHashIdResolver))) {        U.warn(log,"Set " + RendezvousAffinityFunction.class + " with "+ defHashIdResolver+ " to CacheConfiguration to start node [cacheName="+ rmtAttr.cacheName()+ "]");      }    }  }}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException("Null buffer for read");  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  try {    for (; ; ) {      int n;      if (inf.needsInput()) {        int part;        if (len < 1) {          break;        }        part=(len < 512 ? len : 512);        inf.setInput(b,off,part);        off+=part;        len-=part;      }      do {        n=inf.inflate(buf,0,buf.length);        if (n > 0) {          out.write(buf,0,n);        }      } while (n > 0);      if (inf.finished()) {        break;      }      if (inf.needsDictionary()) {        throw new ZipException("ZLIB dictionary missing");      }    }  } catch (  DataFormatException ex) {    String msg=ex.getMessage();    if (msg == null) {      msg="Invalid ZLIB data format";    }    throw new ZipException(msg);  }}  }
class C{  public CheckerDevelMain(File searchPath,List<String> args){  super(searchPath,args);}  }
class C{  public void printStackTrace(PrintStream out){synchronized (out) {    PrintWriter pw=new PrintWriter(out,false);    printStackTrace(pw);    pw.flush();  }}  }
class C{  public void unSelect(){  main.removeStyleName(resources.getCss().selectRecipe());  main.addStyleName(resources.getCss().unSelectRecipe());}  }
class C{  private void finalizeCluster(Clustering<DendrogramModel> clustering,Cluster<DendrogramModel> parent,boolean flatten,boolean hierarchical){  final String name="C_" + FormatUtil.NF6.format(dist);  Cluster<DendrogramModel> clus=new Cluster<>(name,members,new DendrogramModel(dist));  if (hierarchical && parent != null) {    clustering.addChildCluster(parent,clus);  } else {    clustering.addToplevelCluster(clus);  }  collectChildren(clustering,this,clus,flatten,hierarchical);  members=null;  children=null;}  }
class C{  public String globalInfo(){  return "Randomly shuffles the order of instances passed through it. " + "The random number generator is reset with the seed value whenever " + "a new set of instances is passed in.";}  }
class C{  public EPStatementObjectModel selectClause(SelectClause selectClause){  this.selectClause=selectClause;  return this;}  }
class C{  public void resetTask(){  theMaid.setSprinting(false);  theOwner=null;  petPathfinder.clearPathEntity();}  }
class C{  public static org.oscm.vo.VOVatRate convertToApi(org.oscm.internal.vo.VOVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOVatRate newVO=new org.oscm.vo.VOVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  return newVO;}  }
class C{  protected synchronized static void remoteTearDown(){  try {    if (cache != null && !cache.isClosed()) {      for (Iterator itr=cache.rootRegions().iterator(); itr.hasNext(); ) {        Region root=(Region)itr.next();        if (root.isDestroyed() || root instanceof HARegion || root instanceof PartitionedRegion) {          continue;        }        try {          root.localDestroyRegion("teardown");        } catch (        VirtualMachineError e) {          SystemFailure.initiateFailure(e);          throw e;        }catch (        Throwable t) {          LogWriterUtils.getLogWriter().error(t);        }      }    }  }  finally {    try {      closeCache();    } catch (    VirtualMachineError e) {      SystemFailure.initiateFailure(e);      throw e;    }catch (    Throwable t) {      LogWriterUtils.getLogWriter().error("Error in closing the cache ",t);    }  }  try {    cleanDiskDirs();  } catch (  IOException e) {    LogWriterUtils.getLogWriter().error("Error cleaning disk dirs",e);  }}  }
class C{  protected boolean err(){  return status != STATUS_OK;}  }
class C{  public SphericalPolarCoordinates(Vector3D v,double newRadius){  radius=v.modulus();  theta=Math.acos(v.getZ() / radius);  phi=Math.atan(v.getY() / v.getX());  if (v.getY() < 0)   phi+=Math.PI;  radius=newRadius;}  }
class C{  public void downloadImage(View view){  try {    UiUtils.hideKeyboard(this,mUrlEditText.getWindowToken());    startDownloadImageActivity(getUrl());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void openNativeNavigationApp(String location){  impl.openNativeNavigationApp(location);}  }
class C{  public int size(){  return getRowDimension();}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public PatternObserverExpr(String namespace,String name,List<Expression> parameters){  super(namespace,name,parameters);}  }
class C{  private static boolean equalsMayBeNull(Object obj1,Object obj2){  return (obj2 == obj1) || ((null != obj1) && (null != obj2) && obj2.equals(obj1));}  }
class C{  public void abuseWeakness(int possibility,SignedElement signedElement,PayloadElement payloadElement) throws InvalidWeaknessException {  if (possibility >= maxPossibilites) {    return;  }  for (int i=0; i < weaknesses.size(); ++i) {    XPathWeaknessInterface w=weaknesses.get(i);    int num=w.getNumberOfPossibilities();    if (possibility < num) {      w.abuseWeakness(possibility,signedElement,payloadElement);      return;    }    possibility-=num;  }}  }
class C{  private Method lookupSubstitute(){  for (  Method m : declaringClass.getDeclaredMethods()) {    if (isSubstitute(m)) {      return m;    }  }  throw new GraalError("No method found specified by %s",this);}  }
class C{  public static Collection<Unit> unloaded(final Unit transport){  return ((TripleAUnit)transport).getUnloaded();}  }
class C{  public static String appendParameter(CtClass type,String descriptor){  int i=descriptor.indexOf(')');  if (i < 0)   return descriptor; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(descriptor.substring(0,i));    toDescriptor(newdesc,type);    newdesc.append(descriptor.substring(i));    return newdesc.toString();  }}  }
class C{  public address addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  protected void paintMap(java.awt.Graphics2D g2){  Map envMap=getMapEnv().getMap();  Map aMap=(agentMap != null) ? agentMap : envMap;  List<Roadblock> roadblocks=new ArrayList<Roadblock>();  for (  String l1 : envMap.getLocations()) {    Point2D pt1=envMap.getPosition(l1);    List<String> linkedLocs=envMap.getPossibleNextLocations(l1);    for (    String l2 : aMap.getPossibleNextLocations(l1))     if (!linkedLocs.contains(l2))     linkedLocs.add(l2);    for (    String l2 : linkedLocs) {      Point2D pt2=envMap.getPosition(l2);      g2.setColor(Color.lightGray);      g2.drawLine(x(pt1),y(pt1),x(pt2),y(pt2));      boolean blockedInEnv=!envMap.getPossibleNextLocations(l2).contains(l1);      boolean blockedInAgent=!aMap.getPossibleNextLocations(l2).contains(l1);      roadblocks.add(new Roadblock(pt1,pt2,blockedInEnv,blockedInAgent));      if (blockedInEnv && blockedInAgent) {        boolean blockedInEnvOtherDir=!envMap.getPossibleNextLocations(l1).contains(l2);        boolean blockedInAgentOtherDir=!aMap.getPossibleNextLocations(l1).contains(l2);        roadblocks.add(new Roadblock(pt2,pt1,blockedInEnvOtherDir,blockedInAgentOtherDir));      }    }  }  for (  Roadblock block : roadblocks)   paintRoadblock(g2,block);}  }
class C{  private int tailingNonNewline(String str,int off,int len){  for (int cnt=0; cnt < len; cnt++) {    final int pos=off + (len - 1) - cnt;    if (str.charAt(pos) == UNIX_NEWLINE) {      return cnt;    }    if (str.charAt(pos) == CARRIAGE_RETURN) {      return cnt;    }  }  return len;}  }
class C{  public void onUndeployed(GridDeployment dep){  ioc.onUndeployed(dep.classLoader());}  }
class C{  public void acquireWriteLock(){  if (readWriteLockMissing()) {    return;  }  lockUtil.acquireLock(readWriteLock.writeLock());}  }
class C{  public Y like(X value){  return add(" like ?",value);}  }
class C{  public CSVTokenizer(java.io.Reader in,boolean numberReadAsString){  super(in);  this.numberReadAsString=numberReadAsString;}  }
class C{  public void testGenerateDocumentationForAllContainers() throws Exception {  Writer writer=new FileWriter(System.getProperty("basedir") + "/target/container-urls.properties");  ContainerFactory factory=new DefaultContainerFactory();  Map<String,Set<ContainerType>> containerIds=factory.getContainerIds();  for (  String containerId : containerIds.keySet()) {    generateDocumentationForContainer(containerId);    String url=this.generator.getContainerServerDownloadUrl(containerId);    if (url != null) {      writer.write("cargo." + containerId + ".url="+ url+ System.getProperty("line.separator"));    }  }  writer.close();}  }
class C{  public void swap(int i,int j){  checkBounds(i);  checkBounds(j);  if (i == j)   return;  copier.copy(tmp,offset(i));  unsafe.copyMemory(null,offset(j),null,offset(i),elementSpacing);  unsafe.copyMemory(tmp,firstFieldOffset,null,offset(j),elementSize);}  }
class C{  public Object clone(){  FloatVectorIndividual myobj=(FloatVectorIndividual)(super.clone());  myobj.genome=(float[])(genome.clone());  if (expression != null)   myobj.expression=new StringBuffer(expression);  return myobj;}  }
class C{  public void addRow(Value value,double prob){  if (prob < 0.0f || prob > 1.02f) {    return;  }  table.put(value,prob);}  }
class C{  public static IStatus createError(Exception e){  return createStatus(IStatus.ERROR,0,e.getLocalizedMessage(),e);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  mScroller.startScroll(startX,startY,dx,dy);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,true);}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  FloatSetting(Properties defaultProps,Properties props,String key,float defaultFloat){  super(defaultProps,props,key,String.valueOf(defaultFloat),false,null,null);}  }
class C{  @DSComment("OutputStreamWrite class") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.587 -0500",hash_original_method="E89503CD667F6DF7A02E3D218DF666E8",hash_generated_method="5472256256B480FB5B4336E5277791E6") @Override public void flush() throws IOException {  flushBytes(true);}  }
class C{  public void myMethod(){  return "";}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  types=null;}  }
class C{  public static void initializeWindowIcons(final Window window){  final ArrayList<Image> imageList=new ArrayList<Image>();  imageList.add(APPICON_16x16);  imageList.add(APPICON_32x32);  imageList.add(APPICON_48x48);  window.setIconImages(imageList);}  }
class C{  public WatermarkGlassPane(){}  }
class C{  public String sign(Map<String,String> params){  params.put("AWSAccessKeyId",this.awsAccessKeyId);  params.put("Timestamp",this.timestamp());  SortedMap<String,String> sortedParamMap=new TreeMap<String,String>(params);  String canonicalQS=this.canonicalize(sortedParamMap);  String toSign=REQUEST_METHOD + "\n" + this.endpoint+ "\n"+ REQUEST_URI+ "\n"+ canonicalQS;  String hmac=this.hmac(toSign);  String sig=this.percentEncodeRfc3986(hmac);  String url="http://" + this.endpoint + REQUEST_URI+ "?"+ canonicalQS+ "&Signature="+ sig;  return url;}  }
class C{  protected void paintIconForVertex(RenderContext<V,E> rc,V v,Layout<V,E> layout){  GraphicsDecorator g=rc.getGraphicsContext();  boolean vertexHit=true;  int[] coords=new int[2];  Shape shape=prepareFinalVertexShape(rc,v,layout,coords);  vertexHit=vertexHit(rc,shape);  if (vertexHit) {    if (rc.getVertexIconTransformer() != null) {      Icon icon=rc.getVertexIconTransformer().apply(v);      if (icon != null) {        g.draw(icon,rc.getScreenDevice(),shape,coords[0],coords[1]);      } else {        paintShapeForVertex(rc,v,shape);      }    } else {      paintShapeForVertex(rc,v,shape);    }  }}  }
class C{  private X509Certificate[] buildTrustedChain(X509Certificate[] chain) throws CertificateException {  List<X509Certificate> c=new ArrayList<X509Certificate>(chain.length);  for (int i=0; i < chain.length; i++) {    X509Certificate cert=chain[i];    X509Certificate trustedCert=getTrustedCertificate(cert);    if (trustedCert != null) {      c.add(trustedCert);      return c.toArray(CHAIN0);    }    c.add(cert);  }  X509Certificate cert=chain[chain.length - 1];  X500Principal subject=cert.getSubjectX500Principal();  X500Principal issuer=cert.getIssuerX500Principal();  List<X509Certificate> list=trustedX500Principals.get(issuer);  if (list != null) {    X509Certificate trustedCert=list.iterator().next();    c.add(trustedCert);    return c.toArray(CHAIN0);  }  throw new ValidatorException(ValidatorException.T_NO_TRUST_ANCHOR);}  }
class C{  public boolean handleTimeout(AbstractMRMessage m,AbstractMRListener l){  return false;}  }
class C{  private void sendException(HeapDataOutputStream buf,Exception e){  if (buf.size() > 0)   buf.reset();  try {    buf.writeByte(ERROR_CHUNK);    DataSerializer.writeObject(e,buf);  } catch (  IOException ioe) {    logger.error("StructStreamingResultSender failed to send the result:",e);    logger.error("StructStreamingResultSender failed to serialize the exception:",ioe);    buf.reset();  }  sender.lastResult(buf.toByteArray());}  }
class C{  @Override protected synchronized void read(long offset,byte[] b) throws IOException {  if (byteBuffer != null) {    byteBuffer.position((int)offset);    byteBuffer.get(b);  } else {    throw new IOException("Read failed, file " + getPath() + " not mapped for I/O");  }}  }
class C{  public String toString(){  int val;  StringBuffer sb=new StringBuffer();  for (int i=0; i < _nDataBytes; i++) {    if (i > 0) {      sb.append(' ');    }    val=_dataBytes[i] & 0xFF;    sb.append(hexChars[val >> 4]);    sb.append(hexChars[val & 0x0F]);  }  return sb.toString();}  }
class C{  static void waitReady(JMXConnectorServerMBean server,int maxTimeInSeconds) throws Exception {  int elapsed=0;  while (!server.isActive() && elapsed < maxTimeInSeconds) {    Thread.sleep(1000);    elapsed++;  }  if (server.isActive()) {    String message="Utils::waitReady: JMX connector server came up";    if (elapsed == 0) {      message+=" immediately";    } else {      message+=" after " + elapsed + " seconds";    }    message+=" [" + server.getAddress() + "]";    Utils.debug(DEBUG_STANDARD,message);  } else {    String message="Utils::waitReady: (ERROR) JMX connector" + " server didn't come up after " + elapsed + " seconds ["+ server.getAddress()+ "]";    System.out.println(message);    throw new RuntimeException(message);  }}  }
class C{  public void addLstore(int n){  if (n < 4)   addOpcode(63 + n); else   if (n < 0x100) {    addOpcode(LSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(LSTORE);    addIndex(n);  }}  }
class C{  public Years negated(){  return Years.years(FieldUtils.safeNegate(getValue()));}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof SingleValueDistribution) {    return ((SingleValueDistribution)o).value.equals(value) && ((SingleValueDistribution)o).variable.equals(variable);  }  return false;}  }
class C{  public boolean isNoTextMode(){  return noTextMode;}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  private HashMap<String,DBIDs> singleAssignment(Relation<?> data){  HashMap<String,DBIDs> labelMap=new HashMap<>();  for (DBIDIter iditer=data.iterDBIDs(); iditer.valid(); iditer.advance()) {    final Object val=data.get(iditer);    String label=(val != null) ? val.toString() : null;    assign(labelMap,label,iditer);  }  return labelMap;}  }
class C{  public ReplDBMSEvent peek(){  return serialQueue.peek();}  }
class C{  public void reserveIds(final IConstraint[] constraints){  if (constraints == null)   return;  for (  IConstraint c : constraints) {    final Iterator<BOp> itr=BOpUtility.preOrderIteratorWithAnnotations(c);    while (itr.hasNext()) {      final BOp y=itr.next();      final Integer anId=(Integer)y.getProperty(BOp.Annotations.BOP_ID);      if (anId != null)       reserve(anId.intValue());    }  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public static String rand(String[] params) throws FBSQLParseException {  if (params.length != 0)   throw new FBSQLParseException("Incorrect number of " + "parameters of function rand : " + params.length);  return "rand()";}  }
class C{  public QuestNotInStateCondition(final String questname,final String state){  this.questname=checkNotNull(questname);  this.index=-1;  this.state=checkNotNull(state);}  }
class C{  public MyGLAutoDrawable(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.972 -0500",hash_original_method="1675CA7AE4DACD4909A19602008CCD7F",hash_generated_method="1831C6AA7DFE31784A7A670410C2977D") private boolean processSetupCall(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process SetupCall");  Iterator<ComprehensionTlv> iter=ctlvs.iterator();  ComprehensionTlv ctlv=null;  TextMessage confirmMsg=new TextMessage();  TextMessage callMsg=new TextMessage();  IconId confirmIconId=null;  IconId callIconId=null;  ctlv=searchForNextTag(ComprehensionTlvTag.ALPHA_ID,iter);  confirmMsg.text=ValueParser.retrieveAlphaId(ctlv);  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    confirmIconId=ValueParser.retrieveIconId(ctlv);    confirmMsg.iconSelfExplanatory=confirmIconId.selfExplanatory;  }  ctlv=searchForNextTag(ComprehensionTlvTag.ALPHA_ID,iter);  if (ctlv != null) {    callMsg.text=ValueParser.retrieveAlphaId(ctlv);  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    callIconId=ValueParser.retrieveIconId(ctlv);    callMsg.iconSelfExplanatory=callIconId.selfExplanatory;  }  mCmdParams=new CallSetupParams(cmdDet,confirmMsg,callMsg);  if (confirmIconId != null || callIconId != null) {    mIconLoadState=LOAD_MULTI_ICONS;    int[] recordNumbers=new int[2];    recordNumbers[0]=confirmIconId != null ? confirmIconId.recordNumber : -1;    recordNumbers[1]=callIconId != null ? callIconId.recordNumber : -1;    mIconLoader.loadIcons(recordNumbers,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  @Override public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public BedWriter(OutputStream out){  if (out == null) {    throw new NullPointerException("output stream cannot be null");  }  mOut=out;}  }
class C{  @Override protected Controller lookupDeviceController(DiscoveredSystemObject device) throws ControllerException {  if (device == null) {    throw ClientControllerException.fatals.unableToLookupStorageDeviceIsNull();  }  BlockController bc=_deviceImpl.iterator().next();  if (bc == null) {    throw ClientControllerException.fatals.unableToLocateDeviceController("BlockController");  }  return bc;}  }
class C{  @Bean public ClientDetailsService clientDetailsService() throws Exception {  return combinedService_;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_listenee == null) {    return true;  }  return false;}  }
class C{  @Override public void put(String name,byte value){  emulatedFields.put(name,value);}  }
class C{  public static int findNthUnescaped(char charToFind,int n,String s){  char[] charArray=s.toCharArray();  int count=0;  for (int i=0; i < charArray.length; ++i) {    if (i > 0 && charArray[i - 1] == '\\')     continue;    if (charArray[i] == charToFind) {      if (++count == n) {        return i;      }    }  }  return -1;}  }
class C{  public ImportFolderCollection(final ImportOptions importOptions){  super();  this.importOptions=importOptions;}  }
class C{  @Benchmark public long test3_UsingForEachAndJava8() throws IOException {  final long[] i={0};  map.forEach(null);  return i[0];}  }
class C{  protected LinesToCharsResult diff_wordsToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_wordsToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_wordsToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  public static ArrayList<Instruction> createDeepCopyInstructionSet(ArrayList<Instruction> instSet,long pid,int IDPrefix,Program prog,HashSet<String> fnStack,HashSet<String> fnCreated,boolean plain,boolean cpFunctions) throws DMLRuntimeException {  ArrayList<Instruction> tmp=new ArrayList<Instruction>();  for (  Instruction inst : instSet) {    if (inst instanceof FunctionCallCPInstruction && cpFunctions) {      FunctionCallCPInstruction finst=(FunctionCallCPInstruction)inst;      createDeepCopyFunctionProgramBlock(finst.getNamespace(),finst.getFunctionName(),pid,IDPrefix,prog,fnStack,fnCreated,plain);    }    tmp.add(cloneInstruction(inst,pid,plain,cpFunctions));  }  return tmp;}  }
class C{  private void score(double[][] matrix){  double precisionA=matrix[0][0] / (matrix[0][0] + matrix[1][0] + matrix[2][0]);  double precisionB=matrix[1][1] / (matrix[1][1] + matrix[2][1] + matrix[0][1]);  double precisionC=matrix[2][2] / (matrix[2][2] + matrix[0][2] + matrix[1][2]);  double precision=(precisionA + precisionB + precisionC) / 3;  double recallA=matrix[0][0] / (matrix[0][0] + matrix[0][1] + matrix[0][2]);  double recallB=matrix[1][1] / (matrix[1][1] + matrix[1][2] + matrix[1][0]);  double recallC=matrix[2][2] / (matrix[2][2] + matrix[2][0] + matrix[2][1]);  double recall=(recallA + recallB + recallC) / 3;  double f1=2 * ((precision * recall) / (precision + recall));  double f1A=2 * ((precisionA * recallA) / (precisionA + recallA));  double f1C=2 * ((precisionC * recallC) / (precisionC + recallC));  System.out.println("precision: " + precision);  System.out.println("recall: " + recall);  System.out.println("f1: " + f1);  System.out.println("f1 without neutral: " + (f1A + f1C) / 2);}  }
class C{  public void validateUpdate(String oldPassword,String password) throws Exception {  PasswordUpdateParam input=new PasswordUpdateParam();  input.setOldPassword(oldPassword);  input.setPassword(password);  client.post(input,VALIDATE_PASSWORD_UPDATE_URL);}  }
class C{  public void test_encode_decode_1bits_pid1_ctr1(){  doEncodeDecodeTest(new TermIdEncoder(1),1,1);}  }
class C{  public GzipAsynchInputStream(File file) throws IOException {  this(file,DEFAULT_PIPE_SIZE,DEFAULT_GZIP_BUFFER_SIZE);}  }
class C{  @Override protected void layoutChildren(double x,double y,double w,double h){  super.layoutChildren(x,y,w,h);  if (isExpanded())   getContent().resizeRelocate(0.0,tableRowPrefHeight,w,h - tableRowPrefHeight);}  }
class C{  public BufferRecycler _getBufferRecycler(){  SoftReference<BufferRecycler> ref=_recyclerRef.get();  BufferRecycler br=(ref == null) ? null : ref.get();  if (br == null) {    br=new BufferRecycler();    if (ref == null) {      _recyclerRef.set(new SoftReference<BufferRecycler>(br));    }  }  return br;}  }
class C{  @Override public String randomKey(){  checkIsInMultiOrPipeline();  client.randomKey();  return client.getBulkReply();}  }
class C{  private ProcessingItem createPi(Processor processor,int parallelism){  ProcessingItem pi=this.componentFactory.createPi(processor,parallelism);  this.topology.addProcessingItem(pi,parallelism);  return pi;}  }
class C{  public MatrixObject[] extractOutputMatrices(ExecutionContext ec) throws DMLRuntimeException {  outputMatrices=new MatrixObject[getOutputVars().length];  int ind=0;  for (  String oo : getOutputVars()) {    Data d=ec.getVariable(oo);    if (d.getDataType() == DataType.MATRIX) {      outputMatrices[ind++]=(MatrixObject)d;    } else {      throw new DMLRuntimeException(getJobType() + ": invalid datatype (" + d.getDataType()+ ") for output variable "+ oo);    }  }  populateOutputs();  return outputMatrices;}  }
class C{  @SafeVarargs public static <Type>Constraint<Type> conjunctive(@NonNull final Constraint<Type>... constraints){  return ConjunctiveConstraint.create(constraints);}  }
class C{  public synchronized void mouseWheel(int wheelAmt){  peer.mouseWheel(wheelAmt);  afterEvent();}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  protected static void assertRegionAttributes(RegionAttributes regAttrs,RegionAttributesData data){  String compressorClassName=null;  if (regAttrs.getCompressor() != null) {    compressorClassName=regAttrs.getCompressor().getClass().getCanonicalName();  }  assertEquals(compressorClassName,data.getCompressorClassName());  String cacheLoaderClassName=null;  if (regAttrs.getCacheLoader() != null) {    cacheLoaderClassName=regAttrs.getCacheLoader().getClass().getCanonicalName();  }  assertEquals(cacheLoaderClassName,data.getCacheLoaderClassName());  String cacheWriteClassName=null;  if (regAttrs.getCacheWriter() != null) {    cacheWriteClassName=regAttrs.getCacheWriter().getClass().getCanonicalName();  }  assertEquals(cacheWriteClassName,data.getCacheWriterClassName());  String keyConstraintClassName=null;  if (regAttrs.getKeyConstraint() != null) {    keyConstraintClassName=regAttrs.getKeyConstraint().getName();  }  assertEquals(keyConstraintClassName,data.getKeyConstraintClassName());  String valueContstaintClassName=null;  if (regAttrs.getValueConstraint() != null) {    valueContstaintClassName=regAttrs.getValueConstraint().getName();  }  assertEquals(valueContstaintClassName,data.getValueConstraintClassName());  CacheListener[] listeners=regAttrs.getCacheListeners();  if (listeners != null) {    String[] value=data.getCacheListeners();    for (int i=0; i < listeners.length; i++) {      assertEquals(value[i],listeners[i].getClass().getName());    }  }  int regionTimeToLive=regAttrs.getRegionTimeToLive().getTimeout();  assertEquals(regionTimeToLive,data.getRegionTimeToLive());  int regionIdleTimeout=regAttrs.getRegionIdleTimeout().getTimeout();  assertEquals(regionIdleTimeout,data.getRegionIdleTimeout());  int entryTimeToLive=regAttrs.getEntryTimeToLive().getTimeout();  assertEquals(entryTimeToLive,data.getEntryTimeToLive());  int entryIdleTimeout=regAttrs.getEntryIdleTimeout().getTimeout();  assertEquals(entryIdleTimeout,data.getEntryIdleTimeout());  String customEntryTimeToLive=null;  Object o1=regAttrs.getCustomEntryTimeToLive();  if (o1 != null) {    customEntryTimeToLive=o1.toString();  }  assertEquals(customEntryTimeToLive,data.getCustomEntryTimeToLive());  String customEntryIdleTimeout=null;  Object o2=regAttrs.getCustomEntryIdleTimeout();  if (o2 != null) {    customEntryIdleTimeout=o2.toString();  }  assertEquals(customEntryIdleTimeout,data.getCustomEntryIdleTimeout());  boolean ignoreJTA=regAttrs.getIgnoreJTA();  assertEquals(ignoreJTA,data.isIgnoreJTA());  String dataPolicy=regAttrs.getDataPolicy().toString();  assertEquals(dataPolicy,data.getDataPolicy());  String scope=regAttrs.getScope().toString();  assertEquals(scope,data.getScope());  int initialCapacity=regAttrs.getInitialCapacity();  assertEquals(initialCapacity,data.getInitialCapacity());  float loadFactor=regAttrs.getLoadFactor();  assertEquals(loadFactor,data.getLoadFactor(),0);  boolean lockGrantor=regAttrs.isLockGrantor();  assertEquals(lockGrantor,data.isLockGrantor());  boolean multicastEnabled=regAttrs.getMulticastEnabled();  assertEquals(multicastEnabled,data.isMulticastEnabled());  int concurrencyLevel=regAttrs.getConcurrencyLevel();  assertEquals(concurrencyLevel,data.getConcurrencyLevel());  boolean indexMaintenanceSynchronous=regAttrs.getIndexMaintenanceSynchronous();  assertEquals(indexMaintenanceSynchronous,data.isIndexMaintenanceSynchronous());  boolean statisticsEnabled=regAttrs.getStatisticsEnabled();  assertEquals(statisticsEnabled,data.isStatisticsEnabled());  boolean subsciptionConflationEnabled=regAttrs.getEnableSubscriptionConflation();  assertEquals(subsciptionConflationEnabled,data.isSubscriptionConflationEnabled());  boolean asyncConflationEnabled=regAttrs.getEnableAsyncConflation();  assertEquals(asyncConflationEnabled,data.isAsyncConflationEnabled());  String poolName=regAttrs.getPoolName();  assertEquals(poolName,data.getPoolName());  boolean isCloningEnabled=regAttrs.getCloningEnabled();  assertEquals(isCloningEnabled,data.isCloningEnabled());  String diskStoreName=regAttrs.getDiskStoreName();  assertEquals(diskStoreName,data.getDiskStoreName());  String interestPolicy=null;  if (regAttrs.getSubscriptionAttributes() != null) {    interestPolicy=regAttrs.getSubscriptionAttributes().getInterestPolicy().toString();  }  assertEquals(interestPolicy,data.getInterestPolicy());  boolean diskSynchronus=regAttrs.isDiskSynchronous();  assertEquals(diskSynchronus,data.isDiskSynchronous());}  }
class C{  @Description(summary="Run the spellchecker.") public void spellcheck(){  java("org.h2.build.doc.SpellChecker",null);}  }
class C{  private double normalize(int d,double val){  return (val - median[d]) * imadsigma[d];}  }
class C{  public void unsetIsConcurrent(){  this.isConcurrent=null;}  }
class C{  private void checkTxsEmpty(GridCacheContext ctx){  Collection txs=ctx.tm().txs();  assert txs.isEmpty() : "Not all transactions were salvaged: " + txs;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private static long offset(long position,int level){  return position >>> level;}  }
class C{  public final boolean isMarried(){  return !chains.isEmpty() && getActiveKeyChain().isMarried();}  }
class C{  public boolean isReady(){  boolean hasEffects=false;  for (  PostProcessorEffect e : effectsManager) {    if (e.isEnabled()) {      hasEffects=true;      break;    }  }  return (enabled && !capturing && hasEffects);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testPingPerformance() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(3000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  String[] methods={HostAddressService.DEFAULT,HostAddressService.PING};  int count=100;  for (int i=0; i < methods.length; i++) {    String method=methods[i];    long startMillis=System.currentTimeMillis();    for (int j=0; j < count; j++) {      PingResponse response=has.isReachableByMethod(method,address);      assertTrue("Can ping localhost: method=" + method + " iteration="+ j,response.isReachable());    }    double duration=(System.currentTimeMillis() - startMillis) / 1000.0;    logger.info("Completed ping using method: name=" + method + " pings="+ count+ " duration="+ duration);  }}  }
class C{  public EntityQuery having(EntityCondition entityCondition){  this.havingEntityCondition=entityCondition;  return this;}  }
class C{  public DenseDoubleMatrix1D(int size){  setUp(size);  this.elements=new double[size];}  }
class C{  public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  public PointPair(){  this(new Point(0,0),new Point(0,0));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__COMMENT_1:    getComment_1().clear();  return;case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__STATE_1:getState_1().clear();return;case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__TRACE_1:getTrace_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void testCleanStart(){  IMqttAsyncClient mqttClient=null;  IMqttToken connectToken;  IMqttToken subToken;  IMqttDeliveryToken pubToken;  IMqttToken disconnectToken;  String methodName="testCleanStart";  try {    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testCleanStart");    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    MqttConnectOptions mqttConnectOptions=new MqttConnectOptions();    mqttConnectOptions.setCleanSession(false);    connectToken=mqttClient.connect(mqttConnectOptions,null,null);    connectToken.waitForCompletion(waitForCompletionTime);    String[] topicNames=new String[]{methodName + "/Topic"};    int[] topicQos={0};    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    byte[] payload=("Message payload " + classCanonicalName + "."+ methodName+ " First").getBytes();    pubToken=mqttClient.publish(topicNames[0],payload,1,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    boolean ok=mqttV3Receiver.validateReceipt(topicNames[0],0,payload);    if (!ok) {      fail("Receive failed");    }    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    mqttClient.close();    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testCleanStart" + "Other");    mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    mqttConnectOptions=new MqttConnectOptions();    mqttConnectOptions.setCleanSession(true);    connectToken=mqttClient.connect(mqttConnectOptions,null,null);    connectToken.waitForCompletion(waitForCompletionTime);    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    payload=("Message payload " + classCanonicalName + "."+ methodName+ " Other client").getBytes();    pubToken=mqttClient.publish(topicNames[0],payload,1,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    ok=mqttV3Receiver.validateReceipt(topicNames[0],0,payload);    if (!ok) {      fail("Receive failed");    }    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    mqttClient.close();    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testCleanStart");    mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    mqttConnectOptions=new MqttConnectOptions();    mqttConnectOptions.setCleanSession(true);    connectToken=mqttClient.connect(mqttConnectOptions,null,null);    connectToken.waitForCompletion(waitForCompletionTime);    MqttV3Receiver.ReceivedMessage receivedMessage=mqttV3Receiver.receiveNext(100);    if (receivedMessage != null) {      fail("Receive messaqe:" + new String(receivedMessage.message.getPayload()));    }    payload=("Message payload " + classCanonicalName + "."+ methodName+ " Cancelled Subscription").getBytes();    pubToken=mqttClient.publish(topicNames[0],payload,1,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    receivedMessage=mqttV3Receiver.receiveNext(100);    if (receivedMessage != null) {      fail("Receive messaqe:" + new String(receivedMessage.message.getPayload()));    }  } catch (  Exception exception) {    fail("Failed:" + methodName + " exception="+ exception);  } finally {    try {      disconnectToken=mqttClient.disconnect(null,null);      disconnectToken.waitForCompletion(waitForCompletionTime);      mqttClient.close();    } catch (    Exception exception) {    }  }}  }
class C{  static StringBuilder appendQuotedString(StringBuilder target,String key){  target.append('"');  for (int i=0, len=key.length(); i < len; i++) {    char ch=key.charAt(i);switch (ch) {case '\n':      target.append("%0A");    break;case '\r':  target.append("%0D");break;case '"':target.append("%22");break;default :target.append(ch);break;}}target.append('"');return target;}  }
class C{  private MethodReturn handleUncacheableOperation() throws Exception {  ResourceStateHandler resourceStateHandler=ResourceStateConfig.getResourceStateHandler();  ResourceState resourceState=resourceStateHandler.get(key);  MethodReturn ret=null;  if (resourceMethod.getHttpMethod().equals(HttpMethod.GET) && resourceState != null && resourceState.isExpired()) {    ret=resourceMethod.doInvoke(request,response);    if (ret.getCheckedExceptionData() == null) {      updateState(request.getUri(),ret);      resourceState=resourceStateHandler.get(key);    } else {      resourceStateHandler.remove(key);      resourceState=null;    }  }  ConditionalResponse conditionalResponse=evaluatePreconditions(resourceState);  if (conditionalResponse == null) {    return ret;  }  return new MethodReturn(resourceMethod.hasReturnType,null,null,resourceMethod.cacheInfo,conditionalResponse,resourceMethod.isEtagGenerationEnabled());}  }
class C{  public String prepareTable(List<MBrowseField> fields,boolean multiSelection){  browserRows=new WBrowserRows(this);  StringBuffer sql=new StringBuffer("");  m_multiSelection=multiSelection;  clearColumns();  setLayout(fields);  int col=0;  for (  MBrowseField field : fields) {    MViewColumn columnView=field.getAD_View_Column();    if (col > 0 && columnView.getColumnSQL().length() > 0)     sql.append(", ");    if (field.isKey()) {      setKey(col);      field.setName("#");    }    sql.append(columnView.getColumnSQL()).append(" ").append("AS").append(" ").append(columnView.getColumnName());    browserRows.addBrowserField(field,col);    if (field.isDisplayed()) {      addColumn(field.get_ValueAsString(I_AD_Browse_Field.COLUMNNAME_Name));      col++;    }  }  col=0;  for (  MBrowseField field : fields) {    if (field.isDisplayed()) {      setColumnClass(col,MBrowseField.createGridFieldVO(field,browser.getWindowNo()),field.getAD_Reference_ID(),field.isReadOnly(),field.get_ValueAsString(I_AD_Browse_Field.COLUMNNAME_Name));      col++;    }  }  return sql.toString();}  }
class C{  public EcuDataItems(String pidResource,String conversionResource){  cnv=new EcuConversions(conversionResource);  loadFromResource(pidResource);}  }
class C{  public PostgresFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth,String hostname,String dbName,String username,String password) throws BlockStoreException {  this.params=params;  this.fullStoreDepth=fullStoreDepth;  connectionURL="jdbc:postgresql://" + hostname + "/"+ dbName;  this.username=username;  this.password=password;  conn=new ThreadLocal<Connection>();  allConnections=new LinkedList<Connection>();  try {    Class.forName(driver);    log.info(driver + " loaded. ");  } catch (  java.lang.ClassNotFoundException e) {    log.error("check CLASSPATH for Postgres jar ",e);  }  maybeConnect();  try {    if (!tableExists("settings"))     createTables();    initFromDatabase();  } catch (  SQLException e) {    throw new BlockStoreException(e);  }}  }
class C{  static long makeId(SnmpOid oid){  long id=0;  long[] arcs=oid.longValue(false);  id|=arcs[0] << 56;  id|=arcs[1] << 48;  id|=arcs[2] << 40;  id|=arcs[3] << 32;  id|=arcs[4] << 24;  id|=arcs[5] << 16;  id|=arcs[6] << 8;  id|=arcs[7];  return id;}  }
class C{  public static URI zipFiles(List<URI> inFiles,String outFileName) throws Exception {  byte[] buffer=new byte[4096];  int bytes_read;  File zipFile=File.createTempFile(outFileName,".zip",null);  ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipFile));  try {    for (    URI file : inFiles) {      File f=new File(file);      if (f.isDirectory()) {        throw new IllegalArgumentException("can't compress a directory:  " + f);      }      FileInputStream in=new FileInputStream(f);      ZipEntry entry=new ZipEntry(f.getName());      out.putNextEntry(entry);      while ((bytes_read=in.read(buffer)) != -1) {        out.write(buffer,0,bytes_read);      }      try {        in.close();      } catch (      IOException ignore) {      }    }  }  finally {    try {      out.close();    } catch (    IOException ignore) {    }  }  Logger.getAnonymousLogger().info(String.format("backup written to %s (bytes:%s md5sum:%s)",zipFile,zipFile.length(),md5sum(zipFile)));  return zipFile.toURI();}  }
class C{  public static double gammaOfArgOn2Plus1IncludeDivisor(int d,double divisor){  if (d % 2 == 0) {    return factorialAsDoubleIncludeDivisor(d / 2,divisor);  } else {    return doubleFactorialAsDoublewithDivisor(d,divisor * Math.pow(2,((double)(d + 1)) / 2.0) / Math.sqrt(Math.PI));  }}  }
class C{  public HashCodeBuilder append(final long[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final long element : array) {      append(element);    }  }  return this;}  }
class C{  public ccQuad3 originalTile(ccGridSize pos){  CCTiledGrid3D g=(CCTiledGrid3D)target.getGrid();  return g.originalTile(pos);}  }
class C{  private static List universalRemove(Object toRemove,Hashtable directContainer,Hashtable invertedContainer){  List keys=(List)directContainer.remove(toRemove);  if (keys != null) {    for (int i=0; i < keys.size(); i++) {      Object key=keys.get(i);      List values=(List)invertedContainer.get(key);      if (values == null || !values.contains(toRemove)) {        throw new RuntimeException("DoubleHashtable integrity violated");      } else {        values.remove(toRemove);      }    }  }  return keys;}  }
class C{  public double pace(double f){  return 2 * (f <= 0.5 ? f : (1 - f));}  }
class C{  public DOMX509Data(List<?> content){  if (content == null) {    throw new NullPointerException("content cannot be null");  }  List<Object> contentCopy=new ArrayList<Object>(content);  if (contentCopy.isEmpty()) {    throw new IllegalArgumentException("content cannot be empty");  }  for (int i=0, size=contentCopy.size(); i < size; i++) {    Object x509Type=contentCopy.get(i);    if (x509Type instanceof String) {      new X500Principal((String)x509Type);    } else     if (!(x509Type instanceof byte[]) && !(x509Type instanceof X509Certificate) && !(x509Type instanceof X509CRL)&& !(x509Type instanceof XMLStructure)) {      throw new ClassCastException("content[" + i + "] is not a valid X509Data type");    }  }  this.content=Collections.unmodifiableList(contentCopy);}  }
class C{  public static void print(PrintStream self,Object value){  self.print(InvokerHelper.toString(value));}  }
class C{  public boolean isNeedsToBeExpanded(){  return needsToBeExpanded;}  }
class C{  public Spinner(@NonNull final Context context,@Nullable final AttributeSet attributeSet){  super(context,attributeSet);  initialize(attributeSet);}  }
class C{  private static boolean isCompatible(Lop node,JobType jt){  if (jt == JobType.GMRCELL)   jt=JobType.GMR;  return ((node.getCompatibleJobs() & jt.getBase()) > 0);}  }
class C{  public Builder withStorage(Storage storage){  this.storage=Assert.notNull(storage,"storage");  return this;}  }
class C{  public boolean equals(Object anObj){  if (anObj == null) {    return false;  }  if (anObj.getClass() == this.getClass()) {    Position pos=(Position)anObj;    if ((pos.mktValue != this.mktValue) || (pos.qty != this.qty)) {      return false;    }    if (pos.secId == null) {      if (this.secId != null) {        return false;      }    } else {      if (!(pos.secId.equals(this.secId))) {        return false;      }    }  } else {    return false;  }  return true;}  }
class C{  private Double lookupRate(String sourceCurrencyCode,String targetCurrencyCode){  Map<String,Double> rhs=rates.get(sourceCurrencyCode);  if (rhs != null) {    return rhs.get(targetCurrencyCode);  }  return null;}  }
class C{  @Override public void onBindViewHolder(AnswerViewHolder holder,int position){  Answer answer=mAnswers.get(position);  holder.bindAnswer(answer.getText());}  }
class C{  private boolean roleConflict(OsmElement o1,OsmElement o2){  ArrayList<Relation> r1=o1.getParentRelations() != null ? o1.getParentRelations() : new ArrayList<Relation>();  ArrayList<Relation> r2=o2.getParentRelations() != null ? o2.getParentRelations() : new ArrayList<Relation>();  for (  Relation r : r1) {    if (r2.contains(r)) {      RelationMember rm1=r.getMember(o1);      RelationMember rm2=r.getMember(o2);      if (rm1 != null && rm2 != null) {        String role1=rm1.getRole();        String role2=rm2.getRole();        if ((role1 != null && role2 == null) || (role1 == null && role2 != null) || (role1 != role2 && !role1.equals(role2))) {          Log.d(DEBUG_TAG,"role conflict between " + o1.getDescription() + " role "+ role1+ " and "+ o2.getDescription()+ " role "+ role2);          return true;        }      } else {        Log.d(DEBUG_TAG,"inconsistent relation membership in " + r.getOsmId() + " for "+ o1.getOsmId()+ " and "+ o2.getOsmId());        ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");        ACRA.getErrorReporter().handleException(null);        return true;      }    }  }  return false;}  }
class C{  public void testCertStore01(){  if (!LDAPSupport) {    return;  }  String dt=CertStore.getDefaultType();  String sn=Security.getProperty("certstore.type");  String def="Proba.cert.store.type";  if (sn == null) {    sn=defaultType;  }  assertNotNull("Default type have not be null",dt);  assertEquals("Incorrect default type",dt,sn);  Security.setProperty("certstore.type",def);  dt=CertStore.getDefaultType();  assertEquals("Incorrect default type",dt,def);  Security.setProperty("certstore.type",sn);  assertEquals("Incorrect default type",Security.getProperty("certstore.type"),sn);}  }
class C{  public void translateFromSSA(IR ir){  unSSAGuards(ir);  LTDominators.perform(ir,true,true);  DominatorTree dom=new DominatorTree(ir,true);  LiveAnalysis live=new LiveAnalysis(false,true,false,false);  live.perform(ir);  VariableStacks s=new VariableStacks();  BasicBlock b=((DominatorTreeNode)dom.getRoot()).getBlock();  insertCopies(b,dom,live);  if (splitSomeBlock) {    LTDominators.perform(ir,true,true);    dom=new DominatorTree(ir,true);  }  performRename(b,dom,s);  removeAllPhis(ir);}  }
class C{  public static final boolean isASCII(BufferedReader buffer) throws IOException {  final char[] readAhead=new char[300];  buffer.mark(readAhead.length);  buffer.read(readAhead,0,readAhead.length);  buffer.reset();  final String readAheadString=new String(readAhead);  if (readAheadString.contains("facet normal") && readAheadString.contains("outer loop"))   return true;  return false;}  }
class C{  public static Workbook createExcel(List<String> keyList,Map<String,ResourceBundle> defaultProperties,Map<String,Properties> localizedProperties,Workbook wb,String sheetName,List<Locale> locales){  if (wb == null) {    wb=new HSSFWorkbook();  }  String sheetNameForDisplay=getDefaultResourceBundle().getString(sheetName);  Sheet sheet=wb.getSheet(sheetNameForDisplay);  if (sheet == null) {    sheet=wb.createSheet(sheetNameForDisplay);    CellStyle styleTitle=initializeSheet(wb,sheet);    List<String> localeList=createFirstRow(sheetName,locales,sheet,styleTitle);    createRows(keyList,defaultProperties,localizedProperties,sheet,localeList,sheetName);  }  return wb;}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  return getGraph().isAmbiguousTriple(x,y,z);}  }
class C{  public Builder maxOperationRetries(int maxOperationRetries){  this.maxOperationRetries=maxOperationRetries;  return this;}  }
class C{  public boolean supportsDataDefinitionAndDataManipulationTransactions() throws SQLException {  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("Cancel")) {    setVisible(false);    value=null;  } else   if (cmd.equals("Select")) {    if (list.getSelectedIndex() < 0) {      return;    }    try {      value=(String)list.getSelectedValue();    } catch (    ArrayIndexOutOfBoundsException exc) {      return;    }    setVisible(false);    Dim.FunctionSource item=debugGui.dim.functionSourceByName(value);    if (item != null) {      Dim.SourceInfo si=item.sourceInfo();      String url=si.url();      int lineNumber=item.firstLine();      debugGui.showFileWindow(url,lineNumber);    }  }}  }
class C{  @Override public GraphProjection<G,V,E> createGraph(G delegate){  return new GraphProjection<G,V,E>(delegate);}  }
class C{  public void execute(final Runnable runnable){  new Thread(runnable).start();}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  public void testConfigGuess1() throws Exception {  CSVConfig expected=new CSVConfig();  expected.setDelimiter(';');  expected.setValueDelimiter(' ');  expected.setFill(CSVConfig.FILLRIGHT);  expected.setIgnoreValueDelimiter(false);  expected.setFixedWidth(true);  CSVField field=new CSVField();  field.setSize(4);  expected.addField(field);  expected.addField(field);  StringBuilder sb=new StringBuilder();  sb.append("1234;abcd;1234\n");  sb.append("abcd;1234;abcd");  ByteArrayInputStream in=new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8));  CSVConfigGuesser guesser=new CSVConfigGuesser(in);  CSVConfig guessed=guesser.guess();  assertEquals(expected.isFixedWidth(),guessed.isFixedWidth());  assertEquals(expected.getFields().length,guessed.getFields().length);  assertEquals(expected.getFields()[0].getSize(),guessed.getFields()[0].getSize());}  }
class C{  public static void writeFile(IFile file,final FileOutput output,IProgressMonitor monitor) throws CoreException {  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    output.writeFile(bos);    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    if (!file.exists()) {      mkdirs(file,monitor);      file.create(bis,true,monitor);    } else {      file.setContents(bis,true,false,monitor);    }  } catch (  IOException e) {    IStatus status=FindbugsPlugin.createErrorStatus("Exception while " + output.getTaskDescription(),e);    throw new CoreException(status);  }}  }
class C{  public boolean isFailure(){  return failureMessage != null;}  }
class C{  private VarSymbol makeSyntheticVar(long flags,String name,Type type,Symbol owner){  return makeSyntheticVar(flags,names.fromString(name),type,owner);}  }
class C{  public Builder withVoted(boolean voted){  response.voted=voted;  return this;}  }
class C{  public OptionSet clearIfMatchs(){  getIfMatch().clear();  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoVolRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_repId = ").append(m_repId);  buffer.append(", m_info = ").append(m_info);  buffer.append(", m_actSize = ").append(m_actSize);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  private void paintComponentWrapped(Graphics g){  RTextAreaUI ui=(RTextAreaUI)textArea.getUI();  View v=ui.getRootView(textArea).getView(0);  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  int lineCount=root.getElementCount();  int topPosition=textArea.viewToModel(new Point(visibleRect.x,visibleRect.y));  int topLine=root.getElementIndex(topPosition);  Rectangle visibleEditorRect=ui.getVisibleEditorRect();  Rectangle r=IconRowHeader.getChildViewBounds(v,topLine,visibleEditorRect);  int y=r.y;  int visibleBottom=visibleRect.y + visibleRect.height;  int currentIcon=-1;  if (trackingIcons != null) {    for (int i=0; i < trackingIcons.size(); i++) {      GutterIconImpl icon=getTrackingIcon(i);      int offs=icon.getMarkedOffset();      if (offs >= 0 && offs <= doc.getLength()) {        int line=root.getElementIndex(offs);        if (line >= topLine) {          currentIcon=i;          break;        }      }    }  }  g.setColor(getForeground());  int cellHeight=textArea.getLineHeight();  while (y < visibleBottom) {    r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);    if (currentIcon > -1) {      GutterIconImpl toPaint=null;      while (currentIcon < trackingIcons.size()) {        GutterIconImpl ti=getTrackingIcon(currentIcon);        int offs=ti.getMarkedOffset();        if (offs >= 0 && offs <= doc.getLength()) {          int line=root.getElementIndex(offs);          if (line == topLine) {            toPaint=ti;          } else           if (line > topLine) {            break;          }        }        currentIcon++;      }      if (toPaint != null) {        Icon icon=toPaint.getIcon();        if (icon != null) {          int y2=y + (cellHeight - icon.getIconHeight()) / 2;          icon.paintIcon(this,g,0,y2);        }      }    }    y+=r.height;    topLine++;    if (topLine >= lineCount)     break;  }}  }
class C{  public static String findUnit(Long size,String unit){  long sizeInBytes=translateSizeToBytes(size,unit);  if (sizeInBytes >= 1073741824 && sizeInBytes % 1073741824 == 0)   return SIZE_GB; else   if (sizeInBytes >= 1048576 && sizeInBytes % 1048576 == 0)   return SIZE_MB; else   if (sizeInBytes >= 1024 && sizeInBytes % 1024 == 0)   return SIZE_KB; else   return SIZE_B;}  }
class C{  public void encrypt(int[] inbuffer,int[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(inbuffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  @SuppressWarnings("unchecked") public static <E>void serialize(E object,ParameterizedType<E> parameterizedType,OutputStream os) throws IOException {  mapperFor(parameterizedType).serialize(object,os);}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  private NSObject parseData() throws ParseException {  NSObject obj=null;  skip();  if (accept(DATA_GSOBJECT_BEGIN_TOKEN)) {    skip();    expect(DATA_GSBOOL_BEGIN_TOKEN,DATA_GSDATE_BEGIN_TOKEN,DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN);    if (accept(DATA_GSBOOL_BEGIN_TOKEN)) {      skip();      expect(DATA_GSBOOL_TRUE_TOKEN,DATA_GSBOOL_FALSE_TOKEN);      if (accept(DATA_GSBOOL_TRUE_TOKEN)) {        obj=new NSNumber(true);      } else {        obj=new NSNumber(false);      }      skip();    } else     if (accept(DATA_GSDATE_BEGIN_TOKEN)) {      skip();      String dateString=readInputUntil(DATA_END_TOKEN);      obj=new NSDate(dateString);    } else     if (accept(DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN)) {      skip();      String numberString=readInputUntil(DATA_END_TOKEN);      obj=new NSNumber(numberString);    }    read(DATA_END_TOKEN);  } else {    String dataString=readInputUntil(DATA_END_TOKEN);    dataString=dataString.replaceAll("\\s+","");    int numBytes=dataString.length() / 2;    byte[] bytes=new byte[numBytes];    for (int i=0; i < bytes.length; i++) {      String byteString=dataString.substring(i * 2,i * 2 + 2);      int byteValue=Integer.parseInt(byteString,16);      bytes[i]=(byte)byteValue;    }    obj=new NSData(bytes);    skip();  }  return obj;}  }
class C{  public void transpose(){  for (int i=0; i < 3; ++i) {    for (int j=i + 1; j < 4; ++j) {      float temp=mMat[i * 4 + j];      mMat[i * 4 + j]=mMat[j * 4 + i];      mMat[j * 4 + i]=temp;    }  }}  }
class C{  public void init(BitVector bv){  this.word=bv.word;  this.wd=0;  this.bit=0;  this.mask=1L;}  }
class C{  public WeakReference(T r){  super(r,null);}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"dec");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not an dec instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final String loadedRegister=result.getRegister();  final OperandSize registerSize=result.getSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(registerSize);  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(registerSize));  final String shiftMsbLsbMask=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(registerSize));  final String truncMask=String.valueOf(TranslationHelpers.getAllBitsMask(registerSize));  final String maskedMsb=environment.getNextVariableString();  final String decResult=environment.getNextVariableString();  final String maskedMsbResult=environment.getNextVariableString();  final String maskedMsbNeg=environment.getNextVariableString();  final String tempOF=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,registerSize,loadedRegister,registerSize,msbMask,registerSize,maskedMsb));  instructions.add(ReilHelpers.createSub(offset + 1,registerSize,loadedRegister,registerSize,"1",nextSize,decResult));  instructions.add(ReilHelpers.createAnd(offset + 2,nextSize,decResult,registerSize,msbMask,registerSize,maskedMsbResult));  instructions.add(ReilHelpers.createBsh(offset + 3,registerSize,maskedMsbResult,registerSize,shiftMsbLsbMask,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 4,registerSize,maskedMsbResult,registerSize,msbMask,registerSize,maskedMsbNeg));  instructions.add(ReilHelpers.createAnd(offset + 5,registerSize,maskedMsb,registerSize,maskedMsbNeg,registerSize,tempOF));  instructions.add(ReilHelpers.createBsh(offset + 6,registerSize,tempOF,registerSize,shiftMsbLsbMask,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 7,nextSize,decResult,registerSize,truncMask,registerSize,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 8,registerSize,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 9,operand,truncatedResult,registerSize,result.getAddress(),result.getType(),instructions);}  }
class C{  public void dragGestureRecognized(DragGestureEvent dge){  Debug.message("draggesturelistener","ComponentDragGestureListener.dragGestureRecognized");  try {    dndCatcher.startDragAction(dge,dsl);  } catch (  InvalidDnDOperationException idoe) {  }}  }
class C{  public boolean isUseSeperatePopupButton(){  return useSeperatePopupButton;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object falseRes=stack.pop();  Object trueRes=stack.pop();  if (evalBool(stack.pop()))   return trueRes; else   return falseRes;}  }
class C{  public boolean isAutoAcceptEnabled() throws RcsGenericException {  try {    return mIFtServiceConfig.isAutoAcceptEnabled();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public boolean isCancelled(){  return mIsCancelled;}  }
class C{  @NonNull public static <T extends CharSequence>T defaultIfBlank(@Nullable final T primaryString,@NonNull final T defaultString){  return isBlank(primaryString) ? defaultString : primaryString;}  }
class C{  public dim3(){  x=1;  y=1;  z=1;}  }
class C{  static GeoPolygon fromPolygon(final Polygon... polygons){  if (polygons.length < 1) {    throw new IllegalArgumentException("need at least one polygon");  }  final GeoPolygon shape;  if (polygons.length == 1) {    final GeoPolygon component=fromPolygon(polygons[0]);    if (component == null) {      shape=new GeoCompositePolygon();    } else {      shape=component;    }  } else {    final GeoCompositePolygon poly=new GeoCompositePolygon();    for (    final Polygon p : polygons) {      final GeoPolygon component=fromPolygon(p);      if (component != null) {        poly.addShape(component);      }    }    shape=poly;  }  return shape;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {switch (qName) {case "firstDay":    if (!isIgnored(attributes)) {      firstDayMap.put(attributes.getValue("territories"),attributes.getValue("day"));    }  break;case "minDays":if (!isIgnored(attributes)) {  minDaysMap.put(attributes.getValue("territories"),attributes.getValue("count"));}break;default :pushContainer(qName,attributes);break;}}  }
class C{  public static boolean isFileExist(String filePath,FileType fileType) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);return fs.exists(path);case LOCAL:default :File defaultFile=new File(filePath);return defaultFile.exists();}}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected String convertToString(Object value) throws Throwable {  String result=null;  if (useLocaleFormat && value instanceof Number) {    NumberFormat format=getFormat();    format.setGroupingUsed(false);    result=format.format(value);  } else {    result=value.toString();  }  return result;}  }
class C{  public static void filterLine(File self,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  IOGroovyMethods.filterLine(newReader(self),writer,closure);}  }
class C{  public void doOpen(){}  }
class C{  public static boolean compareResults(SolrServer controlServer,SolrServer cloudServer,Set<String> addFails,Set<String> deleteFails) throws SolrServerException {  SolrParams q=SolrTestCaseJ4.params("q","*:*","rows","0","tests","checkShardConsistency(vsControl)");  SolrDocumentList controlDocList=controlServer.query(q).getResults();  long controlDocs=controlDocList.getNumFound();  SolrDocumentList cloudDocList=cloudServer.query(q).getResults();  long cloudClientDocs=cloudDocList.getNumFound();  q=SolrTestCaseJ4.params("q","*:*","rows","100000","fl","id","tests","checkShardConsistency(vsControl)/getIds");  controlDocList=controlServer.query(q).getResults();  if (controlDocs != controlDocList.getNumFound()) {    log.error("Something changed! control now " + controlDocList.getNumFound());  }  ;  cloudDocList=cloudServer.query(q).getResults();  if (cloudClientDocs != cloudDocList.getNumFound()) {    log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());  }  ;  if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {    boolean legal=CloudInspectUtil.checkIfDiffIsLegal(controlDocList,cloudDocList,"controlDocList","cloudDocList",addFails,deleteFails);    if (legal) {      return false;    }  }  Set<Map> differences=CloudInspectUtil.showDiff(controlDocList,cloudDocList,"controlDocList","cloudDocList");  boolean foundId=false;  StringBuilder ids=new StringBuilder("id:(");  for (  Map doc : differences) {    ids.append(" " + doc.get("id"));    foundId=true;  }  ids.append(")");  if (foundId) {    q=SolrTestCaseJ4.params("q",ids.toString(),"rows","100000","fl","id,_version_","sort","id asc","tests","checkShardConsistency(vsControl)/getVers");    SolrDocumentList a=controlServer.query(q).getResults();    SolrDocumentList b=cloudServer.query(q).getResults();    log.error("controlClient :" + a + "\n\tcloudClient :"+ b);  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean checkPermission(String permissionName){  if (context == null) {    throw new RuntimeException("Before comparing permissions you need to call Nammu.init(context)");  }  return PackageManager.PERMISSION_GRANTED == context.checkSelfPermission(permissionName);}  }
class C{  protected void restoreState(){  updateMatrix=storedUpdateMatrix;  double[] tmp1=storedRelativeRates;  storedRelativeRates=relativeRates;  relativeRates=tmp1;  tmp1=storedEval;  storedEval=Eval;  Eval=tmp1;  double[][] tmp2=storedIevc;  storedIevc=Ievc;  Ievc=tmp2;  tmp2=storedEvec;  storedEvec=Evec;  Evec=tmp2;  tmp1=storedExpQt;  storedExpQt=expQt;  expQt=tmp1;}  }
class C{  @Override protected void paintComponent(Graphics g){  if (getHeight() != prevHeight) {    prevHeight=getHeight();    bgGradient=new GradientPaint(0,0,new Color(0xEBF4FA),0,prevHeight,new Color(0xBBD9EE));  }  ((Graphics2D)g).setPaint(bgGradient);  g.fillRect(0,0,getWidth(),prevHeight);}  }
class C{  public boolean containsValue(OMGraphic obj){  return graphicHash.containsValue(obj);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List<ContentItem> contentItems(){  return contentItems;}  }
class C{  protected void declutterLabel(DeclutterMatrix declutter,Projection proj){  super.declutterLabel(declutter,proj);  if (isShowLocation()) {    if (location instanceof OMRasterObject) {      Point lp=((OMRasterObject)location).getMapLocation();      if (lp != null) {        int locHeight=((OMRasterObject)location).getHeight();        int locWidth=((OMRasterObject)location).getWidth();        lp.y+=locHeight;        declutter.setTaken(lp,locWidth,locHeight);        lp.y-=locHeight;      }    }  }}  }
class C{  @Override public double[][] predictIntervals(double conf){  updateBoundariesAndOrWeights();  double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2);  double min=m_TM.firstKey() - val * m_Width;  double max=m_TM.lastKey() + val * m_Width;  double delta=(max - min) / m_NumIntervals;  double[] probabilities=new double[m_NumIntervals];  double leftVal=Math.exp(logDensity(min));  for (int i=0; i < m_NumIntervals; i++) {    double rightVal=Math.exp(logDensity(min + (i + 1) * delta));    probabilities[i]=0.5 * (leftVal + rightVal) * delta;    leftVal=rightVal;  }  int[] sortedIndices=Utils.sort(probabilities);  double sum=0;  boolean[] toUse=new boolean[probabilities.length];  int k=0;  while ((sum < conf) && (k < toUse.length)) {    toUse[sortedIndices[toUse.length - (k + 1)]]=true;    sum+=probabilities[sortedIndices[toUse.length - (k + 1)]];    k++;  }  probabilities=null;  ArrayList<double[]> intervals=new ArrayList<double[]>();  double[] interval=null;  boolean haveStartedInterval=false;  for (int i=0; i < m_NumIntervals; i++) {    if (toUse[i]) {      if (haveStartedInterval == false) {        haveStartedInterval=true;        interval=new double[2];        interval[0]=min + i * delta;      }      interval[1]=min + (i + 1) * delta;    } else {      if (haveStartedInterval) {        haveStartedInterval=false;        intervals.add(interval);      }    }  }  if (haveStartedInterval) {    intervals.add(interval);  }  return intervals.toArray(new double[0][0]);}  }
class C{  public static final boolean isLetterOrDigit(char ch){  return (ch <= 'z') && (dataTable[ch] & LETTER_OR_DIGIT_MASK) > 0;}  }
class C{  public static boolean hasDeadStates(Automaton a){  BitSet liveStates=getLiveStates(a);  int numLive=liveStates.cardinality();  int numStates=a.getNumStates();  assert numLive <= numStates : "numLive=" + numLive + " numStates="+ numStates+ " "+ liveStates;  return numLive < numStates;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startTo("BacktraceFieldTarg","gus","()V");  mainThread=bpe.thread();  StackFrame myFrame=mainThread.frame(1);  LocalVariable lv=myFrame.visibleVariableByName("ee");  println("BT: lv = " + lv);  println("BT: lvType = " + lv.typeName());  List allFields=((ReferenceType)(lv.type())).allFields();  println("BT: allFields = " + allFields);  Iterator iter=allFields.iterator();  while (iter.hasNext()) {    Field ff=(Field)iter.next();    if (ff.toString().equals("java.lang.Throwable.backtrace")) {      failure("ERROR: java.lang.Throwable.backtrace field not filtered out.");      if (1 == 0) {        ObjectReference myVal=(ObjectReference)myFrame.getValue(lv);        println("BT: myVal = " + myVal);        ArrayReference backTraceVal=null;        backTraceVal=(ArrayReference)myVal.getValue(ff);        println("BT: backTraceVal = " + backTraceVal);        ArrayReference secondVal=(ArrayReference)backTraceVal.getValue(1);        println("BT: secondVal = " + secondVal);        Object x2Val=(Object)secondVal.getValue(0);        println("BT: x2Val = " + x2Val);        ArrayReference firstVal=(ArrayReference)backTraceVal.getValue(0);        println("BT: firstVal = " + firstVal);        Object xVal=(Object)firstVal.getValue(0);        println("BT: xVal = " + xVal);      }      break;    }  }  if (!testFailed) {    lv=myFrame.visibleVariableByName("myTesty");    allFields=((ReferenceType)(lv.type())).allFields();    println("BT: allFields = " + allFields);    if (allFields.size() != Testy.field7) {      failure("ERROR: wrong number of fields; expected " + Testy.field7 + ", Got "+ allFields.size());    } else {      iter=allFields.iterator();      while (iter.hasNext()) {        String fieldName=((Field)iter.next()).toString();        if (!fieldName.startsWith("Testy.field",0)) {          failure("ERROR: Found bogus field: " + fieldName.toString());        }      }    }  }  listenUntilVMDisconnect();  if (!testFailed) {    println("BacktraceFieldTest: passed");  } else {    throw new Exception("BacktraceFieldTest: failed");  }}  }
class C{  AppMenu(Menu menu,int itemRowHeight,int itemDividerHeight,AppMenuHandler handler,Resources res){  mMenu=menu;  mItemRowHeight=itemRowHeight;  assert mItemRowHeight > 0;  mHandler=handler;  mItemDividerHeight=itemDividerHeight;  assert mItemDividerHeight >= 0;  mNegativeSoftwareVerticalOffset=res.getDimensionPixelSize(R.dimen.menu_negative_software_vertical_offset);  mVerticalFadeDistance=res.getDimensionPixelSize(R.dimen.menu_vertical_fade_distance);}  }
class C{  public Task<ClusterRestRep> detachStorage(URI id){  return postTask(PathConstants.CLUSTER_DETACH_STORAGE_URL,id);}  }
class C{  public HashCodeBuilder appendSuper(final int superHashCode){  iTotal=iTotal * iConstant + superHashCode;  return this;}  }
class C{  public FocusControl(String focusGroup,int clicks){  ccount=clicks;  group=focusGroup;}  }
class C{  public static Sail createSail(final Properties props,final String file,final Option... args){  final List<Option> options=args != null ? Arrays.asList(args) : new LinkedList<Option>();  checkArgs(file,options);  if (file != null) {    props.setProperty("com.bigdata.journal.AbstractJournal.file",file);    props.setProperty("com.bigdata.journal.AbstractJournal.bufferMode","DiskRW");  } else {    props.setProperty("com.bigdata.journal.AbstractJournal.bufferMode","MemStore");  }  if (options.contains(Option.Inference)) {    props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.axiomsClass","com.bigdata.rdf.axioms.OwlAxioms");    props.setProperty("com.bigdata.rdf.sail.truthMaintenance","true");    props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.justify","true");  } else {    props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.axiomsClass","com.bigdata.rdf.axioms.NoAxioms");    props.setProperty("com.bigdata.rdf.sail.truthMaintenance","false");    props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.justify","false");  }  props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.textIndex",String.valueOf(options.contains(Option.TextIndex)));  props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers",String.valueOf(options.contains(Option.RDR)));  props.setProperty("com.bigdata.rdf.store.AbstractTripleStore.quads",String.valueOf(options.contains(Option.Quads)));  props.setProperty("com.bigdata.service.AbstractTransactionService.minReleaseAge","1");  props.setProperty("com.bigdata.btree.writeRetentionQueue.capacity","4000");  props.setProperty("com.bigdata.btree.BTree.branchingFactor","128");  props.setProperty("com.bigdata.namespace.kb.lex.com.bigdata.btree.BTree.branchingFactor","400");  props.setProperty("com.bigdata.namespace.kb.spo.com.bigdata.btree.BTree.branchingFactor","1024");  final Sail sail=getSailProviderInstance(props);  return sail;}  }
class C{  public Matrix4f m21(float m21){  this.m21=m21;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public Node.Nodes parse(String inFileName,Node parent,URL jarFileUrl) throws FileNotFoundException, JasperException, IOException {  return doParse(inFileName,parent,jarFileUrl);}  }
class C{  public NutchDocument filter(NutchDocument doc,String url,WebPage page) throws IndexingException {  for (  IndexingFilter indexingFilter : indexingFilters) {    doc=indexingFilter.filter(doc,url,page);    if (doc == null)     return null;  }  return doc;}  }
class C{  public SaveVisionWorldAction(final VisionWorldDesktopComponent desktopComponent){  super("Save");  if (desktopComponent == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.desktopComponent=desktopComponent;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Save.png"));  putValue(SHORT_DESCRIPTION,"Save Vision World");}  }
class C{  public Instance sample(Random random){  double[] center=getCenter();  final int dimensions=center.length;  final double sin[]=new double[dimensions - 1];  final double cos[]=new double[dimensions - 1];  final double length=random.nextDouble() * getRadius();  double lastValue=1.0;  for (int i=0; i < dimensions - 1; i++) {    double angle=random.nextDouble() * 2 * Math.PI;    sin[i]=lastValue * Math.sin(angle);    cos[i]=Math.cos(angle);    lastValue=sin[i];  }  double res[]=new double[dimensions];  res[0]=center[0] + length * cos[0];  for (int i=1; i < dimensions - 1; i++) {    res[i]=center[i] + length * sin[i - 1] * cos[i];  }  res[dimensions - 1]=center[dimensions - 1] + length * sin[dimensions - 2];  return new DenseInstance(1.0,res);}  }
class C{  private EmitterSet[] makeSplit(SplitRecord split){  int arg=split.argument;  ArgumentType test=split.test;  EmitterSet yes=new EmitterSet();  EmitterSet no=new EmitterSet();  Iterator<EmitterDescriptor> i=emitters.iterator();  while (i.hasNext()) {    EmitterDescriptor ed=(EmitterDescriptor)i.next();    if (ed.argMatchesEncoding(arg,test)) {      yes.add(ed);    } else {      no.add(ed);    }  }  return new EmitterSet[]{yes,no};}  }
class C{  private UasBnoAuthEx(){}  }
class C{  protected NodeTuple representJavaBeanProperty(Object javaBean,Property property,Object propertyValue,Tag customTag){  ScalarNode nodeKey=(ScalarNode)representData(property.getName());  boolean hasAlias=this.representedObjects.containsKey(propertyValue);  Node nodeValue=representData(propertyValue);  if (propertyValue != null && !hasAlias) {    NodeId nodeId=nodeValue.getNodeId();    if (customTag == null) {      if (nodeId == NodeId.scalar) {        if (propertyValue instanceof Enum<?>) {          nodeValue.setTag(Tag.STR);        }      } else {        if (nodeId == NodeId.mapping) {          if (property.getType() == propertyValue.getClass()) {            if (!(propertyValue instanceof Map<?,?>)) {              if (!nodeValue.getTag().equals(Tag.SET)) {                nodeValue.setTag(Tag.MAP);              }            }          }        }        checkGlobalTag(property,nodeValue,propertyValue);      }    }  }  return new NodeTuple(nodeKey,nodeValue);}  }
class C{  public VOSubscriptionDetails subscribeToService(String subscriptionId,long unitKey,VOService service,VOUser user,VORoleDefinition role) throws Exception {  return subscribeToService(newVOSubscription(subscriptionId,unitKey),service,user,role);}  }
class C{  private MaskFormatter createFormatter(String s){  try {    return new MaskFormatter(s);  } catch (  ParseException exc) {    _log.error("Error creating formatter: " + exc.getMessage());  }  return null;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAElement(prefix,(AbstractDocument)doc);}  }
class C{  @NotNull public static MockPrinter fillPrinter(@NotNull Printable printable){  MockPrinter printer=new MockPrinter();  printable.printOn(printer);  return printer;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.CALL__STEP:    setStep((Step)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static void addTag(Javadoc doc,JavadocTag tag){  if (!hasTagAlready(requireNonNull(doc),requireNonNull(tag))) {    doc.add(tag);  }}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  void syncSummaryView(){  Log.d(TAG,"syncSummaryView");  boolean useDefaultSummary=true;  if (isChecked && !TextUtils.isEmpty(summaryOn)) {    summaryText.setText(summaryOn);    useDefaultSummary=false;  } else   if (!isChecked && !TextUtils.isEmpty(summaryOff)) {    summaryText.setText(summaryOff);    useDefaultSummary=false;  }  if (useDefaultSummary) {    CharSequence summary=getSummary();    if (!TextUtils.isEmpty(summary)) {      summaryText.setText(summary);      useDefaultSummary=false;    }  }  int newVisibility=View.GONE;  if (!useDefaultSummary) {    newVisibility=View.VISIBLE;  }  if (newVisibility != summaryText.getVisibility()) {    summaryText.setVisibility(newVisibility);  }}  }
class C{  public MultipartStream(InputStream input,byte[] boundary,int bufSize){  if (boundary == null) {    throw new IllegalArgumentException("boundary may not be null");  }  this.boundaryLength=boundary.length + BOUNDARY_PREFIX.length;  if (bufSize < this.boundaryLength + 1) {    throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small");  }  this.input=input;  this.bufSize=Math.max(bufSize,boundaryLength * 2);  this.buffer=new byte[this.bufSize];  this.boundary=new byte[this.boundaryLength];  this.keepRegion=this.boundary.length;  System.arraycopy(BOUNDARY_PREFIX,0,this.boundary,0,BOUNDARY_PREFIX.length);  System.arraycopy(boundary,0,this.boundary,BOUNDARY_PREFIX.length,boundary.length);  head=0;  tail=0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.910 -0500",hash_original_method="7C65F21BA78E9C886CB99F3A821D7FC2",hash_generated_method="478A0BFDE6FD19E13A25783CBA08CD39") public boolean contains(float x,float y){  return (((x + y + getTaintInt())) == 1);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  private static void ByteReadByteWrite() throws Throwable {  byte[] buf=new byte[512];  boolean reachEOF=false;  reset();  while (dis.available() == 1) {    int datum=dis.read();    if (datum == -1) {      reachEOF=true;    } else {      if (datum < 0 || datum > 255) {        fail("datum out of range: " + datum);      }      ios.write(datum);    }  }  dis.close();  ios.close();  check(data[0] == baos.toByteArray()[0]);}  }
class C{  public static synchronized void markAsReferenceLiteral(Offset fieldOffset){  Object literal=getSlotContentsAsObject(fieldOffset);  if (!VM.runningVM && literal instanceof TIB) {    return;  } else   if (literal != null) {    if (findObjectLiteral(literal) == 0) {synchronized (objectLiterals) {        objectLiterals.put(literal,fieldOffset.toInt());      }    }  }}  }
class C{  public boolean hasSubtitles(){  if (this.subtitles) {    return true;  }  if (getMediaFiles(MediaFileType.SUBTITLE).size() > 0) {    return true;  }  for (  MediaFile mf : getMediaFiles(MediaFileType.VIDEO)) {    if (mf.hasSubtitles()) {      return true;    }  }  return false;}  }
class C{  @Override public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  public boolean equals(Timestamp theTimestamp){  if (theTimestamp == null) {    return false;  }  return (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos());}  }
class C{  public static boolean is16BitUuid(ParcelUuid parcelUuid){  UUID uuid=parcelUuid.getUuid();  if (uuid.getLeastSignificantBits() != BASE_UUID.getUuid().getLeastSignificantBits()) {    return false;  }  return ((uuid.getMostSignificantBits() & 0xFFFF0000FFFFFFFFL) == 0x1000L);}  }
class C{  @SuppressWarnings("unused") public List<String> hostVcenterChangeDetails(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter){  List<String> result=Lists.newArrayList();  Host host=_dbClient.queryObject(Host.class,hostId);  VcenterDataCenter datacenter=_dbClient.queryObject(VcenterDataCenter.class,datacenterId);  if (host != null && datacenter != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostVcenterChangeDetails",host.getLabel(),datacenter.getLabel()));    result.addAll(hostClusterChangeDetails(hostId,clusterId,datacenterId,isVcenter));  }  return result;}  }
class C{  public BorderPropertySet lighten(IdentValue style){  BorderPropertySet bc=new BorderPropertySet(this);  bc._topColor=_topColor == null ? null : _topColor.lightenColor();  bc._bottomColor=_bottomColor == null ? null : _bottomColor.lightenColor();  bc._leftColor=_leftColor == null ? null : _leftColor.lightenColor();  bc._rightColor=_rightColor == null ? null : _rightColor.lightenColor();  return bc;}  }
class C{  public ERTrees(){  this(100);}  }
class C{  private void executeAcceptLoop(){  if (tcpLog.isLoggable(Log.BRIEF)) {    tcpLog.log(Log.BRIEF,"listening on port " + getEndpoint().getPort());  }  while (true) {    Socket socket=null;    try {      socket=serverSocket.accept();      InetAddress clientAddr=socket.getInetAddress();      String clientHost=(clientAddr != null ? clientAddr.getHostAddress() : "0.0.0.0");      try {        connectionThreadPool.execute(new ConnectionHandler(socket,clientHost));      } catch (      RejectedExecutionException e) {        closeSocket(socket);        tcpLog.log(Log.BRIEF,"rejected connection from " + clientHost);      }    } catch (    Throwable t) {      try {        if (serverSocket.isClosed()) {          break;        }        try {          if (tcpLog.isLoggable(Level.WARNING)) {            tcpLog.log(Level.WARNING,"accept loop for " + serverSocket + " throws",t);          }        } catch (        Throwable tt) {        }      }  finally {        if (socket != null) {          closeSocket(socket);        }      }      if (!(t instanceof SecurityException)) {        try {          TCPEndpoint.shedConnectionCaches();        } catch (        Throwable tt) {        }      }      if (t instanceof Exception || t instanceof OutOfMemoryError || t instanceof NoClassDefFoundError) {        if (!continueAfterAcceptFailure(t)) {          return;        }      } else       if (t instanceof Error) {        throw (Error)t;      } else {        throw new UndeclaredThrowableException(t);      }    }  }}  }
class C{  public byte[] transformBytes(ClassLoader classLoader,String className,ClassReader reader){  int readFlags=ClassReader.SKIP_FRAMES;  if (Properties.INSTRUMENTATION_SKIP_DEBUG)   readFlags|=ClassReader.SKIP_DEBUG;  String classNameWithDots=ResourceList.getClassNameFromResourcePath(className);  if (!checkIfCanInstrument(classNameWithDots)) {    throw new RuntimeException("Should not transform a shared class (" + classNameWithDots + ")! Load by parent (JVM) classloader.");  }  TransformationStatistics.reset();  int asmFlags=ClassWriter.COMPUTE_FRAMES;  ClassWriter writer=new ComputeClassWriter(asmFlags);  ClassVisitor cv=writer;  if (logger.isDebugEnabled()) {    cv=new TraceClassVisitor(cv,new PrintWriter(System.err));  }  if (Properties.RESET_STATIC_FIELDS) {    cv=new StaticAccessClassAdapter(cv,className);  }  if (Properties.PURE_INSPECTORS) {    CheapPurityAnalyzer purityAnalyzer=CheapPurityAnalyzer.getInstance();    cv=new PurityAnalysisClassVisitor(cv,className,purityAnalyzer);  }  if (Properties.MAX_LOOP_ITERATIONS >= 0) {    cv=new LoopCounterClassAdapter(cv);  }  if (DependencyAnalysis.shouldAnalyze(classNameWithDots)) {    logger.debug("Applying target transformation to class " + classNameWithDots);    if (!Properties.TEST_CARVING && Properties.MAKE_ACCESSIBLE) {      cv=new AccessibleClassAdapter(cv,className);    }    cv=new RemoveFinalClassAdapter(cv);    cv=new ExecutionPathClassAdapter(cv,className);    cv=new CFGClassAdapter(classLoader,cv,className);    if (Properties.EXCEPTION_BRANCHES) {      cv=new ExceptionTransformationClassAdapter(cv,className);    }    if (Properties.ERROR_BRANCHES) {      cv=new ErrorConditionClassAdapter(cv,className);    }  } else {    logger.debug("Not applying target transformation");    cv=new NonTargetClassAdapter(cv,className);    if (Properties.MAKE_ACCESSIBLE) {      cv=new AccessibleClassAdapter(cv,className);    }    if (Properties.TT && classNameWithDots.startsWith(Properties.CLASS_PREFIX)) {      cv=new CFGClassAdapter(classLoader,cv,className);    }  }  cv=new PrimitiveClassAdapter(cv,className);  if (Properties.RESET_STATIC_FIELDS) {    cv=handleStaticReset(className,cv);  }  if (TestSuiteWriterUtils.needToUseAgent()) {    cv=new MethodCallReplacementClassAdapter(cv,className);  }  if (classNameWithDots.startsWith(Properties.PROJECT_PREFIX) || (!Properties.TARGET_CLASS_PREFIX.isEmpty() && classNameWithDots.startsWith(Properties.TARGET_CLASS_PREFIX)) || shouldTransform(classNameWithDots)) {    ClassNode cn=new AnnotatedClassNode();    reader.accept(cn,readFlags);    logger.info("Starting transformation of " + className);    if (Properties.STRING_REPLACEMENT) {      StringTransformation st=new StringTransformation(cn);      if (isTargetClassName(classNameWithDots) || shouldTransform(classNameWithDots))       cn=st.transform();    }    ComparisonTransformation cmp=new ComparisonTransformation(cn);    if (isTargetClassName(classNameWithDots) || shouldTransform(classNameWithDots)) {      cn=cmp.transform();      ContainerTransformation ct=new ContainerTransformation(cn);      cn=ct.transform();    }    if (shouldTransform(classNameWithDots)) {      logger.info("Testability Transforming " + className);      BooleanTestabilityTransformation tt=new BooleanTestabilityTransformation(cn,classLoader);      try {        cn=tt.transform();      } catch (      Throwable t) {        throw new Error(t);      }      logger.info("Testability Transformation done: " + className);    }    cn.accept(cv);    if (Properties.TEST_CARVING && TransformerUtil.isClassConsideredForInstrumentation(className)) {      return handleCarving(className,writer);    }  } else {    reader.accept(cv,readFlags);  }  return writer.toByteArray();}  }
class C{  public String[] awarenessAttributes(){  return this.awarenessAttributes;}  }
class C{  public final synchronized void deleteElementWithValue(final int id){  final int currentSize=items.length;  final int[] newItems=new int[currentSize - 1];  int counter=0;  for (  final int item : items) {    if (item != id) {      newItems[counter]=item;      counter++;    }  }  items=newItems;  current_item--;}  }
class C{  public BatteryInfo(){}  }
class C{  public Yaml(){  this(new Constructor(),new Representer(),new DumperOptions(),new Resolver());}  }
class C{  public final boolean readBoolean(){  int ch=read();  return (ch != 0);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a ror instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final int linesBefore=instructions.size();  final OperandSize sourceSize=sourceResult.getSize();  final OperandSize targetSize=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String rotateMask=environment.getNextVariableString();  final String rotateMaskZero=environment.getNextVariableString();  final String rotateMaskLessOne=environment.getNextVariableString();  final String rotateMaskOne=environment.getNextVariableString();  final String shrValue=environment.getNextVariableString();  final String shredResult=environment.getNextVariableString();  final String shlValue=environment.getNextVariableString();  final String shledResult=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempOfLsb=environment.getNextVariableString();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(targetSize));  final String modVal=String.valueOf(targetSize.getBitSize());  final String msbMask2nd=String.valueOf(TranslationHelpers.getMsbMask(targetSize) / 2);  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize));  final String shift2ndMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize) + 1);  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modVal,targetSize,rotateMask));  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,rotateMask,OperandSize.BYTE,rotateMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,targetSize,rotateMask,targetSize,"1",targetSize,rotateMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,targetSize,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));  instructions.add(ReilHelpers.createSub(offset + 4,OperandSize.BYTE,"0",OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));  instructions.add(ReilHelpers.createBsh(offset + 5,targetSize,targetRegister,OperandSize.BYTE,shrValue,targetSize,shredResult));  instructions.add(ReilHelpers.createSub(offset + 6,OperandSize.BYTE,modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shlValue));  instructions.add(ReilHelpers.createBsh(offset + 7,targetSize,targetRegister,OperandSize.BYTE,shlValue,targetSize,shledResult));  instructions.add(ReilHelpers.createOr(offset + 8,targetSize,shredResult,targetSize,shledResult,targetSize,result));  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 18);  instructions.add(ReilHelpers.createJcc(offset + 9,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAnd(offset + 10,targetSize,result,targetSize,msbMask,targetSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 11,targetSize,tempCf,targetSize,shiftMsbLsb,OperandSize.BYTE,Helpers.CARRY_FLAG));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 15);  instructions.add(ReilHelpers.createJcc(offset + 12,OperandSize.BYTE,rotateMaskOne,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 13,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 18);  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));  instructions.add(ReilHelpers.createAnd(offset + 15,targetSize,result,targetSize,msbMask2nd,targetSize,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 16,targetSize,tempOf,targetSize,shift2ndMsbLsb,OperandSize.BYTE,tempOfLsb));  instructions.add(ReilHelpers.createXor(offset + 17,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  Helpers.writeBack(environment,offset + 18,targetOperand,result,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public void addInstanceInfo(Instance ins){  if (m_Instances != null)   m_DistanceFunction.update(ins);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  public IBk(int k){  init();  setKNN(k);}  }
class C{  @Override protected RegionEntry basicPutEntry(final EntryEventImpl event,final long lastModified) throws TimeoutException, CacheWriterException {  beginLocalWrite(event);  try {    event.setInvokePRCallbacks(true);    forceSerialized(event);    return super.basicPutEntry(event,lastModified);  }  finally {    endLocalWrite(event);  }}  }
class C{  public MarshalException(){  super();}  }
class C{  @Override protected void onPause(){  super.onPause();  SharedPreferences.Editor editor=getPreferences(0).edit();  editor.putString("text",mSaved.getText().toString());  editor.putInt("selection-start",mSaved.getSelectionStart());  editor.putInt("selection-end",mSaved.getSelectionEnd());  editor.commit();}  }
class C{  public void testReceive_UnconnectedBufFull() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_ONE);  dst.put((byte)88);  assertEquals(dst.position(),dst.limit());  assertNull(this.channel1.receive(dst));}  }
class C{  public void readFromStream(DataInputStream dis,int version) throws IOException {  tcData.readFromStream(dis,version);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.244 -0400",hash_original_method="CB9AED790CD954117728F46FA7B99DE8",hash_generated_method="1CAD9F4FE78AF83D20A13E25CDD749E0") @Override public void write(int idx){}  }
class C{  public static void addGhoulHelmetTexture(Item helmet,ResourceLocation res){  if (helmet == null || res == null)   return;  if (ghoul_helmet.containsKey(helmet))   FMLLog.log("AbyssalCraftAPI",Level.INFO,"Mod %s is overwriting the texture for Helmet %s",Loader.instance().activeModContainer().getModId(),helmet.getItemStackDisplayName(new ItemStack(helmet)));  ghoul_helmet.put(helmet,res);}  }
class C{  public BytesRef floor(BytesRef input,BytesRefBuilder output){  int state=0;  if (input.length == 0) {    if (runAutomaton.isAccept(state)) {      output.clear();      return output.get();    } else {      return null;    }  }  final List<Integer> stack=new ArrayList<>();  int idx=0;  while (true) {    int label=input.bytes[input.offset + idx] & 0xff;    int nextState=runAutomaton.step(state,label);    if (idx == input.length - 1) {      if (nextState != -1 && runAutomaton.isAccept(nextState)) {        output.grow(1 + idx);        output.setByteAt(idx,(byte)label);        output.setLength(input.length);        return output.get();      } else {        nextState=-1;      }    }    if (nextState == -1) {      while (true) {        int numTransitions=automaton.getNumTransitions(state);        if (numTransitions == 0) {          assert runAutomaton.isAccept(state);          output.setLength(idx);          return output.get();        } else {          automaton.getTransition(state,0,transition);          if (label - 1 < transition.min) {            if (runAutomaton.isAccept(state)) {              output.setLength(idx);              return output.get();            }            if (stack.size() == 0) {              return null;            } else {              state=stack.remove(stack.size() - 1);              idx--;              label=input.bytes[input.offset + idx] & 0xff;            }          } else {            break;          }        }      }      return addTail(state,output,idx,label);    } else {      output.grow(1 + idx);      output.setByteAt(idx,(byte)label);      stack.add(state);      state=nextState;      idx++;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.928 -0500",hash_original_method="65EA4CC7473CC6604A3DE8B9A82FCC11",hash_generated_method="2C399FBFF5BF16C5903F56ED85D3BCE5") public int fetchIsimRecords(IccFileHandler iccFh,Handler h){  iccFh.loadEFTransparent(EF_IMPI,h.obtainMessage(IccRecords.EVENT_GET_ICC_RECORD_DONE,new EfIsimImpiLoaded()));  iccFh.loadEFLinearFixedAll(EF_IMPU,h.obtainMessage(IccRecords.EVENT_GET_ICC_RECORD_DONE,new EfIsimImpuLoaded()));  iccFh.loadEFTransparent(EF_DOMAIN,h.obtainMessage(IccRecords.EVENT_GET_ICC_RECORD_DONE,new EfIsimDomainLoaded()));  return 3;}  }
class C{  public static String copyToString(Reader in) throws IOException {  StringWriter out=new StringWriter();  copy(in,out);  return out.toString();}  }
class C{  <T extends JCTree>List<T> translateArgs(List<T> _args,List<Type> parameters,Type varargsElement){  if (parameters.isEmpty())   return _args;  List<T> args=_args;  while (parameters.tail.nonEmpty()) {    args.head=translate(args.head,parameters.head);    args=args.tail;    parameters=parameters.tail;  }  Type parameter=parameters.head;  Assert.check(varargsElement != null || args.length() == 1);  if (varargsElement != null) {    while (args.nonEmpty()) {      args.head=translate(args.head,varargsElement);      args=args.tail;    }  } else {    args.head=translate(args.head,parameter);  }  return _args;}  }
class C{  protected URL handleRedirectException(RedirectRequiredException redirect) throws ServiceException {  try {    return new URL(redirect.getRedirectLocation());  } catch (  MalformedURLException e) {    ServiceException se=new ServiceException(CoreErrorDomain.ERR.invalidRedirectedToUrl);    se.setInternalReason("Invalid redirected-to URL - " + redirect.getRedirectLocation());    throw se;  }}  }
class C{  public static boolean checkAnnotations(int iteration) throws IOException {  try {    Thread.sleep(5000);  } catch (  Exception e) {    System.err.println(e.getMessage());  }  myRMI.printOut("out" + iteration);  myRMI.printErr("err" + iteration);  myRMI.printOut("out" + iteration);  myRMI.printErr("err" + iteration);  String outString=null;  String errString=null;  for (int i=0; i < 5; i++) {    try {      Thread.sleep(4000);    } catch (    InterruptedException e) {    }    outString=rmidOut.toString();    errString=rmidErr.toString();    if ((!outString.equals("")) && (!errString.equals(""))) {      System.err.println("obtained annotations");      break;    }    System.err.println("rmid output not yet received, retrying...");  }  rmidOut.reset();  rmidErr.reset();  if (iteration >= 0) {    System.err.println("Checking annotations...");    System.err.println(outString);    System.err.println(errString);    StringTokenizer stOut=new StringTokenizer(outString,":");    StringTokenizer stErr=new StringTokenizer(errString,":");    String execErr=null;    String execOut=null;    String destOut=null;    String destErr=null;    String outTmp=null;    String errTmp=null;    while (stOut.hasMoreTokens()) {      execOut=outTmp;      outTmp=destOut;      destOut=stOut.nextToken();    }    while (stErr.hasMoreTokens()) {      execErr=errTmp;      errTmp=destErr;      destErr=stErr.nextToken();    }    if ((execErr == null) || (errTmp == null) || (destErr == null)) {      return false;    }    if ((execOut == null) || (outTmp == null) || (destOut == null)) {      return false;    }    if (execOut.equals("ExecGroup-" + iteration) && (new String(destOut.substring(0,4)).equals("out" + iteration)) && (execErr.equals("ExecGroup-" + iteration))&& (new String(destErr.substring(0,4)).equals("err" + iteration))) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length - 1;  while (count > 0 && in[count] == 0) {    count--;  }  if (in[count] != (byte)0x80) {    throw new InvalidCipherTextException("pad block corrupted");  }  return in.length - count;}  }
class C{  public void load(){}  }
class C{  public Map push(String id){  if (order.contains(id))   throw new RuntimeException(id + " already present");  if (!order.isEmpty() && id.equals(order.peek()))   return (Map)id2map.get(id);  Map result=(Map)id2map.get(id);  if (result == null) {    result=new HashMap();    id2map.put(id,result);  }  order.push(id);  return result;}  }
class C{  public boolean selectAll(){  if (mMultiChoiceAdapter != null) {    performVibrate();    Iterator it=mAllList.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<Integer,View> pair=(Map.Entry<Integer,View>)it.next();      performSelect(pair.getValue(),pair.getKey(),false);    }    if (multiChoiceSelectionListener != null)     multiChoiceSelectionListener.OnSelectAll(mSelectedList.size(),mAllList.size());    return true;  }  return false;}  }
class C{  public void store(Element root,String eNames,String eName,String oldName){  if (Control.backwardCompatible) {    Element values=new Element(oldName);    for (    String name : getNames()) {      values.addContent(name + "%%");    }    root.addContent(values);  }  Element names=new Element(eNames);  for (  String name : getNames()) {    Element e=new Element(eName);    if (eName.equals(Xml.LENGTH)) {      e.setAttribute(new Attribute(Xml.VALUE,name));    } else {      e.setAttribute(new Attribute(Xml.NAME,name));    }    names.addContent(e);  }  root.addContent(names);}  }
class C{  private boolean permitidaCreacionPrevision(PrevisionVO prevision){  boolean permitidaCreacionPrevision=true;  int[] estados={EstadoPrevision.ABIERTA.getIdentificador(),EstadoPrevision.ENVIADA.getIdentificador(),EstadoPrevision.RECHAZADA.getIdentificador()};  int tipoTransferencia=prevision.getTipotransferencia();  if (tipoTransferencia == TipoTransferencia.ENTRE_ARCHIVOS.getIdentificador()) {    Collection otrasPrevisionesUsuarioGestor=_previsionDbEntity.getPrevisionesXGestorYTipoTrans(prevision.getIdusrgestor(),tipoTransferencia,new int[]{EstadoPrevision.ABIERTA.getIdentificador()},prevision.getAno());    if (otrasPrevisionesUsuarioGestor != null && otrasPrevisionesUsuarioGestor.size() > 0) {      errorCode=ArchivoErrorCodes.PREVISION_ENTRE_ARCHIVOS_EN_CURSO_EN_USUARIO_REMITENTE;      permitidaCreacionPrevision=false;    }  } else {    String neededPermision=null;    if (tipoTransferencia == TipoTransferencia.ORDINARIA.getIdentificador())     neededPermision=AppPermissions.AMPLIADO_ELABORACION_TRANSFERENCIAS_ORDINARIAS; else     if (tipoTransferencia == TipoTransferencia.EXTRAORDINARIA_SIN_SIGNATURAR.getIdentificador() && prevision.isDetallada())     neededPermision=AppPermissions.AMPLIADO_ELABORACION_TRANSFERENCIAS_EXTRAORDINARIAS;    if (neededPermision != null) {      Collection otrasPrevisionesEnOrganoRemitente=_previsionDbEntity.getPrevisionesXIdOrgRemitenteYTTransfYTPrevYEstados(prevision.getIdorgremitente(),tipoTransferencia,estados);      if (otrasPrevisionesEnOrganoRemitente != null && otrasPrevisionesEnOrganoRemitente.size() > 0)       if (!getServiceClient().hasPermission(neededPermision)) {        errorCode=ArchivoErrorCodes.PREVISION_EN_CURSO_EN_ORGANO_REMITENTE;        permitidaCreacionPrevision=false;      }    }  }  return permitidaCreacionPrevision;}  }
class C{  public Tuple read() throws IOException {  try {    Map fields=jsonTupleStream.next();    if (fields == null) {      Map m=new HashMap();      m.put("EOF",true);      return new Tuple(m);    } else {      String msg=(String)fields.get("EXCEPTION");      if (msg != null) {        HandledException ioException=new HandledException(msg);        throw ioException;      }      if (trace) {        fields.put("_CORE_",this.baseUrl);        if (slice != null) {          fields.put("_SLICE_",slice);        }      }      if (fieldMappings != null) {        fields=mapFields(fields,fieldMappings);      }      return new Tuple(fields);    }  } catch (  HandledException e) {    throw new IOException("--> " + this.baseUrl + ":"+ e.getMessage());  }catch (  Exception e) {    throw new IOException("--> " + this.baseUrl + ": An exception has occurred on the server, refer to server log for details.",e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void createAnimatedGraphWithAdditionNode(int viewTag,double firstValue,double secondValue){  mNativeAnimatedNodesManager.createAnimatedNode(1,JavaOnlyMap.of("type","value","value",100d));  mNativeAnimatedNodesManager.createAnimatedNode(2,JavaOnlyMap.of("type","value","value",1000d));  mNativeAnimatedNodesManager.createAnimatedNode(3,JavaOnlyMap.of("type","addition","input",JavaOnlyArray.of(1,2)));  mNativeAnimatedNodesManager.createAnimatedNode(4,JavaOnlyMap.of("type","style","style",JavaOnlyMap.of("translateX",3)));  mNativeAnimatedNodesManager.createAnimatedNode(5,JavaOnlyMap.of("type","props","props",JavaOnlyMap.of("style",4)));  mNativeAnimatedNodesManager.connectAnimatedNodes(1,3);  mNativeAnimatedNodesManager.connectAnimatedNodes(2,3);  mNativeAnimatedNodesManager.connectAnimatedNodes(3,4);  mNativeAnimatedNodesManager.connectAnimatedNodes(4,5);  mNativeAnimatedNodesManager.connectAnimatedNodeToView(5,50);}  }
class C{  @KnownFailure("It's not allowed to pass null as parent class loader to" + " a new ClassLoader anymore. Maybe we need to change" + " URLClassLoader to allow this? It's not specified.") public void test_getBundleLjava_lang_StringLjava_util_LocaleLjava_lang_ClassLoader(){  String classPath=System.getProperty("java.class.path");  StringTokenizer tok=new StringTokenizer(classPath,File.pathSeparator);  Vector<URL> urlVec=new Vector<URL>();  String resPackage=Support_Resources.RESOURCE_PACKAGE;  try {    while (tok.hasMoreTokens()) {      String path=tok.nextToken();      String url;      if (new File(path).isDirectory())       url="file:" + path + resPackage+ "subfolder/"; else       url="jar:file:" + path + "!"+ resPackage+ "subfolder/";      urlVec.addElement(new URL(url));    }  } catch (  MalformedURLException e) {  }  URL[] urls=new URL[urlVec.size()];  for (int i=0; i < urlVec.size(); i++)   urls[i]=urlVec.elementAt(i);  URLClassLoader loader=new URLClassLoader(urls,null);  String name=Support_Resources.RESOURCE_PACKAGE_NAME + ".hyts_resource";  ResourceBundle bundle=ResourceBundle.getBundle(name,Locale.getDefault());  assertEquals("Wrong value read","parent",bundle.getString("property"));  bundle=ResourceBundle.getBundle(name,Locale.getDefault(),loader);  assertEquals("Wrong cached value","resource",bundle.getString("property"));  try {    ResourceBundle.getBundle(null,Locale.getDefault(),loader);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle(name,null,loader);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle(name,Locale.getDefault(),(ClassLoader)null);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("",Locale.getDefault(),loader);    fail("MissingResourceException expected");  } catch (  MissingResourceException ee) {  }  B bb=new B();  String s=bb.find("nonexistent");  s=bb.find("name");  assertEquals("Wrong property got","Name",s);}  }
class C{  public static byte[] calculateHash(long salt,String password){  try {    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();    final DataOutputStream data=new DataOutputStream(buffer);    data.writeLong(salt);    data.writeUTF(password);    final MessageDigest digest=MessageDigest.getInstance(ALGORITHM);    return digest.digest(buffer.toByteArray());  } catch (  IOException e) {    throw new AssertionError(e);  }catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  private Builder(org.apache.nutch.storage.ProtocolStatus other){  super(org.apache.nutch.storage.ProtocolStatus.SCHEMA$);  if (isValidValue(fields()[0],other.code)) {    this.code=(java.lang.Integer)data().deepCopy(fields()[0].schema(),other.code);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.args)) {    this.args=(java.util.List<java.lang.CharSequence>)data().deepCopy(fields()[1].schema(),other.args);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.lastModified)) {    this.lastModified=(java.lang.Long)data().deepCopy(fields()[2].schema(),other.lastModified);    fieldSetFlags()[2]=true;  }}  }
class C{  public boolean match(MethodRefParameter node,Object other){  if (!(other instanceof MethodRefParameter)) {    return false;  }  MethodRefParameter o=(MethodRefParameter)other;  int level=node.getAST().apiLevel;  if (level >= AST.JLS3) {    if (node.isVarargs() != o.isVarargs()) {      return false;    }  }  return (safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeMatch(node.getName(),o.getName()));}  }
class C{  public void decode(FacesContext context,UIComponent component){  String clientId=component.getClientId(context);  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"Begin decoding component " + component.getId());  }  Map<String,String> requestParameterMap=context.getExternalContext().getRequestParameterMap();  if (requestParameterMap.containsKey(clientId)) {    ((UIForm)component).setSubmitted(true);  } else {    ((UIForm)component).setSubmitted(false);  }  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"End decoding component " + component.getId());  }  getLifecycle(context).addPhaseListener(new ResponsePhaseListener());}  }
class C{  public VerifyRepositoryRequestBuilder(ElasticsearchClient client,VerifyRepositoryAction action,String name){  super(client,action,new VerifyRepositoryRequest(name));}  }
class C{  public NominalPrediction(double actual,double[] distribution){  this(actual,distribution,1);}  }
class C{  protected void saveSoundPreferences(){  final Preferences prefs=Preferences.userNodeForPackage(ClipPlayer.class);  try {    prefs.flush();  } catch (  final BackingStoreException e) {    ClientLogger.logQuietly(e);  }}  }
class C{  public AutoFile(final String filename){  file=new File(filename);  this.filename=filename;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final boolean isInSphere(IMovingAgent agent){  return isInSphere(agent,false);}  }
class C{  public Boolean hasAllPermissions(){  String[] missingPermissions=getMissingPermissions();  return missingPermissions.length == 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public C lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public static boolean[] toBooleanArray(Float[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  protected void onProvidersChanged(){}  }
class C{  public final synchronized boolean computerLoaded(){  return (engineState.state != MainState.READ_OPTIONS) && (engineState.state != MainState.DEAD);}  }
class C{  public void add(String name,long cnt){  if (_values == null) {    _values=new ArrayList<>(30);  }  _values.add(new Count(this,name,cnt));}  }
class C{  @Override protected void createLabels(){  this.addLabel("PAA");  this.addLabel("PAA");  this.addLabel("PAA");  this.addLabel("PAA");}  }
class C{  public HelpTipObject(HelpTipObject parent){  this.id=parent.getId();  this.title=parent.getTitle();  this.question=parent.getQuestion();  this.answer=parent.getAnswer();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.deleted=parent.getDeleted();}  }
class C{  public static FieldAnnotation isWrite(Instruction ins,ConstantPoolGen cpg){  if (ins instanceof PUTFIELD || ins instanceof PUTSTATIC) {    FieldInstruction fins=(FieldInstruction)ins;    String className=fins.getClassName(cpg);    return new FieldAnnotation(className,fins.getName(cpg),fins.getSignature(cpg),fins instanceof PUTSTATIC);  } else {    return null;  }}  }
class C{  public boolean isCollection(){  return collection;}  }
class C{  public static <U,I,F>Function<U,IntPredicate> withFeatures(FastFeatureData<I,F,?> featureData){  IntSet itemsWithFeatures=new IntOpenHashSet();  featureData.getIidxWithFeatures().forEach(null);  return null;}  }
class C{  public Boolean isOSD(){  return osd;}  }
class C{  public double eval(double params[]){  return (params[0] / params[1] / params[2]/ params[3]);}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void refresh() throws CrlDownloadException {  String error=null;  for (  Map.Entry<String,X509CRL> entry : this.entrySet()) {    Date update=entry.getValue().getNextUpdate();    if (update.before(new Date())) {      String uriName=entry.getKey();      X509CRL newCrl;      try {        newCrl=downloadCrl(uriName);      } catch (      CrlDownloadException e) {        if (error == null) {          error=String.format("Unable to update CRL from %s during periodical refresh",uriName);        } else {          error+=String.format(error + ", %s",uriName);        }        logger.error(String.format("Unable to update CRL from %s during periodical refresh",uriName));        continue;      }      if (newCrl != null) {        logger.info("Refreshed CRL from URI " + uriName);        this.put(uriName,newCrl);      }    }  }  if (error != null) {    throw new CrlDownloadException(error);  }}  }
class C{  protected void updateCursor(){  if (this.wwd instanceof Component) {    ((Component)this.wwd).setCursor(this.getCursor());  }}  }
class C{  protected void registerSelectBoxAttributes(){  addAttributeProcessor(new SelectBoxSelectedLmlAttribute(),"selected","select","value");}  }
class C{  void run() throws ZygoteInit.MethodAndArgsCaller {  int loopCount=ZygoteInit.GC_LOOP_COUNT;  while (true) {    if (loopCount <= 0) {      ZygoteInit.gc();      loopCount=ZygoteInit.GC_LOOP_COUNT;    } else {      loopCount--;    }    if (runOnce()) {      break;    }  }}  }
class C{  protected Dimension computeFrameRectForContentRect(Dimension contentSize){  int frameWidth=contentSize.width + this.frameBorder * 2 + 4 * this.frameLineWidth + this.scrollBarSize;  int frameHeight=contentSize.height + this.frameBorder * 2 + this.getTitleBarHeight() + 2 * this.frameLineWidth;  return new Dimension(frameWidth,frameHeight);}  }
class C{  private void markRecoveryCancelled(){  InterProcessLock lock=null;  try {    lock=getRecoveryLock();    setRecoveryStatusWithEndTimeMarked(RecoveryStatus.Status.CANCELLED);  }  finally {    releaseLock(lock);  }}  }
class C{  private static boolean parse(Class<?> service,URL u) throws ServiceConfigurationError {  InputStream in=null;  BufferedReader r=null;  try {    in=u.openStream();    r=new BufferedReader(new InputStreamReader(in,"utf-8"));    int lc=1;    String ln;    while ((ln=r.readLine()) != null) {      int ci=ln.indexOf('#');      if (ci >= 0)       ln=ln.substring(0,ci);      ln=ln.trim();      int n=ln.length();      if (n != 0) {        if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))         fail(service,u,lc,"Illegal configuration-file syntax");        int cp=ln.codePointAt(0);        if (!Character.isJavaIdentifierStart(cp))         fail(service,u,lc,"Illegal provider-class name: " + ln);        for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) {          cp=ln.codePointAt(i);          if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))           fail(service,u,lc,"Illegal provider-class name: " + ln);        }        return true;      }    }  } catch (  FileNotFoundException x) {    return false;  }catch (  IOException x) {    fail(service,": " + x);  } finally {    try {      if (r != null)       r.close();    } catch (    IOException y) {      fail(service,": " + y);    }    try {      if (in != null)       in.close();    } catch (    IOException y) {      fail(service,": " + y);    }  }  return false;}  }
class C{  public String toString(){  StringBuffer s=new StringBuffer();  s.append("Emitter Set of:\n");  Iterator<EmitterDescriptor> i=emitters.iterator();  while (i.hasNext())   s.append(i.next().toString() + "\n");  s.append("-------------\n");  return s.toString();}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  if (!isAllocationValid()) {    Rectangle alloc=a.getBounds();    setSize(alloc.width,alloc.height);  }  return super.modelToView(pos,a,b);}  }
class C{  public boolean isFilterPresence_in(){  return filterPresence_in;}  }
class C{  public static long parseOctal(byte[] header,int offset,int length){  long result=0;  boolean stillPadding=true;  int end=offset + length;  for (int i=offset; i < end; ++i) {    if (header[i] == 0)     break;    if (header[i] == (byte)' ' || header[i] == '0') {      if (stillPadding)       continue;      if (header[i] == (byte)' ')       break;    }    stillPadding=false;    result=(result << 3) + (header[i] - '0');  }  return result;}  }
class C{  public AWTEvent peekEvent(int id){  pushPopLock.lock();  try {    for (int i=NUM_PRIORITIES - 1; i >= 0; i--) {      EventQueueItem q=queues[i].head;      for (; q != null; q=q.next) {        if (q.event.getID() == id) {          return q.event;        }      }    }  }  finally {    pushPopLock.unlock();  }  return null;}  }
class C{  public static boolean isAutogenerated(String name){  return IndexWriter.WRITE_LOCK_NAME.equals(name) || isChecksum(name);}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROJECT_REFERENCE;}  }
class C{  @Override public SerializerFactory withConfig(Config config){  if (_factoryConfig == config) {    return this;  }  if (getClass() != BeanSerializerFactory.class) {    throw new IllegalStateException("Subtype of BeanSerializerFactory (" + getClass().getName() + ") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with "+ "additional serializer definitions");  }  return new BeanSerializerFactory(config);}  }
class C{  public CriteriosBusquedaDocuBean(){}  }
class C{  public Ask(final String h,final String u,final String p,final String c,final String P) throws SocketException {  super(h,u,p,c,P,false);}  }
class C{  public synchronized String toString(){  StringBuffer sb=new StringBuffer();  if (dirtyComponents != null)   sb.append("" + dirtyComponents);  return sb.toString();}  }
class C{  public AuthorizationDataEntry(int type,byte[] data){  this.type=type;  this.data=data.clone();}  }
class C{  public InputStream post(Map<String,String> cookies,Map parameters) throws IOException {  setCookies(cookies);  postCookies();  setParameters(parameters);  return doPost();}  }
class C{  @Override protected void initVars(Instances data){  super.initVars(data);  m_factor=computeFactor(m_omega,m_sigma);  m_kernelPrecalc=new double[data.numInstances()];}  }
class C{  public static Player createPlayerWithPly(String type,char mark,int ply){  Player player=null;  if (type.equals(AlphaBeta)) {    player=new IntelligentAgent(mark,new AlphaBetaEvaluation(ply));  } else   if (type.equals(MiniMax)) {    player=new IntelligentAgent(mark,new MinimaxEvaluation(ply));  } else   if (type.equals(NegMax)) {    player=new IntelligentAgent(mark,new NegMaxEvaluation(ply));  } else {    throw new IllegalArgumentException("PlayerFactory.createPlayerWithPly received unknown type:" + type);  }  player.score(new BoardEvaluation());  return player;}  }
class C{  @Override public void start(){  frame=new JFrame();  frame.setLayout(new GridLayout(GRID_SIZE,GRID_SIZE));  for (int i=0; i < GRID_SIZE; i++) {    for (int j=0; j < GRID_SIZE; j++) {      JLabel label=new JLabel(" ");      label.setBorder(BorderFactory.createLineBorder(Color.BLACK));      frame.add(label);    }  }  ((JLabel)frame.getContentPane().getComponent(currentPosition)).setText(" HERE");  frame.setSize(500,500);  frame.setVisible(true);  paused=false;}  }
class C{  @action(name="cancel",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'cancel' peformative message.")) public Object primCancel(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,CANCEL,getContentArg(scope));}  }
class C{  public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected PacketCollector(Connection conection,PacketFilter packetFilter,int maxSize){  this.connection=conection;  this.packetFilter=packetFilter;  this.resultQueue=new ArrayBlockingQueue<Packet>(maxSize);}  }
class C{  public QueryExecutionLowMemoryException(){}  }
class C{  protected static File findRawDir(File dir){  for (int i=0; dir != null && i < 20; i++) {    File rawDir=findResRawDir(dir);    if (rawDir != null) {      return rawDir;    }    dir=dir.getParentFile();  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ARRAY_TYPE_SPECIFIER__SIZE:    setSize(SIZE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Deprecated public static <N,E>ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> graph){  return checkNotNull(graph);}  }
class C{  public final boolean isWriteAccess(){  return this.isWriteAccess;}  }
class C{  public static void cleanExternalCache(Context context){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    deleteFilesInDirectory(context.getExternalCacheDir());  }}  }
class C{  public Integer maxTermsPerShard(){  return maxTermsPerShard;}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public double distance(Vector2D v){  double delx=v.x - x;  double dely=v.y - y;  return Math.sqrt(delx * delx + dely * dely);}  }
class C{  protected int unwrapKey(Object key){  return ((Integer)key).intValue();}  }
class C{  public FindServersResponse clone(){  FindServersResponse result=new FindServersResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Servers != null) {    result.Servers=new ApplicationDescription[Servers.length];    for (int i=0; i < Servers.length; i++)     result.Servers[i]=Servers[i].clone();  }  return result;}  }
class C{  public StreamingPubsubIORead(DataflowRunner runner,PubsubUnboundedSource<T> transform){  this.transform=transform;}  }
class C{  private void verifyInt(Cursor cursor,String columnName,int expected){  int index=cursor.getColumnIndex(columnName);  int actual=cursor.getInt(index);  assertEquals(expected,actual);}  }
class C{  protected void assertContains(String result,String contains){  if (result.indexOf(contains) < 0) {    fail(result + " does not contain: " + contains);  }}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public static Command show(String title,String text,Command[] cmds,int type,Image icon,long timeout,Transition transition){  return show(title,text,null,cmds,type,icon,timeout,transition);}  }
class C{  public boolean overlaps(long minimum,long maximum){  long channelMin=getMinFrequency();  long channelMax=getMaxFrequency();  return ((minimum <= channelMin && channelMin <= maximum) || (minimum <= channelMax && channelMax <= maximum) || (minimum <= channelMin && channelMax <= maximum)|| (channelMin <= minimum && maximum <= channelMax));}  }
class C{  public boolean isForceFirstAdapter(){  return forceFirstAdapter;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory kMF;  for (int i=0; i < validValues.length; i++) {    kMF=KeyManagerFactory.getInstance(validValues[i],defaultProvider);    assertNotNull("No KeyManagerFactory created",kMF);    assertEquals(kMF.getAlgorithm(),validValues[i]);    assertEquals(kMF.getProvider(),defaultProvider);  }}  }
class C{  public void testBlockingNext() throws Exception {  File logDir=prepareLogDir("testNonexistingLogFile");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(1000);  writeEventsToLog(log,0,1000);  LogConnection conn=log.connect(true);  assertTrue("Seeking last event",conn.seek(999));  THLEvent e999=conn.next();  assertNotNull("Last event is found",e999);  try {    THLEvent e1000=conn.next();    throw new Exception("Found non-existent event: " + e1000.toString());  } catch (  LogTimeoutException e) {  }  THLEvent e1000a=conn.next(false);  assertNull("Non-blocking call returns null",e1000a);  conn.release();  log.release();}  }
class C{  public Field(String name,String type,Collection<String> options){  this.name=name;  this.type=type;  this.options=options;}  }
class C{  public void testUnpack() throws InvalidAdviceException {{    String bag="bag1";    Object[][] packedTuple={{"dsifji2oj","23498ngnjs"}};    BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack(bag,"pa","pb").emit("test1","oa","pb","pa","ob").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2","23498ngnjs","dsifji2oj","ooowoowq");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }{    String bag="bag7";    Object[][] packedTuple={{"dsifji2oj","23498ngnjs"}};    BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack(bag,"pa","pb").emit("test1","oa").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("d8jdj2");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }{    String bag="bag4";    Object[][] packedTuple={{"dsifji2oj","23498ngnjs"}};    BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);    EmitAPIForTest results=new EmitAPIForTest();    Advice advice=AdviceTestUtils.newAdvice().observe("oa","ob").unpack(bag,"pa","pb").emit("test1","pb").build(baggage,results);    assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);    advice.advise("d8jdj2","ooowoowq");    results.expectTuple("23498ngnjs");    results.check();    assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);  }}  }
class C{  public Builder timeoutMs(int timeoutMs){  this.connectionTimeoutMs=this.soTimeoutMs=timeoutMs;  return this;}  }
class C{  private double transStart(double value,Rectangle2D area,RectangleEdge edge,double length1,double length2){  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getX() + area.getWidth() * length1 / (length1 + length2);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=area.getMaxY();    max=area.getMaxY() - area.getHeight() * length1 / (length1 + length2);  }  if (isInverted()) {    return max - ((value - this.displayStart) / (this.fixedRange.getUpperBound() - this.displayStart)) * (max - min);  } else {    return min + ((value - this.displayStart) / (this.fixedRange.getUpperBound() - this.displayStart)) * (max - min);  }}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public double computeAverageInfoDistanceOfObservations(){  double infoDistance=0.0;  for (int b=0; b < totalObservations; b++) {    double marginalProbProducts=1.0;    for (int d=0; d < dimensions; d++) {      marginalProbProducts*=svkeMarginals[d].getProbability(observations[b][d],b);    }    double probJoint=mvkeJoint.getProbability(observations[b],b);    double logTerm=0.0;    double cont=0.0;    if (probJoint > 0.0) {      logTerm=marginalProbProducts / (probJoint * probJoint);      cont=Math.log(logTerm);    }    infoDistance+=cont;    if (debug) {      System.out.println(b + ": " + logTerm+ " -> "+ (cont / Math.log(2.0))+ " -> sum: "+ (infoDistance / Math.log(2.0)));    }  }  return infoDistance / (double)totalObservations / Math.log(2.0);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public XMLString xstr(){  return this;}  }
class C{  public void clearRequestProperty(String name){  Assertions.checkNotNull(name);synchronized (requestProperties) {    requestProperties.remove(name);  }}  }
class C{  public final short readShort(){  int ch1=read();  int ch2=read() & 0xFF;  return (short)((ch1 << 8) + (ch2 << 0));}  }
class C{  protected void sequence_TestedProjects(ISerializationContext context,TestedProjects semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void textChanged(String text) throws DOMException {  ((SVGOMDocument)ownerDocument).overrideStyleTextChanged(SVGStylableElement.this,text);}  }
class C{  public ActivityTransitionExitHelper toView(View toView){  this.toView=(PhotoView)toView;  return this;}  }
class C{  protected void responseSent(StreamResponseMessage responseMessage){  if (syncProtocol != null)   syncProtocol.responseSent(responseMessage);}  }
class C{  public static Object deserializeBlob(byte[] blob) throws IOException, ClassNotFoundException {  return deserializeBlob(blob,null,null);}  }
class C{  public double nextDoubleInRange(double lowerBound,double upperBound) throws IllegalArgumentException {  if (upperBound < lowerBound) {    throw new IllegalArgumentException("RandomGenerator.nextDoubleInRange : the upper bound of the " + "random number range should be greater than the lower bound.");  }  return ((nextDouble() * (upperBound - lowerBound)) + lowerBound);}  }
class C{  private Node deleteMax(Node x){  if (x.right == null)   return x.left;  x.right=deleteMax(x.right);  x.size=1 + size(x.left) + size(x.right);  x.height=1 + Math.max(height(x.left),height(x.right));  return balance(x);}  }
class C{  public final GVector sub(GVector v){  if (length != v.length) {    throw new MatrixSizeException();  }  double[] tmp=new double[length];  for (int i=0; i < length; i++) {    tmp[i]=values[i] - v.values[i];  }  return new GVector(tmp);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Field(4) public org.bridj.jawt.JAWT_Rectangle clip(){  return this.io.getNativeObjectField(this,4);}  }
class C{  default Count keys(long cost,boolean isEstimateOk){  return null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") protected void receiveTurns(Packet packet){  game.setTurnVector((List<GameTurn>)packet.getObject(0));}  }
class C{  private void validateUserAttributeParam(Set<UserAttributeParam> attributeParams){  for (  UserAttributeParam userAttributeParam : attributeParams) {    if (userAttributeParam != null) {      ArgValidator.checkFieldNotNull(userAttributeParam.getKey(),"key");      ArgValidator.checkFieldNotEmpty(userAttributeParam.getValues(),"values");    }  }}  }
class C{  private long computePresentationTime(long frameIndex){  return 132 + frameIndex * 1000000 / m_framerate;}  }
class C{  public static boolean isUppercaseAlpha(char c){  return (c >= 'A') && (c <= 'Z');}  }
class C{  private static Map<String,Object> emptyMap(){  return new HashMap<String,Object>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.933 -0500",hash_original_method="B3A224AA064D57107491E8991A407E79",hash_generated_method="B17AB845B2A2BD4BDE544034E2666B99") public boolean hasError(int error){  boolean rval=(0 <= error && error < SslError.SSL_MAX_ERROR);  if (rval) {    rval=((mErrors & (0x1 << error)) != 0);  }  return rval;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.INFOMODEL_SOURCE;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.565 -0500",hash_original_method="8F95FC70B656D084C5E20FAE69C56CE9",hash_generated_method="4D020F8E048BBBAD0CFCC7AE746BF3E2") public boolean add(WorkSource other){synchronized (sTmpWorkSource) {    return updateLocked(other,false,false);  }}  }
class C{  public final void testGetPolicyQualifier01() throws IOException {  byte[] encoding=getDerEncoding();  byte[] pqEncoding=new byte[28];  System.arraycopy(encoding,12,pqEncoding,0,pqEncoding.length);  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] pqEncodingRet=i.getPolicyQualifier();  assertTrue(Arrays.equals(pqEncoding,pqEncodingRet));}  }
class C{  private void addExportAddVolumeSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,Map<URI,Integer> snapshots) throws InternalException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);  String exportStep=workflow.createStepId();  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"export add volume");  Map<URI,Map<URI,Integer>> storageToBlockObjects=getStorageToBlockObjects(snapshots);  for (  Map.Entry<URI,Map<URI,Integer>> entry : storageToBlockObjects.entrySet()) {    _log.info(String.format("Adding workflow step to add RP bookmark and associated target volumes to export.  ExportGroup: %s, Storage System: %s, Volume Map: %s",exportGroup.getId(),entry.getKey(),entry.getValue()));    _exportWfUtils.generateExportGroupAddVolumes(workflow,null,STEP_ENABLE_IMAGE_ACCESS,entry.getKey(),exportGroupID,entry.getValue());  }  _log.info("Finished adding export group add volume steps in workflow: " + exportGroup.getId());}  }
class C{  private void createAdjacencyLists(List<Edge> edges,int numberOfVertices){  for (  Edge edge : edges) {    addEdge(edge.u,edge.v);  }}  }
class C{  private boolean advanceCursorToNextBatch(){  long trackPointId=lastTrackPointId == -1L ? -1L : lastTrackPointId + (descending ? -1 : 1);  Log.d(TAG,"Advancing track point id: " + trackPointId);  cursor.close();  cursor=getCursor(trackPointId);  return cursor != null;}  }
class C{  public static String toDisplayName(String s){  Object[] components=parseBytecodeName(s);  for (int i=0; i < components.length; i++) {    if (!(components[i] instanceof String))     continue;    String sn=(String)components[i];    if (!isJavaIdent(sn) || sn.indexOf('$') >= 0) {      components[i]=quoteDisplay(sn);    }  }  return appendAll(components);}  }
class C{  public static void updateAutomationBox(Turnout t,JComboBox<String> cb){  TurnoutOperation[] ops=TurnoutOperationManager.getInstance().getTurnoutOperations();  cb.removeAllItems();  Vector<String> strings=new Vector<String>(20);  Vector<String> defStrings=new Vector<String>(20);  if (log.isDebugEnabled()) {    log.debug("start " + ops.length);  }  for (int i=0; i < ops.length; ++i) {    if (log.isDebugEnabled()) {      log.debug("isDef " + ops[i].isDefinitive() + " mFMM "+ ops[i].matchFeedbackMode(t.getFeedbackMode())+ " isNonce "+ ops[i].isNonce());    }    if (!ops[i].isDefinitive() && ops[i].matchFeedbackMode(t.getFeedbackMode()) && !ops[i].isNonce()) {      strings.addElement(ops[i].getName());    }  }  if (log.isDebugEnabled()) {    log.debug("end");  }  for (int i=0; i < ops.length; ++i) {    if (ops[i].isDefinitive() && ops[i].matchFeedbackMode(t.getFeedbackMode())) {      defStrings.addElement(ops[i].getName());    }  }  java.util.Collections.sort(strings);  java.util.Collections.sort(defStrings);  strings.insertElementAt(Bundle.getMessage("TurnoutOperationOff"),0);  strings.insertElementAt(Bundle.getMessage("TurnoutOperationDefault"),1);  for (int i=0; i < defStrings.size(); ++i) {    try {      strings.insertElementAt(defStrings.elementAt(i),i + 2);    } catch (    java.lang.ArrayIndexOutOfBoundsException obe) {    }  }  for (int i=0; i < strings.size(); ++i) {    cb.addItem(strings.elementAt(i));  }  if (t.getInhibitOperation()) {    cb.setSelectedIndex(0);  } else   if (t.getTurnoutOperation() == null) {    cb.setSelectedIndex(1);  } else   if (t.getTurnoutOperation().isNonce()) {    cb.setSelectedIndex(2);  } else {    cb.setSelectedItem(t.getTurnoutOperation().getName());  }}  }
class C{  void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public Eval<Maybe<V>> nextValue(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  final LazyImmutable<Boolean> requested=LazyImmutable.def();  final Maybe<Eval<Maybe<V>>> nested=get(key).peek(null).map(null);  return nested.orElse(Eval.now(Maybe.<V>none()));}  }
class C{  public NativePooledByteBufferOutputStream(NativeMemoryChunkPool pool){  this(pool,pool.getMinBufferSize());}  }
class C{  public static OnInsertSplitStreamItem create(InsertIntoClause insertInto,SelectClause selectClause,Expression whereClause){  return new OnInsertSplitStreamItem(insertInto,selectClause,whereClause);}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= 16;}  }
class C{  public static double normalizeMinusHalfPiHalfPiFast(final double angle){  if (angle >= -Math.PI / 2 && angle <= Math.PI / 2) {    return angle;  }  return remainderPiFast(angle);}  }
class C{  protected int defaultCardinality(){  return 2;}  }
class C{  public boolean isNodeConsistentArea(){  SegmentIntersector intersector=geomGraph.computeSelfNodes(li,true,true);  if (intersector.hasProperIntersection()) {    invalidPoint=intersector.getProperIntersectionPoint();    return false;  }  nodeGraph.build(geomGraph);  return isNodeEdgeAreaLabelsConsistent();}  }
class C{  private boolean isNum(String str){  return !str.equals("") && str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$");}  }
class C{  public JdbcConnection(final DataSource dataSource){  this.setDataSource(dataSource);}  }
class C{  @NotNull private static File identifyBranchHeadFile(@NotNull HgVersion version,@NotNull File parentCacheFile){  if (version.hasBranch2()) {    File file=new File(parentCacheFile,"branch2-served");    return file.exists() ? file : new File(parentCacheFile,"branch2-base");  }  if (version.hasBranchHeadsBaseServed()) {    File file=new File(parentCacheFile,"branchheads-served");    return file.exists() ? file : new File(parentCacheFile,"branchheads-base");  }  return new File(parentCacheFile,"branchheads");}  }
class C{  @Override public void resetReferences(){  if (_refs != null) {    _refs.clear();    _refCount=0;  }}  }
class C{  public synchronized void clear(){  mCategories.clear();  mValues.clear();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,numFoldsTipText(),"" + getDefaultNumFolds(),'F');  OptionUtils.addFlag(result,preserveOrderTipText(),'O');  OptionUtils.addOption(result,seedTipText(),"" + getDefaultSeed(),'S');  OptionUtils.addOption(result,thresholdTipText(),"" + getDefaultThreshold(),'T');  OptionUtils.addOption(result,verbosityTipText(),"" + getDefaultVerbosity(),'V');  OptionUtils.addOption(result,numThreadsTipText(),"" + getDefaultNumThreads(),"num-threads");  return OptionUtils.toEnumeration(result);}  }
class C{  public static ResultSet search(Connection conn,String text,int limit,int offset) throws SQLException {  return search(conn,text,limit,offset,false);}  }
class C{  @Override public final boolean isValid(){  return isValid;}  }
class C{  protected ArrayBindingPatternImpl(){  super();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public void testDelete5() throws SQLException {  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 1;");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKCASCADE_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be no rows",0,r.getInt(1));  r.close();}  }
class C{  public blockquote removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void buildNotification(NotificationCompat.Action action){  final NotificationCompat.MediaStyle style=new NotificationCompat.MediaStyle();  Intent intent=new Intent(getApplicationContext(),BackgroundAudioService.class);  intent.setAction(ACTION_STOP);  PendingIntent stopPendingIntent=PendingIntent.getService(getApplicationContext(),1,intent,0);  Intent clickIntent=new Intent(this,MainActivity.class);  clickIntent.setAction(Intent.ACTION_MAIN);  clickIntent.addCategory(Intent.CATEGORY_LAUNCHER);  PendingIntent clickPendingIntent=PendingIntent.getActivity(this,0,clickIntent,0);  builder=new NotificationCompat.Builder(this);  builder.setSmallIcon(R.mipmap.ic_launcher);  builder.setContentTitle(videoItem.getTitle());  builder.setContentInfo(videoItem.getDuration());  builder.setShowWhen(false);  builder.setContentIntent(clickPendingIntent);  builder.setDeleteIntent(stopPendingIntent);  builder.setOngoing(false);  builder.setSubText(videoItem.getViewCount());  builder.setStyle(style);  if (videoItem.getThumbnailURL() != null && !videoItem.getThumbnailURL().isEmpty()) {    Picasso.with(this).load(videoItem.getThumbnailURL()).into(target);  }  builder.addAction(generateAction(android.R.drawable.ic_media_previous,"Previous",ACTION_PREVIOUS));  builder.addAction(action);  builder.addAction(generateAction(android.R.drawable.ic_media_next,"Next",ACTION_NEXT));  style.setShowActionsInCompactView(0,1,2);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(1,builder.build());}  }
class C{  public static boolean canPaginate(Class<?> resourceClass,EntityDictionary dictionary,RequestScope scope){  CanPaginateVisitor visitor=new CanPaginateVisitor(dictionary,scope);  Class<? extends Annotation> annotationClass=ReadPermission.class;  ParseTree classPermissions=dictionary.getPermissionsForClass(resourceClass,annotationClass);  PaginationStatus canPaginateClass=PaginationStatus.CAN_PAGINATE;  if (classPermissions != null) {    canPaginateClass=visitor.visit(classPermissions);  }  List<String> fields=dictionary.getAllFields(resourceClass);  String resourceName=dictionary.getJsonAliasFor(resourceClass);  Set<String> requestedFields=scope.getSparseFields().getOrDefault(resourceName,Collections.EMPTY_SET);  boolean canPaginate=true;  for (  String field : fields) {    if (!requestedFields.isEmpty() && !requestedFields.contains(field)) {      continue;    }    PaginationStatus canPaginateField=canPaginateClass;    ParseTree fieldPermissions=dictionary.getPermissionsForField(resourceClass,field,annotationClass);    if (fieldPermissions != null) {      canPaginateField=visitor.visit(fieldPermissions);    }    if (canPaginateField == PaginationStatus.USER_CHECK_TRUE) {      return true;    }    if (canPaginateField == PaginationStatus.CANNOT_PAGINATE) {      canPaginate=false;    }  }  return canPaginate;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.key.getSolrFieldName());  sb.append(':').append(this.value ? "true" : "false");  return sb.toString();}  }
class C{  public void destroyApp(boolean unconditional){  bFirst=false;  if (led1 != null) {    try {      led1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led1=null;  }  if (led2 != null) {    try {      led2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    led2=null;  }  if (ledPort != null) {    try {      ledPort.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    ledPort=null;  }  if (button1 != null) {    try {      button1.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button1=null;  }  if (button2 != null) {    try {      button2.close();    } catch (    IOException ex) {      ex.printStackTrace();    }    button2=null;  }}  }
class C{  public void mouseReleased(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  public boolean isReferenceBudget(final Budget budget){  boolean isReference=false;  if (budget == null) {    isReference=false;    return isReference;  }  final String mPath=budget.getMaterializedPath();  if (LOGGER.isInfoEnabled())   LOGGER.info("meterialized path for the Budget" + mPath);  if (mPath == null || mPath.isEmpty())   throw new ApplicationRuntimeException("Materialized path is not set for the Budget " + budget.getName()); else   if (budget.getIsPrimaryBudget() && budget.getIsActiveBudget()) {    isReference=false;    return isReference;  } else {    final int start=mPath.indexOf('.');    if (start != -1) {      final String rootPath=mPath.substring(0,start);      if (LOGGER.isInfoEnabled())       LOGGER.info("meterialized path for root the Budget" + "   " + rootPath);      final Budget rootBudget=budgetService.find("from Budget where materializedPath=?",rootPath);      if (rootBudget == null)       throw new ApplicationRuntimeException("Materialized path is incorrect please verify for " + rootPath); else       if (rootBudget.getIsPrimaryBudget() && rootBudget.getIsActiveBudget())       isReference=false; else       isReference=true;    } else     isReference=true;  }  return isReference;}  }
class C{  protected EventValueReferenceExpressionImpl(){  super();}  }
class C{  public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {  int len;  int fileType;  String filename, urlName;  if (cmd.startsWith("GET /"))   filename=urlName=cmd.substring(5,cmd.indexOf(' ',5)); else   throw new BadHttpRequest();  if (filename.endsWith(".class"))   fileType=typeClass; else   if (filename.endsWith(".html") || filename.endsWith(".htm"))   fileType=typeHtml; else   if (filename.endsWith(".gif"))   fileType=typeGif; else   if (filename.endsWith(".jpg"))   fileType=typeJpeg; else   fileType=typeText;  len=filename.length();  if (fileType == typeClass && letUsersSendClassfile(out,filename,len))   return;  checkFilename(filename,len);  if (htmlfileBase != null)   filename=htmlfileBase + filename;  if (File.separatorChar != '/')   filename=filename.replace('/',File.separatorChar);  File file=new File(filename);  if (file.canRead()) {    sendHeader(out,file.length(),fileType);    FileInputStream fin=new FileInputStream(file);    byte[] filebuffer=new byte[4096];    for (; ; ) {      len=fin.read(filebuffer);      if (len <= 0)       break; else       out.write(filebuffer,0,len);    }    fin.close();    return;  }  if (fileType == typeClass) {    InputStream fin=getClass().getResourceAsStream("/" + urlName);    if (fin != null) {      ByteArrayOutputStream barray=new ByteArrayOutputStream();      byte[] filebuffer=new byte[4096];      for (; ; ) {        len=fin.read(filebuffer);        if (len <= 0)         break; else         barray.write(filebuffer,0,len);      }      byte[] classfile=barray.toByteArray();      sendHeader(out,classfile.length,typeClass);      out.write(classfile);      fin.close();      return;    }  }  throw new BadHttpRequest();}  }
class C{  public int size(){  return this.container.size();}  }
class C{  public BaseSVGPARValue(){  invalidate();}  }
class C{  public boolean isDirectory(String path){  try {    ZipEntry entry=getZipEntry(path);    return entry != null && entry.isDirectory();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }  return false;}  }
class C{  public Environment.Variable createSysProperty(String key,File file){  Environment.Variable var=new Environment.Variable();  var.setKey(key);  var.setFile(file);  return var;}  }
class C{  protected void ensureRowsAreVisible(int beginRow,int endRow){  if (tree != null && beginRow >= 0 && endRow < getRowCount(tree)) {    boolean scrollVert=DefaultLookup.getBoolean(tree,this,"Tree.scrollsHorizontallyAndVertically",false);    if (beginRow == endRow) {      Rectangle scrollBounds=getPathBounds(tree,getPathForRow(tree,beginRow));      if (scrollBounds != null) {        if (!scrollVert) {          scrollBounds.x=tree.getVisibleRect().x;          scrollBounds.width=1;        }        tree.scrollRectToVisible(scrollBounds);      }    } else {      Rectangle beginRect=getPathBounds(tree,getPathForRow(tree,beginRow));      if (beginRect != null) {        Rectangle visRect=tree.getVisibleRect();        Rectangle testRect=beginRect;        int beginY=beginRect.y;        int maxY=beginY + visRect.height;        for (int counter=beginRow + 1; counter <= endRow; counter++) {          testRect=getPathBounds(tree,getPathForRow(tree,counter));          if (testRect == null) {            return;          }          if ((testRect.y + testRect.height) > maxY)           counter=endRow;        }        tree.scrollRectToVisible(new Rectangle(visRect.x,beginY,1,testRect.y + testRect.height - beginY));      }    }  }}  }
class C{  public synchronized ClusterNetworkReconfigStatus queryClusterNetworkReconfigStatus() throws Exception {  ClusterNetworkReconfigStatus ipReconfigStatus=new ClusterNetworkReconfigStatus();  config=_coordinator.getCoordinatorClient().queryConfiguration(IpReconfigConstants.CONFIG_KIND,IpReconfigConstants.CONFIG_ID);  if (config != null) {    ClusterNetworkReconfigStatus.Status status=ClusterNetworkReconfigStatus.Status.valueOf(config.getConfig(IpReconfigConstants.CONFIG_STATUS_KEY));    ipReconfigStatus.setStatus(status);    if (isFailed(config)) {      String errmsg=config.getConfig(IpReconfigConstants.CONFIG_ERROR_KEY);      ipReconfigStatus.setMessage(errmsg);    }    ipReconfigStatus.setExpiration(config.getConfig(IpReconfigConstants.CONFIG_EXPIRATION_KEY));  }  return ipReconfigStatus;}  }
class C{  private boolean checkOk(final byte[] result) throws ProtocolException {  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    return true;  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: checkOk: NO");    }    return false;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: checkOk: " + res);    }    throw new ProtocolException();  }}  }
class C{  protected void expand(ResultNode node){  testTreeViewer.expandToLevel(node,0);}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_attribute == null) {    text.append("Predicting constant " + m_intercept);  } else {    text.append("Linear regression on " + m_attribute.name() + "\n\n");    text.append(Utils.doubleToString(m_slope,2) + " * " + m_attribute.name());    if (m_intercept > 0) {      text.append(" + " + Utils.doubleToString(m_intercept,2));    } else {      text.append(" - " + Utils.doubleToString((-m_intercept),2));    }    text.append("\n\nPredicting " + Utils.doubleToString(m_classMeanForMissing,2) + " if attribute value is missing.");    if (m_outputAdditionalStats) {      int attNameLength=m_attribute.name().length() + 3;      if (attNameLength < "Variable".length() + 3) {        attNameLength="Variable".length() + 3;      }      text.append("\n\nRegression Analysis:\n\n" + Utils.padRight("Variable",attNameLength) + "  Coefficient     SE of Coef        t-Stat");      text.append("\n" + Utils.padRight(m_attribute.name(),attNameLength));      text.append(Utils.doubleToString(m_slope,12,4));      text.append("   " + Utils.doubleToString(m_seSlope,12,5));      text.append("   " + Utils.doubleToString(m_tstatSlope,12,5));      text.append(Utils.padRight("\nconst",attNameLength + 1) + Utils.doubleToString(m_intercept,12,4));      text.append("   " + Utils.doubleToString(m_seIntercept,12,5));      text.append("   " + Utils.doubleToString(m_tstatIntercept,12,5));      text.append("\n\nDegrees of freedom = " + Integer.toString(m_df));      text.append("\nR^2 value = " + Utils.doubleToString(m_rsquared,5));      text.append("\nAdjusted R^2 = " + Utils.doubleToString(m_rsquaredAdj,5));      text.append("\nF-statistic = " + Utils.doubleToString(m_fstat,5));    }  }  text.append("\n");  return text.toString();}  }
class C{  public static int forward(ByteBuffer buffer,int count){  int newPos=buffer.position() + count;  buffer.position(newPos);  return newPos;}  }
class C{  public CDebuggerContainerNodeComponent(final JTree projectTree,final IDatabase database){  super(new CDebuggersTable(projectTree,database),null,null);  m_database=database;  m_listener=new InternalDebuggerDescriptionManagerListener();  m_database.getContent().getDebuggerTemplateManager().addListener(m_listener);  updateBorderText(getBorderText());}  }
class C{  public MtfFile(InputStream is) throws EntityLoadingException {  try {    BufferedReader r=new BufferedReader(new InputStreamReader(is));    version=r.readLine();    if (version == null) {      throw new EntityLoadingException("MTF File empty!");    }    if (!version.trim().equalsIgnoreCase("Version:1.0") && !version.trim().equalsIgnoreCase("Version:1.1") && !version.trim().equalsIgnoreCase("Version:1.2")) {      throw new EntityLoadingException("Wrong MTF file version.");    }    name=r.readLine();    model=r.readLine();    critData=new String[9][12];    readCrits(r);    r.close();  } catch (  IOException ex) {    ex.printStackTrace();    throw new EntityLoadingException("I/O Error reading file");  }catch (  StringIndexOutOfBoundsException ex) {    ex.printStackTrace();    throw new EntityLoadingException("StringIndexOutOfBoundsException reading file (format error)");  }catch (  NumberFormatException ex) {    ex.printStackTrace();    throw new EntityLoadingException("NumberFormatException reading file (format error)");  }}  }
class C{  public AuthenticatorException(){  super();}  }
class C{  public static String pluralCreature(final String noun){  if (noun.equals("chicken")) {    return "chickens";  }  return plural(noun);}  }
class C{  private void log(String message){  Log.d(CaptureService.class.getSimpleName(),message);}  }
class C{  private void dumpProvider(String prefix,FileDescriptor fd,PrintWriter pw,final ContentProviderRecord r,String[] args,boolean dumpAll){  String innerPrefix=prefix + "  ";synchronized (mAm) {    pw.print(prefix);    pw.print("PROVIDER ");    pw.print(r);    pw.print(" pid=");    if (r.proc != null)     pw.println(r.proc.pid); else     pw.println("(not running)");    if (dumpAll) {      r.dump(pw,innerPrefix,true);    }  }  if (r.proc != null && r.proc.thread != null) {    pw.println("    Client:");    pw.flush();    try {      TransferPipe tp=new TransferPipe();      try {        r.proc.thread.dumpProvider(tp.getWriteFd().getFileDescriptor(),r.provider.asBinder(),args);        tp.setBufferPrefix("      ");        tp.go(fd,2000);      }  finally {        tp.kill();      }    } catch (    IOException ex) {      pw.println("      Failure while dumping the provider: " + ex);    }catch (    RemoteException ex) {      pw.println("      Got a RemoteException while dumping the service");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.641 -0500",hash_original_method="11EC393E75756EFF910C83D0B79625D8",hash_generated_method="72AE5EEDB6F9FA7CC8AC78AEB9736027") public Item(Intent intent){  mText=null;  mIntent=intent;  mUri=null;}  }
class C{  public static Map<String,Object> jsonToStorageEntry(String fmJson) throws IOException {  Map<String,Object> entry=new HashMap<String,Object>();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  String tpSrcPort="NOT_SPECIFIED";  String tpDstPort="NOT_SPECIFIED";  String ipProto="NOT_SPECIFIED";  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();switch (n) {case StaticFlowEntryPusher.COLUMN_NAME:      entry.put(StaticFlowEntryPusher.COLUMN_NAME,jp.getText());    break;case StaticFlowEntryPusher.COLUMN_SWITCH:  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TABLE_ID:entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIVE:entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PRIORITY:entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,jp.getText());break;case StaticFlowEntryPusher.COLUMN_COOKIE:entry.put(StaticFlowEntryPusher.COLUMN_COOKIE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IN_PORT:entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_SRC:entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_DST:entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_TOS:entry.put(StaticFlowEntryPusher.COLUMN_NW_TOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_ECN:entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DSCP:entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_PROTO:entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,jp.getText());ipProto=jp.getText();break;case StaticFlowEntryPusher.COLUMN_NW_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_DST:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_DST:entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TP_SRC,jp.getText());tpSrcPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_TP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TP_DST,jp.getText());tpDstPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_ICMP_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_OPCODE:entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_SLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TARGET:entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_TC:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_BOS:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TUNNEL_ID:entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PBB_ISID:entry.put(StaticFlowEntryPusher.COLUMN_PBB_ISID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,jp.getText());break;default :log.error("Could not decode field from JSON string: {}",n);break;}}if (ipProto.equalsIgnoreCase("tcp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("udp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("sctp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,tpDstPort);}} else {log.debug("Got IP protocol of '{}' and tp-src of '{}' and tp-dst of '" + tpDstPort + "' via SFP REST API",ipProto,tpSrcPort);}return entry;}  }
class C{  protected boolean escapingNotNeeded(char ch){  final boolean ret;  if (ch < 127) {    if (ch >= CharInfo.S_SPACE || (CharInfo.S_LINEFEED == ch || CharInfo.S_CARRIAGERETURN == ch || CharInfo.S_HORIZONAL_TAB == ch))     ret=true; else     ret=false;  } else {    ret=m_encodingInfo.isInEncoding(ch);  }  return ret;}  }
class C{  public Diagnostic withUser(User user){  this.user=user;  return this;}  }
class C{  public static OutputStream ostream(String f){  return ostream(new File(f));}  }
class C{  public final void evictAll(){  trimToSize(-1);}  }
class C{  public Set<State> initAndStart(StateMachine stateMachine){  Context context=new RAMContext(System.currentTimeMillis(),null,stateMachine);  final List<String> triggeredEvents=eventsDAO.findTriggeredEventsNamesBySMId(stateMachine.getId());  Set<State> initialStates=context.getInitialStates(new HashSet<>(triggeredEvents));  executeStates(stateMachine.getId(),initialStates);  return initialStates;}  }
class C{  public static ThreadSafeSwfInfo[] wrapArray(Object syncObj,SwfInfo[] swfinfos){  ThreadSafeSwfInfo[] threadSafeSwfInfos=new ThreadSafeSwfInfo[swfinfos.length];  for (int i=0; i < swfinfos.length; ++i) {    threadSafeSwfInfos[i]=wrap(syncObj,swfinfos[i]);  }  return threadSafeSwfInfos;}  }
class C{  public void updateNull(int columnIndex) throws SQLException {  throw new NotUpdatable();}  }
class C{  public GifAnimationMetaData(@NonNull byte[] bytes) throws IOException {  this(GifInfoHandle.openByteArray(bytes,true));}  }
class C{  protected void update(){  selectionChanged((IStructuredSelection)getViewer().getSelection());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.202 -0400",hash_original_method="4F5903FB28AFE51D88D6C61BC7D88805",hash_generated_method="80F366C3312F3C4EC2DF49DAC9179143") public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public MetaData metaData(){  return routingNodes.metaData();}  }
class C{  private PostgreSQLSettingsFunctions(){}  }
class C{  public String toString(){  if (m_ZeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_ZeroR.toString());    return buf.toString();  }  if (m_Classifiers == null) {    return "RandomSubSpace: No model built yet.";  }  StringBuffer text=new StringBuffer();  text.append("All the base classifiers: \n\n");  for (int i=0; i < m_Classifiers.length; i++)   text.append(m_Classifiers[i].toString() + "\n\n");  return text.toString();}  }
class C{  public InliningResult(final CodeNode firstNode,final CodeNode secondNode){  m_firstNode=firstNode;  m_secondNode=secondNode;}  }
class C{  public BufferedOutputStream(OutputStream out,int size,String name){  this.out=out;  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];  streamCount++;  this.name=name;  Util.getImplementation().logStreamCreate(name,false,streamCount);}  }
class C{  public static String filterType(String data){  String[] dataSplitArray=data.split("\\.");  return dataSplitArray[0].split(" ")[1];}  }
class C{  public SID(String textual) throws SmbException {  StringTokenizer st=new StringTokenizer(textual,"-");  if (st.countTokens() < 3 || !st.nextToken().equals("S"))   throw new SmbException("Bad textual SID format: " + textual);  this.revision=Byte.parseByte(st.nextToken());  String tmp=st.nextToken();  long id=0;  if (tmp.startsWith("0x"))   id=Long.parseLong(tmp.substring(2),16); else   id=Long.parseLong(tmp);  this.identifier_authority=new byte[6];  for (int i=5; id > 0; i--) {    this.identifier_authority[i]=(byte)(id % 256);    id>>=8;  }  this.sub_authority_count=(byte)st.countTokens();  if (this.sub_authority_count > 0) {    this.sub_authority=new int[this.sub_authority_count];    for (int i=0; i < this.sub_authority_count; i++)     this.sub_authority[i]=(int)(Long.parseLong(st.nextToken()) & 0xFFFFFFFFL);  }}  }
class C{  @Nonnull public BugInstance addMethod(JavaClassAndMethod classAndMethod){  return addMethod(classAndMethod.getJavaClass(),classAndMethod.getMethod());}  }
class C{  private void addLineNumber(){  sb.append(String.format("%06x",lines.size() << hls.shiftCount)).append(":  ");}  }
class C{  public boolean removeNodes(List newNodes){  throw new UnsupportedOperationException();}  }
class C{  protected void closeLinks(final Handler<AsyncResult<Void>> closeHandler){  Objects.requireNonNull(closeHandler);  @SuppressWarnings("rawtypes") final List<Future> closeHandlers=new ArrayList<>();  context.runOnContext(null);  CompositeFuture.all(closeHandlers).setHandler(null);}  }
class C{  public ClassPathScanner(ClassLoader classLoader){  this.classLoader=classLoader;}  }
class C{  private static void installJavaStuff(Document document){  String[] types=new String[]{IJavaPartitions.JAVA_DOC,IJavaPartitions.JAVA_MULTI_LINE_COMMENT,IJavaPartitions.JAVA_SINGLE_LINE_COMMENT,IJavaPartitions.JAVA_STRING,IJavaPartitions.JAVA_CHARACTER,IDocument.DEFAULT_CONTENT_TYPE};  FastPartitioner partitioner=new FastPartitioner(new FastJavaPartitionScanner(),types);  partitioner.connect(document);  document.setDocumentPartitioner(IJavaPartitions.JAVA_PARTITIONING,partitioner);}  }
class C{  default Builder withPort(int port){  return with(PORT,port);}  }
class C{  public void actionPerformed(ActionEvent e){  final JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    boolean beep=true;    try {      final int start=target.getSelectionStart();      final Element line=Utilities.getParagraphElement(target,start);      int end;      if (deleteNextWordAction == getValue(Action.NAME)) {        end=Utilities.getNextWordInParagraph(target,line,start,false);        if (end == java.text.BreakIterator.DONE) {          final int endOfLine=line.getEndOffset();          if (start == endOfLine - 1) {            end=endOfLine;          } else {            end=endOfLine - 1;          }        }      } else {        end=Utilities.getPrevWordInParagraph(target,line,start);        if (end == java.text.BreakIterator.DONE) {          final int startOfLine=line.getStartOffset();          if (start == startOfLine) {            end=startOfLine - 1;          } else {            end=startOfLine;          }        }      }      int offs=Math.min(start,end);      int len=Math.abs(end - start);      if (offs >= 0) {        target.getDocument().remove(offs,len);        beep=false;      }    } catch (    BadLocationException ignore) {    }    if (beep) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  CompletionsTermsReader(IndexInput dictIn,long offset,long minWeight,long maxWeight,byte type) throws IOException {  assert minWeight <= maxWeight;  assert offset >= 0l && offset < dictIn.length();  this.dictIn=dictIn;  this.offset=offset;  this.minWeight=minWeight;  this.maxWeight=maxWeight;  this.type=type;}  }
class C{  public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){  Objects.requireNonNull(notifications);  final int position=indexOf(notifications,startId);  if (position == -1) {    return Iterables.limit(notifications,limitSize);  }  if (inclusive) {    return Iterables.limit(Iterables.skip(notifications,position),limitSize);  }  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);}  }
class C{  @TCB static void stripBannedCodeunits(StringBuilder sb){  stripBannedCodeunits(sb,0);}  }
class C{  public Stream<Tuple2id> similarItems(int iidx){  return sim.similarElems(iidx);}  }
class C{  public String globalInfo(){  return "PLST - Principle Label Space Transformation. Uses SVD to generate a matrix " + "that transforms the label space. This implementation is adapted from the " + "MatLab implementation provided by the authors.\n\n"+ "https://github.com/hsuantien/mlc_lsdr\n\n"+ "For more information see:\n "+ getTechnicalInformation();}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (keyidentifier != null) {    v.add(new DERTaggedObject(false,0,keyidentifier));  }  if (certissuer != null) {    v.add(new DERTaggedObject(false,1,certissuer));  }  if (certserno != null) {    v.add(new DERTaggedObject(false,2,certserno));  }  return new DERSequence(v);}  }
class C{  public boolean isStoragePDLSupported(){  return storagePDLSupported;}  }
class C{  @SuppressWarnings("unchecked") private void registerMbean(Object o,@Nullable String cacheName,boolean near) throws IgniteCheckedException {  assert o != null;  MBeanServer srvr=ctx.config().getMBeanServer();  assert srvr != null;  cacheName=U.maskName(cacheName);  cacheName=near ? cacheName + "-near" : cacheName;  for (  Class<?> itf : o.getClass().getInterfaces()) {    if (itf.getName().endsWith("MBean") || itf.getName().endsWith("MXBean")) {      try {        U.registerCacheMBean(srvr,ctx.gridName(),cacheName,o.getClass().getName(),o,(Class<Object>)itf);      } catch (      JMException e) {        throw new IgniteCheckedException("Failed to register MBean for component: " + o,e);      }      break;    }  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  private String toLocalNumber(int n){  return String.format(mDefaultLocale,"%d",n);}  }
class C{  private void qbSack(Team offense){  offense.getQB(0).statsSacked++;  gameYardsNeed+=3;  gameYardLine-=3;  if (gamePoss) {    HomeQBStats[5]++;  } else {    AwayQBStats[5]++;  }  if (gameYardLine < 0) {    gameTime-=10 * Math.random();    safety();    return;  }  gameDown++;  gameTime-=25 + 10 * Math.random();}  }
class C{  public double magnitude(){  return Math.sqrt(this.magnitudeSquared());}  }
class C{  public void testFindZBounds(){  XYShapeRenderer r=new XYShapeRenderer();  assertNull(r.findZBounds(null));  DefaultXYZDataset dataset=new DefaultXYZDataset();  Range range;  double data1[][]={{1,1,1},{1,1,1},{1,2,3}};  dataset.addSeries("series1",data1);  range=r.findZBounds(dataset);  assertNotNull(range);  assertEquals(1d,range.getLowerBound(),EPSILON);  assertEquals(3d,range.getUpperBound(),EPSILON);  double data2[][]={{1,1,1},{1,1,1},{-1,-2,-3}};  dataset.removeSeries("series1");  dataset.addSeries("series2",data2);  range=r.findZBounds(dataset);  assertNotNull(range);  assertEquals(-3d,range.getLowerBound(),EPSILON);  assertEquals(-1d,range.getUpperBound(),EPSILON);  double data3[][]={{1,1,1},{1,1,1},{-1.2,2.9,3.8}};  dataset.removeSeries("series2");  dataset.addSeries("series3",data3);  range=r.findZBounds(dataset);  assertNotNull(range);  assertEquals(-1.2d,range.getLowerBound(),EPSILON);  assertEquals(3.8d,range.getUpperBound(),EPSILON);}  }
class C{  public static boolean createFile(File targetFile){  if (targetFile.exists()) {    if (targetFile.isFile())     return true;    targetFile.delete();  }  try {    return targetFile.createNewFile();  } catch (  IOException e) {    return false;  }}  }
class C{  public void clearPayment(String id){  CartPaymentInfo inf=this.getPaymentInfo(id);  paymentInfo.remove(inf);}  }
class C{  public StringBuilder(int capacity){  super(capacity);}  }
class C{  @Override public void draw(Canvas canvas){}  }
class C{  public BalancedBinaryNode<K,V> root(){  return root;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  protected void finishNode(Node node){  node.setDuration(currentTimeMicros() - node.getTimestamp());}  }
class C{  @Deprecated public boolean hasLazyProperties(){  return false;}  }
class C{  public PrinterMoreInfo(URI uri){  super(uri);}  }
class C{  private static Shape rightEdge(BufferedImage image){  GeneralPath path=new GeneralPath();  Point2D p1=null;  Point2D p2=null;  Line2D line=new Line2D.Float();  Point2D p=new Point2D.Float();  int foundPointY=-1;  for (int i=image.getHeight() - 1; i >= 0; i--) {    for (int j=image.getWidth() - 1; j >= 0; j--) {      if ((image.getRGB(j,i) & 0xff000000) != 0) {        p.setLocation(j,i);        foundPointY=i;        break;      }    }    if (foundPointY >= 0) {      if (p2 == null) {        p1=new Point2D.Float(0,foundPointY);        path.moveTo(p1.getX(),p1.getY());        p2=new Point2D.Float();        p2.setLocation(p);      } else {        p2=detectLine(p1,p2,p,line,path);      }    }  }  path.lineTo(p.getX(),p.getY());  if (foundPointY >= 0) {    path.lineTo(0,foundPointY);  }  path.closePath();  return path;}  }
class C{  protected void writeDate(Date date,CharBuf buffer){  SimpleDateFormat formatter=new SimpleDateFormat(dateFormat,dateLocale);  formatter.setTimeZone(timezone);  buffer.addQuoted(formatter.format(date));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ConcurrentReaderHashMap(int initialCapacity,float loadFactor){  if (loadFactor <= 0)   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  this.loadFactor=loadFactor;  int cap=p2capacity(initialCapacity);  table=new Entry[cap];  threshold=(int)(cap * loadFactor);}  }
class C{  public void revertToDefault(){  REAL_TIME_SORT.revertToDefault();  DISPLAY_TOOLTIPS.revertToDefault();}  }
class C{  public static ByteBuffer enlargeThreadLocalByteBuffer(){  TMP_BUFFER.set(ByteBuffer.allocate(TMP_BUFFER.get().capacity() * 2));  return TMP_BUFFER.get();}  }
class C{  public static String replace(String source,String target,String replacement){  StringBuilder sbSource=new StringBuilder(source);  StringBuilder sbSourceLower=new StringBuilder(source.toLowerCase());  String searchString=target.toLowerCase();  int idx=0;  while ((idx=sbSourceLower.indexOf(searchString,idx)) != -1) {    sbSource.replace(idx,idx + searchString.length(),replacement);    sbSourceLower.replace(idx,idx + searchString.length(),replacement);    idx+=replacement.length();  }  sbSourceLower.setLength(0);  sbSourceLower.trimToSize();  return sbSource.toString();}  }
class C{  public static void waitForDebugger(){  while (keepWaiting) {    try {      Thread.sleep(5000);    } catch (    InterruptedException e) {      System.out.println("DebugUtil.waitForDebugger(): Exception: " + e.getMessage());    }  }}  }
class C{  public void updateNString(int columnIndex,String nString) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public static void main(String[] args){  runFilter(new MergeNominalValues(),args);}  }
class C{  @Override public void searchInTab(final GUISearchWindow searchFrame){  if (debugFX) {    System.out.println("searchInTab");  }  this.searchFrame=searchFrame;  this.searchFrame.init(decode_pdf,commonValues);  if (DecoderOptions.isRunningOnMac) {    if (thumbnails.isShownOnscreen()) {    }  } else {  }}  }
class C{  private void assertDebug(QueryResponse response,boolean expected,String key){  if (expected) {    assertInDebug(response,key);  } else {    assertNotInDebug(response,key);  }}  }
class C{  final public boolean isKeys(){  return true;}  }
class C{  public boolean isStatic(){  return static_;}  }
class C{  public void loadIntoGraphics(OMGraphicList list){  if (list != null && infoRecords != null) {    int numgraphics=list.size();    for (int i=0; i < numgraphics; i++) {      try {        OMGraphic omg=list.getOMGraphicAt(i);        Integer recnum=(Integer)(omg.getAttribute(ShapeConstants.SHAPE_INDEX_ATTRIBUTE));        Object inforec=getRecord(recnum.intValue() - 1);        omg.putAttribute(ShapeConstants.SHAPE_DBF_INFO_ATTRIBUTE,inforec);      } catch (      ClassCastException cce) {        if (Debug.debugging("shape")) {          cce.printStackTrace();        }      }catch (      NullPointerException npe) {        npe.printStackTrace();      }    }  }}  }
class C{  public Vertex evaluateGET(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkMinArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex result=null;  Vertex source=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex relationship=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Vertex index=expression.getRelationship(Primitive.INDEX);  if ((index != null) && (index.getData() instanceof Number)) {    int position=((Number)index.getData()).intValue();    List<Vertex> values=source.orderedRelations(relationship);    if (position < 0) {      if ((position * -1) >= values.size()) {        return network.createVertex(Primitive.NULL);      }      result=values.get(values.size() + position);    } else {      if (position >= values.size()) {        return network.createVertex(Primitive.NULL);      }      result=values.get(position);    }  } else {    if (arguments.size() > 3) {      Vertex associate=evaluateExpression(arguments.get(2).getTarget(),variables,network,startTime,maxTime,stack);      Vertex associateRelationship=evaluateExpression(arguments.get(3).getTarget(),variables,network,startTime,maxTime,stack);      result=source.mostConsciousWithAssoiate(relationship,associate,associateRelationship);    } else     if (relationship.getData() instanceof Number && source.instanceOf(Primitive.ARRAY)) {      List<Vertex> values=source.orderedRelations(Primitive.ELEMENT);      if (values == null) {        return network.createVertex(Primitive.NULL);      }      int position=((Number)relationship.getData()).intValue();      if (position < 0) {        if ((position * -1) >= values.size()) {          return network.createVertex(Primitive.NULL);        }        result=values.get(values.size() + position);      } else {        if (position >= values.size()) {          return network.createVertex(Primitive.NULL);        }        result=values.get(position);      }    } else     if (relationship.getData() instanceof Number && (source.instanceOf(Primitive.FRAGMENT) || source.instanceOf(Primitive.SENTENCE))) {      List<Vertex> values=source.orderedRelations(Primitive.WORD);      if (values == null) {        return network.createVertex(Primitive.NULL);      }      int position=((Number)relationship.getData()).intValue();      if (position < 0) {        if ((position * -1) >= values.size()) {          return network.createVertex(Primitive.NULL);        }        result=values.get(values.size() + position);      } else {        if (position >= values.size()) {          return network.createVertex(Primitive.NULL);        }        result=values.get(position);      }    } else {      result=source.mostConscious(relationship);    }  }  if (result == null) {    Collection<Relationship> words=relationship.getRelationships(Primitive.WORD);    if (words != null) {      Set<Vertex> processed=new HashSet<Vertex>();      processed.add(relationship);      for (      Relationship word : words) {        Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);        if (otherMeanings != null) {          for (          Relationship meaning : otherMeanings) {            if (!processed.contains(meaning.getTarget())) {              processed.add(meaning.getTarget());              result=source.mostConscious(meaning.getTarget());              if (result != null) {                break;              }            }          }        }      }    }    if (result == null) {      result=network.createVertex(Primitive.NULL);    }  }  return result;}  }
class C{  public void addPropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  Node<E> findFirst(){  for (; ; ) {    Node<E> b=head.node;    Node<E> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public HashMapPro(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)Math.min(capacity * loadFactor,MAXIMUM_CAPACITY + 1);  table=new Entry[capacity];  init();}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public static Marketplace createGlobalMarketplace(Organization owner,String marketplaceId,DataService ds) throws NonUniqueBusinessKeyException {  return createGlobalMarketplace(owner,marketplaceId,ds,BigDecimal.ZERO,BigDecimal.ZERO,BigDecimal.ZERO);}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("websphere85x",J2EEContainerCapability.class);}  }
class C{  public static boolean isDefaultPersistDeliveryCountBeforeDelivery(){  return DEFAULT_PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY;}  }
class C{  String nodeToString(int node){  char opcode=instruction[node];  int opdata=(int)instruction[node + RE.offsetOpdata];  return opcodeToString(opcode) + ", opdata = " + opdata;}  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  public void testRenameSchema() throws ReplicatorException, InterruptedException, IOException {  PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));  out.println("schemaz,*,*,schemaz2,-,- # Schema renamed for all tables. Least priority.");  out.println("schemaz,tablew,*,schemaz1,-,- # This table moved to a different schema.");  out.println("schemaz,tablee,*,schemazz1,tableee,- # This table renamed and moved to a different schema.");  out.println("schemaz,tableq,*,-,tableq1,- # Just table renamed.");  out.close();  RenameFilter rf=new RenameFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDefinitionsFile(definitionsFile);  filterHelper.setFilter(rf);  assertSchemaTableChanged("schemaz","anytable","schemaz2","anytable");  assertSchemaTableChanged("schemaz","tablew","schemaz1","tablew");  assertSchemaTableChanged("schemaz","tablee","schemazz1","tableee");  assertSchemaTableChanged("schemaz","tableq","schemaz","tableq1");  assertSchemaTableChanged("schemax","anytable","schemax","anytable");  assertSchemaTableChanged("schemax","tablew","schemax","tablew");  assertSchemaTableChanged("schemax","tablee","schemax","tablee");  assertSchemaTableChanged("schemax","tableq","schemax","tableq");  filterHelper.done();}  }
class C{  private void traverse(NodeRef node,int[] parentSequence,int[] category,SimpleAlignment alignment,double[] lambda){  if (saveAlignment) {    alignmentTraitList.put(node.getNumber(),intArray2Sequence(parentSequence,node));  }  for (int iChild=0; iChild < tree.getChildCount(node); iChild++) {    NodeRef child=tree.getChild(node,iChild);    int[] seq=new int[nReplications];    StateHistory[] histories=new StateHistory[nReplications];    if (branchSpecificLambda) {      final double branchValue=branchPossibleValuesParameter.getParameterValue(child.getNumber());      branchVariableParameter.setParameterValue(0,branchValue);      siteModel.getSubstitutionModel().getInfinitesimalMatrix(lambda);    }    for (int i=0; i < nReplications; i++) {      histories[i]=simulateAlongBranch(tree,child,category[i],parentSequence[i],lambda);      seq[i]=histories[i].getEndingState();    }    processHistory(child,histories);    if (tree.getChildCount(child) == 0) {      alignment.addSequence(intArray2Sequence(seq,child));    }    traverse(tree.getChild(node,iChild),seq,category,alignment,lambda);  }}  }
class C{  @Override public boolean onUnbind(Intent intent){  Timber.d("Unbinded from service");  if (mMediaPlayerState == MediaPlayerState.STATE_IDLE && !(mMediaPlayer instanceof CastMediaPlayer)) {    stopSelf();  }  mServiceBound=false;  return super.onUnbind(intent);}  }
class C{  @Override public void validate(){  super.validate();switch (barrierType) {case DownIn:case UpIn:case DownOut:case UpOut:    break;default :  throw new LibraryException(UNKNOWN_TYPE);}QL.require(!Double.isNaN(barrier),"no barrier given");QL.require(!Double.isNaN(rebate),"no rebate given");}  }
class C{  @Override public void failed(){  recoveryStrat=null;}  }
class C{  public void printShortString(PrintWriter pw){  pw.print('[');  pw.print(left);  pw.print(',');  pw.print(top);  pw.print("][");  pw.print(right);  pw.print(',');  pw.print(bottom);  pw.print(']');}  }
class C{  public static void cleanStaleExportMasks(StorageSystem storage,Set<String> maskNamesFromArray,List<String> initiatorNames,DbClient dbClient){  Set<Initiator> initiators=ExportUtils.getInitiators(initiatorNames,dbClient);  Set<ExportMask> staleExportMasks=new HashSet<>();  _log.info("Mask Names found in array:{} for the initiators: {}",maskNamesFromArray,initiatorNames);  for (  Initiator initiator : initiators) {    URIQueryResultList emUris=new URIQueryResultList();    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskInitiatorConstraint(initiator.getId().toString()),emUris);    ExportMask exportMask=null;    for (    URI emUri : emUris) {      _log.debug("Export Mask URI :{}",emUri);      exportMask=dbClient.queryObject(ExportMask.class,emUri);      if (exportMask != null && !exportMask.getInactive() && storage.getId().equals(exportMask.getStorageDevice())) {        if (!maskNamesFromArray.contains(exportMask.getMaskName())) {          _log.info("Export Mask {} is not found in array",exportMask.getMaskName());          List<ExportGroup> egList=ExportUtils.getExportGroupsForMask(exportMask.getId(),dbClient);          if (CollectionUtils.isEmpty(egList)) {            _log.info("Found a stale export mask {} - {} and it can be removed from DB",exportMask.getId(),exportMask.getMaskName());            staleExportMasks.add(exportMask);          } else {            _log.info("Export mask is having association with ExportGroup {}",egList);          }        }      }    }  }  if (!CollectionUtils.isEmpty(staleExportMasks)) {    dbClient.markForDeletion(staleExportMasks);    _log.info("Deleted {} stale export masks from DB",staleExportMasks.size());  }  _log.info("Export Mask cleanup activity done");}  }
class C{  public static boolean isClassAccessible(Class<?> refc,Class<?> lookupClass,int allowedModes){  if (allowedModes == 0)   return false;  assert ((allowedModes & PUBLIC) != 0 && (allowedModes & ~(ALL_ACCESS_MODES | PACKAGE_ALLOWED)) == 0);  int mods=getClassModifiers(refc);  if (isPublic(mods))   return true;  if ((allowedModes & PACKAGE_ALLOWED) != 0 && isSamePackage(lookupClass,refc))   return true;  return false;}  }
class C{  public AccessTokensBuilder staleConnectionCheckEnabled(final boolean staleConnectionCheckEnabled){  checkLock();  this.httpConfig.setStaleConnectionCheckEnabled(staleConnectionCheckEnabled);  return this;}  }
class C{  public long discoveryTimestamp(){  return discoTs;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, val;  double[] N=new double[8];  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val != noData) {              n+=1 * filterShape[a];              sum+=val * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,z - (sum / n));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public TextResources(Configuration config){  createTexture(config);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void affirmTrue(final String message,final boolean condition){  getAffirmation().affirmTrue(message,condition);}  }
class C{  private EmrClusterDefinitionUpdateRequest createEmrClusterDefinitionUpdateRequest(EmrClusterDefinition emrClusterDefinitionConfiguration){  EmrClusterDefinitionUpdateRequest request=new EmrClusterDefinitionUpdateRequest();  request.setEmrClusterDefinition(emrClusterDefinitionConfiguration);  return request;}  }
class C{  public final int[] signature(final Set<Integer> set){  int[] sig=new int[n];  for (int i=0; i < n; i++) {    sig[i]=Integer.MAX_VALUE;  }  final List<Integer> list=new ArrayList<Integer>(set);  Collections.sort(list);  for (  final int r : list) {    for (int i=0; i < n; i++) {      sig[i]=Math.min(sig[i],h(i,r));    }  }  return sig;}  }
class C{  public void close(){  filer.close();  if (discoveredProcs != null)   discoveredProcs.close();  discoveredProcs=null;}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  public Skeleton(PrintWriter out){  this.out=out;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public GeoDistanceBuilder point(GeoPoint point){  this.point=point;  return this;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public RunResult run(List<String> args) throws ProcessRunException {  for (int i=0; i < retries; i++) {    LOG.debug("Running: " + args);    ProcessRunner runner=new ProcessRunner(args);    RunResult result=runner.run();    if (result.getReturnCode() == 0) {      return result;    }    LOG.error("Error running command! Got return code: " + result.getReturnCode());    if (i + 1 == retries) {      return result;    }    try {      LOG.debug("Sleeping for " + RETRY_SLEEP_TIME / 1000 + "s");      Thread.sleep(RETRY_SLEEP_TIME);    } catch (    InterruptedException e) {      throw new RuntimeException("Shouldn't happen!");    }  }  throw new RuntimeException("Shouldn't happen");}  }
class C{  protected void createAndInitializeExecutionContext(){  executionContext=ExecutionContextFactory.createContext(runtimeProgram);  LocalVariableMap symbolTable=script.getSymbolTable();  if (symbolTable != null) {    executionContext.setVariables(symbolTable);  }}  }
class C{  public boolean contains(Class<?> c){  return m_Methods.containsKey(c);}  }
class C{  public static void main(String[] args){  WrapHistory<String> h=new WrapHistory<>(3);  System.out.println("peekForward:" + h.peekForward());  System.out.println("peekBackwards:" + h.peekBackwards());  h.add("test1");  System.out.println(h.debug());  System.out.println("peekForward:" + h.peekForward());  System.out.println("peekBackwards:" + h.peekBackwards());  System.out.println(h.hasPrevious());  h.add("test2");  System.out.println(h.debug());  System.out.println("peekForward:" + h.peekForward());  System.out.println("forward:" + h.forward());  System.out.println("peekBackwards:" + h.peekBackwards());  h.add("test3");  System.out.println(h.debug());  h.add("test4");  System.out.println(h.debug());  System.out.println("peekBackwards:" + h.peekBackwards());  System.out.println("backwards:" + h.backward());  System.out.println("backwards:" + h.backward());  h.add("test5");  System.out.println(h.debug());  System.out.println("peekForward:" + h.peekForward());  System.out.println("backwards:" + h.backward());  System.out.println(h.debug());  System.out.println("peekForward:" + h.peekForward());  System.out.println("forward:" + h.forward());  System.out.println("forward:" + h.forward());  System.out.println("backwards:" + h.backward());  System.out.println(h.debug());  System.out.println("backwards:" + h.backward());  System.out.println(h.debug());  System.out.println("backwards:" + h.backward());  System.out.println(h.debug());  System.out.println("forward:" + h.forward());  System.out.println(h.debug());  System.out.println("backwards:" + h.backward());  System.out.println(h.debug());}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public boolean isNativeEt(){  return nativeEt && NativeSupport.isSupportNativeET();}  }
class C{  public boolean isChatAutoAccepted(){  return readBoolean(RcsSettingsData.AUTO_ACCEPT_CHAT);}  }
class C{  public static double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  public Vertex top(Vertex source,Vertex vertex){  if (!vertex.hasData() || !(vertex.getData() instanceof Number)) {    return null;  }  int index=((Number)vertex.getData()).intValue();  if (this.contextStack.size() < index) {    return null;  }  return vertex.getNetwork().findById(this.contextStack.get(this.contextStack.size() - index));}  }
class C{  public void resync(){  resync_ncGuards();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PasswordDiffersFromUsernameValidator(final String username,final String password){  this.username=username;  this.password=password;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Object lookupCmisConfiguration() throws NamingException {  final InitialContext ctx=new InitialContext();  String key=InitParametersInjector.get(InitParametersInjector.INIT_PARAM_JNDI_CMIS_CONFIGURATION);  if (key != null) {    Object ecmService=ctx.lookup(key);    if (ecmService != null) {      String uniqueName=InitParametersInjector.get(InitParametersInjector.INIT_PARAM_JNDI_CMIS_CONFIGURATION_NAME);      String secretKey=InitParametersInjector.get(InitParametersInjector.INIT_PARAM_JNDI_CMIS_CONFIGURATION_KEY);      logger.debug("Connecting to CMIS Repository with name: %s and key: %s",uniqueName,secretKey);      try {        Method connectMethod=ecmService.getClass().getMethod("connect",String.class,String.class);        Object openCmisSession=connectMethod.invoke(ecmService,uniqueName,secretKey);        if (openCmisSession != null) {          logger.debug("Connection to CMIS Repository was successful.");          return openCmisSession;        }      } catch (      Exception e) {        logger.error("Connection to CMIS Repository was NOT successful.",e);      }    }  }  return null;}  }
class C{  public static Workflow.Method relinkBlockSnapshotSessionTargetMethod(URI systemURI,URI tgtSnapSessionURI,URI snapshotURI){  return new Workflow.Method(RELINK_SNAPSHOT_SESSION_TARGET_METHOD,systemURI,tgtSnapSessionURI,snapshotURI);}  }
class C{  public final void testGetMaxPathLength() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertEquals(5,p.getMaxPathLength());  p.setMaxPathLength(10);  assertEquals(10,p.getMaxPathLength());}  }
class C{  @Override public boolean isTorus(){  return isTorus;}  }
class C{  MutableBigInteger euclidModInverse(int k){  MutableBigInteger b=new MutableBigInteger(1);  b.leftShift(k);  MutableBigInteger mod=new MutableBigInteger(b);  MutableBigInteger a=new MutableBigInteger(this);  MutableBigInteger q=new MutableBigInteger();  MutableBigInteger r=b.divide(a,q);  MutableBigInteger swapper=b;  b=r;  r=swapper;  MutableBigInteger t1=new MutableBigInteger(q);  MutableBigInteger t0=new MutableBigInteger(1);  MutableBigInteger temp=new MutableBigInteger();  while (!b.isOne()) {    r=a.divide(b,q);    if (r.intLen == 0)     throw new ArithmeticException("BigInteger not invertible.");    swapper=r;    a=swapper;    if (q.intLen == 1)     t1.mul(q.value[q.offset],temp); else     q.multiply(t1,temp);    swapper=q;    q=temp;    temp=swapper;    t0.add(q);    if (a.isOne())     return t0;    r=b.divide(a,q);    if (r.intLen == 0)     throw new ArithmeticException("BigInteger not invertible.");    swapper=b;    b=r;    if (q.intLen == 1)     t0.mul(q.value[q.offset],temp); else     q.multiply(t0,temp);    swapper=q;    q=temp;    temp=swapper;    t1.add(q);  }  mod.subtract(t1);  return mod;}  }
class C{  public void increment(RdeResourceType type){  counts.get(type).incrementAndGet();}  }
class C{  public OneToOneFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver,String transferId){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CONTACT,null,transferId);  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  protected void updateLayerActivity(WorldWindow wwd){  for (  Map.Entry<Layer,JCheckBox> entry : this.checkBoxes.entrySet()) {    Long layerTimeStamp=(Long)entry.getKey().getValue(AVKey.FRAME_TIMESTAMP);    Long frameTimeStamp=(Long)wwd.getSceneController().getValue(AVKey.FRAME_TIMESTAMP);    if (layerTimeStamp != null && frameTimeStamp != null && layerTimeStamp.longValue() == frameTimeStamp.longValue()) {      entry.getValue().setFont(entry.getValue().getFont().deriveFont(Font.BOLD));    } else {      entry.getValue().setFont(entry.getValue().getFont().deriveFont(Font.PLAIN));    }  }}  }
class C{  public static Map<String,String> labelSelectorsFromReadToken(ReadToken rtoken){  Map<String,String> labelSelectors=new HashMap<String,String>();  List<String> owners=new ArrayList<String>();  List<String> producers=new ArrayList<String>();  if (rtoken.getOwnersSize() > 0) {    for (    ByteBuffer bb : rtoken.getOwners()) {      owners.add(Tokens.getUUID(bb));    }  }  if (rtoken.getProducersSize() > 0) {    for (    ByteBuffer bb : rtoken.getProducers()) {      producers.add(Tokens.getUUID(bb));    }  }  if (rtoken.getAppsSize() > 0) {    if (1 == rtoken.getAppsSize()) {      labelSelectors.put(Constants.APPLICATION_LABEL,rtoken.getApps().get(0));    } else {      StringBuilder sb=new StringBuilder();      sb.append("~^(");      boolean first=true;      for (      String app : rtoken.getApps()) {        if (!first) {          sb.append("|");        }        sb.append(app);        first=false;      }      sb.append(")$");      labelSelectors.put(Constants.APPLICATION_LABEL,sb.toString());    }  }  if (!owners.isEmpty()) {    if (1 == owners.size()) {      labelSelectors.put(Constants.OWNER_LABEL,"=" + owners.get(0));    } else {      StringBuilder sb=new StringBuilder();      sb.append("~^(");      boolean first=true;      for (      String owner : owners) {        if (!first) {          sb.append("|");        }        sb.append(owner);        first=false;      }      sb.append(")$");      labelSelectors.put(Constants.OWNER_LABEL,sb.toString());    }  }  if (!producers.isEmpty()) {    if (1 == producers.size()) {      labelSelectors.put(Constants.PRODUCER_LABEL,"=" + producers.get(0));    } else {      StringBuilder sb=new StringBuilder();      sb.append("~^(");      boolean first=true;      for (      String producer : producers) {        if (!first) {          sb.append("|");        }        sb.append(producer);        first=false;      }      sb.append(")$");      labelSelectors.put(Constants.PRODUCER_LABEL,sb.toString());    }  }  return labelSelectors;}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  void addUniquePredecessor(BasicBlock predbb){  boolean dupFound=false, checkMade=false;  short predbbNum=(short)predbb.getBlockNumber();  if (predcount >= 1) {    if (pred1 == predbbNum) {      return;    }    if (predcount > 1) {      if (pred2 == predbbNum) {        return;      }      if (predcount > 2) {        if (restPredecessors.length <= predcount - 2) {          short[] newpreds=new short[predcount << 1];          int restLength=restPredecessors.length;          for (int i=0; i < restLength; i++) {            if (restPredecessors[i] == predbbNum) {              dupFound=true;            }            newpreds[i]=restPredecessors[i];          }          restPredecessors=newpreds;          newpreds=null;          if (dupFound)           return;          checkMade=true;        }        if (!checkMade) {          for (int i=0; i < predcount - 2; i++) {            if (restPredecessors[i] == predbbNum) {              return;            }          }        }        predcount++;        restPredecessors[predcount - 3]=predbbNum;      } else {        restPredecessors=new short[STARTPREDSIZE];        predcount++;        restPredecessors[predcount - 3]=predbbNum;      }    } else {      predcount++;      pred2=predbbNum;    }  } else {    predcount++;    pred1=predbbNum;  }}  }
class C{  public Connector(){}  }
class C{  public boolean contains(final Artist p){synchronized (mArtists) {    return mArtists.contains(p);  }}  }
class C{  public static <I,A>Parser<I,A> safe(Parser<I,A> p){  return null;}  }
class C{  public JsonFlattener withStringEscapePolicy(StringEscapePolicy policy){  this.policy=notNull(policy);  flattenedMap=null;  return this;}  }
class C{  @Override public void endDocument() throws IOException {  endChangesIfNecessary();  ResponseWriter writer=getWrapped();  if (!(writer instanceof PartialResponseWriter)) {    writer.endElement("partial-response");  }  writer.endDocument();}  }
class C{  public String loadPaymentRuleInfo(int C_PaySelection_ID,String PaymentRule){  String msg=null;  String sql="SELECT COUNT(*) " + "FROM C_PaySelectionCheck " + "WHERE C_PaySelection_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     noPayments=String.valueOf(rs.getInt(1));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  sql="SELECT CurrentNext " + "FROM C_BankAccountDoc " + "WHERE C_BankAccount_ID=? AND PaymentRule=? AND IsActive='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_C_BankAccount_ID);    pstmt.setString(2,PaymentRule);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     documentNo=new Integer(rs.getInt(1)); else {      log.log(Level.SEVERE,"VPayPrint.loadPaymentRuleInfo - No active BankAccountDoc for C_BankAccount_ID=" + m_C_BankAccount_ID + " AND PaymentRule="+ PaymentRule);      msg="VPayPrintNoDoc";    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  return msg;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((JMRIClientListener)client).message((JMRIClientMessage)m);}  }
class C{  public NGramTokenFilter(TokenStream input,int minGram,int maxGram){  super(new CodepointCountFilter(input,minGram,Integer.MAX_VALUE));  if (minGram < 1) {    throw new IllegalArgumentException("minGram must be greater than zero");  }  if (minGram > maxGram) {    throw new IllegalArgumentException("minGram must not be greater than maxGram");  }  this.minGram=minGram;  this.maxGram=maxGram;  posIncAtt=addAttribute(PositionIncrementAttribute.class);  posLenAtt=addAttribute(PositionLengthAttribute.class);}  }
class C{  public RepositoryImplConfigBase(String type){  super(type);}  }
class C{  protected void progress(double pct,int blocksSoFar,Date date){  log.info(String.format(Locale.US,"Chain download %d%% done with %d blocks to go, block date %s",(int)pct,blocksSoFar,Utils.dateTimeFormat(date)));}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:47:59.982 -0500",hash_original_method="756759165F6AB2C8C6E469E63BE14186",hash_generated_method="3C023A20572EFC197D0EAE2E2611F4F2") public void openOptionsMenu(){  mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL,null);}  }
class C{  public Alarm(AlarmListener listener){  this("alarm[" + listener + "]",listener);}  }
class C{  public ImmutableNaviViewConfiguration(final int viewId,final String name,final String description,final ViewType viewType,final Date creationDate,final Date modificationDate,final boolean starState,final int nodeCount,final int edgeCount){  Preconditions.checkArgument(viewId > 0,"Error: view id must be a positive integer");  this.viewId=viewId;  this.name=Preconditions.checkNotNull(name,"IE02805: name argument can not be null");  this.description=description;  this.viewType=viewType;  this.creationDate=Preconditions.checkNotNull(creationDate,"IE02806: creationDate argument can not be null");  this.modificationDate=Preconditions.checkNotNull(modificationDate,"Error: modificationDate argument can not be null");  this.starState=starState;  this.nodeCount=nodeCount;  this.edgeCount=edgeCount;}  }
class C{  @Override public void handleMaintenance(Operation op){  collectStats(op);  op.complete();}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY3D[" + createString(",") + "]";}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  public Optional<Response> simpleDelete(String resourcePath){  Optional<Response> returnValue=Optional.empty();  try {    returnValue=Optional.of(getServiceRoot().path(resourcePath).request().delete());  } catch (  SnoopServiceUnavailableException e) {    LOGGER.warning(null);  }  return returnValue;}  }
class C{  public void addRule(int verb,int anchor){  mRules[verb]=anchor;  mInitialRules[verb]=anchor;  mRulesChanged=true;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static StringBuffer leftShift(StringBuffer self,Object value){  self.append(value);  return self;}  }
class C{  public static Source fromFile(File f,Charset cs) throws IOException {  try (InputStream is=new FileInputStream(f)){    return fromStream(is,f.toURI(),cs);  } }  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiesremovenameditem1.class,args);}  }
class C{  protected void onIntChanged(int featureId,int value){  if (featureId == FEATURE_PROGRESS || featureId == FEATURE_INDETERMINATE_PROGRESS) {    updateProgressBars(value);  } else   if (featureId == FEATURE_CUSTOM_TITLE) {    FrameLayout titleContainer=(FrameLayout)findViewById(com.android.internal.R.id.title_container);    if (titleContainer != null) {      mLayoutInflater.inflate(value,titleContainer);    }  }}  }
class C{  static public boolean rangeCheck(final ISeparatorKeys pmd,final byte[] key,final boolean allowUpperBound){  final byte[] leftSeparatorKey=pmd.getLeftSeparatorKey();  final byte[] rightSeparatorKey=pmd.getRightSeparatorKey();  if (BytesUtil.compareBytes(key,leftSeparatorKey) < 0) {    throw new KeyBeforePartitionException(key,allowUpperBound,pmd);  }  if (rightSeparatorKey != null) {    final int ret=BytesUtil.compareBytes(key,rightSeparatorKey);    if (allowUpperBound) {      if (ret <= 0) {      } else {        throw new KeyAfterPartitionException(key,allowUpperBound,pmd);      }    } else {      if (ret < 0) {      } else {        throw new KeyAfterPartitionException(key,allowUpperBound,pmd);      }    }  }  return true;}  }
class C{  public static void performUnManagedConsistencyGroupsBookKeeping(StorageSystem storageSystem,Set<URI> currentUnManagedCGs,DbClient dbClient,PartitionManager partitionManager){  _log.info(" -- Processing {} discovered UnManaged Consistency Group Objects from -- {}",currentUnManagedCGs.size(),storageSystem.getLabel());  if (currentUnManagedCGs.isEmpty()) {    return;  }  URIQueryResultList allAvailableUnManagedCGsInDB=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageSystemUnManagedCGConstraint(storageSystem.getId()),allAvailableUnManagedCGsInDB);  Set<URI> unManagedCGsInDBSet=new HashSet<URI>();  Iterator<URI> allAvailableUnManagedCGsItr=allAvailableUnManagedCGsInDB.iterator();  while (allAvailableUnManagedCGsItr.hasNext()) {    unManagedCGsInDBSet.add(allAvailableUnManagedCGsItr.next());  }  SetView<URI> onlyAvailableinDB=Sets.difference(unManagedCGsInDBSet,currentUnManagedCGs);  _log.info("Diff :" + Joiner.on("\t").join(onlyAvailableinDB));  if (!onlyAvailableinDB.isEmpty()) {    List<UnManagedConsistencyGroup> unManagedCGTobeDeleted=new ArrayList<UnManagedConsistencyGroup>();    Iterator<UnManagedConsistencyGroup> unManagedCGs=dbClient.queryIterativeObjects(UnManagedConsistencyGroup.class,new ArrayList<URI>(onlyAvailableinDB));    while (unManagedCGs.hasNext()) {      UnManagedConsistencyGroup cg=unManagedCGs.next();      if (null == cg || cg.getInactive()) {        continue;      }      _log.info("Setting UnManagedConsistencyGroup {} inactive",cg.getId());      cg.setStorageSystemUri(NullColumnValueGetter.getNullURI());      cg.setInactive(true);      unManagedCGTobeDeleted.add(cg);    }    if (!unManagedCGTobeDeleted.isEmpty()) {      partitionManager.updateAndReIndexInBatches(unManagedCGTobeDeleted,unManagedCGTobeDeleted.size(),dbClient,UNMANAGED_CONSISTENCY_GROUP);    }  }}  }
class C{  public static DecodingException createDecodingException(final ErrorKeys errorId,final String message){  return new DecodingException(errorId.toString() + ":\r\n" + message);}  }
class C{  private GUIUtils(){}  }
class C{  public static DataDisplayTable listChars(Font font){  String[] header={"Code point","Glyph ID","Unicode-designated name for code point"};  Align[] displayAlignment={Align.Right,Align.Right,Align.Left};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  CMap cmap=FontUtils.getUCSCMap(font);  for (  int charId : cmap) {    int glyphId=cmap.glyphId(charId);    if (glyphId != CMapTable.NOTDEF) {      String[] data={FontUtils.getFormattedCodePointString(charId),String.format("%d",glyphId),UCharacter.getExtendedName(charId)};      table.add(Arrays.asList(data));    }  }  return table;}  }
class C{  protected <E extends Identifiable>E findEntity(EntityManager em,BigInteger id,Class<E> type){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(id != null && id.compareTo(ZERO) > 0,"ID must be positive and non-zero");  requireArgument(type != null,"The entity cannot be null.");  em.getEntityManagerFactory().getCache().evictAll();  return em.find(type,id);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.TAG__TITLE:    setTitle((TagTitle)null);  return;case DomPackage.TAG__VALUES:getValues().clear();return;case DomPackage.TAG__TAG_DEFINITION:setTagDefinition(TAG_DEFINITION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void write(char c) throws IOException {  if ((c < 0xd800) || (c > 0xdfff)) {    write((int)c);  } else   if (c < 0xdc00) {    _highSurrogate=c;  } else {    int code=((_highSurrogate - 0xd800) << 10) + (c - 0xdc00) + 0x10000;    write(code);  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public void afterLast() throws SQLException {  notSupported();}  }
class C{  public void test_ticket_1007_number1() throws Exception {  new TestHelper("ticket-1007-number1","ticket-1007-number1.rq","ticket-1007-custom.trig","ticket-1007-number-integer.srx",false).runTest();}  }
class C{  public boolean disableWifi(){  return mWifiManager.setWifiEnabled(false);}  }
class C{  public void mousePressed(MouseEvent e){  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);  if (SwingUtilities.isLeftMouseButton(e)) {    if (e.isConsumed()) {      shouldHandleRelease=true;    } else {      shouldHandleRelease=false;      adjustCaretAndFocus(e);      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        selectWord(e);      }    }  }}  }
class C{  public boolean snapshotDisableImageAccessSingleStep(URI rpSystemId,List<URI> snapshots,boolean isRollback,String token) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(token);    boolean setSnapshotSyncActive=true;    disableImageForSnapshots(rpSystemId,snapshots,isRollback,setSnapshotSyncActive,token);    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error(String.format("snapshotDisableImageAccessSingleStep Failed - Protection System: %s",String.valueOf(rpSystemId)));    return stepFailed(token,e,"snapshotDisableImageAccessSingleStep");  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  public static void startAll(){  if (gatheringStats) {    Log.writeln("Error: calling Stats.startAll() while stats running");    Log.writeln("       verbosity > 0 and the harness mechanism may be conflicitng");    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(false);  }  gatheringStats=true;  for (int c=0; c < counters; c++) {    if (counter[c].getStart())     counter[c].start();  }  if (Options.xmlStats.getValue()) {    Xml.begin();    Xml.openTag("mmtk-stats");    Xml.end();  }}  }
class C{  private void initView(DayView view){  view.setSelectedHour(mSelectionHour);  view.mSelectedEvents.clear();  view.mComputeSelectedEvents=true;  view.mFirstHour=mFirstHour;  view.mFirstHourOffset=mFirstHourOffset;  view.remeasure(getWidth(),getHeight());  view.initAllDayHeights();  view.setSelectedEvent(null);  view.mPrevSelectedEvent=null;  view.mFirstDayOfWeek=mFirstDayOfWeek;  if (view.mEvents.size() > 0) {    view.mSelectionAllday=mSelectionAllday;  } else {    view.mSelectionAllday=false;  }  view.recalc();}  }
class C{  List<VPlexDeviceInfo> findLocalDevices(List<VPlexExtentInfo> extentInfoList) throws VPlexApiException {  List<VPlexDeviceInfo> deviceInfoList=new ArrayList<VPlexDeviceInfo>();  Iterator<VPlexExtentInfo> extentIter=extentInfoList.iterator();  while (extentIter.hasNext()) {    VPlexExtentInfo extentInfo=extentIter.next();    int retryCount=0;    boolean deviceFound=false;    while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {      try {        VPlexStorageVolumeInfo storageVolumeInfo=extentInfo.getStorageVolumeInfo();        String baseDeviceName=storageVolumeInfo.getName();        StringBuilder deviceNameBuilder=new StringBuilder();        deviceNameBuilder.append(VPlexApiConstants.DEVICE_PREFIX);        deviceNameBuilder.append(baseDeviceName);        s_logger.info("Find device with name {}",deviceNameBuilder.toString());        List<VPlexDeviceInfo> clusterDeviceInfoList=getLocalDeviceInfoOnCluster(storageVolumeInfo.getClusterId());        for (        VPlexDeviceInfo deviceInfo : clusterDeviceInfoList) {          s_logger.info("Device Info: {}",deviceInfo.toString());          if (deviceInfo.getName().equals(deviceNameBuilder.toString())) {            s_logger.info("Found device for extent {}",extentInfo.getName());            deviceFound=true;            List<VPlexExtentInfo> deviceExtentInfoList=new ArrayList<VPlexExtentInfo>();            deviceExtentInfoList.add(extentInfo);            deviceInfo.setExtentInfo(deviceExtentInfoList);            deviceInfo.setCluster(storageVolumeInfo.getClusterId());            deviceInfoList.add(deviceInfo);            break;          }        }        if (!deviceFound) {          s_logger.warn("Local device not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);          if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {            VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);          } else {            throw VPlexApiException.exceptions.cantFindLocalDeviceForExtent(extentInfo.getName());          }        } else {          break;        }      } catch (      VPlexApiException vae) {        s_logger.error(String.format("Exception finding local device on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {          VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);        } else {          throw vae;        }      }catch (      Exception e) {        s_logger.error(String.format("Exception finding local device on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {          VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);        } else {          throw e;        }      }    }  }  return deviceInfoList;}  }
class C{  public DelayedPlayerTextSender(final Player player,final String message,final NotificationType type,final int seconds){  this.player=player;  this.message=message;  this.type=type;  SingletonRepository.getTurnNotifier().notifyInSeconds(seconds,this);}  }
class C{  public boolean isWaiting(){  return waiting;}  }
class C{  public MsrpSession createMsrpSession(byte[] sdp,MsrpEventListener listener){  SdpParser parser=new SdpParser(sdp);  Vector<MediaDescription> media=parser.getMediaDescriptions();  MediaDescription mediaDesc=media.elementAt(0);  MediaAttribute pathAttribute=mediaDesc.getMediaAttribute("path");  String remoteMsrpPath=pathAttribute.getValue();  MsrpSession session;  MediaAttribute setupAttribute=mediaDesc.getMediaAttribute("setup");  String setup=null;  if (setupAttribute != null) {    setup=setupAttribute.getValue();  } else {    logger.error("Media attribute \"setup\" is missing!");    logger.warn("media=" + mediaDesc.toString());    if (mediaDesc.mMediaAttributes != null)     for (    MediaAttribute attribute : mediaDesc.mMediaAttributes) {      logger.warn("attribute key=" + attribute.getName() + " value="+ attribute.getValue());    }  }  if ("active".equalsIgnoreCase(setup)) {    session=createMsrpServerSession(remoteMsrpPath,listener);  } else {    String remoteHost=SdpUtils.extractRemoteHost(parser.sessionDescription,mediaDesc);    int remotePort=mediaDesc.mPort;    String fingerprint=SdpUtils.extractFingerprint(parser,mediaDesc);    session=createMsrpClientSession(remoteHost,remotePort,remoteMsrpPath,listener,fingerprint);  }  return session;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("LDAPCertStoreParameters: [\n");  sb.append("  serverName: " + serverName + "\n");  sb.append("  port: " + port + "\n");  sb.append("]");  return sb.toString();}  }
class C{  protected GeoPoint[] findIntersections(final PlanetModel planetModel,final Plane q,final Membership[] bounds,final Membership[] moreBounds){  final double lineVectorX=y * q.z - z * q.y;  final double lineVectorY=z * q.x - x * q.z;  final double lineVectorZ=x * q.y - y * q.x;  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {    return NO_POINTS;  }  double x0;  double y0;  double z0;  final double denomYZ=this.y * q.z - this.z * q.y;  final double denomXZ=this.x * q.z - this.z * q.x;  final double denomXY=this.x * q.y - this.y * q.x;  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomYZ;    x0=0.0;    y0=(-this.D * q.z - this.z * -q.D) * denom;    z0=(this.y * -q.D + this.D * q.y) * denom;  } else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomXZ;    x0=(-this.D * q.z - this.z * -q.D) * denom;    y0=0.0;    z0=(this.x * -q.D + this.D * q.x) * denom;  } else {    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {      return NO_POINTS;    }    final double denom=1.0 / denomXY;    x0=(-this.D * q.y - this.y * -q.D) * denom;    y0=(this.x * -q.D + this.D * q.x) * denom;    z0=0.0;  }  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;  final double BsquaredMinus=B * B - 4.0 * A * C;  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {    final double inverse2A=1.0 / (2.0 * A);    final double t=-B * inverse2A;    final double pointX=lineVectorX * t + x0;    final double pointY=lineVectorY * t + y0;    final double pointZ=lineVectorZ * t + z0;    for (    final Membership bound : bounds) {      if (!bound.isWithin(pointX,pointY,pointZ)) {        return NO_POINTS;      }    }    for (    final Membership bound : moreBounds) {      if (!bound.isWithin(pointX,pointY,pointZ)) {        return NO_POINTS;      }    }    return new GeoPoint[]{new GeoPoint(pointX,pointY,pointZ)};  } else   if (BsquaredMinus > 0.0) {    final double inverse2A=1.0 / (2.0 * A);    final double sqrtTerm=Math.sqrt(BsquaredMinus);    final double t1=(-B + sqrtTerm) * inverse2A;    final double t2=(-B - sqrtTerm) * inverse2A;    final double point1X=lineVectorX * t1 + x0;    final double point1Y=lineVectorY * t1 + y0;    final double point1Z=lineVectorZ * t1 + z0;    final double point2X=lineVectorX * t2 + x0;    final double point2Y=lineVectorY * t2 + y0;    final double point2Z=lineVectorZ * t2 + z0;    boolean point1Valid=true;    boolean point2Valid=true;    for (    final Membership bound : bounds) {      if (!bound.isWithin(point1X,point1Y,point1Z)) {        point1Valid=false;        break;      }    }    if (point1Valid) {      for (      final Membership bound : moreBounds) {        if (!bound.isWithin(point1X,point1Y,point1Z)) {          point1Valid=false;          break;        }      }    }    for (    final Membership bound : bounds) {      if (!bound.isWithin(point2X,point2Y,point2Z)) {        point2Valid=false;        break;      }    }    if (point2Valid) {      for (      final Membership bound : moreBounds) {        if (!bound.isWithin(point2X,point2Y,point2Z)) {          point2Valid=false;          break;        }      }    }    if (point1Valid && point2Valid) {      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z),new GeoPoint(point2X,point2Y,point2Z)};    }    if (point1Valid) {      return new GeoPoint[]{new GeoPoint(point1X,point1Y,point1Z)};    }    if (point2Valid) {      return new GeoPoint[]{new GeoPoint(point2X,point2Y,point2Z)};    }    return NO_POINTS;  } else {    return NO_POINTS;  }}  }
class C{  public int taskNameHash(){  return taskNameHash;}  }
class C{  public void addListener(ResultListener l){  resultListenerList.add(l);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.403 -0400",hash_original_method="6E266F7886D6B5A2425ED73C34F43FE1",hash_generated_method="96052107A34B7CD5A389B5F1DF090657") public static int swapInteger(int value){  return (((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16) + (((value >> 16) & 0xff) << 8)+ (((value >> 24) & 0xff) << 0);}  }
class C{  boolean returns(){  return returnsNormally() || returnsAbruptly();}  }
class C{  public static Supply tryAdd(final int divisibility,final Supply s1,final Supply s2){  final long maxQuantity=MosaicConstants.MAX_QUANTITY / getMultipler(divisibility);  final Supply sum=s1.add(s2);  return sum.getRaw() > maxQuantity ? null : sum;}  }
class C{  public void testClassificationRemoveNominal(){  performTest(false,true,false,false,true);}  }
class C{  public static List<Polygon> SpatialKnnQueryUsingIndex(PolygonRDD objectRDD,Point queryCenter,Integer k){  if (objectRDD.indexedRDDNoId == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDDNoId is null");  }  JavaRDD<Polygon> tmp=objectRDD.indexedRDDNoId.mapPartitions(new PolygonKnnJudgementUsingIndex(queryCenter,k));  return tmp.takeOrdered(k,new PolygonDistanceComparator(queryCenter));}  }
class C{  public Builder addFixed64(final long value){  if (result.fixed64 == null) {    result.fixed64=new ArrayList<Long>();  }  result.fixed64.add(value);  return this;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.324 -0500",hash_original_method="CCBA978684365F19FBD68BD48C79C23F",hash_generated_method="D0C2DD8281FBEC9648419EC2F2A6CF45") public ThreadLocal(){}  }
class C{  public static ImmutableList<IFlowgraphView> loadNativeFlowgraphs(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  return loadModuleFlowgraphs(provider,module,viewTagManager,nodeTagManager,ViewType.Native);}  }
class C{  Path(byte[] template){  mCalledPath=new HalfPath(template);  mBaselinePath=new HalfPath(template);  mSyncPointList=null;}  }
class C{  public void doProperties(){  if (null != transferButton.getTransferObject()) {    transferButton.doClick();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDAudioDecoderFilter(getString(stack));  return null;}  }
class C{  public static String generateRandomString(int length){  String AB="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";  Random rnd=new Random();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; i++)   sb.append(AB.charAt(rnd.nextInt(AB.length())));  return sb.toString();}  }
class C{  private Element marshallAssertion(Assertion assertion){  assert assertion != null;  AssertionMarshaller marshaller=new AssertionMarshaller();  Element assertionElement;  try {    assertionElement=marshaller.marshall(assertion);  } catch (  MarshallingException e) {    throw new IllegalStateException(e);  }  log.debug("Successfully marshalled assertion: {}",assertionElement);  return assertionElement;}  }
class C{  private void basicGrantLock(InternalDistributedMember owner,long newLeaseExpireTime,int lockId,RemoteThread remoteThread){  Assert.assertTrue(remoteThread != null);  Assert.assertTrue(lockId > -1,"Invalid attempt to grant lock with lockId " + lockId);  this.lessee=owner;  this.leaseExpireTime=newLeaseExpireTime;  this.leaseId=lockId;  this.lesseeThread=remoteThread;  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.grantLock.grantor] Granting {}",toString(false));  }}  }
class C{  public SmellSource(final int numDimensions){  this.stimulusVector=SimbrainMath.randomVector(numDimensions);}  }
class C{  @Override public boolean isDead(){  return !isActive();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  CDATASection cDataSec;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  cDataSec=aNewDoc.createCDATASection("this is CDATASection data");  aNode=doc.importNode(cDataSec,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is CDATASection data",value);}  }
class C{  protected boolean disconnectFromNode(DiscoveryNode node,Channel channel,String reason){  NodeChannels nodeChannels=connectedNodes.get(node);  if (nodeChannels != null && nodeChannels.hasChannel(channel)) {    connectionLock.acquire(node.id());    try {      nodeChannels=connectedNodes.get(node);      if (nodeChannels != null && nodeChannels.hasChannel(channel)) {        connectedNodes.remove(node);        try {          logger.debug("disconnecting from [{}], {}",node,reason);          nodeChannels.close();        }  finally {          logger.trace("disconnected from [{}], {}",node,reason);          transportServiceAdapter.raiseNodeDisconnected(node);        }        return true;      }    }  finally {      connectionLock.release(node.id());    }  }  return false;}  }
class C{  public ChopBezierConnector(){}  }
class C{  private static void lockRelations(Session session,int bookType,int typeRel,ScrOfic scrofic,String entidad) throws HibernateException, SQLException, Exception {  StringBuffer query=new StringBuffer();  query.append("FROM ");  query.append(HIBERNATE_ScrLockrelation);  query.append(" scr WHERE scr.typebook=? AND scr.typerel=? AND scr.scrOfic.id=?");  List scrRelationList=session.find(query.toString(),new Object[]{new Integer(bookType),new Integer(typeRel),new Integer(scrofic.getId().intValue())},new Type[]{Hibernate.INTEGER,Hibernate.INTEGER,Hibernate.INTEGER});  if (scrRelationList != null && !scrRelationList.isEmpty()) {    DBEntityDAOFactory.getCurrentDBEntityDAO().lockScrRelations(bookType,typeRel,scrofic.getId().intValue(),entidad);  } else {    ScrLockrelation scrLockrelation=new ScrLockrelation();    scrLockrelation.setTypebook(bookType);    scrLockrelation.setTyperel(typeRel);    scrLockrelation.setScrOfic(scrofic);    session.save(scrLockrelation);    DBEntityDAOFactory.getCurrentDBEntityDAO().lockScrRelations(bookType,typeRel,scrofic.getId().intValue(),entidad);  }}  }
class C{  public final void testConjunctiveWithContextAndResourceIdParameters(){  assertNotNull(Validators.conjunctive(getContext(),android.R.string.cancel,Validators.notEmpty("foo"),Validators.minLength("foo",1)));}  }
class C{  public boolean isStorageMounted(StorageData storageData){  return getLocalDataForStorage(storageData) != null;}  }
class C{  synchronized public boolean hasTimestamp(long commitTime){  return super.contains(getKey(commitTime));}  }
class C{  @Override public void buildGenerator(Instances inputInstances) throws Exception {  m_random=new Random(m_seed);  m_instances=inputInstances;  m_globalMeansOrModes=new double[m_instances.numAttributes()];  if (m_weightingDimensions == null) {    m_weightingDimensions=new boolean[m_instances.numAttributes()];  }  for (int i=0; i < m_instances.numAttributes(); i++) {    if (i != m_instances.classIndex()) {      m_globalMeansOrModes[i]=m_instances.meanOrMode(i);    }  }  m_kernelParams=new double[m_instances.numInstances()][m_instances.numAttributes()];  computeParams();}  }
class C{  @Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  for (  Callback callback : callbacks) {    if (callback instanceof NameCallback) {      ((NameCallback)callback).setName(wsProxyInfo.getUserCredentials().getUser());    } else     if (callback instanceof PasswordCallback) {      ((PasswordCallback)callback).setPassword(wsProxyInfo.getUserCredentials().getPassword().toCharArray());    } else {      throw new UnsupportedCallbackException(callback,"Unrecognized Callback");    }  }}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void onShowSnackbar(String msg,View parentView){  showSnackbar(msg,parentView);}  }
class C{  public synchronized TypeInstanceReference createReference(final IAddress address,final int operandPosition,final INaviOperandTreeNode node,final TypeInstance instance,final INaviView view) throws CouldntSaveDataException {  Preconditions.checkNotNull(address,"Error: address argument can not be null");  Preconditions.checkArgument(operandPosition >= 0,"Error: operand position must be equal or greater then zero");  Preconditions.checkNotNull(node,"Error: node argument can not be null");  Preconditions.checkNotNull(instance,"Error: instance argument can not be null");  final TypeInstanceReference reference=backend.createTypeInstanceReference(address,operandPosition,node,instance,view);  referencesByInstance.put(instance,reference);  notifyReferenceAdded(reference);  return reference;}  }
class C{  public StochasticRidgeRegression(double lambda,int epochs,int batchSize,double learningRate){  this(lambda,epochs,batchSize,learningRate,new NoDecay());}  }
class C{  static private void fillMissingValues(Map<Integer,Short> map,IInterval interval,short defaultVal){  for (  IMessageSummary ms : interval.getMessageSummaries()) {    map.put(ms.getMessageInternalId(),defaultVal);  }}  }
class C{  String computeDescription(IMethod method){  StringBuffer buf=new StringBuffer();  buf.append("Callers of ");  buf.append(method.getElementName());  buf.append("(");  boolean first=true;  for (  String paramType : method.getParameterTypes()) {    if (first)     first=false; else     buf.append(",");    buf.append(Signature.toString(paramType));  }  buf.append(")");  return buf.toString();}  }
class C{  public static RecognitionAudio createRecognitionAudio(URI uri) throws IOException {  if (uri.getScheme() == null) {    uri=new File(uri.toString()).toURI();    Path path=Paths.get(uri);    return audioFromBytes(Files.readAllBytes(path));  } else   if (uri.getScheme().equals(FILE_SCHEME)) {    Path path=Paths.get(uri);    return audioFromBytes(Files.readAllBytes(path));  } else   if (uri.getScheme().equals(GS_SCHEME)) {    return RecognitionAudio.newBuilder().setUri(uri.toString()).build();  }  throw new RuntimeException("scheme not supported " + uri.getScheme());}  }
class C{  public boolean isZoomEnabled(){  return mZoomEnabled;}  }
class C{  private void readObject(){}  }
class C{  public void addLogListener(LogListener l){  super.addLogListener(l);  for (  EvaluationStatisticsExporter exporter : m_Exporters)   exporter.addLogListener(l);}  }
class C{  static private double quickSelect(IDoubleVector x,int k,int start,int end){  if (k < start || k > end) {    throw new AdeCoreIllegalArgumentException("requested selection is outside of range");  }  final int pivotIndex=((int)Math.random() * (end - start + 1)) + start;  final int pivotPosition=partition(x,start,end,pivotIndex);  if (pivotPosition == k) {    return x.get(k);  } else   if (pivotPosition < k) {    return quickSelect(x,k,pivotPosition + 1,end);  } else {    return quickSelect(x,k,start,pivotPosition - 1);  }}  }
class C{  public ServerRequestInterface newSIPServerRequest(SIPRequest requestReceived,MessageChannel requestMessageChannel){  Iterator<SIPServerTransaction> transactionIterator;  SIPServerTransaction nextTransaction;  SIPServerTransaction currentTransaction;  String key=requestReceived.getTransactionId();  requestReceived.setMessageChannel(requestMessageChannel);  currentTransaction=(SIPServerTransaction)serverTransactionTable.get(key);  if (currentTransaction == null || !currentTransaction.isMessagePartOfTransaction(requestReceived)) {    transactionIterator=serverTransactionTable.values().iterator();    currentTransaction=null;    if (!key.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {      while (transactionIterator.hasNext() && currentTransaction == null) {        nextTransaction=(SIPServerTransaction)transactionIterator.next();        if (nextTransaction.isMessagePartOfTransaction(requestReceived)) {          currentTransaction=nextTransaction;        }      }    }    if (currentTransaction == null) {      currentTransaction=findPendingTransaction(requestReceived);      if (currentTransaction != null) {        requestReceived.setTransaction(currentTransaction);        if (currentTransaction != null && currentTransaction.acquireSem())         return currentTransaction; else         return null;      }      currentTransaction=createServerTransaction(requestMessageChannel);      if (currentTransaction != null) {        currentTransaction.setOriginalRequest(requestReceived);        requestReceived.setTransaction(currentTransaction);      }    }  }  if (isLoggingEnabled()) {    stackLogger.logDebug("newSIPServerRequest( " + requestReceived.getMethod() + ":"+ requestReceived.getTopmostVia().getBranch()+ "):"+ currentTransaction);  }  if (currentTransaction != null)   currentTransaction.setRequestInterface(sipMessageFactory.newSIPServerRequest(requestReceived,currentTransaction));  if (currentTransaction != null && currentTransaction.acquireSem()) {    return currentTransaction;  } else   if (currentTransaction != null) {    try {      if (currentTransaction.isMessagePartOfTransaction(requestReceived) && currentTransaction.getMethod().equals(requestReceived.getMethod())) {        SIPResponse trying=requestReceived.createResponse(Response.TRYING);        trying.removeContent();        currentTransaction.getMessageChannel().sendMessage(trying);      }    } catch (    Exception ex) {      if (isLoggingEnabled())       stackLogger.logError("Exception occured sending TRYING");    }    return null;  } else {    return null;  }}  }
class C{  public boolean isSetClose(){  return EncodingUtils.testBit(__isset_bitfield,__CLOSE_ISSET_ID);}  }
class C{  default void respond(AggregatedHttpMessage res){  final HttpHeaders headers=res.headers();  write(headers);  final HttpData content=res.content();  if (isContentAlwaysEmpty(headers.status())) {    if (!content.isEmpty()) {      throw new IllegalArgumentException("A " + headers.status() + " response must have empty content: "+ content.length()+ " byte(s)");    }    if (!res.trailingHeaders().isEmpty()) {      throw new IllegalArgumentException("A " + headers.status() + " response must not have trailing headers: "+ res.trailingHeaders());    }    close();    return;  }  if (!content.isEmpty()) {    write(content);  }  final HttpHeaders trailingHeaders=res.trailingHeaders();  if (!trailingHeaders.isEmpty()) {    write(trailingHeaders);  }  close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.765 -0500",hash_original_method="22AFCF8A6EE54CCCB143274E3F308CC7",hash_generated_method="ABA44C554E38D1547244623253CC4B81") public ResponseHeaders combine(ResponseHeaders network){  RawHeaders result=new RawHeaders();  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if (fieldName.equals("Warning") && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public BarChartComponent(final String name){  super(name);  model=new BarChartModel();  model.defaultInit();  init();  addListener();}  }
class C{  public synchronized static String formatGMT(long gmtTime,String format){  _gmtDate.setGMTTime(gmtTime);  return _gmtDate.format(new CharBuffer(),format).toString();}  }
class C{  @Override public <V>MethodVault<V> newMethod(Class<?> type,String methodName,Class<?>[] paramTypes){  Objects.requireNonNull(type);  MethodVault<V> method=newMethodRec(type,methodName,paramTypes);  if (method != null) {    return method;  }  throw new IllegalStateException(L.l("Unknown method {0}.{1} {2}",type.getSimpleName(),methodName,Arrays.asList(paramTypes)));}  }
class C{  static public Locator northWest(){  return northWest(false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  private static double drawNumber(){  double u, v, s;  do {    u=Math.random() * 2 - 1;    v=Math.random() * 2 - 1;    s=u * u + v * v;  } while (s == 0 || s >= 1);  return u * Math.sqrt(-2d * Math.log(s) / s);}  }
class C{  public BST(){}  }
class C{  public void onRemoveLayer(final Layer layer){  mapLayerTableViewer.removeLayer(layer);}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);}  }
class C{  public void addChild(FXGNode child){  delegate.addChild(child);}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  protected void ensureRowsAreVisible(int beginRow,int endRow){  if (tree != null && beginRow >= 0 && endRow < getRowCount(tree)) {    Rectangle visRect=tree.getVisibleRect();    if (beginRow == endRow) {      Rectangle scrollBounds=getPathBounds(tree,getPathForRow(tree,beginRow));      if (scrollBounds != null) {        scrollBounds.x=visRect.x;        scrollBounds.width=visRect.width;        tree.scrollRectToVisible(scrollBounds);      }    } else {      Rectangle beginRect=getPathBounds(tree,getPathForRow(tree,beginRow));      if (beginRect != null) {        Rectangle testRect=beginRect;        int beginY=beginRect.y;        int maxY=beginY + visRect.height;        for (int counter=beginRow + 1; counter <= endRow; counter++) {          testRect=getPathBounds(tree,getPathForRow(tree,counter));          if (testRect != null && (testRect.y + testRect.height) > maxY) {            counter=endRow;          }        }        if (testRect == null) {          return;        }        tree.scrollRectToVisible(new Rectangle(visRect.x,beginY,1,testRect.y + testRect.height - beginY));      }    }  }}  }
class C{  public static Codec[] generateEncodingCodecChain(String encoding){  if (encoding.equalsIgnoreCase(H264VideoFormat.ENCODING)) {    Codec[] chain={new com.orangelabs.rcs.core.ims.protocol.rtp.codec.video.h264.JavaPacketizer()};    return chain;  } else {    return new Codec[0];  }}  }
class C{  private Element findNextUndeclaredElement(){  if (elementIterator != null) {    while (elementIterator.hasNext()) {      Object next=elementIterator.next();      Element first=firstElement(next);      if (first != null && isUndeclared(first.getElementKey())) {        return first;      } else {        sublistIterator=null;      }    }    sublistIterator=null;    elementIterator=null;  }  mode=metadataIterator != null && metadataIterator.hasNext() ? Mode.DECLARED : Mode.DONE;  return null;}  }
class C{  public boolean isBurnable(){  return getMaterialValues().getFireResistance() >= 0;}  }
class C{  public boolean dispatchEvent(NodeEventTarget target,Event evt) throws EventException {  if (evt == null) {    return false;  }  if (!(evt instanceof AbstractEvent)) {    throw createEventException(DOMException.NOT_SUPPORTED_ERR,"unsupported.event",new Object[]{});  }  AbstractEvent e=(AbstractEvent)evt;  String type=e.getType();  if (type == null || type.length() == 0) {    throw createEventException(EventException.UNSPECIFIED_EVENT_TYPE_ERR,"unspecified.event",new Object[]{});  }  setTarget(e,target);  stopPropagation(e,false);  stopImmediatePropagation(e,false);  preventDefault(e,false);  NodeEventTarget[] ancestors=getAncestors(target);  int bubbleLimit=e.getBubbleLimit();  int minAncestor=0;  if (isSingleScopeEvent(e)) {    AbstractNode targetNode=(AbstractNode)target;    Node boundElement=targetNode.getXblBoundElement();    if (boundElement != null) {      minAncestor=ancestors.length;      while (minAncestor > 0) {        AbstractNode ancestorNode=(AbstractNode)ancestors[minAncestor - 1];        if (ancestorNode.getXblBoundElement() != boundElement) {          break;        }        minAncestor--;      }    }  } else   if (bubbleLimit != 0) {    minAncestor=ancestors.length - bubbleLimit + 1;    if (minAncestor < 0) {      minAncestor=0;    }  }  AbstractEvent[] es=getRetargettedEvents(target,ancestors,e);  boolean preventDefault=false;  HashSet stoppedGroups=new HashSet();  HashSet toBeStoppedGroups=new HashSet();  for (int i=0; i < minAncestor; i++) {    NodeEventTarget node=ancestors[i];    setCurrentTarget(es[i],node);    setEventPhase(es[i],Event.CAPTURING_PHASE);    fireImplementationEventListeners(node,es[i],true);  }  for (int i=minAncestor; i < ancestors.length; i++) {    NodeEventTarget node=ancestors[i];    setCurrentTarget(es[i],node);    setEventPhase(es[i],Event.CAPTURING_PHASE);    fireImplementationEventListeners(node,es[i],true);    fireEventListeners(node,es[i],true,stoppedGroups,toBeStoppedGroups);    fireHandlerGroupEventListeners(node,es[i],true,stoppedGroups,toBeStoppedGroups);    preventDefault=preventDefault || es[i].getDefaultPrevented();    stoppedGroups.addAll(toBeStoppedGroups);    toBeStoppedGroups.clear();  }  setEventPhase(e,Event.AT_TARGET);  setCurrentTarget(e,target);  fireImplementationEventListeners(target,e,false);  fireEventListeners(target,e,false,stoppedGroups,toBeStoppedGroups);  fireHandlerGroupEventListeners(node,e,false,stoppedGroups,toBeStoppedGroups);  stoppedGroups.addAll(toBeStoppedGroups);  toBeStoppedGroups.clear();  preventDefault=preventDefault || e.getDefaultPrevented();  if (e.getBubbles()) {    for (int i=ancestors.length - 1; i >= minAncestor; i--) {      NodeEventTarget node=ancestors[i];      setCurrentTarget(es[i],node);      setEventPhase(es[i],Event.BUBBLING_PHASE);      fireImplementationEventListeners(node,es[i],false);      fireEventListeners(node,es[i],false,stoppedGroups,toBeStoppedGroups);      fireHandlerGroupEventListeners(node,es[i],false,stoppedGroups,toBeStoppedGroups);      preventDefault=preventDefault || es[i].getDefaultPrevented();      stoppedGroups.addAll(toBeStoppedGroups);      toBeStoppedGroups.clear();    }    for (int i=minAncestor - 1; i >= 0; i--) {      NodeEventTarget node=ancestors[i];      setCurrentTarget(es[i],node);      setEventPhase(es[i],Event.BUBBLING_PHASE);      fireImplementationEventListeners(node,es[i],false);      preventDefault=preventDefault || es[i].getDefaultPrevented();    }  }  if (!preventDefault) {    runDefaultActions(e);  }  return preventDefault;}  }
class C{  public boolean removeConfirmed(){  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.VARIABLE_BINDING__PATTERN:    return basicSetPattern(null,msgs);case N4JSPackage.VARIABLE_BINDING__EXPRESSION:  return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int compare(Object obj1,Object obj2){  if (obj1 == obj2) {    return 0;  }  AttributeTypeAndValue atav1=(AttributeTypeAndValue)obj1;  AttributeTypeAndValue atav2=(AttributeTypeAndValue)obj2;  String kw1=atav1.getType().getName();  String kw2=atav2.getType().getName();  if (kw1 != null && kw2 == null) {    return -1;  }  if (kw1 == null && kw2 != null) {    return 1;  }  if (kw1 != null && kw2 != null) {    return kw1.compareTo(kw2);  }  return compateOids(atav1.getType(),atav2.getType());}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String fileType,Integer businessObjectFormatVersion,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey){  return createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,fileType,businessObjectFormatVersion,businessObjectFormatDescription,businessObjectFormatLatestVersion,businessObjectFormatPartitionKey,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
