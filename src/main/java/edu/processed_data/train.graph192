class C{  NonAntialiasingImageNode(final Image image){  super();  setImage(image);}  }
class C{  protected static FolderDataSession preparationOfFolder(String sessionID,Integer bookID,int fdrid,boolean updateDate,Integer launchDistOutRegister,String language,String entidad,FolderDataSession data) throws BookException, SessionException {  Transaction tran=null;  boolean asocEqualFld8=true;  try {    data=getInformation(sessionID,bookID,entidad,data);    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    if (data.isCreate()) {      data=setUser(sessionID,bookID,entidad,data);      data=setScrOficForImportFolder(session,data);    } else {      data=loadAxSfOld(session,bookID,fdrid,language,entidad,data);      data=setChangedFields(data);      if (data.changedContainsKey(new Integer(8))) {        asocEqualFld8=false;      }      data.resetAxSfOld();    }    data=setDate(updateDate,entidad,data);    Integer scrCaId=getTipoAsuntoId(bookID,true,entidad,data);    if (log.isDebugEnabled()) {      log.debug("scrCaId => " + scrCaId);    }    data=setTipoAsunto(session,bookID,scrCaId,entidad,data);    data=isStateCompleted(bookID,entidad,data);    scrCaId=getTipoAsuntoId(bookID,false,entidad,data);    data=setDocumentsTipoAsunto(session,scrCaId,data,data.isCreate());    data=isLaunchDistribution(session,bookID,launchDistOutRegister,entidad,data);    data=isAutomaticRegisterCreation(session,bookID,fdrid,asocEqualFld8,entidad,data);    HibernateUtil.commitTransaction(tran);  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to update a folder for the session [" + sessionID + "] and bookID ["+ bookID+ "]",e);    throw new BookException(BookException.ERROR_UPDATE_FOLDER);  } finally {    HibernateUtil.closeSession(entidad);  }  return data;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.567 -0500",hash_original_method="F1A82616FFDC8899DB87D416AB14644B",hash_generated_method="D6AF9C14735C8B9884C35F7D7B605D3C") protected void initTransportLayer() throws IOException {  input=super.getInputStream();  output=super.getOutputStream();}  }
class C{  public String type(){  return type;}  }
class C{  public IrcDiscovery(String channel,String server,int port){  this.channel=channel;  this.server=server;  this.port=port;}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @RequestMapping(value="/property/assessmentdetails",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String fetchAssessmentDetails(@RequestBody String assessmentRequest) throws JsonGenerationException, JsonMappingException, IOException {  AssessmentRequest assessmentReq=(AssessmentRequest)getObjectFromJSONRequest(assessmentRequest,AssessmentRequest.class);  String responseJson=new String();  ErrorDetails errorDetails=validationUtil.validateAssessmentDetailsRequest(assessmentReq);  if (errorDetails != null) {    responseJson=getJSONResponse(errorDetails);  } else {    RestAssessmentDetails assessmentDetails=propertyExternalService.fetchAssessmentDetails(assessmentReq.getAssessmentNo());    responseJson=getJSONResponse(assessmentDetails);  }  return responseJson;}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.EQUATION_FAKE_DEFINITION;}  }
class C{  public ImageDataDirectory(BinaryInputBuffer in) throws java.io.IOException {  VirtualAddress=in.readDWORD();  Size=in.readDWORD();}  }
class C{  private void testDriver() throws CouldntLoadDriverException {  try {    Class.forName(m_databaseConfiguration.getDriver());  } catch (  final ClassNotFoundException exception) {    throw new CouldntLoadDriverException("E00044: Couldn't load database driver " + m_databaseConfiguration.getDriver() + ".");  }}  }
class C{  public Boolean isDHCP(){  return dhcp;}  }
class C{  private static boolean isAbsolutePath(final String filePath){  final File[] roots=File.listRoots();  for (int i=0; i < roots.length; i++) {    if (filePath.startsWith(roots[i].getAbsolutePath())) {      return true;    }  }  return false;}  }
class C{  public static boolean loadAttributes(final String filepath,Bundle out){  ExifInterface e;  try {    e=new ExifInterface(filepath);  } catch (  IOException e1) {    e1.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    out.putString(tag,e.getAttribute(tag));  }  return true;}  }
class C{  protected Statement createConstrainedStatement(PropertyNode propertyNode,Expression fieldExpression){  return stmt(callThisX("fireVetoableChange",args(constX(propertyNode.getName()),fieldExpression,varX("value"))));}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + alloc.width) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public static List<ErrorLogger.ErrorObject> isCPLMergeable(PayloadRecord referenceCPLPayloadRecord,List<PayloadRecord> cplPayloads) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  List<PayloadRecord> cplPayloadRecords=Collections.unmodifiableList(cplPayloads);  List<ApplicationComposition> applicationCompositions=new ArrayList<>();  try {    applicationCompositions.add(ApplicationCompositionFactory.getApplicationComposition(new ByteArrayByteRangeProvider(referenceCPLPayloadRecord.getPayload()),imfErrorLogger));  } catch (  IMFException e) {    imfErrorLogger.addAllErrors(e.getErrors());  }  for (  PayloadRecord cpl : cplPayloadRecords) {    try {      applicationCompositions.add(ApplicationCompositionFactory.getApplicationComposition(new ByteArrayByteRangeProvider(cpl.getPayload()),imfErrorLogger));    } catch (    IMFException e) {      imfErrorLogger.addAllErrors(e.getErrors());    }  }  if (imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  VirtualTrack referenceVideoVirtualTrack=applicationCompositions.get(0).getVideoVirtualTrack();  UUID referenceCPLUUID=applicationCompositions.get(0).getUUID();  for (int i=1; i < applicationCompositions.size(); i++) {    if (!referenceVideoVirtualTrack.equivalent(applicationCompositions.get(i).getVideoVirtualTrack())) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.WARNING,String.format("CPL Id %s can't be merged with Reference CPL Id %s, since the video virtual tracks do not seem to represent the same timeline.",applicationCompositions.get(i).getUUID(),referenceCPLUUID));    }  }  Boolean bAudioVirtualTrackMapFail=false;  List<Map<Set<DOMNodeObjectModel>,? extends VirtualTrack>> audioVirtualTracksMapList=new ArrayList<>();  for (  ApplicationComposition applicationComposition : applicationCompositions) {    try {      audioVirtualTracksMapList.add(applicationComposition.getAudioVirtualTracksMap());    } catch (    IMFException e) {      bAudioVirtualTrackMapFail=false;      imfErrorLogger.addAllErrors(e.getErrors());    }  }  if (!bAudioVirtualTrackMapFail) {    Map<Set<DOMNodeObjectModel>,? extends VirtualTrack> referenceAudioVirtualTracksMap=audioVirtualTracksMapList.get(0);    for (int i=1; i < audioVirtualTracksMapList.size(); i++) {      if (!compareAudioVirtualTrackMaps(Collections.unmodifiableMap(referenceAudioVirtualTracksMap),Collections.unmodifiableMap(audioVirtualTracksMapList.get(i)),imfErrorLogger)) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.WARNING,String.format("CPL Id %s can't be merged with Reference CPL Id %s, since 2 same language audio tracks do not seem to represent the same timeline.",applicationCompositions.get(i).getUUID(),referenceCPLUUID));      }    }  }  Composition.VirtualTrack referenceMarkerVirtualTrack=applicationCompositions.get(0).getMarkerVirtualTrack();  if (referenceMarkerVirtualTrack != null) {    UUID referenceMarkerCPLUUID=applicationCompositions.get(0).getUUID();    for (int i=1; i < applicationCompositions.size(); i++) {      if (!referenceVideoVirtualTrack.equivalent(applicationCompositions.get(i).getMarkerVirtualTrack())) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.WARNING,String.format("CPL Id %s can't be merged with Reference CPL Id %s, since the marker virtual tracks do not seem to represent the same timeline.",applicationCompositions.get(i).getUUID(),referenceMarkerCPLUUID));      }    }  }  return imfErrorLogger.getErrors();}  }
class C{  public TFloatFloatHashMap(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public int size(){  return 0;}  }
class C{  public ExceptionResponse(int fc){  setDataLength(1);  setFunctionCode(fc | Modbus.EXCEPTION_OFFSET);}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,Config struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {        struct.moduleCode=iprot.readString();        struct.setModuleCodeIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.configItemCode=iprot.readString();    struct.setConfigItemCodeIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.paramCode=iprot.readString();struct.setParamCodeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.paramValue=iprot.readString();struct.setParamValueIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  @SuppressWarnings("serial") public void testSubquery(){  final SubqueryRoot subquery=(SubqueryRoot)new Helper(){{      tmp=selectSubQuery(projection(bind(varNode(s),varNode(s))),where(statementPatternNode(varNode(s),constantNode(c),varNode(o))));    }  }.getTmp();  final QueryRoot query=(QueryRoot)new Helper(){{      tmp=select(projection(wildcard()),where(subquery));    }  }.getTmp();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(query),store);  final StaticAnalysis sa=new StaticAnalysis(query,context);  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("s"));    }  };  assertEquals(requiredBound,subquery.getRequiredBound(sa));  assertEquals(desiredBound,subquery.getDesiredBound(sa));}  }
class C{  public void testBug3554() throws Exception {  try {    new NonRegisteringDriver().connect("jdbc:mysql://localhost:3306/?user=root&password=root",new Properties());  } catch (  SQLException sqlEx) {    assertTrue(sqlEx.getMessage().indexOf("Malformed") == -1);  }}  }
class C{  public static boolean isEqualMethod(IMethodBinding method,String methodName,String[] parameters){  if (!method.getName().equals(methodName))   return false;  ITypeBinding[] methodParameters=method.getParameterTypes();  if (methodParameters.length != parameters.length)   return false;  String first, second;  int index;  for (int i=0; i < parameters.length; i++) {    first=parameters[i];    index=first.indexOf('<');    if (index > 0) {      int lastIndex=first.lastIndexOf('>');      StringBuffer buf=new StringBuffer();      buf.append(first.substring(0,index));      if (lastIndex < first.length() - 1)       buf.append(first.substring(lastIndex + 1,first.length()));      first=buf.toString();    }    second=methodParameters[i].getQualifiedName();    if (!first.equals(second)) {      second=methodParameters[i].getErasure().getQualifiedName();      if (!first.equals(second))       return false;    }  }  return true;}  }
class C{  public void deleteReviewsOfUser(PlatformUser user,boolean needsPermissionCheck) throws OperationNotPermittedException {  if (user != null) {    List<ProductReview> reviews=productReviewDao.getProductReviewsForUser(user);    if (reviews != null && reviews.size() > 0) {      for (      ProductReview reviewToBeRemoved : reviews) {        deleteReviewInt(reviewToBeRemoved,false,null,needsPermissionCheck);      }    }  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static SoapMessageImpl toResponse(SoapMessageImpl requestMessage) throws Exception {  SoapMessageImpl responseMessage=SoapUtils.toResponse(requestMessage);  List<SOAPElement> children=SoapUtils.getChildElements(responseMessage.getSoap().getSOAPBody());  if (children.isEmpty()) {    throw new CodedException(ErrorCodes.X_INVALID_SOAP,"Missing response element");  }  SOAPElement responseElement=children.get(0);  responseElement.removeContents();  return responseMessage;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected ElementoTabla findElementoTablaById(String idTabla,ContenedorElementos contenedor){  ElementoTabla tabla=null;  for (int i=0; (tabla == null) && (i < contenedor.getTotalElementos()); i++) {    Elemento elemento=(Elemento)contenedor.getElemento(i);switch (elemento.getTipo()) {case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:      tabla=findElementoTablaById(idTabla,(ContenedorElementos)elemento);    break;case TiposElemento.TIPO_ELEMENTO_TABLA:  if ((((ElementoTabla)elemento).getEdicion() != null) && idTabla.equals(((ElementoTabla)elemento).getEdicion().getId()))   tabla=(ElementoTabla)elemento;break;}}return tabla;}  }
class C{  public boolean needLogoutRequest(){  boolean retval=false;  if (this.getValidationResult().isValid()) {    Session session=this.getSession();    if (session != null) {      Collection<SessionParticipant> participants=session.getSessionParticipants();      if (participants != null && participants.size() > 1) {        retval=true;      }    }  }  return retval;}  }
class C{  public BasicRace(String appName){  RaceGUI basicGUI=new RaceGUI(appName);  controlPanel=basicGUI.getControlPanel();  controlPanel.addListener(this);  track=basicGUI.getTrack();  animator=new Animator(RACE_TIME,this);}  }
class C{  @Override public void removeNotify(){  KeymapManagerEx.getInstanceEx().removeWeakListener(myWeakKeymapManagerListener);  if (ScreenUtil.isStandardAddRemoveNotify(this)) {    Disposer.dispose(myDisposable);  }  super.removeNotify();}  }
class C{  public boolean addEdge(Edge edge){  if (edge == null)   throw new NullPointerException();  List<Edge> edgeList1=edgeLists.get(edge.getNode1());  List<Edge> edgeList2=edgeLists.get(edge.getNode2());  if (edgeList1 == null || edgeList2 == null) {    edgeLists=new HashMap<>(edgeLists);    edgeList1=edgeLists.get(edge.getNode1());    edgeList2=edgeLists.get(edge.getNode2());  }  if (edgeList1 == null || edgeList2 == null) {    throw new NullPointerException("Can't add an edge unless both " + "nodes are in the graph: " + edge);  }  if (edgeList1.contains(edge)) {    return true;  }  if (edgeList2.contains(edge)) {    return true;  }  edgeList1=new ArrayList<>(edgeList1);  edgeList2=new ArrayList<>(edgeList2);  edgeList1.add(edge);  edgeList2.add(edge);  edgeLists.put(edge.getNode1(),edgeList1);  edgeLists.put(edge.getNode2(),edgeList2);  edgesSet.add(edge);  if (Edges.isDirectedEdge(edge)) {    Node node=Edges.getDirectedEdgeTail(edge);    if (node.getNodeType() == NodeType.ERROR) {      getPcs().firePropertyChange("nodeAdded",null,node);    }  }  ancestors=null;  getPcs().firePropertyChange("edgeAdded",null,edge);  return true;}  }
class C{  private void notifyActionListeners(String command){  ActionListener[] listeners=this.getListeners(ActionListener.class);  int size=listeners.length;  ActionEvent event=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command);  for (int i=0; i < size; i++) {    listeners[i].actionPerformed(event);  }}  }
class C{  public AddColumnChange(Table table,Column newColumn,Column previousColumn,Column nextColumn){  super(table);  _newColumn=newColumn;  _previousColumn=previousColumn;  _nextColumn=nextColumn;}  }
class C{  @SuppressWarnings("static-access") private void storeParameters(){  boolean isUpgrade=true;  if (m_modeTransfer.isSelected())   isUpgrade=false;  s_parameters.setIsUpgrade(isUpgrade);  if (m_optionLogLevel.getSelectedItem() != null)   s_parameters.setLogLevel(descriptionToLogLevel(m_optionLogLevel.getSelectedItem().toString()));  s_parameters.setAttemptTranslation(m_optionAttemptTranslations.isSelected());  s_parameters.setPreserveTableID(m_optionPreserveTableIDs.isSelected());  s_parameters.setDropSource(m_optionDropSource.isSelected());  s_parameters.setOptimizeDatabase(m_optionOptimizeDatabase.isSelected());  String vendor=null;  String host=null;  String port=null;  String name=null;  String catalog=null;  String schema=null;  String user=null;  String passwd=null;  String systemUser=null;  String systemPasswd=null;  if (m_sourceVendor.getSelectedItem() != null && m_sourceVendor.getSelectedItem().toString().length() > 0)   vendor=m_sourceVendor.getSelectedItem().toString();  if (m_sourceHost.getText() != null && m_sourceHost.getText().length() > 0)   host=m_sourceHost.getText();  if (m_sourcePort.getText() != null && m_sourcePort.getText().length() > 0)   port=m_sourcePort.getText();  if (m_sourceName.getSelectedItem() != null && m_sourceName.getSelectedItem().toString().length() > 0)   name=m_sourceName.getSelectedItem().toString();  if (m_sourceCatalog.getSelectedItem() != null && m_sourceCatalog.getSelectedItem().toString().length() > 0)   catalog=m_sourceCatalog.getSelectedItem().toString();  if (m_sourceSchema.getSelectedItem() != null && m_sourceSchema.getSelectedItem().toString().length() > 0)   schema=m_sourceSchema.getSelectedItem().toString();  if (m_sourceUser.getText() != null && m_sourceUser.getText().length() > 0)   user=m_sourceUser.getText();  if (m_sourcePassword.getText() != null && m_sourcePassword.getText().length() > 0)   passwd=m_sourcePassword.getText();  if (m_sourceSystemUser.getText() != null && m_sourceSystemUser.getText().length() > 0)   systemUser=m_sourceSystemUser.getText();  if (m_sourceSystemPassword.getText() != null && m_sourceSystemPassword.getText().length() > 0)   systemPasswd=m_sourceSystemPassword.getText();  s_parameters.setSourceVendor(vendor);  s_parameters.setSourceHost(host);  s_parameters.setSourcePort(port);  s_parameters.setSourceName(name);  s_parameters.setSourceCatalog(catalog);  s_parameters.setSourceSchema(schema);  s_parameters.setSourceUser(user);  s_parameters.setSourcePasswd(passwd);  s_parameters.setSourceSystemUser(systemUser);  s_parameters.setSourceSystemPasswd(systemPasswd);  vendor=null;  host=null;  port=null;  name=null;  catalog=null;  schema=null;  user=null;  passwd=null;  systemUser=null;  systemPasswd=null;  if (m_targetVendor.getSelectedItem() != null && m_targetVendor.getSelectedItem().toString().length() > 0)   vendor=m_targetVendor.getSelectedItem().toString();  if (m_targetHost.getText() != null && m_targetHost.getText().length() > 0)   host=m_targetHost.getText();  if (m_targetPort.getText() != null && m_targetPort.getText().length() > 0)   port=m_targetPort.getText();  if (m_targetName.getSelectedItem() != null && m_targetName.getSelectedItem().toString().length() > 0)   name=m_targetName.getSelectedItem().toString();  if (m_targetCatalog.getSelectedItem() != null && m_targetCatalog.getSelectedItem().toString().length() > 0)   catalog=m_targetCatalog.getSelectedItem().toString();  if (m_targetSchema.getSelectedItem() != null && m_targetSchema.getSelectedItem().toString().length() > 0)   schema=m_targetSchema.getSelectedItem().toString();  if (m_targetUser.getText() != null && m_targetUser.getText().length() > 0)   user=m_targetUser.getText();  if (m_targetPassword.getText() != null && m_targetPassword.getText().length() > 0)   passwd=m_targetPassword.getText();  if (m_targetSystemUser.getText() != null && m_targetSystemUser.getText().length() > 0)   systemUser=m_targetSystemUser.getText();  if (m_targetSystemPassword.getText() != null && m_targetSystemPassword.getText().length() > 0)   systemPasswd=m_targetSystemPassword.getText();  s_parameters.setTargetVendor(vendor);  s_parameters.setTargetHost(host);  s_parameters.setTargetPort(port);  s_parameters.setTargetName(name);  s_parameters.setTargetCatalog(catalog);  s_parameters.setTargetSchema(schema);  s_parameters.setTargetUser(user);  s_parameters.setTargetPasswd(passwd);  s_parameters.setTargetSystemUser(systemUser);  s_parameters.setTargetSystemPasswd(systemPasswd);}  }
class C{  public final synchronized boolean computerBusy(){  return (computerPlayer != null) && computerPlayer.computerBusy();}  }
class C{  public void testLineComment() throws IOException {  final InputStream stream=this.getStream(R.raw.line_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  public void startSession(){  if (sLogger.isActivated()) {    sLogger.info("Start the session");  }  if (mProcessor != null) {    mProcessor.startProcessing();  }}  }
class C{  public boolean isChannelIdEnabled(){  return channelIdEnabled;}  }
class C{  public void removeControllerListener(ControllerListener listener){  listeners.removeListener(listener);}  }
class C{  public void decreaseFontSize(){  m_fontSizeAdjust--;}  }
class C{  public static Dialog createDialog(int id,Context context,String title,CallbackBundle callback,String suffix,Map<String,Integer> images){  AlertDialog.Builder builder=new AlertDialog.Builder(context);  builder.setView(new FileSelectView(context,id,callback,suffix,images));  Dialog dialog=builder.create();  dialog.setTitle(title);  return dialog;}  }
class C{  public static void compare(final Reader resultReader,final Reader expectedReader,final ResourcePostProcessor processor) throws IOException {  final Writer resultWriter=new StringWriter();  processor.process(resultReader,resultWriter);  final Writer expectedWriter=new StringWriter();  IOUtils.copy(expectedReader,expectedWriter);  compare(expectedWriter.toString(),resultWriter.toString());  expectedReader.close();  expectedWriter.close();}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(new Integer(value));  }}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public void logp(@GuardSatisfied Level level,String sourceClass,String sourceMethod,String msg){  throw new RuntimeException();}  }
class C{  public boolean isModel(){  return model;}  }
class C{  public StandardDialScale(){  this(0.0,100.0,175,-170,10.0,4);}  }
class C{  public void insert(Node node,double key){  node.key=key;  if (min != null) {    node.left=min;    node.right=min.right;    min.right=node;    node.right.left=node;    if (key < min.key) {      min=node;    }  } else {    min=node;  }  size++;}  }
class C{  private void doTest(boolean sameHash) throws Exception {  ResourceBundle b1=getResourceBundle(new Loader(sameHash),"Bug4179766Resource");  if (b1 == null) {    errln("Resource not found: Bug4179766Resource");  }  ResourceBundle b2=getResourceBundle(new Loader(sameHash),"Bug4179766Resource");  if (b2 == null) {    errln("Resource not found: Bug4179766Resource");  }  printIDInfo("[bundle1]",b1);  printIDInfo("[bundle2]",b2);  if (b1 == b2) {    errln("Same object returned by different ClassLoaders");  }}  }
class C{  public CashierTransaction(){  super();}  }
class C{  public void processFact(Fact fact){  Resource subject=fact.getSubject();  URI pred=fact.getPredicate();  Value object=fact.getObject();  boolean recursive=fact.getIteration() == currentIteration;  boolean incoming=object.equals(node);  boolean outgoing=subject.equals(node);  boolean skipReflexive=incoming && outgoing && recursive;  if (incoming && !skipReflexive) {    processIncoming(fact);  }  if (outgoing) {    if (pred.equals(RDF.TYPE)) {      types.processType(fact);    } else {      processOutgoing(fact);    }  }  Set<Fact> resultsSoFar=getFacts();  for (  Fact newFact : resultsSoFar) {    processFact(newFact);  }  newFacts.addAll(resultsSoFar);}  }
class C{  private Object[] readEnumArray0(@Nullable Class<?> cls) throws BinaryObjectException {switch (checkFlag(ENUM_ARR)) {case NORMAL:    Class<?> cls0=BinaryUtils.doReadClass(in,ctx,ldr);  if (cls == null)   cls=cls0;return BinaryUtils.doReadEnumArray(in,ctx,ldr,cls);case HANDLE:return readHandleField();default :return null;}}  }
class C{  private final long[] fetchOidValue() throws BerException {  long[] result=null;  final int backup=next;  try {    final int length=fetchLength();    if (length <= 0)     throw new BerException();    if (length > (bytes.length - next))     throw new IndexOutOfBoundsException("Decoded length exceeds buffer");    int subidCount=2;    for (int i=1; i < length; i++) {      if ((bytes[next + i] & 0x80) == 0) {        subidCount++;      }    }    final int datalen=subidCount;    final long[] data=new long[datalen];    final byte b0=bytes[next++];    if (b0 < 0)     throw new BerException();    final long lb0=b0 / 40;    if (lb0 > 2)     throw new BerException();    final long lb1=b0 % 40;    data[0]=lb0;    data[1]=lb1;    int i=2;    while (i < datalen) {      long subid=0;      byte b=bytes[next++];      while ((b & 0x80) != 0) {        subid=(subid << 7) | (b & 0x7f);        if (subid < 0)         throw new BerException();        b=bytes[next++];      }      subid=(subid << 7) | b;      if (subid < 0)       throw new BerException();      data[i++]=subid;    }    result=data;  } catch (  BerException e) {    next=backup;    throw e;  }catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  public boolean removeFieldValues(Object[] fieldValues){  return this.contents.remove(fieldValues);}  }
class C{  public int unFinishSize(){  return mUnFinishQueue.size();}  }
class C{  public VLADBuilder(IndexReader reader,int numDocsForVocabulary,int numClusters){  this.numDocsForVocabulary=numDocsForVocabulary;  this.numClusters=numClusters;  this.reader=reader;}  }
class C{  private void notifyHandleListener(FastScrollerHandleState state){  if (handleStateListener != null && (!eatVisibilityUpdates || state == FastScrollerHandleState.PRESSED || state == FastScrollerHandleState.RELEASED))   handleStateListener.onHandleStateChanged(state);}  }
class C{  public KeyConcurrentHashMapPro(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=Segment.newArray(ssize);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < this.segments.length; ++i)   this.segments[i]=new Segment<V>(cap,loadFactor);}  }
class C{  public static int toInt(NibbleArray nibbles){  return toInt(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3),nibbles.get(4),nibbles.get(5),nibbles.get(6),nibbles.get(7));}  }
class C{  public boolean isCellEditable(int row){  return !m_readOnly;}  }
class C{  public void hideGUI(){  if (frame != null) {    frame.setVisible(false);  }}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private ByteArrayOutputStream serializeProperties(JobDataMap data) throws IOException {  ByteArrayOutputStream ba=new ByteArrayOutputStream();  if (null != data) {    Properties properties=convertToProperty(data.getWrappedMap());    properties.store(ba,"");  }  return ba;}  }
class C{  public void writeSample(String outputFolder) throws IOException {  LOG.info("Writing the sample to " + outputFolder);  File hhf=new File(outputFolder + "households.xml.gz");  File hhaf=new File(outputFolder + "householdAttributes.xml.gz");  File pf=new File(outputFolder + "population.xml.gz");  File paf=new File(outputFolder + "populationAttributes.xml.gz");  if (hhf.exists() || hhaf.exists() || pf.exists()|| paf.exists()) {    throw new IOException("One or more of the output files already exists, and may not be overwritten.");  }  HouseholdsWriterV10 hw=new HouseholdsWriterV10(sc.getHouseholds());  hw.writeFile(hhf.getAbsolutePath());  ObjectAttributesXmlWriter hhaw=new ObjectAttributesXmlWriter(sc.getHouseholds().getHouseholdAttributes());  hhaw.putAttributeConverter(Coord.class,new CoordConverter());  hhaw.writeFile(hhaf.getAbsolutePath());  PopulationWriter pw=new PopulationWriter(sc.getPopulation());  pw.write(pf.getAbsolutePath());  ObjectAttributesXmlWriter paw=new ObjectAttributesXmlWriter(sc.getPopulation().getPersonAttributes());  paw.writeFile(paf.getAbsolutePath());}  }
class C{  private void printHeader(){  for (int i=0; i < size(); i++) {    if (!((String)m_Prefixes.get(i)).equals(""))     ((PrintStream)m_Streams.get(i)).print("[" + m_Prefixes.get(i) + "]\t");    if (((Boolean)m_Timestamps.get(i)).booleanValue())     ((PrintStream)m_Streams.get(i)).print("[" + new Date() + "]\t");  }}  }
class C{  public static void addUnknownSuppressWarningProposals(IInvocationContext context,IProblemLocation problem,Collection<ICommandAccess> proposals){  ASTNode coveringNode=context.getCoveringNode();  if (!(coveringNode instanceof StringLiteral))   return;  AST ast=coveringNode.getAST();  StringLiteral literal=(StringLiteral)coveringNode;  String literalValue=literal.getLiteralValue();  String[] allWarningTokens=CorrectionEngine.getAllWarningTokens();  for (int i=0; i < allWarningTokens.length; i++) {    String curr=allWarningTokens[i];    if (NameMatcher.isSimilarName(literalValue,curr)) {      StringLiteral newLiteral=ast.newStringLiteral();      newLiteral.setLiteralValue(curr);      ASTRewrite rewrite=ASTRewrite.create(ast);      rewrite.replace(literal,newLiteral,null);      String label=Messages.format(CorrectionMessages.SuppressWarningsSubProcessor_fix_suppress_token_label,new String[]{curr});      Image image=JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);      ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,context.getCompilationUnit(),rewrite,IProposalRelevance.FIX_SUPPRESS_TOKEN,image);      proposals.add(proposal);    }  }  addRemoveUnusedSuppressWarningProposals(context,problem,proposals);}  }
class C{  @SuppressWarnings("unchecked") private void addComponent(IDIYComponent<?> component,boolean canCreatePads){  int index=currentProject.getComponents().size();  while (index > 0 && ComponentProcessor.getInstance().extractComponentTypeFrom((Class<? extends IDIYComponent<?>>)component.getClass()).getZOrder() < ComponentProcessor.getInstance().extractComponentTypeFrom((Class<? extends IDIYComponent<?>>)currentProject.getComponents().get(index - 1).getClass()).getZOrder()) {    index--;  }  if (index < currentProject.getComponents().size()) {    currentProject.getComponents().add(index,component);  } else {    currentProject.getComponents().add(component);  }  ComponentType padType=getAutoCreateTypes().get(SOLDER_PAD);  if (canCreatePads && ConfigurationManager.getInstance().readBoolean(IPlugInPort.AUTO_PADS_KEY,false) && padType != null && !(component.getClass().equals(padType.getInstanceClass()))) {    for (int i=0; i < component.getControlPointCount(); i++) {      if (component.isControlPointSticky(i)) {        try {          IDIYComponent<?> pad=instantiationManager.instantiateComponent(padType,null,component.getControlPoint(i),currentProject).get(0);          pad.setControlPoint(component.getControlPoint(i),0);          addComponent(pad,false);        } catch (        Exception e) {          LOG.warn("Could not auto-create solder pad",e);        }      }    }  }}  }
class C{  protected static CompareOp convertToHBaseCompareOp(ComparisonOperator comp){  if (comp == ComparisonOperator.EQUAL || comp == ComparisonOperator.LIKE || comp == ComparisonOperator.CONTAINS || comp == ComparisonOperator.IN || comp == ComparisonOperator.IS) {    return CompareOp.EQUAL;  } else   if (comp == ComparisonOperator.LESS) {    return CompareOp.LESS;  } else   if (comp == ComparisonOperator.LESS_OR_EQUAL) {    return CompareOp.LESS_OR_EQUAL;  } else   if (comp == ComparisonOperator.GREATER) {    return CompareOp.GREATER;  } else   if (comp == ComparisonOperator.GREATER_OR_EQUAL) {    return CompareOp.GREATER_OR_EQUAL;  } else   if (comp == ComparisonOperator.NOT_EQUAL || comp == ComparisonOperator.NOT_LIKE || comp == ComparisonOperator.NOT_CONTAINS || comp == ComparisonOperator.IS_NOT || comp == ComparisonOperator.NOT_IN) {    return CompareOp.NOT_EQUAL;  } else {    LOG.error("{} operation is not supported now\n",comp);    throw new IllegalArgumentException("Illegal operation: " + comp + ", avaliable options: "+ Arrays.toString(ComparisonOperator.values()));  }}  }
class C{  public void addNearKey(KeyCacheObject key,GridCacheSharedContext ctx) throws IgniteCheckedException {  if (nearKeys == null)   nearKeys=new ArrayList<>();  nearKeys.add(key);}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public int fieldIndex(String field){  return delegate.fieldIndex(field);}  }
class C{  public static Object invokeMethod(Object instance,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getMethod(instance.getClass(),methodName,DataType.getPrimitive(arguments)).invoke(instance,arguments);}  }
class C{  public AttributeInfo(ConstPool cp,String attrname,byte[] attrinfo){  this(cp,cp.addUtf8Info(attrname),attrinfo);}  }
class C{  public void cancel(InternalDistributedMember sender,RuntimeException ex){  processException(new ReplyException("Unexpected exception while processing reply message",ex));  removeMember(sender,false);  checkIfDone();}  }
class C{  public void readExamples(DataRowReader i){  readExamples(i,false);}  }
class C{  protected boolean isAntialiasedClip(AffineTransform usr2dev,RenderingHints hints,Shape clip){  if (clip == null)   return false;  Object val=hints.get(RenderingHintsKeyExt.KEY_TRANSCODING);  if ((val == RenderingHintsKeyExt.VALUE_TRANSCODING_PRINTING) || (val == RenderingHintsKeyExt.VALUE_TRANSCODING_VECTOR))   return false;  if (!(clip instanceof Rectangle2D && usr2dev.getShearX() == 0 && usr2dev.getShearY() == 0))   return true;  return false;}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  private int handleSC(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 2) == 'H') {    if (contains(value,index + 3,2,"OO","ER","EN","UY","ED","EM")) {      if (contains(value,index + 3,2,"ER","EN")) {        result.append("X","SK");      } else {        result.append("SK");      }    } else {      if (index == 0 && !isVowel(charAt(value,3)) && charAt(value,3) != 'W') {        result.append('X','S');      } else {        result.append('X');      }    }  } else   if (contains(value,index + 2,1,"I","E","Y")) {    result.append('S');  } else {    result.append("SK");  }  return index + 3;}  }
class C{  public void test_initWithKeyAlgorithmParameterSpecSecureRandom() throws Exception {  AlgorithmParameterSpec ap=new IvParameterSpec(IV);  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap,new SecureRandom());  byte[] cipherIV=cipher.getIV();  assertTrue("IVs differ",Arrays.equals(cipherIV,IV));  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap,new SecureRandom());    fail();  } catch (  InvalidKeyException expected) {  }  cipher=Cipher.getInstance("DES/CBC/NoPadding");  ap=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_DES,ap,new SecureRandom());    fail();  } catch (  InvalidAlgorithmParameterException expected) {  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private Configure(){  Properties p=new Properties();  Map args=new HashMap();  args.putAll(System.getenv());  args.putAll(System.getProperties());  p.putAll(args);  this.property=p;  reload();}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public NodesStatsRequest http(boolean http){  this.http=http;  return this;}  }
class C{  public void ping() throws IOException {synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");  }  cm.requestChannelTrileadPing(cn);}  }
class C{  public AccessibilityNodeInfoCompat findFirst(){  if (mTree == null) {    return null;  }  return AccessibilityNodeInfoCompat.obtain(mTree.getRoot().getNode());}  }
class C{  protected Node inlineThumbnail(Document doc,ParsedURL urldata,Node eold){  RenderableImage img=ThumbnailRegistryEntry.handleURL(urldata);  if (img == null) {    LoggingUtil.warning("Image not found in registry: " + urldata.toString());    return null;  }  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    os.write(SVGSyntax.DATA_PROTOCOL_PNG_PREFIX.getBytes());    Base64EncoderStream encoder=new Base64EncoderStream(os);    ImageIO.write(img.createDefaultRendering(),"png",encoder);    encoder.close();  } catch (  IOException e) {    LoggingUtil.exception("Exception serializing image to png",e);    return null;  }  Element i=(Element)super.cloneNode(doc,eold);  i.setAttributeNS(SVGConstants.XLINK_NAMESPACE_URI,SVGConstants.XLINK_HREF_ATTRIBUTE,os.toString().replaceAll("\\s*[\\r\\n]+\\s*",""));  return i;}  }
class C{  public Vector<RtcpSdesPacket> makereports(){  Vector<RtcpSdesPacket> packets=new Vector<RtcpSdesPacket>();  RtcpSdesPacket rtcpsdespacket=new RtcpSdesPacket(new RtcpSdesBlock[1]);  rtcpsdespacket.sdes[0]=new RtcpSdesBlock();  rtcpsdespacket.sdes[0].ssrc=mRtcpSession.SSRC;  Vector<RtcpSdesItem> vector=new Vector<RtcpSdesItem>();  vector.addElement(new RtcpSdesItem(1,RtpSource.getCname()));  rtcpsdespacket.sdes[0].items=new RtcpSdesItem[vector.size()];  vector.copyInto(rtcpsdespacket.sdes[0].items);  packets.addElement(rtcpsdespacket);  return packets;}  }
class C{  public GroupChatDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver){  super(contentResolver,GroupChatData.CONTENT_URI,GroupChatData.KEY_CHAT_ID,null);  mChatService=chatService;  mImService=imService;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected LayoutManager createLayout(){  return getHandler();}  }
class C{  public void append(final String s){  if (s == null) {    return;  }  append(s.toCharArray());}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static byte[] flipAllBitsInPlace(byte[] bytes,int index,int length){  int endIndex=Math.min(bytes.length,index + length);  for (int i=index; i < endIndex; i++) {    bytes[i]=(byte)(bytes[i] ^ 0xff);  }  return bytes;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static <T>Map<T,Double> normalise(Map<T,Double> distrib){  double total=distrib.values().stream().mapToDouble(null).sum();  if (total == 0.0f) {    log.warning("all assignments in the distribution have a zero " + "probability, cannot be normalised");    return distrib;  }  Map<T,Double> normalisedDistrib=distrib.entrySet().stream().collect(Collectors.toMap(null,null));  return normalisedDistrib;}  }
class C{  static LuaValue dump(LuaValue arg){  LuaValue f=arg.checkfunction();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    DumpState.dump(((LuaClosure)f).p,baos,true);    return LuaString.valueOf(baos.toByteArray());  } catch (  IOException e) {    return error(e.getMessage());  }}  }
class C{  public MultiStatus(String pluginId,int code,IStatus[] newChildren,String message,Throwable exception){  this(pluginId,code,message,exception);  Assert.isLegal(newChildren != null);  int maxSeverity=getSeverity();  for (int i=0; i < newChildren.length; i++) {    Assert.isLegal(newChildren[i] != null);    int severity=newChildren[i].getSeverity();    if (severity > maxSeverity)     maxSeverity=severity;  }  this.children=new IStatus[newChildren.length];  setSeverity(maxSeverity);  System.arraycopy(newChildren,0,this.children,0,newChildren.length);}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  protected CCBezierTo(float t,CCBezierConfig c){  super(t,c);  originalconfig=new CCBezierConfig();  originalconfig.controlPoint_1=CGPoint.ccp(c.controlPoint_1.x,c.controlPoint_1.y);  originalconfig.controlPoint_2=CGPoint.ccp(c.controlPoint_2.x,c.controlPoint_2.y);  originalconfig.endPosition=CGPoint.ccp(c.endPosition.x,c.endPosition.y);}  }
class C{  public static boolean isEmptyOrComment(String line){  return line.length() == 0 || (line.charAt(0) == '/' && line.length() >= 2 && line.charAt(1) == '/');}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SUB");  translateAll(environment,instruction,"SUB",instructions);}  }
class C{  public void openPanel(){  dragHelper.smoothSlideViewTo(toolbar,0,dragRange);  invalidate();}  }
class C{  public final static String formatHeader(final Header header,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatHeader(null,header).toString();}  }
class C{  public boolean isMonday(){  return monday;}  }
class C{  public byte major(){  return major;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.071 -0500",hash_original_method="F28ABF8CFF04CC1C57BCD4E014C95C2B",hash_generated_method="C52781DE68D0E8381AD445FB0A42C99D") public AuthenticationInfoParser(String authenticationInfo){  super(authenticationInfo);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  WhiteboxRaster image;  int cols, rows;  double z;  float progress=0;  int col, row;  int a, i;  double classSize=-9999;  double startingClass=-9999;  double endingClass=-9999;  int numClasses=-9999;  double[] histo;  boolean blnCumulative=false;  int classVal=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      classSize=Double.parseDouble(args[i]);    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        startingClass=Double.parseDouble(args[i]);      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        endingClass=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("true")) {        blnCumulative=true;      }    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (classSize <= 0) {    showFeedback("Class size must be larger than zero.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (startingClass == -9999) {      startingClass=image.getMinimumValue();    }    if (endingClass == -9999) {      endingClass=image.getMaximumValue();    }    double endingClassEndingVal=endingClass + classSize;    numClasses=(int)((endingClassEndingVal - startingClass) / classSize);    histo=new double[numClasses];    updateProgress("Calculating histogram:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          classVal=(int)(Math.floor((data[col] - startingClass) / classSize));          if (classVal < numClasses && classVal > 0) {            histo[classVal]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    image.close();    if (blnCumulative) {      for (a=1; a < numClasses; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (a=0; a < numClasses; a++) {        histo[a]=histo[a] / histo[numClasses - 1];      }    }    String retstr=null;    retstr="HISTOGRAM\n";    retstr=retstr + "Input image:\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Cumulative:\t" + Boolean.toString(blnCumulative)+ "\n\n";    retstr=retstr + "Bin\t" + "Freq.\t"+ "\n";    if (!blnCumulative) {      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ (int)(histo[a])+ "\n";      }    } else {      DecimalFormat df=new DecimalFormat("0.0000");      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ df.format(histo[a])+ "\n";      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected BshClassLoader(BshClassManager classManager){  this(classManager,new URL[]{});}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FOR_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isSuccessful(){  return exceptions.isEmpty();}  }
class C{  private static void convertToPFX(String name) throws IOException {  File base64File=new File(SOURCE_DIRECTORY,name);  File pkcs12File=new File(WORKING_DIRECTORY,name);  byte[] input=Files.readAllBytes(base64File.toPath());  Files.write(pkcs12File.toPath(),Base64.getMimeDecoder().decode(input),StandardOpenOption.CREATE);}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public void emit(){  setupEOFCode();  if (scanner.functionName == null)   scanner.functionName="yylex";  reduceColumns();  findActionStates();  emitHeader();  emitUserCode();  emitClassName();  skel.emitNext();  println("  private static final int ZZ_BUFFERSIZE = " + scanner.bufferSize + ";");  if (scanner.debugOption) {    println("  private static final String ZZ_NL = System.getProperty(\"line.separator\");");  }  skel.emitNext();  emitLexicalStates();  emitCharMapArray();  emitActionTable();  if (scanner.useRowMap) {    reduceRows();    emitRowMapArray();    if (scanner.packed)     emitDynamicInit(); else     emitZZTrans();  }  skel.emitNext();  if (scanner.useRowMap)   emitAttributes();  skel.emitNext();  emitLookBuffer();  emitClassCode();  skel.emitNext();  emitConstructorDecl();  emitCharMapInitFunction();  skel.emitNext();  emitScanError();  skel.emitNext();  emitDoEOF();  skel.emitNext();  emitLexFunctHeader();  emitNextInput();  if (scanner.useRowMap)   emitGetRowMapNext(); else   emitTransitionTable();  skel.emitNext();  emitActions();  skel.emitNext();  emitEOFVal();  skel.emitNext();  emitNoMatch();  skel.emitNext();  emitMain();  skel.emitNext();  out.close();}  }
class C{  public static void bindObjectToProgram(SQLiteProgram prog,int index,Object value){  if (value == null) {    prog.bindNull(index);  } else   if (value instanceof Double || value instanceof Float) {    prog.bindDouble(index,((Number)value).doubleValue());  } else   if (value instanceof Number) {    prog.bindLong(index,((Number)value).longValue());  } else   if (value instanceof Boolean) {    Boolean bool=(Boolean)value;    if (bool) {      prog.bindLong(index,1);    } else {      prog.bindLong(index,0);    }  } else   if (value instanceof byte[]) {    prog.bindBlob(index,(byte[])value);  } else {    prog.bindString(index,value.toString());  }}  }
class C{  public boolean addNode(EveningActivityMovement eveningActivityNode){  if (isFull()) {    return false;  } else {    eveningActivityNodes[eveningActivityNodesInBuffer]=eveningActivityNode;    eveningActivityNodesInBuffer++;    return true;  }}  }
class C{  public String resolveValidNetworkId(PropertyHandler paramHandler) throws Exception {  String id=paramHandler.getNetworkId();  if (id != null && id.trim().length() == 0) {    id=null;  }  try {    LPlatformClient lPlatformClient=getLPlatformClient(paramHandler);    VSystemConfiguration config=paramHandler.getIaasContext().getVSystemConfiguration();    if (config == null) {      config=lPlatformClient.getConfiguration();      paramHandler.getIaasContext().add(config);    }    List<Network> networks=config.getNetworks();    if (id == null) {      if (networks != null && networks.size() == 1) {        return networks.iterator().next().getId();      }      throw new SuspendException(Messages.getAll("error_invalid_networkid",new Object[]{id}));    }    String nameToId=null;    boolean nameDeterministic=true;    if (networks != null) {      for (      Network net : networks) {        if (id.equals(net.getId())) {          return id;        }        if (id.equals(net.getName())) {          if (nameToId == null) {            nameToId=net.getId();          } else {            nameDeterministic=false;          }        }      }    }    if (nameToId != null) {      if (nameDeterministic) {        return nameToId;      } else {        throw new SuspendException(Messages.getAll("error_invalid_networkid",new Object[]{id}));      }    }  } catch (  Exception e) {    logger.error("Error while validating configured networkId",e);    SuspendException exception=getSuspendException(e,"error_invalid_networkid");    throw exception;  }  return null;}  }
class C{  public void exception(Throwable e){  StringWriter writer=new StringWriter();  e.printStackTrace(new PrintWriter(writer));  error(writer.toString());}  }
class C{  public ClusterCloneException(String message){  super(message);}  }
class C{  public CalendarConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public static void serialization(String filePath,Object obj){  ObjectOutputStream out=null;  try {    out=new ObjectOutputStream(new FileOutputStream(filePath));    out.writeObject(obj);    out.close();  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public static int hashCode(long x){  long hash=0x76543210L ^ x;  return (int)((hash >> 32) ^ hash);}  }
class C{  public void resetBuffer(){  try {    jspWriter.clearBuffer();  } catch (  IOException ioe) {  }}  }
class C{  public static String sha256(String s){  return encrypt(s,"SHA-256");}  }
class C{  public static void createDbIfNecessary(HiveMetastoreClient srcMs,HiveMetastoreClient destMs,String dbName) throws HiveMetastoreException {  if (destMs.existsDb(dbName)) {    LOG.debug("DB " + dbName + " already exists on destination.");    return;  } else {    Database srcDb=srcMs.getDatabase(dbName);    if (srcDb == null) {      LOG.warn(String.format("DB %s doesn't exist on the source!",dbName));      return;    }    Database dbToCreate=new Database(srcDb.getName(),srcDb.getDescription(),null,null);    LOG.debug("Creating DB: " + dbToCreate);    destMs.createDatabase(dbToCreate);  }}  }
class C{  @POST @Path("internal/node-backups/download") @Produces({MediaType.APPLICATION_OCTET_STREAM}) public Response downloadFileFromNode(String fileName){  log.info("getBackup({})",fileName);  try {    File file=new File(this.backupOps.getBackupDir(),fileName);    if (!file.exists()) {      return Response.status(Response.Status.NOT_FOUND).build();    }    InputStream input=new BufferedInputStream(new FileInputStream(file));    return Response.ok(input).type(MediaType.APPLICATION_OCTET_STREAM).build();  } catch (  Exception e) {    throw APIException.internalServerErrors.getObjectFromError("backup file input stream","local",e);  }}  }
class C{  @NotNull public static String protoToString(@NotNull final Object message){  return "{ " + PROTO_TO_STRING.matcher(message.toString()).replaceAll(" ").trim() + " }";}  }
class C{  public static void reportTimings(CommandSender sender){  JsonObject out=new JsonObject();  out.addProperty("version",Server.getInstance().getVersion());  out.addProperty("maxplayers",Server.getInstance().getMaxPlayers());  out.addProperty("start",TimingsManager.timingStart / 1000);  out.addProperty("end",System.currentTimeMillis() / 1000);  out.addProperty("sampletime",(System.currentTimeMillis() - TimingsManager.timingStart) / 1000);  if (!Timings.isPrivacy()) {    out.addProperty("server",Server.getInstance().getName());    out.addProperty("motd",Server.getInstance().getMotd());    out.addProperty("online-mode",false);    out.addProperty("icon","");  }  final Runtime runtime=Runtime.getRuntime();  RuntimeMXBean runtimeBean=ManagementFactory.getRuntimeMXBean();  JsonObject system=new JsonObject();  system.addProperty("timingcost",getCost());  system.addProperty("name",System.getProperty("os.name"));  system.addProperty("version",System.getProperty("os.version"));  system.addProperty("jvmversion",System.getProperty("java.version"));  system.addProperty("arch",System.getProperty("os.arch"));  system.addProperty("maxmem",runtime.maxMemory());  system.addProperty("cpu",runtime.availableProcessors());  system.addProperty("runtime",ManagementFactory.getRuntimeMXBean().getUptime());  system.addProperty("flags",String.join(" ",runtimeBean.getInputArguments()));  system.add("gc",JsonUtil.mapToObject(ManagementFactory.getGarbageCollectorMXBeans(),null));  out.add("system",system);  TimingsHistory[] history=HISTORY.toArray(new TimingsHistory[HISTORY.size() + 1]);  history[HISTORY.size()]=new TimingsHistory();  JsonObject timings=new JsonObject();  for (  TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {    for (    Timing id : group.timings.stream().toArray(null)) {      if (!id.timed && !id.isSpecial()) {        continue;      }      timings.add(String.valueOf(id.id),JsonUtil.toArray(group.id,id.name));    }  }  JsonObject idmap=new JsonObject();  idmap.add("groups",JsonUtil.mapToObject(TimingIdentifier.GROUP_MAP.values(),null));  idmap.add("handlers",timings);  idmap.add("worlds",JsonUtil.mapToObject(TimingsHistory.levelMap.entrySet(),null));  idmap.add("tileentity",JsonUtil.mapToObject(TimingsHistory.blockEntityMap.entrySet(),null));  idmap.add("entity",JsonUtil.mapToObject(TimingsHistory.entityMap.entrySet(),null));  out.add("idmap",idmap);  out.add("plugins",JsonUtil.mapToObject(Server.getInstance().getPluginManager().getPlugins().values(),null));  JsonObject config=new JsonObject();  if (!Timings.getIgnoredConfigSections().contains("all")) {    JsonObject nukkit=JsonUtil.toObject(Server.getInstance().getConfig().getRootSection());    Timings.getIgnoredConfigSections().forEach(null);    config.add("nukkit",nukkit);  } else {    config.add("nukkit",null);  }  out.add("config",config);  new TimingsExport(sender,out,history).start();}  }
class C{  @Override public String toString(){  return "<" + name + "="+ (hasValue() ? val : "")+ "|"+ (hasRealm() ? realm : "")+ ">";}  }
class C{  private void planAccordingToErrors(Node that){  List<Message> errors=that.getErrors();  for (  Message message : errors) {    if (isError(that,message)) {      TransformationPlan plan;      if (message.getCode() == FORMAL_MEMBER_UNIMPLEMENTED_IN_CLASS_HIERARCHY && (model instanceof Class || (model instanceof Value && ((Value)model).getTypeDeclaration().isAnonymous()))) {        plan=new ThrowerMethod(that,message);      } else       if ((message.getCode() == PL_AND_CONSTRUCTORS || message.getCode() == NO_CONSTRUCTORS) && (model instanceof Class || (model instanceof Value && ((Value)model).getTypeDeclaration().isAnonymous()))) {        if (message.getCode() == NO_CONSTRUCTORS) {          plan=new PrivateConstructorOnly(that,message);        } else {          plan=new ThrowerCatchallConstructor(that,message);        }      } else       if (message.getCode() == FORWARD_DECL_NOT_IN_DECL_SECTION) {        plan=Errors.GENERATE;      } else {        plan=new Drop(that,message);      }      newplan(plan);    }  }}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 6;}  }
class C{  public static double var(double[] a){  if (a.length == 0)   return Double.NaN;  double avg=mean(a);  double sum=0.0;  for (int i=0; i < a.length; i++) {    sum+=(a[i] - avg) * (a[i] - avg);  }  return sum / (a.length - 1);}  }
class C{  public AveragedRegressor(Regressor... voters){  if (voters == null || voters.length == 0)   throw new RuntimeException("No voters given for construction");  this.voters=voters;}  }
class C{  private Element createElement(String name){  return createElement(name,targetVersion.getXmlNamespace());}  }
class C{  public EventStoreBuilder singleNodeAddress(InetSocketAddress address){  singleNodeAddress=address;  return this;}  }
class C{  public static void compare(final String expected,final String actual){  try {    final String in=replaceTabsWithSpaces(expected.trim());    final String out=replaceTabsWithSpaces(actual.trim());    Assert.assertEquals(in,out);    LOG.debug("Compare.... [OK]");  } catch (  final ComparisonFailure e) {    LOG.error("Compare.... [FAIL]",e.getMessage());    throw e;  }}  }
class C{  public static Properties readProperties(File propsFile) throws IOException {  return readProperties(propsFile,null);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SIMPLE_ATTRIBUTE___NAME_1:    setName_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Id<Link> convertStreetId2LinkId(Id<DgStreet> streetId){  Integer ksIntStreetId=Integer.parseInt(streetId.toString());  String matsimStringStreetId=this.idPool.getStringId(ksIntStreetId);  if (matsimStringStreetId.endsWith("88")) {    Id<Link> id=Id.create(matsimStringStreetId.substring(0,matsimStringStreetId.length() - 2),Link.class);    return id;  }  throw new IllegalStateException("Can not convert " + matsimStringStreetId + " to link id");}  }
class C{  public boolean hasAlphaChannel(){  return colorType == COLOR_TRUEALPHA || colorType == COLOR_GREYALPHA;}  }
class C{  public boolean hasRepositoryUrl(){  return hasExtension(RepositoryUrl.class);}  }
class C{  public static synchronized Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public static Geometry snapToSelf(Geometry geom,double snapTolerance,boolean cleanResult){  GeometrySnapper snapper0=new GeometrySnapper(geom);  return snapper0.snapToSelf(snapTolerance,cleanResult);}  }
class C{  @Override public PackingPlan pack(){  Map<Integer,List<InstanceId>> ffdAllocation=getFFDAllocation();  Map<String,Long> ramMap=TopologyUtils.getComponentRamMapConfig(topology);  Set<PackingPlan.ContainerPlan> containerPlans=PackingUtils.buildContainerPlans(ffdAllocation,ramMap,this.defaultInstanceResources,this.paddingPercentage);  return new PackingPlan(topology.getId(),containerPlans);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public void addStateValueAsString(StateObject context,String name,String value){  addStateValueAsString(context,name,value,false);}  }
class C{  public XmlDocument(){  m_domDoc=null;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (outputFormatPeek() != null) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public VNXeCommandJob restoreLunGroupSnap(String snapId){  _logger.info("restoring lun group snap:" + snapId);  LunGroupSnapRequests req=new LunGroupSnapRequests(_khClient);  return req.restoreLunGroupSnap(snapId,null);}  }
class C{  protected static String buildMessage(String msg){  StackTraceElement caller=new Throwable().fillInStackTrace().getStackTrace()[2];  return new StringBuilder().append(caller.getFileName()).append(".").append(caller.getMethodName()).append("(): ").append(msg).toString();}  }
class C{  private static SolrInputDocument buildRandomDocument(int id){  SolrInputDocument doc=sdoc("id",id);  for (  String prefix : new String[]{"pivot_i","pivot_ti"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.nextInt(random(),20,50),random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.nextInt(random(),20,50),random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_l","pivot_tl"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.nextInt(random(),5000,5100),random().nextLong()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.nextInt(random(),5000,5100),random().nextLong()));      }    }  }  for (  String prefix : new String[]{"pivot_f","pivot_tf"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(1.0F / random().nextInt(13),random().nextFloat() * random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(1.0F / random().nextInt(13),random().nextFloat() * random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_d","pivot_td"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(1.0D / random().nextInt(19),random().nextDouble() * random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(1.0D / random().nextInt(19),random().nextDouble() * random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_dt","pivot_tdt"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(randomSkewedDate(),randomDate()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(randomSkewedDate(),randomDate()));      }    }  }{    String prefix="pivot_b";    if (useField()) {      doc.addField(prefix + "1",random().nextBoolean() ? "t" : "f");    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,random().nextBoolean() ? "t" : "f");      }    }  }  for (  String prefix : new String[]{"pivot_x_s","pivot_y_s","pivot_z_s"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.randomSimpleString(random(),1,1),randomXmlUsableUnicodeString()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.randomSimpleString(random(),1,1),randomXmlUsableUnicodeString()));      }    }  }  for (  String prefix : new String[]{"dense_pivot_x_s","dense_pivot_y_s"}) {    if (useField()) {      doc.addField(prefix + "1",TestUtil.randomSimpleString(random(),1,1));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,TestUtil.randomSimpleString(random(),1,1));      }    }  }  for (  String prefix : new String[]{"dense_pivot_i","dense_pivot_ti"}) {    if (useField()) {      doc.addField(prefix + "1",TestUtil.nextInt(random(),20,50));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,TestUtil.nextInt(random(),20,50));      }    }  }  return doc;}  }
class C{  protected void processpacket_up(SimEvent ev){  NetworkPacket hspkt=(NetworkPacket)ev.getData();  int recvVMid=hspkt.pkt.reciever;  CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.Network_Event_send));  schedule(getId(),switching_delay,CloudSimTags.Network_Event_send);  if (level == NetworkConstants.EDGE_LEVEL) {    int hostid=dc.VmtoHostlist.get(recvVMid);    NetworkHost hs=hostlist.get(hostid);    hspkt.recieverhostid=hostid;    if (hs != null) {      List<NetworkPacket> pktlist=packetTohost.get(hostid);      if (pktlist == null) {        pktlist=new ArrayList<NetworkPacket>();        packetTohost.put(hostid,pktlist);      }      pktlist.add(hspkt);      return;    }    Switch sw=uplinkswitches.get(0);    List<NetworkPacket> pktlist=uplinkswitchpktlist.get(sw.getId());    if (pktlist == null) {      pktlist=new ArrayList<NetworkPacket>();      uplinkswitchpktlist.put(sw.getId(),pktlist);    }    pktlist.add(hspkt);    return;  }  if (level == NetworkConstants.Agg_LEVEL) {    int switchid=dc.VmToSwitchid.get(recvVMid);    boolean flagtoswtich=false;    for (    Switch sw : downlinkswitches) {      if (switchid == sw.getId()) {        flagtoswtich=true;      }    }    if (flagtoswtich) {      List<NetworkPacket> pktlist=downlinkswitchpktlist.get(switchid);      if (pktlist == null) {        pktlist=new ArrayList<NetworkPacket>();        downlinkswitchpktlist.put(switchid,pktlist);      }      pktlist.add(hspkt);    } else {      Switch sw=uplinkswitches.get(0);      List<NetworkPacket> pktlist=uplinkswitchpktlist.get(sw.getId());      if (pktlist == null) {        pktlist=new ArrayList<NetworkPacket>();        uplinkswitchpktlist.put(sw.getId(),pktlist);      }      pktlist.add(hspkt);    }  }  if (level == NetworkConstants.ROOT_LEVEL) {    int edgeswitchid=dc.VmToSwitchid.get(recvVMid);    int aggSwtichid=-1;    ;    for (    Switch sw : downlinkswitches) {      for (      Switch edge : sw.downlinkswitches) {        if (edge.getId() == edgeswitchid) {          aggSwtichid=sw.getId();          break;        }      }    }    if (aggSwtichid < 0) {      System.out.println(" No destination for this packet");    } else {      List<NetworkPacket> pktlist=downlinkswitchpktlist.get(aggSwtichid);      if (pktlist == null) {        pktlist=new ArrayList<NetworkPacket>();        downlinkswitchpktlist.put(aggSwtichid,pktlist);      }      pktlist.add(hspkt);    }  }}  }
class C{  public static void resetStats(){synchronized (globalLock) {    for (    MethodGroup m : globalMethods) {      if (m == null) {        break;      }      m.selfTime=0;      m.netTime=0;      m.childRecursiveTime=0;      m.hits=0;      for (int i=0; i < m.childCount; i++) {        m.children[i]=null;        m.childrenTimes[i]=0;      }      m.childCount=0;    }    for (    ThreadProfiler ti : globalThreadInfos.values()) {      for (int i=0; i < ti.depth; i++) {        ti.startTimes[i]=System.nanoTime();      }    }  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected boolean isCreadorLibro(String idUsuario,String idLibro) throws HibernateException {  boolean result=false;  StringBuffer query=new StringBuffer();  query.append("FROM ");  query.append(HibernateKeys.HIBERNATE_Idocarchhdr);  query.append(" idoc WHERE idoc.archid=? and idoc.crtrid=?");  List creador=getSession().find(query.toString(),new Object[]{idLibro,idUsuario},new Type[]{Hibernate.INTEGER,Hibernate.INTEGER});  if (creador != null && !creador.isEmpty()) {    result=true;  }  return result;}  }
class C{  public IIRSinglePoleDCRemovalFilter_RB(float alpha){  mAlpha=alpha;}  }
class C{  private static boolean callTargetIsResolved(JavaMethod target){  if (target instanceof ResolvedJavaMethod) {    ResolvedJavaMethod resolvedTarget=(ResolvedJavaMethod)target;    ResolvedJavaType resolvedType=resolvedTarget.getDeclaringClass();    return resolvedType.isInterface() || resolvedType.isLinked();  }  return false;}  }
class C{  @Override public void run(){  while (m_run) {    try {      notifyEventListeners(eventQueue.take());    } catch (    final InterruptedException ie) {      java.lang.Thread.currentThread().interrupt();    }catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public Builder updateIm(Im oldIm,Im newIm){  deleteIm(oldIm);  addIm(newIm);  return this;}  }
class C{  public LauncherScroller(Context context){  this(context,null);}  }
class C{  public void testSinglePolygonNoHoleRoundTrip() throws IOException, SAXException, ParserConfigurationException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  Polygon pt=(Polygon)pg.create();  checkRoundTrip(pt);}  }
class C{  public void testLongTimeout(){  try {    fetch("mail.google.com",443,true,"/mail/",1,2,90,180);    fail("Oops - timeout expected.");  } catch (  IOException ex) {  }}  }
class C{  public void start(String threadName){  final String methodName="start";  log.fine(CLASS_NAME,methodName,"855");synchronized (lifecycle) {    if (!running) {      running=true;      receiverThread=new Thread(this,threadName);      receiverThread.start();    }  }}  }
class C{  public static long nowInMillis(){  return System.currentTimeMillis();}  }
class C{  public PcodeInterpreter(Env env,CompiledMethod method){  this.env=env;  code=method.getCodeArray();  pushFrame(method);}  }
class C{  public static void fillStickyDrawerItemFooter(DrawerBuilder drawer,ViewGroup container,View.OnClickListener onClickListener){  for (  IDrawerItem drawerItem : drawer.mStickyDrawerItems) {    int selected_color=UIUtils.getThemeColorFromAttrOrRes(container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    if (drawerItem instanceof PrimaryDrawerItem) {      selected_color=ColorHolder.color(((PrimaryDrawerItem)drawerItem).getSelectedColor(),container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    } else     if (drawerItem instanceof SecondaryDrawerItem) {      selected_color=ColorHolder.color(((SecondaryDrawerItem)drawerItem).getSelectedColor(),container.getContext(),R.attr.material_drawer_selected,R.color.material_drawer_selected);    }    View view=drawerItem.generateView(container.getContext(),container);    view.setTag(drawerItem);    if (drawerItem.isEnabled()) {      UIUtils.setBackground(view,DrawerUIUtils.getSelectableBackground(container.getContext(),selected_color));      view.setOnClickListener(onClickListener);    }    container.addView(view);    DrawerUIUtils.setDrawerVerticalPadding(view);  }  container.setPadding(0,0,0,0);}  }
class C{  public Remote activate(boolean force) throws ActivationException, UnknownObjectException, RemoteException {  try {    MarshalledObject<? extends Remote> mobj=activator.activate(this,force);    return mobj.get();  } catch (  RemoteException e) {    throw e;  }catch (  IOException e) {    throw new UnmarshalException("activation failed",e);  }catch (  ClassNotFoundException e) {    throw new UnmarshalException("activation failed",e);  }}  }
class C{  protected UnitNameImpl(){  super();}  }
class C{  public char current(){  return pos == max ? DONE : chars[pos];}  }
class C{  public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setHeader((ContentType)contentType);  sipRequest.setMessageContent(content);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  private ReilHelpers(){}  }
class C{  public void addExceptionNoBidirectionalUpdate(ClassType type){  if (null == exceptions) {    exceptions=new TypeSet<ClassType>();  }  exceptions.addOrUpdate(type);}  }
class C{  public void flag(WebMediumConfig config){  config.addCredentials(this);  POST(this.url + "/flag-" + config.getType(),config.toXML());}  }
class C{  public boolean isShowCustomTextGridX(){  return mShowCustomTextGridX;}  }
class C{  public static <T>T withWriterAppend(File file,String charset,@ClosureParams(value=SimpleType.class,options="java.io.BufferedWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(file,charset,true),closure);}  }
class C{  public void testSimpleEar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simpleweb");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static void METHOD_BEGIN(int access,String className,String methName,String methDesc){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.METHOD_BEGIN(access,className,methName,methDesc);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public int refresh(boolean loadParent){  if (m_refreshing)   return 0;  if (!loadParent && m_info.IsParent)   return 0;  if (m_info.DisplayType == DisplayType.Search || m_info.IsCreadedUpdatedBy) {    removeAllElements();    return 0;  }  m_refreshing=true;  m_lookup.clear();  fillComboBox(isMandatory(),true,true,false);  m_refreshing=false;  return m_lookup.size();}  }
class C{  public String toLocalizedPattern(){  return toPattern(true);}  }
class C{  public RandomSkillDialog(ClientDialog ui,ClientGUI clientgui){  super(ui,Messages.getString("RandomSkillDialog.title"),ModalityType.APPLICATION_MODAL);  this.clientgui=clientgui;  init();}  }
class C{  public void testFormatNaN(){  mFReal=new FormatReal(2,2);  mStr=mFReal.format(mStrBuff,Float.NaN).toString();  assertEquals("Should be NaN",mStr,"  NaN");  mStrBuff=new StringBuilder();  mStr=mFReal.format(mStrBuff,Float.NaN).toString();  assertEquals("Should be NaN",mStr,"  NaN");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_VARIABLE__DECLARED_COVARIANT:    return isDeclaredCovariant();case TypesPackage.TYPE_VARIABLE__DECLARED_CONTRAVARIANT:  return isDeclaredContravariant();case TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND:return getDeclaredUpperBound();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public int read() throws IOException {  byte[] buf=new byte[1];  int res=this.read(buf,0,1);  if (res != -1) {    return buf[0];  }  return res;}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  private static int findPool(String mech){  if ("none".equalsIgnoreCase(mech)) {    return NONE;  } else   if ("simple".equalsIgnoreCase(mech)) {    return SIMPLE;  } else   if ("digest-md5".equalsIgnoreCase(mech)) {    return DIGEST;  }  return -1;}  }
class C{  @Override public void delete(DBIDRef id){  assert (!ids.contains(id)) : "Object still in DBIDs.";  if (!(content instanceof WritableDataStore)) {    throw new AbortException("Data is stored in a non-writable data store. Modifications are not possible.");  }  for (Iter<Result> it=this.getHierarchy().iterDescendants(this); it.valid(); it.advance()) {    if (!(it.get() instanceof DynamicIndex)) {      if (it.get() instanceof Index) {        throw new AbortException("A non-dynamic index was added to this database. Modifications are not allowed, unless this index is removed.");      }      continue;    }    ((DynamicIndex)it.get()).delete(id);  }  ((WritableDataStore<O>)content).delete(id);}  }
class C{  private boolean readFragment(){  _currentUrlMarker.setIndex(UrlPart.FRAGMENT,_buffer.length() - 1);  while (!_reader.eof()) {    char curr=_reader.read();    if (curr == ' ' || checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {      return readEnd(ReadEndState.ValidUrl);    } else {      _buffer.append(curr);    }  }  return readEnd(ReadEndState.ValidUrl);}  }
class C{  private void removeExistingParcelableImplementation(PsiClass psiClass){  PsiField[] allFields=psiClass.getAllFields();  for (  PsiField field : allFields) {    if (field.getName().equals(CREATOR_NAME)) {      field.delete();    }  }  findAndRemoveMethod(psiClass,psiClass.getName(),TYPE_PARCEL);  findAndRemoveMethod(psiClass,"describeContents");  findAndRemoveMethod(psiClass,"writeToParcel",TYPE_PARCEL,"int");}  }
class C{  public void debug(String message,Object... args){  if (debugMode) {    org.eclipse.che.ide.util.loging.Log.info(TourExtension.class,format(message,args));  }}  }
class C{  public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  @Override protected void initData(){}  }
class C{  public static boolean checkOverlap(final long srcOff,final long dstOff,final long length){  long min=Math.min(srcOff,dstOff);  long max=Math.max(srcOff,dstOff);  return (min + length) <= max;}  }
class C{  @Override TemplateElement[] accept(Environment env) throws TemplateException, IOException {  final Object moOrStr=calculateInterpolatedStringOrMarkup(env);  final Writer out=env.getOut();  if (moOrStr instanceof String) {    final String s=(String)moOrStr;    if (autoEscape) {      markupOutputFormat.output(s,out);    } else {      out.write(s);    }  } else {    final TemplateMarkupOutputModel mo=(TemplateMarkupOutputModel)moOrStr;    final MarkupOutputFormat moOF=mo.getOutputFormat();    if (moOF != outputFormat && !outputFormat.isOutputFormatMixingAllowed()) {      final String srcPlainText;      srcPlainText=moOF.getSourcePlainText(mo);      if (srcPlainText == null) {        throw new _TemplateModelException(escapedExpression,"The value to print is in ",new _DelayedToString(moOF)," format, which differs from the current output format, ",new _DelayedToString(outputFormat),". Format conversion wasn't possible.");      }      if (outputFormat instanceof MarkupOutputFormat) {        ((MarkupOutputFormat)outputFormat).output(srcPlainText,out);      } else {        out.write(srcPlainText);      }    } else {      moOF.output(mo,out);    }  }  return null;}  }
class C{  private static String _read_all(final InputStream is,final int buffer_size){  final char[] buffer=new char[buffer_size];  final StringBuilder out=new StringBuilder();  try {    final Reader in=new InputStreamReader(is,"UTF-8");    try {      for (; ; ) {        int rsz=in.read(buffer,0,buffer.length);        if (rsz < 0)         break;        out.append(buffer,0,rsz);      }    }  finally {      in.close();    }  } catch (  IOException ignored) {  }  return out.toString();}  }
class C{  public static CipherParameters makePBEMacParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  param=generator.generateDerivedMacParameters(pbeKey.getKeySize());  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public JEditorStringNumber(){  super();}  }
class C{  public boolean isUnset(){  return this == ZERO_PIXEL || (pref == null && min == null && max == null && gapPush == false);}  }
class C{  public byte[] fetchOctetString(int tag) throws BerException {  byte[] result=null;  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    result=fetchStringValue();  } catch (  BerException e) {    next=backup;    throw e;  }  return result;}  }
class C{  void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  httpServer.createContext("/test/first",new FirstHandler());  httpServer.createContext("/test/second",new SecondHandler());  httpServer.start();}  }
class C{  static void cancelActivity(Activity a){  getInstance()._cancelActivity(a);}  }
class C{  public Set<String> remove(String key,Set<String> value){  Set<String> existingValue=super.get(key);  if (existingValue == null) {    return null;  }  existingValue.removeAll(value);  if (existingValue.isEmpty()) {    return super.remove(key);  }  return super.put(key,existingValue);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void testUnscaledValue(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=100;  BigInteger bNumber=new BigInteger(a);  BigDecimal aNumber=new BigDecimal(bNumber,aScale);  assertTrue("incorrect unscaled value",aNumber.unscaledValue().equals(bNumber));}  }
class C{  @Override public void activateOptions(){}  }
class C{  public CharArrayList(char[] elements){  elements(elements);}  }
class C{  public static Object[] retrieveOperationParameters(final Message message) throws Exception {  SimpleString sstring=message.getBodyBuffer().readNullableSimpleString();  String jsonString=(sstring == null) ? null : sstring.toString();  if (jsonString != null) {    JsonArray jsonArray=JsonUtil.readJsonArray(jsonString);    return JsonUtil.fromJsonArray(jsonArray);  } else {    return null;  }}  }
class C{  public static void main(String[] argv){  runFilter(new Resample(),argv);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.251 -0500",hash_original_method="BAE8CD84EA4D59BD4BB7CAF15EB1C07F",hash_generated_method="7445C14409FF7674B142C1E17AAC50F3") private void didReceiveData(byte data[],int size){  if (mKeyStoreHandler != null)   mKeyStoreHandler.didReceiveData(data,size);}  }
class C{  public GraphicsNode parentGraphicsNode(){  if (currentNode == treeRoot)   return null;  GraphicsNode result=currentNode.getParent();  if (result != null) {    currentNode=result;  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetrootnode.class,args);}  }
class C{  public void onOffHeapRead(boolean hit){  offHeapGets.incrementAndGet();  if (hit)   offHeapHits.incrementAndGet(); else   offHeapMisses.incrementAndGet();  if (delegate != null)   delegate.onOffHeapRead(hit);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static Short toShort(double d){  return Short.valueOf(toShortValue(d));}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure sending LLDP out port {port} on switch {switch}",explanation="An I/O error occured while sending LLDP message " + "to the switch.",recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendDiscoveryMessage(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (!isOutgoingDiscoveryAllowed(sw,port,isStandard,isReverse))   return;  IOFSwitch iofSwitch=switchService.getSwitch(sw);  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (log.isTraceEnabled()) {    log.trace("Sending LLDP packet out of swich: {}, port: {}",sw.toString(),port.getPortNumber());  }  OFPacketOut po=generateLLDPMessage(sw,port,isStandard,isReverse);  OFPacketOut.Builder pob=po.createBuilder();  List<OFAction> actions=getDiscoveryActions(iofSwitch,ofpPort.getPortNo());  pob.setActions(actions);  iofSwitch.write(pob.build());  iofSwitch.flush();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.048 -0500",hash_original_method="BA46457405F31389F30610967A0B78B2",hash_generated_method="C7E3A620BC3590544E4DEEC02C770081") public void handleEvent(EventObject sipEvent,SIPTransaction transaction){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("handleEvent " + sipEvent + "currentTransaction = "+ transaction+ "this.sipListener = "+ this.getSipListener()+ "sipEvent.source = "+ sipEvent.getSource());    if (sipEvent instanceof RequestEvent) {      Dialog dialog=((RequestEvent)sipEvent).getDialog();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dialog = " + dialog);    } else     if (sipEvent instanceof ResponseEvent) {      Dialog dialog=((ResponseEvent)sipEvent).getDialog();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dialog = " + dialog);    }    sipStack.getStackLogger().logStackTrace();  }  EventWrapper eventWrapper=new EventWrapper(sipEvent,transaction);  if (!sipStack.reEntrantListener) {    this.eventScanner.addEvent(eventWrapper);  } else {    this.eventScanner.deliverEvent(eventWrapper);  }}  }
class C{  final void startCacheServer(final Cache cache) throws IOException {  if (isDefaultServerEnabled(cache)) {    final String serverBindAddress=(getServerBindAddress() == null ? null : getServerBindAddress().getHostAddress());    final Integer serverPort=getServerPort();    CacheServerLauncher.serverBindAddress.set(serverBindAddress);    CacheServerLauncher.serverPort.set(serverPort);    final CacheServer cacheServer=cache.addCacheServer();    cacheServer.setBindAddress(serverBindAddress);    cacheServer.setPort(serverPort);    if (getMaxThreads() != null) {      cacheServer.setMaxThreads(getMaxThreads());    }    if (getMaxConnections() != null) {      cacheServer.setMaxConnections(getMaxConnections());    }    if (getMaxMessageCount() != null) {      cacheServer.setMaximumMessageCount(getMaxMessageCount());    }    if (getMessageTimeToLive() != null) {      cacheServer.setMessageTimeToLive(getMessageTimeToLive());    }    if (getSocketBufferSize() != null) {      cacheServer.setSocketBufferSize(getSocketBufferSize());    }    if (getHostNameForClients() != null) {      cacheServer.setHostnameForClients(getHostNameForClients());    }    CacheServerHelper.setIsDefaultServer(cacheServer);    cacheServer.start();  }}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  public BulkUserImportException(String msg,BulkUserImportExceptionBean bean,Throwable cause){  super(msg,bean,cause);  this.bean=bean;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendItemShape,stream);  SerialUtilities.writePaint(this.seriesPaint,stream);  SerialUtilities.writePaint(this.baseSeriesPaint,stream);  SerialUtilities.writePaint(this.seriesOutlinePaint,stream);  SerialUtilities.writePaint(this.baseSeriesOutlinePaint,stream);  SerialUtilities.writeStroke(this.seriesOutlineStroke,stream);  SerialUtilities.writeStroke(this.baseSeriesOutlineStroke,stream);  SerialUtilities.writePaint(this.labelPaint,stream);  SerialUtilities.writePaint(this.axisLinePaint,stream);  SerialUtilities.writeStroke(this.axisLineStroke,stream);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  int length;  String childName;  Node insertedNode;  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("address");  java.util.List expected=new java.util.ArrayList();  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(6,length)) {    expected=expectedNoWhitespace;    refChild=childList.item(5);    newChild=childList.item(0);  } else {    expected=expectedWhitespace;    refChild=childList.item(11);    newChild=childList.item(1);  }  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN100DD=0; indexN100DD < childList.getLength(); indexN100DD++) {    child=(Node)childList.item(indexN100DD);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("childNames",expected,result);}  }
class C{  public void testCase16(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  byte rBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean hasRef(){  return super.hasAttribute(REF);}  }
class C{  public void addExtension(DERObjectIdentifier oid,boolean critical,byte[] value){  extGenerator.addExtension(new ASN1ObjectIdentifier(oid.getId()),critical,value);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.KEY___KEY_ID_1:    setKeyId_1((String)newValue);  return;case UmplePackage.KEY___ANONYMOUS_KEY_11:getAnonymous_key_1_1().clear();getAnonymous_key_1_1().addAll((Collection<? extends Anonymous_key_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public IgniteFutureCancelledCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public boolean ignoresCollision(){  return ignoreCollision;}  }
class C{  public static void storeToBinaryFile(String fileName,List<ExternalEvent> events) throws IOException {  if (!fileName.endsWith(BINARY_EXT)) {    fileName+="BINARY_EXT";  }  ObjectOutputStream out;  FileOutputStream fos=new FileOutputStream(fileName);  out=new ObjectOutputStream(fos);  out.writeObject(new Integer(events.size()));  for (  ExternalEvent ee : events) {    out.writeObject(ee);  }  out.close();}  }
class C{  private static MiniFluo startMiniFluo(){  final File miniDataDir=Files.createTempDir();  final List<ObserverSpecification> observers=new ArrayList<>();  observers.add(new ObserverSpecification(TripleObserver.class.getName()));  observers.add(new ObserverSpecification(StatementPatternObserver.class.getName()));  observers.add(new ObserverSpecification(JoinObserver.class.getName()));  observers.add(new ObserverSpecification(FilterObserver.class.getName()));  final HashMap<String,String> exportParams=new HashMap<>();  final RyaExportParameters ryaParams=new RyaExportParameters(exportParams);  ryaParams.setExportToRya(true);  ryaParams.setAccumuloInstanceName(accumulo.getInstanceName());  ryaParams.setZookeeperServers(accumulo.getZooKeepers());  ryaParams.setExporterUsername("root");  ryaParams.setExporterPassword("password");  ryaParams.setRyaInstanceName("demo_");  final ObserverSpecification exportObserverConfig=new ObserverSpecification(QueryResultObserver.class.getName(),exportParams);  observers.add(exportObserverConfig);  final FluoConfiguration config=new FluoConfiguration();  config.setApplicationName("IntegrationTests");  config.setMiniDataDir(miniDataDir.getAbsolutePath());  config.addObservers(observers);  final MiniFluo miniFluo=FluoFactory.newMiniFluo(config);  return miniFluo;}  }
class C{  static ComputedDayOfField ofWeekBasedYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekBasedYear",weekDef,IsoFields.WEEK_BASED_YEARS,FOREVER,ChronoField.YEAR.range());}  }
class C{  public void throwException() throws Exception {  throw new Exception(EXCEPTION_MESSAGE);}  }
class C{  public List<Consequent<TK,FV>> nextSuccessors(Consequent<TK,FV> antecedent){  List<Consequent<TK,FV>> consequentList=new ArrayList<>(2);  if (expandedItems.cardinality() == 0) {    assert antecedent == null || (antecedent.itemId < 0 && antecedent.ruleId < 0);    consequentList.add(new Consequent<TK,FV>(itemList.get(0),ruleList.get(0),this,0,0));    expandedItems.set(0);  } else   if (antecedent != null) {    int lastItem=antecedent.itemId;    int lastRule=antecedent.ruleId;    int nextItem=getIndex(lastItem + 1,lastRule);    if (!expandedItems.get(nextItem) && lastItem + 1 < itemList.size()) {      consequentList.add(new Consequent<TK,FV>(itemList.get(lastItem + 1),ruleList.get(lastRule),this,lastItem + 1,lastRule));      expandedItems.set(nextItem);    }    int nextRule=getIndex(lastItem,lastRule + 1);    if (!expandedItems.get(nextRule) && lastRule + 1 < ruleList.size()) {      consequentList.add(new Consequent<TK,FV>(itemList.get(lastItem),ruleList.get(lastRule + 1),this,lastItem,lastRule + 1));      expandedItems.set(nextRule);    }  }  return consequentList;}  }
class C{  public ManagePreferences(Context context,String contactId,String contactLookupKey){  mContext=context;  useDatabase=false;  if (BuildConfig.DEBUG) {    Log.v("Notification prefs for contactId = " + contactId + ", lookup_key = "+ contactLookupKey);  }  if (contactLookupKey != null && contactId != null) {    mCursor=mContext.getContentResolver().query(ContactNotifications.buildLookupUri(contactId,contactLookupKey),null,null,null,null);    if (mCursor != null && mCursor.getCount() > 0) {      useDatabase=true;      if (mCursor.getCount() > 0) {        mCursor.moveToFirst();        if (BuildConfig.DEBUG)         Log.v("Contact(s) found in contact prefs - using database");        mRowId=mCursor.getLong(mCursor.getColumnIndexOrThrow(ContactNotifications._ID));        final String lookup=mCursor.getString(mCursor.getColumnIndexOrThrow(ContactNotifications.CONTACT_LOOKUPKEY));        if (mCursor.getCount() > 1 || !contactLookupKey.equals(lookup)) {          if (BuildConfig.DEBUG)           Log.v("Multiple contacts found or lookup key mismatch - stil using database but starting contact sync");          SmsPopupUtilsService.startSyncContactNames(context);        }      }    }  }  if (BuildConfig.DEBUG && !useDatabase) {    Log.v("Contact NOT found - using prefs");  }  mPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);}  }
class C{  public SQLTimeoutException(){}  }
class C{  public void testTemplatesEnableExtFunc(){  Policy p=new SimplePolicy(new AllPermission());  Policy.setPolicy(p);  System.setSecurityManager(new SecurityManager());  TransformerFactory factory=TransformerFactory.newInstance();  boolean isExtensionSupported=enableExtensionFunction(factory);  try {    SAXSource xslSource=new SAXSource(new InputSource(xslFile));    xslSource.setSystemId(xslFileId);    Templates template=factory.newTemplates(xslSource);    Transformer transformer=template.newTransformer();    StringWriter stringResult=new StringWriter();    Result result=new StreamResult(stringResult);    transformer.transform(new SAXSource(new InputSource(xmlFile)),result);    System.out.println("testTemplatesEnableExtFunc: OK");  } catch (  TransformerConfigurationException e) {    fail(e.getMessage());  }catch (  TransformerException e) {    fail(e.getMessage());  } finally {    System.setSecurityManager(null);  }}  }
class C{  private IEspDevice __checkDeviceUpgradeOnlineSuc(String deviceKey){  IEspDevice device=__getCurrentDevice(deviceKey);  if (device != null) {    String romVersion=device.getRom_version();    String latestRomVersion=device.getLatest_rom_version();    if (romVersion != null && latestRomVersion != null && romVersion.equals(latestRomVersion)) {      return device;    } else {      return null;    }  } else {    return null;  }}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.MULTIPLICATIVE_EXPRESSION;}  }
class C{  public void addRole(Role role){  roles.put(role.getId(),role);}  }
class C{  protected V defaultValue(K key){  return null;}  }
class C{  public Sound(String url,SoundType type){  super(url,type);}  }
class C{  void resolve(Zoneinfo zi){  for (int i=0; i < list.size(); i++) {    ZoneRec rec=list.get(i);    rec.resolve(zi);  }}  }
class C{  @Override public UpdateResponse addBean(Object obj) throws IOException, SolrServerException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.addBean(obj);  return ur;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  private void dumpZone(PreparedStatement stmt,StendhalRPZone zone) throws SQLException {  zone.calculateDangerLevel();  stmt.setString(1,zone.getName());  stmt.setInt(2,zone.getLevel());  stmt.setInt(3,zone.isInterior() ? 1 : 0);  stmt.setInt(4,zone.getX());  stmt.setInt(5,zone.getY());  stmt.setInt(6,zone.getHeight());  stmt.setInt(7,zone.getWidth());  stmt.setInt(8,zone.isPublicAccessible() ? 1 : 0);  stmt.setString(9,zone.getAttributes().get("readable_name"));  stmt.setString(10,zone.describe());  stmt.setString(11,zone.getAttributes().get("color_method"));  stmt.setString(12,zone.getAttributes().get("color"));  stmt.setString(13,zone.getAttributes().get("blend_method"));  stmt.setDouble(14,Double.parseDouble(zone.getAttributes().get("danger_level")));  stmt.setString(15,zone.getAttributes().get("weather"));  stmt.addBatch();}  }
class C{  private void renderBolt(Tessellator tessellator,float partialframe,float cosyaw,float cospitch,float sinyaw,float cossinpitch,int pass){  Pos3D playerVector=new Pos3D(sinyaw * -cospitch,-cossinpitch / cosyaw,cosyaw * cospitch);  float voltage=this.particleAge >= 0 ? ((float)this.particleAge / (float)this.particleMaxAge) : 0.0F;  float mainAlpha=1.0F;  if (pass == 0) {    mainAlpha=(1.0F - voltage) * 0.4F;  } else {    mainAlpha=1.0F - voltage * 0.5F;  }  int renderlength=(int)((this.particleAge + partialframe + (int)(this.length * 3.0F)) / (int)(this.length * 3.0F) * this.segmentCount);  for (  BoltSegment renderSegment : this.segments) {    if (renderSegment != null && renderSegment.segmentID <= renderlength) {      float width=(float)(this.boltWidth * (getRelativeViewVector(renderSegment.startBolt.point).getMagnitude() / 5.0F + 1.0F) * (1.0F + renderSegment.weight)* 0.5F);      Pos3D diff1=playerVector.crossProduct(renderSegment.prevDiff).scale(width / renderSegment.sinPrev);      Pos3D diff2=playerVector.crossProduct(renderSegment.nextDiff).scale(width / renderSegment.sinNext);      Pos3D startvec=renderSegment.startBolt.point;      Pos3D endvec=renderSegment.endBolt.point;      float rx1=(float)(startvec.xPos - interpPosX);      float ry1=(float)(startvec.yPos - interpPosY);      float rz1=(float)(startvec.zPos - interpPosZ);      float rx2=(float)(endvec.xPos - interpPosX);      float ry2=(float)(endvec.yPos - interpPosY);      float rz2=(float)(endvec.zPos - interpPosZ);      tessellator.setColorRGBA_F(this.particleRed,this.particleGreen,this.particleBlue,mainAlpha * renderSegment.weight);      tessellator.addVertexWithUV(rx2 - diff2.xPos,ry2 - diff2.yPos,rz2 - diff2.zPos,0.5D,0.0D);      tessellator.addVertexWithUV(rx1 - diff1.xPos,ry1 - diff1.yPos,rz1 - diff1.zPos,0.5D,0.0D);      tessellator.addVertexWithUV(rx1 + diff1.xPos,ry1 + diff1.yPos,rz1 + diff1.zPos,0.5D,1.0D);      tessellator.addVertexWithUV(rx2 + diff2.xPos,ry2 + diff2.yPos,rz2 + diff2.zPos,0.5D,1.0D);      if (renderSegment.nextSegment == null) {        Pos3D roundend=renderSegment.endBolt.point.clone().translate(renderSegment.difference.clone().normalize().scale(width));        float rx3=(float)(roundend.xPos - interpPosX);        float ry3=(float)(roundend.yPos - interpPosY);        float rz3=(float)(roundend.zPos - interpPosZ);        tessellator.addVertexWithUV(rx3 - diff2.xPos,ry3 - diff2.yPos,rz3 - diff2.zPos,0.0D,0.0D);        tessellator.addVertexWithUV(rx2 - diff2.xPos,ry2 - diff2.yPos,rz2 - diff2.zPos,0.5D,0.0D);        tessellator.addVertexWithUV(rx2 + diff2.xPos,ry2 + diff2.yPos,rz2 + diff2.zPos,0.5D,1.0D);        tessellator.addVertexWithUV(rx3 + diff2.xPos,ry3 + diff2.yPos,rz3 + diff2.zPos,0.0D,1.0D);      }      if (renderSegment.prevSegment == null) {        Pos3D roundend=renderSegment.startBolt.point.clone().diff(renderSegment.difference.clone().normalize().scale(width));        float rx3=(float)(roundend.xPos - interpPosX);        float ry3=(float)(roundend.yPos - interpPosY);        float rz3=(float)(roundend.zPos - interpPosZ);        tessellator.addVertexWithUV(rx1 - diff1.xPos,ry1 - diff1.yPos,rz1 - diff1.zPos,0.5D,0.0D);        tessellator.addVertexWithUV(rx3 - diff1.xPos,ry3 - diff1.yPos,rz3 - diff1.zPos,0.0D,0.0D);        tessellator.addVertexWithUV(rx3 + diff1.xPos,ry3 + diff1.yPos,rz3 + diff1.zPos,0.0D,1.0D);        tessellator.addVertexWithUV(rx1 + diff1.xPos,ry1 + diff1.yPos,rz1 + diff1.zPos,0.5D,1.0D);      }    }  }}  }
class C{  static public void fail(){  fail(null);}  }
class C{  private Optional<JavacConfig> readIfConfig(Path dir){  if (Files.exists(dir.resolve("javaconfig.json"))) {    JavaConfigJson json=readJavaConfigJson(dir.resolve("javaconfig.json"));    Set<Path> classPath=json.classPathFile.map(null).orElse(Collections.emptySet());    Set<Path> sourcePath=json.sourcePath.stream().map(null).collect(Collectors.toSet());    Path outputDirectory=dir.resolve(json.outputDirectory);    JavacConfig config=new JavacConfig(sourcePath,classPath,outputDirectory);    return Optional.of(config);  } else   if (Files.exists(dir.resolve("pom.xml"))) {    Path pomXml=dir.resolve("pom.xml");    Set<Path> classPath=buildClassPath(pomXml);    Set<Path> sourcePath=sourceDirectories(pomXml);    Path outputDirectory=Paths.get("target/javacs").toAbsolutePath();    JavacConfig config=new JavacConfig(sourcePath,classPath,outputDirectory);    return Optional.of(config);  } else {    return Optional.empty();  }}  }
class C{  private int checkLink(final HtmlEscapeStringBuilder out,final String in,int start){  int pos=start + 1;  final StringBuilder temp=new StringBuilder();  temp.setLength(0);  pos=Utils.readMdLinkId(temp,in,pos);  if (pos < start) {    return -1;  }  String name=temp.toString();  LinkRef lr;  final int oldPos=pos++;  pos=Utils.skipSpaces(in,pos);  if (pos < start) {    lr=this.linkRefs.get(name.toLowerCase());    if (lr != null) {      pos=oldPos;    } else {      return -1;    }  } else   if (in.charAt(pos) == '[') {    pos++;    temp.setLength(0);    pos=Utils.readRawUntil(temp,in,pos,']');    if (pos < start) {      return -1;    }    final String id=temp.length() > 0 ? temp.toString() : name;    lr=this.linkRefs.get(id.toLowerCase());  } else {    lr=this.linkRefs.get(name.toLowerCase());    if (lr != null) {      pos=oldPos;    } else {      return -1;    }  }  if (lr == null) {    return -1;  }  if (lr.hasHttpScheme()) {    this.config.decorator.openLink(out);    out.appendHtml(" href=\"").append(lr.link).appendHtml("\"");    if (!Strings.isNullOrEmpty(lr.title)) {      out.appendHtml(" title=\"").append(lr.title).appendHtml("\"");    }    out.appendHtml(" class=\"reference-link\" rel=\"nofollow\" target=\"_blank\">");    this.recursiveEmitLine(out,name,0,MarkToken.LINK);    out.appendHtml("</a>");  } else {    out.appendHtml("<span class=\"reference-broken-link\">");    this.recursiveEmitLine(out,name,0,MarkToken.LINK);    out.appendHtml("</span>");  }  out.appendHtml("<span class=\"reference-link-index\">").append(lr.seqNumber).appendHtml("</span>");  return pos;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_1__VERBISTY_1:    setVerbisty_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void deploy(String path,InputStream war,boolean update,String tag) throws TomcatManagerException, IOException {  deployImpl(path,null,null,null,war,update,tag);}  }
class C{  private static boolean compareDouble(final double d1,final double d2,final double diff){  return Math.abs(d1 - d2) < diff;}  }
class C{  public NotificationChain basicSetStaticInitSequence(Sequence newStaticInitSequence,NotificationChain msgs){  Sequence oldStaticInitSequence=staticInitSequence;  staticInitSequence=newStaticInitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE,oldStaticInitSequence,newStaticInitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public AbstractPullLogModel(Icon modelIcon,String modelName,boolean isClosable,int maxLogEntries){  super(modelIcon,modelName,LogMode.PULL,isClosable,maxLogEntries);}  }
class C{  public static synchronized boolean executeBatch(List<String> sqlStatement){  boolean batchOk=false;  logger.trace("executeBatch() -->entry");  final Statement S=getStatement();  if (S == null) {    logger.error("executeBatch() <--exit (Statement unavailable)");    return false;  }  try {    for (int i=0; i < sqlStatement.size(); i++) {      S.addBatch(sqlStatement.get(i));    }    logger.trace("executeBatch(): starting Transaction...");    startTransaction(S.getConnection());    S.executeBatch();    batchOk=true;  } catch (  Throwable t) {    surfaceThrowable("executeBatch() failed",t);  } finally {    try {      endTransaction(S.getConnection(),batchOk);    } catch (    Throwable t) {      logger.error("Error encountered ending the transaction.",t);    }    cleanup(S);  }  logger.trace("executeBatch() <--exit: " + batchOk);  return batchOk;}  }
class C{  public void createMonthScenarioParChangeAndUserDeassign() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-04 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_MONTH_DEASSIGN",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS2,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_MONTH_DEASSIGN",serviceDetails,basicSetup.getCustomerUser1(),role);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 12:00:00"),"LONG_NUMBER","29");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-15 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-22 00:00:00"),"LONG_NUMBER","1588");  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 12:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_MONTH_DEASSIGN",subDetails);}  }
class C{  @Override public boolean isIndexed(Resource reference,boolean acceptExcluded){  return false;}  }
class C{  private String cutLink(String link,int len){  if (link.length() > len) {    String cut=link.substring(0,len / 2) + "..." + link.substring(link.length() - (len / 2));    return (cut);  }  return (link);}  }
class C{  public void complete(List<JCCompilationUnit> trees,ClassSymbol c){  annotate.enterStart();  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();  try {    classEnter(trees,null);    if (memberEnter.completionEnabled) {      while (uncompleted.nonEmpty()) {        ClassSymbol clazz=uncompleted.next();        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete(); else         prevUncompleted.append(clazz);      }      for (      JCCompilationUnit tree : trees) {        if (tree.starImportScope.elems == null) {          JavaFileObject prev=log.useSource(tree.sourcefile);          Env<AttrContext> topEnv=topLevelEnv(tree);          memberEnter.memberEnter(tree,topEnv);          log.useSource(prev);        }      }    }  }  finally {    uncompleted=prevUncompleted;    annotate.enterDone();  }}  }
class C{  public Classification(Collection<T> featureset,K category,float probability){  this.featureset=featureset;  this.category=category;  this.probability=probability;}  }
class C{  private void delete(ILdapMessage message){  if (message != null) {    ILdapEntry[] entries=message.getEntries();    if (entries != null && entries.length != 0) {      for (      ILdapEntry entry : entries) {        connection.deleteObject(entry.getDN());      }    }  }}  }
class C{  public void fillCol(final int col,final Array array){  QL.require(rows() == array.size(),ARRAY_IS_INCOMPATIBLE);  if (this.addr.isContiguous() && array.addr.isContiguous() && cols() == 1) {    System.arraycopy(array.$,0,$,0,size());  } else {    final Address.ArrayAddress.ArrayOffset src=array.addr.offset();    final Address.MatrixAddress.MatrixOffset dst=this.addr.offset(0,col);    for (int row=0; row < rows(); row++) {      $[dst.op()]=array.$[src.op()];      src.nextIndex();      dst.nextRow();    }  }}  }
class C{  public boolean isRecoveryLogEnabled(){  return recoveryLogEnabled;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public long valueAt(int index){  return mValues[index];}  }
class C{  private WeekFields(DayOfWeek firstDayOfWeek,int minimalDaysInFirstWeek){  Objects.requireNonNull(firstDayOfWeek,"firstDayOfWeek");  if (minimalDaysInFirstWeek < 1 || minimalDaysInFirstWeek > 7) {    throw new IllegalArgumentException("Minimal number of days is invalid");  }  this.firstDayOfWeek=firstDayOfWeek;  this.minimalDays=minimalDaysInFirstWeek;}  }
class C{  public synchronized void log(Level msgLevel,String msg){  LogRecord record=new LogRecord(msgLevel,msg);  log(record);}  }
class C{  public static void removeFromCache(final String sqlTagName) throws ApplicationRuntimeException {  try {    final String temp[]=sqlTagName.split("-");    final String domainName=ApplicationThreadLocals.getDomainName();    final String applName=temp[0];    CACHE_MANAGER.getCache().remove(applName + PATH_DELIM + domainName+ PATH_DELIM+ sqlTagName);  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching removeFromCache",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching removeFromCache",e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=(EntityReference)gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.setAttribute("newAttr","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {  if (limit - position >= length) {    System.arraycopy(value,offset,buffer,position,length);    position+=length;  } else {    final int bytesWritten=limit - position;    System.arraycopy(value,offset,buffer,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    refreshBuffer();    if (length <= limit) {      System.arraycopy(value,offset,buffer,0,length);      position=length;    } else {      output.write(value,offset,length);    }  }}  }
class C{  public String buildRevision(final char[] previousRevision){  String prevRev=null;  if (previousRevision != null) {    prevRev=String.valueOf(previousRevision);  }  return buildRevision(prevRev);}  }
class C{  public long end(int index){  return mEnds[index];}  }
class C{  @SuppressWarnings("unchecked") protected T unmarshalChild(HierarchicalStreamReader reader,UnmarshallingContext context){  String childName=reader.getNodeName();  Class<?> childClass=mapper.realClass(childName);  if (elementType.isAssignableFrom(childClass)) {    return (T)context.convertAnother(null,childClass);  }  return null;}  }
class C{  public static void silence(final boolean isSilenced){  TextToSpeech.isSilenced=isSilenced;}  }
class C{  public static IStorageDrawersApi instance(){  if (instance == null) {    try {      Class classApi=Class.forName("com.jaquadro.minecraft.storagedrawers.core.Api");      instance=(IStorageDrawersApi)classApi.getField("instance").get(null);    } catch (    Throwable t) {      return null;    }  }  return instance;}  }
class C{  public DdlException(String msg,Throwable baseEx){  super(msg,baseEx);}  }
class C{  private void performVibrate(){  if (mSelectedList.size() == 0) {    Vibrator v=(Vibrator)getContext().getSystemService(Context.VIBRATOR_SERVICE);    v.vibrate(10);  }}  }
class C{  public ExchangeRate(Coin coin,Fiat fiat){  checkArgument(coin.isPositive());  checkArgument(fiat.isPositive());  checkArgument(fiat.currencyCode != null,"currency code required");  this.coin=coin;  this.fiat=fiat;}  }
class C{  public String patch_toText(List<Patch> patches){  StringBuilder text=new StringBuilder();  for (  Patch aPatch : patches) {    text.append(aPatch);  }  return text.toString();}  }
class C{  public static void validateInputNotEmpty(String field,String message) throws CheckException {  validateInputSizeMax(field,message,Integer.MAX_VALUE);}  }
class C{  public GeolocSharingDeleteTask(GeolocSharingServiceImpl geolocSharingService,RichcallService richcallService,LocalContentResolver contentResolver){  super(contentResolver,GeolocSharingData.CONTENT_URI,GeolocSharingData.KEY_SHARING_ID,GeolocSharingData.KEY_CONTACT,(String)null);  mGeolocSharingService=geolocSharingService;  mRichcallService=richcallService;}  }
class C{  public boolean hasWhereClause(){  return getProperty(Annotations.GRAPH_PATTERN) != null;}  }
class C{  public void verifyOneSegment(SegmentedTimeline timeline){  for (long testCycle=TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle+=TEST_CYCLE_INC) {    SegmentedTimeline.Segment segment1=timeline.getSegment(this.monday.getTime().getTime() + testCycle);    SegmentedTimeline.Segment segment2=timeline.getSegment(segment1.getSegmentEnd() + 1);    assertEquals(segment1.getSegmentNumber() + 1,segment2.getSegmentNumber());    assertEquals(segment1.getSegmentEnd() + 1,segment2.getSegmentStart());    assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize() - 1,segment1.getSegmentEnd());    assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize(),segment2.getSegmentStart());    assertEquals(segment1.getSegmentEnd() + timeline.getSegmentSize(),segment2.getSegmentEnd());    long delta;    if (timeline.getSegmentSize() > 1000000) {      delta=timeline.getSegmentSize() / 10000;    } else     if (timeline.getSegmentSize() > 100000) {      delta=timeline.getSegmentSize() / 1000;    } else     if (timeline.getSegmentSize() > 10000) {      delta=timeline.getSegmentSize() / 100;    } else     if (timeline.getSegmentSize() > 1000) {      delta=timeline.getSegmentSize() / 10;    } else     if (timeline.getSegmentSize() > 100) {      delta=timeline.getSegmentSize() / 5;    } else {      delta=1;    }    long start=segment1.getSegmentStart() + delta;    long end=segment1.getSegmentStart() + timeline.getSegmentSize() - 1;    SegmentedTimeline.Segment lastSeg=timeline.getSegment(segment1.getSegmentStart());    SegmentedTimeline.Segment seg;    for (long i=start; i < end; i+=delta) {      seg=timeline.getSegment(i);      assertEquals(lastSeg.getSegmentNumber(),seg.getSegmentNumber());      assertEquals(lastSeg.getSegmentStart(),seg.getSegmentStart());      assertEquals(lastSeg.getSegmentEnd(),seg.getSegmentEnd());      assertTrue(lastSeg.getMillisecond() < seg.getMillisecond());      lastSeg=seg;    }    seg=timeline.getSegment(end + 1);    assertEquals(segment2.getSegmentNumber(),seg.getSegmentNumber());    assertEquals(segment2.getSegmentStart(),seg.getSegmentStart());    assertEquals(segment2.getSegmentEnd(),seg.getSegmentEnd());  }}  }
class C{  private void preSteps(){  ConnectionStatus status=myVdc.getConnectionStatus();switch (status) {case ISOLATED:    SecretKey key=apiSignatureGenerator.getSignatureKey(SignatureKeyType.INTERVDC_API);  myVdc.setSecretKey(new String(Base64.encodeBase64(key.getEncoded()),Charset.forName("UTF-8")));dbClient.updateAndReindexObject(myVdc);break;case CONNECTED:if (getAllVdc().size() < 2) {String errMsg="incorrect connected vdc count";log.error(errMsg);throw GeoException.fatals.connectVdcPrecheckFail(myVdcId,errMsg);}break;default :String errMsg="Unexpected local vdc connection status";log.error(errMsg);throw GeoException.fatals.connectVdcPrecheckFail(myVdcId,errMsg);}}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.127 -0500",hash_original_method="10E78FE9041FD1B7C26A106A739E4ED8",hash_generated_method="FA5BDD36BBD6F981379766CBEB85AF89") public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Encountered Bad Message \n" + sipMessage.toString());    }    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      String badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(badReqRes);        }        try {          this.sendMessage(badReqRes.getBytes(),this.getPeerInetAddress(),this.getPeerPort(),false);        } catch (        IOException e) {          this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  public final void resetStatus(final String current){  reset=true;  progress_size=0;  updateStatus(current,4);}  }
class C{  static Point convertScreenLocationToParent(Container parent,int x,int y){  for (Container p=parent; p != null; p=p.getParent()) {    if (p instanceof Window) {      Point point=new Point(x,y);      SwingUtilities.convertPointFromScreen(point,parent);      return point;    }  }  throw new Error("convertScreenLocationToParent: no window ancestor");}  }
class C{  public boolean isActive(){  return active;}  }
class C{  final boolean link(Index<V> succ,Index<V> newSucc){  Node<V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder clearKey2(){  key2=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public static boolean addReminder(Activity activity,View view,View.OnClickListener listener,ArrayList<LinearLayout> items,ArrayList<Integer> minuteValues,ArrayList<String> minuteLabels,ArrayList<Integer> methodValues,ArrayList<String> methodLabels,ReminderEntry newReminder,int maxReminders,OnItemSelectedListener onItemSelected){  if (items.size() >= maxReminders) {    return false;  }  LayoutInflater inflater=activity.getLayoutInflater();  LinearLayout parent=(LinearLayout)view.findViewById(R.id.reminder_items_container);  LinearLayout reminderItem=(LinearLayout)inflater.inflate(R.layout.edit_reminder_item,null);  parent.addView(reminderItem);  ImageButton reminderRemoveButton;  reminderRemoveButton=(ImageButton)reminderItem.findViewById(R.id.reminder_remove);  reminderRemoveButton.setOnClickListener(listener);  Spinner spinner=(Spinner)reminderItem.findViewById(R.id.reminder_minutes_value);  setReminderSpinnerLabels(activity,spinner,minuteLabels);  int index=findMinutesInReminderList(minuteValues,newReminder.getMinutes());  spinner.setSelection(index);  if (onItemSelected != null) {    spinner.setTag(index);    spinner.setOnItemSelectedListener(onItemSelected);  }  spinner=(Spinner)reminderItem.findViewById(R.id.reminder_method_value);  setReminderSpinnerLabels(activity,spinner,methodLabels);  index=findMethodInReminderList(methodValues,newReminder.getMethod());  spinner.setSelection(index);  if (onItemSelected != null) {    spinner.setTag(index);    spinner.setOnItemSelectedListener(onItemSelected);  }  items.add(reminderItem);  return true;}  }
class C{  public void bindTree(Tree tree){  if (this.tree != null) {    handlerRegistration.removeHandler();  }  this.tree=tree;  if (tree != null) {    if (handlerRegistration == null) {      handlerRegistration=new GroupingHandlerRegistration();    }    handlerRegistration.add(addBeforeLoadHandler(cTreeNodeLoaderHandler));    handlerRegistration.add(addLoadHandler(cTreeNodeLoaderHandler));    handlerRegistration.add(addLoadExceptionHandler(cTreeNodeLoaderHandler));  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.265 -0500",hash_original_method="5411F007DFA413B9921CB5C131E7CB3B",hash_generated_method="CE118D9220FDE4CED8F2CCAF3528CA51") public void drawArc(RectF oval,float startAngle,float sweepAngle,boolean useCenter,Paint paint){  if (oval == null) {    throw new NullPointerException();  }  addTaint(oval.getTaintInt() + startAngle + sweepAngle+ paint.getTaintInt());  addTaint(useCenter);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Property createDemandForModify(final Property oldProperty,final Property newProperty,final Date dateOfCompletion){  LOGGER.debug("Entered into createDemandForModify");  LOGGER.debug("createDemandForModify: oldProperty: " + oldProperty + ", newProperty: "+ newProperty+ ", dateOfCompletion: "+ dateOfCompletion);  List<Installment> instList=new ArrayList<Installment>();  instList=new ArrayList<Installment>(instTaxMap.keySet());  LOGGER.debug("createDemandForModify: instList: " + instList);  Ptdemand ptDemandOld=new Ptdemand();  Ptdemand ptDemandNew=new Ptdemand();  Map<String,Installment> yearwiseInstMap=propertyTaxUtil.getInstallmentsForCurrYear(new Date());  Installment installmentFirstHalf=yearwiseInstMap.get(PropertyTaxConstants.CURRENTYEAR_FIRST_HALF);  Installment installmentSecondHalf=yearwiseInstMap.get(PropertyTaxConstants.CURRENTYEAR_SECOND_HALF);  final Map<String,Ptdemand> oldPtdemandMap=getPtdemandsAsInstMap(oldProperty.getPtDemandSet());  ptDemandOld=oldPtdemandMap.get(installmentFirstHalf.getDescription());  final PropertyTypeMaster oldPropTypeMaster=oldProperty.getPropertyDetail().getPropertyTypeMaster();  final PropertyTypeMaster newPropTypeMaster=newProperty.getPropertyDetail().getPropertyTypeMaster();  if (!oldProperty.getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(newProperty.getPropertyDetail().getPropertyTypeMaster().getCode()) || !oldProperty.getIsExemptedFromTax() ^ !newProperty.getIsExemptedFromTax())   createAllDmdDetails(oldProperty,newProperty,installmentFirstHalf,instList,instTaxMap);  final Map<String,Ptdemand> newPtdemandMap=getPtdemandsAsInstMap(newProperty.getPtDemandSet());  ptDemandNew=newPtdemandMap.get(installmentFirstHalf.getDescription());  final Map<Installment,Set<EgDemandDetails>> newDemandDtlsMap=getEgDemandDetailsSetAsMap(new ArrayList(ptDemandNew.getEgDemandDetails()),instList);  for (  final Installment inst : instList) {    carryForwardCollection(newProperty,inst,newDemandDtlsMap.get(inst),ptDemandOld,oldPropTypeMaster,newPropTypeMaster);    if (instList.size() == 1 && instList.get(0).equals(installmentSecondHalf)) {      carryForwardPenalty(ptDemandOld,ptDemandNew,installmentFirstHalf);    } else {      if (inst.equals(currentInstall)) {        carryForwardPenalty(ptDemandOld,ptDemandNew,inst);      }    }  }  LOGGER.info("before adjustExcessCollAmt newDemandDtlsMap.size: " + newDemandDtlsMap.size());  Collections.sort(instList);  if (!excessCollAmtMap.isEmpty())   adjustExcessCollectionAmount(instList,newDemandDtlsMap,ptDemandNew);  LOGGER.debug("Exiting from createDemandForModify");  return newProperty;}  }
class C{  public void incNumInserts(){  this._stats.incLong(_numInsertsId,1);}  }
class C{  public String buildRequestUrl(int track,int chunkIndex){  assert (tracks != null);  assert (chunkStartTimes != null);  assert (chunkIndex < chunkStartTimes.length);  return url.replace(URL_PLACEHOLDER_BITRATE,Integer.toString(tracks[track].bitrate)).replace(URL_PLACEHOLDER_START_TIME,Long.toString(chunkStartTimes[chunkIndex]));}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public AnimationBuilder waitForHeight(){  waitForHeight=true;  return this;}  }
class C{  public void squareRootThis(){  polynomial.expandN((mDegree << 1) + 32);  polynomial.reduceN();  for (int i=0; i < mField.getDegree() - 1; i++) {    squareThis();  }}  }
class C{  @java.lang.SuppressWarnings("all") @javax.annotation.Generated("lombok") public int fieldName(){  return this.fieldName;}  }
class C{  public TextField createSearchField(final TextChangeListener textChangeListener){  final TextField textField=style("filter-box").styleName("text-style filter-box-hide").buildTextComponent();  textField.setWidth(100.0F,Unit.PERCENTAGE);  textField.addTextChangeListener(textChangeListener);  textField.setTextChangeEventMode(TextChangeEventMode.LAZY);  textField.setTextChangeTimeout(1000);  return textField;}  }
class C{  public static String exchangeForSessionToken(String protocol,String domain,String onetimeUseToken,PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {  String sessionUrl=getSessionTokenUrl(protocol,domain);  URL url=new URL(sessionUrl);  HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();  String header=formAuthorizationHeader(onetimeUseToken,key,url,"GET");  httpConn.setRequestProperty("Authorization",header);  if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {    throw new AuthenticationException(httpConn.getResponseCode() + ": " + httpConn.getResponseMessage());  }  String body=CharStreams.toString(new InputStreamReader(httpConn.getInputStream(),Charsets.ISO_8859_1));  Map<String,String> parsedTokens=StringUtil.string2Map(body,"\n","=",true);  parsedTokens=StringUtil.lowercaseKeys(parsedTokens);  return parsedTokens.get("token");}  }
class C{  public static void showConfirmSheet(Component parentComponent,Object message,int optionType,int messageType,SheetListener listener){  showConfirmSheet(parentComponent,message,optionType,messageType,null,listener);}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public POSTResultEntityBase deleteEntityByEncodedRowkey(@QueryParam("table") String table,@QueryParam("cf") String columnFamily,List<TaggedLogAPIEntity> entities){  GenericDeleter deleter=new GenericDeleter(table,columnFamily);  POSTResultEntityBase result=new POSTResultEntityBase();  try {    deleter.delete(entities);  } catch (  Exception ex) {    LOG.error("Fail deleting entity " + table + ":"+ columnFamily,ex);    result.setSuccess(false);    result.setException(ex.getMessage());    return result;  }  result.setSuccess(true);  return result;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  RoundRectangle2D outerStem=new RoundRectangle2D.Double();  RoundRectangle2D innerStem=new RoundRectangle2D.Double();  RoundRectangle2D mercuryStem=new RoundRectangle2D.Double();  Ellipse2D outerBulb=new Ellipse2D.Double();  Ellipse2D innerBulb=new Ellipse2D.Double();  String temp;  FontMetrics metrics;  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  drawBackground(g2,area);  Rectangle2D interior=(Rectangle2D)area.clone();  this.padding.trim(interior);  int midX=(int)(interior.getX() + (interior.getWidth() / 2));  int midY=(int)(interior.getY() + (interior.getHeight() / 2));  int stemTop=(int)(interior.getMinY() + getBulbRadius());  int stemBottom=(int)(interior.getMaxY() - getBulbDiameter());  Rectangle2D dataArea=new Rectangle2D.Double(midX - getColumnRadius(),stemTop,getColumnRadius(),stemBottom - stemTop);  outerBulb.setFrame(midX - getBulbRadius(),stemBottom,getBulbDiameter(),getBulbDiameter());  outerStem.setRoundRect(midX - getColumnRadius(),interior.getMinY(),getColumnDiameter(),stemBottom + getBulbDiameter() - stemTop,getColumnDiameter(),getColumnDiameter());  Area outerThermometer=new Area(outerBulb);  Area tempArea=new Area(outerStem);  outerThermometer.add(tempArea);  innerBulb.setFrame(midX - getBulbRadius() + getGap(),stemBottom + getGap(),getBulbDiameter() - getGap() * 2,getBulbDiameter() - getGap() * 2);  innerStem.setRoundRect(midX - getColumnRadius() + getGap(),interior.getMinY() + getGap(),getColumnDiameter() - getGap() * 2,stemBottom + getBulbDiameter() - getGap() * 2 - stemTop,getColumnDiameter() - getGap() * 2,getColumnDiameter() - getGap() * 2);  Area innerThermometer=new Area(innerBulb);  tempArea=new Area(innerStem);  innerThermometer.add(tempArea);  if ((this.dataset != null) && (this.dataset.getValue() != null)) {    double current=this.dataset.getValue().doubleValue();    double ds=this.rangeAxis.valueToJava2D(current,dataArea,RectangleEdge.LEFT);    int i=getColumnDiameter() - getGap() * 2;    int j=getColumnRadius() - getGap();    int l=(i / 2);    int k=(int)Math.round(ds);    if (k < (getGap() + interior.getMinY())) {      k=(int)(getGap() + interior.getMinY());      l=getBulbRadius();    }    Area mercury=new Area(innerBulb);    if (k < (stemBottom + getBulbRadius())) {      mercuryStem.setRoundRect(midX - j,k,i,(stemBottom + getBulbRadius()) - k,l,l);      tempArea=new Area(mercuryStem);      mercury.add(tempArea);    }    g2.setPaint(getCurrentPaint());    g2.fill(mercury);    if (this.subrangeIndicatorsVisible) {      g2.setStroke(this.subrangeIndicatorStroke);      Range range=this.rangeAxis.getRange();      double value=this.subrangeInfo[NORMAL][RANGE_LOW];      if (range.contains(value)) {        double x=midX + getColumnRadius() + 2;        double y=this.rangeAxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);        Line2D line=new Line2D.Double(x,y,x + 10,y);        g2.setPaint(this.subrangePaint[NORMAL]);        g2.draw(line);      }      value=this.subrangeInfo[WARNING][RANGE_LOW];      if (range.contains(value)) {        double x=midX + getColumnRadius() + 2;        double y=this.rangeAxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);        Line2D line=new Line2D.Double(x,y,x + 10,y);        g2.setPaint(this.subrangePaint[WARNING]);        g2.draw(line);      }      value=this.subrangeInfo[CRITICAL][RANGE_LOW];      if (range.contains(value)) {        double x=midX + getColumnRadius() + 2;        double y=this.rangeAxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);        Line2D line=new Line2D.Double(x,y,x + 10,y);        g2.setPaint(this.subrangePaint[CRITICAL]);        g2.draw(line);      }    }    if ((this.rangeAxis != null) && (this.axisLocation != NONE)) {      int drawWidth=AXIS_GAP;      if (this.showValueLines) {        drawWidth+=getColumnDiameter();      }      Rectangle2D drawArea;      double cursor;switch (this.axisLocation) {case RIGHT:        cursor=midX + getColumnRadius();      drawArea=new Rectangle2D.Double(cursor,stemTop,drawWidth,(stemBottom - stemTop + 1));    this.rangeAxis.draw(g2,cursor,area,drawArea,RectangleEdge.RIGHT,null);  break;case LEFT:default :cursor=midX - getColumnRadius();drawArea=new Rectangle2D.Double(cursor,stemTop,drawWidth,(stemBottom - stemTop + 1));this.rangeAxis.draw(g2,cursor,area,drawArea,RectangleEdge.LEFT,null);break;}}g2.setFont(this.valueFont);g2.setPaint(this.valuePaint);metrics=g2.getFontMetrics();switch (this.valueLocation) {case RIGHT:g2.drawString(this.valueFormat.format(current),midX + getColumnRadius() + getGap(),midY);break;case LEFT:String valueString=this.valueFormat.format(current);int stringWidth=metrics.stringWidth(valueString);g2.drawString(valueString,midX - getColumnRadius() - getGap()- stringWidth,midY);break;case BULB:temp=this.valueFormat.format(current);i=metrics.stringWidth(temp) / 2;g2.drawString(temp,midX - i,stemBottom + getBulbRadius() + getGap());break;default :}}g2.setPaint(this.thermometerPaint);g2.setFont(this.valueFont);metrics=g2.getFontMetrics();int tickX1=midX - getColumnRadius() - getGap() * 2 - metrics.stringWidth(UNITS[this.units]);if (tickX1 > area.getMinX()) {g2.drawString(UNITS[this.units],tickX1,(int)(area.getMinY() + 20));}g2.setStroke(this.thermometerStroke);g2.draw(outerThermometer);g2.draw(innerThermometer);drawOutline(g2,area);}  }
class C{  private Object parseRelationship(JsonNode relationshipDataNode,Class<?> type) throws IOException, IllegalAccessException, InstantiationException {  if (ValidationUtils.isRelationshipParsable(relationshipDataNode)) {    String identifier=createIdentifier(relationshipDataNode);    if (resourceCache.contains(identifier)) {      return resourceCache.get(identifier);    } else {      resourceCache.lock();      try {        return readObject(relationshipDataNode,type,true);      }  finally {        resourceCache.unlock();      }    }  }  return null;}  }
class C{  protected boolean isStartNode(DelphiPMDNode node){  return node.getText().equals(start);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("JFreeChartEntity: ");  sb.append("tooltip = ");  sb.append(getToolTipText());  return sb.toString();}  }
class C{  public static Date now(){  if (mockTime != null)   return mockTime; else   return new Date();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:26.068 -0500",hash_original_method="AC73044C1BE8B35906F49C8C6D477AFE",hash_generated_method="B64DAC5DC579F956866B0E3AFF4E496F") private String[] cut(String prefix,char delimiter){  String[] names=new String[mLines.size()];  int length=0;  for (  String line : mLines) {    if (line.startsWith(prefix)) {      int i=line.indexOf(delimiter);      if (i == -1) {        i=line.length();      }      names[length]=line.substring(prefix.length(),i);      ++length;    }  }  return Arrays.copyOf(names,length);}  }
class C{  public char charAt(int pos){  int startChunk=pos >>> m_chunkBits;  if (startChunk == 0 && m_innerFSB != null)   return m_innerFSB.charAt(pos & m_chunkMask); else   return m_array[startChunk][pos & m_chunkMask];}  }
class C{  public void addTour(File file) throws IOException {  TSPInstance problem=new TSPInstance(file);  if (problem.getDataType().equals(DataType.TOUR)) {    tours.addAll(problem.getTours());  } else {    throw new IllegalArgumentException("not a tour file");  }}  }
class C{  public void depthFirst(Closure c){  Map<String,Object> options=new ListHashMap<String,Object>();  options.put("preorder",true);  depthFirst(options,c);}  }
class C{  public static String normaliseName(@Nullable String name){  if (name == null) {    return null;  }  return StringUtils.substringBeforeLast(name,".").replaceAll("[\\s.:/\\\\*?%|><\"]+","").toLowerCase();}  }
class C{  boolean buildCandle(ZonedDateTime time,double open,double high,double low,double close,long volume,double vwap,int tradeCount,int rollupInterval,ZonedDateTime lastUpdateDate){  int index=this.indexOf(time);  CandleItem candleItem=null;  boolean newCandle=false;  if (index > -1) {    candleItem=(CandleItem)this.getDataItem(index);    if (null == lastUpdateDate)     lastUpdateDate=candleItem.getPeriod().getEnd();    this.rollCandle(candleItem.getPeriod(),rollupInterval,open,high,low,close,volume,tradeCount,vwap,lastUpdateDate);    if (candleItem.getHigh() < high) {      candleItem.setHigh(high);    }    if (candleItem.getLow() > low) {      candleItem.setLow(low);    }    candleItem.setClose(close);    if (rollupInterval > 1) {      candleItem.setVolume(candleItem.getVolume() + volume);      candleItem.setCount(candleItem.getCount() + tradeCount);    } else {      candleItem.setVolume(volume);      candleItem.setCount(tradeCount);    }    candleItem.setVwap(this.rollingCandle.getVwap());    candleItem.setLastUpdateDate(lastUpdateDate);  } else {    RegularTimePeriod period=this.getPeriodStart(time,this.getBarSize());    Tradingday tradingday=new Tradingday(TradingCalendar.getDateAtTime(period.getStart(),this.getStartTime()),TradingCalendar.getDateAtTime(period.getStart(),this.getEndTime()));    if (null == lastUpdateDate)     lastUpdateDate=period.getEnd();    this.rollCandle(period,rollupInterval,open,high,low,close,volume,tradeCount,vwap,lastUpdateDate);    candleItem=new CandleItem(this.getContract(),tradingday,period,open,high,low,close,volume,this.rollingCandle.getVwap(),tradeCount,lastUpdateDate);    this.add(candleItem,false);    newCandle=true;  }  return newCandle;}  }
class C{  public T documentTitle(String value){  setString(DOCUMENT_TITLE,value);  return (T)this;}  }
class C{  @Override public IntermediateInfo execute(String[] params){  try {    IntermediateInfo intermediateInfo=new IntermediateInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String uuid=commandLine.getOptionValue("uuid");    LOGGER.debug("UUID is " + uuid);    String key=commandLine.getOptionValue("key");    LOGGER.debug("key is " + key);    String value=commandLine.getOptionValue("value");    LOGGER.debug("value is " + value);    intermediateInfo.setUuid(uuid);    intermediateInfo.setKey(key);    intermediateInfo.setValue(value);    com.wipro.ats.bdre.md.dao.jpa.Intermediate intermediate=new com.wipro.ats.bdre.md.dao.jpa.Intermediate();    IntermediateId intermediateId=new IntermediateId();    intermediateId.setInterKey(key);    intermediateId.setUuid(uuid);    intermediate.setId(intermediateId);    intermediate.setInterValue(value);    intermediateDAO.insert(intermediate);    return intermediateInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public static void copyStreams(InputStream inputStream,OutputStream outputStream) throws IOException, InterruptedException {  InputStream is=new BufferedInputStream(inputStream,100000);  OutputStream os=new BufferedOutputStream(outputStream,100000);  int aByte;  try {    while ((aByte=is.read()) != -1) {      Streams.checkIfCanceled();      os.write(aByte);    }    os.flush();  }  finally {    close(is);    close(os);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static StructureStore<GlowStructure> saveStructure(GlowStructure structure,CompoundTag compound){  StructureStore<?> store=classTable.get(structure.getClass());  if (store == null) {    throw new IllegalArgumentException("Unknown structure type to save: \"" + structure.getClass() + "\"");  }  compound.putString("id",store.getId());  compound.putInt("ChunkX",structure.getChunkX());  compound.putInt("ChunkZ",structure.getChunkZ());  StructureStore<GlowStructure> baseStore=getBaseStore(store);  baseStore.save(structure,compound);  return baseStore;}  }
class C{  public void add(ObjectContract contract){  List<ObjectContract> contractList=contractMap.get(contract.getArity());  if (contractList == null) {    contractList=new ArrayList<>();  }  contractList.add(contract);  contractMap.put(contract.getArity(),contractList);  if (contract.getArity() > maxArity) {    maxArity=contract.getArity();  }}  }
class C{  public boolean equals(Object t1){  try {    Matrix3d m2=(Matrix3d)t1;    return (this.m00 == m2.m00 && this.m01 == m2.m01 && this.m02 == m2.m02 && this.m10 == m2.m10 && this.m11 == m2.m11 && this.m12 == m2.m12 && this.m20 == m2.m20 && this.m21 == m2.m21 && this.m22 == m2.m22);  } catch (  ClassCastException e1) {    return false;  }catch (  NullPointerException e2) {    return false;  }}  }
class C{  public OFRoleRequestVendorData(){  super(NXT_ROLE_REQUEST);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void addValue(double data,double weight){  m_Counts[(int)data]+=weight;  m_SumOfCounts+=weight;}  }
class C{  public <K>T ajax(String url,Map<String,?> params,Class<K> type,Object handler,String callback){  AjaxCallback<K> cb=new AjaxCallback<K>();  cb.type(type).weakHandler(handler,callback);  return ajax(url,params,type,cb);}  }
class C{  public IgniteMock(String name,String locHost,UUID nodeId,Marshaller marshaller,MBeanServer jmx,String home){  this.locHost=locHost;  this.nodeId=nodeId;  this.marshaller=marshaller;  this.jmx=jmx;  this.home=home;  this.name=name;}  }
class C{  private static boolean needsSkylightUpdate(FastCubeBlockAccess access,MutableBlockPos pos){  if (access.getBlockLightOpacity(pos) >= 15) {    return false;  }  int computedLight=access.computeLightValue(pos);  for (  EnumFacing facing : EnumFacing.values()) {    pos.move(facing);    int currentLight=access.getLightFor(EnumSkyBlock.SKY,pos);    int currentOpacity=Math.max(1,access.getBlockLightOpacity(pos));    pos.move(facing.getOpposite());    if (computedLight == currentLight - currentOpacity) {      return true;    }  }  return false;}  }
class C{  public final int attIndex(){  return m_attIndex;}  }
class C{  private float categoryProbability(Collection<T> features,K category){  return ((float)this.categoryCount(category) / (float)this.getCategoriesTotal()) * featuresProbabilityProduct(features,category);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord) {    if (is_ValueChanged(MColumn.COLUMNNAME_Name) || is_ValueChanged(MColumn.COLUMNNAME_Description) || is_ValueChanged(MColumn.COLUMNNAME_Help)) {      StringBuffer sql=new StringBuffer("UPDATE AD_Field SET Name=").append(DB.TO_STRING(getName())).append(", Description=").append(DB.TO_STRING(getDescription())).append(", Help=").append(DB.TO_STRING(getHelp())).append(" WHERE AD_Column_ID=").append(get_ID()).append(" AND IsCentrallyMaintained='Y'");      int no=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("afterSave - Fields updated #" + no);    }  }  return success;}  }
class C{  public static boolean hasNougat(){  return Build.VERSION.SDK_INT >= VERSION_CODES.N;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  handler.popElemTemplateElement();}  }
class C{  private void submitNewChunkTask(List<Map<Trait,Object>> list){  List<Map<Trait,Object>> newList=new ArrayList<>(list);  Bro2ChunkProcessorTask nextBroTask=new Bro2ChunkProcessorTask(this,newList);  getImporter().run(nextBroTask);}  }
class C{  public GF2mField(int degree,int poly){  if (degree != PolynomialRingGF2.degree(poly)) {    throw new IllegalArgumentException(" Error: the degree is not correct");  }  if (!PolynomialRingGF2.isIrreducible(poly)) {    throw new IllegalArgumentException(" Error: given polynomial is reducible");  }  this.degree=degree;  polynomial=poly;}  }
class C{  public static MemcacheClientBuilder<Serializable> newSerializableObjectClient(){  return new MemcacheClientBuilder<>(SerializableObjectTranscoder.INSTANCE);}  }
class C{  public MapOptions scaleControl(boolean scaleControl){  this.scaleControl=scaleControl;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    Random generator=new Random(987654);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {switch (i) {case 1:                slope=z - z2;              break;case 3:            slope=z - z2;          break;case 5:        slope=z - z2;      break;case 7:    slope=z - z2;  break;default :slope=1 / (2 - generator.nextDouble()) * (z - z2);}if (slope > maxSlope) {maxSlope=slope;flowDir=1 << i;}}if (dist == gridRes) {dist=diagGridRes;} else {dist=gridRes;}}if (maxSlope > 0) {output.setValue(row,col,flowDir);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void returnTag(byte[] data){  if (tagPool != null && tagPool.size() < maxPoolSize) {    tagPool.add(data);  }}  }
class C{  public ArbitraryLengthPath(Var subject,TupleExpr pathExpression,Var object,long minLength){  this(Scope.DEFAULT_CONTEXTS,subject,pathExpression,object,minLength);}  }
class C{  public void lshr(int size,Register dst,Register src,long shiftAmt){  int shift=clampShiftAmt(size,shiftAmt);  super.ubfm(size,dst,src,shift,size - 1);}  }
class C{  boolean hasNext(){  return mTemplatePosition < mTemplate.length - 1;}  }
class C{  public static String toString(Double arg,int precision){  return toString("%." + precision + "f",arg);}  }
class C{  public static INaviView create(final IViewContainer container,final INaviView view) throws InternalTranslationException {  Preconditions.checkNotNull(container,"IE00411: Module argument can not be null");  Preconditions.checkNotNull(view,"IE00414: View argument can not be null");  final Map<IAddress,INaviInstruction> instructions=new HashMap<IAddress,INaviInstruction>();  for (  final CCodeNode codeNode : view.getBasicBlocks()) {    for (    final INaviInstruction instruction : codeNode.getInstructions()) {      instructions.put(instruction.getAddress(),instruction);    }  }  final ReilFunction function=view.getContent().getReilCode();  final OperandGraph operandGraph=OperandGraph.create(function.getGraph());  final INaviView dfView=container.createView(String.format("Data flow view of '%s'",view.getName()),"");  final Map<OperandGraphNode,INaviCodeNode> nodeMap=new HashMap<OperandGraphNode,INaviCodeNode>();  final Map<INaviInstruction,CCodeNode> instructionMap=new HashMap<INaviInstruction,CCodeNode>();  for (  final OperandGraphNode operandGraphNode : operandGraph) {    final ReilInstruction reilInstruction=operandGraphNode.getInstruction();    final INaviInstruction instruction=instructions.get(ReilHelpers.toNativeAddress(reilInstruction.getAddress()));    if (instructionMap.containsKey(instruction)) {      nodeMap.put(operandGraphNode,instructionMap.get(instruction));      continue;    }    final CCodeNode codeNode=dfView.getContent().createCodeNode(null,Lists.newArrayList(instruction));    codeNode.setColor(ConfigManager.instance().getColorSettings().getBasicBlocksColor());    nodeMap.put(operandGraphNode,codeNode);    instructionMap.put(instruction,codeNode);  }  for (  final OperandGraphEdge edge : operandGraph.getEdges()) {    final INaviCodeNode source=nodeMap.get(edge.getSource());    final INaviCodeNode target=nodeMap.get(edge.getTarget());    if (source.equals(target)) {      continue;    }    dfView.getContent().createEdge(source,target,EdgeType.JUMP_UNCONDITIONAL);  }  return dfView;}  }
class C{  public ByteBufferBackedInputStream(ByteBuffer buf){  this.buf=buf;}  }
class C{  @SuppressWarnings("unchecked") public YamlConfiguration read(String string) throws IOException {  Yaml yaml=new Yaml();  root=(Map<String,Object>)yaml.load(cleanTabs(string));  return this;}  }
class C{  public static void browse(@NotNull URI uri){  getBrowserLauncher().browse(uri);}  }
class C{  public boolean shouldAllowNavigation(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowNavigation(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://") || url.startsWith("about:blank");}  }
class C{  public String resultProducerTipText(){  return "Set the resultProducer for which results are to be averaged.";}  }
class C{  public static void evolve(Grammar g1,Grammar g2){  int pos1=PRNG.nextInt(g1.size() - 1) + 1;  int pos2=PRNG.nextInt(g2.size() - 1) + 1;  int[] removed1=g1.cut(pos1,g1.size() - 1);  int[] removed2=g2.cut(pos2,g2.size() - 1);  g1.insert(pos1,removed2);  g2.insert(pos2,removed1);}  }
class C{  public static <T>void addSerializer(Class<T> clazz,Serializer<T> serializer){  if (!mCustomSerializers.containsKey(clazz))   mCustomSerializers.put(clazz,serializer);}  }
class C{  public void append(float value){  if (count == data.length) {    data=PApplet.expand(data);  }  data[count++]=value;}  }
class C{  public BitmapCache(BitmapGlobalConfig globalConfig){  if (globalConfig == null)   throw new IllegalArgumentException("globalConfig may not be null");  this.globalConfig=globalConfig;}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> updateFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to update Foo : {}",foo);  if (foo.getId() == null) {    return createFoo(foo);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("foo",foo.getId().toString())).body(result);}  }
class C{  private void validateErrorInformation(ErrorInformation errorInformation,HttpStatus expectedStatus,boolean checkMessage){  if (checkMessage) {    assertEquals(MESSAGE,errorInformation.getMessage());  }  assertEquals(expectedStatus.value(),errorInformation.getStatusCode());  assertEquals(expectedStatus.getReasonPhrase(),errorInformation.getStatusDescription());}  }
class C{  public Threads(){  super(Options.set,"Threads","Number of GC threads to use",1);  valueSet=false;}  }
class C{  @Inline public boolean isReferentLive(ObjectReference object){  return isLive(object);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DM_EXIT",justification="OK to directly exit standalone main") @Override public boolean shutdown(){  return shutdown(0,true);}  }
class C{  public boolean isEsmeManualAcknowledgement(){  return isEsmeManualAcknowledgement(esmClass);}  }
class C{  private String decodePercent(String str) throws InterruptedException {  try {    StringBuffer sb=new StringBuffer();    for (int i=0; i < str.length(); i++) {      char c=str.charAt(i);switch (c) {case '+':        sb.append(' ');      break;case '%':    sb.append((char)Integer.parseInt(str.substring(i + 1,i + 3),16));  i+=2;break;default :sb.append(c);break;}}return sb.toString();} catch (Exception e) {Log.e(TAG,"BAD REQUEST: Bad percent-encoding.");return null;}}  }
class C{  @Nullable protected MutableTryBlock<EH> readNextItem(){  MutableTryBlock<EH> ret=next.next;  if (ret == listEnd) {    return null;  }  while (ret.next != listEnd) {    if (ret.endCodeAddress == ret.next.startCodeAddress && ret.getExceptionHandlers().equals(ret.next.getExceptionHandlers())) {      ret.mergeNext();    } else {      break;    }  }  return ret;}  }
class C{  public String trimSpecialChars(String text){  return text;}  }
class C{  public boolean isValid(){  for (  IMPAsset asset : this.referencedAssets) {    if (!asset.isValid()) {      return false;    }  }  return true;}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public static long[] copy(long[] v,int mincap){  int words=((mincap - 1) >>> LONG_LOG2_SIZE) + 1;  if (v.length == words) {    return Arrays.copyOf(v,v.length);  }  long[] ret=new long[words];  System.arraycopy(v,0,ret,0,Math.min(v.length,words));  return ret;}  }
class C{  public boolean isStart(){  return isStart;}  }
class C{  private void mergeAt(int i){  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  @Override public int compareTo(EventInfoResource o){  return ComparisonChain.start().compare(eventId,o.eventId).compareFalseFirst(enabled,o.enabled).compare(bufferCapacity,o.bufferCapacity).compare(etype,o.etype).compare(eventDesc,o.eventDesc).compare(eventName,o.eventName).compare(moduleName,o.moduleName).compare(numOfEvents,o.numOfEvents).result();}  }
class C{  public static Atom findUnicodeAtom(String str){  return findOrCreate(null,false,str);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean italic=(StyleConstants.isItalic(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setItalic(sas,italic);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  @Override final public boolean isNull(final int index){  return false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateRecentReplays(){  final int maxCount=Env.APP_SETTINGS.get(Settings.RECENT_REPLAYS_COUNT);  if (maxCount == 0) {    if (Env.APP_SETTINGS.get(Settings.RECENT_REPLAYS_BEAN).getReplayList().isEmpty())     return;  } else {    final List<Path> replayList=Env.APP_SETTINGS.get(Settings.RECENT_REPLAYS_BEAN).getReplayList();    if (!replayList.isEmpty() && replayList.get(0).equals(repProc.file) && maxCount >= replayList.size())     return;  }  final RecentReplaysBean recentReplaysBean=Env.APP_SETTINGS.get(Settings.RECENT_REPLAYS_BEAN).cloneBean();  final List<Path> replayList=recentReplaysBean.getReplayList();  recentReplaysBean.getReplayList().add(0,repProc.file);  for (int i=0; i < replayList.size(); i++)   if ((i > 0 && replayList.get(i).equals(repProc.file)) || i >= maxCount) {    replayList.remove(i);    i--;  }  Env.APP_SETTINGS.set(Settings.RECENT_REPLAYS_BEAN,recentReplaysBean);}  }
class C{  public void killOrder(URI orderId,String detailedMessage){  try {    Order order=modelClient.orders().findById(orderId);    if (order != null) {      if (log.isInfoEnabled()) {        log.info("Killing order: " + orderId);      }      order.setOrderStatus(OrderStatus.ERROR.name());      modelClient.save(order);      if (order.getExecutionStateId() != null) {        ExecutionState execState=modelClient.executionStates().findById(order.getExecutionStateId());        execState.setExecutionStatus(ExecutionStatus.FAILED.name());        modelClient.save(execState);        List<ExecutionTaskLog> logs=modelClient.executionTaskLogs().findByIds(execState.getTaskLogIds());        for (        ExecutionTaskLog log : logs) {          if (log.getElapsed() == null) {            log.setLevel(LogLevel.WARN.name());            modelClient.save(log);          }        }        addTerminationTaskLog(execState,detailedMessage);      }    }  } catch (  RuntimeException e) {    log.error("Failed to terminate order: " + orderId,e);  }}  }
class C{  public static void copy(final File src,final File dst) throws IOException {  if (src == null || !src.exists() || !src.canRead())   throw new IOException("IOException (copy file): source file does not exists or not readable");  if (!isWritable(dst,true))   throw new IOException("IOException (copy file): destination file not writable");  Log.w("FileUtils","copying: src: " + src + " to dst: "+ dst);  final FileInputStream fis=new FileInputStream(src);  final FileOutputStream fos=new FileOutputStream(dst);  final InputStream in=new BufferedInputStream(fis);  final BufferedOutputStream out=new BufferedOutputStream(fos);  final byte[] buf=new byte[1024];  int len;  IOException e=null;  try {    while ((len=in.read(buf)) > 0)     out.write(buf,0,len);  } catch (  IOException e1) {    e=e1;  }  try {    in.close();  } catch (  IOException ignored) {  }  try {    fis.close();  } catch (  IOException ignored) {  }  try {    out.flush();    out.close();  } catch (  IOException ignored) {  }  try {    fos.flush();    fos.close();  } catch (  IOException ignored) {  }  sync(fos);  if (e != null)   throw e;}  }
class C{  private void createMarketableServiceAndSubscribe(boolean allowOnBehalfActing) throws Exception {  activatedService=createMarketableService(allowOnBehalfActing);  subscription=factory.createSubscriptionVO("sub_" + WebserviceTestBase.createUniqueKey());  List<VOUsageLicense> users=new ArrayList<VOUsageLicense>();  users.add(factory.createUsageLicenceVO(techProviderUserId));  SubscriptionService subscriptionSV=ServiceFactory.getDefault().getSubscriptionService(techProviderUserKey,commonUserPWD);  subscription=subscriptionSV.subscribeToService(subscription,activatedService,users,null,null,new ArrayList<VOUda>());}  }
class C{  public KeywordSearchTupleSet(){  m_lucene=new LuceneSearcher();}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_SLOT__VALUE:    setValue(VALUE_EDEFAULT);  return;case SRuntimePackage.EXECUTION_SLOT__FQ_NAME:setFqName(FQ_NAME_EDEFAULT);return;case SRuntimePackage.EXECUTION_SLOT__WRITABLE:setWritable(WRITABLE_EDEFAULT);return;case SRuntimePackage.EXECUTION_SLOT__TYPE:setType((org.yakindu.base.types.Type)null);return;}super.eUnset(featureID);}  }
class C{  protected Expression gte(int opPos) throws TransformerException {  return compileOperation(new Gte(),opPos);}  }
class C{  public TCast cast(TClass source,TClass target){  return castsRegistry.cast(source,target);}  }
class C{  private void logReplicationTimeAndConfFiles(Collection<Map<String,Object>> modifiedConfFiles,boolean successfulInstall) throws IOException {  List<String> confFiles=new ArrayList<>();  if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())   for (  Map<String,Object> map1 : modifiedConfFiles)   confFiles.add((String)map1.get(NAME));  Properties props=replicationHandler.loadReplicationProperties();  long replicationTime=System.currentTimeMillis();  long replicationTimeTaken=(replicationTime - getReplicationStartTime()) / 1000;  Directory dir=null;  try {    dir=solrCore.getDirectoryFactory().get(solrCore.getDataDir(),DirContext.META_DATA,solrCore.getSolrConfig().indexConfig.lockType);    int indexCount=1, confFilesCount=1;    if (props.containsKey(TIMES_INDEX_REPLICATED)) {      indexCount=Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;    }    StringBuilder sb=readToStringBuilder(replicationTime,props.getProperty(INDEX_REPLICATED_AT_LIST));    props.setProperty(INDEX_REPLICATED_AT_LIST,sb.toString());    props.setProperty(INDEX_REPLICATED_AT,String.valueOf(replicationTime));    props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN,String.valueOf(replicationTimeTaken));    props.setProperty(TIMES_INDEX_REPLICATED,String.valueOf(indexCount));    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {      props.setProperty(CONF_FILES_REPLICATED,confFiles.toString());      props.setProperty(CONF_FILES_REPLICATED_AT,String.valueOf(replicationTime));      if (props.containsKey(TIMES_CONFIG_REPLICATED)) {        confFilesCount=Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;      }      props.setProperty(TIMES_CONFIG_REPLICATED,String.valueOf(confFilesCount));    }    props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED,String.valueOf(getTotalBytesDownloaded(this)));    if (!successfulInstall) {      int numFailures=1;      if (props.containsKey(TIMES_FAILED)) {        numFailures=Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;      }      props.setProperty(TIMES_FAILED,String.valueOf(numFailures));      props.setProperty(REPLICATION_FAILED_AT,String.valueOf(replicationTime));      sb=readToStringBuilder(replicationTime,props.getProperty(REPLICATION_FAILED_AT_LIST));      props.setProperty(REPLICATION_FAILED_AT_LIST,sb.toString());    }    final IndexOutput out=dir.createOutput(REPLICATION_PROPERTIES,DirectoryFactory.IOCONTEXT_NO_CACHE);    Writer outFile=new OutputStreamWriter(new PropertiesOutputStream(out),StandardCharsets.UTF_8);    try {      props.store(outFile,"Replication details");      dir.sync(Collections.singleton(REPLICATION_PROPERTIES));    }  finally {      IOUtils.closeQuietly(outFile);    }  } catch (  Exception e) {    LOG.warn("Exception while updating statistics",e);  } finally {    if (dir != null) {      solrCore.getDirectoryFactory().release(dir);    }  }}  }
class C{  public boolean waitForRegistered(long timeout,TimeUnit unit){  try {    if (this.registeredLatch.await(timeout,unit)) {      return true;    }  } catch (  InterruptedException e) {    LOG.severe("Failed to wait for mesos framework got registered");    return false;  }  return false;}  }
class C{  public static Converter<?> createConverter(BeanManager beanManager,Class<?> forClass){  Converter<?> managedConverter=createConverter(beanManager,new FacesConverterAnnotationLiteral("",forClass));  if (managedConverter != null) {    return new CdiConverter("",forClass,managedConverter);  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void applyAllCSS(){  HTMLElement html=null;  if (document.getTagId() == HTMLElement.TAG_HTML) {    html=document;  }  HTMLElement body=null;  if (html != null) {    body=html.getFirstChildByTagId(HTMLElement.TAG_BODY);  }  if (body != null) {    CSSEngine.getInstance().applyCSS(body,this,externalCSS,embeddedCSS);  }}  }
class C{  public void subscribe(final String topic,final int qos,String invocationContext,String activityToken){  service.traceDebug(TAG,"subscribe({" + topic + "},"+ qos+ ",{"+ invocationContext+ "}, {"+ activityToken+ "}");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.subscribe(topic,qos,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  @Override public synchronized int available(){  return count - pos;}  }
class C{  public CircularSkyView(Context context){  super(context);  this.initialize();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.REAL_LITERAL__VALUE:    setValue((Float)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public SHA1PRNG_SecureRandomImpl(){  seed=new int[HASH_OFFSET + EXTRAFRAME_OFFSET];  seed[HASH_OFFSET]=H0;  seed[HASH_OFFSET + 1]=H1;  seed[HASH_OFFSET + 2]=H2;  seed[HASH_OFFSET + 3]=H3;  seed[HASH_OFFSET + 4]=H4;  seedLength=0;  copies=new int[2 * FRAME_LENGTH + EXTRAFRAME_OFFSET];  nextBytes=new byte[DIGEST_LENGTH];  nextBIndex=HASHBYTES_TO_USE;  counter=COUNTER_BASE;  state=UNDEFINED;}  }
class C{  static int findLimit(InputStream in){  if (in instanceof LimitedInputStream) {    return ((LimitedInputStream)in).getRemaining();  } else   if (in instanceof ASN1InputStream) {    return ((ASN1InputStream)in).getLimit();  } else   if (in instanceof ByteArrayInputStream) {    return ((ByteArrayInputStream)in).available();  } else   if (in instanceof FileInputStream) {    try {      FileChannel channel=((FileInputStream)in).getChannel();      long size=(channel != null) ? channel.size() : Integer.MAX_VALUE;      if (size < Integer.MAX_VALUE) {        return (int)size;      }    } catch (    IOException e) {    }  }  if (MAX_MEMORY > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)MAX_MEMORY;}  }
class C{  public void lockAndSwitchSecondary(Protocol newSecondaryProtocol) throws QueryException {  if (secondaryProtocol != null && !secondaryProtocol.isClosed()) {    secondaryProtocol.close();  }  if (currentReadOnlyAsked || (urlParser.getOptions().failOnReadOnly && !currentReadOnlyAsked && isMasterHostFail())) {    try {      syncConnection(currentProtocol,newSecondaryProtocol);    } catch (    Exception e) {    }    currentProtocol=newSecondaryProtocol;  }  this.secondaryProtocol=newSecondaryProtocol;  if (urlParser.getOptions().assureReadOnly) {    setSessionReadOnly(true,this.secondaryProtocol);  }  resetSecondaryFailoverData();}  }
class C{  public ErrorResponse(Reader reader) throws IOException, XmlPullParserException {  this();  this.parseXml(reader);}  }
class C{  static public void main(String[] args) throws IOException, ParserConfigurationException, SAXException {  final Properties properties=new Properties();  properties.setProperty(Journal.Options.FILE,"counters.jnl");  final Journal store=new Journal(properties);  CounterSetBTree btree=(CounterSetBTree)store.getIndex("counters");  if (btree == null) {    btree=CounterSetBTree.create(store);    store.registerIndex("counters",btree);    store.commit();  }  for (  String s : args) {    final File file=new File(s);    loadFile(btree,file);  }  System.err.println("There are " + btree.rangeCount() + " counter values covering "+ new Date(btree.getFirstTimestamp())+ " to "+ new Date(btree.getLastTimestamp()));}  }
class C{  public MutablePeriod(ReadableInstant startInstant,ReadableInstant endInstant,PeriodType type){  super(startInstant,endInstant,type);}  }
class C{  @Override void appendToSqlBuilder(SqlBuilder builder,boolean forSqlValidation){  appendQualifiedExpression(builder,forSqlValidation);  if (hasAlias()) {    builder.sql.append(" AS ").append(alias);  } else   if (hasQualifier()) {    builder.sql.append(" AS ").append(expression);  }}  }
class C{  @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {    return;  }  final double rawScore=calcRawScore(analyzedInterval);  if (!SeenHugeLogProb(analyzedInterval)) {    m_rawScores.add(rawScore);    ++m_intervalCount;  }}  }
class C{  public Object clone(){  GraphicContext copy=null;  try {    copy=(GraphicContext)super.clone();    copy.transform=null;    if (colorTransform != null)     copy.colorTransform=(ColorTransformNode)colorTransform.clone();    copy.maskType=maskType;    copy.blendMode=blendMode;    copy.scalingGrid=scalingGrid;  } catch (  CloneNotSupportedException e) {    throw new FXGException("InternalProcessingError",e);  }  return copy;}  }
class C{  public void entry(String group,String handle){  this.group(group).entry(handle);}  }
class C{  public static int name2type(String nm){  Integer i=entityTypes.get(nm);  return (i == null) ? CDATA : i.intValue();}  }
class C{  protected void preprocessDiagnostic(JCDiagnostic diag){  for (  Object o : diag.getArgs()) {    if (o != null) {      preprocessArgument(o);    }  }  if (diag.isMultiline()) {    for (    JCDiagnostic d : diag.getSubdiagnostics())     preprocessDiagnostic(d);  }}  }
class C{  public int hashCode(){  return oid.hashCode();}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  public Solution(double[] objectives){  this(0,objectives.length,0);  for (int i=0; i < objectives.length; i++) {    setObjective(i,objectives[i]);  }}  }
class C{  void readResponse(AndroidHttpClientConnection httpClientConnection) throws IOException, ParseException {  if (mCancelled)   return;  StatusLine statusLine=null;  boolean hasBody=false;  httpClientConnection.flush();  int statusCode=0;  Headers header=new Headers();  do {    statusLine=httpClientConnection.parseResponseHeader(header);    statusCode=statusLine.getStatusCode();  } while (statusCode < HttpStatus.SC_OK);  if (HttpLog.LOGV)   HttpLog.v("Request.readResponseStatus() " + statusLine.toString().length() + " "+ statusLine);  ProtocolVersion v=statusLine.getProtocolVersion();  mEventHandler.status(v.getMajor(),v.getMinor(),statusCode,statusLine.getReasonPhrase());  mEventHandler.headers(header);  HttpEntity entity=null;  hasBody=canResponseHaveBody(mHttpRequest,statusCode);  if (hasBody)   entity=httpClientConnection.receiveResponseEntity(header);  boolean supportPartialContent="bytes".equalsIgnoreCase(header.getAcceptRanges());  if (entity != null) {    InputStream is=entity.getContent();    Header contentEncoding=entity.getContentEncoding();    InputStream nis=null;    byte[] buf=null;    int count=0;    try {      if (contentEncoding != null && contentEncoding.getValue().equals("gzip")) {        nis=new GZIPInputStream(is);      } else {        nis=is;      }      buf=mConnection.getBuf();      int len=0;      int lowWater=buf.length / 2;      while (len != -1) {synchronized (this) {          while (mLoadingPaused) {            try {              wait();            } catch (            InterruptedException e) {              HttpLog.e("Interrupted exception whilst " + "network thread paused at WebCore's request." + " "+ e.getMessage());            }          }        }        len=nis.read(buf,count,buf.length - count);        if (len != -1) {          count+=len;          if (supportPartialContent)           mReceivedBytes+=len;        }        if (len == -1 || count >= lowWater) {          if (HttpLog.LOGV)           HttpLog.v("Request.readResponse() " + count);          mEventHandler.data(buf,count);          count=0;        }      }    } catch (    EOFException e) {      if (count > 0) {        mEventHandler.data(buf,count);      }      if (HttpLog.LOGV)       HttpLog.v("readResponse() handling " + e);    }catch (    IOException e) {      if (statusCode == HttpStatus.SC_OK || statusCode == HttpStatus.SC_PARTIAL_CONTENT) {        if (supportPartialContent && count > 0) {          mEventHandler.data(buf,count);        }        throw e;      }    } finally {      if (nis != null) {        nis.close();      }    }  }  mConnection.setCanPersist(entity,statusLine.getProtocolVersion(),header.getConnectionType());  mEventHandler.endData();  complete();  if (HttpLog.LOGV)   HttpLog.v("Request.readResponse(): done " + mHost.getSchemeName() + "://"+ getHostPort()+ mPath);}  }
class C{  public img(String src,String name,int border){  setSrc(src);  setName(name);  setBorder(border);}  }
class C{  public ScriptListTable scriptList(){  if (scriptListTable.get() == null) {    scriptListTable.compareAndSet(null,gsub.createScriptList());  }  return scriptListTable.get();}  }
class C{  @Override public synchronized boolean pruneValues(double threshold){  boolean changed=condDistrib.pruneValues(threshold);  boolean changed2=uncondDistrib.pruneValues(threshold);  return changed || changed2;}  }
class C{  public void finish() throws IOException {  checkClosed();  write();}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenees.size() == 0) {    return false;  }  boolean ok=false;  for (  Object o : m_listenees) {    if (o instanceof EventConstraints) {      if (((EventConstraints)o).eventGeneratable("thresholdData") || ((EventConstraints)o).eventGeneratable("visualizableError")) {        ok=true;        break;      }    }  }  return ok;}  }
class C{  public static int[][] generatePartition(int indices[],int num,Random r){  int L=indices.length;  if (r != null)   A.shuffle(indices,r);  ArrayList<Integer> selection[]=new ArrayList[num];  for (int i=0; i < num; i++) {    selection[i]=new ArrayList<Integer>();    selection[i].add(indices[i]);  }  for (int i=num; i < L; i++) {    int idx=r.nextInt(num);    selection[idx].add(indices[i]);  }  int partition[][]=convertListArrayTo2DArray(selection);  for (  int part[] : partition) {    Arrays.sort(part);  }  return partition;}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  private List<WordCountsResponse> extractResponses(NodeGroupBroadcastResponse broadcastResponse){  NodeGroupBroadcastResult broadcastResult=NodeGroupUtils.toBroadcastResult(broadcastResponse);  return broadcastResult.allResponses.stream().peek(null).filter(null).map(null).collect(Collectors.toList());}  }
class C{  public CSSIdCondition(String ns,String ln,String value){  super(value);  namespaceURI=ns;  localName=ln;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.345 -0500",hash_original_method="00E59ACDF972C6E7146BB1869D625C11",hash_generated_method="AECBD11D2AF29C6DBB0AB5F019CE58D8") public static InputEventMessage obtain(Message msg){synchronized (sPoolSync) {    if (sPool != null) {      InputEventMessage m=sPool;      sPool=m.mNext;      m.mNext=null;      sPoolSize--;      m.mMessage=msg;      return m;    }  }  return new InputEventMessage(msg);}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public String globalInfo(){  return "Class for constructing a forest of random trees.\n\n" + "For more information see: \n\n" + getTechnicalInformation().toString();}  }
class C{  static ByteOrder byteOrder(){  if (byteOrder != null)   return byteOrder;  long a=unsafe.allocateMemory(8);  try {    unsafe.putLong(a,0x0102030405060708L);    byte b=unsafe.getByte(a);switch (b) {case 0x01:      byteOrder=ByteOrder.BIG_ENDIAN;    break;case 0x08:  byteOrder=ByteOrder.LITTLE_ENDIAN;break;default :assert false;}}  finally {unsafe.freeMemory(a);}return byteOrder;}  }
class C{  public Object clone(){  Schema s=new Schema(m_size);  for (int i=0; i < m_size; ++i) {    s.addColumn(m_names[i],m_types[i],m_dflts[i]);  }  return s;}  }
class C{  public static void test_getInstanceVariable(){  Target target=new Target();  target.setInstanceVariable(10098);  assertSame(10098,target.instanceVariable);}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new Exception("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public SimpleMultiPartRequest(String url,Listener<String> listener,ErrorListener errorListener){  super(Method.POST,url,listener,errorListener);  mListener=listener;}  }
class C{  public void closeCqService(){  cache.getCqService().close();}  }
class C{  public static IStatus validateTypeVariableName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public boolean match(InstanceofExpression node,Object other){  if (!(other instanceof InstanceofExpression)) {    return false;  }  InstanceofExpression o=(InstanceofExpression)other;  return (safeSubtreeMatch(node.getLeftOperand(),o.getLeftOperand()) && safeSubtreeMatch(node.getRightOperand(),o.getRightOperand()));}  }
class C{  private void deleteWorkspace(File workspace,String reason){  try {    FileMisc.forceDelete(workspace);    File token=new File(root,workspace.getName() + OWNER_PATH);    FileMisc.forceDelete(token);  } catch (  Exception e) {    System.err.println("Tried to delete workspace " + workspace.getAbsolutePath() + " because "+ reason);    e.printStackTrace();  }}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public static int indexOf(double[] array,double[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  double c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (Double.compare(array[i],c) != 0) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (Double.compare(sub[j],array[k]) != 0) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  void sendNextItem(){  if (!mRunButton.isSelected()) {    return;  }  if (mNextSequenceElement >= MAXSEQUENCE) {    mNextSequenceElement=0;  }  if (mUseField[mNextSequenceElement].isSelected()) {    byte[] m=createPacket(mPacketField[mNextSequenceElement].getText());    mNextEcho=m;    if (m != null) {      cs.sendPacket(m,1);    } else {      log.warn("Message invalid: " + mPacketField[mNextSequenceElement].getText());    }    if (mRunButton.isSelected()) {      startSequenceDelay();    }  } else {    mNextSequenceElement++;    sendNextItem();  }}  }
class C{  void build(){  createButtonsContainer();  createButtons();  createContentContainer();  select(PreferenceWindow.getInstance().getSelectedTab());}  }
class C{  public EigenvalueDecomposition(DoubleMatrix2D A){  Property.DEFAULT.checkSquare(A);  n=A.columns();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=Property.DEFAULT.isSymmetric(A);  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A.getQuick(i,j);      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A.getQuick(i,j);      }    }    orthes();    hqr2();  }}  }
class C{  public static <K,V,M extends SortedMap<K,V>>SynchronizedSortedMap<K,V> of(M map){  return new SynchronizedSortedMap<>(SortedMapAdapter.adapt(map));}  }
class C{  public static void applyWMRule(Collection<MWMInOutBound> lines,String boundType){  for (  MWMInOutBound line : lines) {    for (    MWMDefinition definition : MWMDefinition.getAll(line.getCtx(),line.get_TrxName())) {      WMRuleEngine.validateDefinition(line,definition,boundType);    }  }}  }
class C{  public static byte[] signConversion(int n,int t,byte[] m){  if (n < t) {    throw new IllegalArgumentException("n < t");  }  BigInteger bc=IntegerFunctions.binomial(n,t);  int s=bc.bitLength() - 1;  int sq=s >> 3;  int sr=s & 7;  if (sr == 0) {    sq--;    sr=8;  }  int nq=n >> 3;  int nr=n & 7;  if (nr == 0) {    nq--;    nr=8;  }  byte[] data=new byte[nq + 1];  if (m.length < data.length) {    System.arraycopy(m,0,data,0,m.length);    for (int i=m.length; i < data.length; i++) {      data[i]=0;    }  } else {    System.arraycopy(m,0,data,0,nq);    int h=(1 << nr) - 1;    data[nq]=(byte)(h & m[nq]);  }  BigInteger d=ZERO;  int nn=n;  int tt=t;  for (int i=0; i < n; i++) {    bc=(bc.multiply(new BigInteger(Integer.toString(nn - tt)))).divide(new BigInteger(Integer.toString(nn)));    nn--;    int q=i >>> 3;    int r=i & 7;    r=1 << r;    byte e=(byte)(r & data[q]);    if (e != 0) {      d=d.add(bc);      tt--;      if (nn == tt) {        bc=ONE;      } else {        bc=(bc.multiply(new BigInteger(Integer.toString(tt + 1)))).divide(new BigInteger(Integer.toString(nn - tt)));      }    }  }  byte[] result=new byte[sq + 1];  byte[] help=d.toByteArray();  if (help.length < result.length) {    System.arraycopy(help,0,result,0,help.length);    for (int i=help.length; i < result.length; i++) {      result[i]=0;    }  } else {    System.arraycopy(help,0,result,0,sq);    result[sq]=(byte)(((1 << sr) - 1) & help[sq]);  }  return result;}  }
class C{  public boolean isInline(){  return label.isInline();}  }
class C{  public boolean isSetCount(){  return EncodingUtils.testBit(__isset_bitfield,__COUNT_ISSET_ID);}  }
class C{  public String removeValue(Field field){  return removeValue(field.getName());}  }
class C{  public ClientMessage request(final ClientMessage request) throws Exception {  return request(request,0);}  }
class C{  public static boolean isXML11ValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isXML11ValidNCName(prefix) && isXML11ValidNCName(localPart);  } else {    return isXML11ValidNCName(str);  }}  }
class C{  public <T extends GeoVisibleResource>List<URI> queryByType(Class<T> clazz,boolean activeOnly,URI startId,int maxCount) throws Exception {  WebResource rRoot=createRequest(GEOVISIBLE_URI + clazz.getName()).queryParam("active_only",Boolean.toString(activeOnly));  if (startId != null) {    rRoot=rRoot.queryParam("start_id",startId.toString());  }  if (maxCount > 0) {    rRoot=rRoot.queryParam("max_count",Integer.toString(maxCount));  }  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).get(ClientResponse.class);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  @SuppressWarnings("rawtypes") ResourcesResponse resources=(ResourcesResponse)objInputStream.readObject();  @SuppressWarnings("unchecked") List<URI> ids=resources.getObjects();  return ids;}  }
class C{  void addChangeListener(ChangeListener changeListener){  this.changeListeners.add(changeListener);}  }
class C{  protected int addToDistinctPerturbations(int[][] sets,int n,int setNumber,int[] workingSet,int fromIndex,Vector<Integer> availableChoices){  if (fromIndex == n) {    System.arraycopy(workingSet,0,sets[setNumber],0,n);    setNumber++;  } else {    Vector<Integer> copyOfAvailableChoices=(Vector<Integer>)availableChoices.clone();    for (    Integer nextInteger : copyOfAvailableChoices) {      int nextInt=nextInteger.intValue();      workingSet[fromIndex]=nextInt;      availableChoices.remove(nextInteger);      setNumber=addToDistinctPerturbations(sets,n,setNumber,workingSet,fromIndex + 1,availableChoices);      availableChoices.add(nextInteger);    }  }  return setNumber;}  }
class C{  List<TimeSlice> relevantTimeSlices(BillingInput input,long startTimeForPeriod,long endTimeForPeriod,PricingPeriod period){  List<TimeSlice> timeSlices=new ArrayList<TimeSlice>();  TimeSlice timeSlice=lastPeriodTimeSlice(endTimeForPeriod,input.getBillingPeriodEnd(),period);  long timeForBeginningOfTimeSlices=PricingPeriodDateConverter.getStartTime(input.getBillingPeriodStart(),period).getTimeInMillis();  if (timeForBeginningOfTimeSlices < startTimeForPeriod) {    timeForBeginningOfTimeSlices=startTimeForPeriod;  }  while (timeSlice.getEnd() > timeForBeginningOfTimeSlices) {    timeSlices.add(timeSlice);    timeSlice=timeSlice.previous();  }  return timeSlices;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EXECUTE_CLAUSE___TRACE_EXECUTE_1:    return getTrace_execute_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private Map<Id<Node>,Node> findCluster(final Node startNode,final Network network){  final Map<Node,DoubleFlagRole> nodeRoles=new HashMap<>(network.getNodes().size());  ArrayList<Node> pendingForward=new ArrayList<>();  ArrayList<Node> pendingBackward=new ArrayList<>();  TreeMap<Id<Node>,Node> clusterNodes=new TreeMap<>();  clusterNodes.put(startNode.getId(),startNode);  DoubleFlagRole r=getDoubleFlag(startNode,nodeRoles);  r.forwardFlag=true;  r.backwardFlag=true;  pendingForward.add(startNode);  pendingBackward.add(startNode);  while (pendingForward.size() > 0) {    int idx=pendingForward.size() - 1;    Node currNode=pendingForward.remove(idx);    for (    Link link : currNode.getOutLinks().values()) {      Node node=link.getToNode();      r=getDoubleFlag(node,nodeRoles);      if (!r.forwardFlag) {        r.forwardFlag=true;        pendingForward.add(node);      }    }  }  while (pendingBackward.size() > 0) {    int idx=pendingBackward.size() - 1;    Node currNode=pendingBackward.remove(idx);    for (    Link link : currNode.getInLinks().values()) {      Node node=link.getFromNode();      r=getDoubleFlag(node,nodeRoles);      if (!r.backwardFlag) {        r.backwardFlag=true;        pendingBackward.add(node);        if (r.forwardFlag) {          clusterNodes.put(node.getId(),node);        }      }    }  }  return clusterNodes;}  }
class C{  public boolean isDeprecatedValueTrue(){  return "true".equalsIgnoreCase(childElementNameList);}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public static void main(String[] args) throws Exception {  CommandLine cmd=getCommandLine(args);  if (cmd.hasOption("verbose")) {    verbose=true;  }  if (cmd.hasOption("help")) {    processCommandAndExit("?list");    return;  }  ActorSystem actorSystem=ActorSystem.create("SignerConsole",ConfigFactory.load().getConfig("signer-console"));  try {    SignerClient.init(actorSystem);    String[] arguments=cmd.getArgs();    if (arguments.length > 0) {      processCommandAndExit(StringUtils.join(arguments," "));    } else {      startCommandLoop();    }  }  finally {    actorSystem.shutdown();  }}  }
class C{  private void printResultNames(ResultProducer rp) throws Exception {  String[] key=rp.getKeyNames();  for (int i=0; i < key.length; i++) {    if (i != 0) {      m_Out.print(',');    }    if (key[i] == null) {      m_Out.print("?");    } else {      m_Out.print("Key_" + key[i].toString());    }  }  String[] result=rp.getResultNames();  for (  String element : result) {    m_Out.print(',');    if (element == null) {      m_Out.print("?");    } else {      m_Out.print(element.toString());    }  }  m_Out.println("");}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (target.equals("xml-stylesheet")) {    String href=null;    String type=null;    String title=null;    String media=null;    String charset=null;    boolean alternate=false;    StringTokenizer tokenizer=new StringTokenizer(data," \t=\n",true);    boolean lookedAhead=false;    Source source=null;    String token="";    while (tokenizer.hasMoreTokens()) {      if (!lookedAhead)       token=tokenizer.nextToken(); else       lookedAhead=false;      if (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))       continue;      String name=token;      if (name.equals("type")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        type=token.substring(1,token.length() - 1);      } else       if (name.equals("href")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        href=token;        if (tokenizer.hasMoreTokens()) {          token=tokenizer.nextToken();          while (token.equals("=") && tokenizer.hasMoreTokens()) {            href=href + token + tokenizer.nextToken();            if (tokenizer.hasMoreTokens()) {              token=tokenizer.nextToken();              lookedAhead=true;            } else {              break;            }          }        }        href=href.substring(1,href.length() - 1);        try {          if (m_uriResolver != null) {            source=m_uriResolver.resolve(href,m_baseID);          } else {            href=SystemIDResolver.getAbsoluteURI(href,m_baseID);            source=new SAXSource(new InputSource(href));          }        } catch (        TransformerException te) {          throw new org.xml.sax.SAXException(te);        }      } else       if (name.equals("title")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        title=token.substring(1,token.length() - 1);      } else       if (name.equals("media")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        media=token.substring(1,token.length() - 1);      } else       if (name.equals("charset")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        charset=token.substring(1,token.length() - 1);      } else       if (name.equals("alternate")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        alternate=token.substring(1,token.length() - 1).equals("yes");      }    }    if ((null != type) && (type.equals("text/xsl") || type.equals("text/xml") || type.equals("application/xml+xslt")) && (null != href)) {      if (null != m_media) {        if (null != media) {          if (!media.equals(m_media))           return;        } else         return;      }      if (null != m_charset) {        if (null != charset) {          if (!charset.equals(m_charset))           return;        } else         return;      }      if (null != m_title) {        if (null != title) {          if (!title.equals(m_title))           return;        } else         return;      }      m_stylesheets.addElement(source);    }  }}  }
class C{  BinaryTree<Integer> buildComplete(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  int b=(int)Math.pow(2,n - 1);  for (int i=0; i < n; i++) {    bt.insert(b);    for (int j=1; j <= Math.pow(2,i) - 1; j++) {      bt.insert(b + 2 * b * j);    }    b=b / 2;  }  return bt;}  }
class C{  public void testArrive1(){  Phaser phaser=new Phaser(1);  assertState(phaser,0,1,1);  assertEquals(0,phaser.arrive());  assertState(phaser,1,1,1);}  }
class C{  public ColumnEntry(int col,Column column,ColumnMetadata metadata){  this.colnum=col;  this.column=column;  this.metadata=metadata;  this.index=null;}  }
class C{  public boolean isSendTargetsDiscoverySettable(){  return sendTargetsDiscoverySettable;}  }
class C{  public static byte[] encryptMySQLPassword(String password,byte[] seed){  if (password == null || password.equals("")) {    return new byte[0];  }  MessageDigest digest=null;  try {    digest=MessageDigest.getInstance("SHA-1");  } catch (  NoSuchAlgorithmException e) {    logger.error("Cannot encrypt password",e);    return new byte[0];  }  byte[] stage1_hash=digest.digest(password.getBytes());  digest.reset();  byte[] sha1_stage1=digest.digest(stage1_hash);  digest.reset();  digest.update(seed);  digest.update(sha1_stage1);  byte[] finalSha1=digest.digest();  byte[] token=new byte[finalSha1.length];  for (int i=0; i < finalSha1.length; i++) {    token[i]=(byte)(stage1_hash[i] ^ finalSha1[i]);  }  return token;}  }
class C{  public void removeRelation(String fieldName,PersistentResource removeResource){  Object relation=getValueUnchecked(fieldName);  Object original=relation;  Object modified=null;  if (relation instanceof Collection) {    original=copyCollection((Collection)relation);  }  if (relation instanceof Collection && removeResource != null) {    modified=CollectionUtils.disjunction((Collection)relation,Collections.singleton(removeResource.getObject()));  }  checkFieldAwarePermissions(UpdatePermission.class,fieldName,modified,original);  if (relation instanceof Collection) {    if (!((Collection)relation).contains(removeResource.getObject())) {      return;    }    delFromCollection((Collection)relation,fieldName,removeResource,false);  } else {    if (relation == null || !relation.equals(removeResource.getObject())) {      return;    }    this.nullValue(fieldName,removeResource);  }  if (hasInverseRelation(fieldName)) {    deleteInverseRelation(fieldName,removeResource.getObject());    removeResource.markDirty();  }  if (original != modified && original != null && !original.equals(modified)) {    this.markDirty();  }}  }
class C{  @Override public void contributeToToolBar(IToolBarManager toolBarManager){  toolBarManager.add(new Separator("eip-settings"));  toolBarManager.add(new Separator("eip-additions"));}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  static public final float norm(float value,float start,float stop){  return (value - start) / (stop - start);}  }
class C{  public void replaceFromToWithFrom(int from,int to,ObjectArrayList other,int otherFrom){  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size);    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size);    System.arraycopy(other.elements,otherFrom,elements,from,length);  }}  }
class C{  public HistoricalTableLookupStrategy makeOuterJoinStategy(Viewable[] streamViews,int pollingStreamNum,HistoricalStreamIndexList[] historicalStreamIndexLists){  Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy> pair=historicalStreamIndexLists[streamNum].getStrategy(pollingStreamNum);  HistoricalEventViewable viewable=(HistoricalEventViewable)streamViews[streamNum];  return new HistoricalTableLookupStrategy(viewable,pair.getSecond(),pair.getFirst(),numStreams,streamNum,rootStreamNum,outerJoinExprNode == null ? null : outerJoinExprNode.getExprEvaluator());}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  protected void transcode(Document document,String uri,TranscoderOutput output) throws TranscoderException {  super.transcode(document,uri,output);  theCtx=ctx;  ctx=null;}  }
class C{  protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  double width=constraint.getWidth() / this.columns;  RectangleConstraint bc=constraint.toFixedWidth(width);  List blocks=container.getBlocks();  double maxH=0.0;  for (int r=0; r < this.rows; r++) {    for (int c=0; c < this.columns; c++) {      int index=r * this.columns + c;      if (index >= blocks.size()) {        break;      }      Block b=(Block)blocks.get(index);      if (b != null) {        Size2D s=b.arrange(g2,bc);        maxH=Math.max(maxH,s.getHeight());      }    }  }  RectangleConstraint cc=constraint.toFixedHeight(maxH * this.rows);  return arrange(container,g2,cc);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static TextEdit format2(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  return format2(kind,source,0,source.length(),indentationLevel,lineSeparator,options);}  }
class C{  public static <U,W>UnsafeReferenceFieldUpdater<U,W> newReferenceFieldUpdater(Class<? super U> tClass,String fieldName){  try {    return new UnsafeReferenceFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    JUnsafe.throwException(t);  }  return null;}  }
class C{  private void terminateAnyRestoreSessionsForVolume(StorageSystem storage,BlockObject volume,TaskCompleter taskCompleter) throws Exception {  if (storage.checkIfVmax3()) {    terminateAnyRestoreSessions(storage,null,volume.getId(),taskCompleter);    return;  }  NamedElementQueryResultList snapshots=new NamedElementQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volume.getId()),snapshots);  for (  NamedElementQueryResultList.NamedElement ne : snapshots) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,ne.getId());    if (snapshot != null && !snapshot.getInactive()) {      CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,snapshot);      if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {        terminateAnyRestoreSessions(storage,volume,snapshot.getId(),taskCompleter);      }    }  }}  }
class C{  public PipedInputStream(PipedOutputStream src) throws IOException {  this(src,DEFAULT_PIPE_SIZE);}  }
class C{  public ChildLocator(){  lastAlloc=new Rectangle();  childAlloc=new Rectangle();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_constraintExpr_1_();}  }
class C{  public void timesEquals(double A){  N.timesEquals(A);}  }
class C{  @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object input,final Arguments init,final CreateStatement statement){  final IAddressableContainer<Integer,GamaShape,Integer,GamaShape> container=(IAddressableContainer<Integer,GamaShape,Integer,GamaShape>)input;  final int num=max == null ? container.length(scope) : CmnFastMath.min(container.length(scope),max);  for (int i=0; i < num; i++) {    final GamaShape g=container.get(scope,i);    final Map map=g.getOrCreateAttributes();    map.put(IKeyword.SHAPE,g);    statement.fillWithUserInit(scope,map);    inits.add(map);  }  return true;}  }
class C{  public void hide(){  Component component=getComponent();  if (component instanceof JWindow) {    component.hide();    ((JWindow)component).getContentPane().removeAll();  }  dispose();}  }
class C{  @Field(43) public Pointer<Integer> pintVal(){  return this.io.getPointerField(this,43);}  }
class C{  public CSSOMSVGStyleDeclaration(ValueProvider vp,CSSRule parent,CSSEngine eng){  super(vp,parent);  cssEngine=eng;}  }
class C{  public SearchSourceBuilder fetchSource(@Nullable String[] includes,@Nullable String[] excludes){  fetchSourceContext=new FetchSourceContext(includes,excludes);  return this;}  }
class C{  public void testFloatValueNegMantissaIsZero(){  byte[] a={1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  private void drawText(final Point buttonSize){  gc.setForeground(getForeground());  gc.setBackground(getBackground());  final int widgetHeight=this.computeSize(0,0,true).y;  final int textHeight=gc.stringExtent(text).y;  final int x=2 + buttonSize.x + gap;  gc.drawString(text,x,(widgetHeight - textHeight) / 2);}  }
class C{  public boolean isSealed(){synchronized (lock) {    return sealed;  }}  }
class C{  public String nativeSQL(String sql) throws SQLException {  if (sql == null) {    return null;  }  Object escapedSqlResult=EscapeProcessor.escapeSQL(sql,serverSupportsConvertFn(),getMultiHostSafeProxy());  if (escapedSqlResult instanceof String) {    return (String)escapedSqlResult;  }  return ((EscapeProcessorResult)escapedSqlResult).escapedSql;}  }
class C{  @Override public int calculateBattleValue(){  return calculateBattleValue(false,false);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SexecPackage.REACTION__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public final void writeChars(String s) throws IOException {  int len=s.length();  if (len > 0) {    for (int i=0; i < len; i++) {      this.buffer.putChar(s.charAt(i));    }  }}  }
class C{  public static void validateCacheKey(@Nullable Object key){  if (key == null)   return;  if (!U.overridesEqualsAndHashCode(key))   throw new IllegalArgumentException("Cache key must override hashCode() and equals() methods: " + key.getClass().getName());  if (U.isHashCodeEmpty(key))   throw new IllegalArgumentException("Cache key created with BinaryBuilder is missing hash code - " + "please set it explicitly during building by using BinaryBuilder.hashCode(int)");}  }
class C{  public Integer loadIdValue(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdValue");  _id=statement.getLongInteger(index++);  return new Integer(index);}  }
class C{  public boolean isSessionAffinityEnabled(){  return getModel().isSessionAffinityEnabled();}  }
class C{  public static Function<String,String> fold(final int width,final String lineSeparator){  Objects.requireNonNull(lineSeparator,"The line separator must not be null");  if (width < 1) {    throw new IllegalArgumentException("Width must be >= 1");  }  return null;}  }
class C{  public String globalInfo(){  return "Class implementing an Apriori-type algorithm. Iteratively reduces " + "the minimum support until it finds the required number of rules with " + "the given minimum confidence.\n"+ "The algorithm has an option to mine class association rules. It is "+ "adapted as explained in the second reference.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XString(str().substring(beginIndex,endIndex));}  }
class C{  public static Line fromSegment(Vec4 pa,Vec4 pb){  return new Line(pa,new Vec4(pb.x - pa.x,pb.y - pa.y,pb.z - pa.z,0));}  }
class C{  public RegexpQueryBuilder maxDeterminizedStates(int value){  this.maxDeterminizedStates=value;  this.maxDetermizedStatesSet=true;  return this;}  }
class C{  public SocketFactory socketFactory(){  return socketFactory;}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  private void startAnimation(long time,OverviewAnimationType type,int sourceIndex,boolean finishImmediately){  startAnimation(time,type,mTabModel.index(),sourceIndex,finishImmediately);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public void commit() throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Committing transaction");  connection.commit();}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public boolean editInlineCaption(String inlineMessageId,String caption,InlineReplyMarkup inlineReplyMarkup){  if (caption != null && inlineReplyMarkup != null) {    JSONObject jsonResponse=this.editMessageCaption(null,null,inlineMessageId,caption,inlineReplyMarkup);    if (jsonResponse != null) {      if (jsonResponse.getBoolean("result"))       return true;    }  }  return false;}  }
class C{  public static int leastSignificantBit(final long x){  if (x == 0)   return -1;  if ((x & 0xFF) != 0)   return BYTELSB[(int)(x & 0xFF)];  if ((x & 0xFFFF) != 0)   return BYTELSB[(int)(x >>> 8 & 0xFF)] + 8;  if ((x & 0xFFFFFF) != 0)   return BYTELSB[(int)(x >>> 16 & 0xFF)] + 16;  if ((x & 0xFFFFFFFFL) != 0)   return BYTELSB[(int)(x >>> 24 & 0xFF)] + 24;  if ((x & 0xFFFFFFFFFFL) != 0)   return BYTELSB[(int)(x >>> 32 & 0xFF)] + 32;  if ((x & 0xFFFFFFFFFFFFL) != 0)   return BYTELSB[(int)(x >>> 40 & 0xFF)] + 40;  if ((x & 0xFFFFFFFFFFFFFFL) != 0)   return BYTELSB[(int)(x >>> 48 & 0xFF)] + 48;  return BYTELSB[(int)(x >>> 56 & 0xFF)] + 56;}  }
class C{  public boolean hasFormat(){  return format != null;}  }
class C{  public DoubleMatrix jblas_SPDValues(double[][] Aimag){  return org.jblas.Singular.SVDValues(new ComplexDoubleMatrix(new DoubleMatrix(this.getArray()),new DoubleMatrix(Aimag)));}  }
class C{  @Override public void gamePhaseChange(final GamePhaseChangeEvent e){  if (isIgnoringEvents()) {    return;  }  if (clientgui.getClient().isMyTurn() && (clientgui.getClient().getGame().getPhase() != IGame.Phase.PHASE_SET_ARTYAUTOHITHEXES)) {    endMyTurn();  }  if (clientgui.getClient().getGame().getPhase() == IGame.Phase.PHASE_SET_ARTYAUTOHITHEXES) {    setStatusBarText(Messages.getString("SelectArtyAutoHitHexDisplay.waitingMinefieldPhase"));  }}  }
class C{  public Axis asAxis(ExpressionAST expression) throws ScopeException {  if (expression instanceof AxisExpression) {    return ((AxisExpression)expression).getAxis();  } else {    IDomain source=expression.getSourceDomain();    Object adapter=source.getAdapter(Domain.class);    if (adapter != null && adapter instanceof Domain) {      Domain domain=(Domain)adapter;      IDomain image=expression.getImageDomain();      if (image.isInstanceOf(IDomain.INTRINSIC)) {        return new Axis(S(domain),expression);      }    }  }  return null;}  }
class C{  public void evaluate(Tag tag) throws EvaluatorException {}  }
class C{  public LeadingZerosException(String message,String issueCode,INode node,BigDecimal value){  super(message,issueCode,node,value,null);}  }
class C{  public Sequence(Integer sequence){  super(sequence);}  }
class C{  public static void println(ErrorMessages message,String data){  if (Options.verbose) {    out.println(ErrorMessages.get(message,data));  }}  }
class C{  public Author(){  super(KEY);}  }
class C{  protected AxisState drawAxis(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea){  return getAxis().draw(g2,dataArea.getMinY(),plotArea,dataArea,RectangleEdge.TOP,null);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  try {    if (qName.equals("overviews")) {      if (packages.size() > 0) {        writer.newLine();        writer.write("<packages>");        for (Iterator iterator=packages.iterator(); iterator.hasNext(); ) {          PackageInfo info=(PackageInfo)iterator.next();          writer.newLine();          writer.write("<package name=\"" + info.name + "\">");          writer.newLine();          writer.write("<shortDescription>" + info.description + "</shortDescription>");          writer.write("<longDescription>" + info.description + "</longDescription>");          writer.newLine();          writer.write("</package>");        }        writer.newLine();        writer.write("</packages>");      }    }    writer.write("</" + qName + ">");  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  protected AbstractQuery(){  super();}  }
class C{  public boolean hasPayload(){  return (payload == null) ? false : payload.hasPayload();}  }
class C{  @Inject public GitOutputConsolePresenter(GitOutputPartView view,GitResources resources,AppContext appContext,GitLocalizationConstant locale,@Assisted String title){  this.view=view;  this.view.setDelegate(this);  this.title=title;  this.resources=resources;  final Project project=appContext.getRootProject();  if (project != null) {    view.print(locale.consoleProjectName(project.getName()) + "\n");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sysMsg=getSysMsg(stack);  if (sysMsg != null && Permissions.hasPermission(Permissions.PERMISSION_SYSTEMMESSAGE,stack.getUIMgr())) {    sage.msg.MsgManager.getInstance().removeSystemMessage(sysMsg);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.SYSTEM_MESSAGE_REMOVED,new Object[]{sage.plugin.PluginEventManager.VAR_SYSTEMMESSAGE,sysMsg});  }  return null;}  }
class C{  public static String createTestPtTravelTimesAndDistancesCSVFile(File file){  try (BufferedWriter bw=IOUtils.getBufferedWriter(file.getCanonicalPath())){    for (int origin=1; origin <= 4; origin++) {      for (int destination=1; destination <= 4; destination++) {        if (origin == destination) {          bw.write(origin + " " + destination+ " 0");          bw.newLine();        } else {          bw.write(origin + " " + destination+ " 100");          bw.newLine();        }      }    }    bw.flush();    return file.getCanonicalPath();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void run(){  object.call(object,args);}  }
class C{  public static int startDownloadServiceIfRequired(Context context,PendingIntent notificationClient,Class<?> serviceClass) throws NameNotFoundException {  return DownloaderService.startDownloadServiceIfRequired(context,notificationClient,serviceClass);}  }
class C{  public void manageList(List<Span> spans){  managedLists.add(spans);}  }
class C{  public CDebuggersModel(final IDatabase database){  m_database=Preconditions.checkNotNull(database,"IE01969: Database argument can't be null");  final DebuggerTemplateManager debuggerManager=m_database.getContent().getDebuggerTemplateManager();  debuggerManager.addListener(m_debuggerManagerListener);  for (  final DebuggerTemplate debugger : debuggerManager) {    debugger.addListener(m_debuggerListener);  }}  }
class C{  protected static CoordinatorClient connectClient() throws Exception {  CoordinatorClientImpl client=new CoordinatorClientImpl();  client.setZkConnection(createConnection(10 * 1000));  client.setInetAddessLookupMap(createLocalInetAddressLookupMap());  client.setVdcShortId("vdc1");  client.start();  return client;}  }
class C{  public static String toHexString(ByteBuffer buffer,int size){  return toHexString(buffer,0,size);}  }
class C{  public void connect(NetworkInterface anotherInterface){  if (isScanning() && anotherInterface.getHost().isRadioActive() && isWithinRange(anotherInterface)&& !isConnected(anotherInterface)&& (this != anotherInterface)) {    Connection con=new VBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface);    connect(con,anotherInterface);  }}  }
class C{  public void onShowToast(String msg,int duration){  showToast(msg,duration);}  }
class C{  public void hashProfile(String msg,int value,int elapsed){  HashedMessageStep step=new HashedMessageStep();  step.hash=DataProxy.sendHashedMessage(msg);  step.value=value;  step.time=elapsed;  step.start_time=(int)(System.currentTimeMillis() - ctx.startTime);  if (ctx.profile_thread_cputime) {    step.start_cpu=(int)(SysJMX.getCurrentThreadCPU() - ctx.startCpu);  }  ctx.profile.add(step);}  }
class C{  private void loadDatabase() throws NoSuperUserException, CouldNotOpenDatabaseException {  if (!SuperUser.askForPermissions())   throw new NoSuperUserException();  closeDatabase();  if (!SuperUserTools.fileCopy(getDatabasePath(),getTempDatabasePath()))   throw new CouldNotOpenDatabaseException();  try {    mDatabase=SQLiteDatabase.openDatabase(getTempDatabasePath(),null,SQLiteDatabase.OPEN_READONLY);  } catch (  SQLException e) {    throw new CouldNotOpenDatabaseException();  }}  }
class C{  @Override public void cloudletFinish(ResCloudlet rcl){  rcl.setCloudletStatus(Cloudlet.SUCCESS);  rcl.finalizeCloudlet();  getCloudletFinishedList().add(rcl);}  }
class C{  protected boolean checkTurnoutsInSection(Section s,int seqNum,Section nextSection,ActiveTrain at,LayoutEditor le,Section prevSection){  return turnoutUtil(s,seqNum,nextSection,at,le,false,false,prevSection);}  }
class C{  private void startTcpServer(ServerSocket ssocket){  serverSocketExecutor.execute(null);}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  public Matrix4x3f reflect(float a,float b,float c,float d){  return reflect(a,b,c,d,this);}  }
class C{  public void store(Element root){  store(root,Xml.TYPES,Xml.TYPE,Xml.CAR_TYPES);}  }
class C{  void noteDefined(Locator locator){  defined=true;  if (whereDefined == null && locator != null)   whereDefined=new LocatorImpl(locator);}  }
class C{  public boolean isMilestone(){  Object oo=get_Value(COLUMNNAME_IsMilestone);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean trim(int inputCapacity){  int newCapacity=inputCapacity > size ? size : inputCapacity;  if (newCapacity < capacity) {    capacity=newCapacity;    size=newCapacity;    copy(newCapacity,newCapacity);    return true;  } else {    return false;  }}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider(),mProv);    checkResult(apG);  }}  }
class C{  static protected void testValidity(Object o){  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new RuntimeException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new RuntimeException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public void testRecognizeRestrictedCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse4=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  responseServer.addMessage(testIResponse4);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.RESTRICTED_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  private static void validateIntegerField(ServiceField field,String value){  if (StringUtils.isNotBlank(value)) {    validateInteger(field.getName(),value);    if (field.getValidation().getMin() != null && new Integer(value) < field.getValidation().getMin()) {      throw APIException.badRequests.serviceFieldBelowMin(field.getName());    }    if (field.getValidation().getMax() != null && new Integer(value) > field.getValidation().getMax()) {      throw APIException.badRequests.serviceFieldAboveMax(field.getName());    }  }}  }
class C{  public boolean isTreadCallback(){  if (mBuilder == null) {    return false;  }  return mBuilder.mIsThreadCallback;}  }
class C{  private boolean confirmChannelChange(String channel){  String message="<html><body style='width:240'>" + "There is currently a commercial scheduled on '" + currentChannel + "'. Changing channel to '"+ channel+ "' will cancel that.";  String[] options=new String[]{"Change channel","Don't change"};  int result=JOptionPane.showOptionDialog(main,message,"Changing channel will cancel commercial",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);  return result == 0;}  }
class C{  public void testBug11237() throws Exception {  this.rs=this.stmt.executeQuery("SHOW VARIABLES LIKE 'max_allowed_packet'");  this.rs.next();  if (this.rs.getInt(2) < 4 + 1024 * 1024 * 16 - 1) {    fail("You need to increase max_allowed_packet to at least " + (4 + 1024 * 1024 * 16 - 1) + " before running this test!");  }  int requiredSize=1024 * 1024 * 300;  int fieldLength=1023;  int loops=requiredSize / 2 / (fieldLength + 1);  File testFile=File.createTempFile("cj-testloaddata",".dat");  testFile.deleteOnExit();  BufferedOutputStream bOut=new BufferedOutputStream(new FileOutputStream(testFile));  for (int i=0; i < loops; i++) {    for (int j=0; j < fieldLength; j++) {      bOut.write("a".getBytes()[0]);    }    bOut.write("\t".getBytes()[0]);    for (int j=0; j < fieldLength; j++) {      bOut.write("b".getBytes()[0]);    }    bOut.write("\n".getBytes()[0]);  }  bOut.flush();  bOut.close();  createTable("testBug11237","(field1 VARCHAR(1024), field2 VARCHAR(1024))");  StringBuilder fileNameBuf=null;  if (File.separatorChar == '\\') {    fileNameBuf=new StringBuilder();    String fileName=testFile.getAbsolutePath();    int fileNameLength=fileName.length();    for (int i=0; i < fileNameLength; i++) {      char c=fileName.charAt(i);      if (c == '\\') {        fileNameBuf.append("/");      } else {        fileNameBuf.append(c);      }    }  } else {    fileNameBuf=new StringBuilder(testFile.getAbsolutePath());  }  Properties props=new Properties();  props.put("useCompression","true");  Connection conn1=getConnectionWithProps(props);  Statement stmt1=conn1.createStatement();  int updateCount=stmt1.executeUpdate("LOAD DATA LOCAL INFILE '" + fileNameBuf.toString() + "' INTO TABLE testBug11237 CHARACTER SET "+ CharsetMapping.getMysqlCharsetForJavaEncoding(((MySQLConnection)this.conn).getEncoding(),(com.mysql.jdbc.Connection)conn1));  assertTrue(updateCount == loops);}  }
class C{  private int addTable(String tableName){  String baseTable=tableName.substring(0,tableName.length() - 4);  String sql="SELECT c.ColumnName " + "FROM AD_Column c" + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) "+ "WHERE t.TableName=?"+ "  AND c.IsTranslated='Y' AND c.IsActive='Y' "+ "ORDER BY c.ColumnName";  ArrayList<String> columns=new ArrayList<String>(5);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,baseTable);    rs=pstmt.executeQuery();    while (rs.next()) {      columns.add(rs.getString(1));    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (columns.size() == 0) {    log.log(Level.SEVERE,"No Columns found for " + baseTable);    return 0;  }  StringBuffer cols=new StringBuffer();  for (int i=0; i < columns.size(); i++)   cols.append(",").append(columns.get(i));  int AD_User_ID=Env.getAD_User_ID(getCtx());  String keyColumn=baseTable + "_ID";  String insert="INSERT INTO " + tableName + "(AD_Language,IsTranslated, AD_Client_ID,AD_Org_ID, "+ "Created,Updated, "+ "Createdby,UpdatedBy, "+ keyColumn+ cols+ ") "+ "SELECT '"+ getAD_Language()+ "','N', AD_Client_ID,AD_Org_ID, SYSDATE, SYSDATE ,"+ AD_User_ID+ ","+ AD_User_ID+ ", "+ keyColumn+ cols+ " FROM "+ baseTable+ " WHERE "+ keyColumn+ " NOT IN (SELECT "+ keyColumn+ " FROM "+ tableName+ " WHERE AD_Language='"+ getAD_Language()+ "')";  int no=DB.executeUpdateEx(insert,null,get_TrxName());  log.fine(tableName + " #" + no);  return no;}  }
class C{  public ExtendedTextSourceLabel(TextSource source,ExtendedTextSourceLabel oldLabel,int offset){  this.source=source;  this.decorator=oldLabel.decorator;  finishInit();}  }
class C{  public CharsetEncoder newEncoder(){  return new Encoder();}  }
class C{  public int failedShards(){  return totalShards - successfulShards;}  }
class C{  private static void printMethodTable(MethodTable methods){  PrettyPrinter printer=new PrettyPrinter(System.out);  for (  Method m : methods.normalMethods()) {    m.accept(printer);  }}  }
class C{  @Override public List<GetLineageByBatchInfo> execute(String[] params){  List<GetLineageByBatchInfo> lineageByBatchInfos;  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String bid=commandLine.getOptionValue("batch-id");    LOGGER.debug("Batch id  is " + bid);    GetLineageByBatchInfo getLineageByBatchInfo=new GetLineageByBatchInfo();    getLineageByBatchInfo.setTargetBatchId(Long.parseLong(bid));    lineageByBatchInfos=lineageByBatchDAO.lineageByBatch(getLineageByBatchInfo);    LOGGER.debug("Details of batch is " + lineageByBatchInfos);    return lineageByBatchInfos;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public void init() throws MessagingException {  String repositoryPath=getInitParameter("repositoryPath");  if (repositoryPath == null) {    throw new MessagingException("repositoryPath is null");  }  headerName=getInitParameter("headerName",HEADER_NAME);  ignoreLocalSender=Boolean.valueOf(getInitParameter("ignoreLocalSender"));  if (ignoreLocalSender) {    log("Will ignore messages coming from local senders");  } else {    log("Will analyze messages coming from local senders");  }  String maxSizeParam=getInitParameter("maxSize");  if (maxSizeParam != null) {    setMaxSize(Integer.parseInt(maxSizeParam));  }  log("maxSize: " + getMaxSize());  String tag=getInitParameter("tagSubject");  if (tag != null && tag.equals("false")) {    tagSubject=false;  }  initDb();  CorpusLoaderThread corpusLoader=new CorpusLoaderThread(this);  corpusLoader.setDaemon(true);  corpusLoader.start();}  }
class C{  public void registerScriptEngineWrapper(ScriptEngineWrapper wrapper){  logger.debug("registerEngineWrapper " + wrapper.getLanguageName() + " : "+ wrapper.getEngineName());  this.engineWrappers.add(wrapper);  setScriptEngineWrapper(getTreeModel().getScriptsNode(),wrapper,wrapper);  setScriptEngineWrapper(getTreeModel().getTemplatesNode(),wrapper,wrapper);  this.loadTemplates(wrapper);  if (scriptUI != null) {    try {      scriptUI.engineAdded(wrapper);    } catch (    Exception e) {      logger.error("An error occurred while notifying ScriptUI:",e);    }  }}  }
class C{  public boolean checkAESKey(KeyParameter aesKey){  keyChainGroupLock.lock();  try {    return keyChainGroup.checkAESKey(aesKey);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void addAll(@NonNull List<T> itemList){synchronized (lock) {    if (items == null) {      items=new ArrayList<>();    }    items.addAll(itemList);  }  if (notifyOnChange) {    if (items.size() - itemList.size() != 0) {      notifyItemRangeChanged(items.size() - itemList.size(),itemList.size());    } else {      notifyDataSetChanged();    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public synchronized boolean isStarted(){  return mStarted;}  }
class C{  public static List read(InStream in) throws IOException {  List records=new ArrayList();  int firstByte=0;  while ((firstByte=in.readUI8()) != 0) {    records.add(new ButtonRecord2(in,firstByte));  }  return records;}  }
class C{  public K higherKey(K key){  while (true) {    K k=map.higherKey(key);    if (k == null || get(k) != null) {      return k;    }    key=k;  }}  }
class C{  public void revalidate(){  setShouldCalcPreferredSize(true);  Form root=getComponentForm();  if (root != null) {    root.layoutContainer();    root.repaint();    if (getParent() != null) {      getParent().layoutContainer();    } else {      layoutContainer();    }  } else {    layoutContainer();    repaint();  }}  }
class C{  public static final double[] resize(double[] a,int size){  if (a.length >= size)   return a;  double[] b=new double[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);  callback.invoke(origin,true,false);}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  public void verifyVisibleHighResIcons(int pageNo){  CellLayout page=getPageAt(pageNo);  if (page != null) {    ShortcutAndWidgetContainer parent=page.getShortcutsAndWidgets();    for (int i=parent.getChildCount() - 1; i >= 0; i--) {      ((BubbleTextView)parent.getChildAt(i)).verifyHighRes();    }  }}  }
class C{  public static Set<String> splitDelimitedString(String string,String delimiter){  Set<String> splitString=new HashSet<>();  StringTokenizer stringTokenizer=new StringTokenizer(string,delimiter);  while (stringTokenizer.hasMoreTokens()) {    splitString.add(stringTokenizer.nextToken());  }  return splitString;}  }
class C{  public static void main(String[] argv){  runFilter(new PartitionMembership(),argv);}  }
class C{  public static String replicaSetNameForPartition(Map<String,?> partition){  return partition != null ? (String)partition.get(REPLICA_SET_NAME) : null;}  }
class C{  public void addToDatePatternPrefs(String datePatternPref,String level){  this.datePatternPrefs.add(datePatternPref);  this.datePatternPrefLevels.add(level);}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("format=" + CUresourceViewFormat.stringFor(format) + f);  sb.append("width=" + width + f);  sb.append("height=" + height + f);  sb.append("depth=" + depth + f);  sb.append("firstMipmapLevel=" + firstMipmapLevel + f);  sb.append("lastMipmapLevel=" + lastMipmapLevel + f);  sb.append("firstLayer=" + firstLayer + f);  sb.append("lastLayer=" + lastLayer + f);  return sb.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.CONDITIONAL_ROUTE__CONDITION:    setCondition(CONDITION_EDEFAULT);  return;case EipPackage.CONDITIONAL_ROUTE__CHANNEL:setChannel((Channel)null);return;}super.eUnset(featureID);}  }
class C{  protected TextFieldEditor(){}  }
class C{  protected void addShape(Rectangle2D rectangle,Declutterable shape){  List<Declutterable> shapeList=this.shapeMap.get(rectangle);  if (shapeList == null) {    shapeList=new ArrayList<Declutterable>(1);    this.shapeMap.put(rectangle,shapeList);    this.rectList.add(rectangle);  }  shapeList.add(shape);}  }
class C{  private static DOMImplementation jaxpDOMImplementation(){  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(true);  DocumentBuilder builder;  try {    builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }  return builder.getDOMImplementation();}  }
class C{  public double width(){  return xmax - xmin;}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private List<String> missingWeapons(final Player player,final boolean hash){  final List<String> result=new LinkedList<String>();  String doneText=player.getQuest(QUEST_SLOT);  if (doneText == null) {    doneText="";  }  final List<String> done=Arrays.asList(doneText.split(";"));  for (  String weapon : neededWeapons) {    if (!done.contains(weapon)) {      if (hash) {        weapon="#" + weapon;      }      result.add(weapon);    }  }  return result;}  }
class C{  @Override public String toString(){  return "ResultProcessStatusResponse{" + "ocrTransaction=" + ocrTransaction + "} "+ super.toString();}  }
class C{  public InvalidParameterSpecException(String msg){  super(msg);}  }
class C{  public int size(){  return count.get();}  }
class C{  public HashMap<String,String> status() throws Exception {  TungstenProperties statusProps=new TungstenProperties();  statusProps.setString(Replicator.SEQNO_TYPE,Replicator.SEQNO_TYPE_LONG);  statusProps.setString(Replicator.VERSION,ManifestParser.parseReleaseWithBuildNumber());  statusProps.setLong(Replicator.APPLIED_LAST_SEQNO,-1);  statusProps.setString(Replicator.APPLIED_LAST_EVENT_ID,"NONE");  statusProps.setLong(Replicator.MIN_STORED_SEQNO,-1);  statusProps.setLong(Replicator.MAX_STORED_SEQNO,-1);  statusProps.setLong(Replicator.LATEST_EPOCH_NUMBER,-1);  statusProps.setDouble(Replicator.APPLIED_LATENCY,-1.0);  statusProps.setDouble(Replicator.RELATIVE_LATENCY,-1.0);  statusProps.setString(Replicator.CURRENT_EVENT_ID,"NONE");  statusProps.setString(Replicator.OFFLINE_REQUESTS,"NONE");  statusProps.setString(Replicator.PIPELINE_SOURCE,"UNKNOWN");  statusProps.setLong(Replicator.CHANNELS,-1);  statusProps.setString(Replicator.TIME_ZONE,TimeZone.getDefault().getID());  ReplicatorRuntime runtime2=runtime;  Pipeline pipeline=null;  List<String> extensions=null;  String type="unknown";  if (runtime2 != null) {    pipeline=runtime2.getPipeline();    extensions=runtime2.getExtensionNames();    type=(runtime2.isRemoteService() ? "remote" : "local");    String pipelineSource=runtime2.getPipelineSource();    if (pipelineSource != null)     statusProps.setString(Replicator.PIPELINE_SOURCE,pipelineSource);  }  ReplDBMSHeader lastEvent=null;  if (pipeline != null) {    lastEvent=pipeline.getLastAppliedEvent();    Extractor headExtractor=pipeline.getHeadExtractor();    String currentEventId=null;    if (headExtractor != null) {      try {        currentEventId=headExtractor.getCurrentResourceEventId();        if (currentEventId != null)         statusProps.setString(Replicator.CURRENT_EVENT_ID,currentEventId);      } catch (      ReplicatorException e) {        statusProps.setString(Replicator.CURRENT_EVENT_ID,"ERROR");        if (logger.isDebugEnabled())         logger.debug("Unable to get current resource event ID",e);      }    }    String offlineRequests=pipeline.getOfflineRequests();    if (offlineRequests.length() > 0)     statusProps.setString(Replicator.OFFLINE_REQUESTS,offlineRequests);    if (lastEvent != null) {      statusProps.setLong(Replicator.APPLIED_LAST_SEQNO,lastEvent.getSeqno());      statusProps.setLong(Replicator.LATEST_EPOCH_NUMBER,lastEvent.getEpochNumber());      statusProps.setString(Replicator.APPLIED_LAST_EVENT_ID,lastEvent.getEventId());      long minStoredSeqno=-1;      long maxStoredSeqno=-1;      try {        minStoredSeqno=pipeline.getMinStoredSeqno();        maxStoredSeqno=pipeline.getMaxStoredSeqno();      } catch (      Exception e) {        if (!(e instanceof NullPointerException)) {          throw e;        }      }      statusProps.setLong(Replicator.MIN_STORED_SEQNO,minStoredSeqno);      statusProps.setLong(Replicator.MAX_STORED_SEQNO,maxStoredSeqno);      statusProps.setDouble(Replicator.APPLIED_LATENCY,pipeline.getApplyLatency());      Timestamp commitTime=lastEvent.getExtractedTstamp();      if (commitTime != null) {        double relativeLatency=((System.currentTimeMillis() - commitTime.getTime()) / 1000.0);        statusProps.setDouble(Replicator.RELATIVE_LATENCY,relativeLatency);      }    }    statusProps.setLong(Replicator.CHANNELS,pipeline.getChannels());  }  if (extensions == null)   statusProps.setString(Replicator.EXTENSIONS,""); else   statusProps.setStringList(Replicator.EXTENSIONS,extensions);  statusProps.setString(Replicator.SERVICE_TYPE,type);  return statusProps.hashMap();}  }
class C{  public void beforeBeanDiscovery(@Observes final BeforeBeanDiscovery event,BeanManager beanManager){  event.addScope(RedirectScoped.class,true,true);  CdiUtils.addAnnotatedTypes(event,beanManager,MvcContextImpl.class,OzarkConfig.class,BindingResultImpl.class,BindingInterceptorImpl.class,ConstraintViolationTranslator.class,Messages.class,ModelsImpl.class,ViewableWriter.class,ViewRequestFilter.class,ViewResponseFilter.class,FaceletsViewEngine.class,JspViewEngine.class,ViewEngineFinder.class,CsrfImpl.class,CsrfProtectFilter.class,CsrfValidateInterceptor.class,EncodersImpl.class,CdiUtils.class,RedirectScopeManager.class,AfterControllerEventImpl.class,AfterProcessViewEventImpl.class,BeforeControllerEventImpl.class,BeforeProcessViewEventImpl.class,ControllerRedirectEventImpl.class,MvcEventImpl.class,LocaleRequestFilter.class,LocaleResolverChain.class,DefaultLocaleResolver.class);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IPAddressName(DerValue derValue) throws IOException {  this(derValue.getOctetString());}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEMorphologyElement(prefix,(AbstractDocument)doc);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  private void importRiskAnalyses(final IProgressMonitor monitor){  Activator.inheritVeriniceContextState();  long importRAStart=System.currentTimeMillis();  ImportRisikoanalysenTask importTask=new ImportRisikoanalysenTask(sourceId);  importTask.execute(ImportTask.TYPE_SQLSERVER,new EclipseProgressMonitorDelegator(monitor));  if (LOG.isDebugEnabled()) {    LOG.debug("Time for ImportRATask:\t" + String.valueOf((System.currentTimeMillis() - importRAStart) / 1000) + " seconds");  }}  }
class C{  public static void assertEqual(Object expected,Object actual,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected.equals(actual),errorMessage);}  }
class C{  BlazeVertexProperty(final BlazeProperty<V> prop,final String id,final BigdataBNode sid){  this.prop=prop;  this.sid=sid;  this.id=id;}  }
class C{  public HighLowItemLabelGenerator(DateFormat dateFormatter,NumberFormat numberFormatter){  if (dateFormatter == null) {    throw new IllegalArgumentException("Null 'dateFormatter' argument.");  }  if (numberFormatter == null) {    throw new IllegalArgumentException("Null 'numberFormatter' argument.");  }  this.dateFormatter=dateFormatter;  this.numberFormatter=numberFormatter;}  }
class C{  public String expandedBody(){  return mExpandedBody;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  HttpServletResponse httpResponse=(HttpServletResponse)response;  if (!httpRequest.getServletPath().matches(excludeUrlPattern)) {    if (containsSamlResponse(httpRequest)) {      httpRequest.setAttribute(Constants.REQ_ATTR_IS_SAML_FORWARD,Boolean.TRUE);      String samlResponse=httpRequest.getParameter("SAMLResponse");      if (samlResponseExtractor.isFromLogout(samlResponse)) {        try {          if (!samlLogoutResponseValidator.responseStatusCodeSuccessful(samlResponse)) {            httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_INVALID_SAML_RESPONSE_STATUS_CODE);            redirector.forward(httpRequest,httpResponse,BaseBean.ERROR_PAGE);            return;          }          HttpSession currentSession=httpRequest.getSession();          getSsl().deletePlatformSession(currentSession.getId());          currentSession.invalidate();          httpRequest.removeAttribute("SAMLResponse");          httpRequest.setAttribute(Constants.REQ_ATTR_IS_SAML_FORWARD,Boolean.FALSE);        } catch (        SAML2StatusCodeInvalidException e) {          httpRequest.setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_INVALID_SAML_RESPONSE);          redirector.forward(httpRequest,httpResponse,BaseBean.ERROR_PAGE);          LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,ERROR_SAML2_INVALID_STATUS_CODE);          return;        }        String relayState=httpRequest.getParameter("RelayState");        if (relayState != null) {          String forwardUrl=getForwardUrl(httpRequest,relayState);          ((HttpServletResponse)response).sendRedirect(forwardUrl);          return;        }        if (httpRequest.getAttribute(Constants.REQ_ATTR_ERROR_KEY) != null) {          redirector.forward(httpRequest,httpResponse,BaseBean.ERROR_PAGE);          return;        }        httpRequest.setAttribute(Constants.REQ_ATTR_IS_SAML_FORWARD,Boolean.FALSE);      }    }  }  chain.doFilter(request,response);}  }
class C{  public boolean isVmax3Volume(DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,this.getStorageController());  return (storage != null && storage.checkIfVmax3());}  }
class C{  public static ResponseProperties createForbiddenResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_FORBIDDEN,statusMessage);}  }
class C{  public static int binarySearch(char[] array,char value){  return binarySearch(array,0,array.length,value);}  }
class C{  public boolean isEncrypted(){  return getEncryptionType() != EncryptionType.UNENCRYPTED;}  }
class C{  private void writeHead(){  if (!isOpen()) {    return;  }  final String head=getHead();  if (null != head) {    write(head);  }}  }
class C{  @Override @CanIgnoreReturnValue public boolean add(E e){  checkNotNull(e);  if (maxSize == 0) {    return true;  }  if (size() == maxSize) {    delegate.remove();  }  delegate.add(e);  return true;}  }
class C{  public static BytesRef toBytesRef(Object value){  if (value == null) {    return null;  }  if (value instanceof BytesRef) {    return (BytesRef)value;  }  return new BytesRef(value.toString());}  }
class C{  public static Path2D createHeaderShape(int x,int y,int w,int h,boolean isLeftmost,boolean isRightmost){  double rTop=RapidLookAndFeel.CORNER_DEFAULT_RADIUS * 0.33;  Path2D path=new Path2D.Double();  h-=1;  if (!isLeftmost && !isRightmost) {    w-=1;    path.append(new Line2D.Double(x,y,x + w,y),true);    path.append(new Line2D.Double(x + w,y,x + w,y + h),true);    path.append(new Line2D.Double(x + w,y + h,x,y + h),true);    return path;  }  if (isLeftmost && isRightmost) {    w-=1;    path.append(new Line2D.Double(x,y + h - 1,x,y + rTop),true);    QuadCurve2D curve=new QuadCurve2D.Double(x,y + rTop,x,y,x + rTop,y);    path.append(curve,true);    path.append(new Line2D.Double(x + rTop,y,x + w - rTop,y),true);    curve=new QuadCurve2D.Double(x + w - rTop,y,x + w,y,x + w,y + rTop);    path.append(curve,true);    path.append(new Line2D.Double(x + w,y + rTop,x + w,y + h),true);    path.append(new Line2D.Double(x + w,y + h,x,y + h),true);    return path;  }  if (isLeftmost) {    w-=1;    path.append(new Line2D.Double(x,y + h - 1,x,y + rTop),true);    QuadCurve2D curve=new QuadCurve2D.Double(x,y + rTop,x,y,x + rTop,y);    path.append(curve,true);    path.append(new Line2D.Double(x + rTop,y,x + w,y),true);    path.append(new Line2D.Double(x + w,y,x + w,y + h),true);    path.append(new Line2D.Double(x + w,y + h,x,y + h),true);  } else {    w-=1;    path.append(new Line2D.Double(x,y,x + w - rTop,y),true);    QuadCurve2D curve=new QuadCurve2D.Double(x + w - rTop,y,x + w,y,x + w,y + rTop);    path.append(curve,true);    path.append(new Line2D.Double(x + w,y + rTop,x + w,y + h),true);    path.append(new Line2D.Double(x + w,y + h,x,y + h),true);  }  return path;}  }
class C{  private File initCacheDirectory(File cacheDirectory){  try {    if (cacheDirectory == null) {      Path tempDirectory=Files.createTempDirectory(DEFAULT_CACHE_PREFIX);      return tempDirectory.toFile();    } else {      cacheDirectory.mkdirs();      return cacheDirectory;    }  } catch (  IOException e) {    throw new IllegalArgumentException("Unable to create cache directory",e);  }}  }
class C{  public PaymentDeregistrationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public static LastGameInfoOverlay INSTANCE(){  return INSTANCE.get();}  }
class C{  public void divide() throws IOException {  writeCode(DIVIDE);}  }
class C{  private void _save(String type,List<ElasticSearchDoc> docs){  if (docs != null && !docs.isEmpty()) {    try {      RETRY_ES_PUBLISH.call(null);    } catch (    Exception e) {      log.error(String.format("Failed saving metadatas of type %s",type),e);      CounterWrapper.incrementCounter("dse.metacat.esBulkSaveFailure");      List<String> docIds=docs.stream().map(null).collect(Collectors.toList());      log("ElasticSearchUtil.bulkSave",type,docIds.toString(),null,e.getMessage(),e,true);    }  }}  }
class C{  public static ImageSource asset(String assetName){  if (assetName == null) {    throw new NullPointerException("Asset name must not be null");  }  return uri(ASSET_SCHEME + assetName);}  }
class C{  private static void vecswap(long[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public ClientParamsStack(HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  applicationParams=aparams;  clientParams=cparams;  requestParams=rparams;  overrideParams=oparams;}  }
class C{  private void init(SSLContextImpl context,boolean isServer){  sslContext=context;  sess=SSLSessionImpl.nullSession;  handshakeSession=null;  roleIsServer=isServer;  connectionState=cs_START;  receivedCCS=false;  readCipher=CipherBox.NULL;  readAuthenticator=MAC.NULL;  writeCipher=CipherBox.NULL;  writeAuthenticator=MAC.NULL;  secureRenegotiation=false;  clientVerifyData=new byte[0];  serverVerifyData=new byte[0];  enabledCipherSuites=sslContext.getDefaultCipherSuiteList(roleIsServer);  enabledProtocols=sslContext.getDefaultProtocolList(roleIsServer);  inrec=null;  acc=AccessController.getContext();  input=new AppInputStream(this);  output=new AppOutputStream(this);}  }
class C{  public static boolean removeDirectory(String directoryName){  File directory=new File(directoryName);  return removeDirectory(directory,null);}  }
class C{  private String formatNames(String[] names,int startIndex){  StringBuilder sb=new StringBuilder();  if (names != null) {    for (    String name : names) {      sb.append(name.substring(startIndex));      sb.append('\n');    }  }  return sb.toString();}  }
class C{  public synchronized Collection<SnapshotMetaData> listSnapshotsInIndexDir(String indexDirPath){  return nameToDetailsMapping.values().stream().filter(null).collect(Collectors.toList());}  }
class C{  public void expireOffer(Offer o){  this.getSlot(OFFERS_SLOT_NAME).remove(o.getID());  this.getSlot(EXPIRED_OFFERS_SLOT_NAME).add(o);  this.getZone().storeToDatabase();  String itemname="null";  if (o.hasItem()) {    itemname=o.getItem().getName();  }  new GameEvent("market","expire-offer",o.getOfferer(),itemname,o.getPrice().toString()).raise();}  }
class C{  GlobalValueNumberState(IR ir){  B=new ArrayList<GVCongruenceClass>();  workList=new Stack<GVCongruenceClass>();  valueGraph=new ValueGraph(ir);  globalValueNumber();}  }
class C{  public static void close(boolean fromFrame){  boolean minimizeToTray=ApplicationSettings.MINIMIZE_TO_TRAY.getValue();  if (!OSUtils.isMacOSX() && ApplicationSettings.SHOW_HIDE_EXIT_DIALOG.getValue()) {    HideExitDialog dlg=new HideExitDialog(getAppFrame());    dlg.setVisible(true);    int result=dlg.getResult();    if (result == HideExitDialog.NONE) {      return;    } else {      minimizeToTray=result == HideExitDialog.HIDE;    }  }  if (minimizeToTray) {    if (OSUtils.supportsTray()) {      if (ResourceManager.instance().isTrayIconAvailable()) {        applyWindowSettings();        GUIMediator.showTrayIcon();        hideView();      }    }  } else   if (OSUtils.isMacOSX() && fromFrame) {    GUIMediator.setAppVisible(false);  } else {    shutdown();  }}  }
class C{  public static final String trimEnd(String str){  int position=str.length();  while ((position > 0) && Character.isWhitespace(str.charAt(position - 1))) {    position--;  }  return str.substring(0,position);}  }
class C{  Resource standardizeSubtype(Resource resource){  if (resource != null && resource.getSubtype() != null) {    Map<String,String> subtypes=vocabManager.getI18nVocab(Constants.VOCAB_URI_DATASET_SUBTYPES,Locale.ENGLISH.getLanguage(),false);    boolean usesVocab=false;    for (    Map.Entry<String,String> entry : subtypes.entrySet()) {      if (resource.getSubtype().equalsIgnoreCase(entry.getKey())) {        usesVocab=true;      }    }    if (!usesVocab) {      resource.setSubtype(null);    }  }  return resource;}  }
class C{  private void decodeWindowShape(){  for (int i=0; i < numChannels; i++) {    getSubbandFlags(ctx.channels[i].wndShape,ctx.numSubbands);  }}  }
class C{  public Complex tan(){  return sin().divides(cos());}  }
class C{  public static void mergeSort(int[] a,int fromIndex,int toIndex,IntComparator c){  rangeCheck(a.length,fromIndex,toIndex);  int aux[]=(int[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  public final synchronized boolean humansTurn(){  if (game == null)   return false;  return gameMode.humansTurn(game.currPos().whiteMove);}  }
class C{  public void dispose(){  String[] keys=getKeys();  for (  String key : keys) {    remove(key);  }  map.clear();}  }
class C{  private void removeFromPositionsList(List<Position> positions,Position position,boolean orderedByOffset){  int size=positions.size();  int index=computeIndexInPositionList(positions,orderedByOffset ? position.offset : position.offset + position.length - 1,orderedByOffset);  if (index < size && positions.get(index) == position) {    positions.remove(index);    return;  }  int back=index - 1;  int forth=index + 1;  while (back >= 0 || forth < size) {    if (back >= 0) {      if (position == positions.get(back)) {        positions.remove(back);        return;      }      back--;    }    if (forth < size) {      if (position == positions.get(forth)) {        positions.remove(forth);        return;      }      forth++;    }  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  m_resultContentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public static boolean isAccessibleDirectory(Path directory,ESLogger logger){  assert directory != null && logger != null;  if (!Files.exists(directory)) {    logger.debug("[{}] directory does not exist.",directory.toAbsolutePath());    return false;  }  if (!Files.isDirectory(directory)) {    logger.debug("[{}] should be a directory but is not.",directory.toAbsolutePath());    return false;  }  if (!Files.isReadable(directory)) {    logger.debug("[{}] directory is not readable.",directory.toAbsolutePath());    return false;  }  return true;}  }
class C{  public float distance(Vector2f v){  return FastMath.sqrt(distanceSquared(v));}  }
class C{  public static String encode(final int i){  return "i" + Integer.toString(i) + "|";}  }
class C{  public static long sumToLong(byte[] array){  long sum=0;  for (  byte x : array) {    sum+=x;  }  return sum;}  }
class C{  public static void addDependency(Source path){}  }
class C{  public static SQLException createSQLFeatureNotSupportedException(String message,String sqlState,ExceptionInterceptor interceptor) throws SQLException {  SQLException newEx;  if (Util.isJdbc4()) {    newEx=(SQLException)Util.getInstance("java.sql.SQLFeatureNotSupportedException",new Class[]{String.class,String.class},new Object[]{message,sqlState},interceptor);  } else {    newEx=new NotImplemented();  }  return runThroughExceptionInterceptor(interceptor,newEx,null);}  }
class C{  public DataLogicThirdParties(){}  }
class C{  private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {  mInfo.mCurrentBytes=innerState.mBytesSoFar;  mDB.updateDownload(mInfo);  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));  if (lengthMismatched) {    if (cannotResume(innerState)) {      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,"mismatched content length");    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"closed socket before end of file");    }  }}  }
class C{  private int addressFromPacket(){  if (isFree()) {    return -1;  }  if ((payload[0] & 0xC0) == 0xC0) {    return ((payload[0] & 0x3F) << 8 | (payload[1] & 0xFF));  }  return payload[0];}  }
class C{  protected double dCaldO(Vec o){  double max=0;  for (int i=0; i < v.length(); i++) {    double tmp=(i + 1.0) / v.length() - ECDF(o,v.get(i));    max=Math.max(max,Math.abs(tmp));  }  for (int i=0; i < o.length(); i++) {    double tmp=(i + 1.0) / o.length() - ECDF(v,o.get(i));    max=Math.max(max,Math.abs(tmp));  }  return max;}  }
class C{  public void sort(boolean ascending){  if (filter == null) {    filterImpl("");  }  Integer[] filterArray=new Integer[filter.size()];  Integer[] tempArray=new Integer[filter.size()];  for (int iter=0; iter < filter.size(); iter++) {    filterArray[iter]=filter.get(iter);  }  System.arraycopy(filterArray,0,tempArray,0,filterArray.length);  mergeSort(filterArray,tempArray,0,filterArray.length,0,ascending);  for (int iter=0; iter < filter.size(); iter++) {    filter.set(iter,tempArray[iter]);  }  dataChanged(DataChangedListener.CHANGED,-1);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CFunctionContainer(final INaviModule module,final List<INaviFunction> functions){  m_module=Preconditions.checkNotNull(module,"IE02399: module argument can not be null");  m_functions=new FilledList<INaviFunction>(Preconditions.checkNotNull(functions,"IE02400: functions argument can not be null"));  for (  final INaviFunction function : functions) {    m_functionMap.put(function.getAddress(),function);  }  for (  final INaviFunction function : functions) {    function.addListener(m_functionListener);  }}  }
class C{  public AddMarketingPermissionException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public CActionShrinkSelectionUp(final ZyGraph graph){  super("Shrink Selection Up");  m_graph=graph;}  }
class C{  private void init(){  setTitle("New WTA Network");  wtaPanel=new WTAPropertiesPanel(networkPanel);  tabLogic.add(wtaPanel);  layoutPanel=new MainLayoutPanel(false,this);  layoutPanel.setCurrentLayout(WinnerTakeAll.DEFAULT_LAYOUT);  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",tabLayout);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(wtaPanel.getHelpPath());  addButton(new JButton(helpAction));}  }
class C{  protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("basic predict");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("unary");  accepts.add("binary");  accepts.add("nominal");  accepts.add("numeric");  accepts.add("string");  accepts.add("date");  accepts.add("relational");  accepts.add("multi-instance");  accepts.add("not in classpath");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  @Inline public static void initializeHeader(ObjectReference object,boolean initialInc){  Word existingValue=VM.objectModel.readAvailableBitsWord(object);  Word initialValue=existingValue.and(WRITE_MASK).or((initialInc) ? INCREMENT : Word.zero());  VM.objectModel.writeAvailableBitsWord(object,initialValue);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== SourceClip ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("data_definition = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.data_definition[0],this.data_definition[1],this.data_definition[2],this.data_definition[3],this.data_definition[4],this.data_definition[5],this.data_definition[6],this.data_definition[7],this.data_definition[8],this.data_definition[9],this.data_definition[10],this.data_definition[11],this.data_definition[12],this.data_definition[13],this.data_definition[14],this.data_definition[15]));  sb.append(String.format("duration = %d%n",this.duration));  sb.append(String.format("start_position = %d%n",this.start_position));  sb.append(String.format("source_package_id = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.source_package_id[0],this.source_package_id[1],this.source_package_id[2],this.source_package_id[3],this.source_package_id[4],this.source_package_id[5],this.source_package_id[6],this.source_package_id[7],this.source_package_id[8],this.source_package_id[9],this.source_package_id[10],this.source_package_id[11],this.source_package_id[12],this.source_package_id[13],this.source_package_id[14],this.source_package_id[15],this.source_package_id[16],this.source_package_id[17],this.source_package_id[18],this.source_package_id[19],this.source_package_id[20],this.source_package_id[21],this.source_package_id[22],this.source_package_id[23],this.source_package_id[24],this.source_package_id[25],this.source_package_id[26],this.source_package_id[27],this.source_package_id[28],this.source_package_id[29],this.source_package_id[30],this.source_package_id[31]));  sb.append(String.format("source_track_id = 0x%04x(%d)%n",this.source_track_id,this.source_track_id));  return sb.toString();}  }
class C{  private NodeImpl shallowCopy(short operation,Node node){switch (node.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  AttrImpl attrCopy;if (attr.namespaceAware) {  attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());  attrCopy.setPrefix(attr.getPrefix());} else {  attrCopy=createAttribute(attr.getName());}attrCopy.setNodeValue(attr.getValue());return attrCopy;case Node.CDATA_SECTION_NODE:return createCDATASection(((CharacterData)node).getData());case Node.COMMENT_NODE:return createComment(((Comment)node).getData());case Node.DOCUMENT_FRAGMENT_NODE:return createDocumentFragment();case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot copy node of type " + node.getNodeType());case Node.ELEMENT_NODE:ElementImpl element=(ElementImpl)node;ElementImpl elementCopy;if (element.namespaceAware) {elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName());elementCopy.setPrefix(element.getPrefix());} else {elementCopy=createElement(element.getTagName());}NamedNodeMap attributes=element.getAttributes();for (int i=0; i < attributes.getLength(); i++) {AttrImpl elementAttr=(AttrImpl)attributes.item(i);AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr);notifyUserDataHandlers(operation,elementAttr,elementAttrCopy);if (elementAttr.namespaceAware) {elementCopy.setAttributeNodeNS(elementAttrCopy);} else {elementCopy.setAttributeNode(elementAttrCopy);}}return elementCopy;case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new UnsupportedOperationException();case Node.ENTITY_REFERENCE_NODE:return createEntityReference(node.getNodeName());case Node.PROCESSING_INSTRUCTION_NODE:ProcessingInstruction pi=(ProcessingInstruction)node;return createProcessingInstruction(pi.getTarget(),pi.getData());case Node.TEXT_NODE:return createTextNode(((Text)node).getData());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}}  }
class C{  @Override public boolean onScroll(MotionEvent e1,MotionEvent e2,float distanceX,float distanceY){  int touchSlop=0;  float factor;  if (mOrientation == Orientation.VERTICAL) {    factor=Math.abs((float)(mTranslation) / (float)(that.getHeight()));    if (e2.getY() - mParentPositionY <= that.getHeight() && e2.getY() - mParentPositionY >= 0) {      if ((e2.getY() - mParentPositionY) > that.getHeight() * getAnchorFactor()) {        mTranslation-=(int)distanceY;        touchSlop=distanceY < 0 ? -mTouchSlop : mTouchSlop;      } else {        mTranslation+=(int)distanceY;        touchSlop=distanceY < 0 ? mTouchSlop : -mTouchSlop;      }      mTranslation=mDidNotStartScroll ? mTranslation + touchSlop : mTranslation;      if (mTranslation < -that.getHeight()) {        mTranslation=-that.getHeight();      }    }  } else {    factor=Math.abs(((float)mTranslation) / ((float)that.getWidth()));    if (e2.getRawX() > that.getWidth() * getAnchorFactor()) {      mTranslation-=(int)distanceX;      touchSlop=distanceX < 0 ? -mTouchSlop : mTouchSlop;    } else {      mTranslation+=(int)distanceX;      touchSlop=distanceX < 0 ? mTouchSlop : -mTouchSlop;    }    mTranslation=mDidNotStartScroll ? mTranslation + touchSlop : mTranslation;    if (mTranslation < -that.getWidth()) {      mTranslation=-that.getWidth();    }  }  mDidNotStartScroll=false;  if (mTranslation > 0) {    mTranslation=0;  }  that.setFoldFactor(factor);  return true;}  }
class C{  public void updateConfiguration(){  if (updateConfigTask != null)   updateConfigTask.reschedule(500,TimeUnit.MILLISECONDS);}  }
class C{  public static IBoard generateRandom(MapSettings mapSettings){  int elevationMap[][]=new int[mapSettings.getBoardWidth()][mapSettings.getBoardHeight()];  double sizeScale=(double)(mapSettings.getBoardWidth() * mapSettings.getBoardHeight()) / ((double)(16 * 17));  generateElevation(mapSettings.getHilliness(),mapSettings.getBoardWidth(),mapSettings.getBoardHeight(),mapSettings.getRange() + 1,mapSettings.getProbInvert(),mapSettings.getInvertNegativeTerrain(),elevationMap,mapSettings.getAlgorithmToUse());  IHex[] nb=new IHex[mapSettings.getBoardWidth() * mapSettings.getBoardHeight()];  int index=0;  for (int h=0; h < mapSettings.getBoardHeight(); h++) {    for (int w=0; w < mapSettings.getBoardWidth(); w++) {      if (mapSettings.getMedium() == MapSettings.MEDIUM_SPACE) {        nb[index++]=new Hex(0,"space:1",mapSettings.getTheme(),new Coords(w,h));      } else {        nb[index++]=new Hex(elevationMap[w][h],"",mapSettings.getTheme(),new Coords(w,h));      }    }  }  IBoard result=new Board(mapSettings.getBoardWidth(),mapSettings.getBoardHeight(),nb);  if (mapSettings.getMedium() == MapSettings.MEDIUM_SPACE) {    result.setType(Board.T_SPACE);    return result;  }  HashMap<IHex,Point> reverseHex=new HashMap<IHex,Point>(2 * mapSettings.getBoardWidth() * mapSettings.getBoardHeight());  for (int y=0; y < mapSettings.getBoardHeight(); y++) {    for (int x=0; x < mapSettings.getBoardWidth(); x++) {      reverseHex.put(result.getHex(x,y),new Point(x,y));    }  }  int peaks=mapSettings.getMountainPeaks();  while (peaks > 0) {    peaks--;    int mountainHeight=mapSettings.getMountainHeightMin() + Compute.randomInt(1 + mapSettings.getMountainHeightMax() - mapSettings.getMountainHeightMin());    int mountainWidth=mapSettings.getMountainWidthMin() + Compute.randomInt(1 + mapSettings.getMountainWidthMax() - mapSettings.getMountainWidthMin());    int mapWidth=result.getWidth();    int mapHeight=result.getHeight();    Coords peak=new Coords(mapWidth / 4 + Compute.randomInt((mapWidth + 1) / 2),mapHeight / 4 + Compute.randomInt((mapHeight + 1) / 2));    generateMountain(result,mountainWidth,peak,mountainHeight,mapSettings.getMountainStyle());  }  if (mapSettings.getCliffs() > 0) {    addCliffs(result,mapSettings.getCliffs());  }  int count=mapSettings.getMinForestSpots();  if (mapSettings.getMaxForestSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxForestSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.WOODS,mapSettings.getProbHeavy(),mapSettings.getMinForestSize(),mapSettings.getMaxForestSize(),reverseHex,true);  }  count=mapSettings.getMinRoughSpots();  if (mapSettings.getMaxRoughSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxRoughSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.ROUGH,0,mapSettings.getMinRoughSize(),mapSettings.getMaxRoughSize(),reverseHex,true);  }  count=mapSettings.getMinSandSpots();  if (mapSettings.getMaxSandSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxSandSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.SAND,0,mapSettings.getMinSandSize(),mapSettings.getMaxSandSize(),reverseHex,true);  }  count=mapSettings.getMinPlantedFieldSpots();  if (mapSettings.getMaxPlantedFieldSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxPlantedFieldSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.FIELDS,0,mapSettings.getMinPlantedFieldSize(),mapSettings.getMaxPlantedFieldSize(),reverseHex,true);  }  count=mapSettings.getMinSwampSpots();  if (mapSettings.getMaxSwampSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxSwampSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.SWAMP,0,mapSettings.getMinSwampSize(),mapSettings.getMaxSwampSize(),reverseHex,false);  }  count=mapSettings.getMinFortifiedSpots();  if (mapSettings.getMaxFortifiedSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxFortifiedSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.FORTIFIED,0,mapSettings.getMinFortifiedSize(),mapSettings.getMaxFortifiedSize(),reverseHex,false);  }  count=mapSettings.getMinRubbleSpots();  if (mapSettings.getMaxRubbleSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxRubbleSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.RUBBLE,0,mapSettings.getMinRubbleSize(),mapSettings.getMaxRubbleSize(),reverseHex,true);  }  count=mapSettings.getMinWaterSpots();  if (mapSettings.getMaxWaterSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxWaterSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.WATER,mapSettings.getProbDeep(),mapSettings.getMinWaterSize(),mapSettings.getMaxWaterSize(),reverseHex,true);  }  count=mapSettings.getMinPavementSpots();  if (mapSettings.getMaxPavementSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxPavementSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.PAVEMENT,0,mapSettings.getMinPavementSize(),mapSettings.getMaxPavementSize(),reverseHex,true);  }  count=mapSettings.getMinIceSpots();  if (mapSettings.getMaxIceSpots() > 0) {    count+=Compute.randomInt(mapSettings.getMaxIceSpots());  }  count*=sizeScale;  for (int i=0; i < count; i++) {    placeSomeTerrain(result,Terrains.ICE,0,mapSettings.getMinIceSize(),mapSettings.getMaxIceSize(),reverseHex,true);  }  if (Compute.randomInt(100) < mapSettings.getProbCrater()) {    addCraters(result,mapSettings.getMinRadius(),mapSettings.getMaxRadius(),(int)(mapSettings.getMinCraters() * sizeScale),(int)(mapSettings.getMaxCraters() * sizeScale));  }  if (Compute.randomInt(100) < mapSettings.getProbRiver()) {    addRiver(result,reverseHex);  }  if (Compute.randomInt(100) < mapSettings.getProbFlood()) {    postProcessFlood(nb,mapSettings.getFxMod());  }  if (Compute.randomInt(100) < mapSettings.getProbDrought()) {    postProcessDrought(nb,mapSettings.getFxMod());  }  if (Compute.randomInt(100) < mapSettings.getProbFreeze()) {    postProcessDeepFreeze(nb,mapSettings.getFxMod());  }  if (Compute.randomInt(100) < mapSettings.getProbForestFire()) {    postProcessForestFire(nb,mapSettings.getFxMod());  }  boolean roadNeeded=false;  if (Compute.randomInt(100) < mapSettings.getProbRoad()) {    roadNeeded=true;  }  ArrayList<BuildingTemplate> buildings=mapSettings.getBoardBuildings();  CityBuilder cityBuilder=new CityBuilder(mapSettings,result);  if (buildings.size() == 0) {    buildings=cityBuilder.generateCity(roadNeeded);  }  for (int i=0; i < buildings.size(); i++) {    placeBuilding(result,(buildings.get(i)));  }  return result;}  }
class C{  @Override protected void processRememberedSets(){  logMessage(5,"clearing modbuf");  ObjectReference obj;  while (!(obj=modbuf.pop()).isNull()) {    HeaderByte.markAsUnlogged(obj);  }  logMessage(5,"clearing remset");  while (!remset.isEmpty()) {    remset.pop();  }  logMessage(5,"clearing array remset");  while (!arrayRemset.isEmpty()) {    arrayRemset.pop1();    arrayRemset.pop2();  }}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  public SQLDataException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public List<Node> gather_children(){  List<Node> child_list=new ArrayList<Node>();  NodeList children=node.getChildNodes();  if (children != null) {    for (int ii=0; ii < children.getLength(); ii++) {      Node child=children.item(ii);      if (child.getNodeType() == Node.ELEMENT_NODE) {        child_list.add(child);      }    }  }  return child_list;}  }
class C{  private void remove(){  before.after=after;  after.before=before;}  }
class C{  public ReferToParser(String referTo){  super(referTo);}  }
class C{  public void parse(){  try {    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();    parser.parse(fileName,this);  } catch (  ParserConfigurationException|SAXException|IOException e) {    DelphiUtils.LOG.error(e.getMessage());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.TRACE_NODE_EXECUTED__NODE:    if (resolve)     return getNode();  return basicGetNode();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public JavaIndenter(IDocument document,JavaHeuristicScanner scanner,IJavaProject project){  Assert.isNotNull(document);  Assert.isNotNull(scanner);  fDocument=document;  fScanner=scanner;  fPrefs=new CorePrefs(project);}  }
class C{  @SuppressWarnings("unchecked") public Object[] toArray(Object[] array){  return events.toArray(array);}  }
class C{  String headerToString(){  String pString=principalsToString();  if (pString.length() == 0) {    return codebaseToString();  } else {    return codebaseToString() + ", " + pString;  }}  }
class C{  public final TextBuilder append(double d){  return append(d,-1,(MathLib.abs(d) >= 1E7) || (MathLib.abs(d) < 0.001),false);}  }
class C{  PathSegment(int segType,float x,float y,float len,int idx){  this.segType=segType;  this.x=x;  this.y=y;  this.length=len;  this.index=idx;}  }
class C{  protected void internalAddString(long idx,String s){  strtblByIndex.put(idx,s);  strtblByString.put(s,idx);}  }
class C{  @Override public long extendBy(final long length){  if (length < 0) {    throw new IllegalArgumentException("" + length);  }  final long res=mLength;  final long target=mLength + length;  while (mTotalLength < target) {    final long i=mTotalLength >>> mChunkBits;    if (i >= mArray.length) {      final long newSize=(mArray.length + 1) * 2;      if (newSize > Integer.MAX_VALUE) {        throw new RuntimeException();      }      mArray=Arrays.copyOf(mArray,(int)newSize);    }    final int ii=(int)i;    if (mArray[ii] == null) {      final int size=(int)Math.min(mChunkSize,target);      mArray[ii]=new short[size];      mTotalLength+=size;    } else {      final short[] newSubArray;      final int newLength;      if (mTotalLength < mChunkSize) {        final long threeovertwo=mArray[ii].length * 3L / 2;        final long atLeast=Math.max(threeovertwo,target);        newLength=(int)Math.min(mChunkSize,atLeast);        assert newLength == mChunkSize || newLength == atLeast;      } else {        newLength=mChunkSize;      }      newSubArray=new short[newLength];      final short[] arr=mArray[ii];      final int lenArr=arr.length;      System.arraycopy(arr,0,newSubArray,0,lenArr);      mTotalLength+=newLength - lenArr;      mArray[ii]=newSubArray;    }  }  mLength=target;  assert integrity();  return res;}  }
class C{  private boolean computeAnyVisible(Viewer viewer,Object[] elements){  boolean elementFound=false;  for (int i=0; i < elements.length && !elementFound; i++) {    Object element=elements[i];    elementFound=isElementVisible(viewer,element);  }  return elementFound;}  }
class C{  public long insertEntry(ArrayList<String> key,ArrayList<String> value){  ContentValues contentValues=new ContentValues();  for (int i=0; key.size() > i; i++) {    contentValues.put(key.get(i),value.get(i));  }  Log.v("Database Add",contentValues.toString());  return db.insert(mDefaultTable,null,contentValues);}  }
class C{  public static void checkOwner(ServletContext servletContext,OwnableEntity ownable) throws WebApplicationException {  checkLoggedIn(servletContext);  Identity identity=new ServletInjector<Identity>().getManagedBean(servletContext,Identity.class);  IdentityManager identityManager=new ServletInjector<IdentityManager>().getManagedBean(servletContext,IdentityManager.class);  RelationshipManager relationshipManager=new ServletInjector<RelationshipManager>().getManagedBean(servletContext,RelationshipManager.class);  if (hasRole(relationshipManager,identity.getAccount(),getRole(identityManager,TankConstants.TANK_GROUP_ADMIN))) {    return;  }  if (StringUtils.isEmpty(ownable.getCreator()) || identity.getAccount().getId().equals(ownable.getCreator())) {    return;  }  throw new WebApplicationException(buildForbiddenResponse("Insufficient Rights"));}  }
class C{  public void testHdfsSplitsReplication() throws Exception {  IgfsMock igfs=LocationsBuilder.create().add(0,NODE_1).add(50,NODE_2).add(100,NODE_3).buildIgfs();  final List<HadoopInputSplit> splits=new ArrayList<>();  splits.add(new HadoopFileBlock(new String[]{HOST_1,HOST_2,HOST_3},URI.create("hfds://" + HOST_1 + "/x"),0,50));  splits.add(new HadoopFileBlock(new String[]{HOST_2,HOST_3,HOST_4},URI.create("hfds://" + HOST_2 + "/x"),50,100));  splits.add(new HadoopFileBlock(new String[]{HOST_3,HOST_4,HOST_5},URI.create("hfds://" + HOST_3 + "/x"),100,37));  splits.add(new HadoopFileBlock(new String[]{HOST_4,HOST_5,HOST_1},URI.create("hfds://" + HOST_4 + "/x"),138,2));  splits.add(new HadoopFileBlock(new String[]{HOST_5,HOST_1,HOST_2},URI.create("hfds://" + HOST_5 + "/x"),140,3));  final int expReducers=8;  HadoopPlannerMockJob job=new HadoopPlannerMockJob(splits,expReducers);  IgniteHadoopWeightedMapReducePlanner planner=createPlanner(igfs);  final HadoopMapReducePlan plan=planner.preparePlan(job,NODES,null);  checkPlanMappers(plan,splits,NODES,true);  checkPlanReducers(plan,NODES,expReducers,true);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void comment(String comment) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementName != null) {    emitFirstTag();  } else   if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_handler.comment(comment);}  }
class C{  protected File ensureDirectoryExists(final Logger defaultLog,final Logger shopLog,final File shopDir,final Shop shop,final String dirname) throws IOException {  final File dir=new File(shopDir,dirname);  if (!dir.exists()) {    defaultLog.info("Proactively creating '{}' sub directory for shop {}",dir.getAbsolutePath(),shop.getCode());    shopLog.info("Proactively creating '{}' sub directory for shop {}",dir.getAbsolutePath(),shop.getCode());    if (!dir.mkdirs()) {      throw new IOException("Failed to create '" + dir.getAbsolutePath() + "' sub directory for shop "+ shop.getCode());    }  }  return dir;}  }
class C{  @Override public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  support.removePropertyChangeListener(l);}  }
class C{  @Override public synchronized void reset(){  pos=0;}  }
class C{  private void longClickChild(final int index){  final View itemView=getChildAt(index);  final int position=mFirstItemPosition + index;  final long id=mAdapter.getItemId(position);  final OnItemLongClickListener listener=getOnItemLongClickListener();  if (listener != null) {    listener.onItemLongClick(this,itemView,position,id);  }}  }
class C{  static void migrateGlobal(int counts[],int segCounts[],int subIndex,OrdinalMap map){  final LongValues ordMap=map.getGlobalOrds(subIndex);  counts[0]+=segCounts[0];  for (int ord=1; ord < segCounts.length; ord++) {    int count=segCounts[ord];    if (count != 0) {      counts[1 + (int)ordMap.get(ord - 1)]+=count;    }  }}  }
class C{  public void load(List<AccessDescription> accessDescriptions){  AccessDescription[] accessDescriptionsArray=accessDescriptions.toArray(new AccessDescription[accessDescriptions.size()]);  Arrays.sort(accessDescriptionsArray,new AccessDescriptionMethodComparator());  data=new Object[accessDescriptionsArray.length][2];  int i=0;  for (  AccessDescription accessDescription : accessDescriptionsArray) {    data[i][0]=accessDescription;    data[i][1]=accessDescription;    i++;  }  fireTableDataChanged();}  }
class C{  public boolean hasPowerSaveMode(){  return mPowerSaveRestInterval > 0 && mPowerSaveScanInterval > 0;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("Token[");switch (ttype) {case TT_EOF:    result.append("EOF");  break;case TT_EOL:result.append("EOL");break;case TT_NUMBER:result.append("n=");result.append(nval);break;case TT_WORD:result.append(sval);break;default :if (ttype == TT_UNKNOWN || tokenTypes[ttype] == TOKEN_QUOTE) {result.append(sval);} else {result.append('\'');result.append((char)ttype);result.append('\'');}}result.append("], line ");result.append(lineNumber);return result.toString();}  }
class C{  public Data execute(Data in1,double u,double v) throws DMLRuntimeException {  CM_COV_Object cov1=(CM_COV_Object)in1;  if (cov1.isCOVAllZeros()) {    cov1.w=1L;    cov1.mean.set(u,0);    cov1.mean_v.set(v,0);    cov1.c2.set(0,0);    return cov1;  }  double w=cov1.w + 1;  double du=u - cov1.mean._sum;  double dv=v - cov1.mean_v._sum;  cov1.mean=(KahanObject)_plus.execute(cov1.mean,du / w);  cov1.mean_v=(KahanObject)_plus.execute(cov1.mean_v,dv / w);  cov1.c2=(KahanObject)_plus.execute(cov1.c2,cov1.w / w * du * dv);  cov1.w=w;  return cov1;}  }
class C{  @Override public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public BurlapProxyResolver(BurlapProxyFactory factory){  this.factory=factory;}  }
class C{  public static SymbolVariant symbolVariant(CharSequence symbol){  int length=symbol.length();  if (length == 0) {    throw new EmptySymbolException();  }  if (isIdentifierKeyword(symbol)) {    return SymbolVariant.QUOTED;  }  char c=symbol.charAt(0);  if (isIdentifierStart(c)) {    for (int ii=0; ii < length; ii++) {      c=symbol.charAt(ii);      if ((c == '\'' || c < 32 || c > 126) || !isIdentifierPart(c)) {        return SymbolVariant.QUOTED;      }    }    return SymbolVariant.IDENTIFIER;  }  if (isOperatorPart(c)) {    for (int ii=0; ii < length; ii++) {      c=symbol.charAt(ii);      if (!isOperatorPart(c)) {        return SymbolVariant.QUOTED;      }    }    return SymbolVariant.OPERATOR;  }  return SymbolVariant.QUOTED;}  }
class C{  public GeneralizedSemPmWrapper(SemGraphWrapper semGraphWrapper,GeneralizedSemPmWrapper wrapper){  this(semGraphWrapper.getSemGraph(),wrapper.getSemPm());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.590 -0500",hash_original_method="9DF3E8EF203785D8A82D753745232C5B",hash_generated_method="DE2957DCFEB66976F2236C529DEAD126") public int length() throws UnsupportedOperationException {  if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {    return (this.length + this.type);  }  throw new UnsupportedOperationException("length meaningless for " + toString());}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof FieldPosition))   return false;  FieldPosition other=(FieldPosition)obj;  if (attribute == null) {    if (other.attribute != null) {      return false;    }  } else   if (!attribute.equals(other.attribute)) {    return false;  }  return (beginIndex == other.beginIndex && endIndex == other.endIndex && field == other.field);}  }
class C{  protected void transferRouterPropertiesToMemberVariables() throws SQLException {  transferPropertiesToRouterURLMemberVariables(props);}  }
class C{  public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  public void handle(StateContext state,SubCollectionReadEntityContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  public static JSON from(String jsonString){  Assert.notNull("jsonString",jsonString);  return new JSON(jsonString);}  }
class C{  private void doUpdateMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  Connection conn=null;  PreparedStatement mappingStmt=null;  try {    conn=dataSource.getConnection();    mappingStmt=conn.prepareStatement(sqlQueries.getSqlString("updateMapping",true));    ResultSet mappingRS=null;    try {      mappingStmt.setString(1,mapping);      mappingStmt.setString(2,user);      mappingStmt.setString(3,domain);      if (mappingStmt.executeUpdate() < 1) {        throw new RecipientRewriteTableException("Mapping not found");      }    }  finally {      theJDBCUtil.closeJDBCResultSet(mappingRS);    }  } catch (  SQLException sqle) {    getLogger().error("Error accessing database",sqle);    throw new RecipientRewriteTableException("Error accessing database",sqle);  } finally {    theJDBCUtil.closeJDBCStatement(mappingStmt);    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public void expand(){  contentLayout.setVisibility(View.VISIBLE);  int x=rightIcon.getMeasuredWidth() / 2;  int y=rightIcon.getMeasuredHeight() / 2;  rotateAnimator=new RotateAnimation(0f,DEGREES,x,y);  rotateAnimator.setInterpolator(new LinearInterpolator());  rotateAnimator.setRepeatCount(Animation.ABSOLUTE);  rotateAnimator.setFillAfter(true);  rotateAnimator.setDuration(DURATION);  rightIcon.startAnimation(rotateAnimator);  animator.start();}  }
class C{  public void addDefaultRemoveGraph(IRI graphURI){  defaultRemoveGraphs.add(graphURI);}  }
class C{  public int order(int id){  if (idToOrderData == null) {    if (id == id0)     return 0;    if (id == id1)     return 1;    if (id == id2)     return 2;    if (id == id3)     return 3;    return ORDER_NOT_FOUND;  } else {    int idx=(id & idToOrderMask) << 1;    int curId=idToOrderData[idx];    if (id == curId)     return idToOrderData[idx + 1]; else     if (curId == MAP_EMPTY)     return ORDER_NOT_FOUND; else {      for (int i=2; i < idToOrderData.length; i+=2) {        int newIdx=(idx + i) % idToOrderData.length;        assert newIdx < idToOrderData.length - 1;        curId=idToOrderData[newIdx];        if (id == curId)         return idToOrderData[newIdx + 1]; else         if (curId == MAP_EMPTY)         return ORDER_NOT_FOUND;      }      return ORDER_NOT_FOUND;    }  }}  }
class C{  public static void updateOpenViews(final INaviModule module,final INaviCodeNode codeNode,final ArrayList<IComment> comments) throws CouldntSaveDataException {  if (module.isLoaded()) {    final List<INaviCodeNode> nodelist=new ArrayList<INaviCodeNode>();    for (    final INaviView view : module.getContent().getViewContainer().getViews()) {      if (view.isLoaded()) {        nodelist.addAll(collectNodes(view,codeNode));      }    }    final List<IComment> codeNodeComments=codeNode.getComments().getGlobalCodeNodeComment();    for (    final INaviCodeNode currentCodeNode : nodelist) {      final List<IComment> currentNodeComments=currentCodeNode.getComments().getGlobalCodeNodeComment();      if (codeNodeComments.equals(currentNodeComments)) {        continue;      } else {        currentCodeNode.getComments().initializeGlobalCodeNodeComment(comments);      }    }  }}  }
class C{  protected void forEach(int slot,Allocation ain,Allocation aout,FieldPacker v){  if (ain == null && aout == null) {    throw new RSIllegalArgumentException("At least one of ain or aout is required to be non-null.");  }  int in_id=0;  if (ain != null) {    in_id=ain.getID(mRS);  }  int out_id=0;  if (aout != null) {    out_id=aout.getID(mRS);  }  byte[] params=null;  if (v != null) {    params=v.getData();  }  mRS.nScriptForEach(getID(mRS),slot,in_id,out_id,params);}  }
class C{  public void testAddMetadataFileByInputStream(ArchiveSource src) throws IOException {  src.clear();  try {    src.startWrite();    addMetadataFileByInputStream(src,m_metafile1,m_metadata1);    addMetadataFileByInputStream(src,m_metafile2,m_metadata2);  }  finally {    src.finishWrite();  }  checkMetaAdded(src);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @GET @Path("image/download/progress/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public DownloadProgress checkDownloadProgress(@QueryParam("site") String siteId,@Context HttpHeaders headers) throws Exception {  _log.info("checkDownloadProgress()");  DownloadProgress progress=new DownloadProgress();  DownloadingInfo targetDownloadInfo=_coordinator.getTargetInfo(DownloadingInfo.class);  if (targetDownloadInfo == null || targetDownloadInfo._status == DownloadStatus.CANCELLED) {    return progress;  }  progress.setImageSize(targetDownloadInfo._size);  for (  String svcId : _coordinator.getAllNodes(siteId)) {    DownloadingInfo downloadInfo=_coordinator.getNodeGlobalScopeInfo(DownloadingInfo.class,siteId,DOWNLOADINFO_KIND,svcId);    if (null == downloadInfo) {      progress.addNodeProgress(svcId,new NodeProgress(0,DownloadStatus.NORMAL,0,0));    } else {      int downloadErrorCount=downloadInfo._errorCounter.get(0);      int checksumErrorCount=downloadInfo._errorCounter.get(1);      progress.addNodeProgress(svcId,new NodeProgress(downloadInfo.downloadedBytes,downloadInfo._status,downloadErrorCount,checksumErrorCount));    }  }  return progress;}  }
class C{  private ArrayList<String> filterYears(ArrayList<String> items){  Iterator<String> iterator;  Calendar now=Calendar.getInstance();  int year=now.get(Calendar.YEAR);  String yearInString=String.valueOf(year);  Log.d(TAG,"Year: " + yearInString);  int prevYear=year - 1;  String prevYearInString=String.valueOf(prevYear);  Log.d(TAG,"Previous year: " + prevYearInString);  for (iterator=items.iterator(); iterator.hasNext(); ) {    String s=iterator.next();    if (s.matches(".*(19|20)\\d{2}.*") && !s.contains(yearInString) && !s.contains(prevYearInString)) {      Log.d(TAG,"Filtering out year " + s);      iterator.remove();    }  }  Log.d(TAG,"Items: " + items.toString());  return items;}  }
class C{  public EventAssert assertNext(){  assertThat(events.isEmpty()).isFalse();  return new EventAssert(events.remove(0));}  }
class C{  public void paintPeer(Graphics g){  resetColors();  int width=getWidth();  int height=getHeight();  flush();  g.setColor(getBackgroundColor());  g.fillRect(1,1,width - 2,height - 2);  draw3DRect(g,0,0,width,height,true);  MappingData mappingData=(MappingData)getMappingData();  XMenuItemPeer[] itemVector=mappingData.getItems();  XMenuItemPeer selectedItem=getSelectedItem();  for (int i=0; i < itemVector.length; i++) {    XMenuItemPeer item=itemVector[i];    g.setFont(item.getTargetFont());    Rectangle bounds=item.getBounds();    Point textOrigin=item.getTextOrigin();    if (item == selectedItem) {      g.setColor(getSelectedColor());      g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);      draw3DRect(g,bounds.x,bounds.y,bounds.width,bounds.height,false);    }    if (isFramePeerEnabled() && item.isTargetItemEnabled()) {      g.setColor(getForegroundColor());    } else {      g.setColor(getDisabledColor());    }    g.drawString(item.getTargetLabel(),textOrigin.x,textOrigin.y);  }  flush();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof ResolutionSyntax && this.crossFeedResolution == ((ResolutionSyntax)object).crossFeedResolution && this.feedResolution == ((ResolutionSyntax)object).feedResolution);}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.559 -0500",hash_original_method="7DEA5A41C8CF38812E48507218F476CC",hash_generated_method="BEE13F965138C88900A72C83D720ADE8") public static String formatNumber(String phoneNumber,String phoneNumberE164,String defaultCountryIso){  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    if (!isDialable(phoneNumber.charAt(i))) {      return phoneNumber;    }  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  if (phoneNumberE164 != null && phoneNumberE164.length() >= 2 && phoneNumberE164.charAt(0) == '+') {    try {      PhoneNumber pn=util.parse(phoneNumberE164,defaultCountryIso);      String regionCode=util.getRegionCodeForNumber(pn);      if (!TextUtils.isEmpty(regionCode)) {        defaultCountryIso=regionCode;      }    } catch (    NumberParseException e) {    }  }  String result=formatNumber(phoneNumber,defaultCountryIso);  return result != null ? result : phoneNumber;}  }
class C{  protected void addKeywordsToJCas(JCas jCas,List<String> keywords){  Metadata md=new Metadata(jCas);  md.setKey("keywords");  md.setValue(keywords.stream().collect(Collectors.joining(";")));  addToJCasIndex(md);  if (addBuzzwords) {    for (    String keyword : keywords) {      Matcher m=Pattern.compile("\\b" + Pattern.quote(keyword) + "\\b",Pattern.CASE_INSENSITIVE).matcher(jCas.getDocumentText());      while (m.find()) {        Buzzword bw=new Buzzword(jCas,m.start(),m.end());        bw.setTags(UimaTypesUtils.toArray(jCas,Arrays.asList("keyword")));        addToJCasIndex(bw);      }    }  }}  }
class C{  public Item withFactory(ViewHolderFactory<? extends VH> factory){  this.mFactory=factory;  return (Item)this;}  }
class C{  public void testBug21978216() throws Exception {  DatabaseMetaData meta=this.conn.getMetaData();  this.rs=meta.getTypeInfo();  while (this.rs.next()) {    if (this.rs.getString("TYPE_NAME").equals("VARBINARY")) {      if (versionMeetsMinimum(5,0,3)) {        assertEquals(65535,this.rs.getInt("PRECISION"));      } else {        assertEquals(255,this.rs.getInt("PRECISION"));      }    }  }}  }
class C{  public static String createThumbnailUrl(String videoId,String quality){  if (quality == null) {    quality=THUMBNAIL_QUALITY_DEFAULT;  }  if (!quality.equalsIgnoreCase(THUMBNAIL_QUALITY_DEFAULT) && !quality.equalsIgnoreCase(THUMBNAIL_QUALITY_MQ) && !quality.equalsIgnoreCase(THUMBNAIL_QUALITY_HQ)&& !quality.equalsIgnoreCase(THUMBNAIL_QUALITY_SD)) {    throw new IllegalArgumentException("Invalid quality thumbnail requested");  }  return "http://img.youtube.com/vi/" + videoId + "/"+ quality+ ".jpg";}  }
class C{  public static Test suite(){  return (new TestSuite(ViewXmlITCase.class));}  }
class C{  private static void printCardInfo(MfCard card){  System.out.println("Card detected: " + card.getTagType().toString() + " "+ card.toString());}  }
class C{  public void close() throws EPException {  if (isClosed) {    throw new EPException("Calling close() on an already closed CSVReader");  }  try {    isClosed=true;    source.close();  } catch (  IOException e) {    throw new EPException(e);  }}  }
class C{  public LocalDateTime withYear(int year){  return withLocalMillis(getChronology().year().set(getLocalMillis(),year));}  }
class C{  private void updateViaHeaderPort(int localPort,InetAddress localAddress,SIPMessage message){  if (localAddress == null) {    return;  }  if (message == null || message.getViaHeaders() == null) {    return;  }  ViaList viaList=message.getViaHeaders();  if (viaList == null || viaList.isEmpty()) {    return;  }  try {    String localHostAddress=localAddress.getHostAddress();    String viaHostAddress=viaList.get(0).getHost();    if (!TextUtils.isEmpty(viaHostAddress) && viaHostAddress.equals(localHostAddress)) {      viaList.get(0).setPort(localPort);    }  } catch (  InvalidArgumentException e) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError(e.getMessage(),e);    }  }}  }
class C{  private static Array<Triangle> createTriangles(Vector3[] vertexVectors,short[] indices,int[] meshPartIndexOffsets,int[] meshPartTriCounts){  Array<Triangle> triangles=new Array<Triangle>();  triangles.ordered=true;  short i=0;  short j=0;  int triIndex=0;  int meshPartIndex=-1;  while (i < indices.length) {    if (j < meshPartIndexOffsets.length && i >= meshPartIndexOffsets[j]) {      meshPartIndex++;      j++;    }    triangles.add(new Triangle(vertexVectors[indices[i++]],vertexVectors[indices[i++]],vertexVectors[indices[i++]],triIndex,meshPartIndex));    meshPartTriCounts[meshPartIndex]++;    triIndex++;  }  return triangles;}  }
class C{  public void cleanupAndVerify(String reason,MetadataSnapshot sourceMetaData) throws IOException {  metadataLock.writeLock().lock();  try (Lock writeLock=directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)){    final StoreDirectory dir=directory;    for (    String existingFile : dir.listAll()) {      if (Store.isAutogenerated(existingFile) || sourceMetaData.contains(existingFile)) {        continue;      }      try {        dir.deleteFile(reason,existingFile);      } catch (      IOException ex) {        if (existingFile.startsWith(IndexFileNames.SEGMENTS) || existingFile.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {          throw new IllegalStateException("Can't delete " + existingFile + " - cleanup failed",ex);        }        logger.debug("failed to delete file [{}]",ex,existingFile);      }    }    final Store.MetadataSnapshot metadataOrEmpty=getMetadata();    verifyAfterCleanup(sourceMetaData,metadataOrEmpty);  }  finally {    metadataLock.writeLock().unlock();  }}  }
class C{  public static Value toChar(Value... args){  if (args.length == 0) {    return null;  }  return args[0].convertTo(Value.STRING);}  }
class C{  public static Sampler CLAMP_LINEAR_MIP_LINEAR(RenderScript rs){  if (rs.mSampler_CLAMP_LINEAR_MIP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR_MIP_LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_LINEAR_MIP_LINEAR=b.create();  }  return rs.mSampler_CLAMP_LINEAR_MIP_LINEAR;}  }
class C{  public TextSliceExtractor(int start){  this(start,Integer.MAX_VALUE);}  }
class C{  protected boolean internalNext() throws SQLException {  boolean ret=false;  do {    if (cursorPos < numRows) {      ++cursorPos;      ret=true;    } else     if (cursorPos == numRows) {      ++cursorPos;      ret=false;      break;    }  } while ((getShowDeleted() == false) && (rowDeleted() == true));  if (ret == true)   absolutePos++; else   absolutePos=0;  return ret;}  }
class C{  public void onWayMarkerClick(WayMarker wayMarker){  MapMode mapMode=mapFragment.getMapMode();  if (mapMode != MapMode.POI_POSITION_EDITION && mapMode != MapMode.POI_CREATION) {    mapFragment.unselectWayMarker();    mapFragment.setWayMarkerSelected(wayMarker);    mapFragment.selectWayMarker();  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  @Override public void update(int b){  long newCrc=crc ^ LONG_MASK;  newCrc=updateByte((byte)b,newCrc);  crc=newCrc ^ LONG_MASK;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public RrdSyncThreadPool(int syncPoolSize){  this(syncPoolSize,null);}  }
class C{  @Override public int compareTo(CASHInterval other){  if (this.equals(other)) {    return 0;  }  if (this.priority() < other.priority()) {    return -1;  }  if (this.priority() > other.priority()) {    return 1;  }  if (this.level < other.level) {    return -1;  }  if (this.level > other.level) {    return 1;  }  if (this.maxSplitDimension < other.maxSplitDimension) {    return -1;  }  if (this.maxSplitDimension > other.maxSplitDimension) {    return 1;  }  if (other.intervalID.compareTo(this.intervalID) < 0) {    return -1;  } else {    return 1;  }}  }
class C{  public DerOutputStream(){}  }
class C{  public static SMBShareMap convertUnManagedSMBMapToManaged(UnManagedSMBShareMap unManagedSMBShareMap,StoragePort storagePort,StorageHADomain dataMover){  SMBShareMap smbShareMap=new SMBShareMap();  if (unManagedSMBShareMap == null) {    return smbShareMap;  }  SMBFileShare smbshare=null;  for (  UnManagedSMBFileShare unManagedSMBFileShare : unManagedSMBShareMap.values()) {    smbshare=new SMBFileShare();    smbshare.setName(unManagedSMBFileShare.getName());    smbshare.setNativeId(unManagedSMBFileShare.getNativeId());    smbshare.setDescription(unManagedSMBFileShare.getDescription());    if (storagePort != null) {      smbshare.setMountPoint("\\\\" + storagePort.getPortNetworkId() + "\\"+ unManagedSMBFileShare.getName());    } else {      smbshare.setMountPoint(unManagedSMBFileShare.getMountPoint());    }    smbshare.setPath(unManagedSMBFileShare.getPath());    smbshare.setMaxUsers(unManagedSMBFileShare.getMaxUsers());    smbshare.setPermission(unManagedSMBFileShare.getPermission());    smbshare.setPermissionType(unManagedSMBFileShare.getPermissionType());    smbshare.setPortGroup(storagePort.getPortGroup());    smbShareMap.put(unManagedSMBFileShare.getName(),smbshare);  }  return smbShareMap;}  }
class C{  @SuppressWarnings("unchecked") public <T>T convertMessage(final Message message,final Class<T> clazz){  if (isMessageBodyEmpty(message)) {    return null;  }  message.getMessageProperties().getHeaders().put(AbstractJavaTypeMapper.DEFAULT_CLASSID_FIELD_NAME,clazz.getName());  return (T)rabbitTemplate.getMessageConverter().fromMessage(message);}  }
class C{  public Property property(DateTimeFieldType fieldType){  if (fieldType == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  if (isSupported(fieldType) == false) {    throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");  }  return new Property(this,fieldType.getField(getChronology()));}  }
class C{  public Member(String id,Address address){  this(id,address,Collections.emptyMap());}  }
class C{  public static final short BuildShort(byte bytevec[],boolean MSBFirst){  return BuildShort(bytevec,0,MSBFirst);}  }
class C{  private void removeHostInitiatorsFromNetworks(Host host){  URIQueryResultList ceHBAUriList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getHostComputeElemetHBAsConstraint(host.getId()),ceHBAUriList);  Set<Network> networks=new HashSet<Network>();  List<String> endpoints=new ArrayList<String>();  List<ComputeElementHBA> computeElementHBAs=_dbClient.queryObject(ComputeElementHBA.class,ceHBAUriList,true);  for (  ComputeElementHBA computeElementHBA : computeElementHBAs) {    endpoints.add(computeElementHBA.getPort());    networks.addAll(CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Network.class,"nativeId",computeElementHBA.getVsanId()));    _dbClient.markForDeletion(computeElementHBA);  }  for (  Network network : networks) {    Collection<String> removedEndpoints=network.removeEndpoints(endpoints);    NetworkAssociationHelper.handleEndpointsRemoved(network,removedEndpoints,_dbClient,_coordinator);  }  _dbClient.persistObject(networks);}  }
class C{  @SuppressWarnings("unchecked") public void writeFloat(float x) throws SQLException {  attribs.add(Float.valueOf(x));}  }
class C{  protected AlwaysEventImpl(){  super();}  }
class C{  public void doWork() throws OperatorException {}  }
class C{  public Departments(){  _departmentsImpl=new DepartmentsImpl();}  }
class C{  public boolean exists(){  return scanner != null;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>BiFunction<T7,T8,R> partial8(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  public boolean hasArgs(){  return fieldSetFlags()[1];}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap<K,V>)NATURAL_EMPTY_MAP;}  }
class C{  private boolean isTryWithResources(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenTRY:      return true;case Symbols.TokenLBRACE:    return false;case Symbols.TokenEOF:  return false;}}}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-vnas-servers") @CheckPermission(roles={Role.SYSTEM_ADMIN},acls={ACL.ALL,ACL.OWN}) public Response assignVNasServersToProject(@PathParam("id") URI id,VirtualNasParam vnasParam){  checkCompatibleVersion();  Project project=getProjectById(id,true);  StringBuilder errorMsg=new StringBuilder();  StringSet validVNasServers=validateVNasServers(project,vnasParam,errorMsg);  if (validVNasServers != null && !validVNasServers.isEmpty()) {    for (    String validNas : validVNasServers) {      URI vnasURI=URI.create(validNas);      VirtualNAS vnas=_permissionsHelper.getObjectById(vnasURI,VirtualNAS.class);      vnas.associateProject(project.getId().toString());      _dbClient.persistObject(vnas);    }    project.setAssignedVNasServers(validVNasServers);    _dbClient.persistObject(project);    _log.info("Successfully assigned {} virtual NAS Servers to project : {} ",validVNasServers.size(),project.getLabel());  }  if (errorMsg != null && errorMsg.length() > 0) {    _log.error("Failed to assign virtual NAS server(s) to project. Error: {} ",errorMsg.toString());    throw APIException.badRequests.oneOrMorevNasServersNotAssociatedToProject();  }  return Response.ok().build();}  }
class C{  public long index(){  return index;}  }
class C{  private boolean holdsCorrectOrder(ModifiableElement elem){  boolean isOrderMessedUp=false;  int lastValue=-1;  for (  N4Modifier mod : elem.getDeclaredModifiers()) {    final int currValue=mod.getValue();    if (currValue < lastValue) {      isOrderMessedUp=true;      break;    }    lastValue=currValue;  }  if (isOrderMessedUp) {    final List<N4Modifier> modifiers=ModifierUtils.getSortedModifiers(elem.getDeclaredModifiers());    final String modifiersStr=Joiner.on(' ').join(modifiers.iterator());    final ILeafNode nodeFirst=ModifierUtils.getNodeForModifier(elem,0);    final ILeafNode nodeLast=ModifierUtils.getNodeForModifier(elem,elem.getDeclaredModifiers().size() - 1);    addIssue(IssueCodes.getMessageForSYN_MODIFIER_BAD_ORDER(modifiersStr),elem,nodeFirst.getOffset(),nodeLast.getOffset() - nodeFirst.getOffset() + nodeLast.getLength(),IssueCodes.SYN_MODIFIER_BAD_ORDER);    return false;  }  return true;}  }
class C{  public static int count(char[] chars,char ch){  return count(chars,ch,chars.length - 1);}  }
class C{  public void camera(){  int permissionCheck=ContextCompat.checkSelfPermission(context,Manifest.permission.WRITE_EXTERNAL_STORAGE);  if (permissionCheck == PackageManager.PERMISSION_GRANTED)   startCameraIntent(); else   needWritePermission();}  }
class C{  public static void checkNotNullOrEmpty(String string,String message){  if (string == null || string.isEmpty()) {    throw new IllegalArgumentException(message);  }}  }
class C{  private void testStringMissing(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",sortType));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertNull(searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.095 -0500",hash_original_method="ABA8C6E97A9C369182835D6347EB12CF",hash_generated_method="8A65B7C39D98D059FA6DE22AD18BC4F6") public boolean startZoomAnimation(float scale,boolean reflowText){  mInitialZoomOverview=false;  float oldScale=mActualScale;  mInitialScrollX=mWebView.getScrollX();  mInitialScrollY=mWebView.getScrollY();  if (!exceedsMinScaleIncrement(scale,getReadingLevelScale())) {    scale=getReadingLevelScale();  }  if (mHardwareAccelerated) {    mInHWAcceleratedZoom=true;  }  setZoomScale(scale,reflowText);  if (oldScale != mActualScale) {    mZoomStart=SystemClock.uptimeMillis();    mInvInitialZoomScale=1.0f / oldScale;    mInvFinalZoomScale=1.0f / mActualScale;    mZoomScale=mActualScale;    mWebView.onFixedLengthZoomAnimationStart();    mWebView.invalidate();    return true;  } else {    return false;  }}  }
class C{  protected synchronized void moveToNextJob(){  this.needToSave=true;  super.moveToNextJob();}  }
class C{  public void writeBlockletMetaDataToFile() throws CarbonDataWriterException {  ByteBuffer buffer=null;  int[] msrLength=null;  long[] msroffset=null;  try {    for (    BlockletInfo info : this.blockletInfoList) {      msrLength=info.getMeasureLength();      msroffset=info.getMeasureOffset();      buffer=ByteBuffer.allocate(this.leafMetaDataSize);      buffer.putInt(info.getNumberOfKeys());      buffer.putInt(info.getKeyLength());      buffer.putLong(info.getKeyOffset());      buffer.put(info.getStartKey());      buffer.put(info.getEndKey());      for (int i=0; i < this.measureCount; i++) {        buffer.putInt(msrLength[i]);        buffer.putLong(msroffset[i]);      }      buffer.flip();      this.fileDataOutStream.write(buffer.array());    }    this.fileDataOutStream.writeLong(metadataOffset);  } catch (  IOException exception) {    throw new CarbonDataWriterException("Problem while writing the carbon file: ",exception);  }  this.blockletInfoList=new ArrayList<BlockletInfo>(CarbonCommonConstants.CONSTANT_SIZE_TEN);}  }
class C{  public void test_select_literal() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="select (\"abc\" as ?x) where {?s ?p ?o}";  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionExpression(new AssignmentNode(new VarNode("x"),new ConstantNode(makeIV(valueFactory.createLiteral("abc")))));    expected.setProjection(projection);  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected.getProjection(),actual.getProjection());}  }
class C{  public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public T caseNamedImportSpecifier(NamedImportSpecifier object){  return null;}  }
class C{  public AbortProcessingException(Throwable cause){  super(cause);}  }
class C{  public void dumpThreads(){}  }
class C{  public HindiAnalyzer(CharArraySet stopwords,CharArraySet stemExclusionSet){  super(stopwords);  this.stemExclusionSet=CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionSet));}  }
class C{  public String add(){  if (getTypePriceModel().equals(type)) {    addToPriceModel();  } else   if (getTypePricedEvent().equals(type)) {    addToEvents();  } else   if (getTypePricedParameter().equals(type)) {    addToParameters();  }  return OUTCOME_SUCCESS;}  }
class C{  public boolean isWriteable(){  return (!(this.isConst() || this.isFinal()));}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  public Months minus(Months months){  if (months == null) {    return this;  }  return minus(months.getValue());}  }
class C{  public Log2(){  super("log2",2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:02.035 -0500",hash_original_method="ECFBB6A45EE52702BEFF3EF78A8EE9C3",hash_generated_method="5147012B6A9D5605058E46ED1E5CC400") private int doCancel(){  int deselected=0;  Set<SelectionKey> cancelledKeys=cancelledKeys();synchronized (cancelledKeys) {    if (cancelledKeys.size() > 0) {      for (      SelectionKey currentKey : cancelledKeys) {        mutableKeys.remove(currentKey);        deregister((AbstractSelectionKey)currentKey);        if (mutableSelectedKeys.remove(currentKey)) {          deselected++;        }      }      cancelledKeys.clear();    }  }  return deselected;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttrNode;  String attrValue;  String attrName;  int attrType;  doc=(Document)load("hc_staff",true);  newAttrNode=doc.createAttribute("title");  attrValue=newAttrNode.getNodeValue();  assertEquals("value","",attrValue);  attrName=newAttrNode.getNodeName();  assertEqualsAutoCase("attribute","name","title",attrName);  attrType=(int)newAttrNode.getNodeType();  assertEquals("type",2,attrType);}  }
class C{  public synchronized void logMessage(String message){  if (m_First) {    m_First=false;  } else {    m_LogText.append("\n");  }  m_LogText.append(LogPanel.getTimestamp() + ' ' + message);  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,message);}  }
class C{  public Matrix4d translationRotateScale(Vector3dc translation,Quaterniondc quat,Vector3dc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public void testSchemasAcceptedWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testSchemasAcceptedWithFile");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,null,"create database foo");  verifyStmtAccept(filterHelper,1,null,"drop database bar");  verifyStmtAccept(filterHelper,2,null,"insert into foobar1.x1 values(1,2,3)");  verifyStmtAccept(filterHelper,3,null,"update test_tab set age=32 where id=1");  verifyStmtIgnore(filterHelper,4,null,"insert into test.tab values(52,1)");  filterHelper.done();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.112 -0500",hash_original_method="C68391FBBAF4E4C2759F231D9BB3CE56",hash_generated_method="F1671C54E611B4F570632F9FDA2E2EDC") public void copy1DRangeFromUnchecked(int off,int count,byte[] d){  int dataSize=mType.mElement.getSizeBytes() * count;  data1DChecks(off,count,d.length,dataSize);  mRS.nAllocationData1D(getIDSafe(),off,mSelectedLOD,count,d,dataSize);}  }
class C{  private boolean sendRequest(int opCode) throws IOException {  boolean returnValue=false;  ByteArrayOutputStream out=new ByteArrayOutputStream();  int bodyLength=-1;  byte[] headerArray=ObexHelper.createHeader(mRequestHeader,true);  if (mPrivateOutput != null) {    bodyLength=mPrivateOutput.size();  }  if ((ObexHelper.BASE_PACKET_LENGTH + headerArray.length) > mMaxPacketSize) {    int end=0;    int start=0;    while (end != headerArray.length) {      end=ObexHelper.findHeaderEnd(headerArray,start,mMaxPacketSize - ObexHelper.BASE_PACKET_LENGTH);      if (end == -1) {        mOperationDone=true;        abort();        mExceptionMessage="Header larger then can be sent in a packet";        mInputOpen=false;        if (mPrivateInput != null) {          mPrivateInput.close();        }        if (mPrivateOutput != null) {          mPrivateOutput.close();        }        throw new IOException("OBEX Packet exceeds max packet size");      }      byte[] sendHeader=new byte[end - start];      System.arraycopy(headerArray,start,sendHeader,0,sendHeader.length);      if (!mParent.sendRequest(opCode,sendHeader,mReplyHeader,mPrivateInput)) {        return false;      }      if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {        return false;      }      start=end;    }    if (bodyLength > 0) {      return true;    } else {      return false;    }  } else {    out.write(headerArray);  }  if (bodyLength > 0) {    if (bodyLength > (mMaxPacketSize - headerArray.length - 6)) {      returnValue=true;      bodyLength=mMaxPacketSize - headerArray.length - 6;    }    byte[] body=mPrivateOutput.readBytes(bodyLength);    if ((mPrivateOutput.isClosed()) && (!returnValue) && (!mEndOfBodySent)&& ((opCode & 0x80) != 0)) {      out.write(0x49);      mEndOfBodySent=true;    } else {      out.write(0x48);    }    bodyLength+=3;    out.write((byte)(bodyLength >> 8));    out.write((byte)bodyLength);    if (body != null) {      out.write(body);    }  }  if (mPrivateOutputOpen && bodyLength <= 0 && !mEndOfBodySent) {    if ((opCode & 0x80) == 0) {      out.write(0x48);    } else {      out.write(0x49);      mEndOfBodySent=true;    }    bodyLength=3;    out.write((byte)(bodyLength >> 8));    out.write((byte)bodyLength);  }  if (out.size() == 0) {    if (!mParent.sendRequest(opCode,null,mReplyHeader,mPrivateInput)) {      return false;    }    return returnValue;  }  if ((out.size() > 0) && (!mParent.sendRequest(opCode,out.toByteArray(),mReplyHeader,mPrivateInput))) {    return false;  }  if ((mPrivateOutput != null) && (mPrivateOutput.size() > 0))   returnValue=true;  return returnValue;}  }
class C{  public ApnsPayload alertTitleLocArgs(String titleLocArgs){  ensureAlertMap().put(ATTR_ALERT_TITLE_LOC_ARGS,titleLocArgs);  return this;}  }
class C{  public SimpleCountingIdlingResource(String resourceName){  mResourceName=checkNotNull(resourceName);}  }
class C{  private void addDirtyRegion0(Container c,int x,int y,int w,int h){  if ((w <= 0) || (h <= 0) || (c == null)) {    return;  }  if ((c.getWidth() <= 0) || (c.getHeight() <= 0)) {    return;  }  if (extendDirtyRegion(c,x,y,w,h)) {    return;  }  Component root=null;  for (Container p=c; p != null; p=p.getParent()) {    if (!p.isVisible() || (p.getPeer() == null)) {      return;    }    if ((p instanceof Window) || (p instanceof Applet)) {      if (p instanceof Frame && (((Frame)p).getExtendedState() & Frame.ICONIFIED) == Frame.ICONIFIED) {        return;      }      root=p;      break;    }  }  if (root == null)   return;synchronized (this) {    if (extendDirtyRegion(c,x,y,w,h)) {      return;    }    dirtyComponents.put(c,new Rectangle(x,y,w,h));  }  scheduleProcessingRunnable(SunToolkit.targetToAppContext(c));}  }
class C{  public FitnessBasedArchive(FitnessEvaluator evaluator,int capacity,DominanceComparator comparator){  super(comparator);  this.fitnessEvaluator=evaluator;  this.capacity=capacity;  fitnessComparator=new FitnessComparator(evaluator.areLargerValuesPreferred());}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  public EncoderTestSuiteBuilder encoded(int min,int max){  _encoded.set(min,max + 1);  _valid.clear(min,max + 1);  _invalid.clear(min,max + 1);  return this;}  }
class C{  boolean checkPortUnder(final Ports<? extends Port> ports,final int x,final int y){  for (  Port port : ports.getAllPorts()) {    Point2D location=ProcessDrawUtils.createPortLocation(port,model);    if (location == null) {      continue;    }    int dx=(int)location.getX() - x;    int dy=(int)location.getY() - y;    if (dx * dx + dy * dy < 3 * ProcessDrawer.PORT_SIZE * ProcessDrawer.PORT_SIZE / 2) {      if (model.getHoveringPort() != port) {        model.setHoveringPort(port);        if (model.getHoveringPort().getPorts().getOwner().getOperator() == model.getDisplayedChain()) {          showStatus(I18N.getGUILabel("processRenderer.displayChain.port.hover"));        } else {          showStatus(I18N.getGUILabel("processRenderer.operator.port.hover"));        }        view.setHoveringOperator(null);        model.fireMiscChanged();      }      return true;    }  }  return false;}  }
class C{  @Uninterruptible public static boolean instanceOfClass(RVMClass LHSclass,TIB rhsTIB){  if (VM.VerifyAssertions) {    VM._assert(rhsTIB != null);    VM._assert(rhsTIB.getSuperclassIds() != null);  }  short[] superclassIds=Magic.objectAsShortArray(rhsTIB.getSuperclassIds());  int LHSDepth=LHSclass.getTypeDepth();  if (LHSDepth >= superclassIds.length)   return false;  int LHSId=LHSclass.getId();  return (superclassIds[LHSDepth] & 0xFFFF) == LHSId;}  }
class C{  protected void announceIdealIndividual(Address except){  output.message("Telling everybody that an ideal individual has been found.");  Address target=null;synchronized (islands) {    Iterator peers=islands.iterator();    while (peers.hasNext())     target=(Address)peers.next();    if (!target.equals(null) && !target.equals(except))     fireMessage(target,M_IDEAL_FOUND,null);  }}  }
class C{  private void drawCircleMask(final ImageView maskView,final int width,final int height){  maskView.setBackgroundResource(0);  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  canvas.drawColor(getResources().getColor(android.R.color.black));  Paint eraser=new Paint(Paint.ANTI_ALIAS_FLAG);  eraser.setStyle(Paint.Style.FILL);  eraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));  eraser.setColor(Color.TRANSPARENT);  canvas.drawCircle(width / 2,height / 2,Math.min(width / 2,height / 2),eraser);  canvas.drawBitmap(bitmap,0,0,null);  maskView.setImageBitmap(bitmap);}  }
class C{  public void removeActionListener(ActionListener l){  listenerList.remove(ActionListener.class,l);}  }
class C{  public static void saveWindowProperties(MainGUI mainGUI){  onSavePosition(mainGUI);}  }
class C{  public void put(E e){  offer(e);}  }
class C{  private void loadSimulatedMixedData() throws Exception {  setLowestMeasuredPercentile(1.0);  setSampleCount(sentinelA,1000);  setSampleCount(sentinelB,1000);  setSampleCount(sentinelC,1000);  setSampleCount(sentinelD,1000);  setSampleCount(sentinelE,1000);  when(mbeanServer.getAttribute(sentinelA,"50thPercentile")).thenReturn(1.0);  when(mbeanServer.getAttribute(sentinelB,"75thPercentile")).thenReturn(1.1);  when(mbeanServer.getAttribute(sentinelC,"75thPercentile")).thenReturn(1.1);  when(mbeanServer.getAttribute(sentinelD,"75thPercentile")).thenReturn(1.6);  when(mbeanServer.getAttribute(sentinelE,"75thPercentile")).thenReturn(2.1);  when(mbeanServer.isRegistered(sentinelA)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelB)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelC)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelD)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelE)).thenReturn(Boolean.TRUE);  System.out.println("Start manual evaluation ...");  qosHandler.evaluateQoSActions();}  }
class C{  public Optional<IndexWord> lookupWord(final POS pos,final String word){  try {    return Optional.ofNullable(dictionary.lookupIndexWord(pos,word));  } catch (  final JWNLException e) {    getMonitor().warn("Lookup word failed",e);    return Optional.empty();  }}  }
class C{  public static CStateChange changeBend(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final Bend oldBend){  final Bend bend=hitInfo.getHitBend();  if (bend == oldBend) {    return new CStateChange(m_factory.createBendHoverState(bend,event),true);  } else {    m_factory.createBendExitState(oldBend,event);    return new CStateChange(m_factory.createBendEnterState(bend,event),true);  }}  }
class C{  @Override public void connectionOpened(IOFConnectionBackend connection,OFFeaturesReply featuresReply){  DatapathId dpid=connection.getDatapathId();  OFAuxId auxId=connection.getAuxId();  log.debug("{} opened",connection);  if (auxId.equals(OFAuxId.MAIN)) {    OFSwitchHandshakeHandler handler=new OFSwitchHandshakeHandler(connection,featuresReply,this,floodlightProvider.getRoleManager(),floodlightProvider.getTimer());    OFSwitchHandshakeHandler oldHandler=switchHandlers.put(dpid,handler);    if (oldHandler != null) {      log.debug("{} is a new main connection, killing old handler connections",connection);      oldHandler.cleanup();    }    handler.beginHandshake();  } else {    OFSwitchHandshakeHandler handler=switchHandlers.get(dpid);    if (handler != null) {      handler.auxConnectionOpened(connection);    } else {      log.warn("{} arrived before main connection, closing connection",connection);      connection.disconnect();    }  }}  }
class C{  public PacketOutputStream writeTimestampLength(final Calendar calendar,Timestamp ts,boolean fractionalSeconds){  assureBufferCapacity(fractionalSeconds ? 12 : 8);  buffer.put((byte)(fractionalSeconds ? 11 : 7));  buffer.putShort((short)calendar.get(Calendar.YEAR));  buffer.put((byte)((calendar.get(Calendar.MONTH) + 1) & 0xff));  buffer.put((byte)(calendar.get(Calendar.DAY_OF_MONTH) & 0xff));  buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY));  buffer.put((byte)calendar.get(Calendar.MINUTE));  buffer.put((byte)calendar.get(Calendar.SECOND));  if (fractionalSeconds) {    buffer.putInt(ts.getNanos() / 1000);  }  return this;}  }
class C{  public int showSaveDialog(Component parent) throws HeadlessException {  setDialogType(SAVE_DIALOG);  return showDialog(parent,null);}  }
class C{  public String lastWord(){  int size=1;  while (pos - size > 0 && lcText[pos - size] == ' ') {    size++;  }  while (pos - size > 0 && lcText[pos - size] != ' ' && lcText[pos - size] != ';') {    size++;  }  return this.substring((pos - size + 1),(pos - 1));}  }
class C{  public static void addPurificationChamberRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPurificationChamberRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  private static Pair<Integer,DefaultSampleValues> parseTrex(ParsableByteArray trex){  trex.setPosition(Atom.FULL_HEADER_SIZE);  int trackId=trex.readInt();  int defaultSampleDescriptionIndex=trex.readUnsignedIntToInt() - 1;  int defaultSampleDuration=trex.readUnsignedIntToInt();  int defaultSampleSize=trex.readUnsignedIntToInt();  int defaultSampleFlags=trex.readInt();  return Pair.create(trackId,new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags));}  }
class C{  public synchronized int sendMessageById(Object newMessage,String clientId,IScope scope){  try {    log.debug("### sendMessageById ###" + clientId);    HashMap<String,Object> hsm=new HashMap<String,Object>();    hsm.put("message",newMessage);    Collection<Set<IConnection>> conCollection=scope.getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());            if (rcl == null) {            } else             if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {            } else {              if (conn.getClient().getId().equals(clientId)) {                ((IServiceCapableConnection)conn).invoke("sendVarsToMessageWithClient",new Object[]{hsm},this);              }            }          }        }      }    }  } catch (  Exception err) {    log.error("[sendMessageWithClient] ",err);    return -1;  }  return 1;}  }
class C{  public void writeConfigXml(Document configXml){  String configFile=getConfigXmlPath();  xmlTool.saveXml(configXml,configFile);}  }
class C{  public XMPPError(Condition condition){  this.init(condition);  this.message=null;}  }
class C{  static final byte[] RLEStringToByteArray(String s){  int length=(((int)s.charAt(0)) << 16) | ((int)s.charAt(1));  byte[] array=new byte[length];  boolean nextChar=true;  char c=0;  int node=0;  int runLength=0;  int i=2;  for (int ai=0; ai < length; ) {    byte b;    if (nextChar) {      c=s.charAt(i++);      b=(byte)(c >> 8);      nextChar=false;    } else {      b=(byte)(c & 0xFF);      nextChar=true;    }switch (node) {case 0:      if (b == ESCAPE_BYTE) {        node=1;      } else {        array[ai++]=b;      }    break;case 1:  if (b == ESCAPE_BYTE) {    array[ai++]=ESCAPE_BYTE;    node=0;  } else {    runLength=b;    if (runLength < 0)     runLength+=0x100;    node=2;  }break;case 2:for (int j=0; j < runLength; ++j) array[ai++]=b;node=0;break;}}if (node != 0) throw new InternalError("Bad run-length encoded byte array");if (i != s.length()) throw new InternalError("Excess data in RLE byte array string");return array;}  }
class C{  public ImageToProcess(ImageProxy proxy,OrientationManager.DeviceOrientation imageRotation,ListenableFuture<TotalCaptureResultProxy> metadata){  this(proxy,imageRotation,metadata,new Rect(0,0,proxy.getWidth(),proxy.getHeight()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  UndoableRichTextChange(RichDocumentUndoManager manager){  super("");  this.fDocumentUndoManager=manager;  addContext(manager.getUndoContext());}  }
class C{  private boolean isMessageConfigSameAsPrevious(final Conversation.ConversationElement convElement,int position){  if (convElement == null || convElement.text == null) {    return false;  }  boolean sameConfig=false;  TextMessage previousMessage=this.getPreviousMessageFromPosition(position);  if (previousMessage != null && previousMessage.isIncoming() && convElement.text.isIncoming() && previousMessage.getNumber().equals(convElement.text.getNumber())) {    sameConfig=true;  }  return sameConfig;}  }
class C{  @Override public Node generateXML(Document document){  return toDiscrete().generateXML(document);}  }
class C{  public static void main(String[] argv){  runClassifier(new AdditiveRegression(),argv);}  }
class C{  static final int drawTabbedText(View view,Segment s,int x,int y,Graphics g,TabExpander e,int startOffset){  return drawTabbedText(view,s,x,y,g,e,startOffset,null);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public boolean hasRegion(){  return hasExtension(Region.class);}  }
class C{  private void prepareGammaTheta(Vec gamma_i,Vec eLogTheta_i,Vec expLogTheta_i,Random rand){  final double lambdaInv=(W * K) / (D * 100.0);  for (int j=0; j < gamma_i.length(); j++)   gamma_i.set(j,sampleExpoDist(lambdaInv,rand.nextDouble()) + eta);  expandPsiMinusPsiSum(gamma_i,gamma_i.sum(),eLogTheta_i);  for (int j=0; j < eLogTheta_i.length(); j++)   expLogTheta_i.set(j,FastMath.exp(eLogTheta_i.get(j)));}  }
class C{  public boolean isEmpty(){  return nameValueMap.isEmpty();}  }
class C{  public FastStringTokenizer(char delimiter){  _del=delimiter;  reset(null);}  }
class C{  public boolean start(){  Intent emailIntent=build();  try {    startActivity(emailIntent);  } catch (  ActivityNotFoundException e) {    return false;  }  return true;}  }
class C{  private static void enableCountrySpecificEncodings(){  Resources r=Resources.getSystem();  sEnabledSingleShiftTables=r.getIntArray(R.array.config_sms_enabled_single_shift_tables);  sEnabledLockingShiftTables=r.getIntArray(R.array.config_sms_enabled_locking_shift_tables);  if (sEnabledSingleShiftTables.length > 0) {    sHighestEnabledSingleShiftCode=sEnabledSingleShiftTables[sEnabledSingleShiftTables.length - 1];  } else {    sHighestEnabledSingleShiftCode=0;  }}  }
class C{  @Override public boolean definesUpperLowerBound(){  if (!subRanges.isEmpty()) {    return subRanges.get(0).definesUpperLowerBound();  } else {    return false;  }}  }
class C{  public double toHeading(){  double radians=Math.atan2(y,x);  double degrees=Math.toDegrees(radians);  if (degrees < 0) {    degrees+=degrees + 360;  }  return degrees;}  }
class C{  private void createButtons(Set<PreferenceId> preferenceSet,IToolBarManager toolBarManager,InputDefinition inputDefinition){  switchLiveMode=new SwitchLiveMode("Live");  switchPreferences=new SwitchPreferences("Additional options");  MenuAction menuAction=new MenuAction();  menuAction.setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_TOOL));  menuAction.setToolTipText("Preferences");  IWorkbenchWindow workbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();  Map<Object,Object> params=new HashMap<>();  params.put(MaximizeActiveViewHandler.PREFERENCE_PANEL_ID_PARAMETER,id);  CommandContributionItemParameter contributionParameters=new CommandContributionItemParameter(workbenchWindow,null,MaximizeActiveViewHandler.COMMAND_ID,params,InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_WINDOW),null,null,null,null,getTooltipTextForMaximizeContributionItem(),SWT.CHECK,null,true);  CommandContributionItem maximizeCommandContribution=new CommandContributionItem(contributionParameters);  toolBarManager.add(maximizeCommandContribution);  if (preferenceSet.contains(PreferenceId.HTTP_AGGREGATION_REQUESTMETHOD)) {    toolBarManager.add(new SwitchHttpCategorizationRequestMethod("Include Request Method in Categorization"));  }  if (preferenceSet.contains(PreferenceId.HTTP_URI_TRANSFORMING)) {    toolBarManager.add(new SwitchHttpUriTransformation("Apply sensor regular expression on URI"));  }  if (preferenceSet.contains(PreferenceId.INVOCATION_SUBVIEW_MODE)) {    toolBarManager.add(new SwitchInvocationSubviewMode("Switch the tabbed views mode from/to aggregated/raw"));  }  toolBarManager.add(new Separator());  if (preferenceSet.contains(PreferenceId.SAMPLINGRATE) || preferenceSet.contains(PreferenceId.TIMELINE)) {    toolBarManager.add(switchPreferences);  }  if (preferenceSet.contains(PreferenceId.STEPPABLE_CONTROL)) {    switchSteppingControl=new SwitchSteppingControl("Stepping control");    toolBarManager.add(switchSteppingControl);  }  if (preferenceSet.contains(PreferenceId.LIVEMODE)) {    toolBarManager.add(switchLiveMode);    MenuManager refreshMenuManager=new MenuManager("Refresh rate");    long currentRefreshRate=PreferencesUtils.getLongValue(PreferencesConstants.REFRESH_RATE);    refreshMenuManager.add(new SetRefreshRateAction("5 (s)",5000,currentRefreshRate));    refreshMenuManager.add(new SetRefreshRateAction("10 (s)",10000,currentRefreshRate));    refreshMenuManager.add(new SetRefreshRateAction("30 (s)",30000,currentRefreshRate));    refreshMenuManager.add(new SetRefreshRateAction("60 (s)",60000,currentRefreshRate));    menuAction.addContributionItem(refreshMenuManager);  }  if (preferenceSet.contains(PreferenceId.UPDATE)) {    toolBarManager.add(new UpdateAction("Update"));  }  if (preferenceSet.contains(PreferenceId.ITEMCOUNT)) {    int currentItemsToShow=PreferencesUtils.getIntValue(PreferencesConstants.ITEMS_COUNT_TO_SHOW);    MenuManager countMenuManager=new MenuManager("Item count to show");    countMenuManager.add(new SetItemCountAction("10",10,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("20",20,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("50",50,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("100",100,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("200",200,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("500",500,currentItemsToShow));    countMenuManager.add(new SetItemCountAction("All...",-1,currentItemsToShow));    menuAction.addContributionItem(countMenuManager);  }  if (preferenceSet.contains(PreferenceId.FILTERDATATYPE)) {    Set<Class<?>> activeDataTypes=PreferencesUtils.getObject(PreferencesConstants.INVOCATION_FILTER_DATA_TYPES);    MenuManager dataTypeMenuManager=new MenuManager("Filter by DataType");    dataTypeMenuManager.add(new FilterByDataTypeAction("Invocation Sequence Data",InvocationSequenceData.class,activeDataTypes));    dataTypeMenuManager.add(new FilterByDataTypeAction("Timer Data",TimerData.class,activeDataTypes));    dataTypeMenuManager.add(new FilterByDataTypeAction("Sql Statement Data",SqlStatementData.class,activeDataTypes));    dataTypeMenuManager.add(new FilterByDataTypeAction("Http Timer Data",HttpTimerData.class,activeDataTypes));    dataTypeMenuManager.add(new FilterByDataTypeAction("Exception Sensor Data",ExceptionSensorData.class,activeDataTypes));    menuAction.addContributionItem(dataTypeMenuManager);  }  if (preferenceSet.contains(PreferenceId.INVOCFILTEREXCLUSIVETIME)) {    double currentInvocFilterExclusive=PreferencesUtils.getDoubleValue(PreferencesConstants.INVOCATION_FILTER_EXCLUSIVE_TIME);    MenuManager timeMenuManager=new MenuManager("Filter Details by Exclusive Time");    timeMenuManager.add(new FilterByExclusiveTimeAction("No filter",Double.NaN,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("0.1 ms",0.1,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("0.2 ms",0.2,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("0.5 ms",0.5,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("1 ms",1.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("2 ms",2.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("5 ms",5.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("10 ms",10.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("50 ms",50.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("100 ms",100.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("200 ms",200.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("500 ms",500.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("1 s",1000.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("1.5 s",1500.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("2 s",2000.0,currentInvocFilterExclusive));    timeMenuManager.add(new FilterByExclusiveTimeAction("5 s",5000.0,currentInvocFilterExclusive));    menuAction.addContributionItem(timeMenuManager);  }  if (preferenceSet.contains(PreferenceId.INVOCFILTERTOTALTIME)) {    double currentInvocFilterTotal=PreferencesUtils.getDoubleValue(PreferencesConstants.INVOCATION_FILTER_TOTAL_TIME);    MenuManager timeMenuManager=new MenuManager("Filter Details by Total Time");    timeMenuManager.add(new FilterByTotalTimeAction("No filter",Double.NaN,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("0.1 ms",0.1,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("0.2 ms",0.2,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("0.5 ms",0.5,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("1 ms",1.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("2 ms",2.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("5 ms",5.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("10 ms",10.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("50 ms",50.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("100 ms",100.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("200 ms",200.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("500 ms",500.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("1 s",1000.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("1.5 s",1500.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("2 s",2000.0,currentInvocFilterTotal));    timeMenuManager.add(new FilterByTotalTimeAction("5 s",5000.0,currentInvocFilterTotal));    menuAction.addContributionItem(timeMenuManager);  }  if (preferenceSet.contains(PreferenceId.TIME_RESOLUTION)) {    MenuManager timeMenuManager=new MenuManager("Time Decimal Places");    int currentDecimalPlaces=PreferencesUtils.getIntValue(PreferencesConstants.DECIMAL_PLACES);    timeMenuManager.add(new SetTimeDecimalPlaces("0",0,currentDecimalPlaces));    timeMenuManager.add(new SetTimeDecimalPlaces("1",1,currentDecimalPlaces));    timeMenuManager.add(new SetTimeDecimalPlaces("2",2,currentDecimalPlaces));    timeMenuManager.add(new SetTimeDecimalPlaces("3",3,currentDecimalPlaces));    menuAction.addContributionItem(timeMenuManager);  }  if (preferenceSet.contains(PreferenceId.JMX_PLOTDATASOLVER)) {    JmxDefinitionDataIdent jmxIdent=inputDefinition.getRepositoryDefinition().getCachedDataService().getJmxDefinitionDataIdentForId(inputDefinition.getIdDefinition().getJmxDefinitionId());    PlotDataSolver currentDataSolver;    Map<String,String> map=PreferencesUtils.getObject(PreferencesConstants.JMX_PLOT_DATA_SOLVER);    if (map.containsKey(jmxIdent.getDerivedFullName())) {      currentDataSolver=PlotDataSolver.valueOf(map.get(jmxIdent.getDerivedFullName()));    } else {      currentDataSolver=PlotDataSolver.DEFAULT;    }    MenuManager jmxPlotDataSolverManager=new MenuManager("Plot as..");    for (    PlotDataSolver dataSolver : PlotDataSolver.values()) {      jmxPlotDataSolverManager.add(new SetJmxPlotDataSolver(dataSolver.getTitle(),dataSolver,currentDataSolver));    }    menuAction.addContributionItem(jmxPlotDataSolverManager);  }  if (menuAction.getSize() > 0) {    toolBarManager.add(menuAction);  }  toolBarManager.update(true);  menuAction.setRunTask(new MenuAction.ToolbarDropDownTask(((ToolBarManager)toolBarManager).getControl()));}  }
class C{  public static int px2dip(Context context,float pxValue){  return (int)(pxValue / context.getResources().getDisplayMetrics().density + 0.5f);}  }
class C{  public boolean containsAny(String string,int startIndex){  for (int i=startIndex; i < string.length(); i++) {    char c=string.charAt(i);    if (bitSet.get(c)) {      return true;    }  }  return false;}  }
class C{  public void test_default_graph_joins_01b() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01b","default-graph-joins-01b.rq","default-graph-joins-01.trig","default-graph-joins-01b.srx").runTest();}  }
class C{  @Override public final void preTearDown() throws Exception {  closeCache();  vm2.invoke(null);  vm0.invoke(null);}  }
class C{  public void test_GetOrder(){  assertEquals("wrong order was reteurned",BigInteger.valueOf(1),ecps.getOrder());}  }
class C{  private void throwIfInterruptible(InterruptedException e) throws InterruptedException {  this.dm.getCancelCriterion().checkCancelInProgress(e);  if (this.dlock.isInterruptibleLockRequest()) {    throw e;  }}  }
class C{  private boolean deliberateLeftTrim(){  boolean result=false;  for (TemplateElement elem=this.nextTerminalNode(); elem != null && elem.beginLine == this.endLine; elem=elem.nextTerminalNode()) {    if (elem instanceof TrimInstruction) {      TrimInstruction ti=(TrimInstruction)elem;      if (!ti.left && !ti.right) {        result=true;      }      if (ti.left) {        result=true;        int lastNewLineIndex=lastNewLineIndex();        if (lastNewLineIndex >= 0 || beginColumn == 1) {          char[] firstPart=substring(text,0,lastNewLineIndex + 1);          char[] lastLine=substring(text,1 + lastNewLineIndex);          if (StringUtil.isTrimmableToEmpty(lastLine)) {            this.text=firstPart;            this.endColumn=0;          } else {            int i=0;            while (Character.isWhitespace(lastLine[i])) {              i++;            }            char[] printablePart=substring(lastLine,i);            this.text=concat(firstPart,printablePart);          }        }      }    }  }  return result;}  }
class C{  public static boolean isIPv6StdAddress(final String input){  return IPV6_STD_PATTERN.matcher(input).matches();}  }
class C{  @SuppressLint("SetTextI18n") @Override public void update(){  sendText.setText("AgeraBroadcastObservable: update() -> " + UUID.randomUUID().toString());}  }
class C{  public static boolean isV6(InetAddress addr){  return addr instanceof Inet6Address;}  }
class C{  public List<FileUnit> listByContainerIdAndPath(String containerId,String path) throws ServiceException {  List<FileUnit> files=new ArrayList<>();  try {    final String command="ls -laF " + path;    String execOutput=dockerService.execCommand(containerId,command);    String containerName=dockerService.getContainerNameFromId(containerId);    ExplorerFilter filter=ExplorerFactory.getInstance().getCustomFilter(containerName);    if (execOutput != null && execOutput.contains("cannot access") == false) {      if (logger.isDebugEnabled()) {        logger.debug(execOutput);      }      StringTokenizer lignes=new StringTokenizer(execOutput,"\n");      while (lignes.hasMoreTokens()) {        String ligne=lignes.nextToken();        if (logger.isDebugEnabled()) {          logger.debug(ligne);        }        if (ligne.startsWith("total"))         continue;        StringTokenizer fields=new StringTokenizer(ligne," ");        String rights=fields.nextToken();        String id=fields.nextToken();        String user=fields.nextToken();        String group=fields.nextToken();        String size=fields.nextToken();        String month=fields.nextToken();        String day=fields.nextToken();        String hour=fields.nextToken();        String name=fields.nextToken();        boolean dir=false;        boolean exec=false;        if (name.endsWith("/")) {          dir=true;          name=name.substring(0,name.length() - 1);        } else {          boolean isNotAuth=FilesUtils.isNotAuthorizedExtension(name);          if (isNotAuth) {            continue;          }        }        if (name.endsWith("*")) {          exec=true;          name=name.substring(0,name.length() - 1);        }        StringBuilder absolutePath=new StringBuilder(128);        absolutePath.append(path).append(name);        if (name.equalsIgnoreCase("."))         continue;        if (name.equalsIgnoreCase(".."))         continue;        FileUnit fileUnit=new FileUnit(name,user,day,month,hour,false,dir,exec,absolutePath.toString());        if (filter.isValid(fileUnit)) {          filter.isRemovable(fileUnit);          filter.isSafe(fileUnit);          files.add(fileUnit);        }      }    }  } catch (  FatalDockerJSONException e) {    throw new ServiceException(containerId,e);  }  return files;}  }
class C{  public static float registersToFloat(byte[] bytes){  return Float.intBitsToFloat((((bytes[0] & 0xff) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8)| (bytes[3] & 0xff)));}  }
class C{  public boolean matches(String query,String text){  return text.contains(query);}  }
class C{  public LineFunction(MultivariateFunction func){  f=func;  dim=f.getNumArguments();  x=new double[dim];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double SEWDmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public boolean complete(){  if (!reassembledDataHasStart || !reassembledDataHasEnd) {    return false;  }  int posCurrent=reassembledDataPosSeqStart;  while ((posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK) != reassembledDataPosSeqEnd) {    if (reassembledDataSize[posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK] <= 0) {      return false;    }    posCurrent++;  }  if (reassembledDataSize[reassembledDataPosSeqEnd] <= 0) {    return false;  }  return true;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  private YLabel findYLabel(int desiredMinimumLabelCount){  double scaledrange=this.getScaledRange();  int labelFactor;  for (int i=0; ylabels[i].grid > 0; i++) {    YLabel thisYLabel=ylabels[i];    if (this.getPixelsPerGridline(thisYLabel) > 5) {      if (im.minval < 0.0 && im.maxval > 0.0) {        labelFactor=findLabelFactor(thisYLabel);        if (labelFactor == -1) {          labelFactor=desiredMinimumLabelCount == 1 ? 1 : desiredMinimumLabelCount + 1;        }        int labelCount=((int)(scaledrange / thisYLabel.grid) / labelFactor) + 1;        if (labelCount > desiredMinimumLabelCount) {          return thisYLabel;        }      } else {        return thisYLabel;      }    }  }  double val=1;  while (val < scaledrange) {    val=val * 10;  }  return new YLabel(val / 10,1,2,5,10);}  }
class C{  public static String ucFirst(String str){  if (str == null)   return null; else   if (str.length() <= 1)   return str.toUpperCase(); else {    return str.substring(0,1).toUpperCase() + str.substring(1);  }}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public static boolean checkIfFileSystemExistsInDB(String filesystemNativeGuid,DbClient dbClient){  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(filesystemNativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  public void removeDocument(int docId) throws Exception {  m_documents.removeNode(docId);}  }
class C{  public FastStringBuffer(){  this(10,15,2);}  }
class C{  private static void CallVoidMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallVoidMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Void,false);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected boolean tableExists(Table t) throws SQLException {  String sql="SELECT * FROM pg_tables WHERE " + (t.isTemporary() ? "" : ("schemaname='" + t.getSchema() + "' AND ")) + "tablename='"+ (t.isTemporary() ? (t.getSchema() + "_") : "")+ t.getName()+ "'";  Statement stmt=dbConn.createStatement();  try {    ResultSet rs=stmt.executeQuery(sql);    return rs.next();  }  finally {    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException e) {      }    }  }}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public void cleanAdapterData(){  if (mMainFeedFragment != null) {    mMainFeedFragment.clearListView();  }  if (mRecommendFragment != null) {    mRecommendFragment.cleanAdapterData();  }}  }
class C{  private void clinkstep4567(DBIDRef id,ArrayDBIDs ids,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  DBIDArrayIter a=ids.iter().seek(n - 1);{    DBIDVar p_i=DBIDUtil.newVar();    for (it.seek(n - 1); it.valid(); it.retract()) {      double l_i=lambda.doubleValue(it);      double mp_i=m.doubleValue(p_i.from(pi,it));      if (l_i >= mp_i) {        if (m.doubleValue(it) < m.doubleValue(a)) {          a.seek(it.getOffset());        }      } else {        m.putDouble(it,Double.POSITIVE_INFINITY);      }    }  }  DBIDVar b=DBIDUtil.newVar().from(pi,a);  double c=lambda.doubleValue(a);  pi.putDBID(a,id);  lambda.putDouble(a,m.doubleValue(a));  if (a.getOffset() < n - 1) {    DBIDRef last=DBIDUtil.newVar(it.seek(n - 1));    DBIDVar d=DBIDUtil.newVar();    while (!DBIDUtil.equal(b,id)) {      if (DBIDUtil.equal(b,last)) {        pi.putDBID(b,id);        lambda.putDouble(b,c);        break;      }      d.from(pi,b);      pi.putDBID(b,id);      c=lambda.putDouble(b,c);      b.set(d);    }  }}  }
class C{  public synchronized boolean increase(Bitmap bitmap){  final int bitmapSize=BitmapUtil.getSizeInBytes(bitmap);  if (mCount >= mMaxCount || mSize + bitmapSize > mMaxSize) {    return false;  }  mCount++;  mSize+=bitmapSize;  return true;}  }
class C{  private Vector2 screenToWorld(Point p,Dimension size,Vector2 offset,double scale){  Vector2 v=new Vector2();  double x=p.x;  double y=p.y;  double w=size.getWidth();  double h=size.getHeight();  double ox=offset.x;  double oy=offset.y;  v.x=(x - w * 0.5) / scale - ox;  v.y=-((y - h * 0.5) / scale + oy);  return v;}  }
class C{  public void addPokemon() throws IOException {  Pokemon[] pokemons=Data.POKEMONS;  for (  Pokemon pokemon : pokemons) {    Document document=makeDocument(pokemon);    indexWriter.addDocument(document);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static String[] colors(final Rule rule){  final Set<String> colorSet=new HashSet<String>();  Color color=null;  for (  final Symbolizer sym : rule.symbolizers()) {    if (sym instanceof PolygonSymbolizer) {      final PolygonSymbolizer symb=(PolygonSymbolizer)sym;      color=polyFill(symb);    } else     if (sym instanceof LineSymbolizer) {      final LineSymbolizer symb=(LineSymbolizer)sym;      color=color(symb);    } else     if (sym instanceof PointSymbolizer) {      final PointSymbolizer symb=(PointSymbolizer)sym;      color=pointFillWithAlpha(symb);    }    if (color != null) {      colorSet.add(SLD.colorToHex(color));    }  }  if (colorSet.size() > 0) {    return colorSet.toArray(new String[0]);  } else {    return new String[0];  }}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  protected static SimpleTree processTree(Tree tree,HiddenLinkageModel hlm){  TaxonList reads=hlm.getData().getReadsTaxa();  TaxonList reference=hlm.getData().getReferenceTaxa();  int nodeCount=tree.getTaxonCount() + reads.getTaxonCount();  nodeCount=2 * nodeCount - 1;  SimpleNode[] nodes=new SimpleNode[nodeCount];  for (int i=0; i < nodes.length; i++) {    nodes[i]=new SimpleNode();    nodes[i].setNumber(i);  }  SimpleNode root=null;  for (int i=0; i < tree.getNodeCount(); i++) {    NodeRef n=tree.getNode(i);    for (int cI=0; cI < tree.getChildCount(n); cI++) {      NodeRef c1=tree.getChild(n,cI);      nodes[n.getNumber()].addChild(nodes[c1.getNumber()]);    }    nodes[n.getNumber()].setHeight(tree.getNodeHeight(n));    nodes[n.getNumber()].setRate(tree.getNodeRate(n));    nodes[n.getNumber()].setTaxon(tree.getNodeTaxon(n));  }  root=nodes[tree.getRoot().getNumber()];  int nextFree=tree.getNodeCount();  int readI=0;  for (int i=reference.getTaxonCount(); i < reference.getTaxonCount() + reads.getTaxonCount(); i++) {    SimpleNode tmp=nodes[nextFree];    nodes[nextFree]=nodes[i];    nodes[nextFree].setNumber(nextFree);    nodes[i]=tmp;    nodes[i].setNumber(i);    nodes[i].setTaxon(reads.getTaxon(readI));    readI++;    nextFree++;  }  for (int i=0; i < nodes.length; i++) {    SimpleNode n=nodes[i];    if (n.getTaxon() == null)     continue;    if (reads.getTaxonIndex(n.getTaxon()) >= 0 || reference.getTaxonIndex(n.getTaxon()) >= 0)     continue;    int gid=hlm.getTaxonIndex(n.getTaxon()) - reference.getTaxonCount();    if (gid < 0) {      System.err.println("big trouble, little china");    }    Set<Taxon> group=hlm.getGroup(gid);    if (group.size() == 0) {      SimpleNode parent=n.getParent();      parent.removeChild(n);      if (parent.getChildCount() == 1) {        SimpleNode grandparent=parent.getParent();        SimpleNode child=parent.getChild(0);        parent.removeChild(child);        if (grandparent == null) {          root=child;        } else {          grandparent.removeChild(parent);          grandparent.addChild(child);        }      }    } else     if (group.size() == 1) {      Taxon[] tax=new Taxon[group.size()];      tax=(Taxon[])group.toArray(tax);      int rI=getTaxonNode(tax[0],nodes);      SimpleNode parent=n.getParent();      parent.removeChild(n);      parent.addChild(nodes[rI]);    } else {      Taxon[] tax=new Taxon[group.size()];      tax=(Taxon[])group.toArray(tax);      SimpleNode parent=n.getParent();      parent.removeChild(n);      parent.addChild(nodes[nextFree]);      int tI=0;      for (; tI < tax.length - 2; tI++) {        int rI=getTaxonNode(tax[tI],nodes);        nodes[nextFree].addChild(nodes[rI]);        nodes[nextFree].addChild(nodes[nextFree + 1]);        nextFree++;      }      int rI=getTaxonNode(tax[tI],nodes);      nodes[nextFree].addChild(nodes[rI]);      int rJ=getTaxonNode(tax[tI + 1],nodes);      nodes[nextFree].addChild(nodes[rJ]);      nextFree++;    }  }  SimpleTree st=new SimpleTree(root);  return st;}  }
class C{  public ConsoleHandler(){  sealed=false;  configure();  setOutputStream(System.err);  sealed=true;}  }
class C{  @Override public void before(final DerivationState state,int level,int tailNodeIndex){  apply(state.edge.getRule(),tailNodeIndex);}  }
class C{  public static Insets of(Rect r){  return (r == null) ? NONE : of(r.left,r.top,r.right,r.bottom);}  }
class C{  public void toArray(double[] values){  if (values.length < size)   throw new IllegalArgumentException("values too small");  if (this.isNoView)   System.arraycopy(this.elements,0,values,0,this.elements.length); else   super.toArray(values);}  }
class C{  @SuppressWarnings("unchecked") public void testMetaStore(){  MetaStore meta=createMetaStore();  assertEquals(meta.loadTerm(),0);  assertEquals(meta.loadVote(),0);  meta.storeTerm(1);  meta.storeVote(2);  assertEquals(meta.loadTerm(),1);  assertEquals(meta.loadVote(),2);  Collection<Member> members=new ArrayList<>(Arrays.asList(new TestMember(Member.Type.ACTIVE,new Address("localhost",5000),new Address("localhost",6000)),new TestMember(Member.Type.ACTIVE,new Address("localhost",5001),new Address("localhost",6001)),new TestMember(Member.Type.ACTIVE,new Address("localhost",5002),new Address("localhost",6002))));  meta.storeConfiguration(new Configuration(1,1,System.currentTimeMillis(),members));  Configuration configuration=meta.loadConfiguration();  assertEquals(configuration.index(),1);  assertTrue(configuration.members().contains(new TestMember(Member.Type.ACTIVE,new Address("localhost",5000),new Address("localhost",6000))));  assertTrue(configuration.members().contains(new TestMember(Member.Type.ACTIVE,new Address("localhost",5001),new Address("localhost",6001))));  assertTrue(configuration.members().contains(new TestMember(Member.Type.ACTIVE,new Address("localhost",5002),new Address("localhost",6002))));}  }
class C{  public DError(JFrame parent,Throwable error){  super(parent,res.getString("DError.Title"),ModalityType.DOCUMENT_MODAL);  this.error=error;  initComponents();}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  public T updateKey(boolean updateKey){  return (T)this;}  }
class C{  public static String unwrap(String fileName){  return FilePath.get(fileName).unwrap().toString();}  }
class C{  public synchronized void removeAttacksFor(Entity e){  if (e == null) {    return;  }  int entityId=e.getId();  for (Iterator<AttackSprite> i=attackSprites.iterator(); i.hasNext(); ) {    AttackSprite sprite=i.next();    if (sprite.getEntityId() == entityId) {      i.remove();    }  }  repaint(100);}  }
class C{  boolean ignoreTypeConflict(Method m,Typeref to_ty,Typeref from_ty){  boolean result=to_ty.t.getName().name.startsWith("global") && from_ty.t.getName().name.startsWith("global");  result|=from_ty.t.equals(m.activation.t) && to_ty.t.equals(m.activation.t);  return result;}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,tuple,null);}  }
class C{  @NotNull public static Query<PsiReference> search(@NotNull PsiElement element,@NotNull SearchScope searchScope,boolean ignoreAccessScope){  return search(new SearchParameters(element,searchScope,ignoreAccessScope));}  }
class C{  public X509CertificatePair(){}  }
class C{  private void initialize(){  model=new Model<SelectableMultiPoint>();  model.setListener(this);  rangeQueryAlgorithm=new BruteForceRangeQuery(model);  this.setSize(800,720);  this.setContentPane(getPanel());  this.setTitle("Algorithms in a Nutshell: Range Query Example");}  }
class C{  public GT_BaseCrop(int aID,String aCropName,String aDiscoveredBy,ItemStack aBaseSeed,int aTier,int aMaxSize,int aGrowthSpeed,int aAfterHarvestSize,int aHarvestSize,int aStatChemical,int aStatFood,int aStatDefensive,int aStatColor,int aStatWeed,String[] aAttributes,ItemStack aDrop,ItemStack[] aSpecialDrops){  new GT_BaseCrop(aID,aCropName,aDiscoveredBy,aBaseSeed,aTier,aMaxSize,aGrowthSpeed,aAfterHarvestSize,aHarvestSize,aStatChemical,aStatFood,aStatDefensive,aStatColor,aStatWeed,aAttributes,null,aDrop,aSpecialDrops);}  }
class C{  @Override public void onPageStarted(AmazonWebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  String newloc="";  if (url.startsWith("http:") || url.startsWith("https:") || url.startsWith("file:")) {    newloc=url;  } else   if (url.startsWith(AmazonWebView.SCHEME_TEL)) {    try {      Intent intent=new Intent(Intent.ACTION_DIAL);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error dialing " + url + ": "+ e.toString());    }  } else   if (url.startsWith("geo:") || url.startsWith(AmazonWebView.SCHEME_MAILTO) || url.startsWith("market:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error with " + url + ": "+ e.toString());    }  } else   if (url.startsWith("sms:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      String address=null;      int parmIndex=url.indexOf('?');      if (parmIndex == -1) {        address=url.substring(4);      } else {        address=url.substring(4,parmIndex);        Uri uri=Uri.parse(url);        String query=uri.getQuery();        if (query != null) {          if (query.startsWith("body=")) {            intent.putExtra("sms_body",query.substring(5));          }        }      }      intent.setData(Uri.parse("sms:" + address));      intent.putExtra("address",address);      intent.setType("vnd.android-dir/mms-sms");      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error sending sms " + url + ":"+ e.toString());    }  } else {    newloc="http://" + url;  }  if (!newloc.equals(edittext.getText().toString())) {    edittext.setText(newloc);  }  try {    JSONObject obj=new JSONObject();    obj.put("type",LOAD_START_EVENT);    obj.put("url",newloc);    sendUpdate(obj,true);  } catch (  JSONException ex) {    Log.d(LOG_TAG,"Should never happen");  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float x=event.getX();  float y=event.getY();switch (event.getAction()) {case MotionEvent.ACTION_DOWN:{      return true;    }case MotionEvent.ACTION_UP:{    if (mButtonRegion.contains((int)x,(int)y)) {      if (onClickListener != null)       onClickListener.onClick(this);    }  }break;}return super.onTouchEvent(event);}  }
class C{  public boolean sslEnabled(){  return reader.getBoolean(SSL_ENABLED,DEFAULT_SSL_ENABLED);}  }
class C{  public static Array2DRowRealMatrix convertToArray2DRowRealMatrix(MatrixObject mo) throws DMLRuntimeException {  MatrixBlock mb=mo.acquireRead();  double[][] data=DataConverter.convertToDoubleMatrix(mb);  mo.release();  return new Array2DRowRealMatrix(data,false);}  }
class C{  public SoftCachingModuleScriptProvider(ModuleSourceProvider moduleSourceProvider){  super(moduleSourceProvider);}  }
class C{  public KillContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public static Range iterateRangeBounds(XYDataset dataset,boolean includeInterval){  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int seriesCount=dataset.getSeriesCount();  if (includeInterval && dataset instanceof IntervalXYDataset) {    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double value=ixyd.getYValue(series,item);        double lvalue=ixyd.getStartYValue(series,item);        double uvalue=ixyd.getEndYValue(series,item);        if (!Double.isNaN(value)) {          minimum=Math.min(minimum,value);          maximum=Math.max(maximum,value);        }        if (!Double.isNaN(lvalue)) {          minimum=Math.min(minimum,lvalue);          maximum=Math.max(maximum,lvalue);        }        if (!Double.isNaN(uvalue)) {          minimum=Math.min(minimum,uvalue);          maximum=Math.max(maximum,uvalue);        }      }    }  } else   if (includeInterval && dataset instanceof OHLCDataset) {    OHLCDataset ohlc=(OHLCDataset)dataset;    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double lvalue=ohlc.getLowValue(series,item);        double uvalue=ohlc.getHighValue(series,item);        if (!Double.isNaN(lvalue)) {          minimum=Math.min(minimum,lvalue);        }        if (!Double.isNaN(uvalue)) {          maximum=Math.max(maximum,uvalue);        }      }    }  } else {    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double value=dataset.getYValue(series,item);        if (!Double.isNaN(value)) {          minimum=Math.min(minimum,value);          maximum=Math.max(maximum,value);        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  @LargeTest public void testStressOverlayTransKenBurn() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String OverlayFile3=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final String audioFilename4=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";  int i=0;  final String[] loggingInfo=new String[1];  writeTestCaseHeader("testStressOverlayTransKenBurn");  getBeginMemory();  for (i=0; i < 10; i++) {    final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);    mVideoEditor.addMediaItem(mediaItem1);    mediaItem1.setExtractBoundaries(0,10000);    final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);    mVideoEditor.addMediaItem(mediaItem2);    final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem1,"effect1" + i,(mediaItem1.getDuration() - 4000),4000,EffectColor.TYPE_SEPIA,0);    mediaItem1.addEffect(effectColor1);    final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF" + i,mediaItem1,mediaItem2,4000,Transition.BEHAVIOR_MIDDLE_FAST);    mVideoEditor.addTransition(tranCrossfade);    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(OverlayFile3,640,480);    final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaItem1,"overlay" + i,mBitmap,1000,5000);    mediaItem1.addOverlay(overlayFrame);    final Rect startRect=new Rect((mediaItem2.getHeight() / 3),(mediaItem2.getWidth() / 3),(mediaItem2.getHeight() / 2),(mediaItem2.getWidth() / 2));    final Rect endRect=new Rect(0,0,mediaItem2.getWidth(),mediaItem2.getHeight());    final EffectKenBurns kbEffectOnMediaItem=new EffectKenBurns(mediaItem2,"KBOnM2" + i,startRect,endRect,500,(mediaItem2.getDuration() - 500));    mediaItem2.addEffect(kbEffectOnMediaItem);    if (i == 5) {      final AudioTrack audioTrack1=new AudioTrack(mVideoEditor,"Audio Track1",audioFilename4);      mVideoEditor.addAudioTrack(audioTrack1);    }    getAfterMemory_updateLog(loggingInfo,false,i);  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 10; i++) {    MediaImageItem m2=(MediaImageItem)mVideoEditor.getMediaItem("m2" + i);    MediaVideoItem m1=(MediaVideoItem)mVideoEditor.getMediaItem("m1" + i);    m2.removeEffect("KBOnM2" + i);    m1.removeOverlay("overlay" + i);    mVideoEditor.removeTransition("transCF" + i);    m1.removeEffect("effect1" + i);    mVideoEditor.removeMediaItem("m2" + i);    mVideoEditor.removeMediaItem("m1" + i);    if (i == 5) {      mVideoEditor.removeAudioTrack("Audio Track1");    }    getAfterMemory_updateLog(loggingInfo,true,i);  }  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  private void updateTaskProgressOnView(double progress,String message){  navigationController.setStatusProgress(progress);  navigationController.setStatusMessage(message);}  }
class C{  public AsyncBufferedOutputStream(OutputStream out){  this(out,8 * 1024,5);}  }
class C{  public static File file(long restaurantId){  return file(-1L,restaurantId);}  }
class C{  @ObjectiveCName("onAppVisible") public void onAppVisible(){  modules.getEvents().postSticky(new AppVisibleChanged(true));}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.300 -0500",hash_original_method="BAE559B7BC959F87E1981FBD6EC47DF5",hash_generated_method="377DD85131999AE19481B91ABB7D40E4") public int updateNetwork(WifiConfiguration config){  if (config == null || config.networkId < 0) {    return -1;  }  return addOrUpdateNetwork(config);}  }
class C{  public LagReader(String inputFileName) throws FileNotFoundException {  br=new BufferedReader(new FileReader(inputFileName));}  }
class C{  public void nextNull(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_NULL) {    peeked=PEEKED_NONE;  } else {    throw createParseError("Expected null but was " + peek());  }}  }
class C{  public static void main(String[] args){  new SDRTrunk();}  }
class C{  public List<List<Integer>> findLeaves(TreeNode root){  List<List<Integer>> res=new ArrayList<>();  height(root,res);  return res;}  }
class C{  public boolean hasHeight(){  return getHeight() != null;}  }
class C{  private void debug(String text){  if (ClientGlobal.debug) {    System.out.println(text);  }}  }
class C{  public void addExceptionHandler(int start,int end,int handler,int type){  tryblocks.add(start,end,handler,type);}  }
class C{  public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  public void visitClassType(String name){}  }
class C{  private int dodecode64(ByteBuffer infile,LongArrayPointer a,byte[] nbitplanes){  int nel=this.nx * this.ny;  int nx2=(this.nx + 1) / 2;  int ny2=(this.ny + 1) / 2;  for (int i=0; i < nel; i++) {    a.set(i,0);  }  startInputingBits();  qtreeDecode64(infile,a.copy(0),this.ny,nx2,ny2,nbitplanes[0]);  qtreeDecode64(infile,a.copy(ny2),this.ny,nx2,this.ny / 2,nbitplanes[1]);  qtreeDecode64(infile,a.copy(this.ny * nx2),this.ny,this.nx / 2,ny2,nbitplanes[1]);  qtreeDecode64(infile,a.copy(this.ny * nx2 + ny2),this.ny,this.nx / 2,this.ny / 2,nbitplanes[2]);  if (inputNybble(infile) != 0) {    throw new RuntimeException("Compression error");  }  startInputingBits();  for (int i=0; i < nel; i++) {    if (a.get(i) != 0) {      if (inputBit(infile) != 0) {        a.set(i,-a.get(i));      }    }  }  return 0;}  }
class C{  private float dpToPx(float dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getContext().getResources().getDisplayMetrics());}  }
class C{  private String replaceVariables(final String css,final Map<String,String> variables){  final StringBuffer sb=new StringBuffer();  final Matcher m=PATTERN_VARIABLE_HOLDER.matcher(css);  while (m.find()) {    final String oldMatch=m.group();    final String variableName=m.group(1);    final String variableValue=variables.get(variableName);    if (variableValue != null) {      final String newReplacement=oldMatch.replace(oldMatch,variableValue);      m.appendReplacement(sb,newReplacement.trim());    } else {      LOG.warn("No variable with name " + variableName + " was found!");    }  }  m.appendTail(sb);  return sb.toString();}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  try {    if (key instanceof java.security.interfaces.DSAPublicKey) {      if (key instanceof sun.security.provider.DSAPublicKey) {        return key;      }      DSAPublicKeySpec dsaPubKeySpec=engineGetKeySpec(key,DSAPublicKeySpec.class);      return engineGeneratePublic(dsaPubKeySpec);    } else     if (key instanceof java.security.interfaces.DSAPrivateKey) {      if (key instanceof sun.security.provider.DSAPrivateKey) {        return key;      }      DSAPrivateKeySpec dsaPrivKeySpec=engineGetKeySpec(key,DSAPrivateKeySpec.class);      return engineGeneratePrivate(dsaPrivKeySpec);    } else {      throw new InvalidKeyException("Wrong algorithm type");    }  } catch (  InvalidKeySpecException e) {    throw new InvalidKeyException("Cannot translate key: " + e.getMessage());  }}  }
class C{  @Override public Parse filter(String url,WebPage page,Parse parse,HTMLMetaTags metaTags,DocumentFragment doc){  URL base;  try {    base=new URL(page.getBaseUrl().toString());    Walker.walk(doc,base,page,getConf());  } catch (  Exception e) {    LOG.error("Error parsing " + url,e);    return ParseStatusUtils.getEmptyParse(e,getConf());  }  return parse;}  }
class C{  private Shape decodeCornerBorder(int width,int height){  return shapeGenerator.createRectangle(0,0,width,height);}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.labelFormat);  result=HashUtilities.hashCode(result,this.numberFormat);  result=HashUtilities.hashCode(result,this.percentFormat);  return result;}  }
class C{  public boolean isIntraClassPair(){  return type.equals(DefUsePairType.INTRA_CLASS);}  }
class C{  private void unmapSessionToUser(RequestAndResponse requestAndResponse){  requestAndResponse.request.getSession().removeAttribute(sessionUserIdAttribute);}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] probOfClassGivenDoc=new double[m_numClasses];  double[] logDocGivenClass=new double[m_numClasses];  for (int c=0; c < m_numClasses; c++) {    logDocGivenClass[c]+=Math.log(m_probOfClass[c]);    int allWords=0;    for (int i=0; i < instance.numValues(); i++) {      if (instance.index(i) == instance.classIndex()) {        continue;      }      double frequencies=instance.valueSparse(i);      allWords+=frequencies;      logDocGivenClass[c]+=frequencies * Math.log(m_probOfWordGivenClass[c][instance.index(i)]);    }    logDocGivenClass[c]-=allWords * Math.log(m_wordsPerClass[c]);  }  double max=logDocGivenClass[Utils.maxIndex(logDocGivenClass)];  for (int i=0; i < m_numClasses; i++) {    probOfClassGivenDoc[i]=Math.exp(logDocGivenClass[i] - max);  }  Utils.normalize(probOfClassGivenDoc);  return probOfClassGivenDoc;}  }
class C{  private NeuronDialog(final Collection<NeuronNode> selectedNeurons,final Frame parent){  super(parent,"Neuron Dialog");  neuronList=getNeuronList(selectedNeurons);}  }
class C{  public void testRecoverAfterClose(){  appendEntries(entriesPerSegment * 5);  assertEquals(log.length(),entriesPerSegment * 5);  log.close();  try (Log log=createLog()){    assertEquals(log.length(),entriesPerSegment * 5);    for (long i=log.firstIndex(); i <= log.lastIndex(); i++) {      try (Entry entry=log.get(i)){        assertEquals(entry.getIndex(),i);      }     }  } }  }
class C{  public int numSquares1(int n){  while (n % 4 == 0)   n/=4;  if (n % 8 == 7)   return 4;  for (int a=0; a * a <= n; a++) {    int b=(int)Math.sqrt(n - a * a);    if (a * a + b * b == n) {      return 1 + (a > 0 ? 1 : 0);    }  }  return 3;}  }
class C{  public static Codec[] generateDecodingCodecChain(String encoding){  if (encoding.equalsIgnoreCase(H264VideoFormat.ENCODING)) {    Codec[] chain={new com.gsma.rcs.core.ims.protocol.rtp.codec.video.h264.JavaDepacketizer()};    return chain;  }  return new Codec[0];}  }
class C{  static ArrayList<String> loadImage(File file) throws FileNotFoundException, RuntimeException {  if (file == null)   return null;  Scanner sc;  sc=new Scanner(file);  ArrayList<String> rows=new ArrayList<String>();  String s=sc.nextLine();  int len=s.length();  int idx=1;  rows.add(s);  while (sc.hasNext()) {    idx++;    s=sc.nextLine();    if (s.length() != len) {      sc.close();      throw new RuntimeException("Line " + idx + " only has "+ s.length()+ " characters (should have "+ len+ ")");    }    rows.add(s);  }  sc.close();  return rows;}  }
class C{  public TN4Classifier createTN4Classifier(){  TN4ClassifierImpl tn4Classifier=new TN4ClassifierImpl();  return tn4Classifier;}  }
class C{  public HttpURL(final String host,final int port,final String path,final String query) throws URIException {  this(null,null,host,port,path,query,null);}  }
class C{  @Override public Phase finalPhase(){  return self;}  }
class C{  public void readFromNode(Node d){  super.readFromNode(d);  assert (d.getNodeName().equals("ModelDesign"));  for (  Node n : DOMUtils.getChildrenByName(d,"DataType")) {    DataType e=new DataType();    e.readFromNode(n);    dataTypes.add(e);  }}  }
class C{  @Deprecated public URI(final String original,final String charset) throws URIException {  protocolCharset=charset;  parseUriReference(original,false);}  }
class C{  public RefUpdate.Result deleteFile(ChangeEdit edit,String file) throws AuthException, InvalidChangeOperationException, IOException {  return modify(TreeOperation.DELETE_ENTRY,edit,file,null,null);}  }
class C{  public boolean removeAnimationListener(AnimationListener listener){  return mListeners.remove(listener);}  }
class C{  private void initialize(){  if (selection != null && !selection.isEmpty() && selection instanceof IStructuredSelection) {    IStructuredSelection ssel=(IStructuredSelection)selection;    if (ssel.size() > 1) {      return;    }    Object obj=ssel.getFirstElement();    IResource resource=null;    if (obj instanceof IResource) {      resource=(IResource)obj;    } else     if (obj != null && obj.getClass().getName().equals("org.eclipse.jdt.core.IJavaElement")) {      try {        resource=(IResource)obj.getClass().getMethod("getResource").invoke(obj);      } catch (      Exception e) {        throw new RuntimeException("Error in reflection code",e);      }    }    if (resource != null) {      IContainer container=null;      if (resource instanceof IContainer) {        container=(IContainer)resource;      } else {        container=resource.getParent();      }      containerText.setText(container.getFullPath().toString());    }  }  fileText.setText("new_diagram." + Program.getInstance().getExtension());}  }
class C{  public Object next(){  if (filesIndex == files.size())   return null;  File current=files.get(filesIndex++);  String label=current.getAbsolutePath();  int lastSeparator=label.lastIndexOf(File.separatorChar);  label=label.substring(label.lastIndexOf(File.separatorChar,lastSeparator - 1) + 1,lastSeparator);  return fileToArray(current,label);}  }
class C{  protected ImageWriteParam(){}  }
class C{  private void touchLastCorpusLoadTime(){  this.lastCorpusLoadTime=System.currentTimeMillis();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public byte[] serializeToByteArray(final Set<String> fontsAlreadyOnClient) throws IOException {  final ByteArrayOutputStream bos=new ByteArrayOutputStream();  bos.write(1);  bos.write(1);  bos.write(rawPageNumber);  text_color.trim();  stroke_color.trim();  fill_color.trim();  stroke.trim();  pageObjects.trim();  javaObjects.trim();  stroke.trim();  pageObjects.trim();  javaObjects.trim();  shapeType.trim();  af1.trim();  af2.trim();  af3.trim();  af4.trim();  clips.trim();  objectType.trim();  if (opacity != null) {    opacity.trim();  }  if (BMvalues != null) {    BMvalues.trim();  }  if (TRvalues != null) {    TRvalues.trim();  }  if (fs != null) {    fs.trim();  }  if (lw != null) {    lw.trim();  }  RenderUtils.writeToStream(bos,x_coord);  RenderUtils.writeToStream(bos,y_coord);  RenderUtils.writeToStream(bos,text_color);  RenderUtils.writeToStream(bos,textFillType);  stroke_color.writeToStream(bos);  fill_color.writeToStream(bos);  stroke.writeToStream(bos);  pageObjects.writeToStream(bos);  RenderUtils.writeToStream(bos,javaObjects);  RenderUtils.writeToStream(bos,shapeType);  RenderUtils.writeToStream(bos,af1);  RenderUtils.writeToStream(bos,af2);  RenderUtils.writeToStream(bos,af3);  RenderUtils.writeToStream(bos,af4);  clips.writeToStream(bos);  RenderUtils.writeToStream(bos,objectType);  RenderUtils.writeToStream(bos,opacity);  RenderUtils.writeToStream(bos,BMvalues);  RenderUtils.writeToStream(bos,TRvalues);  RenderUtils.writeToStream(bos,fs);  RenderUtils.writeToStream(bos,lw);  int fontCount=0, updateCount=0;  final Set<String> fontsAlreadySent=new HashSet<String>(10);  final Set<String> newFontsToSend=new HashSet<String>(10);  for (  final String fontUsed : fontsUsed) {    if (!fontsAlreadyOnClient.contains(fontUsed)) {      fontCount++;      newFontsToSend.add(fontUsed);    } else {      updateCount++;      fontsAlreadySent.add(fontUsed);    }  }  RenderUtils.writeToStream(bos,fontCount);  for (  String key : newFontsToSend) {    RenderUtils.writeToStream(bos,key);    RenderUtils.writeToStream(bos,fonts.get(key));    fontsAlreadyOnClient.add(key);  }  RenderUtils.writeToStream(bos,updateCount);  for (  String key : fontsAlreadySent) {    RenderUtils.writeToStream(bos,key);    final PdfJavaGlyphs aa=(PdfJavaGlyphs)fonts.get(key);    RenderUtils.writeToStream(bos,aa.getDisplayValues());    RenderUtils.writeToStream(bos,aa.getCharGlyphs());    RenderUtils.writeToStream(bos,aa.getEmbeddedEncs());  }  bos.close();  fontsUsed.clear();  return bos.toByteArray();}  }
class C{  public int hashCode(Object obj){  return obj.hashCode();}  }
class C{  public static ConcurrentModificationException convertToApi(org.oscm.internal.types.exception.ConcurrentModificationException oldEx){  return convertExceptionToApi(oldEx,ConcurrentModificationException.class);}  }
class C{  private static HashSet<Object> cloneIssuerNames(Collection<Object> names){  try {    return cloneAndCheckIssuerNames(names);  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public static String bcdToString(byte[] data,int offset,int length){  StringBuilder ret=new StringBuilder(length * 2);  for (int i=offset; i < offset + length; i++) {    int v;    v=data[i] & 0xf;    if (v > 9)     break;    ret.append((char)('0' + v));    v=(data[i] >> 4) & 0xf;    if (v == 0xf)     continue;    if (v > 9)     break;    ret.append((char)('0' + v));  }  return ret.toString();}  }
class C{  public void printUsage(){  out(getUsageString());}  }
class C{  @Override public void run(){  while (true) {    TimerTask task;synchronized (this) {      if (cancelled) {        return;      }      if (tasks.isEmpty()) {        if (finished) {          return;        }        try {          this.wait();        } catch (        InterruptedException ignored) {        }        continue;      }      long currentTime=System.currentTimeMillis();      task=tasks.minimum();      long timeToSleep;synchronized (task.lock) {        if (task.cancelled) {          tasks.delete(0);          continue;        }        timeToSleep=task.when - currentTime;      }      if (timeToSleep > 0) {        try {          this.wait(timeToSleep);        } catch (        InterruptedException ignored) {        }        continue;      }synchronized (task.lock) {        int pos=0;        if (tasks.minimum().when != task.when) {          pos=tasks.getTask(task);        }        if (task.cancelled) {          tasks.delete(tasks.getTask(task));          continue;        }        task.setScheduledTime(task.when);        tasks.delete(pos);        if (task.period >= 0) {          if (task.fixedRate) {            task.when=task.when + task.period;          } else {            task.when=System.currentTimeMillis() + task.period;          }          insertTask(task);        } else {          task.when=0;        }      }    }    boolean taskCompletedNormally=false;    try {      task.run();      taskCompletedNormally=true;    }  finally {      if (!taskCompletedNormally) {synchronized (this) {          cancelled=true;        }      }    }  }}  }
class C{  public boolean NE(Word w2){  return value.NE(w2.value);}  }
class C{  public List<Branch> retrieveBranchesInMethod(String className,String methodName){  List<Branch> r=new ArrayList<Branch>();  if (branchMap.get(className) == null)   return r;  List<Branch> branches=branchMap.get(className).get(methodName);  if (branches != null)   r.addAll(branches);  return r;}  }
class C{  public static boolean addGetterSetterProposal(IInvocationContext context,ASTNode coveringNode,IProblemLocation[] locations,ArrayList<ICommandAccess> resultingCollections){  if (locations != null) {    for (int i=0; i < locations.length; i++) {      int problemId=locations[i].getProblemId();      if (problemId == IProblem.UnusedPrivateField)       return false;      if (problemId == IProblem.UnqualifiedFieldAccess)       return false;    }  }  return addGetterSetterProposal(context,coveringNode,resultingCollections,IProposalRelevance.GETTER_SETTER_QUICK_ASSIST);}  }
class C{  public static boolean isLocalCameraUri(Uri uri){  String uriString=uri.toString();  return uriString.startsWith(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString()) || uriString.startsWith(MediaStore.Images.Media.INTERNAL_CONTENT_URI.toString());}  }
class C{  public static String encodeFragment(String value){  return encodeValue(value,queryNameValueEncoding);}  }
class C{  public void start() throws Exception {  ldapServer.start();  connectionFactory=new LdapConnectionFactoryProvider(url,null,getAdminDn(),getAdminPassword(),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null).get();}  }
class C{  @Override public void perform(IR ir){  RegisterAllocatorState regAllocState=ir.MIRInfo.regAllocState;  for (  GCIRMapElement GCelement : ir.MIRInfo.gcIRMap) {    if (LinearScan.GC_DEBUG) {      VM.sysWrite("GCelement " + GCelement);    }    for (    RegSpillListElement elem : GCelement.regSpillList()) {      Register symbolic=elem.getSymbolicReg();      if (LinearScan.GC_DEBUG) {        VM.sysWrite("get location for " + symbolic + '\n');      }      if (symbolic.isAllocated()) {        Register ra=regAllocState.getMapping(symbolic);        elem.setRealReg(ra);        if (LinearScan.GC_DEBUG) {          VM.sysWrite(ra + "\n");        }      } else       if (symbolic.isSpilled()) {        int spill=ir.MIRInfo.regAllocState.getSpill(symbolic);        elem.setSpill(spill);        if (LinearScan.GC_DEBUG) {          VM.sysWrite(spill + "\n");        }      } else {        OptimizingCompilerException.UNREACHABLE("LinearScan","register not alive:",symbolic.toString());      }    }  }}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  private double transEnd(double value,Rectangle2D area,RectangleEdge edge,double length1,double length2){  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    max=area.getMaxX();    min=area.getMaxX() - area.getWidth() * length2 / (length1 + length2);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    max=area.getMinY();    min=area.getMinY() + area.getHeight() * length2 / (length1 + length2);  }  if (isInverted()) {    return max - ((value - this.fixedRange.getLowerBound()) / (this.displayEnd - this.fixedRange.getLowerBound())) * (max - min);  } else {    return min + ((value - this.fixedRange.getLowerBound()) / (this.displayEnd - this.fixedRange.getLowerBound())) * (max - min);  }}  }
class C{  protected AbstractHttpParams(){  super();}  }
class C{  public boolean isSecondary(){  return (this.bits & ASTNode.IsSecondaryType) != 0;}  }
class C{  @Override public void onMessage(Context context,Intent intent){  String id=intent.getStringExtra("id");  String operation=intent.getStringExtra("operation");  String emailAddress=intent.getStringExtra("emailAddress");  Log.i(CloudNotesActivity.TAG,"id=" + id + ", operation="+ operation+ ", emailAddress="+ emailAddress);  NoteApplication app=(NoteApplication)getApplication();  if (emailAddress.equals(app.getEmailAddress())) {    app.notifyListener(id,operation);  }}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (key == null) {    throw new IllegalStateException("ElGamal engine not initialised");  }  int maxLength=forEncryption ? (bitSize - 1 + 7) / 8 : getInputBlockSize();  if (inLen > maxLength) {    throw new DataLengthException("input too large for ElGamal cipher.\n");  }  BigInteger p=key.getParameters().getP();  if (key instanceof ElGamalPrivateKeyParameters) {    byte[] in1=new byte[inLen / 2];    byte[] in2=new byte[inLen / 2];    System.arraycopy(in,inOff,in1,0,in1.length);    System.arraycopy(in,inOff + in1.length,in2,0,in2.length);    BigInteger gamma=new BigInteger(1,in1);    BigInteger phi=new BigInteger(1,in2);    ElGamalPrivateKeyParameters priv=(ElGamalPrivateKeyParameters)key;    BigInteger m=gamma.modPow(p.subtract(ONE).subtract(priv.getX()),p).multiply(phi).mod(p);    return BigIntegers.asUnsignedByteArray(m);  } else {    byte[] block;    if (inOff != 0 || inLen != in.length) {      block=new byte[inLen];      System.arraycopy(in,inOff,block,0,inLen);    } else {      block=in;    }    BigInteger input=new BigInteger(1,block);    if (input.compareTo(p) >= 0) {      throw new DataLengthException("input too large for ElGamal cipher.\n");    }    ElGamalPublicKeyParameters pub=(ElGamalPublicKeyParameters)key;    int pBitLength=p.bitLength();    BigInteger k=new BigInteger(pBitLength,random);    while (k.equals(ZERO) || (k.compareTo(p.subtract(TWO)) > 0)) {      k=new BigInteger(pBitLength,random);    }    BigInteger g=key.getParameters().getG();    BigInteger gamma=g.modPow(k,p);    BigInteger phi=input.multiply(pub.getY().modPow(k,p)).mod(p);    byte[] out1=gamma.toByteArray();    byte[] out2=phi.toByteArray();    byte[] output=new byte[this.getOutputBlockSize()];    if (out1.length > output.length / 2) {      System.arraycopy(out1,1,output,output.length / 2 - (out1.length - 1),out1.length - 1);    } else {      System.arraycopy(out1,0,output,output.length / 2 - out1.length,out1.length);    }    if (out2.length > output.length / 2) {      System.arraycopy(out2,1,output,output.length - (out2.length - 1),out2.length - 1);    } else {      System.arraycopy(out2,0,output,output.length - out2.length,out2.length);    }    return output;  }}  }
class C{  public int read() throws IOException {  if (nextF) {    nextF=false;    return nextch;  }  int ch=super.read();  if (ch != '\\')   return ch;  mini=new StringBuffer();  ch=super.read();  if (ch != 'u') {    nextF=true;    nextch=ch;    return '\\';  }  mini.append("\\u");  while (mini.length() < 6) {    ch=super.read();    mini.append((char)ch);  }  ch=Integer.parseInt(mini.substring(2).toString(),16);  return ch;}  }
class C{  public int hashCode(){  return (iLowerLimit == null ? 0 : iLowerLimit.hashCode()) + (123 * (iUpperLimit == null ? 0 : iUpperLimit.hashCode()));}  }
class C{  public int compare(Point point1,Point point2){  if (point1.getX() > point2.getX()) {    return 1;  } else   if (point1.getX() < point2.getX()) {    return -1;  } else   return 0;}  }
class C{  private void minimizeToTray(){  if (!isMinimized()) {    setExtendedState(getExtendedState() | ICONIFIED);  }  trayIcon.setIconVisible(true);  setVisible(false);}  }
class C{  public final PublicKey generatePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (serviceIterator == null) {    return spi.engineGeneratePublic(keySpec);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineGeneratePublic(keySpec);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeySpecException) {    throw (InvalidKeySpecException)failure;  }  throw new InvalidKeySpecException("Could not generate public key",failure);}  }
class C{  public void mailboxRenamed(MailboxSession session,MailboxPath from,Mailbox to){  listener.event(eventFactory.mailboxRenamed(session,from,to));}  }
class C{  public String updateReviewWithComment(String reviewCommitHash,Review review,String newComment) throws GitClientException {  syncCommentsAndReviews();  boolean needPush=false;  Review existingReview=getReview(reviewCommitHash);  if (!review.equals(existingReview)) {    commitReviewNote(reviewCommitHash,review);    needPush=true;  }  if (newComment != null && !newComment.isEmpty()) {    ReviewComment comment=new ReviewComment();    comment.setDescription(newComment);    commitCommentNote(reviewCommitHash,comment);    needPush=true;  }  if (needPush) {    try {      pushCommentsAndReviews();    } catch (    Exception e) {      throw new GitClientException("Error pushing, review is " + reviewCommitHash,e);    }  }  return reviewCommitHash;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String dequeueStringInput(){  if (stringInputs.isEmpty()) {    throw new IllegalStateException("dequeueString() should not be invoked if no string is contained!");  }  return stringInputs.poll();}  }
class C{  private void cmd_export(){  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  try {    File tempFile=File.createTempFile("paymentExport",".txt");    int no=0;    StringBuffer err=new StringBuffer("");    if (m_PaymentExportClass == null || m_PaymentExportClass.trim().length() == 0) {      m_PaymentExportClass="org.eevolution.util.HRGenericPaymentExport";    }    HRPaymentExport custom=null;    try {      Class<?> clazz=Class.forName(m_PaymentExportClass);      custom=(HRPaymentExport)clazz.newInstance();      no=custom.exportToFile(m_checks,tempFile,err);    } catch (    ClassNotFoundException e) {      no=-1;      err.append("No custom PaymentExport class " + m_PaymentExportClass + " - "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }catch (    Exception e) {      no=-1;      err.append("Error in " + m_PaymentExportClass + " check log, "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }    if (no >= 0) {      Filedownload.save(new FileInputStream(tempFile),"plain/text","paymentExport.txt");      FDialog.info(m_WindowNo,form,"Saved",Msg.getMsg(Env.getCtx(),"NoOfLines") + "=" + no);      if (FDialog.ask(m_WindowNo,form,"VPayPrintSuccess?")) {        MHRPaySelectionCheck.confirmPrint(m_checks,m_batch);      }    } else {      FDialog.error(m_WindowNo,form,"Error",err.toString());    }    dispose();  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.348 -0500",hash_original_method="1FD1D3A9087ED95F87943CC7E812BAFE",hash_generated_method="B33138E7D369A93F9F0EA70E05862C0D") public HttpAuthHeader(String header){  if (header != null) {    parseHeader(header);  }}  }
class C{  public static float toFloatValue(double d){  return (float)d;}  }
class C{  private void loadDrawerFragments(){  getSupportFragmentManager().beginTransaction().replace(R.id.nav_drawer_container,new NavigationDrawerFragment()).commit();  mQueueDrawerFragment=new QueueDrawerFragment();  getSupportFragmentManager().beginTransaction().replace(R.id.current_queue_drawer_container,mQueueDrawerFragment).commit();}  }
class C{  public static List<Alert> findByOwner(EntityManager em,PrincipalUser owner){  requireArgument(em != null,"Entity manager can not be null.");  requireArgument(owner != null,"Owner cannot be null.");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findByOwner",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("owner",owner);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  private boolean positionSign(Entity sign){  for (int y=125; y <= 127; y++) {    for (int x=80; x > 51; x--) {      if (!zone.collides(sign,x,y)) {        sign.setPosition(x,y);        zone.add(sign);        return true;      }    }  }  return false;}  }
class C{  private void addLockToJobsNeedingLock(String lock,Job job){  ArrayList<Job> jobs=lockToJobsNeedingLock.get(lock);  if (jobs == null) {    jobs=new ArrayList<>();    lockToJobsNeedingLock.put(lock,jobs);  }  jobs.add(job);}  }
class C{  public T caseProgram_(Program_ object){  return null;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ObjectNotFoundException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void remove(int id){  map.remove(id);}  }
class C{  @Override public void processBlock() throws QueryExecutionException {  while (dataBlockIterator.hasNext()) {    blocksChunkHolder.setDataBlock(dataBlockIterator.next());    blocksChunkHolder.reset();    counter+=this.scannerResultAggregator.aggregateData(blockletScanner.scanBlocklet(blocksChunkHolder));    if (blockExecutionInfo.getLimit() != -1 && counter >= blockExecutionInfo.getLimit()) {      break;    }  }  finishScanning();}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Spinner(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle,final int defaultStyleResource){  super(context,attributeSet,defaultStyle,defaultStyleResource);  initialize(attributeSet);}  }
class C{  public void annotationValue() throws IOException {  output.write('@');}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public boolean isItemValid(ItemStack itemStack){  return isValid(itemStack);}  }
class C{  protected void addMirandaMethods(Environment env,Iterator mirandas){  while (mirandas.hasNext()) {    MemberDefinition method=(MemberDefinition)mirandas.next();    addMember(method);  }}  }
class C{  public AbstractResource(InputSource source){  this(StreamType.INPUT_SOURCE);  this.inputSource=source;}  }
class C{  public Integer isTimeValidForStage(Settings settings,int stage,long durationMsec){  if (BuildConfig.DEBUG && (stage < 1 || stage > SettingsDataSource.STAGE_COUNT)) {    throw new RuntimeException("Invalid stage " + stage);  }  int prevStage=stage - 1;  int nextStage=stage + 1;  if (prevStage >= 1) {    Date time=SettingsDataSource.getTimeboxByStage(settings,prevStage);    if (durationMsec <= time.getTime()) {      return R.string.error_less_than_previous;    }  }  if (nextStage <= SettingsDataSource.STAGE_COUNT) {    Date time=SettingsDataSource.getTimeboxByStage(settings,nextStage);    if (durationMsec >= time.getTime()) {      return R.string.error_more_than_next;    }  }  if (durationMsec == 0) {    return R.string.error_zero_value;  }  return null;}  }
class C{  public void testDivideRoundFloorPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_FLOOR);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void processPopulationsLinkers(final RoundEnvironment env){  final List<? extends Element> populationsLinkers=sortElements(env,populations_linker.class);  for (  final Element e : populationsLinkers) {    final populations_linker pLinker=e.getAnnotation(populations_linker.class);    final StringBuilder sb=new StringBuilder();    sb.append(POPULATIONS_LINKER_PREFIX);    sb.append(pLinker.name()).append(SEP);    sb.append(rawNameOf(e));    gp.put(sb.toString(),docToString(pLinker.doc()));  }}  }
class C{  public RequestTargetSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("away")) {    onAway(changes.get("away"));  }  if (changes.has("grumpy")) {    onGrumpy(changes.get("grumpy"));  }  if (changes.has(LAST_PLAYER_KILL_TIME)) {    badboy=true;    fireChange(PROP_PLAYER_KILLER);  }}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i(TAG,"This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  public void stopContainer(final StopContainerParams params) throws IOException {  final Long timeout=(params.getTimeout() == null) ? null : (params.getTimeunit() == null) ? params.getTimeout() : params.getTimeunit().toSeconds(params.getTimeout());  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/stop")){    addQueryParamIfNotNull(connection,"t",timeout);    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }  } }  }
class C{  public static void stop(){  CLOCK_STATE.get().enter();}  }
class C{  public int indexOf(final Artist a){synchronized (mArtists) {    return mArtists.indexOf(a);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElement;  Node imported;  boolean success;  String nodeNameOrig;  String nodeNameImported;  doc=(Document)load("staffNS",true);  docElement=doc.getDocumentElement();  imported=doc.importNode(docElement,false);  success=imported.hasChildNodes();  assertFalse("documentimportnode11",success);  nodeNameImported=imported.getNodeName();  nodeNameOrig=docElement.getNodeName();  assertEquals("documentimportnode11_NodeName",nodeNameImported,nodeNameOrig);}  }
class C{  private void updateResultSetDesign(IResultSetMetaData md,DataSetDesign dataSetDesign) throws OdaException {  ResultSetColumns columns=DesignSessionUtil.toResultSetColumnsDesign(md);  ResultSetDefinition resultSetDefn=DesignFactory.eINSTANCE.createResultSetDefinition();  resultSetDefn.setResultSetColumns(columns);  dataSetDesign.setPrimaryResultSet(resultSetDefn);  dataSetDesign.getResultSets().setDerivedMetaData(true);}  }
class C{  public static void load(Class<?> parent){  load(parent,ClassLoader.getSystemClassLoader());}  }
class C{  public AMFMSineWave(float phase,float freq,AbstractWave fmod,AbstractWave amod){  super(phase,freq);  this.amod=amod;  this.fmod=fmod;}  }
class C{  public Boolean isIpv6DhcpConfigurationSettable(){  return ipv6DhcpConfigurationSettable;}  }
class C{  public static long globalIdForId(long id){  return Syncing.globalIdForId(CONTENT_URI,id);}  }
class C{  private void fixAmbiguousTestNames(){  Map<String,Integer> nameCount=new LinkedHashMap<>();  Map<String,Integer> testCount=new LinkedHashMap<>();  for (  String methodName : testToName.values()) {    if (nameCount.containsKey(methodName))     nameCount.put(methodName,nameCount.get(methodName) + 1); else {      nameCount.put(methodName,1);      testCount.put(methodName,0);    }  }  for (  Map.Entry<TestCase,String> entry : testToName.entrySet()) {    if (nameCount.get(entry.getValue()) > 1) {      int num=testCount.get(entry.getValue());      testCount.put(entry.getValue(),num + 1);      testToName.put(entry.getKey(),entry.getValue() + num);    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTAB16");  translateAll(environment,instruction,"SXTAB16",instructions);}  }
class C{  public void writeUnescaped(String s) throws IOException {  endOpenTag();  currentElement().unformattedChildren=true;  writer.write(s);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public DrawerBuilder addDrawerItems(@NonNull IDrawerItem... drawerItems){  this.getAdapter().addDrawerItems(IdDistributor.checkIds(drawerItems));  return this;}  }
class C{  @HLEFunction(nid=0x68A46B95,version=150) public int __sceSasGetEndFlag(int sasCore){  checkSasHandleGood(sasCore);  int endFlag=0;  for (int i=0; i < voices.length; i++) {    if (voices[i].isEnded()) {      endFlag|=(1 << i);    }  }  if (log.isDebugEnabled()) {    log.debug(String.format("__sceSasGetEndFlag returning 0x%08X",endFlag));  }  return endFlag;}  }
class C{  public void push(T newVal){  int index=(int)(currentIndex.incrementAndGet() % maxSize);  circularArray[index].set(newVal);}  }
class C{  public static List<String> explode(@NullAllowed String string,String delimiter){  Parameters.notEmpty("delimiter",delimiter);  if (!hasText(string)) {    return Collections.<String>emptyList();  }  assert string != null;  return Arrays.asList(string.split(Pattern.quote(delimiter)));}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  synchronized public JournalMetadata findNext(final long timestamp){  if (timestamp < 0L)   throw new IllegalArgumentException();  final long index=findIndexOf(Math.abs(timestamp)) + 1;  if (index == nentries) {    return null;  }  return valueAtIndex(index);}  }
class C{  public static UpdateStatement orRollback(CharSequence table){  return produce(table,"ROLLBACK");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("doGet");  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  if (ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(Env.getCtx());  } else   doc=WebDoc.createPopup("Test - Get - Not Implemented");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public void exec(String source,int lineNo,int columnNo,Object script) throws BSFException {  try {    source=convertToValidJavaClassname(source);    getEvalShell().evaluate(script.toString(),source);  } catch (  Exception e) {    throw new BSFException(BSFException.REASON_EXECUTION_ERROR,"exception from Groovy: " + e,e);  }}  }
class C{  public Email(){  super(KEY);}  }
