class C{  private void layoutComponents(){  JPanel contentPane=(JPanel)getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.setBorder(new EmptyBorder(10,10,10,10));  contentPane.add("Center",createMainPanel());  contentPane.add("South",createButtonPanel());}  }
class C{  public static boolean[] nullToEmpty(boolean[] array){  if (array == null || array.length == 0) {    return EMPTY_BOOLEAN_ARRAY;  }  return array;}  }
class C{  private Set<String> determineReturnTypes(final List<Instruction> instructions){  final List<Instruction> visitedInstructions=interpretRelevantInstructions(instructions);  final Set<ProjectMethod> projectMethods=findProjectMethods(visitedInstructions);  projectMethods.stream().forEach(null);  return simulator.simulate(visitedInstructions).getTypes();}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public JettySolrRunner startJettySolrRunner(String hostContext,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class,String> extraRequestFilters) throws Exception {  String context=getHostContextSuitableForServletContext(hostContext);  JettySolrRunner jetty=new JettySolrRunner(testDir.getAbsolutePath(),context,0,null,null,true,extraServlets,null,extraRequestFilters);  jetty.start();  jettys.add(jetty);  return jetty;}  }
class C{  private static void postInit(){  debugAll=dbgTable.containsKey(debugAllToken);}  }
class C{  private void createEvacuationNodsAndLinks(){  Coordinate cc1=this.evacuationArea.getCentroid().getCoordinate();  cc1.x+=10000;  cc1.y+=10000;  Coord safeCoord1=MGC.coordinate2Coord(cc1);  Coordinate cc2=this.evacuationArea.getCentroid().getCoordinate();  cc2.x+=10010;  cc2.y+=10010;  Coord safeCoord2=MGC.coordinate2Coord(cc2);  Node safeNodeA=this.network.getFactory().createNode(this.safeNodeAId,safeCoord1);  this.network.addNode(safeNodeA);  Node safeNodeB=this.network.getFactory().createNode(this.safeNodeBId,safeCoord2);  this.network.addNode(safeNodeB);  double capacity=1000000.;  Link l=this.network.getFactory().createLink(this.safeLinkId,safeNodeA,safeNodeB);  l.setLength(10);  l.setFreespeed(100000);  l.setCapacity(capacity);  l.setNumberOfLanes(100);  this.network.addLink(l);  int linkId=1;  for (  Node node : this.network.getNodes().values()) {    if (this.safeNodes.contains(node)) {      linkId++;      String sLinkID="el" + Integer.toString(linkId);      Link l2=this.network.getFactory().createLink(Id.create(sLinkID,Link.class),node,safeNodeA);      l2.setLength(10);      l2.setFreespeed(100000);      l2.setCapacity(capacity);      l2.setNumberOfLanes(1);      this.network.addLink(l2);    }  }}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  public DefaultImapEncoderFactory(Localizer localizer,boolean neverAddBodyStructureExtensions){  super();  this.localizer=localizer;  this.neverAddBodyStructureExtensions=neverAddBodyStructureExtensions;}  }
class C{  public void removeEventListener(MultimediaStreamingSessionListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IMultimediaStreamingSessionListener> weakRef=mMultimediaStreamingSessionListeners.remove(listener);    if (weakRef == null) {      return;    }    IMultimediaStreamingSessionListener multimediaStreamingSessionListener=weakRef.get();    if (multimediaStreamingSessionListener != null) {      mApi.removeEventListener3(multimediaStreamingSessionListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void union(int left,int top,int right,int bottom){  if ((left < right) && (top < bottom)) {    if ((this.left < this.right) && (this.top < this.bottom)) {      if (this.left > left)       this.left=left;      if (this.top > top)       this.top=top;      if (this.right < right)       this.right=right;      if (this.bottom < bottom)       this.bottom=bottom;    } else {      this.left=left;      this.top=top;      this.right=right;      this.bottom=bottom;    }  }}  }
class C{  public static PointF normalizedSensorCoordsForNormalizedDisplayCoords(float nx,float ny,int sensorOrientation){switch (sensorOrientation) {case 0:    return new PointF(nx,ny);case 90:  return new PointF(ny,1.0f - nx);case 180:return new PointF(1.0f - nx,1.0f - ny);case 270:return new PointF(1.0f - ny,nx);default :return null;}}  }
class C{  public <T extends ServiceDocument>Operation sendPatchAndWait(String serviceUri,T parameters) throws Throwable {  Operation op=Operation.createPatch(UriUtils.buildUri(hosts[0],serviceUri,null)).setBody(parameters);  return sendRequestAndWait(op,hosts[0]);}  }
class C{  public void startElement(QName qName,Attributes attributes) throws IOException {  java.util.ArrayList<String> vecQNames=null;  if (writingStartTag) {    writer.write('>');  }  String elementQName=qName2String(qName,true);  writer.write('<');  writer.write(elementQName);  if (attributes != null) {    for (int i=0; i < attributes.getLength(); i++) {      String qname=attributes.getQName(i);      writer.write(' ');      String prefix="";      String uri=attributes.getURI(i);      if (uri != null && uri.length() > 0) {        if (qname.length() == 0) {          prefix=getPrefixForURI(uri);        } else {          int idx=qname.indexOf(':');          if (idx > -1) {            prefix=qname.substring(0,idx);            prefix=getPrefixForURI(uri,prefix,true);          }        }        if (prefix.length() > 0) {          qname=prefix + ':' + attributes.getLocalName(i);        } else {          qname=attributes.getLocalName(i);        }      } else {        qname=attributes.getQName(i);        if (qname.length() == 0)         qname=attributes.getLocalName(i);      }      if (qname.startsWith("xmlns")) {        if (vecQNames == null)         vecQNames=new ArrayList<String>();        vecQNames.add(qname);      }      writer.write(qname);      writer.write("=\"");      getEncoder().writeEncoded(writer,attributes.getValue(i));      writer.write('"');    }  }  if (noNamespaceMappings) {    nsStack.push();  } else {    for (Mapping map=nsStack.topOfFrame(); map != null; map=nsStack.next()) {      if (!(map.getNamespaceURI().equals(NS_URI_XMLNS) && map.getPrefix().equals("xmlns")) && !(map.getNamespaceURI().equals(NS_URI_XML) && map.getPrefix().equals("xml"))) {        StringBuilder sb=new StringBuilder("xmlns");        if (map.getPrefix().length() > 0) {          sb.append(':');          sb.append(map.getPrefix());        }        if ((vecQNames == null) || (vecQNames.indexOf(sb.toString()) == -1)) {          writer.write(' ');          sb.append("=\"");          sb.append(map.getNamespaceURI());          sb.append('"');          writer.write(sb.toString());        }      }    }    noNamespaceMappings=true;  }  writingStartTag=true;  elementStack.push(elementQName);}  }
class C{  public GEPExpressionTreeNode parseGene(int gene[],GEPSymbolSet ss){  LinkedList nodeQ=new LinkedList();  LinkedList parentNodeQ=new LinkedList();  GEPSymbol symbols[]=ss.symbols;  int nextGeneIndex=0;  int nextGeneElt;  GEPExpressionTreeNode rootNode, parentNode;  int i;  nextGeneElt=gene[nextGeneIndex++];  GEPSymbol s=symbols[nextGeneElt];  rootNode=new GEPExpressionTreeNode(s);  for (i=0; i < s.arity; i++) {    nodeQ.addLast(new GEPExpressionTreeNode(symbols[gene[nextGeneIndex++]]));    parentNodeQ.addLast(rootNode);  }  while (!nodeQ.isEmpty()) {    GEPExpressionTreeNode node=(GEPExpressionTreeNode)nodeQ.removeFirst();    parentNode=(GEPExpressionTreeNode)parentNodeQ.removeFirst();    parentNode.addParameter(node);    int arity=node.symbol.arity;    for (i=0; i < arity; i++) {      nodeQ.addLast(new GEPExpressionTreeNode(symbols[gene[nextGeneIndex++]]));      parentNodeQ.addLast(node);    }  }  return rootNode;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private static boolean combine(char text[],int pos,char ch){  final char prev=text[pos - 1];  if (prev >= 0x30A6 && prev <= 0x30FD) {    text[pos - 1]+=(ch == 0xFF9F) ? KANA_COMBINE_HALF_VOICED[prev - 0x30A6] : KANA_COMBINE_VOICED[prev - 0x30A6];    return text[pos - 1] != prev;  }  return false;}  }
class C{  public void removeSpriteFrames(){  spriteFrames.clear();}  }
class C{  public JsonObjectRequest(int method,String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  void processPortSpeed(LogicalNetworkDevice logicalNetworkDevice,Map<String,String> portSpeedMap){  List<String> logicalNetworkList=logicalNetworkDevice.getInterfaces();  if (logicalNetworkList != null && !logicalNetworkList.isEmpty()) {    NetworkDeviceSpeed networkDeviceSpeed=logicalNetworkDevice.getSpeed();    String deviceSpeed=networkDeviceSpeed.value();    for (    String interfaceIP : logicalNetworkList) {      portSpeedMap.put(interfaceIP,deviceSpeed);    }    _logger.info(" logical device port{} and speed : {}",logicalNetworkDevice.getName(),deviceSpeed);  }}  }
class C{  protected void firePrePaint(Graphics2D g){  if (m_painters != null && m_painters.size() > 0) {    Object[] lstnrs=m_painters.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((PaintListener)lstnrs[i]).prePaint(this,g);      } catch (      Exception e) {        s_logger.warning("Exception thrown by PaintListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  static double svd_ddot(int n,double[] dx,int incx,double[] dy,int incy){  double dot_product=0.0;  int ix0=0;  int iy0=0;  assert incx == 1 || incx == -1 || incx == 0;  assert incy == 1 || incy == -1 || incy == 0;  if (n <= 0 || incx == 0 || incy == 0)   return 0.0;  int ix=(incx == 1) ? ix0 : n - 1 + ix0;  int iy=(incy == 1) ? iy0 : n - 1 + iy0;  for (int i=0; i < n; i++) {    dot_product+=dy[iy] * dx[ix];    iy+=incy;    ix+=incx;  }  return dot_product;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("FramesTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  int initialSize=mainThread.frames().size();  resumeTo("FramesTarg","foo3","()V");  if (!mainThread.frame(0).location().method().name().equals("foo3")) {    failure("frame failed");  }  if (mainThread.frames().size() != (initialSize + 3)) {    failure("frames size failed");  }  if (mainThread.frames().size() != mainThread.frameCount()) {    failure("frames size not equal to frameCount");  }  exceptionTest(-1,1);  exceptionTest(mainThread.frameCount(),1);  exceptionTest(0,-1);  exceptionTest(0,-2);  exceptionTest(0,mainThread.frameCount() + 1);  nameTest(0,0);  nameTest(0,1);  nameTest(0,4);  nameTest(2,2);  nameTest(1,1);  listenUntilVMDisconnect();  if (!testFailed) {    println("FramesTest: passed");  } else {    throw new Exception("FramesTest: failed");  }}  }
class C{  public int compareTo(FloatBuffer otherBuffer){  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();  int thisPos=position;  int otherPos=otherBuffer.position;  float thisFloat, otherFloat;  while (compareRemaining > 0) {    thisFloat=get(thisPos);    otherFloat=otherBuffer.get(otherPos);    if ((thisFloat != otherFloat) && ((thisFloat == thisFloat) || (otherFloat == otherFloat))) {      return thisFloat < otherFloat ? -1 : 1;    }    thisPos++;    otherPos++;    compareRemaining--;  }  return remaining() - otherBuffer.remaining();}  }
class C{  public ApproximationSetCollector(Algorithm algorithm,double[] epsilon){  super();  this.algorithm=algorithm;  this.epsilon=epsilon;}  }
class C{  public synchronized void addElement(final int[] value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public GraphicsNodeFocusEvent(GraphicsNode source,int id){  super(source,id);}  }
class C{  @Override public void validate(){  super.validate();  if (this.httpPort < 0 || this.httpPort > MAX_HTTP_PORT) {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[]{HTTP_PORT_NAME,Integer.valueOf(MIN_HTTP_PORT),Integer.valueOf(MAX_HTTP_PORT)}));  }  if (this.rmiPort < 0 || this.rmiPort > MAX_RMI_PORT) {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[]{RMI_PORT_NAME,Integer.valueOf(MIN_RMI_PORT),Integer.valueOf(MAX_RMI_PORT)}));  }  if (this.rmiServerPort < 0 || this.rmiServerPort > MAX_RMI_PORT) {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[]{RMI_SERVER_PORT_NAME,Integer.valueOf(MIN_RMI_PORT),Integer.valueOf(MAX_RMI_PORT)}));  }}  }
class C{  public void releaseActiveBody(){  activeBody=null;}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.serverDate=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  boolean isAlpha(char ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  public void toWire(WireFormat.Writer writer) throws IOException {  writer.writeVarBytes(filter);  writer.writeUint32(hashFunctions);  writer.writeUint32(tweak);  writer.writeByte(update.ordinal());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testSerialization(){  boolean simulation=true;  SessionNode node1=new SessionNode(Type1.class);  SessionNode node2=new SessionNode(Type2.class);  SessionNode node3=new SessionNode(Type3.class);  node1.addParent(node2);  node1.addParent(node3);  node3.addParent(node2);  try {    node2.createModel(Type2.class,simulation);    node3.createModel(Type3.class,simulation);    node1.createModel(Type1.class,simulation);  } catch (  Exception e) {    fail("Model not created.");  }  SessionNode node1Copy=null;  try {    node1Copy=(SessionNode)new MarshalledObject(node1).get();  } catch (  Exception e) {    fail("Serialization failed.");  }  assertTrue(node1.isStructurallyIdentical(node1Copy));}  }
class C{  @Override public void info(String msg){  if (logger.isLoggable(Level.INFO)) {    log(SELF,Level.INFO,msg,null);  }}  }
class C{  private void assertNotVariable(final TermNode t) throws VisitorException {  if (t == null)   return;  if (!t.isVariable())   return;  final VarNode v=(VarNode)t;  if (v.isAnonymous()) {    return;  }  throw new VisitorException("Variable not permitted in this context: " + t);}  }
class C{  private void writePacketOutForPacketIn(IOFSwitch sw,OFPacketIn packetInMessage,short egressPort){  OFPacketOut packetOutMessage=(OFPacketOut)floodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT);  short packetOutLength=(short)OFPacketOut.MINIMUM_LENGTH;  packetOutMessage.setBufferId(packetInMessage.getBufferId());  packetOutMessage.setInPort(packetInMessage.getInPort());  packetOutMessage.setActionsLength((short)OFActionOutput.MINIMUM_LENGTH);  packetOutLength+=OFActionOutput.MINIMUM_LENGTH;  List<OFAction> actions=new ArrayList<OFAction>(1);  actions.add(new OFActionOutput(egressPort,(short)0));  packetOutMessage.setActions(actions);  if (packetInMessage.getBufferId() == OFPacketOut.BUFFER_ID_NONE) {    byte[] packetData=packetInMessage.getPacketData();    packetOutMessage.setPacketData(packetData);    packetOutLength+=(short)packetData.length;  }  packetOutMessage.setLength(packetOutLength);  try {    counterStore.updatePktOutFMCounterStoreLocal(sw,packetOutMessage);    sw.write(packetOutMessage,null);  } catch (  IOException e) {    log.error("Failed to write {} to switch {}: {}",new Object[]{packetOutMessage,sw,e});  }}  }
class C{  public static float parse(String[] options,char option,float defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public TreeRTGRhizophoraMucronata(int minBranches,int maxBranches,float branchLength,float verStart,float verRand){  this();  this.minBranches=minBranches;  this.maxBranches=maxBranches;  this.branchLength=branchLength;  this.verStart=verStart;  this.verRand=verRand;}  }
class C{  public void testFieldScore() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("value","foo bar bar bar bar",Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(newTextField("value","foo foo foo foo foo",Field.Store.NO));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort();  TopDocs actual=searcher.search(new TermQuery(new Term("value","foo")),10,sort);  assertEquals(2,actual.totalHits);  TopDocs expected=searcher.search(new TermQuery(new Term("value","foo")),10);  assertEquals(expected.totalHits,actual.totalHits);  for (int i=0; i < actual.scoreDocs.length; i++) {    assertEquals(actual.scoreDocs[i].doc,expected.scoreDocs[i].doc);  }  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public ToolTipControl(String[] fields){  label=fields;  if (fields.length > 1)   sbuf=new StringBuffer();}  }
class C{  public static boolean isHostsAvailabilityError(Throwable e){  while (e != null) {    if (e instanceof NoHostAvailableException || e instanceof ReadTimeoutException)     return true;    e=e.getCause();  }  return false;}  }
class C{  public void message(UserHostmask user,String message){  if (user == null)   throw new IllegalArgumentException("Can't send message to null user");  message(user.getNick() + ": " + message);}  }
class C{  private Im(){}  }
class C{  protected void paint(SynthContext context,Graphics g){  recalculateIfInsetsChanged();  recalculateIfOrientationChanged();  Rectangle clip=g.getClipBounds();  if (lastSize == null || !lastSize.equals(slider.getSize())) {    calculateGeometry();  }  if (paintValue) {    FontMetrics fm=SwingUtilities2.getFontMetrics(slider,g);    int labelWidth=context.getStyle().getGraphicsUtils(context).computeStringWidth(context,g.getFont(),fm,"" + slider.getValue());    valueRect.x=thumbRect.x + (thumbRect.width - labelWidth) / 2;    if (slider.getOrientation() == JSlider.HORIZONTAL) {      if (valueRect.x + labelWidth > insetCache.left + contentRect.width) {        valueRect.x=(insetCache.left + contentRect.width) - labelWidth;      }      valueRect.x=Math.max(valueRect.x,0);    }    g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));    context.getStyle().getGraphicsUtils(context).paintText(context,g,"" + slider.getValue(),valueRect.x,valueRect.y,-1);  }  if (slider.getPaintTrack() && clip.intersects(trackRect)) {    SynthContext subcontext=getContext(slider,Region.SLIDER_TRACK);    paintTrack(subcontext,g,trackRect);    subcontext.dispose();  }  if (clip.intersects(thumbRect)) {    SynthContext subcontext=getContext(slider,Region.SLIDER_THUMB);    paintThumb(subcontext,g,thumbRect);    subcontext.dispose();  }  if (slider.getPaintTicks() && clip.intersects(tickRect)) {    paintTicks(g);  }  if (slider.getPaintLabels() && clip.intersects(labelRect)) {    paintLabels(g);  }}  }
class C{  private void checkJobStatusAndAddToMap(Job job){  JobStatusWrapper jobStatusWrapper=JobStatusChecker.getJobStatus(job);  if (jobStatusWrapper.getJobStatus().equals(JobStatusWrapper.JobStatus.ACTIVE)) {    jobMap.put(job.getId(),job);  } else   if (jobStatusWrapper.getJobStatus().equals(JobStatusWrapper.JobStatus.DEACTIVATED)) {    deactivatedJobs.put(job,jobStatusWrapper);  }}  }
class C{  public void evictAll(){  List<Connection> connections;synchronized (this) {    connections=new ArrayList<Connection>(this.connections);    this.connections.clear();  }  for (  Connection connection : connections) {    Util.closeQuietly(connection);  }}  }
class C{  public ShapeFileCrop(String namein,String nameout) throws IOException {  sfin=new ShapeFile(namein);  sfout=new ShapeFile(nameout);}  }
class C{  protected double unwrapKey(Object key){  return ((Double)key).doubleValue();}  }
class C{  public InfoModelAttributeSource createInfoModelAttributeSource(){  InfoModelAttributeSourceImpl infoModelAttributeSource=new InfoModelAttributeSourceImpl();  return infoModelAttributeSource;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview2);  PullToRefreshWebView2 pullRefreshWebView=(PullToRefreshWebView2)findViewById(R.id.pull_refresh_webview2);  pullRefreshWebView.setOnRefreshListener(this);  WebView webView=pullRefreshWebView.getRefreshableView();  webView.getSettings().setJavaScriptEnabled(true);  webView.setWebViewClient(new SampleWebViewClient());  webView.loadUrl("file:///android_asset/ptr_webview2_sample.html");}  }
class C{  public static SnmpOid toOid(int l,long[] index,int start) throws SnmpStatusException {  try {    long[] ids=new long[l];    for (int i=0; i < l; i++) {      ids[i]=index[start + i];    }    return new SnmpOid(ids);  } catch (  IndexOutOfBoundsException e) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  public int addOperator(Operator operator,boolean registerWithProcess){  if (operator == null) {    throw new NullPointerException("operator cannot be null!");  }  if (operator instanceof ProcessRootOperator) {    throw new IllegalArgumentException("'Process' operator cannot be added. It must always be the top-level operator!");  }  operators.add(operator);  registerOperator(operator,registerWithProcess);  return operators.size() - 1;}  }
class C{  public void release(){  mIsReleased=true;  mSoundPool.release();}  }
class C{  public LocalDateTime withMillisOfDay(int millis){  return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(),millis));}  }
class C{  public DTMIterator createDTMIterator(String xpathString,PrefixResolver presolver){  return m_dtmManager.createDTMIterator(xpathString,presolver);}  }
class C{  private boolean match(Tree fragment,Tree tree){  if (fragment.getLabel() != tree.getLabel()) {    return false;  }  List<Tree> fkids=fragment.getChildren();  if (fkids.size() > 0) {    List<Tree> tkids=tree.getChildren();    if (fkids.size() != tkids.size()) {      return false;    }    for (int i=0; i < fkids.size(); i++)     if (fkids.get(i).getLabel() != tkids.get(i).getLabel())     return false;    for (int i=0; i < fkids.size(); i++) {      if (!match(fkids.get(i),tkids.get(i)))       return false;    }  }  return true;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  protected boolean[] correctBuildInitialisation(AttrTypes attrTypes,int classType){  boolean[] result=new boolean[2];  print("correct initialisation during buildEstimator");  printAttributeSummary(attrTypes,classType);  print("...");  int numTrain=getNumInstances();  getNumInstances();  int numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  Instances train1=null;  Instances train2=null;  Estimator estimator=null;  Estimator estimator1=null;  boolean built=false;  int stage=0;  int attrIndex1=1;  int attrIndex2=2;  try {    train1=makeTestDataset(42,numTrain,2,attrTypes,numClasses,classType);    train2=makeTestDataset(84,numTrain,3,attrTypes,numClasses,classType);    if (missingLevel > 0) {      addMissing(train1,missingLevel,attributeMissing,classMissing,attrIndex1);      addMissing(train2,missingLevel,attributeMissing,classMissing,attrIndex2);    }    estimator=Estimator.makeCopies(getEstimator(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    estimator.addValues(train1,attrIndex1);    built=true;    estimator1=Estimator.makeCopies(getEstimator(),1)[0];    stage=1;    built=false;    estimator.addValues(train2,attrIndex2);    built=true;    stage=2;    built=false;    estimator.addValues(train1,attrIndex1);    built=true;    stage=3;    if (!estimator.equals(estimator1)) {      if (m_Debug) {        println("\n=== Full report ===\n" + "\nFirst build estimator\n" + estimator.toString() + "\n\n");        println("\nSecond build estimator\n" + estimator.toString() + "\n\n");      }      throw new Exception("Results differ between buildEstimator calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    String msg=ex.getMessage().toLowerCase();    if (msg.indexOf("worse than zeror") >= 0) {      println("warning: performs worse than ZeroR");      result[0]=true;      result[1]=true;    } else {      println("no");      result[0]=false;    }    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");}}return result;}  }
class C{  public GEIndividual reverseMap(EvolutionState state,GPIndividual ind,int threadnum){  GEIndividual newind=(GEIndividual)i_prototype.clone();  int longestIntLength=-1;  int[] longestInt=null;  for (int treeIndex=0; treeIndex < ind.trees.length; treeIndex++) {    ArrayList flatSexp=(ArrayList)flattenSexp(state,threadnum,ind.trees[treeIndex]);    int[] genomeVals=parseSexp(flatSexp,grammarParser[treeIndex]);    if (genomeVals.length >= longestIntLength) {      longestIntLength=genomeVals.length;      longestInt=new int[genomeVals.length];      System.arraycopy(genomeVals,0,longestInt,0,genomeVals.length);    }    genomeVals=null;  }  newind.genome=longestInt;  newind.fitness=ind.fitness;  newind.evaluated=false;  newind.species=this;  return newind;}  }
class C{  public void onClickShare(){  Intent intent=new Intent(Intent.ACTION_SEND);  intent.setType("text/plain");  intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.share_just));  intent.putExtra(Intent.EXTRA_TEXT,getString(R.string.share_text));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(Intent.createChooser(intent,getTitle()));}  }
class C{  private void stopTtsPlayer(){  if (audioTrack != null && audioTrack.getState() != AudioTrack.STATE_UNINITIALIZED) {    audioTrack.pause();    audioTrack.flush();  }}  }
class C{  public void firePropertyChange(String propertyName,short oldValue,short newValue){}  }
class C{  @Override public int hashCode(){  int result=41;  result=HashUtilities.hashCode(result,getToolTipText());  result=HashUtilities.hashCode(result,getURLText());  return result;}  }
class C{  public AuthPermission(String name){  super("createLoginContext".equals(name) ? "createLoginContext.*" : name);}  }
class C{  public static Page<User> findUsers(int pageNum,String query,UserState state){  ExpressionList<User> el=User.find.where();  el.ne("id",SITE_MANAGER_ID);  el.ne("loginId",anonymous.loginId);  el.eq("state",state);  if (StringUtils.isNotBlank(query)) {    el=el.disjunction();    el=el.icontains("loginId",query).icontains("name",query).icontains("email",query);    el.endJunction();  }  return el.findPagingList(USER_COUNT_PER_PAGE).getPage(pageNum);}  }
class C{  public static int counterClockwise(Vector2f p0,Vector2f p1,Vector2f p2){  float dx1, dx2, dy1, dy2;  dx1=p1.x - p0.x;  dy1=p1.y - p0.y;  dx2=p2.x - p0.x;  dy2=p2.y - p0.y;  if (dx1 * dy2 > dy1 * dx2) {    return 1;  }  if (dx1 * dy2 < dy1 * dx2) {    return -1;  }  if ((dx1 * dx2 < 0) || (dy1 * dy2 < 0)) {    return -1;  }  if ((dx1 * dx1 + dy1 * dy1) < (dx2 * dx2 + dy2 * dy2)) {    return 1;  }  return 0;}  }
class C{  @Override public void addChild(FXGNode child){  if (delegate instanceof TextGraphicNode) {    ((TextGraphicNode)delegate).addContentChild(child);  } else   if (delegate instanceof RichTextNode) {    ((RichTextNode)delegate).addContentChild(child);  } else {    throw new FXGException(getStartLine(),getStartColumn(),"InvalidChildNode",child.getNodeName(),getNodeName());  }}  }
class C{  public boolean isEmulated(){  return mEmulated;}  }
class C{  public void testLocalDoubleDestroy() throws Exception {  localDestroy();  localDestroy();}  }
class C{  public DefaultRenderStack(){  stack=new ArrayDeque<>();}  }
class C{  public ShortBuffer put(short[] src,int off,int len){  int length=src.length;  if (off < 0 || len < 0 || (long)off + (long)len > length) {    throw new IndexOutOfBoundsException();  }  if (len > remaining()) {    throw new BufferOverflowException();  }  for (int i=off; i < off + len; i++) {    put(src[i]);  }  return this;}  }
class C{  public static String toString(InputStream input) throws IOException {  StringBuffer out=new StringBuffer();  byte[] b=new byte[DEFAULT_BUFFER_SIZE];  for (int n; (n=input.read(b)) != -1; ) {    out.append(new String(b,0,n));  }  IOUtils.closeQuietly(input);  return out.toString();}  }
class C{  public void addLine(String line){  if (isEmpty()) {    empty=false;  } else {    statement.append("\n");  }  String lineSimplified=simplifyLine(line);  applyStateChanges(lineSimplified);  if (endWithOpenMultilineStringLiteral() || insideMultiLineComment) {    statement.append(line);    return;  }  delimiter=changeDelimiterIfNecessary(lineSimplified,delimiter);  statement.append(line);  if (isCommentDirective(lineSimplified)) {    nonCommentStatementPartSeen=true;  }  if (!lineEndsWithSingleLineComment && lineTerminatesStatement(lineSimplified,delimiter)) {    stripDelimiter(statement,delimiter);    terminated=true;  }}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  private static boolean checkIfCollectionExists(CloudSolrClient server,String collection) throws KeeperException, InterruptedException {  ZkStateReader zkStateReader=server.getZkStateReader();  zkStateReader.updateClusterState();  ClusterState clusterState=zkStateReader.getClusterState();  return clusterState.getCollectionOrNull(collection) != null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void onClear(){  getOwner().setCurrentParticleEffect(null);  try {    HandlerList.unregisterAll(this);  } catch (  Exception ignored) {  }  if (getPlayer() != null) {    getPlayer().sendMessage(MessageManager.getMessage("Particle-Effects.Unsummon").replace("%effectname%",TextUtil.filterPlaceHolder(getType().getName(),getUltraCosmetics())));  }}  }
class C{  public LoopedAmbientSoundSource(String sound,int radius,int volume){  super(sound,radius,volume,SoundLayer.AMBIENT_SOUND);}  }
class C{  @NotNull public static SQFCommandExpression createPrivateDeclFromExisting(@NotNull Project project,@NotNull SQFPrivateDecl decl,@NotNull String... varNames){  List<SQFPrivateDeclVar> declVars=decl.getPrivateVars();  String text="private [";  for (  SQFPrivateDeclVar declVar : declVars) {    text+="\"" + declVar.getVarName() + "\",";  }  for (int i=0; i < varNames.length; i++) {    text+="\"" + varNames[i] + (i != varNames.length - 1 ? "\"," : "\"];");  }  return (SQFCommandExpression)createElement(project,text,SQFTypes.COMMAND_EXPRESSION);}  }
class C{  private void executeCommand(String m_command,int j_command,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,HttpSession sess){  if (j_command != 0) {    sess.setAttribute(ACTIVE_NODE,new Integer(j_command));    return;  }  debug(m_command,"m_command in executeCommand");  boolean isFirst=wf.isFirst(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean isLast=wf.isLast(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean notReady=false;  int updatedActiveNode=activeNode;  if (activeNode < 0)   notReady=true;  if (notReady) {    updatedActiveNode=((Integer)nodes_ID.get(0)).intValue();  } else {    if (m_command.equals(NEXT)) {      if (notReady)       updatedActiveNode=((Integer)nodes_ID.get(0)).intValue(); else       updatedActiveNode=wf.getNext(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));    }    if (m_command.equals(BACK)) {      if (notReady)       updatedActiveNode=((Integer)nodes_ID.get(0)).intValue(); else       updatedActiveNode=wf.getPrevious(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));    }    if (m_command.equals(FIRST))     updatedActiveNode=((Integer)nodes_ID.get(0)).intValue();    if (m_command.equals(LAST))     updatedActiveNode=wf.getLast(0,Env.getContextAsInt(ctx,"#AD_Client_ID"));  }  sess.setAttribute(ACTIVE_NODE,new Integer(updatedActiveNode));}  }
class C{  public static List<Record> fromByteArray(byte[] byteArray,InetSocketAddress peerAddress){  if (byteArray == null) {    throw new NullPointerException("Byte array must not be null");  } else   if (peerAddress == null) {    throw new NullPointerException("Peer address must not be null");  }  List<Record> records=new ArrayList<Record>();  DatagramReader reader=new DatagramReader(byteArray);  while (reader.bytesAvailable()) {    if (reader.bitsLeft() < RECORD_HEADER_BITS) {      LOGGER.log(Level.FINE,"Received truncated DTLS record(s). Discarding ...");      return records;    }    int type=reader.read(CONTENT_TYPE_BITS);    int major=reader.read(VERSION_BITS);    int minor=reader.read(VERSION_BITS);    ProtocolVersion version=new ProtocolVersion(major,minor);    int epoch=reader.read(EPOCH_BITS);    long sequenceNumber=reader.readLong(SEQUENCE_NUMBER_BITS);    int length=reader.read(LENGTH_BITS);    if (reader.bitsLeft() < length) {      LOGGER.log(Level.FINE,"Received truncated DTLS record(s). Discarding ...");      return records;    }    byte[] fragmentBytes=reader.readBytes(length);    ContentType contentType=ContentType.getTypeByValue(type);    if (contentType == null) {      LOGGER.log(Level.FINE,"Received DTLS record of unsupported type [{0}]. Discarding ...",type);    } else {      records.add(new Record(contentType,version,epoch,sequenceNumber,fragmentBytes,peerAddress));    }  }  return records;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.173 -0500",hash_original_method="1181D36634AC97975F684A5C861366C7",hash_generated_method="F7FCA06355DDC312F1C17F6E20005DC3") public void cancel(){  if (DebugFlags.LOAD_LISTENER) {    if (mRequestHandle == null) {      Log.v(LOGTAG,"LoadListener.cancel(): no requestHandle");    } else {      Log.v(LOGTAG,"LoadListener.cancel()");    }  }  if (mRequestHandle != null) {    mRequestHandle.cancel();    mRequestHandle=null;  }  WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_REMOVE_CACHE,this).sendToTarget();  mCancelled=true;  clearNativeLoader();}  }
class C{  private void performIteration(double[][] trainYs,double[][] trainFs,double[][] probs,Instances data,double origSumOfWeights) throws Exception {  if (m_Debug) {    System.err.println("Training classifier " + (m_NumGenerated + 1));  }  Classifier[] classifiers=new Classifier[m_NumClasses];  for (int j=0; j < m_NumClasses; j++) {    if (m_Debug) {      System.err.println("\t...for class " + (j + 1) + " ("+ m_ClassAttribute.name()+ "="+ m_ClassAttribute.value(j)+ ")");    }    Instances boostData=new Instances(data);    for (int i=0; i < probs.length; i++) {      double p=probs[i][j];      double z, actual=trainYs[i][j];      if (actual == 1 - m_Offset) {        z=1.0 / p;        if (z > m_zMax) {          z=m_zMax;        }      } else {        z=-1.0 / (1.0 - p);        if (z < -m_zMax) {          z=-m_zMax;        }      }      double w=(actual - p) / z;      Instance current=boostData.instance(i);      current.setValue(boostData.classIndex(),z);      current.setWeight(current.weight() * w);    }    double sumOfWeights=boostData.sumOfWeights();    double scalingFactor=(double)origSumOfWeights / sumOfWeights;    for (int i=0; i < probs.length; i++) {      Instance current=boostData.instance(i);      current.setWeight(current.weight() * scalingFactor);    }    Instances trainData=boostData;    if (m_WeightThreshold < 100) {      trainData=selectWeightQuantile(boostData,(double)m_WeightThreshold / 100);    } else {      if (m_UseResampling) {        double[] weights=new double[boostData.numInstances()];        for (int kk=0; kk < weights.length; kk++) {          weights[kk]=boostData.instance(kk).weight();        }        trainData=boostData.resampleWithWeights(m_RandomInstance,weights);      }    }    classifiers[j]=AbstractClassifier.makeCopy(m_Classifier);    classifiers[j].buildClassifier(trainData);    if (m_NumClasses == 2) {      break;    }  }  m_Classifiers.add(classifiers);  for (int i=0; i < trainFs.length; i++) {    double[] pred=new double[m_NumClasses];    double predSum=0;    for (int j=0; j < m_NumClasses; j++) {      double tempPred=m_Shrinkage * classifiers[j].classifyInstance(data.instance(i));      if (Utils.isMissingValue(tempPred)) {        throw new UnassignedClassException("LogitBoost: base learner predicted missing value.");      }      pred[j]=tempPred;      if (m_NumClasses == 2) {        pred[1]=-tempPred;        break;      }      predSum+=pred[j];    }    predSum/=m_NumClasses;    for (int j=0; j < m_NumClasses; j++) {      trainFs[i][j]+=(pred[j] - predSum) * (m_NumClasses - 1) / m_NumClasses;    }  }  m_NumGenerated++;  for (int i=0; i < trainYs.length; i++) {    probs[i]=probs(trainFs[i]);  }}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:11.160 -0500",hash_original_method="0FDF6D870E8A1081CB846B08F1E5769A",hash_generated_method="02AD04A7CAB9640454FD6A3E63A18689") public boolean hasExtension(String extension){  return MimeUtils.hasExtension(extension);}  }
class C{  private void processAPAdded(AP ap){  String dpid=ap.getDpid();  int ip=IPv4.toIPv4Address(ap.getIp());  for (  ACLRule rule : getRules()) {    if (rule.getAction() != Action.ALLOW) {      if (rule.getNw_src() != null) {        if (IPAddressUtil.containIP(rule.getNw_src_prefix(),rule.getNw_src_maskbits(),ip)) {          if (checkIfRuleWorksInSwitch(rule.getId(),dpid)) {            continue;          }          String flowName="ACLRule_" + rule.getId() + "_"+ dpid;          generateFlow(rule,dpid,flowName);        }      } else {        if (IPAddressUtil.containIP(rule.getNw_dst_prefix(),rule.getNw_dst_maskbits(),ip)) {          if (checkIfRuleWorksInSwitch(rule.getId(),dpid)) {            continue;          }          String flowName="ACLRule_" + rule.getId() + "_"+ dpid;          generateFlow(rule,dpid,flowName);        }      }    }  }}  }
class C{  protected void skipIdentifier() throws IOException {  loop:   for (; ; ) {    current=reader.read();switch (current) {case 0xD:case 0xA:case 0x20:case 0x9:      current=reader.read();case -1:    break loop;}}}  }
class C{  private Map<String,BigDecimal> populateReasonsSum(final Object[] data,final Map<String,BigDecimal> taxSum){  BigDecimal tmpVal;  if (data[0].toString().equals(DEMANDRSN_CODE_GENERAL_TAX)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_GENERAL_TAX);    taxSum.put(DEMANDRSN_CODE_GENERAL_TAX,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  } else   if (data[0].toString().equals(DEMANDRSN_CODE_LIBRARY_CESS)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_LIBRARY_CESS);    taxSum.put(DEMANDRSN_CODE_LIBRARY_CESS,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  } else   if (data[0].toString().equals(DEMANDRSN_CODE_EDUCATIONAL_CESS)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_EDUCATIONAL_CESS);    taxSum.put(DEMANDRSN_CODE_EDUCATIONAL_CESS,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  } else   if (data[0].toString().equals(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY);    taxSum.put(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  } else   if (data[0].toString().equals(DEMANDRSN_CODE_PENALTY_FINES)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_PENALTY_FINES);    taxSum.put(DEMANDRSN_CODE_PENALTY_FINES,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  } else   if (data[0].toString().equals(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY)) {    tmpVal=taxSum.get(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY);    taxSum.put(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,tmpVal.add(((BigDecimal)data[2]).subtract((BigDecimal)data[3])));  }  return taxSum;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tCenter (rather than standardize) the" + "\n\tdata and compute PCA using the covariance (rather" + "\n\t than the correlation) matrix.","C",0,"-C"));  result.addElement(new Option("\tRetain enough PC attributes to account\n" + "\tfor this proportion of variance in the original data.\n" + "\t(default: 0.95)","R",1,"-R <num>"));  result.addElement(new Option("\tMaximum number of attributes to include in \n" + "\ttransformed attribute names.\n" + "\t(-1 = include all, default: 5)","A",1,"-A <num>"));  result.addElement(new Option("\tMaximum number of PC attributes to retain.\n" + "\t(-1 = include all, default: -1)","M",1,"-M <num>"));  return result.elements();}  }
class C{  private void calcMinMax(){  mYMin=mDataSets.get(0).getYMin();  mYMax=mDataSets.get(0).getYMax();  for (int i=0; i < mDataSets.size(); i++) {    if (mDataSets.get(i).getYMin() < mYMin)     mYMin=mDataSets.get(i).getYMin();    if (mDataSets.get(i).getYMax() > mYMax)     mYMax=mDataSets.get(i).getYMax();  }}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == GET_SAMPLE_TEXT) {    onSampleTextReceived(resultCode,data);  } else   if (requestCode == VOICE_DATA_INTEGRITY_CHECK) {    onVoiceDataIntegrityCheckDone(data);  }}  }
class C{  private static Pair<String,String> postIndexedImm(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue,dw,address));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,dw,immediateNodeValue,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,registerNodeValue));  return new Pair<String,String>(address,registerNodeValue);}  }
class C{  public MqttToken checkForActivity(IMqttActionListener pingCallback) throws MqttException {  final String methodName="checkForActivity";  log.fine(CLASS_NAME,methodName,"616",new Object[]{});synchronized (quiesceLock) {    if (quiescing) {      return null;    }  }  MqttToken token=null;  long nextPingTime=getKeepAlive();  if (connected && this.keepAlive > 0) {    long time=System.currentTimeMillis();    int delta=100;synchronized (pingOutstandingLock) {      if (pingOutstanding > 0 && (time - lastInboundActivity >= keepAlive + delta)) {        log.severe(CLASS_NAME,methodName,"619",new Object[]{new Long(this.keepAlive),new Long(lastOutboundActivity),new Long(lastInboundActivity),new Long(time),new Long(lastPing)});        throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_CLIENT_TIMEOUT);      }      if (pingOutstanding == 0 && (time - lastOutboundActivity >= 2 * keepAlive)) {        log.severe(CLASS_NAME,methodName,"642",new Object[]{new Long(this.keepAlive),new Long(lastOutboundActivity),new Long(lastInboundActivity),new Long(time),new Long(lastPing)});        throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_WRITE_TIMEOUT);      }      if ((pingOutstanding == 0 && (time - lastInboundActivity >= keepAlive - delta)) || (time - lastOutboundActivity >= keepAlive - delta)) {        log.fine(CLASS_NAME,methodName,"620",new Object[]{new Long(this.keepAlive),new Long(lastOutboundActivity),new Long(lastInboundActivity)});        token=new MqttToken(clientComms.getClient().getClientId());        if (pingCallback != null) {          token.setActionCallback(pingCallback);        }        tokenStore.saveToken(token,pingCommand);        pendingFlows.insertElementAt(pingCommand,0);        nextPingTime=getKeepAlive();        notifyQueueLock();      } else {        log.fine(CLASS_NAME,methodName,"634",null);        nextPingTime=Math.max(1,getKeepAlive() - (time - lastOutboundActivity));      }    }    log.fine(CLASS_NAME,methodName,"624",new Object[]{new Long(nextPingTime)});    pingSender.schedule(nextPingTime);  }  return token;}  }
class C{  public void foundActiveMaster(Protocol newMasterProtocol){  if (isMasterHostFail()) {    if (isExplicitClosed()) {      newMasterProtocol.close();      return;    }    if (!waitNewMasterProtocol.compareAndSet(null,newMasterProtocol)) {      newMasterProtocol.close();    }  } else {    newMasterProtocol.close();  }}  }
class C{  public static String delete(String inString,String pattern){  return replace(inString,pattern,"");}  }
class C{  protected void printIssueAndComments(URL issueUrl) throws IOException, ServiceException {  printIssueAndComments(getIssueEntry(issueUrl));}  }
class C{  public boolean exists(){  return file.exists();}  }
class C{  private void element(int start,int count){  String segment=new String(data,start,count);  if (count > 0) {    element(segment);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_about);}  }
class C{  public static Frustum fromPerspectiveVecs(Vec4 vTL,Vec4 vTR,Vec4 vBL,Vec4 vBR,double near,double far){  if (vTL == null || vTR == null || vBL == null || vBR == null) {    throw new IllegalArgumentException("Edge Vector Is Null");  }  double farMinusNear=far - near;  if (near <= 0 || farMinusNear <= 0) {    throw new IllegalArgumentException("Clipping Distance Out Of Range");  }  Vec4 lpn=vBL.cross3(vTL).normalize3();  Plane leftPlane=new Plane(lpn.x,lpn.y,lpn.z,0);  Vec4 rpn=vTR.cross3(vBR).normalize3();  Plane rightPlane=new Plane(rpn.x,rpn.y,rpn.z,0);  Vec4 bpn=vBR.cross3(vBL).normalize3();  Plane bottomPlane=new Plane(bpn.x,bpn.y,bpn.z,0);  Vec4 tpn=vTL.cross3(vTR).normalize3();  Plane topPlane=new Plane(tpn.x,tpn.y,tpn.z,0);  Plane nearPlane=new Plane(0d,0d,0d - 1d,0d - near);  Plane farPlane=new Plane(0d,0d,1d,far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public TimeParser(DateFormat dateFormat){  super(dateFormat);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_FALSE : XBoolean.S_TRUE;}  }
class C{  public void clearDirty(){  dirtyTimeStamp=Integer.MIN_VALUE + 2;  for (int i=0; i < dirty.length; i++) {    dirty[i]=Integer.MIN_VALUE;  }}  }
class C{  public SuspendException(List<LocalizedText> messages,Throwable cause){  super(messages,cause);}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new byte[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public java.lang.String substring(int beginIndex,int endIndex){  return null;}  }
class C{  public void run(String outputDir) throws IOException {  Config config=ConfigUtils.createConfig();  config.network().setInputFile(INPUT_DIR + "network.xml.gz");  config.plans().setInputFile(INPUT_DIR + "population.xml.gz");  SignalSystemsConfigGroup signalSystemsConfigGroup=ConfigUtils.addOrGetModule(config,SignalSystemsConfigGroup.GROUPNAME,SignalSystemsConfigGroup.class);  signalSystemsConfigGroup.setUseSignalSystems(true);  config.qsim().setNodeOffset(20.0);  config.qsim().setSnapshotStyle(SnapshotStyle.queue);  Scenario scenario=ScenarioUtils.loadScenario(config);  SignalsData signalsData=SignalUtils.createSignalsData(signalSystemsConfigGroup);  scenario.addScenarioElement(SignalsData.ELEMENT_NAME,signalsData);  this.createSignalSystemsAndGroups(signalsData.getSignalSystemsData(),signalsData.getSignalGroupsData());  this.createSignalControl(signalsData.getSignalControlData());  Files.createDirectories(Paths.get(outputDir));  signalSystemsConfigGroup.setSignalSystemFile(outputDir + "signal_systems.xml");  signalSystemsConfigGroup.setSignalGroupsFile(outputDir + "signal_groups.xml");  signalSystemsConfigGroup.setSignalControlFile(outputDir + "signal_control.xml");  String configFile=outputDir + "config.xml";  ConfigWriter configWriter=new ConfigWriter(config);  configWriter.write(configFile);  SignalsScenarioWriter signalsWriter=new SignalsScenarioWriter();  signalsWriter.setSignalSystemsOutputFilename(signalSystemsConfigGroup.getSignalSystemFile());  signalsWriter.setSignalGroupsOutputFilename(signalSystemsConfigGroup.getSignalGroupsFile());  signalsWriter.setSignalControlOutputFilename(signalSystemsConfigGroup.getSignalControlFile());  signalsWriter.writeSignalsData(scenario);  log.info("Config of simple traffic light scenario is written to " + configFile);  log.info("Visualize scenario by calling VisSimpleTrafficSignalScenario in the same package.");}  }
class C{  @VisibleForTesting protected String generateRandomUUID(){  return UUID.randomUUID().toString();}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setUpdateByDate(null);  setUpdateByRevisionOrTag(null);  setKeywordSubstitution(null);}  }
class C{  public PollReqContent(ASN1Integer certReqId){  this(new DERSequence(new DERSequence(certReqId)));}  }
class C{  public String fetchWeatherCurrent(String city,Integer userId,String language,String units){  String cityFound;  String responseToUser;  Emoji emoji=null;  try {    String completURL=BASEURL + CURRENTPATH + "?"+ getCityQuery(city)+ CURRENTPARAMS.replace("@language@",language).replace("@units@",units)+ APIIDEND;    CloseableHttpClient client=HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();    HttpGet request=new HttpGet(completURL);    CloseableHttpResponse response=client.execute(request);    HttpEntity ht=response.getEntity();    BufferedHttpEntity buf=new BufferedHttpEntity(ht);    String responseString=EntityUtils.toString(buf,"UTF-8");    JSONObject jsonObject=new JSONObject(responseString);    if (jsonObject.getInt("cod") == 200) {      cityFound=jsonObject.getString("name") + " (" + jsonObject.getJSONObject("sys").getString("country")+ ")";      saveRecentWeather(userId,cityFound,jsonObject.getInt("id"));      emoji=getEmojiForWeather(jsonObject.getJSONArray("weather").getJSONObject(0));      responseToUser=String.format(LocalisationService.getInstance().getString("weatherCurrent",language),cityFound,convertCurrentWeatherToString(jsonObject,language,units,emoji));    } else {      BotLogger.warn(LOGTAG,jsonObject.toString());      responseToUser=LocalisationService.getInstance().getString("cityNotFound",language);    }  } catch (  Exception e) {    BotLogger.error(LOGTAG,e);    responseToUser=LocalisationService.getInstance().getString("errorFetchingWeather",language);  }  return responseToUser;}  }
class C{  public String toString(DbClient dbClient,ProtectionSystem ps,int... noOfTabs){  StringBuffer buff=new StringBuffer();  final String TAB="\t";  String printTabs=TAB;  if (noOfTabs.length > 0 && noOfTabs[0] > 0) {    for (int i=0; i < noOfTabs[0]; i++) {      printTabs+=TAB;    }  }  VirtualArray varray=dbClient.queryObject(VirtualArray.class,getVirtualArray());  VirtualPool vpool=getVirtualPool();  StoragePool storagePool=dbClient.queryObject(StoragePool.class,getSourceStoragePool());  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getSourceStorageSystem());  buff.append(String.format("%n"));  buff.append(printTabs + String.format("Resource Count	: %s %n",this.getResourceCount()));  String siteName=((ps.getRpSiteNames() != null) ? ps.getRpSiteNames().get(this.getInternalSiteName()) : "");  String siteId=this.getInternalSiteName();  if (this.getInternalSiteName() == null) {    siteName="(no RP protection specified)";    siteId="";  }  buff.append(printTabs + String.format("Internal Site \t\t: %s %s %n",siteName,siteId));  buff.append(printTabs + String.format("RP Copy Name \t\t: %s %n",(this.getRpCopyName() == null ? "Not determined yet" : this.getRpCopyName())));  buff.append(printTabs + String.format("Virtual Array \t\t: %s %n",varray.getLabel()));  buff.append(printTabs + String.format("Virtual Pool \t\t: %s %n",vpool.getLabel()));  if (virtualVolumeRecommendation != null && virtualVolumeRecommendation.getVPlexStorageSystem() != null) {    StorageSystem vplexStorageSystem=dbClient.queryObject(StorageSystem.class,virtualVolumeRecommendation.getVPlexStorageSystem());    buff.append(printTabs + String.format("VPLEX Storage \t\t: %s %n",vplexStorageSystem.getLabel()));  }  buff.append(printTabs + String.format("Storage Pool \t\t: %s %n",storagePool.getLabel()));  buff.append(printTabs + String.format("Storage System \t\t: %s %n",storageSystem.getLabel()));  buff.append(printTabs + String.format("Resource Size \t\t: %s GB %n",SizeUtil.translateSize(this.getSize(),SizeUtil.SIZE_GB)));  buff.append(String.format("----------------------%n"));  if (this.getHaRecommendation() != null) {    buff.append(printTabs + String.format("High Availability Recommendation : %n"));    buff.append(getHaRecommendation().toString(dbClient,ps,1));    if (this.getHaRecommendation().getTargetRecommendations() != null && !this.getHaRecommendation().getTargetRecommendations().isEmpty()) {      buff.append(printTabs + String.format("High Availability Target : %n"));      for (      RPRecommendation haTargetRec : this.getHaRecommendation().getTargetRecommendations()) {        buff.append(String.format("%s",haTargetRec.toString(dbClient,ps,1)));      }    }  }  return buff.toString();}  }
class C{  public static double[][] extractSelectedPointsMatchingCondition(double[][] data,int[] conditionalData,int conditionalValue,int knownNumExtractedValues){  int columns=data[0].length;  double[][] extracted=new double[knownNumExtractedValues][columns];  int rowsCopied=0;  if (knownNumExtractedValues == 0) {    return extracted;  }  for (int t=0; t < data.length; t++) {    if (conditionalData[t] == conditionalValue) {      System.arraycopy(data[t],0,extracted[rowsCopied++],0,columns);    }    if (rowsCopied == knownNumExtractedValues) {      break;    }  }  return extracted;}  }
class C{  public final void removeLeg(final int index){  if ((index % 2 == 0) || (index < 1) || (index >= getPlanElements().size() - 1))   ; else {    if (index != getPlanElements().size() - 2) {      Leg next_leg=(Leg)getPlanElements().get(index + 2);      next_leg.setDepartureTime(Time.UNDEFINED_TIME);      next_leg.setTravelTime(Time.UNDEFINED_TIME);      next_leg.setTravelTime(Time.UNDEFINED_TIME - next_leg.getDepartureTime());      next_leg.setRoute(null);    }    getPlanElements().remove(index + 1);    getPlanElements().remove(index);  }}  }
class C{  public void scrollColumnToVisible(int col){  scrollRectToVisible(getCellRect(0,col,true));}  }
class C{  public static void sort(double[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static MetaClass metaClass(Class self,Closure closure){  MetaClassRegistry metaClassRegistry=GroovySystem.getMetaClassRegistry();  MetaClass mc=metaClassRegistry.getMetaClass(self);  if (mc instanceof ExpandoMetaClass) {    ((ExpandoMetaClass)mc).define(closure);    return mc;  } else {    if (mc instanceof DelegatingMetaClass && ((DelegatingMetaClass)mc).getAdaptee() instanceof ExpandoMetaClass) {      ((ExpandoMetaClass)((DelegatingMetaClass)mc).getAdaptee()).define(closure);      return mc;    } else {      if (mc instanceof DelegatingMetaClass && ((DelegatingMetaClass)mc).getAdaptee().getClass() == MetaClassImpl.class) {        ExpandoMetaClass emc=new ExpandoMetaClass(self,false,true);        emc.initialize();        emc.define(closure);        ((DelegatingMetaClass)mc).setAdaptee(emc);        return mc;      } else {        if (mc.getClass() == MetaClassImpl.class) {          mc=new ExpandoMetaClass(self,false,true);          mc.initialize();          ((ExpandoMetaClass)mc).define(closure);          metaClassRegistry.setMetaClass(self,mc);          return mc;        } else {          throw new GroovyRuntimeException("Can't add methods to custom meta class " + mc);        }      }    }  }}  }
class C{  public static String canonicalClassName(Class<?> c,Package pkg,String postfix){  String name=c.getName();  if (pkg != null) {    String prefix=pkg.getName() + ".";    if (name.startsWith(prefix)) {      name=name.substring(prefix.length());    }  }  if (postfix != null && name.endsWith(postfix)) {    name=name.substring(0,name.length() - postfix.length());  }  return name;}  }
class C{  private void initializeIDPLib(String clientKey,String clientSecret){  String serverIP=Preference.getString(LoginActivity.this,Constants.PreferenceFlag.IP);  if (serverIP != null && !serverIP.isEmpty()) {    ServerConfig utils=new ServerConfig();    utils.setServerIP(serverIP);    String serverURL=utils.getServerURL(context) + Constants.OAUTH_ENDPOINT;    Editable tenantDomain=etDomain.getText();    if (tenantDomain != null && !tenantDomain.toString().trim().isEmpty()) {      username=etUsername.getText().toString().trim() + context.getResources().getString(R.string.intent_extra_at) + tenantDomain.toString().trim();    } else {      username=etUsername.getText().toString().trim();    }    Preference.putString(context,Constants.CLIENT_ID,clientKey);    Preference.putString(context,Constants.CLIENT_SECRET,clientSecret);    CredentialInfo info=new CredentialInfo();    info.setClientID(clientKey);    info.setClientSecret(clientSecret);    info.setUsername(username);    try {      info.setPassword(URLEncoder.encode(passwordVal,"UTF-8"));    } catch (    UnsupportedEncodingException e) {      String msg="error occurred while encoding password.";      Log.e(TAG,msg,e);    }    info.setTokenEndPoint(serverURL);    if (tenantDomain != null && !tenantDomain.toString().trim().isEmpty()) {      info.setTenantDomain(tenantDomain.toString().trim());    }    IdentityProxy.getInstance().init(info,LoginActivity.this,this.getApplicationContext());  }}  }
class C{  public void addScoringFunction(BasicScoring scoringFunction){  basicScoringFunctions.add(scoringFunction);  if (scoringFunction instanceof ActivityScoring) {    activityScoringFunctions.add((ActivityScoring)scoringFunction);  }  if (scoringFunction instanceof AgentStuckScoring) {    agentStuckScoringFunctions.add((AgentStuckScoring)scoringFunction);  }  if (scoringFunction instanceof MoneyScoring) {    moneyScoringFunctions.add((MoneyScoring)scoringFunction);  }  if (scoringFunction instanceof ArbitraryEventScoring) {    this.arbitraryEventScoringFunctions.add((ArbitraryEventScoring)scoringFunction);  }}  }
class C{  public TxRequest16(XBeeAddress16 remoteAddr16,int[] payload){  this(remoteAddr16,DEFAULT_FRAME_ID,Option.UNICAST,payload);}  }
class C{  public void translate(float x,float y,float z){  transformMatrix.translate(x,y,z);  matrixDirty=true;}  }
class C{  @SuppressWarnings("unchecked") public <T>CompletableFuture<T> apply(Entry entry){  LOGGER.debug("{} - Applying {}",state.getCluster().member().address(),entry);  if (entry instanceof QueryEntry) {    return (CompletableFuture<T>)apply((QueryEntry)entry);  } else   if (entry instanceof CommandEntry) {    return (CompletableFuture<T>)apply((CommandEntry)entry);  } else   if (entry instanceof RegisterEntry) {    return (CompletableFuture<T>)apply((RegisterEntry)entry);  } else   if (entry instanceof KeepAliveEntry) {    return (CompletableFuture<T>)apply((KeepAliveEntry)entry);  } else   if (entry instanceof UnregisterEntry) {    return (CompletableFuture<T>)apply((UnregisterEntry)entry);  } else   if (entry instanceof InitializeEntry) {    return (CompletableFuture<T>)apply((InitializeEntry)entry);  } else   if (entry instanceof ConnectEntry) {    return (CompletableFuture<T>)apply((ConnectEntry)entry);  } else   if (entry instanceof ConfigurationEntry) {    return (CompletableFuture<T>)apply((ConfigurationEntry)entry);  }  return Futures.exceptionalFuture(new InternalException("unknown state machine operation"));}  }
class C{  void handleKeyEvent(int eventType,int modifierFlags,String chars,String charsIgnoringModifiers,short keyCode,boolean needsKeyTyped,boolean needsKeyReleased){  boolean isFlagsChangedEvent=isNpapiCallback ? (eventType == CocoaConstants.NPCocoaEventFlagsChanged) : (eventType == CocoaConstants.NSFlagsChanged);  int jeventType=KeyEvent.KEY_PRESSED;  int jkeyCode=KeyEvent.VK_UNDEFINED;  int jkeyLocation=KeyEvent.KEY_LOCATION_UNKNOWN;  boolean postsTyped=false;  char testChar=KeyEvent.CHAR_UNDEFINED;  boolean isDeadChar=(chars != null && chars.length() == 0);  if (isFlagsChangedEvent) {    int[] in=new int[]{modifierFlags,keyCode};    int[] out=new int[3];    NSEvent.nsKeyModifiersToJavaKeyInfo(in,out);    jkeyCode=out[0];    jkeyLocation=out[1];    jeventType=out[2];  } else {    if (chars != null && chars.length() > 0) {      testChar=chars.charAt(0);    }    char testCharIgnoringModifiers=charsIgnoringModifiers != null && charsIgnoringModifiers.length() > 0 ? charsIgnoringModifiers.charAt(0) : KeyEvent.CHAR_UNDEFINED;    int[] in=new int[]{testCharIgnoringModifiers,isDeadChar ? 1 : 0,modifierFlags,keyCode};    int[] out=new int[3];    postsTyped=NSEvent.nsToJavaKeyInfo(in,out);    if (!postsTyped) {      testChar=KeyEvent.CHAR_UNDEFINED;    }    if (isDeadChar) {      testChar=(char)out[2];      if (testChar == 0) {        return;      }    }    LWCToolkit lwcToolkit=(LWCToolkit)Toolkit.getDefaultToolkit();    if (lwcToolkit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK) && Locale.SIMPLIFIED_CHINESE.equals(lwcToolkit.getDefaultKeyboardLocale())) {      testChar=testCharIgnoringModifiers;    }    jkeyCode=out[0];    jkeyLocation=out[1];    jeventType=isNpapiCallback ? NSEvent.npToJavaEventType(eventType) : NSEvent.nsToJavaEventType(eventType);  }  char javaChar=NSEvent.nsToJavaChar(testChar,modifierFlags);  if (javaChar == KeyEvent.CHAR_UNDEFINED) {    postsTyped=false;  }  int jmodifiers=NSEvent.nsToJavaKeyModifiers(modifierFlags);  long when=System.currentTimeMillis();  if (jeventType == KeyEvent.KEY_PRESSED) {    lastKeyPressCode=jkeyCode;  }  eventNotifier.notifyKeyEvent(jeventType,when,jmodifiers,jkeyCode,javaChar,jkeyLocation);  postsTyped&=needsKeyTyped;  if (jeventType == KeyEvent.KEY_PRESSED && postsTyped && (jmodifiers & KeyEvent.META_DOWN_MASK) == 0) {    if (needsKeyReleased && (jkeyCode == KeyEvent.VK_ENTER || jkeyCode == KeyEvent.VK_SPACE)) {      return;    }    eventNotifier.notifyKeyEvent(KeyEvent.KEY_TYPED,when,jmodifiers,KeyEvent.VK_UNDEFINED,javaChar,KeyEvent.KEY_LOCATION_UNKNOWN);    if (needsKeyReleased) {      eventNotifier.notifyKeyEvent(KeyEvent.KEY_RELEASED,when,jmodifiers,jkeyCode,javaChar,KeyEvent.KEY_LOCATION_UNKNOWN);    }  }}  }
class C{  public static PasswordValidator buildResetValidator(Map<String,String> properties){  return buildContentValidator(properties);}  }
class C{  public void testReceiveRequest() throws Exception {  SimpleRequestCollector requestCollector=new SimpleRequestCollector();  stunStack.addRequestListener(requestCollector);  dummyServerSocket.send(new DatagramPacket(msgFixture.bindingRequest2,msgFixture.bindingRequest2.length,localAddress));  requestCollector.waitForRequest();  Request collectedRequest=requestCollector.collectedRequest;  assertNotNull("No request has been received",collectedRequest);  byte expectedReturn[]=msgFixture.bindingRequest2;  byte actualReturn[]=collectedRequest.encode(stunStack);  assertTrue("Received request was not the same as the one that was sent",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public static NeuronDialog createNeuronDialog(final Collection<NeuronNode> selectedNeurons,final Frame parent){  NeuronDialog nd=new NeuronDialog(selectedNeurons,parent);  nd.neuronPropertiesPanel=NeuronPropertiesPanel.createNeuronPropertiesPanel(nd.neuronList,nd);  nd.init();  nd.addListeners();  nd.updateHelp();  return nd;}  }
class C{  public static int calcColumnWidth(JTable table,int col){  int width=calcHeaderWidth(table,col);  if (width == -1) {    return width;  }  TableColumnModel columns=table.getColumnModel();  TableModel data=table.getModel();  int rowCount=data.getRowCount();  columns.getColumn(col);  try {    for (int row=rowCount - 1; row >= 0; --row) {      Component c=table.prepareRenderer(table.getCellRenderer(row,col),row,col);      width=Math.max(width,c.getPreferredSize().width + 10);    }  } catch (  Exception e) {    e.printStackTrace();  }  return width;}  }
class C{  public List<Map<String,String>> retrieveLabels(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting mail labels for user " + user + " ...");  GenericFeed labelsFeed=retrieveSettingsFeed(user,Constants.LABEL);  if (labelsFeed != null) {    List<Map<String,String>> labels=new ArrayList<Map<String,String>>();    List<GenericEntry> labelEntries=labelsFeed.getEntries();    for (    GenericEntry labelEntry : labelEntries) {      Map<String,String> labelMap=new HashMap<String,String>();      labelMap.put(Constants.LABEL,labelEntry.getProperty(Constants.LABEL));      labelMap.put(Constants.UNREAD_COUNT,labelEntry.getProperty(Constants.UNREAD_COUNT));      labelMap.put(Constants.VISIBILITY,labelEntry.getProperty(Constants.VISIBILITY));      labels.add(labelMap);    }    return labels;  }  return null;}  }
class C{  public boolean hasChildren(){  return !children.isEmpty();}  }
class C{  public void addMailToAddress(String toAddress){  mailToSet.add(toAddress);  mailToAddresses=getAllToAddresses();}  }
class C{  @Before public void beginTransaction(){  session=ServerConfDatabaseCtx.get().beginTransaction();}  }
class C{  public void removeCategory(String category){  this.hiddenBugCategorySet.add(category);  this.activeBugCategorySet.remove(category);}  }
class C{  public boolean isCertificateRelatedTSLWellSigned(final String dssCertificateId){  CertificateWrapper certificate=getUsedCertificateByIdNullSafe(dssCertificateId);  return certificate.isCertificateRelatedTSLWellSigned();}  }
class C{  public EventBus(){  this("default");}  }
class C{  public PlotLayer(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean foo_bar0(String x){  if (x.length() > 1)   return true; else   return false;}  }
class C{  public IVector(int[] v){  if (v.length == 0)   vector=new int[defaultCapacity]; else {    vector=v;    size=vector.length;  }}  }
class C{  public static boolean isClear(Paint paint){  if (paint instanceof Color) {    return ((((Color)paint).getRGB() & 0xff000000) == 0);  } else {    return false;  }}  }
class C{  public List<String> listUsers(ClientApplicationType clientApplicationType){  List<String> listUsers=new ArrayList<String>();  if (this.passwordsProperties == null)   this.loadPasswordsAsTungstenProperties();  Set<String> setUsernames=this.passwordsProperties.keyNames();  for (  String entry : setUsernames) {    String username=this.getUsernameFromEntry(entry);    ClientApplicationType applicationType=this.getClientApplicationTypeFromEntry(entry);    if (applicationType == clientApplicationType)     listUsers.add(username);  }  Collections.sort(listUsers);  return listUsers;}  }
class C{  public void closeAndDeleteSilently(){  if (file != null) {    closeSilently();    handler.getTempFileDeleter().deleteFile(autoDeleteReference,name);    name=null;  }}  }
class C{  public PFont createFont(String name,float size,boolean smooth,char[] charset){  String lowerName=name.toLowerCase();  Typeface baseFont=null;  if (lowerName.endsWith(".otf") || lowerName.endsWith(".ttf")) {    AssetManager assets=activity.getAssets();    baseFont=Typeface.createFromAsset(assets,name);  } else {    baseFont=(Typeface)PFont.findNative(name);  }  return new PFont(baseFont,round(size),smooth,charset);}  }
class C{  @Override public View onCreateView(LayoutInflater layoutInflater,ViewGroup viewGroup,Bundle bundle){  videoContainer=super.onCreateView(layoutInflater,viewGroup,bundle);  if (videoContainer != null) {    videoContainer.setBackgroundColor(Color.BLACK);    videoContainer.setVisibility(View.GONE);  }  return videoContainer;}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public double normalDistance(final double x,final double y,final double z){  return Math.sqrt(normalDistanceSquared(x,y,z));}  }
class C{  public void done(){}  }
class C{  public ResidualSplit(int attIndex){  m_attIndex=attIndex;}  }
class C{  public Array singularValues(){  return s.clone();}  }
class C{  public Vector3f mult(float scalar,Vector3f product){  if (null == product) {    product=new Vector3f();  }  product.x=x * scalar;  product.y=y * scalar;  product.z=z * scalar;  return product;}  }
class C{  public int size(){  return _size;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.DECLARED_VERSION__MAJOR:    return major != MAJOR_EDEFAULT;case N4mfPackage.DECLARED_VERSION__MINOR:  return minor != MINOR_EDEFAULT;case N4mfPackage.DECLARED_VERSION__MICRO:return micro != MICRO_EDEFAULT;case N4mfPackage.DECLARED_VERSION__QUALIFIER:return QUALIFIER_EDEFAULT == null ? qualifier != null : !QUALIFIER_EDEFAULT.equals(qualifier);}return super.eIsSet(featureID);}  }
class C{  public int size(){  return n;}  }
class C{  private void searchEdge(final NaviEdge edge,final String searchString){  m_results.addAll(CEdgeSearcher.search(edge,searchString,m_settings.isRegEx(),m_settings.isCaseSensitive()));  if (!m_results.isEmpty()) {    m_cursor.reset();  }}  }
class C{  public final static String htmlEncode(String plainText){  if (plainText == null || plainText.length() == 0) {    return "";  }  StringBuilder result=new StringBuilder(plainText.length());  for (int index=0; index < plainText.length(); index++) {    char ch=plainText.charAt(index);switch (ch) {case '"':      result.append("&quot;");    break;case '&':  result.append("&amp;");break;case '<':result.append("&lt;");break;case '>':result.append("&gt;");break;case '\'':result.append("&#x27;");break;case '/':result.append("&#x2F;");break;default :result.append(ch);}}return result.toString();}  }
class C{  public void applyLocalizedPattern(String pattern){  ndf.applyLocalizedPattern(pattern);}  }
class C{  private void _deserializeQueryField(Query query,Element field) throws PageException, ConverterException {  String name=field.getAttribute("name");  NodeList list=field.getChildNodes();  int len=list.getLength();  int count=0;  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      query.setAt(name,++count,_deserialize((Element)node));    }  }}  }
class C{  private void write(char c) throws SAXException {  try {    output.write(c);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  protected StreamPropertiesImpl(StreamPropertiesBuilder<?> builder){  this.altRegistry=builder.altRegistry;  this.contentType=builder.contentType;  this.extensionProfile=builder.extensionProfile;  this.queryMap=builder.queryMap;  this.elementMetadata=builder.rootMetadata;}  }
class C{  public Vertex parseElementByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean includeBinary,boolean debug,Network network) throws IOException {  getComments(stream);  stream.skipWhitespace();  int brackets=0;  while (stream.peek() == '(') {    includeBinary=true;    brackets++;    stream.skip();    stream.skipWhitespace();  }  if (stream.peek() == '[') {    stream.skip();    Vertex array=network.createInstance(Primitive.ARRAY);    stream.skipWhitespace();    if (stream.peek() == ']') {      stream.skip();      array.addRelationship(Primitive.LENGTH,network.createVertex(0));      dataStream.writeLong(array.getId());      return array;    }    boolean more=true;    int index=0;    while (more) {      Vertex element=parseElement(stream,elements,debug,network);      array.addRelationship(Primitive.ELEMENT,element,index);      index++;      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    stream.skipWhitespace();    ensureNext(']',stream);    dataStream.writeLong(array.getId());    return array;  }  if (stream.peek() == '{') {    stream.skip();    Vertex object=network.createVertex();    stream.skipWhitespace();    if (stream.peek() == '}') {      stream.skip();      dataStream.writeLong(object.getId());      return object;    }    boolean more=true;    while (more) {      String attribute=stream.nextWord();      ensureNext(':',stream);      Vertex element=parseElement(stream,elements,debug,network);      object.addRelationship(new Primitive(attribute),element);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    stream.skipWhitespace();    ensureNext('}',stream);    dataStream.writeLong(object.getId());    return object;  }  String token=stream.peekWord();  if (token == null) {    throw new SelfParseException("Unexpected end, element expected",stream);  }  token=token.toLowerCase();  if (token.equals(VAR)) {    token=VARIABLE;  }  Vertex element=null;  if (OPERATORS.contains(token)) {    dataStream.writeLong(network.createVertex(Primitive.EXPRESSION).getId());    parseOperatorByteCode(dataStream,stream,elements,debug,network);  } else   if (token.equals("^")) {    stream.nextWord();    element=parseElementName(Primitive.VARIABLE,stream,elements,debug,network);    Vertex meaning=network.createInstance(Primitive.VARIABLE);    meaning.addRelationship(Primitive.INSTANTIATION,new Primitive(element.getName()));    element.addRelationship(Primitive.MEANING,meaning);    dataStream.writeLong(element.getId());  } else   if (TYPES.contains(token)) {    stream.nextWord();    if (token.equals(TEMPLATE)) {      stream.skipWhitespace();      ensureNext('(',stream);      element=parseTemplate(null,stream,elements,debug,network);      dataStream.writeLong(element.getId());      stream.skipWhitespace();      ensureNext(')',stream);    } else     if (token.equals(PATTERN)) {      stream.skipWhitespace();      ensureNext('(',stream);      ensureNext('"',stream);      element=network.createPattern(stream.nextQuotesExcludeDoubleQuote(),this);      dataStream.writeLong(element.getId());      stream.skipWhitespace();      ensureNext(')',stream);    } else     if (token.equals(VARIABLE)) {      element=parseElementName(Primitive.VARIABLE,stream,elements,debug,network);      dataStream.writeLong(element.getId());    } else {      stream.skipWhitespace();      if (stream.peek() != '(') {        throw new SelfParseException("Expected '(' in " + token + " declaration",stream);      }      stream.skip();      Long id=null;      if (Character.isDigit(stream.peek())) {        String idText=stream.nextWord();        try {          id=Long.valueOf(idText);        } catch (        NumberFormatException exception) {          throw new SelfParseException("Invalid " + token + " id: "+ idText,stream);        }      }      char peek=stream.peek();      String name=null;      if ((id == null) || (peek == ':')) {        if (id != null) {          stream.skip();        }        name=stream.nextWord();        if (name != null && Character.isLetter(name.charAt(0))) {          throw new SelfParseException("Invalid " + token + " declaration: "+ name,stream);        }      }      Map<String,Vertex> elementsForType=elements.get(token);      element=null;      if (name != null) {        if (elementsForType != null) {          element=elementsForType.get(name);          if (element != null) {            dataStream.writeLong(element.getId());          }        }      }      if (element == null) {        if (id != null) {          element=network.findById(id);          if (element == null) {            throw new SelfParseException("Id element reference not found: " + id,stream);          }          if ((elementsForType != null) && (name != null)) {            elementsForType.put(name,element);          }          dataStream.writeLong(element.getId());        } else         if (name != null) {          if (token.equals(STATE)) {            element=network.createInstance(Primitive.STATE);            element.setName(name);          } else           if (token.equals(VARIABLE)) {            element=network.createInstance(Primitive.VARIABLE);            element.setName(name);          } else           if (token.equals(FUNCTION)) {            element=network.createInstance(Primitive.FUNCTION);            element.setName(name);          } else {            throw new SelfParseException("Invalid element: " + token,stream);          }          if (name != null) {            elementsForType=elements.get(token);            if (elementsForType != null) {              elementsForType.put(name,element);            }          }          dataStream.writeLong(element.getId());        } else {          throw new SelfParseException("Invalid element: " + token,stream);        }      }      stream.skipWhitespace();      ensureNext(')',stream);    }  } else {    char next=stream.peek();    try {      if (next == '#') {        stream.skip();        String data=stream.upToAny(PRIMITIVE_TOKENS);        element=network.createVertex(new Primitive(data));        dataStream.writeLong(element.getId());      } else       if (next == '"') {        stream.skip();        String data=stream.nextStringDoubleQuotes();        element=network.createVertex(data);        dataStream.writeLong(element.getId());      } else       if (next == '\'') {        stream.skip();        String data=stream.nextStringQuotes();        element=network.createVertex(data);        dataStream.writeLong(element.getId());      } else       if (Character.isDigit(next) || next == '-' || next == '+') {        int position=stream.getPosition();        String data=stream.nextWord();        if (data.indexOf(',') != -1) {          stream.setPosition(position);          data=stream.upTo(',');        }        int index=data.indexOf('.');        if ((index != -1) && (index + 1 < data.length())) {          if (!Character.isDigit(data.charAt(index + 1))) {            stream.setPosition(position);            data=stream.upTo('.');          }        }        element=network.createVertex(new BigInteger(data));        dataStream.writeLong(element.getId());      } else {        element=parseElementName(null,stream,elements,debug,network);        dataStream.writeLong(element.getId());      }    } catch (    SelfParseException exception) {      throw exception;    }catch (    Exception exception) {      throw new SelfParseException("Invalid data: " + next,stream,exception);    }  }  stream.skipWhitespace();  char peek=stream.peek();  Vertex push=network.createVertex(Primitive.PUSH);  Vertex pop=network.createVertex(Primitive.POP);  while (".=!&|)[<>+-*/".indexOf(peek) != -1) {    String operator1=stream.peek(1);    String operator=stream.peek(2);    if (peek == ')') {      if (brackets > 0) {        brackets--;        stream.skip();      } else {        break;      }    } else     if (peek == '.') {      element=null;      stream.skip();      int position=stream.getPosition();      String attribute=stream.nextWord();      if (!Character.isAlphabetic(attribute.charAt(0))) {        throw new SelfParseException("Invalid attribute name: " + attribute,stream);      }      if (attribute.indexOf('.') != -1) {        stream.setPosition(position);        stream.skipWhitespace();        attribute=stream.upTo('.');      }      stream.skipWhitespace();      Vertex associate=null;      Vertex associateRelationship=null;      peek=stream.peek();      if (peek == '(') {        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(Primitive.CALL).getId());        dataStream.writeLong(network.createVertex(Primitive.THIS).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(0l);        dataStream.writeLong(network.createVertex(Primitive.FUNCTION).getId());        dataStream.writeLong(network.createVertex(new Primitive(attribute)).getId());        dataStream.writeLong(0l);        parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);        dataStream.writeLong(0l);      } else {        Vertex index=null;        if (peek == '[') {          stream.skip();          index=parseElement(stream,elements,debug,network);          stream.skipWhitespace();          if (stream.peek() == ',') {            associate=index;            associateRelationship=parseElement(stream,elements,debug,network);          }          ensureNext(']',stream);          peek=stream.peek();        }        boolean isSet=false;        String peek2=stream.peek(2);        dataStream.writeLong(push.getId());        if (peek == '=' && peek2.equals("=+")) {          isSet=true;          stream.skip(2);          dataStream.writeLong(network.createVertex(Primitive.ADD).getId());        } else         if (peek == '=' && peek2.equals("=-")) {          isSet=true;          stream.skip(2);          dataStream.writeLong(network.createVertex(Primitive.REMOVE).getId());        } else         if (peek == '=' && !peek2.equals("==")) {          isSet=true;          stream.skip();          dataStream.writeLong(network.createVertex(Primitive.SET).getId());        } else {          dataStream.writeLong(network.createVertex(Primitive.GET).getId());        }        if (index != null) {          dataStream.writeLong(network.createVertex(Primitive.INDEX).getId());          dataStream.writeLong(index.getId());          dataStream.writeLong(0l);        }        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(network.createVertex(new Primitive(attribute)).getId());        if (isSet) {          parseElementByteCode(stream,dataStream,elements,debug,network);        }        if (associate != null) {          dataStream.writeLong(associate.getId());          dataStream.writeLong(associateRelationship.getId());        }        dataStream.writeLong(0l);        dataStream.writeLong(0l);      }    } else     if (peek == '[') {      element=null;      stream.skip();      Vertex variable=parseElement(stream,elements,debug,network);      stream.skipWhitespace();      ensureNext(']',stream);      stream.skipWhitespace();      peek=stream.peek();      if (peek == '(') {        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(Primitive.CALL).getId());        dataStream.writeLong(network.createVertex(Primitive.THIS).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(0l);        dataStream.writeLong(network.createVertex(Primitive.FUNCTION).getId());        dataStream.writeLong(variable.getId());        dataStream.writeLong(0l);        parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);        dataStream.writeLong(0l);      } else {        boolean isSet=false;        String peek2=stream.peek(2);        dataStream.writeLong(push.getId());        if (peek == '=' && peek2.equals("=+")) {          isSet=true;          stream.skip(2);          dataStream.writeLong(network.createVertex(Primitive.ADD).getId());        } else         if (peek == '=' && peek2.equals("=-")) {          isSet=true;          stream.skip(2);          dataStream.writeLong(network.createVertex(Primitive.REMOVE).getId());        } else         if (stream.peek() == '=' && !stream.peek(2).equals("==")) {          isSet=true;          stream.skip();          dataStream.writeLong(network.createVertex(Primitive.SET).getId());        } else {          dataStream.writeLong(network.createVertex(Primitive.GET).getId());        }        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(variable.getId());        if (isSet) {          parseElementByteCode(stream,dataStream,elements,debug,network);        }        dataStream.writeLong(0l);        dataStream.writeLong(0l);      }    } else     if (includeBinary) {      element=null;      Primitive operation=BINARY_OPERATORS.get(operator);      Primitive operation1=null;      if (operation == null) {        operation1=BINARY_OPERATORS.get(operator1);      }      if (operator.equals("//")) {        break;      } else       if (operator.equals("++")) {        stream.skip(2);        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(Primitive.INCREMENT).getId());        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(0l);        dataStream.writeLong(0l);      } else       if (operator.equals("--")) {        stream.skip(2);        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(Primitive.DECREMENT).getId());        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        dataStream.writeLong(0l);        dataStream.writeLong(0l);      } else       if (operation != null || operation1 != null) {        if (operation == null) {          stream.skip();          operator=operator1;          operation=operation1;        } else {          stream.skip(2);        }        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(operation).getId());        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        parseElementByteCode(stream,dataStream,elements,false,debug,network);        dataStream.writeLong(0l);        dataStream.writeLong(0l);      } else       if (peek == '=') {        stream.skip();        dataStream.writeLong(push.getId());        dataStream.writeLong(network.createVertex(Primitive.ASSIGN).getId());        dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());        dataStream.writeLong(pop.getId());        parseElementByteCode(stream,dataStream,elements,true,debug,network);        dataStream.writeLong(0l);        dataStream.writeLong(0l);      } else {        throw new SelfParseException("Invalid operator: " + operator,stream);      }    } else {      break;    }    stream.skipWhitespace();    peek=stream.peek();  }  stream.skipWhitespace();  while (brackets > 0) {    stream.skipWhitespace();    ensureNext(')',stream);    brackets--;  }  return element;}  }
class C{  @Override public long cadence(){  return chain.stream().map(null).filter(null).reduce(null).orElse(-1L);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  protected boolean findFosterNodes(Node node){  boolean isTable=false;  if (!lastTables.isEmpty()) {    if (node.getNodeType() == Node.NodeType.TEXT) {      String value=node.getNodeValue();      if (!StringUtil.isBlank(value)) {        if (isParentNodeOneOfFosterTableElements(node.getParentNode())) {          fosterTexts.add((Text)node);        }      }    }  }  if (node.getNodeType() == Node.NodeType.ELEMENT) {    Element element=(Element)node;    isTable=isTableElement(node);    if (isTable) {      lastTables.add(element);    } else {      if (!lastTables.isEmpty()) {        Node parentNode=node.getParentNode();        if (isParentNodeOneOfFosterTableElements(parentNode) && !isOneOfTableElements(element)) {          String elementNodeName=element.getNodeName().toLowerCase();          if (elementNodeName.equals("form")) {            if (element.getChildNodesCount() > 0) {              Node[] formChildNodes=element.getChildNodes();              parentNode.insertAfter(formChildNodes,element);              return false;            } else {              return true;            }          }          if (elementNodeName.equals("input")) {            String inputType=element.getAttribute("type");            if (inputType.equals("hidden")) {              return true;            }          }          fosterElements.add(element);        }      } else {      }    }  }  allchilds:   while (true) {    int childs=node.getChildNodesCount();    for (int i=0; i < childs; i++) {      Node childNode=node.getChild(i);      boolean done=findFosterNodes(childNode);      if (!done) {        continue allchilds;      }    }    break;  }  if (isTable) {    int size=lastTables.size();    if (size > 0) {      lastTables.remove(size - 1);    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.803 -0500",hash_original_method="16241BDA797C9EF94AA818BE003DDED6",hash_generated_method="3627C606FA3390E7AA5A9AC834E74418") public void parse(InputSource input) throws IOException, SAXException {  setupXMLReader();  xmlReader.parse(input);}  }
class C{  public Map<ShardId,List<NodeExplanation>> explanations(){  return this.explanations;}  }
class C{  public static boolean isStartedAsService(){  return startedAsService;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public TriggerBuilder<T> forJob(JobDetail jobDetail){  JobKey k=jobDetail.getKey();  if (k.getName() == null)   throw new IllegalArgumentException("The given job has not yet had a name assigned to it.");  this.jobKey=k;  return this;}  }
class C{  public static byte[] toByteArray(float[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  public void serviceAvailable(BeanContextServiceAvailableEvent event){  if (null == event) {    throw new NullPointerException(Messages.getString("beans.1C"));  }  if (services.containsKey(event.serviceClass)) {    return;  }  fireServiceAdded(event);  Object childs[]=copyChildren();  for (int i=0; i < childs.length; i++) {    if (childs[i] instanceof BeanContextServices) {      ((BeanContextServices)childs[i]).serviceAvailable(event);    }  }}  }
class C{  public static void main(String[] args){  doLoop(Asteroids.class,args);  System.exit(0);}  }
class C{  public void mul(Vector4 v){  double x=v.x, y=v.y, z=v.z, w=v.w;  v.x=m[0] * x + m[1] * y + m[2] * z + m[3] * w;  v.y=m[4] * x + m[5] * y + m[6] * z + m[7] * w;  v.z=m[8] * x + m[9] * y + m[10] * z + m[11] * w;  v.w=m[12] * x + m[13] * y + m[14] * z + m[15] * w;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void onJoin(String channel,String sender,String login,String hostname){}  }
class C{  public IndicesStatsRequestBuilder clear(){  request.clear();  return this;}  }
class C{  public Writer(){  output=new ByteArrayOutputStream();}  }
class C{  private void initializeMetaData(){  String category=mCategoryDataSource.getById(mCurrentChallenge.getCategoryId()).getTitle();  mCategoryText.setText(category);  int stage=mCompletionDataSource.findByChallengeAndUser(mCurrentChallenge.getId(),mUserManager.getCurrentUser().getId()).getStage();  int stageColor=ContextCompat.getColor(getBaseContext(),ChallengeStage.getColorResource(stage));  Drawable classBackground=mClassText.getBackground();  classBackground.setColorFilter(stageColor,PorterDuff.Mode.MULTIPLY);  mClassText.setText(getString(R.string.stage_num,stage));  int challengeType=mCurrentChallenge.getChallengeType();  int challengeTypeColor=ContextCompat.getColor(getBaseContext(),ChallengeType.getColorResource(challengeType));  Drawable typeBackground=mTypeText.getBackground();  typeBackground.setColorFilter(challengeTypeColor,PorterDuff.Mode.MULTIPLY);  mTypeText.setText(ChallengeType.getNameResource(challengeType));}  }
class C{  public boolean undo(){  boolean canUndo=undoManager.canUndo();  if (canUndo) {    undoManager.undo();    canUndo=undoManager.canUndo();  } else {    UIManager.getLookAndFeel().provideErrorFeedback(editor);  }  return canUndo;}  }
class C{  public void init(){  initScriptSelectionModel();}  }
class C{  public static Character valueOf(char i){  return null;}  }
class C{  @Override public String activeTabBackground(){  return "#292C2F";}  }
class C{  public void removeDcFromStrategyOptions(String dcId){  Map<String,String> strategyOptions;  try {    strategyOptions=getKeyspace().describeKeyspace().getStrategyOptions();  } catch (  ConnectionException ex) {    log.error("Unexpected errors to describe keyspace",ex);    throw DatabaseException.fatals.failedToChangeStrategyOption(ex.getMessage());  }  if (strategyOptions.containsKey(dcId)) {    log.info("Remove dc {} from strategy options",dcId);    strategyOptions.remove(dcId);    setCassandraStrategyOptions(strategyOptions,true);  }}  }
class C{  public ComponentUpdatePart(final WorkspaceComponent parent,final Runnable runnable,final String description){  this.parent=parent;  this.runnable=runnable;  this.description=description;  this.lock=this;}  }
class C{  private static float CallStaticFloatMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticFloatMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Float);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0f;  }}  }
class C{  private void initialize(){  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(650,500);  } else {    pack();  }}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  static void testAutomaticCancel(Path dir) throws IOException {  System.out.println("-- Automatic Cancel --");  Path subdir=Files.createDirectory(dir.resolve("bar"));  try (WatchService watcher=FileSystems.getDefault().newWatchService()){    System.out.format("register %s for events\n",subdir);    WatchKey myKey=subdir.register(watcher,new WatchEvent.Kind<?>[]{ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY});    System.out.format("delete: %s\n",subdir);    Files.delete(subdir);    takeExpectedKey(watcher,myKey);    System.out.println("reset key");    if (myKey.reset())     throw new RuntimeException("Key was not cancelled");    if (myKey.isValid())     throw new RuntimeException("Key is still valid");    System.out.println("OKAY");  } }  }
class C{  @Uninterruptible private int findMCEntry(Offset MCOffset){  if (MCInformation == null)   return -1;  if (MCInformation.length == 0)   return -1;  int left=0;  int right=MCInformation.length - 1;  while (left <= right) {    int middle=(left + right) >> 1;    while ((MCInformation[middle] & START_OF_ENTRY) != START_OF_ENTRY) {      middle--;    }    Offset offset=Offset.fromIntSignExtend(getMCOffset(middle));    if (MCOffset.EQ(offset)) {      return middle;    } else     if (MCOffset.sGT(offset)) {      left=middle + 1;      if (left >= MCInformation.length)       return -1;      while ((MCInformation[left] & START_OF_ENTRY) != START_OF_ENTRY) {        left++;        if (left >= MCInformation.length) {          return -1;        }      }    } else {      right=middle - 1;    }  }  return -1;}  }
class C{  @Path("proplist") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse proplist(final PropertyListRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.proplist(request);}  }
class C{  public void initializeLifeCycle(Object source,RosiePresenter.View view){  if (source == null) {    throw new IllegalArgumentException("The source instance used to initialize the presenters can't be null");  }  if (view == null) {    throw new IllegalArgumentException("The view instance used to initialize the presenters can't be null");  }  addAnnotatedPresenter(source);  setView(view);  initializePresenters();}  }
class C{  private GridP2PTestStaticVariable(){}  }
class C{  public void removeSelection(){  int[] rows=TABLE.getSelectedRows();  if (rows.length == 0)   return;  if (TABLE.isEditing()) {    TableCellEditor editor=TABLE.getCellEditor();    editor.cancelCellEditing();  }  List<File> files=new ArrayList<File>(rows.length);  Arrays.sort(rows);  for (int i=rows.length - 1; i >= 0; i--) {    File file=DATA_MODEL.getFile(rows[i]);    files.add(file);  }  CheckBoxListPanel<File> listPanel=new CheckBoxListPanel<File>(files,new FileTextProvider(),true);  listPanel.getList().setVisibleRowCount(4);  Object[] message=new Object[]{new MultiLineLabel(I18n.tr("Are you sure you want to delete the selected file(s), thus removing it from your computer?"),400),Box.createVerticalStrut(ButtonRow.BUTTON_SEP),listPanel,Box.createVerticalStrut(ButtonRow.BUTTON_SEP)};  Object[] removeOptions=createRemoveOptions();  int option=JOptionPane.showOptionDialog(MessageService.getParentComponent(),message,I18n.tr("Message"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,removeOptions,removeOptions[0]);  if (option == removeOptions.length - 1 || option == JOptionPane.CLOSED_OPTION) {    return;  }  List<File> selected=listPanel.getSelectedElements();  List<String> undeletedFileNames=new ArrayList<String>();  boolean somethingWasRemoved=false;  for (  File file : selected) {    BittorrentDownload dm=null;    if ((dm=TorrentUtil.getDownloadManager(file)) != null) {      dm.setDeleteDataWhenRemove(false);      dm.setDeleteTorrentWhenRemove(false);      BTDownloadMediator.instance().remove(dm);    }    if (MediaPlayer.instance().isThisBeingPlayed(file)) {      MediaPlayer.instance().stop();      MPlayerMediator.instance().showPlayerWindow(false);    }    boolean removed=FileUtils.delete(file,removeOptions.length > 2 && option == 0);    if (removed) {      somethingWasRemoved=true;      DATA_MODEL.remove(DATA_MODEL.getRow(file));    } else {      undeletedFileNames.add(getCompleteFileName(file));    }  }  clearSelection();  if (somethingWasRemoved) {    LibraryMediator.instance().getLibraryExplorer().refreshSelection(true);  }  if (undeletedFileNames.isEmpty()) {    return;  }  message=new Object[]{new MultiLineLabel(I18n.tr("The following files could not be deleted. They may be in use by another application or are currently being downloaded to."),400),Box.createVerticalStrut(ButtonRow.BUTTON_SEP),new JScrollPane(createFileList(undeletedFileNames))};  JOptionPane.showMessageDialog(MessageService.getParentComponent(),message,I18n.tr("Error"),JOptionPane.ERROR_MESSAGE);  super.removeSelection();}  }
class C{  public static void gotoMarker(IMarker problem,boolean jumpToPcal){  if (problem.getResource() instanceof IFile) {    IFile module=(IFile)problem.getResource();    IEditorPart part=UIHelper.openEditor(OpenSpecHandler.TLA_EDITOR,new FileEditorInput(module));    IGotoMarker gotoMarker=null;    if (part instanceof IGotoMarker) {      gotoMarker=(IGotoMarker)part;    } else {      gotoMarker=(IGotoMarker)part.getAdapter(IGotoMarker.class);    }    if (gotoMarker != null) {      if (jumpToPcal) {        final String moduleName=module.getName();        final TLAtoPCalMapping mapping=ToolboxHandle.getCurrentSpec().getTpMapping(moduleName);        if (mapping != null) {          problem=new TLAtoPCalMarker(problem,mapping);        } else {          UIHelper.setStatusLineMessage("No valid TLA to PCal mapping found for current selection");          return;        }      }      gotoMarker.gotoMarker(problem);    }  } else {  }}  }
class C{  public FlexibleNode removeChild(int n){  int numChildren=getChildCount();  if (n >= numChildren) {    throw new IllegalArgumentException("Nonexistent child");  }  return removeChild(child[n]);}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeString(mName);  dest.writeLong(mDate);  dest.writeLong(mCod);  final Weather weather=mWeathers.get(0);  dest.writeLong(weather.getId());  dest.writeString(weather.getMain());  dest.writeString(weather.getDescription());  dest.writeString(weather.getIcon());  dest.writeLong(mSys.getSunrise());  dest.writeLong(mSys.getSunset());  dest.writeString(mSys.getCountry());  dest.writeDouble(mMain.getTemp());  dest.writeLong(mMain.getHumidity());  dest.writeDouble(mMain.getPressure());  dest.writeDouble(mWind.getSpeed());  dest.writeDouble(mWind.getDeg());}  }
class C{  public int size(){  return m_Codebits.length;}  }
class C{  private synchronized PauseResult maybePause(long bytes,long curNS) throws MergePolicy.MergeAbortedException {  checkAbort();  double secondsToPause=(bytes / 1024. / 1024.) / mbPerSec;  long targetNS=lastNS + (long)(1000000000 * secondsToPause);  long curPauseNS=targetNS - curNS;  if (curPauseNS <= 2000000) {    return PauseResult.NO;  }  if (curPauseNS > 250L * 1000000) {    curPauseNS=250L * 1000000;  }  int sleepMS=(int)(curPauseNS / 1000000);  int sleepNS=(int)(curPauseNS % 1000000);  double rate=mbPerSec;  try {    wait(sleepMS,sleepNS);  } catch (  InterruptedException ie) {    throw new ThreadInterruptedException(ie);  }  if (rate == 0.0) {    return PauseResult.STOPPED;  } else {    return PauseResult.PAUSED;  }}  }
class C{  public GlobalInterlockException(String msg){  super(msg);}  }
class C{  public void discard(){  fragment=new StringBuffer();  fragmentCur=0;  fragmentMax=0;}  }
class C{  public static byte[] dumpBytes(DataBuffer buffer){  Assert.notNull(buffer,"'buffer' must not be null");  byte[] bytes=new byte[buffer.readableByteCount()];  buffer.read(bytes);  return bytes;}  }
class C{  static void fatalError(String messageKey){  System.err.println();  System.err.println(format("Fatal error"));  System.err.println(format(messageKey));  Env.shutdown();}  }
class C{  public JsonSerialize.Inclusion findSerializationInclusion(JsonSerialize.Inclusion defValue){  if (_annotationIntrospector == null) {    return defValue;  }  return _annotationIntrospector.findSerializationInclusion(_classInfo,defValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.680 -0500",hash_original_method="1C9916E491D93B6DAF758D3D738C6EEB",hash_generated_method="15A1411ACDA23E1A918918FF0CDDBE57") public boolean isStreaming(){  return false;}  }
class C{  public double[] paa(double[] ts,int paaSize) throws SAXException {  int len=ts.length;  if (len < paaSize) {    throw new SAXException("PAA size can't be greater than the timeseries size.");  }  if (len == paaSize) {    return Arrays.copyOf(ts,ts.length);  } else {    double[] paa=new double[paaSize];    double pointsPerSegment=(double)len / (double)paaSize;    double[] breaks=new double[paaSize + 1];    for (int i=0; i < paaSize + 1; i++) {      breaks[i]=i * pointsPerSegment;    }    for (int i=0; i < paaSize; i++) {      double segStart=breaks[i];      double segEnd=breaks[i + 1];      double fractionStart=Math.ceil(segStart) - segStart;      double fractionEnd=segEnd - Math.floor(segEnd);      int fullStart=Double.valueOf(Math.floor(segStart)).intValue();      int fullEnd=Double.valueOf(Math.ceil(segEnd)).intValue();      double[] segment=Arrays.copyOfRange(ts,fullStart,fullEnd);      if (fractionStart > 0) {        segment[0]=segment[0] * fractionStart;      }      if (fractionEnd > 0) {        segment[segment.length - 1]=segment[segment.length - 1] * fractionEnd;      }      double elementsSum=0.0;      for (      double e : segment) {        elementsSum=elementsSum + e;      }      paa[i]=elementsSum / pointsPerSegment;    }    return paa;  }}  }
class C{  public static VirtualFileSystem createVirtualFileSystem() throws Exception {  final File fsRoot=Files.createTempDir();  final VirtualFileSystem vfs;  fsRoot.deleteOnExit();  final VirtualFileSystemRegistry registry=new VirtualFileSystemRegistry();  final WorkspaceHashLocalFSMountStrategy mountStrategy=new WorkspaceHashLocalFSMountStrategy(fsRoot,fsRoot);  final LocalFileSystemProvider vfsProvider=new LocalFileSystemProvider("my_vfs",mountStrategy,new EventService(),null,SystemPathsFilter.ANY,registry);  registry.registerProvider("my_vfs",vfsProvider);  vfs=registry.getProvider("my_vfs").newInstance(URI.create(""));  return vfs;}  }
class C{  public ObjectMatrix1D append(ObjectMatrix1D A,ObjectMatrix1D B){  ObjectMatrix1D matrix=make(A.size() + B.size());  matrix.viewPart(0,A.size()).assign(A);  matrix.viewPart(A.size(),B.size()).assign(B);  return matrix;}  }
class C{  @Override public byte capabilities(){  return FSCapability.READ | FSCapability.WRITE | FSCapability.RANDOM_READ| FSCapability.STAT| FSCapability.DEL_ON_EXIT| FSCapability.LS_DIR;}  }
class C{  public static SourceLineAnnotation fromVisitedInstructionRange(ClassContext classContext,MethodGen methodGen,String sourceFile,InstructionHandle start,InstructionHandle end){  LineNumberTable lineNumberTable=methodGen.getLineNumberTable(methodGen.getConstantPool());  String className=methodGen.getClassName();  if (lineNumberTable == null) {    return createUnknown(className,sourceFile,start.getPosition(),end.getPosition());  }  int startLine=lineNumberTable.getSourceLine(start.getPosition());  int endLine=lineNumberTable.getSourceLine(end.getPosition());  return new SourceLineAnnotation(className,sourceFile,startLine,endLine,start.getPosition(),end.getPosition());}  }
class C{  public ReadIndexTask(final String termText,final int termNdx,final int numTerms,final boolean prefixMatch,final double queryTermWeight,final FullTextIndex<V> searchEngine,final IHitCollector<V> hits){  super(termText,termNdx,numTerms,prefixMatch,queryTermWeight,searchEngine);  if (hits == null)   throw new IllegalArgumentException();  this.hits=hits;  if (log.isDebugEnabled())   log.debug("termText=[" + termText + "], prefixMatch="+ prefixMatch+ ", queryTermWeight="+ queryTermWeight+ "\nfromKey="+ BytesUtil.toString(fromKey)+ "\n  toKey="+ BytesUtil.toString(toKey));  itr=searchEngine.getIndex().rangeIterator(fromKey,toKey,0,IRangeQuery.KEYS | IRangeQuery.VALS,null);  tmp=new Hit<V>(numTerms);}  }
class C{  public ItemHit itemQuantity(Integer value){  setInteger(ITEM_QUANTITY,value);  return this;}  }
class C{  public Object clone(){  TreeSet clone;  try {    clone=(TreeSet)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  clone.m=new TreeMap(m);  clone.keySet=clone.m.keySet();  return clone;}  }
class C{  public void addArrayUniqueId(java.lang.String param){  if (localArrayUniqueId == null) {    localArrayUniqueId=new java.lang.String[]{};  }  localArrayUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localArrayUniqueId);  list.add(param);  this.localArrayUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static void quickSort(int[] ar,int startIndex,int endIndex){  if (startIndex < endIndex) {    int partition=partition(ar,startIndex,endIndex);    quickSort(ar,startIndex,partition - 1);    quickSort(ar,partition + 1,endIndex);  }}  }
class C{  public static QueryUniqueIdentifiersForLuns parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForLuns object=new QueryUniqueIdentifiersForLuns();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForLuns".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForLuns)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","arrayUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setArrayUniqueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public AffineTransform handleImage(RenderableImage image,Element imageElement,double x,double y,double width,double height,SVGGeneratorContext generatorContext){  double imageWidth=image.getWidth();  double imageHeight=image.getHeight();  if (imageWidth == 0 || imageHeight == 0 || width == 0 || height == 0) {    handleEmptyImage(imageElement);  } else {    imageHandler.handleImage(image,imageElement,generatorContext);    setImageAttributes(imageElement,x,y,width,height,generatorContext);  }  return null;}  }
class C{  public PowerContainerSelectionPolicyMaximumCorrelation(final PowerContainerSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void forceRevalidate(){  forceRevalidateImpl();  revalidate();}  }
class C{  public int lastIndexOfFromTo(char element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  char[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public static boolean isOS2(){  setType();  return (type == OS2);}  }
class C{  public RelaxedURIComparator(){  this.comparator=new BasicURLComparator();}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:    return eInternalContainer().eInverseRemove(this,N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW,N4ClassifierDefinition.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  private String join(String[] partials,String separator){  StringBuilder sb=new StringBuilder();  for (int i=0; i < partials.length; i++) {    sb.append(partials[i]);    if (i < partials.length - 1) {      sb.append(separator);    }  }  return sb.toString();}  }
class C{  public boolean isNotAllPrices(){  return m_notAllPrices;}  }
class C{  private void parseKeyStoreEntry() throws ParsingException, IOException {  match("keystore");  keyStoreUrlString=match("quoted string");  if (!peek(",")) {    return;  }  match(",");  if (peek("\"")) {    keyStoreType=match("quoted string");  } else {    throw new ParsingException(st.lineno(),ResourcesMgr.getString("expected.keystore.type"));  }  if (!peek(",")) {    return;  }  match(",");  if (peek("\"")) {    keyStoreProvider=match("quoted string");  } else {    throw new ParsingException(st.lineno(),ResourcesMgr.getString("expected.keystore.provider"));  }}  }
class C{  public static void addDeliveryReceiptRequest(Message m){  m.addExtension(new DeliveryReceiptRequest());}  }
class C{  public static void illegalCode(Class<?> destination,Class<?> source,String path,Throwable e){  String additionalInformation=e.getMessage().split(",")[1];  throw new IllegalCodeException(MSG.INSTANCE.message(illegalCodePath,destination.getSimpleName(),source.getSimpleName(),path,additionalInformation));}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();}  }
class C{  private static String thresholdsToString(String[] thresholdArray){  String result=null;  if (thresholdArray.length > 0) {    result=thresholdArray[0];    for (int i=1; i < thresholdArray.length; i++) {      result+="; ";      result+=thresholdArray[i];    }  }  return result;}  }
class C{  public MethodType basicType(){  return basicType;}  }
class C{  public static void boot(AOSOptions options){  resetValue=options.COUNTER_BASED_SAMPLE_INTERVAL - 1;  globalCounter=resetValue;}  }
class C{  public void drawModalRectWithTexture(int x,int y,float textureX,float textureY,int width,int height,float textureWidth,float textureHeight){  float f=1.0F / textureWidth;  float f1=1.0F / textureHeight;  Tessellator tessellator=Tessellator.getInstance();  VertexBuffer vertexbuffer=tessellator.getBuffer();  vertexbuffer.begin(7,DefaultVertexFormats.POSITION_TEX);  vertexbuffer.pos((double)(x),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + height) * f1)).endVertex();  vertexbuffer.pos((double)(x + width),(double)(y + height),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + height) * f1)).endVertex();  vertexbuffer.pos((double)(x + width),(double)(y),(double)this.zLevel).tex((double)((float)(textureX + width) * f),(double)((float)(textureY + 0) * f1)).endVertex();  vertexbuffer.pos((double)(x),(double)(y),(double)this.zLevel).tex((double)((float)(textureX + 0) * f),(double)((float)(textureY + 0) * f1)).endVertex();  tessellator.draw();}  }
class C{  public void testDrainToNull(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.drainTo(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final void reset(){  currentIntervalMillis=initialIntervalMillis;  startTimeNanos=nanoClock.nanoTime();}  }
class C{  public void paintScrollPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public LloydKernelKMeans(KernelTrick kernel){  super(kernel);}  }
class C{  public static String toClassName(String str){  StringBuffer javaName=new StringBuffer();  String[] arr=lucee.runtime.type.util.ListUtil.listToStringArray(str,'/');  for (int i=0; i < arr.length; i++) {    if (i == (arr.length - 1))     arr[i]=replaceLast(arr[i],'.','$');    if (i != 0)     javaName.append('.');    javaName.append(toVariableName(arr[i]));  }  return javaName.toString().toLowerCase();}  }
class C{  public void displayLastEvaluation(){  System.out.println("Moves: " + world.getNumberOfMoves() + " / "+ world.getMaxMoves());  System.out.println("Food: " + world.getFoodEaten() + " / "+ world.getTotalFood());  world.display();}  }
class C{  public InputPropertiesBuilder(){  super();}  }
class C{  public void addDispatcherListener(DispatcherListener listener){  addListener(BeforeDispatch,listener);  addListener(AfterDispatch,listener);}  }
class C{  public static TimePeriodExpression timePeriod(Double days,Double hours,Double minutes,Double seconds,Double milliseconds){  Expression daysExpr=(days != null) ? constant(days) : null;  Expression hoursExpr=(hours != null) ? constant(hours) : null;  Expression minutesExpr=(minutes != null) ? constant(minutes) : null;  Expression secondsExpr=(seconds != null) ? constant(seconds) : null;  Expression millisecondsExpr=(milliseconds != null) ? constant(milliseconds) : null;  return new TimePeriodExpression(daysExpr,hoursExpr,minutesExpr,secondsExpr,millisecondsExpr);}  }
class C{  public CronExpression(String cronExpression) throws ParseException {  if (cronExpression == null) {    throw new IllegalArgumentException("cronExpression cannot be null");  }  this.cronExpression=cronExpression.toUpperCase(Locale.US);  buildExpression(this.cronExpression);}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public void sendToServer() throws Exception {  if (!isCancelled()) {    ByteBuf output=inputBuffer == null ? Unpooled.buffer() : inputBuffer.alloc().buffer();    Type.VAR_INT.write(output,ViaDecodeHandler.PASSTHROUGH_ID);    writeToBuffer(output);    PipelineUtil.getContextBefore("decompress",user().getChannel().pipeline()).fireChannelRead(output);  }}  }
class C{  @Override public List<ResolveInfo> queryIntentActivities(Intent intent,int flags){  assertNotNull(intent);  assertTrue(intent.getAction().equals(Intent.ACTION_SEARCH) || intent.getAction().equals(Intent.ACTION_WEB_SEARCH) || intent.getAction().equals(SearchManager.INTENT_ACTION_GLOBAL_SEARCH));switch (mSearchablesMode) {case SEARCHABLES_PASSTHROUGH:    return mRealPackageManager.queryIntentActivities(intent,flags);case SEARCHABLES_MOCK_ZERO:  return null;default :throw new UnsupportedOperationException();}}  }
class C{  public void stop(){}  }
class C{  static private boolean hasCorrelatedBlankNodeBindings(final BindingSet[] bindingSets){  if (bindingSets.length <= 1) {    return false;  }  for (  BindingSet bindingSet : bindingSets) {    Set<BNode> bnodes=null;    for (    Binding b : bindingSet) {      final Value v=b.getValue();      if (!(v instanceof BNode))       continue;      if (bnodes == null)       bnodes=new HashSet<BNode>();      final BNode t=(BNode)v;      if (bnodes.add(t)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void displayAppOffers(List<Offer> appOffers){  this.appOffers=appOffers;}  }
class C{  @Override protected boolean isHostOverUtilized(PowerContainerHost host){  addHistoryEntry(host,getUtilizationThreshold());  double totalRequestedMips=0;  for (  ContainerVm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > getUtilizationThreshold();}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest httpRequest=new IgnoreCharacterEncodingHttpRequestWrapper((HttpServletRequest)request);  HttpServletResponse httpResponse=(HttpServletResponse)response;  AuthorizationRequestData rdo=initializeRequestDataObject(httpRequest);  try {    if (isPublicAccess(rdo,httpRequest)) {      proceedWithFilterChain(chain,httpRequest,httpResponse);    } else {      handleProtectedUrlAndChangePwdCase(chain,httpRequest,httpResponse,rdo);    }  } catch (  ServletException e) {    if (authSettings.isServiceProvider()) {      throw e;    }    if (e.getCause() instanceof ViewExpiredException) {      final StringBuffer url=new StringBuffer(rdo.getRelativePath() == null ? "" : rdo.getRelativePath());      reLogginUserIfRequired(httpRequest,httpResponse,rdo,url);      sendRedirect(httpRequest,httpResponse,url.toString());    } else {      throw e;    }  }}  }
class C{  public Builder updateTitle(String title){  this.title=title;  return this;}  }
class C{  public boolean contains(final CharRange range){  if (range == null) {    throw new IllegalArgumentException("The Range must not be null");  }  if (negated) {    if (range.negated) {      return start >= range.start && end <= range.end;    }    return range.end < start || range.start > end;  }  if (range.negated) {    return start == 0 && end == Character.MAX_VALUE;  }  return start <= range.start && end >= range.end;}  }
class C{  private void resetMembers(){  privacypolicy=null;  terms=null;  imprint=null;  imprintDescription=null;  stageContent=null;  messageProperties=null;  defaultMessageBundle=null;}  }
class C{  public Salsa20Engine(){  this(DEFAULT_ROUNDS);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=findPatternStart(leftTopBlack[0],top,image);  int right=findPatternEnd(leftTopBlack[0],top,image);  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public void renameAttribute(int att,String name){  for (int i=0; i < numAttributes(); i++) {    if (i == att) {      continue;    }    if (attribute(i).name().equals(name)) {      throw new IllegalArgumentException("Attribute name '" + name + "' already present at position #"+ i);    }  }  Attribute newAtt=attribute(att).copy(name);  ArrayList<Attribute> newVec=new ArrayList<Attribute>(numAttributes());  for (  Attribute attr : m_Attributes) {    if (attr.index() == att) {      newVec.add(newAtt);    } else {      newVec.add(attr);    }  }  m_Attributes=newVec;}  }
class C{  public ThriftReply(int seqId,Object result){  super(result);  this.seqId=seqId;}  }
class C{  private Publisher<Frame> _handleRequestStream(BiFunction<RequestHandler,Payload,Publisher<Payload>> handler,Frame requestFrame,final RequestHandler requestHandler,final Int2ObjectHashMap<Subscription> cancellationSubscriptions,final Int2ObjectHashMap<SubscriptionArbiter> inFlight,final boolean allowCompletion){  final int streamId=requestFrame.getStreamId();  return null;}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double recipRoot2PiTimesSigmaD;  double twoSigmaSqrD;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weights[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(Constants.INDENT);  buffer.append("hClientMacSecret: ");  buffer.append(hClientMacSecret);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hServerMacSecret: ");  buffer.append(hServerMacSecret);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hClientKey: ");  buffer.append(hClientKey);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hServerKey: ");  buffer.append(hServerKey);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pIVClient: ");  buffer.append(Functions.toHexString(pIVClient));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pIVServer: ");  buffer.append(Functions.toHexString(pIVServer));  return buffer.toString();}  }
class C{  public static int decodeZigZag32(final int n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  private static int[] flatten(Set<Integer>[] algn){  int[] flatArr=new int[algn.length];  for (int i=0; i < flatArr.length; ++i) {    if (algn[i] == null)     continue;    List<Integer> points=new ArrayList<>(algn[i]);    int al=0;    for (int j=0, sz=Math.min(MAX_FERTILITY,points.size()); j < sz; ++j) {      int pos=(points.get(j) + 1) << (j * 8);      al|=pos;    }    flatArr[i]=al;  }  return flatArr;}  }
class C{  public FordFulkerson(FlowNetwork<?> network,Search method){  this.network=network;  this.searchMethod=method;}  }
class C{  @Override protected void authenticateUser() throws LoginException {  if (!(_currentRealm instanceof ADMRealm)) {    throw new LoginException("Bad realm.");  }  ADMRealm realm=(ADMRealm)_currentRealm;  if (_password == null || _password.length() == 0) {    throw new LoginException("Empty password.");  }  String grpList[]=realm.authenticateUser(_username,_password);  String groupListToForward[]=new String[grpList.length];  for (int i=0; i < grpList.length; i++) {    groupListToForward[i]=grpList[i];  }  commitUserAuthentication(groupListToForward);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.068 -0500",hash_original_method="9FFB3E9386976737FD5FBA37B814C4D0",hash_generated_method="A81D559722C826C072C8443710626B34") public int memberOf(){  return theMemberOf;}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public CIMInstance createStoragePoolSetting(StorageSystem storageSystem,StoragePool storagePool,long thinVolumePreAllocateSize) throws Exception {  _log.info(String.format("Create StoragePool Setting Start - Array: %s, Pool: %s, %n   thinVolumePreAllocateSize: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),thinVolumePreAllocateSize));  CIMObjectPath poolSvcPath=_cimPath.getStoragePoolPath(storageSystem,storagePool);  CimConnection connection=_cimConnection.getConnection(storageSystem);  WBEMClient client=connection.getCimClient();  CIMInstance modifiedSettingInstance=null;  try {    _log.debug("Op1 start: Getting poolCapabilities associated with this pool");    final Iterator<?> it=client.associatorNames(poolSvcPath,SmisConstants.CIM_ELEMENTCAPABILITIES,SmisConstants.SYMM_STORAGEPOOL_CAPABILITIES,null,null);    if (it.hasNext()) {      final CIMObjectPath poolCapabilityPath=(CIMObjectPath)it.next();      _log.debug("Op1 end: received pool capability from provider {}",poolCapabilityPath);      CIMArgument<?>[] outputArgs=new CIMArgument<?>[1];      _log.info("Invoking CIMClient to create to create a new Setting");      client.invokeMethod(poolCapabilityPath,SmisConstants.CP_CREATE_SETTING,_helper.getCreatePoolSettingArguments(),outputArgs);      CIMObjectPath settingPath=_cimPath.getCimObjectPathFromOutputArgs(outputArgs,SmisConstants.CP_NEWSETTING);      modifiedSettingInstance=new CIMInstance(settingPath,_helper.getModifyPoolSettingArguments(thinVolumePreAllocateSize));      client.modifyInstance(modifiedSettingInstance,SmisConstants.PS_THIN_VOLUME_INITIAL_RESERVE);      _log.info("Modified the poolSetting instance to set ThinProvisionedInitialReserve");    }  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  }catch (  Exception e) {    _log.error("Problem in createStoragePoolSetting: " + storagePool.getNativeId(),e);    throw e;  } finally {    _log.info(String.format("Create StoragePool Setting End - Array:%s, Pool: %s",storageSystem.getSerialNumber(),storagePool.getNativeId()));  }  return modifiedSettingInstance;}  }
class C{  static int floatToIntBits(float f){  if (f == 0.0f) {    return 0;  } else {    return Float.floatToIntBits(f);  }}  }
class C{  public GeoMark analyse(final String text,final String[] tags,final int maxlength,final String salt){  GeoLocation loc=geocode(text,tags,maxlength);  if (loc != null)   return new GeoMark(loc,salt);  return reverse_geocode(text);}  }
class C{  public Term(String fld,BytesRef bytes){  field=fld;  this.bytes=bytes == null ? null : BytesRef.deepCopyOf(bytes);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @SuppressWarnings("unchecked") private void divideUpDictionaryRange(int startPos,int endPos){  CharacterIterator text=getText();  text.setIndex(startPos);  int c=getCurrent();  int category=lookupCategory(c);  while (category == IGNORE || !categoryFlags[category]) {    c=getNext();    category=lookupCategory(c);  }  Stack<Integer> currentBreakPositions=new Stack<>();  Stack<Integer> possibleBreakPositions=new Stack<>();  List<Integer> wrongBreakPositions=new ArrayList<>();  int state=0;  int farthestEndPoint=text.getIndex();  Stack<Integer> bestBreakPositions=null;  c=getCurrent();  while (true) {    if (dictionary.getNextState(state,0) == -1) {      possibleBreakPositions.push(text.getIndex());    }    state=dictionary.getNextStateFromCharacter(state,c);    if (state == -1) {      currentBreakPositions.push(text.getIndex());      break;    } else     if (state == 0 || text.getIndex() >= endPos) {      if (text.getIndex() > farthestEndPoint) {        farthestEndPoint=text.getIndex();        @SuppressWarnings("unchecked") Stack<Integer> currentBreakPositionsCopy=(Stack<Integer>)currentBreakPositions.clone();        bestBreakPositions=currentBreakPositionsCopy;      }      while (!possibleBreakPositions.isEmpty() && wrongBreakPositions.contains(possibleBreakPositions.peek())) {        possibleBreakPositions.pop();      }      if (possibleBreakPositions.isEmpty()) {        if (bestBreakPositions != null) {          currentBreakPositions=bestBreakPositions;          if (farthestEndPoint < endPos) {            text.setIndex(farthestEndPoint + 1);          } else {            break;          }        } else {          if ((currentBreakPositions.size() == 0 || currentBreakPositions.peek().intValue() != text.getIndex()) && text.getIndex() != startPos) {            currentBreakPositions.push(new Integer(text.getIndex()));          }          getNext();          currentBreakPositions.push(new Integer(text.getIndex()));        }      } else {        Integer temp=possibleBreakPositions.pop();        Integer temp2=null;        while (!currentBreakPositions.isEmpty() && temp.intValue() < currentBreakPositions.peek().intValue()) {          temp2=currentBreakPositions.pop();          wrongBreakPositions.add(temp2);        }        currentBreakPositions.push(temp);        text.setIndex(currentBreakPositions.peek().intValue());      }      c=getCurrent();      if (text.getIndex() >= endPos) {        break;      }    } else {      c=getNext();    }  }  if (!currentBreakPositions.isEmpty()) {    currentBreakPositions.pop();  }  currentBreakPositions.push(endPos);  cachedBreakPositions=new int[currentBreakPositions.size() + 1];  cachedBreakPositions[0]=startPos;  for (int i=0; i < currentBreakPositions.size(); i++) {    cachedBreakPositions[i + 1]=currentBreakPositions.elementAt(i).intValue();  }  positionInCache=0;}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  public static <T>Supplier<T> nextNoDupSupplier(final Cursor cursor,ByteArrayConverter<T> converter){  DatabaseEntry key=new DatabaseEntry();  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  private boolean isRed(Node x){  if (x == null)   return false;  return x.color == RED;}  }
class C{  private static void addRecentlyCalledMethods(WarningPropertySet<WarningProperty> propertySet,ClassContext classContext,Method method,Location location){  try {    CallListDataflow dataflow=classContext.getCallListDataflow(method);    CallList callList=dataflow.getFactAtLocation(location);    if (!callList.isValid()) {      return;    }    int count=0;    for (Iterator<Call> i=callList.callIterator(); count < 4 && i.hasNext(); ++count) {      Call call=i.next();      WarningProperty prop=null;switch (count) {case 0:        prop=GeneralWarningProperty.CALLED_METHOD_1;      break;case 1:    prop=GeneralWarningProperty.CALLED_METHOD_2;  break;case 2:prop=GeneralWarningProperty.CALLED_METHOD_3;break;case 3:prop=GeneralWarningProperty.CALLED_METHOD_4;break;default :continue;}propertySet.setProperty(prop,call.getMethodName());}} catch (CFGBuilderException e) {}catch (DataflowAnalysisException e) {}}  }
class C{  public static PositionList make(DalvInsnList insns,int howMuch){switch (howMuch) {case NONE:{      return EMPTY;    }case LINES:case IMPORTANT:{    break;  }default :{  throw new IllegalArgumentException("bogus howMuch");}}SourcePosition noInfo=SourcePosition.NO_INFO;SourcePosition cur=noInfo;int sz=insns.size();PositionList.Entry[] arr=new PositionList.Entry[sz];boolean lastWasTarget=false;int at=0;for (int i=0; i < sz; i++) {DalvInsn insn=insns.get(i);if (insn instanceof CodeAddress) {lastWasTarget=true;;continue;}SourcePosition pos=insn.getPosition();if (pos.equals(noInfo) || pos.sameLine(cur)) {continue;}if ((howMuch == IMPORTANT) && !lastWasTarget) {continue;}cur=pos;arr[at]=new PositionList.Entry(insn.getAddress(),pos);at++;lastWasTarget=false;}PositionList result=new PositionList(at);for (int i=0; i < at; i++) {result.set(i,arr[i]);}result.setImmutable();return result;}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    Log.d(TAG,"Thread " + thread + " is not allowed to decode.");    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public ObjectMatrix3D like(int slices,int rows,int columns){  return new DenseObjectMatrix3D(slices,rows,columns);}  }
class C{  protected Component createTool(String key){  return createToolbarButton(key);}  }
class C{  private boolean processClass(String name,byte[] bytes){  try {    ClassDefItem clazz=CfTranslator.translate(name,bytes,cfOptions,options);    outputDex.add(clazz);    return true;  } catch (  ParseException ex) {    ex.printStackTrace();  }  return false;}  }
class C{  public boolean hasSelection(){  return mInputView.hasSelection();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.TRY_STATEMENT__BLOCK:    return basicSetBlock(null,msgs);case N4JSPackage.TRY_STATEMENT__CATCH:  return basicSetCatch(null,msgs);case N4JSPackage.TRY_STATEMENT__FINALLY:return basicSetFinally(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String removeChars(String src,String chars){  int i=src.length();  StringBuilder sb=new StringBuilder(i);  for (int j=0; j < i; j++) {    char c=src.charAt(j);    if (chars.indexOf(c) == -1) {      sb.append(c);    }  }  return sb.toString();}  }
class C{  DirectCompactSketch(long[] compactCache,boolean empty,short seedHash,int curCount,long thetaLong,Memory dstMem){  super(empty,seedHash,curCount,thetaLong);  int emptyBit=empty ? (byte)EMPTY_FLAG_MASK : 0;  byte flags=(byte)(emptyBit | READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK);  mem_=loadCompactMemory(compactCache,empty,seedHash,curCount,thetaLong,dstMem,flags);}  }
class C{  private void exploreWD(Object nodeObj,int nodeIndex,Bag component){  visited[nodeIndex]=true;  countVisited++;  if (component != null)   component.add(nodeObj);  Bag temp;  temp=network.getEdgesOut(nodeObj);  for (int i=0; i < temp.numObjs; i++) {    Object node2=((Edge)temp.objs[i]).getOtherNode(nodeObj);    int node2Index=network.getNodeIndex(node2);    if (!visited[node2Index])     exploreWD(node2,node2Index,component);  }  temp=network.getEdgesIn(nodeObj);  for (int i=0; i < temp.numObjs; i++) {    Object node2=((Edge)temp.objs[i]).getOtherNode(nodeObj);    int node2Index=network.getNodeIndex(node2);    if (!visited[node2Index])     exploreWD(node2,node2Index,component);  }}  }
class C{  public Lambda(Node node){  this(node,new String[0],new Class<?>[0]);}  }
class C{  static private String SHORT_Min_Minus(){  long tempValue=Short.MIN_VALUE - 1;  return String.valueOf(tempValue);}  }
class C{  private void contextMenu(LogicalVisualizationEx visualization,VisualNode node,VisualItem item,MouseEvent mouseEvent){  JPopupMenu menu=new JPopupMenu();  if (node.isHost()) {    menu.add(new JMenuItem("Show host details")).addActionListener(null);    menu.add(new JMenuItem("Center on host")).addActionListener(null);    JMenu category=new JMenu("Set category");    ViewUtils.setupCategoryMenu(category,node);    JMenu role=new JMenu("Set role");    ViewUtils.setupCategoryMenu(category,node);    menu.add(category);    menu.add(role);    menu.add(new JMenuItem("Find In tree")).addActionListener(null);    menu.add(new JMenuItem("Show all connections")).addActionListener(null);    menu.add(new JMenuItem("Watch connections")).addActionListener(null);    menu.addSeparator();    menu.add(new JMenuItem("Hide host")).addActionListener(null);  } else   if (node.isNetwork()) {    menu.add(new JMenuItem("Show network details")).addActionListener(null);    menu.add(new JMenuItem("Center on network")).addActionListener(null);    menu.add(new JMenuItem("Find in tree")).addActionListener(null);    menu.add(new JMenuItem("Watch network")).addActionListener(null);    menu.add(new JMenuItem("Edit network subnet mask")).addActionListener(null);    menu.add(new JMenuItem(node.isExpanded(visualization.getId()) ? "Collapse" : "Expand")).addActionListener(null);    menu.addSeparator();    menu.add(new JMenuItem("Hide network")).addActionListener(null);  }  if (menu.getComponentCount() != 0) {    menu.setLocation(mouseEvent.getLocationOnScreen());    menu.setInvoker(getDisplay());    menu.setVisible(true);    menu.requestFocus();  }}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  if (isEmpty())   return;  int i=rank(key);  if (i == n || keys[i].compareTo(key) != 0) {    return;  }  for (int j=i; j < n - 1; j++) {    keys[j]=keys[j + 1];    vals[j]=vals[j + 1];  }  n--;  keys[n]=null;  vals[n]=null;  if (n > 0 && n == keys.length / 4)   resize(keys.length / 2);  assert check();}  }
class C{  public int compareTo(LabelValue o){  String otherLabel=((LabelValue)o).getLabel();  return this.getLabel().compareTo(otherLabel);}  }
class C{  @Override public void processEndElement() throws ParseException {  super.processEndElement();  Extension lat=getExtension(GeoLat.class);  Extension lon=getExtension(GeoLong.class);  if (lat != null || lon != null) {    if (lat == null) {      throw new ParseException("All geo:Point elements must have a " + "latitude coordinate.");    }    if (lon == null) {      throw new ParseException("All geo:Point elements must have a " + "longitude coordinate.");    }  }}  }
class C{  static boolean isToplevelImport(Import i,Declaration d){  return d.isToplevel() || d.isStatic() || isToplevelClassConstructor(i.getTypeDeclaration(),d)|| isToplevelAnonymousClass(i.getTypeDeclaration());}  }
class C{  public boolean equals(Object it){  if (it == null || getClass() != it.getClass()) {    return false;  }  return equals((TarEntry)it);}  }
class C{  static byte[] ntlm2SessionResponse(final byte[] ntlmHash,final byte[] challenge,final byte[] clientChallenge) throws AuthenticationException {  try {    final MessageDigest md5=MessageDigest.getInstance("MD5");    md5.update(challenge);    md5.update(clientChallenge);    final byte[] digest=md5.digest();    final byte[] sessionHash=new byte[8];    System.arraycopy(digest,0,sessionHash,0,8);    return lmResponse(ntlmHash,sessionHash);  } catch (  Exception e) {    if (e instanceof AuthenticationException)     throw (AuthenticationException)e;    throw new AuthenticationException(e.getMessage(),e);  }}  }
class C{  private void findProduct(){  String query=f_name.getText();  if (query == null || query.length() == 0)   return;  query=query.toUpperCase();  boolean allNumber=true;  try {    Integer.getInteger(query);  } catch (  Exception e) {    allNumber=false;  }  String Value=query;  String Name=query;  String UPC=(allNumber ? query : null);  String SKU=(allNumber ? query : null);  MWarehousePrice[] results=null;  setParameter();  results=MWarehousePrice.find(p_ctx,m_M_PriceList_Version_ID,m_M_Warehouse_ID,Value,Name,UPC,SKU,null);  if (results.length == 0) {    String message=Msg.translate(p_ctx,"search.product.notfound");    ADialog.warn(0,p_posPanel,message + query);    setM_Product_ID(0);    p_posPanel.f_curLine.setPrice(Env.ZERO);  } else   if (results.length == 1) {    setM_Product_ID(results[0].getM_Product_ID());    setQty(Env.ONE);    f_name.setText(results[0].getName());    p_posPanel.f_curLine.setPrice(results[0].getPriceStd());    saveLine();  } else {    QueryProduct qt=new QueryProduct(p_posPanel);    qt.setResults(results);    qt.setQueryData(m_M_PriceList_Version_ID,m_M_Warehouse_ID);    qt.setVisible(true);  }}  }
class C{  public int compareTo(Timestamp ts){  long thisTime=this.getTime();  long anotherTime=ts.getTime();  int i=(thisTime < anotherTime ? -1 : (thisTime == anotherTime ? 0 : 1));  if (i == 0) {    if (nanos > ts.nanos) {      return 1;    } else     if (nanos < ts.nanos) {      return -1;    }  }  return i;}  }
class C{  @Override public String toString(){  String str="";  if ((wildcards & OFPFW_IN_PORT) == 0)   str+="," + STR_IN_PORT + "="+ U16.f(this.inputPort);  if ((wildcards & OFPFW_DL_DST) == 0)   str+="," + STR_DL_DST + "="+ HexString.toHexString(this.dataLayerDestination);  if ((wildcards & OFPFW_DL_SRC) == 0)   str+="," + STR_DL_SRC + "="+ HexString.toHexString(this.dataLayerSource);  if ((wildcards & OFPFW_DL_TYPE) == 0)   str+="," + STR_DL_TYPE + "=0x"+ Integer.toHexString(U16.f(this.dataLayerType));  if ((wildcards & OFPFW_DL_VLAN) == 0)   str+="," + STR_DL_VLAN + "=0x"+ Integer.toHexString(U16.f(this.dataLayerVirtualLan));  if ((wildcards & OFPFW_DL_VLAN_PCP) == 0)   str+="," + STR_DL_VLAN_PCP + "="+ Integer.toHexString(U8.f(this.dataLayerVirtualLanPriorityCodePoint));  if (getNetworkDestinationMaskLen() > 0)   str+="," + STR_NW_DST + "="+ cidrToString(networkDestination,getNetworkDestinationMaskLen());  if (getNetworkSourceMaskLen() > 0)   str+="," + STR_NW_SRC + "="+ cidrToString(networkSource,getNetworkSourceMaskLen());  if ((wildcards & OFPFW_NW_PROTO) == 0)   str+="," + STR_NW_PROTO + "="+ this.networkProtocol;  if ((wildcards & OFPFW_NW_TOS) == 0)   str+="," + STR_NW_TOS + "="+ this.getNetworkTypeOfService();  if ((wildcards & OFPFW_TP_DST) == 0)   str+="," + STR_TP_DST + "="+ this.transportDestination;  if ((wildcards & OFPFW_TP_SRC) == 0)   str+="," + STR_TP_SRC + "="+ this.transportSource;  if ((str.length() > 0) && (str.charAt(0) == ','))   str=str.substring(1);  return "OFMatch[" + str + "]";}  }
class C{  public static MBeanServer newMBeanServer(){  return newMBeanServer(null);}  }
class C{  public MultiplexingSocket(Socket socket){  super(socket);  try {    setTcpNoDelay(true);  } catch (  SocketException ex) {    logger.info("Cannot SO_TCPNODELAY");  }}  }
class C{  public void import1000Words(){  Bot bot=getBot();  bot.memory().importMemory("wiktionary1000");  bot.shutdown();  TextTest.bot=Bot.createInstance();}  }
class C{  public void rotateClockwise(){  rotate(90,true);}  }
class C{  public boolean isDirectory(){  return dirFlag && !isLink();}  }
class C{  public static Response createAllocationErrorResponse(char errorCode){  return createAllocationErrorResponse(errorCode,null);}  }
class C{  void complementSpecies(final SpeciesDescription species,final ISyntacticElement node){  if (species == null) {    return;  }  species.copyJavaAdditions();  node.visitChildren(null);  node.visitSpecies(null);}  }
class C{  public void showDialog(Container container){  this.container=container;  view.showDialog();  view.setAction(appContext.getDevMachine().getWsAgentBaseUrl() + "/project/uploadfile" + container.getLocation());}  }
class C{  public MaterialEditText wordCountEnabled(boolean lengthEnabled){  mWordCountEnabled=lengthEnabled;  mWordCount.setVisibility(mWordCountEnabled ? VISIBLE : GONE);  return this;}  }
class C{  protected static double sinSquared(double x){  return Math.sin(x) * Math.sin(x);}  }
class C{  public static final boolean isAncestor(File a,File b){  while (b != null) {    if (b.equals(a))     return true;    b=b.getParentFile();  }  return false;}  }
class C{  protected void checkBuf(int need) throws IOException {  if (this.count + need > this.buf.length) {    this.out.write(this.buf,0,this.count);    this.count=0;  }}  }
class C{  public static SortClause create(String item,String order){  return new SortClause(item,ORDER.valueOf(order));}  }
class C{  public synchronized void inverseAssociateAll(Vertex associate,Vertex target,Vertex type){  Collection<Relationship> relationships=getRelationships(associate);  if (relationships == null) {    return;  }  for (  Relationship relationship : relationships) {    relationship.getTarget().removeRelationship(type,target);  }}  }
class C{  public boolean isStart(){  return mDialStart;}  }
class C{  public PrimitiveType createPrimitiveTypeFromString(EDataType eDataType,String initialValue){  PrimitiveType result=PrimitiveType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static boolean cs_lusol(int order,Dcs A,double[] b,double tol){  double[] x;  Dcss S;  Dcsn N;  int n;  boolean ok;  if (!Dcs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  S=Dcs_sqr.cs_sqr(order,A,false);  N=Dcs_lu.cs_lu(A,S,tol);  x=new double[n];  ok=(S != null && N != null);  if (ok) {    Dcs_ipvec.cs_ipvec(N.pinv,b,x,n);    Dcs_lsolve.cs_lsolve(N.L,x);    Dcs_usolve.cs_usolve(N.U,x);    Dcs_ipvec.cs_ipvec(S.q,x,b,n);  }  return (ok);}  }
class C{  public static void process(SsaMethod ssaMethod){  new MoveParamCombiner(ssaMethod).run();}  }
class C{  public ClassFileWriter(String className,String superClassName,String sourceFileName){  generatedClassName=className;  itsConstantPool=new ConstantPool(this);  itsThisClassIndex=itsConstantPool.addClass(className);  itsSuperClassIndex=itsConstantPool.addClass(superClassName);  if (sourceFileName != null)   itsSourceFileNameIndex=itsConstantPool.addUtf8(sourceFileName);  itsFlags=ACC_PUBLIC | ACC_SUPER;}  }
class C{  public static AISCloner aisCloner(){  return new AISCloner(TestTypesRegistry.MCOMPAT,create());}  }
class C{  public boolean hasExitAction(State state){  EList<Expression> exitActions=getFirstExitActions(state);  if (exitActions != null && !exitActions.isEmpty()) {    return true;  }  return false;}  }
class C{  public static byte[] generateSignedData(byte[] signature,X509Certificate[] signerChain,byte[] content,String signatureAlgorithm,URI tsaURI,String tSAPolicyID,String tSADigestAlg) throws CertificateException, IOException, NoSuchAlgorithmException {  PKCS9Attributes unauthAttrs=null;  if (tsaURI != null) {    HttpTimestamper tsa=new HttpTimestamper(tsaURI);    byte[] tsToken=generateTimestampToken(tsa,tSAPolicyID,tSADigestAlg,signature);    unauthAttrs=new PKCS9Attributes(new PKCS9Attribute[]{new PKCS9Attribute(PKCS9Attribute.SIGNATURE_TIMESTAMP_TOKEN_STR,tsToken)});  }  X500Name issuerName=X500Name.asX500Name(signerChain[0].getIssuerX500Principal());  BigInteger serialNumber=signerChain[0].getSerialNumber();  String encAlg=AlgorithmId.getEncAlgFromSigAlg(signatureAlgorithm);  String digAlg=AlgorithmId.getDigAlgFromSigAlg(signatureAlgorithm);  SignerInfo signerInfo=new SignerInfo(issuerName,serialNumber,AlgorithmId.get(digAlg),null,AlgorithmId.get(encAlg),signature,unauthAttrs);  SignerInfo[] signerInfos={signerInfo};  AlgorithmId[] algorithms={signerInfo.getDigestAlgorithmId()};  ContentInfo contentInfo=(content == null) ? new ContentInfo(ContentInfo.DATA_OID,null) : new ContentInfo(content);  PKCS7 pkcs7=new PKCS7(algorithms,contentInfo,signerChain,signerInfos);  ByteArrayOutputStream p7out=new ByteArrayOutputStream();  pkcs7.encodeSignedData(p7out);  return p7out.toByteArray();}  }
class C{  public Builder removeOld(boolean removeOld){  mRemoveOld=removeOld;  return this;}  }
class C{  public boolean isMetadataOnly(){  return metadataOnly;}  }
class C{  public void release(){  if (mVisualizer != null) {    mVisualizer.release();  }}  }
class C{  @Override protected final void addArgument(Object argument){  if (this.sb == null) {    throw new IllegalStateException("Could not add argument to evaluated string element");  }  this.sb.append(argument);}  }
class C{  private static boolean _isAllOfSameType(Node[] nodes,short type){  for (int i=0; i < nodes.length; i++) {    if (nodes[i].getNodeType() != type)     return false;  }  return true;}  }
class C{  public void paintArrowButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int direction){  String compName=context.getComponent().getName();  boolean ltr=context.getComponent().getComponentOrientation().isLeftToRight();  if ("Spinner.nextButton".equals(compName) || "Spinner.previousButton".equals(compName)) {    if (ltr) {      paintForeground(context,g,x,y,w,h,null);    } else {      AffineTransform transform=new AffineTransform();      transform.translate(w,0);      transform.scale(-1,1);      paintForeground(context,g,x,y,w,h,transform);    }  } else   if (direction == SwingConstants.WEST) {    paintForeground(context,g,x,y,w,h,null);  } else   if (direction == SwingConstants.NORTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(90));      paintForeground(context,g,y,x,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(90));      transform.translate(0,-(x + w));      paintForeground(context,g,y,x,h,w,transform);    }  } else   if (direction == SwingConstants.EAST) {    AffineTransform transform=new AffineTransform();    transform.translate(w,0);    transform.scale(-1,1);    paintForeground(context,g,x,y,w,h,transform);  } else   if (direction == SwingConstants.SOUTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(-90));      transform.translate(-h,0);      paintForeground(context,g,y,x,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(-90));      transform.translate(-(h + y),-(w + x));      paintForeground(context,g,y,x,h,w,transform);    }  }}  }
class C{  public ImageCacheParams(File rootDirectory){  diskCacheDir=rootDirectory;}  }
class C{  private void trainUpdate(PropertyChangeEvent evt){  if (getAutomationItem() != null) {    if (evt.getPropertyName().equals(Train.TRAIN_MOVE_COMPLETE_CHANGED_PROPERTY) || (evt.getPropertyName().equals(Train.BUILT_CHANGED_PROPERTY) && (boolean)evt.getNewValue() == true)) {      Train train=getAutomationItem().getTrain();      RouteLocation rl=getAutomationItem().getRouteLocation();      if (rl != null && rl != train.getCurrentLocation()) {        return;      }      train.removePropertyChangeListener(this);      finishAction(true);    } else     if (evt.getPropertyName().equals(Train.BUILD_CHANGED_PROPERTY) && (boolean)evt.getNewValue() == false) {      Train train=getAutomationItem().getTrain();      train.removePropertyChangeListener(this);      finishAction(true);    }  }}  }
class C{  private void rehash(){  java.util.Set<Entry<K,V>> set=entrySet();  capacity<<=1;  size=0;  table.clear();  for (int i=0; i < capacity; i++)   table.add(null);  for (  Entry<K,V> entry : set) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  static public void verifyAssignments(Map<Initiator,List<StoragePort>> assignments,String arrayType,int maxPaths,int pathsPerInitiator,int maxInitiatorsPerPort,Map<URI,List<Initiator>> net2InitiatorsMap,Map<Initiator,List<StoragePort>> existingAssignments) throws Exception {  Set<URI> allPorts=new HashSet<URI>();  for (  List<StoragePort> ports : assignments.values()) {    for (    StoragePort port : ports) {      allPorts.add(port.getId());    }  }  if (existingAssignments != null) {    for (    List<StoragePort> ports : existingAssignments.values()) {      for (      StoragePort port : ports) {        allPorts.add(port.getId());      }    }  }  Set<Initiator> allInitiators=new HashSet<Initiator>();  allInitiators.addAll(assignments.keySet());  if (existingAssignments != null) {    allInitiators.addAll(existingAssignments.keySet());  }  Map<URI,Set<Initiator>> hostInitiatorsMap=generateHostInitiatorsMap(allInitiators);  for (  URI host : hostInitiatorsMap.keySet()) {    Set<Initiator> initiators=hostInitiatorsMap.get(host);    Integer ninitiators=initiators.size();    Map<StoragePort,Integer> portUseCounts=new HashMap<StoragePort,Integer>();    for (    Initiator initiator : initiators) {      List<StoragePort> portAssignments=assignments.get(initiator);      if (portAssignments == null && existingAssignments != null) {        existingAssignments.get(initiator);      }      if (portAssignments == null) {        continue;      }      for (      StoragePort port : portAssignments) {        DefaultStoragePortsAssigner.addPortUse(portUseCounts,port);      }      Integer nports=portAssignments.size();      if (nports > pathsPerInitiator) {        throw new Exception(String.format("Initiator %s has too many ports: %s",initiator.getInitiatorPort(),nports));      }    }    if (portUseCounts.size() > maxPaths) {      throw new Exception(String.format("Host %s uses more storage ports (%s) than maxPaths %d",host,portUseCounts.size(),maxPaths));    }    for (    Map.Entry<StoragePort,Integer> portEntry : portUseCounts.entrySet()) {      if (portEntry.getValue() > maxInitiatorsPerPort) {        throw new Exception((String.format("Port %s was used by %d initiators but maxInitiatorsPerPort was %d",portEntry.getKey().getLabel(),portEntry.getValue(),maxInitiatorsPerPort)));      }    }    if (portUseCounts.size() < maxPaths) {      if (portUseCounts.size() > (ninitiators * pathsPerInitiator)) {        throw new Exception(String.format("Host %s used more ports than expected (ninitiators %s * pathsPerInitiator %s)",host,ninitiators,pathsPerInitiator));      }    }  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public Sector(Angle minLatitude,Angle maxLatitude,Angle minLongitude,Angle maxLongitude){  if (minLatitude == null || maxLatitude == null || minLongitude == null || maxLongitude == null) {    throw new IllegalArgumentException("Input Angles Null");  }  this.minLatitude=minLatitude;  this.maxLatitude=maxLatitude;  this.minLongitude=minLongitude;  this.maxLongitude=maxLongitude;  this.deltaLat=Angle.fromDegrees(this.maxLatitude.degrees - this.minLatitude.degrees);  this.deltaLon=Angle.fromDegrees(this.maxLongitude.degrees - this.minLongitude.degrees);}  }
class C{  public void testSignumPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",1,aNumber.signum());}  }
class C{  public final int length(){  return longs.length();}  }
class C{  private PackageElement installPackageForTypeName(String typePath){  File packageFile=new File(typePath).getParentFile();  if (null == packageFile) {    return new PackageElement("<unnamed>");  }  File treeFile=createTreeFile();  PackageTreeBuilder packageBuilder=new PackageTreeBuilder(dl);  return packageBuilder.installPackageTree(packageFile,treeFile);}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  if (savedInstanceState != null) {    mLogTextView.setText(Html.fromHtml(savedInstanceState.getString(LOG_TEXT_KEY)));  }}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return 0.0;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(@NonNull Context context,@NonNull Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public OpenInLastWindowAndZoomToAddressAction(final Window parent,final IViewContainer container,final INaviView[] views,final TypeInstanceReference reference){  super("Open in last window and zoom to address");  m_parent=Preconditions.checkNotNull(parent,"IE02876: parent argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE02877: container argument can not be null");  m_views=Preconditions.checkNotNull(views,"IE02878: views argument can not be null").clone();  this.reference=reference;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mData && mData.length > 0);}  }
class C{  synchronized public void addEdge(final Object blocked,final Object running) throws DeadlockException {  if (running == blocked) {    throw new IllegalArgumentException("may not wait for self");  }  final int dst=lookup(running,true);  final int src=lookup(blocked,true);  if (src == dst) {    throw new IllegalArgumentException("may not wait for self.");  }  if (W[src][dst]) {    throw new IllegalStateException("edge exists");  }  if (DEBUG) {    log.debug(toString());  }  final int[] order=getOrder();  backup(order);  try {    if (!updateClosure(src,dst,true)) {      log.warn("Deadlock");      restore(order);      if (DEBUG) {        log.debug(toString());      }      throw new DeadlockException("deadlock");    }  } catch (  DeadlockException ex) {    throw ex;  }catch (  Throwable t) {    log.error(t);    restore(order);    throw new RuntimeException(t);  }  W[src][dst]=true;  outbound[src]++;  inbound[dst]++;  if (outbound[src] == 1 || inbound[dst] == 1) {    resetOrder();  }  if (DEBUG) {    log.debug(toString());  }}  }
class C{  public void add(final Number operand){  this.value+=operand.floatValue();}  }
class C{  private void traverseColumnPathAst(AST ast){  VqlNode leftNode=root;  AST op=ast;  VqlNode rightNode=null;  VqlEdge incomingEdge=null;  int lastEdgeType=NO_EDGE_TYPE;  while (op != null) {    String valueOfRightNode=op.getNextSibling().getText();    if (PROP == op.getType()) {      handleProperty(leftNode,incomingEdge,lastEdgeType,valueOfRightNode);      break;    }    if (LT == op.getType()) {      String nodePath=leftNode.getPath() + "/" + valueOfRightNode;      String edgePath=getEdgePathForLink(leftNode,incomingEdge,valueOfRightNode);      rightNode=getNode(op.getNextSibling().getText(),nodePath);      incomingEdge=getEdge(EdgeType.LINK,edgePath,leftNode,rightNode);      lastEdgeType=LT;    }    if (LINK == op.getType()) {      String nodePath=leftNode.getPath() + "/" + valueOfRightNode;      String edgePath=getEdgePathForLink(leftNode,incomingEdge,valueOfRightNode);      rightNode=getNode(op.getNextSibling().getText(),nodePath);      incomingEdge=getEdge(EdgeType.LINK,edgePath,leftNode,rightNode);      lastEdgeType=LINK;    }    if (CHILD == op.getType()) {      String path=leftNode.getPath() + ">" + valueOfRightNode;      rightNode=getNode(op.getNextSibling().getText(),path);      incomingEdge=getEdge(EdgeType.CHILD,path,leftNode,rightNode);      lastEdgeType=CHILD;    }    if (PARENT == op.getType()) {      String path=leftNode.getPath() + "<" + valueOfRightNode;      rightNode=getNode(op.getNextSibling().getText(),path);      incomingEdge=getEdge(EdgeType.PARENT,path,leftNode,rightNode);      lastEdgeType=PARENT;    }    addNodeToGraph(rightNode);    addEdgeToGraph(leftNode,rightNode,incomingEdge);    leftNode=rightNode;    op=op.getNextSibling().getNextSibling();  }}  }
class C{  public JSONObject put(String name,String value){  put(name,JSON.value(value));  return this;}  }
class C{  public GroupSizeFunction(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.BOOL_LITERAL__VALUE:    setValue((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  void rectifyStacks(BasicBlock block,OperandStack stack,BasicBlockLE p){  if (stack == null || stack.isEmpty()) {    if (VM.VerifyAssertions)     VM._assert(p.stackState == null);    if (!p.isStackKnown()) {      p.setStackKnown();    }    if (DBG_STACK || BC2IR.DBG_SELECTED) {      db("Rectified empty expression stack into " + p + "("+ p.block+ ")");    }    return;  }  boolean generated=p.isGenerated();  if (!p.isStackKnown()) {    if (DBG_STACK || BC2IR.DBG_SELECTED) {      db("First stack rectifiction for " + p + "("+ p.block+ ") simply saving");    }    if (VM.VerifyAssertions)     VM._assert(p.stackState == null);    p.stackState=stack.createEmptyOperandStackWithSameCapacity();    for (int i=stack.getSize() - 1; i >= 0; i--) {      Operand op=stack.getFromTop(i);      if (op == BC2IR.DUMMY) {        p.stackState.push(BC2IR.DUMMY);      } else       if (op instanceof RegisterOperand) {        RegisterOperand rop=op.asRegister();        if (rop.getRegister().isLocal()) {          RegisterOperand temp=gc.getTemps().makeTemp(rop);          temp.setInheritableFlags(rop);          BC2IR.setGuardForRegOp(temp,BC2IR.copyGuardFromOperand(rop));          Instruction move=Move.create(IRTools.getMoveOp(rop.getType()),temp,rop.copyRO());          move.setSourcePosition(RECTIFY_BCI,gc.getInlineSequence());          block.appendInstructionRespectingTerminalBranch(move);          p.stackState.push(temp.copy());          if (DBG_STACK || BC2IR.DBG_SELECTED) {            db("Inserted " + move + " into "+ block+ " to rename local");          }        } else {          p.stackState.push(rop.copy());        }      } else {        p.stackState.push(op.copy());      }    }    p.setStackKnown();  } else {    if (DBG_STACK || BC2IR.DBG_SELECTED)     db("rectifying stacks");    try {      if (VM.VerifyAssertions) {        VM._assert(stack.getSize() == p.stackState.getSize());      }    } catch (    NullPointerException e) {      System.err.println("stack size " + stack.getSize());      System.err.println(stack);      System.err.println(p.stackState);      System.err.println(gc.getMethod().toString());      block.printExtended();      p.block.printExtended();      throw e;    }    for (int i=0; i < stack.getSize(); ++i) {      Operand sop=stack.getFromTop(i);      Operand mop=p.stackState.getFromTop(i);      if ((sop == BC2IR.DUMMY) || (sop instanceof ReturnAddressOperand)) {        if (VM.VerifyAssertions)         VM._assert(mop.similar(sop));        continue;      } else       if (sop.isConstant() || mop.isConstant()) {        if (mop.similar(sop)) {          continue;        }        if (mop.isConstant()) {          RegisterOperand mopTmp=gc.getTemps().makeTemp(mop);          if (DBG_STACK || BC2IR.DBG_SELECTED)           db("Merged stack has constant operand " + mop);          for (Enumeration<BasicBlock> preds=p.block.getIn(); preds.hasMoreElements(); ) {            BasicBlock pred=preds.nextElement();            if (pred == block)             continue;            injectMove(pred,mopTmp.copyRO(),mop.copy());          }          p.stackState.replaceFromTop(i,mopTmp.copy());          if (generated) {            if (DBG_STACK || BC2IR.DBG_SELECTED) {              db("\t...forced to regenerate " + p + " ("+ p.block+ ") because of this");            }            markBlockForRegeneration(p);            generated=false;            p.block.deleteOut();            if (DBG_CFG || BC2IR.DBG_SELECTED)             db("Deleted all out edges of " + p.block);          }          mop=mopTmp;        }        if (sop.isConstant()) {          RegisterOperand sopTmp=gc.getTemps().makeTemp(sop);          if (DBG_STACK || BC2IR.DBG_SELECTED)           db("incoming stack has constant operand " + sop);          injectMove(block,sopTmp,sop);          sop=sopTmp.copyRO();        }      }      RegisterOperand rsop=sop.asRegister();      RegisterOperand rmop=mop.asRegister();      if (rmop.getRegister() != rsop.getRegister()) {        RegisterOperand temp=rsop.copyRO();        temp.setRegister(rmop.getRegister());        injectMove(block,temp,rsop.copyRO());      }      Operand meet=Operand.meet(rmop,rsop,rmop.getRegister());      if (DBG_STACK || BC2IR.DBG_SELECTED)       db("Meet of " + rmop + " and "+ rsop+ " is "+ meet);      if (meet != rmop) {        if (generated) {          if (DBG_STACK || BC2IR.DBG_SELECTED) {            db("\t...forced to regenerate " + p + " ("+ p.block+ ") because of this");          }          markBlockForRegeneration(p);          generated=false;          p.block.deleteOut();          if (DBG_CFG || BC2IR.DBG_SELECTED)           db("Deleted all out edges of " + p.block);        }        p.stackState.replaceFromTop(i,meet);      }    }  }}  }
class C{  public synchronized void clearYTextLabels(int scale){  mYTextLabels.get(scale).clear();}  }
class C{  public FacebookGraphObjectException(){  super();}  }
class C{  public int checkRecipe(){  GT_Recipe_Map tMap=getRecipeList();  if (tMap == null)   return DID_NOT_FIND_RECIPE;  GT_Recipe tRecipe=tMap.findRecipe(getBaseMetaTileEntity(),mLastRecipe,false,V[mTier],new FluidStack[]{getFillableStack()},getSpecialSlot(),getAllInputs());  if (tRecipe == null)   return DID_NOT_FIND_RECIPE;  if (tRecipe.mCanBeBuffered)   mLastRecipe=tRecipe;  if (!canOutput(tRecipe)) {    mOutputBlocked++;    return FOUND_RECIPE_BUT_DID_NOT_MEET_REQUIREMENTS;  }  if (!tRecipe.isRecipeInputEqual(true,new FluidStack[]{getFillableStack()},getAllInputs()))   return FOUND_RECIPE_BUT_DID_NOT_MEET_REQUIREMENTS;  for (int i=0; i < mOutputItems.length; i++)   if (getBaseMetaTileEntity().getRandomNumber(10000) < tRecipe.getOutputChance(i))   mOutputItems[i]=tRecipe.getOutput(i);  mOutputFluid=tRecipe.getFluidOutput(0);  calculateOverclockedNess(tRecipe);  return FOUND_AND_SUCCESSFULLY_USED_RECIPE;}  }
class C{  public String generateReceiptNumber(final ReceiptHeader receiptHeader){  final ReceiptNumberGenerator receiptNumberGen=beanResolver.getAutoNumberServiceFor(ReceiptNumberGenerator.class);  return receiptNumberGen.generateReceiptNumber(receiptHeader);}  }
class C{  public boolean isTrialPackage(){  return (_coordinator.getNodeCount() == 1 && Constants.CONTROL_NODE_SYSSVC_ID_PATTERN.matcher(_coordinator.getMySvcId()).matches());}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tNumber of iterations.\n" + "\t(default 10)","I",1,"-I <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void shutdown() throws Exception {  log.debug("shutting down...");  lock.lock();  try {    if (log.isDebugEnabled())     log.debug("Waiting on parserQueueLatch: " + parserQueueLatch);    parserQueueLatch.await();    if (parserService != null) {      parserService.shutdown();    }    if (log.isDebugEnabled())     log.debug("Waiting on parserRunLatch: " + parserRunLatch);    parserRunLatch.await();    parsing.set(false);    log.debug("Inserting poison pill.");    valueQueue.put(poisonPill);    if (indexerTask != null) {      indexerTask.get();    }    if (indexerService != null)     indexerService.shutdown();    if (mmgr != null) {      if (log.isInfoEnabled())       log.info(mmgr.getCounters().toString());      mmgr.clear();    }  }  finally {    lock.unlock();  }  log.debug("all done.");}  }
class C{  public static void runConcurrently(final Callable<Void> task,final int times) throws Exception {  final ExecutorService service=Executors.newFixedThreadPool(5);  final List<Future<?>> futures=new ArrayList<Future<?>>();  for (int i=0; i < times; i++) {    futures.add(service.submit(task));  }  for (  final Future<?> future : futures) {    future.get();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected void decodeLineStyle(final Object lineStyleFlag){  if (lineStyleFlag == null || NO_STYLE_STRING.equals(lineStyleFlag)) {    lineStyle=NO_LINE_STYLE;    return;  }  if (LEG_LINE_STYLE_STRING.equals(lineStyleFlag)) {    lineStyle=LEG_LINE_STYLE;  } else   if (HORIZ_STYLE_STRING.equals(lineStyleFlag)) {    lineStyle=HORIZ_LINE_STYLE;  }}  }
class C{  public void removeData(String key){  editor.remove(key);  editor.commit();}  }
class C{  public static PieChartComponent open(final InputStream input,final String name,final String format){  PieChartModel dataModel=(PieChartModel)PieChartModel.getXStream().fromXML(input);  return new PieChartComponent(name,dataModel);}  }
class C{  public String businessObjectFormatKeyToString(String namespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion){  return String.format("namespace: \"%s\", businessObjectDefinitionName: \"%s\", businessObjectFormatUsage: \"%s\", " + "businessObjectFormatFileType: \"%s\", businessObjectFormatVersion: %d",namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion);}  }
class C{  public static String PlaybackRuntimeFromMilliseconds(long milliseconds){  long hours=0;  long minutes=0;  long seconds=0;  if (milliseconds >= (1000 * 60 * 60)) {    hours=milliseconds / (1000 * 60 * 60);  }  if (milliseconds >= (1000 * 60)) {    minutes=(milliseconds % (1000 * 60 * 60)) / (1000 * 60);  }  if (milliseconds >= 1000) {    seconds=((milliseconds % (1000 * 60 * 60)) % (1000 * 60)) / 1000;  }  String runtime="";  if (hours > 0) {    runtime=String.valueOf(hours) + ":";  }  if (minutes > 0) {    if (minutes < 10 && hours > 0) {      runtime+="0";    }    runtime+=String.valueOf(minutes) + ":";  } else {    if (hours > 0) {      runtime+="00:";    }  }  if (seconds > 0) {    if (seconds < 10) {      runtime+="0";    }    runtime+=String.valueOf(seconds);    if (hours < 1 && minutes < 1) {      runtime="0:" + runtime;    }  } else {    if (hours < 1 && minutes < 1) {      runtime+="0:00";    } else {      runtime+="00";    }  }  return runtime;}  }
class C{  @Deprecated static public SerialSensorManager instance(){  return null;}  }
class C{  public Object clone(){  return new GF2nPolynomialElement(this);}  }
class C{  public StrBuilder appendln(long value){  return append(value).appendNewLine();}  }
class C{  @Override public void sendMessage(String message) throws java.io.IOException {  output.append(message);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void scaleFont(float scaleBy){  SharedContext rc=getSharedContext();  float fs=rc.getTextRenderer().getFontScale() * scaleBy;  if (fs < minFontScale || fs > maxFontScale)   return;  rc.getTextRenderer().setFontScale(fs);  setDocument(getDocument());}  }
class C{  public CoreDescriptor(CoreContainer container,String name,Path instanceDir,Map<String,String> coreProps){  this.coreContainer=container;  this.instanceDir=instanceDir;  originalCoreProperties.setProperty(CORE_NAME,name);  Properties containerProperties=container.getContainerProperties();  name=PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name,CORE_NAME),containerProperties);  coreProperties.putAll(defaultProperties);  coreProperties.put(CORE_NAME,name);  for (  String propname : coreProps.keySet()) {    String propvalue=coreProps.get(propname);    if (isUserDefinedProperty(propname))     originalExtraProperties.put(propname,propvalue); else     originalCoreProperties.put(propname,propvalue);    if (!requiredProperties.contains(propname))     coreProperties.setProperty(propname,PropertiesUtil.substituteProperty(propvalue,containerProperties));  }  loadExtraProperties();  buildSubstitutableProperties();  if (container.isZooKeeperAware()) {    cloudDesc=new CloudDescriptor(name,coreProperties,this);  } else {    cloudDesc=null;  }  log.debug("Created CoreDescriptor: " + coreProperties);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  throw new BadLocationException(pos + " not in range " + p0+ ","+ p1,pos);}  }
class C{  public void addMediaElement(String participantId,MediaElement element,MediaType type) throws RoomException {  log.debug("Add media element {} (connection type: {}) to participant {}",element.getId(),type,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  if (participant.isClosed()) {    throw new RoomException(Code.USER_CLOSED_ERROR_CODE,"Participant '" + name + "' has been closed");  }  participant.shapePublisherMedia(element,type);}  }
class C{  public Vector3 lerpAndSet(Vector3 from,Vector3 to,double amount){  x=from.x + (to.x - from.x) * amount;  y=from.y + (to.y - from.y) * amount;  z=from.z + (to.z - from.z) * amount;  return this;}  }
class C{  public static String readStringAndClose(Reader in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    StringWriter out=new StringWriter(block);    copyAndCloseInput(in,out,length);    return out.toString();  }  finally {    in.close();  }}  }
class C{  @SuppressWarnings("unchecked") public <G extends Graph,E extends Edge>void synchronizeEdges(G g,GraphBuilder<G,V,E> builder){  if (g.getVertices().size() == getVertexCount()) {    Set<Edge> edges=new HashSet<Edge>(g.getEdges());    for (    Edge edge : edges)     builder.removeEdge((G)g,(E)edge);    addEdges(g,builder,vertices);  } else {    throw new UnsupportedOperationException("The size of the graph or matrix has changed.");  }}  }
class C{  public String createUrl(boolean createDB){  if (url != null)   return url;  StringBuffer sb=new StringBuffer();  if (jdbcHeader == null)   sb.append("jdbc:mysql:thin://"); else   sb.append(jdbcHeader);  sb.append(host);  sb.append(":");  sb.append(port);  sb.append("/");  sb.append(schema);  if (urlOptions != null && urlOptions.length() > 0) {    if (!urlOptions.startsWith("?"))     sb.append("?");    sb.append(urlOptions);    if (createDB) {      sb.append("&createDB=true");    }    if (sslEnabled) {      sb.append("&useSSL=true");    }  } else   if (createDB) {    sb.append("?createDB=true");    if (sslEnabled) {      sb.append("&useSSL=true");    }  } else   if (sslEnabled) {    sb.append("?useSSL=true");  }  return sb.toString();}  }
class C{  private final void notifyConnectionClosed(OFConnection connection){  connection.getListener().connectionClosed(connection);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void updateBytes(int columnIndex,byte x[]) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateBytes(columnIndex,x);}  }
class C{  private String _getProperty(String key) throws IOException {  String ret=null;  if (null == m_props) {    InputStream unbuffered;    unbuffered=getClass().getResourceAsStream(getPropertyFileName());    if (unbuffered == null) {      throw new PropertyFileNotFoundException("Check " + "to see if the property file \"" + getPropertyFileName() + "\" is installed and available in the class path.");    } else {      InputStream in=new BufferedInputStream(unbuffered);      m_props=new PropertyResourceBundle(in);      in.close();      unbuffered.close();    }  }  try {    ret=m_props.getString(key);  } catch (  MissingResourceException e) {    throw new PropertyNotFoundException("The property \"" + key + "\" was not found in the property file \""+ getPropertyFileName()+ "\".  Check the file.");  }  return ret;}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  private void searchDevices(){  try {    if (mStartComplete) {      mControlPoint.search();      LogUtil.d(TAG,"controlpoint search...");    } else {      mControlPoint.stop();      boolean startRet=mControlPoint.start();      LogUtil.d(TAG,"controlpoint start:" + startRet);      if (startRet) {        mStartComplete=true;      }    }  } catch (  Exception e) {    e.printStackTrace();  }synchronized (this) {    try {      mSearchTimes++;      if (mSearchTimes >= 5) {        wait(mNormalInternalTime);      } else {        wait(mFastInternalTime);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean removeNamedGraph(IRI graphURI){  return namedGraphs.remove(graphURI);}  }
class C{  private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){  if (supported == null) {    supported=new HashMap<String,Boolean>();    cache=new HashMap<String,Negotiator>();  }  String hostname=hci.host;  hostname=hostname.toLowerCase();  if (supported.containsKey(hostname)) {    return supported.get(hostname);  }  Negotiator neg=Negotiator.getNegotiator(hci);  if (neg != null) {    supported.put(hostname,true);    cache.put(hostname,neg);    return true;  } else {    supported.put(hostname,false);    return false;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int arityOf(int fn){  return 2;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean removeRoute(TransitSchedule schedule,Id<TransitLine> transitLineId,Id<TransitRoute> transitRouteId){  TransitLine transitLine=schedule.getTransitLines().get(transitLineId);  return transitLine != null && transitLine.removeRoute(transitLine.getRoutes().get(transitRouteId));}  }
class C{  protected void configMinPts(Parameterization config){  IntParameter minptsP=new IntParameter(DBSCAN.Parameterizer.MINPTS_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ONE_INT);  if (config.grab(minptsP)) {    settings.minpts=minptsP.intValue();  }}  }
class C{  public void start() throws IOException, MqttException {  final String methodName="start";  try {    log.fine(className,methodName,"252",new Object[]{uri});    connection=(SecureConnection)Connector.open(uri);    connection.setSocketOption(SocketConnection.DELAY,0);    in=connection.openInputStream();    out=connection.openOutputStream();  } catch (  IOException ex) {    System.out.println(ex.getMessage());    log.fine(className,methodName,"250",null,ex);    ex.printStackTrace();    throw new MqttException(MqttException.REASON_CODE_SERVER_CONNECT_ERROR,ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:40.421 -0500",hash_original_method="7D5076FD031C3333366BAA4D8CB3A6E9",hash_generated_method="EFEE2F3C5813D9D53F3FAAE6E821DF49") public Path toPath(float width,float height,int numSample){  final float[] pts=GestureUtils.temporalSampling(this,numSample);  final RectF rect=boundingBox;  GestureUtils.translate(pts,-rect.left,-rect.top);  float sx=width / rect.width();  float sy=height / rect.height();  float scale=sx > sy ? sy : sx;  GestureUtils.scale(pts,scale,scale);  float mX=0;  float mY=0;  Path path=null;  final int count=pts.length;  for (int i=0; i < count; i+=2) {    float x=pts[i];    float y=pts[i + 1];    if (path == null) {      path=new Path();      path.moveTo(x,y);      mX=x;      mY=y;    } else {      float dx=Math.abs(x - mX);      float dy=Math.abs(y - mY);      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);        mX=x;        mY=y;      }    }  }  return path;}  }
class C{  private String idString(int id1,int id2){  return "0x" + Integer.toHexString(id2 & 0x7F) + " 0x"+ Integer.toHexString(id1 & 0x7F)+ " ("+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ ")";}  }
class C{  @Override public void onDestroy(){  if (mWebView != null) {    mWebView.destroy();    mWebView=null;  }  super.onDestroy();}  }
class C{  public void seek(long pos) throws IOException {  checkClosed();  if (pos < flushedPos) {    throw new IndexOutOfBoundsException("pos < flushedPos!");  }  bitOffset=0;  raf.seek(pos);  streamPos=raf.getFilePointer();}  }
class C{  public static void main(String[] args){  String usage="java pitt.search.lucene.LuceneIndexFromTriples [triples text file] ";  if (args.length == 0) {    System.err.println("Usage: " + usage);    System.exit(1);  }  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  if (flagConfig.luceneindexpath().length() > 0) {    INDEX_DIR=FileSystems.getDefault().getPath(flagConfig.luceneindexpath());  }  if (Files.exists(INDEX_DIR)) {    throw new IllegalArgumentException("Cannot save index to '" + INDEX_DIR + "' directory, please delete it first");  }  try {    IndexWriterConfig writerConfig=new IndexWriterConfig(new WhitespaceAnalyzer());    IndexWriter writer=new IndexWriter(FSDirectory.open(INDEX_DIR),writerConfig);    final File triplesTextFile=new File(args[0]);    if (!triplesTextFile.exists() || !triplesTextFile.canRead()) {      writer.close();      throw new IOException("Document file '" + triplesTextFile.getAbsolutePath() + "' does not exist or is not readable, please check the path");    }    System.out.println("Indexing to directory '" + INDEX_DIR + "'...");    indexDoc(writer,triplesTextFile);    writer.close();  } catch (  IOException e) {    System.out.println(" caught a " + e.getClass() + "\n with message: "+ e.getMessage());  }}  }
class C{  @Override public void emitList(ArrayList<HashMap<K,Integer>> tlist){  list.emit(tlist);}  }
class C{  public synchronized void reset(){  labels.clear();  labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);  labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);  for (int i=0; i < this.counters.length; i++) {    if (null == this.counters[i]) {      continue;    }    labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(i));    Sensision.clear(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET,labels);    this.counters[i]=null;  }}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  public static InetSocketAddress parseSocketAddress(String addr){  String[] parts=addr.split(COLON);  Preconditions.checkArgument(parts.length == 2);  String hostname=parts[0];  int port=Integer.parseInt(parts[1]);  return new InetSocketAddress(hostname,port);}  }
class C{  public LdapPrincipal(String name) throws InvalidNameException {  if (name == null) {    throw new NullPointerException("null name is illegal");  }  this.name=getLdapName(name);  nameString=name;}  }
class C{  public void addSprite(float x,float y,float z,int w,int h,boolean rotX,boolean rotY,boolean rotZ,boolean mirrorX,boolean mirrorY,float expansion){  addSprite(x,y,z,w,h,1,rotX,rotY,rotZ,mirrorX,mirrorY,expansion);}  }
class C{  @SuppressWarnings("unused") public AssignWindows(Window.Bound<T> transform){  this.transform=transform;}  }
class C{  public ReplDBMSEvent createEvent(long seqno,String shardId,short fragNo,boolean lastFrag){  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  t.add(new StatementData("SELECT 1"));  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,fragNo,lastFrag,"NONE",0,new Timestamp(System.currentTimeMillis()),dbmsEvent);  replDbmsEvent.getDBMSEvent().addMetadataOption(ReplOptionParams.SHARD_ID,shardId);  return replDbmsEvent;}  }
class C{  public void insertNodeInto(MutableTreeNode newChild,MutableTreeNode parent,int index){  parent.insert(newChild,index);  int[] newIndexs=new int[1];  newIndexs[0]=index;  nodesWereInserted(parent,newIndexs);}  }
class C{  public void validateBusinessObjectDataAttributeKey(String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,String expectedBusinessObjectDataAttributeName,BusinessObjectDataAttributeKey actualBusinessObjectDataAttributeKey){  assertNotNull(actualBusinessObjectDataAttributeKey);  assertEquals(expectedNamespace,actualBusinessObjectDataAttributeKey.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualBusinessObjectDataAttributeKey.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualBusinessObjectDataAttributeKey.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualBusinessObjectDataAttributeKey.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,actualBusinessObjectDataAttributeKey.getBusinessObjectFormatVersion());  assertEquals(expectedBusinessObjectDataPartitionValue,actualBusinessObjectDataAttributeKey.getPartitionValue());  assertEquals(expectedBusinessObjectDataSubPartitionValues,actualBusinessObjectDataAttributeKey.getSubPartitionValues());  assertEquals(expectedBusinessObjectDataVersion,actualBusinessObjectDataAttributeKey.getBusinessObjectDataVersion());  assertEquals(expectedBusinessObjectDataAttributeName,actualBusinessObjectDataAttributeKey.getBusinessObjectDataAttributeName());}  }
class C{  public void unMapVolumeToSDC(String volumeId,String sdcId) throws Exception {  String uri=ScaleIOConstants.getUnmapVolumeToSDCURI(volumeId);  ScaleIOUnmapVolumeToSDC unmapParm=new ScaleIOUnmapVolumeToSDC();  unmapParm.setSdcId(sdcId);  unmapParm.setIgnoreScsiInitiators("TRUE");  post(URI.create(uri),getJsonForEntity(unmapParm));}  }
class C{  public Attribute(AVT avt,Element elem){  m_attribute=avt;  m_owner=elem;}  }
class C{  public Plane(Vector3 point1,Vector3 point2,Vector3 point3){  set(point1,point2,point3);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public LaunchConfiguration addOrReturnExistingLaunchConfiguration(ILaunch newLaunch,String clientId,ILaunchConfigurationFactory factory){  LaunchConfiguration launchConfiguration;synchronized (privateInstanceLock) {    for (    LaunchConfiguration lc : launchConfigurations) {      if (lc.getLaunch().equals(newLaunch)) {        return lc;      }    }    String name=LaunchConfiguration.computeNamePrefix(newLaunch,clientId);    if (factory != null) {      launchConfiguration=factory.newLaunchConfiguration(newLaunch,name,this);    } else {      launchConfiguration=new LaunchConfiguration(newLaunch,name,this);    }    launchConfigurations.add(launchConfiguration);  }  WebAppDebugModelEvent<LaunchConfiguration> launchedEvent=new WebAppDebugModelEvent<LaunchConfiguration>(launchConfiguration);  fireLaunchConfigurationLaunched(launchedEvent);  removeAllAssociatedTerminatedLaunchConfigsExceptMostRecent(launchConfiguration);  return launchConfiguration;}  }
class C{  public boolean isVisible(){  if (isVisible == null) {    isVisible=(getUser().isInternalUser() || canPerform(Permission.READ)) && canRead();  }  return isVisible;}  }
class C{  public TermNode middle(){  return (VarNode)super.getProperty(Annotations.MIDDLE_TERM);}  }
class C{  public String tokenizerTipText(){  return "The tokenizing algorithm to use on the strings.";}  }
class C{  public void incProcessedMessagesTime(long start){  if (enableClockStats) {    this.stats.incLong(processedMessagesTimeId,getStatTime() - start);  }}  }
class C{  private void center(float dx,float dy){  if ((mCenterPointX + dx - mRadius < 0) || (mCenterPointY + dy - mRadius < 0) || (Math.min(mDrawableWidth,mScreenWidth) - (mCenterPointX + dx + mRadius) < 0)|| (Math.min(mDrawableHeight,mScreenHeight) - (mCenterPointY + dy + mRadius) < 0)) {    return;  }  mCenterPointX+=dx;  mCenterPointY+=dy;}  }
class C{  private void addEmote(Collection<Emoticon> collection,Emoticon emote){  if ((emote.hasGlobalEmoteset() || localEmotesets.contains(emote.emoteSet))) {    if (!emote.hasStreamRestrictions()) {      emoteNames.add(emote.code);    } else {      for (      String stream : emote.getStreamRestrictions()) {        if (!emotesNamesPerStream.containsKey(stream)) {          emotesNamesPerStream.put(stream,new HashSet<String>());        }        emotesNamesPerStream.get(stream).add(emote.code);      }    }  }  collection.remove(emote);  collection.add(emote);}  }
class C{  public String[] functionNames(){synchronized (urlToSourceInfo) {    return functionNames.keySet().toArray(new String[functionNames.size()]);  }}  }
class C{  public void postFile(File file,OutputStream output,String type){  InputStream is=null;  try {    URL url=solrUrl;    String suffix="";    if (auto) {      if (type == null) {        type=guessType(file);      }      if (type.equals("application/json") && !"solr".equals(format)) {        suffix="/json/docs";        String urlStr=appendUrlPath(solrUrl,suffix).toString();        url=new URL(urlStr);      } else       if (type.equals("application/xml") || type.equals("text/csv") || type.equals("application/json")) {      } else {        suffix="/extract";        String urlStr=appendUrlPath(solrUrl,suffix).toString();        if (urlStr.indexOf("resource.name") == -1)         urlStr=appendParam(urlStr,"resource.name=" + URLEncoder.encode(file.getAbsolutePath(),"UTF-8"));        if (urlStr.indexOf("literal.id") == -1)         urlStr=appendParam(urlStr,"literal.id=" + URLEncoder.encode(file.getAbsolutePath(),"UTF-8"));        url=new URL(urlStr);      }    } else {      if (type == null)       type=DEFAULT_CONTENT_TYPE;    }    info("POSTing file " + file.getName() + (auto ? " (" + type + ")" : "")+ " to [base]"+ suffix);    is=new FileInputStream(file);    postData(is,file.length(),output,type,url);  } catch (  IOException e) {    e.printStackTrace();    warn("Can't open/read file: " + file);  } finally {    try {      if (is != null)       is.close();    } catch (    IOException e) {      fatal("IOException while closing file: " + e);    }  }}  }
class C{  private void showEntry(Entry e){  try {    setTitle(e.file.getName());    checkField.setText(e.check);    enclPanel.setInfo(e.encl);    selfPanel.setInfo(e.self);    body.setText(e.file.getCharContent(true).toString());    Highlighter highlighter=body.getHighlighter();    highlighter.removeAllHighlights();    addHighlight(highlighter,e.encl,enclColor);    addHighlight(highlighter,e.self,selfColor);    scroll(body,getMinPos(enclPanel.info,selfPanel.info));  } catch (  IOException ex) {    body.setText("Cannot read " + e.file.getName() + ": "+ e);  }}  }
class C{  public void reorderAndFixColumns(String originalSql,String prefix,String suffix){  Collections.sort(this.columns);  for (int i=0; i < columns.size(); i++)   columns.get(i).setIndex(i);  buildIndex();}  }
class C{  public long putWithOffsetAndSuffix(final int[] ngram,final int startPos,final int endPos,final long contextOffset,final long suffixOffset,final T val){  final int ngramOrder=endPos - startPos - 1;  final long key=combineToKey(ngram[endPos - 1],contextOffset);  final HashMap map=getHashMapForOrder(ngramOrder);  return putHelpWithSuffixIndex(map,ngram,startPos,endPos,key,val,false,suffixOffset);}  }
class C{  private final boolean containsPackage(final URL url){  if (url.getProtocol().equals("jar")) {    try {      JarURLConnection connection=(JarURLConnection)url.openConnection();      JarFile jarFile=connection.getJarFile();      return checkJarForPackage(jarFile);    } catch (    IOException e) {    }  } else   if (url.getProtocol().equals("file")) {    File rootDir=new File(url.getFile());    return checkDirForPackage(rootDir,fullyQualifiedPackageNameSegments.iterator());  }  return false;}  }
class C{  @Override public OutputStreamManager createManager(final String name,final FactoryData data){  return new OutputStreamManager(data.os,data.type,data.layout);}  }
class C{  void testHeaderOnly() throws IOException {  ZipEntry ze=getEntry();  byte[] data=new byte[4];  set16(data,0,TEST_HEADER);  set16(data,2,0);  ze.setExtra(data);  zos.putNextEntry(ze);  zos.close();  ZipInputStream zis=getInputStream();  ze=zis.getNextEntry();  checkExtra(data,ze.getExtra());  checkEntry(ze,0,0);}  }
class C{  void cancel(){  isCancelled=true;}  }
class C{  public String toString(){  return Long.toString(getValue());}  }
class C{  public void remove(final ColumnItem item){  if (this.widget == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.children.remove(item);  this.widget.updateContent();}  }
class C{  private JFreeChart createHistogramChart(ExampleSet exampleSet){  JFreeChart chart=ChartFactory.createHistogram(null,null,null,createHistogramDataset(exampleSet),PlotOrientation.VERTICAL,false,false,false);  AbstractAttributeStatisticsModel.setDefaultChartFonts(chart);  chart.setBackgroundPaint(null);  chart.setBackgroundImageAlpha(0.0f);  XYPlot plot=(XYPlot)chart.getPlot();  plot.setRangeGridlinesVisible(false);  plot.setDomainGridlinesVisible(false);  plot.setOutlineVisible(false);  plot.setRangeZeroBaselineVisible(false);  plot.setDomainZeroBaselineVisible(false);  plot.setBackgroundPaint(COLOR_INVISIBLE);  plot.setBackgroundImageAlpha(0.0f);  XYBarRenderer renderer=(XYBarRenderer)plot.getRenderer();  renderer.setSeriesPaint(0,AttributeGuiTools.getColorForValueType(Ontology.NUMERICAL));  renderer.setBarPainter(new StandardXYBarPainter());  renderer.setDrawBarOutline(true);  renderer.setShadowVisible(false);  return chart;}  }
class C{  public void addWarning(String msg){  addWarning(msg,null);}  }
class C{  public ListResponse listBranches(final ListRequest request) throws ApiException {  InfoResponse info=info(newDto(InfoRequest.class).withProjectPath(request.getProjectPath()).withTarget(".").withPassword(request.getPassword()).withUsername(request.getUsername()));  final List<String> args=defaultArgs();  args.add("list");  String repositoryRoot=getRepositoryRoot(info.getOutput());  String projectRelativeUrl=getRelativeUrl(info.getOutput());  String projectUri=recognizeProjectUri(repositoryRoot,projectRelativeUrl);  String path=projectUri == null ? "^/branches" : (projectUri + "/branches");  final CommandLineResult result=runCommand(null,args,new File(request.getProjectPath()),singletonList(path),request.getUsername(),request.getPassword());  return newDto(ListResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout().stream().filter(null).map(null).collect(Collectors.toList())).withErrorOutput(result.getStderr());}  }
class C{  public static long streamSkip(InputStream stream,long count) throws IOException {  long skipped=stream.skip(count);  if (skipped < 1) {    final byte[] temp=new byte[1024];    skipped=stream.read(temp,0,Math.min((int)count,1024));  }  return skipped;}  }
class C{  public final void draw(Object object,Graphics2D graphics,DrawInfo2D info){  double radiusX=info.draw.width * agent.getSphereRadius();  double radiusY=info.draw.height * agent.getSphereRadius();  graphics.setColor(getColor());  graphics.fillOval((int)(info.draw.x - radiusX),(int)(info.draw.y - radiusY),(int)(radiusX * 2),(int)(radiusY * 2));}  }
class C{  private static String readResourceProperty(String propertyKey){  Properties props=new Properties();  try (InputStream resourceAsStream=PlatformUtilities.class.getResourceAsStream("version.properties")){    if (resourceAsStream == null) {      logInfo("Version resource file not found at 'com/rapidminer/tools/version.properties'.");      return null;    } else {      props.load(resourceAsStream);    }  } catch (  IOException e) {    logWarn("Error reading version properties from resources file!" + e.getLocalizedMessage());  }  return props.getProperty(propertyKey);}  }
class C{  State lastChild(){  assert hasChildren() : "No outgoing transitions.";  return states[states.length - 1];}  }
class C{  private void updateMaxXDifference(){  if (indexList.size() < 2) {    maxXDifference=0;    return;  }  if (Math.abs((Double)indexList.get(indexList.size() - 1) - (Double)indexList.get(indexList.size() - 2)) > maxXDifference)   maxXDifference=Math.abs((Double)indexList.get(indexList.size() - 1) - (Double)indexList.get(indexList.size() - 2));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected float parseUnit() throws ParseException, IOException {  if (current == 'h') {    current=reader.read();    return 3600;  } else   if (current == 'm') {    current=reader.read();    if (current == 'i') {      current=reader.read();      if (current != 'n') {        reportUnexpectedCharacterError(current);      }      current=reader.read();      return 60;    } else     if (current == 's') {      current=reader.read();      return 0.001f;    } else {      reportUnexpectedCharacterError(current);    }  } else   if (current == 's') {    current=reader.read();  }  return 1;}  }
class C{  protected void update(DrawContext dc){  this.time=System.currentTimeMillis();  if (dc.getGLRuntimeCapabilities().isUseVertexBufferObject())   this.fillVerticesVBO(dc);}  }
class C{  public void removeMovementListener(final MovementListener listener){  movementListeners.remove(listener);}  }
class C{  public static int ENETRESET(){  return Errno.ENETRESET.intValue();}  }
class C{  public void testConnect(Properties info,boolean sslExpected) throws SQLException {  testConnect(info,sslExpected,"ssltestUser","");}  }
class C{  public static void exitMethod(int globalMethodId){  final Thread ct=Thread.currentThread();  if (ct == Agent.server || Thread.holdsLock(rl) || Thread.holdsLock(globalLock) || ct.getThreadGroup() == systemThreadGroup || ct == Transformer.transformerThread) {    return;  }  if (!enabled) {    return;  }synchronized (globalLock) {    int sessionIdOfMethod=globalMethodId >> 16;    if (sessionIdOfMethod != sessionId) {      return;    }    ThreadProfiler ti=null;synchronized (rl) {      ti=globalThreadInfos.get(ct);    }    if (ti != null) {      ti.exit0();    }  }}  }
class C{  public boolean isHelping(){  return this.help;}  }
class C{  public RowSummingExactUpdater(BayesIm bayesIm,Evidence evidence){  if (bayesIm == null) {    throw new NullPointerException();  }  this.bayesIm=bayesIm;  setEvidence(evidence);}  }
class C{  public NumberConverter(final boolean allowDecimals,final Object defaultValue){  super();  this.allowDecimals=allowDecimals;  this.setDefaultValue(defaultValue);}  }
class C{  public static String parseMinShouldMatch(final IndexSchema schema,final SolrParams params){  org.apache.solr.parser.QueryParser.Operator op=QueryParsing.getQueryParserDefaultOperator(schema,params.get(QueryParsing.OP));  return params.get(DisMaxParams.MM,op.equals(QueryParser.Operator.AND) ? "100%" : "0%");}  }
class C{  protected void clearEvents(){}  }
class C{  public boolean isLast() throws SQLException {  return fbFetcher.isLast();}  }
class C{  public void test_ticket_1105_quads_update6() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update6","ticket_1105_update6.rq","ticket_1105.trig");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SoftValueHashMap(){  hash=new HashMap();}  }
class C{  public void done(){  m_Data=null;}  }
class C{  private void cycleRepeat(){  if (mRepeatMode == REPEAT_NONE) {    setRepeatMode(REPEAT_ALL);  } else   if (mRepeatMode == REPEAT_ALL) {    setRepeatMode(REPEAT_CURRENT);    if (mShuffleMode != SHUFFLE_NONE) {      setShuffleMode(SHUFFLE_NONE);    }  } else {    setRepeatMode(REPEAT_NONE);  }}  }
class C{  public boolean matches(final HttpServletRequest hsRequest){  return getConditionMatch(hsRequest) != null;}  }
class C{  public BigdataSailUpdate prepareNativeSPARQLUpdate(final QueryLanguage ql,final String updateStr,final String baseURI) throws MalformedQueryException {  if (getTripleStore().isReadOnly())   throw new UnsupportedOperationException("Read only");  if (ql != QueryLanguage.SPARQL)   throw new UnsupportedOperationException(ql.toString());  if (log.isDebugEnabled()) {    log.debug(updateStr);  }  getSailConnection().flushStatementBuffers(true,true);  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseUpdate2(updateStr,baseURI);  return new BigdataSailUpdate(astContainer,this);}  }
class C{  private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  public static RefactoringStatus createInputWarningStatus(final Object element,final String name,final String id){  Assert.isNotNull(name);  Assert.isNotNull(id);  if (element != null)   return RefactoringStatus.createWarningStatus(Messages.format(RefactoringCoreMessages.InitializableRefactoring_input_not_exists,new String[]{JavaElementLabels.getTextLabel(element,JavaElementLabels.ALL_FULLY_QUALIFIED),name,id})); else   return RefactoringStatus.createWarningStatus(Messages.format(RefactoringCoreMessages.InitializableRefactoring_inputs_do_not_exist,new String[]{name,id}));}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  protected void generateBindToWidgetMethod(SourcePrinter srcWriter){  srcWriter.println("private void bindToWidget(Object widget, final String columnKey, final DataSourceRecord<?> dataSourceRecord) {");  JField[] fields=JClassUtils.getDeclaredFields(dtoType);  String elseStm="";  for (int i=0; i < fields.length; i++) {    JField field=fields[i];    String name=field.getName();    JType type=field.getType();    String typeName=type.getQualifiedSourceName();    if (type.isPrimitive() != null) {      JPrimitiveType jPrimitiveType=type.isPrimitive();      typeName=jPrimitiveType.getQualifiedBoxedSourceName();    }    srcWriter.println();    srcWriter.println(elseStm + "if(" + EscapeUtils.quote(name)+ ".equals(columnKey)){");    srcWriter.println("((" + HasValueChangeHandlers.class.getCanonicalName() + ") widget).addValueChangeHandler(");    srcWriter.println("new " + ValueChangeHandler.class.getCanonicalName() + "<"+ typeName+ ">(){");    srcWriter.println("public void onValueChange(" + ValueChangeEvent.class.getCanonicalName() + "<"+ typeName+ "> event){");    srcWriter.println(getProxySimpleName() + ".this.setValue(event.getValue(), columnKey, dataSourceRecord);");    srcWriter.println("}");    srcWriter.println("});");    srcWriter.println("}");    elseStm="else ";  }  srcWriter.println("}");}  }
class C{  public boolean rewriteExif(ByteBuffer buf,Collection<ExifTag> tags) throws IOException {  ExifModifier mod=null;  try {    mod=new ExifModifier(buf,this);    for (    ExifTag t : tags) {      mod.modifyTag(t);    }    return mod.commit();  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue02.class,args);}  }
class C{  public final static String encodeToString(byte[] sArr,boolean lineSep){  return new String(encodeToChar(sArr,lineSep));}  }
class C{  public boolean isEmpty(){  return this.elements.isEmpty();}  }
class C{  public synchronized boolean engineContainsAlias(String alias){  token.ensureValid();  return aliasMap.containsKey(alias);}  }
class C{  public static String parseString(String value){  if ((value.startsWith("\"")) && (value.endsWith("\"")) || (value.startsWith("'")) && (value.endsWith("'"))) {    if (value.length() > 1) {      if (value.indexOf('\\') != -1) {        return unescape(value.substring(1,value.length() - 1));      }      return value.substring(1,value.length() - 1);    }  }  throw new IllegalArgumentException("String value of '" + value + "' cannot be parsed");}  }
class C{  private Hop removeUnnecessaryReorgOperation(Hop parent,Hop hi,int pos){  ReOrgOp[] lookup=new ReOrgOp[]{ReOrgOp.TRANSPOSE,ReOrgOp.REV};  if (hi instanceof ReorgOp && HopRewriteUtils.isValidOp(((ReorgOp)hi).getOp(),lookup)) {    ReOrgOp firstOp=((ReorgOp)hi).getOp();    Hop hi2=hi.getInput().get(0);    if (hi2 instanceof ReorgOp && ((ReorgOp)hi2).getOp() == firstOp) {      Hop hi3=hi2.getInput().get(0);      HopRewriteUtils.removeChildReference(parent,hi);      HopRewriteUtils.addChildReference(parent,hi3,pos);      hi=hi3;      if (hi.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hi);      if (hi2.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hi2);      LOG.debug("Applied removeUnecessaryReorgOperation.");    }  }  return hi;}  }
class C{  public void updateContent(byte[] content,String mediaType) throws ForbiddenException, ServerException {  updateContent(new ByteArrayInputStream(content),mediaType);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String pn=getString(stack);  Widget w=getWidget(stack);  if (w != null)   return w.getProperty(WidgetMeta.getPropForName(pn));  return null;}  }
class C{  public CActionSelectChildren(final ZyGraph graph,final boolean showIcon){  super("Select successors of selection");  m_graph=Preconditions.checkNotNull(graph,"IE02830: graph argument can not be null");  if (showIcon) {    putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/selallchild_up.jpg")));  }  putValue(Action.SHORT_DESCRIPTION,"Select successors of selection");}  }
class C{  public boolean isJoined(){  return joined;}  }
class C{  public void register(int objectID,Object object){  if (object == null)   throw new IllegalArgumentException("object cannot be null.");  idToObject.put(objectID,object);  if (TRACE)   trace("kryonet","Object registered with ObjectSpace as " + objectID + ": "+ object);}  }
class C{  public String globalInfo(){  return "A stemmer based on the Lovins stemmer, described here:\n\n" + getTechnicalInformation().toString();}  }
class C{  @Override public void markAsMapped(Address start,int bytes){  final Address end=start.plus(bytes);  if (VERBOSE) {    Log.write("Pre-mapping [");    Log.write(start);    Log.write(":");    Log.write(end);    Log.writeln("]");  }  while (start.LT(end)) {    Address high=end.GT(slabLimit(start)) && !slabLimit(start).isZero() ? slabLimit(start) : end;    Address slab=slabAlignDown(start);    int startChunk=chunkIndex(slab,start);    int endChunk=chunkIndex(slab,chunkAlignUp(high));    if (VERBOSE) {      Log.write("  Pre-mapping chunks ");      Log.write(startChunk);      Log.write(":");      Log.write(endChunk);      Log.write(" in slab ");      Log.writeln(slabAlignDown(start));    }    byte[] mapped=slabTable(start);    for (int i=startChunk; i < endChunk; i++) {      if (VERBOSE) {        Log.write("    Pre-mapping chunk ");        Log.write(slabAlignDown(start));        Log.write("[");        Log.write(i);        Log.writeln("]");      }      mapped[i]=MAPPED;    }    start=high;  }}  }
class C{  public boolean ready() throws IOException {  return in.ready();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] createByteArrayFromC(Address stringAddress){  int length=strlen(stringAddress);  byte[] contents=new byte[length];  Memory.memcopy(Magic.objectAsAddress(contents),stringAddress,length);  return contents;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof BurlapRemote))   return false;  BurlapRemote remote=(BurlapRemote)obj;  return url.equals(remote.url);}  }
class C{  public boolean save(String whereClause,String trxName){  m_whereClause=whereClause;  return save(trxName);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return new Integer(sm.getPriority()); else   return null;}  }
class C{  public int size(){  rw.readLock().lock();  try {    int size=0;    for (    SortedSet<N> set : circle.values())     size+=set.size();    return size;  }  finally {    rw.readLock().unlock();  }}  }
class C{  public FrameSlot findFrameSlot(Object identifier){  CompilerAsserts.neverPartOfCompilation(NEVER_PART_OF_COMPILATION_MESSAGE);  return identifierToSlotMap.get(identifier);}  }
class C{  public StringReader convertToXHTML(InputStream input) throws IOException {  StringWriter output=new StringWriter();  TagNode node=getHtmlCleaner().clean(input,"UTF-8");  node.serialize(new SimpleXmlSerializer(getHtmlCleaner().getProperties()),output);  output.flush();  return new StringReader(output.toString());}  }
class C{  private void stopIndeterminate(){  animation.cancel();  ViewHelper.setX(progressView,0);  runAnimation=false;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean visit(ArrayType node){  return true;}  }
class C{  public void checkForNullKey(String key){  if (key == null) {    throw new NullPointerException();  }}  }
class C{  public ConnectionWrapper(MysqlPooledConnection mysqlPooledConnection,Connection mysqlConnection,boolean forXa) throws SQLException {  super(mysqlPooledConnection);  this.mc=mysqlConnection;  this.closed=false;  this.isForXa=forXa;  if (this.isForXa) {    setInGlobalTx(false);  }}  }
class C{  public void addMacro(Pair<String,String> macro){  for (  Pair<String,String> existingMacro : this.macros) {    if (existingMacro.getFirst().equals(macro.getFirst())) {      existingMacro.setSecond(macro.getSecond());      return;    }  }  this.macros.add(macro);  fireUpdate(this);}  }
class C{  public void TestFirstAndLastStopWord() throws Exception {  final String input="the of";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  CommonGramsFilter cgf=new CommonGramsFilter(wt,commonWords);  TokenFilter nsf=new CommonGramsQueryFilter(cgf);  assertTokenStreamContents(nsf,new String[]{"the_of"});}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public static void w(String tag,String s,Object... args){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));}  }
class C{  public void select(){  main.removeStyleName(resources.getCss().unSelectRecipe());  main.addStyleName(resources.getCss().selectRecipe());}  }
class C{  @Override @InService(PageServiceSync.class) public void afterDataFlush(PageServiceImpl tableService,int sequenceFlush){  super.afterDataFlush(tableService,sequenceFlush);  sweepStub(tableService);}  }
class C{  public void checkJenrl(Progress p){  try {    p.setPhase("Checking jenrl ...",iModel.variables().size());    for (    Lecture l1 : iModel.variables()) {      p.incProgress();      p.debug("Checking " + l1.getName() + " ...");      for (      Lecture l2 : iModel.variables()) {        if (l1.getId() < l2.getId()) {          double jenrl=0;          List<Student> jenrlStudents=new ArrayList<Student>();          for (Iterator i3=l1.students().iterator(); i3.hasNext(); ) {            Student student=(Student)i3.next();            if (l2.students().contains(student)) {              jenrl+=student.getJenrlWeight(l1,l2);              jenrlStudents.add(student);            }          }          boolean found=false;          for (          JenrlConstraint j : iModel.getJenrlConstraints()) {            Lecture a=(Lecture)j.first();            Lecture b=(Lecture)j.second();            if ((a.equals(l1) && b.equals(l2)) || (a.equals(l2) && b.equals(l1))) {              found=true;              if (j.getJenrl() != (int)Math.ceil(jenrl)) {                p.error("Wrong jenrl between " + getClassLabel(l1) + " and "+ getClassLabel(l2)+ " (constraint="+ j.getJenrl()+ " != computed="+ jenrl+ ").<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ getClassLabel(l1)+ " has students: "+ l1.students()+ "<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ getClassLabel(l2)+ " has students: "+ l2.students()+ "<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersection: "+ jenrlStudents);              }            }          }          if (!found && jenrl > 0) {            p.error("Missing jenrl between " + getClassLabel(l1) + " and "+ getClassLabel(l2)+ " (computed="+ jenrl+ ").<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ getClassLabel(l1)+ " has students: "+ l1.students()+ "<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ getClassLabel(l2)+ " has students: "+ l2.students()+ "<br>"+ "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersection: "+ jenrlStudents);          }        }      }    }  } catch (  Exception e) {    p.error("Unexpected exception: " + e.getMessage(),e);  }}  }
class C{  public final CC y(String y){  return corrPos(y,1);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void load(boolean readWrite){  KeyNamePair pp=(KeyNamePair)workflow.getSelectedItem();  if (pp == null)   return;  load(pp.getKey(),readWrite);}  }
class C{  public List enumConstants(){  return this.enumConstants;}  }
class C{  public MemberList<TMember> allMembers(ContainerType<?> type){  return allMembers(type,true,true);}  }
class C{  public boolean showParameters(){  return showParameters;}  }
class C{  public static void addInPlace(double[] input1,double[] input2) throws Exception {  if (input1.length != input2.length) {    throw new Exception("Lengths of arrays are not equal");  }  for (int i=0; i < input1.length; i++) {    input1[i]=input1[i] + input2[i];  }}  }
class C{  private int indexOf(String containerPath,String relativePath){  int length=this.containerPaths.length, index=(containerPath.hashCode() & 0x7FFFFFFF) % length;  String currentContainerPath;  while ((currentContainerPath=this.containerPaths[index]) != null) {    if (currentContainerPath.equals(containerPath)) {      String currentRelativePath=this.relativePaths[index];      if (encloses(currentRelativePath,relativePath,index))       return index;    }    if (++index == length) {      index=0;    }  }  return -1;}  }
class C{  public static void addGhoulArmorTextures(Item helmet,Item chestplate,Item leggings,Item boots,ResourceLocation res1,ResourceLocation res2){  addGhoulHelmetTexture(helmet,res1);  addGhoulChestplateTexture(chestplate,res1);  addGhoulLeggingsTexture(leggings,res2);  addGhoulBootsTexture(boots,res1);}  }
class C{  public K peekLast(){  K[] a=array;  int len=a.length;  return len == 0 ? null : a[len - 1];}  }
class C{  public ByteVector put1(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public WrappedByteBuffer fill(int size){  _autoExpand(size);  while (size-- > 0) {    _buf.put((byte)0);  }  return this;}  }
class C{  private String identifier(boolean firstCanBeNumber){  if (!cfml.isCurrentLetter() && !cfml.isCurrentSpecial()) {    if (!firstCanBeNumber)     return null; else     if (!cfml.isCurrentDigit())     return null;  }  boolean doUpper;  PageSource ps=pc == null ? null : pc.getCurrentPageSource();  if (ps != null)   doUpper=!isJson && ps.getDialect() == CFMLEngine.DIALECT_CFML && ((MappingImpl)ps.getMapping()).getDotNotationUpperCase(); else   doUpper=!isJson && ((ConfigWebImpl)config).getDotNotationUpperCase();  StringBuilder sb=new StringBuilder();  sb.append(doUpper ? cfml.getCurrentUpper() : cfml.getCurrent());  do {    cfml.next();    if (!(cfml.isCurrentLetter() || cfml.isCurrentDigit() || cfml.isCurrentSpecial())) {      break;    }    sb.append(doUpper ? cfml.getCurrentUpper() : cfml.getCurrent());  } while (cfml.isValidIndex());  return sb.toString();}  }
class C{  public OnStateChangedEvent(Object source,State<?,?> sourceState,State<?,?> targetState){  super(source);  this.sourceState=sourceState;  this.targetState=targetState;}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public MainModelPage(FormEditor editor){  super(editor,MainModelPage.ID,MainModelPage.TITLE);  this.helpId=IHelpConstants.MAIN_MODEL_PAGE;  this.imagePath="icons/full/choice_sc_obj.gif";  final long phySysMem=TLCRuntime.getInstance().getAbsolutePhysicalSystemMemory(1.0d);  int s=0;  double[] x=new double[6];  double[] y=new double[x.length];  y[s]=0d;  x[s++]=0d;  double lowerLimit=((TLCRuntime.MinFpMemSize / 1024 / 1024 * 4d) / phySysMem) / 2;  x[s]=lowerLimit;  y[s++]=0d;  final int currentYear=Calendar.getInstance().get(Calendar.YEAR);  double estimateSoftwareBloatInMBytes=Math.pow(2,((currentYear - 1993) / 2) + 2);  x[s]=lowerLimit * 2d;  y[s++]=1.0d;  x[s]=1.0d - (estimateSoftwareBloatInMBytes / phySysMem);  y[s++]=1.0d;  double upperLimit=1.0d - (estimateSoftwareBloatInMBytes / phySysMem) / 2;  x[s]=upperLimit;  y[s++]=0d;  x[s]=1d;  y[s]=0d;  linearInterpolator=new Interpolator(x,y);}  }
class C{  public HCardParser(Reader reader,String pageUrl) throws IOException {  this(new Gobble(reader).asString(),pageUrl);}  }
class C{  public static ADNode makeADTree(Instances instances){  ArrayList<Integer> nRecords=new ArrayList<Integer>(instances.numInstances());  for (int iRecord=0; iRecord < instances.numInstances(); iRecord++) {    nRecords.add(new Integer(iRecord));  }  return makeADTree(0,nRecords,instances);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ExportService(){  super("ExportService");}  }
class C{  protected ViewHandler(){}  }
class C{  public static boolean isAbsolute(File f){  boolean absolute=false;  try {    absolute=f.isAbsolute();  } catch (  SecurityException se) {    if (Trace.pathResolver) {      Trace.trace(se.getMessage());    }  }  return absolute;}  }
class C{  private void cmd_window(MQuery query){  if (query == null)   return;  AEnv.zoom(query);}  }
class C{  static final CompactSketch heapify2to3(Memory srcMem,long seed){  int memCap=(int)srcMem.getCapacity();  short seedHash=Util.computeSeedHash(seed);  short memSeedHash=srcMem.getShort(SEED_HASH_SHORT);  Util.checkSeedHashes(seedHash,memSeedHash);  if (memCap == 8) {    return new HeapCompactOrderedSketch(new long[0],true,seedHash,0,Long.MAX_VALUE);  }  int curCount=srcMem.getInt(RETAINED_ENTRIES_INT);  int mdLongs=srcMem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;  int reqBytesIn=(curCount + mdLongs) << 3;  validateInputSize(reqBytesIn,memCap);  long thetaLong=(mdLongs < 3) ? Long.MAX_VALUE : srcMem.getLong(THETA_LONG);  boolean empty=srcMem.isAnyBitsSet(FLAGS_BYTE,(byte)EMPTY_FLAG_MASK);  long[] compactOrderedCache=new long[curCount];  srcMem.getLongArray(mdLongs << 3,compactOrderedCache,0,curCount);  return new HeapCompactOrderedSketch(compactOrderedCache,empty,seedHash,curCount,thetaLong);}  }
class C{  public static Map<String,Object> buildOidcServerConfigurationModelForDiscovery(final Model model){  final Map<String,Object> m=Map.class.cast(model.asMap().get("entity"));  final String baseUrl=m.get("issuer").toString();  m.put("authorization_endpoint",baseUrl + "profile" + AuthorizeEndpoint.URL);  m.put("token_endpoint",baseUrl + "profile" + TokenEndpoint.URL);  m.put("userinfo_endpoint",baseUrl + "profile" + UserInfoEndpoint.URL);  m.put("jwks_uri",baseUrl + "profile" + JWKPublishingEndpoint.URL);  m.put("revocation_endpoint",baseUrl + "profile" + RevocationEndpoint.URL);  m.put("introspection_endpoint",baseUrl + "profile" + IntrospectionEndpoint.URL);  m.put("registration_endpoint",baseUrl + "profile" + DynamicRegistrationEndpoint.URL);  m.remove("service_documentation");  m.remove("op_policy_uri");  m.remove("op_tos_uri");  return m;}  }
class C{  protected void makeRoad(Shape shape,OMGeometry graphic,int num,int[] xPoints,int[] yPoints,int segment){  createRoadFromPoints(num,xPoints,yPoints,segment);}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  public static void positionCenterScreen(Window window){  positionScreen(window,SwingConstants.CENTER);}  }
class C{  private int removeStackTraceFrames(int element){  CompiledMethod compiledMethod=getCompiledMethod(element);  while ((element < compiledMethods.length) && (compiledMethod != null) && compiledMethod.getMethod().getDeclaringClass().getClassForType() == StackTrace.class) {    element++;    compiledMethod=getCompiledMethod(element);  }  return element;}  }
class C{  public static String escapeUnicode(String s){  int len=s.length();  int i=0;  while (i < len) {    char ch=s.charAt(i);    if (ch > 255) {      StringBuilder buf=new StringBuilder();      buf.append(s.substring(0,i));      while (i < len) {        ch=s.charAt(i);        if (ch > 255) {          buf.append("\\u");          buf.append(Character.forDigit((ch >> 12) % 16,16));          buf.append(Character.forDigit((ch >> 8) % 16,16));          buf.append(Character.forDigit((ch >> 4) % 16,16));          buf.append(Character.forDigit((ch) % 16,16));        } else {          buf.append(ch);        }        i++;      }      s=buf.toString();    } else {      i++;    }  }  return s;}  }
class C{  public Builder aliases(String... aliases){  this.aliases=ImmutableSet.copyOf(checkNotNull(aliases));  return this;}  }
class C{  public final static String formatRequestLine(final RequestLine reqline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatRequestLine(null,reqline).toString();}  }
class C{  public void testSPLForIB() throws IOException {  SimilarityBase sim=new IBSimilarity(new DistributionSPL(),new LambdaTTF(),new Normalization.NoNormalization());  correctnessTestCore(sim,2.2387237548828125f);}  }
class C{  private void launchAnimBackup(){  if (!backupRoundTripFirstLaunched) {    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  public SortedTableModel(TableModel model){  setModel(model);}  }
class C{  private ProgressDialog createProgressDialog(){  ProgressDialog dialog=new ProgressDialog(mActivity);  dialog.setIndeterminate(true);  dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);  dialog.setCanceledOnTouchOutside(false);  dialog.setCancelable(false);  return dialog;}  }
class C{  public static Service createFactory(){  Service fs=FactoryService.create(MigrationTaskService.class,State.class);  fs.toggleOption(ServiceOption.IDEMPOTENT_POST,true);  fs.toggleOption(ServiceOption.INSTRUMENTATION,true);  return fs;}  }
class C{  public static Map<String,Object> prodFindFeatureTypes(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String productId=(String)context.get("productId");  String productFeatureApplTypeId=(String)context.get("productFeatureApplTypeId");  if (UtilValidate.isEmpty(productFeatureApplTypeId)) {    productFeatureApplTypeId="SELECTABLE_FEATURE";  }  Locale locale=(Locale)context.get("locale");  String errMsg=null;  Set<String> featureSet=new LinkedHashSet<String>();  try {    List<GenericValue> features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId",productFeatureApplTypeId).orderBy("sequenceNum","productFeatureTypeId").cache(true).queryList();    for (    GenericValue v : features) {      featureSet.add(v.getString("productFeatureTypeId"));    }  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errProductFeatures",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features_errors",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  if (featureSet.size() == 0) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features",locale);    Debug.logWarning(errMsg + " for product " + productId,module);  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("featureSet",featureSet);  return result;}  }
class C{  public synchronized Reference<?> addFile(String fileName,Object file){  IOUtils.trace("TempFileDeleter.addFile",fileName,file);  PhantomReference<?> ref=new PhantomReference<Object>(file,queue);  refMap.put(ref,fileName);  deleteUnused();  return ref;}  }
class C{  @Override public String toString(){  String result="ClassifierSplitEvaluator: ";  if (m_Template == null) {    return result + "<null> classifier";  }  return result + m_Template.getClass().getName() + " "+ m_ClassifierOptions+ "(version "+ m_ClassifierVersion+ ")";}  }
class C{  private static void learn(){  int listSize=learningQueue.size();  for (int i=0; i < listSize; i++) {    Instance inst=learningQueue.poll();    if (inst != null)     learner.trainOnInstance(inst);  }}  }
class C{  public SabresException(int code,String msg,Throwable cause){  super(msg,cause);  this.code=code;}  }
class C{  private static float toVersionFloat(int[] javaVersions){  if (javaVersions == null || javaVersions.length == 0) {    return 0f;  }  if (javaVersions.length == 1) {    return javaVersions[0];  }  StringBuffer builder=new StringBuffer();  builder.append(javaVersions[0]);  builder.append('.');  for (int i=1; i < javaVersions.length; i++) {    builder.append(javaVersions[i]);  }  try {    return Float.parseFloat(builder.toString());  } catch (  Exception ex) {    return 0f;  }}  }
class C{  public void removeVersion(final SoftwareVersion version) throws LocalRepositoryException {  final String prefix="removeVersion=" + version + ": ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REMOVE,version.toString()};  exec(prefix,cmd);  _log.info(prefix + "Success!");}  }
class C{  private boolean shouldSendVersionEvents(GatewaySenderEventDispatcher disp) throws GatewaySenderException {  try {    GatewaySenderEventRemoteDispatcher remoteDispatcher=(GatewaySenderEventRemoteDispatcher)disp;    Connection conn=remoteDispatcher.getConnection(false);    if (conn != null) {      short remoteSiteVersion=conn.getWanSiteVersion();      if (Version.GFE_701.compareTo(remoteSiteVersion) <= 0) {        return true;      }    }  } catch (  GatewaySenderException e) {    Throwable cause=e.getCause();    if (cause instanceof IOException || e instanceof GatewaySenderConfigurationException || cause instanceof ConnectionDestroyedException) {      try {        int sleepInterval=GatewaySender.CONNECTION_RETRY_INTERVAL;        if (logger.isDebugEnabled()) {          logger.debug("Sleeping for {} milliseconds",sleepInterval);        }        Thread.sleep(sleepInterval);      } catch (      InterruptedException ie) {        if (logger.isDebugEnabled()) {          logger.debug(ie.getMessage(),ie);        }      }    }    throw e;  }  return false;}  }
class C{  private static String toCookieDate(Date date){  TimeZone tz=TimeZone.getTimeZone(GMT_TIME_ZONE_ID);  DateFormat fmt=new SimpleDateFormat(COOKIE_DATE_FORMAT_STRING,Locale.US);  fmt.setTimeZone(tz);  return fmt.format(date);}  }
class C{  public DeviceDisplayPanel(){  this(1.0);}  }
class C{  @Override public int size(){  purgeBeforeRead();  return super.size();}  }
class C{  public static WarArchive open(InputStream is) throws IOException {  return new DefaultWarArchive(is);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void resetIvParameter(final byte[] iv,final int offset){  try {    encryptCipher.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv,offset,KEY_LENGTH));  } catch (  InvalidKeyException|InvalidAlgorithmParameterException e) {    throw new RuntimeException("unexpected",e);  }}  }
class C{  public Vertex mostConscious(Vertex type,float min,boolean inverse){  return nextMostConscious(type,(Vertex)null,min,inverse);}  }
class C{  public static VOTriggerProcessParameter toVOTriggerProcessParameter(TriggerProcessParameter parameter) throws OperationNotPermittedException {  if (parameter == null) {    return null;  }  Map<org.oscm.types.enumtypes.TriggerProcessParameterName,Class<?>> PARAM_MAPPING=new HashMap<org.oscm.types.enumtypes.TriggerProcessParameterName,Class<?>>(){    private static final long serialVersionUID=6650406068235081279L;{      put(org.oscm.types.enumtypes.TriggerProcessParameterName.PRODUCT,VOService.class);    }  };  VOTriggerProcessParameter result=new VOTriggerProcessParameter();  result.setType(TriggerProcessParameterType.valueOf(parameter.getName().name()));  result.setTriggerProcessKey(Long.valueOf(parameter.getTriggerProcess().getKey()));  result.setValue(parameter.getValue(PARAM_MAPPING.get(parameter.getName())));  result.setKey(parameter.getKey());  result.setVersion(parameter.getVersion());  return result;}  }
class C{  public static void main(String[] args){  TestDeprecatedDocs tester=new TestDeprecatedDocs();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public TrainingSetPanel(final Trainable trainable,final int numVisibleColumnsPerTable){  inputPanel=new DataPanel(trainable.getInputNeurons(),trainable.getTrainingSet().getInputDataMatrix(),numVisibleColumnsPerTable,"Input data");  targetPanel=new DataPanel(trainable.getOutputNeurons(),trainable.getTrainingSet().getTargetDataMatrix(),numVisibleColumnsPerTable,"Target data");  init();}  }
class C{  public void put(String fieldName,boolean v){  _put(fieldName,booleanNode(v));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override protected Object convertGroup(Group group){  Object obj;  try {    obj=pojoClass.newInstance();  } catch (  InstantiationException|IllegalAccessException ex) {    throw new RuntimeException(ex);  }  for (int i=0; i < activeFieldInfos.size(); i++) {    try {      ParquetFilePOJOReader.ActiveFieldInfo afi=activeFieldInfos.get(i);switch (afi.primitiveTypeName) {case BOOLEAN:        Boolean booleanVal=Boolean.parseBoolean(group.getValueToString(afi.fieldIndex,0));      ((PojoUtils.SetterBoolean<Object>)afi.setter).set(obj,booleanVal);    break;case INT32:  Integer intVal=Integer.parseInt(group.getValueToString(afi.fieldIndex,0));((PojoUtils.SetterInt<Object>)afi.setter).set(obj,intVal);break;case INT64:Long longVal=Long.parseLong(group.getValueToString(afi.fieldIndex,0));((PojoUtils.SetterLong<Object>)afi.setter).set(obj,longVal);break;case FLOAT:Float floatVal=Float.parseFloat(group.getValueToString(afi.fieldIndex,0));((PojoUtils.SetterFloat<Object>)afi.setter).set(obj,floatVal);break;case DOUBLE:Double doubleVal=Double.parseDouble(group.getValueToString(afi.fieldIndex,0));((PojoUtils.SetterDouble<Object>)afi.setter).set(obj,doubleVal);break;case BINARY:((PojoUtils.Setter<Object,String>)afi.setter).set(obj,group.getValueToString(afi.fieldIndex,0));break;default :throw new ParquetEncodingException("Unsupported column type: " + afi.primitiveTypeName);}} catch (InvalidRecordException e) {logger.error("Field not found in schema {} ",e);}}return obj;}  }
class C{  public TraceStateExitedItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @ReactMethod public void findSubviewIn(final int reactTag,final ReadableArray point,final Callback callback){  mOperationsQueue.enqueueFindTargetForTouch(reactTag,Math.round(PixelUtil.toPixelFromDIP(point.getDouble(0))),Math.round(PixelUtil.toPixelFromDIP(point.getDouble(1))),callback);}  }
class C{  private void drawEdge(Graphics g){  Graphics2D g2d=(Graphics2D)g;  getConnectedPoints().getFrom().translate(-getLocation().x,-getLocation().y);  getConnectedPoints().getTo().translate(-getLocation().x,-getLocation().y);  setClickRegion(null);  int x1=getConnectedPoints().getFrom().x;  int y1=getConnectedPoints().getFrom().y;  int x2=getConnectedPoints().getTo().x;  int y2=getConnectedPoints().getTo().y;  g2d.setStroke(new BasicStroke(getStrokeWidth() + 0.000001f));  g2d.drawLine(x1,y1,x2,y2);  if (!isShowAdjacenciesOnly()) {    drawEndpoints(getConnectedPoints(),g);  }  firePropertyChange("newPointPair",null,getConnectedPoints());}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,@Nullable Throwable t){  return buildPatch(stage,subStage,null == t ? null : Utils.toServiceErrorResponse(t));}  }
class C{  public void unfollow(final String followerId,final String followingId,final int followingType) throws RepositoryException {  followRepository.removeByFollowerIdAndFollowingId(followerId,followingId);  if (Follow.FOLLOWING_TYPE_C_TAG == followingType) {    final JSONObject tag=tagRepository.get(followingId);    if (null == tag) {      LOGGER.log(Level.ERROR,"Not found tag [id={0}] to unfollow",followingId);      return;    }    tag.put(Tag.TAG_FOLLOWER_CNT,tag.optInt(Tag.TAG_FOLLOWER_CNT) - 1);    if (tag.optInt(Tag.TAG_FOLLOWER_CNT) < 0) {      tag.put(Tag.TAG_FOLLOWER_CNT,0);    }    tagRepository.update(followingId,tag);  } else   if (Follow.FOLLOWING_TYPE_C_ARTICLE == followingType) {    final JSONObject article=articleRepository.get(followingId);    if (null == article) {      LOGGER.log(Level.ERROR,"Not found article [id={0}] to unfollow",followingId);      return;    }    article.put(Article.ARTICLE_COLLECT_CNT,article.optInt(Article.ARTICLE_COLLECT_CNT) - 1);    if (article.optInt(Article.ARTICLE_COLLECT_CNT) < 0) {      article.put(Article.ARTICLE_COLLECT_CNT,0);    }    articleRepository.update(followingId,article);  }}  }
class C{  public static void finalizeFirstRunFlowState(Context context,Bundle data){  FirstRunStatus.setFirstRunFlowComplete(context,true);  setFirstRunFlowSignInAccountName(context,data.getString(FirstRunActivity.RESULT_SIGNIN_ACCOUNT_NAME));  setFirstRunFlowSignInSetupSync(context,data.getBoolean(FirstRunActivity.RESULT_SHOW_SYNC_SETTINGS));}  }
class C{  public String numToSelectTipText(){  return "Specify the number of attributes to retain. The default value " + "(-1) indicates that all attributes are to be retained. Use either " + "this option or a threshold to reduce the attribute set.";}  }
class C{  @Override public void write(String str,int off,int len){  int newcount=count + len;  if (newcount > buf.length) {    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));  }  str.getChars(off,off + len,buf,count);  count=newcount;}  }
class C{  private boolean checkAndUpdateZone(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,CIMObjectPath zonesetPath,Map<String,Zone> zonesInFabric,ZoneUpdate zoneUpdate){  boolean success=false;  ZoneMember curMember=null;  try {    if (zonesInFabric.containsKey(zoneUpdate.getName())) {      _log.info("Start update zone {}",zoneUpdate.getName());      Zone zone=zonesInFabric.get(zoneUpdate.getName());      Map<String,ZoneMember> members=getZoneMembersMap(client,zone.getName(),(CIMObjectPath)zone.getCimObjectPath());      if (zoneUpdate.getRemoveZones() != null) {        for (        ZoneMember remMember : zoneUpdate.getRemoveZones()) {          curMember=members.containsKey(remMember.getAlias()) ? members.get(remMember.getAlias()) : members.get(remMember.getAddress());          if (curMember != null && curMember.isAliasType() && !StringUtils.isEmpty(remMember.getAlias())) {            _log.info("Removing alia smember {}",remMember.getAlias());            _smisHelper.removeZoneOrAliasMember(client,(CIMObjectPath)curMember.getCimAliasPath(),(CIMObjectPath)zone.getCimObjectPath(),true);            members.remove(curMember.getAlias());            members.remove(curMember.getAddress());            success=true;          } else           if (curMember != null && !curMember.isAliasType() && !StringUtils.isEmpty(remMember.getAddress())) {            _log.info("Removing WWN member {}",remMember.getAddress());            _smisHelper.removeZoneOrAliasMember(client,(CIMObjectPath)curMember.getCimObjectPath(),(CIMObjectPath)zone.getCimObjectPath(),false);            members.remove(curMember.getAlias());            members.remove(curMember.getAddress());            success=true;          } else {            _log.warn("Did not remove zone member with alias " + remMember.getAlias() + " and WWN "+ remMember.getAddress()+ " because it was not found.");          }        }      }      if (zoneUpdate.getAddZones() != null) {        for (        ZoneMember addMember : zoneUpdate.getAddZones()) {          curMember=members.containsKey(addMember.getAlias()) ? members.get(addMember.getAlias()) : members.get(addMember.getAddress());          if (curMember == null) {            String name=addMember.hasAlias() ? addMember.getAlias() : addMember.getAddress();            _log.info("Adding zone member {} ",name);            _smisHelper.addZoneOrAliasMember(client,zoneServiceIns,fabricWwn,(CIMObjectPath)zone.getCimObjectPath(),name);            members.put(name,addMember);            success=true;          } else {            _log.warn("Did not add zone member with alias " + addMember.getAlias() + " and WWN "+ addMember.getAddress()+ " because it already exists.");          }        }      }      if (members.isEmpty()) {        _log.error("Deleting Zone " + zoneUpdate.getName() + " because it is now empty.");        _smisHelper.removeZone(client,zone);      }    } else {      _log.error("Failed to update zones: " + zoneUpdate.getName() + ". The zone was not found in the active zoneset");      throw NetworkDeviceControllerException.exceptions.updateZonesStrategyFailedNotFound(zoneUpdate.getName());    }  } catch (  WBEMException ex) {    _log.error("Failed to update zone: " + zoneUpdate.getName() + ". Error message"+ ex.getLocalizedMessage(),ex);    throw NetworkDeviceControllerException.exceptions.updateZonesStrategyFailed(ex);  }  return success;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endMission(){  setAndInitNextState(State.END_SCREEN);}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  File file=new File(destination);  if (file.exists()) {    file.delete();  }  try {    FileUtils.writeStringToFile(file,stdout);  } catch (  IOException e) {    throw new ToolParseFailureException(e);  }  return destination;}  }
class C{  public void addAction(IAction action){  menuManager.add(action);}  }
class C{  public void testFailedOnInvalidOuterJoinSequence(){  checkFail("{ojt OUTER JOIN t2 ON t.id=t2.id}");  checkFail("select {oj t OUTER JOIN ({oj t2 OUTER JOIN t3 ON t2.id=t3.id) ON t.id=t2.id} from SomeTable;");  checkFail("select oj t OUTER JOIN t2 ON t.id=t2.id} from SomeTable;");}  }
class C{  public String next(){  return nextLine();}  }
class C{  private boolean destroyCert(byte[] cka_id) throws PKCS11Exception, KeyStoreException {  Session session=null;  try {    session=token.getOpSession();    THandle h=getTokenObject(session,ATTR_CLASS_CERT,cka_id,null);    if (h.type != ATTR_CLASS_CERT) {      return false;    }    token.p11.C_DestroyObject(session.id(),h.handle);    if (debug != null) {      debug.println("destroyCert destroyed cert with CKA_ID [" + getID(cka_id) + "]");    }    return true;  }  finally {    token.releaseSession(session);  }}  }
class C{  public CLittleEndiannessAction(final JHexView hexView){  super("Little Endian");  this.hexView=Preconditions.checkNotNull(hexView,"IE01420: Memory viewer argument can not be null");}  }
class C{  private static void wrap(List<Sequence<IString>> sequences){  for (int i=0, sz=sequences.size(); i < sz; ++i) {    sequences.set(i,Sequences.wrapStartEnd(sequences.get(i),TokenUtils.START_TOKEN,TokenUtils.END_TOKEN));  }}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  public void emit(int count,int value){  numEntries+=count;  breaks();  emitUC(count);  emitUC(value + translate);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.941 -0500",hash_original_method="03C848B66796F8DBDE7832677AAFA935",hash_generated_method="4F616F61747CD5D98531C671A2ACFE93") public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static TableDataInsertAllResponse streamRow(final Bigquery bigquery,final String projectId,final String datasetId,final String tableId,final TableDataInsertAllRequest.Rows row) throws IOException {  return bigquery.tabledata().insertAll(projectId,datasetId,tableId,new TableDataInsertAllRequest().setRows(Collections.singletonList(row))).execute();}  }
class C{  public DefaultMetaData(final Long id){  this.id=id;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:    setDeclaredElementType((TypeRef)newValue);  return;case TypesPackage.PRIMITIVE_TYPE__ASSIGNMENT_COMPATIBLE:setAssignmentCompatible((PrimitiveType)newValue);return;case TypesPackage.PRIMITIVE_TYPE__AUTOBOXED_TYPE:setAutoboxedType((TClassifier)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void startAppsSearch(){  if (mSearchBarController != null) {    mSearchBarController.focusSearchField();  }}  }
class C{  private void applyChannelCoupling(ChannelElement cc,int type,int elemId,int couplingPoint,boolean applyDependentCoupling){  for (int i=0; i < MAX_ELEM_ID; i++) {    ChannelElement cce=ac.che[TYPE_CCE][i];    if (cce != null && cce.coup.couplingPoint == couplingPoint) {      int index=0;      ChannelCoupling coup=cce.coup;      for (int c=0; c <= coup.numCoupled; c++) {        if (coup.type[c] == type && coup.idSelect[c] == elemId) {          if (coup.chSelect[c] != 1) {            applyCouplingMethod(cc.ch[0],cce,index,applyDependentCoupling);            if (coup.chSelect[c] != 0) {              index++;            }          }          if (coup.chSelect[c] != 2) {            applyCouplingMethod(cc.ch[1],cce,index++,applyDependentCoupling);          }        } else {          index+=1 + (coup.chSelect[c] == 3 ? 1 : 0);        }      }    }  }}  }
class C{  @Dev public EquipItemAction(final String itemName,final int amount,final boolean bind){  this.itemName=itemName;  this.amount=amount;  this.bind=bind;}  }
class C{  private Coord findClosestCoordInMap(Coord origin,Map<String,Coord> facilityMap){  Coord closest=null;  double closestDistance=Double.MAX_VALUE;  for (  Coord coord : facilityMap.values()) {    double distance=CoordUtils.calcEuclideanDistance(coord,origin);    if (distance < closestDistance) {      closestDistance=distance;      closest=coord;    }  }  return closest;}  }
class C{  public void positionEnd(){  _log.debug("positionEnd: ");}  }
class C{  private static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public static long generate(long crc,byte ch){  return (crc >>> 8) ^ CRC_TABLE[((int)crc ^ ch) & 0xff];}  }
class C{  public void deleteCredentials(final URI targetUri){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("SecretCache::deleteCredentials");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    if (_cache.containsKey(targetName) && _cache.get(targetName) instanceof Credential) {      _cache.remove(targetName);    }  }}  }
class C{  public V removeKey(K1 key1,K2 key2){  return super.remove(new Pair<K1,K2>(key1,key2));}  }
class C{  public static double coshm1(double value){  if (value < 0.0) {    value=-value;  }  if (value < LOG_TWO_POW_27) {    if (value < TWO_POW_N27) {      if (value == 0.0) {        return value;      }      return 0.5 * value * value;    } else {      return 0.5 * (expm1(value) + expm1(-value));    }  } else   if (value < LOG_DOUBLE_MAX_VALUE) {    return 0.5 * exp(value) - 1.0;  } else {    final double t=exp(value * 0.5);    return 0.5 * t * t;  }}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public UmmalquraCalendar(Locale aLocale){  this(TimeZone.getDefault(),aLocale);}  }
class C{  protected boolean isBroadcastChanged(){  return true;}  }
class C{  public void popElemAttributeSet(){  m_attrSetStack.pop();}  }
class C{  public ArrayIndexOutOfBoundsException(String s){  super(s);}  }
class C{  public void serialize(final Serializer serializer,final int version,final TData data){  this.extensions.stream().filter(null).forEach(null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected static ArrayList<? extends Position> subdividePositions(Globe globe,ArrayList<? extends Position> positions,double maxLength,boolean followTerrain,int pathType,int start,int count){  if (positions == null || positions.size() < start + count)   return positions;  ArrayList<Position> newPositions=new ArrayList<Position>();  Position pos1=positions.get(start);  if (followTerrain)   newPositions.add(new Position(pos1,globe.getElevation(pos1.getLatitude(),pos1.getLongitude()))); else   newPositions.add(pos1);  for (int i=1; i < count; i++) {    Position pos2=positions.get(start + i);    double arcLengthRadians=LatLon.greatCircleDistance(pos1,pos2).radians;    double arcLength=arcLengthRadians * globe.getRadiusAt(LatLon.interpolate(.5,pos1,pos2));    if (arcLength > maxLength) {      Angle segmentAzimuth=null;      Angle segmentDistance=null;      int steps=(int)Math.ceil(arcLength / maxLength);      for (int j=1; j < steps; j++) {        float s=(float)j / steps;        LatLon destLatLon;        if (pathType == Polyline.LINEAR) {          destLatLon=LatLon.interpolate(s,pos1,pos2);        } else         if (pathType == Polyline.RHUMB_LINE) {          if (segmentAzimuth == null) {            segmentAzimuth=LatLon.rhumbAzimuth(pos1,pos2);            segmentDistance=LatLon.rhumbDistance(pos1,pos2);          }          destLatLon=LatLon.rhumbEndPosition(pos1,segmentAzimuth.radians,s * segmentDistance.radians);        } else {          if (segmentAzimuth == null) {            segmentAzimuth=LatLon.greatCircleAzimuth(pos1,pos2);            segmentDistance=LatLon.greatCircleDistance(pos1,pos2);          }          destLatLon=LatLon.greatCircleEndPosition(pos1,segmentAzimuth.radians,s * segmentDistance.radians);        }        double elevation;        if (followTerrain)         elevation=globe.getElevation(destLatLon.getLatitude(),destLatLon.getLongitude()); else         elevation=pos1.getElevation() * (1 - s) + pos2.getElevation() * s;        newPositions.add(new Position(destLatLon,elevation));      }    }    if (followTerrain)     newPositions.add(new Position(pos2,globe.getElevation(pos2.getLatitude(),pos2.getLongitude()))); else     newPositions.add(pos2);    pos1=pos2;  }  return newPositions;}  }
class C{  public void addRecentMessageUids(Collection<MessageUid> uids){  recentMessageUids.addAll(uids);}  }
class C{  public Result invoke(String opName,Geometry geometry,Object[] args) throws Exception {  boolean isBufferOp=opName.equalsIgnoreCase("buffer");  if (!isBufferOp) {    return chainOp.invoke(opName,geometry,args);  }  parseArgs(args);  return invokeBufferOpValidated(geometry,args);}  }
class C{  private void adjustTransformation(){  Map map=getMapEnv().getMap();  List<String> locs=map.getLocations();  double minX=Double.POSITIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  for (  String loc : locs) {    Point2D xy=map.getPosition(loc);    if (xy.getX() < minX)     minX=xy.getX();    if (xy.getY() < minY)     minY=xy.getY();    if (xy.getX() > maxX)     maxX=xy.getX();    if (xy.getY() > maxY)     maxY=xy.getY();  }  this.setBorder(20,20,20,100);  adjustTransformation(minX,minY,maxX,maxY);}  }
class C{  public static double deepInstanceOf(@DottedClassName String x,@DottedClassName String y) throws ClassNotFoundException {  return Analyze.deepInstanceOf(x,y);}  }
class C{  private ASCII85Decode(ByteBuffer buf){  this.buf=buf;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.079 -0500",hash_original_method="918ECF249887C4F016B37391BBEA278F",hash_generated_method="301F5C320490EF5686C8A09564CA9E06") public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    if (cookie instanceof ClientCookie && !((ClientCookie)cookie).containsAttribute(ClientCookie.VERSION_ATTR)) {      throw new MalformedCookieException("Violates RFC 2965. Version attribute is required.");    }  }}  }
class C{  @Override public QueueReceiver createReceiver(final Queue queue,final String messageSelector) throws JMSException {  lock();  try {    QueueSession session=getQueueSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createReceiver " + session + " queue="+ queue+ " selector="+ messageSelector);    }    QueueReceiver result=session.createReceiver(queue,messageSelector);    result=new ActiveMQRAQueueReceiver(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdReceiver " + session + " receiver="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public Reduction asReduction(){  return this;}  }
class C{  public void handleAlarm(Alarm alarm){  _isDead=true;  abort();}  }
class C{  protected Object convertKey(final Object key){  return key == null ? NULL : key;}  }
class C{  public boolean handleMessage(Message m,Object object){  if (m.getType().equals(M_MIGRATION)) {    if (!(object instanceof ExchangerData)) {      output.error("Migration data must be sent in ExchangerData format.");      return false;    }    if (!(exchanger instanceof DRMExchanger)) {      output.error("Only ec.drm.DRMExchanger can handle DRM migration messages.");      return false;    }    ((DRMExchanger)exchanger).storeData((ExchangerData)object);  } else   if (m.getType().equals(M_STATS)) {    if (!(object instanceof StatisticsData)) {      output.error("Stats data must be sent in StatisticsData format.");      return false;    }    if (!(statistics instanceof DRMStatistics)) {      output.error("Only ec.drm.DRMStatistics can handle DRM stats messages.");      return false;    }    ((DRMStatistics)statistics).printStatistics(this,(StatisticsData)object);  } else   if (m.getType().equals(M_FINISHED)) {    output.message(m.getSender().name + " has finished.");  } else   if (m.getType().equals(M_IDEAL_FOUND)) {    output.message(m.getSender().name + " found an ideal individual.");  } else   if (m.getType().equals(M_PING)) {    m.setReply(new Long(System.currentTimeMillis()));  } else   return false;  return true;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public SAXRecords ts2saxByChunking(double[] ts,int paaSize,double[] cuts,double nThreshold) throws SAXException {  SAXRecords saxFrequencyData=new SAXRecords();  double[] normalizedTS=tsProcessor.znorm(ts,nThreshold);  double[] paa=tsProcessor.paa(normalizedTS,paaSize);  char[] currentString=tsProcessor.ts2String(paa,cuts);  for (int i=0; i < currentString.length; i++) {    char c=currentString[i];    int pos=(int)Math.floor(i * ts.length / currentString.length);    saxFrequencyData.add(String.valueOf(c).toCharArray(),pos);  }  return saxFrequencyData;}  }
class C{  @Override public void onResume(){  super.onResume();  this.isPaused=false;}  }
class C{  public static IParseResult parseModule(IResource resource,IProgressMonitor monitor,boolean installMarkers,boolean updateDependencies){  ModuleParserLauncher moduleParser=new ModuleParserLauncher();  ParseResult result=moduleParser.parseModule(resource,monitor,installMarkers,updateDependencies);  return result;}  }
class C{  public static String hypenToCamelNotation(String str){  if (isEmpty(str))   return str;  StringBuilder sb=new StringBuilder();  int len=str.length();  char c;  for (int i=0; i < str.length(); i++) {    c=str.charAt(i);    if (c == '-') {      if (len > ++i)       sb.append(Character.toUpperCase(str.charAt(i)));    } else     sb.append(c);  }  return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2, val3;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  double conversionFactor=1;  double divideElevToAdd=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  conversionFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input files must have the same dimensions, i.e. number of " + "rows and columns.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    WhiteboxRaster totalUpslopeDivideElev=new WhiteboxRaster(outputHeader.replace(".dep","_temp4.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalUpslopeDivideElev.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;                divideElevToAdd=DEM.getValue(y,x);              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);                divideElevToAdd=totalUpslopeDivideElev.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                totalUpslopeDivideElev.setValue(y,x,totalUpslopeDivideElev.getValue(y,x) + divideElevToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    totalUpslopeDivideElev.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    double[] data4=null;    double[] data5=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      data4=totalUpslopeDivideElev.getRowValues(row);      data5=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            val2=(data4[col] / data1[col] - data5[col]) * conversionFactor;            val3=Math.atan(val2 / val) * radToDeg;            output.setValue(row,col,val3);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    totalUpslopeDivideElev.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void calculateContrasts(double kappa){  if (!isExternal()) {    ContrastedTraitNode left=(ContrastedTraitNode)getChild(0);    ContrastedTraitNode right=(ContrastedTraitNode)getChild(1);    left.calculateContrasts(kappa);    right.calculateContrasts(kappa);    double leftNodeBranchVariance=left.nodeVariance + Math.pow(getHeight() - left.getHeight(),kappa);    double rightNodeBranchVariance=right.nodeVariance + Math.pow(getHeight() - right.getHeight(),kappa);    contrastVariance=leftNodeBranchVariance + rightNodeBranchVariance;    nodeVariance=(leftNodeBranchVariance * rightNodeBranchVariance) / (leftNodeBranchVariance + rightNodeBranchVariance);    double invVarLeft=1.0 / leftNodeBranchVariance;    double invVarRight=1.0 / rightNodeBranchVariance;    for (int i=0; i < getTraitCount(); i++) {      contrast[i]=left.traitValue[i].getDifference(right.traitValue[i]);      traitValue[i]=left.traitValue[i].getWeightedMean(invVarLeft,left.traitValue[i],invVarRight,right.traitValue[i]);      tree.setNodeAttribute(node,traitNames[i],traitValue[i]);    }  }}  }
class C{  public static boolean isBodyNormalEnabled(){  return bodyNormalEnabled;}  }
class C{  public void clear(){  if (documents != null) {    documents.clear();  }  if (deleteById != null) {    deleteById.clear();  }  if (deleteQuery != null) {    deleteQuery.clear();  }}  }
class C{  public static String join(CharSequence delimiter,Object[] tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  @Override public boolean add(final E value){  return super.add(value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("invalid^Name","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  protected static void log(String s){  Log.d(TAG,s);}  }
class C{  public void addAll(Collection<? extends E> c){  for (  E element : c)   add(element);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(){  return (ImmutableRangeMap<K,V>)EMPTY;}  }
class C{  public boolean isOneEditDistance(String s,String t){  int m=s.length();  int n=t.length();  if (m > n) {    return isOneEditDistance(t,s);  }  for (int i=0; i < m; i++) {    if (s.charAt(i) == t.charAt(i)) {      continue;    }    if (m == n) {      return s.substring(i + 1).equals(t.substring(i + 1));    }    if (m < n) {      return s.substring(i).equals(t.substring(i + 1));    }  }  return m != n;}  }
class C{  @Override public MemChunkHolder<SysMemAllocator> resizeChunk(MemChunkHolder<SysMemAllocator> mholder,long size){  MemChunkHolder<SysMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    if (currentMemory.get() + size > maxStoreCapacity) {      if (m_activegc) {        m_chunkcollector.waitReclaimCoolDown(m_gctimeout);      }    }    if (currentMemory.get() + size <= maxStoreCapacity) {      Long addr=m_unsafe.reallocateMemory(mholder.get(),size);      if (0 != addr) {        mholder.clear();        mholder.destroy();        ret=new MemChunkHolder<SysMemAllocator>(this,addr,size);        if (ac) {          m_chunkcollector.register(ret);        }      }    }  }  return ret;}  }
class C{  public void tagDefineBitsJPEG3(int id,byte[] imageData,byte[] alphaData) throws IOException {  startTag(SWFConstants.TAG_DEFINEBITSJPEG3,id,true);  out.writeUI32(imageData.length);  out.write(imageData);  out.write(alphaData);  completeTag();}  }
class C{  public CROSS_JOIN CROSS_JOIN(String tableToJoin){  return new CROSS_JOIN(this,tableToJoin);}  }
class C{  public void testSimpleFragmentCleanup() throws Exception {  File logDir=prepareLogDir("testSimpleFragmentCleanup");  DiskLog log=openLog(logDir,false,3000);  LogConnection conn=log.connect(false);  for (short i=0; i < 3; i++) {    THLEvent e=createTHLEvent(0,i,false,"test");    conn.store(e,false);  }  log.release();  log=null;  conn=null;  DiskLog log2=openLog(logDir,false);  assertEquals("Max seqno in log should be -1",-1,log2.getMaxSeqno());  log2.validate();  LogConnection conn2=log2.connect(false);  assertTrue("Seek last full xact",conn2.seek(0,(short)0));  THLEvent e=conn2.next(false);  if (e != null) {    throw new Exception("Found transaction that should have been cleaned up!  seqno=" + e.getSeqno() + " fragno="+ e.getFragno());  }  log2.release();}  }
class C{  private Path resolve(DatasetDescription aDataset,ArtifactDescription aArtifact){  if (aArtifact.isShared()) {    return cacheRoot.resolve("shared").resolve(aArtifact.getSha1()).resolve(aArtifact.getName());  } else {    return resolve(aDataset).resolve(aArtifact.getName());  }}  }
class C{  public boolean verifyChallengeToken(InetSocketAddress address,int token){  return Objects.equals(challengeTokens.get(address),token);}  }
class C{  public void elementAttributesProcessed(String name,Properties extraAttributes,String systemId,int lineNr) throws Exception {  this.delegate.elementAttributesProcessed(name,extraAttributes,systemId,lineNr);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public boolean isLocalSwapDatastoreSupported(){  return localSwapDatastoreSupported;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Version          : " + Integer.toHexString(getVersion())+ "\n");  buf.append(indent + "Revision         : " + Integer.toHexString(getFontRevision())+ "\n");  buf.append(indent + "ChecksumAdj      : " + Integer.toHexString(getChecksumAdjustment())+ "\n");  buf.append(indent + "MagicNumber      : " + Integer.toHexString(getMagicNumber())+ "\n");  buf.append(indent + "Flags            : " + Integer.toBinaryString(getFlags())+ "\n");  buf.append(indent + "UnitsPerEm       : " + getUnitsPerEm()+ "\n");  buf.append(indent + "Created          : " + new Date(getCreated())+ "\n");  buf.append(indent + "Modified         : " + new Date(getModified())+ "\n");  buf.append(indent + "XMin             : " + getXMin()+ "\n");  buf.append(indent + "XMax             : " + getXMax()+ "\n");  buf.append(indent + "YMin             : " + getYMin()+ "\n");  buf.append(indent + "YMax             : " + getYMax()+ "\n");  buf.append(indent + "MacStyle         : " + Integer.toBinaryString(getMacStyle())+ "\n");  buf.append(indent + "LowestPPem       : " + getLowestRecPPem()+ "\n");  buf.append(indent + "FontDirectionHint: " + getFontDirectionHint()+ "\n");  buf.append(indent + "IndexToLocFormat : " + getIndexToLocFormat()+ "\n");  buf.append(indent + "GlyphDataFormat  : " + getGlyphDataFormat()+ "\n");  return buf.toString();}  }
class C{  protected void igfs(VisorNodeDataCollectorJobResult res){  try {    IgfsProcessorAdapter igfsProc=ignite.context().igfs();    for (    IgniteFileSystem igfs : igfsProc.igfss()) {      long start0=U.currentTimeMillis();      FileSystemConfiguration igfsCfg=igfs.configuration();      if (proxyCache(igfsCfg.getDataCacheName()) || proxyCache(igfsCfg.getMetaCacheName()))       continue;      try {        Collection<IpcServerEndpoint> endPoints=igfsProc.endpoints(igfs.name());        if (endPoints != null) {          for (          IpcServerEndpoint ep : endPoints)           if (ep.isManagement())           res.igfsEndpoints().add(new VisorIgfsEndpoint(igfs.name(),ignite.name(),ep.getHost(),ep.getPort()));        }        res.igfss().add(VisorIgfs.from(igfs));      }  finally {        if (debug)         log(ignite.log(),"Collected IGFS: " + igfs.name(),getClass(),start0);      }    }  } catch (  Exception igfssEx) {    res.igfssEx(igfssEx);  }}  }
class C{  private void swim(int i){  if (i > 0 && greater((i - 1) / d,i)) {    exch(i,(i - 1) / d);    swim((i - 1) / d);  }}  }
class C{  @Override protected <T extends Number>double[] doPredict(Collection<T> values,int numPredictions){  return next(values,numPredictions);}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public long next(){  long result=-1l;  if (firstIdx < buff.length) {    long[] bucket=buff[firstIdx];    if (bucket != null && secondIdx < bucket.length && bucket[secondIdx] > 0) {      result=bucket[secondIdx];      bucket[secondIdx]|=0x8000000000000000L;      secondIdx++;    } else {      for (int i=firstIdx + 1; i < buff.length && result == -1L; i++) {        if (buff[i] != null && buff[i].length > 0 && buff[i][0] > 0) {          firstIdx=i;          secondIdx=0;          result=buff[firstIdx][secondIdx];          buff[firstIdx][secondIdx]|=0x8000000000000000L;          secondIdx++;          break;        }      }    }  }  if (result == -1L) {    throw new NoSuchElementException();  }  Assert.check(previous < result,EC.GENERAL);  previous=result;  readElements++;  return result;}  }
class C{  public T caseGlossary_(Glossary_ object){  return null;}  }
class C{  void createFullScreenVao(){  this.fullScreenVao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(fullScreenVao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  static void freeRefCountInfo(Long address){  getInstance().freeRefCountInfo(address);}  }
class C{  public static String translateProductName(License license){  return I18N.getMessage(I18N.getGUIBundle(),"gui.license." + license.getProductId() + ".label");}  }
class C{  public void finish(int root_table,String file_identifier){  prep(minalign,SIZEOF_INT + FILE_IDENTIFIER_LENGTH);  if (file_identifier.length() != FILE_IDENTIFIER_LENGTH)   throw new AssertionError("FlatBuffers: file identifier must be length " + FILE_IDENTIFIER_LENGTH);  for (int i=FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {    addByte((byte)file_identifier.charAt(i));  }  finish(root_table);}  }
class C{  public void waitWhileInitializing() throws InterruptedException {  boolean interrupted=Thread.interrupted();  try {    if (interrupted && this.dlock.isInterruptibleLockRequest()) {      throw new InterruptedException();    }    while (true) {      try {        this.whileInitializing.await();        break;      } catch (      InterruptedException e) {        interrupted=true;        throwIfInterruptible(e);      }    }  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public PCalTLAGenerator(AST ast){  this.ast=ast;}  }
class C{  public Vector2 toVector2(){  return Vector3.toVector2(this);}  }
class C{  private int dp2px(int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,this.mMetrics);}  }
class C{  @Override public int read(){  return -1;}  }
class C{  private static long convertByYear(long instant,Chronology from,Chronology to){  return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));}  }
class C{  protected void addParameterToMap(final Map<String,String> map,final String paramName){  String value=this.getValue(paramName);  if (!((value == null) || value.equalsIgnoreCase("null"))) {    map.put(paramName,value);  } else {    map.put(paramName,"null");  }}  }
class C{  protected boolean isProbablyAContainer(Component c){  boolean result=extListener != null ? extListener.isContainer(c) : false;  if (!result) {    boolean isSwing=isSwingClass(c);    if (isSwing)     result=c instanceof JPanel || c instanceof JSplitPane || c instanceof JToolBar|| c instanceof JViewport|| c instanceof JScrollPane|| c instanceof JFrame|| c instanceof JRootPane|| c instanceof Window|| c instanceof Frame|| c instanceof Dialog|| c instanceof JTabbedPane|| c instanceof JInternalFrame|| c instanceof JDesktopPane|| c instanceof JLayeredPane|| c instanceof Box; else     result=c instanceof Container;  }  return result;}  }
class C{  public void checkAwtEventQueueAccess(){  AppContext appContext=AppContext.getAppContext();  AppletClassLoader appletClassLoader=currentAppletClassLoader();  if (AppContext.isMainContext(appContext) && (appletClassLoader != null)) {    super.checkPermission(SecurityConstants.AWT.CHECK_AWT_EVENTQUEUE_PERMISSION);  }}  }
class C{  private void startNodes() throws Exception {  cacheName=CACHE_NAME;  for (int i=0; i < GRID_CNT - 1; i++)   startGrid(i);  cacheName=CACHE_NAME_OTHER;  startGrid(GRID_CNT - 1);  awaitPartitionMapExchange();}  }
class C{  @ReflectiveCtor public SetterProperty(FilePosition pos,Void value,List<? extends Expression> children){  super(pos,(StringLiteral)children.get(0),(FunctionConstructor)children.get(1));}  }
class C{  public Resources(){  super();}  }
class C{  public RE(String pattern) throws RESyntaxException {  this(pattern,MATCH_NORMAL);}  }
class C{  public Object[] toArray(){  GraphicsNode[] result=new GraphicsNode[count];  System.arraycopy(children,0,result,0,count);  return result;}  }
class C{  public static XMPMeta extractXMPMeta(InputStream is){  List<Section> sections=parse(is,true);  if (sections == null) {    return null;  }  for (  Section section : sections) {    if (hasXMPHeader(section.data)) {      int end=getXMPContentEnd(section.data);      byte[] buffer=new byte[end - XMP_HEADER_SIZE];      System.arraycopy(section.data,XMP_HEADER_SIZE,buffer,0,buffer.length);      try {        XMPMeta result=XMPMetaFactory.parseFromBuffer(buffer);        return result;      } catch (      XMPException e) {        Log.d(TAG,"XMP parse error",e);        return null;      }    }  }  return null;}  }
class C{  protected String selectedDecoderType(){  if (!isDecoderSelected()) {    return null;  } else {    return (String)decoderBox.getSelectedItem();  }}  }
class C{  public VolumeImpl(String entidad){  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    this.engine=dbConn.getEngine();    this.version=dbConn.getEngineVersion();  } catch (  Exception e) {  } finally {    try {      dbConn.close();    } catch (    Exception e) {    }  }  init(Defs.NULL_ID,Defs.NULL_ID);}  }
class C{  @Override protected boolean isPlatoon(){  return false;}  }
class C{  protected InnerBuilder addHeadersWithUrl(String url,Map<String,String> headers){  if (UrlUtil.isUrl(url) && !MapUtil.isEmpty(headers)) {    Map<String,String> existHeaders=mUrlHeaders.get(url);    if (existHeaders == null) {      existHeaders=new HashMap<String,String>();      mUrlHeaders.put(url,existHeaders);    }    existHeaders.putAll(headers);  }  return this;}  }
class C{  public Object apply(Object in){  if (in instanceof HasWord) {    HasWord w=(HasWord)in;    String str=w.word();    String outStr=americanize(str,capitalizeTimex);    if (!outStr.equals(str)) {      w.setWord(outStr);    }    return w;  } else {    String str=(String)in;    return americanize(str,capitalizeTimex);  }}  }
class C{  public static void translationY(View v,float fromY,float toY,int duration){  translationY(v,fromY,toY,duration,null);}  }
class C{  public FastCharArrayWriter(){  this(32);}  }
class C{  public static SpringConfig fromOrigamiTensionAndFriction(double qcTension,double qcFriction){  return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(qcTension),OrigamiValueConverter.frictionFromOrigamiValue(qcFriction));}  }
class C{  private void checkTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.events.add(event);}  }
class C{  public void stop(){  if (state == State.RECORDING) {    if (rUncompressed) {      audioRecorder.stop();      try {        randomAccessWriter.seek(4);        randomAccessWriter.writeInt(Integer.reverseBytes(36 + payloadSize));        randomAccessWriter.seek(40);        randomAccessWriter.writeInt(Integer.reverseBytes(payloadSize));        randomAccessWriter.close();      } catch (      IOException e) {        state=State.ERROR;      }    } else {      mediaRecorder.stop();    }    state=State.STOPPED;  } else {    state=State.ERROR;  }}  }
class C{  public DefaultApiClient(String apiUrl,String secureApiUrl,String consumerKey,String consumerSecret,Integer readTimeout){  setupService(apiUrl,secureApiUrl,consumerKey,consumerSecret,readTimeout);}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final String sourceRegister1=(registerOperand1.getValue());  final String sourceRegister2=(registerOperand2.getValue());  final OperandSize bt=OperandSize.BYTE;  final OperandSize wd=OperandSize.WORD;  final OperandSize dw=OperandSize.DWORD;  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister1,dw,"C",dw,tmpVar1));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister2,dw,tmpVar1,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,wd,String.valueOf(-31),bt,"N"));  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,sourceRegister1,bt,"Z"));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar2,wd,String.valueOf(-32L),bt,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar3,bt,String.valueOf(1L),bt,"C"));  Helpers.addOverflow(baseOffset,environment,instructions,dw,tmpVar1,dw,sourceRegister2,bt,tmpVar3,"V",32);}  }
class C{  public Options resourceDirs(List<File> value){  resourceDirs.clear();  resourceDirs.addAll(value);  return this;}  }
class C{  protected static float[] convertTableValues(Element e,BridgeContext ctx){  String s=e.getAttributeNS(null,SVG_TABLE_VALUES_ATTRIBUTE);  if (s.length() == 0) {    return null;  }  StringTokenizer tokens=new StringTokenizer(s," ,");  float[] v=new float[tokens.countTokens()];  try {    for (int i=0; tokens.hasMoreTokens(); ++i) {      v[i]=SVGUtilities.convertSVGNumber(tokens.nextToken());    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,e,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TABLE_VALUES_ATTRIBUTE,s});  }  return v;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  TextNode node=(TextNode)super.createGraphicsNode(ctx,e);  if (node == null)   return null;  associateSVGContext(ctx,e,node);  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      addContextToChild(ctx,(Element)child);    }    child=getNextSibling(child);  }  if (ctx.getTextPainter() != null)   node.setTextPainter(ctx.getTextPainter());  RenderingHints hints=null;  hints=CSSUtilities.convertColorRendering(e,hints);  hints=CSSUtilities.convertTextRendering(e,hints);  if (hints != null)   node.setRenderingHints(hints);  node.setLocation(getLocation(ctx,e));  return node;}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") private static void delete(String file){  if (file != null) {    new File(file).delete();    assertFalse(new File(file).exists());  }}  }
class C{  public Block(final int type,final DeserializationOptions options,final Deserializer deserializer){  super(type,options,deserializer);  this.prevBlockHash=deserializer.readObject("prevBlockHash",Hash.DESERIALIZER);  this.height=BlockHeight.readFrom(deserializer,"height");  this.transactions=deserializer.readObjectArray("transactions",TransactionFactory.VERIFIABLE);  this.difficulty=BlockDifficulty.INITIAL_DIFFICULTY;}  }
class C{  public boolean isBlocked(){  File blocks=FileUtilities.getFile(Constants.BLOCK_FILE);  return existsInFile(blocks);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE:    setDefinedType((Type)newValue);  return;case N4JSPackage.FUNCTION_DEFINITION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends FormalParameter>)newValue);return;case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:setGenerator((Boolean)newValue);return;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:setDeclaredAsync((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void addAll(SubRangeAggregator subRangeAggregator){  for (  SubRange newRange : subRangeAggregator.getRanges()) {    add(newRange);  }}  }
class C{  private static void checkOldAndNewPasswordDoNotMatch(String oldPwd,String newPwd) throws Exception {  if (oldPwd.equals(newPwd)) {    throw new IeciTdException(UasError.EC_OLD_AND_NEW_PWD_CANNOT_MATCH,UasError.EM_OLD_AND_NEW_PWD_CANNOT_MATCH);  }}  }
class C{  public boolean isPropagate(){  return propagate;}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  @Deprecated public LBHttpSolrClient(HttpClient httpClient,String... solrServerUrl){  this(httpClient,new BinaryResponseParser(),solrServerUrl);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent event){  if (event == null || event.isConsumed())   return;  this.frame.mouseWheelMoved(event);}  }
class C{  private void clientRIGetsTombstoneTest(String uniqueName,boolean replicatedRegion){  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  final String name=uniqueName + "Region";  createServerRegion(vm0,name,replicatedRegion);  int port=createServerRegion(vm1,name,replicatedRegion);  createEntries(vm0);  destroyEntries(vm0);  LogWriterUtils.getLogWriter().info("***************** register interest on all keys");  createClientRegion(vm2,name,port,true,ClientRegionShortcut.CACHING_PROXY);  registerInterest(vm2);  ensureAllTombstonesPresent(vm2);  LogWriterUtils.getLogWriter().info("***************** clear cache and register interest on one key, Object0");  clearLocalCache(vm2);  registerInterestOneKey(vm2,"Object0");  List<String> keys=new ArrayList(1);  keys.add("Object0");  ensureAllTombstonesPresent(vm2,keys);  LogWriterUtils.getLogWriter().info("***************** clear cache and register interest on four keys");  clearLocalCache(vm2);  keys=new ArrayList(4);  for (int i=0; i < 4; i++) {    keys.add("Object" + i);  }  registerInterest(vm2,keys);  ensureAllTombstonesPresent(vm2,keys);  LogWriterUtils.getLogWriter().info("***************** clear cache and register interest with regex on four keys");  clearLocalCache(vm2);  registerInterestRegex(vm2,"Object[0-3]");  ensureAllTombstonesPresent(vm2,keys);  LogWriterUtils.getLogWriter().info("***************** fetch entries with getAll()");  clearLocalCache(vm2);  getAll(vm2);  ensureAllTombstonesPresent(vm2);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.576 -0500",hash_original_method="F75815D4B05E7C78CBDEC7A3CDAC25FD",hash_generated_method="064C3E0BDEF61E5B04B6655C4C246750") public boolean isSyncActive(Account account,String authority){synchronized (mAuthorities) {    for (    SyncInfo syncInfo : mCurrentSyncs) {      AuthorityInfo ainfo=getAuthority(syncInfo.authorityId);      if (ainfo != null && ainfo.account.equals(account) && ainfo.authority.equals(authority)) {        return true;      }    }  }  return false;}  }
class C{  public final boolean isEligible(final boolean minimize,final ResourceType searchedType){  Validate.notNull(searchedType);  final SupportedResourceType supportedType=getSupportedResourceType();  final boolean isTypeSatisfied=supportedType == null || (supportedType != null && searchedType == supportedType.value());  final boolean isMinimizedSatisfied=minimize == true || !isMinimize();  return isTypeSatisfied && isMinimizedSatisfied;}  }
class C{  public static String[] addPrefixAndSuffix(String prefix,String suffix,String[] array){  for (int i=0, arrayLength=array.length; i < arrayLength; i++) {    String s=array[i];    array[i]=prefix + s + suffix;  }  return array;}  }
class C{  public static void main(String[] args){  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  env.put(Context.PROVIDER_URL,"ldap://10.104.139.160:389");  env.put(Context.SECURITY_AUTHENTICATION,"simple");  env.put(Context.SECURITY_PRINCIPAL,"cn=cboss@compiere.org,o=GardenWorld,ou=LawnCare");  env.put(Context.SECURITY_CREDENTIALS,"carlboss");  try {    new InitialLdapContext(env,null);    System.out.println("Successfully authenticated ...");  } catch (  AuthenticationException e) {    e.printStackTrace();    return;  }catch (  Exception e) {    e.printStackTrace();    return;  }}  }
class C{  public static @EnsuresNonNull("#1") <T extends Object>T[] castNonNullDeep(T[] arr){  return (T[])castNonNullArray(arr);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  Insets insets=(Insets)o;  if (bottom != insets.bottom)   return false;  if (left != insets.left)   return false;  if (right != insets.right)   return false;  if (top != insets.top)   return false;  return true;}  }
class C{  public NotAuthenticatedException(String message){  super(message);}  }
class C{  public MergeCollation(String pattern) throws ParseException {  for (int i=0; i < statusArray.length; i++)   statusArray[i]=0;  setPattern(pattern);}  }
class C{  public boolean hasStaticMethodCall(String owner,String methodName,String targetClass,String targetMethod){  StaticMethodCallEntry call=new StaticMethodCallEntry(owner,methodName,targetClass,targetMethod);  return staticMethodCalls.contains(call);}  }
class C{  public SolrQuery addIntervalFacets(String field,String[] intervals){  if (intervals == null) {    throw new IllegalArgumentException("Can't add null intervals");  }  set(FacetParams.FACET,true);  add(FacetParams.FACET_INTERVAL,field);  for (  String interval : intervals) {    add(String.format(Locale.ROOT,"f.%s.facet.interval.set",field),interval);  }  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected boolean doReconcile(){  if (!flowReconcileEnabled) {    return false;  }  lastReconcileTime=new Date();  ArrayList<OFMatchReconcile> ofmRcList=new ArrayList<OFMatchReconcile>();  int reconcileCapacity=getCurrentCapacity();  if (logger.isTraceEnabled()) {    logger.trace("Reconcile capacity {} flows",reconcileCapacity);  }  while (!flowQueue.isEmpty() && reconcileCapacity > 0) {    OFMatchReconcile ofmRc=flowQueue.poll();    reconcileCapacity--;    if (ofmRc != null) {      ofmRcList.add(ofmRc);      ctrReconciledFlows.increment();      if (logger.isTraceEnabled()) {        logger.trace("Add flow {} to be the reconcileList",ofmRc.cookie);      }    } else {      break;    }  }  IFlowReconcileListener.Command retCmd;  if (ofmRcList.size() > 0) {    List<IFlowReconcileListener> listeners=flowReconcileListeners.getOrderedListeners();    if (listeners == null) {      if (logger.isTraceEnabled()) {        logger.trace("No flowReconcile listener");      }      return false;    }    for (    IFlowReconcileListener flowReconciler : flowReconcileListeners.getOrderedListeners()) {      if (logger.isTraceEnabled()) {        logger.trace("Reconciling flow: call listener {}",flowReconciler.getName());      }      retCmd=flowReconciler.reconcileFlows(ofmRcList);      if (retCmd == IFlowReconcileListener.Command.STOP) {        break;      }    }    for (    OFMatchReconcile ofmRc : ofmRcList) {      if (ofmRc.origReconcileQueryEvent != null) {        ofmRc.origReconcileQueryEvent.evType.getDebugEvent().newEventWithFlush(new FlowReconcileQueryDebugEvent(ofmRc.origReconcileQueryEvent,"Flow Reconciliation Complete",ofmRc));      }    }    updateFlush();    flowReconcileThreadRunCount.incrementAndGet();  } else {    if (logger.isTraceEnabled()) {      logger.trace("No flow to be reconciled.");    }  }  if (flowQueue.isEmpty()) {    return false;  } else {    if (logger.isTraceEnabled()) {      logger.trace("{} more flows to be reconciled.",flowQueue.size());    }    return true;  }}  }
class C{  @SuppressWarnings("unchecked") @Override synchronized public void start(){  A.notNull(springCfgPath,"Ignite config file");  A.notNull(cacheName,"Cache name");  A.notNull(eventTransformerCls,"Event transformer class");  sinkCounter.start();  try {    if (ignite == null)     ignite=Ignition.start(springCfgPath);    if (eventTransformerCls != null && !eventTransformerCls.isEmpty()) {      Class<? extends EventTransformer> clazz=(Class<? extends EventTransformer<Event,Object,Object>>)Class.forName(eventTransformerCls);      eventTransformer=clazz.newInstance();    }  } catch (  Exception e) {    log.error("Failed to start grid",e);    throw new FlumeException("Failed to start grid",e);  }  super.start();}  }
class C{  public static String showStateMapping(){  StringBuilder builder=new StringBuilder();  if (defaults == null) {    return builder.append("STATEMAP IS EMPTY").toString();  }  for (  ExecuteQueryStatus key : ExecuteQueryStatus.values()) {    DataServerConditionMapping mapping=overrides.get(key);    if (mapping != null) {      builder.append(String.format("%s : OVERRIDDEN\n",mapping));    } else {      mapping=defaults.get(key);      if (mapping == null) {        mapping=new DataServerConditionMapping(key);        logger.warn(String.format("No default mapping found for condition '%s'. Using: %s",key,mapping));      }      builder.append(String.format("%s\n",mapping));    }  }  return builder.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean existSDCard(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public static void shutdown(){  THREAD_POOL.shutdown();}  }
class C{  public Graph createDefaultGraph(){  return Factory.createDefaultGraph();}  }
class C{  public void printSubpopulation(final EvolutionState state,final int log){  state.output.println(NUM_INDIVIDUALS_PREAMBLE + Code.encode(individuals.length),log);  for (int i=0; i < individuals.length; i++) {    state.output.println(INDIVIDUAL_INDEX_PREAMBLE + Code.encode(i),log);    individuals[i].printIndividual(state,log);  }}  }
class C{  public ClassNotFoundException(java.lang.String s){  super(s);}  }
class C{  public boolean acceptSending(DTNHost from,DTNHost to,Connection con,Message m){  if (!checkMcbConditions(from.getComBus(),false)) {    return false;  }  int myAddr=from.getAddress();  if (!(checkSimplePolicy(m.getTo(),this.toSendPolicy,myAddr) && checkSimplePolicy(m.getFrom(),this.fromSendPolicy,myAddr))) {    return false;  }  if (m.getTo() != to && !checkHopCountPolicy(m,this.hopCountSendPolicy)) {    return false;  }  return true;}  }
class C{  @Override default Eval<LongSummaryStatistics> summaryStatisticsLong(final ToLongFunction<? super T> fn){  return Eval.later(null);}  }
class C{  static float decodeMax(byte[] b,int dimension){  int offset=b.length / 2 + dimension * BYTES;  return NumericUtils.sortableIntToFloat(NumericUtils.sortableBytesToInt(b,offset));}  }
class C{  public ListenableFuture<DestinationTable> query(String querySql,DestinationTable dest){  if (dest.type == TableType.VIEW) {    return Futures.transform(Futures.immediateFuture(dest.withQuery(querySql)),new UpdateTableFunction());  } else {    Job job=new Job().setConfiguration(new JobConfiguration().setQuery(new JobConfigurationQuery().setQuery(querySql).setDefaultDataset(getDataset()).setWriteDisposition(dest.getWriteDisposition().toString()).setDestinationTable(dest.getTableReference())));    return Futures.transform(runJobToCompletion(job,dest),new UpdateTableFunction());  }}  }
class C{  public TypingStrategyAwareMemberScope(IScope parent,TypeRef receiverType,EObject context){  super(parent);  boolean isLeftHand=ExpressionExtensions.isLeftHandSide(context);  strategyFilter=new TypingStrategyFilter(TypeUtils.retrieveTypingStrategy(receiverType),isLeftHand);  useSite=receiverType != null && receiverType.isUseSiteStructuralTyping();  receiverTypeName=(receiverType == null || receiverType.eIsProxy()) ? "unknown type" : receiverType.getTypeRefAsString();}  }
class C{  protected static void mkdir(String dir){  File f=new File(dir);  if (f.exists()) {    if (f.isFile()) {      throw new RuntimeException("Can not create directory " + dir + " because a file with this name exists");    }  } else {    mkdirs(f);  }}  }
class C{  @Override public void add(int index,Line1D element){  throw new UnsupportedOperationException();}  }
class C{  public void addHeader(MimeHeader header){  headers_.add(header);}  }
class C{  @Override public void updateNString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean tryUnlockWrite(){  long s;  WNode h;  if (((s=state) & WBIT) != 0L) {    state=(s+=WBIT) == 0L ? ORIGIN : s;    if ((h=whead) != null && h.status != 0)     release(h);    return true;  }  return false;}  }
class C{  String copyToWorkDir(String filePath) throws IOException {  Path srcFile=Paths.get(filePath);  if (Files.exists(srcFile)) {    checkDownloadFolder();    Path newDir=Paths.get(downloadFolder);    Path fileName=srcFile.getFileName();    Files.copy(srcFile,newDir.resolve(fileName),StandardCopyOption.REPLACE_EXISTING);    return fileName.toString();  }  return null;}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=left.check(env,ctx,vset,exp);  vset=right.check(env,ctx,vset,exp);  return vset;}  }
class C{  private boolean login(){  long time=System.currentTimeMillis();  if (sessionId != null && !lastError.equals(NOT_LOGGED_IN))   return true;synchronized (lock) {    if (sessionId != null && !lastError.equals(NOT_LOGGED_IN))     return true;    Map<String,String> params=new HashMap<>();    params.put(PARAM_OP,VALUE_LOGIN);    if (!isSingleUser()) {      params.put(PARAM_USER,Controller.getInstance().username());      String pass=Base64.encodeToString(Controller.getInstance().password().getBytes(StandardCharsets.UTF_8),Base64.NO_WRAP);      params.put(PARAM_PW,pass);    }    try {      sessionId=readResult(params,true,false);      if (sessionId != null) {        Log.d(TAG,"login: " + (System.currentTimeMillis() - time) + "ms");        return true;      }    } catch (    IOException e) {      if (!hasLastError) {        hasLastError=true;        lastError=formatException(e);      }    }    if (!hasLastError) {      hasLastError=true;      lastError=MyApplication.context().getString(R.string.Error_NotLoggedIn);    }    return false;  }}  }
class C{  private void parseServices(Node node){  String presencePrfl=null;  String chatAuth=null;  String groupChatAuth=null;  String ftAuth=null;  String geolocPushAuth=null;  String vsAuth=null;  String isAuth=null;  String rcsIPVoiceCallAuth=null;  String rcsIPVideoCallAuth=null;  String allowExtensions=null;  String composerAuth;  String sharedMapAuth;  String sharedSketchAuth;  String postCallAuth;  Node childnode=node.getFirstChild();  if (childnode != null) {    mRcsSettings.setGsmaRelease(GsmaRelease.BLACKBIRD);    do {      if (chatAuth == null) {        if ((chatAuth=getValueByParamName("ChatAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IM_SESSION,chatAuth.equals("1"));          continue;        }      }      if (groupChatAuth == null) {        if ((groupChatAuth=getValueByParamName("groupChatAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IM_GROUP_SESSION,groupChatAuth.equals("1"));          continue;        }      }      if (ftAuth == null) {        if ((ftAuth=getValueByParamName("ftAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER,ftAuth.equals("1"));          continue;        }      }      if (vsAuth == null) {        if ((vsAuth=getValueByParamName("vsAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_VIDEO_SHARING,vsAuth.equals("1"));          continue;        }      }      if (isAuth == null) {        if ((isAuth=getValueByParamName("isAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IMAGE_SHARING,isAuth.equals("1"));          continue;        }      }      if (geolocPushAuth == null) {        if ((geolocPushAuth=getValueByParamName("geolocPushAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_GEOLOCATION_PUSH,geolocPushAuth.equals("1"));          continue;        }      }      if (presencePrfl == null) {        if ((presencePrfl=getValueByParamName("presencePrfl",childnode,TYPE_INT)) != null) {          if (presencePrfl.equals("1")) {            sLogger.error("Social presence is not supported in TAPI 1.5.1, ignoring capability received through provisioning.");          }          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_SOCIAL_PRESENCE,false);          continue;        }      }      if (rcsIPVoiceCallAuth == null) {        if ((rcsIPVoiceCallAuth=getValueByParamName("rcsIPVoiceCallAuth",childnode,TYPE_INT)) != null) {          int value=Integer.decode(rcsIPVoiceCallAuth);          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IP_VOICE_CALL,(value % 16) != 0);          continue;        }      }      if (rcsIPVideoCallAuth == null) {        if ((rcsIPVideoCallAuth=getValueByParamName("rcsIPVideoCallAuth",childnode,TYPE_INT)) != null) {          int value=Integer.decode(rcsIPVideoCallAuth);          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IP_VIDEO_CALL,(value % 16) != 0);          continue;        }      }      if (allowExtensions == null) {        if ((allowExtensions=getValueByParamName("allowRCSExtensions",childnode,TYPE_INT)) != null) {          int value=Integer.decode(allowExtensions);          mRcsSettings.writeBoolean(RcsSettingsData.ALLOW_EXTENSIONS,(value % 16) != 0);          continue;        }      }      if ((composerAuth=getValueByParamName("composerAuth",childnode,TYPE_INT)) != null) {        int value=Integer.decode(composerAuth);        mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_CALL_COMPOSER,(value % 16) != 0);        continue;      }      if ((sharedMapAuth=getValueByParamName("sharedMapAuth",childnode,TYPE_INT)) != null) {        int value=Integer.decode(sharedMapAuth);        mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_SHARED_MAP,(value % 16) != 0);        continue;      }      if ((sharedSketchAuth=getValueByParamName("sharedSketchAuth",childnode,TYPE_INT)) != null) {        int value=Integer.decode(sharedSketchAuth);        mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_SHARED_SKETCH,(value % 16) != 0);        continue;      }      if ((postCallAuth=getValueByParamName("postCallAuth",childnode,TYPE_INT)) != null) {        int value=Integer.decode(postCallAuth);        mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_POST_CALL,(value % 16) != 0);      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  private double linearApproximate(double[] x,double[] y,double pt,double low,double high){  int i=0;  int j=x.length - 1;  if (pt < x[i]) {    return low;  }  if (pt > x[j]) {    return high;  }  while (i < j - 1) {    int ij=(i + j) / 2;    if (pt < x[ij]) {      j=ij;    } else {      i=ij;    }  }  if (pt == x[j]) {    return y[j];  }  if (pt == x[i]) {    return y[i];  }  return y[i] + (y[j] - y[i]) * ((pt - x[i]) / (x[j] - x[i]));}  }
class C{  protected IssuePropertyMatcherBuilder(IssueMatcher issueMatcher,String propertyName){  this.propertyName=Objects.requireNonNull(propertyName);  this.issueMatcher=Objects.requireNonNull(issueMatcher);}  }
class C{  public void onNodeFocused(AccessibilityNodeInfoCompat node){  if ((mLockedNode == null) || (node == null)) {    return;  }  if (!mLockedNode.equals(node) && (mLockedNode.getWindowId() == node.getWindowId())) {    clearAndRetainGranularity(node);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PARAMETERIZED_TYPE;}  }
class C{  protected double scopeDistance(double dist){  double new_dist;  if (dist <= .01) {    new_dist=.01;  } else   if (dist <= .02) {    new_dist=.02;  } else   if (dist <= .05) {    new_dist=.05;  } else   if (dist <= .1) {    new_dist=.1;  } else   if (dist <= .2) {    new_dist=.2;  } else   if (dist <= .5) {    new_dist=.5;  } else   if (dist <= 1) {    new_dist=1;  } else   if (dist <= 2) {    new_dist=2;  } else   if (dist <= 5) {    new_dist=5;  } else   if (dist <= 10) {    new_dist=10;  } else   if (dist <= 20) {    new_dist=20;  } else   if (dist <= 50) {    new_dist=50;  } else   if (dist <= 100) {    new_dist=100;  } else   if (dist <= 200) {    new_dist=200;  } else   if (dist <= 500) {    new_dist=500;  } else {    new_dist=1000;  }  return new_dist;}  }
class C{  void notifyLeaving(Integer id){  firePropertyChange("Leaving",null,id);  setReport("");}  }
class C{  public double readDouble(){  return scanner.nextDouble();}  }
class C{  public String toSource(String className) throws Exception {  if (m_NumGenerated == 0) {    throw new Exception("No model built yet");  }  if (!(m_Classifiers.get(0)[0] instanceof Sourcable)) {    throw new Exception("Base learner " + m_Classifier.getClass().getName() + " is not Sourcable");  }  StringBuffer text=new StringBuffer("class ");  text.append(className).append(" {\n\n");  text.append("  private static double RtoP(double []R, int j) {\n" + "    double Rcenter = 0;\n" + "    for (int i = 0; i < R.length; i++) {\n"+ "      Rcenter += R[i];\n"+ "    }\n"+ "    Rcenter /= R.length;\n"+ "    double Rsum = 0;\n"+ "    for (int i = 0; i < R.length; i++) {\n"+ "      Rsum += Math.exp(R[i] - Rcenter);\n"+ "    }\n"+ "    return Math.exp(R[j]) / Rsum;\n"+ "  }\n\n");  text.append("  public static double classify(Object[] i) {\n" + "    double [] d = distribution(i);\n" + "    double maxV = d[0];\n"+ "    int maxI = 0;\n"+ "    for (int j = 1; j < " + m_NumClasses + "; j++) {\n"+ "      if (d[j] > maxV) { maxV = d[j]; maxI = j; }\n"+ "    }\n    return (double) maxI;\n  }\n\n");  text.append("  public static double [] distribution(Object [] i) {\n");  text.append("    double [] Fs = new double [" + m_NumClasses + "];\n");  text.append("    double [] Fi = new double [" + m_NumClasses + "];\n");  text.append("    double Fsum;\n");  for (int i=0; i < m_NumGenerated; i++) {    text.append("    Fsum = 0;\n");    for (int j=0; j < m_NumClasses; j++) {      text.append("    Fi[" + j + "] = "+ className+ '_'+ j+ '_'+ i+ ".classify(i); Fsum += Fi["+ j+ "];\n");      if (m_NumClasses == 2) {        text.append("    Fi[1] = -Fi[0];\n");        break;      }    }    text.append("    Fsum /= " + m_NumClasses + ";\n");    text.append("    for (int j = 0; j < " + m_NumClasses + "; j++) {");    text.append(" Fs[j] += (Fi[j] - Fsum) * " + (m_NumClasses - 1) + " / "+ m_NumClasses+ "; }\n");  }  text.append("    double [] dist = new double [" + m_NumClasses + "];\n"+ "    for (int j = 0; j < "+ m_NumClasses+ "; j++) {\n"+ "      dist[j] = RtoP(Fs, j);\n"+ "    }\n    return dist;\n");  text.append("  }\n}\n");  for (int i=0; i < m_Classifiers.get(0).length; i++) {    for (int j=0; j < m_Classifiers.size(); j++) {      text.append(((Sourcable)m_Classifiers.get(j)[i]).toSource(className + '_' + i+ '_'+ j));    }    if (m_NumClasses == 2) {      break;    }  }  return text.toString();}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  entryEClass=createEClass(ENTRY);  standaloneBlockEClass=createEClass(STANDALONE_BLOCK);  createEReference(standaloneBlockEClass,STANDALONE_BLOCK__BLOCK);  stringEvaluatorEClass=createEClass(STRING_EVALUATOR);  createEAttribute(stringEvaluatorEClass,STRING_EVALUATOR__TOTO);  createEReference(stringEvaluatorEClass,STRING_EVALUATOR__EXPR);  modelEClass=createEClass(MODEL);  createEReference(modelEClass,MODEL__PRAGMAS);  createEReference(modelEClass,MODEL__IMPORTS);  createEReference(modelEClass,MODEL__BLOCK);  blockEClass=createEClass(BLOCK);  createEReference(blockEClass,BLOCK__STATEMENTS);  createEReference(blockEClass,BLOCK__FUNCTION);  importEClass=createEClass(IMPORT);  createEAttribute(importEClass,IMPORT__IMPORT_URI);  pragmaEClass=createEClass(PRAGMA);  createEAttribute(pragmaEClass,PRAGMA__NAME);  statementEClass=createEClass(STATEMENT);  createEAttribute(statementEClass,STATEMENT__KEY);  createEAttribute(statementEClass,STATEMENT__FIRST_FACET);  createEReference(statementEClass,STATEMENT__EXPR);  createEReference(statementEClass,STATEMENT__FACETS);  createEReference(statementEClass,STATEMENT__BLOCK);  s_GlobalEClass=createEClass(SGLOBAL);  s_SpeciesEClass=createEClass(SSPECIES);  s_ExperimentEClass=createEClass(SEXPERIMENT);  s_DoEClass=createEClass(SDO);  s_LoopEClass=createEClass(SLOOP);  s_IfEClass=createEClass(SIF);  createEReference(s_IfEClass,SIF__ELSE);  s_OtherEClass=createEClass(SOTHER);  s_ReturnEClass=createEClass(SRETURN);  s_DeclarationEClass=createEClass(SDECLARATION);  s_ReflexEClass=createEClass(SREFLEX);  s_DefinitionEClass=createEClass(SDEFINITION);  createEReference(s_DefinitionEClass,SDEFINITION__TKEY);  createEReference(s_DefinitionEClass,SDEFINITION__ARGS);  s_AssignmentEClass=createEClass(SASSIGNMENT);  createEReference(s_AssignmentEClass,SASSIGNMENT__VALUE);  s_DirectAssignmentEClass=createEClass(SDIRECT_ASSIGNMENT);  s_SetEClass=createEClass(SSET);  s_EquationsEClass=createEClass(SEQUATIONS);  createEReference(s_EquationsEClass,SEQUATIONS__EQUATIONS);  s_SolveEClass=createEClass(SSOLVE);  s_DisplayEClass=createEClass(SDISPLAY);  createEAttribute(s_DisplayEClass,SDISPLAY__NAME);  speciesOrGridDisplayStatementEClass=createEClass(SPECIES_OR_GRID_DISPLAY_STATEMENT);  parametersEClass=createEClass(PARAMETERS);  createEReference(parametersEClass,PARAMETERS__PARAMS);  actionArgumentsEClass=createEClass(ACTION_ARGUMENTS);  createEReference(actionArgumentsEClass,ACTION_ARGUMENTS__ARGS);  argumentDefinitionEClass=createEClass(ARGUMENT_DEFINITION);  createEReference(argumentDefinitionEClass,ARGUMENT_DEFINITION__TYPE);  createEReference(argumentDefinitionEClass,ARGUMENT_DEFINITION__DEFAULT);  facetEClass=createEClass(FACET);  createEAttribute(facetEClass,FACET__KEY);  createEReference(facetEClass,FACET__EXPR);  createEReference(facetEClass,FACET__BLOCK);  expressionEClass=createEClass(EXPRESSION);  createEReference(expressionEClass,EXPRESSION__LEFT);  createEAttribute(expressionEClass,EXPRESSION__OP);  createEReference(expressionEClass,EXPRESSION__RIGHT);  argumentPairEClass=createEClass(ARGUMENT_PAIR);  functionEClass=createEClass(FUNCTION);  createEReference(functionEClass,FUNCTION__ACTION);  createEReference(functionEClass,FUNCTION__PARAMETERS);  createEReference(functionEClass,FUNCTION__ARGS);  createEReference(functionEClass,FUNCTION__TYPE);  expressionListEClass=createEClass(EXPRESSION_LIST);  createEReference(expressionListEClass,EXPRESSION_LIST__EXPRS);  variableRefEClass=createEClass(VARIABLE_REF);  createEReference(variableRefEClass,VARIABLE_REF__REF);  typeInfoEClass=createEClass(TYPE_INFO);  createEReference(typeInfoEClass,TYPE_INFO__FIRST);  createEReference(typeInfoEClass,TYPE_INFO__SECOND);  gamlDefinitionEClass=createEClass(GAML_DEFINITION);  createEAttribute(gamlDefinitionEClass,GAML_DEFINITION__NAME);  equationDefinitionEClass=createEClass(EQUATION_DEFINITION);  typeDefinitionEClass=createEClass(TYPE_DEFINITION);  varDefinitionEClass=createEClass(VAR_DEFINITION);  actionDefinitionEClass=createEClass(ACTION_DEFINITION);  unitFakeDefinitionEClass=createEClass(UNIT_FAKE_DEFINITION);  typeFakeDefinitionEClass=createEClass(TYPE_FAKE_DEFINITION);  actionFakeDefinitionEClass=createEClass(ACTION_FAKE_DEFINITION);  skillFakeDefinitionEClass=createEClass(SKILL_FAKE_DEFINITION);  varFakeDefinitionEClass=createEClass(VAR_FAKE_DEFINITION);  equationFakeDefinitionEClass=createEClass(EQUATION_FAKE_DEFINITION);  terminalExpressionEClass=createEClass(TERMINAL_EXPRESSION);  s_ActionEClass=createEClass(SACTION);  s_VarEClass=createEClass(SVAR);  pairEClass=createEClass(PAIR);  ifEClass=createEClass(IF);  createEReference(ifEClass,IF__IF_FALSE);  castEClass=createEClass(CAST);  binaryEClass=createEClass(BINARY);  unitEClass=createEClass(UNIT);  unaryEClass=createEClass(UNARY);  accessEClass=createEClass(ACCESS);  createEReference(accessEClass,ACCESS__ARGS);  createEAttribute(accessEClass,ACCESS__NAMED_EXP);  arrayEClass=createEClass(ARRAY);  createEReference(arrayEClass,ARRAY__EXPRS);  pointEClass=createEClass(POINT);  createEReference(pointEClass,POINT__Z);  parameterEClass=createEClass(PARAMETER);  createEAttribute(parameterEClass,PARAMETER__BUILT_IN_FACET_KEY);  unitNameEClass=createEClass(UNIT_NAME);  createEReference(unitNameEClass,UNIT_NAME__REF);  typeRefEClass=createEClass(TYPE_REF);  createEReference(typeRefEClass,TYPE_REF__REF);  createEReference(typeRefEClass,TYPE_REF__PARAMETER);  skillRefEClass=createEClass(SKILL_REF);  createEReference(skillRefEClass,SKILL_REF__REF);  actionRefEClass=createEClass(ACTION_REF);  createEReference(actionRefEClass,ACTION_REF__REF);  equationRefEClass=createEClass(EQUATION_REF);  createEReference(equationRefEClass,EQUATION_REF__REF);  intLiteralEClass=createEClass(INT_LITERAL);  doubleLiteralEClass=createEClass(DOUBLE_LITERAL);  colorLiteralEClass=createEClass(COLOR_LITERAL);  stringLiteralEClass=createEClass(STRING_LITERAL);  booleanLiteralEClass=createEClass(BOOLEAN_LITERAL);  reservedLiteralEClass=createEClass(RESERVED_LITERAL);}  }
class C{  public FastCharBuffer append(String string){  int len=string.length();  if (len == 0) {    return this;  }  int end=offset + len;  int newSize=size + len;  int remaining=len;  int start=0;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    string.getChars(0,part,currentBuffer,offset);    remaining-=part;    offset+=part;    size+=part;    start+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    string.getChars(start,start + part,currentBuffer,offset);    offset+=part;    size+=part;  }  return this;}  }
class C{  public XintroActivityBuilder addFragments(List<IntroFragmentModel> introFragmentAttributes){  introFragmentModelList.addAll(introFragmentAttributes);  return this;}  }
class C{  public void removeListener(T listener){  if (listeners != null) {    List<T> newlisteners=new ArrayList<T>();    newlisteners.addAll(listeners);    newlisteners.remove(listener);    listeners=newlisteners;  }}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(_method.getModifiers());}  }
class C{  private void checkGlyph(GlyphTable table,int offset,int length){  Glyph glyph=table.glyph(offset,length);  if (length != 0) {    assertNotNull(glyph);  }  int padding1=glyph.padding();  glyph.instructionSize();  int padding2=glyph.padding();  assertEquals(padding1,padding2);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARRAY_BINDING_PATTERN;}  }
class C{  protected String doIt() throws Exception {  log.info("From Bank=" + p_From_C_BankAccount_ID + " - To Bank="+ p_To_C_BankAccount_ID+ " - C_BPartner_ID="+ p_C_BPartner_ID+ "- C_Charge_ID= "+ p_C_Charge_ID+ " - Amount="+ p_Amount+ " - DocumentNo="+ p_DocumentNo+ " - Description="+ p_Description+ " - Statement Date="+ p_StatementDate+ " - Date Account="+ p_DateAcct);  if (p_To_C_BankAccount_ID == 0 || p_From_C_BankAccount_ID == 0)   throw new IllegalArgumentException("Banks required");  if (p_DocumentNo == null || p_DocumentNo.length() == 0)   throw new IllegalArgumentException("Document No required");  if (p_To_C_BankAccount_ID == p_From_C_BankAccount_ID)   throw new AdempiereUserError("Banks From and To must be different");  if (p_C_BPartner_ID == 0)   throw new AdempiereUserError("Business Partner required");  if (p_C_Currency_ID == 0)   throw new AdempiereUserError("Currency required");  if (p_C_Charge_ID == 0)   throw new AdempiereUserError("Business Partner required");  if (p_Amount.compareTo(new BigDecimal(0)) == 0)   throw new AdempiereUserError("Amount required");  if (p_StatementDate == null)   p_StatementDate=Env.getContextAsDate(getCtx(),"#Date");  if (p_StatementDate == null)   p_StatementDate=new Timestamp(System.currentTimeMillis());  if (p_DateAcct == null)   p_DateAcct=p_StatementDate;  generateBankTransfer();  return "@Created@ = " + m_created;}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public VariableDelayStrategy(final Supplier<Integer> delaySupplier){  this.delaySupplier=delaySupplier;}  }
class C{  public Xform(){  super();  getTransforms().addAll(t,rz,ry,rx,s);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isDirty(){  return false;}  }
class C{  public void validateStorageFiles(Collection<String> storageFilePaths,String s3KeyPrefix,BusinessObjectDataEntity businessObjectDataEntity,String storageName) throws IllegalArgumentException {  for (  String storageFilePath : storageFilePaths) {    Assert.isTrue(storageFilePath.startsWith(s3KeyPrefix),String.format("Storage file \"%s\" registered with business object data {%s} in \"%s\" storage does not match the expected S3 key prefix \"%s\".",storageFilePath,businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity),storageName,s3KeyPrefix));  }}  }
class C{  void createEdges(Number[] v){}  }
class C{  @Override public void configure(HttpSecurity http) throws Exception {  http.requestMatchers().antMatchers("/**").and().authorizeRequests().anyRequest().authenticated().antMatchers(HttpMethod.GET,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.OPTIONS,"/**").access("#oauth2.hasScope('read')").antMatchers(HttpMethod.POST,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PUT,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.PATCH,"/**").access("#oauth2.hasScope('write')").antMatchers(HttpMethod.DELETE,"/**").access("#oauth2.hasScope('write')");}  }
class C{  public void execute(){  try {    invocation.invoke(targetCallback,new Object[]{target});  } catch (  Exception e) {  }}  }
class C{  public DGetAlias(JFrame parent,String title,String alias){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(alias);}  }
class C{  public Map<String,Object> convertRelation(Relation relation){  Map<String,Object> map=Maps.newHashMap();  convertFeatures(map,relation);  if (outputHistory && documentHistory != null) {    Collection<HistoryEvent> events=documentHistory.getHistory(relation.getInternalId());    convertHistory(map,events,relation.getInternalId());  }  putIfExists(map,fields.getExternalId(),relation.getExternalId());  return map;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:34.361 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public ToStringBuilder append(final int[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public void addRow(boolean value,double prob){  addRow(ValueFactory.create(value),prob);}  }
class C{  public static void addCombinerRecipe(ItemStack input,ItemStack output){  addRecipe(Recipe.COMBINER,new CombinerRecipe(input,output));}  }
class C{  private Object readElement(InputNode node,Object value) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node,value);}  }
class C{  public File downloadConfigDir(SolrZkClient zkClient,String configName) throws IOException, InterruptedException, KeeperException {  File dir=Files.createTempDir();  dir.deleteOnExit();  ZkConfigManager configManager=new ZkConfigManager(zkClient);  configManager.downloadConfigDir(configName,dir.toPath());  File confDir=new File(dir,"conf");  if (!confDir.isDirectory()) {    confDir=new File(Files.createTempDir().getAbsolutePath(),"conf");    confDir.getParentFile().deleteOnExit();    Files.move(dir,confDir);    dir=confDir.getParentFile();  }  FileUtils.writeStringToFile(new File(dir,"solr.xml"),"<solr><solrcloud></solrcloud></solr>","UTF-8");  verifyConfigDir(confDir);  return dir;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (SCHEDULETYPE_Frequency.equals(getScheduleType())) {    if (getFrequencyType() == null)     setFrequencyType(FREQUENCYTYPE_Day);    if (getFrequency() < 1)     setFrequency(1);    setCronPattern(null);  } else   if (SCHEDULETYPE_CronSchedulingPattern.equals(getScheduleType())) {    String pattern=getCronPattern();    if (pattern != null && pattern.trim().length() > 0) {      if (!SchedulingPattern.validate(pattern)) {        log.saveError("Error","InvalidCronPattern");        return false;      }    }  }  if (getAD_Table_ID() > 0) {    int colid=new Query(getCtx(),MColumn.Table_Name,"AD_Table_ID=? AND AD_Reference_ID=? AND AD_Process_ID=?",get_TrxName()).setOnlyActiveRecords(true).setParameters(getAD_Table_ID(),DisplayType.Button,getAD_Process_ID()).firstId();    if (colid <= 0) {      log.saveError("Error",Msg.getMsg(getCtx(),"TableMustHaveProcessButton"));      return false;    }  } else {    setRecord_ID(-1);  }  if (getRecord_ID() != 0) {    if (getAD_Table_ID() <= 0) {      log.saveError("Error",Msg.getMsg(getCtx(),"MustFillTable"));      return false;    }    MTable table=MTable.get(getCtx(),getAD_Table_ID());    PO po=table.getPO(getRecord_ID(),get_TrxName());    if (po == null || po.get_ID() <= 0 || po.getAD_Client_ID() != getAD_Client_ID()) {      log.saveError("Error",Msg.getMsg(getCtx(),"NoRecordID"));      return false;    }  }  return true;}  }
class C{  public CustomTranslation(){  super();}  }
class C{  public void addLineToLog(String data){  checkNotNull(data,"Data cannot be null");  if (fullLog.length() + data.length() >= MAX_STRING_LENGTH && !full) {    full=true;    fullLog.append("[ERROR] Too much output to display. Discarding the rest.");  } else   if (!full) {    fullLog.append(data).append('\n');  } else {    return;  }  final double scrollPosition;  if (isPausedScroll()) {    scrollPosition=this.getScrollTop();  } else {    scrollPosition=Double.MAX_VALUE;  }  this.setText(fullLog.toString());  this.setScrollTop(scrollPosition);}  }
class C{  private void print(String text,AttributeSet printStyle){  try {    doc.insertString(doc.getLength(),text,printStyle);  } catch (  BadLocationException e) {    LOGGER.warning("Bad location");  }}  }
class C{  public boolean canUndo(){  return currentAction != null || actionsIndex > 0;}  }
class C{  public CheckpointManager(Context context) throws IOException {  this(context.getParams(),null);}  }
class C{  public static boolean parseBool(String s){  if (s != null) {    if (s.startsWith("true") || s.startsWith("on") || s.startsWith("yes")) {      return true;    }    if (s.startsWith("false") || s.startsWith("off") || s.equals("no")) {      return false;    }  }  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"invalid boolean value: " + s);}  }
class C{  public static double factorialAsDoubleIncludeDivisor(int n,double divisor){  double result=1.0 / divisor;  for (int i=1; i <= n; i++) {    result*=(double)i;  }  return result;}  }
class C{  public static int skipS(char[] buf,int off,int end){  loop:   while (off < end) {switch (charType(buf[off])) {case CT_S:case CT_CR:case CT_LF:      off+=1;    break;default :  break loop;}}return off;}  }
class C{  public boolean isNew(){  boolean is;  if (m_editFlag == FolderEditFlag.NEW)   is=true; else   is=false;  return is;}  }
class C{  public void addTracks(List<SoundCloudTrack> tracks){  checkState();  for (  SoundCloudTrack track : tracks) {    addTrack(track);  }}  }
class C{  public static void process(ASTOperationContainer qc) throws MalformedQueryException {  StringProcessor visitor=new StringProcessor();  try {    qc.jjtAccept(visitor,null);  } catch (  VisitorException e) {    throw new MalformedQueryException(e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String keyw;  if (curNumberOfParameters == 14)   keyw=null; else   keyw=getString(stack);  String slotString=getString(stack);  if (slotString == null)   slotString="";  java.util.StringTokenizer toker=new java.util.StringTokenizer(slotString,";");  int slotType=0;  java.util.ArrayList slots=new java.util.ArrayList();  while (toker.hasMoreTokens()) {    int[] ts=BigBrother.getTimeslotForString(toker.nextToken());    if (slotType == 0)     slotType=ts[0]; else     if (slotType != ts[0])     throw new IllegalArgumentException("All timeslots passed into SetFavoriteTimeslot must be of the same type!");    if (slotType != 0)     slots.add(new Integer(ts[1]));  }  int[] rawSlots=null;  if (slots.size() > 0) {    rawSlots=new int[slots.size()];    for (int i=0; i < slots.size(); i++)     rawSlots[i]=((Integer)slots.get(i)).intValue();  }  String c=getString(stack);  String net=getString(stack);  String pr=getString(stack);  String year=getString(stack);  String rated=getString(stack);  int role=Show.getRoleForString(getString(stack));  Person person=getPerson(stack);  String sub=getString(stack);  String cat=getString(stack);  boolean rr=evalBool(stack.pop());  boolean fr=evalBool(stack.pop());  String tit=getString(stack);  Agent fav=(Agent)stack.pop();  int mask=Agent.LOVE_MASK;  if (rr)   mask=mask | Agent.RERUN_MASK;  if (fr)   mask=mask | Agent.FIRSTRUN_MASK;  if (tit != null && tit.length() > 0)   mask=mask | Agent.TITLE_MASK;  if (cat != null && cat.length() > 0)   mask=mask | Agent.CATEGORY_MASK;  if (person != null)   mask=mask | Agent.ACTOR_MASK;  if (rated != null && rated.length() > 0)   mask=mask | Agent.RATED_MASK;  if (year != null && year.length() > 0)   mask=mask | Agent.YEAR_MASK;  if (pr != null && pr.length() > 0)   mask=mask | Agent.PR_MASK;  if (c != null && c.length() > 0)   mask=mask | Agent.CHANNEL_MASK;  if (net != null && net.length() > 0)   mask=mask | Agent.NETWORK_MASK;  if (slotType == BigBrother.DAY_ALIGN)   mask=mask | Agent.DAYSLOT_MASK;  if (slotType == BigBrother.TIME_ALIGN)   mask=mask | Agent.TIMESLOT_MASK;  if (slotType == BigBrother.FULL_ALIGN)   mask=mask | Agent.FULLSLOT_MASK;  if (keyw != null && keyw.length() > 0)   mask=mask | Agent.KEYWORD_MASK;  if (mask == Agent.LOVE_MASK)   return null;  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent rv=Carny.getInstance().updateFavorite(fav,mask,tit,cat,sub,person,role,rated,year,pr,net,c,slotType,rawSlots,keyw);    return rv;  } else   return null;}  }
class C{  public void updateLoad(){  if (getWait() > 0) {    return;  }  if (!getNextLoadName().equals(NONE)) {    setLoadName(getNextLoadName());    setNextLoadName(NONE);    if (getLoadName().equals(getReturnWhenEmptyLoadName()) && getFinalDestination() == null) {      setReturnWhenEmpty();    }    return;  }  if (getLoadType().equals(CarLoad.LOAD_TYPE_EMPTY)) {    setLoadName(carLoads.getDefaultLoadName());  } else {    setLoadEmpty();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof JFreeChartEntity)) {    return false;  }  JFreeChartEntity that=(JFreeChartEntity)obj;  if (!getArea().equals(that.getArea())) {    return false;  }  if (!ObjectUtilities.equal(getToolTipText(),that.getToolTipText())) {    return false;  }  if (!ObjectUtilities.equal(getURLText(),that.getURLText())) {    return false;  }  if (!(this.chart.equals(that.chart))) {    return false;  }  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void buildActions(final List<String> list){  ActionType actionType=getActionType();  list.add(actionType.getRepresentation());  super.buildActions(list);  list.remove(ActionType.LOOK.getRepresentation());}  }
class C{  public void open(String fileName) throws IOException {  table.open(fileName);}  }
class C{  @Override protected void initGUI(){  super.initGUI();  m_TextMarkdown=new MarkdownTextAreaWithPreview();  m_TextMarkdown.setLineWrap(true);  m_TextMarkdown.setWrapStyleWord(true);  getContentPane().add(m_TextMarkdown);}  }
class C{  public boolean isPartitionTag(String field){  if (partitions == null || (!isTag(field))) {    return false;  }  for (  String partition : partitions) {    if (partition.equals(field)) {      return true;    }  }  return false;}  }
class C{  public LdapProperties(Properties properties){  if (properties != null) {    for (    Map.Entry<Object,Object> propertiesEntry : properties.entrySet()) {      settings.add(new Setting((String)propertiesEntry.getKey(),(String)propertiesEntry.getValue()));    }  }}  }
class C{  public Float(){}  }
class C{  private void refreshStateIfNecessary() throws SQLException {  if (this.fabricConnection.isStateExpired()) {    this.fabricConnection.refreshStatePassive();    if (this.serverGroup != null) {      setCurrentServerGroup(this.serverGroup.getName());    }  }}  }
class C{  public boolean isMainContext(){  return mIsMainContext;}  }
class C{  public void changeDirection(Vector3 dir){  dir.normalizeLocal();  changeCamera(dir);}  }
class C{  private void createCompositionArea(){synchronized (compositionAreaLock) {    compositionArea=new CompositionArea();    if (compositionAreaOwner != null) {      compositionArea.setHandlerInfo(compositionAreaOwner,inputMethodContext);    }    Component client=clientComponent.get();    if (client != null) {      InputMethodRequests req=client.getInputMethodRequests();      if (req != null && inputMethodContext.useBelowTheSpotInput()) {        setCompositionAreaUndecorated(true);      }    }  }}  }
class C{  protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  for (  IGroupMemberNode child : group.getChildren()) {    if (child instanceof UnionNode) {      final UnionNode union=(UnionNode)child;      boolean canEstimate=true;      for (      JoinGroupNode join : union.getChildren()) {        canEstimate&=join.getProperty(Annotations.ESTIMATED_CARDINALITY) != null;      }      if (canEstimate) {        long cardinality=0;        for (        JoinGroupNode join : union.getChildren()) {          cardinality+=(long)join.getProperty(Annotations.ESTIMATED_CARDINALITY);        }        if (log.isDebugEnabled()) {          log.debug("able to estimate the cardinality for a union: " + cardinality);        }        union.setProperty(Annotations.ESTIMATED_CARDINALITY,cardinality);      }    } else     if (child instanceof ArbitraryLengthPathNode) {      final ArbitraryLengthPathNode alp=(ArbitraryLengthPathNode)child;      final long cardinality=alp.getEstimatedCardinality(null);      if (cardinality < Long.MAX_VALUE) {        alp.setProperty(Annotations.ESTIMATED_CARDINALITY,cardinality);      }    }  }  final List<IBindingProducerNode> nodes=group.getChildren(IBindingProducerNode.class);  if (nodes.size() == 1) {    final IBindingProducerNode node=nodes.get(0);    if (node.getProperty(Annotations.ESTIMATED_CARDINALITY) != null) {      final long cardinality=(long)node.getProperty(Annotations.ESTIMATED_CARDINALITY);      if (log.isDebugEnabled()) {        log.debug("setting cardinality on a singleton group: " + cardinality);      }      group.setProperty(Annotations.ESTIMATED_CARDINALITY,cardinality);    }  } else {  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  Context(){  copyTables();}  }
class C{  protected void addAttrValue(WbXmlAttributeValueDef attrVal){  this.attrValuesByValue.add(attrVal);  this.attrValuesByToken.put(attrVal.getToken(),attrVal);}  }
class C{  int lightState(){  if (light != null) {    return light.getState();  } else {    return Light.INCONSISTENT;  }}  }
class C{  static DerEncoder[] castToDerEncoder(Object[] objs){  DerEncoder[] encoders=new DerEncoder[objs.length];  for (int i=0; i < encoders.length; i++)   encoders[i]=(DerEncoder)objs[i];  return encoders;}  }
class C{  public static void cancel(){  if (fetchExe != null) {    fetchExe.shutdownNow();    fetchExe=null;  }  BitmapAjaxCallback.clearTasks();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.341 -0400",hash_original_method="EE3ED6E7CE5EB56E215F2968B06CF264",hash_generated_method="393B09FC912AE59D5045B216F4009ACF") void checkSemantics(DirectiveList dirList) throws SaslException {  Iterator directives=dirList.getIterator();  ParsedDirective directive;  String name;  while (directives.hasNext()) {    directive=(ParsedDirective)directives.next();    name=directive.getName();    if (name.equals("rspauth"))     m_responseValue=directive.getValue();  }  if (m_responseValue == null)   throw new SaslException("Missing response-auth directive.");}  }
class C{  @SuppressWarnings("unchecked") public void mouseReleased(MouseEvent e){  VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();  if (e.isPopupTrigger()) {    String annotationString=JOptionPane.showInputDialog(vv,"Annotation:");    if (annotationString != null && annotationString.length() > 0) {      Point2D p=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(down);      Annotation<String> annotation=new Annotation<String>(annotationString,layer,annotationColor,fill,p);      annotationManager.add(layer,annotation);    }  } else   if (e.getModifiers() == modifiers) {    if (down != null) {      Point2D out=e.getPoint();      RectangularShape arect=(RectangularShape)rectangularShape.clone();      arect.setFrameFromDiagonal(down,out);      Shape s=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(arect);      Annotation<Shape> annotation=new Annotation<Shape>(s,layer,annotationColor,fill,out);      annotationManager.add(layer,annotation);    }  }  down=null;  vv.removePostRenderPaintable(lensPaintable);  vv.repaint();}  }
class C{  private void initialize(){  GridBagConstraints gridBagConstraints1=new GridBagConstraints();  GridBagConstraints gridBagConstraints2=new GridBagConstraints();  GridBagConstraints gridBagConstraints3=new GridBagConstraints();  javax.swing.JLabel jLabel=new JLabel();  this.setLayout(new GridBagLayout());  this.setSize(409,268);  this.setName(Constant.messages.getString("options.ext.title"));  jLabel.setText(Constant.messages.getString("options.ext.label.enable"));  gridBagConstraints1.gridx=0;  gridBagConstraints1.gridy=0;  gridBagConstraints1.gridheight=1;  gridBagConstraints1.weightx=0.0;  gridBagConstraints1.weighty=0.0;  gridBagConstraints1.insets=new Insets(0,0,5,0);  gridBagConstraints1.anchor=GridBagConstraints.NORTHWEST;  gridBagConstraints1.fill=GridBagConstraints.HORIZONTAL;  gridBagConstraints2.gridx=0;  gridBagConstraints2.gridy=1;  gridBagConstraints2.weightx=1.0;  gridBagConstraints2.weighty=0.75;  gridBagConstraints2.fill=GridBagConstraints.BOTH;  gridBagConstraints2.ipadx=0;  gridBagConstraints2.insets=new Insets(0,0,0,0);  gridBagConstraints2.anchor=GridBagConstraints.NORTHWEST;  gridBagConstraints3.gridx=0;  gridBagConstraints3.gridy=2;  gridBagConstraints3.weightx=1.0;  gridBagConstraints3.weighty=0.25;  gridBagConstraints3.fill=GridBagConstraints.BOTH;  gridBagConstraints3.ipadx=0;  gridBagConstraints3.insets=new Insets(0,0,0,0);  gridBagConstraints3.anchor=GridBagConstraints.NORTHWEST;  this.add(jLabel,gridBagConstraints1);  this.add(getJScrollPane(),gridBagConstraints2);  this.add(getDetailsPane(),gridBagConstraints3);}  }
class C{  public List<LocalDateTime> bottom(int n){  List<LocalDateTime> bottom=new ArrayList<>();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalDateTime.asLocalDateTime(values[i]));  }  return bottom;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void addStreamSequencesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Resequencer_streamSequences_feature"),getString("_UI_PropertyDescriptor_description","_UI_Resequencer_streamSequences_feature","_UI_Resequencer_type"),EipPackage.Literals.RESEQUENCER__STREAM_SEQUENCES,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void sendToAll(AbstractPacket message){  this.channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALL);  this.channels.get(Side.SERVER).writeAndFlush(message);}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  protected boolean isPort(int port){  return _socket.getPort() == port;}  }
class C{  public boolean contains(String objectType,String test){  for (  RuleDescription object : this.ruleDescriptions) {    if (object.compareTo(objectType,test)) {      return true;    }  }  return false;}  }
class C{  public static final double[] normalizeEquals(final double[] v1){  double norm=1. / euclideanLength(v1);  if (norm < Double.POSITIVE_INFINITY) {    for (int row=0; row < v1.length; row++) {      v1[row]*=norm;    }  }  return v1;}  }
class C{  @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  public SprogCSTurnout(int number,SprogSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "T" + number);  _number=number;  _memo=memo;  commandStation=_memo.getCommandStation();}  }
class C{  public void commit(){  if (m_addedValues != null) {    if (m_values == null) {      m_values=m_addedValues;    } else {      LinkValue tail=m_values;      while (tail.m_next != null)       tail=tail.m_next;      tail.m_next=m_addedValues;    }    m_addedValues=null;  }  m_removedValues=null;}  }
class C{  public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,int substate,List<String> sentence){  int cState=maxcChild[start][end][state][substate];  int cSubState=maxcChildSub[start][end][state][substate];  if (cState == -1) {    return extractBestMaxRuleParse2(start,end,state,substate,sentence);  } else {    List<Tree<String>> child=new ArrayList<Tree<String>>();    child.add(extractBestMaxRuleParse2(start,end,cState,cSubState,sentence));    String stateStr=(String)tagNumberer.object(state);    if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2);    totalUsedUnaries++;    int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState);    if (intermediateNode > 0) {      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();      nTimesRestoredUnaries++;      String stateStr2=(String)tagNumberer.object(intermediateNode);      if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);      restoredChild.add(new Tree<String>(stateStr2,child));      return new Tree<String>(stateStr,restoredChild);    }    return new Tree<String>(stateStr,child);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.acos(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void write(String text) throws SAXException {  if (text != null) {    char[] chars=text.toCharArray();    contentHandler.characters(chars,0,chars.length);  }}  }
class C{  public String emitPattern(){  return emitPattern(true);}  }
class C{  public DrawerBuilder withToolbar(@NonNull Toolbar toolbar){  this.mToolbar=toolbar;  return this;}  }
class C{  public String enableModule(String id,String module){  Tenant tenant=tenants.get(id);  if (tenant == null) {    return "tenant " + id + " not found";  }  ModuleDescriptor mod=moduleManager.get(module);  if (mod == null) {    return "module " + module + " not found";  }  String deperr=checkDependencies(tenant,mod);  if (!deperr.isEmpty()) {    return deperr;  }  tenant.enableModule(module);  return "";}  }
class C{  ToolsMenu(){  super(I18n.tr("&Tools"));  this.updateAction=new UpdateAction();  addMenuItem(new OpenChatAction());  if (OSUtils.isMacOSX() || OSUtils.isWindows()) {    addMenuItem(new RebuildiTunesPlaylist());  }  addMenuItem(new ShowOptionsAction());  addMenuItem(updateAction);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static Collection<InetSocketAddress> toSocketAddresses(Collection<String> addrs,Collection<String> hostNames,int port){  Set<InetSocketAddress> res=new HashSet<>(addrs.size());  Iterator<String> hostNamesIt=hostNames.iterator();  for (  String addr : addrs) {    String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null;    if (!F.isEmpty(hostName)) {      InetSocketAddress inetSockAddr=new InetSocketAddress(hostName,port);      if (inetSockAddr.isUnresolved() || inetSockAddr.getAddress().isLoopbackAddress())       inetSockAddr=new InetSocketAddress(addr,port);      res.add(inetSockAddr);    }    res.add(new InetSocketAddress(addr,port));  }  return res;}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  private void initializeListeners(){  for (  final IDebugger debugger : m_debuggerProvider) {    debugger.getBookmarkManager().addListener(m_listener);  }  m_debuggerProvider.addListener(m_debuggerListener);}  }
class C{  public FilterExprIteratorSimple(){  super(null);}  }
class C{  public static boolean checkLicense(){  return true;}  }
class C{  public FilteredGuacamoleWriter(GuacamoleWriter writer,GuacamoleFilter filter){  this.writer=writer;  this.filter=filter;}  }
class C{  static public void withinBounds(double arg,double min,double max,String argName){  if (!Comparisons.betweeneq(min,arg,max)) {    throw new IllegalArgumentException(String.format("%s (%1.4f) out of bounds",argName,arg));  }}  }
class C{  private Command processFlowRemovedMessage(IOFSwitch sw,OFFlowRemoved flowRemovedMessage){  if (flowRemovedMessage.getCookie() != LearningSwitch.LEARNING_SWITCH_COOKIE) {    return Command.CONTINUE;  }  if (log.isTraceEnabled()) {    log.trace("{} flow entry removed {}",sw,flowRemovedMessage);  }  OFMatch match=flowRemovedMessage.getMatch();  this.removeFromPortMap(sw,Ethernet.toLong(match.getDataLayerSource()),match.getDataLayerVirtualLan());  this.writeFlowMod(sw,OFFlowMod.OFPFC_DELETE,-1,match.clone().setWildcards(((Integer)sw.getAttribute(IOFSwitch.PROP_FASTWILDCARDS)).intValue() & ~OFMatch.OFPFW_DL_VLAN & ~OFMatch.OFPFW_DL_SRC& ~OFMatch.OFPFW_DL_DST& ~OFMatch.OFPFW_NW_SRC_MASK& ~OFMatch.OFPFW_NW_DST_MASK).setDataLayerSource(match.getDataLayerDestination()).setDataLayerDestination(match.getDataLayerSource()).setNetworkSource(match.getNetworkDestination()).setNetworkDestination(match.getNetworkSource()).setTransportSource(match.getTransportDestination()).setTransportDestination(match.getTransportSource()),match.getInputPort());  return Command.CONTINUE;}  }
class C{  private final int kingSafety(Position pos){  final int minM=rV + bV;  final int m=(pos.wMtrl - pos.wMtrlPawns + pos.bMtrl - pos.bMtrlPawns) / 2;  if (m <= minM)   return 0;  final int maxM=qV + 2 * rV + 2 * bV + 2 * nV;  int score=kingSafetyKPPart(pos);  if (Position.getY(pos.wKingSq) == 0) {    if (((pos.pieceTypeBB[Piece.WKING] & 0x60L) != 0) && ((pos.pieceTypeBB[Piece.WROOK] & 0xC0L) != 0) && ((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskFile[6]) != 0)&& ((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskFile[7]) != 0)) {      score-=6 * 15;    } else     if (((pos.pieceTypeBB[Piece.WKING] & 0x6L) != 0) && ((pos.pieceTypeBB[Piece.WROOK] & 0x3L) != 0) && ((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskFile[0]) != 0)&& ((pos.pieceTypeBB[Piece.WPAWN] & BitBoard.maskFile[1]) != 0)) {      score-=6 * 15;    }  }  if (Position.getY(pos.bKingSq) == 7) {    if (((pos.pieceTypeBB[Piece.BKING] & 0x6000000000000000L) != 0) && ((pos.pieceTypeBB[Piece.BROOK] & 0xC000000000000000L) != 0) && ((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskFile[6]) != 0)&& ((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskFile[7]) != 0)) {      score+=6 * 15;    } else     if (((pos.pieceTypeBB[Piece.BKING] & 0x600000000000000L) != 0) && ((pos.pieceTypeBB[Piece.BROOK] & 0x300000000000000L) != 0) && ((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskFile[0]) != 0)&& ((pos.pieceTypeBB[Piece.BPAWN] & BitBoard.maskFile[1]) != 0)) {      score+=6 * 15;    }  }  score+=(bKingAttacks - wKingAttacks) * 4;  final int kSafety=interpolate(m,minM,0,maxM,score);  return kSafety;}  }
class C{  public void testConnectionUrl() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  String url=this.baseJdbcUrl + "&fabricServerGroup=fabric_test1_global";  Connection c=DriverManager.getConnection(url,this.username,this.password);  ResultSet rs=c.createStatement().executeQuery("select user()");  rs.next();  String userFromDb=rs.getString(1).split("@")[0];  assertEquals(this.username,userFromDb);  rs.close();  c.close();}  }
class C{  public static InputStream createGzipInputStream(InputStream in) throws IOException {  return sOverrideGzip ? new WorkingGzipInputStream(in) : new GZIPInputStream(in);}  }
class C{  public void removeBuilder(Builder builder){  String name=Integer.toString(builder.hashCode());  dependencies.remove(name);  dependencies.removeVertex(name);}  }
class C{  public void configureDomainAxes(){  for (  ValueAxis axis : this.domainAxes.values()) {    if (axis != null) {      axis.configure();    }  }}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers)     w.interruptIfStarted();  }  finally {    mainLock.unlock();  }}  }
class C{  public String replicaSetName(){  return replicaSetName;}  }
class C{  public void addClaimedSignerRole(final String claimedSignerRole){  if ((claimedSignerRole == null) || (claimedSignerRole.length() == 0)) {    throw new NullPointerException("claimedSignerRole");  }  if (claimedSignerRoles == null) {    claimedSignerRoles=new ArrayList<String>();  }  claimedSignerRoles.add(claimedSignerRole);}  }
class C{  public ResultVO errorResp(Logger logger,Throwable e,ErrorType errorType,String msg){  LogUtils.traceError(logger,e,errorType.description());  return new ResultVO(errorType.name(),OperationStatus.FAILURE,msg);}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 < p2) ? p1 : p2;}  }
class C{  public static void openAppInAppStore(@NonNull final Context context){  final Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final List<Uri> uris=config.getAppUpdateUris();  if (uris.isEmpty())   return;  final PackageManager packageManager=context.getPackageManager();  final String installerPackageName=packageManager.getInstallerPackageName(BuildConfig.APPLICATION_ID);  if (installerPackageName != null) {    for (    final Uri uri : uris) {      intent.setData(uri);      final List<ResolveInfo> resolveInfoList=packageManager.queryIntentActivities(intent,0);      for (      final ResolveInfo resolveInfo : resolveInfoList) {        final ActivityInfo activityInfo=resolveInfo.activityInfo;        final String packageName=activityInfo.applicationInfo.packageName;        if (packageName.equals(installerPackageName)) {          intent.setClassName(packageName,activityInfo.name);          try {            context.startActivity(intent);            return;          } catch (          ActivityNotFoundException e) {            intent.setComponent(null);          }        }      }    }  }  for (  final Uri uri : uris) {    intent.setData(uri);    try {      context.startActivity(intent);      return;    } catch (    ActivityNotFoundException e) {    }  }  Toast.makeText(context,R.string.app_version_upgrade_app_store_unavailable,Toast.LENGTH_SHORT).show();}  }
class C{  public boolean isHeading(){  return m_vo.IsHeading;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 1) {    usage("Incorrect argument list.");  }  String url=args[0];  if (url.indexOf("://") == -1) {    File f=new File(url);    if (f.exists()) {      Java2DRenderer renderer=new Java2DRenderer(f,1024);      renderer.setBufferedImageType(BufferedImage.TYPE_INT_RGB);      BufferedImage image=renderer.getImage();      FSImageWriter imageWriter=new FSImageWriter();      String path=f.getAbsolutePath();      path=path.substring(0,path.lastIndexOf("."));      imageWriter.write(image,path + ".png");      BufferedImage img=Graphics2DRenderer.renderToImageAutoSize(f.toURI().toURL().toExternalForm(),1024,BufferedImage.TYPE_INT_ARGB);      ImageIO.write(img,"png",new File(path + "-G2DR.png"));    } else {      usage("File to render is not found: " + url);    }  } else {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.182 -0400",hash_original_method="60B6CCFAFDF5E8C5969A54AE7E32B957",hash_generated_method="FCF6438A9916697D5FE9F73949508196") public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public GdbInfoBreak infoBreak() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("info break");  return GdbInfoBreak.parse(gdbOutput);}  }
class C{  private void QuickSort(double a[],int lo0,int hi0){  int lo=lo0;  int hi=hi0;  double mid;  if (hi0 > lo0) {    mid=a[(lo0 + hi0) / 2];    while (lo <= hi) {      while ((lo < hi0) && (a[lo] < mid)) {        ++lo;      }      while ((hi > lo0) && (a[hi] > mid)) {        --hi;      }      if (lo <= hi) {        swap(a,lo,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort(a,lo0,hi);    }    if (lo < hi0) {      QuickSort(a,lo,hi0);    }  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 1)   throw new IllegalArgumentException("must supply a set of host:port tuples");  List<Address> members=new ArrayList<>();  for (  String arg : args) {    String[] parts=arg.split(":");    members.add(new Address(parts[0],Integer.valueOf(parts[1])));  }  CopycatClient client=CopycatClient.builder().withTransport(new NettyTransport()).withConnectionStrategy(ConnectionStrategies.FIBONACCI_BACKOFF).withRecoveryStrategy(RecoveryStrategies.RECOVER).withServerSelectionStrategy(ServerSelectionStrategies.LEADER).build();  client.serializer().register(SetCommand.class,1);  client.serializer().register(GetQuery.class,2);  client.serializer().register(DeleteCommand.class,3);  client.connect(members).join();  AtomicInteger counter=new AtomicInteger();  AtomicLong timer=new AtomicLong();  client.context().schedule(Duration.ofSeconds(1),Duration.ofSeconds(1),null);  for (int i=0; i < 10; i++) {    recursiveSet(client,counter);  }  while (client.state() != CopycatClient.State.CLOSED) {    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      break;    }  }}  }
class C{  public void RegisterSwfDomain(AmazonSimpleWorkflow swf,String name){  RegisterDomainRequest request=new RegisterDomainRequest().withName(name);  request.setWorkflowExecutionRetentionPeriodInDays("10");  try {    swf.registerDomain(request);  } catch (  DomainAlreadyExistsException e) {    System.out.println("Domain already exists!");  }}  }
class C{  public void testLocalLoadServer() throws Exception {  cacheMode=CacheMode.LOCAL;  factory=new Factory3();  startGrids(2);  Ignite client=startGrid("client-1");  IgniteCache cache=grid(0).cache(CACHE_NAME);  cache.loadCache(null);  assertEquals(10,cache.localSize(CachePeekMode.ALL));  assertEquals(0,grid(1).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assertEquals(0,client.cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assert !loadedFromClient : "Loaded data from client!";}  }
class C{  public static Function<JsonObject,String> asString(){  return null;}  }
class C{  public SQLDataException(Throwable cause){  super(cause);}  }
class C{  public ShopSpinnerAdapter(Activity activity,List<Shop> shops,boolean viewTextWhite){  super(activity,layoutID,shops);  this.layoutInflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  this.shops=shops;  this.viewTextWhite=viewTextWhite;}  }
class C{  protected static void expand(InputStream input,File docBase,String name) throws IOException {  File file=new File(docBase,name);  BufferedOutputStream output=new BufferedOutputStream(new FileOutputStream(file));  byte buffer[]=new byte[2048];  while (true) {    int n=input.read(buffer);    if (n <= 0)     break;    output.write(buffer,0,n);  }  output.close();}  }
class C{  public QoSSentinel(String name){  this.name=name;  lowestPercentileValue=Double.MAX_VALUE;}  }
class C{  public JSONObject put(String key,Map<?,?> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public boolean isPrimitive(){  return structure.isPrimitive();}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void removeHighlights(final JTextComponent textComp){  Highlighter hilite=textComp.getHighlighter();  Highlighter.Highlight[] hilites=hilite.getHighlights();  for (int i=0; i < hilites.length; i++) {    if (hilites[i].getPainter() instanceof MyHighlightPainter) {      hilite.removeHighlight(hilites[i]);    }  }}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  @ReactMethod public void rCreate(Integer notificationID,ReadableMap notificationAttributes,Callback errorCallback,Callback successCallback){  try {    NotificationAttributes a=getNotificationAttributesFromReadableMap(notificationAttributes);    Notification n=mNotificationManager.createOrUpdate(notificationID,a);    successCallback.invoke(n.getAttributes().asReadableMap());  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rCreate Error: " + Log.getStackTraceString(e));  }}  }
class C{  public void write(CharSequence csq) throws IOException {  if (_output == null)   throw new IOException("Writer closed");  _output.append(csq);}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  boolean tmpElement;  boolean[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public ComponentValidationException(String message){  super(message);}  }
class C{  private DatabaseManager(String propertiesFileName){  super();  this.propertiesFileName=propertiesFileName;  try {    init();  } catch (  AdeException e) {    mLogger.error("Error encountered initilizing the database manager.",e);    dbPropertiesInitialized=false;  }}  }
class C{  public void copy(final IGame game,MoveStep prev){  if (prev == null) {    setFromEntity(getEntity(),game);    return;  }  hasJustStood=prev.hasJustStood;  facing=prev.getFacing();  position=prev.getPosition();  distance=prev.getDistance();  mpUsed=prev.mpUsed;  totalHeat=prev.totalHeat;  isPavementStep=prev.isPavementStep;  onlyPavement=prev.onlyPavement;  thisStepBackwards=prev.thisStepBackwards;  isProne=prev.isProne;  isFlying=prev.isFlying;  isHullDown=prev.isHullDown;  climbMode=prev.climbMode;  isRunProhibited=prev.isRunProhibited;  hasEverUnloaded=prev.hasEverUnloaded;  elevation=prev.elevation;  altitude=prev.altitude;  velocity=prev.velocity;  velocityN=prev.velocityN;  velocityLeft=prev.velocityLeft;  nTurns=prev.nTurns;  isEvading=prev.isEvading;  isShuttingDown=prev.isShuttingDown;  isStartingUp=prev.isStartingUp;  isSelfDestructing=prev.isSelfDestructing;  nRolls=prev.nRolls;  isRolled=prev.isRolled;  mv=prev.mv.clone();  freeTurn=prev.freeTurn;  nStraight=prev.nStraight;  nDown=prev.nDown;  nMoved=prev.nMoved;}  }
class C{  public void unzipStorageData(String fileName) throws BusinessException, IOException, SerializationException {  Path zipPath=Paths.get(fileName);  IStorageData packedStorageData=getStorageDataFromZip(zipPath);  this.unzipStorageData(zipPath,getStoragePath(packedStorageData));  List<LocalStorageData> localStorageDataList=getMountedStoragesFromDisk();  for (  LocalStorageData localStorageData : localStorageDataList) {    if (localStorageData.isFullyDownloaded() && !downloadedStorages.contains(localStorageData)) {      downloadedStorages.add(localStorageData);      for (      StorageData storageData : getOnlineStorages().keySet()) {        if (ObjectUtils.equals(storageData.getId(),localStorageData.getId())) {          updateLocalStorageData(localStorageData,storageData);          break;        }      }      break;    }  }}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((NominalToString)m_FilteredClassifier.getFilter()).setAttributeIndexes("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  void addAll(Word other){  for (  Entry<Page,Weight> entry : other.pages.entrySet()) {    Page p=entry.getKey();    Weight w=entry.getValue();    addPage(p,w.value);  }}  }
class C{  private void loadCountriesFiles(String filePath) throws Exception {  SAXReader reader=new SAXReader();  Document document=reader.read(new File(filePath,ImportInitvalues.nameOfCountriesFile));  Element root=document.getRootElement();  for (@SuppressWarnings("rawtypes") Iterator it=root.elementIterator("country"); it.hasNext(); ) {    Element item=(Element)it.next();    statemanagement.addState(item.attributeValue("name"),item.attributeValue("short"),Integer.parseInt(item.attributeValue("code")));  }  log.debug("Countries ADDED");}  }
class C{  public boolean isOffline(){  return offline;}  }
class C{  @YesNoResult public static int showYesNoDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String yesText,@NotNull String noText,@Nullable Icon icon,@Nullable DialogWrapper.DoNotAskOption doNotAskOption){  try {    if (canShowMacSheetPanel()) {      return MacMessages.getInstance().showYesNoDialog(title,message,yesText,noText,null,doNotAskOption);    }  } catch (  MessageException messageException) {  }catch (  Exception exception) {    LOG.error(exception);  }  int result=showDialog(message,title,new String[]{yesText,noText},0,icon,doNotAskOption) == 0 ? YES : NO;  LOG.assertTrue(result == YES || result == NO,result);  return result;}  }
class C{  @Override public void addQueueSimulationListeners(MobsimListener listener){  this.listenerManager.addQueueSimulationListener(listener);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:    return typeArgs != null && !typeArgs.isEmpty();case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET:  return target != null;case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS:return arguments != null && !arguments.isEmpty();}return super.eIsSet(featureID);}  }
class C{  boolean isErrorReportingEnabled(){  return errorsStatusStack.isEmpty() || errorsStatusStack.peek();}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage){  if (!XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_RETRIEVALMETHOD)) {    return null;  }  try {    RetrievalMethod rm=new RetrievalMethod(element,baseURI);    String type=rm.getType();    XMLSignatureInput resource=resolveInput(rm,baseURI,secureValidation);    if (RetrievalMethod.TYPE_RAWX509.equals(type)) {      X509Certificate cert=getRawCertificate(resource);      if (cert != null) {        return cert.getPublicKey();      }      return null;    }    Element e=obtainReferenceElement(resource);    if (XMLUtils.elementIsInSignatureSpace(e,Constants._TAG_RETRIEVALMETHOD)) {      if (secureValidation) {        String error="Error: It is forbidden to have one RetrievalMethod " + "point to another with secure validation";        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,error);        }        return null;      }      RetrievalMethod rm2=new RetrievalMethod(e,baseURI);      XMLSignatureInput resource2=resolveInput(rm2,baseURI,secureValidation);      Element e2=obtainReferenceElement(resource2);      if (e2 == element) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"Error: Can't have RetrievalMethods pointing to each other");        }        return null;      }    }    return resolveKey(e,baseURI,storage);  } catch (  XMLSecurityException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"XMLSecurityException",ex);    }  }catch (  CertificateException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"CertificateException",ex);    }  }catch (  IOException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"IOException",ex);    }  }catch (  ParserConfigurationException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"ParserConfigurationException",e);    }  }catch (  SAXException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"SAXException",e);    }  }  return null;}  }
class C{  public SabresQuery(Class<T> clazz){  this.clazz=clazz;  name=clazz.getSimpleName();  innerQueries=null;}  }
class C{  public boolean isLoggable(Level lev){  return logger.isLoggable(lev);}  }
class C{  @Override public MemChunkHolder<A> resize(long size){  return m_allocator.resizeChunk(this,size);}  }
class C{  protected static double toDouble(String s){  try {    return Double.parseDouble(s);  } catch (  Exception e) {    TestCase.fail("Failed to parse double: " + s + "\n"+ throwableToString(e));    return Double.NaN;  }}  }
class C{  public void connect(){  Intent intent=new Intent(mContext,MediaPlayerService.class);  mContext.bindService(intent,mServiceConnection,Context.BIND_AUTO_CREATE);}  }
class C{  public static Point convertToRelativePoint(final Point p,final int processIndex,final ProcessRendererModel model){  double xOffset=0;  for (int i=0; i < model.getProcesses().size(); i++) {    if (i == processIndex) {      return new Point((int)(p.getX() - xOffset),(int)p.getY());    }    xOffset+=ProcessDrawer.WALL_WIDTH * 2 + model.getProcessWidth(model.getProcess(i));  }  return null;}  }
class C{  public static Method findMethod(Collection<Method> methods,Method testMethod){  for (  Method method : methods) {    if (isMatch(method,testMethod))     return method;  }  return null;}  }
class C{  public boolean isFocusTraversable(){  return false;}  }
class C{  public LauncherBuilder nativeFastCheck(boolean nativeFastCheck){  this.nativeFastCheck=nativeFastCheck;  return this;}  }
class C{  public static boolean isGreaterEqual(double d1,double d2){  if (Double.isNaN(d1) || Double.isNaN(d2)) {    return false;  }  return Double.compare(d1,d2) > 0 || isEqual(d1,d2);}  }
class C{  public static String leftPad(String s,int minLength){  return leftPad(s,minLength,' ');}  }
class C{  public static void printConcat(Object... messages){  if (!isDisabled()) {    buffer.setLength(0);    for (int i=0; i < messages.length; i++) {      buffer.append(String.valueOf(messages[i]));    }    print(buffer);  }}  }
class C{  VPlexStorageViewInfo findStorageViewOnCluster(String viewName,String clusterName,Boolean includeDetails) throws VPlexApiException {  return findStorageViewOnCluster(viewName,clusterName,includeDetails,false);}  }
class C{  public boolean createBlockSnapshotStep(URI storageURI,List<URI> snapshotList,Boolean createInactive,Boolean readOnly,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  try {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageURI);    BlockController controller=getController(BlockController.class,storageSystem.getSystemType());    controller.createSnapshot(storageURI,snapshotList,createInactive,readOnly,stepId);  } catch (  Exception e) {    WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(e));    return false;  }  return true;}  }
class C{  public void mouseClicked(MouseEvent evt){  if (evt.isPopupTrigger()) {    if (this.isEnabled()) {      createPopup(evt.getPoint());    }  }}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  Arc2D arc=new Arc2D.Float(x,y,width,height,startAngle,arcAngle,Arc2D.PIE);  fill(arc);}  }
class C{  public R proceed1(final T1 param){  return fn.apply(param,param2);}  }
class C{  public IncreaseXPAction(final int xpDiff){  this.xpDiff=xpDiff;}  }
class C{  private void processAllHosts(StorageSystem system,VNXeApiClient apiClient,DbClient dbClient,PartitionManager partitionManager){  Map<URI,List<String>> hostToVolumesMap=new HashMap<URI,List<String>>();  Map<String,URI> volumeToPoolMap=new HashMap<String,URI>();  Map<String,URI> hostIdToHostURIMap=new HashMap<String,URI>();  Map<String,Set<URI>> volumeToHostsMap=new HashMap<String,Set<URI>>();  Set<String> systemIds=new HashSet<String>();  systemIds.add(system.getId().toString());  try {    processAllLuns(system,apiClient,dbClient,hostToVolumesMap,volumeToHostsMap,volumeToPoolMap,hostIdToHostURIMap);    List<Host> hostsToUpdate=new ArrayList<Host>();    List<URI> hostURIs=dbClient.queryByType(Host.class,true);    Iterator<Host> hosts=dbClient.queryIterativeObjectFields(Host.class,ArrayAffinityDiscoveryUtils.HOST_PROPERTIES,hostURIs);    while (hosts.hasNext()) {      Host host=hosts.next();      if (host != null && !host.getInactive()) {        logger.info("Processing host {}",host.getLabel());        Map<String,String> preferredPoolMap=new HashMap<String,String>();        List<String> volumes=hostToVolumesMap.get(host.getId());        if (volumes != null && !volumes.isEmpty()) {          for (          String volume : volumes) {            URI pool=volumeToPoolMap.get(volume);            if (pool != null) {              String exportType=volumeToHostsMap.get(volume).size() > 1 ? ExportGroup.ExportGroupType.Cluster.name() : ExportGroup.ExportGroupType.Host.name();              ArrayAffinityDiscoveryUtils.addPoolToPreferredPoolMap(preferredPoolMap,pool.toString(),exportType);            }          }        }        if (ArrayAffinityDiscoveryUtils.updatePreferredPools(host,systemIds,dbClient,preferredPoolMap)) {          hostsToUpdate.add(host);        }      }      if (hostsToUpdate.size() >= BATCH_SIZE) {        partitionManager.updateInBatches(hostsToUpdate,BATCH_SIZE,dbClient,HOST);        hostsToUpdate.clear();      }    }    if (!hostsToUpdate.isEmpty()) {      partitionManager.updateInBatches(hostsToUpdate,BATCH_SIZE,dbClient,HOST);    }  } catch (  Exception e) {    logger.warn("Exception on processAllHosts",e);  }}  }
class C{  public double loadDouble(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public static String readPref(final PreferencesManager preferencesManager,final String editorKey){  final String keymapPrefAsJson=preferencesManager.getValue(KEYMAP_PREF_KEY);  if (keymapPrefAsJson == null || keymapPrefAsJson.isEmpty()) {    return null;  }  JSONValue propertyObject;  try {    final JSONValue parseResult=JSONParser.parseStrict(keymapPrefAsJson);    propertyObject=parseResult.isObject().get(editorKey);  } catch (  final RuntimeException e) {    Log.error(KeymapPrefReader.class,"Error during preference parsing.",e);    return null;  }  if (propertyObject == null) {    return null;  }  String propertyValue;  try {    propertyValue=propertyObject.isString().stringValue();  } catch (  final RuntimeException e) {    Log.error(KeymapPrefReader.class,"Invalid value for keymap preference.",e);    return null;  }  return propertyValue;}  }
class C{  public static boolean filterAcceptsAnyResource(final IResource[] resources,final ResourceFilter filter){  for (int i=0; i < resources.length; i++) {    if (resources[i] == null) {      continue;    }    if (filter.filter(resources[i]).isAccept()) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("deprecation") public void exit(Context context,boolean isClearCache){  try {    finishAllActivity();    if (context != null) {      ActivityManager activityMgr=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);      activityMgr.restartPackage(context.getPackageName());    }    if (isClearCache) {      LruCacheManager.getInstance().evictAll();      CacheManager.clearAll();    }    System.exit(0);    android.os.Process.killProcess(android.os.Process.myPid());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public ClipData(ClipDescription description,Item item){  mClipDescription=description;  if (item == null) {    throw new NullPointerException("item is null");  }  mIcon=null;  mItems=new ArrayList<Item>();  mItems.add(item);}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  @RequestMapping(value="/{ingredient}",method=RequestMethod.POST) public WebAsyncTask<Ingredient> ingredients(@PathVariable("ingredient") IngredientType ingredientType,@RequestHeader("PROCESS-ID") String processId,@RequestHeader(TestConfigurationHolder.TEST_COMMUNICATION_TYPE_HEADER_NAME) String testCommunicationType){  log.info("Received a request to [/{}] with process id [{}] and communication type [{}]",ingredientType,processId,testCommunicationType);  return new WebAsyncTask<>(null);}  }
class C{  public static AsyncCreateInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncCreateInstanceE object=new AsyncCreateInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncCreateInstance").equals(reader.getName())) {          object.setAsyncCreateInstance(org.oscm.xsd.AsyncCreateInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof StunDiscoveryReport))   return false;  if (obj == this)   return true;  StunDiscoveryReport target=(StunDiscoveryReport)obj;  return (target.getNatType() == getNatType() && (getPublicAddress() == null && target.getPublicAddress() == null || target.getPublicAddress().equals(getPublicAddress())));}  }
class C{  public static boolean isDtoSetter(Method method){  if (method.isAnnotationPresent(DelegateTo.class)) {    return false;  }  String methodName=method.getName();  return methodName.startsWith("set") && method.getParameterTypes().length == 1;}  }
class C{  void execute(RosieUseCase useCase,UseCaseParams useCaseParams){  UseCaseFilter.filter(useCase,useCaseParams);  useCase.setOnSuccessCallback(useCaseParams.getOnSuccessCallback());  useCase.setOnErrorCallback(new OnErrorCallbackToErrorHandlerAdapter(errorHandler,useCaseParams.getOnErrorCallback()));  UseCaseWrapper useCaseWrapper=new UseCaseWrapper(useCase,useCaseParams,errorHandler);  taskScheduler.execute(useCaseWrapper);}  }
class C{  private void initSeq(int sequenceNumber){  baseSeq=sequenceNumber;  maxSeq=sequenceNumber;  badSeq=RTP_SEQ_MOD + 1;  cycles=0;  received=0;  receivedPrior=0;  expectedPrior=0;}  }
class C{  @SuppressWarnings("deprecation") public void runCommand(String commands) throws Exception {  System.out.println("> " + commands + '\n');  System.out.flush();  String[] commandArgs=Utils.splitOptions(commands);  if (commandArgs.length == 0) {    return;  }  if (commandArgs[0].equals("java")) {    commandArgs[0]="";    try {      if (commandArgs.length == 1) {        throw new Exception("No class name given");      }      String className=commandArgs[1];      commandArgs[1]="";      if (m_RunThread != null) {        throw new Exception("An object is already running, use \"break\"" + " to interrupt it.");      }      Class<?> theClass=Class.forName(className);      Vector<String> argv=new Vector<String>();      for (int i=2; i < commandArgs.length; i++) {        argv.add(commandArgs[i]);      }      m_RunThread=new ClassRunner(theClass,argv.toArray(new String[argv.size()]));      m_RunThread.setPriority(Thread.MIN_PRIORITY);      m_RunThread.start();    } catch (    Exception ex) {      System.err.println(ex.getMessage());    }  } else   if (commandArgs[0].equals("capabilities")) {    try {      Object obj=Class.forName(commandArgs[1]).newInstance();      if (obj instanceof CapabilitiesHandler) {        if (obj instanceof OptionHandler) {          Vector<String> args=new Vector<String>();          for (int i=2; i < commandArgs.length; i++) {            args.add(commandArgs[i]);          }          ((OptionHandler)obj).setOptions(args.toArray(new String[args.size()]));        }        Capabilities caps=((CapabilitiesHandler)obj).getCapabilities();        System.out.println(caps.toString().replace("[","\n").replace("]","\n"));      } else {        System.out.println("'" + commandArgs[1] + "' is not a "+ CapabilitiesHandler.class.getName()+ "!");      }    } catch (    Exception e) {      System.err.println(e.getMessage());    }  } else   if (commandArgs[0].equals("cls")) {    m_OutputArea.setText("");  } else   if (commandArgs[0].equals("history")) {    System.out.println("Command history:");    for (int i=0; i < m_CommandHistory.size(); i++) {      System.out.println(m_CommandHistory.get(i));    }    System.out.println();  } else   if (commandArgs[0].equals("break")) {    if (m_RunThread == null) {      System.err.println("Nothing is currently running.");    } else {      System.out.println("[Interrupt...]");      m_RunThread.interrupt();    }  } else   if (commandArgs[0].equals("kill")) {    if (m_RunThread == null) {      System.err.println("Nothing is currently running.");    } else {      System.out.println("[Kill...]");      m_RunThread.stop();      m_RunThread=null;    }  } else   if (commandArgs[0].equals("exit")) {    Container parent=getParent();    Container frame=null;    boolean finished=false;    while (!finished) {      if ((parent instanceof JFrame) || (parent instanceof Frame) || (parent instanceof JInternalFrame)) {        frame=parent;        finished=true;      }      if (!finished) {        parent=parent.getParent();        finished=(parent == null);      }    }    if (frame != null) {      if (frame instanceof JInternalFrame) {        ((JInternalFrame)frame).doDefaultCloseAction();      } else {        ((Window)frame).dispatchEvent(new WindowEvent((Window)frame,WindowEvent.WINDOW_CLOSING));      }    }  } else {    boolean help=((commandArgs.length > 1) && commandArgs[0].equals("help"));    if (help && commandArgs[1].equals("java")) {      System.out.println("java <classname> <args>\n\n" + "Starts the main method of <classname> with " + "the supplied command line arguments (if any).\n"+ "The command is started in a separate thread, "+ "and may be interrupted with the \"break\"\n"+ "command (friendly), or killed with the \"kill\" "+ "command (unfriendly).\n"+ "Redirecting can be done with '>' followed by the "+ "file to write to, e.g.:\n"+ "  java some.Class > ." + File.separator + "some.txt");    } else     if (help && commandArgs[1].equals("break")) {      System.out.println("break\n\n" + "Attempts to nicely interrupt the running job, " + "if any. If this doesn't respond in an\n"+ "acceptable time, use \"kill\".\n");    } else     if (help && commandArgs[1].equals("kill")) {      System.out.println("kill\n\n" + "Kills the running job, if any. You should only " + "use this if the job doesn't respond to\n"+ "\"break\".\n");    } else     if (help && commandArgs[1].equals("capabilities")) {      System.out.println("capabilities <classname> <args>\n\n" + "Lists the capabilities of the specified class.\n" + "If the class is a " + OptionHandler.class.getName() + " then\n"+ "trailing options after the classname will be\n"+ "set as well.\n");    } else     if (help && commandArgs[1].equals("cls")) {      System.out.println("cls\n\n" + "Clears the output area.\n");    } else     if (help && commandArgs[1].equals("history")) {      System.out.println("history\n\n" + "Prints all issued commands.\n");    } else     if (help && commandArgs[1].equals("exit")) {      System.out.println("exit\n\n" + "Exits the SimpleCLI program.\n");    } else {      System.out.println("Command must be one of:\n" + "\tjava <classname> <args> [ > file]\n" + "\tbreak\n"+ "\tkill\n"+ "\tcapabilities <classname> <args>\n"+ "\tcls\n"+ "\thistory\n"+ "\texit\n"+ "\thelp <command>\n");    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.922 -0500",hash_original_method="8DBC4EF4AD92DA8E96BA5DD8978DFCC3",hash_generated_method="CD1D77D9A778F7D82D8B86B86F8CEF90") private void checkEnabledCipherSuites() throws SSLException {  for (  String enabledCipherSuite : enabledCipherSuites) {    if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {      continue;    }    String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();    if (keyType == null) {      return;    }    if (keyType.equals(CipherSuite.KEY_TYPE_RSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_RSA)) {      if (checkForPrivateKey(keyType,RSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_DSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_DSA)) {      if (checkForPrivateKey(keyType,DSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_EC) || keyType.equals(CipherSuite.KEY_TYPE_EC_RSA) || keyType.equals(CipherSuite.KEY_TYPE_EC_EC)) {      if (checkForPrivateKey(keyType,ECPrivateKey.class)) {        return;      }      continue;    }    throw new IllegalStateException("Unknown key type " + keyType);  }  throw new SSLException("Could not find any key store entries " + "to support the enabled cipher suites.");}  }
class C{  public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(this,branchID);}  }
class C{  public Builder<KType,VType> fRemove(KType key){  map.remove(key);  return this;}  }
class C{  public Version(String version){  this.version=version;  this.numericVersion=getNumericVersion(version);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void testKnownValues(int numberOfTests){  logger.info("Test known values...");  boolean knownValueInterpUseful=true;  for (int i=0; i < numberOfTests; i++) {    double xCoord=(Math.random() * (this.sg.getXmax() - this.sg.getXmin() + this.sg.getResolution()) + this.sg.getXmin());    xCoord-=xCoord % this.sg.getResolution();    double yCoord=(Math.random() * (this.sg.getYmax() - this.sg.getYmin()) + this.sg.getYmin());    yCoord-=yCoord % this.sg.getResolution();    knownValueInterpUseful=testSpecificValue(xCoord,yCoord,this.sg.getValue(xCoord,yCoord),this.interpolation.interpolate(xCoord,yCoord));  }  if (!knownValueInterpUseful) {    logger.warn("The tested known values are not interpolated useful!");    this.interpolationUseful=false;  }}  }
class C{  protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){  FastMap<String> declaredProperties=new FastMap<String>();  String backColor=context.readWidgetProperty("backColor");  if (backColor != null && backColor.length() > 0) {    declaredProperties.put("backColor",backColor);  }  String fontName=context.readWidgetProperty("fontName");  if (fontName != null && fontName.length() > 0) {    declaredProperties.put("fontName",fontName);  }  String fontSize=context.readWidgetProperty("fontSize");  if (fontSize != null && fontSize.length() > 0) {    declaredProperties.put("fontSize",fontSize);  }  String foreColor=context.readWidgetProperty("foreColor");  if (foreColor != null && foreColor.length() > 0) {    declaredProperties.put("foreColor",foreColor);  }  String justification=context.readWidgetProperty("justification");  if (justification != null && justification.length() > 0) {    declaredProperties.put("justification",justification);  }  String bold=context.readWidgetProperty("bold");  if (bold != null && bold.length() > 0) {    declaredProperties.put("bold",bold);  }  String italic=context.readWidgetProperty("italic");  if (italic != null && italic.length() > 0) {    declaredProperties.put("italic",italic);  }  String subscript=context.readWidgetProperty("subscript");  if (subscript != null && subscript.length() > 0) {    declaredProperties.put("subscript",subscript);  }  String superscript=context.readWidgetProperty("superscript");  if (superscript != null && superscript.length() > 0) {    declaredProperties.put("superscript",superscript);  }  String underline=context.readWidgetProperty("underline");  if (underline != null && underline.length() > 0) {    declaredProperties.put("underline",underline);  }  String strikethrough=context.readWidgetProperty("strikethrough");  if (strikethrough != null && strikethrough.length() > 0) {    declaredProperties.put("strikethrough",strikethrough);  }  return declaredProperties;}  }
class C{  void handleEvent(int event,String remainder){switch (event) {case DISCONNECTED:    handleNetworkStateChange(NetworkInfo.DetailedState.DISCONNECTED,remainder);  break;case CONNECTED:handleNetworkStateChange(NetworkInfo.DetailedState.CONNECTED,remainder);break;case SCAN_RESULTS:mStateMachine.sendMessage(SCAN_RESULTS_EVENT);break;case UNKNOWN:break;}}  }
class C{  public TaskFigure(){  super(new RectangleFigure());  setLayouter(new VerticalLayouter());  RectangleFigure nameCompartmentPF=new RectangleFigure();  nameCompartmentPF.set(STROKE_COLOR,null);  nameCompartmentPF.setAttributeEnabled(STROKE_COLOR,false);  nameCompartmentPF.set(FILL_COLOR,null);  nameCompartmentPF.setAttributeEnabled(FILL_COLOR,false);  ListFigure nameCompartment=new ListFigure(nameCompartmentPF);  ListFigure attributeCompartment=new ListFigure();  SeparatorLineFigure separator1=new SeparatorLineFigure();  add(nameCompartment);  add(separator1);  add(attributeCompartment);  Insets2D.Double insets=new Insets2D.Double(4,8,4,8);  nameCompartment.set(LAYOUT_INSETS,insets);  attributeCompartment.set(LAYOUT_INSETS,insets);  TextFigure nameFigure;  nameCompartment.add(nameFigure=new TextFigure());  nameFigure.set(FONT_BOLD,true);  nameFigure.setAttributeEnabled(FONT_BOLD,false);  TextFigure durationFigure;  attributeCompartment.add(durationFigure=new TextFigure());  durationFigure.set(FONT_BOLD,true);  durationFigure.setText("0");  durationFigure.setAttributeEnabled(FONT_BOLD,false);  TextFigure startTimeFigure;  attributeCompartment.add(startTimeFigure=new TextFigure());  startTimeFigure.setEditable(false);  startTimeFigure.setText("0");  startTimeFigure.setAttributeEnabled(FONT_BOLD,false);  setAttributeEnabled(STROKE_DASHES,false);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.pert.Labels");  setName(labels.getString("pert.task.defaultName"));  setDuration(0);  dependencies=new HashSet<DependencyFigure>();  nameFigure.addFigureListener(new NameAdapter(this));  durationFigure.addFigureListener(new DurationAdapter(this));}  }
class C{  @Override public void update(final int completed){  boolean w=false;synchronized (this) {    count+=completed;    if (total != UNKNOWN) {      int percent=count * 100 / total;      if (percent > lastPercent) {        lastPercent=percent;        w=true;      }    }  }  if (w) {    wakeUp();  }}  }
class C{  private void createNewToAllocMap(){  newToAllocNodeMap=HashBiMap.create();  allAllocNodes=new LinkedHashSet<AllocNode>();  Map<SootClass,Integer> nodeCount=new LinkedHashMap<SootClass,Integer>();  int realSize=0;  for (  AllocNode node : ptsProvider.getAllocNodes()) {    if (!(node instanceof InsensitiveAllocNode)) {      logger.error("Found non-insensitive node in ptsProvider.getAllocNodes()");      droidsafe.main.Main.exit(1);    }    InsensitiveAllocNode insNode=(InsensitiveAllocNode)node;    newToAllocNodeMap.put(node.getNewExpr(),insNode);    realSize++;    allAllocNodes.add(node);    for (    Map.Entry<Context,ObjectSensitiveAllocNode> entry : insNode.getContextNodeMap().entrySet()) {      allAllocNodes.add(entry.getValue());    }  }  System.out.println("Alloc node size (insensitive objects): " + realSize);}  }
class C{  public static void doFeed(){  try {    LogWriterUtils.getLogWriter().info("Putting entries...");    Cache cacheClient=GemFireCacheImpl.getInstance();    Region r1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    Region r3=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME3);    r1.put("key-1","00");    r2.put("key-1","00");    r3.put("key-1","00");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region doing ops",ex);  }}  }
class C{  public OwnerImpl(PrincipalImpl owner){  ownerList=new Vector<Principal>();  ownerList.addElement(owner);}  }
class C{  public AuthInfo(){}  }
class C{  public static MethodHelpDto fromMethodClass(String parentPath,Method method){  String methodName=_getHttpMethod(method);  Path path=method.getAnnotation(Path.class);  Description description=method.getAnnotation(Description.class);  Produces produces=method.getAnnotation(Produces.class);  Consumes consumes=method.getAnnotation(Consumes.class);  if ((path == null || !path.value().contains("help")) && description != null) {    String relativePath=path == null ? "" : path.value();    String fullPath=parentPath == null ? relativePath : parentPath + relativePath;    MethodHelpDto result=new MethodHelpDto();    result.setDescription(description.value());    result.setMethod(methodName);    result.setPath(fullPath);    if (produces != null) {      result.setProduces(produces.value());    }    if (consumes != null) {      result.setConsumes(consumes.value());    }    List<MethodParameterDto> params=_getMethodParams(method);    result.setParams(params);    return result;  } else {    return null;  }}  }
class C{  private static void readBugCollectionAndProject(IProject project,IProgressMonitor monitor,boolean useCloud) throws IOException, DocumentException, CoreException {  SortedBugCollection bugCollection;  IPath bugCollectionPath=getBugCollectionFile(project);  File bugCollectionFile=bugCollectionPath.toFile();  if (!bugCollectionFile.exists()) {    getDefault().logInfo("creating new bug collection: " + bugCollectionPath.toOSString());    createDefaultEmptyBugCollection(project);    return;  }  UserPreferences prefs=getUserPreferences(project);  bugCollection=new SortedBugCollection();  bugCollection.getProject().setGuiCallback(new EclipseGuiCallback(project));  bugCollection.setDoNotUseCloud(!useCloud);  bugCollection.readXML(bugCollectionFile);  if (useCloud) {    String cloudId=prefs.getCloudId();    if (cloudId != null) {      bugCollection.getProject().setCloudId(cloudId);    }  }  cacheBugCollectionAndProject(project,bugCollection,bugCollection.getProject());}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  public void put(long hash,byte[] encoding,Object object){  if (last_cached == cache_size) {    last_cached=0;    cache_is_full=true;  }  int index=last_cached++;  hash|=getSuffHash(encoding);  if (cache_is_full) {    long idx_hash=(hashes[index] | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      System.out.println("WARNING! " + idx);      idx=-(idx + 1);    }    long new_hash_idx=(hash | (index + 1));    int new_idx=Arrays.binarySearch(hashes_idx,new_hash_idx);    if (new_idx >= 0) {      if (idx != new_idx) {        System.out.println("WARNING: ");        System.out.println(">> idx: " + idx + " new_idx: "+ new_idx);      }    } else {      new_idx=-(new_idx + 1);      if (new_idx > idx) {        System.arraycopy(hashes_idx,idx + 1,hashes_idx,idx,new_idx - idx - 1);        hashes_idx[new_idx - 1]=new_hash_idx;      } else       if (idx > new_idx) {        System.arraycopy(hashes_idx,new_idx,hashes_idx,new_idx + 1,idx - new_idx);        hashes_idx[new_idx]=new_hash_idx;      } else {        hashes_idx[new_idx]=new_hash_idx;      }    }  } else {    long idx_hash=(hash | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      idx=-(idx + 1);    }    idx=idx - 1;    if (idx != cache_size - index - 1) {      System.arraycopy(hashes_idx,cache_size - index,hashes_idx,cache_size - index - 1,idx - (cache_size - index) + 1);    }    hashes_idx[idx]=idx_hash;  }  hashes[index]=hash;  encodings[index]=encoding;  cache[index]=object;}  }
class C{  public void open(){}  }
class C{  public static final byte[] inflateBestEffort(byte[] in,int sizeLimit){  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  Inflater inflater=new Inflater(true);  InflaterInputStream inStream=new InflaterInputStream(new ByteArrayInputStream(in),inflater);  byte[] buf=new byte[BUF_SIZE];  int written=0;  while (true) {    try {      int size=inStream.read(buf);      if (size <= 0)       break;      if ((written + size) > sizeLimit) {        outStream.write(buf,0,sizeLimit - written);        break;      }      outStream.write(buf,0,size);      written+=size;    } catch (    Exception e) {      LOG.info("Caught Exception in inflateBestEffort",e);      break;    }  }  try {    outStream.close();  } catch (  IOException e) {  }  return outStream.toByteArray();}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.758 -0500",hash_original_method="3C5DBD92A3A305187D743DC871D6AE55",hash_generated_method="0279A15AEFC098387B9E2647C88FBC69") public static Bitmap createVideoThumbnail(String filePath,int kind){  Bitmap bitmap=null;  MediaMetadataRetriever retriever=new MediaMetadataRetriever();  try {    retriever.setDataSource(filePath);    bitmap=retriever.getFrameAtTime(-1);  } catch (  IllegalArgumentException ex) {  }catch (  RuntimeException ex) {  } finally {    try {      retriever.release();    } catch (    RuntimeException ex) {    }  }  if (bitmap == null)   return null;  if (kind == Images.Thumbnails.MINI_KIND) {    int width=bitmap.getWidth();    int height=bitmap.getHeight();    int max=Math.max(width,height);    if (max > 512) {      float scale=512f / max;      int w=Math.round(scale * width);      int h=Math.round(scale * height);      bitmap=Bitmap.createScaledBitmap(bitmap,w,h,true);    }  } else   if (kind == Images.Thumbnails.MICRO_KIND) {    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO_THUMBNAIL,TARGET_SIZE_MICRO_THUMBNAIL,OPTIONS_RECYCLE_INPUT);  }  return bitmap;}  }
class C{  @InfoName("CL_DEVICE_COMPILER_AVAILABLE") public boolean isCompilerAvailable(){  return infos.getBool(getEntity(),CL_DEVICE_COMPILER_AVAILABLE);}  }
class C{  public static void main(String[] args){  TestRunner.run(ConditionalRouteTest.class);}  }
class C{  protected void waitForDownloadToStart(long dlRequest) throws Exception {  Cursor cursor=getCursor(dlRequest);  try {    int columnIndex=cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);    int value=cursor.getInt(columnIndex);    int currentWaitTime=0;    while (value != DownloadManager.STATUS_RUNNING && (value != DownloadManager.STATUS_FAILED) && (value != DownloadManager.STATUS_SUCCESSFUL)) {      Log.i(LOG_TAG,"Waiting for download to start...");      currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for download to start!");      cursor.requery();      assertTrue(cursor.moveToFirst());      columnIndex=cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);      value=cursor.getInt(columnIndex);    }    assertFalse("Download failed immediately after start",value == DownloadManager.STATUS_FAILED);  }  finally {    cursor.close();  }}  }
class C{  @Override public void completeWindow(long windowId){  windowedBlockStream.completeWindow(windowId);}  }
class C{  public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPRequest.class.getName());  sprint("{");  if (requestLine != null)   sprint(requestLine.debugDump());  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  @Override public boolean removeIf(Predicate<? super E> filter){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  private void addEmbeddedFieldGroup(MetaProperty embeddedMetaProperty,String fqnPrefix,Entity embeddedItem){  String fqn=fqnPrefix.isEmpty() ? embeddedMetaProperty.getName() : fqnPrefix + "." + embeddedMetaProperty.getName();  Datasource embedDs=datasources.get(fqn);  if (embedDs == null) {    throw new IllegalStateException(String.format("Datasource %s for property %s not found",fqn,embeddedMetaProperty.getName()));  }  FieldGroup fieldGroup=componentsFactory.createComponent(FieldGroup.class);  contentPane.add(fieldGroup);  fieldGroup.setFrame(frame);  fieldGroup.setCaption(getPropertyCaption(embedDs.getMetaClass(),embeddedMetaProperty));  MetaClass embeddableMetaClass=embeddedMetaProperty.getRange().asClass();  Collection<FieldGroup.FieldConfig> customFields=new LinkedList<>();  MetaProperty nullIndicatorProperty=getNullIndicatorProperty(embeddedMetaProperty);  for (  MetaProperty metaProperty : embeddableMetaClass.getProperties()) {    boolean isRequired=isRequired(metaProperty) || metaProperty.equals(nullIndicatorProperty);    boolean isReadonly=metaProperty.isReadOnly();switch (metaProperty.getType()) {case DATATYPE:case ENUM:      if (metadata.getTools().isSystem(metaProperty) && !showSystemFields) {        continue;      }    if (metaProperty.getType() != MetaProperty.Type.ENUM && (isByteArray(metaProperty) || isUuid(metaProperty))) {      continue;    }  addField(embeddableMetaClass,metaProperty,embeddedItem,fieldGroup,isRequired,false,isReadonly,customFields);break;case COMPOSITION:case ASSOCIATION:if (metaProperty.getRange().getCardinality().isMany()) {throw new IllegalStateException("tables for the embeddable entities are not supported");} else {if (isEmbedded(metaProperty)) {  Entity propertyValue=embeddedItem.getValue(metaProperty.getName());  addEmbeddedFieldGroup(metaProperty,fqn,propertyValue);} else {  addField(embeddableMetaClass,metaProperty,embeddedItem,fieldGroup,isRequired,true,isReadonly,customFields);}}break;default :break;}}fieldGroup.setDatasource(embedDs);fieldGroup.setBorderVisible(true);}  }
class C{  private long insertRemoteFile(String url){  long ret=0;  try {synchronized (insertRemoteFileLock) {      insertRemoteFile.bindString(1,url);      insertRemoteFile.bindString(2,"");      if (isDBAvailable())       ret=insertRemoteFile.executeInsert();    }  } catch (  SQLException e) {    RemoteFile rf=getRemoteFile(url);    if (rf != null)     ret=rf.id;  }  return ret;}  }
class C{  public boolean isSequenceReset(){  return mMessage.get(SEQUENCE_RESET_FLAG);}  }
class C{  public void receiveFileTransferInvitation(FileSharingSession fileSharingSession,boolean isGroup,ContactId contact,String displayName){  if (sLogger.isActivated()) {    sLogger.debug("Handle event file transfer invitation");  }  mFileTransferService.receiveFileTransferInvitation(fileSharingSession,isGroup,contact,displayName);}  }
class C{  public String[] suggestSimilar(String word,int numSug,float accuracy) throws IOException {  return this.suggestSimilar(word,numSug,null,null,SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX,accuracy);}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE R_RequestProcessorLog " + "WHERE R_RequestProcessor_ID=" + getR_RequestProcessor_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return no;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Subscribe public synchronized void onSocketPreviewChanged(SocketPreviewChangedEvent event){  final OutputSocket<?> socket=event.getSocket();  PlatformImpl.runAndWait(null);}  }
class C{  public static float waitForCompletion(Future<?>[] futures,FloatFloatFunction aggr){  int size=futures.length;  Float[] results=new Float[size];  float a=0;  try {    for (int j=0; j < size; j++) {      results[j]=(Float)futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  public ByteMatrix encode(String contents) throws WriterException {  if (contents == null || contents.length() == 0) {    throw new IllegalArgumentException("Found empty contents");  }  code=Encoder.encode(contents,ErrorCorrectionLevel.L);  return renderResult(code,QR_CODE_ELEMENT_MULTIPLE);}  }
class C{  public static PrintServiceAttributeSet synchronizedView(PrintServiceAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintServiceAttributeSet(attributeSet);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] savePublicKey(ECPublicKey publicKey){  return publicKey.getQ().getEncoded(false);}  }
class C{  public int showDialog(){  setVisible(true);  return _returnCode;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public SolutionUserDTO create(SolutionUserDTO user){  Validate.notEmpty(user.getName(),sm.getString("valid.not.empty","name"));  Validate.notNull(user.getCertificate(),sm.getString("valid.not.null","certificate"));  Validate.notNull(user.getCertificate(),sm.getString("valid.not.null","certificate#encoded"));  try {    SolutionDetail solutionDetail=new SolutionDetail(user.getCertificate().getX509Certificate(),user.getDescription());    getIDMClient().addSolutionUser(tenant,user.getName(),solutionDetail);    return SolutionUserMapper.getSolutionUserDTO(getIDMClient().findSolutionUser(tenant,user.getName()));  } catch (  NoSuchTenantException e) {    log.debug("Failed to create solution user '{}' on tenant '{}'",user.getName(),tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|InvalidPrincipalException|DuplicateCertificateException|CertificateException e) {    log.error("Failed to create solution user '{}' on tenant '{}' due to a client side error",user.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.soln.create.failed",user.getName(),tenant),e);  }catch (  Exception e) {    log.error("Failed to create solution user '{}' on tenant '{}' due to a server side error",user.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeBoolean(false);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readBoolean();    }  }}  }
class C{  @Override public void onEmojiSelected(String key){  Editable mEditable=messageEditText.getText();  if (key.equals("/DEL")) {    messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DEL));  } else {    int start=messageEditText.getSelectionStart();    int end=messageEditText.getSelectionEnd();    start=(start < 0 ? 0 : start);    end=(start < 0 ? 0 : end);    mEditable.replace(start,end,key);  }}  }
class C{  public void deleteEdge(final ViewEdge edge){  Preconditions.checkNotNull(edge,"Error: Edge argument can't be null");  naviView.getContent().deleteEdge(edge.getNative());}  }
class C{  protected void calculateNodeHeights(){  if (!lengthsKnown) {    throw new IllegalArgumentException("Branch lengths not known");  }  nodeLengthsToHeights((FlexibleNode)getRoot(),0.0);  double maxHeight=0.0;  FlexibleNode node;  for (int i=0; i < getExternalNodeCount(); i++) {    node=(FlexibleNode)getExternalNode(i);    if (node.getHeight() > maxHeight) {      maxHeight=node.getHeight();    }  }  for (int i=0; i < getNodeCount(); i++) {    node=(FlexibleNode)getNode(i);    node.setHeight(maxHeight - node.getHeight());  }  heightsKnown=true;}  }
class C{  public void selectItemAt(int position,boolean animate){  mAdapter.selectItemAt(position,animate);}  }
class C{  public static String longToPgnDate(long time){  return PGN_HEADER_DATE_FORMAT.format(new Date(time));}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  private static boolean verifyHostNumPath(ExportPathParams pathParams,List<Initiator> initiators,ZoneInfoMap zoneInfoMap,DbClient dbClient){  if (initiators == null || initiators.isEmpty()) {    _logger.error("Host has no initiators configured.");    throw IngestionException.exceptions.hostHasNoInitiators();  }  int unassignedInitiators=0;  int totalPaths=0;  StringSetMap zoningMap=ExportMaskUtils.getZoneMapFromZoneInfoMap(zoneInfoMap,initiators);  if (null == zoningMap || zoningMap.isEmpty()) {    _logger.error("No zoning information found for the initiators");    List<String> messageArray=new ArrayList<String>();    for (    Initiator init : initiators) {      messageArray.add(init.getHostName() + ":" + init.getInitiatorPort());    }    throw IngestionException.exceptions.hostHasNoZoning(Joiner.on(", ").join(messageArray));  }  if (VPlexControllerUtils.isVplexInitiator(initiators.get(0),dbClient)) {    _logger.info("these are VPLEX backend initiators, " + "so no need to validate against virtual pool path params");    return true;  }  String hostName=initiators.get(0).getHostName();  URI hostURI=initiators.get(0).getHost() == null ? URIUtil.NULL_URI : initiators.get(0).getHost();  _logger.info("Checking numpath for host {}",hostName);  for (  Initiator initiator : initiators) {    if (initiator.getHostName() != null) {      hostName=initiator.getHostName();    }    StringSet ports=zoningMap.get(initiator.getId().toString());    if (ports == null || ports.isEmpty()) {      unassignedInitiators++;      _logger.info("Initiator {} of host {} is not assigned to any ports.",new Object[]{initiator.getInitiatorPort(),hostName});    } else     if (ports.size() < pathParams.getPathsPerInitiator()) {      _logger.error("Initiator {} of host {} has fewer SAN paths than what is required according to the virtual pool " + "({} are zoned, but {} are required)",new Object[]{initiator.getInitiatorPort(),hostName,ports.size(),pathParams.getPathsPerInitiator()});      throw IngestionException.exceptions.hostZoningHasDifferentPortCount(initiator.getInitiatorPort(),hostName,String.valueOf(ports.size()),String.valueOf(pathParams.getPathsPerInitiator()));    } else {      totalPaths+=ports.size();      _logger.info("Initiator {} of host {} has {} paths",new Object[]{initiator.getInitiatorPort(),hostName,ports.size(),ports.size()});    }  }  if (totalPaths < pathParams.getMinPaths()) {    _logger.error(String.format("Host %s (%s) has fewer paths assigned %d than min_paths %d",hostName,hostURI.toString(),totalPaths,pathParams.getMinPaths()));    throw IngestionException.exceptions.hostZoningHasFewerPorts(hostName,String.valueOf(totalPaths),String.valueOf(pathParams.getMinPaths()));  }  if (totalPaths > pathParams.getMaxPaths()) {    _logger.warn(String.format("Host %s (%s) has more paths assigned %d than max_paths %d",hostName,hostURI.toString(),totalPaths,pathParams.getMaxPaths()));  }  if (unassignedInitiators > 0) {    _logger.info(String.format("Host %s (%s) has %d unassigned initiators",hostName,hostURI.toString(),unassignedInitiators));  }  return true;}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void test_default_graph_joins_01c() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01c","default-graph-joins-01c.rq","default-graph-joins-01.trig","default-graph-joins-01c.srx").runTest();}  }
class C{  public void testOnlyOneTermOneDocument() throws IOException {  BasicStats stats=createStats();  stats.setNumberOfDocuments(1);  stats.setNumberOfFieldTokens(1);  stats.setAvgFieldLength(1);  stats.setDocFreq(1);  stats.setTotalTermFreq(1);  unitTestCore(stats,1,1);}  }
class C{  protected void init(final AbstractTestTreeBuilder treeBuilder){  myAlarm=new Alarm();  myTreeBuilder=treeBuilder;}  }
class C{  @Override public Properties trackOpenInBrowser(String url){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.properties.putValue(Keys.NAME,Values.BROWSER_LAUNCHED);  if (url != null) {    aEvent.data.putValue(Keys.TARGET_URL,url);  }  aEvent.setAppNameContext();  tracker.track(Events.BROWSER_LAUNCHED,aEvent.properties);  return aEvent.properties;}  }
class C{  public TraceBeginRunCycle createTraceBeginRunCycle(){  TraceBeginRunCycleImpl traceBeginRunCycle=new TraceBeginRunCycleImpl();  return traceBeginRunCycle;}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(0,scrollDelta);  }}  }
class C{  static String[] concatStringArrays(String[] array1,String[] array2){  String[] result=new String[array1.length + array2.length];  for (int i=0; i < array1.length; i++) {    result[i]=array1[i];  }  for (int i=0; i < array2.length; i++) {    result[i + array1.length]=array2[i];  }  return result;}  }
class C{  public String numIrrelevantTipText(){  return "The number of irrelevant attributes.";}  }
class C{  @Override protected void bitcoinSerializeToStream(OutputStream stream) throws IOException {  stream.write(new VarInt(data.length).encode());  stream.write(data);  Utils.uint32ToByteStreamLE(hashFuncs,stream);  Utils.uint32ToByteStreamLE(nTweak,stream);  stream.write(nFlags);}  }
class C{  @Override public boolean wasNull() throws SQLException {  try {    debugCodeCall("wasNull");    checkClosed();    return wasNull;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public T hspace(String value){  return attr("hspace",value);}  }
class C{  private BufferedWriter createIt(File file) throws IOException {  if (!file.exists()) {    file.createNewFile();  }  return new BufferedWriter(new FileWriter(file));}  }
class C{  protected void create(BaseEvent event){  events.put(event,new Info());}  }
class C{  public ServerOperationException(String message,Throwable cause){  super(getServerMessage(message),cause);}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(TransferEntropyCalculatorMultiVariate teCalc,int dimensions,int timeSteps,int k) throws Exception {  teCalc.initialise(k,dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  teCalc.setObservations(sourceData,destData);  double te=teCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",te);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps - k,100);  teCalc.computeSignificance(newOrderings);  for (int i=0; i < 10; i++) {    double averageCheck1=teCalc.computeAverageLocalOfObservations();    assertEquals(te,averageCheck1);  }}  }
class C{  public void jobPutDataToRedis() throws Exception {  int num=redisCacheService.getConfigNum(CACHE_CONFIG_NUM);  redisCacheService.removeByNodeName(NODE_NAME);  List<ChangeNotifRedisPojo> list=redisCacheService.getChangeNotifRedis(num);  if (list != null) {    for (int i=0; i < list.size(); i++) {      redisCacheService.putDataToRedis(NODE_NAME,KEY_PREFIX + i,list.get(i));      System.out.println("save to redis" + i);    }  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public boolean isKeepIgnorableWhitespace(){  return keepIgnorableWhitespace;}  }
class C{  public void ifPresentOrElse(Consumer<? super T> consumer,Runnable emptyAction){  if (value != null)   consumer.accept(value); else   emptyAction.run();}  }
class C{  @Override public void writeEmptyElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {  log.log(Level.FINE,"writeEmptyElement({0}, {1}, {2})",new Object[]{prefix,localName,namespaceURI});  calculateAndNextTag();}  }
class C{  @Override public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  static TSRef createReference(final Sprite sprite,final int x,final int y,final int width,final int height){  final Object ref=sprite.getReference();  if (ref == null) {    return null;  }  return new TSRef(ref,x,y,width,height);}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  public boolean isInherited(){  return inherited;}  }
class C{  public final Vec2 mulTrans(final Vec2 v){  return new Vec2((v.x * ex.x + v.y * ex.y),(v.x * ey.x + v.y * ey.y));}  }
class C{  public final static void main(String[] args){  if (args.length < 3) {    usage("Not enough arguments.");  } else {    String flag=args[0];    String infile=args[1];    String outfile=args[2];    if (flag.equals("-e")) {      Base64.encodeFileToFile(infile,outfile);    } else     if (flag.equals("-d")) {      Base64.decodeFileToFile(infile,outfile);    } else {      usage("Unknown flag: " + flag);    }  }}  }
class C{  public String process(String to_process){  System.out.println("\nString to Process in StringFilter = " + to_process);  String[] value=split(to_process);  StringBuffer new_value=new StringBuffer();  for (int x=0; x < value.length; x++) {    if (hasAttribute(value[x]))     new_value.append((String)get(value[x])); else     new_value.append(value[x]);    if (x != value.length - 1)     new_value.append(" ");  }  return (new_value.toString());}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public int secondLargest(int[] array){  if (array == null || array.length < 2)   return 0;  int max=Math.max(array[0],array[1]);  int sec=Math.min(array[0],array[1]);  for (int i=2; i < array.length; i++) {    if (array[i] > max) {      sec=max;      max=array[i];    } else     if (array[i] > sec && array[i] != max)     sec=array[i];  }  return sec;}  }
class C{  private void initCompressableTypes(Map<String,Object> appMap){  WebConfiguration config=WebConfiguration.getInstance();  String value=config.getOptionValue(WebConfiguration.WebContextInitParameter.CompressableMimeTypes);  if (value != null && value.length() > 0) {    String[] values=Util.split(appMap,value,",");    if (values != null) {      for (      String s : values) {        String pattern=s.trim();        if (!isPatternValid(pattern)) {          continue;        }        if (pattern.endsWith("/*")) {          pattern=pattern.substring(0,pattern.indexOf("/*"));          pattern+="/[a-z0-9.-]*";        }        if (compressableTypes == null) {          compressableTypes=new ArrayList<>(values.length);        }        try {          compressableTypes.add(Pattern.compile(pattern));        } catch (        PatternSyntaxException pse) {          if (LOGGER.isLoggable(Level.WARNING)) {            LOGGER.log(Level.WARNING,"jsf.resource.mime.type.configration.invalid",new Object[]{pattern,pse.getPattern()});          }        }      }    }  }}  }
class C{  public static Data serialize(Storable obj){  Data data=new Data(obj.getClass());  obj.save(data);  data.putIfAbsent("class",obj.getClass().getName());  obj.save(data);  return data;}  }
class C{  @Override public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  super.visit(version,access,name,signature,superName,interfaces);  isInterface=((access & Opcodes.ACC_INTERFACE) == Opcodes.ACC_INTERFACE);  if (ANONYMOUS_MATCHER1.matcher(name).matches()) {    isAnonymous=true;  }  if (superName.equals(java.lang.Enum.class.getName().replace(".","/"))) {    isEnum=true;  }}  }
class C{  private void sign(final byte[] contentBytes,final ByteArrayOutputStream mimeContent) throws Exception {  String algId=conf.getSignatureAlgorithmId();  String keyId=conf.getActiveSigningKey();  log.debug("Signing directory with signing key '{}' " + "and signing algorithm '{}'",keyId,algId);  String signature=signHelper(keyId,algId,contentBytes);  mimeContent.write(envelopeHeader.getBytes());  try (MultipartEncoder encoder=new MultipartEncoder(mimeContent,envelopeBoundary)){    encoder.startPart(mpMixedContentType(dataBoundary));    encoder.write(contentBytes);    String algURI=CryptoUtils.getSignatureAlgorithmURI(algId);    String hashURI=hashCalculator.getAlgoURI();    Path verificatioCertPath=conf.getCertPath(keyId);    encoder.startPart(MimeTypes.BINARY,new String[]{HEADER_CONTENT_TRANSFER_ENCODING + ": base64",HEADER_SIG_ALGO_ID + ": " + algURI,HEADER_VERIFICATION_CERT_HASH + ": " + getVerificationCertHash(verificatioCertPath)+ "; "+ HEADER_HASH_ALGORITHM_ID+ "="+ hashURI});    encoder.write(signature.getBytes());  }   log.debug("Generated signed directory:\n{}\n",mimeContent.toString());  Files.write(tempConfPath,mimeContent.toByteArray());  log.debug("Written signed directory to '{}'",tempConfPath);}  }
class C{  public MousePlayer(char mark){  super(mark);}  }
class C{  public SnmpUnsignedInt(Long v) throws IllegalArgumentException {  super(v);}  }
class C{  public MutableLocation add(IntVector v){  return new MutableLocation(x + v.x,y + v.y,z + v.z,w);}  }
class C{  public GlowTask(Plugin owner,Runnable task,boolean sync,long delay,long period){  super(task,null);  taskId=nextTaskId.getAndIncrement();  description=task.toString();  this.owner=owner;  this.delay=delay;  this.period=period;  counter=0;  this.sync=sync;}  }
class C{  static final CompactSketch heapify1to3(Memory srcMem,long seed){  int memCap=(int)srcMem.getCapacity();  short seedHash=Util.computeSeedHash(seed);  if (memCap <= 24) {    return new HeapCompactOrderedSketch(new long[0],true,seedHash,0,Long.MAX_VALUE);  }  int curCount=srcMem.getInt(RETAINED_ENTRIES_INT);  int mdLongs=3;  int reqBytesIn=(curCount + mdLongs) << 3;  validateInputSize(reqBytesIn,memCap);  long thetaLong=srcMem.getLong(THETA_LONG);  long[] compactOrderedCache=new long[curCount];  srcMem.getLongArray(24,compactOrderedCache,0,curCount);  return new HeapCompactOrderedSketch(compactOrderedCache,false,seedHash,curCount,thetaLong);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_DURING___TRACE_DURATION_1:    setTrace_duration_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void cancel(String tag){  if (mEnabled)   CENTER.cancel(tag);}  }
class C{  public int compareTo(Object o){  ALayoutConstraint comp=null;  if (o instanceof ALayoutConstraint)   comp=(ALayoutConstraint)o;  if (comp == null)   return +111;  int rowComp=m_row - comp.getRow();  if (rowComp != 0)   return rowComp;  return m_col - comp.getCol();}  }
class C{  public AccessDescriptionsTableModel(){  columnNames=new String[2];  columnNames[0]=res.getString("AccessDescriptionsTableModel.AccessMethodColumn");  columnNames[1]=res.getString("AccessDescriptionsTableModel.AccessLocationColumn");  data=new Object[0][0];}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(String systemId,Reader reader) throws XMLStreamException {  throw new XMLStreamException("The WBXML is a binary format!");}  }
class C{  public void createHourScenario17() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 07:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO17_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),20);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getSecondCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subscriptionDetails=subscrSetup.subscribeToService("SCENARIO17_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO17_PERUNIT_HOUR",subscriptionDetails);}  }
class C{  public InMemoryQueueAdapter(){}  }
class C{  @Override public boolean click(Selector obj) throws UiObjectNotFoundException {  if (obj.toUiObject2() == null) {    return device.findObject(obj.toUiSelector()).click();  } else {    obj.toUiObject2().click();    return true;  }}  }
class C{  @Override public boolean isSysCall(Instruction s){  return s.operator() == PPC_BCTRL_SYS || s.operator() == PPC_BL_SYS;}  }
