class C{  @Deprecated public static CallSite bootstrapSafe(Lookup caller,String name,MethodType type){  return realBootstrap(caller,name,CALL_TYPES.METHOD.ordinal(),type,true,false,false);}  }
class C{  public Iterator tuples(Predicate filter){  if (filter == null) {    return tuples();  } else {    return new CompositeIterator(m_edgeTuples.iterator(getEdgeTable().rows(filter)),m_nodeTuples.iterator(getNodeTable().rows(filter)));  }}  }
class C{  public double[] computeLocalOfPreviousObservations() throws Exception {  return computeLocalUsingPreviousObservations(contObservations,discObservations);}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  @Override public void sessionEnd(boolean commit){}  }
class C{  public static void main(String[] args){  try {    Stats ps=new Stats();    java.io.LineNumberReader r=new java.io.LineNumberReader(new java.io.InputStreamReader(System.in));    String line;    while ((line=r.readLine()) != null) {      line=line.trim();      if (line.equals("") || line.startsWith("@") || line.startsWith("%")) {        continue;      }      java.util.StringTokenizer s=new java.util.StringTokenizer(line," ,\t\n\r\f");      int count=0;      double v1=0;      while (s.hasMoreTokens()) {        double val=(new Double(s.nextToken())).doubleValue();        if (count == 0) {          v1=val;        } else {          System.err.println("MSG: Too many values in line \"" + line + "\", skipped.");          break;        }        count++;      }      if (count == 1) {        ps.add(v1);      }    }    ps.calculateDerived();    System.err.println(ps);  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public String readLine() throws IOException {  CharBuffer cb=_cb;  if (cb == null) {    cb=_cb=new CharBuffer();  } else {    cb.length(0);  }  String result;  if (readLine(cb,true)) {    result=cb.toString();    cb.length(0);  } else   if (cb.length() == 0)   result=null; else {    result=cb.toString();    cb.length(0);  }  return result;}  }
class C{  private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException {  os.defaultReadObject();  AnnotationMember[] defs=getElementsDescription(klazz);  AnnotationMember[] old=elements;  List<AnnotationMember> merged=new ArrayList<AnnotationMember>(defs.length + old.length);  nextOld:   for (  AnnotationMember el1 : old) {    for (    AnnotationMember el2 : defs) {      if (el2.name.equals(el1.name)) {        continue nextOld;      }    }    merged.add(el1);  }  nextNew:   for (  AnnotationMember def : defs) {    for (    AnnotationMember val : old) {      if (val.name.equals(def.name)) {        merged.add(val.setDefinition(def));        continue nextNew;      }    }    merged.add(def);  }  elements=merged.toArray(new AnnotationMember[merged.size()]);}  }
class C{  private static ChangeCorrectionProposal addSetterProposal(ProposalParameter context,int relevance){  boolean isBoolean=isBoolean(context);  String setterName=GetterSetterUtil.getSetterName(context.variableBinding,null,isBoolean);  ITypeBinding declaringType=context.variableBinding.getDeclaringClass();  if (declaringType == null)   return null;  IMethodBinding method=Bindings.findMethodInHierarchy(declaringType,setterName,new ITypeBinding[]{context.variableBinding.getType()});  if (method != null && Bindings.isVoidType(method.getReturnType()) && (Modifier.isStatic(method.getModifiers()) == Modifier.isStatic(context.variableBinding.getModifiers()))) {    Expression assignedValue=getAssignedValue(context);    if (assignedValue == null)     return null;    Expression mi=createMethodInvocation(context,method,assignedValue);    context.astRewrite.replace(context.accessNode.getParent(),mi,null);    String label=CorrectionMessages.INSTANCE.GetterSetterCorrectionSubProcessor_replacewithsetter_description(ASTNodes.asString(context.accessNode));    Images image=Images.correction_change;    ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,context.astRewrite,relevance,context.document,image);    return proposal;  } else {  }  return null;}  }
class C{  public RColumn(Properties ctx,String columnName,int displayType,String sql){  this(ctx,columnName,displayType,sql,0,null);}  }
class C{  private void updateRegisters(){  Calendar c=Calendar.getInstance();  c.setTimeInMillis(platform.getMasterClock().getTotalElapsedTimePs() / MasterClock.PS_PER_MS + deltaMs);  setRegistersFromCalendar(c);}  }
class C{  public Element store(Object o){  return storeDirectly(o);}  }
class C{  public static void println(String key,Object... args){  StringBuilder b=new StringBuilder();  b.append(key);  b.append(": ");  boolean isFirstArgument=true;  for (  Object arg : args) {    if (isFirstArgument) {      isFirstArgument=false;    } else {      b.append(", ");    }    b.append(arg);  }  System.out.println(b.toString());}  }
class C{  public void enableSave(){  btnSave.setVisible(true);  btnCancel.setVisible(true);}  }
class C{  public void addObservations(int states[][],int col){  int rows=states.length;  if (rows - k - (k - 1) <= 0) {    return;  }  observations+=(rows - k - (k - 1));  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=states[p][col];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + p][col];  }  for (int r=k; r < rows - (k - 1); r++) {    nextVal-=maxShiftedValue[states[r - 1][col]];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + r][col];    jointCount[nextVal][prevVal]++;    prevCount[prevVal]++;    nextCount[nextVal]++;    prevVal-=maxShiftedValue[states[r - k][col]];    prevVal*=numDiscreteValues;    prevVal+=states[r][col];  }}  }
class C{  public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  GenericPK newPK=new GenericPK();  newPK.init(delegator,modelEntity,fields);  return newPK;}  }
class C{  public static boolean verify(String signedRequestHex,String stringToSign,PublicKey publicKey) throws DecoderException, InvalidKeyException, SignatureException {  byte[] signedRequest=Hex.decodeHex(signedRequestHex.toCharArray());  Signature sig;  try {    sig=Signature.getInstance(SHA256_WITH_RSA);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("An error occurred while getting the signature algorithm",e);  }  sig.initVerify(publicKey);  sig.update(stringToSign.getBytes(StandardCharsets.UTF_8));  return sig.verify(signedRequest);}  }
class C{  public long skip(long n) throws IOException {  if (n <= fill) {    if (n < 0)     throw new IllegalArgumentException("Negative bit skip value: " + n);    fill-=n;    readBits+=n;    return n;  } else {    final long prevReadBits=readBits;    n-=fill;    readBits+=fill;    fill=0;    long nb=n >> 3;    if (buffer != null && nb > avail && nb < avail + buffer.length) {      readBits+=(avail + 1) << 3;      n-=(avail + 1) << 3;      nb-=avail + 1;      position+=pos + avail;      pos=avail=0;      read();    }    if (nb <= avail) {      pos+=(int)nb;      avail-=(int)nb;      readBits+=n & ~7;    } else {      n-=avail << 3;      readBits+=avail << 3;      final long toSkip=nb - avail;      final long skipped=is.skip(toSkip);      if (skipped < toSkip)       throw new IOException("skip() has skipped " + skipped + " instead of "+ toSkip+ " bytes");      position+=(avail + pos) + skipped;      pos=0;      avail=0;      readBits+=skipped << 3;      if (skipped != toSkip)       return readBits - prevReadBits;    }    final int residual=(int)(n & 7);    if (residual != 0) {      current=read();      fill=8 - residual;      readBits+=residual;    }    return readBits - prevReadBits;  }}  }
class C{  protected void checkRowDoesntExistInServerGroup(String sql,String groupName) throws Exception {  this.conn.clearServerSelectionCriteria();  this.conn.setServerGroupName(groupName);  checkRowDoesntExist(sql);}  }
class C{  @Override public byte[] readByteArray(String filePath,long offset,int length){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,length,offset);  return byteBffer.array();}  }
class C{  public SWFShape tagDefineMorphShape(int id,Rect startBounds,Rect endBounds) throws IOException {  if (tags != null) {    return tags.tagDefineMorphShape(id,startBounds,endBounds);  }  return null;}  }
class C{  public ListItemView(Context context){  this(context,null);}  }
class C{  public static void reset(boolean finalCall){  s_log.info("finalCall=" + finalCall);  if (Ini.isClient()) {    closeWindows();    if (s_windows.size() > 0) {      if (!finalCall) {        Container c=s_windows.get(0);        s_windows.clear();        createWindowNo(c);      } else {        s_windows.clear();      }    }  }  if (finalCall)   getCtx().clear(); else {    Object[] keys=getCtx().keySet().toArray();    for (int i=0; i < keys.length; i++) {      String tag=keys[i].toString();      if (Character.isDigit(tag.charAt(0)))       getCtx().remove(keys[i]);    }  }  CacheMgt.get().reset();  if (Ini.isClient())   DB.closeTarget();  if (!finalCall) {    if (Ini.isClient())     DB.setDBTarget(CConnection.get());    MRole defaultRole=MRole.getDefault(getCtx(),false);    if (defaultRole != null)     defaultRole.loadAccess(true);  }}  }
class C{  public Sequence(Class<?> type){  this(Object.class,type);}  }
class C{  public void create(Profile profile) throws ServerException, ConflictException {  requireNonNull(profile,"Required non-null profile");  profileDao.create(new ProfileImpl(profile));}  }
class C{  private String stripped(StringBuilder buffer){  return StringUtils.replace(StringUtils.replace(buffer.toString()," ",""),",","");}  }
class C{  private boolean updateStructureOfIthParamFrom(ParametricStructure structure1,int i,ParametricStructure otherStructure){  if ((otherStructure == null))   return false;  Assert.isTrue(structure1 != otherStructure,"updateStructureOfIthParamFrom(): attempt to unify ith param of a parametric type with itself!");  ParametricStructure param1=structure1.getParameters()[i];  boolean param1Unknown=(param1 == null);  if (param1Unknown) {    if (DEBUG_INITIALIZATION)     System.out.println("  setting param " + i + " of "+ structure1+ " to "+ otherStructure);    structure1.getParameters()[i]=otherStructure;    return true;  }  boolean paramStructured=!(param1 == ParametricStructure.NONE);  boolean otherStructured=!(otherStructure == ParametricStructure.NONE);  if (paramStructured && otherStructured) {    if (param1.getBase().equals(otherStructure.getBase()))     return updateStructureOfType(param1,otherStructure); else {      structure1.getParameters()[i]=ParametricStructure.NONE;      return true;    }  }  return false;}  }
class C{  public void connectToDebugger(int localPort) throws Exception {  if (waitingForInput) {    throw new Exception("Can't connect debugger now, waiting for input");  }  Object result=myClient.execute(CONNECT_TO_DEBUGGER,new Object[]{localPort});  Exception exception=null;  if (result instanceof Vector) {    Vector resultarray=(Vector)result;    if (resultarray.size() == 1) {      if ("connect complete".equals(resultarray.get(0))) {        return;      }      if (resultarray.get(0) instanceof String) {        exception=new Exception((String)resultarray.get(0));      }      if (resultarray.get(0) instanceof Exception) {        exception=(Exception)resultarray.get(0);      }    }  }  throw new PyDebuggerException("pydevconsole failed to execute connectToDebugger",exception);}  }
class C{  public void processResponseLog(String log,boolean pin){  log("Loading response log",Level.INFO,log.length());  TextStream stream=new TextStream(log);  Network network=this.bot.memory().newMemory();  Vertex question=null;  Vertex answer=null;  boolean first=true;  boolean isDefault=false;  while (!stream.atEnd()) {    String line=stream.nextLine().trim();    if (first && line.indexOf("<?xml") != -1) {      throw new SelfParseException("Chat log format must be text, not XML",stream);    }    first=false;    String originalLine=line;    while (line.isEmpty()) {      if (stream.atEnd()) {        return;      }      question=null;      answer=null;      line=stream.nextLine().trim();      originalLine=line;      if (!line.isEmpty()) {        network=this.bot.memory().newMemory();      }    }    log("Processing response log",Level.INFO,line);    TextStream lineStream=new TextStream(line);    String command=lineStream.upTo(':');    if (!lineStream.atEnd()) {      lineStream.skip();      line=lineStream.upToEnd().trim();    } else {      command="";    }    if (command.equalsIgnoreCase("default")) {      isDefault=true;      Vertex language=network.createVertex(Language.class);      question=network.createSentence(line);      question.setPinned(true);      language.addRelationship(Primitive.RESPONSE,question);    } else     if (command.equalsIgnoreCase("greeting")) {      Vertex language=network.createVertex(Language.class);      question=network.createSentence(line);      question.setPinned(true);      language.addRelationship(Primitive.GREETING,question);    } else     if (command.equalsIgnoreCase("script")) {      SelfCompiler.getCompiler().evaluateExpression(line,network.createVertex(Primitive.SELF),network.createVertex(Primitive.SELF),false,network);    } else     if (command.equalsIgnoreCase("keywords")) {      if (question == null || answer == null) {        throw new BotException("Missing question and response for keywords");      }      Language.addSentenceKeyWordsMeta(question,answer,line,network);    } else     if (command.equalsIgnoreCase("required")) {      if (question == null || answer == null) {        throw new BotException("Missing question and response for required words");      }      Language.addSentenceRequiredMeta(question,answer,line,network);    } else     if (command.equalsIgnoreCase("emotions")) {      if (question == null) {        throw new BotException("Missing phrase for emotions");      }      if (answer == null) {        question.internalRemoveRelationships(Primitive.EMOTION);        for (        String emote : Utils.getWords(line)) {          if (!emote.equals("none")) {            try {              EmotionalState.valueOf(emote.toUpperCase()).apply(question);            } catch (            Exception exception) {              throw new BotException("Invalid emotion: " + emote);            }          }        }      } else {        Language.addSentenceEmotesMeta(question,answer,line,network);      }    } else     if (command.equalsIgnoreCase("actions")) {      if (question == null) {        throw new BotException("Missing phrase for actions");      }      if (answer == null) {        question.internalRemoveRelationships(Primitive.ACTION);        for (        String action : Utils.getWords(line)) {          if (!action.equals("none")) {            question.addRelationship(Primitive.ACTION,new Primitive(action));          }        }      } else {        Language.addSentenceActionMeta(question,answer,line,network);      }    } else     if (command.equalsIgnoreCase("poses")) {      if (question == null) {        throw new BotException("Missing phrase for poses");      }      if (answer == null) {        question.internalRemoveRelationships(Primitive.POSE);        for (        String pose : Utils.getWords(line)) {          if (!pose.equals("none")) {            question.addRelationship(Primitive.POSE,new Primitive(pose));          }        }      } else {        Language.addSentencePoseMeta(question,answer,line,network);      }    } else     if (command.equalsIgnoreCase("previous")) {      if (question == null || (answer == null && !isDefault)) {        throw new BotException("Missing question and response for previous");      }      Vertex previous=network.createSentence(line);      if (pin) {        previous.setPinned(true);      }      if (isDefault) {        Vertex language=network.createVertex(Language.class);        Language.addSentencePreviousMeta(language,question,previous,false,network);      } else {        Language.addSentencePreviousMeta(question,answer,previous,false,network);      }    } else     if (command.equalsIgnoreCase("require previous")) {      if (question == null || (answer == null && !isDefault)) {        throw new BotException("Missing question and response for previous");      }      Vertex previous=network.createSentence(line);      if (pin) {        previous.setPinned(true);      }      if (isDefault) {        Vertex language=network.createVertex(Language.class);        Language.addSentencePreviousMeta(language,question,previous,true,network);      } else {        Language.addSentencePreviousMeta(question,answer,previous,true,network);      }    } else     if (command.equalsIgnoreCase("label")) {      if (question == null) {        throw new BotException("Missing phrase for label");      }      if (line.startsWith("#")) {        line=line.substring(1,line.length());      }      if (!Utils.isAlphaNumeric(line)) {        throw new BotException("A label must be a single alpha numeric string with no spaces (use - for a space) - " + line);      }      Vertex label=network.createVertex(new Primitive(line));      if (pin) {        label.setPinned(true);      }      label.addRelationship(Primitive.INSTANTIATION,Primitive.LABEL);      if (answer == null) {        question.setRelationship(Primitive.LABEL,label);        label.setRelationship(Primitive.RESPONSE,question);      } else {        answer.setRelationship(Primitive.LABEL,label);        label.setRelationship(Primitive.RESPONSE,answer);      }    } else     if (command.equalsIgnoreCase("on repeat")) {      if (question == null) {        throw new BotException("Missing question for on repeat");      }      Vertex repeat=network.createSentence(line);      if (pin) {        repeat.setPinned(true);      }      if (answer == null) {        question.addRelationship(Primitive.ONREPEAT,repeat);      } else {        answer.addRelationship(Primitive.ONREPEAT,repeat);      }    } else     if (command.equalsIgnoreCase("no repeat")) {      if (question == null) {        throw new BotException("Missing question for no repeat");      }      if (answer == null) {        question.addRelationship(Primitive.REQUIRE,Primitive.NOREPEAT);      } else {        answer.addRelationship(Primitive.REQUIRE,Primitive.NOREPEAT);      }    } else     if (command.equalsIgnoreCase("topic")) {      if (question == null) {        throw new BotException("Missing phrase for topic");      }      if (answer == null) {        if (isDefault) {          Vertex language=network.createVertex(Language.class);          Language.addSentenceTopicMeta(language,question,line,network);        } else {          Vertex topicFragment=network.createFragment(line);          topicFragment.addRelationship(Primitive.INSTANTIATION,Primitive.TOPIC);          network.createVertex(Primitive.TOPIC).addRelationship(Primitive.INSTANCE,topicFragment);          topicFragment.addRelationship(Primitive.QUESTION,question);          question.setRelationship(Primitive.TOPIC,topicFragment);        }      } else {        Language.addSentenceTopicMeta(question,answer,line,network);      }    } else {      isDefault=false;      Vertex sentence=null;      if (originalLine.startsWith("#")) {        originalLine=originalLine.substring(1,originalLine.length());        if (!Utils.isAlphaNumeric(originalLine)) {          throw new BotException("A label must be a single alpha numeric string with no spaces (use - for a space) - " + originalLine);        }        sentence=network.createVertex(new Primitive(originalLine));        if (!sentence.hasRelationship(Primitive.INSTANTIATION,Primitive.LABEL)) {          throw new BotException("Missing label - #" + originalLine);        }      } else {        sentence=network.createSentence(originalLine);      }      if (pin) {        sentence.setPinned(true);      }      if (question == null) {        question=sentence;      } else {        answer=sentence;        question.addWeakRelationship(Primitive.RESPONSE,sentence,0.9f);        question.associateAll(Primitive.WORD,question,Primitive.QUESTION);        network.checkReduction(question);        question.associateAll(Primitive.SYNONYM,sentence,Primitive.RESPONSE);      }    }    network.save();  }  network.save();}  }
class C{  public AbstractEvolutionaryAlgorithm(Problem problem,Population population,NondominatedPopulation archive,Initialization initialization){  super(problem);  this.population=population;  this.archive=archive;  this.initialization=initialization;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public void test_SubSelect() throws SQLException {  String sql="SELECT finteger," + " (SELECT ftext FROM " + DatabaseCreator.TEST_TABLE2 + " WHERE finteger = 1) as ftext"+ " FROM "+ DatabaseCreator.TEST_TABLE2;  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,String> value=new HashMap<Integer,String>();  value.put(1,DatabaseCreator.defaultString + "1");  value.put(2,DatabaseCreator.defaultString + "1");  value.put(3,DatabaseCreator.defaultString + "1");  value.put(4,DatabaseCreator.defaultString + "1");  value.put(5,DatabaseCreator.defaultString + "1");  while (result.next()) {    int key=result.getInt("finteger");    String val=result.getString("ftext");    assertTrue("wrong value of finteger field",value.containsKey(key));    assertEquals("wrong value of ftext field",value.get(key),val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  private void addMenuItems(Menu mMenu,boolean subMenu){  int groupId=R.id.material_drawer_menu_default_group;  for (int i=0; i < mMenu.size(); i++) {    MenuItem mMenuItem=mMenu.getItem(i);    IDrawerItem iDrawerItem;    if (!subMenu && mMenuItem.getGroupId() != groupId && mMenuItem.getGroupId() != 0) {      groupId=mMenuItem.getGroupId();      iDrawerItem=new DividerDrawerItem();      getItemAdapter().add(iDrawerItem);    }    if (mMenuItem.hasSubMenu()) {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled()).withSelectable(false);      getItemAdapter().add(iDrawerItem);      addMenuItems(mMenuItem.getSubMenu(),true);    } else     if (mMenuItem.getGroupId() != 0 || subMenu) {      iDrawerItem=new SecondaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getItemAdapter().add(iDrawerItem);    } else {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getItemAdapter().add(iDrawerItem);    }  }}  }
class C{  private Cache createCache() throws CacheException {  Properties p=new Properties();  p.put(MCAST_PORT,"0");  return CacheFactory.create(DistributedSystem.connect(p));}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.840 -0500",hash_original_method="61BEE4455C71AA1B4B8E096BE0A9F80E",hash_generated_method="A6AF3E598974F11A35885B279CDA83E0") public static void startMethodTracing(String traceName,FileDescriptor fd,int bufferSize,int flags){  VMDebug.startMethodTracing(traceName,fd,bufferSize,flags);}  }
class C{  public DGenerateKeyPairCert(JFrame parent,String title,KeyPair keyPair,KeyPairType keyPairType,X509Certificate issuerCert,PrivateKey issuerPrivateKey,Provider provider) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.keyPair=keyPair;  this.keyPairType=keyPairType;  this.issuerCert=issuerCert;  this.issuerPrivateKey=issuerPrivateKey;  this.provider=provider;  initComponents(title);}  }
class C{  @SuppressWarnings("unchecked") public T withMember(Member member){  request.member=Assert.notNull(member,"member");  return (T)this;}  }
class C{  public void addMatchString(String matchString){  matchStrings.add(matchString);}  }
class C{  private void run() throws Exception {  Object result=EclipseStarter.run(null);  Preconditions.checkState(Integer.valueOf(0).equals(result),"Unexpected return=0, was: %s",result);}  }
class C{  public DateBuilder inYear(int inYear){  validateYear(inYear);  this.year=inYear;  return this;}  }
class C{  public static GreeterStub newStub(io.grpc.Channel channel){  return new GreeterStub(channel);}  }
class C{  public void addToBeIgnored(final String urlString){  if (toIgnored == null) {    toIgnored=new ArrayList<String>();  }  if (StringUtils.isNotBlank(urlString)) {    final String normalizedFileName=ResourceLoader.getNormalizedFileName(urlString);    toIgnored.add(normalizedFileName);  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public Object buildKeyObject(Row row){  return buildObject(row,persistenceSettings.getKeyPersistenceSettings());}  }
class C{  private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  Header header=response.getFirstHeader("Content-Disposition");  if (header != null) {    innerState.mHeaderContentDisposition=header.getValue();  }  header=response.getFirstHeader("Content-Location");  if (header != null) {    innerState.mHeaderContentLocation=header.getValue();  }  header=response.getFirstHeader("ETag");  if (header != null) {    innerState.mHeaderETag=header.getValue();  }  String headerTransferEncoding=null;  header=response.getFirstHeader("Transfer-Encoding");  if (header != null) {    headerTransferEncoding=header.getValue();  }  String headerContentType=null;  header=response.getFirstHeader("Content-Type");  if (header != null) {    headerContentType=header.getValue();    if (!headerContentType.equals("application/vnd.android.obb")) {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect Mime type");    }  }  if (headerTransferEncoding == null) {    header=response.getFirstHeader("Content-Length");    if (header != null) {      innerState.mHeaderContentLength=header.getValue();      long contentLength=Long.parseLong(innerState.mHeaderContentLength);      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {        Log.e(Constants.TAG,"Incorrect file size delivered.");      }    }  } else {    if (Constants.LOGVV) {      Log.v(Constants.TAG,"ignoring content-length because of xfer-encoding");    }  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Content-Disposition: " + innerState.mHeaderContentDisposition);    Log.v(Constants.TAG,"Content-Length: " + innerState.mHeaderContentLength);    Log.v(Constants.TAG,"Content-Location: " + innerState.mHeaderContentLocation);    Log.v(Constants.TAG,"ETag: " + innerState.mHeaderETag);    Log.v(Constants.TAG,"Transfer-Encoding: " + headerTransferEncoding);  }  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase("chunked"));  if (noSizeInfo) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"can't know size of download, giving up");  }}  }
class C{  public final static double degToRad(double deg){  return Math.toRadians(deg);}  }
class C{  public ArtworkEntry(PlayMusicManager playMusicManager){  mPlayMusicManager=playMusicManager;}  }
class C{  public static Map<String,Object> returnSuccess(){  return returnMessage(ModelService.RESPOND_SUCCESS,null);}  }
class C{  private void fillIDValues() throws SQLException {  for (  X_I_Product_ASI ip_asi : getRecords(false,m_IsImportOnlyNoErrors)) {    int M_Product_ID=0;    if (ip_asi.getM_Product_ID() > 0)     M_Product_ID=getID(MProduct.Table_Name,"M_Product_ID = ?",ip_asi.getM_Product_ID());    if (M_Product_ID <= 0 && ip_asi.getProductValue() != null) {      M_Product_ID=getID(MProduct.Table_Name,"Value = ?",ip_asi.getProductValue());      ip_asi.setM_Product_ID(M_Product_ID);    } else     ip_asi.setM_Product_ID(M_Product_ID);    int M_AttributeSet_ID=0;    if (ip_asi.getM_AttributeSet_ID() > 0)     M_AttributeSet_ID=getID(MAttributeSet.Table_Name,"M_AttributeSet_ID = ?",ip_asi.getM_AttributeSet_ID());    if (M_AttributeSet_ID <= 0 && ip_asi.getAttributeSetName() != null) {      M_AttributeSet_ID=getID(MAttributeSet.Table_Name,"Name = ?",ip_asi.getAttributeSetName());      ip_asi.setM_AttributeSet_ID(M_AttributeSet_ID);    } else     ip_asi.setM_AttributeSet_ID(M_AttributeSet_ID);    int M_Attribute_ID=0;    if (ip_asi.getM_Attribute_ID() > 0)     M_Attribute_ID=getID(MAttribute.Table_Name,"M_Attribute_ID = ?",ip_asi.getM_Attribute_ID());    if (M_Attribute_ID <= 0 && ip_asi.getAttributeName() != null) {      M_Attribute_ID=getID(MAttribute.Table_Name,"Name = ?",ip_asi.getAttributeName());      ip_asi.setM_Attribute_ID(M_Attribute_ID);    } else     ip_asi.setM_Attribute_ID(M_Attribute_ID);    if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(ip_asi.getAttributeValueType()) && M_Attribute_ID > 0) {      MAttribute attribute=new MAttribute(getCtx(),M_Attribute_ID,get_TrxName());    }    int M_AttributeSetInstance_ID=0;    if (ip_asi.getM_AttributeSetInstance_ID() > 0)     M_AttributeSetInstance_ID=getID(MAttributeSetInstance.Table_Name,"M_AttributeSetInstance_ID = ?",ip_asi.getM_AttributeSetInstance_ID());    StringBuffer err=new StringBuffer("");    if (ip_asi.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (ip_asi.getAttributeSetName() == null)     err.append(" @AttributeSetName@ @NotFound@,");    if (ip_asi.getMandatoryType() == null)     err.append(" @MandatoryType@ @NotFound@,");    if (ip_asi.getAttributeName() == null)     err.append(" @AttributeName@ @NotFound@,");    if (ip_asi.getAttributeValueType() == null)     err.append(" @AttributeValueType@ @NotFound@,");    if (ip_asi.getAttributeValue() == null)     err.append(" @AttributeValue@ @NotFound@,");    if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(ip_asi.getAttributeValueType()) && ip_asi.getElementName() == null)     err.append(" @ElementName@ @NotFound@,");    if (err.toString() != null && err.toString().length() > 0) {      notimported++;      ip_asi.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));    }    ip_asi.saveEx();    commitEx();  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public BlockVolumeConsistencyGroupFilter(URI consistencyGroup,boolean allowNullCg){  this.consistencyGroup=consistencyGroup;  this.allowNullCg=allowNullCg;}  }
class C{  public boolean isPingDisabled(){  return (null != healthcheck && !healthcheck.exists());}  }
class C{  protected static int findBeforeNewLineChar(CharSequence s,int start){  for (int i=start - 1; i > 0; i--) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  public boolean isPopupHasFocus(){  if (!isValid() || popup == null)   return false;  if (scrollbarClicked || popup.hasFocus() || (popup.infoPopup != null && popup.infoPopup.hasFocus()))   return true;  Shell activeShell=Display.getCurrent().getActiveShell();  if (activeShell == popup.getShell() || (popup.infoPopup != null && popup.infoPopup.getShell() == activeShell)) {    return true;  }  return false;}  }
class C{  public static File createTempFile(InputStream in) throws IOException {  File temp=File.createTempFile("Flex2_","");  writeBinaryFile(temp,in);  return temp;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  @Override public boolean equals(final Object other){  if (this == other) {    return true;  } else   if (other == null) {    return false;  } else   if (other instanceof ExpressionMatcher) {    final ExpressionMatcher o=(ExpressionMatcher)other;    if (typeMatching != o.typeMatching) {      return false;    } else     if (exactMatching != o.exactMatching) {      return false;    } else     if (similarMatching != o.similarMatching) {      return false;    } else     if (caseInsensitive != o.caseInsensitive) {      return false;    } else {      return (jokerMatching == o.jokerMatching);    }  } else {    return false;  }}  }
class C{  public static double cdf(double val,double dof){  return regularizedGammaP(.5 * dof,.5 * val);}  }
class C{  private void error(PageException pe){  if (error == null)   throw new PageRuntimeException(pe);  try {    pc=ThreadLocalPageContext.get(pc);    error.call(pc,new Object[]{pe.getCatchBlock(pc.getConfig())},false);  } catch (  PageException e) {  }}  }
class C{  public IgniteInterruptedException(InterruptedException cause){  this(cause.getMessage(),cause);}  }
class C{  public void close(){  buf=null;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(MONGODB_HOST,MONGODB_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  assumeTrue(vaultRule.prepare().getVersion().isGreaterThanOrEqualTo(Version.parse("0.6.2")));  if (!vaultRule.prepare().hasSecretBackend("mongodb")) {    vaultRule.prepare().mountSecret("mongodb");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  vaultOperations.write("mongodb/config/connection",Collections.singletonMap("uri",ROOT_CREDENTIALS));  Map<String,String> role=new HashMap<>();  role.put("db","admin");  role.put("roles",ROLES);  vaultOperations.write("mongodb/roles/readonly",role);}  }
class C{  public void init(ToXMLSAXHandler h,Transformer transformer,ContentHandler realHandler){  h.setTransformer(transformer);  h.setContentHandler(realHandler);}  }
class C{  @Override public XATopicSession createXATopicSession() throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXATopicSession()");  }  checkClosed();  if (type == ActiveMQRAConnectionFactory.CONNECTION || type == ActiveMQRAConnectionFactory.QUEUE_CONNECTION || type == ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION) {    throw new IllegalStateException("Can not get a topic session from a queue connection");  }  return allocateConnection(type);}  }
class C{  public static ActivityFacilities readFacilities(String path2Facilities){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  FacilitiesReaderMatsimV1 reader=new FacilitiesReaderMatsimV1(scenario);  reader.readFile(path2Facilities);  return scenario.getActivityFacilities();}  }
class C{  public static void copy(Profile source,Profile destination) throws IllegalArgumentException, IOException {  if (destination.equals(ProfileManager.getDefault().getActiveProfile())) {    throw new IllegalArgumentException("Target profile cannot be active profile.");  }  FileUtil.copy(source.getPath(),destination.getPath());  File profile=new File(destination.getPath(),Profile.PROFILE);  File[] files=profile.listFiles(null);  if (files != null) {    for (    File file : files) {      if (!file.renameTo(new File(profile,file.getName().replace(source.getUniqueId(),destination.getUniqueId())))) {        throw new IOException("Unable to rename " + file + " to use new profile ID");      }    }  }  destination.save();}  }
class C{  public CodedException(String faultCode){  this.faultCode=faultCode;  faultDetail=ExceptionUtils.getStackTrace(this);}  }
class C{  public ProgressView loadStyledAttributes(TypedArray attributes,ProgressAttr progress){  mAttributes=attributes;  mProgressAttr=progress;  mIsSpecial=progress != null && progress.isSpecial();  mIsFuture=progress != null && progress.isFuture();  mCompletedDrawable=progress == null ? null : progress.getCompletedDrawable();  Resources res=getContext().getResources();  if (attributes != null) {    mShowStreaks=attributes.getBoolean(R.styleable.SlidePager_slide_show_streaks,true);    mShowProgressText=attributes.getBoolean(R.styleable.SlidePager_slide_show_progress_text,true);    mShowProgressPlusMark=attributes.getBoolean(R.styleable.SlidePager_slide_show_progress_plusmark,true);    mHasToReanimate=mAttributes.getBoolean(R.styleable.SlidePager_slide_pager_reanimate_slide_view,true);    mCompletedColor=progress != null && progress.getCompletedColor() != null ? progress.getCompletedColor() : attributes.getColor(R.styleable.SlidePager_slide_progress_completed_reach_color,res.getColor(R.color.default_progress_completed_reach_color));    mCompletedFillColor=progress != null && progress.getCompletedFillColor() != null ? progress.getCompletedFillColor() : attributes.getColor(R.styleable.SlidePager_slide_progress_completed_fill_color,res.getColor(R.color.default_progress_completed_fill_color));    mNotCompletedReachColor=progress != null && progress.getReachedColor() != null ? progress.getReachedColor() : attributes.getColor(R.styleable.SlidePager_slide_progress_not_completed_reach_color,res.getColor(R.color.default_progress_not_completed_reach_color));    mNotCompletedOutlineColor=attributes.getColor(R.styleable.SlidePager_slide_progress_not_completed_outline_color,res.getColor(R.color.default_progress_not_completed_outline_color));    mNotCompletedOutlineSize=attributes.getDimension(R.styleable.SlidePager_slide_progress_not_completed_outline_size,res.getDimension(R.dimen.circular_bar_default_outline_width));    mNotCompletedFutureOutlineSize=attributes.getDimension(R.styleable.SlidePager_slide_progress_not_completed_future_outline_size,res.getDimension(R.dimen.circular_bar_default_future_outline_width));    mNotCompletedFillColor=attributes.getColor(R.styleable.SlidePager_slide_progress_not_completed_fill_color,res.getColor(R.color.default_progress_not_completed_fill_color));    mSpecialReachColor=attributes.getColor(R.styleable.SlidePager_slide_progress_special_reach_color,res.getColor(R.color.default_progress_special_reach_color));    mSpecialOutlineColor=attributes.getColor(R.styleable.SlidePager_slide_progress_special_outline_color,res.getColor(R.color.default_progress_special_outline_color));    mSpecialFillColor=attributes.getColor(R.styleable.SlidePager_slide_progress_special_fill_color,res.getColor(R.color.default_progress_special_fill_color));    mProgressTextColor=attributes.getColor(R.styleable.SlidePager_slide_progress_text_color,res.getColor(R.color.default_progress_text_color));    mReachedWidth=attributes.getDimension(R.styleable.SlidePager_slide_progress_reached_width,res.getDimension(R.dimen.default_progress_reached_width));  } else {    mShowStreaks=true;    mShowProgressText=true;    mShowProgressPlusMark=true;    mHasToReanimate=true;    mCompletedColor=progress != null && progress.getCompletedColor() != null ? progress.getCompletedColor() : res.getColor(R.color.default_progress_completed_reach_color);    mCompletedFillColor=res.getColor(R.color.default_progress_completed_fill_color);    mNotCompletedReachColor=res.getColor(R.color.default_progress_not_completed_reach_color);    mNotCompletedOutlineColor=res.getColor(R.color.default_progress_not_completed_outline_color);    mNotCompletedOutlineSize=res.getDimension(R.dimen.circular_bar_default_outline_width);    mNotCompletedFutureOutlineSize=res.getDimension(R.dimen.circular_bar_default_future_outline_width);    mNotCompletedFillColor=res.getColor(R.color.default_progress_not_completed_fill_color);    mSpecialReachColor=res.getColor(R.color.default_progress_special_reach_color);    mSpecialOutlineColor=res.getColor(R.color.default_progress_special_outline_color);    mSpecialFillColor=res.getColor(R.color.default_progress_special_fill_color);    mProgressTextColor=res.getColor(R.color.default_progress_text_color);    mReachedWidth=res.getDimension(R.dimen.default_progress_reached_width);  }  loadProgressTextLabels(res);  setCircleColorsAndSize();  initAnimations();  return this;}  }
class C{  public UnusualGenerator(double maxValue){  this.maxValue=maxValue;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMImageElement(prefix,(AbstractDocument)doc);}  }
class C{  public Vcpc(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  Triple triple=new Triple(x,y,z);  if (!triple.alongPathIn(this)) {    throw new IllegalArgumentException("<" + x + ", "+ y+ ", "+ z+ "> is not along a path.");  }  removeTriplesNotInGraph();  return dottedUnderLineTriples.contains(new Triple(x,y,z));}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public boolean isSetPasswd(){  return this.passwd != null;}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  if (_s == null) {    return;  }  try {    _needsFlush=true;    while (length > 0) {      _writeBuffer.clear();      int sublen=Math.min(length,_writeBuffer.remaining());      _writeBuffer.put(buf,offset,sublen);      _writeBuffer.flip();      _s.write(_writeBuffer);      length-=sublen;      offset+=sublen;    }    _totalWriteBytes+=length;  } catch (  IOException e) {    IOException exn=ClientDisconnectException.create(this + ":" + e,e);    try {      close();    } catch (    IOException e1) {    }    throw exn;  }}  }
class C{  private static String varReplace(String originalVarStr,HttpServletRequest hsRequest){  String varSubName=null;  String varType;  int colonIdx=originalVarStr.indexOf(":");  if (colonIdx != -1 && colonIdx + 1 < originalVarStr.length()) {    varSubName=originalVarStr.substring(colonIdx + 1);    varType=originalVarStr.substring(0,colonIdx);    if (log.isDebugEnabled())     log.debug("variable %{" + originalVarStr + "} type: "+ varType+ ", name: '"+ varSubName+ "'");  } else {    varType=originalVarStr;    if (log.isDebugEnabled())     log.debug("variable %{" + originalVarStr + "} type: "+ varType);  }  TypeConverter type=new TypeConverter();  type.setType(varType);switch (type.getTypeShort()) {case TypeConverter.TYPE_TIME:    return String.valueOf(System.currentTimeMillis());case TypeConverter.TYPE_TIME_YEAR:  return calendarVariable(Calendar.YEAR);case TypeConverter.TYPE_TIME_MONTH:return calendarVariable(Calendar.MONTH);case TypeConverter.TYPE_TIME_DAY_OF_MONTH:return calendarVariable(Calendar.DAY_OF_MONTH);case TypeConverter.TYPE_TIME_DAY_OF_WEEK:return calendarVariable(Calendar.DAY_OF_WEEK);case TypeConverter.TYPE_TIME_AMPM:return calendarVariable(Calendar.AM_PM);case TypeConverter.TYPE_TIME_HOUR_OF_DAY:return calendarVariable(Calendar.HOUR_OF_DAY);case TypeConverter.TYPE_TIME_MINUTE:return calendarVariable(Calendar.MINUTE);case TypeConverter.TYPE_TIME_SECOND:return calendarVariable(Calendar.SECOND);case TypeConverter.TYPE_TIME_MILLISECOND:return calendarVariable(Calendar.MILLISECOND);case TypeConverter.TYPE_ATTRIBUTE:return attributeVariable(varSubName == null ? null : hsRequest.getAttribute(varSubName),varSubName);case TypeConverter.TYPE_AUTH_TYPE:return StringUtils.notNull(hsRequest.getAuthType());case TypeConverter.TYPE_CHARACTER_ENCODING:return StringUtils.notNull(hsRequest.getCharacterEncoding());case TypeConverter.TYPE_CONTENT_LENGTH:return String.valueOf(hsRequest.getContentLength());case TypeConverter.TYPE_CONTENT_TYPE:return StringUtils.notNull(hsRequest.getContentType());case TypeConverter.TYPE_CONTEXT_PATH:return StringUtils.notNull(hsRequest.getContextPath());case TypeConverter.TYPE_COOKIE:return cookieVariable(hsRequest.getCookies(),varSubName);case TypeConverter.TYPE_LOCAL_PORT:return String.valueOf(hsRequest.getLocalPort());case TypeConverter.TYPE_METHOD:return StringUtils.notNull(hsRequest.getMethod());case TypeConverter.TYPE_PARAMETER:return StringUtils.notNull(varSubName == null ? null : hsRequest.getParameter(varSubName));case TypeConverter.TYPE_PATH_INFO:return StringUtils.notNull(hsRequest.getPathInfo());case TypeConverter.TYPE_PATH_TRANSLATED:return StringUtils.notNull(hsRequest.getPathTranslated());case TypeConverter.TYPE_PROTOCOL:return StringUtils.notNull(hsRequest.getProtocol());case TypeConverter.TYPE_QUERY_STRING:return StringUtils.notNull(hsRequest.getQueryString());case TypeConverter.TYPE_REMOTE_ADDR:return StringUtils.notNull(hsRequest.getRemoteAddr());case TypeConverter.TYPE_REMOTE_HOST:return StringUtils.notNull(hsRequest.getRemoteHost());case TypeConverter.TYPE_REMOTE_USER:return StringUtils.notNull(hsRequest.getRemoteUser());case TypeConverter.TYPE_REQUESTED_SESSION_ID:return StringUtils.notNull(hsRequest.getRequestedSessionId());case TypeConverter.TYPE_REQUEST_URI:return StringUtils.notNull(hsRequest.getRequestURI());case TypeConverter.TYPE_REQUEST_URL:StringBuffer requestUrlBuff=hsRequest.getRequestURL();String requestUrlStr=null;if (requestUrlBuff != null) {requestUrlStr=requestUrlBuff.toString();}return StringUtils.notNull(requestUrlStr);case TypeConverter.TYPE_SESSION_ATTRIBUTE:Object sessionAttributeValue=null;HttpSession session=hsRequest.getSession(false);if (session != null && varSubName != null) {sessionAttributeValue=session.getAttribute(varSubName);}return attributeVariable(sessionAttributeValue,varSubName);case TypeConverter.TYPE_SESSION_IS_NEW:boolean sessionNew=false;HttpSession sessionIsNew=hsRequest.getSession(false);if (sessionIsNew != null) {sessionNew=sessionIsNew.isNew();}return String.valueOf(sessionNew);case TypeConverter.TYPE_SERVER_PORT:return String.valueOf(hsRequest.getServerPort());case TypeConverter.TYPE_SERVER_NAME:return StringUtils.notNull(hsRequest.getServerName());case TypeConverter.TYPE_SCHEME:return StringUtils.notNull(hsRequest.getScheme());case TypeConverter.TYPE_USER_IN_ROLE:return String.valueOf(hsRequest.isUserInRole(varSubName));case TypeConverter.TYPE_EXCEPTION:Exception e=(Exception)hsRequest.getAttribute("javax.servlet.error.exception");if (e == null) return "";return e.getClass().getName();case TypeConverter.TYPE_HEADER:return StringUtils.notNull(hsRequest.getHeader(varSubName));case TypeConverter.TYPE_SERVLET_CONTEXT:Object attr=servletContext.getAttribute(varSubName);if (attr == null) {log.debug("No context attribute " + varSubName + ", must be an init-param");return servletContext.getInitParameter(varSubName);} else {return StringUtils.notNull(attr.toString());}default :log.error("variable %{" + originalVarStr + "} type '"+ varType+ "' not a valid type");return "";}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private IBindingSet[] resolve(final IBindingSet[] bindingSets){  final Map<Value,BigdataValue> values=new LinkedHashMap<Value,BigdataValue>();  final BigdataValueFactory valueFactory=lex.getValueFactory();  for (  IBindingSet bindings : bindingSets) {    if (vars == null) {      final Iterator<Map.Entry<IVariable,IConstant>> it=bindings.iterator();      while (it.hasNext()) {        final Map.Entry<IVariable,IConstant> e=it.next();        final IV<?,?> iv=(IV<?,?>)e.getValue().get();        final Value val=iv.getValue();        values.put(val,valueFactory.asValue(val));      }    } else {      for (      IVariable<?> var : vars) {        final IConstant<?> c=bindings.get(var);        if (c == null)         continue;        final IV<?,?> iv=(IV<?,?>)c.get();        final BigdataValue val=iv.getValue();        values.put(val,valueFactory.asValue(val));      }    }  }  final long mutationCount;{    final BigdataValue[] terms=values.values().toArray(new BigdataValue[]{});    final long ndistinct=lex.addTerms(terms,terms.length,readOnly);    if (!readOnly) {      mutationCount=ndistinct;    } else {      mutationCount=0;    }    for (    BigdataValue term : terms) {      final IV iv=term.getIV();      if (iv == null) {        if (log.isInfoEnabled())         log.info("Not in knowledge base: " + term);        final IV dummy=TermId.mockIV(VTE.valueOf(term));        term.setIV(dummy);        dummy.setValue(term);      } else {        iv.setValue(term);      }    }  }  final IBindingSet[] bindingSets2=new IBindingSet[bindingSets.length];  for (int i=0; i < bindingSets.length; i++) {    final IBindingSet bindingSet=bindingSets2[i]=bindingSets[i].clone();    if (vars == null) {      final Iterator<Map.Entry<IVariable,IConstant>> it=bindingSet.iterator();      while (it.hasNext()) {        final Map.Entry<IVariable,IConstant> e=it.next();        final IV<?,?> iv=(IV<?,?>)e.getValue().get();        final Value val=(Value)iv.getValue();        final BigdataValue val2=values.get(val);        assert readOnly || val2 != null : "value not found: " + val2;        if (log.isDebugEnabled())         log.debug("value: " + val + " : "+ val2+ " ("+ val2.getIV()+ ")");        bindingSet.set(e.getKey(),new Constant(val2.getIV()));      }    } else {      for (      IVariable<?> var : vars) {        final IConstant<?> c=bindingSet.get(var);        if (c == null)         continue;        final IV<?,?> iv=(IV<?,?>)c.get();        final BigdataValue val=iv.getValue();        final BigdataValue val2=values.get(val);        assert readOnly || val2 != null : "value not found: " + val2;        assert val2.getIV() == val2;        if (log.isDebugEnabled())         log.debug("value: " + val + " : "+ val2+ " ("+ val2.getIV()+ ")");        bindingSet.set(var,new Constant(val2.getIV()));      }    }  }  if (mutationCount != 0)   context.getStats().mutationCount.add(mutationCount);  return bindingSets2;}  }
class C{  public final void connectProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.proxyChain=new HttpHost[]{proxy};  this.secure=secure;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static double calculateJulianDay(Date date){  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));  cal.setTime(date);  double hour=cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE) / 60.0f + cal.get(Calendar.SECOND) / 3600.0f;  int year=cal.get(Calendar.YEAR);  int month=cal.get(Calendar.MONTH) + 1;  int day=cal.get(Calendar.DAY_OF_MONTH);  double jd=367.0 * year - Math.floor(7.0 * (year + Math.floor((month + 9.0) / 12.0)) / 4.0) + Math.floor(275.0 * month / 9.0) + day + 1721013.5 + hour / 24.0;  return jd;}  }
class C{  public static int indexOf(short[] array,short value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void validateStorageFile(StorageFile storageFile,String s3BucketName,Map<String,StorageFile> actualS3Keys,boolean validateFileSize){  if (!actualS3Keys.containsKey(storageFile.getFilePath())) {    throw new ObjectNotFoundException(String.format("File not found at s3://%s/%s location.",s3BucketName,storageFile.getFilePath()));  } else   if (validateFileSize) {    StorageFile actualS3StorageFile=actualS3Keys.get(storageFile.getFilePath());    Assert.isTrue(storageFile.getFileSizeBytes().equals(actualS3StorageFile.getFileSizeBytes()),String.format("Specified file size of %d bytes for \"%s\" storage file does not match file size of %d bytes reported by S3.",storageFile.getFileSizeBytes(),storageFile.getFilePath(),actualS3StorageFile.getFileSizeBytes()));  }}  }
class C{  public Comparator<Point2D> polarOrder(){  return new PolarOrder();}  }
class C{  public void addItemSet(Collection<Item> itemSet,int weight){  super.addItemSet(itemSet,headerTable,weight);}  }
class C{  public synchronized R removeWithLeft(L leftValue){  R rightValue=tableLeft.remove(leftValue);  if (rightValue != null)   tableRight.remove(rightValue);  return rightValue;}  }
class C{  protected static void createRandomFile(Directory dir,String name,int size,byte[] segId) throws IOException {  Random rnd=random();  try (IndexOutput os=dir.createOutput(name,newIOContext(random()))){    CodecUtil.writeIndexHeader(os,"Foo",0,segId,"suffix");    for (int i=0; i < size; i++) {      byte b=(byte)rnd.nextInt(256);      os.writeByte(b);    }    CodecUtil.writeFooter(os);  } }  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    return basicSetRewiredTarget(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public synchronized VasaAssociationObject[] queryAssociatedCapabilityForFileSystem(String[] fsIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedCapabilityForFileSystem(): ";  log.debug(methodName + "Entry");  List<FileShare> fsList=null;  List<VasaAssociationObject> returnList=null;  Boolean supportsFile=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-file-profile"));  Boolean supportsCapability=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-capability-profile"));  try {    if (supportsFile == false || supportsCapability == false) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    this.setFileSystemIds();    if (Util.isEmpty(fsIds)) {      fsList=_syncManager.getFileSystemDetailList(this._reportedFileSystemIdList);    } else {      List<String> inputIdList=new ArrayList<String>();      for (      String inputFsId : fsIds) {        if (!Util.isEmpty(inputFsId)) {          if (!inputFsId.startsWith(FILESYSTEM_IDENTIFIER_PREFIX)) {            throw FaultUtil.InvalidArgument("Given FileSystem Id is invalid: " + inputFsId);          }          if (_reportedFileSystemIdList.contains(inputFsId)) {            inputIdList.add(inputFsId);          }        } else {          throw FaultUtil.InvalidArgument("Given FileSystem Id is invalid: " + inputFsId);        }      }      log.debug(methodName + "input file system ids: " + inputIdList);      fsList=_syncManager.getFileSystemDetailList(inputIdList);    }    returnList=new ArrayList<VasaAssociationObject>();    for (    FileShare fileShare : fsList) {      VasaAssociationObject associationObject=new VasaAssociationObject();      BaseStorageEntity assoc=new BaseStorageEntity();      assoc.setUniqueIdentifier(fileShare.getCos().getId());      BaseStorageEntity entity=new BaseStorageEntity();      entity.setUniqueIdentifier(fileShare.getId());      associationObject.addAssociatedId(assoc);      associationObject.addEntityId(entity);      log.debug(methodName + "File system id[" + entity.getUniqueIdentifier()+ "] is associated to capability["+ assoc.getUniqueIdentifier()+ "]");      returnList.add(associationObject);    }  } catch (  SOSFailure e1) {    log.error(methodName + "StorageOSFailure occured ",e1);    throw FaultUtil.StorageFault(e1);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }  log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");  return returnList.toArray(new VasaAssociationObject[0]);}  }
class C{  public void put(int key,@NotNull T value){  myMap.put(key,value);  myKeysToRemove.remove(key);}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public void organizeFrames(String[] framePaths,RpfHeader head,Vector<Frame> frames){  int tail;  int i;  boolean isoverview=false;  boolean islegend=false;  Frame frame;  RpfFileSections.RpfCoverageSection coverage;  Debug.message("maketoc","MakeToc.organizeFrames: *** initial look at frames ***");  int nFrames=framePaths.length;  if (Debug.debugging("maketoc")) {    Debug.output("Number of frames: " + nFrames);  }  for (i=0; i < nFrames; i++) {    isoverview=false;    islegend=false;    String framePath=framePaths[i];    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: frame number " + i + ", "+ framePath);    }    try {      BinaryFile binFile=new BinaryBufferedFile(framePath);      String fn=binFile.getName();      if (fn.length() != 12) {        if (Debug.debugging("maketoc")) {          Debug.error("MakeToc: " + framePath + " is not a RPF image file - ignoring");        }        continue;      }      RpfFileSections rfs=new RpfFileSections();      binFile.seek(0);      if (!head.read(binFile)) {        if (Debug.debugging("maketoc")) {          Debug.error("MakeToc: " + framePath + " is not a RPF image file - ignoring");        }        continue;      }      binFile.seek(head.locationSectionLocation);      rfs.parse(binFile);      coverage=rfs.parseCoverageSection(binFile);      if (coverage == null) {        Debug.error("MakeToc: error reading coverage section for " + framePath + ", (file "+ i+ ") skipping");        binFile.close();        continue;      }      if (Debug.debugging("maketocframedetail")) {        Debug.output("MakeToc.organizeFrames: coverage section for " + framePath + ", "+ coverage);      }      binFile.close();      binFile=null;    } catch (    FileNotFoundException e) {      Debug.error("MakeToc: " + framePath + " not found, being ignored.");      continue;    }catch (    IOException ioe) {      Debug.error("MakeToc: File IO Error during read of: " + framePath + "! Being ignored. \n"+ ioe);      continue;    }    frame=new Frame();    frames.add(frame);    frame.filename=framePath;    String framename;    tail=frame.filename.lastIndexOf(File.separatorChar);    if (tail == -1) {      framename=frame.filename;    } else {      framename=frame.filename.substring(++tail);    }    if (framename.length() != 12) {      Debug.error("filename must be 12 chars long - " + framename);      return;    }    isoverview=(framename.charAt(9) == 'O');    if (!isoverview) {      islegend=framename.regionMatches(true,9,"LG",0,2);    }    isoverview=false;    islegend=false;    String padding=null;    String seriesCode=head.filename.substring(9,11);    RpfProductInfo rpi=RpfProductInfo.get(seriesCode);    if (rpi == RpfProductInfo.UK) {      String dblChkSeriesCode=framename.substring(9,11);      RpfProductInfo rpi2=rpi;      if (!seriesCode.equals(dblChkSeriesCode)) {        rpi2=RpfProductInfo.get(dblChkSeriesCode);      }      if (rpi2 == RpfProductInfo.UK) {        Debug.output("MakeToc: " + frame.filename + " / "+ head.filename+ " (filename/header) unknown map type "+ seriesCode+ " / "+ dblChkSeriesCode+ " - ignoring.");        frames.remove(frame);        continue;      }    }    String scaleString=rpi.scaleString;    if (rpi.scale == RpfConstants.Various || scaleString == null || scaleString.length() == 0) {      scaleString=searchForATOCForScaleReference(framePath);      if (scaleString == null || scaleString.length() == 0) {        scaleString=promptForScale("What is the scale for " + frame.filename + "? (Answer should look like: 1:XXX,XXX)");        if (scaleString == null || scaleString.length() == 0) {          Debug.error("Bad input for scale for " + frame.filename + ", skipping.");          frames.remove(frame);          continue;        }      }    }    if (rpi.dataType.equalsIgnoreCase(RpfConstants.CIB)) {      frame.cib=true;    } else     if (rpi.dataType.equalsIgnoreCase(RpfConstants.CDTED)) {      frame.cdted=true;    }    int scaleStringLength=12;    if (scaleString.length() < scaleStringLength) {      padding=createPadding(scaleStringLength - scaleString.length(),false);      scaleString+=padding;    } else     if (scaleString.length() > scaleStringLength) {      scaleString=scaleString.substring(0,scaleStringLength);    }    frame.scale=scaleString;    frame.zone=head.filename.charAt(11);    if (isoverview) {      coverage.nwlat=coverage.nelat=coverage.nwlon=coverage.swlon=coverage.swlat=coverage.selat=coverage.nelon=coverage.selon=0;      coverage.latInterval=coverage.lonInterval=coverage.nsVertRes=coverage.ewHorRes=0;    }    if (islegend) {      coverage.nwlat=coverage.nelat=coverage.nwlon=coverage.swlon=coverage.swlat=coverage.selat=coverage.nelon=coverage.selon=0;      coverage.latInterval=coverage.lonInterval=coverage.nsVertRes=coverage.ewHorRes=0;    }    if (frame.zone == '9' || frame.zone == 'J') {      if (frame.zone == '9') {        if (Debug.debugging("maketoc"))         Debug.output("Processing NORTH pole");        frame.left=(90.0 - coverage.nwlat) * Math.sin(coverage.nwlon * Math.PI / 180.0) / coverage.latInterval;        frame.right=(90.0 - coverage.selat) * Math.sin(coverage.selon * Math.PI / 180.0) / coverage.latInterval;        frame.top=-1 * (90.0 - coverage.nwlat) * Math.cos(coverage.nwlon * Math.PI / 180.0) / coverage.latInterval;        frame.bottom=-1 * (90.0 - coverage.selat) * Math.cos(coverage.selon * Math.PI / 180.0) / coverage.latInterval;      } else {        if (Debug.debugging("maketoc"))         Debug.output("Processing SOUTH pole");        frame.left=(90.0 + coverage.nwlat) * Math.sin(coverage.nwlon * Math.PI / 180.0) / coverage.latInterval;        frame.right=(90.0 + coverage.selat) * Math.sin(coverage.selon * Math.PI / 180.0) / coverage.latInterval;        frame.top=(90.0 + coverage.nwlat) * Math.cos(coverage.nwlon * Math.PI / 180.0) / coverage.latInterval;        frame.bottom=(90.0 + coverage.selat) * Math.cos(coverage.selon * Math.PI / 180.0) / coverage.latInterval;      }      frame.swlat=coverage.swlat;      frame.swlon=coverage.swlon;      if (Debug.debugging("maketoc")) {        Debug.output("MakeToc: " + frame.filename + " is a Polar frame");      }    } else {      frame.left=coverage.nwlon;      frame.right=coverage.selon;      if (coverage.selon < coverage.nwlon) {        frame.right=180.0;      }      frame.top=coverage.nwlat;      frame.bottom=coverage.selat;    }    frame.h_interval=coverage.lonInterval;    frame.v_interval=coverage.latInterval;    frame.h_resolution=coverage.ewHorRes;    frame.v_resolution=coverage.nsVertRes;    frame.marked=false;    if (Debug.debugging("maketocframedetail")) {      Debug.output("MakeToc: nw_lon = " + coverage.nwlon + ", se_lon = "+ coverage.selon+ "\n         nwlat = "+ coverage.nwlat+ ", selat = "+ coverage.selat+ "\n    NEW: swlat = "+ coverage.swlat+ ", swlon = "+ coverage.swlon+ "\n         vert_interval = "+ coverage.latInterval+ ", horiz_interval = "+ coverage.lonInterval+ "\n         vertical resolution = "+ coverage.nsVertRes+ ", horizontal resolution = "+ coverage.ewHorRes+ "\n         left = "+ frame.left+ ", right = "+ frame.right+ "\n         top = "+ frame.top+ ", bottom = "+ frame.bottom+ "\n");    }  }}  }
class C{  protected int timeoutWait(int currentTotalWaitTime,long poll,long maxTimeoutMillis,String timedOutMessage) throws TimeoutException {  long now=SystemClock.elapsedRealtime();  long end=now + poll;  while (now < end) {    try {      Thread.sleep(end - now);    } catch (    InterruptedException e) {    }    now=SystemClock.elapsedRealtime();  }  currentTotalWaitTime+=poll;  if (currentTotalWaitTime > maxTimeoutMillis) {    throw new TimeoutException(timedOutMessage);  }  return currentTotalWaitTime;}  }
class C{  private CHelpFunctions(){}  }
class C{  public Iterable<ShardRouting> assignedShards(ShardRouting shard){  return assignedShards(shard.shardId());}  }
class C{  @org.junit.Test public void testMimicry(){  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("hi");  String response=waitForOutput(output);  if (!response.equals("hi")) {    fail("did not mimic: " + response);  }  text.input("how are you?");  response=waitForOutput(output);  if (!response.equals("how are you?")) {    fail("did not mimic: " + response);  }  text.input("ok");  response=waitForOutput(output);  if (!response.equals("ok")) {    fail("did not mimic: " + response);  }  text.input("good");  response=waitForOutput(output);  text.input("how are you?");  response=waitForOutput(output);  if (!response.equals("ok")) {    fail("did not remeber response: " + response);  }  bot.shutdown();}  }
class C{  public ActionLocation locationLessOrEqualTo(int offset){  ActionLocation l=new ActionLocation();  locationLessOrEqualTo(l,m_master,offset);  return l;}  }
class C{  public InitiatorRestRep update(URI id,InitiatorUpdateParam input){  return client.put(InitiatorRestRep.class,input,getIdUrl(),id);}  }
class C{  protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){  log.config("C_BPartner_ID=" + C_BPartner_ID);  KeyNamePair pp=new KeyNamePair(0,"");  orderField.removeActionListener(this);  orderField.removeAllItems();  orderField.addItem(pp);  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,false);  for (  KeyNamePair knp : list)   orderField.addItem(knp);  orderField.setSelectedIndex(0);  orderField.addActionListener(this);  dialog.pack();  initBPDetails(C_BPartner_ID);}  }
class C{  public boolean isExpired(OCSPResp response,Date atDate) throws Exception {  BasicOCSPResp basicResp=(BasicOCSPResp)response.getResponseObject();  SingleResp singleResp=basicResp.getResponses()[0];  return isExpired(singleResp,atDate);}  }
class C{  @Nullable static Option findRealOption(@NotNull final CommandLineOption option){  final ValidationResult validationResult=getValidationResult(option);  if (validationResult == null) {    return null;  }  return validationResult.getOption(option);}  }
class C{  public TypeNode clone(){  TypeNode result=new TypeNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  return result;}  }
class C{  public static SelectResults union(SelectResults c1,SelectResults c2,ExecutionContext contextOrNull){  QueryObserverHolder.getInstance().invokedQueryUtilsUnion(c1,c2);  assertCompatible(c1,c2);  if (c1.size() < c2.size()) {    return sizeSortedUnion(c1,c2,contextOrNull);  } else {    return sizeSortedUnion(c2,c1,contextOrNull);  }}  }
class C{  public GasStack(int id,int quantity){  type=GasRegistry.getGas(id);  amount=quantity;}  }
class C{  public boolean remove(Object o){  return map.remove(o) == PRESENT;}  }
class C{  public static void createFile(File file) throws IOException {  if (file.exists()) {    return;  }  file.getAbsoluteFile().getParentFile().mkdirs();  file.createNewFile();}  }
class C{  public static <T,D>Flux<T> using(Callable<? extends D> resourceSupplier,Function<? super D,? extends Publisher<? extends T>> sourceSupplier,Consumer<? super D> resourceCleanup){  return using(resourceSupplier,sourceSupplier,resourceCleanup,true);}  }
class C{  @DELETE @Path("/{providerName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("providerName") String providerName){  try {    getIDMClient().deleteProvider(tenant,providerName);  } catch (  NoSuchTenantException e) {    log.warn("Failed to remove identity provider '{}' from tenant '{}'",providerName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.warn("Failed to remove identity provider '{}' from tenant '{}' due to a client side error",providerName,tenant,e);    throw new BadRequestException(sm.getString("res.provider.delete.failed",providerName,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete identity provider '{}' from tenant '{}' due to a server side error",providerName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public static DoubleVector dchisq(double x,DoubleVector ncp){  int n=ncp.size();  DoubleVector d=new DoubleVector(n);  double xh=Math.sqrt(x);  double mean;  for (int i=0; i < n; i++) {    mean=Math.sqrt(ncp.get(i));    if (ncp.get(i) == 0.0)     d.set(i,dchisq(x)); else     d.set(i,(dnorm(xh - mean) + dnorm(-xh - mean)) / (2 * xh));  }  return d;}  }
class C{  public CronScheduleBuilder inTimeZone(TimeZone timezone){  cronExpression.setTimeZone(timezone);  return this;}  }
class C{  public void putInt(String key,int value){  editor.putInt(key,value);  editor.commit();}  }
class C{  public A(){}  }
class C{  public void initialize(List<? extends Club> allClubs){  service.create(allClubs);  service.create(leagueRoundGenerator.generateRounds(allClubs));}  }
class C{  public synchronized LongSetting createLongSetting(String key,long defaultValue){  LongSetting result=new LongSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public static int sizeInPages(int units,int heads){  Extent mapSize=Word.fromIntZeroExtend(units + heads + 1).lsh(LOG_BYTES_IN_UNIT).toExtent();  return Conversions.bytesToPagesUp(mapSize);}  }
class C{  public final boolean isFlowX(){  return flowX;}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  try {    debugCodeCall("findColumn",columnLabel);    return getColumnIndex(columnLabel);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void adaptTitle(){  if (titleTextView != null) {    titleTextView.setText(title);  }  adaptTitleContainerVisibility();}  }
class C{  public boolean isMessageIdRequired(){  return false;}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public static long[] hash(char[] key,long seed){  HashState hashState=new HashState(seed,seed);  final int chars=key.length;  final int nblocks=chars >> 3;  for (int i=0; i < nblocks; i++) {    long k1=getLong(key,8 * i,4);    long k2=getLong(key,(8 * i) + 4,4);    hashState.blockMix128(k1,k2);  }  int tail=nblocks * 8;  int rem=chars - tail;  long k1;  long k2;  if (rem > 4) {    k1=getLong(key,tail,4);    k2=getLong(key,tail + 4,rem - 4);  } else {    k1=(rem == 0) ? 0 : getLong(key,tail,rem);    k2=0;  }  return hashState.finalMix128(k1,k2,chars * Character.BYTES);}  }
class C{  public static void registerDefaultAlgorithms(){  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_NOT_RECOMMENDED_MD5,new Algorithm("","MD5","MessageDigest"));  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_RIPEMD160,new Algorithm("","RIPEMD160","MessageDigest"));  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA1,new Algorithm("","SHA-1","MessageDigest"));  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA256,new Algorithm("","SHA-256","MessageDigest"));  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA384,new Algorithm("","SHA-384","MessageDigest"));  algorithmsMap.put(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA512,new Algorithm("","SHA-512","MessageDigest"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_DSA,new Algorithm("","SHA1withDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_DSA_SHA256,new Algorithm("","SHA256withDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5,new Algorithm("","MD5withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_RIPEMD160,new Algorithm("","RIPEMD160withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1,new Algorithm("","SHA1withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256,new Algorithm("","SHA256withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA384,new Algorithm("","SHA384withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA512,new Algorithm("","SHA512withRSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA1,new Algorithm("","SHA1withECDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA256,new Algorithm("","SHA256withECDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA384,new Algorithm("","SHA384withECDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA512,new Algorithm("","SHA512withECDSA","Signature"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5,new Algorithm("","HmacMD5","Mac"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_RIPEMD160,new Algorithm("","HMACRIPEMD160","Mac"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA1,new Algorithm("","HmacSHA1","Mac"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA256,new Algorithm("","HmacSHA256","Mac"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA384,new Algorithm("","HmacSHA384","Mac"));  algorithmsMap.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA512,new Algorithm("","HmacSHA512","Mac"));  algorithmsMap.put(XMLCipher.TRIPLEDES,new Algorithm("DESede","DESede/CBC/ISO10126Padding","BlockEncryption",192));  algorithmsMap.put(XMLCipher.AES_128,new Algorithm("AES","AES/CBC/ISO10126Padding","BlockEncryption",128));  algorithmsMap.put(XMLCipher.AES_192,new Algorithm("AES","AES/CBC/ISO10126Padding","BlockEncryption",192));  algorithmsMap.put(XMLCipher.AES_256,new Algorithm("AES","AES/CBC/ISO10126Padding","BlockEncryption",256));  algorithmsMap.put(XMLCipher.AES_128_GCM,new Algorithm("AES","AES/GCM/NoPadding","BlockEncryption",128));  algorithmsMap.put(XMLCipher.AES_192_GCM,new Algorithm("AES","AES/GCM/NoPadding","BlockEncryption",192));  algorithmsMap.put(XMLCipher.AES_256_GCM,new Algorithm("AES","AES/GCM/NoPadding","BlockEncryption",256));  algorithmsMap.put(XMLCipher.RSA_v1dot5,new Algorithm("RSA","RSA/ECB/PKCS1Padding","KeyTransport"));  algorithmsMap.put(XMLCipher.RSA_OAEP,new Algorithm("RSA","RSA/ECB/OAEPPadding","KeyTransport"));  algorithmsMap.put(XMLCipher.RSA_OAEP_11,new Algorithm("RSA","RSA/ECB/OAEPPadding","KeyTransport"));  algorithmsMap.put(XMLCipher.DIFFIE_HELLMAN,new Algorithm("","","KeyAgreement"));  algorithmsMap.put(XMLCipher.TRIPLEDES_KeyWrap,new Algorithm("DESede","DESedeWrap","SymmetricKeyWrap",192));  algorithmsMap.put(XMLCipher.AES_128_KeyWrap,new Algorithm("AES","AESWrap","SymmetricKeyWrap",128));  algorithmsMap.put(XMLCipher.AES_192_KeyWrap,new Algorithm("AES","AESWrap","SymmetricKeyWrap",192));  algorithmsMap.put(XMLCipher.AES_256_KeyWrap,new Algorithm("AES","AESWrap","SymmetricKeyWrap",256));}  }
class C{  public Builder refreshToken(boolean refreshTokenRequested){  this.refreshTokenRequested=refreshTokenRequested;  return this;}  }
class C{  public SocketException(Throwable cause){  super(cause);}  }
class C{  @Override public void write(int b) throws IOException {  super.write(b);  bytesWritten+=1;  if (currentEntry != null) {    currentFileSize+=1;  }}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  static PollMessage createLosingTransferPollMessage(String targetId,TransferData transferData,@Nullable DateTime extendedRegistrationExpirationTime,HistoryEntry historyEntry){  return new PollMessage.OneTime.Builder().setClientId(transferData.getLosingClientId()).setEventTime(transferData.getPendingTransferExpirationTime()).setMsg(transferData.getTransferStatus().getMessage()).setResponseData(ImmutableList.of(createTransferResponse(targetId,transferData,extendedRegistrationExpirationTime))).setParent(historyEntry).build();}  }
class C{  public static Hash calculateHash(final VerifiableEntity entity){  return calculateHash(entity.asNonVerifiable());}  }
class C{  protected GenericDeclarationImpl(){  super();}  }
class C{  public boolean isChangesSelectedDateEnabled(){  return changesSelectedDateEnabled;}  }
class C{  public static String createDestination(String template,Movie movie,boolean forFilename){  String newDestination=template;  Pattern p=Pattern.compile("(\\$[\\w#])");  Matcher m=p.matcher(template);  while (m.find()) {    String value=getTokenValue(movie,m.group(1));    newDestination=replaceToken(newDestination,m.group(1),value);  }  newDestination=newDestination.replaceAll("\\(\\)","");  newDestination=newDestination.replaceAll("\\[\\]","");  newDestination=newDestination.replaceAll("\\{\\}","");  if (SystemUtils.IS_OS_WINDOWS) {    if (!forFilename) {      newDestination=newDestination.replaceAll("\\s+\\\\","\\\\");      newDestination=newDestination.replaceAll("\\\\\\s+","\\\\");    }    newDestination=newDestination.replaceAll("\\\\{2,}","\\\\");    newDestination=newDestination.replaceAll("^\\\\","");  } else {    if (!forFilename) {      newDestination=newDestination.replaceAll("\\s+/","/");      newDestination=newDestination.replaceAll("/\\s+","/");    }    newDestination=newDestination.replaceAll("/{2,}","/");    newDestination=newDestination.replaceAll("^/","");  }  if (forFilename) {    newDestination=newDestination.replaceAll("\\/"," ");    newDestination=newDestination.replaceAll("\\\\"," ");  }  newDestination=newDestination.replaceAll(" +"," ").trim();  if (MovieModuleManager.MOVIE_SETTINGS.isMovieRenamerSpaceSubstitution()) {    String replacement=MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerSpaceReplacement();    newDestination=newDestination.replace(" ",replacement);    newDestination=newDestination.replaceAll(Pattern.quote(replacement) + "+",replacement);  }  if (MovieModuleManager.MOVIE_SETTINGS.isAsciiReplacement()) {    newDestination=StrgUtils.convertToAscii(newDestination,false);  }  newDestination=newDestination.replaceAll("[ \\.]+$","");  return newDestination.trim();}  }
class C{  public ImmutableArray2<K> remove(int index){  int len=length - 1;  if (index == len) {    return new ImmutableArray2<K>(array,len);  }  @SuppressWarnings("unchecked") K[] a2=(K[])new Object[len];  DataUtils.copyExcept(array,a2,length,index);  return new ImmutableArray2<K>(a2,len);}  }
class C{  public String convertShiftOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void end(){  this.postState=new Hashtable<Object,Object>(11);  this.object.storeState(this.postState);  this.removeRedundantState();}  }
class C{  public final static short tertiaryOrder(int order){  return ((short)(order&=RBCollationTables.TERTIARYORDERMASK));}  }
class C{  public void dispatchSVGLoadEvent(){  SVGSVGElement root=(SVGSVGElement)document.getDocumentElement();  String lang=root.getContentScriptType();  long documentStartTime=System.currentTimeMillis();  bridgeContext.getAnimationEngine().start(documentStartTime);  dispatchSVGLoad(root,true,lang);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testTraversals(){  int n=3;  BinaryTree<Integer> bt=new BinaryTree<Integer>();  assertEquals("",pack(bt.inorder()));  assertEquals("",pack(bt.preorder()));  assertEquals("",pack(bt.postorder()));  assertEquals("",pack(bt.iterator()));  InorderTraversal itt;  try {    IBinaryTreeNode<Integer> root=bt.getRoot();    itt=new InorderTraversal(root);    fail("should fail on null root");  } catch (  Exception e) {  }  assertFalse(bt.iterator().hasNext());  try {    bt.iterator().remove();    fail("Shouldn't be able to modify binary tree through iterator.");  } catch (  Exception e) {  }  bt=buildComplete(n);  AbstractBinaryTraversal.Phase p=AbstractBinaryTraversal.Phase.valueOf("LEFT");  assertEquals(AbstractBinaryTraversal.Phase.LEFT,p);  assertEquals(AbstractBinaryTraversal.Phase.RIGHT,new InorderTraversal(bt.getRoot()).finalPhase());  assertEquals(AbstractBinaryTraversal.Phase.RIGHT,new PreorderTraversal(bt.getRoot()).finalPhase());  assertEquals(AbstractBinaryTraversal.Phase.SELF,new PostorderTraversal(bt.getRoot()).finalPhase());  try {    new InorderTraversal(bt.getRoot()).remove();    fail("shouldn't be able to mutate traversals");  } catch (  Exception e) {  }  Iterator<Integer> it=bt.inorder();  try {    it.remove();    fail("InOrder traversal claims to offer remove.");  } catch (  UnsupportedOperationException e) {  }  assertEquals("1,2,3,4,5,6,7",pack(it));  assertFalse(it.hasNext());  try {    it.next();    fail("InOrder traversal incorrectly exceeds its extension.");  } catch (  NoSuchElementException nsee) {  }  it=bt.preorder();  try {    it.remove();    fail("PreOrder traversal claims to offer remove.");  } catch (  UnsupportedOperationException e) {  }  assertEquals("4,2,1,3,6,5,7",pack(it));  assertFalse(it.hasNext());  try {    it.next();    fail("PreOrder traversal incorrectly exceeds its extension.");  } catch (  NoSuchElementException nsee) {  }  it=bt.postorder();  try {    it.remove();    fail("PostOrder traversal claims to offer remove.");  } catch (  UnsupportedOperationException e) {  }  assertEquals("1,3,2,5,7,6,4",pack(it));  assertFalse(it.hasNext());  try {    it.next();    fail("PostOrder traversal incorrectly exceeds its extension.");  } catch (  NoSuchElementException nsee) {  }  bt=buildComplete(1);  assertEquals("1",pack(bt.inorder()));  itt=new InorderTraversal(bt.getRoot());  assertTrue(itt.hasNext());  itt.next();  assertFalse(itt.hasNext());  bt=buildComplete(0);  assertEquals("",pack(bt.inorder()));}  }
class C{  String descToShortDesc(String fullDesc){  String[] descArr=fullDesc.split("\\.\\s",2);  return descArr[0].replaceAll("<.*?>","") + (descArr.length == 1 ? "" : ".");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getClassDefinition_();}  }
class C{  private void assertActionBarShowing(int orientation,boolean expected){  AppCompatActivity activity=Robolectric.setupActivity(FragmentUtilActivity.class);  activity.getResources().getConfiguration().orientation=orientation;  CourseUnitVideoFragment fragment=CourseUnitVideoFragment.newInstance(getVideoUnit(),false,false);  activity.getSupportFragmentManager().beginTransaction().add(1,fragment,null).commit();  assertTrue(fragment.getRetainInstance());  ActionBar bar=activity.getSupportActionBar();  assumeNotNull(bar);  assertEquals(expected,bar.isShowing());}  }
class C{  protected List<List<Solution>> associateToReferencePoint(Population population){  List<List<Solution>> result=new ArrayList<List<Solution>>();  for (int i=0; i < weights.size(); i++) {    result.add(new ArrayList<Solution>());  }  for (  Solution solution : population) {    double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);    double minDistance=Double.POSITIVE_INFINITY;    int minIndex=-1;    for (int i=0; i < weights.size(); i++) {      double distance=pointLineDistance(weights.get(i),objectives);      if (distance < minDistance) {        minDistance=distance;        minIndex=i;      }    }    result.get(minIndex).add(solution);  }  return result;}  }
class C{  Triangle(){  side1=side2=side3=1.0;}  }
class C{  public void testMergeOneContextParamIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <context-param>" + "    <param-name>param</param-name>"+ "    <param-value>value</param-value>"+ "  </context-param>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));}  }
class C{  public void doGenerate(IProgressMonitor monitor) throws IOException {  if (!targetFolder.getLocation().toFile().exists()) {    targetFolder.getLocation().toFile().mkdirs();  }  monitor.subTask("Loading...");  com.github.lbroudoux.dsl.eip.gen.switchyard.main.GenerateSwitchyard gen0=new com.github.lbroudoux.dsl.eip.gen.switchyard.main.GenerateSwitchyard(modelURI,targetFolder.getLocation().toFile(),arguments);  monitor.worked(1);  String generationID=org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID("com.github.lbroudoux.dsl.eip.gen.switchyard","com.github.lbroudoux.dsl.eip.gen.switchyard.main.GenerateSwitchyard",modelURI.toString(),targetFolder.getFullPath().toString(),new ArrayList<String>());  gen0.setGenerationID(generationID);  gen0.doGenerate(BasicMonitor.toMonitor(monitor));}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  public DataModelPipeline(Classifier baseClassifier,DataTransformProcess dtp){  this.baseDtp=dtp;  this.baseClassifier=baseClassifier;  if (baseClassifier instanceof Regressor)   this.baseRegressor=(Regressor)baseClassifier;}  }
class C{  private static final long decodeLELong(byte[] buf,int off){  return (buf[off + 0] & 0xFF) | ((long)(buf[off + 1] & 0xFF) << 8) | ((long)(buf[off + 2] & 0xFF) << 16)| ((long)(buf[off + 3] & 0xFF) << 24)| ((long)(buf[off + 4] & 0xFF) << 32)| ((long)(buf[off + 5] & 0xFF) << 40)| ((long)(buf[off + 6] & 0xFF) << 48)| ((long)(buf[off + 7] & 0xFF) << 56);}  }
class C{  boolean expansionFilesDelivered(){  for (  XAPKFile xf : xAPKS) {    String fileName=Helpers.getExpansionAPKFileName(this,xf.mIsMain,xf.mFileVersion);    if (!Helpers.doesFileExist(this,fileName,xf.mFileSize,false))     return false;  }  return true;}  }
class C{  public static String[] listResources(String quoteDirectoryUnquote) throws URISyntaxException, IOException {  final String dirWithSlash=trailingSlash(quoteDirectoryUnquote,true);  final URL url;  URL temp=getResource(dirWithSlash);  if (temp == null) {    temp=getResource(trailingSlash(quoteDirectoryUnquote,false));  }  url=temp;  if (url == null) {    return null;  }  if (url.getProtocol().equals("file")) {    final ArrayList<String> strings=new ArrayList<>();    final File dir=new File(url.toURI());    for (    final File f : FileUtils.listFiles(dir)) {      strings.add(StringUtils.FS.equals("/") ? f.getPath() : f.getPath().replaceAll("\\\\" + StringUtils.FS,"/"));    }    return strings.toArray(new String[strings.size()]);  } else   if (url.getProtocol().equals("jar")) {    final ArrayList<String> strings=new ArrayList<>();    assert url.getPath().startsWith("file:");    final String jarPath=url.getPath().substring(5,url.getPath().lastIndexOf('!'));    try (JarFile jf=new JarFile(jarPath)){      final Enumeration<JarEntry> en=jf.entries();      while (en.hasMoreElements()) {        final JarEntry je=en.nextElement();        if (je.getName().startsWith(dirWithSlash)) {          final String rest=je.getName().substring(dirWithSlash.length());          final int index=rest.indexOf('/');          if (rest.length() > 0 && (index < 0 || (index > 0 && index == rest.length() - 1))) {            strings.add(je.getName());          }        }      }    }     return strings.toArray(new String[strings.size()]);  }  return null;}  }
class C{  public void start(String json){  guidedTourSteps.clear();  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);  log.setDebugMode(configuration.getDebugMode());  this.guidedTourSteps=configuration.getSteps();  this.tourName=configuration.getName();  if (this.tourName == null || tourName.isEmpty()) {    tourName="unamed";  }  this.hasWelcomeStep=configuration.getHasWelcomeStep();  startTour();}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta.length != digestb.length) {    return false;  }  for (int i=0; i < digesta.length; i++) {    if (digesta[i] != digestb[i]) {      return false;    }  }  return true;}  }
class C{  protected static final long currentTimeMillis(){  try {    Method mNanoTime=System.class.getDeclaredMethod("nanoTime",(Class[])null);    return ((Long)mNanoTime.invoke(null,(Object[])null)).longValue() / 1000000;  } catch (  Exception ex) {    return System.currentTimeMillis();  }}  }
class C{  @Override public void executeScriptFiles(List<String> scriptFilePaths){  for (  String scriptFilePath : scriptFilePaths) {    File scriptFile=new File(scriptFilePath);    if (scriptFile.isAbsolute() && !scriptFile.exists()) {      getLogger().warn(String.format("Script file %s doesn't exists.",scriptFilePath),this.getClass().getName());    } else {      JvmLauncher java=createJvmLauncher(false);      addCliArguments(java);      setProperties(java);      java.addAppArguments("--file=" + scriptFile);      int result=java.execute();      if (result != 0) {        throw new ContainerException("Failure when invoking CLI script," + " java returned " + result);      }    }  }}  }
class C{  public static VectorClock increment(VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,System.currentTimeMillis());  return clock;}  }
class C{  public static HashMap<String,Double> calcMLStats(double predictions[][],int goldStandard[][],double t[]){  int N=goldStandard.length;  int L=goldStandard[0].length;  int Ypred[][]=ThresholdUtils.threshold(predictions,t);  HashMap<String,Double> results=new LinkedHashMap<String,Double>();  Mean mean=new Mean();  results.put(NUMBER_LABELS,(double)L);  results.put(NUMBER_EXAMPLES,(double)N);  results.put(ZERO_ONE_LOSS,Metrics.L_ZeroOne(goldStandard,Ypred));  results.put(LABEL_CARDINALITY_PRED,MLUtils.labelCardinality(Ypred));  results.put(LABEL_CARDINALITY_REAL,MLUtils.labelCardinality(goldStandard));  results.put(AVERAGE_THRESHOLD,mean.evaluate(t,0,t.length));  results.put(EMPTY_VECTORS,MLUtils.emptyVectors(Ypred));  return results;}  }
class C{  public void close(){  logger.info("Closing monitor service.");  if (null != dlClient) {    dlClient.close();  }  if (null != zkServerSets) {    for (    DLZkServerSet zkServerSet : zkServerSets) {      zkServerSet.close();    }  }  if (null != dlNamespace) {    dlNamespace.close();  }  executorService.shutdown();  try {    if (!executorService.awaitTermination(1,TimeUnit.MINUTES)) {      executorService.shutdownNow();    }  } catch (  InterruptedException e) {    logger.error("Interrupted on waiting shutting down monitor executor service : ",e);  }  if (null != statsProvider) {    statsProvider.stop();  }  keepAliveLatch.countDown();  logger.info("Closed monitor service.");}  }
class C{  @Override public synchronized void updateObject(int columnIndex,Object x,int scaleOrLength) throws SQLException {  super.updateObject(columnIndex,JDBC42Helper.convertJavaTimeToJavaSql(x),scaleOrLength);}  }
class C{  public static void computePolygonNormal(FloatBuffer vertexBuffer,FloatBuffer normalBuffer,boolean zPos){  int n=vertexBuffer.limit();  double count=0;  Vector3 meanNormal=new Vector3();  Vector3 vec0=new Vector3();  Vector3 vec1=new Vector3();  Vector3 vec2=new Vector3();  meanNormal.set(0,0,0);  for (int i=0; i < n; i+=9) {    vec0.set(vertexBuffer.get(i),vertexBuffer.get(i + 1),vertexBuffer.get(i + 2));    vec1.set(vertexBuffer.get(i + 3),vertexBuffer.get(i + 4),vertexBuffer.get(i + 5));    vec2.set(vertexBuffer.get(i + 6),vertexBuffer.get(i + 7),vertexBuffer.get(i + 8));    vec0.subtractLocal(vec1);    vec1.subtractLocal(vec2);    vec0.crossLocal(vec1);    if (zPos && (vec0.getZ() < 0)) {      vec0.negateLocal();    }    meanNormal.addLocal(vec0);    count++;  }  meanNormal.multiplyLocal(1.0 / count);  meanNormal.normalizeLocal();  for (int i=0; i < vertexBuffer.limit(); i+=3) {    normalBuffer.put(meanNormal.getXf());    normalBuffer.put(meanNormal.getYf());    normalBuffer.put(meanNormal.getZf());  }  normalBuffer.flip();}  }
class C{  public void onStartedTask(){  if (startedTask)   return;  startedTask=true;  MinionsCore.debugPrint("onStartedTask " + this + " ["+ this.posX+ "|"+ this.posY+ "|"+ this.posZ+ "], worker "+ worker);  taskTimeStarted=System.currentTimeMillis();  startMinionX=worker.posX;  startMinionZ=worker.posZ;  AStarNode[] possibleAccessNodes=getAccessNodesSorted(MathHelper.floor_double(worker.posX),MathHelper.floor_double(worker.posY) - 1,MathHelper.floor_double(worker.posZ));  if (possibleAccessNodes.length != 0) {    this.worker.orderMinionToMoveTo(possibleAccessNodes,false);  } else {    MinionsCore.debugPrint("Teleporting Minion to impathable task " + this);    worker.performTeleportToTarget();  }}  }
class C{  public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,int shmemId,IgniteLogger parent) throws IgniteCheckedException {  assert size > 0 : "Size cannot be less than 1 byte";  log=parent.getLogger(IpcSharedMemorySpace.class);  opSize=size;  isReader=reader;  this.shmemId=shmemId;  this.writerPid=writerPid;  this.readerPid=readerPid;  this.tokFileName=tokFileName;  shmemPtr=IpcSharedMemoryUtils.attach(shmemId,DEBUG && log.isDebugEnabled());  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);}  }
class C{  public static PricedEvent updatePricedEvent(VOPricedEvent voPE,PricedEvent pEvt) throws ValidationException, ConcurrentModificationException {  verifyVersionAndKey(pEvt,voPE);  validatePricedEvent(voPE);  pEvt.setEventPrice(voPE.getEventPrice());  return pEvt;}  }
class C{  public void testSetF28Momentary(){  boolean f28Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF28Momentary(f28Momentary);}  }
class C{  void traverse(NodeRef node,int[] parentSequence,int[] category,SimpleAlignment alignment){  if (DEBUG) {    System.out.println();    System.out.println("I'm at: " + node.toString());    System.out.println();  }  for (int iChild=0; iChild < m_tree.getChildCount(node); iChild++) {    NodeRef child=m_tree.getChild(node,iChild);    for (int i=0; i < m_categoryCount; i++) {      getTransitionProbabilities(m_tree,child,i,m_probabilities[i]);    }    if (DEBUG) {      System.out.println("Going to child " + iChild + ": "+ child.toString());      System.out.println("Child finite transition probs matrix:");      Utils.print2DArray(m_probabilities,4);      System.out.println();    }    int[] seq=new int[m_sequenceLength];    double[] cProb=new double[m_stateCount];    for (int i=0; i < m_sequenceLength; i++) {      System.arraycopy(m_probabilities[category[i]],parentSequence[i] * m_stateCount,cProb,0,m_stateCount);      if (DEBUG) {        System.out.println("site:" + i);        System.out.println("site probs:");        Utils.printArray(cProb);      }      seq[i]=MathUtils.randomChoicePDF(cProb);    }    if (DEBUG) {      System.out.println("Simulated sequence:");      Utils.printArray(seq);    }    if (m_tree.getChildCount(child) == 0) {      if (DEBUG) {        System.out.println("Simulated sequence (translated):");        System.out.println(intArray2Sequence(seq,child).getSequenceString());      }      alignment.addSequence(intArray2Sequence(seq,child));    }    traverse(m_tree.getChild(node,iChild),seq,category,alignment);  }}  }
class C{  public static void main(String[] argv){  runFilter(new RandomProjection(),argv);}  }
class C{  private static byte[] write24BitForPixcel(int value) throws IOException {  byte[] b=new byte[3];  b[0]=(byte)(value & 0x000000FF);  b[1]=(byte)((value & 0x0000FF00) >> 8);  b[2]=(byte)((value & 0x00FF0000) >> 16);  return b;}  }
class C{  @RequestMapping(method=GET,value="{id}/finalize") @ResponseBody public Object finalizeStorage(@PathVariable String id) throws BusinessException {  StorageData storageData=new StorageData();  storageData.setId(id);  storageService.closeStorage(storageData);  return Collections.singletonMap("message","Storage id " + id + " successfully finalized.");}  }
class C{  public boolean isExpired(){  return isExpired;}  }
class C{  public void testToStringNeg(){  String a="-123.4564563673567380964839238475457356735674573563567890295784902768787678287E-5";  BigDecimal aNumber=new BigDecimal(a);  String result="-0.001234564563673567380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  @Command(description="Show certificate") public void showCertificate(@Param(name="certId",description="Certificate ID") String certId) throws Exception {  List<TokenInfo> tokens=SignerClient.execute(new ListTokens());  for (  TokenInfo token : tokens) {    for (    KeyInfo key : token.getKeyInfo()) {      for (      CertificateInfo cert : key.getCerts()) {        if (certId.equals(cert.getId())) {          X509Certificate x509=readCertificate(cert.getCertificateBytes());          System.out.println(x509);          return;        }      }    }  }  System.out.println("Certificate " + certId + " not found");}  }
class C{  public void index(Tuple t,String field){  String s;  if ((s=t.getString(field)) == null)   return;  StringTokenizer st=new StringTokenizer(s,m_delim);  while (st.hasMoreTokens()) {    String tok=st.nextToken();    addString(tok,t);  }}  }
class C{  public static void clearCache(File cacheFile){  if (cacheFile == null) {    try {      File cacheDir=GoddessApplication.getInstance().getCacheDir();      if (cacheDir.exists()) {        clearCache(cacheDir);      }    } catch (    Exception e) {      e.printStackTrace();    }  } else   if (cacheFile.isFile()) {    cacheFile.delete();  } else   if (cacheFile.isDirectory()) {    File[] childFiles=cacheFile.listFiles();    for (int i=0; i < childFiles.length; i++) {      clearCache(childFiles[i]);    }  }}  }
class C{  private int removeUntil(int trunkPage,int firstDataPageToKeep){  trace.debug("log.removeUntil " + trunkPage + " "+ firstDataPageToKeep);  int last=trunkPage;  while (true) {    Page p=store.getPage(trunkPage);    PageStreamTrunk t=(PageStreamTrunk)p;    if (t == null) {      throw DbException.throwInternalError("log.removeUntil not found: " + firstDataPageToKeep + " last "+ last);    }    logKey=t.getLogKey();    last=t.getPos();    if (t.contains(firstDataPageToKeep)) {      return last;    }    trunkPage=t.getNextTrunk();    IntArray list=new IntArray();    list.add(t.getPos());    for (int i=0; ; i++) {      int next=t.getPageData(i);      if (next == -1) {        break;      }      list.add(next);    }    freeLogPages(list);    pageOut.free(t);  }}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  public static List<LatLon> computeShiftedLocations(Position oldLocation,Position newLocation,Iterable<? extends LatLon> locations){  if (oldLocation == null || newLocation == null) {    String msg=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (locations == null) {    String msg=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  ArrayList<LatLon> newPositions=new ArrayList<LatLon>();  for (  LatLon location : locations) {    Angle distance=LatLon.greatCircleDistance(oldLocation,location);    Angle azimuth=LatLon.greatCircleAzimuth(oldLocation,location);    newPositions.add(Position.greatCircleEndPosition(newLocation,azimuth,distance));  }  return newPositions;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 > z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 > constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 > constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public TermsQueryBuilder(String name,Object... values){  this.name=name;  this.values=values;}  }
class C{  public static int sp2px(Context context,float spValue){  return (int)(spValue * context.getResources().getDisplayMetrics().scaledDensity + 0.5f);}  }
class C{  public void println() throws IOException {  newLine();}  }
class C{  public static boolean isHighAvailability(String id){  for (  VirtualArrayConnectivityRestRep connectivity : getConnectivity(id)) {    if (connectivity.getConnectionType().contains(ConnectivityTypes.VPLEX)) {      return true;    }  }  return false;}  }
class C{  protected static String defaultIfNoValue(final String value,final String defaultValue){  return (hasValue(value) ? value : defaultValue);}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  public void testInit(){  System.out.println("init");  mockInitialisationCalls(false,null);  mockAudit.setStatus(AuditStatus.CRAWLING);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  setReplayMode();  CrawlAuditCommandImpl instance=new TestCrawlAuditCommandImpl();  instance.init();  setVerifyMode();}  }
class C{  public static String generateUUID(){  return UUID.randomUUID().toString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public AsyncResult DeleteReferencesAsync(RequestHeader RequestHeader,DeleteReferencesItem... ReferencesToDelete){  DeleteReferencesRequest req=new DeleteReferencesRequest(RequestHeader,ReferencesToDelete);  return channel.serviceRequestAsync(req);}  }
class C{  public static FileSetInfo lockFileSet(ZooKeeperManager zkManager,String fileSet,CreateMode mode) throws Exception {  FileSetInfo fileSetInfo=zkManager.getFileSetInfo(fileSet);  if (fileSetInfo == null) {    throw new IllegalArgumentException("no such file set or it is invalid");  }  zkManager.lockFileSet(fileSet,fileSetInfo,mode);  return zkManager.getFileSetInfo(fileSet);}  }
class C{  @Override public void ignorableWhitespace(char[] text,int start,int len) throws SAXException {  if (curHandler != null && curHandler.innerXml != null && (curHandler.mixedContent || unrecognizedElements > 0)) {    try {      curHandler.innerXml.writeUnescaped(new String(text,start,len));    } catch (    IOException e) {      throw new SAXException(e);    }  }}  }
class C{  private String buildProvisioningAddress(){  String mnc=String.format(Locale.US,"%03d",mRcsSettings.getMobileNetworkCode());  String mcc=String.format(Locale.US,"%03d",mRcsSettings.getMobileCountryCode());  return "config.rcs.mnc" + mnc + ".mcc"+ mcc+ ".pub.3gppnetwork.org";}  }
class C{  public double dividendRho(final double maturity){  QL.require(maturity >= 0.0,"negative maturity not allowed");  final double DalphaDq=-dAlpha_dD1 / stdDev;  final double DbetaDq=-dBeta_dD2 / stdDev;  final double temp=DalphaDq * forward - alpha * forward + DbetaDq * x;  return maturity * discount * temp;}  }
class C{  public void testField(){  checkSecretKey sk=new checkSecretKey();  assertEquals("Incorrect serialVersionUID",sk.getSerVerUID(),-4795878709595146952L);}  }
class C{  public void insertRecord(int id,byte[] record) throws IOException {  if (!database.isOpen())   throw new IllegalStateException("don't access the table before opening the database");  if (id < committedNextRowId) {    throw new IllegalStateException("Trying to insert a row below nextRowId: " + id + ", this: "+ this);  }  if (id != lastTransactionInsertId + 1) {    throw new IllegalStateException("Trying to insert a row that is not one above the last transaction id: " + lastTransactionInsertId + ", id: "+ id);  }  if (record.length != recordSize) {    throw new IllegalStateException("Record is wrong size: " + record.length + ", this: "+ this);  }synchronized (this) {    rwRaf.seek(HEADER_SIZE + recordSize * id);    rwRaf.write(record);  }  lastTransactionInsertId=id;}  }
class C{  protected GenericObject next(){  if (myListIterator == null) {    myListIterator=this.listIterator(0);  }  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    myListIterator=null;    return null;  }}  }
class C{  public SerialNumber(InputStream in) throws IOException {  DerValue derVal=new DerValue(in);  construct(derVal);}  }
class C{  private static boolean isPrintableString(String str){  for (int i=0; i < str.length(); ++i) {    char ch=str.charAt(i);    if (!(ch == 0x20 || ch >= 0x27 && ch <= 0x29 || ch >= 0x2B && ch <= 0x3A || ch == '=' || ch == '?' || ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {      return false;    }  }  return true;}  }
class C{  public static Boolean toBoolean(int i){  return i != 0 ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void logMemoryStatistics(){  MemoryUsage heapMemoryUsage=memoryMXBean.getHeapMemoryUsage();  MemoryUsage nonHeapMemoryUsage=memoryMXBean.getNonHeapMemoryUsage();  log.info("Heap: " + heapMemoryUsage);  logGraphicalMemoryUsage(heapMemoryUsage,"Heap");  log.info("Non Heap: " + nonHeapMemoryUsage);  logGraphicalMemoryUsage(nonHeapMemoryUsage,"Non-Heap");  log.info("Pending finalizations: " + memoryMXBean.getObjectPendingFinalizationCount());}  }
class C{  public static SimpleAttributeSet createAttributeSet(String fontName,int fontSize,boolean italic,boolean bold){  SimpleAttributeSet as=new SimpleAttributeSet();  as.addAttribute(StyleConstants.CharacterConstants.FontFamily,fontName);  as.addAttribute(StyleConstants.CharacterConstants.FontSize,fontSize);  as.addAttribute(StyleConstants.CharacterConstants.Italic,italic);  as.addAttribute(StyleConstants.CharacterConstants.Bold,bold);  as.addAttribute(StyleConstants.ALIGN_RIGHT,true);  return as;}  }
class C{  @Command(description="Check if batch signing is available on token") public void batchSigningEnabled(@Param(name="keyId",description="Key ID") String keyId) throws Exception {  Boolean enabled=SignerClient.execute(new GetTokenBatchSigningEnabled(keyId));  if (enabled) {    System.out.println("Batch signing is enabled");  } else {    System.out.println("Batch signing is NOT enabled");  }}  }
class C{  static String phaseDiploidCall(String fatherCall,String motherCall,String childCall){  final int[] childAlleles=VcfUtils.splitGt(childCall);  if ((childAlleles.length == 2) && (childAlleles[0] != -1) && (childAlleles[1] != -1)) {    if (childAlleles[0] == childAlleles[1]) {      return "" + childAlleles[0] + VcfUtils.PHASED_SEPARATOR+ childAlleles[1];    } else {      final int[] fatherAlleles=VcfUtils.splitGt(fatherCall);      final int[] motherAlleles=VcfUtils.splitGt(motherCall);      final boolean firstInFather=contains(fatherAlleles,childAlleles[0]);      final boolean firstInMother=contains(motherAlleles,childAlleles[0]);      final boolean secondInFather=contains(fatherAlleles,childAlleles[1]);      final boolean secondInMother=contains(motherAlleles,childAlleles[1]);      final boolean firstOnlyInFather=firstInFather && !firstInMother;      final boolean firstOnlyInMother=firstInMother && !firstInFather;      final boolean secondOnlyInFather=secondInFather && !secondInMother;      final boolean secondOnlyInMother=secondInMother && !secondInFather;      if ((firstOnlyInMother || secondOnlyInFather) && !(firstOnlyInFather || secondOnlyInMother)) {        return "" + childAlleles[1] + VcfUtils.PHASED_SEPARATOR+ childAlleles[0];      } else       if ((firstOnlyInFather || secondOnlyInMother) && !(firstOnlyInMother || secondOnlyInFather)) {        return "" + childAlleles[0] + VcfUtils.PHASED_SEPARATOR+ childAlleles[1];      }    }  }  return null;}  }
class C{  public static OperationModel createModel(VisibilityPredicate visibility,ReflectionPredicate reflectionPredicate,Set<String> classnames,Set<String> exercisedClassnames,Set<String> methodSignatures,ClassNameErrorHandler errorHandler,List<String> literalsFileList) throws OperationParseException, NoSuchMethodException {  OperationModel model=new OperationModel();  model.addClassTypes(visibility,reflectionPredicate,classnames,exercisedClassnames,errorHandler,literalsFileList);  model.addOperations(model.classTypes,visibility,reflectionPredicate);  model.addOperations(methodSignatures);  model.addObjectConstructor();  return model;}  }
class C{  public final void removeFields(String name){  Iterator<IndexableField> it=fields.iterator();  while (it.hasNext()) {    IndexableField field=it.next();    if (field.name().equals(name)) {      it.remove();    }  }}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  public T caseInlineComment_(InlineComment_ object){  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND:    setOperand((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void addDrawable(Drawable drawable){  if (drawable != null) {    mMipmapContainerState.addDrawable(drawable);    onDrawableAdded();  }}  }
class C{  public static void readIntegerCollection(@Nonnull Collection<Integer> coll,@Nonnull NBTTagCompound data){  final NBTBase base=data.getTag("data");  if (base instanceof NBTTagIntArray) {    final NBTTagIntArray ary=(NBTTagIntArray)base;    for (    int i : ary.func_150302_c()) {      coll.add(i);    }  } else {    final NBTType actual=NBTType.byId(base.getId());    throw UnexpectedNBTTagType.createFor(NBTType.INT_ARRAY,actual);  }}  }
class C{  public SVGOMPoint(float x,float y){  this.x=x;  this.y=y;}  }
class C{  @SuppressWarnings("unchecked") public void validate(Object val){  if (!clazz.isInstance(val)) {    throw APIException.badRequests.notAnInstanceOf(clazz.getSimpleName());  }  try {    Iterator<Map.Entry<String,FieldInfo>> it=fieldInfo.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<String,FieldInfo> field=it.next();      FieldInfo fi=field.getValue();      Object fieldVal=fi.getValue(val);      if (fi.required) {        if (fieldVal == null) {          throw APIException.badRequests.requiredParameterMissingOrEmpty(fi.name);        }      }      if (!fi.nillable) {        if (fieldVal instanceof String && ((String)fieldVal).trim().isEmpty()) {          throw APIException.badRequests.requiredParameterMissingOrEmpty(fi.name);        }      }      if (fi.enumType != null && fieldVal instanceof String) {        try {          Enum.valueOf(fi.enumType,(String)fieldVal);        } catch (        IllegalArgumentException e) {          throw APIException.badRequests.invalidField(fi.name,(String)fieldVal,e);        }      }      if (fi.type != null && fi.type instanceof Endpoint.EndpointType && fieldVal instanceof String) {        if (!EndpointUtility.isValidEndpoint((String)fieldVal,(Endpoint.EndpointType)fi.type)) {          throw APIException.badRequests.invalidField(fi.name,(String)fieldVal);        }      }      if (fieldVal instanceof String) {        fi.setValue(val,((String)fieldVal).trim());      }      if (fieldVal instanceof String && (fi.min != null || fi.max != null)) {        int length=((String)fieldVal).length();        ArgValidator.checkFieldRange(length,fi.min,fi.max,"length");      }      if (fieldVal instanceof Number && (fi.min != null || fi.max != null)) {        Number value=(Number)fieldVal;        ArgValidator.checkFieldRange(value.longValue(),fi.min,fi.max,fi.name);      }      if (fieldVal instanceof Collection) {        ParameterizedType paramType=(ParameterizedType)fi.getGenericType();        Type elementType=paramType.getActualTypeArguments()[0];        if (elementType.equals(String.class)) {          boolean needNillCheck=false;          boolean needLengthCheck=false;          if (!fi.nillable) {            needNillCheck=true;          }          if (fi.min != null || fi.max != null) {            needLengthCheck=true;          }          Iterator<String> iterator=((Collection<String>)fieldVal).iterator();          Collection<String> trimmedList=new ArrayList<String>();          while (iterator.hasNext()) {            String element=iterator.next().trim();            if (needNillCheck && element.isEmpty()) {              throw APIException.badRequests.requiredParameterMissingOrEmpty(fi.name);            }            if (needLengthCheck) {              lengthCheck(element,fi);            }            iterator.remove();            trimmedList.add(element);          }          for (          String element : trimmedList) {            ((Collection<String>)fieldVal).add(element);          }        } else         if (elementType.equals(Number.class)) {          if (fi.min != null || fi.max != null) {            for (            Number element : (Collection<Number>)fieldVal) {              rangeCheck(element,fi);            }          }        }      }    }  } catch (  InvocationTargetException e) {    _log.error("Unexpected exception:",e);    throw APIException.internalServerErrors.genericApisvcError(e.getMessage(),e);  }catch (  IllegalAccessException e) {    _log.error("Unexpected exception:",e);    throw APIException.internalServerErrors.genericApisvcError(e.getMessage(),e);  }}  }
class C{  boolean isNavigatable(int offset){  return !isLiteral(offset);}  }
class C{  public boolean providesCapturedParameters(){  return (null != getParameterContentData()) && !getParameterContentData().isEmpty();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public String[] createUserFlags(){  String[] flags=new String[userFlags.size()];  for (int i=0; i < userFlags.size(); i++) {    flags[i]=userFlags.get(i);  }  return flags;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public boolean isAllowedToWriteReview(){  return allowedToWriteReview;}  }
class C{  public void createClusterPaths() throws Exception {  if (zkClient.get().exists(clusterPath,false) == null) {    zkClient.get().create(clusterPath,null,ZK_ACL_LIST,CreateMode.PERSISTENT);  }  if (zkClient.get().exists(clusterLocksPath,false) == null) {    zkClient.get().create(clusterLocksPath,null,ZK_ACL_LIST,CreateMode.PERSISTENT);  }  if (zkClient.get().exists(clusterViewsPath,false) == null) {    zkClient.get().create(clusterViewsPath,null,ZK_ACL_LIST,CreateMode.PERSISTENT);  }}  }
class C{  public Collective(String name,Observer o){  this(name,o,null,null);}  }
class C{  public void beforeCartesianOfGroupJunctionsInAnAllGroupJunctionOfType_AND(Collection[] grpResults){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.ENRICHER__PART:    return part != PART_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void translateZ(float units){  this.position.z+=units;  updated=false;}  }
class C{  @Override protected void promoteEOL(){  SemicolonInjectionHelper.promoteEOL(this);}  }
class C{  @Scheduled(cron="0 0 0 * * ?") public void removeOldPersistentTokens(){  LocalDate now=new LocalDate();  persistentTokenRepository.findByTokenDateBefore(now.minusMonths(1)).stream().forEach(null);}  }
class C{  public static ArrayExpression array(){  return new ArrayExpression();}  }
class C{  public String encodeBody(){  return priority;}  }
class C{  public static <T,F>boolean postCompleteRequest(long n,Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled){  for (; ; ) {    long r=field.get(instance);    long r0=r & REQUESTED_MASK;    long u=(r & COMPLETED_MASK) | Operators.addCap(r0,n);    if (field.compareAndSet(instance,r,u)) {      if (r == COMPLETED_MASK) {        postCompleteDrain(n | COMPLETED_MASK,actual,queue,field,instance,isCancelled);        return true;      }      return false;    }  }}  }
class C{  public EnvironmentId(Scope scope,String name){  this(scope,null,name);}  }
class C{  public void managerSuspended(UpdateManagerEvent e){}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return StextPackage.INTERFACE_SCOPE__NAME;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  VariableStack vars=xctxt.getVarStack();  int nParams=getParamElemCount();  int thisframe=vars.getStackFrame();  boolean pushContextNodeListFlag=false;  try {    xctxt.pushCurrentNode(DTM.NULL);    xctxt.pushCurrentExpressionNode(DTM.NULL);    xctxt.pushSAXLocatorNull();    transformer.pushElemTemplateElement(null);    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    final SerializationHandler rth=transformer.getSerializationHandler();    final StylesheetRoot sroot=transformer.getStylesheet();    final TemplateList tl=sroot.getTemplateListComposed();    final boolean quiet=transformer.getQuietConflictWarnings();    DTM dtm=xctxt.getDTM(sourceNode);    int argsFrame=-1;    if (nParams > 0) {      argsFrame=vars.link(nParams);      vars.setStackFrame(thisframe);      for (int i=0; i < nParams; i++) {        ElemWithParam ewp=m_paramElems[i];        XObject obj=ewp.getValue(transformer,sourceNode);        vars.setLocalVariable(i,obj,argsFrame);      }      vars.setStackFrame(argsFrame);    }    xctxt.pushContextNodeList(sourceNodes);    pushContextNodeListFlag=true;    IntStack currentNodes=xctxt.getCurrentNodeStack();    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if (xctxt.getDTM(child) != dtm) {        dtm=xctxt.getDTM(child);      }      final int exNodeType=dtm.getExpandedTypeID(child);      final int nodeType=dtm.getNodeType(child);      final QName mode=transformer.getMode();      ElemTemplate template=tl.getTemplateFast(xctxt,child,exNodeType,mode,-1,quiet,dtm);      if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:          template=sroot.getDefaultRule();        break;case DTM.ATTRIBUTE_NODE:case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:      transformer.pushPairCurrentMatched(sroot.getDefaultTextRule(),child);    transformer.setCurrentElement(sroot.getDefaultTextRule());  dtm.dispatchCharactersEvents(child,rth,false);transformer.popCurrentMatched();continue;case DTM.DOCUMENT_NODE:template=sroot.getDefaultRootRule();break;default :continue;}} else {transformer.setCurrentElement(template);}transformer.pushPairCurrentMatched(template,child);int currentFrameBottom;if (template.m_frameSize > 0) {xctxt.pushRTFContext();currentFrameBottom=vars.getStackFrame();vars.link(template.m_frameSize);if (template.m_inArgsSize > 0) {int paramIndex=0;for (ElemTemplateElement elem=template.getFirstChildElem(); null != elem; elem=elem.getNextSiblingElem()) {if (Constants.ELEMNAME_PARAMVARIABLE == elem.getXSLToken()) {ElemParam ep=(ElemParam)elem;int i;for (i=0; i < nParams; i++) {ElemWithParam ewp=m_paramElems[i];if (ewp.m_qnameID == ep.m_qnameID) {XObject obj=vars.getLocalVariable(i,argsFrame);vars.setLocalVariable(paramIndex,obj);break;}}if (i == nParams) vars.setLocalVariable(paramIndex,null);} else break;paramIndex++;}}} else currentFrameBottom=0;for (ElemTemplateElement t=template.m_firstChild; t != null; t=t.m_nextSibling) {xctxt.setSAXLocator(t);try {transformer.pushElemTemplateElement(t);t.execute(transformer);}  finally {transformer.popElemTemplateElement();}}if (template.m_frameSize > 0) {vars.unlink(currentFrameBottom);xctxt.popRTFContext();}transformer.popCurrentMatched();}} catch (SAXException se) {transformer.getErrorListener().fatalError(new TransformerException(se));} finally {if (nParams > 0) vars.unlink(thisframe);xctxt.popSAXLocator();if (pushContextNodeListFlag) xctxt.popContextNodeList();transformer.popElemTemplateElement();xctxt.popCurrentExpressionNode();xctxt.popCurrentNode();sourceNodes.detach();}}  }
class C{  public ProtocolEncoderException(String message){  super(message);}  }
class C{  public int toSortedModelIndex(int unsortedIndex){  int sortedIndex=-1;  int x=-1;  for (  SortedListEntry entry : sortedModel) {    ++x;    if (entry.getIndex() == unsortedIndex) {      sortedIndex=x;      break;    }  }  return sortedIndex;}  }
class C{  protected V justGet(K key){  if (key == null) {    throw new NullPointerException("key == null");  }  V mapValue;synchronized (this) {    mapValue=map.get(key);    if (mapValue != null) {      hitCount++;      return mapValue;    }    missCount++;  }  return null;}  }
class C{  public void pauseTriggers(GroupMatcher<TriggerKey> matcher) throws SchedulerException {  try {    getRemoteScheduler().pauseTriggers(matcher);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void ensureVisible(Component c){  TestUtils.ensureVisible(c);}  }
class C{  public void testGetF16Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF16Momentary();  assertEquals(expResult,result);}  }
class C{  public void removeRecord(Record r){  Name name=r.getName();  int rtype=r.getRRsetType();synchronized (this) {    RRset rrset=findRRset(name,rtype);    if (rrset == null)     return;    if (rrset.size() == 1 && rrset.first().equals(r))     removeRRset(name,rtype); else     rrset.deleteRR(r);  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the nubmer of students: ");  int[] scores=new int[input.nextInt()];  char[] grades=new char[scores.length];  System.out.print("Enter " + scores.length + " scores: ");  for (int i=0; i < scores.length; i++) {    scores[i]=input.nextInt();  }  getGrades(scores,grades);  for (int i=0; i < scores.length; i++) {    System.out.println("Student " + i + " score is "+ scores[i]+ " and grade is "+ grades[i]);  }}  }
class C{  public PNGWriter(JComponent c,File f){  super(c,f);}  }
class C{  @Override public void unTrackEditor(EditorPartPresenter editor){  Path path=editor.getEditorInput().getFile().getLocation();  EditorGroupSynchronization group=editorGroups.get(path);  if (group == null) {    return;  }  group.removeEditor(editor);  if (group.getSynchronizedEditors().isEmpty()) {    group.unInstall();    editorGroups.remove(path);  }}  }
class C{  public Builder withRetainStaleSnapshots(){  return withRetainStaleSnapshots(true);}  }
class C{  public boolean isSuitableForContainerVm(ContainerVm vm){  return (getContainerVmScheduler().getPeCapacity() >= vm.getCurrentRequestedMaxMips() && getContainerVmScheduler().getAvailableMips() >= vm.getCurrentRequestedTotalMips() && getContainerVmRamProvisioner().isSuitableForContainerVm(vm,vm.getCurrentRequestedRam()) && getContainerVmBwProvisioner().isSuitableForContainerVm(vm,vm.getCurrentRequestedBw()));}  }
class C{  private Timestamp make_localtime(){  int offset=_offset != null ? _offset.intValue() : 0;  Timestamp localtime=new Timestamp(_precision,_year,_month,_day,_hour,_minute,_second,_fraction,_offset,APPLY_OFFSET_NO);  localtime.apply_offset(-offset);  assert localtime._offset == _offset;  return localtime;}  }
class C{  public static double chidist(double x,int degreesOfFreedom){  if ((x < 0.0) || (degreesOfFreedom < 0)) {    throw new ArithmeticException("The Chi Distribution Function requires x > 0.0 and degrees of freedom > 0");  }  return (1.0 - igamma((double)degreesOfFreedom / 2.0,x / 2.0));}  }
class C{  public void destroy(){  try {    close();  } catch (  IOException e) {  }  TempCharBuffer ptr=_head;  _head=null;  _tail=null;  TempCharBuffer.freeAll(ptr);}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public static void main(String args[]) throws Exception {  LaunchAppropriateUI launcher=new LaunchAppropriateUI(args);  launcher.launch();}  }
class C{  static void addFunctions(@NotNull CompletionParameters parameters,@NotNull CompletionResultSet result){  try {    ArrayList<HeaderConfigFunction> configFunctions=HeaderPsiUtil.getAllConfigFunctionsFromDescriptionExt(parameters.getOriginalFile());    String tailTextFormat=" " + Plugin.resources.getString("lang.sqf.completion.tail_text.function");    for (    HeaderConfigFunction configFunction : configFunctions) {      result.addElement(LookupElementBuilder.create(configFunction,configFunction.getCallableName()).withTailText(String.format(tailTextFormat,configFunction.getFullRelativePath()),true).withIcon(HeaderConfigFunction.getIcon()));    }  } catch (  Exception e) {    e.printStackTrace(System.out);  }}  }
class C{  public static AnimatablePaintValue createURINonePaintValue(AnimationTarget target,String uri){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.uri=uri;  v.paintType=PAINT_URI_NONE;  return v;}  }
class C{  public static Preamble fromMemory(Memory memory){  Builder builder=new Builder().setPreambleLongs(memory.getByte(0)).setVersion(memory.getByte(1)).setFamilyId(memory.getByte(2)).setLogConfigK(memory.getByte(3)).setFlags(memory.getByte(5));  short seedHash=memory.getShort(6);  return builder.setSeedHash(seedHash).build();}  }
class C{  public boolean isBackgroundFetchSupported(){  return impl.isBackgroundFetchSupported();}  }
class C{  public TransformW(double m00,double m10,double m01,double m11,double m02,double m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  public Map<String,Geometry> readShapeFile(String filename,String attrString){  Map<String,Geometry> shapeMap=new HashMap<String,Geometry>();  for (  SimpleFeature ft : ShapeFileReader.getAllFeatures(filename)) {    GeometryFactory geometryFactory=new GeometryFactory();    WKTReader wktReader=new WKTReader(geometryFactory);    Geometry geometry;    try {      geometry=wktReader.read((ft.getAttribute("the_geom")).toString());      shapeMap.put(ft.getAttribute(attrString).toString(),geometry);    } catch (    ParseException e) {      e.printStackTrace();    }  }  return shapeMap;}  }
class C{  public boolean isShipLineInvoiced(){  return (getInvoiceLineId() != 0);}  }
class C{  public long distanceSquared(Vector2i v){  int dx=this.x - v.x;  int dy=this.y - v.y;  return dx * dx + dy * dy;}  }
class C{  public Builder defaultBackgroundColor(BackgroundColor backgroundColor){  this.defaultBackgroundColor=backgroundColor;  return this;}  }
class C{  static int deriveARGB(Color color1,Color color2,float midPoint){  int r=color1.getRed() + (int)((color2.getRed() - color1.getRed()) * midPoint + 0.5f);  int g=color1.getGreen() + (int)((color2.getGreen() - color1.getGreen()) * midPoint + 0.5f);  int b=color1.getBlue() + (int)((color2.getBlue() - color1.getBlue()) * midPoint + 0.5f);  int a=color1.getAlpha() + (int)((color2.getAlpha() - color1.getAlpha()) * midPoint + 0.5f);  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| (b & 0xFF);}  }
class C{  public GridConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<>(s.comparator());  addAll(s);}  }
class C{  public static void saveBrokerPort(Context context,String port){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  editor.putString(KEY_BROKER_PORT,port);  editor.commit();}  }
class C{  public Program_ createProgram_(){  Program_Impl program_=new Program_Impl();  return program_;}  }
class C{  public static String format1Decimals(double value,String suffix){  String p=String.valueOf(value);  int ix=p.indexOf('.') + 1;  int ex=p.indexOf('E');  char fraction=p.charAt(ix);  if (fraction == '0') {    if (ex != -1) {      return p.substring(0,ix - 1) + p.substring(ex) + suffix;    } else {      return p.substring(0,ix - 1) + suffix;    }  } else {    if (ex != -1) {      return p.substring(0,ix) + fraction + p.substring(ex)+ suffix;    } else {      return p.substring(0,ix) + fraction + suffix;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void recycle(){  isRecycled=true;  for (  Bitmap bitmap : bitmaps) {    bitmap.recycle();  }  bitmaps.clear();}  }
class C{  public boolean store(){  if (exist()) {    if (updateCompletionDate) {      this.estimatedCompletionDate=recalculateEstimatedCompletionDate();    }    productionRun.set("estimatedStartDate",this.estimatedStartDate);    productionRun.set("estimatedCompletionDate",this.estimatedCompletionDate);    productionRun.set("workEffortName",this.productionRunName);    productionRun.set("description",this.description);    try {      productionRun.store();      if (quantityIsUpdated) {        productionRunProduct.set("estimatedQuantity",this.quantity.doubleValue());        productionRunProduct.store();        quantityIsUpdated=false;      }      if (productionRunRoutingTasks != null) {        for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {          GenericValue routingTask=iter.next();          routingTask.store();        }      }      if (productionRunComponents != null) {        for (Iterator<GenericValue> iter=productionRunComponents.iterator(); iter.hasNext(); ) {          GenericValue component=iter.next();          component.store();        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return false;    }    return true;  }  return false;}  }
class C{  private static long calcSize(long size,long skip,long limit){  return size >= 0 ? Math.max(-1,Math.min(size - skip,limit)) : -1;}  }
class C{  public void ensureCapacity(int mincap){  if (mincap > array.length) {    int newcap=((array.length * 3) >> 1) + 1;    int[] olddata=array;    array=new int[newcap < mincap ? mincap : newcap];    System.arraycopy(olddata,0,array,0,size);  }}  }
class C{  public T onfocus(String value){  return attr("onfocus",value);}  }
class C{  public static <T>JavaFXListBinder<T> bind(ObservableList<T> list){  requireNonNull(list,"list");  return new DefaultJavaFXListBinder(list);}  }
class C{  public int union(int first,int second){  int firstComponent=find(first), secondComponent=find(second);  if (firstComponent == secondComponent) {    return firstComponent;  }  final int w1=weight[firstComponent], w2=weight[secondComponent];  if (w1 > w2) {    parent[secondComponent]=firstComponent;    weight[firstComponent]+=w2;    return firstComponent;  } else {    parent[firstComponent]=secondComponent;    weight[secondComponent]+=w1;    return secondComponent;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.414 -0500",hash_original_method="33259345EBD99FFF49F4E1AAD2529013",hash_generated_method="296CADF2DCFE4D340DC221E4F2AE1D69") String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  declsOK=false;  if (isAttribute) {    table=attributeNameTable;  } else {    table=elementNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  name[2]=qName.intern();  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute) {      if (qName == "xmlns" && namespaceDeclUris)       name[0]=NSDECL; else       name[0]="";    } else     if (defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=name[2];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null || (!isAttribute && "xmlns".equals(prefix))) {      return null;    }    name[0]=uri;    name[1]=local.intern();  }  table.put(name[2],name);  return name;}  }
class C{  public ComplexNumberType clone(){  ComplexNumberType result=new ComplexNumberType();  result.Real=Real;  result.Imaginary=Imaginary;  return result;}  }
class C{  public static Container encloseIn(Component... cmps){  return Container.encloseIn(new LayeredLayout(),cmps);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void scheduleNext(Context context,Intent intent){  int type=intent.getIntExtra(Pacemaker.KEY_TYPE,Pacemaker.TYPE_LINEAR);  if (type == Pacemaker.TYPE_EXPONENTIAL) {    int delay=intent.getIntExtra(Pacemaker.KEY_DELAY,5);    delay=delay * 2;    int max=intent.getIntExtra(Pacemaker.KEY_MAX,60);    if (delay > max) {      Log.d("Heartbeater","Killing Heartbeater as delay now exceeds max");      return;    }    Pacemaker.scheduleExponential(context,delay,max);  } else {    Log.d("Heartbeater","Ignored linear schedule request since it should already be there");  }}  }
class C{  public void createNewConversation(String target){  pagerAdapter.addConversation(server.getConversation(target));}  }
class C{  public static double[][][] add(double[][][] input1,double[][][] input2) throws Exception {  int rows=input1.length;  int columns=input1[0].length;  int height=input1[0][0].length;  if (input2.length != rows) {    throw new Exception("Row length of arrays are not equal");  }  if (input2[0].length != columns) {    throw new Exception("Column length of arrays are not equal");  }  if (input2[0][0].length != height) {    throw new Exception("Heights (3rd dim) of arrays are not equal");  }  double[][][] returnValues=new double[rows][columns][height];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      for (int h=0; h < height; h++) {        returnValues[r][c][h]=input1[r][c][h] + input2[r][c][h];      }    }  }  return returnValues;}  }
class C{  @Override public void close() throws IOException {  buf=null;  InputStream localIn=in;  in=null;  if (localIn != null) {    localIn.close();  }}  }
class C{  public EqualsBuilder append(final double lhs,final double rhs){  if (isEquals == false) {    return this;  }  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));}  }
class C{  private void pauseCurrentTrack(){  if (!isRecording() || isPaused()) {    Log.d(TAG,"Ignore pauseCurrentTrack. Not recording or paused.");    return;  }  recordingTrackPaused=true;  PreferencesUtils.setBoolean(this,R.string.recording_track_paused_key,true);  Track track=myTracksProviderUtils.getTrack(recordingTrackId);  if (track != null) {    insertLocation(track,lastLocation,getLastValidTrackPointInCurrentSegment(track.getId()));    Location pause=new Location(LocationManager.GPS_PROVIDER);    pause.setLongitude(0);    pause.setLatitude(PAUSE_LATITUDE);    pause.setTime(System.currentTimeMillis());    insertLocation(track,pause,null);  }  endRecording(false,recordingTrackId);}  }
class C{  private static void handleSearchVolumes(BooksService service,VolumeFeed volumeFeed) throws IOException, ServiceException {  while (true) {    System.out.println("\nWhat would you like to do?");    System.out.println("\t1) Add a volume to my library");    System.out.println("\t2) Submit a rating for a volume");    System.out.println("\t0) Back to main menu");    System.out.println("\nEnter Number (0-2): ");    int choice=readInt();    String volumeId;switch (choice) {case 1:      volumeId=readVolumeId(volumeFeed);    if (!volumeId.equals("")) {      addToLibrary(service,volumeId);    }  break;case 2:volumeId=readVolumeId(volumeFeed);System.out.println("Please input a rating value (1-5)");int rating=readInt();if (rating >= 1 && rating <= 5 && !volumeId.equals("")) {addRating(service,volumeId,rating);}break;case 0:default :return;}}}  }
class C{  public SchedulerPolicy(){  super(Harness.options,"Scheduler Policy","MMTk Harness scheduler policy",SchedPolicy.valueNames(),System.getProperty("mmtk.harness.yieldpolicy","RANDOM"));}  }
class C{  @Override protected void fillHeader(Header head) throws FitsException {  if (this.dataArray == null) {    head.nullImage();    return;  }  Standard.context(ImageData.class);  String classname=this.dataArray.getClass().getName();  int[] dimens=ArrayFuncs.getDimensions(this.dataArray);  if (dimens == null || dimens.length == 0) {    throw new FitsException("Image data object not array");  }  int bitpix;switch (classname.charAt(dimens.length)) {case 'B':    bitpix=BasicHDU.BITPIX_BYTE;  break;case 'S':bitpix=BasicHDU.BITPIX_SHORT;break;case 'I':bitpix=BasicHDU.BITPIX_INT;break;case 'J':bitpix=BasicHDU.BITPIX_LONG;break;case 'F':bitpix=BasicHDU.BITPIX_FLOAT;break;case 'D':bitpix=BasicHDU.BITPIX_DOUBLE;break;default :throw new FitsException("Invalid Object Type for FITS data:" + classname.charAt(dimens.length));}head.setSimple(true);head.setBitpix(bitpix);head.setNaxes(dimens.length);for (int i=1; i <= dimens.length; i+=1) {if (dimens[i - 1] == -1) {throw new FitsException("Unfilled array for dimension: " + i);}head.setNaxis(i,dimens[dimens.length - i]);}head.addValue(EXTEND,true);head.addValue(PCOUNT,0);head.addValue(GCOUNT,1);Standard.context(null);}  }
class C{  public void readBoolean() throws IOException {  if (tag != ASN1Constants.TAG_BOOLEAN) {    throw expected("boolean");  }  if (length != 1) {    throw new ASN1Exception("Wrong length for ASN.1 boolean at [" + tagOffset + "]");  }  readContent();}  }
class C{  public boolean check(final Direction dir,final boolean facing){  if (this.dir != dir) {    return false;  }  if (this.facing != facing) {    return false;  }  final long now=System.currentTimeMillis();  if (now >= expiration) {    return false;  }  expiration=now + DELAY;  return true;}  }
class C{  public static Map<Id<Screenline>,Screenline> openShapefile(String shapefile){  HashMap<Id<Screenline>,Screenline> result=new HashMap<>();  ShapeFileReader reader=new ShapeFileReader();  reader.readFileAndInitialize(shapefile);  Collection<SimpleFeature> features=reader.getFeatureSet();  for (  SimpleFeature f : features) {    Id<Screenline> sid;    try {      sid=Id.create((Integer)f.getAttribute(Screenline.ID),Screenline.class);    } catch (    ClassCastException c) {      sid=Id.create((String)f.getAttribute(Screenline.ID),Screenline.class);    }    Screenline s=new Screenline(sid,(MultiLineString)f.getAttribute(0),(String)f.getAttribute(Screenline.POSDIRNAME),(String)f.getAttribute(Screenline.NEGDIRNAME));    s.description=(String)f.getAttribute(Screenline.DESCRNAME);    result.put(s.getID(),s);  }  return result;}  }
class C{  public static String replaceAll(String input,String regularExpression,String replacement){  return input.replaceAll(regularExpression,replacement);}  }
class C{  public static Fragment newInstance(Book book){  Bundle args=new Bundle();  args.putSerializable(EXTRA_BOOK,book);  Fragment fragment=new BookFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public double distanceFrom(Connection other){  int xDiff=mPosition.x - other.getPosition().x;  int yDiff=mPosition.y - other.getPosition().y;  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);}  }
class C{  public GetAddonDetails(String addonid,String... properties){  super();  addParameterToRequest("addonid",addonid);  addParameterToRequest("properties",properties);}  }
class C{  public static boolean[] copyOfRange(boolean[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  boolean[] copy=new boolean[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public void addConnectionListener(ConnectionListener l){  m_ConnectionListeners.add(l);}  }
class C{  public double logScore(int nType,int nCardinality){  double fScore=0.0;switch (nType) {case (Scoreable.BAYES):{      for (int iSymbol=0; iSymbol < m_nSymbols; iSymbol++) {        fScore+=Statistics.lnGamma(m_Counts[iSymbol]);      }      fScore-=Statistics.lnGamma(m_SumOfCounts);      if (m_fPrior != 0.0) {        fScore-=m_nSymbols * Statistics.lnGamma(m_fPrior);        fScore+=Statistics.lnGamma(m_nSymbols * m_fPrior);      }    }  break;case (Scoreable.BDeu):{  for (int iSymbol=0; iSymbol < m_nSymbols; iSymbol++) {    fScore+=Statistics.lnGamma(m_Counts[iSymbol]);  }  fScore-=Statistics.lnGamma(m_SumOfCounts);  fScore-=m_nSymbols * Statistics.lnGamma(1.0 / (m_nSymbols * nCardinality));  fScore+=Statistics.lnGamma(1.0 / nCardinality);}break;case (Scoreable.MDL):case (Scoreable.AIC):case (Scoreable.ENTROPY):{for (int iSymbol=0; iSymbol < m_nSymbols; iSymbol++) {double fP=getProbability(iSymbol);fScore+=m_Counts[iSymbol] * Math.log(fP);}}break;default :{}}return fScore;}  }
class C{  @Override public void endOfStream() throws AdeException {  double minProb=1;  if (m_totalIntervalCount == 0) {    m_totalIntervalCount=1;  }  for (  Entry<String,BernoulliScore.MsgData> entry : m_msgData.entrySet()) {    final FullBernoulliMsgData data=(FullBernoulliMsgData)entry.getValue();    data.m_prob=((double)data.m_count + 0.5) / (m_totalIntervalCount + 1.0);    if (data.m_prob < 0 || data.m_prob >= 1.0) {      logger.info(entry.getKey() + ":  bad m_prob: " + data.m_prob+ "="+ data.m_count+ "+0.5 / "+ m_totalIntervalCount+ "+1");    }    if (data.m_prob < minProb) {      minProb=data.m_prob;    }    data.m_outOfClusterProb=((double)data.m_outOfClusterCount + 0.5) / (m_totalIntervalCount + 1.0);    if (data.m_outOfClusterCount < minProb && data.m_outOfClusterCount > 0.0) {      minProb=data.m_outOfClusterCount;    }  }  for (  BernoulliScore.MsgData dataSuper : m_msgData.values()) {    final FullBernoulliMsgData data=(FullBernoulliMsgData)dataSuper;    final double probability=data.m_prob;    data.m_score=-Math.log(probability);    if (data.m_score > 1) {      data.m_score=1;    }    final double outOfContextProbability=data.m_outOfClusterProb;    data.m_outOfContextScore=-Math.log(outOfContextProbability);    if (data.m_outOfContextScore > 1) {      data.m_outOfContextScore=1;    }  }  m_trained=true;}  }
class C{  @SuppressWarnings("unchecked") public void writeTo(OutputStream out) throws MessagingException {  MimeMessageUtil.writeHeadersTo(getAllHeaderLines(),out);}  }
class C{  public Bitmap fetchBitmapData(ImageLoader imageLoader,ImageTask imageTask,ImageReSizer imageReSizer){  Bitmap bitmap=null;  if (mDiskCacheProvider == null) {    return null;  }  FileInputStream inputStream=null;  String fileCacheKey=imageTask.getFileCacheKey();  ImageReuseInfo reuseInfo=imageTask.getRequest().getImageReuseInfo();  if (DEBUG) {    Log.d(TAG,String.format(MSG_FETCH_BEGIN,imageTask));    Log.d(TAG,String.format(MSG_FETCH_BEGIN_IDENTITY_KEY,imageTask,imageTask.getIdentityKey()));    Log.d(TAG,String.format(MSG_FETCH_BEGIN_FILE_CACHE_KEY,imageTask,fileCacheKey));    Log.d(TAG,String.format(MSG_FETCH_BEGIN_ORIGIN_URL,imageTask,imageTask.getOriginUrl()));    Log.d(TAG,String.format(MSG_FETCH_BEGIN_IDENTITY_URL,imageTask,imageTask.getIdentityUrl()));  }  inputStream=mDiskCacheProvider.getInputStream(fileCacheKey);  if (inputStream == null) {    if (reuseInfo != null && reuseInfo.getReuseSizeList() != null && reuseInfo.getReuseSizeList().length > 0) {      if (DEBUG) {        Log.d(TAG,String.format(MSG_FETCH_TRY_REUSE,imageTask));      }      final String[] sizeKeyList=reuseInfo.getReuseSizeList();      for (int i=0; i < sizeKeyList.length; i++) {        String size=sizeKeyList[i];        final String key=imageTask.generateFileCacheKeyForReuse(size);        inputStream=mDiskCacheProvider.getInputStream(key);        if (inputStream != null) {          if (DEBUG) {            Log.d(TAG,String.format(MSG_FETCH_REUSE_SUCCESS,imageTask,size));          }          break;        } else {          if (DEBUG) {            Log.d(TAG,String.format(MSG_FETCH_REUSE_FAIL,imageTask,size,key));          }        }      }    }  } else {    if (DEBUG) {      Log.d(TAG,String.format(MSG_FETCH_HIT_DISK_CACHE,imageTask));    }  }  if (imageTask.getStatistics() != null) {    imageTask.getStatistics().s2_afterCheckFileCache(inputStream != null);  }  if (inputStream == null) {    String url=imageReSizer.getRemoteUrl(imageTask);    if (DEBUG) {      Log.d(TAG,String.format(MSG_FETCH_DOWNLOAD,imageTask,url));    }    inputStream=mDiskCacheProvider.downloadAndGetInputStream(imageLoader.getImageDownloader(),imageTask,fileCacheKey,url);    if (imageTask.getStatistics() != null) {      imageTask.getStatistics().s3_afterDownload();    }    if (inputStream == null) {      imageTask.setError(ImageTask.ERROR_NETWORK);      CLog.e(TAG,"%s download fail: %s %s",imageTask,fileCacheKey,url);    }  }  if (inputStream != null) {    try {      bitmap=decodeSampledBitmapFromDescriptor(inputStream.getFD(),imageTask,imageReSizer);      if (bitmap == null) {        imageTask.setError(ImageTask.ERROR_BAD_FORMAT);        CLog.e(TAG,"%s decode bitmap fail, bad format. %s, %s",imageTask,fileCacheKey,imageReSizer.getRemoteUrl(imageTask));      }    } catch (    IOException e) {      CLog.e(TAG,"%s decode bitmap fail, may be out of memory. %s, %s",imageTask,fileCacheKey,imageReSizer.getRemoteUrl(imageTask));      e.printStackTrace();    }  } else {    CLog.e(TAG,"%s fetch bitmap fail. %s, %s",imageTask,fileCacheKey,imageReSizer.getRemoteUrl(imageTask));  }  if (imageTask != null && imageTask.getStatistics() != null) {    imageTask.getStatistics().s4_afterDecode(mDiskCacheProvider.getSize(fileCacheKey));  }  return bitmap;}  }
class C{  public void log(String message,Level level,Object... arguments){  getBot().log(this,message,level,arguments);}  }
class C{  public ExtendedStringLiteral(StringLiteral str,CharLiteral character){  super(str.source,str.sourceStart,str.sourceEnd,str.lineNumber);  extendWith(character);}  }
class C{  public void subscriber(String path,@Pin ServiceRefAmp serviceRef,Result<? super Cancel> result){  if (path.isEmpty()) {    result.fail(new ServiceException(L.l("Invalid event location '{0}'",path)));    return;  }  String address=address(path);  EventNodeAsset node=lookupPubSubNode(address);  Cancel cancel=node.subscribeImpl(serviceRef);  result.ok(cancel);}  }
class C{  public void addDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  mBoundListeners.put(file.getFileId(),listener);}  }
class C{  protected static void fatal(String msg,Throwable t){  System.out.println(msg);  if (t != null)   t.printStackTrace();  fail();}  }
class C{  public EComp fill(){  return self;}  }
class C{  protected void doConnect() throws Throwable {  long start=System.currentTimeMillis();  ChannelFuture future=bootstrap.connect(getConnectAddress());  try {    boolean ret=future.awaitUninterruptibly(getConnectTimeout(),TimeUnit.MILLISECONDS);    if (ret && future.isSuccess()) {      Channel newChannel=future.getChannel();      newChannel.setInterestOps(Channel.OP_READ_WRITE);      try {        Channel oldChannel=NettyClient.this.channel;        if (oldChannel != null) {          try {            logger.info("Close old netty channel " + oldChannel + " on create new netty channel "+ newChannel);            oldChannel.close();          }  finally {            NettyChannel.removeChannelIfDisconnected(oldChannel);          }        }      }  finally {        if (NettyClient.this.isClosed()) {          try {            logger.info("Close new netty channel " + newChannel + ", because the client closed.");            newChannel.close();          }  finally {            NettyClient.this.channel=null;            NettyChannel.removeChannelIfDisconnected(newChannel);          }        } else {          NettyClient.this.channel=newChannel;        }      }    } else     if (future.getCause() != null) {      throw new RemotingException(this,"client(url: " + getUrl() + ") failed to connect to server "+ getRemoteAddress()+ ", error message is:"+ future.getCause().getMessage(),future.getCause());    } else {      throw new RemotingException(this,"client(url: " + getUrl() + ") failed to connect to server "+ getRemoteAddress()+ " client-side timeout "+ getConnectTimeout()+ "ms (elapsed: "+ (System.currentTimeMillis() - start)+ "ms) from netty client "+ NetUtils.getLocalHost()+ " using dubbo version "+ Version.getVersion());    }  }  finally {    if (!isConnected()) {      future.cancel();    }  }}  }
class C{  @Snippet public static Object instanceofSecondary(KlassPointer hub,Object object,@VarargsParameter KlassPointer[] hints,@VarargsParameter boolean[] hintIsPositive,Object trueValue,Object falseValue){  if (probability(NOT_FREQUENT_PROBABILITY,object == null)) {    isNull.inc();    return falseValue;  }  GuardingNode anchorNode=SnippetAnchorNode.anchor();  KlassPointer objectHub=loadHubIntrinsic(PiNode.piCastNonNull(object,anchorNode));  ExplodeLoopNode.explodeLoop();  for (int i=0; i < hints.length; i++) {    KlassPointer hintHub=hints[i];    boolean positive=hintIsPositive[i];    if (probability(NOT_FREQUENT_PROBABILITY,hintHub.equal(objectHub))) {      hintsHit.inc();      return positive ? trueValue : falseValue;    }  }  hintsMiss.inc();  if (!checkSecondarySubType(hub,objectHub)) {    return falseValue;  }  return trueValue;}  }
class C{  public void configureCommandStation(){  et.sendSRCPMessage(new SRCPMessage("SET PROTOCOL SRCP 0.8.3\n"),null);  et.sendSRCPMessage(new SRCPMessage("SET CONNECTIONMODE SRCP COMMAND\n"),null);  et.sendSRCPMessage(new SRCPMessage("GO\n"),null);  for (int i=1; i < 11; i++) {    et.sendSRCPMessage(new SRCPMessage("GET " + i + " DESCRIPTION\n"),null);  }}  }
class C{  private void refreshPendingChanges(final IResource[] resources,final IProgressMonitor monitor){  Check.notNull(resources,"resources");  Check.notNull(monitor,"monitor");  final Map<TFSRepository,Boolean> repositoryMap=new HashMap<TFSRepository,Boolean>();  monitor.beginTask(Messages.getString("SynchronizeSubscriber.RefreshingPendingChanges"),1);  final ProjectRepositoryManager projectManager=TFSEclipseClientPlugin.getDefault().getProjectManager();  for (int i=0; i < resources.length; i++) {    final TFSRepository repository=projectManager.getRepository(resources[i].getProject());    if (repository != null && !repositoryMap.containsKey(repository)) {      repository.getPendingChangeCache().refresh();      repositoryMap.put(repository,Boolean.TRUE);    }  }  monitor.worked(1);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  Attr districtAttr;  String attrValue;  doc=(Document)load("staffNS",true);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  districtAttr=testAddr.setAttributeNodeNS(newAttribute);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public static void printRScript(String dmlScriptFile){  try {    System.out.println("Running script: " + dmlScriptFile + "\n");    System.out.println("******************* R script *******************");    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(dmlScriptFile)));    String content;    while ((content=in.readLine()) != null) {      System.out.println(content);    }    in.close();    System.out.println("**************************************************\n\n");  } catch (  IOException e) {    e.printStackTrace();    fail("unable to print R script: " + e.getMessage());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:15.541 -0500",hash_original_method="1F9308CDA843BEB3E12C5EE04150EA0F",hash_generated_method="5A48EECAEA405813D0EF7C215F9BE110") @Override public String toString(){  return address + "/" + prefixLength+ " ["+ broadcastAddress+ "]";}  }
class C{  protected void actualizarProductores(){  if (CollectionUtils.isEmpty(listaProductores))   listaProductores=service.lookupGestionCuadroClasificacionBI().getProductoresClasificadorSeries(id);  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_REFERENCIA,id,ID_CAMPO_PRODUCTOR);  if (!CollectionUtils.isEmpty(listaProductores)) {    ProductorSerieVO productor;    String idProductorAnterior=null;    for (int i=0; i < listaProductores.size(); i++) {      productor=(ProductorSerieVO)listaProductores.get(i);      if (!productor.getId().equals(idProductorAnterior)) {        descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoReferenciaVO(id,ID_CAMPO_PRODUCTOR,(i + 1),CampoReferenciaVO.REFERENCIA_A_ELEMENTO_DESCRIPTOR,productor.getId(),ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO));        idProductorAnterior=productor.getId();      }    }  }}  }
class C{  protected <T>void runTasksInSingleThread(final List<AbstractTask<T>> tasks) throws InterruptedException {  final ExecutorService executorService=Executors.newSingleThreadExecutor(DaemonThreadFactory.defaultThreadFactory());  try {    final long begin=System.nanoTime();    final long nanos=TimeUnit.MILLISECONDS.toNanos(resourceManager.overflowTimeout);    long remaining=nanos;    final Iterator<AbstractTask<T>> titr=tasks.iterator();    int ndone=0;    while (titr.hasNext() && remaining > 0) {      final boolean shouldOverflow=resourceManager.isOverflowEnabled() && resourceManager.shouldOverflow();      if (shouldOverflow) {        if (resourceManager.overflowCancelledWhenJournalFull) {          break;        } else {          final long elapsed=(System.nanoTime() - begin);          log.warn("Overflow still running: elapsed=" + TimeUnit.NANOSECONDS.toMillis(elapsed));        }      }      final AbstractTask<T> task=titr.next();      final Future<? extends Object> f=resourceManager.getConcurrencyManager().submit(task);      getFutureForTask(f,task,remaining,TimeUnit.NANOSECONDS);      remaining=nanos - (System.nanoTime() - begin);      ndone++;    }    log.warn("Completed " + ndone + " out of "+ tasks.size()+ " tasks");  }  finally {    executorService.shutdownNow();  }}  }
class C{  @Inline public static boolean objectInVM(ObjectReference object){  return Space.isMappedObject(object);}  }
class C{  public void enableCookie(){  isEnableCookie=true;  if (mCookieManager == null) {    mCookieManager=new CookieManager(new PersistentCookieStore(mContext),CookiePolicy.ACCEPT_ALL);    CookieHandler.setDefault(mCookieManager);  }}  }
class C{  public void addStrokeWidth(float w){  PDFChangeStrokeCmd sc=new PDFChangeStrokeCmd();  sc.setWidth(w);  addCommand(sc);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.TYPE_REF__REF:    return ref != null;case GamlPackage.TYPE_REF__PARAMETER:  return parameter != null;}return super.eIsSet(featureID);}  }
class C{  public EnumSet<ClusterHealthStatus> shardStatuses(){  return statuses;}  }
class C{  public void test_multiTenancy_2023() throws Exception {  final String ns1="namespace1";  final String ns2="namespace2";  final String ns3="namespace3";  createNamespace(ns1);  createNamespace(ns2);  createNamespace(ns3);  loadStatements(ns1,10000);  loadStatements(ns2,10000);  loadStatements(ns3,10000);  simpleQuery(ns1);  simpleQuery(ns2);  simpleQuery(ns3);  try {    forceAbort(ns1);  } catch (  Throwable t) {    t.printStackTrace();  }  loadStatements(ns2,1000);  try {    forceAbort(ns2);  } catch (  Throwable t) {    t.printStackTrace();  }  dropGraph(ns2);  dropGraph(ns1);  simpleQuery(ns1);  simpleQuery(ns2);  simpleQuery(ns3);  loadStatements(ns2,1000);}  }
class C{  public void addNFSShare(String fsName,String qtreeName,String exportPath,ExportRule newRule){  FlexFileShare share=new FlexFileShare(server.getNaServer(),exportPath);  share.changeNFSShare(fsName,qtreeName,null,newRule,exportPath);}  }
class C{  public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.EMBEDDED) {    try {      java.io.BufferedReader reader=new java.io.BufferedReader(new java.io.FileReader("/etc/resolv.conf"));      String line=reader.readLine();      while (line != null) {        if (line.startsWith("nameserver"))         return line.substring("nameserver".length() + 1).trim();        line=reader.readLine();      }    } catch (    Throwable e) {      System.out.println("ERROR:" + e);    }  }  return "0.0.0.0";}  }
class C{  public ExceptionTable(ConstPool cp){  constPool=cp;  entries=new ArrayList();}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  protected Report reportSumByName(List<TaskStats> taskStats){  int reported=0;  LinkedHashMap<String,TaskStats> p2=new LinkedHashMap<>();  for (  final TaskStats stat1 : taskStats) {    if (stat1.getElapsed() >= 0) {      reported++;      String name=stat1.getTask().getName();      TaskStats stat2=p2.get(name);      if (stat2 == null) {        try {          stat2=stat1.clone();        } catch (        CloneNotSupportedException e) {          throw new RuntimeException(e);        }        p2.put(name,stat2);      } else {        stat2.add(stat1);      }    }  }  return genPartialReport(reported,p2,taskStats.size());}  }
class C{  public Pos3D translate(Pos3D pos){  return translate(pos.xPos,pos.yPos,pos.zPos);}  }
class C{  @Override protected void finalize() throws Throwable {  if (savedState != null) {    Context cx=Context.getCurrentContext();    ContextFactory factory=cx != null ? cx.getFactory() : ContextFactory.getGlobal();    factory.call(new CloseGeneratorAction(this));  }}  }
class C{  @LargeTest public void testPreviewOfEffects() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final Semaphore blockTillPreviewCompletes=new Semaphore(1);  previewStart=false;  previewStop=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  final EffectColor effectNegative=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effectNegative",0,2000,EffectColor.TYPE_NEGATIVE,0);  mediaVideoItem1.addEffect(effectNegative);  final EffectColor effectGreen=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effectGreen",2000,3000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  mediaVideoItem1.addEffect(effectGreen);  final EffectColor effectFifties=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effectFifties",5000,4000,EffectColor.TYPE_FIFTIES,0);  mediaVideoItem1.addEffect(effectFifties);  List<Effect> effectList=mediaVideoItem1.getAllEffects();  assertEquals("Effect List Size",3,effectList.size());  assertEquals("Effect negative",effectNegative,effectList.get(0));  assertEquals("Effect Green",effectGreen,effectList.get(1));  assertEquals("Effect Fifties",effectFifties,effectList.get(2));  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_4_3);  assertEquals("Aspect Ratio",MediaProperties.ASPECT_RATIO_4_3,mVideoEditor.getAspectRatio());  final long storyboardDuration=mVideoEditor.getDuration();  validatePreviewProgress(0,(int)(storyboardDuration / 2),false,(storyboardDuration / 2));  assertEquals("Removing Effect : Negative",effectNegative,mediaVideoItem1.removeEffect(effectNegative.getId()));  effectList=mediaVideoItem1.getAllEffects();  assertEquals("Effect List Size",2,effectList.size());  assertEquals("Effect Green",effectGreen,effectList.get(0));  assertEquals("Effect Fifties",effectFifties,effectList.get(1));  validatePreviewProgress(0,-1,false,mVideoEditor.getDuration());}  }
class C{  public Expr parseString(String input) throws SyntaxException {  tokens=new Scanner(input,operatorChars);  return reparse();}  }
class C{  public boolean isOutProcessed(){  return (collector().isOutProcessed(getRuleName()));}  }
class C{  public int countTokens(String nontokenDelims,String tokenDelims,boolean returnEmptyTokens){  setDelims(nontokenDelims,tokenDelims);  setReturnEmptyTokens(returnEmptyTokens);  return countTokens();}  }
class C{  public void incArticleViewCount(final String articleId) throws ServiceException {  final Transaction transaction=articleRepository.beginTransaction();  try {    final JSONObject article=articleRepository.get(articleId);    if (null == article) {      return;    }    final int viewCnt=article.optInt(Article.ARTICLE_VIEW_CNT);    article.put(Article.ARTICLE_VIEW_CNT,viewCnt + 1);    articleRepository.update(articleId,article);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Incs an article view count failed",e);    throw new ServiceException(e);  }}  }
class C{  public ReflectiveOperationException(String message){  super(message);}  }
class C{  protected void onAction(){}  }
class C{  public static Builder createDirectTask(){  return new Builder(true);}  }
class C{  public NodeKeyboard(Node node){  target=node;  node.setOnKeyPressed(null);  node.setOnKeyReleased(null);}  }
class C{  public static @SlashedClassName String extractClassName(String originalName){  String name=originalName;  if (name.charAt(0) != '[' && name.charAt(name.length() - 1) != ';') {    return name;  }  while (name.charAt(0) == '[') {    name=name.substring(1);  }  if (name.charAt(0) == 'L' && name.charAt(name.length() - 1) == ';') {    name=name.substring(1,name.length() - 1);  }  if (name.charAt(0) == '[') {    throw new IllegalArgumentException("Bad class name: " + originalName);  }  return name;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override public MemChunkHolder<VolatileMemAllocator> retrieveChunk(long phandler,boolean autoreclaim){  MemChunkHolder<VolatileMemAllocator> ret=null;  long eaddr=getEffectiveAddress(phandler);  long sz=m_vmasvc.retrieveSize(m_nid,eaddr);  if (sz > 0L) {    ret=new MemChunkHolder<VolatileMemAllocator>(this,eaddr,sz);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  protected int resamplePaths(final QueryEngine queryEngine,final int limitIn,final int round,final Path[] a,final Map<PathIds,EdgeSample> edgeSamples) throws Exception {  if (queryEngine == null)   throw new IllegalArgumentException();  if (limitIn <= 0)   throw new IllegalArgumentException();  if (round <= 0)   throw new IllegalArgumentException();  if (a == null)   throw new IllegalArgumentException();  if (a.length == 0)   throw new IllegalArgumentException();{    if (log.isDebugEnabled())     log.debug("Re-sampling in-use vertices.");    final Map<Vertex,AtomicInteger> vertexLimit=new LinkedHashMap<Vertex,AtomicInteger>();    for (    Path x : a) {      final int limit=x.getNewLimit(limitIn);      final Vertex v=x.vertices[0];      AtomicInteger theLimit=vertexLimit.get(v);      if (theLimit == null) {        vertexLimit.put(v,theLimit=new AtomicInteger());      }      theLimit.set(limit);    }    sampleVertices(queryEngine,vertexLimit);  }  if (log.isDebugEnabled())   log.debug("Re-sampling in-use path segments.");  int nunderflow=0;  final List<Callable<Boolean>> tasks=new LinkedList<Callable<Boolean>>();  for (  Path x : a) {    tasks.add(new ResamplePathTask(queryEngine,x,limitIn,edgeSamples));  }  for (  Callable<Boolean> task : tasks) {    if (task.call()) {      nunderflow++;    }  }  return nunderflow;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("cryptokiVersion: ");  buffer.append(cryptokiVersion.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("manufacturerID: ");  buffer.append(new String(manufacturerID));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("flags: ");  buffer.append(Functions.toBinaryString(flags));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("libraryDescription: ");  buffer.append(new String(libraryDescription));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("libraryVersion: ");  buffer.append(libraryVersion.toString());  return buffer.toString();}  }
class C{  private boolean editLine(){  if (line != null) {    if (!valueField.getInputVerifier().verify(valueField)) {      valueField.requestFocusInWindow();      return false;    }    if (!widthField.getInputVerifier().verify(widthField)) {      widthField.requestFocusInWindow();      return false;    }    line.setValue(Double.parseDouble(valueField.getText()));    line.getFormat().setWidth(Float.parseFloat(widthField.getText()));    if (lineColor != null) {      line.getFormat().setColor(lineColor);    }    LineStyle selectedLineStyle=(LineStyle)lineStyleCombobox.getSelectedItem();    if (selectedLineStyle != null) {      line.getFormat().setStyle(selectedLineStyle);    }  } else {    return false;  }  return true;}  }
class C{  public static byte[] addImageBorder(Properties ctx,int m_product_id,byte[] imageData,double borderWidth,String trxName) throws OperationException {  String sql="select " + " ATTR_MODEL," + " ATTR_COLOUR,"+ " ATTR_DESIGN,"+ " ATTR_SIZE"+ " from U_TShirt_V where M_Product_ID ="+ m_product_id;  PreparedStatement pstmt=null;  ResultSet rs=null;  String design=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=pstmt.executeQuery();    if (rs.next()) {      design=rs.getString(3);    } else {      throw new OperationException("Unable to get product's attributes!");    }    Color borderColor=Color.DARK_GRAY;    char copyrightSign=169;    String copyright_notice=copyrightSign + " " + Calendar.getInstance().get(Calendar.YEAR)+ " Tamak";    Image image=new ImageIcon(imageData).getImage();    int width=image.getWidth(null);    int height=image.getHeight(null);    double frameWidth=(double)width + 2 * borderWidth;    double frameHeight=(double)height + borderWidth;    Rectangle2D nameRect=new Rectangle2D.Double(0.0,frameHeight,frameWidth,80);    BufferedImage bufferedImage=new BufferedImage((int)frameWidth,(int)(frameHeight + nameRect.getHeight()),BufferedImage.TYPE_USHORT_565_RGB);    Graphics2D g=(Graphics2D)bufferedImage.getGraphics();    g.drawImage(image,(int)borderWidth,(int)borderWidth,null);    Rectangle2D topBorder=new Rectangle2D.Double(0.0,0.0,frameWidth,borderWidth);    Rectangle2D leftBorder=new Rectangle2D.Double(0.0,0.0,borderWidth,frameWidth);    Rectangle2D rightBorder=new Rectangle2D.Double(frameWidth - borderWidth,0.0,borderWidth,frameWidth);    g.setColor(borderColor);    g.fill(topBorder);    g.fill(leftBorder);    g.fill(rightBorder);    g.fill(nameRect);    g.setColor(Color.LIGHT_GRAY);    double rXcoor=nameRect.getMinX();    double rYcoor=nameRect.getMinY();    double h=nameRect.getHeight() - 2 * borderWidth;    double w=h * 1.5;    Rectangle2D rLeft=new Rectangle2D.Double(rXcoor + borderWidth,rYcoor + borderWidth,w,h);    g.fill(rLeft);    Rectangle2D rRight=new Rectangle2D.Double(nameRect.getMaxX() - w - borderWidth,rYcoor + borderWidth,w,h);    g.fill(rRight);    w=(rRight.getMinX() - borderWidth) - (rLeft.getMaxX() + borderWidth);    Rectangle2D rCenter=new Rectangle2D.Double(rLeft.getMaxX() + borderWidth,rYcoor + borderWidth,w,h);    g.fill(rCenter);    Font font=new Font("Arial",Font.PLAIN,22);    g.setFont(font);    g.setColor(Color.WHITE);    FontRenderContext fc=g.getFontRenderContext();    Rectangle2D bounds=font.getStringBounds(design,fc);    g.setFont(font);    g.drawString(design,(float)(rCenter.getMinX() + borderWidth),(float)(rCenter.getMinY() + borderWidth + bounds.getHeight()));    g.setColor(Color.BLACK);    g.setFont(new Font("Arial",Font.PLAIN,10));    g.drawString(copyright_notice,(float)(2 * borderWidth),(float)(frameHeight - borderWidth));    Iterator iter=ImageIO.getImageWritersByFormatName("JPG");    if (iter.hasNext()) {      ImageWriter writer=(ImageWriter)iter.next();      ImageWriteParam iwp=writer.getDefaultWriteParam();      iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);      iwp.setCompressionQuality(0.75f);      ByteArrayOutputStream bos=new ByteArrayOutputStream();      MemoryCacheImageOutputStream mos=new MemoryCacheImageOutputStream(bos);      writer.setOutput(mos);      IIOImage iIOimage=new IIOImage(bufferedImage,null,null);      writer.write(null,iIOimage,iwp);      byte retData[]=bos.toByteArray();      mos.close();      bos.close();      return retData;    }    rs.close();  } catch (  Exception e) {    throw new OperationException(e);  } finally {    try {      pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  return null;}  }
class C{  private static IgniteCheckedException createParseError(String addrStr,String errMsgPrefix,String errMsg){  return new IgniteCheckedException(errMsgPrefix + " (" + errMsg+ "): "+ addrStr);}  }
class C{  public void onClickExtraThemeResolved(final View view){  final boolean fullScreenTheme=mFullScreenRb.isChecked();  Intent i=new Intent(this,ChattingResolvedHandleByPlaceholderActivity.class);  i.putExtra(KEY_FULL_SCREEN_THEME,fullScreenTheme);  startActivity(i);}  }
class C{  public final void addVariable(Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable: " + variable);  }  variables.add(variable);  resize(data.length,variables.size());  int col=data[0].length - 1;  for (int i=0; i < data.length; i++) {    data[i][col]=null;  }}  }
class C{  public FgsMbRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  private void doNavigation(final TeamExplorerNavigationItemConfig item){  ClientTelemetryHelper.sendPageView(item);  Runnable queueRunnable=null;synchronized (pendingResetNavigationLock) {    if (pendingResetNavigationRunnable == null) {      pendingResetNavigationRunnable=new NavigationRunnable();      queueRunnable=pendingResetNavigationRunnable;    }    nextNavigation=item;  }  if (queueRunnable != null) {    UIHelpers.runOnUIThread(true,queueRunnable);  }}  }
class C{  public static boolean isExternalMemoryFull(){  return getAvailableExternalMemorySize() - AVALIABLE_EXTERNAL_MEMORY_SIZE < 0;}  }
class C{  public boolean isNoBackslashEscapesSet(){  return this.noBackslashEscapes;}  }
class C{  public Shape magnify(Shape shape){  return magnify(shape,0);}  }
class C{  public void loading(){  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.VISIBLE);  if (footerTextViewEnabled) {    mHintView.setVisibility(View.VISIBLE);    mHintView.setText(R.string.rebound_listview_header_hint_loading);  }}  }
class C{  public static void main(String[] args){  if (!Configuration.AUTOMATICALLY_ENABLE_MODULES || !Configuration.LOAD_EXTERNAL_MODULES)   throw new RuntimeException("Invalid configuration!");  if (args.length < 1)   throw new IllegalArgumentException("At least 1 argument required!");  try {    ClientBuilder builder=new ClientBuilder();    IDiscordClient client=(args.length == 1 ? builder.withToken(args[0]) : builder.withLogin(args[0],args[1])).login();    client.getDispatcher().registerListener((IListener<ReadyEvent>)null);  } catch (  DiscordException e) {    LOGGER.error(LogMarkers.MAIN,"There was an error initializing the client",e);  }}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(host.length() + 8);  if (host.indexOf(':') >= 0) {    builder.append('[').append(host).append(']');  } else {    builder.append(host);  }  if (hasPort()) {    builder.append(':').append(port);  }  return builder.toString();}  }
class C{  public FastByteArrayOutputStream(int initialSize,int bumpSize){  buf=new byte[initialSize];  bumpLen=bumpSize;}  }
class C{  public void onCancelMarketData(Contract contract){}  }
class C{  @Override public void executeScriptFiles(List<String> scriptFilePaths){  for (  String scriptFilePath : scriptFilePaths) {    File scriptFile=new File(scriptFilePath);    if (scriptFile.exists()) {      try {        JvmLauncherRequest request=new JvmLauncherRequest(false,this);        JvmLauncher java=jvmLauncherFactory.createJvmLauncher(request);        addWlstArguments(java);        java.addAppArgument(scriptFile);        int result=java.execute();        if (result != 0) {          throw new ContainerException("Failure when invoking WLST script," + " java returned " + result);        }      } catch (      Exception e) {        throw new CargoException("Cannot execute WLST script.",e);      }    } else {      getLogger().warn(String.format("Script file %s doesn't exists.",scriptFilePath),this.getClass().getName());    }  }}  }
class C{  public static void addTargetTableContainerProperties(final Container container){  final LazyQueryContainer targetTableContainer=(LazyQueryContainer)container;  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_CONT_ID,String.class,"",false,false);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_NAME,String.class,"",false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_TARGET_STATUS,TargetUpdateStatus.class,TargetUpdateStatus.UNKNOWN,false,false);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.ASSIGNED_DISTRIBUTION_ID,Long.class,null,false,false);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.INSTALLED_DISTRIBUTION_ID,Long.class,null,false,false);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.ASSIGNED_DISTRIBUTION_NAME_VER,String.class,"",false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.INSTALLED_DISTRIBUTION_NAME_VER,String.class,"",false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.LAST_QUERY_DATE,Date.class,null,false,false);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_CREATED_BY,String.class,null,false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_BY,String.class,null,false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_CREATED_DATE,String.class,null,false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_DATE,String.class,null,false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_POLL_STATUS_TOOL_TIP,String.class,null,false,true);  targetTableContainer.addContainerProperty(SPUILabelDefinitions.VAR_DESC,String.class,"",false,true);  targetTableContainer.addContainerProperty(ASSIGN_DIST_SET,DistributionSet.class,null,false,true);  targetTableContainer.addContainerProperty(INSTALL_DIST_SET,DistributionSet.class,null,false,true);}  }
class C{  public WebLogic8xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_USER,Boolean.FALSE);  this.propertySupportMap.put(WebLogicPropertySet.ADMIN_PWD,Boolean.FALSE);  this.propertySupportMap.put(WebLogicPropertySet.SERVER,Boolean.TRUE);  this.propertySupportMap.put(WebLogicPropertySet.BEA_HOME,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.CONNECTION_TYPE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOKE_CACHE'";  db.execSQL(sql);}  }
class C{  public Iterable<Object> loadAll(String yaml){  return loadAll(new StringReader(yaml));}  }
class C{  public ArrayBasedLongToInternalIntBiMap(int expectedNumKeys,double loadFactor,int defaultGetReturnValue,long defaultGetKeyReturnValue,StatsReceiver statsReceiver){  this.expectedNumKeys=expectedNumKeys;  this.loadFactor=loadFactor;  this.defaultGetReturnValue=defaultGetReturnValue;  this.defaultGetKeyReturnValue=defaultGetKeyReturnValue;  this.scopedStatsReceiver=statsReceiver.scope(this.getClass().getSimpleName());  numStoredKeysCounter=scopedStatsReceiver.counter("numStoredKeys");  numFixedLengthMapsCounter=scopedStatsReceiver.counter("numFixedLengthMaps");  totalAllocatedArrayBytesCounter=scopedStatsReceiver.counter("allocatedArrayBytes");  initialize();}  }
class C{  @GenerateLink(rel="log event") @POST @Path("/event") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response logEvent(@Context HttpServletRequest requestContext,Event event){  try {    String userIp=requestContext.getRemoteAddr();    event.putParameter(Event.USER_IP_PARAM,userIp);    if (userManager.isAnonymous()) {      event.putParameter(Event.USER_PARAM,"");    } else {      String userId=userManager.getCurrentUser().getUserId();      event.putParameter(Event.USER_PARAM,userId == null ? "" : userId);    }    eventLogger.log(event);    return Response.status(Response.Status.OK).build();  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Unexpected error. " + e.getMessage()).build();  }}  }
class C{  public void add(Collection dirEdges,Collection nodes){  PlanarGraph.linkResultDirectedEdges(nodes);  List maxEdgeRings=buildMaximalEdgeRings(dirEdges);  List freeHoleList=new ArrayList();  List edgeRings=buildMinimalEdgeRings(maxEdgeRings,shellList,freeHoleList);  sortShellsAndHoles(edgeRings,shellList,freeHoleList);  placeFreeHoles(shellList,freeHoleList);}  }
class C{  public void addAndResort(List<? extends PlaidItem> newItems){  weighItems(newItems);  deduplicateAndAdd(newItems);  sort();  expandPopularItems();  notifyDataSetChanged();}  }
class C{  public static OutputLimitClause create(OutputLimitSelector selector,TimePeriodExpression timePeriodExpression){  return new OutputLimitClause(selector,timePeriodExpression);}  }
class C{  public byte[] hash(){  return md5.Final();}  }
class C{  public static String makePipelineSpecificName(String pipelineName,Class<?> clazz){  return clazz.getCanonicalName() + "[" + pipelineName+ "]";}  }
class C{  public static <T>String toString(TreeDef<T> treeDef,T root,Function<? super T,String> toString,String indent){  StringBuilder builder=new StringBuilder();  builder.append(toString.apply(root));  builder.append("\n");  toStringHelper(treeDef,root,toString,indent,builder,indent);  return builder.toString();}  }
class C{  static void debug(Object obj,int offset){  debug(obj,offset,true);}  }
class C{  public ManeuverChoiceDialog(JFrame parent,String title,String question){  super(parent,title,true);  String[] choices=new String[ManeuverType.MAN_SIZE];  for (int type=0; type < ManeuverType.MAN_SIZE; type++) {    choices[type]=ManeuverType.getTypeName(type);  }  initialize(parent,question,choices);}  }
class C{  public JavaFormatter(String lineDelimiter){  fLineDelimiter=lineDelimiter;}  }
class C{  public void deleteDatabase(){  close();  mDatabaseFile.delete();}  }
class C{  private String resolveEndpoint(IBindingSet bs){  String endpointStr=resolveAsString(endpoint,bs);  if (endpointStr == null || endpointStr.isEmpty()) {    endpointStr=defaults.getDefaultEndpoint();  }  if (endpointStr != null && !endpointStr.isEmpty()) {    return endpointStr;  } else {    throw new FulltextSearchException(FulltextSearchException.NO_ENDPOINT_SPECIFIED);  }}  }
class C{  public static String dump(final ByteBuffer bytes){  bytes.rewind();  final int columns=16;  final StringBuilder builder=new StringBuilder();  int i=0;  while (bytes.hasRemaining()) {    if ((i % columns) != 0) {      builder.append(' ');    } else     if (i >= columns) {      builder.append(String.format("%n"));    }    builder.append(String.format("%02x",bytes.get()));    i++;  }  return builder.toString();}  }
class C{  public void paint(Graphics2D g2D,int pageNo,Point2D pageStart,Properties ctx,boolean isView){  if (!m_valid || m_barcode == null)   return;  Point2D.Double location=getAbsoluteLocation(pageStart);  int x=(int)location.x;  if (MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight.equals(p_FieldAlignmentType))   x+=p_maxWidth - p_width; else   if (MPrintFormatItem.FIELDALIGNMENTTYPE_Center.equals(p_FieldAlignmentType))   x+=(p_maxWidth - p_width) / 2;  int y=(int)location.y;  try {    int w=m_barcode.getWidth();    int h=m_barcode.getHeight();    BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);    Graphics2D temp=(Graphics2D)image.getGraphics();    m_barcode.draw(temp,0,0);    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(m_scaleFactor,m_scaleFactor);    g2D.drawImage(image,transform,this);  } catch (  OutputException e) {  }}  }
class C{  public static void applyToOrTransparent(ColorHolder colorHolder,Context ctx,GradientDrawable gradientDrawable){  if (colorHolder != null && gradientDrawable != null) {    colorHolder.applyTo(ctx,gradientDrawable);  } else   if (gradientDrawable != null) {    gradientDrawable.setColor(Color.TRANSPARENT);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatedocumentfragment.class,args);}  }
class C{  public static CarrierVehicle newInstance(Id<Vehicle> vehicleId,Id<Link> locationId){  return new CarrierVehicle(vehicleId,locationId);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void keyTyped(char par1,int par2){}  }
class C{  private Optional(){  this.value=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void processMove(Instruction s){  for (Enumeration<Operand> e=s.getDefs(); e.hasMoreElements(); ) {    Operand current=e.nextElement();    if (current instanceof RegisterOperand && ((RegisterOperand)current).getRegister().isPhysical())     return;  }  Register result=Move.getResult(s).getRegister();  ValueGraphVertex v=findOrCreateVertex(result);  Operand val=Move.getVal(s);  val=bypassMoves(val);  v.copyVertex(findOrCreateVertex(val));}  }
class C{  protected void readOptionalMeasure(ByteBuffer buffer){  if (buffer.hasRemaining() && (buffer.limit() - buffer.position()) >= 8) {    double[] mArray=ShapefileUtils.readDoubleArray(buffer,1);    this.m=mArray[0];  }}  }
class C{  public List<WebElement> findElements(String locator){  return findElements(byFromLocator(locator));}  }
class C{  public DomInfo[] run(){  int szNodes=nodes.size();  if (DEBUG) {    for (int i=0; i < szNodes; i++) {      SsaBasicBlock node=nodes.get(i);      System.out.println("pred[" + i + "]: "+ node.getPredecessors());    }  }  Dominators methDom=Dominators.make(meth,domInfos,false);  if (DEBUG) {    for (int i=0; i < szNodes; i++) {      DomInfo info=domInfos[i];      System.out.println("idom[" + i + "]: "+ info.idom);    }  }  buildDomTree();  if (DEBUG) {    debugPrintDomChildren();  }  for (int i=0; i < szNodes; i++) {    domInfos[i].dominanceFrontiers=SetFactory.makeDomFrontSet(szNodes);  }  calcDomFronts();  if (DEBUG) {    for (int i=0; i < szNodes; i++) {      System.out.println("df[" + i + "]: "+ domInfos[i].dominanceFrontiers);    }  }  return domInfos;}  }
class C{  void postRemoveChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.postRemoveChildEvent(node,child,property);  }  finally {    reenableEvents();  }}  }
class C{  public static double[][] LEAD2(Instances D,Result result){  int L=D.classIndex();  int N=D.numInstances();  double Y[][]=MLUtils.getYfromD(D);  double Y_[][]=MatrixUtils.threshold(result.allPredictions(),0.5);  double E[][]=MatrixUtils.subtract(Y,Y_);  double X[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      for (      int v : new int[]{0,1,-1}) {        double p_j=p(E,j,v);        double p_k=p(E,k,v);        double p_jk=P(E,j,v,k,v);        double Exp=p_j * p_k;        X[j][k]+=(((p_jk - Exp) * (p_jk - Exp)) / Exp);      }      X[j][k]-=CRITICAL[1];    }  }  return X;}  }
class C{  @Override public void refreshLogs(){  final Path logPath=Env.PATH_LOGS.resolve(logFilesComboBox.getSelectedItem());  try {    sizeLabel.setText("File size: " + SizeFormat.AUTO.formatSize(Files.size(logPath),2));  } catch (  final IOException ie) {    sizeLabel.setText("File size: <unknown>");  }  super.refreshLogs();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public Socket accept() throws IOException {  SSLSocketImpl s=new SSLSocketImpl(sslContext,useServerMode,enabledCipherSuites,doClientAuth,enableSessionCreation,enabledProtocols,identificationProtocol,algorithmConstraints,sniMatchers,preferLocalCipherSuites);  implAccept(s);  s.doneConnect();  return s;}  }
class C{  @Interruptible public static SpecializedMethod createSpecializedMethod(int id){  if (VM.VerifyAssertions) {    VM._assert(SpecializedScanMethod.ENABLED);    VM._assert(id < Selected.Constraints.get().numSpecializedScans());  }  Class<?> traceClass=Selected.Plan.get().getSpecializedScanClass(id);  return new SpecializedScanMethod(id,TypeReference.findOrCreate(traceClass));}  }
class C{  public Vector3i negate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public static boolean isDefined(PageContext pc,String var){  StringList list=parse(pc,new ParserString(var),false);  if (list == null)   return false;  try {    int scope=scopeString2Int(pc.ignoreScopes(),list.next());    Object coll=NULL;    if (scope == Scope.SCOPE_UNDEFINED) {      coll=pc.undefinedScope().get(list.current(),null);      if (coll == null)       return false;    } else {      coll=VariableInterpreter.scope(pc,scope,list.hasNext());    }    while (list.hasNext()) {      coll=pc.getVariableUtil().getCollection(pc,coll,list.next(),null);      if (coll == null)       return false;    }  } catch (  PageException e) {    return false;  }  return true;}  }
class C{  protected void updateCrosshairValues(CrosshairState crosshairState,double x,double y,double transX,double transY,PlotOrientation orientation){  updateCrosshairValues(crosshairState,x,y,0,0,transX,transY,orientation);}  }
class C{  public void probeProviderConnectivity(String tenant,IIdentityStoreData idsData) throws Exception {  getService().probeProviderConnectivity(tenant,idsData,this.getServiceContext());}  }
class C{  private void writeCells(final BufferedWriter bw) throws IOException {  Log.i(TAG,"Writing cell waypoints");  Cursor c=mDbHelper.getReadableDatabase().rawQuery(CELL_POINTS_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(0)});  final int colLatitude=c.getColumnIndex(Schema.COL_LATITUDE);  final int colLongitude=c.getColumnIndex(Schema.COL_LONGITUDE);  final int colAltitude=c.getColumnIndex(Schema.COL_ALTITUDE);  final int colTimestamp=c.getColumnIndex(Schema.COL_TIMESTAMP);  final int colName=c.getColumnIndex("name");  long outer=0;  while (!c.isAfterLast()) {    c.moveToFirst();    while (!c.isAfterLast()) {      StringBuffer out=new StringBuffer();      out.append("<wpt lat=\"");      out.append(String.valueOf(c.getDouble(colLatitude)));      out.append("\" ");      out.append("lon=\"");      out.append(String.valueOf(c.getDouble(colLongitude)));      out.append("\">");      out.append("<ele>");      out.append(String.valueOf(c.getDouble(colAltitude)));      out.append("</ele>");      out.append("<time>");      out.append(getGpxDate(c.getLong(colTimestamp)));      out.append("</time>");      out.append("<name>");      out.append(StringEscapeUtils.escapeXml10(c.getString(colName)));      out.append("</name>");      out.append("</wpt>");      bw.write(out.toString());      bw.flush();      c.moveToNext();    }    outer+=CURSOR_SIZE;    c.close();    c=mDbHelper.getReadableDatabase().rawQuery(CELL_POINTS_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  c.close();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TFUNCTION__FPARS:    return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case TypesPackage.TFUNCTION__RETURN_TYPE_REF:  return basicSetReturnTypeRef(null,msgs);case TypesPackage.TFUNCTION__TYPE_VARS:return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);case TypesPackage.TFUNCTION__DECLARED_THIS_TYPE:return basicSetDeclaredThisType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Map<String,Object> readLayers(InputStream is){  Reader inputStreamReader=new InputStreamReader(is);  Gson gson=new Gson();  Type collectionType=new TypeToken<Map<String,Object>>(){  }.getType();  return gson.fromJson(inputStreamReader,collectionType);}  }
class C{  public boolean isAscending(){  return (!reverseOrder);}  }
class C{  private void waitForResolutionEnd(){synchronized (startedHarvests) {    boolean interrupted=false;    while (!startedHarvests.isEmpty()) {      try {        startedHarvests.wait();      } catch (      InterruptedException iex) {        logger.info("interrupted waiting for harvests to complete," + " no. startedHarvests = " + startedHarvests.size());        interrupted=true;      }    }    if (interrupted)     Thread.currentThread().interrupt();  }}  }
class C{  public static void showConfirmSheet(Component parentComponent,Object message,SheetListener listener){  showConfirmSheet(parentComponent,message,JOptionPane.YES_NO_CANCEL_OPTION,listener);}  }
class C{  public void removeSynapseNode(SynapseNode node){  outlinedObjects.removeChild(node);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,byte value){  buffer.append(value);}  }
class C{  synchronized String[][] internalZoneStrings(){  if (zoneStrings == null) {    zoneStrings=TimeZoneNames.getZoneStrings(locale);  }  return zoneStrings;}  }
class C{  public static double nextBurr2(double r,double k,int nr,MersenneTwisterFast randomGenerator){  double y, u;  u=randomGenerator.nextDouble();  y=Math.exp(-Math.log(u) / r) - 1.0;switch (nr) {case 3:    return (Math.exp(-Math.log(y) / k));case 4:  y=Math.exp(k * Math.log(y)) + 1.0;y=k / y;return (y);case 5:y=Math.atan(-Math.log(y / k));return (y);case 6:y=-Math.log(y / k) / r;y=Math.log(y + Math.sqrt(y * y + 1.0));return (y);case 9:y=1.0 + 2.0 * u / (k * (1.0 - u));y=Math.exp(Math.log(y) / r) - 1.0;return Math.log(y);case 12:return Math.exp(Math.log(y) / k);}return 0;}  }
class C{  public int index(int x,int y,int z){  if (x < 0 || z < 0 || x >= WIDTH || z >= HEIGHT) {    throw new IndexOutOfBoundsException("Coords (x=" + x + ",z="+ z+ ") out of section bounds");  }  return (y & 0xf) << 8 | z << 4 | x;}  }
class C{  protected Sorting(){}  }
class C{  public static void initialize() throws Exception {  unknownBlock=new UnknownBlockInfo();  unknownBlockIds=new HashSet<Short>();  Log.info("Reading blocks configuration file...");  blockTable=new HashMap<Short,BlockInfo>();  readConfig(blockTable);  Log.info("Loaded " + blockTable.size() + " block definitions.");}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void addTimeToBounds(long timeStamp){  if (timeStamp < startTime) {    startTime=timeStamp;  }  if (timeStamp > endTime) {    endTime=timeStamp;  }}  }
class C{  private void findSeparator(){  pos=MultipartStream.this.findSeparator();  if (pos == -1) {    if (tail - head > keepRegion) {      pad=keepRegion;    } else {      pad=tail - head;    }  }}  }
class C{  public ExpressionNode(final String operator,final List<ConditionNode> children){  super(children);  this.operator=operator;}  }
class C{  protected void dumpTree(int depth,StringBuffer text){  if (depth == 0) {    determineNumberOfClusters();  }  if (m_children == null) {    text.append("\n");    for (int j=0; j < depth; j++) {      text.append("|   ");    }    text.append("leaf " + m_clusterNum + " ["+ m_clusterInstances.numInstances()+ "]");  } else {    for (int i=0; i < m_children.size(); i++) {      text.append("\n");      for (int j=0; j < depth; j++) {        text.append("|   ");      }      text.append("node " + m_clusterNum + " ["+ m_clusterInstances.numInstances()+ "]");      m_children.get(i).dumpTree(depth + 1,text);    }  }}  }
class C{  @Override public RegularDegreeEdgeIterator resetForNode(int node){  long nodeInfo=regularDegreeEdgePool.getNodeInfo(node);  if (nodeInfo == -1L) {    this.degree=0;  } else {    this.position=RegularDegreeEdgePool.getNodePositionFromNodeInfo(nodeInfo);    this.degree=RegularDegreeEdgePool.getNodeDegreeFromNodeInfo(nodeInfo);  }  currentEdge=0;  return this;}  }
class C{  private String substituteSubString(String input,String find,String replace){  int find_length=find.length();  int replace_length=replace.length();  StringBuilder output=new StringBuilder(input);  int index=input.indexOf(find);  int outputOffset=0;  while (index > -1) {    output.replace(index + outputOffset,index + outputOffset + find_length,replace);    outputOffset=outputOffset + (replace_length - find_length);    index=input.indexOf(find,index + find_length);  }  return output.toString();}  }
class C{  public void deleteInstance(boolean multiple){  if (!isPanelSelected()) {    return;  }  if (multiple) {    getCurrentPanel().deleteInstances();  } else {    getCurrentPanel().deleteInstance();  }}  }
class C{  public void writeToStream(OutputStreamWithBuffer os) throws IOException {  writeToStream(os,0,_length);}  }
class C{  public String handleWord(String aWord){  Matcher m=conditionPattern.matcher(aWord);  if (m != null && m.matches()) {    if (type.equals(AffixType.PREFIX)) {      return handlePrefix(aWord);    } else     if (type.equals(AffixType.SUFFIX)) {      return handleSuffix(aWord);    }  }  return null;}  }
class C{  public Result run(Database db,Relation<O> relation){  DistanceQuery<O> dq=db.getDistanceQuery(relation,getDistanceFunction());  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final int size=ids.size();  if (size > 0x10000) {    throw new AbortException("This implementation does not scale to data sets larger than " + 0x10000 + " instances (~17 GB RAM), which results in an integer overflow.");  }  LOG.verbose("Notice: SLINK is a much faster algorithm for single-linkage clustering!");  double[] scratch=new double[triangleSize(size)];  DBIDArrayIter ix=ids.iter(), iy=ids.iter();  int pos=0;  for (int x=0; ix.valid(); x++, ix.advance()) {    iy.seek(0);    for (int y=0; y < x; y++, iy.advance()) {      scratch[pos]=dq.distance(ix,iy);      pos++;    }  }  double[] height=new double[size];  Arrays.fill(height,Double.POSITIVE_INFINITY);  ArrayModifiableDBIDs parent=DBIDUtil.newArray(ids);  TIntObjectMap<ModifiableDBIDs> clusters=new TIntObjectHashMap<>();  final int stop=size - numclusters;  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Agglomerative clustering",stop,LOG) : null;  for (int i=0; i < stop; i++) {    double min=Double.POSITIVE_INFINITY;    int minx=-1, miny=-1;    for (int x=0; x < size; x++) {      if (height[x] < Double.POSITIVE_INFINITY) {        continue;      }      final int xbase=triangleSize(x);      for (int y=0; y < x; y++) {        if (height[y] < Double.POSITIVE_INFINITY) {          continue;        }        final int idx=xbase + y;        if (scratch[idx] < min) {          min=scratch[idx];          minx=x;          miny=y;        }      }    }    assert (minx >= 0 && miny >= 0);    ix.seek(minx);    iy.seek(miny);    height[minx]=min;    parent.set(minx,iy);    ModifiableDBIDs cx=clusters.get(minx);    ModifiableDBIDs cy=clusters.get(miny);    if (cy == null) {      cy=DBIDUtil.newHashSet();      cy.add(iy);    }    if (cx == null) {      cy.add(ix);    } else {      cy.addDBIDs(cx);      clusters.remove(minx);    }    clusters.put(miny,cy);    final int xbase=triangleSize(minx), ybase=triangleSize(miny);    for (int j=0; j < miny; j++) {      if (height[j] < Double.POSITIVE_INFINITY) {        continue;      }      scratch[ybase + j]=Math.min(scratch[xbase + j],scratch[ybase + j]);    }    for (int j=miny + 1; j < minx; j++) {      if (height[j] < Double.POSITIVE_INFINITY) {        continue;      }      final int jbase=triangleSize(j);      scratch[jbase + miny]=Math.min(scratch[xbase + j],scratch[jbase + miny]);    }    for (int j=minx + 1; j < size; j++) {      if (height[j] < Double.POSITIVE_INFINITY) {        continue;      }      final int jbase=triangleSize(j);      scratch[jbase + miny]=Math.min(scratch[jbase + minx],scratch[jbase + miny]);    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  final Clustering<Model> dendrogram=new Clustering<>("Hierarchical-Clustering","hierarchical-clustering");  for (int x=0; x < size; x++) {    if (height[x] < Double.POSITIVE_INFINITY) {      DBIDs cids=clusters.get(x);      if (cids == null) {        ix.seek(x);        cids=DBIDUtil.deref(ix);      }      Cluster<Model> cluster=new Cluster<>("Cluster",cids);      dendrogram.addToplevelCluster(cluster);    }  }  return dendrogram;}  }
class C{  public DataSortedTableModel(Instances data){  this(new DataTableModel(data));}  }
class C{  public ProcessClosedReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public TopologicalGraph(){  linkList=new LinkedList<TopologicalLink>();  nodeList=new LinkedList<TopologicalNode>();}  }
class C{  public boolean couldOverride(Environment env,MemberDefinition method){  if (!isMethod()) {    throw new CompilerError("coulcOverride(), expected method");  }  if (!method.isAbstract()) {    return false;  }  if (getAccessLevel() > method.getAccessLevel()) {    return false;  }  if (!exceptionsFit(env,method)) {    return false;  }  return true;}  }
class C{  private static void paintBorder(JComponent cmp,SVGGraphics2D svgGen){  Border border=cmp.getBorder();  if (border != null) {    if ((cmp instanceof AbstractButton) || (cmp instanceof JPopupMenu) || (cmp instanceof JToolBar)|| (cmp instanceof JMenuBar)|| (cmp instanceof JProgressBar)) {      if (((cmp instanceof AbstractButton) && ((AbstractButton)cmp).isBorderPainted()) || ((cmp instanceof JPopupMenu) && ((JPopupMenu)cmp).isBorderPainted()) || ((cmp instanceof JToolBar) && ((JToolBar)cmp).isBorderPainted())|| ((cmp instanceof JMenuBar) && ((JMenuBar)cmp).isBorderPainted())|| ((cmp instanceof JProgressBar) && ((JProgressBar)cmp).isBorderPainted()))       border.paintBorder(cmp,svgGen,0,0,cmp.getWidth(),cmp.getHeight());    } else {      border.paintBorder(cmp,svgGen,0,0,cmp.getWidth(),cmp.getHeight());    }  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  protected void reconnect(Socket newSocket){  connectLock.lock();  if (socket == null || !socket.isConnected()) {    try {      if (isToConnect()) {        socket=new Socket(this.controller.getStaticConf().getHost(remoteId),this.controller.getStaticConf().getServerToServerPort(remoteId));        ServersCommunicationLayer.setSocketOptions(socket);        new DataOutputStream(socket.getOutputStream()).writeInt(this.controller.getStaticConf().getProcessId());      } else {        socket=newSocket;      }    } catch (    UnknownHostException ex) {      ex.printStackTrace();    }catch (    IOException ex) {      System.out.println("Impossible to reconnect to replica " + remoteId);    }    if (socket != null) {      try {        socketOutStream=new DataOutputStream(socket.getOutputStream());        socketInStream=new DataInputStream(socket.getInputStream());        authKey=null;        authenticateAndEstablishAuthKey();      } catch (      IOException ex) {        ex.printStackTrace();      }    }  }  connectLock.unlock();}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] objs,int nbatches) throws Exception {  int nobjs=objs.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < nobjs; j++) {      oout.writeObject(objs[j]);    }    oout.flush();    for (int j=0; j < nobjs; j++) {      oin.readObject();    }  }}  }
class C{  public static int EISCONN(){  return Errno.EISCONN.intValue();}  }
class C{  private void cmd_zoom(){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  m_viewPanel.setZoomLevel(comboZoom.getSelectedIndex());  revalidate();  cmd_drill();}  }
class C{  public Call(Define function){  this(function.getFunctionName(),function.getArgumentType(0),function.getVariableNames(),function.getVariableTypes());}  }
class C{  public PutResult(String successCount,String failCount,List<String> errorMessages){  _successCount=successCount;  _failCount=failCount;  _errorMessages=new ArrayList<>();  if (errorMessages != null) {    _errorMessages.addAll(errorMessages);  }}  }
class C{  public RewrittenOutboundUrl(String target,boolean encode){  this.target=target;  this.encode=encode;}  }
class C{  @SuppressWarnings("unchecked") private void prepareWardDropDownData(final boolean zoneExists,final boolean wardExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareWardDropDownData method");    LOGGER.debug("Zone Exists ? : " + zoneExists + ", "+ "Ward Exists ? : "+ wardExists);  }  if (zoneExists && wardExists) {    List<Boundary> wardList=new ArrayList<Boundary>();    wardList=boundaryService.getActiveChildBoundariesByBoundaryId(getZoneId());    addDropdownData("wardList",wardList);  } else   addDropdownData("wardList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor("#AAFFFFFF"));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public static long murmur(final BitVector bv,final long prefixLength,final long[] state,final long lcp){  final int startStateWord=(int)(Math.min(lcp,prefixLength) / Long.SIZE);  long h=state[startStateWord], k;  long from=startStateWord * Long.SIZE;  while (prefixLength - from >= Long.SIZE) {    k=bv.getLong(from,from+=Long.SIZE);    k*=M;    k^=k >>> R;    k*=M;    h^=k;    h*=M;  }  if (prefixLength > from) {    k=bv.getLong(from,prefixLength);    k*=M;    k^=k >>> R;    k*=M;    h^=k;    h*=M;  }  k=prefixLength;  k*=M;  k^=k >>> R;  k*=M;  h^=k;  h*=M;  return h;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 13:{        addToken(Token.RESERVED_WORD);      }case 18:    break;case 1:{    addToken(Token.IDENTIFIER);  }case 19:break;case 12:{addToken(Token.FUNCTION);}case 20:break;case 10:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 21:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 22:break;case 15:{addToken(Token.ANNOTATION);}case 23:break;case 14:{addToken(Token.RESERVED_WORD_2);}case 24:break;case 9:{addToken(Token.VARIABLE);}case 25:break;case 6:{addToken(Token.WHITESPACE);}case 26:break;case 8:{addToken(Token.PREPROCESSOR);}case 27:break;case 16:{addToken(Token.DATA_TYPE);}case 28:break;case 3:{addToken(Token.ERROR_CHAR);}case 29:break;case 17:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 30:break;case 7:{addToken(Token.OPERATOR);}case 31:break;case 11:{addToken(Token.LITERAL_CHAR);}case 32:break;case 2:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 33:break;case 5:{addNullToken();return firstToken;}case 34:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 148:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public boolean isSelectedWinner(){  Object oo=get_Value(COLUMNNAME_IsSelectedWinner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(args[0]);  removeTransitRoutesWithoutLinkSequences(schedule);  removeNotUsedStopFacilities(schedule);  if (args.length == 1) {    ScheduleTools.writeTransitSchedule(schedule,args[0]);  } else   if (args.length == 2) {    ScheduleTools.writeTransitSchedule(schedule,args[1]);  } else {    throw new IllegalArgumentException("Wrong number of arguments given");  }}  }
class C{  public static boolean isExpired(HttpServerRequest request){  return isExpired(request.headers());}  }
class C{  public static String[] listDescendantFilenames(File file,FileFilter filter,boolean recurseAfterMatch){  if (file == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (file.list() == null)   return null;  ArrayList<String> matches=new ArrayList<String>();  listDescendantFilenames(file,null,filter,recurseAfterMatch,matches);  return matches.toArray(new String[matches.size()]);}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_WRAP_R,GL_CLAMP_TO_EDGE);  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public static EncryptionKey findKey(int etype,EncryptionKey[] keys) throws KrbException {  return findKey(etype,null,keys);}  }
class C{  private Instruction dominanceSuccessor(Instruction a,Instruction b){  BasicBlock aBlock=getBlock(a);  BasicBlock bBlock=getBlock(b);  if (VM.VerifyAssertions) {    VM._assert(aBlock != bBlock && dominator.dominates(aBlock,bBlock));  }  BasicBlock last=null;  while (bBlock != aBlock) {    last=bBlock;    bBlock=dominator.getParent(bBlock);  }  return last.firstInstruction();}  }
class C{  @Override public boolean allocateHostForVm(Vm vm){  int requiredPes=vm.getNumberOfPes();  boolean result=false;  int tries=0;  List<Integer> freePesTmp=new ArrayList<Integer>();  for (  Integer freePes : getFreePes()) {    freePesTmp.add(freePes);  }  if (!getVmTable().containsKey(vm.getUid())) {    do {      int moreFree=Integer.MIN_VALUE;      int idx=-1;      for (int i=0; i < freePesTmp.size(); i++) {        if (freePesTmp.get(i) > moreFree) {          moreFree=freePesTmp.get(i);          idx=i;        }      }      NetworkHost host=this.<NetworkHost>getHostList().get(idx);      result=host.vmCreate(vm);      if (result) {        getVmTable().put(vm.getUid(),host);        getUsedPes().put(vm.getUid(),requiredPes);        getFreePes().set(idx,getFreePes().get(idx) - requiredPes);        result=true;        break;      } else {        freePesTmp.set(idx,Integer.MIN_VALUE);      }      tries++;    } while (!result && tries < getFreePes().size());  }  return result;}  }
class C{  protected boolean isValidLine(final String line){  return true;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public ContextMatchStepPattern(int axis,int paxis){  super(DTMFilter.SHOW_ALL,axis,paxis);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsMapFlagsNone:    return "cudaGraphicsMapFlagsNone";case cudaGraphicsMapFlagsReadOnly:  return "cudaGraphicsMapFlagsReadOnly";case cudaGraphicsMapFlagsWriteDiscard:return "cudaGraphicsMapFlagsWriteDiscard";}return "INVALID cudaGraphicsMapFlags: " + n;}  }
class C{  public static RefreshNotificationType fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  private boolean processNotification(Notification notification,BigInteger historyId,Metric metric,Alert alert,EntityManager em){  if (!shouldEvaluateNotification(notification,historyId)) {    return true;  }  String logMessage=null;  if (notification.isActive() && notification.getFiredTrigger() != null) {    Long triggerFiredTime=getTriggerFiredDatapointTime(notification.getFiredTrigger(),metric);    if (triggerFiredTime == null) {      clearNotification(notification.getFiredTrigger(),metric,historyId,notification,em,alert);    }  }  try {    if (!notification.onCooldown()) {      for (      Trigger trigger : notification.getTriggers()) {        boolean triggerFired=evaluateTrigger(trigger,metric,historyId,notification,em,alert);        if (triggerFired) {          break;        }      }    } else {      logMessage=MessageFormat.format("The notification {0} is on cooldown until {1}.",notification.getName(),getDateMMDDYYYY(notification.getCooldownExpiration()));      _logger.info(logMessage);      appendMessageNUpdateHistory(historyId,logMessage,null,0,0);    }  } catch (  Exception ex) {    logMessage=MessageFormat.format("Exception occured while processing the notification: {0}. Reason: {1}",notification.getName(),ex.toString());    _logger.warn("Exception occured while processing the notification: {}. Reason: {}",notification,ex.toString());    appendMessageNUpdateHistory(historyId,logMessage,null,0,0);    return false;  }  return true;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public OptionalInt map(IntUnaryOperator mapper){  if (!isPresent())   return empty();  return OptionalInt.of(mapper.applyAsInt(value));}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> argsName,ArrayList<String> argsValues) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,argsName,argsValues,null);}  }
class C{  public static void write(int x1,int y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.GRID_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_GRID);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(rows);  dos.writeInt(columns);  dos.writeFloat(orientation);  dos.writeFloat(vResolution);  dos.writeFloat(hResolution);  dos.writeByte(major);  dos.writeInt(data.length);  for (int i=0; i < data.length; i++) {    dos.writeInt(data[i]);  }  properties.write(dos);}  }
class C{  public int read(BufferedInputStream is){  init();  if (is != null) {    in=is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public MessageCreateHandler(ImplDiscordAPI api){  super(api,true,"MESSAGE_CREATE");}  }
class C{  public void add(EventBean theEvent){  if (singleEvent == null) {    singleEvent=theEvent;  } else {    if (eventList == null) {      eventList=new ArrayList<EventBean>(5);      eventList.add(singleEvent);    }    eventList.add(theEvent);  }}  }
class C{  public CBreakpointTableModel(final BackEndDebuggerProvider debuggerProvider){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01339: Debugger provider can't be null");}  }
class C{  public void removePhoto(PhotoEntity photo){  photos.remove(photo);}  }
class C{  public Matrix3d(double[] v){  this.m00=v[0];  this.m01=v[1];  this.m02=v[2];  this.m10=v[3];  this.m11=v[4];  this.m12=v[5];  this.m20=v[6];  this.m21=v[7];  this.m22=v[8];}  }
class C{  public ParcelFileDescriptor simpleQueryForBlobFileDescriptor(){  acquireReference();  try {    return getSession().executeForBlobFileDescriptor(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  protected static boolean isObstacle(SymbolCode symbolCode){  if (symbolCode == null)   return false;  String scheme=symbolCode.getScheme();  String category=symbolCode.getCategory();  String functionId=symbolCode.getFunctionId();  return SymbologyConstants.SCHEME_TACTICAL_GRAPHICS.equalsIgnoreCase(scheme) && SymbologyConstants.CATEGORY_MOBILITY_SURVIVABILITY.equalsIgnoreCase(category) && (functionId.charAt(0) == 'o' || functionId.charAt(0) == 'O');}  }
class C{  public static Test suite(){  return (new TestSuite(JavaTopLevelComponentITCase.class));}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(super.toString());  sb.append("{filterChain=" + filters);  sb.append("}");  return sb.toString();}  }
class C{  static AdaptationRegistry create(Schema schema,ElementTransform transform){  return new AdaptationRegistry(transform.getAdaptations(),unionAttributes(schema,transform),unionElements(schema,transform));}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer();  buff.append("Name: ").append(m_name).append(" ");  String type=m_type;  if (type.toLowerCase().startsWith("date") && type.indexOf(":") > 0) {    type=type.substring(0,type.indexOf(":"));    String format=m_type.substring(m_type.indexOf(":" + 1,m_type.length()));    buff.append("Type: ").append(type).append(" [").append(format).append("] ");  } else {    buff.append("Type: ").append(type).append(" ");  }  buff.append("Value: ").append(m_value);  return buff.toString();}  }
class C{  @Override public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException {  this.getLeft().validateExpression(ids,constVars,conditional);  if (_left instanceof FunctionCallIdentifier) {    raiseValidateError("user-defined function calls not supported in boolean expressions",false,LanguageException.LanguageErrorCodes.UNSUPPORTED_EXPRESSION);  }  if (this.getRight() != null) {    if (_right instanceof FunctionCallIdentifier) {      raiseValidateError("user-defined function calls not supported in boolean expressions",false,LanguageException.LanguageErrorCodes.UNSUPPORTED_EXPRESSION);    }    this.getRight().validateExpression(ids,constVars,conditional);  }  String outputName=getTempName();  DataIdentifier output=new DataIdentifier(outputName);  output.setAllPositions(this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());  output.setBooleanProperties();  this.setOutput(output);  if ((_opcode == Expression.BooleanOp.CONDITIONALAND) || (_opcode == Expression.BooleanOp.CONDITIONALOR)) {    raiseValidateError("Unsupported boolean operation " + _opcode.toString(),false,LanguageException.LanguageErrorCodes.UNSUPPORTED_PARAMETERS);  }}  }
class C{  public boolean isNumber(String key){  return get(key) instanceof Number;}  }
class C{  public boolean addObserver(final T observer){  if (observer == null) {    throw new NullPointerException("Observer must not be null");  }  if (!(observer instanceof RemoteReference)) {    throw new IllegalArgumentException("Was expecting a reference");  }  return observers.add(observer);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isTangent(){  return isTangent;}  }
class C{  public CompiereColor(URL textureURL,Color taint,float compositeAlpha){  if (textureURL == null || taint == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  m_type=TYPE_TEXTURE;  m_textureURL=textureURL;  m_primaryColor=taint;  m_compositeAlpha=compositeAlpha;}  }
class C{  public Vector2f normalizeLocal(){  float length=length();  if (length != 0) {    return divideLocal(length);  }  return divideLocal(1);}  }
class C{  static <T0,T1,T2,T3,T4>Tuple5<T0,T1,T2,T3,T4> of(T0 e0,T1 e1,T2 e2,T3 e3,T4 e4){  return new Tuple5Impl<>(e0,e1,e2,e3,e4);}  }
class C{  QualifiedName applyValueConverter(String concreteSyntax){  final String semanticReplacementString=valueConverter.toValue(concreteSyntax,null);  final QualifiedName qualifiedName=qualifiedNameConverter.toQualifiedName(semanticReplacementString);  return qualifiedName;}  }
class C{  public static StringBuilder escape(final String s){  final int len=s.length();  final StringBuilder sbuf=new StringBuilder(len + 10);  for (int i=0; i < len; i++) {    final int ch=s.charAt(i);    if (ch == ' ') {      sbuf.append("%20");    } else     if (ch == '%') {      if (i < len - 2 && s.charAt(i + 1) >= '0' && s.charAt(i + 1) <= '9' && s.charAt(i + 2) >= '0' && s.charAt(i + 2) <= '9') {        sbuf.append((char)ch);      } else {        sbuf.append("%25");      }    } else     if (ch == '&') {      if (i < len - 6 && "amp;".equals(s.substring(i + 1,i + 5).toLowerCase())) {        sbuf.append((char)ch);      } else {        sbuf.append("%26");      }    } else     if (ch == '#') {      sbuf.append((char)ch);    } else     if (ch == '!' || ch == ':' || ch == '-' || ch == '_' || ch == '.' || ch == '~' || ch == '*' || ch == '\'' || ch == '(' || ch == ')' || ch == '{' || ch == '}' || ch == ';' || ch == ',' || ch == '=') {      sbuf.append((char)ch);    } else     if ('0' <= ch && ch <= '9') {      sbuf.append((char)ch);    } else     if (ch == '/') {      sbuf.append((char)ch);    } else     if ('A' <= ch && ch <= 'Z') {      sbuf.append((char)ch);    } else     if ('a' <= ch && ch <= 'z') {      sbuf.append((char)ch);    } else     if (ch <= 0x007f) {      sbuf.append(hex[ch]);    } else     if (ch <= 0x07FF) {      sbuf.append(hex[0xc0 | (ch >> 6)]);      sbuf.append(hex[0x80 | (ch & 0x3F)]);    } else {      sbuf.append(hex[0xe0 | (ch >> 12)]);      sbuf.append(hex[0x80 | ((ch >> 6) & 0x3F)]);      sbuf.append(hex[0x80 | (ch & 0x3F)]);    }  }  return sbuf;}  }
class C{  public void writeClustersToFile(String filename){  int clusterCount=0;  int clusterMultiplier=1;  int totalClusters=clusterList.size();  if (!silent) {    log.info("Writing a total of " + totalClusters + " to file.");  }  try {    BufferedWriter output=IOUtils.getBufferedWriter(filename);    try {      output.write("ClusterId,Long,Lat,NumberOfActivities");      output.newLine();      for (      DigicoreCluster c : clusterList) {        c.setCenterOfGravity();        Coord center=c.getCenterOfGravity();        output.write(c.getId().toString());        output.write(delimiter);        output.write(String.valueOf(center.getX()));        output.write(delimiter);        output.write(String.valueOf(center.getY()));        output.write(delimiter);        output.write(String.valueOf(c.getPoints().size()));        output.newLine();        clusterCount++;        if (!silent) {          if (clusterCount == clusterMultiplier) {            log.info("   Clusters written: " + clusterCount);            clusterMultiplier*=2;          }        }      }      if (!silent) {        log.info("   Clusters written: " + clusterCount + " (Done)");      }    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public WFieldRecordInfo(String title,int AD_Table_ID,int AD_Column_ID,int Record_ID){  super();  this.setTitle(title);  this.setAttribute("modal",Boolean.TRUE);  this.setWidth("640px");  this.setHeight("480px");  this.setBorder("normal");  this.setSizable(true);  this.setClosable(true);  this.setMaximizable(true);  this.AD_Table_ID=AD_Table_ID;  this.AD_Column_ID=AD_Column_ID;  this.Record_ID=Record_ID;  try {    init(dynInit(title));  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AEnv.showCenterScreen(this);}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  splitPane=new JSplitPane();  contentPane.add(splitPane,BorderLayout.CENTER);  final JScrollPane scrollPane1=new JScrollPane();  splitPane.setLeftComponent(scrollPane1);  methodList=new JList();  scrollPane1.setViewportView(methodList);  final JScrollPane scrollPane2=new JScrollPane();  splitPane.setRightComponent(scrollPane2);  methodDetailTable=new JTable();  scrollPane2.setViewportView(methodDetailTable);}  }
class C{  public boolean canOcclude(){  return canOcclude;}  }
class C{  private boolean isStrikeThrough(AttributedCharacterIterator ati){  Object attr=ati.getAttribute(TextAttribute.STRIKETHROUGH);  if (TextAttribute.STRIKETHROUGH_ON.equals(attr))   return true;  return false;}  }
class C{  public TopicConnectionFactory lookupTopicConnectionFactory(String name) throws JMSException, NamingException {  if (usingJNDI) {    return super.lookupTopicConnectionFactory(name);  } else {    MQTopicConnectionFactory tcf=new MQTopicConnectionFactory();    configureMQConnectionFactory(tcf);    return tcf;  }}  }
class C{  public boolean isBorderOpaque(){  return true;}  }
class C{  public RevealOutputGraph exhaustiveSearch(int lag1,int lag2){  if (lag2 <= lag1 || lag1 <= 0) {    System.out.println("2nd lag must be greater than 1st which must be pos");    return null;  }  int[] parents1=new int[ngenes];  int[] lags1=new int[ngenes];  int[][] parents2=new int[ngenes][];  int[][] lags2=new int[ngenes][];  int[][] parents3=new int[ngenes][];  int[][] lags3=new int[ngenes][];  int[] nparents=new int[ngenes];  int[][] parents=new int[ngenes][];  int[][] lags=new int[ngenes][];  for (int gchild=0; gchild < ngenes; gchild++) {    double bestme=-1000.0;    int[] parent1=new int[1];    for (int gparent=0; gparent < ngenes; gparent++) {      parent1[0]=gparent;      for (int lag=lag1; lag <= lag2; lag++) {        double entropyChild=re.entropy(gchild,lag);        double mutualInf=re.mutualInformation(gchild,parent1,lag);        double mOverE=mutualInf / entropyChild;        if (mOverE > bestme) {          bestme=mOverE;          parents1[gchild]=gparent;          lags1[gchild]=lag;          nparents[gchild]=1;        }      }    }    int[] parent2=new int[2];    parents2[gchild]=new int[2];    lags2[gchild]=new int[2];    for (int gparent1=0; gparent1 < ngenes; gparent1++) {      for (int lagp1=lag1; lagp1 <= lag2; lagp1++) {        for (int gparent2=0; gparent2 < ngenes && gparent1 != gparent2; gparent2++) {          for (int lagp2=lag1; lagp2 <= lag2; lagp2++) {            parent2[0]=gparent1;            parent2[1]=gparent2;            int[] lagsa=new int[2];            lagsa[0]=lagp1;            lagsa[1]=lagp2;            int lag=(lagp1 > lagp2) ? lagp1 : lagp2;            double entropyChild=re.entropy(gchild,lag);            double mutualInf=re.mutualInformation(gchild,parent2,lagsa);            double mOverE=mutualInf / entropyChild;            if (mOverE > bestme) {              bestme=mOverE;              parents2[gchild][0]=gparent1;              parents2[gchild][1]=gparent2;              lags2[gchild][0]=lagp1;              lags2[gchild][1]=lagp2;              nparents[gchild]=2;            }          }        }      }    }    int[] parent3=new int[3];    parents3[gchild]=new int[3];    lags3[gchild]=new int[3];    for (int gparent1=0; gparent1 < ngenes; gparent1++) {      for (int lagp1=lag1; lagp1 <= lag2; lagp1++) {        for (int gparent2=0; gparent2 < ngenes; gparent2++) {          for (int lagp2=lag1; lagp2 <= lag2; lagp2++) {            for (int gparent3=0; gparent3 < ngenes; gparent3++) {              for (int lagp3=lag1; lagp3 <= lag2; lagp3++) {                parent3[0]=gparent1;                parent3[1]=gparent2;                parent3[2]=gparent3;                int[] lagsa=new int[3];                lagsa[0]=lagp1;                lagsa[1]=lagp2;                lagsa[2]=lagp3;                int lag=(lagp1 > lagp2) ? lagp1 : lagp2;                lag=(lag > lagp3) ? lag : lagp3;                double entropyChild=re.entropy(gchild,lag);                double mutualInf=re.mutualInformation(gchild,parent3,lagsa);                double mOverE=mutualInf / entropyChild;                if (mOverE > bestme) {                  bestme=mOverE;                  parents3[gchild][0]=gparent1;                  parents3[gchild][1]=gparent2;                  parents3[gchild][2]=gparent3;                  lags3[gchild][0]=lagp1;                  lags3[gchild][1]=lagp2;                  lags3[gchild][2]=lagp3;                  nparents[gchild]=3;                }              }            }          }        }      }    }    System.out.println("For gene " + gchild + ":");    if (nparents[gchild] == 1) {      parents[gchild]=new int[1];      lags[gchild]=new int[1];      System.out.println("best parent, lag = " + parents1[gchild] + " "+ lags1[gchild]);      parents[gchild][0]=parents1[gchild];      lags[gchild][0]=lags1[gchild];    } else     if (nparents[gchild] == 2) {      parents[gchild]=new int[2];      lags[gchild]=new int[2];      System.out.println("best parents, lags = " + parents2[gchild][0] + " "+ parents2[gchild][1]+ " "+ " "+ lags2[gchild][0]+ " "+ lags2[gchild][1]);      parents[gchild][0]=parents2[gchild][0];      parents[gchild][1]=parents2[gchild][1];      lags[gchild][0]=lags2[gchild][0];      lags[gchild][1]=lags2[gchild][1];    } else     if (nparents[gchild] == 3) {      parents[gchild]=new int[3];      lags[gchild]=new int[3];      System.out.println("best parents, lags = " + parents3[gchild][0] + " "+ parents3[gchild][1]+ " "+ parents3[gchild][2]+ " "+ lags3[gchild][0]+ " "+ lags3[gchild][1]+ " "+ lags3[gchild][2]);      parents[gchild][0]=parents3[gchild][0];      parents[gchild][1]=parents3[gchild][1];      parents[gchild][2]=parents3[gchild][2];      lags[gchild][0]=lags3[gchild][0];      lags[gchild][1]=lags3[gchild][1];      lags[gchild][2]=lags3[gchild][2];    }  }  RevealOutputGraph rog=new RevealOutputGraph(ngenes,parents,lags,names,"TestReveal");  return rog;}  }
class C{  private GridConfigurationFinder(){}  }
class C{  public void allowTypeHierarchy(final Class<?> type){  addPermission(new TypeHierarchyPermission(type));}  }
class C{  public TernaryIntervalSearchTree(){  defRetValue=-1;}  }
class C{  public void removeUpdates(LocationListener listener){  checkListener(listener);  String packageName=mContext.getPackageName();  ListenerTransport transport;synchronized (mListeners) {    transport=mListeners.remove(listener);  }  if (transport == null)   return;  try {    mService.removeUpdates(transport,null,packageName);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  @Interruptible public void resizeFreeList(Address startAddress){  if (VERBOSE) {    Log.write("flpr: Start address old: ");    Log.write(start);    Log.write(", new: ");    Log.writeln(startAddress);  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((VM.HEAP_LAYOUT_64BIT || !contiguous) && !Plan.isInitialized());  start=Conversions.alignUp(startAddress,EmbeddedMetaData.LOG_BYTES_IN_REGION);  freeList.resizeFreeList();}  }
class C{  @Singleton @Provides UI provideLocale(BaseApp baseApp){  return new UIData(baseApp);}  }
class C{  private void queryHostsForDatastore(final State current){  Operation.CompletionHandler handler=null;  Operation queryPost=Operation.createPost(UriUtils.buildUri(getHost(),com.vmware.photon.controller.common.xenon.ServiceUriPaths.CORE_QUERY_TASKS)).setBody(buildHostQuery(current)).setCompletion(handler);  this.sendRequest(queryPost);}  }
class C{  protected void fireUndoableEditHappened(UndoableEdit edit){  if (getDrawing() != null) {    getDrawing().fireUndoableEditHappened(edit);  }}  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  protected ChannelCalculatorCommon assignCalcObjectContinuous(String selectedCalcType) throws Exception {  if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_GAUSSIAN)) {    return new MutualInfoCalculatorMultiVariateGaussian();  } else   if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_KRASKOV_ALG1)) {    return new MutualInfoCalculatorMultiVariateKraskov1();  } else   if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_KRASKOV_ALG2)) {    return new MutualInfoCalculatorMultiVariateKraskov2();  } else   if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_KERNEL)) {    return new MutualInfoCalculatorMultiVariateKernel();  } else {    throw new Exception("No recognised continuous calculator selected: " + selectedCalcType);  }}  }
class C{  public int offsetToCol(int offset) throws IllegalArgumentException {  return 1 + offset - nlOffsets[offsetToLine(offset) - 1];}  }
class C{  public static <K,V>BiMap<K,V> constrainedBiMap(BiMap<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedBiMap<K,V>(map,null,constraint);}  }
class C{  public static long round(double d){  return (long)floor(d + 0.5d);}  }
class C{  private void quickReply(){  quickReplySmsMessage=smsPopupPager.getActiveMessage();  quickReply(quickReplySmsMessage.getReplyText());}  }
class C{  public Builder offset(Integer offset){  this.offset=offset;  return this;}  }
class C{  public int calculateDynamicPriority(int seconds){  if (seconds == 0 || getDynPriorityUnit() == null || getDynPriorityChange() == null || Env.ZERO.compareTo(getDynPriorityChange()) == 0)   return 0;  BigDecimal divide=Env.ZERO;  if (DYNPRIORITYUNIT_Minute.equals(getDynPriorityUnit()))   divide=new BigDecimal(60); else   if (DYNPRIORITYUNIT_Hour.equals(getDynPriorityUnit()))   divide=new BigDecimal(3600); else   if (DYNPRIORITYUNIT_Day.equals(getDynPriorityUnit()))   divide=new BigDecimal(86400); else   return 0;  BigDecimal change=new BigDecimal(seconds).divide(divide,BigDecimal.ROUND_DOWN).multiply(getDynPriorityChange());  return change.intValue();}  }
class C{  public void requestPTY(String term) throws IOException {  requestPTY(term,0,0,0,0,null);}  }
class C{  public String html_tooltip(String short_txt,String popup_txt){  String out="";  if (jquery) {    out=String.format("<div title='%s'>%s</div>",popup_txt,short_txt);  } else   if (jqueryMobile) {    String popup=String.format("<div data-role=popup id=popup%d>\n" + "  <p>%s</p>\n" + "</div>\n",popupId,popup_txt);    String txt=String.format("<a href=#popup%d data-rel=popup>%s</a>",popupId++,short_txt);    out=popup + txt;  }  return out;}  }
class C{  public boolean removeAll(double[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (remove(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  synchronized void clear(){  maps=new Maps();  tombstones.clear();  ramBytesUsedCurrent.set(0);  if (mgr != null) {    mgr.removeListener(this);    mgr=null;  }}  }
class C{  public static boolean isNewerVersionAvailable(Context applicationContext){  assert Looper.myLooper() != Looper.getMainLooper();  if (!sEnableUpdateDetection) {    return false;  }  if ("".equals(getMarketURL(applicationContext))) {    return false;  }  VersionNumberGetter getter=getVersionNumberGetter();  String currentStr=getter.getCurrentlyUsedVersion(applicationContext);  String latestStr=getter.getLatestKnownVersion(applicationContext,PREF_PACKAGE,PREF_LATEST_VERSION);  VersionNumber currentVersionNumber=VersionNumber.fromString(currentStr);  VersionNumber latestVersionNumber=VersionNumber.fromString(latestStr);  if (currentVersionNumber == null || latestVersionNumber == null) {    return false;  }  return currentVersionNumber.isSmallerThan(latestVersionNumber);}  }
class C{  @Nonnull public BugInstance addSourceLineRange(ClassContext classContext,PreorderVisitor visitor,int startPC,int endPC){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstructionRange(classContext,visitor,startPC,endPC);  requireNonNull(sourceLineAnnotation);  add(sourceLineAnnotation);  return this;}  }
class C{  public static boolean isStaticSelector(JCTree base,Names names){  if (base == null)   return false;switch (base.getTag()) {case IDENT:    JCIdent id=(JCIdent)base;  return id.name != names._this && id.name != names._super && isStaticSym(base);case SELECT:return isStaticSym(base) && isStaticSelector(((JCFieldAccess)base).selected,names);case TYPEAPPLY:case TYPEARRAY:return true;case ANNOTATED_TYPE:return isStaticSelector(((JCAnnotatedType)base).underlyingType,names);default :return false;}}  }
class C{  public boolean isZero(){  boolean result=true;  for (int i=0; i < mLength && result; i++) {    result=result && ((mPol[i] & 0xFFFFFFFFFFFFFFFFL) == 0);  }  return result;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public String toString() throws JSONException {  if (this.string == null) {    int c;    int length=0;    char chars[]=new char[this.length];    for (int at=0; at < this.length; at+=characterSize(c)) {      c=this.characterAt(at);      if (c < 0x10000) {        chars[length]=(char)c;        length+=1;      } else {        chars[length]=(char)(0xD800 | ((c - 0x10000) >>> 10));        length+=1;        chars[length]=(char)(0xDC00 | (c & 0x03FF));        length+=1;      }    }    this.string=new String(chars,0,length);  }  return this.string;}  }
class C{  public static int byteToInt(int b){  int i=b;  if (i < 0) {    i=i + 256;  }  return i;}  }
class C{  public void initializeScreen(){  mListViewAutocomplete=(ListView)findViewById(R.id.list_view_friends_autocomplete);  mEditTextAddFriendEmail=(EditText)findViewById(R.id.edit_text_add_friend_email);  Toolbar toolbar=(Toolbar)findViewById(R.id.app_bar);  setSupportActionBar(toolbar);  if (getSupportActionBar() != null) {    getSupportActionBar().setDisplayHomeAsUpEnabled(true);  }}  }
class C{  private boolean writeRectAttributes(IXMLElement elem,SVGFigure f,Rectangle2D.Double rect){  AffineTransform t=TRANSFORM.getClone(f);  if (t == null) {    t=drawingTransform;  } else {    t.preConcatenate(drawingTransform);  }  if ((t.getType() & (AffineTransform.TYPE_UNIFORM_SCALE | AffineTransform.TYPE_TRANSLATION)) == t.getType()) {    Point2D.Double start=new Point2D.Double(rect.x,rect.y);    Point2D.Double end=new Point2D.Double(rect.x + rect.width,rect.y + rect.height);    t.transform(start,start);    t.transform(end,end);    Rectangle r=new Rectangle((int)Math.min(start.x,end.x),(int)Math.min(start.y,end.y),(int)Math.abs(start.x - end.x),(int)Math.abs(start.y - end.y));    elem.setAttribute("shape","rect");    elem.setAttribute("coords",r.x + "," + r.y+ ","+ (r.x + r.width)+ ","+ (r.y + r.height));    writeHrefAttribute(elem,f);    return bounds.intersects(r);  } else {    return writePolyAttributes(elem,f,(Shape)rect);  }}  }
class C{  public static final int readInt(InputStream is) throws IOException {  return (((0xFF & is.read()) << 8) | (0xFF & is.read()));}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  private void createDestroyCreate(){  createAndDestroy();  try {    region.create(new Integer(1),new Integer(2));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError("failed in trying to create",e);  }}  }
class C{  public final void testValidateCaseInsensitiveAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,true,allowedCharacters);  assertFalse(characterValidator.validate("Ab C2-"));}  }
class C{  public void testBadNamesAndUris() throws Exception {  TungstenProperties props=createProperties("testConfig",false);  BackupManager bmgr=new BackupManager(new MockEventDispatcher());  bmgr.initialize(props);  try {    bmgr.spawnBackup("foo","file",false);    throw new Exception("Backup spawned with bad backup name");  } catch (  BackupException e) {  }  try {    bmgr.spawnBackup("dummy","foo",false);    throw new Exception("Backup spawned with bad storage name");  } catch (  BackupException e) {  }  try {    bmgr.spawnRestore("storage://simple-storage/fooo.properties");    throw new Exception("Restore spawned with non-existent URI");  } catch (  BackupException e) {  }  bmgr.release();}  }
class C{  public SelectClause addStreamWildcard(String streamName,String columnName){  selectList.add(new SelectClauseStreamWildcard(streamName,columnName));  return this;}  }
class C{  public Matrix4 rotate(Quaternion rotation){  rotation.toMatrix(tmp);  mul(val,tmp);  return this;}  }
class C{  public DefaultRequest itemCategory(String value){  setString(ITEM_CATEGORY,value);  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.IF_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);case N4JSPackage.IF_STATEMENT__IF_STMT:  return basicSetIfStmt(null,msgs);case N4JSPackage.IF_STATEMENT__ELSE_STMT:return basicSetElseStmt(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public byte[] readSegment(byte segmentMarker){  return readSegment(segmentMarker,0);}  }
class C{  private void findStreamLocal(QueryKraken query,Object[] args,ResultStream<Cursor> result){  try {    TableKraken table=query.table();    TableKelp tableKelp=table.getTableKelp();    RowCursor cursor=tableKelp.cursor();    query.fillKey(cursor,args);    query.findStream(result,args);  } catch (  Exception e) {    result.fail(e);  }}  }
class C{  protected Bits(int[] bits,BitsState initState){  this.bits=bits;  this.currentState=initState;switch (initState) {case UNKNOWN:    this.bits=null;  break;case NORMAL:Assert.check(bits != unassignedBits);break;}}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public T caseNamespaceImportSpecifier(NamespaceImportSpecifier object){  return null;}  }
class C{  protected boolean checkNodeAddress(int address){  return (address >= 1) && (address <= 127);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public StandardClassMetadata(Class<?> introspectedClass){  Assert.notNull(introspectedClass,"Class must not be null");  this.introspectedClass=introspectedClass;}  }
class C{  void handleException(Throwable t){  if (failure == null) {    failure=t;    for (    ContextualFuture<?> responseFuture : responseFutures.values()) {      responseFuture.context.executor().execute(null);    }    responseFutures.clear();    for (    Listener<Throwable> listener : exceptionListeners) {      listener.accept(t);    }  }}  }
class C{  public VasaServiceCallbackHandler(Object clientData){  this.clientData=clientData;}  }
class C{  public boolean isFullyDownloaded(StorageData storageData){  for (  LocalStorageData lsd : downloadedStorages) {    if (ObjectUtils.equals(lsd.getId(),storageData.getId())) {      return lsd.isFullyDownloaded();    }  }  return false;}  }
class C{  public long create_composite_atom(MP4DataStream bitstream) throws IOException {  while (readed < size) {    MP4Atom child=MP4Atom.createAtom(bitstream);    this.children.add(child);    readed+=child.getSize();  }  return readed;}  }
class C{  public SBitmap(LLPoint ll1,short width,short height,byte[] bits,short x_hot,short y_hot){  super(GraphicType.GT_Bitmap,RenderType.RT_LatLon,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint((short)0,(short)0);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  bits_=bits;  bmref_=null;}  }
class C{  public BlackholeServer(int port) throws IOException {  server=new ServerSocket(port);  server.setSoTimeout(LIVENESS_TIMEOUT);}  }
class C{  public boolean hasOrgDepartment(){  return hasExtension(OrgDepartment.class);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  return innerproduct(x_index,x_att,y_index,y_att);}  }
class C{  public boolean remove(Object o){  return m.remove(o) == PRESENT;}  }
class C{  public void disconnect(){  if (sLogger.isActivated()) {    sLogger.info("Network access disconnected");  }  mIpAddress=null;}  }
class C{  protected String prepareMessageText(Properties unProperties){  String body=getLocalizedProperty(HandlerUtils.MAIL_BODY,unProperties);  String footer=getLocalizedProperty(HandlerUtils.MAIL_FOOTER,unProperties);  String nameNewId=getLocalizedProperty(HandlerUtils.MAIL_BODY_NEWID,unProperties);  String nameOldId=getLocalizedProperty(HandlerUtils.MAIL_BODY_OLDID,unProperties);  HandlerUtils.checkNotNull(body,HandlerUtils.MAIL_BODY);  HandlerUtils.checkNotNull(footer,HandlerUtils.MAIL_FOOTER);  HandlerUtils.checkNotNull(nameNewId,HandlerUtils.MAIL_BODY_NEWID);  HandlerUtils.checkNotNull(nameOldId,HandlerUtils.MAIL_BODY_OLDID);  StringBuilder sb=new StringBuilder();  sb.append(body);  sb.append("\n\n");  sb.append(nameOldId);  sb.append(": ");  sb.append(MARKER_OLDID);  sb.append("\n");  sb.append(nameNewId);  sb.append(": ");  sb.append(MARKER_NEWID);  sb.append("\n");  sb.append(footer);  return sb.toString();}  }
class C{  @Override public void put(String name,int value){  emulatedFields.put(name,value);}  }
class C{  public ClassCastException(String s){  super(s);}  }
class C{  public void printAllDeps(List<Map<String,Set<String>>> result){  assert result.size() == 2;  Map<String,Set<String>> deps=result.get(0);  Map<String,Set<String>> missing=result.get(1);  mLog.info("++++++ %d Entries found in source JARs",deps.size());  mLog.info("");  for (  Entry<String,Set<String>> entry : deps.entrySet()) {    mLog.info("+Found  : %s",entry.getKey());    for (    String dep : entry.getValue()) {      mLog.info("    uses: %s",dep);    }    mLog.info("");  }  mLog.info("");  mLog.info("------ %d Entries missing from source JARs",missing.size());  mLog.info("");  for (  Entry<String,Set<String>> entry : missing.entrySet()) {    mLog.info("-Missing  : %s",entry.getKey());    for (    String dep : entry.getValue()) {      mLog.info("   used by: %s",dep);    }    mLog.info("");  }}  }
class C{  static double TransEval(GLUvertex u,GLUvertex v,GLUvertex w){  double gapL, gapR;  assert (TransLeq(u,v) && TransLeq(v,w));  gapL=v.t - u.t;  gapR=w.t - v.t;  if (gapL + gapR > 0) {    if (gapL < gapR) {      return (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));    } else {      return (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));    }  }  return 0;}  }
class C{  public boolean isRoot(){  return true;}  }
class C{  public TraceStateExited createTraceStateExited(){  TraceStateExitedImpl traceStateExited=new TraceStateExitedImpl();  return traceStateExited;}  }
class C{  public TemplateEffect(Template variable,Template value,int priority,boolean exclusive,boolean negated){  super(variable.toString(),(value.isUnderspecified()) ? ValueFactory.none() : ValueFactory.create(value.toString()),priority,exclusive,negated);  this.labelTemplate=variable;  this.valueTemplate=value;}  }
class C{  @Override public boolean canInvert(){  return true;}  }
class C{  private final void invokeExitMethods(StateInfo commonStateInfo){  while ((mStateStackTopIndex >= 0) && (mStateStack[mStateStackTopIndex] != commonStateInfo)) {    State curState=mStateStack[mStateStackTopIndex].state;    if (mDbg)     mSm.log("invokeExitMethods: " + curState.getName());    curState.exit();    mStateStack[mStateStackTopIndex].active=false;    mStateStackTopIndex-=1;  }}  }
class C{  protected void stopMonitoringLightLevels(){  sensorManager.unregisterListener(this,lightSensor);}  }
class C{  @Override public String toString(){  return "cudaGraphicsResource[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public LeakFS(FileSystem delegate){  super("leakfs://",delegate);}  }
class C{  public static void glide(Robot robot,int x0,int y0,int x1,int y1) throws AWTException {  float dmax=(float)Math.max(Math.abs(x1 - x0),Math.abs(y1 - y0));  float dx=(x1 - x0) / dmax;  float dy=(y1 - y0) / dmax;  for (int i=0; i <= dmax; i+=10) {    robot.mouseMove((int)(x0 + dx * i),(int)(y0 + dy * i));  }}  }
class C{  @Override protected boolean logMultipleExceptions(){  return false;}  }
class C{  private static synchronized void recordBottom(RVMMethod m,RVMField f){  if (!f.isPrivate()) {    return;  }  if (isTrouble(f)) {    return;  }  FieldDatabase.FieldDatabaseEntry entry=db.findOrCreateEntry(f);  FieldDatabase.FieldWriterInfo info=entry.findMethodInfo(m);  if (VM.VerifyAssertions) {    if (info == null) {      VM.sysWrite("ERROR recordBottom: method " + m + " field "+ f);    }    VM._assert(info != null);  }  info.setBottom();  info.setAnalyzed();}  }
class C{  public static boolean isWriteable(){  return isExternalStorageWritable();}  }
class C{  public LinearEquationSystem(double[][] a,double[] b){  if (a == null) {    throw new IllegalArgumentException("Coefficient array is null!");  }  if (b == null) {    throw new IllegalArgumentException("Right hand side is null!");  }  if (a.length != b.length) {    throw new IllegalArgumentException("Coefficient matrix and right hand side " + "differ in row dimensionality!");  }  coeff=a;  rhs=b;  row=new int[coeff.length];  for (int i=0; i < coeff.length; i++) {    row[i]=i;  }  col=new int[coeff[0].length];  for (int j=0; j < coeff[0].length; j++) {    col[j]=j;  }  rank=0;  x_0=null;  solved=false;  solvable=false;  reducedRowEchelonForm=false;}  }
class C{  public final double laplaceProb(int classIndex){  return (m_perClass[classIndex] + 1) / (totaL + m_perClass.length);}  }
class C{  public static String deleteBlacklistEntry(final String blacklistToUse,final String entry,final RequestHeader header){  String oldEntry=entry;  if (blacklistToUse == null || blacklistToUse.isEmpty()) {    return "";  }  if (oldEntry == null || oldEntry.isEmpty()) {    return header.get(HeaderFramework.CONNECTION_PROP_PATH) + "?selectList=&selectedListName=" + blacklistToUse;  }  int pos=oldEntry.indexOf('/',0);  String host=oldEntry.substring(0,pos);  String path="";  if (pos > 0) {    path=oldEntry.substring(pos + 1);  }  for (  final BlacklistType supportedBlacklistType : BlacklistType.values()) {    if (ListManager.listSetContains(supportedBlacklistType + ".BlackLists",blacklistToUse)) {      Switchboard.urlBlacklist.remove(supportedBlacklistType,blacklistToUse,host,path);    }  }  SearchEventCache.cleanupEvents(true);  return null;}  }
class C{  public boolean hasSpaceBefore(){  return pos > 0 && lcText[pos - 1] == ' ';}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  int tmpBase=this.tmpBase;  System.arraycopy(a,base2,tmp,tmpBase,len2);  int cursor1=base1 + len1 - 1;  int cursor2=tmpBase + len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,tmpBase,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);  }}  }
class C{  public void doEncodeSharedObject(ISharedObjectMessage so,RTMP rtmp,IoBuffer out){  final Output output=new org.red5.io.amf.Output(out);  output.putString(so.getName());  out.putInt(so.getVersion());  out.putInt(so.isPersistent() ? 2 : 0);  out.putInt(0);  int mark, len;  for (  ISharedObjectEvent event : so.getEvents()) {    byte type=SharedObjectTypeMapping.toByte(event.getType());switch (event.getType()) {case SERVER_CONNECT:case CLIENT_INITIAL_DATA:case CLIENT_CLEAR_DATA:      out.put(type);    out.putInt(0);  break;case SERVER_DELETE_ATTRIBUTE:case CLIENT_DELETE_DATA:case CLIENT_UPDATE_ATTRIBUTE:out.put(type);mark=out.position();out.skip(4);output.putString(event.getKey());len=out.position() - mark - 4;out.putInt(mark,len);break;case SERVER_SET_ATTRIBUTE:case CLIENT_UPDATE_DATA:if (event.getKey() == null) {Map<?,?> initialData=(Map<?,?>)event.getValue();for (Object o : initialData.keySet()) {out.put(type);mark=out.position();out.skip(4);String key=(String)o;output.putString(key);serializer.serialize(output,initialData.get(key));len=out.position() - mark - 4;out.putInt(mark,len);}} else {out.put(type);mark=out.position();out.skip(4);output.putString(event.getKey());serializer.serialize(output,event.getValue());len=out.position() - mark - 4;out.putInt(mark,len);}break;case CLIENT_SEND_MESSAGE:case SERVER_SEND_MESSAGE:out.put(type);mark=out.position();out.skip(4);serializer.serialize(output,event.getKey());for (Object arg : (List<?>)event.getValue()) {serializer.serialize(output,arg);}len=out.position() - mark - 4;out.putInt(mark,len);break;case CLIENT_STATUS:out.put(type);final String status=event.getKey();final String message=(String)event.getValue();out.putInt(message.length() + status.length() + 4);output.putString(message);output.putString(status);break;default :out.put(type);mark=out.position();out.skip(4);output.putString(event.getKey());serializer.serialize(output,event.getValue());len=out.position() - mark - 4;out.putInt(mark,len);break;}}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void deleteRoutesContainingRemovedLinks(final Population population){  if (linksToRemove == null)   return;  int cnt=0;  for (  Person person : PopulationUtils.getSortedPersons(population).values()) {    boolean isModified=false;    for (    Plan plan : person.getPlans()) {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Leg) {          Leg leg=(Leg)pe;          if (leg.getRoute() != null) {            NetworkRoute nr=(NetworkRoute)leg.getRoute();            Iterator<Id<Link>> linkIterator=linksToRemove.iterator();            boolean setRouteToNull=false;            while (linkIterator.hasNext()) {              Id<Link> linkId=linkIterator.next();              for (              Id id : nr.getLinkIds()) {                if (id.compareTo(linkId) == 0) {                  leg.setRoute(null);                  isModified=true;                  setRouteToNull=true;                  break;                }              }              if (setRouteToNull)               break;            }          }        }      }    }    if (isModified)     cnt++;  }  if (cnt > 0) {    log.info("Reseted " + cnt + " persons plans from a population of "+ population.getPersons().size());    log.info("This was necessary because these plans contain removed links!");  }}  }
class C{  private void drawBarsHorizontal(final GC gc){  final Rectangle clientArea=getClientArea();  if (isEnabled()) {    gc.setForeground(getForeground());  } else {    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  final float pixelSize=computePixelSizeForHorizonalSlider();  for (int i=1; i < 10; i++) {    final int x=(int)(9 + pixelSize * (maximum - minimum) / 10 * i);    gc.drawLine(x,4,x,7);    gc.drawLine(x,clientArea.height - 6,x,clientArea.height - 9);  }}  }
class C{  public V12Statement(FbWireDatabase database){  super(database);}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  @Override public boolean isLast() throws SQLException {  try {    debugCodeCall("isLast");    checkClosed();    int row=result.getRowId();    return row >= 0 && row == result.getRowCount() - 1;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  final public void disable_tracing(){}  }
class C{  private void writeMetaTable(TableEntry entry){  TempBuffer tBuf=TempBuffer.create();  byte[] buffer=tBuf.buffer();  int offset=0;  buffer[offset++]=CODE_TABLE;  offset+=BitsUtil.write(buffer,offset,entry.tableKey());  offset+=BitsUtil.writeInt16(buffer,offset,entry.rowLength());  offset+=BitsUtil.writeInt16(buffer,offset,entry.keyOffset());  offset+=BitsUtil.writeInt16(buffer,offset,entry.keyLength());  byte[] data=entry.data();  offset+=BitsUtil.writeInt16(buffer,offset,data.length);  System.arraycopy(data,0,buffer,offset,data.length);  offset+=data.length;  int crc=_nonce;  crc=Crc32Caucho.generate(crc,buffer,0,offset);  offset+=BitsUtil.writeInt(buffer,offset,crc);  try (OutStore sOut=openWrite(_metaOffset,offset)){    sOut.write(_metaOffset,buffer,0,offset);    _metaOffset+=offset;  }   tBuf.free();  if (_metaTail - _metaOffset < 16) {    writeMetaContinuation();  }}  }
class C{  public DefRootItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static boolean isAssignableValue(Class<?> type,Object value){  Assert.notNull(type,"Type must not be null");  return (value != null ? isAssignable(type,value.getClass()) : !type.isPrimitive());}  }
class C{  private static void copystream(InputStream in,OutputStream out) throws IOException {  byte[] buffer=new byte[1024];  int len;  while ((len=in.read(buffer)) >= 0)   out.write(buffer,0,len);}  }
class C{  private static <S,T>TableColumn<S,T> tableColumn(String colName,String propName,String tip,int minWidth,int maxWidth,boolean editable){  TableColumn<S,T> col=new TableColumn<>();  col.setGraphic(tooltip(new Label(colName),tip));  col.setSortable(false);  if (minWidth > 0)   col.setMinWidth(minWidth);  if (maxWidth > 0)   col.setMaxWidth(maxWidth);  col.setCellValueFactory(new PropertyValueFactory<S,T>(propName));  col.setEditable(editable);  return col;}  }
class C{  @Override public void init(CanvasRenderer canvasRenderer){  canvasRenderer.getRenderer().setBackgroundColor(ColorRGBA.BLACK);  imageSize=ImageUtil.getMaxTextureRendererSize() / 2;  byteBuffer=ByteBuffer.allocateDirect(imageSize * imageSize);  table=ByteBuffer.allocateDirect(lutSize * 4);  table.order(ByteOrder.nativeOrder());  quad=new Quad("quad",imageSize,imageSize);  quad.setModelBound(new BoundingBox());  quad.updateModelBound();  quad.setTranslation(0,0,-1);  quad.setDefaultColor(ColorRGBA.BLACK);  texture=new Texture2D();  texture.setApply(Texture.ApplyMode.Modulate);  texture.setWrap(Texture.WrapMode.EdgeClamp);  texture.setMinificationFilter(Texture.MinificationFilter.NearestNeighborNoMipMaps);  texture.setMagnificationFilter(Texture.MagnificationFilter.NearestNeighbor);  texture.setTextureStoreFormat(TextureStoreFormat.Luminance8);  texture.setTextureKey(TextureKey.getRTTKey(Texture.MinificationFilter.NearestNeighborNoMipMaps));  ArrayList<ByteBuffer> list=new ArrayList<ByteBuffer>(1);  list.add(byteBuffer);  textureImage=new Image(ImageDataFormat.Luminance,PixelDataType.UnsignedByte,imageSize,imageSize,list,null);  texture.setImage(textureImage);  colorTable=new Texture1D();  colorTable.setWrap(Texture.WrapMode.EdgeClamp);  colorTable.setTextureStoreFormat(TextureStoreFormat.RGBA8);  colorTable.setMinificationFilter(Texture.MinificationFilter.NearestNeighborNoMipMaps);  colorTable.setMagnificationFilter(Texture.MagnificationFilter.NearestNeighbor);  colorTable.setTextureKey(TextureKey.getRTTKey(Texture.MinificationFilter.NearestNeighborNoMipMaps));  list=new ArrayList<ByteBuffer>(1);  list.add(table);  colorTableImage=new Image(ImageDataFormat.RGBA,PixelDataType.UnsignedByte,lutSize,1,list,null);  colorTable.setImage(colorTableImage);  textureState=new TextureState();  textureState.setTexture(texture,0);  textureState.setTexture(colorTable,1);  textureState.setEnabled(true);  quad.setRenderState(textureState);  ColorTableEffects colorTableEffects=new ColorTableEffects(0,1);  colorTableEffects.setEnabled(true);  quad.setRenderState(colorTableEffects);  rootNode.attachChild(quad);  rootNode.updateGeometricState(0);}  }
class C{  public Name addAll(List<Rdn> suffixRdns){  return addAll(size(),suffixRdns);}  }
class C{  public String toBase64(String toEncode){  try {    byte[] bytes=toEncode.getBytes();    return new String(Base64.encodeBase64(bytes),Charset.forName("utf-8")).trim();  } catch (  Exception e) {    LOG.error("Error base64 encoding " + toEncode + ": "+ e);  }  return toEncode;}  }
class C{  private byte[] generateInput(int size){  Random random=new Random(285930);  byte[] buff=new byte[size];  random.nextBytes(buff);  return buff;}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_IntLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_IntLiteral_value_feature","_UI_IntLiteral_type"),SGenPackage.Literals.INT_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public final Wizard createWizard(){  if (wizard == null) {    wizard=new BranchingWizard(this);    real=new Wizard(wizard);  }  return real;}  }
class C{  public static void exec(String[] args){  if (args.length < 1) {    System.err.println("Usage: java Benchmark <algorithm file>");    System.exit(1);  }  Path algFile=Paths.get(args[0]);  if (!Files.isReadable(algFile)) {    System.err.println("cannot find/read algorithm file: " + algFile.toAbsolutePath());    System.exit(1);  }  System.out.println("Running algorithm from: " + algFile.toAbsolutePath());  Benchmark benchmark=null;  try {    benchmark=new Benchmark(Files.newBufferedReader(algFile,StandardCharsets.UTF_8));  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }  System.out.println("------------> algorithm:");  System.out.println(benchmark.getAlgorithm().toString());  try {    benchmark.execute();  } catch (  Exception e) {    System.err.println("Error: cannot execute the algorithm! " + e.getMessage());    e.printStackTrace();  }  System.out.println("####################");  System.out.println("###  D O N E !!! ###");  System.out.println("####################");}  }
class C{  public void columnMoved(TableColumnModelEvent e){}  }
class C{  private void handleHtmlCouldNotCreateNote(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleNewNotebook();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("welcome");  pageWrapper.addHeader();  requestAndResponse.print(servletText.errorNoteNotCreated());  pageWrapper.addFooter();}  }
class C{  public static void putAt(StringBuilder self,IntRange range,Object value){  RangeInfo info=subListBorders(self.length(),range);  self.replace(info.from,info.to,value.toString());}  }
class C{  public static int hash(int aSeed,double aDouble){  return hash(aSeed,Double.doubleToLongBits(aDouble));}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  Object readObject() throws IOException {  int ch=read();switch (ch) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:    return readString(ch - 0x00);case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:  return readBinary(ch - 0x20);case 0x30:case 0x31:case 0x32:case 0x33:return readString(((ch - 0x30) << 8) + read());case 0x34:case 0x35:case 0x36:case 0x37:return readBinary(((ch - 0x34) << 8) + read());case 0x3c:case 0x3d:case 0x3e:case 0x3f:return new Long(((ch - 0x3c) << 16) + (read() << 8) + read());case 0x41:_peek=ch;return readBinary();case 0x42:{int len=readShort();return readBinary(len);}case 0x43:scanObjectDef();return readObject();case 0x44:{long value=readLong();return Double.longBitsToDouble(value);}case 'E':throw new UnsupportedOperationException("Invalid Hessian 'E' error code.");case 0x46:return Boolean.FALSE;case 0x47:{int type=scanInt();return readObject();}case 0x48:{HashMap<Object,Object> map=new HashMap<>();while ((ch=read()) != 'Z') {_peek=ch;map.put(readObject(),readObject());}return map;}case 0x49:{int value=readInt32();return new Integer(value);}case 0x4a:return new Date(readLong());case 0x4b:return new Date(readInt32() * 1000L);case 0x4c:{long value=readLong();return new Long(value);}case 0x4d:{HashMap<Object,Object> map=new HashMap<>();readType();while ((ch=read()) != 'Z') {_peek=ch;map.put(readObject(),readObject());}return map;}case 0x4e:return null;case 0x4f:{int type=scanInt();String[] def=_classDefs.get(type);int len=def.length - 1;HashMap<Object,Object> map=new HashMap<>();for (int i=0; i < len; i++) {map.put(def[i],readObject());}return map;}case 0x50:{String type=readType();return readObject();}case 0x51:{int ref=readInt32();return null;}case 0x52:{int len=readShort();StringBuilder sb=new StringBuilder();readString(sb,len);readString(sb);return sb.toString();}case 0x53:{int len=readShort();return readString(len);}case 0x54:return Boolean.TRUE;case 0x55:{ArrayList<Object> list=new ArrayList<>();readType();while ((ch=read()) != 'Z') {_peek=ch;list.add(readObject());}return list;}case 0x56:{ArrayList<Object> list=new ArrayList<>();readType();int len=scanInt();for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x57:{ArrayList<Object> list=new ArrayList<>();while ((ch=read()) != 'Z') {_peek=ch;list.add(readObject());}return list;}case 0x58:{ArrayList<Object> list=new ArrayList<>();int len=scanInt();for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x59:{long value=readInt32();return new Long(value);}case 0x5b:return DOUBLE_ZERO;case 0x5c:return DOUBLE_ONE;case 0x5d:return new Double((byte)read());case 0x5e:return new Double((short)readShort());case 0x5f:return new Double(readInt32() * 0.001);case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int type=ch - 0x60;String[] def=_classDefs.get(type);int len=def.length - 1;HashMap<Object,Object> map=new HashMap<>();for (int i=0; i < len; i++) {map.put(def[i],readObject());}return map;}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:{ArrayList<Object> list=new ArrayList<>();readType();int len=ch - 0x70;for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:{ArrayList<Object> list=new ArrayList<>();int len=ch - 0x78;for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:return new Integer(ch - 0x90);case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:return new Integer(((ch - 0xc8) << 8) + read());case 0xd0:case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:return new Integer(((ch - 0xd4) << 16) + (read() << 8) + read());case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:return new Long(ch - 0xe0);case 0xf0:case 0xf1:case 0xf2:case 0xf3:case 0xf4:case 0xf5:case 0xf6:case 0xf7:case 0xf8:case 0xf9:case 0xfa:case 0xfb:case 0xfc:case 0xfd:case 0xfe:case 0xff:return new Long(((ch - 0xf8) << 8) + read());default :throw new UnsupportedOperationException("0x" + Integer.toHexString(ch));}}  }
class C{  @Override public void run(){  amIActive=true;  String dataImageHeader=null;  String featureImageHeader=null;  String outputHeader=null;  WhiteboxRasterInfo dataImage;  WhiteboxRasterInfo featureImage;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  String statType=null;  boolean textOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      dataImageHeader=args[i];    } else     if (i == 1) {      featureImageHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      statType=args[i].toLowerCase();    } else     if (i == 4) {      textOutput=Boolean.parseBoolean(args[i]);    }  }  if ((dataImageHeader == null) || (featureImageHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dataImage=new WhiteboxRasterInfo(dataImageHeader);    rows=dataImage.getNumberRows();    cols=dataImage.getNumberColumns();    double noData=dataImage.getNoDataValue();    featureImage=new WhiteboxRasterInfo(featureImageHeader);    if (featureImage.getNumberColumns() != cols || featureImage.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions (i.e. rows and columns).");      return;    }    double featureNoData=featureImage.getNoDataValue();    String featureImageShortName=featureImage.getShortHeaderFile();    String dataImageShortName=dataImage.getShortHeaderFile();    int numFeatures=0;    double[] featureData;    double[] data;    int minFeatureID=99999999;    int maxFeatureID=-99999999;    for (row=0; row < rows; row++) {      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          if (Math.rint(featureData[col]) != featureData[col]) {            showFeedback("The feature definition image should " + "contain integer values only.");            return;          }          if ((int)featureData[col] < minFeatureID) {            minFeatureID=(int)featureData[col];          }          if ((int)featureData[col] > maxFeatureID) {            maxFeatureID=(int)featureData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    numFeatures=maxFeatureID - minFeatureID + 1;    double[] featureTotal=new double[numFeatures];    long[] featureN=new long[numFeatures];    double[] featureAverage=new double[numFeatures];    double[] featureTotalDeviation=new double[numFeatures];    double[] featureStdDeviation=new double[numFeatures];    double[] featureMins=new double[numFeatures];    double[] featureMaxs=new double[numFeatures];    boolean[] featurePresent=new boolean[numFeatures];    for (i=0; i < numFeatures; i++) {      featureMins[i]=99999999;      featureMaxs[i]=-99999999;    }    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          i=(int)(featureData[col] - minFeatureID);          featurePresent[i]=true;          if (data[col] != noData) {            featureTotal[i]+=data[col];            featureN[i]++;            if (data[col] < featureMins[i]) {              featureMins[i]=data[col];            }            if (data[col] > featureMaxs[i]) {              featureMaxs[i]=data[col];            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureAverage[i]=featureTotal[i] / featureN[i];      }    }    updateProgress("Loop 2 of 2:",(int)progress);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData && data[col] != noData) {          i=(int)(featureData[col] - minFeatureID);          featureTotalDeviation[i]+=(data[col] - featureAverage[i]) * (data[col] - featureAverage[i]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureStdDeviation[i]=Math.sqrt(featureTotalDeviation[i] / (featureN[i] - 1));      }    }    dataImage.close();    if (!outputHeader.toLowerCase().equals("not specified")) {      output=new WhiteboxRaster(outputHeader,"rw",dataImageHeader,WhiteboxRaster.DataType.FLOAT,noData);      output.setPreferredPalette(dataImage.getPreferredPalette());      output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      updateProgress("Outputing image data:",(int)progress);      if (statType.equals("average")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureAverage[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("minimum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("maximum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("range")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i] - featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("standard deviation")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureStdDeviation[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("total")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureTotal[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();      returnData(outputHeader);    }    if (textOutput) {      DecimalFormat df;      df=new DecimalFormat("0.000");      String retstr=null;      retstr="EXTRACT STATISTICS\n\n";      retstr+="Data Image:\t" + dataImageShortName + "\n";      retstr+="Feature Image:\t" + featureImageShortName + "\n";      retstr+="NoData Value:\t" + noData + "\n";      retstr+="Output Stat:\t" + statType + "\n\n";      retstr+="ID\t" + "Value" + "\n";      if (statType.equals("average")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureAverage[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("minimum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMins[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("maximum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMaxs[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("range")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format((featureMaxs[i] - featureMins[i]))+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("standard deviation")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureStdDeviation[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("total")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureTotal[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      returnData(retstr);    }    featureImage.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String filter(String urlString) throws URLFilterException {  for (int i=0; i < this.filters.length; i++) {    if (urlString == null)     return null;    urlString=this.filters[i].filter(urlString);  }  return urlString;}  }
class C{  public final Timestamp addDay(int amount){  long delta=(long)amount * 24 * 60* 60* 1000;  return addMillis(delta);}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public synchronized void returnHome(Agent agent) throws RemoteException {  Enumeration info=null;  boolean bErrorsOccurred=false;  info=agent.getInfo().elements();  System.out.println("Collected information:");  while (info.hasMoreElements()) {    System.out.println("     " + (String)info.nextElement());  }  System.out.println("\nErrors:");  System.out.println(agent.getErrors());  if (!(agent.getErrors()).equals(""))   bErrorsOccurred=true;  if (bErrorsOccurred) {    System.err.println("DTI_Error");    System.err.println("DTI_DoneExecuting");  } else {    System.err.println("DTI_DoneExecuting");  }}  }
class C{  public NSIDOption(byte[] data){  super(EDNSOption.Code.NSID,data);}  }
class C{  public JSearchPanel(Visualization vis,String group,String field,boolean autoIndex){  this(vis,group,Visualization.SEARCH_ITEMS,new String[]{field},autoIndex,false);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <T>Seq<T> newSeq(){  return new SeqImpl<>();}  }
class C{  protected void finishAnalysis(String treePath){}  }
class C{  public ModifyMonitoredItemsRequest clone(){  ModifyMonitoredItemsRequest result=new ModifyMonitoredItemsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.TimestampsToReturn=TimestampsToReturn;  if (ItemsToModify != null) {    result.ItemsToModify=new MonitoredItemModifyRequest[ItemsToModify.length];    for (int i=0; i < ItemsToModify.length; i++)     result.ItemsToModify[i]=ItemsToModify[i].clone();  }  return result;}  }
class C{  public boolean isWild(){  if (labels() == 0)   return false;  return (name[0] == (byte)1 && name[1] == (byte)'*');}  }
class C{  public static int substituteSystemValues(Properties props,int iterations){  int substitutions=0;  for (int i=0; i < iterations; i++) {    int count=substituteSystemValues(props);    if (count == 0)     break; else     substitutions+=count;  }  return substitutions;}  }
class C{  private boolean isAtMaximum(Adjustable bar){  return (bar.getValue() + bar.getVisibleAmount() >= bar.getMaximum());}  }
class C{  public static void sendSLORequestsToOtherParticipants(String tenant,LogoutState logoutState) throws IOException {  log.info("Sending SAML logout response to other participants.");  Locale locale=logoutState.getLocale();  HttpServletResponse response=logoutState.getResponse();  Validate.notNull(response);  Collection<String> samlRequestUrls=logoutState.generateRequestUrlsForTenant(tenant,logoutState.getMessageSource(),locale);  if (samlRequestUrls == null)   return;  for (  String requestUrl : samlRequestUrls) {    log.info("SAML Redirect URL is " + requestUrl);    if (requestUrl != null) {      Throwable exception=null;      try {        sendSLORequestToOtherParticipant(requestUrl);      } catch (      URISyntaxException e) {        exception=e;      }catch (      IOException e) {        exception=e;      }catch (      KeyManagementException e) {        exception=e;      }catch (      NoSuchAlgorithmException e) {        exception=e;      }catch (      KeyStoreException e) {        exception=e;      }      if (exception != null) {        log.error("exception in sending out single log out request to participent. Request string: " + requestUrl,exception);      }    } else {      SamlServiceImpl.sendLogoutError(locale,response,logoutState,logoutState.getMessageSource());    }  }}  }
class C{  private static SearchResultGroup extractGroupFor(ICompilationUnit cu,List<SearchResultGroup> searchResultGroups){  for (Iterator<SearchResultGroup> iter=searchResultGroups.iterator(); iter.hasNext(); ) {    SearchResultGroup group=iter.next();    if (cu.equals(group.getCompilationUnit())) {      iter.remove();      return group;    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType04.class,args);}  }
class C{  public CapabilityFilter(List<String> capabilities){  addCapabilities(capabilities);}  }
class C{  public static boolean isSegmentFile(String name,File file){  Assert.notNull(name,"name");  Assert.notNull(file,"file");  String fileName=file.getName();  if (fileName.lastIndexOf(EXTENSION_SEPARATOR) == -1 || fileName.lastIndexOf(PART_SEPARATOR) == -1 || fileName.lastIndexOf(EXTENSION_SEPARATOR) < fileName.lastIndexOf(PART_SEPARATOR) || !fileName.endsWith(EXTENSION))   return false;  for (int i=fileName.lastIndexOf(PART_SEPARATOR) + 1; i < fileName.lastIndexOf(EXTENSION_SEPARATOR); i++) {    if (!Character.isDigit(fileName.charAt(i))) {      return false;    }  }  if (fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1) == -1)   return false;  for (int i=fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1) + 1; i < fileName.lastIndexOf(PART_SEPARATOR); i++) {    if (!Character.isDigit(fileName.charAt(i))) {      return false;    }  }  return fileName.substring(0,fileName.lastIndexOf(PART_SEPARATOR,fileName.lastIndexOf(PART_SEPARATOR) - 1)).equals(name);}  }
class C{  public Factory buildEncoded(Reader json) throws IOException, ApiException {  Factory factory=DtoFactory.getInstance().createDtoFromJson(json,Factory.class);  checkValid(factory);  return factory;}  }
class C{  private boolean inQuotes(boolean inQuotes){  return (inQuotes && !ignoreQuotations) || inField;}  }
class C{  protected void logRequest(final WebRequest request){  if (request != null) {    final Map<String,String> headers=new HashMap<java.lang.String,java.lang.String>();    for (Iterator<String> it=request.getHeaderNames(); it.hasNext(); ) {      final String headerName=it.next();      headers.put(headerName,ArrayUtils.toString((Object[])request.getHeaderValues(headerName)));    }    final Map<String,String> parameters=new HashMap<String,String>(request.getParameterMap().size());    for (Iterator<String> it=request.getParameterNames(); it.hasNext(); ) {      final String parameterName=it.next();      parameters.put(parameterName,ArrayUtils.toString((Object[])request.getParameterValues(parameterName)));    }    logger.info("HTTP-request: description ({}), context ({}), headers ({}), parameters ({})",request.getDescription(false),request.getContextPath(),headers,parameters);  }}  }
class C{  public void testTTFBlockSize() throws Exception {  Document doc=newDocument();  for (int i=0; i < Lucene50PostingsFormat.BLOCK_SIZE / 2; i++) {    for (    IndexableField f : doc.getFields()) {      ((Field)f).setStringValue(f.name() + " " + f.name()+ " "+ f.name()+ "_2 "+ f.name()+ "_2");    }    iw.addDocument(doc);  }}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public Osyczka(){  super(2,2,2);}  }
class C{  public void addSample(int weight,float value){  ensureSortedByIndex();  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();  newSample.index=nextSampleIndex++;  newSample.weight=weight;  newSample.value=value;  samples.add(newSample);  totalWeight+=weight;  while (totalWeight > maxWeight) {    int excessWeight=totalWeight - maxWeight;    Sample oldestSample=samples.get(0);    if (oldestSample.weight <= excessWeight) {      totalWeight-=oldestSample.weight;      samples.remove(0);      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {        recycledSamples[recycledSampleCount++]=oldestSample;      }    } else {      oldestSample.weight-=excessWeight;      totalWeight-=excessWeight;    }  }}  }
class C{  public static RegisterSpecList make(RegisterSpec spec0,RegisterSpec spec1){  RegisterSpecList result=new RegisterSpecList(2);  result.set(0,spec0);  result.set(1,spec1);  return result;}  }
class C{  @Override public void onDrawerOpened(View drawerView){}  }
class C{  public CertBlacklist(String pubkeyBlacklistPath,String serialBlacklistPath){  serialBlacklist=readSerialBlackList(serialBlacklistPath);  pubkeyBlacklist=readPublicKeyBlackList(pubkeyBlacklistPath);}  }
class C{  public OrdinalStatisticalTest(int numberOfGroups){  this(numberOfGroups,new ObservationComparator());}  }
class C{  public static boolean lineContainsPoint(double x1,double y1,double x2,double y2,double px,double py,double tolerance){  Rectangle2D.Double r=new Rectangle2D.Double(x1,y1,0,0);  r.add(x2,y2);  double grow=max(2,(int)ceil(tolerance));  r.x-=grow;  r.y-=grow;  r.width+=grow * 2;  r.height+=grow * 2;  if (!r.contains(px,py)) {    return false;  }  double a, b, x, y;  if (x1 == x2) {    return (abs(px - x1) <= tolerance);  }  if (y1 == y2) {    return (abs(py - y1) <= tolerance);  }  a=(double)(y1 - y2) / (double)(x1 - x2);  b=(double)y1 - a * (double)x1;  x=(py - b) / a;  y=a * px + b;  return (min(abs(x - px),abs(y - py)) <= tolerance);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF:    return typeRef != null;}return super.eIsSet(featureID);}  }
class C{  private void convert(final String tmxFile) throws Exception {  final File file=new File(tmxFile);  final String filename=file.getAbsolutePath();  final Map map=new TMXMapReader().readMap(filename);  addNewTilesets(map);  translateMap(map);  removeUnusedTilesets(map);  new TMXMapWriter().writeMap(map,filename);}  }
class C{  static long computeBitPattern(int k,long n){  return n / (2L * k);}  }
class C{  public static byte[] stringToHash(String s){  if (s.length() % 2 != 0) {    throw new IllegalArgumentException("Invalid hash string: " + s);  }  byte[] hash=new byte[s.length() / 2];  for (int i=0; i < s.length(); i+=2) {    byte b=(byte)((hexDigitValue(s.charAt(i)) << 4) + hexDigitValue(s.charAt(i + 1)));    hash[i / 2]=b;  }  return hash;}  }
class C{  public final int intValue(){  return value;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.RANGE_CONSTRAINT__LOWER_BOUND:    setLowerBound((Long)newValue);  return;case TypesPackage.RANGE_CONSTRAINT__UPPER_BOUND:setUpperBound((Long)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DelegatingGetterDeclaration createDelegatingGetterDeclaration(){  DelegatingGetterDeclarationImpl delegatingGetterDeclaration=new DelegatingGetterDeclarationImpl();  return delegatingGetterDeclaration;}  }
class C{  public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  throw new IllegalStateException("unwrap: QOP has neither integrity nor privacy>");}  }
class C{  public synchronized void startCore(){  if (mStarted) {    return;  }  mImsModule.start();  mAddressBookManager.start();  mLocaleManager.start();  mListener.onCoreLayerStarted();  mStarted=true;  if (sLogger.isActivated()) {    sLogger.info("RCS core service has been started with success");  }}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public void testCreationAmbiguous(){  Instances data;  ArrayList<Attribute> atts;  String relName;  relName="testCreationAmbiguous";  atts=new ArrayList<Attribute>();  atts.add(new Attribute("att-numeric_1"));  atts.add(new Attribute("att-numeric_1"));  atts.add(new Attribute("att-data_1","yyyy-MM-dd HH:mm"));  atts.add(new Attribute("att-nominal_1",new ArrayList<String>(Arrays.asList(new String[]{"1","2","3"}))));  atts.add(new Attribute("att-nominal_1",new ArrayList<String>(Arrays.asList(new String[]{"yes","no"}))));  atts.add(new Attribute("att-string_1",(ArrayList<String>)null));  try {    data=new Instances(relName,atts,0);  } catch (  IllegalArgumentException e) {    data=null;  }  assertNull("dataset created with ambiguous attribute names",data);}  }
class C{  public void testBooleanProtocolValues(){  assertEquals((MainActivity.LOCAL_ACQUISITION) & (!MainActivity.TCP_ACQUISITION) & (!MainActivity.UDP_ACQUISITION),true);}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(StartupSettings.RUN_ON_STARTUP.getValue());}  }
class C{  private void recordTenantEvent(OperationTypeEnum opType,URI tenantId,URI targetId){  String type=opType.getEvType(true);  String description=opType.getDescription();  RecordableBourneEvent event=new RecordableBourneEvent(type,tenantId,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,targetId,description,System.currentTimeMillis(),"",null,RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    if (ex instanceof RuntimeException) {      _log.error("Failed to record event. Event description: " + description + ". Error: .",ex);    } else {      _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);    }  }  _log.info("opType: {} detail: {}",opType.toString(),type + ':' + description);}  }
class C{  public void testDefaults() throws Exception {  CommonGramsQueryFilterFactory factory=(CommonGramsQueryFilterFactory)tokenFilterFactory("CommonGramsQuery");  CharArraySet words=factory.getCommonWords();  assertTrue("words is null and it shouldn't be",words != null);  assertTrue(words.contains("the"));  Tokenizer tokenizer=whitespaceMockTokenizer("testing the factory");  TokenStream stream=factory.create(tokenizer);  assertTokenStreamContents(stream,new String[]{"testing_the","the_factory"});}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystem(URI storageSystemId){  return getList(PathConstants.STORAGE_PORT_BY_STORAGE_SYSTEM_URL,storageSystemId);}  }
class C{  @OnError public void onError(final Session session,final Throwable error){  removeSession(session);}  }
class C{  public void configure(){  XNetTrafficController packets=new XNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  private static Object[] convertThrowableMessages(final Object[] args){  if (args != null) {    for (int i=0; i < args.length; i++) {      if (args[i] instanceof Throwable) {        Throwable t=(Throwable)args[i];        if (t.getMessage() != null) {          args[i]=t.getMessage();        }      }    }  }  return args;}  }
class C{  public Quaternionf rotationY(float angle){  float cos=(float)Math.cos(angle * 0.5);  float sin=(float)Math.sin(angle * 0.5);  w=cos;  x=0.0f;  y=sin;  z=0.0f;  return this;}  }
class C{  protected Exponential(){}  }
class C{  public void register(String source){  systemProducer.register(source);}  }
class C{  private void initDictionaryChunkSize(){  try {    dictionary_one_chunk_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DICTIONARY_ONE_CHUNK_SIZE,CarbonCommonConstants.DICTIONARY_ONE_CHUNK_SIZE_DEFAULT));  } catch (  NumberFormatException e) {    dictionary_one_chunk_size=Integer.parseInt(CarbonCommonConstants.DICTIONARY_ONE_CHUNK_SIZE_DEFAULT);    LOGGER.error("Dictionary chunk size not configured properly. Taking default size " + dictionary_one_chunk_size);  }}  }
class C{  public byte[] GETbytes(final String uri,final String username,final String pass,final int maxBytes,final boolean concurrent) throws IOException {  return GETbytes(new MultiProtocolURL(uri),username,pass,maxBytes,concurrent);}  }
class C{  public int cacheReset(String tableName,int Record_ID){  log.config(tableName + " - " + Record_ID);  m_cacheResetCount++;  return CacheMgt.get().reset(tableName,Record_ID);}  }
class C{  public SyncError(SyncError other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public boolean hasShares(){  return getShares() != null;}  }
class C{  public static <T>T withObjectInputStream(Path self,ClassLoader classLoader,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectInputStream(self,classLoader),closure);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AFTER_EVENT___TIMER_1:    return getTimer_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static int roll1D6(){  return rand.nextInt(6) + 1;}  }
class C{  public void assign(TestInstances t){  setRelation(t.getRelation());  setSeed(t.getSeed());  setNumInstances(t.getNumInstances());  setClassType(t.getClassType());  setNumClasses(t.getNumClasses());  setClassIndex(t.getClassIndex());  setNumNominal(t.getNumNominal());  setNumNominalValues(t.getNumNominalValues());  setNumNumeric(t.getNumNumeric());  setNumString(t.getNumString());  setNumDate(t.getNumDate());  setNumRelational(t.getNumRelational());  setNumRelationalNominal(t.getNumRelationalNominal());  setNumRelationalNominalValues(t.getNumRelationalNominalValues());  setNumRelationalNumeric(t.getNumRelationalNumeric());  setNumRelationalString(t.getNumRelationalString());  setNumRelationalDate(t.getNumRelationalDate());  setMultiInstance(t.getMultiInstance());  for (int i=0; i < t.getNumRelational(); i++) {    setRelationalFormat(i,t.getRelationalFormat(i));  }  setRelationalClassFormat(t.getRelationalClassFormat());  setNumInstancesRelational(t.getNumInstancesRelational());  setWords(t.getWords());  setWordSeparators(t.getWordSeparators());}  }
class C{  public tbody addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected PrinterStateReason(int value){  super(value);}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  if (getDescendantPopulationSize() < getPopulationSize()) {    throw new Exception("Descendant PopulationSize should be at least Population Size");  }  if (!getUseCrossOver() && !getUseMutation()) {    throw new Exception("At least one of mutation or cross-over should be used");  }  m_random=new Random(m_nSeed);  BayesNet bestBayesNet;  double fBestScore=0.0;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    fBestScore+=calcNodeScore(iAttribute);  }  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  BayesNetRepresentation[] population=new BayesNetRepresentation[getPopulationSize()];  for (int i=0; i < getPopulationSize(); i++) {    population[i]=new BayesNetRepresentation(instances.numAttributes());    population[i].randomInit();    if (population[i].getScore() > fBestScore) {      copyParentSets(bestBayesNet,bayesNet);      fBestScore=population[i].getScore();    }  }  for (int iRun=0; iRun < m_nRuns; iRun++) {    BayesNetRepresentation[] descendantPopulation=new BayesNetRepresentation[getDescendantPopulationSize()];    for (int i=0; i < getDescendantPopulationSize(); i++) {      descendantPopulation[i]=population[m_random.nextInt(getPopulationSize())].copy();      if (getUseMutation()) {        if (getUseCrossOver() && m_random.nextBoolean()) {          descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);        } else {          descendantPopulation[i].mutate();        }      } else {        descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);      }      if (descendantPopulation[i].getScore() > fBestScore) {        copyParentSets(bestBayesNet,bayesNet);        fBestScore=descendantPopulation[i].getScore();      }    }    boolean[] bSelected=new boolean[getDescendantPopulationSize()];    for (int i=0; i < getPopulationSize(); i++) {      int iSelected=0;      if (m_bUseTournamentSelection) {        iSelected=m_random.nextInt(getDescendantPopulationSize());        while (bSelected[iSelected]) {          iSelected=(iSelected + 1) % getDescendantPopulationSize();        }        int iSelected2=m_random.nextInt(getDescendantPopulationSize());        while (bSelected[iSelected2]) {          iSelected2=(iSelected2 + 1) % getDescendantPopulationSize();        }        if (descendantPopulation[iSelected2].getScore() > descendantPopulation[iSelected].getScore()) {          iSelected=iSelected2;        }      } else {        while (bSelected[iSelected]) {          iSelected++;        }        double fScore=descendantPopulation[iSelected].getScore();        for (int j=0; j < getDescendantPopulationSize(); j++) {          if (!bSelected[j] && descendantPopulation[j].getScore() > fScore) {            fScore=descendantPopulation[j].getScore();            iSelected=j;          }        }      }      population[i]=descendantPopulation[iSelected];      bSelected[iSelected]=true;    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;}  }
class C{  @Override public Value sample(){  Value v=(function.getDimensions() > 1) ? ValueFactory.create(function.sample()) : ValueFactory.create(function.sample()[0]);  return v;}  }
class C{  public static void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  private JsonNode mergeTranslations(JsonNode original,JsonNode overlay){  if (!overlay.isObject() || original == null)   return overlay;  ObjectNode newNode=JsonNodeFactory.instance.objectNode();  Iterator<String> fieldNames=original.getFieldNames();  while (fieldNames.hasNext()) {    String fieldName=fieldNames.next();    newNode.put(fieldName,original.get(fieldName));  }  fieldNames=overlay.getFieldNames();  while (fieldNames.hasNext()) {    String fieldName=fieldNames.next();    newNode.put(fieldName,mergeTranslations(original.get(fieldName),overlay.get(fieldName)));  }  return newNode;}  }
class C{  protected void assertOffHeapMetrics(long freeMemory,long allocatedMemory,long objects,int fragmentation){  ManagementService service=ManagementService.getExistingManagementService(getCache());  assertNotNull(service);  assertTrue(service.isManager());  MemberMXBean memberBean=service.getMemberMXBean();  assertNotNull(memberBean);  assertEquals(freeMemory,memberBean.getOffHeapFreeMemory());  assertEquals(allocatedMemory,memberBean.getOffHeapUsedMemory());  assertEquals(objects,memberBean.getOffHeapObjects());  assertEquals(fragmentation,memberBean.getOffHeapFragmentation());}  }
class C{  public static boolean leftOfTheLine(double x0,double y0,double x1,double y1,double x2,double y2){  return pointPosition(x0,y0,x1,y1,x2,y2) > 0;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    return -1;  }  if (this.off == this.len) {    if (!nextBlock()) {      return -1;    }  }  final int n=Math.min(this.len,len);  System.arraycopy(this.b,this.off,b,off,n);  this.off+=n;  return n;}  }
class C{  public CRightTitleComponent(final String string){  Preconditions.checkNotNull(string,"IE01819: String argument can not be null");  m_string=string;}  }
class C{  private Generator(boolean full,File buildDir,String packageNamePrefix,String lafName,SynthModel model){  this.full=full;  if (packageNamePrefix == null) {    throw new IllegalArgumentException("You must specify a package name prefix");  }  if (buildDir == null) {    throw new IllegalArgumentException("You must specify the build directory");  }  if (model == null) {    throw new IllegalArgumentException("You must specify the SynthModel");  }  if (lafName == null) {    throw new IllegalArgumentException("You must specify the name of the look and feel");  }  variables=new HashMap<String,String>();  variables.put("PACKAGE",packageNamePrefix);  variables.put("LAF_NAME",lafName);  buildPackageRoot=new File(buildDir,packageNamePrefix.replaceAll("\\.","\\/"));  buildPackageRoot.mkdirs();  this.packageNamePrefix=packageNamePrefix;  this.lafName=lafName;  this.model=model;}  }
class C{  public void open() throws ModbusException {  if (!isRunning) {    try {      new Thread(listener).start();      isRunning=true;    } catch (    Exception x) {      if (listener != null) {        listener.stop();      }      throw new ModbusException(x.getMessage());    }  }}  }
class C{  @Override public void removeEntityAtIndex(@Nonnull Entity entity,int cubeY){  getCube(cubeY).removeEntity(entity);}  }
class C{  private String scrubPath(String fsPath){  if (fsPath.charAt(0) == '/') {    return fsPath.substring(1);  }  return fsPath;}  }
class C{  public void trainModels(){  System.out.println("Using default training data: " + rm.getString("trainingAndDevData"));  trainModels(rm.getString("trainingAndDevData"));}  }
class C{  public static byte[] toSimpleByteArray(char[] carr){  byte[] barr=new byte[carr.length];  for (int i=0; i < carr.length; i++) {    barr[i]=(byte)carr[i];  }  return barr;}  }
class C{  public AttachTodoExample(AttachTodoObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getTodoId() != null) {    criteria.andTodoIdEqualTo(sample.getTodoId());  }}  }
class C{  public static IntsRef toUTF16(CharSequence s,IntsRefBuilder scratch){  final int charLimit=s.length();  scratch.setLength(charLimit);  scratch.grow(charLimit);  for (int idx=0; idx < charLimit; idx++) {    scratch.setIntAt(idx,(int)s.charAt(idx));  }  return scratch.get();}  }
class C{  public void clearChatNotifications(){  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(this);  notificationManager.cancel(AppConstants.MESSAGE_NOTIFICATION_ID);}  }
class C{  public void testZeroZero(){  String numA="0";  String numB="0";  String res="0";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public AbstractToolBar(){  initComponents();  try {    prefs=PreferencesUtil.userNodeForPackage(getClass());  } catch (  SecurityException e) {  }}  }
class C{  public void clearMetaInfo(FacesContext context,UIComponent table){  context.getAttributes().remove(createKey(table));}  }
class C{  public static BinaryAttribute load(DataInputStream in,BinaryConstantPool cpool,int mask) throws IOException {  BinaryAttribute atts=null;  int natt=in.readUnsignedShort();  for (int i=0; i < natt; i++) {    Identifier id=cpool.getIdentifier(in.readUnsignedShort());    int len=in.readInt();    if (id.equals(idCode) && ((mask & ATT_CODE) == 0)) {      in.skipBytes(len);    } else {      byte data[]=new byte[len];      in.readFully(data);      atts=new BinaryAttribute(id,data,atts);    }  }  return atts;}  }
class C{  private RenderingOp renderFont(java.awt.geom.Rectangle2D.Float clipRect,float alphaFactor,Color fgColor,MetaFont currFont,String currText,MetaFont.GlyphVector gvec,float transX,float transY){  return new RenderingOp(new SageRenderer.TextDescription(currFont,gvec,currText),fgColor,alphaFactor,clipRect,transX,transY);}  }
class C{  public SignerInfo(DerInputStream derin) throws IOException, ParsingException {  this(derin,false);}  }
class C{  public boolean left(){  if (mColumn == 0) {    mRow--;    mColumn=6;  } else {    mColumn--;  }  if (isWithinCurrentMonth(mRow,mColumn)) {    return false;  }  previousMonth();  int lastDay=getNumberOfDaysInMonth();  mRow=getRowOf(lastDay);  mColumn=getColumnOf(lastDay);  return true;}  }
class C{  public dt addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(deviceAddress);  dest.writeParcelable(wps,flags);  dest.writeInt(groupOwnerIntent);  dest.writeInt(netId);}  }
class C{  public void put(CtClass oldname,CtClass newname){  put(oldname.getName(),newname.getName());}  }
class C{  public static NbtTag readTag(InputStream in,NbtLimiter limiter) throws IOException {  try (NbtInputStream nbtIS=new NbtInputStream(new NbtInputLimitedStream(in,limiter))){    return nbtIS.readTag(limiter);  } }  }
class C{  public ShutdownPaneItem(){  super(TITLE,LABEL);  BoxPanel buttonPanel=new BoxPanel();  String immediateLabel=I18n.tr("Shutdown Immediately");  String minimizeLabel=I18n.tr("Minimize to System Tray");  shutdownImmediately=new JRadioButton(I18n.tr(immediateLabel));  minimizeToTray=new JRadioButton(I18n.tr(minimizeLabel));  String showHideExitDialogLabel=I18n.tr("Show dialog to ask before close");  _checkBoxShowHideExitDialog=new JCheckBox(showHideExitDialogLabel);  ButtonGroup bg=new ButtonGroup();  buttonPanel.add(shutdownImmediately);  bg.add(shutdownImmediately);  if (OSUtils.supportsTray() && ResourceManager.instance().isTrayIconAvailable()) {    buttonPanel.add(minimizeToTray);    bg.add(minimizeToTray);  }  BoxPanel mainPanel=new BoxPanel(BoxPanel.X_AXIS);  mainPanel.add(buttonPanel);  mainPanel.add(Box.createHorizontalGlue());  mainPanel.add(_checkBoxShowHideExitDialog);  mainPanel.add(Box.createHorizontalGlue());  add(mainPanel);}  }
class C{  static byte[] hexToBytes(String hex){  if (hex == null) {    return EMPTY_BYTES;  }  hex=hex.replaceAll("\\s+","");  if (hex.length() == 0) {    return EMPTY_BYTES;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream(hex.length() / 2);  byte b;  for (int i=0; i < hex.length(); i++) {    int high=charToNibble(hex.charAt(i));    int low=0;    if (i < hex.length() - 1) {      i++;      low=charToNibble(hex.charAt(i));    }    b=(byte)(high << 4 | low);    baos.write(b);  }  return baos.toByteArray();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1642) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void write(int c){synchronized (lock) {    int newcount=count + 1;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    buf[count]=(char)c;    count=newcount;  }}  }
class C{  public static String concatenateName(String name1,String name2){  StringBuffer buf=new StringBuffer();  if (name1 != null && name1.length() > 0) {    buf.append(name1);  }  if (name2 != null && name2.length() > 0) {    if (buf.length() > 0) {      buf.append('.');    }    buf.append(name2);  }  return buf.toString();}  }
class C{  public static String[] concat(String[] a,String[] b){  String[] result=new String[a.length + b.length];  System.arraycopy(a,0,result,0,a.length);  System.arraycopy(b,0,result,a.length,b.length);  return result;}  }
class C{  public File createReportFile(String extension){  if (Util.isEmpty(extension)) {    throw new IllegalArgumentException("Parameter extension cannot be empty");  }  String name=new SimpleDateFormat("yyyyMMddhhmm").format(new Timestamp(System.currentTimeMillis())) + "_" + Util.stripDiacritics(getName().trim());  File file=null;  try {    file=new File(System.getProperty("java.io.tmpdir"),name + "." + extension);    file.createNewFile();    return file;  } catch (  Exception e) {    file=null;  }  String filePrefix="Alert_";  try {    file=File.createTempFile(filePrefix,"." + extension);  } catch (  IOException e) {    throw new AdempiereException(e);  }  return file;}  }
class C{  public q removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public RegionFactory<K,V> initCacheListeners(CacheListener<K,V>[] newListeners){  this.attrsFactory.initCacheListeners(newListeners);  return this;}  }
class C{  public String put(String key,String value){  if (super.containsKey(key)) {    Config.logger.warning("Parameter [" + key + "] duplicated on the command line");    return null;  } else {    return super.put(key,value);  }}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  @RequestMapping(value="/fe/taxreceipts/manual/donate") public ResponseEntity<String> manualDonate(@RequestParam(value="cnpj") String cnpj,@RequestParam(value="date") Date date,@RequestParam(value="coo") String coo,@RequestParam(value="total") double total){  HttpHeaders responseHeaders=super.createBasicHttpHeaderResponse(APPLICATION_JSON);  Gson gson=new Gson();  ResultResponse resultResponse;  try {    Assert.isTrue(StringUtils.validateCNPJ(cnpj));    Assert.notNull(coo);    Assert.isTrue(StringUtils.isNumeric(coo));    Assert.isTrue(total > 0);    TaxReceipt taxReceipt=new TaxReceipt();    taxReceipt.setCnpj(removeNonNumeric(cnpj));    taxReceipt.setDate(date);    taxReceipt.setCoo(coo);    taxReceipt.setTotal(total);    taxReceipt.setDateInsertion(new Date());    taxReceiptDAO.save(taxReceipt);    resultResponse=new ResultResponse(true);  } catch (  Exception ex) {    ex.printStackTrace();    resultResponse=new ResultResponse(false);  }  return new ResponseEntity<>(gson.toJson(resultResponse),responseHeaders,HttpStatus.OK);}  }
class C{  public SegmentIntersector computeSelfNodes(LineIntersector li,boolean computeRingSelfNodes){  return computeSelfNodes(li,computeRingSelfNodes,false);}  }
class C{  @Override public int compareTo(ByteArrayWrapper other){  return arrayCmp(value,other.value);}  }
class C{  public static void asserts(final boolean expression,final String failedMessage){  if (!expression) {    throw new AssertionError(failedMessage);  }}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public static final double[] minus(final double[] v1,final double d){  final double[] result=new double[v1.length];  for (int i=0; i < v1.length; i++) {    result[i]=v1[i] - d;  }  return result;}  }
class C{  public void saveFile(File file){  BufferedOutputStream outputStream=null;  try {    outputStream=new BufferedOutputStream(new FileOutputStream(file));    outputStream.write(xml.getBytes("UTF-8"));    outputStream.flush();  } catch (  IOException ex) {    if (Trace.error)     ex.printStackTrace();    throw new RuntimeException("Could not save " + file + ": "+ ex);  } finally {    if (Trace.asdoc)     System.out.println("Wrote doc file: " + file);    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException ex) {      }    }  }}  }
class C{  Iterator(GeneralPath path){  this.p=path;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPCs(zone);}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  if ((paddingScheme != null) && (!paddingScheme.equalsIgnoreCase("PKCS5Padding"))) {    throw new NoSuchPaddingException("Invalid padding scheme: " + paddingScheme);  }}  }
class C{  private void readObject(){}  }
class C{  public Vertex applyCONDITION(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex first=arguments.get(0).getTarget().applyQuotient(variables,network);  boolean result=false;  if (arguments.size() == 1) {    result=first.is(Primitive.TRUE);  } else {    Vertex second=arguments.get(1).getTarget().applyQuotient(variables,network);    result=first.matches(second,new HashMap<Vertex,Vertex>()) == Boolean.TRUE;  }  if (hasRelationship(Primitive.NOT,Primitive.NOT)) {    result=!result;  }  Collection<Relationship> conditions=getRelationships(Primitive.CONDITION);  if (conditions != null) {    for (    Relationship condition : conditions) {      Vertex operator=condition.getTarget().getRelationship(Primitive.OPERATOR);      if (operator == null) {        continue;      }      if (!result && operator.is(Primitive.OR)) {        Vertex value=condition.getTarget().applyQuotient(variables,network);        if (value.is(Primitive.TRUE)) {          result=true;        }      } else       if (result && operator.is(Primitive.AND)) {        Vertex value=condition.getTarget().applyQuotient(variables,network);        if (value.is(Primitive.FALSE)) {          result=false;        }      }    }  }  if (result) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  public INode contains(INode n){  BalancedBinaryNode<INode,INode> entry=tree.getEntry(n);  if (entry == null) {    return null;  }  return entry.value();}  }
class C{  private void initClassPath(){  StringBuilder cpath=new StringBuilder();  String sep=System.getProperty("path.separator");  cpath.append(options.getScratchDir() + sep);  String cp=(String)context.getAttribute(Constants.SERVLET_CLASSPATH);  if (cp == null || cp.equals("")) {    cp=options.getClassPath();  }  if (cp != null) {    classpath=cpath.toString() + cp;  }  if (classpath != null) {    try {      classpath=URLDecoder.decode(classpath,"UTF-8");    } catch (    UnsupportedEncodingException e) {      if (log.isLoggable(Level.FINE))       log.log(Level.FINE,"Exception decoding classpath : " + classpath,e);    }  }}  }
class C{  public long vbucketUUID(){  return token.vbucketUUID();}  }
class C{  public Long llen(final String key){  checkIsInMulti();  client.llen(key);  return client.getIntegerReply();}  }
class C{  public LabeledGraph(){  globalEdgeLookup=new Hashtable<VertexLabelType,Hashtable<VertexLabelType,EdgeLabelType>>();  vertexLabels=new ArrayList<VertexLabelType>();}  }
class C{  public void centreDialog(){  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  Dimension frameSize=this.getSize();  frameSize.height=Math.min(frameSize.height,screenSize.height);  frameSize.width=Math.min(frameSize.width,screenSize.width);  final Rectangle mainrect=View.getSingleton().getMainFrame().getBounds();  int x=mainrect.x + (mainrect.width - frameSize.width) / 2;  int y=mainrect.y + (mainrect.height - frameSize.height) / 2;  this.setLocation(x,y);}  }
class C{  public static IllegalStateException newIllegalStateException(int errorCode,String message,Object... arguments){  return initCause(new IllegalStateException(formatMessage(errorCode,message,arguments)),arguments);}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public void clear(){  if (stateStack.size() > 1) {    int size=stateStack.size() - 1;    throw new GroovyBugError("the compile stack contains " + size + " more push instruction"+ (size == 1 ? "" : "s")+ " than pops.");  }  if (lhsStack.size() > 1) {    int size=lhsStack.size() - 1;    throw new GroovyBugError("lhs stack is supposed to be empty, but has " + size + " elements left.");  }  if (implicitThisStack.size() > 1) {    int size=implicitThisStack.size() - 1;    throw new GroovyBugError("implicit 'this' stack is supposed to be empty, but has " + size + " elements left.");  }  clear=true;  MethodVisitor mv=controller.getMethodVisitor();  if (true) {    if (thisEndLabel == null)     setEndLabels();    if (!scope.isInStaticContext()) {      mv.visitLocalVariable("this",className,null,thisStartLabel,thisEndLabel,0);    }    for (Iterator iterator=usedVariables.iterator(); iterator.hasNext(); ) {      BytecodeVariable v=(BytecodeVariable)iterator.next();      ClassNode t=v.getType();      if (v.isHolder())       t=ClassHelper.REFERENCE_TYPE;      String type=BytecodeHelper.getTypeDescription(t);      Label start=v.getStartLabel();      Label end=v.getEndLabel();      mv.visitLocalVariable(v.getName(),type,null,start,end,v.getIndex());    }  }  for (  ExceptionTableEntry ep : typedExceptions) {    mv.visitTryCatchBlock(ep.start,ep.end,ep.goal,ep.sig);  }  for (  ExceptionTableEntry ep : untypedExceptions) {    mv.visitTryCatchBlock(ep.start,ep.end,ep.goal,ep.sig);  }  pop();  typedExceptions.clear();  untypedExceptions.clear();  stackVariables.clear();  usedVariables.clear();  scope=null;  finallyBlocks.clear();  mv=null;  resetVariableIndex(false);  superBlockNamedLabels.clear();  currentBlockNamedLabels.clear();  namedLoopBreakLabel.clear();  namedLoopContinueLabel.clear();  continueLabel=null;  breakLabel=null;  thisStartLabel=null;  thisEndLabel=null;  mv=null;}  }
class C{  public Quantifier createQuantifier(){  QuantifierImpl quantifier=new QuantifierImpl();  return quantifier;}  }
class C{  public void invertOrder(int index){  this.comparators.get(index).invertOrder();}  }
class C{  protected void synchWithTarget() throws MonitorException {  long timeLimit=System.currentTimeMillis() + syncWaitMs;  log("synchWithTarget: " + lvmid + " ");  while (!prologue.isAccessible()) {    log(".");    try {      Thread.sleep(20);    } catch (    InterruptedException e) {    }    if (System.currentTimeMillis() > timeLimit) {      logln("failed: " + lvmid);      throw new MonitorException("Could not synchronize with target");    }  }  logln("success: " + lvmid);}  }
class C{  public int renderNodes(final StringBuilder stringBuilder,final List<Node> nodes,final int index,final List<String> mustacheKeys,final Map<Integer,Node> cachedNodes){  int newIndex=index;  final Iterator<Node> iterator=nodes.iterator();  while (iterator.hasNext()) {    final Node node=iterator.next();    newIndex=this.renderNode(stringBuilder,mustacheKeys,cachedNodes,newIndex,node,true);    if (iterator.hasNext()) {      stringBuilder.append(",");    }  }  return newIndex;}  }
class C{  public int total(){  return total + position;}  }
class C{  void torsoTwist(int twistDir){  int direction=ce().getSecondaryFacing();  if (twistDir == 0) {    clearAttacks();    direction=ce().clipSecondaryFacing((direction + 5) % 6);    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  } else   if (twistDir == 1) {    clearAttacks();    direction=ce().clipSecondaryFacing((direction + 7) % 6);    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  }}  }
class C{  protected Object readLocation() throws IOException, ClassNotFoundException {  return (locIn == null ? null : locIn.readObject());}  }
class C{  public static HttpServletResponse buildMockResponseSuccessObject(StringWriter sw,String contentType,boolean expectCookie,String contentDispositionValue) throws IOException {  HttpServletResponse response=createMock(HttpServletResponse.class);  if (expectCookie) {    response.addCookie(isA(Cookie.class));  }  response.setContentType(contentType);  if (contentDispositionValue != null && !contentDispositionValue.isEmpty()) {    response.setHeader("Content-Disposition",contentDispositionValue);  }  expect(response.getWriter()).andReturn(new PrintWriter(sw)).anyTimes();  replay(response);  return response;}  }
class C{  public static void colorPreLollipopHorizontalProgressBar(ProgressBar progressBar){  if (progressBar != null && Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP) {    int color=progressBar.getResources().getColor(R.color.accent);    progressBar.getIndeterminateDrawable().setColorFilter(color,PorterDuff.Mode.SRC_IN);    progressBar.getProgressDrawable().setColorFilter(color,PorterDuff.Mode.SRC_IN);  }}  }
class C{  public DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException {  BitMatrix matrix=image.getBlackMatrix();  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);  ResultPoint[] vertices=findVertices(matrix,tryHarder);  if (vertices == null) {    vertices=findVertices180(matrix,tryHarder);    if (vertices != null) {      correctCodeWordVertices(vertices,true);    }  } else {    correctCodeWordVertices(vertices,false);  }  if (vertices == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleWidth=computeModuleWidth(vertices);  if (moduleWidth < 1.0f) {    throw NotFoundException.getNotFoundInstance();  }  int dimension=computeDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  if (dimension < 1) {    throw NotFoundException.getNotFoundInstance();  }  int ydimension=computeYDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  ydimension=ydimension > dimension ? ydimension : dimension;  BitMatrix bits=sampleGrid(matrix,vertices[4],vertices[5],vertices[6],vertices[7],dimension,ydimension);  return new DetectorResult(bits,new ResultPoint[]{vertices[5],vertices[4],vertices[6],vertices[7]});}  }
class C{  public boolean isPut(){  return HttpMethod.PUT.equals(getMethod());}  }
class C{  Slack(String webhookUrl,SlackService mockService){  this.webhookUrl=webhookUrl;  slackService=mockService;}  }
class C{  @ObjectiveCName("changeInAppNotificationSoundEnabledWithValue:") public void changeInAppNotificationSoundEnabled(boolean val){  modules.getSettingsModule().changeInAppSoundEnabled(val);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String n=getString(stack);  String s=getString(stack);  EPG.getInstance().setPhysicalOverride(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID(),n);  return null;}  }
class C{  public static void actionCopy(PageContext pageContext,lucee.runtime.security.SecurityManager securityManager,Resource source,String strDestination,int nameconflict,String serverPassword,Object acl,int mode,String attributes) throws PageException {  if (nameconflict == NAMECONFLICT_UNDEFINED)   nameconflict=NAMECONFLICT_OVERWRITE;  if (source == null)   throw new ApplicationException("attribute source is not defined for tag file");  if (StringUtil.isEmpty(strDestination))   throw new ApplicationException("attribute destination is not defined for tag file");  Resource destination=toDestination(pageContext,strDestination,source);  securityManager.checkFileLocation(pageContext.getConfig(),source,serverPassword);  securityManager.checkFileLocation(pageContext.getConfig(),destination,serverPassword);  if (!source.exists())   throw new ApplicationException("source file [" + source.toString() + "] doesn't exist"); else   if (!source.isFile())   throw new ApplicationException("source file [" + source.toString() + "] is not a file"); else   if (!source.canRead())   throw new ApplicationException("no access to source file [" + source.toString() + "]");  if (destination.isDirectory())   destination=destination.getRealResource(source.getName());  if (destination.exists()) {    if (nameconflict == NAMECONFLICT_SKIP)     return; else     if (nameconflict == NAMECONFLICT_OVERWRITE)     destination.delete(); else     if (nameconflict == NAMECONFLICT_MAKEUNIQUE)     destination=makeUnique(destination); else     throw new ApplicationException("destiniation file [" + destination.toString() + "] already exist");  }  try {    IOUtil.copy(source,destination);  } catch (  IOException e) {    ApplicationException ae=new ApplicationException("can't copy file [" + source + "] to ["+ destination+ "]",e.getMessage());    ae.setStackTrace(e.getStackTrace());    throw ae;  }  setACL(pageContext,destination,acl);  setMode(destination,mode);  setAttributes(destination,attributes);}  }
class C{  final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  static RuleRec parse(StringTokenizer tokens){  RuleRec rec=new RuleRec();  try {    String token=tokens.nextToken();    try {      rec.fromYear=Integer.parseInt(token);    } catch (    NumberFormatException e) {      if ("min".equals(token) || "minimum".equals(token)) {        rec.fromYear=Zoneinfo.getMinYear();      } else       if ("max".equals(token) || "maximum".equals(token)) {        rec.fromYear=Zoneinfo.getMaxYear();      } else {        Main.panic("invalid year value: " + token);      }    }    token=tokens.nextToken();    rec.isLastRule=false;    try {      rec.toYear=Integer.parseInt(token);    } catch (    NumberFormatException e) {      if ("min".equals(token) || "minimum".equals(token)) {        rec.fromYear=Zoneinfo.getMinYear();      } else       if ("max".equals(token) || "maximum".equals(token)) {        rec.toYear=Integer.MAX_VALUE;        rec.isLastRule=true;      } else       if ("only".equals(token)) {        rec.toYear=rec.fromYear;      } else {        Main.panic("invalid year value: " + token);      }    }    rec.type=tokens.nextToken();    rec.inMonth=Month.parse(tokens.nextToken());    rec.onDay=RuleDay.parse(tokens.nextToken());    rec.atTime=Time.parse(tokens.nextToken());    rec.save=(int)Time.parse(tokens.nextToken()).getTime();    rec.letters=tokens.nextToken();  } catch (  Exception e) {    e.printStackTrace();  }  return rec;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.950 -0500",hash_original_method="3012BD4162FEB4D4063E0B4E3944BED9",hash_generated_method="2079993A117A470D1C9BB6A7397F737D") @Override @SuppressWarnings("FinalizeDoesntCallSuperFinalize") protected final void finalize(){}  }
class C{  public String loadPreferences(KeyNamePair org,KeyNamePair warehouse,java.sql.Timestamp timestamp,String printerName){  log.info("Org: " + org.toStringX());  if (m_ctx == null || org == null)   throw new IllegalArgumentException("Required parameter missing");  if (Env.getContext(m_ctx,"#AD_Client_ID").length() == 0)   throw new UnsupportedOperationException("Missing Context #AD_Client_ID");  if (Env.getContext(m_ctx,"#AD_User_ID").length() == 0)   throw new UnsupportedOperationException("Missing Context #AD_User_ID");  if (Env.getContext(m_ctx,"#AD_Role_ID").length() == 0)   throw new UnsupportedOperationException("Missing Context #AD_Role_ID");  Env.setContext(m_ctx,"#AD_Org_ID",org.getKey());  Env.setContext(m_ctx,"#AD_Org_Name",org.getName());  Ini.setProperty(Ini.P_ORG,org.getName());  if (warehouse != null) {    Env.setContext(m_ctx,"#M_Warehouse_ID",warehouse.getKey());    Ini.setProperty(Ini.P_WAREHOUSE,warehouse.getName());  }  long today=System.currentTimeMillis();  if (timestamp != null)   today=timestamp.getTime();  Env.setContext(m_ctx,"#Date",new java.sql.Timestamp(today));  if (printerName == null)   printerName="";  Env.setContext(m_ctx,"#Printer",printerName);  Ini.setProperty(Ini.P_PRINTER,printerName);  MRole.getDefault(m_ctx,true);  Env.setAutoCommit(m_ctx,Ini.isPropertyBool(Ini.P_A_COMMIT));  Env.setAutoNew(m_ctx,Ini.isPropertyBool(Ini.P_A_NEW));  if (MRole.getDefault(m_ctx,false).isShowAcct())   Env.setContext(m_ctx,"#ShowAcct",Ini.getProperty(Ini.P_SHOW_ACCT)); else   Env.setContext(m_ctx,"#ShowAcct","N");  Env.setContext(m_ctx,"#ShowTrl",Ini.getProperty(Ini.P_SHOW_TRL));  Env.setContext(m_ctx,"#ShowAdvanced",Ini.getProperty(Ini.P_SHOW_ADVANCED));  String retValue="";  int AD_Client_ID=Env.getContextAsInt(m_ctx,"#AD_Client_ID");  int AD_Org_ID=org.getKey();  int AD_User_ID=Env.getContextAsInt(m_ctx,"#AD_User_ID");  int AD_Role_ID=Env.getContextAsInt(m_ctx,"#AD_Role_ID");  Env.setContext(m_ctx,"#YYYY","Y");  Env.setContext(m_ctx,"#StdPrecision",2);  String sql="SELECT * " + "FROM C_AcctSchema a, AD_ClientInfo c " + "WHERE a.C_AcctSchema_ID=c.C_AcctSchema1_ID "+ "AND c.AD_Client_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    int C_AcctSchema_ID=0;    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Client_ID);    rs=pstmt.executeQuery();    if (!rs.next()) {      if (AD_Role_ID != 0)       retValue="NoValidAcctInfo";    } else {      C_AcctSchema_ID=rs.getInt("C_AcctSchema_ID");      Env.setContext(m_ctx,"$C_AcctSchema_ID",C_AcctSchema_ID);      Env.setContext(m_ctx,"$C_Currency_ID",rs.getInt("C_Currency_ID"));      Env.setContext(m_ctx,"$HasAlias",rs.getString("HasAlias"));    }    rs.close();    pstmt.close();    MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(Env.getCtx(),AD_Client_ID);    if (ass != null && ass.length > 1) {      for (      MAcctSchema as : ass) {        C_AcctSchema_ID=MClientInfo.get(Env.getCtx(),AD_Client_ID).getC_AcctSchema1_ID();        if (as.getAD_OrgOnly_ID() != 0) {          if (as.isSkipOrg(AD_Org_ID)) {            continue;          } else {            C_AcctSchema_ID=as.getC_AcctSchema_ID();            Env.setContext(m_ctx,"$C_AcctSchema_ID",C_AcctSchema_ID);            Env.setContext(m_ctx,"$C_Currency_ID",as.getC_Currency_ID());            Env.setContext(m_ctx,"$HasAlias",as.isHasAlias());            break;          }        }      }    }    sql="SELECT ElementType " + "FROM C_AcctSchema_Element " + "WHERE C_AcctSchema_ID=?"+ " AND IsActive='Y'";    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_AcctSchema_ID);    rs=pstmt.executeQuery();    while (rs.next())     Env.setContext(m_ctx,"$Element_" + rs.getString("ElementType"),"Y");    rs.close();    pstmt.close();    sql="SELECT Attribute, Value, AD_Window_ID " + "FROM AD_Preference " + "WHERE AD_Client_ID IN (0, @#AD_Client_ID@)"+ " AND AD_Org_ID IN (0, @#AD_Org_ID@)"+ " AND (AD_User_ID IS NULL OR AD_User_ID=0 OR AD_User_ID=@#AD_User_ID@)"+ " AND IsActive='Y' "+ "ORDER BY Attribute, AD_Client_ID, AD_User_ID DESC, AD_Org_ID";    sql=Env.parseContext(m_ctx,0,sql,false);    if (sql.length() == 0)     log.log(Level.SEVERE,"loadPreferences - Missing Environment"); else {      pstmt=DB.prepareStatement(sql,null);      rs=pstmt.executeQuery();      while (rs.next()) {        int AD_Window_ID=rs.getInt(3);        String at="";        if (rs.wasNull())         at="P|" + rs.getString(1); else         at="P" + AD_Window_ID + "|"+ rs.getString(1);        String va=rs.getString(2);        Env.setContext(m_ctx,at,va);      }      rs.close();      pstmt.close();    }    log.info("Default Values ...");    sql="SELECT t.TableName, c.ColumnName " + "FROM AD_Column c " + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) "+ "WHERE c.IsKey='Y' AND t.IsActive='Y'"+ " AND EXISTS (SELECT * FROM AD_Column cc "+ " WHERE ColumnName = 'IsDefault' AND t.AD_Table_ID=cc.AD_Table_ID AND cc.IsActive='Y')";    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next())     loadDefault(rs.getString(1),rs.getString(2));    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException e) {    log.log(Level.SEVERE,"loadPreferences",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  Ini.saveProperties(Ini.isClient());  Env.setContext(m_ctx,"#C_Country_ID",MCountry.getDefault(m_ctx).getC_Country_ID());  ModelValidationEngine.get().afterLoadPreferences(m_ctx);  return retValue;}  }
class C{  protected boolean[] updatingEquality(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("incremental training produces the same results" + " as batch training");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Instances test=null;  Classifier[] classifiers=null;  Evaluation evaluationB=null;  Evaluation evaluationI=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifiers=AbstractClassifier.makeCopies(getClassifier(),2);    evaluationB=new Evaluation(train);    evaluationI=new Evaluation(train);    classifiers[0].buildClassifier(train);    testWRTZeroR(classifiers[0],evaluationB,train,test);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    classifiers[1].buildClassifier(new Instances(train,0));    for (int i=0; i < train.numInstances(); i++) {      ((UpdateableClassifier)classifiers[1]).updateClassifier(train.instance(i));    }    built=true;    testWRTZeroR(classifiers[1],evaluationI,train,test);    if (!evaluationB.equals(evaluationI)) {      println("no");      result[0]=false;      if (m_Debug) {        println("\n=== Full Report ===");        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the classifier, this may be OK");        println("Here are the results:\n");        println(evaluationB.toSummaryString("\nbatch built results\n",true));        println(evaluationI.toSummaryString("\nincrementally built results\n",true));        println("Here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");        println("=== Test Dataset ===\n" + test.toString() + "\n\n");      }    } else {      println("yes");      result[0]=true;    }  } catch (  Exception ex) {    result[0]=false;    print("Problem during");    if (built) {      print(" testing");    } else {      print(" training");    }    println(": " + ex.getMessage() + "\n");  }  return result;}  }
class C{  public static void assertBalanceTransferNotification(final Notification notification,final Account expectedSender,final Account expectedRecipient,final Amount expectedAmount){  final BalanceTransferNotification n=(BalanceTransferNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.BalanceTransfer));  Assert.assertThat(n.getSender(),IsEqual.equalTo(expectedSender));  Assert.assertThat(n.getRecipient(),IsEqual.equalTo(expectedRecipient));  Assert.assertThat(n.getAmount(),IsEqual.equalTo(expectedAmount));}  }
class C{  @Override public boolean hasNext(){  return this.reader.hasNext();}  }
class C{  protected void performTest(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public static void load(Context cx,Scriptable thisObj,Object[] args,Function funObj){  Shell shell=(Shell)getTopLevelScope(thisObj);  for (int i=0; i < args.length; i++) {    shell.processSource(cx,Context.toString(args[i]));  }}  }
class C{  public static SupportedLanguage toLanguage(POSupportedLanguage poLanguage){  if (poLanguage == null || poLanguage.getLanguageISOCode() == null) {    IllegalArgumentException e=new IllegalArgumentException("POSupportedLanguage and Language ISO code must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  SupportedLanguage language=new SupportedLanguage();  copyAttributes(language,poLanguage);  return language;}  }
class C{  protected int enrichProfile(MultiMap headers,JsonObject profile,String userId,Collection<UserProfileConfiguration.ProfileProperty> profileProperties){  int updateCount=0;  for (  UserProfileConfiguration.ProfileProperty profileProperty : profileProperties) {    if (updateField(userId,headers,profile,profileProperty)) {      updateCount++;    }  }  return updateCount;}  }
class C{  @Deprecated @Override public void putAll(Map<? extends TypeToken<? extends B>,? extends B> map){  throw new UnsupportedOperationException();}  }
class C{  public JsassCustomFunctions(ImportStack importStack){  this.importStack=importStack;}  }
class C{  @Override public int size(){  return 0;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int nr=in.read(b,off,len);  if (nr > 0)   monitor.setProgress(nread+=nr);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return nr;}  }
class C{  private void emitUnicodeProperties() throws Exception {  StringBuilder builder=new StringBuilder();  UnicodePropertiesSkeleton skeleton=new UnicodePropertiesSkeleton(SKELETON_FILENAME);  skeleton.emitNext(builder);  emitClassComment(builder);  skeleton.emitNext(builder);  emitUnicodeVersionsString(builder);  skeleton.emitNext(builder);  emitDefaultUnicodeVersion(builder);  skeleton.emitNext(builder);  emitInitBody(builder);  skeleton.emitNext(builder);  writeOutputFile(builder);}  }
class C{  public static String colorAsAndroidString(int aColor){  return String.format("#%08X",0xFFFFFFFF & aColor);}  }
class C{  public HubGenerator(double length,double x,double y){  max=length;  this.x=x;  this.y=y;}  }
class C{  public void addAll(Section list){  Collection<? extends Item> items=list.items();  for (  Item item : items) {    add(item);  }}  }
class C{  private void showPopups(final Rectangle[] rects,final Rectangle bds,final Rectangle visible,final JComponent comp,final JScrollPane view){  boolean shown=false;  for (int i=0; i < rects.length; i++) {    final Rectangle sect=rects[i];    sect.translate(-bds.x,-bds.y);    final ImgComp part=painter.getPartial(sect,bds.x + rects[i].x < visible.x);    final Point pos=new Point(bds.x + rects[i].x,bds.y + rects[i].y);    SwingUtilities.convertPointToScreen(pos,comp);    if (comp instanceof JList) {      pos.y--;    }    if (pos.x > 0) {      popups[i]=getPopupFactory().getPopup(view,part,pos.x,pos.y);      popups[i].show();      shown=true;    }  }  if (shown) {    setHideComponent(comp,view);  } else {    setHideComponent(null,null);  }}  }
class C{  public static byte[] readBytesAndClose(InputStream in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    ByteArrayOutputStream out=new ByteArrayOutputStream(block);    copy(in,out,length);    return out.toByteArray();  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  public final void removeRows(int[] selectedRows){  int[] cols=new int[data[0].length];  for (int i=0; i < data[0].length; i++) {    cols[i]=i;  }  int[] retainedRows=new int[data.length - selectedRows.length];  int i=-1;  for (int j=0; j < data.length; j++) {    if (Arrays.binarySearch(selectedRows,j) < 0) {      retainedRows[++i]=j;    }  }  data=viewSelection(retainedRows,cols);  selection=new HashSet<>();  knowledge=knowledge.copy();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.455 -0500",hash_original_method="26533187FD051756DFC2CF1CEE3F806F",hash_generated_method="AFB532D9142F8E963569017B277A8172") public void onGeolocationPermissionsShowPrompt(String origin,GeolocationPermissions.Callback callback){  if (mWebChromeClient == null) {    return;  }  Message showMessage=obtainMessage(GEOLOCATION_PERMISSIONS_SHOW_PROMPT);  HashMap<String,Object> map=new HashMap();  map.put("origin",origin);  map.put("callback",callback);  showMessage.obj=map;  sendMessage(showMessage);}  }
class C{  boolean isTlsRequired(){  return tlsRequired;}  }
class C{  public StagedDeepeningGraph(File file) throws FileNotFoundException {  out=new PrintWriter(file);}  }
class C{  public Builder credential(final Credential credential){  this.credential=credential;  return this;}  }
class C{  public static int ECHILD(){  return Errno.ECHILD.intValue();}  }
class C{  public TaskDescriptionCompat(String label){  this(label,null,0);}  }
class C{  private static Uri unformatNullUri(final Uri uri){  if ((null == uri) || sDummyUri.equals(uri)) {    return null;  }  return uri;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static public SerialLightManager instance(){  if (_instance == null) {    _instance=new SerialLightManager();  }  return _instance;}  }
class C{  protected String nullIfEmpty(final String str){  return StringUtils.defaultIfEmpty(str,null);}  }
class C{  XSLTElementProcessor popProcessor(){  return (XSLTElementProcessor)m_processors.pop();}  }
class C{  public String write(final SimpleProtein simpleProtein) throws IOException, TemplateException {  return write(simpleProtein,true);}  }
class C{  public static void addFile(File f) throws IOException {  addURL(f.toURI().toURL());}  }
class C{  public Iterator<SimEvent> iterator(){  return list.iterator();}  }
class C{  public int yToLatE7(float y){  return GeoMath.yToLatE7(map.getHeight(),map.getWidth(),viewBox,y);}  }
class C{  private void addOperations(Set<ClassOrInterfaceType> concreteClassTypes,VisibilityPredicate visibility,ReflectionPredicate reflectionPredicate){  Set<TypedOperation> operationSet=new LinkedHashSet<>();  ReflectionManager mgr=new ReflectionManager(visibility);  for (  ClassOrInterfaceType classType : concreteClassTypes) {    mgr.apply(new OperationExtractor(classType,operationSet,reflectionPredicate),classType.getRuntimeClass());  }  for (  TypedOperation operation : operationSet) {    operations.add(operation);  }}  }
class C{  public static synchronized void removeProvider(int providerNumber){  Provider p=providers.remove(providerNumber - 1);  providersNames.remove(p.getName());  setNeedRefresh();}  }
class C{  private void copy(){  if (elems.nonEmpty()) {    List<A> orig=elems;    elems=last=List.<A>of(orig.head);    while ((orig=orig.tail).nonEmpty()) {      last.tail=List.<A>of(orig.head);      last=last.tail;    }  }}  }
class C{  public static final void show(Window owner){  AboutDialog dialog=new AboutDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);}  }
class C{  public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName,final String partitionId,final String startingOffset) throws ServiceBusException {  return this.createReceiver(consumerGroupName,partitionId,startingOffset,false);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HideVideoDao.dropTable(db,ifExists);}  }
class C{  public RequestProcessesCommand(final int packetId){  super(DebugCommandType.CMD_LIST_PROCESSES,packetId);}  }
class C{  public void parse(){  Matcher matcher=versionPattern.matcher(versString);  int c=matcher.groupCount();  if (c < 3 || !matcher.matches())   throw new VersionFormatException();  major=Integer.parseInt(matcher.group(1));  minor=Integer.parseInt(matcher.group(2));  build=Integer.parseInt(matcher.group(3));  if (c == 6 && matcher.group(6) != null) {    preRelease=true;    prereleaseType=matcher.group(6).charAt(0);    prebuild=Integer.parseInt(matcher.group(5));  }  parsed=true;}  }
class C{  public Boolean checkIfProviderSupportsCompressionOperations(StorageSystem storageSystem){  String versionSubstring=null;  if (storageSystem.checkIfVmax3() && storageSystem.getUsingSmis80()) {    try {      StorageProvider storageProvider=_dbClient.queryObject(StorageProvider.class,storageSystem.getActiveProviderURI());      String providerVersion=storageProvider.getVersionString();      versionSubstring=providerVersion.split("\\.")[1];    } catch (    Exception e) {      _log.error("Exception get provider version for the storage system {} {}.",storageSystem.getLabel(),storageSystem.getId());      return false;    }  }  if (NullColumnValueGetter.isNullValue(versionSubstring) || !(Integer.parseInt(versionSubstring) > 2)) {    String errMsg=String.format("SMI-S Provider associated with Storage System %s does not support compression operations",storageSystem.getSerialNumber());    _log.error(errMsg);    return false;  }  return true;}  }
class C{  @Override public void close() throws IOException {  if (debug > 1) {    System.out.println("close() @ CompressionResponseStream");  }  if (closed)   throw new IOException("This output stream has already been closed");  if (gzipstream != null) {    flushToGZip();    gzipstream.close();    gzipstream=null;  } else {    if (bufferCount > 0) {      if (debug > 2) {        System.out.print("output.write(");        System.out.write(buffer,0,bufferCount);        System.out.println(")");      }      output.write(buffer,0,bufferCount);      bufferCount=0;    }  }  output.close();  closed=true;}  }
class C{  public void start(){  componentsOrder.stream().map(null).forEach(null);}  }
class C{  private static String[] regGetSubKeys(String subKey,int regLevel){  int hKey=getHKeyByLevel(regLevel);  return WinRegistryWrapper.WinRegGetSubKeys(hKey,subKey,MAX_KEY_LENGTH);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SnackbarBuilder timeoutDismissCallback(SnackbarTimeoutDismissCallback callback){  callbackBuilder.timeoutDismissCallback(callback);  return this;}  }
class C{  public static JsonObject httpGet(CloseableHttpClient httpClient,URI uri) throws ClientProtocolException, IOException, IllegalStateException, HttpException {  HttpGet httpGet=new HttpGet(uri);  try (CloseableHttpResponse response=httpClient.execute(httpGet)){    return UtilityFunctions.parseHTTPResponse(response,uri.toString());  } catch (  ClientProtocolException e) {    throw e;  }}  }
class C{  public static ActiveLagGraph serializableInstance(){  return new ManualActiveLagGraph();}  }
class C{  public static int codePointBefore(char[] seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index < 1 || index > len) {    throw new IndexOutOfBoundsException();  }  char low=seq[--index];  if (--index < 0) {    return low;  }  char high=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  private ConsistencyGroupLinkSettings findLinkSettings(List<ConsistencyGroupLinkSettings> cgLinkSettings,GlobalCopyUID prodCopyUID,GlobalCopyUID targetCopyUID,String prodCopyName,String targetCopyName) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception {  ConsistencyGroupLinkSettings toRet=null;  if (cgLinkSettings != null && !cgLinkSettings.isEmpty() && prodCopyUID != null && targetCopyUID != null) {    for (    ConsistencyGroupLinkSettings linkSetting : cgLinkSettings) {      ConsistencyGroupCopyUID firstCopyUID=new ConsistencyGroupCopyUID();      firstCopyUID.setGlobalCopyUID(linkSetting.getGroupLinkUID().getFirstCopy());      firstCopyUID.setGroupUID(linkSetting.getGroupLinkUID().getGroupUID());      ConsistencyGroupCopyUID secondCopyUID=new ConsistencyGroupCopyUID();      secondCopyUID.setGlobalCopyUID(linkSetting.getGroupLinkUID().getSecondCopy());      secondCopyUID.setGroupUID(linkSetting.getGroupLinkUID().getGroupUID());      String firstCopyName=functionalAPI.getGroupCopyName(firstCopyUID);      String secondCopyName=functionalAPI.getGroupCopyName(secondCopyUID);      logger.info(String.format("Examining existing link settings between %s and %s.  Attempting to find a link between %s and %s.",firstCopyName,secondCopyName,prodCopyName,targetCopyName));      if (isMatchingLinkSettings(linkSetting,prodCopyUID,targetCopyUID)) {        logger.info("Found existing link settings between {} and {}.",prodCopyName,targetCopyName);        toRet=linkSetting;        break;      }    }  }  if (toRet == null) {    logger.info("Unable to find existing link settings between {} and {}.",prodCopyName,targetCopyName);  }  return toRet;}  }
class C{  public InvalidMacException(final byte[] expected,final byte[] actual){  super("MAC validation failed");  this.expected=Arrays.copyOf(expected,expected.length);  this.actual=Arrays.copyOf(actual,actual.length);}  }
class C{  protected Reader openExternalEntity(IXMLReader xmlReader,String publicID,String systemID) throws XMLParseException {  String parentSystemID=xmlReader.getSystemID();  try {    return xmlReader.openStream(publicID,systemID);  } catch (  Exception e) {    throw new XMLParseException(parentSystemID,xmlReader.getLineNr(),"Could not open external entity " + "at system ID: " + systemID);  }}  }
class C{  public static Metrics isBoring(CharSequence text,TextPaint paint){  return isBoring(text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,null);}  }
class C{  public void addMigratingInContainerVm(ContainerVm containerVm){  containerVm.setInMigration(true);  if (!getVmsMigratingIn().contains(containerVm)) {    if (getStorage() < containerVm.getSize()) {      Log.printConcatLine("[VmScheduler.addMigratingInContainerVm] Allocation of VM #",containerVm.getId()," to Host #",getId()," failed by storage");      System.exit(0);    }    if (!getContainerVmRamProvisioner().allocateRamForContainerVm(containerVm,containerVm.getCurrentRequestedRam())) {      Log.printConcatLine("[VmScheduler.addMigratingInContainerVm] Allocation of VM #",containerVm.getId()," to Host #",getId()," failed by RAM");      System.exit(0);    }    if (!getContainerVmBwProvisioner().allocateBwForContainerVm(containerVm,containerVm.getCurrentRequestedBw())) {      Log.printConcatLine("[VmScheduler.addMigratingInContainerVm] Allocation of VM #",containerVm.getId()," to Host #",getId()," failed by BW");      System.exit(0);    }    getContainerVmScheduler().getVmsMigratingIn().add(containerVm.getUid());    if (!getContainerVmScheduler().allocatePesForVm(containerVm,containerVm.getCurrentRequestedMips())) {      Log.printConcatLine("[VmScheduler.addMigratingInContainerVm] Allocation of VM #",containerVm.getId()," to Host #",getId()," failed by MIPS");      System.exit(0);    }    setStorage(getStorage() - containerVm.getSize());    getVmsMigratingIn().add(containerVm);    getVmList().add(containerVm);    updateContainerVmsProcessing(CloudSim.clock());    containerVm.getHost().updateContainerVmsProcessing(CloudSim.clock());  }}  }
class C{  public RDFObject createObject(Resource resource){  assert resource != null;  if (resource instanceof URI)   return createBean(resource,resolver.resolveEntity((URI)resource));  return createBean(resource,resolver.resolveBlankEntity());}  }
class C{  public void build(){  if (null == content || null == channelID) {    throw new RuntimeException("You need content and a channel ID to send a message!");  } else {    try {      DiscordClient.get().sendMessage(content,channelID);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void markAsCanceled(){  fCanceled=true;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ANNOTATION;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean isInRange(float value,float min,float max){  return FLOAT_VALIDATOR.isInRange(value,min,max);}  }
class C{  public long toDurationMillis(){  return FieldUtils.safeAdd(getEndMillis(),-getStartMillis());}  }
class C{  private void reportExceptionThrow(Element element,Throwable t){  if (element != null) {    logMessage("throw for %s:\n",element);  }  logException(t);  errorMessage(element,"Exception throw during processing: %s %s",t,Arrays.toString(Arrays.copyOf(t.getStackTrace(),4)));}  }
class C{  public void convert(String target){  File file=new File(target);  if (!file.exists()) {    System.err.println("The specified template or directory does not exist");    System.exit(1);  }  if (file.isDirectory()) {    String basedir=file.getAbsolutePath();    String newBasedir=basedir + VM_EXT;    DirectoryScanner ds=new DirectoryScanner();    ds.setBasedir(basedir);    ds.addDefaultExcludes();    ds.scan();    String[] files=ds.getIncludedFiles();    for (int i=0; i < files.length; i++) {      writeTemplate(files[i],basedir,newBasedir);    }  } else {    writeTemplate(file.getAbsolutePath(),"","");  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void hideKeyboard(Runnable postHideTask){  if (mUrlBar != null)   mUrlBar.clearFocus();  boolean wasVisible=false;  if (hasFocus()) {    wasVisible=UiUtils.hideKeyboard(this);  }  if (wasVisible) {    mPostHideKeyboardTask=postHideTask;  } else {    postHideTask.run();  }}  }
class C{  public static synchronized Type tArray(Type elem){  String sig=new String(SIG_ARRAY + elem.getTypeSignature());  Type t=(Type)typeHash.get(sig);  if (t == null) {    t=new ArrayType(sig,elem);  }  return t;}  }
class C{  protected Connection createReceiveConnection() throws Exception {  return createConnection();}  }
class C{  protected Font parseFont(Properties props,String prefix,String prop,Font dfault){  String[] fontItems=PropUtils.stringArrayFromProperties(props,prefix + "." + prop," ,");  int style=0;  int size=10;  if (fontItems == null || fontItems.length == 0)   return dfault;  try {    size=Integer.parseInt(fontItems[1]);  } catch (  Exception e) {  }  for (int i=2; i < fontItems.length; i++) {    String S=fontItems[i];    if ("BOLD".equals(S))     style|=Font.BOLD; else     if ("ITALIC".equals(S))     style|=Font.ITALIC; else     if ("PLAIN".equals(S))     style|=Font.PLAIN;  }  return new Font(fontItems[0],style,size);}  }
class C{  public Authority(){  keyStoreDir=new File(".");  alias="littleproxy-mitm";  password="Be Your Own Lantern".toCharArray();  organization="LittleProxy-mitm";  commonName=organization + ", describe proxy here";  organizationalUnitName="Certificate Authority";  certOrganization=organization;  certOrganizationalUnitName=organization + ", describe proxy purpose here, since Man-In-The-Middle is bad normally.";}  }
class C{  protected boolean isDhcpPacket(Ethernet frame){  IPacket payload=frame.getPayload();  if (payload == null)   return false;  IPacket p2=payload.getPayload();  if (p2 == null)   return false;  IPacket p3=p2.getPayload();  if ((p3 != null) && (p3 instanceof DHCP))   return true;  return false;}  }
class C{  public String dimensonsToString(){  return dimensonsToString(", ");}  }
class C{  public void spiralTraversal(){  spiralTraversal(root,0);}  }
class C{  public DataUri(DataUri original){  this(original.contentType,(original.data == null) ? null : original.data.clone(),original.text);}  }
class C{  private static RadialGradientPaint createGradientPaint(Color c1,Color c2){  Point2D center=new Point2D.Float(0,0);  float radius=200;  float[] dist={0.0f,1.0f};  return new RadialGradientPaint(center,radius,dist,new Color[]{c1,c2});}  }
class C{  public Object create(String url) throws MalformedURLException, ClassNotFoundException {  HessianMetaInfoAPI metaInfo;  metaInfo=(HessianMetaInfoAPI)create(HessianMetaInfoAPI.class,url);  String apiClassName=(String)metaInfo._hessian_getAttribute("java.api.class");  if (apiClassName == null)   throw new HessianRuntimeException(url + " has an unknown api.");  Class<?> apiClass=Class.forName(apiClassName,false,_loader);  return create(apiClass,url);}  }
class C{  public void resetMenuVisibility(){  visibilityCache.reset();}  }
class C{  public boolean saveAsProject(){  getProjectUIFacade().saveProjectAs(getProject());  return true;}  }
class C{  public boolean hasAttributeType(){  return m_attributeType != null;}  }
class C{  public int id(){  return id;}  }
class C{  @Override public final boolean isLoggable(Level level){  if (level == null)   return false;  int intValue=level.intValue();  if (intValue < _finestEffectiveLevelValue)   return false; else   if (!_hasLocalEffectiveLevel) {    return true;  } else {    Integer localValue=_localEffectiveLevel.get();    if (localValue != null) {      int localIntValue=localValue.intValue();      if (localIntValue == Level.OFF.intValue())       return false; else       return localIntValue <= intValue;    } else {      if (_systemEffectiveLevelValue == Level.OFF.intValue())       return false; else       return _systemEffectiveLevelValue <= intValue;    }  }}  }
class C{  public EmphasisBoost(){  this(new DecisionTree(6),200,0.35);}  }
class C{  public void unsubscribe(final String subscriptionId){  unsubscribe(subscriptionId,null);}  }
class C{  public BasicBlock determineBasicBlockFor(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  logger.debug("creating basic block for " + instruction.toString());  List<BytecodeInstruction> blockNodes=new ArrayList<BytecodeInstruction>();  blockNodes.add(instruction);  Set<BytecodeInstruction> handledChildren=new HashSet<BytecodeInstruction>();  Set<BytecodeInstruction> handledParents=new HashSet<BytecodeInstruction>();  Queue<BytecodeInstruction> queue=new LinkedList<BytecodeInstruction>();  queue.add(instruction);  while (!queue.isEmpty()) {    BytecodeInstruction current=queue.poll();    logger.debug("handling " + current.toString());    if (outDegreeOf(current) == 1)     for (    BytecodeInstruction child : getChildren(current)) {      if (blockNodes.contains(child))       continue;      if (handledChildren.contains(child))       continue;      handledChildren.add(child);      if (inDegreeOf(child) < 2) {        blockNodes.add(blockNodes.indexOf(current) + 1,child);        logger.debug("  added child to queue: " + child.toString());        queue.add(child);      }    }    if (inDegreeOf(current) == 1)     for (    BytecodeInstruction parent : getParents(current)) {      if (blockNodes.contains(parent))       continue;      if (handledParents.contains(parent))       continue;      handledParents.add(parent);      if (outDegreeOf(parent) < 2) {        blockNodes.add(blockNodes.indexOf(current),parent);        logger.debug("  added parent to queue: " + parent.toString());        queue.add(parent);      }    }  }  BasicBlock r=new BasicBlock(classLoader,className,methodName,blockNodes);  logger.debug("created nodeBlock: " + r.toString());  return r;}  }
class C{  private void initJeditView(){  jeditPane=new JEditTextArea();  jeditPane.setEditable(false);  jeditPane.setCaretVisible(false);  jeditPane.setCaretBlinkEnabled(false);  jeditPane.setRightClickPopup(new PopupMenu(jeditPane,this,runningAsVisualVMPlugin));  jeditPane.getInputHandler().addKeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_F3,0),(ActionListener)jeditPane.getRightClickPopup());  jeditPane.getInputHandler().addKeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_MASK),(ActionListener)jeditPane.getRightClickPopup());}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> sort(SingleLinkedNode<E> node){  SingleLinkedNode<E> secondList=node.next, curr=node, next;  while (curr != null && curr.next != null) {    next=curr.next;    curr.next=next.next;    next.next=(curr.next == null) ? null : curr.next.next;    curr=curr.next;  }  secondList=ReverseSingleLinkedList.recursiveReverseList(secondList);  return MergeSort.mergeTwoSortedLists(node,secondList);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:18.887 -0400",hash_original_method="D07BA372213C37876FFC4CE01F67E27E",hash_generated_method="C7294A02A01D12F8A4E071D78384383D") private Bitmap loadBitmap(Uri uri,BitmapFactory.Options o) throws FileNotFoundException {  if (uri == null || mContext == null) {    throw new IllegalArgumentException("bad argument to loadBitmap");  }  InputStream is=null;  try {    is=mContext.getContentResolver().openInputStream(uri);    return BitmapFactory.decodeStream(is,null,o);  }  finally {    if (is != null) {      try {        is.close();      } catch (      IOException t) {        Log.w(LOG_TAG,"close fail ",t);      }    }  }}  }
class C{  public ReportGenerator(String pathToRScriptFiles,String pathToLatexFiles,String pathToRScriptExe,String pathToPdfLatexExe,String workingDirectory){  this.pathToRScriptFiles=pathToRScriptFiles;  this.pathToLatexFiles=pathToLatexFiles;  this.pathToRScriptExe=pathToRScriptExe;  this.pathToPdfLatexExe=pathToPdfLatexExe;  this.workingDirectory=workingDirectory;}  }
class C{  @Override public double totalEstimatedQuantityForRE(final Long woActivityId,Long estimateId,final Long activityId,final WorkOrder workOrder){  if (estimateId == null)   estimateId=-1l;  Object[] params=null;  Double estQuantity=null;  params=new Object[]{estimateId,workOrder,workOrder,woActivityId,activityId};  estQuantity=(Double)genericService.findByNamedQuery("totalEstimatedQuantityInRE",params);  Double estQuantityRE=null;  if (workOrder.getParent() != null)   params=new Object[]{estimateId,workOrder.getParent(),workOrder.getParent(),activityId}; else   params=new Object[]{estimateId,workOrder,workOrder,activityId};  estQuantityRE=(Double)genericService.findByNamedQuery("totalEstimatedQuantityForREinRE",params);  if (estQuantity != null && estQuantityRE != null)   estQuantity=estQuantity + estQuantityRE;  if (estQuantity == null && estQuantityRE != null)   estQuantity=estQuantityRE;  if (estQuantity == null)   return 0.0d; else   return estQuantity.doubleValue();}  }
class C{  @Override public void agg(Object newVal){  valueSet.add(newVal instanceof BigDecimal ? (BigDecimal)newVal : new BigDecimal(newVal.toString()));  firstTime=false;}  }
class C{  public Builder maxItemsPerRequest(Integer maxItemsPerRequest){  this.maxItemsPerRequest=maxItemsPerRequest;  return this;}  }
class C{  public CommonsAssistantException(Throwable e){  super(e);}  }
class C{  public UCrop withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mCropOptionsBundle.putBoolean(EXTRA_MAX_SIZE_SET,true);  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_X,width);  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_Y,height);  return this;}  }
class C{  public boolean retrieveLoginToken() throws IOException {  final String loginFormUrl=this.mShaarliUrl + "?do=login";  try {    Connection.Response loginFormPage=this.createShaarliConnection(loginFormUrl,false).execute();    this.mCookies=loginFormPage.cookies();    this.mToken=loginFormPage.parse().body().select("input[name=token]").first().attr("value");  } catch (  NullPointerException|IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public boolean hasTransactionData(){  return hasExtension(TransactionData.class);}  }
class C{  private void removeCaboosesAndCarsWithFredAndSaveFinalDestination() throws BuildFailedException {  addLine(_buildReport,SEVEN,BLANK_LINE);  addLine(_buildReport,SEVEN,Bundle.getMessage("buildRemoveCarsNotNeeded"));  for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {    Car car=_carList.get(_carIndex);    if (car.isCaboose() || car.hasFred()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarTypeAtLoc"),new Object[]{car.toString(),car.getTypeName(),(car.getLocationName() + ", " + car.getTrackName())}));      if (car.getTrack() == _departStageTrack) {        throw new BuildFailedException("ERROR: Attempt to removed car with FRED or Caboose from staging");      }      _carList.remove(car);      _carIndex--;    }    car.setPreviousFinalDestination(car.getFinalDestination());    car.setPreviousFinalDestinationTrack(car.getFinalDestinationTrack());    car.setPreviousScheduleId(car.getScheduleItemId());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return (f == null) ? "" : f.getName();}  }
class C{  synchronized void referenced(long sequenceNum,VMID vmid){  SequenceEntry entry=sequenceTable.get(vmid);  if (entry == null) {    sequenceTable.put(vmid,new SequenceEntry(sequenceNum));  } else   if (entry.sequenceNum < sequenceNum) {    entry.update(sequenceNum);  } else {    return;  }  if (!refSet.contains(vmid)) {    pinImpl();    if (getImpl() == null)     return;    if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {      DGCImpl.dgcLog.log(Log.VERBOSE,"add to dirty set: " + vmid);    }    refSet.addElement(vmid);    DGCImpl.getDGCImpl().registerTarget(vmid,this);  }}  }
class C{  public static void disable(){  setEnabled(false);}  }
class C{  private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public static boolean isUrlUsable(String url){  if (CommonUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  public void print(PrintWriter output,NumberFormat format,int width){  output.println();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      String s=format.format(A[i][j]);      int padding=Math.max(1,width - s.length());      for (int k=0; k < padding; k++)       output.print(' ');      output.print(s);    }    output.println();  }  output.println();}  }
class C{  public T next(){  return head.value;}  }
class C{  public static String[] insert(String[] dest,String[] src,int offset){  String[] temp=new String[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  CounterNode remove(List<String> hierarchyElements){  CounterNode cur=this;  if (hierarchyElements.isEmpty()) {    log.error("Cannot remove a CounterNode from an empty list of hierarchy elements. Returning null.");    return null;  }  String keyToRemove=hierarchyElements.remove(hierarchyElements.size() - 1);  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  CounterNode removed=null;  if (cur != null) {    removed=cur.children.remove(keyToRemove);  }  return removed;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (IOUtils.EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == IOUtils.EOF;}  }
class C{  public void testAddParam() throws Exception {  final PyExpression classParameter=myGenerator.createParameter("SuperClass");  final PyExpression functionParameter=myGenerator.createParameter("new_param");  doTest(classParameter,functionParameter);}  }
class C{  public LogConfigurationException(String message,Throwable cause){  super(message + " (Caused by " + cause+ ")");  this.cause=cause;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SADD16");  translateAll(environment,instruction,"SADD16",instructions);}  }
class C{  public AdExIFRulePanel(){  super();  this.add(tabbedPane);  JTextField tfPeak=createTextField(null,null);  JTextField tfThreshold=createTextField(null,null);  JTextField tfV_Reset=createTextField(null,null);  JTextField tfCap=createTextField(null,null);  JTextField tfBgCurrent=createTextField(null,null);  JTextField tfSlopeFactor=createTextField(null,null);  JTextField tfGL=createTextField(null,null);  JTextField tfGeBar=createTextField(null,null);  JTextField tfGiBar=createTextField(null,null);  JTextField tfLR=createTextField(null,null);  JTextField tfER=createTextField(null,null);  JTextField tfIR=createTextField(null,null);  JTextField tfAdaptResetParam=createTextField(null,null);  JTextField tfAdaptCouplingConst=createTextField(null,null);  JTextField tfAdaptTC=createTextField(null,null);  mainTab.addItem("Peak Voltage (mV)",tfPeak);  mainTab.addItem("Threshold Voltage (mV)",tfThreshold);  mainTab.addItem("Reset Voltage (mV)",tfV_Reset);  mainTab.addItem("Capacitance (pF)",tfCap);  mainTab.addItem("Background Current (nA)",tfBgCurrent);  mainTab.addItem("Slope Factor",tfSlopeFactor);  mainTab.addItem("Add noise",this.getAddNoise());  currentTab.addItem("Leak Conductance (nS)",tfGL);  currentTab.addItem("Max Ex. Conductance (nS)",tfGeBar);  currentTab.addItem("Max In. Conductance (nS)",tfGiBar);  currentTab.addItem("Leak Reversal (mV)",tfLR);  currentTab.addItem("Excitatory Reversal (mV)",tfER);  currentTab.addItem("Inhibitory Reversal (mV)",tfIR);  adaptationTab.addItem("Reset (nA)",tfAdaptResetParam);  adaptationTab.addItem("Coupling Const.",tfAdaptCouplingConst);  adaptationTab.addItem("Time Constant (ms)",tfAdaptTC);  tabbedPane.add(mainTab,"Membrane Voltage");  tabbedPane.add(currentTab,"Input Currents");  tabbedPane.add(adaptationTab,"Adaptation");  tabbedPane.add(this.getNoisePanel(),"Noise");}  }
class C{  public boolean columnExists(DatabaseMetaData dbMetaData,String tableName,String columnName) throws SQLException {  return (columnExistsCaseSensitive(dbMetaData,tableName,columnName) || columnExistsCaseSensitive(dbMetaData,tableName,columnName.toUpperCase(Locale.US)) || columnExistsCaseSensitive(dbMetaData,tableName,columnName.toLowerCase(Locale.US))|| columnExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US),columnName)|| columnExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US),columnName.toUpperCase(Locale.US))|| columnExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US),columnName.toLowerCase(Locale.US))|| columnExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US),columnName)|| columnExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US),columnName.toUpperCase(Locale.US))|| columnExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US),columnName.toLowerCase(Locale.US)));}  }
class C{  protected void assertBankAccount(BankAccount actual,BankAccount expected){  if (expected == null) {    assertThat(actual,is(nullValue()));  } else {    assertThat(actual,is(not(nullValue())));    assertThat(actual.getIban(),is(expected.getIban()));  }}  }
class C{  public String toString(){  return ident;}  }
class C{  private void build(Document doc,Node file){  Element pieces=doc.createElement("pieces");  pieces.setAttribute("type",type);  pieces.setAttribute("length",String.valueOf(length));  file.appendChild(pieces);  for (  String hash : this.hash)   appendTextElement(doc,pieces,"hash",hash);}  }
class C{  public Builder aclMetaWriteRoles(List<String> aclMetaWriteRoles){  aclBuilder().metaWriteRoles(aclMetaWriteRoles);  return this;}  }
class C{  private boolean isHookListenerRegistration(HttpServerRequest request){  return request.uri().contains(HOOKS_LISTENERS_URI_PART) && HttpMethod.PUT == request.method();}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public void addPageAnimaition(PageAnimation pageAnimation){  int page=pageAnimation.getPage();  if (pageAnimations == null)   pageAnimations=new ArrayList<>();  while (page + 1 > pageAnimations.size()) {    pageAnimations.add(new ArrayList<PageAnimation>());  }  ArrayList<PageAnimation> pageAnimationsInPage=pageAnimations.get(page);  if (pageAnimationsInPage == null)   pageAnimationsInPage=new ArrayList<>();  pageAnimationsInPage.add(pageAnimation);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(mSDF.format(new Date()));  sb.append(" MPT1327 ");  sb.append(getParity());  sb.append(" ");  sb.append(getMessage());  sb.append(getFiller(sb,100));  sb.append(" [" + mMessage.toString() + "]");  return sb.toString();}  }
class C{  private static void enableAll(final BreakpointManager manager){  for (int i=0; i < manager.getNumberOfBreakpoints(BreakpointType.REGULAR); i++) {    manager.setBreakpointStatus(BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_ENABLED,i);  }}  }
class C{  @Override public boolean equals(Object c){  if (c instanceof Conference) {    if (((Conference)c).id.contentEquals(id) && !id.contentEquals("-1")) {      return true;    } else {      if (((Conference)c).id.contentEquals(id)) {        for (        SipCall participant : participants) {          if (!((Conference)c).contains(participant.getCallId()))           return false;        }        return true;      }    }  }  return false;}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @SuppressWarnings("UnusedParameters") protected void onResetRoll(ViewInputAttributes.ActionAttributes actionAttribs){  View view=this.getView();  if (view == null) {    return;  }  if (Angle.ZERO.equals(view.getRoll())) {    return;  }  this.addRollAnimator(view.getRoll(),Angle.ZERO);}  }
class C{  public PostalAddress(){  super(KEY);}  }
class C{  public void add(String namespaceURI,String prefix){  int idx=top;  prefix=prefix.intern();  try {    for (int cursor=top; stack[cursor] != null; cursor--) {      if (stack[cursor].getPrefix() == prefix) {        stack[cursor].setNamespaceURI(namespaceURI);        idx=cursor;        return;      }    }    push();    stack[top]=new Mapping(namespaceURI,prefix);    idx=top;  }  finally {    if (prefix.length() == 0) {      currentDefaultNS=idx;    }  }}  }
class C{  public Builder pooledConnectionIdleTimeout(final int pooledConnectionIdleTimeout){  clientConfig.setPooledConnectionIdleTimeout(pooledConnectionIdleTimeout);  return this;}  }
class C{  protected Subscription updSub(final String productId,final Date date) throws Exception {  return updSub(SUBSCRIPTION_ID,productId,date);}  }
class C{  public void revokeModerator(Collection<String> nicknames) throws XMPPException {  changeRole(nicknames,"participant");}  }
class C{  protected void updateParameterTable(){  parameterTable.setEnabled(false);  ArrayList<String> list=new ArrayList<String>(parameters.size() * 2 + 1);  list.add(maincls.getCanonicalName());  parameters.serializeParameters(list);  doSetParameters(list);  parameterTable.setEnabled(true);}  }
class C{  public static boolean isDouble(ClassNode type){  return double_TYPE == type;}  }
class C{  public static final boolean isDiamondTree(Tree tree){switch (tree.getKind()) {case ANNOTATED_TYPE:    return isDiamondTree(((AnnotatedTypeTree)tree).getUnderlyingType());case PARAMETERIZED_TYPE:  return ((ParameterizedTypeTree)tree).getTypeArguments().isEmpty();case NEW_CLASS:return isDiamondTree(((NewClassTree)tree).getIdentifier());default :return false;}}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  TextView tv=new TextView(this);  tv.setText("Hello, Other Crashy Android");  setContentView(tv);}  }
class C{  public static int opPrec(JCTree.Tag op){switch (op) {case POS:case NEG:case NOT:case COMPL:case PREINC:case PREDEC:    return prefixPrec;case POSTINC:case POSTDEC:case NULLCHK:  return postfixPrec;case ASSIGN:return assignPrec;case BITOR_ASG:case BITXOR_ASG:case BITAND_ASG:case SL_ASG:case SR_ASG:case USR_ASG:case PLUS_ASG:case MINUS_ASG:case MUL_ASG:case DIV_ASG:case MOD_ASG:return assignopPrec;case OR:return orPrec;case AND:return andPrec;case EQ:case NE:return eqPrec;case LT:case GT:case LE:case GE:return ordPrec;case BITOR:return bitorPrec;case BITXOR:return bitxorPrec;case BITAND:return bitandPrec;case SL:case SR:case USR:return shiftPrec;case PLUS:case MINUS:return addPrec;case MUL:case DIV:case MOD:return mulPrec;case TYPETEST:return ordPrec;default :throw new AssertionError();}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void completeGridRowWithGaps(GridLayout grid,int row,int startColumn,boolean lastRow){  for (int i=startColumn * 2; i < grid.getColumns(); i++) {    Component gap=componentsFactory.createComponent(Label.class);    gap.setWidth("100%");    grid.add(gap,i,row);  }}  }
class C{  private void loadPlacesDatabase(){  publishProgress("Loading NTAD place database...");  BufferedReader reader=null;  try {    InputStream in=getResources().openRawResource(R.raw.ntad_place);    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    List<String> headers=Arrays.asList(line.split(","));    final int LAT=headers.indexOf("LATITUDE");    final int LON=headers.indexOf("LONGITUDE");    final int NAM=headers.indexOf("NAME");    final int POP=headers.indexOf("POP_2010");    final int TYP=headers.indexOf("FEATURE2");    while ((line=reader.readLine()) != null) {      String[] fields=line.split(",");      Place place=new Place(Position.fromDegrees(Double.parseDouble(fields[LAT]),Double.parseDouble(fields[LON]),0),fields[NAM],fields[TYP],Integer.parseInt(fields[POP]));      this.places.add(place);    }  } catch (  IOException e) {    Logger.log(Logger.ERROR,"Exception attempting to read NTAD Place database");  } finally {    WWUtil.closeSilently(reader);  }}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public Jdk14ManagerAccessor(ClassLoader cl) throws ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {  Class clazz=cl.loadClass("java.util.logging.LogManager");  Method getManager=MethodUtils.getAccessibleMethod(clazz,"getLogManager",new Class[0]);  Object manager=getManager.invoke(null);  if (manager == null) {    throw new NullPointerException(clazz.getName() + ".getLogManager() returned null");  }  setTarget(manager);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public void testSetF27Momentary(){  boolean f27Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF27Momentary(f27Momentary);}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public static Criteria delete(Class<?> clazz){  return new Criteria(clazz,new DeleteBuilder(clazz));}  }
class C{  public void fireSelectionChanged(){  fireSelectionChanged(selection,selection);}  }
class C{  public int genID(){  int uid=this.hashCode();  if (uid < 0) {    uid=Math.abs(uid);    uid=uid * 15551;  }  return uid;}  }
class C{  public boolean isCurrentLetter(){  if (!isValidIndex())   return false;  return lcText[pos] >= 'a' && lcText[pos] <= 'z';}  }
class C{  private static void sayHello(Ignite ignite,final ClusterGroup grp) throws IgniteException {  ignite.compute(grp).broadcast(null);}  }
class C{  public TargetClass(Class<?> clazz){  xmlTargetClass=new XmlTargetClass(clazz.getName());}  }
class C{  public TransitionEvent(Object source,Transition<?,?> transition){  super(source);  this.transition=transition;}  }
class C{  public static boolean isLocalFileUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return FrescoUri.LOCAL_FILE_SCHEME.equals(scheme);}  }
class C{  public DocumentAnalysisRequest(String uri){  super(METHOD.POST,uri);}  }
class C{  public Vertex lastRelationship(Vertex type,int fromLast){  if (getRelationships().get(type) == null) {    return null;  }  List<Relationship> tail=new LinkedList<Relationship>();  for (  Relationship relationship : getRelationships(type)) {    Relationship previous=null;    int previousIndex=0;    for (int index=0; index < tail.size(); index++) {      Relationship oneOfTheLast=tail.get(index);      if (relationship.getIndex() > oneOfTheLast.getIndex()) {        previous=oneOfTheLast;        previousIndex=index;      }    }    if (previous != null) {      tail.add(previousIndex + 1,relationship);    } else     if (tail.size() < fromLast) {      tail.add(0,relationship);    }    if (tail.size() > fromLast) {      tail.remove(0);    }  }  if (tail.size() < fromLast) {    return null;  }  Relationship last=tail.get(tail.size() - 1);  if ((last.getIndex() + 1) != getRelationships(type).size()) {    this.network.getBot().log(this,"Corrupted relationship index detected, correcting",Level.FINE,type);    fixRelationships(type);  }  return tail.get(0).getTarget();}  }
class C{  private void terminateInResource(){  if (this.resource != null)   this.resource.removeSiblingMap(this.root);}  }
class C{  public static int locatePointInRing(Coordinate p,Coordinate[] ring){  return RayCrossingCounter.locatePointInRing(p,ring);}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof String) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public void loadSettings(){  for (  Object obj : mSharedPreferences.getAll().values())   values.add(obj.toString());  for (  String s : mSharedPreferences.getAll().keySet())   keys.add(s);}  }
class C{  public void runSimulator(long timestep){  accumulate();  integrator.integrate(this,timestep);}  }
class C{  public Schedule(){  time=BEFORE_SIMULATION;  steps=0;}  }
class C{  public LMSOffline(Trainable network){  super(network);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public SurfaceQuad(LatLon center,double width,double height){  if (center == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (width < 0) {    String message=Logging.getMessage("Geom.WidthIsNegative",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height < 0) {    String message=Logging.getMessage("Geom.HeightIsNegative",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.center=center;  this.width=width;  this.height=height;}  }
class C{  public void addIgnoredPath(final Path path){synchronized (ignoredPathMap) {    final IgnoredPathInfo info=ignoredPathMap.get(path);    if (info == null)     ignoredPathMap.put(path,new IgnoredPathInfo()); else     info.registerAdded();  }}  }
class C{  private static void minLength(String member,String value,int len) throws ValidationException {  if (value == null) {    return;  }  if (value.length() < len) {    ValidationException vf=new ValidationException(ReasonEnum.MIN_LENGTH,member,new Object[]{value,Integer.valueOf(len)});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public static OptionalParameter.Short newSarMsgRefNum(short value){  return new OptionalParameter.Short(Tag.SAR_MSG_REF_NUM,value);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public boolean handleReferenceFromImmortalSpace(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    refFromImmortalStream.increment(index,(short)1);    this.totalRefFromImmortal++;    return true;  } else {    return false;  }}  }
class C{  static long calcMultiplicativeInverse(long a){  return BigInteger.valueOf(a).modPow(BigInteger.valueOf((1 << 31) - 1),BigInteger.valueOf(1L << 32)).longValue();}  }
class C{  protected void tearDown(){}  }
class C{  protected boolean containsURL(URL url){  if (_urls != null) {    for (    URL testURL : _urls) {      if (url.equals(testURL))       return true;    }  }  ClassLoader parent=getParent();  if (parent instanceof DynamicClassLoader) {    DynamicClassLoader dynParent=(DynamicClassLoader)parent;    if (dynParent.containsURL(url)) {      return true;    }  }  for (  DynamicClassLoader loaderImport : _importLoaders) {    if (loaderImport.containsURL(url)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void resolveLocalFileHeaderData() throws IOException {  Enumeration<ZipEntry> e=getEntries();  while (e.hasMoreElements()) {    ZipEntry ze=e.nextElement();    long offset=entries.get(ze).longValue();    archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);    byte[] b=new byte[2];    archive.readFully(b);    int fileNameLen=(new ZipShort(b)).getValue();    archive.readFully(b);    int extraFieldLen=(new ZipShort(b)).getValue();    archive.skipBytes(fileNameLen);    byte[] localExtraData=new byte[extraFieldLen];    archive.readFully(localExtraData);    ze.setExtra(localExtraData);    dataOffsets.put(ze,new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH + 2+ 2+ fileNameLen+ extraFieldLen));  }}  }
class C{  public Period multipliedBy(int scalar){  if (this == ZERO || scalar == 1) {    return this;  }  int[] values=getValues();  for (int i=0; i < values.length; i++) {    values[i]=FieldUtils.safeMultiply(values[i],scalar);  }  return new Period(values,getPeriodType());}  }
class C{  protected int layoutRow(FlowView fv,int rowIndex,int p0){  int p1=super.layoutRow(fv,rowIndex,p0);  View row=fv.getView(rowIndex);  Document doc=fv.getDocument();  Object i18nFlag=doc.getProperty(AbstractDocument.I18NProperty);  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    int n=row.getViewCount();    if (n > 1) {      AbstractDocument d=(AbstractDocument)fv.getDocument();      Element bidiRoot=d.getBidiRootElement();      byte[] levels=new byte[n];      View[] reorder=new View[n];      for (int i=0; i < n; i++) {        View v=row.getView(i);        int bidiIndex=bidiRoot.getElementIndex(v.getStartOffset());        Element bidiElem=bidiRoot.getElement(bidiIndex);        levels[i]=(byte)StyleConstants.getBidiLevel(bidiElem.getAttributes());        reorder[i]=v;      }      BidiUtils.reorderVisually(levels,reorder);      row.replace(0,n,reorder);    }  }  return p1;}  }
class C{  public static void putUnsignedShort(ByteBuffer bb,int v){  bb.putShort((short)(v & 0xffff));}  }
class C{  private void createDefaultRelationship(final String relationshipTypeConstant,final String relationshipArcheType,final GameData data) throws GameParseException {  final RelationshipType relationshipType=new RelationshipType(relationshipTypeConstant,data);  final RelationshipTypeAttachment at=new RelationshipTypeAttachment(Constants.RELATIONSHIPTYPE_ATTACHMENT_NAME,relationshipType,data);  at.setArcheType(relationshipArcheType);  relationshipType.addAttachment(Constants.RELATIONSHIPTYPE_ATTACHMENT_NAME,at);  addRelationshipType(relationshipType);}  }
class C{  public void testConstructor8(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque((ReentrantLock)null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public ParsedURLData(URL url){  protocol=url.getProtocol();  if ((protocol != null) && (protocol.length() == 0))   protocol=null;  host=url.getHost();  if ((host != null) && (host.length() == 0))   host=null;  port=url.getPort();  path=url.getFile();  if ((path != null) && (path.length() == 0))   path=null;  ref=url.getRef();  if ((ref != null) && (ref.length() == 0))   ref=null;}  }
class C{  public TreeParameterModel(TreeModel tree,Parameter parameter,boolean includeRoot,Intent intent){  super("treeParameterModel");  this.tree=tree;  this.parameter=parameter;  this.includeRoot=includeRoot;  this.intent=intent;  int dim=parameter.getDimension();  int treeSize=getParameterSize();  if (dim != treeSize) {    parameter.setDimension(treeSize);  }  addModel(tree);  addVariable(parameter);  rootNodeNumber=new Parameter.Default(parameter.getId() + ".rootNodeNumber");  rootNodeNumber.setParameterValue(0,tree.getRoot().getNumber());  addVariable(rootNodeNumber);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String strong;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("code");  testEmployee=elementList.item(1);  strong=testEmployee.getNodeName();  assertEqualsAutoCase("element","nodename","code",strong);  strong=((Element)testEmployee).getTagName();  assertEqualsAutoCase("element","tagname","code",strong);}  }
class C{  public void startAutoScroll(String increment){  this.autoScrolling=true;  this.autoScrollIncrement=increment;}  }
class C{  MiniEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;}  }
class C{  private PlotState createPlotStateObject(String[] args,ListIterator<String> inputIterator){  int lineNr=inputIterator.nextIndex();  HashMap<String,KeyValue> localCopyOfValuesCache=copyHashMap(tempPlotValuesCache);  if (args != null) {    for (int i=1; i < args.length; i++) {      String[] split=args[i].split("=");      if (split.length == 1) {        split=new String[]{split[0],""};      }      localCopyOfValuesCache.put(split[0],new KeyValue(split[0],split[1],lineNr));    }  }  if (localCopyOfValuesCache.get(PlotConstants.DATA) == null) {    localCopyOfValuesCache.put(PlotConstants.DATA,new KeyValue(PlotConstants.DATA,PlotConstants.DEFAULT_VALUE,lineNr));  }  PlotState newPlotState=new PlotState(lineNr,localCopyOfValuesCache);  return newPlotState;}  }
class C{  public void addMarker(){  ClusterOrder order=getClusterOrder();  DBIDSelection selContext=context.getSelection();  if (selContext != null) {    DBIDs selection=DBIDUtil.ensureSet(selContext.getSelectedIds());    final double width=plotwidth / order.size();    int begin=-1, j=0;    for (DBIDIter it=order.iter(); it.valid(); it.advance(), j++) {      if (selection.contains(it)) {        if (begin == -1) {          begin=j;        }      } else {        if (begin != -1) {          Element marker=addMarkerRect(begin * width,(j - begin) * width);          SVGUtil.addCSSClass(marker,CSS_MARKER);          mtag.appendChild(marker);          begin=-1;        }      }    }    if (begin != -1) {      Element marker=addMarkerRect(begin * width,(order.size() - begin) * width);      SVGUtil.addCSSClass(marker,CSS_MARKER);      mtag.appendChild(marker);    }  }}  }
class C{  public boolean hasRecovered(){  return limit >= initialLimit;}  }
class C{  public void reset(){  edge_index.clear();}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  public void receiveErrorsetContext(java.lang.Exception e){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FillArrayDataInsn(Rop opcode,SourcePosition position,RegisterSpecList sources,ArrayList<Constant> initValues,Constant cst){  super(opcode,position,null,sources);  if (opcode.getBranchingness() != Rop.BRANCH_NONE) {    throw new IllegalArgumentException("bogus branchingness");  }  this.initValues=initValues;  this.arrayType=cst;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:22.660 -0500",hash_original_method="BBCDAD7BF06FB621822DBBAD11355700",hash_generated_method="BDAAB55570B432722AF7AB079E5FB145") @Override public final int hashCode(){  return super.hashCode();}  }
class C{  public void updatePlayer(Player player,PlayerContainerData data){  if (data.getPlaying() != null && displays.containsKey(data.getPlaying())) {    displays.get(data.getPlaying()).setScoreboard(player);  } else {    defaultDisplay.setScoreboard(player);  }}  }
class C{  public static void cleanupAssociatedMaskResources(DbClient dbClient,ExportMask exportMask){  List<ExportGroup> exportGroups=ExportMaskUtils.getExportGroups(dbClient,exportMask);  if (exportGroups != null) {    for (    ExportGroup exportGroup : exportGroups) {      exportGroup.removeExportMask(exportMask.getId().toString());      if (exportMask.getUserAddedVolumes() != null) {        Set<URI> removeSet=new HashSet<>();        TreeMultimap<String,URI> volumesToExportMasks=buildVolumesToExportMasksMap(dbClient,exportGroup);        for (        String volumeURIString : exportMask.getUserAddedVolumes().values()) {          if (!volumeIsInAnotherExportMask(exportMask,volumeURIString,volumesToExportMasks)) {            URI volumeURI=URI.create(volumeURIString);            removeSet.add(volumeURI);          }        }      }    }    dbClient.updateObject(exportGroups);  }}  }
class C{  public ClockEntry(ClockEntry other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.version=other.version;}  }
class C{  private String readName(){  final byte[] stream_=this.stream;  int start=loc;  while (loc < stream_.length && PDFFile.isRegularCharacter(stream_[loc])) {    loc++;  }  return new String(stream_,start,loc - start);}  }
class C{  protected boolean Step() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean doubleSlash=tokenIs('/');  if (doubleSlash) {    nextToken();    appendOp(2,OpCodes.FROM_DESCENDANTS_OR_SELF);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODETYPE_NODE);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  }  if (tokenIs(".")) {    nextToken();    if (tokenIs('[')) {      error(XPATHErrorResources.ER_PREDICATE_ILLEGAL_SYNTAX,null);    }    appendOp(4,OpCodes.FROM_SELF);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs("..")) {    nextToken();    appendOp(4,OpCodes.FROM_PARENT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_NODE);  } else   if (tokenIs('*') || tokenIs('@') || tokenIs('_')|| (m_token != null && Character.isLetter(m_token.charAt(0)))) {    Basis();    while (tokenIs('[')) {      Predicate();    }    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  } else {    if (doubleSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }    return false;  }  return true;}  }
class C{  public void unGroup(final ViewGroupNode vgn,final boolean selectConstituents){  for (  ScreenElement element : vgn.getGroupedObjects()) {    element.setPickable(true);    if (selectConstituents) {      selectionModel.add(element);      element.setGrouped(false);    }  }  vgn.removeFromParent();}  }
class C{  protected void writeCharSequence(CharSequence seq,CharBuf buffer){  if (seq.length() > 0) {    buffer.addJsonEscapedString(seq.toString(),disableUnicodeEscaping);  } else {    buffer.addChars(EMPTY_STRING_CHARS);  }}  }
class C{  public static void main(String[] argv){  ArgParser ap=new ArgParser("SLOC");  if (argv.length == 0) {    ap.bail("Counts ';' and '}' to sum up Source Lines Of Code\nUsage: java com.bbn.openmap.util.wanderer.SLOC <dir>",false);  }  ap.parse(argv);  String[] dirs=argv;  SLOC sloc=new SLOC();  Wanderer wanderer=new Wanderer(sloc);  int runningTotal=0;  for (int i=0; i < dirs.length; i++) {    sloc.setSLOC(0);    wanderer.handleEntry(new File(dirs[i]));    getLogger().info("Source Lines of Code in " + dirs[i] + " = "+ sloc.getSLOC());    runningTotal+=sloc.getSLOC();  }  if (dirs.length > 1) {    getLogger().info("Total Source Lines of Code in all directories = " + runningTotal);  }}  }
class C{  public Stream<T> stream(){  return topic.stream();}  }
class C{  public UDAnimatorSet cancel(){  final AnimatorSet animatorSet=getAnimatorSet();  if (animatorSet != null) {    if (animatorSet.isStarted()) {      animatorSet.cancel();      animatorSet.setupEndValues();    }  }  if (mTarget != null) {    mTarget.cancelAnimation();  }  return this;}  }
class C{  public JSearchPanel(Visualization vis,String group,String searchGroup,String field,boolean autoIndex,boolean monitorKeystrokes){  this(vis,group,searchGroup,new String[]{field},autoIndex,monitorKeystrokes);}  }
class C{  public SelectionColorChooserHandler(DrawingEditor editor,AttributeKey<Color> key,JColorChooser colorChooser,JPopupMenu popupMenu){  super(editor);  this.key=key;  this.colorChooser=colorChooser;  this.popupMenu=popupMenu;  colorChooser.getSelectionModel().addChangeListener(this);  updateEnabledState();}  }
class C{  public void propagateMouseEventsToParent(){  this.addEventHandler(MouseEvent.ANY,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HashCodeBuilder append(final char[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final char element : array) {      append(element);    }  }  return this;}  }
class C{  public void onCloseMenu(){  selectedMenuBarItem.setNormalState();  selectedMenuBarItem=null;  lockLayer=null;}  }
class C{  protected void drawHorizontalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){  ValueAxis axis=getRangeAxis();  if (getOrientation() == PlotOrientation.HORIZONTAL) {    axis=getDomainAxis();  }  if (axis.getRange().contains(value)) {    double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);    Line2D line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);    g2.setStroke(stroke);    g2.setPaint(paint);    g2.draw(line);  }}  }
class C{  public LZMA2Options(int preset) throws UnsupportedOptionsException {  setPreset(preset);}  }
class C{  public boolean isEnableAntialiasing(){  return false;}  }
class C{  public void init(){  mTapToRetryEnabled=false;  mMaxTapToRetryAttempts=MAX_TAP_TO_RETRY_ATTEMPTS;  reset();}  }
class C{  @Override public net.floodlightcontroller.core.IListener.Command reconcileFlows(ArrayList<OFMatchReconcile> ofmRcList){  if (lds != null) {    links=new HashMap<Link,LinkInfo>();    if (lds.getLinks() != null)     links.putAll(lds.getLinks());    for (    OFMatchReconcile ofmr : ofmRcList) {      if (ofmr.rcAction.equals(OFMatchReconcile.ReconcileAction.UPDATE_PATH)) {        IOFSwitch sw=floodlightProvider.getSwitch(ofmr.ofmWithSwDpid.getSwitchDataPathId());        Map<Short,List<OFMatch>> invalidBaseIngressAndMatches=new HashMap<Short,List<OFMatch>>();        List<OFFlowStatisticsReply> flows=getFlows(sw,ofmr.outPort);        for (        OFFlowStatisticsReply flow : flows) {          OFMatch match=flow.getMatch();          if (invalidBaseIngressAndMatches.containsKey(match.getInputPort()))           invalidBaseIngressAndMatches.get(match.getInputPort()).add(match); else {            List<OFMatch> matches=new ArrayList<OFMatch>();            matches.add(match);            invalidBaseIngressAndMatches.put(match.getInputPort(),matches);          }        }        if (!flows.isEmpty()) {          log.debug("Removing flows on switch : " + sw.getId() + " with outport: "+ ofmr.outPort);          clearFlowMods(sw,ofmr.outPort);        }        Map<IOFSwitch,Map<Short,List<OFMatch>>> neighborSwitches=new HashMap<IOFSwitch,Map<Short,List<OFMatch>>>();        for (        Link link : links.keySet()) {          if (link.getDst() == sw.getId()) {            for (            Entry<Short,List<OFMatch>> invalidBaseIngressAndMatch : invalidBaseIngressAndMatches.entrySet()) {              if (link.getDstPort() == invalidBaseIngressAndMatch.getKey()) {                Map<Short,List<OFMatch>> invalidNeighborOutportAndMatch=new HashMap<Short,List<OFMatch>>();                invalidNeighborOutportAndMatch.put(link.getSrcPort(),invalidBaseIngressAndMatch.getValue());                neighborSwitches.put(floodlightProvider.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);              }            }          }        }        log.debug("We have " + neighborSwitches.size() + " neighboring switches to deal with!");        for (        IOFSwitch neighborSwitch : neighborSwitches.keySet()) {          log.debug("NeighborSwitch ID : " + neighborSwitch.getId());          if (neighborSwitches.get(neighborSwitch) != null)           deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));        }      }      return Command.CONTINUE;    }  } else {    log.error("Link Discovery Service Is Null");  }  return Command.CONTINUE;}  }
class C{  public static void process(SsaMethod ssaMethod){  new EscapeAnalysis(ssaMethod).run();}  }
class C{  public void mouseDragged(MouseEvent e){  if (m_draggedNode == null || e.getSource() != m_draggedNode) {    if (e.getSource() instanceof WFNode) {      WFNode node=(WFNode)e.getSource();      if (node.isEditable())       m_draggedNode=node;      m_draggedStart=null;    }  }  if (m_draggedNode != null) {    m_dragged=true;    if (m_draggedStart == null)     m_draggedStart=SwingUtilities.convertPoint(m_draggedNode,e.getX(),e.getY(),this);    Point mousePosition=SwingUtilities.convertPoint(m_draggedNode,e.getX(),e.getY(),this);    int xDelta=mousePosition.x - m_draggedStart.x;    int yDelta=mousePosition.y - m_draggedStart.y;    Point newLocation=m_draggedNode.getLocation();    newLocation.x+=xDelta;    if (newLocation.x < 0)     newLocation.x=0;    newLocation.y+=yDelta;    if (newLocation.y < 0)     newLocation.y=0;    m_draggedNode.setLocation(newLocation.x,newLocation.y);    m_draggedStart=mousePosition;    invalidate();    validate();    repaint();  }}  }
class C{  public PostMethod buildPreapprovalRequest() throws DOMException, ParserConfigurationException, TransformerException {  final Document doc=createBody("PreapprovalRequest");  final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'Z'");  addElement(doc.getDocumentElement(),"startingDate",sdf.format(new Date()));  return createPostMethod(doc,"Preapproval");}  }
class C{  public void keyReleased(final int keyCode){  keyRepeatCharged=false;  longPressCharged=false;  if (impl.getCurrentForm() == null) {    return;  }  if (!multiKeyMode) {    if (keyCode != lastKeyPressed) {      if (keyCode != previousKeyPressed) {        return;      } else {        previousKeyPressed=0;      }    } else {      lastKeyPressed=0;    }  }  addSingleArgumentEvent(KEY_RELEASED,keyCode);}  }
class C{  private void cmd_export(){  String PaymentRule=((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  try {    JFileChooser fc=new JFileChooser();    fc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Export"));    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);    fc.setMultiSelectionEnabled(false);    fc.setSelectedFile(new java.io.File("paymentExport.txt"));    if (fc.showSaveDialog(panel) != JFileChooser.APPROVE_OPTION)     return;    int no=0;    StringBuffer err=new StringBuffer("");    if (m_PaymentExportClass == null || m_PaymentExportClass.trim().length() == 0) {      m_PaymentExportClass="org.eevolution.util.HRGenericPaymentExport";    }    HRPaymentExport custom=null;    try {      Class<?> clazz=Class.forName(m_PaymentExportClass);      custom=(HRPaymentExport)clazz.newInstance();      no=custom.exportToFile(m_checks,fc.getSelectedFile(),err);    } catch (    ClassNotFoundException e) {      no=-1;      err.append("No custom PaymentExport class " + m_PaymentExportClass + " - "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }catch (    Exception e) {      no=-1;      err.append("Error in " + m_PaymentExportClass + " check log, "+ e.toString());      log.log(Level.SEVERE,err.toString(),e);    }    if (no >= 0) {      ADialog.info(m_WindowNo,panel,"Saved",Msg.getMsg(Env.getCtx(),"NoOfLines") + "=" + no);      if (ADialog.ask(m_WindowNo,panel,"VPayPrintSuccess?")) {        MHRPaySelectionCheck.confirmPrint(m_checks,m_batch);      }    } else {      ADialog.error(m_WindowNo,panel,"Error",err.toString());    }    dispose();  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);  }}  }
class C{  public boolean fireMapMouseMoved(MouseEvent evt){  if (DEBUG_DETAIL) {    logger.fine("MapMouseSupport: fireMapMouseMoved");  }  boolean consumed=false;  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_MOVED) > 0) {    evt=new MapMouseEvent(getParentMode(),evt);    Iterator<MapMouseListener> it=iterator();    while (it.hasNext()) {      MapMouseListener target=it.next();      if (consumed) {        target.mouseMoved();      } else {        consumed=target.mouseMoved(evt);      }    }  }  consumed&=consumeEvents;  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_MOVED) == 0));  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {    proxy.mouseMoved(evt);    consumed=true;  }  return consumed;}  }
class C{  void _m01(float m01){  this.m01=m01;}  }
class C{  public static Set<String> toKeySet(Map<String,?> map,Comparator<String> comparator){  Set<String> keys;  if (comparator == null)   keys=new LinkedHashSet<>(); else   keys=new TreeSet<>(comparator);  keys.addAll(map.keySet());  return keys;}  }
class C{  private void updateBorder(){  m_hexPanel.setBorder(new TitledBorder(String.format("Binary data of '%s'",m_module.getConfiguration().getName())));}  }
class C{  public static <E,T,U extends T,V extends T>T inject(E[] self,U initialValue,@ClosureParams(value=FromString.class,options="U,E") Closure<V> closure){  Object[] params=new Object[2];  T value=initialValue;  for (  Object next : self) {    params[0]=value;    params[1]=next;    value=closure.call(params);  }  return value;}  }
class C{  @Around("execution(* rocks.inspectit.server.service.*.*(..))") public Object logServiceException(ProceedingJoinPoint jp) throws Exception {  try {    return jp.proceed();  } catch (  BusinessException e) {    if (log.isDebugEnabled()) {      log.debug("BusinessException thrown in the service method " + jp.getSignature() + " executed with following parameters: "+ Arrays.toString(jp.getArgs())+ ".",e);    }    e.setServiceMethodSignature(jp.getSignature().toString());    throw e;  }catch (  RemoteException e) {    log.warn("Exception thrown in the service method " + jp.getSignature() + " executed with following parameters: "+ Arrays.toString(jp.getArgs())+ ". Original exception class is: "+ e.getOriginalExceptionClass(),e);    e.setServiceMethodSignature(jp.getSignature().toString());    throw e;  }catch (  Throwable t) {    log.warn("Exception thrown in the service method " + jp.getSignature() + " executed with following parameters: "+ Arrays.toString(jp.getArgs())+ ".",t);    RemoteException transformException=transformException(t,new ArrayList<Throwable>());    transformException.setServiceMethodSignature(jp.getSignature().toString());    throw transformException;  }}  }
class C{  public static void main(String[] args){  sacrificial=Display2D.isMacOSX();  if (!doNew(null,true) && !SimApplet.isApplet)   System.exit(0);}  }
class C{  public String attr_current() throws IOException {  return read("attr/current");}  }
class C{  public static String toString(Float arg,int precision){  return toString("%." + precision + "f",arg);}  }
class C{  public static void main(String[] args){  try {    new HadoopPopularWordsTest().runWordCountConfigBasedHadoopJob();  } catch (  Exception e) {    X.println(">>> Failed to run word count example: " + e.getMessage());  }  System.exit(0);}  }
class C{  public MassData(MassData md){  mass=md.mass;  I=md.I;  center=md.center.clone();}  }
class C{  protected void completeCurrentTextNode(){  if (stripWhitespaceText) {    boolean whitespace=true;    for (int i=0, size=textBuffer.length(); i < size; i++) {      if (!Character.isWhitespace(textBuffer.charAt(i))) {        whitespace=false;        break;      }    }    if (!whitespace) {      currentElement.addText(textBuffer.toString());    }  } else {    currentElement.addText(textBuffer.toString());  }  textBuffer.setLength(0);  textInTextBuffer=false;}  }
class C{  @Override protected void onFinishInflate(){  mPagedView=(AppsCustomizePagedView)findViewById(R.id.apps_customize_pane_content);  mContent=findViewById(R.id.content);}  }
class C{  @Override public void onStart(){  super.onStart();  if (mCheckingAnswer) {    populateRecyclerViewWithCorrectAnswers(R.id.answerListSelfCheck,null);  }}  }
class C{  public H263Stream() throws IOException {  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  public static void main(String... args) throws Exception {  execute(args[0]);}  }
class C{  protected Node copyInto(Node n){  GenericElement ge=(GenericElement)super.copyInto(n);  ge.nodeName=nodeName;  return n;}  }
class C{  public void pause(){  if (!isPausing) {    int result=mAudioManager.requestAudioFocus(mAfChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      Log.i("AUDIOFOCUS_REQUEST_GRANTED");    }    if (mIsMuteStream) {      mCurrentVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);      if (mCurrentVolume > 0) {        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,0,0);      }    }    isPausing=true;  }}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private static boolean addInteresadosValidados(String entidad,String sessionID,List inter,Integer bookID,int registerID,FolderDataSession data) throws HibernateException {  FlushFdrInter flushFdrInter=null;  boolean interesadosValidados=false;  int order=1;  for (Iterator it=inter.iterator(); it.hasNext(); ) {    flushFdrInter=(FlushFdrInter)it.next();    int interId=flushFdrInter.getInterId();    String interName=flushFdrInter.getInterName();    int domId=flushFdrInter.getDomId();    if ((interId > 0) && StringUtils.isNotBlank(interName) && (getValidateInteresadoInfo(sessionID,interId,null,entidad))) {      try {        if (interId != 0 && flushFdrInter.getDomId() != 0 && !getValidateInteresadoInfo(sessionID,interId,new Integer(domId),entidad)) {          domId=0;        }        if (data.isCreate()) {          if (order == 1) {            data.setNewAttributeValue("fld9",flushFdrInter.getInterName());          }        } else {          if (order == 1) {            Object oldFld9=data.getOldAttributeValue("fld9");            data.setOldAttributeValue("fld9",flushFdrInter.getInterName());            data.changedPut(new Integer(9),new Object[]{oldFld9,data.getOldAttributeValue("fld9")});          }        }        InteresadoManager interesadoManager=(InteresadoManager)ISicresBeansProvider.getInstance().getInteresadoManager();        InteresadoVO interesado=populateInteresado(null,bookID.toString(),String.valueOf(registerID),flushFdrInter,order++);        interesadoManager.save(interesado);        interesadosValidados=true;      } catch (      Exception e) {        log.debug("Error al insertar un tercero en AddInteresadosValidados ",e);      }    } else     if (interId == -1 && !data.isCreate()) {      data.setOldAttributeValue("fld9",null);    }  }  return interesadosValidados;}  }
class C{  @Override public IStriterator map(Object client,Method method){  return addFilter(new Mapper(client,method));}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof BRNode || child instanceof TabNode || child instanceof CDATANode) {    if (content == null) {      content=new ArrayList<TextNode>();    }    content.add((TextNode)child);  } else {    super.addChild(child);    return;  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  public void shrink(){  if (c.length == length) {    return;  }  char[] newc=new char[length];  System.arraycopy(c,0,newc,0,length);  c=newc;}  }
class C{  public boolean isSecurityEnabled(HttpServletRequest request){  Boolean isSecurityEnabled=true;  String enableSecuritySpelExpression=configurationHelper.getProperty(ConfigurationValue.SECURITY_ENABLED_SPEL_EXPRESSION);  if (StringUtils.isNotBlank(enableSecuritySpelExpression)) {    Map<String,Object> variables=new HashMap<>();    variables.put("request",request);    isSecurityEnabled=spelExpressionHelper.evaluate(enableSecuritySpelExpression,Boolean.class,variables);  }  return isSecurityEnabled;}  }
class C{  public void rescale(double sx,double sy){  for (int i=0; i < data.size(); i+=2) {    data.set(i,sx * data.get(i));    data.set(i + 1,sy * data.get(i + 1));  }  maxx*=sx;  maxy*=sy;}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  protected Vector secureProduct(Matrix a){  int n=a.rows();  int m=a.columns();  double[] vectorComponents=new double[m];  for (int j=0; j < m; j++) {    vectorComponents[j]=0;    for (int i=0; i < n; i++)     vectorComponents[j]+=components[i] * a.components[i][j];  }  return new Vector(vectorComponents);}  }
class C{  public OMRaster(int x1,int y1,int w,int h,int[] pix){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_DIRECT);  x=x1;  y=y1;  width=w;  height=h;  pixels=pix;  if (pixels == null || pixels.length == 0)   pixels=new int[height * width];}  }
class C{  public Cursor convertSVGCursor(Element e,Value l){  int nValues=l.getLength();  Element cursorElement=null;  for (int i=0; i < nValues - 1; i++) {    Value cursorValue=l.item(i);    if (cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_URI) {      String uri=cursorValue.getStringValue();      try {        cursorElement=ctx.getReferencedElement(e,uri);      } catch (      BridgeException be) {        if (!ERR_URI_BAD_TARGET.equals(be.getCode())) {          throw be;        }      }      if (cursorElement != null) {        String cursorNS=cursorElement.getNamespaceURI();        if (SVGConstants.SVG_NAMESPACE_URI.equals(cursorNS) && SVGConstants.SVG_CURSOR_TAG.equals(cursorElement.getLocalName())) {          Cursor c=convertSVGCursorElement(cursorElement);          if (c != null) {            return c;          }        }      }    }  }  Value cursorValue=l.item(nValues - 1);  String cursorStr=SVGConstants.SVG_AUTO_VALUE;  if (cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    cursorStr=cursorValue.getStringValue();  }  return convertBuiltInCursor(e,cursorStr);}  }
class C{  @Override public boolean onRequestSendAccessibilityEvent(View child,AccessibilityEvent event){  AccessibilityEvent record=AccessibilityEvent.obtain();  super.onInitializeAccessibilityEvent(record);  int priority=(Integer)child.getTag();  String priorityStr="Priority: " + priority;  record.setContentDescription(priorityStr);  event.appendRecord(record);  return true;}  }
class C{  public GroupChangeEvent(){  super(Events.GROUP_CHANGE);}  }
class C{  private void updateThinProperty(VPlexApiClient client,StorageSystem vplexSystem,Volume vplexVolume){  if (vplexVolume != null && verifyVplexSupportsThinProvisioning(vplexSystem)) {    _log.info("Checking if thinly provisioned property changed after mirror operation...");    VPlexVirtualVolumeInfo virtualVolumeInfo=client.findVirtualVolume(vplexVolume.getDeviceLabel(),vplexVolume.getNativeId());    if (virtualVolumeInfo != null) {      if (VPlexApiConstants.TRUE.equalsIgnoreCase(virtualVolumeInfo.getThinCapable())) {        VirtualPool vpool=getDataObject(VirtualPool.class,vplexVolume.getVirtualPool(),_dbClient);        if (vpool != null) {          boolean doEnableThin=VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType());          if (doEnableThin) {            client.setVirtualVolumeThinEnabled(virtualVolumeInfo);          }        }      }      if (virtualVolumeInfo.isThinEnabled() != vplexVolume.getThinlyProvisioned()) {        _log.info("Thin provisioned setting changed after mirror operation to " + virtualVolumeInfo.isThinEnabled());        vplexVolume.setThinlyProvisioned(virtualVolumeInfo.isThinEnabled());        _dbClient.updateObject(vplexVolume);      }    }  }}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public static double sum(double[] arr){  double tot=0;  for (int i=0, n=arr.length; i < n; i++) {    tot+=arr[i];  }  return tot;}  }
class C{  public static boolean put(String name,String key,Object value){  if (StringUtils.isEmpty(key) || null == value) {    throw new RuntimeException("key or value cannot be null.");  }  SharedPreferences.Editor editor=getSharedPreferences(name).edit();  if (value instanceof String) {    editor.putString(key,String.valueOf(value));  } else   if (value instanceof Boolean) {    editor.putBoolean(key,Boolean.parseBoolean(value.toString()));  } else   if (value instanceof Float) {    editor.putFloat(key,(Float)value);  } else   if (value instanceof Integer) {    editor.putInt(key,(Integer)value);  } else   if (value instanceof Long) {    editor.putLong(key,(Long)value);  }  return editor.commit();}  }
class C{  public static URI id(DataObjectRestRep value){  return value != null ? value.getId() : null;}  }
class C{  static GramBooleanQuery combine(GramBooleanQuery query,List<String> list){  return computeConjunction(query,listNode(list));}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor oldCursor=super.swapCursor(newCursor);  if (super.getCount() > 0) {    this.mArrayImpl=null;  }  return oldCursor;}  }
class C{  public static void deployRelease(final File releaseFile){  if (yacyBuildProperties.isPkgManager()) {    return;  }  try {    final Switchboard sb=Switchboard.getSwitchboard();    ConcurrentLog.info("UPDATE","INITIATED");    try {      tarTools.unTar(tarTools.getInputStream(releaseFile),sb.getDataPath() + "/DATA/RELEASE/".replace("/",File.separator));    } catch (    final Exception e) {      ConcurrentLog.severe("UNTAR","failed",e);    }    String script=null;    String scriptFileName=null;    if (OS.isMacArchitecture) {      final File InfoPlistSource=new File(sb.getDataPath(),"DATA/RELEASE/yacy/addon/YaCy.app/Contents/Info.plist");      final File InfoPlistDestination=new File(sb.getAppPath(),"addon/YaCy.app/Contents/Info.plist");      if (InfoPlistSource.exists() && InfoPlistDestination.exists()) {        Files.copy(InfoPlistSource,InfoPlistDestination);        ConcurrentLog.info("UPDATE","replaced Info.plist");      }    }    if (OS.isWindows) {      final File startType=new File(sb.getDataPath(),"DATA/yacy.noconsole".replace("/",File.separator));      String starterFile="startYACY_debug.bat";      if (startType.exists())       starterFile="startYACY.bat";      if (startParameter.startsWith("-gui"))       starterFile+=" " + startParameter;      script="@echo off" + serverCore.CRLF_STRING + "title YaCy updater"+ serverCore.CRLF_STRING+ "set loading=YACY UPDATER"+ serverCore.CRLF_STRING+ "echo %loading%"+ serverCore.CRLF_STRING+ "cd \""+ sb.getDataPath().toString()+ "/DATA/RELEASE/".replace("/",File.separator)+ "\""+ serverCore.CRLF_STRING+ ":WAIT"+ serverCore.CRLF_STRING+ "set loading=%loading%."+ serverCore.CRLF_STRING+ "cls"+ serverCore.CRLF_STRING+ "echo %loading%"+ serverCore.CRLF_STRING+ "ping -n 2 127.0.0.1 >nul"+ serverCore.CRLF_STRING+ "IF exist ..\\yacy.running goto WAIT"+ serverCore.CRLF_STRING+ "IF not exist yacy goto NODATA"+ serverCore.CRLF_STRING+ "cd yacy"+ serverCore.CRLF_STRING+ "del /Q \""+ sb.getAppPath().toString()+ "\\lib\\*\"  >nul"+ serverCore.CRLF_STRING+ "xcopy *.* \""+ sb.getAppPath().toString()+ "\" /E /Y >nul"+ serverCore.CRLF_STRING+ "cd .."+ serverCore.CRLF_STRING+ "rd yacy /S /Q"+ serverCore.CRLF_STRING+ "goto END"+ serverCore.CRLF_STRING+ ":NODATA"+ serverCore.CRLF_STRING+ "echo YACY UPDATER ERROR: NO UPDATE SOURCE FILES ON FILESYSTEM"+ serverCore.CRLF_STRING+ "pause"+ serverCore.CRLF_STRING+ ":END"+ serverCore.CRLF_STRING+ "cd \""+ sb.getAppPath().toString()+ "\""+ serverCore.CRLF_STRING+ "start /MIN CMD /C "+ starterFile+ serverCore.CRLF_STRING;      scriptFileName="update.bat";    } else {      script="#!/bin/sh" + serverCore.LF_STRING + "cd "+ sb.getDataPath()+ "/DATA/RELEASE/"+ serverCore.LF_STRING+ "while [ -f ../yacy.running ]; do"+ serverCore.LF_STRING+ "sleep 1"+ serverCore.LF_STRING+ "done"+ serverCore.LF_STRING+ "rm "+ sb.getAppPath().toString()+ "/lib/*"+ serverCore.LF_STRING+ "cp -Rf yacy/* "+ sb.getAppPath().toString()+ serverCore.LF_STRING+ "rm -Rf yacy"+ serverCore.LF_STRING+ "cd "+ sb.getAppPath().toString()+ serverCore.LF_STRING+ "chmod 755 *.sh"+ serverCore.LF_STRING+ "chmod 755 bin/*.sh"+ serverCore.LF_STRING+ "nohup ./startYACY.sh "+ (startParameter.startsWith("-gui") ? startParameter : "")+ " > /dev/null"+ serverCore.LF_STRING;      scriptFileName="update.sh";    }    final File scriptFile=new File(sb.getDataPath(),"DATA/RELEASE/".replace("/",File.separator) + scriptFileName);    OS.deployScript(scriptFile,script);    ConcurrentLog.info("UPDATE","wrote update-script to " + scriptFile.getAbsolutePath());    OS.execAsynchronous(scriptFile);    ConcurrentLog.info("UPDATE","script is running");    sb.setConfig("update.time.deploy",System.currentTimeMillis());    sb.terminate(10,"auto-deploy for " + releaseFile.getName());  } catch (  final IOException e) {    ConcurrentLog.severe("UPDATE","update failed",e);  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/export") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateFSExportRules(@PathParam("id") URI id,@QueryParam("subDir") String subDir,@QueryParam("unmountExport") boolean unmountExport,FileShareExportUpdateParams param) throws InternalException {  _log.info("Update FS Export Rules : request received for {}  with {}",id,param);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.NFS.name()) && !vpool.getProtocols().contains(StorageProtocol.File.NFSv4.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool Doesnt support " + StorageProtocol.File.NFS.name() + " or "+ StorageProtocol.File.NFSv4+ " protocol");  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  String path=fs.getPath();  _log.info("Export path found {} ",path);  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SYSTEM);  op.setDescription("Filesystem export rules update");  try {    _log.info("Sub Dir Provided {}",subDir);    param.setSubDir(subDir);    ExportVerificationUtility exportVerificationUtility=new ExportVerificationUtility(_dbClient);    exportVerificationUtility.verifyExports(fs,null,param);    _log.info("No Errors found proceeding further {}, {}, {}",new Object[]{_dbClient,fs,param});    FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);    fileServiceApi.updateExportRules(device.getId(),fs.getId(),param,unmountExport,task);    auditOp(OperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),param);  } catch (  URISyntaxException e) {    _log.error("Error Processing Export Updates {}, {}",e.getMessage(),e);  }catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Processing Export Updates {}, {}",e.getMessage(),e);    throw e;  }catch (  Exception e) {    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  public void preStart(){  cluster.subscribe(getSelf(),ClusterEvent.initialStateAsEvents(),MemberEvent.class,UnreachableMember.class);}  }
class C{  public SelectorList parseSelectors(String source) throws CSSException, IOException {  return parser.parseSelectors(new InputSource(new StringReader(source)));}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public PointFileReaderWriter(){}  }
class C{  public void testResourcesAvailable(){  new SpanishAnalyzer().close();}  }
