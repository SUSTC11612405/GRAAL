class C{  public static CreateVariableClause create(String variableType,String variableName,Expression expression){  return new CreateVariableClause(variableType,variableName,expression,false);}  }
class C{  private void validateOneTimeFee(VOPriceModel priceModel,Product product) throws OperationNotPermittedException {  BigDecimal oneTimeFeeNew=priceModel.getOneTimeFee();  BigDecimal oneTimeFeeOld=product.getPriceModel().getOneTimeFee();  if (oneTimeFeeNew.compareTo(BigDecimal.ZERO) != 0) {    if (oneTimeFeeNew.compareTo(oneTimeFeeOld) != 0) {      OperationNotPermittedException onp=new OperationNotPermittedException("One-time fee can not be changed for a subscription-specific price model.");      logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_UNCHANGEABLE_SUBSCRIPTION_ONE_TIME_FEE);      throw onp;    }  } else {    priceModel.setOneTimeFee(oneTimeFeeOld);  }}  }
class C{  @Override protected void initListeners(){  this.startBT.setOnClickListener(this);}  }
class C{  private void buildFirstLine(LinePath path,Rect r){  int[] range=new int[]{-r.left,-r.top,r.right,r.bottom};  int max=-1;  int maxId=0;  for (int i=0; i < 4; i++) {    if (range[i] > max) {      max=range[i];      maxId=i;    }  }switch (maxId) {case 0:    path.setEndPoint(r.left,Utils.nextInt(r.height()) + r.top);  break;case 1:path.setEndPoint(Utils.nextInt(r.width()) + r.left,r.top);break;case 2:path.setEndPoint(r.right,Utils.nextInt(r.height()) + r.top);break;case 3:path.setEndPoint(Utils.nextInt(r.width()) + r.left,r.bottom);break;}path.lineToEnd();}  }
class C{  public void testIsolatedMode() throws Exception {  processTest(DeploymentMode.ISOLATED);}  }
class C{  public Address address(){  return address;}  }
class C{  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder(com.wipro.ats.bdre.imcrawler.mr.Contents other){  return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder(other);}  }
class C{  public ExportOperation(){  this(DEFAULT_KEY);}  }
class C{  private CassandraDaemonTask(final String name,final String configName,final CassandraTaskExecutor executor,final CassandraConfig config,final Capabilities capabilities,final CassandraData data){  super(name,configName,executor,config.getCpus(),config.getMemoryMb(),config.getDiskMb(),VolumeRequirement.VolumeMode.CREATE,config.getDiskType(),Arrays.asList(config.getJmxPort(),config.getApplication().getStoragePort(),config.getApplication().getSslStoragePort(),config.getApplication().getRpcPort(),config.getApplication().getNativeTransportPort()),getDiscoveryInfo(config.getPublishDiscoveryInfo(),config.getApplication().getClusterName(),capabilities,name,config.getApplication().getNativeTransportPort()),data);}  }
class C{  public boolean isRolloverEnabled(){  return rolloverEnabled;}  }
class C{  @Override public void validate(){  if (mAuthenticator == null) {    throw new NullPointerException("Authenticator");  }  if (mExecutors == null) {    throw new NullPointerException("Executors");  }  if (mHttpProvider == null) {    throw new NullPointerException("HttpProvider");  }  if (mSerializer == null) {    throw new NullPointerException("Serializer");  }}  }
class C{  public ObjectNotFoundException(List<LocalizedText> messages,Throwable cause){  super(messages,cause);}  }
class C{  public void removeDataChangeListener(DataChangedListener l){  dataChangeListeners.removeListener(l);}  }
class C{  private void handleHtmlUserRestoreFrame(RequestAndResponse requestAndResponse) throws IOException, ServletException {  addIFrameHeader(requestAndResponse);  if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));  } else   if (isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());  } else {    requestAndResponse.print("<form action=\"/doRestore/\" method=\"POST\" enctype=\"multipart/form-data\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<table class=\"nopadding\"><tr><td>"+ "<input type=\"file\" name=\"file\"/>"+ "</td></tr>"+ "<tr><td>"+ "<input type=\"checkbox\" name=\"reuseIds\" id=\"reuseIds\" checked><label for=\"reuseIds\">"+ servletText.sentenceReuseIds()+ "</label><br>"+ "</td></tr>"+ "<tr><td>"+ "<input type=\"checkbox\" name=\"msWordListFormat\" id=\"msWordListFormat\"><label for=\"msWordListFormat\">"+ servletText.sentenceMsWordListFormat()+ "</label><br>"+ "</td></tr>"+ "<tr><td>"+ "<button class=\"specialbutton withTopMargin\">"+ servletText.buttonRestore()+ "</button>"+ "</td></tr></table>"+ "</form>");  }  addIFrameFooter(requestAndResponse);}  }
class C{  public ExtendedCategoryAxis(String label){  super(label);  this.sublabels=new HashMap();  this.sublabelFont=new Font("SansSerif",Font.PLAIN,10);  this.sublabelPaint=Color.black;}  }
class C{  public static void createTables(SQL... tables) throws AdeException {  for (  SQL table : tables) {    final String sql=String.format("create table %s (%s)",table.toString(),table.create());    ConnectionWrapper.executeDmlDefaultCon(sql);  }}  }
class C{  @Deprecated public static <V1,V2,V3,V4,V5,V6>GridTuple6<V1,V2,V3,V4,V5,V6> t(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4,@Nullable V5 v5,@Nullable V6 v6){  return new GridTuple6<>(v1,v2,v3,v4,v5,v6);}  }
class C{  private void resetPriorities(){  Priority[] priorities=torrentHandle.getPiecePriorities();  for (int i=0; i < priorities.length; i++) {    if (i >= firstPieceIndex && i <= lastPieceIndex) {      torrentHandle.piecePriority(i,Priority.NORMAL);    } else {      torrentHandle.piecePriority(i,Priority.IGNORE);    }  }}  }
class C{  public NativeAppElement findElementByClassName(String className){  return findElement(By.className(className));}  }
class C{  private static void updatePortToNetworkAssociation(Map<NetworkLite,List<StoragePort>> networkPorts,DbClient dbClient){  for (  Map.Entry<NetworkLite,List<StoragePort>> portsForNetwork : networkPorts.entrySet()) {    NetworkAssociationHelper.updatePortAssociations(portsForNetwork.getKey(),portsForNetwork.getValue(),dbClient);  }}  }
class C{  public InfiltrationLane(String sidc){  super(sidc);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace));}  }
class C{  private void reconnect(WebSocketChannel channel,WSURI uri,String protocol){  LOG.entering(CLASS_NAME,"reconnect",new Object[]{uri,protocol});  WebSocketNativeChannel wsChannel=(WebSocketNativeChannel)channel;  wsChannel.redirectUri=uri;  WebSocketCompositeChannel compChannel=(WebSocketCompositeChannel)channel.getParent();  HttpRedirectPolicy option=compChannel.getFollowRedirect();  URI currentURI=channel.getLocation().getURI();  URI redirectURI=uri.getURI();  if ((option != null) && (option.compare(currentURI,redirectURI) != 0)) {    String s=String.format("%s: Cannot redirect from '%s' to '%s'",option,currentURI,redirectURI);    channel.preventFallback=true;    throw new IllegalStateException(s);  }  wsChannel.reconnecting.compareAndSet(false,true);}  }
class C{  public ElasticsearchClient(final Settings.Builder settings){  this.elasticsearchNode=NodeBuilder.nodeBuilder().local(false).settings(settings).node();  this.elasticsearchClient=elasticsearchNode.client();}  }
class C{  public boolean isDone(){  return false;}  }
class C{  public static int roundUpToPowerOfTwo(int i){  i--;  i|=i >>> 1;  i|=i >>> 2;  i|=i >>> 4;  i|=i >>> 8;  i|=i >>> 16;  return i + 1;}  }
class C{  public void storeLogs(File folder){  String path=folder.getAbsolutePath();  mLoggerFolder=new LogThis(path);}  }
class C{  public final boolean hasMedia(){  return mediaComponents != null && mediaComponents.size() > 0;}  }
class C{  private static String hexify(byte bytes[]){  char[] hexDigits={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  StringBuffer buf=new StringBuffer(bytes.length * 2);  for (int i=0; i < bytes.length; ++i) {    if (i != 0) {      buf.append(":");    }    buf.append(hexDigits[(bytes[i] & 0xf0) >> 4]);    buf.append(hexDigits[bytes[i] & 0x0f]);  }  return buf.toString();}  }
class C{  public void add(RegularTimePeriod period,Long volume,boolean side){  if (!this.isEmpty()) {    VolumeItem item0=(VolumeItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new VolumeItem(period,volume,side),true);}  }
class C{  private void processLoginHintParameterIfNeeded(final HttpServletRequest request,final OIDCAuthorizationRequestContext authorizationRequest){  final Object loginHint=authorizationRequest.getLoginHint();  if (loginHint != null) {    OIDCUtils.putSessionAttribute(request,ConnectRequestParameters.LOGIN_HINT,loginHint);    log.debug("Saved login hint {} into session",loginHint);  } else {    OIDCUtils.removeSessionAttribute(request,ConnectRequestParameters.LOGIN_HINT);    log.debug("Removed login hint attribute from session");  }}  }
class C{  @Override public void resumeScan(){  lock.lock();  try {    if (State.PAUSED.equals(state)) {      spiderThread.resumeScan();      state=State.RUNNING;    }  }  finally {    lock.unlock();  }}  }
class C{  private void injectReachableStatusInSystem(StorageSystem storageSystemInDb,Set<String> allProviders,URI newActiveProviderURI,boolean reachable){  StringSet dbSystemAllProviders=storageSystemInDb.getProviders();  if (null != allProviders && !allProviders.isEmpty()) {    if (null != dbSystemAllProviders) {      storageSystemInDb.getProviders().clear();      storageSystemInDb.getProviders().addAll(allProviders);    } else {      StringSet scannedProviders=new StringSet(allProviders);      storageSystemInDb.setProviders(scannedProviders);    }  } else {    storageSystemInDb.getProviders().clear();  }  storageSystemInDb.setReachableStatus(reachable);  if (null != newActiveProviderURI) {    storageSystemInDb.setActiveProviderURI(newActiveProviderURI);  }  if (!reachable) {    storageSystemInDb.setSmisPassword("");    storageSystemInDb.setSmisPortNumber(0);    storageSystemInDb.setSmisProviderIP("");    storageSystemInDb.setSmisUserName("");  }}  }
class C{  @Override public float estimateCost(Rule rule){  return 0.0f;}  }
class C{  private long writeDataToFile(byte[] keyArray,byte[] measureArray) throws CarbonDataWriterException {  long offset=metadataOffset;  try {    metadataOffset+=keyArray.length + measureArray.length;    this.fileDataOutStream.write(keyArray);    this.fileDataOutStream.write(measureArray);  } catch (  IOException exception) {    throw new CarbonDataWriterException("Problem in writing carbon file: ",exception);  }  return offset;}  }
class C{  public Assertion createAssertion(){  AssertionImpl assertion=new AssertionImpl();  return assertion;}  }
class C{  public NotificationChain basicSetFromEndpoint(Endpoint newFromEndpoint,NotificationChain msgs){  Endpoint oldFromEndpoint=fromEndpoint;  fromEndpoint=newFromEndpoint;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,EipPackage.CHANNEL__FROM_ENDPOINT,oldFromEndpoint,newFromEndpoint);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void drawTriangle(Pane pane,ArrayList<Circle> p){  Polygon polygon=new Polygon();  pane.getChildren().add(polygon);  ObservableList<Double> points=polygon.getPoints();  for (int i=0; i < p.size(); i++) {    points.add(p.get(i).getCenterX());    points.add(p.get(i).getCenterY());  }  polygon.setFill(Color.WHITE);  polygon.setStroke(Color.BLACK);}  }
class C{  private static void substituteGenericsAndArrays(Types typeUtils,MutableString snippet,Substitutions substitutions){  for (  MatchResult m : snippet.instancesOf(GENERIC_OR_ARRAY_PATTERN)) {    TypeMirror type=substitutions.get(m.group(1));    if (Strings.isNullOrEmpty(m.group(2))) {      List<TypeMirror> argTypes=Lists.transform(Splitter.on(",").trimResults().splitToList(m.group(3)),substitutions.asFunction());      snippet.replace(m,substitutions.put(parameterisedType(typeUtils,type,argTypes)));    } else {      snippet.replace(m,substitutions.put(typeUtils.getArrayType(type)));    }  }}  }
class C{  public void add(Converter<?> converter){  converters.add(converter);}  }
class C{  private void createClientEntity(){  this.clientId=ClientHelper.createClient(this.requestSpec,this.responseSpec);  ClientHelper.verifyClientCreatedOnServer(this.requestSpec,this.responseSpec,this.clientId);}  }
class C{  public void postViewChange(final PostViewChangeEvent event){  removeStyleName(STYLE_SELECTED);  if (event.getView().equals(view)) {    addStyleName(STYLE_SELECTED);    setEnabled(false);  } else {    setEnabled(true);  }}  }
class C{  public RegexFileFilter(String pattern,IOCase caseSensitivity){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  int flags=0;  if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {    flags=Pattern.CASE_INSENSITIVE;  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("(");  sb.append(this.minLatitude.toString());  sb.append(", ");  sb.append(this.minLongitude.toString());  sb.append(")");  sb.append(", ");  sb.append("(");  sb.append(this.maxLatitude.toString());  sb.append(", ");  sb.append(this.maxLongitude.toString());  sb.append(")");  return sb.toString();}  }
class C{  public double pdf(double x){  if (x < 0)   throw new IllegalArgumentException();  if (x == 0) {    if (alpha == 1.0)     return 1.0 / lambda; else     return 0.0;  }  if (alpha == 1.0)   return Math.exp(-x / lambda) / lambda;  return Math.exp((alpha - 1.0) * Math.log(x / lambda) - x / lambda - Fun.logGamma(alpha)) / lambda;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenDividers[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [divider").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  public void incQueueSize(int delta){  this.stats.incInt(eventQueueSizeId,delta);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private PlatformUser createUser(boolean userIsAdmin,boolean userIsSubscriptionManager){  PlatformUser user=new PlatformUser();  if (userIsAdmin) {    user.setUserId(adminId);    user.setAssignedRoles(createRoleAssignment(user,UserRoleType.ORGANIZATION_ADMIN));    return user;  }  if (userIsSubscriptionManager) {    user.setUserId(subscriptionManagerId);    user.setAssignedRoles(createRoleAssignment(user,UserRoleType.SUBSCRIPTION_MANAGER));    return user;  }  user.setUserId(userId);  return user;}  }
class C{  public TimeZoneUtils(String prefsName){  mPrefsName=prefsName;}  }
class C{  public EditSession undo(@Nullable BlockBag newBlockBag,LocalPlayer player){  return undo(newBlockBag,(Player)player);}  }
class C{  static String stringToIdentifier(String jsonName){  return (CollectionDescriptor.stringToIdentifier(jsonName,true));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("rawtypes") private static void migrateProperties(EntityManager em){  em.getTransaction().begin();  Query propertyCountQuery=em.createNativeQuery("SELECT COUNT(MESSAGE_ID) FROM MESSAGE_PROPERTY",Integer.class);  Integer propertyCount=(Integer)propertyCountQuery.getResultList().get(0);  System.out.println("Number of headers=" + propertyCount);  JpaMigrateQuery.executeUpdate(em,"ALTER TABLE PROPERTY ADD COLUMN MESSAGE_ID BIGINT");  Query propertyQuery=em.createNativeQuery("SELECT MESSAGE_ID, PROPERTIES_ID FROM MESSAGE_PROPERTY");  em.getTransaction().commit();  DelegatingResultList propertyNameList=(DelegatingResultList)propertyQuery.getResultList();  ResultList rl=propertyNameList.getDelegate();  for (int i=0; i < rl.size(); i++) {    Object[] results=(Object[])rl.get(i);    Long messageId=(Long)results[0];    Long propertyId=(Long)results[1];    em.getTransaction().begin();    Query update=em.createNativeQuery("UPDATE PROPERTY SET MESSAGE_ID = ? WHERE ID = ?");    update.setParameter(1,messageId);    update.setParameter(2,propertyId);    int result=update.executeUpdate();    System.out.printf("ExecuteUpdate returned a result=" + result + " for property %d of %d\n",i + 1,propertyCount);    em.getTransaction().commit();  }  em.getTransaction().begin();  System.out.println("Creating index.");  JpaMigrateQuery.executeUpdate(em,"CREATE INDEX SQL100727182411780 ON PROPERTY(MESSAGE_ID)");  em.getTransaction().commit();  em.getTransaction().begin();  System.out.println("Creating foreign key.");  JpaMigrateQuery.executeUpdate(em,"ALTER TABLE PROPERTY ADD CONSTRAINT SQL100727182411780 FOREIGN KEY (MESSAGE_ID) REFERENCES MESSAGE(ID)");  em.getTransaction().commit();  em.getTransaction().begin();  System.out.println("Dropping table.");  JpaMigrateQuery.executeUpdate(em,"DROP TABLE MESSAGE_PROPERTY");  em.getTransaction().commit();}  }
class C{  public static Object readField(final Object target,final String fieldName,final boolean forceAccess) throws IllegalAccessException {  if (target == null) {    throw new IllegalArgumentException("target object must not be null");  }  Class<?> cls=target.getClass();  Field field=FieldUtils.getField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate field " + fieldName + " on "+ cls);  }  return FieldUtils.readField(field,target);}  }
class C{  public static Timestamp toDate(String input,String format){  ToDateParser parser=getDateParser(input,format);  return parser.getResultingTimestamp();}  }
class C{  private void updateServiceForegroundState(){  Log.d(LOG_TAG,"## updateServiceForegroundState");  MXSession session=Matrix.getInstance(getApplicationContext()).getDefaultSession();  if (null == session) {    Log.e(LOG_TAG,"## updateServiceForegroundState(): no session");    return;  }  if ((!mGcmRegistrationManager.useGCM() || !mGcmRegistrationManager.isServerRegistred()) && mGcmRegistrationManager.isBackgroundSyncAllowed() && mGcmRegistrationManager.areDeviceNotificationsAllowed()) {    Log.d(LOG_TAG,"## updateServiceForegroundState : put the service in foreground");    if (-1 == mForegroundServiceIdentifier) {      Notification notification=buildForegroundServiceNotification();      startForeground(NOTIF_ID_FOREGROUND_SERVICE,notification);      mForegroundServiceIdentifier=FOREGROUND_LISTENING_FOR_EVENTS;    }    mIsForeground=true;  } else {    Log.d(LOG_TAG,"## updateServiceForegroundState : put the service in background");    if (FOREGROUND_LISTENING_FOR_EVENTS == mForegroundServiceIdentifier) {      stopForeground(true);      mForegroundServiceIdentifier=-1;    }    mIsForeground=false;  }}  }
class C{  public ComponentMiscITCase(String name){  super(name);}  }
class C{  public static void sendRedirect(HttpServletResponse response,String redirectUrl) throws IllegalArgumentException, IOException {  response.sendRedirect(validateHeader(redirectUrl));}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  protected boolean deleteRecursively(File file){  File[] children;  boolean result=true;  children=file.listFiles();  if (children != null) {    for (int i=0; i < children.length; i++) {      result=result && deleteRecursively(children[i]);    }  }  result=result && file.delete();  return result;}  }
class C{  public void paintLabelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private static Map<String,SchemaObjectMappingDTO> populateObjectSchema(Collection<IdentityStoreObjectMapping> objectMappings) throws DTOMapperException {  Map<String,SchemaObjectMappingDTO> objectSchemaMappings=new HashMap<String,SchemaObjectMappingDTO>();  try {    for (    IdentityStoreObjectMapping objectMapping : objectMappings) {      String objectId=objectMapping.getObjectId();      String objectClass=objectMapping.getObjectClass();      Map<String,String> attributeMappings=new HashMap<String,String>();      for (      IdentityStoreAttributeMapping attributeMapping : objectMapping.getAttributeMappings()) {        attributeMappings.put(attributeMapping.getAttributeId(),attributeMapping.getAttributeName());      }      objectSchemaMappings.put(objectId,new SchemaObjectMappingDTO(objectClass,attributeMappings));    }  } catch (  Exception ex) {    throw new DTOMapperException("Failed to map identity provider schema");  }  return objectSchemaMappings;}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("html","1.0");    assertTrue("supports_html_1.0",state);  } else {    state=domImpl.hasFeature("xml","1.0");    assertTrue("supports_xml_1.0",state);  }}  }
class C{  public int numDocs(Query a,DocSet b) throws IOException {  if (filterCache != null) {    Query absQ=QueryUtils.getAbs(a);    DocSet positiveA=getPositiveDocSet(absQ);    return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);  } else {    TotalHitCountCollector collector=new TotalHitCountCollector();    BooleanQuery bq=new BooleanQuery();    bq.add(QueryUtils.makeQueryable(a),BooleanClause.Occur.MUST);    bq.add(new ConstantScoreQuery(b.getTopFilter()),BooleanClause.Occur.MUST);    super.search(bq,null,collector);    return collector.getTotalHits();  }}  }
class C{  public AWTTerminal(TerminalSize initialTerminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration){  this(initialTerminalSize,deviceConfiguration,fontConfiguration,colorConfiguration,new TerminalScrollController.Null());}  }
class C{  public static String encode(byte barr[]){  StringBuilder rtn=new StringBuilder();  int len=barr.length;  int read=0;  boolean stop=false;  byte b=0;  int offset=0;  do {    int left=len - read;    if (left == 0)     stop=true;    if (left <= 45)     b=(byte)left; else     b=45;    rtn.append(_enc(b));    for (int i=0; i < b; i+=3) {      if (len - offset < 3) {        byte padding[]=new byte[3];        for (int z=0; offset + z < len; z++)         padding[z]=barr[offset + z];        encodeBytes(padding,0,rtn);      } else {        encodeBytes(barr,offset,rtn);      }      offset+=3;    }    rtn.append('\n');    read+=b;    if (b < 45)     stop=true;  } while (!stop);  return rtn.toString();}  }
class C{  public XPathException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;  if (cause == null) {    throw new NullPointerException("cause == null");  }}  }
class C{  public void initiate(){}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getActionCommand().equals("Go")) {    animator.stop();    animator.start();  } else   if (ae.getActionCommand().equals("Stop")) {    animator.stop();  }}  }
class C{  public static String sanitizeIdentifierName(String input){  if (input == null || input.isEmpty()) {    return input;  }  final StringBuilder result=new StringBuilder();  char ch=input.charAt(0);  if (Character.isJavaIdentifierStart(ch)) {    result.append(ch);  } else {    result.append("_" + Character.codePointAt(input,0) + "$");  }  int i=1;  while (i < input.length()) {    ch=input.charAt(i);    if (Character.isJavaIdentifierPart(ch)) {      result.append(ch);    } else {      result.append("_" + Character.codePointAt(input,i) + "$");    }    i=i + 1;  }  return result.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DisposableArray(){  super();}  }
class C{  public void addResponseCodeListener(ActionListener a){  responseCodeListeners.addElement(a);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void windowOpened(WindowEvent e){}  }
class C{  public void disablePresets(){  if (usePaneLayout) {    FragmentManager fm=getSupportFragmentManager();    Fragment recentPresetsFragment=fm.findFragmentByTag(RECENTPRESETS_FRAGMENT);    if (recentPresetsFragment != null) {      ((RecentPresetsFragment)recentPresetsFragment).disable();    }    presetFragment.disable();  } else {    tagEditorFragment.disableRecentPresets();  }}  }
class C{  public void validate() throws ConfigException {}  }
class C{  public static String extractCharset(InputStream is) throws java.io.IOException {  byte[] buf=new byte[4096];  UniversalDetector detector=new UniversalDetector(null);  int nread;  while ((nread=is.read(buf)) > 0 && !detector.isDone()) {    detector.handleData(buf,0,nread);  }  detector.dataEnd();  String encoding=detector.getDetectedCharset();  if (encoding != null) {    LOGGER.debug("Detected encoding = " + encoding);  } else {    LOGGER.debug("No encoding detected.");  }  detector.reset();  if (encoding != null && CrawlUtils.isValidCharset(encoding)) {    return encoding;  } else {    return DEFAULT_CHARSET;  }}  }
class C{  public static CharSequence join(CharSequence delimiter,Iterable<CharSequence> tokens){  SpannableStringBuilder sb=new SpannableStringBuilder();  boolean firstTime=true;  for (  CharSequence token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb;}  }
class C{  @Action(value="/receipts/challan-cancelReceipt") @SkipValidation public String cancelReceipt(){  if (getSelectedReceipts() != null && getSelectedReceipts().length > 0) {    receiptHeader=receiptHeaderService.findById(Long.valueOf(selectedReceipts[0]),false);    loadReceiptDetails();  }  return CollectionConstants.CANCELRECEIPT;}  }
class C{  private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  public Dimension minimumSize(){  return minimumSize(DEFAULT_VISIBLE_ROWS);}  }
class C{  public static boolean kill(int id){  Proc proc=processes.get(id);  if (proc != null) {    proc.kill();    return true;  }  return false;}  }
class C{  public boolean exists(String databaseName){  return impl.existsDB(databaseName);}  }
class C{  private void read(){  properties=new Properties();  try {    final InputStream is=Persistence.get().getInputStream(false,stendhal.getGameFolder(),FILE_NAME);    properties.load(is);    is.close();  } catch (  final IOException e) {  }}  }
class C{  void incCounter(String counterStr,boolean reset){  counterStr=counterStr.trim();  int value=reset ? 0 : 1;  Vector v=getWords(counterStr,Component.LEFT,false);  if (v.size() == 0) {    return;  }  counterStr=(String)v.elementAt(0);  if (v.size() > 1) {    try {      value=Integer.parseInt((String)v.elementAt(1));    } catch (    NumberFormatException nfe) {    }  }  if (counters == null) {    counters=new Hashtable();  }  if (reset) {    counters.put(counterStr,new Integer(value));  } else {    int curValue=0;    Object obj=counters.get(counterStr);    if (obj != null) {      curValue=((Integer)obj).intValue();    }    counters.put(counterStr,new Integer(value + curValue));  }}  }
class C{  private void updateCheckedItems(){  for (  TableItem item : tableViewer.getTable().getItems()) {    AbstractPlatformSensorConfig sensorConfig=(AbstractPlatformSensorConfig)item.getData();    item.setChecked(sensorConfig.isActive());  }}  }
class C{  public void build(String code,String customStatus){  try {    if (customStatus != null) {      result.put(resources.getString(R.string.intent_extra_status),customStatus);    } else {      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));    }    result.put(resources.getString(R.string.intent_extra_code),code);    operationListResult.put(result);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e.toString());  }}  }
class C{  private boolean compareFiles(File f1,File f2){  return f1.lastModified() > f2.lastModified() || (f1.lastModified() == f2.lastModified() && f1.getName().compareTo(f2.getName()) > 0);}  }
class C{  public REProgram compile(String pattern) throws RESyntaxException {  this.pattern=pattern;  len=pattern.length();  idx=0;  lenInstruction=0;  parens=1;  int[] flags={NODE_TOPLEVEL};  expr(flags);  if (idx != len) {    if (pattern.charAt(idx) == ')') {      syntaxError("Unmatched close paren");    }    syntaxError("Unexpected input remains");  }  char[] ins=new char[lenInstruction];  System.arraycopy(instruction,0,ins,0,lenInstruction);  return new REProgram(parens,ins);}  }
class C{  private void mergeDRINode(Node node) throws IIOInvalidTreeException {  DRIMarkerSegment dri=(DRIMarkerSegment)findMarkerSegment(DRIMarkerSegment.class,true);  if (dri != null) {    dri.updateFromNativeNode(node,false);  } else {    DRIMarkerSegment newGuy=new DRIMarkerSegment(node);    int firstSOF=findMarkerSegmentPosition(SOFMarkerSegment.class,true);    int firstSOS=findMarkerSegmentPosition(SOSMarkerSegment.class,true);    if (firstSOF != -1) {      markerSequence.add(firstSOF,newGuy);    } else     if (firstSOS != -1) {      markerSequence.add(firstSOS,newGuy);    } else {      markerSequence.add(newGuy);    }  }}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  void handleOneIncomingReply(){  int replyCurrentSize=this.reply.getNumDataElements();  int i;  for (i=replyCurrentSize; i < SprogReply.maxSize - replyCurrentSize; i++) {    try {      if (istream.available() == 0) {        break;      }      byte char1=istream.readByte();      this.reply.setElement(i,char1);    } catch (    Exception e) {      log.warn("Exception in DATA_AVAILABLE state: " + e);    }    if (endReply(this.reply)) {      sendreply();      break;    }  }}  }
class C{  public static SolrDocumentList assertSearch(SolrParams p) throws Exception {  QueryResponse rsp=getRandClient(random()).query(p);  assertEquals("failed request: " + p.toString() + " => "+ rsp.toString(),0,rsp.getStatus());  assertTrue("does not match at least one doc: " + p.toString() + " => "+ rsp.toString(),1 <= rsp.getResults().getNumFound());  assertTrue("rsp does not contain at least one doc: " + p.toString() + " => "+ rsp.toString(),1 <= rsp.getResults().size());  return rsp.getResults();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Entry<Object,Object> entryStack=null;synchronized (this) {    s.defaultWriteObject();    s.writeInt(table.length);    s.writeInt(count);    for (int index=0; index < table.length; index++) {      Entry<?,?> entry=table[index];      while (entry != null) {        entryStack=new Entry<>(0,entry.key,entry.value,entryStack);        entry=entry.next;      }    }  }  while (entryStack != null) {    s.writeObject(entryStack.key);    s.writeObject(entryStack.value);    entryStack=entryStack.next;  }}  }
class C{  public void dequeueGroupFileTransfer(String chatId,String fileTransferId,MmContent content,MmContent fileIcon) throws PayloadException, NetworkException, SessionNotEstablishedException {  GroupChatSession groupChatSession=mImService.getGroupChatSession(chatId);  if (groupChatSession == null) {    mImService.rejoinGroupChatAsPartOfSendOperation(chatId);  } else   if (groupChatSession.isMediaEstablished()) {    long timestamp=System.currentTimeMillis();    long timestampSent=timestamp;    FileSharingSession session=mImService.createGroupFileTransferSession(fileTransferId,content,fileIcon,chatId,timestamp);    GroupFileTransferImpl groupFileTransfer=getOrCreateGroupFileTransfer(chatId,fileTransferId);    session.addListener(groupFileTransfer);    setGroupFileTransferStateAndTimestamp(fileTransferId,chatId,State.INITIATING,timestamp,timestampSent);    session.startSession();  } else   if (groupChatSession.isInitiatedByRemote()) {    if (sLogger.isActivated()) {      sLogger.debug("Group chat session with chatId '" + chatId + "' is pending for acceptance, accept it.");    }    groupChatSession.acceptSession();  } else {    throw new SessionNotEstablishedException("The existing group chat session with chatId '" + chatId + "' is not established right now!");  }}  }
class C{  public FilenameUtils(){  super();}  }
class C{  private void calculateLocalNorthAndUpInCelestialCoords(boolean forceUpdate){  long currentTime=clock.getTimeInMillisSinceEpoch();  if (!forceUpdate && Math.abs(currentTime - celestialCoordsLastUpdated) < MINIMUM_TIME_BETWEEN_CELESTIAL_COORD_UPDATES_MILLIS) {    return;  }  celestialCoordsLastUpdated=currentTime;  updateMagneticCorrection();  RaDec up=calculateRADecOfZenith(getTime(),location);  upCelestial=GeocentricCoordinates.getInstance(up);  Vector3 z=AXIS_OF_EARTHS_ROTATION;  float zDotu=scalarProduct(upCelestial,z);  trueNorthCelestial=addVectors(z,scaleVector(upCelestial,-zDotu));  trueNorthCelestial.normalize();  trueEastCelestial=Geometry.vectorProduct(trueNorthCelestial,upCelestial);  Matrix33 rotationMatrix=Geometry.calculateRotationMatrix(magneticDeclinationCalculator.getDeclination(),upCelestial);  Vector3 magneticNorthCelestial=Geometry.matrixVectorMultiply(rotationMatrix,trueNorthCelestial);  Vector3 magneticEastCelestial=vectorProduct(magneticNorthCelestial,upCelestial);  axesMagneticCelestialMatrix=new Matrix33(magneticNorthCelestial,upCelestial,magneticEastCelestial);}  }
class C{  public synchronized UDAudio resume(){  final MediaPlayer player=getMediaPlayer();  if (player != null && player.isPlaying() == false) {    try {      if (player.getCurrentPosition() > 0) {        player.start();      } else {        play(mUriOrName,mLoopTimes);      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return this;}  }
class C{  ServerStateMachineExecutor executor(){  return executor;}  }
class C{  public void testBug39426() throws Exception {  Connection c=null;  try {    createTable("testBug39426","(x int)");    c=getConnectionWithProps("statementInterceptors=testsuite.regression.StatementRegressionTest$Bug39426Interceptor,useServerPrepStmts=false");    PreparedStatement ps=c.prepareStatement("insert into testBug39426 values (?)");    ps.setInt(1,1);    ps.addBatch();    ps.setInt(1,2);    ps.addBatch();    ps.setInt(1,3);    ps.addBatch();    ps.executeBatch();    List<Integer> vals=Bug39426Interceptor.vals;    assertEquals(new Integer(1),vals.get(0));    assertEquals(new Integer(2),vals.get(1));    assertEquals(new Integer(3),vals.get(2));  }  finally {    if (c != null) {      c.close();    }  }}  }
class C{  private JvmLauncher createAdminDeployerJava(String action){  JvmLauncher java=createJava();  java.addAppArguments("--user");  java.addAppArguments(getContainer().getConfiguration().getPropertyValue(RemotePropertySet.USERNAME));  java.addAppArguments("--password");  java.addAppArguments(getContainer().getConfiguration().getPropertyValue(RemotePropertySet.PASSWORD));  if (geronimoUtils.isGeronimoStarted()) {    java.addAppArguments("--host");    java.addAppArguments(getContainer().getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME));    java.addAppArguments("--port");    java.addAppArguments(getContainer().getConfiguration().getPropertyValue(GeneralPropertySet.RMI_PORT));  } else {    java.addAppArguments("--offline");  }  if (getContainer() instanceof Geronimo3xInstalledLocalContainer) {    ((Geronimo3xInstalledLocalContainer)getContainer()).prepareJvmLauncher(java);    java.setMainClass("org.apache.geronimo.cli.deployer.DeployerCLI");  } else {    java.setJarFile(new File(getInstalledContainer().getHome(),"bin/deployer.jar"));  }  java.addAppArguments(action);  return java;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public static void severe(final String string,final Object... args){  if (log.isLoggable(Level.SEVERE)) {    log.severe(String.format(string,args));  }}  }
class C{  public static String removeMarkDown(String s){  if (s == null)   return "";  s=pLists.matcher(s).replaceAll("");  s=pHeadings.matcher(s).replaceAll("$1");  s=pHeadingLine.matcher(s).replaceAll("");  s=pEmphasis.matcher(s).replaceAll("$2");  s=pSpace1.matcher(s).replaceAll("");  s=pSpace2.matcher(s).replaceAll("");  return s;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STRING_FIELD;case 2:  return SET_FIELD;case 3:return LIST_FIELD;case 4:return BINARY_FIELD;default :return null;}}  }
class C{  protected void reOrganizeFeatures(){  LinkedList<Thread> threads=new LinkedList<Thread>();  Thread thread;  Thread p=new Thread(new ProducerForFeatures());  p.start();  for (int i=0; i < numThreads; i++) {    thread=new Thread(new FeatureToClass());    thread.start();    threads.add(thread);  }  for (  Thread next : threads) {    try {      next.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  threads.clear();}  }
class C{  public void start() throws GondolaException {  try {    logger.info("------- Gondola start: {}, {}, pid={} -------",hostId,config.getAddressForHost(hostId),processId);    if (!inited) {      init();    }    clock.start();    network.start();    storage.start();    for (    Shard s : shards) {      s.start();    }    threads.add(new RoleChangeNotifier());    threads.forEach(null);    objectName=new ObjectName("com.yahoo.gondola." + hostId + ":type=Stats");    mbs.registerMBean(stats,objectName);  } catch (  Exception e) {    throw new GondolaException(e);  }}  }
class C{  public boolean isSupported(String fileName){  String extension=getExtension(fileName);  return isInternalSupported(extension) || isExternalSupported(extension);}  }
class C{  protected void clearToggledPaths(){  expandedState.clear();}  }
class C{  private synchronized void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  serialize(oos,(Collection)bcsListeners);}  }
class C{  public InvalidObjectIdException(){  super();}  }
class C{  private ImmutableSet<TransferServerApproveEntity> createTransferServerApproveEntities(DateTime automaticTransferTime,DateTime serverApproveNewExpirationTime,HistoryEntry historyEntry,DomainResource existingDomain,Money renewCost,int years){  TransferData serverApproveTransferData=createTransferDataBuilder(existingDomain,automaticTransferTime,years).setTransferStatus(TransferStatus.SERVER_APPROVED).build();  Registry registry=Registry.get(existingDomain.getTld());  return new ImmutableSet.Builder<TransferServerApproveEntity>().add(createTransferBillingEvent(automaticTransferTime,historyEntry,registry,renewCost,years)).addAll(createOptionalAutorenewCancellation(automaticTransferTime,historyEntry,existingDomain).asSet()).add(createGainingClientAutorenewEvent(serverApproveNewExpirationTime,historyEntry)).add(createGainingClientAutorenewPollMessage(serverApproveNewExpirationTime,historyEntry)).add(createGainingTransferPollMessage(targetId,serverApproveTransferData,serverApproveNewExpirationTime,historyEntry)).add(createLosingTransferPollMessage(targetId,serverApproveTransferData,serverApproveNewExpirationTime,historyEntry)).build();}  }
class C{  public void loadBeanSetting(Path path,Element element){  int setting=0;  try {    setting=element.getAttribute("setting").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("Could not parse beansetting attribute");  }  List<Element> turnouts=element.getChildren("turnout");  if (turnouts.size() != 1) {    log.error("invalid number of turnout element children");  }  String name=turnouts.get(0).getAttribute("systemName").getValue();  try {    Turnout t=InstanceManager.turnoutManagerInstance().provideTurnout(name);    BeanSetting bs=new BeanSetting(t,name,setting);    path.addSetting(bs);  } catch (  IllegalArgumentException ex) {    log.warn("failed to create Turnout \"{}\" during Block load",name);  }}  }
class C{  private void processUnprovidedTypes(Set<String> provides,Set<String> transitiveProvides){  int maxTypeUsedDepth=5;  Set<String> typesEmitted=new LinkedHashSet<>();  while (maxTypeUsedDepth > 0) {    int typesUsedCount=typesUsed.size();    for (    TypedVar symbol : compiler.getTopScope().getAllSymbols()) {      String name=symbol.getName();      String namespace=getNamespace(name);      if (!typesUsed.contains(name) || typesEmitted.contains(name) || (!transitiveProvides.contains(name) && typesEmitted.contains(namespace))) {        continue;      }      if (provides.contains(name) || (!transitiveProvides.contains(name) && provides.contains(namespace))) {        continue;      }      CompilerInput symbolInput=this.compiler.getInput(new InputId(symbol.getInputName()));      if (symbolInput != null && symbolInput.isExtern())       continue;      declareNamespace(namespace,symbol,name,true,Collections.<String>emptySet(),false);      typesEmitted.add(name);    }    if (typesUsed.size() == typesUsedCount)     break;    maxTypeUsedDepth--;  }}  }
class C{  public boolean attempt(Address old,Address val,Offset offset){  return this.plus(offset).attempt(old,val);}  }
class C{  private String infixToPostFix(final CustomTokenizer tokenizer){  final String space=" ";  StringBuffer postfix=new StringBuffer();  Stack<Object> stack=new Stack<>();  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    boolean inText=(token.startsWith("'") && (!token.endsWith("'"))) || (token.startsWith("\"") && (!token.endsWith("\"")));    String quoteChar=token.substring(0,1);    if (inText) {      while (inText && tokenizer.hasMoreTokens()) {        token=token + " " + tokenizer.nextToken();        inText=!(token.endsWith(quoteChar));      }    }    if ("(".equals(token)) {      postfix.append(infixToPostFix(tokenizer));      postfix.append(space);    } else     if (")".equals(token)) {      while (stack.size() > 0) {        postfix.append(stack.pop().toString());        postfix.append(space);      }      return postfix.toString();    } else     if (isOperand(token)) {      postfix.append(token);      postfix.append(space);    } else {      if (stack.size() > 0) {        String peek=stack.peek().toString();        if (precedes(peek,token)) {          stack.push(token);        } else {          boolean bypass=false;          do {            if ((stack.size() > 0) && !precedes(stack.peek().toString(),token)) {              postfix.append(stack.pop().toString());              postfix.append(space);            } else {              bypass=true;            }          } while (!bypass);          stack.push(token);        }      } else {        stack.push(token);      }    }  }  while (stack.size() > 0) {    postfix.append(stack.pop().toString());    postfix.append(space);  }  return postfix.toString();}  }
class C{  public boolean isFirst(int AD_WF_Node_ID,int AD_Client_ID){  return AD_WF_Node_ID == getAD_WF_Node_ID();}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int widthMode=MeasureSpec.getMode(widthMeasureSpec);  int heightMode=MeasureSpec.getMode(heightMeasureSpec);  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;  int paddingLeft=getPaddingLeft();  int paddingTop=getPaddingTop();  int paddingRight=getPaddingRight();  int paddingBottom=getPaddingBottom();  int maxRightBound=maxWidth - paddingRight;  int maxBottomBound=maxHeight - paddingBottom;  int left;  int top;  int right;  int bottom;  int rightBound=paddingLeft;  int maxRightNoPadding=rightBound;  int bottomBound;  int lastMaxBottom=paddingTop;  int maxBottom=lastMaxBottom;  int childWidth;  int childHeight;  int lineStartIndex=0;  int lineEndIndex=0;  rectList.clear();  int childCount=getChildCount();  for (int index=0; index < childCount; index++) {    final View child=getChildAt(index);    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);    if (child.getVisibility() == View.GONE)     continue;    final AutoWrapLayout.LayoutParams lp=(AutoWrapLayout.LayoutParams)child.getLayoutParams();    childWidth=child.getMeasuredWidth();    childHeight=child.getMeasuredHeight();    left=rightBound + lp.leftMargin;    right=left + childWidth;    rightBound=right + lp.rightMargin;    if (rightBound > maxRightBound) {      lineEndIndex=index;      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);      if (maxBottom >= maxBottomBound)       break;      if (lineEndIndex == lineStartIndex) {        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);        childWidth=child.getMeasuredWidth();        childHeight=child.getMeasuredHeight();      }      left=paddingLeft + lp.leftMargin;      right=left + childWidth;      rightBound=right + lp.rightMargin;      lastMaxBottom=maxBottom;      top=lastMaxBottom + lp.topMargin;      bottom=top + childHeight;      bottomBound=bottom + lp.bottomMargin;      lineStartIndex=index;    } else {      top=lastMaxBottom + lp.topMargin;      bottom=top + childHeight;      bottomBound=bottom + lp.bottomMargin;    }    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;    if (bottomBound > maxBottom)     maxBottom=bottomBound;    Rect rect=new Rect();    rect.left=left;    rect.top=top;    rect.right=right;    rect.bottom=bottom;    rectList.add(rect);  }  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());  int measuredWidth;  int measuredHeight;  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth; else   measuredWidth=maxRightNoPadding + paddingRight;  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight; else {    measuredHeight=maxBottom + paddingBottom;    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;  }  setMeasuredDimension(measuredWidth,measuredHeight);}  }
class C{  private String parseQuotedToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  boolean quoted=false;  boolean charEscaped=false;  while (hasChar()) {    ch=chars[pos];    if (!quoted && isOneOf(ch,terminators)) {      break;    }    if (!charEscaped && ch == '"') {      quoted=!quoted;    }    charEscaped=(!charEscaped && ch == '\\');    i2++;    pos++;  }  return getToken(true);}  }
class C{  public MethodProposalInfo(CompletionProposal proposal,String projectId,String docContext,String vfsId){  super(proposal,projectId,docContext,vfsId);}  }
class C{  public static String formatMethodCall(Method m,Object... args){  StringBuilder buff=new StringBuilder();  buff.append(m.getName()).append('(');  for (int i=0; i < args.length; i++) {    Object a=args[i];    if (i > 0) {      buff.append(", ");    }    buff.append(a == null ? "null" : a.toString());  }  buff.append(")");  return buff.toString();}  }
class C{  private Base64(){}  }
class C{  public Sin(){  super("sin",1);}  }
class C{  protected Node findMatchingParentOpenTag(String tagName){  Node parent=parentNode;  if (!rootNode.config.isCaseSensitive()) {    tagName=tagName.toLowerCase();  }  while (parent != null) {    String parentNodeName=parent.getNodeName();    if (parentNodeName != null) {      if (!rootNode.config.isCaseSensitive()) {        parentNodeName=parentNodeName.toLowerCase();      }    }    if (tagName.equals(parentNodeName)) {      return parent;    }    parent=parent.getParentNode();  }  return null;}  }
class C{  private void pause(){  if (mHasAlreadyPlayed && !mIsPaused) {    mIsPaused=true;    if (!mIsPreparing) {      mMediaPlayer.pause();    }    Intent intent=new Intent(PlaybackListener.ACTION_ON_PLAYER_PAUSED);    mLocalBroadcastManager.sendBroadcast(intent);    updateNotification();    mMediaSession.setPlaybackState(MediaSessionWrapper.PLAYBACK_STATE_PAUSED);    pauseTimer();  }}  }
class C{  private double estimateMaximumTickLabelHeight(Graphics2D g2,DateTickUnit unit){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getTop() + tickLabelInsets.getBottom();  Font tickLabelFont=getTickLabelFont();  FontRenderContext frc=g2.getFontRenderContext();  LineMetrics lm=tickLabelFont.getLineMetrics("ABCxyz",frc);  if (!isVerticalTickLabels()) {    result+=lm.getHeight();  } else {    DateRange range=(DateRange)getRange();    Date lower=range.getLowerDate();    Date upper=range.getUpperDate();    String lowerStr, upperStr;    DateFormat formatter=getDateFormatOverride();    if (formatter != null) {      lowerStr=formatter.format(lower);      upperStr=formatter.format(upper);    } else {      lowerStr=unit.dateToString(lower);      upperStr=unit.dateToString(upper);    }    FontMetrics fm=g2.getFontMetrics(tickLabelFont);    double w1=fm.stringWidth(lowerStr);    double w2=fm.stringWidth(upperStr);    result+=Math.max(w1,w2);  }  return result;}  }
class C{  public static TXCommitMessage execute(ExecutablePool pool,int txId){  CommitOpImpl op=new CommitOpImpl(txId);  pool.execute(op);  return op.getTXCommitMessageResponse();}  }
class C{  public RandomInitialization(Problem problem,int populationSize){  super();  this.problem=problem;  this.populationSize=populationSize;}  }
class C{  public HyperGraph search(){  long startTime=System.currentTimeMillis();  Future future=new Future(chart);  stacks=new ArrayList<>();  stacks.add(null);  ComputeNodeResult result=new ComputeNodeResult(this.featureFunctions,Hypothesis.BEGIN_RULE,null,-1,1,null,this.sentence);  Stack firstStack=new Stack(sentence,config);  firstStack.add(new Hypothesis(result.getDPStates(),future.Full()));  stacks.add(firstStack);  for (int source_words=2; source_words <= sentence.length(); ++source_words) {    Stack targetStack=new Stack(sentence,config);    stacks.add(targetStack);    for (int phrase_length=1; phrase_length <= Math.min(source_words - 1,chart.MaxSourcePhraseLength()); phrase_length++) {      int from_stack=source_words - phrase_length;      Stack tailStack=stacks.get(from_stack);      LOG.debug("WORDS {} MAX {} (STACK {} phrase_length {})",source_words,chart.MaxSourcePhraseLength(),from_stack,phrase_length);      for (      Coverage coverage : tailStack.getCoverages()) {        ArrayList<Hypothesis> hypotheses=tailStack.get(coverage);        int begin=coverage.firstZero();        int last_end=Math.min(coverage.firstZero() + config.reordering_limit,chart.SentenceLength());        int last_begin=(last_end > phrase_length) ? (last_end - phrase_length) : 0;        for (begin=coverage.firstZero(); begin <= last_begin; begin++) {          if (!coverage.compatible(begin,begin + phrase_length) || !permissible(coverage,begin,begin + phrase_length)) {            continue;          }          if (begin == sentence.length() - 1 && source_words != sentence.length())           continue;          PhraseNodes phrases=chart.getRange(begin,begin + phrase_length);          if (phrases == null)           continue;          LOG.debug("Applying {} target phrases over [{}, {}]",phrases.size(),begin,begin + phrase_length);          float future_delta=future.Change(coverage,begin,begin + phrase_length);          Candidate cand=new Candidate(featureFunctions,sentence,hypotheses,phrases,future_delta,new int[]{0,0});          targetStack.addCandidate(cand);        }      }    }    targetStack.search();  }  LOG.info("Input {}: Search took {} seconds",sentence.id(),(System.currentTimeMillis() - startTime) / 1000.0f);  return createGoalNode();}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public Workflow.Method performProtectionOperationMethod(final URI systemUri,final Copy copy,final String op){  return new Workflow.Method("performProtectionOperation",systemUri,copy,op);}  }
class C{  public SpiderAPI(ExtensionSpider extension){  this.extension=extension;  this.addApiAction(new ApiAction(ACTION_START_SCAN,null,new String[]{PARAM_URL,PARAM_MAX_CHILDREN,PARAM_RECURSE,PARAM_CONTEXT_NAME,PARAM_SUBTREE_ONLY}));  this.addApiAction(new ApiAction(ACTION_START_SCAN_AS_USER,new String[]{PARAM_CONTEXT_ID,PARAM_USER_ID},new String[]{PARAM_URL,PARAM_MAX_CHILDREN,PARAM_RECURSE,PARAM_SUBTREE_ONLY}));  this.addApiAction(new ApiAction(ACTION_PAUSE_SCAN,new String[]{PARAM_SCAN_ID}));  this.addApiAction(new ApiAction(ACTION_RESUME_SCAN,new String[]{PARAM_SCAN_ID}));  this.addApiAction(new ApiAction(ACTION_STOP_SCAN,null,new String[]{PARAM_SCAN_ID}));  this.addApiAction(new ApiAction(ACTION_REMOVE_SCAN,new String[]{PARAM_SCAN_ID}));  this.addApiAction(new ApiAction(ACTION_PAUSE_ALL_SCANS));  this.addApiAction(new ApiAction(ACTION_RESUME_ALL_SCANS));  this.addApiAction(new ApiAction(ACTION_STOP_ALL_SCANS));  this.addApiAction(new ApiAction(ACTION_REMOVE_ALL_SCANS));  this.addApiAction(new ApiAction(ACTION_CLEAR_EXCLUDED_FROM_SCAN));  this.addApiAction(new ApiAction(ACTION_EXCLUDE_FROM_SCAN,new String[]{PARAM_REGEX}));  this.addApiView(new ApiView(VIEW_STATUS,null,new String[]{PARAM_SCAN_ID}));  this.addApiView(new ApiView(VIEW_RESULTS,null,new String[]{PARAM_SCAN_ID}));  this.addApiView(new ApiView(VIEW_FULL_RESULTS,new String[]{PARAM_SCAN_ID}));  this.addApiView(new ApiView(VIEW_SCANS));  this.addApiView(new ApiView(VIEW_EXCLUDED_FROM_SCAN));  this.addApiView(new ApiView(VIEW_ALL_URLS));}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  private void updateGroups(User user,Set<String> attributes){  if (attributes.contains("groups") || user.getGroups().size() > 0) {    throw new OsiamException("The membership to a group can't be modified. Please use the group update.");  }}  }
class C{  public Serializer serializer(){  return serializer;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:11.466 -0400",hash_original_method="4E65DAFB1193371A1339F133EA2A54E6",hash_generated_method="4E65DAFB1193371A1339F133EA2A54E6") void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public static void validateRSetVolumeSizes(DbClient dbClient,List<Volume> volumes){  if (volumes != null) {    for (    Volume volume : volumes) {      Volume sourceVolume=getRPSourceVolume(dbClient,volume);      if (sourceVolume != null && sourceVolume.getRpTargets() != null) {        for (        String volumeID : sourceVolume.getRpTargets()) {          try {            Volume targetVolume=dbClient.queryObject(Volume.class,new URI(volumeID));            if (sourceVolume.getProvisionedCapacity() > targetVolume.getProvisionedCapacity()) {              throw APIException.badRequests.invalidRPVolumeSizes(sourceVolume.getId());            }          } catch (          URISyntaxException e) {            throw APIException.badRequests.invalidURI(volumeID,e);          }        }      }    }  }}  }
class C{  void selectField(Object f,int count){  AttributedCharacterIterator iterator=getIterator();  if (iterator != null && (f instanceof AttributedCharacterIterator.Attribute)) {    AttributedCharacterIterator.Attribute field=(AttributedCharacterIterator.Attribute)f;    iterator.first();    while (iterator.current() != CharacterIterator.DONE) {      while (iterator.getAttribute(field) == null && iterator.next() != CharacterIterator.DONE)       ;      if (iterator.current() != CharacterIterator.DONE) {        int limit=iterator.getRunLimit(field);        if (--count <= 0) {          getFormattedTextField().select(iterator.getIndex(),limit);          break;        }        iterator.setIndex(limit);        iterator.next();      }    }  }}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  if (!(content instanceof ViewGroup)) {    return true;  }  ViewGroup viewGroup=(ViewGroup)content;  if (viewGroup.getChildCount() == 0) {    return true;  }  if (viewGroup instanceof AbsListView) {    AbsListView listView=(AbsListView)viewGroup;    if (listView.getFirstVisiblePosition() > 0) {      return false;    }  }  View child=viewGroup.getChildAt(0);  ViewGroup.LayoutParams glp=child.getLayoutParams();  int top=child.getTop();  if (glp instanceof ViewGroup.MarginLayoutParams) {    ViewGroup.MarginLayoutParams mlp=(ViewGroup.MarginLayoutParams)glp;    return top == mlp.topMargin + viewGroup.getPaddingTop();  } else {    return top == viewGroup.getPaddingTop();  }}  }
class C{  private void addUserLink(RequestAndResponse requestAndResponse,String title,String tooltip,String url,String paneId,User user) throws IOException {  requestAndResponse.println("<li><a onclick=\"newPaneForLink(event, '" + title + "', '"+ paneId+ "'); return false;\" title=\""+ tooltip+ "\" href=\""+ url+ "/"+ user.getId()+ "\">"+ title+ "</a></li>");}  }
class C{  public static String now(){  return fromCalendar(GregorianCalendar.getInstance());}  }
class C{  @CallSuper public void onViewDetached(boolean finalDetachment){  mView=null;}  }
class C{  public static HelpNode fromXml(File file) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(new FileReader(file)));}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  private void resetAnalyticsItem(){  changeMapItemVP.setVisibility(View.GONE);  trackingAnalyticsVP.setVisibility(View.VISIBLE);  trackingAnalyticsBtn();  tvspeed=(TextView)activity.findViewById(R.id.app_settings_tracking_tv_tracking_speed);  tvdistance=(TextView)activity.findViewById(R.id.app_settings_tracking_tv_tracking_distance);  tvdisunit=(TextView)activity.findViewById(R.id.app_settings_tracking_tv_tracking_distance_unit);  updateAnalytics(Tracking.getTracking().getAvgSpeed(),Tracking.getTracking().getDistance());}  }
class C{  public void testFloatValuePositiveInfinity2(){  String a="2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == Float.POSITIVE_INFINITY);}  }
class C{  public synchronized void centerViewPort(final float[] transformedPts,final View view){  Matrix save=new Matrix();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  refresh(save,view,true);}  }
class C{  public AdjacencyMatrix(Graph g){  this(g,false);}  }
class C{  public void addTransferDataFlavor(DataFlavor flavor){  Arrays.asList(flavors).add(flavor);}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.792 -0500",hash_original_method="1E901056DDD7FF66FB9A75FE788910FD",hash_generated_method="DDFCE07975622A7FED462B730D2753CC") public void writeToParcel(Parcel dest,int flags){  dest.writeString(mNetworkName);  dest.writeParcelable(mOwner,flags);  dest.writeByte(mIsGroupOwner ? (byte)1 : (byte)0);  dest.writeInt(mClients.size());  for (  WifiP2pDevice client : mClients) {    dest.writeParcelable(client,flags);  }  dest.writeString(mPassphrase);  dest.writeString(mInterface);}  }
class C{  public RoundBorder color(int color){  this.color=color;  return this;}  }
class C{  public Header onGetInitialHeader(){  for (int i=0; i < mHeaders.size(); i++) {    Header h=mHeaders.get(i);    if (h.fragment != null) {      return h;    }  }  throw new IllegalStateException("Must have at least one header with a fragment");}  }
class C{  @Override public A execute(PerceptStateReward<S> percept){  S sDelta=percept.state();  double rDelta=percept.reward();  if (!U.containsKey(sDelta)) {    U.put(sDelta,rDelta);    R.put(sDelta,rDelta);  }  if (null != s) {    Pair<S,A> sa=new Pair<S,A>(s,a);    Nsa.incrementFor(sa);    NsDelta_sa.incrementFor(new Pair<S,Pair<S,A>>(sDelta,sa));    for (    S t : mdp.states()) {      Pair<S,Pair<S,A>> t_sa=new Pair<S,Pair<S,A>>(t,sa);      if (0 != NsDelta_sa.getCount(t_sa)) {        P.put(t_sa,NsDelta_sa.getCount(t_sa).doubleValue() / Nsa.getCount(sa).doubleValue());      }    }  }  U=policyEvaluation.evaluate(pi,U,mdp);  if (isTerminal(sDelta)) {    s=null;    a=null;  } else {    s=sDelta;    a=pi.get(sDelta);  }  return a;}  }
class C{  @Deprecated public ElideResponse delete(String path,String jsonApiDocument,Object opaqueUser,SecurityMode securityMode){  JsonApiDocument doc;  RequestScope requestScope=null;  boolean isVerbose=false;  try (DataStoreTransaction transaction=dataStore.beginTransaction()){    User user=transaction.accessUser(opaqueUser);    if (jsonApiDocument != null && !jsonApiDocument.equals("")) {      doc=mapper.readJsonApiDocument(jsonApiDocument);    } else {      doc=new JsonApiDocument();    }    requestScope=new RequestScope(path,doc,transaction,user,dictionary,mapper,auditLogger,securityMode,permissionExecutor);    isVerbose=requestScope.getPermissionExecutor().isVerbose();    DeleteVisitor visitor=new DeleteVisitor(requestScope);    Supplier<Pair<Integer,JsonNode>> responder=visitor.visit(parse(path));    transaction.preCommit();    requestScope.getPermissionExecutor().executeCommitChecks();    requestScope.saveObjects();    transaction.flush();    ElideResponse response=buildResponse(responder.get());    auditLogger.commit();    transaction.commit();    requestScope.runCommitTriggers();    if (log.isTraceEnabled()) {      requestScope.getPermissionExecutor().printCheckStats();    }    return response;  } catch (  ForbiddenAccessException e) {    log.debug("{}",e.getLoggedMessage());    return buildErrorResponse(e,isVerbose);  }catch (  HttpStatusException e) {    return buildErrorResponse(e,isVerbose);  }catch (  IOException e) {    return buildErrorResponse(new TransactionException(e),isVerbose);  }catch (  ParseCancellationException e) {    return buildErrorResponse(new InvalidURLException(e),isVerbose);  } finally {    auditLogger.clear();  }}  }
class C{  public ActivityHistogram(final int binSize,final int nofBins){  super();  this.binSize=binSize;  this.nofBins=nofBins;  reset(0);}  }
class C{  protected void validate(){}  }
class C{  public static byte[] calendarToRawBytes(Calendar timestamp,boolean honorDeviceTimeOffset){  if (honorDeviceTimeOffset) {    int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();    if (offsetInHours != 0) {      timestamp.add(Calendar.HOUR_OF_DAY,offsetInHours);    }  }  byte[] year=fromUint16(timestamp.get(Calendar.YEAR));  return new byte[]{year[0],year[1],fromUint8(timestamp.get(Calendar.MONTH) + 1),fromUint8(timestamp.get(Calendar.DATE)),fromUint8(timestamp.get(Calendar.HOUR_OF_DAY)),fromUint8(timestamp.get(Calendar.MINUTE)),fromUint8(timestamp.get(Calendar.SECOND)),dayOfWeekToRawBytes(timestamp),0};}  }
class C{  public void add(String word){  if (word.trim().length() > 0) {    m_Words.add(word.trim().toLowerCase());  }}  }
class C{  public void updateRaster(float lt,float ln,int offset_x1,int offset_y1,Image image,int image_width,int image_height,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,offset_x1,offset_y1,image,image_width,image_height,properties,link.dos);}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  CountAggregator countAggregator=(CountAggregator)aggregator;  aggVal+=countAggregator.aggVal;}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public String translateExpression(String sourceVendorName,String targetVendorName,String expression){  if (expression == null)   return null;  expression=expression.trim();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateExpression(sourceVendorName.toUpperCase(),expression);}  }
class C{  public boolean isEntryMethod(SootMethod method){  return !tgtToEdge.containsKey(method);}  }
class C{  protected void configureTransport(int... ports){  NettyTransportContextHolder nettyTransportContextHolder=NettyTransportContextHolder.getInstance();  nettyTransportContextHolder.setHandlerExecutor(new HandlerExecutor());  for (  int port : ports) {    ListenerConfiguration listenerConfiguration=new ListenerConfiguration("netty-" + port,"0.0.0.0",port);    NettyListener listener=new NettyListener(listenerConfiguration);    transportManager.registerTransport(listener);    nettyTransportContextHolder.setMessageProcessor(new MSF4JMessageProcessor("netty-" + port,msRegistry));  }}  }
class C{  public void deleteSection(Section y){  deregister(y);  y.dispose();}  }
class C{  public void runUsingBootstrapper() throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner());}  }
class C{  private void doSingleSlipMouseClick(){switch (turnoutState()) {case 5:    if (singleSlipRoute) {      setLowerWestToUpperEast();    } else {      setLowerWestToLowerEast();    }  break;case 7:if (singleSlipRoute) {  setUpperWestToLowerEast();} else {  setLowerWestToUpperEast();}break;case 9:if (singleSlipRoute) {setUpperWestToLowerEast();} else {setLowerWestToUpperEast();}break;case 11:if (singleSlipRoute) {setUpperWestToUpperEast();} else {setUpperWestToLowerEast();}break;default :setUpperWestToLowerEast();}}  }
class C{  public void clear(){  mIsFirstRun=false;}  }
class C{  public void testGetF11Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF11Momentary();  assertEquals(expResult,result);}  }
class C{  public Table findTable(String name){  return findTable(name,false);}  }
class C{  public AbstractIntList elements(int[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public static final void show(Window owner,String title,String message,Exception e){  ExceptionDialog dialog=new ExceptionDialog(owner,title,message,e);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);}  }
class C{  private PostgreSQLTagFunctions(){}  }
class C{  @Override public DataCollectionJob deserialize(byte[] data){  Object discoveryjob=null;  ByteArrayInputStream bis=null;  ObjectInput in=null;  try {    bis=new ByteArrayInputStream(data);    in=new ObjectInputStream(bis);    discoveryjob=in.readObject();  } catch (  Exception e1) {    _logger.error("DeSerializing Object to byte Array Exception: ",e1);  } finally {    try {      in.close();      bis.close();    } catch (    IOException e1) {      _logger.error("Error while closing Streams: ",e1);    }  }  return (DataCollectionJob)discoveryjob;}  }
class C{  private void processCompletionStageTransactionNotification(Operation op,Throwable e){  if (op.isWithinTransaction() && this.getHost().getTransactionServiceUri() != null && op.getStatusCode() != Operation.STATUS_CODE_NOT_FOUND) {    allocatePendingTransactions();    notifyTransactionCoordinatorOp(this,op,e).setCompletion(null).sendWith(this);    return;  }  if (e == null) {    processCompletionStagePublishAndComplete(op);    return;  }  failRequest(op,e);}  }
class C{  public Builder mainContext(boolean mainContext){  mIsMainContext=mainContext;  return this;}  }
class C{  public static int distance(final Class<?> child,final Class<?> parent){  if (child == null || parent == null) {    return -1;  }  if (child.equals(parent)) {    return 0;  }  final Class<?> cParent=child.getSuperclass();  int d=BooleanUtils.toInteger(parent.equals(cParent));  if (d == 1) {    return d;  }  d+=distance(cParent,parent);  return d > 0 ? d + 1 : -1;}  }
class C{  @Override public void close(){  try {    super.close();    if (this.socket != null) {      this.socket.close();      this.socket=null;    }  } catch (  Exception e) {    getErrorManager().error("Exception occurred when closing the socket handler",e,ErrorManager.CLOSE_FAILURE);  }}  }
class C{  public WeakAI(final String name,final String type){  super(name,type);}  }
class C{  private void initRange(){  mMinX=MathHelper.NULL_VALUE;  mMaxX=-MathHelper.NULL_VALUE;  mMinY=MathHelper.NULL_VALUE;  mMaxY=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    double x=getX(k);    double y=getY(k);    updateRange(x,y);  }}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public void show(){  int height=buildDropDown();  int widthSpec=0;  int heightSpec=0;  boolean noInputMethod=isInputMethodNotNeeded();  mPopup.setAllowScrollingAnchorParent(!noInputMethod);  if (mPopup.isShowing()) {    if (mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT) {      widthSpec=-1;    } else     if (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) {      widthSpec=getAnchorView().getWidth();    } else {      widthSpec=mDropDownWidth;    }    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {      heightSpec=noInputMethod ? height : ViewGroup.LayoutParams.MATCH_PARENT;      if (noInputMethod) {        mPopup.setWindowLayoutMode(mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT ? ViewGroup.LayoutParams.MATCH_PARENT : 0,0);      } else {        mPopup.setWindowLayoutMode(mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT ? ViewGroup.LayoutParams.MATCH_PARENT : 0,ViewGroup.LayoutParams.MATCH_PARENT);      }    } else     if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {      heightSpec=height;    } else {      heightSpec=mDropDownHeight;    }    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.update(getAnchorView(),mDropDownHorizontalOffset,mDropDownVerticalOffset,widthSpec,heightSpec);  } else {    if (mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT) {      widthSpec=ViewGroup.LayoutParams.MATCH_PARENT;    } else {      if (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) {        mPopup.setWidth(getAnchorView().getWidth());      } else {        mPopup.setWidth(mDropDownWidth);      }    }    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {      heightSpec=ViewGroup.LayoutParams.MATCH_PARENT;    } else {      if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {        mPopup.setHeight(height);      } else {        mPopup.setHeight(mDropDownHeight);      }    }    mPopup.setWindowLayoutMode(widthSpec,heightSpec);    mPopup.setClipToScreenEnabled(true);    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.setTouchInterceptor(mTouchInterceptor);    mPopup.showAsDropDown(getAnchorView(),mDropDownHorizontalOffset,mDropDownVerticalOffset);    mDropDownList.setSelection(ListView.INVALID_POSITION);    if (!mModal || mDropDownList.isInTouchMode()) {      clearListSelection();    }    if (!mModal) {      mHandler.post(mHideSelector);    }  }}  }
class C{  public boolean hasBlock2(){  return block2 != null;}  }
class C{  public boolean isPublicWrite(){  Object oo=get_Value(COLUMNNAME_IsPublicWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void drawMoveToCenter(@NonNull Canvas canvas,RectF bounds,float percentComplete,float startAngle,float sweepAngle){  final boolean moveOutward=mEffectType == EffectType.EFFECT_SPIRAL_OUT || mEffectType == EffectType.EFFECT_SPIRAL_OUT_FILL;  final boolean spinClockwise=mEffectType != EffectType.EFFECT_SPIRAL_IN && mEffectType != EffectType.EFFECT_SPIRAL_EXPLODE;  final float buffer=10f;  final float halfWidth=(bounds.width() / 2) - buffer;  final float halfHeight=(bounds.height() / 2) - buffer;  final float baseRotateAngle=mCircuits * 360f;  float rotateAmount=(mEffectType == EffectType.EFFECT_SPIRAL_OUT_FILL) ? baseRotateAngle + 360f : baseRotateAngle;  float rotateOffset=rotateAmount * percentComplete;  float newAngle=(startAngle + (spinClockwise ? rotateOffset : -rotateOffset)) % 360;  float sweep=getSweepAngle(percentComplete);  mSpinBounds.set(bounds);  float percent=percentComplete;  if (moveOutward) {    percent=1.0f - percentComplete;  }  if (mEffectType == EffectType.EFFECT_SPIRAL_OUT_FILL) {    if ((rotateAmount * percentComplete) > (rotateAmount - 360f)) {      mPaint.setStyle(Paint.Style.STROKE);      sweep=(rotateAmount * percentComplete) % 360;      if (sweep <= 0) {        sweep=360;      }      if (sweep > sweepAngle) {        sweep=sweepAngle;      }      newAngle=startAngle;    } else {      float min=1.0f - (baseRotateAngle / rotateAmount);      if (percent > min) {        float adjustedPercentage=(percent - min) / (1.0f - min);        mSpinBounds.inset(halfWidth * adjustedPercentage,halfHeight * adjustedPercentage);      }    }  } else {    mSpinBounds.inset(halfWidth * percent,halfHeight * percent);  }  canvas.drawArc(mSpinBounds,newAngle,sweep,false,mPaint);}  }
class C{  public String translateUnnamedParameter(String vendorName,int paramNum){  return m_interfaces.get(getDBVendorID(vendorName)).translateUnnamedParameter(paramNum);}  }
class C{  public KDTree(List<V> vecs,DistanceMetric distanceMetric,PivotSelection pvSelection){  this(vecs,distanceMetric,pvSelection,null);}  }
class C{  public static UpgradeRequest upgradeRequest(String... indices){  return new UpgradeRequest(indices);}  }
class C{  public static void showSaveSheet(JFileChooser chooser,Component parent,SheetListener listener){  chooser.setDialogType(JFileChooser.SAVE_DIALOG);  showSheet(chooser,parent,null,listener);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] chars=getStringList(stack);  String[] peeps=getStringList(stack);  String url=getString(stack);  String airHrMin=getString(stack);  String airDow=getString(stack);  String finaleDate=getString(stack);  String premiereDate=getString(stack);  String history=getString(stack);  String desc=getString(stack);  String net=getString(stack);  String title=getString(stack);  int serId=getInt(stack);  return Wizard.getInstance().addSeriesInfo(serId,title,net,desc,history,premiereDate,finaleDate,airDow,airHrMin,url,peeps,chars);}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {  return false;}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  SVGOMPathElement pe=(SVGOMPathElement)e;  AWTPathProducer app=new AWTPathProducer();  try {    SVGOMAnimatedPathData _d=pe.getAnimatedPathData();    _d.check();    SVGPathSegList p=_d.getAnimatedPathSegList();    app.setWindingRule(CSSUtilities.convertFillRule(e));    SVGAnimatedPathDataSupport.handlePathSegList(p,app);  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  } finally {    shapeNode.setShape(app.getShape());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TANNOTATION__NAME:    setName((String)newValue);  return;case TypesPackage.TANNOTATION__ARGS:getArgs().clear();getArgs().addAll((Collection<? extends TAnnotationArgument>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ConsulLookup(@Nonnull final Consul consul){  this(consul,true);}  }
class C{  public static boolean cancelProtoLikeSignature(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  if (currentTokenType == RIGHT_PAREN || currentTokenType == SIGIL_SCALAR && b.lookAhead(1) == RIGHT_PAREN) {    return false;  }  return true;}  }
class C{  protected StateImpl(){  super();}  }
class C{  public void eventDispatched(AWTEvent event){  Object source=event.getSource();  if (event instanceof KeyEvent && source instanceof Component) {    if ((SwingUtilities.windowForComponent((Component)source) == _window)) {      ((KeyEvent)event).consume();    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object v2=stack.pop();  Object v1=stack.pop();  if (v2 == null)   return v1;  if (v1 == null)   return v2;  if (v1 instanceof Number && v2 instanceof Number) {    if (v1 instanceof Double || v2 instanceof Double)     return new Double(Math.max(((Number)v1).doubleValue(),((Number)v2).doubleValue())); else     if (v1 instanceof Float || v2 instanceof Float)     return new Float(Math.max(((Number)v1).floatValue(),((Number)v2).floatValue())); else     if (v1 instanceof Long || v2 instanceof Long)     return new Long(Math.max(((Number)v1).longValue(),((Number)v2).longValue())); else     return new Integer(Math.max(((Number)v1).intValue(),((Number)v2).intValue()));  } else {    return new Double(Math.max(Double.parseDouble(v1.toString()),Double.parseDouble(v2.toString())));  }}  }
class C{  public static void dataChanged(Context context){  dataChanged(context,0);}  }
class C{  public void testInit02() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  SecureRandom random=null;  DSAParameterSpec dsa=new DSAParameterSpec(new BigInteger("56"),new BigInteger("56"),new BigInteger("56"));  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].init(privKey,dsa);      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,dsa,new SecureRandom());      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,dsa,random);      fail("InvalidAlgorithmParameterException or InvalidKeyException must be throw");    } catch (    InvalidAlgorithmParameterException e) {    }catch (    InvalidKeyException e) {    }  }}  }
class C{  @Override public boolean removeElement(Object object){  toolTipMap.remove(object);  enabledMap.remove(object);  return super.removeElement(object);}  }
class C{  public final double readLEDouble() throws IOException {  return Double.longBitsToDouble(this.readLELong());}  }
class C{  public static int numCommonMostSigMantissaBits(long num1,long num2){  int count=0;  for (int i=52; i >= 0; i--) {    if (getBit(num1,i) != getBit(num2,i))     return count;    count++;  }  return 52;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void checkUserLocked(int isUserLocked) throws Exception {  if (isUserLocked == UasMisc.USER_IS_LOCKED) {    throw new IeciTdException(UasError.EC_USER_LOCKED,UasError.EM_USER_LOCKED);  }}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.lowerBound);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.upperBound);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.innerRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.outerRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static com.google.api.services.compute.model.Operation provisionOneInstance(Compute compute,Instance instance,String instanceName,String projectId,String zoneId) throws Throwable {  instance.setName(instanceName);  instance.getDisks().get(0).getInitializeParams().setDiskName(instanceName);  Compute.Instances.Insert insert=compute.instances().insert(projectId,zoneId,instance);  return insert.execute();}  }
class C{  protected SecretKey engineTranslateKey(SecretKey key) throws InvalidKeyException {  try {    if ((key != null) && (key.getAlgorithm().equalsIgnoreCase("DES")) && (key.getFormat().equalsIgnoreCase("RAW"))) {      if (key instanceof com.sun.crypto.provider.DESKey) {        return key;      }      DESKeySpec desKeySpec=(DESKeySpec)engineGetKeySpec(key,DESKeySpec.class);      return engineGenerateSecret(desKeySpec);    } else {      throw new InvalidKeyException("Inappropriate key format/algorithm");    }  } catch (  InvalidKeySpecException e) {    throw new InvalidKeyException("Cannot translate key");  }}  }
class C{  public void done(){  if (distinct) {    if (distinctRows != null) {      rows=distinctRows.values();    } else {      if (external != null && sort != null) {        ResultExternal temp=external;        external=null;        temp.reset();        rows=New.arrayList();        while (true) {          Value[] list=temp.next();          if (list == null) {            break;          }          if (external == null) {            external=new ResultTempTable(session,expressions,true,sort);          }          rows.add(list);          if (rows.size() > maxMemoryRows) {            rowCount=external.addRows(rows);            rows.clear();          }        }        temp.close();      }    }  }  if (external != null) {    addRowsToDisk();    external.done();  } else {    if (sort != null) {      if (offset > 0 || limit > 0) {        sort.sort(rows,offset,limit < 0 ? rows.size() : limit);      } else {        sort.sort(rows);      }    }  }  applyOffset();  applyLimit();  reset();}  }
class C{  public void loadTableMetadata(TableInfo tableInfo){  CarbonTable carbonTable=tableInfoMap.get(convertToLowerCase(tableInfo.getTableUniqueName()));  if (null == carbonTable || carbonTable.getTableLastUpdatedTime() < tableInfo.getLastUpdatedTime()) {    carbonTable=new CarbonTable();    carbonTable.loadCarbonTable(tableInfo);    tableInfoMap.put(convertToLowerCase(tableInfo.getTableUniqueName()),carbonTable);  }}  }
class C{  public void deselectAllSegments(){  while (!selectedSegments.isEmpty()) {    deselectSegment(selectedSegments.get(selectedSegments.size() - 1));  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  private void deletePreviousCharacter(){  if (insertionPoint == 2) {    if (buffer.length() == 2) {      cancelComposition();    } else {      beep();    }  } else   if (insertionPoint == 8) {    if (buffer.length() == 8) {      if (format == SURROGATE_PAIR) {        buffer.deleteCharAt(--insertionPoint);      }      buffer.deleteCharAt(--insertionPoint);      sendComposedText();    } else {      beep();    }  } else {    buffer.deleteCharAt(--insertionPoint);    if (buffer.length() == 0) {      sendCommittedText();    } else {      sendComposedText();    }  }}  }
class C{  public XUnresolvedVariable(ElemVariable obj,int sourceNode,TransformerImpl transformer,int varStackPos,int varStackContext,boolean isGlobal){  super(obj);  m_context=sourceNode;  m_transformer=transformer;  m_varStackPos=varStackPos;  m_varStackContext=varStackContext;  m_isGlobal=isGlobal;}  }
class C{  public VmfsDatastoreCreateSpec pickBestCreateSpec(List<VmfsDatastoreOption> createOptions){  if ((createOptions == null) || createOptions.isEmpty()) {    return null;  }  VmfsDatastoreCreateSpec bestSpec=(VmfsDatastoreCreateSpec)createOptions.get(0).getSpec();  for (int i=1; i < createOptions.size(); i++) {    VmfsDatastoreOption createOption=createOptions.get(i);    VmfsDatastoreCreateSpec currentSpec=(VmfsDatastoreCreateSpec)createOption.getSpec();    if (currentSpec.getVmfs().getMajorVersion() > bestSpec.getVmfs().getMajorVersion()) {      bestSpec=currentSpec;    }  }  return bestSpec;}  }
class C{  public void clear(){  data.clear();  fireTableStructureChanged();}  }
class C{  public DateTime withDurationAdded(ReadableDuration durationToAdd,int scalar){  if (durationToAdd == null || scalar == 0) {    return this;  }  return withDurationAdded(durationToAdd.getMillis(),scalar);}  }
class C{  private int read() throws IOException {  if (_peekOffset < _peekLength)   return _peek[_peekOffset++] & 0xff; else   return _is.read();}  }
class C{  public Rectangle2D scale(Rectangle2D rect){  Insets insets=getInsets();  double x=rect.getX() * getScaleX() + insets.left;  double y=rect.getY() * getScaleY() + insets.top;  double w=rect.getWidth() * getScaleX();  double h=rect.getHeight() * getScaleY();  return new Rectangle2D.Double(x,y,w,h);}  }
class C{  public void paint(Graphics2D g){  g.setColor(this.getBackground());  g.fillRect(0,0,width,height);  g.setColor(this.getForeground());  if (isForward)   g.fillRect(0,0,width,height / 2);  if (isReverse)   g.fillRect(0,height / 2,width,height / 2);}  }
class C{  public IndicesShardStoresRequest indicesOptions(IndicesOptions indicesOptions){  this.indicesOptions=indicesOptions;  return this;}  }
class C{  private void updateNotification(int flags,boolean isOn){  if (isOn)   notificationFlags|=flags; else   notificationFlags&=(Integer.MAX_VALUE ^ flags);  NotificationSetting oldNotSetting=currentNotificationSetting;  for (  NotificationSetting ns : NOTIFICATIONS) {    if (ns.matches(notificationFlags)) {      currentNotificationSetting=ns;      break;    }  }  Log.d(GTG.TAG,"Flags is " + notificationFlags + ", current notset is "+ currentNotificationSetting);  if (currentNotificationSetting != oldNotSetting) {    showCurrentNotification();  }}  }
class C{  public Vector2(Vector2 v){  set(v);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void closeDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (DEBUG) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  protected void sequence_LogicalANDExpression(ISerializationContext context,BinaryLogicalExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.BINARY_LOGICAL_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static String format(int number,int width){  String num=number + "";  if (num.length() < width) {    for (int i=width - num.length(); i > 0; i--) {      num=0 + num;    }  }  return num;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeparentnode.class,args);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (mAdapter != null && mObserver != null) {    mObserver.onChanged();  }}  }
class C{  private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {  if (!word.startsWith(ENCODED_TOKEN_MARKER)) {    throw new ParseException("Invalid RFC 2047 encoded-word: " + word);  }  int charsetPos=word.indexOf('?',2);  if (charsetPos == -1) {    throw new ParseException("Missing charset in RFC 2047 encoded-word: " + word);  }  String charset=word.substring(2,charsetPos).toLowerCase(Locale.getDefault());  int encodingPos=word.indexOf('?',charsetPos + 1);  if (encodingPos == -1) {    throw new ParseException("Missing encoding in RFC 2047 encoded-word: " + word);  }  String encoding=word.substring(charsetPos + 1,encodingPos);  int encodedTextPos=word.indexOf(ENCODED_TOKEN_FINISHER,encodingPos + 1);  if (encodedTextPos == -1) {    throw new ParseException("Missing encoded text in RFC 2047 encoded-word: " + word);  }  String encodedText=word.substring(encodingPos + 1,encodedTextPos);  if (encodedText.length() == 0) {    return "";  }  try {    ByteArrayOutputStream out=new ByteArrayOutputStream(encodedText.length());    byte[] encodedData=encodedText.getBytes(US_ASCII_CHARSET);    if (BASE64_ENCODING_MARKER.equals(encoding)) {      Base64Decoder.decode(encodedData,out);    } else     if (QUOTEDPRINTABLE_ENCODING_MARKER.equals(encoding)) {      QuotedPrintableDecoder.decode(encodedData,out);    } else {      throw new UnsupportedEncodingException("Unknown RFC 2047 encoding: " + encoding);    }    byte[] decodedData=out.toByteArray();    return new String(decodedData,javaCharset(charset));  } catch (  IOException e) {    throw new UnsupportedEncodingException("Invalid RFC 2047 encoding");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.276 -0500",hash_original_method="BA4A00EBCDE2550C0DA253B4E73A18FB",hash_generated_method="38B795634F770FA47A02F27708EA88F1") public int size(){  final Segment<K,V>[] segments=this.segments;  long sum=0;  long check=0;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      sum+=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;    }    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        check+=segments[i].count;        if (mc[i] != segments[i].modCount) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segments.length; ++i)     segments[i].lock();    for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE; else   return (int)sum;}  }
class C{  public void attachScsiLun(HostScsiDisk disk){  try {    HostStorageSystem storageSystem=getStorageSystem();    storageSystem.attachScsiLun(disk.getUuid());  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public String reference(){  return reference;}  }
class C{  void processSquareRootOperation(){  if (this.displayMode != DISPLAY_MODE.ERROR) {    try {      if (getDisplayString().indexOf(OPERATOR_MINUS) == 0) {        displayErrorMessage(ResourceManager.CALCULATOR_INVALID_VALUE);      }      final double result=Math.sqrt(getDisplayedNumber());      displayResult(result);    } catch (    final Exception ex) {      displayErrorMessage(ResourceManager.CALCULATOR_INVALID_VALUE);      this.displayMode=DISPLAY_MODE.ERROR;    }  }}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWFResponsible[");  sb.append(get_ID()).append("-").append(getName()).append(",Type=").append(getResponsibleType());  if (getAD_User_ID() != 0)   sb.append(",AD_User_ID=").append(getAD_User_ID());  if (getAD_Role_ID() != 0)   sb.append(",AD_Role_ID=").append(getAD_Role_ID());  sb.append("]");  return sb.toString();}  }
class C{  private void buildLinkTable(){  hyperlinks.removeAllElements();  Document d=JEditorPane.this.getDocument();  if (d != null) {    ElementIterator ei=new ElementIterator(d);    Element e;    AttributeSet as;    AttributeSet anchor;    String href;    while ((e=ei.next()) != null) {      if (e.isLeaf()) {        as=e.getAttributes();        anchor=(AttributeSet)as.getAttribute(HTML.Tag.A);        href=(anchor != null) ? (String)anchor.getAttribute(HTML.Attribute.HREF) : null;        if (href != null) {          hyperlinks.addElement(new HTMLLink(e));        }      }    }  }  linksValid=true;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.hypot(dx,dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.hypot(velocityX,velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public int maxProfitOpt(int k,int[] prices){  if (prices == null || prices.length < 2 || k == 0) {    return 0;  }  int n=prices.length;  int res=0;  if (k >= n / 2) {    for (int i=1; i < n; i++) {      if (prices[i] > prices[i - 1]) {        res+=prices[i] - prices[i - 1];      }    }    return res;  }  int[] cur=new int[n + 1];  for (int i=1; i <= k; i++) {    int curMax=Integer.MIN_VALUE;    for (int j=0; j < n; j++) {      int temp=cur[j + 1];      cur[j + 1]=Math.max(Math.max(cur[j + 1],cur[j]),prices[j] + curMax);      System.out.print(curMax + "|");      curMax=Math.max(curMax,temp - prices[j]);      System.out.print(curMax + "\n");    }    System.out.println(Arrays.toString(cur));  }  return cur[n];}  }
class C{  private SlashActionCommand extractCommand(){  final SlashActionCommand command=new SlashActionCommand();  char ch=ci.current();  if (ch == CharacterIterator.DONE) {    command.setError("Missing slash command");    return command;  }  if (Character.isWhitespace(ch)) {    command.setError("Unexpected space after slash character");    return command;  }  if (Character.isLetterOrDigit(ch)) {    final StringBuilder buf=new StringBuilder();    while ((ch != CharacterIterator.DONE) && !Character.isWhitespace(ch)) {      buf.append(ch);      ch=ci.next();    }    command.setName(buf.toString());  } else {    command.setName(String.valueOf(ch));    ci.next();  }  return command;}  }
class C{  public int countTriangles(int i){  int triangles=0;  TIntArrayList row=rows.get(i);  for (int u=0; u < row.size(); u++) {    for (int v=u + 1; v < row.size(); v++) {      if (getEdge(row.get(u),row.get(v)))       triangles++;    }  }  return triangles;}  }
class C{  public boolean tryRemove(K key){  return trySet(key,null,false);}  }
class C{  public static Object castTo(PageContext pc,String type,Object o,boolean alsoPattern) throws PageException {  type=StringUtil.toLowerCase(type).trim();  if (type.length() > 2) {    char first=type.charAt(0);switch (first) {case 'a':      if (type.equals("any")) {        return o;      } else       if (type.equals("array")) {        return toArray(o);      }    break;case 'b':  if (type.equals("boolean") || type.equals("bool")) {    return toBoolean(o);  } else   if (type.equals("binary")) {    return toBinary(o);  } else   if (type.equals("base64")) {    return toBase64(o,null);  } else   if (type.equals("bigdecimal") || type.equals("big_decimal")) {    return toBigDecimal(o);  } else   if (type.equals("biginteger") || type.equals("big_integer")) {    return toBigInteger(o);  }break;case 'c':if (alsoPattern && type.equals("creditcard")) {return toCreditCard(o);}break;case 'd':if (type.equals("date")) {return DateCaster.toDateAdvanced(o,pc.getTimeZone());} else if (type.equals("datetime")) {return DateCaster.toDateAdvanced(o,pc.getTimeZone());} else if (type.equals("double")) {return toDouble(o);} else if (type.equals("decimal")) {return toDecimal(o);}break;case 'e':if (type.equals("eurodate")) {return DateCaster.toEuroDate(o,pc.getTimeZone());} else if (alsoPattern && type.equals("email")) {return toEmail(o);}break;case 'f':if (type.equals("float")) {return toDouble(o);} else if (type.equals("function")) {return toFunction(o);}break;case 'g':if (type.equals("guid")) {return toGUId(o);}break;case 'i':if (type.equals("integer") || type.equals("int")) {return toInteger(o);}break;case 'l':if (type.equals("long")) {return toLong(o);}break;case 'n':if (type.equals("numeric")) {return toDouble(o);} else if (type.equals("number")) {return toDouble(o);} else if (type.equals("node")) {return toXML(o);}break;case 'o':if (type.equals("object")) {return o;} else if (type.equals("other")) {return o;}break;case 'p':if (alsoPattern && type.equals("phone")) {return toPhone(o);}break;case 'q':if (type.equals("query")) {return toQuery(o);}break;case 's':if (type.equals("string")) {return toString(o);} else if (type.equals("struct")) {return toStruct(o);} else if (type.equals("short")) {return toShort(o);} else if (alsoPattern && (type.equals("ssn") || type.equals("social_security_number"))) {return toSSN(o);}break;case 't':if (type.equals("timespan")) {return toTimespan(o);}if (type.equals("time")) {return DateCaster.toDateAdvanced(o,pc.getTimeZone());}if (alsoPattern && type.equals("telephone")) {return toPhone(o);}break;case 'u':if (type.equals("uuid")) {return toUUId(o);}if (alsoPattern && type.equals("url")) {return toURL(o);}if (type.equals("usdate")) {return DateCaster.toUSDate(o,pc.getTimeZone());}break;case 'v':if (type.equals("variablename")) {return toVariableName(o);} else if (type.equals("void")) {return toVoid(o);} else if (type.equals("variable_name")) {return toVariableName(o);} else if (type.equals("variable-name")) {return toVariableName(o);}break;case 'x':if (type.equals("xml")) {return toXML(o);}case 'z':if (alsoPattern && (type.equals("zip") || type.equals("zipcode"))) {return toZip(o);}break;}}if (type.endsWith("[]")) {String componentType=type.substring(0,type.length() - 2);Object[] src=toNativeArray(o);Array trg=new ArrayImpl();for (int i=0; i < src.length; i++) {if (src[i] == null) {continue;}trg.setE(i + 1,castTo(pc,componentType,src[i],alsoPattern));}return trg;}return _castTo(pc,type,o);}  }
class C{  public FilePath(FilePath base,String subpath){  this(base);  append(subpath);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double total;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          total=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              total+=z;            }          }          outputFile.setValue(row,col,total);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addUntouchable(Class<?> type){  if (_cfgCustomUntouchables == null) {    _cfgCustomUntouchables=new HashSet<ClassKey>();  }  _cfgCustomUntouchables.add(new ClassKey(type));}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public boolean canDrop(){  return !system;}  }
class C{  public Location(double latitude,double longitude){  this.latitude=latitude;  this.longitude=longitude;}  }
class C{  private StoragePort lookupVPlexFrontStoragePortByName(DbClient dbClient,StorageHADomain vplexDirector,String name){  String cacheKey=generateStoragePortKey(vplexDirector,name);  if (NOT_PORTS.contains(cacheKey)) {    return null;  }  StoragePort port=(StoragePort)OBJECT_CACHE.get(cacheKey);  if (port == null) {    port=findStoragePortByNameInDB(dbClient,vplexDirector,name);    if (port != null) {      OBJECT_CACHE.put(cacheKey,port);      return port;    } else {      NOT_PORTS.add(cacheKey);    }  }  return port;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public DefaultEditTextValidator(EditText editText,Context context){  testType=EditTextValidator.TEST_NOCHECK;  setEditText(editText);  resetValidators(context);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public void testFileList(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  List<String> files=new ArrayList<String>(src.getAllFileNames());  Collections.sort(files);  assertEquals(m_files,files);}  }
class C{  public DatabaseDataRow(ResultSet resultSet) throws SQLException {  this.resultSet=resultSet;  this.row=resultSet.getRow();}  }
class C{  public boolean intersects(S2LatLngRect other){  return lat.intersects(other.lat) && lng.intersects(other.lng);}  }
class C{  protected String repositoryLocation(){  return "https://github.com/" + this.username + "/"+ this.repository;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener) throws javax.xml.transform.TransformerException {  initFunctionTable();  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  private AttributeTransform(AttributeCreatorImpl creator){  super(creator);}  }
class C{  private byte[] createHaystack(byte[] needle,int position,int size){  byte[] haystack=new byte[size];  for (int i=position, j=0; i < size && j < needle.length; i++, j++) {    haystack[i]=needle[j];  }  return haystack;}  }
class C{  public static void clear(GeoTimeSerie gts){  gts.values=0;  gts.type=TYPE.UNDEFINED;  gts.booleanValues=null;  gts.locations=null;  gts.elevations=null;  gts.ticks=null;  gts.doubleValues=null;  gts.longValues=null;  gts.stringValues=null;}  }
class C{  public static void main(String[] argv){  runFilter(new ClassOrder(),argv);}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  public RetryException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void updateObligation(ObligationStatusMessage message){  String oldStatusOnBackend=(String)proverStatuses.get(message.getBackend());  if (oldStatusOnBackend != null && oldStatusOnBackend.equals(ProverHelper.PROVED)) {    return;  }  if (this.obligationString == null || this.obligationString.length() == 0) {    this.obligationString=message.getObString();  }  if (message.getBackend() != null && message.getStatus() != null) {    proverStatuses.put(message.getBackend(),message.getStatus());  }  if (message.getBackend() != null && message.getReason() != null) {    proverReasons.put(message.getBackend(),message.getReason());  }  int oldState=getObligationState();  int newState=ProverHelper.getIntFromStringStatus(message.getStatus(),oldState,message.getBackend());  if (oldState != newState) {    obState=newState;    parent.updateStatus();  }}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,View ignoreView,int[] result,int[] resultSpan){  return findNearestArea(pixelX,pixelY,minSpanX,minSpanY,spanX,spanY,ignoreView,true,result,resultSpan,mOccupied);}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  public void invokeClear(TriggerStateMachine.TriggerContext c) throws Exception {  trigger.clear(c.forTrigger(this));}  }
class C{  private void declareExtensions(){  new ContactFeed().declareExtensions(extProfile);  new ContactGroupFeed().declareExtensions(extProfile);  new ProfileFeed().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  public void replaceClassName(ClassMap map){  checkModify();}  }
class C{  public Interval toInterval(){  Chronology chrono=getChronology();  long start=getMillis();  long end=DurationFieldType.days().getField(chrono).add(start,1);  return new Interval(start,end,chrono);}  }
class C{  public static RuntimeException throwInternalError(String s){  RuntimeException e=new RuntimeException(s);  DbException.traceThrowable(e);  throw e;}  }
class C{  public static void cancelAll(){  ANRequestQueue.getInstance().cancelAll(false);}  }
class C{  public static boolean isRemoteObjects(){  return false;}  }
class C{  public HashCode append(final short[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final short element : array) {      append(element);    }  }  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.GAML_DEFINITION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public static void checkForError(TaskResourceRep task){  if (isError(task)) {    throw new ServiceErrorException(taskToError(task));  }}  }
class C{  public void renderImages(int floor,int ceiling,boolean fastmode){  int width=4 * 16;  int height=4 * 16;  block_image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  if (!fastmode)   height_image=new BufferedImage(width,height,BufferedImage.TYPE_BYTE_GRAY);  Graphics2D gb=block_image.createGraphics();  gb.setColor(Color.white);  gb.fillRect(0,0,width,height);  Graphics2D gh=null;  if (!fastmode)   gh=height_image.createGraphics();  gb.setColor(Color.black);  gb.fillRect(0,0,width,height);  short blockID=0;  byte blockData=0;  byte blockBiome=0;  Color c;  Blocks bd=getBlocks();  int ymax=0;  if (is_anvil)   ymax=bd.id.length / (16 * 16); else   ymax=128;  if (floor > ymax)   return;  if (ceiling > ymax)   ceiling=ymax;  if (ceiling < 1)   ceiling=1;  if (floor >= ceiling)   floor=ceiling - 1;  short ids[]=new short[16 * 16];  byte data[]=new byte[16 * 16];  byte biome[]=new byte[16 * 16];  int himage[]=null;  if (!fastmode)   himage=new int[16 * 16];  int x, y, z;  for (z=0; z < 16; z++) {    for (x=0; x < 16; x++) {      ids[z * 16 + x]=0;      for (y=floor; y < ceiling; y++) {        blockBiome=bd.biome[x * 16 + z];        if (is_anvil) {          blockID=bd.id[x + (z * 16) + (y * 16) * 16];          blockData=bd.data[x + (z * 16) + (y * 16) * 16];        } else {          blockID=bd.id[y + (z * 128) + (x * 128) * 16];          blockData=bd.data[y + (z * 128) + (x * 128) * 16];        }        if (blockID != 0) {          ids[z * 16 + x]=blockID;          data[z * 16 + x]=blockData;          biome[z * 16 + x]=blockBiome;          if (!fastmode)           himage[z * 16 + x]=y;        }      }    }  }  for (z=0; z < 16; z++) {    for (x=0; x < 16; x++) {      blockID=ids[z * 16 + x];      blockData=data[z * 16 + x];      blockBiome=biome[z * 16 + x];      if (blockID != 0) {        c=BlockTypes.get(blockID).getPreviewColor(blockData,blockBiome);        if (c != null) {          gb.setColor(c);          gb.fillRect(x * 4,z * 4,4,4);        }      }    }  }  if (!fastmode) {    int h;    for (z=0; z < 16; z++) {      for (x=0; x < 16; x++) {        h=himage[z * 16 + x] % 256;        gh.setColor(new Color(h,h,h));        gh.fillRect(x * 4,z * 4,4,4);      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:01.813 -0500",hash_original_method="968F65DD7A0A827F06FAF23F78E04C48",hash_generated_method="CD3068A149CCD5B39C06926A2722E3EE") public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  public Zoneset showActiveZoneset(Integer vsanId) throws NetworkDeviceControllerException {  List<Zoneset> zonesets=showZoneset(vsanId,true,null,false,false);  return zonesets.isEmpty() ? null : zonesets.get(0);}  }
class C{  public boolean updateAndCheckRate(){  final long nowTimeMicros=TimeUnit.NANOSECONDS.toMicros(System.nanoTime());  final boolean exceed=(nowTimeMicros - threshold) < 0;  threshold=nowTimeMicros + intervalMicros;  countRate(nowTimeMicros);  return exceed;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          slope=(float)(Math.atan(Math.sqrt(fx * fx + fy * fy)) * radToDeg);          outputFile.setValue(row,col,slope);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void open(HttpRoute route,HttpContext context,HttpParams params) throws IOException {  if (route == null) {    throw new IllegalArgumentException("Route must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker != null) && this.tracker.isConnected()) {    throw new IllegalStateException("Connection already open.");  }  this.tracker=new RouteTracker(route);  final HttpHost proxy=route.getProxyHost();  connOperator.openConnection(this.connection,(proxy != null) ? proxy : route.getTargetHost(),route.getLocalAddress(),context,params);  RouteTracker localTracker=tracker;  if (localTracker == null) {    throw new IOException("Request aborted");  }  if (proxy == null) {    localTracker.connectTarget(this.connection.isSecure());  } else {    localTracker.connectProxy(proxy,this.connection.isSecure());  }}  }
class C{  public static Method findMethodWith(Class<?> searchClass,Class<? extends Annotation> annotationClass){  Method foundMethod=null;  methodFinder:   while (searchClass != null && searchClass != Object.class) {    for (    Method method : searchClass.getDeclaredMethods()) {      if (method.isAnnotationPresent(annotationClass)) {        foundMethod=method;        break methodFinder;      }    }    searchClass=searchClass.getSuperclass();  }  return foundMethod;}  }
class C{  public CompletableFuture<Void> kill(){  return submitter.close().thenCompose(null).thenCompose(null).thenCompose(null);}  }
class C{  public void reset(){  start=0;  count=0;  total=0;  isRunning=false;}  }
class C{  @Override public String generateStart(){  return "";}  }
class C{  public void dispose(){  LSettingsGui.removeAllBoundedScl(spinner);}  }
class C{  public XML addClass(Class<?> aClass,Global global,Attribute[] attributes){  XmlClass xmlClass=new XmlClass();  xmlClass.name=aClass.getName();  xmlJmapper.classes.add(xmlClass);  if (!isEmpty(attributes)) {    xmlClass.attributes=new ArrayList<XmlAttribute>();    addAttributes(aClass,attributes);  }  if (global != null)   addGlobal(aClass,global);  return this;}  }
class C{  public ControllerEvent(Controller controller,Type type){  super(controller);  this.type=type;}  }
class C{  public boolean addEdit(UndoableEdit anEdit){  if (!inProgress) {    return false;  } else {    UndoableEdit last=lastEdit();    if (last == null) {      edits.addElement(anEdit);    } else     if (!last.addEdit(anEdit)) {      if (anEdit.replaceEdit(last)) {        edits.removeElementAt(edits.size() - 1);      }      edits.addElement(anEdit);    }    return true;  }}  }
class C{  public boolean isRating(){  return rating;}  }
class C{  public static Mapper<BigDecimal> singleBigDecimal(){  return singleBigDecimal;}  }
class C{  @Override public boolean remove(Object o){  if (!(o instanceof Struct)) {    return false;  }  Struct s=(Struct)o;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return remove(s);}  }
class C{  private static byte[] des3Expand(byte[] input,int start,int end){  if ((end - start) != 7)   throw new IllegalArgumentException("Invalid length of DES Key Value:" + start + ","+ end);  byte[] result=new byte[8];  byte last=0;  System.arraycopy(input,start,result,0,7);  byte posn=0;  for (int i=start; i < end; i++) {    byte bit=(byte)(input[i] & 0x01);    if (debug) {      System.out.println(i + ": " + Integer.toHexString(input[i])+ " bit= "+ Integer.toHexString(bit));    }    ++posn;    if (bit != 0) {      last|=(bit << posn);    }  }  if (debug) {    System.out.println("last: " + Integer.toHexString(last));  }  result[7]=last;  setParityBit(result);  return result;}  }
class C{  public static void assertNotEquals(short notExpected,short actual){  try {    Verify.assertNotEquals("short",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public Response onCommand(SMTPSession session,Request request){  return NOOP;}  }
class C{  public void testCountTable(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class);  final List<MockModel> list=from.execute();  final int count=from.count();  assertEquals(3,count);  assertEquals(list.size(),count);}  }
class C{  public IconAndNameRenderer(){  super();  setHorizontalAlignment(LEFT);  setIconTextGap(5);  setHorizontalTextPosition(RIGHT);}  }
class C{  public static void main(String[] args) throws IOException {  ListedData<String> p=new OsInfoLister().list();  System.out.println("raw: " + p.getJmxData());  System.out.println("parsed: " + p.getParsedData());}  }
class C{  public CStartTutorialAction(final JFrame parent){  super("Tutorials");  m_parent=parent;}  }
class C{  private static MigrationStatus processServiceCmdArgs(String[] args){  String argument;  if (args.length != 2) {    throw new IllegalArgumentException("Wrong arguments");  }  argument=args[1];  if (!argument.equalsIgnoreCase(RESET_MIFAIL)) {    log.error("Invalid command:{} for {}",argument,Command.RESET);    throw new IllegalArgumentException("Invalid command: " + argument);  }  return MigrationStatus.FAILED;}  }
class C{  public StandardXYItemLabelGenerator(String formatString){  this(formatString,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  private void sendResponse(String status,String mime,Properties header,InputStream data){  try {    if (status == null)     throw new Error("sendResponse(): Status can't be null.");    OutputStream out=mySocket.getOutputStream();    PrintWriter pw=new PrintWriter(out);    pw.print("HTTP/1.0 " + status + " \r\n");    if (mime != null)     pw.print("Content-Type: " + mime + "\r\n");    if (header == null || header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");    if (header != null) {      Enumeration e=header.keys();      while (e.hasMoreElements()) {        String key=(String)e.nextElement();        String value=header.getProperty(key);        pw.print(key + ": " + value+ "\r\n");      }    }    pw.print("\r\n");    pw.flush();    if (data != null) {      int pending=data.available();      byte[] buff=new byte[2048];      while (pending > 0) {        int read=data.read(buff,0,((pending > 2048) ? 2048 : pending));        if (read <= 0)         break;        out.write(buff,0,read);        pending-=read;      }    }    out.flush();    out.close();    if (data != null)     data.close();  } catch (  IOException ioe) {    try {      mySocket.close();    } catch (    Throwable t) {    }  }}  }
class C{  @Deprecated public void updateResource(Resource resource,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateResource",mAuthenticationToken,resource);}  }
class C{  private boolean isSystemPackage(PackageInfo packageInfo){  return ((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);}  }
class C{  protected boolean frameFitsCriteria(double left,double right,double up,double down,double rlinterval,double udinterval){switch (boundaryLimits) {case OUTSIDE:    return (left < leftLon && right < leftLon) || (left > rightLon && right > rightLon) || (up < lowerLat && down < lowerLat)|| (up > upperLat && down > upperLat);case INSIDE:  return (left > leftLon && right > leftLon && left < rightLon && right < rightLon && up > lowerLat && down > lowerLat && up < upperLat && down < upperLat);default :return (((right <= rightLon && left >= leftLon - rlinterval) || (left >= leftLon && right <= rightLon + rlinterval) || (left <= leftLon && right >= rightLon)) && ((up <= upperLat + udinterval && down >= lowerLat) || (down >= lowerLat - udinterval && up <= upperLat) || (up >= upperLat && down <= lowerLat)));}}  }
class C{  public static void removeModule(final AbstractSQLProvider provider,final INaviAddressSpace addressSpace,final INaviModule module) throws CouldntDeleteException, CouldntSaveDataException {  checkArguments(provider,addressSpace);  Preconditions.checkNotNull(module,"IE00393: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00394: Module is not part of this database");  final CConnection connection=provider.getConnection();  final String query="DELETE FROM " + CTableNames.SPACE_MODULES_TABLE + " WHERE address_space_id = "+ addressSpace.getConfiguration().getId()+ " AND module_id = "+ module.getConfiguration().getId();  try {    connection.executeUpdate(query,true);  } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }  PostgreSQLHelpers.updateModificationDate(connection,CTableNames.ADDRESS_SPACES_TABLE,addressSpace.getConfiguration().getId());}  }
class C{  private void _incrementTXUniqueIDForReplay(){  TXStateProxyImpl tx=(TXStateProxyImpl)getTXState();  assert tx != null : "expected a transaction to be in progress";  TXId id=new TXId(this.distributionMgrId,this.uniqId.incrementAndGet());  tx.setTXIDForReplay(id);}  }
class C{  private void completeResponses(){  ResponseCallback response=responseCallbacks.get(responseSequence + 1);  while (response != null) {    if (completeResponse(response.response,response.callback)) {      responseCallbacks.remove(++responseSequence);      response=responseCallbacks.get(responseSequence + 1);    } else {      break;    }  }  if (requestSequence == responseSequence) {    EventCallback eventCallback=eventCallbacks.poll();    while (eventCallback != null) {      eventCallback.run();      eventIndex=eventCallback.request.eventIndex();      eventCallback=eventCallbacks.poll();    }  }}  }
class C{  public Chapter(String identifier,String title,Page... pages){  this(identifier,title);  for (  Page page : pages)   addPage(page);}  }
class C{  public EditorColorChooserAction(DrawingEditor editor,AttributeKey<Color> key){  this(editor,key,null,null);  updateEnabledState();}  }
class C{  public Card drawForMatch(Eights eights,Card prev){  while (true) {    Card card=eights.draw();    System.out.println(name + " draws " + card);    if (cardMatches(card,prev)) {      return card;    }    hand.addCard(card);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SISTER_CACHE'";  db.execSQL(sql);}  }
class C{  public void removeGesture(String entryName,Gesture gesture){  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);  if (gestures == null) {    return;  }  gestures.remove(gesture);  if (gestures.isEmpty()) {    mNamedGestures.remove(entryName);  }  mClassifier.removeInstance(gesture.getID());  mChanged=true;}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String costHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster costSurface;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, costVal, srcVal;  float progress=0;  double largeVal=Float.MAX_VALUE - 10000000;  int[] dX=new int[]{1,1,0,-1,-1,-1,0,1};  int[] dY=new int[]{0,1,1,1,0,-1,-1,-1};  double diagDist=Math.sqrt(2);  double[] dist=new double[]{1,diagDist,1,diagDist,1,diagDist,1,diagDist};  double gridRes;  int col, row, a;  int c;  int x, y, i;  int[] backLinkDir=new int[]{32,64,128,1,2,4,8,16};  double costAccumVal, cost1, cost2, newCostVal;  boolean didSomething=false;  int loopNum=0;  boolean blnAnisotropicForce=false;  double anisotropicForceDirection=-999;  double anisotropicForceStrength=-999;  double[] azDir=new double[]{90,135,180,225,270,315,0,45};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      costHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      backLinkHeader=args[i];    } else     if (i == 4) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        blnAnisotropicForce=true;        anisotropicForceDirection=Double.parseDouble(args[i]);        if (anisotropicForceDirection >= 360) {          anisotropicForceDirection=0;        }        if (anisotropicForceDirection < 0) {          anisotropicForceDirection=0;        }      }    } else     if (i == 5) {      blnAnisotropicForce=false;      if (!args[i].toLowerCase().equals("not specified")) {        anisotropicForceStrength=Double.parseDouble(args[i]);        if (anisotropicForceStrength == 1 || anisotropicForceStrength == 0) {          blnAnisotropicForce=false;        } else {          blnAnisotropicForce=true;          if (anisotropicForceStrength > 100) {            anisotropicForceStrength=100;          }          if (anisotropicForceStrength < -100) {            anisotropicForceStrength=-100;          }        }      }    }  }  if ((sourceHeader == null) || (costHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (anisotropicForceDirection == -999 || anisotropicForceStrength == -999) {    if (blnAnisotropicForce) {      showFeedback("Both the Anisotropic Force Direction and " + "Anisotropic Force Strength must be set to valid " + "values to carry out this operation.");      return;    }  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    costSurface=new WhiteboxRaster(costHeader,"r");    if (costSurface.getNumberColumns() != cols || costSurface.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,largeVal);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    backLink=new WhiteboxRaster(backLinkHeader,"rw",sourceHeader,WhiteboxRaster.DataType.INTEGER,noData);    backLink.setPreferredPalette("spectrum.pal");    backLink.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    updateProgress("Calculating Cost Accumulation Surface:",0);    double[] data;    for (row=0; row < rows; row++) {      data=costSurface.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          srcVal=sourceImage.getValue(row,col);          if (srcVal > 0) {            output.setValue(row,col,0);            backLink.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    if (!blnAnisotropicForce) {      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + (cost1 + cost2) / 2 * dist[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    } else {      double dir=0;      for (c=0; c <= 7; c++) {        dir=Math.abs(azDir[c] - anisotropicForceDirection);        if (dir > 180) {          dir=360 - dir;        }        azDir[c]=1 + (180 - dir) / 180 * (anisotropicForceStrength - 1);      }      do {        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=0; c <= 3; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=rows - 1; row >= 0; row--) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=4; c <= 7; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (rows - 1 - row) / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=rows - 1; row >= 0; row--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=3; c <= 6; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (row=0; row < rows - 1; row++) {          for (col=cols - 1; col >= 0; col--) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=1; c <= 4; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }        if (!didSomething) {          break;        }        didSomething=false;        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        for (col=cols - 1; col >= 0; col--) {          for (row=0; row < rows - 1; row++) {            costAccumVal=output.getValue(row,col);            if (costAccumVal < largeVal && costAccumVal != noData) {              cost1=costSurface.getValue(row,col);              for (c=2; c <= 5; c++) {                x=col + dX[c];                y=row + dY[c];                cost2=costSurface.getValue(y,x);                newCostVal=costAccumVal + ((cost1 + cost2) / 2 * dist[c]) / azDir[c];                if (newCostVal < output.getValue(y,x)) {                  output.setValue(y,x,newCostVal);                  backLink.setValue(y,x,backLinkDir[c]);                  didSomething=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * (cols - 1 - col) / (cols - 1));          updateProgress((int)progress);        }      } while (didSomething);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    backLink.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    backLink.addMetadataEntry("Created on " + new Date());    sourceImage.close();    costSurface.close();    output.close();    backLink.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isAdvanced(){  return false;}  }
class C{  public static BufferedImage reduce32(BufferedImage bi,int colors){  int width=bi.getWidth();  int height=bi.getHeight();  int[][] pixels=new int[width][height];  WritableRaster r1=bi.getRaster();  int[] argb=new int[4];  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      argb=r1.getPixel(x,y,argb);      int a=argb[3];      int r=argb[0];      int g=argb[1];      int b=argb[2];      pixels[x][y]=(a << 24) | (r << 16) | (g << 8)| (b);    }  }  int[] palette=Quantize32.quantizeImage(pixels,colors);  colors=palette.length;  boolean useExtraColors=false;  int minimumColors=2;  if (colors < minimumColors) {    colors=minimumColors;    useExtraColors=true;  }  byte[] r=new byte[colors];  byte[] g=new byte[colors];  byte[] b=new byte[colors];  byte[] a=new byte[colors];  if (useExtraColors) {    Arrays.fill(r,(byte)OMColor.green.getRed());    Arrays.fill(g,(byte)OMColor.green.getGreen());    Arrays.fill(b,(byte)OMColor.green.getBlue());    Arrays.fill(a,(byte)OMColor.green.getAlpha());  }  for (int i=0; i < palette.length; i++) {    Color c=new Color(palette[i],true);    r[i]=(byte)c.getRed();    g[i]=(byte)c.getGreen();    b[i]=(byte)c.getBlue();    a[i]=(byte)c.getAlpha();  }  IndexColorModel colorModel=new IndexColorModel(8,r.length,r,g,b,a);  BufferedImage reducedImage=new BufferedImage(width,height,BufferedImage.TYPE_BYTE_INDEXED,colorModel);  WritableRaster raster=reducedImage.getRaster();  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      int value=pixels[x][y];      raster.setSample(x,y,0,value);    }  }  return reducedImage;}  }
class C{  public boolean hasStatus(){  return hasExtension(Status.class);}  }
class C{  public int start(){  return start;}  }
class C{  public static Node traverseReverseDirected(Node node,Edge edge){  if (edge == null) {    return null;  }  if (node == edge.getNode1()) {    if ((edge.getEndpoint1() == Endpoint.ARROW) && (edge.getEndpoint2() == Endpoint.TAIL)) {      return edge.getNode2();    }  } else   if (node == edge.getNode2()) {    if ((edge.getEndpoint2() == Endpoint.ARROW) && (edge.getEndpoint1() == Endpoint.TAIL)) {      return edge.getNode1();    }  }  return null;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  final JFileChooser fc=new JFileChooser(new File("."));  if (param.isDefined()) {    fc.setSelectedFile(param.getValue());  }  if (e.getSource() == button) {    int returnVal=fc.showOpenDialog(button);    if (returnVal == JFileChooser.APPROVE_OPTION) {      textfield.setText(fc.getSelectedFile().getPath());      fireValueChanged();    } else {    }  } else   if (e.getSource() == textfield) {    fireValueChanged();  } else {    LoggingUtil.warning("actionPerformed triggered by unknown source: " + e.getSource());  }}  }
class C{  public SimpleReflexAgentProgram(Set<Rule> ruleSet){  rules=ruleSet;}  }
class C{  protected ValidationMarkerImpl(){  super();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(3);  result.addElement(new Option("\tFull class name of clusterer to use, followed\n" + "\tby scheme options. eg:\n" + "\t\t\"weka.clusterers.SimpleKMeans -N 3\"\n"+ "\t(default: weka.clusterers.SimpleKMeans)","W",1,"-W <clusterer specification>"));  result.addElement(new Option("\tInstead of building a clusterer on the data, one can also provide\n" + "\ta serialized model and use that for adding the clusters.","serialized",1,"-serialized <file>"));  result.addElement(new Option("\tThe range of attributes the clusterer should ignore.\n","I",1,"-I <att1,att2-att4,...>"));  return result.elements();}  }
class C{  public CacheServerProfile(){}  }
class C{  public Identifier resolveName(Environment env,Identifier name){  if (tracing)   env.dtEvent("ClassDefinition.resolveName: " + name);  if (name.isQualified()) {    Identifier rhead=resolveName(env,name.getHead());    if (rhead.hasAmbigPrefix()) {      return rhead;    }    if (!env.classExists(rhead)) {      return env.resolvePackageQualifiedName(name);    }    try {      return env.getClassDefinition(rhead).resolveInnerClass(env,name.getTail());    } catch (    ClassNotFound ee) {      return Identifier.lookupInner(rhead,name.getTail());    }  }  int ls=-2;  LocalMember lf=null;  if (classContext != null) {    lf=classContext.getLocalClass(name);    if (lf != null) {      ls=lf.getScopeNumber();    }  }  for (ClassDefinition c=this; c != null; c=c.outerClass) {    try {      MemberDefinition f=c.getInnerClass(env,name);      if (f != null && (lf == null || classContext.getScopeNumber(c) > ls)) {        return f.getInnerClass().getName();      }    } catch (    ClassNotFound ee) {    }  }  if (lf != null) {    return lf.getInnerClass().getName();  }  return env.resolveName(name);}  }
class C{  public <T>Mapping<T> to(Mapping<T> mapping){  Mapping<T> mapping1=mapping.options(null);  Mapping<T> mapping2=mapping1.options(null);  return mapping2;}  }
class C{  public void onRemoved(){}  }
class C{  public void write(byte[] buffer){  try {    mmOutStream.write(buffer);  } catch (  IOException e) {    Log.e(TAG,"Exception during write",e);  }}  }
class C{  @Override public void IF_ACMPEQ(String className,String methName,int branchIndex,Object conc_left,Object conc_right){  ReferenceExpression right_ref=env.topFrame().operandStack.popRef();  ReferenceExpression left_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_left,left_ref);  env.heap.initializeReference(conc_right,right_ref);}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  private static void appendDoublingBraces(CharSequence source,StringBuilder target){  int index=0;  Matcher scanner=BRACE_PATTERN.matcher(source);  boolean skipClosingBrace=false;  while (scanner.find(index)) {    if (scanner.start() > 1) {      if ("{".equals(scanner.group(0)) && "\\N".equals(source.subSequence(scanner.start() - 2,scanner.start()).toString())) {        skipClosingBrace=true;        target.append(source.subSequence(index,scanner.end()));        index=scanner.end();        continue;      }    }    if (skipClosingBrace && "}".equals(scanner.group(0))) {      skipClosingBrace=false;      target.append(source.subSequence(index,scanner.end()));      index=scanner.end();      continue;    }    target.append(source.subSequence(index,scanner.start()));    if ("{".equals(scanner.group(0)))     target.append("{{"); else     target.append("}}");    index=scanner.end();  }  target.append(source.subSequence(index,source.length()));}  }
class C{  public void startImporting(final IDatabase database,final String idb){  if (!m_imports.containsKey(database)) {    m_imports.put(database,new ArrayList<String>());  }  m_imports.get(database).add(idb);}  }
class C{  public EnumSet<InstanceOperation> listOperationsForInstance(ServiceInstance serviceInstance){  return EnumSet.allOf(InstanceOperation.class);}  }
class C{  public static boolean canDockNorth(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canDockNorth())     return false;  }  return true;}  }
class C{  boolean[] compare(Object[] outputs,Record rec){  IrisRecord r=(IrisRecord)rec;  boolean[] results=new boolean[outputs.length];  for (int i=0; i < results.length; i++) {    float result=(Float)outputs[i];    boolean compare=i == 0 ? r.virginica : i == 1 ? r.versicolor : r.setosa;    results[i]=compare == (result > 0 ? true : false);  }  return results;}  }
class C{  public WindowsArrowButton(int direction,Color background,Color shadow,Color darkShadow,Color highlight){  super(direction,background,shadow,darkShadow,highlight);}  }
class C{  public static OverrideConstraints newInstance(){  final OverrideConstraints returnInstance=new OverrideConstraints();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Override public boolean equals(Object other){  if (null == other || !(other instanceof ByteArrayWrapper)) {    return false;  }  boolean result=false;  byte[][] noDictionaryKeysOther=((ByteArrayWrapper)other).noDictionaryKeys;  if (noDictionaryKeysOther.length != noDictionaryKeys.length) {    return false;  } else {    for (int i=0; i < noDictionaryKeys.length; i++) {      result=UnsafeComparer.INSTANCE.equals(noDictionaryKeys[i],noDictionaryKeysOther[i]);      if (!result) {        return false;      }    }  }  byte[][] complexTypesKeysOther=((ByteArrayWrapper)other).complexTypesKeys;  if (complexTypesKeysOther.length != complexTypesKeys.length) {    return false;  } else {    for (int i=0; i < complexTypesKeys.length; i++) {      result=UnsafeComparer.INSTANCE.equals(complexTypesKeys[i],complexTypesKeysOther[i]);      if (!result) {        return false;      }    }  }  return UnsafeComparer.INSTANCE.equals(dictionaryKey,((ByteArrayWrapper)other).dictionaryKey);}  }
class C{  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {  final float acceptableOverheadRatio=PackedInts.COMPACT;  String docFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.DOC_EXTENSION);  docOut=state.directory.createOutput(docFileName,state.context);  IndexOutput posOut=null;  IndexOutput payOut=null;  boolean success=false;  try {    CodecUtil.writeIndexHeader(docOut,DOC_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    forUtil=new ForUtil(acceptableOverheadRatio,docOut);    if (state.fieldInfos.hasProx()) {      posDeltaBuffer=new int[MAX_DATA_SIZE];      String posFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.POS_EXTENSION);      posOut=state.directory.createOutput(posFileName,state.context);      CodecUtil.writeIndexHeader(posOut,POS_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);      if (state.fieldInfos.hasPayloads()) {        payloadBytes=new byte[128];        payloadLengthBuffer=new int[MAX_DATA_SIZE];      } else {        payloadBytes=null;        payloadLengthBuffer=null;      }      if (state.fieldInfos.hasOffsets()) {        offsetStartDeltaBuffer=new int[MAX_DATA_SIZE];        offsetLengthBuffer=new int[MAX_DATA_SIZE];      } else {        offsetStartDeltaBuffer=null;        offsetLengthBuffer=null;      }      if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {        String payFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,Lucene50PostingsFormat.PAY_EXTENSION);        payOut=state.directory.createOutput(payFileName,state.context);        CodecUtil.writeIndexHeader(payOut,PAY_CODEC,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);      }    } else {      posDeltaBuffer=null;      payloadLengthBuffer=null;      offsetStartDeltaBuffer=null;      offsetLengthBuffer=null;      payloadBytes=null;    }    this.payOut=payOut;    this.posOut=posOut;    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(docOut,posOut,payOut);    }  }  docDeltaBuffer=new int[MAX_DATA_SIZE];  freqBuffer=new int[MAX_DATA_SIZE];  skipWriter=new Lucene50SkipWriter(MAX_SKIP_LEVELS,BLOCK_SIZE,state.segmentInfo.maxDoc(),docOut,posOut,payOut);  encoded=new byte[MAX_ENCODED_SIZE];}  }
class C{  public void validate() throws ConfigException {  loadManifest();  if (_manifest != null)   validateManifest(_jarPath.getContainer().getURL(),_manifest);}  }
class C{  public ConsensusMessage(int type,int id,int epoch,int from){  this(type,id,epoch,from,null);}  }
class C{  @Override protected void parse(char[] text,int off,int len){  if (element || capital) {    text[off]=toUpper(text[off]);  }  capital=true;}  }
class C{  public String addNewLogger(){  if (this.model.getNewLogger() != null && this.model.getNewLogger().getLoggerName() != null && this.model.getNewLogger().getNewLogLevel() != null) {    final Logger newLogger=LoggingUtil.getLogger(this.model.getNewLogger().getLoggerName());    newLogger.setLevel(Level.toLevel(this.model.getNewLogger().getNewLogLevel().getLogLevel()));    loadLoggers();  }  return "successRedirect";}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  BootstrapMethod[] methods=getMethods();  ConstPool thisCp=getConstPool();  for (int i=0; i < methods.length; i++) {    BootstrapMethod m=methods[i];    m.methodRef=thisCp.copy(m.methodRef,newCp,classnames);    for (int k=0; k < m.arguments.length; k++)     m.arguments[k]=thisCp.copy(m.arguments[k],newCp,classnames);  }  return new BootstrapMethodsAttribute(newCp,methods);}  }
class C{  @Override public String userVersion(){  return userVer;}  }
class C{  @SuppressWarnings("rawtypes") public boolean addZoneOrAliasMember(WBEMClient client,CIMInstance zoneServiceIns,String fabricWwn,CIMObjectPath zonePath,String member) throws WBEMException {  CIMArgument[] outargs=new CIMArgument[1];  CIMArgument[] inargs=null;  UnsignedInteger32 result=null;  if (EndpointUtility.isValidEndpoint(member,EndpointType.WWN)) {    _log.info("Add zone or alias member of type wwn " + member);    inargs=new CIMArgument[3];    inargs[0]=_cimArgumentFactory.uint16(_ConnectivityMemberType,2);    inargs[1]=_cimArgumentFactory.string(_ConnectivityMemberID,member.replaceAll(":",""));    inargs[2]=_cimArgumentFactory.reference(_SystemSpecificCollection,zonePath);    result=(UnsignedInteger32)client.invokeMethod(zoneServiceIns.getObjectPath(),_CreateZoneMembershipSettingData,inargs,outargs);  } else {    _log.info("Add zoneor alias  member of type alias " + member);    inargs=new CIMArgument[2];    inargs[0]=_cimArgumentFactory.reference(_Zone,zonePath);    CIMObjectPath aliasPath=getZoneAliasPath(member,fabricWwn);    inargs[1]=_cimArgumentFactory.reference(_ZoneAlias,aliasPath);    result=(UnsignedInteger32)client.invokeMethod(zoneServiceIns.getObjectPath(),_AddZoneAlias,inargs,outargs);  }  _log.info("Add zone or alias member returned code " + result.toString());  return result.intValue() == 0 || result.intValue() == 8;}  }
class C{  public String refreshSession(String SID){  try {    sessionManagement.checkSession(SID);    return "ok";  } catch (  Exception err) {    log.error("[refreshSession]",err);  }  return "error";}  }
class C{  public void redo() throws CannotRedoException {  if (!canRedo()) {    throw new CannotRedoException();  }  hasBeenDone=true;}  }
class C{  public void testReplaceAll(){  Instances result;  m_Filter=getFilter("t","_",true,"first-last",false);  result=performTest();  assertEquals("S_ringA__1",result.attribute(0).name());}  }
class C{  public UserTransactionImpl() throws SystemException {  tm=TransactionManagerImpl.getTransactionManager();}  }
class C{  private void handleSavePaymentConfigurations(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  TriggerProcessParameter param=null;  if (process.getParamValueForName(TriggerProcessParameterName.DEFAULT_CONFIGURATION) != null) {    param=process.getParamValueForName(TriggerProcessParameterName.DEFAULT_CONFIGURATION);    Set<?> defaultConfiguration=getParamValue(param,Set.class);    serviceClient.onSaveDefaultPaymentConfiguration(VOConverter.convertToApi(vo),VOCollectionConverter.convertSet(ParameterizedTypes.set(defaultConfiguration,VOPaymentType.class),org.oscm.vo.VOPaymentType.class));  } else   if (process.getParamValueForName(TriggerProcessParameterName.CUSTOMER_CONFIGURATION) != null) {    param=process.getParamValueForName(TriggerProcessParameterName.CUSTOMER_CONFIGURATION);    VOOrganizationPaymentConfiguration customerConfiguration=getParamValue(param,VOOrganizationPaymentConfiguration.class);    serviceClient.onSaveCustomerPaymentConfiguration(VOConverter.convertToApi(vo),VOConverter.convertToApi(customerConfiguration));  } else   if (process.getParamValueForName(TriggerProcessParameterName.DEFAULT_SERVICE_PAYMENT_CONFIGURATION) != null) {    param=process.getParamValueForName(TriggerProcessParameterName.DEFAULT_SERVICE_PAYMENT_CONFIGURATION);    Set<?> defaultConfiguration=getParamValue(param,Set.class);    serviceClient.onSaveServiceDefaultPaymentConfiguration(VOConverter.convertToApi(vo),VOCollectionConverter.convertSet(ParameterizedTypes.set(defaultConfiguration,VOPaymentType.class),org.oscm.vo.VOPaymentType.class));  } else   if (process.getParamValueForName(TriggerProcessParameterName.SERVICE_PAYMENT_CONFIGURATION) != null) {    param=process.getParamValueForName(TriggerProcessParameterName.SERVICE_PAYMENT_CONFIGURATION);    VOServicePaymentConfiguration conf=getParamValue(param,VOServicePaymentConfiguration.class);    serviceClient.onSaveServicePaymentConfiguration(VOConverter.convertToApi(vo),VOConverter.convertToApi(conf));  }  updateProcessState(process);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.364 -0500",hash_original_method="B97F48EA0F14252413142D91DE4A3BFA",hash_generated_method="86913E9551B857462339C45B3E0F0407") public ViolationInfo(Throwable tr,int policy){  crashInfo=new ApplicationErrorReport.CrashInfo(tr);  violationUptimeMillis=SystemClock.uptimeMillis();  this.policy=policy;  this.numAnimationsRunning=ValueAnimator.getCurrentAnimationsCount();  Intent broadcastIntent=ActivityThread.getIntentBeingBroadcast();  if (broadcastIntent != null) {    broadcastIntentAction=broadcastIntent.getAction();  }  ThreadSpanState state=sThisThreadSpanState.get();  if (tr instanceof InstanceCountViolation) {    this.numInstances=((InstanceCountViolation)tr).mInstances;  }synchronized (state) {    int spanActiveCount=state.mActiveSize;    if (spanActiveCount > MAX_SPAN_TAGS) {      spanActiveCount=MAX_SPAN_TAGS;    }    if (spanActiveCount != 0) {      this.tags=new String[spanActiveCount];      Span iter=state.mActiveHead;      int index=0;      while (iter != null && index < spanActiveCount) {        this.tags[index]=iter.mName;        index++;        iter=iter.mNext;      }    }  }}  }
class C{  @Override final public int search(final byte[] searchKey){  throw new UnsupportedOperationException();}  }
class C{  public UnsignedLong inc(){  return valueOf(getValue() + 1);}  }
class C{  private boolean extraEntity(String outputString,int charToMap){  boolean extra=false;  if (charToMap < ASCII_MAX) {switch (charToMap) {case '"':      if (!outputString.equals("&quot;"))       extra=true;    break;case '&':  if (!outputString.equals("&amp;"))   extra=true;break;case '<':if (!outputString.equals("&lt;")) extra=true;break;case '>':if (!outputString.equals("&gt;")) extra=true;break;default :extra=true;}}return extra;}  }
class C{  private void moveToUserIdsChannel(MessageReceivedEvent event,Guild guild) throws Exception {  VoiceChannel channel=findUsersChannel(event,guild);  if (channel == null) {    event.getAuthor().getPrivateChannel().sendMessage("Hello @" + event.getAuthor().getUsername() + "! I can not find you in any Voice Channel. Are you sure you are connected to voice?.");    LOG.warn("Problem moving to requested users channel. Maybe user, " + event.getAuthor().getUsername() + " is not connected to Voice?");  } else {    moveToChannel(channel,guild);  }}  }
class C{  public static void transposeM(double[] mTrans,int mTransOffset,double[] m,int mOffset){  for (int i=0; i < 4; i++) {    int mBase=i * 4 + mOffset;    mTrans[i + mTransOffset]=m[mBase];    mTrans[i + 4 + mTransOffset]=m[mBase + 1];    mTrans[i + 8 + mTransOffset]=m[mBase + 2];    mTrans[i + 12 + mTransOffset]=m[mBase + 3];  }}  }
class C{  public MutablePeriod(int years,int months,int weeks,int days,int hours,int minutes,int seconds,int millis,PeriodType type){  super(years,months,weeks,days,hours,minutes,seconds,millis,type);}  }
class C{  @Override protected void makeCastlingMove(Move move){  FischerRandomUtils.makeCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  private void loadProductImage(String imagePath,ImageView imageView){  Bitmap bitmap=BitmapUtil.fromFileScaled(imagePath,imageView.getWidth(),imageView.getHeight(),true);  if (bitmap == null) {    Log.d(getClass().getSimpleName(),"Failed to load product image: image view dimensions not yet " + "" + "determined");  } else {    Activity activity=getActivity();    if (activity != null) {      imageView.setImageDrawable(BitmapUtil.getRoundedBitmapDrawable(activity,bitmap));    }  }}  }
class C{  public ExtensionListing description(String description){  mDescription=description;  return this;}  }
class C{  public static boolean isFinite(Automaton a){  if (a.getNumStates() == 0) {    return true;  }  return isFinite(new Transition(),a,0,new BitSet(a.getNumStates()),new BitSet(a.getNumStates()));}  }
class C{  protected void replaceMembers(Collection<RelationMember> newMembers){  members.clear();  members.addAll(newMembers);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_setting)   return;  setTime();  if (e.getSource() == bOK) {    m_abort=false;    dispose();    return;  } else   if (e.getSource() == bBack) {    if (--m_currentMonth < 1) {      m_currentMonth=12;      m_currentYear--;    }    m_lastDay=-1;  } else   if (e.getSource() == bNext) {    if (++m_currentMonth > 12) {      m_currentMonth=1;      m_currentYear++;    }    m_lastDay=-1;  } else   if (e.getSource() instanceof JButton) {    JButton b=(JButton)e.getSource();    String text=b.getText();    if (text.equals("*")) {      m_calendar.setTime(new Timestamp(System.currentTimeMillis()));      m_currentDay=m_calendar.get(java.util.Calendar.DATE);      m_currentMonth=m_calendar.get(java.util.Calendar.MONTH) + 1;      m_currentYear=m_calendar.get(java.util.Calendar.YEAR);      m_current24Hour=m_calendar.get(java.util.Calendar.HOUR_OF_DAY);      m_currentMinute=m_calendar.get(java.util.Calendar.MINUTE);    } else     if (text.equals("x")) {      m_cancel=true;      dispose();      return;    } else     if (text.equals(Msg.getMsg(Env.getCtx(),"Key_Clear"))) {      m_clear=true;      dispose();      return;    } else     if (text.length() > 0) {      m_currentDay=Integer.parseInt(text);      long currentClick=System.currentTimeMillis();      if (m_currentDay == m_lastDay && currentClick - m_lastClick < 1000) {        m_abort=false;        dispose();        return;      }      m_lastClick=currentClick;      m_lastDay=m_currentDay;    }  } else   if (e.getSource() == cbPM) {    setTime();    m_lastDay=-1;  } else {    m_currentMonth=cMonth.getSelectedIndex() + 1;    m_lastDay=-1;  }  setCalendar();}  }
class C{  private static synchronized void initCerts(){  if (SERVER_PRIVATE_KEY != null) {    return;  }  try {    PrivateKeyEntry serverPrivateKeyEntry=TestKeyStore.getServer().getPrivateKey("RSA","RSA");    SERVER_PRIVATE_KEY=OpenSSLKey.fromPrivateKey(serverPrivateKeyEntry.getPrivateKey());    SERVER_CERTIFICATES=NativeCrypto.encodeCertificates(serverPrivateKeyEntry.getCertificateChain());    PrivateKeyEntry clientPrivateKeyEntry=TestKeyStore.getClientCertificate().getPrivateKey("RSA","RSA");    CLIENT_PRIVATE_KEY=OpenSSLKey.fromPrivateKey(clientPrivateKeyEntry.getPrivateKey());    CLIENT_CERTIFICATES=NativeCrypto.encodeCertificates(clientPrivateKeyEntry.getCertificateChain());    KeyStore ks=TestKeyStore.getClient().keyStore;    String caCertAlias=ks.aliases().nextElement();    X509Certificate certificate=(X509Certificate)ks.getCertificate(caCertAlias);    X500Principal principal=certificate.getIssuerX500Principal();    CA_PRINCIPALS=new byte[][]{principal.getEncoded()};    initChannelIdKey();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public ResourceNode locateRelative(String sessionID,int levels,ResourceNode startNode) throws DirectoryException, DirectoryNotFoundException {  if (levels == 0)   return getCurrentNode(sessionID);  ResourceNode foundNode=null;  ResourceNode nodeToSearch=startNode;  for (int level=0; level < levels; level++) {    if ((foundNode=nodeToSearch.getParent()) != null) {      nodeToSearch=nodeToSearch.getParent();    } else {      throw new DirectoryException(String.format("No parent element found for '%s'",formatPath(getAbsolutePath(nodeToSearch,nodeToSearch,true),true)));    }  }  return foundNode;}  }
class C{  public void paintTabbedPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public float[] toArray(float[] result,int offset){  if (result == null || result.length - offset < 4) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Color","toArray","missingResult"));  }  result[offset++]=this.red;  result[offset++]=this.green;  result[offset++]=this.blue;  result[offset]=this.alpha;  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node child;  String childName;  Node replacedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  newChild=doc.createElement("br");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  child=childList.item(0);  childName=child.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  public void queue(final URI deviceURI,final String deviceType,Object target,String method,Object... args) throws ControllerException {  queue(getDefaultQueue().getQueueName(),deviceURI,deviceType,true,target,method,args);}  }
class C{  public static String format(int[] a){  return (a == null) ? "null" : (a.length == 0) ? "" : formatTo(new StringBuilder(),a,", ").toString();}  }
class C{  public boolean isIncidenceSetLoaded(HGHandle h){  return cache.getIncidenceCache().isLoaded(getPersistentHandle(h));}  }
class C{  public static String toStringPriority(int priority){  if (priority == Thread.NORM_PRIORITY)   return "NORMAL";  if (priority == Thread.MAX_PRIORITY)   return "HIGH";  if (priority == Thread.MIN_PRIORITY)   return "LOW";  return null;}  }
class C{  public BasicException(){}  }
class C{  public String elementName(){  return elementName;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Window theWindow=getWindow();  WindowManager.LayoutParams lp=theWindow.getAttributes();  lp.width=ViewGroup.LayoutParams.MATCH_PARENT;  lp.height=ViewGroup.LayoutParams.MATCH_PARENT;  lp.gravity=Gravity.TOP | Gravity.FILL_HORIZONTAL;  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;  theWindow.setAttributes(lp);  setCanceledOnTouchOutside(true);}  }
class C{  public static Sorting parseQueryParams(final MultivaluedMap<String,String> queryParams){  final Map<String,SortOrder> sortingRules=new LinkedHashMap<>();  queryParams.entrySet().stream().filter(null).forEachOrdered(null);  return sortingRules.isEmpty() ? DEFAULT_EMPTY_INSTANCE : new Sorting(sortingRules);}  }
class C{  public SwitchLiveMode(String text){  super(text);  setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_LIVE_MODE));  setChecked(LiveMode.ACTIVE_DEFAULT);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double cutoffsInSD=3;  int numOutputBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  cutoffsInSD=Double.parseDouble(args[2]);  numOutputBins=Integer.parseInt(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    double[] referenceCDF=new double[numOutputBins];    double rootOf2Pi=Math.sqrt(2 * Math.PI);    double exponent;    double x;    for (i=0; i < numOutputBins; i++) {      x=(double)i / (numOutputBins - 1) * 2 * cutoffsInSD - cutoffsInSD;      exponent=-x * x / 2;      referenceCDF[i]=Math.pow(Math.E,exponent) / rootOf2Pi;    }    for (i=1; i < numOutputBins; i++) {      referenceCDF[i]+=referenceCDF[i - 1];    }    double totalFrequency=referenceCDF[numOutputBins - 1];    for (i=0; i < numOutputBins; i++) {      referenceCDF[i]=referenceCDF[i] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numOutputBins; i++) {      pVal=referenceCDF[i];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numOutputBins; i++) {            if (referenceCDF[i] > pVal) {              if (i > 0) {                xVal=i - 1;              } else {                xVal=i;              }              break;            } else             if (referenceCDF[i] == pVal) {              xVal=i;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final boolean canSetDate(String field){  return m_table.canSetDate(field);}  }
class C{  public static MProduct forS_Resource_ID(Properties ctx,int S_Resource_ID){  return forS_Resource_ID(ctx,S_Resource_ID,null);}  }
class C{  private void init(){  try {    final ZipFile zf=new ZipFile(jarFileName);    final Enumeration<? extends ZipEntry> e=zf.entries();    while (e.hasMoreElements()) {      final ZipEntry ze=e.nextElement();      if (debugOn) {        System.out.println(dumpZipEntry(ze));      }      htSizes.put(ze.getName(),(int)ze.getSize());    }    zf.close();    final FileInputStream fis=new FileInputStream(jarFileName);    final BufferedInputStream bis=new BufferedInputStream(fis);    final ZipInputStream zis=new ZipInputStream(bis);    ZipEntry ze=null;    while ((ze=zis.getNextEntry()) != null) {      if (ze.isDirectory()) {        continue;      }      if (debugOn) {        System.out.println("ze.getName()=" + ze.getName() + ","+ "getSize()="+ ze.getSize());      }      int size=(int)ze.getSize();      if (size == -1) {        size=htSizes.get(ze.getName()).intValue();      }      final byte[] b=new byte[size];      int rb=0;      int chunk=0;      while ((size - rb) > 0) {        chunk=zis.read(b,rb,size - rb);        if (chunk == -1) {          break;        }        rb+=chunk;      }      htJarContents.put(ze.getName(),b);      if (debugOn) {        System.out.println(ze.getName() + "  rb=" + rb+ ",size="+ size+ ",csize="+ ze.getCompressedSize());      }    }    zis.close();  } catch (  final NullPointerException e) {    System.out.println("done.");  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public BlockPos localAddressToBlockPos(int localAddress){  int x=Coords.localToBlock(this.coords.getX(),AddressTools.getLocalX(localAddress));  int y=Coords.localToBlock(this.coords.getY(),AddressTools.getLocalY(localAddress));  int z=Coords.localToBlock(this.coords.getZ(),AddressTools.getLocalZ(localAddress));  return new BlockPos(x,y,z);}  }
class C{  @Override public String toString(){  String result=getProtocol().getName() + "://";  if (getUser().isPresent()) {    result+=urlencode(getUser().get());    if (getPass().isPresent()) {      result+=":****";    }    result+="@";  }  result+=getHost();  if (getPort() != getProtocol().getPort()) {    result+=String.format(":%d",getPort());  }  result+="/";  result+=getPath().or("");  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.044 -0500",hash_original_method="6F574A26D6DB1C59B77D339A09CC5651",hash_generated_method="6E8D1564353F1F57F1DB4C1958DE215F") public BERTaggedObject(int tagNo){  super(false,tagNo,new BERSequence());}  }
class C{  protected void sequence_ProvidedRuntimeLibraryDependency(ISerializationContext context,ProvidedRuntimeLibraryDependency semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getProvidedRuntimeLibraryDependencyAccess().getProjectSimpleProjectDescriptionParserRuleCall_0(),semanticObject.getProject());  feeder.finish();}  }
class C{  private void nextState(){  Boolean current=getState();  if (current == Boolean.FALSE) {    setState(Boolean.TRUE);  } else   if (current == Boolean.TRUE) {    setState(null);  } else   if (current == null) {    setState(Boolean.FALSE);  }}  }
class C{  public boolean readBoolean() throws IOException {  return in.readByte() == 1;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void paintFormattedTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  protected void startExecutorPool(){  if (m_executorPool != null) {    m_executorPool.shutdownNow();  }  m_executorPool=Executors.newFixedThreadPool(m_executionSlots);}  }
class C{  public void removeControlPoint(){  Position currentLastPosition=null;  if (this.isRegularShape()) {    if (this.shapeRectangle != null) {      this.shapeRectangle=null;      this.shapeOrientation=null;      this.positions.clear();      while (this.controlPoints.size() > 1) {        this.controlPoints.remove(1);      }    } else     if (this.shapeCenterPosition != null) {      this.shapeCenterPosition=null;      this.controlPoints.clear();    }  } else {    if (this.positions.size() == 0)     return;    if (!this.measureShapeType.equals(SHAPE_POLYGON) || this.positions.size() == 1) {      currentLastPosition=this.positions.get(this.positions.size() - 1);      this.positions.remove(this.positions.size() - 1);    } else {      currentLastPosition=this.positions.get(this.positions.size() - 2);      this.positions.remove(this.positions.size() - 2);      if (positions.size() == 2)       positions.remove(1);    }    if (this.controlPoints.size() > 0)     this.controlPoints.remove(this.controlPoints.size() - 1);  }  this.controlPointsLayer.setRenderables(this.controlPoints);  updateMeasureShape();  this.firePropertyChange(EVENT_POSITION_REMOVE,currentLastPosition,null);  this.wwd.redraw();}  }
class C{  public boolean isBound(){  return bound;}  }
class C{  @Override public boolean isWithoutReply(){  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.EXACT_QUANTIFIER__MIN:    setMin((Integer)newValue);  return;case RegularExpressionPackage.EXACT_QUANTIFIER__MAX:setMax((Integer)newValue);return;case RegularExpressionPackage.EXACT_QUANTIFIER__UNBOUNDED_MAX:setUnboundedMax((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.896 -0500",hash_original_method="791BBBBBE0FA40697270B44A4D66C782",hash_generated_method="6BE5A66C72A82CFFA51BE96C76461E51") private boolean parseParcel(){  mParcel.setDataPosition(0);  if (mParcel.dataAvail() == 0) {    return false;  }  int type=mParcel.readInt();  if (type == KEY_LOCAL_SETTING) {    type=mParcel.readInt();    if (type != KEY_START_TIME) {      return false;    }    int mStartTimeMs=mParcel.readInt();    mKeyObjectMap.put(type,mStartTimeMs);    type=mParcel.readInt();    if (type != KEY_STRUCT_TEXT) {      return false;    }    mTextStruct=new Text();    mTextStruct.textLen=mParcel.readInt();    mTextStruct.text=mParcel.createByteArray();    mKeyObjectMap.put(type,mTextStruct);  } else   if (type != KEY_GLOBAL_SETTING) {    Log.w(TAG,"Invalid timed text key found: " + type);    return false;  }  while (mParcel.dataAvail() > 0) {    int key=mParcel.readInt();    if (!isValidKey(key)) {      Log.w(TAG,"Invalid timed text key found: " + key);      return false;    }    Object object=null;switch (key) {case KEY_STRUCT_STYLE_LIST:{        readStyle();        object=mStyleList;        break;      }case KEY_STRUCT_FONT_LIST:{      readFont();      object=mFontList;      break;    }case KEY_STRUCT_HIGHLIGHT_LIST:{    readHighlight();    object=mHighlightPosList;    break;  }case KEY_STRUCT_KARAOKE_LIST:{  readKaraoke();  object=mKaraokeList;  break;}case KEY_STRUCT_HYPER_TEXT_LIST:{readHyperText();object=mHyperTextList;break;}case KEY_STRUCT_BLINKING_TEXT_LIST:{readBlinkingText();object=mBlinkingPosList;break;}case KEY_WRAP_TEXT:{mWrapText=mParcel.readInt();object=mWrapText;break;}case KEY_HIGHLIGHT_COLOR_RGBA:{mHighlightColorRGBA=mParcel.readInt();object=mHighlightColorRGBA;break;}case KEY_DISPLAY_FLAGS:{mDisplayFlags=mParcel.readInt();object=mDisplayFlags;break;}case KEY_STRUCT_JUSTIFICATION:{mJustification=new Justification();mJustification.horizontalJustification=mParcel.readInt();mJustification.verticalJustification=mParcel.readInt();object=mJustification;break;}case KEY_BACKGROUND_COLOR_RGBA:{mBackgroundColorRGBA=mParcel.readInt();object=mBackgroundColorRGBA;break;}case KEY_STRUCT_TEXT_POS:{mTextPos=new TextPos();mTextPos.top=mParcel.readInt();mTextPos.left=mParcel.readInt();mTextPos.bottom=mParcel.readInt();mTextPos.right=mParcel.readInt();object=mTextPos;break;}case KEY_SCROLL_DELAY:{mScrollDelay=mParcel.readInt();object=mScrollDelay;break;}default :{break;}}if (object != null) {if (mKeyObjectMap.containsKey(key)) {mKeyObjectMap.remove(key);}mKeyObjectMap.put(key,object);}}mParcel.recycle();return true;}  }
class C{  @Override public void beginOfStream() throws AdeException, AdeFlowException {  super.beginOfStream();  try {    s_marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,"xslt/AnalyzedInterval.xsd");  } catch (  PropertyException e) {    throw new AdeInternalException("failed to set formatted output for JAXB Marshaller object",e);  }  m_xmlMetaData=new XMLMetaDataRetriever();}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  private void analyseCorrelationContinuous(double[] values,int stepSize){  final int samples=values.length;  int maxLag=Math.min(samples - 1,MAX_LAG);  double[] gammaStat=new double[maxLag];  double varStat=0.0;  for (int lag=0; lag < maxLag; lag++) {    for (int j=0; j < samples - lag; j++) {      final double del1=values[j] - mean;      final double del2=values[j + lag] - mean;      gammaStat[lag]+=(del1 * del2);    }    gammaStat[lag]/=((double)(samples - lag));    if (lag == 0) {      varStat=gammaStat[0];    } else     if (lag % 2 == 0) {      if (gammaStat[lag - 1] + gammaStat[lag] > 0) {        varStat+=2.0 * (gammaStat[lag - 1] + gammaStat[lag]);      } else       maxLag=lag;    }  }  stdErrorOfMean=Math.sqrt(varStat / samples);  ACT=stepSize * varStat / gammaStat[0];  ESS=(stepSize * samples) / ACT;  stdErrOfACT=(2.0 * Math.sqrt(2.0 * (2.0 * (double)(maxLag + 1)) / samples) * (varStat / gammaStat[0])* stepSize);  isValid=true;}  }
class C{  public Object put(Object constraint,Object component){  if (!(component instanceof Component))   throw new IllegalArgumentException("ALayoutCollection can only add Component values");  if (constraint != null && !containsKey(constraint) && constraint instanceof ALayoutConstraint) {    return super.put(constraint,component);  }  if (super.size() == 0) {    return super.put(new ALayoutConstraint(0,0),component);  }  int row=getMaxRow();  if (row == -1)   row=0;  int col=getMaxCol(row) + 1;  ALayoutConstraint next=new ALayoutConstraint(row,col);  return super.put(next,component);}  }
class C{  public void writeEnumNoTag(final int value) throws IOException {  writeRawVarint32(value);}  }
class C{  private void computeTypeParameterBinding(final IType superType,final int index) throws JavaModelException, IndexOutOfBoundsException {  int nParameters=superType.getTypeParameters().length;  if (nParameters <= index)   throw new IndexOutOfBoundsException();  IType[] subTypes=fHierarchy.getSubtypes(superType);  if (subTypes.length == 0) {    Assert.isTrue(superType.equals(fType));    String match=findMatchingTypeArgument(fVariable.signature,index,fUnit.findPrimaryType());    String bound=SignatureUtil.getUpperBound(match);    addBound(bound);    return;  }  IType subType=subTypes[0];  String signature=findMatchingSuperTypeSignature(subType,superType);  String match=findMatchingTypeArgument(signature,index,subType);  if (isConcreteType(match,subType)) {    addBound(match);    return;  }  ITypeParameter[] typeParameters=subType.getTypeParameters();  for (int k=0; k < typeParameters.length; k++) {    ITypeParameter formalParameter=typeParameters[k];    if (formalParameter.getElementName().equals(SignatureUtil.stripSignatureToFQN(match))) {      String[] bounds=formalParameter.getBounds();      for (int i=0; i < bounds.length; i++) {        String boundSignature=Signature.createTypeSignature(bounds[i],true);        addBound(SignatureUtil.qualifySignature(boundSignature,subType));      }      computeTypeParameterBinding(subType,k);      return;    }  }  addBound(match);  return;}  }
class C{  public void testValueOfUnknownDocType() throws Exception {  DocType docType=new DocType("web-app","foo","bar");  assertNull(WebXmlVersion.valueOf(docType));}  }
class C{  public List<String> asMulti(){  if (values.isEmpty()) {    return Collections.emptyList();  }  List<String> multi=new ArrayList<String>(values.size());  for (  JsonValue value : values) {    if (value.isNull()) {      multi.add("");      continue;    }    Object obj=value.getValue();    if (obj != null) {      multi.add(obj.toString());      continue;    }  }  return multi;}  }
class C{  public void translate(double dx,double dy){  tx+=dx;  ty+=dy;}  }
class C{  protected void panic(String msg) throws SAXException {  SAXParseException spe=new SAXParseException(msg,this);  mHandErr.fatalError(spe);  throw spe;}  }
class C{  public static byte[] encryptText(byte[] password,String text){  byte[] data=getUTF8Bytes(text);  return encryptData(password,data.length,data);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Long && val instanceof Double) {          long k=unwrapKey(key);          double v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public ExpansionModel(Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  this(ExpansionModelParser.EXPANSION_MODEL,N0Parameter,N1Parameter,growthRateParameter,units,usingGrowthRate);}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    getRegions().clear();  getRegions().addAll((Collection<? extends Region>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public LongKeyMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  void reverseOrder(){  mPol=getElementReverseOrder();}  }
class C{  public static String join(List<?> l,String glue){  StringBuffer sb=new StringBuffer();  for (int i=0; i < l.size(); i++) {    if (i > 0) {      sb.append(glue);    }    Object x=l.get(i);    sb.append(x.toString());  }  return sb.toString();}  }
class C{  public void extend(final int size){  Preconditions.checkArgument(size > 0,"The number of bytes to add must be positive");  final byte[] data=new byte[m_data.length + size];  System.arraycopy(m_data,0,data,0,m_data.length);  m_data=data;}  }
class C{  public int toInt(){  return TypeFormat.parseInt(this);}  }
class C{  private PostgreSQLViewSaver(){}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  @Override public void registerPressKeyskWatcher(String name,Selector[] conditions,String[] keys){synchronized (watchers) {    if (watchers.contains(name)) {      device.removeWatcher(name);      watchers.remove(name);    }    UiSelector[] selectors=new UiSelector[conditions.length];    for (int i=0; i < conditions.length; i++) {      selectors[i]=conditions[i].toUiSelector();    }    device.registerWatcher(name,new PressKeysWatcher(selectors,keys));    watchers.add(name);  }}  }
class C{  public void resetSyntax(){  for (int i=0; i < 256; i++) {    tokenTypes[i]=0;  }}  }
class C{  ResourceNode(final Node parent,final File file){  super(parent);  checkNotNull(file,"file");  checkArgument(file.exists(),"File '" + file + "' does not exist.");  this.file=file;}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=getDbClient();  try {    List<URI> storageSystemURIList=dbClient.queryByType(StorageSystem.class,true);    List<StorageSystem> storageSystemsList=dbClient.queryObject(StorageSystem.class,storageSystemURIList);    Iterator<StorageSystem> systemItr=storageSystemsList.iterator();    List<StorageSystem> systemsToUpdate=new ArrayList<StorageSystem>();    while (systemItr.hasNext()) {      StorageSystem storageSystem=systemItr.next();      if (DiscoveredDataObject.Type.hds.name().equalsIgnoreCase(storageSystem.getSystemType())) {        String serialNumber=storageSystem.getSerialNumber();        if (serialNumber.contains(ARRAY)) {          String[] dotSeperatedStrings=serialNumber.split(DOT_OPERATOR);          String serialNumberToUpdate=dotSeperatedStrings[dotSeperatedStrings.length - 1];          storageSystem.setSerialNumber(serialNumberToUpdate);          systemsToUpdate.add(storageSystem);        }      }    }    dbClient.persistObject(systemsToUpdate);  } catch (  Exception e) {    log.error("Exception occured while updating hds storagesystem serialnumber");    log.error(e.getMessage(),e);  }}  }
class C{  public SeekableXZInputStream(SeekableInputStream in,int memoryLimit) throws IOException {  this.in=in;  DataInputStream inData=new DataInputStream(in);{    in.seek(0);    byte[] buf=new byte[XZ.HEADER_MAGIC.length];    inData.readFully(buf);    if (!Arrays.equals(buf,XZ.HEADER_MAGIC))     throw new XZFormatException();  }  long pos=in.length();  if ((pos & 3) != 0)   throw new CorruptedInputException("XZ file size is not a multiple of 4 bytes");  byte[] buf=new byte[DecoderUtil.STREAM_HEADER_SIZE];  long streamPadding=0;  while (pos > 0) {    if (pos < DecoderUtil.STREAM_HEADER_SIZE)     throw new CorruptedInputException();    in.seek(pos - DecoderUtil.STREAM_HEADER_SIZE);    inData.readFully(buf);    if (buf[8] == 0x00 && buf[9] == 0x00 && buf[10] == 0x00 && buf[11] == 0x00) {      streamPadding+=4;      pos-=4;      continue;    }    pos-=DecoderUtil.STREAM_HEADER_SIZE;    StreamFlags streamFooter=DecoderUtil.decodeStreamFooter(buf);    if (streamFooter.backwardSize >= pos)     throw new CorruptedInputException("Backward Size in XZ Stream Footer is too big");    check=Check.getInstance(streamFooter.checkType);    checkTypes|=1 << streamFooter.checkType;    in.seek(pos - streamFooter.backwardSize);    IndexDecoder index;    try {      index=new IndexDecoder(in,streamFooter,streamPadding,memoryLimit);    } catch (    MemoryLimitException e) {      assert memoryLimit >= 0;      throw new MemoryLimitException(e.getMemoryNeeded() + indexMemoryUsage,memoryLimit + indexMemoryUsage);    }    indexMemoryUsage+=index.getMemoryUsage();    if (memoryLimit >= 0) {      memoryLimit-=index.getMemoryUsage();      assert memoryLimit >= 0;    }    if (largestBlockSize < index.getLargestBlockSize())     largestBlockSize=index.getLargestBlockSize();    long off=index.getStreamSize() - DecoderUtil.STREAM_HEADER_SIZE;    if (pos < off)     throw new CorruptedInputException("XZ Index indicates " + "too big compressed size for the XZ Stream");    pos-=off;    in.seek(pos);    inData.readFully(buf);    StreamFlags streamHeader=DecoderUtil.decodeStreamHeader(buf);    if (!DecoderUtil.areStreamFlagsEqual(streamHeader,streamFooter))     throw new CorruptedInputException("XZ Stream Footer does not match Stream Header");    uncompressedSize+=index.getUncompressedSize();    if (uncompressedSize < 0)     throw new UnsupportedOptionsException("XZ file is too big");    blockCount+=index.getRecordCount();    if (blockCount < 0)     throw new UnsupportedOptionsException("XZ file has over " + Integer.MAX_VALUE + " Blocks");    streams.add(index);    streamPadding=0;  }  assert pos == 0;  this.memoryLimit=memoryLimit;  IndexDecoder prev=(IndexDecoder)streams.get(streams.size() - 1);  for (int i=streams.size() - 2; i >= 0; --i) {    IndexDecoder cur=(IndexDecoder)streams.get(i);    cur.setOffsets(prev);    prev=cur;  }  IndexDecoder first=(IndexDecoder)streams.get(streams.size() - 1);  curBlockInfo=new BlockInfo(first);  queriedBlockInfo=new BlockInfo(first);}  }
class C{  public HttpURL(final HttpURL base,final HttpURL relative) throws URIException {  super(base,relative);  checkValid();}  }
class C{  private void resetDatabase(TungstenProperties serviceProps,Map<String,String> progress) throws InterruptedException {  DataSourceAdministrator admin=null;  String serviceName=serviceProps.getString(ReplicatorConf.SERVICE_NAME);  try {    admin=new DataSourceAdministrator(serviceProps);    admin.prepare();    progress.put("clear data source catalogs",serviceName);    boolean cleared=admin.resetAll();    if (cleared) {      logger.info("Data source catalog information cleared");    } else {      logger.info("Unable to clear data source information: service=" + serviceName);    }  } catch (  ReplicatorException e) {    logger.error(String.format("Error while clearing data source information %s: %s",serviceName,e.getMessage()),e);  } finally {    if (admin != null) {      admin.release();    }  }}  }
class C{  private boolean addIndent(int column){  if (this.indent < column) {    this.indents.push(this.indent);    this.indent=column;    return true;  }  return false;}  }
class C{  public static <T>T newProxyInstance(Class<T> interfaceClass,T delegate,Strictness strictness){  return newProxyInstance(interfaceClass,delegate,strictness,Thread.currentThread());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void doRelease(){}  }
class C{  @Override public void emitError(InvalidEntry<StructuredRecord> value){}  }
class C{  public static Range iterateToFindZBounds(XYZDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys");  ParamChecks.nullNotPermitted(xRange,"xRange");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  Iterator iterator=visibleSeriesKeys.iterator();  while (iterator.hasNext()) {    Comparable seriesKey=(Comparable)iterator.next();    int series=dataset.indexOf(seriesKey);    int itemCount=dataset.getItemCount(series);    for (int item=0; item < itemCount; item++) {      double x=dataset.getXValue(series,item);      double z=dataset.getZValue(series,item);      if (xRange.contains(x)) {        if (!Double.isNaN(z)) {          minimum=Math.min(minimum,z);          maximum=Math.max(maximum,z);        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  private void handleErrorsIfAny(final Object errors){  if (errors != null) {    List<ValidationError> validationErrors=null;    if (errors instanceof List)     validationErrors=(List<ValidationError>)errors; else     if (errors instanceof Map)     validationErrors=toErrors((Map)errors); else     validationErrors=Arrays.asList(new ValidationError(errors.toString(),errors.toString()));    throw new ValidationException(validationErrors);  }}  }
class C{  public boolean isDropTarget(){  return dropTarget;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="rs";  String parameter="1.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public synchronized void updateObject(int columnIndex,Object x,SQLType targetSqlType,int scaleOrLength) throws SQLException {  super.updateObjectInternal(columnIndex,JDBC42Helper.convertJavaTimeToJavaSql(x),translateAndCheckSqlType(targetSqlType),scaleOrLength);}  }
class C{  public static Message from(Message message){  return with(message).build();}  }
class C{  public static Instances keepLabels(Instances D,int L,int j[]) throws Exception {  int to_remove[]=A.invert(j,L);  return remove(D,to_remove,false);}  }
class C{  public DD min(DD x){  if (this.le(x)) {    return this;  } else {    return x;  }}  }
class C{  public static BufferedImage toOpaqueImage(ImageIcon icon,Color bgColor){  return toBufferedImage(icon.getImage(),bgColor);}  }
class C{  public final RVMMember resolveMember(){  if (isFieldReference()) {    return this.asFieldReference().resolve();  } else {    return this.asMethodReference().resolve();  }}  }
class C{  public final boolean isLineComment(){  return (this instanceof LineComment);}  }
class C{  public void append(StringBuffer buffer,String fieldName,short[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean hasSuperPrivilege(Connection connection,String testName) throws SQLException {  boolean superPrivilege=false;  Statement st=connection.createStatement();  ResultSet rs=st.executeQuery("SELECT Super_Priv FROM mysql.user WHERE user = '" + username + "' AND host = '"+ hostname+ "'");  if (rs.next()) {    superPrivilege=(rs.getString(1).equals("Y"));  } else {    rs=st.executeQuery("SELECT Super_Priv FROM mysql.user WHERE user = '" + username + "' AND host = '%'");    if (rs.next()) {      superPrivilege=(rs.getString(1).equals("Y"));    }  }  rs.close();  if (superPrivilege) {    System.out.println("test '" + testName + "' skipped because user '"+ username+ "' has SUPER privileges");  }  return superPrivilege;}  }
class C{  @Override public Long sort(final byte[] key,final byte[] dstkey){  checkIsInMultiOrPipeline();  client.sort(key,dstkey);  return client.getIntegerReply();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.436 -0500",hash_original_method="EF53A9AEF549006E04C5A25F56401EE0",hash_generated_method="EF53A9AEF549006E04C5A25F56401EE0") void init(AccessibilityEvent event){  super.init(event);  mEventType=event.mEventType;  mEventTime=event.mEventTime;  mPackageName=event.mPackageName;}  }
class C{  public Complex minus(Complex c){  return subtract(this,c);}  }
class C{  public static @Nullable Double toDoubleOrNull(@Nullable String str){  if (str == null)   return null;  try {    return Double.parseDouble(str);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public org.eclipse.jdt.internal.corext.refactoring.changes.CompilationUnitChange createChange() throws CoreException {  CompilationUnitChange change=createChange(true);  if (change == null)   return null;  return new org.eclipse.jdt.internal.corext.refactoring.changes.CompilationUnitChange(change);}  }
class C{  @Override void resolve(ReferenceType refType) throws InvalidTypeException, NoSuchFieldException {  if (!(refType instanceof ClassType)) {    throw new InvalidTypeException();  }  Field field=refType.fieldByName(fieldId);  if (field == null) {    throw new NoSuchFieldException(fieldId);  }  setRequest(refType.virtualMachine().eventRequestManager().createModificationWatchpointRequest(field));}  }
class C{  public static void d(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.d(LOG_TAG,msg,cause);  }}  }
class C{  private void assertWriteLittleEndian64(byte[] data,long value) throws Exception {  ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  output.writeRawLittleEndian64(value);  output.flush();  assertEqualBytes(data,rawOutput.toByteArray());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    rawOutput=new ByteArrayOutputStream();    output=CodedOutputStream.newInstance(rawOutput,blockSize);    output.writeRawLittleEndian64(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());  }}  }
class C{  public CModuleNode(final INaviModule module,final DefaultTreeModel model,final IActionProvider actionProvider){  Preconditions.checkNotNull(module,"IE01577: Module argument can not be null");  Preconditions.checkNotNull(model,"IE01578: Model argument can not be null");  Preconditions.checkNotNull(actionProvider,"IE01579: Action provider argument can not be null");  m_module=module;  m_model=model;  m_actionProvider=actionProvider;  m_module.addListener(m_internalModuleListener);  createChildren();}  }
class C{  public void cancel(){  LOGGER.log(Level.FINE,"Canceling observe relation {0} with {1}",new Object[]{getKey(),resource.getURI()});  if (exchange.getResponse() != null)   exchange.getResponse().cancel();  setEstablished(false);  resource.removeObserveRelation(this);  endpoint.removeObserveRelation(this);  exchange.setComplete();}  }
class C{  public void removeActor(MovieActor obj){  actors.remove(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  public static String nodeSubTypeToString(int subType){  String val="?";switch (subType) {case NodeRepresentation.AND_TYPE:    val="AND_TYPE";  break;case NodeRepresentation.OR_TYPE:val="OR_TYPE";break;case NodeRepresentation.IMPLIES_TYPE:val="IMPLIES_TYPE";break;case NodeRepresentation.FORALL_TYPE:val="FORALL_TYPE";break;case NodeRepresentation.EXISTS_TYPE:val="EXISTS_TYPE";break;case NodeRepresentation.SQSUB_TYPE:val="SQSUB_TYPE";break;case NodeRepresentation.OTHER_TYPE:val="OTHER_TYPE";break;}return val;}  }
class C{  public boolean match(AnonymousClassDeclaration node,Object other){  if (!(other instanceof AnonymousClassDeclaration)) {    return false;  }  AnonymousClassDeclaration o=(AnonymousClassDeclaration)other;  return safeSubtreeListMatch(node.bodyDeclarations(),o.bodyDeclarations());}  }
class C{  public void add(Node node){  insert(roots,roots.getChildren().size(),node);}  }
class C{  public static void sort(short[] array){  DualPivotQuicksort.sort(array);}  }
class C{  private void createRegistrar(String registrarName,String password,String tld) throws Exception {  CreateRegistrarCommand command=new CreateRegistrarCommand();  command.mainParameters=ImmutableList.of(registrarName);  command.createGoogleGroups=false;  command.allowedTlds=ImmutableList.of(tld);  command.registrarName=registrarName;  command.registrarType=Registrar.Type.OTE;  command.password=password;  command.clientCertificateFilename=certFile;  command.ipWhitelist=ipWhitelist;  command.street=ImmutableList.of("e-street");  command.city="Neverland";  command.state="ofmind";  command.countryCode="US";  command.zip="55555";  command.email=Optional.of("foo@neverland.com");  command.fax=Optional.of("+1.2125550100");  command.phone=Optional.of("+1.2125550100");  command.icannReferralEmail="nightmare@registrar.test";  command.force=force;  command.run();}  }
class C{  public void clearStatistics(){  jobsScheduledCount.getAndReset();  jobsExecutingCount.getAndReset();  jobsCompletedCount.getAndReset();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public OrderSearchBuilder search(){  return new OrderSearchBuilder(this);}  }
class C{  public void replaceType(String oldType,String newType){  for (  Schedule sch : getSchedulesByIdList()) {    for (    ScheduleItem si : sch.getItemsBySequenceList()) {      if (si.getTypeName().equals(oldType)) {        si.setTypeName(newType);      }    }  }}  }
class C{  protected int indexOfDecimalPoint(String s){  int i=s.lastIndexOf('.');  if (i < 0)   i=s.lastIndexOf('e');  if (i < 0)   i=s.lastIndexOf('E');  if (i < 0)   i=s.length();  return i;}  }
class C{  protected void paintVerticalLabel(Graphics g,int value,Component label){  int labelCenter=yPositionForValue(value);  int labelTop=labelCenter - (label.getPreferredSize().height / 2);  g.translate(0,labelTop);  label.paint(g);  g.translate(0,-labelTop);}  }
class C{  private void raster(){  glEnable(GL_DEPTH_TEST);  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glClear(GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vaoScene);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length / 2);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);}  }
class C{  public static boolean isWindowsPlatform(){  String os=System.getProperty("os.name");  return (os != null && os.startsWith(WIN_ID));}  }
class C{  WaitForExitService3(WebServerImpl server,SystemManager systemManager){  _server=server;  _resinSystem=systemManager;}  }
class C{  private void visualizeDivider(@NonNull final Divider divider,@NonNull final DividerViewHolder viewHolder){  if (!TextUtils.isEmpty(divider.getTitle())) {    viewHolder.titleTextView.setText(divider.getTitle());    viewHolder.titleTextView.setVisibility(View.VISIBLE);    viewHolder.leftDivider.setVisibility(View.VISIBLE);  } else {    viewHolder.titleTextView.setVisibility(View.GONE);    viewHolder.leftDivider.setVisibility(View.GONE);  }  if (dividerColor != -1) {    viewHolder.titleTextView.setTextColor(dividerColor);    viewHolder.leftDivider.setBackgroundColor(dividerColor);    viewHolder.rightDivider.setBackgroundColor(dividerColor);  }}  }
class C{  public static Bitmap loadOrientedConstrainedBitmap(Uri uri,Context context,int maxSideLength,int orientation,Rect originalBounds){  Bitmap bmap=loadConstrainedBitmap(uri,context,maxSideLength,originalBounds,false);  if (bmap != null) {    bmap=orientBitmap(bmap,orientation);    if (bmap.getConfig() != Bitmap.Config.ARGB_8888) {      bmap=bmap.copy(Bitmap.Config.ARGB_8888,true);    }  }  return bmap;}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Attr newAttr;  Attr badAttr;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  newAttr=doc.createAttribute("newAttr");{    boolean success=false;    try {      badAttr=entElement.setAttributeNode(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void onResume(boolean multitasking){}  }
class C{  public VerificationParams(Uri verificationURI,Uri originatingURI,Uri referrer,int originatingUid,ManifestDigest manifestDigest){  mVerificationURI=verificationURI;  mOriginatingURI=originatingURI;  mReferrer=referrer;  mOriginatingUid=originatingUid;  mManifestDigest=manifestDigest;  mInstallerUid=NO_UID;}  }
class C{  public void addSafeClass(SootClass clz){  safeClasses.add(clz.getName());}  }
class C{  public static int varIntSize(int n){  int size=1;  while ((n & 0xFFFF_FF80) != 0) {    size++;    n>>>=7;  }  return size;}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;{      if (n > 0 && runLen[n - 1] < runLen[n + 1])       n--;    }    mergeAt(n);  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  protected void formatParamAsVer(final CharArrayBuffer buffer,final String name,final String value,int version){  buffer.append(name);  buffer.append("=");  if (value != null) {    if (version > 0) {      buffer.append('\"');      buffer.append(value);      buffer.append('\"');    } else {      buffer.append(value);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.581 -0500",hash_original_method="64094CFB244C647C5657F3E488B1D7D6",hash_generated_method="DFD6F8FCBE676C5DD63A9C319CD53D2C") public String encodeBody(){  return organization;}  }
class C{  public boolean canGrowOutwardsOnRope(World world,int x,int y,int z){  if (BlockCheck.isRope(world.getBlock(x + 1,y,z)))   return true;  if (BlockCheck.isRope(world.getBlock(x - 1,y,z)))   return true;  if (BlockCheck.isRope(world.getBlock(x,y,z + 1)))   return true;  if (BlockCheck.isRope(world.getBlock(x,y,z - 1)))   return true;  return false;}  }
class C{  public static boolean equals(Object a,Object b){  return a == b || (a == null ? b == null : a.equals(b));}  }
class C{  public SP800SecureRandom buildHash(Digest digest,byte[] nonce,boolean predictionResistant){  return new SP800SecureRandom(random,entropySourceProvider.get(entropyBitsRequired),new HashDRBGProvider(digest,nonce,personalizationString,securityStrength),predictionResistant);}  }
class C{  public void parse(String line,String timeKey) throws Exception {  if (line.startsWith(FLAG)) {    String[] items=line.split("\\s+");    for (int i=0; i < items.length; ++i) {      if (items[i].equals("inuse")) {        established=NumberUtils.toInt(items[i + 1]);      } else       if (items[i].equals("orphan")) {        orphan=NumberUtils.toInt(items[i + 1]);      } else       if (items[i].equals("tw")) {        timeWait=NumberUtils.toInt(items[i + 1]);      }    }  }}  }
class C{  public Object mapTo(final Object objectToMap,final int flags){  return this.mapTo(objectToMap,null,flags);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix09.class,args);}  }
class C{  public boolean waitFor(long timeout){  if (!complete) {    try {      values=tasks.get(timeout);      complete=true;      context.updateTaskLog(log,elapsedTime());    } catch (    TimeoutException e) {    }catch (    Exception e) {      error=new ExecutionException(e);      complete=true;      context.updateTaskLog(log,elapsedTime(),e);    }  }  return complete;}  }
class C{  public void notify(String sensor,boolean value){}  }
class C{  @Override public final boolean accepts(SlingHttpServletRequest request){  return true;}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  @Override public void reset(){  offset=markOffset;}  }
class C{  public void release(){}  }
class C{  public <Type>Type finishLoading(final String assetPath,final Class<Type> assetClass,final AssetLoaderParameters<Type> loadingParameters){  if (assetManager.isLoaded(assetPath)) {    return assetManager.get(assetPath,assetClass);  }  if (!eagerAssetManager.isLoaded(assetPath)) {    eagerAssetManager.load(assetPath,assetClass,loadingParameters);    eagerAssetManager.finishLoadingAsset(assetPath);  }  return eagerAssetManager.get(assetPath,assetClass);}  }
class C{  protected T state(){  return state;}  }
class C{  public PersonPlan2Kml(Network network,Population population,String outputDir,TreeSet<String> agentIds){  super(network,population,"nofile.xml");  this.outputDir=outputDir;  this.network=network;  this.agentIds=agentIds;}  }
class C{  public DebugException(final Exception exception){  super(exception);}  }
class C{  public void addCSSAttribute(MutableAttributeSet attr,CSS.Attribute key,String value){  css.addInternalCSSValue(attr,key,value);}  }
class C{  public ConsoleEntryList(int capacity,int trimSize){  entries=new LimitSizeEntryList(capacity,trimSize);  currentEntries=entries;  logDisabledTypesMask=0;}  }
class C{  public void userAdmin(UserAdminConfig config){  config.addCredentials(this);  POST(this.url + "/user-admin",config.toXML());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case AA:    return isSetAa();case AB:  return isSetAb();}throw new IllegalStateException();}  }
class C{  public static long generate(long crc,byte[] buffer){  return generate(crc,buffer,0,buffer.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:53.157 -0500",hash_original_method="A8D0295941AD6316CEC94ABF823C5DD4",hash_generated_method="0D0A126060A4ABD17BDAE7D2B64AEA2E") public void removeConnection(int connectionId){synchronized (sConnectionCache) {    sConnectionCache.remove(connectionId);  }}  }
class C{  protected void deselectItem(){  if (selectionTable.getSelectionCount() == 0) {    return;  }  final List<DLItem> deselectedItems=new ArrayList<DLItem>();  for (  final TableItem tableItem : selectionTable.getSelection()) {    final DLItem item=(DLItem)tableItem.getData();    item.setLastAction(LAST_ACTION.DESELECTION);    deselectedItems.add(item);    items.add(item);    selection.remove(item);    fireSelectionEvent(item);  }  fireSelectionChangeEvent(deselectedItems);  redrawTables();}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public boolean supportsResultSetType(int type) throws SQLException {switch (type) {case ResultSet.TYPE_FORWARD_ONLY:case ResultSet.TYPE_SCROLL_INSENSITIVE:case ResultSet.TYPE_SCROLL_SENSITIVE:    return true;default :  return false;}}  }
class C{  void grabCompositionArea(boolean doUpdate){synchronized (compositionAreaHandlerLock) {    if (compositionAreaHandler != null) {      compositionAreaHandler.grabCompositionArea(doUpdate);    } else {      CompositionAreaHandler.closeCompositionArea();    }  }}  }
class C{  public static void reset(){  allRouters=new ArrayList<EpidemicOracleRouter>();}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.carbonStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.carbonStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public void selectAllAccessibleSelection(){}  }
class C{  public XmlDom(String str) throws SAXException {  this(str.getBytes());}  }
class C{  protected void reuseEntry(final HashEntry<K,V> entry,final int hashIndex,final int hashCode,final K key,final V value){  entry.next=data[hashIndex];  entry.hashCode=hashCode;  entry.key=key;  entry.value=value;}  }
class C{  public ListPreference findPreference(String key){  for (  CameraPreference pref : list) {    if (pref instanceof ListPreference) {      ListPreference listPref=(ListPreference)pref;      if (listPref.getKey().equals(key))       return listPref;    } else     if (pref instanceof PreferenceGroup) {      ListPreference listPref=((PreferenceGroup)pref).findPreference(key);      if (listPref != null)       return listPref;    }  }  return null;}  }
class C{  private void processEndOfIteration(final int iteration){}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.595 -0500",hash_original_method="C3D4A92B6459D8B60217C4D554CBE13A",hash_generated_method="1D376316D1205516ABEA16C475D4BC2B") public AuthScope(final String host,int port,final String realm){  this(host,port,realm,ANY_SCHEME);}  }
class C{  private void updateShadowGradientBasedOnTime(Time time){  float mShadowGradientRadius=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,80.0f,160.0f);  Log.d(TAG," GRADIENT RADIUS AT " + time.hour + " h. RAD: "+ mShadowGradientRadius+ "");  hoursTens.calculateGradient(mShadowGradientRadius,initShadowGradientColor,finalShadowGradientColor);  hoursUnits.calculateGradient(mShadowGradientRadius,initShadowGradientColor,finalShadowGradientColor);  minutesTens.calculateGradient(mShadowGradientRadius,initShadowGradientColor,finalShadowGradientColor);  minutesUnits.calculateGradient(mShadowGradientRadius,initShadowGradientColor,finalShadowGradientColor);}  }
class C{  static void printBrief(DexData dexData,boolean justClasses){  ClassRef[] externClassRefs=dexData.getExternalReferences();  printClassRefs(externClassRefs,justClasses);  if (!justClasses) {    printFieldRefs(externClassRefs);    printMethodRefs(externClassRefs);  }}  }
class C{  public AppInviteDialog(final Activity activity){  super(activity,DEFAULT_REQUEST_CODE);}  }
class C{  @Override public boolean equals(Object x){  return this == x || x instanceof MethodType && equals((MethodType)x);}  }
class C{  protected void fireConnectionClosed(boolean forced){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).connectionClosed(forced);    }  }}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  public void flush(){  try {    appendNewlineIfNecessary(leftBuf,leftColumn);    appendNewlineIfNecessary(rightBuf,rightColumn);    outputFullLines();    flushLeft();    flushRight();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static long today(){  DateOnlyCalendar calendar=DateOnlyCalendar.today();  long timeMillis=calendar.getTimeInMillis();  calendar.recycle();  return timeMillis;}  }
class C{  public void dumpOriginal(PrintStream out){  out.println("seq\tversion\ttime\tclasses\tNCSS\tadded\tnewCode\tfixed\tremoved\tretained\tdead\tactive");  for (int i=0; i < versionList.length; ++i) {    Version version=versionList[i];    AppVersion appVersion=sequenceToAppVersionMap.get(version.getSequence());    out.print(i);    out.print('\t');    out.print(appVersion != null ? appVersion.getReleaseName() : "");    out.print('\t');    if (formatDates) {      out.print("\"" + (appVersion != null ? dateFormat.format(new Date(appVersion.getTimestamp())) : "") + "\"");    } else {      out.print(appVersion != null ? appVersion.getTimestamp() / 1000 : 0L);    }    out.print('\t');    if (appVersion != null) {      out.print(appVersion.getNumClasses());      out.print('\t');      out.print(appVersion.getCodeSize());    } else {      out.print("\t0\t0");    }    for (int j=0; j < TUPLE_SIZE; ++j) {      out.print('\t');      out.print(version.get(j));    }    out.println();  }}  }
class C{  private byte[] extractBinaryExchangeData(BinaryExchangeType element) throws ParserException {  if (element == null) {    return null;  }  if (!Constants.ENCODING_TYPE_BASE64.equals(element.getEncodingType()) || !Constants.BINARY_EXCHANGE_TYPE_SPNEGO.equals(element.getValueType())) {    log.debug(PROCESS_RSTR_ERROR);    throw new ParserException(PROCESS_RSTR_ERROR);  }  return Base64.decodeBase64(element.getValue());}  }
class C{  public final long readLong() throws IOException {  readFully(readBuffer,0,8);  return (((long)readBuffer[0] << 56) + ((long)(readBuffer[1] & 255) << 48) + ((long)(readBuffer[2] & 255) << 40)+ ((long)(readBuffer[3] & 255) << 32)+ ((long)(readBuffer[4] & 255) << 24)+ ((readBuffer[5] & 255) << 16)+ ((readBuffer[6] & 255) << 8)+ ((readBuffer[7] & 255) << 0));}  }
class C{  public String createQueryString(Projection p){  if (queryHeader == null) {    return null;  }  StringBuffer buf=new StringBuffer(queryHeader);  buf.append(REQUEST + "=" + MAP+ "&");  if (p != null) {    Point2D center=p.getCenter();    buf.append(PROJTYPE + "=" + p.getName()+ "&"+ SCALE+ "="+ p.getScale()+ "&"+ LAT+ "="+ center.getY()+ "&"+ LON+ "="+ center.getX()+ "&"+ HEIGHT+ "="+ p.getHeight()+ "&"+ WIDTH+ "="+ p.getWidth());  } else {    buf.append(PROJTYPE + "=name_undefined&" + SCALE+ "=scale_undefined&"+ LAT+ "=center_lat_undefined&"+ LON+ "=center_lon_undefined&"+ HEIGHT+ "=height_undefined&"+ WIDTH+ "=width_undefined");  }  if (imageFormat != null) {    buf.append("&" + FORMAT + "="+ imageFormat);  }  if (transparent) {    buf.append("&" + TRANSPARENT + "=true");  }  if (backgroundColor != null) {    buf.append("&" + BGCOLOR + "="+ backgroundColor);  }  String layers=getLayerMarkers();  if (layers != null) {    buf.append("&" + layers);  }  return buf.toString();}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float xOffset=l.getLineWidth() + l.getXOffset();      float yOffset=Utils.convertDpToPixel(2f) + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentTop() + yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,pts[0] - xOffset,mViewPortHandler.contentBottom() - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public static void f(String msg){  if (!allowWtf)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public static boolean isEqual(double d1,double d2){  if (Double.isNaN(d1) && Double.isNaN(d2)) {    return true;  }  if (Double.isNaN(d1) || Double.isNaN(d2)) {    return false;  }  return Math.abs(d1 - d2) < IS_ZERO;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.hypot(dx,dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.hypot(velocityX,velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public DataTableCellRenderer(){  this(new Color(223,223,223),new Color(192,192,192));}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<>(oldValue.getBitmap()));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.066 -0500",hash_original_method="B7677C48F68A4418B50D4EB3534A5CED",hash_generated_method="2E8AC4FC6D94F381FAC5EA98D7D7234A") public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Document cloneDocument(DOMImplementation domImpl,Document document){  Element root=document.getDocumentElement();  Document result=domImpl.createDocument(root.getNamespaceURI(),root.getNodeName(),null);  Element rroot=result.getDocumentElement();  boolean before=true;  for (Node n=document.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n == root) {      before=false;      copyAttributes(result,root,rroot);      for (Node c=root.getFirstChild(); c != null; c=c.getNextSibling()) {        final Node cl=cloneNode(result,c);        if (cl != null) {          rroot.appendChild(cl);        }      }    } else {      if (n.getNodeType() != Node.DOCUMENT_TYPE_NODE) {        final Node cl=cloneNode(result,n);        if (cl != null) {          if (before) {            result.insertBefore(cl,rroot);          } else {            result.appendChild(cl);          }        }      }    }  }  return result;}  }
class C{  public int remove(double key){  int prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public static List<ServiceDetailDescriptor> findModule(ModuleDetailDescriptor descriptor){  return new SPIFinder().findModule(descriptor);}  }
class C{  static boolean isChristmasTime(Calendar cal){  int month=cal.get(Calendar.MONTH);  int day=cal.get(Calendar.DAY_OF_MONTH);  if (month >= 1 && month < 10) {    return false;  }  if (month == 0) {    return day <= 6;  }  if (month == 10) {    return day >= 23;  }  return false;}  }
class C{  public static void analyze(ExprNode topNode,QueryGraph queryGraph,boolean isOuterJoin){  if (topNode instanceof ExprEqualsNode) {    ExprEqualsNode equalsNode=(ExprEqualsNode)topNode;    if (!equalsNode.isNotEquals()) {      analyzeEqualsNode(equalsNode,queryGraph,isOuterJoin);    }  } else   if (topNode instanceof ExprAndNode) {    ExprAndNode andNode=(ExprAndNode)topNode;    analyzeAndNode(andNode,queryGraph,isOuterJoin);  } else   if (topNode instanceof ExprBetweenNode) {    ExprBetweenNode betweenNode=(ExprBetweenNode)topNode;    analyzeBetweenNode(betweenNode,queryGraph);  } else   if (topNode instanceof ExprRelationalOpNode) {    ExprRelationalOpNode relNode=(ExprRelationalOpNode)topNode;    analyzeRelationalOpNode(relNode,queryGraph);  } else   if (topNode instanceof ExprDotNode && !isOuterJoin) {    ExprDotNode dotNode=(ExprDotNode)topNode;    analyzeDotNode(dotNode,queryGraph);  } else   if (topNode instanceof ExprInNode) {    ExprInNode inNode=(ExprInNode)topNode;    analyzeInNode(inNode,queryGraph);  } else   if (topNode instanceof ExprOrNode) {    ExprNode rewritten=FilterSpecCompilerMakeParamUtil.rewriteOrToInIfApplicable(topNode);    if (rewritten instanceof ExprInNode) {      ExprInNode inNode=(ExprInNode)rewritten;      analyzeInNode(inNode,queryGraph);    }  }}  }
class C{  public static Vec4 fromArray3(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return fromDoubleArray(array,offset,3);}  }
class C{  private DomainRestoreInfo doForwardChecking(Variable var,Assignment assignment,CSP csp){  DomainRestoreInfo result=new DomainRestoreInfo();  for (  Constraint constraint : csp.getConstraints(var)) {    List<Variable> scope=constraint.getScope();    if (scope.size() == 2) {      for (      Variable neighbor : constraint.getScope()) {        if (!assignment.hasAssignmentFor(neighbor)) {          if (revise(neighbor,constraint,assignment,csp,result)) {            if (csp.getDomain(neighbor).isEmpty()) {              result.setEmptyDomainFound(true);              return result;            }          }        }      }    }  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ABSTRACT_INT_LITERAL;}  }
class C{  @Override public Date valueDate(final Date fixingDate){  QL.require(isValidFixingDate(fixingDate),"Fixing date " + fixingDate + " is not valid");  final Date d=fixingCalendar().advance(fixingDate,fixingDays(),TimeUnit.Days);  return jointCalendar.adjust(d);}  }
class C{  public void initQQ(String qqAppId){  mQQAppId=qqAppId;}  }
class C{  @Override public void onActivityPaused(Activity activity){synchronized (NfcActivityManager.this) {    NfcActivityState state=findActivityState(activity);    if (DBG)     Log.d(TAG,"onPause() for " + activity + " "+ state);    if (state == null)     return;    state.resumed=false;  }}  }
class C{  public void makePath(String path,byte[] data,CreateMode createMode,Watcher watcher,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,createMode,watcher,true,retryOnConnLoss);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  private SimpleSink.SimpleWriteOperation buildWriteOperation(){  SimpleSink sink=buildSink();  return new SimpleSink.SimpleWriteOperation(sink,getBaseTempFilename(),TemporaryFileRetention.REMOVE);}  }
class C{  public Object remove(Object key){  checkKey(key);  return map.remove(key);}  }
class C{  public static <A,O extends A>A[] addObjectToArray(A[] array,O obj){  Class<?> compType=Object.class;  if (array != null) {    compType=array.getClass().getComponentType();  } else   if (obj != null) {    compType=obj.getClass();  }  int newArrLength=(array != null ? array.length + 1 : 1);  @SuppressWarnings("unchecked") A[] newArr=(A[])Array.newInstance(compType,newArrLength);  if (array != null) {    System.arraycopy(array,0,newArr,0,array.length);  }  newArr[newArr.length - 1]=obj;  return newArr;}  }
class C{  @Override public Iterator<Map.Entry<String,DocumentAnalysis>> iterator(){  return documentAnalysisByKey.entrySet().iterator();}  }
class C{  public CActionHierarchicLayout(final JFrame parent,final ZyGraph graph){  super("Hierarchical Layout");  m_parent=Preconditions.checkNotNull(parent,"IE02821: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02822: graph argument can not be null");  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/layhier_up.jpg")));  putValue(Action.SHORT_DESCRIPTION,"Hierarchical Layout");}  }
class C{  public boolean isServer(){  return this.server;}  }
class C{  public static PropertiesFormat forMIMEType(final String mimeType){  return forMIMEType(mimeType,null);}  }
class C{  public static boolean isServiceEnabled(Connection connection){  return ServiceDiscoveryManager.getInstanceFor(connection).includesFeature(namespace);}  }
class C{  public static boolean hasBinding(Injector injector,Class<?> baseClass){  return !getBindingsOf(injector,baseClass).isEmpty();}  }
class C{  public WrappedIndentingWriter(Writer out,int width,String prefix){  super(out);  if (out == null) {    throw new NullPointerException("out == null");  }  if (width < 0) {    throw new IllegalArgumentException("width < 0");  }  if (prefix == null) {    throw new NullPointerException("prefix == null");  }  this.width=(width != 0) ? width : Integer.MAX_VALUE;  this.maxIndent=width >> 1;  this.prefix=(prefix.length() == 0) ? null : prefix;  bol();}  }
class C{  public static Pair<ResourceType,String> resolveResourceId(int value){  Pair<ResourceType,String> pair=sRMap.get(value);  if (pair == null) {    pair=sDynamicIds.resolveId(value);    if (pair == null) {    }  }  return pair;}  }
class C{  private void computeWeights(Node node){  int wsum=0;  for (  Node child : node.children) {    computeWeights(child);    wsum+=child.weight;  }  node.weight=Math.max(1,wsum);}  }
class C{  public static ICovarianceMatrix serializableInstance(){  List<Node> variables=new ArrayList<>();  Node x=new ContinuousVariable("X");  variables.add(x);  TetradMatrix matrix=TetradAlgebra.identity(1);  return new CovarianceMatrix(variables,matrix,100);}  }
class C{  private void addProblem(String creature,String problem){  List<String> problemList=problems.get(creature);  if (problemList == null) {    problemList=new ArrayList<String>();    problems.put(creature,problemList);  }  problemList.add(problem);}  }
class C{  public void stopPlayback(){  mediaPlayerImpl.stopPlayback();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private void updateScreenMode(){  if (isInAmbientMode()) {    mShadowDialController.setAmbientMode(mLowBitAmbient,mBurnInProtection);  } else {    mShadowDialController.setInteractiveMode();    mShadowDialController.updateElementsStylesBasedOnTime(mTime);  }}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  public Prepared prepare(String sql,boolean rightsChecked){  Parser parser=new Parser(this);  parser.setRightsChecked(rightsChecked);  return parser.prepare(sql);}  }
class C{  public GoogleBaseAttributeId(String name,GoogleBaseAttributeType type){  if (name == null) {    throw new NullPointerException("attribute 'name' is required");  }  this.name=name;  this.type=type;}  }
class C{  public void close(){  stopTimers();  closed=true;  window.dispose();  if (listener != null) {    listener.notificationRemoved(this);  }  if (activityListener != null) {    ActivityTracker.removeActivityListener(activityListener);  }}  }
class C{  private static Runnable asUncheckedRunnable(Closeable c){  return null;}  }
class C{  public static String sort(String data,String separator){  if (separator == null)   throw new IllegalArgumentException("separator cannot be null");  List list=Arrays.asList(data.split(separator));  Collections.sort(list);  return list.toString();}  }
class C{  public CanReply decodeFromHardware(AbstractMRReply m){  log.error("decodeFromHardware unexpected");  return null;}  }
class C{  public ReflectPermission(String name,String actions){  super(name,actions);}  }
class C{  public void afterPhase(PhaseEvent event){  if (event.getPhaseId() == PhaseId.APPLY_REQUEST_VALUES || event.getPhaseId() == PhaseId.PROCESS_VALIDATIONS || event.getPhaseId() == PhaseId.INVOKE_APPLICATION) {    FacesContext facesContext=event.getFacesContext();    saveMessages(facesContext);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException("source == null");  }  this.source=source;}  }
class C{  public BatchParser(Environment env,InputStream in) throws IOException {  super(env,in);  imports=new Imports(env);  classes=new Vector();  toplevelEnv=imports.newEnvironment(env);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.gridBandPaint=SerialUtilities.readPaint(stream);  this.gridBandAlternatePaint=SerialUtilities.readPaint(stream);}  }
class C{  public static void writeConfigFile(OutputStream outputStream,Class<?>[] classes) throws SQLException, IOException {  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream),4096);  try {    for (    Class<?> clazz : classes) {      writeConfigForTable(writer,clazz);    }    System.out.println("Done.");  }  finally {    writer.close();  }}  }
class C{  public static void assertVocabulary(Analyzer a,InputStream voc,InputStream out) throws IOException {  BufferedReader vocReader=new BufferedReader(new InputStreamReader(voc,StandardCharsets.UTF_8));  BufferedReader outputReader=new BufferedReader(new InputStreamReader(out,StandardCharsets.UTF_8));  String inputWord=null;  while ((inputWord=vocReader.readLine()) != null) {    String expectedWord=outputReader.readLine();    Assert.assertNotNull(expectedWord);    BaseTokenStreamTestCase.checkOneTerm(a,inputWord,expectedWord);  }}  }
class C{  Divider(double x,double y,double length,boolean isVertical){  super(null,null);  this.type=ElementType.DIVIDER;  this.length=length;  r.x=x;  r.y=y;  r.width=isVertical ? dividerSize : length;  r.height=isVertical ? length : dividerSize;  this.isVertical=isVertical;  createComparators();}  }
class C{  public FlipFilter(){  this(FLIP_HV);}  }
class C{  public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return blobFileDescriptorForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  private void process(){  while (reader.getPointer() < reader.getTotalBitLen()) {    int flag=reader.getPositive(bitsPerFlag);    Point2D a4[]=new Point2D[4];    Color a2[]=new Color[2];    float[] cc=new float[colCompCount];switch (flag) {case 0:      for (int i=0; i < 12; i++) {        Point2D p=getPointCoords();        pp.add(p);      }    for (int i=0; i < 4; i++) {      for (int z=0; z < colCompCount; z++) {        cc[z]=reader.getFloat(bitsPerComponent);      }      Color color=calculateColor(cc);      pc.add(color);    }  break;case 1:a4[0]=pp.get(pp.size() - 9);a4[1]=pp.get(pp.size() - 8);a4[2]=pp.get(pp.size() - 7);a4[3]=pp.get(pp.size() - 6);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}a2[0]=pc.get(pc.size() - 3);a2[1]=pc.get(pc.size() - 2);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;case 2:a4[0]=pp.get(pp.size() - 6);a4[1]=pp.get(pp.size() - 5);a4[2]=pp.get(pp.size() - 4);a4[3]=pp.get(pp.size() - 3);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}a2[0]=pc.get(pc.size() - 2);a2[1]=pc.get(pc.size() - 1);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;case 3:a4[0]=pp.get(pp.size() - 3);a4[1]=pp.get(pp.size() - 2);a4[2]=pp.get(pp.size() - 1);a4[3]=pp.get(pp.size() - 12);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}a2[0]=pc.get(pc.size() - 1);a2[1]=pc.get(pc.size() - 4);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;}}}  }
class C{  protected boolean matchClassName(String className){  return false;}  }
class C{  public Nor(){  super("nor",2);}  }
class C{  public Builder connectionTimeoutMs(int connectionTimeoutMs){  this.connectionTimeoutMs=connectionTimeoutMs;  return this;}  }
class C{  public int compressEstim(byte[] src,int srcOff,final int srcLen){  if (srcLen < 10)   return srcLen;  int stride=LZ4_64K_LIMIT - 1;  int segments=(srcLen + stride - 1) / stride;  stride=srcLen / segments;  if (stride >= LZ4_64K_LIMIT - 1 || stride * segments > srcLen || segments < 1 || stride < 1)   throw new RuntimeException("?? " + srcLen);  int bytesIn=0;  int bytesOut=0;  int len=srcLen;  while (len > 0) {    if (len > stride)     len=stride;    bytesOut+=compress64k(src,srcOff,len);    srcOff+=len;    bytesIn+=len;    len=srcLen - bytesIn;  }  double ratio=bytesOut / (double)bytesIn;  return bytesIn == srcLen ? bytesOut : (int)(ratio * srcLen + 0.5);}  }
class C{  public void addTradeOrder(TradeOrder tradeOrder){  int index=0;  for (  TradeOrder currTradeOrder : this.tradeOrders) {    if (CoreUtils.nullSafeComparator(currTradeOrder.getIdTradeOrder(),tradeOrder.getIdTradeOrder()) == 0) {      index=this.tradeOrders.indexOf(currTradeOrder);      break;    }  }  if (index > 0)   this.tradeOrders.remove(index);  this.tradeOrders.add(tradeOrder);}  }
class C{  public static String removeCRLF(String in){  char[] inArray=in.toCharArray();  StringBuffer out=new StringBuffer(inArray.length);  for (int i=0; i < inArray.length; i++) {    char c=inArray[i];    if (c == '\n' || c == '\r')     ; else     out.append(c);  }  return out.toString();}  }
class C{  public ResultEntry(NondominatedPopulation population,Properties properties){  super();  this.population=population;  this.properties=properties;}  }
class C{  private void addEndpoints(){  int maxSegIndex=edge.size() - 1;  add(edge.getCoordinate(0),0);  add(edge.getCoordinate(maxSegIndex),maxSegIndex);}  }
class C{  public LinkedHashMapPro(){  super();  accessOrder=false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clear(){  SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.remove(PREFS_KEY_CONNECTION_CONFIGS);  editor.apply();}  }
class C{  public void add(Predicate p,int shape){  super.add(p,new Integer(shape));}  }
class C{  public static synchronized void addFromProperties(InputStream propsStream) throws Exception {  Properties expProps=new Properties();  expProps.load(propsStream);  propsStream.close();  propsStream=null;  addFromProperties(expProps);}  }
class C{  @Step("Asserting element {1} is not present after {2} seconds") public static void assertElementIsNotPresentAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementPresentAfter(by,timeoutInSeconds);    org.junit.Assert.fail(String.format("Element %s is present",by));  } catch (  TimeoutException e) {  }}  }
class C{  public void doGet(HttpServletRequest req,HttpServletResponse resp,XMLBuilder.Node current) throws IOException {  if (log.isInfoEnabled()) {    log.info(WITHOUT_JINI_MSG);  }}  }
class C{  public FontFamilyAction(String nm,String family){  super(nm);  this.family=family;}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  list.remove(ActionType.ATTACK.getRepresentation());  list.remove(ActionType.ADD_BUDDY.getRepresentation());  list.remove(ActionType.IGNORE.getRepresentation());  list.remove(ActionType.UNIGNORE.getRepresentation());  list.remove(ActionType.PUSH.getRepresentation());  list.remove(ActionType.TRADE.getRepresentation());  list.remove(ActionType.INVITE.getRepresentation());  if (Testing.MOVEMENT) {    if (this.getEntity().stopped()) {      list.add(ActionType.WALK_START.getRepresentation());    } else {      list.add(ActionType.WALK_STOP.getRepresentation());    }  }  list.add(ActionType.SET_OUTFIT.getRepresentation());  list.add(ActionType.WHERE.getRepresentation());  User user=entity;  if (user != null) {    if (user.hasSheep()) {      list.add(ActionType.LEAVE_SHEEP.getRepresentation());    }    if (user.hasPet()) {      list.add(ActionType.LEAVE_PET.getRepresentation());    }  }}  }
class C{  private static boolean canFindLand(final GameData data,final Unit unit,final Route route){  final Territory routeEnd=route.getEnd();  final int movementLeft=getMovementLeftForAirUnitNotMovedYet(unit,route);  return canFindLand(data,unit,routeEnd,movementLeft);}  }
class C{  public static void writeTo(RoutingExplanations explanations,StreamOutput out) throws IOException {  out.writeVInt(explanations.explanations.size());  for (  RerouteExplanation explanation : explanations.explanations) {    RerouteExplanation.writeTo(explanation,out);  }}  }
class C{  public void testReadLittleEndian() throws Exception {  assertReadLittleEndian32(bytes(0x78,0x56,0x34,0x12),0x12345678);  assertReadLittleEndian32(bytes(0xf0,0xde,0xbc,0x9a),0x9abcdef0);  assertReadLittleEndian64(bytes(0xf0,0xde,0xbc,0x9a,0x78,0x56,0x34,0x12),0x123456789abcdef0L);  assertReadLittleEndian64(bytes(0x78,0x56,0x34,0x12,0xf0,0xde,0xbc,0x9a),0x9abcdef012345678L);}  }
class C{  public void testGetAsString(){  Long expectedLong=timestampInTimeZone;  String expected="05/2010";  UIComponent component=ConverterTestHelper.getComponent(false,null,null,"discountDate");  String actual=converter.getAsString(context,component,expectedLong);  Assert.assertEquals(expected,actual);}  }
class C{  public SVGPath moveTo(double[] xy){  return moveTo(xy[0],xy[1]);}  }
class C{  public boolean existsConfig(String name,Long configId){  Set configs=this.getInstrOfferingConfigs();  for (Iterator i=configs.iterator(); i.hasNext(); ) {    InstrOfferingConfig config=(InstrOfferingConfig)i.next();    if (config.getName() != null && config.getName().equals(name.trim()) && !config.getUniqueId().equals(configId)) {      return true;    }  }  return false;}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    PhantomReference pr=new PhantomReference(bool,rq);    Thread.sleep(1000);    assertTrue("Initialization failed.",!pr.isEnqueued());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  assertTrue("should always pass",bool.booleanValue());  boolean exception=false;  try {    new PhantomReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  public double tds(final Double3D d1,final Double3D d2){  double dx=tdx(d1.x,d2.x);  double dy=tdy(d1.y,d2.y);  double dz=tdz(d1.z,d2.z);  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public void test_ticket_1007_string4() throws Exception {  new TestHelper("ticket-1007-string4","ticket-1007-string4.rq","ticket-1007-custom.trig","ticket-1007-string.srx",false).runTest();}  }
class C{  @Override public void initiaize(File file,int entryCount) throws CarbonSortKeyAndGroupByException {  try {    stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file),writeBufferSize));    stream.writeInt(entryCount);  } catch (  FileNotFoundException e1) {    throw new CarbonSortKeyAndGroupByException(e1);  }catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  }}  }
class C{  Bundle(Parcel parcelledData){  readFromParcel(parcelledData);}  }
class C{  public ArffTableModel(Instances data){  this();  this.m_Data=data;}  }
class C{  public static boolean hasAlpha(java.awt.Image image){  if (image instanceof BufferedImage) {    BufferedImage bimage=(BufferedImage)image;    return bimage.getColorModel().hasAlpha();  }  PixelGrabber pg=new PixelGrabber(image,0,0,1,1,false);  try {    pg.grabPixels();  } catch (  InterruptedException e) {  }  ColorModel cm=pg.getColorModel();  return cm.hasAlpha();}  }
class C{  public static boolean contains(Iterator iterator,Object element){  if (iterator != null) {    while (iterator.hasNext()) {      Object candidate=iterator.next();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  public static AsyncUpgradeSubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncUpgradeSubscriptionResponseE object=new AsyncUpgradeSubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncUpgradeSubscriptionResponse").equals(reader.getName())) {          object.setAsyncUpgradeSubscriptionResponse(org.oscm.xsd.AsyncUpgradeSubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean invalidUserName(final String name){  final int length=name.length();  if (length < MIN_USER_NAME_LENGTH || length > MAX_USER_NAME_LENGTH) {    return true;  }  char c;  for (int i=0; i < length; i++) {    c=name.charAt(i);    if (('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || '0' <= c && c <= '9') {      continue;    }    return true;  }  return false;}  }
class C{  public FactLine balanceSource(){  if (!m_acctSchema.isSuspenseBalancing() || m_doc.isMultiCurrency())   return null;  BigDecimal diff=getSourceBalance();  log.finer("Diff=" + diff);  FactLine line=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),0,m_trxName);  line.setDocumentInfo(m_doc,null);  line.setPostingType(m_postingType);  line.setAccount(m_acctSchema,m_acctSchema.getSuspenseBalancing_Acct());  if (diff.signum() < 0)   line.setAmtSource(m_doc.getC_Currency_ID(),diff.abs(),Env.ZERO); else   line.setAmtSource(m_doc.getC_Currency_ID(),Env.ZERO,diff);  line.convert();  log.fine(line.toString());  m_lines.add(line);  return line;}  }
class C{  public int toInt(int radix){  return TypeFormat.parseInt(this,radix);}  }
class C{  protected QuotaInfo doGetQuota(URI id){  return client.get(QuotaInfo.class,getQuotaUrl(),id);}  }
class C{  public void updateSelectionValueText(long[] sel,byte val){  updateSelectionText(sel);  updateValueText(val);}  }
class C{  public static int hashLongArray(int seed,long... longArray){  return hash(seed,longArray);}  }
class C{  private void registerReceiver(){  final IntentFilter filter=new IntentFilter();  filter.addAction(RadioBeacon.INTENT_SESSION_UPDATE);  filter.addAction(RadioBeacon.INTENT_WIFI_BLACKLISTED);  filter.addAction(RadioBeacon.INTENT_WIFI_FREE);  getActivity().registerReceiver(mReceiver,filter);  if (!EventBus.getDefault().isRegistered(this)) {    EventBus.getDefault().register(this);  } else {    Log.i(TAG,"Event bus receiver already registered");  }}  }
class C{  private static void sort(float[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        float ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        float a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      float last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    float t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    float t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    float t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    float t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    float pivot1=a[e2];    float pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      float ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        float ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    float pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      float ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public int size(){  return this.size;}  }
class C{  private boolean holdsAllLocks(final LockFutureTask<? extends Object> task){  if (!lock.isHeldByCurrentThread())   throw new IllegalMonitorStateException();  for (  R r : (R[])task.resource) {    final ResourceQueue<LockFutureTask<? extends Object>> resourceQueue=resourceQueues.get(r);    assert resourceQueue != null : "resource=" + r;    if (!resourceQueue.isGranted(task)) {      return false;    }  }  return true;}  }
class C{  public void testMergeInBothWithNodeMergeStrategyWithLeftValueOnly() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value1",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  @Override public void attachContext(Context context){  mContextRef=context == null ? null : new WeakReference<Context>(context);}  }
class C{  public Boolean isDhcpServerAvailable(){  return dhcpServerAvailable;}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public static void show(Activity activity,File directory,String filename){  CreateZipDialog dialog=new CreateZipDialog();  Bundle args=new Bundle();  args.putString("path",directory.getAbsolutePath());  args.putString("filename",filename);  dialog.setArguments(args);  dialog.show(activity.getFragmentManager(),"CreateZipDialog");}  }
class C{  public static boolean[] toBooleanArray(Integer[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  protected boolean scheduleNewTask(String taskId){  LOG.info(String.format("We are to schedule task: [%s]",taskId));  int containerIndex=TaskUtils.getContainerIndexForTaskId(taskId);  tasksId.put(containerIndex,taskId);  toScheduleTasks.add(taskId);  LOG.info(String.format("Added task: %s into the to-schedule-tasks queue: ",taskId));  return true;}  }
class C{  public static boolean nextPermutation(List<Integer> row){  int last=row.size() - 1;  for (int pos=last - 1; pos >= 0; pos--) {    if (row.get(pos) < row.get(pos + 1)) {      int smallIdx=pos;      int biggerIdx=pos + 1;      for (int i=pos + 1; i <= last; i++)       if (row.get(i) > row.get(pos))       biggerIdx=i;      swap(row,smallIdx,biggerIdx);      reverse(row,pos + 1,last);      return true;    }  }  return false;}  }
class C{  private void readOptionalParameters() throws UserError {  this.startModel=modelInput.getDataOrNull(Model.class);  if (this.startModel == null) {    log(getName() + ": No model found in input.");  }}  }
class C{  protected void doClose(int tabIndex){  if (tabCloseListener == null || tabCloseListener.tabAboutToBeClosed(tabIndex)) {    String title=tabPane.getTitleAt(tabIndex);    Component component=tabPane.getComponentAt(tabIndex);    tabPane.removeTabAt(tabIndex);    if (tabCloseListener != null) {      tabCloseListener.tabClosed(title,component);    }  }}  }
class C{  public MailAddress(InternetAddress address) throws AddressException {  this(address.getAddress());}  }
class C{  public Intent translateIntent(){  Intent result=new Intent();  result.setAction(this.getAction());  result.setType(this.getType());  result.setPackage(this.getPackage());  result.setData(this.getData());  result.setData(new Uri(this.getType()));  return result;}  }
class C{  public static final long timeFromIntentInMillis(Intent intent){  Uri data=intent.getData();  long millis=intent.getLongExtra(EXTRA_EVENT_BEGIN_TIME,-1);  if (millis == -1 && data != null && data.isHierarchical()) {    List<String> path=data.getPathSegments();    if (path.size() == 2 && path.get(0).equals("time")) {      try {        millis=Long.valueOf(data.getLastPathSegment());      } catch (      NumberFormatException e) {        Log.i("Calendar","timeFromIntentInMillis: Data existed but no valid time " + "found. Using current time.");      }    }  }  if (millis <= 0) {    millis=System.currentTimeMillis();  }  return millis;}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) public ACLAssignments updateAcls(@PathParam("id") URI id,ACLAssignmentChanges changes){  VirtualArray varray=getVirtualArrayById(id,true);  _permissionsHelper.updateACLs(varray,changes,new PermissionsHelper.UsageACLFilter(_permissionsHelper));  _dbClient.persistObject(varray);  auditOp(OperationTypeEnum.MODIFY_VARRAY_ACL,true,null,id.toString(),varray.getLabel());  return getAclsResponse(id);}  }
class C{  public AverageTrueRangeDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public boolean tryUnlockWrite(){  long s;  WNode h;  if (((s=state) & WBIT) != 0L) {    U.putLongVolatile(this,STATE,(s+=WBIT) == 0L ? ORIGIN : s);    if ((h=whead) != null && h.status != 0)     release(h);    return true;  }  return false;}  }
class C{  public static void createEmptyFile(File file,long length) throws IOException {  if (file == null || length <= 0) {    throw new IllegalArgumentException("File instance is null or length is not positive");  }  try (FileOutputStream fOut=new FileOutputStream(file);FileChannel fChannel=fOut.getChannel()){    fChannel.write(ByteBuffer.allocate(1),length - 1);  } }  }
class C{  public Service(String name,Service parentService){  this.name=name;  this.parentService=parentService;}  }
class C{  public DisposableObjectSet(){  super();}  }
class C{  public Attribute(final CharSequence name){  this.name=new MutableString(name);}  }
class C{  public Scanner createScanner() throws IOException {  return new Scanner(this,begin,end);}  }
class C{  public static void transformedComparison(){  transformedComparison++;}  }
class C{  private GridCell cellFromCoord(Coord c){  int row=(int)(c.getY() / cellSize) + 1;  int col=(int)(c.getX() / cellSize) + 1;  assert row > 0 && row <= rows && col > 0 && col <= cols : "Location " + c + " is out of world's bounds";  return this.cells[row][col];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public WriterToASCI(OutputStream os){  m_os=os;}  }
class C{  public void checkAndHandleFirstVisibleCellChange(){  if (mCurrentFirstVisibleItem != mPreviousFirstVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  public HeaderCard(String key,BigDecimal value,String comment) throws HeaderCardException {  this(key,dblString(value,spaceAvailableForValue(key)),comment,false,false);}  }
class C{  public List<SootMethod> mainsOfApplicationClasses(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator clIt=Scene.v().getApplicationClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=(SootClass)clIt.next();    if (cl.declaresMethod("void main(java.lang.String[])")) {      SootMethod m=cl.getMethod("void main(java.lang.String[])");      if (m.isConcrete())       ret.add(m);    }  }  return ret;}  }
class C{  public boolean isSpecializedInvoke(){  return (resolvedMember != null) && (resolvedMember.isSpecializedInvoke());}  }
class C{  private void findIntervals(JCas jcas){  ArrayList<Timex3Interval> newAnnotations=new ArrayList<Timex3Interval>();  FSIterator iterTimex3=jcas.getAnnotationIndex(Timex3.type).iterator();  while (iterTimex3.hasNext()) {    Timex3Interval annotation=new Timex3Interval(jcas);    Timex3 timex3=(Timex3)iterTimex3.next();    Pattern pDate=Pattern.compile("(?:BC)?(\\d\\d\\d\\d)(-(\\d+))?(-(\\d+))?(T(\\d+))?(:(\\d+))?(:(\\d+))?");    Pattern pCentury=Pattern.compile("(\\d\\d)");    Pattern pDecate=Pattern.compile("(\\d\\d\\d)");    Pattern pQuarter=Pattern.compile("(\\d+)-Q([1-4])");    Pattern pHalf=Pattern.compile("(\\d+)-H([1-2])");    Pattern pSeason=Pattern.compile("(\\d+)-(SP|SU|FA|WI)");    Pattern pWeek=Pattern.compile("(\\d+)-W(\\d+)");    Pattern pWeekend=Pattern.compile("(\\d+)-W(\\d+)-WE");    Pattern pTimeOfDay=Pattern.compile("(\\d+)-(\\d+)-(\\d+)T(AF|DT|MI|MO|EV|NI)");    Matcher mDate=pDate.matcher(timex3.getTimexValue());    Matcher mCentury=pCentury.matcher(timex3.getTimexValue());    Matcher mDecade=pDecate.matcher(timex3.getTimexValue());    Matcher mQuarter=pQuarter.matcher(timex3.getTimexValue());    Matcher mHalf=pHalf.matcher(timex3.getTimexValue());    Matcher mSeason=pSeason.matcher(timex3.getTimexValue());    Matcher mWeek=pWeek.matcher(timex3.getTimexValue());    Matcher mWeekend=pWeekend.matcher(timex3.getTimexValue());    Matcher mTimeOfDay=pTimeOfDay.matcher(timex3.getTimexValue());    boolean matchesDate=mDate.matches();    boolean matchesCentury=mCentury.matches();    boolean matchesDecade=mDecade.matches();    boolean matchesQuarter=mQuarter.matches();    boolean matchesHalf=mHalf.matches();    boolean matchesSeason=mSeason.matches();    boolean matchesWeek=mWeek.matches();    boolean matchesWeekend=mWeekend.matches();    boolean matchesTimeOfDay=mTimeOfDay.matches();    String beginYear, endYear;    String beginMonth, endMonth;    String beginDay, endDay;    String beginHour, endHour;    String beginMinute, endMinute;    String beginSecond, endSecond;    beginYear=endYear="UNDEF";    beginMonth="01";    endMonth="12";    beginDay="01";    endDay="31";    beginHour="00";    endHour="23";    beginMinute="00";    endMinute="59";    beginSecond="00";    endSecond="59";    if (matchesDate) {      beginYear=endYear=mDate.group(1);      if (mDate.group(3) != null) {        beginMonth=endMonth=mDate.group(3);        if (mDate.group(5) == null) {          Calendar c=Calendar.getInstance();          c.set(Integer.parseInt(beginYear),Integer.parseInt(beginMonth) - 1,1);          endDay="" + c.getActualMaximum(Calendar.DAY_OF_MONTH);          beginDay="01";        } else {          beginDay=endDay=mDate.group(5);          if (mDate.group(7) != null) {            beginHour=endHour=mDate.group(7);            if (mDate.group(9) != null) {              beginMinute=endMinute=mDate.group(9);              if (mDate.group(11) != null) {                beginSecond=endSecond=mDate.group(11);              }            }          }        }      }    } else     if (matchesCentury) {      beginYear=mCentury.group(1) + "00";      endYear=mCentury.group(1) + "99";    } else     if (matchesDecade) {      beginYear=mDecade.group(1) + "0";      endYear=mDecade.group(1) + "9";    } else     if (matchesQuarter) {      beginYear=endYear=mQuarter.group(1);      int beginMonthI=3 * (Integer.parseInt(mQuarter.group(2)) - 1) + 1;      beginMonth="" + beginMonthI;      endMonth="" + (beginMonthI + 2);      Calendar c=Calendar.getInstance();      c.set(Integer.parseInt(beginYear),Integer.parseInt(endMonth) - 1,1);      endDay="" + c.getActualMaximum(Calendar.DAY_OF_MONTH);    } else     if (matchesHalf) {      beginYear=endYear=mHalf.group(1);      int beginMonthI=6 * (Integer.parseInt(mHalf.group(2)) - 1) + 1;      beginMonth="" + beginMonthI;      endMonth="" + (beginMonthI + 5);      Calendar c=Calendar.getInstance();      c.set(Integer.parseInt(beginYear),Integer.parseInt(endMonth) - 1,1);      endDay="" + c.getActualMaximum(Calendar.DAY_OF_MONTH);    } else     if (matchesSeason) {      beginYear=mSeason.group(1);      endYear=beginYear;      if (mSeason.group(2).equals("SP")) {        beginMonth="03";        beginDay="21";        endMonth="06";        endDay="20";      } else       if (mSeason.group(2).equals("SU")) {        beginMonth="06";        beginDay="21";        endMonth="09";        endDay="22";      } else       if (mSeason.group(2).equals("FA")) {        beginMonth="09";        beginDay="23";        endMonth="12";        endDay="21";      } else       if (mSeason.group(2).equals("WI")) {        endYear="" + (Integer.parseInt(beginYear) + 1);        beginMonth="12";        beginDay="22";        endMonth="03";        endDay="20";      }    } else     if (matchesWeek) {      beginYear=endYear=mWeek.group(1);      Calendar c=Calendar.getInstance();      c.setFirstDayOfWeek(Calendar.MONDAY);      c.set(Calendar.YEAR,Integer.parseInt(beginYear));      c.set(Calendar.WEEK_OF_YEAR,Integer.parseInt(mWeek.group(2)));      c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);      beginDay="" + c.get(Calendar.DAY_OF_MONTH);      beginMonth="" + (c.get(Calendar.MONTH) + 1);      c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);      endDay="" + (c.get(Calendar.DAY_OF_MONTH));      endMonth="" + (c.get(Calendar.MONTH) + 1);    } else     if (matchesWeekend) {      beginYear=endYear=mWeekend.group(1);      Calendar c=Calendar.getInstance();      c.setFirstDayOfWeek(Calendar.MONDAY);      c.set(Calendar.YEAR,Integer.parseInt(beginYear));      c.set(Calendar.WEEK_OF_YEAR,Integer.parseInt(mWeekend.group(2)));      c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);      beginDay="" + c.get(Calendar.DAY_OF_MONTH);      beginMonth="" + (c.get(Calendar.MONTH) + 1);      c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);      endDay="" + (c.get(Calendar.DAY_OF_MONTH));      endMonth="" + (c.get(Calendar.MONTH) + 1);    } else     if (matchesTimeOfDay) {      beginYear=endYear=mTimeOfDay.group(1);      beginMonth=endMonth=mTimeOfDay.group(2);      beginDay=endDay=mTimeOfDay.group(3);    }    if (Integer.parseInt(beginDay) < 10) {      beginDay="0" + Integer.parseInt(beginDay);    }    if (Integer.parseInt(beginMonth) < 10) {      beginMonth="0" + Integer.parseInt(beginMonth);    }    if (Integer.parseInt(endDay) < 10) {      endDay="0" + Integer.parseInt(endDay);    }    if (Integer.parseInt(endMonth) < 10) {      endMonth="0" + Integer.parseInt(endMonth);    }    if (!beginYear.equals("UNDEF") && !endYear.equals("UNDEF")) {      annotation.setTimexValueEB(beginYear + "-" + beginMonth+ "-"+ beginDay+ "T"+ beginHour+ ":"+ beginMinute+ ":"+ beginSecond);      annotation.setTimexValueLE(endYear + "-" + endMonth+ "-"+ endDay+ "T"+ endHour+ ":"+ endMinute+ ":"+ endSecond);      annotation.setTimexValueLB(endYear + "-" + endMonth+ "-"+ endDay+ "T"+ endHour+ ":"+ endMinute+ ":"+ endSecond);      annotation.setTimexValueEE(beginYear + "-" + beginMonth+ "-"+ beginDay+ "T"+ beginHour+ ":"+ beginMinute+ ":"+ beginSecond);      annotation.setTimexFreq(timex3.getTimexFreq());      annotation.setTimexId(timex3.getTimexId());      annotation.setTimexInstance(timex3.getTimexInstance());      annotation.setTimexMod(timex3.getTimexMod());      annotation.setTimexQuant(timex3.getTimexMod());      annotation.setTimexType(timex3.getTimexType());      annotation.setTimexValue(timex3.getTimexValue());      annotation.setSentId(timex3.getSentId());      annotation.setBegin(timex3.getBegin());      annotation.setFoundByRule(timex3.getFoundByRule());      annotation.setEnd(timex3.getEnd());      annotation.setAllTokIds(timex3.getAllTokIds());      annotation.setFilename(timex3.getFilename());      annotation.setBeginTimex(timex3.getTimexId());      annotation.setEndTimex(timex3.getTimexId());      newAnnotations.add(annotation);    }  }  for (  Timex3Interval t3i : newAnnotations)   t3i.addToIndexes();}  }
class C{  public CThreadInformationTable(){  setModel(m_model);  setDefaultRenderer(Object.class,m_renderer);}  }
class C{  protected final void expire(){  long current=agentInstanceContext.getStatementContext().getSchedulingService().getTime();  long expireBeforeTimestamp=current - timeDeltaComputation.deltaMillisecondsSubtract(current) + 1;  ArrayDeque<EventBean> expired=timeWindow.expireEvents(expireBeforeTimestamp);  if (this.hasViews()) {    if ((expired != null) && (!expired.isEmpty())) {      EventBean[] oldEvents=expired.toArray(new EventBean[expired.size()]);      if (viewUpdatedCollection != null) {        viewUpdatedCollection.update(null,oldEvents);      }      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,timeWindowViewFactory.getViewName(),null,oldEvents);      }      updateChildren(null,oldEvents);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  scheduleExpiryCallback();}  }
class C{  public TIntIntHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public Principal(){  initialize();}  }
class C{  public Boolean isDiscoveryResolve(){  return discoveryResolve;}  }
class C{  public static void main(String[] args){  File settingsFile=args.length > 0 ? new File(args[0]) : DEFAULT_SETTINGS_FILE;  MonteCarloLocalizationApp app=new MonteCarloLocalizationApp(settingsFile);  app.constructBasicApplicationFrame();  app.notifyAllListeners();  app.show();}  }
class C{  public DefaultIntervalCategoryDataset(double[][] starts,double[][] ends){  this(DataUtilities.createNumberArray2D(starts),DataUtilities.createNumberArray2D(ends));}  }
class C{  private Point2D.Double moveDragPoint(Point2D.Double p,Rectangle2D.Double maxMoveBounds,double mouseX,double mouseY,double xOffset,double yOffset){  Point2D.Double nextPoint=new Point2D.Double(p.x,p.y);  nextPoint.x=Math.max(maxMoveBounds.x,Math.min(maxMoveBounds.getMaxX(),mouseX - xOffset));  nextPoint.y=Math.max(maxMoveBounds.y,Math.min(maxMoveBounds.getMaxY(),mouseY - yOffset));  return nextPoint;}  }
class C{  protected void exportContent(String tag){  final JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));  fc.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  int returnVal=fc.showSaveDialog(frame);  if (returnVal == JFileChooser.APPROVE_OPTION) {    try {      String recordFile=fc.getSelectedFile().getAbsolutePath();      XMLUtils.exportContent(system,recordFile,tag);      addComment(tag.substring(0,1).toUpperCase() + tag.substring(1) + " saved to "+ recordFile);    } catch (    RuntimeException j) {      log.warning("could not save parameter distribution: " + j);    }  }}  }
class C{  public Node(Object state){  this.state=state;  pathCost=0.0;}  }
class C{  public NucleusObjectMapper(Class<T> clazz) throws ObjectMappingException {  super(clazz);}  }
class C{  private static String listParameterNames(Class[] cachedClasses){  StringBuilder sb=new StringBuilder();  for (int i=0; i < cachedClasses.length; i++) {    if (i != 0)     sb.append(", ");    sb.append(cachedClasses[i].getName());  }  return sb.toString();}  }
class C{  public DeleteResourceChange(IPath resourcePath,boolean forceOutOfSync){  this(resourcePath,forceOutOfSync,false);}  }
class C{  public static void addCrystallization(Item input,ItemStack output1,ItemStack output2,float xp){  CrystallizerRecipes.instance().crystallize(input,output1,output2,xp);}  }
class C{  public int value(){  return ((Depth)get()).get();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.745 -0400",hash_original_method="61A67766390FCF947C6793F74C913E87",hash_generated_method="063251D2CD803D840AE1E23C5BC70368") public void putAudio(InputStream audio) throws IOException {  if (mPutAudioBuffer == null)   mPutAudioBuffer=new byte[512];  int nbytes=audio.read(mPutAudioBuffer);  if (nbytes == -1) {    SR_RecognizerPutAudio(mRecognizer,mPutAudioBuffer,0,0,true);  } else   if (nbytes != SR_RecognizerPutAudio(mRecognizer,mPutAudioBuffer,0,nbytes,false)) {    throw new IOException("SR_RecognizerPutAudio failed nbytes=" + nbytes);  }}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public static BytesRef toBytesRef(IntsRef input,BytesRefBuilder scratch){  scratch.grow(input.length);  for (int i=0; i < input.length; i++) {    int value=input.ints[i + input.offset];    assert value >= Byte.MIN_VALUE && value <= 255 : "value " + value + " doesn't fit into byte";    scratch.setByteAt(i,(byte)value);  }  scratch.setLength(input.length);  return scratch.get();}  }
class C{  public String toString(){  return getSqlName();}  }
class C{  public void highlight(Coords coords){  if ((coords == null) || game.getBoard().contains(coords)) {    setHighlighted(coords);    moveCursor(highlightSprite,coords);    moveCursor(firstLOSSprite,null);    moveCursor(secondLOSSprite,null);    processBoardViewEvent(new BoardViewEvent(this,coords,null,BoardViewEvent.BOARD_HEX_HIGHLIGHTED,0));  }}  }
class C{  String computePrefix(){  while (packageNameToPrefix.hasElement("ns" + ++nextPrefix)) {  }  return "ns" + nextPrefix;}  }
class C{  private static Object parsePage(AstVisitor v,String text,String title,long revision) throws LinkTargetException, CompilerException, FileNotFoundException, JAXBException {  return v.go(getCompiledPage(text,title,revision).getPage());}  }
class C{  public static Geofence createCircle(double latitude,double longitude,float radius){  return new Geofence(latitude,longitude,radius);}  }
class C{  final synchronized public SnmpValue duplicate(){  return (SnmpValue)clone();}  }
class C{  public byte[] randomBytes(int n){  byte[] buffer=new byte[n];  sodium().randombytes(buffer,n);  return buffer;}  }
class C{  public void checkLogged(TestHandler handler){  checkLogged(handler.lastMessage,handler.lastParams,handler.lastThrown);}  }
class C{  public String diff_text1(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public String queryWindowsRegistry(String key,String value,int registryBitMode) throws IOException {  Process p=null;  String result=null;  List<String> arguments=new ArrayList<String>(6);  arguments.add("reg.exe");  arguments.add("query");  arguments.add(key);  if (value == null || value.length() == 0) {    arguments.add("/ve");  } else {    arguments.add("/v");    arguments.add(value);  }  p=Runtime.getRuntime().exec(arguments.toArray(new String[arguments.size()]));  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));    String line;    while ((line=reader.readLine()) != null) {      if (line.equalsIgnoreCase(key)) {        line=reader.readLine();        if (line != null) {          Matcher matcher=registryValuePattern.matcher(line);          if (matcher.find()) {            result=matcher.group(1);          }        }        break;      }    }  } catch (  IOException e) {    if (Trace.error)     e.printStackTrace();  } finally {    if (p != null) {      p.destroy();      p=null;    }  }  return result;}  }
class C{  public static char[] toCharArray(String s){  if (!charArrayBugTested) {    charArrayBugTested=true;    if (s.toCharArray() == s.toCharArray()) {      charArrayBug=true;    }  }  if (charArrayBug) {    char[] c=new char[s.length()];    System.arraycopy(s.toCharArray(),0,c,0,c.length);    return c;  }  return s.toCharArray();}  }
class C{  public InlineHyperlink(final String text,final String token){  super(text,token);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int determineTotalMemberOffset(){  if (containsBaseTypeOnly()) {    return 0;  }  int offset=0;  for (  final TypeMember member : members) {    offset+=member.getBitOffset().get();  }  return offset;}  }
class C{  public void checkLoop(int index) throws TooManyResourcesException, IllegalArgumentException {  if (index < 0) {    throw new IllegalArgumentException("Loop index cannot be negative");  }  if (!activated)   return;  if (RuntimeSettings.maxNumberOfIterationsPerLoop < 0) {    return;  }  int size=counters.size();  if (index >= size) {    for (int i=0; i < 1 + (index - size); i++) {      counters.add(0l);    }  }  assert index < counters.size();  long value=counters.get(index) + 1l;  counters.set(index,value);  if (value >= RuntimeSettings.maxNumberOfIterationsPerLoop && !isInStaticInit()) {    this.reset();    throw new TooManyResourcesException("Loop has been executed more times than the allowed " + RuntimeSettings.maxNumberOfIterationsPerLoop);  }}  }
class C{  public void testChoiceMomentConstruction(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createStartChoiceMomentXml("start",0.5,"Example ChoiceMoment Description","choice_2");  xml+=createChoiceXml("fire","Example Choice Description 1","start",true,false,"test_icon");  xml+=createChoiceXml("choice_2","Example Choice Description 2","start",false,false,"test_icon");  xml+=createChoiceXml("choice_3","Example Choice Description 3","start",true,false,"test_icon");  xml+=createEndChoiceMomentXml();  xml+=createEndMissionXml();  Utils.logDebug(TAG,xml);  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Mission 1",mMissionData.getMissionId());  Assert.assertEquals(1,mMissionData.getNumMoments());  Assert.assertEquals(true,mMissionData.getMomentFromId("start") instanceof ChoiceMoment);  ChoiceMoment choiceMoment=((ChoiceMoment)mMissionData.getMomentFromId("start"));  Assert.assertEquals(3,choiceMoment.getMomentData().getNumChoices());  Choice choice1=choiceMoment.getMomentData().getChoiceById("choice_2");  Assert.assertEquals("Example Choice Description 2",choice1.getDescription());  Assert.assertEquals("start",choice1.getNextMomentId());  Assert.assertEquals(false,choice1.getOutcome().weaponChargeDepleted());  Assert.assertEquals(false,choice1.getOutcome().numEnemiesDefeatedIncremented());  Assert.assertEquals("test_icon",choice1.getDrawableResourceName());  Assert.assertEquals(null,mMissionData.getMomentFromId("start").getNextMomentId());}  }
class C{  public static String transformFilename(String fileName){  if (!fileName.endsWith(".fb")) {    fileName=fileName + ".fb";  }  return fileName;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override public boolean isUseFieldNames(){  return super.isUseFieldNames();}  }
class C{  public double eval(double params[]){  return ((Math.pow(Math.E,2.0 * params[0]) + 1) / (Math.pow(Math.E,2.0 * params[0]) - 1));}  }
class C{  public static int[] topoSortStates(Automaton a){  if (a.getNumStates() == 0) {    return new int[0];  }  int numStates=a.getNumStates();  int[] states=new int[numStates];  final BitSet visited=new BitSet(numStates);  int upto=topoSortStatesRecurse(a,visited,states,0,0);  if (upto < states.length) {    int[] newStates=new int[upto];    System.arraycopy(states,0,newStates,0,upto);    states=newStates;  }  for (int i=0; i < states.length / 2; i++) {    int s=states[i];    states[i]=states[states.length - 1 - i];    states[states.length - 1 - i]=s;  }  return states;}  }
class C{  public static void modgcd(int a[],int b[],int gcd[]){  if (isZero(a)) {    assign(gcd,a);    return;  }  if (isZero(b)) {    assign(gcd,b);    return;  }  a=copy(normalize(a,b.length));  b=copy(normalize(b,a.length));  int rc=compareTo(a,b);  if (rc == 0) {    assign(gcd,a);    return;  }  if (rc < 0) {    int t[]=b;    b=a;    a=t;  }  int quot[]=new int[a.length];  int remainder[]=new int[a.length];  while (!isZero(b)) {    int t[]=copy(b);    divide(a,b,quot,remainder);    assign(b,remainder);    assign(a,t);  }  assign(gcd,a);}  }
class C{  public SearchRequest source(byte[] source,int offset,int length){  return source(new BytesArray(source,offset,length));}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static int shortArrayToInt(final short[] src,final int srcPos,final int dstInit,final int dstPos,final int nShorts){  if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {    return dstInit;  }  if ((nShorts - 1) * 16 + dstPos >= 32) {    throw new IllegalArgumentException("(nShorts-1)*16+dstPos is greather or equal to than 32");  }  int out=dstInit;  int shift=0;  for (int i=0; i < nShorts; i++) {    shift=i * 16 + dstPos;    final int bits=(0xffff & src[i + srcPos]) << shift;    final int mask=0xffff << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  for (int i=0; i < nAttrs; i++) {    processAttribute(writer,m_attributes.getQName(i),m_attributes.getValue(i),m_elemContext.m_elementDesc);  }}  }
class C{  public Policy<S,A> policyIteration(MarkovDecisionProcess<S,A> mdp){  Map<S,Double> U=Util.create(mdp.states(),new Double(0));  Map<S,A> pi=initialPolicyVector(mdp);  boolean unchanged;  do {    U=policyEvaluation.evaluate(pi,U,mdp);    unchanged=true;    for (    S s : mdp.states()) {      double aMax=Double.NEGATIVE_INFINITY, piVal=0;      A aArgmax=pi.get(s);      for (      A a : mdp.actions(s)) {        double aSum=0;        for (        S sDelta : mdp.states()) {          aSum+=mdp.transitionProbability(sDelta,s,a) * U.get(sDelta);        }        if (aSum > aMax) {          aMax=aSum;          aArgmax=a;        }        if (a.equals(pi.get(s))) {          piVal=aSum;        }      }      if (aMax > piVal) {        pi.put(s,aArgmax);        unchanged=false;      }    }  } while (!unchanged);  return new LookupPolicy<S,A>(pi);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Diff> diffs=diff_main(text1,text2,true);  if (diffs.size() > 2) {    diff_cleanupSemantic(diffs);    diff_cleanupEfficiency(diffs);  }  return patch_make(text1,diffs);}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  protected void addInternal(double dist,int id){  if (size == dists.length) {    grow();  }  dists[size]=dist;  ids[size]=id;  ++size;}  }
class C{  public final boolean equals(Object o){  return this == o;}  }
class C{  public void addStepsToReplicateCIFSShareACLs(URI systemTarget,URI fsURI,String taskId){  s_logger.info("Generating steps for Replicating CIFS share ACLs to Target Cluster");  CifsShareACLUpdateParams params;  FileWorkflowCompleter completer=new FileWorkflowCompleter(fsURI,taskId);  FileShare targetFileShare=null;  Workflow workflow=null;  try {    FileShare sourceFileShare=s_dbClient.queryObject(FileShare.class,fsURI);    if (sourceFileShare.getPersonality().equals(PersonalityTypes.SOURCE.name())) {      List<String> targetfileUris=new ArrayList<String>();      targetfileUris.addAll(sourceFileShare.getMirrorfsTargets());      targetFileShare=s_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    } else {      targetFileShare=s_dbClient.queryObject(FileShare.class,sourceFileShare.getParentFileShare());    }    workflow=this._workflowService.getNewWorkflow(this,REPLICATE_CIFS_SHARE_ACLS_TO_TARGET_WF_NAME,false,taskId,completer);    SMBShareMap sourceSMBShareMap=sourceFileShare.getSMBFileShares();    if (sourceSMBShareMap != null) {      List<SMBFileShare> sourceSMBShares=new ArrayList<SMBFileShare>(sourceSMBShareMap.values());      for (      SMBFileShare sourceSMBShare : sourceSMBShares) {        List<ShareACL> sourceShareACLs=FileOrchestrationUtils.queryShareACLs(sourceSMBShare.getName(),sourceFileShare.getId(),s_dbClient);        List<ShareACL> targetShareACLs=FileOrchestrationUtils.queryShareACLs(sourceSMBShare.getName(),targetFileShare.getId(),s_dbClient);        if (!sourceShareACLs.isEmpty() && targetShareACLs.isEmpty()) {          params=new CifsShareACLUpdateParams();          ShareACLs shareACLs=new ShareACLs();          shareACLs.setShareACLs(sourceShareACLs);          params.setAclsToAdd(shareACLs);          updateCIFSShareACLOnTarget(workflow,systemTarget,targetFileShare,sourceSMBShare,params);        } else         if (!targetShareACLs.isEmpty() && sourceShareACLs.isEmpty()) {          params=new CifsShareACLUpdateParams();          ShareACLs shareACLs=new ShareACLs();          shareACLs.setShareACLs(targetShareACLs);          params.setAclsToDelete(shareACLs);          updateCIFSShareACLOnTarget(workflow,systemTarget,targetFileShare,sourceSMBShare,params);        } else         if (!targetShareACLs.isEmpty() && !sourceShareACLs.isEmpty()) {          List<ShareACL> shareACLsToAdd=new ArrayList<ShareACL>();          List<ShareACL> shareACLsToDelete=new ArrayList<ShareACL>();          List<ShareACL> shareACLsToModify=new ArrayList<ShareACL>();          HashMap<String,ShareACL> sourceShareACLMap=FileOrchestrationUtils.getShareACLMap(sourceShareACLs);          HashMap<String,ShareACL> targetShareACLMap=FileOrchestrationUtils.getShareACLMap(targetShareACLs);          for (          String sourceACLName : sourceShareACLMap.keySet()) {            if (targetShareACLMap.get(sourceACLName) == null) {              ShareACL shareACL=sourceShareACLMap.get(sourceACLName);              shareACL.setFileSystemId(targetFileShare.getId());              shareACLsToAdd.add(shareACL);            }          }          for (          String targetACLName : targetShareACLMap.keySet()) {            if (sourceShareACLMap.get(targetACLName) == null) {              shareACLsToDelete.add(targetShareACLMap.get(targetACLName));            }          }          targetShareACLs.removeAll(shareACLsToDelete);          sourceShareACLs.removeAll(shareACLsToAdd);          sourceShareACLMap=FileOrchestrationUtils.getShareACLMap(sourceShareACLs);          targetShareACLMap=FileOrchestrationUtils.getShareACLMap(targetShareACLs);          for (          String sourceACLName : sourceShareACLMap.keySet()) {            if (targetShareACLMap.get(sourceACLName) != null && !targetShareACLMap.get(sourceACLName).getPermission().equals(sourceShareACLMap.get(sourceACLName).getPermission())) {              ShareACL shareACL=targetShareACLMap.get(sourceACLName);              shareACL.setPermission(sourceShareACLMap.get(sourceACLName).getPermission());              shareACLsToModify.add(shareACL);            }          }          params=new CifsShareACLUpdateParams();          if (!shareACLsToAdd.isEmpty()) {            ShareACLs addShareACLs=new ShareACLs();            addShareACLs.setShareACLs(shareACLsToAdd);            params.setAclsToAdd(addShareACLs);          }          if (!shareACLsToDelete.isEmpty()) {            ShareACLs deleteShareACLs=new ShareACLs();            deleteShareACLs.setShareACLs(shareACLsToDelete);            params.setAclsToDelete(deleteShareACLs);          }          if (!shareACLsToModify.isEmpty()) {            ShareACLs modifyShareACLs=new ShareACLs();            modifyShareACLs.setShareACLs(shareACLsToModify);            params.setAclsToModify(modifyShareACLs);          }          if (params.retrieveAllACLs() != null && !params.retrieveAllACLs().isEmpty()) {            updateCIFSShareACLOnTarget(workflow,systemTarget,targetFileShare,sourceSMBShare,params);          }        }      }    }    String successMessage=String.format("Replicating source File System : %s, CIFS Shares ACLs to Target System finished successfully",sourceFileShare.getLabel());    workflow.executePlan(completer,successMessage);  } catch (  Exception ex) {    s_logger.error("Could not replicate source filesystem CIFS shares ACLs : " + fsURI,ex);    String opName=ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILOVER.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsURI.toString(),opName,ex);    completer.error(s_dbClient,this._locker,serviceError);  }}  }
class C{  public void endObject(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_OBJECT) {    stackSize--;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected END_OBJECT but was " + peek());  }}  }
class C{  static void withMessage(String message,Runnable r){  try {    r.run();  } catch (  ComparisonFailure cmp) {    ComparisonFailure ex=new ComparisonFailure(message + ": " + cmp.getMessage(),cmp.getExpected(),cmp.getActual());    ex.setStackTrace(cmp.getStackTrace());    throw ex;  }catch (  AssertionError err) {    AssertionError ex=new AssertionError(message + ": " + err.getMessage(),err.getCause());    ex.setStackTrace(err.getStackTrace());    throw ex;  }catch (  RuntimeException|Error err) {    throw new RuntimeException(message + ": " + err.getMessage(),err);  }}  }
class C{  @Override public void writeEndDocument() throws XMLStreamException {  log.log(Level.FINE,"writeEndDocument()");  while (current.getElement() != null) {    writeEndElement();  }  try {    WbXmlEncoder encoder=new WbXmlEncoder(stream,doc,encoderType);    encoder.encode();    encoded=true;  } catch (  IOException e) {    throw new XMLStreamException("Error encoding the WbXML document",e);  }}  }
class C{  void validateAndSetRolePricesForParam(long voPriceModelKey,PriceModel priceModel,VOPricedParameter voPP,PricedParameter pp,boolean priceModelCreatedInTransaction,Organization targetCustomer,Subscription subscription,boolean isTemplateExistsForCustomer) throws ValidationException, OperationNotPermittedException, ConcurrentModificationException {  Map<Long,List<PricedProductRole>> oldPricedOptionMap=new HashMap<Long,List<PricedProductRole>>();  if (isTemplateExistsForCustomer) {    oldPricedOptionMap=prepareOldPricedOptionMap(priceModel);  }  List<VOPricedOption> pricedOptions=voPP.getPricedOptions();  for (  VOPricedOption pricedOption : pricedOptions) {    validatePricedProductRoles(pricedOption.getRoleSpecificUserPrices(),priceModel.getProduct());    for (    PricedOption po : pp.getPricedOptionList()) {      if (po.getParameterOptionKey() == pricedOption.getParameterOptionKey()) {        if (isTemplateExistsForCustomer) {          setRoleSpecificPrices(voPriceModelKey,null,null,po,pricedOption.getRoleSpecificUserPrices(),priceModelCreatedInTransaction,targetCustomer,subscription,oldPricedOptionMap.get(Long.valueOf(po.getParameterOptionKey())));        } else {          setRoleSpecificPrices(voPriceModelKey,null,null,po,pricedOption.getRoleSpecificUserPrices(),priceModelCreatedInTransaction,targetCustomer,subscription,null);        }      }    }  }  validatePricedProductRoles(voPP.getRoleSpecificUserPrices(),priceModel.getProduct());  setRoleSpecificPrices(voPriceModelKey,null,pp,null,voPP.getRoleSpecificUserPrices(),priceModelCreatedInTransaction,targetCustomer,subscription,null);}  }
class C{  public boolean visitUnaryOperation(ExpressionOwner owner,UnaryOperation op){  return true;}  }
class C{  private void copyTables(){  prefixTable=(Hashtable)prefixTable.clone();  uriTable=(Hashtable)uriTable.clone();  if (elementNameTable != null)   elementNameTable=new Hashtable();  if (attributeNameTable != null)   attributeNameTable=new Hashtable();  tablesDirty=true;}  }
class C{  public ChannelNameSorter(boolean ascending){  super(ascending);}  }
class C{  public void addMatchedStoragePools(final Set<String> matchedPools){  if (null != _matchedStoragePools) {    _matchedStoragePools.replace(matchedPools);  } else {    if (null != matchedPools && !matchedPools.isEmpty()) {      setMatchedStoragePools(new StringSet());      _matchedStoragePools.addAll(matchedPools);    }  }}  }
class C{  public RangeCondition docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  public AWTTerminal(TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalScrollController scrollController){  this(null,deviceConfiguration,fontConfiguration,colorConfiguration,scrollController);}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public int count(){  return datasources.size();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (definedTypingStrategy: ");  result.append(definedTypingStrategy);  result.append(')');  return result.toString();}  }
class C{  public synchronized boolean append(final byte[] data){  if (data == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " (append) null data");    }    return true;  }  FileOutputStream fout=null;  OutputStream out=null;  try {    fout=new FileOutputStream(file,true);    out=new BufferedOutputStream(fout,data.length);    out.write(data);    out.flush();  } catch (  final Exception ex) {    return false;  } finally {    if (fout != null) {      try {        fout.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(TAG + " Error: " + e.toString());        }      }    }    if (out != null) {      try {        out.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(TAG + " Error: " + e.toString());        }      }    }  }  return true;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public boolean is_non_term(){  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void changeTickFontSize(int delta){  Font f=getTickLabelFont();  String fName=f.getFontName();  Font newFont=new Font(fName,f.getStyle(),(f.getSize() + delta));  setTickLabelFont(newFont);}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void animateFromZerotoCurrentValue(Integer duration){  setDuration(duration);  animateText(0,getEndValue());}  }
class C{  protected void disconnect() throws RuntimeFaultFaultMsg {  service.logout(content.getSessionManager());}  }
class C{  protected void loadValue(String sValue){  value=sValue.trim().toCharArray();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.454 -0500",hash_original_method="2D52A8A1F4F510CECBAF7D127E816999",hash_generated_method="26F2E23187C893BF0787312C4C13EB3C") public int nextStep(RouteInfo plan,RouteInfo fact){  if (plan == null) {    throw new IllegalArgumentException("Planned route may not be null.");  }  int step=UNREACHABLE;  if ((fact == null) || (fact.getHopCount() < 1))   step=firstStep(plan); else   if (plan.getHopCount() > 1)   step=proxiedStep(plan,fact); else   step=directStep(plan,fact);  return step;}  }
class C{  public LocaleComparator(){}  }
class C{  public void remove(Node nde){  if (nde == null)   return;  if (nde == head) {    if (head.getNext() == head)     head=null; else     head=head.getNext();  }  nde.unlink();  size--;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenewchilddiffdocument.class,args);}  }
class C{  public Element store(Object o){  LinkingLabel p=(LinkingLabel)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("linkinglabel");  storeCommonAttributes(p,element);  if (p.isText()) {    if (p.getUnRotatedText() != null) {      element.setAttribute("text",p.getUnRotatedText());    }    storeTextInfo(p,element);  }  if (p.isIcon() && p.getIcon() != null) {    element.setAttribute("icon","yes");    element.addContent(storeIcon("icon",(NamedIcon)p.getIcon()));  }  element.addContent(new Element("url").addContent(p.getUrl()));  element.setAttribute("class","jmri.jmrit.display.configurexml.LinkingLabelXml");  return element;}  }
class C{  @Override public Object load(int operatorId,long windowId){  Object obj=null;  try {    obj=retrieve(generateKey(operatorId,windowId));    logger.debug("retrieved object from store  key {} region {} ",generateKey(operatorId,windowId),applicationId);  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  return obj;}  }
class C{  public void drawHTML(String text,double x,double y,TextRendererCache renderers){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (renderers == null) {    String msg=Logging.getMessage("nullValue.TextRendererCacheIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  DrawState ds=new DrawState(renderers,this.textRenderer.getFont(),null,this.textColor);  drawTextHTML(text,x,y,ds);}  }
class C{  public DESKeySpec(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("Wrong key size");  }  this.key=new byte[DES_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DES_KEY_LEN);}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  private int readSourceToLog(Settings settings){  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,"1000");  try {    return Integer.parseInt(sourceToLog,10);  } catch (  NumberFormatException e) {    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;  }}  }
class C{  void createPressed(ActionEvent e){  _showReminder=true;  String uName=_addUserName.getText().trim();  if (uName.length() == 0) {    uName=null;  }  String sName=_systemName.getText().trim();  if (_autoSystemName.isSelected()) {    if (!checkLogixUserName(uName)) {      return;    }    _curLogix=_logixManager.createNewLogix(uName);  } else {    if (!checkLogixSysName()) {      return;    }    Logix x=null;    try {      x=_logixManager.getBySystemName(sName);    } catch (    Exception ex) {      handleCreateException(sName);      return;    }    if (x != null) {      javax.swing.JOptionPane.showMessageDialog(addLogixFrame,rbx.getString("Error1"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);      return;    }    if (!checkLogixUserName(uName)) {      return;    }    _curLogix=_logixManager.createNewLogix(sName,uName);    if (_curLogix == null) {      log.error("Failure to create Logix with System Name: " + sName);      return;    }  }  numConditionals=0;  cancelAddPressed(null);  makeEditLogixWindow();  prefMgr.setSimplePreferenceState(systemNameAuto,_autoSystemName.isSelected());}  }
class C{  public static void validateOutputSchemaIsSubsetOfInputSchema(Schema inputSchema,Schema outputSchema){  for (  Schema.Field field : outputSchema.getFields()) {    if (inputSchema.getField(field.getName()) == null) {      throw new IllegalArgumentException(String.format("Field '%s' is present in output schema but not present in input schema",field.getName()));    } else     if (!inputSchema.getField(field.getName()).getSchema().equals(field.getSchema())) {      throw new IllegalArgumentException(String.format("Field type mismatch, field '%s' type in input schema is %s, " + "while in output schema its of type %s",field.getName(),inputSchema.getField(field.getName()).getSchema(),field.getSchema()));    }  }}  }
class C{  public Short read(String value){  return Short.valueOf(value);}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuffer();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuffer();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  private static void parseDrivesInformation(final Node registersNode,final List<RemoteDrive> drives){  final NodeList nodes=registersNode.getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("Drive".equals(nodeName)) {      drives.add(new RemoteDrive(node.getAttributes().getNamedItem("name").getNodeValue()));    }  }}  }
class C{  public static String tagHash(final String tagName){  return ASCII.String(Word.word2hash(tagName.toLowerCase()));}  }
class C{  private boolean isInvokeBasic(Name name){  if (name.function == null)   return false;  if (name.arguments.length < 1)   return false;  MemberName member=name.function.member();  return memberRefersTo(member,MethodHandle.class,"invokeBasic") && !member.isPublic() && !member.isStatic();}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public void actionPerformed(ActionEvent evt){}  }
class C{  public DateTime toDateTimeToday(DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  long instantMillis=DateTimeUtils.currentTimeMillis();  long resolved=chrono.set(this,instantMillis);  return new DateTime(resolved,chrono);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public boolean isStayAlive(){  return stayAlive;}  }
class C{  public boolean containsValue(double val){  byte[] states=_states;  double[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private void handleHtmlDoUserBackup(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String pageTitle=servletText.pageTitleUserBackup();  final String csrft=requestAndResponse.getParameter("csrft");  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,pageTitle,false).setPaneId("backup");  if (isTheCsrftWrong(requestAndResponse,csrft)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorRequiresSignIn(false));    pageWrapper.addFooter();  } else   if (!isUserSignedIn(requestAndResponse)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));    pageWrapper.addFooter();  } else   if (isUsersAccountClosed(requestAndResponse)) {    pageWrapper.addHeader();    requestAndResponse.print(servletText.errorAccountIsClosed());    pageWrapper.addFooter();  } else {    requestAndResponse.setResponseContentTypeJson();    final StringBuilder result=new StringBuilder();    try {      final String userId=getEffectiveUserId(requestAndResponse);      final User user=dbLogic.getUserById(userId);      if (user != null) {        requestAndResponse.response.setHeader("Content-Disposition","attachment; filename=crushpaper-backup-" + user.getUserName() + "-"+ formatDateTimeForFileName(System.currentTimeMillis())+ ".json");        dbLogic.backupJsonForUser(user,result);      }      dbLogic.commit();    } catch (    final PersistenceException e) {    }    requestAndResponse.print(result.toString());  }}  }
class C{  public static String defaultUserImage(){  return "images/user-thumb.jpg";}  }
class C{  public static long[] toLongArray(Byte[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  private String createTransactionDescription(Transaction transaction){  String toReturn="";  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  if (perWalletModelData == null) {    return toReturn;  }  Wallet wallet=this.bitcoinController.getModel().getActiveWallet();  List<TransactionOutput> transactionOutputs=transaction.getOutputs();  BigInteger credit=transaction.getValueSentToMe(wallet);  BigInteger debit=null;  try {    debit=transaction.getValueSentFromMe(wallet);  } catch (  ScriptException e1) {    e1.printStackTrace();  }  TransactionOutput myOutput=null;  TransactionOutput theirOutput=null;  if (transactionOutputs != null) {    for (    TransactionOutput transactionOutput : transactionOutputs) {      if (transactionOutput != null && transactionOutput.isMine(perWalletModelData.getWallet())) {        myOutput=transactionOutput;      }      if (transactionOutput != null && !transactionOutput.isMine(perWalletModelData.getWallet())) {        theirOutput=transactionOutput;      }    }  }  if (credit != null && credit.compareTo(BigInteger.ZERO) > 0) {    try {      String addressString="";      if (this.bitcoinController.getMultiBitService() != null && myOutput != null) {        Address toAddress=new Address(this.bitcoinController.getModel().getNetworkParameters(),myOutput.getScriptPubKey().getPubKeyHash());        addressString=toAddress.toString();      }      String label=null;      if (perWalletModelData.getWalletInfo() != null) {        label=perWalletModelData.getWalletInfo().lookupLabelForReceivingAddress(addressString);      }      if (label != null && !label.equals("")) {        toReturn=controller.getLocaliser().getString("multiBitModel.creditDescriptionWithLabel",new Object[]{addressString,label});      } else {        toReturn=controller.getLocaliser().getString("multiBitModel.creditDescription",new Object[]{addressString});      }    } catch (    ScriptException e) {      log.error(e.getMessage(),e);    }  }  if (debit != null && debit.compareTo(BigInteger.ZERO) > 0) {    try {      if (theirOutput != null) {        String addressString=theirOutput.getScriptPubKey().getToAddress(wallet.getNetworkParameters()).toString();        String label=null;        if (perWalletModelData.getWalletInfo() != null) {          label=perWalletModelData.getWalletInfo().lookupLabelForSendingAddress(addressString);        }        if (label != null && !label.equals("")) {          toReturn=controller.getLocaliser().getString("multiBitModel.debitDescriptionWithLabel",new Object[]{addressString,label});        } else {          toReturn=controller.getLocaliser().getString("multiBitModel.debitDescription",new Object[]{addressString});        }      }    } catch (    ScriptException e) {      log.error(e.getMessage(),e);    }  }  return toReturn;}  }
class C{  public void doWindowClose(){}  }
class C{  @Override public String toString(){  String result="Runs from: " + m_RunLower + " to: "+ m_RunUpper+ '\n';  result+="Datasets:";  for (int i=0; i < m_Datasets.size(); i++) {    result+=" " + m_Datasets.elementAt(i);  }  result+='\n';  result+="Custom property iterator: " + (m_UsePropertyIterator ? "on" : "off") + "\n";  if (m_UsePropertyIterator) {    if (m_PropertyPath == null) {      throw new Error("*** null propertyPath ***");    }    if (m_PropertyArray == null) {      throw new Error("*** null propertyArray ***");    }    if (m_PropertyPath.length > 1) {      result+="Custom property path:\n";      for (int i=0; i < m_PropertyPath.length - 1; i++) {        PropertyNode pn=m_PropertyPath[i];        result+="" + (i + 1) + "  "+ pn.parentClass.getName()+ "::"+ pn.toString()+ ' '+ pn.value.toString()+ '\n';      }    }    result+="Custom property name:" + m_PropertyPath[m_PropertyPath.length - 1].toString() + '\n';    result+="Custom property values:\n";    for (int i=0; i < Array.getLength(m_PropertyArray); i++) {      Object current=Array.get(m_PropertyArray,i);      result+=" " + (i + 1) + " "+ current.getClass().getName()+ " "+ current.toString()+ '\n';    }  }  result+="ResultProducer: " + m_ResultProducer + '\n';  result+="ResultListener: " + m_ResultListener + '\n';  if (!getNotes().equals("")) {    result+="Notes: " + getNotes();  }  return result;}  }
class C{  public CapabilitiesRequest(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.958 -0400",hash_original_method="39BD0BE636DBD4121253CD6DED7A982C",hash_generated_method="38E65DCA80F99797FB8222FC438693DD") @Override public boolean accept(File file){  return file.isDirectory();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.746 -0500",hash_original_method="4585CF8720D3AF6A9C9A961267CD63E3",hash_generated_method="6EEB78248D64DADEC516E022EE391724") public RowBuilder newRow(){  rowCount++;  int endIndex=rowCount * columnCount;  ensureCapacity(endIndex);  int start=endIndex - columnCount;  return new RowBuilder(start,endIndex);}  }
class C{  public void run(){  lazyInitialize();  while (true) {    try {      Request req=requestQueue.dequeue();      try {        req.execute();      } catch (      Throwable t) {      }    } catch (    InterruptedException e) {    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  java.io.File f=getFile(stack);  MediaFile mf=Wizard.getInstance().addMediaFile(f,name,MediaFile.ACQUISITION_MANUAL);  return mf;}  }
class C{  public QName(String localName){  this(localName,false);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isReadOnly() && isInsertRecord())   setIsInsertRecord(false);  if (isSortTab()) {    if (getAD_ColumnSortOrder_ID() == 0) {      throw new FillMandatoryException("AD_ColumnSortOrder_ID");    }  }  return true;}  }
class C{  public T caseImmutable_(Immutable_ object){  return null;}  }
class C{  public static Validator<CharSequence> regex(@NonNull final CharSequence errorMessage,@NonNull final Pattern regex){  return new RegexValidator(errorMessage,regex);}  }
class C{  public TcpDiscoveryVmIpFinder(){}  }
class C{  public Map<String,Object> selectAgreement(String agreementId){  Map<String,Object> result=null;  GenericValue agreement=null;  if ((this.delegator == null) || (this.dispatcher == null) || (this.cart == null)) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderDispatcherOrDelegatorOrCartArgumentIsNull",this.cart.getLocale()));    return result;  }  if ((agreementId == null) || (agreementId.length() <= 0)) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderNoAgreementSpecified",this.cart.getLocale()));    return result;  }  try {    agreement=EntityQuery.use(this.delegator).from("Agreement").where("agreementId",agreementId).cache(true).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreement",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());    return result;  }  if (agreement == null) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreement",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()));  } else {    cart.setAgreementId(agreementId);    try {      List<GenericValue> agreementItems=agreement.getRelated("AgreementItem",UtilMisc.toMap("agreementItemTypeId","AGREEMENT_PRICING_PR"),null,false);      if (agreementItems.size() > 0) {        GenericValue agreementItem=agreementItems.get(0);        String currencyUomId=(String)agreementItem.get("currencyUomId");        if (UtilValidate.isNotEmpty(currencyUomId)) {          try {            cart.setCurrency(dispatcher,currencyUomId);          } catch (          CartItemModifyException ex) {            result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderSetCurrencyError",this.cart.getLocale()) + ex.getMessage());            return result;          }        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreementItemsThrough",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());      return result;    }    try {      cart.removeOrderTerms();      List<GenericValue> agreementTerms=EntityUtil.filterByDate(agreement.getRelated("AgreementTerm",null,null,false));      if (agreementTerms.size() > 0) {        for (int i=0; agreementTerms.size() > i; i++) {          GenericValue agreementTerm=agreementTerms.get(i);          String termTypeId=(String)agreementTerm.get("termTypeId");          BigDecimal termValue=agreementTerm.getBigDecimal("termValue");          Long termDays=(Long)agreementTerm.get("termDays");          String textValue=agreementTerm.getString("textValue");          cart.addOrderTerm(termTypeId,termValue,termDays,textValue);        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreementTermsThrough",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());      return result;    }  }  return result;}  }
class C{  public static String format(String format,Object... args){  return format(Locale.getDefault(),format,args);}  }
class C{  public boolean contains(final MoveStepType type){  for (final Enumeration<MoveStep> i=getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    if (step.getType() == type) {      return true;    }  }  return false;}  }
class C{  public static Location fromDegrees(double latitudeDegrees,double longitudeDegrees){  Location loc=new Location();  loc.latitude=latitudeDegrees;  loc.longitude=longitudeDegrees;  return loc;}  }
class C{  public boolean usesLocalFilePerTable() throws SQLException {  return false;}  }
class C{  public int sizeInBytes(){  return this.attributeBytes;}  }
class C{  public FireworkEffectBuilder withColor(Iterable<Color> colors) throws IllegalArgumentException {  Validate.notNull(colors,"Colors can't be null");  for (  Color color : colors) {    this.colors.add(color);  }  return this;}  }
class C{  public static void ISTORE(int i){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ISTORE(i);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableLengthValue o=(AnimatableLengthValue)other;  float v1=target.svgToUserSpace(lengthValue,lengthType,percentageInterpretation);  float v2=target.svgToUserSpace(o.lengthValue,o.lengthType,o.percentageInterpretation);  return Math.abs(v1 - v2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.614 -0500",hash_original_method="D694401380EAF5A76DF87137C67448EA",hash_generated_method="EB427EC91A987E882813E4C55FB0CDE1") private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public static int[] reallocateBuffer(int[] oldBuffer,int oldCapacity,int newCapacity){  assert (newCapacity > oldCapacity);  int[] newBuffer=new int[newCapacity];  if (oldBuffer != null) {    System.arraycopy(oldBuffer,0,newBuffer,0,oldCapacity);  }  return newBuffer;}  }
class C{  public void startElement(Attributes atts) throws Exception {}  }
class C{  public boolean isBold(){  return bold;}  }
class C{  void previousImpl(){  boolean shouldRestart=(getCurrentTrackPositionImpl() > 4000 || (!mRepeatMode && mCurrentTrack == 0)) && mCurrentTrackLoaded;  if (shouldRestart) {    mNativeSink.setPaused(true);    mShouldFlushBuffers=true;    seekImpl(0);  } else {    boolean retry=true;    while (retry) {      mCurrentTrack--;      if (mCurrentTrack < 0) {        if (mRepeatMode) {          mCurrentTrack=mPlaybackQueue.size() - 1;        } else {          mCurrentTrack=0;        }      }      if (mCurrentTrack < 0 || mCurrentTrack >= mPlaybackQueue.size()) {        retry=true;        continue;      }      Song songToPlay=mPlaybackQueue.get(mCurrentTrack);      retry=songToPlay == null || (songToPlay.isLoaded() && !songToPlay.isAvailable());    }    mNativeSink.setPaused(true);    mShouldFlushBuffers=true;    requestStartPlayback();  }}  }
class C{  public void update(){  fitnessEvaluator.evaluate(this);}  }
class C{  @Override public Uri insert(Uri uri,ContentValues values){  String table;  Uri resultUri;switch (sUriMatcher.match(uri)) {case WEATHER_VALUES_ITEMS:    table=WEATHER_VALUES_TABLE_NAME;  resultUri=WeatherValuesEntry.WEATHER_VALUES_CONTENT_URI;break;case WEATHER_CONDITIONS_ITEMS:table=WEATHER_CONDITIONS_TABLE_NAME;resultUri=WeatherConditionsEntry.WEATHER_CONDITIONS_CONTENT_URI;break;default :throw new IllegalArgumentException("Unknown URI " + uri);}final long insertRow=mDatabaseHelper.getWritableDatabase().insert(table,null,values);if (insertRow > 0) {Uri newUri=ContentUris.withAppendedId(resultUri,insertRow);getContext().getContentResolver().notifyChange(newUri,null);getContext().getContentResolver().notifyChange(WeatherContract.ACCESS_ALL_DATA_FOR_LOCATION_URI,null);return newUri;} else throw new SQLException("Fail to add a new record into " + uri);}  }
class C{  public void add(K key){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,1);    return;  }  value++;  refSet.put(key,value);  countPoints++;}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  boolean workerStarted=false;  boolean workerAdded=false;  Worker w=null;  try {    w=new Worker(firstTask);    final Thread t=w.thread;    if (t != null) {      final ReentrantLock mainLock=this.mainLock;      mainLock.lock();      try {        int rs=runStateOf(ctl.get());        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {          if (t.isAlive())           throw new IllegalThreadStateException();          workers.add(w);          int s=workers.size();          if (s > largestPoolSize)           largestPoolSize=s;          workerAdded=true;        }      }  finally {        mainLock.unlock();      }      if (workerAdded) {        t.start();        workerStarted=true;      }    }  }  finally {    if (!workerStarted)     addWorkerFailed(w);  }  return workerStarted;}  }
class C{  @Override public Instance generateExample() throws Exception {  throw new Exception("Cannot generate examples one-by-one!");}  }
class C{  boolean compareAndSet(long startTime,int retries,Stat stat,String path,V expect,V update) throws Exception {  V currentValue=getData(stat,path);  if (currentValue == expect || currentValue.equals(expect)) {    try {      curator.setData().withVersion(stat.getVersion()).forPath(path,asByte(update));    } catch (    KeeperException.BadVersionException|KeeperException.NoNodeException e) {      if (!retryPolicy.allowRetry(retries,Instant.now().toEpochMilli() - startTime,RetryLoop.getDefaultRetrySleeper())) {        throw new VertxException("failed to acquire optimistic lock");      }    }    return true;  } else {    return false;  }}  }
class C{  public String toString(){switch (type) {case EOF:    return "<eof>";case EOL:  return "<eol>";case WHITESPACE:return "<whitespace>";case IDENTIFIER:return "<identifier: " + value + ">";case QUOTED_STRING:return "<quoted_string: " + value + ">";case COMMENT:return "<comment: " + value + ">";default :return "<unknown>";}}  }
class C{  static public int year(){  time.setToNow();  return time.year;}  }
class C{  public void onShuffleMessage(int reducerNum,long ts){  this.reducerNum=reducerNum;  if (firstShuffleMsg == null)   firstShuffleMsg=ts;  lastShuffleMsg=ts;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isEnforceJoinOrder(){  return enforceJoinOrder;}  }
class C{  public byte[] uniqueID(){  return uint8_4FromData(8);}  }
class C{  public void addUserComment(String customComment){  if (CommonUtils.isBlank(customComment)) {    return;  }  if (hasComment()) {    comment.append("\n\n");  }  if (preserveFormatting) {    comment.append(String.format("%s\n",customComment));  } else {    comment.append(String.format("```\n%s\n```\n\n",customComment));  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  AbstractButton b=(AbstractButton)context.getComponent();  g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));  g.setFont(style.getFont(context));  context.getStyle().getGraphicsUtils(context).paintText(context,g,b.getText(),getIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex(),getTextShiftOffset(context));}  }
class C{  private void needNewBuffer(final int newcount){  if (this.currentBufferIndex < this.buffers.size() - 1) {    this.filledBufferSum+=this.currentBuffer.length;    this.currentBufferIndex++;    this.currentBuffer=this.buffers.get(this.currentBufferIndex);  } else {    int newBufferSize;    if (this.currentBuffer == null) {      newBufferSize=newcount;      this.filledBufferSum=0;    } else {      newBufferSize=Math.max(this.currentBuffer.length << 1,newcount - this.filledBufferSum);      this.filledBufferSum+=this.currentBuffer.length;    }    this.currentBufferIndex++;    this.currentBuffer=new byte[newBufferSize];    this.buffers.add(this.currentBuffer);  }}  }
class C{  public static byte[] reverseDwordBytes(byte[] bytes,int trimLength){  checkArgument(bytes.length % 4 == 0);  checkArgument(trimLength < 0 || trimLength % 4 == 0);  byte[] rev=new byte[trimLength >= 0 && bytes.length > trimLength ? trimLength : bytes.length];  for (int i=0; i < rev.length; i+=4) {    System.arraycopy(bytes,i,rev,i,4);    for (int j=0; j < 4; j++) {      rev[i + j]=bytes[i + 3 - j];    }  }  return rev;}  }
class C{  public static IPath canonicalizedPath(IPath externalPath){  if (externalPath == null)   return null;  if (IS_CASE_SENSITIVE) {    return externalPath;  }  IWorkspace workspace=ResourcesPlugin.getWorkspace();  if (workspace == null)   return externalPath;  if (workspace.getRoot().findMember(externalPath) != null) {    return externalPath;  }  IPath canonicalPath=null;  try {    canonicalPath=new Path(new File(externalPath.toOSString()).getCanonicalPath());  } catch (  IOException e) {    return externalPath;  }  IPath result;  int canonicalLength=canonicalPath.segmentCount();  if (canonicalLength == 0) {    return externalPath;  } else   if (externalPath.isAbsolute()) {    result=canonicalPath;  } else {    int externalLength=externalPath.segmentCount();    if (canonicalLength >= externalLength) {      result=canonicalPath.removeFirstSegments(canonicalLength - externalLength);    } else {      return externalPath;    }  }  if (externalPath.getDevice() == null) {    result=result.setDevice(null);  }  if (externalPath.hasTrailingSeparator()) {    result=result.addTrailingSeparator();  }  return result;}  }
class C{  @Override public void onBatchComplete(){  int batchId=mBatchId;  mBatchId++;  SystraceMessage.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,"onBatchCompleteUI").arg("BatchId",batchId).flush();  try {    dispatchViewUpdates(batchId);  }  finally {    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  String nullVersion=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("XML",nullVersion);  assertTrue("hasXMLnull",state);}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  public LinkedList<Diff> diff_fromDelta(String text1,String delta) throws IllegalArgumentException {  LinkedList<Diff> diffs=new LinkedList<Diff>();  int pointer=0;  String[] tokens=delta.split("\t");  for (  String token : tokens) {    if (token.length() == 0) {      continue;    }    String param=token.substring(1);switch (token.charAt(0)) {case '+':      param=param.replace("+","%2B");    try {      param=URLDecoder.decode(param,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new Error("This system does not support UTF-8.",e);    }catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Illegal escape in diff_fromDelta: " + param,e);    }  diffs.add(new Diff(Operation.INSERT,param));break;case '-':case '=':int n;try {n=Integer.parseInt(param);} catch (NumberFormatException e) {throw new IllegalArgumentException("Invalid number in diff_fromDelta: " + param,e);}if (n < 0) {throw new IllegalArgumentException("Negative number in diff_fromDelta: " + param);}String text;try {text=text1.substring(pointer,pointer+=n);} catch (StringIndexOutOfBoundsException e) {throw new IllegalArgumentException("Delta length (" + pointer + ") larger than source text length ("+ text1.length()+ ").",e);}if (token.charAt(0) == '=') {diffs.add(new Diff(Operation.EQUAL,text));} else {diffs.add(new Diff(Operation.DELETE,text));}break;default :throw new IllegalArgumentException("Invalid diff operation in diff_fromDelta: " + token.charAt(0));}}if (pointer != text1.length()) {throw new IllegalArgumentException("Delta length (" + pointer + ") smaller than source text length ("+ text1.length()+ ").");}return diffs;}  }
class C{  private static void encode(List<AclEntry> acl,long address){  long offset=address;  for (  AclEntry ace : acl) {    int flags=0;    UserPrincipal who=ace.principal();    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;    int uid;    if (user.isSpecial()) {      uid=-1;      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER; else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP); else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE; else       throw new AssertionError("Unable to map special identifier");    } else {      if (user instanceof UnixUserPrincipals.Group) {        uid=user.gid();        flags|=ACE_IDENTIFIER_GROUP;      } else {        uid=user.uid();      }    }    int type;switch (ace.type()) {case ALLOW:      type=ACE_ACCESS_ALLOWED_ACE_TYPE;    break;case DENY:  type=ACE_ACCESS_DENIED_ACE_TYPE;break;case AUDIT:type=ACE_SYSTEM_AUDIT_ACE_TYPE;break;case ALARM:type=ACE_SYSTEM_ALARM_ACE_TYPE;break;default :throw new AssertionError("Unable to map ACE type");}Set<AclEntryPermission> aceMask=ace.permissions();int mask=0;if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;Set<AclEntryFlag> aceFlags=ace.flags();if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;unsafe.putInt(offset + OFFSETOF_UID,uid);unsafe.putInt(offset + OFFSETOF_MASK,mask);unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);offset+=SIZEOF_ACE_T;}}  }
class C{  public boolean isDrawBg(){  return drawBg;}  }
class C{  private boolean contains(ISourceContainer[] containers,ISourceContainer target){  String name=target.getName();  String type=target.getType().getId();  for (  ISourceContainer container : containers) {    if (name.equals(container.getName()) && type.equals(container.getType().getId())) {      return true;    }  }  return false;}  }
class C{  final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  public T caseComplexAttribute_(ComplexAttribute_ object){  return null;}  }
class C{  private void putProviderInfo(){  super.put("Provider.id name",(name != null) ? name : "null");  super.put("Provider.id version",versionString);  super.put("Provider.id info",(info != null) ? info : "null");  super.put("Provider.id className",this.getClass().getName());}  }
class C{  public String CVParametersTipText(){  return "Sets the scheme parameters which are to be set " + "by cross-validation.\n" + "The format for each string should be:\n"+ "param_char lower_bound upper_bound number_of_steps\n"+ "eg to search a parameter -P from 1 to 10 by increments of 1:\n"+ "    \"P 1 10 10\" ";}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int arrayLength=s.readInt();  Object[] a=elementData=(E[])new Object[arrayLength];  for (int i=0; i < size; i++)   a[i]=s.readObject();}  }
class C{  public HtmlNode addNode(HtmlNode n){  addBodyNode(n);  return n;}  }
class C{  public void dispatchGatheredElement(String elemName) throws Exception {  SaxHandlerBase.ElementType dispelem=(SaxHandlerBase.ElementType)elementTypes.get(elemName);  if (dispelem == null) {    return;  }  boolean found=false;  for (Iterator it=gatherBuffer.iterator(); it.hasNext(); ) {    Object[] elem=(Object[])it.next();    SaxHandlerBase.ElementType type=(SaxHandlerBase.ElementType)elem[0];    if (type == null) {      continue;    }    if (type == dispelem) {      found=true;    }    if (found) {      it.remove();      if (elem[1] == null) {        type.endElement();        if (type == dispelem) {          return;        }      } else       if (elem[1] instanceof String) {        String charstring=(String)elem[1];        char[] chars=charstring.toCharArray();        type.characters(chars,0,chars.length);      } else {        Attributes atts=(Attributes)elem[1];        type.startElement(atts);      }    }  }}  }
class C{  public static void composeThroughMask(Raster src,WritableRaster dst,Raster sel){  int x=src.getMinX();  int y=src.getMinY();  int w=src.getWidth();  int h=src.getHeight();  int srcRGB[]=null;  int selRGB[]=null;  int dstRGB[]=null;  for (int i=0; i < h; i++) {    srcRGB=src.getPixels(x,y,w,1,srcRGB);    selRGB=sel.getPixels(x,y,w,1,selRGB);    dstRGB=dst.getPixels(x,y,w,1,dstRGB);    int k=x;    for (int j=0; j < w; j++) {      int sr=srcRGB[k];      int dir=dstRGB[k];      int sg=srcRGB[k + 1];      int dig=dstRGB[k + 1];      int sb=srcRGB[k + 2];      int dib=dstRGB[k + 2];      int sa=srcRGB[k + 3];      int dia=dstRGB[k + 3];      float a=selRGB[k + 3] / 255f;      float ac=1 - a;      dstRGB[k]=(int)(a * sr + ac * dir);      dstRGB[k + 1]=(int)(a * sg + ac * dig);      dstRGB[k + 2]=(int)(a * sb + ac * dib);      dstRGB[k + 3]=(int)(a * sa + ac * dia);      k+=4;    }    dst.setPixels(x,y,w,1,dstRGB);    y++;  }}  }
class C{  private void commitTyped(InputConnection inputConnection){  if (mComposing.length() > 0) {    inputConnection.commitText(mComposing,mComposing.length());    mComposing.setLength(0);    updateCandidates();  }}  }
class C{  private static void unlink(final ITreeNode<CTag> parent,final ITreeNode<CTag> child){  child.setParent(null);  parent.removeChild(child);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  DownloadState downloadState(){  return downloadState;}  }
class C{  public static DeterministicKey deserializeB58(String base58,NetworkParameters params){  return deserializeB58(null,base58,params);}  }
class C{  public char previous(){  return reorderedACI.previous();}  }
class C{  public void addStorable(String name,DOMStorable prototype){  nameToPrototypeMap.put(name,prototype);  classToNameMap.put(prototype.getClass(),name);}  }
class C{  private void cmd_loadFile(){  Media media=null;  try {    media=Fileupload.get();  } catch (  InterruptedException e) {    e.printStackTrace();  }  if (media == null)   return;  if (media.isBinary()) {    m_file_istream=media.getStreamData();  } else {    ListItem listitem=fCharset.getSelectedItem();    if (listitem == null) {      m_file_istream=new ReaderInputStream(media.getReaderData());    } else {      Charset charset=(Charset)listitem.getValue();      m_file_istream=new ReaderInputStream(media.getReaderData(),charset.name());    }  }  log.config(media.getName());  bFile.setLabel(media.getName());  cmd_reloadFile();}  }
class C{  public final void removeAllHelperTextIds(@NonNull final Collection<Integer> resourceIds){  ensureNotNull(resourceIds,"The collection may not be null");  for (  int resourceId : resourceIds) {    removeHelperTextId(resourceId);  }}  }
class C{  public void test_read_writeInt() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeInt(Integer.MIN_VALUE);  raf.writeInt('T');  raf.writeInt(Integer.MAX_VALUE);  raf.writeInt(Integer.MIN_VALUE - 1);  raf.writeInt(Integer.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Integer.MIN_VALUE,raf.readInt());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readInt());  assertEquals("Test 3: Incorrect value written or read;",Integer.MAX_VALUE,raf.readInt());  assertEquals("Test 4: Incorrect value written or read;",0x7fffffff,raf.readInt());  assertEquals("Test 5: Incorrect value written or read;",0x80000000,raf.readInt());  try {    raf.readInt();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeInt('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readInt();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  private void addSerialPortOptions(Device device) throws InvalidOvfException {  String serialPortName=getVmwSerialPortName(device);  if (SerialPortType.NETWORK.getOvfName().equals(device.getDeviceSubType())) {    esxCloudVmx.configuration.put(serialPortName + ".fileType",SerialPortType.NETWORK.getVmwName());    addConfigOptions(serialPortName + ".",networkPortConfigMap,device.getConfig());  } else {    esxCloudVmx.parameters.add(new EsxCloudVmx.Property(serialPortName + ".fileType"));  }  esxCloudVmx.parameters.add(new EsxCloudVmx.Property(serialPortName + ".fileName"));  esxCloudVmx.parameters.add(new EsxCloudVmx.Property(serialPortName + ".vspc"));}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NuSuchProviderException must be thrown (algorithm: " + validValues[i] + " provider: "+ invalidValues[j]+ ")");      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public static void removeFromCache(char variant,String url,ConfigData configData){  CacheStructure cache=configData.cache;  HashMap<String,RsrcIfc> rsrcs=cache.rsrcs;  String key=toKey(CacheUtils.NON_PAGE_VARIANT,url);  RsrcIfc prev=rsrcs.get(key);  if (prev == null) {    key=toKey(variant,url);    prev=rsrcs.get(toKey(variant,url));  }  if (prev instanceof Rsrc)   cache.rsrcsList.remove((Rsrc)prev);  rsrcs.remove(key);}  }
class C{  public Plan processPlan(Plan plan){  Plan newPlan=PopulationUtils.createPlan();  List<String> affectedFacilities=CTUtilities.getAffectedFacilities();  List<Activity> partialPlan=new ArrayList<>();  List<Activity> relocatedActivities=new ArrayList<>();  boolean allowAsMajor=false;  for (  PlanElement pe : plan.getPlanElements()) {    if (pe instanceof Activity) {      Activity act=(Activity)pe;      Id<ActivityFacility> fId=act.getFacilityId();      if (fId != null) {        if (!affectedFacilities.contains(fId.toString())) {          partialPlan.add(act);        } else {          relocatedActivities.add(act);          if (act.getType().equalsIgnoreCase("major")) {            allowAsMajor=true;          }        }      } else {        partialPlan.add(act);      }    }  }  List<Activity> bestInsertionList=findBestInsertion(partialPlan,allowAsMajor);  bestInsertionList.get(0).setMaximumDuration(Time.UNDEFINED_TIME);  double currentEnd=bestInsertionList.get(0).getEndTime();  if (currentEnd == Time.UNDEFINED_TIME) {    bestInsertionList.get(0).setEndTime(Time.parseTime("00:06:00"));  }  bestInsertionList.get(bestInsertionList.size() - 1).setEndTime(Time.UNDEFINED_TIME);  bestInsertionList.get(bestInsertionList.size() - 1).setMaximumDuration(Time.UNDEFINED_TIME);  for (int i=1; i < bestInsertionList.size() - 1; i++) {    bestInsertionList.get(i).setEndTime(Time.UNDEFINED_TIME);    double d=bestInsertionList.get(i).getMaximumDuration();    if (d == Time.UNDEFINED_TIME) {      bestInsertionList.get(i).setMaximumDuration(Time.parseTime("00:20:00"));    }  }  Leg commercialLeg=PopulationUtils.createLeg("commercial");  for (int i=0; i < bestInsertionList.size() - 1; i++) {    newPlan.addActivity(bestInsertionList.get(i));    newPlan.addLeg(commercialLeg);  }  newPlan.addActivity(bestInsertionList.get(bestInsertionList.size() - 1));  return newPlan;}  }
class C{  public MethodNode addSyntheticMethod(String name,int modifiers,ClassNode returnType,Parameter[] parameters,ClassNode[] exceptions,Statement code){  MethodNode answer=addMethod(name,modifiers | ACC_SYNTHETIC,returnType,parameters,exceptions,code);  answer.setSynthetic(true);  return answer;}  }
class C{  protected double computeLRD(KNNQuery<O> knnq,DBIDIter curr){  final KNNList neighbors=knnq.getKNNForDBID(curr,k);  double sum=0.0;  int count=0;  for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {    if (DBIDUtil.equal(curr,neighbor)) {      continue;    }    KNNList neighborsNeighbors=knnq.getKNNForDBID(neighbor,k);    sum+=MathUtil.max(neighbor.doubleValue(),neighborsNeighbors.getKNNDistance());    count++;  }  return (sum > 0) ? (count / sum) : Double.POSITIVE_INFINITY;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int calcZoomLevel(Canvas canvas){  final TileLayerServer s=getOpenStreetMapTilesOverlay().getRendererInfo();  if (!s.isMetadataLoaded())   return 0;  final double latBottom=getViewBox().getBottom() / 1E7;  final double lonRight=getViewBox().getRight() / 1E7;  final double latTop=getViewBox().getTop() / 1E7;  final double lonLeft=getViewBox().getLeft() / 1E7;  final double xTileRight=(lonRight + 180d) / 360d;  final double xTileLeft=(lonLeft + 180d) / 360d;  final double yTileBottom=(1d - Math.log(Math.tan(Math.toRadians(latBottom)) + 1d / Math.cos(Math.toRadians(latBottom))) / Math.PI) / 2d;  final double yTileTop=(1d - Math.log(Math.tan(Math.toRadians(latTop)) + 1d / Math.cos(Math.toRadians(latTop))) / Math.PI) / 2d;  final double xTiles=(canvas.getWidth() / (xTileRight - xTileLeft)) / s.getTileWidth();  final double yTiles=(canvas.getHeight() / (yTileBottom - yTileTop)) / s.getTileHeight();  final double xZoom=Math.log(xTiles) / Math.log(2d);  final double yZoom=Math.log(yTiles) / Math.log(2d);  int zoom=(int)Math.floor(Math.max(0,Math.min(xZoom,yZoom)));  zoom=Math.min(zoom,s.getMaxZoomLevel());  return zoom;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.SHIFT_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.SHIFT_EXPRESSION__OP:setOp((ShiftOperator)newValue);return;case N4JSPackage.SHIFT_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static <T extends Annotation>List<T> selectOverlapping(JCas aJCas,final Class<T> aType,int aBegin,int aEnd){  List<T> annotations=new ArrayList<T>();  for (  T t : select(aJCas,aType)) {    if (t.getBegin() >= aEnd) {      break;    }    if (t.getEnd() <= aBegin) {      continue;    }    annotations.add(t);  }  return annotations;}  }
class C{  public WriteBuffer limit(int newLimit){  ensureCapacity(newLimit - buff.position()).limit(newLimit);  return this;}  }
class C{  private boolean fileNameMatches(String name){  boolean result=true;  if (regExPattern != null)   result=regExPattern.matcher(name).matches();  if (result && notregExPattern != null)   result=!notregExPattern.matcher(name).matches();  String log="attachment " + name + " ";  if (!result)   log+="does not match"; else   log+="matches";  log(log);  return result;}  }
class C{  private short internalAt(int row,int col){  return table[row * numCols + col];}  }
class C{  public void readFontSizePreference(Preference pref){  try {    mCurConfig.updateFrom(ActivityManagerNative.getDefault().getConfiguration());  } catch (  RemoteException e) {    Log.w(TAG,"Unable to retrieve font size");  }  final Resources res=getResources();  String fontDesc=FontDialogPreference.getFontSizeDescription(res,mCurConfig.fontScale);  pref.setSummary(getString(R.string.summary_font_size,fontDesc));}  }
class C{  public LazyObjectMap(final ObjectProvider<? extends Value> provider,final int initialCapacity,final float loadFactor){  super(initialCapacity,loadFactor);  this.provider=provider;}  }
class C{  @Override public Object[] toArray(){  final ArrayList<Object> out=new ArrayList<Object>();  final Iterator<IGPO> gpos=iterator();  while (gpos.hasNext()) {    out.add(gpos.next());  }  return out.toArray();}  }
class C{  public static final Object argmax(HashMap<?,Integer> map){  Object max_k=null;  double max_v=0.0;  for (  Object k : map.keySet()) {    if (map.get(k) >= max_v) {      max_k=k;      max_v=map.get(k);    }  }  return max_k;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.409 -0500",hash_original_method="2419D541CC42366E5221E182D9DD7A15",hash_generated_method="9094E7BC61424659BA6780257EF54BA1") static public void assertEquals(String message,char expected,char actual){  assertEquals(message,new Character(expected),new Character(actual));}  }
class C{  private void hideCCPopUp(){  try {    if (cc_popup != null) {      cc_popup.dismiss();    }    if (ccFragment != null && ccFragment.isVisible()) {      ccFragment.dismiss();    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final PathMod mod){  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.LOWER_BOUND,mod == PathMod.ONE_OR_MORE ? 1L : 0L),new NV(Annotations.UPPER_BOUND,mod == PathMod.ZERO_OR_ONE ? 1L : Long.MAX_VALUE)));  final Set<VarNode> dropVars=new LinkedHashSet<>();  dropVars.add(tVarLeft);  dropVars.add(tVarRight);  setProperty(Annotations.DROP_VARS,dropVars);}  }
class C{  @Override protected void showCallbackNonExistentError(String error){  Activity activity=getActivity().get();  Tab tab=activity != null ? ((ChromeActivity)activity).getActivityTab() : null;  if (tab != null) {    String message=(error);    MessageInfoBar infobar=new MessageInfoBar(message);    infobar.setExpireOnNavigation(false);    tab.getInfoBarContainer().addInfoBar(infobar);  } else {    super.showCallbackNonExistentError(error);  }}  }
class C{  public static List<Object> retrievePropertyValues(Entity e,String[] propertyTypes,Class<?>[] classes){  return retrievePropertyValues(e,propertyTypes,classes,false);}  }
class C{  public IdsQueryBuilder addIds(Collection<String> ids){  values.addAll(ids);  return this;}  }
class C{  public static Integer valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseInt(string,radix));}  }
class C{  public String retainStringValsTipText(){  return "If true then the values of string attributes are " + "retained in memory when reading incrementally. Leave this " + "set to false when using incremental classifiers in the "+ "Knowledge Flow.";}  }
class C{  public SpoutInstance(PhysicalPlanHelper helper,Communicator<HeronTuples.HeronTupleSet> streamInQueue,Communicator<HeronTuples.HeronTupleSet> streamOutQueue,SlaveLooper looper){  this.helper=helper;  this.looper=looper;  this.streamInQueue=streamInQueue;  this.spoutMetrics=new SpoutMetrics();  this.spoutMetrics.initMultiCountMetrics(helper);  this.config=helper.getTopologyContext().getTopologyConfig();  this.systemConfig=(SystemConfig)SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);  this.ackEnabled=Boolean.parseBoolean((String)config.get(Config.TOPOLOGY_ENABLE_ACKING));  this.enableMessageTimeouts=Boolean.parseBoolean((String)config.get(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS));  LOG.info("Enable Ack: " + this.ackEnabled);  LOG.info("EnableMessageTimeouts: " + this.enableMessageTimeouts);  if (helper.getMySpout() == null) {    throw new RuntimeException("HeronSpoutInstance has no spout in physical plan");  }  if (helper.getMySpout().getComp().hasSerializedObject()) {    this.spout=(ISpout)Utils.deserialize(helper.getMySpout().getComp().getSerializedObject().toByteArray());  } else   if (helper.getMySpout().getComp().hasClassName()) {    String spoutClassName=helper.getMySpout().getComp().getClassName();    try {      spout=(ISpout)Class.forName(spoutClassName).newInstance();    } catch (    ClassNotFoundException ex) {      throw new RuntimeException(ex + " Spout class must be in class path.");    }catch (    InstantiationException ex) {      throw new RuntimeException(ex + " Spout class must be concrete.");    }catch (    IllegalAccessException ex) {      throw new RuntimeException(ex + " Spout class must have a no-arg constructor.");    }  } else {    throw new RuntimeException("Neither java_object nor java_class_name set for spout");  }  IPluggableSerializer serializer=SerializeDeSerializeHelper.getSerializer(config);  collector=new SpoutOutputCollectorImpl(serializer,helper,streamOutQueue,spoutMetrics);}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(LocalDateTime)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public int delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  int min=pq[d];  exch(0,--n);  sink(0);  qp[min + d]=-1;  keys[pq[n + d] + d]=null;  pq[n + d]=-1;  return min;}  }
class C{  public BasicHeaderIterator(Header[] headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header array must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);}  }
class C{  @SuppressWarnings("unchecked") protected void notifyReply(SimpleNode r,AbstractMRListener dest){  Vector<AbstractMRListener> v;synchronized (this) {    v=(Vector<AbstractMRListener>)cmdListeners.clone();  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    AbstractMRListener client=v.elementAt(i);    if (log.isDebugEnabled()) {      log.debug("notify client: " + client);    }    try {      if (dest != client) {        forwardReply(client,r);      }    } catch (    Exception ex) {      log.warn("notify: During reply dispatch to " + client + "\nException "+ ex);      ex.printStackTrace();    }    if (dest != null) {      forwardReply(dest,r);    }  }}  }
class C{  public static boolean isEmpty(Resource res){  return isEmptyDirectory(res,null) || isEmptyFile(res);}  }
class C{  @Override protected final JsonToken parseNumberText(int ch) throws IOException, JsonParseException {  boolean negative=(ch == INT_MINUS);  int ptr=_inputPtr;  int startPtr=ptr - 1;  final int inputLen=_inputEnd;  dummy_loop:   do {    if (negative) {      if (ptr >= _inputEnd) {        break dummy_loop;      }      ch=_inputBuffer[ptr++];      if (ch > INT_9 || ch < INT_0) {        reportUnexpectedNumberChar(ch,"expected digit (0-9) to follow minus sign, for valid numeric value");      }    }    int intLen=1;    int_loop:     while (true) {      if (ptr >= _inputEnd) {        break dummy_loop;      }      ch=(int)_inputBuffer[ptr++];      if (ch < INT_0 || ch > INT_9) {        break int_loop;      }      if (++intLen == 2) {        if (_inputBuffer[ptr - 2] == '0') {          reportInvalidNumber("Leading zeroes not allowed");        }      }    }    int fractLen=0;    if (ch == INT_DECIMAL_POINT) {      fract_loop:       while (true) {        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];        if (ch < INT_0 || ch > INT_9) {          break fract_loop;        }        ++fractLen;      }      if (fractLen == 0) {        reportUnexpectedNumberChar(ch,"Decimal point not followed by a digit");      }    }    int expLen=0;    if (ch == INT_e || ch == INT_E) {      if (ptr >= inputLen) {        break dummy_loop;      }      ch=(int)_inputBuffer[ptr++];      if (ch == INT_MINUS || ch == INT_PLUS) {        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];      }      while (ch <= INT_9 && ch >= INT_0) {        ++expLen;        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];      }      if (expLen == 0) {        reportUnexpectedNumberChar(ch,"Exponent indicator not followed by a digit");      }    }    --ptr;    _inputPtr=ptr;    int len=ptr - startPtr;    _textBuffer.resetWithShared(_inputBuffer,startPtr,len);    return reset(negative,intLen,fractLen,expLen);  } while (false);  _inputPtr=negative ? (startPtr + 1) : startPtr;  return parseNumberText2(negative);}  }
class C{  private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){  long startFix=System.currentTimeMillis();  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);  if (result.fixed) {    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);  } else {    fallbackToString(widthMeasureSpec,heightMeasureSpec);  }  long fixDuration=System.currentTimeMillis() - startFix;  Logger.d(TAG,"fixSpannedWithSpaces() duration in ms: " + fixDuration);}  }
class C{  public static BandPassBuilder bandPassBuilder(){  return new BandPassBuilder();}  }
class C{  public static Map<String,Integer> createIdxFromKey(String line,String seperator){  String[] keys=line.split(seperator);  Map<String,Integer> idxFromKey=new ConcurrentHashMap<String,Integer>();  for (int i=0; i < keys.length; i++) {    idxFromKey.put(keys[i],i);  }  return idxFromKey;}  }
class C{  public ProtocolVersion(String protocol,int major,int minor){  if (protocol == null) {    throw new IllegalArgumentException("Protocol name must not be null.");  }  if (major < 0) {    throw new IllegalArgumentException("Protocol major version number must not be negative.");  }  if (minor < 0) {    throw new IllegalArgumentException("Protocol minor version number may not be negative");  }  this.protocol=protocol;  this.major=major;  this.minor=minor;}  }
class C{  private void updateRange(double x,double y){  mMinX=Math.min(mMinX,x);  mMaxX=Math.max(mMaxX,x);  mMinY=Math.min(mMinY,y);  mMaxY=Math.max(mMaxY,y);}  }
class C{  public EPDataFlowInstantiationOptions parameterProvider(EPDataFlowOperatorParameterProvider parameterProvider){  this.parameterProvider=parameterProvider;  return this;}  }
class C{  private Pair<Float,Float> calculateStartEndAngles(Point pointTo,float radius,int left,int top,int right,int bottom){  Rect circleRect=new Rect((pointTo.x - (int)radius),(pointTo.y - (int)radius),(pointTo.x + (int)radius),(pointTo.y + (int)radius));  Rect screenRect=new Rect(left,top,right,bottom);  List<Quadrant> quadrants=findContainingQuadrants(circleRect,screenRect);  float minAngle=Float.MAX_VALUE, maxAngle=Float.MIN_VALUE;  if (quadrants.contains(Quadrant.IV) && quadrants.contains(Quadrant.I) && quadrants.size() == 2) {    minAngle=(float)(-Math.PI / 2);    maxAngle=(float)(Math.PI / 2);  } else {    if (quadrants.size() < 4) {      for (      Quadrant quadrant : quadrants) {        double angle2=(quadrant.getStartAngle());        minAngle=(float)Math.min(minAngle,angle2);        double angle4=(quadrant.getEndAngle());        maxAngle=(float)Math.max(maxAngle,angle4);      }    } else {      minAngle=(float)Math.PI;      maxAngle=(float)(Math.PI * 2);    }  }  return new Pair<>(minAngle,maxAngle);}  }
class C{  public final int size(){  return statements.size();}  }
class C{  public void removeResultChangedListener(ResultChangedListener l){  m_ResultPanel.removeResultChangedListener(l);}  }
class C{  public void addAll(Iterable<? extends Number> values){  for (  Number value : values) {    add(value.doubleValue());  }}  }
class C{  public static boolean doBasicMirrorValidation(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  if (!VirtualPool.vPoolSpecifiesFileReplication(currentVpool)) {    notSuppReasonBuff.append(String.format("File replication is not enabled in virtual pool - %s" + " of the requested file system -%s ",currentVpool.getLabel(),fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.TARGET.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is an active Target file system.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  public static void toDo(String tag){  toDoSet.put(tag);}  }
class C{  @SuppressWarnings("unchecked") public <T>ChainedIterable<T> castTypeParam(){  return (ChainedIterable<T>)this;}  }
class C{  public static int binarySearch(short[] array,int startIndex,int endIndex,short value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public int restoreAll(long token,RestoreObserver observer){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restoreAll() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restoreAll(token,mObserver);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore");  }  return err;}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer("StunTimeoutEvent:\n\tMessage=");  buff.append(getMessage());  buff.append(" localAddr=").append(getLocalAddress());  return buff.toString();}  }
class C{  public void removeFromAllListeners(MapBean mapBean){  if (mapBean != null) {    removeZoomListener((ZoomListener)mapBean);    mapBean.removeProjectionListener(this);    scaleField.setText("----");  }}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static void insertStatement(ArrayList<File> list,File dir) throws Exception {  for (int i=0; i < list.size(); i++) {    ArrayList<String> lines=new ArrayList<>();    lines.add("package " + dir.getName() + ";");    try (Scanner input=new Scanner(list.get(i))){      while (input.hasNext()) {        lines.add(input.nextLine());      }    }     try (PrintWriter output=new PrintWriter(list.get(i))){      for (int j=0; j < lines.size(); j++) {        output.println(lines.get(j));      }    }   }}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_BayesNet=bayesNet;  double fScore=calcScore(bayesNet);  Operation oOperation=getOptimalOperation(bayesNet,instances);  while ((oOperation != null) && (oOperation.m_fScore > fScore)) {    performOperation(bayesNet,instances,oOperation);    fScore=oOperation.m_fScore;    oOperation=getOptimalOperation(bayesNet,instances);  }}  }
class C{  public Token createToken(final Segment line,final int beg,final int end,final int startOffset,final int type){  return createToken(line.array,beg,end,startOffset,type);}  }
class C{  public Option value(String name,Object value){  if (values == null) {    values=new HashMap<String,Object>();  }  values.put(name,value);  return this;}  }
class C{  public static boolean isGerund(final String word){  if ((word.length() > 4) && word.endsWith("ing")) {    for (int i=word.length() - 3; --i >= 0; ) {      if (isVowel(word.charAt(i))) {        return true;      }    }  }  return false;}  }
class C{  public void testSelectionIndicatorConfig(final View v){  final Intent testActivity=new Intent(this,TestSelectionIndicatorConfig.class);  startActivity(testActivity);}  }
class C{  public void applyToOr(TextView textView,ColorStateList colorDefault){  if (mColorInt != 0) {    textView.setTextColor(mColorInt);  } else   if (mColorRes != -1) {    textView.setTextColor(ContextCompat.getColor(textView.getContext(),mColorRes));  } else   if (colorDefault != null) {    textView.setTextColor(colorDefault);  }}  }
class C{  public static Drawable makeBubbleDrawable(Drawable icon,Drawable background){  return new LayerDrawable(new Drawable[]{icon,background});}  }
class C{  void update(DownloadFileInfo downloadFileInfo){  if (downloadFileInfo.mId != null && downloadFileInfo.mId > 0) {    this.mId=downloadFileInfo.mId;  }  if (UrlUtil.isUrl(downloadFileInfo.mUrl)) {    this.mUrl=downloadFileInfo.mUrl;  }  if (downloadFileInfo.mDownloadedSize > 0 && downloadFileInfo.mDownloadedSize != this.mDownloadedSize) {    this.mDownloadedSize=downloadFileInfo.mDownloadedSize;  }  if (downloadFileInfo.mFileSize > 0 && downloadFileInfo.mFileSize != this.mFileSize) {    this.mFileSize=downloadFileInfo.mFileSize;  }  if (!TextUtils.isEmpty(downloadFileInfo.mETag)) {    this.mETag=downloadFileInfo.mETag;  }  if (!TextUtils.isEmpty(downloadFileInfo.mLastModified)) {    this.mLastModified=downloadFileInfo.mLastModified;  }  if (!TextUtils.isEmpty(downloadFileInfo.mAcceptRangeType)) {    this.mAcceptRangeType=downloadFileInfo.mAcceptRangeType;  }  if (FileUtil.isFilePath(downloadFileInfo.mFileDir)) {    this.mFileDir=downloadFileInfo.mFileDir;  }  if (!TextUtils.isEmpty(downloadFileInfo.mTempFileName)) {    this.mTempFileName=downloadFileInfo.mTempFileName;  }  if (!TextUtils.isEmpty(downloadFileInfo.mFileName)) {    this.mFileName=downloadFileInfo.mFileName;  }  if (downloadFileInfo.mStatus != this.mStatus) {    this.mStatus=downloadFileInfo.mStatus;  }  if (!TextUtils.isEmpty(downloadFileInfo.mCreateDatetime)) {    this.mCreateDatetime=downloadFileInfo.mCreateDatetime;  }}  }
class C{  public void finish() throws IOException {  if (this.httpResponse != null) {    final HttpEntity httpEntity=this.httpResponse.getEntity();    if (httpEntity != null && httpEntity.isStreaming()) {      EntityUtils.consumeQuietly(httpEntity);    }    this.httpResponse.close();  }  if (this.currentRequest != null) {    ConnectionInfo.removeConnection(this.currentRequest.hashCode());    this.currentRequest.abort();    this.currentRequest=null;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.135 -0500",hash_original_method="D8D55646997B45206CD2F0528B603753",hash_generated_method="CD41910D170D208E7EF5E3E2D52AF223") private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public static boolean isValidCharset(String charset){  try {    Charset.forName(charset);  } catch (  UnsupportedCharsetException e) {    return false;  }  return true;}  }
class C{  MysqlSavepoint(String name,ExceptionInterceptor exceptionInterceptor) throws SQLException {  if (name == null || name.length() == 0) {    throw SQLError.createSQLException("Savepoint name can not be NULL or empty",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,exceptionInterceptor);  }  this.savepointName=name;  this.exceptionInterceptor=exceptionInterceptor;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static GdbVersion parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_VERSION.matcher(output);  if (matcher.find()) {    String name=matcher.group(1);    String version=matcher.group(2);    return new GdbVersion(name,version);  }  throw new GdbParseException(GdbVersion.class,output);}  }
class C{  private static float[] convertToFloatArray(double[] samples){  float[] converted=new float[samples.length];  for (int x=0; x < samples.length; x++) {    converted[x]=(float)samples[x];  }  return converted;}  }
class C{  public void englishNetwork(Network network){  Vertex question=createQuestion("?",Primitive.QUESTION_MARK,network);  question.addRelationship(Primitive.INSTANTIATION,Primitive.PUNCTUATION);  createQuestion("who",Primitive.WHO,network);  createQuestion("what",Primitive.WHAT,network);  createQuestion("when",Primitive.WHEN,network);  createQuestion("where",Primitive.WHERE,network);  createQuestion("why",Primitive.WHY,network);  createQuestion("how",Primitive.HOW,network);  createQuestion("do",Primitive.DO,network);  createQuestion("does",Primitive.DO,network);  Vertex trueVertex=network.createVertex(Primitive.TRUE);  createWord("true",trueVertex,network);  createWord("yes",trueVertex,network);  createWord("correct",trueVertex,network);  Vertex falseVertex=network.createVertex(Primitive.FALSE);  createWord("false",falseVertex,network);  createWord("no",falseVertex,network);  createWord("incorrect",falseVertex,network);  Vertex unknown=network.createVertex(Primitive.UNKNOWN);  createWord("unknown",unknown,network);  createWord("not sure",unknown,network);  createWord("I don't know",unknown,network);  Vertex known=network.createVertex(Primitive.KNOWN);  createWord("I understand",known,network);  createWord("OK",known,network);  Vertex not=network.createVertex(Primitive.NOT);  createWord("not",not,true,network);  createWord("no",not,network);  createWord("negative",not,network);  createWord("inverse",not,network);  Vertex or=network.createVertex(Primitive.OR);  createWord("or",or,network);  Vertex and=network.createVertex(Primitive.AND);  createWord("and",and,true,network);  createWord("&",and,network);  Vertex comma=network.createVertex(Primitive.COMMA);  createPunctuation(",",comma,network);  Vertex period=network.createVertex(Primitive.PERIOD);  createPunctuation(".",period,network);  Vertex exclamation=network.createVertex(Primitive.EXCLAMATION);  createPunctuation("!",exclamation,network);  createPunctuation(";",network.createVertex(),network);  createPunctuation(":",network.createVertex(),network);  createPunctuation("'",network.createVertex(Primitive.QUOTE),network);  createPunctuation("`",network.createVertex(Primitive.QUOTE),network);  createPunctuation("\"",network.createVertex(Primitive.QUOTE),network);  Vertex the=network.createVertex(Primitive.THE);  createArticle("the",the,network);  Vertex a=network.createVertex(Primitive.A);  createArticle("a",a,network);  createArticle("an",a,network);  Vertex ifVertex=network.createVertex(Primitive.IF);  createWord("if",ifVertex,network);  Vertex i=network.createVertex(Primitive.I);  i.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  i.addRelationship(Primitive.VARIABLE,Primitive.SPEAKER);  Vertex word=createPronoun("I",i,network,Primitive.SUBJECTIVE);  word=createPronoun("me",i,network,Primitive.OBJECTIVE);  word=createPronoun("my",i,network,Primitive.POSSESSIVE);  word=createPronoun("myself",i,network,Primitive.REFLEXIVE);  word=createPronoun("mine",i,network,Primitive.POSSESSIVEPRONOUN);  createWord("I",i,true,network);  Vertex our=network.createVertex(Primitive.OUR);  our.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  our.addRelationship(Primitive.ASSOCIATED,Primitive.PLURAL);  our.addRelationship(Primitive.VARIABLE,Primitive.SPEAKER);  word=createPronoun("we",our,network,Primitive.SUBJECTIVE);  word=createPronoun("our",our,network,Primitive.POSSESSIVE);  word=createPronoun("us",our,network,Primitive.OBJECTIVE);  word=createPronoun("ours",our,network,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("ourselves",our,network,Primitive.REFLEXIVE);  createWord("we",our,true,network);  Vertex they=network.createVertex(Primitive.THEY);  they.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  they.addRelationship(Primitive.ASSOCIATED,Primitive.PLURAL);  Vertex theyVariable=getVariable(they,network);  theyVariable.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  word=createPronoun("they",they,network,Primitive.SUBJECTIVE);  word=createPronoun("them",they,network,Primitive.OBJECTIVE);  word=createPronoun("their",they,network,Primitive.POSSESSIVE);  word=createPronoun("theirs",they,network,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("themselves",they,network,Primitive.REFLEXIVE);  Vertex you=network.createVertex(Primitive.YOU);  you.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  you.addRelationship(Primitive.VARIABLE,Primitive.TARGET);  word=createPronoun("your",you,network,Primitive.POSSESSIVE);  word=createPronoun("ur",you,network,Primitive.POSSESSIVE);  word=createPronoun("you",you,network,Primitive.SUBJECTIVE,Primitive.OBJECTIVE);  word=createPronoun("yourself",you,network,Primitive.REFLEXIVE);  word=createPronoun("yours",you,network,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("u",you,network,Primitive.SUBJECTIVE,Primitive.OBJECTIVE);  createWord("you",you,true,network);  createWord("your",you,true,network);  Vertex his=network.createVertex(Primitive.HIS);  his.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  his.addRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  his.addRelationship(Primitive.GENDER,Primitive.MALE);  his.removeRelationship(Primitive.GENDER,Primitive.FEMALE);  Vertex hisVariable=getVariable(his,network);  hisVariable.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  hisVariable.addRelationship(Primitive.GENDER,Primitive.MALE);  hisVariable.removeRelationship(Primitive.GENDER,Primitive.FEMALE);  word=createPronoun("his",his,network,Primitive.POSSESSIVE,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("he",his,network,Primitive.SUBJECTIVE);  word=createPronoun("him",his,network,Primitive.OBJECTIVE);  word=createPronoun("himself",his,network,Primitive.REFLEXIVE);  Vertex her=network.createVertex(Primitive.HER);  her.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  her.addRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  her.addRelationship(Primitive.GENDER,Primitive.FEMALE);  her.removeRelationship(Primitive.GENDER,Primitive.MALE);  Vertex herVariable=getVariable(her,network);  herVariable.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  herVariable.addRelationship(Primitive.GENDER,Primitive.FEMALE);  herVariable.removeRelationship(Primitive.GENDER,Primitive.MALE);  word=createPronoun("her",her,network,Primitive.OBJECTIVE,Primitive.POSSESSIVE);  word=createPronoun("hers",her,network,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("she",her,network,Primitive.SUBJECTIVE);  word=createPronoun("herself",her,network,Primitive.REFLEXIVE);  Vertex thisWord=network.createVertex(Primitive.THIS);  thisWord.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  thisWord.removeRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  Vertex thisVariable=getVariable(thisWord,network);  thisVariable.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  thisVariable.removeRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  word=createPronoun("this",thisWord,network,null);  word=createPronoun("that",thisWord,network,null);  word=createPronoun("these",thisWord,network,null);  word=createPronoun("those",thisWord,network,null);  Vertex it=network.createVertex(Primitive.IT);  it.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  it.removeRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  Vertex itVariable=getVariable(it,network);  itVariable.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  itVariable.removeRelationship(Primitive.INSTANTIATION,Primitive.SPEAKER);  word=createPronoun("it",it,network,Primitive.SUBJECTIVE,Primitive.OBJECTIVE);  word=createPronoun("its",it,network,Primitive.POSSESSIVE,Primitive.POSSESSIVEPRONOUN);  word=createPronoun("itsself",it,network,Primitive.REFLEXIVE);  Vertex action=network.createVertex(Primitive.ACTION);  Vertex toBe=network.createVertex(Primitive.IS);  toBe.addRelationship(Primitive.INSTANTIATION,action);  word=createVerb("is",toBe,Primitive.PRESENT,network,new String[]{"mine","yours","his","hers","thiers","ours","he","she"});  word=createVerb("are",toBe,Primitive.PRESENT,network,new String[]{"you","they","we"});  word=createVerb("was",toBe,Primitive.PAST,network,new String[]{"i","I","he","she","mine","yours","his","hers","thiers"});  word=createVerb("were",toBe,Primitive.PAST,network,new String[]{"you","they","we"});  word=createVerb("r",toBe,Primitive.PRESENT,network,new String[]{"u"});  word=createVerb("am",toBe,Primitive.PRESENT,network,new String[]{"i","I"});  word=createVerb("will be",toBe,Primitive.FUTURE,network,null);  createWord("is",toBe,true,network);  Vertex have=network.createVertex(Primitive.HAVE);  have.addRelationship(Primitive.INSTANTIATION,action);  word=createVerb("have",have,Primitive.PRESENT,network,new String[]{"i","I","you","they","we"});  word=createVerb("has",have,Primitive.PRESENT,network,new String[]{"he","she"});  createVerb("had",have,Primitive.PAST,network,null);  createVerb("will have",have,Primitive.FUTURE,network,null);  Vertex isA=network.createVertex(Primitive.INSTANTIATION);  isA.addRelationship(Primitive.INSTANTIATION,action);  createVerb("instance of",isA,Primitive.PRESENT,network,null);  createVerb("instantiation",isA,Primitive.PRESENT,network,null);  Vertex means=network.createVertex(Primitive.MEANING);  means.addRelationship(Primitive.INSTANTIATION,action);  createVerb("means",means,Primitive.PRESENT,network,null);  Vertex thing=network.createVertex(Primitive.THING);  action.addRelationship(Primitive.INSTANTIATION,thing);  createNoun("action",action,network);  createNoun("verb",action,network);  Vertex description=network.createVertex(Primitive.DESCRIPTION);  description.addRelationship(Primitive.INSTANTIATION,thing);  createNoun("description",description,network);  createNoun("adjective",description,network);  thing.addRelationship(Primitive.INSTANTIATION,thing);  createNoun("thing",thing,network);  createNoun("noun",thing,network);  Vertex speaker=network.createVertex(Primitive.SPEAKER);  speaker.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  speaker.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("speaker",speaker,network);  Vertex gender=network.createVertex(Primitive.GENDER);  gender.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("gender",gender,network);  createNoun("sex",gender,network);  Vertex male=network.createVertex(Primitive.MALE);  male.addRelationship(Primitive.INSTANTIATION,Primitive.DESCRIPTION);  male.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  male.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  createAdjective("male",male,network);  createAdjective("boy",male,network);  createAdjective("man",male,network);  Vertex female=network.createVertex(Primitive.FEMALE);  female.addRelationship(Primitive.INSTANTIATION,Primitive.DESCRIPTION);  female.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  female.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);  createAdjective("female",female,network);  createAdjective("girl",female,network);  createAdjective("woman",female,network);  Vertex next=network.createVertex(Primitive.NEXT);  createWord("next",next,network);  next.addRelationship(Primitive.INSTANTIATION,Primitive.ACTION);  Vertex previous=network.createVertex(Primitive.PREVIOUS);  createWord("previous",previous,network);  previous.addRelationship(Primitive.INSTANTIATION,Primitive.ACTION);  Vertex name=network.createVertex(Primitive.NAME);  name.addRelationship(Primitive.INSTANTIATION,thing);  createNoun("name",name,network);  createTypo("nam",name,network);  createTypo("naem",name,network);  Vertex time=network.createVertex(Primitive.TIME);  time.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("time",time,network);  Vertex hour=network.createVertex(Primitive.HOUR);  hour.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("hour",hour,network);  createNoun("hr",hour,network);  Vertex minute=network.createVertex(Primitive.MINUTE);  minute.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("minute",minute,network);  createNoun("min",minute,network);  Vertex second=network.createVertex(Primitive.SECOND);  second.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("second",second,network);  createNoun("sec",second,network);  Vertex timezone=network.createVertex(Primitive.TIMEZONE);  timezone.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("timezone",timezone,network);  createNoun("tz",timezone,network);  Vertex am=network.createVertex(Primitive.AM);  am.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("AM",am,network);  Vertex pm=network.createVertex(Primitive.PM);  pm.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("PM",pm,network);  Vertex date=network.createVertex(Primitive.DATE);  date.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("date",date,network);  Vertex day=network.createVertex(Primitive.DAY);  day.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("day",day,network);  Vertex month=network.createVertex(Primitive.MONTH);  month.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("month",month,network);  Vertex year=network.createVertex(Primitive.YEAR);  time.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("year",year,network);  for (  Primitive eachMonth : Primitive.MONTHS) {    month=network.createVertex(eachMonth);    time.addRelationship(Primitive.INSTANTIATION,Primitive.THING);    time.addRelationship(Primitive.INSTANTIATION,Primitive.MONTH);    createName(Utils.capitalize(eachMonth.getIdentity()),month,network);  }  for (  Primitive eachDayOfWeek : Primitive.DAYS_OF_WEEK) {    Vertex dayOfWeek=network.createVertex(eachDayOfWeek);    time.addRelationship(Primitive.INSTANTIATION,Primitive.THING);    time.addRelationship(Primitive.INSTANTIATION,Primitive.DAY);    createName(Utils.capitalize(eachDayOfWeek.getIdentity()),dayOfWeek,network);  }  Vertex url=network.createVertex(Primitive.URL);  url.addRelationship(Primitive.INSTANTIATION,Primitive.THING);  createNoun("URL",url,network);  Vertex self=network.createVertex(Primitive.SELF);  String botName=network.getBot().getName();  word=createWord(Utils.capitalize(botName),self,network,Primitive.NAME);  self.addRelationship(name,word);}  }
class C{  public String toCommaSeparatedString(){  StringBuffer sb=new StringBuffer(VERSION);  sb.append(',');  for (int i=0; i < Token.NUM_TOKEN_TYPES; i++) {    sb.append(i).append(',');    Style ss=styles[i];    if (ss == null) {      sb.append("-,-,f,-,,,");      continue;    }    Color c=ss.foreground;    sb.append(c != null ? (getHexString(c) + ",") : "-,");    c=ss.background;    sb.append(c != null ? (getHexString(c) + ",") : "-,");    sb.append(ss.underline ? "t," : "f,");    Font font=ss.font;    if (font != null) {      sb.append(font.getFamily()).append(',').append(font.getStyle()).append(',').append(font.getSize()).append(',');    } else {      sb.append("-,,,");    }  }  return sb.substring(0,sb.length() - 1);}  }
class C{  static private String userIdDate(int prefixLength,String dateFormat){  String[] dateRequest={"#function","date","currentDate",dateFormat};  String prefix=StringFunctions.randomString(StringFunctions.alphaMixedNumeric(),prefixLength);  String date=DateFunctions.executeFunction(dateRequest);  return prefix + date;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void processAPAdded(AP ap){  String dpid=ap.getDpid();  int ip=IPv4.toIPv4Address(ap.getIp());  Iterator<ACLRule> iter=this.ruleSet.iterator();  while (iter.hasNext()) {    ACLRule rule=iter.next();    if (rule.getNw_src() != null) {      if (IPAddressUtil.containIP(rule.getNw_src_prefix(),rule.getNw_src_maskbits(),ip)) {        if (ruleId2Dpid.get(rule.getId()).contains(dpid)) {          continue;        }        String flowName="ACLRule_" + rule.getId() + "_"+ dpid;        ruleId2FlowName.get(rule.getId()).add(flowName);        ruleId2Dpid.get(rule.getId()).add(dpid);        generateFlow(rule,dpid,flowName);      }    } else {      if (IPAddressUtil.containIP(rule.getNw_dst_prefix(),rule.getNw_dst_maskbits(),ip)) {        if (ruleId2Dpid.get(rule.getId()).contains(dpid)) {          continue;        }        String flowName="ACLRule_" + rule.getId() + "_"+ dpid;        ruleId2FlowName.get(rule.getId()).add(flowName);        ruleId2Dpid.get(rule.getId()).add(dpid);        generateFlow(rule,dpid,flowName);      }    }  }}  }
class C{  @Override public boolean matches(SolrDocument doc){  for (  Term term : this.terms) {    if (!term.matches(doc))     return false;  }  return true;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.960 -0500",hash_original_method="FA022850E89BAA01DC8A711414675DE7",hash_generated_method="D072F1DB76073C5678A4C631350B2B2D") public void write(char[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public static void rotate(float[] ray,int first,int new_first,int last){  int next=new_first;  while (next != first) {    float temp=ray[first];    ray[first]=ray[next];    ray[next]=temp;    first++;    next++;    if (next == last) {      next=new_first;    } else     if (first == new_first) {      new_first=next;    }  }}  }
class C{  public static CtMethod make(CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,String body,CtClass declaring) throws CannotCompileException {  return make(Modifier.PUBLIC,returnType,mname,parameters,exceptions,body,declaring);}  }
class C{  public void service(ConnectionProtocol request){  RequestBaratine req=(RequestBaratine)request;  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    if (_webApp != null) {      thread.setContextClassLoader(_webApp.classLoader());    }    for (    RouteBaratine route : _routes) {      if (route.service(req)) {        return;      }    }    if (_routes.length > 0) {      req.halt(HttpStatus.METHOD_NOT_ALLOWED);    } else {      req.halt(HttpStatus.NOT_FOUND);    }  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  public char charAt(int index){  return ' ';}  }
class C{  public ExtendedBufferCapabilities(BufferCapabilities caps,VSyncType t){  super(caps.getFrontBufferCapabilities(),caps.getBackBufferCapabilities(),caps.getFlipContents());  this.vsync=t;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  @Override public void close() throws IOException {  if (!selfClosed) {    selfClosed=true;    notifyWatcher();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.161 -0500",hash_original_method="45EF0D9994A51A34EA10DF4A185E8F21",hash_generated_method="2619631381D97BC4F9BCEC4E74E8BD78") public ContactHeader createContactHeader(Address address){  if (address == null)   throw new NullPointerException("null arg address");  Contact contact=new Contact();  contact.setAddress(address);  return contact;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/hosts") @Deprecated public TaskResourceRep createHost(@PathParam("id") URI tid,HostCreateParam createParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection){  TenantOrg tenant=getTenantById(tid,true);  HostService hostService=_hostService;  hostService.validateHostData(createParam,tid,null,validateConnection);  Host host=hostService.createNewHost(tenant,createParam);  host.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());  _dbClient.createObject(host);  recordTenantResourceOperation(OperationTypeEnum.CREATE_HOST,tid,host);  return hostService.doDiscoverHost(host);}  }
class C{  public void resetHandlers(){  atRoot=true;  path="/";  pathStack.clear();  handlerStack.clear();  handlers.clear();  defaultHandler=null;}  }
class C{  @After public void basicTearDown() throws Exception {  defaultDatabaseTearDown(fbManager);  fbManager=null;}  }
class C{  public static String quoteIdentifier(String s){  if (s == null || s.length() == 0) {    return "\"\"";  }  char c=s.charAt(0);  if ((!Character.isLetter(c) && c != '_') || Character.isLowerCase(c)) {    return StringUtils.quoteIdentifier(s);  }  for (int i=1, length=s.length(); i < length; i++) {    c=s.charAt(i);    if ((!Character.isLetterOrDigit(c) && c != '_') || Character.isLowerCase(c)) {      return StringUtils.quoteIdentifier(s);    }  }  if (isKeyword(s,true)) {    return StringUtils.quoteIdentifier(s);  }  return s;}  }
class C{  public h3(Element element){  addElement(element);}  }
class C{  public UnrelocatedAddress(final IAddress address){  m_address=address;}  }
class C{  public static URI createURI(String filename){  String os=System.getProperty("os.name");  boolean isWindows=os.startsWith("Windows");  boolean isUnix=!isWindows;  String fname=filename;  URI uri=URI.createURI(fname);  boolean isUnixAbsolutePath=isUnix && fname.startsWith("/");  if (uri.isRelative() && !isUnixAbsolutePath) {    String cwd=System.getProperty("user.dir");    fname=cwd + File.separator + fname;    uri=URI.createURI(fname);  }  if (uri.scheme() != null) {    if (isWindows && uri.scheme().length() == 1) {      return URI.createFileURI(fname);    } else {      return uri;    }  } else   if (isUnix && fname.startsWith("/")) {    return URI.createFileURI(fname);  } else {    return uri;  }}  }
class C{  public void populateSequenceListForSegment(List<SequenceTypeTuple> sequenceTypeTuples,org.smpte_ra.schemas.st2067_2_2016.SegmentType segment){  org.smpte_ra.schemas.st2067_2_2016.ObjectFactory objectFactory=new org.smpte_ra.schemas.st2067_2_2016.ObjectFactory();  JAXBElement<SequenceType> element=null;  List<Object> any=segment.getSequenceList().getAny();  for (  SequenceTypeTuple sequenceTypeTuple : sequenceTypeTuples) {switch (sequenceTypeTuple.getSequenceType()) {case MainImageSequence:      element=objectFactory.createMainImageSequence(sequenceTypeTuple.getSequence());    break;case MainAudioSequence:  element=objectFactory.createMainAudioSequence(sequenceTypeTuple.getSequence());break;default :throw new IMFAuthoringException(String.format("Currently we only support %s and %s sequence types in building a Composition Playlist document, the type of sequence being requested is %s",Composition.SequenceTypeEnum.MainAudioSequence.toString(),Composition.SequenceTypeEnum.MainImageSequence,sequenceTypeTuple.getSequenceType().toString()));}any.add(element);}}  }
class C{  public CubePortrayal3D(Color color,double scale){  this(appearanceForColor(color),false,scale);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  nodeType=(int)textNode.getNodeType();  assertEquals("nodeTextNodeTypeAssert1",3,nodeType);}  }
class C{  private CoderResult switchDecoder(short lastByte,CharBuffer cb){  CoderResult cr=CoderResult.UNDERFLOW;  CharsetDecoder decoder=null;  boolean high=false;  byte[] escSequence;  byte[] encoding=null;  if (lastByte != 0) {    queue.write(lastByte);  }  escSequence=queue.toByteArray();  queue.reset();  if (state == CHARSET_NONSTANDARD) {    encoding=encodingQueue.toByteArray();    encodingQueue.reset();    decoder=CompoundTextSupport.getNonStandardDecoder(escSequence,encoding);  } else {    decoder=CompoundTextSupport.getStandardDecoder(escSequence);    high=CompoundTextSupport.getHighBit(escSequence);  }  if (decoder != null) {    initDecoder(decoder);  } else   if (unmappableCharacterAction() == CodingErrorAction.REPORT) {    int badInputLength=1;    if (encoding != null) {      badInputLength=encoding.length;    } else     if (escSequence.length > 0) {      badInputLength=escSequence.length;    }    return CoderResult.unmappableForLength(badInputLength);  }  if (state == CHARSET_NLIIF || state == CHARSET_NLIF || state == CHARSET_LIIF || state == CHARSET_LIF) {    if (lastDecoder == glDecoder) {      cr=flushDecoder(glDecoder,cb);    }    glDecoder=lastDecoder=decoder;    glHigh=high;    state=NORMAL_BYTES;  } else   if (state == CHARSET_NRIIF || state == CHARSET_NRIF || state == CHARSET_RIIF || state == CHARSET_RIF) {    if (lastDecoder == grDecoder) {      cr=flushDecoder(grDecoder,cb);    }    grDecoder=lastDecoder=decoder;    grHigh=high;    state=NORMAL_BYTES;  } else   if (state == CHARSET_NONSTANDARD) {    if (lastDecoder != null) {      cr=flushDecoder(lastDecoder,cb);      lastDecoder=null;    }    nonStandardDecoder=decoder;    state=NONSTANDARD_BYTES;  } else {    error(ERR_ILLSTATE);  }  return cr;}  }
class C{  public boolean isRefVisible(){  return getRefControl().isVisible();}  }
class C{  final public void Escape() throws ParseException {  ASTEscape jjtn000=new ASTEscape(this,JJTESCAPE);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    Token t=null;    int count=0;    boolean control=false;    label_2:     while (true) {      t=jj_consume_token(DOUBLE_ESCAPE);      count++;      if (jj_2_2(2)) {        ;      } else {        break label_2;      }    }    jjtree.closeNodeScope(jjtn000,true);    jjtc000=false;switch (t.next.kind) {case IF_DIRECTIVE:case ELSE_DIRECTIVE:case ELSEIF_DIRECTIVE:case END:case STOP_DIRECTIVE:      control=true;    break;}if (isDirective(t.next.image.substring(1))) control=true; else if (rsvc.isVelocimacro(t.next.image.substring(1),currentTemplateName)) control=true;jjtn000.val="";for (int i=0; i < count; i++) jjtn000.val+=(control ? "\\" : "\\\\");}  finally {if (jjtc000) {  jjtree.closeNodeScope(jjtn000,true);}}}  }
class C{  public static AlbumImpl createStreaming(Context context,String name,HostFileSender hostFileSender){  return new AlbumImpl(new ScreenshotDirectories(context),name,hostFileSender);}  }
class C{  public void testOuterJoinSequenceWithWhitespaces() throws Exception {  check("t OUTER JOIN t2 ON t.id=t2.id","{ oj t OUTER JOIN t2 ON t.id=t2.id}");  check("t OUTER JOIN t2 ON t.id=t2.id","{    oj  t OUTER JOIN t2 ON t.id=t2.id}");  check("t OUTER JOIN t2 ON t.id=t2.id","  \n { oj\nt OUTER JOIN t2 ON t.id=t2.id}");}  }
class C{  private void registerAchievementToDB(String achievement,String desc,String name){  String query;  if (databaseType == POSTGRESQL) {    query="INSERT INTO " + tablePrefix + "achievements VALUES (?,?,?,?) ON CONFLICT (playername,achievement) DO UPDATE SET (description,date)=(?,?)";  } else {    query="REPLACE INTO " + tablePrefix + "achievements VALUES (?,?,?,?)";  }  Connection conn=getSQLConnection();  try (PreparedStatement prep=conn.prepareStatement(query)){    prep.setString(1,name);    prep.setString(2,achievement);    prep.setString(3,desc);    prep.setDate(4,new java.sql.Date(new java.util.Date().getTime()));    if (databaseType == POSTGRESQL) {      prep.setString(5,desc);      prep.setDate(6,new java.sql.Date(new java.util.Date().getTime()));    }    prep.execute();  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while registering achievement: ",e);  }}  }
class C{  public Polygon createPolygon(LinearRing shell){  return createPolygon(shell,null);}  }
class C{  public static ChannelNumberAttribute createChannelNumberAttribute(char channelNumber){  ChannelNumberAttribute attribute=new ChannelNumberAttribute();  attribute.setChannelNumber(channelNumber);  return attribute;}  }
class C{  @Override public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);  if (mimeType != null) {    attrs.add(new XmlWriter.Attribute("type",mimeType.getMediaType()));  }  if (uri != null) {    attrs.add(new XmlWriter.Attribute("src",uri));  }  if (etag != null && !Service.getVersion().isCompatible(Service.Versions.V1)) {    attrs.add(new XmlWriter.Attribute(Namespaces.gAlias,"etag",etag));  }  if (lang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",lang));  }  w.simpleElement(Namespaces.atomNs,"content",attrs,null);}  }
class C{  public static float parseFloat(String s){  if (POSITIVE_INFINITY.equals(s)) {    return Float.POSITIVE_INFINITY;  } else   if (NEGATIVE_INFINITY.equals(s)) {    return Float.NEGATIVE_INFINITY;  } else   if (NaN.equals(s)) {    return Float.NaN;  } else {    s=trimPlusSign(s);    return Float.parseFloat(s);  }}  }
class C{  public static int compareCanonicalFloats(String float1,String float2){  return compareCanonicalFPNumbers(float1,float2);}  }
class C{  final int tf(DisiWrapper topList) throws IOException {  int tf=0;  for (DisiWrapper w=topList; w != null; w=w.next) {    tf+=w.scorer.freq();  }  return tf;}  }
class C{  private void newline(){  print("\n");}  }
class C{  public CataclysmicDemographic(Type units){  super(units);}  }
class C{  public Source<Float> fromNegativeFloatMaxToPositiveFloatMax(){  return Compositions.weightWithValues(Floats.fromNegativeFloatMaxToPositiveFloatMax(),-Float.MAX_VALUE,Float.MAX_VALUE);}  }
class C{  public int hashCode(){  return 37 * 17 + krb5PrincipalName.getName().hashCode();}  }
class C{  protected Object evaluateLeftEqualsRight(List elements,String lvalue,String rvalue){  List array;  if (elements instanceof java.util.Vector) {    array=new java.util.Vector();  } else {    array=new ArrayList();  }  for (Iterator e=elements.iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof StructuredContent) {      if ((o=evaluateLeftEqualsRight((StructuredContent)o,lvalue,rvalue)) != null) {        array.add(o);      }    }  }  if (array.size() == 1) {    return (StructuredContent)array.get(0);  }  return array;}  }
class C{  private CLayoutFunctions(){}  }
class C{  public void post(CoapHandler handler,String payload,int format){  asynchronous(format(newPost().setURI(uri).setPayload(payload),format),handler);}  }
class C{  public static PeerComponent create(Object nativePeer){  if (nativePeer == null) {    return null;  }  return Display.impl.createNativePeer(nativePeer);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (null != m_errorHandler) {    try {      m_errorHandler.fatalError(e);    } catch (    SAXParseException se) {    }  }  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).fatalError(e);    if (null != m_errorHandler)     m_errorHandler.fatalError(e);  } else {    try {      errorListener.fatalError(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.fatalError(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public CommMessage createAggregatedRequest(CommMessage message) throws URISyntaxException {  return new CommMessage(CommMessage.getNewMessageId(),message.operationName(),getResourcePath(),message.value(),message.fault());}  }
class C{  public JParamsText(){  initComponents();  setLabel(AppLocal.getIntString("label.value"));  setType(Formats.STRING);}  }
class C{  public void addPcaps(byte[] pcaps){  this.pcaps.add(pcaps);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.999 -0500",hash_original_method="C2E661A0F0E8603FDB28C1E5F6957C6B",hash_generated_method="95DC2C129422F64A66344E11E737DF10") public TelephoneNumber(){  parameters=new NameValueList();}  }
class C{  public void removeThread(WaitingThread wt){  if (wt == null)   return;  this.waitingThreads.remove(wt);}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  String systemOutput=system.getSettings().systemOutput;  if (updatedVars.contains(systemOutput) && state.hasChanceNode(systemOutput) && !isPaused) {    Value utteranceVal=state.queryProb(systemOutput).toDiscrete().getBest();    if (utteranceVal instanceof StringVal) {      synthesise(utteranceVal.toString());    }  }}  }
class C{  public HttpRequestOptions(HttpRequestOptions other){  this._connTimeout=other._connTimeout;  this._socketTimeout=other._socketTimeout;  this._maxRedirects=other._maxRedirects;  this._maxBodySize=other._maxBodySize;  if (other._requestHeaders != null)   this._requestHeaders=new HashMap(other._requestHeaders);  this._useCache=other._useCache;  this._contentType=other._contentType;  this._allowCircularRedirects=other._allowCircularRedirects;  this._cacheTTLSeconds=other._cacheTTLSeconds;}  }
class C{  public static BigInteger parseInteger(String s){  s=trimPlusSign(s);  return new BigInteger(s);}  }
class C{  private void co_entry_pause() throws SAXException {  if (fCoroutineManager == null) {    init(null,-1,-1);  }  try {    Object arg=fCoroutineManager.co_entry_pause(fSourceCoroutineID);    if (arg == Boolean.FALSE)     co_yield(false);  } catch (  NoSuchMethodException e) {    if (DEBUG)     e.printStackTrace();    throw new SAXException(e);  }}  }
class C{  private void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static boolean isXML(Object o){  if (o instanceof Node || o instanceof NodeList)   return true;  if (o instanceof ObjectWrap) {    return isXML(((ObjectWrap)o).getEmbededObject(null));  }  try {    XMLCaster.toXMLStruct(XMLUtil.parse(XMLUtil.toInputSource(null,o),null,false),false);    return true;  } catch (  Exception outer) {    return false;  }}  }
class C{  public boolean isFunctionRow(int row){  return m_functionRows.contains(new Integer(row));}  }
class C{  private static void conditionalSwap(double[] array,int[] index,int left,int right){  if (array[index[left]] > array[index[right]]) {    int help=index[left];    index[left]=index[right];    index[right]=help;  }}  }
class C{  protected List<Node> createDiscreteVariableList(DiscreteVariableAnalysis variableAnalysis){  List<Node> nodes=new ArrayList<>(variableAnalysis.getNumOfCols());  DiscreteVarInfo[] variables=variableAnalysis.getDiscreteVarInfos();  for (  DiscreteVarInfo variable : variables) {    if (variable != null) {      nodes.add(new DiscreteVariable(variable.getName(),variable.getCategories()));    }  }  return nodes;}  }
class C{  protected void fireColumnMarginChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((TableColumnModelListener)listeners[i + 1]).columnMarginChanged(changeEvent);    }  }}  }
class C{  @Interruptible public static synchronized void registerSpecializedScan(int id,Class<?> specializedScanClass){  specializedScans[id]=specializedScanClass;}  }
class C{  public void add(Closeable closeable){  requestResources.add(closeable);}  }
class C{  public boolean remove(String suffix){  boolean result;  Character c;  String newSuffix;  TrieNode child;  c=suffix.charAt(0);  newSuffix=suffix.substring(1);  child=m_Children.get(c);  if (child == null) {    result=false;  } else   if (newSuffix.length() == 0) {    remove(c);    result=true;  } else {    result=child.remove(newSuffix);    if (child.getChildCount() == 0) {      remove(child.getChar());    }  }  return result;}  }
class C{  public Email cc(String... cc){  if (cc == null)   throw new IllegalArgumentException("cc == null");  this.ccList.addAll(Arrays.asList(cc));  return this;}  }
class C{  private void allowIntroductionToShowAgain(){  final SharedPreferences sp=getSharedPreferences(ExampleActivity.DISPLAY_ONCE_PREFS,MODE_PRIVATE);  sp.edit().putBoolean(ExampleActivity.DISPLAY_ONCE_KEY,false).apply();}  }
class C{  RelayObserver<T>[] next(Object n){  setLatest(n);  return get().observers;}  }
class C{  public void removeAttributes(AttributeSet attrs){  StyleContext context=StyleContext.this;  if (attrs == this) {    attributes=context.getEmptySet();  } else {    attributes=context.removeAttributes(attributes,attrs);  }  fireStateChanged();}  }
class C{  public static void check(boolean cond,int value){  if (!cond)   error(String.valueOf(value));}  }
class C{  public _QueueOptions(){  super();}  }
class C{  public ShowHideStatusBarAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ShowHideStatusBarAction.statusbar"));  putValue(NAME,res.getString("ShowHideStatusBarAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ShowHideStatusBarAction.tooltip"));}  }
class C{  private void verifyManagementServiceStarted(Cache cache){  assertTrue(cache != null);  this.managementService=ManagementService.getExistingManagementService(cache);  assertNotNull(this.managementService);  assertTrue(this.managementService.isManager());  assertTrue(checkIfCommandsAreLoadedOrNot());}  }
class C{  protected void convertProxyError(Throwable ex,String msg) throws JMSException {  if (ex instanceof Error) {    Error err=(Error)ex;    LOGGER.logWarning(msg,err);    throw err;  } else   if (ex instanceof RuntimeException) {    RuntimeException rte=(RuntimeException)ex;    LOGGER.logWarning(msg,ex);    throw rte;  } else   if (ex instanceof JMSException) {    JMSException driverError=(JMSException)ex;    LOGGER.logWarning(msg,ex);    Exception linkedException=driverError.getLinkedException();    if (linkedException != null)     LOGGER.logWarning("linked exception is ",linkedException);    throw driverError;  } else   if (ex instanceof InvocationTargetException) {    InvocationTargetException ite=(InvocationTargetException)ex;    Throwable cause=ite.getCause();    if (cause != null) {      if (LOGGER.isTraceEnabled())       LOGGER.logTrace(msg,ite);      convertProxyError(cause,msg);    } else {      AtomikosJMSException.throwAtomikosJMSException(msg,ite);    }  }  AtomikosJMSException.throwAtomikosJMSException(msg,ex);}  }
class C{  public void loadCompete(){  for (int i=0; i < getTabCount(); i++)   getTab(i).getMTable().loadComplete();}  }
class C{  public VideoQuality(int resX,int resY,int framerate,int bitrate,int orientation){  this.framerate=framerate;  this.bitrate=bitrate;  this.resX=resX;  this.resY=resY;  this.orientation=orientation;}  }
class C{  @Override public boolean isClosed(){  return connectionState == cs_APP_CLOSED;}  }
class C{  void run() throws Exception {  Set<Example> examples=getExamples();  Set<String> notYetList=getNotYetList();  Set<String> declaredKeys=new TreeSet<String>();  for (  Example e : examples) {    Set<String> e_decl=e.getDeclaredKeys();    Set<String> e_actual=e.getActualKeys();    for (    String k : e_decl) {      if (!e_actual.contains(k))       error("Example " + e + " declares key "+ k+ " but does not generate it");    }    for (    String k : e_actual) {      if (!e_decl.contains(k))       error("Example " + e + " generates key "+ k+ " but does not declare it");    }    for (    String k : e.getDeclaredKeys()) {      if (notYetList.contains(k))       error("Example " + e + " declares key "+ k+ " which is also on the \"not yet\" list");      declaredKeys.add(k);    }  }  ResourceBundle b=ResourceBundle.getBundle("com.sun.tools.javac.resources.compiler");  Set<String> resourceKeys=new TreeSet<String>(b.keySet());  for (  String dk : declaredKeys) {    if (!resourceKeys.contains(dk))     error("Key " + dk + " is declared in tests but is not a valid key in resource bundle");  }  for (  String nk : notYetList) {    if (!resourceKeys.contains(nk))     error("Key " + nk + " is declared in not-yet list but is not a valid key in resource bundle");  }  for (  String rk : resourceKeys) {    if (!declaredKeys.contains(rk) && !notYetList.contains(rk))     error("Key " + rk + " is declared in resource bundle but is not in tests or not-yet list");  }  System.err.println(examples.size() + " examples checked");  System.err.println(notYetList.size() + " keys on not-yet list");  Counts declaredCounts=new Counts(declaredKeys);  Counts resourceCounts=new Counts(resourceKeys);  List<String> rows=new ArrayList<String>(Arrays.asList(Counts.prefixes));  rows.add("other");  rows.add("total");  System.err.println();  System.err.println(String.format("%-14s %15s %15s %4s","prefix","#keys in tests","#keys in javac","%"));  for (  String p : rows) {    int d=declaredCounts.get(p);    int r=resourceCounts.get(p);    System.err.print(String.format("%-14s %15d %15d",p,d,r));    if (r != 0)     System.err.print(String.format(" %3d%%",(d * 100) / r));    System.err.println();  }  if (errors > 0)   throw new Exception(errors + " errors occurred.");}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2,splitSize=2) @Override public long findMaximumInPrimitiveArray(long[] input){  return findMaximumInPrimitiveArray0(input);}  }
class C{  @SuppressWarnings("static-access") public Gui(){  super();  s_parameters=Parameters.getParameters();  s_logger=MigrateLogger.getLogger();  s_dbEngine=DBEngine.getDBEngine();  setTextMode(true);  if (s_parameters.isGuiMode())   setTextMode(java.awt.GraphicsEnvironment.isHeadless());}  }
class C{  @Override protected boolean connectInput(Node i,int n){  if (!super.connectInput(i,n)) {    return false;  }  double[] newWeights=new double[weights.length + 1];  System.arraycopy(weights,0,newWeights,0,weights.length);  newWeights[newWeights.length - 1]=this.randomGenerator.nextDouble() * 0.1d - 0.05d;  weights=newWeights;  double[] newWeightChanges=new double[weightChanges.length + 1];  System.arraycopy(weightChanges,0,newWeightChanges,0,weightChanges.length);  newWeightChanges[newWeightChanges.length - 1]=0;  weightChanges=newWeightChanges;  return true;}  }
class C{  public void decode(InputStream in) throws InvalidKeyException {  DerValue val;  try {    val=new DerValue(in);    if (val.tag != DerValue.tag_Sequence)     throw new InvalidKeyException("invalid key format");    algid=AlgorithmId.parse(val.data.getDerValue());    setKey(val.data.getUnalignedBitString());    parseKeyBits();    if (val.data.available() != 0)     throw new InvalidKeyException("excess key data");  } catch (  IOException e) {    throw new InvalidKeyException("IOException: " + e.getMessage());  }}  }
class C{  public boolean isResetValuesSet(){  return ((resetValues != null) || (getValueExpression(RESET_VALUES) != null));}  }
class C{  public boolean joinSimple(Thread thread,long millis,int nanos){  long waitUntil=System.currentTimeMillis() + millis;  boolean interrupted=false;  while (true) {    long remainingMillis=waitUntil - System.currentTimeMillis();    boolean timeout=remainingMillis < 0 || (remainingMillis == 0 && nanos == 0);    if (timeout) {      break;    }    try {      thread.join(remainingMillis,nanos);      break;    } catch (    InterruptedException e) {      interrupted=true;    }  }  if (interrupted) {    Thread.currentThread().interrupt();  }  boolean stopped=!thread.isAlive();  return stopped;}  }
class C{  public int compareTo(Vector2 o){  return Vector2.compareTo(this,o);}  }
class C{  public static void previousImage(final IdocFrame ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getNumPages() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  protected void sequence_ParameterizedTypeRefNominal(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void dumpLKPIndex(File path) throws IOException {  if (0 != this.depth) {    return;  }  Set<String> gtsKeys=new HashSet<String>();synchronized (this.lkpIndex) {    gtsKeys.addAll(this.lkpIndex.keySet());  }  OutputStream out=new FileOutputStream(path);  try {    for (    String key : gtsKeys) {      long[] cells=this.lkpIndex.get(key);      if (null == cells) {        continue;      }      byte[] id=key.getBytes(Charsets.UTF_8);      out.write(id.length);      out.write(id);      out.write(cells.length);      for (      long cell : cells) {        out.write(Longs.toByteArray(cell));      }    }  }  finally {    out.close();  }}  }
class C{  public boolean isKnownSub(String subName){  return KNOWN_SUBS.contains(subName);}  }
class C{  @Override final public boolean isKeys(){  return false;}  }
class C{  static int findLimit(InputStream in){  if (in instanceof LimitedInputStream) {    return ((LimitedInputStream)in).getRemaining();  } else   if (in instanceof ASN1InputStream) {    return ((ASN1InputStream)in).getLimit();  } else   if (in instanceof ByteArrayInputStream) {    return ((ByteArrayInputStream)in).available();  } else   if (in instanceof FileInputStream) {    try {      FileChannel channel=((FileInputStream)in).getChannel();      long size=(channel != null) ? channel.size() : Integer.MAX_VALUE;      if (size < Integer.MAX_VALUE) {        return (int)size;      }    } catch (    IOException e) {    }  }  if (MAX_MEMORY > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  }  return (int)MAX_MEMORY;}  }
class C{  private RestResponse postOrPutImpl(final boolean doPost) throws RestException {  if (urlString == null) {    throw new RestException("No URL is set");  }  try {    URLConnection connection;    if (doPost) {      connection=initURLConnection(urlString,"POST");    } else {      connection=initURLConnection(urlString,"PUT");    }    for (    final Map.Entry<String,String> header : headers.entrySet()) {      connection.setRequestProperty(header.getKey(),header.getValue());    }    connection.setDoOutput(true);    connection.setRequestProperty("Accept-Charset","UTF-8");    if (body != null) {      final OutputStream outputStream=connection.getOutputStream();      outputStream.write(body);      outputStream.close();    } else     if (!parameters.isEmpty()) {      connection.setRequestProperty("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");      final OutputStream outputStream=connection.getOutputStream();      outputStream.write(parametersToQueryString().getBytes("UTF-8"));      outputStream.close();    }    final int statusCode=connectionStatus(connection);    final String mimeType=connection.getContentType();    final byte[] body=responseBodyBytes(connection);    return new RestResponse(statusCode,mimeType,body);  } catch (  IOException e) {    throw new RestException(e);  }}  }
class C{  public static Set<String> readStopwordsFile(String location,boolean lowercase) throws IOException {  return readStopwordsFile(new File(location),lowercase);}  }
class C{  public MarketService expire(long expire){  this.expire=expire;  return this;}  }
class C{  @Override public <T extends DataObject>void remove(T... objs) throws DatabaseException {  this.remove(Arrays.asList(objs));}  }
